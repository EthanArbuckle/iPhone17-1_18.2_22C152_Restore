void sub_274824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2749FC()
{
}

uint64_t sub_274A10(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 32;
  v3 = *(uint64_t (**)(uint64_t, double *))(a1 + 40);
  v4 = *(double (**)(double *, uint64_t))(a1 + 56);
  double v6 = (*(double (**)(uint64_t, void))(a1 + 48))(a1 + 16, *(void *)(a1 + 24));
  double v7 = v4(&v6, v2);
  return v3(v1, &v7);
}

void sub_274A80(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F65E0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_24F65E0))
  {
    goto LABEL_2;
  }
  sub_24AA24((uint64_t)&v30);
  uint64_t v2 = std::string::insert(&v30, 0, "(");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v31, ")o((");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_24D754((uint64_t)v28);
  if ((v29 & 0x80u) == 0) {
    double v6 = v28;
  }
  else {
    double v6 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v7 = v29;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v28[1];
  }
  v8 = std::string::append(&v32, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v33, "o");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v26);
  if ((v27 & 0x80u) == 0) {
    v12 = v26;
  }
  else {
    v12 = (void **)v26[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v13 = v27;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v26[1];
  }
  v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v35, ")o(");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_24D754((uint64_t)__p);
  if ((v25 & 0x80u) == 0) {
    v18 = __p;
  }
  else {
    v18 = (void **)__p[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v19 = v25;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  v20 = std::string::append(&v36, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v37, "))");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  unk_24F65D8 = *((void *)&v22->__r_.__value_.__l + 2);
  xmmword_24F65C8 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if (((char)v25 & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_38;
    }
  }
  else if (((char)v25 & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if (((char)v27 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (((char)v27 & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v26[0]);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v34.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if (((char)v29 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v33.__r_.__value_.__l.__data_);
  if (((char)v29 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v28[0]);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_45:
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_46:
    operator delete(v30.__r_.__value_.__l.__data_);
    goto LABEL_35;
  }
LABEL_44:
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_45;
  }
LABEL_34:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_35:
  __cxa_guard_release(&qword_24F65E0);
LABEL_2:
  if (byte_24F65DF < 0)
  {
    sub_4200((unsigned char *)a1, (void *)xmmword_24F65C8, *((unint64_t *)&xmmword_24F65C8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_24F65C8;
    *(void *)(a1 + 16) = unk_24F65D8;
  }
}

void sub_274DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (*(char *)(v52 - 41) < 0)
  {
    operator delete(*(void **)(v52 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v52 - 73) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v52 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v52 - 105) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v52 - 96));
  if ((*(char *)(v52 - 105) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v52 - 128));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v52 - 137) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a15);
  if ((*(char *)(v52 - 137) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v52 - 160));
  if ((a52 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a47);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a21);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_12:
    __cxa_guard_abort(&qword_24F65E0);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a27);
  __cxa_guard_abort(&qword_24F65E0);
  _Unwind_Resume(a1);
}

void sub_274F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    JUMPOUT(0x274F58);
  }
  JUMPOUT(0x274E2CLL);
}

void sub_274F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    JUMPOUT(0x274F68);
  }
  JUMPOUT(0x274E34);
}

void sub_274FA4(_Unwind_Exception *a1)
{
}

void sub_274FBC(int a1@<W1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  memset(&v31, 0, sizeof(v31));
  std::string::reserve(&v31, 0x40uLL);
  v8 = sub_24A498(&v31, "t");
  long long v9 = v8;
  switch(a1)
  {
    case 2:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "+");
      break;
    case 3:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "-");
      break;
    case 4:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "*");
      break;
    case 5:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "/");
      break;
    case 6:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "%");
      break;
    case 7:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "^");
      break;
    case 14:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "<");
      break;
    case 15:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15676;
      goto LABEL_18;
    case 16:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15677;
      goto LABEL_18;
    case 18:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15649;
      goto LABEL_18;
    case 20:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15678;
      goto LABEL_18;
    case 21:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, ">");
      break;
    case 22:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "and");
      break;
    case 23:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1684955502;
      goto LABEL_22;
    case 24:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 29295;
LABEL_18:
      *(_WORD *)__s = v11;
      __s[2] = 0;
      break;
    case 25:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "nor");
      break;
    case 26:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "xor");
      break;
    case 27:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1919905400;
LABEL_22:
      *(_DWORD *)__s = v12;
      __s[4] = 0;
      break;
    default:
      std::string::size_type v10 = 7;
      char v30 = 7;
      strcpy(__s, "UNKNOWN");
      break;
  }
  std::string::append(v8, __s, v10);
  std::string::size_type v13 = sub_24A498(v9, "((t");
  v14 = v13;
  switch(a2)
  {
    case 2:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "+");
      break;
    case 3:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "-");
      break;
    case 4:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "*");
      break;
    case 5:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "/");
      break;
    case 6:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "%");
      break;
    case 7:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "^");
      break;
    case 14:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "<");
      break;
    case 15:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15676;
      goto LABEL_40;
    case 16:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15677;
      goto LABEL_40;
    case 18:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15649;
      goto LABEL_40;
    case 20:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15678;
      goto LABEL_40;
    case 21:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, ">");
      break;
    case 22:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "and");
      break;
    case 23:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1684955502;
      goto LABEL_44;
    case 24:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 29295;
LABEL_40:
      *(_WORD *)unsigned __int8 v27 = v16;
      v27[2] = 0;
      break;
    case 25:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "nor");
      break;
    case 26:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "xor");
      break;
    case 27:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1919905400;
LABEL_44:
      *(_DWORD *)unsigned __int8 v27 = v17;
      v27[4] = 0;
      break;
    default:
      std::string::size_type v15 = 7;
      char v28 = 7;
      strcpy(v27, "UNKNOWN");
      break;
  }
  std::string::append(v13, v27, v15);
  v18 = sub_24A498(v14, "t)");
  std::string::size_type v19 = v18;
  switch(a3)
  {
    case 2:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 43;
      break;
    case 3:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 45;
      break;
    case 4:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 42;
      break;
    case 5:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 47;
      break;
    case 6:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 37;
      break;
    case 7:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 94;
      break;
    case 14:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 60;
      break;
    case 15:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15676;
      goto LABEL_62;
    case 16:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15677;
      goto LABEL_62;
    case 18:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15649;
      goto LABEL_62;
    case 20:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15678;
      goto LABEL_62;
    case 21:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 62;
      break;
    case 22:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 6581857;
      break;
    case 23:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1684955502;
      goto LABEL_66;
    case 24:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 29295;
LABEL_62:
      LOWORD(__p[0]) = v21;
      BYTE2(__p[0]) = 0;
      break;
    case 25:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499630;
      break;
    case 26:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499640;
      break;
    case 27:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1919905400;
LABEL_66:
      LODWORD(__p[0]) = v22;
      BYTE4(__p[0]) = 0;
      break;
    default:
      std::string::size_type v20 = 7;
      char v26 = 7;
      strcpy((char *)__p, "UNKNOWN");
      break;
  }
  std::string::append(v18, (const std::string::value_type *)__p, v20);
  long long v23 = sub_24A498(v19, "t)");
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200((unsigned char *)a4, v23->__r_.__value_.__l.__data_, v23->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(void *)(a4 + 16) = *((void *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)a4 = v24;
  }
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_72:
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_77;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(*(void **)v27);
  if ((v30 & 0x80000000) == 0)
  {
LABEL_73:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_78:
    operator delete(v31.__r_.__value_.__l.__data_);
    return;
  }
LABEL_77:
  operator delete(*(void **)__s);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_78;
  }
}

void sub_27565C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_275834()
{
}

uint64_t sub_275848(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = a1 + 32;
  long long v3 = *(uint64_t (**)(uint64_t, double *))(a1 + 40);
  v4 = *(double (**)(double *, uint64_t))(a1 + 56);
  double v6 = (*(double (**)(void, void))(a1 + 48))(*(void *)(a1 + 16), *(void *)(a1 + 24));
  double v7 = v4(&v6, v2);
  return v3(v1, &v7);
}

void sub_2758B4(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6600, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_24F6600))
  {
    goto LABEL_2;
  }
  sub_24D754((uint64_t)&v30);
  uint64_t v2 = std::string::insert(&v30, 0, "(");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v31, ")o((");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v28);
  if ((v29 & 0x80u) == 0) {
    double v6 = v28;
  }
  else {
    double v6 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v7 = v29;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v28[1];
  }
  v8 = std::string::append(&v32, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v10 = std::string::append(&v33, "o");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v26);
  if ((v27 & 0x80u) == 0) {
    int v12 = v26;
  }
  else {
    int v12 = (void **)v26[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v13 = v27;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v26[1];
  }
  v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  __int16 v16 = std::string::append(&v35, ")o(");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_24D754((uint64_t)__p);
  if ((v25 & 0x80u) == 0) {
    v18 = __p;
  }
  else {
    v18 = (void **)__p[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v19 = v25;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  std::string::size_type v20 = std::string::append(&v36, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  int v22 = std::string::append(&v37, "))");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  unk_24F65F8 = *((void *)&v22->__r_.__value_.__l + 2);
  xmmword_24F65E8 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if (((char)v25 & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_38;
    }
  }
  else if (((char)v25 & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if (((char)v27 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (((char)v27 & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v26[0]);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v34.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if (((char)v29 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v33.__r_.__value_.__l.__data_);
  if (((char)v29 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v28[0]);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_45:
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_46:
    operator delete(v30.__r_.__value_.__l.__data_);
    goto LABEL_35;
  }
LABEL_44:
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_45;
  }
LABEL_34:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_35:
  __cxa_guard_release(&qword_24F6600);
LABEL_2:
  if (byte_24F65FF < 0)
  {
    sub_4200((unsigned char *)a1, (void *)xmmword_24F65E8, *((unint64_t *)&xmmword_24F65E8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_24F65E8;
    *(void *)(a1 + 16) = unk_24F65F8;
  }
}

void sub_275C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (*(char *)(v52 - 41) < 0)
  {
    operator delete(*(void **)(v52 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v52 - 73) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v52 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v52 - 105) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v52 - 96));
  if ((*(char *)(v52 - 105) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v52 - 128));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v52 - 137) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a15);
  if ((*(char *)(v52 - 137) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v52 - 160));
  if ((a52 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a47);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a21);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_12:
    __cxa_guard_abort(&qword_24F6600);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a27);
  __cxa_guard_abort(&qword_24F6600);
  _Unwind_Resume(a1);
}

void sub_275DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    JUMPOUT(0x275D8CLL);
  }
  JUMPOUT(0x275C60);
}

void sub_275DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    JUMPOUT(0x275D9CLL);
  }
  JUMPOUT(0x275C68);
}

void sub_275DD8(_Unwind_Exception *a1)
{
}

void sub_275DF0(int a1@<W1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  memset(&v31, 0, sizeof(v31));
  std::string::reserve(&v31, 0x40uLL);
  v8 = sub_24A498(&v31, "((t");
  long long v9 = v8;
  switch(a1)
  {
    case 2:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "+");
      break;
    case 3:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "-");
      break;
    case 4:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "*");
      break;
    case 5:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "/");
      break;
    case 6:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "%");
      break;
    case 7:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "^");
      break;
    case 14:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "<");
      break;
    case 15:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15676;
      goto LABEL_18;
    case 16:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15677;
      goto LABEL_18;
    case 18:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15649;
      goto LABEL_18;
    case 20:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15678;
      goto LABEL_18;
    case 21:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, ">");
      break;
    case 22:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "and");
      break;
    case 23:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1684955502;
      goto LABEL_22;
    case 24:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 29295;
LABEL_18:
      *(_WORD *)__s = v11;
      __s[2] = 0;
      break;
    case 25:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "nor");
      break;
    case 26:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "xor");
      break;
    case 27:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1919905400;
LABEL_22:
      *(_DWORD *)__s = v12;
      __s[4] = 0;
      break;
    default:
      std::string::size_type v10 = 7;
      char v30 = 7;
      strcpy(__s, "UNKNOWN");
      break;
  }
  std::string::append(v8, __s, v10);
  std::string::size_type v13 = sub_24A498(v9, "t)");
  v14 = v13;
  switch(a2)
  {
    case 2:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "+");
      break;
    case 3:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "-");
      break;
    case 4:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "*");
      break;
    case 5:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "/");
      break;
    case 6:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "%");
      break;
    case 7:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "^");
      break;
    case 14:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "<");
      break;
    case 15:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15676;
      goto LABEL_40;
    case 16:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15677;
      goto LABEL_40;
    case 18:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15649;
      goto LABEL_40;
    case 20:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15678;
      goto LABEL_40;
    case 21:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, ">");
      break;
    case 22:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "and");
      break;
    case 23:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1684955502;
      goto LABEL_44;
    case 24:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 29295;
LABEL_40:
      *(_WORD *)unsigned __int8 v27 = v16;
      v27[2] = 0;
      break;
    case 25:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "nor");
      break;
    case 26:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "xor");
      break;
    case 27:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1919905400;
LABEL_44:
      *(_DWORD *)unsigned __int8 v27 = v17;
      v27[4] = 0;
      break;
    default:
      std::string::size_type v15 = 7;
      char v28 = 7;
      strcpy(v27, "UNKNOWN");
      break;
  }
  std::string::append(v13, v27, v15);
  v18 = sub_24A498(v14, "t)");
  std::string::size_type v19 = v18;
  switch(a3)
  {
    case 2:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 43;
      break;
    case 3:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 45;
      break;
    case 4:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 42;
      break;
    case 5:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 47;
      break;
    case 6:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 37;
      break;
    case 7:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 94;
      break;
    case 14:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 60;
      break;
    case 15:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15676;
      goto LABEL_62;
    case 16:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15677;
      goto LABEL_62;
    case 18:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15649;
      goto LABEL_62;
    case 20:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15678;
      goto LABEL_62;
    case 21:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 62;
      break;
    case 22:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 6581857;
      break;
    case 23:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1684955502;
      goto LABEL_66;
    case 24:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 29295;
LABEL_62:
      LOWORD(__p[0]) = v21;
      BYTE2(__p[0]) = 0;
      break;
    case 25:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499630;
      break;
    case 26:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499640;
      break;
    case 27:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1919905400;
LABEL_66:
      LODWORD(__p[0]) = v22;
      BYTE4(__p[0]) = 0;
      break;
    default:
      std::string::size_type v20 = 7;
      char v26 = 7;
      strcpy((char *)__p, "UNKNOWN");
      break;
  }
  std::string::append(v18, (const std::string::value_type *)__p, v20);
  long long v23 = sub_24A498(v19, "t");
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200((unsigned char *)a4, v23->__r_.__value_.__l.__data_, v23->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(void *)(a4 + 16) = *((void *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)a4 = v24;
  }
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_72:
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_77;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(*(void **)v27);
  if ((v30 & 0x80000000) == 0)
  {
LABEL_73:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_78:
    operator delete(v31.__r_.__value_.__l.__data_);
    return;
  }
LABEL_77:
  operator delete(*(void **)__s);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_78;
  }
}

void sub_276490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_276668()
{
}

uint64_t sub_27667C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(double (**)(double *, uint64_t))(a1 + 48);
  v4 = *(uint64_t (**)(double *, uint64_t))(a1 + 56);
  double v6 = (*(double (**)(void, void))(a1 + 40))(*(void *)(a1 + 8), *(void *)(a1 + 16));
  double v7 = v3(&v6, v1);
  return v4(&v7, v2);
}

void sub_2766E4(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6620, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_24F6620))
  {
    goto LABEL_2;
  }
  sub_24AA24((uint64_t)&v30);
  uint64_t v2 = std::string::insert(&v30, 0, "((");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v31, "o");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v28);
  if ((v29 & 0x80u) == 0) {
    double v6 = v28;
  }
  else {
    double v6 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v7 = v29;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v28[1];
  }
  v8 = std::string::append(&v32, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v10 = std::string::append(&v33, ")o(");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v26);
  if ((v27 & 0x80u) == 0) {
    int v12 = v26;
  }
  else {
    int v12 = (void **)v26[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v13 = v27;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v26[1];
  }
  v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  __int16 v16 = std::string::append(&v35, "))o(");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)__p);
  if ((v25 & 0x80u) == 0) {
    v18 = __p;
  }
  else {
    v18 = (void **)__p[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v19 = v25;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  std::string::size_type v20 = std::string::append(&v36, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  int v22 = std::string::append(&v37, ")");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  unk_24F6618 = *((void *)&v22->__r_.__value_.__l + 2);
  xmmword_24F6608 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if (((char)v25 & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_38;
    }
  }
  else if (((char)v25 & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if (((char)v27 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (((char)v27 & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v26[0]);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v34.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if (((char)v29 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v33.__r_.__value_.__l.__data_);
  if (((char)v29 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v28[0]);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_45:
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_46:
    operator delete(v30.__r_.__value_.__l.__data_);
    goto LABEL_35;
  }
LABEL_44:
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_45;
  }
LABEL_34:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_35:
  __cxa_guard_release(&qword_24F6620);
LABEL_2:
  if (byte_24F661F < 0)
  {
    sub_4200((unsigned char *)a1, (void *)xmmword_24F6608, *((unint64_t *)&xmmword_24F6608 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_24F6608;
    *(void *)(a1 + 16) = unk_24F6618;
  }
}

void sub_276A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (*(char *)(v52 - 41) < 0)
  {
    operator delete(*(void **)(v52 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v52 - 73) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v52 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v52 - 105) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v52 - 96));
  if ((*(char *)(v52 - 105) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v52 - 128));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v52 - 137) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a15);
  if ((*(char *)(v52 - 137) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v52 - 160));
  if ((a52 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a47);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a21);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_12:
    __cxa_guard_abort(&qword_24F6620);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a27);
  __cxa_guard_abort(&qword_24F6620);
  _Unwind_Resume(a1);
}

void sub_276BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    JUMPOUT(0x276BBCLL);
  }
  JUMPOUT(0x276A90);
}

void sub_276BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    JUMPOUT(0x276BCCLL);
  }
  JUMPOUT(0x276A98);
}

void sub_276C08(_Unwind_Exception *a1)
{
}

void sub_276C20(int a1@<W1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  memset(&v31, 0, sizeof(v31));
  std::string::reserve(&v31, 0x40uLL);
  v8 = sub_24A498(&v31, "((t");
  long long v9 = v8;
  switch(a1)
  {
    case 2:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "+");
      break;
    case 3:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "-");
      break;
    case 4:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "*");
      break;
    case 5:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "/");
      break;
    case 6:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "%");
      break;
    case 7:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "^");
      break;
    case 14:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "<");
      break;
    case 15:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15676;
      goto LABEL_18;
    case 16:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15677;
      goto LABEL_18;
    case 18:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15649;
      goto LABEL_18;
    case 20:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15678;
      goto LABEL_18;
    case 21:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, ">");
      break;
    case 22:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "and");
      break;
    case 23:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1684955502;
      goto LABEL_22;
    case 24:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 29295;
LABEL_18:
      *(_WORD *)__s = v11;
      __s[2] = 0;
      break;
    case 25:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "nor");
      break;
    case 26:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "xor");
      break;
    case 27:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1919905400;
LABEL_22:
      *(_DWORD *)__s = v12;
      __s[4] = 0;
      break;
    default:
      std::string::size_type v10 = 7;
      char v30 = 7;
      strcpy(__s, "UNKNOWN");
      break;
  }
  std::string::append(v8, __s, v10);
  std::string::size_type v13 = sub_24A498(v9, "t)");
  v14 = v13;
  switch(a2)
  {
    case 2:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "+");
      break;
    case 3:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "-");
      break;
    case 4:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "*");
      break;
    case 5:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "/");
      break;
    case 6:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "%");
      break;
    case 7:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "^");
      break;
    case 14:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "<");
      break;
    case 15:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15676;
      goto LABEL_40;
    case 16:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15677;
      goto LABEL_40;
    case 18:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15649;
      goto LABEL_40;
    case 20:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15678;
      goto LABEL_40;
    case 21:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, ">");
      break;
    case 22:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "and");
      break;
    case 23:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1684955502;
      goto LABEL_44;
    case 24:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 29295;
LABEL_40:
      *(_WORD *)unsigned __int8 v27 = v16;
      v27[2] = 0;
      break;
    case 25:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "nor");
      break;
    case 26:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "xor");
      break;
    case 27:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1919905400;
LABEL_44:
      *(_DWORD *)unsigned __int8 v27 = v17;
      v27[4] = 0;
      break;
    default:
      std::string::size_type v15 = 7;
      char v28 = 7;
      strcpy(v27, "UNKNOWN");
      break;
  }
  std::string::append(v13, v27, v15);
  v18 = sub_24A498(v14, "t)");
  std::string::size_type v19 = v18;
  switch(a3)
  {
    case 2:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 43;
      break;
    case 3:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 45;
      break;
    case 4:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 42;
      break;
    case 5:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 47;
      break;
    case 6:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 37;
      break;
    case 7:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 94;
      break;
    case 14:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 60;
      break;
    case 15:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15676;
      goto LABEL_62;
    case 16:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15677;
      goto LABEL_62;
    case 18:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15649;
      goto LABEL_62;
    case 20:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15678;
      goto LABEL_62;
    case 21:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 62;
      break;
    case 22:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 6581857;
      break;
    case 23:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1684955502;
      goto LABEL_66;
    case 24:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 29295;
LABEL_62:
      LOWORD(__p[0]) = v21;
      BYTE2(__p[0]) = 0;
      break;
    case 25:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499630;
      break;
    case 26:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499640;
      break;
    case 27:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1919905400;
LABEL_66:
      LODWORD(__p[0]) = v22;
      BYTE4(__p[0]) = 0;
      break;
    default:
      std::string::size_type v20 = 7;
      char v26 = 7;
      strcpy((char *)__p, "UNKNOWN");
      break;
  }
  std::string::append(v18, (const std::string::value_type *)__p, v20);
  long long v23 = sub_24A498(v19, "t");
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200((unsigned char *)a4, v23->__r_.__value_.__l.__data_, v23->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(void *)(a4 + 16) = *((void *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)a4 = v24;
  }
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_72:
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_77;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(*(void **)v27);
  if ((v30 & 0x80000000) == 0)
  {
LABEL_73:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_78:
    operator delete(v31.__r_.__value_.__l.__data_);
    return;
  }
LABEL_77:
  operator delete(*(void **)__s);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_78;
  }
}

void sub_2772C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_277498()
{
}

uint64_t sub_2774AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = a1 + 32;
  long long v3 = *(double (**)(double *, uint64_t))(a1 + 48);
  v4 = *(uint64_t (**)(double *, uint64_t))(a1 + 56);
  double v6 = (*(double (**)(void, void))(a1 + 40))(*(void *)(a1 + 8), *(void *)(a1 + 16));
  double v7 = v3(&v6, v1);
  return v4(&v7, v2);
}

void sub_277518(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6640, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_24F6640))
  {
    goto LABEL_2;
  }
  sub_24AA24((uint64_t)&v30);
  uint64_t v2 = std::string::insert(&v30, 0, "((");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v31, "o");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v28);
  if ((v29 & 0x80u) == 0) {
    double v6 = v28;
  }
  else {
    double v6 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v7 = v29;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v28[1];
  }
  v8 = std::string::append(&v32, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v10 = std::string::append(&v33, ")o(");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v26);
  if ((v27 & 0x80u) == 0) {
    int v12 = v26;
  }
  else {
    int v12 = (void **)v26[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v13 = v27;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v26[1];
  }
  v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  __int16 v16 = std::string::append(&v35, "))o(");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_24D754((uint64_t)__p);
  if ((v25 & 0x80u) == 0) {
    v18 = __p;
  }
  else {
    v18 = (void **)__p[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v19 = v25;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  std::string::size_type v20 = std::string::append(&v36, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  int v22 = std::string::append(&v37, ")");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  unk_24F6638 = *((void *)&v22->__r_.__value_.__l + 2);
  xmmword_24F6628 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if (((char)v25 & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_38;
    }
  }
  else if (((char)v25 & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if (((char)v27 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (((char)v27 & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v26[0]);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v34.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if (((char)v29 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v33.__r_.__value_.__l.__data_);
  if (((char)v29 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v28[0]);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_45:
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_46:
    operator delete(v30.__r_.__value_.__l.__data_);
    goto LABEL_35;
  }
LABEL_44:
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_45;
  }
LABEL_34:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_35:
  __cxa_guard_release(&qword_24F6640);
LABEL_2:
  if (byte_24F663F < 0)
  {
    sub_4200((unsigned char *)a1, (void *)xmmword_24F6628, *((unint64_t *)&xmmword_24F6628 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_24F6628;
    *(void *)(a1 + 16) = unk_24F6638;
  }
}

void sub_277870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (*(char *)(v52 - 41) < 0)
  {
    operator delete(*(void **)(v52 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v52 - 73) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v52 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v52 - 105) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v52 - 96));
  if ((*(char *)(v52 - 105) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v52 - 128));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v52 - 137) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a15);
  if ((*(char *)(v52 - 137) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v52 - 160));
  if ((a52 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a47);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a21);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_12:
    __cxa_guard_abort(&qword_24F6640);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a27);
  __cxa_guard_abort(&qword_24F6640);
  _Unwind_Resume(a1);
}

void sub_277A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    JUMPOUT(0x2779F0);
  }
  JUMPOUT(0x2778C4);
}

void sub_277A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    JUMPOUT(0x277A00);
  }
  JUMPOUT(0x2778CCLL);
}

void sub_277A3C(_Unwind_Exception *a1)
{
}

void sub_277A54(int a1@<W1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  memset(&v31, 0, sizeof(v31));
  std::string::reserve(&v31, 0x40uLL);
  v8 = sub_24A498(&v31, "((t");
  long long v9 = v8;
  switch(a1)
  {
    case 2:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "+");
      break;
    case 3:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "-");
      break;
    case 4:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "*");
      break;
    case 5:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "/");
      break;
    case 6:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "%");
      break;
    case 7:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "^");
      break;
    case 14:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "<");
      break;
    case 15:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15676;
      goto LABEL_18;
    case 16:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15677;
      goto LABEL_18;
    case 18:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15649;
      goto LABEL_18;
    case 20:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15678;
      goto LABEL_18;
    case 21:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, ">");
      break;
    case 22:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "and");
      break;
    case 23:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1684955502;
      goto LABEL_22;
    case 24:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 29295;
LABEL_18:
      *(_WORD *)__s = v11;
      __s[2] = 0;
      break;
    case 25:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "nor");
      break;
    case 26:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "xor");
      break;
    case 27:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1919905400;
LABEL_22:
      *(_DWORD *)__s = v12;
      __s[4] = 0;
      break;
    default:
      std::string::size_type v10 = 7;
      char v30 = 7;
      strcpy(__s, "UNKNOWN");
      break;
  }
  std::string::append(v8, __s, v10);
  std::string::size_type v13 = sub_24A498(v9, "t)");
  v14 = v13;
  switch(a2)
  {
    case 2:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "+");
      break;
    case 3:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "-");
      break;
    case 4:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "*");
      break;
    case 5:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "/");
      break;
    case 6:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "%");
      break;
    case 7:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "^");
      break;
    case 14:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "<");
      break;
    case 15:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15676;
      goto LABEL_40;
    case 16:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15677;
      goto LABEL_40;
    case 18:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15649;
      goto LABEL_40;
    case 20:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15678;
      goto LABEL_40;
    case 21:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, ">");
      break;
    case 22:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "and");
      break;
    case 23:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1684955502;
      goto LABEL_44;
    case 24:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 29295;
LABEL_40:
      *(_WORD *)unsigned __int8 v27 = v16;
      v27[2] = 0;
      break;
    case 25:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "nor");
      break;
    case 26:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "xor");
      break;
    case 27:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1919905400;
LABEL_44:
      *(_DWORD *)unsigned __int8 v27 = v17;
      v27[4] = 0;
      break;
    default:
      std::string::size_type v15 = 7;
      char v28 = 7;
      strcpy(v27, "UNKNOWN");
      break;
  }
  std::string::append(v13, v27, v15);
  v18 = sub_24A498(v14, "t)");
  std::string::size_type v19 = v18;
  switch(a3)
  {
    case 2:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 43;
      break;
    case 3:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 45;
      break;
    case 4:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 42;
      break;
    case 5:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 47;
      break;
    case 6:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 37;
      break;
    case 7:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 94;
      break;
    case 14:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 60;
      break;
    case 15:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15676;
      goto LABEL_62;
    case 16:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15677;
      goto LABEL_62;
    case 18:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15649;
      goto LABEL_62;
    case 20:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15678;
      goto LABEL_62;
    case 21:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 62;
      break;
    case 22:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 6581857;
      break;
    case 23:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1684955502;
      goto LABEL_66;
    case 24:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 29295;
LABEL_62:
      LOWORD(__p[0]) = v21;
      BYTE2(__p[0]) = 0;
      break;
    case 25:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499630;
      break;
    case 26:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499640;
      break;
    case 27:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1919905400;
LABEL_66:
      LODWORD(__p[0]) = v22;
      BYTE4(__p[0]) = 0;
      break;
    default:
      std::string::size_type v20 = 7;
      char v26 = 7;
      strcpy((char *)__p, "UNKNOWN");
      break;
  }
  std::string::append(v18, (const std::string::value_type *)__p, v20);
  long long v23 = sub_24A498(v19, "t");
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200((unsigned char *)a4, v23->__r_.__value_.__l.__data_, v23->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(void *)(a4 + 16) = *((void *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)a4 = v24;
  }
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_72:
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_77;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(*(void **)v27);
  if ((v30 & 0x80000000) == 0)
  {
LABEL_73:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_78:
    operator delete(v31.__r_.__value_.__l.__data_);
    return;
  }
LABEL_77:
  operator delete(*(void **)__s);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_78;
  }
}

void sub_2780F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2782CC()
{
}

uint64_t sub_2782E0(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(double (**)(double *, uint64_t))(a1 + 48);
  v4 = *(uint64_t (**)(double *, uint64_t))(a1 + 56);
  double v6 = (*(double (**)(void, void))(a1 + 40))(*(void *)(a1 + 8), *(void *)(a1 + 16));
  double v7 = v3(&v6, v1);
  return v4(&v7, v2);
}

void sub_278348(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6660, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_24F6660))
  {
    goto LABEL_2;
  }
  sub_24AA24((uint64_t)&v30);
  uint64_t v2 = std::string::insert(&v30, 0, "((");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v31, "o");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v28);
  if ((v29 & 0x80u) == 0) {
    double v6 = v28;
  }
  else {
    double v6 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v7 = v29;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v28[1];
  }
  v8 = std::string::append(&v32, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v10 = std::string::append(&v33, ")o(");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_24D754((uint64_t)v26);
  if ((v27 & 0x80u) == 0) {
    int v12 = v26;
  }
  else {
    int v12 = (void **)v26[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v13 = v27;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v26[1];
  }
  v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  __int16 v16 = std::string::append(&v35, "))o(");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)__p);
  if ((v25 & 0x80u) == 0) {
    v18 = __p;
  }
  else {
    v18 = (void **)__p[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v19 = v25;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  std::string::size_type v20 = std::string::append(&v36, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  int v22 = std::string::append(&v37, ")");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  unk_24F6658 = *((void *)&v22->__r_.__value_.__l + 2);
  xmmword_24F6648 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if (((char)v25 & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_38;
    }
  }
  else if (((char)v25 & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if (((char)v27 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (((char)v27 & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v26[0]);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v34.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if (((char)v29 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v33.__r_.__value_.__l.__data_);
  if (((char)v29 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v28[0]);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_45:
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_46:
    operator delete(v30.__r_.__value_.__l.__data_);
    goto LABEL_35;
  }
LABEL_44:
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_45;
  }
LABEL_34:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_35:
  __cxa_guard_release(&qword_24F6660);
LABEL_2:
  if (byte_24F665F < 0)
  {
    sub_4200((unsigned char *)a1, (void *)xmmword_24F6648, *((unint64_t *)&xmmword_24F6648 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_24F6648;
    *(void *)(a1 + 16) = unk_24F6658;
  }
}

void sub_2786A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (*(char *)(v52 - 41) < 0)
  {
    operator delete(*(void **)(v52 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v52 - 73) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v52 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v52 - 105) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v52 - 96));
  if ((*(char *)(v52 - 105) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v52 - 128));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v52 - 137) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a15);
  if ((*(char *)(v52 - 137) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v52 - 160));
  if ((a52 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a47);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a21);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_12:
    __cxa_guard_abort(&qword_24F6660);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a27);
  __cxa_guard_abort(&qword_24F6660);
  _Unwind_Resume(a1);
}

void sub_27884C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    JUMPOUT(0x278820);
  }
  JUMPOUT(0x2786F4);
}

void sub_27885C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    JUMPOUT(0x278830);
  }
  JUMPOUT(0x2786FCLL);
}

void sub_27886C(_Unwind_Exception *a1)
{
}

void sub_278884(int a1@<W1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  memset(&v31, 0, sizeof(v31));
  std::string::reserve(&v31, 0x40uLL);
  v8 = sub_24A498(&v31, "((t");
  long long v9 = v8;
  switch(a1)
  {
    case 2:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "+");
      break;
    case 3:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "-");
      break;
    case 4:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "*");
      break;
    case 5:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "/");
      break;
    case 6:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "%");
      break;
    case 7:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "^");
      break;
    case 14:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "<");
      break;
    case 15:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15676;
      goto LABEL_18;
    case 16:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15677;
      goto LABEL_18;
    case 18:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15649;
      goto LABEL_18;
    case 20:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15678;
      goto LABEL_18;
    case 21:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, ">");
      break;
    case 22:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "and");
      break;
    case 23:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1684955502;
      goto LABEL_22;
    case 24:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 29295;
LABEL_18:
      *(_WORD *)__s = v11;
      __s[2] = 0;
      break;
    case 25:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "nor");
      break;
    case 26:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "xor");
      break;
    case 27:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1919905400;
LABEL_22:
      *(_DWORD *)__s = v12;
      __s[4] = 0;
      break;
    default:
      std::string::size_type v10 = 7;
      char v30 = 7;
      strcpy(__s, "UNKNOWN");
      break;
  }
  std::string::append(v8, __s, v10);
  std::string::size_type v13 = sub_24A498(v9, "t)");
  v14 = v13;
  switch(a2)
  {
    case 2:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "+");
      break;
    case 3:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "-");
      break;
    case 4:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "*");
      break;
    case 5:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "/");
      break;
    case 6:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "%");
      break;
    case 7:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "^");
      break;
    case 14:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "<");
      break;
    case 15:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15676;
      goto LABEL_40;
    case 16:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15677;
      goto LABEL_40;
    case 18:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15649;
      goto LABEL_40;
    case 20:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15678;
      goto LABEL_40;
    case 21:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, ">");
      break;
    case 22:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "and");
      break;
    case 23:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1684955502;
      goto LABEL_44;
    case 24:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 29295;
LABEL_40:
      *(_WORD *)unsigned __int8 v27 = v16;
      v27[2] = 0;
      break;
    case 25:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "nor");
      break;
    case 26:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "xor");
      break;
    case 27:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1919905400;
LABEL_44:
      *(_DWORD *)unsigned __int8 v27 = v17;
      v27[4] = 0;
      break;
    default:
      std::string::size_type v15 = 7;
      char v28 = 7;
      strcpy(v27, "UNKNOWN");
      break;
  }
  std::string::append(v13, v27, v15);
  v18 = sub_24A498(v14, "t)");
  std::string::size_type v19 = v18;
  switch(a3)
  {
    case 2:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 43;
      break;
    case 3:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 45;
      break;
    case 4:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 42;
      break;
    case 5:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 47;
      break;
    case 6:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 37;
      break;
    case 7:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 94;
      break;
    case 14:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 60;
      break;
    case 15:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15676;
      goto LABEL_62;
    case 16:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15677;
      goto LABEL_62;
    case 18:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15649;
      goto LABEL_62;
    case 20:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15678;
      goto LABEL_62;
    case 21:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 62;
      break;
    case 22:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 6581857;
      break;
    case 23:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1684955502;
      goto LABEL_66;
    case 24:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 29295;
LABEL_62:
      LOWORD(__p[0]) = v21;
      BYTE2(__p[0]) = 0;
      break;
    case 25:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499630;
      break;
    case 26:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499640;
      break;
    case 27:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1919905400;
LABEL_66:
      LODWORD(__p[0]) = v22;
      BYTE4(__p[0]) = 0;
      break;
    default:
      std::string::size_type v20 = 7;
      char v26 = 7;
      strcpy((char *)__p, "UNKNOWN");
      break;
  }
  std::string::append(v18, (const std::string::value_type *)__p, v20);
  long long v23 = sub_24A498(v19, "t");
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200((unsigned char *)a4, v23->__r_.__value_.__l.__data_, v23->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(void *)(a4 + 16) = *((void *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)a4 = v24;
  }
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_72:
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_77;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(*(void **)v27);
  if ((v30 & 0x80000000) == 0)
  {
LABEL_73:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_78:
    operator delete(v31.__r_.__value_.__l.__data_);
    return;
  }
LABEL_77:
  operator delete(*(void **)__s);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_78;
  }
}

void sub_278F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2790FC()
{
}

uint64_t sub_279110(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(double (**)(double *, uint64_t))(a1 + 48);
  v4 = *(uint64_t (**)(double *, uint64_t))(a1 + 56);
  double v6 = (*(double (**)(void, uint64_t))(a1 + 40))(*(void *)(a1 + 8), a1 + 16);
  double v7 = v3(&v6, v1);
  return v4(&v7, v2);
}

void sub_27917C(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6680, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_24F6680))
  {
    goto LABEL_2;
  }
  sub_24AA24((uint64_t)&v30);
  uint64_t v2 = std::string::insert(&v30, 0, "((");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v31, "o");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_24D754((uint64_t)v28);
  if ((v29 & 0x80u) == 0) {
    double v6 = v28;
  }
  else {
    double v6 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v7 = v29;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v28[1];
  }
  v8 = std::string::append(&v32, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v10 = std::string::append(&v33, ")o(");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v26);
  if ((v27 & 0x80u) == 0) {
    int v12 = v26;
  }
  else {
    int v12 = (void **)v26[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v13 = v27;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v26[1];
  }
  v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  __int16 v16 = std::string::append(&v35, "))o(");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)__p);
  if ((v25 & 0x80u) == 0) {
    v18 = __p;
  }
  else {
    v18 = (void **)__p[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v19 = v25;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  std::string::size_type v20 = std::string::append(&v36, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  int v22 = std::string::append(&v37, ")");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  unk_24F6678 = *((void *)&v22->__r_.__value_.__l + 2);
  xmmword_24F6668 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if (((char)v25 & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_38;
    }
  }
  else if (((char)v25 & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if (((char)v27 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (((char)v27 & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v26[0]);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v34.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if (((char)v29 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v33.__r_.__value_.__l.__data_);
  if (((char)v29 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v28[0]);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_45:
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_46:
    operator delete(v30.__r_.__value_.__l.__data_);
    goto LABEL_35;
  }
LABEL_44:
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_45;
  }
LABEL_34:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_35:
  __cxa_guard_release(&qword_24F6680);
LABEL_2:
  if (byte_24F667F < 0)
  {
    sub_4200((unsigned char *)a1, (void *)xmmword_24F6668, *((unint64_t *)&xmmword_24F6668 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_24F6668;
    *(void *)(a1 + 16) = unk_24F6678;
  }
}

void sub_2794D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (*(char *)(v52 - 41) < 0)
  {
    operator delete(*(void **)(v52 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v52 - 73) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v52 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v52 - 105) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v52 - 96));
  if ((*(char *)(v52 - 105) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v52 - 128));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v52 - 137) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a15);
  if ((*(char *)(v52 - 137) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v52 - 160));
  if ((a52 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a47);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a21);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_12:
    __cxa_guard_abort(&qword_24F6680);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a27);
  __cxa_guard_abort(&qword_24F6680);
  _Unwind_Resume(a1);
}

void sub_279680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    JUMPOUT(0x279654);
  }
  JUMPOUT(0x279528);
}

void sub_279690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    JUMPOUT(0x279664);
  }
  JUMPOUT(0x279530);
}

void sub_2796A0(_Unwind_Exception *a1)
{
}

void sub_2796B8(int a1@<W1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  memset(&v31, 0, sizeof(v31));
  std::string::reserve(&v31, 0x40uLL);
  v8 = sub_24A498(&v31, "((t");
  long long v9 = v8;
  switch(a1)
  {
    case 2:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "+");
      break;
    case 3:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "-");
      break;
    case 4:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "*");
      break;
    case 5:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "/");
      break;
    case 6:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "%");
      break;
    case 7:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "^");
      break;
    case 14:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "<");
      break;
    case 15:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15676;
      goto LABEL_18;
    case 16:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15677;
      goto LABEL_18;
    case 18:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15649;
      goto LABEL_18;
    case 20:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15678;
      goto LABEL_18;
    case 21:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, ">");
      break;
    case 22:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "and");
      break;
    case 23:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1684955502;
      goto LABEL_22;
    case 24:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 29295;
LABEL_18:
      *(_WORD *)__s = v11;
      __s[2] = 0;
      break;
    case 25:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "nor");
      break;
    case 26:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "xor");
      break;
    case 27:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1919905400;
LABEL_22:
      *(_DWORD *)__s = v12;
      __s[4] = 0;
      break;
    default:
      std::string::size_type v10 = 7;
      char v30 = 7;
      strcpy(__s, "UNKNOWN");
      break;
  }
  std::string::append(v8, __s, v10);
  std::string::size_type v13 = sub_24A498(v9, "t)");
  v14 = v13;
  switch(a2)
  {
    case 2:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "+");
      break;
    case 3:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "-");
      break;
    case 4:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "*");
      break;
    case 5:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "/");
      break;
    case 6:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "%");
      break;
    case 7:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "^");
      break;
    case 14:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "<");
      break;
    case 15:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15676;
      goto LABEL_40;
    case 16:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15677;
      goto LABEL_40;
    case 18:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15649;
      goto LABEL_40;
    case 20:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15678;
      goto LABEL_40;
    case 21:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, ">");
      break;
    case 22:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "and");
      break;
    case 23:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1684955502;
      goto LABEL_44;
    case 24:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 29295;
LABEL_40:
      *(_WORD *)unsigned __int8 v27 = v16;
      v27[2] = 0;
      break;
    case 25:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "nor");
      break;
    case 26:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "xor");
      break;
    case 27:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1919905400;
LABEL_44:
      *(_DWORD *)unsigned __int8 v27 = v17;
      v27[4] = 0;
      break;
    default:
      std::string::size_type v15 = 7;
      char v28 = 7;
      strcpy(v27, "UNKNOWN");
      break;
  }
  std::string::append(v13, v27, v15);
  v18 = sub_24A498(v14, "t)");
  std::string::size_type v19 = v18;
  switch(a3)
  {
    case 2:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 43;
      break;
    case 3:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 45;
      break;
    case 4:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 42;
      break;
    case 5:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 47;
      break;
    case 6:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 37;
      break;
    case 7:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 94;
      break;
    case 14:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 60;
      break;
    case 15:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15676;
      goto LABEL_62;
    case 16:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15677;
      goto LABEL_62;
    case 18:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15649;
      goto LABEL_62;
    case 20:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15678;
      goto LABEL_62;
    case 21:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 62;
      break;
    case 22:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 6581857;
      break;
    case 23:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1684955502;
      goto LABEL_66;
    case 24:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 29295;
LABEL_62:
      LOWORD(__p[0]) = v21;
      BYTE2(__p[0]) = 0;
      break;
    case 25:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499630;
      break;
    case 26:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499640;
      break;
    case 27:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1919905400;
LABEL_66:
      LODWORD(__p[0]) = v22;
      BYTE4(__p[0]) = 0;
      break;
    default:
      std::string::size_type v20 = 7;
      char v26 = 7;
      strcpy((char *)__p, "UNKNOWN");
      break;
  }
  std::string::append(v18, (const std::string::value_type *)__p, v20);
  long long v23 = sub_24A498(v19, "t");
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200((unsigned char *)a4, v23->__r_.__value_.__l.__data_, v23->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(void *)(a4 + 16) = *((void *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)a4 = v24;
  }
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_72:
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_77;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(*(void **)v27);
  if ((v30 & 0x80000000) == 0)
  {
LABEL_73:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_78:
    operator delete(v31.__r_.__value_.__l.__data_);
    return;
  }
LABEL_77:
  operator delete(*(void **)__s);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_78;
  }
}

void sub_279D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_279F30()
{
}

uint64_t sub_279F44(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(double (**)(double *, uint64_t))(a1 + 48);
  v4 = *(uint64_t (**)(double *, uint64_t))(a1 + 56);
  double v6 = (*(double (**)(uint64_t, void))(a1 + 40))(a1 + 8, *(void *)(a1 + 16));
  double v7 = v3(&v6, v1);
  return v4(&v7, v2);
}

void sub_279FAC(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F66A0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_24F66A0))
  {
    goto LABEL_2;
  }
  sub_24D754((uint64_t)&v30);
  uint64_t v2 = std::string::insert(&v30, 0, "((");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v31, "o");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v28);
  if ((v29 & 0x80u) == 0) {
    double v6 = v28;
  }
  else {
    double v6 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v7 = v29;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v28[1];
  }
  v8 = std::string::append(&v32, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v10 = std::string::append(&v33, ")o(");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v26);
  if ((v27 & 0x80u) == 0) {
    int v12 = v26;
  }
  else {
    int v12 = (void **)v26[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v13 = v27;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v26[1];
  }
  v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  __int16 v16 = std::string::append(&v35, "))o(");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)__p);
  if ((v25 & 0x80u) == 0) {
    v18 = __p;
  }
  else {
    v18 = (void **)__p[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v19 = v25;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  std::string::size_type v20 = std::string::append(&v36, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  int v22 = std::string::append(&v37, ")");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  unk_24F6698 = *((void *)&v22->__r_.__value_.__l + 2);
  xmmword_24F6688 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if (((char)v25 & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_38;
    }
  }
  else if (((char)v25 & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if (((char)v27 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (((char)v27 & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v26[0]);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v34.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if (((char)v29 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v33.__r_.__value_.__l.__data_);
  if (((char)v29 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v28[0]);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_45:
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_46:
    operator delete(v30.__r_.__value_.__l.__data_);
    goto LABEL_35;
  }
LABEL_44:
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_45;
  }
LABEL_34:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_35:
  __cxa_guard_release(&qword_24F66A0);
LABEL_2:
  if (byte_24F669F < 0)
  {
    sub_4200((unsigned char *)a1, (void *)xmmword_24F6688, *((unint64_t *)&xmmword_24F6688 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_24F6688;
    *(void *)(a1 + 16) = unk_24F6698;
  }
}

void sub_27A304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (*(char *)(v52 - 41) < 0)
  {
    operator delete(*(void **)(v52 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v52 - 73) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v52 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v52 - 105) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v52 - 96));
  if ((*(char *)(v52 - 105) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v52 - 128));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v52 - 137) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a15);
  if ((*(char *)(v52 - 137) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v52 - 160));
  if ((a52 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a47);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a21);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_12:
    __cxa_guard_abort(&qword_24F66A0);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a27);
  __cxa_guard_abort(&qword_24F66A0);
  _Unwind_Resume(a1);
}

void sub_27A4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    JUMPOUT(0x27A484);
  }
  JUMPOUT(0x27A358);
}

void sub_27A4C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    JUMPOUT(0x27A494);
  }
  JUMPOUT(0x27A360);
}

void sub_27A4D0(_Unwind_Exception *a1)
{
}

void sub_27A4E8(int a1@<W1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  memset(&v31, 0, sizeof(v31));
  std::string::reserve(&v31, 0x40uLL);
  v8 = sub_24A498(&v31, "((t");
  long long v9 = v8;
  switch(a1)
  {
    case 2:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "+");
      break;
    case 3:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "-");
      break;
    case 4:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "*");
      break;
    case 5:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "/");
      break;
    case 6:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "%");
      break;
    case 7:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "^");
      break;
    case 14:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "<");
      break;
    case 15:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15676;
      goto LABEL_18;
    case 16:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15677;
      goto LABEL_18;
    case 18:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15649;
      goto LABEL_18;
    case 20:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15678;
      goto LABEL_18;
    case 21:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, ">");
      break;
    case 22:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "and");
      break;
    case 23:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1684955502;
      goto LABEL_22;
    case 24:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 29295;
LABEL_18:
      *(_WORD *)__s = v11;
      __s[2] = 0;
      break;
    case 25:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "nor");
      break;
    case 26:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "xor");
      break;
    case 27:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1919905400;
LABEL_22:
      *(_DWORD *)__s = v12;
      __s[4] = 0;
      break;
    default:
      std::string::size_type v10 = 7;
      char v30 = 7;
      strcpy(__s, "UNKNOWN");
      break;
  }
  std::string::append(v8, __s, v10);
  std::string::size_type v13 = sub_24A498(v9, "t)");
  v14 = v13;
  switch(a2)
  {
    case 2:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "+");
      break;
    case 3:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "-");
      break;
    case 4:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "*");
      break;
    case 5:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "/");
      break;
    case 6:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "%");
      break;
    case 7:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "^");
      break;
    case 14:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "<");
      break;
    case 15:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15676;
      goto LABEL_40;
    case 16:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15677;
      goto LABEL_40;
    case 18:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15649;
      goto LABEL_40;
    case 20:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15678;
      goto LABEL_40;
    case 21:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, ">");
      break;
    case 22:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "and");
      break;
    case 23:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1684955502;
      goto LABEL_44;
    case 24:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 29295;
LABEL_40:
      *(_WORD *)unsigned __int8 v27 = v16;
      v27[2] = 0;
      break;
    case 25:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "nor");
      break;
    case 26:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "xor");
      break;
    case 27:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1919905400;
LABEL_44:
      *(_DWORD *)unsigned __int8 v27 = v17;
      v27[4] = 0;
      break;
    default:
      std::string::size_type v15 = 7;
      char v28 = 7;
      strcpy(v27, "UNKNOWN");
      break;
  }
  std::string::append(v13, v27, v15);
  v18 = sub_24A498(v14, "t)");
  std::string::size_type v19 = v18;
  switch(a3)
  {
    case 2:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 43;
      break;
    case 3:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 45;
      break;
    case 4:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 42;
      break;
    case 5:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 47;
      break;
    case 6:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 37;
      break;
    case 7:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 94;
      break;
    case 14:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 60;
      break;
    case 15:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15676;
      goto LABEL_62;
    case 16:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15677;
      goto LABEL_62;
    case 18:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15649;
      goto LABEL_62;
    case 20:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15678;
      goto LABEL_62;
    case 21:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 62;
      break;
    case 22:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 6581857;
      break;
    case 23:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1684955502;
      goto LABEL_66;
    case 24:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 29295;
LABEL_62:
      LOWORD(__p[0]) = v21;
      BYTE2(__p[0]) = 0;
      break;
    case 25:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499630;
      break;
    case 26:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499640;
      break;
    case 27:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1919905400;
LABEL_66:
      LODWORD(__p[0]) = v22;
      BYTE4(__p[0]) = 0;
      break;
    default:
      std::string::size_type v20 = 7;
      char v26 = 7;
      strcpy((char *)__p, "UNKNOWN");
      break;
  }
  std::string::append(v18, (const std::string::value_type *)__p, v20);
  long long v23 = sub_24A498(v19, "t");
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200((unsigned char *)a4, v23->__r_.__value_.__l.__data_, v23->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(void *)(a4 + 16) = *((void *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)a4 = v24;
  }
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_72:
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_77;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(*(void **)v27);
  if ((v30 & 0x80000000) == 0)
  {
LABEL_73:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_78:
    operator delete(v31.__r_.__value_.__l.__data_);
    return;
  }
LABEL_77:
  operator delete(*(void **)__s);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_78;
  }
}

void sub_27AB88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_27AD60()
{
}

uint64_t sub_27AD74(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(double (**)(double *, uint64_t))(a1 + 48);
  v4 = *(uint64_t (**)(double *, uint64_t))(a1 + 56);
  double v6 = (*(double (**)(uint64_t, void))(a1 + 40))(a1 + 8, *(void *)(a1 + 16));
  double v7 = v3(&v6, v1);
  return v4(&v7, v2);
}

void sub_27ADE0(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F66C0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_24F66C0))
  {
    goto LABEL_2;
  }
  sub_24D754((uint64_t)&v30);
  uint64_t v2 = std::string::insert(&v30, 0, "((");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v31, "o");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v28);
  if ((v29 & 0x80u) == 0) {
    double v6 = v28;
  }
  else {
    double v6 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v7 = v29;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v28[1];
  }
  v8 = std::string::append(&v32, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v10 = std::string::append(&v33, ")o(");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_24D754((uint64_t)v26);
  if ((v27 & 0x80u) == 0) {
    int v12 = v26;
  }
  else {
    int v12 = (void **)v26[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v13 = v27;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v26[1];
  }
  v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  __int16 v16 = std::string::append(&v35, "))o(");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)__p);
  if ((v25 & 0x80u) == 0) {
    v18 = __p;
  }
  else {
    v18 = (void **)__p[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v19 = v25;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  std::string::size_type v20 = std::string::append(&v36, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  int v22 = std::string::append(&v37, ")");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  unk_24F66B8 = *((void *)&v22->__r_.__value_.__l + 2);
  xmmword_24F66A8 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if (((char)v25 & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_38;
    }
  }
  else if (((char)v25 & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if (((char)v27 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (((char)v27 & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v26[0]);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v34.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if (((char)v29 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v33.__r_.__value_.__l.__data_);
  if (((char)v29 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v28[0]);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_45:
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_46:
    operator delete(v30.__r_.__value_.__l.__data_);
    goto LABEL_35;
  }
LABEL_44:
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_45;
  }
LABEL_34:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_35:
  __cxa_guard_release(&qword_24F66C0);
LABEL_2:
  if (byte_24F66BF < 0)
  {
    sub_4200((unsigned char *)a1, (void *)xmmword_24F66A8, *((unint64_t *)&xmmword_24F66A8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_24F66A8;
    *(void *)(a1 + 16) = unk_24F66B8;
  }
}

void sub_27B138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (*(char *)(v52 - 41) < 0)
  {
    operator delete(*(void **)(v52 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v52 - 73) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v52 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v52 - 105) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v52 - 96));
  if ((*(char *)(v52 - 105) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v52 - 128));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v52 - 137) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a15);
  if ((*(char *)(v52 - 137) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v52 - 160));
  if ((a52 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a47);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a21);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_12:
    __cxa_guard_abort(&qword_24F66C0);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a27);
  __cxa_guard_abort(&qword_24F66C0);
  _Unwind_Resume(a1);
}

void sub_27B2E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    JUMPOUT(0x27B2B8);
  }
  JUMPOUT(0x27B18CLL);
}

void sub_27B2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    JUMPOUT(0x27B2C8);
  }
  JUMPOUT(0x27B194);
}

void sub_27B304(_Unwind_Exception *a1)
{
}

void sub_27B31C(int a1@<W1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  memset(&v31, 0, sizeof(v31));
  std::string::reserve(&v31, 0x40uLL);
  v8 = sub_24A498(&v31, "((t");
  long long v9 = v8;
  switch(a1)
  {
    case 2:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "+");
      break;
    case 3:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "-");
      break;
    case 4:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "*");
      break;
    case 5:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "/");
      break;
    case 6:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "%");
      break;
    case 7:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "^");
      break;
    case 14:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "<");
      break;
    case 15:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15676;
      goto LABEL_18;
    case 16:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15677;
      goto LABEL_18;
    case 18:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15649;
      goto LABEL_18;
    case 20:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15678;
      goto LABEL_18;
    case 21:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, ">");
      break;
    case 22:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "and");
      break;
    case 23:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1684955502;
      goto LABEL_22;
    case 24:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 29295;
LABEL_18:
      *(_WORD *)__s = v11;
      __s[2] = 0;
      break;
    case 25:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "nor");
      break;
    case 26:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "xor");
      break;
    case 27:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1919905400;
LABEL_22:
      *(_DWORD *)__s = v12;
      __s[4] = 0;
      break;
    default:
      std::string::size_type v10 = 7;
      char v30 = 7;
      strcpy(__s, "UNKNOWN");
      break;
  }
  std::string::append(v8, __s, v10);
  std::string::size_type v13 = sub_24A498(v9, "t)");
  v14 = v13;
  switch(a2)
  {
    case 2:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "+");
      break;
    case 3:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "-");
      break;
    case 4:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "*");
      break;
    case 5:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "/");
      break;
    case 6:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "%");
      break;
    case 7:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "^");
      break;
    case 14:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "<");
      break;
    case 15:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15676;
      goto LABEL_40;
    case 16:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15677;
      goto LABEL_40;
    case 18:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15649;
      goto LABEL_40;
    case 20:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15678;
      goto LABEL_40;
    case 21:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, ">");
      break;
    case 22:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "and");
      break;
    case 23:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1684955502;
      goto LABEL_44;
    case 24:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 29295;
LABEL_40:
      *(_WORD *)unsigned __int8 v27 = v16;
      v27[2] = 0;
      break;
    case 25:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "nor");
      break;
    case 26:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "xor");
      break;
    case 27:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1919905400;
LABEL_44:
      *(_DWORD *)unsigned __int8 v27 = v17;
      v27[4] = 0;
      break;
    default:
      std::string::size_type v15 = 7;
      char v28 = 7;
      strcpy(v27, "UNKNOWN");
      break;
  }
  std::string::append(v13, v27, v15);
  v18 = sub_24A498(v14, "t)");
  std::string::size_type v19 = v18;
  switch(a3)
  {
    case 2:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 43;
      break;
    case 3:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 45;
      break;
    case 4:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 42;
      break;
    case 5:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 47;
      break;
    case 6:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 37;
      break;
    case 7:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 94;
      break;
    case 14:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 60;
      break;
    case 15:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15676;
      goto LABEL_62;
    case 16:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15677;
      goto LABEL_62;
    case 18:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15649;
      goto LABEL_62;
    case 20:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15678;
      goto LABEL_62;
    case 21:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 62;
      break;
    case 22:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 6581857;
      break;
    case 23:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1684955502;
      goto LABEL_66;
    case 24:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 29295;
LABEL_62:
      LOWORD(__p[0]) = v21;
      BYTE2(__p[0]) = 0;
      break;
    case 25:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499630;
      break;
    case 26:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499640;
      break;
    case 27:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1919905400;
LABEL_66:
      LODWORD(__p[0]) = v22;
      BYTE4(__p[0]) = 0;
      break;
    default:
      std::string::size_type v20 = 7;
      char v26 = 7;
      strcpy((char *)__p, "UNKNOWN");
      break;
  }
  std::string::append(v18, (const std::string::value_type *)__p, v20);
  long long v23 = sub_24A498(v19, "t");
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200((unsigned char *)a4, v23->__r_.__value_.__l.__data_, v23->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(void *)(a4 + 16) = *((void *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)a4 = v24;
  }
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_72:
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_77;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(*(void **)v27);
  if ((v30 & 0x80000000) == 0)
  {
LABEL_73:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_78:
    operator delete(v31.__r_.__value_.__l.__data_);
    return;
  }
LABEL_77:
  operator delete(*(void **)__s);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_78;
  }
}

void sub_27B9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_27BB94()
{
}

uint64_t sub_27BBA8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = a1 + 32;
  long long v3 = *(double (**)(double *, uint64_t))(a1 + 48);
  v4 = *(uint64_t (**)(double *, uint64_t))(a1 + 56);
  double v6 = (*(double (**)(void, uint64_t))(a1 + 40))(*(void *)(a1 + 8), a1 + 16);
  double v7 = v3(&v6, v1);
  return v4(&v7, v2);
}

void sub_27BC18(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F66E0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_24F66E0))
  {
    goto LABEL_2;
  }
  sub_24AA24((uint64_t)&v30);
  uint64_t v2 = std::string::insert(&v30, 0, "((");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v31, "o");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_24D754((uint64_t)v28);
  if ((v29 & 0x80u) == 0) {
    double v6 = v28;
  }
  else {
    double v6 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v7 = v29;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v28[1];
  }
  v8 = std::string::append(&v32, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v10 = std::string::append(&v33, ")o(");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v26);
  if ((v27 & 0x80u) == 0) {
    int v12 = v26;
  }
  else {
    int v12 = (void **)v26[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v13 = v27;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v26[1];
  }
  v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  __int16 v16 = std::string::append(&v35, "))o(");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_24D754((uint64_t)__p);
  if ((v25 & 0x80u) == 0) {
    v18 = __p;
  }
  else {
    v18 = (void **)__p[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v19 = v25;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  std::string::size_type v20 = std::string::append(&v36, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  int v22 = std::string::append(&v37, ")");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  unk_24F66D8 = *((void *)&v22->__r_.__value_.__l + 2);
  xmmword_24F66C8 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if (((char)v25 & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_38;
    }
  }
  else if (((char)v25 & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if (((char)v27 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (((char)v27 & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v26[0]);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v34.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if (((char)v29 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v33.__r_.__value_.__l.__data_);
  if (((char)v29 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v28[0]);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_45:
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_46:
    operator delete(v30.__r_.__value_.__l.__data_);
    goto LABEL_35;
  }
LABEL_44:
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_45;
  }
LABEL_34:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_35:
  __cxa_guard_release(&qword_24F66E0);
LABEL_2:
  if (byte_24F66DF < 0)
  {
    sub_4200((unsigned char *)a1, (void *)xmmword_24F66C8, *((unint64_t *)&xmmword_24F66C8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_24F66C8;
    *(void *)(a1 + 16) = unk_24F66D8;
  }
}

void sub_27BF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (*(char *)(v52 - 41) < 0)
  {
    operator delete(*(void **)(v52 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v52 - 73) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v52 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v52 - 105) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v52 - 96));
  if ((*(char *)(v52 - 105) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v52 - 128));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v52 - 137) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a15);
  if ((*(char *)(v52 - 137) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v52 - 160));
  if ((a52 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a47);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a21);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_12:
    __cxa_guard_abort(&qword_24F66E0);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a27);
  __cxa_guard_abort(&qword_24F66E0);
  _Unwind_Resume(a1);
}

void sub_27C11C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    JUMPOUT(0x27C0F0);
  }
  JUMPOUT(0x27BFC4);
}

void sub_27C12C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    JUMPOUT(0x27C100);
  }
  JUMPOUT(0x27BFCCLL);
}

void sub_27C13C(_Unwind_Exception *a1)
{
}

void sub_27C154(int a1@<W1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  memset(&v31, 0, sizeof(v31));
  std::string::reserve(&v31, 0x40uLL);
  v8 = sub_24A498(&v31, "((t");
  long long v9 = v8;
  switch(a1)
  {
    case 2:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "+");
      break;
    case 3:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "-");
      break;
    case 4:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "*");
      break;
    case 5:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "/");
      break;
    case 6:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "%");
      break;
    case 7:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "^");
      break;
    case 14:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "<");
      break;
    case 15:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15676;
      goto LABEL_18;
    case 16:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15677;
      goto LABEL_18;
    case 18:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15649;
      goto LABEL_18;
    case 20:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15678;
      goto LABEL_18;
    case 21:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, ">");
      break;
    case 22:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "and");
      break;
    case 23:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1684955502;
      goto LABEL_22;
    case 24:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 29295;
LABEL_18:
      *(_WORD *)__s = v11;
      __s[2] = 0;
      break;
    case 25:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "nor");
      break;
    case 26:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "xor");
      break;
    case 27:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1919905400;
LABEL_22:
      *(_DWORD *)__s = v12;
      __s[4] = 0;
      break;
    default:
      std::string::size_type v10 = 7;
      char v30 = 7;
      strcpy(__s, "UNKNOWN");
      break;
  }
  std::string::append(v8, __s, v10);
  std::string::size_type v13 = sub_24A498(v9, "t)");
  v14 = v13;
  switch(a2)
  {
    case 2:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "+");
      break;
    case 3:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "-");
      break;
    case 4:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "*");
      break;
    case 5:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "/");
      break;
    case 6:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "%");
      break;
    case 7:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "^");
      break;
    case 14:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "<");
      break;
    case 15:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15676;
      goto LABEL_40;
    case 16:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15677;
      goto LABEL_40;
    case 18:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15649;
      goto LABEL_40;
    case 20:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15678;
      goto LABEL_40;
    case 21:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, ">");
      break;
    case 22:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "and");
      break;
    case 23:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1684955502;
      goto LABEL_44;
    case 24:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 29295;
LABEL_40:
      *(_WORD *)unsigned __int8 v27 = v16;
      v27[2] = 0;
      break;
    case 25:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "nor");
      break;
    case 26:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "xor");
      break;
    case 27:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1919905400;
LABEL_44:
      *(_DWORD *)unsigned __int8 v27 = v17;
      v27[4] = 0;
      break;
    default:
      std::string::size_type v15 = 7;
      char v28 = 7;
      strcpy(v27, "UNKNOWN");
      break;
  }
  std::string::append(v13, v27, v15);
  v18 = sub_24A498(v14, "t)");
  std::string::size_type v19 = v18;
  switch(a3)
  {
    case 2:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 43;
      break;
    case 3:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 45;
      break;
    case 4:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 42;
      break;
    case 5:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 47;
      break;
    case 6:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 37;
      break;
    case 7:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 94;
      break;
    case 14:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 60;
      break;
    case 15:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15676;
      goto LABEL_62;
    case 16:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15677;
      goto LABEL_62;
    case 18:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15649;
      goto LABEL_62;
    case 20:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15678;
      goto LABEL_62;
    case 21:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 62;
      break;
    case 22:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 6581857;
      break;
    case 23:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1684955502;
      goto LABEL_66;
    case 24:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 29295;
LABEL_62:
      LOWORD(__p[0]) = v21;
      BYTE2(__p[0]) = 0;
      break;
    case 25:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499630;
      break;
    case 26:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499640;
      break;
    case 27:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1919905400;
LABEL_66:
      LODWORD(__p[0]) = v22;
      BYTE4(__p[0]) = 0;
      break;
    default:
      std::string::size_type v20 = 7;
      char v26 = 7;
      strcpy((char *)__p, "UNKNOWN");
      break;
  }
  std::string::append(v18, (const std::string::value_type *)__p, v20);
  long long v23 = sub_24A498(v19, "t");
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200((unsigned char *)a4, v23->__r_.__value_.__l.__data_, v23->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(void *)(a4 + 16) = *((void *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)a4 = v24;
  }
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_72:
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_77;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(*(void **)v27);
  if ((v30 & 0x80000000) == 0)
  {
LABEL_73:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_78:
    operator delete(v31.__r_.__value_.__l.__data_);
    return;
  }
LABEL_77:
  operator delete(*(void **)__s);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_78;
  }
}

void sub_27C7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_27C9CC()
{
}

uint64_t sub_27C9E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = a1 + 32;
  long long v3 = *(double (**)(double *, uint64_t))(a1 + 48);
  v4 = *(uint64_t (**)(double *, uint64_t))(a1 + 56);
  double v6 = (*(double (**)(uint64_t, void))(a1 + 40))(a1 + 8, *(void *)(a1 + 16));
  double v7 = v3(&v6, v1);
  return v4(&v7, v2);
}

void sub_27CA4C(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6700, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_24F6700))
  {
    goto LABEL_2;
  }
  sub_24D754((uint64_t)&v30);
  uint64_t v2 = std::string::insert(&v30, 0, "((");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v31, "o");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v28);
  if ((v29 & 0x80u) == 0) {
    double v6 = v28;
  }
  else {
    double v6 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v7 = v29;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v28[1];
  }
  v8 = std::string::append(&v32, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v10 = std::string::append(&v33, ")o(");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v26);
  if ((v27 & 0x80u) == 0) {
    int v12 = v26;
  }
  else {
    int v12 = (void **)v26[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v13 = v27;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v26[1];
  }
  v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  __int16 v16 = std::string::append(&v35, "))o(");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_24D754((uint64_t)__p);
  if ((v25 & 0x80u) == 0) {
    v18 = __p;
  }
  else {
    v18 = (void **)__p[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v19 = v25;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  std::string::size_type v20 = std::string::append(&v36, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  int v22 = std::string::append(&v37, ")");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  unk_24F66F8 = *((void *)&v22->__r_.__value_.__l + 2);
  xmmword_24F66E8 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if (((char)v25 & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_38;
    }
  }
  else if (((char)v25 & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if (((char)v27 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (((char)v27 & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v26[0]);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v34.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if (((char)v29 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v33.__r_.__value_.__l.__data_);
  if (((char)v29 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v28[0]);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_45:
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_46:
    operator delete(v30.__r_.__value_.__l.__data_);
    goto LABEL_35;
  }
LABEL_44:
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_45;
  }
LABEL_34:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_35:
  __cxa_guard_release(&qword_24F6700);
LABEL_2:
  if (byte_24F66FF < 0)
  {
    sub_4200((unsigned char *)a1, (void *)xmmword_24F66E8, *((unint64_t *)&xmmword_24F66E8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_24F66E8;
    *(void *)(a1 + 16) = unk_24F66F8;
  }
}

void sub_27CDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (*(char *)(v52 - 41) < 0)
  {
    operator delete(*(void **)(v52 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v52 - 73) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v52 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v52 - 105) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v52 - 96));
  if ((*(char *)(v52 - 105) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v52 - 128));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v52 - 137) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a15);
  if ((*(char *)(v52 - 137) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v52 - 160));
  if ((a52 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a47);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a21);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_12:
    __cxa_guard_abort(&qword_24F6700);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a27);
  __cxa_guard_abort(&qword_24F6700);
  _Unwind_Resume(a1);
}

void sub_27CF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    JUMPOUT(0x27CF24);
  }
  JUMPOUT(0x27CDF8);
}

void sub_27CF60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    JUMPOUT(0x27CF34);
  }
  JUMPOUT(0x27CE00);
}

void sub_27CF70(_Unwind_Exception *a1)
{
}

void sub_27CF88(int a1@<W1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  memset(&v31, 0, sizeof(v31));
  std::string::reserve(&v31, 0x40uLL);
  v8 = sub_24A498(&v31, "((t");
  long long v9 = v8;
  switch(a1)
  {
    case 2:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "+");
      break;
    case 3:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "-");
      break;
    case 4:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "*");
      break;
    case 5:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "/");
      break;
    case 6:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "%");
      break;
    case 7:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "^");
      break;
    case 14:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "<");
      break;
    case 15:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15676;
      goto LABEL_18;
    case 16:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15677;
      goto LABEL_18;
    case 18:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15649;
      goto LABEL_18;
    case 20:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15678;
      goto LABEL_18;
    case 21:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, ">");
      break;
    case 22:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "and");
      break;
    case 23:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1684955502;
      goto LABEL_22;
    case 24:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 29295;
LABEL_18:
      *(_WORD *)__s = v11;
      __s[2] = 0;
      break;
    case 25:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "nor");
      break;
    case 26:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "xor");
      break;
    case 27:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1919905400;
LABEL_22:
      *(_DWORD *)__s = v12;
      __s[4] = 0;
      break;
    default:
      std::string::size_type v10 = 7;
      char v30 = 7;
      strcpy(__s, "UNKNOWN");
      break;
  }
  std::string::append(v8, __s, v10);
  std::string::size_type v13 = sub_24A498(v9, "t)");
  v14 = v13;
  switch(a2)
  {
    case 2:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "+");
      break;
    case 3:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "-");
      break;
    case 4:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "*");
      break;
    case 5:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "/");
      break;
    case 6:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "%");
      break;
    case 7:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "^");
      break;
    case 14:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "<");
      break;
    case 15:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15676;
      goto LABEL_40;
    case 16:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15677;
      goto LABEL_40;
    case 18:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15649;
      goto LABEL_40;
    case 20:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15678;
      goto LABEL_40;
    case 21:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, ">");
      break;
    case 22:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "and");
      break;
    case 23:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1684955502;
      goto LABEL_44;
    case 24:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 29295;
LABEL_40:
      *(_WORD *)unsigned __int8 v27 = v16;
      v27[2] = 0;
      break;
    case 25:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "nor");
      break;
    case 26:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "xor");
      break;
    case 27:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1919905400;
LABEL_44:
      *(_DWORD *)unsigned __int8 v27 = v17;
      v27[4] = 0;
      break;
    default:
      std::string::size_type v15 = 7;
      char v28 = 7;
      strcpy(v27, "UNKNOWN");
      break;
  }
  std::string::append(v13, v27, v15);
  v18 = sub_24A498(v14, "t)");
  std::string::size_type v19 = v18;
  switch(a3)
  {
    case 2:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 43;
      break;
    case 3:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 45;
      break;
    case 4:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 42;
      break;
    case 5:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 47;
      break;
    case 6:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 37;
      break;
    case 7:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 94;
      break;
    case 14:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 60;
      break;
    case 15:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15676;
      goto LABEL_62;
    case 16:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15677;
      goto LABEL_62;
    case 18:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15649;
      goto LABEL_62;
    case 20:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15678;
      goto LABEL_62;
    case 21:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 62;
      break;
    case 22:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 6581857;
      break;
    case 23:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1684955502;
      goto LABEL_66;
    case 24:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 29295;
LABEL_62:
      LOWORD(__p[0]) = v21;
      BYTE2(__p[0]) = 0;
      break;
    case 25:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499630;
      break;
    case 26:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499640;
      break;
    case 27:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1919905400;
LABEL_66:
      LODWORD(__p[0]) = v22;
      BYTE4(__p[0]) = 0;
      break;
    default:
      std::string::size_type v20 = 7;
      char v26 = 7;
      strcpy((char *)__p, "UNKNOWN");
      break;
  }
  std::string::append(v18, (const std::string::value_type *)__p, v20);
  long long v23 = sub_24A498(v19, "t");
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200((unsigned char *)a4, v23->__r_.__value_.__l.__data_, v23->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(void *)(a4 + 16) = *((void *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)a4 = v24;
  }
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_72:
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_77;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(*(void **)v27);
  if ((v30 & 0x80000000) == 0)
  {
LABEL_73:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_78:
    operator delete(v31.__r_.__value_.__l.__data_);
    return;
  }
LABEL_77:
  operator delete(*(void **)__s);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_78;
  }
}

void sub_27D628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_27D800()
{
}

uint64_t sub_27D814(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(double (**)(double *, uint64_t))(a1 + 48);
  v4 = *(uint64_t (**)(double *, uint64_t))(a1 + 56);
  double v6 = (*(double (**)(void, uint64_t))(a1 + 40))(*(void *)(a1 + 8), a1 + 16);
  double v7 = v3(&v6, v1);
  return v4(&v7, v2);
}

void sub_27D880(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6720, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_24F6720))
  {
    goto LABEL_2;
  }
  sub_24AA24((uint64_t)&v30);
  uint64_t v2 = std::string::insert(&v30, 0, "((");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v31, "o");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_24D754((uint64_t)v28);
  if ((v29 & 0x80u) == 0) {
    double v6 = v28;
  }
  else {
    double v6 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v7 = v29;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v28[1];
  }
  v8 = std::string::append(&v32, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v10 = std::string::append(&v33, ")o(");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_24D754((uint64_t)v26);
  if ((v27 & 0x80u) == 0) {
    int v12 = v26;
  }
  else {
    int v12 = (void **)v26[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v13 = v27;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v26[1];
  }
  v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  __int16 v16 = std::string::append(&v35, "))o(");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)__p);
  if ((v25 & 0x80u) == 0) {
    v18 = __p;
  }
  else {
    v18 = (void **)__p[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v19 = v25;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  std::string::size_type v20 = std::string::append(&v36, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  int v22 = std::string::append(&v37, ")");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  unk_24F6718 = *((void *)&v22->__r_.__value_.__l + 2);
  xmmword_24F6708 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if (((char)v25 & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_38;
    }
  }
  else if (((char)v25 & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if (((char)v27 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (((char)v27 & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v26[0]);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v34.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if (((char)v29 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v33.__r_.__value_.__l.__data_);
  if (((char)v29 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v28[0]);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_45:
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_46:
    operator delete(v30.__r_.__value_.__l.__data_);
    goto LABEL_35;
  }
LABEL_44:
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_45;
  }
LABEL_34:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_35:
  __cxa_guard_release(&qword_24F6720);
LABEL_2:
  if (byte_24F671F < 0)
  {
    sub_4200((unsigned char *)a1, (void *)xmmword_24F6708, *((unint64_t *)&xmmword_24F6708 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_24F6708;
    *(void *)(a1 + 16) = unk_24F6718;
  }
}

void sub_27DBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (*(char *)(v52 - 41) < 0)
  {
    operator delete(*(void **)(v52 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v52 - 73) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v52 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v52 - 105) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v52 - 96));
  if ((*(char *)(v52 - 105) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v52 - 128));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v52 - 137) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a15);
  if ((*(char *)(v52 - 137) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v52 - 160));
  if ((a52 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a47);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a21);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_12:
    __cxa_guard_abort(&qword_24F6720);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a27);
  __cxa_guard_abort(&qword_24F6720);
  _Unwind_Resume(a1);
}

void sub_27DD84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    JUMPOUT(0x27DD58);
  }
  JUMPOUT(0x27DC2CLL);
}

void sub_27DD94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    JUMPOUT(0x27DD68);
  }
  JUMPOUT(0x27DC34);
}

void sub_27DDA4(_Unwind_Exception *a1)
{
}

void sub_27DDBC(int a1@<W1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  memset(&v31, 0, sizeof(v31));
  std::string::reserve(&v31, 0x40uLL);
  v8 = sub_24A498(&v31, "(t");
  long long v9 = v8;
  switch(a1)
  {
    case 2:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "+");
      break;
    case 3:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "-");
      break;
    case 4:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "*");
      break;
    case 5:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "/");
      break;
    case 6:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "%");
      break;
    case 7:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "^");
      break;
    case 14:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "<");
      break;
    case 15:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15676;
      goto LABEL_18;
    case 16:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15677;
      goto LABEL_18;
    case 18:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15649;
      goto LABEL_18;
    case 20:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15678;
      goto LABEL_18;
    case 21:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, ">");
      break;
    case 22:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "and");
      break;
    case 23:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1684955502;
      goto LABEL_22;
    case 24:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 29295;
LABEL_18:
      *(_WORD *)__s = v11;
      __s[2] = 0;
      break;
    case 25:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "nor");
      break;
    case 26:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "xor");
      break;
    case 27:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1919905400;
LABEL_22:
      *(_DWORD *)__s = v12;
      __s[4] = 0;
      break;
    default:
      std::string::size_type v10 = 7;
      char v30 = 7;
      strcpy(__s, "UNKNOWN");
      break;
  }
  std::string::append(v8, __s, v10);
  std::string::size_type v13 = sub_24A498(v9, "(t");
  v14 = v13;
  switch(a2)
  {
    case 2:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "+");
      break;
    case 3:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "-");
      break;
    case 4:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "*");
      break;
    case 5:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "/");
      break;
    case 6:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "%");
      break;
    case 7:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "^");
      break;
    case 14:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "<");
      break;
    case 15:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15676;
      goto LABEL_40;
    case 16:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15677;
      goto LABEL_40;
    case 18:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15649;
      goto LABEL_40;
    case 20:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15678;
      goto LABEL_40;
    case 21:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, ">");
      break;
    case 22:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "and");
      break;
    case 23:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1684955502;
      goto LABEL_44;
    case 24:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 29295;
LABEL_40:
      *(_WORD *)unsigned __int8 v27 = v16;
      v27[2] = 0;
      break;
    case 25:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "nor");
      break;
    case 26:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "xor");
      break;
    case 27:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1919905400;
LABEL_44:
      *(_DWORD *)unsigned __int8 v27 = v17;
      v27[4] = 0;
      break;
    default:
      std::string::size_type v15 = 7;
      char v28 = 7;
      strcpy(v27, "UNKNOWN");
      break;
  }
  std::string::append(v13, v27, v15);
  v18 = sub_24A498(v14, "t)");
  std::string::size_type v19 = v18;
  switch(a3)
  {
    case 2:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 43;
      break;
    case 3:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 45;
      break;
    case 4:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 42;
      break;
    case 5:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 47;
      break;
    case 6:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 37;
      break;
    case 7:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 94;
      break;
    case 14:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 60;
      break;
    case 15:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15676;
      goto LABEL_62;
    case 16:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15677;
      goto LABEL_62;
    case 18:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15649;
      goto LABEL_62;
    case 20:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15678;
      goto LABEL_62;
    case 21:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 62;
      break;
    case 22:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 6581857;
      break;
    case 23:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1684955502;
      goto LABEL_66;
    case 24:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 29295;
LABEL_62:
      LOWORD(__p[0]) = v21;
      BYTE2(__p[0]) = 0;
      break;
    case 25:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499630;
      break;
    case 26:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499640;
      break;
    case 27:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1919905400;
LABEL_66:
      LODWORD(__p[0]) = v22;
      BYTE4(__p[0]) = 0;
      break;
    default:
      std::string::size_type v20 = 7;
      char v26 = 7;
      strcpy((char *)__p, "UNKNOWN");
      break;
  }
  std::string::append(v18, (const std::string::value_type *)__p, v20);
  long long v23 = sub_24A498(v19, "t");
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200((unsigned char *)a4, v23->__r_.__value_.__l.__data_, v23->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(void *)(a4 + 16) = *((void *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)a4 = v24;
  }
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_72:
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_77;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(*(void **)v27);
  if ((v30 & 0x80000000) == 0)
  {
LABEL_73:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_78:
    operator delete(v31.__r_.__value_.__l.__data_);
    return;
  }
LABEL_77:
  operator delete(*(void **)__s);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_78;
  }
}

void sub_27E45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_27E634()
{
}

uint64_t sub_27E648(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(double (**)(uint64_t, double *))(a1 + 40);
  v4 = *(uint64_t (**)(double *, uint64_t))(a1 + 56);
  double v6 = (*(double (**)(void, void))(a1 + 48))(*(void *)(a1 + 16), *(void *)(a1 + 24));
  double v7 = v3(v1, &v6);
  return v4(&v7, v2);
}

void sub_27E6B0(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6740, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_24F6740))
  {
    goto LABEL_2;
  }
  sub_24AA24((uint64_t)&v30);
  uint64_t v2 = std::string::insert(&v30, 0, "((");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v31, ")o(");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v28);
  if ((v29 & 0x80u) == 0) {
    double v6 = v28;
  }
  else {
    double v6 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v7 = v29;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v28[1];
  }
  v8 = std::string::append(&v32, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v10 = std::string::append(&v33, "o");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v26);
  if ((v27 & 0x80u) == 0) {
    int v12 = v26;
  }
  else {
    int v12 = (void **)v26[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v13 = v27;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v26[1];
  }
  v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  __int16 v16 = std::string::append(&v35, "))o(");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)__p);
  if ((v25 & 0x80u) == 0) {
    v18 = __p;
  }
  else {
    v18 = (void **)__p[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v19 = v25;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  std::string::size_type v20 = std::string::append(&v36, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  int v22 = std::string::append(&v37, ")");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  unk_24F6738 = *((void *)&v22->__r_.__value_.__l + 2);
  xmmword_24F6728 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if (((char)v25 & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_38;
    }
  }
  else if (((char)v25 & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if (((char)v27 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (((char)v27 & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v26[0]);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v34.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if (((char)v29 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v33.__r_.__value_.__l.__data_);
  if (((char)v29 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v28[0]);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_45:
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_46:
    operator delete(v30.__r_.__value_.__l.__data_);
    goto LABEL_35;
  }
LABEL_44:
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_45;
  }
LABEL_34:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_35:
  __cxa_guard_release(&qword_24F6740);
LABEL_2:
  if (byte_24F673F < 0)
  {
    sub_4200((unsigned char *)a1, (void *)xmmword_24F6728, *((unint64_t *)&xmmword_24F6728 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_24F6728;
    *(void *)(a1 + 16) = unk_24F6738;
  }
}

void sub_27EA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (*(char *)(v52 - 41) < 0)
  {
    operator delete(*(void **)(v52 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v52 - 73) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v52 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v52 - 105) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v52 - 96));
  if ((*(char *)(v52 - 105) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v52 - 128));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v52 - 137) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a15);
  if ((*(char *)(v52 - 137) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v52 - 160));
  if ((a52 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a47);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a21);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_12:
    __cxa_guard_abort(&qword_24F6740);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a27);
  __cxa_guard_abort(&qword_24F6740);
  _Unwind_Resume(a1);
}

void sub_27EBB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    JUMPOUT(0x27EB88);
  }
  JUMPOUT(0x27EA5CLL);
}

void sub_27EBC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    JUMPOUT(0x27EB98);
  }
  JUMPOUT(0x27EA64);
}

void sub_27EBD4(_Unwind_Exception *a1)
{
}

void sub_27EBEC(int a1@<W1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  memset(&v31, 0, sizeof(v31));
  std::string::reserve(&v31, 0x40uLL);
  v8 = sub_24A498(&v31, "(t");
  long long v9 = v8;
  switch(a1)
  {
    case 2:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "+");
      break;
    case 3:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "-");
      break;
    case 4:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "*");
      break;
    case 5:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "/");
      break;
    case 6:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "%");
      break;
    case 7:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "^");
      break;
    case 14:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "<");
      break;
    case 15:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15676;
      goto LABEL_18;
    case 16:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15677;
      goto LABEL_18;
    case 18:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15649;
      goto LABEL_18;
    case 20:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15678;
      goto LABEL_18;
    case 21:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, ">");
      break;
    case 22:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "and");
      break;
    case 23:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1684955502;
      goto LABEL_22;
    case 24:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 29295;
LABEL_18:
      *(_WORD *)__s = v11;
      __s[2] = 0;
      break;
    case 25:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "nor");
      break;
    case 26:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "xor");
      break;
    case 27:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1919905400;
LABEL_22:
      *(_DWORD *)__s = v12;
      __s[4] = 0;
      break;
    default:
      std::string::size_type v10 = 7;
      char v30 = 7;
      strcpy(__s, "UNKNOWN");
      break;
  }
  std::string::append(v8, __s, v10);
  std::string::size_type v13 = sub_24A498(v9, "(t");
  v14 = v13;
  switch(a2)
  {
    case 2:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "+");
      break;
    case 3:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "-");
      break;
    case 4:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "*");
      break;
    case 5:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "/");
      break;
    case 6:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "%");
      break;
    case 7:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "^");
      break;
    case 14:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "<");
      break;
    case 15:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15676;
      goto LABEL_40;
    case 16:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15677;
      goto LABEL_40;
    case 18:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15649;
      goto LABEL_40;
    case 20:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15678;
      goto LABEL_40;
    case 21:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, ">");
      break;
    case 22:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "and");
      break;
    case 23:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1684955502;
      goto LABEL_44;
    case 24:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 29295;
LABEL_40:
      *(_WORD *)unsigned __int8 v27 = v16;
      v27[2] = 0;
      break;
    case 25:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "nor");
      break;
    case 26:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "xor");
      break;
    case 27:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1919905400;
LABEL_44:
      *(_DWORD *)unsigned __int8 v27 = v17;
      v27[4] = 0;
      break;
    default:
      std::string::size_type v15 = 7;
      char v28 = 7;
      strcpy(v27, "UNKNOWN");
      break;
  }
  std::string::append(v13, v27, v15);
  v18 = sub_24A498(v14, "t)");
  std::string::size_type v19 = v18;
  switch(a3)
  {
    case 2:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 43;
      break;
    case 3:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 45;
      break;
    case 4:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 42;
      break;
    case 5:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 47;
      break;
    case 6:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 37;
      break;
    case 7:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 94;
      break;
    case 14:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 60;
      break;
    case 15:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15676;
      goto LABEL_62;
    case 16:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15677;
      goto LABEL_62;
    case 18:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15649;
      goto LABEL_62;
    case 20:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15678;
      goto LABEL_62;
    case 21:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 62;
      break;
    case 22:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 6581857;
      break;
    case 23:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1684955502;
      goto LABEL_66;
    case 24:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 29295;
LABEL_62:
      LOWORD(__p[0]) = v21;
      BYTE2(__p[0]) = 0;
      break;
    case 25:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499630;
      break;
    case 26:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499640;
      break;
    case 27:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1919905400;
LABEL_66:
      LODWORD(__p[0]) = v22;
      BYTE4(__p[0]) = 0;
      break;
    default:
      std::string::size_type v20 = 7;
      char v26 = 7;
      strcpy((char *)__p, "UNKNOWN");
      break;
  }
  std::string::append(v18, (const std::string::value_type *)__p, v20);
  long long v23 = sub_24A498(v19, "t");
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200((unsigned char *)a4, v23->__r_.__value_.__l.__data_, v23->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(void *)(a4 + 16) = *((void *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)a4 = v24;
  }
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_72:
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_77;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(*(void **)v27);
  if ((v30 & 0x80000000) == 0)
  {
LABEL_73:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_78:
    operator delete(v31.__r_.__value_.__l.__data_);
    return;
  }
LABEL_77:
  operator delete(*(void **)__s);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_78;
  }
}

void sub_27F28C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_27F464()
{
}

uint64_t sub_27F478(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 32;
  long long v3 = *(double (**)(uint64_t, double *))(a1 + 40);
  v4 = *(uint64_t (**)(double *, uint64_t))(a1 + 56);
  double v6 = (*(double (**)(void, void))(a1 + 48))(*(void *)(a1 + 16), *(void *)(a1 + 24));
  double v7 = v3(v1, &v6);
  return v4(&v7, v2);
}

void sub_27F4E4(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6760, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_24F6760))
  {
    goto LABEL_2;
  }
  sub_24AA24((uint64_t)&v30);
  uint64_t v2 = std::string::insert(&v30, 0, "((");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v31, ")o(");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v28);
  if ((v29 & 0x80u) == 0) {
    double v6 = v28;
  }
  else {
    double v6 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v7 = v29;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v28[1];
  }
  v8 = std::string::append(&v32, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v10 = std::string::append(&v33, "o");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v26);
  if ((v27 & 0x80u) == 0) {
    int v12 = v26;
  }
  else {
    int v12 = (void **)v26[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v13 = v27;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v26[1];
  }
  v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  __int16 v16 = std::string::append(&v35, "))o(");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_24D754((uint64_t)__p);
  if ((v25 & 0x80u) == 0) {
    v18 = __p;
  }
  else {
    v18 = (void **)__p[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v19 = v25;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  std::string::size_type v20 = std::string::append(&v36, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  int v22 = std::string::append(&v37, ")");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  unk_24F6758 = *((void *)&v22->__r_.__value_.__l + 2);
  xmmword_24F6748 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if (((char)v25 & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_38;
    }
  }
  else if (((char)v25 & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if (((char)v27 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (((char)v27 & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v26[0]);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v34.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if (((char)v29 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v33.__r_.__value_.__l.__data_);
  if (((char)v29 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v28[0]);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_45:
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_46:
    operator delete(v30.__r_.__value_.__l.__data_);
    goto LABEL_35;
  }
LABEL_44:
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_45;
  }
LABEL_34:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_35:
  __cxa_guard_release(&qword_24F6760);
LABEL_2:
  if (byte_24F675F < 0)
  {
    sub_4200((unsigned char *)a1, (void *)xmmword_24F6748, *((unint64_t *)&xmmword_24F6748 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_24F6748;
    *(void *)(a1 + 16) = unk_24F6758;
  }
}

void sub_27F83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (*(char *)(v52 - 41) < 0)
  {
    operator delete(*(void **)(v52 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v52 - 73) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v52 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v52 - 105) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v52 - 96));
  if ((*(char *)(v52 - 105) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v52 - 128));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v52 - 137) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a15);
  if ((*(char *)(v52 - 137) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v52 - 160));
  if ((a52 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a47);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a21);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_12:
    __cxa_guard_abort(&qword_24F6760);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a27);
  __cxa_guard_abort(&qword_24F6760);
  _Unwind_Resume(a1);
}

void sub_27F9E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    JUMPOUT(0x27F9BCLL);
  }
  JUMPOUT(0x27F890);
}

void sub_27F9F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    JUMPOUT(0x27F9CCLL);
  }
  JUMPOUT(0x27F898);
}

void sub_27FA08(_Unwind_Exception *a1)
{
}

void sub_27FA20(int a1@<W1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  memset(&v31, 0, sizeof(v31));
  std::string::reserve(&v31, 0x40uLL);
  v8 = sub_24A498(&v31, "(t");
  long long v9 = v8;
  switch(a1)
  {
    case 2:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "+");
      break;
    case 3:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "-");
      break;
    case 4:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "*");
      break;
    case 5:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "/");
      break;
    case 6:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "%");
      break;
    case 7:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "^");
      break;
    case 14:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "<");
      break;
    case 15:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15676;
      goto LABEL_18;
    case 16:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15677;
      goto LABEL_18;
    case 18:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15649;
      goto LABEL_18;
    case 20:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15678;
      goto LABEL_18;
    case 21:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, ">");
      break;
    case 22:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "and");
      break;
    case 23:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1684955502;
      goto LABEL_22;
    case 24:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 29295;
LABEL_18:
      *(_WORD *)__s = v11;
      __s[2] = 0;
      break;
    case 25:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "nor");
      break;
    case 26:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "xor");
      break;
    case 27:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1919905400;
LABEL_22:
      *(_DWORD *)__s = v12;
      __s[4] = 0;
      break;
    default:
      std::string::size_type v10 = 7;
      char v30 = 7;
      strcpy(__s, "UNKNOWN");
      break;
  }
  std::string::append(v8, __s, v10);
  std::string::size_type v13 = sub_24A498(v9, "(t");
  v14 = v13;
  switch(a2)
  {
    case 2:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "+");
      break;
    case 3:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "-");
      break;
    case 4:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "*");
      break;
    case 5:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "/");
      break;
    case 6:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "%");
      break;
    case 7:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "^");
      break;
    case 14:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "<");
      break;
    case 15:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15676;
      goto LABEL_40;
    case 16:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15677;
      goto LABEL_40;
    case 18:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15649;
      goto LABEL_40;
    case 20:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15678;
      goto LABEL_40;
    case 21:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, ">");
      break;
    case 22:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "and");
      break;
    case 23:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1684955502;
      goto LABEL_44;
    case 24:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 29295;
LABEL_40:
      *(_WORD *)unsigned __int8 v27 = v16;
      v27[2] = 0;
      break;
    case 25:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "nor");
      break;
    case 26:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "xor");
      break;
    case 27:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1919905400;
LABEL_44:
      *(_DWORD *)unsigned __int8 v27 = v17;
      v27[4] = 0;
      break;
    default:
      std::string::size_type v15 = 7;
      char v28 = 7;
      strcpy(v27, "UNKNOWN");
      break;
  }
  std::string::append(v13, v27, v15);
  v18 = sub_24A498(v14, "t)");
  std::string::size_type v19 = v18;
  switch(a3)
  {
    case 2:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 43;
      break;
    case 3:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 45;
      break;
    case 4:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 42;
      break;
    case 5:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 47;
      break;
    case 6:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 37;
      break;
    case 7:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 94;
      break;
    case 14:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 60;
      break;
    case 15:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15676;
      goto LABEL_62;
    case 16:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15677;
      goto LABEL_62;
    case 18:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15649;
      goto LABEL_62;
    case 20:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15678;
      goto LABEL_62;
    case 21:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 62;
      break;
    case 22:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 6581857;
      break;
    case 23:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1684955502;
      goto LABEL_66;
    case 24:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 29295;
LABEL_62:
      LOWORD(__p[0]) = v21;
      BYTE2(__p[0]) = 0;
      break;
    case 25:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499630;
      break;
    case 26:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499640;
      break;
    case 27:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1919905400;
LABEL_66:
      LODWORD(__p[0]) = v22;
      BYTE4(__p[0]) = 0;
      break;
    default:
      std::string::size_type v20 = 7;
      char v26 = 7;
      strcpy((char *)__p, "UNKNOWN");
      break;
  }
  std::string::append(v18, (const std::string::value_type *)__p, v20);
  long long v23 = sub_24A498(v19, "t");
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200((unsigned char *)a4, v23->__r_.__value_.__l.__data_, v23->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(void *)(a4 + 16) = *((void *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)a4 = v24;
  }
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_72:
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_77;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(*(void **)v27);
  if ((v30 & 0x80000000) == 0)
  {
LABEL_73:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_78:
    operator delete(v31.__r_.__value_.__l.__data_);
    return;
  }
LABEL_77:
  operator delete(*(void **)__s);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_78;
  }
}

void sub_2800C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_280298()
{
}

uint64_t sub_2802AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(double (**)(uint64_t, double *))(a1 + 40);
  v4 = *(uint64_t (**)(double *, uint64_t))(a1 + 56);
  double v6 = (*(double (**)(void, uint64_t))(a1 + 48))(*(void *)(a1 + 16), a1 + 24);
  double v7 = v3(v1, &v6);
  return v4(&v7, v2);
}

void sub_280314(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6780, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_24F6780))
  {
    goto LABEL_2;
  }
  sub_24AA24((uint64_t)&v30);
  uint64_t v2 = std::string::insert(&v30, 0, "((");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v31, ")o(");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v28);
  if ((v29 & 0x80u) == 0) {
    double v6 = v28;
  }
  else {
    double v6 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v7 = v29;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v28[1];
  }
  v8 = std::string::append(&v32, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v10 = std::string::append(&v33, "o");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_24D754((uint64_t)v26);
  if ((v27 & 0x80u) == 0) {
    int v12 = v26;
  }
  else {
    int v12 = (void **)v26[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v13 = v27;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v26[1];
  }
  v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  __int16 v16 = std::string::append(&v35, "))o(");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)__p);
  if ((v25 & 0x80u) == 0) {
    v18 = __p;
  }
  else {
    v18 = (void **)__p[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v19 = v25;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  std::string::size_type v20 = std::string::append(&v36, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  int v22 = std::string::append(&v37, ")");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  unk_24F6778 = *((void *)&v22->__r_.__value_.__l + 2);
  xmmword_24F6768 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if (((char)v25 & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_38;
    }
  }
  else if (((char)v25 & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if (((char)v27 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (((char)v27 & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v26[0]);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v34.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if (((char)v29 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v33.__r_.__value_.__l.__data_);
  if (((char)v29 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v28[0]);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_45:
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_46:
    operator delete(v30.__r_.__value_.__l.__data_);
    goto LABEL_35;
  }
LABEL_44:
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_45;
  }
LABEL_34:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_35:
  __cxa_guard_release(&qword_24F6780);
LABEL_2:
  if (byte_24F677F < 0)
  {
    sub_4200((unsigned char *)a1, (void *)xmmword_24F6768, *((unint64_t *)&xmmword_24F6768 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_24F6768;
    *(void *)(a1 + 16) = unk_24F6778;
  }
}

void sub_28066C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (*(char *)(v52 - 41) < 0)
  {
    operator delete(*(void **)(v52 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v52 - 73) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v52 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v52 - 105) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v52 - 96));
  if ((*(char *)(v52 - 105) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v52 - 128));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v52 - 137) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a15);
  if ((*(char *)(v52 - 137) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v52 - 160));
  if ((a52 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a47);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a21);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_12:
    __cxa_guard_abort(&qword_24F6780);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a27);
  __cxa_guard_abort(&qword_24F6780);
  _Unwind_Resume(a1);
}

void sub_280818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    JUMPOUT(0x2807ECLL);
  }
  JUMPOUT(0x2806C0);
}

void sub_280828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    JUMPOUT(0x2807FCLL);
  }
  JUMPOUT(0x2806C8);
}

void sub_280838(_Unwind_Exception *a1)
{
}

void sub_280850(int a1@<W1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  memset(&v31, 0, sizeof(v31));
  std::string::reserve(&v31, 0x40uLL);
  v8 = sub_24A498(&v31, "(t");
  long long v9 = v8;
  switch(a1)
  {
    case 2:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "+");
      break;
    case 3:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "-");
      break;
    case 4:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "*");
      break;
    case 5:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "/");
      break;
    case 6:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "%");
      break;
    case 7:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "^");
      break;
    case 14:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "<");
      break;
    case 15:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15676;
      goto LABEL_18;
    case 16:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15677;
      goto LABEL_18;
    case 18:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15649;
      goto LABEL_18;
    case 20:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15678;
      goto LABEL_18;
    case 21:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, ">");
      break;
    case 22:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "and");
      break;
    case 23:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1684955502;
      goto LABEL_22;
    case 24:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 29295;
LABEL_18:
      *(_WORD *)__s = v11;
      __s[2] = 0;
      break;
    case 25:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "nor");
      break;
    case 26:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "xor");
      break;
    case 27:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1919905400;
LABEL_22:
      *(_DWORD *)__s = v12;
      __s[4] = 0;
      break;
    default:
      std::string::size_type v10 = 7;
      char v30 = 7;
      strcpy(__s, "UNKNOWN");
      break;
  }
  std::string::append(v8, __s, v10);
  std::string::size_type v13 = sub_24A498(v9, "(t");
  v14 = v13;
  switch(a2)
  {
    case 2:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "+");
      break;
    case 3:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "-");
      break;
    case 4:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "*");
      break;
    case 5:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "/");
      break;
    case 6:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "%");
      break;
    case 7:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "^");
      break;
    case 14:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "<");
      break;
    case 15:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15676;
      goto LABEL_40;
    case 16:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15677;
      goto LABEL_40;
    case 18:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15649;
      goto LABEL_40;
    case 20:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15678;
      goto LABEL_40;
    case 21:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, ">");
      break;
    case 22:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "and");
      break;
    case 23:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1684955502;
      goto LABEL_44;
    case 24:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 29295;
LABEL_40:
      *(_WORD *)unsigned __int8 v27 = v16;
      v27[2] = 0;
      break;
    case 25:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "nor");
      break;
    case 26:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "xor");
      break;
    case 27:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1919905400;
LABEL_44:
      *(_DWORD *)unsigned __int8 v27 = v17;
      v27[4] = 0;
      break;
    default:
      std::string::size_type v15 = 7;
      char v28 = 7;
      strcpy(v27, "UNKNOWN");
      break;
  }
  std::string::append(v13, v27, v15);
  v18 = sub_24A498(v14, "t)");
  std::string::size_type v19 = v18;
  switch(a3)
  {
    case 2:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 43;
      break;
    case 3:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 45;
      break;
    case 4:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 42;
      break;
    case 5:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 47;
      break;
    case 6:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 37;
      break;
    case 7:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 94;
      break;
    case 14:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 60;
      break;
    case 15:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15676;
      goto LABEL_62;
    case 16:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15677;
      goto LABEL_62;
    case 18:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15649;
      goto LABEL_62;
    case 20:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15678;
      goto LABEL_62;
    case 21:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 62;
      break;
    case 22:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 6581857;
      break;
    case 23:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1684955502;
      goto LABEL_66;
    case 24:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 29295;
LABEL_62:
      LOWORD(__p[0]) = v21;
      BYTE2(__p[0]) = 0;
      break;
    case 25:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499630;
      break;
    case 26:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499640;
      break;
    case 27:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1919905400;
LABEL_66:
      LODWORD(__p[0]) = v22;
      BYTE4(__p[0]) = 0;
      break;
    default:
      std::string::size_type v20 = 7;
      char v26 = 7;
      strcpy((char *)__p, "UNKNOWN");
      break;
  }
  std::string::append(v18, (const std::string::value_type *)__p, v20);
  long long v23 = sub_24A498(v19, "t");
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200((unsigned char *)a4, v23->__r_.__value_.__l.__data_, v23->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(void *)(a4 + 16) = *((void *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)a4 = v24;
  }
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_72:
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_77;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(*(void **)v27);
  if ((v30 & 0x80000000) == 0)
  {
LABEL_73:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_78:
    operator delete(v31.__r_.__value_.__l.__data_);
    return;
  }
LABEL_77:
  operator delete(*(void **)__s);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_78;
  }
}

void sub_280EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2810C8()
{
}

uint64_t sub_2810DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(double (**)(uint64_t, double *))(a1 + 40);
  v4 = *(uint64_t (**)(double *, uint64_t))(a1 + 56);
  double v6 = (*(double (**)(uint64_t, void))(a1 + 48))(a1 + 16, *(void *)(a1 + 24));
  double v7 = v3(v1, &v6);
  return v4(&v7, v2);
}

void sub_281148(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F67A0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_24F67A0))
  {
    goto LABEL_2;
  }
  sub_24AA24((uint64_t)&v30);
  uint64_t v2 = std::string::insert(&v30, 0, "((");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v31, ")o(");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_24D754((uint64_t)v28);
  if ((v29 & 0x80u) == 0) {
    double v6 = v28;
  }
  else {
    double v6 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v7 = v29;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v28[1];
  }
  v8 = std::string::append(&v32, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v10 = std::string::append(&v33, "o");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v26);
  if ((v27 & 0x80u) == 0) {
    int v12 = v26;
  }
  else {
    int v12 = (void **)v26[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v13 = v27;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v26[1];
  }
  v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  __int16 v16 = std::string::append(&v35, "))o(");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)__p);
  if ((v25 & 0x80u) == 0) {
    v18 = __p;
  }
  else {
    v18 = (void **)__p[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v19 = v25;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  std::string::size_type v20 = std::string::append(&v36, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  int v22 = std::string::append(&v37, ")");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  unk_24F6798 = *((void *)&v22->__r_.__value_.__l + 2);
  xmmword_24F6788 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if (((char)v25 & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_38;
    }
  }
  else if (((char)v25 & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if (((char)v27 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (((char)v27 & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v26[0]);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v34.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if (((char)v29 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v33.__r_.__value_.__l.__data_);
  if (((char)v29 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v28[0]);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_45:
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_46:
    operator delete(v30.__r_.__value_.__l.__data_);
    goto LABEL_35;
  }
LABEL_44:
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_45;
  }
LABEL_34:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_35:
  __cxa_guard_release(&qword_24F67A0);
LABEL_2:
  if (byte_24F679F < 0)
  {
    sub_4200((unsigned char *)a1, (void *)xmmword_24F6788, *((unint64_t *)&xmmword_24F6788 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_24F6788;
    *(void *)(a1 + 16) = unk_24F6798;
  }
}

void sub_2814A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (*(char *)(v52 - 41) < 0)
  {
    operator delete(*(void **)(v52 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v52 - 73) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v52 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v52 - 105) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v52 - 96));
  if ((*(char *)(v52 - 105) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v52 - 128));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v52 - 137) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a15);
  if ((*(char *)(v52 - 137) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v52 - 160));
  if ((a52 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a47);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a21);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_12:
    __cxa_guard_abort(&qword_24F67A0);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a27);
  __cxa_guard_abort(&qword_24F67A0);
  _Unwind_Resume(a1);
}

void sub_28164C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    JUMPOUT(0x281620);
  }
  JUMPOUT(0x2814F4);
}

void sub_28165C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    JUMPOUT(0x281630);
  }
  JUMPOUT(0x2814FCLL);
}

void sub_28166C(_Unwind_Exception *a1)
{
}

void sub_281684(int a1@<W1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  memset(&v31, 0, sizeof(v31));
  std::string::reserve(&v31, 0x40uLL);
  v8 = sub_24A498(&v31, "(t");
  long long v9 = v8;
  switch(a1)
  {
    case 2:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "+");
      break;
    case 3:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "-");
      break;
    case 4:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "*");
      break;
    case 5:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "/");
      break;
    case 6:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "%");
      break;
    case 7:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "^");
      break;
    case 14:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "<");
      break;
    case 15:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15676;
      goto LABEL_18;
    case 16:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15677;
      goto LABEL_18;
    case 18:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15649;
      goto LABEL_18;
    case 20:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15678;
      goto LABEL_18;
    case 21:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, ">");
      break;
    case 22:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "and");
      break;
    case 23:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1684955502;
      goto LABEL_22;
    case 24:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 29295;
LABEL_18:
      *(_WORD *)__s = v11;
      __s[2] = 0;
      break;
    case 25:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "nor");
      break;
    case 26:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "xor");
      break;
    case 27:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1919905400;
LABEL_22:
      *(_DWORD *)__s = v12;
      __s[4] = 0;
      break;
    default:
      std::string::size_type v10 = 7;
      char v30 = 7;
      strcpy(__s, "UNKNOWN");
      break;
  }
  std::string::append(v8, __s, v10);
  std::string::size_type v13 = sub_24A498(v9, "(t");
  v14 = v13;
  switch(a2)
  {
    case 2:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "+");
      break;
    case 3:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "-");
      break;
    case 4:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "*");
      break;
    case 5:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "/");
      break;
    case 6:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "%");
      break;
    case 7:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "^");
      break;
    case 14:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "<");
      break;
    case 15:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15676;
      goto LABEL_40;
    case 16:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15677;
      goto LABEL_40;
    case 18:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15649;
      goto LABEL_40;
    case 20:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15678;
      goto LABEL_40;
    case 21:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, ">");
      break;
    case 22:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "and");
      break;
    case 23:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1684955502;
      goto LABEL_44;
    case 24:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 29295;
LABEL_40:
      *(_WORD *)unsigned __int8 v27 = v16;
      v27[2] = 0;
      break;
    case 25:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "nor");
      break;
    case 26:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "xor");
      break;
    case 27:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1919905400;
LABEL_44:
      *(_DWORD *)unsigned __int8 v27 = v17;
      v27[4] = 0;
      break;
    default:
      std::string::size_type v15 = 7;
      char v28 = 7;
      strcpy(v27, "UNKNOWN");
      break;
  }
  std::string::append(v13, v27, v15);
  v18 = sub_24A498(v14, "t)");
  std::string::size_type v19 = v18;
  switch(a3)
  {
    case 2:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 43;
      break;
    case 3:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 45;
      break;
    case 4:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 42;
      break;
    case 5:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 47;
      break;
    case 6:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 37;
      break;
    case 7:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 94;
      break;
    case 14:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 60;
      break;
    case 15:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15676;
      goto LABEL_62;
    case 16:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15677;
      goto LABEL_62;
    case 18:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15649;
      goto LABEL_62;
    case 20:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15678;
      goto LABEL_62;
    case 21:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 62;
      break;
    case 22:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 6581857;
      break;
    case 23:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1684955502;
      goto LABEL_66;
    case 24:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 29295;
LABEL_62:
      LOWORD(__p[0]) = v21;
      BYTE2(__p[0]) = 0;
      break;
    case 25:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499630;
      break;
    case 26:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499640;
      break;
    case 27:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1919905400;
LABEL_66:
      LODWORD(__p[0]) = v22;
      BYTE4(__p[0]) = 0;
      break;
    default:
      std::string::size_type v20 = 7;
      char v26 = 7;
      strcpy((char *)__p, "UNKNOWN");
      break;
  }
  std::string::append(v18, (const std::string::value_type *)__p, v20);
  long long v23 = sub_24A498(v19, "t");
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200((unsigned char *)a4, v23->__r_.__value_.__l.__data_, v23->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(void *)(a4 + 16) = *((void *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)a4 = v24;
  }
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_72:
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_77;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(*(void **)v27);
  if ((v30 & 0x80000000) == 0)
  {
LABEL_73:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_78:
    operator delete(v31.__r_.__value_.__l.__data_);
    return;
  }
LABEL_77:
  operator delete(*(void **)__s);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_78;
  }
}

void sub_281D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_281EFC()
{
}

uint64_t sub_281F10(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(double (**)(uint64_t, double *))(a1 + 40);
  v4 = *(uint64_t (**)(double *, uint64_t))(a1 + 56);
  double v6 = (*(double (**)(void, void))(a1 + 48))(*(void *)(a1 + 16), *(void *)(a1 + 24));
  double v7 = v3(v1, &v6);
  return v4(&v7, v2);
}

void sub_281F78(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F67C0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_24F67C0))
  {
    goto LABEL_2;
  }
  sub_24D754((uint64_t)&v30);
  uint64_t v2 = std::string::insert(&v30, 0, "((");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v31, ")o(");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v28);
  if ((v29 & 0x80u) == 0) {
    double v6 = v28;
  }
  else {
    double v6 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v7 = v29;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v28[1];
  }
  v8 = std::string::append(&v32, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v10 = std::string::append(&v33, "o");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v26);
  if ((v27 & 0x80u) == 0) {
    int v12 = v26;
  }
  else {
    int v12 = (void **)v26[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v13 = v27;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v26[1];
  }
  v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  __int16 v16 = std::string::append(&v35, "))o(");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)__p);
  if ((v25 & 0x80u) == 0) {
    v18 = __p;
  }
  else {
    v18 = (void **)__p[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v19 = v25;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  std::string::size_type v20 = std::string::append(&v36, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  int v22 = std::string::append(&v37, ")");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  unk_24F67B8 = *((void *)&v22->__r_.__value_.__l + 2);
  xmmword_24F67A8 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if (((char)v25 & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_38;
    }
  }
  else if (((char)v25 & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if (((char)v27 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (((char)v27 & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v26[0]);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v34.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if (((char)v29 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v33.__r_.__value_.__l.__data_);
  if (((char)v29 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v28[0]);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_45:
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_46:
    operator delete(v30.__r_.__value_.__l.__data_);
    goto LABEL_35;
  }
LABEL_44:
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_45;
  }
LABEL_34:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_35:
  __cxa_guard_release(&qword_24F67C0);
LABEL_2:
  if (byte_24F67BF < 0)
  {
    sub_4200((unsigned char *)a1, (void *)xmmword_24F67A8, *((unint64_t *)&xmmword_24F67A8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_24F67A8;
    *(void *)(a1 + 16) = unk_24F67B8;
  }
}

void sub_2822D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (*(char *)(v52 - 41) < 0)
  {
    operator delete(*(void **)(v52 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v52 - 73) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v52 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v52 - 105) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v52 - 96));
  if ((*(char *)(v52 - 105) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v52 - 128));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v52 - 137) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a15);
  if ((*(char *)(v52 - 137) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v52 - 160));
  if ((a52 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a47);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a21);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_12:
    __cxa_guard_abort(&qword_24F67C0);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a27);
  __cxa_guard_abort(&qword_24F67C0);
  _Unwind_Resume(a1);
}

void sub_28247C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    JUMPOUT(0x282450);
  }
  JUMPOUT(0x282324);
}

void sub_28248C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    JUMPOUT(0x282460);
  }
  JUMPOUT(0x28232CLL);
}

void sub_28249C(_Unwind_Exception *a1)
{
}

void sub_2824B4(int a1@<W1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  memset(&v31, 0, sizeof(v31));
  std::string::reserve(&v31, 0x40uLL);
  v8 = sub_24A498(&v31, "(t");
  long long v9 = v8;
  switch(a1)
  {
    case 2:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "+");
      break;
    case 3:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "-");
      break;
    case 4:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "*");
      break;
    case 5:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "/");
      break;
    case 6:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "%");
      break;
    case 7:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "^");
      break;
    case 14:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "<");
      break;
    case 15:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15676;
      goto LABEL_18;
    case 16:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15677;
      goto LABEL_18;
    case 18:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15649;
      goto LABEL_18;
    case 20:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15678;
      goto LABEL_18;
    case 21:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, ">");
      break;
    case 22:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "and");
      break;
    case 23:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1684955502;
      goto LABEL_22;
    case 24:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 29295;
LABEL_18:
      *(_WORD *)__s = v11;
      __s[2] = 0;
      break;
    case 25:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "nor");
      break;
    case 26:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "xor");
      break;
    case 27:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1919905400;
LABEL_22:
      *(_DWORD *)__s = v12;
      __s[4] = 0;
      break;
    default:
      std::string::size_type v10 = 7;
      char v30 = 7;
      strcpy(__s, "UNKNOWN");
      break;
  }
  std::string::append(v8, __s, v10);
  std::string::size_type v13 = sub_24A498(v9, "(t");
  v14 = v13;
  switch(a2)
  {
    case 2:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "+");
      break;
    case 3:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "-");
      break;
    case 4:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "*");
      break;
    case 5:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "/");
      break;
    case 6:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "%");
      break;
    case 7:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "^");
      break;
    case 14:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "<");
      break;
    case 15:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15676;
      goto LABEL_40;
    case 16:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15677;
      goto LABEL_40;
    case 18:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15649;
      goto LABEL_40;
    case 20:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15678;
      goto LABEL_40;
    case 21:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, ">");
      break;
    case 22:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "and");
      break;
    case 23:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1684955502;
      goto LABEL_44;
    case 24:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 29295;
LABEL_40:
      *(_WORD *)unsigned __int8 v27 = v16;
      v27[2] = 0;
      break;
    case 25:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "nor");
      break;
    case 26:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "xor");
      break;
    case 27:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1919905400;
LABEL_44:
      *(_DWORD *)unsigned __int8 v27 = v17;
      v27[4] = 0;
      break;
    default:
      std::string::size_type v15 = 7;
      char v28 = 7;
      strcpy(v27, "UNKNOWN");
      break;
  }
  std::string::append(v13, v27, v15);
  v18 = sub_24A498(v14, "t)");
  std::string::size_type v19 = v18;
  switch(a3)
  {
    case 2:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 43;
      break;
    case 3:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 45;
      break;
    case 4:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 42;
      break;
    case 5:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 47;
      break;
    case 6:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 37;
      break;
    case 7:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 94;
      break;
    case 14:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 60;
      break;
    case 15:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15676;
      goto LABEL_62;
    case 16:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15677;
      goto LABEL_62;
    case 18:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15649;
      goto LABEL_62;
    case 20:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15678;
      goto LABEL_62;
    case 21:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 62;
      break;
    case 22:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 6581857;
      break;
    case 23:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1684955502;
      goto LABEL_66;
    case 24:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 29295;
LABEL_62:
      LOWORD(__p[0]) = v21;
      BYTE2(__p[0]) = 0;
      break;
    case 25:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499630;
      break;
    case 26:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499640;
      break;
    case 27:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1919905400;
LABEL_66:
      LODWORD(__p[0]) = v22;
      BYTE4(__p[0]) = 0;
      break;
    default:
      std::string::size_type v20 = 7;
      char v26 = 7;
      strcpy((char *)__p, "UNKNOWN");
      break;
  }
  std::string::append(v18, (const std::string::value_type *)__p, v20);
  long long v23 = sub_24A498(v19, "t");
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200((unsigned char *)a4, v23->__r_.__value_.__l.__data_, v23->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(void *)(a4 + 16) = *((void *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)a4 = v24;
  }
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_72:
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_77;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(*(void **)v27);
  if ((v30 & 0x80000000) == 0)
  {
LABEL_73:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_78:
    operator delete(v31.__r_.__value_.__l.__data_);
    return;
  }
LABEL_77:
  operator delete(*(void **)__s);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_78;
  }
}

void sub_282B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_282D2C()
{
}

uint64_t sub_282D40(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(double (**)(uint64_t, double *))(a1 + 40);
  v4 = *(uint64_t (**)(double *, uint64_t))(a1 + 56);
  double v6 = (*(double (**)(void, uint64_t))(a1 + 48))(*(void *)(a1 + 16), a1 + 24);
  double v7 = v3(v1, &v6);
  return v4(&v7, v2);
}

void sub_282DAC(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F67E0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_24F67E0))
  {
    goto LABEL_2;
  }
  sub_24D754((uint64_t)&v30);
  uint64_t v2 = std::string::insert(&v30, 0, "((");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v31, ")o(");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v28);
  if ((v29 & 0x80u) == 0) {
    double v6 = v28;
  }
  else {
    double v6 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v7 = v29;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v28[1];
  }
  v8 = std::string::append(&v32, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v10 = std::string::append(&v33, "o");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_24D754((uint64_t)v26);
  if ((v27 & 0x80u) == 0) {
    int v12 = v26;
  }
  else {
    int v12 = (void **)v26[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v13 = v27;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v26[1];
  }
  v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  __int16 v16 = std::string::append(&v35, "))o(");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)__p);
  if ((v25 & 0x80u) == 0) {
    v18 = __p;
  }
  else {
    v18 = (void **)__p[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v19 = v25;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  std::string::size_type v20 = std::string::append(&v36, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  int v22 = std::string::append(&v37, ")");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  unk_24F67D8 = *((void *)&v22->__r_.__value_.__l + 2);
  xmmword_24F67C8 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if (((char)v25 & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_38;
    }
  }
  else if (((char)v25 & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if (((char)v27 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (((char)v27 & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v26[0]);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v34.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if (((char)v29 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v33.__r_.__value_.__l.__data_);
  if (((char)v29 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v28[0]);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_45:
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_46:
    operator delete(v30.__r_.__value_.__l.__data_);
    goto LABEL_35;
  }
LABEL_44:
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_45;
  }
LABEL_34:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_35:
  __cxa_guard_release(&qword_24F67E0);
LABEL_2:
  if (byte_24F67DF < 0)
  {
    sub_4200((unsigned char *)a1, (void *)xmmword_24F67C8, *((unint64_t *)&xmmword_24F67C8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_24F67C8;
    *(void *)(a1 + 16) = unk_24F67D8;
  }
}

void sub_283104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (*(char *)(v52 - 41) < 0)
  {
    operator delete(*(void **)(v52 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v52 - 73) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v52 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v52 - 105) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v52 - 96));
  if ((*(char *)(v52 - 105) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v52 - 128));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v52 - 137) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a15);
  if ((*(char *)(v52 - 137) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v52 - 160));
  if ((a52 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a47);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a21);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_12:
    __cxa_guard_abort(&qword_24F67E0);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a27);
  __cxa_guard_abort(&qword_24F67E0);
  _Unwind_Resume(a1);
}

void sub_2832B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    JUMPOUT(0x283284);
  }
  JUMPOUT(0x283158);
}

void sub_2832C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    JUMPOUT(0x283294);
  }
  JUMPOUT(0x283160);
}

void sub_2832D0(_Unwind_Exception *a1)
{
}

void sub_2832E8(int a1@<W1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  memset(&v31, 0, sizeof(v31));
  std::string::reserve(&v31, 0x40uLL);
  v8 = sub_24A498(&v31, "(t");
  long long v9 = v8;
  switch(a1)
  {
    case 2:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "+");
      break;
    case 3:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "-");
      break;
    case 4:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "*");
      break;
    case 5:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "/");
      break;
    case 6:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "%");
      break;
    case 7:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "^");
      break;
    case 14:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "<");
      break;
    case 15:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15676;
      goto LABEL_18;
    case 16:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15677;
      goto LABEL_18;
    case 18:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15649;
      goto LABEL_18;
    case 20:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15678;
      goto LABEL_18;
    case 21:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, ">");
      break;
    case 22:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "and");
      break;
    case 23:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1684955502;
      goto LABEL_22;
    case 24:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 29295;
LABEL_18:
      *(_WORD *)__s = v11;
      __s[2] = 0;
      break;
    case 25:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "nor");
      break;
    case 26:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "xor");
      break;
    case 27:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1919905400;
LABEL_22:
      *(_DWORD *)__s = v12;
      __s[4] = 0;
      break;
    default:
      std::string::size_type v10 = 7;
      char v30 = 7;
      strcpy(__s, "UNKNOWN");
      break;
  }
  std::string::append(v8, __s, v10);
  std::string::size_type v13 = sub_24A498(v9, "(t");
  v14 = v13;
  switch(a2)
  {
    case 2:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "+");
      break;
    case 3:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "-");
      break;
    case 4:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "*");
      break;
    case 5:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "/");
      break;
    case 6:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "%");
      break;
    case 7:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "^");
      break;
    case 14:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "<");
      break;
    case 15:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15676;
      goto LABEL_40;
    case 16:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15677;
      goto LABEL_40;
    case 18:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15649;
      goto LABEL_40;
    case 20:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15678;
      goto LABEL_40;
    case 21:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, ">");
      break;
    case 22:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "and");
      break;
    case 23:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1684955502;
      goto LABEL_44;
    case 24:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 29295;
LABEL_40:
      *(_WORD *)unsigned __int8 v27 = v16;
      v27[2] = 0;
      break;
    case 25:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "nor");
      break;
    case 26:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "xor");
      break;
    case 27:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1919905400;
LABEL_44:
      *(_DWORD *)unsigned __int8 v27 = v17;
      v27[4] = 0;
      break;
    default:
      std::string::size_type v15 = 7;
      char v28 = 7;
      strcpy(v27, "UNKNOWN");
      break;
  }
  std::string::append(v13, v27, v15);
  v18 = sub_24A498(v14, "t)");
  std::string::size_type v19 = v18;
  switch(a3)
  {
    case 2:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 43;
      break;
    case 3:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 45;
      break;
    case 4:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 42;
      break;
    case 5:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 47;
      break;
    case 6:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 37;
      break;
    case 7:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 94;
      break;
    case 14:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 60;
      break;
    case 15:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15676;
      goto LABEL_62;
    case 16:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15677;
      goto LABEL_62;
    case 18:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15649;
      goto LABEL_62;
    case 20:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15678;
      goto LABEL_62;
    case 21:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 62;
      break;
    case 22:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 6581857;
      break;
    case 23:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1684955502;
      goto LABEL_66;
    case 24:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 29295;
LABEL_62:
      LOWORD(__p[0]) = v21;
      BYTE2(__p[0]) = 0;
      break;
    case 25:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499630;
      break;
    case 26:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499640;
      break;
    case 27:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1919905400;
LABEL_66:
      LODWORD(__p[0]) = v22;
      BYTE4(__p[0]) = 0;
      break;
    default:
      std::string::size_type v20 = 7;
      char v26 = 7;
      strcpy((char *)__p, "UNKNOWN");
      break;
  }
  std::string::append(v18, (const std::string::value_type *)__p, v20);
  long long v23 = sub_24A498(v19, "t");
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200((unsigned char *)a4, v23->__r_.__value_.__l.__data_, v23->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(void *)(a4 + 16) = *((void *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)a4 = v24;
  }
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_72:
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_77;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(*(void **)v27);
  if ((v30 & 0x80000000) == 0)
  {
LABEL_73:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_78:
    operator delete(v31.__r_.__value_.__l.__data_);
    return;
  }
LABEL_77:
  operator delete(*(void **)__s);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_78;
  }
}

void sub_283988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_283B60()
{
}

uint64_t sub_283B74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 32;
  long long v3 = *(double (**)(uint64_t, double *))(a1 + 40);
  v4 = *(uint64_t (**)(double *, uint64_t))(a1 + 56);
  double v6 = (*(double (**)(uint64_t, void))(a1 + 48))(a1 + 16, *(void *)(a1 + 24));
  double v7 = v3(v1, &v6);
  return v4(&v7, v2);
}

void sub_283BE4(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6800, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_24F6800))
  {
    goto LABEL_2;
  }
  sub_24AA24((uint64_t)&v30);
  uint64_t v2 = std::string::insert(&v30, 0, "((");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v31, ")o(");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_24D754((uint64_t)v28);
  if ((v29 & 0x80u) == 0) {
    double v6 = v28;
  }
  else {
    double v6 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v7 = v29;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v28[1];
  }
  v8 = std::string::append(&v32, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v10 = std::string::append(&v33, "o");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v26);
  if ((v27 & 0x80u) == 0) {
    int v12 = v26;
  }
  else {
    int v12 = (void **)v26[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v13 = v27;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v26[1];
  }
  v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  __int16 v16 = std::string::append(&v35, "))o(");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_24D754((uint64_t)__p);
  if ((v25 & 0x80u) == 0) {
    v18 = __p;
  }
  else {
    v18 = (void **)__p[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v19 = v25;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  std::string::size_type v20 = std::string::append(&v36, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  int v22 = std::string::append(&v37, ")");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  unk_24F67F8 = *((void *)&v22->__r_.__value_.__l + 2);
  xmmword_24F67E8 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if (((char)v25 & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_38;
    }
  }
  else if (((char)v25 & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if (((char)v27 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (((char)v27 & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v26[0]);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v34.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if (((char)v29 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v33.__r_.__value_.__l.__data_);
  if (((char)v29 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v28[0]);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_45:
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_46:
    operator delete(v30.__r_.__value_.__l.__data_);
    goto LABEL_35;
  }
LABEL_44:
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_45;
  }
LABEL_34:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_35:
  __cxa_guard_release(&qword_24F6800);
LABEL_2:
  if (byte_24F67FF < 0)
  {
    sub_4200((unsigned char *)a1, (void *)xmmword_24F67E8, *((unint64_t *)&xmmword_24F67E8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_24F67E8;
    *(void *)(a1 + 16) = unk_24F67F8;
  }
}

void sub_283F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (*(char *)(v52 - 41) < 0)
  {
    operator delete(*(void **)(v52 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v52 - 73) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v52 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v52 - 105) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v52 - 96));
  if ((*(char *)(v52 - 105) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v52 - 128));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v52 - 137) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a15);
  if ((*(char *)(v52 - 137) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v52 - 160));
  if ((a52 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a47);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a21);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_12:
    __cxa_guard_abort(&qword_24F6800);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a27);
  __cxa_guard_abort(&qword_24F6800);
  _Unwind_Resume(a1);
}

void sub_2840E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    JUMPOUT(0x2840BCLL);
  }
  JUMPOUT(0x283F90);
}

void sub_2840F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    JUMPOUT(0x2840CCLL);
  }
  JUMPOUT(0x283F98);
}

void sub_284108(_Unwind_Exception *a1)
{
}

void sub_284120(int a1@<W1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  memset(&v31, 0, sizeof(v31));
  std::string::reserve(&v31, 0x40uLL);
  v8 = sub_24A498(&v31, "(t");
  long long v9 = v8;
  switch(a1)
  {
    case 2:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "+");
      break;
    case 3:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "-");
      break;
    case 4:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "*");
      break;
    case 5:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "/");
      break;
    case 6:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "%");
      break;
    case 7:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "^");
      break;
    case 14:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, "<");
      break;
    case 15:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15676;
      goto LABEL_18;
    case 16:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15677;
      goto LABEL_18;
    case 18:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15649;
      goto LABEL_18;
    case 20:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 15678;
      goto LABEL_18;
    case 21:
      std::string::size_type v10 = 1;
      char v30 = 1;
      strcpy(__s, ">");
      break;
    case 22:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "and");
      break;
    case 23:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1684955502;
      goto LABEL_22;
    case 24:
      std::string::size_type v10 = 2;
      char v30 = 2;
      __int16 v11 = 29295;
LABEL_18:
      *(_WORD *)__s = v11;
      __s[2] = 0;
      break;
    case 25:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "nor");
      break;
    case 26:
      std::string::size_type v10 = 3;
      char v30 = 3;
      strcpy(__s, "xor");
      break;
    case 27:
      std::string::size_type v10 = 4;
      char v30 = 4;
      int v12 = 1919905400;
LABEL_22:
      *(_DWORD *)__s = v12;
      __s[4] = 0;
      break;
    default:
      std::string::size_type v10 = 7;
      char v30 = 7;
      strcpy(__s, "UNKNOWN");
      break;
  }
  std::string::append(v8, __s, v10);
  std::string::size_type v13 = sub_24A498(v9, "(t");
  v14 = v13;
  switch(a2)
  {
    case 2:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "+");
      break;
    case 3:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "-");
      break;
    case 4:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "*");
      break;
    case 5:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "/");
      break;
    case 6:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "%");
      break;
    case 7:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "^");
      break;
    case 14:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, "<");
      break;
    case 15:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15676;
      goto LABEL_40;
    case 16:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15677;
      goto LABEL_40;
    case 18:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15649;
      goto LABEL_40;
    case 20:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 15678;
      goto LABEL_40;
    case 21:
      std::string::size_type v15 = 1;
      char v28 = 1;
      strcpy(v27, ">");
      break;
    case 22:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "and");
      break;
    case 23:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1684955502;
      goto LABEL_44;
    case 24:
      std::string::size_type v15 = 2;
      char v28 = 2;
      __int16 v16 = 29295;
LABEL_40:
      *(_WORD *)unsigned __int8 v27 = v16;
      v27[2] = 0;
      break;
    case 25:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "nor");
      break;
    case 26:
      std::string::size_type v15 = 3;
      char v28 = 3;
      strcpy(v27, "xor");
      break;
    case 27:
      std::string::size_type v15 = 4;
      char v28 = 4;
      int v17 = 1919905400;
LABEL_44:
      *(_DWORD *)unsigned __int8 v27 = v17;
      v27[4] = 0;
      break;
    default:
      std::string::size_type v15 = 7;
      char v28 = 7;
      strcpy(v27, "UNKNOWN");
      break;
  }
  std::string::append(v13, v27, v15);
  v18 = sub_24A498(v14, "t)");
  std::string::size_type v19 = v18;
  switch(a3)
  {
    case 2:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 43;
      break;
    case 3:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 45;
      break;
    case 4:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 42;
      break;
    case 5:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 47;
      break;
    case 6:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 37;
      break;
    case 7:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 94;
      break;
    case 14:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 60;
      break;
    case 15:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15676;
      goto LABEL_62;
    case 16:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15677;
      goto LABEL_62;
    case 18:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15649;
      goto LABEL_62;
    case 20:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 15678;
      goto LABEL_62;
    case 21:
      std::string::size_type v20 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 62;
      break;
    case 22:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 6581857;
      break;
    case 23:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1684955502;
      goto LABEL_66;
    case 24:
      std::string::size_type v20 = 2;
      char v26 = 2;
      __int16 v21 = 29295;
LABEL_62:
      LOWORD(__p[0]) = v21;
      BYTE2(__p[0]) = 0;
      break;
    case 25:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499630;
      break;
    case 26:
      std::string::size_type v20 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499640;
      break;
    case 27:
      std::string::size_type v20 = 4;
      char v26 = 4;
      int v22 = 1919905400;
LABEL_66:
      LODWORD(__p[0]) = v22;
      BYTE4(__p[0]) = 0;
      break;
    default:
      std::string::size_type v20 = 7;
      char v26 = 7;
      strcpy((char *)__p, "UNKNOWN");
      break;
  }
  std::string::append(v18, (const std::string::value_type *)__p, v20);
  long long v23 = sub_24A498(v19, "t");
  if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200((unsigned char *)a4, v23->__r_.__value_.__l.__data_, v23->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(void *)(a4 + 16) = *((void *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)a4 = v24;
  }
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_72:
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_77;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(*(void **)v27);
  if ((v30 & 0x80000000) == 0)
  {
LABEL_73:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_78:
    operator delete(v31.__r_.__value_.__l.__data_);
    return;
  }
LABEL_77:
  operator delete(*(void **)__s);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_78;
  }
}

void sub_2847C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_284998()
{
}

uint64_t sub_2849AC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = a1 + 32;
  long long v3 = *(double (**)(uint64_t, double *))(a1 + 40);
  v4 = *(uint64_t (**)(double *, uint64_t))(a1 + 56);
  double v6 = (*(double (**)(void, void))(a1 + 48))(*(void *)(a1 + 16), *(void *)(a1 + 24));
  double v7 = v3(v1, &v6);
  return v4(&v7, v2);
}

void sub_284A18(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6820, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_24F6820))
  {
    goto LABEL_2;
  }
  sub_24D754((uint64_t)&v30);
  uint64_t v2 = std::string::insert(&v30, 0, "((");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v31, ")o(");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v28);
  if ((v29 & 0x80u) == 0) {
    double v6 = v28;
  }
  else {
    double v6 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v7 = v29;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v28[1];
  }
  v8 = std::string::append(&v32, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v10 = std::string::append(&v33, "o");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_24AA24((uint64_t)v26);
  if ((v27 & 0x80u) == 0) {
    int v12 = v26;
  }
  else {
    int v12 = (void **)v26[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v13 = v27;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v26[1];
  }
  v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  __int16 v16 = std::string::append(&v35, "))o(");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_24D754((uint64_t)__p);
  if ((v25 & 0x80u) == 0) {
    v18 = __p;
  }
  else {
    v18 = (void **)__p[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v19 = v25;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  std::string::size_type v20 = std::string::append(&v36, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  int v22 = std::string::append(&v37, ")");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  unk_24F6818 = *((void *)&v22->__r_.__value_.__l + 2);
  xmmword_24F6808 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if (((char)v25 & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_38;
    }
  }
  else if (((char)v25 & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if (((char)v27 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (((char)v27 & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v26[0]);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v34.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if (((char)v29 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v33.__r_.__value_.__l.__data_);
  if (((char)v29 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v28[0]);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_45:
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_46:
    operator delete(v30.__r_.__value_.__l.__data_);
    goto LABEL_35;
  }
LABEL_44:
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_45;
  }
LABEL_34:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_35:
  __cxa_guard_release(&qword_24F6820);
LABEL_2:
  if (byte_24F681F < 0)
  {
    sub_4200((unsigned char *)a1, (void *)xmmword_24F6808, *((unint64_t *)&xmmword_24F6808 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_24F6808;
    *(void *)(a1 + 16) = unk_24F6818;
  }
}

void sub_284D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (*(char *)(v52 - 41) < 0)
  {
    operator delete(*(void **)(v52 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v52 - 73) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v52 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v52 - 105) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v52 - 96));
  if ((*(char *)(v52 - 105) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v52 - 128));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v52 - 137) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a15);
  if ((*(char *)(v52 - 137) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v52 - 160));
  if ((a52 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a47);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a21);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_12:
    __cxa_guard_abort(&qword_24F6820);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a27);
  __cxa_guard_abort(&qword_24F6820);
  _Unwind_Resume(a1);
}

void sub_284F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    JUMPOUT(0x284EF0);
  }
  JUMPOUT(0x284DC4);
}

void sub_284F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    JUMPOUT(0x284F00);
  }
  JUMPOUT(0x284DCCLL);
}

void sub_284F3C(_Unwind_Exception *a1)
{
}

uint64_t sub_284F54(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  long long v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      long long v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 2048;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 4096;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      std::string::size_type v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_28501C(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2)
  {
    uint64_t v3 = a1[9];
    unint64_t v4 = (void *)a1[8];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      unint64_t v4 = (void *)a1[8];
    }
    a1[9] = v2;
    operator delete(v4);
  }
  uint64_t v5 = a1[5];
  if (v5)
  {
    uint64_t v6 = a1[6];
    std::string::size_type v7 = (void *)a1[5];
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 9) < 0) {
          operator delete(*(void **)(v6 - 32));
        }
        v6 -= 32;
      }
      while (v6 != v5);
      std::string::size_type v7 = (void *)a1[5];
    }
    a1[6] = v5;
    operator delete(v7);
  }
  uint64_t v8 = a1[2];
  if (v8)
  {
    uint64_t v9 = a1[3];
    std::string::size_type v10 = (void *)a1[2];
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 9) < 0) {
          operator delete(*(void **)(v9 - 32));
        }
        v9 -= 32;
      }
      while (v9 != v8);
      std::string::size_type v10 = (void *)a1[2];
    }
    a1[3] = v8;
    operator delete(v10);
  }
  return a1;
}

uint64_t **sub_285120(uint64_t **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if (*v2)
    {
      uint64_t v3 = *v2 - 1;
      *uint64_t v2 = v3;
      if (!v3)
      {
        sub_220A54((uint64_t)a1);
        unint64_t v4 = *a1;
        if (*a1)
        {
          uint64_t v5 = v4[1];
          if (v5)
          {
            if (!*v4)
            {
              sub_2851BC(v5);
              operator delete();
            }
          }
          operator delete();
        }
      }
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_2851BC(uint64_t a1)
{
  uint64_t v4 = a1 + 296;
  uint64_t v2 = *(void **)(a1 + 296);
  uint64_t v3 = *(void **)(v4 + 8);
  if (v3 == v2)
  {
    uint64_t v2 = v3;
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = v2[v5];
      if (v6)
      {
        (*(void (**)(void))(*(void *)v6 + 8))(v2[v5]);
        uint64_t v2 = *(void **)(a1 + 296);
        uint64_t v3 = *(void **)(a1 + 304);
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  if (v2)
  {
    *(void *)(a1 + 304) = v2;
    operator delete(v2);
  }
  sub_2F020(a1 + 272, *(char **)(a1 + 280));
  if (*(void *)(a1 + 264))
  {
    uint64_t v7 = *(void *)(a1 + 248);
    uint64_t v8 = *(char **)(a1 + 256);
    uint64_t v9 = *(void *)v8;
    *(void *)(v9 + 8) = *(void *)(v7 + 8);
    **(void **)(v7 + 8) = v9;
    *(void *)(a1 + 264) = 0;
    if (v8 != (char *)(a1 + 248))
    {
      do
      {
        long long v15 = (char *)*((void *)v8 + 1);
        if (v8[39] < 0) {
          operator delete(*((void **)v8 + 2));
        }
        operator delete(v8);
        uint64_t v8 = v15;
      }
      while (v15 != (char *)(a1 + 248));
    }
  }
  if (*(void *)(a1 + 240))
  {
    uint64_t v11 = *(void *)(a1 + 224);
    std::string::size_type v10 = *(uint64_t **)(a1 + 232);
    uint64_t v12 = *v10;
    *(void *)(v12 + 8) = *(void *)(v11 + 8);
    **(void **)(v11 + 8) = v12;
    *(void *)(a1 + 240) = 0;
    if (v10 != (uint64_t *)(a1 + 224))
    {
      do
      {
        std::string::size_type v13 = (uint64_t *)v10[1];
        operator delete(v10);
        std::string::size_type v10 = v13;
      }
      while (v13 != (uint64_t *)(a1 + 224));
    }
  }
  sub_2F020(a1 + 192, *(char **)(a1 + 200));
  sub_2F020(a1 + 160, *(char **)(a1 + 168));
  sub_2F020(a1 + 128, *(char **)(a1 + 136));
  sub_2F020(a1 + 96, *(char **)(a1 + 104));
  sub_2F020(a1 + 64, *(char **)(a1 + 72));
  sub_2F020(a1 + 32, *(char **)(a1 + 40));
  sub_2F020(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_285354(uint64_t a1)
{
  *(void *)(a1 + 1464) = off_242BB30;
  uint64_t v2 = *(void *)(a1 + 1504);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 1512);
    uint64_t v4 = *(void **)(a1 + 1504);
    if (v3 == v2)
    {
LABEL_11:
      *(void *)(a1 + 1512) = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      if (*(char *)(v3 - 9) < 0)
      {
        operator delete(*(void **)(v3 - 32));
        if (*(char *)(v3 - 49) < 0) {
LABEL_9:
        }
          operator delete(*(void **)(v3 - 72));
      }
      else if (*(char *)(v3 - 49) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 80;
      if (v3 == v2)
      {
        uint64_t v4 = *(void **)(a1 + 1504);
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  sub_22EFF4(a1 + 1480, *(void **)(a1 + 1488));
  *(void *)(a1 + 1400) = off_242BAD0;
  uint64_t v5 = *(void *)(a1 + 1440);
  if (!v5) {
    goto LABEL_23;
  }
  uint64_t v6 = *(void *)(a1 + 1448);
  uint64_t v7 = *(void **)(a1 + 1440);
  if (v6 != v5)
  {
    while (1)
    {
      if (*(char *)(v6 - 9) < 0)
      {
        operator delete(*(void **)(v6 - 32));
        if (*(char *)(v6 - 49) < 0) {
LABEL_20:
        }
          operator delete(*(void **)(v6 - 72));
      }
      else if (*(char *)(v6 - 49) < 0)
      {
        goto LABEL_20;
      }
      v6 -= 80;
      if (v6 == v5)
      {
        uint64_t v7 = *(void **)(a1 + 1440);
        break;
      }
    }
  }
  *(void *)(a1 + 1448) = v5;
  operator delete(v7);
LABEL_23:
  sub_22EFF4(a1 + 1416, *(void **)(a1 + 1424));
  *(void *)(a1 + 1352) = off_242BA70;
  uint64_t v8 = *(void **)(a1 + 1376);
  if (v8)
  {
    *(void *)(a1 + 1384) = v8;
    operator delete(v8);
  }
  *(void *)(a1 + 1240) = off_242BA10;
  if (*(char *)(a1 + 1343) < 0) {
    operator delete(*(void **)(a1 + 1320));
  }
  sub_431BC(a1 + 1264);
  *(void *)(a1 + 1208) = off_242B998;
  sub_23052C(a1 + 1216, *(void *)(a1 + 1224));
  *(void *)(a1 + 1136) = off_242B880;
  sub_2F020(a1 + 1152, *(char **)(a1 + 1160));
  uint64_t v9 = *(void **)(a1 + 1080);
  if (v9)
  {
    *(void *)(a1 + 1088) = v9;
    operator delete(v9);
  }
  std::string::size_type v10 = *(void **)(a1 + 1056);
  if (v10)
  {
    *(void *)(a1 + 1064) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void **)(a1 + 1032);
  if (v11)
  {
    *(void *)(a1 + 1040) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *(void **)(a1 + 1008);
  if (v12)
  {
    *(void *)(a1 + 1016) = v12;
    operator delete(v12);
  }
  if (*(char *)(a1 + 927) < 0)
  {
    operator delete(*(void **)(a1 + 904));
    std::string::size_type v13 = *(void ***)(a1 + 880);
    if (!v13)
    {
LABEL_37:
      if ((*(char *)(a1 + 871) & 0x80000000) == 0) {
        goto LABEL_38;
      }
LABEL_57:
      operator delete(*(void **)(a1 + 848));
      goto LABEL_38;
    }
  }
  else
  {
    std::string::size_type v13 = *(void ***)(a1 + 880);
    if (!v13) {
      goto LABEL_37;
    }
  }
  unsigned __int8 v25 = *(void ***)(a1 + 888);
  if (v25 == v13)
  {
    *(void *)(a1 + 888) = v13;
    operator delete(v13);
    if ((*(char *)(a1 + 871) & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_57;
  }
  do
  {
    if (*((char *)v25 - 73) < 0) {
      operator delete(*(v25 - 12));
    }
    v25 -= 12;
  }
  while (v25 != v13);
  char v28 = *(void **)(a1 + 880);
  *(void *)(a1 + 888) = v13;
  operator delete(v28);
  if (*(char *)(a1 + 871) < 0) {
    goto LABEL_57;
  }
LABEL_38:
  sub_2F020(a1 + 824, *(char **)(a1 + 832));
  sub_2F020(a1 + 800, *(char **)(a1 + 808));
  sub_22EFF4(a1 + 776, *(void **)(a1 + 784));
  sub_22EFF4(a1 + 752, *(void **)(a1 + 760));
  sub_22EFF4(a1 + 728, *(void **)(a1 + 736));
  sub_2F020(a1 + 704, *(char **)(a1 + 712));
  sub_284F54(a1 + 600);
  v14 = (void **)(a1 + 552);
  sub_B1980((void *)(a1 + 552));
  long long v15 = *(void ***)(a1 + 560);
  __int16 v16 = *(void ***)(a1 + 568);
  if (v15 != v16)
  {
    do
    {
      long long v17 = *v15++;
      operator delete(v17);
    }
    while (v15 != v16);
    uint64_t v18 = *(void *)(a1 + 560);
    uint64_t v19 = *(void *)(a1 + 568);
    if (v19 != v18) {
      *(void *)(a1 + 568) = v19 + ((v18 - v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*v14) {
    operator delete(*v14);
  }
  sub_28501C((void *)(a1 + 464));
  std::string::size_type v20 = *(uint64_t ***)(a1 + 440);
  if (v20)
  {
    long long v21 = *(uint64_t ***)(a1 + 448);
    int v22 = *(void **)(a1 + 440);
    if (v21 != v20)
    {
      do
        long long v21 = sub_285120(v21 - 1);
      while (v21 != v20);
      int v22 = *(void **)(a1 + 440);
    }
    *(void *)(a1 + 448) = v20;
    operator delete(v22);
  }
  sub_2F020(a1 + 360, *(char **)(a1 + 368));
  sub_2F020(a1 + 320, *(char **)(a1 + 328));
  sub_2F020(a1 + 296, *(char **)(a1 + 304));
  sub_2F020(a1 + 272, *(char **)(a1 + 280));
  sub_2F020(a1 + 248, *(char **)(a1 + 256));
  sub_2F020(a1 + 224, *(char **)(a1 + 232));
  sub_2F020(a1 + 200, *(char **)(a1 + 208));
  if (*(char *)(a1 + 175) < 0)
  {
    operator delete(*(void **)(a1 + 152));
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
    {
LABEL_51:
      if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
        goto LABEL_52;
      }
LABEL_63:
      operator delete(*(void **)(a1 + 48));
      long long v23 = *(void ***)a1;
      if (!*(void *)a1) {
        return a1;
      }
      goto LABEL_64;
    }
  }
  else if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    goto LABEL_51;
  }
  operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 71) < 0) {
    goto LABEL_63;
  }
LABEL_52:
  long long v23 = *(void ***)a1;
  if (!*(void *)a1) {
    return a1;
  }
LABEL_64:
  char v26 = *(void ***)(a1 + 8);
  unsigned __int8 v27 = v23;
  if (v26 != v23)
  {
    do
    {
      if (*((char *)v26 - 9) < 0) {
        operator delete(*(v26 - 4));
      }
      v26 -= 5;
    }
    while (v26 != v23);
    unsigned __int8 v27 = *(void ***)a1;
  }
  *(void *)(a1 + 8) = v23;
  operator delete(v27);
  return a1;
}

uint64_t *sub_285810(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *result = a2;
  if (v2)
  {
    *(void *)(v2 + 1672) = off_23FE588;
    if (*(char *)(v2 + 1727) < 0)
    {
      operator delete(*(void **)(v2 + 1704));
      *(void *)(v2 + 1600) = off_23FE588;
      if ((*(char *)(v2 + 1655) & 0x80000000) == 0) {
        goto LABEL_4;
      }
    }
    else
    {
      *(void *)(v2 + 1600) = off_23FE588;
      if ((*(char *)(v2 + 1655) & 0x80000000) == 0) {
        goto LABEL_4;
      }
    }
    operator delete(*(void **)(v2 + 1632));
LABEL_4:
    sub_A99C4(v2 + 1536);
    sub_285354(v2 + 8);
    sub_285120((uint64_t **)v2);
    operator delete();
  }
  return result;
}

uint64_t sub_285908(uint64_t a1, long long *a2, uint64_t a3, char a4)
{
  if ((uint64_t *)(a1 + 8) == sub_ADE40(a1, (uint64_t)a2))
  {
    std::string::size_type v10 = a2;
    uint64_t v9 = sub_2859A4(a1, (uint64_t)a2, (uint64_t)&unk_20F06E0, &v10);
    v9[56] = a4;
    *((void *)v9 + 8) = a3;
    ++*(void *)(a1 + 24);
  }
  return 1;
}

char *sub_2859A4(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = sub_AE20C(a1, &v16, a2);
  if (*v6) {
    return (char *)*v6;
  }
  uint64_t v8 = v6;
  uint64_t v9 = (char *)operator new(0x48uLL);
  std::string::size_type v10 = v9 + 32;
  uint64_t v11 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_4200(v10, *(void **)v11, *((void *)v11 + 1));
  }
  else
  {
    long long v12 = *v11;
    *((void *)v9 + 6) = *((void *)v11 + 2);
    *(_OWORD *)std::string::size_type v10 = v12;
  }
  v9[56] = 0;
  *((void *)v9 + 8) = 0;
  uint64_t v13 = v16;
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = v13;
  uint64_t *v8 = (uint64_t)v9;
  uint64_t v14 = **(void **)a1;
  long long v15 = (uint64_t *)v9;
  if (v14)
  {
    *(void *)a1 = v14;
    long long v15 = (uint64_t *)*v8;
  }
  sub_2F250(*(uint64_t **)(a1 + 8), v15);
  ++*(void *)(a1 + 16);
  return v9;
}

void sub_285A90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_285AA4(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = sub_AE20C(a1, &v16, a2);
  if (*v6) {
    return (char *)*v6;
  }
  uint64_t v8 = v6;
  uint64_t v9 = (char *)operator new(0x48uLL);
  std::string::size_type v10 = v9 + 32;
  uint64_t v11 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_4200(v10, *(void **)v11, *((void *)v11 + 1));
  }
  else
  {
    long long v12 = *v11;
    *((void *)v9 + 6) = *((void *)v11 + 2);
    *(_OWORD *)std::string::size_type v10 = v12;
  }
  v9[56] = 0;
  *((void *)v9 + 8) = 0;
  uint64_t v13 = v16;
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = v13;
  uint64_t *v8 = (uint64_t)v9;
  uint64_t v14 = **(void **)a1;
  long long v15 = (uint64_t *)v9;
  if (v14)
  {
    *(void *)a1 = v14;
    long long v15 = (uint64_t *)*v8;
  }
  sub_2F250(*(uint64_t **)(a1 + 8), v15);
  ++*(void *)(a1 + 16);
  return v9;
}

void sub_285B90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_285BA4()
{
  strcpy((char *)&dword_2556530, "break");
  strcpy((char *)&dword_2556548, "case");
  strcpy((char *)&qword_2556560, "continue");
  strcpy((char *)&dword_2556578, "default");
  strcpy((char *)&dword_2556590, "false");
  strcpy((char *)&dword_25565D8, "else");
  strcpy((char *)&dword_25565F0, "ilike");
  strcpy((char *)&word_2556608, "in");
  dword_2556668 = 7499630;
  dword_2556680 = 7630702;
  strcpy((char *)&dword_2556698, "null");
  word_25566F8 = 26739;
  word_2556710 = 26739;
  strcpy((char *)&dword_2556758, "true");
  dword_2556770 = 1769238133;
  word_2556788 = 24950;
  byte_25559BF = 3;
  byte_25559AA = 115;
  word_25559A8 = 25185;
  byte_25559AB = 0;
  byte_25559D7 = 4;
  strcpy((char *)&dword_25559C0, "acos");
  byte_25559EF = 5;
  byte_2555A9C = 107;
  byte_25559DC = 104;
  dword_25559D8 = 1936679777;
  byte_25559DD = 0;
  byte_2555A07 = 3;
  byte_25559F2 = 100;
  word_25559F0 = 28257;
  byte_25559F3 = 0;
  byte_2555A1F = 4;
  dword_2555A98 = 1634038370;
  strcpy((char *)&dword_2555A08, "asin");
  byte_2555A37 = 5;
  byte_2555A24 = 104;
  dword_2555A20 = 1852404577;
  byte_2555A25 = 0;
  byte_2555A4F = 4;
  strcpy((char *)&dword_2555AB0, "case");
  strcpy((char *)&dword_2555A38, "atan");
  byte_2555A67 = 5;
  byte_2555A54 = 104;
  dword_2555A50 = 1851880545;
  byte_2555A55 = 0;
  byte_2555A7F = 5;
  strcpy((char *)&qword_2555AF8, "continue");
  byte_2555A6C = 50;
  dword_2555A68 = 1851880545;
  byte_2555A6D = 0;
  byte_2555A97 = 3;
  strcpy((char *)&dword_2555B70, "default");
  byte_2555A82 = 103;
  dword_2555C30 = 1936482662;
  word_2555A80 = 30305;
  byte_2555A83 = 0;
  byte_2555AAF = 5;
  byte_2555A9D = 0;
  byte_2555AC7 = 4;
  byte_2555ADF = 4;
  strcpy((char *)&dword_2555CF0, "else");
  strcpy((char *)&dword_2555AC8, "ceil");
  byte_2555AF7 = 5;
  dword_2555D08 = 1802071145;
  byte_2555AE4 = 112;
  strcpy((char *)&word_2555D20, "in");
  dword_2555AE0 = 1835101283;
  byte_2555AE5 = 0;
  byte_2555B0F = 8;
  byte_2555B27 = 3;
  byte_2555B12 = 115;
  word_2555B10 = 28515;
  byte_2555B13 = 0;
  byte_2555B3F = 4;
  word_2555FF0 = 26739;
  word_2556008 = 26739;
  strcpy((char *)&dword_2555B28, "cosh");
  byte_2555B57 = 3;
  strcpy((char *)&dword_25560F8, "true");
  byte_2555B42 = 116;
  word_2555B40 = 28515;
  byte_2555B43 = 0;
  byte_2555B6F = 3;
  dword_2556128 = 1769238133;
  byte_2555B5A = 99;
  word_2556140 = 24950;
  word_2555B58 = 29539;
  byte_2555B5B = 0;
  byte_2555B87 = 7;
  byte_2555B9F = 8;
  word_2556818 = 25185;
  strcpy((char *)&qword_2555B88, "deg2grad");
  byte_2555BB7 = 7;
  strcpy((char *)&dword_2556830, "acos");
  dword_2556848 = 1936679777;
  strcpy((char *)&dword_2555BA0, "deg2rad");
  byte_2555BCF = 5;
  byte_2555BBC = 108;
  strcpy((char *)&dword_2556860, "asin");
  dword_2556878 = 1852404577;
  dword_2555BB8 = 1635086693;
  byte_2555BBD = 0;
  byte_2555BE7 = 3;
  byte_255684C = 104;
  byte_255687C = 104;
  byte_25568AC = 104;
  byte_2555BD2 = 102;
  byte_25568C4 = 50;
  word_2555BD0 = 29285;
  byte_2555BD3 = 0;
  byte_2555BFF = 4;
  strcpy((char *)&dword_2556890, "atan");
  dword_25568A8 = 1851880545;
  dword_25568C0 = 1851880545;
  strcpy((char *)&dword_2555BE8, "erfc");
  byte_2555C17 = 3;
  byte_2555C02 = 112;
  word_25568D8 = 30305;
  word_2555C00 = 30821;
  byte_2555C03 = 0;
  byte_2555C2F = 5;
  strcpy((char *)&dword_25568F0, "ceil");
  byte_2555C1C = 49;
  dword_2556908 = 1835101283;
  dword_2555C18 = 1836087397;
  byte_2555C1D = 0;
  byte_2555C47 = 5;
  byte_2555C34 = 101;
  byte_2555C35 = 0;
  byte_2555C5F = 5;
  byte_2555C4C = 114;
  byte_255681A = 115;
  byte_2556922 = 115;
  dword_2555C48 = 1869573222;
  byte_2555C4D = 0;
  byte_2555C77 = 3;
  byte_2555C62 = 114;
  word_2555C60 = 28518;
  byte_2555C63 = 0;
  byte_2555C8F = 4;
  strcpy((char *)&dword_2556938, "cosh");
  strcpy((char *)&dword_2555C78, "frac");
  byte_2555CA7 = 8;
  word_2556920 = 28515;
  word_2556950 = 28515;
  strcpy((char *)&qword_2555C90, "grad2deg");
  byte_2555CBF = 5;
  byte_2555CAC = 116;
  word_2556968 = 29539;
  dword_2555CA8 = 1869642088;
  byte_2555CAD = 0;
  byte_2555CD7 = 6;
  dword_2556980 = 1635086693;
  strcpy((char *)&dword_2555CC0, "iclamp");
  byte_2555CEF = 2;
  strcpy((char *)&word_2555CD8, "if");
  byte_2555D07 = 4;
  byte_2555D1F = 5;
  byte_2555D0C = 101;
  byte_2555D0D = 0;
  byte_2555D37 = 2;
  byte_2555D4F = 7;
  strcpy((char *)&dword_2555D38, "inrange");
  byte_2555D67 = 4;
  strcpy((char *)&dword_2555D50, "like");
  byte_2555D7F = 3;
  byte_2555D6A = 103;
  word_2555D68 = 28524;
  byte_2555D6B = 0;
  byte_2555D97 = 5;
  byte_2555D84 = 48;
  dword_2555D80 = 828862316;
  byte_2555D85 = 0;
  byte_2555DAF = 4;
  strcpy((char *)&dword_2555D98, "log2");
  byte_2555DC7 = 4;
  strcpy((char *)&dword_2555DB0, "logn");
  byte_2555DDF = 5;
  byte_2555DCC = 112;
  dword_2555DC8 = 828862316;
  byte_2555DCD = 0;
  byte_2555DF7 = 4;
  strcpy((char *)&dword_2555DE0, "mand");
  byte_2555E0F = 3;
  byte_2555DFA = 120;
  word_2555DF8 = 24941;
  byte_2555DFB = 0;
  byte_2555E27 = 3;
  byte_2555E12 = 110;
  word_2555E10 = 26989;
  byte_2555E13 = 0;
  byte_2555E3F = 3;
  byte_2555E2A = 100;
  word_2555E28 = 28525;
  byte_2555E2B = 0;
  byte_2555E57 = 3;
  byte_2555E42 = 114;
  word_2555E40 = 28525;
  byte_2555E43 = 0;
  byte_2555E6F = 3;
  byte_2555E5A = 108;
  word_2555E58 = 30061;
  byte_2555E5B = 0;
  byte_2555E87 = 4;
  strcpy((char *)&dword_2555E70, "ncdf");
  byte_2555E9F = 4;
  strcpy((char *)&dword_2555E88, "nand");
  byte_2555EB7 = 3;
  byte_2555EA2 = 114;
  word_2555EA0 = 28526;
  byte_2555EA3 = 0;
  byte_2555ECF = 3;
  byte_2555EBA = 116;
  word_2555EB8 = 28526;
  byte_2555EBB = 0;
  strcpy(&byte_2555EE7, "\tnull");
  strcpy((char *)&qword_2555ED0, "not_equal");
  byte_2555EFF = 4;
  byte_2556985 = 0;
  byte_255697F = 3;
  byte_255696A = 99;
  byte_255696B = 0;
  byte_2556997 = 5;
  byte_2556984 = 108;
  byte_2555F17 = 2;
  byte_2556967 = 3;
  byte_2556952 = 116;
  byte_2556953 = 0;
  strcpy((char *)&word_2555F00, "or");
  byte_2555F2F = 3;
  byte_2556923 = 0;
  byte_255694F = 4;
  byte_2555F1A = 119;
  byte_255691F = 5;
  byte_255690C = 112;
  byte_255690D = 0;
  byte_2556937 = 3;
  word_2555F18 = 28528;
  byte_2555F1B = 0;
  byte_2555F47 = 7;
  byte_25568DB = 0;
  byte_2556907 = 4;
  strcpy((char *)&dword_2555F30, "rad2deg");
  byte_25568C5 = 0;
  byte_25568EF = 3;
  byte_25568DA = 103;
  byte_2555F5F = 6;
  byte_25568AD = 0;
  byte_25568D7 = 5;
  strcpy((char *)&dword_2555F48, "repeat");
  byte_255687D = 0;
  byte_25568A7 = 4;
  byte_25568BF = 5;
  byte_2555F77 = 6;
  byte_255688F = 5;
  strcpy((char *)&dword_2555F60, "return");
  byte_2555F8F = 4;
  byte_255685F = 5;
  byte_255684D = 0;
  byte_2556877 = 4;
  strcpy((char *)&dword_2555F78, "root");
  byte_255681B = 0;
  byte_2556847 = 4;
  byte_2555FA7 = 5;
  word_2556188 = 28536;
  word_25561B8 = 124;
  byte_255682F = 3;
  byte_255618B = 0;
  byte_25561B7 = 1;
  word_25561A0 = 38;
  byte_25561CF = 1;
  byte_2556187 = 4;
  strcpy((char *)&dword_2556170, "xnor");
  byte_255619F = 3;
  byte_255618A = 114;
  byte_2556143 = 0;
  byte_255616F = 5;
  byte_255615C = 101;
  dword_2556158 = 1818847351;
  byte_255615D = 0;
  byte_2555F94 = 100;
  byte_2556127 = 5;
  byte_255612C = 108;
  byte_255612D = 0;
  byte_2556157 = 3;
  byte_2556142 = 114;
  byte_2556114 = 99;
  dword_2556110 = 1853190772;
  byte_2556115 = 0;
  byte_255613F = 5;
  dword_2555F90 = 1853190002;
  byte_2555F95 = 0;
  byte_255610F = 4;
  word_25560C8 = 24948;
  byte_25560CB = 0;
  byte_25560F7 = 4;
  strcpy((char *)&dword_25560E0, "tanh");
  strcpy((char *)&dword_25560B0, "switch");
  byte_25560DF = 3;
  byte_25560CA = 110;
  byte_2556097 = 3;
  byte_25560AF = 4;
  strcpy((char *)&dword_2556098, "swap");
  byte_25560C7 = 6;
  byte_2556082 = 109;
  word_2556080 = 30067;
  byte_2556083 = 0;
  strcpy((char *)&dword_2556050, "sinh");
  byte_255607F = 4;
  strcpy((char *)&dword_2556068, "sqrt");
  byte_2556023 = 0;
  byte_255604F = 4;
  strcpy((char *)&dword_2556038, "sinc");
  byte_2556067 = 4;
  byte_255600A = 114;
  byte_255600B = 0;
  byte_2556037 = 3;
  byte_2556022 = 110;
  uint64_t result = 26995;
  word_2556020 = 26995;
  byte_2555FBF = 6;
  strcpy((char *)&dword_2555FA8, "roundn");
  byte_2556007 = 3;
  byte_2555FF2 = 108;
  byte_2555FF3 = 0;
  byte_255601F = 3;
  byte_2555FC3 = 0;
  byte_2555FEF = 3;
  byte_2555FDA = 110;
  word_2555FD8 = 26483;
  byte_2555FDB = 0;
  byte_2555FD7 = 3;
  byte_2555FC2 = 99;
  word_2555FC0 = 25971;
  byte_255699A = 102;
  word_2556998 = 29285;
  strcpy((char *)&dword_25569B0, "erfc");
  word_25569C8 = 30821;
  byte_25569E4 = 49;
  dword_25569E0 = 1836087397;
  dword_25569F8 = 1869573222;
  strcpy((char *)&dword_2556A10, "frac");
  dword_2556A28 = 1869642088;
  strcpy((char *)&dword_2556A40, "iclamp");
  strcpy((char *)&dword_2556620, "like");
  strcpy((char *)&dword_2556A58, "like");
  byte_2556A72 = 103;
  word_2556A70 = 28524;
  byte_2556A8C = 48;
  strcpy((char *)&dword_2556AA0, "log2");
  strcpy((char *)&dword_2556AB8, "logn");
  byte_25569CA = 112;
  byte_2556AD4 = 112;
  dword_2556A88 = 828862316;
  dword_2556AD0 = 828862316;
  strcpy((char *)&dword_2556AE8, "mand");
  byte_2556B02 = 120;
  word_2556B00 = 24941;
  word_2556B18 = 26989;
  word_2556B30 = 28525;
  word_2556B48 = 28525;
  word_2556B60 = 30061;
  strcpy((char *)&dword_2556B78, "ncdf");
  byte_2556B92 = 119;
  word_2556B90 = 28528;
  strcpy((char *)&dword_2556BA8, "root");
  dword_2556BC0 = 1853190002;
  strcpy((char *)&dword_2556BD8, "roundn");
  word_2556BF0 = 25971;
  word_2556C08 = 26483;
  word_2556C20 = 26995;
  strcpy((char *)&dword_2556C38, "sinc");
  strcpy((char *)&dword_2556C50, "sinh");
  strcpy((char *)&dword_2556C68, "sqrt");
  byte_2556C82 = 109;
  word_2556C80 = 30067;
  strcpy((char *)&dword_2556728, "swap");
  strcpy((char *)&dword_2556C98, "swap");
  byte_2556B1A = 110;
  byte_2556C0A = 110;
  byte_2556C22 = 110;
  byte_2556CB2 = 110;
  word_2556CB0 = 24948;
  strcpy((char *)&dword_2556CC8, "tanh");
  byte_2556BF2 = 99;
  byte_2556CE4 = 99;
  dword_2556CE0 = 1853190772;
  strcpy(&byte_2556D0F, "\tinrange");
  byte_25566FA = 108;
  byte_2556774 = 108;
  byte_2556B62 = 108;
  strcpy((char *)&qword_2556CF8, "not_equal");
  strcpy((char *)&qword_2556D28, "deg2grad");
  strcpy((char *)&dword_2556D40, "deg2rad");
  byte_255658F = 7;
  byte_2556D27 = 7;
  byte_2556D57 = 7;
  byte_2556D6F = 7;
  strcpy((char *)&dword_2556D58, "rad2deg");
  byte_2556577 = 8;
  byte_2556D3F = 8;
  byte_2556D87 = 8;
  strcpy((char *)&qword_2556D70, "grad2deg");
  byte_255663A = 100;
  byte_2556B32 = 100;
  byte_2556BC4 = 100;
  byte_255645A = 100;
  word_2556638 = 28257;
  word_2556458 = 28257;
  strcpy((char *)&dword_2556650, "nand");
  strcpy((char *)&dword_2556470, "nand");
  byte_2556A2C = 116;
  byte_25564A2 = 116;
  word_2556488 = 28526;
  word_25564A0 = 28526;
  strcpy((char *)&word_25566B0, "or");
  strcpy((char *)&word_25564B8, "or");
  byte_255655F = 4;
  byte_25565EF = 4;
  byte_2556637 = 4;
  byte_2556667 = 4;
  byte_25566AF = 4;
  byte_255673F = 4;
  byte_255676F = 4;
  byte_25567CF = 4;
  byte_25569C7 = 4;
  byte_2556A27 = 4;
  byte_2556A6F = 4;
  byte_2556AB7 = 4;
  byte_2556ACF = 4;
  byte_2556AFF = 4;
  byte_2556B8F = 4;
  byte_2556BBF = 4;
  byte_2556C4F = 4;
  byte_2556C67 = 4;
  byte_2556C7F = 4;
  byte_2556CAF = 4;
  byte_2556CDF = 4;
  byte_2556487 = 4;
  byte_25564E7 = 4;
  strcpy((char *)&dword_25567B8, "xnor");
  strcpy((char *)&dword_25564D0, "xnor");
  word_25567D0 = 28536;
  word_25564E8 = 28536;
  word_25567E8 = 38;
  word_2556500 = 38;
  word_2556800 = 124;
  word_2556518 = 124;
  strcpy((char *)&word_25565C0, "if");
  strcpy((char *)&word_25561E8, "if");
  strcpy((char *)&dword_2556740, "switch");
  strcpy((char *)&dword_2556200, "switch");
  byte_25565BF = 3;
  byte_255664F = 3;
  byte_255667F = 3;
  byte_2556697 = 3;
  byte_255670F = 3;
  byte_2556727 = 3;
  byte_255679F = 3;
  byte_25567E7 = 3;
  byte_25569AF = 3;
  byte_25569DF = 3;
  byte_2556A87 = 3;
  byte_2556B17 = 3;
  byte_2556B2F = 3;
  byte_2556B47 = 3;
  byte_2556B5F = 3;
  byte_2556B77 = 3;
  byte_2556BA7 = 3;
  byte_2556C07 = 3;
  byte_2556C1F = 3;
  byte_2556C37 = 3;
  byte_2556C97 = 3;
  byte_2556CC7 = 3;
  byte_255646F = 3;
  byte_255649F = 3;
  byte_25564B7 = 3;
  byte_25564FF = 3;
  byte_255622F = 3;
  byte_25565AA = 114;
  byte_2556712 = 114;
  byte_255678A = 114;
  byte_25567D2 = 114;
  byte_25569FC = 114;
  byte_2556B4A = 114;
  byte_255648A = 114;
  byte_25564EA = 114;
  byte_255621A = 114;
  word_25565A8 = 28518;
  word_2556218 = 28518;
  byte_2556547 = 5;
  byte_25565A7 = 5;
  byte_2556607 = 5;
  byte_2556787 = 5;
  byte_25567B7 = 5;
  byte_25569F7 = 5;
  byte_2556A0F = 5;
  byte_2556A3F = 5;
  byte_2556A9F = 5;
  byte_2556AE7 = 5;
  byte_2556BD7 = 5;
  byte_2556CF7 = 5;
  byte_2556247 = 5;
  byte_25567A4 = 101;
  byte_2556234 = 101;
  dword_25567A0 = 1818847351;
  dword_2556230 = 1818847351;
  strcpy((char *)&dword_25566C8, "repeat");
  strcpy((char *)&dword_2556248, "repeat");
  byte_25566DF = 6;
  byte_25566F7 = 6;
  byte_2556757 = 6;
  byte_2556A57 = 6;
  byte_2556BEF = 6;
  byte_2556217 = 6;
  byte_255625F = 6;
  byte_2556277 = 6;
  strcpy((char *)&dword_25566E0, "return");
  strcpy((char *)&dword_2556260, "return");
  word_2556278 = 43;
  word_2556290 = 45;
  word_25562A8 = 42;
  word_25562C0 = 47;
  word_25562D8 = 37;
  word_25562F0 = 94;
  strcpy((char *)&word_2556308, ":=");
  strcpy((char *)&word_2556320, "+=");
  strcpy((char *)&word_2556338, "-=");
  strcpy((char *)&word_2556350, "*=");
  strcpy((char *)&word_2556368, "/=");
  strcpy((char *)&word_2556380, "%=");
  word_2556398 = 60;
  strcpy((char *)&word_25563B0, "<=");
  strcpy((char *)&word_25563C8, "==");
  word_25563E0 = 61;
  strcpy((char *)&word_25563F8, "!=");
  strcpy((char *)&word_2556410, "<>");
  byte_25565D7 = 2;
  byte_255661F = 2;
  byte_25566C7 = 2;
  byte_255678B = 0;
  byte_25567A5 = 0;
  byte_25567D3 = 0;
  byte_25567FF = 1;
  byte_2556817 = 1;
  byte_25564CF = 2;
  byte_2556517 = 1;
  byte_255652F = 1;
  byte_25561FF = 2;
  byte_255628F = 1;
  byte_25562A7 = 1;
  byte_25562BF = 1;
  byte_25562D7 = 1;
  byte_25562EF = 1;
  byte_2556307 = 1;
  byte_255631F = 2;
  byte_2556337 = 2;
  byte_255634F = 2;
  byte_2556367 = 2;
  byte_255637F = 2;
  byte_2556397 = 2;
  byte_25563AF = 1;
  byte_25563C7 = 2;
  byte_25563DF = 2;
  byte_25563F7 = 1;
  byte_255640F = 2;
  byte_2556427 = 2;
  byte_255643F = 2;
  strcpy((char *)&word_2556428, ">=");
  byte_2556457 = 1;
  word_2556440 = 62;
  byte_25561E7 = 18;
  byte_2556775 = 0;
  byte_25565AB = 0;
  byte_255663B = 0;
  byte_2556713 = 0;
  byte_25566FB = 0;
  byte_255699B = 0;
  byte_25569CB = 0;
  byte_25569E5 = 0;
  byte_25569FD = 0;
  byte_2556A2D = 0;
  byte_2556A73 = 0;
  byte_2556A8D = 0;
  byte_2556AD5 = 0;
  byte_2556B03 = 0;
  byte_2556B1B = 0;
  byte_2556B33 = 0;
  byte_2556B4B = 0;
  byte_2556B63 = 0;
  byte_2556B93 = 0;
  byte_2556BC5 = 0;
  byte_2556BF3 = 0;
  byte_2556C0B = 0;
  byte_2556C23 = 0;
  byte_2556C83 = 0;
  byte_2556CB3 = 0;
  byte_2556CE5 = 0;
  byte_255645B = 0;
  byte_255648B = 0;
  byte_25564A3 = 0;
  byte_25564EB = 0;
  byte_255621B = 0;
  byte_2556235 = 0;
  strcpy((char *)&xmmword_25561D0, " [EV_MODEL_DEBUG] ");
  return result;
}

uint64_t sub_286C14(uint64_t a1, double a2, double a3)
{
  uint64_t v6 = sub_9E49C(a1);
  uint64_t v7 = sub_9E4B8(a1);
  uint64_t v8 = v6;
  if (a2 < 0.00001) {
    return v8;
  }
  int v9 = v7;
  uint64_t v8 = v7;
  if (a2 > 99.99999) {
    return v8;
  }
  double v10 = a2 * a3;
  uint64_t v11 = (uint64_t)(v10 + v10);
  uint64_t v12 = v11 - 1;
  if (v11 < 1) {
    uint64_t v12 = (uint64_t)(v10 + v10);
  }
  uint64_t v13 = v12 >> 1;
  if (v10 > -4.50359963e15) {
    double v14 = (double)v13;
  }
  else {
    double v14 = a2 * a3;
  }
  double v15 = (double)((v11 + 1) >> 1);
  if (v10 >= 4.50359963e15) {
    double v15 = a2 * a3;
  }
  if (v10 >= 0.0) {
    double v16 = v15;
  }
  else {
    double v16 = v14;
  }
  if (a2 <= 100.0) {
    double v17 = a2;
  }
  else {
    double v17 = 100.0;
  }
  double v18 = v17 / 100.0;
  if (v17 <= 0.0) {
    double v18 = 0.0;
  }
  double v19 = (double)((int)v7 - (int)v6);
  double v20 = v18 * v19;
  if (v20 >= 0.0)
  {
    if (v20 >= 4.50359963e15) {
      goto LABEL_26;
    }
    uint64_t v21 = (uint64_t)(v20 + v20) + 1;
  }
  else
  {
    if (v20 <= -4.50359963e15) {
      goto LABEL_26;
    }
    uint64_t v21 = (uint64_t)(v20 + v20);
    if (v21 >= 1) {
      --v21;
    }
  }
  double v20 = (double)(v21 >> 1);
LABEL_26:
  uint64_t v8 = (v6 + (int)v20);
  sub_92070(a1, v6 + (int)v20);
  double v22 = sub_287C50(a1) * a3;
  uint64_t v23 = (uint64_t)(v22 + v22);
  uint64_t v24 = v23 - 1;
  if (v23 < 1) {
    uint64_t v24 = (uint64_t)(v22 + v22);
  }
  uint64_t v25 = v24 >> 1;
  if (v22 > -4.50359963e15) {
    double v26 = (double)v25;
  }
  else {
    double v26 = v22;
  }
  double v27 = (double)((v23 + 1) >> 1);
  if (v22 >= 4.50359963e15) {
    double v27 = v22;
  }
  if (v22 >= 0.0) {
    double v28 = v27;
  }
  else {
    double v28 = v26;
  }
  if (v28 == v16) {
    return v8;
  }
  double v30 = v19 * 0.5;
  if (v19 * 0.5 >= 0.0)
  {
    if (v30 >= 4.50359963e15) {
      goto LABEL_46;
    }
    uint64_t v31 = (uint64_t)(v30 + v30) + 1;
  }
  else
  {
    if (v30 <= -4.50359963e15) {
      goto LABEL_46;
    }
    uint64_t v31 = (uint64_t)(v30 + v30);
    if (v31 >= 1) {
      --v31;
    }
  }
  double v30 = (double)(v31 >> 1);
LABEL_46:
  int v32 = (int)v30;
  double v33 = v19 * 0.25;
  if (v19 * 0.25 >= 0.0)
  {
    if (v33 >= 4.50359963e15) {
      goto LABEL_54;
    }
    uint64_t v34 = (uint64_t)(v33 + v33) + 1;
  }
  else
  {
    if (v33 <= -4.50359963e15) {
      goto LABEL_54;
    }
    uint64_t v34 = (uint64_t)(v33 + v33);
    if (v34 >= 1) {
      --v34;
    }
  }
  double v33 = (double)(v34 >> 1);
LABEL_54:
  int v35 = v6 + v32;
  double v36 = v19 / (a3 * 400.0);
  if (v36 >= 0.0)
  {
    if (v36 >= 4.50359963e15) {
      goto LABEL_62;
    }
    uint64_t v37 = (uint64_t)(v36 + v36) + 1;
  }
  else
  {
    if (v36 <= -4.50359963e15) {
      goto LABEL_62;
    }
    uint64_t v37 = (uint64_t)(v36 + v36);
    if (v37 >= 1) {
      --v37;
    }
  }
  double v36 = (double)(v37 >> 1);
LABEL_62:
  if ((int)v36 <= 1) {
    int v38 = 1;
  }
  else {
    int v38 = (int)v36;
  }
  int v39 = (int)v33;
  if (v38 < (int)v33)
  {
    do
    {
      if (v35 <= (int)v6 || v35 >= v9) {
        break;
      }
      sub_92070(a1, v35);
      double v41 = sub_287C50(a1);
      double v42 = v41 * a3;
      if (v41 * a3 >= 0.0)
      {
        if (v42 >= 4.50359963e15) {
          goto LABEL_79;
        }
        uint64_t v43 = (uint64_t)(v42 + v42) + 1;
      }
      else
      {
        if (v42 <= -4.50359963e15) {
          goto LABEL_79;
        }
        uint64_t v43 = (uint64_t)(v42 + v42);
        if (v43 >= 1) {
          --v43;
        }
      }
      double v42 = (double)(v43 >> 1);
LABEL_79:
      if (v42 == v16) {
        break;
      }
      if (v41 < a2) {
        int v44 = v39;
      }
      else {
        int v44 = -v39;
      }
      double v40 = (double)v39 * 0.5;
      if (v40 >= 0.0)
      {
        if (v40 >= 4.50359963e15) {
          goto LABEL_68;
        }
        uint64_t v45 = (uint64_t)(v40 + v40) + 1;
      }
      else
      {
        if (v40 <= -4.50359963e15) {
          goto LABEL_68;
        }
        uint64_t v45 = (uint64_t)(v40 + v40);
        if (v45 >= 1) {
          --v45;
        }
      }
      double v40 = (double)(v45 >> 1);
LABEL_68:
      v35 += v44;
      int v39 = (int)v40;
    }
    while (v38 < (int)v40);
  }
  if (v9 >= v35) {
    int v46 = v35;
  }
  else {
    int v46 = v9;
  }
  if ((int)v6 <= v46) {
    return v46;
  }
  else {
    return v6;
  }
}

void sub_28701C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
}

void sub_2871F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_9FDC0(v15);
    _Unwind_Resume(a1);
  }
  sub_9FDC0(v15);
  _Unwind_Resume(a1);
}

void sub_28728C(std::string *a1, void *a2, void *a3)
{
  *(_OWORD *)double v20 = 0u;
  long long v21 = 0u;
  int v22 = 1065353216;
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "model_parameters");
  uint64_t v6 = sub_58070(a2, (uint64_t)__p);
  if (v6 && *((_DWORD *)v6 + 12) == 2) {
    uint64_t v7 = (void **)v6[5];
  }
  else {
    uint64_t v7 = v20;
  }
  sub_A0530((uint64_t)a1, v7);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "vehicle_parameters");
  uint64_t v8 = sub_58070(a3, (uint64_t)__p);
  if (v8 && *((_DWORD *)v8 + 12) == 2) {
    a3 = (void *)v8[5];
  }
  sub_A0530((uint64_t)a1, a3);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  memset(__p, 0, 24);
  HIBYTE(v18[2]) = 19;
  strcpy((char *)v18, "soc_display_formula");
  int v9 = sub_58070(a2, (uint64_t)v18);
  if (v9 && *((_DWORD *)v9 + 12) == 3) {
    double v10 = (void **)v9[5];
  }
  else {
    double v10 = __p;
  }
  sub_A0F44(a1, 0, (uint64_t **)v10);
  if (SHIBYTE(v18[2]) < 0) {
    operator delete((void *)v18[0]);
  }
  v18[0] = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)&v18[1] = xmmword_20B8870;
  strcpy((char *)v18[0], "battery_initial_energy_wh");
  sub_9FF2C((uint64_t)a1, v18, (uint64_t)&a1[17].__r_.__value_.__l.__size_);
  if (SHIBYTE(v18[2]) < 0) {
    operator delete((void *)v18[0]);
  }
  v18[0] = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)&v18[1] = xmmword_20B9800;
  strcpy((char *)v18[0], "battery_initial_soc_percentage");
  sub_9FF2C((uint64_t)a1, v18, (uint64_t)&a1[17].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v18[2]) < 0) {
    operator delete((void *)v18[0]);
  }
  v18[0] = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)&v18[1] = xmmword_20E12D0;
  strcpy((char *)v18[0], "EV state of charge model instantiation");
  sub_9E938((uint64_t)&a1[14], (uint64_t)v18);
  if ((SHIBYTE(v18[2]) & 0x80000000) == 0)
  {
    uint64_t v11 = (uint64_t *)__p[0];
    if (__p[0]) {
      goto LABEL_24;
    }
LABEL_30:
    uint64_t v15 = (void **)v21;
    if (!(void)v21) {
      goto LABEL_31;
    }
    goto LABEL_35;
  }
  operator delete((void *)v18[0]);
  uint64_t v11 = (uint64_t *)__p[0];
  if (!__p[0]) {
    goto LABEL_30;
  }
LABEL_24:
  uint64_t v12 = (uint64_t *)__p[1];
  uint64_t v13 = v11;
  if (__p[1] != v11)
  {
    do
    {
      double v14 = v12 - 2;
      sub_5521C((uint64_t *)*((unsigned int *)v12 - 2), v12 - 2);
      uint64_t v12 = v14;
    }
    while (v14 != v11);
    uint64_t v13 = (uint64_t *)__p[0];
  }
  __p[1] = v11;
  operator delete(v13);
  uint64_t v15 = (void **)v21;
  if ((void)v21)
  {
    do
    {
LABEL_35:
      double v17 = (void **)*v15;
      sub_55198((uint64_t)(v15 + 5));
      if (*((char *)v15 + 39) < 0) {
        operator delete(v15[2]);
      }
      operator delete(v15);
      uint64_t v15 = v17;
    }
    while (v17);
  }
LABEL_31:
  double v16 = v20[0];
  v20[0] = 0;
  if (v16) {
    operator delete(v16);
  }
}

void sub_28759C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_55758(&a16);
  sub_5450C((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_287628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_5450C((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_287654(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_287834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_287848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_28785C(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_287A3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_287A50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_287A64(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_287C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_287C24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_287C38(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
}

double sub_287C50(uint64_t a1)
{
  sub_A3A80(a1, 0);
  double v7 = v2;
  if (v2 < -0.00001)
  {
    sub_287E98("EVStateOfChargeModel expression produced negative state of charge ", (uint64_t)&v7, "%.");
    sub_9E808(a1 + 336, (uint64_t)&__p);
    if (SHIBYTE(v6) < 0) {
      operator delete(__p);
    }
    double v2 = v7;
  }
  if (v2 > 100.00001)
  {
    sub_28806C("EVStateOfChargeModel expression produced invalid state of charge ", (uint64_t)&v7, "%.");
    sub_9E808(a1 + 336, (uint64_t)&__p);
    if (SHIBYTE(v6) < 0) {
      operator delete(__p);
    }
  }
  __p = operator new(0x28uLL);
  long long v6 = xmmword_20B93A0;
  strcpy((char *)__p, "EV state of charge model evaluation");
  sub_9E938(a1 + 336, (uint64_t)&__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  double v3 = v7;
  if (v7 > 100.0) {
    double v3 = 100.0;
  }
  return fmax(v3, 0.0);
}

void sub_287E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_287E98(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_288044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_288058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_28806C(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_288218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_28822C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_288240(void *a1, uint64_t a2, int *a3, int *a4)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  char v12 = 19;
  strcpy(__p, "soc_display_formula");
  size_t v6 = sub_58070(a1, (uint64_t)__p);
  if (v6 && *((_DWORD *)v6 + 12) == 3)
  {
    uint64_t v7 = (uint64_t *)v6[5];
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    if (v12 < 0)
    {
LABEL_8:
      operator delete(*(void **)__p);
      if (v9 == v8) {
        return 1;
      }
LABEL_7:
      sub_9F5CC((uint64_t)__p, -1, *a3, *a4);
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = v14;
    if (v12 < 0) {
      goto LABEL_8;
    }
  }
  if (v9 != v8) {
    goto LABEL_7;
  }
  return 1;
}

void sub_28835C(_Unwind_Exception *a1)
{
  sub_55758((uint64_t **)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_288370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_55758((uint64_t **)(v14 - 88));
    _Unwind_Resume(a1);
  }
  sub_55758((uint64_t **)(v14 - 88));
  _Unwind_Resume(a1);
}

BOOL sub_2883B0(uint64_t a1)
{
  sub_A2A84(a1);
  __p = operator new(0x28uLL);
  long long v4 = xmmword_20B8FD0;
  strcpy((char *)__p, "EV state of charge model compilation");
  sub_9E938(a1 + 336, (uint64_t)&__p);
  if (SHIBYTE(v4) < 0) {
    operator delete(__p);
  }
  return !sub_9E7F8(a1);
}

void sub_288444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_288460(int *a1)
{
  uint64_t v1 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v1 < 5u || (uint64_t v2 = v1[2]) == 0)
  {
    LOBYTE(v9) = 0;
    goto LABEL_13;
  }
  double v3 = (unsigned int *)((char *)a1 + v2);
  uint64_t v4 = *v3;
  size_t v6 = (char *)v3 + v4 + 4;
  size_t v5 = *(unsigned int *)((char *)v3 + v4);
  if (v5 >= 0x17)
  {
    if ((v5 | 7) == 0x17) {
      uint64_t v8 = (v5 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v7 = operator new(v8 + 1);
    *(void *)&long long v10 = v5;
    *((void *)&v10 + 1) = v8 - 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v9 = v7;
  }
  else
  {
    HIBYTE(v10) = *(unsigned int *)((char *)v3 + v4);
    uint64_t v7 = &v9;
    if (!v5) {
      goto LABEL_12;
    }
  }
  memcpy(v7, v6, v5);
LABEL_12:
  *((unsigned char *)v7 + v5) = 0;
LABEL_13:
  v11[0] = v10;
  *(void *)((char *)v11 + 7) = *(void *)((char *)&v10 + 7);
  operator new();
}

void sub_2885A0(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2885B8(int *a1)
{
  uint64_t v32 = 0;
  long long v33 = 0uLL;
  uint64_t v1 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v1 < 5u || (uint64_t v2 = v1[2]) == 0) {
    operator new();
  }
  sub_56CAC((uint64_t)&v32, *(unsigned int *)((char *)a1 + v2 + *(unsigned int *)((char *)a1 + v2)));
  uint64_t v4 = *(unsigned __int16 *)((char *)a1 - *a1 + 4);
  uint64_t v5 = *(unsigned int *)((char *)a1 + v4);
  size_t v6 = (unsigned int *)((char *)a1 + v4 + v5);
  uint64_t v7 = *v6;
  if (!v7) {
LABEL_42:
  }
    operator new();
  unint64_t v8 = 0;
  uint64_t v9 = 4 * v7;
  long long v10 = (char *)a1 + v4 + v5;
  while (1)
  {
    uint64_t v12 = *(unsigned int *)&v10[v8 + 4];
    uint64_t v13 = v12 - *(int *)((char *)&v6[v8 / 4 + 1] + v12);
    uint64_t v14 = &v10[v8 + v13];
    unsigned int v15 = *((unsigned __int16 *)v14 + 2);
    if (v15 < 5 || (uint64_t v16 = *((unsigned __int16 *)v14 + 4)) == 0)
    {
LABEL_43:
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(&v34, "Encountered a NONE JsonValue type when parsing an array.");
      uint64_t v31 = (void *)sub_2F404((uint64_t)exception, &v34);
    }
    switch(v10[v8 + 4 + v12 + v16])
    {
      case 0:
        goto LABEL_43;
      case 1:
        uint64_t v17 = v12 + *(unsigned __int16 *)&v10[v8 + 10 + v13];
        sub_288460((int *)&v10[v8 + 4 + v17 + *(unsigned int *)&v10[v8 + 4 + v17]]);
      case 2:
        if (v15 >= 7 && (uint64_t v18 = *(unsigned __int16 *)&v10[v8 + 10 + v13]) != 0)
        {
          double v19 = &v10[v8 + 4 + v12 + v18 + *(unsigned int *)&v10[v8 + 4 + v12 + v18]];
          double v20 = &v19[-*(int *)v19];
          if (*(unsigned __int16 *)v20 < 5u)
          {
LABEL_29:
            *(void *)&long long v34 = 0;
            DWORD2(v34) = 1;
            uint64_t v25 = v33;
            if ((unint64_t)v33 < *((void *)&v33 + 1)) {
              goto LABEL_6;
            }
            goto LABEL_30;
          }
        }
        else
        {
          double v19 = 0;
          double v20 = (unsigned char *)(&loc_1120530 + 1);
          if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
            goto LABEL_29;
          }
        }
        uint64_t v27 = *((unsigned __int16 *)v20 + 2);
        if (v27)
        {
          *(void *)&long long v34 = *(void *)&v19[v27];
          DWORD2(v34) = 1;
          uint64_t v25 = v33;
          if ((unint64_t)v33 < *((void *)&v33 + 1)) {
            goto LABEL_6;
          }
          goto LABEL_30;
        }
        goto LABEL_29;
      case 3:
        uint64_t v26 = v12 + *(unsigned __int16 *)&v10[v8 + 10 + v13];
        sub_288B24(&v34, &v10[v8 + 4 + v26 + *(unsigned int *)&v10[v8 + 4 + v26]]);
        uint64_t v25 = v33;
        if ((unint64_t)v33 < *((void *)&v33 + 1)) {
          goto LABEL_6;
        }
        goto LABEL_30;
      case 4:
        uint64_t v24 = v12 + *(unsigned __int16 *)&v10[v8 + 10 + v13];
        sub_2885B8(&v34, &v10[v8 + 4 + v24 + *(unsigned int *)&v10[v8 + 4 + v24]]);
        uint64_t v25 = v33;
        if ((unint64_t)v33 < *((void *)&v33 + 1)) {
          goto LABEL_6;
        }
        goto LABEL_30;
      case 5:
        if (v15 >= 7 && (uint64_t v21 = *(unsigned __int16 *)&v10[v8 + 10 + v13]) != 0)
        {
          int v22 = &v10[v8 + 4 + v12 + v21 + *(unsigned int *)&v10[v8 + 4 + v12 + v21]];
          uint64_t v23 = &v22[-*(int *)v22];
          if (*(unsigned __int16 *)v23 < 5u) {
            goto LABEL_38;
          }
        }
        else
        {
          int v22 = 0;
          uint64_t v23 = (unsigned char *)(&loc_1120530 + 1);
          if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
            goto LABEL_38;
          }
        }
        uint64_t v28 = *((unsigned __int16 *)v23 + 2);
        if (!v28)
        {
LABEL_38:
          DWORD2(v34) = 5;
          uint64_t v25 = v33;
          if ((unint64_t)v33 < *((void *)&v33 + 1)) {
            goto LABEL_6;
          }
          goto LABEL_30;
        }
        if (v22[v28]) {
          int v29 = 4;
        }
        else {
          int v29 = 5;
        }
        DWORD2(v34) = v29;
        uint64_t v25 = v33;
        if ((unint64_t)v33 < *((void *)&v33 + 1))
        {
LABEL_6:
          uint64_t v11 = sub_584A4(v25, (uint64_t)&v34) + 16;
          goto LABEL_7;
        }
LABEL_30:
        uint64_t v11 = sub_61E80(&v32, (uint64_t)&v34);
LABEL_7:
        *(void *)&long long v33 = v11;
        sub_5521C((uint64_t *)DWORD2(v34), (uint64_t *)&v34);
LABEL_8:
        v8 += 4;
        if (v9 == v8) {
          goto LABEL_42;
        }
        break;
      default:
        goto LABEL_8;
    }
  }
}

void sub_288A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void sub_288B24(int *a1)
{
  *(_OWORD *)__p = 0u;
  long long v89 = 0u;
  float v90 = 1.0;
  uint64_t v1 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v1 < 5u || (uint64_t v2 = v1[2]) == 0) {
    operator new();
  }
  float v4 = (float)*(unsigned int *)((char *)a1 + v2 + *(unsigned int *)((char *)a1 + v2));
  size_t prime = (unint64_t)v4;
  if ((unint64_t)v4 == 1)
  {
    size_t prime = 2;
  }
  else
  {
    if ((prime & ((unint64_t)v4 - 1)) != 0)
    {
      size_t prime = std::__next_prime((unint64_t)v4);
      v70 = __p[1];
      BOOL v71 = (void *)prime >= __p[1];
      if ((void *)prime > __p[1]) {
        goto LABEL_5;
      }
    }
    else
    {
      v70 = 0;
      BOOL v71 = 1;
      if (prime) {
        goto LABEL_5;
      }
    }
    if (v71) {
      goto LABEL_6;
    }
    unint64_t v72 = vcvtps_u32_f32((float)*((unint64_t *)&v89 + 1) / v90);
    if ((unint64_t)v70 < 3
      || (uint8x8_t v73 = (uint8x8_t)vcnt_s8((int8x8_t)v70), v73.i16[0] = vaddlv_u8(v73), v73.u32[0] > 1uLL))
    {
      unint64_t v72 = std::__next_prime(v72);
    }
    else
    {
      uint64_t v74 = 1 << -(char)__clz(v72 - 1);
      if (v72 >= 2) {
        unint64_t v72 = v74;
      }
    }
    if (prime <= v72) {
      size_t prime = v72;
    }
    if (prime >= (unint64_t)v70)
    {
LABEL_6:
      uint64_t v6 = *(unsigned __int16 *)((char *)a1 - *a1 + 4);
      uint64_t v7 = *(unsigned int *)((char *)a1 + v6);
      unint64_t v8 = (unsigned int *)((char *)a1 + v6 + v7);
      uint64_t v9 = *v8;
      if (!v9) {
LABEL_85:
      }
        operator new();
      unint64_t v10 = 0;
      uint64_t v11 = 4 * v9;
      uint64_t v12 = (char *)a1 + v6 + v7;
      while (2)
      {
        uint64_t v13 = *(unsigned int *)&v12[v10 + 4];
        uint64_t v14 = (char *)&v8[v10 / 4] + v13;
        uint64_t v15 = v13 - *((int *)v14 + 1);
        uint64_t v16 = (char *)&v8[v10 / 4] + v15;
        if (*((unsigned __int16 *)v16 + 2) < 7u || (uint64_t v17 = *((unsigned __int16 *)v16 + 5)) == 0)
        {
LABEL_101:
          exception = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(&v77, "Encountered a NONE JsonValue type when parsing an object.");
          v76 = (void *)sub_2F404((uint64_t)exception, &v77);
        }
        switch(*((unsigned char *)&v8[v10 / 4 + 1] + v13 + v17))
        {
          case 0:
            goto LABEL_101;
          case 1:
            uint64_t v18 = v13 + *(unsigned __int16 *)((char *)&v8[v10 / 4 + 2] + v15);
            double v19 = (char *)v8 + v18 + v10 + *(unsigned int *)((char *)&v8[v10 / 4 + 1] + v18);
            size_t v20 = *((unsigned int *)v19 + 1);
            if (v20 >= 0x17)
            {
              uint64_t v61 = (v20 & 0xFFFFFFF8) + 8;
              if ((v20 | 7) != 0x17) {
                uint64_t v61 = v20 | 7;
              }
              uint64_t v62 = v61 + 1;
              uint64_t v21 = operator new(v61 + 1);
              v86[1] = v20;
              unint64_t v87 = v62 | 0x8000000000000000;
              v86[0] = v21;
            }
            else
            {
              HIBYTE(v87) = *((_DWORD *)v19 + 1);
              uint64_t v21 = v86;
              if (!v20)
              {
LABEL_68:
                *((unsigned char *)v21 + v20) = 0;
                uint64_t v63 = v13 + *(unsigned __int16 *)((char *)&v8[v10 / 4 + 3] + v13 - *((int *)v14 + 1));
                sub_288460((int *)((char *)&v8[v10 / 4 + 1] + v63 + *(unsigned int *)((char *)&v8[v10 / 4 + 1] + v63)));
              }
            }
            memcpy(v21, v19 + 8, v20);
            goto LABEL_68;
          case 2:
            uint64_t v22 = v13 + *(unsigned __int16 *)((char *)&v8[v10 / 4 + 2] + v15);
            uint64_t v23 = (char *)v8 + v22 + v10 + *(unsigned int *)((char *)&v8[v10 / 4 + 1] + v22);
            size_t v24 = *((unsigned int *)v23 + 1);
            if (v24 >= 0x17)
            {
              uint64_t v38 = (v24 & 0xFFFFFFF8) + 8;
              if ((v24 | 7) != 0x17) {
                uint64_t v38 = v24 | 7;
              }
              uint64_t v39 = v38 + 1;
              uint64_t v25 = operator new(v38 + 1);
              __dst[1] = v24;
              unint64_t v85 = v39 | 0x8000000000000000;
              __dst[0] = v25;
            }
            else
            {
              HIBYTE(v85) = *((_DWORD *)v23 + 1);
              uint64_t v25 = __dst;
              if (!v24) {
                goto LABEL_32;
              }
            }
            memcpy(v25, v23 + 8, v24);
LABEL_32:
            *((unsigned char *)v25 + v24) = 0;
            uint64_t v40 = v13 - *((int *)v14 + 1);
            double v41 = (char *)&v8[v10 / 4] + v40;
            unsigned int v42 = *((unsigned __int16 *)v41 + 2);
            if (v42 >= 7
              && (uint64_t v43 = *((unsigned __int16 *)v41 + 5)) != 0
              && (v42 >= 9 ? (BOOL v44 = *((unsigned char *)&v8[v10 / 4 + 1] + v13 + v43) == 2) : (BOOL v44 = 0), v44))
            {
              uint64_t v45 = (int *)*(unsigned __int16 *)((char *)&v8[v10 / 4 + 3] + v40);
              if (v45) {
                uint64_t v45 = (int *)((char *)v45
              }
                            + v13
                            + v10
                            + (void)v8
                            + *(unsigned int *)((char *)&v8[v10 / 4 + 1] + (void)v45 + v13)
                            + 4);
            }
            else
            {
              uint64_t v45 = 0;
            }
            int v46 = (unsigned __int16 *)((char *)v45 - *v45);
            if (*v46 >= 5u && (uint64_t v47 = v46[2]) != 0) {
              uint64_t v48 = *(void *)((char *)v45 + v47);
            }
            else {
              uint64_t v48 = 0;
            }
            uint64_t v95 = v48;
            unsigned int v96 = 1;
            sub_59D18((uint64_t)__p, (uint64_t)__dst, (uint64_t)&v95);
            sub_5521C((uint64_t *)v96, &v95);
            if ((SHIBYTE(v85) & 0x80000000) == 0) {
              goto LABEL_9;
            }
            v49 = (void **)__dst;
            goto LABEL_8;
          case 3:
            uint64_t v34 = v13 + *(unsigned __int16 *)((char *)&v8[v10 / 4 + 2] + v15);
            int v35 = (char *)v8 + v34 + v10 + *(unsigned int *)((char *)&v8[v10 / 4 + 1] + v34);
            size_t v36 = *((unsigned int *)v35 + 1);
            if (v36 >= 0x17)
            {
              uint64_t v67 = (v36 & 0xFFFFFFF8) + 8;
              if ((v36 | 7) != 0x17) {
                uint64_t v67 = v36 | 7;
              }
              uint64_t v68 = v67 + 1;
              uint64_t v37 = operator new(v67 + 1);
              v82[1] = v36;
              unint64_t v83 = v68 | 0x8000000000000000;
              v82[0] = v37;
            }
            else
            {
              HIBYTE(v83) = *((_DWORD *)v35 + 1);
              uint64_t v37 = v82;
              if (!v36) {
                goto LABEL_78;
              }
            }
            memcpy(v37, v35 + 8, v36);
LABEL_78:
            *((unsigned char *)v37 + v36) = 0;
            uint64_t v69 = v13 + *(unsigned __int16 *)((char *)&v8[v10 / 4 + 3] + v13 - *((int *)v14 + 1));
            sub_288B24(&v93, (char *)&v8[v10 / 4 + 1] + v69 + *(unsigned int *)((char *)&v8[v10 / 4 + 1] + v69));
            sub_59D18((uint64_t)__p, (uint64_t)v82, (uint64_t)&v93);
            sub_5521C((uint64_t *)v94, &v93);
            if ((SHIBYTE(v83) & 0x80000000) == 0) {
              goto LABEL_9;
            }
            v49 = (void **)v82;
LABEL_8:
            operator delete(*v49);
LABEL_9:
            v10 += 4;
            if (v11 == v10) {
              goto LABEL_85;
            }
            continue;
          case 4:
            uint64_t v30 = v13 + *(unsigned __int16 *)((char *)&v8[v10 / 4 + 2] + v15);
            uint64_t v31 = (char *)v8 + v30 + v10 + *(unsigned int *)((char *)&v8[v10 / 4 + 1] + v30);
            size_t v32 = *((unsigned int *)v31 + 1);
            if (v32 >= 0x17)
            {
              uint64_t v64 = (v32 & 0xFFFFFFF8) + 8;
              if ((v32 | 7) != 0x17) {
                uint64_t v64 = v32 | 7;
              }
              uint64_t v65 = v64 + 1;
              long long v33 = operator new(v64 + 1);
              v80[1] = v32;
              unint64_t v81 = v65 | 0x8000000000000000;
              v80[0] = v33;
            }
            else
            {
              HIBYTE(v81) = *((_DWORD *)v31 + 1);
              long long v33 = v80;
              if (!v32)
              {
LABEL_73:
                *((unsigned char *)v33 + v32) = 0;
                uint64_t v66 = v13 + *(unsigned __int16 *)((char *)&v8[v10 / 4 + 3] + v13 - *((int *)v14 + 1));
                sub_2885B8((int *)((char *)&v8[v10 / 4 + 1] + v66 + *(unsigned int *)((char *)&v8[v10 / 4 + 1] + v66)));
              }
            }
            memcpy(v33, v31 + 8, v32);
            goto LABEL_73;
          case 5:
            uint64_t v26 = v13 + *(unsigned __int16 *)((char *)&v8[v10 / 4 + 2] + v15);
            uint64_t v27 = (char *)v8 + v26 + v10 + *(unsigned int *)((char *)&v8[v10 / 4 + 1] + v26);
            size_t v28 = *((unsigned int *)v27 + 1);
            if (v28 >= 0x17)
            {
              uint64_t v50 = (v28 & 0xFFFFFFF8) + 8;
              if ((v28 | 7) != 0x17) {
                uint64_t v50 = v28 | 7;
              }
              uint64_t v51 = v50 + 1;
              int v29 = operator new(v50 + 1);
              v78[1] = v28;
              unint64_t v79 = v51 | 0x8000000000000000;
              v78[0] = v29;
            }
            else
            {
              HIBYTE(v79) = *((_DWORD *)v27 + 1);
              int v29 = v78;
              if (!v28) {
                goto LABEL_49;
              }
            }
            memcpy(v29, v27 + 8, v28);
LABEL_49:
            *((unsigned char *)v29 + v28) = 0;
            uint64_t v52 = v13 - *((int *)v14 + 1);
            v53 = &v12[v10 + v52];
            unsigned int v54 = *((unsigned __int16 *)v53 + 2);
            if (v54 >= 7
              && (uint64_t v55 = *((unsigned __int16 *)v53 + 5)) != 0
              && (v54 >= 9 ? (BOOL v56 = v12[v10 + 4 + v13 + v55] == 5) : (BOOL v56 = 0), v56))
            {
              unint64_t v57 = *(unsigned __int16 *)&v12[v10 + 12 + v52];
              if (v57) {
                v57 += (unint64_t)&v12[v10 + 4 + v13 + *(unsigned int *)&v12[v10 + 4 + v13 + v57]];
              }
            }
            else
            {
              unint64_t v57 = 0;
            }
            v58 = (unsigned __int16 *)(v57 - *(int *)v57);
            if (*v58 >= 5u && (uint64_t v59 = v58[2]) != 0)
            {
              if (*(unsigned char *)(v57 + v59)) {
                int v60 = 4;
              }
              else {
                int v60 = 5;
              }
            }
            else
            {
              int v60 = 5;
            }
            unsigned int v92 = v60;
            sub_59D18((uint64_t)__p, (uint64_t)v78, (uint64_t)&v91);
            sub_5521C((uint64_t *)v92, &v91);
            if ((SHIBYTE(v79) & 0x80000000) == 0) {
              goto LABEL_9;
            }
            v49 = (void **)v78;
            goto LABEL_8;
          default:
            goto LABEL_9;
        }
      }
    }
  }
LABEL_5:
  sub_B6C0((uint64_t)__p, prime);
  goto LABEL_6;
}

void sub_289424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47)
{
  sub_54358(v47 - 176);
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_553C0(&a47);
  _Unwind_Resume(a1);
}

__n128 sub_289554(uint64_t a1, uint64_t a2, long long *a3, __n128 *a4)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  long long v4 = *a3;
  *(void *)(a1 + 32) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 16) = v4;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  __n128 result = *a4;
  *(void *)(a1 + 56) = a4[1].n128_u64[0];
  *(__n128 *)(a1 + 40) = result;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  a4->n128_u64[0] = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  return result;
}

uint64_t sub_28959C(uint64_t *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t v2 = (const char *)(a1 + 2);
      uint64_t result = sub_69598(v2);
      break;
    case 1:
      uint64_t result = *a1;
      if (result)
      {
        long long v4 = (unsigned int *)sub_2AB884(result, 23, 1u, 1);
        if (v5) {
          goto LABEL_13;
        }
        goto LABEL_16;
      }
      break;
    case 2:
      uint64_t result = sub_696C0();
      break;
    case 3:
      uint64_t result = *a1;
      if (result)
      {
        long long v4 = (unsigned int *)sub_2AB884(result, 36, 1u, 1);
        if (!v6) {
          goto LABEL_16;
        }
LABEL_13:
        uint64_t v7 = (unsigned __int16 *)((char *)v4 + *v4 - *(unsigned int *)((char *)v4 + *v4));
        if (*v7 < 7u) {
          goto LABEL_16;
        }
        uint64_t result = v7[3] != 0;
      }
      break;
    default:
LABEL_16:
      uint64_t result = 0;
      break;
  }
  return result;
}

BOOL sub_289694(uint64_t a1, uint64_t a2, int a3)
{
  if ((a3 - 1) < 3)
  {
    long long v4 = sub_289AC4(a1, a3);
    uint64_t v5 = (unsigned int *)((char *)v4 + *(unsigned __int16 *)((char *)v4 - *v4 + 6));
    uint64_t v6 = (unsigned int *)((char *)v5 + *v5);
    if (*(char *)(a2 + 23) >= 0) {
      std::string::size_type v7 = a2;
    }
    else {
      std::string::size_type v7 = *(void *)a2;
    }
    __key.__r_.__value_.__r.__words[0] = v7;
    return bsearch(&__key, v6 + 1, *v6, 4uLL, (int (__cdecl *)(const void *, const void *))sub_28C0D8) != 0;
  }
  if (a3) {
    return 0;
  }
  char v11 = 1;
  LOWORD(__p) = 47;
  sub_289800((uint64_t)&__p, (const void **)(a1 + 16), a2, &__key);
  BOOL v8 = sub_696C0();
  if ((SHIBYTE(__key.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v11 < 0) {
      goto LABEL_13;
    }
    return v8;
  }
  operator delete(__key.__r_.__value_.__l.__data_);
  if ((v11 & 0x80000000) == 0) {
    return v8;
  }
LABEL_13:
  operator delete(__p);
  return v8;
}

void sub_2897B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_289800(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v29, *(void **)a3, *(void *)(a3 + 8));
    size_t v7 = *((unsigned __int8 *)a2 + 23);
    char v8 = v7;
    size_t v9 = (size_t)a2[1];
    if ((v7 & 0x80u) == 0) {
      char v11 = (const void *)*((unsigned __int8 *)a2 + 23);
    }
    else {
      char v11 = a2[1];
    }
    if (!v11) {
      goto LABEL_16;
    }
  }
  else
  {
    *(_OWORD *)int v29 = *(_OWORD *)a3;
    uint64_t v30 = *(void *)(a3 + 16);
    size_t v7 = *((unsigned __int8 *)a2 + 23);
    char v8 = v7;
    size_t v9 = (size_t)a2[1];
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = (const void *)*((unsigned __int8 *)a2 + 23);
    }
    else {
      unint64_t v10 = a2[1];
    }
    if (!v10) {
      goto LABEL_16;
    }
  }
  uint64_t v12 = (void *)HIBYTE(v30);
  if (v30 < 0) {
    uint64_t v12 = v29[1];
  }
  if (v12)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      sub_4200(__p, *(void **)a1, *(void *)(a1 + 8));
      size_t v7 = *((unsigned __int8 *)a2 + 23);
      size_t v9 = (size_t)a2[1];
      char v8 = *((unsigned char *)a2 + 23);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a1;
      uint64_t v28 = *(void *)(a1 + 16);
    }
    goto LABEL_17;
  }
LABEL_16:
  HIBYTE(v28) = 0;
  LOBYTE(__p[0]) = 0;
LABEL_17:
  int v13 = v8;
  if (v8 >= 0) {
    size_t v14 = v7;
  }
  else {
    size_t v14 = v9;
  }
  int v15 = SHIBYTE(v28);
  if (v28 >= 0) {
    size_t v16 = HIBYTE(v28);
  }
  else {
    size_t v16 = (size_t)__p[1];
  }
  unint64_t v17 = v16 + v14;
  if (v16 + v14 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v17 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v16 + v14;
    if (!v14) {
      goto LABEL_30;
    }
    goto LABEL_26;
  }
  uint64_t v24 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v17 | 7) != 0x17) {
    uint64_t v24 = v17 | 7;
  }
  uint64_t v25 = v24 + 1;
  p_dst = (std::string *)operator new(v24 + 1);
  __dst.__r_.__value_.__l.__size_ = v16 + v14;
  __dst.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v14)
  {
LABEL_26:
    if (v13 >= 0) {
      double v19 = a2;
    }
    else {
      double v19 = *a2;
    }
    memmove(p_dst, v19, v14);
  }
LABEL_30:
  if (v16)
  {
    if (v15 >= 0) {
      size_t v20 = __p;
    }
    else {
      size_t v20 = (void **)__p[0];
    }
    memmove((char *)p_dst + v14, v20, v16);
  }
  p_dst->__r_.__value_.__s.__data_[v14 + v16] = 0;
  if (v30 >= 0) {
    uint64_t v21 = v29;
  }
  else {
    uint64_t v21 = (void **)v29[0];
  }
  if (v30 >= 0) {
    std::string::size_type v22 = HIBYTE(v30);
  }
  else {
    std::string::size_type v22 = (std::string::size_type)v29[1];
  }
  uint64_t v23 = std::string::append(&__dst, (const std::string::value_type *)v21, v22);
  *a4 = *v23;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v28) & 0x80000000) == 0)
    {
LABEL_43:
      if ((SHIBYTE(v30) & 0x80000000) == 0) {
        return;
      }
LABEL_51:
      operator delete(v29[0]);
      return;
    }
  }
  else if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    goto LABEL_43;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v30) < 0) {
    goto LABEL_51;
  }
}

void sub_289A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if ((a28 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_289AC4(uint64_t a1, int a2)
{
  if (a2 == 1)
  {
    uint64_t v4 = *(void *)a1;
    if (!*(void *)a1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(v37, "FB provider unavailable for fetching configuration from config layer.");
      unint64_t v17 = (void *)sub_2F404((uint64_t)exception, v37);
    }
    uint64_t v5 = sub_2AB884(v4, 23, 1u, 0);
    if (!v6) {
      goto LABEL_27;
    }
LABEL_8:
    size_t v9 = (std::string *)v5;
    goto LABEL_9;
  }
  if (a2 == 3)
  {
    uint64_t v7 = *(void *)a1;
    if (!*(void *)a1)
    {
      uint64_t v18 = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(v37, "FB provider unavailable for fetching configuration from EV model layer.");
      double v19 = (void *)sub_2F404((uint64_t)v18, v37);
    }
    uint64_t v5 = sub_2AB884(v7, 36, 1u, 0);
    if (!v8)
    {
LABEL_27:
      int v13 = __cxa_allocate_exception(0x40uLL);
      size_t v14 = "FB file).";
      if (a2 == 1) {
        size_t v14 = "FB layer).";
      }
      *(void *)&long long v34 = v14;
      sub_28BF10("FB Config unavailable (source: ", (const char **)&v34);
      int v15 = (void *)sub_2F404((uint64_t)v13, v37);
    }
    goto LABEL_8;
  }
  int v12 = *(char *)(a1 + 87);
  if (v12 < 0)
  {
    size_t v9 = (std::string *)(a1 + 64);
    if (*(void *)(a1 + 72))
    {
LABEL_14:
      if ((v12 & 0x80) == 0) {
        goto LABEL_9;
      }
LABEL_26:
      size_t v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
      goto LABEL_9;
    }
  }
  else
  {
    size_t v9 = (std::string *)(a1 + 64);
    if (*(unsigned char *)(a1 + 87)) {
      goto LABEL_14;
    }
  }
  sub_636CC((void (__cdecl ***)(std::ifstream *__hidden))v37);
  if (!v38)
  {
    size_t v20 = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v21 = std::string::append(&v24, " for reading.");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    std::string::size_type v35 = v21->__r_.__value_.__r.__words[2];
    long long v34 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    uint64_t v23 = (void *)sub_2F404((uint64_t)v20, &v34);
  }
  std::istream::tellg();
  std::string::resize(v9, __n, 0);
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v33 = 0;
  std::istream::seekg();
  if (*(char *)(a1 + 87) < 0)
  {
    if (!*(void *)(a1 + 72)) {
      goto LABEL_23;
    }
  }
  else if (!*(unsigned char *)(a1 + 87))
  {
    goto LABEL_23;
  }
  std::istream::read();
LABEL_23:
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v37 + *(void *)(*(void *)&v37[0] - 24)), *(_DWORD *)((char *)&v37[2] + *(void *)(*(void *)&v37[0] - 24)) | 4);
  }
  std::filebuf::~filebuf();
  std::istream::~istream();
  std::ios::~ios();
  if ((*(unsigned char *)(a1 + 87) & 0x80) != 0) {
    goto LABEL_26;
  }
LABEL_9:
  uint64_t result = (int *)((char *)v9 + LODWORD(v9->__r_.__value_.__l.__data_));
  char v11 = (unsigned __int16 *)((char *)result - *result);
  if (*v11 < 7u || !v11[3]) {
    goto LABEL_27;
  }
  return result;
}

void sub_289ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  if (a39 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
LABEL_3:
    sub_638A8(&a54);
    _Unwind_Resume(a1);
  }
  operator delete(a10);
  sub_638A8(&a54);
  _Unwind_Resume(a1);
}

void sub_289F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v51);
    sub_638A8(&a51);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v51);
  sub_638A8(&a51);
  _Unwind_Resume(a1);
}

void sub_289F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_289FD8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_289FEC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if ((a3 - 1) >= 3)
  {
    if (a3)
    {
      double result = 0.0;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_DWORD *)(a4 + 32) = 1065353216;
    }
    else
    {
      sub_28A018(a1, a2, a4);
    }
  }
  else
  {
    sub_28A134(a1, a2, a3, a4);
  }
  return result;
}

void sub_28A018(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  HIBYTE(v8) = 1;
  LOWORD(__p[0]) = 47;
  sub_289800((uint64_t)__p, (const void **)(a1 + 16), a2, &v9);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  sub_60C08((uint64_t)&v9, (uint64_t)__p);
  sub_7E8DC((uint64_t *)__p, a3);
  uint64_t v4 = v8;
  if (v8)
  {
    do
    {
      uint64_t v6 = *(char **)v4;
      sub_57AC8((uint64_t *)v4 + 5);
      if (v4[39] < 0) {
        operator delete(*((void **)v4 + 2));
      }
      operator delete(v4);
      uint64_t v4 = v6;
    }
    while (v6);
  }
  uint64_t v5 = __p[0];
  __p[0] = 0;
  if (v5) {
    operator delete(v5);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_28A0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_28A134(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = sub_289AC4(a1, a3);
  uint64_t v8 = *(unsigned __int16 *)((char *)v7 - *v7 + 6);
  uint64_t v9 = *(unsigned int *)((char *)v7 + v8);
  unint64_t v10 = (unsigned int *)((char *)v7 + v8 + v9);
  uint64_t v52 = a4;
  if (a3 == 3)
  {
    uint64_t v11 = *v10;
    if (v11)
    {
      unint64_t v12 = 0;
      v53 = 0;
      uint64_t v13 = 4 * v11;
      size_t v14 = (char *)v7 + v8 + v9;
      while (1)
      {
        uint64_t v15 = *(unsigned int *)&v14[v12 + 4];
        size_t v16 = (char *)&v10[v12 / 4] + v15;
        uint64_t v17 = v15 + *(unsigned __int16 *)((char *)&v10[v12 / 4 + 2] + v15 - *((int *)v16 + 1));
        uint64_t v18 = (char *)v10 + v17 + v12 + *(unsigned int *)((char *)&v10[v12 / 4 + 1] + v17);
        size_t v19 = *((unsigned int *)v18 + 1);
        if (v19 >= 0x17) {
          break;
        }
        HIBYTE(v55) = *((_DWORD *)v18 + 1);
        size_t v20 = __p;
        if (v19) {
          goto LABEL_13;
        }
LABEL_14:
        v20[v19] = 0;
        if (*(char *)(a2 + 23) >= 0) {
          long long v22 = (const char *)a2;
        }
        else {
          long long v22 = *(const char **)a2;
        }
        uint64_t v23 = (void *)strlen(v22);
        if (SHIBYTE(v55) < 0)
        {
          if (v23 == __p[1])
          {
            if (v23 == (void *)-1) {
LABEL_52:
            }
              sub_5AD0();
            std::string v24 = __p[0];
            int v25 = memcmp(__p[0], v22, (size_t)v23);
            operator delete(v24);
            if (!v25) {
LABEL_25:
            }
              v53 = (int *)(v16 + 4);
          }
          else
          {
            operator delete(__p[0]);
          }
        }
        else if (v23 == (void *)HIBYTE(v55))
        {
          if (v23 == (void *)-1) {
            goto LABEL_52;
          }
          if (!memcmp(__p, v22, (size_t)v23)) {
            goto LABEL_25;
          }
        }
        v12 += 4;
        if (v13 == v12) {
          goto LABEL_31;
        }
      }
      if ((v19 | 7) == 0x17) {
        uint64_t v21 = (v19 & 0xFFFFFFF8) + 8;
      }
      else {
        uint64_t v21 = v19 | 7;
      }
      size_t v20 = operator new(v21 + 1);
      __p[1] = (void *)v19;
      uint64_t v55 = v21 - 0x7FFFFFFFFFFFFFFFLL;
      __p[0] = v20;
LABEL_13:
      memcpy(v20, v18 + 8, v19);
      goto LABEL_14;
    }
LABEL_51:
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v45 = std::string::append(&v58, " not found in the config layer.");
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    uint64_t v55 = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    uint64_t v47 = (void *)sub_2F404((uint64_t)exception, (long long *)__p);
  }
  if (*(char *)(a2 + 23) >= 0) {
    long long v26 = (void *)a2;
  }
  else {
    long long v26 = *(void **)a2;
  }
  __p[0] = v26;
  long long v27 = (unsigned int *)bsearch(__p, v10 + 1, *v10, 4uLL, (int (__cdecl *)(const void *, const void *))sub_28C0D8);
  if (!v27) {
    goto LABEL_51;
  }
  v53 = (int *)((char *)v27 + *v27);
LABEL_31:
  if (!v53) {
    goto LABEL_51;
  }
  long long v28 = (unsigned __int16 *)((char *)v53 - *v53);
  if (*v28 < 7u || (uint64_t v29 = v28[3]) == 0 || !*(int *)((char *)v53 + v29 + *(unsigned int *)((char *)v53 + v29)))
  {
    uint64_t v48 = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    v49 = std::string::append(&v58, " not having any region data in config layer.");
    long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    uint64_t v55 = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    uint64_t v51 = (void *)sub_2F404((uint64_t)v48, (long long *)__p);
  }
  *(_OWORD *)uint64_t v52 = 0u;
  *(_OWORD *)(v52 + 16) = 0u;
  *(_DWORD *)(v52 + 32) = 1065353216;
  long long v30 = (unsigned __int16 *)((char *)v53 - *v53);
  if (*v30 < 7u)
  {
    long long v31 = 0;
    int v32 = -17958193;
  }
  else
  {
    long long v31 = (int *)v30[3];
    if (v31) {
      long long v31 = (int *)((char *)v31 + (void)v53 + *(unsigned int *)((char *)v31 + (void)v53));
    }
    int v32 = *v31;
    if (*v31 == 1)
    {
      uint64_t v33 = (int *)((char *)v31 + v31[1] + 4);
      long long v34 = (unsigned int *)((char *)v33 + *(unsigned __int16 *)((char *)v33 - *v33 + 6));
      sub_288B24((int *)((char *)v34 + *v34));
    }
  }
  if (v32)
  {
    std::string::size_type v35 = (int *)((char *)v31 + v31[1] + 4);
    size_t v36 = (unsigned int *)((char *)v35 + *(unsigned __int16 *)((char *)v35 - *v35 + 4));
    uint64_t v37 = *v36;
    uint64_t v39 = (char *)v36 + v37 + 4;
    size_t v38 = *(unsigned int *)((char *)v36 + v37);
    if (v38 >= 0x17)
    {
      uint64_t v41 = (v38 & 0xFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17) {
        uint64_t v41 = v38 | 7;
      }
      uint64_t v42 = v41 + 1;
      uint64_t v40 = operator new(v41 + 1);
      __dst[1] = v38;
      unint64_t v57 = v42 | 0x8000000000000000;
      __dst[0] = v40;
    }
    else
    {
      HIBYTE(v57) = *(unsigned int *)((char *)v36 + v37);
      uint64_t v40 = __dst;
      if (!v38)
      {
LABEL_49:
        *((unsigned char *)v40 + v38) = 0;
        uint64_t v43 = (unsigned int *)((char *)v35 + *(unsigned __int16 *)((char *)v35 - *v35 + 6));
        sub_288B24((int *)((char *)v43 + *v43));
      }
    }
    memcpy(v40, v39, v38);
    goto LABEL_49;
  }
}

void sub_28A808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,int a36)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a34 < 0)
  {
    operator delete(a29);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_28A980@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if ((a3 - 1) >= 3)
  {
    if (!a3) {
      sub_28A9AC(a1);
    }
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_DWORD *)(a4 + 32) = 1065353216;
  }
  else
  {
    sub_28AD18(a1, a2, a3, a4);
  }
  return result;
}

void sub_28A9AC(uint64_t a1)
{
  sub_28B15C(a1, &v1);
}

void sub_28AC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,void *a32)
{
  sub_82C9C(v32);
  sub_1A668(&a10);
  _Unwind_Resume(a1);
}

void sub_28AD18(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_28BCE0(a1, a2, a3, (uint64_t)&v21);
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  sub_28C144((uint64_t)v28, a4, &v21);
  uint64_t v7 = (void **)v21;
  uint64_t v8 = v22;
  if (v21 != v22)
  {
    while ((a3 - 1) >= 3)
    {
      if (!a3)
      {
        sub_28A018(a1, (uint64_t)v7, (uint64_t)&v33);
LABEL_6:
        if ((*((char *)v7 + 23) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_11;
      }
      long long v33 = 0u;
      long long v34 = 0u;
      int v35 = 1065353216;
      if ((*((char *)v7 + 23) & 0x80000000) == 0)
      {
LABEL_7:
        long long v9 = *(_OWORD *)v7;
        std::string v24 = v7[2];
        *(_OWORD *)std::string __dst = v9;
        goto LABEL_12;
      }
LABEL_11:
      sub_4200(__dst, *v7, (unint64_t)v7[1]);
LABEL_12:
      long long v10 = v33;
      long long v33 = 0uLL;
      long long v25 = v10;
      uint64_t v11 = (char *)v34;
      long long v26 = v34;
      int v27 = v35;
      if (*((void *)&v34 + 1))
      {
        unint64_t v12 = *(void *)(v34 + 8);
        if ((*((void *)&v10 + 1) & (*((void *)&v10 + 1) - 1)) != 0)
        {
          if (v12 >= *((void *)&v10 + 1)) {
            v12 %= *((void *)&v10 + 1);
          }
        }
        else
        {
          v12 &= *((void *)&v10 + 1) - 1;
        }
        uint64_t v11 = 0;
        *(void *)(v10 + 8 * v12) = &v26;
        long long v34 = 0uLL;
      }
      sub_80150((int)&v33, v11);
      uint64_t v13 = (void *)v33;
      *(void *)&long long v33 = 0;
      if (v13) {
        operator delete(v13);
      }
      *(_OWORD *)long long v28 = *(_OWORD *)__dst;
      __dst[0] = 0;
      __dst[1] = 0;
      size_t v14 = v24;
      long long v15 = v25;
      long long v25 = 0uLL;
      std::string v24 = 0;
      uint64_t v29 = v14;
      long long __p = v15;
      long long v31 = v26;
      int v32 = v27;
      if (*((void *)&v26 + 1))
      {
        unint64_t v16 = *(void *)(v26 + 8);
        if ((*((void *)&v15 + 1) & (*((void *)&v15 + 1) - 1)) != 0)
        {
          if (v16 >= *((void *)&v15 + 1)) {
            v16 %= *((void *)&v15 + 1);
          }
        }
        else
        {
          v16 &= *((void *)&v15 + 1) - 1;
        }
        *(void *)(v15 + 8 * v16) = &v31;
        long long v26 = 0uLL;
      }
      sub_28C268(a4, (uint64_t)v28, (uint64_t)v28);
      sub_80150((int)&__p, (char *)v31);
      uint64_t v17 = (void *)__p;
      *(void *)&long long __p = 0;
      if (v17) {
        operator delete(v17);
      }
      if (SHIBYTE(v29) < 0)
      {
        operator delete(v28[0]);
        sub_80150((int)&v25, (char *)v26);
        uint64_t v18 = (void *)v25;
        *(void *)&long long v25 = 0;
        if (!v18) {
          goto LABEL_31;
        }
LABEL_30:
        operator delete(v18);
        goto LABEL_31;
      }
      sub_80150((int)&v25, (char *)v26);
      uint64_t v18 = (void *)v25;
      *(void *)&long long v25 = 0;
      if (v18) {
        goto LABEL_30;
      }
LABEL_31:
      if (SHIBYTE(v24) < 0) {
        operator delete(__dst[0]);
      }
      v7 += 3;
      if (v7 == v8)
      {
        uint64_t v7 = (void **)v21;
        goto LABEL_36;
      }
    }
    sub_28A134(a1, (uint64_t)v7, a3, (uint64_t)&v33);
    goto LABEL_6;
  }
LABEL_36:
  if (v7)
  {
    size_t v19 = v22;
    size_t v20 = v7;
    if (v22 != v7)
    {
      do
      {
        if (*((char *)v19 - 1) < 0) {
          operator delete(*(v19 - 3));
        }
        v19 -= 3;
      }
      while (v19 != v7);
      size_t v20 = v21;
    }
    long long v22 = v7;
    operator delete(v20);
  }
}

void sub_28AFF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_82C9C(v2);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_28B04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,char *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,char *a32)
{
  sub_80150(v34, a32);
  size_t v36 = a30;
  a30 = 0;
  if (v36)
  {
    operator delete(v36);
    if ((a29 & 0x80000000) == 0)
    {
LABEL_3:
      sub_80150(v33, a21);
      uint64_t v37 = a19;
      a19 = 0;
      if (!v37) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a29 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a24);
  sub_80150(v33, a21);
  uint64_t v37 = a19;
  a19 = 0;
  if (!v37)
  {
LABEL_4:
    if ((a18 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  operator delete(v37);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    sub_82C9C(v32);
    sub_1A668((void **)&a10);
    _Unwind_Resume(a1);
  }
LABEL_5:
  operator delete(__p);
  goto LABEL_6;
}

void sub_28B0EC(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if ((a2 - 1) >= 3)
  {
    if (!a2)
    {
      char v4 = 0;
      v3[0] = 0;
      sub_28B15C(a1, a3);
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    char v4 = 0;
    v3[0] = 0;
    sub_28BCE0(a1, (uint64_t)v3, a2, (uint64_t)a3);
  }
}

void sub_28B15C(uint64_t a1@<X0>, void *a2@<X8>)
{
  double v3 = (long long *)(a1 + 16);
  if (sub_69598((const char *)(a1 + 16)))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_52BB4((uint64_t)__p, v3, 5);
  }
  exception = __cxa_allocate_exception(0x40uLL);
  std::operator+<char>();
  uint64_t v5 = (void *)sub_2F404((uint64_t)exception, (long long *)__p);
}

void sub_28BBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  *(void *)(v25 + 8) = v26;
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  sub_69858((uint64_t *)(v27 - 216));
  sub_69858((uint64_t *)(v27 - 184));
  sub_69800((uint64_t *)(v27 - 152));
  sub_1A668((void **)v25);
  _Unwind_Resume(a1);
}

void sub_28BCE0(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = sub_289AC4(a1, a3);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  uint64_t v7 = *(unsigned __int16 *)((char *)v6 - *v6 + 6);
  uint64_t v8 = *(unsigned int *)((char *)v6 + v7);
  long long v9 = (unsigned int *)((char *)v6 + v7 + v8);
  uint64_t v10 = *v9;
  if (v10)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 4 * v10;
    uint64_t v13 = (char *)v6 + v7 + v8;
    while (1)
    {
      unint64_t v14 = *(unsigned int *)&v13[v11 + 4]
          + (unint64_t)*(unsigned __int16 *)&v13[v11
                                                      + 8
                                                      + *(unsigned int *)&v13[v11 + 4]
                                                      - (uint64_t)*(int *)((char *)&v9[v11 / 4 + 1]
                                                                        + *(unsigned int *)&v13[v11 + 4])];
      unint64_t v15 = (unint64_t)&v13[v11 + v14 + *(unsigned int *)&v13[v11 + 4 + v14]];
      size_t v16 = *(unsigned int *)(v15 + 4);
      if (v16 >= 0x17) {
        break;
      }
      HIBYTE(v30) = *(_DWORD *)(v15 + 4);
      p_dst = &__dst;
      if (v16) {
        goto LABEL_10;
      }
LABEL_11:
      *((unsigned char *)p_dst + v16) = 0;
      int v20 = *(char *)(a2 + 23);
      if (v20 >= 0) {
        size_t v21 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v21 = *(void *)(a2 + 8);
      }
      if (!v21) {
        goto LABEL_25;
      }
      size_t v22 = HIBYTE(v30);
      char v23 = HIBYTE(v30);
      if (v30 < 0) {
        size_t v22 = *((void *)&__dst + 1);
      }
      if (v21 <= v22)
      {
        std::string v24 = v20 >= 0 ? (const void *)a2 : *(const void **)a2;
        uint64_t v25 = v30 >= 0 ? &__dst : (long long *)__dst;
        if (!memcmp(v24, v25, v21))
        {
LABEL_25:
          unint64_t v26 = *(void *)(a4 + 8);
          if (v26 >= *(void *)(a4 + 16))
          {
            long long v28 = sub_6E6EC((char **)a4, (uint64_t)&__dst);
          }
          else
          {
            if (SHIBYTE(v30) < 0)
            {
              sub_4200(*(unsigned char **)(a4 + 8), (void *)__dst, *((unint64_t *)&__dst + 1));
            }
            else
            {
              long long v27 = __dst;
              *(void *)(v26 + 16) = v30;
              *(_OWORD *)unint64_t v26 = v27;
            }
            long long v28 = (char *)(v26 + 24);
            *(void *)(a4 + 8) = v26 + 24;
          }
          *(void *)(a4 + 8) = v28;
          char v23 = HIBYTE(v30);
        }
      }
      if (v23 < 0) {
        operator delete((void *)__dst);
      }
      v11 += 4;
      if (v12 == v11) {
        return;
      }
    }
    uint64_t v18 = (v16 & 0xFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v18 = v16 | 7;
    }
    uint64_t v19 = v18 + 1;
    p_dst = (long long *)operator new(v18 + 1);
    *((void *)&__dst + 1) = v16;
    int64_t v30 = v19 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_10:
    memcpy(p_dst, (const void *)(v15 + 8), v16);
    goto LABEL_11;
  }
}

void sub_28BECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 8) = v16;
  if (a15 < 0)
  {
    operator delete(__p);
    sub_1A668((void **)v15);
    _Unwind_Resume(a1);
  }
  sub_1A668((void **)v15);
  _Unwind_Resume(a1);
}

uint64_t sub_28BF10(const char *a1, const char **a2)
{
  sub_E1B4((uint64_t)v9);
  size_t v4 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v4);
  uint64_t v5 = *a2;
  size_t v6 = strlen(v5);
  sub_188FC78(v10, (uint64_t)v5, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_28C0B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_28C0C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_28C0D8(const char **a1, unsigned int *a2)
{
  uint64_t v2 = (char *)a2 + *a2;
  double v3 = *a1;
  size_t v4 = &v2[-*(int *)v2];
  if (*(unsigned __int16 *)v4 >= 5u && (uint64_t v5 = *((unsigned __int16 *)v4 + 2)) != 0) {
    return -strcmp(&v2[v5 + 4 + *(unsigned int *)&v2[v5]], v3);
  }
  else {
    return -strcmp((const char *)&dword_4, v3);
  }
}

void sub_28C144(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t prime = vcvtps_u32_f32((float)(unint64_t)(*(void *)(a2 + 24) - 0x5555555555555555 * ((uint64_t)(a3[1] - *a3) >> 3))/ *(float *)(a2 + 32));
  if (prime == 1)
  {
    unint64_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    unint64_t prime = std::__next_prime(prime);
  }
  int8x8_t v5 = *(int8x8_t *)(a2 + 8);
  if (prime > *(void *)&v5) {
    goto LABEL_18;
  }
  if (prime >= *(void *)&v5) {
    return;
  }
  size_t v6 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 24) / *(float *)(a2 + 32));
  if (*(void *)&v5 >= 3uLL)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] <= 1uLL)
    {
      uint64_t v8 = 1 << -(char)__clz(v6 - 1);
      if (v6 >= 2) {
        size_t v6 = v8;
      }
      if (prime <= v6) {
        unint64_t prime = v6;
      }
      if (prime >= *(void *)&v5) {
        return;
      }
LABEL_18:
      sub_B6C0(a2, prime);
      return;
    }
  }
  size_t v9 = std::__next_prime(v6);
  if (prime <= v9) {
    unint64_t prime = v9;
  }
  if (prime < *(void *)&v5) {
    goto LABEL_18;
  }
}

uint64_t *sub_28C268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v39, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            unint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          unint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  sub_28C688(a1, v10, a3, (uint64_t)v39);
  float v25 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v26 = *(float *)(a1 + 32);
  if (!v11 || (float)(v26 * (float)v11) < v25)
  {
    BOOL v28 = 1;
    if (v11 >= 3) {
      BOOL v28 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v11);
    unint64_t v30 = vcvtps_u32_f32(v25 / v26);
    if (v29 <= v30) {
      size_t prime = v30;
    }
    else {
      size_t prime = v29;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v32) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v32)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v32 < 3uLL || (uint8x8_t v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (prime <= v33) {
        size_t prime = v33;
      }
      if (prime < *(void *)&v32) {
LABEL_65:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v36 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        long long v27 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v27) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v3 = v10;
        long long v27 = *(void **)(*(void *)a1 + 8 * v10);
        if (v27) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v3 = v36 & v10;
      long long v27 = *(void **)(*(void *)a1 + 8 * (v36 & v10));
      if (v27) {
        goto LABEL_54;
      }
    }
LABEL_78:
    *(void *)v39[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v39[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v39[0])
    {
      unint64_t v37 = *(void *)(*(void *)v39[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v37 >= v11) {
          v37 %= v11;
        }
      }
      else
      {
        v37 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v37) = v39[0];
    }
    goto LABEL_89;
  }
  long long v27 = *(void **)(*(void *)a1 + 8 * v3);
  if (!v27) {
    goto LABEL_78;
  }
LABEL_54:
  *(void *)v39[0] = *v27;
  *long long v27 = v39[0];
LABEL_89:
  unint64_t v14 = (uint64_t *)v39[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_28C670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_85358((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_28C688@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  double result = v8 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    double result = sub_4200(result, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)double result = *(_OWORD *)a3;
    v8[4] = *(void *)(a3 + 16);
  }
  uint64_t v12 = *(void *)(a3 + 40);
  uint64_t v11 = a3 + 40;
  uint64_t v10 = v12;
  uint64_t v13 = *(void *)(v11 - 16);
  unint64_t v14 = *(void *)(v11 - 8);
  *(void *)(v11 - 16) = 0;
  *(void *)(v11 - 8) = 0;
  v8[7] = v12;
  char v15 = v8 + 7;
  *(v15 - 2) = v13;
  *(v15 - 1) = v14;
  uint64_t v16 = *(void *)(v11 + 8);
  v15[1] = v16;
  *((_DWORD *)v15 + 4) = *(_DWORD *)(v11 + 16);
  if (v16)
  {
    unint64_t v17 = *(void *)(v10 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v17 >= v14) {
        v17 %= v14;
      }
    }
    else
    {
      v17 &= v14 - 1;
    }
    *(void *)(v13 + 8 * v17) = v15;
    *(void *)uint64_t v11 = 0;
    *(void *)(v11 + 8) = 0;
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_28C760(_Unwind_Exception *a1)
{
  sub_85358(v1);
  _Unwind_Resume(a1);
}

void *sub_28C774(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v5 = 24 * a3;
    size_t v6 = (char *)operator new(24 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      unint64_t v9 = &v6[v7];
      uint64_t v10 = (long long *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_4200(v9, *(void **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v8 = *v10;
        *((void *)v9 + 2) = *((void *)v10 + 2);
        *(_OWORD *)unint64_t v9 = v8;
      }
      v7 += 24;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_28C850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_28C864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_8A82C(&a9);
  _Unwind_Resume(a1);
}

__n128 sub_28C8A0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

uint64_t sub_28C8B0(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result)
  {
    if (sub_2ABCE4((void **)result))
    {
      return 0;
    }
    else
    {
      uint64_t v5 = (unsigned int *)sub_2AB884(*a1, 24, 1u, 0);
      if (v6
        && (uint64_t v7 = (int *)((char *)v5 + *v5), v8 = (unsigned __int16 *)((char *)v7 - *v7), *v8 >= 5u)
        && (uint64_t v9 = v8[2]) != 0
        && (uint64_t v10 = (int *)((char *)v7 + v9 + *(unsigned int *)((char *)v7 + v9)), *v10))
      {
        uint64_t v11 = (_DWORD *)((char *)v10 + v10[1] + 4);
        uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
        if (*v12 >= 5u && (uint64_t v13 = v12[2]) != 0)
        {
          unint64_t v14 = (unsigned int *)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13));
          __key[0] = nullsub_1(a2);
          return bsearch(__key, v14 + 1, *v14, 4uLL, (int (__cdecl *)(const void *, const void *))sub_28CBF8) != 0;
        }
        else
        {
          uint64_t result = sub_723EC(3u);
          if (result)
          {
            sub_6BAC((uint64_t)__key);
            sub_188FC78(__key, (uint64_t)"Failed to read EV brand info from flatbuffers", 45);
            std::stringbuf::str();
            sub_7246C((uint64_t *)__p, 3u);
            if (v16 < 0) {
              operator delete(__p[0]);
            }
            sub_111ECAC((uint64_t)__key);
            return 0;
          }
        }
      }
      else
      {
        uint64_t result = sub_723EC(3u);
        if (result)
        {
          sub_6BAC((uint64_t)__key);
          sub_188FC78(__key, (uint64_t)"Failed to read EV charging network data from flatbuffers", 56);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 3u);
          if (v16 < 0) {
            operator delete(__p[0]);
          }
          if (v18 < 0) {
            operator delete((void *)__key[9]);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
          return 0;
        }
      }
    }
  }
  return result;
}

void sub_28CB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_28CBF8(unint64_t *a1, unsigned int *a2)
{
  uint64_t v2 = (int *)((char *)a2 + *a2);
  unint64_t v3 = *a1;
  size_t v4 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v4 < 5u) {
    return v3 != 0;
  }
  uint64_t v5 = v4[2];
  if (!v5) {
    return v3 != 0;
  }
  unint64_t v6 = *(void *)((char *)v2 + v5);
  if (v6 <= v3) {
    unsigned int v7 = 0;
  }
  else {
    unsigned int v7 = -1;
  }
  if (v6 >= v3) {
    return v7;
  }
  else {
    return v7 + 1;
  }
}

uint64_t *sub_28CC5C(uint64_t *a1, void *a2, void *a3, uint64_t a4)
{
  *(_OWORD *)a1 = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = 0;
  a1[2] = v8;
  a1[3] = v7;
  do
  {
    uint64_t v10 = &a1[v9];
    *((_DWORD *)v10 + 8) = 0;
    *((_DWORD *)v10 + 14) = 0;
    v10[5] = 0;
    v10[8] = 0;
    v9 += 6;
  }
  while (v9 != 480);
  *((_OWORD *)a1 + 242) = 0u;
  uint64_t v11 = (void **)*a1;
  if (*a1) {
    LOBYTE(v11) = sub_2ABCE4(v11);
  }
  *((unsigned char *)a1 + 3888) = (_BYTE)v11;
  sub_291468((uint64_t)(a1 + 487), a2, a3);
  return a1;
}

void sub_28CD00(_Unwind_Exception *a1)
{
  unint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    sub_20A69F0(v3);
  }
  sub_20A6974((std::__shared_weak_count **)(v1 + 8));
  _Unwind_Resume(a1);
}

unint64_t sub_28CD20(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    BOOL v3 = a2 == -1;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3
    && ((v4 = nullsub_1(a2), unint64_t v5 = sub_2ABB48(v2, 16, v4), HIDWORD(v5))
      ? (BOOL v7 = v5 == 0xFFFFFFFFLL)
      : (BOOL v7 = 1),
        !v7 ? (BOOL v8 = v6 == 0) : (BOOL v8 = 0),
        v8))
  {
    return (v5 << 32) | HIDWORD(v5);
  }
  else
  {
    return 0xFFFFFFFF00000000;
  }
}

unint64_t sub_28CDA4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 8);
  if (v2 == -1) {
    return v2 << 32;
  }
  if (v2) {
    return *(void *)a2 | (HIDWORD(*(void *)a2) << 32);
  }
  uint64_t v3 = *a1;
  if (*a1) {
    BOOL v4 = *(void *)a2 == -1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0xFFFFFFFF00000000;
  }
  uint64_t v6 = nullsub_1(*(void *)a2);
  unint64_t v7 = sub_2ABB48(v3, 16, v6);
  if (HIDWORD(v7)) {
    BOOL v9 = v7 == -1;
  }
  else {
    BOOL v9 = 1;
  }
  int v10 = !v9;
  BOOL v11 = v8 == 0;
  BOOL v12 = (v10 & v11) == 0;
  if ((v10 & v11) != 0) {
    unint64_t v13 = HIDWORD(v7);
  }
  else {
    unint64_t v13 = 0;
  }
  uint64_t v14 = 0xFFFFFFFFLL;
  if (!v12) {
    uint64_t v14 = v7;
  }
  return v13 | (v14 << 32);
}

uint64_t sub_28CE70(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return -1;
  }
  unint64_t v2 = HIDWORD(a2);
  if (HIDWORD(a2) == 0xFFFFFFFF) {
    return -1;
  }
  uint64_t v3 = sub_28DCDC(a1 + 16, a2, 1);
  if (!v3) {
    return -1;
  }
  BOOL v4 = &v3[-*(int *)v3];
  if (*(unsigned __int16 *)v4 < 5u) {
    return -1;
  }
  uint64_t v5 = *((unsigned __int16 *)v4 + 2);
  if (!v5) {
    return -1;
  }
  uint64_t v6 = (uint64_t)&v3[4 * v2 + v5 + *(unsigned int *)&v3[v5]];
  unint64_t v7 = (int *)(v6 + 4 + *(unsigned int *)(v6 + 4));
  char v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 5u && (uint64_t v9 = v8[2]) != 0)
  {
    uint64_t v10 = *(void *)((char *)v7 + v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  return nullsub_1(v10);
}

uint64_t sub_28CF4C(uint64_t a1, _DWORD *a2)
{
  int v2 = a2[2];
  if (v2 == -1) {
    return -1;
  }
  if (!v2) {
    return *(void *)a2;
  }
  uint64_t v4 = HIDWORD(*(void *)a2);
  uint64_t v5 = *(void *)a2;
  if (!v5 || v4 == 0xFFFFFFFFLL) {
    return -1;
  }
  unint64_t v7 = sub_28DCDC(a1 + 16, v5, 1);
  if (!v7) {
    return -1;
  }
  char v8 = &v7[-*(int *)v7];
  if (*(unsigned __int16 *)v8 < 5u) {
    return -1;
  }
  uint64_t v9 = *((unsigned __int16 *)v8 + 2);
  if (!v9) {
    return -1;
  }
  uint64_t v10 = (uint64_t)&v7[4 * v4 + v9 + *(unsigned int *)&v7[v9]];
  BOOL v11 = (int *)(v10 + 4 + *(unsigned int *)(v10 + 4));
  BOOL v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 5u && (uint64_t v13 = v12[2]) != 0)
  {
    uint64_t v14 = *(void *)((char *)v11 + v13);
  }
  else
  {
    uint64_t v14 = 0;
  }
  return nullsub_1(v14);
}

double sub_28D048@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t v3 = a3;
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 == -1) {
    goto LABEL_31;
  }
  if (v4)
  {
    if (v4 == 1) {
      a3 = *(void *)a2;
    }
    unint64_t v6 = HIDWORD(a3);
    unint64_t v7 = a3;
    if (!a3) {
      goto LABEL_31;
    }
  }
  else
  {
    unint64_t v8 = *(void *)a2;
    uint64_t v9 = *a1;
    if (*a1) {
      BOOL v10 = v8 == -1;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      goto LABEL_31;
    }
    uint64_t v11 = nullsub_1(v8);
    unint64_t v12 = sub_2ABB48(v9, 16, v11);
    BOOL v14 = !HIDWORD(v12) || v12 == -1;
    BOOL v15 = !v14;
    BOOL v16 = v13 == 0;
    unint64_t v7 = v15 && v16 ? HIDWORD(v12) : 0;
    unint64_t v6 = v15 && v16 ? v12 : 0xFFFFFFFFLL;
    if (!v7) {
      goto LABEL_31;
    }
  }
  if (v6 == 0xFFFFFFFFLL
    || (unint64_t v17 = sub_28DCDC((uint64_t)(a1 + 2), v7, 1)) == 0
    || (char v18 = &v17[-*(int *)v17], *(unsigned __int16 *)v18 < 5u)
    || (uint64_t v19 = *((unsigned __int16 *)v18 + 2)) == 0)
  {
LABEL_31:
    *(unsigned char *)(v3 + 48) = 0;
    double result = 0.0;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)uint64_t v3 = 0u;
    *(void *)(v3 + 52) = 0xFFFFFFFF00000000;
    *(void *)(v3 + 64) = -1;
    *(_DWORD *)(v3 + 72) = 0;
    *(unsigned char *)(v3 + 76) = 0;
    return result;
  }
  uint64_t v20 = (uint64_t)&v17[4 * v6 + v19 + *(unsigned int *)&v17[v19]];
  uint64_t v21 = (int *)(v20 + 4 + *(unsigned int *)(v20 + 4));

  sub_28D220((uint64_t)a1, v21, v7 | (v6 << 32), v3);
  return result;
}

void **sub_28D1AC(void **a1)
{
  int v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    int v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 3);
        if (v5)
        {
          *((void *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 48;
      }
      while (v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_28D220(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(unsigned char *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  *(void *)(a4 + 52) = 0xFFFFFFFF00000000;
  *(void *)(a4 + 64) = -1;
  *(_DWORD *)(a4 + 72) = 0;
  *(unsigned char *)(a4 + 76) = 0;
  uint64_t v5 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v5 < 0xDu) {
    return;
  }
  if (!v5[6]) {
    return;
  }
  uint64_t v6 = v5[4];
  if (!v6) {
    return;
  }
  uint64_t v8 = *(unsigned int *)((char *)a2 + v6);
  uint64_t v9 = *(unsigned int *)((char *)a2 + v6 + v8);
  if (!v9) {
    return;
  }
  uint64_t v12 = 4 * v9;
  uint64_t v13 = a1 + 16;
  uint64_t v14 = v6 + v8;
  do
  {
    uint64_t v16 = *(unsigned int *)((char *)a2 + v14 + 4);
    unint64_t v17 = (char *)a2 + v14 + v16 - *(int *)((char *)a2 + v14 + v16 + 4);
    if (*((unsigned __int16 *)v17 + 2) < 7u)
    {
      char v18 = 0;
      if (!*(unsigned char *)(a1 + 3888)) {
        goto LABEL_16;
      }
    }
    else
    {
      char v18 = (int *)*((unsigned __int16 *)v17 + 5);
      if (v18) {
        char v18 = (int *)((char *)v18
      }
                    + v16
                    + v14
                    + (void)a2
                    + *(unsigned int *)((char *)v18 + v16 + (void)a2 + v14 + 4)
                    + 4);
      if (!*(unsigned char *)(a1 + 3888)) {
        goto LABEL_16;
      }
    }
    if (!sub_290DEC(v13, *(int *)((char *)v18 + *(unsigned __int16 *)((char *)v18 - *v18 + 6)), 1)) {
      goto LABEL_7;
    }
    uint64_t v16 = *(unsigned int *)((char *)a2 + v14 + 4);
LABEL_16:
    sub_28F3D0((int *)((char *)a2 + v14 + v16 + 4), (uint64_t)&v38);
    unint64_t v19 = *(void *)(a4 + 8);
    if (v19 < *(void *)(a4 + 16))
    {
      long long v15 = v38;
      *(_WORD *)(v19 + 16) = v39;
      *(_OWORD *)unint64_t v19 = v15;
      *(void *)(v19 + 32) = 0;
      *(void *)(v19 + 40) = 0;
      *(void *)(v19 + 24) = 0;
      *(_OWORD *)(v19 + 24) = *(_OWORD *)__p;
      *(void *)(v19 + 40) = v41;
      *(void *)(a4 + 8) = v19 + 48;
    }
    else
    {
      uint64_t v20 = sub_2904CC((void **)a4, (uint64_t)&v38);
      uint64_t v21 = __p[0];
      *(void *)(a4 + 8) = v20;
      if (v21)
      {
        __p[1] = v21;
        operator delete(v21);
      }
    }
LABEL_7:
    v14 += 4;
    v12 -= 4;
  }
  while (v12);
  if (*(void *)a4 != *(void *)(a4 + 8))
  {
    uint64_t v22 = (unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *a2 + 12));
    sub_28F060((unsigned int *)((char *)v22 + *v22), (void (*)(void **__return_ptr, char *))sub_893BC, (uint64_t)&v38);
    uint64_t v23 = (void **)(a4 + 24);
    uint64_t v24 = *(void *)(a4 + 24);
    if (v24)
    {
      uint64_t v25 = *(void *)(a4 + 32);
      float v26 = *(void **)(a4 + 24);
      if (v25 != v24)
      {
        do
        {
          if (*(char *)(v25 - 1) < 0) {
            operator delete(*(void **)(v25 - 24));
          }
          v25 -= 48;
        }
        while (v25 != v24);
        float v26 = *v23;
      }
      *(void *)(a4 + 32) = v24;
      operator delete(v26);
      *uint64_t v23 = 0;
      *(void *)(a4 + 32) = 0;
      *(void *)(a4 + 40) = 0;
    }
    *(_OWORD *)(a4 + 24) = v38;
    *(void *)(a4 + 40) = v39;
    long long v27 = (unsigned __int16 *)((char *)a2 - *a2);
    unsigned int v28 = *v27;
    if (v28 < 0x29)
    {
      uint64_t v30 = 0;
      *(_DWORD *)(a4 + 72) = 0;
      if (v28 >= 0x1D) {
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v29 = v27[20];
      if (v27[20]) {
        LODWORD(v29) = *(unsigned __int16 *)((char *)a2 + v29);
      }
      *(_DWORD *)(a4 + 72) = v29;
LABEL_33:
      uint64_t v31 = v27[14];
      if (v31) {
        uint64_t v30 = *((unsigned __int8 *)a2 + v31);
      }
      else {
        uint64_t v30 = 0;
      }
    }
    *(unsigned char *)(a4 + 48) = sub_893A0(v30);
    *(void *)(a4 + 52) = a3;
    int8x8_t v32 = (unsigned __int16 *)((char *)a2 - *a2);
    if (*v32 >= 0x25u && (uint64_t v33 = v32[18]) != 0) {
      uint64_t v34 = *(void *)((char *)a2 + v33);
    }
    else {
      uint64_t v34 = 0;
    }
    *(void *)(a4 + 64) = nullsub_1(v34);
    uint64_t v35 = (unsigned __int16 *)((char *)a2 - *a2);
    if (*v35 >= 0x27u && (uint64_t v36 = v35[19]) != 0) {
      uint64_t v37 = *((unsigned __int8 *)a2 + v36);
    }
    else {
      uint64_t v37 = 0;
    }
    *(unsigned char *)(a4 + 76) = sub_89394(v37);
  }
}

void sub_28D540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  sub_28F1C0(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_28D584@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X8>)
{
  int v6 = *((_DWORD *)a2 + 2);
  if (v6 != -1)
  {
    if (v6)
    {
      if (v6 == 1) {
        a4 = *a2;
      }
      unint64_t v7 = HIDWORD(a4);
      LODWORD(v8) = a4;
      if (!a4) {
        return 1;
      }
    }
    else
    {
      uint64_t v9 = *a2;
      uint64_t v10 = *a1;
      if (*a1) {
        BOOL v11 = v9 == -1;
      }
      else {
        BOOL v11 = 1;
      }
      if (v11) {
        return 1;
      }
      uint64_t v12 = nullsub_1(v9);
      unint64_t v13 = sub_2ABB48(v10, 16, v12);
      BOOL v15 = !HIDWORD(v13) || v13 == -1;
      BOOL v16 = !v15;
      BOOL v17 = v14 == 0;
      unint64_t v8 = v16 && v17 ? HIDWORD(v13) : 0;
      LODWORD(v7) = v16 && v17 ? v13 : -1;
      if (!v8) {
        return 1;
      }
    }
    if (v7 != 0xFFFFFFFFLL)
    {
      char v18 = sub_28DCDC((uint64_t)(a1 + 2), v8, 1);
      if (v18)
      {
        unint64_t v19 = &v18[-*(int *)v18];
        if (*(unsigned __int16 *)v19 >= 5u)
        {
          uint64_t v20 = *((unsigned __int16 *)v19 + 2);
          if (v20)
          {
            uint64_t v21 = (uint64_t)&v18[4 * v7 + v20 + *(unsigned int *)&v18[v20]];
            v23[0] = (char *)(v21 + 4 + *(unsigned int *)(v21 + 4));
            v23[1] = (char *)(v8 | ((unint64_t)v7 << 32));
            return sub_28D6E4(a3, v23);
          }
        }
      }
    }
  }
  return 1;
}

uint64_t sub_28D6E4(uint64_t a1, char **a2)
{
  int v2 = *a2;
  uint64_t v3 = &(*a2)[-*(int *)*a2];
  unsigned int v4 = *(unsigned __int16 *)v3;
  if (v4 < 0xD) {
    return 1;
  }
  uint64_t v5 = *((unsigned __int16 *)v3 + 6);
  if (!*((_WORD *)v3 + 6) || !*((_WORD *)v3 + 4)) {
    return 1;
  }
  if (v4 >= 0x1F)
  {
    uint64_t v8 = *((unsigned __int16 *)v3 + 15);
    if (v8) {
      uint64_t v8 = *(void *)&v2[v8];
    }
    if ((*(void *)(a1 + 8) & v8) != 0) {
      return 1;
    }
  }
  uint64_t v10 = &v2[v5];
  uint64_t v11 = *(unsigned int *)v10;
  unint64_t v13 = &v10[v11 + 4];
  uint64_t v12 = *(unsigned int *)&v10[v11];
  if (!v12) {
    return 1;
  }
  uint64_t v14 = 4 * v12;
  while (1)
  {
    sub_893BC((int *)&v13[*(unsigned int *)v13], (uint64_t)v29);
    v15.i64[0] = v30;
    v15.i64[1] = v31;
    int32x4_t v16 = v15;
    v16.i32[1] = v30;
    v16.i32[3] = v32;
    int v17 = 1;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(v16, (int32x4_t)xmmword_20E12E0))) & 1) != 0
      || !v33
      || *(_DWORD *)a1 && ((1 << v29[0]) & *(_DWORD *)a1) == 0)
    {
      if ((v35 & 0x80000000) == 0) {
        goto LABEL_17;
      }
LABEL_16:
      operator delete(__p);
      goto LABEL_17;
    }
    if (*(unsigned char *)(a1 + 4)) {
      BOOL v18 = v29[2] == *(unsigned __int8 *)(a1 + 4);
    }
    else {
      BOOL v18 = 1;
    }
    int v17 = !v18;
    if (v35 < 0) {
      goto LABEL_16;
    }
LABEL_17:
    if (!v17) {
      break;
    }
    v13 += 4;
    uint64_t result = 1;
    v14 -= 4;
    if (!v14) {
      return result;
    }
  }
  unint64_t v19 = &(*a2)[*(unsigned __int16 *)&(*a2)[-*(int *)*a2 + 8]];
  uint64_t v20 = (unsigned int *)&v19[*(unsigned int *)v19];
  unsigned int v23 = *v20;
  uint64_t v21 = v20 + 1;
  uint64_t v22 = v23;
  if (!v23) {
    return 1;
  }
  uint64_t v24 = 4 * v22 - 4;
  uint64_t v25 = v21;
  do
  {
    unsigned int v26 = *v25++;
    BOOL v27 = sub_88284((int *)((char *)v21 + v26)) > *(unsigned __int8 *)(a1 + 5);
    uint64_t result = v27;
    BOOL v28 = !v27 || v24 == 0;
    v24 -= 4;
    uint64_t v21 = v25;
  }
  while (!v28);
  return result;
}

void sub_28D8C4(uint64_t *a1, unsigned int a2, uint64_t a3, int64x2_t *a4)
{
  uint64_t v4 = a2;
  uint64_t v5 = (unsigned int *)sub_2AB884(*a1, 16, a2, 1);
  if (v6)
  {
    unint64_t v7 = (int *)((char *)v5 + *v5);
    uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
    if (*v8 >= 5u)
    {
      uint64_t v9 = v8[2];
      if (v9)
      {
        uint64_t v10 = (unsigned int *)((char *)v7 + v9);
        uint64_t v11 = *v10;
        unint64_t v13 = (unsigned int *)((char *)v10 + v11 + 4);
        uint64_t v12 = *(unsigned int *)((char *)v10 + v11);
        if (v12)
        {
          uint64_t v14 = 0;
          int32x4_t v15 = &v13[v12];
          do
          {
            int v17 = (int *)((char *)v13 + *v13);
            BOOL v18 = (unsigned __int16 *)((char *)v17 - *v17);
            unsigned int v19 = *v18;
            if (v19 >= 0xD
              && v18[6]
              && v18[4]
              && (v19 >= 0x13 ? (BOOL v20 = v18[3] == 0) : (BOOL v20 = 1),
                  !v20 && (uint64_t v21 = v18[9]) != 0 && *(int *)((char *)v17 + v21 + *(unsigned int *)((char *)v17 + v21))))
            {
              uint64_t v39 = (char *)v13 + *v13;
              uint64_t v40 = (void (__cdecl **)(std::stringbuf *__hidden))(v4 | (v14 << 32));
              if ((sub_28D6E4(a3, (char **)&v39) & 1) == 0)
              {
                sub_28D220((uint64_t)a1, v17, v4 | (v14 << 32), (uint64_t)&v39);
                if (v43 && v44 != -1)
                {
                  unint64_t v22 = a4->u64[1];
                  if (v22 >= a4[1].i64[0])
                  {
                    uint64_t v23 = sub_28FB30(a4, (uint64_t)&v39);
                  }
                  else
                  {
                    sub_28FA7C((uint64_t)a4, (uint64_t)&v39);
                    uint64_t v23 = v22 + 80;
                  }
                  a4->i64[1] = v23;
                }
                unsigned int v26 = (void **)v41;
                if (v41)
                {
                  BOOL v27 = v42;
                  BOOL v28 = v41;
                  if (v42 != v41)
                  {
                    do
                    {
                      if (*((char *)v27 - 1) < 0) {
                        operator delete(*(v27 - 3));
                      }
                      v27 -= 6;
                    }
                    while (v27 != v26);
                    BOOL v28 = v41;
                  }
                  uint64_t v42 = v26;
                  operator delete(v28);
                }
                uint64_t v29 = (void (__cdecl **)(std::stringbuf *__hidden))v39;
                if (v39)
                {
                  unsigned __int32 v30 = v40;
                  unsigned int v31 = v39;
                  if (v40 != v39)
                  {
                    do
                    {
                      __int32 v32 = *(v30 - 3);
                      if (v32)
                      {
                        *(v30 - 2) = v32;
                        operator delete(v32);
                      }
                      v30 -= 6;
                    }
                    while (v30 != v29);
                    unsigned int v31 = v39;
                  }
                  uint64_t v40 = v29;
                  operator delete(v31);
                }
              }
            }
            else if (sub_723EC(3u))
            {
              sub_6BAC((uint64_t)&v39);
              uint64_t v24 = sub_188FC78(&v39, (uint64_t)"Found invalid charging station POI in quad node ", 48);
              uint64_t v25 = sub_51960(v24, v4);
              sub_188FC78(v25, (uint64_t)".", 1);
              std::stringbuf::str();
              sub_7246C((uint64_t *)&__p, 3u);
              if (v38 < 0) {
                operator delete(__p);
              }
              uint64_t v39 = v36;
              *(void **)((char *)&v39 + *((void *)v36 - 3)) = v16;
              if (v46 < 0) {
                operator delete(v45);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              std::ios::~ios();
            }
            ++v14;
            ++v13;
          }
          while (v13 != v15);
        }
      }
    }
  }
}

void sub_28DC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_28F1C0((void **)va);
  _Unwind_Resume(a1);
}

void sub_28DC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void ***sub_28DCA0(void ***a1)
{
  if (*a1)
  {
    sub_28F794((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

char *sub_28DCDC(uint64_t a1, unsigned int a2, int a3)
{
  int v24 = a3;
  unsigned int v25 = a2;
  v23[0] = &v24;
  v23[1] = (int *)&v25;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 1552) == a2)
    {
      unsigned int v7 = 64;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 1576) == a2)
    {
      unsigned int v7 = 65;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 1600) == a2)
    {
      unsigned int v7 = 66;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 1624) == a2)
    {
      unsigned int v7 = 67;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      uint64_t v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_28;
    }
    unint64_t v11 = *(void *)(a1 + 1608);
    unint64_t v12 = *(void *)(a1 + 1584);
    unint64_t v13 = *(void *)(a1 + 1560);
    int v14 = v13 < v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 1560);
    }
    BOOL v15 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 1584);
    }
    int v16 = v14 << 6;
    if (!v15) {
      int v16 = 65;
    }
    if (v11 >= v4) {
      unint64_t v17 = v4;
    }
    else {
      unint64_t v17 = *(void *)(a1 + 1608);
    }
    unint64_t v18 = *(void *)(a1 + 1632);
    if (v11 >= v4) {
      int v19 = v16;
    }
    else {
      int v19 = 66;
    }
    BOOL v20 = (unsigned int *)sub_2AB884(v5, 16, a2, 1);
    unsigned int v21 = 67;
    if (v18 >= v17) {
      unsigned int v21 = v19;
    }
    uint64_t v22 = v6 + 24 * v21;
    *(_DWORD *)uint64_t v22 = v25;
    *(void *)(v22 + 8) = *(void *)(a1 + 3856);
    *(void *)(v22 + 16) = v20;
    if (v20) {
      return (char *)v20 + *v20;
    }
  }
LABEL_28:
  sub_2902A0(v23);
  return 0;
}

uint64_t sub_28DE6C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unint64_t v4 = sub_28DCDC(a1 + 16, a2, 1);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = &v4[-*(int *)v4];
  if (*(unsigned __int16 *)v5 < 5u) {
    return 0;
  }
  uint64_t v6 = *((unsigned __int16 *)v5 + 2);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = *(unsigned int *)&v4[v6];
  uint64_t v8 = &v4[v6 + v7];
  unsigned int v11 = *(_DWORD *)v8;
  uint64_t v10 = (unsigned int *)(v8 + 4);
  uint64_t v9 = v11;
  if (!v11) {
    return 0;
  }
  unsigned __int8 v12 = 0;
  unint64_t v13 = &v10[v9];
  int v14 = &v4[v6 + v7];
  do
  {
    uint64_t v15 = *v10;
    int v16 = (char *)v10 + v15;
    unint64_t v17 = (unsigned __int16 *)((char *)v10 + v15 - *(int *)((char *)v10 + v15));
    if (*v17 >= 0xDu)
    {
      uint64_t v18 = v17[6];
      if (v18)
      {
        int v19 = &v16[v18];
        uint64_t v20 = *(unsigned int *)&v16[v18];
        uint64_t v21 = *(unsigned int *)&v19[v20];
        if (v21)
        {
          uint64_t v22 = 0;
          uint64_t v23 = 4 * v21;
          int v24 = &v14[v15 + v20 + v18];
          do
          {
            uint64_t v25 = *(unsigned int *)&v24[v22 + 8];
            unsigned int v26 = &v24[v22 + v25];
            BOOL v27 = &v24[v22 + v25 - *((int *)v26 + 2)];
            if (*((unsigned __int16 *)v27 + 4) >= 5u && (uint64_t v28 = *((unsigned __int16 *)v27 + 6)) != 0)
            {
              if (((a3 >> sub_893AC(v24[v22 + 8 + v25 + v28])) & 1) == 0) {
                goto LABEL_12;
              }
            }
            else if (((a3 >> sub_893AC(0)) & 1) == 0)
            {
              goto LABEL_12;
            }
            uint64_t v29 = &v24[v22 + v25 - *((int *)v26 + 2)];
            if (*((unsigned __int16 *)v29 + 4) >= 0x13u)
            {
              uint64_t v30 = *((unsigned __int16 *)v29 + 13);
              if (v30)
              {
                if (v24[v22 + 8 + v25 + v30] == 2) {
                  return 2;
                }
              }
            }
            unsigned __int8 v12 = 1;
LABEL_12:
            v22 += 4;
          }
          while (v23 != v22);
        }
      }
    }
    ++v10;
    v14 += 4;
  }
  while (v10 != v13);
  return v12;
}

unint64_t sub_28E018(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xFFFFFFFF00000000;
  uint64_t v3 = 0xFFFFFFFFLL;
  if (a2)
  {
    unint64_t v4 = HIDWORD(a2);
    if (HIDWORD(a2) != 0xFFFFFFFF)
    {
      uint64_t v5 = sub_28DCDC(a1 + 16, a2, 1);
      if (!v5) {
        goto LABEL_19;
      }
      uint64_t v6 = &v5[-*(int *)v5];
      if (*(unsigned __int16 *)v6 < 5u) {
        goto LABEL_19;
      }
      uint64_t v7 = *((unsigned __int16 *)v6 + 2);
      if (!v7) {
        goto LABEL_19;
      }
      uint64_t v8 = (uint64_t)&v5[4 * v4 + v7 + *(unsigned int *)&v5[v7]];
      uint64_t v9 = (int *)(v8 + 4 + *(unsigned int *)(v8 + 4));
      uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
      unsigned int v11 = *v10;
      if (v11 < 0xD || !v10[6] || !v10[4]) {
        goto LABEL_19;
      }
      unsigned __int16 v12 = v10[3];
      BOOL v13 = v11 < 0x13 || v10[3] == 0;
      if (!v13 && (uint64_t v14 = v10[9]) != 0 && *(int *)((char *)v9 + v14 + *(unsigned int *)((char *)v9 + v14)))
      {
        uint64_t v15 = (uint64_t)v9 + v12;
        uint64_t v3 = *(unsigned int *)v15;
        LODWORD(v15) = *(_DWORD *)(v15 + 4);
        if (v15 >= 0xFFFFFFFE) {
          uint64_t v15 = 4294967294;
        }
        else {
          uint64_t v15 = v15;
        }
        unint64_t v2 = v15 << 32;
      }
      else
      {
LABEL_19:
        unint64_t v2 = 0xFFFFFFFF00000000;
        uint64_t v3 = 0xFFFFFFFFLL;
      }
    }
  }
  return v2 | v3;
}

int *sub_28E11C(int *result)
{
  if (result)
  {
    uint64_t v1 = (unsigned __int16 *)((char *)result - *result);
    unsigned int v2 = *v1;
    if (v2 >= 0xD && v1[6] && v1[4] && (v2 >= 0x13 ? (BOOL v3 = v1[3] == 0) : (BOOL v3 = 1), !v3 && (v4 = v1[9]) != 0)) {
      return (int *)(*(int *)((char *)result + v4 + *(unsigned int *)((char *)result + v4)) != 0);
    }
    else {
      return 0;
    }
  }
  return result;
}

void sub_28E180(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t v4 = a3;
  int v5 = *(_DWORD *)(a2 + 8);
  switch(v5)
  {
    case 1:
      a3 = *(void *)a2;
      break;
    case 0:
      unint64_t v7 = *(void *)a2;
      uint64_t v8 = *a1;
      if (*a1) {
        BOOL v9 = v7 == -1;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9)
      {
        a3 = 0;
        uint64_t v6 = 0xFFFFFFFFLL;
      }
      else
      {
        uint64_t v10 = nullsub_1(v7);
        unint64_t v11 = sub_2ABB48(v8, 16, v10);
        a3 = HIDWORD(v11);
        if (HIDWORD(v11)) {
          BOOL v13 = v11 == -1;
        }
        else {
          BOOL v13 = 1;
        }
        int v14 = !v13;
        BOOL v15 = v12 == 0;
        BOOL v16 = (v14 & v15) == 0;
        if ((v14 & v15) == 0) {
          a3 = 0;
        }
        uint64_t v6 = 0xFFFFFFFFLL;
        if (!v16) {
          uint64_t v6 = v11;
        }
      }
      goto LABEL_23;
    case -1:
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      return;
  }
  uint64_t v6 = HIDWORD(a3);
  a3 = a3;
LABEL_23:

  sub_28E264((uint64_t)a1, a3 | (v6 << 32), v4);
}

void sub_28E264(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2
    && (unint64_t v4 = HIDWORD(a2), HIDWORD(a2) != 0xFFFFFFFF)
    && (uint64_t v6 = a1 + 16, (v7 = sub_28DCDC(a1 + 16, a2, 1)) != 0)
    && (uint64_t v8 = &v7[-*(int *)v7], *(unsigned __int16 *)v8 >= 5u)
    && (uint64_t v9 = *((unsigned __int16 *)v8 + 2)) != 0)
  {
    uint64_t v10 = *(unsigned int *)&v7[v9];
    uint64_t v11 = 4 * v4;
    char v12 = &v7[4 * v4 + v9 + v10];
    uint64_t v13 = *((unsigned int *)v12 + 1);
    int v14 = &v12[v13 + 4];
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    BOOL v15 = &v14[-*(int *)v14];
    unsigned int v16 = *(unsigned __int16 *)v15;
    if (v16 >= 0xD)
    {
      if (*((_WORD *)v15 + 6))
      {
        uint64_t v17 = *((unsigned __int16 *)v15 + 4);
        if (*((_WORD *)v15 + 4))
        {
          if (v16 >= 0x13 && *((_WORD *)v15 + 3) != 0)
          {
            uint64_t v19 = *((unsigned __int16 *)v15 + 9);
            if (v19)
            {
              if (*(_DWORD *)&v14[v19 + *(unsigned int *)&v14[v19]])
              {
                uint64_t v20 = &v14[v17];
                uint64_t v21 = *(unsigned int *)&v14[v17];
                uint64_t v22 = *(unsigned int *)&v20[v21];
                if (v22)
                {
                  uint64_t v23 = 0;
                  uint64_t v24 = 4 * v22;
                  uint64_t v25 = &v7[v17 + v13 + v10 + v9 + v11 + v21];
                  while (1)
                  {
                    uint64_t v27 = *(unsigned int *)&v25[v23 + 8];
                    uint64_t v28 = &v25[v23 + v27 - *(int *)&v25[v23 + 8 + v27]];
                    if (*((unsigned __int16 *)v28 + 4) < 7u)
                    {
                      unint64_t v29 = 0;
                    }
                    else
                    {
                      unint64_t v29 = *((unsigned __int16 *)v28 + 7);
                      if (v29) {
                        v29 += (unint64_t)&v25[v23 + 8 + v27 + *(unsigned int *)&v25[v23 + 8 + v27 + v29]];
                      }
                    }
                    if (!*(unsigned char *)(a1 + 3888)) {
                      goto LABEL_28;
                    }
                    if (sub_290DEC(v6, *(_DWORD *)(v29 + *(unsigned __int16 *)(v29 - *(int *)v29 + 6)), 1)) {
                      break;
                    }
LABEL_20:
                    v23 += 4;
                    if (v24 == v23) {
                      return;
                    }
                  }
                  uint64_t v27 = *(unsigned int *)&v25[v23 + 8];
LABEL_28:
                  sub_28F3D0((int *)&v25[v23 + 8 + v27], (uint64_t)&v33);
                  unint64_t v30 = *(void *)(a3 + 8);
                  if (v30 < *(void *)(a3 + 16))
                  {
                    long long v26 = v33;
                    *(_WORD *)(v30 + 16) = v34;
                    *(_OWORD *)unint64_t v30 = v26;
                    *(void *)(v30 + 32) = 0;
                    *(void *)(v30 + 40) = 0;
                    *(void *)(v30 + 24) = 0;
                    *(_OWORD *)(v30 + 24) = *(_OWORD *)__p;
                    *(void *)(v30 + 40) = v36;
                    *(void *)(a3 + 8) = v30 + 48;
                  }
                  else
                  {
                    unsigned int v31 = sub_2904CC((void **)a3, (uint64_t)&v33);
                    __int32 v32 = __p[0];
                    *(void *)(a3 + 8) = v31;
                    if (v32)
                    {
                      __p[1] = v32;
                      operator delete(v32);
                    }
                  }
                  goto LABEL_20;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
}

void sub_28E4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    sub_28D1AC(v13);
    _Unwind_Resume(a1);
  }
  sub_28D1AC(v13);
  _Unwind_Resume(a1);
}

void sub_28E4E4(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t v4 = a3;
  int v5 = *(_DWORD *)(a2 + 8);
  switch(v5)
  {
    case 1:
      a3 = *(void *)a2;
      break;
    case 0:
      unint64_t v7 = *(void *)a2;
      uint64_t v8 = *a1;
      if (*a1) {
        BOOL v9 = v7 == -1;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9)
      {
        a3 = 0;
        uint64_t v6 = 0xFFFFFFFFLL;
      }
      else
      {
        uint64_t v10 = nullsub_1(v7);
        unint64_t v11 = sub_2ABB48(v8, 16, v10);
        a3 = HIDWORD(v11);
        if (HIDWORD(v11)) {
          BOOL v13 = v11 == -1;
        }
        else {
          BOOL v13 = 1;
        }
        int v14 = !v13;
        BOOL v15 = v12 == 0;
        BOOL v16 = (v14 & v15) == 0;
        if ((v14 & v15) == 0) {
          a3 = 0;
        }
        uint64_t v6 = 0xFFFFFFFFLL;
        if (!v16) {
          uint64_t v6 = v11;
        }
      }
      goto LABEL_23;
    case -1:
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)(a3 + 64) = 0;
      *(void *)(a3 + 72) = -1;
      *(_DWORD *)(a3 + 80) = 0x7FFFFFFF;
      *(_OWORD *)(a3 + 100) = 0u;
      *(_OWORD *)(a3 + 116) = 0u;
      *(_OWORD *)(a3 + 132) = 0u;
      *(_OWORD *)(a3 + 148) = 0u;
      *(_OWORD *)(a3 + 164) = 0u;
      *(_OWORD *)(a3 + 180) = 0u;
      *(_OWORD *)(a3 + 196) = 0u;
      *(_OWORD *)(a3 + 212) = 0u;
      *(_OWORD *)(a3 + 228) = 0u;
      *(_OWORD *)(a3 + 244) = 0u;
      *(_OWORD *)(a3 + 352) = 0u;
      *(_OWORD *)(a3 + 84) = 0u;
      *(_OWORD *)(a3 + 260) = 0u;
      *(_OWORD *)(a3 + 276) = 0u;
      *(_OWORD *)(a3 + 292) = 0u;
      *(_OWORD *)(a3 + 308) = 0u;
      *(_OWORD *)(a3 + 324) = 0u;
      *(_OWORD *)(a3 + 340) = 0u;
      return;
  }
  uint64_t v6 = HIDWORD(a3);
  a3 = a3;
LABEL_23:

  sub_28E618((uint64_t)a1, a3 | (v6 << 32), v4);
}

void sub_28E618(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!a2) {
    goto LABEL_21;
  }
  unint64_t v4 = HIDWORD(a2);
  if (HIDWORD(a2) == 0xFFFFFFFF) {
    goto LABEL_21;
  }
  int v5 = sub_28DCDC(a1 + 16, a2, 1);
  if (!v5) {
    goto LABEL_21;
  }
  uint64_t v6 = &v5[-*(int *)v5];
  if (*(unsigned __int16 *)v6 < 5u) {
    goto LABEL_21;
  }
  uint64_t v7 = *((unsigned __int16 *)v6 + 2);
  if (!v7) {
    goto LABEL_21;
  }
  uint64_t v8 = (uint64_t)&v5[4 * v4 + v7 + *(unsigned int *)&v5[v7]];
  BOOL v9 = (int *)(v8 + 4 + *(unsigned int *)(v8 + 4));
  uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
  unsigned int v11 = *v10;
  if (v11 < 0xD || !v10[6] || !v10[4]) {
    goto LABEL_21;
  }
  BOOL v12 = v11 < 0x13 || v10[3] == 0;
  if (v12 || (uint64_t v13 = v10[9]) == 0 || !*(int *)((char *)v9 + v13 + *(unsigned int *)((char *)v9 + v13)))
  {
LABEL_21:
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = -1;
    *(_DWORD *)(a3 + 80) = 0x7FFFFFFF;
    *(_OWORD *)(a3 + 100) = 0u;
    *(_OWORD *)(a3 + 116) = 0u;
    *(_OWORD *)(a3 + 132) = 0u;
    *(_OWORD *)(a3 + 148) = 0u;
    *(_OWORD *)(a3 + 164) = 0u;
    *(_OWORD *)(a3 + 180) = 0u;
    *(_OWORD *)(a3 + 196) = 0u;
    *(_OWORD *)(a3 + 212) = 0u;
    *(_OWORD *)(a3 + 228) = 0u;
    *(_OWORD *)(a3 + 244) = 0u;
    *(_OWORD *)(a3 + 352) = 0u;
    *(_OWORD *)(a3 + 84) = 0u;
    uint64_t v18 = (_OWORD *)(a3 + 84);
    v18[11] = 0u;
    v18[12] = 0u;
    v18[13] = 0u;
    v18[14] = 0u;
    v18[15] = 0u;
    v18[16] = 0u;
    return;
  }
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = -1;
  *(_DWORD *)(a3 + 80) = 0x7FFFFFFF;
  *(_OWORD *)(a3 + 84) = 0u;
  *(_OWORD *)(a3 + 100) = 0u;
  *(_OWORD *)(a3 + 116) = 0u;
  *(_OWORD *)(a3 + 132) = 0u;
  *(_OWORD *)(a3 + 148) = 0u;
  *(_OWORD *)(a3 + 164) = 0u;
  *(_OWORD *)(a3 + 180) = 0u;
  *(_OWORD *)(a3 + 196) = 0u;
  *(_OWORD *)(a3 + 212) = 0u;
  *(_OWORD *)(a3 + 228) = 0u;
  *(_OWORD *)(a3 + 244) = 0u;
  *(_OWORD *)(a3 + 260) = 0u;
  *(_OWORD *)(a3 + 276) = 0u;
  *(_OWORD *)(a3 + 292) = 0u;
  *(_OWORD *)(a3 + 308) = 0u;
  *(_OWORD *)(a3 + 324) = 0u;
  *(_OWORD *)(a3 + 340) = 0u;
  *(void *)(a3 + 353) = 0;
  uint64_t v14 = (uint64_t)v9 + *(unsigned __int16 *)((char *)v9 - *v9 + 6);
  uint64_t v15 = *(unsigned int *)v14;
  LODWORD(v14) = *(_DWORD *)(v14 + 4);
  if (v14 >= 0xFFFFFFFE) {
    uint64_t v14 = 4294967294;
  }
  else {
    uint64_t v14 = v14;
  }
  *(void *)(a3 + 72) = v15 | (v14 << 32);
  *(_DWORD *)(a3 + 80) = 0x7FFFFFFF;
  BOOL v16 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v16 < 0x11u)
  {
    LODWORD(v17) = 0;
  }
  else
  {
    uint64_t v17 = v16[8];
    if (v17) {
      LODWORD(v17) = *(int *)((char *)v9 + v17);
    }
  }
  *(_DWORD *)(a3 + 84) = v17;
  uint64_t v19 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v19 < 0x13u
    || (uint64_t v20 = v19[9]) == 0
    || (uint64_t v21 = (int *)((char *)v9 + v20 + *(unsigned int *)((char *)v9 + v20)), !*v21)
    || (uint64_t v22 = (_DWORD *)((char *)v21 + v21[1] + 4),
        uint64_t v23 = (unsigned __int16 *)((char *)v22 - *v22),
        *v23 < 7u)
    || (uint64_t v24 = v23[3]) == 0)
  {
    BYTE7(v86[0]) = 0;
    LOBYTE(__dst[0]) = 0;
    goto LABEL_33;
  }
  uint64_t v25 = (unsigned int *)((char *)v22 + v24);
  uint64_t v26 = *v25;
  uint64_t v27 = (char *)v25 + v26 + 4;
  size_t v28 = *(unsigned int *)((char *)v25 + v26);
  if (v28 >= 0x17)
  {
    __src = (char *)v25 + v26 + 4;
    uint64_t v76 = (v28 & 0xFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v76 = v28 | 7;
    }
    uint64_t v77 = v76 + 1;
    unint64_t v29 = operator new(v76 + 1);
    __dst[1] = (void *)v28;
    *(void *)&v86[0] = v77 | 0x8000000000000000;
    __dst[0] = v29;
    uint64_t v27 = __src;
    goto LABEL_95;
  }
  BYTE7(v86[0]) = *(unsigned int *)((char *)v25 + v26);
  unint64_t v29 = __dst;
  if (v28) {
LABEL_95:
  }
    memcpy(v29, v27, v28);
  *((unsigned char *)v29 + v28) = 0;
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
LABEL_33:
  *(_OWORD *)a3 = *(_OWORD *)__dst;
  *(void *)(a3 + 16) = *(void *)&v86[0];
  unint64_t v30 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v30 >= 0x17u)
  {
    uint64_t v31 = v30[11];
    if (v31)
    {
      __int32 v32 = (int *)((char *)v9 + v31 + *(unsigned int *)((char *)v9 + v31));
      if (*v32)
      {
        long long v33 = (_DWORD *)((char *)v32 + v32[1] + 4);
        __int16 v34 = (unsigned __int16 *)((char *)v33 - *v33);
        if (*v34 >= 5u)
        {
          uint64_t v35 = v34[2];
          if (v35)
          {
            uint64_t v36 = (unsigned int *)((char *)v33 + v35);
            uint64_t v37 = *v36;
            char v38 = (char *)v36 + v37 + 4;
            size_t v39 = *(unsigned int *)((char *)v36 + v37);
            if (v39 >= 0x17)
            {
              __srca = (char *)v36 + v37 + 4;
              uint64_t v78 = (v39 & 0xFFFFFFF8) + 8;
              if ((v39 | 7) != 0x17) {
                uint64_t v78 = v39 | 7;
              }
              uint64_t v79 = v78 + 1;
              uint64_t v40 = operator new(v78 + 1);
              __dst[1] = (void *)v39;
              *(void *)&v86[0] = v79 | 0x8000000000000000;
              __dst[0] = v40;
              char v38 = __srca;
            }
            else
            {
              BYTE7(v86[0]) = *(unsigned int *)((char *)v36 + v37);
              uint64_t v40 = __dst;
              if (!v39)
              {
LABEL_102:
                *((unsigned char *)v40 + v39) = 0;
                uint64_t v41 = a3 + 24;
                if ((*(char *)(a3 + 47) & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_42;
              }
            }
            memcpy(v40, v38, v39);
            goto LABEL_102;
          }
        }
      }
    }
  }
  BYTE7(v86[0]) = 0;
  LOBYTE(__dst[0]) = 0;
  uint64_t v41 = a3 + 24;
  if (*(char *)(a3 + 47) < 0) {
LABEL_42:
  }
    operator delete(*(void **)v41);
LABEL_43:
  *(_OWORD *)uint64_t v41 = *(_OWORD *)__dst;
  *(void *)(v41 + 16) = *(void *)&v86[0];
  uint64_t v42 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v42 < 0x19u
    || (uint64_t v43 = v42[12]) == 0
    || (int v44 = (int *)((char *)v9 + v43 + *(unsigned int *)((char *)v9 + v43)), !*v44)
    || (uint64_t v45 = (_DWORD *)((char *)v44 + v44[1] + 4),
        char v46 = (unsigned __int16 *)((char *)v45 - *v45),
        *v46 < 5u)
    || (uint64_t v47 = v46[2]) == 0)
  {
    BYTE7(v86[0]) = 0;
    LOBYTE(__dst[0]) = 0;
    uint64_t v53 = a3 + 48;
    if ((*(char *)(a3 + 71) & 0x80000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  uint64_t v48 = (unsigned int *)((char *)v45 + v47);
  uint64_t v49 = *v48;
  long long v50 = (char *)v48 + v49 + 4;
  size_t v51 = *(unsigned int *)((char *)v48 + v49);
  if (v51 >= 0x17)
  {
    __srcb = (char *)v48 + v49 + 4;
    uint64_t v80 = (v51 & 0xFFFFFFF8) + 8;
    if ((v51 | 7) != 0x17) {
      uint64_t v80 = v51 | 7;
    }
    uint64_t v81 = v80 + 1;
    uint64_t v52 = operator new(v80 + 1);
    __dst[1] = (void *)v51;
    *(void *)&v86[0] = v81 | 0x8000000000000000;
    __dst[0] = v52;
    long long v50 = __srcb;
    goto LABEL_107;
  }
  BYTE7(v86[0]) = *(unsigned int *)((char *)v48 + v49);
  uint64_t v52 = __dst;
  if (v51) {
LABEL_107:
  }
    memcpy(v52, v50, v51);
  *((unsigned char *)v52 + v51) = 0;
  uint64_t v53 = a3 + 48;
  if (*(char *)(a3 + 71) < 0) {
LABEL_52:
  }
    operator delete(*(void **)v53);
LABEL_53:
  *(_OWORD *)uint64_t v53 = *(_OWORD *)__dst;
  *(void *)(v53 + 16) = *(void *)&v86[0];
  unsigned int v54 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v54 >= 5u && (uint64_t v55 = v54[2]) != 0) {
    uint64_t v56 = *(void *)((char *)v9 + v55);
  }
  else {
    uint64_t v56 = 0;
  }
  *(void *)(a3 + 88) = nullsub_1(v56);
  unint64_t v57 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v57 < 0x23u) {
    goto LABEL_67;
  }
  uint64_t v58 = v57[17];
  if (!v58) {
    goto LABEL_67;
  }
  uint64_t v59 = (int *)((char *)v9 + v58 + *(unsigned int *)((char *)v9 + v58));
  if (*v59
    && (int v60 = (_DWORD *)((char *)v59 + v59[1] + 4),
        uint64_t v61 = (unsigned __int16 *)((char *)v60 - *v60),
        *v61 >= 5u)
    && (uint64_t v62 = v61[2]) != 0
    && (uint64_t v63 = (int *)((char *)v60 + v62 + *(unsigned int *)((char *)v60 + v62)),
        uint64_t v64 = (unsigned __int16 *)((char *)v63 - *v63),
        *v64 >= 7u)
    && v64[3]
    && (uint64_t v65 = v64[2]) != 0
    && *(int *)((char *)v63 + v65 + *(unsigned int *)((char *)v63 + v65)))
  {
    sub_891C8(v60, (uint64_t)__dst);
  }
  else
  {
LABEL_67:
    uint64_t v89 = 0;
    long long v87 = 0u;
    *(_OWORD *)long long __p = 0u;
    *(_OWORD *)long long __dst = 0u;
    memset(v86, 0, sizeof(v86));
  }
  uint64_t v66 = (void **)(a3 + 96);
  uint64_t v67 = *(void *)(a3 + 96);
  if (v67)
  {
    uint64_t v68 = *(void *)(a3 + 104);
    uint64_t v69 = *(void **)(a3 + 96);
    if (v68 != v67)
    {
      do
      {
        if (*(char *)(v68 - 1) < 0) {
          operator delete(*(void **)(v68 - 24));
        }
        v68 -= 24;
      }
      while (v68 != v67);
      uint64_t v69 = *v66;
    }
    *(void *)(a3 + 104) = v67;
    operator delete(v69);
    *uint64_t v66 = 0;
    *(void *)(a3 + 104) = 0;
    *(void *)(a3 + 112) = 0;
  }
  *(_OWORD *)(a3 + 96) = *(_OWORD *)__dst;
  *(void *)(a3 + 112) = *(void *)&v86[0];
  __dst[1] = 0;
  *(void *)&v86[0] = 0;
  __dst[0] = 0;
  sub_28F878(a3 + 120, (_OWORD *)((char *)v86 + 8));
  *(unsigned char *)(a3 + 360) = BYTE8(v87);
  v70 = (void **)__p[0];
  if (__p[0])
  {
    BOOL v71 = (void **)__p[1];
    unint64_t v72 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v71 - 1) < 0) {
          operator delete(*(v71 - 3));
        }
        v71 -= 3;
      }
      while (v71 != v70);
      unint64_t v72 = __p[0];
    }
    __p[1] = v70;
    operator delete(v72);
  }
  sub_8AC4C((uint64_t)v86 + 8);
  uint8x8_t v73 = (void **)__dst[0];
  if (__dst[0])
  {
    uint64_t v74 = (void **)__dst[1];
    v75 = __dst[0];
    if (__dst[1] != __dst[0])
    {
      do
      {
        if (*((char *)v74 - 1) < 0) {
          operator delete(*(v74 - 3));
        }
        v74 -= 3;
      }
      while (v74 != v73);
      v75 = __dst[0];
    }
    __dst[1] = v73;
    operator delete(v75);
  }
}

void sub_28ED34(_Unwind_Exception *a1)
{
  sub_28ED98(v1);
  _Unwind_Resume(a1);
}

void sub_28ED48(_Unwind_Exception *a1)
{
  sub_28ED98(v1);
  _Unwind_Resume(a1);
}

void sub_28ED5C(_Unwind_Exception *a1)
{
  sub_28ED98(v1);
  _Unwind_Resume(a1);
}

void sub_28ED70(_Unwind_Exception *a1)
{
  sub_28ED98(v1);
  _Unwind_Resume(a1);
}

void sub_28ED84(_Unwind_Exception *a1)
{
  sub_28ED98(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_28ED98(uint64_t a1)
{
  sub_8AC4C(a1 + 120);
  uint64_t v2 = *(void *)(a1 + 96);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 104);
    unint64_t v4 = *(void **)(a1 + 96);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      unint64_t v4 = *(void **)(a1 + 96);
    }
    *(void *)(a1 + 104) = v2;
    operator delete(v4);
  }
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      goto LABEL_11;
    }
LABEL_14:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_15;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_14;
  }
LABEL_11:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
LABEL_15:
  operator delete(*(void **)a1);
  return a1;
}

char *sub_28EE68@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X8>)
{
  int v3 = *((_DWORD *)a2 + 2);
  switch(v3)
  {
    case -1:
      return 0;
    case 0:
      uint64_t v22 = *a2;
      uint64_t v23 = *a1;
      if (*a1) {
        BOOL v24 = v22 == -1;
      }
      else {
        BOOL v24 = 1;
      }
      if (v24) {
        return 0;
      }
      uint64_t v25 = nullsub_1(v22);
      unint64_t v26 = sub_2ABB48(v23, 16, v25);
      if (HIDWORD(v26)) {
        BOOL v28 = v26 == 0xFFFFFFFFLL;
      }
      else {
        BOOL v28 = 1;
      }
      int v29 = !v28;
      BOOL v30 = v27 == 0;
      if ((v29 & v30) != 0) {
        unint64_t v6 = HIDWORD(v26);
      }
      else {
        unint64_t v6 = 0;
      }
      if ((v29 & v30) != 0) {
        uint64_t v5 = v26;
      }
      else {
        uint64_t v5 = 0xFFFFFFFFLL;
      }
      uint64_t result = 0;
      if (!v6) {
        return result;
      }
LABEL_6:
      if (v5 == 0xFFFFFFFFLL) {
        return result;
      }
      uint64_t result = sub_28DCDC((uint64_t)(a1 + 2), v6, 1);
      if (!result) {
        return result;
      }
      uint64_t v8 = &result[-*(int *)result];
      if (*(unsigned __int16 *)v8 >= 5u)
      {
        uint64_t v9 = *((unsigned __int16 *)v8 + 2);
        if (v9)
        {
          uint64_t v10 = (uint64_t)&result[4 * v5 + v9 + *(unsigned int *)&result[v9]];
          unsigned int v11 = (int *)(v10 + 4 + *(unsigned int *)(v10 + 4));
          BOOL v12 = (unsigned __int16 *)((char *)v11 - *v11);
          unsigned int v13 = *v12;
          if (v13 >= 0xD)
          {
            uint64_t v14 = v12[6];
            if (v12[6])
            {
              if (v12[4])
              {
                if (v13 >= 0x13 && v12[3] != 0)
                {
                  uint64_t v16 = v12[9];
                  if (v16)
                  {
                    if (*(int *)((char *)v11 + v16 + *(unsigned int *)((char *)v11 + v16)))
                    {
                      uint64_t v17 = (unsigned int *)((char *)v11 + v14);
                      uint64_t v18 = *v17;
                      uint64_t v20 = (unsigned int *)((char *)v17 + v18 + 4);
                      uint64_t v19 = *(unsigned int *)((char *)v17 + v18);
                      if (v19)
                      {
                        uint64_t v21 = 4 * v19 - 4;
                        do
                        {
                          sub_893BC((int *)((char *)v20 + *v20), (uint64_t)v33);
                          int v32 = v33[16];
                          if (v35 < 0) {
                            operator delete(__p);
                          }
                          uint64_t result = (char *)(v32 == 2);
                          BOOL v31 = v32 == 2 || v21 == 0;
                          v21 -= 4;
                          ++v20;
                        }
                        while (!v31);
                        return result;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return 0;
    case 1:
      a3 = *a2;
      break;
  }
  uint64_t v5 = HIDWORD(a3);
  LODWORD(v6) = a3;
  uint64_t result = 0;
  if (a3) {
    goto LABEL_6;
  }
  return result;
}

uint64_t *sub_28F040(uint64_t a1, unint64_t a2)
{
  return sub_29146C((uint64_t *)(a1 + 3896), a2) + 1;
}

void sub_28F060(unsigned int *a1@<X0>, void (*a2)(void **__return_ptr, char *)@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_290650(a3, *a1);
  unsigned int v8 = *a1;
  uint64_t v7 = (char *)(a1 + 1);
  uint64_t v6 = v8;
  if (v8)
  {
    uint64_t v9 = 4 * v6;
    uint64_t v10 = *(void *)(a3 + 8);
    do
    {
      a2(v12, &v7[*(unsigned int *)v7]);
      uint64_t v11 = sub_2907F4((char **)a3, v10, (uint64_t)v12);
      if (v13 < 0) {
        operator delete(v12[3]);
      }
      uint64_t v10 = v11 + 48;
      v7 += 4;
      v9 -= 4;
    }
    while (v9);
  }
}

void sub_28F110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_28F14C(v17);
  _Unwind_Resume(a1);
}

void **sub_28F14C(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    int v3 = (void **)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 6;
      }
      while (v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_28F1C0(void **a1)
{
  uint64_t v2 = (void **)a1[3];
  if (v2)
  {
    int v3 = (void **)a1[4];
    unint64_t v4 = a1[3];
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 6;
      }
      while (v3 != v2);
      unint64_t v4 = a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  uint64_t v5 = (char *)*a1;
  if (*a1)
  {
    uint64_t v6 = (char *)a1[1];
    uint64_t v7 = *a1;
    if (v6 != v5)
    {
      do
      {
        unsigned int v8 = (void *)*((void *)v6 - 3);
        if (v8)
        {
          *((void *)v6 - 2) = v8;
          operator delete(v8);
        }
        v6 -= 48;
      }
      while (v6 != v5);
      uint64_t v7 = *a1;
    }
    a1[1] = v5;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_28F27C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X8>)
{
  int v3 = *((_DWORD *)a2 + 2);
  if (v3 == -1) {
    return -1;
  }
  if (v3)
  {
    if (v3 == 1) {
      a3 = *a2;
    }
    uint64_t v5 = HIDWORD(a3);
    LODWORD(v6) = a3;
    if (!a3) {
      return -1;
    }
  }
  else
  {
    uint64_t v16 = *a2;
    uint64_t v17 = *a1;
    if (*a1) {
      BOOL v18 = v16 == -1;
    }
    else {
      BOOL v18 = 1;
    }
    if (v18) {
      return -1;
    }
    uint64_t v19 = nullsub_1(v16);
    unint64_t v20 = sub_2ABB48(v17, 16, v19);
    BOOL v22 = !HIDWORD(v20) || v20 == 0xFFFFFFFFLL;
    BOOL v23 = !v22;
    BOOL v24 = v21 == 0;
    unint64_t v6 = v23 && v24 ? HIDWORD(v20) : 0;
    uint64_t v5 = v23 && v24 ? v20 : 0xFFFFFFFFLL;
    if (!v6) {
      return -1;
    }
  }
  if (v5 == 0xFFFFFFFFLL) {
    return -1;
  }
  uint64_t v7 = sub_28DCDC((uint64_t)(a1 + 2), v6, 1);
  if (!v7) {
    return -1;
  }
  unsigned int v8 = &v7[-*(int *)v7];
  if (*(unsigned __int16 *)v8 < 5u) {
    return -1;
  }
  uint64_t v9 = *((unsigned __int16 *)v8 + 2);
  if (!v9) {
    return -1;
  }
  uint64_t v10 = (uint64_t)&v7[4 * v5 + v9 + *(unsigned int *)&v7[v9]];
  uint64_t v11 = (int *)(v10 + 4 + *(unsigned int *)(v10 + 4));
  BOOL v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 0x25u && (uint64_t v13 = v12[18]) != 0)
  {
    uint64_t v14 = *(void *)((char *)v11 + v13);
  }
  else
  {
    uint64_t v14 = 0;
  }
  return nullsub_1(v14);
}

uint64_t sub_28F3D0@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v5 = *v4;
  if (v5 < 7)
  {
    unint64_t v6 = 0;
    uint64_t v7 = (_WORD *)(&loc_1120530 + 1);
    unsigned __int16 v8 = *(_WORD *)((char *)&loc_1120534 + 3);
    if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 9u) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v6 = (int *)v4[3];
    if (v4[3]) {
      unint64_t v6 = (int *)((char *)v6 + (void)a1 + *(unsigned int *)((char *)v6 + (void)a1));
    }
    uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
    unsigned __int16 v8 = v7[3];
    if (*v7 < 9u)
    {
LABEL_10:
      uint64_t v10 = 0;
      uint64_t v11 = (unsigned int *)((char *)v6 + v8);
      if (v5 < 9) {
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  uint64_t v9 = v7[4];
  if (!v9) {
    goto LABEL_10;
  }
  uint64_t v10 = *(unsigned int *)((char *)v6 + v9);
  uint64_t v11 = (unsigned int *)((char *)v6 + v8);
  if (v5 < 9) {
    goto LABEL_13;
  }
LABEL_11:
  uint64_t v12 = v4[4];
  if (v12)
  {
    int v13 = *((unsigned __int8 *)a1 + v12);
    goto LABEL_14;
  }
LABEL_13:
  int v13 = 0;
LABEL_14:
  uint64_t v50 = v11[1];
  uint64_t v49 = *v11;
  BOOL v48 = sub_882E4(v13);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v52 = 0;
  uint64_t v16 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v16 >= 5u)
  {
    uint64_t v17 = v16[2];
    if (v17)
    {
      BOOL v18 = (int *)((char *)a1 + v17 + *(unsigned int *)((char *)a1 + v17));
      uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v19 >= 9u)
      {
        uint64_t v20 = v19[4];
        if (v20)
        {
          char v21 = (unsigned int *)((char *)v18 + v20);
          uint64_t v22 = *v21;
          BOOL v24 = (unsigned __int8 *)v21 + v22 + 4;
          uint64_t v23 = *(unsigned int *)((char *)v21 + v22);
          if (v23)
          {
            uint64_t v25 = 0;
            uint64_t v14 = 0;
            unint64_t v26 = 0;
            size_t v51 = &v24[v23];
            uint64_t v47 = v10;
            while (1)
            {
              while (1)
              {
                char v27 = sub_882F0(*v24);
                char v28 = v27;
                if (v26 >= v14) {
                  break;
                }
                *v26++ = v27;
                uint64_t v15 = (uint64_t)v26;
                if (++v24 == v51) {
                  goto LABEL_56;
                }
              }
              unint64_t v29 = v26 - v25;
              uint64_t v30 = v26 - v25 + 1;
              if (v30 < 0) {
                sub_2E00();
              }
              if (2 * (v14 - v25) > (unint64_t)v30) {
                uint64_t v30 = 2 * (v14 - v25);
              }
              if ((unint64_t)(v14 - v25) >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v31 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v31 = v30;
              }
              if (v31)
              {
                int v32 = (char *)operator new(v31);
                long long v33 = &v32[v29];
                v32[v29] = v28;
                uint64_t v15 = (uint64_t)&v32[v29 + 1];
                if (v26 != v25) {
                  goto LABEL_30;
                }
              }
              else
              {
                int v32 = 0;
                long long v33 = (char *)(v26 - v25);
                *(unsigned char *)unint64_t v29 = v28;
                uint64_t v15 = v29 + 1;
                if (v26 != v25)
                {
LABEL_30:
                  if (v29 < 8 || v32 > &v32[v26 - v25 - 1] || v25 > v26 - 1 || (unint64_t)(v25 - v32) < 0x20)
                  {
                    __int16 v34 = v26;
                  }
                  else if (v29 >= 0x20)
                  {
                    unint64_t v37 = v29 & 0xFFFFFFFFFFFFFFE0;
                    char v38 = &v32[v29 - 16];
                    size_t v39 = (long long *)(v26 - 16);
                    unint64_t v40 = v29 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      long long v41 = *v39;
                      *((_OWORD *)v38 - 1) = *(v39 - 1);
                      *(_OWORD *)char v38 = v41;
                      v38 -= 32;
                      v39 -= 2;
                      v40 -= 32;
                    }
                    while (v40);
                    if (v29 == v37) {
                      goto LABEL_34;
                    }
                    if ((v29 & 0x18) != 0) {
                      goto LABEL_50;
                    }
                    v33 -= v37;
                    __int16 v34 = &v26[-v37];
                  }
                  else
                  {
                    unint64_t v37 = 0;
LABEL_50:
                    __int16 v34 = &v26[-(v29 & 0xFFFFFFFFFFFFFFF8)];
                    v33 -= v29 & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v42 = &v32[&v26[-v37] - v25 - 8];
                    uint64_t v43 = (uint64_t *)&v26[-v37 - 8];
                    unint64_t v44 = v37 - (v29 & 0xFFFFFFFFFFFFFFF8);
                    do
                    {
                      uint64_t v45 = *v43--;
                      *(void *)uint64_t v42 = v45;
                      v42 -= 8;
                      v44 += 8;
                    }
                    while (v44);
                    if (v29 == (v29 & 0xFFFFFFFFFFFFFFF8))
                    {
LABEL_34:
                      long long v33 = v32;
                      uint64_t v14 = &v32[v31];
                      uint64_t v52 = v32;
                      if (!v25) {
                        goto LABEL_39;
                      }
LABEL_38:
                      operator delete(v25);
                      goto LABEL_39;
                    }
                  }
                  char v35 = v33 - 1;
                  do
                  {
                    char v36 = *--v34;
                    *v35-- = v36;
                  }
                  while (v34 != v25);
                  goto LABEL_34;
                }
              }
              uint64_t v14 = &v32[v31];
              uint64_t v52 = v33;
              if (v25) {
                goto LABEL_38;
              }
LABEL_39:
              uint64_t v25 = v33;
              uint64_t v10 = v47;
              ++v24;
              unint64_t v26 = (char *)v15;
              if (v24 == v51) {
                goto LABEL_56;
              }
            }
          }
        }
      }
    }
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
LABEL_56:
  uint64_t result = sub_88284(a1);
  *(void *)a2 = v49 | (v50 << 32);
  *(void *)(a2 + 8) = v10;
  *(unsigned char *)(a2 + 16) = v48;
  *(unsigned char *)(a2 + 17) = result;
  *(void *)(a2 + 24) = v52;
  *(void *)(a2 + 32) = v15;
  *(void *)(a2 + 40) = v14;
  return result;
}

void sub_28F770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_28F794(uint64_t a1, void **a2)
{
  unint64_t v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      unint64_t v6 = (void **)*(v4 - 7);
      if (v6)
      {
        uint64_t v7 = (void **)*(v4 - 6);
        unsigned __int16 v8 = *(v4 - 7);
        if (v7 != v6)
        {
          do
          {
            if (*((char *)v7 - 1) < 0) {
              operator delete(*(v7 - 3));
            }
            v7 -= 6;
          }
          while (v7 != v6);
          unsigned __int16 v8 = *(v4 - 7);
        }
        *(v4 - 6) = v6;
        operator delete(v8);
      }
      uint64_t v9 = v4 - 10;
      uint64_t v10 = (char *)*(v4 - 10);
      if (v10)
      {
        uint64_t v11 = (char *)*(v4 - 9);
        unsigned int v5 = *(v4 - 10);
        if (v11 != v10)
        {
          do
          {
            uint64_t v12 = (void *)*((void *)v11 - 3);
            if (v12)
            {
              *((void *)v11 - 2) = v12;
              operator delete(v12);
            }
            v11 -= 48;
          }
          while (v11 != v10);
          unsigned int v5 = *v9;
        }
        *(v4 - 9) = v10;
        operator delete(v5);
      }
      v4 -= 10;
    }
    while (v9 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_28F878(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  unsigned int v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)unsigned int v5 = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  uint64_t v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*v7);
  }
  long long v8 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)uint64_t v7 = v8;
  *((unsigned char *)a2 + 71) = 0;
  *((unsigned char *)a2 + 48) = 0;
  uint64_t v9 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v9);
  }
  long long v10 = *(long long *)((char *)a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(_OWORD *)uint64_t v9 = v10;
  *((unsigned char *)a2 + 95) = 0;
  *((unsigned char *)a2 + 72) = 0;
  uint64_t v11 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v11);
  }
  long long v12 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)uint64_t v11 = v12;
  *((unsigned char *)a2 + 119) = 0;
  *((unsigned char *)a2 + 96) = 0;
  int v13 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*v13);
  }
  long long v14 = *(long long *)((char *)a2 + 120);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  *(_OWORD *)int v13 = v14;
  *((unsigned char *)a2 + 143) = 0;
  *((unsigned char *)a2 + 120) = 0;
  uint64_t v15 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*v15);
  }
  long long v16 = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(_OWORD *)uint64_t v15 = v16;
  *((unsigned char *)a2 + 167) = 0;
  *((unsigned char *)a2 + 144) = 0;
  uint64_t v17 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*v17);
  }
  long long v18 = *(long long *)((char *)a2 + 168);
  *(void *)(a1 + 184) = *((void *)a2 + 23);
  *(_OWORD *)uint64_t v17 = v18;
  *((unsigned char *)a2 + 191) = 0;
  *((unsigned char *)a2 + 168) = 0;
  uint64_t v19 = (void **)(a1 + 192);
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*v19);
  }
  long long v20 = a2[12];
  *(void *)(a1 + 208) = *((void *)a2 + 26);
  *(_OWORD *)uint64_t v19 = v20;
  *((unsigned char *)a2 + 215) = 0;
  *((unsigned char *)a2 + 192) = 0;
  char v21 = (void **)(a1 + 216);
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*v21);
  }
  long long v22 = *(long long *)((char *)a2 + 216);
  *(void *)(a1 + 232) = *((void *)a2 + 29);
  *(_OWORD *)char v21 = v22;
  *((unsigned char *)a2 + 239) = 0;
  *((unsigned char *)a2 + 216) = 0;
  return a1;
}

__n128 sub_28FA7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  sub_28FD54((void *)v4, (long long **)a2);
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0;
  sub_28FF98((unsigned char *)(v4 + 24), *(void *)(a2 + 24), *(void *)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4));
  __n128 result = *(__n128 *)(a2 + 48);
  *(_OWORD *)(v4 + 61) = *(_OWORD *)(a2 + 61);
  *(__n128 *)(v4 + 48) = result;
  *(void *)(a1 + 8) = v4 + 80;
  return result;
}

void sub_28FB00(_Unwind_Exception *exception_object)
{
  if (*v2)
  {
    sub_20A6A64((uint64_t)v2, *v2);
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_28FB30(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    sub_2E00();
  }
  if (0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v22 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x333333333333333) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(80 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long __p = v7;
  v20.i64[0] = (uint64_t)&v7[80 * v3];
  v20.i64[1] = v20.i64[0];
  char v21 = &v7[80 * v6];
  sub_28FD54(v20.i64[0], (long long **)a2);
  uint64_t v8 = v20.i64[0];
  *(void *)(v20.i64[0] + 24) = 0;
  *(void *)(v8 + 32) = 0;
  v8 += 24;
  *(void *)(v8 + 16) = 0;
  sub_28FF98((unsigned char *)v8, *(void *)(a2 + 24), *(void *)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4));
  uint64_t v9 = &v7[80 * v3];
  *((_OWORD *)v9 + 3) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v9 + 61) = *(_OWORD *)(a2 + 61);
  uint64_t v10 = v20.i64[0];
  uint64_t v11 = v20.i64[1] + 80;
  v20.i64[1] += 80;
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v16 = vdupq_n_s64(v12);
  }
  else
  {
    do
    {
      *(void *)(v10 - 80) = 0;
      *(void *)(v10 - 72) = 0;
      v10 -= 80;
      *(void *)(v10 + 16) = 0;
      long long v14 = *(_OWORD *)(v12 - 80);
      v12 -= 80;
      *(_OWORD *)uint64_t v10 = v14;
      *(void *)(v10 + 16) = *(void *)(v12 + 16);
      *(void *)unint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0;
      *(void *)(v10 + 40) = 0;
      *(_OWORD *)(v10 + 24) = *(_OWORD *)(v12 + 24);
      *(void *)(v10 + 40) = *(void *)(v12 + 40);
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0;
      *(void *)(v12 + 40) = 0;
      long long v15 = *(_OWORD *)(v12 + 48);
      *(_OWORD *)(v10 + 61) = *(_OWORD *)(v12 + 61);
      *(_OWORD *)(v10 + 48) = v15;
    }
    while (v12 != v13);
    int64x2_t v16 = *a1;
    uint64_t v11 = v20.i64[1];
  }
  a1->i64[0] = v10;
  a1->i64[1] = v11;
  int64x2_t v20 = v16;
  uint64_t v17 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v21;
  char v21 = v17;
  long long __p = (void *)v16.i64[0];
  sub_2901B8((uint64_t)&__p, v16.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_28FD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*v9)
  {
    sub_20A6A64((uint64_t)v9, *v9);
    sub_290180((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_290180((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *sub_28FD54(void *a1, long long **a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  unint64_t v4 = *a2;
  unsigned int v5 = a2[1];
  int64_t v6 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    if (v7 >= 0x555555555555556) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[48 * v7];
    a1[1] = sub_28FE2C(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_28FE00(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1) {
    sub_20A6AB8((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_28FE2C(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  if (a2 != a3)
  {
    unsigned int v5 = a2;
    int64_t v6 = (void *)(a4 + 24);
    do
    {
      long long v8 = *v5;
      *((_WORD *)v6 - 4) = *((_WORD *)v5 + 8);
      *(_OWORD *)(v6 - 3) = v8;
      v6[1] = 0;
      v6[2] = 0;
      *int64_t v6 = 0;
      uint64_t v10 = (unsigned char *)*((void *)v5 + 3);
      uint64_t v9 = (unsigned char *)*((void *)v5 + 4);
      size_t v11 = v9 - v10;
      if (v9 != v10)
      {
        if ((v11 & 0x8000000000000000) != 0) {
          sub_2E00();
        }
        unint64_t v12 = (char *)operator new(v9 - v10);
        *int64_t v6 = v12;
        v6[1] = v12;
        unint64_t v7 = &v12[v11];
        v6[2] = &v12[v11];
        memcpy(v12, v10, v11);
        v6[1] = v7;
      }
      v6 += 6;
      v5 += 3;
    }
    while (v5 != a3);
    return v6 - 3;
  }
  return (void *)a4;
}

void sub_28FF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  size_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_28FF34((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_28FF34(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      unsigned int v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(void *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 48;
    }
  }
  return a1;
}

unsigned char *sub_28FF98(unsigned char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unsigned int v5 = result;
    if (a4 >= 0x555555555555556) {
      sub_2E00();
    }
    __n128 result = operator new(48 * a4);
    long long v8 = result;
    *unsigned int v5 = result;
    v5[1] = result;
    v5[2] = &result[48 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = &v8[v9];
        uint64_t v11 = a2 + v9;
        *(_OWORD *)uint64_t v10 = *(_OWORD *)(a2 + v9);
        *((void *)v10 + 2) = *(void *)(a2 + v9 + 16);
        __n128 result = &v8[v9 + 24];
        unint64_t v12 = (void **)(a2 + v9 + 24);
        if (*(char *)(a2 + v9 + 47) < 0)
        {
          __n128 result = sub_4200(result, *v12, *(void *)(v11 + 32));
        }
        else
        {
          *(_OWORD *)__n128 result = *(_OWORD *)v12;
          *(void *)&v8[v9 + 40] = *(void *)(a2 + v9 + 40);
        }
        v9 += 48;
      }
      while (v11 + 48 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_290098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_2900AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 48)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_2900E8(&a9);
  _Unwind_Resume(a1);
}

void ***sub_2900E8(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (void **)**result;
    if (v3)
    {
      uint64_t v4 = (void **)v2[1];
      unsigned int v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 6;
        }
        while (v4 != v3);
        unsigned int v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_290180(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2901B8(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    int64_t v6 = (void **)(i - 80);
    *(void *)(a1 + 16) = i - 80;
    uint64_t v7 = *(void *)(i - 56);
    if (v7)
    {
      uint64_t v8 = *(void *)(i - 48);
      uint64_t v9 = *(void **)(i - 56);
      if (v8 != v7)
      {
        do
        {
          if (*(char *)(v8 - 1) < 0) {
            operator delete(*(void **)(v8 - 24));
          }
          v8 -= 48;
        }
        while (v8 != v7);
        uint64_t v9 = *(void **)(i - 56);
      }
      *(void *)(i - 48) = v7;
      operator delete(v9);
    }
    uint64_t v10 = (char *)*v6;
    if (*v6)
    {
      uint64_t v11 = *(char **)(i - 72);
      unsigned int v5 = *v6;
      if (v11 != v10)
      {
        do
        {
          unint64_t v12 = (void *)*((void *)v11 - 3);
          if (v12)
          {
            *((void *)v11 - 2) = v12;
            operator delete(v12);
          }
          v11 -= 48;
        }
        while (v11 != v10);
        unsigned int v5 = *v6;
      }
      *(void *)(i - 72) = v10;
      operator delete(v5);
    }
  }
}

uint64_t sub_2902A0(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      unsigned int v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      uint64_t v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      uint64_t v9 = sub_736EC(0x10u);
      uint64_t v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    uint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    long long v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_2903F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

char *sub_2904CC(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v5 = 0x555555555555555;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x555555555555555) {
    sub_188D718();
  }
  uint64_t v7 = 48 * v5;
  long long v8 = (char *)operator new(48 * v5);
  uint64_t v9 = &v8[48 * v3];
  uint64_t v10 = &v8[v7];
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *((_WORD *)v9 + 8) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v9 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  long long v11 = v9 + 48;
  unint64_t v12 = (char *)*a1;
  uint64_t v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v13) {
      return v11;
    }
    goto LABEL_17;
  }
  do
  {
    long long v14 = *((_OWORD *)v13 - 3);
    *((_WORD *)v9 - 16) = *((_WORD *)v13 - 16);
    *((_OWORD *)v9 - 3) = v14;
    *(_OWORD *)(v9 - 24) = *(_OWORD *)(v13 - 24);
    *((void *)v9 - 1) = *((void *)v13 - 1);
    v9 -= 48;
    *((void *)v13 - 3) = 0;
    *((void *)v13 - 2) = 0;
    *((void *)v13 - 1) = 0;
    v13 -= 48;
  }
  while (v13 != v12);
  std::string v15 = (char *)*a1;
  uint64_t v13 = (char *)a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = v10;
  if (v13 != v15)
  {
    do
    {
      std::string v16 = (void *)*((void *)v13 - 3);
      if (v16)
      {
        *((void *)v13 - 2) = v16;
        operator delete(v16);
      }
      v13 -= 48;
    }
    while (v13 != v15);
    uint64_t v13 = v15;
  }
  if (v13) {
LABEL_17:
  }
    operator delete(v13);
  return v11;
}

void sub_290650(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= a2) {
    return;
  }
  if (a2 >= 0x555555555555556) {
    sub_2E00();
  }
  unint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = 48 * a2;
  long long v6 = (char *)operator new(48 * a2);
  uint64_t v7 = &v6[v5];
  long long v8 = &v6[(char *)v4 - (char *)v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_13;
  }
  uint64_t v9 = &v6[(char *)v4 - (char *)v2];
  do
  {
    long long v10 = *((_OWORD *)v4 - 3);
    *((void *)v9 - 4) = *(v4 - 4);
    *((_OWORD *)v9 - 3) = v10;
    long long v11 = *(_OWORD *)(v4 - 3);
    *((void *)v9 - 1) = *(v4 - 1);
    *(_OWORD *)(v9 - 24) = v11;
    v9 -= 48;
    *(v4 - 2) = 0;
    *(v4 - 1) = 0;
    *(v4 - 3) = 0;
    v4 -= 6;
  }
  while (v4 != v2);
  unint64_t v12 = *(void ***)a1;
  uint64_t v2 = *(void ***)(a1 + 8);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v12)
  {
    do
    {
      if (*((char *)v2 - 1) < 0) {
        operator delete(*(v2 - 3));
      }
      v2 -= 6;
    }
    while (v2 != v12);
    uint64_t v2 = v12;
  }
  if (v2)
  {
LABEL_13:
    operator delete(v2);
  }
}

uint64_t sub_29078C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v5 = v2 - 48;
      *(void *)(a1 + 16) = v2 - 48;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2907F4(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 48;
  uint64_t v8 = (uint64_t)&(*a1)[48 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v5) >> 4) + 1;
    if (v24 > 0x555555555555555) {
      sub_2E00();
    }
    unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v5) >> 4);
    if (2 * v25 > v24) {
      unint64_t v24 = 2 * v25;
    }
    if (v25 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v26 = 0x555555555555555;
    }
    else {
      unint64_t v26 = v24;
    }
    uint64_t v53 = a1 + 2;
    if (v26)
    {
      if (v26 > 0x555555555555555) {
        sub_188D718();
      }
      char v27 = (char *)operator new(48 * v26);
    }
    else
    {
      char v27 = 0;
    }
    uint64_t v49 = (uint64_t)v27;
    uint64_t v50 = &v27[48 * v7];
    uint64_t v51 = (uint64_t)v50;
    uint64_t v52 = &v27[48 * v26];
    sub_290BBC((uint64_t)&v49, (long long *)a3);
    __int16 v34 = v50;
    char v35 = *a1;
    char v36 = v50;
    if (*a1 != (char *)v8)
    {
      unint64_t v37 = v50;
      uint64_t v38 = v8;
      do
      {
        char v36 = v37 - 48;
        long long v39 = *(_OWORD *)(v38 - 48);
        *((void *)v37 - 4) = *(void *)(v38 - 32);
        *((_OWORD *)v37 - 3) = v39;
        long long v40 = *(_OWORD *)(v38 - 24);
        *((void *)v37 - 1) = *(void *)(v38 - 8);
        *(_OWORD *)(v37 - 24) = v40;
        *(void *)(v38 - 16) = 0;
        *(void *)(v38 - 8) = 0;
        *(void *)(v38 - 24) = 0;
        v37 -= 48;
        v38 -= 48;
      }
      while ((char *)v38 != v35);
    }
    uint64_t v50 = v36;
    long long v41 = a1[1];
    uint64_t v42 = v51;
    if (v41 != (char *)v8)
    {
      do
      {
        long long v43 = *(_OWORD *)v8;
        *(void *)(v42 + 16) = *(void *)(v8 + 16);
        *(_OWORD *)uint64_t v42 = v43;
        long long v44 = *(_OWORD *)(v8 + 24);
        *(void *)(v42 + 40) = *(void *)(v8 + 40);
        *(_OWORD *)(v42 + 24) = v44;
        *(void *)(v8 + 32) = 0;
        *(void *)(v8 + 40) = 0;
        *(void *)(v8 + 24) = 0;
        v42 += 48;
        v8 += 48;
      }
      while ((char *)v8 != v41);
      char v36 = v50;
      uint64_t v8 = (uint64_t)a1[1];
    }
    uint64_t v45 = *a1;
    *a1 = v36;
    a1[1] = (char *)v42;
    char v46 = a1[2];
    a1[2] = v52;
    uint64_t v51 = v8;
    uint64_t v52 = v46;
    uint64_t v49 = (uint64_t)v45;
    uint64_t v50 = v45;
    if ((char *)v8 == v45)
    {
      if (!v8) {
        return (uint64_t)v34;
      }
    }
    else
    {
      do
      {
        uint64_t v48 = v8 - 48;
        uint64_t v51 = v8 - 48;
        if (*(char *)(v8 - 1) < 0)
        {
          operator delete(*(void **)(v8 - 24));
          uint64_t v48 = v51;
        }
        uint64_t v8 = v48;
      }
      while ((char *)v48 != v45);
      uint64_t v8 = v49;
      if (!v49) {
        return (uint64_t)v34;
      }
    }
    operator delete((void *)v8);
    return (uint64_t)v34;
  }
  if (v8 == v6)
  {
    long long v31 = *(_OWORD *)a3;
    *(void *)(v8 + 16) = *(void *)(a3 + 16);
    *(_OWORD *)uint64_t v8 = v31;
    int v32 = &v5[48 * v7];
    long long v33 = *(_OWORD *)(a3 + 24);
    *((void *)v32 + 5) = *(void *)(a3 + 40);
    *(_OWORD *)(v32 + 24) = v33;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 24) = 0;
    a1[1] = (char *)(v8 + 48);
  }
  else
  {
    uint64_t v10 = v8 + 48;
    unint64_t v11 = v6 - 48;
    unint64_t v12 = a1[1];
    if (v6 >= 0x30)
    {
      do
      {
        long long v13 = *(_OWORD *)v11;
        *((void *)v12 + 2) = *(void *)(v11 + 16);
        *(_OWORD *)unint64_t v12 = v13;
        long long v14 = *(_OWORD *)(v11 + 24);
        *((void *)v12 + 5) = *(void *)(v11 + 40);
        *(_OWORD *)(v12 + 24) = v14;
        *(void *)(v11 + 32) = 0;
        *(void *)(v11 + 40) = 0;
        *(void *)(v11 + 24) = 0;
        v12 += 48;
        v11 += 48;
      }
      while (v11 < v6);
    }
    a1[1] = v12;
    if (v6 != v10)
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v10) >> 4);
      std::string v17 = &v5[48 * v7 + 48 * v16];
      uint64_t v18 = -48 * v16;
      do
      {
        int64x2_t v20 = &v17[v15];
        uint64_t v21 = v6 + v15;
        long long v22 = *(_OWORD *)&v17[v15 - 48];
        *(void *)(v21 - 32) = *(void *)&v17[v15 - 32];
        *(_OWORD *)(v21 - 48) = v22;
        uint64_t v23 = v6 + v15 - 24;
        if (*(char *)(v6 + v15 - 1) < 0) {
          operator delete(*(void **)v23);
        }
        v15 -= 48;
        long long v19 = *(_OWORD *)(v20 - 24);
        *(void *)(v23 + 16) = *((void *)v20 - 1);
        *(_OWORD *)uint64_t v23 = v19;
        *(v20 - 1) = 0;
        *(v20 - 24) = 0;
      }
      while (v18 != v15);
    }
    long long v28 = *(_OWORD *)a3;
    *(void *)(v8 + 16) = *(void *)(a3 + 16);
    *(_OWORD *)uint64_t v8 = v28;
    unint64_t v29 = (void **)&v5[48 * v7 + 24];
    if (*(char *)(v8 + 47) < 0) {
      operator delete(*v29);
    }
    long long v30 = *(_OWORD *)(a3 + 24);
    *(void *)&v5[48 * v7 + 40] = *(void *)(a3 + 40);
    *(_OWORD *)unint64_t v29 = v30;
    *(unsigned char *)(a3 + 47) = 0;
    *(unsigned char *)(a3 + 24) = 0;
  }
  return v8;
}

void sub_290BA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_29078C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_290BBC(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(long long **)(a1 + 16);
  if (v4 == *(long long **)(a1 + 24))
  {
    uint64_t v5 = *(long long **)a1;
    unint64_t v6 = *(long long **)(a1 + 8);
    if ((unint64_t)v6 <= *(void *)a1)
    {
      unint64_t v16 = 0x5555555555555556 * (v4 - v5);
      if (v4 == v5) {
        unint64_t v16 = 1;
      }
      if (v16 >= 0x555555555555556) {
        sub_188D718();
      }
      unint64_t v17 = v16 >> 2;
      uint64_t v18 = 48 * v16;
      long long v19 = (char *)operator new(48 * v16);
      int64x2_t v20 = &v19[48 * v17];
      uint64_t v21 = &v19[v18];
      if (v4 == v6)
      {
        *(void *)a1 = v19;
        *(void *)(a1 + 8) = v20;
        *(void *)(a1 + 16) = v20;
        *(void *)(a1 + 24) = v21;
      }
      else
      {
        long long v22 = &v20[(char *)v4 - (char *)v6];
        uint64_t v23 = 48 * v17;
        do
        {
          unint64_t v24 = &v19[v23];
          long long v25 = *v6;
          *((void *)v24 + 2) = *((void *)v6 + 2);
          *(_OWORD *)unint64_t v24 = v25;
          long long v26 = *(long long *)((char *)v6 + 24);
          *((void *)v24 + 5) = *((void *)v6 + 5);
          *(_OWORD *)(v24 + 24) = v26;
          *((void *)v6 + 4) = 0;
          *((void *)v6 + 5) = 0;
          *((void *)v6 + 3) = 0;
          v23 += 48;
          v6 += 3;
        }
        while (v24 + 48 != v22);
        uint64_t v5 = *(long long **)a1;
        uint64_t v27 = *(void *)(a1 + 8);
        uint64_t v28 = *(void *)(a1 + 16);
        *(void *)a1 = v19;
        *(void *)(a1 + 8) = v20;
        *(void *)(a1 + 16) = v22;
        *(void *)(a1 + 24) = v21;
        while (v28 != v27)
        {
          if (*(char *)(v28 - 1) < 0) {
            operator delete(*(void **)(v28 - 24));
          }
          v28 -= 48;
        }
      }
      if (v5) {
        operator delete(v5);
      }
      unint64_t v4 = *(long long **)(a1 + 16);
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(void *)a1) >> 4);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      if (v6 == v4)
      {
        unint64_t v29 = &v6[-3 * v9];
      }
      else
      {
        uint64_t v11 = -3 * v9;
        do
        {
          long long v13 = &v6[v11];
          long long v14 = *v6;
          *((void *)v13 + 2) = *((void *)v6 + 2);
          *long long v13 = v14;
          uint64_t v15 = (void **)&v6[v11 + 1] + 1;
          if (SHIBYTE(v6[v11 + 2]) < 0) {
            operator delete(*v15);
          }
          long long v12 = *(long long *)((char *)v6 + 24);
          *((void *)&v6[v11 + 2] + 1) = *((void *)v6 + 5);
          *(_OWORD *)uint64_t v15 = v12;
          *((unsigned char *)v6 + 47) = 0;
          *((unsigned char *)v6 + 24) = 0;
          v6 += 3;
        }
        while (v6 != v4);
        unint64_t v4 = *(long long **)(a1 + 8);
        unint64_t v29 = &v6[3 * v10];
      }
      *(void *)(a1 + 8) = &v4[3 * v10];
      *(void *)(a1 + 16) = v29;
      unint64_t v4 = v29;
    }
  }
  long long v30 = *a2;
  *((void *)v4 + 2) = *((void *)a2 + 2);
  long long *v4 = v30;
  __n128 result = *(__n128 *)((char *)a2 + 24);
  *((void *)v4 + 5) = *((void *)a2 + 5);
  *(long long *)((char *)v4 + 24) = (__int128)result;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)(a1 + 16) += 48;
  return result;
}

char *sub_290DEC(uint64_t a1, unsigned int a2, int a3)
{
  int v20 = a3;
  unsigned int v21 = a2;
  v19[0] = &v20;
  v19[1] = (int *)&v21;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 16) == a2)
    {
      unsigned int v7 = 0;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 40) == a2)
    {
      unsigned int v7 = 1;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 64) == a2)
    {
      unsigned int v7 = 2;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 88) == a2)
    {
      unsigned int v7 = 3;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      uint64_t v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_27;
    }
    unint64_t v11 = *(void *)(a1 + 72);
    if (*(void *)(a1 + 24) < v4) {
      unint64_t v4 = *(void *)(a1 + 24);
    }
    if (*(void *)(a1 + 48) >= v4)
    {
      int v12 = 0;
    }
    else
    {
      unint64_t v4 = *(void *)(a1 + 48);
      int v12 = 1;
    }
    if (v11 >= v4) {
      unint64_t v13 = v4;
    }
    else {
      unint64_t v13 = *(void *)(a1 + 72);
    }
    unint64_t v14 = *(void *)(a1 + 96);
    if (v11 >= v4) {
      int v15 = v12;
    }
    else {
      int v15 = 2;
    }
    unint64_t v16 = (unsigned int *)sub_2AB884(v5, 0, a2, 1);
    unsigned int v17 = 3;
    if (v14 >= v13) {
      unsigned int v17 = v15;
    }
    uint64_t v18 = v6 + 24 * v17;
    *(_DWORD *)uint64_t v18 = v21;
    *(void *)(v18 + 8) = *(void *)(a1 + 3856);
    *(void *)(v18 + 16) = v16;
    if (v16) {
      return (char *)v16 + *v16;
    }
  }
LABEL_27:
  sub_290F70(v19);
  return 0;
}

uint64_t sub_290F70(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      uint64_t v9 = sub_736EC(0);
      uint64_t v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      int v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    unint64_t v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_2910C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

void sub_29119C()
{
  unk_2556D9F = 16641;
  word_2556D88 = 65;
  byte_2556DB7 = 1;
  byte_2556DA1 = 0;
}

uint64_t sub_2911C4(uint64_t a1, void *a2, void *a3)
{
  *(void *)a1 = *a2;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 8) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 16) = 0;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "live_data_visibility_filter");
  long long v6 = (void *)sub_560F4(a3, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "include_public_live_data");
  unsigned int v7 = sub_58070(v6, (uint64_t)__p);
  if (v7)
  {
    BOOL v8 = *((_DWORD *)v7 + 12) == 4;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  BOOL v8 = 0;
  if (SHIBYTE(__p[2]) < 0) {
LABEL_7:
  }
    operator delete(__p[0]);
LABEL_8:
  if (v8) {
    *(_DWORD *)(a1 + 16) |= 1u;
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "include_internal_live_data");
  uint64_t v9 = sub_58070(v6, (uint64_t)__p);
  if (v9)
  {
    BOOL v10 = *((_DWORD *)v9 + 12) == 4;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  BOOL v10 = 0;
  if (SHIBYTE(__p[2]) < 0) {
LABEL_12:
  }
    operator delete(__p[0]);
LABEL_13:
  if (v10) {
    *(_DWORD *)(a1 + 16) |= 2u;
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "include_dev_live_data");
  long long v11 = sub_58070(v6, (uint64_t)__p);
  if (v11)
  {
    BOOL v12 = *((_DWORD *)v11 + 12) == 4;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  BOOL v12 = 0;
  if (SHIBYTE(__p[2]) < 0) {
LABEL_17:
  }
    operator delete(__p[0]);
LABEL_18:
  if (v12) {
    *(_DWORD *)(a1 + 16) |= 4u;
  }
  return a1;
}

void sub_2913FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_14A84(v14);
    _Unwind_Resume(a1);
  }
  sub_14A84(v14);
  _Unwind_Resume(a1);
}

uint64_t *sub_29146C(uint64_t *a1, unint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2556DB8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v23 = a2;
    unint64_t v24 = a1;
    int v22 = __cxa_guard_acquire(&qword_2556DB8);
    a2 = v23;
    a1 = v24;
    if (v22)
    {
      qword_2556DF0 = -1;
      unk_2556DF8 = 0;
      qword_2556E00 = 0;
      unk_2556E08 = 0;
      dword_2556E10 = 0;
      __cxa_guard_release(&qword_2556DB8);
      a2 = v23;
      a1 = v24;
    }
  }
  if (a2 == -1) {
    return &qword_2556DF0;
  }
  uint64_t v2 = *a1;
  if (!*a1) {
    return &qword_2556DF0;
  }
  uint64_t v4 = *(void *)(v2 + 432);
  uint64_t v3 = *(void *)(v2 + 440);
  if (v3 - v4 >= 40)
  {
    if (v3 - v4 != 40)
    {
      unint64_t v5 = (v3 - v4) / 0x28uLL;
      do
      {
        uint64_t v6 = 5 * (v5 >> 2);
        _X14 = v4 + v6 * 8;
        __asm { PRFM            #0, [X14] }
        BOOL v12 = (unint64_t *)(v4 + 40 * (v5 >> 1));
        _X13 = &v12[v6];
        __asm { PRFM            #0, [X13] }
        if (*v12 >= a2) {
          unint64_t v15 = 0;
        }
        else {
          unint64_t v15 = v5 >> 1;
        }
        v4 += 40 * v15;
        v5 -= v5 >> 1;
      }
      while ((uint64_t)v5 > 1);
    }
    v4 += 40 * (*(void *)v4 < a2);
  }
  if (v4 == v3) {
    return &qword_2556DF0;
  }
  if (*(void *)v4 == a2 && *(void *)v4 != -1)
  {
    uint64_t v18 = *(void *)(v4 + 8);
    uint64_t v19 = *(void *)(v4 + 16);
    int v20 = &qword_2556DF0;
    if (v18 != v19)
    {
      while (1)
      {
        uint64_t v21 = *(unsigned __int8 *)(v18 + 23);
        if ((v21 & 0x80u) != 0) {
          uint64_t v21 = *(void *)(v18 + 8);
        }
        if (!v21) {
          break;
        }
        v18 += 40;
        if (v18 == v19)
        {
          if ((*(_DWORD *)(v4 + 32) & a1[2]) != 0) {
            return (uint64_t *)v4;
          }
          return v20;
        }
      }
    }
  }
  return &qword_2556DF0;
}

void sub_29160C()
{
  unk_2556DD7 = 16641;
  word_2556DC0 = 65;
  byte_2556DEF = 1;
  byte_2556DD9 = 0;
}

void *sub_291634(void *a1, uint64_t *a2)
{
  uint64_t v3 = (unsigned int *)sub_2AB884(*a2, 35, 1u, 0);
  if (v4) {
    uint64_t v4 = (uint64_t)v3 + *v3;
  }

  return sub_291688(a1, v4);
}

void *sub_291688(void *result, uint64_t a2)
{
  *__n128 result = a2;
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v4 = (char *)operator new(0x38uLL);
    long long v5 = xmmword_20B9A10;
    strcpy(v4, "Unable to access root quad node in METADATA layer");
    uint64_t v3 = (void *)sub_2F404((uint64_t)exception, (long long *)&v4);
  }
  return result;
}

void sub_291724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *sub_291754@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v2 >= 9u && (uint64_t v3 = v2[4]) != 0) {
    uint64_t v4 = (unsigned int *)(*a1 + v3 + *(unsigned int *)(*a1 + v3));
  }
  else {
    uint64_t v4 = 0;
  }
  return sub_2917AC(v4, (void (*)(void **__return_ptr, char *))sub_291850, a2);
}

unsigned int *sub_2917AC@<X0>(unsigned int *result@<X0>, void (*a2)(void **__return_ptr, char *)@<X1>, uint64_t a3@<X8>)
{
  void (*v8)(void **__return_ptr, char *);

  uint64_t v7 = 0;
  BOOL v8 = a2;
  long long v6 = 0u;
  if (result)
  {
    uint64_t v4 = result;
    sub_29234C((uint64_t)&v6, *result);
    __n128 result = (unsigned int *)sub_292A10(v4, (uint64_t)&v6, *((uint64_t *)&v6 + 1), &v8);
    uint64_t v5 = v7;
    *(_OWORD *)a3 = v6;
    *(void *)(a3 + 16) = v5;
  }
  else
  {
    *(_OWORD *)a3 = 0uLL;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_291834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9)
{
  if (a9) {
    sub_20A6B2C(&a9, a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_291850(int *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 496) = 0;
  *(_OWORD *)(a2 + 464) = 0u;
  *(_OWORD *)(a2 + 480) = 0u;
  *(_OWORD *)(a2 + 432) = 0u;
  *(_OWORD *)(a2 + 448) = 0u;
  *(_OWORD *)(a2 + 400) = 0u;
  *(_OWORD *)(a2 + 416) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 384) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u || (uint64_t v5 = v4[2]) == 0)
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
    __dst.__r_.__value_.__s.__data_[0] = 0;
    long long v11 = (void **)(a2 + 24);
    goto LABEL_8;
  }
  long long v6 = (unsigned int *)((char *)a1 + v5);
  uint64_t v7 = *v6;
  uint64_t v9 = (char *)v6 + v7 + 4;
  std::string::size_type v8 = *(unsigned int *)((char *)v6 + v7);
  if (v8 >= 0x17)
  {
    uint64_t v19 = (v8 & 0xFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v19 = v8 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_dst = (std::string *)operator new(v19 + 1);
    __dst.__r_.__value_.__l.__size_ = v8;
    __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *(unsigned int *)((char *)v6 + v7);
    p_dst = &__dst;
    if (!v8)
    {
      __dst.__r_.__value_.__s.__data_[v8] = 0;
      long long v11 = (void **)(a2 + 24);
      if (*(char *)(a2 + 47) < 0) {
        goto LABEL_18;
      }
      goto LABEL_8;
    }
  }
  memcpy(p_dst, v9, v8);
  p_dst->__r_.__value_.__s.__data_[v8] = 0;
  long long v11 = (void **)(a2 + 24);
  if (*(char *)(a2 + 47) < 0) {
LABEL_18:
  }
    operator delete(*v11);
LABEL_8:
  *(std::string *)long long v11 = __dst;
  BOOL v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 < 7u || (uint64_t v13 = v12[3]) == 0)
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
    __dst.__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_24;
  }
  uint64_t v14 = (unsigned int *)((char *)a1 + v13);
  uint64_t v15 = *v14;
  std::string v17 = (char *)v14 + v15 + 4;
  std::string::size_type v16 = *(unsigned int *)((char *)v14 + v15);
  if (v16 >= 0x17)
  {
    uint64_t v21 = (v16 & 0xFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v21 = v16 | 7;
    }
    uint64_t v22 = v21 + 1;
    uint64_t v18 = (std::string *)operator new(v21 + 1);
    __dst.__r_.__value_.__l.__size_ = v16;
    __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *(unsigned int *)((char *)v14 + v15);
    uint64_t v18 = &__dst;
    if (!v16) {
      goto LABEL_23;
    }
  }
  memcpy(v18, v17, v16);
LABEL_23:
  v18->__r_.__value_.__s.__data_[v16] = 0;
LABEL_24:
  sub_75888((std::string *)(a2 + 48), &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    unint64_t v23 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v23 < 0xBu)
    {
LABEL_32:
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
      __dst.__r_.__value_.__s.__data_[0] = 0;
      goto LABEL_38;
    }
  }
  else
  {
    unint64_t v23 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v23 < 0xBu) {
      goto LABEL_32;
    }
  }
  uint64_t v24 = v23[5];
  if (!v24) {
    goto LABEL_32;
  }
  long long v25 = (unsigned int *)((char *)a1 + v24);
  uint64_t v26 = *v25;
  uint64_t v28 = (char *)v25 + v26 + 4;
  std::string::size_type v27 = *(unsigned int *)((char *)v25 + v26);
  if (v27 >= 0x17)
  {
    uint64_t v30 = (v27 & 0xFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17) {
      uint64_t v30 = v27 | 7;
    }
    uint64_t v31 = v30 + 1;
    unint64_t v29 = (std::string *)operator new(v30 + 1);
    __dst.__r_.__value_.__l.__size_ = v27;
    __dst.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *(unsigned int *)((char *)v25 + v26);
    unint64_t v29 = &__dst;
    if (!v27) {
      goto LABEL_37;
    }
  }
  memcpy(v29, v28, v27);
LABEL_37:
  v29->__r_.__value_.__s.__data_[v27] = 0;
LABEL_38:
  sub_75854((std::string *)(a2 + 48), &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    int v32 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v32 < 9u) {
      goto LABEL_44;
    }
  }
  else
  {
    int v32 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v32 < 9u) {
      goto LABEL_44;
    }
  }
  uint64_t v33 = v32[4];
  if (v33)
  {
    __int16 v34 = (long long **)((char *)a1 + v33 + *(unsigned int *)((char *)a1 + v33));
    goto LABEL_45;
  }
LABEL_44:
  __int16 v34 = 0;
LABEL_45:
  sub_294270(v34, (void (*)(void **__return_ptr, char *))sub_294314, (uint64_t)&__dst);
  sub_75044((std::string *)(a2 + 48), (uint64_t *)&__dst);
  std::string::size_type v35 = __dst.__r_.__value_.__r.__words[0];
  if (!__dst.__r_.__value_.__r.__words[0]) {
    return;
  }
  std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  unint64_t v37 = (void *)__dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
  {
    while (1)
    {
      if (*(char *)(size - 1) < 0)
      {
        operator delete(*(void **)(size - 24));
        if ((*(char *)(size - 25) & 0x80000000) == 0) {
          goto LABEL_49;
        }
LABEL_52:
        operator delete(*(void **)(size - 48));
        size -= 48;
        if (size == v35)
        {
LABEL_53:
          unint64_t v37 = (void *)__dst.__r_.__value_.__r.__words[0];
          break;
        }
      }
      else
      {
        if (*(char *)(size - 25) < 0) {
          goto LABEL_52;
        }
LABEL_49:
        size -= 48;
        if (size == v35) {
          goto LABEL_53;
        }
      }
    }
  }
  __dst.__r_.__value_.__l.__size_ = v35;
  operator delete(v37);
}

void sub_291BF8(_Unwind_Exception *a1)
{
  sub_2927B8(v1);
  _Unwind_Resume(a1);
}

void sub_291C0C(_Unwind_Exception *a1)
{
  sub_2927B8(v1);
  _Unwind_Resume(a1);
}

void sub_291C20(_Unwind_Exception *a1)
{
  sub_2927B8(v1);
  _Unwind_Resume(a1);
}

void sub_291C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1A6DC((void **)va);
  sub_2927B8(v2);
  _Unwind_Resume(a1);
}

void sub_291C50(_Unwind_Exception *a1)
{
  sub_2927B8(v1);
  _Unwind_Resume(a1);
}

void sub_291C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_2927B8(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_291C8C(void *a1)
{
  uint64_t v1 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v1 < 0xBu) {
    return 0x7FFFFFFFLL;
  }
  uint64_t v2 = v1[5];
  if (!v2) {
    return 0x7FFFFFFFLL;
  }
  uint64_t result = *(unsigned int *)(*a1 + v2);
  if (!result) {
    return 0x7FFFFFFFLL;
  }
  return result;
}

double sub_291CC0@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v3 >= 7u
    && (uint64_t v4 = v3[3]) != 0
    && (v5 = (int *)(*a1 + v4 + *(unsigned int *)(*a1 + v4)), long long v6 = (unsigned __int16 *)((char *)v5 - *v5), *v6 >= 5u)
    && (uint64_t v7 = v6[2]) != 0)
  {
    v9[0] = (char *)v5 + v7 + *(unsigned int *)((char *)v5 + v7) + 4;
    v9[1] = (const char *)strlen(v9[0]);
    sub_72C7C((uint64_t)a2, v9);
  }
  else
  {
    double result = 0.0;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
  }
  return result;
}

char *sub_291D74@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)result;
  uint64_t v4 = (unsigned __int16 *)(*(void *)result - **(int **)result);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = *(unsigned int *)(v3 + v5);
    uint64_t v7 = (unsigned int *)(v3 + v5 + v6);
    uint64_t v8 = *v7;
    if (v8)
    {
      uint64_t v9 = 4 * v8;
      BOOL v10 = operator new(4 * v8);
      unint64_t v11 = 0;
      *(void *)&long long v19 = v10;
      *((void *)&v19 + 1) = v10;
      uint64_t v20 = &v10[v9];
      uint64_t v12 = v3 + v5 + v6;
      do
      {
        uint64_t v13 = v7[v11 / 4 + 1];
        uint64_t v14 = v12 + v11 + v13 - *(int *)((char *)&v7[v11 / 4 + 1] + v13);
        if (*(unsigned __int16 *)(v14 + 4) >= 5u && (uint64_t v15 = *(unsigned __int16 *)(v14 + 8)) != 0) {
          int v16 = *(_DWORD *)(v12 + v11 + v13 + v15 + 4);
        }
        else {
          int v16 = 0;
        }
        int v21 = v16;
        double result = sub_294CB4((void **)&v19, v10, &v21);
        BOOL v10 = result + 4;
        v11 += 4;
      }
      while (v9 != v11);
      long long v17 = v19;
      uint64_t v18 = v20;
    }
    else
    {
      uint64_t v18 = 0;
      long long v17 = 0uLL;
    }
    *(_OWORD *)a2 = v17;
    *(void *)(a2 + 16) = v18;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

void sub_291EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *sub_291EBC(void *a1, int a2)
{
  uint64_t v2 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v2 < 5u) {
    return 0;
  }
  uint64_t v3 = v2[2];
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (unsigned int *)(*a1 + v3 + *(unsigned int *)(*a1 + v3));
  int __key = a2;
  double result = (unsigned int *)bsearch(&__key, v4 + 1, *v4, 4uLL, (int (__cdecl *)(const void *, const void *))sub_295024);
  if (!result) {
    return result;
  }
  uint64_t v6 = (int *)((char *)result + *result);
  uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 < 7u) {
    return 0;
  }
  uint64_t v8 = v7[3];
  if (!v8) {
    return 0;
  }
  return *(unsigned int **)((char *)v6 + v8);
}

BOOL sub_291F68(void *a1, int a2)
{
  uint64_t v2 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v2 >= 5u
    && (uint64_t v3 = v2[2]) != 0
    && (uint64_t v4 = (unsigned int *)(*a1 + v3 + *(unsigned int *)(*a1 + v3)),
        int __key = a2,
        (uint64_t v5 = (unsigned int *)bsearch(&__key, v4 + 1, *v4, 4uLL, (int (__cdecl *)(const void *, const void *))sub_295024)) != 0))
  {
    return (unsigned int *)((char *)v5 + *v5) != 0;
  }
  else
  {
    return 0;
  }
}

void sub_292004(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v3 < 7u
    || (uint64_t v4 = v3[3]) == 0
    || (uint64_t v5 = (unsigned int *)(*a1 + v4),
        uint64_t v6 = (unsigned __int16 *)((char *)v5 + *v5 - *(unsigned int *)((char *)v5 + *v5)),
        *v6 < 7u)
    || !v6[3])
  {
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
    return;
  }
  uint64_t v7 = (int *)((char *)v5 + *v5);
  uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 7u)
  {
    uint64_t v8 = (unsigned __int16 *)v8[3];
    if (v8)
    {
      uint64_t v9 = (unsigned int *)((char *)v8 + (void)v7);
      uint64_t v10 = *v9;
      uint64_t v12 = (char *)v9 + v10 + 4;
      size_t v11 = *(unsigned int *)((char *)v9 + v10);
      if (v11 >= 0x17)
      {
        if ((v11 | 7) == 0x17) {
          uint64_t v15 = (v11 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v15 = v11 | 7;
        }
        p_dst = (void **)operator new(v15 + 1);
        uint64_t v18 = (unsigned __int16 *)v11;
        uint64_t v19 = v15 - 0x7FFFFFFFFFFFFFFFLL;
        std::string __dst = p_dst;
      }
      else
      {
        HIBYTE(v19) = *(unsigned int *)((char *)v9 + v10);
        p_dst = (void **)&__dst;
        if (!v11) {
          goto LABEL_18;
        }
      }
      memcpy(p_dst, v12, v11);
LABEL_18:
      *((unsigned char *)p_dst + v11) = 0;
      LODWORD(v14) = HIBYTE(v19);
      uint64_t v8 = v18;
      goto LABEL_19;
    }
  }
  LODWORD(v14) = 0;
  HIBYTE(v19) = 0;
  LOBYTE(__dst) = 0;
LABEL_19:
  int v16 = (void **)&__dst;
  if ((v14 & 0x80u) != 0) {
    int v16 = __dst;
  }
  unint64_t v14 = v14;
  if ((v14 & 0x80u) != 0) {
    unint64_t v14 = (unint64_t)v8;
  }
  v20[0] = v16;
  v20[1] = v14;
  sub_72C7C((uint64_t)a2, v20);
  if (SHIBYTE(v19) < 0) {
    operator delete(__dst);
  }
}

void sub_29218C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2921A8(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = (unsigned __int16 *)(*a1 - *(int *)*a1);
  if (*v3 < 7u
    || (uint64_t v4 = v3[3]) == 0
    || (uint64_t v5 = (unsigned int *)(*a1 + v4),
        uint64_t v6 = (unsigned __int16 *)((char *)v5 + *v5 - *(unsigned int *)((char *)v5 + *v5)),
        *v6 < 9u)
    || !v6[4])
  {
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
    return;
  }
  uint64_t v7 = (int *)((char *)v5 + *v5);
  uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 9u)
  {
    uint64_t v8 = (unsigned __int16 *)v8[4];
    if (v8)
    {
      uint64_t v9 = (unsigned int *)((char *)v8 + (void)v7);
      uint64_t v10 = *v9;
      uint64_t v12 = (char *)v9 + v10 + 4;
      size_t v11 = *(unsigned int *)((char *)v9 + v10);
      if (v11 >= 0x17)
      {
        if ((v11 | 7) == 0x17) {
          uint64_t v15 = (v11 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v15 = v11 | 7;
        }
        p_dst = (void **)operator new(v15 + 1);
        uint64_t v18 = (unsigned __int16 *)v11;
        uint64_t v19 = v15 - 0x7FFFFFFFFFFFFFFFLL;
        std::string __dst = p_dst;
      }
      else
      {
        HIBYTE(v19) = *(unsigned int *)((char *)v9 + v10);
        p_dst = (void **)&__dst;
        if (!v11) {
          goto LABEL_18;
        }
      }
      memcpy(p_dst, v12, v11);
LABEL_18:
      *((unsigned char *)p_dst + v11) = 0;
      LODWORD(v14) = HIBYTE(v19);
      uint64_t v8 = v18;
      goto LABEL_19;
    }
  }
  LODWORD(v14) = 0;
  HIBYTE(v19) = 0;
  LOBYTE(__dst) = 0;
LABEL_19:
  int v16 = (void **)&__dst;
  if ((v14 & 0x80u) != 0) {
    int v16 = __dst;
  }
  unint64_t v14 = v14;
  if ((v14 & 0x80u) != 0) {
    unint64_t v14 = (unint64_t)v8;
  }
  v20[0] = v16;
  v20[1] = v14;
  sub_72C7C((uint64_t)a2, v20);
  if (SHIBYTE(v19) < 0) {
    operator delete(__dst);
  }
}

void sub_292330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_29234C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  if (0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x82082082082083) {
    sub_2E00();
  }
  uint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = 504 * a2;
  uint64_t v6 = (char *)operator new(504 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[(char *)v4 - (char *)v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
LABEL_15:
    if (!v2) {
      return;
    }
LABEL_16:
    operator delete(v2);
    return;
  }
  uint64_t v9 = &v6[(char *)v4 - (char *)v2];
  do
  {
    uint64_t v10 = v9;
    v9 -= 504;
    size_t v11 = v4 - 63;
    long long v12 = *(_OWORD *)(v4 - 63);
    *((void *)v9 + 2) = *(v4 - 61);
    *(_OWORD *)uint64_t v9 = v12;
    v11[1] = 0;
    void v11[2] = 0;
    *size_t v11 = 0;
    uint64_t v13 = v10 - 480;
    unint64_t v14 = v4 - 60;
    long long v15 = *((_OWORD *)v4 - 30);
    *((void *)v13 + 2) = *(v4 - 58);
    *(_OWORD *)uint64_t v13 = v15;
    v14[1] = 0;
    v14[2] = 0;
    unsigned int *v14 = 0;
    int v16 = v10 - 456;
    long long v17 = v4 - 57;
    long long v18 = *(_OWORD *)(v4 - 57);
    *((void *)v16 + 2) = *(v4 - 55);
    *(_OWORD *)int v16 = v18;
    v17[1] = 0;
    v17[2] = 0;
    *long long v17 = 0;
    uint64_t v19 = v10 - 432;
    uint64_t v20 = v4 - 54;
    long long v21 = *((_OWORD *)v4 - 27);
    *((void *)v19 + 2) = *(v4 - 52);
    *(_OWORD *)uint64_t v19 = v21;
    *(v4 - 53) = 0;
    unsigned char *v20 = 0;
    void v20[2] = 0;
    uint64_t v22 = v10 - 408;
    unint64_t v23 = v4 - 51;
    long long v24 = *(_OWORD *)(v4 - 51);
    *((void *)v22 + 2) = *(v4 - 49);
    *(_OWORD *)uint64_t v22 = v24;
    *(v4 - 50) = 0;
    *unint64_t v23 = 0;
    v23[2] = 0;
    long long v25 = v10 - 384;
    uint64_t v26 = v4 - 48;
    long long v27 = *((_OWORD *)v4 - 24);
    *((void *)v25 + 2) = *(v4 - 46);
    *(_OWORD *)long long v25 = v27;
    *(v4 - 47) = 0;
    *uint64_t v26 = 0;
    v26[2] = 0;
    uint64_t v28 = v10 - 360;
    unint64_t v29 = v4 - 45;
    long long v30 = *(_OWORD *)(v4 - 45);
    *((void *)v28 + 2) = *(v4 - 43);
    *(_OWORD *)uint64_t v28 = v30;
    *(v4 - 44) = 0;
    *unint64_t v29 = 0;
    v29[2] = 0;
    uint64_t v31 = v10 - 336;
    int v32 = v4 - 42;
    long long v33 = *((_OWORD *)v4 - 21);
    *((void *)v31 + 2) = *(v4 - 40);
    *(_OWORD *)uint64_t v31 = v33;
    *(v4 - 41) = 0;
    *int v32 = 0;
    v32[2] = 0;
    __int16 v34 = v10 - 312;
    std::string::size_type v35 = v4 - 39;
    long long v36 = *(_OWORD *)(v4 - 39);
    *((void *)v34 + 2) = *(v4 - 37);
    *(_OWORD *)__int16 v34 = v36;
    *(v4 - 38) = 0;
    *std::string::size_type v35 = 0;
    v35[2] = 0;
    unint64_t v37 = v10 - 288;
    uint64_t v38 = v4 - 36;
    long long v39 = *((_OWORD *)v4 - 18);
    *((void *)v37 + 2) = *(v4 - 34);
    *(_OWORD *)unint64_t v37 = v39;
    *(v4 - 35) = 0;
    *uint64_t v38 = 0;
    v38[2] = 0;
    long long v40 = *(_OWORD *)(v4 - 33);
    *((void *)v10 - 31) = *(v4 - 31);
    *(_OWORD *)(v10 - 264) = v40;
    *(v4 - 33) = 0;
    *(v4 - 32) = 0;
    *(v4 - 31) = 0;
    long long v41 = *((_OWORD *)v4 - 15);
    *((void *)v10 - 28) = *(v4 - 28);
    *((_OWORD *)v10 - 15) = v41;
    *(v4 - 30) = 0;
    *(v4 - 29) = 0;
    *(v4 - 28) = 0;
    long long v42 = *(_OWORD *)(v4 - 27);
    *((void *)v10 - 25) = *(v4 - 25);
    *(_OWORD *)(v10 - 216) = v42;
    *(v4 - 27) = 0;
    *(v4 - 26) = 0;
    *(v4 - 25) = 0;
    long long v43 = *((_OWORD *)v4 - 12);
    *((void *)v10 - 22) = *(v4 - 22);
    *((_OWORD *)v10 - 12) = v43;
    *(v4 - 24) = 0;
    *(v4 - 23) = 0;
    *(v4 - 22) = 0;
    long long v44 = *(_OWORD *)(v4 - 21);
    *((void *)v10 - 19) = *(v4 - 19);
    *(_OWORD *)(v10 - 168) = v44;
    *(v4 - 21) = 0;
    *(v4 - 20) = 0;
    *(v4 - 19) = 0;
    long long v45 = *((_OWORD *)v4 - 9);
    *((void *)v10 - 16) = *(v4 - 16);
    *((_OWORD *)v10 - 9) = v45;
    *(v4 - 18) = 0;
    *(v4 - 17) = 0;
    *(v4 - 16) = 0;
    long long v46 = *(_OWORD *)(v4 - 15);
    *((void *)v10 - 13) = *(v4 - 13);
    *(_OWORD *)(v10 - 120) = v46;
    *(v4 - 15) = 0;
    *(v4 - 14) = 0;
    *(v4 - 13) = 0;
    long long v47 = *((_OWORD *)v4 - 6);
    *((void *)v10 - 10) = *(v4 - 10);
    *((_OWORD *)v10 - 6) = v47;
    *(v4 - 12) = 0;
    *(v4 - 11) = 0;
    *(v4 - 10) = 0;
    long long v48 = *(_OWORD *)(v4 - 9);
    *((void *)v10 - 7) = *(v4 - 7);
    *(_OWORD *)(v10 - 72) = v48;
    *(v4 - 9) = 0;
    *(v4 - 8) = 0;
    *(v4 - 7) = 0;
    long long v49 = *((_OWORD *)v4 - 3);
    *((void *)v10 - 4) = *(v4 - 4);
    *((_OWORD *)v10 - 3) = v49;
    *(v4 - 6) = 0;
    *(v4 - 5) = 0;
    *(v4 - 4) = 0;
    long long v50 = *(_OWORD *)(v4 - 3);
    *((void *)v10 - 1) = *(v4 - 1);
    *(_OWORD *)(v10 - 24) = v50;
    *(v4 - 3) = 0;
    *(v4 - 2) = 0;
    *(v4 - 1) = 0;
    v4 -= 63;
  }
  while (v11 != v2);
  uint64_t v2 = *(void ***)a1;
  uint64_t v51 = *(void ***)(a1 + 8);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v51 != v2)
  {
    uint64_t v52 = v51 - 63;
    while (1)
    {
      sub_29281C((uint64_t)(v52 + 6));
      if (*((char *)v52 + 47) < 0)
      {
        operator delete(v52[3]);
        if (*((char *)v52 + 23) < 0) {
LABEL_13:
        }
          operator delete(*v52);
      }
      else if (*((char *)v52 + 23) < 0)
      {
        goto LABEL_13;
      }
      BOOL v53 = v52 == v2;
      v52 -= 63;
      if (v53) {
        goto LABEL_15;
      }
    }
  }
  uint64_t v2 = v51;
  if (v51) {
    goto LABEL_16;
  }
}

uint64_t sub_29271C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 504;
    sub_29281C(i - 456);
    if (*(char *)(i - 457) < 0)
    {
      operator delete(*(void **)(i - 480));
      if ((*(char *)(i - 481) & 0x80000000) == 0) {
        continue;
      }
    }
    else if ((*(char *)(i - 481) & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(*(void **)(i - 504));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2927B8(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_29281C(uint64_t a1)
{
  if (*(char *)(a1 + 455) < 0)
  {
    operator delete(*(void **)(a1 + 432));
    if ((*(char *)(a1 + 431) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 407) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }
  else if ((*(char *)(a1 + 431) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 408));
  if ((*(char *)(a1 + 407) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 383) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(*(void **)(a1 + 384));
  if ((*(char *)(a1 + 383) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 359) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete(*(void **)(a1 + 360));
  if ((*(char *)(a1 + 359) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 335) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete(*(void **)(a1 + 336));
  if ((*(char *)(a1 + 335) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(a1 + 311) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(*(void **)(a1 + 312));
  if ((*(char *)(a1 + 311) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 287) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete(*(void **)(a1 + 288));
  if ((*(char *)(a1 + 287) & 0x80000000) == 0)
  {
LABEL_9:
    if ((*(char *)(a1 + 263) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  operator delete(*(void **)(a1 + 264));
  if ((*(char *)(a1 + 263) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*(char *)(a1 + 239) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_29:
  operator delete(*(void **)(a1 + 240));
  if ((*(char *)(a1 + 239) & 0x80000000) == 0)
  {
LABEL_11:
    if ((*(char *)(a1 + 215) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(*(void **)(a1 + 216));
  if ((*(char *)(a1 + 215) & 0x80000000) == 0)
  {
LABEL_12:
    if ((*(char *)(a1 + 191) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(*(void **)(a1 + 192));
  if ((*(char *)(a1 + 191) & 0x80000000) == 0)
  {
LABEL_13:
    if ((*(char *)(a1 + 167) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(*(void **)(a1 + 168));
  if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
LABEL_14:
    if ((*(char *)(a1 + 143) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(*(void **)(a1 + 144));
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
LABEL_15:
    if ((*(char *)(a1 + 119) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(*(void **)(a1 + 120));
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
LABEL_16:
    if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }
LABEL_35:
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_17:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_18:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      goto LABEL_19;
    }
LABEL_38:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_39;
  }
LABEL_37:
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_38;
  }
LABEL_19:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
LABEL_39:
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_292A10(unsigned int *a1, uint64_t a2, uint64_t a3, void (**a4)(void **__return_ptr, char *))
{
  void (*v9)(void **__return_ptr, char *);
  uint64_t v10;
  void *v12[2];
  char v13;
  void *__p;
  char v15;
  uint64_t v16;

  uint64_t v7 = (char *)(a1 + 1);
  uint64_t v6 = *a1;
  if (v6)
  {
    uint64_t v8 = 4 * v6;
    uint64_t v9 = *a4;
    (*a4)(v12, &v7[*(unsigned int *)v7]);
    while (1)
    {
      uint64_t v10 = sub_292B2C(a2, a3, (uint64_t)v12);
      sub_29281C((uint64_t)&v16);
      if (v15 < 0)
      {
        operator delete(__p);
        if ((v13 & 0x80000000) == 0) {
          goto LABEL_3;
        }
      }
      else if ((v13 & 0x80000000) == 0)
      {
        goto LABEL_3;
      }
      operator delete(v12[0]);
LABEL_3:
      a3 = v10 + 504;
      v7 += 4;
      v8 -= 4;
      if (!v8) {
        return a2;
      }
      v9(v12, &v7[*(unsigned int *)v7]);
    }
  }
  return a2;
}

void sub_292AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_29281C(v21);
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_292B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v7 = *(long long **)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  unint64_t v8 = 0xEFBEFBEFBEFBEFBFLL * ((a2 - *(void *)a1) >> 3);
  unint64_t v9 = *(void *)(a1 + 16);
  if (v6 < v9)
  {
    if (a2 == v6)
    {
      long long v17 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = *(void *)(a3 + 16);
      *(_OWORD *)a2 = v17;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      long long v18 = (char *)v7 + 504 * v8;
      long long v19 = *(_OWORD *)(a3 + 24);
      *((void *)v18 + 5) = *(void *)(a3 + 40);
      *(_OWORD *)(v18 + 24) = v19;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 24) = 0;
      long long v20 = *(_OWORD *)(a3 + 48);
      *((void *)v18 + 8) = *(void *)(a3 + 64);
      *((_OWORD *)v18 + 3) = v20;
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 64) = 0;
      *(void *)(a3 + 48) = 0;
      long long v21 = *(_OWORD *)(a3 + 72);
      *((void *)v18 + 11) = *(void *)(a3 + 88);
      *(_OWORD *)(v18 + 72) = v21;
      *(void *)(a3 + 72) = 0;
      *(void *)(a3 + 80) = 0;
      *(void *)(a3 + 88) = 0;
      long long v22 = *(_OWORD *)(a3 + 96);
      *((void *)v18 + 14) = *(void *)(a3 + 112);
      *((_OWORD *)v18 + 6) = v22;
      *(void *)(a3 + 96) = 0;
      *(void *)(a3 + 104) = 0;
      *(void *)(a3 + 112) = 0;
      long long v23 = *(_OWORD *)(a3 + 120);
      *((void *)v18 + 17) = *(void *)(a3 + 136);
      *(_OWORD *)(v18 + 120) = v23;
      *(void *)(a3 + 120) = 0;
      *(void *)(a3 + 128) = 0;
      *(void *)(a3 + 136) = 0;
      long long v24 = *(_OWORD *)(a3 + 144);
      *((void *)v18 + 20) = *(void *)(a3 + 160);
      *((_OWORD *)v18 + 9) = v24;
      *(void *)(a3 + 144) = 0;
      *(void *)(a3 + 152) = 0;
      *(void *)(a3 + 160) = 0;
      long long v25 = *(_OWORD *)(a3 + 168);
      *((void *)v18 + 23) = *(void *)(a3 + 184);
      *(_OWORD *)(v18 + 168) = v25;
      *(void *)(a3 + 168) = 0;
      *(void *)(a3 + 176) = 0;
      *(void *)(a3 + 184) = 0;
      long long v26 = *(_OWORD *)(a3 + 192);
      *((void *)v18 + 26) = *(void *)(a3 + 208);
      *((_OWORD *)v18 + 12) = v26;
      *(void *)(a3 + 192) = 0;
      *(void *)(a3 + 200) = 0;
      *(void *)(a3 + 208) = 0;
      long long v27 = *(_OWORD *)(a3 + 216);
      *((void *)v18 + 29) = *(void *)(a3 + 232);
      *(_OWORD *)(v18 + 216) = v27;
      *(void *)(a3 + 216) = 0;
      *(void *)(a3 + 224) = 0;
      *(void *)(a3 + 232) = 0;
      long long v28 = *(_OWORD *)(a3 + 240);
      *((void *)v18 + 32) = *(void *)(a3 + 256);
      *((_OWORD *)v18 + 15) = v28;
      *(void *)(a3 + 240) = 0;
      *(void *)(a3 + 248) = 0;
      *(void *)(a3 + 256) = 0;
      long long v29 = *(_OWORD *)(a3 + 264);
      *((void *)v18 + 35) = *(void *)(a3 + 280);
      *(_OWORD *)(v18 + 264) = v29;
      *(void *)(a3 + 264) = 0;
      *(void *)(a3 + 272) = 0;
      *(void *)(a3 + 280) = 0;
      long long v30 = *(_OWORD *)(a3 + 288);
      *((void *)v18 + 38) = *(void *)(a3 + 304);
      *((_OWORD *)v18 + 18) = v30;
      *(void *)(a3 + 288) = 0;
      *(void *)(a3 + 296) = 0;
      *(void *)(a3 + 304) = 0;
      long long v31 = *(_OWORD *)(a3 + 312);
      *((void *)v18 + 41) = *(void *)(a3 + 328);
      *(_OWORD *)(v18 + 312) = v31;
      *(void *)(a3 + 312) = 0;
      *(void *)(a3 + 320) = 0;
      *(void *)(a3 + 328) = 0;
      long long v32 = *(_OWORD *)(a3 + 336);
      *((void *)v18 + 44) = *(void *)(a3 + 352);
      *((_OWORD *)v18 + 21) = v32;
      *(void *)(a3 + 336) = 0;
      *(void *)(a3 + 344) = 0;
      *(void *)(a3 + 352) = 0;
      long long v33 = *(_OWORD *)(a3 + 360);
      *((void *)v18 + 47) = *(void *)(a3 + 376);
      *(_OWORD *)(v18 + 360) = v33;
      *(void *)(a3 + 360) = 0;
      *(void *)(a3 + 368) = 0;
      *(void *)(a3 + 376) = 0;
      long long v34 = *(_OWORD *)(a3 + 384);
      *((void *)v18 + 50) = *(void *)(a3 + 400);
      *((_OWORD *)v18 + 24) = v34;
      *(void *)(a3 + 384) = 0;
      *(void *)(a3 + 392) = 0;
      *(void *)(a3 + 400) = 0;
      long long v35 = *(_OWORD *)(a3 + 408);
      *((void *)v18 + 53) = *(void *)(a3 + 424);
      *(_OWORD *)(v18 + 408) = v35;
      *(void *)(a3 + 408) = 0;
      *(void *)(a3 + 416) = 0;
      *(void *)(a3 + 424) = 0;
      long long v36 = *(_OWORD *)(a3 + 432);
      *((void *)v18 + 56) = *(void *)(a3 + 448);
      *((_OWORD *)v18 + 27) = v36;
      *(void *)(a3 + 432) = 0;
      *(void *)(a3 + 440) = 0;
      *(void *)(a3 + 448) = 0;
      long long v37 = *(_OWORD *)(a3 + 456);
      *((void *)v18 + 59) = *(void *)(a3 + 472);
      *(_OWORD *)(v18 + 456) = v37;
      *(void *)(a3 + 456) = 0;
      *(void *)(a3 + 464) = 0;
      *(void *)(a3 + 472) = 0;
      long long v38 = *(_OWORD *)(a3 + 480);
      *((void *)v18 + 62) = *(void *)(a3 + 496);
      *((_OWORD *)v18 + 30) = v38;
      *(void *)(a3 + 480) = 0;
      *(void *)(a3 + 488) = 0;
      *(void *)(a3 + 496) = 0;
      *(void *)(a1 + 8) = a2 + 504;
    }
    else
    {
      sub_292FAC(a1, a2, v6, a2 + 504);
      if (*(char *)(v4 + 23) < 0) {
        operator delete(*(void **)v4);
      }
      long long v10 = *(_OWORD *)a3;
      *(void *)(v4 + 16) = *(void *)(a3 + 16);
      *(_OWORD *)uint64_t v4 = v10;
      *(unsigned char *)(a3 + 23) = 0;
      *(unsigned char *)a3 = 0;
      size_t v11 = (void **)v7 + 63 * v8 + 3;
      if (*(char *)(v4 + 47) < 0) {
        operator delete(*v11);
      }
      long long v12 = *(_OWORD *)(a3 + 24);
      *((void *)v7 + 63 * v8 + 5) = *(void *)(a3 + 40);
      *(_OWORD *)size_t v11 = v12;
      *(unsigned char *)(a3 + 47) = 0;
      *(unsigned char *)(a3 + 24) = 0;
      sub_293ED0((uint64_t)v7 + 504 * v8 + 48, (long long *)(a3 + 48));
    }
    return v4;
  }
  unint64_t v13 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(v6 - (void)v7) >> 3) + 1;
  if (v13 > 0x82082082082082) {
    sub_2E00();
  }
  unint64_t v14 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(v9 - (void)v7) >> 3);
  if (2 * v14 > v13) {
    unint64_t v13 = 2 * v14;
  }
  if (v14 >= 0x41041041041041) {
    unint64_t v15 = 0x82082082082082;
  }
  else {
    unint64_t v15 = v13;
  }
  uint64_t v46 = a1 + 16;
  if (v15)
  {
    if (v15 > 0x82082082082082) {
      sub_188D718();
    }
    int v16 = (char *)operator new(504 * v15);
  }
  else
  {
    int v16 = 0;
  }
  long long __p = v16;
  long long v43 = &v16[504 * v8];
  long long v44 = v43;
  long long v45 = &v16[504 * v15];
  sub_293308((long long **)&__p, (long long *)a3);
  uint64_t v4 = sub_293994((long long **)a1, &__p, (long long *)v4);
  long long v39 = v43;
  while (1)
  {
    long long v40 = v44;
    if (v44 == v39) {
      break;
    }
    v44 -= 504;
    sub_29281C((uint64_t)(v40 - 456));
    if (*(v40 - 457) < 0)
    {
      operator delete(*((void **)v40 - 60));
      if (*(v40 - 481) < 0) {
        goto LABEL_25;
      }
    }
    else if (*(v40 - 481) < 0)
    {
LABEL_25:
      operator delete(*((void **)v40 - 63));
    }
  }
  if (__p) {
    operator delete(__p);
  }
  return v4;
}

void sub_292F98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_29271C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_292FAC(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 8);
  unint64_t v5 = a2 + v4 - a4;
  if (v5 >= a3)
  {
    *(void *)(result + 8) = v4;
    if (v4 == a4) {
      return result;
    }
  }
  else
  {
    unint64_t v6 = (long long *)(a2 + v4 - a4);
    uint64_t v7 = *(void *)(result + 8);
    do
    {
      long long v8 = *v6;
      *(void *)(v7 + 16) = *((void *)v6 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 2) = 0;
      *(void *)unint64_t v6 = 0;
      long long v9 = *(long long *)((char *)v6 + 24);
      *(void *)(v7 + 40) = *((void *)v6 + 5);
      *(_OWORD *)(v7 + 24) = v9;
      *((void *)v6 + 4) = 0;
      *((void *)v6 + 5) = 0;
      *((void *)v6 + 3) = 0;
      long long v10 = v6[3];
      *(void *)(v7 + 64) = *((void *)v6 + 8);
      *(_OWORD *)(v7 + 48) = v10;
      *((void *)v6 + 7) = 0;
      *((void *)v6 + 8) = 0;
      *((void *)v6 + 6) = 0;
      long long v11 = *(long long *)((char *)v6 + 72);
      *(void *)(v7 + 88) = *((void *)v6 + 11);
      *(_OWORD *)(v7 + 72) = v11;
      *((void *)v6 + 9) = 0;
      *((void *)v6 + 10) = 0;
      *((void *)v6 + 11) = 0;
      long long v12 = v6[6];
      *(void *)(v7 + 112) = *((void *)v6 + 14);
      *(_OWORD *)(v7 + 96) = v12;
      *((void *)v6 + 12) = 0;
      *((void *)v6 + 13) = 0;
      *((void *)v6 + 14) = 0;
      long long v13 = *(long long *)((char *)v6 + 120);
      *(void *)(v7 + 136) = *((void *)v6 + 17);
      *(_OWORD *)(v7 + 120) = v13;
      *((void *)v6 + 15) = 0;
      *((void *)v6 + 16) = 0;
      *((void *)v6 + 17) = 0;
      long long v14 = v6[9];
      *(void *)(v7 + 160) = *((void *)v6 + 20);
      *(_OWORD *)(v7 + 144) = v14;
      *((void *)v6 + 18) = 0;
      *((void *)v6 + 19) = 0;
      *((void *)v6 + 20) = 0;
      long long v15 = *(long long *)((char *)v6 + 168);
      *(void *)(v7 + 184) = *((void *)v6 + 23);
      *(_OWORD *)(v7 + 168) = v15;
      *((void *)v6 + 21) = 0;
      *((void *)v6 + 22) = 0;
      *((void *)v6 + 23) = 0;
      long long v16 = v6[12];
      *(void *)(v7 + 208) = *((void *)v6 + 26);
      *(_OWORD *)(v7 + 192) = v16;
      *((void *)v6 + 24) = 0;
      *((void *)v6 + 25) = 0;
      *((void *)v6 + 26) = 0;
      long long v17 = *(long long *)((char *)v6 + 216);
      *(void *)(v7 + 232) = *((void *)v6 + 29);
      *(_OWORD *)(v7 + 216) = v17;
      *((void *)v6 + 27) = 0;
      *((void *)v6 + 28) = 0;
      *((void *)v6 + 29) = 0;
      long long v18 = v6[15];
      *(void *)(v7 + 256) = *((void *)v6 + 32);
      *(_OWORD *)(v7 + 240) = v18;
      *((void *)v6 + 30) = 0;
      *((void *)v6 + 31) = 0;
      *((void *)v6 + 32) = 0;
      long long v19 = *(long long *)((char *)v6 + 264);
      *(void *)(v7 + 280) = *((void *)v6 + 35);
      *(_OWORD *)(v7 + 264) = v19;
      *((void *)v6 + 33) = 0;
      *((void *)v6 + 34) = 0;
      *((void *)v6 + 35) = 0;
      long long v20 = v6[18];
      *(void *)(v7 + 304) = *((void *)v6 + 38);
      *(_OWORD *)(v7 + 288) = v20;
      *((void *)v6 + 36) = 0;
      *((void *)v6 + 37) = 0;
      *((void *)v6 + 38) = 0;
      long long v21 = *(long long *)((char *)v6 + 312);
      *(void *)(v7 + 328) = *((void *)v6 + 41);
      *(_OWORD *)(v7 + 312) = v21;
      *((void *)v6 + 39) = 0;
      *((void *)v6 + 40) = 0;
      *((void *)v6 + 41) = 0;
      long long v22 = v6[21];
      *(void *)(v7 + 352) = *((void *)v6 + 44);
      *(_OWORD *)(v7 + 336) = v22;
      *((void *)v6 + 42) = 0;
      *((void *)v6 + 43) = 0;
      *((void *)v6 + 44) = 0;
      long long v23 = *(long long *)((char *)v6 + 360);
      *(void *)(v7 + 376) = *((void *)v6 + 47);
      *(_OWORD *)(v7 + 360) = v23;
      *((void *)v6 + 45) = 0;
      *((void *)v6 + 46) = 0;
      *((void *)v6 + 47) = 0;
      long long v24 = v6[24];
      *(void *)(v7 + 400) = *((void *)v6 + 50);
      *(_OWORD *)(v7 + 384) = v24;
      *((void *)v6 + 48) = 0;
      *((void *)v6 + 49) = 0;
      *((void *)v6 + 50) = 0;
      long long v25 = *(long long *)((char *)v6 + 408);
      *(void *)(v7 + 424) = *((void *)v6 + 53);
      *(_OWORD *)(v7 + 408) = v25;
      *((void *)v6 + 51) = 0;
      *((void *)v6 + 52) = 0;
      *((void *)v6 + 53) = 0;
      long long v26 = v6[27];
      *(void *)(v7 + 448) = *((void *)v6 + 56);
      *(_OWORD *)(v7 + 432) = v26;
      *((void *)v6 + 54) = 0;
      *((void *)v6 + 55) = 0;
      *((void *)v6 + 56) = 0;
      long long v27 = *(long long *)((char *)v6 + 456);
      *(void *)(v7 + 472) = *((void *)v6 + 59);
      *(_OWORD *)(v7 + 456) = v27;
      *((void *)v6 + 57) = 0;
      *((void *)v6 + 58) = 0;
      *((void *)v6 + 59) = 0;
      long long v28 = v6[30];
      *(void *)(v7 + 496) = *((void *)v6 + 62);
      *(_OWORD *)(v7 + 480) = v28;
      *((void *)v6 + 60) = 0;
      *((void *)v6 + 61) = 0;
      *((void *)v6 + 62) = 0;
      v7 += 504;
      unint64_t v6 = (long long *)((char *)v6 + 504);
    }
    while ((unint64_t)v6 < a3);
    *(void *)(result + 8) = v7;
    if (v4 == a4) {
      return result;
    }
  }
  uint64_t v29 = 0;
  uint64_t v30 = -8 * ((v4 - a4) >> 3);
  do
  {
    uint64_t v33 = v4 + v29;
    long long v34 = (void **)(v4 + v29 - 504);
    if (*(char *)(v4 + v29 - 481) < 0) {
      operator delete(*v34);
    }
    long long v35 = (long long *)(v5 + v29 - 504);
    long long v36 = *v35;
    *(void *)(v4 + v29 - 488) = *(void *)(v5 + v29 - 488);
    *(_OWORD *)long long v34 = v36;
    *(unsigned char *)(v5 + v29 - 481) = 0;
    *(unsigned char *)long long v35 = 0;
    long long v37 = (void **)(v33 - 480);
    if (*(char *)(v33 - 457) < 0) {
      operator delete(*v37);
    }
    long long v31 = (long long *)(v5 + v29 - 480);
    long long v32 = *v31;
    *(void *)(v33 - 464) = *(void *)(v5 + v29 - 464);
    *(_OWORD *)long long v37 = v32;
    *(unsigned char *)(v5 + v29 - 457) = 0;
    *(unsigned char *)long long v31 = 0;
    double result = sub_293ED0(v4 + v29 - 456, (long long *)(v5 + v29 - 456));
    v29 -= 504;
  }
  while (v30 != v29);
  return result;
}

__n128 sub_293308(long long **a1, long long *a2)
{
  uint64_t v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_34;
  }
  unint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  if (v6 > *a1)
  {
    int64_t v7 = 0xEFBEFBEFBEFBEFBFLL * (((char *)v6 - (char *)*a1) >> 3);
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    if (v6 == v4)
    {
      long long v50 = (long long *)((char *)v6 - 504 * v9);
    }
    else
    {
      uint64_t v11 = -504 * v9;
      do
      {
        uint64_t v13 = (uint64_t)v6 + v11;
        if (*((char *)v6 + v11 + 23) < 0) {
          operator delete(*(void **)v13);
        }
        long long v14 = *v6;
        *(void *)(v13 + 16) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v13 = v14;
        *((unsigned char *)v6 + 23) = 0;
        *(unsigned char *)unint64_t v6 = 0;
        long long v15 = (void **)(v13 + 24);
        if (*(char *)(v13 + 47) < 0) {
          operator delete(*v15);
        }
        long long v12 = *(long long *)((char *)v6 + 24);
        *(void *)(v13 + 40) = *((void *)v6 + 5);
        *(_OWORD *)long long v15 = v12;
        *((unsigned char *)v6 + 47) = 0;
        *((unsigned char *)v6 + 24) = 0;
        sub_293ED0((uint64_t)v6 + v11 + 48, v6 + 3);
        unint64_t v6 = (long long *)((char *)v6 + 504);
      }
      while (v6 != v4);
      uint64_t v4 = a1[1];
      long long v50 = (long long *)((char *)v6 + 504 * v10);
    }
    a1[1] = (long long *)((char *)v4 + 504 * v10);
    a1[2] = v50;
    uint64_t v4 = v50;
    goto LABEL_34;
  }
  unint64_t v16 = 0xDF7DF7DF7DF7DF7ELL * (((char *)v4 - (char *)v5) >> 3);
  if (v4 == v5) {
    unint64_t v16 = 1;
  }
  if (v16 >= 0x82082082082083) {
    sub_188D718();
  }
  unint64_t v17 = v16 >> 2;
  uint64_t v18 = 504 * v16;
  long long v19 = (char *)operator new(504 * v16);
  long long v20 = &v19[504 * v17];
  long long v21 = &v19[v18];
  if (v4 == v6)
  {
    *a1 = (long long *)v19;
    a1[1] = (long long *)v20;
    a1[2] = (long long *)v20;
    a1[3] = (long long *)v21;
  }
  else
  {
    long long v22 = &v20[(char *)v4 - (char *)v6];
    uint64_t v23 = 504 * v17;
    do
    {
      long long v24 = &v19[v23];
      long long v25 = *v6;
      *((void *)v24 + 2) = *((void *)v6 + 2);
      *(_OWORD *)long long v24 = v25;
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 2) = 0;
      *(void *)unint64_t v6 = 0;
      long long v26 = *(long long *)((char *)v6 + 24);
      *((void *)v24 + 5) = *((void *)v6 + 5);
      *(_OWORD *)(v24 + 24) = v26;
      *((void *)v6 + 4) = 0;
      *((void *)v6 + 5) = 0;
      *((void *)v6 + 3) = 0;
      long long v27 = v6[3];
      *((void *)v24 + 8) = *((void *)v6 + 8);
      *((_OWORD *)v24 + 3) = v27;
      *((void *)v6 + 7) = 0;
      *((void *)v6 + 8) = 0;
      *((void *)v6 + 6) = 0;
      long long v28 = *(long long *)((char *)v6 + 72);
      *((void *)v24 + 11) = *((void *)v6 + 11);
      *(_OWORD *)(v24 + 72) = v28;
      *((void *)v6 + 9) = 0;
      *((void *)v6 + 10) = 0;
      *((void *)v6 + 11) = 0;
      long long v29 = v6[6];
      *((void *)v24 + 14) = *((void *)v6 + 14);
      *((_OWORD *)v24 + 6) = v29;
      *((void *)v6 + 12) = 0;
      *((void *)v6 + 13) = 0;
      *((void *)v6 + 14) = 0;
      long long v30 = *(long long *)((char *)v6 + 120);
      *((void *)v24 + 17) = *((void *)v6 + 17);
      *(_OWORD *)(v24 + 120) = v30;
      *((void *)v6 + 15) = 0;
      *((void *)v6 + 16) = 0;
      *((void *)v6 + 17) = 0;
      long long v31 = v6[9];
      *((void *)v24 + 20) = *((void *)v6 + 20);
      *((_OWORD *)v24 + 9) = v31;
      *((void *)v6 + 18) = 0;
      *((void *)v6 + 19) = 0;
      *((void *)v6 + 20) = 0;
      long long v32 = *(long long *)((char *)v6 + 168);
      *((void *)v24 + 23) = *((void *)v6 + 23);
      *(_OWORD *)(v24 + 168) = v32;
      *((void *)v6 + 21) = 0;
      *((void *)v6 + 22) = 0;
      *((void *)v6 + 23) = 0;
      long long v33 = v6[12];
      *((void *)v24 + 26) = *((void *)v6 + 26);
      *((_OWORD *)v24 + 12) = v33;
      *((void *)v6 + 24) = 0;
      *((void *)v6 + 25) = 0;
      *((void *)v6 + 26) = 0;
      long long v34 = *(long long *)((char *)v6 + 216);
      *((void *)v24 + 29) = *((void *)v6 + 29);
      *(_OWORD *)(v24 + 216) = v34;
      *((void *)v6 + 27) = 0;
      *((void *)v6 + 28) = 0;
      *((void *)v6 + 29) = 0;
      long long v35 = v6[15];
      *((void *)v24 + 32) = *((void *)v6 + 32);
      *((_OWORD *)v24 + 15) = v35;
      *((void *)v6 + 30) = 0;
      *((void *)v6 + 31) = 0;
      *((void *)v6 + 32) = 0;
      long long v36 = *(long long *)((char *)v6 + 264);
      *((void *)v24 + 35) = *((void *)v6 + 35);
      *(_OWORD *)&v19[v23 + 264] = v36;
      *((void *)v6 + 33) = 0;
      *((void *)v6 + 34) = 0;
      *((void *)v6 + 35) = 0;
      long long v37 = v6[18];
      *((void *)v24 + 38) = *((void *)v6 + 38);
      *((_OWORD *)v24 + 18) = v37;
      *((void *)v6 + 36) = 0;
      *((void *)v6 + 37) = 0;
      *((void *)v6 + 38) = 0;
      long long v38 = *(long long *)((char *)v6 + 312);
      *((void *)v24 + 41) = *((void *)v6 + 41);
      *(_OWORD *)&v19[v23 + 312] = v38;
      *((void *)v6 + 39) = 0;
      *((void *)v6 + 40) = 0;
      *((void *)v6 + 41) = 0;
      long long v39 = v6[21];
      *((void *)v24 + 44) = *((void *)v6 + 44);
      *((_OWORD *)v24 + 21) = v39;
      *((void *)v6 + 42) = 0;
      *((void *)v6 + 43) = 0;
      *((void *)v6 + 44) = 0;
      long long v40 = *(long long *)((char *)v6 + 360);
      *((void *)v24 + 47) = *((void *)v6 + 47);
      *(_OWORD *)&v19[v23 + 360] = v40;
      *((void *)v6 + 45) = 0;
      *((void *)v6 + 46) = 0;
      *((void *)v6 + 47) = 0;
      long long v41 = v6[24];
      *((void *)v24 + 50) = *((void *)v6 + 50);
      *((_OWORD *)v24 + 24) = v41;
      *((void *)v6 + 48) = 0;
      *((void *)v6 + 49) = 0;
      *((void *)v6 + 50) = 0;
      long long v42 = *(long long *)((char *)v6 + 408);
      *((void *)v24 + 53) = *((void *)v6 + 53);
      *(_OWORD *)&v19[v23 + 408] = v42;
      *((void *)v6 + 51) = 0;
      *((void *)v6 + 52) = 0;
      *((void *)v6 + 53) = 0;
      long long v43 = v6[27];
      *((void *)v24 + 56) = *((void *)v6 + 56);
      *((_OWORD *)v24 + 27) = v43;
      *((void *)v6 + 54) = 0;
      *((void *)v6 + 55) = 0;
      *((void *)v6 + 56) = 0;
      long long v44 = *(long long *)((char *)v6 + 456);
      *((void *)v24 + 59) = *((void *)v6 + 59);
      *(_OWORD *)&v19[v23 + 456] = v44;
      *((void *)v6 + 57) = 0;
      *((void *)v6 + 58) = 0;
      *((void *)v6 + 59) = 0;
      long long v45 = v6[30];
      *((void *)v24 + 62) = *((void *)v6 + 62);
      *((_OWORD *)v24 + 30) = v45;
      *((void *)v6 + 60) = 0;
      *((void *)v6 + 61) = 0;
      *((void *)v6 + 62) = 0;
      v23 += 504;
      unint64_t v6 = (long long *)((char *)v6 + 504);
    }
    while (v24 + 504 != v22);
    unint64_t v5 = *a1;
    uint64_t v46 = a1[1];
    long long v47 = a1[2];
    *a1 = (long long *)v19;
    a1[1] = (long long *)v20;
    a1[2] = (long long *)v22;
    a1[3] = (long long *)v21;
    if (v47 != v46)
    {
      long long v48 = (long long *)((char *)v47 - 504);
      do
      {
        sub_29281C((uint64_t)(v48 + 3));
        if (*((char *)v48 + 47) < 0)
        {
          operator delete(*((void **)v48 + 3));
          if (*((char *)v48 + 23) < 0) {
LABEL_26:
          }
            operator delete(*(void **)v48);
        }
        else if (*((char *)v48 + 23) < 0)
        {
          goto LABEL_26;
        }
        BOOL v49 = v48 == v46;
        long long v48 = (long long *)((char *)v48 - 504);
      }
      while (!v49);
    }
  }
  if (v5) {
    operator delete(v5);
  }
  uint64_t v4 = a1[2];
LABEL_34:
  long long v51 = *a2;
  *((void *)v4 + 2) = *((void *)a2 + 2);
  long long *v4 = v51;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v52 = *(long long *)((char *)a2 + 24);
  *((void *)v4 + 5) = *((void *)a2 + 5);
  *(long long *)((char *)v4 + 24) = v52;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  long long v53 = a2[3];
  *((void *)v4 + 8) = *((void *)a2 + 8);
  v4[3] = v53;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 6) = 0;
  long long v54 = *(long long *)((char *)a2 + 72);
  *((void *)v4 + 11) = *((void *)a2 + 11);
  *(long long *)((char *)v4 + 72) = v54;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 11) = 0;
  long long v55 = a2[6];
  *((void *)v4 + 14) = *((void *)a2 + 14);
  v4[6] = v55;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  long long v56 = *(long long *)((char *)a2 + 120);
  *((void *)v4 + 17) = *((void *)a2 + 17);
  *(long long *)((char *)v4 + 120) = v56;
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  long long v57 = a2[9];
  *((void *)v4 + 20) = *((void *)a2 + 20);
  v4[9] = v57;
  *((void *)a2 + 18) = 0;
  *((void *)a2 + 19) = 0;
  *((void *)a2 + 20) = 0;
  long long v58 = *(long long *)((char *)a2 + 168);
  *((void *)v4 + 23) = *((void *)a2 + 23);
  *(long long *)((char *)v4 + 168) = v58;
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  *((void *)a2 + 23) = 0;
  long long v59 = a2[12];
  *((void *)v4 + 26) = *((void *)a2 + 26);
  v4[12] = v59;
  *((void *)a2 + 24) = 0;
  *((void *)a2 + 25) = 0;
  *((void *)a2 + 26) = 0;
  long long v60 = *(long long *)((char *)a2 + 216);
  *((void *)v4 + 29) = *((void *)a2 + 29);
  *(long long *)((char *)v4 + 216) = v60;
  *((void *)a2 + 27) = 0;
  *((void *)a2 + 28) = 0;
  *((void *)a2 + 29) = 0;
  long long v61 = a2[15];
  *((void *)v4 + 32) = *((void *)a2 + 32);
  v4[15] = v61;
  *((void *)a2 + 30) = 0;
  *((void *)a2 + 31) = 0;
  *((void *)a2 + 32) = 0;
  long long v62 = *(long long *)((char *)a2 + 264);
  *((void *)v4 + 35) = *((void *)a2 + 35);
  *(long long *)((char *)v4 + 264) = v62;
  *((void *)a2 + 33) = 0;
  *((void *)a2 + 34) = 0;
  *((void *)a2 + 35) = 0;
  long long v63 = a2[18];
  *((void *)v4 + 38) = *((void *)a2 + 38);
  v4[18] = v63;
  *((void *)a2 + 36) = 0;
  *((void *)a2 + 37) = 0;
  *((void *)a2 + 38) = 0;
  long long v64 = *(long long *)((char *)a2 + 312);
  *((void *)v4 + 41) = *((void *)a2 + 41);
  *(long long *)((char *)v4 + 312) = v64;
  *((void *)a2 + 39) = 0;
  *((void *)a2 + 40) = 0;
  *((void *)a2 + 41) = 0;
  long long v65 = a2[21];
  *((void *)v4 + 44) = *((void *)a2 + 44);
  v4[21] = v65;
  *((void *)a2 + 42) = 0;
  *((void *)a2 + 43) = 0;
  *((void *)a2 + 44) = 0;
  long long v66 = *(long long *)((char *)a2 + 360);
  *((void *)v4 + 47) = *((void *)a2 + 47);
  *(long long *)((char *)v4 + 360) = v66;
  *((void *)a2 + 45) = 0;
  *((void *)a2 + 46) = 0;
  *((void *)a2 + 47) = 0;
  long long v67 = a2[24];
  *((void *)v4 + 50) = *((void *)a2 + 50);
  v4[24] = v67;
  *((void *)a2 + 48) = 0;
  *((void *)a2 + 49) = 0;
  *((void *)a2 + 50) = 0;
  long long v68 = *(long long *)((char *)a2 + 408);
  *((void *)v4 + 53) = *((void *)a2 + 53);
  *(long long *)((char *)v4 + 408) = v68;
  *((void *)a2 + 51) = 0;
  *((void *)a2 + 52) = 0;
  *((void *)a2 + 53) = 0;
  long long v69 = a2[27];
  *((void *)v4 + 56) = *((void *)a2 + 56);
  v4[27] = v69;
  *((void *)a2 + 54) = 0;
  *((void *)a2 + 55) = 0;
  *((void *)a2 + 56) = 0;
  long long v70 = *(long long *)((char *)a2 + 456);
  *((void *)v4 + 59) = *((void *)a2 + 59);
  *(long long *)((char *)v4 + 456) = v70;
  *((void *)a2 + 57) = 0;
  *((void *)a2 + 58) = 0;
  *((void *)a2 + 59) = 0;
  __n128 result = (__n128)a2[30];
  *((void *)v4 + 62) = *((void *)a2 + 62);
  v4[30] = (__int128)result;
  *((void *)a2 + 60) = 0;
  *((void *)a2 + 61) = 0;
  *((void *)a2 + 62) = 0;
  a1[2] = (long long *)((char *)a1[2] + 504);
  return result;
}

uint64_t sub_293994(long long **a1, void *a2, long long *a3)
{
  uint64_t result = a2[1];
  unint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = a2[1];
    uint64_t v8 = a3;
    do
    {
      uint64_t v6 = v7 - 504;
      uint64_t v9 = (long long *)((char *)v8 - 504);
      long long v10 = *(long long *)((char *)v8 - 504);
      *(void *)(v6 + 16) = *((void *)v8 - 61);
      *(_OWORD *)uint64_t v6 = v10;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *(void *)uint64_t v9 = 0;
      uint64_t v11 = v7 - 480;
      long long v12 = v8 - 30;
      long long v13 = *(v8 - 30);
      *(void *)(v11 + 16) = *((void *)v8 - 58);
      *(_OWORD *)uint64_t v11 = v13;
      *((void *)v12 + 1) = 0;
      *((void *)v12 + 2) = 0;
      *(void *)long long v12 = 0;
      uint64_t v14 = v7 - 456;
      long long v15 = (void *)v8 - 57;
      long long v16 = *(long long *)((char *)v8 - 456);
      *(void *)(v14 + 16) = *((void *)v8 - 55);
      *(_OWORD *)uint64_t v14 = v16;
      v15[1] = 0;
      v15[2] = 0;
      *long long v15 = 0;
      uint64_t v17 = v7 - 432;
      uint64_t v18 = v8 - 27;
      long long v19 = *(v8 - 27);
      *(void *)(v17 + 16) = *((void *)v8 - 52);
      *(_OWORD *)uint64_t v17 = v19;
      *((void *)v8 - 53) = 0;
      *(void *)uint64_t v18 = 0;
      *((void *)v18 + 2) = 0;
      uint64_t v20 = v7 - 408;
      long long v21 = (void *)v8 - 51;
      long long v22 = *(long long *)((char *)v8 - 408);
      *(void *)(v20 + 16) = *((void *)v8 - 49);
      *(_OWORD *)uint64_t v20 = v22;
      *((void *)v8 - 50) = 0;
      *long long v21 = 0;
      v21[2] = 0;
      uint64_t v23 = v7 - 384;
      long long v24 = v8 - 24;
      long long v25 = *(v8 - 24);
      *(void *)(v23 + 16) = *((void *)v8 - 46);
      *(_OWORD *)uint64_t v23 = v25;
      *((void *)v8 - 47) = 0;
      *(void *)long long v24 = 0;
      *((void *)v24 + 2) = 0;
      uint64_t v26 = v7 - 360;
      long long v27 = (void *)v8 - 45;
      long long v28 = *(long long *)((char *)v8 - 360);
      *(void *)(v26 + 16) = *((void *)v8 - 43);
      *(_OWORD *)uint64_t v26 = v28;
      *((void *)v8 - 44) = 0;
      *long long v27 = 0;
      v27[2] = 0;
      uint64_t v29 = v7 - 336;
      long long v30 = v8 - 21;
      long long v31 = *(v8 - 21);
      *(void *)(v29 + 16) = *((void *)v8 - 40);
      *(_OWORD *)uint64_t v29 = v31;
      *((void *)v8 - 41) = 0;
      *(void *)long long v30 = 0;
      *((void *)v30 + 2) = 0;
      uint64_t v32 = v7 - 312;
      long long v33 = (void *)v8 - 39;
      long long v34 = *(long long *)((char *)v8 - 312);
      *(void *)(v32 + 16) = *((void *)v8 - 37);
      *(_OWORD *)uint64_t v32 = v34;
      *((void *)v8 - 38) = 0;
      *long long v33 = 0;
      v33[2] = 0;
      uint64_t v35 = v7 - 288;
      long long v36 = v8 - 18;
      long long v37 = *(v8 - 18);
      *(void *)(v35 + 16) = *((void *)v8 - 34);
      *(_OWORD *)uint64_t v35 = v37;
      *((void *)v8 - 35) = 0;
      *(void *)long long v36 = 0;
      *((void *)v36 + 2) = 0;
      long long v38 = *(long long *)((char *)v8 - 264);
      *(void *)(v7 - 248) = *((void *)v8 - 31);
      *(_OWORD *)(v7 - 264) = v38;
      *((void *)v8 - 33) = 0;
      *((void *)v8 - 32) = 0;
      *((void *)v8 - 31) = 0;
      long long v39 = *(v8 - 15);
      *(void *)(v7 - 224) = *((void *)v8 - 28);
      *(_OWORD *)(v7 - 240) = v39;
      *((void *)v8 - 30) = 0;
      *((void *)v8 - 29) = 0;
      *((void *)v8 - 28) = 0;
      long long v40 = *(long long *)((char *)v8 - 216);
      *(void *)(v7 - 200) = *((void *)v8 - 25);
      *(_OWORD *)(v7 - 216) = v40;
      *((void *)v8 - 27) = 0;
      *((void *)v8 - 26) = 0;
      *((void *)v8 - 25) = 0;
      long long v41 = *(v8 - 12);
      *(void *)(v7 - 176) = *((void *)v8 - 22);
      *(_OWORD *)(v7 - 192) = v41;
      *((void *)v8 - 24) = 0;
      *((void *)v8 - 23) = 0;
      *((void *)v8 - 22) = 0;
      long long v42 = *(long long *)((char *)v8 - 168);
      *(void *)(v7 - 152) = *((void *)v8 - 19);
      *(_OWORD *)(v7 - 168) = v42;
      *((void *)v8 - 21) = 0;
      *((void *)v8 - 20) = 0;
      *((void *)v8 - 19) = 0;
      long long v43 = *(v8 - 9);
      *(void *)(v7 - 128) = *((void *)v8 - 16);
      *(_OWORD *)(v7 - 144) = v43;
      *((void *)v8 - 18) = 0;
      *((void *)v8 - 17) = 0;
      *((void *)v8 - 16) = 0;
      long long v44 = *(long long *)((char *)v8 - 120);
      *(void *)(v7 - 104) = *((void *)v8 - 13);
      *(_OWORD *)(v7 - 120) = v44;
      *((void *)v8 - 15) = 0;
      *((void *)v8 - 14) = 0;
      *((void *)v8 - 13) = 0;
      long long v45 = *(v8 - 6);
      *(void *)(v7 - 80) = *((void *)v8 - 10);
      *(_OWORD *)(v7 - 96) = v45;
      *((void *)v8 - 12) = 0;
      *((void *)v8 - 11) = 0;
      *((void *)v8 - 10) = 0;
      long long v46 = *(long long *)((char *)v8 - 72);
      *(void *)(v7 - 56) = *((void *)v8 - 7);
      *(_OWORD *)(v7 - 72) = v46;
      *((void *)v8 - 9) = 0;
      *((void *)v8 - 8) = 0;
      *((void *)v8 - 7) = 0;
      long long v47 = *(v8 - 3);
      *(void *)(v7 - 32) = *((void *)v8 - 4);
      *(_OWORD *)(v7 - 48) = v47;
      *((void *)v8 - 6) = 0;
      *((void *)v8 - 5) = 0;
      *((void *)v8 - 4) = 0;
      long long v48 = *(long long *)((char *)v8 - 24);
      *(void *)(v7 - 8) = *((void *)v8 - 1);
      *(_OWORD *)(v7 - 24) = v48;
      *((void *)v8 - 3) = 0;
      *((void *)v8 - 2) = 0;
      *((void *)v8 - 1) = 0;
      v7 -= 504;
      uint64_t v8 = (long long *)((char *)v8 - 504);
    }
    while (v9 != v5);
  }
  a2[1] = v6;
  BOOL v49 = a1[1];
  uint64_t v50 = a2[2];
  if (v49 != a3)
  {
    do
    {
      long long v51 = *a3;
      *(void *)(v50 + 16) = *((void *)a3 + 2);
      *(_OWORD *)uint64_t v50 = v51;
      *((void *)a3 + 1) = 0;
      *((void *)a3 + 2) = 0;
      *(void *)a3 = 0;
      long long v52 = *(long long *)((char *)a3 + 24);
      *(void *)(v50 + 40) = *((void *)a3 + 5);
      *(_OWORD *)(v50 + 24) = v52;
      *((void *)a3 + 4) = 0;
      *((void *)a3 + 5) = 0;
      *((void *)a3 + 3) = 0;
      long long v53 = a3[3];
      *(void *)(v50 + 64) = *((void *)a3 + 8);
      *(_OWORD *)(v50 + 48) = v53;
      *((void *)a3 + 7) = 0;
      *((void *)a3 + 8) = 0;
      *((void *)a3 + 6) = 0;
      long long v54 = *(long long *)((char *)a3 + 72);
      *(void *)(v50 + 88) = *((void *)a3 + 11);
      *(_OWORD *)(v50 + 72) = v54;
      *((void *)a3 + 9) = 0;
      *((void *)a3 + 10) = 0;
      *((void *)a3 + 11) = 0;
      long long v55 = a3[6];
      *(void *)(v50 + 112) = *((void *)a3 + 14);
      *(_OWORD *)(v50 + 96) = v55;
      *((void *)a3 + 12) = 0;
      *((void *)a3 + 13) = 0;
      *((void *)a3 + 14) = 0;
      long long v56 = *(long long *)((char *)a3 + 120);
      *(void *)(v50 + 136) = *((void *)a3 + 17);
      *(_OWORD *)(v50 + 120) = v56;
      *((void *)a3 + 15) = 0;
      *((void *)a3 + 16) = 0;
      *((void *)a3 + 17) = 0;
      long long v57 = a3[9];
      *(void *)(v50 + 160) = *((void *)a3 + 20);
      *(_OWORD *)(v50 + 144) = v57;
      *((void *)a3 + 18) = 0;
      *((void *)a3 + 19) = 0;
      *((void *)a3 + 20) = 0;
      long long v58 = *(long long *)((char *)a3 + 168);
      *(void *)(v50 + 184) = *((void *)a3 + 23);
      *(_OWORD *)(v50 + 168) = v58;
      *((void *)a3 + 21) = 0;
      *((void *)a3 + 22) = 0;
      *((void *)a3 + 23) = 0;
      long long v59 = a3[12];
      *(void *)(v50 + 208) = *((void *)a3 + 26);
      *(_OWORD *)(v50 + 192) = v59;
      *((void *)a3 + 24) = 0;
      *((void *)a3 + 25) = 0;
      *((void *)a3 + 26) = 0;
      long long v60 = *(long long *)((char *)a3 + 216);
      *(void *)(v50 + 232) = *((void *)a3 + 29);
      *(_OWORD *)(v50 + 216) = v60;
      *((void *)a3 + 27) = 0;
      *((void *)a3 + 28) = 0;
      *((void *)a3 + 29) = 0;
      long long v61 = a3[15];
      *(void *)(v50 + 256) = *((void *)a3 + 32);
      *(_OWORD *)(v50 + 240) = v61;
      *((void *)a3 + 30) = 0;
      *((void *)a3 + 31) = 0;
      *((void *)a3 + 32) = 0;
      long long v62 = *(long long *)((char *)a3 + 264);
      *(void *)(v50 + 280) = *((void *)a3 + 35);
      *(_OWORD *)(v50 + 264) = v62;
      *((void *)a3 + 33) = 0;
      *((void *)a3 + 34) = 0;
      *((void *)a3 + 35) = 0;
      long long v63 = a3[18];
      *(void *)(v50 + 304) = *((void *)a3 + 38);
      *(_OWORD *)(v50 + 288) = v63;
      *((void *)a3 + 36) = 0;
      *((void *)a3 + 37) = 0;
      *((void *)a3 + 38) = 0;
      long long v64 = *(long long *)((char *)a3 + 312);
      *(void *)(v50 + 328) = *((void *)a3 + 41);
      *(_OWORD *)(v50 + 312) = v64;
      *((void *)a3 + 39) = 0;
      *((void *)a3 + 40) = 0;
      *((void *)a3 + 41) = 0;
      long long v65 = a3[21];
      *(void *)(v50 + 352) = *((void *)a3 + 44);
      *(_OWORD *)(v50 + 336) = v65;
      *((void *)a3 + 42) = 0;
      *((void *)a3 + 43) = 0;
      *((void *)a3 + 44) = 0;
      long long v66 = *(long long *)((char *)a3 + 360);
      *(void *)(v50 + 376) = *((void *)a3 + 47);
      *(_OWORD *)(v50 + 360) = v66;
      *((void *)a3 + 45) = 0;
      *((void *)a3 + 46) = 0;
      *((void *)a3 + 47) = 0;
      long long v67 = a3[24];
      *(void *)(v50 + 400) = *((void *)a3 + 50);
      *(_OWORD *)(v50 + 384) = v67;
      *((void *)a3 + 48) = 0;
      *((void *)a3 + 49) = 0;
      *((void *)a3 + 50) = 0;
      long long v68 = *(long long *)((char *)a3 + 408);
      *(void *)(v50 + 424) = *((void *)a3 + 53);
      *(_OWORD *)(v50 + 408) = v68;
      *((void *)a3 + 51) = 0;
      *((void *)a3 + 52) = 0;
      *((void *)a3 + 53) = 0;
      long long v69 = a3[27];
      *(void *)(v50 + 448) = *((void *)a3 + 56);
      *(_OWORD *)(v50 + 432) = v69;
      *((void *)a3 + 54) = 0;
      *((void *)a3 + 55) = 0;
      *((void *)a3 + 56) = 0;
      long long v70 = *(long long *)((char *)a3 + 456);
      *(void *)(v50 + 472) = *((void *)a3 + 59);
      *(_OWORD *)(v50 + 456) = v70;
      *((void *)a3 + 57) = 0;
      *((void *)a3 + 58) = 0;
      *((void *)a3 + 59) = 0;
      long long v71 = a3[30];
      *(void *)(v50 + 496) = *((void *)a3 + 62);
      *(_OWORD *)(v50 + 480) = v71;
      *((void *)a3 + 60) = 0;
      *((void *)a3 + 61) = 0;
      *((void *)a3 + 62) = 0;
      v50 += 504;
      a3 = (long long *)((char *)a3 + 504);
    }
    while (a3 != v49);
    uint64_t v6 = a2[1];
  }
  a2[2] = v50;
  unint64_t v72 = *a1;
  *a1 = (long long *)v6;
  a2[1] = v72;
  uint8x8_t v73 = a1[1];
  a1[1] = (long long *)a2[2];
  a2[2] = v73;
  uint64_t v74 = a1[2];
  a1[2] = (long long *)a2[3];
  a2[3] = v74;
  *a2 = a2[1];
  return result;
}

uint64_t sub_293ED0(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  unint64_t v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)unint64_t v5 = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  uint64_t v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*v7);
  }
  long long v8 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)uint64_t v7 = v8;
  *((unsigned char *)a2 + 71) = 0;
  *((unsigned char *)a2 + 48) = 0;
  uint64_t v9 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v9);
  }
  long long v10 = *(long long *)((char *)a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(_OWORD *)uint64_t v9 = v10;
  *((unsigned char *)a2 + 95) = 0;
  *((unsigned char *)a2 + 72) = 0;
  uint64_t v11 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v11);
  }
  long long v12 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)uint64_t v11 = v12;
  *((unsigned char *)a2 + 119) = 0;
  *((unsigned char *)a2 + 96) = 0;
  long long v13 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*v13);
  }
  long long v14 = *(long long *)((char *)a2 + 120);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  *(_OWORD *)long long v13 = v14;
  *((unsigned char *)a2 + 143) = 0;
  *((unsigned char *)a2 + 120) = 0;
  long long v15 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*v15);
  }
  long long v16 = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(_OWORD *)long long v15 = v16;
  *((unsigned char *)a2 + 167) = 0;
  *((unsigned char *)a2 + 144) = 0;
  uint64_t v17 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*v17);
  }
  long long v18 = *(long long *)((char *)a2 + 168);
  *(void *)(a1 + 184) = *((void *)a2 + 23);
  *(_OWORD *)uint64_t v17 = v18;
  *((unsigned char *)a2 + 191) = 0;
  *((unsigned char *)a2 + 168) = 0;
  long long v19 = (void **)(a1 + 192);
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*v19);
  }
  long long v20 = a2[12];
  *(void *)(a1 + 208) = *((void *)a2 + 26);
  *(_OWORD *)long long v19 = v20;
  *((unsigned char *)a2 + 215) = 0;
  *((unsigned char *)a2 + 192) = 0;
  long long v21 = (void **)(a1 + 216);
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*v21);
  }
  long long v22 = *(long long *)((char *)a2 + 216);
  *(void *)(a1 + 232) = *((void *)a2 + 29);
  *(_OWORD *)long long v21 = v22;
  *((unsigned char *)a2 + 239) = 0;
  *((unsigned char *)a2 + 216) = 0;
  uint64_t v23 = (void **)(a1 + 240);
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*v23);
  }
  long long v24 = a2[15];
  *(void *)(a1 + 256) = *((void *)a2 + 32);
  *(_OWORD *)uint64_t v23 = v24;
  *((unsigned char *)a2 + 263) = 0;
  *((unsigned char *)a2 + 240) = 0;
  long long v25 = (void **)(a1 + 264);
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*v25);
  }
  long long v26 = *(long long *)((char *)a2 + 264);
  *(void *)(a1 + 280) = *((void *)a2 + 35);
  *(_OWORD *)long long v25 = v26;
  *((unsigned char *)a2 + 287) = 0;
  *((unsigned char *)a2 + 264) = 0;
  long long v27 = (void **)(a1 + 288);
  if (*(char *)(a1 + 311) < 0) {
    operator delete(*v27);
  }
  long long v28 = a2[18];
  *(void *)(a1 + 304) = *((void *)a2 + 38);
  *(_OWORD *)long long v27 = v28;
  *((unsigned char *)a2 + 311) = 0;
  *((unsigned char *)a2 + 288) = 0;
  uint64_t v29 = (void **)(a1 + 312);
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*v29);
  }
  long long v30 = *(long long *)((char *)a2 + 312);
  *(void *)(a1 + 328) = *((void *)a2 + 41);
  *(_OWORD *)uint64_t v29 = v30;
  *((unsigned char *)a2 + 335) = 0;
  *((unsigned char *)a2 + 312) = 0;
  long long v31 = (void **)(a1 + 336);
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*v31);
  }
  long long v32 = a2[21];
  *(void *)(a1 + 352) = *((void *)a2 + 44);
  *(_OWORD *)long long v31 = v32;
  *((unsigned char *)a2 + 359) = 0;
  *((unsigned char *)a2 + 336) = 0;
  long long v33 = (void **)(a1 + 360);
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*v33);
  }
  long long v34 = *(long long *)((char *)a2 + 360);
  *(void *)(a1 + 376) = *((void *)a2 + 47);
  *(_OWORD *)long long v33 = v34;
  *((unsigned char *)a2 + 383) = 0;
  *((unsigned char *)a2 + 360) = 0;
  uint64_t v35 = (void **)(a1 + 384);
  if (*(char *)(a1 + 407) < 0) {
    operator delete(*v35);
  }
  long long v36 = a2[24];
  *(void *)(a1 + 400) = *((void *)a2 + 50);
  *(_OWORD *)uint64_t v35 = v36;
  *((unsigned char *)a2 + 407) = 0;
  *((unsigned char *)a2 + 384) = 0;
  long long v37 = (void **)(a1 + 408);
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*v37);
  }
  long long v38 = *(long long *)((char *)a2 + 408);
  *(void *)(a1 + 424) = *((void *)a2 + 53);
  *(_OWORD *)long long v37 = v38;
  *((unsigned char *)a2 + 431) = 0;
  *((unsigned char *)a2 + 408) = 0;
  long long v39 = (void **)(a1 + 432);
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*v39);
  }
  long long v40 = a2[27];
  *(void *)(a1 + 448) = *((void *)a2 + 56);
  *(_OWORD *)long long v39 = v40;
  *((unsigned char *)a2 + 455) = 0;
  *((unsigned char *)a2 + 432) = 0;
  return a1;
}

long long **sub_294270@<X0>(long long **result@<X0>, void (*a2)(void **__return_ptr, char *)@<X1>, uint64_t a3@<X8>)
{
  void (*v8)(void **__return_ptr, char *);

  uint64_t v7 = 0;
  long long v8 = a2;
  long long v6 = 0u;
  if (result)
  {
    long long v4 = (unsigned int *)result;
    sub_76C8C((uint64_t)&v6, *(unsigned int *)result);
    uint64_t result = sub_294508(v4, (long long **)&v6, *((uint64_t *)&v6 + 1), &v8);
    uint64_t v5 = v7;
    *(_OWORD *)a3 = v6;
    *(void *)(a3 + 16) = v5;
  }
  else
  {
    *(_OWORD *)a3 = 0uLL;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_2942F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9)
{
  if (a9) {
    sub_20A6BB0(&a9, a9);
  }
  _Unwind_Resume(exception_object);
}

double sub_294314@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  long long v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u || (uint64_t v5 = v4[2]) == 0)
  {
    HIBYTE(v25) = 0;
    LOBYTE(__dst) = 0;
    goto LABEL_8;
  }
  long long v6 = (unsigned int *)((char *)a1 + v5);
  uint64_t v7 = *v6;
  uint64_t v9 = (char *)v6 + v7 + 4;
  size_t v8 = *(unsigned int *)((char *)v6 + v7);
  if (v8 >= 0x17)
  {
    uint64_t v20 = (v8 & 0xFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v20 = v8 | 7;
    }
    uint64_t v21 = v20 + 1;
    p_dst = (long long *)operator new(v20 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v25 = v21 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v25) = *(unsigned int *)((char *)v6 + v7);
    p_dst = &__dst;
    if (!v8)
    {
      *((unsigned char *)&__dst + v8) = 0;
      if (*(char *)(a2 + 23) < 0) {
        goto LABEL_20;
      }
      goto LABEL_8;
    }
  }
  memcpy(p_dst, v9, v8);
  *((unsigned char *)p_dst + v8) = 0;
  if (*(char *)(a2 + 23) < 0) {
LABEL_20:
  }
    operator delete(*(void **)a2);
LABEL_8:
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v25;
  uint64_t v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u)
  {
    uint64_t v12 = v11[3];
    if (v12)
    {
      long long v13 = (unsigned int *)((char *)a1 + v12);
      uint64_t v14 = *v13;
      long long v16 = (char *)v13 + v14 + 4;
      size_t v15 = *(unsigned int *)((char *)v13 + v14);
      if (v15 >= 0x17)
      {
        uint64_t v22 = (v15 & 0xFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17) {
          uint64_t v22 = v15 | 7;
        }
        uint64_t v23 = v22 + 1;
        uint64_t v17 = (long long *)operator new(v22 + 1);
        *((void *)&__dst + 1) = v15;
        unint64_t v25 = v23 | 0x8000000000000000;
        *(void *)&long long __dst = v17;
      }
      else
      {
        HIBYTE(v25) = *(unsigned int *)((char *)v13 + v14);
        uint64_t v17 = &__dst;
        if (!v15)
        {
LABEL_25:
          *((unsigned char *)v17 + v15) = 0;
          uint64_t v18 = a2 + 24;
          if ((*(char *)(a2 + 47) & 0x80000000) == 0) {
            goto LABEL_15;
          }
          goto LABEL_14;
        }
      }
      memcpy(v17, v16, v15);
      goto LABEL_25;
    }
  }
  HIBYTE(v25) = 0;
  LOBYTE(__dst) = 0;
  uint64_t v18 = a2 + 24;
  if (*(char *)(a2 + 47) < 0) {
LABEL_14:
  }
    operator delete(*(void **)v18);
LABEL_15:
  double result = *(double *)&__dst;
  *(_OWORD *)uint64_t v18 = __dst;
  *(void *)(v18 + 16) = v25;
  return result;
}

void sub_2944E0(_Unwind_Exception *a1)
{
  sub_1B23C(v1);
  _Unwind_Resume(a1);
}

void sub_2944F4(_Unwind_Exception *a1)
{
  sub_1B23C(v1);
  _Unwind_Resume(a1);
}

long long **sub_294508(unsigned int *a1, long long **a2, uint64_t a3, void (**a4)(void **__return_ptr, char *))
{
  void (*v9)(void **__return_ptr, char *);
  long long *v10;
  void *v12[2];
  char v13;
  void *__p;
  char v15;

  uint64_t v7 = (char *)(a1 + 1);
  uint64_t v6 = *a1;
  if (v6)
  {
    uint64_t v8 = 4 * v6;
    uint64_t v9 = *a4;
    (*a4)(v12, &v7[*(unsigned int *)v7]);
    while (1)
    {
      long long v10 = sub_294604(a2, a3, (uint64_t)v12);
      if (v15 < 0)
      {
        operator delete(__p);
        if ((v13 & 0x80000000) == 0) {
          goto LABEL_3;
        }
      }
      else if ((v13 & 0x80000000) == 0)
      {
        goto LABEL_3;
      }
      operator delete(v12[0]);
LABEL_3:
      a3 = (uint64_t)(v10 + 3);
      v7 += 4;
      v8 -= 4;
      if (!v8) {
        return a2;
      }
      v9(v12, &v7[*(unsigned int *)v7]);
    }
  }
  return a2;
}

void sub_2945C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

long long *sub_294604(long long **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 48;
  uint64_t v8 = &(*a1)[3 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v5) >> 4) + 1;
    if (v26 > 0x555555555555555) {
      sub_2E00();
    }
    unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v5) >> 4);
    if (2 * v27 > v26) {
      unint64_t v26 = 2 * v27;
    }
    if (v27 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v28 = 0x555555555555555;
    }
    else {
      unint64_t v28 = v26;
    }
    long long v54 = a1 + 2;
    if (v28)
    {
      if (v28 > 0x555555555555555) {
        sub_188D718();
      }
      uint64_t v29 = (long long *)operator new(48 * v28);
    }
    else
    {
      uint64_t v29 = 0;
    }
    uint64_t v50 = v29;
    long long v51 = &v29[3 * v7];
    long long v52 = v51;
    long long v53 = &v29[3 * v28];
    sub_294A40(&v50, (long long *)a3);
    long long v36 = v51;
    long long v37 = *a1;
    long long v38 = v51;
    if (*a1 != v8)
    {
      long long v39 = v51;
      long long v40 = v8;
      do
      {
        long long v38 = v39 - 3;
        long long v41 = *(v40 - 3);
        *((void *)v39 - 4) = *((void *)v40 - 4);
        *(v39 - 3) = v41;
        *((void *)v40 - 5) = 0;
        *((void *)v40 - 4) = 0;
        *((void *)v40 - 6) = 0;
        long long v42 = *(long long *)((char *)v40 - 24);
        *((void *)v39 - 1) = *((void *)v40 - 1);
        *(long long *)((char *)v39 - 24) = v42;
        *((void *)v40 - 2) = 0;
        *((void *)v40 - 1) = 0;
        *((void *)v40 - 3) = 0;
        v39 -= 3;
        v40 -= 3;
      }
      while (v40 != v37);
    }
    long long v51 = v38;
    long long v43 = a1[1];
    long long v44 = v52;
    if (v43 != v8)
    {
      do
      {
        long long v45 = *v8;
        *((void *)v44 + 2) = *((void *)v8 + 2);
        *long long v44 = v45;
        *((void *)v8 + 1) = 0;
        *((void *)v8 + 2) = 0;
        *(void *)uint64_t v8 = 0;
        long long v46 = *(long long *)((char *)v8 + 24);
        *((void *)v44 + 5) = *((void *)v8 + 5);
        *(long long *)((char *)v44 + 24) = v46;
        *((void *)v8 + 4) = 0;
        *((void *)v8 + 5) = 0;
        *((void *)v8 + 3) = 0;
        v44 += 3;
        v8 += 3;
      }
      while (v8 != v43);
      long long v38 = v51;
      uint64_t v8 = a1[1];
    }
    long long v47 = *a1;
    *a1 = v38;
    a1[1] = v44;
    long long v48 = a1[2];
    a1[2] = v53;
    long long v52 = v8;
    long long v53 = v48;
    uint64_t v50 = v47;
    long long v51 = v47;
    if (v8 == v47)
    {
      if (!v8) {
        return v36;
      }
      goto LABEL_36;
    }
    while (1)
    {
      long long v52 = v8 - 3;
      if (*((char *)v8 - 1) < 0)
      {
        operator delete(*((void **)v8 - 3));
        if (*((char *)v8 - 25) < 0) {
LABEL_44:
        }
          operator delete(*((void **)v8 - 6));
      }
      else if (*((char *)v8 - 25) < 0)
      {
        goto LABEL_44;
      }
      uint64_t v8 = v52;
      if (v52 == v47)
      {
        uint64_t v8 = v50;
        if (!v50) {
          return v36;
        }
LABEL_36:
        operator delete(v8);
        return v36;
      }
    }
  }
  if (v8 == (long long *)v6)
  {
    long long v33 = *(_OWORD *)a3;
    *((void *)v8 + 2) = *(void *)(a3 + 16);
    long long *v8 = v33;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    long long v34 = &v5[3 * v7];
    long long v35 = *(_OWORD *)(a3 + 24);
    *((void *)v34 + 5) = *(void *)(a3 + 40);
    *(long long *)((char *)v34 + 24) = v35;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 24) = 0;
    a1[1] = v8 + 3;
  }
  else
  {
    long long v10 = v8 + 3;
    unint64_t v11 = v6 - 48;
    uint64_t v12 = a1[1];
    if (v6 >= 0x30)
    {
      do
      {
        long long v13 = *(_OWORD *)v11;
        *((void *)v12 + 2) = *(void *)(v11 + 16);
        *uint64_t v12 = v13;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        *(void *)unint64_t v11 = 0;
        long long v14 = *(_OWORD *)(v11 + 24);
        *((void *)v12 + 5) = *(void *)(v11 + 40);
        *(long long *)((char *)v12 + 24) = v14;
        *(void *)(v11 + 32) = 0;
        *(void *)(v11 + 40) = 0;
        *(void *)(v11 + 24) = 0;
        v12 += 3;
        v11 += 48;
      }
      while (v11 < v6);
    }
    a1[1] = v12;
    if ((long long *)v6 != v10)
    {
      unint64_t v15 = 0;
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v10) >> 4);
      uint64_t v17 = -48 * v16;
      uint64_t v18 = &v5[3 * v7 + 3 * v16];
      do
      {
        unint64_t v21 = v6 + v15;
        uint64_t v22 = (void **)(v6 + v15 - 48);
        if (*(char *)(v6 + v15 - 25) < 0) {
          operator delete(*v22);
        }
        uint64_t v23 = &v18[v15 / 0x10 - 3];
        long long v24 = *v23;
        *(void *)(v6 + v15 - 32) = *(void *)&v18[v15 / 0x10 - 2];
        *(_OWORD *)uint64_t v22 = v24;
        *((unsigned char *)&v18[v15 / 0x10 - 1] - 9) = 0;
        *(unsigned char *)uint64_t v23 = 0;
        unint64_t v25 = (void **)(v21 - 24);
        if (*(char *)(v21 - 1) < 0) {
          operator delete(*v25);
        }
        long long v19 = &v18[v15 / 0x10];
        long long v20 = *(long long *)((char *)&v18[v15 / 0x10 - 1] - 8);
        *(void *)(v21 - 8) = *((void *)&v18[v15 / 0x10 - 1] + 1);
        *(_OWORD *)unint64_t v25 = v20;
        *((unsigned char *)v19 - 1) = 0;
        *((unsigned char *)v19 - 24) = 0;
        v15 -= 48;
      }
      while (v17 != v15);
    }
    if (*((char *)v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    long long v30 = *(_OWORD *)a3;
    *((void *)v8 + 2) = *(void *)(a3 + 16);
    long long *v8 = v30;
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
    long long v31 = (void **)&v5[3 * v7 + 1] + 1;
    if (*((char *)v8 + 47) < 0) {
      operator delete(*v31);
    }
    long long v32 = *(_OWORD *)(a3 + 24);
    *((void *)&v5[3 * v7 + 2] + 1) = *(void *)(a3 + 40);
    *(_OWORD *)long long v31 = v32;
    *(unsigned char *)(a3 + 47) = 0;
    *(unsigned char *)(a3 + 24) = 0;
  }
  return v8;
}

void sub_294A2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_75890((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_294A40(long long **a1, long long *a2)
{
  long long v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_34;
  }
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  if (v6 > *a1)
  {
    int64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 - *a1);
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    if (v6 == v4)
    {
      uint64_t v29 = &v6[-3 * v9];
    }
    else
    {
      uint64_t v11 = -3 * v9;
      do
      {
        long long v13 = &v6[v11];
        if (SBYTE7(v6[v11 + 1]) < 0) {
          operator delete(*(void **)v13);
        }
        long long v14 = *v6;
        *((void *)v13 + 2) = *((void *)v6 + 2);
        *long long v13 = v14;
        *((unsigned char *)v6 + 23) = 0;
        *(unsigned char *)unint64_t v6 = 0;
        unint64_t v15 = (void **)v13 + 3;
        if (*((char *)v13 + 47) < 0) {
          operator delete(*v15);
        }
        long long v12 = *(long long *)((char *)v6 + 24);
        *((void *)v13 + 5) = *((void *)v6 + 5);
        *(_OWORD *)unint64_t v15 = v12;
        *((unsigned char *)v6 + 47) = 0;
        *((unsigned char *)v6 + 24) = 0;
        v6 += 3;
      }
      while (v6 != v4);
      long long v4 = a1[1];
      uint64_t v29 = &v6[3 * v10];
    }
    a1[1] = &v4[3 * v10];
    a1[2] = v29;
    long long v4 = v29;
    goto LABEL_34;
  }
  unint64_t v16 = 0x5555555555555556 * (v4 - v5);
  if (v4 == v5) {
    unint64_t v16 = 1;
  }
  if (v16 >= 0x555555555555556) {
    sub_188D718();
  }
  unint64_t v17 = v16 >> 2;
  uint64_t v18 = 48 * v16;
  long long v19 = (char *)operator new(48 * v16);
  long long v20 = &v19[48 * v17];
  unint64_t v21 = &v19[v18];
  if (v4 != v6)
  {
    uint64_t v22 = &v20[(char *)v4 - (char *)v6];
    uint64_t v23 = 48 * v17;
    do
    {
      long long v24 = &v19[v23];
      long long v25 = *v6;
      *((void *)v24 + 2) = *((void *)v6 + 2);
      *(_OWORD *)long long v24 = v25;
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 2) = 0;
      *(void *)unint64_t v6 = 0;
      long long v26 = *(long long *)((char *)v6 + 24);
      *((void *)v24 + 5) = *((void *)v6 + 5);
      *(_OWORD *)(v24 + 24) = v26;
      *((void *)v6 + 4) = 0;
      *((void *)v6 + 5) = 0;
      *((void *)v6 + 3) = 0;
      v23 += 48;
      v6 += 3;
    }
    while (v24 + 48 != v22);
    uint64_t v5 = *a1;
    unint64_t v27 = a1[1];
    unint64_t v28 = a1[2];
    *a1 = (long long *)v19;
    a1[1] = (long long *)v20;
    a1[2] = (long long *)v22;
    a1[3] = (long long *)v21;
    while (1)
    {
      if (v28 == v27) {
        goto LABEL_31;
      }
      if (*((char *)v28 - 1) < 0)
      {
        operator delete(*((void **)v28 - 3));
        if ((*((char *)v28 - 25) & 0x80000000) == 0) {
          goto LABEL_20;
        }
      }
      else if ((*((char *)v28 - 25) & 0x80000000) == 0)
      {
        goto LABEL_20;
      }
      operator delete(*((void **)v28 - 6));
LABEL_20:
      v28 -= 3;
    }
  }
  *a1 = (long long *)v19;
  a1[1] = (long long *)v20;
  a1[2] = (long long *)v20;
  a1[3] = (long long *)v21;
LABEL_31:
  if (v5) {
    operator delete(v5);
  }
  long long v4 = a1[2];
LABEL_34:
  long long v30 = *a2;
  *((void *)v4 + 2) = *((void *)a2 + 2);
  long long *v4 = v30;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  __n128 result = *(__n128 *)((char *)a2 + 24);
  *((void *)v4 + 5) = *((void *)a2 + 5);
  *(long long *)((char *)v4 + 24) = (__int128)result;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  a1[2] += 3;
  return result;
}

char *sub_294CB4(void **a1, unsigned char *a2, _DWORD *a3)
{
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 2;
  uint64_t v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_DWORD *)uint64_t v9 = *a3;
      a1[1] = v9 + 4;
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 4);
    uint64_t v12 = v11 >> 2;
    long long v13 = (int *)(v5 - 4);
    if (v5 < 4)
    {
      long long v19 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      unint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 4;
      if (v5 > v16) {
        unint64_t v16 = (unint64_t)a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x2C)
      {
        long long v19 = a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        long long v19 = a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 2) + 1;
          uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
          long long v13 = (int *)((char *)v13 + v21);
          long long v19 = (_DWORD *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          uint64_t v23 = (long long *)(4 * v12 + 4 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            _OWORD *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 8;
          }
          while (v24);
          if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        int v55 = *v13++;
        *v19++ = v55;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = v19;
    if ((char *)v5 != v9 + 4) {
      memmove((void *)(v5 - 4 * v12), v9, v11);
    }
    *(_DWORD *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 2) + 1;
  if (v26 >> 62) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 1 > v26) {
    unint64_t v26 = v28 >> 1;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 62) {
      sub_188D718();
    }
    long long v30 = (char *)operator new(4 * v29);
    long long v31 = &v30[4 * v8];
    long long v32 = &v30[4 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    long long v30 = 0;
    long long v31 = (char *)(4 * v8);
    long long v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((unsigned char *)v6 == a2) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = v7 >> 1;
    }
    if (v52 >> 62) {
      sub_188D718();
    }
    long long v53 = (char *)operator new(4 * v52);
    long long v31 = &v53[v52 & 0xFFFFFFFFFFFFFFFCLL];
    long long v32 = &v53[4 * v52];
    if (v30)
    {
      long long v54 = &v53[4 * v52];
      operator delete(v30);
      long long v32 = v54;
      long long v34 = (char *)*a1;
      *(_DWORD *)long long v31 = *a3;
      long long v35 = v31 + 4;
      long long v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 4 * (v33 >> 1);
  }
LABEL_28:
  long long v34 = (char *)v6;
  *(_DWORD *)long long v31 = *a3;
  long long v35 = v31 + 4;
  long long v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    long long v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6);
    unint64_t v38 = v37 - v34 - 4;
    long long v39 = v9;
    long long v36 = v31;
    if (v38 < 0x2C) {
      goto LABEL_59;
    }
    long long v39 = v9;
    long long v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 2) + 1;
    uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    long long v39 = &v9[-v41];
    long long v36 = &v31[-v41];
    long long v42 = v31 - 16;
    long long v43 = (long long *)(v6 + 4 * v8 - 16);
    uint64_t v44 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)long long v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 8;
    }
    while (v44);
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_59:
      do
      {
        int v46 = *((_DWORD *)v39 - 1);
        v39 -= 4;
        *((_DWORD *)v36 - 1) = v46;
        v36 -= 4;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  long long v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    BOOL v49 = v9;
    size_t v50 = v47 - v9;
    long long v51 = v32;
    memmove(v35, v49, v50);
    long long v32 = v51;
    long long v34 = (char *)*a1;
  }
  *a1 = v36;
  a1[1] = &v35[v48];
  a1[2] = v32;
  if (v34) {
    operator delete(v34);
  }
  return v31;
}

void sub_29500C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_295024(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2 = (int *)((char *)a2 + *a2);
  unsigned int v3 = *a1;
  long long v4 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v4 < 5u) {
    return v3 != 0;
  }
  uint64_t v5 = v4[2];
  if (!v5) {
    return v3 != 0;
  }
  unsigned int v6 = *(int *)((char *)v2 + v5);
  if (v6 <= v3) {
    unsigned int v7 = 0;
  }
  else {
    unsigned int v7 = -1;
  }
  if (v6 >= v3) {
    return v7;
  }
  else {
    return v7 + 1;
  }
}

void sub_295088(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)uint64_t v21 = 0u;
  *(_OWORD *)long long __p = 0u;
  int v23 = 1065353216;
  v20[0] = a1;
  v20[1] = a2;
  unint64_t v17 = 0;
  unint64_t v18 = 0;
  uint64_t v19 = 0;
  sub_297598(a2, 0xFu, (uint64_t)&v17);
  uint64_t v5 = v17;
  unsigned int v6 = v18;
  if (v17 != v18)
  {
    do
    {
      unsigned int v7 = *v5;
      if (sub_2AB7E4(*a1))
      {
        uint64_t v8 = sub_2964C4((uint64_t)a1, v7, 1);
        uint64_t v9 = &v8[*(unsigned __int16 *)&v8[-*(int *)v8 + 4]];
        uint64_t v10 = *(unsigned int *)v9;
        uint64_t v12 = &v9[v10 + 4];
        uint64_t v11 = *(unsigned int *)&v9[v10];
        v24[0] = v21;
        v24[1] = a1;
        v24[2] = v20;
        v24[3] = a3;
        if (v11)
        {
          uint64_t v13 = 4 * v11;
          do
          {
            sub_299108((uint64_t)v24, (int *)&v12[*(unsigned int *)v12]);
            v12 += 4;
            v13 -= 4;
          }
          while (v13);
        }
      }
      ++v5;
    }
    while (v5 != v6);
    uint64_t v5 = v17;
  }
  if (v5)
  {
    unint64_t v18 = v5;
    operator delete(v5);
  }
  unint64_t v14 = __p[0];
  if (__p[0])
  {
    do
    {
      unint64_t v15 = (void *)*v14;
      operator delete(v14);
      unint64_t v14 = v15;
    }
    while (v15);
  }
  unint64_t v16 = v21[0];
  v21[0] = 0;
  if (v16) {
    operator delete(v16);
  }
}

void sub_2951CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_12168((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2951F8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)uint64_t v21 = 0u;
  *(_OWORD *)long long __p = 0u;
  int v23 = 1065353216;
  v20[0] = a1;
  v20[1] = a2;
  unint64_t v17 = 0;
  unint64_t v18 = 0;
  uint64_t v19 = 0;
  sub_297598(a2, 0xFu, (uint64_t)&v17);
  sub_29722C(&v17);
  uint64_t v5 = (unsigned int *)v17;
  unsigned int v6 = v18;
  if (v17 != v18)
  {
    do
    {
      unsigned int v7 = *v5;
      if (sub_2AB7E4(*a1))
      {
        uint64_t v8 = sub_2964C4((uint64_t)a1, v7, 1);
        uint64_t v9 = &v8[*(unsigned __int16 *)&v8[-*(int *)v8 + 4]];
        uint64_t v10 = *(unsigned int *)v9;
        uint64_t v12 = &v9[v10 + 4];
        uint64_t v11 = *(unsigned int *)&v9[v10];
        v24[0] = (uint64_t)v21;
        v24[1] = (uint64_t)a1;
        v24[2] = (uint64_t)v20;
        v24[3] = a3;
        if (v11)
        {
          uint64_t v13 = 4 * v11;
          do
          {
            sub_299870(v24, (int *)&v12[*(unsigned int *)v12]);
            v12 += 4;
            v13 -= 4;
          }
          while (v13);
        }
      }
      ++v5;
    }
    while (v5 != (unsigned int *)v6);
    uint64_t v5 = (unsigned int *)v17;
  }
  if (v5)
  {
    unint64_t v18 = (int *)v5;
    operator delete(v5);
  }
  unint64_t v14 = __p[0];
  if (__p[0])
  {
    do
    {
      unint64_t v15 = (void *)*v14;
      operator delete(v14);
      unint64_t v14 = v15;
    }
    while (v15);
  }
  unint64_t v16 = v21[0];
  v21[0] = 0;
  if (v16) {
    operator delete(v16);
  }
}

void sub_295344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_12168((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_295374(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      sub_295088(a1, v3, a3);
      v3 += 24;
    }
    while (v3 != v4);
  }
}

void sub_2953C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      sub_2951F8(a1, v3, a3);
      v3 += 24;
    }
    while (v3 != v4);
  }
}

uint64_t sub_29541C(uint64_t a1, long long *a2)
{
  uint64_t v3 = 0;
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  *(_OWORD *)a1 = v4;
  do
  {
    uint64_t v5 = a1 + v3;
    *(_DWORD *)(v5 + 16) = 0;
    *(_DWORD *)(v5 + 40) = 0;
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 48) = 0;
    v3 += 48;
  }
  while (v3 != 3840);
  *(_OWORD *)(a1 + 3856) = 0u;
  char v6 = v4;
  if ((void)v4) {
    char v6 = sub_2ABCE4((void **)v4);
  }
  *(unsigned char *)(a1 + 3872) = v6;
  return a1;
}

void sub_295488(_Unwind_Exception *a1)
{
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

double sub_29549C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_295550(a1, a2 & 0xFFFFFFFFFFFFLL, (unint64_t *)&v6);
  *(void *)a3 = a1;
  double result = *(double *)&v6;
  *(_OWORD *)(a3 + 8) = v6;
  *(void *)(a3 + 24) = v7;
  *(unsigned char *)(a3 + 32) = 0;
  return result;
}

double sub_2954EC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_295550(a1, a2 & 0xFFFFFFFFFFFFLL, (unint64_t *)&v7);
  *(void *)a3 = a1;
  double result = *(double *)&v7;
  *(_OWORD *)(a3 + 8) = v7;
  *(void *)(a3 + 24) = v8;
  *(unsigned char *)(a3 + 32) = (a2 & 0xFF000000000000) != 0;
  return result;
}

void sub_295550(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  long long v6 = sub_290DEC(a1, a2, 0);
  long long v7 = &v6[-*(int *)v6];
  if (*(unsigned __int16 *)v7 >= 5u && (uint64_t v8 = *((unsigned __int16 *)v7 + 2)) != 0) {
    uint64_t v9 = &v6[v8 + *(unsigned int *)&v6[v8]];
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = (int *)sub_295C4C(v9, a2);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if ((sub_295DB4(a1, a2) & 1) == 0) {
    return;
  }
  uint64_t v11 = *v10;
  uint64_t v12 = (char *)v10 - v11;
  unsigned int v13 = *(unsigned __int16 *)((char *)v10 - v11);
  if (v13 < 0x23) {
    goto LABEL_17;
  }
  if (*((_WORD *)v12 + 17))
  {
    unint64_t v14 = (unsigned int *)((char *)v10
                         + *((unsigned __int16 *)v12 + 17)
                         + *(unsigned int *)((char *)v10 + *((unsigned __int16 *)v12 + 17)));
    unint64_t v15 = (unsigned char *)*a3;
    unint64_t v16 = (unsigned char *)a3[1];
    uint64_t v17 = (uint64_t)&v16[-*a3];
    uint64_t v18 = v17 >> 3;
    uint64_t v19 = *v14;
    unint64_t v20 = (v17 >> 3) + v19;
    if (v20 <= (uint64_t)(a3[2] - *a3) >> 3)
    {
      uint64_t v22 = (char *)a3[1];
LABEL_51:
      if (v19)
      {
        uint64_t v74 = (uint64_t *)(v14 + 1);
        uint64_t v75 = 8 * v19;
        do
        {
          uint64_t v76 = *v74;
          uint64_t v22 = sub_296EBC(a3, v22, &v76) + 8;
          ++v74;
          v75 -= 8;
        }
        while (v75);
      }
      return;
    }
    if (v20 >> 61) {
      sub_2E00();
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    uint64_t v22 = &v21[8 * v18];
    int v23 = v22;
    if (v16 != v15)
    {
      unint64_t v24 = v16 - v15 - 8;
      if (v24 < 0x58)
      {
        int v23 = &v21[8 * v18];
        do
        {
LABEL_48:
          uint64_t v73 = *((void *)v16 - 1);
          v16 -= 8;
          *((void *)v23 - 1) = v73;
          v23 -= 8;
        }
        while (v16 != v15);
        goto LABEL_49;
      }
      int v23 = &v21[8 * v18];
      if ((unint64_t)(&v16[-v17] - v21) < 0x20) {
        goto LABEL_48;
      }
      uint64_t v66 = (v24 >> 3) + 1;
      uint64_t v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
      long long v68 = &v16[-v67];
      int v23 = &v22[-v67];
      long long v69 = &v21[8 * v18 - 16];
      long long v70 = (long long *)(v16 - 16);
      uint64_t v71 = v66 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v72 = *v70;
        *((_OWORD *)v69 - 1) = *(v70 - 1);
        *(_OWORD *)long long v69 = v72;
        v69 -= 32;
        v70 -= 2;
        v71 -= 4;
      }
      while (v71);
      unint64_t v16 = v68;
      if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_48;
      }
    }
LABEL_49:
    *a3 = (unint64_t)v23;
    a3[1] = (unint64_t)v22;
    a3[2] = (unint64_t)&v21[8 * v20];
    if (v15)
    {
      operator delete(v15);
      uint64_t v22 = (char *)a3[1];
      uint64_t v19 = *v14;
    }
    goto LABEL_51;
  }
  if (v13 >= 0x83 && (uint64_t v25 = *((unsigned __int16 *)v12 + 65)) != 0)
  {
    unint64_t v26 = (*(int *)((char *)v10 + v25 + *(unsigned int *)((char *)v10 + v25)) + 1);
    uint64_t v27 = -v11;
    uint64_t v28 = (unsigned char *)*a3;
    if (v26 > (uint64_t)(a3[2] - *a3) >> 3)
    {
LABEL_18:
      unint64_t v29 = (unsigned char *)a3[1];
      long long v30 = (char *)operator new(8 * v26);
      uint64_t v31 = v29 - v28;
      long long v32 = &v30[(v29 - v28) & 0xFFFFFFFFFFFFFFF8];
      unint64_t v33 = v32;
      if (v29 == v28) {
        goto LABEL_27;
      }
      if ((unint64_t)(v31 - 8) >= 0x58)
      {
        unint64_t v33 = &v30[(v29 - v28) & 0xFFFFFFFFFFFFFFF8];
        if (v29 - v30 - (v31 & 0xFFFFFFFFFFFFFFF8) >= 0x20)
        {
          uint64_t v34 = v31 >> 3;
          unint64_t v35 = ((unint64_t)(v31 - 8) >> 3) + 1;
          uint64_t v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
          long long v37 = &v29[-v36];
          unint64_t v33 = &v32[-v36];
          unint64_t v38 = &v30[8 * v34 - 16];
          long long v39 = (long long *)(v29 - 16);
          uint64_t v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v41 = *v39;
            *((_OWORD *)v38 - 1) = *(v39 - 1);
            *(_OWORD *)unint64_t v38 = v41;
            v38 -= 32;
            v39 -= 2;
            v40 -= 4;
          }
          while (v40);
          unint64_t v29 = v37;
          if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_27:
            *a3 = (unint64_t)v33;
            a3[1] = (unint64_t)v32;
            a3[2] = (unint64_t)&v30[8 * v26];
            if (v28)
            {
              operator delete(v28);
              uint64_t v27 = -(uint64_t)*v10;
            }
            goto LABEL_29;
          }
        }
      }
      else
      {
        unint64_t v33 = &v30[(v29 - v28) & 0xFFFFFFFFFFFFFFF8];
      }
      do
      {
        uint64_t v42 = *((void *)v29 - 1);
        v29 -= 8;
        *((void *)v33 - 1) = v42;
        v33 -= 8;
      }
      while (v29 != v28);
      goto LABEL_27;
    }
  }
  else
  {
LABEL_17:
    unint64_t v26 = 1;
    uint64_t v27 = -v11;
    uint64_t v28 = (unsigned char *)*a3;
    if (!((uint64_t)(a3[2] - *a3) >> 3)) {
      goto LABEL_18;
    }
  }
LABEL_29:
  if (*(_WORD *)((char *)v10 + v27 + 126)) {
    unint64_t v43 = ((unint64_t)*(unsigned int *)((char *)v10 + *(unsigned __int16 *)((char *)v10 + v27 + 126)) >> 16) | ((unint64_t)((a2 << (2 * (*(int *)((char *)v10 + *(unsigned __int16 *)((char *)v10 + v27 + 126)) & 0xF))) + ((unsigned __int16)*(int *)((char *)v10 + *(unsigned __int16 *)((char *)v10 + v27 + 126)) >> 4)) << 32);
  }
  else {
    unint64_t v43 = __ROR8__(*(void *)((char *)v10 + *(unsigned __int16 *)((char *)v10 + v27 + 128)), 32);
  }
  uint64_t v76 = __ROR8__(v43, 32);
  sub_29603C((void **)a3, &v76);
  uint64_t v44 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v44 >= 0x83u)
  {
    uint64_t v45 = v44[65];
    if (v45)
    {
      int v46 = (unsigned int *)((char *)v10 + v45);
      uint64_t v47 = *v46;
      BOOL v49 = (unsigned int *)((char *)v46 + v47 + 4);
      uint64_t v48 = *(unsigned int *)((char *)v46 + v47);
      if (v48)
      {
        uint64_t v50 = 4 * v48;
        do
        {
          unsigned int v51 = *(_DWORD *)(a3[1] - 8);
          unint64_t v52 = *v49;
          unsigned int v53 = sub_511FC(v51);
          unsigned int v54 = v51 & ~(-1 << (v53 & 0xFE));
          int v55 = sub_51938(v54);
          int v56 = sub_51938(v54 >> 1);
          int v57 = 1 << (v53 >> 1);
          int v58 = v55 + (char)v52;
          int v59 = v56 + ((__int16)v52 >> 8);
          unsigned int v60 = (int)((((((v58 & ~(v58 >> 31)) - v58 + (v58 >> 31)) >> (v53 >> 1))
                      + (v58 >> 31)) << (v53 >> 1))
                    + v58)
              % v57;
          unsigned int v61 = (int)((((((v59 & ~(v59 >> 31)) - v59 + (v59 >> 31)) >> (v53 >> 1))
                      + (v59 >> 31)) << (v53 >> 1))
                    + v59)
              % v57;
          int v62 = -1 << (v53 >> 1);
          if (~v62 < v60) {
            unsigned int v63 = ~v62;
          }
          else {
            unsigned int v63 = v60;
          }
          if (~v62 < v61) {
            unsigned int v64 = ~v62;
          }
          else {
            unsigned int v64 = v61;
          }
          sub_518C8(v63, v64);
          uint64_t v76 = __ROR8__((v52 >> 16) | ((unint64_t)(v65 | (1 << (v53 & 0xFE))) << 32), 32);
          sub_29603C((void **)a3, &v76);
          ++v49;
          v50 -= 4;
        }
        while (v50);
      }
    }
  }
}

void sub_2959FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_295A28(uint64_t a1, unint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 8) = *(void *)a3;
  sub_295550(a1, a2, (unint64_t *)&v23);
  long long v4 = *(char **)a3;
  uint64_t v5 = *(char **)(a3 + 8);
  long long v6 = v5;
  uint64_t v7 = (uint64_t)&v5[-*(void *)a3];
  uint64_t v8 = v7 >> 2;
  uint64_t v10 = v23;
  uint64_t v9 = v24;
  unint64_t v11 = (v7 >> 2) + v24 - v23;
  if (v11 <= (uint64_t)(*(void *)(a3 + 16) - *(void *)a3) >> 2)
  {
    unsigned int v13 = *(char **)(a3 + 8);
    goto LABEL_14;
  }
  if (v11 >> 62) {
    sub_2E00();
  }
  uint64_t v12 = (char *)operator new(4 * v11);
  unsigned int v13 = &v12[4 * v8];
  unint64_t v14 = v13;
  if (v5 != v4)
  {
    unint64_t v15 = v5 - v4 - 4;
    if (v15 < 0x2C)
    {
      unint64_t v14 = &v12[4 * v8];
      do
      {
LABEL_11:
        int v22 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *((_DWORD *)v14 - 1) = v22;
        v14 -= 4;
      }
      while (v6 != v4);
      goto LABEL_12;
    }
    unint64_t v14 = &v12[4 * v8];
    if ((unint64_t)(&v5[-v7] - v12) < 0x20) {
      goto LABEL_11;
    }
    uint64_t v16 = (v15 >> 2) + 1;
    uint64_t v17 = 4 * (v16 & 0x7FFFFFFFFFFFFFF8);
    long long v6 = &v5[-v17];
    unint64_t v14 = &v13[-v17];
    uint64_t v18 = &v12[4 * v8 - 16];
    uint64_t v19 = v5 - 16;
    uint64_t v20 = v16 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v21 = *(_OWORD *)v19;
      *((_OWORD *)v18 - 1) = *((_OWORD *)v19 - 1);
      *(_OWORD *)uint64_t v18 = v21;
      v18 -= 32;
      v19 -= 32;
      v20 -= 8;
    }
    while (v20);
    if (v16 != (v16 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_11;
    }
  }
LABEL_12:
  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v13;
  *(void *)(a3 + 16) = &v12[4 * v11];
  if (v4)
  {
    operator delete(v4);
    unsigned int v13 = *(char **)(a3 + 8);
    uint64_t v10 = v23;
    uint64_t v9 = v24;
  }
LABEL_14:
  if (v10 != v9)
  {
    do
    {
      int v25 = *v10;
      unsigned int v13 = sub_2969E0((void **)a3, v13, &v25) + 4;
      ++v10;
    }
    while (v10 != v9);
    uint64_t v9 = v23;
  }
  if (v9)
  {
    unint64_t v24 = v9;
    operator delete(v9);
  }
}

void sub_295BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_295BE0(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  sub_295A28(a1, a2 & 0xFFFFFFFFFFFFLL, (uint64_t)a3);
  if ((a2 & 0xFF000000000000) != 0)
  {
    unint64_t v5 = *a3;
    unint64_t v6 = a3[1];
    uint64_t v7 = (_DWORD *)(v6 - 4);
    if (*a3 != v6 && (unint64_t)v7 > v5)
    {
      unint64_t v9 = v5 + 4;
      do
      {
        int v10 = *(_DWORD *)(v9 - 4);
        *(_DWORD *)(v9 - 4) = *v7;
        *v7-- = v10;
        BOOL v11 = v9 >= (unint64_t)v7;
        v9 += 4;
      }
      while (!v11);
    }
  }
}

uint64_t sub_295C4C(_DWORD *a1, unint64_t a2)
{
  unint64_t v13 = a2;
  if (!a1 || *a1 <= HIDWORD(a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_296D50((unsigned int *)&v13, &v9);
    long long v4 = std::string::insert(&v9, 0, "Flatbuffer vector requested index (object_index)");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    unint64_t v6 = std::string::append(&v10, " is out of range");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v12 = v6->__r_.__value_.__r.__words[2];
    long long v11 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = (void *)sub_2F404((uint64_t)exception, &v11);
  }
  return (uint64_t)&a1[HIDWORD(a2) + 1] + a1[HIDWORD(a2) + 1];
}

void sub_295D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_295DB4(uint64_t a1, unint64_t a2)
{
  if (!*(unsigned char *)(a1 + 3872)) {
    return 1;
  }
  long long v4 = sub_290DEC(a1, a2, 0);
  long long v5 = &v4[-*(int *)v4];
  if (*(unsigned __int16 *)v5 >= 5u && (uint64_t v6 = *((unsigned __int16 *)v5 + 2)) != 0) {
    long long v7 = &v4[v6 + *(unsigned int *)&v4[v6]];
  }
  else {
    long long v7 = 0;
  }
  uint64_t v8 = (int *)sub_295C4C(v7, a2);
  std::string v9 = (unsigned __int16 *)((char *)v8 - *v8);
  unsigned int v10 = *v9;
  if (v10 < 0x23) {
    return 0;
  }
  long long v11 = v8;
  if (v9[17])
  {
    std::string::size_type v12 = (unsigned int *)((char *)v8 + v9[17] + *(unsigned int *)((char *)v8 + v9[17]));
    unsigned int v15 = *v12;
    unint64_t v14 = v12 + 1;
    uint64_t v13 = v15;
    if (v15)
    {
      uint64_t v16 = 8 * v13 - 8;
      do
      {
        v14 += 2;
        uint64_t result = sub_2AB7E4(*(void *)a1);
        if (result) {
          BOOL v18 = v16 == 0;
        }
        else {
          BOOL v18 = 1;
        }
        v16 -= 8;
      }
      while (!v18);
      return result;
    }
    return 1;
  }
  if (v10 < 0x7F) {
    return 0;
  }
  if (v9[63])
  {
    unsigned int v19 = (a2 << (2 * (*(int *)((char *)v8 + v9[63]) & 0xF)))
        + ((unsigned __int16)*(int *)((char *)v8 + v9[63]) >> 4);
    uint64_t result = sub_2AB7E4(*(void *)a1);
    if (!result) {
      return result;
    }
    goto LABEL_19;
  }
  if (v10 < 0x81) {
    return 0;
  }
  unsigned __int16 v44 = v9[64];
  if (!v44) {
    return 0;
  }
  unsigned int v19 = *(int *)((char *)v8 + v44);
  uint64_t result = sub_2AB7E4(*(void *)a1);
  if (!result) {
    return result;
  }
LABEL_19:
  uint64_t v20 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v20 < 0x83u) {
    return 1;
  }
  uint64_t v21 = v20[65];
  if (!v21) {
    return 1;
  }
  int v22 = (unsigned int *)((char *)v11 + v21);
  uint64_t v23 = *v22;
  int v25 = (int *)((char *)v22 + v23 + 4);
  uint64_t v24 = *(unsigned int *)((char *)v22 + v23);
  if (!v24) {
    return 1;
  }
  uint64_t v26 = 4 * v24 - 4;
  do
  {
    int v27 = *v25++;
    unsigned int v28 = sub_511FC(v19);
    unsigned int v29 = v28 >> 1;
    char v30 = v28 & 0xFE;
    unsigned int v31 = v19 & ~(-1 << (v28 & 0xFE));
    int v32 = sub_51938(v31);
    int v33 = sub_51938(v31 >> 1);
    int v34 = v32 + (char)v27;
    int v35 = v33 + ((__int16)v27 >> 8);
    unsigned int v36 = (int)((((((v34 & ~(v34 >> 31)) - v34 + (v34 >> 31)) >> v29) + (v34 >> 31)) << v29)
              + v34)
        % (1 << v29);
    unsigned int v37 = (int)((((((v35 & ~(v35 >> 31)) - v35 + (v35 >> 31)) >> v29) + (v35 >> 31)) << v29)
              + v35)
        % (1 << v29);
    int v38 = -1 << v29;
    unsigned int v39 = ~(-1 << v29);
    if (v39 < v36) {
      unsigned int v40 = ~v38;
    }
    else {
      unsigned int v40 = v36;
    }
    if (v39 < v37) {
      unsigned int v41 = ~v38;
    }
    else {
      unsigned int v41 = v37;
    }
    sub_518C8(v40, v41);
    unsigned int v19 = v42 | (1 << v30);
    uint64_t result = sub_2AB7E4(*(void *)a1);
    if (result) {
      BOOL v43 = v26 == 0;
    }
    else {
      BOOL v43 = 1;
    }
    v26 -= 4;
  }
  while (!v43);
  return result;
}

void *sub_29603C(void **a1, void *a2)
{
  long long v5 = (char *)a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = (char *)*a1;
    uint64_t v9 = v5 - (unsigned char *)*a1;
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + 1;
    if (v11 >> 61) {
      sub_2E00();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        sub_188D718();
      }
      unint64_t v14 = operator new(8 * v13);
    }
    else
    {
      unint64_t v14 = 0;
    }
    unsigned int v15 = &v14[8 * v10];
    *unsigned int v15 = *a2;
    long long v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 8;
      if (v16 < 0x58) {
        goto LABEL_28;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_28;
      }
      uint64_t v17 = (v16 >> 3) + 1;
      uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v18];
      unsigned int v15 = (void *)((char *)v15 - v18);
      unsigned int v19 = &v14[8 * v10 - 16];
      uint64_t v20 = (long long *)(v5 - 16);
      uint64_t v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *unsigned int v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          uint64_t v23 = *((void *)v6 - 1);
          v6 -= 8;
          *--unsigned int v15 = v23;
        }
        while (v6 != v8);
      }
      uint64_t v6 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v7;
    a1[2] = &v14[8 * v13];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(void *)long long v5 = *a2;
    long long v7 = v5 + 8;
  }
  a1[1] = v7;
  return v7 - 1;
}

uint64_t sub_2961A8(uint64_t *a1)
{
  return sub_2AB7E4(*a1);
}

uint64_t sub_2961B8(void ***a1, unint64_t a2)
{
  unint64_t v4 = sub_290DEC((uint64_t)a1, a2, 1);
  if (!v4) {
    return 0;
  }
  long long v5 = &v4[-*(int *)v4];
  if (*(unsigned __int16 *)v5 < 5u) {
    return 0;
  }
  uint64_t v6 = *((unsigned __int16 *)v5 + 2);
  if (!v6 || *(_DWORD *)&v4[v6 + *(unsigned int *)&v4[v6]] <= HIDWORD(a2)) {
    return 0;
  }
  sub_295550((uint64_t)a1, a2, (unint64_t *)&__p);
  long long v7 = (unint64_t *)__p;
  uint64_t v8 = v13;
  if (__p != v13)
  {
    while (1)
    {
      unsigned int v14 = *v7;
      sub_383CC(&v14, (uint64_t)v15);
      if (sub_744F8(a1, v15) == 1) {
        break;
      }
      if (++v7 == v8)
      {
        long long v7 = (unint64_t *)__p;
        goto LABEL_9;
      }
    }
LABEL_15:
    uint64_t v9 = 0;
    uint64_t v10 = (unint64_t *)__p;
    if (__p) {
      goto LABEL_16;
    }
    return v9;
  }
LABEL_9:
  if (!sub_29632C(a1, *v7, 0)) {
    goto LABEL_15;
  }
  uint64_t v9 = sub_29632C(a1, *(v13 - 1), 1);
  uint64_t v10 = (unint64_t *)__p;
  if (!__p) {
    return v9;
  }
LABEL_16:
  unint64_t v13 = v10;
  operator delete(v10);
  return v9;
}

void sub_29630C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_29632C(void ***a1, unint64_t a2, int a3)
{
  LODWORD(v28) = a2;
  sub_383CC((unsigned int *)&v28, (uint64_t)v30);
  if (!sub_744F8(a1, v30)) {
    return 1;
  }
  uint64_t v6 = sub_2964C4((uint64_t)a1, a2, 0);
  long long v7 = &v6[-*(int *)v6];
  if (*(unsigned __int16 *)v7 < 5u)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = *((unsigned __int16 *)v7 + 2);
    if (v8) {
      v8 += (uint64_t)&v6[*(unsigned int *)&v6[v8]];
    }
  }
  uint64_t v10 = (int *)(v8 + 4 * HIDWORD(a2) + 4 + *(unsigned int *)(v8 + 4 * HIDWORD(a2) + 4));
  unint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 7u && (uint64_t v12 = v11[3]) != 0)
  {
    unint64_t v13 = (unsigned int *)((char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12));
    if (a3) {
      unsigned int v14 = *v13 - 1;
    }
    else {
      unsigned int v14 = 0;
    }
    uint64_t v17 = (unsigned __int16 *)sub_296880(v13, v14);
    int v18 = *v17;
    int v19 = v17[1];
    unsigned int v20 = sub_511FC(a2);
    unsigned int v21 = a2 & ~(-1 << (v20 & 0xFE));
    int v22 = sub_51938(v21);
    int v23 = sub_51938(v21 >> 1);
    int v24 = 1 << -(char)(v20 >> 1);
    if (v20 < 2) {
      int v24 = -2;
    }
    int v25 = v24 * v23;
    uint64_t v16 = (v24 * v22 + 4 * v18);
    unsigned int v26 = v25 + 4 * v19;
    if (v26 >= 0xFFFFFFFE) {
      uint64_t v27 = 4294967294;
    }
    else {
      uint64_t v27 = v26;
    }
    unint64_t v15 = v27 << 32;
  }
  else
  {
    unint64_t v15 = 0xFFFFFFFF00000000;
    uint64_t v16 = 0xFFFFFFFFLL;
  }
  unint64_t v28 = v16 | v15;
  int v29 = 0x7FFFFFFF;
  return sub_73930(a1, &v28);
}

char *sub_2964C4(uint64_t a1, unsigned int a2, int a3)
{
  int v24 = a3;
  unsigned int v25 = a2;
  v23[0] = &v24;
  v23[1] = (int *)&v25;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 112) == a2)
    {
      unsigned int v7 = 4;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 136) == a2)
    {
      unsigned int v7 = 5;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 160) == a2)
    {
      unsigned int v7 = 6;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 184) == a2)
    {
      unsigned int v7 = 7;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      uint64_t v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_28;
    }
    unint64_t v11 = *(void *)(a1 + 168);
    unint64_t v12 = *(void *)(a1 + 144);
    unint64_t v13 = *(void *)(a1 + 120);
    BOOL v14 = v13 < v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 120);
    }
    BOOL v15 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 144);
    }
    int v16 = 4 * v14;
    if (!v15) {
      int v16 = 5;
    }
    if (v11 >= v4) {
      unint64_t v17 = v4;
    }
    else {
      unint64_t v17 = *(void *)(a1 + 168);
    }
    unint64_t v18 = *(void *)(a1 + 192);
    if (v11 >= v4) {
      int v19 = v16;
    }
    else {
      int v19 = 6;
    }
    unsigned int v20 = (unsigned int *)sub_2AB884(v5, 1, a2, 1);
    unsigned int v21 = 7;
    if (v18 >= v17) {
      unsigned int v21 = v19;
    }
    uint64_t v22 = v6 + 24 * v21;
    *(_DWORD *)uint64_t v22 = v25;
    *(void *)(v22 + 8) = *(void *)(a1 + 3856);
    *(void *)(v22 + 16) = v20;
    if (v20) {
      return (char *)v20 + *v20;
    }
  }
LABEL_28:
  sub_296654(v23);
  return 0;
}

uint64_t sub_296654(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      uint64_t v9 = sub_736EC(1u);
      uint64_t v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    BOOL v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_2967AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

uint64_t sub_296880(unsigned int *a1, unsigned int a2)
{
  if (!a1 || *a1 <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v10, a2);
    uint64_t v5 = std::string::insert(&v10, 0, "Flatbuffer vector requested index ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    unsigned int v7 = std::string::append(&v11, " is out of range");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
    long long v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = (void *)sub_2F404((uint64_t)exception, &v12);
  }
  return (uint64_t)&a1[a2 + 1];
}

void sub_296960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

char *sub_2969E0(void **a1, unsigned char *a2, _DWORD *a3)
{
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 2;
  uint64_t v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_DWORD *)uint64_t v9 = *a3;
      a1[1] = v9 + 4;
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 4);
    uint64_t v12 = v11 >> 2;
    std::string::size_type v13 = (int *)(v5 - 4);
    if (v5 < 4)
    {
      std::string::size_type v19 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      std::string v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 4;
      if (v5 > v16) {
        unint64_t v16 = (unint64_t)a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x2C)
      {
        std::string::size_type v19 = a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        std::string::size_type v19 = a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 2) + 1;
          uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
          std::string::size_type v13 = (int *)((char *)v13 + v21);
          std::string::size_type v19 = (_DWORD *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          int v23 = (long long *)(4 * v12 + 4 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            _OWORD *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 8;
          }
          while (v24);
          if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        int v55 = *v13++;
        *v19++ = v55;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = v19;
    if ((char *)v5 != v9 + 4) {
      memmove((void *)(v5 - 4 * v12), v9, v11);
    }
    *(_DWORD *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 2) + 1;
  if (v26 >> 62) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 1 > v26) {
    unint64_t v26 = v28 >> 1;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 62) {
      sub_188D718();
    }
    char v30 = (char *)operator new(4 * v29);
    unsigned int v31 = &v30[4 * v8];
    int v32 = &v30[4 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    char v30 = 0;
    unsigned int v31 = (char *)(4 * v8);
    int v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((unsigned char *)v6 == a2) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = v7 >> 1;
    }
    if (v52 >> 62) {
      sub_188D718();
    }
    unsigned int v53 = (char *)operator new(4 * v52);
    unsigned int v31 = &v53[v52 & 0xFFFFFFFFFFFFFFFCLL];
    int v32 = &v53[4 * v52];
    if (v30)
    {
      unsigned int v54 = &v53[4 * v52];
      operator delete(v30);
      int v32 = v54;
      int v34 = (char *)*a1;
      *(_DWORD *)unsigned int v31 = *a3;
      int v35 = v31 + 4;
      unsigned int v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 4 * (v33 >> 1);
  }
LABEL_28:
  int v34 = (char *)v6;
  *(_DWORD *)unsigned int v31 = *a3;
  int v35 = v31 + 4;
  unsigned int v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    unsigned int v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6);
    unint64_t v38 = v37 - v34 - 4;
    unsigned int v39 = v9;
    unsigned int v36 = v31;
    if (v38 < 0x2C) {
      goto LABEL_59;
    }
    unsigned int v39 = v9;
    unsigned int v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 2) + 1;
    uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    unsigned int v39 = &v9[-v41];
    unsigned int v36 = &v31[-v41];
    int v42 = v31 - 16;
    BOOL v43 = (long long *)(v6 + 4 * v8 - 16);
    uint64_t v44 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)int v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 8;
    }
    while (v44);
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_59:
      do
      {
        int v46 = *((_DWORD *)v39 - 1);
        v39 -= 4;
        *((_DWORD *)v36 - 1) = v46;
        v36 -= 4;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  uint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    BOOL v49 = v9;
    size_t v50 = v47 - v9;
    unsigned int v51 = v32;
    memmove(v35, v49, v50);
    int v32 = v51;
    int v34 = (char *)*a1;
  }
  *a1 = v36;
  a1[1] = &v35[v48];
  a1[2] = v32;
  if (v34) {
    operator delete(v34);
  }
  return v31;
}

void sub_296D38(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_296D50(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v10, *a1);
  unint64_t v4 = std::string::append(&v10, ".");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1[1]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = std::string::append(&v11, (const std::string::value_type *)p_p, size);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_13:
      operator delete(v10.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_13;
  }
}

void sub_296E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *sub_296EBC(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)uint64_t v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    std::string::size_type v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      std::string::size_type v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      std::string v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        std::string::size_type v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        std::string::size_type v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          std::string::size_type v13 = (uint64_t *)((char *)v13 + v21);
          std::string::size_type v19 = (void *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          int v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            _OWORD *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    char v30 = (char *)operator new(8 * v29);
    unsigned int v31 = &v30[8 * v8];
    int v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    char v30 = 0;
    unsigned int v31 = (char *)(8 * v8);
    int v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    unsigned int v54 = (char *)operator new(8 * v53);
    unsigned int v31 = &v54[8 * (v53 >> 2)];
    int v32 = &v54[8 * v53];
    if (v30)
    {
      int v55 = &v54[8 * v53];
      operator delete(v30);
      int v32 = v55;
      int v34 = (char *)*a1;
      *(void *)unsigned int v31 = *a3;
      int v35 = v31 + 8;
      unsigned int v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  int v34 = (char *)v6;
  *(void *)unsigned int v31 = *a3;
  int v35 = v31 + 8;
  unsigned int v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    unsigned int v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    unsigned int v39 = v9;
    unsigned int v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    unsigned int v39 = v9;
    unsigned int v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    unsigned int v39 = &v9[-v41];
    unsigned int v36 = &v31[-v41];
    int v42 = v31 - 16;
    BOOL v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)int v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  uint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    BOOL v49 = v9;
    size_t v50 = v47 - v9;
    unsigned int v51 = v32;
    memmove(v35, v49, v50);
    int v32 = v51;
  }
  unint64_t v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_297214(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_29722C(int **a1)
{
  uint64_t v1 = (char *)a1[1] - (char *)*a1;
  uint64_t v2 = v1 >> 2;
  if ((unint64_t)(v1 >> 2) <= 1) {
    uint64_t v2 = 1;
  }
  uint64_t v51 = v2;
  if ((unint64_t)v1 >= 8)
  {
    uint64_t v4 = 1;
    while (1)
    {
      unint64_t v5 = *a1;
      uint64_t v6 = v4 - 1;
      char v7 = sub_511FC((*a1)[v6]);
      LODWORD(v5) = sub_51938((v5[v6] & ~(-1 << (v7 & 0xFE))) >> 1);
      uint64_t v8 = *a1;
      uint64_t v52 = v4;
      uint64_t v9 = v4;
      char v10 = sub_511FC((*a1)[v9]);
      if (v5 >= sub_51938((v8[v9] & ~(-1 << (v10 & 0xFE))) >> 1))
      {
        int64_t v11 = *a1;
        char v12 = sub_511FC((*a1)[v9]);
        LODWORD(v11) = sub_51938(v11[v9] & ~(-1 << (v12 & 0xFE)));
        std::string::size_type v13 = *a1;
        char v14 = sub_511FC((*a1)[v6]);
        unsigned int v15 = v11 - sub_51938(v13[v6] & ~(-1 << (v14 & 0xFE)));
        int v16 = v15 <= 1 ? 1 : v15;
        int v53 = v16;
        if (v15 >= 2) {
          break;
        }
      }
LABEL_6:
      uint64_t v4 = v52 + 1;
      if (v52 + 1 == v51) {
        return;
      }
    }
    int v17 = 1;
    while (1)
    {
      while (1)
      {
        unint64_t v18 = *a1;
        unsigned int v19 = sub_511FC((*a1)[v6]);
        unsigned int v20 = v19 >> 1;
        char v21 = v19 & 0xFE;
        LODWORD(v18) = v18[v6] & ~(-1 << (v19 & 0xFE));
        int v22 = sub_51938((int)v18);
        int v23 = sub_51938(v18 >> 1);
        unsigned int v24 = (int)((((((v23 & ~(v23 >> 31)) - v23 + (v23 >> 31)) >> v20) + (v23 >> 31)) << v20)
                  + v23)
            % (1 << v20);
        int v25 = -1 << v20;
        unsigned int v26 = ~(-1 << v20);
        unsigned int v27 = v26 < (int)(((((((v22 + v17) & ~((v22 + v17) >> 31)) - (v22 + v17) + ((v22 + v17) >> 31)) >> v20)
                          + ((v22 + v17) >> 31)) << v20)
                        + v22
                        + v17)
                  % (1 << v20)
            ? ~v25
            : (int)(((((((v22 + v17) & ~((v22 + v17) >> 31)) - (v22 + v17) + ((v22 + v17) >> 31)) >> v20)
                    + ((v22 + v17) >> 31)) << v20)
                  + v22
                  + v17)
            % (1 << v20);
        unsigned int v28 = v26 < v24 ? ~v25 : v24;
        sub_518C8(v27, v28);
        int v30 = v29 | (1 << v21);
        int v32 = a1[1];
        unint64_t v31 = (unint64_t)a1[2];
        if ((unint64_t)v32 >= v31) {
          break;
        }
        *int v32 = v30;
        a1[1] = v32 + 1;
        if (++v17 == v53) {
          goto LABEL_6;
        }
      }
      unint64_t v33 = *a1;
      uint64_t v34 = (char *)v32 - (char *)*a1;
      uint64_t v35 = v34 >> 2;
      unint64_t v36 = (v34 >> 2) + 1;
      if (v36 >> 62) {
        sub_2E00();
      }
      uint64_t v37 = v31 - (void)v33;
      if (v37 >> 1 > v36) {
        unint64_t v36 = v37 >> 1;
      }
      unint64_t v38 = (unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v36;
      if (v38) {
        break;
      }
      unsigned int v39 = 0;
      uint64_t v40 = (int *)(4 * v35);
      *(_DWORD *)(4 * v35) = v30;
      uint64_t v41 = 4 * v35 + 4;
      if (v32 != v33) {
        goto LABEL_32;
      }
LABEL_38:
      *a1 = v40;
      a1[1] = (int *)v41;
      a1[2] = (int *)&v39[4 * v38];
      if (v33) {
        operator delete(v33);
      }
      a1[1] = (int *)v41;
      if (++v17 == v53) {
        goto LABEL_6;
      }
    }
    if (v38 >> 62) {
      sub_188D718();
    }
    unsigned int v39 = operator new(4 * v38);
    uint64_t v40 = (int *)&v39[4 * v35];
    *uint64_t v40 = v30;
    uint64_t v41 = (uint64_t)(v40 + 1);
    if (v32 == v33) {
      goto LABEL_38;
    }
LABEL_32:
    unint64_t v42 = (char *)(v32 - 1) - (char *)v33;
    if (v42 < 0x2C) {
      goto LABEL_46;
    }
    if ((unint64_t)((char *)v32 - &v39[v34]) < 0x20) {
      goto LABEL_46;
    }
    uint64_t v43 = (v42 >> 2) + 1;
    uint64_t v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
    long long v45 = &v32[v44 / 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v40 = (int *)((char *)v40 - v44);
    uint64_t v46 = &v39[4 * v35 - 16];
    uint64_t v47 = v32 - 4;
    uint64_t v48 = v43 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v49 = *(_OWORD *)v47;
      *(v46 - 1) = *((_OWORD *)v47 - 1);
      *uint64_t v46 = v49;
      v46 -= 2;
      v47 -= 8;
      v48 -= 8;
    }
    while (v48);
    int v32 = v45;
    if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_46:
      do
      {
        int v50 = *--v32;
        *--uint64_t v40 = v50;
      }
      while (v32 != v33);
    }
    goto LABEL_38;
  }
}

void sub_297598(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t **)a1;
  if (*(void *)a1 != *(void *)(a1 + 8))
  {
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    if (*v3 != v5)
    {
      uint64_t v6 = (uint64_t *)a3;
      uint64_t v44 = *(uint64_t **)a1;
      int v50 = 0;
      uint64_t v51 = 0;
      unint64_t v52 = 0;
      unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 2);
      BOOL v8 = v7 > 1;
      if (v7 <= 1) {
        unint64_t v7 = 1;
      }
      unint64_t v46 = v7;
      if (v8)
      {
        uint64_t v9 = 1;
        char v10 = v44;
        do
        {
          uint64_t v11 = *v10 + 12 * v9;
          *(void *)std::string __p = *(void *)(v11 - 12);
          *(_DWORD *)&__p[8] = *(_DWORD *)(v11 - 4);
          *(void *)&__p[12] = *(void *)v11;
          *(_DWORD *)&char __p[20] = *(_DWORD *)(v11 + 8);
          char v12 = operator new(0x18uLL);
          uint64_t v48 = v12 + 3;
          long long v49 = (char *)(v12 + 3);
          *(_OWORD *)char v12 = *(_OWORD *)__p;
          v12[2] = *(void *)&__p[16];
          uint64_t v47 = v12;
          sub_367A8((uint64_t *)&v47, a2, 0, (uint64_t)__p);
          uint64_t v14 = *(void *)__p;
          uint64_t v13 = *(void *)&__p[8];
          if (*(void *)__p != *(void *)&__p[8])
          {
            unsigned int v15 = v51;
            do
            {
              while ((unint64_t)v15 >= v52)
              {
                unsigned int v15 = sub_2979E4(&v50, v14);
                uint64_t v51 = v15;
                v14 += 32;
                if (v14 == v13) {
                  goto LABEL_17;
                }
              }
              int v17 = *(_DWORD *)v14;
              *((void *)v15 + 1) = 0;
              *(_DWORD *)unsigned int v15 = v17;
              *((void *)v15 + 2) = 0;
              *((void *)v15 + 3) = 0;
              unsigned int v19 = *(unsigned char **)(v14 + 8);
              unint64_t v18 = *(unsigned char **)(v14 + 16);
              int64_t v20 = v18 - v19;
              if (v18 != v19)
              {
                if (0xAAAAAAAAAAAAAAABLL * (v20 >> 2) >= 0x1555555555555556) {
                  sub_2E00();
                }
                char v21 = (char *)operator new(v20);
                *((void *)v15 + 1) = v21;
                *((void *)v15 + 2) = v21;
                int v16 = &v21[4 * (v20 >> 2)];
                *((void *)v15 + 3) = v16;
                memcpy(v21, v19, v20);
                *((void *)v15 + 2) = v16;
              }
              v15 += 32;
              uint64_t v51 = v15;
              v14 += 32;
            }
            while (v14 != v13);
LABEL_17:
            uint64_t v14 = *(void *)__p;
            char v10 = v44;
          }
          if (v14)
          {
            uint64_t v22 = *(void *)&__p[8];
            int v23 = (void *)v14;
            if (*(void *)&__p[8] != v14)
            {
              do
              {
                unsigned int v24 = *(void **)(v22 - 24);
                if (v24)
                {
                  *(void *)(v22 - 16) = v24;
                  operator delete(v24);
                }
                v22 -= 32;
              }
              while (v22 != v14);
              int v23 = *(void **)__p;
            }
            *(void *)&__p[8] = v14;
            operator delete(v23);
          }
          if (v47)
          {
            uint64_t v48 = v47;
            operator delete(v47);
          }
          ++v9;
        }
        while (v9 != v46);
        int v25 = (char *)v50;
        unsigned int v26 = v51;
        uint64_t v6 = (uint64_t *)a3;
        if (v50 != v51)
        {
          unsigned int v27 = *(char **)(a3 + 8);
          do
          {
            LODWORD(v47) = *(_DWORD *)v25;
            unsigned int v27 = sub_2969E0((void **)a3, v27, &v47) + 4;
            v25 += 32;
          }
          while (v25 != v26);
        }
      }
      unsigned int v28 = (unsigned int *)v6[1];
      unint64_t v29 = 126 - 2 * __clz(((uint64_t)v28 - *v6) >> 2);
      if (v28 == (unsigned int *)*v6) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v29;
      }
      sub_297C1C(*v6, v28, (uint64_t)&v47, v30, 1);
      unint64_t v31 = (char *)v6[1];
      if ((char *)*v6 != v31)
      {
        int v32 = (char *)(*v6 + 4);
        while (v32 != v31)
        {
          int v34 = *((_DWORD *)v32 - 1);
          int v33 = *(_DWORD *)v32;
          v32 += 4;
          if (v34 == v33)
          {
            uint64_t v35 = v32 - 8;
            while (v32 != v31)
            {
              int v36 = v33;
              int v33 = *(_DWORD *)v32;
              if (v36 != *(_DWORD *)v32)
              {
                *((_DWORD *)v35 + 1) = v33;
                v35 += 4;
              }
              v32 += 4;
            }
            uint64_t v37 = (uint64_t)(v35 + 4);
            int64_t v38 = v31 - (v35 + 4);
            if (v31 != v35 + 4)
            {
              if (v31 != (char *)(v37 + v38)) {
                memmove(v35 + 4, (const void *)(v37 + v38), 0);
              }
              v6[1] = v37;
            }
            break;
          }
        }
      }
      unsigned int v39 = (char *)v50;
      if (v50)
      {
        uint64_t v40 = v51;
        uint64_t v41 = v50;
        if (v51 != v50)
        {
          do
          {
            unint64_t v42 = (void *)*((void *)v40 - 3);
            if (v42)
            {
              *((void *)v40 - 2) = v42;
              operator delete(v42);
            }
            v40 -= 32;
          }
          while (v40 != v39);
          uint64_t v41 = v50;
        }
        uint64_t v51 = v39;
        operator delete(v41);
      }
    }
  }
}

void sub_297954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_38358((void **)va);
  _Unwind_Resume(a1);
}

void sub_297968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_38358((void **)va);
  _Unwind_Resume(a1);
}

void sub_29797C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_38358((void **)va);
  _Unwind_Resume(a1);
}

void sub_297990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  sub_38358(&a18);
  _Unwind_Resume(a1);
}

char *sub_2979E4(void **a1, uint64_t a2)
{
  uint64_t v4 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  uint64_t v5 = (v3 - (unsigned char *)*a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = (unsigned char *)a1[2] - v4;
  if (v8 >> 4 > v6) {
    unint64_t v6 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    char v10 = (char *)operator new(32 * v9);
  }
  else
  {
    char v10 = 0;
  }
  uint64_t v11 = &v10[32 * v5];
  char v12 = &v10[32 * v9];
  unsigned int v27 = v12;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)a2;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  uint64_t v13 = (char **)(v11 + 16);
  *((void *)v11 + 3) = 0;
  unsigned int v15 = *(unsigned char **)(a2 + 8);
  uint64_t v14 = *(unsigned char **)(a2 + 16);
  int64_t v16 = v14 - v15;
  if (v14 != v15)
  {
    unsigned int v26 = v12;
    if (0xAAAAAAAAAAAAAAABLL * (v16 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    int v17 = (char *)operator new(v16);
    *((void *)v11 + 1) = v17;
    *uint64_t v13 = v17;
    unint64_t v18 = &v17[4 * (v16 >> 2)];
    *((void *)v11 + 3) = v18;
    memcpy(v17, v15, v16);
    *uint64_t v13 = v18;
    char v12 = v26;
  }
  unsigned int v19 = v11 + 32;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v19;
    a1[2] = v12;
  }
  else
  {
    uint64_t v20 = 0;
    do
    {
      char v21 = &v11[v20];
      uint64_t v22 = &v3[v20];
      *((_DWORD *)v21 - 8) = *(_DWORD *)&v3[v20 - 32];
      *((void *)v21 - 2) = 0;
      *((void *)v21 - 1) = 0;
      *(_OWORD *)(v21 - 24) = *(_OWORD *)&v3[v20 - 24];
      *((void *)v21 - 1) = *(void *)&v3[v20 - 8];
      *((void *)v22 - 3) = 0;
      *((void *)v22 - 2) = 0;
      *((void *)v22 - 1) = 0;
      v20 -= 32;
    }
    while (&v3[v20] != v4);
    int v23 = (char *)*a1;
    uint64_t v3 = (char *)a1[1];
    unsigned int v19 = v11 + 32;
    *a1 = &v11[v20];
    a1[1] = v11 + 32;
    a1[2] = v27;
    if (v3 != v23)
    {
      do
      {
        unsigned int v24 = (void *)*((void *)v3 - 3);
        if (v24)
        {
          *((void *)v3 - 2) = v24;
          operator delete(v24);
        }
        v3 -= 32;
      }
      while (v3 != v23);
      uint64_t v3 = v23;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v19;
}

void sub_297BF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = *v2;
  if (*v2)
  {
    *uint64_t v3 = v5;
    operator delete(v5);
  }
  sub_38800((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_297C1C(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v11 = a2 - 1;
  int v32 = a2 - 3;
  int v33 = a2 - 2;
  uint64_t v12 = v10;
  int v34 = a2;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = (uint64_t)a2 - v12;
    unint64_t v16 = ((uint64_t)a2 - v12) >> 2;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = sub_298074(a3, v11, (unsigned int *)v12);
          if (result)
          {
            unsigned int v26 = *(_DWORD *)v12;
            *(_DWORD *)uint64_t v12 = *v11;
            *uint64_t v11 = v26;
          }
          break;
        case 3uLL:
          uint64_t result = sub_29841C((unsigned int *)v12, (unsigned int *)(v12 + 4), v11, a3);
          break;
        case 4uLL:
          unsigned int v27 = (unsigned int *)(v12 + 8);
          sub_29841C((unsigned int *)v12, (unsigned int *)(v12 + 4), (unsigned int *)(v12 + 8), a3);
          uint64_t result = sub_298074(a3, v11, (unsigned int *)(v12 + 8));
          if (result)
          {
            unsigned int v28 = *v27;
            *unsigned int v27 = *v11;
            *uint64_t v11 = v28;
            uint64_t result = sub_298074(a3, (unsigned int *)(v12 + 8), (unsigned int *)(v12 + 4));
            if (result)
            {
              *(int32x2_t *)(v12 + 4) = vrev64_s32(*(int32x2_t *)(v12 + 4));
              uint64_t result = sub_298074(a3, (unsigned int *)(v12 + 4), (unsigned int *)v12);
              if (result) {
                *(int32x2_t *)uint64_t v12 = vrev64_s32(*(int32x2_t *)v12);
              }
            }
          }
          break;
        case 5uLL:
          uint64_t result = sub_298C50((unsigned int *)v12, (unsigned int *)(v12 + 4), (unsigned int *)(v12 + 8), (unsigned int *)(v12 + 12), v11, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v15 <= 95) {
      break;
    }
    if (v14 == 1)
    {
      if ((unsigned int *)v12 != a2)
      {
        unint64_t v29 = (v16 - 2) >> 1;
        unint64_t v30 = v29 + 1;
        unint64_t v31 = (unsigned int *)(v12 + 4 * v29);
        do
        {
          sub_298D98(v12, a3, ((uint64_t)a2 - v12) >> 2, v31--);
          --v30;
        }
        while (v30);
        return sub_298ED8(v12, a2, a3);
      }
      return result;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = (unsigned int *)(v12 + 4 * (v16 >> 1));
    if ((unint64_t)v15 < 0x201)
    {
      sub_29841C(v18, (unsigned int *)v12, v11, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_29841C((unsigned int *)v12, v18, v11, a3);
      uint64_t v19 = a5;
      uint64_t v20 = v11;
      char v21 = (_DWORD *)(v12 + 4 * v17);
      sub_29841C((unsigned int *)(v12 + 4), v21 - 1, v33, a3);
      sub_29841C((unsigned int *)(v12 + 8), (unsigned int *)(v12 + 4 + 4 * v17), v32, a3);
      sub_29841C(v21 - 1, v18, (unsigned int *)(v12 + 4 + 4 * v17), a3);
      int v22 = *(_DWORD *)v12;
      *(_DWORD *)uint64_t v12 = *v21;
      *char v21 = v22;
      uint64_t v11 = v20;
      a5 = v19;
      a2 = v34;
      if (a5) {
        goto LABEL_13;
      }
    }
    if (!sub_298074(a3, (unsigned int *)(v12 - 4), (unsigned int *)v12))
    {
      uint64_t result = (uint64_t)sub_298548((unsigned int *)v12, a2, a3);
      uint64_t v12 = result;
      goto LABEL_18;
    }
LABEL_13:
    int v23 = sub_298794((unsigned int *)v12, a2, a3);
    if ((v24 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v25 = sub_2989F4(v12, v23, a3);
    uint64_t v12 = (uint64_t)(v23 + 1);
    uint64_t result = sub_2989F4((uint64_t)(v23 + 1), a2, a3);
    if (result)
    {
      a4 = -v14;
      a2 = v23;
      if (v25) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v14 + 1;
    if (!v25)
    {
LABEL_16:
      uint64_t result = sub_297C1C(v10, v23, a3, -v14, a5 & 1);
      uint64_t v12 = (uint64_t)(v23 + 1);
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return sub_29815C(v12, a2, a3);
  }
  else
  {
    return sub_2982D8(v12, a2, a3);
  }
}

BOOL sub_298074(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  char v5 = sub_511FC(*a2);
  unsigned int v6 = sub_51938((*a2 & ~(-1 << (v5 & 0xFE))) >> 1);
  char v7 = sub_511FC(*a2);
  unsigned int v8 = sub_51938(*a2 & ~(-1 << (v7 & 0xFE)));
  char v9 = sub_511FC(*a3);
  unsigned int v10 = sub_51938((*a3 & ~(-1 << (v9 & 0xFE))) >> 1);
  char v11 = sub_511FC(*a3);
  unsigned int v12 = sub_51938(*a3 & ~(-1 << (v11 & 0xFE)));
  if (v6 < v10) {
    return 1;
  }
  return v10 >= v6 && v8 < v12;
}

uint64_t sub_29815C(uint64_t result, unsigned int *a2, uint64_t a3)
{
  if ((unsigned int *)result != a2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = (unsigned int *)result;
    char v5 = (unsigned int *)(result + 4);
    if ((unsigned int *)(result + 4) != a2)
    {
      uint64_t v6 = a3;
      uint64_t v7 = 0;
      unsigned int v8 = (unsigned int *)result;
      do
      {
        unsigned int v10 = v5;
        uint64_t result = sub_298074(v6, v5, v8);
        if (result)
        {
          unsigned int v11 = v8[1];
          v8[1] = *v8;
          char v9 = v4;
          if (v8 != v4)
          {
            uint64_t v12 = v7;
            while (1)
            {
              char v13 = sub_511FC(v11);
              unsigned int v14 = sub_51938((v11 & ~(-1 << (v13 & 0xFE))) >> 1);
              char v15 = sub_511FC(v11);
              unsigned int v16 = sub_51938(v11 & ~(-1 << (v15 & 0xFE)));
              char v17 = sub_511FC(*(unsigned int *)((char *)v4 + v12 - 4));
              unsigned int v18 = sub_51938((*(unsigned int *)((char *)v4 + v12 - 4) & ~(-1 << (v17 & 0xFE))) >> 1);
              char v19 = sub_511FC(*(unsigned int *)((char *)v4 + v12 - 4));
              uint64_t result = sub_51938(*(unsigned int *)((char *)v4 + v12 - 4) & ~(-1 << (v19 & 0xFE)));
              if (v14 >= v18 && (v18 < v14 || v16 >= result)) {
                break;
              }
              *(unsigned int *)((char *)v4 + v12) = *(unsigned int *)((char *)v4 + v12 - 4);
              v12 -= 4;
              if (!v12)
              {
                char v9 = v4;
                goto LABEL_5;
              }
            }
            char v9 = (unsigned int *)((char *)v4 + v12);
LABEL_5:
            uint64_t v3 = a2;
            uint64_t v6 = a3;
          }
          *char v9 = v11;
        }
        char v5 = v10 + 1;
        v7 += 4;
        unsigned int v8 = v10;
      }
      while (v10 + 1 != v3);
    }
  }
  return result;
}

uint64_t sub_2982D8(uint64_t result, unsigned int *a2, uint64_t a3)
{
  if ((unsigned int *)result != a2)
  {
    uint64_t v4 = (unsigned int *)result;
    char v5 = (unsigned int *)(result + 4);
    if ((unsigned int *)(result + 4) != a2)
    {
      uint64_t v7 = (unsigned int *)(result - 4);
      do
      {
        unsigned int v8 = v4;
        uint64_t v4 = v5;
        uint64_t result = sub_298074(a3, v5, v8);
        if (result)
        {
          unsigned int v9 = *v4;
          for (uint64_t i = v7; ; --i)
          {
            i[2] = i[1];
            char v11 = sub_511FC(v9);
            unsigned int v12 = sub_51938((v9 & ~(-1 << (v11 & 0xFE))) >> 1);
            char v13 = sub_511FC(v9);
            unsigned int v14 = sub_51938(v9 & ~(-1 << (v13 & 0xFE)));
            char v15 = sub_511FC(*i);
            unsigned int v16 = sub_51938((*i & ~(-1 << (v15 & 0xFE))) >> 1);
            char v17 = sub_511FC(*i);
            uint64_t result = sub_51938(*i & ~(-1 << (v17 & 0xFE)));
            if (v12 >= v16 && (v16 < v12 || v14 >= result)) {
              break;
            }
          }
          i[1] = v9;
        }
        char v5 = v4 + 1;
        ++v7;
      }
      while (v4 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_29841C(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  BOOL v8 = sub_298074(a4, a2, a1);
  uint64_t result = sub_298074(a4, a3, a2);
  if (v8)
  {
    unsigned int v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
      return 1;
    }
    *a1 = *a2;
    *a2 = v10;
    if (sub_298074(a4, a3, a2))
    {
      unsigned int v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      return 2;
    }
    return 1;
  }
  if (result)
  {
    unsigned int v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (sub_298074(a4, a2, a1))
    {
      unsigned int v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
      return 2;
    }
    return 1;
  }
  return result;
}

unsigned int *sub_298548(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  unsigned int v31 = *a1;
  if (sub_298074(a3, &v31, a2 - 1))
  {
    uint64_t v6 = a1;
    do
      ++v6;
    while (!sub_298074(a3, &v31, v6));
  }
  else
  {
    uint64_t v7 = a1 + 1;
    do
    {
      uint64_t v6 = v7;
      if (v7 >= v4) {
        break;
      }
      BOOL v8 = sub_298074(a3, &v31, v7);
      uint64_t v7 = v6 + 1;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      --v4;
    while (sub_298074(a3, &v31, v4));
  }
  while (v6 < v4)
  {
    unsigned int v9 = *v6;
    *uint64_t v6 = *v4;
    unsigned int *v4 = v9;
    unsigned int v10 = v6 + 1;
    do
    {
      uint64_t v6 = v10;
      char v11 = sub_511FC(v31);
      unsigned int v12 = sub_51938((v31 & ~(-1 << (v11 & 0xFE))) >> 1);
      char v13 = sub_511FC(v31);
      unsigned int v14 = sub_51938(v31 & ~(-1 << (v13 & 0xFE)));
      char v15 = sub_511FC(*v6);
      unsigned int v16 = sub_51938((*v6 & ~(-1 << (v15 & 0xFE))) >> 1);
      char v17 = sub_511FC(*v6);
      unsigned int v18 = sub_51938(*v6 & ~(-1 << (v17 & 0xFE)));
      if (v12 < v16) {
        break;
      }
      unsigned int v10 = v6 + 1;
    }
    while (v16 < v12 || v14 >= v18);
    do
    {
      do
      {
        char v20 = sub_511FC(v31);
        unsigned int v21 = sub_51938((v31 & ~(-1 << (v20 & 0xFE))) >> 1);
        char v22 = sub_511FC(v31);
        unsigned int v23 = sub_51938(v31 & ~(-1 << (v22 & 0xFE)));
        unsigned int v24 = *--v4;
        char v25 = sub_511FC(v24);
        unsigned int v26 = sub_51938((*v4 & ~(-1 << (v25 & 0xFE))) >> 1);
        char v27 = sub_511FC(*v4);
        unsigned int v28 = sub_51938(*v4 & ~(-1 << (v27 & 0xFE)));
      }
      while (v21 < v26);
    }
    while (v26 >= v21 && v23 < v28);
  }
  if (v6 - 1 != a1) {
    *a1 = *(v6 - 1);
  }
  *(v6 - 1) = v31;
  return v6;
}

unsigned int *sub_298794(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  unsigned int v32 = *a1;
  do
    ++v6;
  while (sub_298074(a3, &a1[v6], &v32));
  uint64_t v7 = &a1[v6];
  BOOL v8 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      --a2;
    }
    while (!sub_298074(a3, a2, &v32));
  }
  else
  {
    do
      --a2;
    while (!sub_298074(a3, a2, &v32));
  }
  if (v7 < a2)
  {
    unsigned int v9 = &a1[v6];
    unsigned int v10 = a2;
    do
    {
      unsigned int v11 = *v9;
      *v9++ = *v10;
      unsigned int *v10 = v11;
      while (1)
      {
        char v12 = sub_511FC(*v9);
        unsigned int v13 = sub_51938((*v9 & ~(-1 << (v12 & 0xFE))) >> 1);
        char v14 = sub_511FC(*v9);
        unsigned int v15 = sub_51938(*v9 & ~(-1 << (v14 & 0xFE)));
        char v16 = sub_511FC(v32);
        unsigned int v17 = sub_51938((v32 & ~(-1 << (v16 & 0xFE))) >> 1);
        char v18 = sub_511FC(v32);
        unsigned int v19 = sub_51938(v32 & ~(-1 << (v18 & 0xFE)));
        if (v13 >= v17 && (v17 < v13 || v15 >= v19)) {
          break;
        }
        ++v9;
      }
      unsigned int v21 = v10 - 1;
      do
      {
        unsigned int v10 = v21;
        char v22 = sub_511FC(*v21);
        unsigned int v23 = sub_51938((*v10 & ~(-1 << (v22 & 0xFE))) >> 1);
        char v24 = sub_511FC(*v10);
        unsigned int v25 = sub_51938(*v10 & ~(-1 << (v24 & 0xFE)));
        char v26 = sub_511FC(v32);
        unsigned int v27 = sub_51938((v32 & ~(-1 << (v26 & 0xFE))) >> 1);
        char v28 = sub_511FC(v32);
        unsigned int v29 = sub_51938(v32 & ~(-1 << (v28 & 0xFE)));
        if (v23 < v27) {
          break;
        }
        unsigned int v21 = v10 - 1;
      }
      while (v27 < v23 || v25 >= v29);
    }
    while (v9 < v10);
    BOOL v8 = v9 - 1;
  }
  if (v8 != a1) {
    *a1 = *v8;
  }
  unsigned int *v8 = v32;
  return v8;
}

BOOL sub_2989F4(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = ((uint64_t)a2 - a1) >> 2;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v8 = a2 - 1;
      if (sub_298074(a3, a2 - 1, (unsigned int *)a1))
      {
        unsigned int v9 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *v8;
        unsigned int *v8 = v9;
      }
      return 1;
    case 3:
      sub_29841C((unsigned int *)a1, (unsigned int *)(a1 + 4), a2 - 1, a3);
      return 1;
    case 4:
      char v16 = (unsigned int *)(a1 + 8);
      unsigned int v17 = a2 - 1;
      sub_29841C((unsigned int *)a1, (unsigned int *)(a1 + 4), (unsigned int *)(a1 + 8), a3);
      if (sub_298074(a3, v17, (unsigned int *)(a1 + 8)))
      {
        unsigned int v18 = *v16;
        unsigned int *v16 = *v17;
        *unsigned int v17 = v18;
        if (sub_298074(a3, (unsigned int *)(a1 + 8), (unsigned int *)(a1 + 4)))
        {
          *(int32x2_t *)(a1 + 4) = vrev64_s32(*(int32x2_t *)(a1 + 4));
          if (sub_298074(a3, (unsigned int *)(a1 + 4), (unsigned int *)a1)) {
            *(int32x2_t *)a1 = vrev64_s32(*(int32x2_t *)a1);
          }
        }
      }
      return 1;
    case 5:
      sub_298C50((unsigned int *)a1, (unsigned int *)(a1 + 4), (unsigned int *)(a1 + 8), (unsigned int *)(a1 + 12), a2 - 1, a3);
      return 1;
    default:
      unsigned int v10 = (unsigned int *)(a1 + 8);
      sub_29841C((unsigned int *)a1, (unsigned int *)(a1 + 4), (unsigned int *)(a1 + 8), a3);
      unsigned int v11 = (unsigned int *)(a1 + 12);
      if ((unsigned int *)(a1 + 12) == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (!sub_298074(a3, v11, v10))
  {
LABEL_13:
    unsigned int v10 = v11;
    v12 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
  unsigned int v19 = *v11;
  uint64_t v14 = v12;
  do
  {
    uint64_t v15 = a1 + v14;
    *(_DWORD *)(a1 + v14 + 12) = *(_DWORD *)(a1 + v14 + 8);
    if (v14 == -8)
    {
      *(_DWORD *)a1 = v19;
      if (++v13 != 8) {
        goto LABEL_13;
      }
      return v11 + 1 == a2;
    }
    v14 -= 4;
  }
  while (sub_298074(a3, &v19, (unsigned int *)(v15 + 4)));
  *(_DWORD *)(a1 + v14 + 12) = v19;
  if (++v13 != 8) {
    goto LABEL_13;
  }
  return v11 + 1 == a2;
}

BOOL sub_298C50(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  sub_29841C(a1, a2, a3, a6);
  if (sub_298074(a6, a4, a3))
  {
    unsigned int v12 = *a3;
    *a3 = *a4;
    *a4 = v12;
    if (sub_298074(a6, a3, a2))
    {
      unsigned int v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      if (sub_298074(a6, a2, a1))
      {
        unsigned int v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  BOOL result = sub_298074(a6, a5, a4);
  if (result)
  {
    unsigned int v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    BOOL result = sub_298074(a6, a4, a3);
    if (result)
    {
      unsigned int v17 = *a3;
      *a3 = *a4;
      *a4 = v17;
      BOOL result = sub_298074(a6, a3, a2);
      if (result)
      {
        unsigned int v18 = *a2;
        *a2 = *a3;
        *a3 = v18;
        BOOL result = sub_298074(a6, a2, a1);
        if (result)
        {
          unsigned int v19 = *a1;
          *a1 = *a2;
          *a2 = v19;
        }
      }
    }
  }
  return result;
}

BOOL sub_298D98(BOOL result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v20 = v4;
    uint64_t v21 = v5;
    uint64_t v7 = a4;
    BOOL v8 = result;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v12 = ((uint64_t)a4 - result) >> 1;
      uint64_t v13 = v12 + 1;
      unsigned int v14 = (unsigned int *)(result + 4 * (v12 + 1));
      uint64_t v15 = v12 + 2;
      if (v12 + 2 < a3 && sub_298074(a2, (unsigned int *)(result + 4 * (v12 + 1)), v14 + 1))
      {
        ++v14;
        uint64_t v13 = v15;
      }
      BOOL result = sub_298074(a2, v14, v7);
      if (!result)
      {
        unsigned int v19 = *v7;
        do
        {
          unsigned int v16 = v14;
          *uint64_t v7 = *v14;
          if (v9 < v13) {
            break;
          }
          uint64_t v17 = (2 * v13) | 1;
          unsigned int v14 = (unsigned int *)(v8 + 4 * v17);
          uint64_t v18 = 2 * v13 + 2;
          if (v18 < a3 && sub_298074(a2, (unsigned int *)(v8 + 4 * v17), v14 + 1))
          {
            ++v14;
            uint64_t v17 = v18;
          }
          BOOL result = sub_298074(a2, v14, &v19);
          uint64_t v7 = v16;
          uint64_t v13 = v17;
        }
        while (!result);
        unsigned int *v16 = v19;
      }
    }
  }
  return result;
}

uint64_t sub_298ED8(uint64_t result, unsigned int *a2, uint64_t a3)
{
  if ((uint64_t)a2 - result >= 5)
  {
    uint64_t v32 = v3;
    uint64_t v33 = v4;
    uint64_t v5 = a2;
    unint64_t v6 = (unsigned int *)result;
    uint64_t v7 = ((unint64_t)a2 - result) >> 2;
    char v28 = (unsigned int *)result;
    do
    {
      uint64_t v9 = 0;
      unsigned int v29 = *v6;
      int64_t v10 = (unint64_t)(v7 - 2) >> 1;
      unsigned int v11 = v6;
      unint64_t v30 = v5;
      do
      {
        uint64_t v12 = v11;
        v11 += v9 + 1;
        uint64_t v13 = 2 * v9;
        uint64_t v9 = (2 * v9) | 1;
        uint64_t v14 = v13 + 2;
        if (v13 + 2 < v7)
        {
          char v15 = sub_511FC(*v11);
          unsigned int v16 = sub_51938((*v11 & ~(-1 << (v15 & 0xFE))) >> 1);
          char v17 = sub_511FC(*v11);
          unsigned int v18 = sub_51938(*v11 & ~(-1 << (v17 & 0xFE)));
          char v19 = sub_511FC(v11[1]);
          unsigned int v20 = sub_51938((v11[1] & ~(-1 << (v19 & 0xFE))) >> 1);
          char v21 = sub_511FC(v11[1]);
          BOOL result = sub_51938(v11[1] & ~(-1 << (v21 & 0xFE)));
          int64_t v10 = (unint64_t)(v7 - 2) >> 1;
          if (v16 < v20 || (v18 < result ? (BOOL v22 = v20 >= v16) : (BOOL v22 = 0), v22))
          {
            ++v11;
            uint64_t v9 = v14;
          }
        }
        *uint64_t v12 = *v11;
      }
      while (v9 <= v10);
      uint64_t v5 = v30 - 1;
      if (v11 == v30 - 1)
      {
        *unsigned int v11 = v29;
        unint64_t v6 = v28;
      }
      else
      {
        *unsigned int v11 = *v5;
        *uint64_t v5 = v29;
        unint64_t v6 = v28;
        uint64_t v23 = (char *)v11 - (char *)v28 + 4;
        if (v23 >= 5)
        {
          unint64_t v24 = (((unint64_t)v23 >> 2) - 2) >> 1;
          unsigned int v25 = &v28[v24];
          BOOL result = sub_298074(a3, v25, v11);
          if (result)
          {
            unsigned int v31 = *v11;
            do
            {
              char v26 = v25;
              *unsigned int v11 = *v25;
              if (!v24) {
                break;
              }
              unint64_t v24 = (v24 - 1) >> 1;
              unsigned int v25 = &v28[v24];
              BOOL result = sub_298074(a3, v25, &v31);
              unsigned int v11 = v26;
            }
            while ((result & 1) != 0);
            *char v26 = v31;
          }
        }
      }
    }
    while (v7-- > 2);
  }
  return result;
}

void sub_299108(uint64_t a1, int *a2)
{
  unint64_t v26 = *(void *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *a2 + 4));
  uint64_t v4 = *(void *)(a1 + 8);
  sub_299508(*(void *)a1, &v26, &v26);
  if (v5)
  {
    sub_295550(v4, v26, (unint64_t *)&__p);
    unint64_t v6 = __p;
    if (__p != v25)
    {
      int v7 = sub_2992EC(*(uint64_t **)(a1 + 16), *(void *)__p, 0);
      int v8 = sub_2992EC(*(uint64_t **)(a1 + 16), *(v25 - 1), 1);
      if (v7 != v8)
      {
        char v9 = v8 ^ 1;
        uint64_t v10 = *(void *)(a1 + 24);
        uint64_t v11 = __ROR8__(*(void *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *a2 + 4)), 32);
        uint64_t v13 = *(_DWORD **)(v10 + 8);
        unint64_t v12 = *(void *)(v10 + 16);
        if ((unint64_t)v13 >= v12)
        {
          char v15 = *(_DWORD **)v10;
          uint64_t v16 = ((uint64_t)v13 - *(void *)v10) >> 3;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v18 = v12 - (void)v15;
          if (v18 >> 2 > v17) {
            unint64_t v17 = v18 >> 2;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19 >> 61) {
            sub_188D718();
          }
          unsigned int v20 = (char *)operator new(8 * v19);
          char v21 = &v20[8 * v16];
          *(_DWORD *)char v21 = HIDWORD(v11);
          *((_WORD *)v21 + 2) = v11;
          v21[6] = v9;
          for (uint64_t i = v21 + 8; v13 != v15; *(_DWORD *)(v21 + 3) = v23)
          {
            int v22 = *(v13 - 2);
            v13 -= 2;
            int v23 = *(_DWORD *)((char *)v13 + 3);
            *((_DWORD *)v21 - 2) = v22;
            v21 -= 8;
          }
          *(void *)uint64_t v10 = v21;
          *(void *)(v10 + 8) = i;
          *(void *)(v10 + 16) = &v20[8 * v19];
          if (v15) {
            operator delete(v15);
          }
        }
        else
        {
          *uint64_t v13 = HIDWORD(v11);
          *((_WORD *)v13 + 2) = v11;
          uint64_t i = (char *)(v13 + 2);
          *((unsigned char *)v13 + 6) = v9;
        }
        *(void *)(v10 + 8) = i;
      }
      unint64_t v6 = __p;
    }
    if (v6)
    {
      unsigned int v25 = v6;
      operator delete(v6);
    }
  }
}

void sub_2992C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2992EC(uint64_t *a1, unint64_t a2, int a3)
{
  unint64_t v6 = sub_2964C4(*a1, a2, 0);
  char v9 = &v6[-*(int *)v6];
  if (*(unsigned __int16 *)v9 < 5u)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = *((unsigned __int16 *)v9 + 2);
    if (v10) {
      v10 += (uint64_t)&v6[*(unsigned int *)&v6[v10]];
    }
  }
  uint64_t v11 = (int *)(v10 + 4 * HIDWORD(a2) + 4 + *(unsigned int *)(v10 + 4 * HIDWORD(a2) + 4));
  unint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 7u)
  {
    uint64_t v13 = v12[3];
    if (v13)
    {
      uint64_t v14 = (unsigned int *)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13));
      if (a3) {
        unsigned int v15 = *v14 - 1;
      }
      else {
        unsigned int v15 = 0;
      }
      unsigned int v27 = (unsigned __int16 *)sub_296880(v14, v15);
      int v28 = *v27;
      int v29 = v27[1];
      unsigned int v30 = sub_511FC(a2);
      unsigned int v31 = a2 & ~(-1 << (v30 & 0xFE));
      int v32 = sub_51938(v31);
      int v33 = sub_51938(v31 >> 1);
      int v34 = 1 << -(char)(v30 >> 1);
      if (v30 < 2) {
        int v34 = -2;
      }
      unsigned int v35 = v34 * v32 + 4 * v28;
      unsigned int v16 = v34 * v33 + 4 * v29;
      if (v16 >= 0xFFFFFFFE) {
        unsigned int v16 = -2;
      }
      double v17 = (double)v35;
      uint64_t v36 = a1[1];
      unint64_t v19 = *(void **)v36;
      unsigned int v20 = *(void **)(v36 + 8);
      if (*(void **)v36 == v20) {
        goto LABEL_31;
      }
      goto LABEL_10;
    }
  }
  unsigned int v16 = -1;
  double v17 = 4294967300.0;
  uint64_t v18 = a1[1];
  unint64_t v19 = *(void **)v18;
  unsigned int v20 = *(void **)(v18 + 8);
  if (*(void **)v18 != v20)
  {
LABEL_10:
    int v21 = 0;
    while (1)
    {
      int v22 = (_DWORD *)v19[1];
      int v23 = (_DWORD *)(*v19 + 12);
      if ((_DWORD *)*v19 != v22 && v23 != v22) {
        break;
      }
LABEL_11:
      v19 += 3;
      if (v19 == v20) {
        return v21 != 0;
      }
    }
    while (1)
    {
      unsigned int v25 = *(v23 - 2);
      unsigned int v26 = v23[1];
      if (v25 >= v16)
      {
        if (v26 < v16)
        {
LABEL_23:
          LODWORD(v7) = *v23;
          LODWORD(v8) = *(v23 - 3);
          double v8 = (double)*(unint64_t *)&v8;
          double v7 = ((double)v16 - (double)v25) / ((double)v26 - (double)v25) * ((double)*(unint64_t *)&v7 - v8) + v8;
          if (v7 < v17) {
            v21 ^= 1u;
          }
        }
      }
      else if (v26 >= v16)
      {
        goto LABEL_23;
      }
      v23 += 3;
      if (v23 == v22) {
        goto LABEL_11;
      }
    }
  }
LABEL_31:
  int v21 = 0;
  return v21 != 0;
}

uint64_t *sub_299508(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = __ROR8__(*a2, 32);
  unint64_t v8 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) >> 33));
  unint64_t v9 = v8 ^ (v8 >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8 ^ (v8 >> 33);
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == HIDWORD(v6)) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v3)
            {
              goto LABEL_31;
            }
            uint64_t v13 = (uint64_t *)*v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == HIDWORD(v6)) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  unint64_t v19 = operator new(0x18uLL);
  *unint64_t v19 = 0;
  v19[1] = v9;
  v19[2] = *a3;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    int v23 = *(void **)(*(void *)a1 + 8 * v3);
    if (v23)
    {
LABEL_34:
      *unint64_t v19 = *v23;
LABEL_69:
      *int v23 = v19;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        int v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v22 = *(void *)a1;
        int v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v3 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      int v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  *unint64_t v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v19;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v19)
  {
    unint64_t v32 = *(void *)(*v19 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    int v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v19;
}

void sub_29985C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_299870(uint64_t *a1, int *a2)
{
  unint64_t v40 = *(void *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *a2 + 4));
  uint64_t v4 = a1[1];
  sub_299508(*a1, &v40, &v40);
  if (v5)
  {
    sub_295550(v4, v40, (unint64_t *)&v38);
    uint64_t v6 = v38;
    unint64_t v7 = v39;
    if (v38 != v39)
    {
      unint64_t v8 = (uint64_t *)a1[2];
      while (1)
      {
        unint64_t v9 = *v6;
        if (!sub_2992EC(v8, *v6, 0) || !sub_2992EC(v8, v9, 1)) {
          break;
        }
        if (++v6 == v7)
        {
          uint64_t v10 = a1[3];
          uint64_t v11 = __ROR8__(*(void *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *a2 + 4)), 32);
          uint64_t v13 = *(_DWORD **)(v10 + 8);
          unint64_t v12 = *(void *)(v10 + 16);
          if ((unint64_t)v13 >= v12)
          {
            unsigned int v15 = *(_DWORD **)v10;
            uint64_t v16 = ((uint64_t)v13 - *(void *)v10) >> 3;
            unint64_t v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 61) {
              sub_2E00();
            }
            uint64_t v18 = v12 - (void)v15;
            if (v18 >> 2 > v17) {
              unint64_t v17 = v18 >> 2;
            }
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v19 = v17;
            }
            if (v19 >> 61) {
              sub_188D718();
            }
            float v20 = (char *)operator new(8 * v19);
            float v21 = &v20[8 * v16];
            *(_DWORD *)float v21 = HIDWORD(v11);
            *((_WORD *)v21 + 2) = v11;
            v21[6] = 0;
            for (uint64_t i = v21 + 8; v13 != v15; *(_DWORD *)(v21 + 3) = v23)
            {
              int v22 = *(v13 - 2);
              v13 -= 2;
              int v23 = *(_DWORD *)((char *)v13 + 3);
              *((_DWORD *)v21 - 2) = v22;
              v21 -= 8;
            }
            *(void *)uint64_t v10 = v21;
            *(void *)(v10 + 8) = i;
            *(void *)(v10 + 16) = &v20[8 * v19];
            if (v15) {
              operator delete(v15);
            }
          }
          else
          {
            *uint64_t v13 = HIDWORD(v11);
            *((_WORD *)v13 + 2) = v11;
            uint64_t i = (char *)(v13 + 2);
            *((unsigned char *)v13 + 6) = 0;
          }
          *(void *)(v10 + 8) = i;
          uint64_t v24 = a1[3];
          uint64_t v25 = __ROR8__(*(void *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *a2 + 4)), 32);
          unsigned int v27 = *(_DWORD **)(v24 + 8);
          unint64_t v26 = *(void *)(v24 + 16);
          if ((unint64_t)v27 >= v26)
          {
            uint8x8_t v29 = *(_DWORD **)v24;
            uint64_t v30 = ((uint64_t)v27 - *(void *)v24) >> 3;
            unint64_t v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 61) {
              sub_2E00();
            }
            uint64_t v32 = v26 - (void)v29;
            if (v32 >> 2 > v31) {
              unint64_t v31 = v32 >> 2;
            }
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v31;
            }
            if (v33 >> 61) {
              sub_188D718();
            }
            int v34 = (char *)operator new(8 * v33);
            unsigned int v35 = &v34[8 * v30];
            *(_DWORD *)unsigned int v35 = HIDWORD(v25);
            *((_WORD *)v35 + 2) = v25;
            v35[6] = 1;
            for (j = v35 + 8; v27 != v29; *(_DWORD *)(v35 + 3) = v37)
            {
              int v36 = *(v27 - 2);
              v27 -= 2;
              int v37 = *(_DWORD *)((char *)v27 + 3);
              *((_DWORD *)v35 - 2) = v36;
              v35 -= 8;
            }
            *(void *)uint64_t v24 = v35;
            *(void *)(v24 + 8) = j;
            *(void *)(v24 + 16) = &v34[8 * v33];
            if (v29) {
              operator delete(v29);
            }
          }
          else
          {
            *unsigned int v27 = HIDWORD(v25);
            *((_WORD *)v27 + 2) = v25;
            *((unsigned char *)v27 + 6) = 1;
            j = (char *)(v27 + 2);
          }
          *(void *)(v24 + 8) = j;
          break;
        }
      }
      uint64_t v6 = v38;
    }
    if (v6)
    {
      unsigned int v39 = v6;
      operator delete(v6);
    }
  }
}

void sub_299B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_299B58(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = a3[1];
  *(void *)(a1 + 16) = *a3;
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = (uint64_t *)(a1 + 16);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 32) = 0;
  sub_29C9A0(a1 + 36, *(void *)a1 != 0, a4);
  if (*(unsigned char *)(a1 + 56))
  {
    unint64_t v7 = (void *)*v6;
    if (*v6)
    {
      LODWORD(v7) = sub_2ABBE0(v7, 11, 1);
      if (v7) {
        LOBYTE(v7) = sub_2AB7E4(*v6);
      }
    }
    *(unsigned char *)(a1 + 32) = (_BYTE)v7;
    return a1;
  }
  else
  {
    *(unsigned char *)(a1 + 32) = 0;
    return a1;
  }
}

void sub_299C18(_Unwind_Exception *a1)
{
  sub_14A84(v2);
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_299C38(uint64_t a1)
{
  if (*(void *)a1) {
    return *(unsigned int *)(*(void *)a1 + 504);
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t *sub_299C50(void *a1)
{
  if (*a1) {
    return (uint64_t *)(*a1 + 520);
  }
  BOOL result = &qword_2556E60;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2556E18, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2556E18))
    {
      qword_2556E68 = 0;
      unk_2556E70 = 0;
      qword_2556E60 = 0;
      __cxa_guard_release(&qword_2556E18);
    }
    return &qword_2556E60;
  }
  return result;
}

uint64_t *sub_299CE4(void *a1)
{
  if (*a1) {
    return (uint64_t *)(*a1 + 544);
  }
  BOOL result = &qword_2556E78;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2556E20, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2556E20))
    {
      qword_2556E80 = 0;
      unk_2556E88 = 0;
      qword_2556E78 = 0;
      __cxa_guard_release(&qword_2556E20);
    }
    return &qword_2556E78;
  }
  return result;
}

double sub_299D78(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  double result = -1.0;
  if (*a1)
  {
    uint64_t v4 = *(void *)(v2 + 8);
    uint64_t v5 = *(void *)(v2 + 16);
    if (v5 - v4 >= 16)
    {
      if (v5 - v4 != 16)
      {
        unint64_t v6 = (unint64_t)(v5 - v4) >> 4;
        do
        {
          unint64_t v7 = (4 * v6) & 0xFFFFFFFFFFFFFFF0;
          _X14 = v4 + v7;
          __asm { PRFM            #0, [X14] }
          unint64_t v14 = (void *)(v4 + 16 * (v6 >> 1));
          _X13 = (char *)v14 + v7;
          __asm { PRFM            #0, [X13] }
          if (*v14 >= a2) {
            unint64_t v17 = 0;
          }
          else {
            unint64_t v17 = v6 >> 1;
          }
          v4 += 16 * v17;
          v6 -= v6 >> 1;
        }
        while ((uint64_t)v6 > 1);
      }
      v4 += 16 * (*(void *)v4 < a2);
    }
    if (v5 != v4 && *(void *)v4 == a2)
    {
      while (*(void *)v4 == a2)
      {
        if ((*(_DWORD *)(v4 + 8) & (1 << *((_DWORD *)a1 + 9))) - 1 <= 0xFFFFFFFD)
        {
          LODWORD(result) = *(_DWORD *)(v4 + 12);
          return (double)*(unint64_t *)&result;
        }
        v4 += 16;
        if (v4 == v5) {
          return result;
        }
      }
    }
  }
  return result;
}

double sub_299E44(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v3 = *a1;
  double result = -1.0;
  if (*a1)
  {
    uint64_t v5 = *(void *)(v3 + 8);
    uint64_t v6 = *(void *)(v3 + 16);
    if (v6 - v5 >= 16)
    {
      if (v6 - v5 != 16)
      {
        unint64_t v7 = (unint64_t)(v6 - v5) >> 4;
        do
        {
          unint64_t v8 = (4 * v7) & 0xFFFFFFFFFFFFFFF0;
          _X13 = v5 + v8;
          __asm { PRFM            #0, [X13] }
          unsigned int v15 = (void *)(v5 + 16 * (v7 >> 1));
          _X12 = (char *)v15 + v8;
          __asm { PRFM            #0, [X12] }
          if (*v15 >= a2) {
            unint64_t v18 = 0;
          }
          else {
            unint64_t v18 = v7 >> 1;
          }
          v5 += 16 * v18;
          v7 -= v7 >> 1;
        }
        while ((uint64_t)v7 > 1);
      }
      v5 += 16 * (*(void *)v5 < a2);
    }
    if (v6 != v5 && *(void *)v5 == a2)
    {
      while (*(void *)v5 == a2)
      {
        if ((*(_DWORD *)(v5 + 8) & (1 << a3)) - 1 <= 0xFFFFFFFD)
        {
          LODWORD(result) = *(_DWORD *)(v5 + 12);
          return (double)*(unint64_t *)&result;
        }
        v5 += 16;
        if (v5 == v6) {
          return result;
        }
      }
    }
  }
  return result;
}

double sub_299F0C(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4)
{
  double v5 = -1.0;
  if (!a2) {
    return v5;
  }
  uint64_t v7 = *(void *)a1;
  if (!*(void *)a1)
  {
    unint64_t v9 = (unsigned int *)&unk_20E12F0;
LABEL_10:
    if (*((unsigned __int16 *)v9 + 28) < a4) {
      return v5;
    }
    return *((double *)v9 + 5);
  }
  uint64_t v8 = 1 << *(_DWORD *)(a1 + 36);
  unint64_t v9 = sub_29BAFC(a1, a2, v8, (unsigned int **)(v7 + 32), a3);
  uint64_t v10 = *(unsigned int **)(v7 + 40);
  if (v10 == v9)
  {
    unint64_t v9 = (unsigned int *)&unk_20E12F0;
    if (a4) {
      return v5;
    }
    return *((double *)v9 + 5);
  }
  do
  {
    if (((4 * v9[1]) | ((unint64_t)*v9 << 32) | ((unint64_t)v9[1] >> 31) | ((unint64_t)v9[1] >> 29) & 2) != ((a2 >> 30) & 0xFFFFFFFC | (a2 << 32) | (a2 >> 63) | (a2 >> 61) & 2)) {
      break;
    }
    if ((v9[4] & v8) - 1 < 0xFFFFFFFE) {
      goto LABEL_10;
    }
    v9 += 18;
  }
  while (v9 != v10);
  unint64_t v9 = (unsigned int *)&unk_20E12F0;
  if (!a4) {
    return *((double *)v9 + 5);
  }
  return v5;
}

double sub_29A02C(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return -9.22337204e18;
  }
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v3 = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t v4 = 1 << *(_DWORD *)(a1 + 36);
    double v5 = sub_29BAFC(a1, a2, v4, (unsigned int **)(v3 + 32), (uint64_t)v8);
    uint64_t v6 = *(unsigned int **)(v3 + 40);
    if (v6 == v5)
    {
      return -9.22337204e18;
    }
    else
    {
      do
      {
        if (((4 * v5[1]) | ((unint64_t)*v5 << 32) | ((unint64_t)v5[1] >> 31) | ((unint64_t)v5[1] >> 29) & 2) != ((a2 >> 30) & 0xFFFFFFFC | (a2 << 32) | (a2 >> 63) | (a2 >> 61) & 2)) {
          break;
        }
        if ((v5[4] & v4) - 1 < 0xFFFFFFFE) {
          return *((double *)v5 + 6);
        }
        v5 += 18;
      }
      while (v5 != v6);
      return -9.22337204e18;
    }
  }
  else
  {
    double v5 = (unsigned int *)&unk_20E12F0;
    return *((double *)v5 + 6);
  }
}

uint64_t sub_29A160(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v3 = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t v4 = 1 << *(_DWORD *)(a1 + 36);
    double v5 = sub_29BAFC(a1, a2, v4, (unsigned int **)(v3 + 32), (uint64_t)v8);
    uint64_t v6 = *(unsigned int **)(v3 + 40);
    if (v6 == v5)
    {
      return 0;
    }
    else
    {
      do
      {
        if (((4 * v5[1]) | ((unint64_t)*v5 << 32) | ((unint64_t)v5[1] >> 31) | ((unint64_t)v5[1] >> 29) & 2) != ((a2 >> 30) & 0xFFFFFFFC | (a2 << 32) | (a2 >> 63) | (a2 >> 61) & 2)) {
          break;
        }
        if ((v5[4] & v4) - 1 < 0xFFFFFFFE) {
          return *((unsigned __int16 *)v5 + 28);
        }
        v5 += 18;
      }
      while (v5 != v6);
      return 0;
    }
  }
  else
  {
    double v5 = (unsigned int *)&unk_20E12F0;
    return *((unsigned __int16 *)v5 + 28);
  }
}

double sub_29A290(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0.0;
  }
  int v3 = *(_DWORD *)(a1 + 36);
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v4 = *(void *)a1;
  if (!*(void *)a1
    || (uint64_t v5 = 1 << v3,
        uint64_t v6 = sub_29BAFC(a1, a2, 1 << v3, (unsigned int **)(v4 + 32), (uint64_t)v9),
        uint64_t v7 = *(unsigned int **)(v4 + 40),
        v7 == v6))
  {
    uint64_t v6 = (unsigned int *)&unk_20E12F0;
  }
  else
  {
    do
    {
      if (((4 * v6[1]) | ((unint64_t)*v6 << 32) | ((unint64_t)v6[1] >> 31) | ((unint64_t)v6[1] >> 29) & 2) != ((a2 >> 30) & 0xFFFFFFFC | (a2 << 32) | (a2 >> 63) | (a2 >> 61) & 2)) {
        break;
      }
      if ((v6[4] & v5) - 1 < 0xFFFFFFFE) {
        return *((float *)v6 + 15);
      }
      v6 += 18;
    }
    while (v6 != v7);
    uint64_t v6 = (unsigned int *)&unk_20E12F0;
  }
  return *((float *)v6 + 15);
}

double sub_29A394(uint64_t *a1, unint64_t a2, char a3)
{
  if (!a2) {
    return 0.0;
  }
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v4 = *a1;
  if (!*a1
    || (int v5 = 1 << a3,
        uint64_t v6 = sub_29BAFC((uint64_t)a1, a2, 1 << a3, (unsigned int **)(v4 + 32), (uint64_t)v9),
        uint64_t v7 = *(unsigned int **)(v4 + 40),
        v7 == v6))
  {
    uint64_t v6 = (unsigned int *)&unk_20E12F0;
  }
  else
  {
    do
    {
      if (((4 * v6[1]) | ((unint64_t)*v6 << 32) | ((unint64_t)v6[1] >> 31) | ((unint64_t)v6[1] >> 29) & 2) != ((a2 >> 30) & 0xFFFFFFFC | (a2 << 32) | (a2 >> 63) | (a2 >> 61) & 2)) {
        break;
      }
      if ((v6[4] & v5) - 1 < 0xFFFFFFFE) {
        return *((float *)v6 + 15);
      }
      v6 += 18;
    }
    while (v6 != v7);
    uint64_t v6 = (unsigned int *)&unk_20E12F0;
  }
  return *((float *)v6 + 15);
}

void sub_29A494(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(void *)a1)
  {
    int v6 = *(_DWORD *)(a1 + 44);
    int v7 = *(_DWORD *)(a1 + 48);
    if (v6 == v7)
    {
      sub_29A5CC((char *)a1, a2, v6, (uint64_t)a3);
    }
    else
    {
      sub_29A5CC((char *)a1, a2, v6, (uint64_t)v9);
      sub_29A5CC((char *)a1, a2, v7, (uint64_t)__p);
      sub_29A6FC((uint64_t *)v9, (uint64_t *)__p, (uint64_t)a3);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v9[0])
      {
        v9[1] = v9[0];
        operator delete(v9[0]);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_29A580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v14 = a12;
    if (!a12) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v14 = a12;
    if (!a12) {
      goto LABEL_3;
    }
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

char *sub_29A5CC@<X0>(char *result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  int v5 = result;
  uint64_t v7 = *(void *)result;
  uint64_t v9 = *(void *)(*(void *)result + 56);
  uint64_t v8 = *(void *)(*(void *)result + 64);
  if (v8 - v9 >= 32)
  {
    if (v8 - v9 != 32)
    {
      unint64_t v10 = (unint64_t)(v8 - v9) >> 5;
      do
      {
        unint64_t v11 = (8 * v10) & 0xFFFFFFFFFFFFFFE0;
        _X13 = v9 + v11;
        __asm { PRFM            #0, [X13] }
        unint64_t v18 = (void *)(v9 + 32 * (v10 >> 1));
        _X12 = (char *)v18 + v11;
        __asm { PRFM            #0, [X12] }
        if (*v18 >= a2) {
          unint64_t v21 = 0;
        }
        else {
          unint64_t v21 = v10 >> 1;
        }
        v9 += 32 * v21;
        v10 -= v10 >> 1;
      }
      while ((uint64_t)v10 > 1);
    }
    v9 += 32 * (*(void *)v9 < a2);
  }
  if (v8 == v9 || *(void *)v9 != a2)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    int v22 = 1 << a3;
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    do
    {
      if (*(void *)v9 != a2) {
        break;
      }
      if ((*(_DWORD *)(v9 + 8) & v22) - 1 <= 0xFFFFFFFD)
      {
        double result = sub_29BD5C((char **)a4, (_OWORD *)v9);
        uint64_t v7 = *(void *)v5;
      }
      v9 += 32;
    }
    while (v9 != *(void *)(v7 + 64));
  }
  return result;
}

void sub_29A6E0(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_29A6FC(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v9 = ((v8 - *a2) >> 5) + ((v6 - *a1) >> 5);
  if (v9)
  {
    if (v9 >> 59) {
      sub_2E00();
    }
    unint64_t v10 = (char *)operator new(32 * v9);
    *(void *)a3 = v10;
    *(void *)(a3 + 8) = v10;
    *(void *)(a3 + 16) = &v10[32 * v9];
    unint64_t v17 = (char **)a3;
    if (v5 == v6)
    {
LABEL_6:
      unint64_t v11 = v10;
      unint64_t v17 = (char **)a3;
      if (v7 == v8) {
        return;
      }
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v10 = 0;
    unint64_t v17 = (char **)a3;
    if (v5 == v6) {
      goto LABEL_6;
    }
  }
  do
  {
    if (*(_DWORD *)(v5 + 12) != 1) {
      sub_29E380(&v17, (_OWORD *)v5);
    }
    v5 += 32;
  }
  while (v5 != v6);
  unint64_t v10 = *(char **)a3;
  unint64_t v11 = *(char **)(a3 + 8);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v17 = (char **)a3;
  if (v7 != v8)
  {
    do
    {
LABEL_14:
      if (*(_DWORD *)(v7 + 12) == 1) {
        sub_29E380(&v17, (_OWORD *)v7);
      }
      v7 += 32;
    }
    while (v7 != v8);
    if (v11 != v10)
    {
      unint64_t v12 = *(char **)a3;
      unint64_t v13 = *(void *)(a3 + 8);
      uint64_t v14 = v13 - *(void *)a3;
      if (v14 != v11 - v10)
      {
        unint64_t v15 = 126 - 2 * __clz(v14 >> 5);
        if ((char *)v13 == v12) {
          uint64_t v16 = 0;
        }
        else {
          uint64_t v16 = v15;
        }
        sub_29E490((unint64_t)v12, v13, v16, 1);
      }
    }
  }
}

void sub_29A868(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_29A88C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return sub_29A894((uint64_t *)a1, a2, a3, *(_DWORD *)(a1 + 48));
}

uint64_t sub_29A894(uint64_t *a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t v4 = *a1;
  if (*a1 && *((unsigned char *)a1 + 52))
  {
    uint64_t v5 = *(unsigned int **)(v4 + 200);
    uint64_t v6 = *(unsigned int **)(v4 + 208);
    uint64_t v7 = (char *)v6 - (char *)v5;
    if ((char *)v6 - (char *)v5 >= 40)
    {
      uint64_t v8 = (a2 >> 16) & 0xFFFF0000 | (a2 << 32);
      uint64_t v9 = a2 & 0xFF000000000000;
      if (v7 != 40)
      {
        unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v7 >> 3);
        do
        {
          uint64_t v11 = 10 * (v10 >> 2);
          _X17 = &v5[v11];
          __asm { PRFM            #0, [X17] }
          unint64_t v18 = &v5[10 * (v10 >> 1)];
          _X16 = &v18[v11];
          __asm { PRFM            #0, [X16] }
          if ((((unint64_t)*v18 << 32) | ((unint64_t)*((unsigned __int16 *)v18 + 2) << 16) | (*((unsigned char *)v18 + 6) == 0)) >= (v8 | (unint64_t)(v9 == 0))) {
            unint64_t v21 = 0;
          }
          else {
            unint64_t v21 = v10 >> 1;
          }
          v5 += 10 * v21;
          v10 -= v10 >> 1;
        }
        while ((uint64_t)v10 > 1);
      }
      v5 += 10
          * ((((unint64_t)*v5 << 32) | ((unint64_t)*((unsigned __int16 *)v5 + 2) << 16) | (*((unsigned char *)v5 + 6) == 0)) < (v8 | (unint64_t)(v9 == 0)));
    }
    if (v5 != v6)
    {
      while (*v5 == a2
           && *((unsigned __int16 *)v5 + 2) == WORD2(a2)
           && (HIWORD(a2) & 1) != (*((unsigned char *)v5 + 6) == 0))
      {
        if ((v5[4] & (1 << a4)) - 1 <= 0xFFFFFFFD
          && v5[2] == a3
          && *((unsigned __int16 *)v5 + 6) == WORD2(a3)
          && (HIWORD(a3) & 1) != (*((unsigned char *)v5 + 14) == 0))
        {
          unsigned int v22 = *((unsigned __int16 *)v5 + 16);
          if (v22 == 0xFFFF || v22 < *((unsigned __int16 *)a1 + 27)) {
            return 1;
          }
        }
        v5 += 10;
        if (v5 == v6) {
          return 0;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_29AA4C@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)result;
  if (*(void *)result
    && (v8 = *(void *)(v5 + 224), uint64_t v6 = *(void *)(v5 + 232), v7 = (void *)(v5 + 224), v8 != v6)
    && (unint64_t v9 = v6 - v8, _ZF = v6 - v8 == 648, v6 - v8 >= 648))
  {
    int v13 = *(_DWORD *)(result + 48);
    unsigned int v14 = a2[3];
    uint64_t v15 = v8;
    if (!_ZF)
    {
      unint64_t v16 = v9 / 0x288;
      uint64_t v15 = v8;
      do
      {
        uint64_t v17 = 648 * (v16 >> 2);
        _X15 = v15 + v17;
        __asm { PRFM            #0, [X15] }
        uint64_t v23 = v15 + 648 * (v16 >> 1);
        _X14 = v23 + v17;
        __asm { PRFM            #0, [X14] }
        if (*(_DWORD *)(v23 + 428) >= v14) {
          unint64_t v26 = 0;
        }
        else {
          unint64_t v26 = v16 >> 1;
        }
        v15 += 648 * v26;
        v16 -= v16 >> 1;
      }
      while ((uint64_t)v16 > 1);
    }
    BOOL v27 = *(_DWORD *)(v15 + 428) < v14;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    uint64_t v28 = v15 + 648 * v27 - v8;
    if (v28)
    {
      int v29 = 1 << v13;
      uint64_t v30 = (_DWORD *)(v8 + 428);
      uint64_t v31 = 648 * (v28 / 648);
      do
      {
        if ((*(v30 - 1) & v29) - 1 <= 0xFFFFFFFD)
        {
          double result = sub_358690((uint64_t)(v30 - 107), a3);
          if (result)
          {
            double result = sub_34658(v30, a2);
            if (result)
            {
              uint64_t v32 = 0x2C3F35BA781948B1 * ((v8 - *v7) >> 3);
              unint64_t v33 = v7;
              double result = (uint64_t)sub_29AC28((uint64_t)a4, &v33, &v32);
            }
          }
        }
        v30 += 162;
        v8 += 648;
        v31 -= 648;
      }
      while (v31);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  return result;
}

void sub_29AC08(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_29AC28(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v7 = *(void **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if ((unint64_t)v7 < v6)
  {
    uint64_t v8 = *a3;
    *uint64_t v7 = *a2;
    v7[1] = v8;
    unint64_t v9 = v7 + 2;
    goto LABEL_13;
  }
  unint64_t v10 = *(void **)a1;
  uint64_t v11 = ((uint64_t)v7 - *(void *)a1) >> 4;
  unint64_t v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v13 = v6 - (void)v10;
  if (v13 >> 3 > v12) {
    unint64_t v12 = v13 >> 3;
  }
  BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14) {
    unint64_t v15 = v12;
  }
  if (v15 >> 60) {
    sub_188D718();
  }
  uint64_t v16 = 16 * v15;
  uint64_t v17 = (char *)operator new(16 * v15);
  uint64_t v18 = *a3;
  unint64_t v19 = &v17[16 * v11];
  float v20 = &v17[v16];
  *(void *)unint64_t v19 = *a2;
  *((void *)v19 + 1) = v18;
  unint64_t v9 = v19 + 16;
  if (v7 == v10)
  {
    *(void *)a1 = v19;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v20;
    if (!v10) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  do
  {
    unint64_t v21 = v19 - 16;
    *((_OWORD *)v19 - 1) = *((_OWORD *)v7 - 1);
    v7 -= 2;
    v19 -= 16;
  }
  while (v7 != v10);
  *(void *)a1 = v21;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v20;
  if (v10) {
LABEL_12:
  }
    operator delete(v10);
LABEL_13:
  *(void *)(a1 + 8) = v9;
  return v9 - 2;
}

uint64_t sub_29AD50(uint64_t a1, unint64_t a2)
{
  return sub_29AD58((uint64_t *)a1, a2, *(_DWORD *)(a1 + 48));
}

uint64_t sub_29AD58(uint64_t *a1, unint64_t a2, char a3)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *(unsigned int **)(v3 + 248);
    uint64_t v5 = *(unsigned int **)(v3 + 256);
    uint64_t v6 = (char *)v5 - (char *)v4;
    if ((char *)v5 - (char *)v4 >= 12)
    {
      uint64_t v7 = (a2 >> 16) & 0xFFFF0000 | (a2 << 32);
      uint64_t v8 = a2 & 0xFF000000000000;
      if (v6 != 12)
      {
        unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 2);
        do
        {
          uint64_t v10 = 3 * (v9 >> 2);
          _X17 = &v4[v10];
          __asm { PRFM            #0, [X17] }
          uint64_t v17 = &v4[3 * (v9 >> 1)];
          _X16 = &v17[v10];
          __asm { PRFM            #0, [X16] }
          if ((((unint64_t)*v17 << 32) | ((unint64_t)*((unsigned __int16 *)v17 + 2) << 16) | (*((unsigned char *)v17 + 6) == 0)) >= (v7 | (unint64_t)(v8 == 0))) {
            unint64_t v20 = 0;
          }
          else {
            unint64_t v20 = v9 >> 1;
          }
          v4 += 3 * v20;
          v9 -= v9 >> 1;
        }
        while ((uint64_t)v9 > 1);
      }
      v4 += 3
          * ((((unint64_t)*v4 << 32) | ((unint64_t)*((unsigned __int16 *)v4 + 2) << 16) | (*((unsigned char *)v4 + 6) == 0)) < (v7 | (unint64_t)(v8 == 0)));
    }
    if (v4 != v5)
    {
      while (*v4 == a2
           && *((unsigned __int16 *)v4 + 2) == WORD2(a2)
           && (HIWORD(a2) & 1) != (*((unsigned char *)v4 + 6) == 0))
      {
        if ((v4[2] & (1 << a3)) - 1 <= 0xFFFFFFFD) {
          return 1;
        }
        v4 += 3;
        if (v4 == v5) {
          return 0;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_29AEB4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_29AEBC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_29AEC4(_DWORD *a1)
{
  if (!*(void *)a1 || a1[12]) {
    return 0;
  }
  int v2 = a1[9];
  if (v2) {
    return (*(_DWORD *)(*(void *)a1 + 4) >> v2) & 1;
  }
  else {
    return 1;
  }
}

__n128 sub_29AEFC@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  if (!*a1) {
    goto LABEL_14;
  }
  uint64_t v6 = *(long long **)(v4 + 296);
  uint64_t v5 = *(long long **)(v4 + 304);
  if ((char *)v5 - (char *)v6 >= 64)
  {
    if ((char *)v5 - (char *)v6 != 64)
    {
      unint64_t v7 = (unint64_t)((char *)v5 - (char *)v6) >> 6;
      do
      {
        unint64_t v8 = (16 * v7) & 0xFFFFFFFFFFFFFFC0;
        _X13 = (uint64_t)v6 + v8;
        __asm { PRFM            #0, [X13] }
        unint64_t v15 = &v6[4 * (v7 >> 1)];
        _X12 = (uint64_t)v15 + v8;
        __asm { PRFM            #0, [X12] }
        if (*((void *)v15 + 4) >= a2) {
          unint64_t v18 = 0;
        }
        else {
          unint64_t v18 = v7 >> 1;
        }
        v6 += 4 * v18;
        v7 -= v7 >> 1;
      }
      while ((uint64_t)v7 > 1);
    }
    v6 += 4 * (unint64_t)(*((void *)v6 + 4) < a2);
  }
  if (v6 == v5)
  {
LABEL_14:
    result.n128_u64[0] = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 24) = -1;
    *(void *)(a3 + 32) = 0x7FFFFFFFFFFFFFFFLL;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  else
  {
    while (1)
    {
      if (*((void *)v6 + 4) != a2) {
        goto LABEL_14;
      }
      if ((*((_DWORD *)v6 + 6) & (1 << *((_DWORD *)a1 + 12))) - 1 <= 0xFFFFFFFD) {
        break;
      }
      v6 += 4;
      if (v6 == v5) {
        goto LABEL_14;
      }
    }
    unint64_t v20 = (long long *)((char *)v6 + 24);
    if (*((char *)v6 + 23) < 0)
    {
      sub_4200((unsigned char *)a3, *(void **)v6, *((void *)v6 + 1));
      *(_OWORD *)(a3 + 24) = *v20;
      uint64_t v22 = a3 + 40;
      if ((*((char *)v6 + 63) & 0x80000000) == 0) {
        goto LABEL_17;
      }
    }
    else
    {
      long long v21 = *v6;
      *(void *)(a3 + 16) = *((void *)v6 + 2);
      *(_OWORD *)a3 = v21;
      *(_OWORD *)(a3 + 24) = *v20;
      uint64_t v22 = a3 + 40;
      if ((*((char *)v6 + 63) & 0x80000000) == 0)
      {
LABEL_17:
        __n128 result = *(__n128 *)((char *)v6 + 40);
        *(void *)(v22 + 16) = *((void *)v6 + 7);
        *(__n128 *)uint64_t v22 = result;
        return result;
      }
    }
    sub_4200((unsigned char *)v22, *((void **)v6 + 5), *((void *)v6 + 6));
  }
  return result;
}

void sub_29B06C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_29B088(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)a1 && sub_344C4(a2))
  {
    uint64_t v6 = *(void **)a1;
    if (*(void *)(*(void *)a1 + 568) == *(void *)(*(void *)a1 + 576)
      && v6[19] != v6[20]
      && *(unsigned char *)(a1 + 32))
    {
      sub_29B318((void *)a1);
      uint64_t v6 = *(void **)a1;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v7 = v6[71];
    uint64_t v8 = v6[72];
    if (v7 == v8)
    {
      unint64_t v9 = 0;
      uint64_t v10 = 0;
    }
    else
    {
      do
      {
        int v12 = *(_DWORD *)(v7 + 104);
        if (v12 == *(_DWORD *)(a1 + 36) && (*(unsigned char *)(v7 + 140) & 7) != 0
          || v12 == *(_DWORD *)(a1 + 40) && (*(unsigned char *)(v7 + 140) & 0x20) != 0
          || v12 == *(_DWORD *)(a1 + 44) && (*(unsigned char *)(v7 + 140) & 0x10) != 0
          || v12 == *(_DWORD *)(a1 + 48) && (*(unsigned char *)(v7 + 140) & 8) != 0
          || (uint64_t v13 = *(_DWORD **)(v7 + 112), *(void *)(v7 + 120) - (void)v13 == 24)
          && (sub_33E90((uint64_t)v21), *v13 == v21[0])
          && v13[1] == v21[1]
          && v13[3] == v21[3]
          && v13[4] == v21[4])
        {
          BOOL v14 = *(_DWORD **)(v7 + 112);
          unint64_t v15 = *(_DWORD **)(v7 + 120);
          if (v14 != v15)
          {
            while (!sub_34658(v14, a2))
            {
              v14 += 6;
              if (v14 == v15) {
                goto LABEL_8;
              }
            }
            uint64_t v16 = (long long *)(v7 + 56);
            unint64_t v17 = *(void *)(a3 + 8);
            if (v17 >= *(void *)(a3 + 16))
            {
              uint64_t v11 = sub_6E6EC((char **)a3, (uint64_t)v16);
            }
            else
            {
              if (*(char *)(v7 + 79) < 0)
              {
                sub_4200(*(unsigned char **)(a3 + 8), *(void **)(v7 + 56), *(void *)(v7 + 64));
              }
              else
              {
                long long v18 = *v16;
                *(void *)(v17 + 16) = *(void *)(v7 + 72);
                *(_OWORD *)unint64_t v17 = v18;
              }
              uint64_t v11 = (char *)(v17 + 24);
              *(void *)(a3 + 8) = v17 + 24;
            }
            *(void *)(a3 + 8) = v11;
          }
        }
LABEL_8:
        v7 += 144;
      }
      while (v7 != v8);
      uint64_t v10 = *(char **)a3;
      unint64_t v9 = *(const void ***)(a3 + 8);
    }
    unint64_t v19 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v9 - v10) >> 3));
    if (v9 == (const void **)v10) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = v19;
    }
    sub_6EA30((uint64_t)v10, v9, (uint64_t)v21, v20, 1);
    sub_86E88((const void ***)a3);
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
}

void sub_29B2C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  sub_1A668((void **)v1);
  _Unwind_Resume(a1);
}

void sub_29B2DC(_Unwind_Exception *a1)
{
  sub_1A668(v1);
  _Unwind_Resume(a1);
}

void sub_29B2F0(_Unwind_Exception *a1)
{
  sub_1A668(v1);
  _Unwind_Resume(a1);
}

void sub_29B304(_Unwind_Exception *a1)
{
  sub_1A668(v1);
  _Unwind_Resume(a1);
}

void sub_29B318(void *a1)
{
  uint64_t v2 = (unsigned int *)sub_2AB884(a1[2], 11, 1u, 1);
  if (v3)
  {
    uint64_t v4 = (int *)((char *)v2 + *v2);
    uint64_t v5 = (unsigned __int16 *)((char *)v4 - *v4);
    if (*v5 >= 5u)
    {
      uint64_t v6 = v5[2];
      if (v6)
      {
        uint64_t v7 = (int *)((char *)v4 + v6 + *(unsigned int *)((char *)v4 + v6));
        uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
        if (*v8 >= 5u)
        {
          uint64_t v9 = v8[2];
          if (v9)
          {
            uint64_t v10 = (unsigned int *)((char *)v7 + v9);
            uint64_t v11 = *v10;
            uint64_t v13 = (unsigned int *)((char *)v10 + v11 + 4);
            uint64_t v12 = *(unsigned int *)((char *)v10 + v11);
            if (v12)
            {
              uint64_t v53 = *a1;
              BOOL v14 = &v13[v12];
              uint64_t v51 = (int64x2_t *)(*a1 + 568);
              unint64_t v52 = v14;
              while (1)
              {
                unint64_t v15 = (int *)((char *)v13 + *v13);
                uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
                unsigned int v17 = *v16;
                if (v17 < 5) {
                  goto LABEL_8;
                }
                uint64_t v18 = v16[2];
                BOOL v19 = v17 < 7 || v18 == 0;
                if (v19 || !v16[3]) {
                  goto LABEL_8;
                }
                memset(v55, 0, sizeof(v55));
                *(_OWORD *)unsigned int v54 = 0u;
                unint64_t v56 = 0x8000000080000000;
                long long v57 = 0u;
                memset(v58, 0, sizeof(v58));
                int v59 = -1;
                *(_OWORD *)std::string __p = 0u;
                long long v61 = 0u;
                uint64_t v20 = (unsigned int *)((char *)v15 + v18);
                uint64_t v21 = *v20;
                uint64_t v23 = (char *)v20 + v21 + 4;
                size_t v22 = *(unsigned int *)((char *)v20 + v21);
                if (v22 >= 0x17) {
                  break;
                }
                HIBYTE(v63) = *(unsigned int *)((char *)v20 + v21);
                p_dst = &__dst;
                if (v22) {
                  goto LABEL_21;
                }
LABEL_22:
                *((unsigned char *)p_dst + v22) = 0;
                long long v57 = __dst;
                v58[0] = v63;
                int v59 = 0;
                *((void *)&v61 + 1) = 0x800000008;
                BOOL v27 = (unsigned int *)((char *)v15 + *(unsigned __int16 *)((char *)v15 - *v15 + 6));
                uint64_t v28 = *v27;
                uint64_t v30 = (unsigned int *)((char *)v27 + v28 + 4);
                uint64_t v29 = *(unsigned int *)((char *)v27 + v28);
                if (v29)
                {
                  uint64_t v31 = &v30[4 * v29];
                  do
                  {
                    LODWORD(v34) = v30[1];
                    if (v34 >= 0xFFFFFFFE) {
                      uint64_t v34 = 4294967294;
                    }
                    else {
                      uint64_t v34 = v34;
                    }
                    unint64_t v66 = *v30 | (unint64_t)(v34 << 32);
                    int v67 = 0x7FFFFFFF;
                    LODWORD(v34) = v30[3];
                    if (v34 >= 0xFFFFFFFE) {
                      uint64_t v34 = 4294967294;
                    }
                    else {
                      uint64_t v34 = v34;
                    }
                    unint64_t v64 = v30[2] | (unint64_t)(v34 << 32);
                    int v65 = 0x7FFFFFFF;
                    sub_3392C((uint64_t)&__dst, (unsigned int *)&v66, (unsigned int *)&v64);
                    unsigned int v35 = __p[1];
                    if (__p[1] < (void *)v61)
                    {
                      long long v32 = __dst;
                      *((void *)__p[1] + 2) = v63;
                      *unsigned int v35 = v32;
                      unint64_t v33 = (char *)v35 + 24;
                    }
                    else
                    {
                      int v36 = __p[0];
                      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
                      unint64_t v38 = v37 + 1;
                      if (v37 + 1 > 0xAAAAAAAAAAAAAAALL) {
                        sub_2E00();
                      }
                      if (0x5555555555555556 * ((uint64_t)(v61 - (unint64_t)__p[0]) >> 3) > v38) {
                        unint64_t v38 = 0x5555555555555556 * ((uint64_t)(v61 - (unint64_t)__p[0]) >> 3);
                      }
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - (unint64_t)__p[0]) >> 3) >= 0x555555555555555) {
                        unint64_t v39 = 0xAAAAAAAAAAAAAAALL;
                      }
                      else {
                        unint64_t v39 = v38;
                      }
                      if (v39)
                      {
                        if (v39 > 0xAAAAAAAAAAAAAAALL) {
                          sub_188D718();
                        }
                        unint64_t v40 = (char *)operator new(24 * v39);
                      }
                      else
                      {
                        unint64_t v40 = 0;
                      }
                      uint64_t v41 = &v40[24 * v37];
                      *(_OWORD *)uint64_t v41 = __dst;
                      *((void *)v41 + 2) = v63;
                      unint64_t v42 = v41;
                      if (v35 != v36)
                      {
                        do
                        {
                          long long v43 = *(_OWORD *)((char *)v35 - 24);
                          *((void *)v42 - 1) = *((void *)v35 - 1);
                          *(_OWORD *)(v42 - 24) = v43;
                          v42 -= 24;
                          unsigned int v35 = (_OWORD *)((char *)v35 - 24);
                        }
                        while (v35 != v36);
                        unsigned int v35 = __p[0];
                      }
                      unint64_t v33 = v41 + 24;
                      __p[0] = v42;
                      __p[1] = v41 + 24;
                      *(void *)&long long v61 = &v40[24 * v39];
                      if (v35) {
                        operator delete(v35);
                      }
                    }
                    __p[1] = v33;
                    v30 += 4;
                  }
                  while (v30 != v31);
                }
                unint64_t v44 = *(void *)(v53 + 576);
                if (v44 >= *(void *)(v53 + 584))
                {
                  long long v49 = sub_2A204C(v51, (uint64_t)v54);
                  int v50 = __p[0];
                  *(void *)(v53 + 576) = v49;
                  if (v50)
                  {
                    __p[1] = v50;
                    operator delete(v50);
                  }
                }
                else
                {
                  long long v45 = *(_OWORD *)v54;
                  *(void **)(v44 + 16) = v55[0];
                  *(_OWORD *)unint64_t v44 = v45;
                  v54[1] = 0;
                  v55[0] = 0;
                  v54[0] = 0;
                  unint64_t v46 = v55[3];
                  *(_OWORD *)(v44 + 24) = *(_OWORD *)&v55[1];
                  *(void *)(v44 + 40) = v46;
                  memset(&v55[1], 0, 24);
                  *(void *)(v44 + 48) = v56;
                  long long v47 = v57;
                  *(void *)(v44 + 72) = v58[0];
                  *(_OWORD *)(v44 + 56) = v47;
                  v58[0] = 0;
                  long long v57 = 0uLL;
                  long long v48 = *(_OWORD *)&v58[1];
                  *(void *)(v44 + 96) = v58[3];
                  *(_OWORD *)(v44 + 80) = v48;
                  memset(&v58[1], 0, 24);
                  *(_DWORD *)(v44 + 104) = v59;
                  *(void *)(v44 + 112) = 0;
                  *(void *)(v44 + 120) = 0;
                  *(void *)(v44 + 128) = 0;
                  *(_OWORD *)(v44 + 112) = *(_OWORD *)__p;
                  *(void *)(v44 + 128) = v61;
                  __p[0] = 0;
                  __p[1] = 0;
                  *(void *)&long long v61 = 0;
                  *(void *)(v44 + 136) = *((void *)&v61 + 1);
                  *(void *)(v53 + 576) = v44 + 144;
                }
                BOOL v14 = v52;
                if (SHIBYTE(v58[3]) < 0)
                {
                  operator delete((void *)v58[1]);
                  if ((SHIBYTE(v58[0]) & 0x80000000) == 0)
                  {
LABEL_54:
                    if ((SHIBYTE(v55[3]) & 0x80000000) == 0) {
                      goto LABEL_55;
                    }
                    goto LABEL_59;
                  }
                }
                else if ((SHIBYTE(v58[0]) & 0x80000000) == 0)
                {
                  goto LABEL_54;
                }
                operator delete((void *)v57);
                if ((SHIBYTE(v55[3]) & 0x80000000) == 0)
                {
LABEL_55:
                  if (SHIBYTE(v55[0]) < 0) {
                    goto LABEL_60;
                  }
                  goto LABEL_8;
                }
LABEL_59:
                operator delete(v55[1]);
                if (SHIBYTE(v55[0]) < 0) {
LABEL_60:
                }
                  operator delete(v54[0]);
LABEL_8:
                if (++v13 == v14) {
                  return;
                }
              }
              uint64_t v25 = (v22 & 0xFFFFFFF8) + 8;
              if ((v22 | 7) != 0x17) {
                uint64_t v25 = v22 | 7;
              }
              uint64_t v26 = v25 + 1;
              p_dst = (long long *)operator new(v25 + 1);
              *((void *)&__dst + 1) = v22;
              unint64_t v63 = v26 | 0x8000000000000000;
              *(void *)&long long __dst = p_dst;
LABEL_21:
              memcpy(p_dst, v23, v22);
              goto LABEL_22;
            }
          }
        }
      }
    }
  }
}

void sub_29B808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44)
{
  if (__p)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if ((a35 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a30);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a23);
  if ((a22 & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(a17);
  _Unwind_Resume(exception_object);
}

void *sub_29B898@<X0>(void *result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v4 = *result;
  if (*result)
  {
    uint64_t v8 = *(void *)(v4 + 480);
    uint64_t v7 = *(void *)(v4 + 488);
    if (v7 - v8 >= 32)
    {
      if (v7 - v8 != 32)
      {
        unint64_t v9 = (unint64_t)(v7 - v8) >> 5;
        do
        {
          unint64_t v10 = (8 * v9) & 0xFFFFFFFFFFFFFFE0;
          _X13 = v8 + v10;
          __asm { PRFM            #0, [X13] }
          unsigned int v17 = (void *)(v8 + 32 * (v9 >> 1));
          _X12 = (char *)v17 + v10;
          __asm { PRFM            #0, [X12] }
          if (*v17 >= a2) {
            unint64_t v20 = 0;
          }
          else {
            unint64_t v20 = v9 >> 1;
          }
          v8 += 32 * v20;
          v9 -= v9 >> 1;
        }
        while ((uint64_t)v9 > 1);
      }
      v8 += 32 * (*(void *)v8 < a2);
    }
    if (v7 != v8 && *(void *)v8 == a2)
    {
      int v21 = 1 << *((_DWORD *)result + 12);
      if (a3)
      {
        do
        {
          if (*(void *)v8 != a2) {
            break;
          }
          if ((*(_DWORD *)(v8 + 8) & v21) - 1 <= 0xFFFFFFFD && *(_DWORD *)(v8 + 28) != -1)
          {
            uint64_t v22 = v8;
            __n128 result = sub_29603C((void **)a4, &v22);
            uint64_t v7 = *(void *)(v4 + 488);
          }
          v8 += 32;
        }
        while (v8 != v7);
      }
      else
      {
        do
        {
          if (*(void *)v8 != a2) {
            break;
          }
          if ((*(_DWORD *)(v8 + 8) & v21) - 1 <= 0xFFFFFFFD && *(_DWORD *)(v8 + 24) != -1)
          {
            uint64_t v22 = v8;
            __n128 result = sub_29603C((void **)a4, &v22);
            uint64_t v7 = *(void *)(v4 + 488);
          }
          v8 += 32;
        }
        while (v8 != v7);
      }
    }
  }
  return result;
}

void sub_29BA10(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_29BA30(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v4 = v2 + 456;
    uint64_t v3 = *(void *)(v2 + 456);
    if (0x6F96F96F96F96F97 * ((*(void *)(v4 + 8) - v3) >> 3) > a2) {
      return (void *)(v3 + 312 * a2);
    }
  }
  __n128 result = &unk_2556E90;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2556E28, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2556E28))
    {
      sub_29D824((uint64_t)&unk_2556E90);
      __cxa_guard_release(&qword_2556E28);
    }
    return &unk_2556E90;
  }
  return result;
}

void sub_29BAE4(_Unwind_Exception *a1)
{
}

unsigned int *sub_29BAFC(uint64_t a1, unint64_t a2, int a3, unsigned int **a4, uint64_t a5)
{
  uint64_t v6 = *a4;
  __n128 result = a4[1];
  uint64_t v7 = (char *)result - (char *)*a4;
  if (v7 >= 72)
  {
    unint64_t v8 = (a2 >> 30) & 0xFFFFFFFC | (a2 << 32) | (a2 >> 63) | (a2 >> 61) & 2;
    if (v7 != 72)
    {
      unint64_t v9 = v7 / 0x48uLL;
      do
      {
        uint64_t v10 = 18 * (v9 >> 2);
        _X16 = &v6[v10];
        __asm { PRFM            #0, [X16] }
        unsigned int v17 = &v6[18 * (v9 >> 1)];
        _X15 = &v17[v10];
        __asm { PRFM            #0, [X15] }
        if (((4 * v17[1]) | ((unint64_t)*v17 << 32) | ((unint64_t)v17[1] >> 31) | ((unint64_t)v17[1] >> 29) & 2) >= v8) {
          unint64_t v20 = 0;
        }
        else {
          unint64_t v20 = v9 >> 1;
        }
        v6 += 18 * v20;
        v9 -= v9 >> 1;
      }
      while ((uint64_t)v9 > 1);
    }
    v6 += 18
        * (((4 * v6[1]) | ((unint64_t)*v6 << 32) | ((unint64_t)v6[1] >> 31) | ((unint64_t)v6[1] >> 29) & 2) < v8);
  }
  if (v6 != result)
  {
    uint64_t v21 = (a2 >> 30) & 0xFFFFFFFC | (a2 << 32) | (a2 >> 63) | (a2 >> 61) & 2;
    while (((4 * v6[1]) | ((unint64_t)*v6 << 32) | ((unint64_t)v6[1] >> 31) | ((unint64_t)v6[1] >> 29) & 2) == v21
         && (v6[4] & a3) - 1 >= 0xFFFFFFFE)
    {
      v6 += 18;
      if (v6 == result) {
        return result;
      }
    }
    if (v6 != result
      && ((4 * v6[1]) | ((unint64_t)*v6 << 32) | ((unint64_t)v6[1] >> 31) | ((unint64_t)v6[1] >> 29) & 2) == v21)
    {
      uint64_t v22 = *(void **)a5;
      uint64_t v23 = *(void **)(a5 + 8);
      if (v6[2])
      {
        uint64_t v24 = a4[1];
        uint64_t v25 = v6;
        if (v22 != v23)
        {
LABEL_22:
          while (((4 * v6[1]) | ((unint64_t)*v6 << 32) | ((unint64_t)v6[1] >> 31) | ((unint64_t)v6[1] >> 29) & 2) == v21
               && (v6[4] & a3) + 1 >= 2)
          {
            v6 += 18;
            if (v6 == result)
            {
              uint64_t v6 = a4[1];
              break;
            }
          }
          if (v25 != v6)
          {
            while (v22 != v23)
            {
              __n128 result = v25;
              while (((4 * result[3]) | ((unint64_t)result[2] << 32) | ((unint64_t)result[3] >> 31) | ((unint64_t)result[3] >> 29) & 2) != ((*v22 >> 30) & 0xFFFFFFFCLL | (*v22 << 32) | (*v22 >> 63) | (*v22 >> 61) & 2))
              {
                result += 18;
                if (result == v6) {
                  goto LABEL_29;
                }
              }
              if (result != v6) {
                return result;
              }
LABEL_29:
              ++v22;
            }
          }
          return v24;
        }
      }
      else
      {
        if (v22 != v23)
        {
          uint64_t v25 = v6 + 18;
          uint64_t v24 = v6;
          goto LABEL_22;
        }
        return v6;
      }
    }
  }
  return result;
}

char *sub_29BD5C(char **a1, _OWORD *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = *a1;
    uint64_t v9 = (v5 - *a1) >> 5;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59) {
      sub_2E00();
    }
    uint64_t v11 = v4 - (void)v8;
    if (v11 >> 4 > v10) {
      unint64_t v10 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 59) {
        sub_188D718();
      }
      uint64_t v13 = (char *)operator new(32 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    BOOL v14 = &v13[32 * v9];
    long long v15 = a2[1];
    *(_OWORD *)BOOL v14 = *a2;
    *((_OWORD *)v14 + 1) = v15;
    uint64_t v7 = v14 + 32;
    if (v5 != v8)
    {
      do
      {
        long long v16 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v14 - 1) = v16;
        v14 -= 32;
        v5 -= 32;
      }
      while (v5 != v8);
      uint64_t v5 = *a1;
    }
    *a1 = v14;
    a1[1] = v7;
    a1[2] = &v13[32 * v12];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = a2[1];
    *(_OWORD *)uint64_t v5 = *a2;
    *((_OWORD *)v5 + 1) = v6;
    uint64_t v7 = v5 + 32;
  }
  a1[1] = v7;
  return v7 - 32;
}

void sub_29BE60(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6 = a2;
  unint64_t v8 = (unsigned int *)sub_2AB884(a1[2], 11, a2, 1);
  if (!v9) {
    return;
  }
  unint64_t v10 = (int *)((char *)v8 + *v8);
  uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 < 7u) {
    return;
  }
  uint64_t v12 = v11[3];
  if (!v12) {
    return;
  }
  uint64_t v13 = (unsigned int *)((char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12));
  LODWORD(__key) = WORD2(v6);
  BOOL v14 = (unsigned int *)bsearch(&__key, v13 + 1, *v13, 4uLL, (int (__cdecl *)(const void *, const void *))sub_29F7C8);
  if (!v14) {
    return;
  }
  long long v15 = (int *)((char *)v14 + *v14);
  long long v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 7u) {
    return;
  }
  uint64_t v17 = v16[3];
  if (!v17) {
    return;
  }
  uint64_t v18 = (unsigned int *)((char *)v15 + v17);
  uint64_t v19 = *v18;
  uint64_t v21 = (unsigned int *)((char *)v18 + v19 + 4);
  uint64_t v20 = *(unsigned int *)((char *)v18 + v19);
  if (!v20) {
    return;
  }
  char v84 = 0;
  unsigned int v92 = &v21[2 * v20];
  int v93 = 1 << ((v6 & 0xFF000000000000) != 0);
  uint64_t v83 = a4;
  uint64_t v85 = v6;
  v86 = a3;
  while (2)
  {
    unint64_t v22 = v21[1];
    if ((v93 & v22) == 0) {
      goto LABEL_10;
    }
    uint64_t v23 = (unsigned int *)sub_2AB884(a1[2], 11, *v21, 1);
    if (!v24
      || (uint64_t v25 = (int *)((char *)v23 + *v23), v26 = (unsigned __int16 *)((char *)v25 - *v25), *v26 < 9u)
      || !v26[4]
      || (BOOL v27 = (int *)((char *)v25 + v26[4] + *(unsigned int *)((char *)v25 + v26[4])), *v27 <= (v22 >> 4)))
    {
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)&__key);
        sub_188FC78(&__key, (uint64_t)"Encountered invalid incident reference (", 40);
        unint64_t v52 = (void *)std::ostream::operator<<();
        sub_188FC78(v52, (uint64_t)", ", 2);
        uint64_t v53 = (void *)std::ostream::operator<<();
        unsigned int v54 = sub_188FC78(v53, (uint64_t)") for road segment ", 20);
        sub_2DD928(v54, v6);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v100, 3u);
        if (v101 < 0) {
          operator delete(v100[0]);
        }
        int __key = v89;
        *(void ***)((char *)&__key + (void)*(v89 - 3)) = v88;
        if (v99 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      goto LABEL_10;
    }
    long long v87 = v21;
    uint64_t v28 = (_DWORD *)((char *)&v27[(v22 >> 4) + 1] + v27[(v22 >> 4) + 1]);
    uint64_t v29 = (uint64_t **)*a3;
    float v90 = (uint64_t **)a3[1];
    if ((uint64_t **)*a3 != v90)
    {
      while (1)
      {
        uint64_t v30 = v29[1];
        uint64_t v31 = **v29;
        long long v32 = (unsigned int *)((char *)v28 + *(unsigned __int16 *)((char *)v28 - *v28 + 4));
        uint64_t v33 = *v32;
        uint64_t v34 = (char *)v32 + v33 + 4;
        size_t v35 = *(unsigned int *)((char *)v32 + v33);
        if (v35 >= 0x17) {
          break;
        }
        HIBYTE(v97) = *(unsigned int *)((char *)v32 + v33);
        p_key = (void **)&__key;
        if (v35) {
          goto LABEL_24;
        }
LABEL_25:
        BOOL v38 = 0;
        *((unsigned char *)p_key + v35) = 0;
        unint64_t v39 = (const void **)(v31 + 424 * (void)v30 + 40);
        uint64_t v40 = *(unsigned __int8 *)(v31 + 424 * (void)v30 + 63);
        if ((v40 & 0x80u) == 0) {
          uint64_t v41 = (void (__cdecl **)(std::stringbuf *__hidden))*(unsigned __int8 *)(v31 + 424 * (void)v30 + 63);
        }
        else {
          uint64_t v41 = *(void (__cdecl ***)(std::stringbuf *__hidden))(v31 + 424 * (void)v30 + 48);
        }
        unint64_t v42 = (void (__cdecl **)(std::stringbuf *__hidden))HIBYTE(v97);
        int v43 = SHIBYTE(v97);
        if (v97 < 0) {
          unint64_t v42 = v96;
        }
        if (v41 == v42)
        {
          if (v97 >= 0) {
            unint64_t v44 = (void **)&__key;
          }
          else {
            unint64_t v44 = __key;
          }
          if ((v40 & 0x80) != 0)
          {
            BOOL v38 = memcmp(*v39, v44, *(void *)(v31 + 424 * (void)v30 + 48)) == 0;
          }
          else
          {
            if (!*(unsigned char *)(v31 + 424 * (void)v30 + 63))
            {
              BOOL v38 = 1;
              if ((SHIBYTE(v97) & 0x80000000) == 0) {
                goto LABEL_46;
              }
LABEL_45:
              operator delete(__key);
              goto LABEL_46;
            }
            uint64_t v45 = v40 - 1;
            do
            {
              int v47 = *(unsigned __int8 *)v39;
              unint64_t v39 = (const void **)((char *)v39 + 1);
              int v46 = v47;
              int v49 = *(unsigned __int8 *)v44;
              unint64_t v44 = (void **)((char *)v44 + 1);
              int v48 = v49;
              BOOL v51 = v45-- != 0;
              BOOL v38 = v46 == v48;
            }
            while (v46 == v48 && v51);
          }
        }
        if (v43 < 0) {
          goto LABEL_45;
        }
LABEL_46:
        if (v38)
        {
          uint64_t v6 = v85;
          a3 = v86;
          uint64_t v21 = v87;
          goto LABEL_10;
        }
        v29 += 2;
        if (v29 == v90) {
          goto LABEL_56;
        }
      }
      if ((v35 | 7) == 0x17) {
        uint64_t v37 = (v35 & 0xFFFFFFF8) + 8;
      }
      else {
        uint64_t v37 = v35 | 7;
      }
      p_key = (void **)operator new(v37 + 1);
      unsigned int v96 = (void (__cdecl **)(std::stringbuf *__hidden))v35;
      uint64_t v97 = v37 - 0x7FFFFFFFFFFFFFFFLL;
      int __key = p_key;
LABEL_24:
      memcpy(p_key, v34, v35);
      goto LABEL_25;
    }
LABEL_56:
    double v55 = sub_2FF7D8(v28, (uint64_t)&__key);
    uint64_t v56 = *(void *)(v83 + 24);
    if (!v56) {
      sub_29F82C();
    }
    uint64_t v6 = v85;
    a3 = v86;
    uint64_t v21 = v87;
    if (((*(uint64_t (**)(uint64_t, void ***, double))(*(void *)v56 + 48))(v56, &__key, v55) & 1) == 0) {
      goto LABEL_84;
    }
    uint64_t v57 = *a1;
    v100[0] = (void *)(0x21CFB2B78C13521DLL * ((uint64_t)(*(void *)(*a1 + 160) - *(void *)(*a1 + 152)) >> 3));
    int v58 = __key;
    uint64_t v91 = v96;
    if (__key == (void **)v96) {
      goto LABEL_83;
    }
    while (2)
    {
      int v59 = (uint64_t *)*v58;
      unsigned int v60 = (uint64_t *)v58[1];
      while (v59 != v60)
      {
        uint64_t v63 = *v59;
        unint64_t v64 = (void *)*a1;
        unint64_t v66 = *(char **)(*a1 + 184);
        unint64_t v65 = *(void *)(*a1 + 192);
        if ((unint64_t)v66 < v65)
        {
          long long v61 = v100[0];
          *(void *)unint64_t v66 = v63;
          *((_DWORD *)v66 + 2) = 1;
          *((void *)v66 + 2) = v61;
          int v62 = v66 + 24;
          goto LABEL_63;
        }
        int v67 = (unsigned char *)v64[22];
        unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * ((v66 - v67) >> 3) + 1;
        if (v68 > 0xAAAAAAAAAAAAAAALL) {
          sub_2E00();
        }
        unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - (void)v67) >> 3);
        if (2 * v69 > v68) {
          unint64_t v68 = 2 * v69;
        }
        if (v69 >= 0x555555555555555) {
          unint64_t v70 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v70 = v68;
        }
        if (v70 > 0xAAAAAAAAAAAAAAALL) {
          sub_188D718();
        }
        uint64_t v71 = (char *)operator new(24 * v70);
        long long v72 = v100[0];
        uint64_t v73 = &v71[8 * ((v66 - v67) >> 3)];
        *(void *)uint64_t v73 = v63;
        *((_DWORD *)v73 + 2) = 1;
        *((void *)v73 + 2) = v72;
        if (v66 == v67)
        {
          uint64_t v78 = &v71[24 * v70];
          int v62 = v73 + 24;
          v64[22] = v73;
          v64[23] = v73 + 24;
          v64[24] = v78;
          if (v67) {
            goto LABEL_77;
          }
        }
        else
        {
          uint64_t v74 = &v71[8 * ((v66 - v67) >> 3)];
          do
          {
            long long v75 = *(_OWORD *)(v66 - 24);
            uint64_t v76 = v74 - 24;
            *((void *)v74 - 1) = *((void *)v66 - 1);
            *(_OWORD *)(v74 - 24) = v75;
            v66 -= 24;
            v74 -= 24;
          }
          while (v66 != v67);
          uint64_t v77 = &v71[24 * v70];
          int v62 = v73 + 24;
          v64[22] = v76;
          v64[23] = v73 + 24;
          v64[24] = v77;
          if (v67) {
LABEL_77:
          }
            operator delete(v67);
        }
LABEL_63:
        v64[23] = v62;
        ++v59;
      }
      v58 += 3;
      if (v58 != (void **)v91) {
        continue;
      }
      break;
    }
    uint64_t v57 = *a1;
    uint64_t v6 = v85;
    a3 = v86;
LABEL_83:
    sub_29C654((uint64_t *)(v57 + 152), (uint64_t)&__key);
    uint64_t v21 = v87;
    uint64_t v94 = *a1 + 152;
    sub_29AC28((uint64_t)a3, &v94, (uint64_t *)v100);
    char v84 = 1;
LABEL_84:
    sub_29D95C((uint64_t)&__key);
LABEL_10:
    v21 += 2;
    if (v21 != v92) {
      continue;
    }
    break;
  }
  if (v84)
  {
    uint64_t v79 = *(void *)(*a1 + 176);
    uint64_t v80 = *(__n128 **)(*a1 + 184);
    unint64_t v81 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v80 - v79) >> 3));
    if (v80 == (__n128 *)v79) {
      uint64_t v82 = 0;
    }
    else {
      uint64_t v82 = v81;
    }
    sub_29FDD0(v79, v80, (uint64_t)&__key, v82, 1);
  }
}

void sub_29C590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_29D95C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_29C5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_29D95C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_29C5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_29D95C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_29C5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_29D95C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_29C5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  if (*(char *)(v16 - 89) < 0)
  {
    operator delete(*(void **)(v16 - 112));
    sub_111ECAC((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_29C62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_29D95C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_29C640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_29D95C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_29C654(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t v16 = sub_29F8B4(a1, a2);
    a1[1] = v16;
    return v16 - 424;
  }
  else
  {
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    *(void *)(v3 + 16) = 0;
    *(_OWORD *)unint64_t v3 = *(_OWORD *)a2;
    *(void *)(v3 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)(a2 + 24);
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(v3 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(v3 + 40) = v4;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(v3 + 64) = 0;
    *(void *)(v3 + 72) = 0;
    *(void *)(v3 + 80) = 0;
    *(_OWORD *)(v3 + 64) = *(_OWORD *)(a2 + 64);
    *(void *)(v3 + 80) = *(void *)(a2 + 80);
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(_DWORD *)(v3 + 88) = *(_DWORD *)(a2 + 88);
    long long v5 = *(_OWORD *)(a2 + 96);
    *(void *)(v3 + 112) = *(void *)(a2 + 112);
    *(_OWORD *)(v3 + 96) = v5;
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 96) = 0;
    long long v6 = *(_OWORD *)(a2 + 120);
    *(void *)(v3 + 136) = *(void *)(a2 + 136);
    *(_OWORD *)(v3 + 120) = v6;
    *(void *)(a2 + 128) = 0;
    *(void *)(a2 + 136) = 0;
    *(void *)(a2 + 120) = 0;
    long long v7 = *(_OWORD *)(a2 + 144);
    *(_DWORD *)(v3 + 160) = *(_DWORD *)(a2 + 160);
    *(_OWORD *)(v3 + 144) = v7;
    long long v8 = *(_OWORD *)(a2 + 168);
    *(void *)(v3 + 184) = *(void *)(a2 + 184);
    *(_OWORD *)(v3 + 168) = v8;
    *(void *)(a2 + 168) = 0;
    *(void *)(a2 + 176) = 0;
    *(void *)(a2 + 184) = 0;
    *(void *)(v3 + 192) = 0;
    *(void *)(v3 + 200) = 0;
    *(void *)(v3 + 208) = 0;
    *(_OWORD *)(v3 + 192) = *(_OWORD *)(a2 + 192);
    *(void *)(v3 + 208) = *(void *)(a2 + 208);
    *(void *)(a2 + 200) = 0;
    *(void *)(a2 + 208) = 0;
    *(void *)(a2 + 192) = 0;
    uint64_t v9 = *(void *)(a2 + 216);
    *(void *)(v3 + 232) = 0;
    *(void *)(v3 + 240) = 0;
    *(void *)(v3 + 216) = v9;
    *(void *)(v3 + 224) = 0;
    *(_OWORD *)(v3 + 224) = *(_OWORD *)(a2 + 224);
    *(void *)(v3 + 240) = *(void *)(a2 + 240);
    *(void *)(a2 + 224) = 0;
    *(void *)(a2 + 232) = 0;
    *(void *)(a2 + 240) = 0;
    *(void *)(v3 + 248) = 0;
    *(void *)(v3 + 256) = 0;
    *(void *)(v3 + 264) = 0;
    *(_OWORD *)(v3 + 248) = *(_OWORD *)(a2 + 248);
    *(void *)(v3 + 264) = *(void *)(a2 + 264);
    *(void *)(a2 + 248) = 0;
    *(void *)(a2 + 256) = 0;
    *(void *)(a2 + 264) = 0;
    *(unsigned char *)(v3 + 272) = *(unsigned char *)(a2 + 272);
    long long v10 = *(_OWORD *)(a2 + 296);
    uint64_t v11 = *(void *)(a2 + 312);
    *(_OWORD *)(v3 + 280) = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(v3 + 296) = v10;
    *(void *)(v3 + 312) = v11;
    *(void *)(v3 + 320) = 0;
    *(void *)(v3 + 328) = 0;
    *(void *)(v3 + 336) = 0;
    *(_OWORD *)(v3 + 320) = *(_OWORD *)(a2 + 320);
    *(void *)(v3 + 336) = *(void *)(a2 + 336);
    *(void *)(a2 + 328) = 0;
    *(void *)(a2 + 336) = 0;
    *(void *)(a2 + 320) = 0;
    long long v13 = *(_OWORD *)(a2 + 376);
    long long v12 = *(_OWORD *)(a2 + 392);
    long long v14 = *(_OWORD *)(a2 + 360);
    *(void *)(v3 + 408) = *(void *)(a2 + 408);
    *(_OWORD *)(v3 + 376) = v13;
    *(_OWORD *)(v3 + 392) = v12;
    *(_OWORD *)(v3 + 360) = v14;
    *(_OWORD *)(v3 + 344) = *(_OWORD *)(a2 + 344);
    *(unsigned char *)(v3 + 416) = *(unsigned char *)(a2 + 416);
    a1[1] = v3 + 424;
    return v3;
  }
}

void *sub_29C830(uint64_t a1, unsigned int a2, unsigned __int16 a3)
{
  if (!*(void *)a1) {
    return &unk_24F6828;
  }
  if (sub_511FC(a2) < 0x14) {
    return &unk_24F6828;
  }
  unsigned int v7 = a2 >> ((sub_511FC(a2) & 0xFE) - 20);
  uint64_t v8 = *(void *)(*(void *)a1 + 128);
  uint64_t v9 = *(void *)(*(void *)a1 + 136);
  if (v9 - v8 >= 8)
  {
    if (v9 - v8 != 8)
    {
      uint64_t v10 = (unint64_t)(v9 - v8) >> 3;
      do
      {
        while (1)
        {
          unint64_t v11 = (unint64_t)v10 >> 1;
          unint64_t v12 = (2 * v10) & 0xFFFFFFFFFFFFFFF8;
          _X13 = v8 + v12;
          __asm { PRFM            #0, [X13] }
          uint64_t v19 = (_DWORD *)(v8 + 8 * ((unint64_t)v10 >> 1));
          _X14 = (char *)v19 + v12;
          __asm { PRFM            #0, [X14] }
          unsigned int v23 = *v19;
          unint64_t v22 = (unsigned __int16 *)(v19 + 1);
          BOOL v24 = v23 > v7;
          if (v23 >= v7 && (v24 || *v22 >= a3)) {
            break;
          }
          v8 += 8 * v11;
          v10 -= v11;
          if (v10 <= 1) {
            goto LABEL_12;
          }
        }
        v10 -= v11;
      }
      while (v10 > 1);
    }
LABEL_12:
    if (*(_DWORD *)v8 >= v7) {
      BOOL v25 = *(_DWORD *)v8 <= v7 && *(unsigned __int16 *)(v8 + 4) < a3;
    }
    else {
      BOOL v25 = 1;
    }
    v8 += 8 * v25;
  }
  if (v8 == v9) {
    return &unk_24F6828;
  }
  __n128 result = &unk_24F6828;
  if (*(_DWORD *)v8 == v7 && *(unsigned __int16 *)(v8 + 4) == a3) {
    return (void *)v8;
  }
  return result;
}

uint64_t sub_29C9A0(uint64_t a1, int a2, void *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 18) = -2;
  *(unsigned char *)(a1 + 20) = 0;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9A40;
  strcpy((char *)__p[0], "use_closure_crossing_maneuver_restrictions");
  *(unsigned char *)(a1 + 16) = sub_29D62C(a3, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9380;
  strcpy((char *)__p[0], "closure_crossing_probe_suspiciousness_threshold");
  *(_WORD *)(a1 + 18) = sub_29D6F0(a3, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "use_traffic_layer");
  *(unsigned char *)(a1 + 20) = sub_29D62C(a3, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  unint64_t v80 = 0;
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "speeds_branch");
  uint64_t v6 = sub_561B0(a3, (uint64_t)__p);
  uint64_t v7 = v6;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    uint64_t v8 = *(unsigned __int8 *)(v6 + 23);
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(v6 + 8);
    }
    if (!v8) {
      goto LABEL_18;
    }
LABEL_15:
    uint64_t v10 = sub_345948();
    if (sub_345D98((uint64_t)v10, v7))
    {
      unint64_t v11 = sub_345948();
      *(_DWORD *)a1 = sub_345D04((uint64_t)v11, v7);
    }
    else
    {
      uint64_t v79 = sub_6E6EC((char **)&v78, v7);
    }
    goto LABEL_18;
  }
  operator delete(__p[0]);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 23);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(v7 + 8);
  }
  if (v9) {
    goto LABEL_15;
  }
LABEL_18:
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "predictions_branch");
  uint64_t v12 = sub_561B0(a3, (uint64_t)__p);
  uint64_t v13 = v12;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    uint64_t v14 = *(unsigned __int8 *)(v12 + 23);
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *(void *)(v12 + 8);
    }
    if (!v14) {
      goto LABEL_35;
    }
LABEL_26:
    uint64_t v16 = sub_345948();
    if (sub_345D98((uint64_t)v16, v13))
    {
      uint64_t v17 = sub_345948();
      *(_DWORD *)(a1 + 4) = sub_345D04((uint64_t)v17, v13);
    }
    else
    {
      uint64_t v18 = v79;
      if ((unint64_t)v79 >= v80)
      {
        uint64_t v20 = sub_6E6EC((char **)&v78, v13);
      }
      else
      {
        if (*(char *)(v13 + 23) < 0)
        {
          sub_4200(v79, *(void **)v13, *(void *)(v13 + 8));
        }
        else
        {
          long long v19 = *(_OWORD *)v13;
          *((void *)v79 + 2) = *(void *)(v13 + 16);
          *(_OWORD *)uint64_t v18 = v19;
        }
        uint64_t v20 = v18 + 24;
      }
      uint64_t v79 = v20;
    }
    goto LABEL_35;
  }
  operator delete(__p[0]);
  uint64_t v15 = *(unsigned __int8 *)(v13 + 23);
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *(void *)(v13 + 8);
  }
  if (v15) {
    goto LABEL_26;
  }
LABEL_35:
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "colors_branch");
  uint64_t v21 = sub_561B0(a3, (uint64_t)__p);
  uint64_t v22 = v21;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    uint64_t v23 = *(unsigned __int8 *)(v21 + 23);
    if ((v23 & 0x80u) != 0) {
      uint64_t v23 = *(void *)(v21 + 8);
    }
    if (!v23) {
      goto LABEL_52;
    }
LABEL_43:
    BOOL v25 = sub_345948();
    if (sub_345D98((uint64_t)v25, v22))
    {
      uint64_t v26 = sub_345948();
      *(_DWORD *)(a1 + 8) = sub_345D04((uint64_t)v26, v22);
    }
    else
    {
      BOOL v27 = v79;
      if ((unint64_t)v79 >= v80)
      {
        uint64_t v29 = sub_6E6EC((char **)&v78, v22);
      }
      else
      {
        if (*(char *)(v22 + 23) < 0)
        {
          sub_4200(v79, *(void **)v22, *(void *)(v22 + 8));
        }
        else
        {
          long long v28 = *(_OWORD *)v22;
          *((void *)v79 + 2) = *(void *)(v22 + 16);
          *(_OWORD *)BOOL v27 = v28;
        }
        uint64_t v29 = v27 + 24;
      }
      uint64_t v79 = v29;
    }
    goto LABEL_52;
  }
  operator delete(__p[0]);
  uint64_t v24 = *(unsigned __int8 *)(v22 + 23);
  if ((v24 & 0x80u) != 0) {
    uint64_t v24 = *(void *)(v22 + 8);
  }
  if (v24) {
    goto LABEL_43;
  }
LABEL_52:
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "incidents_branch");
  uint64_t v30 = sub_561B0(a3, (uint64_t)__p);
  uint64_t v31 = v30;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    uint64_t v34 = *(unsigned __int8 *)(v31 + 23);
    if ((v34 & 0x80u) != 0) {
      uint64_t v34 = *(void *)(v31 + 8);
    }
    if (!v34)
    {
LABEL_56:
      uint64_t v33 = (char *)v78;
      if (v78 == v79) {
        goto LABEL_145;
      }
      goto LABEL_69;
    }
  }
  else
  {
    uint64_t v32 = *(unsigned __int8 *)(v30 + 23);
    if ((v32 & 0x80u) != 0) {
      uint64_t v32 = *(void *)(v30 + 8);
    }
    if (!v32) {
      goto LABEL_56;
    }
  }
  size_t v35 = sub_345948();
  if (sub_345D98((uint64_t)v35, v31))
  {
    int v36 = sub_345948();
    *(_DWORD *)(a1 + 12) = sub_345D04((uint64_t)v36, v31);
    uint64_t v33 = (char *)v78;
    if (v78 == v79) {
      goto LABEL_145;
    }
  }
  else
  {
    uint64_t v37 = v79;
    if ((unint64_t)v79 >= v80)
    {
      uint64_t v79 = sub_6E6EC((char **)&v78, v31);
      uint64_t v33 = (char *)v78;
      if (v78 == v79) {
        goto LABEL_145;
      }
    }
    else if (*(char *)(v31 + 23) < 0)
    {
      sub_4200(v79, *(void **)v31, *(void *)(v31 + 8));
      uint64_t v79 = v37 + 24;
      uint64_t v33 = (char *)v78;
      if (v78 == v37 + 24) {
        goto LABEL_145;
      }
    }
    else
    {
      long long v38 = *(_OWORD *)v31;
      *((void *)v79 + 2) = *(void *)(v31 + 16);
      *(_OWORD *)uint64_t v37 = v38;
      uint64_t v79 = v37 + 24;
      uint64_t v33 = (char *)v78;
      if (v78 == v37 + 24) {
        goto LABEL_145;
      }
    }
  }
LABEL_69:
  if (!a2) {
    goto LABEL_145;
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v71);
    unint64_t v39 = sub_188FC78(v71, (uint64_t)"No traffic data available for traffic branch(es) ", 49);
    uint64_t v40 = (char *)v78;
    uint64_t v41 = v79;
    sub_6BAC((uint64_t)__p);
    if (v40 != v41)
    {
      if (v40[23] < 0)
      {
        sub_4200(__dst, *(void **)v40, *((void *)v40 + 1));
      }
      else
      {
        long long v42 = *(_OWORD *)v40;
        *(void *)&__dst[16] = *((void *)v40 + 2);
        *(_OWORD *)long long __dst = v42;
      }
      if (__dst[23] >= 0) {
        int v43 = __dst;
      }
      else {
        int v43 = *(unsigned char **)__dst;
      }
      if (__dst[23] >= 0) {
        uint64_t v44 = __dst[23];
      }
      else {
        uint64_t v44 = *(void *)&__dst[8];
      }
      sub_188FC78(__p, (uint64_t)v43, v44);
      if ((__dst[23] & 0x80000000) == 0)
      {
        if (v40 + 24 == v41) {
          goto LABEL_102;
        }
LABEL_87:
        uint64_t v45 = 0;
        do
        {
          if (v45 != -24) {
            sub_188FC78(__p, (uint64_t)",", 1);
          }
          int v46 = (void **)&v40[v45 + 24];
          if (v40[v45 + 47] < 0)
          {
            sub_4200(__dst, *v46, *(void *)&v40[v45 + 32]);
          }
          else
          {
            long long v47 = *(_OWORD *)v46;
            *(void *)&__dst[16] = *(void *)&v40[v45 + 40];
            *(_OWORD *)long long __dst = v47;
          }
          if (__dst[23] >= 0) {
            int v48 = __dst;
          }
          else {
            int v48 = *(unsigned char **)__dst;
          }
          if (__dst[23] >= 0) {
            uint64_t v49 = __dst[23];
          }
          else {
            uint64_t v49 = *(void *)&__dst[8];
          }
          sub_188FC78(__p, (uint64_t)v48, v49);
          if ((__dst[23] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
          v45 += 24;
        }
        while (&v40[v45 + 24] != v41);
        goto LABEL_102;
      }
      operator delete(*(void **)__dst);
      if (v40 + 24 != v41) {
        goto LABEL_87;
      }
    }
LABEL_102:
    std::stringbuf::str();
    if (v83 < 0) {
      operator delete(__p[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    if (v70 >= 0) {
      unint64_t v52 = &v68;
    }
    else {
      unint64_t v52 = v68;
    }
    if (v70 >= 0) {
      uint64_t v53 = HIBYTE(v70);
    }
    else {
      uint64_t v53 = (uint64_t)v69;
    }
    sub_188FC78(v39, (uint64_t)v52, v53);
    if (SHIBYTE(v70) < 0) {
      operator delete(v68);
    }
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    v71[0] = v50;
    *(void **)((char *)v71 + *((void *)v50 - 3)) = v51;
    if (v77 < 0) {
      operator delete(v76);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  *(void *)long long __dst = operator new(0x30uLL);
  *(_OWORD *)&__dst[8] = xmmword_20B93D0;
  strcpy(*(char **)__dst, "RoutingDataContext.missing_traffic_branch");
  unint64_t v68 = 0;
  unint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v75 = 0;
  long long v73 = 0u;
  *(_OWORD *)uint64_t v74 = 0u;
  *(_OWORD *)uint64_t v71 = 0u;
  *(_OWORD *)long long v72 = 0u;
  char v67 = 0;
  LOBYTE(v66) = 0;
  uint64_t v64 = 0;
  unint64_t v65 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  sub_29DC44((uint64_t)__p, (long long **)&v68, (long long *)v71, &v66, &v64, 0, (uint64_t)&v62, 1);
  nullsub_1(1);
  sub_29E11C((uint64_t)__p);
  unsigned int v54 = v63;
  if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
    double v55 = v65;
    if (!v65)
    {
LABEL_121:
      if ((v67 & 0x80000000) == 0) {
        goto LABEL_122;
      }
      goto LABEL_139;
    }
  }
  else
  {
    double v55 = v65;
    if (!v65) {
      goto LABEL_121;
    }
  }
  if (atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_121;
  }
  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
  std::__shared_weak_count::__release_weak(v55);
  if ((v67 & 0x80000000) == 0)
  {
LABEL_122:
    if ((SHIBYTE(v75) & 0x80000000) == 0) {
      goto LABEL_123;
    }
    goto LABEL_140;
  }
LABEL_139:
  operator delete((void *)v66);
  if ((SHIBYTE(v75) & 0x80000000) == 0)
  {
LABEL_123:
    if ((SHIBYTE(v73) & 0x80000000) == 0) {
      goto LABEL_124;
    }
    goto LABEL_141;
  }
LABEL_140:
  operator delete(v74[0]);
  if ((SHIBYTE(v73) & 0x80000000) == 0)
  {
LABEL_124:
    if ((SHIBYTE(v72[0]) & 0x80000000) == 0) {
      goto LABEL_125;
    }
    goto LABEL_142;
  }
LABEL_141:
  operator delete(v72[1]);
  if ((SHIBYTE(v72[0]) & 0x80000000) == 0)
  {
LABEL_125:
    uint64_t v56 = (void **)v68;
    if (v68) {
      goto LABEL_126;
    }
LABEL_143:
    if ((__dst[23] & 0x80000000) != 0) {
      goto LABEL_128;
    }
    goto LABEL_144;
  }
LABEL_142:
  operator delete(v71[0]);
  uint64_t v56 = (void **)v68;
  if (!v68) {
    goto LABEL_143;
  }
LABEL_126:
  uint64_t v57 = v69;
  if (v69 == v56)
  {
    unint64_t v69 = v56;
    operator delete(v56);
    if ((__dst[23] & 0x80000000) != 0) {
      goto LABEL_128;
    }
    goto LABEL_144;
  }
  do
  {
    while (*((char *)v57 - 1) < 0)
    {
      operator delete(*(v57 - 3));
      if (*((char *)v57 - 25) < 0) {
        goto LABEL_133;
      }
LABEL_130:
      v57 -= 6;
      if (v57 == v56) {
        goto LABEL_134;
      }
    }
    if ((*((char *)v57 - 25) & 0x80000000) == 0) {
      goto LABEL_130;
    }
LABEL_133:
    operator delete(*(v57 - 6));
    v57 -= 6;
  }
  while (v57 != v56);
LABEL_134:
  unint64_t v69 = v56;
  operator delete(v68);
  if ((__dst[23] & 0x80000000) != 0) {
LABEL_128:
  }
    operator delete(*(void **)__dst);
LABEL_144:
  int v58 = sub_69510();
  nullsub_1(v58);
  uint64_t v33 = (char *)v78;
LABEL_145:
  if (v33)
  {
    int v59 = v79;
    unsigned int v60 = v33;
    if (v79 != v33)
    {
      do
      {
        if (*(v59 - 1) < 0) {
          operator delete(*((void **)v59 - 3));
        }
        v59 -= 24;
      }
      while (v59 != v33);
      unsigned int v60 = v78;
    }
    uint64_t v79 = v33;
    operator delete(v60);
  }
  return a1;
}

void sub_29D4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
}

BOOL sub_29D62C(void *a1, uint64_t a2)
{
  uint64_t v2 = sub_58070(a1, a2);
  if (!v2 || (int v3 = *((_DWORD *)v2 + 12), (v3 & 0xFFFFFFFE) != 4))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v6 = (void *)sub_2F404((uint64_t)exception, &v7);
  }
  return v3 == 4;
}

void sub_29D6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_29D6F0(void *a1, uint64_t a2)
{
  uint64_t v2 = sub_58070(a1, a2);
  if (!v2 || *((_DWORD *)v2 + 12) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    long long v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return (int)*((double *)v2 + 5);
}

void sub_29D780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_29D7B0(uint64_t a1)
{
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
LABEL_7:
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_29D824(uint64_t a1)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v2 = operator new(4uLL);
  *uint64_t v2 = 0;
  *(void *)(a1 + 32) = v2 + 1;
  *(void *)(a1 + 40) = v2 + 1;
  *(void *)(a1 + 24) = v2;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  int v3 = operator new(4uLL);
  *(void *)(a1 + 72) = v3;
  *v3++ = 0;
  *(void *)(a1 + 80) = v3;
  *(void *)(a1 + 88) = v3;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = 0;
  long long v4 = operator new(4uLL);
  _DWORD *v4 = 0;
  *(void *)(a1 + 152) = v4 + 1;
  *(void *)(a1 + 160) = v4 + 1;
  *(void *)(a1 + 144) = v4;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  long long v5 = operator new(4uLL);
  *(void *)(a1 + 192) = v5;
  *v5++ = 0;
  *(void *)(a1 + 200) = v5;
  *(void *)(a1 + 208) = v5;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  return a1;
}

void sub_29D900(_Unwind_Exception *a1)
{
  int v3 = v2;
  *(void *)(v1 + 152) = v3;
  operator delete(v3);
  sub_4E798(v1 + 24);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_29D95C(uint64_t a1)
{
  if (*(void *)(a1 + 320))
  {
    sub_29DB80((void ***)(a1 + 320));
    operator delete(*(void **)(a1 + 320));
  }
  uint64_t v2 = *(void *)(a1 + 248);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 256);
    long long v4 = *(void **)(a1 + 248);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      long long v4 = *(void **)(a1 + 248);
    }
    *(void *)(a1 + 256) = v2;
    operator delete(v4);
  }
  long long v5 = *(void **)(a1 + 224);
  if (v5)
  {
    *(void *)(a1 + 232) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void *)(a1 + 192);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 200);
    uint64_t v8 = *(void **)(a1 + 192);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 24;
      }
      while (v7 != v6);
      uint64_t v8 = *(void **)(a1 + 192);
    }
    *(void *)(a1 + 200) = v6;
    operator delete(v8);
  }
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
    {
LABEL_23:
      if ((*(char *)(a1 + 119) & 0x80000000) == 0) {
        goto LABEL_24;
      }
LABEL_30:
      operator delete(*(void **)(a1 + 96));
      uint64_t v9 = *(void ***)(a1 + 64);
      if (!v9)
      {
LABEL_25:
        if (*(char *)(a1 + 63) < 0) {
          goto LABEL_33;
        }
        goto LABEL_26;
      }
      goto LABEL_31;
    }
  }
  else if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0) {
    goto LABEL_30;
  }
LABEL_24:
  uint64_t v9 = *(void ***)(a1 + 64);
  if (!v9) {
    goto LABEL_25;
  }
LABEL_31:
  uint64_t v12 = *(void ***)(a1 + 72);
  if (v12 == v9)
  {
    *(void *)(a1 + 72) = v9;
    operator delete(v9);
    if (*(char *)(a1 + 63) < 0) {
      goto LABEL_33;
    }
LABEL_26:
    uint64_t v10 = *(char **)a1;
    if (*(void *)a1) {
      goto LABEL_34;
    }
    return a1;
  }
  do
  {
    if (*((char *)v12 - 1) < 0)
    {
      operator delete(*(v12 - 3));
      if ((*((char *)v12 - 25) & 0x80000000) == 0) {
        goto LABEL_36;
      }
    }
    else if ((*((char *)v12 - 25) & 0x80000000) == 0)
    {
      goto LABEL_36;
    }
    operator delete(*(v12 - 6));
LABEL_36:
    v12 -= 6;
  }
  while (v12 != v9);
  uint64_t v18 = *(void **)(a1 + 64);
  *(void *)(a1 + 72) = v9;
  operator delete(v18);
  if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
    goto LABEL_26;
  }
LABEL_33:
  operator delete(*(void **)(a1 + 40));
  uint64_t v10 = *(char **)a1;
  if (!*(void *)a1) {
    return a1;
  }
LABEL_34:
  uint64_t v13 = *(char **)(a1 + 8);
  uint64_t v14 = v10;
  if (v13 != v10)
  {
    uint64_t v15 = *(char **)(a1 + 8);
    do
    {
      uint64_t v17 = (void *)*((void *)v15 - 3);
      v15 -= 24;
      uint64_t v16 = v17;
      if (v17)
      {
        *((void *)v13 - 2) = v16;
        operator delete(v16);
      }
      uint64_t v13 = v15;
    }
    while (v15 != v10);
    uint64_t v14 = *(char **)a1;
  }
  *(void *)(a1 + 8) = v10;
  operator delete(v14);
  return a1;
}

void sub_29DB80(void ***a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (v3 != *a1)
  {
    while (1)
    {
      long long v5 = *(v3 - 4);
      if (v5)
      {
        *(v3 - 3) = v5;
        operator delete(v5);
      }
      uint64_t v6 = v3 - 7;
      uint64_t v7 = (void **)*(v3 - 7);
      if (!v7) {
        goto LABEL_5;
      }
      uint64_t v8 = (void **)*(v3 - 6);
      long long v4 = *(v3 - 7);
      if (v8 != v7) {
        break;
      }
LABEL_4:
      *(v3 - 6) = v7;
      operator delete(v4);
LABEL_5:
      v3 -= 7;
      if (v6 == v2) {
        goto LABEL_2;
      }
    }
    while (*((char *)v8 - 17) < 0)
    {
      operator delete(*(v8 - 5));
      uint64_t v9 = *(v8 - 8);
      if (v9) {
        goto LABEL_16;
      }
LABEL_11:
      v8 -= 9;
      if (v8 == v7)
      {
        long long v4 = *v6;
        goto LABEL_4;
      }
    }
    uint64_t v9 = *(v8 - 8);
    if (!v9) {
      goto LABEL_11;
    }
LABEL_16:
    *(v8 - 7) = v9;
    operator delete(v9);
    goto LABEL_11;
  }
LABEL_2:
  a1[1] = v2;
}

uint64_t sub_29DC44(uint64_t a1, long long **a2, long long *a3, long long *a4, void *a5, char a6, uint64_t a7, char a8)
{
  uint64_t v15 = sub_29DDA8((char **)a1, a2);
  sub_29E004((char *)v15 + 24, a3);
  if (*((char *)a4 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 96), *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v16 = *a4;
    *(void *)(a1 + 112) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 96) = v16;
  }
  *(unsigned char *)(a1 + 120) = a6;
  if (*a5)
  {
    char v17 = (*(uint64_t (**)(void))(*(void *)*a5 + 136))(*a5) & (a6 ^ 1);
    uint64_t v18 = *a5;
  }
  else
  {
    uint64_t v18 = 0;
    char v17 = 1;
  }
  *(unsigned char *)(a1 + 121) = v17;
  uint64_t v19 = a5[1];
  *(void *)(a1 + 128) = v18;
  *(void *)(a1 + 136) = v19;
  *a5 = 0;
  a5[1] = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a7;
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  *(unsigned char *)(a1 + 160) = a8;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  return a1;
}

void sub_29DD60(_Unwind_Exception *a1)
{
  sub_29D7B0(v2);
  sub_1A6DC(v1);
  _Unwind_Resume(a1);
}

void sub_29DD94(_Unwind_Exception *a1)
{
  sub_1A6DC(v1);
  _Unwind_Resume(a1);
}

char **sub_29DDA8(char **a1, long long **a2)
{
  a1[2] = 0;
  int v3 = a1 + 16;
  *a1 = 0;
  a1[1] = 0;
  long long v4 = *a2;
  long long v5 = a2[1];
  int64_t v6 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    if (v7 >= 0x555555555555556) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[48 * v7];
    a1[1] = sub_29DE80(v3, v4, v5, v8);
  }
  return a1;
}

void sub_29DE54(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1) {
    sub_20A6C24((void **)(v1 + 8), *(void ***)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_29DE80(int a1, long long *a2, long long *a3, char *__dst)
{
  long long v4 = __dst;
  unint64_t v11 = __dst;
  if (a2 != a3)
  {
    int64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_4200(v4, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v8 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)long long v4 = v8;
      }
      uint64_t v9 = v4 + 24;
      if (*((char *)v6 + 47) < 0)
      {
        sub_4200(v9, *((void **)v6 + 3), *((void *)v6 + 4));
      }
      else
      {
        long long v7 = *(long long *)((char *)v6 + 24);
        *((void *)v4 + 5) = *((void *)v6 + 5);
        *(_OWORD *)uint64_t v9 = v7;
      }
      v6 += 3;
      long long v4 = v11 + 48;
      v11 += 48;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_29DF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 + 23) < 0)
  {
    operator delete(*(void **)v9);
    sub_29DF84((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_29DF84((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_29DF84(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (1)
    {
      if (v3 == v4) {
        return a1;
      }
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if ((*(char *)(v3 - 25) & 0x80000000) == 0) {
          goto LABEL_4;
        }
      }
      else if ((*(char *)(v3 - 25) & 0x80000000) == 0)
      {
        goto LABEL_4;
      }
      operator delete(*(void **)(v3 - 48));
LABEL_4:
      v3 -= 48;
    }
  }
  return a1;
}

char *sub_29E004(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
    long long v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
    long long v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(long long *)((char *)a2 + 24);
      *((void *)v5 + 2) = *((void *)a2 + 5);
      *(_OWORD *)long long v5 = v6;
      goto LABEL_6;
    }
  }
  sub_4200(v5, *((void **)a2 + 3), *((void *)a2 + 4));
LABEL_6:
  long long v7 = __dst + 48;
  if (*((char *)a2 + 71) < 0)
  {
    sub_4200(v7, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v8 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *(_OWORD *)long long v7 = v8;
  }
  return __dst;
}

void sub_29E0D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0)
  {
    operator delete(*v2);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_29E11C(uint64_t a1)
{
  sub_29E2C4(a1 + 168);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 136);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 136);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_9:
      if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      goto LABEL_11;
    }
LABEL_16:
    operator delete(*(void **)(a1 + 24));
    long long v4 = *(void ***)a1;
    if (!*(void *)a1) {
      return a1;
    }
    goto LABEL_17;
  }
LABEL_15:
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_16;
  }
LABEL_11:
  long long v4 = *(void ***)a1;
  if (!*(void *)a1) {
    return a1;
  }
LABEL_17:
  long long v6 = *(void ***)(a1 + 8);
  long long v7 = v4;
  if (v6 != v4)
  {
    while (1)
    {
      if (*((char *)v6 - 1) < 0)
      {
        operator delete(*(v6 - 3));
        if (*((char *)v6 - 25) < 0) {
LABEL_24:
        }
          operator delete(*(v6 - 6));
      }
      else if (*((char *)v6 - 25) < 0)
      {
        goto LABEL_24;
      }
      v6 -= 6;
      if (v6 == v4)
      {
        long long v7 = *(void ***)a1;
        break;
      }
    }
  }
  *(void *)(a1 + 8) = v4;
  operator delete(v7);
  return a1;
}

uint64_t sub_29E2C4(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      long long v5 = *(char **)v2;
      uint64_t v6 = *((void *)v2 + 5);
      if (v6)
      {
        uint64_t v7 = *((void *)v2 + 6);
        long long v8 = (void *)*((void *)v2 + 5);
        if (v7 != v6)
        {
          do
          {
            if (*(char *)(v7 - 9) < 0) {
              operator delete(*(void **)(v7 - 32));
            }
            v7 -= 32;
          }
          while (v7 != v6);
          long long v8 = (void *)*((void *)v2 + 5);
        }
        *((void *)v2 + 6) = v6;
        operator delete(v8);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

char ***sub_29E380(char ***a1, _OWORD *a2)
{
  long long v4 = *a1;
  uint64_t v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v9 = *v4;
    uint64_t v10 = (v6 - *v4) >> 5;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59) {
      sub_2E00();
    }
    uint64_t v12 = v5 - (void)v9;
    if (v12 >> 4 > v11) {
      unint64_t v11 = v12 >> 4;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 59) {
        sub_188D718();
      }
      uint64_t v14 = (char *)operator new(32 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[32 * v10];
    long long v16 = a2[1];
    *(_OWORD *)uint64_t v15 = *a2;
    *((_OWORD *)v15 + 1) = v16;
    long long v8 = v15 + 32;
    if (v6 != v9)
    {
      do
      {
        long long v17 = *((_OWORD *)v6 - 1);
        *((_OWORD *)v15 - 2) = *((_OWORD *)v6 - 2);
        *((_OWORD *)v15 - 1) = v17;
        v15 -= 32;
        v6 -= 32;
      }
      while (v6 != v9);
      uint64_t v6 = *v4;
    }
    char *v4 = v15;
    v4[1] = v8;
    v4[2] = &v14[32 * v13];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    long long v7 = a2[1];
    *(_OWORD *)uint64_t v6 = *a2;
    *((_OWORD *)v6 + 1) = v7;
    long long v8 = v6 + 32;
  }
  v4[1] = v8;
  return a1;
}

void sub_29E490(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
void sub_29F090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_29F698(a1, (__n128 *)a2, a3, a4);
  if (*(void *)a5 < *(void *)a4
    || *(void *)a4 >= *(void *)a5
    && ((v28 = *(void *)(a5 + 16), uint64_t v29 = *(void *)(a4 + 16), v28 < v29)
     || v29 >= v28 && *(void *)(a5 + 24) < *(void *)(a4 + 24)))
  {
    long long v11 = *(_OWORD *)a4;
    long long v10 = *(_OWORD *)(a4 + 16);
    long long v12 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v12;
    *(_OWORD *)a5 = v11;
    *(_OWORD *)(a5 + 16) = v10;
    if (*(void *)a4 < *(void *)a3
      || *(void *)a3 >= *(void *)a4
      && ((uint64_t v13 = *(void *)(a4 + 16), v14 = *(void *)(a3 + 16), v13 < v14)
       || v14 >= v13 && *(void *)(a4 + 24) < *(void *)(a3 + 24)))
    {
      long long v16 = *(_OWORD *)a3;
      long long v15 = *(_OWORD *)(a3 + 16);
      long long v17 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v17;
      *(_OWORD *)a4 = v16;
      *(_OWORD *)(a4 + 16) = v15;
      if (*(void *)a3 < *(void *)a2
        || *(void *)a2 >= *(void *)a3
        && ((v18 = *(void *)(a3 + 16), uint64_t v19 = *(void *)(a2 + 16), v18 < v19)
         || v19 >= v18 && *(void *)(a3 + 24) < *(void *)(a2 + 24)))
      {
        __n128 v21 = *(__n128 *)a2;
        long long v20 = *(_OWORD *)(a2 + 16);
        long long v22 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v22;
        *(__n128 *)a3 = v21;
        *(_OWORD *)(a3 + 16) = v20;
        if (*(void *)a2 < *(void *)a1
          || *(void *)a1 >= *(void *)a2
          && ((uint64_t v23 = *(void *)(a2 + 16), v24 = *(void *)(a1 + 16), v23 < v24)
           || v24 >= v23 && *(void *)(a2 + 24) < *(void *)(a1 + 24)))
        {
          long long v26 = *(_OWORD *)a1;
          long long v25 = *(_OWORD *)(a1 + 16);
          long long v27 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v27;
          *(_OWORD *)a2 = v26;
          *(_OWORD *)(a2 + 16) = v25;
        }
      }
    }
  }
}

long long *sub_29F234(long long *result, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  if (*a2 < *(void *)result
    || *(void *)result >= v3
    && ((uint64_t v25 = a2[2], v26 = *((void *)result + 2), v25 < v26) || v26 >= v25 && a2[3] < *((void *)result + 3)))
  {
    if (*(void *)a3 < v3
      || v3 >= *(void *)a3
      && ((uint64_t v17 = *((void *)a3 + 2), v18 = a2[2], v17 < v18) || v18 >= v17 && *((void *)a3 + 3) < a2[3]))
    {
      long long v5 = *result;
      long long v4 = result[1];
      long long v6 = a3[1];
      *__n128 result = *a3;
      result[1] = v6;
    }
    else
    {
      long long v20 = *result;
      long long v19 = result[1];
      long long v21 = *((_OWORD *)a2 + 1);
      *__n128 result = *(_OWORD *)a2;
      result[1] = v21;
      *(_OWORD *)a2 = v20;
      *((_OWORD *)a2 + 1) = v19;
      if (*(void *)a3 >= *a2)
      {
        if (*a2 < *(void *)a3) {
          return result;
        }
        uint64_t v22 = *((void *)a3 + 2);
        uint64_t v23 = a2[2];
        if (v22 >= v23 && (v23 < v22 || *((void *)a3 + 3) >= a2[3])) {
          return result;
        }
      }
      long long v5 = *(_OWORD *)a2;
      long long v4 = *((_OWORD *)a2 + 1);
      long long v24 = a3[1];
      *(_OWORD *)a2 = *a3;
      *((_OWORD *)a2 + 1) = v24;
    }
    *a3 = v5;
    a3[1] = v4;
    return result;
  }
  if (*(void *)a3 < v3
    || v3 >= *(void *)a3
    && ((uint64_t v7 = *((void *)a3 + 2), v8 = a2[2], v7 < v8) || v8 >= v7 && *((void *)a3 + 3) < a2[3]))
  {
    long long v10 = *(_OWORD *)a2;
    long long v9 = *((_OWORD *)a2 + 1);
    long long v11 = a3[1];
    *(_OWORD *)a2 = *a3;
    *((_OWORD *)a2 + 1) = v11;
    *a3 = v10;
    a3[1] = v9;
    if (*a2 < *(void *)result
      || *(void *)result >= *a2
      && ((v12 = a2[2], uint64_t v13 = *((void *)result + 2), v12 < v13) || v13 >= v12 && a2[3] < *((void *)result + 3)))
    {
      long long v15 = *result;
      long long v14 = result[1];
      long long v16 = *((_OWORD *)a2 + 1);
      *__n128 result = *(_OWORD *)a2;
      result[1] = v16;
      *(_OWORD *)a2 = v15;
      *((_OWORD *)a2 + 1) = v14;
    }
  }
  return result;
}

BOOL sub_29F3D4(uint64_t a1, void *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v22 = (long long *)(a2 - 4);
      uint64_t v23 = *(a2 - 4);
      if (v23 < *(void *)a1
        || *(void *)a1 >= v23
        && ((uint64_t v27 = *(a2 - 2), v28 = *(void *)(a1 + 16), v27 < v28) || v28 >= v27 && *(a2 - 1) < *(void *)(a1 + 24)))
      {
        long long v25 = *(_OWORD *)a1;
        long long v24 = *(_OWORD *)(a1 + 16);
        long long v26 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *v22;
        *(_OWORD *)(a1 + 16) = v26;
        long long *v22 = v25;
        *((_OWORD *)a2 - 1) = v24;
      }
      return result;
    case 3:
      sub_29F234((long long *)a1, (uint64_t *)(a1 + 32), (long long *)a2 - 2);
      return 1;
    case 4:
      sub_29F698(a1, (__n128 *)(a1 + 32), a1 + 64, (uint64_t)(a2 - 4));
      return 1;
    case 5:
      sub_29F090(a1, a1 + 32, a1 + 64, a1 + 96, (uint64_t)(a2 - 4));
      return 1;
    default:
      long long v6 = (void *)(a1 + 64);
      sub_29F234((long long *)a1, (uint64_t *)(a1 + 32), (long long *)(a1 + 64));
      uint64_t v7 = (void *)(a1 + 96);
      if ((void *)(a1 + 96) == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (2)
  {
    uint64_t v11 = *v7;
    if (*v7 >= *v6)
    {
      if (*v6 < v11) {
        goto LABEL_8;
      }
      uint64_t v12 = v7[2];
      uint64_t v21 = v6[2];
      if (v12 >= v21 && (v21 < v12 || v7[3] >= v6[3])) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v12 = v7[2];
    }
    uint64_t v13 = v7[1];
    uint64_t v14 = v7[3];
    long long v15 = *((_OWORD *)v6 + 1);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
    *((_OWORD *)v7 + 1) = v15;
    long long v10 = (void *)a1;
    if (v6 == (void *)a1) {
      goto LABEL_7;
    }
    uint64_t v16 = v8;
    while (1)
    {
      uint64_t v18 = a1 + v16;
      uint64_t v19 = *(void *)(a1 + v16 + 32);
      if (v11 >= v19)
      {
        if (v19 < v11) {
          goto LABEL_25;
        }
        uint64_t v20 = *(void *)(v18 + 48);
        if (v12 >= v20) {
          break;
        }
      }
LABEL_13:
      v6 -= 4;
      long long v17 = *(_OWORD *)(a1 + v16 + 48);
      *(_OWORD *)(v18 + 64) = *(_OWORD *)(a1 + v16 + 32);
      *(_OWORD *)(v18 + 80) = v17;
      v16 -= 32;
      if (v16 == -64)
      {
        long long v10 = (void *)a1;
        goto LABEL_7;
      }
    }
    if (v20 >= v12)
    {
      if (v14 >= *(void *)(v18 + 56))
      {
        long long v10 = (void *)(a1 + v16 + 64);
        goto LABEL_7;
      }
      goto LABEL_13;
    }
LABEL_25:
    long long v10 = v6;
LABEL_7:
    void *v10 = v11;
    v10[1] = v13;
    v10[2] = v12;
    v10[3] = v14;
    if (++v9 == 8) {
      return v7 + 4 == a2;
    }
LABEL_8:
    long long v6 = v7;
    v8 += 32;
    v7 += 4;
    if (v7 != a2) {
      continue;
    }
    return 1;
  }
}

__n128 sub_29F698(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  sub_29F234((long long *)a1, (uint64_t *)a2, (long long *)a3);
  if (*(void *)a4 < *(void *)a3
    || *(void *)a3 >= *(void *)a4
    && ((uint64_t v9 = *(void *)(a4 + 16), v10 = *(void *)(a3 + 16), v9 < v10)
     || v10 >= v9 && *(void *)(a4 + 24) < *(void *)(a3 + 24)))
  {
    long long v11 = *(_OWORD *)a3;
    __n128 result = *(__n128 *)(a3 + 16);
    long long v12 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v12;
    *(_OWORD *)a4 = v11;
    *(__n128 *)(a4 + 16) = result;
    if (*(void *)a3 < (int64_t)a2->n128_u64[0]
      || (int64_t)a2->n128_u64[0] >= *(void *)a3
      && ((int64_t v13 = *(void *)(a3 + 16), v14 = a2[1].n128_i64[0], v13 < v14)
       || v14 >= v13 && *(void *)(a3 + 24) < (int64_t)a2[1].n128_u64[1]))
    {
      __n128 v15 = *a2;
      __n128 result = a2[1];
      __n128 v16 = *(__n128 *)(a3 + 16);
      *a2 = *(__n128 *)a3;
      a2[1] = v16;
      *(__n128 *)a3 = v15;
      *(__n128 *)(a3 + 16) = result;
      if ((int64_t)a2->n128_u64[0] < *(void *)a1
        || *(void *)a1 >= (int64_t)a2->n128_u64[0]
        && ((int64_t v17 = a2[1].n128_i64[0], v18 = *(void *)(a1 + 16), v17 < v18)
         || v18 >= v17 && (int64_t)a2[1].n128_u64[1] < *(void *)(a1 + 24)))
      {
        long long v19 = *(_OWORD *)a1;
        __n128 result = *(__n128 *)(a1 + 16);
        __n128 v20 = a2[1];
        *(__n128 *)a1 = *a2;
        *(__n128 *)(a1 + 16) = v20;
        *a2 = (__n128)v19;
        a2[1] = result;
      }
    }
  }
  return result;
}

uint64_t sub_29F7C8(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2 = (int *)((char *)a2 + *a2);
  unsigned int v3 = *a1;
  uint64_t v4 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v4 < 5u) {
    return v3 != 0;
  }
  uint64_t v5 = v4[2];
  if (!v5) {
    return v3 != 0;
  }
  unsigned int v6 = *(int *)((char *)v2 + v5);
  if (v6 <= v3) {
    unsigned int v7 = 0;
  }
  else {
    unsigned int v7 = -1;
  }
  if (v6 >= v3) {
    return v7;
  }
  else {
    return v7 + 1;
  }
}

void sub_29F82C()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &off_2438218;
}

void sub_29F87C(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

uint64_t sub_29F8B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x21CFB2B78C13521DLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x9A90E7D95BC609) {
    sub_2E00();
  }
  if (0x439F656F1826A43ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x439F656F1826A43ALL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x21CFB2B78C13521DLL * ((a1[2] - *a1) >> 3)) >= 0x4D4873ECADE304) {
    unint64_t v5 = 0x9A90E7D95BC609;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x9A90E7D95BC609) {
    sub_188D718();
  }
  uint64_t v7 = 424 * v5;
  uint64_t v23 = operator new(424 * v5);
  uint64_t v24 = (uint64_t)v23 + 424 * v3;
  *(_OWORD *)uint64_t v24 = *(_OWORD *)a2;
  *(void *)(v24 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(v24 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v24 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(v24 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v24 + 72) = 0;
  *(void *)(v24 + 80) = 0;
  *(_OWORD *)(v24 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(v24 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(_DWORD *)(v24 + 88) = *(_DWORD *)(a2 + 88);
  long long v8 = *(_OWORD *)(a2 + 96);
  *(void *)(v24 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)(v24 + 96) = v8;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  long long v9 = *(_OWORD *)(a2 + 120);
  *(void *)(v24 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)(v24 + 120) = v9;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  long long v10 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(v24 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(v24 + 144) = v10;
  long long v11 = *(_OWORD *)(a2 + 168);
  *(void *)(v24 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(v24 + 168) = v11;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(v24 + 200) = 0;
  *(void *)(v24 + 208) = 0;
  *(_OWORD *)(v24 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  uint64_t v12 = *(void *)(a2 + 208);
  uint64_t v13 = *(void *)(a2 + 216);
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  *(void *)(v24 + 208) = v12;
  *(void *)(v24 + 216) = v13;
  *(void *)(v24 + 232) = 0;
  *(void *)(v24 + 240) = 0;
  *(_OWORD *)(v24 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(v24 + 240) = *(void *)(a2 + 240);
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  *(void *)(v24 + 256) = 0;
  *(void *)(v24 + 264) = 0;
  *(_OWORD *)(v24 + 248) = *(_OWORD *)(a2 + 248);
  *(void *)(v24 + 264) = *(void *)(a2 + 264);
  *(void *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 0;
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  *(unsigned char *)(v24 + 272) = *(unsigned char *)(a2 + 272);
  *(void *)(v24 + 312) = *(void *)(a2 + 312);
  *(void *)(v24 + 328) = 0;
  *(void *)(v24 + 336) = 0;
  *(void *)(v24 + 336) = *(void *)(a2 + 336);
  long long v14 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(v24 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(v24 + 296) = v14;
  *(_OWORD *)(v24 + 320) = *(_OWORD *)(a2 + 320);
  *(void *)(a2 + 320) = 0;
  *(void *)(a2 + 328) = 0;
  *(void *)(a2 + 336) = 0;
  long long v15 = *(_OWORD *)(a2 + 344);
  long long v16 = *(_OWORD *)(a2 + 360);
  long long v17 = *(_OWORD *)(a2 + 376);
  long long v18 = *(_OWORD *)(a2 + 392);
  *(void *)(v24 + 408) = *(void *)(a2 + 408);
  *(_OWORD *)(v24 + 376) = v17;
  *(_OWORD *)(v24 + 392) = v18;
  *(_OWORD *)(v24 + 344) = v15;
  *(_OWORD *)(v24 + 360) = v16;
  *(unsigned char *)(v24 + 416) = *(unsigned char *)(a2 + 416);
  sub_29FBAC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, v24, v24);
  __n128 v20 = (void *)*a1;
  uint64_t v19 = a1[1];
  *a1 = v21;
  a1[1] = v24 + 424;
  for (a1[2] = (uint64_t)v23 + v7; (void *)v19 != v20; uint64_t v19 = sub_29D95C(v19 - 424))
    ;
  if (v20) {
    operator delete(v20);
  }
  return v24 + 424;
}

void sub_29FB44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_29FB58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_29FB58(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 424;
    sub_29D95C(i - 424);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_29FBAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      long long v10 = (void *)(a7 + v7 - 424);
      uint64_t v11 = a3 + v7 - 424;
      *(void *)(a7 + v7 - 416) = 0;
      void *v10 = 0;
      v10[2] = 0;
      *(_OWORD *)long long v10 = *(_OWORD *)v11;
      *(void *)(a7 + v7 - 408) = *(void *)(a3 + v7 - 408);
      *(void *)(a3 + v7 - 416) = 0;
      *(void *)uint64_t v11 = 0;
      long long v12 = *(_OWORD *)(a3 + v7 - 400);
      *(void *)(v11 + 16) = 0;
      *(_OWORD *)(a7 + v7 - 400) = v12;
      uint64_t v13 = a7 + v7 - 384;
      uint64_t v14 = a3 + v7 - 384;
      long long v15 = *(_OWORD *)v14;
      *(void *)(v13 + 16) = *(void *)(a3 + v7 - 368);
      *(_OWORD *)uint64_t v13 = v15;
      *(void *)(v14 + 8) = 0;
      *(void *)(v14 + 16) = 0;
      long long v16 = (void *)(a7 + v7 - 360);
      uint64_t v17 = a3 + v7 - 360;
      *(void *)uint64_t v14 = 0;
      *(void *)(a7 + v7 - 352) = 0;
      void *v16 = 0;
      v16[2] = 0;
      *(_OWORD *)long long v16 = *(_OWORD *)v17;
      *(void *)(a7 + v7 - 344) = *(void *)(a3 + v7 - 344);
      *(void *)(a3 + v7 - 352) = 0;
      *(void *)uint64_t v17 = 0;
      *(void *)(v17 + 16) = 0;
      *(_DWORD *)(a7 + v7 - 336) = *(_DWORD *)(a3 + v7 - 336);
      uint64_t v18 = a7 + v7 - 328;
      uint64_t v19 = a3 + v7 - 328;
      long long v20 = *(_OWORD *)v19;
      *(void *)(v18 + 16) = *(void *)(a3 + v7 - 312);
      *(_OWORD *)uint64_t v18 = v20;
      *(void *)(v19 + 8) = 0;
      *(void *)(v19 + 16) = 0;
      *(void *)uint64_t v19 = 0;
      uint64_t v21 = a7 + v7 - 304;
      uint64_t v22 = a3 + v7 - 304;
      long long v23 = *(_OWORD *)v22;
      *(void *)(v21 + 16) = *(void *)(a3 + v7 - 288);
      *(_OWORD *)uint64_t v21 = v23;
      *(void *)(v22 + 8) = 0;
      *(void *)(v22 + 16) = 0;
      *(void *)uint64_t v22 = 0;
      uint64_t v24 = a7 + v7 - 280;
      long long v25 = *(_OWORD *)(a3 + v7 - 280);
      *(_DWORD *)(v24 + 16) = *(_DWORD *)(a3 + v7 - 264);
      *(_OWORD *)uint64_t v24 = v25;
      long long v26 = *(_OWORD *)(a3 + v7 - 256);
      *(void *)(v8 - 240) = *(void *)(a3 + v7 - 240);
      *(_OWORD *)(v8 - 256) = v26;
      *(void *)(v9 - 256) = 0;
      *(void *)(v9 - 248) = 0;
      *(void *)(v9 - 240) = 0;
      *(void *)(v8 - 232) = 0;
      *(void *)(v8 - 224) = 0;
      *(void *)(v8 - 216) = 0;
      *(_OWORD *)(v8 - 232) = *(_OWORD *)(a3 + v7 - 232);
      *(void *)(v8 - 216) = *(void *)(a3 + v7 - 216);
      *(void *)(v9 - 224) = 0;
      *(void *)(v9 - 216) = 0;
      uint64_t v27 = *(void *)(a3 + v7 - 208);
      *(void *)(v9 - 232) = 0;
      *(void *)(v8 - 192) = 0;
      *(void *)(v8 - 184) = 0;
      *(void *)(v8 - 208) = v27;
      *(void *)(v8 - 200) = 0;
      *(_OWORD *)(v8 - 200) = *(_OWORD *)(a3 + v7 - 200);
      *(void *)(v8 - 184) = *(void *)(a3 + v7 - 184);
      *(void *)(v9 - 200) = 0;
      *(void *)(v9 - 192) = 0;
      *(void *)(v9 - 184) = 0;
      *(void *)(v8 - 176) = 0;
      *(void *)(v8 - 168) = 0;
      *(void *)(v8 - 160) = 0;
      *(_OWORD *)(v8 - 176) = *(_OWORD *)(a3 + v7 - 176);
      *(void *)(v8 - 160) = *(void *)(a3 + v7 - 160);
      *(void *)(v9 - 176) = 0;
      *(void *)(v9 - 168) = 0;
      *(void *)(v9 - 160) = 0;
      *(unsigned char *)(v8 - 152) = *(unsigned char *)(a3 + v7 - 152);
      long long v28 = *(_OWORD *)(a3 + v7 - 128);
      uint64_t v29 = *(void *)(a3 + v7 - 112);
      *(_OWORD *)(v8 - 144) = *(_OWORD *)(a3 + v7 - 144);
      *(_OWORD *)(v8 - 128) = v28;
      *(void *)(v8 - 112) = v29;
      *(void *)(v8 - 104) = 0;
      *(void *)(v8 - 96) = 0;
      *(void *)(v8 - 88) = 0;
      *(_OWORD *)(v8 - 104) = *(_OWORD *)(a3 + v7 - 104);
      *(void *)(v8 - 88) = *(void *)(a3 + v7 - 88);
      *(void *)(v9 - 96) = 0;
      *(void *)(v9 - 88) = 0;
      *(void *)(v9 - 104) = 0;
      long long v31 = *(_OWORD *)(a3 + v7 - 48);
      long long v30 = *(_OWORD *)(a3 + v7 - 32);
      long long v32 = *(_OWORD *)(a3 + v7 - 64);
      *(void *)(v8 - 16) = *(void *)(a3 + v7 - 16);
      *(_OWORD *)(v8 - 48) = v31;
      *(_OWORD *)(v8 - 32) = v30;
      *(_OWORD *)(v8 - 64) = v32;
      __n128 result = *(__n128 *)(a3 + v7 - 80);
      *(__n128 *)(v8 - 80) = result;
      *(unsigned char *)(v8 - 8) = *(unsigned char *)(a3 + v7 - 8);
      v7 -= 424;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

void sub_29FDD0(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t sub_2A032C(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 24;
    if (result + 24 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      while (1)
      {
        uint64_t v6 = v4;
        uint64_t v4 = v2;
        unint64_t v7 = (*(void *)v6 >> 16) & 0xFFFF0000 | (*(void *)v6 << 32) | ((*(void *)v6 & 0xFF000000000000) == 0);
        unint64_t v8 = *(void *)(v6 + 24);
        if ((((unint64_t)*(unsigned int *)(v6 + 24) << 32) | ((unint64_t)*(unsigned __int16 *)(v6 + 28) << 16) | (*(unsigned char *)(v6 + 30) == 0)) >= v7)
        {
          uint64_t v11 = v8 & 0xFF000000000000;
          if (v7 < ((v8 >> 16) & 0xFFFF0000 | ((v8 & 0xFF000000000000) == 0) | ((unint64_t)v8 << 32))) {
            goto LABEL_6;
          }
          uint64_t v10 = v8 << 32;
          unsigned int v20 = *(_DWORD *)(v6 + 8);
          unsigned int v9 = *(_DWORD *)(v6 + 32);
          if (v9 >= v20 && (v20 < v9 || *(void *)(v6 + 40) >= *(void *)(v6 + 16))) {
            goto LABEL_6;
          }
        }
        else
        {
          unsigned int v9 = *(_DWORD *)(v6 + 32);
          uint64_t v10 = v8 << 32;
          uint64_t v11 = v8 & 0xFF000000000000;
        }
        int v12 = *(_DWORD *)(v6 + 36);
        unint64_t v13 = *(void *)(v6 + 40);
        BOOL v14 = v11 == 0;
        *(_OWORD *)uint64_t v4 = *(_OWORD *)v6;
        *(void *)(v4 + 16) = *(void *)(v6 + 16);
        uint64_t v5 = result;
        if (v6 == result) {
          goto LABEL_5;
        }
        unint64_t v15 = (v8 >> 16) & 0xFFFF0000 | v10 | v14;
        uint64_t v16 = v3;
        while (1)
        {
          uint64_t v17 = result + v16;
          unint64_t v18 = (*(void *)(result + v16 - 24) >> 16) & 0xFFFF0000 | (*(void *)(result + v16 - 24) << 32) | ((*(void *)(result + v16 - 24) & 0xFF000000000000) == 0);
          if (v15 >= v18)
          {
            if (v18 < v15) {
              goto LABEL_23;
            }
            unsigned int v19 = *(_DWORD *)(v17 - 16);
            if (v9 >= v19) {
              break;
            }
          }
LABEL_11:
          v6 -= 24;
          *(_OWORD *)uint64_t v17 = *(_OWORD *)(result + v16 - 24);
          *(void *)(v17 + 16) = *(void *)(result + v16 - 8);
          v16 -= 24;
          if (!v16)
          {
            uint64_t v5 = result;
            goto LABEL_5;
          }
        }
        if (v19 >= v9) {
          break;
        }
LABEL_23:
        uint64_t v5 = v6;
LABEL_5:
        *(void *)uint64_t v5 = v8;
        *(_DWORD *)(v5 + 8) = v9;
        *(_DWORD *)(v5 + 12) = v12;
        *(void *)(v5 + 16) = v13;
LABEL_6:
        uint64_t v2 = v4 + 24;
        v3 += 24;
        if (v4 + 24 == a2) {
          return result;
        }
      }
      if (v13 >= *(void *)(v17 - 8))
      {
        uint64_t v5 = result + v16;
        goto LABEL_5;
      }
      goto LABEL_11;
    }
  }
  return result;
}

uint64_t sub_2A04DC(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    while (1)
    {
      if (result + 24 == a2) {
        return result;
      }
      uint64_t v2 = result;
      result += 24;
      unint64_t v3 = (*(void *)v2 >> 16) & 0xFFFF0000 | (*(void *)v2 << 32) | ((*(void *)v2 & 0xFF000000000000) == 0);
      unint64_t v4 = *(void *)(v2 + 24);
      if ((((unint64_t)*(unsigned int *)(v2 + 24) << 32) | ((unint64_t)*(unsigned __int16 *)(v2 + 28) << 16) | (*(unsigned char *)(v2 + 30) == 0)) >= v3)
      {
        uint64_t v6 = v4 & 0xFF000000000000;
        if (v3 >= ((v4 >> 16) & 0xFFFF0000 | ((v4 & 0xFF000000000000) == 0) | ((unint64_t)v4 << 32)))
        {
          unsigned int v7 = *(_DWORD *)(v2 + 8);
          unsigned int v5 = *(_DWORD *)(v2 + 32);
          if (v5 < v7 || v7 >= v5 && *(void *)(v2 + 40) < *(void *)(v2 + 16)) {
            goto LABEL_11;
          }
        }
      }
      else
      {
        unsigned int v5 = *(_DWORD *)(v2 + 32);
        uint64_t v6 = v4 & 0xFF000000000000;
LABEL_11:
        int v8 = *(_DWORD *)(v2 + 36);
        unint64_t v9 = *(void *)(v2 + 40);
        BOOL v10 = v6 == 0;
        unint64_t v11 = (v4 >> 16) & 0xFFFF0000 | (v4 << 32) | v10;
        unint64_t v12 = (v4 << 32) | ((unint64_t)WORD2(v4) << 16) | v10;
        for (uint64_t i = result; ; i -= 24)
        {
          *(_OWORD *)uint64_t i = *(_OWORD *)(i - 24);
          *(void *)(i + 16) = *(void *)(i - 8);
          unint64_t v14 = (*(void *)(i - 48) >> 16) & 0xFFFF0000 | (*(void *)(i - 48) << 32) | ((*(void *)(i - 48) & 0xFF000000000000) == 0);
          if (v12 >= v14)
          {
            if (v14 < v11) {
              break;
            }
            unsigned int v15 = *(_DWORD *)(i - 40);
            if (v5 >= v15 && (v15 < v5 || v9 >= *(void *)(i - 32))) {
              break;
            }
          }
        }
        *(void *)(i - 24) = v4 & 0xFFFF000000000000 | ((unint64_t)WORD2(v4) << 32) | v4;
        *(_DWORD *)(i - 16) = v5;
        *(_DWORD *)(i - 12) = v8;
        *(void *)(i - 8) = v9;
      }
    }
  }
  return result;
}

uint64_t sub_2A0650(long long *a1, unsigned int *a2, unsigned int *a3)
{
  unint64_t v3 = (*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | ((*(void *)a1 & 0xFF000000000000) == 0);
  uint64_t v4 = (*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32);
  uint64_t v5 = *(void *)a2 & 0xFF000000000000;
  if ((((unint64_t)*a2 << 32) | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 16) | (*((unsigned char *)a2 + 6) == 0)) < v3
    || (unint64_t v15 = v4 | (v5 == 0), v3 >= v15)
    && ((unsigned int v23 = *((_DWORD *)a1 + 2), v24 = a2[2], v24 < v23) || v23 >= v24 && *((void *)a2 + 2) < *((void *)a1 + 2)))
  {
    unint64_t v6 = v4 | (v5 == 0);
    if ((((unint64_t)*a3 << 32) | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 16) | (*((unsigned char *)a3 + 6) == 0)) < v6
      || v6 >= ((*(void *)a3 >> 16) & 0xFFFF0000 | (*(void *)a3 << 32) | (unint64_t)((*(void *)a3 & 0xFF000000000000) == 0))
      && ((unsigned int v25 = a2[2], v26 = a3[2], v26 < v25) || v25 >= v26 && *((void *)a3 + 2) < *((void *)a2 + 2)))
    {
      uint64_t v27 = *((void *)a1 + 2);
      long long v28 = *a1;
      uint64_t v29 = *((void *)a3 + 2);
      *a1 = *(_OWORD *)a3;
      *((void *)a1 + 2) = v29;
      *(_OWORD *)a3 = v28;
      *((void *)a3 + 2) = v27;
      return 1;
    }
    uint64_t v7 = *((void *)a1 + 2);
    long long v8 = *a1;
    uint64_t v9 = *((void *)a2 + 2);
    *a1 = *(_OWORD *)a2;
    *((void *)a1 + 2) = v9;
    *(_OWORD *)a2 = v8;
    *((void *)a2 + 2) = v7;
    unint64_t v10 = (*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | ((*(void *)a2 & 0xFF000000000000) == 0);
    if ((((unint64_t)*a3 << 32) | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 16) | (*((unsigned char *)a3 + 6) == 0)) < v10) {
      goto LABEL_5;
    }
    if (v10 < ((*(void *)a3 >> 16) & 0xFFFF0000 | (*(void *)a3 << 32) | (unint64_t)((*(void *)a3 & 0xFF000000000000) == 0))) {
      return 1;
    }
    unsigned int v32 = a2[2];
    unsigned int v33 = a3[2];
    if (v33 < v32) {
      goto LABEL_5;
    }
    if (v32 < v33) {
      return 1;
    }
    if (*((void *)a3 + 2) < *((void *)a2 + 2))
    {
LABEL_5:
      uint64_t v11 = *((void *)a2 + 2);
      long long v12 = *(_OWORD *)a2;
      uint64_t v13 = *((void *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((void *)a2 + 2) = v13;
      *(_OWORD *)a3 = v12;
      *((void *)a3 + 2) = v11;
      return 2;
    }
    return 1;
  }
  else
  {
    if ((((unint64_t)*a3 << 32) | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 16) | (*((unsigned char *)a3 + 6) == 0)) < v15) {
      goto LABEL_8;
    }
    if (v15 < ((*(void *)a3 >> 16) & 0xFFFF0000 | (*(void *)a3 << 32) | (unint64_t)((*(void *)a3 & 0xFF000000000000) == 0))) {
      return 0;
    }
    unsigned int v30 = a2[2];
    unsigned int v31 = a3[2];
    if (v31 < v30) {
      goto LABEL_8;
    }
    if (v30 < v31) {
      return 0;
    }
    if (*((void *)a3 + 2) < *((void *)a2 + 2))
    {
LABEL_8:
      uint64_t v16 = *((void *)a2 + 2);
      long long v17 = *(_OWORD *)a2;
      uint64_t v18 = *((void *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((void *)a2 + 2) = v18;
      *(_OWORD *)a3 = v17;
      *((void *)a3 + 2) = v16;
      unint64_t v19 = (*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | ((*(void *)a1 & 0xFF000000000000) == 0);
      if ((((unint64_t)*a2 << 32) | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 16) | (*((unsigned char *)a2 + 6) == 0)) < v19)
      {
LABEL_9:
        uint64_t v20 = *((void *)a1 + 2);
        long long v21 = *a1;
        uint64_t v22 = *((void *)a2 + 2);
        *a1 = *(_OWORD *)a2;
        *((void *)a1 + 2) = v22;
        *(_OWORD *)a2 = v21;
        *((void *)a2 + 2) = v20;
        return 2;
      }
      if (v19 >= ((*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | (unint64_t)((*(void *)a2 & 0xFF000000000000) == 0)))
      {
        unsigned int v34 = *((_DWORD *)a1 + 2);
        unsigned int v35 = a2[2];
        if (v35 < v34) {
          goto LABEL_9;
        }
        if (v34 >= v35)
        {
          if (*((void *)a2 + 2) < *((void *)a1 + 2)) {
            goto LABEL_9;
          }
          return 1;
        }
        else
        {
          return 1;
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
}

void *sub_2A0A30(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = HIDWORD(*a1);
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  unint64_t v6 = *(void *)(a2 - 24);
  BOOL v7 = (*a1 & 0xFF000000000000) == 0;
  unint64_t v8 = (*a1 << 32) | ((unint64_t)(unsigned __int16)WORD2(*a1) << 16) | v7;
  unint64_t v9 = (v6 >> 16) & 0xFFFF0000 | (v6 << 32) | ((v6 & 0xFF000000000000) == 0);
  if (v8 >= v9
    && ((unint64_t v10 = (v3 << 16) | (unint64_t)(v2 << 32) | v7, v9 < v10)
     || (unsigned int v11 = *(_DWORD *)(a2 - 16), v4 >= v11) && (v11 < v4 || v5 >= *(void *)(a2 - 8))))
  {
    for (uint64_t i = a1 + 3; (unint64_t)i < a2; i += 3)
    {
      unint64_t v16 = (*i >> 16) & 0xFFFF0000 | (*i << 32) | ((*i & 0xFF000000000000) == 0);
      if (v8 < v16) {
        break;
      }
      if (v16 >= v10)
      {
        unsigned int v17 = *((_DWORD *)i + 2);
        if (v4 < v17 || v17 >= v4 && v5 < i[2]) {
          break;
        }
      }
    }
  }
  else
  {
    uint64_t i = a1 + 3;
    for (unint64_t j = ((unint64_t)a1[3] >> 16) & 0xFFFF0000 | (a1[3] << 32) | ((a1[3] & 0xFF000000000000) == 0);
          v8 >= j;
          unint64_t j = (v14 >> 16) & 0xFFFF0000 | (v14 << 32) | ((v14 & 0xFF000000000000) == 0))
    {
      if (j >= ((v3 << 16) | (unint64_t)(v2 << 32) | v7))
      {
        unsigned int v15 = *((_DWORD *)i + 2);
        if (v4 < v15 || v15 >= v4 && v5 < i[2]) {
          break;
        }
      }
      unint64_t v14 = i[3];
      i += 3;
    }
  }
  if ((unint64_t)i < a2)
  {
    for (a2 -= 24; ; a2 -= 24)
    {
      unint64_t v19 = (v6 >> 16) & 0xFFFF0000 | (v6 << 32) | ((v6 & 0xFF000000000000) == 0);
      if (v8 >= v19)
      {
        if (v19 < ((v3 << 16) | (unint64_t)(v2 << 32) | v7)) {
          break;
        }
        unsigned int v20 = *(_DWORD *)(a2 + 8);
        if (v4 >= v20 && (v20 < v4 || v5 >= *(void *)(a2 + 16))) {
          break;
        }
      }
      unint64_t v18 = *(void *)(a2 - 24);
      unint64_t v6 = v18;
    }
  }
  if ((unint64_t)i < a2)
  {
    unint64_t v21 = (v3 << 16) | (unint64_t)(v2 << 32) | v7;
    do
    {
      uint64_t v32 = i[2];
      long long v31 = *(_OWORD *)i;
      long long v22 = *(_OWORD *)a2;
      i[2] = *(void *)(a2 + 16);
      *(_OWORD *)uint64_t i = v22;
      *(void *)(a2 + 16) = v32;
      *(_OWORD *)a2 = v31;
      while (1)
      {
        unint64_t v23 = i[3];
        i += 3;
        unint64_t v24 = (v23 >> 16) & 0xFFFF0000 | (v23 << 32) | ((v23 & 0xFF000000000000) == 0);
        if (v8 < v24) {
          break;
        }
        if (v24 >= v21)
        {
          unsigned int v25 = *((_DWORD *)i + 2);
          if (v4 < v25 || v25 >= v4 && v5 < i[2]) {
            break;
          }
        }
      }
      do
      {
        do
        {
          unint64_t v26 = *(void *)(a2 - 24);
          a2 -= 24;
          unint64_t v27 = (v26 >> 16) & 0xFFFF0000 | (v26 << 32) | ((v26 & 0xFF000000000000) == 0);
        }
        while (v8 < v27);
        if (v27 < v21) {
          break;
        }
        unsigned int v28 = *(_DWORD *)(a2 + 8);
      }
      while (v4 < v28 || v28 >= v4 && v5 < *(void *)(a2 + 16));
    }
    while ((unint64_t)i < a2);
  }
  if (i - 3 != a1)
  {
    long long v29 = *(_OWORD *)(i - 3);
    a1[2] = *(i - 1);
    *(_OWORD *)a1 = v29;
  }
  *(i - 3) = v2 & 0xFFFF000000000000 | ((unint64_t)WORD2(v2) << 32) | v2;
  *(i - 2) = v4;
  *(i - 1) = v5;
  return i;
}

unsigned int *sub_2A0D50(unsigned int *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *((void *)a1 + 1);
  unint64_t v5 = *((void *)a1 + 2);
  unint64_t v6 = (*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | ((*(void *)a1 & 0xFF000000000000) == 0);
  while (1)
  {
    BOOL v7 = &a1[v2];
    if ((((unint64_t)a1[v2 + 6] << 32) | ((unint64_t)LOWORD(a1[v2 + 7]) << 16) | (BYTE2(a1[v2 + 7]) == 0)) >= v6)
    {
      if (v6 < ((*((void *)v7 + 3) >> 16) & 0xFFFF0000 | (*((void *)v7 + 3) << 32) | (unint64_t)((*((void *)v7 + 3) & 0xFF000000000000) == 0))) {
        break;
      }
      unsigned int v8 = v7[8];
      if (v8 >= v4 && (v4 < v8 || *((void *)v7 + 5) >= v5)) {
        break;
      }
    }
    v2 += 6;
  }
  unint64_t v9 = (unint64_t)&a1[v2 + 6];
  if (v2 * 4)
  {
    while (1)
    {
      unsigned int v10 = *(_DWORD *)(a2 - 24);
      a2 -= 24;
      if ((((unint64_t)v10 << 32) | ((unint64_t)*(unsigned __int16 *)(a2 + 4) << 16) | (*(unsigned char *)(a2 + 6) == 0)) < v6) {
        break;
      }
      if (v6 >= ((*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | (unint64_t)((*(void *)a2 & 0xFF000000000000) == 0)))
      {
        unsigned int v11 = *(_DWORD *)(a2 + 8);
        if (v11 < v4 || v4 >= v11 && *(void *)(a2 + 16) < v5) {
          break;
        }
      }
    }
  }
  else
  {
    while (v9 < a2)
    {
      unsigned int v12 = *(_DWORD *)(a2 - 24);
      a2 -= 24;
      if ((((unint64_t)v12 << 32) | ((unint64_t)*(unsigned __int16 *)(a2 + 4) << 16) | (*(unsigned char *)(a2 + 6) == 0)) < v6) {
        break;
      }
      if (v6 >= ((*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | (unint64_t)((*(void *)a2 & 0xFF000000000000) == 0)))
      {
        unsigned int v13 = *(_DWORD *)(a2 + 8);
        if (v13 < v4 || v4 >= v13 && *(void *)(a2 + 16) < v5) {
          break;
        }
      }
    }
  }
  unint64_t v14 = (unsigned int *)v9;
  if (v9 < a2)
  {
    unint64_t v15 = a2;
    do
    {
      uint64_t v25 = *((void *)v14 + 2);
      long long v24 = *(_OWORD *)v14;
      long long v16 = *(_OWORD *)v15;
      *((void *)v14 + 2) = *(void *)(v15 + 16);
      *(_OWORD *)unint64_t v14 = v16;
      *(void *)(v15 + 16) = v25;
      *(_OWORD *)unint64_t v15 = v24;
      unsigned int v17 = v14 + 6;
      do
      {
        do
        {
          unint64_t v14 = v17;
          unint64_t v18 = ((unint64_t)*v17 << 32) | ((unint64_t)*((unsigned __int16 *)v17 + 2) << 16) | (*((unsigned char *)v17 + 6) == 0);
          v17 += 6;
        }
        while (v18 < v6);
        if (v6 < ((*(void *)v14 >> 16) & 0xFFFF0000 | (*(void *)v14 << 32) | (unint64_t)((*(void *)v14 & 0xFF000000000000) == 0))) {
          break;
        }
        unsigned int v19 = v14[2];
      }
      while (v19 < v4 || v4 >= v19 && *((void *)v14 + 2) < v5);
      while (1)
      {
        unsigned int v20 = *(_DWORD *)(v15 - 24);
        v15 -= 24;
        if ((((unint64_t)v20 << 32) | ((unint64_t)*(unsigned __int16 *)(v15 + 4) << 16) | (*(unsigned char *)(v15 + 6) == 0)) < v6) {
          break;
        }
        if (v6 >= ((*(void *)v15 >> 16) & 0xFFFF0000 | (*(void *)v15 << 32) | (unint64_t)((*(void *)v15 & 0xFF000000000000) == 0)))
        {
          unsigned int v21 = *(_DWORD *)(v15 + 8);
          if (v21 < v4 || v4 >= v21 && *(void *)(v15 + 16) < v5) {
            break;
          }
        }
      }
    }
    while ((unint64_t)v14 < v15);
  }
  if (v14 - 6 != a1)
  {
    long long v22 = *(_OWORD *)(v14 - 6);
    *((void *)a1 + 2) = *((void *)v14 - 1);
    *(_OWORD *)a1 = v22;
  }
  *((void *)v14 - 3) = v3;
  *((void *)v14 - 2) = v4;
  *((void *)v14 - 1) = v5;
  return v14 - 6;
}

BOOL sub_2A1058(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v26 = a2 - 6;
      unint64_t v27 = (*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | ((*(void *)a1 & 0xFF000000000000) == 0);
      if ((((unint64_t)*(a2 - 6) << 32) | ((unint64_t)*((unsigned __int16 *)a2 - 10) << 16) | (*((unsigned char *)a2 - 18) == 0)) < v27
        || v27 >= ((*(void *)v26 >> 16) & 0xFFFF0000 | (*(void *)v26 << 32) | (unint64_t)((*(void *)v26 & 0xFF000000000000) == 0))
        && ((unsigned int v31 = *(_DWORD *)(a1 + 8), v32 = *(a2 - 4), v32 < v31)
         || v31 >= v32 && *((void *)a2 - 1) < *(void *)(a1 + 16)))
      {
        uint64_t v28 = *(void *)(a1 + 16);
        long long v29 = *(_OWORD *)a1;
        uint64_t v30 = *((void *)a2 - 1);
        *(_OWORD *)a1 = *(_OWORD *)v26;
        *(void *)(a1 + 16) = v30;
        *(_OWORD *)unint64_t v26 = v29;
        *((void *)a2 - 1) = v28;
      }
      return result;
    case 3uLL:
      sub_2A0650((long long *)a1, (unsigned int *)(a1 + 24), a2 - 6);
      return 1;
    case 4uLL:
      sub_2A1434(a1, (unsigned int *)(a1 + 24), (unsigned int *)(a1 + 48), a2 - 6);
      return 1;
    case 5uLL:
      sub_2A1688(a1, (unsigned int *)(a1 + 24), (unsigned int *)(a1 + 48), (unsigned int *)(a1 + 72), a2 - 6);
      return 1;
    default:
      unint64_t v6 = (unsigned int *)(a1 + 48);
      sub_2A0650((long long *)a1, (unsigned int *)(a1 + 24), (unsigned int *)(a1 + 48));
      BOOL v7 = (unsigned int *)(a1 + 72);
      if ((unsigned int *)(a1 + 72) == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (2)
  {
    unint64_t v11 = (*(void *)v6 >> 16) & 0xFFFF0000 | (*(void *)v6 << 32) | ((*(void *)v6 & 0xFF000000000000) == 0);
    uint64_t v12 = *(void *)v7;
    uint64_t v13 = *(void *)v7 >> 16;
    if ((((unint64_t)*v7 << 32) | ((unint64_t)*((unsigned __int16 *)v7 + 2) << 16) | (*((unsigned char *)v7 + 6) == 0)) >= v11)
    {
      uint64_t v16 = v12 & 0xFF000000000000;
      if (v11 < (v13 & 0xFFFF0000 | ((v12 & 0xFF000000000000) == 0) | ((unint64_t)v12 << 32))) {
        goto LABEL_8;
      }
      uint64_t v15 = v12 << 32;
      unsigned int v25 = v6[2];
      unsigned int v14 = v7[2];
      if (v14 >= v25 && (v25 < v14 || *((void *)v7 + 2) >= *((void *)v6 + 2))) {
        goto LABEL_8;
      }
    }
    else
    {
      unsigned int v14 = v7[2];
      uint64_t v15 = v12 << 32;
      uint64_t v16 = v12 & 0xFF000000000000;
    }
    unsigned int v17 = v7[3];
    unint64_t v18 = *((void *)v7 + 2);
    BOOL v19 = v16 == 0;
    *(_OWORD *)BOOL v7 = *(_OWORD *)v6;
    *((void *)v7 + 2) = *((void *)v6 + 2);
    uint64_t v10 = a1;
    if (v6 == (unsigned int *)a1) {
      goto LABEL_7;
    }
    unint64_t v20 = v13 & 0xFFFF0000 | (unint64_t)v15 | v19;
    uint64_t v21 = v8;
    while (1)
    {
      uint64_t v22 = a1 + v21;
      unint64_t v23 = (*(void *)(a1 + v21 + 24) >> 16) & 0xFFFF0000 | (*(void *)(a1 + v21 + 24) << 32) | ((*(void *)(a1 + v21 + 24) & 0xFF000000000000) == 0);
      if (v20 >= v23)
      {
        if (v23 < v20) {
          goto LABEL_25;
        }
        unsigned int v24 = *(_DWORD *)(v22 + 32);
        if (v14 >= v24) {
          break;
        }
      }
LABEL_13:
      v6 -= 6;
      *(_OWORD *)(v22 + 48) = *(_OWORD *)(a1 + v21 + 24);
      *(void *)(v22 + 64) = *(void *)(a1 + v21 + 40);
      v21 -= 24;
      if (v21 == -48)
      {
        uint64_t v10 = a1;
        goto LABEL_7;
      }
    }
    if (v24 >= v14)
    {
      if (v18 >= *(void *)(v22 + 40))
      {
        uint64_t v10 = a1 + v21 + 48;
        goto LABEL_7;
      }
      goto LABEL_13;
    }
LABEL_25:
    uint64_t v10 = (uint64_t)v6;
LABEL_7:
    *(void *)uint64_t v10 = v12;
    *(_DWORD *)(v10 + 8) = v14;
    *(_DWORD *)(v10 + 12) = v17;
    *(void *)(v10 + 16) = v18;
    if (++v9 == 8) {
      return v7 + 6 == a2;
    }
LABEL_8:
    unint64_t v6 = v7;
    v8 += 24;
    v7 += 6;
    if (v7 != a2) {
      continue;
    }
    return 1;
  }
}

__n128 sub_2A1434(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  sub_2A0650((long long *)a1, a2, a3);
  unint64_t v9 = (*(void *)a3 >> 16) & 0xFFFF0000 | (*(void *)a3 << 32) | ((*(void *)a3 & 0xFF000000000000) == 0);
  if ((((unint64_t)*a4 << 32) | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 16) | (*((unsigned char *)a4 + 6) == 0)) < v9
    || v9 >= ((*(void *)a4 >> 16) & 0xFFFF0000 | (*(void *)a4 << 32) | (unint64_t)((*(void *)a4 & 0xFF000000000000) == 0))
    && ((v10 = a3[2], unsigned int v11 = a4[2], v11 < v10) || v10 >= v11 && *((void *)a4 + 2) < *((void *)a3 + 2)))
  {
    uint64_t v12 = *((void *)a3 + 2);
    __n128 result = *(__n128 *)a3;
    uint64_t v13 = *((void *)a4 + 2);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *((void *)a3 + 2) = v13;
    *(__n128 *)a4 = result;
    *((void *)a4 + 2) = v12;
    unint64_t v14 = (*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | ((*(void *)a2 & 0xFF000000000000) == 0);
    if ((((unint64_t)*a3 << 32) | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 16) | (*((unsigned char *)a3 + 6) == 0)) < v14
      || v14 >= ((*(void *)a3 >> 16) & 0xFFFF0000 | (*(void *)a3 << 32) | (unint64_t)((*(void *)a3 & 0xFF000000000000) == 0))
      && ((unsigned int v15 = a2[2], v16 = a3[2], v16 < v15) || v15 >= v16 && *((void *)a3 + 2) < *((void *)a2 + 2)))
    {
      uint64_t v17 = *((void *)a2 + 2);
      __n128 result = *(__n128 *)a2;
      uint64_t v18 = *((void *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((void *)a2 + 2) = v18;
      *(__n128 *)a3 = result;
      *((void *)a3 + 2) = v17;
      unint64_t v19 = (*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | ((*(void *)a1 & 0xFF000000000000) == 0);
      if ((((unint64_t)*a2 << 32) | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 16) | (*((unsigned char *)a2 + 6) == 0)) < v19
        || v19 >= ((*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | (unint64_t)((*(void *)a2 & 0xFF000000000000) == 0))
        && ((v20 = *(_DWORD *)(a1 + 8), unsigned int v21 = a2[2], v21 < v20)
         || v20 >= v21 && *((void *)a2 + 2) < *(void *)(a1 + 16)))
      {
        uint64_t v22 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v23 = *((void *)a2 + 2);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v23;
        *(__n128 *)a2 = result;
        *((void *)a2 + 2) = v22;
      }
    }
  }
  return result;
}

void sub_2A1688(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  sub_2A1434(a1, a2, a3, a4);
  unint64_t v10 = (*(void *)a4 >> 16) & 0xFFFF0000 | (*(void *)a4 << 32) | ((*(void *)a4 & 0xFF000000000000) == 0);
  if ((((unint64_t)*a5 << 32) | ((unint64_t)*((unsigned __int16 *)a5 + 2) << 16) | (*((unsigned char *)a5 + 6) == 0)) < v10
    || v10 >= ((*(void *)a5 >> 16) & 0xFFFF0000 | (*(void *)a5 << 32) | (unint64_t)((*(void *)a5 & 0xFF000000000000) == 0))
    && ((unsigned int v32 = a4[2], v33 = a5[2], v33 < v32) || v32 >= v33 && *((void *)a5 + 2) < *((void *)a4 + 2)))
  {
    uint64_t v11 = *((void *)a4 + 2);
    long long v12 = *(_OWORD *)a4;
    uint64_t v13 = *((void *)a5 + 2);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *((void *)a4 + 2) = v13;
    *(_OWORD *)a5 = v12;
    *((void *)a5 + 2) = v11;
    unint64_t v14 = (*(void *)a3 >> 16) & 0xFFFF0000 | (*(void *)a3 << 32) | ((*(void *)a3 & 0xFF000000000000) == 0);
    if ((((unint64_t)*a4 << 32) | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 16) | (*((unsigned char *)a4 + 6) == 0)) < v14
      || v14 >= ((*(void *)a4 >> 16) & 0xFFFF0000 | (*(void *)a4 << 32) | (unint64_t)((*(void *)a4 & 0xFF000000000000) == 0))
      && ((unsigned int v15 = a3[2], v16 = a4[2], v16 < v15) || v15 >= v16 && *((void *)a4 + 2) < *((void *)a3 + 2)))
    {
      uint64_t v17 = *((void *)a3 + 2);
      long long v18 = *(_OWORD *)a3;
      uint64_t v19 = *((void *)a4 + 2);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *((void *)a3 + 2) = v19;
      *(_OWORD *)a4 = v18;
      *((void *)a4 + 2) = v17;
      unint64_t v20 = (*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | ((*(void *)a2 & 0xFF000000000000) == 0);
      if ((((unint64_t)*a3 << 32) | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 16) | (*((unsigned char *)a3 + 6) == 0)) < v20
        || v20 >= ((*(void *)a3 >> 16) & 0xFFFF0000 | (*(void *)a3 << 32) | (unint64_t)((*(void *)a3 & 0xFF000000000000) == 0))
        && ((unsigned int v21 = a2[2], v22 = a3[2], v22 < v21) || v21 >= v22 && *((void *)a3 + 2) < *((void *)a2 + 2)))
      {
        uint64_t v23 = *((void *)a2 + 2);
        long long v24 = *(_OWORD *)a2;
        uint64_t v25 = *((void *)a3 + 2);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *((void *)a2 + 2) = v25;
        *(_OWORD *)a3 = v24;
        *((void *)a3 + 2) = v23;
        unint64_t v26 = (*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | ((*(void *)a1 & 0xFF000000000000) == 0);
        if ((((unint64_t)*a2 << 32) | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 16) | (*((unsigned char *)a2 + 6) == 0)) < v26
          || v26 >= ((*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | (unint64_t)((*(void *)a2 & 0xFF000000000000) == 0))
          && ((unsigned int v27 = *(_DWORD *)(a1 + 8), v28 = a2[2], v28 < v27)
           || v27 >= v28 && *((void *)a2 + 2) < *(void *)(a1 + 16)))
        {
          uint64_t v29 = *(void *)(a1 + 16);
          long long v30 = *(_OWORD *)a1;
          uint64_t v31 = *((void *)a2 + 2);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v31;
          *(_OWORD *)a2 = v30;
          *((void *)a2 + 2) = v29;
        }
      }
    }
  }
}

uint64_t sub_2A19B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 3)))
    {
      uint64_t v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 3)) | 1;
      unint64_t v6 = (unsigned int *)(result + 24 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2 < a3)
      {
        unint64_t v7 = (*((void *)v6 + 3) >> 16) & 0xFFFF0000 | (*((void *)v6 + 3) << 32) | ((*((void *)v6 + 3) & 0xFF000000000000) == 0);
        if ((((unint64_t)*v6 << 32) | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 16) | (*((unsigned char *)v6 + 6) == 0)) < v7
          || v7 >= ((*(void *)v6 >> 16) & 0xFFFF0000 | (*(void *)v6 << 32) | (unint64_t)((*(void *)v6 & 0xFF000000000000) == 0))
          && ((v8 = result + 24 * v5, unsigned int v9 = v6[8], v10 = *(_DWORD *)(v8 + 8), v10 < v9)
           || v9 >= v10 && *(void *)(v8 + 16) < *((void *)v6 + 5)))
        {
          v6 += 6;
          uint64_t v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2;
        }
      }
      unint64_t v11 = *a4;
      unint64_t v12 = (v11 >> 16) & 0xFFFF0000 | (v11 << 32) | ((v11 & 0xFF000000000000) == 0);
      if ((((unint64_t)*v6 << 32) | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 16) | (*((unsigned char *)v6 + 6) == 0)) >= v12)
      {
        unsigned int v13 = *((_DWORD *)a4 + 2);
        if (v12 >= ((*(void *)v6 >> 16) & 0xFFFF0000 | (*(void *)v6 << 32) | (unint64_t)((*(void *)v6 & 0xFF000000000000) == 0)))
        {
          unsigned int v15 = v6[2];
          if (v15 < v13) {
            return result;
          }
          unint64_t v14 = a4[2];
          if (v13 >= v15 && *((void *)v6 + 2) < v14) {
            return result;
          }
        }
        else
        {
          unint64_t v14 = a4[2];
        }
        unsigned int v16 = *((_DWORD *)a4 + 3);
        long long v17 = *(_OWORD *)v6;
        a4[2] = *((void *)v6 + 2);
        *(_OWORD *)a4 = v17;
        if (v4 >= v5)
        {
          while (1)
          {
            uint64_t v19 = v6;
            uint64_t v20 = 2 * v5;
            uint64_t v5 = (2 * v5) | 1;
            unint64_t v6 = (unsigned int *)(result + 24 * v5);
            uint64_t v21 = v20 + 2;
            if (v21 < a3)
            {
              unint64_t v22 = (*((void *)v6 + 3) >> 16) & 0xFFFF0000 | (*((void *)v6 + 3) << 32) | ((*((void *)v6 + 3) & 0xFF000000000000) == 0);
              if ((((unint64_t)*v6 << 32) | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 16) | (*((unsigned char *)v6 + 6) == 0)) < v22
                || v22 >= ((*(void *)v6 >> 16) & 0xFFFF0000 | (*(void *)v6 << 32) | (unint64_t)((*(void *)v6 & 0xFF000000000000) == 0))
                && ((uint64_t v23 = result + 24 * v5, v24 = v6[8], v25 = *(_DWORD *)(v23 + 8), v25 < v24)
                 || v24 >= v25 && *(void *)(v23 + 16) < *((void *)v6 + 5)))
              {
                v6 += 6;
                uint64_t v5 = v21;
              }
            }
            if ((((unint64_t)*v6 << 32) | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 16) | (*((unsigned char *)v6 + 6) == 0)) < v12) {
              break;
            }
            if (v12 >= ((*(void *)v6 >> 16) & 0xFFFF0000 | (*(void *)v6 << 32) | (unint64_t)((*(void *)v6 & 0xFF000000000000) == 0)))
            {
              unsigned int v26 = v6[2];
              if (v26 < v13 || v13 >= v26 && *((void *)v6 + 2) < v14) {
                break;
              }
            }
            long long v18 = *(_OWORD *)v6;
            *((void *)v19 + 2) = *((void *)v6 + 2);
            *(_OWORD *)uint64_t v19 = v18;
            if (v4 < v5) {
              goto LABEL_32;
            }
          }
          unint64_t v6 = v19;
        }
LABEL_32:
        *(void *)unint64_t v6 = v11;
        v6[2] = v13;
        v6[3] = v16;
        *((void *)v6 + 2) = v14;
      }
    }
  }
  return result;
}

__n128 sub_2A1CC4(uint64_t a1, __n128 *a2, uint64_t a3)
{
  if ((uint64_t)a2 - a1 >= 25)
  {
    int64_t v4 = a2;
    int64_t v6 = ((unint64_t)a2->n128_u64 - a1) / 0x18;
    do
    {
      while (1)
      {
        uint64_t v10 = 0;
        __n128 v21 = *(__n128 *)a1;
        unint64_t v22 = *(void *)(a1 + 16);
        unint64_t v11 = (unsigned int *)a1;
        do
        {
          unsigned int v13 = v11;
          uint64_t v14 = v10 + 1;
          v11 += 6 * v10 + 6;
          uint64_t v15 = 2 * v10;
          uint64_t v10 = (2 * v10) | 1;
          int64_t v16 = v15 + 2;
          if (v16 < v6)
          {
            unint64_t v17 = (*((void *)v11 + 3) >> 16) & 0xFFFF0000 | (*((void *)v11 + 3) << 32) | ((*((void *)v11 + 3) & 0xFF000000000000) == 0);
            if ((((unint64_t)*v11 << 32) | ((unint64_t)*((unsigned __int16 *)v11 + 2) << 16) | (*((unsigned char *)v11 + 6) == 0)) < v17
              || v17 >= ((*(void *)v11 >> 16) & 0xFFFF0000 | (*(void *)v11 << 32) | (unint64_t)((*(void *)v11 & 0xFF000000000000) == 0))
              && ((v18 = &v13[6 * v14], unsigned int v19 = v11[8], v20 = v18[2], v20 < v19)
               || v19 >= v20 && *((void *)v18 + 2) < *((void *)v11 + 5)))
            {
              v11 += 6;
              uint64_t v10 = v16;
            }
          }
          long long v12 = *(_OWORD *)v11;
          *((void *)v13 + 2) = *((void *)v11 + 2);
          *(_OWORD *)unsigned int v13 = v12;
        }
        while (v10 <= (uint64_t)((unint64_t)(v6 - 2) >> 1));
        int64_t v4 = (__n128 *)((char *)v4 - 24);
        if (v11 == (unsigned int *)v4) {
          break;
        }
        __n128 v7 = *v4;
        *((void *)v11 + 2) = v4[1].n128_u64[0];
        *(__n128 *)unint64_t v11 = v7;
        __n128 *v4 = v21;
        v4[1].n128_u64[0] = v22;
        sub_2A1EB8(a1, (uint64_t)(v11 + 6), a3, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - a1 + 24) >> 3));
        BOOL v9 = v6-- <= 2;
        if (v9) {
          return result;
        }
      }
      __n128 result = v21;
      *((void *)v11 + 2) = v22;
      *(__n128 *)unint64_t v11 = v21;
      BOOL v9 = v6-- <= 2;
    }
    while (!v9);
  }
  return result;
}

uint64_t sub_2A1EB8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    int64_t v6 = (unsigned int *)(result + 24 * (v4 >> 1));
    unint64_t v7 = *(void *)(a2 - 24);
    unint64_t v8 = (v7 >> 16) & 0xFFFF0000 | (v7 << 32) | ((v7 & 0xFF000000000000) == 0);
    if ((((unint64_t)*v6 << 32) | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 16) | (*((unsigned char *)v6 + 6) == 0)) >= v8)
    {
      if (v8 < ((*(void *)v6 >> 16) & 0xFFFF0000 | (*(void *)v6 << 32) | (unint64_t)((*(void *)v6 & 0xFF000000000000) == 0))) {
        return result;
      }
      unsigned int v9 = *(_DWORD *)(a2 - 16);
      unsigned int v17 = v6[2];
      if (v17 >= v9 && (v9 < v17 || *((void *)v6 + 2) >= *(void *)(a2 - 8))) {
        return result;
      }
    }
    else
    {
      unsigned int v9 = *(_DWORD *)(a2 - 16);
    }
    unsigned int v10 = *(_DWORD *)(a2 - 12);
    unint64_t v11 = *(void *)(a2 - 8);
    uint64_t v12 = *((void *)v6 + 2);
    *(_OWORD *)(a2 - 24) = *(_OWORD *)v6;
    *(void *)(a2 - 8) = v12;
    if (v4 >= 2)
    {
      while (1)
      {
        uint64_t v14 = v6;
        unint64_t v15 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        int64_t v6 = (unsigned int *)(result + 24 * v5);
        if ((((unint64_t)*v6 << 32) | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 16) | (*((unsigned char *)v6 + 6) == 0)) >= v8)
        {
          if (v8 < ((*(void *)v6 >> 16) & 0xFFFF0000 | (*(void *)v6 << 32) | (unint64_t)((*(void *)v6 & 0xFF000000000000) == 0))) {
            break;
          }
          unsigned int v16 = v6[2];
          if (v16 >= v9 && (v9 < v16 || *((void *)v6 + 2) >= v11)) {
            break;
          }
        }
        long long v13 = *(_OWORD *)v6;
        *((void *)v14 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v14 = v13;
        if (v15 <= 1) {
          goto LABEL_13;
        }
      }
      int64_t v6 = v14;
    }
LABEL_13:
    *(void *)int64_t v6 = v7;
    v6[2] = v9;
    v6[3] = v10;
    *((void *)v6 + 2) = v11;
  }
  return result;
}

char *sub_2A204C(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0x8E38E38E38E38E39 * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v5 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v5 = v4;
  }
  unsigned int v33 = a1 + 1;
  if (v5 > 0x1C71C71C71C71C7) {
    sub_188D718();
  }
  uint64_t v7 = 144 * v5;
  unint64_t v8 = (char *)operator new(144 * v5);
  unsigned int v9 = &v8[144 * v3];
  std::string __p = v8;
  v31.i64[0] = (uint64_t)v9;
  v31.i64[1] = (uint64_t)v9;
  unsigned int v32 = &v8[v7];
  *(_OWORD *)unsigned int v9 = *(_OWORD *)a2;
  *((void *)v9 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *((void *)v9 + 5) = v10;
  *((void *)v9 + 6) = v11;
  long long v12 = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = *(void *)(a2 + 72);
  *(_OWORD *)(v9 + 56) = v12;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  long long v13 = *(_OWORD *)(a2 + 80);
  *((void *)v9 + 12) = *(void *)(a2 + 96);
  *((_OWORD *)v9 + 5) = v13;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *((_DWORD *)v9 + 26) = *(_DWORD *)(a2 + 104);
  *((void *)v9 + 15) = 0;
  *((void *)v9 + 16) = 0;
  *((_OWORD *)v9 + 7) = *(_OWORD *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  uint64_t v14 = *(void *)(a2 + 128);
  uint64_t v15 = *(void *)(a2 + 136);
  *(void *)(a2 + 128) = 0;
  *((void *)v9 + 16) = v14;
  *((void *)v9 + 17) = v15;
  unsigned int v16 = v9 + 144;
  uint64_t v18 = a1->i64[0];
  unint64_t v17 = a1->u64[1];
  if (v17 == a1->i64[0])
  {
    int64x2_t v27 = vdupq_n_s64(v17);
  }
  else
  {
    uint64_t v19 = 0;
    do
    {
      unsigned int v20 = &v9[v19];
      uint64_t v21 = v17 + v19;
      long long v22 = *(_OWORD *)(v17 + v19 - 144);
      *((void *)v20 - 16) = *(void *)(v17 + v19 - 128);
      *((_OWORD *)v20 - 9) = v22;
      *(void *)(v21 - 136) = 0;
      *(void *)(v21 - 128) = 0;
      *(void *)(v21 - 144) = 0;
      long long v23 = *(_OWORD *)(v17 + v19 - 120);
      *((void *)v20 - 13) = *(void *)(v17 + v19 - 104);
      *(_OWORD *)(v20 - 120) = v23;
      *(void *)(v21 - 112) = 0;
      *(void *)(v21 - 104) = 0;
      *(void *)(v21 - 120) = 0;
      *((void *)v20 - 12) = *(void *)(v17 + v19 - 96);
      long long v24 = *(_OWORD *)(v17 + v19 - 88);
      *((void *)v20 - 9) = *(void *)(v17 + v19 - 72);
      *(_OWORD *)(v20 - 88) = v24;
      *(void *)(v21 - 80) = 0;
      *(void *)(v21 - 72) = 0;
      *(void *)(v21 - 88) = 0;
      long long v25 = *(_OWORD *)(v17 + v19 - 64);
      *((void *)v20 - 6) = *(void *)(v17 + v19 - 48);
      *((_OWORD *)v20 - 4) = v25;
      *(void *)(v21 - 56) = 0;
      *(void *)(v21 - 48) = 0;
      *(void *)(v21 - 64) = 0;
      int v26 = *(_DWORD *)(v17 + v19 - 40);
      *((void *)v20 - 3) = 0;
      *((void *)v20 - 2) = 0;
      *((void *)v20 - 4) = 0;
      *((_DWORD *)v20 - 10) = v26;
      *((_OWORD *)v20 - 2) = *(_OWORD *)(v17 + v19 - 32);
      *((void *)v20 - 2) = *(void *)(v17 + v19 - 16);
      *(void *)(v21 - 32) = 0;
      *(void *)(v21 - 24) = 0;
      *(void *)(v21 - 16) = 0;
      *((void *)v20 - 1) = *(void *)(v17 + v19 - 8);
      v19 -= 144;
    }
    while (v17 + v19 != v18);
    int64x2_t v27 = *a1;
    v9 += v19;
  }
  a1->i64[0] = (uint64_t)v9;
  a1->i64[1] = (uint64_t)v16;
  int64x2_t v31 = v27;
  unsigned int v28 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v8[v7];
  unsigned int v32 = v28;
  std::string __p = (void *)v27.i64[0];
  sub_2A22B4((uint64_t)&__p, v27.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v16;
}

void sub_2A22B4(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 144;
    unint64_t v5 = *(void **)(i - 32);
    if (v5)
    {
      *(void *)(i - 24) = v5;
      operator delete(v5);
    }
    if (*(char *)(i - 41) < 0)
    {
      operator delete(*(void **)(i - 64));
      if ((*(char *)(i - 65) & 0x80000000) == 0)
      {
LABEL_8:
        if ((*(char *)(i - 97) & 0x80000000) == 0) {
          goto LABEL_9;
        }
        goto LABEL_13;
      }
    }
    else if ((*(char *)(i - 65) & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(*(void **)(i - 88));
    if ((*(char *)(i - 97) & 0x80000000) == 0)
    {
LABEL_9:
      if (*(char *)(i - 121) < 0) {
        goto LABEL_14;
      }
      continue;
    }
LABEL_13:
    operator delete(*(void **)(i - 120));
    if (*(char *)(i - 121) < 0) {
LABEL_14:
    }
      operator delete(*(void **)(i - 144));
  }
}

void sub_2A2374()
{
  unk_2556E47 = 16641;
  word_2556E30 = 65;
  byte_2556E5F = 1;
  byte_2556E49 = 0;
}

uint64_t sub_2A239C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  if (*a2
    && (unint64_t v4 = (unsigned int *)sub_2AB884(*a2, 6, 1u, 1), v5)
    && (int64_t v6 = (int *)((char *)v4 + *v4), v7 = (unsigned __int16 *)((char *)v6 - *v6), *v7 >= 0xDu)
    && (uint64_t v8 = v7[6]) != 0
    && (unsigned int v9 = (int *)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8)),
        uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9),
        *v10 >= 0xBu)
    && (uint64_t v11 = v10[5]) != 0)
  {
    *(unsigned char *)(a1 + 16) = *((unsigned char *)v9 + v11) != 0;
    return a1;
  }
  else
  {
    *(unsigned char *)(a1 + 16) = 0;
    return a1;
  }
}

void sub_2A2468(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_20A69F0(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2A2480(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  sub_2A24E8(a1, a2, a3, (uint64_t)&v4);
  if (v5) {
    return 0xFFFFFFFF00000000;
  }
  else {
    return v4;
  }
}

unint64_t sub_2A24E8@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(a1 + 16)) {
    a2 = (unsigned int *)nullsub_1(a2);
  }
  unint64_t result = sub_2A313C((uint64_t *)a1, a2, a3);
  if (result == -1 || (unint64_t v9 = HIDWORD(result)) == 0)
  {
LABEL_7:
    *(_DWORD *)(a4 + 8) = -1;
  }
  else
  {
    switch(v8)
    {
      case 0:
        *(void *)a4 = v9 | (result << 32);
        *(_DWORD *)(a4 + 8) = 0;
        break;
      case 1:
        *(void *)a4 = v9 | (result << 32);
        *(_DWORD *)(a4 + 8) = 3;
        break;
      case 2:
        *(void *)a4 = v9 | (result << 32);
        *(_DWORD *)(a4 + 8) = 4;
        break;
      case 3:
        *(void *)a4 = v9 | (result << 32);
        *(_DWORD *)(a4 + 8) = 5;
        break;
      case 4:
        *(void *)a4 = v9 | (result << 32);
        *(_DWORD *)(a4 + 8) = 8;
        break;
      case 5:
        *(void *)a4 = v9 | (result << 32);
        *(_DWORD *)(a4 + 8) = 9;
        break;
      case 6:
        *(void *)a4 = v9 | (result << 32);
        *(_DWORD *)(a4 + 8) = 10;
        break;
      case 7:
        *(void *)a4 = v9 | (result << 32);
        *(_DWORD *)(a4 + 8) = 13;
        break;
      case 8:
        *(void *)a4 = v9 | (result << 32);
        *(_DWORD *)(a4 + 8) = 7;
        break;
      case 9:
        *(void *)a4 = v9 | (result << 32);
        *(_DWORD *)(a4 + 8) = 1;
        break;
      case 10:
        *(void *)a4 = v9 | (result << 32);
        *(_DWORD *)(a4 + 8) = 14;
        break;
      case 11:
        *(void *)a4 = v9 | (result << 32);
        *(_DWORD *)(a4 + 8) = 6;
        break;
      case 12:
        *(void *)a4 = v9 | (result << 32);
        *(_DWORD *)(a4 + 8) = 2;
        break;
      case 13:
        *(void *)a4 = v9 | (result << 32);
        *(_DWORD *)(a4 + 8) = 11;
        break;
      case 14:
        *(void *)a4 = v9 | (result << 32);
        *(_DWORD *)(a4 + 8) = 12;
        break;
      default:
        goto LABEL_7;
    }
  }
  return result;
}

unint64_t sub_2A2798(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  sub_2A24E8(a1, a2, a3, (uint64_t)&v4);
  if (v5 == 3) {
    return v4;
  }
  else {
    return 0xFFFFFFFF00000000;
  }
}

unint64_t sub_2A2800(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  sub_2A24E8(a1, a2, a3, (uint64_t)&v4);
  if (v5 == 4) {
    return v4;
  }
  else {
    return 0xFFFFFFFF00000000;
  }
}

unint64_t sub_2A2868(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  sub_2A24E8(a1, a2, a3, (uint64_t)&v4);
  if (v5 == 5) {
    return v4;
  }
  else {
    return 0xFFFFFFFF00000000;
  }
}

unint64_t sub_2A28D0(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  sub_2A24E8(a1, a2, a3, (uint64_t)&v4);
  if (v5 == 6) {
    return v4;
  }
  else {
    return 0xFFFFFFFF00000000;
  }
}

unint64_t sub_2A2938(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  sub_2A24E8(a1, a2, a3, (uint64_t)&v4);
  if (v5 == 7) {
    return v4;
  }
  else {
    return 0xFFFFFFFF00000000;
  }
}

unint64_t sub_2A29A0(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  sub_2A24E8(a1, a2, a3, (uint64_t)&v4);
  if (v5 == 8) {
    return v4;
  }
  else {
    return 0xFFFFFFFF00000000;
  }
}

unint64_t sub_2A2A08(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  sub_2A24E8(a1, a2, a3, (uint64_t)&v4);
  if (v5 == 9) {
    return v4;
  }
  else {
    return 0xFFFFFFFF00000000;
  }
}

unint64_t sub_2A2A70(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  sub_2A24E8(a1, a2, a3, (uint64_t)&v4);
  if (v5 == 10) {
    return v4;
  }
  else {
    return 0xFFFFFFFF00000000;
  }
}

unint64_t sub_2A2AD8(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  sub_2A24E8(a1, a2, a3, (uint64_t)&v4);
  if (v5 == 13) {
    return v4;
  }
  else {
    return 0xFFFFFFFF00000000;
  }
}

unint64_t sub_2A2B40(uint64_t *a1, const void **a2, uint64_t a3, uint64_t a4)
{
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  unint64_t v6 = v5 + 1;
  if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v6 >= 0x17)
  {
    uint64_t v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v12 = v6 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v5 + 1;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5 + 1;
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    uint64_t v14 = a2;
  }
  else {
    uint64_t v14 = *a2;
  }
  memmove(p_dst, v14, v5);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v5) = 95;
  int v15 = *(char *)(a3 + 23);
  if (v15 >= 0) {
    unsigned int v16 = (const std::string::value_type *)a3;
  }
  else {
    unsigned int v16 = *(const std::string::value_type **)a3;
  }
  if (v15 >= 0) {
    std::string::size_type v17 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v17 = *(void *)(a3 + 8);
  }
  uint64_t v18 = std::string::append(&__dst, v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  int64_t v28 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (v28 >= 0) {
    unsigned int v20 = (unsigned int *)__p;
  }
  else {
    unsigned int v20 = (unsigned int *)__p[0];
  }
  unint64_t v21 = sub_2A2D20(a1, v20, a4);
  unint64_t v23 = 0xFFFFFFFF00000000;
  if (v21 == -1)
  {
    unint64_t v24 = 0;
    if (SHIBYTE(v28) < 0) {
LABEL_33:
    }
      operator delete(__p[0]);
  }
  else
  {
    if (HIDWORD(v21) != 0 && v22 == 4)
    {
      unint64_t v23 = v21 << 32;
      unint64_t v24 = HIDWORD(v21);
    }
    else
    {
      unint64_t v24 = 0;
    }
    if (SHIBYTE(v28) < 0) {
      goto LABEL_33;
    }
  }
  return v23 | v24;
}

void sub_2A2CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2A2D20(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  if (!*a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v49 = a3;
  LODWORD(__key) = 1;
  *(_OWORD *)std::string __p = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  sub_2A3640(__p, (int *)&__key, 1uLL);
  uint64_t v5 = *((void *)&v48 + 1);
  if (!*((void *)&v48 + 1)) {
    goto LABEL_30;
  }
  while (1)
  {
    unsigned int v6 = *(_DWORD *)(*(void *)((char *)__p[1] + (((unint64_t)v48 >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * (v48 & 0x3FF));
    *(void *)&long long v48 = v48 + 1;
    *((void *)&v48 + 1) = v5 - 1;
    if ((unint64_t)v48 >= 0x800)
    {
      operator delete(*(void **)__p[1]);
      __p[1] = (char *)__p[1] + 8;
      *(void *)&long long v48 = v48 - 1024;
    }
    uint64_t v7 = (unsigned int *)sub_2AB884(*a1, 32, v6, 1);
    if (v8)
    {
      unint64_t v9 = (int *)((char *)v7 + *v7);
      uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
      if (*v10 >= 9u)
      {
        uint64_t v11 = v10[4];
        if (v11)
        {
          uint64_t v12 = (unsigned int *)((char *)v9 + v11);
          uint64_t v13 = *v12;
          int __key = a2;
          uint64_t v14 = (unsigned int *)bsearch(&__key, (char *)v12 + v13 + 4, *(unsigned int *)((char *)v12 + v13), 4uLL, (int (__cdecl *)(const void *, const void *))sub_2A4174);
          if (v14)
          {
            int v15 = (int *)((char *)v14 + *v14);
            unsigned int v16 = (unsigned __int16 *)((char *)v15 - *v15);
            if (*v16 >= 7u)
            {
              unsigned __int16 v17 = v16[3];
              if (v17)
              {
                unint64_t v18 = *(void *)((char *)v15 + v17);
                if (HIDWORD(v18)) {
                  break;
                }
              }
            }
          }
        }
      }
    }
    unsigned int v19 = sub_511FC(v6);
    unsigned int v20 = v19 >> 1;
    unsigned int v21 = sub_511FC(v6) >> 1;
    if (v19 > 0x1D || v21 > v20)
    {
      int __key = 0;
      uint64_t v44 = 0;
      long long v45 = 0;
    }
    else
    {
      unsigned int v23 = 2 * (v20 - (sub_511FC(v6) >> 1));
      unsigned int v24 = v23 + 2;
      uint64_t v25 = (1 << (v23 + 2));
      int v26 = (unsigned int *)operator new(4 * v25);
      int __key = v26;
      long long v45 = &v26[v25];
      bzero(v26, 4 * v25);
      uint64_t v44 = &v26[v25];
      unsigned int v27 = v6 << v24;
      if (v24 < 3) {
        goto LABEL_47;
      }
      int32x4_t v28 = vdupq_n_s32(v27);
      int32x4_t v29 = vdupq_n_s32(v27 + 4);
      long long v30 = (int32x4_t *)(v26 + 4);
      uint64_t v31 = v25 & 0x55555550;
      int32x4_t v32 = (int32x4_t)xmmword_20B5E90;
      v33.i64[0] = 0x800000008;
      v33.i64[1] = 0x800000008;
      do
      {
        v30[-1] = vaddq_s32(v28, v32);
        *long long v30 = vaddq_s32(v29, v32);
        int32x4_t v32 = vaddq_s32(v32, v33);
        v30 += 2;
        v31 -= 8;
      }
      while (v31);
      if ((v25 & 0x55555550) == 0)
      {
LABEL_47:
        do
        {
          *v26++ = v27++;
          LODWORD(v25) = v25 - 1;
        }
        while (v25);
      }
    }
    v42[0] = (uint64_t)&v49;
    v42[1] = (uint64_t)a1;
    sub_2A352C(&__key, __p, v42);
    if (__key)
    {
      uint64_t v44 = __key;
      operator delete(__key);
    }
    uint64_t v5 = *((void *)&v48 + 1);
    if (!*((void *)&v48 + 1)) {
      goto LABEL_30;
    }
  }
  if (sub_2AB7E4(*a1)) {
    unint64_t v34 = v18 & 0xFFFFFFFF00000000 | (v18 >> 4);
  }
  else {
LABEL_30:
  }
    unint64_t v34 = 0xFFFFFFFFLL;
  unsigned int v35 = (void **)__p[1];
  uint64_t v36 = (void **)v47;
  *((void *)&v48 + 1) = 0;
  unint64_t v37 = v47 - (unint64_t)__p[1];
  if ((unint64_t)v47 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v35);
      uint64_t v36 = (void **)v47;
      unsigned int v35 = (void **)((char *)__p[1] + 8);
      __p[1] = v35;
      unint64_t v37 = v47 - (void)v35;
    }
    while ((void)v47 - (void)v35 > 0x10uLL);
  }
  unint64_t v38 = v37 >> 3;
  if (v38 == 1)
  {
    uint64_t v39 = 512;
  }
  else
  {
    if (v38 != 2) {
      goto LABEL_38;
    }
    uint64_t v39 = 1024;
  }
  *(void *)&long long v48 = v39;
LABEL_38:
  if (v35 != v36)
  {
    do
    {
      unint64_t v40 = *v35++;
      operator delete(v40);
    }
    while (v35 != v36);
    if ((void *)v47 != __p[1]) {
      *(void *)&long long v47 = v47 + (((unint64_t)__p[1] - v47 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return v34;
}

void sub_2A3094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2A4918((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2A30A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19)
{
  if (a19 == a18)
  {
    unsigned int v20 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    unsigned int v20 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

void sub_2A30F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
  {
    operator delete(__p);
    sub_2A4918((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  sub_2A4918((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_2A313C(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  if (!*a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v46 = a3;
  LODWORD(__key) = 1;
  *(_OWORD *)std::string __p = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  sub_2A3640(__p, (int *)&__key, 1uLL);
  uint64_t v5 = *((void *)&v45 + 1);
  if (!*((void *)&v45 + 1)) {
    goto LABEL_28;
  }
  while (1)
  {
    unsigned int v6 = *(_DWORD *)(*(void *)((char *)__p[1] + (((unint64_t)v45 >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * (v45 & 0x3FF));
    *(void *)&long long v45 = v45 + 1;
    *((void *)&v45 + 1) = v5 - 1;
    if ((unint64_t)v45 >= 0x800)
    {
      operator delete(*(void **)__p[1]);
      __p[1] = (char *)__p[1] + 8;
      *(void *)&long long v45 = v45 - 1024;
    }
    uint64_t v7 = (unsigned int *)sub_2AB884(*a1, 32, v6, 1);
    if (v8)
    {
      unint64_t v9 = (int *)((char *)v7 + *v7);
      uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
      if (*v10 >= 7u)
      {
        uint64_t v11 = v10[3];
        if (v11)
        {
          uint64_t v12 = (unsigned int *)((char *)v9 + v11);
          uint64_t v13 = *v12;
          int __key = a2;
          uint64_t v14 = bsearch(&__key, (char *)v12 + v13 + 4, *(unsigned int *)((char *)v12 + v13), 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_2A4AF4);
          if (v14)
          {
            unint64_t v15 = v14[1];
            if (HIDWORD(v15)) {
              break;
            }
          }
        }
      }
    }
    unsigned int v16 = sub_511FC(v6);
    unsigned int v17 = v16 >> 1;
    unsigned int v18 = sub_511FC(v6) >> 1;
    if (v16 > 0x1D || v18 > v17)
    {
      int __key = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
    }
    else
    {
      unsigned int v20 = 2 * (v17 - (sub_511FC(v6) >> 1));
      unsigned int v21 = v20 + 2;
      uint64_t v22 = (1 << (v20 + 2));
      unsigned int v23 = (unsigned int *)operator new(4 * v22);
      int __key = v23;
      uint64_t v42 = &v23[v22];
      bzero(v23, 4 * v22);
      uint64_t v41 = &v23[v22];
      unsigned int v24 = v6 << v21;
      if (v21 < 3) {
        goto LABEL_45;
      }
      int32x4_t v25 = vdupq_n_s32(v24);
      int32x4_t v26 = vdupq_n_s32(v24 + 4);
      unsigned int v27 = (int32x4_t *)(v23 + 4);
      uint64_t v28 = v22 & 0x55555550;
      int32x4_t v29 = (int32x4_t)xmmword_20B5E90;
      v30.i64[0] = 0x800000008;
      v30.i64[1] = 0x800000008;
      do
      {
        v27[-1] = vaddq_s32(v25, v29);
        *unsigned int v27 = vaddq_s32(v26, v29);
        int32x4_t v29 = vaddq_s32(v29, v30);
        v27 += 2;
        v28 -= 8;
      }
      while (v28);
      if ((v22 & 0x55555550) == 0)
      {
LABEL_45:
        do
        {
          *v23++ = v24++;
          LODWORD(v22) = v22 - 1;
        }
        while (v22);
      }
    }
    v39[0] = (uint64_t)&v46;
    v39[1] = (uint64_t)a1;
    sub_2A49E0(&__key, __p, v39);
    if (__key)
    {
      uint64_t v41 = __key;
      operator delete(__key);
    }
    uint64_t v5 = *((void *)&v45 + 1);
    if (!*((void *)&v45 + 1)) {
      goto LABEL_28;
    }
  }
  if (sub_2AB7E4(*a1)) {
    unint64_t v31 = v15 & 0xFFFFFFFF00000000 | (v15 >> 4);
  }
  else {
LABEL_28:
  }
    unint64_t v31 = 0xFFFFFFFFLL;
  int32x4_t v32 = (void **)__p[1];
  int32x4_t v33 = (void **)v44;
  *((void *)&v45 + 1) = 0;
  unint64_t v34 = v44 - (unint64_t)__p[1];
  if ((unint64_t)v44 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v32);
      int32x4_t v33 = (void **)v44;
      int32x4_t v32 = (void **)((char *)__p[1] + 8);
      __p[1] = v32;
      unint64_t v34 = v44 - (void)v32;
    }
    while ((void)v44 - (void)v32 > 0x10uLL);
  }
  unint64_t v35 = v34 >> 3;
  if (v35 == 1)
  {
    uint64_t v36 = 512;
  }
  else
  {
    if (v35 != 2) {
      goto LABEL_36;
    }
    uint64_t v36 = 1024;
  }
  *(void *)&long long v45 = v36;
LABEL_36:
  if (v32 != v33)
  {
    do
    {
      unint64_t v37 = *v32++;
      operator delete(v37);
    }
    while (v32 != v33);
    if ((void *)v44 != __p[1]) {
      *(void *)&long long v44 = v44 + (((unint64_t)__p[1] - v44 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return v31;
}

void sub_2A3484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2A4918((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2A3498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19)
{
  if (a19 == a18)
  {
    unsigned int v20 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    unsigned int v20 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

void sub_2A34E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
  {
    operator delete(__p);
    sub_2A4918((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  sub_2A4918((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void *sub_2A352C(unsigned int **a1, void *a2, uint64_t *a3)
{
  int v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = (uint64_t *)a3[1];
    do
    {
      unsigned int v8 = *v4;
      if (sub_2A41E0(v6, *v4))
      {
        unint64_t v9 = (unsigned int *)sub_2AB884(*v7, 32, v8, 1);
        if (v10)
        {
          uint64_t v11 = (int *)((char *)v9 + *v9);
          uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
          if (*v12 >= 5u)
          {
            uint64_t v13 = v12[2];
            if (v13)
            {
              if (*((unsigned char *)v11 + v13))
              {
                uint64_t v14 = a2[2];
                uint64_t v15 = a2[1];
                if (v14 == v15) {
                  uint64_t v16 = 0;
                }
                else {
                  uint64_t v16 = ((v14 - v15) << 7) - 1;
                }
                uint64_t v17 = a2[5];
                unint64_t v18 = v17 + a2[4];
                if (v16 == v18)
                {
                  sub_2A4348((uint64_t)a2);
                  uint64_t v15 = a2[1];
                  uint64_t v17 = a2[5];
                  unint64_t v18 = a2[4] + v17;
                }
                *(_DWORD *)(*(void *)(v15 + ((v18 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v18 & 0x3FF)) = *v4;
                a2[5] = v17 + 1;
              }
            }
          }
        }
      }
      ++v4;
    }
    while (v4 != v5);
  }
  return a2;
}

void sub_2A3640(void *a1, int *a2, unint64_t a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = ((v7 - v6) << 7) - 1;
  }
  uint64_t v9 = a1[5];
  unint64_t v10 = v9 + a1[4];
  unint64_t v11 = v8 - v10;
  if (a3 > v11)
  {
    sub_2A3808((uint64_t)a1, a3 - v11);
    uint64_t v9 = a1[5];
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
    unint64_t v10 = a1[4] + v9;
  }
  uint64_t v12 = (void *)(v6 + 8 * (v10 >> 10));
  if (v7 == v6)
  {
    uint64_t v13 = 0;
    if (!a3) {
      return;
    }
  }
  else
  {
    uint64_t v13 = *v12 + 4 * (v10 & 0x3FF);
    if (!a3) {
      return;
    }
  }
  uint64_t v14 = a3 + ((v13 - *v12) >> 2);
  if (v14 < 1)
  {
    unint64_t v16 = 1023 - v14;
    LOWORD(v14) = ~(1023 - v14);
    uint64_t v15 = &v12[-(v16 >> 10)];
  }
  else
  {
    uint64_t v15 = &v12[(unint64_t)v14 >> 10];
  }
  uint64_t v17 = *v15 + 4 * (v14 & 0x3FF);
  if (v13 != v17)
  {
    while (1)
    {
      uint64_t v18 = v17;
      if (v12 != v15) {
        uint64_t v18 = *v12 + 4096;
      }
      if (v13 == v18)
      {
        uint64_t v18 = v13;
        uint64_t v22 = a2;
      }
      else
      {
        unint64_t v19 = v18 - v13 - 4;
        if (v19 < 0x1C || (unint64_t)(v13 - (void)a2) < 0x20)
        {
          uint64_t v22 = a2;
          unsigned int v23 = (_DWORD *)v13;
        }
        else
        {
          uint64_t v20 = (v19 >> 2) + 1;
          uint64_t v21 = v20 & 0x7FFFFFFFFFFFFFF8;
          uint64_t v22 = &a2[v21];
          unsigned int v23 = (_DWORD *)(v13 + v21 * 4);
          unsigned int v24 = (_OWORD *)(v13 + 16);
          int32x4_t v25 = (long long *)(a2 + 4);
          uint64_t v26 = v20 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v27 = *v25;
            *(v24 - 1) = *(v25 - 1);
            *unsigned int v24 = v27;
            v24 += 2;
            v25 += 2;
            v26 -= 8;
          }
          while (v26);
          if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_26;
          }
        }
        do
        {
          int v28 = *v22++;
          *v23++ = v28;
        }
        while (v23 != (_DWORD *)v18);
      }
LABEL_26:
      v9 += (v18 - v13) >> 2;
      if (v12 != v15)
      {
        uint64_t v29 = v12[1];
        ++v12;
        uint64_t v13 = v29;
        a2 = v22;
        if (v29 != v17) {
          continue;
        }
      }
      a1[5] = v9;
      return;
    }
  }
}

void sub_2A3808(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(char **)(a1 + 16);
  uint64_t v4 = (uint64_t)&v3[-*(void *)(a1 + 8)];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x3FF) != 0) {
    unint64_t v6 = (v5 >> 10) + 1;
  }
  else {
    unint64_t v6 = v5 >> 10;
  }
  unint64_t v7 = *(void *)(a1 + 32);
  if (v6 >= v7 >> 10) {
    unint64_t v8 = v7 >> 10;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 10)
  {
    *(void *)(a1 + 32) = v7 - (v8 << 10);
    if (!v8) {
      return;
    }
    while (1)
    {
      uint64_t v15 = *(void **)(a1 + 8);
      unint64_t v16 = (char *)(v15 + 1);
      uint64_t v17 = *v15;
      *(void *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        uint64_t v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(void *)a1)
        {
          unint64_t v24 = (v3 - v18) >> 2;
          if (v3 == v18) {
            unint64_t v24 = 1;
          }
          if (v24 >> 61) {
            goto LABEL_161;
          }
          unint64_t v25 = v24 >> 2;
          uint64_t v26 = 8 * v24;
          long long v27 = (char *)operator new(8 * v24);
          int v28 = &v27[8 * v25];
          int64_t v30 = v3 - v16;
          BOOL v29 = v3 == v16;
          uint64_t v3 = v28;
          if (!v29)
          {
            uint64_t v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              int32x4_t v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            int32x4_t v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20) {
              goto LABEL_167;
            }
            uint64_t v33 = (v31 >> 3) + 1;
            uint64_t v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            int32x4_t v32 = &v28[v34];
            v16 += v34;
            unint64_t v35 = (long long *)(v15 + 3);
            uint64_t v36 = &v27[8 * v25 + 16];
            uint64_t v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)uint64_t v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
LABEL_39:
                uint64_t v39 = *(void *)v16;
                v16 += 8;
                *(void *)int32x4_t v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(void *)a1 = v27;
          *(void *)(a1 + 8) = v28;
          *(void *)(a1 + 16) = v3;
          *(void *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            uint64_t v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        uint64_t v19 = (uint64_t)&v16[-*(void *)a1] >> 3;
        if (v19 >= -1) {
          uint64_t v20 = v19 + 1;
        }
        else {
          uint64_t v20 = v19 + 2;
        }
        uint64_t v21 = v20 >> 1;
        uint64_t v22 = &v16[-8 * (v20 >> 1)];
        int64_t v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          uint64_t v3 = *(char **)(a1 + 8);
        }
        uint64_t v14 = &v3[-8 * v21];
        uint64_t v3 = &v22[v23];
        *(void *)(a1 + 8) = v14;
        *(void *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(void *)uint64_t v3 = v17;
      uint64_t v3 = (char *)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v3;
      if (!--v8) {
        return;
      }
    }
  }
  unint64_t v9 = v6 - v8;
  uint64_t v10 = *(void *)(a1 + 24) - *(void *)a1;
  uint64_t v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(void *)(a1 + 24) != *(void *)(a1 + 16))
      {
        v145 = operator new(0x1000uLL);
        sub_22368((char **)a1, &v145);
        --v6;
        if (!--v9) {
          goto LABEL_136;
        }
      }
      for (uint64_t i = 0; i != v9; ++i)
      {
        v145 = operator new(0x1000uLL);
        sub_224F8((void **)a1, &v145);
        if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
          uint64_t v116 = 1023;
        }
        else {
          uint64_t v116 = 1024;
        }
        uint64_t v117 = v116 + *(void *)(a1 + 32);
        *(void *)(a1 + 32) = v117;
      }
      unint64_t v8 = v6;
      *(void *)(a1 + 32) = v117 - (v6 << 10);
      if (!v6) {
        return;
      }
    }
    else
    {
LABEL_136:
      *(void *)(a1 + 32) -= v8 << 10;
      if (!v8) {
        return;
      }
    }
    v118 = *(char **)(a1 + 16);
    while (1)
    {
      uint64_t v120 = *(void **)(a1 + 8);
      uint64_t v121 = (char *)(v120 + 1);
      uint64_t v122 = *v120;
      *(void *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        uint64_t v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(void *)a1)
        {
          unint64_t v129 = (v118 - v123) >> 2;
          if (v118 == v123) {
            unint64_t v129 = 1;
          }
          if (v129 >> 61) {
            goto LABEL_161;
          }
          unint64_t v130 = v129 >> 2;
          uint64_t v131 = 8 * v129;
          uint64_t v132 = (char *)operator new(8 * v129);
          long long v133 = &v132[8 * v130];
          int64_t v134 = v118 - v121;
          BOOL v29 = v118 == v121;
          v118 = v133;
          if (!v29)
          {
            v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              unint64_t v136 = &v132[8 * v130];
              goto LABEL_157;
            }
            unint64_t v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20) {
              goto LABEL_168;
            }
            uint64_t v137 = (v135 >> 3) + 1;
            uint64_t v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v136 = &v133[v138];
            v121 += v138;
            v139 = (long long *)(v120 + 3);
            uint64_t v140 = &v132[8 * v130 + 16];
            uint64_t v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)uint64_t v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_168:
              do
              {
LABEL_157:
                uint64_t v143 = *(void *)v121;
                v121 += 8;
                *(void *)unint64_t v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(void *)a1 = v132;
          *(void *)(a1 + 8) = v133;
          *(void *)(a1 + 16) = v118;
          *(void *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            v118 = *(char **)(a1 + 16);
          }
          goto LABEL_139;
        }
        uint64_t v124 = (uint64_t)&v121[-*(void *)a1] >> 3;
        if (v124 >= -1) {
          uint64_t v125 = v124 + 1;
        }
        else {
          uint64_t v125 = v124 + 2;
        }
        uint64_t v126 = v125 >> 1;
        unint64_t v127 = &v121[-8 * (v125 >> 1)];
        int64_t v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          v118 = *(char **)(a1 + 8);
        }
        uint64_t v119 = &v118[-8 * v126];
        v118 = &v127[v128];
        *(void *)(a1 + 8) = v119;
        *(void *)(a1 + 16) = &v127[v128];
      }
LABEL_139:
      *(void *)v118 = v122;
      v118 = (char *)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v118;
      if (!--v8) {
        return;
      }
    }
  }
  if (v10 >> 2 <= v9 + v11) {
    unint64_t v12 = v9 + v11;
  }
  else {
    unint64_t v12 = v10 >> 2;
  }
  if (v12)
  {
    if (v12 >> 61) {
LABEL_161:
    }
      sub_188D718();
    uint64_t v13 = (char *)operator new(8 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v144 = v8 << 10;
  unint64_t v40 = &v13[8 * (v11 - v8)];
  uint64_t v41 = &v13[8 * v12];
  uint64_t v42 = v40;
  uint64_t v43 = v13;
  do
  {
    long long v44 = operator new(0x1000uLL);
    if (v42 != v41) {
      goto LABEL_49;
    }
    if (v40 > v43)
    {
      long long v45 = v43;
      uint64_t v46 = (v40 - v43) >> 3;
      if (v46 >= -1) {
        uint64_t v47 = v46 + 1;
      }
      else {
        uint64_t v47 = v46 + 2;
      }
      uint64_t v48 = v47 >> 1;
      uint64_t v49 = &v40[-8 * (v47 >> 1)];
      uint64_t v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        uint64_t v50 = v40;
      }
      uint64_t v42 = &v49[v41 - v40];
      unint64_t v40 = &v50[-8 * v48];
      uint64_t v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43) {
      unint64_t v51 = 1;
    }
    else {
      unint64_t v51 = (v41 - v43) >> 2;
    }
    if (v51 >> 61) {
      sub_188D718();
    }
    uint64_t v52 = (char *)operator new(8 * v51);
    uint64_t v53 = v43;
    unint64_t v54 = v51 >> 2;
    uint64_t v55 = &v52[8 * (v51 >> 2)];
    uint64_t v42 = v55;
    int64_t v56 = v41 - v40;
    if (v41 != v40)
    {
      uint64_t v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v57 = v56 - 8;
      if (v57 >= 0x38 && (uint64_t v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        uint64_t v62 = (v57 >> 3) + 1;
        uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v59 = &v55[v63];
        uint64_t v60 = &v40[v63];
        long long v64 = (long long *)(v40 + 16);
        uint64_t v65 = &v52[v58 + 16];
        uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)uint64_t v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_66;
        }
      }
      else
      {
        uint64_t v59 = &v52[8 * (v51 >> 2)];
        uint64_t v60 = v40;
      }
      do
      {
        uint64_t v61 = *(void *)v60;
        v60 += 8;
        *(void *)uint64_t v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    uint64_t v41 = &v52[8 * v51];
    if (v53) {
      operator delete(v53);
    }
    unint64_t v40 = &v52[8 * (v51 >> 2)];
    uint64_t v43 = v52;
LABEL_49:
    *(void *)uint64_t v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  uint64_t v68 = *(void **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43) {
            unint64_t v78 = 1;
          }
          else {
            unint64_t v78 = (v41 - v43) >> 2;
          }
          if (v78 >> 61) {
            sub_188D718();
          }
          uint64_t v79 = (char *)operator new(8 * v78);
          uint64_t v80 = v79;
          unint64_t v81 = v78 >> 2;
          uint64_t v69 = &v79[8 * (v78 >> 2)];
          uint64_t v42 = v69;
          int64_t v82 = v41 - v40;
          if (v41 != v40)
          {
            uint64_t v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v83 = v82 - 8;
            if (v83 < 0x38 || (uint64_t v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              uint64_t v85 = &v79[8 * (v78 >> 2)];
              long long v86 = v40;
              goto LABEL_98;
            }
            uint64_t v88 = (v83 >> 3) + 1;
            uint64_t v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v85 = &v69[v89];
            long long v86 = &v40[v89];
            int64_t v90 = (long long *)(v40 + 16);
            int64_t v91 = &v79[v84 + 16];
            uint64_t v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)int64_t v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_98:
                uint64_t v87 = *(void *)v86;
                v86 += 8;
                *(void *)uint64_t v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          uint64_t v41 = &v79[8 * v78];
          if (v43) {
            operator delete(v43);
          }
          uint64_t v43 = v80;
          goto LABEL_81;
        }
        long long v72 = v43;
        uint64_t v73 = (v40 - v43) >> 3;
        if (v73 >= -1) {
          uint64_t v74 = v73 + 1;
        }
        else {
          uint64_t v74 = v73 + 2;
        }
        uint64_t v75 = v74 >> 1;
        uint64_t v76 = &v40[-8 * (v74 >> 1)];
        char v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          char v77 = v40;
        }
        uint64_t v42 = &v76[v41 - v40];
        uint64_t v69 = &v77[-8 * v75];
        uint64_t v43 = v72;
      }
      else
      {
        uint64_t v69 = v40;
      }
LABEL_81:
      *(void *)uint64_t v42 = *v68;
      v42 += 8;
      uint64_t v68 = (void *)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v68;
      unint64_t v40 = v69;
      if (!--v8) {
        goto LABEL_75;
      }
    }
  }
  uint64_t v69 = v40;
LABEL_75:
  uint64_t v70 = *(void **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43) {
            unint64_t v100 = 1;
          }
          else {
            unint64_t v100 = (v41 - v43) >> 2;
          }
          if (v100 >> 61) {
            sub_188D718();
          }
          char v101 = (char *)operator new(8 * v100);
          uint64_t v97 = v101;
          unint64_t v102 = (v100 + 3) >> 2;
          uint64_t v69 = &v101[8 * v102];
          int64_t v103 = v42 - v43;
          BOOL v29 = v42 == v43;
          uint64_t v42 = v69;
          if (!v29)
          {
            uint64_t v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v104 = v103 - 8;
            uint64_t v105 = &v101[8 * v102];
            long long v106 = v43;
            if (v104 < 0x38) {
              goto LABEL_169;
            }
            uint64_t v107 = 8 * v102;
            uint64_t v105 = &v101[8 * v102];
            long long v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20) {
              goto LABEL_169;
            }
            uint64_t v108 = (v104 >> 3) + 1;
            uint64_t v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v105 = &v69[v109];
            long long v106 = &v43[v109];
            uint64_t v110 = (long long *)(v43 + 16);
            uint64_t v111 = &v101[v107 + 16];
            uint64_t v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)uint64_t v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_169:
              do
              {
                uint64_t v114 = *(void *)v106;
                v106 += 8;
                *(void *)uint64_t v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          uint64_t v41 = &v101[8 * v100];
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          uint64_t v95 = (v41 - v42) >> 3;
          if (v95 >= -1) {
            uint64_t v96 = v95 + 1;
          }
          else {
            uint64_t v96 = v95 + 2;
          }
          uint64_t v97 = v43;
          uint64_t v98 = v96 >> 1;
          uint64_t v69 = &v97[8 * (v96 >> 1)];
          uint64_t v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            uint64_t v99 = v42;
          }
          uint64_t v42 = &v99[8 * v98];
        }
        uint64_t v43 = v97;
      }
      uint64_t v94 = *--v70;
      *((void *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(void **)(a1 + 8));
  }
  long long v71 = *(char **)a1;
  *(void *)a1 = v43;
  *(void *)(a1 + 8) = v69;
  *(void *)(a1 + 16) = v42;
  *(void *)(a1 + 24) = v41;
  *(void *)(a1 + 32) -= v144;
  if (v71)
  {
    operator delete(v71);
  }
}

void sub_2A4108(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2A4154()
{
}

uint64_t sub_2A4174(const char **a1, unsigned int *a2)
{
  uint64_t v2 = (char *)a2 + *a2;
  uint64_t v3 = *a1;
  uint64_t v4 = &v2[-*(int *)v2];
  if (*(unsigned __int16 *)v4 >= 5u && (uint64_t v5 = *((unsigned __int16 *)v4 + 2)) != 0) {
    return -strcmp(&v2[v5 + 4 + *(unsigned int *)&v2[v5]], v3);
  }
  else {
    return -strcmp((const char *)dword_4, v3);
  }
}

uint64_t sub_2A41E0(uint64_t a1, unsigned int a2)
{
  unsigned int v21 = a2;
  if (!a2 || **(_DWORD **)a1 == -1 && *(_DWORD *)(*(void *)a1 + 4) == -1) {
    return 1;
  }
  uint64_t v4 = sub_73724(6u);
  unsigned int v5 = sub_511FC(a2);
  unsigned int v7 = *((_DWORD *)v4 + 1);
  int v6 = *((_DWORD *)v4 + 2);
  unint64_t v8 = operator new(4uLL);
  std::string __p = v8;
  _DWORD *v8 = a2;
  unint64_t v9 = v8 + 1;
  if (v7 < v5 >> 1) {
    int v10 = 1;
  }
  else {
    int v10 = v6;
  }
  int64_t v23 = v9;
  unint64_t v24 = v9;
  sub_29D0((unsigned int **)&__p, v10, &v19);
  if (__p)
  {
    int64_t v23 = __p;
    operator delete(__p);
  }
  sub_745A4((uint64_t)&v19, &v21);
  uint64_t v11 = v19;
  unint64_t v12 = v20;
  if (v19 == v20)
  {
    uint64_t v16 = 0;
    if (!v19) {
      return v16;
    }
LABEL_19:
    uint64_t v20 = v11;
    operator delete(v11);
    return v16;
  }
  uint64_t v13 = *(_DWORD **)a1;
  uint64_t v14 = v19 + 1;
  do
  {
    unsigned int v25 = *(v14 - 1);
    sub_383CC(&v25, (uint64_t)&__p);
    uint64_t v15 = sub_34554(&__p, v13);
    uint64_t v16 = v15;
    if (v14 == v12) {
      int v17 = 1;
    }
    else {
      int v17 = v15;
    }
    ++v14;
  }
  while (v17 != 1);
  uint64_t v11 = v19;
  if (v19) {
    goto LABEL_19;
  }
  return v16;
}

void sub_2A4314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2A4348(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    int v6 = *(void **)(a1 + 8);
    unsigned int v5 = *(char **)(a1 + 16);
    unsigned int v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)unsigned int v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    unint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        uint64_t v34 = (char *)operator new(8 * v31);
        unint64_t v35 = &v34[8 * v32];
        uint64_t v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        unsigned int v5 = v35;
        if (!v37)
        {
          unsigned int v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            uint64_t v74 = &v34[8 * v32];
            unint64_t v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v40 = &v35[v76];
              v7 += v76;
              char v77 = (long long *)(v6 + 3);
              unint64_t v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *unint64_t v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            unint64_t v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_188D718();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    uint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unsigned int v7 = *(char **)(a1 + 8);
    }
    unsigned int v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      int64_t v91 = operator new(0x1000uLL);
      sub_22368((char **)a1, &v91);
      return;
    }
    int64_t v91 = operator new(0x1000uLL);
    sub_224F8((void **)a1, &v91);
    uint64_t v41 = *(void **)(a1 + 8);
    unsigned int v5 = *(char **)(a1 + 16);
    unsigned int v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    unint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        uint64_t v34 = (char *)operator new(8 * v42);
        unint64_t v35 = &v34[8 * v43];
        uint64_t v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        unsigned int v5 = v35;
        if (!v37)
        {
          unsigned int v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            int64_t v82 = &v34[8 * v43];
            uint64_t v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v47 = &v35[v84];
              v7 += v84;
              uint64_t v85 = (long long *)(v41 + 3);
              long long v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                _OWORD *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            uint64_t v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          unsigned int v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  unsigned int v25 = (char *)operator new(8 * v24);
  uint64_t v26 = operator new(0x1000uLL);
  long long v27 = &v25[8 * v21];
  int v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    int64_t v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_188D718();
      }
      uint64_t v49 = (char *)operator new(8 * v48);
      long long v27 = &v49[8 * (v48 >> 2)];
      int v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      unsigned int v25 = v49;
      *(void *)long long v27 = v90;
      BOOL v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)long long v27 = v26;
      BOOL v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_188D718();
          }
          uint64_t v60 = (char *)operator new(8 * v59);
          unsigned int v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          uint64_t v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          BOOL v29 = v53;
          if (!v37)
          {
            BOOL v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            long long v64 = &v60[8 * v61];
            uint64_t v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            long long v64 = &v60[8 * v61];
            uint64_t v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            long long v64 = &v53[v68];
            uint64_t v65 = &v27[v68];
            uint64_t v69 = (long long *)(v27 + 16);
            uint64_t v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)uint64_t v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)long long v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          int v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          unint64_t v57 = &v29[8 * (v56 >> 1)];
          uint64_t v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          BOOL v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          unsigned int v25 = v27;
        }
      }
      else
      {
        uint64_t v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      unint64_t v51 = v53 - 8;
      long long v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)long long v27 = v26;
  BOOL v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  unint64_t v51 = v27;
LABEL_46:
  uint64_t v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_2A48B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_2A48D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2A48E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2A4900(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2A4918(uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  BOOL v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 1024;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      unsigned int v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_2A49E0(unsigned int **a1, void *a2, uint64_t *a3)
{
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    uint64_t v6 = *a3;
    unsigned int v7 = (uint64_t *)a3[1];
    do
    {
      unsigned int v8 = *v4;
      if (sub_2A4B10(v6, *v4))
      {
        uint64_t v9 = (unsigned int *)sub_2AB884(*v7, 32, v8, 1);
        if (v10)
        {
          uint64_t v11 = (int *)((char *)v9 + *v9);
          uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
          if (*v12 >= 5u)
          {
            uint64_t v13 = v12[2];
            if (v13)
            {
              if (*((unsigned char *)v11 + v13))
              {
                uint64_t v14 = a2[2];
                uint64_t v15 = a2[1];
                if (v14 == v15) {
                  uint64_t v16 = 0;
                }
                else {
                  uint64_t v16 = ((v14 - v15) << 7) - 1;
                }
                uint64_t v17 = a2[5];
                unint64_t v18 = v17 + a2[4];
                if (v16 == v18)
                {
                  sub_2A4348((uint64_t)a2);
                  uint64_t v15 = a2[1];
                  uint64_t v17 = a2[5];
                  unint64_t v18 = a2[4] + v17;
                }
                *(_DWORD *)(*(void *)(v15 + ((v18 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v18 & 0x3FF)) = *v4;
                a2[5] = v17 + 1;
              }
            }
          }
        }
      }
      ++v4;
    }
    while (v4 != v5);
  }
  return a2;
}

uint64_t sub_2A4AF4(void *a1, void *a2)
{
  return (*a2 < *a1) - (*a2 > *a1);
}

uint64_t sub_2A4B10(uint64_t a1, unsigned int a2)
{
  unsigned int v21 = a2;
  if (!a2 || **(_DWORD **)a1 == -1 && *(_DWORD *)(*(void *)a1 + 4) == -1) {
    return 1;
  }
  unint64_t v4 = sub_73724(6u);
  unsigned int v5 = sub_511FC(a2);
  unsigned int v7 = *((_DWORD *)v4 + 1);
  int v6 = *((_DWORD *)v4 + 2);
  unsigned int v8 = operator new(4uLL);
  std::string __p = v8;
  _DWORD *v8 = a2;
  uint64_t v9 = v8 + 1;
  if (v7 < v5 >> 1) {
    int v10 = 1;
  }
  else {
    int v10 = v6;
  }
  uint64_t v23 = v9;
  unint64_t v24 = v9;
  sub_29D0((unsigned int **)&__p, v10, &v19);
  if (__p)
  {
    uint64_t v23 = __p;
    operator delete(__p);
  }
  sub_745A4((uint64_t)&v19, &v21);
  uint64_t v11 = v19;
  uint64_t v12 = v20;
  if (v19 == v20)
  {
    uint64_t v16 = 0;
    if (!v19) {
      return v16;
    }
LABEL_19:
    uint64_t v20 = v11;
    operator delete(v11);
    return v16;
  }
  uint64_t v13 = *(_DWORD **)a1;
  uint64_t v14 = v19 + 1;
  do
  {
    unsigned int v25 = *(v14 - 1);
    sub_383CC(&v25, (uint64_t)&__p);
    uint64_t v15 = sub_34554(&__p, v13);
    uint64_t v16 = v15;
    if (v14 == v12) {
      int v17 = 1;
    }
    else {
      int v17 = v15;
    }
    ++v14;
  }
  while (v17 != 1);
  uint64_t v11 = v19;
  if (v19) {
    goto LABEL_19;
  }
  return v16;
}

void sub_2A4C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2A4C78(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v4 = (int *)sub_2A4F60(a1, a2, 0, "payment_method");
  BOOL v5 = 0;
  int v6 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v6 >= 0xDu)
  {
    uint64_t v7 = v6[6];
    if (!v6[6]) {
      return 0;
    }
    unsigned int v8 = v4;
    uint64_t v9 = *(unsigned int *)((char *)v4 + v7);
    int v10 = (int *)((char *)v4 + v7 + v9);
    uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
    unsigned int v12 = *v11;
    if (v12 < 5) {
      return 0;
    }
    if (v11[2])
    {
      BOOL v5 = *((unsigned __int8 *)v10 + v11[2]) != 0;
      if (v12 < 7) {
        return v5;
      }
    }
    else
    {
      BOOL v5 = 0;
      if (v12 < 7) {
        return v5;
      }
    }
    uint64_t v14 = v11[3];
    if (v11[3])
    {
      uint64_t v15 = *(unsigned int *)((char *)v10 + v14 + *(unsigned int *)((char *)v10 + v14));
      if (v15)
      {
        uint64_t v34 = *(unsigned int *)((char *)v10 + v14);
        uint64_t v16 = (char *)operator new(8 * v15);
        uint64_t v17 = 0;
        int64_t v38 = v16;
        unint64_t v39 = v16;
        unint64_t v40 = &v16[8 * v15];
        uint64_t v18 = 4 * v15;
        uint64_t v19 = (char *)v8 + v14 + v9 + v7 + v34;
        do
        {
          uint64_t v20 = *(unsigned int *)&v19[v17 + 4];
          unsigned int v21 = &v19[v17 + v20 - *(int *)&v19[v17 + 4 + v20]];
          if (*((unsigned __int16 *)v21 + 2) >= 5u && (uint64_t v22 = *((unsigned __int16 *)v21 + 4)) != 0) {
            uint64_t v23 = &v19[v17 + 4 + v20 + v22 + *(unsigned int *)&v19[v17 + 4 + v20 + v22]];
          }
          else {
            uint64_t v23 = 0;
          }
          v35[0] = sub_2A56E0(v23);
          uint64_t v16 = sub_2A5934((unint64_t *)&v38, v16, v35) + 8;
          v17 += 4;
        }
        while (v18 != v17);
        unint64_t v24 = v38;
        unsigned int v25 = v39;
        if (v38 != v39)
        {
          uint64_t v26 = (char *)operator new(4uLL);
          *(_DWORD *)uint64_t v26 = a3;
          uint64_t v27 = sub_65800();
          int64_t v38 = v26;
          unint64_t v39 = v26 + 4;
          LODWORD(v40) = 4;
          uint64_t v41 = 1;
          v35[0] = v24;
          v35[1] = v25;
          int v36 = 2;
          uint64_t v37 = (v25 - v24) >> 3;
          unint64_t v28 = (*(uint64_t (**)(uint64_t, char **, void *))(*(void *)v27 + 40))(v27, &v38, v35);
          if (!(v28 >> 31))
          {
            BOOL v29 = (unsigned __int16 *)((char *)v10 - *v10);
            if (*v29 < 7u)
            {
              uint64_t v30 = 0;
            }
            else
            {
              uint64_t v30 = v29[3];
              if (v30) {
                v30 += (uint64_t)v10 + *(unsigned int *)((char *)v10 + v30);
              }
            }
            unint64_t v31 = (int *)(v30 + 4 * v28 + 4 + *(unsigned int *)(v30 + 4 * v28 + 4));
            unint64_t v32 = (unsigned __int16 *)((char *)v31 - *v31);
            BOOL v5 = *v32 >= 7u && (v33 = v32[3]) != 0 && *((unsigned __int8 *)v31 + v33) != 0;
          }
          operator delete(v26);
        }
        if (v24) {
          operator delete(v24);
        }
      }
    }
  }
  return v5;
}

void sub_2A4F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (v16) {
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2A4F60(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v61.__r_.__value_.__l.__data_) = a2;
  LODWORD(v60.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v62 = &v60;
  *((void *)&v62 + 1) = &v61;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_38;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 592) == a2)
  {
    unsigned int v12 = 24;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 616) == a2)
  {
    unsigned int v12 = 25;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 640) == a2)
  {
    unsigned int v12 = 26;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 664) == a2)
  {
    unsigned int v12 = 27;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    uint64_t v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_38:
    sub_2A54B4((int **)&v62);
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 648);
  unint64_t v21 = *(void *)(a1 + 624);
  if (*(void *)(a1 + 600) >= v9)
  {
    int v22 = 0;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 600);
    int v22 = 24;
  }
  BOOL v23 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 624);
  }
  int v24 = 25;
  if (v23) {
    int v24 = v22;
  }
  if (v20 >= v9) {
    unint64_t v25 = v9;
  }
  else {
    unint64_t v25 = *(void *)(a1 + 648);
  }
  unint64_t v26 = *(void *)(a1 + 672);
  if (v20 >= v9) {
    int v27 = v24;
  }
  else {
    int v27 = 26;
  }
  uint64_t v14 = (unsigned int *)sub_2AB884(v10, 6, a2, 1);
  unsigned int v28 = 27;
  if (v26 >= v25) {
    unsigned int v28 = v27;
  }
  uint64_t v29 = v11 + 24 * v28;
  *(_DWORD *)uint64_t v29 = v61.__r_.__value_.__l.__data_;
  *(void *)(v29 + 8) = *(void *)(a1 + 3856);
  *(void *)(v29 + 16) = v14;
  if (!v14) {
    goto LABEL_38;
  }
LABEL_11:
  uint64_t v15 = (int *)((char *)v14 + *v14);
  uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0x31u)
  {
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[24];
    if (v17)
    {
      uint64_t v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v8) {
        return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        unint64_t v31 = a4;
        uint64_t v32 = (uint64_t)exception;
        sub_5E5C(&v55, v31);
        uint64_t v33 = std::string::insert(&v55, 0, "Failed to acquire entity \"");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        unint64_t v35 = std::string::append(&v56, "\" in quad node ");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v54, v6);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v54;
        }
        else {
          uint64_t v37 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v54.__r_.__value_.__l.__size_;
        }
        unint64_t v39 = std::string::append(&v57, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        uint64_t v41 = std::string::append(&v58, " at position ");
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v53, v8);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v43 = &v53;
        }
        else {
          unint64_t v43 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v44 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v44 = v53.__r_.__value_.__l.__size_;
        }
        int64_t v45 = std::string::append(&v59, (const std::string::value_type *)v43, v44);
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        uint64_t v47 = std::string::append(&v60, " on layer ");
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        uint64_t v49 = sub_736EC(6u);
        uint64_t v50 = std::string::append(&v61, v49);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        std::string::size_type v63 = v50->__r_.__value_.__r.__words[2];
        long long v62 = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        uint64_t v52 = (void *)sub_2F404(v32, &v62);
      }
      return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
    }
  }
  return 0;
}

void sub_2A52F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 137) < 0)
  {
    operator delete(*(void **)(v54 - 160));
    if ((*(char *)(v54 - 169) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 169) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 192));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

uint64_t sub_2A54B4(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      BOOL v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      uint64_t v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      unint64_t v9 = sub_736EC(6u);
      uint64_t v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unsigned int v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    uint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    uint64_t v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_2A560C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

uint64_t sub_2A56E0(char *__src)
{
  if (!__src) {
    return sub_1133208(0);
  }
  unint64_t v2 = __src + 4;
  size_t v3 = *(unsigned int *)__src;
  if (v3 >= 0x17)
  {
    if ((v3 | 7) == 0x17) {
      uint64_t v5 = (v3 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v5 = v3 | 7;
    }
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3;
    *(void *)&long long v22 = v5 - 0x7FFFFFFFFFFFFFFFLL;
    *(void *)&long long __dst = p_dst;
    goto LABEL_9;
  }
  BYTE7(v22) = *(_DWORD *)__src;
  p_dst = &__dst;
  if (v3) {
LABEL_9:
  }
    memcpy(p_dst, v2, v3);
  *((unsigned char *)p_dst + v3) = 0;
  if ((SBYTE7(v22) & 0x80u) == 0) {
    uint64_t v6 = BYTE7(v22);
  }
  else {
    uint64_t v6 = *((void *)&__dst + 1);
  }
  if ((SBYTE7(v22) & 0x80000000) == 0)
  {
    if (v6) {
      goto LABEL_15;
    }
    return sub_1133208(0);
  }
  operator delete((void *)__dst);
  if (!v6) {
    return sub_1133208(0);
  }
LABEL_15:
  size_t v7 = *(unsigned int *)__src;
  if (v7 >= 0x17)
  {
    if ((v7 | 7) == 0x17) {
      uint64_t v10 = (v7 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v10 = v7 | 7;
    }
    p_p = operator new(v10 + 1);
    size_t v18 = v7;
    uint64_t v19 = v10 - 0x7FFFFFFFFFFFFFFFLL;
    std::string __p = p_p;
    goto LABEL_24;
  }
  HIBYTE(v19) = v7;
  p_p = &__p;
  if (v7) {
LABEL_24:
  }
    memcpy(p_p, v2, v7);
  *((unsigned char *)p_p + v7) = 0;
  unint64_t v11 = HIBYTE(v19);
  unsigned int v12 = (unsigned __int8 *)__p;
  if (v19 >= 0) {
    uint64_t v13 = (unsigned __int8 *)&__p;
  }
  else {
    uint64_t v13 = (unsigned __int8 *)__p;
  }
  if (v19 < 0) {
    unint64_t v11 = v18;
  }
  if (v11 >= 0x1F) {
    uint64_t v14 = 31;
  }
  else {
    uint64_t v14 = v11;
  }
  if (v14)
  {
    if (v14 == 1)
    {
      unint64_t v15 = *v13;
      uint64_t v16 = 1;
    }
    else
    {
      if (v14 != 2)
      {
        sub_76DEC(v13, v14, (uint64_t)&__dst);
        goto LABEL_43;
      }
      if (v19 >= 0) {
        unsigned int v12 = (unsigned __int8 *)&__p;
      }
      unint64_t v15 = *v13 | ((unint64_t)v12[1] << 8);
      uint64_t v16 = 2;
    }
    *(void *)&long long __dst = v15;
    *((void *)&__dst + 1) = v16;
    long long v22 = 0u;
    long long v23 = 0u;
  }
  else
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long __dst = 0u;
  }
LABEL_43:
  uint64_t v20 = sub_1133038((uint64_t)&__dst, 0);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (sub_1132F10(&v20) == 1) {
    return sub_1133208(0);
  }
  else {
    return v20;
  }
}

void sub_2A590C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2A5934(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  unint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)unint64_t v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      uint64_t v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      unint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        uint64_t v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v13 = (uint64_t *)((char *)v13 + v21);
          uint64_t v19 = (void *)(v5 + v21);
          long long v22 = (_OWORD *)(v5 + 16);
          long long v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            _OWORD *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)unint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    uint64_t v30 = (char *)operator new(8 * v29);
    unint64_t v31 = &v30[8 * v8];
    uint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v30 = 0;
    unint64_t v31 = (char *)(8 * v8);
    uint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    uint64_t v54 = (char *)operator new(8 * v53);
    unint64_t v31 = &v54[8 * (v53 >> 2)];
    uint64_t v32 = &v54[8 * v53];
    if (v30)
    {
      std::string v55 = &v54[8 * v53];
      operator delete(v30);
      uint64_t v32 = v55;
      long long v34 = (char *)*a1;
      *(void *)unint64_t v31 = *a3;
      unint64_t v35 = v31 + 8;
      long long v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  long long v34 = (char *)v6;
  *(void *)unint64_t v31 = *a3;
  unint64_t v35 = v31 + 8;
  long long v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    unint64_t v39 = v9;
    long long v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    unint64_t v39 = v9;
    long long v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v39 = &v9[-v41];
    long long v36 = &v31[-v41];
    long long v42 = v31 - 16;
    unint64_t v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)long long v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  uint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = v47 - v9;
    long long v51 = v32;
    memmove(v35, v49, v50);
    uint64_t v32 = v51;
  }
  uint64_t v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_2A5C8C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2A5CA4(uint64_t a1, unint64_t a2)
{
  unint64_t v26 = a2;
  size_t v3 = sub_2A75D8(a1, a2, 1);
  if (!v3
    || (unint64_t v4 = &v3[-*(int *)v3], *(unsigned __int16 *)v4 < 5u)
    || (uint64_t v5 = *((unsigned __int16 *)v4 + 2)) == 0
    || (unint64_t v6 = &v3[v5 + *(unsigned int *)&v3[v5]], v7 = &v6[-*(int *)v6], *(unsigned __int16 *)v7 < 5u)
    || !*((_WORD *)v7 + 2)
    || (uint64_t v8 = &v6[*((unsigned __int16 *)v7 + 2) + *(unsigned int *)&v6[*((unsigned __int16 *)v7 + 2)]],
        *(_DWORD *)v8 <= HIDWORD(a2)))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_2A746C((unsigned int *)&v26, &v24);
    uint64_t v19 = std::string::insert(&v24, 0, "Referenced polygon ");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    uint64_t v21 = std::string::append(&v25, " does not exist.");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    uint64_t v28 = v21->__r_.__value_.__r.__words[2];
    long long v27 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    long long v23 = (void *)sub_2F404((uint64_t)exception, &v27);
  }
  unint64_t v9 = &v8[4 * HIDWORD(a2) + 4 + *(unsigned int *)&v8[4 * HIDWORD(a2) + 4]];
  unint64_t v10 = &v9[-*(int *)v9];
  if (*(unsigned __int16 *)v10 < 9u) {
    return 0;
  }
  uint64_t v11 = *((unsigned __int16 *)v10 + 4);
  if (!v11) {
    return 0;
  }
  unint64_t result = 0;
  uint64_t v13 = (unsigned int *)&v9[v11 + *(unsigned int *)&v9[v11]];
  unsigned int v16 = *v13;
  unint64_t v15 = v13 + 1;
  uint64_t v14 = v16;
  *((void *)&v27 + 1) = v16;
  uint64_t v28 = 0xF424000000040;
  int v29 = 257;
  *(void *)&long long v27 = v15;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  if (v16 < 0xC) {
    return result;
  }
  unint64_t v17 = *v15;
  if ((int)v17 < 1) {
    return 0;
  }
  if (v14 - 1 >= v17)
  {
    if (sub_2A7994((int *)((char *)v15 + v17), (uint64_t)&v27)) {
      return (char *)v15 + *v15;
    }
    return 0;
  }
  return 0;
}

void sub_2A5EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

BOOL sub_2A5F28(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = sub_2A5CA4(a1, a2);
  size_t v3 = &v2[-*(int *)v2];
  if (*(unsigned __int16 *)v3 < 7u) {
    return 0;
  }
  uint64_t v4 = *((unsigned __int16 *)v3 + 3);
  if (v4) {
    LODWORD(v4) = v2[v4];
  }
  return v4 == 4 || v4 == 9;
}

char *sub_2A5F84@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = sub_2A5CA4(a1, a2);
  uint64_t v5 = &result[-*(int *)result];
  if (*(unsigned __int16 *)v5 >= 9u
    && (uint64_t v6 = *((unsigned __int16 *)v5 + 4)) != 0
    && (uint64_t v7 = &result[v6 + *(unsigned int *)&result[v6]], v8 = *(unsigned int *)v7, v8))
  {
    uint64_t v9 = v8;
    unint64_t v10 = operator new(8 * v8);
    *(void *)&long long v14 = v10;
    *((void *)&v14 + 1) = v10;
    unint64_t v15 = &v10[v9];
    uint64_t v11 = (uint64_t *)(v7 + 4);
    do
    {
      uint64_t v16 = *v11;
      unint64_t result = sub_2A8034((unint64_t *)&v14, v10, &v16);
      unint64_t v10 = result + 8;
      ++v11;
      --v9;
    }
    while (v9 * 8);
    long long v12 = v14;
    uint64_t v13 = v15;
  }
  else
  {
    uint64_t v13 = 0;
    long long v12 = 0uLL;
  }
  *(_OWORD *)a3 = v12;
  *(void *)(a3 + 16) = v13;
  return result;
}

void sub_2A6048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2A6064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (*(void *)(*a4 + 24 * a3 + 8) - *(void *)(*a4 + 24 * a3) < 0x10uLL) {
    return 0;
  }
  uint64_t v7 = *a4 + 24 * a2;
  std::string __p = 0;
  *(void *)uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v8 = *(void **)v7;
  uint64_t v9 = *(void **)(v7 + 8);
  int64_t v10 = (int64_t)v9 - *(void *)v7;
  if (v9 == *(void **)v7)
  {
    uint64_t v16 = 0;
    unint64_t v15 = 0;
  }
  else
  {
    if (v10 < 0) {
      sub_2E00();
    }
    long long v12 = (char *)operator new((size_t)v9 - *(void *)v7);
    uint64_t v13 = &v12[8 * (v10 >> 3)];
    std::string __p = v12;
    uint64_t v47 = v13;
    memcpy(v12, v8, v10);
    *(void *)uint64_t v46 = v13;
    do
    {
      sub_2A5F84(a1, *v8, (uint64_t)&v42);
      long long v14 = v42;
      sub_2A83A4((uint64_t)&__p, *(uint64_t *)v46, v42, v43, (v43 - v42) >> 3);
      if (v14) {
        operator delete(v14);
      }
      ++v8;
    }
    while (v8 != v9);
    unint64_t v15 = (int8x16_t *)__p;
    uint64_t v16 = *(int8x16_t **)v46;
  }
  unint64_t v17 = 126 - 2 * __clz(((char *)v16 - (char *)v15) >> 3);
  if (v16 == v15) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = v17;
  }
  sub_2A875C(v15, v16, (uint64_t)&v42, v18, 1);
  long long v20 = (unsigned int *)__p;
  uint64_t v19 = *(void *)v46;
  if (__p == *(void **)v46)
  {
    uint64_t v19 = (uint64_t)__p;
  }
  else
  {
    uint64_t v21 = (char *)__p - 8;
    do
    {
      if (v21 + 4 == *(_DWORD **)v46) {
        goto LABEL_34;
      }
      int v22 = v21[2];
      v21 += 2;
      LODWORD(v23) = v21[2];
    }
    while (v22 != v23 || v21[1] != v21[3]);
    std::string v25 = v21 + 4;
    if (v21 + 4 == *(_DWORD **)v46)
    {
      unint64_t v26 = v21 + 2;
      if (v21 + 2 == *(_DWORD **)v46) {
        goto LABEL_34;
      }
      goto LABEL_33;
    }
    do
    {
      if (v23 != *v25 || v21[1] != v25[1])
      {
        uint64_t v23 = *(void *)v25;
        *((void *)v21 + 1) = *(void *)v25;
        v21 += 2;
      }
      v25 += 2;
    }
    while (v25 != (_DWORD *)v19);
    uint64_t v19 = *(void *)v46;
    unint64_t v26 = v21 + 2;
    if (v21 + 2 != *(_DWORD **)v46)
    {
LABEL_33:
      uint64_t v19 = (uint64_t)v26;
      *(void *)uint64_t v46 = v26;
    }
  }
LABEL_34:
  long long v42 = 0;
  unint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v28 = *a4;
  uint64_t v29 = *a4 + 24 * a3;
  uint64_t v30 = *(unsigned int **)v29;
  uint64_t v31 = *(unsigned int **)(v29 + 8);
  int64_t v48 = &v42;
  if (v30 == v31 || v20 == (unsigned int *)v19)
  {
    unint64_t v33 = 0;
    long long v34 = 0;
    goto LABEL_47;
  }
  do
  {
    unint64_t v35 = v30[1] | ((unint64_t)*v30 << 32);
    unint64_t v36 = v20[1] | ((unint64_t)*v20 << 32);
    if (v35 < v36)
    {
      v30 += 2;
      if (v30 == v31) {
        break;
      }
      continue;
    }
    if (v36 >= v35)
    {
      sub_2A98DC((void ***)&v48, v30);
      v30 += 2;
    }
    v20 += 2;
    if (v30 == v31) {
      break;
    }
  }
  while (v20 != (unsigned int *)v19);
  unint64_t v33 = v42;
  long long v34 = v43;
  uint64_t v28 = *a4;
LABEL_47:
  unint64_t v37 = (v34 - v33) >> 3;
  unint64_t v38 = (char **)(v28 + 24 * a3);
  uint64_t v40 = *v38;
  unint64_t v39 = v38[1];
  if (v38 != &v42)
  {
    sub_326C0(v38, v33, v34, (v34 - v33) >> 3);
    unint64_t v33 = v42;
  }
  BOOL v4 = v37 < (v39 - v40) >> 3;
  if (v33)
  {
    unint64_t v43 = v33;
    operator delete(v33);
  }
  if (__p)
  {
    *(void *)uint64_t v46 = __p;
    operator delete(__p);
  }
  return v4;
}

void sub_2A6350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2A63A0(uint64_t a1, unint64_t a2)
{
  sub_2A63E4(a1, a2, (uint64_t)v5);
  unint64_t v2 = v5[0];
  size_t v3 = v5[1];
  if (v5[0]) {
    operator delete(v5[0]);
  }
  return v2 != v3;
}

char *sub_2A63E4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = sub_2A5CA4(a1, a2);
  uint64_t v5 = &result[-*(int *)result];
  if (*(unsigned __int16 *)v5 >= 0xBu
    && (uint64_t v6 = *((unsigned __int16 *)v5 + 5)) != 0
    && (uint64_t v7 = &result[v6 + *(unsigned int *)&result[v6]], v8 = *(unsigned int *)v7, v8))
  {
    uint64_t v9 = v8;
    int64_t v10 = operator new(4 * v8);
    *(void *)&long long v14 = v10;
    *((void *)&v14 + 1) = v10;
    unint64_t v15 = &v10[v9];
    uint64_t v11 = (int *)(v7 + 4);
    do
    {
      int v16 = *v11;
      unint64_t result = sub_2A69D0((unint64_t *)&v14, v10, &v16);
      int64_t v10 = result + 4;
      ++v11;
      --v9;
    }
    while (v9 * 4);
    long long v12 = v14;
    uint64_t v13 = v15;
  }
  else
  {
    uint64_t v13 = 0;
    long long v12 = 0uLL;
  }
  *(_OWORD *)a3 = v12;
  *(void *)(a3 + 16) = v13;
  return result;
}

void sub_2A64A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2A64C4(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_2A65AC(a1, a2, a3);
  sub_2A63E4(a1, a2, (uint64_t)&__p);
  uint64_t v6 = (uint64_t **)*a3;
  uint64_t v7 = (uint64_t **)a3[1];
  uint64_t v8 = __p;
  if ((uint64_t **)*a3 != v7)
  {
    uint64_t v9 = 0;
    do
    {
      int64_t v10 = *v6;
      uint64_t v11 = v6[1];
      while (v10 != v11)
      {
        uint64_t v12 = *v10;
        uint64_t v13 = v10[1];
        if (*v10 != v13)
        {
          do
          {
            int v14 = v8[v9++];
            *(_DWORD *)(v12 + 8) = v14;
            v12 += 12;
          }
          while (v12 != v13);
        }
        v10 += 3;
      }
      v6 += 3;
    }
    while (v6 != v7);
  }
  if (v8)
  {
    operator delete(v8);
  }
}

void sub_2A6598(_Unwind_Exception *a1)
{
  sub_4CBF8(v1);
  _Unwind_Resume(a1);
}

void sub_2A65AC(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v24 = a2;
  uint64_t v5 = sub_2A75D8(a1, a2, 1);
  if (!v5
    || (uint64_t v6 = &v5[-*(int *)v5], *(unsigned __int16 *)v6 < 5u)
    || (uint64_t v7 = *((unsigned __int16 *)v6 + 2)) == 0
    || (v8 = &v5[v7 + *(unsigned int *)&v5[v7]], uint64_t v9 = &v8[-*(int *)v8], *(unsigned __int16 *)v9 < 5u)
    || !*((_WORD *)v9 + 2)
    || (int64_t v10 = &v8[*((unsigned __int16 *)v9 + 2) + *(unsigned int *)&v8[*((unsigned __int16 *)v9 + 2)]],
        *(_DWORD *)v10 <= HIDWORD(a2)))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_2A746C((unsigned int *)&v24, &v20);
    unint64_t v15 = std::string::insert(&v20, 0, "Referenced polygon ");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    unint64_t v17 = std::string::append(&v21, " does not exist.");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    std::string::size_type v23 = v17->__r_.__value_.__r.__words[2];
    long long v22 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    uint64_t v19 = (void *)sub_2F404((uint64_t)exception, &v22);
  }
  uint64_t v11 = &v10[4 * HIDWORD(a2) + 4 + *(unsigned int *)&v10[4 * HIDWORD(a2) + 4]];
  uint64_t v12 = &v11[*(unsigned __int16 *)&v11[-*(int *)v11 + 4]];
  uint64_t v13 = (int *)&v12[*(unsigned int *)v12];

  sub_2A9A54(v13, a3);
}

void sub_2A6724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

double sub_2A67A4@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v4 = sub_2A5CA4(a1, a2);
  uint64_t v5 = &v4[-*(int *)v4];
  if (*(unsigned __int16 *)v5 >= 0xFu && (uint64_t v6 = *((unsigned __int16 *)v5 + 7)) != 0)
  {
    uint64_t v7 = &v4[v6 + *(unsigned int *)&v4[v6]];
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    sub_2A6D40((uint64_t)&v26, *(unsigned int *)v7);
    unsigned int v10 = *(_DWORD *)v7;
    uint64_t v9 = (unsigned int *)(v7 + 4);
    uint64_t v8 = v10;
    if (v10)
    {
      uint64_t v11 = *((void *)&v26 + 1);
      uint64_t v12 = &v9[v8];
      do
      {
        uint64_t v13 = (int *)((char *)v9 + *v9);
        int v14 = (unsigned __int16 *)((char *)v13 - *v13);
        if (*v14 >= 5u
          && (uint64_t v15 = v14[2]) != 0
          && (v16 = (unsigned int *)((char *)v13 + v15 + *(unsigned int *)((char *)v13 + v15)), uint64_t v17 = *v16, v17))
        {
          long long v18 = (char *)operator new(12 * v17);
          *(void *)&long long v30 = v18;
          *((void *)&v30 + 1) = v18;
          uint64_t v31 = &v18[12 * v17];
          uint64_t v19 = v16 + 1;
          uint64_t v20 = 8 * v17;
          do
          {
            LODWORD(v21) = v19[1];
            if (v21 >= 0xFFFFFFFE) {
              uint64_t v21 = 4294967294;
            }
            else {
              uint64_t v21 = v21;
            }
            unint64_t v32 = *v19 | (unint64_t)(v21 << 32);
            int v33 = 0x7FFFFFFF;
            long long v18 = sub_32ACC((char **)&v30, (uint64_t)v18, (uint64_t)&v32) + 12;
            v19 += 2;
            v20 -= 8;
          }
          while (v20);
          long long v22 = v30;
          std::string::size_type v23 = v31;
        }
        else
        {
          std::string::size_type v23 = 0;
          long long v22 = 0uLL;
        }
        *(_OWORD *)std::string __p = v22;
        uint64_t v29 = v23;
        unint64_t v24 = sub_2A6EF0((char **)&v26, v11, (__n128 *)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        uint64_t v11 = (uint64_t)(v24 + 24);
        ++v9;
      }
      while (v9 != v12);
    }
  }
  else
  {
    long long v26 = 0uLL;
    uint64_t v27 = 0;
  }
  double result = *(double *)&v26;
  *(_OWORD *)a3 = v26;
  *(void *)(a3 + 16) = v27;
  return result;
}

void sub_2A6948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (__p)
  {
    uint64_t v19 = a10;
    uint64_t v20 = __p;
    if (a10 != __p)
    {
      uint64_t v21 = a10;
      do
      {
        std::string::size_type v23 = (void *)*((void *)v21 - 3);
        v21 -= 24;
        long long v22 = v23;
        if (v23)
        {
          *(v19 - 2) = v22;
          operator delete(v22);
        }
        uint64_t v19 = v21;
      }
      while (v21 != __p);
      uint64_t v20 = __p;
    }
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2A69D0(unint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 2;
  uint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_DWORD *)uint64_t v9 = *a3;
      a1[1] = (unint64_t)(v9 + 4);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 4);
    uint64_t v12 = v11 >> 2;
    uint64_t v13 = (int *)(v5 - 4);
    if (v5 < 4)
    {
      uint64_t v19 = (_DWORD *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      uint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 4;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x2C)
      {
        uint64_t v19 = (_DWORD *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = (_DWORD *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 2) + 1;
          uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v13 = (int *)((char *)v13 + v21);
          uint64_t v19 = (_DWORD *)(v5 + v21);
          long long v22 = (_OWORD *)(v5 + 16);
          std::string::size_type v23 = (long long *)(4 * v12 + 4 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            _OWORD *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 8;
          }
          while (v24);
          if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        int v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 4) {
      memmove((void *)(v5 - 4 * v12), v9, v11);
    }
    *(_DWORD *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 2) + 1;
  if (v26 >> 62) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 1 > v26) {
    unint64_t v26 = v28 >> 1;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 62) {
      sub_188D718();
    }
    long long v30 = (char *)operator new(4 * v29);
    uint64_t v31 = &v30[4 * v8];
    unint64_t v32 = &v30[4 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    long long v30 = 0;
    uint64_t v31 = (char *)(4 * v8);
    unint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((_DWORD *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 1;
    }
    if (v53 >> 62) {
      sub_188D718();
    }
    uint64_t v54 = (char *)operator new(4 * v53);
    uint64_t v31 = &v54[v53 & 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v32 = &v54[4 * v53];
    if (v30)
    {
      std::string v55 = &v54[4 * v53];
      operator delete(v30);
      unint64_t v32 = v55;
      long long v34 = (char *)*a1;
      *(_DWORD *)uint64_t v31 = *a3;
      unint64_t v35 = v31 + 4;
      unint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 4 * (v33 >> 1);
  }
LABEL_28:
  long long v34 = (char *)v6;
  *(_DWORD *)uint64_t v31 = *a3;
  unint64_t v35 = v31 + 4;
  unint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    unint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6);
    unint64_t v38 = v37 - v34 - 4;
    unint64_t v39 = v9;
    unint64_t v36 = v31;
    if (v38 < 0x2C) {
      goto LABEL_59;
    }
    unint64_t v39 = v9;
    unint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 2) + 1;
    uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v39 = &v9[-v41];
    unint64_t v36 = &v31[-v41];
    long long v42 = v31 - 16;
    unint64_t v43 = (long long *)(v6 + 4 * v8 - 16);
    uint64_t v44 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)long long v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 8;
    }
    while (v44);
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_59:
      do
      {
        int v46 = *((_DWORD *)v39 - 1);
        v39 -= 4;
        *((_DWORD *)v36 - 1) = v46;
        v36 -= 4;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  uint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = v47 - v9;
    long long v51 = v32;
    memmove(v35, v49, v50);
    unint64_t v32 = v51;
  }
  uint64_t v52 = (_DWORD *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_2A6D28(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2A6D40(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_2E00();
  }
  BOOL v4 = *(char **)(a1 + 8);
  uint64_t v5 = 24 * a2;
  unint64_t v6 = (char *)operator new(24 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[24 * ((v4 - v2) / 24)];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_13;
  }
  uint64_t v9 = &v6[24 * ((v4 - v2) / 24)];
  do
  {
    long long v10 = *(_OWORD *)(v4 - 24);
    v4 -= 24;
    *(_OWORD *)(v9 - 24) = v10;
    v9 -= 24;
    *((void *)v9 + 2) = *((void *)v4 + 2);
    *(void *)BOOL v4 = 0;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
  }
  while (v4 != v2);
  int64_t v11 = *(char **)a1;
  unint64_t v2 = *(char **)(a1 + 8);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v11)
  {
    uint64_t v12 = v2;
    do
    {
      unint64_t v14 = (void *)*((void *)v12 - 3);
      v12 -= 24;
      uint64_t v13 = v14;
      if (v14)
      {
        *((void *)v2 - 2) = v13;
        operator delete(v13);
      }
      unint64_t v2 = v12;
    }
    while (v12 != v11);
    unint64_t v2 = v11;
  }
  if (v2)
  {
LABEL_13:
    operator delete(v2);
  }
}

uint64_t sub_2A6E80(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = v2 - 24;
        BOOL v4 = *(void **)(v2 - 24);
        *(void *)(a1 + 16) = v2 - 24;
        if (!v4) {
          break;
        }
        *(void *)(v2 - 16) = v4;
        operator delete(v4);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_2A6EF0(char **a1, uint64_t a2, __n128 *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 24;
  uint64_t v8 = &(*a1)[24 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)v6) >> 3) + 1;
    if (v14 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v6) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x555555555555555) {
      unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v16 = v14;
    }
    unint64_t v38 = a1 + 2;
    if (v16)
    {
      if (v16 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      unint64_t v17 = (char *)operator new(24 * v16);
    }
    else
    {
      unint64_t v17 = 0;
    }
    long long v34 = v17;
    unint64_t v35 = &v17[24 * v7];
    unint64_t v36 = v35;
    unint64_t v37 = &v17[24 * v16];
    sub_2A7254((uint64_t)&v34, a3);
    unint64_t v18 = v35;
    uint64_t v19 = *a1;
    uint64_t v20 = v35;
    if (*a1 != v8)
    {
      uint64_t v20 = v35;
      uint64_t v21 = v8;
      do
      {
        *((void *)v20 - 3) = 0;
        *((void *)v20 - 2) = 0;
        v20 -= 24;
        *((void *)v20 + 2) = 0;
        long long v22 = *(_OWORD *)(v21 - 24);
        v21 -= 24;
        *(_OWORD *)uint64_t v20 = v22;
        *((void *)v20 + 2) = *((void *)v21 + 2);
        *(void *)uint64_t v21 = 0;
        *((void *)v21 + 1) = 0;
        *((void *)v21 + 2) = 0;
      }
      while (v21 != v19);
    }
    unint64_t v35 = v20;
    std::string::size_type v23 = a1[1];
    uint64_t v24 = v36;
    if (v23 != v8)
    {
      do
      {
        *(void *)uint64_t v24 = 0;
        *((void *)v24 + 1) = 0;
        *((void *)v24 + 2) = 0;
        *(_OWORD *)uint64_t v24 = *(_OWORD *)v8;
        *((void *)v24 + 2) = *((void *)v8 + 2);
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        *((void *)v8 + 2) = 0;
        v24 += 24;
        v8 += 24;
      }
      while (v8 != v23);
      uint64_t v20 = v35;
      uint64_t v8 = a1[1];
    }
    long long v25 = *a1;
    *a1 = v20;
    a1[1] = v24;
    unint64_t v26 = a1[2];
    a1[2] = v37;
    unint64_t v36 = v8;
    unint64_t v37 = v26;
    long long v34 = v25;
    unint64_t v35 = v25;
    if (v8 == v25)
    {
      if (!v8) {
        return v18;
      }
    }
    else
    {
      do
      {
        while (1)
        {
          uint64_t v28 = v8 - 24;
          uint64_t v27 = (void *)*((void *)v8 - 3);
          unint64_t v36 = v8 - 24;
          if (!v27) {
            break;
          }
          *((void *)v8 - 2) = v27;
          operator delete(v27);
          uint64_t v8 = v36;
          if (v36 == v25) {
            goto LABEL_32;
          }
        }
        v8 -= 24;
      }
      while (v28 != v25);
LABEL_32:
      uint64_t v8 = v34;
      if (!v34) {
        return v18;
      }
    }
    operator delete(v8);
    return v18;
  }
  if (v8 == (char *)v5)
  {
    *(void *)uint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = 0;
    *(__n128 *)uint64_t v8 = *a3;
    *((void *)v8 + 2) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a1[1] = v8 + 24;
    return v8;
  }
  long long v10 = v8 + 24;
  unint64_t v11 = v5 - 24;
  if (v5 >= 0x18)
  {
    unint64_t v12 = v5 - 24;
    uint64_t v13 = a1[1];
    do
    {
      *(void *)uint64_t v13 = 0;
      *((void *)v13 + 1) = 0;
      *((void *)v13 + 2) = 0;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v12;
      *((void *)v13 + 2) = *(void *)(v12 + 16);
      *(void *)unint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      v13 += 24;
      v12 += 24;
    }
    while (v12 < v5);
    a1[1] = v13;
    if ((void *)v5 == v10) {
      goto LABEL_39;
    }
LABEL_35:
    uint64_t v29 = 8 * ((uint64_t)(v5 - (void)v10) >> 3);
    do
    {
      uint64_t v31 = *(void **)v11;
      if (*(void *)v11)
      {
        *(void *)(v11 + 8) = v31;
        operator delete(v31);
        *(void *)unint64_t v11 = 0;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
      }
      uint64_t v30 = (uint64_t)&v8[v29 - 24];
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v30;
      *(void *)(v11 + 16) = *(void *)&v8[v29 - 8];
      *(void *)uint64_t v30 = 0;
      *(void *)(v30 + 8) = 0;
      *(void *)(v30 + 16) = 0;
      v11 -= 24;
      v29 -= 24;
    }
    while (v29);
    goto LABEL_39;
  }
  a1[1] = (char *)v5;
  if ((void *)v5 != v10) {
    goto LABEL_35;
  }
LABEL_39:
  unint64_t v32 = *(void **)v8;
  if (*(void *)v8)
  {
    *((void *)v8 + 1) = v32;
    operator delete(v32);
    *(void *)uint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = 0;
  }
  *(__n128 *)uint64_t v8 = *a3;
  *((void *)v8 + 2) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return v8;
}

void sub_2A7240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2A6E80((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_2A7254(uint64_t a1, __n128 *a2)
{
  BOOL v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    unint64_t v5 = *(char **)a1;
    unint64_t v6 = *(char **)(a1 + 8);
    if ((unint64_t)v6 <= *(void *)a1)
    {
      unint64_t v13 = 0x5555555555555556 * ((v4 - v5) >> 3);
      if (v4 == v5) {
        unint64_t v13 = 1;
      }
      if (v13 >= 0xAAAAAAAAAAAAAABLL) {
        sub_188D718();
      }
      unint64_t v14 = v13 >> 2;
      uint64_t v15 = 24 * v13;
      unint64_t v16 = (char *)operator new(24 * v13);
      unint64_t v17 = &v16[24 * v14];
      unint64_t v18 = &v16[v15];
      if (v4 == v6)
      {
        *(void *)a1 = v16;
        *(void *)(a1 + 8) = v17;
        *(void *)(a1 + 16) = v17;
        *(void *)(a1 + 24) = v18;
      }
      else
      {
        uint64_t v19 = &v17[v4 - v6];
        uint64_t v20 = 24 * v14;
        do
        {
          uint64_t v21 = &v16[v20];
          *(_OWORD *)uint64_t v21 = *(_OWORD *)v6;
          *((void *)v21 + 2) = *((void *)v6 + 2);
          *(void *)unint64_t v6 = 0;
          *((void *)v6 + 1) = 0;
          *((void *)v6 + 2) = 0;
          v20 += 24;
          v6 += 24;
        }
        while (v21 + 24 != v19);
        unint64_t v5 = *(char **)a1;
        uint64_t v22 = *(void *)(a1 + 8);
        uint64_t v23 = *(void *)(a1 + 16);
        *(void *)a1 = v16;
        *(void *)(a1 + 8) = v17;
        *(void *)(a1 + 16) = v19;
        *(void *)(a1 + 24) = v18;
        if (v23 != v22)
        {
          uint64_t v24 = v23;
          do
          {
            unint64_t v26 = *(void **)(v24 - 24);
            v24 -= 24;
            long long v25 = v26;
            if (v26)
            {
              *(void *)(v23 - 16) = v25;
              operator delete(v25);
            }
            uint64_t v23 = v24;
          }
          while (v24 != v22);
        }
      }
      if (v5) {
        operator delete(v5);
      }
      BOOL v4 = *(char **)(a1 + 16);
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(void *)a1] >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      if (v6 == v4)
      {
        uint64_t v27 = &v6[-24 * v9];
      }
      else
      {
        do
        {
          unint64_t v11 = (void **)&v6[24 * v10];
          unint64_t v12 = *v11;
          if (*v11)
          {
            v11[1] = v12;
            operator delete(v12);
            *unint64_t v11 = 0;
            v11[1] = 0;
            void v11[2] = 0;
          }
          *(_OWORD *)unint64_t v11 = *(_OWORD *)v6;
          void v11[2] = (void *)*((void *)v6 + 2);
          *(void *)unint64_t v6 = 0;
          *((void *)v6 + 1) = 0;
          *((void *)v6 + 2) = 0;
          v6 += 24;
        }
        while (v6 != v4);
        BOOL v4 = *(char **)(a1 + 8);
        uint64_t v27 = &v6[24 * v10];
      }
      *(void *)(a1 + 8) = &v4[24 * v10];
      *(void *)(a1 + 16) = v27;
      BOOL v4 = v27;
    }
  }
  *(void *)BOOL v4 = 0;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  __n128 result = *a2;
  *(__n128 *)BOOL v4 = *a2;
  *((void *)v4 + 2) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  *(void *)(a1 + 16) += 24;
  return result;
}

void sub_2A746C(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v10, *a1);
  BOOL v4 = std::string::append(&v10, ".");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1[1]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = std::string::append(&v11, (const std::string::value_type *)p_p, size);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_13:
      operator delete(v10.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_13;
  }
}

void sub_2A7564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *sub_2A75D8(uint64_t a1, unsigned int a2, int a3)
{
  int v25 = a3;
  unsigned int v26 = a2;
  v24[0] = &v25;
  v24[1] = (int *)&v26;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 2800) == a2)
    {
      unsigned int v7 = 116;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 2824) == a2)
    {
      unsigned int v7 = 117;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 2848) == a2)
    {
      unsigned int v7 = 118;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 2872) == a2)
    {
      unsigned int v7 = 119;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      uint64_t v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_32;
    }
    unint64_t v11 = *(void *)(a1 + 2856);
    unint64_t v12 = *(void *)(a1 + 2832);
    unint64_t v13 = *(void *)(a1 + 2808);
    BOOL v14 = v13 >= v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 2808);
    }
    int v15 = 116;
    if (v14) {
      int v15 = 0;
    }
    BOOL v16 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 2832);
    }
    int v17 = 117;
    if (v16) {
      int v17 = v15;
    }
    if (v11 >= v4) {
      unint64_t v18 = v4;
    }
    else {
      unint64_t v18 = *(void *)(a1 + 2856);
    }
    unint64_t v19 = *(void *)(a1 + 2880);
    if (v11 >= v4) {
      int v20 = v17;
    }
    else {
      int v20 = 118;
    }
    uint64_t v21 = (unsigned int *)sub_2AB884(v5, 29, a2, 1);
    unsigned int v22 = 119;
    if (v19 >= v18) {
      unsigned int v22 = v20;
    }
    uint64_t v23 = v6 + 24 * v22;
    *(_DWORD *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = *(void *)(a1 + 3856);
    *(void *)(v23 + 16) = v21;
    if (v21) {
      return (char *)v21 + *v21;
    }
  }
LABEL_32:
  sub_2A7768(v24);
  return 0;
}

uint64_t sub_2A7768(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      uint64_t v9 = sub_736EC(0x1Du);
      std::string v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    BOOL v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_2A78C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

uint64_t sub_2A7994(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  uint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  int v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_74;
  }
  if (!v20[2]) {
    goto LABEL_37;
  }
  unint64_t v22 = (unint64_t)&v3[v20[2]];
  if ((v22 & 7) != 0 && v4) {
    return 0;
  }
  uint64_t result = 0;
  if (v7 >= 9 && v7 - 8 >= v22)
  {
LABEL_37:
    if (v21 < 7) {
      goto LABEL_74;
    }
    if (v20[3] && v7 - 1 < (unint64_t)&v3[v20[3]]) {
      return 0;
    }
    if (v21 < 9) {
      goto LABEL_74;
    }
    uint64_t v23 = v20[4];
    if (!v20[4]) {
      goto LABEL_96;
    }
    uint64_t result = 0;
    uint64_t v24 = &v3[v23];
    BOOL v25 = ((unint64_t)&v3[v23] & 3) == 0 || v4 == 0;
    BOOL v26 = v25;
    if (v8 >= (unint64_t)v24 && v26)
    {
      uint64_t v27 = *(unsigned int *)&v24[v2];
      if ((int)v27 < 1 || v7 - 1 < (unint64_t)&v24[v27]) {
        return 0;
      }
      uint64_t result = 0;
      uint64_t v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
      uint64_t v29 = (char *)v28 - v2;
      BOOL v30 = (((unint64_t)v28 - v2) & 3) == 0 || v4 == 0;
      BOOL v31 = v30;
      if (v8 >= (unint64_t)v29 && v31)
      {
        uint64_t v32 = *v28;
        if (v32 > 0xFFFFFFE) {
          return 0;
        }
        uint64_t result = 0;
        unint64_t v33 = (8 * v32) | 4;
        BOOL v9 = v7 >= v33;
        unint64_t v34 = v7 - v33;
        if (v34 != 0 && v9 && v34 >= (unint64_t)v29)
        {
LABEL_96:
          if (v21 >= 0xB)
          {
            uint64_t v35 = v20[5];
            if (v35)
            {
              uint64_t result = 0;
              unint64_t v36 = (unint64_t)&v3[v35];
              BOOL v38 = (v36 & 3) == 0 || v4 == 0;
              if (v8 < v36 || !v38) {
                return result;
              }
              uint64_t v39 = *(unsigned int *)(v2 + v36);
              if ((int)v39 < 1 || v7 - 1 < v36 + v39) {
                return 0;
              }
              uint64_t v40 = (unsigned int *)((char *)a1 + v35 + *(unsigned int *)((char *)a1 + v35));
              goto LABEL_75;
            }
          }
LABEL_74:
          uint64_t v40 = 0;
LABEL_75:
          uint64_t result = sub_2A7D68(a2, v40);
          if (result)
          {
            uint64_t result = sub_2A7CE0(a1, a2, 0xCu);
            if (result)
            {
              uint64_t v41 = (unsigned __int16 *)((char *)a1 - *a1);
              if (*v41 >= 0xDu && (uint64_t v42 = v41[6]) != 0) {
                unint64_t v43 = (int *)((char *)a1 + v42 + *(unsigned int *)((char *)a1 + v42));
              }
              else {
                unint64_t v43 = 0;
              }
              uint64_t result = sub_2A7DD0(a2, v43);
              if (result)
              {
                uint64_t result = sub_2A7CE0(a1, a2, 0xEu);
                if (result)
                {
                  uint64_t v44 = (unsigned __int16 *)((char *)a1 - *a1);
                  if (*v44 >= 0xFu && (uint64_t v45 = v44[7]) != 0) {
                    int v46 = (unsigned int *)((char *)a1 + v45 + *(unsigned int *)((char *)a1 + v45));
                  }
                  else {
                    int v46 = 0;
                  }
                  uint64_t result = sub_2A7D68(a2, v46);
                  if (result)
                  {
                    uint64_t v47 = (unsigned __int16 *)((char *)a1 - *a1);
                    if (*v47 >= 0xFu && (uint64_t v48 = v47[7]) != 0) {
                      uint64_t v49 = (int *)((char *)a1 + v48 + *(unsigned int *)((char *)a1 + v48));
                    }
                    else {
                      uint64_t v49 = 0;
                    }
                    uint64_t result = sub_2A7E40((uint64_t *)a2, v49);
                    if (result)
                    {
                      --*(_DWORD *)(a2 + 40);
                      return 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_2A7CE0(int *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v3 <= a3) {
    return 1;
  }
  uint64_t v4 = *(unsigned __int16 *)((char *)v3 + a3);
  if (!v4) {
    return 1;
  }
  unint64_t v5 = (unint64_t)a1 + v4 - *(void *)a2;
  BOOL result = 0;
  if ((v5 & 3) == 0 || *(unsigned char *)(a2 + 24) == 0)
  {
    unint64_t v8 = *(void *)(a2 + 8);
    if (v8 >= 5 && v8 - 4 >= v5)
    {
      uint64_t v9 = *(unsigned int *)(*(void *)a2 + v5);
      return (int)v9 >= 1 && v8 - 1 >= v5 + v9;
    }
  }
  return result;
}

BOOL sub_2A7D68(uint64_t a1, unsigned int *a2)
{
  if (!a2) {
    return 1;
  }
  unint64_t v2 = (unint64_t)a2 - *(void *)a1;
  if ((v2 & 3) != 0 && *(unsigned char *)(a1 + 24)) {
    return 0;
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 < 5 || v3 - 4 < v2) {
    return 0;
  }
  uint64_t v5 = *a2;
  if (v5 > 0x1FFFFFFE) {
    return 0;
  }
  unint64_t v6 = 4 * v5 + 4;
  BOOL v7 = v3 > v6;
  unint64_t v8 = v3 - v6;
  return v7 && v8 >= v2;
}

BOOL sub_2A7DD0(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  unint64_t v2 = (unint64_t)a2 - *(void *)a1;
  if ((v2 & 3) != 0 && *(unsigned char *)(a1 + 24)) {
    return 0;
  }
  unint64_t v3 = *(void *)(a1 + 8);
  BOOL v4 = v3 >= 5 && v3 - 4 >= v2;
  if (!v4 || *a2 > 0xAAAAAA9u) {
    return 0;
  }
  unint64_t v5 = 12 * *a2 + 4;
  BOOL v6 = v3 > v5;
  unint64_t v7 = v3 - v5;
  return v6 && v7 >= v2;
}

uint64_t sub_2A7E40(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  unint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2A7ECC((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2A7ECC(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v15 = 0;
    if (v4 || v6 - 2 < v14) {
      return v15;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v14);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v16;
  unint64_t v17 = v6 - v16;
  if (v17 == 0 || !v8 || v17 < v14) {
    return 0;
  }
  std::string::size_type v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 < 5u) {
    goto LABEL_55;
  }
  uint64_t v20 = v19[2];
  if (!v19[2]) {
    goto LABEL_55;
  }
  uint64_t v15 = 0;
  unint64_t v21 = (unint64_t)&v3[v20];
  BOOL v23 = (v21 & 3) == 0 || v4 == 0;
  if (v7 >= v21 && v23)
  {
    uint64_t v24 = *(unsigned int *)(v2 + v21);
    if ((int)v24 < 1 || v6 - 1 < v21 + v24) {
      return 0;
    }
    uint64_t v15 = 0;
    BOOL v25 = (unsigned int *)((char *)a1 + v20 + *(unsigned int *)((char *)a1 + v20));
    BOOL v26 = (char *)v25 - v2;
    BOOL v27 = (v26 & 3) == 0 || v4 == 0;
    BOOL v28 = v27;
    if (v7 >= (unint64_t)v26 && v28)
    {
      uint64_t v29 = *v25;
      if (v29 > 0xFFFFFFE) {
        return 0;
      }
      unint64_t v30 = (8 * v29) | 4;
      BOOL v8 = v6 >= v30;
      unint64_t v31 = v6 - v30;
      if (v31 == 0 || !v8 || v31 < (unint64_t)v26) {
        return 0;
      }
LABEL_55:
      *((_DWORD *)a2 + 10) = v10;
      return 1;
    }
  }
  return v15;
}

char *sub_2A8034(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)uint64_t v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    unsigned int v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      std::string::size_type v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      uint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        std::string::size_type v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        std::string::size_type v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          unsigned int v13 = (uint64_t *)((char *)v13 + v21);
          std::string::size_type v19 = (void *)(v5 + v21);
          unint64_t v22 = (_OWORD *)(v5 + 16);
          BOOL v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            _OWORD *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    unint64_t v30 = (char *)operator new(8 * v29);
    unint64_t v31 = &v30[8 * v8];
    uint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    unint64_t v30 = 0;
    unint64_t v31 = (char *)(8 * v8);
    uint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    uint64_t v54 = (char *)operator new(8 * v53);
    unint64_t v31 = &v54[8 * (v53 >> 2)];
    uint64_t v32 = &v54[8 * v53];
    if (v30)
    {
      std::string v55 = &v54[8 * v53];
      operator delete(v30);
      uint64_t v32 = v55;
      unint64_t v34 = (char *)*a1;
      *(void *)unint64_t v31 = *a3;
      uint64_t v35 = v31 + 8;
      unint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  unint64_t v34 = (char *)v6;
  *(void *)unint64_t v31 = *a3;
  uint64_t v35 = v31 + 8;
  unint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    unint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    uint64_t v39 = v9;
    unint64_t v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    uint64_t v39 = v9;
    unint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v39 = &v9[-v41];
    unint64_t v36 = &v31[-v41];
    uint64_t v42 = v31 - 16;
    unint64_t v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)uint64_t v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  uint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = v47 - v9;
    long long v51 = v32;
    memmove(v35, v49, v50);
    uint64_t v32 = v51;
  }
  uint64_t v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_2A838C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2A83A4(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v5 = *(void *)a1;
  uint64_t v6 = a2 - *(void *)a1;
  uint64_t v7 = (char *)(*(void *)a1 + (v6 & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = a5 - 1;
  if (a5 < 1) {
    return v7;
  }
  uint64_t v12 = v6 >> 3;
  unint64_t v14 = *(char **)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  if (a5 > (v13 - (uint64_t)v14) >> 3)
  {
    unint64_t v15 = a5 + ((uint64_t)&v14[-v5] >> 3);
    if (v15 >> 61) {
      sub_2E00();
    }
    uint64_t v16 = v13 - v5;
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 61) {
        sub_188D718();
      }
      unint64_t v18 = v17;
      std::string::size_type v19 = operator new(8 * v17);
      unint64_t v17 = v18;
      uint64_t v12 = v6 >> 3;
    }
    else
    {
      std::string::size_type v19 = 0;
    }
    uint64_t v40 = &v19[8 * v12];
    uint64_t v41 = &v40[8 * a5];
    uint64_t v42 = v40;
    unint64_t v43 = __src;
    if ((v8 & 0x1FFFFFFFFFFFFFFFuLL) < 7) {
      goto LABEL_59;
    }
    uint64_t v42 = &v19[8 * v12];
    unint64_t v43 = __src;
    if ((unint64_t)(&v19[v6 & 0xFFFFFFFFFFFFFFF8] - __src) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v44 = (v8 & 0x1FFFFFFFFFFFFFFFLL) + 1;
    uint64_t v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v42 = &v40[v45];
    unint64_t v43 = &__src[v45];
    uint64_t v46 = (long long *)(__src + 16);
    uint64_t v47 = &v19[8 * v12 + 16];
    uint64_t v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v49 = *v46;
      *(v47 - 1) = *(v46 - 1);
      *uint64_t v47 = v49;
      v46 += 2;
      v47 += 2;
      v48 -= 4;
    }
    while (v48);
    if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v50 = *(void *)v43;
        v43 += 8;
        *(void *)uint64_t v42 = v50;
        v42 += 8;
      }
      while (v42 != v41);
    }
    long long v51 = *(char **)a1;
    if (*(char **)a1 == v7)
    {
      std::string v55 = &v19[8 * v12];
      uint64_t v65 = &v19[8 * v17];
      size_t v66 = v14 - v7;
      if (v14 == v7) {
        goto LABEL_43;
      }
    }
    else
    {
      uint64_t v52 = (char *)((v6 & 0xFFFFFFFFFFFFFFF8) + v5);
      unint64_t v53 = v52 - v51 - 8;
      uint64_t v54 = v7;
      std::string v55 = &v19[8 * v12];
      if (v53 < 0x68) {
        goto LABEL_60;
      }
      uint64_t v54 = v7;
      std::string v55 = &v19[8 * v12];
      if ((unint64_t)(v52 - &v19[v6 & 0xFFFFFFFFFFFFFFF8]) < 0x20) {
        goto LABEL_60;
      }
      uint64_t v56 = (v53 >> 3) + 1;
      uint64_t v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v54 = &v7[-v57];
      std::string v55 = &v40[-v57];
      uint64_t v58 = 8 * v12 - 16;
      std::string v59 = &v19[v58];
      std::string v60 = (long long *)(v5 + v58);
      uint64_t v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v62 = *v60;
        *(v59 - 1) = *(v60 - 1);
        *std::string v59 = v62;
        v59 -= 2;
        v60 -= 2;
        v61 -= 4;
      }
      while (v61);
      if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_60:
        do
        {
          uint64_t v63 = *((void *)v54 - 1);
          v54 -= 8;
          *((void *)v55 - 1) = v63;
          v55 -= 8;
        }
        while (v54 != v51);
      }
      long long v64 = *(unsigned char **)(a1 + 8);
      uint64_t v65 = &v19[8 * v17];
      size_t v66 = v64 - v7;
      if (v64 == v7) {
        goto LABEL_43;
      }
    }
    memmove(v41, v7, v66);
LABEL_43:
    uint64_t v67 = *(void **)a1;
    *(void *)a1 = v55;
    *(void *)(a1 + 8) = &v41[v66];
    *(void *)(a1 + 16) = v65;
    if (v67) {
      operator delete(v67);
    }
    return v40;
  }
  uint64_t v20 = (v14 - v7) >> 3;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[8 * a5];
    BOOL v23 = *(char **)(a1 + 8);
    goto LABEL_18;
  }
  uint64_t v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21)
  {
    uint64_t v70 = &__src[8 * v20];
    memmove(*(void **)(a1 + 8), v70, a4 - v21);
    uint64_t v12 = v6 >> 3;
    uint64_t v21 = v70;
  }
  BOOL v23 = &v14[v22];
  *(void *)(a1 + 8) = &v14[v22];
  if (v14 - v7 >= 1)
  {
LABEL_18:
    uint64_t v24 = &v7[8 * a5];
    size_t v25 = v23 - v24;
    uint64_t v26 = (v23 - v24) >> 3;
    BOOL v27 = &v23[-8 * a5];
    uint64_t v28 = v23;
    if (v27 < v14)
    {
      unint64_t v29 = (v6 & 0xFFFFFFFFFFFFFFF8) + v25;
      unint64_t v30 = (char *)(v29 + v5);
      unint64_t v31 = v29 + v5 + 8;
      if ((unint64_t)v14 > v31) {
        unint64_t v31 = (unint64_t)v14;
      }
      unint64_t v32 = v31 + ~v5 - v29;
      if (v32 < 0x58)
      {
        uint64_t v28 = v23;
      }
      else
      {
        unint64_t v33 = v23 - v30;
        uint64_t v28 = v23;
        if (v33 >= 0x20)
        {
          uint64_t v34 = (v32 >> 3) + 1;
          uint64_t v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
          v27 += v35;
          uint64_t v28 = &v23[v35];
          unint64_t v36 = v23 + 16;
          unint64_t v37 = (long long *)(8 * v26 + 8 * v12 + v5 + 16);
          uint64_t v38 = v34 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v39 = *v37;
            *(v36 - 1) = *(v37 - 1);
            *unint64_t v36 = v39;
            v36 += 2;
            v37 += 2;
            v38 -= 4;
          }
          while (v38);
          if (v34 == (v34 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v68 = *(void *)v27;
        v27 += 8;
        *(void *)uint64_t v28 = v68;
        v28 += 8;
      }
      while (v27 < v14);
    }
LABEL_50:
    *(void *)(a1 + 8) = v28;
    if (v23 != v24) {
      memmove(&v23[-8 * v26], v7, v25);
    }
    if (v21 != __src) {
      memmove(v7, __src, v21 - __src);
    }
  }
  return v7;
}

int8x16_t sub_2A875C(int8x16_t *a1, int8x16_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    uint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        a1 = v12;
        uint64_t v13 = (char *)a2 - (char *)v12;
        unint64_t v14 = ((char *)a2 - (char *)v12) >> 3;
        if (v6 || !v5)
        {
          switch(v14)
          {
            case 0uLL:
            case 1uLL:
              return result;
            case 2uLL:
              if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32))) {
                return result;
              }
              uint64_t v89 = v12->i64[0];
              goto LABEL_106;
            case 3uLL:
              unint64_t v87 = v12->u32[3] | ((unint64_t)v12->u32[2] << 32);
              unint64_t v88 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
              if (v87 >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
              {
                if (v88 < v87)
                {
                  uint64_t v104 = v12->i64[1];
                  v12->i64[1] = a2[-1].i64[1];
                  a2[-1].i64[1] = v104;
                  if ((v12->u32[3] | ((unint64_t)v12->u32[2] << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
                  {
                    int8x16_t result = vextq_s8(*v12, *v12, 8uLL);
                    *uint64_t v12 = result;
                  }
                }
              }
              else
              {
                uint64_t v89 = v12->i64[0];
                if (v88 < v87)
                {
LABEL_106:
                  v12->i64[0] = a2[-1].i64[1];
                }
                else
                {
                  v12->i64[0] = v12->i64[1];
                  v12->i64[1] = v89;
                  if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v89, 32)) {
                    return result;
                  }
                  v12->i64[1] = a2[-1].i64[1];
                }
                a2[-1].i64[1] = v89;
              }
              break;
            case 4uLL:
              sub_2A9374((unsigned int *)v12, &v12->u32[2], (unsigned int *)&v12[1], &a2[-1].u32[2]);
              return result;
            case 5uLL:
              sub_2A94B0((unsigned int *)v12, &v12->u32[2], (unsigned int *)&v12[1], &v12[1].u32[2], &a2[-1].u32[2]);
              return result;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v13 <= 191)
        {
          int64_t v90 = (int8x16_t *)&v12->u64[1];
          BOOL v92 = v12 == a2 || v90 == a2;
          if (a5)
          {
            if (!v92)
            {
              uint64_t v93 = 0;
              uint64_t v94 = v12;
              do
              {
                uint64_t v96 = v94->u32[2];
                uint64_t v97 = v94->u32[3];
                uint64_t v98 = v94->u32[0];
                uint64_t v99 = v94->u32[1];
                uint64_t v94 = v90;
                if ((v97 | (unint64_t)(v96 << 32)) < (v99 | (unint64_t)(v98 << 32)))
                {
                  uint64_t v100 = v90->i64[0];
                  unint64_t v101 = __ROR8__(v94->i64[0], 32);
                  uint64_t v102 = v93;
                  do
                  {
                    int64_t v103 = &v12->i8[v102];
                    *(uint64_t *)((char *)&v12->i64[1] + v102) = *(uint64_t *)((char *)v12->i64 + v102);
                    if (!v102)
                    {
                      uint64_t v95 = (uint64_t *)v12;
                      goto LABEL_124;
                    }
                    v102 -= 8;
                  }
                  while (v101 < (*((unsigned int *)v103 - 1) | ((unint64_t)*((unsigned int *)v103 - 2) << 32)));
                  uint64_t v95 = (uint64_t *)((char *)&v12->i64[1] + v102);
LABEL_124:
                  *uint64_t v95 = v100;
                }
                int64_t v90 = (int8x16_t *)&v94->u64[1];
                v93 += 8;
              }
              while (&v94->u64[1] != (unint64_t *)a2);
            }
          }
          else if (!v92)
          {
            do
            {
              uint64_t v105 = a1->u32[2];
              uint64_t v106 = a1->u32[3];
              uint64_t v107 = a1->u32[0];
              uint64_t v108 = a1->u32[1];
              a1 = v90;
              if ((v106 | (unint64_t)(v105 << 32)) < (v108 | (unint64_t)(v107 << 32)))
              {
                uint64_t v109 = v90->i64[0];
                unint64_t v110 = __ROR8__(v90->i64[0], 32);
                do
                {
                  uint64_t v111 = (uint64_t *)v90;
                  uint64_t v112 = v90[-1].i64[1];
                  int64_t v90 = (int8x16_t *)((char *)v90 - 8);
                  *uint64_t v111 = v112;
                }
                while (v110 < (*((unsigned int *)v111 - 3) | ((unint64_t)*((unsigned int *)v111 - 4) << 32)));
                v90->i64[0] = v109;
              }
              int64_t v90 = (int8x16_t *)&a1->u64[1];
            }
            while (&a1->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v12 != a2)
          {
            sub_2A9598((unsigned int *)v12, (unsigned int *)a2, (unsigned int *)a2, a3);
          }
          return result;
        }
        unint64_t v15 = v14 >> 1;
        uint64_t v16 = (unsigned int *)v12 + 2 * (v14 >> 1);
        unint64_t v17 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
        if ((unint64_t)v13 >= 0x401) {
          break;
        }
        unint64_t v21 = v12->u32[1] | ((unint64_t)v12->u32[0] << 32);
        int64_t v22 = &v12->u32[2 * v15 + 1];
        if (v21 < (*v22 | ((unint64_t)*v16 << 32)))
        {
          uint64_t v23 = *(void *)v16;
          if (v17 >= v21)
          {
            *(void *)uint64_t v16 = v12->i64[0];
            v12->i64[0] = v23;
            if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v23, 32)) {
              goto LABEL_32;
            }
            v12->i64[0] = a2[-1].i64[1];
          }
          else
          {
            *(void *)uint64_t v16 = a2[-1].i64[1];
          }
          a2[-1].i64[1] = v23;
LABEL_32:
          --a4;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_33;
        }
        if (v17 >= v21) {
          goto LABEL_32;
        }
        uint64_t v26 = v12->i64[0];
        v12->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v26;
        if ((v12->u32[1] | ((unint64_t)v12->u32[0] << 32)) >= (*v22 | ((unint64_t)*v16 << 32))) {
          goto LABEL_32;
        }
        uint64_t v27 = *(void *)v16;
        *(void *)uint64_t v16 = v12->i64[0];
        v12->i64[0] = v27;
        --a4;
        if (a5) {
          goto LABEL_33;
        }
LABEL_56:
        uint64_t v37 = v12->i64[0];
        if ((v12[-1].u32[3] | ((unint64_t)v12[-1].u32[2] << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32))) {
          goto LABEL_57;
        }
        unint64_t v73 = __ROR8__(v37, 32);
        if (v73 < (a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)))
        {
          do
          {
            uint64_t v74 = v12->u32[2];
            uint64_t v75 = v12->u32[3];
            uint64_t v12 = (int8x16_t *)((char *)v12 + 8);
          }
          while (v73 >= (v75 | (unint64_t)(v74 << 32)));
        }
        else
        {
          uint64_t v76 = (int8x16_t *)&v12->u64[1];
          do
          {
            uint64_t v12 = v76;
            if (v76 >= a2) {
              break;
            }
            unint64_t v77 = v76->u32[1] | ((unint64_t)v76->u32[0] << 32);
            uint64_t v76 = (int8x16_t *)((char *)v76 + 8);
          }
          while (v73 >= v77);
        }
        unint64_t v78 = a2;
        if (v12 < a2)
        {
          unint64_t v78 = a2;
          do
          {
            uint64_t v79 = v78[-1].u32[2];
            uint64_t v80 = v78[-1].u32[3];
            unint64_t v78 = (int8x16_t *)((char *)v78 - 8);
          }
          while (v73 < (v80 | (unint64_t)(v79 << 32)));
        }
        while (v12 < v78)
        {
          uint64_t v81 = v12->i64[0];
          v12->i64[0] = v78->i64[0];
          v78->i64[0] = v81;
          do
          {
            uint64_t v82 = v12->u32[2];
            uint64_t v83 = v12->u32[3];
            uint64_t v12 = (int8x16_t *)((char *)v12 + 8);
          }
          while (v73 >= (v83 | (unint64_t)(v82 << 32)));
          do
          {
            uint64_t v84 = v78[-1].u32[2];
            uint64_t v85 = v78[-1].u32[3];
            unint64_t v78 = (int8x16_t *)((char *)v78 - 8);
          }
          while (v73 < (v85 | (unint64_t)(v84 << 32)));
        }
        long long v86 = &v12[-1].i64[1];
        BOOL v5 = &v12[-1].u64[1] >= (unint64_t *)a1;
        BOOL v6 = &v12[-1].u64[1] == (unint64_t *)a1;
        if (&v12[-1].u64[1] != (unint64_t *)a1) {
          a1->i64[0] = *v86;
        }
        a5 = 0;
        uint64_t *v86 = v37;
      }
      unint64_t v18 = &v12->u32[2 * v15 + 1];
      unint64_t v19 = *v18 | ((unint64_t)*v16 << 32);
      if (v19 >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
      {
        if (v17 < v19)
        {
          uint64_t v24 = *(void *)v16;
          *(void *)uint64_t v16 = a2[-1].i64[1];
          a2[-1].i64[1] = v24;
          if ((*v18 | ((unint64_t)*v16 << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
          {
            uint64_t v25 = v12->i64[0];
            v12->i64[0] = *(void *)v16;
            *(void *)uint64_t v16 = v25;
          }
        }
      }
      else
      {
        uint64_t v20 = v12->i64[0];
        if (v17 >= v19)
        {
          v12->i64[0] = *(void *)v16;
          *(void *)uint64_t v16 = v20;
          if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v20, 32)) {
            goto LABEL_23;
          }
          *(void *)uint64_t v16 = a2[-1].i64[1];
        }
        else
        {
          v12->i64[0] = a2[-1].i64[1];
        }
        a2[-1].i64[1] = v20;
      }
LABEL_23:
      uint64_t v28 = &v12->i8[8 * v15];
      unsigned int v30 = *((_DWORD *)v28 - 2);
      unint64_t v29 = v28 - 8;
      unint64_t v31 = (unsigned int *)(v29 + 4);
      unint64_t v32 = *((unsigned int *)v29 + 1) | ((unint64_t)v30 << 32);
      unint64_t v33 = a2[-1].u32[1] | ((unint64_t)a2[-1].u32[0] << 32);
      if (v32 >= (v12->u32[3] | ((unint64_t)v12->u32[2] << 32)))
      {
        if (v33 < v32)
        {
          uint64_t v35 = *(void *)v29;
          *(void *)unint64_t v29 = a2[-1].i64[0];
          a2[-1].i64[0] = v35;
          if ((*v31 | ((unint64_t)*(unsigned int *)v29 << 32)) < (v12->u32[3] | ((unint64_t)v12->u32[2] << 32)))
          {
            uint64_t v36 = v12->i64[1];
            v12->i64[1] = *(void *)v29;
            *(void *)unint64_t v29 = v36;
          }
        }
      }
      else
      {
        uint64_t v34 = v12->i64[1];
        if (v33 >= v32)
        {
          v12->i64[1] = *(void *)v29;
          *(void *)unint64_t v29 = v34;
          if ((a2[-1].u32[1] | ((unint64_t)a2[-1].u32[0] << 32)) >= __ROR8__(v34, 32)) {
            goto LABEL_37;
          }
          *(void *)unint64_t v29 = a2[-1].i64[0];
        }
        else
        {
          v12->i64[1] = a2[-1].i64[0];
        }
        a2[-1].i64[0] = v34;
      }
LABEL_37:
      uint64_t v38 = &v12->i8[8 * v15];
      unsigned int v40 = *((_DWORD *)v38 + 2);
      long long v39 = (unsigned int *)(v38 + 8);
      uint64_t v41 = v39 + 1;
      unint64_t v42 = v39[1] | ((unint64_t)v40 << 32);
      unint64_t v43 = a2[-2].u32[3] | ((unint64_t)a2[-2].u32[2] << 32);
      if (v42 >= (v12[1].u32[1] | ((unint64_t)v12[1].u32[0] << 32)))
      {
        if (v43 < v42)
        {
          uint64_t v45 = *(void *)v39;
          *(void *)long long v39 = a2[-2].i64[1];
          a2[-2].i64[1] = v45;
          if ((*v41 | ((unint64_t)*v39 << 32)) < (v12[1].u32[1] | ((unint64_t)v12[1].u32[0] << 32)))
          {
            uint64_t v46 = v12[1].i64[0];
            v12[1].i64[0] = *(void *)v39;
            *(void *)long long v39 = v46;
          }
        }
      }
      else
      {
        uint64_t v44 = v12[1].i64[0];
        if (v43 >= v42)
        {
          v12[1].i64[0] = *(void *)v39;
          *(void *)long long v39 = v44;
          if ((a2[-2].u32[3] | ((unint64_t)a2[-2].u32[2] << 32)) >= __ROR8__(v44, 32)) {
            goto LABEL_46;
          }
          *(void *)long long v39 = a2[-2].i64[1];
        }
        else
        {
          v12[1].i64[0] = a2[-2].i64[1];
        }
        a2[-2].i64[1] = v44;
      }
LABEL_46:
      unint64_t v47 = *v18 | ((unint64_t)*v16 << 32);
      unint64_t v48 = *v31 | ((unint64_t)*(unsigned int *)v29 << 32);
      unint64_t v49 = *v41 | ((unint64_t)*v39 << 32);
      if (v47 >= v48)
      {
        uint64_t v50 = *(void *)v16;
        if (v49 < v47)
        {
          uint64_t v51 = *(void *)v39;
          *(void *)uint64_t v16 = *(void *)v39;
          *(void *)long long v39 = v50;
          uint64_t v50 = v51;
          if ((*v18 | (unint64_t)(v51 << 32)) < v48)
          {
            uint64_t v52 = *(void *)v29;
            *(void *)unint64_t v29 = v51;
            *(void *)uint64_t v16 = v52;
LABEL_54:
            uint64_t v50 = v52;
          }
        }
      }
      else
      {
        uint64_t v50 = *(void *)v29;
        if (v49 < v47)
        {
          *(void *)unint64_t v29 = *(void *)v39;
          *(void *)long long v39 = v50;
          uint64_t v50 = *(void *)v16;
          goto LABEL_55;
        }
        *(void *)unint64_t v29 = *(void *)v16;
        *(void *)uint64_t v16 = v50;
        if (v49 < __ROR8__(v50, 32))
        {
          uint64_t v52 = *(void *)v39;
          *(void *)uint64_t v16 = *(void *)v39;
          *(void *)long long v39 = v50;
          goto LABEL_54;
        }
      }
LABEL_55:
      uint64_t v53 = v12->i64[0];
      v12->i64[0] = v50;
      *(void *)uint64_t v16 = v53;
      --a4;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_33:
      uint64_t v37 = v12->i64[0];
LABEL_57:
      uint64_t v54 = 0;
      unint64_t v55 = __ROR8__(v37, 32);
      do
      {
        unint64_t v56 = v12->u32[v54 + 3] | ((unint64_t)v12->u32[v54 + 2] << 32);
        v54 += 2;
      }
      while (v56 < v55);
      uint64_t v57 = &v12->i8[v54 * 4];
      uint64_t v58 = a2;
      if (v54 == 2)
      {
        uint64_t v58 = a2;
        do
        {
          if (v57 >= (char *)v58) {
            break;
          }
          uint64_t v61 = v58[-1].u32[2];
          uint64_t v62 = v58[-1].u32[3];
          uint64_t v58 = (int8x16_t *)((char *)v58 - 8);
        }
        while ((v62 | (unint64_t)(v61 << 32)) >= v55);
      }
      else
      {
        do
        {
          uint64_t v59 = v58[-1].u32[2];
          uint64_t v60 = v58[-1].u32[3];
          uint64_t v58 = (int8x16_t *)((char *)v58 - 8);
        }
        while ((v60 | (unint64_t)(v59 << 32)) >= v55);
      }
      if (v57 >= (char *)v58)
      {
        uint64_t v70 = v57 - 8;
        if (v57 - 8 == (char *)v12) {
          goto LABEL_75;
        }
LABEL_74:
        v12->i64[0] = *(void *)v70;
        goto LABEL_75;
      }
      unint64_t v63 = (unint64_t)v57;
      long long v64 = (uint64_t *)v58;
      do
      {
        uint64_t v65 = *(void *)v63;
        *(void *)unint64_t v63 = *v64;
        *long long v64 = v65;
        do
        {
          uint64_t v66 = *(unsigned int *)(v63 + 8);
          uint64_t v67 = *(unsigned int *)(v63 + 12);
          v63 += 8;
        }
        while ((v67 | (unint64_t)(v66 << 32)) < v55);
        do
        {
          uint64_t v68 = *((unsigned int *)v64 - 2);
          uint64_t v69 = *((unsigned int *)v64-- - 1);
        }
        while ((v69 | (unint64_t)(v68 << 32)) >= v55);
      }
      while (v63 < (unint64_t)v64);
      uint64_t v70 = (char *)(v63 - 8);
      if ((int8x16_t *)(v63 - 8) != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *(void *)uint64_t v70 = v37;
      if (v57 < (char *)v58) {
        goto LABEL_78;
      }
      BOOL v71 = sub_2A9084(v12, (int8x16_t *)v70);
      uint64_t v12 = (int8x16_t *)(v70 + 8);
      if (sub_2A9084((int8x16_t *)(v70 + 8), a2)) {
        break;
      }
      if (!v71)
      {
LABEL_78:
        sub_2A875C(a1, v70, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = (int8x16_t *)(v70 + 8);
      }
    }
    a2 = (int8x16_t *)v70;
    if (!v71) {
      continue;
    }
    return result;
  }
}

BOOL sub_2A9084(int8x16_t *a1, int8x16_t *a2)
{
  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= (a1->u32[1] | ((unint64_t)a1->u32[0] << 32))) {
        return 1;
      }
      uint64_t v3 = a1->i64[0];
      goto LABEL_7;
    case 3:
      unint64_t v4 = a1->u32[3] | ((unint64_t)a1->u32[2] << 32);
      unint64_t v5 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
      if (v4 >= (a1->u32[1] | ((unint64_t)a1->u32[0] << 32)))
      {
        if (v5 < v4)
        {
          uint64_t v11 = a1->i64[1];
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v11;
          if ((a1->u32[3] | ((unint64_t)a1->u32[2] << 32)) < (a1->u32[1] | ((unint64_t)a1->u32[0] << 32)))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
            return 1;
          }
        }
      }
      else
      {
        uint64_t v3 = a1->i64[0];
        if (v5 < v4)
        {
LABEL_7:
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v3;
          return 1;
        }
        a1->i64[0] = a1->i64[1];
        a1->i64[1] = v3;
        if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) < __ROR8__(v3, 32))
        {
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v3;
          return 1;
        }
      }
      return 1;
    case 4:
      sub_2A9374((unsigned int *)a1, &a1->u32[2], (unsigned int *)&a1[1], &a2[-1].u32[2]);
      return 1;
    case 5:
      sub_2A94B0((unsigned int *)a1, &a1->u32[2], (unsigned int *)&a1[1], &a1[1].u32[2], &a2[-1].u32[2]);
      return 1;
    default:
      BOOL v6 = a1 + 1;
      unint64_t v7 = a1->u32[3] | ((unint64_t)a1->u32[2] << 32);
      unint64_t v8 = a1->u32[1] | ((unint64_t)a1->u32[0] << 32);
      unint64_t v9 = a1[1].u32[1] | ((unint64_t)a1[1].u32[0] << 32);
      if (v7 >= v8)
      {
        if (v9 < v7)
        {
          uint64_t v13 = a1->i64[1];
          uint64_t v12 = a1[1].i64[0];
          a1->i64[1] = v12;
          a1[1].i64[0] = v13;
          if (__ROR8__(v12, 32) < v8)
          {
            uint64_t v14 = a1->i64[0];
            a1->i64[0] = v12;
            a1->i64[1] = v14;
          }
        }
      }
      else
      {
        uint64_t v10 = a1->i64[0];
        if (v9 >= v7)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v10;
          if (v9 >= __ROR8__(v10, 32)) {
            goto LABEL_25;
          }
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v10;
      }
LABEL_25:
      unint64_t v15 = &a1[1].u32[2];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while ((v15[1] | ((unint64_t)*v15 << 32)) >= (v6->u32[1] | ((unint64_t)v6->u32[0] << 32)))
  {
LABEL_34:
    BOOL v6 = (int8x16_t *)v15;
    v16 += 8;
    v15 += 2;
    if (v15 == (unsigned int *)a2) {
      return 1;
    }
  }
  uint64_t v18 = *(void *)v15;
  unint64_t v19 = __ROR8__(*(void *)v15, 32);
  uint64_t v20 = v16;
  do
  {
    *(uint64_t *)((char *)&a1[1].i64[1] + v20) = *(uint64_t *)((char *)a1[1].i64 + v20);
    if (v20 == -16)
    {
      a1->i64[0] = v18;
      if (++v17 != 8) {
        goto LABEL_34;
      }
      return v15 + 2 == (unsigned int *)a2;
    }
    unint64_t v21 = *(unsigned int *)((char *)&a1->u32[3] + v20) | ((unint64_t)*(unsigned int *)((char *)&a1->u32[2] + v20) << 32);
    v20 -= 8;
  }
  while (v19 < v21);
  *(uint64_t *)((char *)&a1[1].i64[1] + v20) = v18;
  if (++v17 != 8) {
    goto LABEL_34;
  }
  return v15 + 2 == (unsigned int *)a2;
}

unsigned int *sub_2A9374(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unint64_t v4 = a2[1] | ((unint64_t)*a2 << 32);
  unint64_t v5 = a3[1];
  unint64_t v6 = v5 | ((unint64_t)*a3 << 32);
  if (v4 >= (result[1] | ((unint64_t)*result << 32)))
  {
    if (v6 < v4)
    {
      unint64_t v8 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v8;
      if ((a2[1] | ((unint64_t)*a2 << 32)) >= (result[1] | ((unint64_t)*result << 32)))
      {
        unint64_t v5 = HIDWORD(v8);
      }
      else
      {
        unint64_t v5 = *(void *)result;
        *(void *)int8x16_t result = *(void *)a2;
        *(void *)a2 = v5;
        LODWORD(v5) = a3[1];
      }
    }
  }
  else
  {
    unint64_t v7 = *(void *)result;
    if (v6 < v4)
    {
      *(void *)int8x16_t result = *(void *)a3;
LABEL_9:
      *(void *)a3 = v7;
      unint64_t v5 = HIDWORD(v7);
      goto LABEL_11;
    }
    *(void *)int8x16_t result = *(void *)a2;
    *(void *)a2 = v7;
    LODWORD(v5) = a3[1];
    if ((v5 | ((unint64_t)*a3 << 32)) < __ROR8__(v7, 32))
    {
      *(void *)a2 = *(void *)a3;
      goto LABEL_9;
    }
  }
LABEL_11:
  if ((a4[1] | ((unint64_t)*a4 << 32)) < (v5 | ((unint64_t)*a3 << 32)))
  {
    uint64_t v9 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v9;
    if ((a3[1] | ((unint64_t)*a3 << 32)) < (a2[1] | ((unint64_t)*a2 << 32)))
    {
      uint64_t v10 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v10;
      if ((a2[1] | ((unint64_t)*a2 << 32)) < (result[1] | ((unint64_t)*result << 32)))
      {
        uint64_t v11 = *(void *)result;
        *(void *)int8x16_t result = *(void *)a2;
        *(void *)a2 = v11;
      }
    }
  }
  return result;
}

unsigned int *sub_2A94B0(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  int8x16_t result = sub_2A9374(a1, a2, a3, a4);
  if ((a5[1] | ((unint64_t)*a5 << 32)) < (a4[1] | ((unint64_t)*a4 << 32)))
  {
    uint64_t v11 = *(void *)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v11;
    if ((a4[1] | ((unint64_t)*a4 << 32)) < (a3[1] | ((unint64_t)*a3 << 32)))
    {
      uint64_t v12 = *(void *)a3;
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v12;
      if ((a3[1] | ((unint64_t)*a3 << 32)) < (a2[1] | ((unint64_t)*a2 << 32)))
      {
        uint64_t v13 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v13;
        if ((a2[1] | ((unint64_t)*a2 << 32)) < (a1[1] | ((unint64_t)*a1 << 32)))
        {
          uint64_t v14 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v14;
        }
      }
    }
  }
  return result;
}

unsigned int *sub_2A9598(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    unint64_t v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[2 * v10];
      do
      {
        sub_2A97BC((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if ((v14[1] | ((unint64_t)*v14 << 32)) < (a1[1] | ((unint64_t)*a1 << 32)))
        {
          uint64_t v15 = *(void *)v14;
          *(void *)uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          sub_2A97BC((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      do
      {
        uint64_t v18 = 0;
        uint64_t v19 = *(void *)a1;
        uint64_t v20 = a1;
        do
        {
          unint64_t v21 = &v20[2 * v18 + 2];
          uint64_t v22 = (2 * v18) | 1;
          uint64_t v23 = 2 * v18 + 2;
          if (v23 < v16 && (v21[1] | ((unint64_t)*v21 << 32)) < (v21[3] | ((unint64_t)v21[2] << 32)))
          {
            v21 += 2;
            uint64_t v22 = v23;
          }
          *(void *)uint64_t v20 = *(void *)v21;
          uint64_t v20 = v21;
          uint64_t v18 = v22;
        }
        while (v22 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v21 == v6)
        {
          *(void *)unint64_t v21 = v19;
        }
        else
        {
          *(void *)unint64_t v21 = *(void *)v6;
          *(void *)unint64_t v6 = v19;
          uint64_t v24 = (char *)v21 - (char *)a1 + 8;
          if (v24 >= 9)
          {
            unint64_t v25 = (((unint64_t)v24 >> 3) - 2) >> 1;
            uint64_t v26 = &a1[2 * v25];
            if ((v26[1] | ((unint64_t)*v26 << 32)) < (v21[1] | ((unint64_t)*v21 << 32)))
            {
              uint64_t v27 = *(void *)v21;
              unint64_t v28 = __ROR8__(*(void *)v21, 32);
              do
              {
                unint64_t v29 = v21;
                unint64_t v21 = v26;
                *(void *)unint64_t v29 = *(void *)v26;
                if (!v25) {
                  break;
                }
                unint64_t v25 = (v25 - 1) >> 1;
                uint64_t v26 = &a1[2 * v25];
              }
              while ((v26[1] | ((unint64_t)*v26 << 32)) < v28);
              *(void *)unint64_t v21 = v27;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_2A97BC(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (a3 < 2) {
    return result;
  }
  uint64_t v4 = (uint64_t)a4 - result;
  int64_t v5 = (unint64_t)(a3 - 2) >> 1;
  if (v5 < ((uint64_t)a4 - result) >> 3) {
    return result;
  }
  uint64_t v6 = v4 >> 2;
  uint64_t v7 = (v4 >> 2) + 1;
  uint64_t v8 = (unsigned int *)(result + 8 * v7);
  uint64_t v9 = v6 + 2;
  if (v9 >= a3)
  {
    if ((v8[1] | ((unint64_t)*v8 << 32)) < (a4[1] | ((unint64_t)*a4 << 32))) {
      return result;
    }
  }
  else
  {
    uint64_t v10 = *v8;
    unint64_t v11 = v8[1] | (unint64_t)(v10 << 32);
    uint64_t v12 = v8[2];
    unint64_t v13 = v8[3] | (unint64_t)(v12 << 32);
    if (v11 >= v13) {
      uint64_t v10 = v10;
    }
    else {
      uint64_t v10 = v12;
    }
    if (v11 < v13)
    {
      v8 += 2;
      uint64_t v7 = v9;
    }
    if ((v8[1] | (unint64_t)(v10 << 32)) < (a4[1] | ((unint64_t)*a4 << 32))) {
      return result;
    }
  }
  uint64_t v14 = *(void *)a4;
  unint64_t v15 = __ROR8__(*(void *)a4, 32);
  while (1)
  {
    uint64_t v20 = a4;
    a4 = v8;
    void *v20 = *(void *)v8;
    if (v5 < v7) {
      break;
    }
    uint64_t v21 = (2 * v7) | 1;
    uint64_t v8 = (unsigned int *)(result + 8 * v21);
    uint64_t v7 = 2 * v7 + 2;
    if (v7 < a3)
    {
      uint64_t v16 = *v8;
      unint64_t v17 = v8[1] | (unint64_t)(v16 << 32);
      uint64_t v18 = v8[2];
      unint64_t v19 = v8[3] | (unint64_t)(v18 << 32);
      if (v17 >= v19) {
        uint64_t v16 = v16;
      }
      else {
        uint64_t v16 = v18;
      }
      if (v17 >= v19) {
        uint64_t v7 = v21;
      }
      else {
        v8 += 2;
      }
      if ((v8[1] | (unint64_t)(v16 << 32)) < v15) {
        break;
      }
    }
    else
    {
      uint64_t v7 = v21;
      if ((v8[1] | ((unint64_t)*v8 << 32)) < v15) {
        break;
      }
    }
  }
  *(void *)a4 = v14;
  return result;
}

void ***sub_2A98DC(void ***a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v6 = (char *)(*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  uint64_t v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v9 = (char *)*v4;
    uint64_t v10 = v6 - (unsigned char *)*v4;
    uint64_t v11 = v10 >> 3;
    unint64_t v12 = (v10 >> 3) + 1;
    if (v12 >> 61) {
      sub_2E00();
    }
    uint64_t v13 = v5 - (void)v9;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        sub_188D718();
      }
      unint64_t v15 = operator new(8 * v14);
    }
    else
    {
      unint64_t v15 = 0;
    }
    uint64_t v16 = &v15[8 * v11];
    void *v16 = *a2;
    uint64_t v8 = v16 + 1;
    if (v6 != v9)
    {
      unint64_t v17 = v6 - v9 - 8;
      if (v17 < 0x58) {
        goto LABEL_28;
      }
      if ((unint64_t)(v6 - v15 - v10) < 0x20) {
        goto LABEL_28;
      }
      uint64_t v18 = (v17 >> 3) + 1;
      uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v7 = &v6[-v19];
      uint64_t v16 = (void *)((char *)v16 - v19);
      uint64_t v20 = &v15[8 * v11 - 16];
      uint64_t v21 = (long long *)(v6 - 16);
      uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        _OWORD *v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          uint64_t v24 = *((void *)v7 - 1);
          v7 -= 8;
          *--uint64_t v16 = v24;
        }
        while (v7 != v9);
      }
      uint64_t v7 = (char *)*v4;
    }
    std::string *v4 = v16;
    v4[1] = v8;
    v4[2] = &v15[8 * v14];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(void *)uint64_t v6 = *a2;
    uint64_t v8 = v6 + 8;
  }
  v4[1] = v8;
  return a1;
}

void sub_2A9A54(int *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v3 >= 5u && (uint64_t v4 = v3[2]) != 0) {
    unint64_t v5 = (void ***)((char *)a1 + v4 + *(unsigned int *)((char *)a1 + v4));
  }
  else {
    unint64_t v5 = 0;
  }
  sub_2A9B88(v5, (uint64_t)&__p);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_4D6D0(a2, (uint64_t)__p, (uint64_t)v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (unsigned char *)__p) >> 3));
  uint64_t v6 = (void **)__p;
  if (__p)
  {
    uint64_t v7 = v18;
    uint64_t v8 = __p;
    if (v18 != __p)
    {
      uint64_t v9 = v18;
      do
      {
        unint64_t v12 = (char *)*(v9 - 3);
        v9 -= 3;
        uint64_t v11 = v12;
        if (v12)
        {
          uint64_t v13 = (char *)*(v7 - 2);
          uint64_t v10 = v11;
          if (v13 != v11)
          {
            unint64_t v14 = (char *)*(v7 - 2);
            do
            {
              uint64_t v16 = (void *)*((void *)v14 - 3);
              v14 -= 24;
              unint64_t v15 = v16;
              if (v16)
              {
                *((void *)v13 - 2) = v15;
                operator delete(v15);
              }
              uint64_t v13 = v14;
            }
            while (v14 != v11);
            uint64_t v10 = *v9;
          }
          *(v7 - 2) = v11;
          operator delete(v10);
        }
        uint64_t v7 = v9;
      }
      while (v9 != v6);
      uint64_t v8 = __p;
    }
    uint64_t v18 = v6;
    operator delete(v8);
  }
}

void sub_2A9B74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4CBF8((void ***)va);
  _Unwind_Resume(a1);
}

void ***sub_2A9B88@<X0>(void ***result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = 0;
  long long v5 = 0u;
  if (result)
  {
    uint64_t v3 = (unsigned int *)result;
    sub_2A9C2C((uint64_t)&v5, *(unsigned int *)result);
    int8x16_t result = sub_2A9E64(v3, (void ***)&v5, *((uint64_t *)&v5 + 1));
    uint64_t v4 = v6;
    *(_OWORD *)a2 = v5;
    *(void *)(a2 + 16) = v4;
  }
  else
  {
    *(_OWORD *)a2 = 0uLL;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

void sub_2A9C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9)
{
  if (a9) {
    sub_20A6CA8(&a9, a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_2A9C2C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_2E00();
  }
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = 24 * a2;
  uint64_t v6 = (char *)operator new(24 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[24 * ((v4 - (char *)v2) / 24)];
  if (v4 == (char *)v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_19;
  }
  uint64_t v9 = &v6[24 * ((v4 - (char *)v2) / 24)];
  do
  {
    long long v10 = *(_OWORD *)(v4 - 24);
    v4 -= 24;
    *(_OWORD *)(v9 - 24) = v10;
    v9 -= 24;
    *((void *)v9 + 2) = *((void *)v4 + 2);
    *(void *)uint64_t v4 = 0;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
  }
  while (v4 != (char *)v2);
  uint64_t v11 = *(void ***)a1;
  uint64_t v2 = *(void ***)(a1 + 8);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v11)
  {
    unint64_t v12 = v2;
    do
    {
      unint64_t v15 = (char *)*(v12 - 3);
      v12 -= 3;
      unint64_t v14 = v15;
      if (v15)
      {
        uint64_t v16 = (char *)*(v2 - 2);
        uint64_t v13 = v14;
        if (v16 != v14)
        {
          unint64_t v17 = (char *)*(v2 - 2);
          do
          {
            uint64_t v19 = (void *)*((void *)v17 - 3);
            v17 -= 24;
            uint64_t v18 = v19;
            if (v19)
            {
              *((void *)v16 - 2) = v18;
              operator delete(v18);
            }
            uint64_t v16 = v17;
          }
          while (v17 != v14);
          uint64_t v13 = *v12;
        }
        *(v2 - 2) = v14;
        operator delete(v13);
      }
      uint64_t v2 = v12;
    }
    while (v12 != v11);
    uint64_t v2 = v11;
  }
  if (v2)
  {
LABEL_19:
    operator delete(v2);
  }
}

uint64_t sub_2A9DB0(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 != v2)
  {
    uint64_t v4 = *(void ***)(a1 + 16);
    do
    {
      uint64_t v7 = (char *)*(v4 - 3);
      v4 -= 3;
      uint64_t v6 = v7;
      *(void *)(a1 + 16) = v4;
      if (v7)
      {
        uint64_t v8 = (char *)*(v3 - 2);
        uint64_t v5 = v6;
        if (v8 != v6)
        {
          uint64_t v9 = (char *)*(v3 - 2);
          do
          {
            uint64_t v11 = (void *)*((void *)v9 - 3);
            v9 -= 24;
            long long v10 = v11;
            if (v11)
            {
              *((void *)v8 - 2) = v10;
              operator delete(v10);
            }
            uint64_t v8 = v9;
          }
          while (v9 != v6);
          uint64_t v5 = *v4;
        }
        *(v3 - 2) = v6;
        operator delete(v5);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v3 = v4;
    }
    while (v4 != v2);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ***sub_2A9E64(unsigned int *a1, void ***a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = *a1;
  if (v5)
  {
    uint64_t v7 = &v6[v5];
    do
    {
      sub_2A9F64((int *)((char *)v6 + *v6), &__p);
      uint64_t v9 = sub_2AA290(a2, a3, &__p);
      unint64_t v10 = __p.n128_u64[0];
      if (__p.n128_u64[0])
      {
        unint64_t v11 = __p.n128_u64[1];
        uint64_t v8 = (void *)__p.n128_u64[0];
        if (__p.n128_u64[1] != __p.n128_u64[0])
        {
          unint64_t v12 = __p.n128_u64[1];
          do
          {
            unint64_t v14 = *(void **)(v12 - 24);
            v12 -= 24;
            uint64_t v13 = v14;
            if (v14)
            {
              *(void *)(v11 - 16) = v13;
              operator delete(v13);
            }
            unint64_t v11 = v12;
          }
          while (v12 != v10);
          uint64_t v8 = (void *)__p.n128_u64[0];
        }
        __p.n128_u64[1] = v10;
        operator delete(v8);
      }
      a3 = (uint64_t)(v9 + 3);
      ++v6;
    }
    while (v6 != v7);
  }
  return a2;
}

void sub_2A9F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9) {
    sub_20A6D4C((uint64_t)&a10, a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_2A9F64(int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v3 >= 5u && (uint64_t v4 = v3[2]) != 0) {
    uint64_t v5 = (char **)((char *)a1 + v4 + *(unsigned int *)((char *)a1 + v4));
  }
  else {
    uint64_t v5 = 0;
  }
  sub_2AA040(v5, (uint64_t)&__p);
  sub_4D4C4(a2, (uint64_t *)&__p);
  uint64_t v6 = (char *)__p;
  if (__p)
  {
    uint64_t v7 = v13;
    uint64_t v8 = __p;
    if (v13 != __p)
    {
      uint64_t v9 = v13;
      do
      {
        unint64_t v11 = (void *)*((void *)v9 - 3);
        v9 -= 24;
        unint64_t v10 = v11;
        if (v11)
        {
          *((void *)v7 - 2) = v10;
          operator delete(v10);
        }
        uint64_t v7 = v9;
      }
      while (v9 != v6);
      uint64_t v8 = __p;
    }
    uint64_t v13 = v6;
    operator delete(v8);
  }
}

void sub_2AA024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    sub_20A6DA8((uint64_t)&a11, a11);
  }
  _Unwind_Resume(exception_object);
}

char **sub_2AA040@<X0>(char **result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = 0;
  long long v6 = 0u;
  if (result)
  {
    uint64_t v3 = result;
    sub_2A6D40((uint64_t)&v6, *(unsigned int *)result);
    unsigned int v4 = *(_DWORD *)v3;
    uint64_t v9 = (unsigned int *)v3 + 1;
    uint64_t v8 = (unsigned int *)v3 + v4 + 1;
    int8x16_t result = sub_2AA0F4(&v9, &v8, (char **)&v6, *((uint64_t *)&v6 + 1));
    uint64_t v5 = v7;
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = v5;
  }
  else
  {
    *(_OWORD *)a2 = 0uLL;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

void sub_2AA0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    sub_20A6DA8((uint64_t)&a9, a9);
  }
  _Unwind_Resume(exception_object);
}

char **sub_2AA0F4(unsigned int **a1, unsigned int **a2, char **a3, uint64_t a4)
{
  for (uint64_t i = *a1; i != *a2; *a1 = i)
  {
    uint64_t v9 = (int *)((char *)i + *i);
    unint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
    if (*v10 >= 5u
      && (uint64_t v11 = v10[2]) != 0
      && (v12 = (unsigned int *)((char *)v9 + v11 + *(unsigned int *)((char *)v9 + v11)), uint64_t v13 = *v12, v13))
    {
      unint64_t v14 = (char *)operator new(12 * v13);
      *(void *)&long long v24 = v14;
      *((void *)&v24 + 1) = v14;
      unint64_t v25 = &v14[12 * v13];
      unint64_t v15 = v12 + 1;
      uint64_t v16 = (uint64_t)&v12[2 * v13 + 1];
      do
      {
        LODWORD(v17) = v15[1];
        if (v17 >= 0xFFFFFFFE) {
          uint64_t v17 = 4294967294;
        }
        else {
          uint64_t v17 = v17;
        }
        unint64_t v26 = *v15 | (unint64_t)(v17 << 32);
        int v27 = 0x7FFFFFFF;
        unint64_t v14 = sub_32ACC((char **)&v24, (uint64_t)v14, (uint64_t)&v26) + 12;
        v15 += 2;
      }
      while (v15 != (unsigned int *)v16);
      long long v18 = v24;
      uint64_t v19 = v25;
    }
    else
    {
      uint64_t v19 = 0;
      long long v18 = 0uLL;
    }
    *(_OWORD *)__n128 __p = v18;
    long long v23 = v19;
    uint64_t v20 = sub_2A6EF0(a3, a4, (__n128 *)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    a4 = (uint64_t)(v20 + 24);
    uint64_t i = *a1 + 1;
  }
  return a3;
}

void sub_2AA260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **sub_2AA290(void ***a1, uint64_t a2, __n128 *a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 24;
  uint64_t v8 = &(*a1)[3 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v5) >> 3) + 1;
    if (v22 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v5) >> 3);
    uint64_t v24 = 2 * v23;
    if (2 * v23 <= v22) {
      uint64_t v24 = v22;
    }
    if (v23 >= 0x555555555555555) {
      unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v25 = v24;
    }
    unint64_t v55 = a1 + 2;
    if (v25)
    {
      if (v25 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      unint64_t v26 = (void **)operator new(24 * v25);
    }
    else
    {
      unint64_t v26 = 0;
    }
    uint64_t v51 = v26;
    uint64_t v52 = &v26[3 * v7];
    uint64_t v53 = v52;
    uint64_t v54 = (char *)&v26[3 * v25];
    sub_2AA678((uint64_t)&v51, a3);
    unint64_t v33 = v52;
    uint64_t v34 = *a1;
    uint64_t v35 = v52;
    if (*a1 != v8)
    {
      uint64_t v35 = v52;
      uint64_t v36 = v8;
      do
      {
        *(v35 - 3) = 0;
        *(v35 - 2) = 0;
        v35 -= 3;
        void v35[2] = 0;
        long long v37 = *(_OWORD *)(v36 - 3);
        v36 -= 3;
        *(_OWORD *)uint64_t v35 = v37;
        void v35[2] = v36[2];
        *uint64_t v36 = 0;
        v36[1] = 0;
        v36[2] = 0;
      }
      while (v36 != v34);
    }
    uint64_t v52 = v35;
    uint64_t v38 = a1[1];
    long long v39 = v53;
    if (v38 != v8)
    {
      do
      {
        *long long v39 = 0;
        v39[1] = 0;
        uint64_t v39[2] = 0;
        *(_OWORD *)long long v39 = *(_OWORD *)v8;
        uint64_t v39[2] = v8[2];
        unsigned int *v8 = 0;
        v8[1] = 0;
        void v8[2] = 0;
        v39 += 3;
        v8 += 3;
      }
      while (v8 != v38);
      uint64_t v35 = v52;
      uint64_t v8 = a1[1];
    }
    unsigned int v40 = *a1;
    *a1 = v35;
    a1[1] = v39;
    uint64_t v41 = (char *)a1[2];
    a1[2] = (void **)v54;
    uint64_t v53 = v8;
    uint64_t v54 = v41;
    uint64_t v51 = v40;
    uint64_t v52 = v40;
    if (v8 != v40)
    {
      unint64_t v42 = v8;
      do
      {
        uint64_t v45 = (char *)*(v42 - 3);
        v42 -= 3;
        uint64_t v44 = v45;
        uint64_t v53 = v42;
        if (v45)
        {
          uint64_t v46 = (char *)*(v8 - 2);
          unint64_t v43 = v44;
          if (v46 != v44)
          {
            unint64_t v47 = (char *)*(v8 - 2);
            do
            {
              unint64_t v49 = (void *)*((void *)v47 - 3);
              v47 -= 24;
              unint64_t v48 = v49;
              if (v49)
              {
                *((void *)v46 - 2) = v48;
                operator delete(v48);
              }
              uint64_t v46 = v47;
            }
            while (v47 != v44);
            unint64_t v43 = *v42;
          }
          *(v8 - 2) = v44;
          operator delete(v43);
          unint64_t v42 = v53;
        }
        uint64_t v8 = v42;
      }
      while (v42 != v40);
      uint64_t v8 = v51;
    }
    if (v8) {
      operator delete(v8);
    }
    return v33;
  }
  else if (v8 == (void **)v6)
  {
    unsigned int *v8 = 0;
    v8[1] = 0;
    void v8[2] = 0;
    *(__n128 *)uint64_t v8 = *a3;
    void v8[2] = (void *)a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a1[1] = v8 + 3;
  }
  else
  {
    unint64_t v10 = v6 - 24;
    uint64_t v11 = a1[1];
    if (v6 >= 0x18)
    {
      unint64_t v12 = v6 - 24;
      uint64_t v11 = a1[1];
      do
      {
        *uint64_t v11 = 0;
        v11[1] = 0;
        void v11[2] = 0;
        *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
        void v11[2] = *(void **)(v12 + 16);
        *(void *)unint64_t v12 = 0;
        *(void *)(v12 + 8) = 0;
        *(void *)(v12 + 16) = 0;
        v11 += 3;
        v12 += 24;
      }
      while (v12 < v6);
    }
    a1[1] = v11;
    if ((void **)v6 != v8 + 3)
    {
      unint64_t v13 = v6;
      do
      {
        uint64_t v17 = *(char **)(v13 - 24);
        v13 -= 24;
        uint64_t v16 = v17;
        if (v17)
        {
          long long v18 = *(char **)(v6 - 16);
          unint64_t v14 = v16;
          if (v18 != v16)
          {
            uint64_t v19 = *(char **)(v6 - 16);
            do
            {
              uint64_t v21 = (void *)*((void *)v19 - 3);
              v19 -= 24;
              uint64_t v20 = v21;
              if (v21)
              {
                *((void *)v18 - 2) = v20;
                operator delete(v20);
              }
              long long v18 = v19;
            }
            while (v19 != v16);
            unint64_t v14 = *(char **)v13;
          }
          *(void *)(v6 - 16) = v16;
          operator delete(v14);
          *(void *)unint64_t v13 = 0;
          *(void *)(v13 + 8) = 0;
          *(void *)(v13 + 16) = 0;
        }
        *(_OWORD *)(v6 - 24) = *(_OWORD *)(v10 - 24);
        unint64_t v15 = (void **)(v10 - 24);
        *(void *)(v6 - 8) = *(void *)(v10 - 8);
        *unint64_t v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
        unint64_t v6 = v13;
        v10 -= 24;
      }
      while (v15 != v8);
    }
    int v27 = (char *)*v8;
    if (*v8)
    {
      unint64_t v28 = (char *)v8[1];
      unint64_t v29 = *v8;
      if (v28 != v27)
      {
        unsigned int v30 = (char *)v8[1];
        do
        {
          unint64_t v32 = (void *)*((void *)v30 - 3);
          v30 -= 24;
          unint64_t v31 = v32;
          if (v32)
          {
            *((void *)v28 - 2) = v31;
            operator delete(v31);
          }
          unint64_t v28 = v30;
        }
        while (v30 != v27);
        unint64_t v29 = *v8;
      }
      v8[1] = v27;
      operator delete(v29);
      unsigned int *v8 = 0;
      v8[1] = 0;
      void v8[2] = 0;
    }
    *(__n128 *)uint64_t v8 = *a3;
    void v8[2] = (void *)a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
  }
  return v8;
}

void sub_2AA664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2A9DB0((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_2AA678(uint64_t a1, __n128 *a2)
{
  unsigned int v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    uint64_t v5 = *(char **)a1;
    unint64_t v6 = *(char **)(a1 + 8);
    if ((unint64_t)v6 <= *(void *)a1)
    {
      unint64_t v18 = 0x5555555555555556 * ((v4 - v5) >> 3);
      if (v4 == v5) {
        unint64_t v18 = 1;
      }
      if (v18 >= 0xAAAAAAAAAAAAAABLL) {
        sub_188D718();
      }
      unint64_t v19 = v18 >> 2;
      uint64_t v20 = 24 * v18;
      uint64_t v21 = (char *)operator new(24 * v18);
      unint64_t v22 = &v21[24 * v19];
      unint64_t v23 = &v21[v20];
      if (v4 == v6)
      {
        *(void *)a1 = v21;
        *(void *)(a1 + 8) = v22;
        *(void *)(a1 + 16) = v22;
        *(void *)(a1 + 24) = v23;
      }
      else
      {
        uint64_t v24 = &v22[v4 - v6];
        uint64_t v25 = 24 * v19;
        do
        {
          unint64_t v26 = &v21[v25];
          *(_OWORD *)unint64_t v26 = *(_OWORD *)v6;
          *((void *)v26 + 2) = *((void *)v6 + 2);
          *(void *)unint64_t v6 = 0;
          *((void *)v6 + 1) = 0;
          *((void *)v6 + 2) = 0;
          v25 += 24;
          v6 += 24;
        }
        while (v26 + 24 != v24);
        uint64_t v5 = *(char **)a1;
        int v27 = *(void ***)(a1 + 8);
        unint64_t v28 = *(void ***)(a1 + 16);
        *(void *)a1 = v21;
        *(void *)(a1 + 8) = v22;
        *(void *)(a1 + 16) = v24;
        *(void *)(a1 + 24) = v23;
        if (v28 != v27)
        {
          unint64_t v29 = v28;
          do
          {
            unint64_t v32 = (char *)*(v29 - 3);
            v29 -= 3;
            unint64_t v31 = v32;
            if (v32)
            {
              unint64_t v33 = (char *)*(v28 - 2);
              unsigned int v30 = v31;
              if (v33 != v31)
              {
                uint64_t v34 = (char *)*(v28 - 2);
                do
                {
                  uint64_t v36 = (void *)*((void *)v34 - 3);
                  v34 -= 24;
                  uint64_t v35 = v36;
                  if (v36)
                  {
                    *((void *)v33 - 2) = v35;
                    operator delete(v35);
                  }
                  unint64_t v33 = v34;
                }
                while (v34 != v31);
                unsigned int v30 = *v29;
              }
              *(v28 - 2) = v31;
              operator delete(v30);
            }
            unint64_t v28 = v29;
          }
          while (v29 != v27);
        }
      }
      if (v5) {
        operator delete(v5);
      }
      unsigned int v4 = *(char **)(a1 + 16);
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(void *)a1] >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      uint64_t v11 = &v6[-24 * v9];
      if (v6 != v4)
      {
        do
        {
          unint64_t v13 = *(char **)v11;
          if (*(void *)v11)
          {
            unint64_t v14 = (char *)*((void *)v11 + 1);
            unint64_t v12 = *(char **)v11;
            if (v14 != v13)
            {
              unint64_t v15 = (char *)*((void *)v11 + 1);
              do
              {
                uint64_t v17 = (void *)*((void *)v15 - 3);
                v15 -= 24;
                uint64_t v16 = v17;
                if (v17)
                {
                  *((void *)v14 - 2) = v16;
                  operator delete(v16);
                }
                unint64_t v14 = v15;
              }
              while (v15 != v13);
              unint64_t v12 = *(char **)v11;
            }
            *((void *)v11 + 1) = v13;
            operator delete(v12);
            *(void *)uint64_t v11 = 0;
            *((void *)v11 + 1) = 0;
            *((void *)v11 + 2) = 0;
          }
          *(_OWORD *)uint64_t v11 = *(_OWORD *)v6;
          *((void *)v11 + 2) = *((void *)v6 + 2);
          *(void *)unint64_t v6 = 0;
          *((void *)v6 + 1) = 0;
          *((void *)v6 + 2) = 0;
          v6 += 24;
          v11 += 24;
        }
        while (v6 != v4);
        unsigned int v4 = *(char **)(a1 + 8);
      }
      *(void *)(a1 + 8) = &v4[24 * v10];
      *(void *)(a1 + 16) = v11;
      unsigned int v4 = v11;
    }
  }
  *(void *)unsigned int v4 = 0;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  __n128 result = *a2;
  *(__n128 *)unsigned int v4 = *a2;
  *((void *)v4 + 2) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  *(void *)(a1 + 16) += 24;
  return result;
}

char *sub_2AA8EC(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)uint64_t v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    unint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      unint64_t v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      unint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        unint64_t v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        unint64_t v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v13 = (uint64_t *)((char *)v13 + v21);
          unint64_t v19 = (void *)(v5 + v21);
          unint64_t v22 = (_OWORD *)(v5 + 16);
          unint64_t v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            _OWORD *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    unsigned int v30 = (char *)operator new(8 * v29);
    unint64_t v31 = &v30[8 * v8];
    unint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    unsigned int v30 = 0;
    unint64_t v31 = (char *)(8 * v8);
    unint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    uint64_t v54 = (char *)operator new(8 * v53);
    unint64_t v31 = &v54[8 * (v53 >> 2)];
    unint64_t v32 = &v54[8 * v53];
    if (v30)
    {
      unint64_t v55 = &v54[8 * v53];
      operator delete(v30);
      unint64_t v32 = v55;
      uint64_t v34 = (char *)*a1;
      *(void *)unint64_t v31 = *a3;
      uint64_t v35 = v31 + 8;
      uint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  uint64_t v34 = (char *)v6;
  *(void *)unint64_t v31 = *a3;
  uint64_t v35 = v31 + 8;
  uint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    long long v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    long long v39 = v9;
    uint64_t v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    long long v39 = v9;
    uint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    long long v39 = &v9[-v41];
    uint64_t v36 = &v31[-v41];
    unint64_t v42 = v31 - 16;
    unint64_t v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)unint64_t v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  unint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    unint64_t v49 = v9;
    size_t v50 = v47 - v9;
    uint64_t v51 = v32;
    memmove(v35, v49, v50);
    unint64_t v32 = v51;
  }
  uint64_t v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_2AAC44(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2AAC5C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_2AAC74(uint64_t a1, uint64_t a2)
{
  return a2;
}

double sub_2AAC8C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 16) = a3;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0x7FFFFFFF;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0x7FFFFFFF;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0x7FFFFFFF;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0x7FFFFFFF;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  return result;
}

unsigned int sub_2AACDC(uint64_t *a1, uint64_t a2, int a3)
{
  unint64_t v3 = *a1;
  if (!*a1) {
    return -1;
  }
  if (*(_DWORD *)(v3 + 320) == 0x7FFFFFFF) {
    return -1;
  }
  if (*(_DWORD *)(v3 + 324) == 0x7FFFFFFF) {
    return -1;
  }
  if (*(_DWORD *)(v3 + 328) == 0x7FFFFFFF) {
    return -1;
  }
  if (!*(_DWORD *)(v3 + 332)) {
    return -1;
  }
  uint64_t v4 = *(void *)(v3 + 336);
  uint64_t v5 = *(void *)(v3 + 344);
  if (v4 == v5) {
    return -1;
  }
  if (*(void *)(v3 + 368) - *(void *)(v3 + 360) < (unint64_t)((v5 - v4) >> 3) || a3 == 0x7FFFFFFF) {
    return -1;
  }
  int64_t v11 = (unsigned int **)(a1 + 3);
  a1[4] = a1[3];
  sub_295BE0(a1[2], a2, (unint64_t *)a1 + 3);
  uint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  if (*v11 == v13)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v74);
      unint64_t v17 = sub_188FC78(&v74, (uint64_t)"Segment ", 8);
      unint64_t v18 = sub_2DD928(v17, a2);
      sub_188FC78(v18, (uint64_t)" does not have any quad nodes covering it.", 42);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      if (v73 < 0) {
        operator delete(__p[0]);
      }
      if (v77 < 0) {
        operator delete(v76);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    return -1;
  }
  unint64_t v14 = *a1;
  int v15 = *(_DWORD *)(*a1 + 320);
  double v16 = 0.0;
  if (a3 > v15)
  {
    if (*(_DWORD *)(v14 + 324) <= a3) {
      double v16 = (double)(*(_DWORD *)(v14 + 332) - 1);
    }
    else {
      double v16 = (double)(10 * (a3 - v15)) / (double)*(int *)(v14 + 328);
    }
  }
  double v19 = v16 * (double)*(int *)(v14 + 328);
  if (v19 >= 0.0)
  {
    if (v19 < 4.50359963e15)
    {
      uint64_t v20 = (uint64_t)(v19 + v19) + 1;
LABEL_31:
      double v19 = (double)(v20 >> 1);
    }
  }
  else if (v19 > -4.50359963e15)
  {
    uint64_t v20 = (uint64_t)(v19 + v19);
    if (v20 >= 1) {
      --v20;
    }
    goto LABEL_31;
  }
  int v21 = 0;
  if ((int)v19 < 0) {
    char v22 = -5;
  }
  else {
    char v22 = 5;
  }
  unsigned int v23 = (int)v19 / 10
      + v15
      + (((103 * (char)(v22 + (int)v19 % 10)) >> 15) & 1)
      + ((103 * (char)(v22 + (int)v19 % 10)) >> 10);
  BOOL v71 = a1 + 6;
  uint64_t v68 = v13;
  do
  {
    unsigned int v24 = *v12;
    char v25 = sub_511FC(**(_DWORD **)(v14 + 336)) & 0xFE;
    unsigned int v26 = v24 >> ((sub_511FC(v24) - v25) & 0xFE);
    unint64_t v27 = a1[18] + 1;
    a1[18] = v27;
    if (*((_DWORD *)a1 + 12) == v26 && *((_DWORD *)a1 + 13) == v23)
    {
      unsigned int v28 = 0;
    }
    else
    {
      if (a1[8] >= v27) {
        unint64_t v29 = v27;
      }
      else {
        unint64_t v29 = a1[8];
      }
      if (*((_DWORD *)a1 + 18) == v26 && *((_DWORD *)a1 + 19) == v23)
      {
        unsigned int v28 = 1;
      }
      else
      {
        unint64_t v30 = a1[11];
        if (v30 >= v29) {
          unint64_t v31 = v29;
        }
        else {
          unint64_t v31 = a1[11];
        }
        if (*((_DWORD *)a1 + 24) == v26 && *((_DWORD *)a1 + 25) == v23)
        {
          unsigned int v28 = 2;
        }
        else
        {
          BOOL v32 = v30 < v29;
          unint64_t v33 = a1[14];
          if (v33 >= v31) {
            unint64_t v34 = v31;
          }
          else {
            unint64_t v34 = a1[14];
          }
          if (*((_DWORD *)a1 + 30) != v26 || *((_DWORD *)a1 + 31) != v23)
          {
            _CF = v33 >= v31;
            unsigned int v44 = 2;
            if (_CF) {
              unsigned int v44 = v32;
            }
            if (a1[17] < v34) {
              unsigned int v44 = 3;
            }
            long long v45 = &v71[3 * v44];
            *(_DWORD *)long long v45 = v26;
            *((_DWORD *)v45 + 1) = v23;
            v45[2] = v27;
            *((_DWORD *)v45 + 2) = 0x7FFFFFFF;
            long long v37 = (int *)(v45 + 1);
            long long v39 = *(unsigned int **)(v14 + 336);
            uint64_t v40 = *(unsigned int **)(v14 + 344);
            unint64_t v41 = (char *)v40 - (char *)v39;
            BOOL v42 = (char *)v40 - (char *)v39 == 8;
            if ((char *)v40 - (char *)v39 < 8) {
              goto LABEL_61;
            }
            goto LABEL_69;
          }
          unsigned int v28 = 3;
        }
      }
    }
    uint64_t v35 = &v71[3 * v28];
    int v38 = *((_DWORD *)v35 + 2);
    long long v37 = (int *)(v35 + 1);
    int v36 = v38;
    *((void *)v37 + 1) = v27;
    if (v38 != 0x7FFFFFFF)
    {
      v21 += v36;
      goto LABEL_37;
    }
    long long v39 = *(unsigned int **)(v14 + 336);
    uint64_t v40 = *(unsigned int **)(v14 + 344);
    unint64_t v41 = (char *)v40 - (char *)v39;
    BOOL v42 = (char *)v40 - (char *)v39 == 8;
    if ((char *)v40 - (char *)v39 < 8)
    {
LABEL_61:
      if (v39 == v40) {
        goto LABEL_79;
      }
      goto LABEL_76;
    }
LABEL_69:
    if (!v42)
    {
      unint64_t v46 = v41 >> 3;
      do
      {
        unint64_t v47 = (2 * v46) & 0xFFFFFFFFFFFFFFF8;
        _X13 = (char *)v39 + v47;
        __asm { PRFM            #0, [X13] }
        uint64_t v52 = &v39[2 * (v46 >> 1)];
        _X12 = (char *)v52 + v47;
        __asm { PRFM            #0, [X12] }
        if (*v52 >= v26) {
          unint64_t v55 = 0;
        }
        else {
          unint64_t v55 = v46 >> 1;
        }
        v39 += 2 * v55;
        v46 -= v46 >> 1;
      }
      while ((uint64_t)v46 > 1);
    }
    v39 += 2 * (*v39 < v26);
    if (v39 == v40)
    {
LABEL_79:
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)&v74);
        uint64_t v58 = sub_188FC78(&v74, (uint64_t)"Quad node ", 10);
        uint64_t v59 = sub_51960(v58, v24);
        uint64_t v60 = sub_188FC78(v59, (uint64_t)" (query node ", 13);
        uint64_t v61 = sub_51960(v60, v26);
        sub_188FC78(v61, (uint64_t)") not present in WeatherForecast.", 33);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 3u);
        if (v73 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v74 = v70;
        *(uint64_t *)((char *)&v74 + *(void *)(v70 - 24)) = v69;
        if (v77 < 0) {
          operator delete(v76);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      goto LABEL_37;
    }
LABEL_76:
    if (*v39 != v26) {
      goto LABEL_79;
    }
    uint64_t v56 = *(void *)(v14 + 360);
    if (v39 + 2 == v40) {
      uint64_t v57 = *(unsigned __int8 **)(v14 + 368);
    }
    else {
      uint64_t v57 = (unsigned __int8 *)(v56 + v39[3]);
    }
    uint64_t v62 = (unsigned __int8 *)(v56 + v39[1]);
    int v64 = *v62;
    unint64_t v63 = v62 + 1;
    int v65 = v64 - 128;
    *long long v37 = v64 - 128;
    if (v63 != v57)
    {
      unsigned __int8 v66 = 0;
      do
      {
        __int16 v67 = sub_35E648(*v63);
        v66 += v67 + 1;
        int v65 = *v37;
        if (v16 < (double)v66) {
          break;
        }
        v65 += SHIBYTE(v67);
        *long long v37 = v65;
        ++v63;
      }
      while (v63 != v57);
    }
    v21 += v65;
    unint64_t v13 = v68;
LABEL_37:
    ++v12;
  }
  while (v12 != v13);
  return vcvtad_u64_f64(((double)(v21 / (int)((unint64_t)(a1[4] - a1[3]) >> 2)) + 273.15) * 1000.0);
}

void sub_2AB438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_2AB4B0()
{
  unk_2556FDF = 16641;
  word_2556FC8 = 65;
  byte_2556FF7 = 1;
  byte_2556FE1 = 0;
}

uint64_t sub_2AB4D8(uint64_t a1, long long *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 48 * a3;
    do
    {
      sub_2ABF28(a1, (uint64_t)a2, a2);
      a2 += 3;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_2AB540(_Unwind_Exception *a1)
{
  unint64_t v3 = *(char **)(v1 + 16);
  if (v3) {
    sub_20A6E00(v3);
  }
  sub_20A62E8((void **)v1);
  _Unwind_Resume(a1);
}

void **sub_2AB560(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (!*a1) {
    return a1;
  }
  unint64_t v3 = (void **)a1[1];
  uint64_t v4 = *a1;
  if (v3 == v2) {
    goto LABEL_11;
  }
  uint64_t v5 = v3 - 63;
  do
  {
    sub_29281C((uint64_t)(v5 + 6));
    if (*((char *)v5 + 47) < 0)
    {
      operator delete(v5[3]);
      if ((*((char *)v5 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
    }
    else if ((*((char *)v5 + 23) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*v5);
LABEL_4:
    BOOL v6 = v5 == v2;
    v5 -= 63;
  }
  while (!v6);
  uint64_t v4 = *a1;
LABEL_11:
  a1[1] = v2;
  operator delete(v4);
  return a1;
}

uint64_t sub_2AB600(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v3 = operator new(0x2B8uLL);
  v3[1] = 0;
  v3[2] = 0;
  *unint64_t v3 = off_2438240;
  *(void *)(a1 + 16) = sub_2E93A8(v3 + 3);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = (unsigned int *)sub_2AB884(a1, 35, 1u, 0);
  if (v5) {
    uint64_t v5 = (uint64_t)v4 + *v4;
  }
  sub_291688(&v16, v5);
  sub_291754(&v16, a1 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v7 != v6)
  {
    uint64_t v8 = v7 + 24;
    while (1)
    {
      int v13 = *(char *)(v8 + 23);
      if (v13 < 0)
      {
        if (*(void *)(v8 + 8) != 15) {
          goto LABEL_9;
        }
        unint64_t v14 = *(uint64_t **)v8;
      }
      else
      {
        unint64_t v14 = (uint64_t *)v8;
        if (v13 != 15) {
          goto LABEL_9;
        }
      }
      uint64_t v9 = *v14;
      uint64_t v10 = *(uint64_t *)((char *)v14 + 7);
      if (v9 == 0x2D64616F722D6266 && v10 == 0x6B726F7774656E2DLL)
      {
        uint64_t v7 = v8 - 24;
        break;
      }
LABEL_9:
      uint64_t v12 = v8 + 480;
      v8 += 504;
      if (v12 == v6) {
        goto LABEL_18;
      }
    }
  }
  if (v7 == v6)
  {
LABEL_18:
    *(unsigned char *)(a1 + 79) = 0;
    *(unsigned char *)(a1 + 56) = 0;
    return a1;
  }
  else
  {
    sub_75828((char *)(v7 + 48), a1 + 56);
    return a1;
  }
}

void sub_2AB76C(_Unwind_Exception *a1)
{
  sub_2AB560(v3);
  sub_14A84(v2);
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

void sub_2AB790(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

void sub_2AB7B0(_Unwind_Exception *a1)
{
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

void sub_2AB7C4(_Unwind_Exception *a1)
{
  sub_14A84(v2);
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2AB7E4(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))(*(void *)(a1 + 16));
  uint64_t v3 = 16;
  if (!v2) {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + v3) + 104);

  return v4();
}

uint64_t sub_2AB884(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  int v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))(*(void *)(a1 + 16));
  uint64_t v9 = 16;
  if (!v8) {
    uint64_t v9 = 0;
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + v9) + 64))(*(void *)(a1 + v9), a2, a3);
  if (!a4 && !v11)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unsigned int v13 = a3;
    uint64_t v14 = (uint64_t)exception;
    std::to_string(&v23, v13);
    int v15 = std::string::insert(&v23, 0, "Failed to acquire Flatbuffer data in quad node ");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    unint64_t v17 = std::string::append(&v24, " on layer ");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    double v19 = sub_736EC(a2);
    uint64_t v20 = std::string::append(&v25, v19);
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    std::string::size_type v27 = v20->__r_.__value_.__r.__words[2];
    long long v26 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    char v22 = (void *)sub_2F404(v14, &v26);
  }
  return result;
}

void sub_2AB9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

uint64_t sub_2ABAA8(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))(*(void *)(a1 + 16));
  uint64_t v3 = 16;
  if (!v2) {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + v3) + 72);

  return v4();
}

uint64_t sub_2ABB48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))(*(void *)(a1 + 16));
  uint64_t v7 = 16;
  if (!v6) {
    uint64_t v7 = 0;
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + v7) + 24))(*(void *)(a1 + v7), a2, a3);
}

uint64_t sub_2ABBE0(void *a1, uint64_t a2, int a3)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)*a1 + 96))(*a1);
  if ((result & 1) == 0 && a3)
  {
    int v6 = *(uint64_t (**)(void))(*(void *)a1[2] + 96);
    return v6();
  }
  return result;
}

char *sub_2ABC88@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[79] < 0) {
    return (char *)sub_4200((unsigned char *)a2, *((void **)result + 7), *((void *)result + 8));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 56);
  *(void *)(a2 + 16) = *((void *)result + 9);
  return result;
}

uint64_t sub_2ABCB4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2ABCBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 112))();
}

uint64_t sub_2ABCE4(void **a1)
{
  if ((*(uint64_t (**)(void *))(*a1[2] + 120))(a1[2])) {
    return 1;
  }
  uint64_t v3 = *(uint64_t (**)(void))(**a1 + 120);

  return v3();
}

void *sub_2ABD74(void **a1)
{
  uint64_t result = (void *)(*(uint64_t (**)(void *))(*a1[2] + 16))(a1[2]);
  if (*result == result[1])
  {
    uint64_t v3 = *(uint64_t (**)(void))(**a1 + 16);
    return (void *)v3();
  }
  return result;
}

uint64_t sub_2ABE08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 56))();
}

void *sub_2ABE30(void *__dst, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    int v6 = *(const void **)a3;
    int64_t v7 = *(void *)(a3 + 8) - *(void *)a3;
    if (!v7) {
      return __dst;
    }
  }
  else
  {
    long long v5 = *a2;
    void __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v5;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    int v6 = *(const void **)a3;
    int64_t v7 = *(void *)(a3 + 8) - *(void *)a3;
    if (!v7) {
      return __dst;
    }
  }
  if (v7 < 0) {
    sub_2E00();
  }
  uint64_t v9 = (char *)operator new(v7);
  __dst[3] = v9;
  __dst[4] = v9;
  uint64_t v10 = &v9[4 * (v7 >> 2)];
  __dst[5] = v10;
  memcpy(v9, v6, v7);
  __dst[4] = v10;
  return __dst;
}

void sub_2ABF04(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_20A6E54((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2ABF28(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v41, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    unsigned int v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          long long v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  std::string v25 = operator new(0x40uLL);
  v41[0] = v25;
  v41[1] = a1 + 16;
  char v42 = 0;
  *std::string v25 = 0;
  v25[1] = v10;
  sub_2AC3DC(v25 + 2, a3);
  char v42 = 1;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    BOOL v30 = 1;
    if (v11 >= 3) {
      BOOL v30 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v11);
    unint64_t v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32) {
      size_t prime = v32;
    }
    else {
      size_t prime = v31;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v34) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v34)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v34 < 3uLL || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime < *(void *)&v34) {
LABEL_65:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v28 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        unint64_t v29 = (void *)v41[0];
        if (v28) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v28 = *(void **)(*(void *)a1 + 8 * v10);
        unint64_t v29 = (void *)v41[0];
        if (v28) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v3 = v38 & v10;
      uint64_t v28 = *(void **)(*(void *)a1 + 8 * (v38 & v10));
      unint64_t v29 = (void *)v41[0];
      if (v28) {
        goto LABEL_54;
      }
    }
LABEL_78:
    *unint64_t v29 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v41[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v41[0])
    {
      unint64_t v39 = *(void *)(*(void *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11) {
          v39 %= v11;
        }
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  uint64_t v28 = *(void **)(*(void *)a1 + 8 * v3);
  unint64_t v29 = (void *)v41[0];
  if (!v28) {
    goto LABEL_78;
  }
LABEL_54:
  *unint64_t v29 = *v28;
  *uint64_t v28 = v41[0];
LABEL_89:
  uint64_t v14 = (uint64_t *)v41[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_2AC350(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2AC37C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2AC364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2AC37C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2AC37C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      unint64_t v3 = *(void **)(v2 + 40);
      if (v3)
      {
        *(void *)(v2 + 48) = v3;
        operator delete(v3);
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void *sub_2AC3DC(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    int v6 = (unsigned char *)*((void *)a2 + 3);
    unint64_t v9 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v9 - v6;
    if (v9 == v6) {
      return __dst;
    }
  }
  else
  {
    long long v4 = *a2;
    void __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    int v6 = (unsigned char *)*((void *)a2 + 3);
    long long v5 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v5 - v6;
    if (v5 == v6) {
      return __dst;
    }
  }
  if (v7 < 0) {
    sub_2E00();
  }
  unint64_t v10 = (char *)operator new(v7);
  __dst[3] = v10;
  __dst[4] = v10;
  unint64_t v11 = &v10[4 * (v7 >> 2)];
  __dst[5] = v11;
  memcpy(v10, v6, v7);
  __dst[4] = v11;
  return __dst;
}

void sub_2AC4AC(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_20A6E54((void **)v1);
  _Unwind_Resume(a1);
}

void sub_2AC4D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_2438240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2AC4F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_2438240;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_2AC544(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_2AC570()
{
}

void *sub_2AC584()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_2438290;
  return result;
}

void sub_2AC5BC(uint64_t a1, void *a2)
{
  *a2 = off_2438290;
}

uint64_t sub_2AC5E4()
{
  return 1;
}

uint64_t sub_2AC5EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N3msl4data26FlatBufferResourceProvider3$_1E") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N3msl4data26FlatBufferResourceProvider3$_1E" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N3msl4data26FlatBufferResourceProvider3$_1E")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N3msl4data26FlatBufferResourceProvider3$_1E" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_2AC65C()
{
}

void sub_2AC668(void **a1)
{
}

void sub_2AC670()
{
  char v130 = 12;
  strcpy((char *)&v129, "ROAD_NETWORK");
  v0 = operator new(0xCuLL);
  int64_t v128 = (char *)(v0 + 3);
  *(void *)v0 = 0x100000000;
  v0[2] = 5;
  uint64_t v126 = v0;
  unint64_t v127 = v0 + 3;
  sub_2ABE30(__dst, &v129, (uint64_t)&v126);
  uint64_t v124 = operator new(0x20uLL);
  long long v125 = xmmword_20B5EB0;
  strcpy((char *)v124, "CYCLING_CBR_TOPOLOGY_BUILD");
  uint64_t v1 = operator new(0xCuLL);
  uint64_t v123 = (char *)(v1 + 3);
  *(void *)uint64_t v1 = 0x700000000;
  v1[2] = 8;
  uint64_t v121 = v1;
  uint64_t v122 = v1 + 3;
  sub_2ABE30(v132, (long long *)&v124, (uint64_t)&v121);
  uint64_t v119 = operator new(0x20uLL);
  long long v120 = xmmword_20B5EB0;
  strcpy((char *)v119, "DRIVING_CBR_TOPOLOGY_BUILD");
  uint64_t v2 = operator new(0xCuLL);
  v118 = (char *)(v2 + 3);
  *(void *)uint64_t v2 = 0x700000000;
  v2[2] = 8;
  uint64_t v116 = v2;
  uint64_t v117 = v2 + 3;
  sub_2ABE30(v133, (long long *)&v119, (uint64_t)&v116);
  uint64_t v114 = operator new(0x20uLL);
  long long v115 = xmmword_20B5EB0;
  strcpy((char *)v114, "WALKING_CBR_TOPOLOGY_BUILD");
  unint64_t v3 = operator new(8uLL);
  uint64_t v111 = v3;
  *unint64_t v3 = 0x700000000;
  long long v113 = v3 + 1;
  uint64_t v112 = v3 + 1;
  sub_2ABE30(v134, (long long *)&v114, (uint64_t)&v111);
  uint64_t v109 = operator new(0x20uLL);
  long long v110 = xmmword_20B91A0;
  strcpy((char *)v109, "CYCLING_CBR_SHORTCUTS_BUILD");
  long long v4 = operator new(0x14uLL);
  uint64_t v108 = (char *)(v4 + 5);
  v4[4] = 18;
  *(_OWORD *)long long v4 = xmmword_20E1390;
  uint64_t v106 = v4;
  uint64_t v107 = v4 + 5;
  sub_2ABE30(v135, (long long *)&v109, (uint64_t)&v106);
  uint64_t v104 = operator new(0x20uLL);
  long long v105 = xmmword_20B91A0;
  strcpy((char *)v104, "DRIVING_CBR_SHORTCUTS_BUILD");
  long long v5 = operator new(0x14uLL);
  int64_t v103 = (char *)(v5 + 5);
  v5[4] = 13;
  *(_OWORD *)long long v5 = xmmword_20E13A4;
  unint64_t v101 = v5;
  uint64_t v102 = v5 + 5;
  sub_2ABE30(v136, (long long *)&v104, (uint64_t)&v101);
  uint64_t v99 = operator new(0x20uLL);
  long long v100 = xmmword_20B91A0;
  strcpy((char *)v99, "WALKING_CBR_SHORTCUTS_BUILD");
  int v6 = operator new(0x14uLL);
  uint64_t v98 = (char *)(v6 + 5);
  v6[4] = 14;
  *(_OWORD *)int v6 = xmmword_20E13B8;
  uint64_t v96 = v6;
  uint64_t v97 = v6 + 5;
  sub_2ABE30(v137, (long long *)&v99, (uint64_t)&v96);
  v95[23] = 21;
  strcpy(v95, "TRANSIT_ROUTING_BUILD");
  int64_t v7 = operator new(0xCuLL);
  uint64_t v94 = (char *)(v7 + 3);
  *(void *)int64_t v7 = 0x600000000;
  v7[2] = 10;
  BOOL v92 = v7;
  uint64_t v93 = v7 + 3;
  sub_2ABE30(v138, (long long *)v95, (uint64_t)&v92);
  int64_t v90 = operator new(0x28uLL);
  long long v91 = xmmword_20B93A0;
  strcpy((char *)v90, "TRANSIT_WALKING_BUCKET_SEARCH_BUILD");
  unint64_t v8 = operator new(0x18uLL);
  uint64_t v89 = (char *)(v8 + 3);
  void v8[2] = 0x900000006;
  *(_OWORD *)unint64_t v8 = xmmword_20E13CC;
  unint64_t v87 = v8;
  unint64_t v88 = v8 + 3;
  sub_2ABE30(v139, (long long *)&v90, (uint64_t)&v87);
  char v86 = 7;
  strcpy((char *)v85, "SERVICE");
  unint64_t v9 = operator new(0x40uLL);
  uint64_t v84 = v9 + 4;
  *unint64_t v9 = xmmword_20E13E4;
  v9[1] = unk_20E13F4;
  void v9[2] = xmmword_20E1404;
  v9[3] = unk_20E1414;
  uint64_t v82 = v9;
  uint64_t v83 = v9 + 4;
  sub_2ABE30(v140, (long long *)v85, (uint64_t)&v82);
  strcpy(v81, "SERVICE_TRANSIT_PLACES");
  v81[23] = 22;
  unint64_t v10 = operator new(8uLL);
  unint64_t v78 = v10;
  void *v10 = 0x900000006;
  uint64_t v80 = v10 + 1;
  uint64_t v79 = v10 + 1;
  sub_2ABE30(v141, (long long *)v81, (uint64_t)&v78);
  char v77 = 15;
  strcpy((char *)&v76, "TRANSIT_NETWORK");
  unint64_t v11 = operator new(4uLL);
  char v73 = v11;
  *unint64_t v11 = 6;
  uint64_t v75 = v11 + 1;
  uint64_t v74 = v11 + 1;
  sub_2ABE30(v142, &v76, (uint64_t)&v73);
  char v72 = 15;
  strcpy((char *)&v71, "TRANSIT_POLYGON");
  uint8x8_t v12 = operator new(4uLL);
  uint64_t v68 = v12;
  *uint8x8_t v12 = 27;
  uint64_t v69 = v12 + 1;
  uint64_t v70 = v12 + 1;
  sub_2ABE30(v143, &v71, (uint64_t)&v68);
  unsigned __int8 v66 = operator new(0x20uLL);
  long long v67 = xmmword_20B8890;
  strcpy((char *)v66, "TRANSIT_WALKING_BUCKET_SEARCH");
  unsigned int v13 = operator new(0x1CuLL);
  int v64 = (char *)v13 + 28;
  int v65 = (char *)v13 + 28;
  *unsigned int v13 = xmmword_20E1424;
  *(_OWORD *)((char *)v13 + 12) = *(long long *)((char *)&xmmword_20E1424 + 12);
  unint64_t v63 = v13;
  sub_2ABE30(v144, (long long *)&v66, (uint64_t)&v63);
  uint64_t v61 = operator new(0x20uLL);
  long long v62 = xmmword_20B91A0;
  strcpy((char *)v61, "DRIVING_ROUTE_LINE_GEOMETRY");
  uint64_t v14 = operator new(8uLL);
  uint64_t v58 = v14;
  void *v14 = 28;
  uint64_t v59 = v14 + 1;
  uint64_t v60 = v14 + 1;
  sub_2ABE30(v145, (long long *)&v61, (uint64_t)&v58);
  uint64_t v56 = operator new(0x20uLL);
  long long v57 = xmmword_20B91A0;
  strcpy((char *)v56, "WALKING_ROUTE_LINE_GEOMETRY");
  char v15 = operator new(8uLL);
  unint64_t v53 = v15;
  *char v15 = 33;
  uint64_t v54 = v15 + 1;
  unint64_t v55 = v15 + 1;
  sub_2ABE30(v146, (long long *)&v56, (uint64_t)&v53);
  uint64_t v51 = operator new(0x28uLL);
  long long v52 = xmmword_20E12D0;
  strcpy((char *)v51, "DRIVING_ROUTE_LINE_GEOMETRY_CONVERSION");
  uint64_t v16 = operator new(0xCuLL);
  unint64_t v49 = v16 + 3;
  size_t v50 = (char *)(v16 + 3);
  *(void *)uint64_t v16 = 0x800000000;
  v16[2] = 29;
  int64_t v48 = v16;
  sub_2ABE30(v147, (long long *)&v51, (uint64_t)&v48);
  strcpy(v47, "CYCLING_REGION_POLYGON");
  v47[23] = 22;
  unint64_t v17 = operator new(4uLL);
  unsigned int v44 = v17;
  *unint64_t v17 = 25;
  long long v45 = v17 + 1;
  unint64_t v46 = v17 + 1;
  sub_2ABE30(v148, (long long *)v47, (uint64_t)&v44);
  v43[23] = 20;
  strcpy(v43, "GENERATE_CHECKPOINTS");
  uint64_t v18 = operator new(0xCuLL);
  unint64_t v41 = v18 + 3;
  char v42 = (char *)(v18 + 3);
  *(void *)uint64_t v18 = 0x800000000;
  v18[2] = 30;
  uint64_t v40 = v18;
  sub_2ABE30(v149, (long long *)v43, (uint64_t)&v40);
  unint64_t v38 = operator new(0x30uLL);
  long long v39 = xmmword_20E1380;
  strcpy((char *)v38, "TRANSPORT_NETWORK_POLYGON_DERIVED_PROPERTIES");
  uint64_t v19 = operator new(8uLL);
  unint64_t v35 = v19;
  *uint64_t v19 = 0x1D00000000;
  uint8x8_t v36 = v19 + 1;
  uint64_t v37 = v19 + 1;
  sub_2ABE30(v150, (long long *)&v38, (uint64_t)&v35);
  unint64_t v33 = operator new(0x20uLL);
  long long v34 = xmmword_20B8870;
  strcpy((char *)v33, "TRANSPORT_NETWORK_POLYGON");
  uint64_t v20 = operator new(4uLL);
  BOOL v30 = v20;
  _DWORD *v20 = 29;
  unint64_t v31 = v20 + 1;
  unint64_t v32 = v20 + 1;
  sub_2ABE30(v151, (long long *)&v33, (uint64_t)&v30);
  char v29 = 11;
  strcpy((char *)&v28, "HIKING_TOUR");
  uint64_t v21 = operator new(4uLL);
  __n128 __p = v21;
  *uint64_t v21 = 38;
  float v26 = v21 + 1;
  float v27 = v21 + 1;
  sub_2ABE30(v152, &v28, (uint64_t)&__p);
  sub_2AB4D8((uint64_t)&unk_2556FF8, __dst, 22);
  uint64_t v22 = 66;
  do
  {
    uint64_t v23 = &__dst[v22];
    uint64_t v24 = *(void **)((char *)&v129 + v22 * 16);
    if (v24)
    {
      *((void *)v23 - 2) = v24;
      operator delete(v24);
    }
    if (*((char *)v23 - 25) < 0) {
      operator delete(*((void **)v23 - 6));
    }
    v22 -= 3;
  }
  while (v22 * 16);
  if (__p)
  {
    float v26 = __p;
    operator delete(__p);
  }
  if (v29 < 0) {
    operator delete((void *)v28);
  }
  if (v30)
  {
    unint64_t v31 = v30;
    operator delete(v30);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(v33);
  }
  if (v35)
  {
    uint8x8_t v36 = v35;
    operator delete(v35);
  }
  if (SHIBYTE(v39) < 0) {
    operator delete(v38);
  }
  if (v40)
  {
    unint64_t v41 = v40;
    operator delete(v40);
  }
  if ((v43[23] & 0x80000000) != 0) {
    operator delete(*(void **)v43);
  }
  if (v44)
  {
    long long v45 = v44;
    operator delete(v44);
  }
  if ((v47[23] & 0x80000000) != 0) {
    operator delete(*(void **)v47);
  }
  if (v48)
  {
    unint64_t v49 = v48;
    operator delete(v48);
  }
  if (SHIBYTE(v52) < 0) {
    operator delete(v51);
  }
  if (v53)
  {
    uint64_t v54 = v53;
    operator delete(v53);
  }
  if (SHIBYTE(v57) < 0) {
    operator delete(v56);
  }
  if (v58)
  {
    uint64_t v59 = v58;
    operator delete(v58);
  }
  if (SHIBYTE(v62) < 0) {
    operator delete(v61);
  }
  if (v63)
  {
    int v64 = v63;
    operator delete(v63);
  }
  if (SHIBYTE(v67) < 0) {
    operator delete(v66);
  }
  if (v68)
  {
    uint64_t v69 = v68;
    operator delete(v68);
  }
  if (v72 < 0) {
    operator delete((void *)v71);
  }
  if (v73)
  {
    uint64_t v74 = v73;
    operator delete(v73);
  }
  if (v77 < 0) {
    operator delete((void *)v76);
  }
  if (v78)
  {
    uint64_t v79 = v78;
    operator delete(v78);
  }
  if ((v81[23] & 0x80000000) != 0) {
    operator delete(*(void **)v81);
  }
  if (v82)
  {
    uint64_t v83 = v82;
    operator delete(v82);
  }
  if (v86 < 0) {
    operator delete(v85[0]);
  }
  if (v87)
  {
    unint64_t v88 = v87;
    operator delete(v87);
  }
  if (SHIBYTE(v91) < 0) {
    operator delete(v90);
  }
  if (v92)
  {
    uint64_t v93 = v92;
    operator delete(v92);
  }
  if ((v95[23] & 0x80000000) != 0) {
    operator delete(*(void **)v95);
  }
  if (v96)
  {
    uint64_t v97 = v96;
    operator delete(v96);
  }
  if (SHIBYTE(v100) < 0) {
    operator delete(v99);
  }
  if (v101)
  {
    uint64_t v102 = v101;
    operator delete(v101);
  }
  if (SHIBYTE(v105) < 0) {
    operator delete(v104);
  }
  if (v106)
  {
    uint64_t v107 = v106;
    operator delete(v106);
  }
  if (SHIBYTE(v110) < 0) {
    operator delete(v109);
  }
  if (v111)
  {
    uint64_t v112 = v111;
    operator delete(v111);
  }
  if (SHIBYTE(v115) < 0) {
    operator delete(v114);
  }
  if (v116)
  {
    uint64_t v117 = v116;
    operator delete(v116);
  }
  if (SHIBYTE(v120) < 0) {
    operator delete(v119);
  }
  if (v121)
  {
    uint64_t v122 = v121;
    operator delete(v121);
  }
  if (SHIBYTE(v125) < 0) {
    operator delete(v124);
  }
  if (v126)
  {
    unint64_t v127 = v126;
    operator delete(v126);
  }
  if (v130 < 0) {
    operator delete((void *)v129);
  }
  qword_254DF88 = (uint64_t)off_2438290;
  qword_254DFA0 = (uint64_t)&qword_254DF88;
}

void sub_2AD310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  uint64_t v83 = (void *)STACK[0x840];
  if (STACK[0x840])
  {
    STACK[0x848] = (unint64_t)v83;
    operator delete(v83);
    if ((SLOBYTE(STACK[0x83F]) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v84 = (void *)STACK[0x810];
      if (!STACK[0x810]) {
        goto LABEL_4;
      }
      goto LABEL_49;
    }
  }
  else if ((SLOBYTE(STACK[0x83F]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x828]);
  uint64_t v84 = (void *)STACK[0x810];
  if (!STACK[0x810])
  {
LABEL_4:
    if ((SLOBYTE(STACK[0x80F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_50;
  }
LABEL_49:
  STACK[0x818] = (unint64_t)v84;
  operator delete(v84);
  if ((SLOBYTE(STACK[0x80F]) & 0x80000000) == 0)
  {
LABEL_5:
    uint64_t v85 = (void *)STACK[0x7E0];
    if (!STACK[0x7E0]) {
      goto LABEL_6;
    }
    goto LABEL_51;
  }
LABEL_50:
  operator delete((void *)STACK[0x7F8]);
  uint64_t v85 = (void *)STACK[0x7E0];
  if (!STACK[0x7E0])
  {
LABEL_6:
    if ((SLOBYTE(STACK[0x7DF]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_52;
  }
LABEL_51:
  STACK[0x7E8] = (unint64_t)v85;
  operator delete(v85);
  if ((SLOBYTE(STACK[0x7DF]) & 0x80000000) == 0)
  {
LABEL_7:
    char v86 = (void *)STACK[0x7B0];
    if (!STACK[0x7B0]) {
      goto LABEL_8;
    }
    goto LABEL_53;
  }
LABEL_52:
  operator delete((void *)STACK[0x7C8]);
  char v86 = (void *)STACK[0x7B0];
  if (!STACK[0x7B0])
  {
LABEL_8:
    if ((SLOBYTE(STACK[0x7AF]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_54;
  }
LABEL_53:
  STACK[0x7B8] = (unint64_t)v86;
  operator delete(v86);
  if ((SLOBYTE(STACK[0x7AF]) & 0x80000000) == 0)
  {
LABEL_9:
    unint64_t v87 = (void *)STACK[0x780];
    if (!STACK[0x780]) {
      goto LABEL_10;
    }
    goto LABEL_55;
  }
LABEL_54:
  operator delete((void *)STACK[0x798]);
  unint64_t v87 = (void *)STACK[0x780];
  if (!STACK[0x780])
  {
LABEL_10:
    if ((SLOBYTE(STACK[0x77F]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_56;
  }
LABEL_55:
  STACK[0x788] = (unint64_t)v87;
  operator delete(v87);
  if ((SLOBYTE(STACK[0x77F]) & 0x80000000) == 0)
  {
LABEL_11:
    unint64_t v88 = (void *)STACK[0x750];
    if (!STACK[0x750]) {
      goto LABEL_12;
    }
    goto LABEL_57;
  }
LABEL_56:
  operator delete((void *)STACK[0x768]);
  unint64_t v88 = (void *)STACK[0x750];
  if (!STACK[0x750])
  {
LABEL_12:
    if ((SLOBYTE(STACK[0x74F]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_58;
  }
LABEL_57:
  STACK[0x758] = (unint64_t)v88;
  operator delete(v88);
  if ((SLOBYTE(STACK[0x74F]) & 0x80000000) == 0)
  {
LABEL_13:
    uint64_t v89 = (void *)STACK[0x720];
    if (!STACK[0x720]) {
      goto LABEL_14;
    }
    goto LABEL_59;
  }
LABEL_58:
  operator delete((void *)STACK[0x738]);
  uint64_t v89 = (void *)STACK[0x720];
  if (!STACK[0x720])
  {
LABEL_14:
    if ((SLOBYTE(STACK[0x71F]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_60;
  }
LABEL_59:
  STACK[0x728] = (unint64_t)v89;
  operator delete(v89);
  if ((SLOBYTE(STACK[0x71F]) & 0x80000000) == 0)
  {
LABEL_15:
    int64_t v90 = (void *)STACK[0x6F0];
    if (!STACK[0x6F0]) {
      goto LABEL_16;
    }
    goto LABEL_61;
  }
LABEL_60:
  operator delete((void *)STACK[0x708]);
  int64_t v90 = (void *)STACK[0x6F0];
  if (!STACK[0x6F0])
  {
LABEL_16:
    if ((SLOBYTE(STACK[0x6EF]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_62;
  }
LABEL_61:
  STACK[0x6F8] = (unint64_t)v90;
  operator delete(v90);
  if ((SLOBYTE(STACK[0x6EF]) & 0x80000000) == 0)
  {
LABEL_17:
    long long v91 = (void *)STACK[0x6C0];
    if (!STACK[0x6C0]) {
      goto LABEL_18;
    }
    goto LABEL_63;
  }
LABEL_62:
  operator delete((void *)STACK[0x6D8]);
  long long v91 = (void *)STACK[0x6C0];
  if (!STACK[0x6C0])
  {
LABEL_18:
    if ((SLOBYTE(STACK[0x6BF]) & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_64;
  }
LABEL_63:
  STACK[0x6C8] = (unint64_t)v91;
  operator delete(v91);
  if ((SLOBYTE(STACK[0x6BF]) & 0x80000000) == 0)
  {
LABEL_19:
    BOOL v92 = (void *)STACK[0x690];
    if (!STACK[0x690]) {
      goto LABEL_20;
    }
    goto LABEL_65;
  }
LABEL_64:
  operator delete((void *)STACK[0x6A8]);
  BOOL v92 = (void *)STACK[0x690];
  if (!STACK[0x690])
  {
LABEL_20:
    if ((SLOBYTE(STACK[0x68F]) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_66;
  }
LABEL_65:
  STACK[0x698] = (unint64_t)v92;
  operator delete(v92);
  if ((SLOBYTE(STACK[0x68F]) & 0x80000000) == 0)
  {
LABEL_21:
    uint64_t v93 = (void *)STACK[0x660];
    if (!STACK[0x660]) {
      goto LABEL_22;
    }
    goto LABEL_67;
  }
LABEL_66:
  operator delete((void *)STACK[0x678]);
  uint64_t v93 = (void *)STACK[0x660];
  if (!STACK[0x660])
  {
LABEL_22:
    if ((SLOBYTE(STACK[0x65F]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_68;
  }
LABEL_67:
  STACK[0x668] = (unint64_t)v93;
  operator delete(v93);
  if ((SLOBYTE(STACK[0x65F]) & 0x80000000) == 0)
  {
LABEL_23:
    uint64_t v94 = (void *)STACK[0x630];
    if (!STACK[0x630]) {
      goto LABEL_24;
    }
    goto LABEL_69;
  }
LABEL_68:
  operator delete((void *)STACK[0x648]);
  uint64_t v94 = (void *)STACK[0x630];
  if (!STACK[0x630])
  {
LABEL_24:
    if ((SLOBYTE(STACK[0x62F]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_70;
  }
LABEL_69:
  STACK[0x638] = (unint64_t)v94;
  operator delete(v94);
  if ((SLOBYTE(STACK[0x62F]) & 0x80000000) == 0)
  {
LABEL_25:
    uint64_t v95 = (void *)STACK[0x600];
    if (!STACK[0x600]) {
      goto LABEL_26;
    }
    goto LABEL_71;
  }
LABEL_70:
  operator delete((void *)STACK[0x618]);
  uint64_t v95 = (void *)STACK[0x600];
  if (!STACK[0x600])
  {
LABEL_26:
    if ((SLOBYTE(STACK[0x5FF]) & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_72;
  }
LABEL_71:
  STACK[0x608] = (unint64_t)v95;
  operator delete(v95);
  if ((SLOBYTE(STACK[0x5FF]) & 0x80000000) == 0)
  {
LABEL_27:
    uint64_t v96 = (void *)STACK[0x5D0];
    if (!STACK[0x5D0]) {
      goto LABEL_28;
    }
    goto LABEL_73;
  }
LABEL_72:
  operator delete((void *)STACK[0x5E8]);
  uint64_t v96 = (void *)STACK[0x5D0];
  if (!STACK[0x5D0])
  {
LABEL_28:
    if ((SLOBYTE(STACK[0x5CF]) & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_74;
  }
LABEL_73:
  STACK[0x5D8] = (unint64_t)v96;
  operator delete(v96);
  if ((SLOBYTE(STACK[0x5CF]) & 0x80000000) == 0)
  {
LABEL_29:
    uint64_t v97 = (void *)STACK[0x5A0];
    if (!STACK[0x5A0]) {
      goto LABEL_30;
    }
    goto LABEL_75;
  }
LABEL_74:
  operator delete((void *)STACK[0x5B8]);
  uint64_t v97 = (void *)STACK[0x5A0];
  if (!STACK[0x5A0])
  {
LABEL_30:
    if ((SLOBYTE(STACK[0x59F]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_76;
  }
LABEL_75:
  STACK[0x5A8] = (unint64_t)v97;
  operator delete(v97);
  if ((SLOBYTE(STACK[0x59F]) & 0x80000000) == 0)
  {
LABEL_31:
    uint64_t v98 = (void *)STACK[0x570];
    if (!STACK[0x570]) {
      goto LABEL_32;
    }
    goto LABEL_77;
  }
LABEL_76:
  operator delete((void *)STACK[0x588]);
  uint64_t v98 = (void *)STACK[0x570];
  if (!STACK[0x570])
  {
LABEL_32:
    if ((SLOBYTE(STACK[0x56F]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_78;
  }
LABEL_77:
  STACK[0x578] = (unint64_t)v98;
  operator delete(v98);
  if ((SLOBYTE(STACK[0x56F]) & 0x80000000) == 0)
  {
LABEL_33:
    uint64_t v99 = (void *)STACK[0x540];
    if (!STACK[0x540]) {
      goto LABEL_34;
    }
    goto LABEL_79;
  }
LABEL_78:
  operator delete((void *)STACK[0x558]);
  uint64_t v99 = (void *)STACK[0x540];
  if (!STACK[0x540])
  {
LABEL_34:
    if ((SLOBYTE(STACK[0x53F]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_80;
  }
LABEL_79:
  STACK[0x548] = (unint64_t)v99;
  operator delete(v99);
  if ((SLOBYTE(STACK[0x53F]) & 0x80000000) == 0)
  {
LABEL_35:
    long long v100 = (void *)STACK[0x510];
    if (!STACK[0x510]) {
      goto LABEL_36;
    }
    goto LABEL_81;
  }
LABEL_80:
  operator delete((void *)STACK[0x528]);
  long long v100 = (void *)STACK[0x510];
  if (!STACK[0x510])
  {
LABEL_36:
    if ((SLOBYTE(STACK[0x50F]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_82;
  }
LABEL_81:
  STACK[0x518] = (unint64_t)v100;
  operator delete(v100);
  if ((SLOBYTE(STACK[0x50F]) & 0x80000000) == 0)
  {
LABEL_37:
    unint64_t v101 = (void *)STACK[0x4E0];
    if (!STACK[0x4E0]) {
      goto LABEL_38;
    }
    goto LABEL_83;
  }
LABEL_82:
  operator delete((void *)STACK[0x4F8]);
  unint64_t v101 = (void *)STACK[0x4E0];
  if (!STACK[0x4E0])
  {
LABEL_38:
    if ((SLOBYTE(STACK[0x4DF]) & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_84;
  }
LABEL_83:
  STACK[0x4E8] = (unint64_t)v101;
  operator delete(v101);
  if ((SLOBYTE(STACK[0x4DF]) & 0x80000000) == 0)
  {
LABEL_39:
    uint64_t v102 = (void *)STACK[0x4B0];
    if (!STACK[0x4B0]) {
      goto LABEL_40;
    }
    goto LABEL_85;
  }
LABEL_84:
  operator delete((void *)STACK[0x4C8]);
  uint64_t v102 = (void *)STACK[0x4B0];
  if (!STACK[0x4B0])
  {
LABEL_40:
    if ((SLOBYTE(STACK[0x4AF]) & 0x80000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_86;
  }
LABEL_85:
  STACK[0x4B8] = (unint64_t)v102;
  operator delete(v102);
  if ((SLOBYTE(STACK[0x4AF]) & 0x80000000) == 0)
  {
LABEL_41:
    int64_t v103 = (void *)STACK[0x480];
    if (!STACK[0x480]) {
      goto LABEL_42;
    }
    goto LABEL_87;
  }
LABEL_86:
  operator delete((void *)STACK[0x498]);
  int64_t v103 = (void *)STACK[0x480];
  if (!STACK[0x480])
  {
LABEL_42:
    if ((SLOBYTE(STACK[0x47F]) & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_88;
  }
LABEL_87:
  STACK[0x488] = (unint64_t)v103;
  operator delete(v103);
  if ((SLOBYTE(STACK[0x47F]) & 0x80000000) == 0)
  {
LABEL_43:
    uint64_t v104 = (void *)STACK[0x450];
    if (!STACK[0x450]) {
      goto LABEL_44;
    }
    goto LABEL_89;
  }
LABEL_88:
  operator delete((void *)STACK[0x468]);
  uint64_t v104 = (void *)STACK[0x450];
  if (!STACK[0x450])
  {
LABEL_44:
    if ((SLOBYTE(STACK[0x44F]) & 0x80000000) == 0) {
      goto LABEL_90;
    }
    goto LABEL_45;
  }
LABEL_89:
  STACK[0x458] = (unint64_t)v104;
  operator delete(v104);
  if ((SLOBYTE(STACK[0x44F]) & 0x80000000) == 0) {
    goto LABEL_90;
  }
LABEL_45:
  operator delete((void *)STACK[0x438]);
LABEL_90:
  if (a12)
  {
    operator delete(a12);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_92:
      long long v105 = a21;
      if (!a21) {
        goto LABEL_93;
      }
      goto LABEL_137;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_92;
  }
  operator delete(a15);
  long long v105 = a21;
  if (!a21)
  {
LABEL_93:
    if ((a29 & 0x80000000) == 0) {
      goto LABEL_94;
    }
    goto LABEL_138;
  }
LABEL_137:
  operator delete(v105);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_94:
    uint64_t v106 = a30;
    if (!a30) {
      goto LABEL_95;
    }
    goto LABEL_139;
  }
LABEL_138:
  operator delete(a24);
  uint64_t v106 = a30;
  if (!a30)
  {
LABEL_95:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_96;
    }
    goto LABEL_140;
  }
LABEL_139:
  operator delete(v106);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_96:
    uint64_t v107 = a39;
    if (!a39) {
      goto LABEL_97;
    }
    goto LABEL_141;
  }
LABEL_140:
  operator delete(a33);
  uint64_t v107 = a39;
  if (!a39)
  {
LABEL_97:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_98;
    }
    goto LABEL_142;
  }
LABEL_141:
  operator delete(v107);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_98:
    uint64_t v108 = a48;
    if (!a48) {
      goto LABEL_99;
    }
    goto LABEL_143;
  }
LABEL_142:
  operator delete(a42);
  uint64_t v108 = a48;
  if (!a48)
  {
LABEL_99:
    if ((a56 & 0x80000000) == 0) {
      goto LABEL_100;
    }
    goto LABEL_144;
  }
LABEL_143:
  operator delete(v108);
  if ((a56 & 0x80000000) == 0)
  {
LABEL_100:
    uint64_t v109 = a57;
    if (!a57) {
      goto LABEL_101;
    }
    goto LABEL_145;
  }
LABEL_144:
  operator delete(a51);
  uint64_t v109 = a57;
  if (!a57)
  {
LABEL_101:
    if ((a65 & 0x80000000) == 0) {
      goto LABEL_102;
    }
    goto LABEL_146;
  }
LABEL_145:
  operator delete(v109);
  if ((a65 & 0x80000000) == 0)
  {
LABEL_102:
    long long v110 = a66;
    if (!a66) {
      goto LABEL_103;
    }
    goto LABEL_147;
  }
LABEL_146:
  operator delete(a60);
  long long v110 = a66;
  if (!a66)
  {
LABEL_103:
    if ((a72 & 0x80000000) == 0) {
      goto LABEL_104;
    }
    goto LABEL_148;
  }
LABEL_147:
  operator delete(v110);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_104:
    uint64_t v111 = a73;
    if (!a73) {
      goto LABEL_105;
    }
    goto LABEL_149;
  }
LABEL_148:
  operator delete(a69);
  uint64_t v111 = a73;
  if (!a73)
  {
LABEL_105:
    if ((a75 & 0x80000000) == 0) {
      goto LABEL_106;
    }
    goto LABEL_150;
  }
LABEL_149:
  operator delete(v111);
  if ((a75 & 0x80000000) == 0)
  {
LABEL_106:
    uint64_t v112 = a76;
    if (!a76) {
      goto LABEL_107;
    }
    goto LABEL_151;
  }
LABEL_150:
  operator delete(a74);
  uint64_t v112 = a76;
  if (!a76)
  {
LABEL_107:
    if ((a78 & 0x80000000) == 0) {
      goto LABEL_108;
    }
    goto LABEL_152;
  }
LABEL_151:
  operator delete(v112);
  if ((a78 & 0x80000000) == 0)
  {
LABEL_108:
    long long v113 = a79;
    if (!a79) {
      goto LABEL_109;
    }
    goto LABEL_153;
  }
LABEL_152:
  operator delete(a77);
  long long v113 = a79;
  if (!a79)
  {
LABEL_109:
    if ((a81 & 0x80000000) == 0) {
      goto LABEL_110;
    }
    goto LABEL_154;
  }
LABEL_153:
  operator delete(v113);
  if ((a81 & 0x80000000) == 0)
  {
LABEL_110:
    uint64_t v114 = a82;
    if (!a82) {
      goto LABEL_111;
    }
    goto LABEL_155;
  }
LABEL_154:
  operator delete(a80);
  uint64_t v114 = a82;
  if (!a82)
  {
LABEL_111:
    if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0) {
      goto LABEL_112;
    }
    goto LABEL_156;
  }
LABEL_155:
  STACK[0x200] = (unint64_t)v114;
  operator delete(v114);
  if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
  {
LABEL_112:
    long long v115 = (void *)STACK[0x228];
    if (!STACK[0x228]) {
      goto LABEL_113;
    }
    goto LABEL_157;
  }
LABEL_156:
  operator delete((void *)STACK[0x210]);
  long long v115 = (void *)STACK[0x228];
  if (!STACK[0x228])
  {
LABEL_113:
    if ((SLOBYTE(STACK[0x257]) & 0x80000000) == 0) {
      goto LABEL_114;
    }
    goto LABEL_158;
  }
LABEL_157:
  STACK[0x230] = (unint64_t)v115;
  operator delete(v115);
  if ((SLOBYTE(STACK[0x257]) & 0x80000000) == 0)
  {
LABEL_114:
    uint64_t v116 = (void *)STACK[0x258];
    if (!STACK[0x258]) {
      goto LABEL_115;
    }
    goto LABEL_159;
  }
LABEL_158:
  operator delete((void *)STACK[0x240]);
  uint64_t v116 = (void *)STACK[0x258];
  if (!STACK[0x258])
  {
LABEL_115:
    if ((SLOBYTE(STACK[0x287]) & 0x80000000) == 0) {
      goto LABEL_116;
    }
    goto LABEL_160;
  }
LABEL_159:
  STACK[0x260] = (unint64_t)v116;
  operator delete(v116);
  if ((SLOBYTE(STACK[0x287]) & 0x80000000) == 0)
  {
LABEL_116:
    uint64_t v117 = (void *)STACK[0x288];
    if (!STACK[0x288]) {
      goto LABEL_117;
    }
    goto LABEL_161;
  }
LABEL_160:
  operator delete((void *)STACK[0x270]);
  uint64_t v117 = (void *)STACK[0x288];
  if (!STACK[0x288])
  {
LABEL_117:
    if ((SLOBYTE(STACK[0x2B7]) & 0x80000000) == 0) {
      goto LABEL_118;
    }
    goto LABEL_162;
  }
LABEL_161:
  STACK[0x290] = (unint64_t)v117;
  operator delete(v117);
  if ((SLOBYTE(STACK[0x2B7]) & 0x80000000) == 0)
  {
LABEL_118:
    v118 = (void *)STACK[0x2B8];
    if (!STACK[0x2B8]) {
      goto LABEL_119;
    }
    goto LABEL_163;
  }
LABEL_162:
  operator delete((void *)STACK[0x2A0]);
  v118 = (void *)STACK[0x2B8];
  if (!STACK[0x2B8])
  {
LABEL_119:
    if ((SLOBYTE(STACK[0x2E7]) & 0x80000000) == 0) {
      goto LABEL_120;
    }
    goto LABEL_164;
  }
LABEL_163:
  STACK[0x2C0] = (unint64_t)v118;
  operator delete(v118);
  if ((SLOBYTE(STACK[0x2E7]) & 0x80000000) == 0)
  {
LABEL_120:
    uint64_t v119 = (void *)STACK[0x2E8];
    if (!STACK[0x2E8]) {
      goto LABEL_121;
    }
    goto LABEL_165;
  }
LABEL_164:
  operator delete((void *)STACK[0x2D0]);
  uint64_t v119 = (void *)STACK[0x2E8];
  if (!STACK[0x2E8])
  {
LABEL_121:
    if ((SLOBYTE(STACK[0x317]) & 0x80000000) == 0) {
      goto LABEL_122;
    }
    goto LABEL_166;
  }
LABEL_165:
  STACK[0x2F0] = (unint64_t)v119;
  operator delete(v119);
  if ((SLOBYTE(STACK[0x317]) & 0x80000000) == 0)
  {
LABEL_122:
    long long v120 = (void *)STACK[0x318];
    if (!STACK[0x318]) {
      goto LABEL_123;
    }
    goto LABEL_167;
  }
LABEL_166:
  operator delete((void *)STACK[0x300]);
  long long v120 = (void *)STACK[0x318];
  if (!STACK[0x318])
  {
LABEL_123:
    if ((SLOBYTE(STACK[0x347]) & 0x80000000) == 0) {
      goto LABEL_124;
    }
    goto LABEL_168;
  }
LABEL_167:
  STACK[0x320] = (unint64_t)v120;
  operator delete(v120);
  if ((SLOBYTE(STACK[0x347]) & 0x80000000) == 0)
  {
LABEL_124:
    uint64_t v121 = (void *)STACK[0x348];
    if (!STACK[0x348]) {
      goto LABEL_125;
    }
    goto LABEL_169;
  }
LABEL_168:
  operator delete((void *)STACK[0x330]);
  uint64_t v121 = (void *)STACK[0x348];
  if (!STACK[0x348])
  {
LABEL_125:
    if ((SLOBYTE(STACK[0x377]) & 0x80000000) == 0) {
      goto LABEL_126;
    }
    goto LABEL_170;
  }
LABEL_169:
  STACK[0x350] = (unint64_t)v121;
  operator delete(v121);
  if ((SLOBYTE(STACK[0x377]) & 0x80000000) == 0)
  {
LABEL_126:
    uint64_t v122 = (void *)STACK[0x378];
    if (!STACK[0x378]) {
      goto LABEL_127;
    }
    goto LABEL_171;
  }
LABEL_170:
  operator delete((void *)STACK[0x360]);
  uint64_t v122 = (void *)STACK[0x378];
  if (!STACK[0x378])
  {
LABEL_127:
    if ((SLOBYTE(STACK[0x3A7]) & 0x80000000) == 0) {
      goto LABEL_128;
    }
    goto LABEL_172;
  }
LABEL_171:
  STACK[0x380] = (unint64_t)v122;
  operator delete(v122);
  if ((SLOBYTE(STACK[0x3A7]) & 0x80000000) == 0)
  {
LABEL_128:
    uint64_t v123 = (void *)STACK[0x3A8];
    if (!STACK[0x3A8]) {
      goto LABEL_129;
    }
    goto LABEL_173;
  }
LABEL_172:
  operator delete((void *)STACK[0x390]);
  uint64_t v123 = (void *)STACK[0x3A8];
  if (!STACK[0x3A8])
  {
LABEL_129:
    if ((SLOBYTE(STACK[0x3D7]) & 0x80000000) == 0) {
      goto LABEL_130;
    }
    goto LABEL_174;
  }
LABEL_173:
  STACK[0x3B0] = (unint64_t)v123;
  operator delete(v123);
  if ((SLOBYTE(STACK[0x3D7]) & 0x80000000) == 0)
  {
LABEL_130:
    uint64_t v124 = (void *)STACK[0x3D8];
    if (!STACK[0x3D8]) {
      goto LABEL_131;
    }
    goto LABEL_175;
  }
LABEL_174:
  operator delete((void *)STACK[0x3C0]);
  uint64_t v124 = (void *)STACK[0x3D8];
  if (!STACK[0x3D8])
  {
LABEL_131:
    if ((SLOBYTE(STACK[0x407]) & 0x80000000) == 0) {
      goto LABEL_132;
    }
    goto LABEL_176;
  }
LABEL_175:
  STACK[0x3E0] = (unint64_t)v124;
  operator delete(v124);
  if ((SLOBYTE(STACK[0x407]) & 0x80000000) == 0)
  {
LABEL_132:
    long long v125 = (void *)STACK[0x408];
    if (!STACK[0x408]) {
      goto LABEL_133;
    }
    goto LABEL_177;
  }
LABEL_176:
  operator delete((void *)STACK[0x3F0]);
  long long v125 = (void *)STACK[0x408];
  if (!STACK[0x408])
  {
LABEL_133:
    if ((SLOBYTE(STACK[0x437]) & 0x80000000) == 0) {
      goto LABEL_179;
    }
    goto LABEL_178;
  }
LABEL_177:
  STACK[0x410] = (unint64_t)v125;
  operator delete(v125);
  if ((SLOBYTE(STACK[0x437]) & 0x80000000) == 0) {
LABEL_179:
  }
    _Unwind_Resume(a1);
LABEL_178:
  operator delete((void *)STACK[0x420]);
  goto LABEL_179;
}

void sub_2ADCC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0) {
    JUMPOUT(0x2ADA88);
  }
  JUMPOUT(0x2AD7B0);
}

void sub_2ADCD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  if (a54) {
    JUMPOUT(0x2ADA98);
  }
  JUMPOUT(0x2AD7B8);
}

void sub_2ADCEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a62 < 0) {
    JUMPOUT(0x2ADAA8);
  }
  JUMPOUT(0x2AD7C0);
}

void sub_2ADD00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  if (a60) {
    JUMPOUT(0x2ADAB8);
  }
  JUMPOUT(0x2AD7C8);
}

void sub_2ADD18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a68 < 0) {
    JUMPOUT(0x2ADAC8);
  }
  JUMPOUT(0x2AD7D0);
}

void sub_2ADD2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a66) {
    JUMPOUT(0x2ADAD8);
  }
  JUMPOUT(0x2AD7D8);
}

void sub_2ADD44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a73 < 0) {
    JUMPOUT(0x2ADAE8);
  }
  JUMPOUT(0x2AD7E0);
}

void sub_2ADD58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a72) {
    JUMPOUT(0x2ADAF8);
  }
  JUMPOUT(0x2AD7E8);
}

void sub_2ADD6C()
{
  if (SLOBYTE(STACK[0x227]) < 0) {
    JUMPOUT(0x2ADB08);
  }
  JUMPOUT(0x2AD7F0);
}

void sub_2ADD80()
{
  if (STACK[0x228]) {
    JUMPOUT(0x2ADB18);
  }
  JUMPOUT(0x2AD7F8);
}

void sub_2ADD94()
{
  if (SLOBYTE(STACK[0x257]) < 0) {
    JUMPOUT(0x2ADB28);
  }
  JUMPOUT(0x2AD800);
}

void sub_2ADDA8()
{
  if (STACK[0x258]) {
    JUMPOUT(0x2ADB38);
  }
  JUMPOUT(0x2AD808);
}

void sub_2ADDBC()
{
  if (SLOBYTE(STACK[0x287]) < 0) {
    JUMPOUT(0x2ADB48);
  }
  JUMPOUT(0x2AD810);
}

void sub_2ADDD0()
{
  if (STACK[0x288]) {
    JUMPOUT(0x2ADB58);
  }
  JUMPOUT(0x2AD818);
}

void sub_2ADDE4()
{
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    JUMPOUT(0x2ADB68);
  }
  JUMPOUT(0x2AD820);
}

void sub_2ADDF8()
{
  if (STACK[0x2B8]) {
    JUMPOUT(0x2ADB78);
  }
  JUMPOUT(0x2AD828);
}

void sub_2ADE10()
{
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    JUMPOUT(0x2ADB88);
  }
  JUMPOUT(0x2AD830);
}

void sub_2ADE24()
{
  if (STACK[0x2E8]) {
    JUMPOUT(0x2ADB98);
  }
  JUMPOUT(0x2AD838);
}

void sub_2ADE38()
{
  if (SLOBYTE(STACK[0x317]) < 0) {
    JUMPOUT(0x2ADBA8);
  }
  JUMPOUT(0x2AD840);
}

void sub_2ADE4C()
{
  if (STACK[0x318]) {
    JUMPOUT(0x2ADBB8);
  }
  JUMPOUT(0x2AD848);
}

void sub_2ADE64()
{
  if (SLOBYTE(STACK[0x347]) < 0) {
    JUMPOUT(0x2ADBC8);
  }
  JUMPOUT(0x2AD850);
}

void sub_2ADE78()
{
  if (STACK[0x348]) {
    JUMPOUT(0x2ADBD8);
  }
  JUMPOUT(0x2AD858);
}

void sub_2ADE90()
{
  if (SLOBYTE(STACK[0x377]) < 0) {
    JUMPOUT(0x2ADBE8);
  }
  JUMPOUT(0x2AD860);
}

void sub_2ADEA4()
{
  if (STACK[0x378]) {
    JUMPOUT(0x2ADBF8);
  }
  JUMPOUT(0x2AD868);
}

void sub_2ADEBC()
{
  if (SLOBYTE(STACK[0x3A7]) < 0) {
    JUMPOUT(0x2ADC08);
  }
  JUMPOUT(0x2AD870);
}

void sub_2ADED0()
{
  if (STACK[0x3A8]) {
    JUMPOUT(0x2ADC18);
  }
  JUMPOUT(0x2AD878);
}

void sub_2ADEE8()
{
  if (SLOBYTE(STACK[0x3D7]) < 0) {
    JUMPOUT(0x2ADC28);
  }
  JUMPOUT(0x2AD880);
}

void sub_2ADEFC()
{
  if (STACK[0x3D8]) {
    JUMPOUT(0x2ADC38);
  }
  JUMPOUT(0x2AD888);
}

void sub_2ADF14()
{
  if (SLOBYTE(STACK[0x407]) < 0) {
    JUMPOUT(0x2ADC48);
  }
  JUMPOUT(0x2AD890);
}

void sub_2ADF28()
{
  if (STACK[0x408]) {
    JUMPOUT(0x2ADC58);
  }
  JUMPOUT(0x2AD898);
}

void sub_2ADF3C()
{
  if (STACK[0x408]) {
    JUMPOUT(0x2ADC58);
  }
  JUMPOUT(0x2AD898);
}

void sub_2ADF54()
{
  if (SLOBYTE(STACK[0x437]) < 0) {
    JUMPOUT(0x2ADC68);
  }
  JUMPOUT(0x2AD8A0);
}

void sub_2ADF6C(long long *a1)
{
  sub_2AE248((uint64_t)&v1, a1);
}

void sub_2AE024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  operator delete(v10);
  sub_14A84((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_2AE040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2AE054(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_2438320;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2AE074(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_2438320;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_2AE0C8(uint64_t a1)
{
  return sub_2AE0D4(a1 + 24);
}

uint64_t sub_2AE0D4(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    uint64_t v2 = *(void ***)(a1 + 32);
    if (!v2)
    {
LABEL_3:
      unint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
      if (v3) {
        goto LABEL_16;
      }
LABEL_17:
      unint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
      if (!v8) {
        return a1;
      }
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v2 = *(void ***)(a1 + 32);
    if (!v2) {
      goto LABEL_3;
    }
  }
  long long v4 = *(void ***)(a1 + 40);
  long long v5 = v2;
  if (v4 == v2) {
    goto LABEL_15;
  }
  int v6 = v4 - 63;
  do
  {
    sub_29281C((uint64_t)(v6 + 6));
    if (*((char *)v6 + 47) < 0)
    {
      operator delete(v6[3]);
      if ((*((char *)v6 + 23) & 0x80000000) == 0) {
        goto LABEL_8;
      }
    }
    else if ((*((char *)v6 + 23) & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(*v6);
LABEL_8:
    BOOL v7 = v6 == v2;
    v6 -= 63;
  }
  while (!v7);
  long long v5 = *(void ***)(a1 + 32);
LABEL_15:
  *(void *)(a1 + 40) = v2;
  operator delete(v5);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3) {
    goto LABEL_17;
  }
LABEL_16:
  if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v8) {
    return a1;
  }
LABEL_18:
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_2AE248(uint64_t a1, long long *a2)
{
  unint64_t v3 = operator new(0x9E8uLL);
  sub_2AE358((uint64_t)v3, a2);
}

void sub_2AE344(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2AE358(uint64_t a1, long long *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_2438370;
  long long v2 = *a2;
  *a2 = 0u;
  sub_2ECFB8(a1 + 24, (uint64_t)&v2);
}

void sub_2AE418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_20A6E64(a10);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  _Unwind_Resume(a1);
}

void sub_2AE438(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_2438370;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2AE458(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_2438370;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_2AE4AC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_2AE4D4(uint64_t a1, long long *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_2438320;
  long long v5 = *a2;
  *a2 = 0u;
  sub_2AB7E0(a1 + 24, (uint64_t)&v5);
  unint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (!*((void *)&v5 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2AE594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_20A6E64(a10);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_2AE5B4(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  switch(a1)
  {
    case 0:
      v11[0] = off_24383C0;
      long long v4 = sub_2AF11C;
      goto LABEL_32;
    case 1:
      v11[0] = off_24383C0;
      long long v4 = sub_2AF0A4;
      goto LABEL_32;
    case 3:
    case 4:
    case 17:
      v11[0] = off_24383C0;
      long long v4 = sub_2AEE4C;
      goto LABEL_32;
    case 5:
      v11[0] = off_24383C0;
      long long v4 = sub_2AF0E0;
      goto LABEL_32;
    case 6:
      v11[0] = off_24383C0;
      long long v4 = sub_2AF20C;
      goto LABEL_32;
    case 7:
      v11[0] = off_24383C0;
      long long v4 = sub_2AF158;
      goto LABEL_32;
    case 8:
      v11[0] = off_24383C0;
      long long v4 = sub_2AF068;
      goto LABEL_32;
    case 9:
      v11[0] = off_24383C0;
      long long v4 = sub_2AF284;
      goto LABEL_32;
    case 10:
      v11[0] = off_24383C0;
      long long v4 = sub_2AF3EC;
      goto LABEL_32;
    case 11:
      v11[0] = off_24383C0;
      long long v4 = sub_2AEEC4;
      goto LABEL_32;
    case 13:
    case 14:
    case 18:
      v11[0] = off_24383C0;
      long long v4 = sub_2AEE88;
      goto LABEL_32;
    case 15:
      v11[0] = off_24383C0;
      long long v4 = sub_2AEE10;
      goto LABEL_32;
    case 16:
      v11[0] = off_24383C0;
      long long v4 = sub_2AF02C;
      goto LABEL_32;
    case 21:
      v11[0] = off_24383C0;
      long long v4 = sub_2AEF3C;
      goto LABEL_32;
    case 22:
      v11[0] = off_24383C0;
      long long v4 = sub_2AEFF0;
      goto LABEL_32;
    case 23:
    case 36:
      v11[0] = off_24383C0;
      long long v4 = sub_2AF338;
      goto LABEL_32;
    case 24:
      v11[0] = off_24383C0;
      long long v4 = sub_2AF374;
      goto LABEL_32;
    case 25:
      v11[0] = off_24383C0;
      long long v4 = sub_2AF3B0;
      goto LABEL_32;
    case 26:
      v11[0] = off_24383C0;
      long long v4 = sub_2AF2C0;
      goto LABEL_32;
    case 27:
      v11[0] = off_24383C0;
      long long v4 = sub_2AF248;
      goto LABEL_32;
    case 28:
    case 33:
      v11[0] = off_24383C0;
      long long v4 = sub_2AEF00;
      goto LABEL_32;
    case 29:
      v11[0] = off_24383C0;
      long long v4 = sub_2AF2FC;
      goto LABEL_32;
    case 30:
      v11[0] = off_24383C0;
      long long v4 = sub_2AF194;
      goto LABEL_32;
    case 31:
      v11[0] = off_24383C0;
      long long v4 = sub_2AEDD4;
      goto LABEL_32;
    case 32:
      v11[0] = off_24383C0;
      long long v4 = sub_2AF1D0;
      goto LABEL_32;
    case 34:
      v11[0] = off_24383C0;
      long long v4 = sub_2AEFB4;
      goto LABEL_32;
    case 35:
      v11[0] = off_24383C0;
      long long v4 = sub_2AEF78;
      goto LABEL_32;
    case 37:
      v11[0] = off_24383C0;
      long long v4 = sub_2AF428;
      goto LABEL_32;
    case 38:
      v11[0] = off_24383C0;
      long long v4 = sub_2AF464;
      goto LABEL_32;
    case 39:
      v11[0] = off_24383C0;
      long long v4 = sub_2AF4A0;
LABEL_32:
      v11[1] = v4;
      uint8x8_t v12 = v11;
      v6[0] = a2;
      v6[1] = a3;
      v6[2] = -1;
      int v7 = 257;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v8 = 0;
      uint64_t v3 = (*(uint64_t (**)(void *, void *))(v11[0] + 48))(v11, v6);
      if (v12 == v11)
      {
        (*(void (**)(void *))(v11[0] + 32))(v11);
      }
      else if (v12)
      {
        (*(void (**)(void))(*v12 + 40))();
      }
      break;
    default:
      return v3;
  }
  return v3;
}

void sub_2AEC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_2AED44((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_2AED44(void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t sub_2AEDD4(uint64_t *a1)
{
  unint64_t v1 = a1[1];
  if (v1 >= 0xC && (unint64_t v2 = *(unsigned int *)*a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2AF4DC((int *)(*a1 + v2), a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AEE10(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2AF754((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AEE4C(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2B13F8((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AEE88(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2B1A60((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AEEC4(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2B1EC0((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AEF00(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2B2AEC((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AEF3C(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2B3ADC((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AEF78(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2B4724((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AEFB4(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2B5514((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AEFF0(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2B5800((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AF02C(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2B5DAC((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AF068(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2B86A0((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AF0A4(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2B956C((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AF0E0(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2B9AA4((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AF11C(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2B9E84((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AF158(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2BD828((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AF194(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2BE3C8((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AF1D0(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2BE53C((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AF20C(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2BEA04((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

BOOL sub_2AF248(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2CAD44((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AF284(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2CAFCC((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AF2C0(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2CD2F8((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AF2FC(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2BE3C8((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AF338(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2CE1EC((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AF374(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2CF3F8((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AF3B0(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2BE3C8((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AF3EC(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2CFE08((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AF428(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2B1208((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AF464(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 0xC && (unint64_t v2 = **a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2D01F8((int *)((char *)*a1 + v2), (uint64_t)a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AF4A0(uint64_t *a1)
{
  unint64_t v1 = a1[1];
  if (v1 >= 0xC && (unint64_t v2 = *(unsigned int *)*a1, (int)v2 >= 1) && v1 - 1 >= v2) {
    return sub_2D0938((int *)(*a1 + v2), a1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2AF4DC(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (unint64_t)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  BOOL v7 = v6 >= 5 && v6 - 4 >= v3;
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a2 + 10);
  unsigned int v10 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v9 + 1;
  *((_DWORD *)a2 + 11) = v10;
  if ((v9 + 1) > *((_DWORD *)a2 + 4) || v10 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v12 = v3 - v8;
  if ((v3 - v8))
  {
    uint64_t v13 = 0;
    if (v4 || v6 - 2 < v12) {
      return v13;
    }
  }
  else if (v6 - 2 < v12)
  {
    return 0;
  }
  unint64_t v14 = *(unsigned __int16 *)(v2 + v12);
  if ((v14 & 1) != 0 && v4 | v14 & 1) {
    return 0;
  }
  BOOL v7 = v6 >= v14;
  unint64_t v15 = v6 - v14;
  if (v15 == 0 || !v7 || v15 < v12) {
    return 0;
  }
  uint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 < 5u
    || (uint64_t v19 = v18[2]) == 0
    || ((uint64_t v13 = 0, v20 = v3 + v19, (v20 & 1) != 0) ? (v21 = v4 == 0) : (v21 = 1),
        !v21 ? (int v22 = 0) : (int v22 = 1),
        v6 - 2 >= v20 && v22))
  {
    *((_DWORD *)a2 + 10) = v9;
    return 1;
  }
  return v13;
}

BOOL sub_2AF5DC(int *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 <= a3) {
    return 1;
  }
  uint64_t v5 = *(unsigned __int16 *)((char *)v4 + a3);
  if (!v5) {
    return 1;
  }
  unint64_t v6 = (unint64_t)a1 + v5 - *(void *)a2;
  if ((v6 & (a4 - 1)) != 0 && *(unsigned char *)(a2 + 24) != 0) {
    return 0;
  }
  unint64_t v8 = *(void *)(a2 + 8);
  BOOL v9 = v8 > 2;
  unint64_t v10 = v8 - 2;
  return v9 && v10 >= v6;
}

void sub_2AF644()
{
}

void *sub_2AF658(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_24383C0;
  result[1] = v3;
  return result;
}

uint64_t sub_2AF6A0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_24383C0;
  a2[1] = v2;
  return result;
}

uint64_t sub_2AF6CC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_2AF6D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "PFbRN11flatbuffers8VerifierEE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"PFbRN11flatbuffers8VerifierEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFbRN11flatbuffers8VerifierEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFbRN11flatbuffers8VerifierEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

_UNKNOWN **sub_2AF748()
{
  return &off_2438440;
}

uint64_t sub_2AF754(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  unsigned int v12 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  BOOL v14 = v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20);
  if (v14) {
    return 0;
  }
  unint64_t v15 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v15) {
      return 0;
    }
  }
  else if (v7 - 2 < v15)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v16;
  unint64_t v17 = v7 - v16;
  if (v17 == 0 || !v9 || v17 < v15) {
    return 0;
  }
  uint64_t v19 = *a1;
  uint64_t v20 = -v19;
  BOOL v21 = (unsigned __int16 *)((char *)a1 - v19);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
        return 0;
      }
      float v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      long long v28 = (char *)v27 - v2;
      BOOL v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30) {
        return 0;
      }
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v32 = 4 * v31 + 4;
      BOOL v14 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (!v14 || v33 < (unint64_t)v28) {
        return 0;
      }
      if (v31)
      {
        unint64_t v43 = a1;
        unint64_t v35 = 0;
        uint8x8_t v36 = v27 + 1;
        while ((sub_2AF9F0((int *)((char *)v36 + *v36), a2) & 1) != 0)
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            a1 = v43;
            uint64_t v20 = -(uint64_t)*v43;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  uint64_t v37 = (char *)a1 + v20;
  if (*(unsigned __int16 *)((char *)a1 + v20) >= 7u)
  {
    uint64_t v38 = *((unsigned __int16 *)v37 + 3);
    if (*((_WORD *)v37 + 3))
    {
      unint64_t v39 = (unint64_t)a1 + v38 - *(void *)a2;
      if ((v39 & 3) != 0 && *(unsigned char *)(a2 + 24) != 0) {
        return 0;
      }
      unint64_t v41 = *(void *)(a2 + 8);
      if (v41 < 5 || v41 - 4 < v39) {
        return 0;
      }
      uint64_t v42 = *(unsigned int *)(*(void *)a2 + v39);
      if ((int)v42 < 1
        || v41 - 1 < v39 + v42
        || !sub_2B0928((int *)((char *)a1 + v38 + *(unsigned int *)((char *)a1 + v38)), a2))
      {
        return 0;
      }
    }
  }
  --*(_DWORD *)(a2 + 40);
  return 1;
}

uint64_t sub_2AF9F0(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_75;
  }
  if (!v20[2]) {
    goto LABEL_37;
  }
  unint64_t v22 = (unint64_t)&v3[v20[2]];
  if ((v22 & 7) != 0 && v4) {
    return 0;
  }
  uint64_t result = 0;
  if (v7 >= 9 && v7 - 8 >= v22)
  {
LABEL_37:
    if (v21 < 7) {
      goto LABEL_75;
    }
    if (v20[3] && v7 - 1 < (unint64_t)&v3[v20[3]]) {
      return 0;
    }
    if (v21 < 9) {
      goto LABEL_75;
    }
    uint64_t v23 = v20[4];
    if (!v20[4])
    {
LABEL_62:
      if (v21 >= 0xF)
      {
        uint64_t v35 = v20[7];
        if (v35)
        {
          uint64_t result = 0;
          unint64_t v36 = (unint64_t)&v3[v35];
          BOOL v38 = (v36 & 3) == 0 || v4 == 0;
          if (v8 < v36 || !v38) {
            return result;
          }
          uint64_t v39 = *(unsigned int *)(v2 + v36);
          if ((int)v39 < 1 || v7 - 1 < v36 + v39) {
            return 0;
          }
          uint64_t v40 = (unsigned int *)((char *)a1 + v35 + *(unsigned int *)((char *)a1 + v35));
          goto LABEL_76;
        }
      }
LABEL_75:
      uint64_t v40 = 0;
LABEL_76:
      uint64_t result = sub_2A7D68(a2, v40);
      if (result)
      {
        unint64_t v41 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v41 >= 0xFu && (uint64_t v42 = v41[7]) != 0) {
          unint64_t v43 = (unsigned int *)((char *)a1 + v42 + *(unsigned int *)((char *)a1 + v42));
        }
        else {
          unint64_t v43 = 0;
        }
        uint64_t result = sub_2AFFCC(a2, v43);
        if (result)
        {
          uint64_t result = sub_2A7CE0(a1, a2, 0x10u);
          if (result)
          {
            unsigned int v44 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v44 >= 0x11u && (uint64_t v45 = v44[8]) != 0) {
              unint64_t v46 = (unsigned int *)((char *)a1 + v45 + *(unsigned int *)((char *)a1 + v45));
            }
            else {
              unint64_t v46 = 0;
            }
            uint64_t result = sub_2A7D68(a2, v46);
            if (result)
            {
              unint64_t v47 = (unsigned __int16 *)((char *)a1 - *a1);
              if (*v47 >= 0x11u && (uint64_t v48 = v47[8]) != 0) {
                unint64_t v49 = (int *)((char *)a1 + v48 + *(unsigned int *)((char *)a1 + v48));
              }
              else {
                unint64_t v49 = 0;
              }
              uint64_t result = sub_2B008C(a2, v49);
              if (result)
              {
                uint64_t result = sub_2A7CE0(a1, a2, 0x12u);
                if (result)
                {
                  size_t v50 = (unsigned __int16 *)((char *)a1 - *a1);
                  if (*v50 >= 0x13u && (uint64_t v51 = v50[9]) != 0) {
                    long long v52 = (unsigned int *)((char *)a1 + v51 + *(unsigned int *)((char *)a1 + v51));
                  }
                  else {
                    long long v52 = 0;
                  }
                  uint64_t result = sub_2A7D68(a2, v52);
                  if (result)
                  {
                    unint64_t v53 = (unsigned __int16 *)((char *)a1 - *a1);
                    if (*v53 >= 0x13u && (uint64_t v54 = v53[9]) != 0) {
                      unint64_t v55 = (int *)((char *)a1 + v54 + *(unsigned int *)((char *)a1 + v54));
                    }
                    else {
                      unint64_t v55 = 0;
                    }
                    uint64_t result = sub_2B008C(a2, v55);
                    if (result)
                    {
                      uint64_t result = sub_2A7CE0(a1, a2, 0x14u);
                      if (result)
                      {
                        uint64_t v56 = (unsigned __int16 *)((char *)a1 - *a1);
                        if (*v56 >= 0x15u && (uint64_t v57 = v56[10]) != 0) {
                          uint64_t v58 = (unsigned int *)((char *)a1 + v57 + *(unsigned int *)((char *)a1 + v57));
                        }
                        else {
                          uint64_t v58 = 0;
                        }
                        uint64_t result = sub_2A7D68(a2, v58);
                        if (result)
                        {
                          uint64_t v59 = (unsigned __int16 *)((char *)a1 - *a1);
                          if (*v59 >= 0x15u && (uint64_t v60 = v59[10]) != 0) {
                            uint64_t v61 = (int *)((char *)a1 + v60 + *(unsigned int *)((char *)a1 + v60));
                          }
                          else {
                            uint64_t v61 = 0;
                          }
                          uint64_t result = sub_2B008C(a2, v61);
                          if (result)
                          {
                            uint64_t result = sub_2A7CE0(a1, a2, 0x16u);
                            if (result)
                            {
                              long long v62 = (unsigned __int16 *)((char *)a1 - *a1);
                              if (*v62 < 0x17u
                                || (uint64_t v63 = v62[11]) == 0
                                || (uint64_t result = sub_2B017C((int *)((char *)a1 + v63 + *(unsigned int *)((char *)a1 + v63)), a2), result))
                              {
                                uint64_t result = sub_2AFEE4(a1, a2, 0x18u, 8);
                                if (result)
                                {
                                  uint64_t result = sub_2B0118(a1, a2, 0x1Au, 4);
                                  if (result)
                                  {
                                    uint64_t result = sub_2AFEE4(a1, a2, 0x1Cu, 4);
                                    if (result)
                                    {
                                      --*(_DWORD *)(a2 + 40);
                                      return 1;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return result;
    }
    uint64_t result = 0;
    uint64_t v24 = &v3[v23];
    BOOL v26 = ((unint64_t)&v3[v23] & 3) == 0 || v4 == 0;
    if (v8 >= (unint64_t)v24 && v26)
    {
      uint64_t v27 = *(unsigned int *)&v24[v2];
      if ((int)v27 < 1 || v7 - 1 < (unint64_t)&v24[v27]) {
        return 0;
      }
      uint64_t result = 0;
      long long v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
      char v29 = (char *)v28 - v2;
      BOOL v30 = (((unint64_t)v28 - v2) & 3) == 0 || v4 == 0;
      BOOL v31 = v30;
      if (v8 >= (unint64_t)v29 && v31)
      {
        uint64_t v32 = *v28;
        if (v32 > 0x7FFFFFFE) {
          return 0;
        }
        uint64_t result = 0;
        unint64_t v33 = v32 + 4;
        unint64_t v34 = (unint64_t)&v29[v32 + 4];
        if (v7 - 1 < v34 || v7 <= v33 || v7 - v33 < (unint64_t)v29) {
          return result;
        }
        if (*(unsigned char *)(v2 + v34)) {
          return 0;
        }
        goto LABEL_62;
      }
    }
  }
  return result;
}

BOOL sub_2AFEE4(int *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 <= a3) {
    return 1;
  }
  uint64_t v5 = *(unsigned __int16 *)((char *)v4 + a3);
  if (!v5) {
    return 1;
  }
  unint64_t v6 = (unint64_t)a1 + v5 - *(void *)a2;
  if ((v6 & (a4 - 1)) != 0 && *(unsigned char *)(a2 + 24) != 0) {
    return 0;
  }
  unint64_t v8 = *(void *)(a2 + 8);
  BOOL v9 = v8 > 8;
  unint64_t v10 = v8 - 8;
  return v9 && v10 >= v6;
}

BOOL sub_2AFF48(uint64_t *a1, unsigned int *a2)
{
  if (!a2) {
    return 1;
  }
  uint64_t v2 = *a1;
  unint64_t v3 = (unint64_t)a2 - *a1;
  if ((v3 & 3) != 0 && *((unsigned char *)a1 + 24)) {
    return 0;
  }
  unint64_t v4 = a1[1];
  if (v4 < 5 || v4 - 4 < v3) {
    return 0;
  }
  uint64_t v6 = *a2;
  if (v6 > 0x7FFFFFFE) {
    return 0;
  }
  BOOL result = 0;
  unint64_t v8 = v6 + 4;
  unint64_t v9 = v4 - v8;
  if (v4 > v8)
  {
    unint64_t v10 = v8 + v3;
    unint64_t v11 = v4 - 1;
    if (v9 >= v3 && v11 >= v10) {
      return *(unsigned char *)(v2 + v10) == 0;
    }
  }
  return result;
}

uint64_t sub_2AFFCC(uint64_t a1, unsigned int *a2)
{
  if (!a2) {
    return 1;
  }
  uint64_t v2 = *a2;
  if (!v2) {
    return 1;
  }
  unint64_t v3 = 0;
  unint64_t v4 = a2 + 1;
  uint64_t v5 = (char *)a2 - *(void *)a1;
  uint64_t v6 = 4 * v2;
  while (1)
  {
    uint64_t v7 = v4[v3 / 4];
    unint64_t v8 = (unint64_t)&v5[v3 + 4 + v7];
    if ((v8 & 3) != 0)
    {
      if (*(unsigned char *)(a1 + 24)) {
        break;
      }
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (v9 < 5 || v9 - 4 < v8) {
      break;
    }
    uint64_t v11 = *(unsigned int *)((char *)v4 + v7 + v3);
    if (v11 > 0x7FFFFFFE) {
      break;
    }
    uint64_t v12 = v7 + v11;
    BOOL v13 = v9 - 1 >= (unint64_t)&v5[v3 + 8 + v12] && v9 > v11 + 4;
    BOOL v14 = v13 && v9 - (v11 + 4) >= v8;
    if (!v14 || *((unsigned char *)a2 + v12 + v3 + 8)) {
      break;
    }
    v3 += 4;
    if (v6 == v3) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_2B008C(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2B017C((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

BOOL sub_2B0118(int *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 <= a3) {
    return 1;
  }
  uint64_t v5 = *(unsigned __int16 *)((char *)v4 + a3);
  if (!v5) {
    return 1;
  }
  unint64_t v6 = (unint64_t)a1 + v5 - *(void *)a2;
  if ((v6 & (a4 - 1)) != 0 && *(unsigned char *)(a2 + 24) != 0) {
    return 0;
  }
  unint64_t v8 = *(void *)(a2 + 8);
  BOOL v9 = v8 > 0x10;
  unint64_t v10 = v8 - 16;
  return v9 && v10 >= v6;
}

uint64_t sub_2B017C(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_96;
  }
  uint64_t v22 = v20[2];
  if (v20[2])
  {
    uint64_t result = 0;
    uint64_t v23 = &v3[v22];
    BOOL v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v23 || !v25) {
      return result;
    }
    uint64_t v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26]) {
      return 0;
    }
    uint64_t result = 0;
    uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    long long v28 = (char *)v27 - v2;
    BOOL v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    BOOL v30 = v29;
    if (v8 < (unint64_t)v28 || !v30) {
      return result;
    }
    uint64_t v31 = *v27;
    if (v31 > 0x7FFFFFFE) {
      return 0;
    }
    unint64_t v32 = v31 + 4;
    unint64_t v33 = (unint64_t)&v28[v31 + 4];
    BOOL v34 = v7 - 1 >= v33 && v7 > v32;
    BOOL v35 = v34 && v7 - v32 >= (unint64_t)v28;
    if (!v35 || *(unsigned char *)(v2 + v33)) {
      return 0;
    }
  }
  if (v21 < 7) {
    goto LABEL_96;
  }
  uint64_t v36 = v20[3];
  if (!v20[3])
  {
LABEL_83:
    if (v21 >= 9)
    {
      uint64_t v48 = v20[4];
      if (v48)
      {
        uint64_t result = 0;
        unint64_t v49 = (unint64_t)&v3[v48];
        BOOL v51 = (v49 & 3) == 0 || v4 == 0;
        if (v8 < v49 || !v51) {
          return result;
        }
        uint64_t v52 = *(unsigned int *)(v2 + v49);
        if ((int)v52 < 1 || v7 - 1 < v49 + v52) {
          return 0;
        }
        unint64_t v53 = (unsigned int *)((char *)a1 + v48 + *(unsigned int *)((char *)a1 + v48));
        goto LABEL_97;
      }
    }
LABEL_96:
    unint64_t v53 = 0;
LABEL_97:
    uint64_t result = sub_2AFF48((uint64_t *)a2, v53);
    if (result)
    {
      uint64_t v54 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v54 < 0xBu
        || (uint64_t v55 = v54[5]) == 0
        || (uint64_t result = 0, v56 = *(void *)(a2 + 8), v56 >= 2) && v56 - 1 >= (unint64_t)a1 + v55 - *(void *)a2)
      {
        uint64_t result = sub_2A7CE0(a1, a2, 0xCu);
        if (result)
        {
          uint64_t v57 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v57 >= 0xDu && (uint64_t v58 = v57[6]) != 0) {
            uint64_t v59 = (unsigned int *)((char *)a1 + v58 + *(unsigned int *)((char *)a1 + v58));
          }
          else {
            uint64_t v59 = 0;
          }
          uint64_t result = sub_2A7D68(a2, v59);
          if (result)
          {
            uint64_t v60 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v60 >= 0xDu && (uint64_t v61 = v60[6]) != 0) {
              long long v62 = (int *)((char *)a1 + v61 + *(unsigned int *)((char *)a1 + v61));
            }
            else {
              long long v62 = 0;
            }
            uint64_t result = sub_2B0628(a2, v62);
            if (result)
            {
              uint64_t v63 = (unsigned __int16 *)((char *)a1 - *a1);
              unsigned int v64 = *v63;
              if (v64 < 0xF
                || (!v63[7]
                 || (uint64_t result = 0, v65 = *(void *)(a2 + 8), v65 >= 2)
                 && v65 - 1 >= (unint64_t)a1 + v63[7] - *(void *)a2)
                && (v64 < 0x11
                 || (!v63[8]
                  || (uint64_t result = 0, v66 = *(void *)(a2 + 8), v66 >= 2)
                  && v66 - 1 >= (unint64_t)a1 + v63[8] - *(void *)a2)
                 && (v64 < 0x13
                  || (uint64_t v67 = v63[9]) == 0
                  || (uint64_t result = 0, v68 = *(void *)(a2 + 8), v68 >= 2)
                  && v68 - 1 >= (unint64_t)a1 + v67 - *(void *)a2)))
              {
                uint64_t result = sub_2A7CE0(a1, a2, 0x14u);
                if (result)
                {
                  uint64_t v69 = (unsigned __int16 *)((char *)a1 - *a1);
                  if (*v69 >= 0x15u && (uint64_t v70 = v69[10]) != 0) {
                    long long v71 = (unsigned int *)((char *)a1 + v70 + *(unsigned int *)((char *)a1 + v70));
                  }
                  else {
                    long long v71 = 0;
                  }
                  uint64_t result = sub_2AFF48((uint64_t *)a2, v71);
                  if (result)
                  {
                    --*(_DWORD *)(a2 + 40);
                    return 1;
                  }
                }
              }
            }
          }
        }
      }
    }
    return result;
  }
  uint64_t result = 0;
  uint64_t v37 = &v3[v36];
  BOOL v39 = ((unint64_t)&v3[v36] & 3) == 0 || v4 == 0;
  if (v8 >= (unint64_t)v37 && v39)
  {
    uint64_t v40 = *(unsigned int *)&v37[v2];
    if ((int)v40 < 1 || v7 - 1 < (unint64_t)&v37[v40]) {
      return 0;
    }
    uint64_t result = 0;
    unint64_t v41 = (unsigned int *)((char *)a1 + v36 + *(unsigned int *)((char *)a1 + v36));
    uint64_t v42 = (char *)v41 - v2;
    BOOL v43 = (((unint64_t)v41 - v2) & 3) == 0 || v4 == 0;
    BOOL v44 = v43;
    if (v8 >= (unint64_t)v42 && v44)
    {
      uint64_t v45 = *v41;
      if (v45 > 0x7FFFFFFE) {
        return 0;
      }
      uint64_t result = 0;
      unint64_t v46 = v45 + 4;
      unint64_t v47 = (unint64_t)&v42[v45 + 4];
      if (v7 - 1 < v47 || v7 <= v46 || v7 - v46 < (unint64_t)v42) {
        return result;
      }
      if (*(unsigned char *)(v2 + v47)) {
        return 0;
      }
      goto LABEL_83;
    }
  }
  return result;
}

uint64_t sub_2B0628(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2B06B4((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2B06B4(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  unsigned int v12 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  if (v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v15 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v15) {
      return 0;
    }
  }
  else if (v7 - 2 < v15)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v16;
  unint64_t v17 = v7 - v16;
  if (v17 == 0 || !v9 || v17 < v15) {
    return 0;
  }
  uint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 >= 5)
  {
    if (v19[2] && v7 - 1 < (unint64_t)&v3[v19[2]]) {
      return 0;
    }
    if (v20 >= 7)
    {
      if (v19[3] && v7 - 1 < (unint64_t)&v3[v19[3]]) {
        return 0;
      }
      if (v20 >= 9)
      {
        uint64_t v21 = v19[4];
        if (v19[4])
        {
          uint64_t v22 = &v3[v21];
          BOOL v24 = ((unint64_t)&v3[v21] & 3) == 0 || v4 == 0;
          if (v8 < (unint64_t)v22 || !v24) {
            return 0;
          }
          uint64_t v25 = *(unsigned int *)&v22[v2];
          if ((int)v25 < 1 || v7 - 1 < (unint64_t)&v22[v25]) {
            return 0;
          }
          uint64_t v26 = (unsigned int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21));
          uint64_t v27 = (char *)v26 - v2;
          BOOL v29 = (((unint64_t)v26 - v2) & 3) == 0 || v4 == 0;
          if (v8 < (unint64_t)v27 || !v29) {
            return 0;
          }
          uint64_t v30 = *v26;
          if (v30 > 0x7FFFFFFE) {
            return 0;
          }
          unint64_t v31 = v30 + 4;
          unint64_t v32 = (unint64_t)&v27[v30 + 4];
          if (v7 - 1 < v32 || v7 <= v31 || v7 - v31 < (unint64_t)v27) {
            return 0;
          }
          if (*(unsigned char *)(v2 + v32)) {
            return 0;
          }
        }
        if (v20 >= 0xD)
        {
          uint64_t v33 = v19[6];
          if (v33)
          {
            unint64_t v34 = (unint64_t)&v3[v33];
            BOOL v36 = (v34 & 3) == 0 || v4 == 0;
            if (v8 < v34 || !v36) {
              return 0;
            }
            uint64_t v37 = *(unsigned int *)(v2 + v34);
            if ((int)v37 >= 1 && v7 - 1 >= v34 + v37)
            {
              BOOL v38 = (unsigned int *)((char *)a1 + v33 + *(unsigned int *)((char *)a1 + v33));
              goto LABEL_74;
            }
            return 0;
          }
        }
      }
    }
  }
  BOOL v38 = 0;
LABEL_74:
  if (!sub_2AFF48((uint64_t *)a2, v38)) {
    return 0;
  }
  --*(_DWORD *)(a2 + 40);
  return 1;
}

BOOL sub_2B0928(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  uint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 >= 5u)
  {
    uint64_t v23 = v22[2];
    if (v23)
    {
      BOOL result = 0;
      unint64_t v24 = (unint64_t)&v3[v23];
      BOOL v26 = (v24 & 3) == 0 || v4 == 0;
      if (v8 < v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
        return 0;
      }
      BOOL result = 0;
      long long v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
      BOOL v29 = (char *)v28 - v2;
      BOOL v30 = (v29 & 3) == 0 || v4 == 0;
      BOOL v31 = v30;
      if (v8 < (unint64_t)v29 || !v31) {
        return result;
      }
      uint64_t v32 = *v28;
      if (v32 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v33 = 4 * v32 + 4;
      BOOL v15 = v7 > v33;
      unint64_t v34 = v7 - v33;
      if (!v15 || v34 < (unint64_t)v29) {
        return 0;
      }
      if (v32)
      {
        unint64_t v36 = 0;
        uint64_t v37 = v28 + 1;
        while ((sub_2B0CA0((int *)((char *)v37 + *v37), a2) & 1) != 0)
        {
          ++v36;
          ++v37;
          if (v36 >= *v28)
          {
            uint64_t v21 = -(uint64_t)*a1;
            goto LABEL_61;
          }
        }
        return 0;
      }
    }
  }
LABEL_61:
  BOOL v38 = (char *)a1 + v21;
  if (*(unsigned __int16 *)((char *)a1 + v21) >= 7u)
  {
    uint64_t v39 = *((unsigned __int16 *)v38 + 3);
    if (*((_WORD *)v38 + 3))
    {
      uint64_t v40 = *(void *)a2;
      unint64_t v41 = (unint64_t)a1 + v39 - *(void *)a2;
      int v42 = *(unsigned __int8 *)(a2 + 24);
      BOOL result = 0;
      if ((v41 & 3) != 0 && v42 != 0) {
        return result;
      }
      unint64_t v44 = *(void *)(a2 + 8);
      if (v44 < 5 || v44 - 4 < v41) {
        return result;
      }
      uint64_t v45 = *(unsigned int *)(v40 + v41);
      if ((int)v45 < 1 || v44 - 1 < v41 + v45) {
        return 0;
      }
      unint64_t v46 = (unsigned int *)((char *)a1 + v39 + *(unsigned int *)((char *)a1 + v39));
      unint64_t v47 = (unint64_t)v46 - v40;
      BOOL v48 = (((unint64_t)v46 - v40) & 3) == 0 || v42 == 0;
      BOOL v49 = v48;
      if (v44 - 4 < v47 || !v49) {
        return 0;
      }
      uint64_t v51 = *v46;
      if (v51 > 0xFFFFFFE) {
        return 0;
      }
      unint64_t v52 = (8 * v51) | 4;
      BOOL v15 = v44 > v52;
      unint64_t v53 = v44 - v52;
      if (!v15 || v53 < v47) {
        return 0;
      }
    }
  }
  BOOL result = sub_2A7CE0(a1, a2, 8u);
  if (result)
  {
    uint64_t v55 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v55 >= 9u && (uint64_t v56 = v55[4]) != 0) {
      uint64_t v57 = (unsigned int *)((char *)a1 + v56 + *(unsigned int *)((char *)a1 + v56));
    }
    else {
      uint64_t v57 = 0;
    }
    BOOL result = sub_2B0C38(a2, v57);
    if (result)
    {
      --*(_DWORD *)(a2 + 40);
      return 1;
    }
  }
  return result;
}

BOOL sub_2B0C38(uint64_t a1, unsigned int *a2)
{
  if (!a2) {
    return 1;
  }
  unint64_t v2 = (unint64_t)a2 - *(void *)a1;
  if ((v2 & 3) != 0 && *(unsigned char *)(a1 + 24)) {
    return 0;
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 < 5 || v3 - 4 < v2) {
    return 0;
  }
  uint64_t v5 = *a2;
  if (v5 > 0xFFFFFFE) {
    return 0;
  }
  unint64_t v6 = (8 * v5) | 4;
  BOOL v7 = v3 > v6;
  unint64_t v8 = v3 - v6;
  return v7 && v8 >= v2;
}

uint64_t sub_2B0CA0(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  uint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 >= 5u)
  {
    uint64_t v23 = v22[2];
    if (v23)
    {
      uint64_t result = 0;
      unint64_t v24 = (unint64_t)&v3[v23];
      BOOL v26 = (v24 & 3) == 0 || v4 == 0;
      if (v8 < v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
        return 0;
      }
      uint64_t result = sub_2B0F8C((int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23)), a2);
      if (!result) {
        return result;
      }
      uint64_t v21 = -(uint64_t)*a1;
    }
  }
  long long v28 = (char *)a1 + v21;
  unsigned int v29 = *(unsigned __int16 *)((char *)a1 + v21);
  if (v29 < 7) {
    goto LABEL_68;
  }
  if (!*((_WORD *)v28 + 3)) {
    goto LABEL_67;
  }
  unint64_t v30 = (unint64_t)a1 + *((unsigned __int16 *)v28 + 3) - *(void *)a2;
  if ((v30 & 3) != 0 && *(unsigned char *)(a2 + 24)) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v31 = *(void *)(a2 + 8);
  if (v31 >= 0x11 && v31 - 16 >= v30)
  {
LABEL_67:
    if (v29 < 9) {
      goto LABEL_68;
    }
    uint64_t v32 = *((unsigned __int16 *)v28 + 4);
    if (!*((_WORD *)v28 + 4)) {
      goto LABEL_68;
    }
    uint64_t v33 = *(void *)a2;
    unint64_t v34 = (unint64_t)a1 + v32 - *(void *)a2;
    if ((v34 & 3) != 0 && *(unsigned char *)(a2 + 24)) {
      return 0;
    }
    uint64_t result = 0;
    unint64_t v35 = *(void *)(a2 + 8);
    if (v35 >= 5 && v35 - 4 >= v34)
    {
      uint64_t v36 = *(unsigned int *)(v33 + v34);
      if ((int)v36 < 1 || v35 - 1 < v34 + v36) {
        return 0;
      }
      uint64_t result = 0;
      uint64_t v37 = (unsigned int *)((char *)a1 + v32 + *(unsigned int *)((char *)a1 + v32));
      unint64_t v38 = (unint64_t)v37 - v33;
      BOOL v39 = (((unint64_t)v37 - v33) & 3) == 0 || *(unsigned char *)(a2 + 24) == 0;
      BOOL v40 = v39;
      if (v35 - 4 >= v38 && v40)
      {
        uint64_t v41 = *v37;
        if (v41 > 0x7FFFFFFE) {
          return 0;
        }
        uint64_t result = 0;
        unint64_t v42 = v41 + 4;
        BOOL v15 = v35 > v42;
        unint64_t v43 = v35 - v42;
        if (v15 && v43 >= v38)
        {
LABEL_68:
          --*(_DWORD *)(a2 + 40);
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2B0F20(uint64_t a1, unsigned int *a2)
{
  if (!a2) {
    return 1;
  }
  unint64_t v2 = (unint64_t)a2 - *(void *)a1;
  if ((v2 & 3) != 0 && *(unsigned char *)(a1 + 24)) {
    return 0;
  }
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 < 5 || v4 - 4 < v2) {
    return 0;
  }
  uint64_t v6 = *a2;
  BOOL v7 = v4 > v6 + 4;
  unint64_t v8 = v4 - (v6 + 4);
  unsigned int v10 = v7 && v8 >= v2;
  if (v6 <= 0x7FFFFFFE) {
    return v10;
  }
  else {
    return 0;
  }
}

uint64_t sub_2B0F8C(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 40);
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  BOOL v16 = v12 + 1 > v15 || v13 > v14;
  if (v16) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  uint64_t v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
        return 0;
      }
      uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      long long v28 = (char *)v27 - v2;
      BOOL v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30) {
        return 0;
      }
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v32 = 4 * v31 + 4;
      BOOL v16 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (!v16 || v33 < (unint64_t)v28) {
        return 0;
      }
      if (v31)
      {
        unint64_t v35 = 0;
        uint64_t v36 = v27 + 1;
        while ((sub_2B1208((int *)((char *)v36 + *v36), a2) & 1) != 0)
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            int v12 = *(_DWORD *)(a2 + 40) - 1;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

uint64_t sub_2B117C(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2B1208((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2B1208(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 40);
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  BOOL v16 = v12 + 1 > v15 || v13 > v14;
  if (v16) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  uint64_t v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
        return 0;
      }
      uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      long long v28 = (char *)v27 - v2;
      BOOL v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30) {
        return 0;
      }
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v32 = 4 * v31 + 4;
      BOOL v16 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (!v16 || v33 < (unint64_t)v28) {
        return 0;
      }
      if (v31)
      {
        unint64_t v35 = 0;
        uint64_t v36 = v27 + 1;
        while ((sub_2A7ECC((int *)((char *)v36 + *v36), (uint64_t *)a2) & 1) != 0)
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            int v12 = *(_DWORD *)(a2 + 40) - 1;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

uint64_t sub_2B13F8(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 9) {
    goto LABEL_93;
  }
  uint64_t v22 = v20[4];
  if (!v20[4])
  {
LABEL_60:
    if (v21 >= 0xB)
    {
      uint64_t v36 = v20[5];
      if (v20[5])
      {
        uint64_t result = 0;
        uint64_t v37 = &v3[v36];
        BOOL v38 = ((unint64_t)&v3[v36] & 3) == 0 || v4 == 0;
        BOOL v39 = v38;
        if (v8 < (unint64_t)v37 || !v39) {
          return result;
        }
      }
      if (v21 >= 0xD)
      {
        uint64_t v40 = v20[6];
        if (v20[6])
        {
          uint64_t result = 0;
          uint64_t v41 = &v3[v40];
          BOOL v42 = ((unint64_t)&v3[v40] & 3) == 0 || v4 == 0;
          BOOL v43 = v42;
          if (v8 < (unint64_t)v41 || !v43) {
            return result;
          }
        }
        if (v21 >= 0xF)
        {
          uint64_t v44 = v20[7];
          if (v44)
          {
            uint64_t result = 0;
            unint64_t v45 = (unint64_t)&v3[v44];
            BOOL v47 = (v45 & 3) == 0 || v4 == 0;
            if (v8 < v45 || !v47) {
              return result;
            }
            uint64_t v48 = *(unsigned int *)(v2 + v45);
            if ((int)v48 < 1 || v7 - 1 < v45 + v48) {
              return 0;
            }
            BOOL v49 = (unsigned int *)((char *)a1 + v44 + *(unsigned int *)((char *)a1 + v44));
            goto LABEL_94;
          }
        }
      }
    }
LABEL_93:
    BOOL v49 = 0;
LABEL_94:
    uint64_t result = sub_2A7D68(a2, v49);
    if (result)
    {
      size_t v50 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v50 >= 0xFu && (uint64_t v51 = v50[7]) != 0) {
        unint64_t v52 = (int *)((char *)a1 + v51 + *(unsigned int *)((char *)a1 + v51));
      }
      else {
        unint64_t v52 = 0;
      }
      uint64_t result = sub_2B1718(a2, v52);
      if (result)
      {
        --*(_DWORD *)(a2 + 40);
        return 1;
      }
    }
    return result;
  }
  uint64_t result = 0;
  unint64_t v23 = &v3[v22];
  BOOL v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
  if (v8 >= (unint64_t)v23 && v25)
  {
    uint64_t v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26]) {
      return 0;
    }
    uint64_t result = 0;
    uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    long long v28 = (char *)v27 - v2;
    BOOL v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    BOOL v30 = v29;
    if (v8 >= (unint64_t)v28 && v30)
    {
      uint64_t v31 = *v27;
      if (v31 > 0x7FFFFFFE) {
        return 0;
      }
      unint64_t v32 = v31 + 4;
      unint64_t v33 = (unint64_t)&v28[v31 + 4];
      BOOL v34 = v7 - 1 >= v33 && v7 > v32;
      BOOL v35 = v34 && v7 - v32 >= (unint64_t)v28;
      if (!v35 || *(unsigned char *)(v2 + v33)) {
        return 0;
      }
      goto LABEL_60;
    }
  }
  return result;
}

BOOL sub_2B16B4(int *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 <= a3) {
    return 1;
  }
  uint64_t v5 = *(unsigned __int16 *)((char *)v4 + a3);
  if (!v5) {
    return 1;
  }
  unint64_t v6 = (unint64_t)a1 + v5 - *(void *)a2;
  if ((v6 & (a4 - 1)) != 0 && *(unsigned char *)(a2 + 24) != 0) {
    return 0;
  }
  unint64_t v8 = *(void *)(a2 + 8);
  BOOL v9 = v8 > 4;
  unint64_t v10 = v8 - 4;
  return v9 && v10 >= v6;
}

uint64_t sub_2B1718(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2B17A4((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2B17A4(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  unsigned int v12 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  if (v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v15 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v15) {
      return 0;
    }
  }
  else if (v7 - 2 < v15)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v16;
  unint64_t v17 = v7 - v16;
  if (v17 == 0 || !v9 || v17 < v15) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 >= 5)
  {
    uint64_t v21 = v19[2];
    if (v19[2])
    {
      uint64_t v22 = &v3[v21];
      BOOL v24 = ((unint64_t)&v3[v21] & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v22 || !v24) {
        return 0;
      }
      uint64_t v25 = *(unsigned int *)&v22[v2];
      if ((int)v25 < 1 || v7 - 1 < (unint64_t)&v22[v25]) {
        return 0;
      }
      uint64_t v26 = (unsigned int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21));
      uint64_t v27 = (char *)v26 - v2;
      BOOL v29 = (((unint64_t)v26 - v2) & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v27 || !v29) {
        return 0;
      }
      uint64_t v30 = *v26;
      if (v30 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v31 = 4 * v30 + 4;
      BOOL v9 = v7 >= v31;
      unint64_t v32 = v7 - v31;
      if (v32 == 0 || !v9 || v32 < (unint64_t)v27) {
        return 0;
      }
    }
    if (v20 >= 7)
    {
      uint64_t v34 = v19[3];
      if (v19[3])
      {
        BOOL v35 = &v3[v34];
        BOOL v37 = ((unint64_t)&v3[v34] & 3) == 0 || v4 == 0;
        if (v8 < (unint64_t)v35 || !v37) {
          return 0;
        }
        uint64_t v38 = *(unsigned int *)&v35[v2];
        if ((int)v38 < 1 || v7 - 1 < (unint64_t)&v35[v38]) {
          return 0;
        }
        BOOL v39 = (unsigned int *)((char *)a1 + v34 + *(unsigned int *)((char *)a1 + v34));
        uint64_t v40 = (char *)v39 - v2;
        BOOL v42 = (((unint64_t)v39 - v2) & 3) == 0 || v4 == 0;
        if (v8 < (unint64_t)v40 || !v42) {
          return 0;
        }
        uint64_t v43 = *v39;
        if (v43 > 0xFFFFFFE) {
          return 0;
        }
        unint64_t v44 = (8 * v43) | 4;
        BOOL v9 = v7 >= v44;
        unint64_t v45 = v7 - v44;
        if (v45 == 0 || !v9 || v45 < (unint64_t)v40) {
          return 0;
        }
      }
      if (v20 >= 9)
      {
        uint64_t v46 = v19[4];
        if (v46)
        {
          unint64_t v47 = (unint64_t)&v3[v46];
          BOOL v49 = (v47 & 3) == 0 || v4 == 0;
          if (v8 < v47 || !v49) {
            return 0;
          }
          uint64_t v50 = *(unsigned int *)(v2 + v47);
          if ((int)v50 >= 1 && v7 - 1 >= v47 + v50)
          {
            uint64_t v51 = (unsigned int *)((char *)a1 + v46 + *(unsigned int *)((char *)a1 + v46));
            goto LABEL_93;
          }
          return 0;
        }
      }
    }
  }
  uint64_t v51 = 0;
LABEL_93:
  if (!sub_2A7D68(a2, v51)) {
    return 0;
  }
  --*(_DWORD *)(a2 + 40);
  return 1;
}

uint64_t sub_2B1A60(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 40);
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  BOOL v16 = v12 + 1 > v15 || v13 > v14;
  if (v16) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  uint64_t v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
        return 0;
      }
      uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      long long v28 = (char *)v27 - v2;
      BOOL v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30) {
        return 0;
      }
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v32 = 4 * v31 + 4;
      BOOL v16 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (!v16 || v33 < (unint64_t)v28) {
        return 0;
      }
      if (v31)
      {
        unint64_t v35 = 0;
        uint64_t v36 = v27 + 1;
        while ((sub_2B1C50((int *)((char *)v36 + *v36), a2) & 1) != 0)
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            int v12 = *(_DWORD *)(a2 + 40) - 1;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

uint64_t sub_2B1C50(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  unsigned int v12 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  if (v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v15 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v15) {
      return 0;
    }
  }
  else if (v7 - 2 < v15)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v16;
  unint64_t v17 = v7 - v16;
  if (v17 == 0 || !v9 || v17 < v15) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_77;
  }
  uint64_t v21 = v19[2];
  if (v19[2])
  {
    uint64_t v22 = &v3[v21];
    BOOL v23 = ((unint64_t)&v3[v21] & 3) == 0 || v4 == 0;
    BOOL v24 = v23;
    if (v8 < (unint64_t)v22 || !v24) {
      return 0;
    }
  }
  if (v20 < 7) {
    goto LABEL_77;
  }
  if (v19[3] && v7 - 1 < (unint64_t)&v3[v19[3]]) {
    return 0;
  }
  if (v20 < 9) {
    goto LABEL_77;
  }
  uint64_t v25 = v19[4];
  if (v19[4])
  {
    uint64_t v26 = &v3[v25];
    BOOL v28 = ((unint64_t)&v3[v25] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v26 || !v28) {
      return 0;
    }
    uint64_t v29 = *(unsigned int *)&v26[v2];
    if ((int)v29 < 1 || v7 - 1 < (unint64_t)&v26[v29]) {
      return 0;
    }
    BOOL v30 = (unsigned int *)((char *)a1 + v25 + *(unsigned int *)((char *)a1 + v25));
    uint64_t v31 = (char *)v30 - v2;
    BOOL v33 = (((unint64_t)v30 - v2) & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v31 || !v33) {
      return 0;
    }
    uint64_t v34 = *v30;
    if (v34 > 0xFFFFFFE) {
      return 0;
    }
    unint64_t v35 = (8 * v34) | 4;
    BOOL v9 = v7 >= v35;
    unint64_t v36 = v7 - v35;
    if (v36 == 0 || !v9 || v36 < (unint64_t)v31) {
      return 0;
    }
  }
  if (v20 < 0xB || (uint64_t v37 = v19[5]) == 0)
  {
LABEL_77:
    BOOL v42 = 0;
LABEL_78:
    if (sub_2B0C38(a2, v42))
    {
      --*(_DWORD *)(a2 + 40);
      return 1;
    }
    return 0;
  }
  unint64_t v38 = (unint64_t)&v3[v37];
  BOOL v40 = (v38 & 3) == 0 || v4 == 0;
  if (v8 < v38 || !v40) {
    return 0;
  }
  uint64_t v41 = *(unsigned int *)(v2 + v38);
  if ((int)v41 >= 1 && v7 - 1 >= v38 + v41)
  {
    BOOL v42 = (unsigned int *)((char *)a1 + v37 + *(unsigned int *)((char *)a1 + v37));
    goto LABEL_78;
  }
  return 0;
}

uint64_t sub_2B1EC0(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  uint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 >= 5u)
  {
    uint64_t v23 = v22[2];
    if (v23)
    {
      uint64_t result = 0;
      unint64_t v24 = (unint64_t)&v3[v23];
      BOOL v26 = (v24 & 3) == 0 || v4 == 0;
      if (v8 < v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
        return 0;
      }
      uint64_t result = sub_2B2260((int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23)), a2);
      if (!result) {
        return result;
      }
      uint64_t v21 = -(uint64_t)*a1;
    }
  }
  BOOL v28 = (char *)a1 + v21;
  if (*(unsigned __int16 *)((char *)a1 + v21) < 7u || (uint64_t v29 = *((unsigned __int16 *)v28 + 3), !*((_WORD *)v28 + 3)))
  {
LABEL_68:
    uint64_t result = sub_2A7CE0(a1, a2, 8u);
    if (result)
    {
      unint64_t v44 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v44 >= 9u && (uint64_t v45 = v44[4]) != 0) {
        uint64_t v46 = (unsigned int *)((char *)a1 + v45 + *(unsigned int *)((char *)a1 + v45));
      }
      else {
        uint64_t v46 = 0;
      }
      uint64_t result = sub_2A7D68(a2, v46);
      if (result)
      {
        unint64_t v47 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v47 >= 9u && (uint64_t v48 = v47[4]) != 0) {
          BOOL v49 = (int *)((char *)a1 + v48 + *(unsigned int *)((char *)a1 + v48));
        }
        else {
          BOOL v49 = 0;
        }
        uint64_t result = sub_2B21D4(a2, v49);
        if (result)
        {
          --*(_DWORD *)(a2 + 40);
          return 1;
        }
      }
    }
    return result;
  }
  uint64_t v30 = *(void *)a2;
  unint64_t v31 = (unint64_t)a1 + v29 - *(void *)a2;
  if ((v31 & 3) != 0 && *(unsigned char *)(a2 + 24)) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v32 = *(void *)(a2 + 8);
  if (v32 >= 5 && v32 - 4 >= v31)
  {
    uint64_t v33 = *(unsigned int *)(v30 + v31);
    if ((int)v33 < 1 || v32 - 1 < v31 + v33) {
      return 0;
    }
    uint64_t result = 0;
    uint64_t v34 = (unsigned int *)((char *)a1 + v29 + *(unsigned int *)((char *)a1 + v29));
    unint64_t v35 = (unint64_t)v34 - v30;
    BOOL v36 = (((unint64_t)v34 - v30) & 3) == 0 || *(unsigned char *)(a2 + 24) == 0;
    BOOL v37 = v36;
    if (v32 - 4 >= v35 && v37)
    {
      uint64_t v38 = *v34;
      if (v38 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v39 = 4 * v38 + 4;
      BOOL v15 = v32 > v39;
      unint64_t v40 = v32 - v39;
      if (!v15 || v40 < v35) {
        return 0;
      }
      if (v38)
      {
        unint64_t v42 = 0;
        uint64_t v43 = v34 + 1;
        while ((sub_2B266C((int *)((char *)v43 + *v43), (uint64_t *)a2) & 1) != 0)
        {
          ++v42;
          ++v43;
          if (v42 >= *v34) {
            goto LABEL_68;
          }
        }
        return 0;
      }
      goto LABEL_68;
    }
  }
  return result;
}

BOOL sub_2B21D4(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    BOOL result = sub_2B280C((int *)((char *)v5 + *v5), a1);
    if (!result) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2B2260(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 40);
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  BOOL v16 = v12 + 1 > v15 || v13 > v14;
  if (v16) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  uint64_t v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
        return 0;
      }
      uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      BOOL v28 = (char *)v27 - v2;
      BOOL v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30) {
        return 0;
      }
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v32 = 4 * v31 + 4;
      BOOL v16 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (!v16 || v33 < (unint64_t)v28) {
        return 0;
      }
      if (v31)
      {
        unint64_t v35 = 0;
        BOOL v36 = v27 + 1;
        while ((sub_2B2450((int *)((char *)v36 + *v36), (uint64_t *)a2) & 1) != 0)
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            int v12 = *(_DWORD *)(a2 + 40) - 1;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

uint64_t sub_2B2450(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  BOOL v12 = (v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5);
  if (v12) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_81;
  }
  uint64_t v21 = v19[2];
  if (v19[2])
  {
    uint64_t v14 = 0;
    uint64_t v22 = &v3[v21];
    BOOL v24 = ((unint64_t)&v3[v21] & 3) == 0 || v4 == 0;
    if (v7 < (unint64_t)v22 || !v24) {
      return v14;
    }
    uint64_t v25 = *(unsigned int *)&v22[v2];
    if ((int)v25 < 1 || v6 - 1 < (unint64_t)&v22[v25]) {
      return 0;
    }
    uint64_t v14 = 0;
    uint64_t v26 = (unsigned int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21));
    uint64_t v27 = (char *)v26 - v2;
    BOOL v28 = (((unint64_t)v26 - v2) & 3) == 0 || v4 == 0;
    BOOL v29 = v28;
    if (v7 < (unint64_t)v27 || !v29) {
      return v14;
    }
    uint64_t v30 = *v26;
    if (v30 > 0x7FFFFFFE) {
      return 0;
    }
    unint64_t v31 = v30 + 4;
    unint64_t v32 = (unint64_t)&v27[v30 + 4];
    BOOL v33 = v6 - 1 >= v32 && v6 > v31;
    BOOL v34 = v33 && v6 - v31 >= (unint64_t)v27;
    if (!v34 || *(unsigned char *)(v2 + v32)) {
      return 0;
    }
  }
  if (v20 < 7) {
    goto LABEL_81;
  }
  uint64_t v35 = v19[3];
  if (!v35) {
    goto LABEL_81;
  }
  uint64_t v14 = 0;
  unint64_t v36 = (unint64_t)&v3[v35];
  BOOL v37 = (v36 & 3) == 0 || v4 == 0;
  BOOL v38 = v37;
  if (v7 >= v36 && v38)
  {
    uint64_t v39 = *(unsigned int *)(v2 + v36);
    if ((int)v39 < 1 || v6 - 1 < v36 + v39) {
      return 0;
    }
    uint64_t v14 = 0;
    unint64_t v40 = (unsigned int *)((char *)a1 + v35 + *(unsigned int *)((char *)a1 + v35));
    uint64_t v41 = (char *)v40 - v2;
    BOOL v42 = (v41 & 3) == 0 || v4 == 0;
    BOOL v43 = v42;
    if (v7 >= (unint64_t)v41 && v43)
    {
      uint64_t v44 = *v40;
      if (v44 > 0x7FFFFFE) {
        return 0;
      }
      uint64_t v14 = 0;
      unint64_t v45 = (16 * v44) | 4;
      BOOL v12 = v6 > v45;
      unint64_t v46 = v6 - v45;
      if (v12 && v46 >= (unint64_t)v41)
      {
LABEL_81:
        *((_DWORD *)a2 + 10) = v10;
        return 1;
      }
    }
  }
  return v14;
}

uint64_t sub_2B266C(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  BOOL v12 = (v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5);
  if (v12) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_61;
  }
  uint64_t v21 = v19[2];
  if (!v19[2]
    || ((v14 = 0, v22 = &v3[v21], ((unint64_t)&v3[v21] & 3) != 0) ? (BOOL v23 = v4 == 0) : (BOOL v23 = 1),
        !v23 ? (int v24 = 0) : (int v24 = 1),
        v7 >= (unint64_t)v22 && v24))
  {
    if (v20 < 7) {
      goto LABEL_61;
    }
    uint64_t v25 = v19[3];
    if (!v25) {
      goto LABEL_61;
    }
    uint64_t v14 = 0;
    unint64_t v26 = (unint64_t)&v3[v25];
    BOOL v27 = (v26 & 3) == 0 || v4 == 0;
    BOOL v28 = v27;
    if (v7 >= v26 && v28)
    {
      uint64_t v29 = *(unsigned int *)(v2 + v26);
      if ((int)v29 < 1 || v6 - 1 < v26 + v29) {
        return 0;
      }
      uint64_t v14 = 0;
      uint64_t v30 = (unsigned int *)((char *)a1 + v25 + *(unsigned int *)((char *)a1 + v25));
      unint64_t v31 = (char *)v30 - v2;
      BOOL v32 = (v31 & 3) == 0 || v4 == 0;
      BOOL v33 = v32;
      if (v7 >= (unint64_t)v31 && v33)
      {
        uint64_t v34 = *v30;
        if (v34 > 0xFFFFFFE) {
          return 0;
        }
        uint64_t v14 = 0;
        unint64_t v35 = (8 * v34) | 4;
        BOOL v12 = v6 > v35;
        unint64_t v36 = v6 - v35;
        if (v12 && v36 >= (unint64_t)v31)
        {
LABEL_61:
          *((_DWORD *)a2 + 10) = v10;
          return 1;
        }
      }
    }
  }
  return v14;
}

BOOL sub_2B280C(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  unsigned int v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_79;
  }
  uint64_t v22 = v20[2];
  if (!v20[2])
  {
LABEL_60:
    if (v21 >= 7)
    {
      if (v20[3] && v7 - 1 < (unint64_t)&v3[v20[3]]) {
        return 0;
      }
      if (v21 >= 9)
      {
        if (v20[4] && v7 - 1 < (unint64_t)&v3[v20[4]]) {
          return 0;
        }
        if (v21 >= 0xB)
        {
          uint64_t v36 = v20[5];
          if (v36)
          {
            BOOL result = 0;
            unint64_t v37 = (unint64_t)&v3[v36];
            BOOL v39 = (v37 & 3) == 0 || v4 == 0;
            if (v8 < v37 || !v39) {
              return result;
            }
            uint64_t v40 = *(unsigned int *)(v2 + v37);
            if ((int)v40 < 1 || v7 - 1 < v37 + v40) {
              return 0;
            }
            uint64_t v41 = (unsigned int *)((char *)a1 + v36 + *(unsigned int *)((char *)a1 + v36));
            goto LABEL_80;
          }
        }
      }
    }
LABEL_79:
    uint64_t v41 = 0;
LABEL_80:
    BOOL result = sub_2B0C38(a2, v41);
    if (result)
    {
      BOOL result = sub_2B16B4(a1, a2, 0xCu, 4);
      if (result)
      {
        BOOL result = sub_2B16B4(a1, a2, 0xEu, 4);
        if (result)
        {
          BOOL result = sub_2A7CE0(a1, a2, 0x10u);
          if (result)
          {
            BOOL v42 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v42 >= 0x11u && (uint64_t v43 = v42[8]) != 0) {
              uint64_t v44 = (unsigned int *)((char *)a1 + v43 + *(unsigned int *)((char *)a1 + v43));
            }
            else {
              uint64_t v44 = 0;
            }
            BOOL result = sub_2AFF48((uint64_t *)a2, v44);
            if (result)
            {
              --*(_DWORD *)(a2 + 40);
              return 1;
            }
          }
        }
      }
    }
    return result;
  }
  BOOL result = 0;
  BOOL v23 = &v3[v22];
  BOOL v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
  if (v8 >= (unint64_t)v23 && v25)
  {
    uint64_t v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26]) {
      return 0;
    }
    BOOL result = 0;
    BOOL v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    BOOL v28 = (char *)v27 - v2;
    BOOL v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    BOOL v30 = v29;
    if (v8 >= (unint64_t)v28 && v30)
    {
      uint64_t v31 = *v27;
      if (v31 > 0x7FFFFFFE) {
        return 0;
      }
      unint64_t v32 = v31 + 4;
      unint64_t v33 = (unint64_t)&v28[v31 + 4];
      BOOL v34 = v7 - 1 >= v33 && v7 > v32;
      BOOL v35 = v34 && v7 - v32 >= (unint64_t)v28;
      if (!v35 || *(unsigned char *)(v2 + v33)) {
        return 0;
      }
      goto LABEL_60;
    }
  }
  return result;
}

uint64_t sub_2B2AEC(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  uint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 >= 5u)
  {
    uint64_t v23 = v22[2];
    if (v23)
    {
      uint64_t result = 0;
      unint64_t v24 = (unint64_t)&v3[v23];
      BOOL v26 = (v24 & 3) == 0 || v4 == 0;
      if (v8 < v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
        return 0;
      }
      uint64_t result = 0;
      BOOL v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
      BOOL v29 = (char *)v28 - v2;
      BOOL v30 = (v29 & 3) == 0 || v4 == 0;
      BOOL v31 = v30;
      if (v8 < (unint64_t)v29 || !v31) {
        return result;
      }
      uint64_t v32 = *v28;
      if (v32 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v33 = 4 * v32 + 4;
      BOOL v15 = v7 > v33;
      unint64_t v34 = v7 - v33;
      if (!v15 || v34 < (unint64_t)v29) {
        return 0;
      }
      if (v32)
      {
        unint64_t v36 = 0;
        unint64_t v37 = v28 + 1;
        while (sub_2B2F64((int *)((char *)v37 + *v37), a2))
        {
          ++v36;
          ++v37;
          if (v36 >= *v28)
          {
            uint64_t v21 = -(uint64_t)*a1;
            goto LABEL_61;
          }
        }
        return 0;
      }
    }
  }
LABEL_61:
  BOOL v38 = (char *)a1 + v21;
  if (*(unsigned __int16 *)((char *)a1 + v21) >= 7u && (uint64_t v39 = *((unsigned __int16 *)v38 + 3), *((_WORD *)v38 + 3)))
  {
    uint64_t v40 = *(void *)a2;
    unint64_t v41 = (unint64_t)a1 + v39 - *(void *)a2;
    int v42 = *(unsigned __int8 *)(a2 + 24);
    uint64_t result = 0;
    if ((v41 & 3) != 0 && v42 != 0) {
      return result;
    }
    unint64_t v44 = *(void *)(a2 + 8);
    if (v44 < 5 || v44 - 4 < v41) {
      return result;
    }
    uint64_t v45 = *(unsigned int *)(v40 + v41);
    if ((int)v45 < 1 || v44 - 1 < v41 + v45) {
      return 0;
    }
    unint64_t v46 = (int *)((char *)a1 + v39 + *(unsigned int *)((char *)a1 + v39));
    unint64_t v47 = (unint64_t)v46 - v40;
    BOOL v48 = (((unint64_t)v46 - v40) & 3) == 0 || v42 == 0;
    BOOL v49 = v48;
    if (v44 - 4 < v47 || !v49) {
      return 0;
    }
    uint64_t v51 = *v46;
    if (v51 > 0x1FFFFFFE) {
      return 0;
    }
    unint64_t v52 = 4 * v51 + 4;
    BOOL v15 = v44 > v52;
    unint64_t v53 = v44 - v52;
    if (!v15 || v53 < v47) {
      return 0;
    }
  }
  else
  {
    unint64_t v46 = 0;
  }
  uint64_t result = sub_2B2E4C(a2, v46);
  if (result)
  {
    uint64_t result = sub_2A7CE0(a1, a2, 8u);
    if (result)
    {
      uint64_t v55 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v55 >= 9u && (uint64_t v56 = v55[4]) != 0) {
        uint64_t v57 = (unsigned int *)((char *)a1 + v56 + *(unsigned int *)((char *)a1 + v56));
      }
      else {
        uint64_t v57 = 0;
      }
      uint64_t result = sub_2A7D68(a2, v57);
      if (result)
      {
        uint64_t v58 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v58 >= 9u && (uint64_t v59 = v58[4]) != 0) {
          uint64_t v60 = (int *)((char *)a1 + v59 + *(unsigned int *)((char *)a1 + v59));
        }
        else {
          uint64_t v60 = 0;
        }
        uint64_t result = sub_2B2ED8(a2, v60);
        if (result)
        {
          --*(_DWORD *)(a2 + 40);
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2B2E4C(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2B323C((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2B2ED8(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2B3820((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

BOOL sub_2B2F64(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_73;
  }
  if (!v20[2]) {
    goto LABEL_49;
  }
  unint64_t v22 = (unint64_t)&v3[v20[2]];
  if ((v22 & 3) != 0 && v4) {
    return 0;
  }
  BOOL result = 0;
  if (v7 >= 9 && v7 - 8 >= v22)
  {
LABEL_49:
    if (v21 < 7) {
      goto LABEL_73;
    }
    uint64_t v23 = v20[3];
    if (v20[3])
    {
      BOOL result = 0;
      unint64_t v24 = &v3[v23];
      BOOL v25 = ((unint64_t)&v3[v23] & 3) == 0 || v4 == 0;
      BOOL v26 = v25;
      if (v8 < (unint64_t)v24 || !v26) {
        return result;
      }
    }
    if (v21 < 9) {
      goto LABEL_73;
    }
    if (!v20[4]) {
      goto LABEL_88;
    }
    unint64_t v27 = (unint64_t)&v3[v20[4]];
    if ((v27 & 3) != 0 && v4) {
      return 0;
    }
    BOOL result = 0;
    if (v7 >= 9 && v7 - 8 >= v27)
    {
LABEL_88:
      if (v21 >= 0xB)
      {
        uint64_t v28 = v20[5];
        if (v20[5])
        {
          BOOL result = 0;
          BOOL v29 = &v3[v28];
          BOOL v30 = ((unint64_t)&v3[v28] & 3) == 0 || v4 == 0;
          BOOL v31 = v30;
          if (v8 < (unint64_t)v29 || !v31) {
            return result;
          }
        }
        if (v21 >= 0xD)
        {
          uint64_t v32 = v20[6];
          if (v32)
          {
            BOOL result = 0;
            unint64_t v33 = (unint64_t)&v3[v32];
            BOOL v35 = (v33 & 3) == 0 || v4 == 0;
            if (v8 < v33 || !v35) {
              return result;
            }
            uint64_t v36 = *(unsigned int *)(v2 + v33);
            if ((int)v36 < 1 || v7 - 1 < v33 + v36) {
              return 0;
            }
            unint64_t v37 = (unsigned int *)((char *)a1 + v32 + *(unsigned int *)((char *)a1 + v32));
            goto LABEL_74;
          }
        }
      }
LABEL_73:
      unint64_t v37 = 0;
LABEL_74:
      BOOL result = sub_2B0C38(a2, v37);
      if (result)
      {
        BOOL result = sub_2A7CE0(a1, a2, 0xEu);
        if (result)
        {
          BOOL v38 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v38 >= 0xFu && (uint64_t v39 = v38[7]) != 0) {
            uint64_t v40 = (unsigned int *)((char *)a1 + v39 + *(unsigned int *)((char *)a1 + v39));
          }
          else {
            uint64_t v40 = 0;
          }
          BOOL result = sub_2B0C38(a2, v40);
          if (result)
          {
            unint64_t v41 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v41 < 0x11u
              || (uint64_t v42 = v41[8]) == 0
              || (BOOL result = 0, v43 = *(void *)(a2 + 8), v43 >= 2)
              && v43 - 1 >= (unint64_t)a1 + v42 - *(void *)a2)
            {
              --*(_DWORD *)(a2 + 40);
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2B323C(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 40);
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  BOOL v16 = v12 + 1 > v15 || v13 > v14;
  if (v16) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  unsigned int v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
        return 0;
      }
      unint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      uint64_t v28 = (char *)v27 - v2;
      BOOL v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30) {
        return 0;
      }
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v32 = 4 * v31 + 4;
      BOOL v16 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (!v16 || v33 < (unint64_t)v28) {
        return 0;
      }
      if (v31)
      {
        unint64_t v35 = 0;
        uint64_t v36 = v27 + 1;
        while ((sub_2B342C((int *)((char *)v36 + *v36), a2) & 1) != 0)
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            int v12 = *(_DWORD *)(a2 + 40) - 1;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

uint64_t sub_2B342C(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_65;
  }
  if (!v20[2]) {
    goto LABEL_85;
  }
  unint64_t v22 = (unint64_t)&v3[v20[2]];
  if ((v22 & 3) != 0 && v4) {
    return 0;
  }
  uint64_t result = 0;
  if (v7 >= 9 && v7 - 8 >= v22)
  {
LABEL_85:
    if (v21 < 7) {
      goto LABEL_65;
    }
    if (!v20[3]) {
      goto LABEL_86;
    }
    unint64_t v23 = (unint64_t)&v3[v20[3]];
    if ((v23 & 3) != 0 && v4) {
      return 0;
    }
    uint64_t result = 0;
    if (v7 >= 9 && v7 - 8 >= v23)
    {
LABEL_86:
      if (v21 < 9) {
        goto LABEL_65;
      }
      if (!v20[4]) {
        goto LABEL_87;
      }
      unint64_t v24 = (unint64_t)&v3[v20[4]];
      if ((v24 & 3) != 0 && v4) {
        return 0;
      }
      uint64_t result = 0;
      if (v7 >= 9 && v7 - 8 >= v24)
      {
LABEL_87:
        if (v21 < 0xB) {
          goto LABEL_65;
        }
        if (!v20[5]) {
          goto LABEL_88;
        }
        unint64_t v25 = (unint64_t)&v3[v20[5]];
        if ((v25 & 3) != 0 && v4) {
          return 0;
        }
        uint64_t result = 0;
        if (v7 >= 9 && v7 - 8 >= v25)
        {
LABEL_88:
          if (v21 < 0xD) {
            goto LABEL_65;
          }
          uint64_t v26 = v20[6];
          if (!v26) {
            goto LABEL_65;
          }
          uint64_t result = 0;
          unint64_t v27 = (unint64_t)&v3[v26];
          BOOL v28 = (v27 & 3) == 0 || v4 == 0;
          BOOL v29 = v28;
          if (v8 >= v27 && v29)
          {
            uint64_t v30 = *(unsigned int *)(v2 + v27);
            if ((int)v30 < 1 || v7 - 1 < v27 + v30) {
              return 0;
            }
            uint64_t result = sub_2A7ECC((int *)((char *)a1 + v26 + *(unsigned int *)((char *)a1 + v26)), (uint64_t *)a2);
            if (result)
            {
LABEL_65:
              uint64_t result = sub_2B16B4(a1, a2, 0xEu, 4);
              if (result)
              {
                uint64_t result = sub_2A7CE0(a1, a2, 0x10u);
                if (result)
                {
                  uint64_t v31 = (unsigned __int16 *)((char *)a1 - *a1);
                  if (*v31 < 0x11u
                    || (uint64_t v32 = v31[8]) == 0
                    || (uint64_t result = sub_2A7ECC((int *)((char *)a1 + v32 + *(unsigned int *)((char *)a1 + v32)), (uint64_t *)a2), result))
                  {
                    uint64_t result = sub_2B16B4(a1, a2, 0x12u, 4);
                    if (result)
                    {
                      uint64_t result = sub_2B16B4(a1, a2, 0x14u, 4);
                      if (result)
                      {
                        uint64_t result = sub_2B16B4(a1, a2, 0x16u, 4);
                        if (result)
                        {
                          uint64_t result = sub_2B16B4(a1, a2, 0x18u, 4);
                          if (result)
                          {
                            uint64_t result = sub_2B16B4(a1, a2, 0x1Au, 4);
                            if (result)
                            {
                              uint64_t result = sub_2A7CE0(a1, a2, 0x1Cu);
                              if (result)
                              {
                                unint64_t v33 = (unsigned __int16 *)((char *)a1 - *a1);
                                if (*v33 >= 0x1Du && (uint64_t v34 = v33[14]) != 0) {
                                  unint64_t v35 = (unsigned int *)((char *)a1 + v34 + *(unsigned int *)((char *)a1 + v34));
                                }
                                else {
                                  unint64_t v35 = 0;
                                }
                                uint64_t result = sub_2B37B8(a2, v35);
                                if (result)
                                {
                                  uint64_t result = sub_2B16B4(a1, a2, 0x1Eu, 4);
                                  if (result)
                                  {
                                    --*(_DWORD *)(a2 + 40);
                                    return 1;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_2B37B8(uint64_t a1, unsigned int *a2)
{
  if (!a2) {
    return 1;
  }
  unint64_t v2 = (unint64_t)a2 - *(void *)a1;
  if ((v2 & 3) != 0 && *(unsigned char *)(a1 + 24)) {
    return 0;
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 < 5 || v3 - 4 < v2) {
    return 0;
  }
  uint64_t v5 = *a2;
  if (v5 > 0x3FFFFFFE) {
    return 0;
  }
  unint64_t v6 = 2 * v5 + 4;
  BOOL v7 = v3 > v6;
  unint64_t v8 = v3 - v6;
  return v7 && v8 >= v2;
}

uint64_t sub_2B3820(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_77;
  }
  if (v20[2])
  {
    unint64_t v22 = (unint64_t)&v3[v20[2]];
    if ((v22 & 3) != 0 && v4) {
      return 0;
    }
    uint64_t result = 0;
    if (v7 < 9 || v7 - 8 < v22) {
      return result;
    }
  }
  if (v21 < 7) {
    goto LABEL_77;
  }
  if (v20[3])
  {
    unint64_t v23 = (unint64_t)&v3[v20[3]];
    if ((v23 & 3) != 0 && v4) {
      return 0;
    }
    uint64_t result = 0;
    if (v7 < 9 || v7 - 8 < v23) {
      return result;
    }
  }
  if (v21 < 9)
  {
LABEL_77:
    uint64_t result = sub_2A7CE0(a1, a2, 0xEu);
    if (result)
    {
      uint64_t v39 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v39 >= 0xFu && (uint64_t v40 = v39[7]) != 0) {
        unint64_t v41 = (unsigned int *)((char *)a1 + v40 + *(unsigned int *)((char *)a1 + v40));
      }
      else {
        unint64_t v41 = 0;
      }
      uint64_t result = sub_2B0F20(a2, v41);
      if (result)
      {
        --*(_DWORD *)(a2 + 40);
        return 1;
      }
    }
    return result;
  }
  uint64_t v24 = v20[4];
  if (!v20[4]) {
    goto LABEL_64;
  }
  uint64_t result = 0;
  unint64_t v25 = &v3[v24];
  BOOL v26 = ((unint64_t)&v3[v24] & 3) == 0 || v4 == 0;
  BOOL v27 = v26;
  if (v8 >= (unint64_t)v25 && v27)
  {
    uint64_t v28 = *(unsigned int *)&v25[v2];
    if ((int)v28 < 1 || v7 - 1 < (unint64_t)&v25[v28]) {
      return 0;
    }
    uint64_t result = 0;
    BOOL v29 = (unsigned int *)((char *)a1 + v24 + *(unsigned int *)((char *)a1 + v24));
    uint64_t v30 = (char *)v29 - v2;
    BOOL v31 = (v30 & 3) == 0 || v4 == 0;
    BOOL v32 = v31;
    if (v8 >= (unint64_t)v30 && v32)
    {
      uint64_t v33 = *v29;
      if (v33 > 0xFFFFFFE) {
        return 0;
      }
      uint64_t result = 0;
      unint64_t v34 = (8 * v33) | 4;
      BOOL v9 = v7 >= v34;
      unint64_t v35 = v7 - v34;
      if (v35 != 0 && v9 && v35 >= (unint64_t)v30)
      {
LABEL_64:
        if (v21 >= 0xB)
        {
          if (v20[5])
          {
            uint64_t result = 0;
            unint64_t v36 = (unint64_t)&v3[v20[5]];
            BOOL v37 = (v36 & 3) == 0 || v4 == 0;
            BOOL v38 = v37;
            if (v8 < v36 || !v38) {
              return result;
            }
          }
          if (v21 >= 0xD && v20[6] && v7 - 1 < (unint64_t)&v3[v20[6]]) {
            return 0;
          }
        }
        goto LABEL_77;
      }
    }
  }
  return result;
}

uint64_t sub_2B3ADC(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  unint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 >= 5u)
  {
    uint64_t v23 = v22[2];
    if (v23)
    {
      uint64_t result = 0;
      unint64_t v24 = (unint64_t)&v3[v23];
      BOOL v26 = (v24 & 3) == 0 || v4 == 0;
      if (v8 < v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
        return 0;
      }
      uint64_t result = 0;
      uint64_t v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
      BOOL v29 = (char *)v28 - v2;
      BOOL v30 = (v29 & 3) == 0 || v4 == 0;
      BOOL v31 = v30;
      if (v8 < (unint64_t)v29 || !v31) {
        return result;
      }
      uint64_t v32 = *v28;
      if (v32 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v33 = 4 * v32 + 4;
      BOOL v15 = v7 > v33;
      unint64_t v34 = v7 - v33;
      if (!v15 || v34 < (unint64_t)v29) {
        return 0;
      }
      if (v32)
      {
        unint64_t v36 = 0;
        BOOL v37 = v28 + 1;
        while ((sub_2B40EC((int *)((char *)v37 + *v37), a2) & 1) != 0)
        {
          ++v36;
          ++v37;
          if (v36 >= *v28)
          {
            uint64_t v21 = -(uint64_t)*a1;
            goto LABEL_59;
          }
        }
        return 0;
      }
    }
  }
LABEL_59:
  BOOL v38 = (char *)a1 + v21;
  if (*(unsigned __int16 *)((char *)a1 + v21) >= 7u && (uint64_t v39 = *((unsigned __int16 *)v38 + 3), *((_WORD *)v38 + 3)))
  {
    uint64_t v40 = *(void *)a2;
    unint64_t v41 = (unint64_t)a1 + v39 - *(void *)a2;
    int v42 = *(unsigned __int8 *)(a2 + 24);
    uint64_t result = 0;
    if ((v41 & 3) != 0 && v42 != 0) {
      return result;
    }
    unint64_t v44 = *(void *)(a2 + 8);
    if (v44 < 5 || v44 - 4 < v41) {
      return result;
    }
    uint64_t v45 = *(unsigned int *)(v40 + v41);
    if ((int)v45 < 1 || v44 - 1 < v41 + v45) {
      return 0;
    }
    unint64_t v46 = (int *)((char *)a1 + v39 + *(unsigned int *)((char *)a1 + v39));
    unint64_t v47 = (unint64_t)v46 - v40;
    BOOL v48 = (((unint64_t)v46 - v40) & 3) == 0 || v42 == 0;
    BOOL v49 = v48;
    if (v44 - 4 < v47 || !v49) {
      return 0;
    }
    uint64_t v51 = *v46;
    if (v51 > 0x1FFFFFFE) {
      return 0;
    }
    unint64_t v52 = 4 * v51 + 4;
    BOOL v15 = v44 > v52;
    unint64_t v53 = v44 - v52;
    if (!v15 || v53 < v47) {
      return 0;
    }
  }
  else
  {
    unint64_t v46 = 0;
  }
  uint64_t result = sub_2B4060(a2, v46);
  if (result)
  {
    uint64_t result = sub_2AF5DC(a1, a2, 8u, 2);
    if (result)
    {
      uint64_t result = sub_2A7CE0(a1, a2, 0xAu);
      if (result)
      {
        uint64_t v55 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v55 >= 0xBu && (uint64_t v56 = v55[5]) != 0) {
          uint64_t v57 = (unsigned int *)((char *)a1 + v56 + *(unsigned int *)((char *)a1 + v56));
        }
        else {
          uint64_t v57 = 0;
        }
        uint64_t result = sub_2B37B8(a2, v57);
        if (result)
        {
          uint64_t result = sub_2A7CE0(a1, a2, 0xCu);
          if (result)
          {
            uint64_t v58 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v58 >= 0xDu && (uint64_t v59 = v58[6]) != 0) {
              uint64_t v60 = (unsigned int *)((char *)a1 + v59 + *(unsigned int *)((char *)a1 + v59));
            }
            else {
              uint64_t v60 = 0;
            }
            uint64_t result = sub_2B37B8(a2, v60);
            if (result)
            {
              uint64_t result = sub_2A7CE0(a1, a2, 0xEu);
              if (result)
              {
                uint64_t v61 = (unsigned __int16 *)((char *)a1 - *a1);
                if (*v61 >= 0xFu && (uint64_t v62 = v61[7]) != 0) {
                  uint64_t v63 = (unsigned int *)((char *)a1 + v62 + *(unsigned int *)((char *)a1 + v62));
                }
                else {
                  uint64_t v63 = 0;
                }
                uint64_t result = sub_2A7D68(a2, v63);
                if (result)
                {
                  unsigned int v64 = (unsigned __int16 *)((char *)a1 - *a1);
                  if (*v64 >= 0xFu && (uint64_t v65 = v64[7]) != 0) {
                    unint64_t v66 = (unsigned int *)((char *)a1 + v65 + *(unsigned int *)((char *)a1 + v65));
                  }
                  else {
                    unint64_t v66 = 0;
                  }
                  uint64_t result = sub_2AFFCC(a2, v66);
                  if (result)
                  {
                    uint64_t v67 = (unsigned __int16 *)((char *)a1 - *a1);
                    unsigned int v68 = *v67;
                    if (v68 < 0x11
                      || (!v67[8]
                       || (uint64_t result = 0, v69 = *(void *)(a2 + 8), v69 >= 2)
                       && v69 - 1 >= (unint64_t)a1 + v67[8] - *(void *)a2)
                      && (v68 < 0x13
                       || (uint64_t v70 = v67[9]) == 0
                       || (uint64_t result = 0, v71 = *(void *)(a2 + 8), v71 >= 2)
                       && v71 - 1 >= (unint64_t)a1 + v70 - *(void *)a2))
                    {
                      uint64_t result = sub_2A7CE0(a1, a2, 0x14u);
                      if (result)
                      {
                        char v72 = (unsigned __int16 *)((char *)a1 - *a1);
                        if (*v72 >= 0x15u && (uint64_t v73 = v72[10]) != 0) {
                          uint64_t v74 = (unsigned int *)((char *)a1 + v73 + *(unsigned int *)((char *)a1 + v73));
                        }
                        else {
                          uint64_t v74 = 0;
                        }
                        uint64_t result = sub_2A7D68(a2, v74);
                        if (result)
                        {
                          uint64_t result = sub_2A7CE0(a1, a2, 0x16u);
                          if (result)
                          {
                            uint64_t v75 = (unsigned __int16 *)((char *)a1 - *a1);
                            if (*v75 >= 0x17u && (uint64_t v76 = v75[11]) != 0) {
                              char v77 = (unsigned int *)((char *)a1 + v76 + *(unsigned int *)((char *)a1 + v76));
                            }
                            else {
                              char v77 = 0;
                            }
                            uint64_t result = sub_2B37B8(a2, v77);
                            if (result)
                            {
                              uint64_t result = sub_2A7CE0(a1, a2, 0x18u);
                              if (result)
                              {
                                unint64_t v78 = (unsigned __int16 *)((char *)a1 - *a1);
                                if (*v78 >= 0x19u && (uint64_t v79 = v78[12]) != 0) {
                                  uint64_t v80 = (unsigned int *)((char *)a1 + v79 + *(unsigned int *)((char *)a1 + v79));
                                }
                                else {
                                  uint64_t v80 = 0;
                                }
                                uint64_t result = sub_2B37B8(a2, v80);
                                if (result)
                                {
                                  --*(_DWORD *)(a2 + 40);
                                  return 1;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2B4060(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2B40EC((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2B40EC(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5)
  {
LABEL_86:
    uint64_t result = sub_2A7CE0(a1, a2, 0xCu);
    if (result)
    {
      unint64_t v47 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v47 >= 0xDu && (uint64_t v48 = v47[6]) != 0) {
        BOOL v49 = (unsigned int *)((char *)a1 + v48 + *(unsigned int *)((char *)a1 + v48));
      }
      else {
        BOOL v49 = 0;
      }
      uint64_t result = sub_2A7D68(a2, v49);
      if (result)
      {
        uint64_t v50 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v50 >= 0xDu && (uint64_t v51 = v50[6]) != 0) {
          unint64_t v52 = (int *)((char *)a1 + v51 + *(unsigned int *)((char *)a1 + v51));
        }
        else {
          unint64_t v52 = 0;
        }
        uint64_t result = sub_2B44B8((uint64_t *)a2, v52);
        if (result)
        {
          uint64_t result = sub_2A7CE0(a1, a2, 0xEu);
          if (result)
          {
            unint64_t v53 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v53 >= 0xFu && (uint64_t v54 = v53[7]) != 0) {
              uint64_t v55 = (unsigned int *)((char *)a1 + v54 + *(unsigned int *)((char *)a1 + v54));
            }
            else {
              uint64_t v55 = 0;
            }
            uint64_t result = sub_2B37B8(a2, v55);
            if (result)
            {
              uint64_t result = sub_2A7CE0(a1, a2, 0x10u);
              if (result)
              {
                uint64_t v56 = (unsigned __int16 *)((char *)a1 - *a1);
                if (*v56 >= 0x11u && (uint64_t v57 = v56[8]) != 0) {
                  uint64_t v58 = (unsigned int *)((char *)a1 + v57 + *(unsigned int *)((char *)a1 + v57));
                }
                else {
                  uint64_t v58 = 0;
                }
                uint64_t result = sub_2B37B8(a2, v58);
                if (result)
                {
                  uint64_t result = sub_2AF5DC(a1, a2, 0x12u, 2);
                  if (result)
                  {
                    uint64_t result = sub_2AF5DC(a1, a2, 0x14u, 2);
                    if (result)
                    {
                      uint64_t result = sub_2AF5DC(a1, a2, 0x16u, 2);
                      if (result)
                      {
                        uint64_t result = sub_2AF5DC(a1, a2, 0x18u, 2);
                        if (result)
                        {
                          --*(_DWORD *)(a2 + 40);
                          return 1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return result;
  }
  uint64_t v22 = v20[2];
  if (!v20[2])
  {
LABEL_56:
    if (v21 >= 7)
    {
      uint64_t v35 = v20[3];
      if (v20[3])
      {
        uint64_t result = 0;
        unint64_t v36 = (unint64_t)&v3[v35];
        BOOL v37 = ((unint64_t)&v3[v35] & 1) == 0 || v4 == 0;
        BOOL v38 = v37;
        if (v7 - 2 < v36 || !v38) {
          return result;
        }
      }
      if (v21 >= 9)
      {
        uint64_t v39 = v20[4];
        if (v20[4])
        {
          uint64_t result = 0;
          unint64_t v40 = (unint64_t)&v3[v39];
          BOOL v41 = ((unint64_t)&v3[v39] & 1) == 0 || v4 == 0;
          BOOL v42 = v41;
          if (v7 - 2 < v40 || !v42) {
            return result;
          }
        }
        if (v21 >= 0xB)
        {
          uint64_t v43 = v20[5];
          if (v43)
          {
            uint64_t result = 0;
            unint64_t v44 = (unint64_t)&v3[v43];
            BOOL v45 = (v44 & 1) == 0 || v4 == 0;
            BOOL v46 = v45;
            if (v7 - 2 < v44 || !v46) {
              return result;
            }
          }
        }
      }
    }
    goto LABEL_86;
  }
  uint64_t result = 0;
  uint64_t v23 = &v3[v22];
  BOOL v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
  if (v8 >= (unint64_t)v23 && v25)
  {
    uint64_t v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26]) {
      return 0;
    }
    uint64_t result = 0;
    uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    uint64_t v28 = (char *)v27 - v2;
    BOOL v29 = (v28 & 3) == 0 || v4 == 0;
    BOOL v30 = v29;
    if (v8 >= (unint64_t)v28 && v30)
    {
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v32 = 4 * v31 + 4;
      BOOL v9 = v7 >= v32;
      unint64_t v33 = v7 - v32;
      if (v33 == 0 || !v9 || v33 < (unint64_t)v28) {
        return 0;
      }
      goto LABEL_56;
    }
  }
  return result;
}

uint64_t sub_2B44B8(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2B4544((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2B4544(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 7) {
    goto LABEL_65;
  }
  uint64_t v21 = v19[3];
  if (v19[3])
  {
    uint64_t v14 = 0;
    uint64_t v22 = &v3[v21];
    BOOL v24 = ((unint64_t)&v3[v21] & 3) == 0 || v4 == 0;
    if (v7 < (unint64_t)v22 || !v24) {
      return v14;
    }
    uint64_t v25 = *(unsigned int *)&v22[v2];
    if ((int)v25 < 1 || v6 - 1 < (unint64_t)&v22[v25]) {
      return 0;
    }
    uint64_t v14 = 0;
    uint64_t v26 = (unsigned int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21));
    uint64_t v27 = (char *)v26 - v2;
    BOOL v28 = (v27 & 3) == 0 || v4 == 0;
    BOOL v29 = v28;
    if (v7 < (unint64_t)v27 || !v29) {
      return v14;
    }
    uint64_t v30 = *v26;
    if (v30 > 0x1FFFFFFE) {
      return 0;
    }
    unint64_t v31 = 4 * v30 + 4;
    BOOL v8 = v6 >= v31;
    unint64_t v32 = v6 - v31;
    if (v32 == 0 || !v8 || v32 < (unint64_t)v27) {
      return 0;
    }
  }
  if (v20 < 9) {
    goto LABEL_65;
  }
  if (v19[4] && v6 - 1 < (unint64_t)&v3[v19[4]]) {
    return 0;
  }
  if (v20 < 0xB) {
    goto LABEL_65;
  }
  if (v19[5] && v6 - 1 < (unint64_t)&v3[v19[5]]) {
    return 0;
  }
  if (v20 < 0xD || !v19[6]) {
    goto LABEL_65;
  }
  unint64_t v34 = (unint64_t)&v3[v19[6]];
  if ((v34 & 3) != 0 && v4) {
    return 0;
  }
  uint64_t v14 = 0;
  if (v6 >= 9 && v6 - 8 >= v34)
  {
LABEL_65:
    *((_DWORD *)a2 + 10) = v10;
    return 1;
  }
  return v14;
}

uint64_t sub_2B4724(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  uint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 >= 5u)
  {
    uint64_t v23 = v22[2];
    if (v23)
    {
      uint64_t result = 0;
      unint64_t v24 = (unint64_t)&v3[v23];
      BOOL v26 = (v24 & 3) == 0 || v4 == 0;
      if (v8 < v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
        return 0;
      }
      uint64_t result = 0;
      BOOL v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
      BOOL v29 = (char *)v28 - v2;
      BOOL v30 = (v29 & 3) == 0 || v4 == 0;
      BOOL v31 = v30;
      if (v8 < (unint64_t)v29 || !v31) {
        return result;
      }
      uint64_t v32 = *v28;
      if (v32 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v33 = 4 * v32 + 4;
      BOOL v15 = v7 > v33;
      unint64_t v34 = v7 - v33;
      if (!v15 || v34 < (unint64_t)v29) {
        return 0;
      }
      if (v32)
      {
        unint64_t v36 = 0;
        BOOL v37 = v28 + 1;
        while ((sub_2B4AE0((int *)((char *)v37 + *v37), (uint64_t *)a2) & 1) != 0)
        {
          ++v36;
          ++v37;
          if (v36 >= *v28)
          {
            uint64_t v21 = -(uint64_t)*a1;
            goto LABEL_61;
          }
        }
        return 0;
      }
    }
  }
LABEL_61:
  if (*(unsigned __int16 *)((char *)a1 + v21) < 7u) {
    goto LABEL_73;
  }
  uint64_t v38 = *(unsigned __int16 *)((char *)a1 + v21 + 6);
  if (!*(_WORD *)((char *)a1 + v21 + 6)) {
    goto LABEL_73;
  }
  unint64_t v39 = (unint64_t)a1 + v38 - *(void *)a2;
  uint64_t result = 0;
  if ((v39 & 3) == 0 || *(unsigned char *)(a2 + 24) == 0)
  {
    unint64_t v41 = *(void *)(a2 + 8);
    if (v41 >= 5 && v41 - 4 >= v39)
    {
      uint64_t v42 = *(unsigned int *)(*(void *)a2 + v39);
      if ((int)v42 < 1 || v41 - 1 < v39 + v42) {
        return 0;
      }
      uint64_t result = sub_2B4C14((int *)((char *)a1 + v38 + *(unsigned int *)((char *)a1 + v38)), a2);
      if (result)
      {
LABEL_73:
        uint64_t result = sub_2A7CE0(a1, a2, 8u);
        if (result)
        {
          uint64_t v43 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v43 >= 9u && (uint64_t v44 = v43[4]) != 0) {
            BOOL v45 = (unsigned int *)((char *)a1 + v44 + *(unsigned int *)((char *)a1 + v44));
          }
          else {
            BOOL v45 = 0;
          }
          uint64_t result = sub_2A7D68(a2, v45);
          if (result)
          {
            BOOL v46 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v46 >= 9u && (uint64_t v47 = v46[4]) != 0) {
              uint64_t v48 = (int *)((char *)a1 + v47 + *(unsigned int *)((char *)a1 + v47));
            }
            else {
              uint64_t v48 = 0;
            }
            uint64_t result = sub_2B4A54(a2, v48);
            if (result)
            {
              uint64_t result = sub_2B16B4(a1, a2, 0xAu, 4);
              if (result)
              {
                --*(_DWORD *)(a2 + 40);
                return 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2B4A54(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2B4EF4((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2B4AE0(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_43;
  }
  uint64_t v21 = v19[2];
  if (!v19[2]
    || ((v14 = 0, v22 = &v3[v21], ((unint64_t)&v3[v21] & 3) != 0) ? (BOOL v23 = v4 == 0) : (BOOL v23 = 1),
        !v23 ? (int v24 = 0) : (int v24 = 1),
        v7 >= (unint64_t)v22 && v24))
  {
    if (v20 < 7 || !v19[3]) {
      goto LABEL_43;
    }
    unint64_t v25 = (unint64_t)&v3[v19[3]];
    if ((v25 & 7) != 0 && v4) {
      return 0;
    }
    uint64_t v14 = 0;
    if (v6 >= 9 && v6 - 8 >= v25)
    {
LABEL_43:
      *((_DWORD *)a2 + 10) = v10;
      return 1;
    }
  }
  return v14;
}

uint64_t sub_2B4C14(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  unsigned int v12 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  if (v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v15 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v15) {
      return 0;
    }
  }
  else if (v7 - 2 < v15)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v16;
  unint64_t v17 = v7 - v16;
  if (v17 == 0 || !v9 || v17 < v15) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_95;
  }
  uint64_t v21 = v19[2];
  if (v19[2])
  {
    uint64_t v22 = &v3[v21];
    BOOL v24 = ((unint64_t)&v3[v21] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v22 || !v24) {
      return 0;
    }
    uint64_t v25 = *(unsigned int *)&v22[v2];
    if ((int)v25 < 1 || v7 - 1 < (unint64_t)&v22[v25]) {
      return 0;
    }
    BOOL v26 = (unsigned int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21));
    uint64_t v27 = (char *)v26 - v2;
    BOOL v29 = (((unint64_t)v26 - v2) & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v27 || !v29) {
      return 0;
    }
    uint64_t v30 = *v26;
    if (v30 > 0x7FFFFFFE) {
      return 0;
    }
    unint64_t v31 = v30 + 4;
    unint64_t v32 = (unint64_t)&v27[v30 + 4];
    BOOL v33 = v7 - 1 >= v32 && v7 > v31;
    BOOL v34 = v33 && v7 - v31 >= (unint64_t)v27;
    if (!v34 || *(unsigned char *)(v2 + v32)) {
      return 0;
    }
  }
  if (v20 < 7) {
    goto LABEL_95;
  }
  uint64_t v35 = v19[3];
  if (v19[3])
  {
    unint64_t v36 = &v3[v35];
    BOOL v38 = ((unint64_t)&v3[v35] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v36 || !v38) {
      return 0;
    }
    uint64_t v39 = *(unsigned int *)&v36[v2];
    if ((int)v39 < 1 || v7 - 1 < (unint64_t)&v36[v39]) {
      return 0;
    }
    unint64_t v40 = (unsigned int *)((char *)a1 + v35 + *(unsigned int *)((char *)a1 + v35));
    unint64_t v41 = (char *)v40 - v2;
    BOOL v43 = (((unint64_t)v40 - v2) & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v41 || !v43) {
      return 0;
    }
    uint64_t v44 = *v40;
    if (v44 > 0x7FFFFFFE) {
      return 0;
    }
    unint64_t v45 = v44 + 4;
    unint64_t v46 = (unint64_t)&v41[v44 + 4];
    if (v7 - 1 < v46 || v7 <= v45 || v7 - v45 < (unint64_t)v41) {
      return 0;
    }
    if (*(unsigned char *)(v2 + v46)) {
      return 0;
    }
  }
  if (v20 < 9 || (uint64_t v47 = v19[4]) == 0)
  {
LABEL_95:
    unint64_t v52 = 0;
LABEL_96:
    if (sub_2AFF48((uint64_t *)a2, v52))
    {
      --*(_DWORD *)(a2 + 40);
      return 1;
    }
    return 0;
  }
  unint64_t v48 = (unint64_t)&v3[v47];
  BOOL v50 = (v48 & 3) == 0 || v4 == 0;
  if (v8 < v48 || !v50) {
    return 0;
  }
  uint64_t v51 = *(unsigned int *)(v2 + v48);
  if ((int)v51 >= 1 && v7 - 1 >= v48 + v51)
  {
    unint64_t v52 = (unsigned int *)((char *)a1 + v47 + *(unsigned int *)((char *)a1 + v47));
    goto LABEL_96;
  }
  return 0;
}

uint64_t sub_2B4EF4(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  unsigned int v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_96;
  }
  uint64_t v22 = v20[2];
  if (v20[2])
  {
    uint64_t result = 0;
    BOOL v23 = &v3[v22];
    BOOL v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v23 || !v25) {
      return result;
    }
    uint64_t v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26]) {
      return 0;
    }
    uint64_t result = 0;
    uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    BOOL v28 = (char *)v27 - v2;
    BOOL v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    BOOL v30 = v29;
    if (v8 < (unint64_t)v28 || !v30) {
      return result;
    }
    uint64_t v31 = *v27;
    if (v31 > 0x7FFFFFFE) {
      return 0;
    }
    unint64_t v32 = v31 + 4;
    unint64_t v33 = (unint64_t)&v28[v31 + 4];
    BOOL v34 = v7 - 1 >= v33 && v7 > v32;
    BOOL v35 = v34 && v7 - v32 >= (unint64_t)v28;
    if (!v35 || *(unsigned char *)(v2 + v33)) {
      return 0;
    }
  }
  if (v21 < 7) {
    goto LABEL_96;
  }
  uint64_t v36 = v20[3];
  if (!v20[3])
  {
LABEL_83:
    if (v21 >= 9)
    {
      uint64_t v48 = v20[4];
      if (v48)
      {
        uint64_t result = 0;
        unint64_t v49 = (unint64_t)&v3[v48];
        BOOL v51 = (v49 & 3) == 0 || v4 == 0;
        if (v8 < v49 || !v51) {
          return result;
        }
        uint64_t v52 = *(unsigned int *)(v2 + v49);
        if ((int)v52 < 1 || v7 - 1 < v49 + v52) {
          return 0;
        }
        unint64_t v53 = (unsigned int *)((char *)a1 + v48 + *(unsigned int *)((char *)a1 + v48));
        goto LABEL_97;
      }
    }
LABEL_96:
    unint64_t v53 = 0;
LABEL_97:
    uint64_t result = sub_2A7D68(a2, v53);
    if (result)
    {
      uint64_t v54 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v54 >= 9u && (uint64_t v55 = v54[4]) != 0) {
        uint64_t v56 = (int *)((char *)a1 + v55 + *(unsigned int *)((char *)a1 + v55));
      }
      else {
        uint64_t v56 = 0;
      }
      uint64_t result = sub_2B5258((uint64_t *)a2, v56);
      if (result)
      {
        uint64_t result = sub_2A7CE0(a1, a2, 0xAu);
        if (result)
        {
          uint64_t v57 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v57 >= 0xBu && (uint64_t v58 = v57[5]) != 0) {
            uint64_t v59 = (unsigned int *)((char *)a1 + v58 + *(unsigned int *)((char *)a1 + v58));
          }
          else {
            uint64_t v59 = 0;
          }
          uint64_t result = sub_2AFF48((uint64_t *)a2, v59);
          if (result)
          {
            --*(_DWORD *)(a2 + 40);
            return 1;
          }
        }
      }
    }
    return result;
  }
  uint64_t result = 0;
  BOOL v37 = &v3[v36];
  BOOL v39 = ((unint64_t)&v3[v36] & 3) == 0 || v4 == 0;
  if (v8 >= (unint64_t)v37 && v39)
  {
    uint64_t v40 = *(unsigned int *)&v37[v2];
    if ((int)v40 < 1 || v7 - 1 < (unint64_t)&v37[v40]) {
      return 0;
    }
    uint64_t result = 0;
    unint64_t v41 = (unsigned int *)((char *)a1 + v36 + *(unsigned int *)((char *)a1 + v36));
    uint64_t v42 = (char *)v41 - v2;
    BOOL v43 = (((unint64_t)v41 - v2) & 3) == 0 || v4 == 0;
    BOOL v44 = v43;
    if (v8 >= (unint64_t)v42 && v44)
    {
      uint64_t v45 = *v41;
      if (v45 > 0x7FFFFFFE) {
        return 0;
      }
      uint64_t result = 0;
      unint64_t v46 = v45 + 4;
      unint64_t v47 = (unint64_t)&v42[v45 + 4];
      if (v7 - 1 < v47 || v7 <= v46 || v7 - v46 < (unint64_t)v42) {
        return result;
      }
      if (*(unsigned char *)(v2 + v47)) {
        return 0;
      }
      goto LABEL_83;
    }
  }
  return result;
}

uint64_t sub_2B5258(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2B52E4((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2B52E4(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v19 = *v18;
  if (v19 < 5) {
    return 0;
  }
  uint64_t v20 = v18[2];
  if (!v18[2]) {
    return 0;
  }
  uint64_t v14 = 0;
  unsigned int v21 = &v3[v20];
  BOOL v23 = ((unint64_t)&v3[v20] & 3) == 0 || v4 == 0;
  if (v7 >= (unint64_t)v21 && v23)
  {
    uint64_t v24 = *(unsigned int *)&v21[v2];
    if ((int)v24 < 1) {
      return 0;
    }
    unint64_t v25 = (unint64_t)&v21[v24];
    unint64_t v26 = v6 - 1;
    if (v6 - 1 < v25) {
      return 0;
    }
    uint64_t v14 = 0;
    BOOL v28 = (unsigned int *)((char *)a1 + v20 + *(unsigned int *)((char *)a1 + v20));
    BOOL v29 = (char *)v28 - v2;
    BOOL v30 = (((unint64_t)v28 - v2) & 3) == 0 || v4 == 0;
    BOOL v31 = v30;
    if (v7 >= (unint64_t)v29 && v31)
    {
      uint64_t v32 = *v28;
      if (v32 > 0x7FFFFFFE) {
        return 0;
      }
      unint64_t v33 = v32 + 4;
      BOOL v34 = &v29[v32 + 4];
      BOOL v35 = v26 >= (unint64_t)v34 && v6 > v33;
      BOOL v36 = v35 && v6 - v33 >= (unint64_t)v29;
      if (!v36 || v34[v2]) {
        return 0;
      }
      if (v19 >= 7)
      {
        uint64_t v37 = v18[3];
        if (v37)
        {
          uint64_t v14 = 0;
          unint64_t v38 = (unint64_t)&v3[v37];
          BOOL v40 = (v38 & 3) == 0 || v4 == 0;
          if (v7 < v38) {
            return v14;
          }
          if (!v40) {
            return v14;
          }
          uint64_t v14 = 0;
          uint64_t v41 = *(unsigned int *)(v2 + v38);
          if ((int)v41 < 1 || v26 < v38 + v41) {
            return v14;
          }
          uint64_t v14 = 0;
          uint64_t v42 = (unsigned int *)((char *)a1 + v37 + *(unsigned int *)((char *)a1 + v37));
          BOOL v43 = (char *)v42 - v2;
          BOOL v44 = (((unint64_t)v42 - v2) & 3) == 0 || v4 == 0;
          BOOL v45 = v44;
          if (v7 < (unint64_t)v43 || !v45) {
            return v14;
          }
          uint64_t v46 = *v42;
          if (v46 > 0x7FFFFFFE) {
            return 0;
          }
          uint64_t v14 = 0;
          unint64_t v47 = v46 + 4;
          uint64_t v48 = &v43[v46 + 4];
          if (v26 < (unint64_t)v48 || v6 <= v47 || v6 - v47 < (unint64_t)v43) {
            return v14;
          }
          if (v48[v2]) {
            return 0;
          }
        }
      }
      *((_DWORD *)a2 + 10) = v10;
      return 1;
    }
  }
  return v14;
}

uint64_t sub_2B5514(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 40);
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  BOOL v16 = v12 + 1 > v15 || v13 > v14;
  if (v16) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  unsigned int v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
        return 0;
      }
      uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      BOOL v28 = (char *)v27 - v2;
      BOOL v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30) {
        return 0;
      }
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v32 = 4 * v31 + 4;
      BOOL v16 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (!v16 || v33 < (unint64_t)v28) {
        return 0;
      }
      if (v31)
      {
        unint64_t v35 = 0;
        BOOL v36 = v27 + 1;
        while ((sub_2B5704((int *)((char *)v36 + *v36), (uint64_t *)a2) & 1) != 0)
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            int v12 = *(_DWORD *)(a2 + 40) - 1;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

uint64_t sub_2B5704(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 < 5u
    || (uint64_t v20 = v19[2]) == 0
    || ((v14 = 0, unint64_t v21 = (unint64_t)&v3[v20], (v21 & 3) != 0) ? (v22 = v4 == 0) : (v22 = 1),
        !v22 ? (int v23 = 0) : (int v23 = 1),
        v7 >= v21 && v23))
  {
    *((_DWORD *)a2 + 10) = v10;
    return 1;
  }
  return v14;
}

uint64_t sub_2B5800(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  BOOL v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 >= 5u)
  {
    uint64_t v23 = v22[2];
    if (v23)
    {
      uint64_t result = 0;
      unint64_t v24 = (unint64_t)&v3[v23];
      BOOL v26 = (v24 & 3) == 0 || v4 == 0;
      if (v8 < v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
        return 0;
      }
      uint64_t result = 0;
      BOOL v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
      BOOL v29 = (char *)v28 - v2;
      BOOL v30 = (v29 & 3) == 0 || v4 == 0;
      BOOL v31 = v30;
      if (v8 < (unint64_t)v29 || !v31) {
        return result;
      }
      uint64_t v32 = *v28;
      if (v32 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v33 = 4 * v32 + 4;
      BOOL v15 = v7 > v33;
      unint64_t v34 = v7 - v33;
      if (!v15 || v34 < (unint64_t)v29) {
        return 0;
      }
      if (v32)
      {
        unint64_t v36 = 0;
        uint64_t v37 = v28 + 1;
        while ((sub_2B5B4C((int *)((char *)v37 + *v37), (uint64_t *)a2) & 1) != 0)
        {
          ++v36;
          ++v37;
          if (v36 >= *v28)
          {
            uint64_t v21 = -(uint64_t)*a1;
            goto LABEL_61;
          }
        }
        return 0;
      }
    }
  }
LABEL_61:
  unint64_t v38 = (char *)a1 + v21;
  if (*(unsigned __int16 *)((char *)a1 + v21) >= 0xBu)
  {
    uint64_t v39 = *((unsigned __int16 *)v38 + 5);
    if (*((_WORD *)v38 + 5))
    {
      uint64_t v40 = *(void *)a2;
      unint64_t v41 = (unint64_t)a1 + v39 - *(void *)a2;
      int v42 = *(unsigned __int8 *)(a2 + 24);
      uint64_t result = 0;
      if ((v41 & 3) != 0 && v42 != 0) {
        return result;
      }
      unint64_t v44 = *(void *)(a2 + 8);
      if (v44 < 5 || v44 - 4 < v41) {
        return result;
      }
      uint64_t v45 = *(unsigned int *)(v40 + v41);
      if ((int)v45 < 1 || v44 - 1 < v41 + v45) {
        return 0;
      }
      uint64_t v46 = (unsigned int *)((char *)a1 + v39 + *(unsigned int *)((char *)a1 + v39));
      unint64_t v47 = (unint64_t)v46 - v40;
      BOOL v48 = (((unint64_t)v46 - v40) & 3) == 0 || v42 == 0;
      BOOL v49 = v48;
      if (v44 - 4 < v47 || !v49) {
        return 0;
      }
      uint64_t v51 = *v46;
      if (v51 > 0xFFFFFFE) {
        return 0;
      }
      unint64_t v52 = (8 * v51) | 4;
      BOOL v15 = v44 > v52;
      unint64_t v53 = v44 - v52;
      if (!v15 || v53 < v47) {
        return 0;
      }
    }
  }
  uint64_t result = sub_2A7CE0(a1, a2, 0xCu);
  if (result)
  {
    uint64_t v55 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v55 >= 0xDu && (uint64_t v56 = v55[6]) != 0) {
      uint64_t v57 = (unsigned int *)((char *)a1 + v56 + *(unsigned int *)((char *)a1 + v56));
    }
    else {
      uint64_t v57 = 0;
    }
    uint64_t result = sub_2A7D68(a2, v57);
    if (result)
    {
      uint64_t v58 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v58 >= 0xDu && (uint64_t v59 = v58[6]) != 0) {
        uint64_t v60 = (int *)((char *)a1 + v59 + *(unsigned int *)((char *)a1 + v59));
      }
      else {
        uint64_t v60 = 0;
      }
      uint64_t result = sub_2A7E40((uint64_t *)a2, v60);
      if (result)
      {
        --*(_DWORD *)(a2 + 40);
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_2B5B4C(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_86;
  }
  uint64_t v21 = v19[2];
  if (v19[2])
  {
    uint64_t v14 = 0;
    BOOL v22 = &v3[v21];
    BOOL v24 = ((unint64_t)&v3[v21] & 3) == 0 || v4 == 0;
    if (v7 < (unint64_t)v22 || !v24) {
      return v14;
    }
    uint64_t v25 = *(unsigned int *)&v22[v2];
    if ((int)v25 < 1 || v6 - 1 < (unint64_t)&v22[v25]) {
      return 0;
    }
    uint64_t v14 = 0;
    BOOL v26 = (unsigned int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21));
    uint64_t v27 = (char *)v26 - v2;
    BOOL v28 = (((unint64_t)v26 - v2) & 3) == 0 || v4 == 0;
    BOOL v29 = v28;
    if (v7 < (unint64_t)v27 || !v29) {
      return v14;
    }
    uint64_t v30 = *v26;
    if (v30 > 0xFFFFFFE) {
      return 0;
    }
    unint64_t v31 = (8 * v30) | 4;
    BOOL v8 = v6 >= v31;
    unint64_t v32 = v6 - v31;
    if (v32 == 0 || !v8 || v32 < (unint64_t)v27) {
      return 0;
    }
  }
  if (v20 < 7) {
    goto LABEL_86;
  }
  uint64_t v34 = v19[3];
  if (v19[3])
  {
    unint64_t v35 = (unint64_t)&v3[v34];
    if (((unint64_t)&v3[v34] & 7) != 0 && v4) {
      return 0;
    }
    uint64_t v14 = 0;
    if (v6 < 9 || v6 - 8 < v35) {
      return v14;
    }
  }
  if (v20 < 0xB)
  {
LABEL_86:
    *((_DWORD *)a2 + 10) = v10;
    return 1;
  }
  uint64_t v36 = v19[5];
  if (!v19[5]) {
    goto LABEL_85;
  }
  uint64_t v14 = 0;
  uint64_t v37 = &v3[v36];
  BOOL v38 = ((unint64_t)&v3[v36] & 3) == 0 || v4 == 0;
  BOOL v39 = v38;
  if (v7 >= (unint64_t)v37 && v39)
  {
    uint64_t v40 = *(unsigned int *)&v37[v2];
    if ((int)v40 < 1 || v6 - 1 < (unint64_t)&v37[v40]) {
      return 0;
    }
    uint64_t v14 = 0;
    unint64_t v41 = (unsigned int *)((char *)a1 + v36 + *(unsigned int *)((char *)a1 + v36));
    int v42 = (char *)v41 - v2;
    BOOL v43 = (v42 & 3) == 0 || v4 == 0;
    BOOL v44 = v43;
    if (v7 >= (unint64_t)v42 && v44)
    {
      uint64_t v45 = *v41;
      if (v45 > 0x7FFFFFFE) {
        return 0;
      }
      uint64_t v14 = 0;
      unint64_t v46 = v45 + 4;
      BOOL v8 = v6 >= v46;
      unint64_t v47 = v6 - v46;
      if (v47 != 0 && v8 && v47 >= (unint64_t)v42)
      {
LABEL_85:
        if (v20 >= 0xD && v19[6] && v6 - 1 < (unint64_t)&v3[v19[6]]) {
          return 0;
        }
        goto LABEL_86;
      }
    }
  }
  return v14;
}

uint64_t sub_2B5DAC(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 40);
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  BOOL v16 = v12 + 1 > v15 || v13 > v14;
  if (v16) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  uint64_t v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
        return 0;
      }
      uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      BOOL v28 = (char *)v27 - v2;
      BOOL v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30) {
        return 0;
      }
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v32 = 4 * v31 + 4;
      BOOL v16 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (!v16 || v33 < (unint64_t)v28) {
        return 0;
      }
      if (v31)
      {
        unint64_t v35 = 0;
        uint64_t v36 = v27 + 1;
        while ((sub_2B5F9C((int *)((char *)v36 + *v36), a2) & 1) != 0)
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            int v12 = *(_DWORD *)(a2 + 40) - 1;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

uint64_t sub_2B5F9C(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  unsigned int v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_70;
  }
  if (!v20[2]) {
    goto LABEL_157;
  }
  unint64_t v22 = (unint64_t)&v3[v20[2]];
  if ((v22 & 7) != 0 && v4) {
    return 0;
  }
  uint64_t result = 0;
  if (v7 >= 9 && v7 - 8 >= v22)
  {
LABEL_157:
    if (v21 < 7) {
      goto LABEL_70;
    }
    if (v20[3])
    {
      unint64_t v23 = (unint64_t)&v3[v20[3]];
      if ((v23 & 3) != 0 && v4) {
        return 0;
      }
      uint64_t result = 0;
      if (v7 < 9 || v7 - 8 < v23) {
        return result;
      }
    }
    if (v21 < 9 || (uint64_t v24 = v20[4]) == 0)
    {
LABEL_70:
      uint64_t result = sub_2A7CE0(a1, a2, 0xCu);
      if (result)
      {
        BOOL v39 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v39 >= 0xDu && (uint64_t v40 = v39[6]) != 0) {
          unint64_t v41 = (unsigned int *)((char *)a1 + v40 + *(unsigned int *)((char *)a1 + v40));
        }
        else {
          unint64_t v41 = 0;
        }
        uint64_t result = sub_2A7D68(a2, v41);
        if (result)
        {
          int v42 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v42 >= 0xDu && (uint64_t v43 = v42[6]) != 0) {
            BOOL v44 = (int *)((char *)a1 + v43 + *(unsigned int *)((char *)a1 + v43));
          }
          else {
            BOOL v44 = 0;
          }
          uint64_t result = sub_2B6694(a2, v44);
          if (result)
          {
            uint64_t result = sub_2A7CE0(a1, a2, 0xEu);
            if (result)
            {
              uint64_t v45 = (unsigned __int16 *)((char *)a1 - *a1);
              if (*v45 >= 0xFu && (uint64_t v46 = v45[7]) != 0) {
                unint64_t v47 = (unsigned int *)((char *)a1 + v46 + *(unsigned int *)((char *)a1 + v46));
              }
              else {
                unint64_t v47 = 0;
              }
              uint64_t result = sub_2AFF48((uint64_t *)a2, v47);
              if (result)
              {
                uint64_t result = sub_2B16B4(a1, a2, 0x10u, 4);
                if (result)
                {
                  uint64_t result = sub_2A7CE0(a1, a2, 0x12u);
                  if (result)
                  {
                    BOOL v48 = (unsigned __int16 *)((char *)a1 - *a1);
                    if (*v48 >= 0x13u && (uint64_t v49 = v48[9]) != 0) {
                      BOOL v50 = (unsigned int *)((char *)a1 + v49 + *(unsigned int *)((char *)a1 + v49));
                    }
                    else {
                      BOOL v50 = 0;
                    }
                    uint64_t result = sub_2A7D68(a2, v50);
                    if (result)
                    {
                      uint64_t v51 = (unsigned __int16 *)((char *)a1 - *a1);
                      if (*v51 >= 0x13u && (uint64_t v52 = v51[9]) != 0) {
                        unint64_t v53 = (int *)((char *)a1 + v52 + *(unsigned int *)((char *)a1 + v52));
                      }
                      else {
                        unint64_t v53 = 0;
                      }
                      uint64_t result = sub_2B6720(a2, v53);
                      if (result)
                      {
                        uint64_t result = sub_2A7CE0(a1, a2, 0x14u);
                        if (result)
                        {
                          uint64_t v54 = (unsigned __int16 *)((char *)a1 - *a1);
                          if (*v54 >= 0x15u && (uint64_t v55 = v54[10]) != 0) {
                            uint64_t v56 = (unsigned int *)((char *)a1 + v55 + *(unsigned int *)((char *)a1 + v55));
                          }
                          else {
                            uint64_t v56 = 0;
                          }
                          uint64_t result = sub_2A7D68(a2, v56);
                          if (result)
                          {
                            uint64_t v57 = (unsigned __int16 *)((char *)a1 - *a1);
                            if (*v57 >= 0x15u && (uint64_t v58 = v57[10]) != 0) {
                              uint64_t v59 = (int *)((char *)a1 + v58 + *(unsigned int *)((char *)a1 + v58));
                            }
                            else {
                              uint64_t v59 = 0;
                            }
                            uint64_t result = sub_2B67AC((uint64_t *)a2, v59);
                            if (result)
                            {
                              uint64_t result = sub_2A7CE0(a1, a2, 0x16u);
                              if (result)
                              {
                                uint64_t v60 = (unsigned __int16 *)((char *)a1 - *a1);
                                if (*v60 >= 0x17u && (uint64_t v61 = v60[11]) != 0) {
                                  uint64_t v62 = (unsigned int *)((char *)a1 + v61 + *(unsigned int *)((char *)a1 + v61));
                                }
                                else {
                                  uint64_t v62 = 0;
                                }
                                uint64_t result = sub_2A7D68(a2, v62);
                                if (result)
                                {
                                  uint64_t v63 = (unsigned __int16 *)((char *)a1 - *a1);
                                  if (*v63 >= 0x17u && (uint64_t v64 = v63[11]) != 0) {
                                    uint64_t v65 = (int *)((char *)a1 + v64 + *(unsigned int *)((char *)a1 + v64));
                                  }
                                  else {
                                    uint64_t v65 = 0;
                                  }
                                  uint64_t result = sub_2B6838((uint64_t *)a2, v65);
                                  if (result)
                                  {
                                    uint64_t result = sub_2A7CE0(a1, a2, 0x18u);
                                    if (result)
                                    {
                                      unint64_t v66 = (unsigned __int16 *)((char *)a1 - *a1);
                                      if (*v66 >= 0x19u && (uint64_t v67 = v66[12]) != 0) {
                                        unsigned int v68 = (unsigned int *)((char *)a1 + v67 + *(unsigned int *)((char *)a1 + v67));
                                      }
                                      else {
                                        unsigned int v68 = 0;
                                      }
                                      uint64_t result = sub_2A7D68(a2, v68);
                                      if (result)
                                      {
                                        unint64_t v69 = (unsigned __int16 *)((char *)a1 - *a1);
                                        if (*v69 >= 0x19u && (uint64_t v70 = v69[12]) != 0) {
                                          unint64_t v71 = (int *)((char *)a1 + v70 + *(unsigned int *)((char *)a1 + v70));
                                        }
                                        else {
                                          unint64_t v71 = 0;
                                        }
                                        uint64_t result = sub_2B6838((uint64_t *)a2, v71);
                                        if (result)
                                        {
                                          char v72 = (unsigned __int16 *)((char *)a1 - *a1);
                                          if (*v72 < 0x1Du
                                            || (uint64_t v73 = v72[14]) == 0
                                            || (uint64_t result = 0, v74 = *(void *)(a2 + 8), v74 >= 2)
                                            && v74 - 1 >= (unint64_t)a1 + v73 - *(void *)a2)
                                          {
                                            uint64_t result = sub_2AFEE4(a1, a2, 0x1Eu, 8);
                                            if (result)
                                            {
                                              uint64_t result = sub_2A7CE0(a1, a2, 0x22u);
                                              if (result)
                                              {
                                                uint64_t v75 = (unsigned __int16 *)((char *)a1 - *a1);
                                                if (*v75 >= 0x23u && (uint64_t v76 = v75[17]) != 0) {
                                                  char v77 = (unsigned int *)((char *)a1
                                                }
                                                                       + v76
                                                                       + *(unsigned int *)((char *)a1 + v76));
                                                else {
                                                  char v77 = 0;
                                                }
                                                uint64_t result = sub_2A7D68(a2, v77);
                                                if (result)
                                                {
                                                  unint64_t v78 = (unsigned __int16 *)((char *)a1 - *a1);
                                                  if (*v78 >= 0x23u && (uint64_t v79 = v78[17]) != 0) {
                                                    uint64_t v80 = (int *)((char *)a1 + v79 + *(unsigned int *)((char *)a1 + v79));
                                                  }
                                                  else {
                                                    uint64_t v80 = 0;
                                                  }
                                                  uint64_t result = sub_2B68C4(a2, v80);
                                                  if (result)
                                                  {
                                                    uint64_t result = sub_2AFEE4(a1, a2, 0x24u, 8);
                                                    if (result)
                                                    {
                                                      uint64_t v81 = (unsigned __int16 *)((char *)a1 - *a1);
                                                      if (*v81 < 0x27u
                                                        || (uint64_t v82 = v81[19]) == 0
                                                        || (uint64_t result = 0, v83 = *(void *)(a2 + 8), v83 >= 2)
                                                        && v83 - 1 >= (unint64_t)a1 + v82 - *(void *)a2)
                                                      {
                                                        uint64_t result = sub_2AF5DC(a1, a2, 0x28u, 2);
                                                        if (result)
                                                        {
                                                          --*(_DWORD *)(a2 + 40);
                                                          return 1;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return result;
    }
    uint64_t result = 0;
    unint64_t v25 = (unint64_t)&v3[v24];
    BOOL v27 = (v25 & 3) == 0 || v4 == 0;
    if (v8 >= v25 && v27)
    {
      uint64_t v28 = *(unsigned int *)(v2 + v25);
      if ((int)v28 < 1 || v7 - 1 < v25 + v28) {
        return 0;
      }
      uint64_t result = 0;
      BOOL v29 = (unsigned int *)((char *)a1 + v24 + *(unsigned int *)((char *)a1 + v24));
      BOOL v30 = (char *)v29 - v2;
      BOOL v31 = (v30 & 3) == 0 || v4 == 0;
      BOOL v32 = v31;
      if (v8 >= (unint64_t)v30 && v32)
      {
        uint64_t v33 = *v29;
        if (v33 > 0x1FFFFFFE) {
          return 0;
        }
        uint64_t result = 0;
        unint64_t v34 = 4 * v33 + 4;
        BOOL v15 = v7 > v34;
        unint64_t v35 = v7 - v34;
        if (v15 && v35 >= (unint64_t)v30)
        {
          if (v33)
          {
            unint64_t v36 = 0;
            uint64_t v37 = v29 + 1;
            while (1)
            {
              BOOL v38 = v37;
              if ((sub_2B6950((int *)((char *)v37 + *v37), a2) & 1) == 0) {
                return 0;
              }
              ++v36;
              uint64_t v37 = v38 + 1;
              if (v36 >= *v29) {
                goto LABEL_70;
              }
            }
          }
          goto LABEL_70;
        }
      }
    }
  }
  return result;
}

BOOL sub_2B6694(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    BOOL result = sub_2B6F3C((int *)((char *)v5 + *v5), a1);
    if (!result) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

BOOL sub_2B6720(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    BOOL result = sub_2B71D0((int *)((char *)v5 + *v5), a1);
    if (!result) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2B67AC(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2B7500((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2B6838(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2B76A4((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

BOOL sub_2B68C4(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    BOOL result = sub_2B7A04((int *)((char *)v5 + *v5), a1);
    if (!result) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2B6950(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  unint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 >= 5u)
  {
    uint64_t v23 = v22[2];
    if (v23)
    {
      uint64_t result = 0;
      unint64_t v24 = (unint64_t)&v3[v23];
      BOOL v26 = (v24 & 3) == 0 || v4 == 0;
      if (v8 < v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
        return 0;
      }
      uint64_t result = sub_2B6C04((int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23)), (uint64_t *)a2);
      if (!result) {
        return result;
      }
      uint64_t v21 = -(uint64_t)*a1;
    }
  }
  if (*(unsigned __int16 *)((char *)a1 + v21) < 7u) {
    goto LABEL_52;
  }
  uint64_t v28 = *(unsigned __int16 *)((char *)a1 + v21 + 6);
  if (!*(_WORD *)((char *)a1 + v21 + 6)) {
    goto LABEL_52;
  }
  unint64_t v29 = (unint64_t)a1 + v28 - *(void *)a2;
  if ((v29 & 3) != 0 && *(unsigned char *)(a2 + 24)) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v30 = *(void *)(a2 + 8);
  if (v30 >= 5 && v30 - 4 >= v29)
  {
    uint64_t v31 = *(unsigned int *)(*(void *)a2 + v29);
    if ((int)v31 < 1 || v30 - 1 < v29 + v31) {
      return 0;
    }
    uint64_t result = sub_2B6DD8((int *)((char *)a1 + v28 + *(unsigned int *)((char *)a1 + v28)), (uint64_t *)a2);
    if (result)
    {
      uint64_t v21 = -(uint64_t)*a1;
LABEL_52:
      BOOL v32 = (_WORD *)((char *)a1 + v21);
      unsigned int v33 = *(unsigned __int16 *)((char *)a1 + v21);
      if (v33 < 9
        || (!v32[4]
         || (result = 0, unint64_t v34 = *(void *)(a2 + 8), v34 >= 2)
         && v34 - 1 >= (unint64_t)a1 + (unsigned __int16)v32[4] - *(void *)a2)
        && (v33 < 0xB
         || (!v32[5]
          || (result = 0, unint64_t v35 = *(void *)(a2 + 8), v35 >= 2)
          && v35 - 1 >= (unint64_t)a1 + (unsigned __int16)v32[5] - *(void *)a2)
         && (v33 < 0xD
          || (uint64_t v36 = (unsigned __int16)v32[6]) == 0
          || (result = 0, unint64_t v37 = *(void *)(a2 + 8), v37 >= 2)
          && v37 - 1 >= (unint64_t)a1 + v36 - *(void *)a2)))
      {
        --*(_DWORD *)(a2 + 40);
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_2B6C04(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  BOOL v12 = (v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5);
  if (v12) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_67;
  }
  uint64_t v21 = v19[2];
  if (!v19[2]) {
    goto LABEL_66;
  }
  unint64_t v22 = (unint64_t)&v3[v21];
  if (((unint64_t)&v3[v21] & 3) != 0 && v4) {
    return 0;
  }
  uint64_t v14 = 0;
  if (v6 >= 9 && v6 - 8 >= v22)
  {
LABEL_66:
    if (v20 < 7) {
      goto LABEL_67;
    }
    uint64_t v23 = v19[3];
    if (!v19[3]
      || ((v14 = 0, v24 = &v3[v23], ((unint64_t)&v3[v23] & 3) != 0) ? (BOOL v25 = v4 == 0) : (BOOL v25 = 1),
          !v25 ? (int v26 = 0) : (int v26 = 1),
          v7 >= (unint64_t)v24 && v26))
    {
      if (v20 < 9) {
        goto LABEL_67;
      }
      uint64_t v27 = v19[4];
      if (!v27) {
        goto LABEL_67;
      }
      uint64_t v14 = 0;
      unint64_t v28 = (unint64_t)&v3[v27];
      BOOL v29 = (v28 & 3) == 0 || v4 == 0;
      BOOL v30 = v29;
      if (v7 >= v28 && v30)
      {
        uint64_t v31 = *(unsigned int *)(v2 + v28);
        if ((int)v31 < 1 || v6 - 1 < v28 + v31) {
          return 0;
        }
        uint64_t v14 = 0;
        BOOL v32 = (unsigned int *)((char *)a1 + v27 + *(unsigned int *)((char *)a1 + v27));
        unsigned int v33 = (char *)v32 - v2;
        BOOL v34 = (v33 & 3) == 0 || v4 == 0;
        BOOL v35 = v34;
        if (v7 >= (unint64_t)v33 && v35)
        {
          uint64_t v36 = *v32;
          if (v36 > 0x7FFFFFFE) {
            return 0;
          }
          uint64_t v14 = 0;
          unint64_t v37 = v36 + 4;
          BOOL v12 = v6 > v37;
          unint64_t v38 = v6 - v37;
          if (v12 && v38 >= (unint64_t)v33)
          {
LABEL_67:
            *((_DWORD *)a2 + 10) = v10;
            return 1;
          }
        }
      }
    }
  }
  return v14;
}

uint64_t sub_2B6DD8(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v10 = *a1;
  int v11 = *((_DWORD *)a2 + 10);
  unsigned int v12 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v11 + 1;
  *((_DWORD *)a2 + 11) = v12;
  if ((v11 + 1) > *((_DWORD *)a2 + 4) || v12 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v15 = (unint64_t)&v3[-v10];
  if (v15)
  {
    uint64_t result = 0;
    if (v4 || v6 - 2 < v15) {
      return result;
    }
  }
  else if (v6 - 2 < v15)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v16;
  unint64_t v17 = v6 - v16;
  if (v17 == 0 || !v8 || v17 < v15) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_55;
  }
  uint64_t v21 = v19[2];
  if (!v19[2]
    || ((result = 0, v22 = &v3[v21], ((unint64_t)&v3[v21] & 3) != 0) ? (BOOL v23 = v4 == 0) : (BOOL v23 = 1),
        !v23 ? (int v24 = 0) : (int v24 = 1),
        v7 >= (unint64_t)v22 && v24))
  {
    if (v20 < 7) {
      goto LABEL_55;
    }
    if (!v19[3]) {
      goto LABEL_54;
    }
    unint64_t v25 = (unint64_t)&v3[v19[3]];
    if ((v25 & 3) != 0 && v4) {
      return 0;
    }
    uint64_t result = 0;
    if (v6 >= 9 && v6 - 8 >= v25)
    {
LABEL_54:
      if (v20 < 9
        || (uint64_t v26 = v19[4]) == 0
        || ((result = 0, unint64_t v27 = (unint64_t)&v3[v26], (v27 & 3) != 0) ? (v28 = v4 == 0) : (v28 = 1),
            !v28 ? (int v29 = 0) : (int v29 = 1),
            v7 >= v27 && v29))
      {
LABEL_55:
        *((_DWORD *)a2 + 10) = v11;
        return 1;
      }
    }
  }
  return result;
}

BOOL sub_2B6F3C(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  unsigned int v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_55;
  }
  if (v20[2] && v7 - 1 < (unint64_t)&v3[v20[2]]) {
    return 0;
  }
  if (v21 < 7) {
    goto LABEL_55;
  }
  if (v20[3] && v7 - 1 < (unint64_t)&v3[v20[3]]) {
    return 0;
  }
  if (v21 < 9) {
    goto LABEL_55;
  }
  uint64_t v22 = v20[4];
  if (v20[4])
  {
    BOOL result = 0;
    BOOL v23 = &v3[v22];
    BOOL v24 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    BOOL v25 = v24;
    if (v8 < (unint64_t)v23 || !v25) {
      return result;
    }
  }
  if (v21 < 0xB) {
    goto LABEL_55;
  }
  if (!v20[5]) {
    goto LABEL_54;
  }
  unint64_t v26 = (unint64_t)&v3[v20[5]];
  if ((v26 & 7) != 0 && v4) {
    return 0;
  }
  BOOL result = 0;
  if (v7 >= 9 && v7 - 8 >= v26)
  {
LABEL_54:
    if (v21 >= 0xD && v20[6] && v7 - 1 < (unint64_t)&v3[v20[6]]) {
      return 0;
    }
LABEL_55:
    BOOL result = sub_2B16B4(a1, a2, 0xEu, 4);
    if (result)
    {
      BOOL result = sub_2B16B4(a1, a2, 0x10u, 4);
      if (result)
      {
        unint64_t v27 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v27 < 0x13u
          || (uint64_t v28 = v27[9]) == 0
          || (result = 0, unint64_t v29 = *(void *)(a2 + 8), v29 >= 2)
          && v29 - 1 >= (unint64_t)a1 + v28 - *(void *)a2)
        {
          BOOL result = sub_2A7CE0(a1, a2, 0x14u);
          if (result)
          {
            BOOL v30 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v30 >= 0x15u && (uint64_t v31 = v30[10]) != 0) {
              BOOL v32 = (unsigned int *)((char *)a1 + v31 + *(unsigned int *)((char *)a1 + v31));
            }
            else {
              BOOL v32 = 0;
            }
            BOOL result = sub_2AFF48((uint64_t *)a2, v32);
            if (result)
            {
              --*(_DWORD *)(a2 + 40);
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_2B71D0(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  unsigned int v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_93;
  }
  uint64_t v22 = v20[2];
  if (v20[2])
  {
    BOOL result = 0;
    BOOL v23 = &v3[v22];
    BOOL v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v23 || !v25) {
      return result;
    }
    uint64_t v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26]) {
      return 0;
    }
    BOOL result = 0;
    unint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    uint64_t v28 = (char *)v27 - v2;
    BOOL v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    BOOL v30 = v29;
    if (v8 < (unint64_t)v28 || !v30) {
      return result;
    }
    uint64_t v31 = *v27;
    if (v31 > 0x7FFFFFFE) {
      return 0;
    }
    unint64_t v32 = v31 + 4;
    unint64_t v33 = (unint64_t)&v28[v31 + 4];
    BOOL v34 = v7 - 1 >= v33 && v7 > v32;
    BOOL v35 = v34 && v7 - v32 >= (unint64_t)v28;
    if (!v35 || *(unsigned char *)(v2 + v33)) {
      return 0;
    }
  }
  if (v21 < 7)
  {
LABEL_93:
    BOOL result = sub_2A7CE0(a1, a2, 0xAu);
    if (result)
    {
      uint64_t v51 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v51 >= 0xBu && (uint64_t v52 = v51[5]) != 0) {
        unint64_t v53 = (unsigned int *)((char *)a1 + v52 + *(unsigned int *)((char *)a1 + v52));
      }
      else {
        unint64_t v53 = 0;
      }
      BOOL result = sub_2AFF48((uint64_t *)a2, v53);
      if (result)
      {
        uint64_t v54 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v54 < 0xDu
          || (uint64_t v55 = v54[6]) == 0
          || (BOOL result = 0, v56 = *(void *)(a2 + 8), v56 >= 2)
          && v56 - 1 >= (unint64_t)a1 + v55 - *(void *)a2)
        {
          --*(_DWORD *)(a2 + 40);
          return 1;
        }
      }
    }
    return result;
  }
  uint64_t v36 = v20[3];
  if (!v20[3]) {
    goto LABEL_83;
  }
  BOOL result = 0;
  unint64_t v37 = &v3[v36];
  BOOL v39 = ((unint64_t)&v3[v36] & 3) == 0 || v4 == 0;
  if (v8 >= (unint64_t)v37 && v39)
  {
    uint64_t v40 = *(unsigned int *)&v37[v2];
    if ((int)v40 < 1 || v7 - 1 < (unint64_t)&v37[v40]) {
      return 0;
    }
    BOOL result = 0;
    unint64_t v41 = (unsigned int *)((char *)a1 + v36 + *(unsigned int *)((char *)a1 + v36));
    int v42 = (char *)v41 - v2;
    BOOL v43 = (((unint64_t)v41 - v2) & 3) == 0 || v4 == 0;
    BOOL v44 = v43;
    if (v8 >= (unint64_t)v42 && v44)
    {
      uint64_t v45 = *v41;
      if (v45 > 0x7FFFFFFE) {
        return 0;
      }
      BOOL result = 0;
      unint64_t v46 = v45 + 4;
      unint64_t v47 = (unint64_t)&v42[v45 + 4];
      if (v7 - 1 < v47 || v7 <= v46 || v7 - v46 < (unint64_t)v42) {
        return result;
      }
      if (*(unsigned char *)(v2 + v47)) {
        return 0;
      }
LABEL_83:
      if (v21 >= 9 && v20[4])
      {
        BOOL result = 0;
        unint64_t v48 = (unint64_t)&v3[v20[4]];
        BOOL v49 = (v48 & 3) == 0 || v4 == 0;
        BOOL v50 = v49;
        if (v8 < v48 || !v50) {
          return result;
        }
      }
      goto LABEL_93;
    }
  }
  return result;
}

uint64_t sub_2B7500(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v15 = 0;
    if (v4 || v6 - 2 < v14) {
      return v15;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v14);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v16;
  unint64_t v17 = v6 - v16;
  if (v17 == 0 || !v8 || v17 < v14) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_57;
  }
  if (v19[2] && v6 - 1 < (unint64_t)&v3[v19[2]]) {
    return 0;
  }
  if (v20 < 7 || (uint64_t v21 = v19[3]) == 0)
  {
LABEL_57:
    *((_DWORD *)a2 + 10) = v10;
    return 1;
  }
  uint64_t v15 = 0;
  unint64_t v22 = (unint64_t)&v3[v21];
  BOOL v24 = (v22 & 3) == 0 || v4 == 0;
  if (v7 >= v22 && v24)
  {
    uint64_t v25 = *(unsigned int *)(v2 + v22);
    if ((int)v25 < 1 || v6 - 1 < v22 + v25) {
      return 0;
    }
    uint64_t v15 = 0;
    uint64_t v26 = (unsigned int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21));
    unint64_t v27 = (char *)v26 - v2;
    BOOL v28 = (((unint64_t)v26 - v2) & 3) == 0 || v4 == 0;
    BOOL v29 = v28;
    if (v7 >= (unint64_t)v27 && v29)
    {
      uint64_t v30 = *v26;
      if (v30 > 0x7FFFFFFE) {
        return 0;
      }
      uint64_t v15 = 0;
      unint64_t v31 = v30 + 4;
      unint64_t v32 = (unint64_t)&v27[v30 + 4];
      if (v6 - 1 < v32 || v6 <= v31 || v6 - v31 < (unint64_t)v27) {
        return v15;
      }
      if (*(unsigned char *)(v2 + v32)) {
        return 0;
      }
      goto LABEL_57;
    }
  }
  return v15;
}

uint64_t sub_2B76A4(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  char v4 = *((unsigned char *)a2 + 24);
  if ((v3 & 3) != 0 && *((unsigned char *)a2 + 24) != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v15 = 0;
    if (v4 || v6 - 2 < v14) {
      return v15;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v14);
  if ((v16 & 1) == 0 || (uint64_t v15 = 0, !v4) && (v16 & 1) == 0)
  {
    if (v6 <= v16 || v6 - v16 < v14) {
      return 0;
    }
    unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
    unsigned int v19 = *v18;
    if (v19 < 5) {
      goto LABEL_101;
    }
    uint64_t v20 = v18[2];
    if (v18[2])
    {
      uint64_t v15 = 0;
      uint64_t v21 = &v3[v20];
      BOOL v22 = ((unint64_t)&v3[v20] & 3) == 0;
      if (!v4) {
        BOOL v22 = 1;
      }
      if (v7 < (unint64_t)v21 || !v22) {
        return v15;
      }
      uint64_t v23 = *(unsigned int *)&v21[v2];
      if ((int)v23 < 1 || v6 - 1 < (unint64_t)&v21[v23]) {
        return 0;
      }
      uint64_t v15 = 0;
      BOOL v24 = (unsigned int *)((char *)a1 + v20 + *(unsigned int *)((char *)a1 + v20));
      uint64_t v25 = (char *)v24 - v2;
      BOOL v26 = (((unint64_t)v24 - v2) & 3) == 0;
      if (!v4) {
        BOOL v26 = 1;
      }
      if (v7 < (unint64_t)v25 || !v26) {
        return v15;
      }
      uint64_t v27 = *v24;
      if (v27 > 0x7FFFFFFE) {
        return 0;
      }
      unint64_t v28 = v27 + 4;
      unint64_t v29 = (unint64_t)&v25[v27 + 4];
      BOOL v30 = v6 - 1 >= v29 && v6 > v28;
      BOOL v31 = v30 && v6 - v28 >= (unint64_t)v25;
      if (!v31 || *(unsigned char *)(v2 + v29)) {
        return 0;
      }
    }
    if (v19 < 7 || (uint64_t v32 = v18[3]) == 0)
    {
LABEL_101:
      *((_DWORD *)a2 + 10) = v10;
      return 1;
    }
    uint64_t v15 = 0;
    unint64_t v33 = (unint64_t)&v3[v32];
    BOOL v34 = (v33 & 3) == 0;
    if (!v4) {
      BOOL v34 = 1;
    }
    if (v7 >= v33 && v34)
    {
      uint64_t v35 = *(unsigned int *)(v2 + v33);
      if ((int)v35 < 1) {
        return 0;
      }
      unint64_t v36 = v33 + v35;
      unint64_t v37 = v6 - 1;
      if (v6 - 1 < v36) {
        return 0;
      }
      uint64_t v15 = 0;
      uint64_t v38 = *(unsigned int *)((char *)a1 + v32);
      BOOL v39 = (unsigned int *)((char *)a1 + v32 + v38);
      uint64_t v40 = (char *)v39 - v2;
      BOOL v41 = (v40 & 3) == 0;
      if (!v4) {
        BOOL v41 = 1;
      }
      if (v7 >= (unint64_t)v40 && v41)
      {
        uint64_t v42 = *v39;
        if (v42 > 0x1FFFFFFE) {
          return 0;
        }
        uint64_t v15 = 0;
        uint64_t v43 = 4 * v42;
        unint64_t v44 = 4 * v42 + 4;
        BOOL v8 = v6 >= v44;
        unint64_t v45 = v6 - v44;
        if (v45 != 0 && v8 && v45 >= (unint64_t)v40)
        {
          if (v42)
          {
            if (v4)
            {
              uint64_t v46 = 0;
              uint64_t v47 = (uint64_t)a1 + v32 + v38 + 4;
              uint64_t v48 = (uint64_t)a1 + v38 + v32 + 8;
              while (1)
              {
                uint64_t v49 = *(unsigned int *)(v47 + v46);
                unint64_t v50 = (unint64_t)&v40[v46 + 4 + v49];
                if ((v50 & 3) != 0 || v7 < v50) {
                  break;
                }
                uint64_t v52 = *(unsigned int *)(v47 + v49 + v46);
                if (v52 > 0x7FFFFFFE) {
                  break;
                }
                uint64_t v53 = v49 + v52;
                BOOL v54 = v37 >= (unint64_t)&v40[v46 + 8 + v53] && v6 > v52 + 4;
                BOOL v55 = v54 && v6 - (v52 + 4) >= v50;
                if (!v55 || *(unsigned char *)(v48 + v53 + v46)) {
                  break;
                }
                v46 += 4;
                if (v43 == v46) {
                  goto LABEL_101;
                }
              }
            }
            else
            {
              uint64_t v56 = 0;
              uint64_t v57 = (uint64_t)a1 + v32 + v38 + 4;
              uint64_t v58 = (uint64_t)a1 + v38 + v32 + 8;
              while (1)
              {
                uint64_t v59 = *(unsigned int *)(v57 + v56);
                unint64_t v60 = (unint64_t)&v40[v56 + 4 + v59];
                if (v7 < v60) {
                  break;
                }
                uint64_t v61 = *(unsigned int *)(v57 + v59 + v56);
                if (v61 > 0x7FFFFFFE) {
                  break;
                }
                uint64_t v62 = v59 + v61;
                BOOL v63 = v37 >= (unint64_t)&v40[v56 + 8 + v62] && v6 > v61 + 4;
                BOOL v64 = v63 && v6 - (v61 + 4) >= v60;
                if (!v64 || *(unsigned char *)(v58 + v62 + v56)) {
                  break;
                }
                v56 += 4;
                if (v43 == v56) {
                  goto LABEL_101;
                }
              }
            }
            return 0;
          }
          goto LABEL_101;
        }
      }
    }
  }
  return v15;
}

BOOL sub_2B7A04(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  BOOL v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 >= 5u)
  {
    uint64_t v23 = v22[2];
    if (v23)
    {
      BOOL result = 0;
      unint64_t v24 = (unint64_t)&v3[v23];
      BOOL v26 = (v24 & 3) == 0 || v4 == 0;
      if (v8 < v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
        return 0;
      }
      BOOL result = sub_2B7C7C((int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23)), a2);
      if (!result) {
        return result;
      }
      uint64_t v21 = -(uint64_t)*a1;
    }
  }
  unint64_t v28 = (char *)a1 + v21;
  if (*(unsigned __int16 *)((char *)a1 + v21) < 7u || (uint64_t v29 = *((unsigned __int16 *)v28 + 3), !*((_WORD *)v28 + 3)))
  {
LABEL_68:
    --*(_DWORD *)(a2 + 40);
    return 1;
  }
  uint64_t v30 = *(void *)a2;
  unint64_t v31 = (unint64_t)a1 + v29 - *(void *)a2;
  if ((v31 & 3) != 0 && *(unsigned char *)(a2 + 24)) {
    return 0;
  }
  BOOL result = 0;
  unint64_t v32 = *(void *)(a2 + 8);
  if (v32 >= 5 && v32 - 4 >= v31)
  {
    uint64_t v33 = *(unsigned int *)(v30 + v31);
    if ((int)v33 < 1 || v32 - 1 < v31 + v33) {
      return 0;
    }
    BOOL result = 0;
    BOOL v34 = (unsigned int *)((char *)a1 + v29 + *(unsigned int *)((char *)a1 + v29));
    unint64_t v35 = (unint64_t)v34 - v30;
    BOOL v36 = (((unint64_t)v34 - v30) & 3) == 0 || *(unsigned char *)(a2 + 24) == 0;
    BOOL v37 = v36;
    if (v32 - 4 >= v35 && v37)
    {
      uint64_t v38 = *v34;
      if (v38 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v39 = 4 * v38 + 4;
      BOOL v15 = v32 > v39;
      unint64_t v40 = v32 - v39;
      if (!v15 || v40 < v35) {
        return 0;
      }
      if (v38)
      {
        unint64_t v42 = 0;
        uint64_t v43 = v34 + 1;
        while ((sub_2B8528((int *)((char *)v43 + *v43), (uint64_t *)a2) & 1) != 0)
        {
          ++v42;
          ++v43;
          if (v42 >= *v34) {
            goto LABEL_68;
          }
        }
        return 0;
      }
      goto LABEL_68;
    }
  }
  return result;
}

BOOL sub_2B7C7C(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 24);
  if ((v3 & 3) != 0 && *(unsigned char *)(a2 + 24) != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if (v17)
  {
    BOOL result = 0;
    if (v4 || (v17 & 1) != 0) {
      return result;
    }
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  BOOL v22 = (unsigned __int16 *)((char *)a1 - v20);
  unsigned int v23 = *v22;
  if (v23 < 5) {
    goto LABEL_93;
  }
  uint64_t v24 = v22[2];
  if (v22[2])
  {
    BOOL result = 0;
    uint64_t v25 = &v3[v24];
    BOOL v26 = ((unint64_t)&v3[v24] & 3) == 0;
    if (!v4) {
      BOOL v26 = 1;
    }
    if (v8 < (unint64_t)v25 || !v26) {
      return result;
    }
    uint64_t v27 = *(unsigned int *)&v25[v2];
    if ((int)v27 < 1) {
      return 0;
    }
    unint64_t v28 = (unint64_t)&v25[v27];
    unint64_t v29 = v7 - 1;
    if (v7 - 1 < v28) {
      return 0;
    }
    BOOL result = 0;
    uint64_t v30 = *(unsigned int *)((char *)a1 + v24);
    unint64_t v31 = (unsigned int *)((char *)a1 + v24 + v30);
    unint64_t v32 = (char *)v31 - v2;
    BOOL v33 = (((unint64_t)v31 - v2) & 3) == 0;
    if (!v4) {
      BOOL v33 = 1;
    }
    if (v8 < (unint64_t)v32 || !v33) {
      return result;
    }
    uint64_t v34 = *v31;
    if (v34 > 0x1FFFFFFE) {
      return 0;
    }
    uint64_t v35 = 4 * v34;
    unint64_t v36 = 4 * v34 + 4;
    BOOL v9 = v7 >= v36;
    unint64_t v37 = v7 - v36;
    if (v37 == 0 || !v9 || v37 < (unint64_t)v32) {
      return 0;
    }
    if (v34)
    {
      if (v4)
      {
        uint64_t v39 = 0;
        uint64_t v40 = (uint64_t)a1 + v24 + v30 + 4;
        uint64_t v41 = (uint64_t)a1 + v30 + v24 + 8;
        while (1)
        {
          uint64_t v42 = *(unsigned int *)(v40 + v39);
          unint64_t v43 = (unint64_t)&v32[v39 + 4 + v42];
          if ((v43 & 3) != 0 || v8 < v43) {
            break;
          }
          uint64_t v45 = *(unsigned int *)(v40 + v42 + v39);
          if (v45 > 0x7FFFFFFE) {
            break;
          }
          uint64_t v46 = v42 + v45;
          BOOL v47 = v29 >= (unint64_t)&v32[v39 + 8 + v46] && v7 > v45 + 4;
          BOOL v48 = v47 && v7 - (v45 + 4) >= v43;
          if (!v48 || *(unsigned char *)(v41 + v46 + v39)) {
            break;
          }
          v39 += 4;
          if (v35 == v39) {
            goto LABEL_82;
          }
        }
      }
      else
      {
        uint64_t v49 = 0;
        uint64_t v50 = (uint64_t)a1 + v24 + v30 + 4;
        uint64_t v51 = (uint64_t)a1 + v30 + v24 + 8;
        while (1)
        {
          uint64_t v52 = *(unsigned int *)(v50 + v49);
          unint64_t v53 = (unint64_t)&v32[v49 + 4 + v52];
          if (v8 < v53) {
            break;
          }
          uint64_t v54 = *(unsigned int *)(v50 + v52 + v49);
          if (v54 > 0x7FFFFFFE) {
            break;
          }
          uint64_t v55 = v52 + v54;
          BOOL v56 = v29 >= (unint64_t)&v32[v49 + 8 + v55] && v7 > v54 + 4;
          BOOL v57 = v56 && v7 - (v54 + 4) >= v53;
          if (!v57 || *(unsigned char *)(v51 + v55 + v49)) {
            break;
          }
          v49 += 4;
          if (v35 == v49) {
            goto LABEL_82;
          }
        }
      }
      return 0;
    }
  }
LABEL_82:
  if (v23 < 7 || (uint64_t v58 = v22[3]) == 0)
  {
LABEL_93:
    if (*(unsigned __int16 *)((char *)a1 + v21) < 9u
      || !*(_WORD *)((char *)a1 + v21 + 8)
      || (BOOL result = 0, v62 = *(void *)(a2 + 8), v62 >= 2)
      && v62 - 1 >= (unint64_t)a1 + *(unsigned __int16 *)((char *)a1 + v21 + 8) - *(void *)a2)
    {
      --*(_DWORD *)(a2 + 40);
      return 1;
    }
    return result;
  }
  BOOL result = 0;
  unint64_t v59 = (unint64_t)&v3[v58];
  if (v4) {
    BOOL v60 = (v59 & 3) == 0;
  }
  else {
    BOOL v60 = 1;
  }
  if (v8 >= v59 && v60)
  {
    uint64_t v61 = *(unsigned int *)(v2 + v59);
    if ((int)v61 < 1 || v7 - 1 < v59 + v61) {
      return 0;
    }
    BOOL result = sub_2B8020((int *)((char *)a1 + v58 + *(unsigned int *)((char *)a1 + v58)), a2);
    if (result)
    {
      uint64_t v21 = -(uint64_t)*a1;
      goto LABEL_93;
    }
  }
  return result;
}

BOOL sub_2B8020(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_98;
  }
  uint64_t v22 = v20[2];
  if (v20[2])
  {
    BOOL result = 0;
    unsigned int v23 = &v3[v22];
    BOOL v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v23 || !v25) {
      return result;
    }
    uint64_t v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26]) {
      return 0;
    }
    BOOL result = 0;
    uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    unint64_t v28 = (char *)v27 - v2;
    BOOL v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    BOOL v30 = v29;
    if (v8 < (unint64_t)v28 || !v30) {
      return result;
    }
    uint64_t v31 = *v27;
    if (v31 > 0x7FFFFFFE) {
      return 0;
    }
    unint64_t v32 = v31 + 4;
    unint64_t v33 = (unint64_t)&v28[v31 + 4];
    BOOL v34 = v7 - 1 >= v33 && v7 > v32;
    BOOL v35 = v34 && v7 - v32 >= (unint64_t)v28;
    if (!v35 || *(unsigned char *)(v2 + v33)) {
      return 0;
    }
  }
  if (v21 < 7) {
    goto LABEL_98;
  }
  uint64_t v36 = v20[3];
  if (!v20[3])
  {
LABEL_85:
    if (v21 >= 9)
    {
      uint64_t v48 = v20[4];
      if (v48)
      {
        BOOL result = 0;
        unint64_t v49 = (unint64_t)&v3[v48];
        BOOL v51 = (v49 & 3) == 0 || v4 == 0;
        if (v8 < v49 || !v51) {
          return result;
        }
        uint64_t v52 = *(unsigned int *)(v2 + v49);
        if ((int)v52 < 1 || v7 - 1 < v49 + v52) {
          return 0;
        }
        unint64_t v53 = (unsigned int *)((char *)a1 + v48 + *(unsigned int *)((char *)a1 + v48));
        goto LABEL_99;
      }
    }
LABEL_98:
    unint64_t v53 = 0;
LABEL_99:
    BOOL result = sub_2AFF48((uint64_t *)a2, v53);
    if (result)
    {
      BOOL result = sub_2A7CE0(a1, a2, 0xAu);
      if (result)
      {
        uint64_t v54 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v54 >= 0xBu && (uint64_t v55 = v54[5]) != 0) {
          BOOL v56 = (unsigned int *)((char *)a1 + v55 + *(unsigned int *)((char *)a1 + v55));
        }
        else {
          BOOL v56 = 0;
        }
        BOOL result = sub_2AFF48((uint64_t *)a2, v56);
        if (result)
        {
          BOOL result = sub_2A7CE0(a1, a2, 0xCu);
          if (result)
          {
            BOOL v57 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v57 >= 0xDu && (uint64_t v58 = v57[6]) != 0) {
              unint64_t v59 = (unsigned int *)((char *)a1 + v58 + *(unsigned int *)((char *)a1 + v58));
            }
            else {
              unint64_t v59 = 0;
            }
            BOOL result = sub_2AFF48((uint64_t *)a2, v59);
            if (result)
            {
              BOOL result = sub_2A7CE0(a1, a2, 0xEu);
              if (result)
              {
                BOOL v60 = (unsigned __int16 *)((char *)a1 - *a1);
                if (*v60 >= 0xFu && (uint64_t v61 = v60[7]) != 0) {
                  unint64_t v62 = (unsigned int *)((char *)a1 + v61 + *(unsigned int *)((char *)a1 + v61));
                }
                else {
                  unint64_t v62 = 0;
                }
                BOOL result = sub_2AFF48((uint64_t *)a2, v62);
                if (result)
                {
                  BOOL result = sub_2A7CE0(a1, a2, 0x10u);
                  if (result)
                  {
                    BOOL v63 = (unsigned __int16 *)((char *)a1 - *a1);
                    if (*v63 >= 0x11u && (uint64_t v64 = v63[8]) != 0) {
                      uint64_t v65 = (unsigned int *)((char *)a1 + v64 + *(unsigned int *)((char *)a1 + v64));
                    }
                    else {
                      uint64_t v65 = 0;
                    }
                    BOOL result = sub_2AFF48((uint64_t *)a2, v65);
                    if (result)
                    {
                      BOOL result = sub_2A7CE0(a1, a2, 0x12u);
                      if (result)
                      {
                        unint64_t v66 = (unsigned __int16 *)((char *)a1 - *a1);
                        if (*v66 >= 0x13u && (uint64_t v67 = v66[9]) != 0) {
                          unsigned int v68 = (unsigned int *)((char *)a1 + v67 + *(unsigned int *)((char *)a1 + v67));
                        }
                        else {
                          unsigned int v68 = 0;
                        }
                        BOOL result = sub_2AFF48((uint64_t *)a2, v68);
                        if (result)
                        {
                          BOOL result = sub_2A7CE0(a1, a2, 0x14u);
                          if (result)
                          {
                            unint64_t v69 = (unsigned __int16 *)((char *)a1 - *a1);
                            if (*v69 >= 0x15u && (uint64_t v70 = v69[10]) != 0) {
                              unint64_t v71 = (unsigned int *)((char *)a1 + v70 + *(unsigned int *)((char *)a1 + v70));
                            }
                            else {
                              unint64_t v71 = 0;
                            }
                            BOOL result = sub_2AFF48((uint64_t *)a2, v71);
                            if (result)
                            {
                              BOOL result = sub_2A7CE0(a1, a2, 0x16u);
                              if (result)
                              {
                                char v72 = (unsigned __int16 *)((char *)a1 - *a1);
                                if (*v72 >= 0x17u && (uint64_t v73 = v72[11]) != 0) {
                                  unint64_t v74 = (unsigned int *)((char *)a1 + v73 + *(unsigned int *)((char *)a1 + v73));
                                }
                                else {
                                  unint64_t v74 = 0;
                                }
                                BOOL result = sub_2AFF48((uint64_t *)a2, v74);
                                if (result)
                                {
                                  --*(_DWORD *)(a2 + 40);
                                  return 1;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return result;
  }
  BOOL result = 0;
  unint64_t v37 = &v3[v36];
  BOOL v39 = ((unint64_t)&v3[v36] & 3) == 0 || v4 == 0;
  if (v8 >= (unint64_t)v37 && v39)
  {
    uint64_t v40 = *(unsigned int *)&v37[v2];
    if ((int)v40 < 1 || v7 - 1 < (unint64_t)&v37[v40]) {
      return 0;
    }
    BOOL result = 0;
    uint64_t v41 = (unsigned int *)((char *)a1 + v36 + *(unsigned int *)((char *)a1 + v36));
    uint64_t v42 = (char *)v41 - v2;
    BOOL v43 = (((unint64_t)v41 - v2) & 3) == 0 || v4 == 0;
    BOOL v44 = v43;
    if (v8 >= (unint64_t)v42 && v44)
    {
      uint64_t v45 = *v41;
      if (v45 > 0x7FFFFFFE) {
        return 0;
      }
      BOOL result = 0;
      unint64_t v46 = v45 + 4;
      unint64_t v47 = (unint64_t)&v42[v45 + 4];
      if (v7 - 1 < v47 || v7 <= v46 || v7 - v46 < (unint64_t)v42) {
        return result;
      }
      if (*(unsigned char *)(v2 + v47)) {
        return 0;
      }
      goto LABEL_85;
    }
  }
  return result;
}

uint64_t sub_2B8528(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  unsigned int v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 < 5u) {
    goto LABEL_57;
  }
  uint64_t v20 = v19[2];
  if (!v19[2]) {
    goto LABEL_57;
  }
  uint64_t v14 = 0;
  unint64_t v21 = (unint64_t)&v3[v20];
  BOOL v23 = (v21 & 3) == 0 || v4 == 0;
  if (v7 >= v21 && v23)
  {
    uint64_t v24 = *(unsigned int *)(v2 + v21);
    if ((int)v24 < 1 || v6 - 1 < v21 + v24) {
      return 0;
    }
    uint64_t v14 = 0;
    BOOL v25 = (unsigned int *)((char *)a1 + v20 + *(unsigned int *)((char *)a1 + v20));
    uint64_t v26 = (char *)v25 - v2;
    BOOL v27 = (((unint64_t)v25 - v2) & 3) == 0 || v4 == 0;
    BOOL v28 = v27;
    if (v7 >= (unint64_t)v26 && v28)
    {
      uint64_t v29 = *v25;
      if (v29 > 0x7FFFFFFE) {
        return 0;
      }
      unint64_t v30 = v29 + 4;
      unint64_t v31 = (unint64_t)&v26[v29 + 4];
      BOOL v32 = v6 - 1 >= v31 && v6 > v30;
      BOOL v33 = v32 && v6 - v30 >= (unint64_t)v26;
      if (!v33 || *(unsigned char *)(v2 + v31)) {
        return 0;
      }
LABEL_57:
      *((_DWORD *)a2 + 10) = v10;
      return 1;
    }
  }
  return v14;
}

uint64_t sub_2B86A0(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  unsigned int v12 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  BOOL v14 = v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20);
  if (v14) {
    return 0;
  }
  unint64_t v15 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v15) {
      return 0;
    }
  }
  else if (v7 - 2 < v15)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v16;
  unint64_t v17 = v7 - v16;
  if (v17 == 0 || !v9 || v17 < v15) {
    return 0;
  }
  uint64_t v19 = *a1;
  uint64_t v20 = -v19;
  unint64_t v21 = (unsigned __int16 *)((char *)a1 - v19);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
        return 0;
      }
      BOOL v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      BOOL v28 = (char *)v27 - v2;
      BOOL v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30) {
        return 0;
      }
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v32 = 4 * v31 + 4;
      BOOL v14 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (!v14 || v33 < (unint64_t)v28) {
        return 0;
      }
      if (v31)
      {
        BOOL v43 = a1;
        unint64_t v35 = 0;
        uint64_t v36 = v27 + 1;
        while ((sub_2B893C((int *)((char *)v36 + *v36), a2) & 1) != 0)
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            a1 = v43;
            uint64_t v20 = -(uint64_t)*v43;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  unint64_t v37 = (char *)a1 + v20;
  if (*(unsigned __int16 *)((char *)a1 + v20) >= 7u)
  {
    uint64_t v38 = *((unsigned __int16 *)v37 + 3);
    if (*((_WORD *)v37 + 3))
    {
      unint64_t v39 = (unint64_t)a1 + v38 - *(void *)a2;
      if ((v39 & 3) != 0 && *(unsigned char *)(a2 + 24) != 0) {
        return 0;
      }
      unint64_t v41 = *(void *)(a2 + 8);
      if (v41 < 5 || v41 - 4 < v39) {
        return 0;
      }
      uint64_t v42 = *(unsigned int *)(*(void *)a2 + v39);
      if ((int)v42 < 1
        || v41 - 1 < v39 + v42
        || !sub_2B9460((int *)((char *)a1 + v38 + *(unsigned int *)((char *)a1 + v38)), (uint64_t *)a2))
      {
        return 0;
      }
    }
  }
  --*(_DWORD *)(a2 + 40);
  return 1;
}

uint64_t sub_2B893C(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_81;
  }
  uint64_t v22 = v20[2];
  if (v20[2])
  {
    uint64_t result = 0;
    unint64_t v23 = (unint64_t)&v3[v22];
    BOOL v24 = ((unint64_t)&v3[v22] & 1) == 0 || v4 == 0;
    BOOL v25 = v24;
    if (v7 - 2 < v23 || !v25) {
      return result;
    }
  }
  if (v21 < 9) {
    goto LABEL_81;
  }
  uint64_t v26 = v20[4];
  if (v20[4])
  {
    uint64_t result = 0;
    unint64_t v27 = (unint64_t)&v3[v26];
    BOOL v28 = ((unint64_t)&v3[v26] & 1) == 0 || v4 == 0;
    BOOL v29 = v28;
    if (v7 - 2 < v27 || !v29) {
      return result;
    }
  }
  if (v21 < 0x11) {
    goto LABEL_81;
  }
  uint64_t v30 = v20[8];
  if (v20[8])
  {
    uint64_t result = 0;
    unint64_t v31 = (unint64_t)&v3[v30];
    BOOL v32 = ((unint64_t)&v3[v30] & 1) == 0 || v4 == 0;
    BOOL v33 = v32;
    if (v7 - 2 < v31 || !v33) {
      return result;
    }
  }
  if (v21 < 0x13) {
    goto LABEL_81;
  }
  uint64_t v34 = v20[9];
  if (v20[9])
  {
    uint64_t result = 0;
    unint64_t v35 = (unint64_t)&v3[v34];
    BOOL v36 = ((unint64_t)&v3[v34] & 1) == 0 || v4 == 0;
    BOOL v37 = v36;
    if (v7 - 2 < v35 || !v37) {
      return result;
    }
  }
  if (v21 >= 0x17 && (uint64_t v38 = v20[11]) != 0)
  {
    uint64_t result = 0;
    unint64_t v39 = (unint64_t)&v3[v38];
    BOOL v41 = (v39 & 3) == 0 || v4 == 0;
    if (v8 < v39 || !v41) {
      return result;
    }
    uint64_t v42 = *(unsigned int *)(v2 + v39);
    if ((int)v42 < 1 || v7 - 1 < v39 + v42) {
      return 0;
    }
    BOOL v43 = (unsigned int *)((char *)a1 + v38 + *(unsigned int *)((char *)a1 + v38));
  }
  else
  {
LABEL_81:
    BOOL v43 = 0;
  }
  uint64_t result = sub_2B0C38(a2, v43);
  if (result)
  {
    uint64_t result = sub_2A7CE0(a1, a2, 0x18u);
    if (result)
    {
      BOOL v44 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v44 >= 0x19u && (uint64_t v45 = v44[12]) != 0) {
        unint64_t v46 = (unsigned int *)((char *)a1 + v45 + *(unsigned int *)((char *)a1 + v45));
      }
      else {
        unint64_t v46 = 0;
      }
      uint64_t result = sub_2B0C38(a2, v46);
      if (result)
      {
        uint64_t result = sub_2A7CE0(a1, a2, 0x1Au);
        if (result)
        {
          unint64_t v47 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v47 >= 0x1Bu && (uint64_t v48 = v47[13]) != 0) {
            unint64_t v49 = (unsigned int *)((char *)a1 + v48 + *(unsigned int *)((char *)a1 + v48));
          }
          else {
            unint64_t v49 = 0;
          }
          uint64_t result = sub_2A7D68(a2, v49);
          if (result)
          {
            uint64_t v50 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v50 >= 0x1Bu && (uint64_t v51 = v50[13]) != 0) {
              uint64_t v52 = (int *)((char *)a1 + v51 + *(unsigned int *)((char *)a1 + v51));
            }
            else {
              uint64_t v52 = 0;
            }
            uint64_t result = sub_2B8D3C((uint64_t *)a2, v52);
            if (result)
            {
              uint64_t result = sub_2A7CE0(a1, a2, 0x1Cu);
              if (result)
              {
                unint64_t v53 = (unsigned __int16 *)((char *)a1 - *a1);
                if (*v53 >= 0x1Du && (uint64_t v54 = v53[14]) != 0) {
                  uint64_t v55 = (unsigned int *)((char *)a1 + v54 + *(unsigned int *)((char *)a1 + v54));
                }
                else {
                  uint64_t v55 = 0;
                }
                uint64_t result = sub_2B0C38(a2, v55);
                if (result)
                {
                  uint64_t result = sub_2A7CE0(a1, a2, 0x22u);
                  if (result)
                  {
                    BOOL v56 = (unsigned __int16 *)((char *)a1 - *a1);
                    if (*v56 < 0x23u
                      || (uint64_t v57 = v56[17]) == 0
                      || (uint64_t result = sub_2B8F60((int *)((char *)a1 + v57 + *(unsigned int *)((char *)a1 + v57)), a2),
                          result))
                    {
                      uint64_t result = sub_2A7CE0(a1, a2, 0x24u);
                      if (result)
                      {
                        uint64_t v58 = (unsigned __int16 *)((char *)a1 - *a1);
                        if (*v58 < 0x25u
                          || (uint64_t v59 = v58[18]) == 0
                          || (uint64_t result = sub_2B8F60((int *)((char *)a1 + v59 + *(unsigned int *)((char *)a1 + v59)), a2),
                              result))
                        {
                          --*(_DWORD *)(a2 + 40);
                          return 1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2B8D3C(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2B8DC8((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2B8DC8(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v15 = 0;
    if (v4 || v6 - 2 < v14) {
      return v15;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v14);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v16;
  unint64_t v17 = v6 - v16;
  if (v17 == 0 || !v8 || v17 < v14) {
    return 0;
  }
  uint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_65;
  }
  uint64_t v21 = v19[2];
  if (!v19[2])
  {
LABEL_55:
    if (v20 >= 7 && v19[3])
    {
      uint64_t v15 = 0;
      unint64_t v34 = (unint64_t)&v3[v19[3]];
      BOOL v35 = (v34 & 3) == 0 || v4 == 0;
      BOOL v36 = v35;
      if (v7 < v34 || !v36) {
        return v15;
      }
    }
LABEL_65:
    *((_DWORD *)a2 + 10) = v10;
    return 1;
  }
  uint64_t v15 = 0;
  uint64_t v22 = &v3[v21];
  BOOL v24 = ((unint64_t)&v3[v21] & 3) == 0 || v4 == 0;
  if (v7 >= (unint64_t)v22 && v24)
  {
    uint64_t v25 = *(unsigned int *)&v22[v2];
    if ((int)v25 < 1 || v6 - 1 < (unint64_t)&v22[v25]) {
      return 0;
    }
    uint64_t v15 = 0;
    uint64_t v26 = (unsigned int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21));
    unint64_t v27 = (char *)v26 - v2;
    BOOL v28 = (v27 & 3) == 0 || v4 == 0;
    BOOL v29 = v28;
    if (v7 >= (unint64_t)v27 && v29)
    {
      uint64_t v30 = *v26;
      if (v30 > 0xFFFFFFE) {
        return 0;
      }
      unint64_t v31 = (8 * v30) | 4;
      BOOL v8 = v6 >= v31;
      unint64_t v32 = v6 - v31;
      if (v32 == 0 || !v8 || v32 < (unint64_t)v27) {
        return 0;
      }
      goto LABEL_55;
    }
  }
  return v15;
}

BOOL sub_2B8F60(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  uint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 >= 5u)
  {
    uint64_t v23 = v22[2];
    if (v23)
    {
      BOOL result = 0;
      unint64_t v24 = (unint64_t)&v3[v23];
      BOOL v26 = (v24 & 3) == 0 || v4 == 0;
      if (v8 < v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
        return 0;
      }
      BOOL result = sub_2B915C((int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23)), a2);
      if (!result) {
        return result;
      }
      uint64_t v21 = -(uint64_t)*a1;
    }
  }
  if (*(unsigned __int16 *)((char *)a1 + v21) < 7u) {
    goto LABEL_53;
  }
  uint64_t v28 = *(unsigned __int16 *)((char *)a1 + v21 + 6);
  if (!*(_WORD *)((char *)a1 + v21 + 6)) {
    goto LABEL_53;
  }
  unint64_t v29 = (unint64_t)a1 + v28 - *(void *)a2;
  if ((v29 & 3) != 0 && *(unsigned char *)(a2 + 24)) {
    return 0;
  }
  BOOL result = 0;
  unint64_t v30 = *(void *)(a2 + 8);
  if (v30 >= 5 && v30 - 4 >= v29)
  {
    uint64_t v31 = *(unsigned int *)(*(void *)a2 + v29);
    if ((int)v31 < 1 || v30 - 1 < v29 + v31) {
      return 0;
    }
    BOOL result = sub_2B915C((int *)((char *)a1 + v28 + *(unsigned int *)((char *)a1 + v28)), a2);
    if (result)
    {
LABEL_53:
      --*(_DWORD *)(a2 + 40);
      return 1;
    }
  }
  return result;
}

BOOL sub_2B915C(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_93;
  }
  uint64_t v22 = v20[2];
  if (v20[2])
  {
    BOOL result = 0;
    uint64_t v23 = &v3[v22];
    BOOL v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v23 || !v25) {
      return result;
    }
    uint64_t v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26]) {
      return 0;
    }
    BOOL result = 0;
    uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    uint64_t v28 = (char *)v27 - v2;
    BOOL v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    BOOL v30 = v29;
    if (v8 < (unint64_t)v28 || !v30) {
      return result;
    }
    uint64_t v31 = *v27;
    if (v31 > 0x1FFFFFFE) {
      return 0;
    }
    unint64_t v32 = 4 * v31 + 4;
    BOOL v9 = v7 >= v32;
    unint64_t v33 = v7 - v32;
    if (v33 == 0 || !v9 || v33 < (unint64_t)v28) {
      return 0;
    }
  }
  if (v21 < 7) {
    goto LABEL_93;
  }
  uint64_t v35 = v20[3];
  if (!v20[3]) {
    goto LABEL_104;
  }
  BOOL result = 0;
  BOOL v36 = &v3[v35];
  BOOL v37 = ((unint64_t)&v3[v35] & 3) == 0 || v4 == 0;
  BOOL v38 = v37;
  if (v8 >= (unint64_t)v36 && v38)
  {
    uint64_t v39 = *(unsigned int *)&v36[v2];
    if ((int)v39 < 1 || v7 - 1 < (unint64_t)&v36[v39]) {
      return 0;
    }
    BOOL result = 0;
    uint64_t v40 = (unsigned int *)((char *)a1 + v35 + *(unsigned int *)((char *)a1 + v35));
    BOOL v41 = (char *)v40 - v2;
    BOOL v42 = (((unint64_t)v40 - v2) & 3) == 0 || v4 == 0;
    BOOL v43 = v42;
    if (v8 >= (unint64_t)v41 && v43)
    {
      uint64_t v44 = *v40;
      if (v44 > 0x1FFFFFFE) {
        return 0;
      }
      BOOL result = 0;
      unint64_t v45 = 4 * v44 + 4;
      BOOL v9 = v7 >= v45;
      unint64_t v46 = v7 - v45;
      if (v46 != 0 && v9 && v46 >= (unint64_t)v41)
      {
LABEL_104:
        if (v21 >= 9)
        {
          uint64_t v47 = v20[4];
          if (v47)
          {
            BOOL result = 0;
            unint64_t v48 = (unint64_t)&v3[v47];
            BOOL v50 = (v48 & 3) == 0 || v4 == 0;
            if (v8 < v48 || !v50) {
              return result;
            }
            uint64_t v51 = *(unsigned int *)(v2 + v48);
            if ((int)v51 < 1 || v7 - 1 < v48 + v51) {
              return 0;
            }
            uint64_t v52 = (unsigned int *)((char *)a1 + v47 + *(unsigned int *)((char *)a1 + v47));
            goto LABEL_94;
          }
        }
LABEL_93:
        uint64_t v52 = 0;
LABEL_94:
        BOOL result = sub_2A7D68(a2, v52);
        if (result)
        {
          BOOL result = sub_2A7CE0(a1, a2, 0xAu);
          if (result)
          {
            unint64_t v53 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v53 >= 0xBu && (uint64_t v54 = v53[5]) != 0) {
              uint64_t v55 = (unsigned int *)((char *)a1 + v54 + *(unsigned int *)((char *)a1 + v54));
            }
            else {
              uint64_t v55 = 0;
            }
            BOOL result = sub_2A7D68(a2, v55);
            if (result)
            {
              --*(_DWORD *)(a2 + 40);
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2B9460(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (unint64_t)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  BOOL v7 = v6 >= 5 && v6 - 4 >= v3;
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a2 + 10);
  unsigned int v10 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v9 + 1;
  *((_DWORD *)a2 + 11) = v10;
  if ((v9 + 1) > *((_DWORD *)a2 + 4) || v10 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v13 = v3 - v8;
  if ((v3 - v8))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v7 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v7 || v16 < v13) {
    return 0;
  }
  unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v19 = *v18;
  if (v19 >= 5)
  {
    if (v18[2] && v6 - 1 < v3 + v18[2]) {
      return 0;
    }
    if (v19 >= 7)
    {
      uint64_t v20 = v18[3];
      if (v20)
      {
        if (v6 - 1 < v3 + v20) {
          return 0;
        }
      }
    }
  }
  *((_DWORD *)a2 + 10) = v9;
  return 1;
}

uint64_t sub_2B956C(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  unsigned int v12 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  BOOL v14 = v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20);
  if (v14) {
    return 0;
  }
  unint64_t v15 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v15) {
      return 0;
    }
  }
  else if (v7 - 2 < v15)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v16;
  unint64_t v17 = v7 - v16;
  if (v17 == 0 || !v9 || v17 < v15) {
    return 0;
  }
  uint64_t v19 = *a1;
  uint64_t v20 = -v19;
  unsigned int v21 = (unsigned __int16 *)((char *)a1 - v19);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
        return 0;
      }
      uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      uint64_t v28 = (char *)v27 - v2;
      BOOL v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30) {
        return 0;
      }
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v32 = 4 * v31 + 4;
      BOOL v14 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (!v14 || v33 < (unint64_t)v28) {
        return 0;
      }
      if (v31)
      {
        uint64_t v40 = a1;
        unint64_t v35 = 0;
        BOOL v36 = v27 + 1;
        while (sub_2B97D4((int *)((char *)v36 + *v36), a2))
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            a1 = v40;
            uint64_t v20 = -(uint64_t)*v40;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  if (*(unsigned __int16 *)((char *)a1 + v20) >= 7u && *(_WORD *)((char *)a1 + v20 + 6))
  {
    unint64_t v37 = (unint64_t)a1 + *(unsigned __int16 *)((char *)a1 + v20 + 6) - *(void *)a2;
    if ((v37 & 3) != 0 && *(unsigned char *)(a2 + 24) != 0) {
      return 0;
    }
    unint64_t v39 = *(void *)(a2 + 8);
    if (v39 < 5 || v39 - 4 < v37) {
      return 0;
    }
  }
  --*(_DWORD *)(a2 + 40);
  return 1;
}

BOOL sub_2B97D4(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_83;
  }
  if (!v20[2]) {
    goto LABEL_36;
  }
  unint64_t v22 = (unint64_t)&v3[v20[2]];
  if ((v22 & 3) != 0 && v4) {
    return 0;
  }
  BOOL result = 0;
  if (v7 >= 9 && v7 - 8 >= v22)
  {
LABEL_36:
    if (v21 < 7) {
      goto LABEL_83;
    }
    uint64_t v23 = v20[3];
    if (!v20[3]) {
      goto LABEL_94;
    }
    BOOL result = 0;
    unint64_t v24 = &v3[v23];
    BOOL v25 = ((unint64_t)&v3[v23] & 3) == 0 || v4 == 0;
    BOOL v26 = v25;
    if (v8 >= (unint64_t)v24 && v26)
    {
      uint64_t v27 = *(unsigned int *)&v24[v2];
      if ((int)v27 < 1 || v7 - 1 < (unint64_t)&v24[v27]) {
        return 0;
      }
      BOOL result = 0;
      uint64_t v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
      BOOL v29 = (char *)v28 - v2;
      BOOL v30 = (((unint64_t)v28 - v2) & 3) == 0 || v4 == 0;
      BOOL v31 = v30;
      if (v8 >= (unint64_t)v29 && v31)
      {
        uint64_t v32 = *v28;
        if (v32 > 0x1FFFFFFE) {
          return 0;
        }
        BOOL result = 0;
        unint64_t v33 = 4 * v32 + 4;
        BOOL v9 = v7 >= v33;
        unint64_t v34 = v7 - v33;
        if (v34 != 0 && v9 && v34 >= (unint64_t)v29)
        {
LABEL_94:
          if (v21 >= 9)
          {
            uint64_t v35 = v20[4];
            if (v20[4])
            {
              BOOL result = 0;
              BOOL v36 = &v3[v35];
              BOOL v37 = ((unint64_t)&v3[v35] & 3) == 0 || v4 == 0;
              BOOL v38 = v37;
              if (v8 < (unint64_t)v36 || !v38) {
                return result;
              }
            }
            if (v21 >= 0xB)
            {
              uint64_t v39 = v20[5];
              if (v39)
              {
                BOOL result = 0;
                unint64_t v40 = (unint64_t)&v3[v39];
                BOOL v42 = (v40 & 3) == 0 || v4 == 0;
                if (v8 < v40 || !v42) {
                  return result;
                }
                uint64_t v43 = *(unsigned int *)(v2 + v40);
                if ((int)v43 < 1 || v7 - 1 < v40 + v43) {
                  return 0;
                }
                uint64_t v44 = (unsigned int *)((char *)a1 + v39 + *(unsigned int *)((char *)a1 + v39));
                goto LABEL_84;
              }
            }
          }
LABEL_83:
          uint64_t v44 = 0;
LABEL_84:
          BOOL result = sub_2B37B8(a2, v44);
          if (result)
          {
            BOOL result = sub_2A7CE0(a1, a2, 0xCu);
            if (result)
            {
              unint64_t v45 = (unsigned __int16 *)((char *)a1 - *a1);
              if (*v45 >= 0xDu && (uint64_t v46 = v45[6]) != 0) {
                uint64_t v47 = (unsigned int *)((char *)a1 + v46 + *(unsigned int *)((char *)a1 + v46));
              }
              else {
                uint64_t v47 = 0;
              }
              BOOL result = sub_2A7D68(a2, v47);
              if (result)
              {
                --*(_DWORD *)(a2 + 40);
                return 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2B9AA4(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 40);
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  BOOL v16 = v12 + 1 > v15 || v13 > v14;
  if (v16) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  unsigned int v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
        return 0;
      }
      uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      uint64_t v28 = (char *)v27 - v2;
      BOOL v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30) {
        return 0;
      }
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v32 = 4 * v31 + 4;
      BOOL v16 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (!v16 || v33 < (unint64_t)v28) {
        return 0;
      }
      if (v31)
      {
        unint64_t v35 = 0;
        BOOL v36 = v27 + 1;
        while ((sub_2B9C94((int *)((char *)v36 + *v36), a2) & 1) != 0)
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            int v12 = *(_DWORD *)(a2 + 40) - 1;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

uint64_t sub_2B9C94(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 40);
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  BOOL v16 = v12 + 1 > v15 || v13 > v14;
  if (v16) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  unsigned int v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
        return 0;
      }
      uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      uint64_t v28 = (char *)v27 - v2;
      BOOL v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30) {
        return 0;
      }
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v32 = 4 * v31 + 4;
      BOOL v16 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (!v16 || v33 < (unint64_t)v28) {
        return 0;
      }
      if (v31)
      {
        unint64_t v35 = 0;
        BOOL v36 = v27 + 1;
        while ((sub_2B017C((int *)((char *)v36 + *v36), a2) & 1) != 0)
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            int v12 = *(_DWORD *)(a2 + 40) - 1;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

uint64_t sub_2B9E84(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  uint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 >= 5u)
  {
    uint64_t v23 = v22[2];
    if (v23)
    {
      uint64_t result = 0;
      unint64_t v24 = (unint64_t)&v3[v23];
      BOOL v26 = (v24 & 3) == 0 || v4 == 0;
      if (v8 < v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
        return 0;
      }
      uint64_t result = 0;
      uint64_t v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
      BOOL v29 = (char *)v28 - v2;
      BOOL v30 = (v29 & 3) == 0 || v4 == 0;
      BOOL v31 = v30;
      if (v8 < (unint64_t)v29 || !v31) {
        return result;
      }
      uint64_t v32 = *v28;
      if (v32 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v33 = 4 * v32 + 4;
      BOOL v15 = v7 > v33;
      unint64_t v34 = v7 - v33;
      if (!v15 || v34 < (unint64_t)v29) {
        return 0;
      }
      if (v32)
      {
        unint64_t v36 = 0;
        BOOL v37 = v28 + 1;
        while ((sub_2BA540((int *)((char *)v37 + *v37), a2) & 1) != 0)
        {
          ++v36;
          ++v37;
          if (v36 >= *v28)
          {
            uint64_t v21 = -(uint64_t)*a1;
            goto LABEL_59;
          }
        }
        return 0;
      }
    }
  }
LABEL_59:
  BOOL v38 = (char *)a1 + v21;
  if (*(unsigned __int16 *)((char *)a1 + v21) >= 7u && (uint64_t v39 = *((unsigned __int16 *)v38 + 3), *((_WORD *)v38 + 3)))
  {
    uint64_t v40 = *(void *)a2;
    unint64_t v41 = (unint64_t)a1 + v39 - *(void *)a2;
    int v42 = *(unsigned __int8 *)(a2 + 24);
    uint64_t result = 0;
    if ((v41 & 3) != 0 && v42 != 0) {
      return result;
    }
    unint64_t v44 = *(void *)(a2 + 8);
    if (v44 < 5 || v44 - 4 < v41) {
      return result;
    }
    uint64_t v45 = *(unsigned int *)(v40 + v41);
    if ((int)v45 < 1 || v44 - 1 < v41 + v45) {
      return 0;
    }
    uint64_t v46 = (int *)((char *)a1 + v39 + *(unsigned int *)((char *)a1 + v39));
    unint64_t v47 = (unint64_t)v46 - v40;
    BOOL v48 = (((unint64_t)v46 - v40) & 3) == 0 || v42 == 0;
    BOOL v49 = v48;
    if (v44 - 4 < v47 || !v49) {
      return 0;
    }
    uint64_t v51 = *v46;
    if (v51 > 0x1FFFFFFE) {
      return 0;
    }
    unint64_t v52 = 4 * v51 + 4;
    BOOL v15 = v44 > v52;
    unint64_t v53 = v44 - v52;
    if (!v15 || v53 < v47) {
      return 0;
    }
  }
  else
  {
    uint64_t v46 = 0;
  }
  uint64_t result = sub_2BA2D8(a2, v46);
  if (result)
  {
    uint64_t result = sub_2A7CE0(a1, a2, 8u);
    if (result)
    {
      uint64_t v55 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v55 >= 9u && (uint64_t v56 = v55[4]) != 0) {
        uint64_t v57 = (unsigned int *)((char *)a1 + v56 + *(unsigned int *)((char *)a1 + v56));
      }
      else {
        uint64_t v57 = 0;
      }
      uint64_t result = sub_2A7D68(a2, v57);
      if (result)
      {
        uint64_t v58 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v58 >= 9u && (uint64_t v59 = v58[4]) != 0) {
          BOOL v60 = (int *)((char *)a1 + v59 + *(unsigned int *)((char *)a1 + v59));
        }
        else {
          BOOL v60 = 0;
        }
        uint64_t result = sub_2BA364(a2, v60);
        if (result)
        {
          uint64_t result = sub_2A7CE0(a1, a2, 0xAu);
          if (result)
          {
            uint64_t v61 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v61 >= 0xBu && (uint64_t v62 = v61[5]) != 0) {
              BOOL v63 = (unsigned int *)((char *)a1 + v62 + *(unsigned int *)((char *)a1 + v62));
            }
            else {
              BOOL v63 = 0;
            }
            uint64_t result = sub_2A7D68(a2, v63);
            if (result)
            {
              uint64_t v64 = (unsigned __int16 *)((char *)a1 - *a1);
              if (*v64 >= 0xBu && (uint64_t v65 = v64[5]) != 0) {
                unint64_t v66 = (int *)((char *)a1 + v65 + *(unsigned int *)((char *)a1 + v65));
              }
              else {
                unint64_t v66 = 0;
              }
              uint64_t result = sub_2BA3F0((uint64_t *)a2, v66);
              if (result)
              {
                uint64_t result = sub_2B16B4(a1, a2, 0xCu, 4);
                if (result)
                {
                  uint64_t result = sub_2A7CE0(a1, a2, 0xEu);
                  if (result)
                  {
                    uint64_t v67 = (unsigned __int16 *)((char *)a1 - *a1);
                    if (*v67 >= 0xFu && (uint64_t v68 = v67[7]) != 0) {
                      unint64_t v69 = (int *)((char *)a1 + v68 + *(unsigned int *)((char *)a1 + v68));
                    }
                    else {
                      unint64_t v69 = 0;
                    }
                    uint64_t result = sub_2BA47C((uint64_t *)a2, v69);
                    if (result)
                    {
                      --*(_DWORD *)(a2 + 40);
                      return 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_2BA2D8(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    BOOL result = sub_2BC46C((int *)((char *)v5 + *v5), a1);
    if (!result) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2BA364(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2BC6FC((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2BA3F0(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2BD5F8((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2BA47C(uint64_t *a1, int *a2)
{
  if (a2)
  {
    uint64_t v2 = *a1;
    unint64_t v3 = (unint64_t)a2 - *a1;
    int v4 = *((unsigned __int8 *)a1 + 24);
    if ((v3 & 3) != 0 && v4 != 0) {
      return 0;
    }
    unint64_t v6 = a1[1];
    BOOL v7 = v6 >= 5 && v6 - 4 >= v3;
    if (!v7) {
      return 0;
    }
    uint64_t v8 = *a2;
    int v9 = *((_DWORD *)a1 + 10);
    unsigned int v10 = *((_DWORD *)a1 + 11) + 1;
    *((_DWORD *)a1 + 10) = v9 + 1;
    *((_DWORD *)a1 + 11) = v10;
    if ((v9 + 1) > *((_DWORD *)a1 + 4) || v10 > *((_DWORD *)a1 + 5)) {
      return 0;
    }
    unint64_t v12 = v3 - v8;
    if (v12)
    {
      uint64_t v13 = 0;
      if (v4 || v6 - 2 < v12) {
        return v13;
      }
    }
    else if (v6 - 2 < v12)
    {
      return 0;
    }
    unint64_t v14 = *(unsigned __int16 *)(v2 + v12);
    if ((v14 & 1) != 0 && v4 | v14 & 1) {
      return 0;
    }
    BOOL v7 = v6 >= v14;
    unint64_t v15 = v6 - v14;
    if (v15 == 0 || !v7 || v15 < v12) {
      return 0;
    }
    *((_DWORD *)a1 + 10) = v9;
  }
  return 1;
}

uint64_t sub_2BA540(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_93;
  }
  if (v20[2])
  {
    unint64_t v22 = (unint64_t)&v3[v20[2]];
    if ((v22 & 3) != 0 && v4) {
      return 0;
    }
    uint64_t result = 0;
    if (v7 < 9 || v7 - 8 < v22) {
      return result;
    }
  }
  if (v21 < 7)
  {
LABEL_93:
    uint64_t result = sub_2AFEE4(a1, a2, 0x1Cu, 8);
    if (result)
    {
      uint64_t result = sub_2B16B4(a1, a2, 0x1Eu, 4);
      if (result)
      {
        uint64_t result = sub_2A7CE0(a1, a2, 0x20u);
        if (result)
        {
          unint64_t v36 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v36 >= 0x21u && (uint64_t v37 = v36[16]) != 0) {
            BOOL v38 = (unsigned int *)((char *)a1 + v37 + *(unsigned int *)((char *)a1 + v37));
          }
          else {
            BOOL v38 = 0;
          }
          uint64_t result = sub_2B0C38(a2, v38);
          if (result)
          {
            uint64_t result = sub_2A7CE0(a1, a2, 0x22u);
            if (result)
            {
              uint64_t v39 = (unsigned __int16 *)((char *)a1 - *a1);
              if (*v39 >= 0x23u && (uint64_t v40 = v39[17]) != 0) {
                unint64_t v41 = (unsigned int *)((char *)a1 + v40 + *(unsigned int *)((char *)a1 + v40));
              }
              else {
                unint64_t v41 = 0;
              }
              uint64_t result = sub_2B0C38(a2, v41);
              if (result)
              {
                uint64_t result = sub_2A7CE0(a1, a2, 0x24u);
                if (result)
                {
                  int v42 = (unsigned __int16 *)((char *)a1 - *a1);
                  if (*v42 >= 0x25u && (uint64_t v43 = v42[18]) != 0) {
                    unint64_t v44 = (unsigned int *)((char *)a1 + v43 + *(unsigned int *)((char *)a1 + v43));
                  }
                  else {
                    unint64_t v44 = 0;
                  }
                  uint64_t result = sub_2A7D68(a2, v44);
                  if (result)
                  {
                    uint64_t v45 = (unsigned __int16 *)((char *)a1 - *a1);
                    if (*v45 >= 0x25u && (uint64_t v46 = v45[18]) != 0) {
                      unint64_t v47 = (int *)((char *)a1 + v46 + *(unsigned int *)((char *)a1 + v46));
                    }
                    else {
                      unint64_t v47 = 0;
                    }
                    uint64_t result = sub_2BB328((uint64_t *)a2, v47);
                    if (result)
                    {
                      uint64_t result = sub_2A7CE0(a1, a2, 0x26u);
                      if (result)
                      {
                        BOOL v48 = (unsigned __int16 *)((char *)a1 - *a1);
                        if (*v48 >= 0x27u && (uint64_t v49 = v48[19]) != 0) {
                          BOOL v50 = (unsigned int *)((char *)a1 + v49 + *(unsigned int *)((char *)a1 + v49));
                        }
                        else {
                          BOOL v50 = 0;
                        }
                        uint64_t result = sub_2A7D68(a2, v50);
                        if (result)
                        {
                          uint64_t v51 = (unsigned __int16 *)((char *)a1 - *a1);
                          if (*v51 >= 0x27u && (uint64_t v52 = v51[19]) != 0) {
                            unint64_t v53 = (int *)((char *)a1 + v52 + *(unsigned int *)((char *)a1 + v52));
                          }
                          else {
                            unint64_t v53 = 0;
                          }
                          uint64_t result = sub_2BB3B4(a2, v53);
                          if (result)
                          {
                            uint64_t result = sub_2A7CE0(a1, a2, 0x28u);
                            if (result)
                            {
                              uint64_t v54 = (unsigned __int16 *)((char *)a1 - *a1);
                              if (*v54 >= 0x29u && (uint64_t v55 = v54[20]) != 0) {
                                uint64_t v56 = (unsigned int *)((char *)a1 + v55 + *(unsigned int *)((char *)a1 + v55));
                              }
                              else {
                                uint64_t v56 = 0;
                              }
                              uint64_t result = sub_2A7D68(a2, v56);
                              if (result)
                              {
                                uint64_t v57 = (unsigned __int16 *)((char *)a1 - *a1);
                                if (*v57 >= 0x29u && (uint64_t v58 = v57[20]) != 0) {
                                  uint64_t v59 = (int *)((char *)a1 + v58 + *(unsigned int *)((char *)a1 + v58));
                                }
                                else {
                                  uint64_t v59 = 0;
                                }
                                uint64_t result = sub_2BB3B4(a2, v59);
                                if (result)
                                {
                                  BOOL v60 = (unsigned __int16 *)((char *)a1 - *a1);
                                  if (*v60 < 0x2Fu
                                    || (uint64_t v61 = v60[23]) == 0
                                    || (uint64_t result = 0, v62 = *(void *)(a2 + 8), v62 >= 2)
                                    && v62 - 1 >= (unint64_t)a1 + v61 - *(void *)a2)
                                  {
                                    uint64_t result = sub_2B16B4(a1, a2, 0x38u, 4);
                                    if (result)
                                    {
                                      uint64_t result = sub_2A7CE0(a1, a2, 0x40u);
                                      if (result)
                                      {
                                        BOOL v63 = (unsigned __int16 *)((char *)a1 - *a1);
                                        if (*v63 >= 0x41u && (uint64_t v64 = v63[32]) != 0) {
                                          uint64_t v65 = (unsigned int *)((char *)a1 + v64 + *(unsigned int *)((char *)a1 + v64));
                                        }
                                        else {
                                          uint64_t v65 = 0;
                                        }
                                        uint64_t result = sub_2A7D68(a2, v65);
                                        if (result)
                                        {
                                          unint64_t v66 = (unsigned __int16 *)((char *)a1 - *a1);
                                          if (*v66 >= 0x41u && (uint64_t v67 = v66[32]) != 0) {
                                            uint64_t v68 = (int *)((char *)a1 + v67 + *(unsigned int *)((char *)a1 + v67));
                                          }
                                          else {
                                            uint64_t v68 = 0;
                                          }
                                          uint64_t result = sub_2BB440((uint64_t *)a2, v68);
                                          if (result)
                                          {
                                            unint64_t v69 = (unsigned __int16 *)((char *)a1 - *a1);
                                            unsigned int v70 = *v69;
                                            if (v70 < 0x43
                                              || (!v69[33]
                                               || (uint64_t result = 0, v71 = *(void *)(a2 + 8), v71 >= 2)
                                               && v71 - 1 >= (unint64_t)a1 + v69[33] - *(void *)a2)
                                              && (v70 < 0x45
                                               || (uint64_t v72 = v69[34]) == 0
                                               || (uint64_t result = 0, v73 = *(void *)(a2 + 8), v73 >= 2)
                                               && v73 - 1 >= (unint64_t)a1 + v72 - *(void *)a2))
                                            {
                                              uint64_t result = sub_2B16B4(a1, a2, 0x46u, 4);
                                              if (result)
                                              {
                                                uint64_t result = sub_2AF5DC(a1, a2, 0x48u, 2);
                                                if (result)
                                                {
                                                  uint64_t result = sub_2AF5DC(a1, a2, 0x4Au, 2);
                                                  if (result)
                                                  {
                                                    uint64_t result = sub_2B16B4(a1, a2, 0x4Cu, 4);
                                                    if (result)
                                                    {
                                                      uint64_t result = sub_2AF5DC(a1, a2, 0x4Eu, 2);
                                                      if (result)
                                                      {
                                                        uint64_t result = sub_2AF5DC(a1, a2, 0x50u, 2);
                                                        if (result)
                                                        {
                                                          uint64_t result = sub_2A7CE0(a1, a2, 0x56u);
                                                          if (result)
                                                          {
                                                            unint64_t v74 = (unsigned __int16 *)((char *)a1 - *a1);
                                                            if (*v74 < 0x57u
                                                              || (uint64_t v75 = v74[43]) == 0
                                                              || (uint64_t result = sub_2BBF64((int *)((char *)a1+ v75+ *(unsigned int *)((char *)a1 + v75)), (uint64_t *)a2), result))
                                                            {
                                                              uint64_t result = sub_2AF5DC(a1, a2, 0x58u, 2);
                                                              if (result)
                                                              {
                                                                uint64_t result = sub_2A7CE0(a1, a2, 0x5Au);
                                                                if (result)
                                                                {
                                                                  uint64_t v76 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                  if (*v76 >= 0x5Bu && (uint64_t v77 = v76[45]) != 0) {
                                                                    unint64_t v78 = (unsigned int *)((char *)a1
                                                                  }
                                                                                         + v77
                                                                                         + *(unsigned int *)((char *)a1 + v77));
                                                                  else {
                                                                    unint64_t v78 = 0;
                                                                  }
                                                                  uint64_t result = sub_2B0C38(a2, v78);
                                                                  if (result)
                                                                  {
                                                                    uint64_t result = sub_2A7CE0(a1, a2, 0x5Cu);
                                                                    if (result)
                                                                    {
                                                                      uint64_t v79 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                      if (*v79 >= 0x5Du && (uint64_t v80 = v79[46]) != 0) {
                                                                        uint64_t v81 = (unsigned int *)((char *)a1
                                                                      }
                                                                                             + v80
                                                                                             + *(unsigned int *)((char *)a1 + v80));
                                                                      else {
                                                                        uint64_t v81 = 0;
                                                                      }
                                                                      uint64_t result = sub_2B0C38(a2, v81);
                                                                      if (result)
                                                                      {
                                                                        uint64_t result = sub_2A7CE0(a1, a2, 0x5Eu);
                                                                        if (result)
                                                                        {
                                                                          uint64_t v82 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                          if (*v82 >= 0x5Fu && (uint64_t v83 = v82[47]) != 0) {
                                                                            uint64_t v84 = (unsigned int *)((char *)a1
                                                                          }
                                                                                                 + v83
                                                                                                 + *(unsigned int *)((char *)a1 + v83));
                                                                          else {
                                                                            uint64_t v84 = 0;
                                                                          }
                                                                          uint64_t result = sub_2A7D68(a2, v84);
                                                                          if (result)
                                                                          {
                                                                            uint64_t v85 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                            if (*v85 >= 0x5Fu && (uint64_t v86 = v85[47]) != 0) {
                                                                              unint64_t v87 = (int *)((char *)a1
                                                                            }
                                                                                          + v86
                                                                                          + *(unsigned int *)((char *)a1 + v86));
                                                                            else {
                                                                              unint64_t v87 = 0;
                                                                            }
                                                                            uint64_t result = sub_2BB4CC((uint64_t *)a2, v87);
                                                                            if (result)
                                                                            {
                                                                              uint64_t result = sub_2A7CE0(a1, a2, 0x60u);
                                                                              if (result)
                                                                              {
                                                                                unint64_t v88 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                if (*v88 >= 0x61u
                                                                                  && (uint64_t v89 = v88[48]) != 0)
                                                                                {
                                                                                  int64_t v90 = (unsigned int *)((char *)a1 + v89 + *(unsigned int *)((char *)a1 + v89));
                                                                                }
                                                                                else
                                                                                {
                                                                                  int64_t v90 = 0;
                                                                                }
                                                                                uint64_t result = sub_2A7D68(a2, v90);
                                                                                if (result)
                                                                                {
                                                                                  long long v91 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                  if (*v91 >= 0x61u
                                                                                    && (uint64_t v92 = v91[48]) != 0)
                                                                                  {
                                                                                    uint64_t v93 = (int *)((char *)a1
                                                                                                + v92
                                                                                                + *(unsigned int *)((char *)a1 + v92));
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    uint64_t v93 = 0;
                                                                                  }
                                                                                  uint64_t result = sub_2BB4CC((uint64_t *)a2, v93);
                                                                                  if (result)
                                                                                  {
                                                                                    uint64_t v94 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                    unsigned int v95 = *v94;
                                                                                    if (v95 < 0x63
                                                                                      || (!v94[49]
                                                                                       || (uint64_t result = 0,
                                                                                           unint64_t v96 = *(void *)(a2 + 8),
                                                                                           v96 >= 2)
                                                                                       && v96 - 1 >= (unint64_t)a1 + v94[49] - *(void *)a2)
                                                                                      && (v95 < 0x69
                                                                                       || (!v94[52]
                                                                                        || (uint64_t result = 0,
                                                                                            unint64_t v97 = *(void *)(a2 + 8),
                                                                                            v97 >= 2)
                                                                                        && v97 - 1 >= (unint64_t)a1 + v94[52] - *(void *)a2)
                                                                                       && (v95 < 0x6B
                                                                                        || (uint64_t v98 = v94[53]) == 0
                                                                                        || (uint64_t result = 0,
                                                                                            unint64_t v99 = *(void *)(a2 + 8),
                                                                                            v99 >= 2)
                                                                                        && v99 - 1 >= (unint64_t)a1 + v98 - *(void *)a2)))
                                                                                    {
                                                                                      uint64_t result = sub_2A7CE0(a1, a2, 0x6Cu);
                                                                                      if (result)
                                                                                      {
                                                                                        long long v100 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                        if (*v100 >= 0x6Du
                                                                                          && (uint64_t v101 = v100[54]) != 0)
                                                                                        {
                                                                                          uint64_t v102 = (unsigned int *)((char *)a1 + v101 + *(unsigned int *)((char *)a1 + v101));
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          uint64_t v102 = 0;
                                                                                        }
                                                                                        uint64_t result = sub_2A7D68(a2, v102);
                                                                                        if (result)
                                                                                        {
                                                                                          int64_t v103 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                          if (*v103 >= 0x6Du
                                                                                            && (uint64_t v104 = v103[54]) != 0)
                                                                                          {
                                                                                            long long v105 = (int *)((char *)a1 + v104 + *(unsigned int *)((char *)a1 + v104));
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            long long v105 = 0;
                                                                                          }
                                                                                          uint64_t result = sub_2BB558((uint64_t *)a2, v105);
                                                                                          if (result)
                                                                                          {
                                                                                            uint64_t v106 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                            unsigned int v107 = *v106;
                                                                                            if (v107 < 0x6F) {
                                                                                              goto LABEL_285;
                                                                                            }
                                                                                            if (!v106[55]
                                                                                              || (uint64_t result = 0,
                                                                                                  unint64_t v108 = *(void *)(a2 + 8),
                                                                                                  v108 >= 2)
                                                                                              && v108 - 1 >= (unint64_t)a1 + v106[55] - *(void *)a2)
                                                                                            {
                                                                                              if (v107 < 0x71
                                                                                                || (!v106[56]
                                                                                                 || (uint64_t result = 0, v109 = *(void *)(a2 + 8), v109 >= 2) && v109 - 1 >= (unint64_t)a1 + v106[56] - *(void *)a2)
                                                                                                && (v107 < 0x73
                                                                                                 || (!v106[57] || (uint64_t result = 0, v110 = *(void *)(a2 + 8), v110 >= 2) && v110 - 1 >= (unint64_t)a1 + v106[57] - *(void *)a2) && (v107 < 0x75 || (v111 = v106[58]) == 0 || (uint64_t result = 0, v112 = *(void *)(a2 + 8), v112 >= 2) && v112 - 1 >= (unint64_t)a1 + v111 - *(void *)a2)))
                                                                                              {
LABEL_285:
                                                                                                uint64_t result = sub_2AF5DC(a1, a2, 0x76u, 2);
                                                                                                if (result)
                                                                                                {
                                                                                                  uint64_t result = sub_2B16B4(a1, a2, 0x78u, 2);
                                                                                                  if (result)
                                                                                                  {
                                                                                                    uint64_t result = sub_2AF5DC(a1, a2, 0x7Au, 2);
                                                                                                    if (result)
                                                                                                    {
                                                                                                      uint64_t result = sub_2AF5DC(a1, a2, 0x7Cu, 2);
                                                                                                      if (result)
                                                                                                      {
                                                                                                        uint64_t result = sub_2B16B4(a1, a2, 0x7Eu, 2);
                                                                                                        if (result)
                                                                                                        {
                                                                                                          uint64_t result = sub_2AFEE4(a1, a2, 0x80u, 4);
                                                                                                          if (result)
                                                                                                          {
                                                                                                            uint64_t result = sub_2A7CE0(a1, a2, 0x82u);
                                                                                                            if (result)
                                                                                                            {
                                                                                                              long long v113 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                                              if (*v113 >= 0x83u && (uint64_t v114 = v113[65]) != 0) {
                                                                                                                long long v115 = (unsigned int *)((char *)a1 + v114 + *(unsigned int *)((char *)a1 + v114));
                                                                                                              }
                                                                                                              else {
                                                                                                                long long v115 = 0;
                                                                                                              }
                                                                                                              uint64_t result = sub_2A7D68(a2, v115);
                                                                                                              if (result)
                                                                                                              {
                                                                                                                uint64_t result = sub_2A7CE0(a1, a2, 0x8Cu);
                                                                                                                if (result)
                                                                                                                {
                                                                                                                  uint64_t v116 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                                                  if (*v116 >= 0x8Du && (uint64_t v117 = v116[70]) != 0) {
                                                                                                                    v118 = (unsigned int *)((char *)a1 + v117 + *(unsigned int *)((char *)a1 + v117));
                                                                                                                  }
                                                                                                                  else {
                                                                                                                    v118 = 0;
                                                                                                                  }
                                                                                                                  uint64_t result = sub_2B0C38(a2, v118);
                                                                                                                  if (result)
                                                                                                                  {
                                                                                                                    uint64_t result = sub_2A7CE0(a1, a2, 0x8Eu);
                                                                                                                    if (result)
                                                                                                                    {
                                                                                                                      uint64_t v119 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                                                      if (*v119 < 0x8Fu || (v120 = v119[71]) == 0 || (uint64_t result = sub_2BC340((int *)((char *)a1 + v120 + *(unsigned int *)((char *)a1 + v120)), (uint64_t *)a2), result))
                                                                                                                      {
                                                                                                                        uint64_t result = sub_2A7CE0(a1, a2, 0x90u);
                                                                                                                        if (result)
                                                                                                                        {
                                                                                                                          uint64_t v121 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                                                          if (*v121 < 0x91u || (v122 = v121[72]) == 0 || (uint64_t result = sub_2BC340((int *)((char *)a1 + v122 + *(unsigned int *)((char *)a1 + v122)), (uint64_t *)a2), result))
                                                                                                                          {
                                                                                                                            uint64_t result = sub_2A7CE0(a1, a2, 0x92u);
                                                                                                                            if (result)
                                                                                                                            {
                                                                                                                              uint64_t v123 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                                                              if (*v123 < 0x93u || (v124 = v123[73]) == 0 || (uint64_t result = sub_2BC340((int *)((char *)a1 + v124 + *(unsigned int *)((char *)a1 + v124)), (uint64_t *)a2), result))
                                                                                                                              {
                                                                                                                                uint64_t result = sub_2A7CE0(a1, a2, 0x94u);
                                                                                                                                if (result)
                                                                                                                                {
                                                                                                                                  long long v125 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                                                                  if (*v125 < 0x95u || (v126 = v125[74]) == 0 || (uint64_t result = sub_2BC340((int *)((char *)a1 + v126 + *(unsigned int *)((char *)a1 + v126)), (uint64_t *)a2), result))
                                                                                                                                  {
                                                                                                                                    --*(_DWORD *)(a2 + 40);
                                                                                                                                    return 1;
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return result;
  }
  if (!v20[3]) {
    goto LABEL_42;
  }
  unint64_t v23 = (unint64_t)&v3[v20[3]];
  if ((v23 & 3) != 0 && v4) {
    return 0;
  }
  uint64_t result = 0;
  if (v7 >= 9 && v7 - 8 >= v23)
  {
LABEL_42:
    if (v21 >= 9)
    {
      uint64_t v24 = v20[4];
      if (v20[4])
      {
        uint64_t result = 0;
        BOOL v25 = &v3[v24];
        BOOL v26 = ((unint64_t)&v3[v24] & 3) == 0 || v4 == 0;
        BOOL v27 = v26;
        if (v8 < (unint64_t)v25 || !v27) {
          return result;
        }
      }
      if (v21 >= 0xB)
      {
        uint64_t v28 = v20[5];
        if (v20[5])
        {
          uint64_t result = 0;
          BOOL v29 = &v3[v28];
          BOOL v30 = ((unint64_t)&v3[v28] & 3) == 0 || v4 == 0;
          BOOL v31 = v30;
          if (v8 < (unint64_t)v29 || !v31) {
            return result;
          }
        }
        if (v21 >= 0xD)
        {
          if (v20[6])
          {
            uint64_t result = 0;
            unint64_t v32 = (unint64_t)&v3[v20[6]];
            BOOL v33 = (v32 & 1) == 0 || v4 == 0;
            BOOL v34 = v33;
            if (v7 - 2 < v32 || !v34) {
              return result;
            }
          }
          if (v21 >= 0xF)
          {
            if (v20[7] && v7 - 1 < (unint64_t)&v3[v20[7]]) {
              return 0;
            }
            if (v21 >= 0x11)
            {
              if (v20[8] && v7 - 1 < (unint64_t)&v3[v20[8]]) {
                return 0;
              }
              if (v21 >= 0x13)
              {
                if (v20[9] && v7 - 1 < (unint64_t)&v3[v20[9]]) {
                  return 0;
                }
                if (v21 >= 0x15)
                {
                  if (v20[10] && v7 - 1 < (unint64_t)&v3[v20[10]]) {
                    return 0;
                  }
                  if (v21 >= 0x17)
                  {
                    if (v20[11] && v7 - 1 < (unint64_t)&v3[v20[11]]) {
                      return 0;
                    }
                    if (v21 >= 0x19)
                    {
                      if (v20[12] && v7 - 1 < (unint64_t)&v3[v20[12]]) {
                        return 0;
                      }
                      if (v21 >= 0x1B)
                      {
                        uint64_t v35 = v20[13];
                        if (v35)
                        {
                          if (v7 - 1 < (unint64_t)&v3[v35]) {
                            return 0;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_93;
  }
  return result;
}

uint64_t sub_2BB328(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2BB5E4((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2BB3B4(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2BB7B8((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2BB440(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2BBDA0((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2BB4CC(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2BC098((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2BB558(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2BC1F4((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2BB5E4(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v15 = 0;
    if (v4 || v6 - 2 < v14) {
      return v15;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v14);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v16;
  unint64_t v17 = v6 - v16;
  if (v17 == 0 || !v8 || v17 < v14) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_67;
  }
  uint64_t v21 = v19[2];
  if (v19[2])
  {
    uint64_t v15 = 0;
    unint64_t v22 = &v3[v21];
    BOOL v23 = ((unint64_t)&v3[v21] & 3) == 0 || v4 == 0;
    BOOL v24 = v23;
    if (v7 < (unint64_t)v22 || !v24) {
      return v15;
    }
  }
  if (v20 < 7) {
    goto LABEL_67;
  }
  uint64_t v25 = v19[3];
  if (!v19[3])
  {
LABEL_64:
    if (v20 >= 9 && v19[4] && v6 - 1 < (unint64_t)&v3[v19[4]]) {
      return 0;
    }
LABEL_67:
    *((_DWORD *)a2 + 10) = v10;
    return 1;
  }
  uint64_t v15 = 0;
  BOOL v26 = &v3[v25];
  BOOL v28 = ((unint64_t)&v3[v25] & 3) == 0 || v4 == 0;
  if (v7 >= (unint64_t)v26 && v28)
  {
    uint64_t v29 = *(unsigned int *)&v26[v2];
    if ((int)v29 < 1 || v6 - 1 < (unint64_t)&v26[v29]) {
      return 0;
    }
    uint64_t v15 = 0;
    BOOL v30 = (unsigned int *)((char *)a1 + v25 + *(unsigned int *)((char *)a1 + v25));
    BOOL v31 = (char *)v30 - v2;
    BOOL v32 = (((unint64_t)v30 - v2) & 3) == 0 || v4 == 0;
    BOOL v33 = v32;
    if (v7 >= (unint64_t)v31 && v33)
    {
      uint64_t v34 = *v30;
      if (v34 > 0x7FFFFFFE) {
        return 0;
      }
      uint64_t v15 = 0;
      unint64_t v35 = v34 + 4;
      unint64_t v36 = (unint64_t)&v31[v34 + 4];
      if (v6 - 1 < v36 || v6 <= v35 || v6 - v35 < (unint64_t)v31) {
        return v15;
      }
      if (*(unsigned char *)(v2 + v36)) {
        return 0;
      }
      goto LABEL_64;
    }
  }
  return v15;
}

uint64_t sub_2BB7B8(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  unsigned int v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_61;
  }
  if (v20[2] && v7 - 1 < (unint64_t)&v3[v20[2]]) {
    return 0;
  }
  if (v21 < 7) {
    goto LABEL_61;
  }
  if (v20[3] && v7 - 1 < (unint64_t)&v3[v20[3]]) {
    return 0;
  }
  if (v21 < 9) {
    goto LABEL_61;
  }
  if (v20[4] && v7 - 1 < (unint64_t)&v3[v20[4]]) {
    return 0;
  }
  if (v21 < 0xB) {
    goto LABEL_61;
  }
  uint64_t v22 = v20[5];
  if (!v22) {
    goto LABEL_61;
  }
  uint64_t result = 0;
  unint64_t v23 = (unint64_t)&v3[v22];
  BOOL v24 = (v23 & 3) == 0 || v4 == 0;
  BOOL v25 = v24;
  if (v8 >= v23 && v25)
  {
    uint64_t v26 = *(unsigned int *)(v2 + v23);
    if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
      return 0;
    }
    uint64_t result = 0;
    BOOL v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    BOOL v28 = (char *)v27 - v2;
    BOOL v29 = (v28 & 3) == 0 || v4 == 0;
    BOOL v30 = v29;
    if (v8 >= (unint64_t)v28 && v30)
    {
      uint64_t v31 = *v27;
      if (v31 > 0x7FFFFFFE) {
        return 0;
      }
      uint64_t result = 0;
      unint64_t v32 = v31 + 4;
      BOOL v15 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (v15 && v33 >= (unint64_t)v28)
      {
LABEL_61:
        uint64_t result = sub_2A7CE0(a1, a2, 0xCu);
        if (result)
        {
          uint64_t v34 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v34 >= 0xDu && (uint64_t v35 = v34[6]) != 0) {
            unint64_t v36 = (unsigned int *)((char *)a1 + v35 + *(unsigned int *)((char *)a1 + v35));
          }
          else {
            unint64_t v36 = 0;
          }
          uint64_t result = sub_2A7D68(a2, v36);
          if (result)
          {
            uint64_t v37 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v37 >= 0xDu && (uint64_t v38 = v37[6]) != 0) {
              uint64_t v39 = (int *)((char *)a1 + v38 + *(unsigned int *)((char *)a1 + v38));
            }
            else {
              uint64_t v39 = 0;
            }
            uint64_t result = sub_2BBAD8(a2, v39);
            if (result)
            {
              uint64_t result = sub_2A7CE0(a1, a2, 0xEu);
              if (result)
              {
                uint64_t v40 = (unsigned __int16 *)((char *)a1 - *a1);
                if (*v40 >= 0xFu && (uint64_t v41 = v40[7]) != 0) {
                  int v42 = (unsigned int *)((char *)a1 + v41 + *(unsigned int *)((char *)a1 + v41));
                }
                else {
                  int v42 = 0;
                }
                uint64_t result = sub_2A7D68(a2, v42);
                if (result)
                {
                  uint64_t v43 = (unsigned __int16 *)((char *)a1 - *a1);
                  if (*v43 >= 0xFu && (uint64_t v44 = v43[7]) != 0) {
                    uint64_t v45 = (unsigned int *)((char *)a1 + v44 + *(unsigned int *)((char *)a1 + v44));
                  }
                  else {
                    uint64_t v45 = 0;
                  }
                  uint64_t result = sub_2AFFCC(a2, v45);
                  if (result)
                  {
                    --*(_DWORD *)(a2 + 40);
                    return 1;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2BBAD8(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2BBB64((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2BBB64(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  unsigned int v12 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  if (v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v15 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v15) {
      return 0;
    }
  }
  else if (v7 - 2 < v15)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v16;
  unint64_t v17 = v7 - v16;
  if (v17 == 0 || !v9 || v17 < v15) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_63;
  }
  uint64_t v21 = v19[2];
  if (v19[2])
  {
    if (((unint64_t)&v3[v21] & 3) != 0 && v4) {
      return 0;
    }
    if (v7 < 9 || v7 - 8 < (unint64_t)&v3[v21]) {
      return 0;
    }
  }
  if (v20 < 7) {
    goto LABEL_63;
  }
  uint64_t v22 = v19[3];
  if (!v19[3])
  {
LABEL_57:
    if (v20 >= 9
      && (v19[4] && v7 - 1 < (unint64_t)&v3[v19[4]]
       || v20 >= 0xB && v19[5] && v7 - 1 < (unint64_t)&v3[v19[5]]))
    {
      return 0;
    }
LABEL_63:
    if (sub_2AFEE4(a1, a2, 0xCu, 8))
    {
      --*(_DWORD *)(a2 + 40);
      return 1;
    }
    return 0;
  }
  unint64_t v23 = &v3[v22];
  BOOL v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
  if (v8 < (unint64_t)v23 || !v25) {
    return 0;
  }
  uint64_t v26 = *(unsigned int *)&v23[v2];
  if ((int)v26 >= 1 && v7 - 1 >= (unint64_t)&v23[v26])
  {
    BOOL v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    BOOL v28 = (char *)v27 - v2;
    BOOL v30 = (v28 & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v28 || !v30) {
      return 0;
    }
    uint64_t v31 = *v27;
    if (v31 <= 0x7FFFFFFE)
    {
      unint64_t v32 = v31 + 4;
      BOOL v9 = v7 >= v32;
      unint64_t v33 = v7 - v32;
      if (v33 == 0 || !v9 || v33 < (unint64_t)v28) {
        return 0;
      }
      goto LABEL_57;
    }
  }
  return 0;
}

uint64_t sub_2BBDA0(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v15 = 0;
    if (v4 || v6 - 2 < v14) {
      return v15;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v14);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v16;
  unint64_t v17 = v6 - v16;
  if (v17 == 0 || !v8 || v17 < v14) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_60;
  }
  if (v19[2] && v6 - 1 < (unint64_t)&v3[v19[2]]) {
    return 0;
  }
  if (v20 < 7) {
    goto LABEL_60;
  }
  if (v19[3] && v6 - 1 < (unint64_t)&v3[v19[3]]) {
    return 0;
  }
  if (v20 < 9 || (uint64_t v21 = v19[4]) == 0)
  {
LABEL_60:
    *((_DWORD *)a2 + 10) = v10;
    return 1;
  }
  uint64_t v15 = 0;
  unint64_t v22 = (unint64_t)&v3[v21];
  BOOL v24 = (v22 & 3) == 0 || v4 == 0;
  if (v7 >= v22 && v24)
  {
    uint64_t v25 = *(unsigned int *)(v2 + v22);
    if ((int)v25 < 1 || v6 - 1 < v22 + v25) {
      return 0;
    }
    uint64_t v15 = 0;
    uint64_t v26 = (unsigned int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21));
    BOOL v27 = (char *)v26 - v2;
    BOOL v28 = (((unint64_t)v26 - v2) & 3) == 0 || v4 == 0;
    BOOL v29 = v28;
    if (v7 >= (unint64_t)v27 && v29)
    {
      uint64_t v30 = *v26;
      if (v30 > 0x7FFFFFFE) {
        return 0;
      }
      uint64_t v15 = 0;
      unint64_t v31 = v30 + 4;
      unint64_t v32 = (unint64_t)&v27[v30 + 4];
      if (v6 - 1 < v32 || v6 <= v31 || v6 - v31 < (unint64_t)v27) {
        return v15;
      }
      if (*(unsigned char *)(v2 + v32)) {
        return 0;
      }
      goto LABEL_60;
    }
  }
  return v15;
}

uint64_t sub_2BBF64(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (unint64_t)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  BOOL v7 = v6 >= 5 && v6 - 4 >= v3;
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a2 + 10);
  unsigned int v10 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v9 + 1;
  *((_DWORD *)a2 + 11) = v10;
  if ((v9 + 1) > *((_DWORD *)a2 + 4) || v10 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v12 = v3 - v8;
  if ((v3 - v8))
  {
    uint64_t v13 = 0;
    if (v4 || v6 - 2 < v12) {
      return v13;
    }
  }
  else if (v6 - 2 < v12)
  {
    return 0;
  }
  unint64_t v14 = *(unsigned __int16 *)(v2 + v12);
  if ((v14 & 1) != 0 && v4 | v14 & 1) {
    return 0;
  }
  BOOL v7 = v6 >= v14;
  unint64_t v15 = v6 - v14;
  if (v15 == 0 || !v7 || v15 < v12) {
    return 0;
  }
  unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v19 = *v18;
  if (v19 < 5) {
    goto LABEL_47;
  }
  uint64_t v20 = v18[2];
  if (!v18[2]
    || ((uint64_t v13 = 0, v21 = v3 + v20, ((v3 + v20) & 1) != 0) ? (v22 = v4 == 0) : (v22 = 1),
        !v22 ? (int v23 = 0) : (int v23 = 1),
        v6 - 2 >= v21 && v23))
  {
    if (v19 < 7
      || (uint64_t v24 = v18[3]) == 0
      || ((uint64_t v13 = 0, v25 = v3 + v24, (v25 & 1) != 0) ? (v26 = v4 == 0) : (v26 = 1),
          !v26 ? (int v27 = 0) : (int v27 = 1),
          v6 - 2 >= v25 && v27))
    {
LABEL_47:
      *((_DWORD *)a2 + 10) = v9;
      return 1;
    }
  }
  return v13;
}

uint64_t sub_2BC098(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (unint64_t)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  BOOL v7 = v6 >= 5 && v6 - 4 >= v3;
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a2 + 10);
  unsigned int v10 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v9 + 1;
  *((_DWORD *)a2 + 11) = v10;
  if ((v9 + 1) > *((_DWORD *)a2 + 4) || v10 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v13 = v3 - v8;
  if ((v3 - v8))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v7 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v7 || v16 < v13) {
    return 0;
  }
  unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v19 = *v18;
  if (v19 < 5) {
    goto LABEL_44;
  }
  uint64_t v20 = v18[2];
  if (!v18[2]) {
    goto LABEL_43;
  }
  unint64_t v21 = v3 + v20;
  if (((v3 + v20) & 3) != 0 && v4) {
    return 0;
  }
  uint64_t v14 = 0;
  if (v6 >= 9 && v6 - 8 >= v21)
  {
LABEL_43:
    if (v19 < 7) {
      goto LABEL_44;
    }
    if (v18[3] && v6 - 1 < v3 + v18[3]) {
      return 0;
    }
    if (v19 < 9 || !v18[4]) {
      goto LABEL_44;
    }
    unint64_t v22 = v3 + v18[4];
    if ((v22 & 7) != 0 && v4) {
      return 0;
    }
    uint64_t v14 = 0;
    if (v6 >= 9 && v6 - 8 >= v22)
    {
LABEL_44:
      *((_DWORD *)a2 + 10) = v9;
      return 1;
    }
  }
  return v14;
}

uint64_t sub_2BC1F4(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v15 = 0;
    if (v4 || v6 - 2 < v14) {
      return v15;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v14);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v16;
  unint64_t v17 = v6 - v16;
  if (v17 == 0 || !v8 || v17 < v14) {
    return 0;
  }
  unsigned int v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_52;
  }
  if (v19[2] && v6 - 1 < (unint64_t)&v3[v19[2]]) {
    return 0;
  }
  if (v20 < 0xB) {
    goto LABEL_52;
  }
  uint64_t v21 = v19[5];
  if (!v19[5]
    || ((uint64_t v15 = 0, v22 = &v3[v21], ((unint64_t)&v3[v21] & 3) != 0) ? (v23 = v4 == 0) : (v23 = 1),
        !v23 ? (int v24 = 0) : (int v24 = 1),
        v7 >= (unint64_t)v22 && v24))
  {
    if (v20 < 0xD
      || !v19[6]
      || ((uint64_t v15 = 0, v25 = (unint64_t)&v3[v19[6]], (v25 & 3) != 0) ? (v26 = v4 == 0) : (v26 = 1),
          !v26 ? (int v27 = 0) : (int v27 = 1),
          v7 >= v25 && v27))
    {
LABEL_52:
      *((_DWORD *)a2 + 10) = v10;
      return 1;
    }
  }
  return v15;
}

uint64_t sub_2BC340(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  unsigned int v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_47;
  }
  uint64_t v21 = v19[2];
  if (!v19[2]
    || ((v14 = 0, v22 = &v3[v21], ((unint64_t)&v3[v21] & 3) != 0) ? (BOOL v23 = v4 == 0) : (BOOL v23 = 1),
        !v23 ? (int v24 = 0) : (int v24 = 1),
        v7 >= (unint64_t)v22 && v24))
  {
    if (v20 < 7
      || (uint64_t v25 = v19[3]) == 0
      || ((v14 = 0, v26 = (unint64_t)&v3[v25], (v26 & 3) != 0) ? (BOOL v27 = v4 == 0) : (BOOL v27 = 1),
          !v27 ? (int v28 = 0) : (int v28 = 1),
          v7 >= v26 && v28))
    {
LABEL_47:
      *((_DWORD *)a2 + 10) = v10;
      return 1;
    }
  }
  return v14;
}

BOOL sub_2BC46C(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  unsigned int v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_82;
  }
  uint64_t v22 = v20[2];
  if (v20[2])
  {
    BOOL result = 0;
    BOOL v23 = &v3[v22];
    BOOL v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v23 || !v25) {
      return result;
    }
    uint64_t v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26]) {
      return 0;
    }
    BOOL result = 0;
    BOOL v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    int v28 = (char *)v27 - v2;
    BOOL v29 = (v28 & 3) == 0 || v4 == 0;
    BOOL v30 = v29;
    if (v8 < (unint64_t)v28 || !v30) {
      return result;
    }
    uint64_t v31 = *v27;
    if (v31 > 0xFFFFFFE) {
      return 0;
    }
    unint64_t v32 = (8 * v31) | 4;
    BOOL v9 = v7 >= v32;
    unint64_t v33 = v7 - v32;
    if (v33 == 0 || !v9 || v33 < (unint64_t)v28) {
      return 0;
    }
  }
  if (v21 < 7) {
    goto LABEL_82;
  }
  if (!v20[3]) {
    goto LABEL_81;
  }
  unint64_t v35 = (unint64_t)&v3[v20[3]];
  if ((v35 & 7) != 0 && v4) {
    return 0;
  }
  BOOL result = 0;
  if (v7 >= 9 && v7 - 8 >= v35)
  {
LABEL_81:
    if (v21 < 9) {
      goto LABEL_82;
    }
    uint64_t v36 = v20[4];
    if (!v20[4]
      || ((result = 0, uint64_t v37 = &v3[v36], ((unint64_t)&v3[v36] & 3) != 0) ? (v38 = v4 == 0) : (v38 = 1),
          !v38 ? (int v39 = 0) : (int v39 = 1),
          v8 >= (unint64_t)v37 && v39))
    {
      if (v21 < 0xB
        || !v20[5]
        || ((BOOL result = 0, v40 = (unint64_t)&v3[v20[5]], (v40 & 1) != 0) ? (v41 = v4 == 0) : (v41 = 1),
            !v41 ? (int v42 = 0) : (int v42 = 1),
            v7 - 2 >= v40 && v42))
      {
LABEL_82:
        BOOL result = sub_2A7CE0(a1, a2, 0xCu);
        if (result)
        {
          uint64_t v43 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v43 >= 0xDu && (uint64_t v44 = v43[6]) != 0) {
            uint64_t v45 = (unsigned int *)((char *)a1 + v44 + *(unsigned int *)((char *)a1 + v44));
          }
          else {
            uint64_t v45 = 0;
          }
          BOOL result = sub_2B37B8(a2, v45);
          if (result)
          {
            --*(_DWORD *)(a2 + 40);
            return 1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2BC6FC(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  unsigned int v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 >= 5)
  {
    if (v20[2] && v7 - 1 < (unint64_t)&v3[v20[2]]) {
      return 0;
    }
    if (v21 >= 7)
    {
      uint64_t v22 = v20[3];
      if (v20[3])
      {
        uint64_t result = 0;
        BOOL v23 = &v3[v22];
        BOOL v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
        if (v8 < (unint64_t)v23 || !v25) {
          return result;
        }
        uint64_t v26 = *(unsigned int *)&v23[v2];
        if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26]) {
          return 0;
        }
        uint64_t result = 0;
        BOOL v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
        int v28 = (char *)v27 - v2;
        BOOL v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
        BOOL v30 = v29;
        if (v8 < (unint64_t)v28 || !v30) {
          return result;
        }
        uint64_t v31 = *v27;
        if (v31 > 0xFFFFFFE) {
          return 0;
        }
        uint64_t result = 0;
        unint64_t v32 = (8 * v31) | 4;
        BOOL v9 = v7 >= v32;
        unint64_t v33 = v7 - v32;
        if (v33 == 0 || !v9 || v33 < (unint64_t)v28) {
          return result;
        }
      }
      if (v21 >= 9)
      {
        uint64_t v34 = v20[4];
        if (v34)
        {
          uint64_t result = 0;
          unint64_t v35 = (unint64_t)&v3[v34];
          BOOL v37 = (v35 & 3) == 0 || v4 == 0;
          if (v8 < v35 || !v37) {
            return result;
          }
          uint64_t v38 = *(unsigned int *)(v2 + v35);
          if ((int)v38 < 1 || v7 - 1 < v35 + v38) {
            return 0;
          }
          uint64_t result = 0;
          int v39 = (unsigned int *)((char *)a1 + v34 + *(unsigned int *)((char *)a1 + v34));
          unint64_t v40 = (char *)v39 - v2;
          BOOL v41 = (v40 & 3) == 0 || v4 == 0;
          BOOL v42 = v41;
          if (v8 < (unint64_t)v40 || !v42) {
            return result;
          }
          uint64_t v43 = *v39;
          if (v43 <= 0x1FFFFFFE)
          {
            uint64_t result = 0;
            unint64_t v44 = 4 * v43 + 4;
            BOOL v15 = v7 > v44;
            unint64_t v45 = v7 - v44;
            if (!v15 || v45 < (unint64_t)v40) {
              return result;
            }
            goto LABEL_81;
          }
          return 0;
        }
      }
    }
  }
  int v39 = 0;
LABEL_81:
  uint64_t result = sub_2AFFCC(a2, v39);
  if (result)
  {
    uint64_t result = sub_2A7CE0(a1, a2, 0xAu);
    if (result)
    {
      uint64_t v46 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v46 >= 0xBu && (uint64_t v47 = v46[5]) != 0) {
        BOOL v48 = (unsigned int *)((char *)a1 + v47 + *(unsigned int *)((char *)a1 + v47));
      }
      else {
        BOOL v48 = 0;
      }
      uint64_t result = sub_2A7D68(a2, v48);
      if (result)
      {
        uint64_t v49 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v49 >= 0xBu && (uint64_t v50 = v49[5]) != 0) {
          uint64_t v51 = (int *)((char *)a1 + v50 + *(unsigned int *)((char *)a1 + v50));
        }
        else {
          uint64_t v51 = 0;
        }
        uint64_t result = sub_2BCAF0(a2, v51);
        if (result)
        {
          uint64_t result = sub_2A7CE0(a1, a2, 0xCu);
          if (result)
          {
            uint64_t v52 = *a1;
            uint64_t v53 = -v52;
            uint64_t v54 = (unsigned __int16 *)((char *)a1 - v52);
            if (*v54 >= 0xDu)
            {
              uint64_t v55 = v54[6];
              if (v55)
              {
                uint64_t result = sub_2BD3E0((int *)((char *)a1 + v55 + *(unsigned int *)((char *)a1 + v55)), a2);
                if (!result) {
                  return result;
                }
                uint64_t v53 = -(uint64_t)*a1;
              }
            }
            uint64_t v56 = (unsigned __int16 *)((char *)a1 + v53);
            if (*v56 < 0xFu
              || (uint64_t v57 = v56[7]) == 0
              || (uint64_t result = 0, v58 = *(void *)(a2 + 8), v58 >= 2)
              && v58 - 1 >= (unint64_t)a1 + v57 - *(void *)a2)
            {
              uint64_t result = sub_2A7CE0(a1, a2, 0x10u);
              if (result)
              {
                uint64_t v59 = (unsigned __int16 *)((char *)a1 - *a1);
                if (*v59 >= 0x11u && (uint64_t v60 = v59[8]) != 0) {
                  uint64_t v61 = (unsigned int *)((char *)a1 + v60 + *(unsigned int *)((char *)a1 + v60));
                }
                else {
                  uint64_t v61 = 0;
                }
                uint64_t result = sub_2B0C38(a2, v61);
                if (result)
                {
                  --*(_DWORD *)(a2 + 40);
                  return 1;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2BCAF0(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2BCB7C((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2BCB7C(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  unsigned int v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 0xB) {
    goto LABEL_62;
  }
  if (v20[5] && v7 - 1 < (unint64_t)&v3[v20[5]]) {
    return 0;
  }
  if (v21 < 0xD) {
    goto LABEL_62;
  }
  if (v20[6] && v7 - 1 < (unint64_t)&v3[v20[6]]) {
    return 0;
  }
  if (v21 < 0xF) {
    goto LABEL_62;
  }
  uint64_t v22 = v20[7];
  if (!v22) {
    goto LABEL_62;
  }
  uint64_t result = 0;
  unint64_t v23 = (unint64_t)&v3[v22];
  BOOL v25 = (v23 & 3) == 0 || v4 == 0;
  if (v8 >= v23 && v25)
  {
    uint64_t v26 = *(unsigned int *)(v2 + v23);
    if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
      return 0;
    }
    uint64_t result = 0;
    BOOL v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    int v28 = (char *)v27 - v2;
    BOOL v29 = (v28 & 3) == 0 || v4 == 0;
    BOOL v30 = v29;
    if (v8 >= (unint64_t)v28 && v30)
    {
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      uint64_t result = 0;
      unint64_t v32 = 4 * v31 + 4;
      BOOL v15 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (v15 && v33 >= (unint64_t)v28)
      {
        if (v31)
        {
          unint64_t v34 = 0;
          unint64_t v35 = v27 + 1;
          do
          {
            uint64_t v36 = v35;
            if ((sub_2BB5E4((int *)((char *)v35 + *v35), (uint64_t *)a2) & 1) == 0) {
              return 0;
            }
            ++v34;
            unint64_t v35 = v36 + 1;
          }
          while (v34 < *v27);
        }
LABEL_62:
        uint64_t result = sub_2A7CE0(a1, a2, 0x10u);
        if (result)
        {
          BOOL v37 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v37 >= 0x11u && (uint64_t v38 = v37[8]) != 0) {
            int v39 = (unsigned int *)((char *)a1 + v38 + *(unsigned int *)((char *)a1 + v38));
          }
          else {
            int v39 = 0;
          }
          uint64_t result = sub_2A7D68(a2, v39);
          if (result)
          {
            unint64_t v40 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v40 >= 0x11u && (uint64_t v41 = v40[8]) != 0) {
              BOOL v42 = (int *)((char *)a1 + v41 + *(unsigned int *)((char *)a1 + v41));
            }
            else {
              BOOL v42 = 0;
            }
            uint64_t result = sub_2B0628(a2, v42);
            if (result)
            {
              uint64_t result = sub_2A7CE0(a1, a2, 0x14u);
              if (result)
              {
                uint64_t v43 = (unsigned __int16 *)((char *)a1 - *a1);
                if (*v43 >= 0x15u && (uint64_t v44 = v43[10]) != 0) {
                  unint64_t v45 = (unsigned int *)((char *)a1 + v44 + *(unsigned int *)((char *)a1 + v44));
                }
                else {
                  unint64_t v45 = 0;
                }
                uint64_t result = sub_2A7D68(a2, v45);
                if (result)
                {
                  uint64_t v46 = (unsigned __int16 *)((char *)a1 - *a1);
                  if (*v46 >= 0x15u && (uint64_t v47 = v46[10]) != 0) {
                    BOOL v48 = (int *)((char *)a1 + v47 + *(unsigned int *)((char *)a1 + v47));
                  }
                  else {
                    BOOL v48 = 0;
                  }
                  uint64_t result = sub_2BCFF4((uint64_t *)a2, v48);
                  if (result)
                  {
                    uint64_t result = sub_2A7CE0(a1, a2, 0x16u);
                    if (result)
                    {
                      uint64_t v49 = (unsigned __int16 *)((char *)a1 - *a1);
                      if (*v49 >= 0x17u && (uint64_t v50 = v49[11]) != 0) {
                        uint64_t v51 = (unsigned int *)((char *)a1 + v50 + *(unsigned int *)((char *)a1 + v50));
                      }
                      else {
                        uint64_t v51 = 0;
                      }
                      uint64_t result = sub_2A7D68(a2, v51);
                      if (result)
                      {
                        uint64_t v52 = (unsigned __int16 *)((char *)a1 - *a1);
                        if (*v52 >= 0x17u && (uint64_t v53 = v52[11]) != 0) {
                          uint64_t v54 = (int *)((char *)a1 + v53 + *(unsigned int *)((char *)a1 + v53));
                        }
                        else {
                          uint64_t v54 = 0;
                        }
                        uint64_t result = sub_2BCFF4((uint64_t *)a2, v54);
                        if (result)
                        {
                          uint64_t result = sub_2A7CE0(a1, a2, 0x18u);
                          if (result)
                          {
                            uint64_t v55 = (unsigned __int16 *)((char *)a1 - *a1);
                            if (*v55 >= 0x19u && (uint64_t v56 = v55[12]) != 0) {
                              uint64_t v57 = (unsigned int *)((char *)a1 + v56 + *(unsigned int *)((char *)a1 + v56));
                            }
                            else {
                              uint64_t v57 = 0;
                            }
                            uint64_t result = sub_2A7D68(a2, v57);
                            if (result)
                            {
                              unint64_t v58 = (unsigned __int16 *)((char *)a1 - *a1);
                              if (*v58 >= 0x19u && (uint64_t v59 = v58[12]) != 0) {
                                uint64_t v60 = (int *)((char *)a1 + v59 + *(unsigned int *)((char *)a1 + v59));
                              }
                              else {
                                uint64_t v60 = 0;
                              }
                              uint64_t result = sub_2BCFF4((uint64_t *)a2, v60);
                              if (result)
                              {
                                --*(_DWORD *)(a2 + 40);
                                return 1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2BCFF4(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2BD080((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2BD080(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  char v4 = *((unsigned char *)a2 + 24);
  if ((v3 & 3) != 0 && *((unsigned char *)a2 + 24) != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v15 = 0;
    if (v4 || v6 - 2 < v14) {
      return v15;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v14);
  if ((v16 & 1) == 0 || (uint64_t v15 = 0, !v4) && (v16 & 1) == 0)
  {
    if (v6 <= v16 || v6 - v16 < v14) {
      return 0;
    }
    unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
    unsigned int v19 = *v18;
    if (v19 < 5) {
      goto LABEL_101;
    }
    uint64_t v20 = v18[2];
    if (v18[2])
    {
      uint64_t v15 = 0;
      unsigned int v21 = &v3[v20];
      BOOL v22 = ((unint64_t)&v3[v20] & 3) == 0;
      if (!v4) {
        BOOL v22 = 1;
      }
      if (v7 < (unint64_t)v21 || !v22) {
        return v15;
      }
      uint64_t v23 = *(unsigned int *)&v21[v2];
      if ((int)v23 < 1 || v6 - 1 < (unint64_t)&v21[v23]) {
        return 0;
      }
      uint64_t v15 = 0;
      int v24 = (unsigned int *)((char *)a1 + v20 + *(unsigned int *)((char *)a1 + v20));
      BOOL v25 = (char *)v24 - v2;
      BOOL v26 = (((unint64_t)v24 - v2) & 3) == 0;
      if (!v4) {
        BOOL v26 = 1;
      }
      if (v7 < (unint64_t)v25 || !v26) {
        return v15;
      }
      uint64_t v27 = *v24;
      if (v27 > 0x7FFFFFFE) {
        return 0;
      }
      unint64_t v28 = v27 + 4;
      unint64_t v29 = (unint64_t)&v25[v27 + 4];
      BOOL v30 = v6 - 1 >= v29 && v6 > v28;
      BOOL v31 = v30 && v6 - v28 >= (unint64_t)v25;
      if (!v31 || *(unsigned char *)(v2 + v29)) {
        return 0;
      }
    }
    if (v19 < 9 || (uint64_t v32 = v18[4]) == 0)
    {
LABEL_101:
      *((_DWORD *)a2 + 10) = v10;
      return 1;
    }
    uint64_t v15 = 0;
    unint64_t v33 = (unint64_t)&v3[v32];
    BOOL v34 = (v33 & 3) == 0;
    if (!v4) {
      BOOL v34 = 1;
    }
    if (v7 >= v33 && v34)
    {
      uint64_t v35 = *(unsigned int *)(v2 + v33);
      if ((int)v35 < 1) {
        return 0;
      }
      unint64_t v36 = v33 + v35;
      unint64_t v37 = v6 - 1;
      if (v6 - 1 < v36) {
        return 0;
      }
      uint64_t v15 = 0;
      uint64_t v38 = *(unsigned int *)((char *)a1 + v32);
      int v39 = (unsigned int *)((char *)a1 + v32 + v38);
      unint64_t v40 = (char *)v39 - v2;
      BOOL v41 = (v40 & 3) == 0;
      if (!v4) {
        BOOL v41 = 1;
      }
      if (v7 >= (unint64_t)v40 && v41)
      {
        uint64_t v42 = *v39;
        if (v42 > 0x1FFFFFFE) {
          return 0;
        }
        uint64_t v15 = 0;
        uint64_t v43 = 4 * v42;
        unint64_t v44 = 4 * v42 + 4;
        BOOL v8 = v6 >= v44;
        unint64_t v45 = v6 - v44;
        if (v45 != 0 && v8 && v45 >= (unint64_t)v40)
        {
          if (v42)
          {
            if (v4)
            {
              uint64_t v46 = 0;
              uint64_t v47 = (uint64_t)a1 + v32 + v38 + 4;
              uint64_t v48 = (uint64_t)a1 + v38 + v32 + 8;
              while (1)
              {
                uint64_t v49 = *(unsigned int *)(v47 + v46);
                unint64_t v50 = (unint64_t)&v40[v46 + 4 + v49];
                if ((v50 & 3) != 0 || v7 < v50) {
                  break;
                }
                uint64_t v52 = *(unsigned int *)(v47 + v49 + v46);
                if (v52 > 0x7FFFFFFE) {
                  break;
                }
                uint64_t v53 = v49 + v52;
                BOOL v54 = v37 >= (unint64_t)&v40[v46 + 8 + v53] && v6 > v52 + 4;
                BOOL v55 = v54 && v6 - (v52 + 4) >= v50;
                if (!v55 || *(unsigned char *)(v48 + v53 + v46)) {
                  break;
                }
                v46 += 4;
                if (v43 == v46) {
                  goto LABEL_101;
                }
              }
            }
            else
            {
              uint64_t v56 = 0;
              uint64_t v57 = (uint64_t)a1 + v32 + v38 + 4;
              uint64_t v58 = (uint64_t)a1 + v38 + v32 + 8;
              while (1)
              {
                uint64_t v59 = *(unsigned int *)(v57 + v56);
                unint64_t v60 = (unint64_t)&v40[v56 + 4 + v59];
                if (v7 < v60) {
                  break;
                }
                uint64_t v61 = *(unsigned int *)(v57 + v59 + v56);
                if (v61 > 0x7FFFFFFE) {
                  break;
                }
                uint64_t v62 = v59 + v61;
                BOOL v63 = v37 >= (unint64_t)&v40[v56 + 8 + v62] && v6 > v61 + 4;
                BOOL v64 = v63 && v6 - (v61 + 4) >= v60;
                if (!v64 || *(unsigned char *)(v58 + v62 + v56)) {
                  break;
                }
                v56 += 4;
                if (v43 == v56) {
                  goto LABEL_101;
                }
              }
            }
            return 0;
          }
          goto LABEL_101;
        }
      }
    }
  }
  return v15;
}

uint64_t sub_2BD3E0(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 40);
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  BOOL v16 = v12 + 1 > v15 || v13 > v14;
  if (v16) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  unsigned int v21 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v22 = *v21;
  if (v22 >= 5)
  {
    if (v21[2] && v7 - 1 < (unint64_t)&v3[v21[2]]) {
      return 0;
    }
    if (v22 >= 7)
    {
      uint64_t v23 = v21[3];
      if (v21[3])
      {
        unint64_t v24 = (unint64_t)&v3[v23];
        BOOL v26 = (v24 & 3) == 0 || v4 == 0;
        if (v8 < v24 || !v26) {
          return 0;
        }
        uint64_t v27 = *(unsigned int *)(v2 + v24);
        if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
          return 0;
        }
        unint64_t v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
        unint64_t v29 = (char *)v28 - v2;
        BOOL v31 = (v29 & 3) == 0 || v4 == 0;
        if (v8 < (unint64_t)v29 || !v31) {
          return 0;
        }
        uint64_t v32 = *v28;
        if (v32 > 0x1FFFFFFE) {
          return 0;
        }
        unint64_t v33 = 4 * v32 + 4;
        BOOL v16 = v7 > v33;
        unint64_t v34 = v7 - v33;
        if (!v16 || v34 < (unint64_t)v29) {
          return 0;
        }
        if (v32)
        {
          unint64_t v35 = 0;
          unint64_t v36 = v28 + 1;
          while ((sub_2BD080((int *)((char *)v36 + *v36), (uint64_t *)a2) & 1) != 0)
          {
            ++v35;
            ++v36;
            if (v35 >= *v28)
            {
              int v12 = *(_DWORD *)(a2 + 40) - 1;
              goto LABEL_61;
            }
          }
          return 0;
        }
      }
    }
  }
LABEL_61:
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

uint64_t sub_2BD5F8(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_82;
  }
  uint64_t v21 = v19[2];
  if (v19[2])
  {
    uint64_t v14 = 0;
    unsigned int v22 = &v3[v21];
    BOOL v24 = ((unint64_t)&v3[v21] & 3) == 0 || v4 == 0;
    if (v7 < (unint64_t)v22 || !v24) {
      return v14;
    }
    uint64_t v25 = *(unsigned int *)&v22[v2];
    if ((int)v25 < 1 || v6 - 1 < (unint64_t)&v22[v25]) {
      return 0;
    }
    uint64_t v14 = 0;
    BOOL v26 = (unsigned int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21));
    uint64_t v27 = (char *)v26 - v2;
    BOOL v28 = (((unint64_t)v26 - v2) & 3) == 0 || v4 == 0;
    BOOL v29 = v28;
    if (v7 < (unint64_t)v27 || !v29) {
      return v14;
    }
    uint64_t v30 = *v26;
    if (v30 > 0x7FFFFFFE) {
      return 0;
    }
    unint64_t v31 = v30 + 4;
    unint64_t v32 = (unint64_t)&v27[v30 + 4];
    BOOL v33 = v6 - 1 >= v32 && v6 > v31;
    BOOL v34 = v33 && v6 - v31 >= (unint64_t)v27;
    if (!v34 || *(unsigned char *)(v2 + v32)) {
      return 0;
    }
  }
  if (v20 < 7 || (uint64_t v35 = v19[3]) == 0)
  {
LABEL_82:
    *((_DWORD *)a2 + 10) = v10;
    return 1;
  }
  uint64_t v14 = 0;
  unint64_t v36 = (unint64_t)&v3[v35];
  BOOL v38 = (v36 & 3) == 0 || v4 == 0;
  if (v7 >= v36 && v38)
  {
    uint64_t v39 = *(unsigned int *)(v2 + v36);
    if ((int)v39 < 1 || v6 - 1 < v36 + v39) {
      return 0;
    }
    uint64_t v14 = 0;
    unint64_t v40 = (unsigned int *)((char *)a1 + v35 + *(unsigned int *)((char *)a1 + v35));
    BOOL v41 = (char *)v40 - v2;
    BOOL v42 = (((unint64_t)v40 - v2) & 3) == 0 || v4 == 0;
    BOOL v43 = v42;
    if (v7 >= (unint64_t)v41 && v43)
    {
      uint64_t v44 = *v40;
      if (v44 > 0x7FFFFFFE) {
        return 0;
      }
      uint64_t v14 = 0;
      unint64_t v45 = v44 + 4;
      unint64_t v46 = (unint64_t)&v41[v44 + 4];
      if (v6 - 1 < v46 || v6 <= v45 || v6 - v45 < (unint64_t)v41) {
        return v14;
      }
      if (*(unsigned char *)(v2 + v46)) {
        return 0;
      }
      goto LABEL_82;
    }
  }
  return v14;
}

uint64_t sub_2BD828(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  unsigned int v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_84;
  }
  uint64_t v22 = v20[2];
  if (v20[2])
  {
    uint64_t result = 0;
    uint64_t v23 = &v3[v22];
    BOOL v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v23 || !v25) {
      return result;
    }
    uint64_t v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26]) {
      return 0;
    }
    uint64_t result = 0;
    uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    BOOL v28 = (char *)v27 - v2;
    BOOL v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    BOOL v30 = v29;
    if (v8 < (unint64_t)v28 || !v30) {
      return result;
    }
    uint64_t v31 = *v27;
    if (v31 > 0x1FFFFFFE) {
      return 0;
    }
    unint64_t v32 = 4 * v31 + 4;
    BOOL v9 = v7 >= v32;
    unint64_t v33 = v7 - v32;
    if (v33 == 0 || !v9 || v33 < (unint64_t)v28) {
      return 0;
    }
  }
  if (v21 < 7 || (uint64_t v35 = v20[3]) == 0)
  {
LABEL_84:
    uint64_t result = sub_2A7CE0(a1, a2, 8u);
    if (result)
    {
      uint64_t v49 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v49 >= 9u && (uint64_t v50 = v49[4]) != 0) {
        uint64_t v51 = (unsigned int *)((char *)a1 + v50 + *(unsigned int *)((char *)a1 + v50));
      }
      else {
        uint64_t v51 = 0;
      }
      uint64_t result = sub_2A7D68(a2, v51);
      if (result)
      {
        uint64_t v52 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v52 >= 9u && (uint64_t v53 = v52[4]) != 0) {
          BOOL v54 = (int *)((char *)a1 + v53 + *(unsigned int *)((char *)a1 + v53));
        }
        else {
          BOOL v54 = 0;
        }
        uint64_t result = sub_2BDB98(a2, v54);
        if (result)
        {
          uint64_t result = sub_2A7CE0(a1, a2, 0xAu);
          if (result)
          {
            BOOL v55 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v55 < 0xBu
              || (uint64_t v56 = v55[5]) == 0
              || (uint64_t result = sub_2BDEC4((int *)((char *)a1 + v56 + *(unsigned int *)((char *)a1 + v56)), a2),
                  result))
            {
              --*(_DWORD *)(a2 + 40);
              return 1;
            }
          }
        }
      }
    }
    return result;
  }
  uint64_t result = 0;
  unint64_t v36 = (unint64_t)&v3[v35];
  BOOL v38 = (v36 & 3) == 0 || v4 == 0;
  if (v8 >= v36 && v38)
  {
    uint64_t v39 = *(unsigned int *)(v2 + v36);
    if ((int)v39 < 1 || v7 - 1 < v36 + v39) {
      return 0;
    }
    uint64_t result = 0;
    unint64_t v40 = (unsigned int *)((char *)a1 + v35 + *(unsigned int *)((char *)a1 + v35));
    BOOL v41 = (char *)v40 - v2;
    BOOL v42 = (v41 & 3) == 0 || v4 == 0;
    BOOL v43 = v42;
    if (v8 >= (unint64_t)v41 && v43)
    {
      uint64_t v44 = *v40;
      if (v44 > 0x1FFFFFFE) {
        return 0;
      }
      uint64_t result = 0;
      unint64_t v45 = 4 * v44 + 4;
      BOOL v15 = v7 > v45;
      unint64_t v46 = v7 - v45;
      if (v15 && v46 >= (unint64_t)v41)
      {
        if (v44)
        {
          unint64_t v47 = 0;
          uint64_t v48 = v40 + 1;
          while ((sub_2A7ECC((int *)((char *)v48 + *v48), (uint64_t *)a2) & 1) != 0)
          {
            ++v47;
            ++v48;
            if (v47 >= *v40) {
              goto LABEL_84;
            }
          }
          return 0;
        }
        goto LABEL_84;
      }
    }
  }
  return result;
}

BOOL sub_2BDB98(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    BOOL result = sub_2BDC24((int *)((char *)v5 + *v5), a1);
    if (!result) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

BOOL sub_2BDC24(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  unsigned int v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_79;
  }
  if (v20[2] && v7 - 1 < (unint64_t)&v3[v20[2]]) {
    return 0;
  }
  if (v21 < 7) {
    goto LABEL_79;
  }
  uint64_t v22 = v20[3];
  if (v20[3])
  {
    BOOL result = 0;
    uint64_t v23 = &v3[v22];
    BOOL v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v23 || !v25) {
      return result;
    }
    uint64_t v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26]) {
      return 0;
    }
    BOOL result = 0;
    uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    BOOL v28 = (char *)v27 - v2;
    BOOL v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    BOOL v30 = v29;
    if (v8 < (unint64_t)v28 || !v30) {
      return result;
    }
    uint64_t v31 = *v27;
    if (v31 > 0xFFFFFFE) {
      return 0;
    }
    BOOL result = 0;
    unint64_t v32 = (8 * v31) | 4;
    BOOL v9 = v7 >= v32;
    unint64_t v33 = v7 - v32;
    if (v33 == 0 || !v9 || v33 < (unint64_t)v28) {
      return result;
    }
  }
  if (v21 < 9 || (uint64_t v34 = v20[4]) == 0)
  {
LABEL_79:
    BOOL result = sub_2AFEE4(a1, a2, 0xAu, 4);
    if (result)
    {
      BOOL result = sub_2B0118(a1, a2, 0xCu, 4);
      if (result)
      {
        --*(_DWORD *)(a2 + 40);
        return 1;
      }
    }
    return result;
  }
  BOOL result = 0;
  unint64_t v35 = (unint64_t)&v3[v34];
  BOOL v37 = (v35 & 3) == 0 || v4 == 0;
  if (v8 >= v35 && v37)
  {
    uint64_t v38 = *(unsigned int *)(v2 + v35);
    if ((int)v38 < 1 || v7 - 1 < v35 + v38) {
      return 0;
    }
    BOOL result = 0;
    uint64_t v39 = (unsigned int *)((char *)a1 + v34 + *(unsigned int *)((char *)a1 + v34));
    unint64_t v40 = (char *)v39 - v2;
    BOOL v41 = (v40 & 3) == 0 || v4 == 0;
    BOOL v42 = v41;
    if (v8 >= (unint64_t)v40 && v42)
    {
      uint64_t v43 = *v39;
      if (v43 <= 0xFFFFFFE)
      {
        BOOL result = 0;
        unint64_t v44 = (8 * v43) | 4;
        BOOL v15 = v7 > v44;
        unint64_t v45 = v7 - v44;
        if (!v15 || v45 < (unint64_t)v40) {
          return result;
        }
        goto LABEL_79;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_2BDEC4(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v10 = *a1;
  int v11 = *(_DWORD *)(a2 + 40);
  unsigned int v12 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v11 + 1;
  *(_DWORD *)(a2 + 44) = v12;
  BOOL v13 = (v11 + 1) > *(_DWORD *)(a2 + 16) || v12 > *(_DWORD *)(a2 + 20);
  if (v13) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v10];
  if ((v3 - v10))
  {
    if (v4 || v6 - 2 < v14) {
      return 0;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v14);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v14) {
    return 0;
  }
  unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v19 = *v18;
  if (v19 >= 5)
  {
    if (v18[2] && v6 - 1 < (unint64_t)&v3[v18[2]]) {
      return 0;
    }
    if (v19 >= 7)
    {
      uint64_t v20 = v18[3];
      if (v18[3])
      {
        unsigned int v21 = &v3[v20];
        BOOL v22 = ((unint64_t)&v3[v20] & 3) == 0 || v4 == 0;
        BOOL v23 = v22;
        if (v7 < (unint64_t)v21 || !v23) {
          return 0;
        }
      }
      if (v19 >= 9)
      {
        uint64_t v24 = v18[4];
        if (v24)
        {
          unint64_t v25 = (unint64_t)&v3[v24];
          BOOL v27 = (v25 & 3) == 0 || v4 == 0;
          if (v7 < v25 || !v27) {
            return 0;
          }
          uint64_t v28 = *(unsigned int *)(v2 + v25);
          if ((int)v28 < 1 || v6 - 1 < v25 + v28) {
            return 0;
          }
          BOOL v29 = (unsigned int *)((char *)a1 + v24 + *(unsigned int *)((char *)a1 + v24));
          BOOL v30 = (char *)v29 - v2;
          BOOL v32 = (v30 & 3) == 0 || v4 == 0;
          if (v7 < (unint64_t)v30 || !v32) {
            return 0;
          }
          uint64_t v39 = a2;
          uint64_t v33 = *v29;
          if (v33 > 0x1FFFFFFE) {
            return 0;
          }
          unint64_t v34 = 4 * v33 + 4;
          BOOL v13 = v6 > v34;
          unint64_t v35 = v6 - v34;
          if (!v13 || v35 < (unint64_t)v30) {
            return 0;
          }
          if (v33)
          {
            unint64_t v36 = 0;
            BOOL v37 = v29 + 1;
            while (1)
            {
              uint64_t v38 = v37;
              if (!sub_2BE128((int *)((char *)v37 + *v37), a2)) {
                return 0;
              }
              ++v36;
              BOOL v37 = v38 + 1;
              a2 = v39;
              if (v36 >= *v29)
              {
                int v11 = *(_DWORD *)(v39 + 40) - 1;
                break;
              }
            }
          }
        }
      }
    }
  }
  *(_DWORD *)(a2 + 40) = v11;
  return 1;
}

BOOL sub_2BE128(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  if (v7 < 5 || v8 < (unint64_t)v3) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v15 = v7 > v17;
  unint64_t v18 = v7 - v17;
  if (!v15 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_78;
  }
  uint64_t v22 = v20[2];
  if (!v20[2]
    || ((result = 0, BOOL v23 = &v3[v22], ((unint64_t)&v3[v22] & 3) != 0) ? (v24 = v4 == 0) : (v24 = 1),
        !v24 ? (int v25 = 0) : (int v25 = 1),
        v8 >= (unint64_t)v23 && v25))
  {
    if (v21 < 7) {
      goto LABEL_78;
    }
    uint64_t v26 = v20[3];
    if (!v20[3]
      || ((result = 0, BOOL v27 = &v3[v26], ((unint64_t)&v3[v26] & 3) != 0) ? (v28 = v4 == 0) : (v28 = 1),
          !v28 ? (int v29 = 0) : (int v29 = 1),
          v8 >= (unint64_t)v27 && v29))
    {
      if (v21 < 9) {
        goto LABEL_78;
      }
      uint64_t v30 = v20[4];
      if (!v20[4]
        || ((result = 0, uint64_t v31 = &v3[v30], ((unint64_t)&v3[v30] & 3) != 0) ? (v32 = v4 == 0) : (v32 = 1),
            !v32 ? (int v33 = 0) : (int v33 = 1),
            v8 >= (unint64_t)v31 && v33))
      {
        if (v21 < 0xB) {
          goto LABEL_78;
        }
        uint64_t v34 = v20[5];
        if (!v20[5]
          || ((result = 0, unint64_t v35 = &v3[v34], ((unint64_t)&v3[v34] & 3) != 0) ? (v36 = v4 == 0) : (v36 = 1),
              !v36 ? (int v37 = 0) : (int v37 = 1),
              v8 >= (unint64_t)v35 && v37))
        {
          if (v21 < 0xD
            || (uint64_t v38 = v20[6]) == 0
            || ((BOOL result = 0, v39 = (unint64_t)&v3[v38], (v39 & 3) != 0) ? (v40 = v4 == 0) : (v40 = 1),
                !v40 ? (int v41 = 0) : (int v41 = 1),
                v8 >= v39 && v41))
          {
LABEL_78:
            BOOL result = sub_2AFEE4(a1, a2, 0xEu, 8);
            if (result)
            {
              BOOL result = sub_2B16B4(a1, a2, 0x10u, 4);
              if (result)
              {
                BOOL result = sub_2B16B4(a1, a2, 0x12u, 4);
                if (result)
                {
                  BOOL result = sub_2AFEE4(a1, a2, 0x14u, 8);
                  if (result)
                  {
                    BOOL result = sub_2AFEE4(a1, a2, 0x16u, 8);
                    if (result)
                    {
                      BOOL result = sub_2AFEE4(a1, a2, 0x18u, 8);
                      if (result)
                      {
                        BOOL result = sub_2AFEE4(a1, a2, 0x1Au, 8);
                        if (result)
                        {
                          --*(_DWORD *)(a2 + 40);
                          return 1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2BE3C8(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 40);
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  if (v12 + 1 > v15 || v13 > v14) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  unsigned int v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1
        || v7 - 1 < v23 + v26
        || !sub_2B0928((int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22)), a2))
      {
        return 0;
      }
      int v12 = *(_DWORD *)(a2 + 40) - 1;
    }
  }
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

uint64_t sub_2BE53C(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  unsigned int v12 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  BOOL v14 = v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20);
  if (v14) {
    return 0;
  }
  unint64_t v15 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v15) {
      return 0;
    }
  }
  else if (v7 - 2 < v15)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v16;
  unint64_t v17 = v7 - v16;
  if (v17 == 0 || !v9 || v17 < v15) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_79;
  }
  if (v19[2] && v7 - 1 < (unint64_t)&v3[v19[2]]) {
    return 0;
  }
  if (v20 < 7) {
    goto LABEL_79;
  }
  uint64_t v21 = v19[3];
  if (v19[3])
  {
    uint64_t v22 = &v3[v21];
    BOOL v24 = ((unint64_t)&v3[v21] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v22 || !v24) {
      return 0;
    }
    uint64_t v25 = *(unsigned int *)&v22[v2];
    if ((int)v25 < 1 || v7 - 1 < (unint64_t)&v22[v25]) {
      return 0;
    }
    uint64_t v26 = (unsigned int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21));
    BOOL v27 = (char *)v26 - v2;
    BOOL v29 = (((unint64_t)v26 - v2) & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v27 || !v29) {
      return 0;
    }
    uint64_t v30 = *v26;
    if (v30 > 0x7FFFFFE) {
      return 0;
    }
    unint64_t v31 = (16 * v30) | 4;
    BOOL v9 = v7 >= v31;
    unint64_t v32 = v7 - v31;
    if (v32 == 0 || !v9 || v32 < (unint64_t)v27) {
      return 0;
    }
  }
  if (v20 < 9 || (uint64_t v33 = v19[4]) == 0)
  {
LABEL_79:
    uint64_t v38 = 0;
LABEL_80:
    if (sub_2BE7C8((uint64_t *)a2, v38))
    {
      --*(_DWORD *)(a2 + 40);
      return 1;
    }
    return 0;
  }
  unint64_t v34 = (unint64_t)&v3[v33];
  BOOL v36 = (v34 & 3) == 0 || v4 == 0;
  if (v8 < v34 || !v36) {
    return 0;
  }
  uint64_t v37 = *(unsigned int *)(v2 + v34);
  if ((int)v37 >= 1 && v7 - 1 >= v34 + v37)
  {
    uint64_t v38 = (int *)((char *)a1 + v33 + *(unsigned int *)((char *)a1 + v33));
    unint64_t v39 = (char *)v38 - v2;
    BOOL v41 = (v39 & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v39 || !v41) {
      return 0;
    }
    uint64_t v42 = *v38;
    if (v42 <= 0x1FFFFFFE)
    {
      unint64_t v43 = 4 * v42 + 4;
      BOOL v14 = v7 > v43;
      unint64_t v44 = v7 - v43;
      if (!v14 || v44 < (unint64_t)v39) {
        return 0;
      }
      goto LABEL_80;
    }
  }
  return 0;
}

uint64_t sub_2BE7C8(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2BE854((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2BE854(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v19 = *v18;
  if (v19 < 5) {
    return 0;
  }
  uint64_t v20 = v18[2];
  if (!v18[2]) {
    return 0;
  }
  uint64_t v14 = 0;
  uint64_t v21 = &v3[v20];
  BOOL v23 = ((unint64_t)&v3[v20] & 3) == 0 || v4 == 0;
  if (v7 >= (unint64_t)v21 && v23)
  {
    uint64_t v24 = *(unsigned int *)&v21[v2];
    if ((int)v24 < 1 || v6 - 1 < (unint64_t)&v21[v24]) {
      return 0;
    }
    uint64_t v14 = 0;
    uint64_t v25 = (unsigned int *)((char *)a1 + v20 + *(unsigned int *)((char *)a1 + v20));
    uint64_t v26 = (char *)v25 - v2;
    BOOL v27 = (((unint64_t)v25 - v2) & 3) == 0 || v4 == 0;
    BOOL v28 = v27;
    if (v7 >= (unint64_t)v26 && v28)
    {
      uint64_t v29 = *v25;
      if (v29 > 0x7FFFFFFE) {
        return 0;
      }
      unint64_t v30 = v29 + 4;
      unint64_t v31 = (unint64_t)&v26[v29 + 4];
      BOOL v32 = v6 - 1 >= v31 && v6 > v30;
      BOOL v33 = v32 && v6 - v30 >= (unint64_t)v26;
      if (!v33 || *(unsigned char *)(v2 + v31)) {
        return 0;
      }
      if (v19 < 7 || !v18[3]) {
        goto LABEL_64;
      }
      unint64_t v35 = (unint64_t)&v3[v18[3]];
      if ((v35 & 7) != 0 && v4) {
        return 0;
      }
      uint64_t v14 = 0;
      if (v6 >= 9 && v6 - 8 >= v35)
      {
LABEL_64:
        *((_DWORD *)a2 + 10) = v10;
        return 1;
      }
    }
  }
  return v14;
}

uint64_t sub_2BEA04(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  uint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 >= 5u)
  {
    uint64_t v23 = v22[2];
    if (v23)
    {
      uint64_t result = 0;
      unint64_t v24 = (unint64_t)&v3[v23];
      BOOL v26 = (v24 & 3) == 0 || v4 == 0;
      if (v8 < v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
        return 0;
      }
      uint64_t result = 0;
      BOOL v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
      uint64_t v29 = (char *)v28 - v2;
      BOOL v30 = (v29 & 3) == 0 || v4 == 0;
      BOOL v31 = v30;
      if (v8 < (unint64_t)v29 || !v31) {
        return result;
      }
      uint64_t v32 = *v28;
      if (v32 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v33 = 4 * v32 + 4;
      BOOL v15 = v7 > v33;
      unint64_t v34 = v7 - v33;
      if (!v15 || v34 < (unint64_t)v29) {
        return 0;
      }
      if (v32)
      {
        unint64_t v36 = 0;
        uint64_t v37 = v28 + 1;
        while ((sub_2C0530((int *)((char *)v37 + *v37), a2) & 1) != 0)
        {
          ++v36;
          ++v37;
          if (v36 >= *v28)
          {
            uint64_t v21 = -(uint64_t)*a1;
            goto LABEL_61;
          }
        }
        return 0;
      }
    }
  }
LABEL_61:
  uint64_t v38 = (char *)a1 + v21;
  if (*(unsigned __int16 *)((char *)a1 + v21) >= 7u && (uint64_t v39 = *((unsigned __int16 *)v38 + 3), *((_WORD *)v38 + 3)))
  {
    uint64_t v40 = *(void *)a2;
    unint64_t v41 = (unint64_t)a1 + v39 - *(void *)a2;
    int v42 = *(unsigned __int8 *)(a2 + 24);
    uint64_t result = 0;
    if ((v41 & 3) != 0 && v42 != 0) {
      return result;
    }
    unint64_t v44 = *(void *)(a2 + 8);
    if (v44 < 5 || v44 - 4 < v41) {
      return result;
    }
    uint64_t v45 = *(unsigned int *)(v40 + v41);
    if ((int)v45 < 1 || v44 - 1 < v41 + v45) {
      return 0;
    }
    unint64_t v46 = (int *)((char *)a1 + v39 + *(unsigned int *)((char *)a1 + v39));
    unint64_t v47 = (unint64_t)v46 - v40;
    BOOL v48 = (((unint64_t)v46 - v40) & 3) == 0 || v42 == 0;
    BOOL v49 = v48;
    if (v44 - 4 < v47 || !v49) {
      return 0;
    }
    uint64_t v51 = *v46;
    if (v51 > 0x1FFFFFFE) {
      return 0;
    }
    unint64_t v52 = 4 * v51 + 4;
    BOOL v15 = v44 > v52;
    unint64_t v53 = v44 - v52;
    if (!v15 || v53 < v47) {
      return 0;
    }
  }
  else
  {
    unint64_t v46 = 0;
  }
  uint64_t result = sub_2BF928((uint64_t *)a2, v46);
  if (result)
  {
    uint64_t result = sub_2A7CE0(a1, a2, 8u);
    if (result)
    {
      BOOL v55 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v55 >= 9u && (uint64_t v56 = v55[4]) != 0) {
        uint64_t v57 = (unsigned int *)((char *)a1 + v56 + *(unsigned int *)((char *)a1 + v56));
      }
      else {
        uint64_t v57 = 0;
      }
      uint64_t result = sub_2A7D68(a2, v57);
      if (result)
      {
        uint64_t v58 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v58 >= 9u && (uint64_t v59 = v58[4]) != 0) {
          unint64_t v60 = (int *)((char *)a1 + v59 + *(unsigned int *)((char *)a1 + v59));
        }
        else {
          unint64_t v60 = 0;
        }
        uint64_t result = sub_2BF9B4((uint64_t *)a2, v60);
        if (result)
        {
          uint64_t result = sub_2A7CE0(a1, a2, 0xAu);
          if (result)
          {
            uint64_t v61 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v61 >= 0xBu && (uint64_t v62 = v61[5]) != 0) {
              BOOL v63 = (unsigned int *)((char *)a1 + v62 + *(unsigned int *)((char *)a1 + v62));
            }
            else {
              BOOL v63 = 0;
            }
            uint64_t result = sub_2A7D68(a2, v63);
            if (result)
            {
              BOOL v64 = (unsigned __int16 *)((char *)a1 - *a1);
              if (*v64 >= 0xBu && (uint64_t v65 = v64[5]) != 0) {
                unint64_t v66 = (int *)((char *)a1 + v65 + *(unsigned int *)((char *)a1 + v65));
              }
              else {
                unint64_t v66 = 0;
              }
              uint64_t result = sub_2BFA40(a2, v66);
              if (result)
              {
                uint64_t result = sub_2A7CE0(a1, a2, 0xCu);
                if (result)
                {
                  uint64_t v67 = (unsigned __int16 *)((char *)a1 - *a1);
                  if (*v67 < 0xDu
                    || (uint64_t v68 = v67[6]) == 0
                    || (uint64_t result = sub_2C24A4((int *)((char *)a1 + v68 + *(unsigned int *)((char *)a1 + v68)), a2),
                        result))
                  {
                    uint64_t result = sub_2A7CE0(a1, a2, 0xEu);
                    if (result)
                    {
                      unint64_t v69 = (unsigned __int16 *)((char *)a1 - *a1);
                      if (*v69 >= 0xFu && (uint64_t v70 = v69[7]) != 0) {
                        unint64_t v71 = (unsigned int *)((char *)a1 + v70 + *(unsigned int *)((char *)a1 + v70));
                      }
                      else {
                        unint64_t v71 = 0;
                      }
                      uint64_t result = sub_2A7D68(a2, v71);
                      if (result)
                      {
                        uint64_t v72 = (unsigned __int16 *)((char *)a1 - *a1);
                        if (*v72 >= 0xFu && (uint64_t v73 = v72[7]) != 0) {
                          unint64_t v74 = (int *)((char *)a1 + v73 + *(unsigned int *)((char *)a1 + v73));
                        }
                        else {
                          unint64_t v74 = 0;
                        }
                        uint64_t result = sub_2BFACC(a2, v74);
                        if (result)
                        {
                          uint64_t result = sub_2A7CE0(a1, a2, 0x10u);
                          if (result)
                          {
                            uint64_t v75 = (unsigned __int16 *)((char *)a1 - *a1);
                            if (*v75 >= 0x11u && (uint64_t v76 = v75[8]) != 0) {
                              uint64_t v77 = (unsigned int *)((char *)a1 + v76 + *(unsigned int *)((char *)a1 + v76));
                            }
                            else {
                              uint64_t v77 = 0;
                            }
                            uint64_t result = sub_2A7D68(a2, v77);
                            if (result)
                            {
                              unint64_t v78 = (unsigned __int16 *)((char *)a1 - *a1);
                              if (*v78 >= 0x11u && (uint64_t v79 = v78[8]) != 0) {
                                uint64_t v80 = (int *)((char *)a1 + v79 + *(unsigned int *)((char *)a1 + v79));
                              }
                              else {
                                uint64_t v80 = 0;
                              }
                              uint64_t result = sub_2BFB58((uint64_t *)a2, v80);
                              if (result)
                              {
                                uint64_t result = sub_2A7CE0(a1, a2, 0x12u);
                                if (result)
                                {
                                  uint64_t v81 = (unsigned __int16 *)((char *)a1 - *a1);
                                  if (*v81 >= 0x13u && (uint64_t v82 = v81[9]) != 0) {
                                    uint64_t v83 = (unsigned int *)((char *)a1 + v82 + *(unsigned int *)((char *)a1 + v82));
                                  }
                                  else {
                                    uint64_t v83 = 0;
                                  }
                                  uint64_t result = sub_2A7D68(a2, v83);
                                  if (result)
                                  {
                                    uint64_t v84 = (unsigned __int16 *)((char *)a1 - *a1);
                                    if (*v84 >= 0x13u && (uint64_t v85 = v84[9]) != 0) {
                                      uint64_t v86 = (int *)((char *)a1 + v85 + *(unsigned int *)((char *)a1 + v85));
                                    }
                                    else {
                                      uint64_t v86 = 0;
                                    }
                                    uint64_t result = sub_2BFBE4(a2, v86);
                                    if (result)
                                    {
                                      uint64_t result = sub_2A7CE0(a1, a2, 0x14u);
                                      if (result)
                                      {
                                        unint64_t v87 = (unsigned __int16 *)((char *)a1 - *a1);
                                        if (*v87 >= 0x15u && (uint64_t v88 = v87[10]) != 0) {
                                          uint64_t v89 = (unsigned int *)((char *)a1 + v88 + *(unsigned int *)((char *)a1 + v88));
                                        }
                                        else {
                                          uint64_t v89 = 0;
                                        }
                                        uint64_t result = sub_2A7D68(a2, v89);
                                        if (result)
                                        {
                                          int64_t v90 = (unsigned __int16 *)((char *)a1 - *a1);
                                          if (*v90 >= 0x15u && (uint64_t v91 = v90[10]) != 0) {
                                            uint64_t v92 = (int *)((char *)a1 + v91 + *(unsigned int *)((char *)a1 + v91));
                                          }
                                          else {
                                            uint64_t v92 = 0;
                                          }
                                          uint64_t result = sub_2BFC70(a2, v92);
                                          if (result)
                                          {
                                            uint64_t result = sub_2A7CE0(a1, a2, 0x16u);
                                            if (result)
                                            {
                                              uint64_t v93 = (unsigned __int16 *)((char *)a1 - *a1);
                                              if (*v93 >= 0x17u && (uint64_t v94 = v93[11]) != 0) {
                                                unsigned int v95 = (unsigned int *)((char *)a1
                                              }
                                                                     + v94
                                                                     + *(unsigned int *)((char *)a1 + v94));
                                              else {
                                                unsigned int v95 = 0;
                                              }
                                              uint64_t result = sub_2A7D68(a2, v95);
                                              if (result)
                                              {
                                                unint64_t v96 = (unsigned __int16 *)((char *)a1 - *a1);
                                                if (*v96 >= 0x17u && (uint64_t v97 = v96[11]) != 0) {
                                                  uint64_t v98 = (int *)((char *)a1 + v97 + *(unsigned int *)((char *)a1 + v97));
                                                }
                                                else {
                                                  uint64_t v98 = 0;
                                                }
                                                uint64_t result = sub_2BFCFC(a2, v98);
                                                if (result)
                                                {
                                                  uint64_t result = sub_2A7CE0(a1, a2, 0x18u);
                                                  if (result)
                                                  {
                                                    unint64_t v99 = (unsigned __int16 *)((char *)a1 - *a1);
                                                    if (*v99 >= 0x19u && (uint64_t v100 = v99[12]) != 0) {
                                                      uint64_t v101 = (unsigned int *)((char *)a1
                                                    }
                                                                            + v100
                                                                            + *(unsigned int *)((char *)a1 + v100));
                                                    else {
                                                      uint64_t v101 = 0;
                                                    }
                                                    uint64_t result = sub_2A7D68(a2, v101);
                                                    if (result)
                                                    {
                                                      uint64_t v102 = (unsigned __int16 *)((char *)a1 - *a1);
                                                      if (*v102 >= 0x19u && (uint64_t v103 = v102[12]) != 0) {
                                                        uint64_t v104 = (int *)((char *)a1
                                                      }
                                                                     + v103
                                                                     + *(unsigned int *)((char *)a1 + v103));
                                                      else {
                                                        uint64_t v104 = 0;
                                                      }
                                                      uint64_t result = sub_2BFD88(a2, v104);
                                                      if (result)
                                                      {
                                                        uint64_t result = sub_2A7CE0(a1, a2, 0x1Au);
                                                        if (result)
                                                        {
                                                          long long v105 = (unsigned __int16 *)((char *)a1 - *a1);
                                                          if (*v105 >= 0x1Bu && (uint64_t v106 = v105[13]) != 0) {
                                                            unsigned int v107 = (unsigned int *)((char *)a1
                                                          }
                                                                                  + v106
                                                                                  + *(unsigned int *)((char *)a1 + v106));
                                                          else {
                                                            unsigned int v107 = 0;
                                                          }
                                                          uint64_t result = sub_2A7D68(a2, v107);
                                                          if (result)
                                                          {
                                                            unint64_t v108 = (unsigned __int16 *)((char *)a1 - *a1);
                                                            if (*v108 >= 0x1Bu && (uint64_t v109 = v108[13]) != 0) {
                                                              unint64_t v110 = (int *)((char *)a1
                                                            }
                                                                           + v109
                                                                           + *(unsigned int *)((char *)a1 + v109));
                                                            else {
                                                              unint64_t v110 = 0;
                                                            }
                                                            uint64_t result = sub_2BFE14(a2, v110);
                                                            if (result)
                                                            {
                                                              uint64_t result = sub_2A7CE0(a1, a2, 0x1Cu);
                                                              if (result)
                                                              {
                                                                uint64_t v111 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                if (*v111 >= 0x1Du && (uint64_t v112 = v111[14]) != 0) {
                                                                  long long v113 = (unsigned int *)((char *)a1
                                                                }
                                                                                        + v112
                                                                                        + *(unsigned int *)((char *)a1 + v112));
                                                                else {
                                                                  long long v113 = 0;
                                                                }
                                                                uint64_t result = sub_2A7D68(a2, v113);
                                                                if (result)
                                                                {
                                                                  uint64_t v114 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                  if (*v114 >= 0x1Du && (uint64_t v115 = v114[14]) != 0) {
                                                                    uint64_t v116 = (int *)((char *)a1
                                                                  }
                                                                                 + v115
                                                                                 + *(unsigned int *)((char *)a1 + v115));
                                                                  else {
                                                                    uint64_t v116 = 0;
                                                                  }
                                                                  uint64_t result = sub_2BFEA0(a2, v116);
                                                                  if (result)
                                                                  {
                                                                    uint64_t result = sub_2A7CE0(a1, a2, 0x1Eu);
                                                                    if (result)
                                                                    {
                                                                      uint64_t v117 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                      if (*v117 >= 0x1Fu && (uint64_t v118 = v117[15]) != 0) {
                                                                        uint64_t v119 = (unsigned int *)((char *)a1
                                                                      }
                                                                                              + v118
                                                                                              + *(unsigned int *)((char *)a1 + v118));
                                                                      else {
                                                                        uint64_t v119 = 0;
                                                                      }
                                                                      uint64_t result = sub_2A7D68(a2, v119);
                                                                      if (result)
                                                                      {
                                                                        uint64_t v120 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                        if (*v120 >= 0x1Fu && (uint64_t v121 = v120[15]) != 0) {
                                                                          uint64_t v122 = (int *)((char *)a1
                                                                        }
                                                                                       + v121
                                                                                       + *(unsigned int *)((char *)a1 + v121));
                                                                        else {
                                                                          uint64_t v122 = 0;
                                                                        }
                                                                        uint64_t result = sub_2BFF2C(a2, v122);
                                                                        if (result)
                                                                        {
                                                                          uint64_t result = sub_2A7CE0(a1, a2, 0x20u);
                                                                          if (result)
                                                                          {
                                                                            uint64_t v123 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                            if (*v123 >= 0x21u
                                                                              && (uint64_t v124 = v123[16]) != 0)
                                                                            {
                                                                              long long v125 = (unsigned int *)((char *)a1 + v124 + *(unsigned int *)((char *)a1 + v124));
                                                                            }
                                                                            else
                                                                            {
                                                                              long long v125 = 0;
                                                                            }
                                                                            uint64_t result = sub_2A7D68(a2, v125);
                                                                            if (result)
                                                                            {
                                                                              uint64_t v126 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                              if (*v126 >= 0x21u
                                                                                && (uint64_t v127 = v126[16]) != 0)
                                                                              {
                                                                                int64_t v128 = (int *)((char *)a1
                                                                                             + v127
                                                                                             + *(unsigned int *)((char *)a1 + v127));
                                                                              }
                                                                              else
                                                                              {
                                                                                int64_t v128 = 0;
                                                                              }
                                                                              uint64_t result = sub_2BFFB8((uint64_t *)a2, v128);
                                                                              if (result)
                                                                              {
                                                                                uint64_t result = sub_2A7CE0(a1, a2, 0x22u);
                                                                                if (result)
                                                                                {
                                                                                  long long v129 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                  if (*v129 >= 0x23u
                                                                                    && (uint64_t v130 = v129[17]) != 0)
                                                                                  {
                                                                                    uint64_t v131 = (unsigned int *)((char *)a1 + v130 + *(unsigned int *)((char *)a1 + v130));
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    uint64_t v131 = 0;
                                                                                  }
                                                                                  uint64_t result = sub_2A7D68(a2, v131);
                                                                                  if (result)
                                                                                  {
                                                                                    uint64_t v132 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                    if (*v132 >= 0x23u
                                                                                      && (uint64_t v133 = v132[17]) != 0)
                                                                                    {
                                                                                      int64_t v134 = (int *)((char *)a1 + v133 + *(unsigned int *)((char *)a1 + v133));
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      int64_t v134 = 0;
                                                                                    }
                                                                                    uint64_t result = sub_2C0044(a2, v134);
                                                                                    if (result)
                                                                                    {
                                                                                      uint64_t result = sub_2A7CE0(a1, a2, 0x24u);
                                                                                      if (result)
                                                                                      {
                                                                                        unint64_t v135 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                        if (*v135 >= 0x25u
                                                                                          && (uint64_t v136 = v135[18]) != 0)
                                                                                        {
                                                                                          uint64_t v137 = (unsigned int *)((char *)a1 + v136 + *(unsigned int *)((char *)a1 + v136));
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          uint64_t v137 = 0;
                                                                                        }
                                                                                        uint64_t result = sub_2A7D68(a2, v137);
                                                                                        if (result)
                                                                                        {
                                                                                          uint64_t v138 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                          if (*v138 >= 0x25u
                                                                                            && (uint64_t v139 = v138[18]) != 0)
                                                                                          {
                                                                                            uint64_t v140 = (int *)((char *)a1 + v139 + *(unsigned int *)((char *)a1 + v139));
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            uint64_t v140 = 0;
                                                                                          }
                                                                                          uint64_t result = sub_2C00D0(a2, v140);
                                                                                          if (result)
                                                                                          {
                                                                                            uint64_t result = sub_2A7CE0(a1, a2, 0x26u);
                                                                                            if (result)
                                                                                            {
                                                                                              uint64_t v141 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                              if (*v141 >= 0x27u
                                                                                                && (uint64_t v142 = v141[19]) != 0)
                                                                                              {
                                                                                                uint64_t v143 = (unsigned int *)((char *)a1 + v142 + *(unsigned int *)((char *)a1 + v142));
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                uint64_t v143 = 0;
                                                                                              }
                                                                                              uint64_t result = sub_2A7D68(a2, v143);
                                                                                              if (result)
                                                                                              {
                                                                                                uint64_t v144 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                                if (*v144 >= 0x27u && (uint64_t v145 = v144[19]) != 0) {
                                                                                                  long long v146 = (int *)((char *)a1 + v145 + *(unsigned int *)((char *)a1 + v145));
                                                                                                }
                                                                                                else {
                                                                                                  long long v146 = 0;
                                                                                                }
                                                                                                uint64_t result = sub_2C015C(a2, v146);
                                                                                                if (result)
                                                                                                {
                                                                                                  uint64_t result = sub_2A7CE0(a1, a2, 0x28u);
                                                                                                  if (result)
                                                                                                  {
                                                                                                    uint64_t v147 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                                    if (*v147 >= 0x29u && (uint64_t v148 = v147[20]) != 0) {
                                                                                                      uint64_t v149 = (unsigned int *)((char *)a1 + v148 + *(unsigned int *)((char *)a1 + v148));
                                                                                                    }
                                                                                                    else {
                                                                                                      uint64_t v149 = 0;
                                                                                                    }
                                                                                                    uint64_t result = sub_2A7D68(a2, v149);
                                                                                                    if (result)
                                                                                                    {
                                                                                                      long long v150 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                                      if (*v150 >= 0x29u && (uint64_t v151 = v150[20]) != 0) {
                                                                                                        long long v152 = (int *)((char *)a1 + v151 + *(unsigned int *)((char *)a1 + v151));
                                                                                                      }
                                                                                                      else {
                                                                                                        long long v152 = 0;
                                                                                                      }
                                                                                                      uint64_t result = sub_2C01E8((uint64_t *)a2, v152);
                                                                                                      if (result)
                                                                                                      {
                                                                                                        uint64_t result = sub_2A7CE0(a1, a2, 0x2Au);
                                                                                                        if (result)
                                                                                                        {
                                                                                                          long long v153 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                                          if (*v153 < 0x2Bu || (v154 = v153[21]) == 0 || (uint64_t result = sub_2C8008((int *)((char *)a1 + v154 + *(unsigned int *)((char *)a1 + v154)), a2), result))
                                                                                                          {
                                                                                                            uint64_t result = sub_2A7CE0(a1, a2, 0x2Cu);
                                                                                                            if (result)
                                                                                                            {
                                                                                                              long long v155 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                                              if (*v155 >= 0x2Du && (uint64_t v156 = v155[22]) != 0) {
                                                                                                                long long v157 = (unsigned int *)((char *)a1 + v156 + *(unsigned int *)((char *)a1 + v156));
                                                                                                              }
                                                                                                              else {
                                                                                                                long long v157 = 0;
                                                                                                              }
                                                                                                              uint64_t result = sub_2A7D68(a2, v157);
                                                                                                              if (result)
                                                                                                              {
                                                                                                                long long v158 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                                                if (*v158 >= 0x2Du && (uint64_t v159 = v158[22]) != 0) {
                                                                                                                  v160 = (int *)((char *)a1 + v159 + *(unsigned int *)((char *)a1 + v159));
                                                                                                                }
                                                                                                                else {
                                                                                                                  v160 = 0;
                                                                                                                }
                                                                                                                uint64_t result = sub_2C0274(a2, v160);
                                                                                                                if (result)
                                                                                                                {
                                                                                                                  uint64_t result = sub_2A7CE0(a1, a2, 0x2Eu);
                                                                                                                  if (result)
                                                                                                                  {
                                                                                                                    v161 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                                                    if (*v161 >= 0x2Fu && (uint64_t v162 = v161[23]) != 0) {
                                                                                                                      v163 = (unsigned int *)((char *)a1 + v162 + *(unsigned int *)((char *)a1 + v162));
                                                                                                                    }
                                                                                                                    else {
                                                                                                                      v163 = 0;
                                                                                                                    }
                                                                                                                    uint64_t result = sub_2A7D68(a2, v163);
                                                                                                                    if (result)
                                                                                                                    {
                                                                                                                      v164 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                                                      if (*v164 >= 0x2Fu && (uint64_t v165 = v164[23]) != 0) {
                                                                                                                        v166 = (int *)((char *)a1 + v165 + *(unsigned int *)((char *)a1 + v165));
                                                                                                                      }
                                                                                                                      else {
                                                                                                                        v166 = 0;
                                                                                                                      }
                                                                                                                      uint64_t result = sub_2C0300(a2, v166);
                                                                                                                      if (result)
                                                                                                                      {
                                                                                                                        uint64_t result = sub_2A7CE0(a1, a2, 0x30u);
                                                                                                                        if (result)
                                                                                                                        {
                                                                                                                          v167 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                                                          if (*v167 >= 0x31u && (uint64_t v168 = v167[24]) != 0) {
                                                                                                                            v169 = (unsigned int *)((char *)a1 + v168 + *(unsigned int *)((char *)a1 + v168));
                                                                                                                          }
                                                                                                                          else {
                                                                                                                            v169 = 0;
                                                                                                                          }
                                                                                                                          uint64_t result = sub_2A7D68(a2, v169);
                                                                                                                          if (result)
                                                                                                                          {
                                                                                                                            v170 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                                                            if (*v170 >= 0x31u && (uint64_t v171 = v170[24]) != 0) {
                                                                                                                              v172 = (int *)((char *)a1 + v171 + *(unsigned int *)((char *)a1 + v171));
                                                                                                                            }
                                                                                                                            else {
                                                                                                                              v172 = 0;
                                                                                                                            }
                                                                                                                            uint64_t result = sub_2C038C(a2, v172);
                                                                                                                            if (result)
                                                                                                                            {
                                                                                                                              uint64_t result = sub_2A7CE0(a1, a2, 0x32u);
                                                                                                                              if (result)
                                                                                                                              {
                                                                                                                                v173 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                                                                if (*v173 >= 0x33u && (uint64_t v174 = v173[25]) != 0) {
                                                                                                                                  v175 = (unsigned int *)((char *)a1 + v174 + *(unsigned int *)((char *)a1 + v174));
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                  v175 = 0;
                                                                                                                                }
                                                                                                                                uint64_t result = sub_2A7D68(a2, v175);
                                                                                                                                if (result)
                                                                                                                                {
                                                                                                                                  v176 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                                                                  if (*v176 >= 0x33u && (uint64_t v177 = v176[25]) != 0) {
                                                                                                                                    v178 = (int *)((char *)a1 + v177 + *(unsigned int *)((char *)a1 + v177));
                                                                                                                                  }
                                                                                                                                  else {
                                                                                                                                    v178 = 0;
                                                                                                                                  }
                                                                                                                                  uint64_t result = sub_2C0418((uint64_t *)a2, v178);
                                                                                                                                  if (result)
                                                                                                                                  {
                                                                                                                                    uint64_t result = sub_2A7CE0(a1, a2, 0x34u);
                                                                                                                                    if (result)
                                                                                                                                    {
                                                                                                                                      v179 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                                                                      if (*v179 >= 0x35u && (uint64_t v180 = v179[26]) != 0) {
                                                                                                                                        v181 = (unsigned int *)((char *)a1 + v180 + *(unsigned int *)((char *)a1 + v180));
                                                                                                                                      }
                                                                                                                                      else {
                                                                                                                                        v181 = 0;
                                                                                                                                      }
                                                                                                                                      uint64_t result = sub_2A7D68(a2, v181);
                                                                                                                                      if (result)
                                                                                                                                      {
                                                                                                                                        v182 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                                                                        if (*v182 >= 0x35u && (uint64_t v183 = v182[26]) != 0) {
                                                                                                                                          v184 = (int *)((char *)a1 + v183 + *(unsigned int *)((char *)a1 + v183));
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                          v184 = 0;
                                                                                                                                        }
                                                                                                                                        uint64_t result = sub_2C04A4(a2, v184);
                                                                                                                                        if (result)
                                                                                                                                        {
                                                                                                                                          v185 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                                                                          if (*v185 < 0x37u || (v186 = v185[27]) == 0 || (uint64_t result = 0, v187 = *(void *)(a2 + 8), v187 >= 2) && v187 - 1 >= (unint64_t)a1 + v186 - *(void *)a2)
                                                                                                                                          {
                                                                                                                                            --*(_DWORD *)(a2 + 40);
                                                                                                                                            return 1;
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2BF928(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C15F8((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2BF9B4(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C1734((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2BFA40(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C18F0((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2BFACC(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C2728((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2BFB58(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C3A24((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2BFBE4(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C3C04((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2BFC70(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C4084((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2BFCFC(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C42D8((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2BFD88(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C444C((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2BFE14(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C528C((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2BFEA0(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C5524((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2BFF2C(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C625C((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2BFFB8(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C6870((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2C0044(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C6A1C((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2C00D0(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C6EF4((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2C015C(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C78AC((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2C01E8(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C7E08((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

BOOL sub_2C0274(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    BOOL result = sub_2C9304((int *)((char *)v5 + *v5), a1);
    if (!result) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2C0300(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C95FC((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2C038C(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C9868((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2C0418(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C9D84((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2C04A4(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C9EC8((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2C0530(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_67;
  }
  if (v20[2])
  {
    unint64_t v22 = (unint64_t)&v3[v20[2]];
    if ((v22 & 7) != 0 && v4) {
      return 0;
    }
    uint64_t result = 0;
    if (v7 < 9 || v7 - 8 < v22) {
      return result;
    }
  }
  if (v21 < 7) {
    goto LABEL_67;
  }
  if (v20[3] && v7 - 1 < (unint64_t)&v3[v20[3]]) {
    return 0;
  }
  if (v21 < 9) {
    goto LABEL_67;
  }
  if (v20[4] && v7 - 1 < (unint64_t)&v3[v20[4]]) {
    return 0;
  }
  if (v21 >= 0xB && (uint64_t v23 = v20[5]) != 0)
  {
    uint64_t result = 0;
    unint64_t v24 = (unint64_t)&v3[v23];
    BOOL v26 = (v24 & 3) == 0 || v4 == 0;
    if (v8 < v24 || !v26) {
      return result;
    }
    uint64_t v27 = *(unsigned int *)(v2 + v24);
    if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
      return 0;
    }
    uint64_t result = 0;
    BOOL v28 = (int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
    uint64_t v29 = (char *)v28 - v2;
    BOOL v30 = (v29 & 3) == 0 || v4 == 0;
    BOOL v31 = v30;
    if (v8 < (unint64_t)v29 || !v31) {
      return result;
    }
    uint64_t v32 = *v28;
    if (v32 > 0x1FFFFFFE) {
      return 0;
    }
    uint64_t result = 0;
    unint64_t v33 = 4 * v32 + 4;
    BOOL v15 = v7 > v33;
    unint64_t v34 = v7 - v33;
    if (!v15 || v34 < (unint64_t)v29) {
      return result;
    }
  }
  else
  {
LABEL_67:
    BOOL v28 = 0;
  }
  uint64_t result = sub_2C0A78(a2, v28);
  if (result)
  {
    uint64_t result = sub_2A7CE0(a1, a2, 0xCu);
    if (result)
    {
      unint64_t v35 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v35 >= 0xDu && (uint64_t v36 = v35[6]) != 0) {
        uint64_t v37 = (unsigned int *)((char *)a1 + v36 + *(unsigned int *)((char *)a1 + v36));
      }
      else {
        uint64_t v37 = 0;
      }
      uint64_t result = sub_2A7D68(a2, v37);
      if (result)
      {
        uint64_t v38 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v38 >= 0xDu && (uint64_t v39 = v38[6]) != 0) {
          uint64_t v40 = (int *)((char *)a1 + v39 + *(unsigned int *)((char *)a1 + v39));
        }
        else {
          uint64_t v40 = 0;
        }
        uint64_t result = sub_2C0A78(a2, v40);
        if (result)
        {
          uint64_t result = sub_2AFEE4(a1, a2, 0xEu, 4);
          if (result)
          {
            uint64_t result = sub_2A7CE0(a1, a2, 0x10u);
            if (result)
            {
              unint64_t v41 = (unsigned __int16 *)((char *)a1 - *a1);
              if (*v41 >= 0x11u && (uint64_t v42 = v41[8]) != 0) {
                unint64_t v43 = (unsigned int *)((char *)a1 + v42 + *(unsigned int *)((char *)a1 + v42));
              }
              else {
                unint64_t v43 = 0;
              }
              uint64_t result = sub_2B0C38(a2, v43);
              if (result)
              {
                uint64_t result = sub_2A7CE0(a1, a2, 0x12u);
                if (result)
                {
                  unint64_t v44 = (unsigned __int16 *)((char *)a1 - *a1);
                  if (*v44 >= 0x13u && (uint64_t v45 = v44[9]) != 0) {
                    unint64_t v46 = (unsigned int *)((char *)a1 + v45 + *(unsigned int *)((char *)a1 + v45));
                  }
                  else {
                    unint64_t v46 = 0;
                  }
                  uint64_t result = sub_2B0F20(a2, v46);
                  if (result)
                  {
                    uint64_t result = sub_2A7CE0(a1, a2, 0x14u);
                    if (result)
                    {
                      unint64_t v47 = (unsigned __int16 *)((char *)a1 - *a1);
                      if (*v47 >= 0x15u && (uint64_t v48 = v47[10]) != 0) {
                        BOOL v49 = (unsigned int *)((char *)a1 + v48 + *(unsigned int *)((char *)a1 + v48));
                      }
                      else {
                        BOOL v49 = 0;
                      }
                      uint64_t result = sub_2B0C38(a2, v49);
                      if (result)
                      {
                        uint64_t result = sub_2AFEE4(a1, a2, 0x16u, 4);
                        if (result)
                        {
                          uint64_t result = sub_2A7CE0(a1, a2, 0x18u);
                          if (result)
                          {
                            uint64_t v50 = (unsigned __int16 *)((char *)a1 - *a1);
                            if (*v50 >= 0x19u && (uint64_t v51 = v50[12]) != 0) {
                              unint64_t v52 = (unsigned int *)((char *)a1 + v51 + *(unsigned int *)((char *)a1 + v51));
                            }
                            else {
                              unint64_t v52 = 0;
                            }
                            uint64_t result = sub_2B0C38(a2, v52);
                            if (result)
                            {
                              uint64_t result = sub_2A7CE0(a1, a2, 0x1Au);
                              if (result)
                              {
                                unint64_t v53 = (unsigned __int16 *)((char *)a1 - *a1);
                                if (*v53 < 0x1Bu
                                  || (uint64_t v54 = v53[13]) == 0
                                  || (uint64_t result = sub_2C0DD8((int *)((char *)a1 + v54 + *(unsigned int *)((char *)a1 + v54)), a2), result))
                                {
                                  uint64_t result = sub_2A7CE0(a1, a2, 0x1Cu);
                                  if (result)
                                  {
                                    uint64_t v55 = *a1;
                                    uint64_t v56 = -v55;
                                    uint64_t v57 = (unsigned __int16 *)((char *)a1 - v55);
                                    if (*v57 >= 0x1Du)
                                    {
                                      uint64_t v58 = v57[14];
                                      if (v58)
                                      {
                                        uint64_t result = sub_2C0FD8((int *)((char *)a1 + v58 + *(unsigned int *)((char *)a1 + v58)), a2);
                                        if (!result) {
                                          return result;
                                        }
                                        uint64_t v56 = -(uint64_t)*a1;
                                      }
                                    }
                                    uint64_t v59 = (unsigned __int16 *)((char *)a1 + v56);
                                    unsigned int v60 = *v59;
                                    if (v60 < 0x1F
                                      || (!v59[15]
                                       || (uint64_t result = 0, v61 = *(void *)(a2 + 8), v61 >= 2)
                                       && v61 - 1 >= (unint64_t)a1 + v59[15] - *(void *)a2)
                                      && (v60 < 0x21
                                       || (uint64_t v62 = v59[16]) == 0
                                       || (uint64_t result = 0, v63 = *(void *)(a2 + 8), v63 >= 2)
                                       && v63 - 1 >= (unint64_t)a1 + v62 - *(void *)a2))
                                    {
                                      --*(_DWORD *)(a2 + 40);
                                      return 1;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2C0A78(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C0B04((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2C0B04(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  unint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 >= 5u)
  {
    uint64_t v23 = v22[2];
    if (v23)
    {
      uint64_t result = 0;
      unint64_t v24 = (unint64_t)&v3[v23];
      BOOL v26 = (v24 & 3) == 0 || v4 == 0;
      if (v8 < v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
        return 0;
      }
      uint64_t result = 0;
      BOOL v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
      uint64_t v29 = (char *)v28 - v2;
      BOOL v30 = (v29 & 3) == 0 || v4 == 0;
      BOOL v31 = v30;
      if (v8 < (unint64_t)v29 || !v31) {
        return result;
      }
      uint64_t v32 = *v28;
      if (v32 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v33 = 4 * v32 + 4;
      BOOL v15 = v7 > v33;
      unint64_t v34 = v7 - v33;
      if (!v15 || v34 < (unint64_t)v29) {
        return 0;
      }
      if (v32)
      {
        unint64_t v36 = 0;
        uint64_t v37 = v28 + 1;
        while ((sub_2BD5F8((int *)((char *)v37 + *v37), (uint64_t *)a2) & 1) != 0)
        {
          ++v36;
          ++v37;
          if (v36 >= *v28)
          {
            uint64_t v21 = -(uint64_t)*a1;
            goto LABEL_61;
          }
        }
        return 0;
      }
    }
  }
LABEL_61:
  if (*(unsigned __int16 *)((char *)a1 + v21) < 7u
    || (uint64_t v38 = *(unsigned __int16 *)((char *)a1 + v21 + 6), !*(_WORD *)((char *)a1 + v21 + 6)))
  {
LABEL_74:
    if (*(unsigned __int16 *)((char *)a1 + v21) < 9u
      || !*(_WORD *)((char *)a1 + v21 + 8)
      || (uint64_t result = 0, v43 = *(void *)(a2 + 8), v43 >= 2)
      && v43 - 1 >= (unint64_t)a1 + *(unsigned __int16 *)((char *)a1 + v21 + 8) - *(void *)a2)
    {
      --*(_DWORD *)(a2 + 40);
      return 1;
    }
    return result;
  }
  unint64_t v39 = (unint64_t)a1 + v38 - *(void *)a2;
  uint64_t result = 0;
  if ((v39 & 3) == 0 || *(unsigned char *)(a2 + 24) == 0)
  {
    unint64_t v41 = *(void *)(a2 + 8);
    if (v41 >= 5 && v41 - 4 >= v39)
    {
      uint64_t v42 = *(unsigned int *)(*(void *)a2 + v39);
      if ((int)v42 < 1 || v41 - 1 < v39 + v42) {
        return 0;
      }
      uint64_t result = sub_2BD5F8((int *)((char *)a1 + v38 + *(unsigned int *)((char *)a1 + v38)), (uint64_t *)a2);
      if (result)
      {
        uint64_t v21 = -(uint64_t)*a1;
        goto LABEL_74;
      }
    }
  }
  return result;
}

uint64_t sub_2C0DD8(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  unint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 >= 5u)
  {
    uint64_t v23 = v22[2];
    if (v23)
    {
      uint64_t result = 0;
      unint64_t v24 = (unint64_t)&v3[v23];
      BOOL v26 = (v24 & 3) == 0 || v4 == 0;
      if (v8 < v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
        return 0;
      }
      uint64_t result = sub_2C0B04((int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23)), a2);
      if (!result) {
        return result;
      }
      uint64_t v21 = -(uint64_t)*a1;
    }
  }
  BOOL v28 = (char *)a1 + v21;
  unsigned int v29 = *(unsigned __int16 *)((char *)a1 + v21);
  if (v29 < 7) {
    goto LABEL_54;
  }
  if (!*((_WORD *)v28 + 3)) {
    goto LABEL_53;
  }
  unint64_t v30 = (unint64_t)a1 + *((unsigned __int16 *)v28 + 3) - *(void *)a2;
  if ((v30 & 3) != 0 && *(unsigned char *)(a2 + 24)) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v31 = *(void *)(a2 + 8);
  if (v31 >= 5 && v31 - 4 >= v30)
  {
LABEL_53:
    if (v29 < 9
      || (uint64_t v32 = *((unsigned __int16 *)v28 + 4)) == 0
      || (result = 0, unint64_t v33 = *(void *)(a2 + 8), v33 >= 5) && v33 - 4 >= (unint64_t)a1 + v32 - *(void *)a2)
    {
LABEL_54:
      --*(_DWORD *)(a2 + 40);
      return 1;
    }
  }
  return result;
}

uint64_t sub_2C0FD8(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  unint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 >= 5u)
  {
    uint64_t v23 = v22[2];
    if (v23)
    {
      uint64_t result = 0;
      unint64_t v24 = (unint64_t)&v3[v23];
      BOOL v26 = (v24 & 3) == 0 || v4 == 0;
      if (v8 < v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
        return 0;
      }
      uint64_t result = sub_2C1250((int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23)), a2);
      if (!result) {
        return result;
      }
      uint64_t v21 = -(uint64_t)*a1;
    }
  }
  BOOL v28 = (char *)a1 + v21;
  if (*(unsigned __int16 *)((char *)a1 + v21) < 7u || (uint64_t v29 = *((unsigned __int16 *)v28 + 3), !*((_WORD *)v28 + 3)))
  {
LABEL_68:
    --*(_DWORD *)(a2 + 40);
    return 1;
  }
  uint64_t v30 = *(void *)a2;
  unint64_t v31 = (unint64_t)a1 + v29 - *(void *)a2;
  if ((v31 & 3) != 0 && *(unsigned char *)(a2 + 24)) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v32 = *(void *)(a2 + 8);
  if (v32 >= 5 && v32 - 4 >= v31)
  {
    uint64_t v33 = *(unsigned int *)(v30 + v31);
    if ((int)v33 < 1 || v32 - 1 < v31 + v33) {
      return 0;
    }
    uint64_t result = 0;
    unint64_t v34 = (unsigned int *)((char *)a1 + v29 + *(unsigned int *)((char *)a1 + v29));
    unint64_t v35 = (unint64_t)v34 - v30;
    BOOL v36 = (((unint64_t)v34 - v30) & 3) == 0 || *(unsigned char *)(a2 + 24) == 0;
    BOOL v37 = v36;
    if (v32 - 4 >= v35 && v37)
    {
      uint64_t v38 = *v34;
      if (v38 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v39 = 4 * v38 + 4;
      BOOL v15 = v32 > v39;
      unint64_t v40 = v32 - v39;
      if (!v15 || v40 < v35) {
        return 0;
      }
      if (v38)
      {
        unint64_t v42 = 0;
        unint64_t v43 = v34 + 1;
        while ((sub_2C1250((int *)((char *)v43 + *v43), a2) & 1) != 0)
        {
          ++v42;
          ++v43;
          if (v42 >= *v34) {
            goto LABEL_68;
          }
        }
        return 0;
      }
      goto LABEL_68;
    }
  }
  return result;
}

uint64_t sub_2C1250(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  unint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 >= 5u)
  {
    uint64_t v23 = v22[2];
    if (v23)
    {
      uint64_t result = 0;
      unint64_t v24 = (unint64_t)&v3[v23];
      BOOL v26 = (v24 & 3) == 0 || v4 == 0;
      if (v8 < v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
        return 0;
      }
      uint64_t result = sub_2C1450((int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23)), (uint64_t *)a2);
      if (!result) {
        return result;
      }
      uint64_t v21 = -(uint64_t)*a1;
    }
  }
  BOOL v28 = (char *)a1 + v21;
  unsigned int v29 = *(unsigned __int16 *)((char *)a1 + v21);
  if (v29 < 7) {
    goto LABEL_54;
  }
  if (!*((_WORD *)v28 + 3)) {
    goto LABEL_53;
  }
  unint64_t v30 = (unint64_t)a1 + *((unsigned __int16 *)v28 + 3) - *(void *)a2;
  if ((v30 & 3) != 0 && *(unsigned char *)(a2 + 24)) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v31 = *(void *)(a2 + 8);
  if (v31 >= 9 && v31 - 8 >= v30)
  {
LABEL_53:
    if (v29 < 9
      || (uint64_t v32 = *((unsigned __int16 *)v28 + 4)) == 0
      || (result = 0, unint64_t v33 = *(void *)(a2 + 8), v33 >= 2) && v33 - 1 >= (unint64_t)a1 + v32 - *(void *)a2)
    {
LABEL_54:
      --*(_DWORD *)(a2 + 40);
      return 1;
    }
  }
  return result;
}

uint64_t sub_2C1450(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  BOOL v12 = (v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5);
  if (v12) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  unsigned int v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_57;
  }
  uint64_t v21 = v19[2];
  if (!v19[2]) {
    goto LABEL_56;
  }
  unint64_t v22 = (unint64_t)&v3[v21];
  if (((unint64_t)&v3[v21] & 3) != 0 && v4) {
    return 0;
  }
  uint64_t v14 = 0;
  if (v6 >= 9 && v6 - 8 >= v22)
  {
LABEL_56:
    if (v20 < 7) {
      goto LABEL_57;
    }
    uint64_t v23 = v19[3];
    if (!v23) {
      goto LABEL_57;
    }
    uint64_t v14 = 0;
    unint64_t v24 = (unint64_t)&v3[v23];
    BOOL v25 = (v24 & 3) == 0 || v4 == 0;
    BOOL v26 = v25;
    if (v7 >= v24 && v26)
    {
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v6 - 1 < v24 + v27) {
        return 0;
      }
      uint64_t v14 = 0;
      BOOL v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
      unsigned int v29 = (char *)v28 - v2;
      BOOL v30 = (v29 & 3) == 0 || v4 == 0;
      BOOL v31 = v30;
      if (v7 >= (unint64_t)v29 && v31)
      {
        uint64_t v32 = *v28;
        if (v32 > 0x1FFFFFFE) {
          return 0;
        }
        uint64_t v14 = 0;
        unint64_t v33 = 4 * v32 + 4;
        BOOL v12 = v6 > v33;
        unint64_t v34 = v6 - v33;
        if (v12 && v34 >= (unint64_t)v29)
        {
LABEL_57:
          *((_DWORD *)a2 + 10) = v10;
          return 1;
        }
      }
    }
  }
  return v14;
}

uint64_t sub_2C15F8(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (unint64_t)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  BOOL v7 = v6 >= 5 && v6 - 4 >= v3;
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a2 + 10);
  unsigned int v10 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v9 + 1;
  *((_DWORD *)a2 + 11) = v10;
  if ((v9 + 1) > *((_DWORD *)a2 + 4) || v10 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v12 = v3 - v8;
  if ((v3 - v8))
  {
    uint64_t v13 = 0;
    if (v4 || v6 - 2 < v12) {
      return v13;
    }
  }
  else if (v6 - 2 < v12)
  {
    return 0;
  }
  unint64_t v14 = *(unsigned __int16 *)(v2 + v12);
  if ((v14 & 1) != 0 && v4 | v14 & 1) {
    return 0;
  }
  BOOL v7 = v6 >= v14;
  unint64_t v15 = v6 - v14;
  if (v15 == 0 || !v7 || v15 < v12) {
    return 0;
  }
  unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v19 = *v18;
  if (v19 < 5) {
    goto LABEL_39;
  }
  uint64_t v20 = v18[2];
  if (!v18[2]) {
    goto LABEL_38;
  }
  unint64_t v21 = v3 + v20;
  if (((v3 + v20) & 3) != 0 && v4) {
    return 0;
  }
  uint64_t v13 = 0;
  if (v6 >= 9 && v6 - 8 >= v21)
  {
LABEL_38:
    if (v19 < 7 || !v18[3]) {
      goto LABEL_39;
    }
    unint64_t v22 = v3 + v18[3];
    if ((v22 & 3) != 0 && v4) {
      return 0;
    }
    uint64_t v13 = 0;
    if (v6 >= 9 && v6 - 8 >= v22)
    {
LABEL_39:
      *((_DWORD *)a2 + 10) = v9;
      return 1;
    }
  }
  return v13;
}

uint64_t sub_2C1734(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  BOOL v12 = (v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5);
  if (v12) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  unsigned int v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_64;
  }
  uint64_t v21 = v19[2];
  if (!v19[2]
    || ((v14 = 0, v22 = &v3[v21], ((unint64_t)&v3[v21] & 3) != 0) ? (BOOL v23 = v4 == 0) : (BOOL v23 = 1),
        !v23 ? (int v24 = 0) : (int v24 = 1),
        v7 >= (unint64_t)v22 && v24))
  {
    if (v20 < 7) {
      goto LABEL_64;
    }
    if (v19[3] && v7 < (unint64_t)&v3[v19[3]]) {
      return 0;
    }
    if (v20 < 9) {
      goto LABEL_64;
    }
    uint64_t v25 = v19[4];
    if (!v25) {
      goto LABEL_64;
    }
    uint64_t v14 = 0;
    unint64_t v26 = (unint64_t)&v3[v25];
    BOOL v27 = (v26 & 3) == 0 || v4 == 0;
    BOOL v28 = v27;
    if (v7 >= v26 && v28)
    {
      uint64_t v29 = *(unsigned int *)(v2 + v26);
      if ((int)v29 < 1 || v6 - 1 < v26 + v29) {
        return 0;
      }
      uint64_t v14 = 0;
      BOOL v30 = (unsigned int *)((char *)a1 + v25 + *(unsigned int *)((char *)a1 + v25));
      BOOL v31 = (char *)v30 - v2;
      BOOL v32 = (v31 & 3) == 0 || v4 == 0;
      BOOL v33 = v32;
      if (v7 >= (unint64_t)v31 && v33)
      {
        uint64_t v34 = *v30;
        if (v34 > 0xFFFFFFE) {
          return 0;
        }
        uint64_t v14 = 0;
        unint64_t v35 = (8 * v34) | 4;
        BOOL v12 = v6 > v35;
        unint64_t v36 = v6 - v35;
        if (v12 && v36 >= (unint64_t)v31)
        {
LABEL_64:
          *((_DWORD *)a2 + 10) = v10;
          return 1;
        }
      }
    }
  }
  return v14;
}

uint64_t sub_2C18F0(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  unsigned int v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_70;
  }
  if (!v20[2]) {
    goto LABEL_154;
  }
  unint64_t v22 = (unint64_t)&v3[v20[2]];
  if ((v22 & 7) != 0 && v4) {
    return 0;
  }
  uint64_t result = 0;
  if (v7 >= 9 && v7 - 8 >= v22)
  {
LABEL_154:
    if (v21 < 7) {
      goto LABEL_70;
    }
    if (v20[3])
    {
      unint64_t v23 = (unint64_t)&v3[v20[3]];
      if ((v23 & 3) != 0 && v4) {
        return 0;
      }
      uint64_t result = 0;
      if (v7 < 9 || v7 - 8 < v23) {
        return result;
      }
    }
    if (v21 < 9 || (uint64_t v24 = v20[4]) == 0)
    {
LABEL_70:
      uint64_t result = sub_2AFEE4(a1, a2, 0xAu, 4);
      if (result)
      {
        uint64_t result = sub_2A7CE0(a1, a2, 0xCu);
        if (result)
        {
          unint64_t v39 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v39 >= 0xDu && (uint64_t v40 = v39[6]) != 0) {
            unint64_t v41 = (unsigned int *)((char *)a1 + v40 + *(unsigned int *)((char *)a1 + v40));
          }
          else {
            unint64_t v41 = 0;
          }
          uint64_t result = sub_2B0C38(a2, v41);
          if (result)
          {
            uint64_t result = sub_2A7CE0(a1, a2, 0xEu);
            if (result)
            {
              unint64_t v42 = (unsigned __int16 *)((char *)a1 - *a1);
              if (*v42 >= 0xFu && (uint64_t v43 = v42[7]) != 0) {
                unint64_t v44 = (unsigned int *)((char *)a1 + v43 + *(unsigned int *)((char *)a1 + v43));
              }
              else {
                unint64_t v44 = 0;
              }
              uint64_t result = sub_2B0C38(a2, v44);
              if (result)
              {
                uint64_t result = sub_2A7CE0(a1, a2, 0x10u);
                if (result)
                {
                  uint64_t v45 = (unsigned __int16 *)((char *)a1 - *a1);
                  if (*v45 >= 0x11u && (uint64_t v46 = v45[8]) != 0) {
                    unint64_t v47 = (unsigned int *)((char *)a1 + v46 + *(unsigned int *)((char *)a1 + v46));
                  }
                  else {
                    unint64_t v47 = 0;
                  }
                  uint64_t result = sub_2B0C38(a2, v47);
                  if (result)
                  {
                    uint64_t result = sub_2AFEE4(a1, a2, 0x12u, 4);
                    if (result)
                    {
                      uint64_t result = sub_2AF5DC(a1, a2, 0x14u, 2);
                      if (result)
                      {
                        uint64_t result = sub_2AF5DC(a1, a2, 0x16u, 2);
                        if (result)
                        {
                          uint64_t result = sub_2B16B4(a1, a2, 0x18u, 4);
                          if (result)
                          {
                            uint64_t result = sub_2A7CE0(a1, a2, 0x1Au);
                            if (result)
                            {
                              uint64_t v48 = (unsigned __int16 *)((char *)a1 - *a1);
                              if (*v48 >= 0x1Bu && (uint64_t v49 = v48[13]) != 0) {
                                uint64_t v50 = (unsigned int *)((char *)a1 + v49 + *(unsigned int *)((char *)a1 + v49));
                              }
                              else {
                                uint64_t v50 = 0;
                              }
                              uint64_t result = sub_2A7D68(a2, v50);
                              if (result)
                              {
                                uint64_t v51 = (unsigned __int16 *)((char *)a1 - *a1);
                                if (*v51 >= 0x1Bu && (uint64_t v52 = v51[13]) != 0) {
                                  unint64_t v53 = (int *)((char *)a1 + v52 + *(unsigned int *)((char *)a1 + v52));
                                }
                                else {
                                  unint64_t v53 = 0;
                                }
                                uint64_t result = sub_2C1FFC((uint64_t *)a2, v53);
                                if (result)
                                {
                                  uint64_t result = sub_2A7CE0(a1, a2, 0x1Cu);
                                  if (result)
                                  {
                                    uint64_t v54 = (unsigned __int16 *)((char *)a1 - *a1);
                                    if (*v54 >= 0x1Du && (uint64_t v55 = v54[14]) != 0) {
                                      uint64_t v56 = (unsigned int *)((char *)a1 + v55 + *(unsigned int *)((char *)a1 + v55));
                                    }
                                    else {
                                      uint64_t v56 = 0;
                                    }
                                    uint64_t result = sub_2B0C38(a2, v56);
                                    if (result)
                                    {
                                      uint64_t v57 = (unsigned __int16 *)((char *)a1 - *a1);
                                      if (*v57 < 0x1Fu
                                        || (uint64_t v58 = v57[15]) == 0
                                        || (uint64_t result = 0, v59 = *(void *)(a2 + 8), v59 >= 2)
                                        && v59 - 1 >= (unint64_t)a1 + v58 - *(void *)a2)
                                      {
                                        uint64_t result = sub_2A7CE0(a1, a2, 0x22u);
                                        if (result)
                                        {
                                          unsigned int v60 = (unsigned __int16 *)((char *)a1 - *a1);
                                          if (*v60 < 0x23u
                                            || (uint64_t v61 = v60[17]) == 0
                                            || (uint64_t result = sub_2C0FD8((int *)((char *)a1 + v61+ *(unsigned int *)((char *)a1 + v61)), a2), result))
                                          {
                                            uint64_t result = sub_2A7CE0(a1, a2, 0x24u);
                                            if (result)
                                            {
                                              uint64_t v62 = (unsigned __int16 *)((char *)a1 - *a1);
                                              if (*v62 >= 0x25u && (uint64_t v63 = v62[18]) != 0) {
                                                BOOL v64 = (unsigned int *)((char *)a1
                                              }
                                                                     + v63
                                                                     + *(unsigned int *)((char *)a1 + v63));
                                              else {
                                                BOOL v64 = 0;
                                              }
                                              uint64_t result = sub_2A7D68(a2, v64);
                                              if (result)
                                              {
                                                uint64_t v65 = (unsigned __int16 *)((char *)a1 - *a1);
                                                if (*v65 >= 0x25u && (uint64_t v66 = v65[18]) != 0) {
                                                  uint64_t v67 = (int *)((char *)a1 + v66 + *(unsigned int *)((char *)a1 + v66));
                                                }
                                                else {
                                                  uint64_t v67 = 0;
                                                }
                                                uint64_t result = sub_2C2088(a2, v67);
                                                if (result)
                                                {
                                                  uint64_t result = sub_2A7CE0(a1, a2, 0x26u);
                                                  if (result)
                                                  {
                                                    uint64_t v68 = (unsigned __int16 *)((char *)a1 - *a1);
                                                    if (*v68 >= 0x27u && (uint64_t v69 = v68[19]) != 0) {
                                                      uint64_t v70 = (unsigned int *)((char *)a1
                                                    }
                                                                           + v69
                                                                           + *(unsigned int *)((char *)a1 + v69));
                                                    else {
                                                      uint64_t v70 = 0;
                                                    }
                                                    uint64_t result = sub_2B0C38(a2, v70);
                                                    if (result)
                                                    {
                                                      uint64_t result = sub_2A7CE0(a1, a2, 0x28u);
                                                      if (result)
                                                      {
                                                        unint64_t v71 = (unsigned __int16 *)((char *)a1 - *a1);
                                                        if (*v71 < 0x29u
                                                          || (uint64_t v72 = v71[20]) == 0
                                                          || (uint64_t result = sub_2C0B04((int *)((char *)a1+ v72+ *(unsigned int *)((char *)a1 + v72)), a2), result))
                                                        {
                                                          uint64_t result = sub_2A7CE0(a1, a2, 0x2Au);
                                                          if (result)
                                                          {
                                                            uint64_t v73 = (unsigned __int16 *)((char *)a1 - *a1);
                                                            if (*v73 >= 0x2Bu && (uint64_t v74 = v73[21]) != 0) {
                                                              uint64_t v75 = (unsigned int *)((char *)a1
                                                            }
                                                                                   + v74
                                                                                   + *(unsigned int *)((char *)a1 + v74));
                                                            else {
                                                              uint64_t v75 = 0;
                                                            }
                                                            uint64_t result = sub_2B0C38(a2, v75);
                                                            if (result)
                                                            {
                                                              uint64_t result = sub_2A7CE0(a1, a2, 0x2Cu);
                                                              if (result)
                                                              {
                                                                uint64_t v76 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                if (*v76 >= 0x2Du && (uint64_t v77 = v76[22]) != 0) {
                                                                  unint64_t v78 = (unsigned int *)((char *)a1
                                                                }
                                                                                       + v77
                                                                                       + *(unsigned int *)((char *)a1 + v77));
                                                                else {
                                                                  unint64_t v78 = 0;
                                                                }
                                                                uint64_t result = sub_2B0C38(a2, v78);
                                                                if (result)
                                                                {
                                                                  --*(_DWORD *)(a2 + 40);
                                                                  return 1;
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return result;
    }
    uint64_t result = 0;
    unint64_t v25 = (unint64_t)&v3[v24];
    BOOL v27 = (v25 & 3) == 0 || v4 == 0;
    if (v8 >= v25 && v27)
    {
      uint64_t v28 = *(unsigned int *)(v2 + v25);
      if ((int)v28 < 1 || v7 - 1 < v25 + v28) {
        return 0;
      }
      uint64_t result = 0;
      uint64_t v29 = (unsigned int *)((char *)a1 + v24 + *(unsigned int *)((char *)a1 + v24));
      BOOL v30 = (char *)v29 - v2;
      BOOL v31 = (v30 & 3) == 0 || v4 == 0;
      BOOL v32 = v31;
      if (v8 >= (unint64_t)v30 && v32)
      {
        uint64_t v33 = *v29;
        if (v33 > 0x1FFFFFFE) {
          return 0;
        }
        uint64_t result = 0;
        unint64_t v34 = 4 * v33 + 4;
        BOOL v15 = v7 > v34;
        unint64_t v35 = v7 - v34;
        if (v15 && v35 >= (unint64_t)v30)
        {
          if (v33)
          {
            unint64_t v36 = 0;
            BOOL v37 = v29 + 1;
            while (1)
            {
              uint64_t v38 = v37;
              if ((sub_2C0B04((int *)((char *)v37 + *v37), a2) & 1) == 0) {
                return 0;
              }
              ++v36;
              BOOL v37 = v38 + 1;
              if (v36 >= *v29) {
                goto LABEL_70;
              }
            }
          }
          goto LABEL_70;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2C1FFC(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C2114((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2C2088(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C22AC((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2C2114(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  unsigned int v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_60;
  }
  uint64_t v21 = v19[2];
  if (!v19[2])
  {
LABEL_57:
    if (v20 >= 7 && v19[3] && v6 - 1 < (unint64_t)&v3[v19[3]]) {
      return 0;
    }
LABEL_60:
    *((_DWORD *)a2 + 10) = v10;
    return 1;
  }
  uint64_t v14 = 0;
  unint64_t v22 = &v3[v21];
  BOOL v24 = ((unint64_t)&v3[v21] & 3) == 0 || v4 == 0;
  if (v7 >= (unint64_t)v22 && v24)
  {
    uint64_t v25 = *(unsigned int *)&v22[v2];
    if ((int)v25 < 1 || v6 - 1 < (unint64_t)&v22[v25]) {
      return 0;
    }
    uint64_t v14 = 0;
    unint64_t v26 = (unsigned int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21));
    BOOL v27 = (char *)v26 - v2;
    BOOL v28 = (((unint64_t)v26 - v2) & 3) == 0 || v4 == 0;
    BOOL v29 = v28;
    if (v7 >= (unint64_t)v27 && v29)
    {
      uint64_t v30 = *v26;
      if (v30 > 0x7FFFFFFE) {
        return 0;
      }
      unint64_t v31 = v30 + 4;
      unint64_t v32 = (unint64_t)&v27[v30 + 4];
      BOOL v33 = v6 - 1 >= v32 && v6 > v31;
      BOOL v34 = v33 && v6 - v31 >= (unint64_t)v27;
      if (!v34 || *(unsigned char *)(v2 + v32)) {
        return 0;
      }
      goto LABEL_57;
    }
  }
  return v14;
}

uint64_t sub_2C22AC(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v10 = *a1;
  unsigned int v11 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v12 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v11;
  *(_DWORD *)(a2 + 44) = v12;
  if (v11 > *(_DWORD *)(a2 + 16) || v12 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v10];
  if ((v3 - v10))
  {
    if (v4 || v6 - 2 < v14) {
      return 0;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v14);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v14) {
    return 0;
  }
  uint64_t v18 = *a1;
  uint64_t v19 = -v18;
  unsigned int v20 = (char *)a1 - v18;
  unsigned int v21 = *(unsigned __int16 *)((char *)a1 - v18);
  if (v21 >= 5)
  {
    uint64_t v22 = *((unsigned __int16 *)v20 + 2);
    if (*((_WORD *)v20 + 2))
    {
      if (((unint64_t)&v3[v22] & 3) != 0 && v4) {
        return 0;
      }
      if (v6 < 9 || v6 - 8 < (unint64_t)&v3[v22]) {
        return 0;
      }
    }
    if (v21 >= 7)
    {
      uint64_t v23 = *((unsigned __int16 *)v20 + 3);
      if (v23)
      {
        unint64_t v24 = (unint64_t)&v3[v23];
        BOOL v26 = (v24 & 3) == 0 || v4 == 0;
        if (v7 < v24 || !v26) {
          return 0;
        }
        uint64_t v27 = *(unsigned int *)(v2 + v24);
        if ((int)v27 < 1) {
          return 0;
        }
        if (v6 - 1 < v24 + v27) {
          return 0;
        }
        uint64_t v30 = a2;
        unint64_t v31 = a1;
        if (!sub_2C0B04((int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23)), a2)) {
          return 0;
        }
        a2 = v30;
        a1 = v31;
        uint64_t v19 = -(uint64_t)*v31;
      }
    }
  }
  BOOL v28 = (char *)a1 + v19;
  if (*(unsigned __int16 *)((char *)a1 + v19) >= 9u)
  {
    if (*((_WORD *)v28 + 4))
    {
      unint64_t v29 = *(void *)(a2 + 8);
      if (v29 < 2 || v29 - 1 < (unint64_t)a1 + *((unsigned __int16 *)v28 + 4) - *(void *)a2) {
        return 0;
      }
    }
  }
  --*(_DWORD *)(a2 + 40);
  return 1;
}

BOOL sub_2C24A4(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  unsigned int v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5)
  {
LABEL_81:
    BOOL result = sub_2A7CE0(a1, a2, 0xCu);
    if (result)
    {
      uint64_t v43 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v43 >= 0xDu && (uint64_t v44 = v43[6]) != 0) {
        uint64_t v45 = (unsigned int *)((char *)a1 + v44 + *(unsigned int *)((char *)a1 + v44));
      }
      else {
        uint64_t v45 = 0;
      }
      BOOL result = sub_2AFF48((uint64_t *)a2, v45);
      if (result)
      {
        --*(_DWORD *)(a2 + 40);
        return 1;
      }
    }
    return result;
  }
  uint64_t v22 = v20[2];
  if (!v20[2])
  {
LABEL_58:
    if (v21 >= 7)
    {
      uint64_t v36 = v20[3];
      if (v20[3])
      {
        BOOL result = 0;
        BOOL v37 = &v3[v36];
        BOOL v38 = ((unint64_t)&v3[v36] & 1) == 0 || v4 == 0;
        BOOL v39 = v38;
        if (v8 < (unint64_t)v37 || !v39) {
          return result;
        }
      }
      if (v21 >= 9)
      {
        if (v20[4])
        {
          BOOL result = 0;
          unint64_t v40 = (unint64_t)&v3[v20[4]];
          BOOL v41 = (v40 & 3) == 0 || v4 == 0;
          BOOL v42 = v41;
          if (v8 < v40 || !v42) {
            return result;
          }
        }
        if (v21 >= 0xB && v20[5] && v7 - 1 < (unint64_t)&v3[v20[5]]) {
          return 0;
        }
      }
    }
    goto LABEL_81;
  }
  BOOL result = 0;
  uint64_t v23 = &v3[v22];
  BOOL v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
  if (v8 >= (unint64_t)v23 && v25)
  {
    uint64_t v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26]) {
      return 0;
    }
    BOOL result = 0;
    uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    BOOL v28 = (char *)v27 - v2;
    BOOL v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    BOOL v30 = v29;
    if (v8 >= (unint64_t)v28 && v30)
    {
      uint64_t v31 = *v27;
      if (v31 > 0x7FFFFFFE) {
        return 0;
      }
      unint64_t v32 = v31 + 4;
      unint64_t v33 = (unint64_t)&v28[v31 + 4];
      BOOL v34 = v7 - 1 >= v33 && v7 > v32;
      BOOL v35 = v34 && v7 - v32 >= (unint64_t)v28;
      if (!v35 || *(unsigned char *)(v2 + v33)) {
        return 0;
      }
      goto LABEL_58;
    }
  }
  return result;
}

uint64_t sub_2C2728(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  unsigned int v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_79;
  }
  if (v20[2])
  {
    unint64_t v22 = (unint64_t)&v3[v20[2]];
    if ((v22 & 7) != 0 && v4) {
      return 0;
    }
    uint64_t result = 0;
    if (v7 < 9 || v7 - 8 < v22) {
      return result;
    }
  }
  if (v21 < 7) {
    goto LABEL_79;
  }
  if (v20[3])
  {
    unint64_t v23 = (unint64_t)&v3[v20[3]];
    if ((v23 & 3) != 0 && v4) {
      return 0;
    }
    uint64_t result = 0;
    if (v7 < 9 || v7 - 8 < v23) {
      return result;
    }
  }
  if (v21 < 9) {
    goto LABEL_79;
  }
  uint64_t v24 = v20[4];
  if (v20[4])
  {
    uint64_t result = 0;
    BOOL v25 = &v3[v24];
    BOOL v26 = ((unint64_t)&v3[v24] & 3) == 0 || v4 == 0;
    BOOL v27 = v26;
    if (v8 < (unint64_t)v25 || !v27) {
      return result;
    }
    uint64_t v28 = *(unsigned int *)&v25[v2];
    if ((int)v28 < 1 || v7 - 1 < (unint64_t)&v25[v28]) {
      return 0;
    }
    uint64_t result = 0;
    BOOL v29 = (unsigned int *)((char *)a1 + v24 + *(unsigned int *)((char *)a1 + v24));
    BOOL v30 = (char *)v29 - v2;
    BOOL v31 = (((unint64_t)v29 - v2) & 3) == 0 || v4 == 0;
    BOOL v32 = v31;
    if (v8 < (unint64_t)v30 || !v32) {
      return result;
    }
    uint64_t v33 = *v29;
    if (v33 > 0xFFFFFFE) {
      return 0;
    }
    uint64_t result = 0;
    unint64_t v34 = (8 * v33) | 4;
    BOOL v9 = v7 >= v34;
    unint64_t v35 = v7 - v34;
    if (v35 == 0 || !v9 || v35 < (unint64_t)v30) {
      return result;
    }
  }
  if (v21 >= 0xB && (uint64_t v36 = v20[5]) != 0)
  {
    uint64_t result = 0;
    unint64_t v37 = (unint64_t)&v3[v36];
    BOOL v39 = (v37 & 3) == 0 || v4 == 0;
    if (v8 < v37 || !v39) {
      return result;
    }
    uint64_t v40 = *(unsigned int *)(v2 + v37);
    if ((int)v40 < 1 || v7 - 1 < v37 + v40) {
      return 0;
    }
    BOOL v41 = (unsigned int *)((char *)a1 + v36 + *(unsigned int *)((char *)a1 + v36));
  }
  else
  {
LABEL_79:
    BOOL v41 = 0;
  }
  uint64_t result = sub_2B0C38(a2, v41);
  if (result)
  {
    uint64_t result = sub_2A7CE0(a1, a2, 0xCu);
    if (result)
    {
      BOOL v42 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v42 >= 0xDu && (uint64_t v43 = v42[6]) != 0) {
        uint64_t v44 = (unsigned int *)((char *)a1 + v43 + *(unsigned int *)((char *)a1 + v43));
      }
      else {
        uint64_t v44 = 0;
      }
      uint64_t result = sub_2B0C38(a2, v44);
      if (result)
      {
        uint64_t result = sub_2A7CE0(a1, a2, 0xEu);
        if (result)
        {
          uint64_t v45 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v45 >= 0xFu && (uint64_t v46 = v45[7]) != 0) {
            unint64_t v47 = (unsigned int *)((char *)a1 + v46 + *(unsigned int *)((char *)a1 + v46));
          }
          else {
            unint64_t v47 = 0;
          }
          uint64_t result = sub_2A7D68(a2, v47);
          if (result)
          {
            uint64_t v48 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v48 >= 0xFu && (uint64_t v49 = v48[7]) != 0) {
              uint64_t v50 = (int *)((char *)a1 + v49 + *(unsigned int *)((char *)a1 + v49));
            }
            else {
              uint64_t v50 = 0;
            }
            uint64_t result = sub_2C0A78(a2, v50);
            if (result)
            {
              uint64_t result = sub_2AF5DC(a1, a2, 0x10u, 2);
              if (result)
              {
                uint64_t v51 = (unsigned __int16 *)((char *)a1 - *a1);
                if (*v51 < 0x13u
                  || (uint64_t v52 = v51[9]) == 0
                  || (uint64_t result = 0, v53 = *(void *)(a2 + 8), v53 >= 5)
                  && v53 - 4 >= (unint64_t)a1 + v52 - *(void *)a2)
                {
                  uint64_t result = sub_2A7CE0(a1, a2, 0x14u);
                  if (result)
                  {
                    uint64_t v54 = (unsigned __int16 *)((char *)a1 - *a1);
                    if (*v54 < 0x15u
                      || (uint64_t v55 = v54[10]) == 0
                      || (uint64_t result = sub_2C0DD8((int *)((char *)a1 + v55 + *(unsigned int *)((char *)a1 + v55)), a2),
                          result))
                    {
                      uint64_t result = sub_2A7CE0(a1, a2, 0x16u);
                      if (result)
                      {
                        uint64_t v56 = (unsigned __int16 *)((char *)a1 - *a1);
                        if (*v56 < 0x17u
                          || (uint64_t v57 = v56[11]) == 0
                          || (uint64_t result = sub_2C0DD8((int *)((char *)a1 + v57 + *(unsigned int *)((char *)a1 + v57)), a2),
                              result))
                        {
                          uint64_t result = sub_2A7CE0(a1, a2, 0x18u);
                          if (result)
                          {
                            uint64_t v58 = (unsigned __int16 *)((char *)a1 - *a1);
                            if (*v58 >= 0x19u && (uint64_t v59 = v58[12]) != 0) {
                              unsigned int v60 = (unsigned int *)((char *)a1 + v59 + *(unsigned int *)((char *)a1 + v59));
                            }
                            else {
                              unsigned int v60 = 0;
                            }
                            uint64_t result = sub_2B0F20(a2, v60);
                            if (result)
                            {
                              uint64_t result = sub_2A7CE0(a1, a2, 0x1Au);
                              if (result)
                              {
                                uint64_t v61 = (unsigned __int16 *)((char *)a1 - *a1);
                                if (*v61 >= 0x1Bu && (uint64_t v62 = v61[13]) != 0) {
                                  uint64_t v63 = (unsigned int *)((char *)a1 + v62 + *(unsigned int *)((char *)a1 + v62));
                                }
                                else {
                                  uint64_t v63 = 0;
                                }
                                uint64_t result = sub_2B0F20(a2, v63);
                                if (result)
                                {
                                  uint64_t result = sub_2A7CE0(a1, a2, 0x1Cu);
                                  if (result)
                                  {
                                    BOOL v64 = (unsigned __int16 *)((char *)a1 - *a1);
                                    if (*v64 >= 0x1Du && (uint64_t v65 = v64[14]) != 0) {
                                      uint64_t v66 = (unsigned int *)((char *)a1 + v65 + *(unsigned int *)((char *)a1 + v65));
                                    }
                                    else {
                                      uint64_t v66 = 0;
                                    }
                                    uint64_t result = sub_2B0F20(a2, v66);
                                    if (result)
                                    {
                                      uint64_t v67 = (unsigned __int16 *)((char *)a1 - *a1);
                                      if (*v67 < 0x1Fu
                                        || (uint64_t v68 = v67[15]) == 0
                                        || (uint64_t result = 0, v69 = *(void *)(a2 + 8), v69 >= 2)
                                        && v69 - 1 >= (unint64_t)a1 + v68 - *(void *)a2)
                                      {
                                        uint64_t result = sub_2B16B4(a1, a2, 0x20u, 4);
                                        if (result)
                                        {
                                          uint64_t v70 = (unsigned __int16 *)((char *)a1 - *a1);
                                          unsigned int v71 = *v70;
                                          if (v71 < 0x23) {
                                            goto LABEL_150;
                                          }
                                          if (!v70[17]
                                            || (uint64_t result = 0, v72 = *(void *)(a2 + 8), v72 >= 2)
                                            && v72 - 1 >= (unint64_t)a1 + v70[17] - *(void *)a2)
                                          {
                                            if (v71 < 0x25
                                              || (!v70[18]
                                               || (uint64_t result = 0, v73 = *(void *)(a2 + 8), v73 >= 2)
                                               && v73 - 1 >= (unint64_t)a1 + v70[18] - *(void *)a2)
                                              && (v71 < 0x27
                                               || (!v70[19]
                                                || (uint64_t result = 0, v74 = *(void *)(a2 + 8), v74 >= 2)
                                                && v74 - 1 >= (unint64_t)a1 + v70[19] - *(void *)a2)
                                               && (v71 < 0x29
                                                || (uint64_t v75 = v70[20]) == 0
                                                || (uint64_t result = 0, v76 = *(void *)(a2 + 8), v76 >= 2)
                                                && v76 - 1 >= (unint64_t)a1 + v75 - *(void *)a2)))
                                            {
LABEL_150:
                                              uint64_t result = sub_2AF5DC(a1, a2, 0x2Au, 2);
                                              if (result)
                                              {
                                                uint64_t v77 = (unsigned __int16 *)((char *)a1 - *a1);
                                                unsigned int v78 = *v77;
                                                if (v78 < 0x2D
                                                  || (!v77[22]
                                                   || (uint64_t result = 0, v79 = *(void *)(a2 + 8), v79 >= 2)
                                                   && v79 - 1 >= (unint64_t)a1 + v77[22] - *(void *)a2)
                                                  && (v78 < 0x2F
                                                   || (!v77[23]
                                                    || (uint64_t result = 0, v80 = *(void *)(a2 + 8), v80 >= 2)
                                                    && v80 - 1 >= (unint64_t)a1 + v77[23] - *(void *)a2)
                                                   && (v78 < 0x31
                                                    || (uint64_t v81 = v77[24]) == 0
                                                    || (uint64_t result = 0, v82 = *(void *)(a2 + 8), v82 >= 2)
                                                    && v82 - 1 >= (unint64_t)a1 + v81 - *(void *)a2)))
                                                {
                                                  uint64_t result = sub_2A7CE0(a1, a2, 0x32u);
                                                  if (result)
                                                  {
                                                    uint64_t v83 = (unsigned __int16 *)((char *)a1 - *a1);
                                                    if (*v83 >= 0x33u && (uint64_t v84 = v83[25]) != 0) {
                                                      uint64_t v85 = (unsigned int *)((char *)a1
                                                    }
                                                                           + v84
                                                                           + *(unsigned int *)((char *)a1 + v84));
                                                    else {
                                                      uint64_t v85 = 0;
                                                    }
                                                    uint64_t result = sub_2B0C38(a2, v85);
                                                    if (result)
                                                    {
                                                      uint64_t v86 = (unsigned __int16 *)((char *)a1 - *a1);
                                                      if (*v86 < 0x35u
                                                        || (uint64_t v87 = v86[26]) == 0
                                                        || (uint64_t result = 0, v88 = *(void *)(a2 + 8), v88 >= 2)
                                                        && v88 - 1 >= (unint64_t)a1 + v87 - *(void *)a2)
                                                      {
                                                        uint64_t result = sub_2A7CE0(a1, a2, 0x38u);
                                                        if (result)
                                                        {
                                                          uint64_t v89 = (unsigned __int16 *)((char *)a1 - *a1);
                                                          if (*v89 < 0x39u
                                                            || (uint64_t v90 = v89[28]) == 0
                                                            || (uint64_t result = sub_2C0FD8((int *)((char *)a1+ v90+ *(unsigned int *)((char *)a1 + v90)), a2), result))
                                                          {
                                                            uint64_t result = sub_2A7CE0(a1, a2, 0x3Au);
                                                            if (result)
                                                            {
                                                              uint64_t v91 = (unsigned __int16 *)((char *)a1 - *a1);
                                                              if (*v91 >= 0x3Bu && (uint64_t v92 = v91[29]) != 0) {
                                                                uint64_t v93 = (unsigned int *)((char *)a1
                                                              }
                                                                                     + v92
                                                                                     + *(unsigned int *)((char *)a1 + v92));
                                                              else {
                                                                uint64_t v93 = 0;
                                                              }
                                                              uint64_t result = sub_2B0C38(a2, v93);
                                                              if (result)
                                                              {
                                                                uint64_t v94 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                unsigned int v95 = *v94;
                                                                if (v95 < 0x3D
                                                                  || (!v94[30]
                                                                   || (uint64_t result = 0, v96 = *(void *)(a2 + 8), v96 >= 2)
                                                                   && v96 - 1 >= (unint64_t)a1
                                                                               + v94[30]
                                                                               - *(void *)a2)
                                                                  && (v95 < 0x3F
                                                                   || (uint64_t v97 = v94[31]) == 0
                                                                   || (uint64_t result = 0, v98 = *(void *)(a2 + 8), v98 >= 2)
                                                                   && v98 - 1 >= (unint64_t)a1
                                                                               + v97
                                                                               - *(void *)a2))
                                                                {
                                                                  uint64_t result = sub_2A7CE0(a1, a2, 0x40u);
                                                                  if (result)
                                                                  {
                                                                    unint64_t v99 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                    if (*v99 < 0x41u
                                                                      || (uint64_t v100 = v99[32]) == 0
                                                                      || (uint64_t result = sub_2C0DD8((int *)((char *)a1+ v100+ *(unsigned int *)((char *)a1 + v100)), a2), result))
                                                                    {
                                                                      uint64_t result = sub_2A7CE0(a1, a2, 0x42u);
                                                                      if (result)
                                                                      {
                                                                        uint64_t v101 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                        if (*v101 < 0x43u
                                                                          || (uint64_t v102 = v101[33]) == 0
                                                                          || (uint64_t result = sub_2C0DD8((int *)((char *)a1+ v102+ *(unsigned int *)((char *)a1 + v102)), a2), result))
                                                                        {
                                                                          uint64_t result = sub_2A7CE0(a1, a2, 0x44u);
                                                                          if (result)
                                                                          {
                                                                            uint64_t v103 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                            if (*v103 >= 0x45u
                                                                              && (uint64_t v104 = v103[34]) != 0)
                                                                            {
                                                                              long long v105 = (unsigned int *)((char *)a1 + v104 + *(unsigned int *)((char *)a1 + v104));
                                                                            }
                                                                            else
                                                                            {
                                                                              long long v105 = 0;
                                                                            }
                                                                            uint64_t result = sub_2B0F20(a2, v105);
                                                                            if (result)
                                                                            {
                                                                              uint64_t result = sub_2A7CE0(a1, a2, 0x46u);
                                                                              if (result)
                                                                              {
                                                                                uint64_t v106 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                if (*v106 < 0x47u
                                                                                  || (uint64_t v107 = v106[35]) == 0
                                                                                  || (uint64_t result = sub_2C3364((int *)((char *)a1 + v107 + *(unsigned int *)((char *)a1 + v107)), (uint64_t *)a2), result))
                                                                                {
                                                                                  uint64_t result = sub_2A7CE0(a1, a2, 0x48u);
                                                                                  if (result)
                                                                                  {
                                                                                    unint64_t v108 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                    if (*v108 >= 0x49u
                                                                                      && (uint64_t v109 = v108[36]) != 0)
                                                                                    {
                                                                                      unint64_t v110 = (unsigned int *)((char *)a1 + v109 + *(unsigned int *)((char *)a1 + v109));
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      unint64_t v110 = 0;
                                                                                    }
                                                                                    uint64_t result = sub_2B0F20(a2, v110);
                                                                                    if (result)
                                                                                    {
                                                                                      uint64_t result = sub_2A7CE0(a1, a2, 0x4Au);
                                                                                      if (result)
                                                                                      {
                                                                                        uint64_t v111 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                        if (*v111 >= 0x4Bu
                                                                                          && (uint64_t v112 = v111[37]) != 0)
                                                                                        {
                                                                                          long long v113 = (unsigned int *)((char *)a1 + v112 + *(unsigned int *)((char *)a1 + v112));
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          long long v113 = 0;
                                                                                        }
                                                                                        uint64_t result = sub_2B0C38(a2, v113);
                                                                                        if (result)
                                                                                        {
                                                                                          uint64_t v114 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                          unsigned int v115 = *v114;
                                                                                          if (v115 < 0x4D
                                                                                            || (!v114[38]
                                                                                             || (uint64_t result = 0,
                                                                                                 unint64_t v116 = *(void *)(a2 + 8),
                                                                                                 v116 >= 2)
                                                                                             && v116 - 1 >= (unint64_t)a1 + v114[38] - *(void *)a2)
                                                                                            && (v115 < 0x4F
                                                                                             || (uint64_t v117 = v114[39]) == 0
                                                                                             || (uint64_t result = 0,
                                                                                                 unint64_t v118 = *(void *)(a2 + 8),
                                                                                                 v118 >= 2)
                                                                                             && v118 - 1 >= (unint64_t)a1 + v117 - *(void *)a2))
                                                                                          {
                                                                                            uint64_t result = sub_2A7CE0(a1, a2, 0x50u);
                                                                                            if (result)
                                                                                            {
                                                                                              uint64_t v119 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                              if (*v119 >= 0x51u
                                                                                                && (uint64_t v120 = v119[40]) != 0)
                                                                                              {
                                                                                                uint64_t v121 = (unsigned int *)((char *)a1 + v120 + *(unsigned int *)((char *)a1 + v120));
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                uint64_t v121 = 0;
                                                                                              }
                                                                                              uint64_t result = sub_2B0C38(a2, v121);
                                                                                              if (result)
                                                                                              {
                                                                                                uint64_t result = sub_2B0118(a1, a2, 0x52u, 4);
                                                                                                if (result)
                                                                                                {
                                                                                                  uint64_t result = sub_2A7CE0(a1, a2, 0x54u);
                                                                                                  if (result)
                                                                                                  {
                                                                                                    uint64_t v122 = *a1;
                                                                                                    uint64_t v123 = -v122;
                                                                                                    uint64_t v124 = (unsigned __int16 *)((char *)a1 - v122);
                                                                                                    if (*v124 >= 0x55u)
                                                                                                    {
                                                                                                      uint64_t v125 = v124[42];
                                                                                                      if (v125)
                                                                                                      {
                                                                                                        uint64_t result = sub_2C3468((int *)((char *)a1 + v125 + *(unsigned int *)((char *)a1 + v125)), a2);
                                                                                                        if (!result) {
                                                                                                          return result;
                                                                                                        }
                                                                                                        uint64_t v123 = -(uint64_t)*a1;
                                                                                                      }
                                                                                                    }
                                                                                                    uint64_t v126 = (unsigned __int16 *)((char *)a1 + v123);
                                                                                                    if (*v126 < 0x57u || (v127 = v126[43]) == 0 || (uint64_t result = 0, v128 = *(void *)(a2 + 8), v128 >= 2) && v128 - 1 >= (unint64_t)a1 + v127 - *(void *)a2)
                                                                                                    {
                                                                                                      --*(_DWORD *)(a2 + 40);
                                                                                                      return 1;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2C3364(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (unint64_t)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  BOOL v7 = v6 >= 5 && v6 - 4 >= v3;
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a2 + 10);
  unsigned int v10 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v9 + 1;
  *((_DWORD *)a2 + 11) = v10;
  if ((v9 + 1) > *((_DWORD *)a2 + 4) || v10 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v13 = v3 - v8;
  if ((v3 - v8))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v7 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v7 || v16 < v13) {
    return 0;
  }
  unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 < 5u) {
    goto LABEL_35;
  }
  uint64_t v19 = v18[2];
  if (!v19) {
    goto LABEL_35;
  }
  unint64_t v20 = v3 + v19;
  if ((v20 & 7) != 0 && v4) {
    return 0;
  }
  uint64_t v14 = 0;
  if (v6 >= 9 && v6 - 8 >= v20)
  {
LABEL_35:
    *((_DWORD *)a2 + 10) = v9;
    return 1;
  }
  return v14;
}

uint64_t sub_2C3468(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 40);
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  BOOL v16 = v12 + 1 > v15 || v13 > v14;
  if (v16) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  unsigned int v21 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v22 = *v21;
  if (v22 >= 5)
  {
    uint64_t v23 = v21[2];
    if (v21[2])
    {
      uint64_t v24 = &v3[v23];
      BOOL v26 = ((unint64_t)&v3[v23] & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v24 || !v26) {
        return 0;
      }
      uint64_t v27 = *(unsigned int *)&v24[v2];
      if ((int)v27 < 1 || v7 - 1 < (unint64_t)&v24[v27]) {
        return 0;
      }
      uint64_t v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
      BOOL v29 = (char *)v28 - v2;
      BOOL v31 = (((unint64_t)v28 - v2) & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v29 || !v31) {
        return 0;
      }
      uint64_t v32 = *v28;
      if (v32 > 0x7FFFFFFE) {
        return 0;
      }
      unint64_t v33 = v32 + 4;
      unint64_t v34 = (unint64_t)&v29[v32 + 4];
      BOOL v35 = v7 - 1 >= v34 && v7 > v33;
      BOOL v36 = v35 && v7 - v33 >= (unint64_t)v29;
      if (!v36 || *(unsigned char *)(v2 + v34)) {
        return 0;
      }
    }
    if (v22 < 7) {
      goto LABEL_88;
    }
    uint64_t v37 = v21[3];
    if (!v37) {
      goto LABEL_88;
    }
    unint64_t v38 = (unint64_t)&v3[v37];
    BOOL v40 = (v38 & 3) == 0 || v4 == 0;
    if (v8 < v38 || !v40) {
      return 0;
    }
    uint64_t v41 = *(unsigned int *)(v2 + v38);
    if ((int)v41 >= 1 && v7 - 1 >= v38 + v41)
    {
      BOOL v42 = (unsigned int *)((char *)a1 + v37 + *(unsigned int *)((char *)a1 + v37));
      uint64_t v43 = (char *)v42 - v2;
      BOOL v45 = (v43 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v43 || !v45) {
        return 0;
      }
      uint64_t v46 = *v42;
      if (v46 <= 0x1FFFFFFE)
      {
        unint64_t v47 = 4 * v46 + 4;
        BOOL v16 = v7 > v47;
        unint64_t v48 = v7 - v47;
        if (!v16 || v48 < (unint64_t)v43) {
          return 0;
        }
        if (v46)
        {
          unint64_t v49 = 0;
          uint64_t v50 = v42 + 1;
          while ((sub_2C370C((int *)((char *)v50 + *v50), a2) & 1) != 0)
          {
            ++v49;
            ++v50;
            if (v49 >= *v42)
            {
              int v12 = *(_DWORD *)(a2 + 40) - 1;
              goto LABEL_88;
            }
          }
          return 0;
        }
        goto LABEL_88;
      }
    }
    return 0;
  }
LABEL_88:
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

uint64_t sub_2C370C(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  unint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_88;
  }
  uint64_t v22 = v20[2];
  if (v20[2])
  {
    uint64_t result = 0;
    uint64_t v23 = &v3[v22];
    BOOL v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v23 || !v25) {
      return result;
    }
    uint64_t v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26]) {
      return 0;
    }
    uint64_t result = 0;
    uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    uint64_t v28 = (char *)v27 - v2;
    BOOL v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    BOOL v30 = v29;
    if (v8 < (unint64_t)v28 || !v30) {
      return result;
    }
    uint64_t v31 = *v27;
    if (v31 > 0x7FFFFFFE) {
      return 0;
    }
    unint64_t v32 = v31 + 4;
    unint64_t v33 = (unint64_t)&v28[v31 + 4];
    BOOL v34 = v7 - 1 >= v33 && v7 > v32;
    BOOL v35 = v34 && v7 - v32 >= (unint64_t)v28;
    if (!v35 || *(unsigned char *)(v2 + v33)) {
      return 0;
    }
  }
  if (v21 < 7) {
    goto LABEL_88;
  }
  if (v20[3] && v7 - 1 < (unint64_t)&v3[v20[3]]) {
    return 0;
  }
  if (v21 < 9 || (uint64_t v36 = v20[4]) == 0)
  {
LABEL_88:
    uint64_t result = sub_2A7CE0(a1, a2, 0xAu);
    if (result)
    {
      unint64_t v48 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v48 >= 0xBu && (uint64_t v49 = v48[5]) != 0) {
        uint64_t v50 = (unsigned int *)((char *)a1 + v49 + *(unsigned int *)((char *)a1 + v49));
      }
      else {
        uint64_t v50 = 0;
      }
      uint64_t result = sub_2A7D68(a2, v50);
      if (result)
      {
        uint64_t v51 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v51 >= 0xBu && (uint64_t v52 = v51[5]) != 0) {
          unint64_t v53 = (int *)((char *)a1 + v52 + *(unsigned int *)((char *)a1 + v52));
        }
        else {
          unint64_t v53 = 0;
        }
        uint64_t result = sub_2BA3F0((uint64_t *)a2, v53);
        if (result)
        {
          --*(_DWORD *)(a2 + 40);
          return 1;
        }
      }
    }
    return result;
  }
  uint64_t result = 0;
  unint64_t v37 = (unint64_t)&v3[v36];
  BOOL v39 = (v37 & 3) == 0 || v4 == 0;
  if (v8 >= v37 && v39)
  {
    uint64_t v40 = *(unsigned int *)(v2 + v37);
    if ((int)v40 < 1 || v7 - 1 < v37 + v40) {
      return 0;
    }
    uint64_t result = 0;
    uint64_t v41 = (unsigned int *)((char *)a1 + v36 + *(unsigned int *)((char *)a1 + v36));
    BOOL v42 = (char *)v41 - v2;
    BOOL v43 = (((unint64_t)v41 - v2) & 3) == 0 || v4 == 0;
    BOOL v44 = v43;
    if (v8 >= (unint64_t)v42 && v44)
    {
      uint64_t v45 = *v41;
      if (v45 > 0x7FFFFFFE) {
        return 0;
      }
      uint64_t result = 0;
      unint64_t v46 = v45 + 4;
      unint64_t v47 = (unint64_t)&v42[v45 + 4];
      if (v7 - 1 < v47 || v7 <= v46 || v7 - v46 < (unint64_t)v42) {
        return result;
      }
      if (*(unsigned char *)(v2 + v47)) {
        return 0;
      }
      goto LABEL_88;
    }
  }
  return result;
}

uint64_t sub_2C3A24(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_65;
  }
  uint64_t v21 = v19[2];
  if (!v19[2]) {
    goto LABEL_69;
  }
  unint64_t v22 = (unint64_t)&v3[v21];
  if (((unint64_t)&v3[v21] & 3) != 0 && v4) {
    return 0;
  }
  uint64_t v14 = 0;
  if (v6 >= 9 && v6 - 8 >= v22)
  {
LABEL_69:
    if (v20 < 7) {
      goto LABEL_65;
    }
    uint64_t v23 = v19[3];
    if (v19[3])
    {
      unint64_t v24 = (unint64_t)&v3[v23];
      if (((unint64_t)&v3[v23] & 3) != 0 && v4) {
        return 0;
      }
      uint64_t v14 = 0;
      if (v6 < 9 || v6 - 8 < v24) {
        return v14;
      }
    }
    if (v20 < 9 || (uint64_t v25 = v19[4]) == 0)
    {
LABEL_65:
      *((_DWORD *)a2 + 10) = v10;
      return 1;
    }
    uint64_t v14 = 0;
    unint64_t v26 = (unint64_t)&v3[v25];
    BOOL v28 = (v26 & 3) == 0 || v4 == 0;
    if (v7 >= v26 && v28)
    {
      uint64_t v29 = *(unsigned int *)(v2 + v26);
      if ((int)v29 < 1 || v6 - 1 < v26 + v29) {
        return 0;
      }
      uint64_t v14 = 0;
      BOOL v30 = (int *)((char *)a1 + v25 + *(unsigned int *)((char *)a1 + v25));
      uint64_t v31 = (char *)v30 - v2;
      BOOL v32 = (v31 & 3) == 0 || v4 == 0;
      BOOL v33 = v32;
      if (v7 >= (unint64_t)v31 && v33)
      {
        if (*v30 > 0xAAAAAA9u) {
          return 0;
        }
        unint64_t v34 = 12 * *v30 + 4;
        BOOL v8 = v6 >= v34;
        unint64_t v35 = v6 - v34;
        if (v35 == 0 || !v8 || v35 < (unint64_t)v31) {
          return 0;
        }
        goto LABEL_65;
      }
    }
  }
  return v14;
}

uint64_t sub_2C3C04(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  unsigned int v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_84;
  }
  if (!v20[2]) {
    goto LABEL_124;
  }
  unint64_t v22 = (unint64_t)&v3[v20[2]];
  if ((v22 & 7) != 0 && v4) {
    return 0;
  }
  uint64_t result = 0;
  if (v7 >= 9 && v7 - 8 >= v22)
  {
LABEL_124:
    if (v21 < 7) {
      goto LABEL_84;
    }
    uint64_t v23 = v20[3];
    if (v20[3])
    {
      uint64_t result = 0;
      unint64_t v24 = &v3[v23];
      BOOL v26 = ((unint64_t)&v3[v23] & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)&v24[v2];
      if ((int)v27 < 1 || v7 - 1 < (unint64_t)&v24[v27]) {
        return 0;
      }
      uint64_t result = 0;
      BOOL v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
      uint64_t v29 = (char *)v28 - v2;
      BOOL v30 = (((unint64_t)v28 - v2) & 3) == 0 || v4 == 0;
      BOOL v31 = v30;
      if (v8 < (unint64_t)v29 || !v31) {
        return result;
      }
      uint64_t v32 = *v28;
      if (v32 > 0xFFFFFFE) {
        return 0;
      }
      uint64_t result = 0;
      unint64_t v33 = (8 * v32) | 4;
      BOOL v9 = v7 >= v33;
      unint64_t v34 = v7 - v33;
      if (v34 == 0 || !v9 || v34 < (unint64_t)v29) {
        return result;
      }
    }
    if (v21 < 9 || (uint64_t v35 = v20[4]) == 0)
    {
LABEL_84:
      uint64_t result = sub_2A7CE0(a1, a2, 0xAu);
      if (result)
      {
        unint64_t v47 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v47 >= 0xBu && (uint64_t v48 = v47[5]) != 0) {
          uint64_t v49 = (unsigned int *)((char *)a1 + v48 + *(unsigned int *)((char *)a1 + v48));
        }
        else {
          uint64_t v49 = 0;
        }
        uint64_t result = sub_2AFF48((uint64_t *)a2, v49);
        if (result)
        {
          uint64_t v50 = (unsigned __int16 *)((char *)a1 - *a1);
          unsigned int v51 = *v50;
          if (v51 < 0xD
            || (!v50[6]
             || (result = 0, unint64_t v52 = *(void *)(a2 + 8), v52 >= 2)
             && v52 - 1 >= (unint64_t)a1 + v50[6] - *(void *)a2)
            && (v51 < 0x11
             || (uint64_t v53 = v50[8]) == 0
             || (uint64_t result = 0, v54 = *(void *)(a2 + 8), v54 >= 2)
             && v54 - 1 >= (unint64_t)a1 + v53 - *(void *)a2))
          {
            uint64_t result = sub_2A7CE0(a1, a2, 0x12u);
            if (result)
            {
              uint64_t v55 = (unsigned __int16 *)((char *)a1 - *a1);
              if (*v55 >= 0x13u && (uint64_t v56 = v55[9]) != 0) {
                uint64_t v57 = (unsigned int *)((char *)a1 + v56 + *(unsigned int *)((char *)a1 + v56));
              }
              else {
                uint64_t v57 = 0;
              }
              uint64_t result = sub_2B0C38(a2, v57);
              if (result)
              {
                uint64_t result = sub_2A7CE0(a1, a2, 0x14u);
                if (result)
                {
                  uint64_t v58 = (unsigned __int16 *)((char *)a1 - *a1);
                  if (*v58 >= 0x15u && (uint64_t v59 = v58[10]) != 0) {
                    unsigned int v60 = (unsigned int *)((char *)a1 + v59 + *(unsigned int *)((char *)a1 + v59));
                  }
                  else {
                    unsigned int v60 = 0;
                  }
                  uint64_t result = sub_2B0C38(a2, v60);
                  if (result)
                  {
                    uint64_t result = sub_2A7CE0(a1, a2, 0x16u);
                    if (result)
                    {
                      uint64_t v61 = (unsigned __int16 *)((char *)a1 - *a1);
                      if (*v61 >= 0x17u && (uint64_t v62 = v61[11]) != 0) {
                        uint64_t v63 = (unsigned int *)((char *)a1 + v62 + *(unsigned int *)((char *)a1 + v62));
                      }
                      else {
                        uint64_t v63 = 0;
                      }
                      uint64_t result = sub_2A7D68(a2, v63);
                      if (result)
                      {
                        BOOL v64 = (unsigned __int16 *)((char *)a1 - *a1);
                        if (*v64 >= 0x17u && (uint64_t v65 = v64[11]) != 0) {
                          uint64_t v66 = (int *)((char *)a1 + v65 + *(unsigned int *)((char *)a1 + v65));
                        }
                        else {
                          uint64_t v66 = 0;
                        }
                        uint64_t result = sub_2B117C(a2, v66);
                        if (result)
                        {
                          --*(_DWORD *)(a2 + 40);
                          return 1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return result;
    }
    uint64_t result = 0;
    unint64_t v36 = (unint64_t)&v3[v35];
    BOOL v38 = (v36 & 3) == 0 || v4 == 0;
    if (v8 >= v36 && v38)
    {
      uint64_t v39 = *(unsigned int *)(v2 + v36);
      if ((int)v39 < 1 || v7 - 1 < v36 + v39) {
        return 0;
      }
      uint64_t result = 0;
      uint64_t v40 = (unsigned int *)((char *)a1 + v35 + *(unsigned int *)((char *)a1 + v35));
      uint64_t v41 = (char *)v40 - v2;
      BOOL v42 = (v41 & 3) == 0 || v4 == 0;
      BOOL v43 = v42;
      if (v8 >= (unint64_t)v41 && v43)
      {
        uint64_t v44 = *v40;
        if (v44 <= 0xFFFFFFE)
        {
          uint64_t result = 0;
          unint64_t v45 = (8 * v44) | 4;
          BOOL v15 = v7 > v45;
          unint64_t v46 = v7 - v45;
          if (!v15 || v46 < (unint64_t)v41) {
            return result;
          }
          goto LABEL_84;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_2C4084(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  unsigned int v12 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  if (v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v15 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v15) {
      return 0;
    }
  }
  else if (v7 - 2 < v15)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v16;
  unint64_t v17 = v7 - v16;
  if (v17 == 0 || !v9 || v17 < v15) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_70;
  }
  uint64_t v21 = v19[2];
  if (v19[2])
  {
    if (((unint64_t)&v3[v21] & 7) != 0 && v4) {
      return 0;
    }
    if (v7 < 9 || v7 - 8 < (unint64_t)&v3[v21]) {
      return 0;
    }
  }
  if (v20 < 7) {
    goto LABEL_70;
  }
  uint64_t v22 = v19[3];
  if (v19[3])
  {
    if (((unint64_t)&v3[v22] & 3) != 0 && v4) {
      return 0;
    }
    if (v7 < 9 || v7 - 8 < (unint64_t)&v3[v22]) {
      return 0;
    }
  }
  if (v20 < 9) {
    goto LABEL_70;
  }
  uint64_t v23 = v19[4];
  if (v19[4])
  {
    if (((unint64_t)&v3[v23] & 3) != 0 && v4) {
      return 0;
    }
    if (v7 < 9 || v7 - 8 < (unint64_t)&v3[v23]) {
      return 0;
    }
  }
  if (v20 < 0xB) {
    goto LABEL_70;
  }
  uint64_t v24 = v19[5];
  if (v19[5])
  {
    uint64_t v25 = &v3[v24];
    BOOL v26 = ((unint64_t)&v3[v24] & 3) == 0 || v4 == 0;
    BOOL v27 = v26;
    if (v8 < (unint64_t)v25 || !v27) {
      return 0;
    }
  }
  if (v20 >= 0xD && (uint64_t v28 = v19[6]) != 0)
  {
    unint64_t v29 = (unint64_t)&v3[v28];
    BOOL v31 = (v29 & 3) == 0 || v4 == 0;
    if (v8 < v29 || !v31) {
      return 0;
    }
    uint64_t v32 = *(unsigned int *)(v2 + v29);
    if ((int)v32 < 1 || v7 - 1 < v29 + v32) {
      return 0;
    }
    unint64_t v33 = (unsigned int *)((char *)a1 + v28 + *(unsigned int *)((char *)a1 + v28));
  }
  else
  {
LABEL_70:
    unint64_t v33 = 0;
  }
  if (!sub_2B0F20(a2, v33)) {
    return 0;
  }
  --*(_DWORD *)(a2 + 40);
  return 1;
}

uint64_t sub_2C42D8(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 40);
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  if (v12 + 1 > v15 || v13 > v14) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  uint64_t v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1
        || v7 - 1 < v23 + v26
        || !sub_2A7ECC((int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22)), (uint64_t *)a2))
      {
        return 0;
      }
      int v12 = *(_DWORD *)(a2 + 40) - 1;
    }
  }
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

uint64_t sub_2C444C(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  unsigned int v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_70;
  }
  if (!v20[2]) {
    goto LABEL_201;
  }
  unint64_t v22 = (unint64_t)&v3[v20[2]];
  if ((v22 & 7) != 0 && v4) {
    return 0;
  }
  uint64_t result = 0;
  if (v7 >= 9 && v7 - 8 >= v22)
  {
LABEL_201:
    if (v21 < 7) {
      goto LABEL_70;
    }
    if (v20[3])
    {
      unint64_t v23 = (unint64_t)&v3[v20[3]];
      if ((v23 & 3) != 0 && v4) {
        return 0;
      }
      uint64_t result = 0;
      if (v7 < 9 || v7 - 8 < v23) {
        return result;
      }
    }
    if (v21 < 9 || (uint64_t v24 = v20[4]) == 0)
    {
LABEL_70:
      uint64_t result = sub_2A7CE0(a1, a2, 0xAu);
      if (result)
      {
        uint64_t v39 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v39 >= 0xBu && (uint64_t v40 = v39[5]) != 0) {
          uint64_t v41 = (unsigned int *)((char *)a1 + v40 + *(unsigned int *)((char *)a1 + v40));
        }
        else {
          uint64_t v41 = 0;
        }
        uint64_t result = sub_2B0C38(a2, v41);
        if (result)
        {
          uint64_t result = sub_2A7CE0(a1, a2, 0xCu);
          if (result)
          {
            BOOL v42 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v42 >= 0xDu && (uint64_t v43 = v42[6]) != 0) {
              uint64_t v44 = (unsigned int *)((char *)a1 + v43 + *(unsigned int *)((char *)a1 + v43));
            }
            else {
              uint64_t v44 = 0;
            }
            uint64_t result = sub_2B0C38(a2, v44);
            if (result)
            {
              uint64_t result = sub_2A7CE0(a1, a2, 0xEu);
              if (result)
              {
                unint64_t v45 = (unsigned __int16 *)((char *)a1 - *a1);
                if (*v45 >= 0xFu && (uint64_t v46 = v45[7]) != 0) {
                  unint64_t v47 = (unsigned int *)((char *)a1 + v46 + *(unsigned int *)((char *)a1 + v46));
                }
                else {
                  unint64_t v47 = 0;
                }
                uint64_t result = sub_2B0C38(a2, v47);
                if (result)
                {
                  uint64_t result = sub_2A7CE0(a1, a2, 0x10u);
                  if (result)
                  {
                    uint64_t v48 = (unsigned __int16 *)((char *)a1 - *a1);
                    if (*v48 >= 0x11u && (uint64_t v49 = v48[8]) != 0) {
                      uint64_t v50 = (unsigned int *)((char *)a1 + v49 + *(unsigned int *)((char *)a1 + v49));
                    }
                    else {
                      uint64_t v50 = 0;
                    }
                    uint64_t result = sub_2B0C38(a2, v50);
                    if (result)
                    {
                      uint64_t result = sub_2AFEE4(a1, a2, 0x12u, 4);
                      if (result)
                      {
                        unsigned int v51 = (unsigned __int16 *)((char *)a1 - *a1);
                        if (*v51 < 0x15u
                          || (uint64_t v52 = v51[10]) == 0
                          || (uint64_t result = 0, v53 = *(void *)(a2 + 8), v53 >= 2)
                          && v53 - 1 >= (unint64_t)a1 + v52 - *(void *)a2)
                        {
                          uint64_t result = sub_2AF5DC(a1, a2, 0x16u, 2);
                          if (result)
                          {
                            uint64_t result = sub_2AF5DC(a1, a2, 0x18u, 2);
                            if (result)
                            {
                              uint64_t result = sub_2B16B4(a1, a2, 0x1Au, 4);
                              if (result)
                              {
                                uint64_t result = sub_2A7CE0(a1, a2, 0x1Cu);
                                if (result)
                                {
                                  unint64_t v54 = (unsigned __int16 *)((char *)a1 - *a1);
                                  if (*v54 >= 0x1Du && (uint64_t v55 = v54[14]) != 0) {
                                    uint64_t v56 = (unsigned int *)((char *)a1 + v55 + *(unsigned int *)((char *)a1 + v55));
                                  }
                                  else {
                                    uint64_t v56 = 0;
                                  }
                                  uint64_t result = sub_2A7D68(a2, v56);
                                  if (result)
                                  {
                                    uint64_t v57 = (unsigned __int16 *)((char *)a1 - *a1);
                                    if (*v57 >= 0x1Du && (uint64_t v58 = v57[14]) != 0) {
                                      uint64_t v59 = (int *)((char *)a1 + v58 + *(unsigned int *)((char *)a1 + v58));
                                    }
                                    else {
                                      uint64_t v59 = 0;
                                    }
                                    uint64_t result = sub_2C1FFC((uint64_t *)a2, v59);
                                    if (result)
                                    {
                                      uint64_t result = sub_2A7CE0(a1, a2, 0x1Eu);
                                      if (result)
                                      {
                                        unsigned int v60 = (unsigned __int16 *)((char *)a1 - *a1);
                                        if (*v60 >= 0x1Fu && (uint64_t v61 = v60[15]) != 0) {
                                          uint64_t v62 = (unsigned int *)((char *)a1 + v61 + *(unsigned int *)((char *)a1 + v61));
                                        }
                                        else {
                                          uint64_t v62 = 0;
                                        }
                                        uint64_t result = sub_2A7D68(a2, v62);
                                        if (result)
                                        {
                                          uint64_t v63 = (unsigned __int16 *)((char *)a1 - *a1);
                                          if (*v63 >= 0x1Fu && (uint64_t v64 = v63[15]) != 0) {
                                            uint64_t v65 = (int *)((char *)a1 + v64 + *(unsigned int *)((char *)a1 + v64));
                                          }
                                          else {
                                            uint64_t v65 = 0;
                                          }
                                          uint64_t result = sub_2C4DD4(a2, v65);
                                          if (result)
                                          {
                                            uint64_t result = sub_2A7CE0(a1, a2, 0x20u);
                                            if (result)
                                            {
                                              uint64_t v66 = (unsigned __int16 *)((char *)a1 - *a1);
                                              if (*v66 >= 0x21u && (uint64_t v67 = v66[16]) != 0) {
                                                uint64_t v68 = (unsigned int *)((char *)a1
                                              }
                                                                     + v67
                                                                     + *(unsigned int *)((char *)a1 + v67));
                                              else {
                                                uint64_t v68 = 0;
                                              }
                                              uint64_t result = sub_2B0C38(a2, v68);
                                              if (result)
                                              {
                                                unint64_t v69 = (unsigned __int16 *)((char *)a1 - *a1);
                                                if (*v69 < 0x23u
                                                  || (uint64_t v70 = v69[17]) == 0
                                                  || (uint64_t result = 0, v71 = *(void *)(a2 + 8), v71 >= 2)
                                                  && v71 - 1 >= (unint64_t)a1 + v70 - *(void *)a2)
                                                {
                                                  uint64_t result = sub_2A7CE0(a1, a2, 0x26u);
                                                  if (result)
                                                  {
                                                    unint64_t v72 = (unsigned __int16 *)((char *)a1 - *a1);
                                                    if (*v72 < 0x27u
                                                      || (uint64_t v73 = v72[19]) == 0
                                                      || (uint64_t result = sub_2C0FD8((int *)((char *)a1+ v73+ *(unsigned int *)((char *)a1 + v73)), a2), result))
                                                    {
                                                      uint64_t result = sub_2A7CE0(a1, a2, 0x28u);
                                                      if (result)
                                                      {
                                                        unint64_t v74 = (unsigned __int16 *)((char *)a1 - *a1);
                                                        if (*v74 >= 0x29u && (uint64_t v75 = v74[20]) != 0) {
                                                          unint64_t v76 = (unsigned int *)((char *)a1
                                                        }
                                                                               + v75
                                                                               + *(unsigned int *)((char *)a1 + v75));
                                                        else {
                                                          unint64_t v76 = 0;
                                                        }
                                                        uint64_t result = sub_2A7D68(a2, v76);
                                                        if (result)
                                                        {
                                                          uint64_t v77 = (unsigned __int16 *)((char *)a1 - *a1);
                                                          if (*v77 >= 0x29u && (uint64_t v78 = v77[20]) != 0) {
                                                            unint64_t v79 = (int *)((char *)a1
                                                          }
                                                                        + v78
                                                                        + *(unsigned int *)((char *)a1 + v78));
                                                          else {
                                                            unint64_t v79 = 0;
                                                          }
                                                          uint64_t result = sub_2C2088(a2, v79);
                                                          if (result)
                                                          {
                                                            uint64_t result = sub_2A7CE0(a1, a2, 0x2Au);
                                                            if (result)
                                                            {
                                                              unint64_t v80 = (unsigned __int16 *)((char *)a1 - *a1);
                                                              if (*v80 >= 0x2Bu && (uint64_t v81 = v80[21]) != 0) {
                                                                unint64_t v82 = (unsigned int *)((char *)a1
                                                              }
                                                                                     + v81
                                                                                     + *(unsigned int *)((char *)a1 + v81));
                                                              else {
                                                                unint64_t v82 = 0;
                                                              }
                                                              uint64_t result = sub_2B0C38(a2, v82);
                                                              if (result)
                                                              {
                                                                uint64_t result = sub_2A7CE0(a1, a2, 0x2Cu);
                                                                if (result)
                                                                {
                                                                  uint64_t v83 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                  if (*v83 >= 0x2Du && (uint64_t v84 = v83[22]) != 0) {
                                                                    uint64_t v85 = (unsigned int *)((char *)a1
                                                                  }
                                                                                         + v84
                                                                                         + *(unsigned int *)((char *)a1 + v84));
                                                                  else {
                                                                    uint64_t v85 = 0;
                                                                  }
                                                                  uint64_t result = sub_2B0C38(a2, v85);
                                                                  if (result)
                                                                  {
                                                                    uint64_t result = sub_2A7CE0(a1, a2, 0x2Eu);
                                                                    if (result)
                                                                    {
                                                                      uint64_t v86 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                      if (*v86 >= 0x2Fu && (uint64_t v87 = v86[23]) != 0) {
                                                                        unint64_t v88 = (unsigned int *)((char *)a1
                                                                      }
                                                                                             + v87
                                                                                             + *(unsigned int *)((char *)a1 + v87));
                                                                      else {
                                                                        unint64_t v88 = 0;
                                                                      }
                                                                      uint64_t result = sub_2B0C38(a2, v88);
                                                                      if (result)
                                                                      {
                                                                        uint64_t result = sub_2A7CE0(a1, a2, 0x30u);
                                                                        if (result)
                                                                        {
                                                                          uint64_t v89 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                          if (*v89 < 0x31u
                                                                            || (uint64_t v90 = v89[24]) == 0
                                                                            || (uint64_t result = sub_2C0B04((int *)((char *)a1+ v90+ *(unsigned int *)((char *)a1 + v90)), a2), result))
                                                                          {
                                                                            uint64_t result = sub_2A7CE0(a1, a2, 0x32u);
                                                                            if (result)
                                                                            {
                                                                              uint64_t v91 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                              if (*v91 >= 0x33u && (uint64_t v92 = v91[25]) != 0) {
                                                                                uint64_t v93 = (unsigned int *)((char *)a1 + v92 + *(unsigned int *)((char *)a1 + v92));
                                                                              }
                                                                              else {
                                                                                uint64_t v93 = 0;
                                                                              }
                                                                              uint64_t result = sub_2B0C38(a2, v93);
                                                                              if (result)
                                                                              {
                                                                                uint64_t result = sub_2A7CE0(a1, a2, 0x34u);
                                                                                if (result)
                                                                                {
                                                                                  uint64_t v94 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                  if (*v94 < 0x35u
                                                                                    || (uint64_t v95 = v94[26]) == 0
                                                                                    || (uint64_t result = sub_2C3364((int *)((char *)a1 + v95 + *(unsigned int *)((char *)a1 + v95)), (uint64_t *)a2), result))
                                                                                  {
                                                                                    uint64_t result = sub_2A7CE0(a1, a2, 0x36u);
                                                                                    if (result)
                                                                                    {
                                                                                      unint64_t v96 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                      if (*v96 >= 0x37u
                                                                                        && (uint64_t v97 = v96[27]) != 0)
                                                                                      {
                                                                                        unint64_t v98 = (unsigned int *)((char *)a1 + v97 + *(unsigned int *)((char *)a1 + v97));
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        unint64_t v98 = 0;
                                                                                      }
                                                                                      uint64_t result = sub_2A7D68(a2, v98);
                                                                                      if (result)
                                                                                      {
                                                                                        unint64_t v99 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                        if (*v99 >= 0x37u
                                                                                          && (uint64_t v100 = v99[27]) != 0)
                                                                                        {
                                                                                          uint64_t v101 = (int *)((char *)a1 + v100 + *(unsigned int *)((char *)a1 + v100));
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          uint64_t v101 = 0;
                                                                                        }
                                                                                        uint64_t result = sub_2C4E60((uint64_t *)a2, v101);
                                                                                        if (result)
                                                                                        {
                                                                                          uint64_t result = sub_2A7CE0(a1, a2, 0x38u);
                                                                                          if (result)
                                                                                          {
                                                                                            uint64_t v102 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                            if (*v102 >= 0x39u
                                                                                              && (uint64_t v103 = v102[28]) != 0)
                                                                                            {
                                                                                              uint64_t v104 = (unsigned int *)((char *)a1 + v103 + *(unsigned int *)((char *)a1 + v103));
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              uint64_t v104 = 0;
                                                                                            }
                                                                                            uint64_t result = sub_2B0C38(a2, v104);
                                                                                            if (result)
                                                                                            {
                                                                                              --*(_DWORD *)(a2 + 40);
                                                                                              return 1;
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return result;
    }
    uint64_t result = 0;
    unint64_t v25 = (unint64_t)&v3[v24];
    BOOL v27 = (v25 & 3) == 0 || v4 == 0;
    if (v8 >= v25 && v27)
    {
      uint64_t v28 = *(unsigned int *)(v2 + v25);
      if ((int)v28 < 1 || v7 - 1 < v25 + v28) {
        return 0;
      }
      uint64_t result = 0;
      unint64_t v29 = (unsigned int *)((char *)a1 + v24 + *(unsigned int *)((char *)a1 + v24));
      BOOL v30 = (char *)v29 - v2;
      BOOL v31 = (v30 & 3) == 0 || v4 == 0;
      BOOL v32 = v31;
      if (v8 >= (unint64_t)v30 && v32)
      {
        uint64_t v33 = *v29;
        if (v33 > 0x1FFFFFFE) {
          return 0;
        }
        uint64_t result = 0;
        unint64_t v34 = 4 * v33 + 4;
        BOOL v15 = v7 > v34;
        unint64_t v35 = v7 - v34;
        if (v15 && v35 >= (unint64_t)v30)
        {
          if (v33)
          {
            unint64_t v36 = 0;
            unint64_t v37 = v29 + 1;
            while (1)
            {
              BOOL v38 = v37;
              if ((sub_2C0B04((int *)((char *)v37 + *v37), a2) & 1) == 0) {
                return 0;
              }
              ++v36;
              unint64_t v37 = v38 + 1;
              if (v36 >= *v29) {
                goto LABEL_70;
              }
            }
          }
          goto LABEL_70;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2C4DD4(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C4EEC((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2C4E60(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C50D0((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2C4EEC(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v10 = *a1;
  int v11 = *(_DWORD *)(a2 + 40);
  unsigned int v12 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v11 + 1;
  *(_DWORD *)(a2 + 44) = v12;
  if ((v11 + 1) > *(_DWORD *)(a2 + 16) || v12 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v10];
  if ((v3 - v10))
  {
    if (v4 || v6 - 2 < v14) {
      return 0;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v14);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v14) {
    return 0;
  }
  unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v19 = *v18;
  if (v19 >= 5)
  {
    uint64_t v20 = v18[2];
    if (v18[2])
    {
      if (((unint64_t)&v3[v20] & 3) != 0 && v4) {
        return 0;
      }
      if (v6 < 9 || v6 - 8 < (unint64_t)&v3[v20]) {
        return 0;
      }
    }
    if (v19 >= 7)
    {
      uint64_t v21 = v18[3];
      if (v18[3])
      {
        if (((unint64_t)&v3[v21] & 3) != 0 && v4) {
          return 0;
        }
        if (v6 < 9 || v6 - 8 < (unint64_t)&v3[v21]) {
          return 0;
        }
      }
      if (v19 >= 9)
      {
        uint64_t v22 = v18[4];
        if (v22)
        {
          unint64_t v23 = (unint64_t)&v3[v22];
          BOOL v25 = (v23 & 3) == 0 || v4 == 0;
          if (v7 < v23 || !v25) {
            return 0;
          }
          uint64_t v26 = *(unsigned int *)(v2 + v23);
          if ((int)v26 < 1) {
            return 0;
          }
          if (v6 - 1 < v23 + v26) {
            return 0;
          }
          uint64_t v27 = a2;
          if (!sub_2C0DD8((int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22)), a2)) {
            return 0;
          }
          a2 = v27;
          int v11 = *(_DWORD *)(v27 + 40) - 1;
        }
      }
    }
  }
  *(_DWORD *)(a2 + 40) = v11;
  return 1;
}

uint64_t sub_2C50D0(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v15 = 0;
    if (v4 || v6 - 2 < v14) {
      return v15;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v14);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v16;
  unint64_t v17 = v6 - v16;
  if (v17 == 0 || !v8 || v17 < v14) {
    return 0;
  }
  unsigned int v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_60;
  }
  uint64_t v21 = v19[2];
  if (v19[2])
  {
    unint64_t v22 = (unint64_t)&v3[v21];
    if (((unint64_t)&v3[v21] & 3) != 0 && v4) {
      return 0;
    }
    uint64_t v15 = 0;
    if (v6 < 9 || v6 - 8 < v22) {
      return v15;
    }
  }
  if (v20 < 7 || (uint64_t v23 = v19[3]) == 0)
  {
LABEL_60:
    *((_DWORD *)a2 + 10) = v10;
    return 1;
  }
  uint64_t v15 = 0;
  unint64_t v24 = (unint64_t)&v3[v23];
  BOOL v26 = (v24 & 3) == 0 || v4 == 0;
  if (v7 >= v24 && v26)
  {
    uint64_t v27 = *(unsigned int *)(v2 + v24);
    if ((int)v27 < 1 || v6 - 1 < v24 + v27) {
      return 0;
    }
    uint64_t v15 = 0;
    uint64_t v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
    unint64_t v29 = (char *)v28 - v2;
    BOOL v30 = (((unint64_t)v28 - v2) & 3) == 0 || v4 == 0;
    BOOL v31 = v30;
    if (v7 >= (unint64_t)v29 && v31)
    {
      uint64_t v32 = *v28;
      if (v32 > 0x7FFFFFFE) {
        return 0;
      }
      uint64_t v15 = 0;
      unint64_t v33 = v32 + 4;
      unint64_t v34 = (unint64_t)&v29[v32 + 4];
      if (v6 - 1 < v34 || v6 <= v33 || v6 - v33 < (unint64_t)v29) {
        return v15;
      }
      if (*(unsigned char *)(v2 + v34)) {
        return 0;
      }
      goto LABEL_60;
    }
  }
  return v15;
}

uint64_t sub_2C528C(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  unsigned int v12 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  BOOL v14 = v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20);
  if (v14) {
    return 0;
  }
  unint64_t v15 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v15) {
      return 0;
    }
  }
  else if (v7 - 2 < v15)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v16;
  unint64_t v17 = v7 - v16;
  if (v17 == 0 || !v9 || v17 < v15) {
    return 0;
  }
  uint64_t v19 = *a1;
  uint64_t v20 = -v19;
  uint64_t v21 = (char *)a1 - v19;
  unsigned int v22 = *(unsigned __int16 *)((char *)a1 - v19);
  if (v22 >= 5)
  {
    uint64_t v23 = *((unsigned __int16 *)v21 + 2);
    if (*((_WORD *)v21 + 2))
    {
      if (((unint64_t)&v3[v23] & 3) != 0 && v4) {
        return 0;
      }
      if (v7 < 9 || v7 - 8 < (unint64_t)&v3[v23]) {
        return 0;
      }
    }
    if (v22 >= 7)
    {
      uint64_t v24 = *((unsigned __int16 *)v21 + 3);
      if (v24)
      {
        unint64_t v25 = (unint64_t)&v3[v24];
        BOOL v27 = (v25 & 3) == 0 || v4 == 0;
        if (v8 < v25 || !v27) {
          return 0;
        }
        uint64_t v28 = *(unsigned int *)(v2 + v25);
        if ((int)v28 < 1 || v7 - 1 < v25 + v28) {
          return 0;
        }
        unint64_t v29 = (unsigned int *)((char *)a1 + v24 + *(unsigned int *)((char *)a1 + v24));
        BOOL v30 = (char *)v29 - v2;
        BOOL v32 = (v30 & 3) == 0 || v4 == 0;
        if (v8 < (unint64_t)v30 || !v32) {
          return 0;
        }
        uint64_t v40 = a1;
        uint64_t v33 = *v29;
        if (v33 > 0x1FFFFFFE) {
          return 0;
        }
        unint64_t v34 = 4 * v33 + 4;
        BOOL v14 = v7 > v34;
        unint64_t v35 = v7 - v34;
        if (!v14 || v35 < (unint64_t)v30) {
          return 0;
        }
        if (v33)
        {
          unint64_t v36 = 0;
          unint64_t v37 = v29 + 1;
          while ((sub_2B1208((int *)((char *)v37 + *v37), a2) & 1) != 0)
          {
            ++v36;
            ++v37;
            if (v36 >= *v29)
            {
              a1 = v40;
              uint64_t v20 = -(uint64_t)*v40;
              goto LABEL_64;
            }
          }
          return 0;
        }
      }
    }
  }
LABEL_64:
  BOOL v38 = (char *)a1 + v20;
  if (*(unsigned __int16 *)((char *)a1 + v20) >= 9u)
  {
    if (*((_WORD *)v38 + 4))
    {
      unint64_t v39 = *(void *)(a2 + 8);
      if (v39 < 2 || v39 - 1 < (unint64_t)a1 + *((unsigned __int16 *)v38 + 4) - *(void *)a2) {
        return 0;
      }
    }
  }
  --*(_DWORD *)(a2 + 40);
  return 1;
}

uint64_t sub_2C5524(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 >= 5)
  {
    if (v20[2])
    {
      unint64_t v22 = (unint64_t)&v3[v20[2]];
      if ((v22 & 7) != 0 && v4) {
        return 0;
      }
      uint64_t result = 0;
      if (v7 < 9 || v7 - 8 < v22) {
        return result;
      }
    }
    if (v21 >= 7)
    {
      if (v20[3])
      {
        unint64_t v23 = (unint64_t)&v3[v20[3]];
        if ((v23 & 3) != 0 && v4) {
          return 0;
        }
        uint64_t result = 0;
        if (v7 < 9 || v7 - 8 < v23) {
          return result;
        }
      }
      if (v21 >= 9)
      {
        uint64_t v24 = v20[4];
        if (v24)
        {
          uint64_t result = 0;
          unint64_t v25 = (unint64_t)&v3[v24];
          BOOL v27 = (v25 & 3) == 0 || v4 == 0;
          if (v8 < v25 || !v27) {
            return result;
          }
          uint64_t v28 = *(unsigned int *)(v2 + v25);
          if ((int)v28 < 1 || v7 - 1 < v25 + v28) {
            return 0;
          }
          uint64_t result = 0;
          unint64_t v29 = (unsigned int *)((char *)a1 + v24 + *(unsigned int *)((char *)a1 + v24));
          BOOL v30 = (char *)v29 - v2;
          BOOL v31 = (v30 & 3) == 0 || v4 == 0;
          BOOL v32 = v31;
          if (v8 < (unint64_t)v30 || !v32) {
            return result;
          }
          uint64_t v33 = *v29;
          if (v33 > 0x1FFFFFFE) {
            return 0;
          }
          uint64_t result = 0;
          unint64_t v34 = 4 * v33 + 4;
          BOOL v15 = v7 > v34;
          unint64_t v35 = v7 - v34;
          if (!v15 || v35 < (unint64_t)v30) {
            return result;
          }
          if (v33)
          {
            unint64_t v36 = 0;
            unint64_t v37 = v29 + 1;
            do
            {
              BOOL v38 = v37;
              if ((sub_2C0B04((int *)((char *)v37 + *v37), a2) & 1) == 0) {
                return 0;
              }
              ++v36;
              unint64_t v37 = v38 + 1;
            }
            while (v36 < *v29);
          }
        }
      }
    }
  }
  uint64_t result = sub_2AFEE4(a1, a2, 0xAu, 4);
  if (result)
  {
    uint64_t result = sub_2AFEE4(a1, a2, 0xCu, 4);
    if (result)
    {
      uint64_t result = sub_2A7CE0(a1, a2, 0xEu);
      if (result)
      {
        unint64_t v39 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v39 >= 0xFu && (uint64_t v40 = v39[7]) != 0) {
          uint64_t v41 = (unsigned int *)((char *)a1 + v40 + *(unsigned int *)((char *)a1 + v40));
        }
        else {
          uint64_t v41 = 0;
        }
        uint64_t result = sub_2B0C38(a2, v41);
        if (result)
        {
          uint64_t result = sub_2A7CE0(a1, a2, 0x10u);
          if (result)
          {
            BOOL v42 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v42 >= 0x11u && (uint64_t v43 = v42[8]) != 0) {
              uint64_t v44 = (unsigned int *)((char *)a1 + v43 + *(unsigned int *)((char *)a1 + v43));
            }
            else {
              uint64_t v44 = 0;
            }
            uint64_t result = sub_2B0C38(a2, v44);
            if (result)
            {
              uint64_t result = sub_2AFEE4(a1, a2, 0x12u, 4);
              if (result)
              {
                uint64_t result = sub_2B16B4(a1, a2, 0x14u, 4);
                if (result)
                {
                  uint64_t result = sub_2AF5DC(a1, a2, 0x16u, 2);
                  if (result)
                  {
                    uint64_t result = sub_2AF5DC(a1, a2, 0x18u, 2);
                    if (result)
                    {
                      uint64_t result = sub_2B16B4(a1, a2, 0x1Au, 4);
                      if (result)
                      {
                        uint64_t result = sub_2A7CE0(a1, a2, 0x1Cu);
                        if (result)
                        {
                          unint64_t v45 = (unsigned __int16 *)((char *)a1 - *a1);
                          if (*v45 >= 0x1Du && (uint64_t v46 = v45[14]) != 0) {
                            unint64_t v47 = (unsigned int *)((char *)a1 + v46 + *(unsigned int *)((char *)a1 + v46));
                          }
                          else {
                            unint64_t v47 = 0;
                          }
                          uint64_t result = sub_2A7D68(a2, v47);
                          if (result)
                          {
                            uint64_t v48 = (unsigned __int16 *)((char *)a1 - *a1);
                            if (*v48 >= 0x1Du && (uint64_t v49 = v48[14]) != 0) {
                              uint64_t v50 = (int *)((char *)a1 + v49 + *(unsigned int *)((char *)a1 + v49));
                            }
                            else {
                              uint64_t v50 = 0;
                            }
                            uint64_t result = sub_2C1FFC((uint64_t *)a2, v50);
                            if (result)
                            {
                              uint64_t result = sub_2A7CE0(a1, a2, 0x1Eu);
                              if (result)
                              {
                                unsigned int v51 = (unsigned __int16 *)((char *)a1 - *a1);
                                if (*v51 >= 0x1Fu && (uint64_t v52 = v51[15]) != 0) {
                                  unint64_t v53 = (unsigned int *)((char *)a1 + v52 + *(unsigned int *)((char *)a1 + v52));
                                }
                                else {
                                  unint64_t v53 = 0;
                                }
                                uint64_t result = sub_2B0C38(a2, v53);
                                if (result)
                                {
                                  unint64_t v54 = (unsigned __int16 *)((char *)a1 - *a1);
                                  unsigned int v55 = *v54;
                                  if (v55 < 0x23
                                    || (!v54[17]
                                     || (uint64_t result = 0, v56 = *(void *)(a2 + 8), v56 >= 2)
                                     && v56 - 1 >= (unint64_t)a1 + v54[17] - *(void *)a2)
                                    && (v55 < 0x25
                                     || (uint64_t v57 = v54[18]) == 0
                                     || (uint64_t result = 0, v58 = *(void *)(a2 + 8), v58 >= 2)
                                     && v58 - 1 >= (unint64_t)a1 + v57 - *(void *)a2))
                                  {
                                    uint64_t result = sub_2A7CE0(a1, a2, 0x2Au);
                                    if (result)
                                    {
                                      uint64_t v59 = (unsigned __int16 *)((char *)a1 - *a1);
                                      if (*v59 >= 0x2Bu && (uint64_t v60 = v59[21]) != 0) {
                                        uint64_t v61 = (unsigned int *)((char *)a1 + v60 + *(unsigned int *)((char *)a1 + v60));
                                      }
                                      else {
                                        uint64_t v61 = 0;
                                      }
                                      uint64_t result = sub_2AFF48((uint64_t *)a2, v61);
                                      if (result)
                                      {
                                        uint64_t result = sub_2A7CE0(a1, a2, 0x2Eu);
                                        if (result)
                                        {
                                          uint64_t v62 = (unsigned __int16 *)((char *)a1 - *a1);
                                          if (*v62 < 0x2Fu
                                            || (uint64_t v63 = v62[23]) == 0
                                            || (uint64_t result = sub_2C0FD8((int *)((char *)a1 + v63+ *(unsigned int *)((char *)a1 + v63)), a2), result))
                                          {
                                            uint64_t result = sub_2A7CE0(a1, a2, 0x30u);
                                            if (result)
                                            {
                                              uint64_t v64 = (unsigned __int16 *)((char *)a1 - *a1);
                                              if (*v64 >= 0x31u && (uint64_t v65 = v64[24]) != 0) {
                                                uint64_t v66 = (unsigned int *)((char *)a1
                                              }
                                                                     + v65
                                                                     + *(unsigned int *)((char *)a1 + v65));
                                              else {
                                                uint64_t v66 = 0;
                                              }
                                              uint64_t result = sub_2A7D68(a2, v66);
                                              if (result)
                                              {
                                                uint64_t v67 = (unsigned __int16 *)((char *)a1 - *a1);
                                                if (*v67 >= 0x31u && (uint64_t v68 = v67[24]) != 0) {
                                                  unint64_t v69 = (int *)((char *)a1 + v68 + *(unsigned int *)((char *)a1 + v68));
                                                }
                                                else {
                                                  unint64_t v69 = 0;
                                                }
                                                uint64_t result = sub_2C2088(a2, v69);
                                                if (result)
                                                {
                                                  uint64_t result = sub_2A7CE0(a1, a2, 0x32u);
                                                  if (result)
                                                  {
                                                    uint64_t v70 = (unsigned __int16 *)((char *)a1 - *a1);
                                                    if (*v70 >= 0x33u && (uint64_t v71 = v70[25]) != 0) {
                                                      unint64_t v72 = (unsigned int *)((char *)a1
                                                    }
                                                                           + v71
                                                                           + *(unsigned int *)((char *)a1 + v71));
                                                    else {
                                                      unint64_t v72 = 0;
                                                    }
                                                    uint64_t result = sub_2A7D68(a2, v72);
                                                    if (result)
                                                    {
                                                      uint64_t v73 = (unsigned __int16 *)((char *)a1 - *a1);
                                                      if (*v73 >= 0x33u && (uint64_t v74 = v73[25]) != 0) {
                                                        uint64_t v75 = (unsigned int *)((char *)a1
                                                      }
                                                                             + v74
                                                                             + *(unsigned int *)((char *)a1 + v74));
                                                      else {
                                                        uint64_t v75 = 0;
                                                      }
                                                      uint64_t result = sub_2AFFCC(a2, v75);
                                                      if (result)
                                                      {
                                                        uint64_t result = sub_2A7CE0(a1, a2, 0x34u);
                                                        if (result)
                                                        {
                                                          unint64_t v76 = (unsigned __int16 *)((char *)a1 - *a1);
                                                          if (*v76 >= 0x35u && (uint64_t v77 = v76[26]) != 0) {
                                                            uint64_t v78 = (unsigned int *)((char *)a1
                                                          }
                                                                                 + v77
                                                                                 + *(unsigned int *)((char *)a1 + v77));
                                                          else {
                                                            uint64_t v78 = 0;
                                                          }
                                                          uint64_t result = sub_2A7D68(a2, v78);
                                                          if (result)
                                                          {
                                                            unint64_t v79 = (unsigned __int16 *)((char *)a1 - *a1);
                                                            if (*v79 >= 0x35u && (uint64_t v80 = v79[26]) != 0) {
                                                              uint64_t v81 = (int *)((char *)a1
                                                            }
                                                                          + v80
                                                                          + *(unsigned int *)((char *)a1 + v80));
                                                            else {
                                                              uint64_t v81 = 0;
                                                            }
                                                            uint64_t result = sub_2C0A78(a2, v81);
                                                            if (result)
                                                            {
                                                              uint64_t result = sub_2A7CE0(a1, a2, 0x36u);
                                                              if (result)
                                                              {
                                                                unint64_t v82 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                if (*v82 >= 0x37u && (uint64_t v83 = v82[27]) != 0) {
                                                                  uint64_t v84 = (unsigned int *)((char *)a1
                                                                }
                                                                                       + v83
                                                                                       + *(unsigned int *)((char *)a1 + v83));
                                                                else {
                                                                  uint64_t v84 = 0;
                                                                }
                                                                uint64_t result = sub_2B0C38(a2, v84);
                                                                if (result)
                                                                {
                                                                  uint64_t result = sub_2A7CE0(a1, a2, 0x38u);
                                                                  if (result)
                                                                  {
                                                                    uint64_t v85 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                    if (*v85 >= 0x39u && (uint64_t v86 = v85[28]) != 0) {
                                                                      uint64_t v87 = (unsigned int *)((char *)a1
                                                                    }
                                                                                           + v86
                                                                                           + *(unsigned int *)((char *)a1 + v86));
                                                                    else {
                                                                      uint64_t v87 = 0;
                                                                    }
                                                                    uint64_t result = sub_2B0C38(a2, v87);
                                                                    if (result)
                                                                    {
                                                                      uint64_t result = sub_2A7CE0(a1, a2, 0x3Au);
                                                                      if (result)
                                                                      {
                                                                        unint64_t v88 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                        if (*v88 < 0x3Bu
                                                                          || (uint64_t v89 = v88[29]) == 0
                                                                          || (uint64_t result = sub_2C0B04((int *)((char *)a1+ v89+ *(unsigned int *)((char *)a1 + v89)), a2), result))
                                                                        {
                                                                          uint64_t result = sub_2A7CE0(a1, a2, 0x3Cu);
                                                                          if (result)
                                                                          {
                                                                            uint64_t v90 = *a1;
                                                                            uint64_t v91 = -v90;
                                                                            uint64_t v92 = (unsigned __int16 *)((char *)a1 - v90);
                                                                            if (*v92 >= 0x3Du)
                                                                            {
                                                                              uint64_t v93 = v92[30];
                                                                              if (v93)
                                                                              {
                                                                                uint64_t result = sub_2C3364((int *)((char *)a1+ v93+ *(unsigned int *)((char *)a1 + v93)), (uint64_t *)a2);
                                                                                if (!result) {
                                                                                  return result;
                                                                                }
                                                                                uint64_t v91 = -(uint64_t)*a1;
                                                                              }
                                                                            }
                                                                            uint64_t v94 = (unsigned __int16 *)((char *)a1 + v91);
                                                                            if (*v94 < 0x3Fu
                                                                              || (uint64_t v95 = v94[31]) == 0
                                                                              || (uint64_t result = 0,
                                                                                  unint64_t v96 = *(void *)(a2 + 8),
                                                                                  v96 >= 2)
                                                                              && v96 - 1 >= (unint64_t)a1
                                                                                          + v95
                                                                                          - *(void *)a2)
                                                                            {
                                                                              uint64_t result = sub_2A7CE0(a1, a2, 0x40u);
                                                                              if (result)
                                                                              {
                                                                                uint64_t v97 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                if (*v97 >= 0x41u
                                                                                  && (uint64_t v98 = v97[32]) != 0)
                                                                                {
                                                                                  unint64_t v99 = (unsigned int *)((char *)a1 + v98 + *(unsigned int *)((char *)a1 + v98));
                                                                                }
                                                                                else
                                                                                {
                                                                                  unint64_t v99 = 0;
                                                                                }
                                                                                uint64_t result = sub_2A7D68(a2, v99);
                                                                                if (result)
                                                                                {
                                                                                  uint64_t v100 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                  if (*v100 >= 0x41u
                                                                                    && (uint64_t v101 = v100[32]) != 0)
                                                                                  {
                                                                                    uint64_t v102 = (int *)((char *)a1
                                                                                                 + v101
                                                                                                 + *(unsigned int *)((char *)a1 + v101));
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    uint64_t v102 = 0;
                                                                                  }
                                                                                  uint64_t result = sub_2C5FA0(a2, v102);
                                                                                  if (result)
                                                                                  {
                                                                                    uint64_t result = sub_2A7CE0(a1, a2, 0x42u);
                                                                                    if (result)
                                                                                    {
                                                                                      uint64_t v103 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                      if (*v103 >= 0x43u
                                                                                        && (uint64_t v104 = v103[33]) != 0)
                                                                                      {
                                                                                        long long v105 = (unsigned int *)((char *)a1 + v104 + *(unsigned int *)((char *)a1 + v104));
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        long long v105 = 0;
                                                                                      }
                                                                                      uint64_t result = sub_2B0C38(a2, v105);
                                                                                      if (result)
                                                                                      {
                                                                                        uint64_t v106 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                        if (*v106 < 0x45u
                                                                                          || (uint64_t v107 = v106[34]) == 0
                                                                                          || (uint64_t result = 0,
                                                                                              unint64_t v108 = *(void *)(a2 + 8),
                                                                                              v108 >= 2)
                                                                                          && v108 - 1 >= (unint64_t)a1 + v107 - *(void *)a2)
                                                                                        {
                                                                                          uint64_t result = sub_2A7CE0(a1, a2, 0x46u);
                                                                                          if (result)
                                                                                          {
                                                                                            uint64_t v109 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                            if (*v109 >= 0x47u
                                                                                              && (uint64_t v110 = v109[35]) != 0)
                                                                                            {
                                                                                              uint64_t v111 = (unsigned int *)((char *)a1 + v110 + *(unsigned int *)((char *)a1 + v110));
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              uint64_t v111 = 0;
                                                                                            }
                                                                                            uint64_t result = sub_2A7D68(a2, v111);
                                                                                            if (result)
                                                                                            {
                                                                                              uint64_t v112 = (unsigned __int16 *)((char *)a1 - *a1);
                                                                                              if (*v112 >= 0x47u
                                                                                                && (uint64_t v113 = v112[35]) != 0)
                                                                                              {
                                                                                                uint64_t v114 = (int *)((char *)a1 + v113 + *(unsigned int *)((char *)a1 + v113));
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                uint64_t v114 = 0;
                                                                                              }
                                                                                              uint64_t result = sub_2C5FA0(a2, v114);
                                                                                              if (result)
                                                                                              {
                                                                                                --*(_DWORD *)(a2 + 40);
                                                                                                return 1;
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2C5FA0(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C602C((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2C602C(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v10 = *a1;
  unsigned int v11 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v12 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v11;
  *(_DWORD *)(a2 + 44) = v12;
  if (v11 > *(_DWORD *)(a2 + 16) || v12 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v10];
  if ((v3 - v10))
  {
    if (v4 || v6 - 2 < v14) {
      return 0;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v14);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v14) {
    return 0;
  }
  uint64_t v18 = *a1;
  uint64_t v19 = -v18;
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - v18);
  unsigned int v21 = *(unsigned __int16 *)((char *)a1 - v18);
  if (v21 >= 5)
  {
    uint64_t v22 = v20[2];
    if (v20[2])
    {
      if (((unint64_t)&v3[v22] & 3) != 0 && v4) {
        return 0;
      }
      if (v6 < 9 || v6 - 8 < (unint64_t)&v3[v22]) {
        return 0;
      }
    }
    if (v21 >= 7)
    {
      uint64_t v23 = v20[3];
      if (v20[3])
      {
        if (((unint64_t)&v3[v23] & 3) != 0 && v4) {
          return 0;
        }
        if (v6 < 9 || v6 - 8 < (unint64_t)&v3[v23]) {
          return 0;
        }
      }
      if (v21 >= 9)
      {
        uint64_t v24 = v20[4];
        if (v24)
        {
          unint64_t v25 = (unint64_t)&v3[v24];
          BOOL v27 = (v25 & 3) == 0 || v4 == 0;
          if (v7 < v25 || !v27) {
            return 0;
          }
          uint64_t v28 = *(unsigned int *)(v2 + v25);
          if ((int)v28 < 1) {
            return 0;
          }
          if (v6 - 1 < v25 + v28) {
            return 0;
          }
          uint64_t v31 = a2;
          BOOL v32 = a1;
          if (!sub_2C0DD8((int *)((char *)a1 + v24 + *(unsigned int *)((char *)a1 + v24)), a2)) {
            return 0;
          }
          a2 = v31;
          a1 = v32;
          uint64_t v19 = -(uint64_t)*v32;
        }
      }
    }
  }
  unint64_t v29 = (char *)a1 + v19;
  if (*(unsigned __int16 *)((char *)a1 + v19) >= 0xBu)
  {
    if (*((_WORD *)v29 + 5))
    {
      unint64_t v30 = *(void *)(a2 + 8);
      if (v30 < 2 || v30 - 1 < (unint64_t)a1 + *((unsigned __int16 *)v29 + 5) - *(void *)a2) {
        return 0;
      }
    }
  }
  --*(_DWORD *)(a2 + 40);
  return 1;
}

uint64_t sub_2C625C(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  uint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  unsigned int v23 = *v22;
  if (v23 >= 5)
  {
    if (v22[2])
    {
      unint64_t v24 = (unint64_t)&v3[v22[2]];
      if ((v24 & 7) != 0 && v4) {
        return 0;
      }
      uint64_t result = 0;
      if (v7 < 9 || v7 - 8 < v24) {
        return result;
      }
    }
    if (v23 >= 7)
    {
      uint64_t v25 = v22[3];
      if (v25)
      {
        uint64_t result = 0;
        unint64_t v26 = (unint64_t)&v3[v25];
        BOOL v28 = (v26 & 3) == 0 || v4 == 0;
        if (v8 < v26 || !v28) {
          return result;
        }
        uint64_t v29 = *(unsigned int *)(v2 + v26);
        if ((int)v29 < 1 || v7 - 1 < v26 + v29) {
          return 0;
        }
        uint64_t result = 0;
        unint64_t v30 = (unsigned int *)((char *)a1 + v25 + *(unsigned int *)((char *)a1 + v25));
        uint64_t v31 = (char *)v30 - v2;
        BOOL v32 = (v31 & 3) == 0 || v4 == 0;
        BOOL v33 = v32;
        if (v8 < (unint64_t)v31 || !v33) {
          return result;
        }
        uint64_t v34 = *v30;
        if (v34 > 0x1FFFFFFE) {
          return 0;
        }
        uint64_t result = 0;
        unint64_t v35 = 4 * v34 + 4;
        BOOL v15 = v7 > v35;
        unint64_t v36 = v7 - v35;
        if (!v15 || v36 < (unint64_t)v31) {
          return result;
        }
        if (v34)
        {
          unint64_t v37 = 0;
          BOOL v38 = v30 + 1;
          while ((sub_2C0B04((int *)((char *)v38 + *v38), a2) & 1) != 0)
          {
            ++v37;
            ++v38;
            if (v37 >= *v30)
            {
              uint64_t v21 = -(uint64_t)*a1;
              goto LABEL_65;
            }
          }
          return 0;
        }
      }
    }
  }
LABEL_65:
  if (*(unsigned __int16 *)((char *)a1 + v21) >= 9u
    && (uint64_t v39 = *(unsigned __int16 *)((char *)a1 + v21 + 8), *(_WORD *)((char *)a1 + v21 + 8)))
  {
    unint64_t v40 = (unint64_t)a1 + v39 - *(void *)a2;
    uint64_t result = 0;
    if ((v40 & 3) != 0 && *(unsigned char *)(a2 + 24) != 0) {
      return result;
    }
    unint64_t v42 = *(void *)(a2 + 8);
    if (v42 < 5 || v42 - 4 < v40) {
      return result;
    }
    uint64_t v43 = *(unsigned int *)(*(void *)a2 + v40);
    if ((int)v43 < 1 || v42 - 1 < v40 + v43) {
      return 0;
    }
    uint64_t result = sub_2B0C38(a2, (unsigned int *)((char *)a1 + v39 + *(unsigned int *)((char *)a1 + v39)));
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t result = sub_2B0C38(a2, 0);
    if (!result) {
      return result;
    }
  }
  uint64_t result = sub_2A7CE0(a1, a2, 0xAu);
  if (result)
  {
    uint64_t v44 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v44 >= 0xBu && (uint64_t v45 = v44[5]) != 0) {
      uint64_t v46 = (unsigned int *)((char *)a1 + v45 + *(unsigned int *)((char *)a1 + v45));
    }
    else {
      uint64_t v46 = 0;
    }
    uint64_t result = sub_2B0C38(a2, v46);
    if (result)
    {
      uint64_t result = sub_2AF5DC(a1, a2, 0xCu, 2);
      if (result)
      {
        uint64_t result = sub_2AF5DC(a1, a2, 0xEu, 2);
        if (result)
        {
          uint64_t result = sub_2B16B4(a1, a2, 0x10u, 4);
          if (result)
          {
            unint64_t v47 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v47 < 0x13u
              || (uint64_t v48 = v47[9]) == 0
              || (uint64_t result = 0, v49 = *(void *)(a2 + 8), v49 >= 2)
              && v49 - 1 >= (unint64_t)a1 + v48 - *(void *)a2)
            {
              uint64_t result = sub_2A7CE0(a1, a2, 0x14u);
              if (result)
              {
                uint64_t v50 = (unsigned __int16 *)((char *)a1 - *a1);
                if (*v50 >= 0x15u && (uint64_t v51 = v50[10]) != 0) {
                  uint64_t v52 = (unsigned int *)((char *)a1 + v51 + *(unsigned int *)((char *)a1 + v51));
                }
                else {
                  uint64_t v52 = 0;
                }
                uint64_t result = sub_2B0C38(a2, v52);
                if (result)
                {
                  uint64_t result = sub_2A7CE0(a1, a2, 0x16u);
                  if (result)
                  {
                    uint64_t v53 = *a1;
                    uint64_t v54 = -v53;
                    unsigned int v55 = (unsigned __int16 *)((char *)a1 - v53);
                    if (*v55 >= 0x17u)
                    {
                      uint64_t v56 = v55[11];
                      if (v56)
                      {
                        uint64_t result = sub_2C3468((int *)((char *)a1 + v56 + *(unsigned int *)((char *)a1 + v56)), a2);
                        if (!result) {
                          return result;
                        }
                        uint64_t v54 = -(uint64_t)*a1;
                      }
                    }
                    uint64_t v57 = (unsigned __int16 *)((char *)a1 + v54);
                    unsigned int v58 = *v57;
                    if (v58 < 0x19
                      || (!v57[12]
                       || (uint64_t result = 0, v59 = *(void *)(a2 + 8), v59 >= 2)
                       && v59 - 1 >= (unint64_t)a1 + v57[12] - *(void *)a2)
                      && (v58 < 0x1B
                       || (uint64_t v60 = v57[13]) == 0
                       || (uint64_t result = 0, v61 = *(void *)(a2 + 8), v61 >= 2)
                       && v61 - 1 >= (unint64_t)a1 + v60 - *(void *)a2))
                    {
                      uint64_t result = sub_2AFEE4(a1, a2, 0x1Cu, 4);
                      if (result)
                      {
                        uint64_t result = sub_2A7CE0(a1, a2, 0x1Eu);
                        if (result)
                        {
                          uint64_t v62 = (unsigned __int16 *)((char *)a1 - *a1);
                          if (*v62 < 0x1Fu
                            || (uint64_t v63 = v62[15]) == 0
                            || (uint64_t result = sub_2C0B04((int *)((char *)a1 + v63 + *(unsigned int *)((char *)a1 + v63)), a2),
                                result))
                          {
                            uint64_t result = sub_2A7CE0(a1, a2, 0x20u);
                            if (result)
                            {
                              uint64_t v64 = (unsigned __int16 *)((char *)a1 - *a1);
                              if (*v64 < 0x21u
                                || (uint64_t v65 = v64[16]) == 0
                                || (uint64_t result = sub_2C3364((int *)((char *)a1 + v65 + *(unsigned int *)((char *)a1 + v65)), (uint64_t *)a2), result))
                              {
                                uint64_t result = sub_2AF5DC(a1, a2, 0x22u, 2);
                                if (result)
                                {
                                  uint64_t v66 = (unsigned __int16 *)((char *)a1 - *a1);
                                  unsigned int v67 = *v66;
                                  if (v67 < 0x25
                                    || (!v66[18]
                                     || (uint64_t result = 0, v68 = *(void *)(a2 + 8), v68 >= 2)
                                     && v68 - 1 >= (unint64_t)a1 + v66[18] - *(void *)a2)
                                    && (v67 < 0x27
                                     || (uint64_t v69 = v66[19]) == 0
                                     || (uint64_t result = 0, v70 = *(void *)(a2 + 8), v70 >= 2)
                                     && v70 - 1 >= (unint64_t)a1 + v69 - *(void *)a2))
                                  {
                                    --*(_DWORD *)(a2 + 40);
                                    return 1;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2C6870(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (unint64_t)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  BOOL v7 = v6 >= 5 && v6 - 4 >= v3;
  if (!v7) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v14 = v3 - v9;
  if (v14)
  {
    uint64_t result = 0;
    if (v4 || v6 - 2 < v14) {
      return result;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v14);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v7 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v7 || v16 < v14) {
    return 0;
  }
  unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v19 = *v18;
  if (v19 < 5) {
    goto LABEL_53;
  }
  if (!v18[2]) {
    goto LABEL_52;
  }
  unint64_t v20 = v3 + v18[2];
  if ((v20 & 3) != 0 && v4) {
    return 0;
  }
  uint64_t result = 0;
  if (v6 >= 9 && v6 - 8 >= v20)
  {
LABEL_52:
    if (v19 < 7) {
      goto LABEL_53;
    }
    if (!v18[3]) {
      goto LABEL_56;
    }
    unint64_t v21 = v3 + v18[3];
    if ((v21 & 3) != 0 && v4) {
      return 0;
    }
    uint64_t result = 0;
    if (v6 >= 9 && v6 - 8 >= v21)
    {
LABEL_56:
      if (v19 < 9) {
        goto LABEL_53;
      }
      if (!v18[4]) {
        goto LABEL_57;
      }
      unint64_t v22 = v3 + v18[4];
      if ((v22 & 3) != 0 && v4) {
        return 0;
      }
      uint64_t result = 0;
      if (v6 >= 9 && v6 - 8 >= v22)
      {
LABEL_57:
        if (v19 < 0xB) {
          goto LABEL_53;
        }
        uint64_t v23 = v18[5];
        if (!v23) {
          goto LABEL_53;
        }
        unint64_t v24 = v3 + v23;
        if ((v24 & 3) != 0 && v4) {
          return 0;
        }
        uint64_t result = 0;
        if (v6 >= 9 && v6 - 8 >= v24)
        {
LABEL_53:
          *((_DWORD *)a2 + 10) = v10;
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2C6A1C(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  unint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_64;
  }
  if (!v20[2]) {
    goto LABEL_63;
  }
  unint64_t v22 = (unint64_t)&v3[v20[2]];
  if ((v22 & 7) != 0 && v4) {
    return 0;
  }
  uint64_t result = 0;
  if (v7 >= 9 && v7 - 8 >= v22)
  {
LABEL_63:
    if (v21 < 7) {
      goto LABEL_64;
    }
    if (!v20[3]) {
      goto LABEL_78;
    }
    unint64_t v23 = (unint64_t)&v3[v20[3]];
    if ((v23 & 3) != 0 && v4) {
      return 0;
    }
    uint64_t result = 0;
    if (v7 >= 9 && v7 - 8 >= v23)
    {
LABEL_78:
      if (v21 < 9) {
        goto LABEL_64;
      }
      if (!v20[4]) {
        goto LABEL_79;
      }
      unint64_t v24 = (unint64_t)&v3[v20[4]];
      if ((v24 & 3) != 0 && v4) {
        return 0;
      }
      uint64_t result = 0;
      if (v7 >= 9 && v7 - 8 >= v24)
      {
LABEL_79:
        if (v21 < 0xB) {
          goto LABEL_64;
        }
        uint64_t v25 = v20[5];
        if (!v20[5]
          || ((result = 0, v26 = &v3[v25], ((unint64_t)&v3[v25] & 3) != 0) ? (BOOL v27 = v4 == 0) : (BOOL v27 = 1),
              !v27 ? (int v28 = 0) : (int v28 = 1),
              v8 >= (unint64_t)v26 && v28))
        {
          if (v21 < 0xD || !v20[6]) {
            goto LABEL_64;
          }
          unint64_t v29 = (unint64_t)&v3[v20[6]];
          if ((v29 & 3) != 0 && v4) {
            return 0;
          }
          uint64_t result = 0;
          if (v7 >= 9 && v7 - 8 >= v29)
          {
LABEL_64:
            uint64_t result = sub_2A7CE0(a1, a2, 0xEu);
            if (result)
            {
              unint64_t v30 = (unsigned __int16 *)((char *)a1 - *a1);
              if (*v30 >= 0xFu && (uint64_t v31 = v30[7]) != 0) {
                BOOL v32 = (unsigned int *)((char *)a1 + v31 + *(unsigned int *)((char *)a1 + v31));
              }
              else {
                BOOL v32 = 0;
              }
              uint64_t result = sub_2A7D68(a2, v32);
              if (result)
              {
                BOOL v33 = (unsigned __int16 *)((char *)a1 - *a1);
                if (*v33 >= 0xFu && (uint64_t v34 = v33[7]) != 0) {
                  unint64_t v35 = (int *)((char *)a1 + v34 + *(unsigned int *)((char *)a1 + v34));
                }
                else {
                  unint64_t v35 = 0;
                }
                uint64_t result = sub_2C6CC0((uint64_t *)a2, v35);
                if (result)
                {
                  --*(_DWORD *)(a2 + 40);
                  return 1;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2C6CC0(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C6D4C((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2C6D4C(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  BOOL v12 = (v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5);
  if (v12) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  unsigned int v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_57;
  }
  uint64_t v21 = v19[2];
  if (!v19[2]) {
    goto LABEL_56;
  }
  unint64_t v22 = (unint64_t)&v3[v21];
  if (((unint64_t)&v3[v21] & 3) != 0 && v4) {
    return 0;
  }
  uint64_t v14 = 0;
  if (v6 >= 9 && v6 - 8 >= v22)
  {
LABEL_56:
    if (v20 < 7) {
      goto LABEL_57;
    }
    uint64_t v23 = v19[3];
    if (!v23) {
      goto LABEL_57;
    }
    uint64_t v14 = 0;
    unint64_t v24 = (unint64_t)&v3[v23];
    BOOL v25 = (v24 & 3) == 0 || v4 == 0;
    BOOL v26 = v25;
    if (v7 >= v24 && v26)
    {
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v6 - 1 < v24 + v27) {
        return 0;
      }
      uint64_t v14 = 0;
      int v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
      unint64_t v29 = (char *)v28 - v2;
      BOOL v30 = (v29 & 3) == 0 || v4 == 0;
      BOOL v31 = v30;
      if (v7 >= (unint64_t)v29 && v31)
      {
        uint64_t v32 = *v28;
        if (v32 > 0x3FFFFFFE) {
          return 0;
        }
        uint64_t v14 = 0;
        unint64_t v33 = 2 * v32 + 4;
        BOOL v12 = v6 > v33;
        unint64_t v34 = v6 - v33;
        if (v12 && v34 >= (unint64_t)v29)
        {
LABEL_57:
          *((_DWORD *)a2 + 10) = v10;
          return 1;
        }
      }
    }
  }
  return v14;
}

uint64_t sub_2C6EF4(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  unsigned int v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_84;
  }
  if (!v20[2]) {
    goto LABEL_129;
  }
  unint64_t v22 = (unint64_t)&v3[v20[2]];
  if ((v22 & 7) != 0 && v4) {
    return 0;
  }
  uint64_t result = 0;
  if (v7 >= 9 && v7 - 8 >= v22)
  {
LABEL_129:
    if (v21 < 7) {
      goto LABEL_84;
    }
    uint64_t v23 = v20[3];
    if (v20[3])
    {
      uint64_t result = 0;
      unint64_t v24 = &v3[v23];
      BOOL v26 = ((unint64_t)&v3[v23] & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)&v24[v2];
      if ((int)v27 < 1 || v7 - 1 < (unint64_t)&v24[v27]) {
        return 0;
      }
      uint64_t result = 0;
      int v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
      unint64_t v29 = (char *)v28 - v2;
      BOOL v30 = (((unint64_t)v28 - v2) & 3) == 0 || v4 == 0;
      BOOL v31 = v30;
      if (v8 < (unint64_t)v29 || !v31) {
        return result;
      }
      uint64_t v32 = *v28;
      if (v32 > 0xFFFFFFE) {
        return 0;
      }
      uint64_t result = 0;
      unint64_t v33 = (8 * v32) | 4;
      BOOL v9 = v7 >= v33;
      unint64_t v34 = v7 - v33;
      if (v34 == 0 || !v9 || v34 < (unint64_t)v29) {
        return result;
      }
    }
    if (v21 < 9 || (uint64_t v35 = v20[4]) == 0)
    {
LABEL_84:
      uint64_t result = sub_2A7CE0(a1, a2, 0xAu);
      if (result)
      {
        unint64_t v47 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v47 >= 0xBu && (uint64_t v48 = v47[5]) != 0) {
          unint64_t v49 = (unsigned int *)((char *)a1 + v48 + *(unsigned int *)((char *)a1 + v48));
        }
        else {
          unint64_t v49 = 0;
        }
        uint64_t result = sub_2B0C38(a2, v49);
        if (result)
        {
          uint64_t result = sub_2A7CE0(a1, a2, 0xCu);
          if (result)
          {
            uint64_t v50 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v50 >= 0xDu && (uint64_t v51 = v50[6]) != 0) {
              uint64_t v52 = (unsigned int *)((char *)a1 + v51 + *(unsigned int *)((char *)a1 + v51));
            }
            else {
              uint64_t v52 = 0;
            }
            uint64_t result = sub_2A7D68(a2, v52);
            if (result)
            {
              uint64_t v53 = (unsigned __int16 *)((char *)a1 - *a1);
              if (*v53 >= 0xDu && (uint64_t v54 = v53[6]) != 0) {
                unsigned int v55 = (int *)((char *)a1 + v54 + *(unsigned int *)((char *)a1 + v54));
              }
              else {
                unsigned int v55 = 0;
              }
              uint64_t result = sub_2C73B0((uint64_t *)a2, v55);
              if (result)
              {
                uint64_t result = sub_2A7CE0(a1, a2, 0xEu);
                if (result)
                {
                  uint64_t v56 = (unsigned __int16 *)((char *)a1 - *a1);
                  if (*v56 >= 0xFu && (uint64_t v57 = v56[7]) != 0) {
                    unsigned int v58 = (unsigned int *)((char *)a1 + v57 + *(unsigned int *)((char *)a1 + v57));
                  }
                  else {
                    unsigned int v58 = 0;
                  }
                  uint64_t result = sub_2A7D68(a2, v58);
                  if (result)
                  {
                    unint64_t v59 = (unsigned __int16 *)((char *)a1 - *a1);
                    unsigned int v60 = *v59;
                    if (v60 < 0x11
                      || (!v59[8]
                       || (uint64_t result = 0, v61 = *(void *)(a2 + 8), v61 >= 2)
                       && v61 - 1 >= (unint64_t)a1 + v59[8] - *(void *)a2)
                      && (v60 < 0x13
                       || (uint64_t v62 = v59[9]) == 0
                       || (uint64_t result = 0, v63 = *(void *)(a2 + 8), v63 >= 2)
                       && v63 - 1 >= (unint64_t)a1 + v62 - *(void *)a2))
                    {
                      uint64_t result = sub_2A7CE0(a1, a2, 0x14u);
                      if (result)
                      {
                        uint64_t v64 = (unsigned __int16 *)((char *)a1 - *a1);
                        if (*v64 >= 0x15u && (uint64_t v65 = v64[10]) != 0) {
                          uint64_t v66 = (unsigned int *)((char *)a1 + v65 + *(unsigned int *)((char *)a1 + v65));
                        }
                        else {
                          uint64_t v66 = 0;
                        }
                        uint64_t result = sub_2A7D68(a2, v66);
                        if (result)
                        {
                          unsigned int v67 = (unsigned __int16 *)((char *)a1 - *a1);
                          if (*v67 >= 0x15u && (uint64_t v68 = v67[10]) != 0) {
                            uint64_t v69 = (int *)((char *)a1 + v68 + *(unsigned int *)((char *)a1 + v68));
                          }
                          else {
                            uint64_t v69 = 0;
                          }
                          uint64_t result = sub_2C743C(a2, v69);
                          if (result)
                          {
                            --*(_DWORD *)(a2 + 40);
                            return 1;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return result;
    }
    uint64_t result = 0;
    unint64_t v36 = (unint64_t)&v3[v35];
    BOOL v38 = (v36 & 3) == 0 || v4 == 0;
    if (v8 >= v36 && v38)
    {
      uint64_t v39 = *(unsigned int *)(v2 + v36);
      if ((int)v39 < 1 || v7 - 1 < v36 + v39) {
        return 0;
      }
      uint64_t result = 0;
      unint64_t v40 = (unsigned int *)((char *)a1 + v35 + *(unsigned int *)((char *)a1 + v35));
      uint64_t v41 = (char *)v40 - v2;
      BOOL v42 = (v41 & 3) == 0 || v4 == 0;
      BOOL v43 = v42;
      if (v8 >= (unint64_t)v41 && v43)
      {
        uint64_t v44 = *v40;
        if (v44 <= 0xFFFFFFE)
        {
          uint64_t result = 0;
          unint64_t v45 = (8 * v44) | 4;
          BOOL v15 = v7 > v45;
          unint64_t v46 = v7 - v45;
          if (!v15 || v46 < (unint64_t)v41) {
            return result;
          }
          goto LABEL_84;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_2C73B0(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C74C8((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2C743C(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C7630((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2C74C8(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v15 = 0;
    if (v4 || v6 - 2 < v14) {
      return v15;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v14);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v16;
  unint64_t v17 = v6 - v16;
  if (v17 == 0 || !v8 || v17 < v14) {
    return 0;
  }
  unsigned int v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 < 5u) {
    goto LABEL_55;
  }
  uint64_t v20 = v19[2];
  if (!v19[2]) {
    goto LABEL_55;
  }
  uint64_t v15 = 0;
  unint64_t v21 = (unint64_t)&v3[v20];
  BOOL v23 = (v21 & 3) == 0 || v4 == 0;
  if (v7 >= v21 && v23)
  {
    uint64_t v24 = *(unsigned int *)(v2 + v21);
    if ((int)v24 < 1 || v6 - 1 < v21 + v24) {
      return 0;
    }
    uint64_t v15 = 0;
    BOOL v25 = (unsigned int *)((char *)a1 + v20 + *(unsigned int *)((char *)a1 + v20));
    BOOL v26 = (char *)v25 - v2;
    BOOL v27 = (v26 & 3) == 0 || v4 == 0;
    BOOL v28 = v27;
    if (v7 >= (unint64_t)v26 && v28)
    {
      uint64_t v29 = *v25;
      if (v29 > 0x3FFFFFFE) {
        return 0;
      }
      unint64_t v30 = 2 * v29 + 4;
      BOOL v8 = v6 >= v30;
      unint64_t v31 = v6 - v30;
      if (v31 == 0 || !v8 || v31 < (unint64_t)v26) {
        return 0;
      }
LABEL_55:
      *((_DWORD *)a2 + 10) = v10;
      return 1;
    }
  }
  return v15;
}

uint64_t sub_2C7630(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v10 = *a1;
  int v11 = *(_DWORD *)(a2 + 40);
  unsigned int v12 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v11 + 1;
  *(_DWORD *)(a2 + 44) = v12;
  BOOL v13 = (v11 + 1) > *(_DWORD *)(a2 + 16) || v12 > *(_DWORD *)(a2 + 20);
  if (v13) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v10];
  if ((v3 - v10))
  {
    if (v4 || v6 - 2 < v14) {
      return 0;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v14);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v14) {
    return 0;
  }
  unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v19 = *v18;
  if (v19 >= 5)
  {
    uint64_t v20 = v18[2];
    if (v18[2])
    {
      unint64_t v21 = (unint64_t)&v3[v20];
      BOOL v22 = ((unint64_t)&v3[v20] & 1) == 0 || v4 == 0;
      BOOL v23 = v22;
      if (v6 - 2 < v21 || !v23) {
        return 0;
      }
    }
    if (v19 >= 7)
    {
      uint64_t v24 = v18[3];
      if (v18[3])
      {
        unint64_t v25 = (unint64_t)&v3[v24];
        BOOL v26 = ((unint64_t)&v3[v24] & 1) == 0 || v4 == 0;
        BOOL v27 = v26;
        if (v6 - 2 < v25 || !v27) {
          return 0;
        }
      }
      if (v19 >= 9)
      {
        uint64_t v28 = v18[4];
        if (v28)
        {
          unint64_t v29 = (unint64_t)&v3[v28];
          BOOL v31 = (v29 & 3) == 0 || v4 == 0;
          if (v7 < v29 || !v31) {
            return 0;
          }
          uint64_t v32 = *(unsigned int *)(v2 + v29);
          if ((int)v32 < 1 || v6 - 1 < v29 + v32) {
            return 0;
          }
          unint64_t v33 = (unsigned int *)((char *)a1 + v28 + *(unsigned int *)((char *)a1 + v28));
          unint64_t v34 = (char *)v33 - v2;
          BOOL v36 = (v34 & 3) == 0 || v4 == 0;
          if (v7 < (unint64_t)v34 || !v36) {
            return 0;
          }
          uint64_t v43 = a2;
          uint64_t v37 = *v33;
          if (v37 > 0x1FFFFFFE) {
            return 0;
          }
          unint64_t v38 = 4 * v37 + 4;
          BOOL v13 = v6 > v38;
          unint64_t v39 = v6 - v38;
          if (!v13 || v39 < (unint64_t)v34) {
            return 0;
          }
          if (v37)
          {
            unint64_t v40 = 0;
            uint64_t v41 = v33 + 1;
            while (1)
            {
              BOOL v42 = v41;
              if ((sub_2C6D4C((int *)((char *)v41 + *v41), (uint64_t *)a2) & 1) == 0) {
                return 0;
              }
              ++v40;
              uint64_t v41 = v42 + 1;
              a2 = v43;
              if (v40 >= *v33)
              {
                int v11 = *(_DWORD *)(v43 + 40) - 1;
                break;
              }
            }
          }
        }
      }
    }
  }
  *(_DWORD *)(a2 + 40) = v11;
  return 1;
}

uint64_t sub_2C78AC(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  unsigned int v12 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  BOOL v14 = v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20);
  if (v14) {
    return 0;
  }
  unint64_t v15 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v15) {
      return 0;
    }
  }
  else if (v7 - 2 < v15)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v16;
  unint64_t v17 = v7 - v16;
  if (v17 == 0 || !v9 || v17 < v15) {
    return 0;
  }
  unsigned int v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_69;
  }
  uint64_t v21 = v19[2];
  if (v19[2])
  {
    if (((unint64_t)&v3[v21] & 3) != 0 && v4) {
      return 0;
    }
    if (v7 < 9 || v7 - 8 < (unint64_t)&v3[v21]) {
      return 0;
    }
  }
  if (v20 < 7) {
    goto LABEL_69;
  }
  uint64_t v22 = v19[3];
  if (v19[3])
  {
    if (((unint64_t)&v3[v22] & 3) != 0 && v4) {
      return 0;
    }
    if (v7 < 9 || v7 - 8 < (unint64_t)&v3[v22]) {
      return 0;
    }
  }
  if (v20 < 9) {
    goto LABEL_69;
  }
  if (v19[4] && v7 - 1 < (unint64_t)&v3[v19[4]]) {
    return 0;
  }
  if (v20 >= 0xB && (uint64_t v23 = v19[5]) != 0)
  {
    unint64_t v24 = (unint64_t)&v3[v23];
    BOOL v26 = (v24 & 3) == 0 || v4 == 0;
    if (v8 < v24 || !v26) {
      return 0;
    }
    uint64_t v27 = *(unsigned int *)(v2 + v24);
    if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
      return 0;
    }
    uint64_t v28 = (int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
    unint64_t v29 = (char *)v28 - v2;
    BOOL v31 = (v29 & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v29 || !v31) {
      return 0;
    }
    uint64_t v32 = *v28;
    if (v32 > 0x1FFFFFFE) {
      return 0;
    }
    unint64_t v33 = 4 * v32 + 4;
    BOOL v14 = v7 > v33;
    unint64_t v34 = v7 - v33;
    if (!v14 || v34 < (unint64_t)v29) {
      return 0;
    }
  }
  else
  {
LABEL_69:
    uint64_t v28 = 0;
  }
  if (!sub_2C7B04(a2, v28)) {
    return 0;
  }
  --*(_DWORD *)(a2 + 40);
  return 1;
}

uint64_t sub_2C7B04(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C7B90((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2C7B90(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  uint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 >= 5u)
  {
    uint64_t v23 = v22[2];
    if (v23)
    {
      uint64_t result = 0;
      unint64_t v24 = (unint64_t)&v3[v23];
      BOOL v26 = (v24 & 3) == 0 || v4 == 0;
      if (v8 < v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
        return 0;
      }
      uint64_t result = sub_2C0B04((int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23)), a2);
      if (!result) {
        return result;
      }
      uint64_t v21 = -(uint64_t)*a1;
    }
  }
  uint64_t v28 = (char *)a1 + v21;
  if (*(unsigned __int16 *)((char *)a1 + v21) < 7u || (uint64_t v29 = *((unsigned __int16 *)v28 + 3), !*((_WORD *)v28 + 3)))
  {
LABEL_68:
    --*(_DWORD *)(a2 + 40);
    return 1;
  }
  uint64_t v30 = *(void *)a2;
  unint64_t v31 = (unint64_t)a1 + v29 - *(void *)a2;
  if ((v31 & 3) != 0 && *(unsigned char *)(a2 + 24)) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v32 = *(void *)(a2 + 8);
  if (v32 >= 5 && v32 - 4 >= v31)
  {
    uint64_t v33 = *(unsigned int *)(v30 + v31);
    if ((int)v33 < 1 || v32 - 1 < v31 + v33) {
      return 0;
    }
    uint64_t result = 0;
    unint64_t v34 = (unsigned int *)((char *)a1 + v29 + *(unsigned int *)((char *)a1 + v29));
    unint64_t v35 = (unint64_t)v34 - v30;
    BOOL v36 = (((unint64_t)v34 - v30) & 3) == 0 || *(unsigned char *)(a2 + 24) == 0;
    BOOL v37 = v36;
    if (v32 - 4 >= v35 && v37)
    {
      uint64_t v38 = *v34;
      if (v38 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v39 = 4 * v38 + 4;
      BOOL v15 = v32 > v39;
      unint64_t v40 = v32 - v39;
      if (!v15 || v40 < v35) {
        return 0;
      }
      if (v38)
      {
        unint64_t v42 = 0;
        uint64_t v43 = v34 + 1;
        while ((sub_2C0B04((int *)((char *)v43 + *v43), a2) & 1) != 0)
        {
          ++v42;
          ++v43;
          if (v42 >= *v34) {
            goto LABEL_68;
          }
        }
        return 0;
      }
      goto LABEL_68;
    }
  }
  return result;
}

uint64_t sub_2C7E08(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  BOOL v12 = (v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5);
  if (v12) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v15 = 0;
    if (v4 || v6 - 2 < v14) {
      return v15;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v14);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v16;
  unint64_t v17 = v6 - v16;
  if (v17 == 0 || !v8 || v17 < v14) {
    return 0;
  }
  unsigned int v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_68;
  }
  uint64_t v21 = v19[2];
  if (!v19[2]) {
    goto LABEL_67;
  }
  unint64_t v22 = (unint64_t)&v3[v21];
  if (((unint64_t)&v3[v21] & 7) != 0 && v4) {
    return 0;
  }
  uint64_t v15 = 0;
  if (v6 >= 9 && v6 - 8 >= v22)
  {
LABEL_67:
    if (v20 < 7) {
      goto LABEL_68;
    }
    if (v19[3] && v6 - 1 < (unint64_t)&v3[v19[3]]) {
      return 0;
    }
    if (v20 < 9) {
      goto LABEL_68;
    }
    uint64_t v23 = v19[4];
    if (!v19[4]) {
      goto LABEL_72;
    }
    unint64_t v24 = (unint64_t)&v3[v23];
    if (((unint64_t)&v3[v23] & 3) != 0 && v4) {
      return 0;
    }
    uint64_t v15 = 0;
    if (v6 >= 9 && v6 - 8 >= v24)
    {
LABEL_72:
      if (v20 < 0xB) {
        goto LABEL_68;
      }
      uint64_t v25 = v19[5];
      if (!v25) {
        goto LABEL_68;
      }
      uint64_t v15 = 0;
      unint64_t v26 = (unint64_t)&v3[v25];
      BOOL v27 = (v26 & 3) == 0 || v4 == 0;
      BOOL v28 = v27;
      if (v7 >= v26 && v28)
      {
        uint64_t v29 = *(unsigned int *)(v2 + v26);
        if ((int)v29 < 1 || v6 - 1 < v26 + v29) {
          return 0;
        }
        uint64_t v15 = 0;
        uint64_t v30 = (unsigned int *)((char *)a1 + v25 + *(unsigned int *)((char *)a1 + v25));
        unint64_t v31 = (char *)v30 - v2;
        BOOL v32 = (v31 & 3) == 0 || v4 == 0;
        BOOL v33 = v32;
        if (v7 >= (unint64_t)v31 && v33)
        {
          uint64_t v34 = *v30;
          if (v34 > 0xFFFFFFE) {
            return 0;
          }
          uint64_t v15 = 0;
          unint64_t v35 = (8 * v34) | 4;
          BOOL v12 = v6 > v35;
          unint64_t v36 = v6 - v35;
          if (v12 && v36 >= (unint64_t)v31)
          {
LABEL_68:
            *((_DWORD *)a2 + 10) = v10;
            return 1;
          }
        }
      }
    }
  }
  return v15;
}

uint64_t sub_2C8008(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  unint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 >= 5u)
  {
    uint64_t v23 = v22[2];
    if (v23)
    {
      uint64_t result = 0;
      unint64_t v24 = (unint64_t)&v3[v23];
      BOOL v26 = (v24 & 3) == 0 || v4 == 0;
      if (v8 < v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
        return 0;
      }
      uint64_t result = 0;
      BOOL v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
      uint64_t v29 = (char *)v28 - v2;
      BOOL v30 = (v29 & 3) == 0 || v4 == 0;
      BOOL v31 = v30;
      if (v8 < (unint64_t)v29 || !v31) {
        return result;
      }
      uint64_t v32 = *v28;
      if (v32 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v33 = 4 * v32 + 4;
      BOOL v15 = v7 > v33;
      unint64_t v34 = v7 - v33;
      if (!v15 || v34 < (unint64_t)v29) {
        return 0;
      }
      if (v32)
      {
        unint64_t v36 = 0;
        BOOL v37 = v28 + 1;
        while (sub_2C885C((int *)((char *)v37 + *v37), a2))
        {
          ++v36;
          ++v37;
          if (v36 >= *v28)
          {
            uint64_t v21 = -(uint64_t)*a1;
            goto LABEL_59;
          }
        }
        return 0;
      }
    }
  }
LABEL_59:
  uint64_t v38 = (char *)a1 + v21;
  if (*(unsigned __int16 *)((char *)a1 + v21) >= 7u)
  {
    uint64_t v39 = *((unsigned __int16 *)v38 + 3);
    if (*((_WORD *)v38 + 3))
    {
      uint64_t v40 = *(void *)a2;
      unint64_t v41 = (unint64_t)a1 + v39 - *(void *)a2;
      int v42 = *(unsigned __int8 *)(a2 + 24);
      uint64_t result = 0;
      if ((v41 & 3) != 0 && v42 != 0) {
        return result;
      }
      unint64_t v44 = *(void *)(a2 + 8);
      if (v44 < 5 || v44 - 4 < v41) {
        return result;
      }
      uint64_t v45 = *(unsigned int *)(v40 + v41);
      if ((int)v45 < 1 || v44 - 1 < v41 + v45) {
        return 0;
      }
      unint64_t v46 = (unsigned int *)((char *)a1 + v39 + *(unsigned int *)((char *)a1 + v39));
      unint64_t v47 = (unint64_t)v46 - v40;
      BOOL v48 = (((unint64_t)v46 - v40) & 3) == 0 || v42 == 0;
      BOOL v49 = v48;
      if (v44 - 4 < v47 || !v49) {
        return 0;
      }
      uint64_t v51 = *v46;
      if (v51 > 0x5555554) {
        return 0;
      }
      unint64_t v52 = (24 * v51) | 4;
      BOOL v15 = v44 > v52;
      unint64_t v53 = v44 - v52;
      if (!v15 || v53 < v47) {
        return 0;
      }
    }
  }
  uint64_t result = sub_2A7CE0(a1, a2, 8u);
  if (result)
  {
    unsigned int v55 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v55 >= 9u && (uint64_t v56 = v55[4]) != 0) {
      uint64_t v57 = (unsigned int *)((char *)a1 + v56 + *(unsigned int *)((char *)a1 + v56));
    }
    else {
      uint64_t v57 = 0;
    }
    uint64_t result = sub_2A7D68(a2, v57);
    if (result)
    {
      unsigned int v58 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v58 >= 9u && (uint64_t v59 = v58[4]) != 0) {
        unsigned int v60 = (int *)((char *)a1 + v59 + *(unsigned int *)((char *)a1 + v59));
      }
      else {
        unsigned int v60 = 0;
      }
      uint64_t result = sub_2C0A78(a2, v60);
      if (result)
      {
        uint64_t result = sub_2A7CE0(a1, a2, 0xAu);
        if (result)
        {
          unint64_t v61 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v61 >= 0xBu && (uint64_t v62 = v61[5]) != 0) {
            unint64_t v63 = (unsigned int *)((char *)a1 + v62 + *(unsigned int *)((char *)a1 + v62));
          }
          else {
            unint64_t v63 = 0;
          }
          uint64_t result = sub_2A7D68(a2, v63);
          if (result)
          {
            uint64_t v64 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v64 >= 0xBu && (uint64_t v65 = v64[5]) != 0) {
              uint64_t v66 = (int *)((char *)a1 + v65 + *(unsigned int *)((char *)a1 + v65));
            }
            else {
              uint64_t v66 = 0;
            }
            uint64_t result = sub_2C0A78(a2, v66);
            if (result)
            {
              uint64_t result = sub_2A7CE0(a1, a2, 0xCu);
              if (result)
              {
                unsigned int v67 = (unsigned __int16 *)((char *)a1 - *a1);
                if (*v67 >= 0xDu && (uint64_t v68 = v67[6]) != 0) {
                  uint64_t v69 = (unsigned int *)((char *)a1 + v68 + *(unsigned int *)((char *)a1 + v68));
                }
                else {
                  uint64_t v69 = 0;
                }
                uint64_t result = sub_2B0C38(a2, v69);
                if (result)
                {
                  uint64_t result = sub_2A7CE0(a1, a2, 0xEu);
                  if (result)
                  {
                    unint64_t v70 = (unsigned __int16 *)((char *)a1 - *a1);
                    if (*v70 >= 0xFu && (uint64_t v71 = v70[7]) != 0) {
                      unint64_t v72 = (unsigned int *)((char *)a1 + v71 + *(unsigned int *)((char *)a1 + v71));
                    }
                    else {
                      unint64_t v72 = 0;
                    }
                    uint64_t result = sub_2A7D68(a2, v72);
                    if (result)
                    {
                      uint64_t v73 = (unsigned __int16 *)((char *)a1 - *a1);
                      if (*v73 >= 0xFu && (uint64_t v74 = v73[7]) != 0) {
                        uint64_t v75 = (int *)((char *)a1 + v74 + *(unsigned int *)((char *)a1 + v74));
                      }
                      else {
                        uint64_t v75 = 0;
                      }
                      uint64_t result = sub_2C86B8(a2, v75);
                      if (result)
                      {
                        uint64_t result = sub_2A7CE0(a1, a2, 0x10u);
                        if (result)
                        {
                          unint64_t v76 = (unsigned __int16 *)((char *)a1 - *a1);
                          if (*v76 >= 0x11u && (uint64_t v77 = v76[8]) != 0) {
                            uint64_t v78 = (unsigned int *)((char *)a1 + v77 + *(unsigned int *)((char *)a1 + v77));
                          }
                          else {
                            uint64_t v78 = 0;
                          }
                          uint64_t result = sub_2B0C38(a2, v78);
                          if (result)
                          {
                            uint64_t result = sub_2A7CE0(a1, a2, 0x12u);
                            if (result)
                            {
                              unint64_t v79 = (unsigned __int16 *)((char *)a1 - *a1);
                              if (*v79 >= 0x13u && (uint64_t v80 = v79[9]) != 0) {
                                uint64_t v81 = (unsigned int *)((char *)a1 + v80 + *(unsigned int *)((char *)a1 + v80));
                              }
                              else {
                                uint64_t v81 = 0;
                              }
                              uint64_t result = sub_2A7D68(a2, v81);
                              if (result)
                              {
                                unint64_t v82 = (unsigned __int16 *)((char *)a1 - *a1);
                                if (*v82 >= 0x13u && (uint64_t v83 = v82[9]) != 0) {
                                  uint64_t v84 = (int *)((char *)a1 + v83 + *(unsigned int *)((char *)a1 + v83));
                                }
                                else {
                                  uint64_t v84 = 0;
                                }
                                uint64_t result = sub_2C0A78(a2, v84);
                                if (result)
                                {
                                  uint64_t result = sub_2A7CE0(a1, a2, 0x14u);
                                  if (result)
                                  {
                                    uint64_t v85 = (unsigned __int16 *)((char *)a1 - *a1);
                                    if (*v85 >= 0x15u && (uint64_t v86 = v85[10]) != 0) {
                                      uint64_t v87 = (unsigned int *)((char *)a1 + v86 + *(unsigned int *)((char *)a1 + v86));
                                    }
                                    else {
                                      uint64_t v87 = 0;
                                    }
                                    uint64_t result = sub_2A7D68(a2, v87);
                                    if (result)
                                    {
                                      unint64_t v88 = (unsigned __int16 *)((char *)a1 - *a1);
                                      if (*v88 >= 0x15u && (uint64_t v89 = v88[10]) != 0) {
                                        uint64_t v90 = (int *)((char *)a1 + v89 + *(unsigned int *)((char *)a1 + v89));
                                      }
                                      else {
                                        uint64_t v90 = 0;
                                      }
                                      uint64_t result = sub_2C8744(a2, v90);
                                      if (result)
                                      {
                                        uint64_t result = sub_2A7CE0(a1, a2, 0x16u);
                                        if (result)
                                        {
                                          uint64_t v91 = (unsigned __int16 *)((char *)a1 - *a1);
                                          if (*v91 >= 0x17u && (uint64_t v92 = v91[11]) != 0) {
                                            uint64_t v93 = (unsigned int *)((char *)a1 + v92
                                          }
                                                                              + *(unsigned int *)((char *)a1 + v92));
                                          else {
                                            uint64_t v93 = 0;
                                          }
                                          uint64_t result = sub_2A7D68(a2, v93);
                                          if (result)
                                          {
                                            uint64_t v94 = (unsigned __int16 *)((char *)a1 - *a1);
                                            if (*v94 >= 0x17u && (uint64_t v95 = v94[11]) != 0) {
                                              unint64_t v96 = (int *)((char *)a1 + v95 + *(unsigned int *)((char *)a1 + v95));
                                            }
                                            else {
                                              unint64_t v96 = 0;
                                            }
                                            uint64_t result = sub_2C87D0((uint64_t *)a2, v96);
                                            if (result)
                                            {
                                              --*(_DWORD *)(a2 + 40);
                                              return 1;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2C86B8(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C0DD8((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2C8744(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C8D34((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2C87D0(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2C919C((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

BOOL sub_2C885C(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_72;
  }
  if (!v20[2]) {
    goto LABEL_71;
  }
  unint64_t v22 = (unint64_t)&v3[v20[2]];
  if ((v22 & 7) != 0 && v4) {
    return 0;
  }
  BOOL result = 0;
  if (v7 >= 9 && v7 - 8 >= v22)
  {
LABEL_71:
    if (v21 < 7) {
      goto LABEL_72;
    }
    if (!v20[3]) {
      goto LABEL_118;
    }
    unint64_t v23 = (unint64_t)&v3[v20[3]];
    if ((v23 & 3) != 0 && v4) {
      return 0;
    }
    BOOL result = 0;
    if (v7 >= 9 && v7 - 8 >= v23)
    {
LABEL_118:
      if (v21 < 9) {
        goto LABEL_72;
      }
      uint64_t v24 = v20[4];
      if (!v20[4]
        || ((result = 0, uint64_t v25 = &v3[v24], ((unint64_t)&v3[v24] & 3) != 0) ? (v26 = v4 == 0) : (v26 = 1),
            !v26 ? (int v27 = 0) : (int v27 = 1),
            v8 >= (unint64_t)v25 && v27))
      {
        if (v21 < 0xB) {
          goto LABEL_72;
        }
        uint64_t v28 = v20[5];
        if (!v20[5]
          || ((result = 0, uint64_t v29 = &v3[v28], ((unint64_t)&v3[v28] & 3) != 0) ? (v30 = v4 == 0) : (v30 = 1),
              !v30 ? (int v31 = 0) : (int v31 = 1),
              v8 >= (unint64_t)v29 && v31))
        {
          if (v21 < 0xD
            || !v20[6]
            || ((result = 0, unint64_t v32 = (unint64_t)&v3[v20[6]], (v32 & 3) != 0) ? (v33 = v4 == 0) : (v33 = 1),
                !v33 ? (int v34 = 0) : (int v34 = 1),
                v8 >= v32 && v34))
          {
LABEL_72:
            BOOL result = sub_2B16B4(a1, a2, 0xEu, 4);
            if (result)
            {
              BOOL result = sub_2B16B4(a1, a2, 0x10u, 4);
              if (result)
              {
                BOOL result = sub_2A7CE0(a1, a2, 0x12u);
                if (result)
                {
                  unint64_t v35 = (unsigned __int16 *)((char *)a1 - *a1);
                  if (*v35 >= 0x13u && (uint64_t v36 = v35[9]) != 0) {
                    BOOL v37 = (int *)((char *)a1 + v36 + *(unsigned int *)((char *)a1 + v36));
                  }
                  else {
                    BOOL v37 = 0;
                  }
                  BOOL result = sub_2A7DD0(a2, v37);
                  if (result)
                  {
                    BOOL result = sub_2B16B4(a1, a2, 0x14u, 4);
                    if (result)
                    {
                      BOOL result = sub_2AF5DC(a1, a2, 0x16u, 2);
                      if (result)
                      {
                        BOOL result = sub_2B16B4(a1, a2, 0x18u, 4);
                        if (result)
                        {
                          uint64_t v38 = (unsigned __int16 *)((char *)a1 - *a1);
                          if (*v38 < 0x1Bu
                            || (uint64_t v39 = v38[13]) == 0
                            || (BOOL result = 0, v40 = *(void *)(a2 + 8), v40 >= 2)
                            && v40 - 1 >= (unint64_t)a1 + v39 - *(void *)a2)
                          {
                            BOOL result = sub_2B16B4(a1, a2, 0x1Cu, 4);
                            if (result)
                            {
                              BOOL result = sub_2B16B4(a1, a2, 0x1Eu, 4);
                              if (result)
                              {
                                BOOL result = sub_2B16B4(a1, a2, 0x20u, 4);
                                if (result)
                                {
                                  unint64_t v41 = (unsigned __int16 *)((char *)a1 - *a1);
                                  if (*v41 < 0x23u
                                    || (uint64_t v42 = v41[17]) == 0
                                    || (BOOL result = 0, v43 = *(void *)(a2 + 8), v43 >= 2)
                                    && v43 - 1 >= (unint64_t)a1 + v42 - *(void *)a2)
                                  {
                                    BOOL result = sub_2A7CE0(a1, a2, 0x24u);
                                    if (result)
                                    {
                                      unint64_t v44 = (unsigned __int16 *)((char *)a1 - *a1);
                                      if (*v44 >= 0x25u && (uint64_t v45 = v44[18]) != 0) {
                                        unint64_t v46 = (unsigned int *)((char *)a1 + v45 + *(unsigned int *)((char *)a1 + v45));
                                      }
                                      else {
                                        unint64_t v46 = 0;
                                      }
                                      BOOL result = sub_2A7D68(a2, v46);
                                      if (result)
                                      {
                                        BOOL result = sub_2A7CE0(a1, a2, 0x26u);
                                        if (result)
                                        {
                                          unint64_t v47 = (unsigned __int16 *)((char *)a1 - *a1);
                                          if (*v47 >= 0x27u && (uint64_t v48 = v47[19]) != 0) {
                                            BOOL v49 = (unsigned int *)((char *)a1 + v48
                                          }
                                                                              + *(unsigned int *)((char *)a1 + v48));
                                          else {
                                            BOOL v49 = 0;
                                          }
                                          BOOL result = sub_2A7D68(a2, v49);
                                          if (result)
                                          {
                                            BOOL result = sub_2A7CE0(a1, a2, 0x28u);
                                            if (result)
                                            {
                                              uint64_t v50 = (unsigned __int16 *)((char *)a1 - *a1);
                                              if (*v50 >= 0x29u && (uint64_t v51 = v50[20]) != 0) {
                                                unint64_t v52 = (unsigned int *)((char *)a1
                                              }
                                                                     + v51
                                                                     + *(unsigned int *)((char *)a1 + v51));
                                              else {
                                                unint64_t v52 = 0;
                                              }
                                              BOOL result = sub_2A7D68(a2, v52);
                                              if (result)
                                              {
                                                BOOL result = sub_2B16B4(a1, a2, 0x2Au, 4);
                                                if (result)
                                                {
                                                  BOOL result = sub_2AFEE4(a1, a2, 0x2Cu, 4);
                                                  if (result)
                                                  {
                                                    BOOL result = sub_2AFEE4(a1, a2, 0x2Eu, 4);
                                                    if (result)
                                                    {
                                                      --*(_DWORD *)(a2 + 40);
                                                      return 1;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2C8D34(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  unsigned int v12 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  BOOL v14 = v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20);
  if (v14) {
    return 0;
  }
  unint64_t v15 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v15) {
      return 0;
    }
  }
  else if (v7 - 2 < v15)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v16;
  unint64_t v17 = v7 - v16;
  if (v17 == 0 || !v9 || v17 < v15) {
    return 0;
  }
  uint64_t v19 = *a1;
  uint64_t v20 = -v19;
  unsigned int v21 = (char *)a1 - v19;
  unsigned int v22 = *(unsigned __int16 *)((char *)a1 - v19);
  if (v22 >= 5)
  {
    uint64_t v23 = *((unsigned __int16 *)v21 + 2);
    if (*((_WORD *)v21 + 2))
    {
      uint64_t v24 = &v3[v23];
      BOOL v25 = ((unint64_t)&v3[v23] & 3) == 0 || v4 == 0;
      BOOL v26 = v25;
      if (v8 < (unint64_t)v24 || !v26) {
        return 0;
      }
    }
    if (v22 >= 7)
    {
      uint64_t v27 = *((unsigned __int16 *)v21 + 3);
      if (v27)
      {
        unint64_t v28 = (unint64_t)&v3[v27];
        BOOL v30 = (v28 & 3) == 0 || v4 == 0;
        if (v8 < v28 || !v30) {
          return 0;
        }
        uint64_t v31 = *(unsigned int *)(v2 + v28);
        if ((int)v31 < 1 || v7 - 1 < v28 + v31) {
          return 0;
        }
        unint64_t v32 = (unsigned int *)((char *)a1 + v27 + *(unsigned int *)((char *)a1 + v27));
        BOOL v33 = (char *)v32 - v2;
        BOOL v35 = (v33 & 3) == 0 || v4 == 0;
        if (v8 < (unint64_t)v33 || !v35) {
          return 0;
        }
        uint64_t v36 = *v32;
        if (v36 > 0x1FFFFFFE) {
          return 0;
        }
        unint64_t v44 = a1;
        unint64_t v37 = 4 * v36 + 4;
        BOOL v14 = v7 > v37;
        unint64_t v38 = v7 - v37;
        if (!v14 || v38 < (unint64_t)v33) {
          return 0;
        }
        if (v36)
        {
          unint64_t v39 = 0;
          unint64_t v40 = v32 + 1;
          while ((sub_2C8FD8((int *)((char *)v40 + *v40), (uint64_t *)a2) & 1) != 0)
          {
            ++v39;
            ++v40;
            if (v39 >= *v32)
            {
              a1 = v44;
              uint64_t v20 = -(uint64_t)*v44;
              goto LABEL_68;
            }
          }
          return 0;
        }
      }
    }
  }
LABEL_68:
  if (*(unsigned __int16 *)((char *)a1 + v20) >= 9u && *(_WORD *)((char *)a1 + v20 + 8))
  {
    unint64_t v41 = (unint64_t)a1 + *(unsigned __int16 *)((char *)a1 + v20 + 8) - *(void *)a2;
    if ((v41 & 3) != 0 && *(unsigned char *)(a2 + 24) != 0) {
      return 0;
    }
    unint64_t v43 = *(void *)(a2 + 8);
    if (v43 < 9 || v43 - 8 < v41) {
      return 0;
    }
  }
  --*(_DWORD *)(a2 + 40);
  return 1;
}

uint64_t sub_2C8FD8(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  uint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_64;
  }
  uint64_t v21 = v19[2];
  if (v19[2])
  {
    uint64_t v14 = 0;
    unint64_t v22 = (unint64_t)&v3[v21];
    BOOL v23 = ((unint64_t)&v3[v21] & 1) == 0 || v4 == 0;
    BOOL v24 = v23;
    if (v6 - 2 < v22 || !v24) {
      return v14;
    }
  }
  if (v20 < 7) {
    goto LABEL_64;
  }
  uint64_t v25 = v19[3];
  if (!v19[3]) {
    goto LABEL_63;
  }
  uint64_t v14 = 0;
  BOOL v26 = &v3[v25];
  BOOL v27 = ((unint64_t)&v3[v25] & 3) == 0 || v4 == 0;
  BOOL v28 = v27;
  if (v7 >= (unint64_t)v26 && v28)
  {
    uint64_t v29 = *(unsigned int *)&v26[v2];
    if ((int)v29 < 1 || v6 - 1 < (unint64_t)&v26[v29]) {
      return 0;
    }
    uint64_t v14 = 0;
    BOOL v30 = (unsigned int *)((char *)a1 + v25 + *(unsigned int *)((char *)a1 + v25));
    uint64_t v31 = (char *)v30 - v2;
    BOOL v32 = (v31 & 3) == 0 || v4 == 0;
    BOOL v33 = v32;
    if (v7 >= (unint64_t)v31 && v33)
    {
      uint64_t v34 = *v30;
      if (v34 > 0x3FFFFFFE) {
        return 0;
      }
      uint64_t v14 = 0;
      unint64_t v35 = 2 * v34 + 4;
      BOOL v8 = v6 >= v35;
      unint64_t v36 = v6 - v35;
      if (v36 != 0 && v8 && v36 >= (unint64_t)v31)
      {
LABEL_63:
        if (v20 >= 9 && v19[4] && v6 - 1 < (unint64_t)&v3[v19[4]]) {
          return 0;
        }
LABEL_64:
        *((_DWORD *)a2 + 10) = v10;
        return 1;
      }
    }
  }
  return v14;
}

uint64_t sub_2C919C(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v15 = 0;
    if (v4 || v6 - 2 < v14) {
      return v15;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v14);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v16;
  unint64_t v17 = v6 - v16;
  if (v17 == 0 || !v8 || v17 < v14) {
    return 0;
  }
  uint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 < 5u) {
    goto LABEL_55;
  }
  uint64_t v20 = v19[2];
  if (!v19[2]) {
    goto LABEL_55;
  }
  uint64_t v15 = 0;
  unint64_t v21 = (unint64_t)&v3[v20];
  BOOL v23 = (v21 & 3) == 0 || v4 == 0;
  if (v7 >= v21 && v23)
  {
    uint64_t v24 = *(unsigned int *)(v2 + v21);
    if ((int)v24 < 1 || v6 - 1 < v21 + v24) {
      return 0;
    }
    uint64_t v15 = 0;
    uint64_t v25 = (unsigned int *)((char *)a1 + v20 + *(unsigned int *)((char *)a1 + v20));
    BOOL v26 = (char *)v25 - v2;
    BOOL v27 = (v26 & 3) == 0 || v4 == 0;
    BOOL v28 = v27;
    if (v7 >= (unint64_t)v26 && v28)
    {
      uint64_t v29 = *v25;
      if (v29 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v30 = 4 * v29 + 4;
      BOOL v8 = v6 >= v30;
      unint64_t v31 = v6 - v30;
      if (v31 == 0 || !v8 || v31 < (unint64_t)v26) {
        return 0;
      }
LABEL_55:
      *((_DWORD *)a2 + 10) = v10;
      return 1;
    }
  }
  return v15;
}

BOOL sub_2C9304(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  unint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  unsigned int v23 = *v22;
  if (v23 >= 5)
  {
    if (v22[2])
    {
      unint64_t v24 = (unint64_t)&v3[v22[2]];
      if ((v24 & 7) != 0 && v4) {
        return 0;
      }
      BOOL result = 0;
      if (v7 < 9 || v7 - 8 < v24) {
        return result;
      }
    }
    if (v23 >= 7)
    {
      uint64_t v25 = v22[3];
      if (v25)
      {
        BOOL result = 0;
        unint64_t v26 = (unint64_t)&v3[v25];
        BOOL v28 = (v26 & 3) == 0 || v4 == 0;
        if (v8 < v26 || !v28) {
          return result;
        }
        uint64_t v29 = *(unsigned int *)(v2 + v26);
        if ((int)v29 < 1 || v7 - 1 < v26 + v29) {
          return 0;
        }
        BOOL result = 0;
        unint64_t v30 = (unsigned int *)((char *)a1 + v25 + *(unsigned int *)((char *)a1 + v25));
        unint64_t v31 = (char *)v30 - v2;
        BOOL v32 = (v31 & 3) == 0 || v4 == 0;
        BOOL v33 = v32;
        if (v8 < (unint64_t)v31 || !v33) {
          return result;
        }
        uint64_t v34 = *v30;
        if (v34 > 0x1FFFFFFE) {
          return 0;
        }
        BOOL result = 0;
        unint64_t v35 = 4 * v34 + 4;
        BOOL v15 = v7 > v35;
        unint64_t v36 = v7 - v35;
        if (!v15 || v36 < (unint64_t)v31) {
          return result;
        }
        if (v34)
        {
          unint64_t v37 = 0;
          unint64_t v38 = v30 + 1;
          while ((sub_2C0B04((int *)((char *)v38 + *v38), a2) & 1) != 0)
          {
            ++v37;
            ++v38;
            if (v37 >= *v30)
            {
              uint64_t v21 = -(uint64_t)*a1;
              goto LABEL_65;
            }
          }
          return 0;
        }
      }
    }
  }
LABEL_65:
  if (*(unsigned __int16 *)((char *)a1 + v21) < 9u
    || (uint64_t v39 = *(unsigned __int16 *)((char *)a1 + v21 + 8), !*(_WORD *)((char *)a1 + v21 + 8)))
  {
    BOOL result = sub_2B0C38(a2, 0);
    if (!result) {
      return result;
    }
    goto LABEL_79;
  }
  unint64_t v40 = (unint64_t)a1 + v39 - *(void *)a2;
  BOOL result = 0;
  if ((v40 & 3) == 0 || *(unsigned char *)(a2 + 24) == 0)
  {
    unint64_t v42 = *(void *)(a2 + 8);
    if (v42 >= 5 && v42 - 4 >= v40)
    {
      uint64_t v43 = *(unsigned int *)(*(void *)a2 + v40);
      if ((int)v43 < 1 || v42 - 1 < v40 + v43) {
        return 0;
      }
      BOOL result = sub_2B0C38(a2, (unsigned int *)((char *)a1 + v39 + *(unsigned int *)((char *)a1 + v39)));
      if (result)
      {
LABEL_79:
        BOOL result = sub_2B16B4(a1, a2, 0xAu, 4);
        if (result)
        {
          --*(_DWORD *)(a2 + 40);
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2C95FC(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 40);
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  BOOL v16 = v12 + 1 > v15 || v13 > v14;
  if (v16) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  uint64_t v21 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v22 = *v21;
  if (v22 >= 5)
  {
    uint64_t v23 = v21[2];
    if (v21[2])
    {
      if (((unint64_t)&v3[v23] & 7) != 0 && v4) {
        return 0;
      }
      if (v7 < 9 || v7 - 8 < (unint64_t)&v3[v23]) {
        return 0;
      }
    }
    if (v22 >= 7)
    {
      uint64_t v24 = v21[3];
      if (v21[3])
      {
        unint64_t v25 = (unint64_t)&v3[v24];
        BOOL v26 = ((unint64_t)&v3[v24] & 1) == 0 || v4 == 0;
        BOOL v27 = v26;
        if (v7 - 2 < v25 || !v27) {
          return 0;
        }
      }
      if (v22 >= 9)
      {
        uint64_t v28 = v21[4];
        if (v28)
        {
          unint64_t v29 = (unint64_t)&v3[v28];
          BOOL v31 = (v29 & 3) == 0 || v4 == 0;
          if (v8 < v29 || !v31) {
            return 0;
          }
          uint64_t v32 = *(unsigned int *)(v2 + v29);
          if ((int)v32 < 1 || v7 - 1 < v29 + v32) {
            return 0;
          }
          BOOL v33 = (unsigned int *)((char *)a1 + v28 + *(unsigned int *)((char *)a1 + v28));
          uint64_t v34 = (char *)v33 - v2;
          BOOL v36 = (v34 & 3) == 0 || v4 == 0;
          if (v8 < (unint64_t)v34 || !v36) {
            return 0;
          }
          uint64_t v37 = *v33;
          if (v37 > 0x1FFFFFFE) {
            return 0;
          }
          unint64_t v38 = 4 * v37 + 4;
          BOOL v16 = v7 > v38;
          unint64_t v39 = v7 - v38;
          if (!v16 || v39 < (unint64_t)v34) {
            return 0;
          }
          if (v37)
          {
            unint64_t v40 = 0;
            unint64_t v41 = v33 + 1;
            while (1)
            {
              unint64_t v42 = v41;
              if ((sub_2C0B04((int *)((char *)v41 + *v41), a2) & 1) == 0) {
                return 0;
              }
              ++v40;
              unint64_t v41 = v42 + 1;
              if (v40 >= *v33)
              {
                int v12 = *(_DWORD *)(a2 + 40) - 1;
                break;
              }
            }
          }
        }
      }
    }
  }
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

uint64_t sub_2C9868(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_82;
  }
  uint64_t v22 = v20[2];
  if (v20[2])
  {
    uint64_t result = 0;
    uint64_t v23 = &v3[v22];
    BOOL v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v23 || !v25) {
      return result;
    }
    uint64_t v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26]) {
      return 0;
    }
    uint64_t result = 0;
    BOOL v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    uint64_t v28 = (char *)v27 - v2;
    BOOL v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    BOOL v30 = v29;
    if (v8 < (unint64_t)v28 || !v30) {
      return result;
    }
    uint64_t v31 = *v27;
    if (v31 > 0x7FFFFFFE) {
      return 0;
    }
    unint64_t v32 = v31 + 4;
    unint64_t v33 = (unint64_t)&v28[v31 + 4];
    BOOL v34 = v7 - 1 >= v33 && v7 > v32;
    BOOL v35 = v34 && v7 - v32 >= (unint64_t)v28;
    if (!v35 || *(unsigned char *)(v2 + v33)) {
      return 0;
    }
  }
  if (v21 < 7) {
    goto LABEL_82;
  }
  if (!v20[3]) {
    goto LABEL_94;
  }
  unint64_t v36 = (unint64_t)&v3[v20[3]];
  if ((v36 & 7) != 0 && v4) {
    return 0;
  }
  uint64_t result = 0;
  if (v7 >= 9 && v7 - 8 >= v36)
  {
LABEL_94:
    if (v21 < 9) {
      goto LABEL_82;
    }
    if (v20[4] && v7 - 1 < (unint64_t)&v3[v20[4]]) {
      return 0;
    }
    if (v21 < 0xB) {
      goto LABEL_82;
    }
    uint64_t v37 = v20[5];
    if (!v37) {
      goto LABEL_82;
    }
    uint64_t result = 0;
    unint64_t v38 = (unint64_t)&v3[v37];
    BOOL v39 = (v38 & 3) == 0 || v4 == 0;
    BOOL v40 = v39;
    if (v8 >= v38 && v40)
    {
      uint64_t v41 = *(unsigned int *)(v2 + v38);
      if ((int)v41 < 1 || v7 - 1 < v38 + v41) {
        return 0;
      }
      uint64_t result = sub_2C0B04((int *)((char *)a1 + v37 + *(unsigned int *)((char *)a1 + v37)), a2);
      if (result)
      {
LABEL_82:
        uint64_t result = sub_2A7CE0(a1, a2, 0xCu);
        if (!result) {
          return result;
        }
        uint64_t v42 = *a1;
        uint64_t v43 = -v42;
        unint64_t v44 = (unsigned __int16 *)((char *)a1 - v42);
        if (*v44 >= 0xDu)
        {
          uint64_t v45 = v44[6];
          if (v45)
          {
            uint64_t result = sub_2C9B6C((int *)((char *)a1 + v45 + *(unsigned int *)((char *)a1 + v45)), a2);
            if (!result) {
              return result;
            }
            uint64_t v43 = -(uint64_t)*a1;
          }
        }
        unint64_t v46 = (unsigned __int16 *)((char *)a1 + v43);
        if (*v46 < 0xFu
          || (uint64_t v47 = v46[7]) == 0
          || (uint64_t result = 0, v48 = *(void *)(a2 + 8), v48 >= 2)
          && v48 - 1 >= (unint64_t)a1 + v47 - *(void *)a2)
        {
          --*(_DWORD *)(a2 + 40);
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2C9B6C(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 40);
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  BOOL v16 = v12 + 1 > v15 || v13 > v14;
  if (v16) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  unsigned int v21 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v22 = *v21;
  if (v22 >= 5)
  {
    if (v21[2] && v7 - 1 < (unint64_t)&v3[v21[2]]) {
      return 0;
    }
    if (v22 >= 7)
    {
      uint64_t v23 = v21[3];
      if (v21[3])
      {
        unint64_t v24 = (unint64_t)&v3[v23];
        BOOL v26 = (v24 & 3) == 0 || v4 == 0;
        if (v8 < v24 || !v26) {
          return 0;
        }
        uint64_t v27 = *(unsigned int *)(v2 + v24);
        if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
          return 0;
        }
        uint64_t v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
        BOOL v29 = (char *)v28 - v2;
        BOOL v31 = (v29 & 3) == 0 || v4 == 0;
        if (v8 < (unint64_t)v29 || !v31) {
          return 0;
        }
        uint64_t v32 = *v28;
        if (v32 > 0x1FFFFFFE) {
          return 0;
        }
        unint64_t v33 = 4 * v32 + 4;
        BOOL v16 = v7 > v33;
        unint64_t v34 = v7 - v33;
        if (!v16 || v34 < (unint64_t)v29) {
          return 0;
        }
        if (v32)
        {
          unint64_t v35 = 0;
          unint64_t v36 = v28 + 1;
          while ((sub_2C2114((int *)((char *)v36 + *v36), (uint64_t *)a2) & 1) != 0)
          {
            ++v35;
            ++v36;
            if (v35 >= *v28)
            {
              int v12 = *(_DWORD *)(a2 + 40) - 1;
              goto LABEL_61;
            }
          }
          return 0;
        }
      }
    }
  }
LABEL_61:
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

uint64_t sub_2C9D84(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (unint64_t)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  BOOL v7 = v6 >= 5 && v6 - 4 >= v3;
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a2 + 10);
  unsigned int v10 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v9 + 1;
  *((_DWORD *)a2 + 11) = v10;
  if ((v9 + 1) > *((_DWORD *)a2 + 4) || v10 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v13 = v3 - v8;
  if ((v3 - v8))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v7 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v7 || v16 < v13) {
    return 0;
  }
  unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v19 = *v18;
  if (v19 < 5) {
    goto LABEL_41;
  }
  uint64_t v20 = v18[2];
  if (!v18[2]) {
    goto LABEL_40;
  }
  unint64_t v21 = v3 + v20;
  if (((v3 + v20) & 7) != 0 && v4) {
    return 0;
  }
  uint64_t v14 = 0;
  if (v6 >= 9 && v6 - 8 >= v21)
  {
LABEL_40:
    if (v19 >= 7 && (v18[3] && v6 - 1 < v3 + v18[3] || v19 >= 9 && v18[4] && v6 - 1 < v3 + v18[4])) {
      return 0;
    }
LABEL_41:
    *((_DWORD *)a2 + 10) = v9;
    return 1;
  }
  return v14;
}

uint64_t sub_2C9EC8(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  unsigned int v22 = (unsigned __int16 *)((char *)a1 - v20);
  unsigned int v23 = *v22;
  if (v23 < 5) {
    goto LABEL_63;
  }
  if (v22[2])
  {
    unint64_t v24 = (unint64_t)&v3[v22[2]];
    if ((v24 & 7) != 0 && v4) {
      return 0;
    }
    uint64_t result = 0;
    if (v7 < 9 || v7 - 8 < v24) {
      return result;
    }
  }
  if (v23 < 7) {
    goto LABEL_63;
  }
  uint64_t v25 = v22[3];
  if (!v25) {
    goto LABEL_63;
  }
  uint64_t result = 0;
  unint64_t v26 = (unint64_t)&v3[v25];
  BOOL v28 = (v26 & 3) == 0 || v4 == 0;
  if (v8 >= v26 && v28)
  {
    uint64_t v29 = *(unsigned int *)(v2 + v26);
    if ((int)v29 < 1 || v7 - 1 < v26 + v29) {
      return 0;
    }
    uint64_t result = 0;
    BOOL v30 = (unsigned int *)((char *)a1 + v25 + *(unsigned int *)((char *)a1 + v25));
    BOOL v31 = (char *)v30 - v2;
    BOOL v32 = (v31 & 3) == 0 || v4 == 0;
    BOOL v33 = v32;
    if (v8 >= (unint64_t)v31 && v33)
    {
      uint64_t v34 = *v30;
      if (v34 > 0x1FFFFFFE) {
        return 0;
      }
      uint64_t result = 0;
      unint64_t v35 = 4 * v34 + 4;
      BOOL v15 = v7 > v35;
      unint64_t v36 = v7 - v35;
      if (v15 && v36 >= (unint64_t)v31)
      {
        if (v34)
        {
          unint64_t v37 = 0;
          unint64_t v38 = v30 + 1;
          while ((sub_2B1208((int *)((char *)v38 + *v38), a2) & 1) != 0)
          {
            ++v37;
            ++v38;
            if (v37 >= *v30)
            {
              uint64_t v21 = -(uint64_t)*a1;
              goto LABEL_63;
            }
          }
          return 0;
        }
LABEL_63:
        if (*(unsigned __int16 *)((char *)a1 + v21) < 9u) {
          goto LABEL_75;
        }
        uint64_t v39 = *(unsigned __int16 *)((char *)a1 + v21 + 8);
        if (!*(_WORD *)((char *)a1 + v21 + 8)) {
          goto LABEL_75;
        }
        unint64_t v40 = (unint64_t)a1 + v39 - *(void *)a2;
        uint64_t result = 0;
        if ((v40 & 3) == 0 || *(unsigned char *)(a2 + 24) == 0)
        {
          unint64_t v42 = *(void *)(a2 + 8);
          if (v42 >= 5 && v42 - 4 >= v40)
          {
            uint64_t v43 = *(unsigned int *)(*(void *)a2 + v40);
            if ((int)v43 < 1 || v42 - 1 < v40 + v43) {
              return 0;
            }
            uint64_t result = sub_2C0B04((int *)((char *)a1 + v39 + *(unsigned int *)((char *)a1 + v39)), a2);
            if (result)
            {
LABEL_75:
              uint64_t result = sub_2A7CE0(a1, a2, 0xAu);
              if (result)
              {
                unint64_t v44 = (unsigned __int16 *)((char *)a1 - *a1);
                if (*v44 >= 0xBu && (uint64_t v45 = v44[5]) != 0) {
                  unint64_t v46 = (unsigned int *)((char *)a1 + v45 + *(unsigned int *)((char *)a1 + v45));
                }
                else {
                  unint64_t v46 = 0;
                }
                uint64_t result = sub_2A7D68(a2, v46);
                if (result)
                {
                  uint64_t v47 = (unsigned __int16 *)((char *)a1 - *a1);
                  if (*v47 >= 0xBu && (uint64_t v48 = v47[5]) != 0) {
                    BOOL v49 = (int *)((char *)a1 + v48 + *(unsigned int *)((char *)a1 + v48));
                  }
                  else {
                    BOOL v49 = 0;
                  }
                  uint64_t result = sub_2CA454((uint64_t *)a2, v49);
                  if (result)
                  {
                    uint64_t result = sub_2A7CE0(a1, a2, 0xCu);
                    if (result)
                    {
                      uint64_t v50 = (unsigned __int16 *)((char *)a1 - *a1);
                      if (*v50 < 0xDu
                        || (uint64_t v51 = v50[6]) == 0
                        || (uint64_t result = sub_2C0B04((int *)((char *)a1 + v51 + *(unsigned int *)((char *)a1 + v51)), a2),
                            result))
                      {
                        uint64_t result = sub_2A7CE0(a1, a2, 0xEu);
                        if (result)
                        {
                          unint64_t v52 = (unsigned __int16 *)((char *)a1 - *a1);
                          if (*v52 >= 0xFu && (uint64_t v53 = v52[7]) != 0) {
                            uint64_t v54 = (unsigned int *)((char *)a1 + v53 + *(unsigned int *)((char *)a1 + v53));
                          }
                          else {
                            uint64_t v54 = 0;
                          }
                          uint64_t result = sub_2A7D68(a2, v54);
                          if (result)
                          {
                            unsigned int v55 = (unsigned __int16 *)((char *)a1 - *a1);
                            if (*v55 >= 0xFu && (uint64_t v56 = v55[7]) != 0) {
                              uint64_t v57 = (int *)((char *)a1 + v56 + *(unsigned int *)((char *)a1 + v56));
                            }
                            else {
                              uint64_t v57 = 0;
                            }
                            uint64_t result = sub_2CA4E0(a2, v57);
                            if (result)
                            {
                              uint64_t result = sub_2A7CE0(a1, a2, 0x10u);
                              if (result)
                              {
                                unsigned int v58 = (unsigned __int16 *)((char *)a1 - *a1);
                                if (*v58 < 0x11u
                                  || (uint64_t v59 = v58[8]) == 0
                                  || (uint64_t result = sub_2C0B04((int *)((char *)a1 + v59 + *(unsigned int *)((char *)a1 + v59)), a2), result))
                                {
                                  uint64_t result = sub_2A7CE0(a1, a2, 0x12u);
                                  if (result)
                                  {
                                    unsigned int v60 = (unsigned __int16 *)((char *)a1 - *a1);
                                    if (*v60 >= 0x13u && (uint64_t v61 = v60[9]) != 0) {
                                      uint64_t v62 = (unsigned int *)((char *)a1 + v61 + *(unsigned int *)((char *)a1 + v61));
                                    }
                                    else {
                                      uint64_t v62 = 0;
                                    }
                                    uint64_t result = sub_2A7D68(a2, v62);
                                    if (result)
                                    {
                                      unint64_t v63 = (unsigned __int16 *)((char *)a1 - *a1);
                                      if (*v63 >= 0x13u && (uint64_t v64 = v63[9]) != 0) {
                                        uint64_t v65 = (int *)((char *)a1 + v64 + *(unsigned int *)((char *)a1 + v64));
                                      }
                                      else {
                                        uint64_t v65 = 0;
                                      }
                                      uint64_t result = sub_2CA4E0(a2, v65);
                                      if (result)
                                      {
                                        uint64_t result = sub_2A7CE0(a1, a2, 0x14u);
                                        if (result)
                                        {
                                          uint64_t v66 = (unsigned __int16 *)((char *)a1 - *a1);
                                          if (*v66 >= 0x15u && (uint64_t v67 = v66[10]) != 0) {
                                            uint64_t v68 = (unsigned int *)((char *)a1 + v67
                                          }
                                                                              + *(unsigned int *)((char *)a1 + v67));
                                          else {
                                            uint64_t v68 = 0;
                                          }
                                          uint64_t result = sub_2A7D68(a2, v68);
                                          if (result)
                                          {
                                            uint64_t v69 = (unsigned __int16 *)((char *)a1 - *a1);
                                            if (*v69 >= 0x15u && (uint64_t v70 = v69[10]) != 0) {
                                              uint64_t v71 = (int *)((char *)a1 + v70 + *(unsigned int *)((char *)a1 + v70));
                                            }
                                            else {
                                              uint64_t v71 = 0;
                                            }
                                            uint64_t result = sub_2C1FFC((uint64_t *)a2, v71);
                                            if (result)
                                            {
                                              --*(_DWORD *)(a2 + 40);
                                              return 1;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2CA454(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2CA56C((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2CA4E0(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2CA6D0((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2CA56C(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (unint64_t)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  BOOL v7 = v6 >= 5 && v6 - 4 >= v3;
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a2 + 10);
  unsigned int v10 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v9 + 1;
  *((_DWORD *)a2 + 11) = v10;
  if ((v9 + 1) > *((_DWORD *)a2 + 4) || v10 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v12 = v3 - v8;
  if ((v3 - v8))
  {
    uint64_t v13 = 0;
    if (v4 || v6 - 2 < v12) {
      return v13;
    }
  }
  else if (v6 - 2 < v12)
  {
    return 0;
  }
  unint64_t v14 = *(unsigned __int16 *)(v2 + v12);
  if ((v14 & 1) != 0 && v4 | v14 & 1) {
    return 0;
  }
  BOOL v7 = v6 >= v14;
  unint64_t v15 = v6 - v14;
  if (v15 == 0 || !v7 || v15 < v12) {
    return 0;
  }
  unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v19 = *v18;
  if (v19 < 5) {
    goto LABEL_42;
  }
  uint64_t v20 = v18[2];
  if (!v18[2]) {
    goto LABEL_41;
  }
  unint64_t v21 = v3 + v20;
  if (((v3 + v20) & 3) != 0 && v4) {
    return 0;
  }
  uint64_t v13 = 0;
  if (v6 >= 9 && v6 - 8 >= v21)
  {
LABEL_41:
    if (v19 >= 7
      && (v18[3] && v6 - 1 < v3 + v18[3]
       || v19 >= 9 && (v18[4] && v6 - 1 < v3 + v18[4] || v19 >= 0xB && v18[5] && v6 - 1 < v3 + v18[5])))
    {
      return 0;
    }
LABEL_42:
    *((_DWORD *)a2 + 10) = v9;
    return 1;
  }
  return v13;
}

uint64_t sub_2CA6D0(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  unsigned int v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 < 5u) {
    goto LABEL_44;
  }
  uint64_t v23 = v22[2];
  if (!v23) {
    goto LABEL_44;
  }
  uint64_t result = 0;
  unint64_t v24 = (unint64_t)&v3[v23];
  BOOL v26 = (v24 & 3) == 0 || v4 == 0;
  if (v8 >= v24 && v26)
  {
    uint64_t v27 = *(unsigned int *)(v2 + v24);
    if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
      return 0;
    }
    uint64_t result = sub_2CA888((int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23)), a2);
    if (result)
    {
      uint64_t v21 = -(uint64_t)*a1;
LABEL_44:
      if (*(unsigned __int16 *)((char *)a1 + v21) < 7u
        || !*(_WORD *)((char *)a1 + v21 + 6)
        || (result = 0, unint64_t v28 = *(void *)(a2 + 8), v28 >= 2)
        && v28 - 1 >= (unint64_t)a1 + *(unsigned __int16 *)((char *)a1 + v21 + 6) - *(void *)a2)
      {
        --*(_DWORD *)(a2 + 40);
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_2CA888(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  unsigned int v12 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  BOOL v14 = v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20);
  if (v14) {
    return 0;
  }
  unint64_t v15 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v15) {
      return 0;
    }
  }
  else if (v7 - 2 < v15)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v16;
  unint64_t v17 = v7 - v16;
  if (v17 == 0 || !v9 || v17 < v15) {
    return 0;
  }
  uint64_t v19 = *a1;
  uint64_t v20 = -v19;
  uint64_t v21 = (unsigned __int16 *)((char *)a1 - v19);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
        return 0;
      }
      uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      unint64_t v28 = (char *)v27 - v2;
      BOOL v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30) {
        return 0;
      }
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v32 = 4 * v31 + 4;
      BOOL v14 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (!v14 || v33 < (unint64_t)v28) {
        return 0;
      }
      if (v31)
      {
        uint64_t v43 = a1;
        unint64_t v35 = 0;
        unint64_t v36 = v27 + 1;
        while ((sub_2CAB24((int *)((char *)v36 + *v36), a2) & 1) != 0)
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            a1 = v43;
            uint64_t v20 = -(uint64_t)*v43;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  unint64_t v37 = (char *)a1 + v20;
  if (*(unsigned __int16 *)((char *)a1 + v20) >= 7u)
  {
    uint64_t v38 = *((unsigned __int16 *)v37 + 3);
    if (*((_WORD *)v37 + 3))
    {
      unint64_t v39 = (unint64_t)a1 + v38 - *(void *)a2;
      if ((v39 & 3) != 0 && *(unsigned char *)(a2 + 24) != 0) {
        return 0;
      }
      unint64_t v41 = *(void *)(a2 + 8);
      if (v41 < 5 || v41 - 4 < v39) {
        return 0;
      }
      uint64_t v42 = *(unsigned int *)(*(void *)a2 + v39);
      if ((int)v42 < 1
        || v41 - 1 < v39 + v42
        || !sub_2CAB24((int *)((char *)a1 + v38 + *(unsigned int *)((char *)a1 + v38)), a2))
      {
        return 0;
      }
    }
  }
  --*(_DWORD *)(a2 + 40);
  return 1;
}

uint64_t sub_2CAB24(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v10 = *a1;
  int v11 = *(_DWORD *)(a2 + 40);
  unsigned int v12 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v11 + 1;
  *(_DWORD *)(a2 + 44) = v12;
  if ((v11 + 1) > *(_DWORD *)(a2 + 16) || v12 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v10];
  if ((v3 - v10))
  {
    if (v4 || v6 - 2 < v14) {
      return 0;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v14);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v14) {
    return 0;
  }
  unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v19 = *v18;
  if (v19 >= 5)
  {
    uint64_t v20 = v18[2];
    if (v18[2])
    {
      uint64_t v21 = &v3[v20];
      BOOL v23 = ((unint64_t)&v3[v20] & 3) == 0 || v4 == 0;
      if (v7 < (unint64_t)v21 || !v23) {
        return 0;
      }
      uint64_t v24 = *(unsigned int *)&v21[v2];
      if ((int)v24 < 1 || v6 - 1 < (unint64_t)&v21[v24]) {
        return 0;
      }
      BOOL v25 = (unsigned int *)((char *)a1 + v20 + *(unsigned int *)((char *)a1 + v20));
      uint64_t v26 = (char *)v25 - v2;
      BOOL v28 = (((unint64_t)v25 - v2) & 3) == 0 || v4 == 0;
      if (v7 < (unint64_t)v26 || !v28) {
        return 0;
      }
      uint64_t v29 = *v25;
      if (v29 > 0x7FFFFFFE) {
        return 0;
      }
      unint64_t v30 = v29 + 4;
      unint64_t v31 = (unint64_t)&v26[v29 + 4];
      BOOL v32 = v6 - 1 >= v31 && v6 > v30;
      BOOL v33 = v32 && v6 - v30 >= (unint64_t)v26;
      if (!v33 || *(unsigned char *)(v2 + v31)) {
        return 0;
      }
    }
    if (v19 < 7) {
      goto LABEL_71;
    }
    uint64_t v34 = v18[3];
    if (!v34) {
      goto LABEL_71;
    }
    unint64_t v35 = (unint64_t)&v3[v34];
    BOOL v37 = (v35 & 3) == 0 || v4 == 0;
    if (v7 < v35 || !v37) {
      return 0;
    }
    uint64_t v38 = *(unsigned int *)(v2 + v35);
    if ((int)v38 >= 1 && v6 - 1 >= v35 + v38)
    {
      uint64_t v39 = a2;
      if (sub_2C3468((int *)((char *)a1 + v34 + *(unsigned int *)((char *)a1 + v34)), a2))
      {
        a2 = v39;
        int v11 = *(_DWORD *)(v39 + 40) - 1;
        goto LABEL_71;
      }
    }
    return 0;
  }
LABEL_71:
  *(_DWORD *)(a2 + 40) = v11;
  return 1;
}

BOOL sub_2CAD44(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  uint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 >= 5u)
  {
    uint64_t v23 = v22[2];
    if (v23)
    {
      BOOL result = 0;
      unint64_t v24 = (unint64_t)&v3[v23];
      BOOL v26 = (v24 & 3) == 0 || v4 == 0;
      if (v8 < v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
        return 0;
      }
      BOOL result = sub_2B0928((int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23)), a2);
      if (!result) {
        return result;
      }
      uint64_t v21 = -(uint64_t)*a1;
    }
  }
  if (*(unsigned __int16 *)((char *)a1 + v21) >= 7u)
  {
    uint64_t v28 = *(unsigned __int16 *)((char *)a1 + v21 + 6);
    if (*(_WORD *)((char *)a1 + v21 + 6))
    {
      unint64_t v29 = (unint64_t)a1 + v28 - *(void *)a2;
      if ((v29 & 3) != 0 && *(unsigned char *)(a2 + 24)) {
        return 0;
      }
      BOOL result = 0;
      unint64_t v30 = *(void *)(a2 + 8);
      if (v30 < 5 || v30 - 4 < v29) {
        return result;
      }
      uint64_t v31 = *(unsigned int *)(*(void *)a2 + v29);
      if ((int)v31 < 1 || v30 - 1 < v29 + v31) {
        return 0;
      }
      BOOL result = sub_2B0928((int *)((char *)a1 + v28 + *(unsigned int *)((char *)a1 + v28)), a2);
      if (!result) {
        return result;
      }
      uint64_t v21 = -(uint64_t)*a1;
    }
  }
  if (*(unsigned __int16 *)((char *)a1 + v21) < 9u) {
    goto LABEL_61;
  }
  uint64_t v32 = *(unsigned __int16 *)((char *)a1 + v21 + 8);
  if (!*(_WORD *)((char *)a1 + v21 + 8)) {
    goto LABEL_61;
  }
  unint64_t v33 = (unint64_t)a1 + v32 - *(void *)a2;
  if ((v33 & 3) != 0 && *(unsigned char *)(a2 + 24)) {
    return 0;
  }
  BOOL result = 0;
  unint64_t v34 = *(void *)(a2 + 8);
  if (v34 >= 5 && v34 - 4 >= v33)
  {
    uint64_t v35 = *(unsigned int *)(*(void *)a2 + v33);
    if ((int)v35 < 1 || v34 - 1 < v33 + v35) {
      return 0;
    }
    BOOL result = sub_2B0928((int *)((char *)a1 + v32 + *(unsigned int *)((char *)a1 + v32)), a2);
    if (result)
    {
LABEL_61:
      --*(_DWORD *)(a2 + 40);
      return 1;
    }
  }
  return result;
}

uint64_t sub_2CAFCC(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  uint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 >= 5u)
  {
    uint64_t v23 = v22[2];
    if (v23)
    {
      uint64_t result = 0;
      unint64_t v24 = (unint64_t)&v3[v23];
      BOOL v26 = (v24 & 3) == 0 || v4 == 0;
      if (v8 < v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
        return 0;
      }
      uint64_t result = sub_2CBA08((int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23)), a2);
      if (!result) {
        return result;
      }
      uint64_t v21 = -(uint64_t)*a1;
    }
  }
  if (*(unsigned __int16 *)((char *)a1 + v21) >= 7u)
  {
    uint64_t v28 = *(unsigned __int16 *)((char *)a1 + v21 + 6);
    if (*(_WORD *)((char *)a1 + v21 + 6))
    {
      unint64_t v29 = (unint64_t)a1 + v28 - *(void *)a2;
      if ((v29 & 3) != 0 && *(unsigned char *)(a2 + 24)) {
        return 0;
      }
      uint64_t result = 0;
      unint64_t v30 = *(void *)(a2 + 8);
      if (v30 < 5 || v30 - 4 < v29) {
        return result;
      }
      uint64_t v31 = *(unsigned int *)(*(void *)a2 + v29);
      if ((int)v31 < 1 || v30 - 1 < v29 + v31) {
        return 0;
      }
      uint64_t result = sub_2CBCB4((int *)((char *)a1 + v28 + *(unsigned int *)((char *)a1 + v28)), a2);
      if (!result) {
        return result;
      }
      uint64_t v21 = -(uint64_t)*a1;
    }
  }
  if (*(unsigned __int16 *)((char *)a1 + v21) < 9u
    || (uint64_t v32 = *(unsigned __int16 *)((char *)a1 + v21 + 8), !*(_WORD *)((char *)a1 + v21 + 8)))
  {
    uint64_t result = sub_2A7D68(a2, 0);
    if (!result) {
      return result;
    }
    goto LABEL_65;
  }
  unint64_t v33 = (unint64_t)a1 + v32 - *(void *)a2;
  if ((v33 & 3) != 0 && *(unsigned char *)(a2 + 24)) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v34 = *(void *)(a2 + 8);
  if (v34 >= 5 && v34 - 4 >= v33)
  {
    uint64_t v35 = *(unsigned int *)(*(void *)a2 + v33);
    if ((int)v35 < 1 || v34 - 1 < v33 + v35) {
      return 0;
    }
    uint64_t result = sub_2A7D68(a2, (unsigned int *)((char *)a1 + v32 + *(unsigned int *)((char *)a1 + v32)));
    if (result)
    {
LABEL_65:
      unint64_t v36 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v36 >= 9u && (uint64_t v37 = v36[4]) != 0) {
        uint64_t v38 = (int *)((char *)a1 + v37 + *(unsigned int *)((char *)a1 + v37));
      }
      else {
        uint64_t v38 = 0;
      }
      uint64_t result = sub_2CB6C0((uint64_t *)a2, v38);
      if (result)
      {
        uint64_t result = sub_2A7CE0(a1, a2, 0xAu);
        if (result)
        {
          uint64_t v39 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v39 >= 0xBu && (uint64_t v40 = v39[5]) != 0) {
            unint64_t v41 = (unsigned int *)((char *)a1 + v40 + *(unsigned int *)((char *)a1 + v40));
          }
          else {
            unint64_t v41 = 0;
          }
          uint64_t result = sub_2A7D68(a2, v41);
          if (result)
          {
            uint64_t v42 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v42 >= 0xBu && (uint64_t v43 = v42[5]) != 0) {
              unint64_t v44 = (int *)((char *)a1 + v43 + *(unsigned int *)((char *)a1 + v43));
            }
            else {
              unint64_t v44 = 0;
            }
            uint64_t result = sub_2CB74C((uint64_t *)a2, v44);
            if (result)
            {
              uint64_t result = sub_2A7CE0(a1, a2, 0xCu);
              if (result)
              {
                uint64_t v45 = (unsigned __int16 *)((char *)a1 - *a1);
                if (*v45 >= 0xDu && (uint64_t v46 = v45[6]) != 0) {
                  uint64_t v47 = (unsigned int *)((char *)a1 + v46 + *(unsigned int *)((char *)a1 + v46));
                }
                else {
                  uint64_t v47 = 0;
                }
                uint64_t result = sub_2A7D68(a2, v47);
                if (result)
                {
                  uint64_t v48 = (unsigned __int16 *)((char *)a1 - *a1);
                  if (*v48 >= 0xDu && (uint64_t v49 = v48[6]) != 0) {
                    uint64_t v50 = (int *)((char *)a1 + v49 + *(unsigned int *)((char *)a1 + v49));
                  }
                  else {
                    uint64_t v50 = 0;
                  }
                  uint64_t result = sub_2CB7D8(a2, v50);
                  if (result)
                  {
                    uint64_t result = sub_2A7CE0(a1, a2, 0xEu);
                    if (result)
                    {
                      uint64_t v51 = (unsigned __int16 *)((char *)a1 - *a1);
                      if (*v51 >= 0xFu && (uint64_t v52 = v51[7]) != 0) {
                        uint64_t v53 = (unsigned int *)((char *)a1 + v52 + *(unsigned int *)((char *)a1 + v52));
                      }
                      else {
                        uint64_t v53 = 0;
                      }
                      uint64_t result = sub_2A7D68(a2, v53);
                      if (result)
                      {
                        uint64_t v54 = (unsigned __int16 *)((char *)a1 - *a1);
                        if (*v54 >= 0xFu && (uint64_t v55 = v54[7]) != 0) {
                          uint64_t v56 = (int *)((char *)a1 + v55 + *(unsigned int *)((char *)a1 + v55));
                        }
                        else {
                          uint64_t v56 = 0;
                        }
                        uint64_t result = sub_2CB864((uint64_t *)a2, v56);
                        if (result)
                        {
                          uint64_t result = sub_2A7CE0(a1, a2, 0x10u);
                          if (result)
                          {
                            uint64_t v57 = (unsigned __int16 *)((char *)a1 - *a1);
                            if (*v57 >= 0x11u && (uint64_t v58 = v57[8]) != 0) {
                              uint64_t v59 = (unsigned int *)((char *)a1 + v58 + *(unsigned int *)((char *)a1 + v58));
                            }
                            else {
                              uint64_t v59 = 0;
                            }
                            uint64_t result = sub_2A7D68(a2, v59);
                            if (result)
                            {
                              unsigned int v60 = (unsigned __int16 *)((char *)a1 - *a1);
                              if (*v60 >= 0x11u && (uint64_t v61 = v60[8]) != 0) {
                                uint64_t v62 = (int *)((char *)a1 + v61 + *(unsigned int *)((char *)a1 + v61));
                              }
                              else {
                                uint64_t v62 = 0;
                              }
                              uint64_t result = sub_2CB864((uint64_t *)a2, v62);
                              if (result)
                              {
                                uint64_t result = sub_2A7CE0(a1, a2, 0x12u);
                                if (result)
                                {
                                  unint64_t v63 = (unsigned __int16 *)((char *)a1 - *a1);
                                  if (*v63 >= 0x13u && (uint64_t v64 = v63[9]) != 0) {
                                    uint64_t v65 = (unsigned int *)((char *)a1 + v64 + *(unsigned int *)((char *)a1 + v64));
                                  }
                                  else {
                                    uint64_t v65 = 0;
                                  }
                                  uint64_t result = sub_2A7D68(a2, v65);
                                  if (result)
                                  {
                                    uint64_t v66 = (unsigned __int16 *)((char *)a1 - *a1);
                                    if (*v66 >= 0x13u && (uint64_t v67 = v66[9]) != 0) {
                                      uint64_t v68 = (int *)((char *)a1 + v67 + *(unsigned int *)((char *)a1 + v67));
                                    }
                                    else {
                                      uint64_t v68 = 0;
                                    }
                                    uint64_t result = sub_2CB864((uint64_t *)a2, v68);
                                    if (result)
                                    {
                                      uint64_t result = sub_2A7CE0(a1, a2, 0x14u);
                                      if (result)
                                      {
                                        uint64_t v69 = (unsigned __int16 *)((char *)a1 - *a1);
                                        if (*v69 >= 0x15u && (uint64_t v70 = v69[10]) != 0) {
                                          uint64_t v71 = (unsigned int *)((char *)a1 + v70 + *(unsigned int *)((char *)a1 + v70));
                                        }
                                        else {
                                          uint64_t v71 = 0;
                                        }
                                        uint64_t result = sub_2A7D68(a2, v71);
                                        if (result)
                                        {
                                          unint64_t v72 = (unsigned __int16 *)((char *)a1 - *a1);
                                          if (*v72 >= 0x15u && (uint64_t v73 = v72[10]) != 0) {
                                            uint64_t v74 = (int *)((char *)a1 + v73 + *(unsigned int *)((char *)a1 + v73));
                                          }
                                          else {
                                            uint64_t v74 = 0;
                                          }
                                          uint64_t result = sub_2CB8F0((uint64_t *)a2, v74);
                                          if (result)
                                          {
                                            uint64_t result = sub_2A7CE0(a1, a2, 0x16u);
                                            if (result)
                                            {
                                              uint64_t v75 = (unsigned __int16 *)((char *)a1 - *a1);
                                              if (*v75 < 0x17u
                                                || (uint64_t v76 = v75[11]) == 0
                                                || (uint64_t result = sub_2CCE24((int *)((char *)a1+ v76+ *(unsigned int *)((char *)a1 + v76)), a2), result))
                                              {
                                                uint64_t result = sub_2A7CE0(a1, a2, 0x18u);
                                                if (result)
                                                {
                                                  uint64_t v77 = (unsigned __int16 *)((char *)a1 - *a1);
                                                  if (*v77 >= 0x19u && (uint64_t v78 = v77[12]) != 0) {
                                                    unint64_t v79 = (unsigned int *)((char *)a1
                                                  }
                                                                         + v78
                                                                         + *(unsigned int *)((char *)a1 + v78));
                                                  else {
                                                    unint64_t v79 = 0;
                                                  }
                                                  uint64_t result = sub_2A7D68(a2, v79);
                                                  if (result)
                                                  {
                                                    uint64_t v80 = (unsigned __int16 *)((char *)a1 - *a1);
                                                    if (*v80 >= 0x19u && (uint64_t v81 = v80[12]) != 0) {
                                                      unint64_t v82 = (int *)((char *)a1
                                                    }
                                                                  + v81
                                                                  + *(unsigned int *)((char *)a1 + v81));
                                                    else {
                                                      unint64_t v82 = 0;
                                                    }
                                                    uint64_t result = sub_2CB97C(a2, v82);
                                                    if (result)
                                                    {
                                                      --*(_DWORD *)(a2 + 40);
                                                      return 1;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2CB6C0(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2CC4D8((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2CB74C(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2CC640((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2CB7D8(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2CC7B0((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2CB864(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2CCCA0((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2CB8F0(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2B5704((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2CB97C(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2CD108((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

BOOL sub_2CBA08(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_71;
  }
  uint64_t v22 = v20[2];
  if (!v20[2]
    || ((result = 0, uint64_t v23 = &v3[v22], ((unint64_t)&v3[v22] & 3) != 0) ? (v24 = v4 == 0) : (v24 = 1),
        !v24 ? (int v25 = 0) : (int v25 = 1),
        v8 >= (unint64_t)v23 && v25))
  {
    if (v21 < 7) {
      goto LABEL_71;
    }
    uint64_t v26 = v20[3];
    if (!v20[3]
      || ((result = 0, uint64_t v27 = &v3[v26], ((unint64_t)&v3[v26] & 3) != 0) ? (v28 = v4 == 0) : (v28 = 1),
          !v28 ? (int v29 = 0) : (int v29 = 1),
          v8 >= (unint64_t)v27 && v29))
    {
      if (v21 < 9) {
        goto LABEL_71;
      }
      if (v20[4] && v7 - 1 < (unint64_t)&v3[v20[4]]) {
        return 0;
      }
      if (v21 < 0xB) {
        goto LABEL_71;
      }
      uint64_t v30 = v20[5];
      if (!v20[5]
        || ((result = 0, uint64_t v31 = &v3[v30], ((unint64_t)&v3[v30] & 3) != 0) ? (v32 = v4 == 0) : (v32 = 1),
            !v32 ? (int v33 = 0) : (int v33 = 1),
            v8 >= (unint64_t)v31 && v33))
      {
        if (v21 < 0xD
          || !v20[6]
          || ((result = 0, unint64_t v34 = (unint64_t)&v3[v20[6]], (v34 & 3) != 0) ? (v35 = v4 == 0) : (v35 = 1),
              !v35 ? (int v36 = 0) : (int v36 = 1),
              v8 >= v34 && v36))
        {
LABEL_71:
          BOOL result = sub_2B16B4(a1, a2, 0xEu, 4);
          if (result)
          {
            BOOL result = sub_2B16B4(a1, a2, 0x10u, 4);
            if (result)
            {
              uint64_t v37 = (unsigned __int16 *)((char *)a1 - *a1);
              unsigned int v38 = *v37;
              if (v38 < 0x13
                || (!v37[9]
                 || (BOOL result = 0, v39 = *(void *)(a2 + 8), v39 >= 2)
                 && v39 - 1 >= (unint64_t)a1 + v37[9] - *(void *)a2)
                && (v38 < 0x15
                 || (uint64_t v40 = v37[10]) == 0
                 || (BOOL result = 0, v41 = *(void *)(a2 + 8), v41 >= 2)
                 && v41 - 1 >= (unint64_t)a1 + v40 - *(void *)a2))
              {
                BOOL result = sub_2B16B4(a1, a2, 0x16u, 4);
                if (result)
                {
                  --*(_DWORD *)(a2 + 40);
                  return 1;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_2CBCB4(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  uint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 >= 5u)
  {
    uint64_t v23 = v22[2];
    if (v23)
    {
      BOOL result = 0;
      unint64_t v24 = (unint64_t)&v3[v23];
      BOOL v26 = (v24 & 3) == 0 || v4 == 0;
      if (v8 < v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
        return 0;
      }
      BOOL result = 0;
      BOOL v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
      int v29 = (char *)v28 - v2;
      BOOL v30 = (v29 & 3) == 0 || v4 == 0;
      BOOL v31 = v30;
      if (v8 < (unint64_t)v29 || !v31) {
        return result;
      }
      uint64_t v32 = *v28;
      if (v32 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v33 = 4 * v32 + 4;
      BOOL v15 = v7 > v33;
      unint64_t v34 = v7 - v33;
      if (!v15 || v34 < (unint64_t)v29) {
        return 0;
      }
      if (v32)
      {
        unint64_t v36 = 0;
        uint64_t v37 = v28 + 1;
        while (sub_2CC014((int *)((char *)v37 + *v37), a2))
        {
          ++v36;
          ++v37;
          if (v36 >= *v28)
          {
            uint64_t v21 = -(uint64_t)*a1;
            goto LABEL_61;
          }
        }
        return 0;
      }
    }
  }
LABEL_61:
  unsigned int v38 = (char *)a1 + v21;
  if (*(unsigned __int16 *)((char *)a1 + v21) >= 7u)
  {
    uint64_t v39 = *((unsigned __int16 *)v38 + 3);
    if (*((_WORD *)v38 + 3))
    {
      uint64_t v40 = *(void *)a2;
      unint64_t v41 = (unint64_t)a1 + v39 - *(void *)a2;
      int v42 = *(unsigned __int8 *)(a2 + 24);
      BOOL result = 0;
      if ((v41 & 3) != 0 && v42 != 0) {
        return result;
      }
      unint64_t v44 = *(void *)(a2 + 8);
      if (v44 < 5 || v44 - 4 < v41) {
        return result;
      }
      uint64_t v45 = *(unsigned int *)(v40 + v41);
      if ((int)v45 < 1 || v44 - 1 < v41 + v45) {
        return 0;
      }
      uint64_t v46 = (unsigned int *)((char *)a1 + v39 + *(unsigned int *)((char *)a1 + v39));
      unint64_t v47 = (unint64_t)v46 - v40;
      BOOL v48 = (((unint64_t)v46 - v40) & 3) == 0 || v42 == 0;
      BOOL v49 = v48;
      if (v44 - 4 < v47 || !v49) {
        return 0;
      }
      uint64_t v51 = *v46;
      if (v51 > 0xFFFFFFE) {
        return 0;
      }
      unint64_t v52 = (8 * v51) | 4;
      BOOL v15 = v44 > v52;
      unint64_t v53 = v44 - v52;
      if (!v15 || v53 < v47) {
        return 0;
      }
    }
  }
  BOOL result = sub_2A7CE0(a1, a2, 8u);
  if (result)
  {
    uint64_t v55 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v55 >= 9u && (uint64_t v56 = v55[4]) != 0) {
      uint64_t v57 = (int *)((char *)a1 + v56 + *(unsigned int *)((char *)a1 + v56));
    }
    else {
      uint64_t v57 = 0;
    }
    BOOL result = sub_2A7DD0(a2, v57);
    if (result)
    {
      BOOL result = sub_2A7CE0(a1, a2, 0xAu);
      if (result)
      {
        uint64_t v58 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v58 >= 0xBu && (uint64_t v59 = v58[5]) != 0) {
          unsigned int v60 = (int *)((char *)a1 + v59 + *(unsigned int *)((char *)a1 + v59));
        }
        else {
          unsigned int v60 = 0;
        }
        BOOL result = sub_2A7DD0(a2, v60);
        if (result)
        {
          --*(_DWORD *)(a2 + 40);
          return 1;
        }
      }
    }
  }
  return result;
}

BOOL sub_2CC014(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_93;
  }
  uint64_t v22 = v20[2];
  if (v20[2])
  {
    BOOL result = 0;
    uint64_t v23 = &v3[v22];
    BOOL v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v23 || !v25) {
      return result;
    }
    uint64_t v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26]) {
      return 0;
    }
    BOOL result = 0;
    uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    BOOL v28 = (char *)v27 - v2;
    BOOL v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    BOOL v30 = v29;
    if (v8 < (unint64_t)v28 || !v30) {
      return result;
    }
    uint64_t v31 = *v27;
    if (v31 > 0xFFFFFFE) {
      return 0;
    }
    unint64_t v32 = (8 * v31) | 4;
    BOOL v9 = v7 >= v32;
    unint64_t v33 = v7 - v32;
    if (v33 == 0 || !v9 || v33 < (unint64_t)v28) {
      return 0;
    }
  }
  if (v21 < 7) {
    goto LABEL_93;
  }
  uint64_t v35 = v20[3];
  if (!v20[3])
  {
LABEL_80:
    if (v21 >= 9)
    {
      uint64_t v48 = v20[4];
      if (v48)
      {
        BOOL result = 0;
        unint64_t v49 = (unint64_t)&v3[v48];
        BOOL v51 = (v49 & 3) == 0 || v4 == 0;
        if (v8 < v49 || !v51) {
          return result;
        }
        uint64_t v52 = *(unsigned int *)(v2 + v49);
        if ((int)v52 < 1 || v7 - 1 < v49 + v52) {
          return 0;
        }
        unint64_t v53 = (unsigned int *)((char *)a1 + v48 + *(unsigned int *)((char *)a1 + v48));
        goto LABEL_94;
      }
    }
LABEL_93:
    unint64_t v53 = 0;
LABEL_94:
    BOOL result = sub_2CC470(a2, v53);
    if (result)
    {
      uint64_t v54 = (unsigned __int16 *)((char *)a1 - *a1);
      unsigned int v55 = *v54;
      if (v55 < 0xB
        || (!v54[5]
         || (BOOL result = 0, v56 = *(void *)(a2 + 8), v56 >= 2)
         && v56 - 1 >= (unint64_t)a1 + v54[5] - *(void *)a2)
        && (v55 < 0xD
         || (uint64_t v57 = v54[6]) == 0
         || (BOOL result = 0, v58 = *(void *)(a2 + 8), v58 >= 2) && v58 - 1 >= (unint64_t)a1 + v57 - *(void *)a2))
      {
        BOOL result = sub_2AF5DC(a1, a2, 0xEu, 2);
        if (result)
        {
          BOOL result = sub_2B16B4(a1, a2, 0x10u, 4);
          if (result)
          {
            BOOL result = sub_2B16B4(a1, a2, 0x12u, 4);
            if (result)
            {
              BOOL result = sub_2A7CE0(a1, a2, 0x14u);
              if (result)
              {
                uint64_t v59 = (unsigned __int16 *)((char *)a1 - *a1);
                if (*v59 >= 0x15u && (uint64_t v60 = v59[10]) != 0) {
                  uint64_t v61 = (unsigned int *)((char *)a1 + v60 + *(unsigned int *)((char *)a1 + v60));
                }
                else {
                  uint64_t v61 = 0;
                }
                BOOL result = sub_2A7D68(a2, v61);
                if (result)
                {
                  BOOL result = sub_2A7CE0(a1, a2, 0x16u);
                  if (result)
                  {
                    uint64_t v62 = (unsigned __int16 *)((char *)a1 - *a1);
                    if (*v62 >= 0x17u && (uint64_t v63 = v62[11]) != 0) {
                      uint64_t v64 = (unsigned int *)((char *)a1 + v63 + *(unsigned int *)((char *)a1 + v63));
                    }
                    else {
                      uint64_t v64 = 0;
                    }
                    BOOL result = sub_2A7D68(a2, v64);
                    if (result)
                    {
                      uint64_t v65 = (unsigned __int16 *)((char *)a1 - *a1);
                      if (*v65 < 0x19u
                        || (uint64_t v66 = v65[12]) == 0
                        || (BOOL result = 0, v67 = *(void *)(a2 + 8), v67 >= 2)
                        && v67 - 1 >= (unint64_t)a1 + v66 - *(void *)a2)
                      {
                        --*(_DWORD *)(a2 + 40);
                        return 1;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return result;
  }
  BOOL result = 0;
  unint64_t v36 = &v3[v35];
  BOOL v38 = ((unint64_t)&v3[v35] & 3) == 0 || v4 == 0;
  if (v8 >= (unint64_t)v36 && v38)
  {
    uint64_t v39 = *(unsigned int *)&v36[v2];
    if ((int)v39 < 1 || v7 - 1 < (unint64_t)&v36[v39]) {
      return 0;
    }
    BOOL result = 0;
    uint64_t v40 = (unsigned int *)((char *)a1 + v35 + *(unsigned int *)((char *)a1 + v35));
    unint64_t v41 = (char *)v40 - v2;
    BOOL v42 = (((unint64_t)v40 - v2) & 3) == 0 || v4 == 0;
    BOOL v43 = v42;
    if (v8 >= (unint64_t)v41 && v43)
    {
      unsigned int v44 = *v40;
      if (v44 > 0xAAAAAA9) {
        return 0;
      }
      unint64_t v45 = 12 * v44 + 4;
      BOOL v9 = v7 >= v45;
      unint64_t v46 = v7 - v45;
      if (v46 == 0 || !v9 || v46 < (unint64_t)v41) {
        return 0;
      }
      goto LABEL_80;
    }
  }
  return result;
}

BOOL sub_2CC470(uint64_t a1, unsigned int *a2)
{
  if (!a2) {
    return 1;
  }
  unint64_t v2 = (unint64_t)a2 - *(void *)a1;
  if ((v2 & 3) != 0 && *(unsigned char *)(a1 + 24)) {
    return 0;
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 < 5 || v3 - 4 < v2) {
    return 0;
  }
  uint64_t v5 = *a2;
  if (v5 > 0x7FFFFFE) {
    return 0;
  }
  unint64_t v6 = (16 * v5) | 4;
  BOOL v7 = v3 > v6;
  unint64_t v8 = v3 - v6;
  return v7 && v8 >= v2;
}

uint64_t sub_2CC4D8(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v15 = 0;
    if (v4 || v6 - 2 < v14) {
      return v15;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v14);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v16;
  unint64_t v17 = v6 - v16;
  if (v17 == 0 || !v8 || v17 < v14) {
    return 0;
  }
  unsigned int v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 < 5u) {
    goto LABEL_55;
  }
  uint64_t v20 = v19[2];
  if (!v19[2]) {
    goto LABEL_55;
  }
  uint64_t v15 = 0;
  unint64_t v21 = (unint64_t)&v3[v20];
  BOOL v23 = (v21 & 3) == 0 || v4 == 0;
  if (v7 >= v21 && v23)
  {
    uint64_t v24 = *(unsigned int *)(v2 + v21);
    if ((int)v24 < 1 || v6 - 1 < v21 + v24) {
      return 0;
    }
    uint64_t v15 = 0;
    BOOL v25 = (unsigned int *)((char *)a1 + v20 + *(unsigned int *)((char *)a1 + v20));
    uint64_t v26 = (char *)v25 - v2;
    BOOL v27 = (v26 & 3) == 0 || v4 == 0;
    BOOL v28 = v27;
    if (v7 >= (unint64_t)v26 && v28)
    {
      uint64_t v29 = *v25;
      if (v29 > 0x7FFFFFE) {
        return 0;
      }
      unint64_t v30 = (16 * v29) | 4;
      BOOL v8 = v6 >= v30;
      unint64_t v31 = v6 - v30;
      if (v31 == 0 || !v8 || v31 < (unint64_t)v26) {
        return 0;
      }
LABEL_55:
      *((_DWORD *)a2 + 10) = v10;
      return 1;
    }
  }
  return v15;
}

uint64_t sub_2CC640(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v15 = 0;
    if (v4 || v6 - 2 < v14) {
      return v15;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v14);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v16;
  unint64_t v17 = v6 - v16;
  if (v17 == 0 || !v8 || v17 < v14) {
    return 0;
  }
  unsigned int v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 < 5u) {
    goto LABEL_55;
  }
  uint64_t v20 = v19[2];
  if (!v19[2]) {
    goto LABEL_55;
  }
  uint64_t v15 = 0;
  unint64_t v21 = (unint64_t)&v3[v20];
  BOOL v23 = (v21 & 3) == 0 || v4 == 0;
  if (v7 >= v21 && v23)
  {
    uint64_t v24 = *(unsigned int *)(v2 + v21);
    if ((int)v24 < 1 || v6 - 1 < v21 + v24) {
      return 0;
    }
    uint64_t v15 = 0;
    BOOL v25 = (int *)((char *)a1 + v20 + *(unsigned int *)((char *)a1 + v20));
    uint64_t v26 = (char *)v25 - v2;
    BOOL v27 = (v26 & 3) == 0 || v4 == 0;
    BOOL v28 = v27;
    if (v7 >= (unint64_t)v26 && v28)
    {
      if (*v25 > 0xAAAAAA9u) {
        return 0;
      }
      unint64_t v29 = 12 * *v25 + 4;
      BOOL v8 = v6 >= v29;
      unint64_t v30 = v6 - v29;
      if (v30 == 0 || !v8 || v30 < (unint64_t)v26) {
        return 0;
      }
LABEL_55:
      *((_DWORD *)a2 + 10) = v10;
      return 1;
    }
  }
  return v15;
}

uint64_t sub_2CC7B0(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_90;
  }
  uint64_t v22 = v20[2];
  if (v20[2])
  {
    uint64_t result = 0;
    BOOL v23 = &v3[v22];
    BOOL v24 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    BOOL v25 = v24;
    if (v8 < (unint64_t)v23 || !v25) {
      return result;
    }
  }
  if (v21 < 7) {
    goto LABEL_90;
  }
  uint64_t v26 = v20[3];
  if (v20[3])
  {
    uint64_t result = 0;
    BOOL v27 = &v3[v26];
    BOOL v29 = ((unint64_t)&v3[v26] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v27 || !v29) {
      return result;
    }
    uint64_t v30 = *(unsigned int *)&v27[v2];
    if ((int)v30 < 1 || v7 - 1 < (unint64_t)&v27[v30]) {
      return 0;
    }
    uint64_t result = 0;
    unint64_t v31 = (unsigned int *)((char *)a1 + v26 + *(unsigned int *)((char *)a1 + v26));
    unint64_t v32 = (char *)v31 - v2;
    BOOL v33 = (((unint64_t)v31 - v2) & 3) == 0 || v4 == 0;
    BOOL v34 = v33;
    if (v8 < (unint64_t)v32 || !v34) {
      return result;
    }
    unsigned int v35 = *v31;
    if (v35 > 0xAAAAAA9) {
      return 0;
    }
    unint64_t v36 = 12 * v35 + 4;
    BOOL v9 = v7 >= v36;
    unint64_t v37 = v7 - v36;
    if (v37 == 0 || !v9 || v37 < (unint64_t)v32) {
      return 0;
    }
  }
  if (v21 < 9 || (uint64_t v39 = v20[4]) == 0)
  {
LABEL_90:
    uint64_t result = sub_2A7CE0(a1, a2, 0xAu);
    if (result)
    {
      BOOL v51 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v51 >= 0xBu && (uint64_t v52 = v51[5]) != 0) {
        unint64_t v53 = (int *)((char *)a1 + v52 + *(unsigned int *)((char *)a1 + v52));
      }
      else {
        unint64_t v53 = 0;
      }
      uint64_t result = sub_2A7DD0(a2, v53);
      if (result)
      {
        uint64_t result = sub_2A7CE0(a1, a2, 0xCu);
        if (result)
        {
          uint64_t v54 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v54 < 0xDu
            || (uint64_t v55 = v54[6]) == 0
            || (uint64_t result = sub_2CCAC8((int *)((char *)a1 + v55 + *(unsigned int *)((char *)a1 + v55)), (uint64_t *)a2),
                result))
          {
            --*(_DWORD *)(a2 + 40);
            return 1;
          }
        }
      }
    }
    return result;
  }
  uint64_t result = 0;
  unint64_t v40 = (unint64_t)&v3[v39];
  BOOL v42 = (v40 & 3) == 0 || v4 == 0;
  if (v8 >= v40 && v42)
  {
    uint64_t v43 = *(unsigned int *)(v2 + v40);
    if ((int)v43 < 1 || v7 - 1 < v40 + v43) {
      return 0;
    }
    uint64_t result = 0;
    unsigned int v44 = (int *)((char *)a1 + v39 + *(unsigned int *)((char *)a1 + v39));
    unint64_t v45 = (char *)v44 - v2;
    BOOL v46 = (v45 & 3) == 0 || v4 == 0;
    BOOL v47 = v46;
    if (v8 >= (unint64_t)v45 && v47)
    {
      if (*v44 > 0x6666665u) {
        return 0;
      }
      unint64_t v48 = 20 * *v44 + 4;
      BOOL v15 = v7 > v48;
      unint64_t v49 = v7 - v48;
      if (!v15 || v49 < (unint64_t)v45) {
        return 0;
      }
      goto LABEL_90;
    }
  }
  return result;
}

uint64_t sub_2CCAC8(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v15 = 0;
    if (v4 || v6 - 2 < v14) {
      return v15;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v14);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v16;
  unint64_t v17 = v6 - v16;
  if (v17 == 0 || !v8 || v17 < v14) {
    return 0;
  }
  unsigned int v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_75;
  }
  uint64_t v21 = v19[2];
  if (!v19[2])
  {
LABEL_55:
    if (v20 >= 7)
    {
      uint64_t v33 = v19[3];
      if (v19[3])
      {
        uint64_t v15 = 0;
        unint64_t v34 = (unint64_t)&v3[v33];
        BOOL v35 = ((unint64_t)&v3[v33] & 1) == 0 || v4 == 0;
        BOOL v36 = v35;
        if (v6 - 2 < v34 || !v36) {
          return v15;
        }
      }
      if (v20 >= 9 && v19[4])
      {
        uint64_t v15 = 0;
        unint64_t v37 = (unint64_t)&v3[v19[4]];
        BOOL v38 = (v37 & 1) == 0 || v4 == 0;
        BOOL v39 = v38;
        if (v6 - 2 < v37 || !v39) {
          return v15;
        }
      }
    }
LABEL_75:
    *((_DWORD *)a2 + 10) = v10;
    return 1;
  }
  uint64_t v15 = 0;
  uint64_t v22 = &v3[v21];
  BOOL v24 = ((unint64_t)&v3[v21] & 3) == 0 || v4 == 0;
  if (v7 >= (unint64_t)v22 && v24)
  {
    uint64_t v25 = *(unsigned int *)&v22[v2];
    if ((int)v25 < 1 || v6 - 1 < (unint64_t)&v22[v25]) {
      return 0;
    }
    uint64_t v15 = 0;
    uint64_t v26 = (int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21));
    BOOL v27 = (char *)v26 - v2;
    BOOL v28 = (v27 & 3) == 0 || v4 == 0;
    BOOL v29 = v28;
    if (v7 >= (unint64_t)v27 && v29)
    {
      if (*v26 > 0xAAAAAA9u) {
        return 0;
      }
      unint64_t v30 = 12 * *v26 + 4;
      BOOL v8 = v6 >= v30;
      unint64_t v31 = v6 - v30;
      if (v31 == 0 || !v8 || v31 < (unint64_t)v27) {
        return 0;
      }
      goto LABEL_55;
    }
  }
  return v15;
}

uint64_t sub_2CCCA0(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v10 = *a1;
  int v11 = *((_DWORD *)a2 + 10);
  unsigned int v12 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v11 + 1;
  *((_DWORD *)a2 + 11) = v12;
  if ((v11 + 1) > *((_DWORD *)a2 + 4) || v12 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v10];
  if (v14)
  {
    uint64_t result = 0;
    if (v4 || v6 - 2 < v14) {
      return result;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v14);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v16;
  unint64_t v17 = v6 - v16;
  if (v17 == 0 || !v8 || v17 < v14) {
    return 0;
  }
  unsigned int v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_56;
  }
  if (v19[2])
  {
    unint64_t v21 = (unint64_t)&v3[v19[2]];
    if ((v21 & 3) != 0 && v4) {
      return 0;
    }
    uint64_t result = 0;
    if (v6 < 9 || v6 - 8 < v21) {
      return result;
    }
  }
  if (v20 < 7) {
    goto LABEL_56;
  }
  uint64_t v22 = v19[3];
  if (v19[3])
  {
    uint64_t result = 0;
    BOOL v23 = &v3[v22];
    BOOL v24 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    BOOL v25 = v24;
    if (v7 < (unint64_t)v23 || !v25) {
      return result;
    }
  }
  if (v20 < 9)
  {
LABEL_56:
    *((_DWORD *)a2 + 10) = v11;
    return 1;
  }
  if (!v19[4]
    || ((result = 0, v26 = (unint64_t)&v3[v19[4]], (v26 & 3) != 0) ? (BOOL v27 = v4 == 0) : (BOOL v27 = 1),
        !v27 ? (int v28 = 0) : (int v28 = 1),
        v7 >= v26 && v28))
  {
    if (v20 >= 0xB)
    {
      uint64_t v29 = v19[5];
      if (v29)
      {
        if (v6 - 1 < (unint64_t)&v3[v29]) {
          return 0;
        }
      }
    }
    goto LABEL_56;
  }
  return result;
}

uint64_t sub_2CCE24(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  unsigned int v12 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  BOOL v14 = v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20);
  if (v14) {
    return 0;
  }
  unint64_t v15 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v15) {
      return 0;
    }
  }
  else if (v7 - 2 < v15)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v16;
  unint64_t v17 = v7 - v16;
  if (v17 == 0 || !v9 || v17 < v15) {
    return 0;
  }
  uint64_t v19 = *a1;
  uint64_t v20 = -v19;
  unint64_t v21 = (unsigned __int16 *)((char *)a1 - v19);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
        return 0;
      }
      BOOL v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      int v28 = (char *)v27 - v2;
      BOOL v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30) {
        return 0;
      }
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v32 = 4 * v31 + 4;
      BOOL v14 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (!v14 || v33 < (unint64_t)v28) {
        return 0;
      }
      if (v31)
      {
        uint64_t v54 = a1;
        unint64_t v35 = 0;
        BOOL v36 = v27 + 1;
        while ((sub_2B5704((int *)((char *)v36 + *v36), (uint64_t *)a2) & 1) != 0)
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            a1 = v54;
            uint64_t v20 = -(uint64_t)*v54;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  unint64_t v37 = (char *)a1 + v20;
  if (*(unsigned __int16 *)((char *)a1 + v20) >= 7u && (uint64_t v38 = *((unsigned __int16 *)v37 + 3), *((_WORD *)v37 + 3)))
  {
    uint64_t v39 = *(void *)a2;
    unint64_t v40 = (unint64_t)a1 + v38 - *(void *)a2;
    int v41 = *(unsigned __int8 *)(a2 + 24);
    if ((v40 & 3) != 0 && v41 != 0) {
      return 0;
    }
    unint64_t v43 = *(void *)(a2 + 8);
    if (v43 < 5 || v43 - 4 < v40) {
      return 0;
    }
    uint64_t v44 = *(unsigned int *)(v39 + v40);
    if ((int)v44 < 1 || v43 - 1 < v40 + v44) {
      return 0;
    }
    unint64_t v45 = (int *)((char *)a1 + v38 + *(unsigned int *)((char *)a1 + v38));
    unint64_t v46 = (unint64_t)v45 - v39;
    BOOL v47 = (((unint64_t)v45 - v39) & 3) == 0 || v41 == 0;
    BOOL v48 = v47;
    if (v43 - 4 < v46 || !v48) {
      return 0;
    }
    uint64_t v50 = *v45;
    if (v50 > 0x1FFFFFFE) {
      return 0;
    }
    unint64_t v51 = 4 * v50 + 4;
    BOOL v14 = v43 > v51;
    unint64_t v52 = v43 - v51;
    if (!v14 || v52 < v46) {
      return 0;
    }
  }
  else
  {
    unint64_t v45 = 0;
  }
  if (!sub_2CB8F0((uint64_t *)a2, v45)) {
    return 0;
  }
  --*(_DWORD *)(a2 + 40);
  return 1;
}

uint64_t sub_2CD108(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 40);
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  BOOL v16 = v12 + 1 > v15 || v13 > v14;
  if (v16) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  unint64_t v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
        return 0;
      }
      BOOL v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      int v28 = (char *)v27 - v2;
      BOOL v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30) {
        return 0;
      }
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v32 = 4 * v31 + 4;
      BOOL v16 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (!v16 || v33 < (unint64_t)v28) {
        return 0;
      }
      if (v31)
      {
        unint64_t v35 = 0;
        BOOL v36 = v27 + 1;
        while ((sub_2CC640((int *)((char *)v36 + *v36), (uint64_t *)a2) & 1) != 0)
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            int v12 = *(_DWORD *)(a2 + 40) - 1;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

uint64_t sub_2CD2F8(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  uint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 >= 5u)
  {
    uint64_t v23 = v22[2];
    if (v23)
    {
      uint64_t result = 0;
      unint64_t v24 = (unint64_t)&v3[v23];
      BOOL v26 = (v24 & 3) == 0 || v4 == 0;
      if (v8 < v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
        return 0;
      }
      uint64_t result = sub_2CD724((int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23)), (uint64_t *)a2);
      if (!result) {
        return result;
      }
      uint64_t v21 = -(uint64_t)*a1;
    }
  }
  int v28 = (char *)a1 + v21;
  if (*(unsigned __int16 *)((char *)a1 + v21) < 7u || (uint64_t v29 = *((unsigned __int16 *)v28 + 3), !*((_WORD *)v28 + 3)))
  {
LABEL_68:
    uint64_t result = sub_2A7CE0(a1, a2, 8u);
    if (result)
    {
      uint64_t v44 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v44 >= 9u && (uint64_t v45 = v44[4]) != 0) {
        unint64_t v46 = (unsigned int *)((char *)a1 + v45 + *(unsigned int *)((char *)a1 + v45));
      }
      else {
        unint64_t v46 = 0;
      }
      uint64_t result = sub_2A7D68(a2, v46);
      if (result)
      {
        BOOL v47 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v47 >= 9u && (uint64_t v48 = v47[4]) != 0) {
          unint64_t v49 = (int *)((char *)a1 + v48 + *(unsigned int *)((char *)a1 + v48));
        }
        else {
          unint64_t v49 = 0;
        }
        uint64_t result = sub_2CD698(a2, v49);
        if (result)
        {
          uint64_t result = sub_2A7CE0(a1, a2, 0xAu);
          if (result)
          {
            uint64_t v50 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v50 >= 0xBu && (uint64_t v51 = v50[5]) != 0) {
              unint64_t v52 = (unsigned int *)((char *)a1 + v51 + *(unsigned int *)((char *)a1 + v51));
            }
            else {
              unint64_t v52 = 0;
            }
            uint64_t result = sub_2A7D68(a2, v52);
            if (result)
            {
              unint64_t v53 = (unsigned __int16 *)((char *)a1 - *a1);
              if (*v53 >= 0xBu && (uint64_t v54 = v53[5]) != 0) {
                uint64_t v55 = (int *)((char *)a1 + v54 + *(unsigned int *)((char *)a1 + v54));
              }
              else {
                uint64_t v55 = 0;
              }
              uint64_t result = sub_2A7E40((uint64_t *)a2, v55);
              if (result)
              {
                --*(_DWORD *)(a2 + 40);
                return 1;
              }
            }
          }
        }
      }
    }
    return result;
  }
  uint64_t v30 = *(void *)a2;
  unint64_t v31 = (unint64_t)a1 + v29 - *(void *)a2;
  if ((v31 & 3) != 0 && *(unsigned char *)(a2 + 24)) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v32 = *(void *)(a2 + 8);
  if (v32 >= 5 && v32 - 4 >= v31)
  {
    uint64_t v33 = *(unsigned int *)(v30 + v31);
    if ((int)v33 < 1 || v32 - 1 < v31 + v33) {
      return 0;
    }
    uint64_t result = 0;
    unint64_t v34 = (unsigned int *)((char *)a1 + v29 + *(unsigned int *)((char *)a1 + v29));
    unint64_t v35 = (unint64_t)v34 - v30;
    BOOL v36 = (((unint64_t)v34 - v30) & 3) == 0 || *(unsigned char *)(a2 + 24) == 0;
    BOOL v37 = v36;
    if (v32 - 4 >= v35 && v37)
    {
      uint64_t v38 = *v34;
      if (v38 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v39 = 4 * v38 + 4;
      BOOL v15 = v32 > v39;
      unint64_t v40 = v32 - v39;
      if (!v15 || v40 < v35) {
        return 0;
      }
      if (v38)
      {
        unint64_t v42 = 0;
        unint64_t v43 = v34 + 1;
        while ((sub_2CD948((int *)((char *)v43 + *v43), a2) & 1) != 0)
        {
          ++v42;
          ++v43;
          if (v42 >= *v34) {
            goto LABEL_68;
          }
        }
        return 0;
      }
      goto LABEL_68;
    }
  }
  return result;
}

uint64_t sub_2CD698(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = sub_2CDF08((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t sub_2CD724(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_78;
  }
  uint64_t v21 = v19[2];
  if (v19[2])
  {
    uint64_t v14 = 0;
    uint64_t v22 = &v3[v21];
    BOOL v23 = ((unint64_t)&v3[v21] & 3) == 0 || v4 == 0;
    BOOL v24 = v23;
    if (v7 < (unint64_t)v22 || !v24) {
      return v14;
    }
  }
  if (v20 < 7) {
    goto LABEL_78;
  }
  uint64_t v25 = v19[3];
  if (v19[3])
  {
    uint64_t v14 = 0;
    BOOL v26 = &v3[v25];
    BOOL v27 = ((unint64_t)&v3[v25] & 3) == 0 || v4 == 0;
    BOOL v28 = v27;
    if (v7 < (unint64_t)v26 || !v28) {
      return v14;
    }
  }
  if (v20 < 9) {
    goto LABEL_78;
  }
  if (v19[4] && v6 - 1 < (unint64_t)&v3[v19[4]]) {
    return 0;
  }
  if (v20 < 0xB) {
    goto LABEL_78;
  }
  uint64_t v29 = v19[5];
  if (!v19[5])
  {
LABEL_75:
    if (v20 >= 0xD && v19[6] && v6 - 1 < (unint64_t)&v3[v19[6]]) {
      return 0;
    }
LABEL_78:
    *((_DWORD *)a2 + 10) = v10;
    return 1;
  }
  uint64_t v14 = 0;
  uint64_t v30 = &v3[v29];
  BOOL v32 = ((unint64_t)&v3[v29] & 3) == 0 || v4 == 0;
  if (v7 >= (unint64_t)v30 && v32)
  {
    uint64_t v33 = *(unsigned int *)&v30[v2];
    if ((int)v33 < 1 || v6 - 1 < (unint64_t)&v30[v33]) {
      return 0;
    }
    uint64_t v14 = 0;
    unint64_t v34 = (unsigned int *)((char *)a1 + v29 + *(unsigned int *)((char *)a1 + v29));
    unint64_t v35 = (char *)v34 - v2;
    BOOL v36 = (((unint64_t)v34 - v2) & 3) == 0 || v4 == 0;
    BOOL v37 = v36;
    if (v7 >= (unint64_t)v35 && v37)
    {
      uint64_t v38 = *v34;
      if (v38 > 0x7FFFFFFE) {
        return 0;
      }
      uint64_t v14 = 0;
      unint64_t v39 = v38 + 4;
      unint64_t v40 = (unint64_t)&v35[v38 + 4];
      if (v6 - 1 < v40 || v6 <= v39 || v6 - v39 < (unint64_t)v35) {
        return v14;
      }
      if (*(unsigned char *)(v2 + v40)) {
        return 0;
      }
      goto LABEL_75;
    }
  }
  return v14;
}

uint64_t sub_2CD948(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  uint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 >= 5u)
  {
    uint64_t v23 = v22[2];
    if (v23)
    {
      uint64_t result = 0;
      unint64_t v24 = (unint64_t)&v3[v23];
      BOOL v26 = (v24 & 3) == 0 || v4 == 0;
      if (v8 < v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)(v2 + v24);
      if ((int)v27 < 1 || v7 - 1 < v24 + v27) {
        return 0;
      }
      uint64_t result = 0;
      BOOL v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
      uint64_t v29 = (char *)v28 - v2;
      BOOL v30 = (v29 & 3) == 0 || v4 == 0;
      BOOL v31 = v30;
      if (v8 < (unint64_t)v29 || !v31) {
        return result;
      }
      uint64_t v32 = *v28;
      if (v32 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v33 = 4 * v32 + 4;
      BOOL v15 = v7 > v33;
      unint64_t v34 = v7 - v33;
      if (!v15 || v34 < (unint64_t)v29) {
        return 0;
      }
      if (v32)
      {
        unint64_t v36 = 0;
        BOOL v37 = v28 + 1;
        while ((sub_2CCCA0((int *)((char *)v37 + *v37), (uint64_t *)a2) & 1) != 0)
        {
          ++v36;
          ++v37;
          if (v36 >= *v28)
          {
            uint64_t v21 = -(uint64_t)*a1;
            goto LABEL_61;
          }
        }
        return 0;
      }
    }
  }
LABEL_61:
  uint64_t v38 = (char *)a1 + v21;
  if (*(unsigned __int16 *)((char *)a1 + v21) < 7u || (uint64_t v39 = *((unsigned __int16 *)v38 + 3), !*((_WORD *)v38 + 3)))
  {
LABEL_88:
    uint64_t result = sub_2A7CE0(a1, a2, 8u);
    if (result)
    {
      uint64_t v55 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v55 < 9u
        || (uint64_t v56 = v55[4]) == 0
        || (uint64_t result = sub_2CDC4C((int *)((char *)a1 + v56 + *(unsigned int *)((char *)a1 + v56)), a2), result))
      {
        --*(_DWORD *)(a2 + 40);
        return 1;
      }
    }
    return result;
  }
  uint64_t v40 = *(void *)a2;
  unint64_t v41 = (unint64_t)a1 + v39 - *(void *)a2;
  int v42 = *(unsigned __int8 *)(a2 + 24);
  uint64_t result = 0;
  if ((v41 & 3) == 0 || v42 == 0)
  {
    unint64_t v44 = *(void *)(a2 + 8);
    if (v44 >= 5 && v44 - 4 >= v41)
    {
      uint64_t v45 = *(unsigned int *)(v40 + v41);
      if ((int)v45 < 1 || v44 - 1 < v41 + v45) {
        return 0;
      }
      unint64_t v46 = (unsigned int *)((char *)a1 + v39 + *(unsigned int *)((char *)a1 + v39));
      unint64_t v47 = (unint64_t)v46 - v40;
      BOOL v48 = (((unint64_t)v46 - v40) & 3) == 0 || v42 == 0;
      BOOL v49 = v48;
      if (v44 - 4 < v47 || !v49) {
        return 0;
      }
      uint64_t v51 = *v46;
      if (v51 > 0x7FFFFFFE) {
        return 0;
      }
      unint64_t v52 = v51 + 4;
      BOOL v15 = v44 > v52;
      unint64_t v53 = v44 - v52;
      if (!v15 || v53 < v47) {
        return 0;
      }
      goto LABEL_88;
    }
  }
  return result;
}

uint64_t sub_2CDC4C(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  unsigned int v12 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  if (v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v15 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v15) {
      return 0;
    }
  }
  else if (v7 - 2 < v15)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v16;
  unint64_t v17 = v7 - v16;
  if (v17 == 0 || !v9 || v17 < v15) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 >= 5)
  {
    uint64_t v21 = v19[2];
    if (v19[2])
    {
      uint64_t v22 = &v3[v21];
      BOOL v24 = ((unint64_t)&v3[v21] & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v22 || !v24) {
        return 0;
      }
      uint64_t v25 = *(unsigned int *)&v22[v2];
      if ((int)v25 < 1 || v7 - 1 < (unint64_t)&v22[v25]) {
        return 0;
      }
      BOOL v26 = (unsigned int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21));
      uint64_t v27 = (char *)v26 - v2;
      BOOL v29 = (((unint64_t)v26 - v2) & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v27 || !v29) {
        return 0;
      }
      uint64_t v30 = *v26;
      if (v30 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v31 = 4 * v30 + 4;
      BOOL v9 = v7 >= v31;
      unint64_t v32 = v7 - v31;
      if (v32 == 0 || !v9 || v32 < (unint64_t)v27) {
        return 0;
      }
    }
    if (v20 >= 7)
    {
      uint64_t v34 = v19[3];
      if (v19[3])
      {
        unint64_t v35 = &v3[v34];
        BOOL v37 = ((unint64_t)&v3[v34] & 3) == 0 || v4 == 0;
        if (v8 < (unint64_t)v35 || !v37) {
          return 0;
        }
        uint64_t v38 = *(unsigned int *)&v35[v2];
        if ((int)v38 < 1 || v7 - 1 < (unint64_t)&v35[v38]) {
          return 0;
        }
        uint64_t v39 = (int *)((char *)a1 + v34 + *(unsigned int *)((char *)a1 + v34));
        uint64_t v40 = (char *)v39 - v2;
        BOOL v42 = (((unint64_t)v39 - v2) & 3) == 0 || v4 == 0;
        if (v8 < (unint64_t)v40 || !v42) {
          return 0;
        }
        if (*v39 > 0xAAAAAA9u) {
          return 0;
        }
        unint64_t v43 = 12 * *v39 + 4;
        BOOL v9 = v7 >= v43;
        unint64_t v44 = v7 - v43;
        if (v44 == 0 || !v9 || v44 < (unint64_t)v40) {
          return 0;
        }
      }
      if (v20 >= 9)
      {
        uint64_t v46 = v19[4];
        if (v46)
        {
          unint64_t v47 = (unint64_t)&v3[v46];
          BOOL v49 = (v47 & 3) == 0 || v4 == 0;
          if (v8 < v47 || !v49) {
            return 0;
          }
          uint64_t v50 = *(unsigned int *)(v2 + v47);
          if ((int)v50 >= 1 && v7 - 1 >= v47 + v50)
          {
            uint64_t v51 = (int *)((char *)a1 + v46 + *(unsigned int *)((char *)a1 + v46));
            goto LABEL_95;
          }
          return 0;
        }
      }
    }
  }
  uint64_t v51 = 0;
LABEL_95:
  if (!sub_2A7DD0(a2, v51)) {
    return 0;
  }
  --*(_DWORD *)(a2 + 40);
  return 1;
}

uint64_t sub_2CDF08(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  unsigned int v12 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  BOOL v14 = v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20);
  if (v14) {
    return 0;
  }
  unint64_t v15 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v15) {
      return 0;
    }
  }
  else if (v7 - 2 < v15)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v16;
  unint64_t v17 = v7 - v16;
  if (v17 == 0 || !v9 || v17 < v15) {
    return 0;
  }
  uint64_t v19 = *a1;
  uint64_t v20 = -v19;
  uint64_t v21 = (unsigned __int16 *)((char *)a1 - v19);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
        return 0;
      }
      uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      BOOL v28 = (char *)v27 - v2;
      BOOL v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30) {
        return 0;
      }
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v32 = 4 * v31 + 4;
      BOOL v14 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (!v14 || v33 < (unint64_t)v28) {
        return 0;
      }
      if (v31)
      {
        uint64_t v54 = a1;
        unint64_t v35 = 0;
        unint64_t v36 = v27 + 1;
        while ((sub_2CC640((int *)((char *)v36 + *v36), (uint64_t *)a2) & 1) != 0)
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            a1 = v54;
            uint64_t v20 = -(uint64_t)*v54;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  BOOL v37 = (char *)a1 + v20;
  if (*(unsigned __int16 *)((char *)a1 + v20) >= 7u && (uint64_t v38 = *((unsigned __int16 *)v37 + 3), *((_WORD *)v37 + 3)))
  {
    uint64_t v39 = *(void *)a2;
    unint64_t v40 = (unint64_t)a1 + v38 - *(void *)a2;
    int v41 = *(unsigned __int8 *)(a2 + 24);
    if ((v40 & 3) != 0 && v41 != 0) {
      return 0;
    }
    unint64_t v43 = *(void *)(a2 + 8);
    if (v43 < 5 || v43 - 4 < v40) {
      return 0;
    }
    uint64_t v44 = *(unsigned int *)(v39 + v40);
    if ((int)v44 < 1 || v43 - 1 < v40 + v44) {
      return 0;
    }
    uint64_t v45 = (int *)((char *)a1 + v38 + *(unsigned int *)((char *)a1 + v38));
    unint64_t v46 = (unint64_t)v45 - v39;
    BOOL v47 = (((unint64_t)v45 - v39) & 3) == 0 || v41 == 0;
    BOOL v48 = v47;
    if (v43 - 4 < v46 || !v48) {
      return 0;
    }
    uint64_t v50 = *v45;
    if (v50 > 0x1FFFFFFE) {
      return 0;
    }
    unint64_t v51 = 4 * v50 + 4;
    BOOL v14 = v43 > v51;
    unint64_t v52 = v43 - v51;
    if (!v14 || v52 < v46) {
      return 0;
    }
  }
  else
  {
    uint64_t v45 = 0;
  }
  if (!sub_2CB74C((uint64_t *)a2, v45)) {
    return 0;
  }
  --*(_DWORD *)(a2 + 40);
  return 1;
}

uint64_t sub_2CE1EC(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v13 = *(_DWORD *)(a2 + 40);
  int v12 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 40) = v13 + 1;
  *(_DWORD *)(a2 + 44) = v12 + 1;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  BOOL v16 = v13 + 1 > v15 || v12 + 1 > v14;
  if (v16) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  uint64_t v21 = *a1;
  uint64_t v22 = -v21;
  unint64_t v23 = (unsigned __int16 *)((char *)a1 - v21);
  if (*v23 >= 5u)
  {
    uint64_t v24 = v23[2];
    if (v24)
    {
      BOOL v25 = &v3[v24];
      BOOL v27 = ((unint64_t)&v3[v24] & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v25 || !v27) {
        return 0;
      }
      uint64_t v28 = *(unsigned int *)&v25[v2];
      if ((int)v28 < 1 || v7 - 1 < (unint64_t)&v25[v28]) {
        return 0;
      }
      BOOL v29 = (int *)((char *)a1 + v24 + *(unsigned int *)((char *)a1 + v24));
      BOOL v30 = (char *)v29 - v2;
      BOOL v32 = (((unint64_t)v29 - v2) & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v30) {
        return 0;
      }
      if (!v32) {
        return 0;
      }
      uint64_t v33 = *v29;
      unsigned int v34 = v12 + 2;
      *(_DWORD *)(a2 + 40) = v13 + 2;
      *(_DWORD *)(a2 + 44) = v34;
      if (v13 + 2 > v15 || v34 > v14) {
        return 0;
      }
      unint64_t v35 = (unint64_t)&v30[-v33];
      if ((v30 - v33))
      {
        if (v4 || v7 - 2 < v35) {
          return 0;
        }
      }
      else if (v7 - 2 < v35)
      {
        return 0;
      }
      unint64_t v36 = *(unsigned __int16 *)(v2 + v35);
      if ((v36 & 1) != 0 && v4 | v36 & 1) {
        return 0;
      }
      BOOL v9 = v7 >= v36;
      unint64_t v37 = v7 - v36;
      if (v37 == 0 || !v9 || v37 < v35) {
        return 0;
      }
      *(_DWORD *)(a2 + 40) = v13 + 1;
      uint64_t v22 = -(uint64_t)*a1;
    }
  }
  uint64_t v39 = (unsigned __int16 *)((char *)a1 + v22);
  if (*v39 < 7u) {
    goto LABEL_95;
  }
  uint64_t v40 = v39[3];
  if (!v39[3]) {
    goto LABEL_95;
  }
  unint64_t v41 = (unint64_t)&v3[v40];
  BOOL v43 = (v41 & 3) == 0 || v4 == 0;
  if (v8 < v41 || !v43) {
    return 0;
  }
  uint64_t v44 = *(unsigned int *)(v2 + v41);
  if ((int)v44 < 1 || v7 - 1 < v41 + v44) {
    return 0;
  }
  uint64_t v45 = (unsigned int *)((char *)a1 + v40 + *(unsigned int *)((char *)a1 + v40));
  unint64_t v46 = (char *)v45 - v2;
  BOOL v48 = (v46 & 3) == 0 || v4 == 0;
  if (v8 < (unint64_t)v46 || !v48) {
    return 0;
  }
  uint64_t v49 = *v45;
  if (v49 > 0x1FFFFFFE) {
    return 0;
  }
  unint64_t v50 = 4 * v49 + 4;
  BOOL v16 = v7 > v50;
  unint64_t v51 = v7 - v50;
  if (!v16 || v51 < (unint64_t)v46) {
    return 0;
  }
  if (v49)
  {
    unint64_t v53 = 0;
    uint64_t v54 = v45 + 1;
    while ((sub_2CE4E4((int *)((char *)v54 + *v54), a2) & 1) != 0)
    {
      ++v53;
      ++v54;
      if (v53 >= *v45)
      {
        int v13 = *(_DWORD *)(a2 + 40) - 1;
        goto LABEL_95;
      }
    }
    return 0;
  }
LABEL_95:
  *(_DWORD *)(a2 + 40) = v13;
  return 1;
}

uint64_t sub_2CE4E4(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v10 = *a1;
  int v11 = *(_DWORD *)(a2 + 40);
  unsigned int v12 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v11 + 1;
  *(_DWORD *)(a2 + 44) = v12;
  BOOL v13 = (v11 + 1) > *(_DWORD *)(a2 + 16) || v12 > *(_DWORD *)(a2 + 20);
  if (v13) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v10];
  if ((v3 - v10))
  {
    if (v4 || v6 - 2 < v14) {
      return 0;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v14);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v14) {
    return 0;
  }
  unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v19 = *v18;
  if (v19 < 5) {
    return 0;
  }
  uint64_t v20 = v18[2];
  if (!v18[2]) {
    return 0;
  }
  uint64_t v21 = &v3[v20];
  BOOL v23 = ((unint64_t)&v3[v20] & 3) == 0 || v4 == 0;
  if (v7 < (unint64_t)v21 || !v23) {
    return 0;
  }
  uint64_t v24 = *(unsigned int *)&v21[v2];
  if ((int)v24 < 1) {
    return 0;
  }
  unint64_t v25 = (unint64_t)&v21[v24];
  unint64_t v26 = v6 - 1;
  if (v6 - 1 < v25) {
    return 0;
  }
  BOOL v27 = (unsigned int *)((char *)a1 + v20 + *(unsigned int *)((char *)a1 + v20));
  uint64_t v28 = (char *)v27 - v2;
  BOOL v30 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
  if (v7 < (unint64_t)v28 || !v30) {
    return 0;
  }
  uint64_t v31 = *v27;
  if (v31 > 0x7FFFFFFE) {
    return 0;
  }
  unint64_t v32 = v31 + 4;
  uint64_t v33 = &v28[v31 + 4];
  BOOL v34 = v26 >= (unint64_t)v33 && v6 > v32;
  BOOL v35 = v34 && v6 - v32 >= (unint64_t)v28;
  if (!v35 || v33[v2]) {
    return 0;
  }
  if (v19 < 7) {
    goto LABEL_88;
  }
  uint64_t v36 = v18[3];
  if (!v36) {
    goto LABEL_88;
  }
  unint64_t v37 = (unint64_t)&v3[v36];
  BOOL v39 = (v37 & 3) == 0 || v4 == 0;
  if (v7 < v37) {
    return 0;
  }
  if (!v39) {
    return 0;
  }
  uint64_t v40 = *(unsigned int *)(v2 + v37);
  if ((int)v40 < 1 || v26 < v37 + v40) {
    return 0;
  }
  unint64_t v41 = (unsigned int *)((char *)a1 + v36 + *(unsigned int *)((char *)a1 + v36));
  BOOL v42 = (char *)v41 - v2;
  BOOL v43 = (v42 & 3) == 0 || v4 == 0;
  BOOL v44 = v43;
  if (v7 < (unint64_t)v42 || !v44) {
    return 0;
  }
  uint64_t v45 = *v41;
  if (v45 > 0x1FFFFFFE) {
    return 0;
  }
  unint64_t v46 = 4 * v45 + 4;
  BOOL v13 = v6 > v46;
  unint64_t v47 = v6 - v46;
  if (!v13 || v47 < (unint64_t)v42) {
    return 0;
  }
  if (v45)
  {
    unint64_t v48 = 0;
    uint64_t v49 = v41 + 1;
    while ((sub_2CE7A0((int *)((char *)v49 + *v49), a2) & 1) != 0)
    {
      ++v48;
      ++v49;
      if (v48 >= *v41)
      {
        int v11 = *(_DWORD *)(a2 + 40) - 1;
        goto LABEL_88;
      }
    }
    return 0;
  }
LABEL_88:
  *(_DWORD *)(a2 + 40) = v11;
  return 1;
}

uint64_t sub_2CE7A0(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v10 = *a1;
  int v11 = *(_DWORD *)(a2 + 40);
  unsigned int v12 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v11 + 1;
  *(_DWORD *)(a2 + 44) = v12;
  if ((v11 + 1) > *(_DWORD *)(a2 + 16) || v12 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v10];
  if ((v3 - v10))
  {
    if (v4 || v6 - 2 < v14) {
      return 0;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v14);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v14) {
    return 0;
  }
  unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v19 = *v18;
  if (v19 < 5) {
    return 0;
  }
  uint64_t v20 = v18[2];
  if (!v18[2]) {
    return 0;
  }
  uint64_t v21 = &v3[v20];
  BOOL v23 = ((unint64_t)&v3[v20] & 3) == 0 || v4 == 0;
  if (v7 < (unint64_t)v21 || !v23) {
    return 0;
  }
  uint64_t v24 = *(unsigned int *)&v21[v2];
  if ((int)v24 < 1) {
    return 0;
  }
  unint64_t v25 = (unint64_t)&v21[v24];
  unint64_t v26 = v6 - 1;
  if (v6 - 1 < v25) {
    return 0;
  }
  BOOL v27 = (unsigned int *)((char *)a1 + v20 + *(unsigned int *)((char *)a1 + v20));
  uint64_t v28 = (char *)v27 - v2;
  BOOL v30 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
  if (v7 < (unint64_t)v28 || !v30) {
    return 0;
  }
  uint64_t v31 = *v27;
  if (v31 > 0x7FFFFFFE) {
    return 0;
  }
  unint64_t v32 = v31 + 4;
  uint64_t v33 = &v28[v31 + 4];
  BOOL v34 = v26 >= (unint64_t)v33 && v6 > v32;
  BOOL v35 = v34 && v6 - v32 >= (unint64_t)v28;
  if (!v35 || v33[v2]) {
    return 0;
  }
  if (v19 >= 7)
  {
    uint64_t v36 = v18[3];
    if (v18[3])
    {
      unint64_t v37 = (unint64_t)&v3[v36];
      BOOL v39 = (v37 & 3) == 0 || v4 == 0;
      if (v7 < v37) {
        return 0;
      }
      if (!v39) {
        return 0;
      }
      uint64_t v40 = *(unsigned int *)(v2 + v37);
      if ((int)v40 < 1 || v26 < v37 + v40) {
        return 0;
      }
      if (sub_2CE9C8((int *)((char *)a1 + v36 + *(unsigned int *)((char *)a1 + v36)), a2))
      {
        int v11 = *(_DWORD *)(a2 + 40) - 1;
        goto LABEL_73;
      }
      return 0;
    }
  }
LABEL_73:
  *(_DWORD *)(a2 + 40) = v11;
  return 1;
}

uint64_t sub_2CE9C8(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 40);
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  BOOL v16 = v12 + 1 > v15 || v13 > v14;
  if (v16) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  uint64_t v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
        return 0;
      }
      BOOL v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      uint64_t v28 = (char *)v27 - v2;
      BOOL v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30) {
        return 0;
      }
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v32 = 4 * v31 + 4;
      BOOL v16 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (!v16 || v33 < (unint64_t)v28) {
        return 0;
      }
      if (v31)
      {
        unint64_t v35 = 0;
        uint64_t v36 = v27 + 1;
        while ((sub_2CEBB8((int *)((char *)v36 + *v36), a2) & 1) != 0)
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            int v12 = *(_DWORD *)(a2 + 40) - 1;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

uint64_t sub_2CEBB8(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v10 = *a1;
  unsigned int v11 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v12 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v11;
  *(_DWORD *)(a2 + 44) = v12;
  if (v11 > *(_DWORD *)(a2 + 16) || v12 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v10];
  if ((v3 - v10))
  {
    if (v4 || v6 - 2 < v14) {
      return 0;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v14);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v14) {
    return 0;
  }
  unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v19 = *v18;
  if (v19 < 5) {
    return 0;
  }
  uint64_t v20 = v18[2];
  if (!v18[2]) {
    return 0;
  }
  uint64_t v21 = &v3[v20];
  BOOL v23 = ((unint64_t)&v3[v20] & 3) == 0 || v4 == 0;
  if (v7 < (unint64_t)v21 || !v23) {
    return 0;
  }
  uint64_t v24 = *(unsigned int *)&v21[v2];
  if ((int)v24 < 1) {
    return 0;
  }
  unint64_t v25 = (unint64_t)&v21[v24];
  unint64_t v26 = v6 - 1;
  if (v6 - 1 < v25) {
    return 0;
  }
  BOOL v27 = (unsigned int *)((char *)a1 + v20 + *(unsigned int *)((char *)a1 + v20));
  uint64_t v28 = (char *)v27 - v2;
  BOOL v30 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
  if (v7 < (unint64_t)v28 || !v30) {
    return 0;
  }
  uint64_t v31 = *v27;
  if (v31 > 0x7FFFFFFE) {
    return 0;
  }
  unint64_t v32 = v31 + 4;
  unint64_t v33 = &v28[v31 + 4];
  BOOL v34 = v26 >= (unint64_t)v33 && v6 > v32;
  BOOL v35 = v34 && v6 - v32 >= (unint64_t)v28;
  if (!v35 || v33[v2]) {
    return 0;
  }
  if (v19 < 7) {
    goto LABEL_93;
  }
  uint64_t v36 = v18[3];
  if (!v18[3])
  {
    if (v19 <= 8) {
      goto LABEL_93;
    }
    goto LABEL_64;
  }
  if (v26 < (unint64_t)&v3[v36]) {
    return 0;
  }
  if (v19 < 9)
  {
    unint64_t v37 = 0;
    goto LABEL_78;
  }
LABEL_64:
  uint64_t v38 = v18[4];
  if (v38)
  {
    unint64_t v39 = (unint64_t)&v3[v38];
    BOOL v41 = (v39 & 3) == 0 || v4 == 0;
    if (v7 < v39) {
      return 0;
    }
    if (!v41) {
      return 0;
    }
    uint64_t v42 = *(unsigned int *)(v2 + v39);
    if ((int)v42 < 1 || v26 < v39 + v42) {
      return 0;
    }
    unint64_t v37 = (int *)((char *)a1 + v38 + *(unsigned int *)((char *)a1 + v38));
  }
  else
  {
    unint64_t v37 = 0;
  }
  if (v36)
  {
LABEL_78:
    switch(*((unsigned char *)a1 + v36))
    {
      case 1:
        if (!v37 || (sub_2B8528(v37, (uint64_t *)a2) & 1) != 0) {
          break;
        }
        return 0;
      case 2:
        if (!v37 || (sub_2C3364(v37, (uint64_t *)a2) & 1) != 0) {
          break;
        }
        return 0;
      case 3:
        if (!v37 || (sub_2CE9C8(v37, a2) & 1) != 0) {
          break;
        }
        return 0;
      case 4:
        if (!v37 || (sub_2CEEC0(v37, a2) & 1) != 0) {
          break;
        }
        return 0;
      case 5:
        if (!v37 || sub_2CF30C(v37, (uint64_t *)a2)) {
          break;
        }
        return 0;
      default:
        break;
    }
  }
LABEL_93:
  --*(_DWORD *)(a2 + 40);
  return 1;
}

uint64_t sub_2CEEC0(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 40);
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  BOOL v16 = v12 + 1 > v15 || v13 > v14;
  if (v16) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  uint64_t v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
        return 0;
      }
      BOOL v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      uint64_t v28 = (char *)v27 - v2;
      BOOL v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30) {
        return 0;
      }
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v32 = 4 * v31 + 4;
      BOOL v16 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (!v16 || v33 < (unint64_t)v28) {
        return 0;
      }
      if (v31)
      {
        unint64_t v35 = 0;
        uint64_t v36 = v27 + 1;
        while ((sub_2CF0B0((int *)((char *)v36 + *v36), a2) & 1) != 0)
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            int v12 = *(_DWORD *)(a2 + 40) - 1;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

uint64_t sub_2CF0B0(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  unsigned int v12 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  if (v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v15 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v15) {
      return 0;
    }
  }
  else if (v7 - 2 < v15)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v16;
  unint64_t v17 = v7 - v16;
  if (v17 == 0 || !v9 || v17 < v15) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_62;
  }
  uint64_t v21 = v19[2];
  if (v19[2])
  {
    if (v7 - 1 < (unint64_t)&v3[v21]) {
      return 0;
    }
    if (v20 < 7)
    {
      uint64_t v22 = 0;
LABEL_47:
      switch(*((unsigned char *)a1 + v21))
      {
        case 1:
          if (!v22 || (sub_2B8528(v22, (uint64_t *)a2) & 1) != 0) {
            goto LABEL_62;
          }
          return 0;
        case 2:
          if (!v22 || (sub_2C3364(v22, (uint64_t *)a2) & 1) != 0) {
            goto LABEL_62;
          }
          return 0;
        case 3:
          if (!v22 || (sub_2CE9C8(v22, a2) & 1) != 0) {
            goto LABEL_62;
          }
          return 0;
        case 4:
          if (!v22 || (sub_2CEEC0(v22, a2) & 1) != 0) {
            goto LABEL_62;
          }
          return 0;
        case 5:
          if (!v22 || sub_2CF30C(v22, (uint64_t *)a2)) {
            goto LABEL_62;
          }
          return 0;
        default:
          goto LABEL_62;
      }
    }
  }
  else if (v20 <= 6)
  {
    goto LABEL_62;
  }
  uint64_t v23 = v19[3];
  if (v19[3])
  {
    unint64_t v24 = (unint64_t)&v3[v23];
    BOOL v26 = (v24 & 3) == 0 || v4 == 0;
    if (v8 < v24 || !v26) {
      return 0;
    }
    uint64_t v27 = *(unsigned int *)(v2 + v24);
    if ((int)v27 >= 1 && v7 - 1 >= v24 + v27)
    {
      uint64_t v22 = (int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
      goto LABEL_46;
    }
    return 0;
  }
  uint64_t v22 = 0;
LABEL_46:
  if (v21) {
    goto LABEL_47;
  }
LABEL_62:
  --*(_DWORD *)(a2 + 40);
  return 1;
}

uint64_t sub_2CF30C(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (unint64_t)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  BOOL v7 = v6 >= 5 && v6 - 4 >= v3;
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a2 + 10);
  unsigned int v10 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v9 + 1;
  *((_DWORD *)a2 + 11) = v10;
  if ((v9 + 1) > *((_DWORD *)a2 + 4) || v10 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v12 = v3 - v8;
  if ((v3 - v8))
  {
    uint64_t v13 = 0;
    if (v4 || v6 - 2 < v12) {
      return v13;
    }
  }
  else if (v6 - 2 < v12)
  {
    return 0;
  }
  unint64_t v14 = *(unsigned __int16 *)(v2 + v12);
  if ((v14 & 1) != 0 && v4 | v14 & 1) {
    return 0;
  }
  BOOL v7 = v6 >= v14;
  unint64_t v15 = v6 - v14;
  if (v15 == 0 || !v7 || v15 < v12) {
    return 0;
  }
  unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 >= 5u)
  {
    uint64_t v19 = v18[2];
    if (v19)
    {
      if (v6 - 1 < v3 + v19) {
        return 0;
      }
    }
  }
  *((_DWORD *)a2 + 10) = v9;
  return 1;
}

uint64_t sub_2CF3F8(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 40);
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  BOOL v16 = v12 + 1 > v15 || v13 > v14;
  if (v16) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  uint64_t v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
        return 0;
      }
      uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      uint64_t v28 = (char *)v27 - v2;
      BOOL v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30) {
        return 0;
      }
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v32 = 4 * v31 + 4;
      BOOL v16 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (!v16 || v33 < (unint64_t)v28) {
        return 0;
      }
      if (v31)
      {
        unint64_t v35 = 0;
        uint64_t v36 = v27 + 1;
        while ((sub_2CF5E8((int *)((char *)v36 + *v36), a2) & 1) != 0)
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            int v12 = *(_DWORD *)(a2 + 40) - 1;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

uint64_t sub_2CF5E8(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 40);
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  BOOL v16 = v12 + 1 > v15 || v13 > v14;
  if (v16) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  uint64_t v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
        return 0;
      }
      uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      uint64_t v28 = (char *)v27 - v2;
      BOOL v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30) {
        return 0;
      }
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v32 = 4 * v31 + 4;
      BOOL v16 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (!v16 || v33 < (unint64_t)v28) {
        return 0;
      }
      if (v31)
      {
        unint64_t v35 = 0;
        uint64_t v36 = v27 + 1;
        while ((sub_2CF7D8((int *)((char *)v36 + *v36), a2) & 1) != 0)
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            int v12 = *(_DWORD *)(a2 + 40) - 1;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

uint64_t sub_2CF7D8(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  uint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  unsigned int v23 = *v22;
  if (v23 >= 5)
  {
    if (v22[2])
    {
      unint64_t v24 = (unint64_t)&v3[v22[2]];
      if ((v24 & 7) != 0 && v4) {
        return 0;
      }
      uint64_t result = 0;
      if (v7 < 9 || v7 - 8 < v24) {
        return result;
      }
    }
    if (v23 >= 7)
    {
      uint64_t v25 = v22[3];
      if (v25)
      {
        uint64_t result = 0;
        unint64_t v26 = (unint64_t)&v3[v25];
        BOOL v28 = (v26 & 3) == 0 || v4 == 0;
        if (v8 < v26 || !v28) {
          return result;
        }
        uint64_t v29 = *(unsigned int *)(v2 + v26);
        if ((int)v29 < 1 || v7 - 1 < v26 + v29) {
          return 0;
        }
        uint64_t result = 0;
        BOOL v30 = (unsigned int *)((char *)a1 + v25 + *(unsigned int *)((char *)a1 + v25));
        uint64_t v31 = (char *)v30 - v2;
        BOOL v32 = (v31 & 3) == 0 || v4 == 0;
        BOOL v33 = v32;
        if (v8 < (unint64_t)v31 || !v33) {
          return result;
        }
        uint64_t v34 = *v30;
        if (v34 > 0x1FFFFFFE) {
          return 0;
        }
        uint64_t result = 0;
        unint64_t v35 = 4 * v34 + 4;
        BOOL v15 = v7 > v35;
        unint64_t v36 = v7 - v35;
        if (!v15 || v36 < (unint64_t)v31) {
          return result;
        }
        if (v34)
        {
          unint64_t v37 = 0;
          uint64_t v38 = v30 + 1;
          while (sub_2CFB44((int *)((char *)v38 + *v38), a2))
          {
            ++v37;
            ++v38;
            if (v37 >= *v30)
            {
              uint64_t v21 = -(uint64_t)*a1;
              goto LABEL_65;
            }
          }
          return 0;
        }
      }
    }
  }
LABEL_65:
  if (*(unsigned __int16 *)((char *)a1 + v21) < 9u
    || (uint64_t v39 = *(unsigned __int16 *)((char *)a1 + v21 + 8), !*(_WORD *)((char *)a1 + v21 + 8)))
  {
    uint64_t result = sub_2A7D68(a2, 0);
    if (!result) {
      return result;
    }
    goto LABEL_79;
  }
  unint64_t v40 = (unint64_t)a1 + v39 - *(void *)a2;
  uint64_t result = 0;
  if ((v40 & 3) == 0 || *(unsigned char *)(a2 + 24) == 0)
  {
    unint64_t v42 = *(void *)(a2 + 8);
    if (v42 >= 5 && v42 - 4 >= v40)
    {
      uint64_t v43 = *(unsigned int *)(*(void *)a2 + v40);
      if ((int)v43 < 1 || v42 - 1 < v40 + v43) {
        return 0;
      }
      uint64_t result = sub_2A7D68(a2, (unsigned int *)((char *)a1 + v39 + *(unsigned int *)((char *)a1 + v39)));
      if (result)
      {
LABEL_79:
        BOOL v44 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v44 >= 9u && (uint64_t v45 = v44[4]) != 0) {
          unint64_t v46 = (unsigned int *)((char *)a1 + v45 + *(unsigned int *)((char *)a1 + v45));
        }
        else {
          unint64_t v46 = 0;
        }
        uint64_t result = sub_2AFFCC(a2, v46);
        if (result)
        {
          uint64_t result = sub_2A7CE0(a1, a2, 0xAu);
          if (result)
          {
            unint64_t v47 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v47 >= 0xBu && (uint64_t v48 = v47[5]) != 0) {
              uint64_t v49 = (unsigned int *)((char *)a1 + v48 + *(unsigned int *)((char *)a1 + v48));
            }
            else {
              uint64_t v49 = 0;
            }
            uint64_t result = sub_2B0F20(a2, v49);
            if (result)
            {
              --*(_DWORD *)(a2 + 40);
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_2CFB44(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_86;
  }
  uint64_t v22 = v20[2];
  if (v20[2])
  {
    BOOL result = 0;
    unsigned int v23 = &v3[v22];
    BOOL v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v23 || !v25) {
      return result;
    }
    uint64_t v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26]) {
      return 0;
    }
    BOOL result = 0;
    uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    BOOL v28 = (char *)v27 - v2;
    BOOL v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    BOOL v30 = v29;
    if (v8 < (unint64_t)v28 || !v30) {
      return result;
    }
    uint64_t v31 = *v27;
    if (v31 > 0x7FFFFFFE) {
      return 0;
    }
    unint64_t v32 = v31 + 4;
    unint64_t v33 = (unint64_t)&v28[v31 + 4];
    BOOL v34 = v7 - 1 >= v33 && v7 > v32;
    BOOL v35 = v34 && v7 - v32 >= (unint64_t)v28;
    if (!v35 || *(unsigned char *)(v2 + v33)) {
      return 0;
    }
  }
  if (v21 < 7 || (uint64_t v36 = v20[3]) == 0)
  {
LABEL_86:
    BOOL result = sub_2AFEE4(a1, a2, 8u, 8);
    if (result)
    {
      --*(_DWORD *)(a2 + 40);
      return 1;
    }
    return result;
  }
  BOOL result = 0;
  unint64_t v37 = (unint64_t)&v3[v36];
  BOOL v39 = (v37 & 3) == 0 || v4 == 0;
  if (v8 >= v37 && v39)
  {
    uint64_t v40 = *(unsigned int *)(v2 + v37);
    if ((int)v40 < 1 || v7 - 1 < v37 + v40) {
      return 0;
    }
    BOOL result = 0;
    BOOL v41 = (unsigned int *)((char *)a1 + v36 + *(unsigned int *)((char *)a1 + v36));
    unint64_t v42 = (char *)v41 - v2;
    BOOL v43 = (v42 & 3) == 0 || v4 == 0;
    BOOL v44 = v43;
    if (v8 >= (unint64_t)v42 && v44)
    {
      uint64_t v45 = *v41;
      if (v45 > 0x1FFFFFFE) {
        return 0;
      }
      BOOL result = 0;
      unint64_t v46 = 4 * v45 + 4;
      BOOL v15 = v7 > v46;
      unint64_t v47 = v7 - v46;
      if (v15 && v47 >= (unint64_t)v42)
      {
        if (v45)
        {
          unint64_t v48 = 0;
          uint64_t v49 = v41 + 1;
          while ((sub_2BD080((int *)((char *)v49 + *v49), (uint64_t *)a2) & 1) != 0)
          {
            ++v48;
            ++v49;
            if (v48 >= *v41) {
              goto LABEL_86;
            }
          }
          return 0;
        }
        goto LABEL_86;
      }
    }
  }
  return result;
}

uint64_t sub_2CFE08(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 40);
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  BOOL v16 = v12 + 1 > v15 || v13 > v14;
  if (v16) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  unsigned int v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
        return 0;
      }
      uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      BOOL v28 = (char *)v27 - v2;
      BOOL v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30) {
        return 0;
      }
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v32 = 4 * v31 + 4;
      BOOL v16 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (!v16 || v33 < (unint64_t)v28) {
        return 0;
      }
      if (v31)
      {
        unint64_t v35 = 0;
        uint64_t v36 = v27 + 1;
        while ((sub_2CFFF8((int *)((char *)v36 + *v36), (uint64_t *)a2) & 1) != 0)
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            int v12 = *(_DWORD *)(a2 + 40) - 1;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

uint64_t sub_2CFFF8(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v10 = *a1;
  int v11 = *((_DWORD *)a2 + 10);
  unsigned int v12 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v11 + 1;
  *((_DWORD *)a2 + 11) = v12;
  if ((v11 + 1) > *((_DWORD *)a2 + 4) || v12 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v15 = (unint64_t)&v3[-v10];
  if (v15)
  {
    uint64_t result = 0;
    if (v4 || v6 - 2 < v15) {
      return result;
    }
  }
  else if (v6 - 2 < v15)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v16;
  unint64_t v17 = v6 - v16;
  if (v17 == 0 || !v8 || v17 < v15) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5)
  {
LABEL_81:
    *((_DWORD *)a2 + 10) = v11;
    return 1;
  }
  uint64_t v21 = v19[2];
  if (v19[2])
  {
    uint64_t result = 0;
    uint64_t v22 = &v3[v21];
    BOOL v24 = ((unint64_t)&v3[v21] & 3) == 0 || v4 == 0;
    if (v7 < (unint64_t)v22 || !v24) {
      return result;
    }
    uint64_t v25 = *(unsigned int *)&v22[v2];
    if ((int)v25 < 1 || v6 - 1 < (unint64_t)&v22[v25]) {
      return 0;
    }
    uint64_t result = 0;
    uint64_t v26 = (unsigned int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21));
    uint64_t v27 = (char *)v26 - v2;
    BOOL v28 = (((unint64_t)v26 - v2) & 3) == 0 || v4 == 0;
    BOOL v29 = v28;
    if (v7 < (unint64_t)v27 || !v29) {
      return result;
    }
    uint64_t v30 = *v26;
    if (v30 > 0x1FFFFFFE) {
      return 0;
    }
    unint64_t v31 = 4 * v30 + 4;
    BOOL v8 = v6 >= v31;
    unint64_t v32 = v6 - v31;
    if (v32 == 0 || !v8 || v32 < (unint64_t)v27) {
      return 0;
    }
  }
  if (v20 < 7) {
    goto LABEL_81;
  }
  if (!v19[3]) {
    goto LABEL_80;
  }
  unint64_t v34 = (unint64_t)&v3[v19[3]];
  if ((v34 & 7) != 0 && v4) {
    return 0;
  }
  uint64_t result = 0;
  if (v6 >= 9 && v6 - 8 >= v34)
  {
LABEL_80:
    if (v20 < 9) {
      goto LABEL_81;
    }
    uint64_t v35 = v19[4];
    if (!v19[4]
      || ((result = 0, uint64_t v36 = &v3[v35], ((unint64_t)&v3[v35] & 3) != 0) ? (v37 = v4 == 0) : (v37 = 1),
          !v37 ? (int v38 = 0) : (int v38 = 1),
          v7 >= (unint64_t)v36 && v38))
    {
      if (v20 < 0xB || !v19[5]) {
        goto LABEL_81;
      }
      uint64_t result = 0;
      unint64_t v39 = (unint64_t)&v3[v19[5]];
      BOOL v40 = (v39 & 3) == 0 || v4 == 0;
      BOOL v41 = v40;
      if (v7 >= v39 && v41) {
        goto LABEL_81;
      }
    }
  }
  return result;
}

uint64_t sub_2D01F8(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = -v20;
  uint64_t v22 = (unsigned __int16 *)((char *)a1 - v20);
  if (*v22 >= 5u)
  {
    uint64_t v23 = v22[2];
    if (v23)
    {
      uint64_t result = 0;
      BOOL v24 = &v3[v23];
      BOOL v26 = ((unint64_t)&v3[v23] & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)&v24[v2];
      if ((int)v27 < 1 || v7 - 1 < (unint64_t)&v24[v27]) {
        return 0;
      }
      uint64_t result = sub_2CF30C((int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23)), (uint64_t *)a2);
      if (!result) {
        return result;
      }
      uint64_t v21 = -(uint64_t)*a1;
    }
  }
  BOOL v28 = (char *)a1 + v21;
  if (*(unsigned __int16 *)((char *)a1 + v21) < 7u || (uint64_t v29 = *((unsigned __int16 *)v28 + 3), !*((_WORD *)v28 + 3)))
  {
LABEL_71:
    BOOL v44 = (unsigned __int16 *)((char *)a1 + v21);
    if (*v44 < 9u
      || (uint64_t v45 = v44[4]) == 0
      || (uint64_t result = 0, v46 = *(void *)(a2 + 8), v46 >= 2) && v46 - 1 >= (unint64_t)a1 + v45 - *(void *)a2)
    {
      --*(_DWORD *)(a2 + 40);
      return 1;
    }
    return result;
  }
  uint64_t v30 = *(void *)a2;
  unint64_t v31 = (unint64_t)a1 + v29 - *(void *)a2;
  if ((v31 & 3) != 0 && *(unsigned char *)(a2 + 24)) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v32 = *(void *)(a2 + 8);
  if (v32 >= 5 && v32 - 4 >= v31)
  {
    uint64_t v33 = *(unsigned int *)(v30 + v31);
    if ((int)v33 < 1 || v32 - 1 < v31 + v33) {
      return 0;
    }
    uint64_t result = 0;
    unint64_t v34 = (unsigned int *)((char *)a1 + v29 + *(unsigned int *)((char *)a1 + v29));
    unint64_t v35 = (unint64_t)v34 - v30;
    BOOL v36 = (((unint64_t)v34 - v30) & 3) == 0 || *(unsigned char *)(a2 + 24) == 0;
    BOOL v37 = v36;
    if (v32 - 4 >= v35 && v37)
    {
      uint64_t v38 = *v34;
      if (v38 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v39 = 4 * v38 + 4;
      BOOL v15 = v32 > v39;
      unint64_t v40 = v32 - v39;
      if (!v15 || v40 < v35) {
        return 0;
      }
      if (v38)
      {
        unint64_t v42 = 0;
        BOOL v43 = v34 + 1;
        while ((sub_2D04C8((int *)((char *)v43 + *v43), a2) & 1) != 0)
        {
          ++v42;
          ++v43;
          if (v42 >= *v34)
          {
            uint64_t v21 = -(uint64_t)*a1;
            goto LABEL_71;
          }
        }
        return 0;
      }
      goto LABEL_71;
    }
  }
  return result;
}

uint64_t sub_2D04C8(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_74;
  }
  if (!v20[2]) {
    goto LABEL_89;
  }
  unint64_t v22 = (unint64_t)&v3[v20[2]];
  if ((v22 & 7) != 0 && v4) {
    return 0;
  }
  uint64_t result = 0;
  if (v7 >= 9 && v7 - 8 >= v22)
  {
LABEL_89:
    if (v21 < 7) {
      goto LABEL_74;
    }
    if (v20[3] && v7 - 1 < (unint64_t)&v3[v20[3]]) {
      return 0;
    }
    if (v21 < 9) {
      goto LABEL_74;
    }
    uint64_t v23 = v20[4];
    if (!v20[4]) {
      goto LABEL_90;
    }
    uint64_t result = 0;
    BOOL v24 = &v3[v23];
    BOOL v25 = ((unint64_t)&v3[v23] & 3) == 0 || v4 == 0;
    BOOL v26 = v25;
    if (v8 >= (unint64_t)v24 && v26)
    {
      uint64_t v27 = *(unsigned int *)&v24[v2];
      if ((int)v27 < 1 || v7 - 1 < (unint64_t)&v24[v27]) {
        return 0;
      }
      uint64_t result = 0;
      BOOL v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
      uint64_t v29 = (char *)v28 - v2;
      BOOL v30 = (((unint64_t)v28 - v2) & 3) == 0 || v4 == 0;
      BOOL v31 = v30;
      if (v8 >= (unint64_t)v29 && v31)
      {
        uint64_t v32 = *v28;
        if (v32 > 0xFFFFFFE) {
          return 0;
        }
        uint64_t result = 0;
        unint64_t v33 = (8 * v32) | 4;
        BOOL v9 = v7 >= v33;
        unint64_t v34 = v7 - v33;
        if (v34 != 0 && v9 && v34 >= (unint64_t)v29)
        {
LABEL_90:
          if (v21 < 0xB) {
            goto LABEL_74;
          }
          uint64_t v35 = v20[5];
          if (!v35) {
            goto LABEL_74;
          }
          uint64_t result = 0;
          unint64_t v36 = (unint64_t)&v3[v35];
          BOOL v37 = (v36 & 3) == 0 || v4 == 0;
          BOOL v38 = v37;
          if (v8 >= v36 && v38)
          {
            uint64_t v39 = *(unsigned int *)(v2 + v36);
            if ((int)v39 < 1 || v7 - 1 < v36 + v39) {
              return 0;
            }
            uint64_t result = sub_2B9C94((int *)((char *)a1 + v35 + *(unsigned int *)((char *)a1 + v35)), a2);
            if (result)
            {
LABEL_74:
              uint64_t result = sub_2B16B4(a1, a2, 0xCu, 4);
              if (result)
              {
                uint64_t result = sub_2B16B4(a1, a2, 0xEu, 4);
                if (result)
                {
                  uint64_t result = sub_2B16B4(a1, a2, 0x10u, 4);
                  if (result)
                  {
                    uint64_t result = sub_2AFEE4(a1, a2, 0x12u, 4);
                    if (result)
                    {
                      unint64_t v40 = (unsigned __int16 *)((char *)a1 - *a1);
                      if (*v40 < 0x15u
                        || (uint64_t v41 = v40[10]) == 0
                        || (uint64_t result = 0, v42 = *(void *)(a2 + 8), v42 >= 2)
                        && v42 - 1 >= (unint64_t)a1 + v41 - *(void *)a2)
                      {
                        uint64_t result = sub_2A7CE0(a1, a2, 0x16u);
                        if (result)
                        {
                          BOOL v43 = (unsigned __int16 *)((char *)a1 - *a1);
                          if (*v43 < 0x17u
                            || (uint64_t v44 = v43[11]) == 0
                            || (uint64_t result = sub_2D081C((int *)((char *)a1 + v44 + *(unsigned int *)((char *)a1 + v44)), (uint64_t *)a2), result))
                          {
                            --*(_DWORD *)(a2 + 40);
                            return 1;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2D081C(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_40;
  }
  if (v19[2] && v6 - 1 < (unint64_t)&v3[v19[2]]) {
    return 0;
  }
  if (v20 < 7
    || (uint64_t v21 = v19[3]) == 0
    || ((v14 = 0, v22 = (unint64_t)&v3[v21], (v22 & 3) != 0) ? (BOOL v23 = v4 == 0) : (BOOL v23 = 1),
        !v23 ? (int v24 = 0) : (int v24 = 1),
        v7 >= v22 && v24))
  {
LABEL_40:
    *((_DWORD *)a2 + 10) = v10;
    return 1;
  }
  return v14;
}

uint64_t sub_2D0938(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  BOOL v12 = (v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5);
  if (v12) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  unint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_54;
  }
  if (v19[2] && v6 - 1 < (unint64_t)&v3[v19[2]]) {
    return 0;
  }
  if (v20 < 7) {
    goto LABEL_54;
  }
  uint64_t v21 = v19[3];
  if (!v19[3]) {
    goto LABEL_54;
  }
  uint64_t v14 = 0;
  unint64_t v22 = (unint64_t)&v3[v21];
  BOOL v23 = (v22 & 3) == 0 || v4 == 0;
  BOOL v24 = v23;
  if (v7 >= v22 && v24)
  {
    uint64_t v25 = *(unsigned int *)(v2 + v22);
    if ((int)v25 < 1 || v6 - 1 < v22 + v25) {
      return 0;
    }
    uint64_t v14 = 0;
    BOOL v26 = (unsigned int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21));
    uint64_t v27 = (char *)v26 - v2;
    BOOL v28 = (v27 & 3) == 0 || v4 == 0;
    BOOL v29 = v28;
    if (v7 >= (unint64_t)v27 && v29)
    {
      uint64_t v30 = *v26;
      if (v30 > 0x7FFFFFE) {
        return 0;
      }
      uint64_t v14 = 0;
      unint64_t v31 = (16 * v30) | 4;
      BOOL v12 = v6 > v31;
      unint64_t v32 = v6 - v31;
      if (v12 && v32 >= (unint64_t)v27)
      {
LABEL_54:
        *((_DWORD *)a2 + 10) = v10;
        return 1;
      }
    }
  }
  return v14;
}

double sub_2D0AC8(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = 20190201;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  return result;
}

uint64_t sub_2D0AF4(uint64_t a1)
{
  return *(void *)(a1 + 80) - *(void *)(a1 + 72);
}

uint64_t sub_2D0B00(void *a1, unsigned int a2)
{
  unint64_t v2 = a1[2];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  uint64_t v5 = *(uint64_t ***)(a1[1] + 8 * v4);
  if (!v5) {
    return 0;
  }
  unint64_t v6 = *v5;
  if (!v6) {
    return 0;
  }
  if (v3.u32[0] < 2uLL)
  {
    unint64_t v7 = v2 - 1;
    while (1)
    {
      uint64_t v9 = v6[1];
      if (v9 == a2)
      {
        if (*((_DWORD *)v6 + 4) == a2) {
          return a1[9] + v6[3] + 4;
        }
      }
      else if ((v9 & v7) != v4)
      {
        return 0;
      }
      unint64_t v6 = (uint64_t *)*v6;
      if (!v6) {
        return 0;
      }
    }
  }
  while (1)
  {
    unint64_t v8 = v6[1];
    if (v8 == a2) {
      break;
    }
    if (v8 >= v2) {
      v8 %= v2;
    }
    if (v8 != v4) {
      return 0;
    }
LABEL_11:
    unint64_t v6 = (uint64_t *)*v6;
    if (!v6) {
      return 0;
    }
  }
  if (*((_DWORD *)v6 + 4) != a2) {
    goto LABEL_11;
  }
  return a1[9] + v6[3] + 4;
}

uint64_t sub_2D0BF0(void *a1, unsigned int a2)
{
  unsigned int v9 = a2;
  uint64_t result = sub_2D10DC(a1 + 1, &v9);
  unint64_t v6 = (_DWORD *)a1[6];
  uint64_t v5 = (_DWORD *)a1[7];
  if (v6 != v5)
  {
    while (*v6 != a2)
    {
      if (++v6 == v5)
      {
        unint64_t v6 = (_DWORD *)a1[7];
        break;
      }
    }
  }
  unint64_t v7 = v6 + 1;
  if (v6 != v5 && v7 != v5)
  {
    do
    {
      if (*v7 != a2) {
        *v6++ = *v7;
      }
      ++v7;
    }
    while (v7 != v5);
  }
  if (v6 != v5) {
    a1[7] = v6;
  }
  return result;
}

void *sub_2D0CB8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v35 = a2;
  sub_745A4(a1 + 48, &v35);
  uint64_t v5 = (void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
  unsigned int v34 = v35;
  unint64_t v36 = &v34;
  sub_2D11F4(a1 + 8, &v34, (uint64_t)&unk_20F06E0, &v36)[3] = v6;
  uint64_t v7 = v6 + *(void *)(a3 + 8);
  unint64_t v8 = v7 + 4;
  int v10 = *(char **)(a1 + 72);
  unsigned int v9 = *(char **)(a1 + 80);
  unint64_t v11 = v9 - v10;
  size_t v12 = v7 + 4 - (v9 - v10);
  if (v7 + 4 > (unint64_t)(v9 - v10))
  {
    uint64_t v13 = *(void *)(a1 + 88);
    if (v13 - (uint64_t)v9 >= v12)
    {
      bzero(*(void **)(a1 + 80), v12);
      *(void *)(a1 + 80) = &v9[v12];
      goto LABEL_31;
    }
    if ((v8 & 0x8000000000000000) != 0) {
      sub_2E00();
    }
    unint64_t v14 = v13 - (void)v10;
    uint64_t v15 = 2 * v14;
    if (2 * v14 <= v8) {
      uint64_t v15 = v8;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v16 = v15;
    }
    unint64_t v17 = (char *)operator new(v16);
    unint64_t v33 = &v17[v16];
    unint64_t v18 = v17;
    unint64_t v32 = &v17[v8];
    unint64_t v19 = &v17[v11];
    bzero(&v17[v11], v12);
    if (v9 == v10) {
      goto LABEL_29;
    }
    if (v11 >= 8 && (unint64_t)(v10 - v18) >= 0x20)
    {
      if (v11 < 0x20)
      {
        unint64_t v20 = 0;
        goto LABEL_21;
      }
      unint64_t v20 = v11 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v21 = v9 - 16;
      unint64_t v22 = &v18[v9 - 16 - v10];
      unint64_t v23 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v24 = *(_OWORD *)v21;
        *((_OWORD *)v22 - 1) = *((_OWORD *)v21 - 1);
        *(_OWORD *)unint64_t v22 = v24;
        v22 -= 32;
        v21 -= 32;
        v23 -= 32;
      }
      while (v23);
      if (v11 == v20) {
        goto LABEL_28;
      }
      if ((v11 & 0x18) != 0)
      {
LABEL_21:
        v19 -= v11 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v25 = &v9[-v20 - 8];
        BOOL v26 = (char *)(v25 - v10);
        unint64_t v27 = v20 - (v11 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v28 = *(void *)v25;
          v25 -= 8;
          *(void *)&v26[(void)v18] = v28;
          v26 -= 8;
          v27 += 8;
        }
        while (v27);
        v9 -= v11 & 0xFFFFFFFFFFFFFFF8;
        if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_28;
        }
        goto LABEL_26;
      }
      v19 -= v20;
      v9 -= v20;
    }
LABEL_26:
    BOOL v29 = v19 - 1;
    do
    {
      char v30 = *--v9;
      *v29-- = v30;
    }
    while (v9 != v10);
LABEL_28:
    unsigned int v9 = v10;
    unint64_t v19 = v18;
LABEL_29:
    *(void *)(a1 + 72) = v19;
    *(void *)(a1 + 80) = v32;
    *(void *)(a1 + 88) = v33;
    if (v9) {
      operator delete(v9);
    }
    goto LABEL_31;
  }
  if (v7 + 4 < v11) {
    *(void *)(a1 + 80) = &v10[v8];
  }
LABEL_31:
  *(_DWORD *)(*v5 + v6) = sub_2D0F10(*(void *)(a3 + 8));
  return memcpy((void *)(*v5 + v6 + 4), *(const void **)a3, *(void *)(a3 + 8));
}

unint64_t sub_2D0F10(unint64_t result)
{
  unint64_t v1 = result;
  if (HIDWORD(result))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v8, v1);
    uint8x8_t v3 = std::string::insert(&v8, 0, "narrowing ");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    uint64_t v5 = std::string::append(&v9, " failed");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v5->__r_.__value_.__r.__words[2];
    long long v10 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  return result;
}

void sub_2D0FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void *sub_2D1064(void *result)
{
  unint64_t v1 = result;
  if (result[4])
  {
    uint64_t result = (void *)result[3];
    if (result)
    {
      do
      {
        unint64_t v2 = (void *)*result;
        operator delete(result);
        uint64_t result = v2;
      }
      while (v2);
    }
    v1[3] = 0;
    uint64_t v3 = v1[2];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(v1[1] + 8 * i) = 0;
    }
    v1[4] = 0;
  }
  v1[10] = v1[9];
  v1[7] = v1[6];
  return result;
}

uint64_t sub_2D10DC(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  long long v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = *v6;
  if (!*v6) {
    return 0;
  }
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == v3)
      {
        if (*((_DWORD *)v7 + 4) == v3) {
          goto LABEL_22;
        }
      }
      else if ((v10 & v8) != v5)
      {
        return 0;
      }
      uint64_t v7 = (uint64_t *)*v7;
      if (!v7) {
        return 0;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == v3) {
      break;
    }
    if (v9 >= *(void *)&v2) {
      v9 %= *(void *)&v2;
    }
    if (v9 != v5) {
      return 0;
    }
LABEL_11:
    uint64_t v7 = (uint64_t *)*v7;
    if (!v7) {
      return 0;
    }
  }
  if (*((_DWORD *)v7 + 4) != v3) {
    goto LABEL_11;
  }
LABEL_22:
  sub_256F0(a1, v7, (uint64_t)&__p);
  size_t v12 = __p;
  __n128 __p = 0;
  if (v12) {
    operator delete(v12);
  }
  return 1;
}

uint64_t *sub_2D11F4(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      std::string::size_type v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            std::string::size_type v11 = (uint64_t *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          std::string::size_type v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  uint64_t v15 = operator new(0x20uLL);
  *uint64_t v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  v15[3] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    unint64_t v7 = v4;
  }
  else
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_36;
    }
    if (prime < v8)
    {
      unint64_t v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        unint64_t v22 = std::__next_prime(v22);
      }
      else
      {
        uint64_t v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2) {
          unint64_t v22 = v24;
        }
      }
      if (prime <= v22) {
        size_t prime = v22;
      }
      if (prime < v8) {
LABEL_36:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        v7 %= v8;
      }
    }
    else
    {
      unint64_t v7 = (v8 - 1) & v7;
    }
  }
  uint64_t v25 = *(void *)a1;
  BOOL v26 = *(void **)(*(void *)a1 + 8 * v7);
  if (v26)
  {
    *uint64_t v15 = *v26;
LABEL_59:
    *BOOL v26 = v15;
    goto LABEL_60;
  }
  *uint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    unint64_t v27 = *(void *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8) {
        v27 %= v8;
      }
    }
    else
    {
      v27 &= v8 - 1;
    }
    BOOL v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_2D14EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2D1500(void *a1, uint64_t a2)
{
  unint64_t v3 = sub_51960(a1, SHIDWORD(a2));
  sub_188FC78(v3, (uint64_t)".", 1);
  std::ostream::operator<<();
  return a1;
}

unint64_t sub_2D1548(uint64_t a1)
{
  unint64_t v1 = *(unsigned int **)(a1 + 8);
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 < (unint64_t)(v1 + 1)) {
    return 2;
  }
  uint64_t v3 = *v1;
  unint64_t v5 = v1 + 1;
  if (v2 >= (unint64_t)(v5 + 1)) {
    return ((unint64_t)*v5 << 32) | v3;
  }
  return v3;
}

char *sub_2D15A0@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = a2 + 8;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)a2 = sub_7375C(*a1, 2u);
  unsigned int __src = *a1;
  sub_2D18C8(v4, 0, (char *)&__src, (char *)&v7, 4);
  unsigned int v7 = a1[1];
  return sub_2D18C8(v4, *(char **)(a2 + 16), (char *)&v7, (char *)&v8, 4);
}

void sub_2D1638(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2D1654(unsigned int *a1)
{
  sub_E1B4((uint64_t)v13);
  unint64_t v2 = sub_188FC78(v14, (uint64_t)"(", 1);
  uint64_t v3 = sub_736EC(*a1);
  size_t v4 = strlen(v3);
  unint64_t v5 = sub_188FC78(v2, (uint64_t)v3, v4);
  sub_188FC78(v5, (uint64_t)", ", 2);
  char v6 = sub_511FC(a1[1]);
  sub_51938(a1[1] & ~(-1 << (v6 & 0xFE)));
  unsigned int v7 = (void *)std::ostream::operator<<();
  sub_188FC78(v7, (uint64_t)".", 1);
  char v8 = sub_511FC(a1[1]);
  sub_51938((a1[1] & ~(-1 << (v8 & 0xFE))) >> 1);
  uint8x8_t v9 = (void *)std::ostream::operator<<();
  uint64_t v10 = sub_188FC78(v9, (uint64_t)".", 1);
  sub_511FC(a1[1]);
  std::ostream::operator<<();
  sub_188FC78(v10, (uint64_t)")", 1);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_2D18B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_2D18C8(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  unint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      sub_2E00();
    }
    unint64_t v13 = __dst - v11;
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      size_t v16 = v15;
      size_t v15 = (size_t)operator new(v15);
    }
    else
    {
      size_t v16 = 0;
    }
    size_t v25 = v15 + v13;
    size_t v26 = v15;
    memcpy((void *)(v15 + v13), __src, a5);
    size_t v27 = v26;
    size_t v28 = v25;
    if (v11 != v5)
    {
      BOOL v29 = v5;
      size_t v28 = v25;
      if (v13 < 0x20) {
        goto LABEL_47;
      }
      BOOL v29 = v5;
      size_t v28 = v25;
      if ((unint64_t)&v11[-v27] < 0x20) {
        goto LABEL_47;
      }
      BOOL v29 = &v5[-(v13 & 0xFFFFFFFFFFFFFFE0)];
      size_t v28 = v25 - (v13 & 0xFFFFFFFFFFFFFFE0);
      char v30 = v5 - 16;
      unint64_t v31 = (char *)(v27 + v5 - 16 - v11);
      unint64_t v32 = v13 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v33 = *(_OWORD *)v30;
        *((_OWORD *)v31 - 1) = *((_OWORD *)v30 - 1);
        *(_OWORD *)unint64_t v31 = v33;
        v31 -= 32;
        v30 -= 32;
        v32 -= 32;
      }
      while (v32);
      if (v13 != (v13 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_47:
        do
        {
          char v34 = *--v29;
          *(unsigned char *)--size_t v28 = v34;
        }
        while (v29 != v11);
      }
      uint64_t v10 = *(char **)(a1 + 8);
    }
    unsigned int v35 = (char *)(v25 + a5);
    size_t v36 = v27 + v16;
    if (v10 != v5) {
      memmove(v35, v5, v10 - v5);
    }
    BOOL v37 = *(char **)a1;
    *(void *)a1 = v28;
    *(void *)(a1 + 8) = &v35[v10 - v5];
    *(void *)(a1 + 16) = v36;
    if (v37) {
      operator delete(v37);
    }
    return (char *)v25;
  }
  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    BOOL v18 = &__src[a5];
    unint64_t v20 = *(char **)(a1 + 8);
    uint64_t v21 = &__dst[a5];
    unint64_t v22 = &v10[-a5];
    uint8x8_t v23 = v20;
    if ((unint64_t)v10 < a5) {
      goto LABEL_39;
    }
    goto LABEL_18;
  }
  BOOL v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  unint64_t v20 = &v10[v19];
  *(void *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
  {
    uint64_t v21 = &v5[a5];
    unint64_t v22 = &v20[-a5];
    uint8x8_t v23 = &v10[v19];
    if (&v20[-a5] >= v10) {
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v24 = &v10[a5] - v20;
    if (v24 >= 0x20)
    {
      uint8x8_t v23 = v20;
      if ((unint64_t)a5 >= 0x20)
      {
        BOOL v38 = &v22[v24 & 0xFFFFFFFFFFFFFFE0];
        uint8x8_t v23 = &v20[v24 & 0xFFFFFFFFFFFFFFE0];
        uint64_t v39 = v20 + 16;
        unint64_t v40 = (long long *)(v22 + 16);
        unint64_t v41 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v42 = *v40;
          *(v39 - 1) = *(v40 - 1);
          *uint64_t v39 = v42;
          v39 += 2;
          v40 += 2;
          v41 -= 32;
        }
        while (v41);
        unint64_t v22 = v38;
        if (v24 == (v24 & 0xFFFFFFFFFFFFFFE0)) {
          goto LABEL_39;
        }
      }
    }
    else
    {
      uint8x8_t v23 = v20;
    }
    do
    {
      char v43 = *v22++;
      *v23++ = v43;
    }
    while (v22 != v10);
LABEL_39:
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(v21, v5, v20 - v21);
    }
    if (v18 != __src) {
      memmove(v5, __src, v18 - __src);
    }
  }
  return v5;
}

void sub_2D1B80(uint64_t a1, void **a2)
{
  size_t v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      char v6 = *(v4 - 3);
      if (v6)
      {
        *(v4 - 2) = v6;
        operator delete(v6);
      }
      unsigned int v7 = v4 - 9;
      char v8 = (void **)*(v4 - 9);
      if (v8)
      {
        uint64_t v9 = (void **)*(v4 - 8);
        unint64_t v5 = *(v4 - 9);
        if (v9 != v8)
        {
          uint64_t v10 = (void **)*(v4 - 8);
          do
          {
            unint64_t v13 = (char *)*(v10 - 3);
            v10 -= 3;
            uint64_t v12 = v13;
            if (v13)
            {
              unint64_t v14 = (char *)*(v9 - 2);
              uint64_t v11 = v12;
              if (v14 != v12)
              {
                size_t v15 = (char *)*(v9 - 2);
                do
                {
                  uint64_t v17 = (void *)*((void *)v15 - 3);
                  v15 -= 24;
                  size_t v16 = v17;
                  if (v17)
                  {
                    *((void *)v14 - 2) = v16;
                    operator delete(v16);
                  }
                  unint64_t v14 = v15;
                }
                while (v15 != v12);
                uint64_t v11 = *v10;
              }
              *(v9 - 2) = v12;
              operator delete(v11);
            }
            uint64_t v9 = v10;
          }
          while (v10 != v8);
          unint64_t v5 = *v7;
        }
        *(v4 - 8) = v8;
        operator delete(v5);
      }
      v4 -= 9;
    }
    while (v7 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_2D1C78(uint64_t a1, char a2, int a3, uint64_t a4)
{
  *(unsigned char *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 4) = a3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  char v6 = *(const void **)a4;
  uint64_t v5 = *(void *)(a4 + 8);
  uint64_t v7 = v5 - *(void *)a4;
  if (v5 != *(void *)a4)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    char v8 = (char *)operator new(v5 - *(void *)a4);
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 24) = v9;
    memcpy(v8, v6, v7 - 1);
    *(void *)(a1 + 16) = v9;
  }
  return a1;
}

void sub_2D1CFC(_Unwind_Exception *exception_object)
{
  size_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_2D1D18(uint64_t a1, char a2, int a3, __n128 *a4)
{
  *(unsigned char *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  __n128 result = *a4;
  *(__n128 *)(a1 + 8) = *a4;
  *(void *)(a1 + 24) = a4[1].n128_u64[0];
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_2D1D44(uint64_t a1, uint64_t a2)
{
  sub_2DCF04(a1, a2);
  *(void *)(v4 + 72) = 0;
  sub_2DC85C(v4 + 80, a2);
  *(void *)(a1 + 152) = &unk_20E1710;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = &unk_20E1710;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = &unk_20E1710;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = &unk_20E1710;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = &unk_20E1710;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = &unk_20E1710;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = &unk_20E1710;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = &unk_20E1710;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 536) = &unk_20E1710;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 584) = &unk_20E1710;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 632) = &unk_20E1710;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 680) = &unk_20E1710;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 728) = &unk_20E1710;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 776) = &unk_20E1710;
  *(void *)(a1 + 816) = 0;
  *(void *)(a1 + 792) = 0;
  *(void *)(a1 + 784) = 0;
  *(void *)(a1 + 800) = 0;
  *(void *)(a1 + 824) = &unk_20E1710;
  *(void *)(a1 + 864) = 0;
  *(void *)(a1 + 840) = 0;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 848) = 0;
  *(void *)(a1 + 872) = &unk_20E1710;
  *(void *)(a1 + 912) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 920) = &unk_20E1710;
  *(void *)(a1 + 960) = 0;
  *(void *)(a1 + 936) = 0;
  *(void *)(a1 + 928) = 0;
  *(void *)(a1 + 944) = 0;
  *(void *)(a1 + 968) = &unk_20E1710;
  *(void *)(a1 + 1008) = 0;
  *(void *)(a1 + 984) = 0;
  *(void *)(a1 + 976) = 0;
  *(void *)(a1 + 992) = 0;
  *(void *)(a1 + 1016) = &unk_20E1710;
  *(void *)(a1 + 1056) = 0;
  *(void *)(a1 + 1032) = 0;
  *(void *)(a1 + 1024) = 0;
  *(void *)(a1 + 1040) = 0;
  *(void *)(a1 + 1064) = &unk_20E1710;
  *(void *)(a1 + 1104) = 0;
  *(void *)(a1 + 1080) = 0;
  *(void *)(a1 + 1072) = 0;
  *(void *)(a1 + 1088) = 0;
  *(void *)(a1 + 1112) = &unk_20E1710;
  *(void *)(a1 + 1152) = 0;
  *(void *)(a1 + 1128) = 0;
  *(void *)(a1 + 1120) = 0;
  *(void *)(a1 + 1136) = 0;
  *(void *)(a1 + 1160) = &unk_20E1710;
  *(void *)(a1 + 1200) = 0;
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1184) = 0;
  *(void *)(a1 + 1208) = &unk_20E1710;
  *(void *)(a1 + 1248) = 0;
  *(void *)(a1 + 1224) = 0;
  *(void *)(a1 + 1216) = 0;
  *(void *)(a1 + 1232) = 0;
  *(void *)(a1 + 1256) = &unk_20E1710;
  *(void *)(a1 + 1296) = 0;
  *(void *)(a1 + 1272) = 0;
  *(void *)(a1 + 1264) = 0;
  *(void *)(a1 + 1280) = 0;
  *(void *)(a1 + 1304) = &unk_20E1710;
  *(void *)(a1 + 1344) = 0;
  *(void *)(a1 + 1320) = 0;
  *(void *)(a1 + 1312) = 0;
  *(void *)(a1 + 1328) = 0;
  *(void *)(a1 + 1352) = &unk_20E1710;
  *(void *)(a1 + 1392) = 0;
  *(void *)(a1 + 1368) = 0;
  *(void *)(a1 + 1360) = 0;
  *(void *)(a1 + 1376) = 0;
  *(void *)(a1 + 1400) = &unk_20E1710;
  *(void *)(a1 + 1440) = 0;
  *(void *)(a1 + 1416) = 0;
  *(void *)(a1 + 1408) = 0;
  *(void *)(a1 + 1424) = 0;
  *(void *)(a1 + 1448) = &unk_20E1710;
  *(void *)(a1 + 1488) = 0;
  *(void *)(a1 + 1464) = 0;
  *(void *)(a1 + 1456) = 0;
  *(void *)(a1 + 1472) = 0;
  *(void *)(a1 + 1496) = &unk_20E1710;
  *(void *)(a1 + 1536) = 0;
  *(void *)(a1 + 1512) = 0;
  *(void *)(a1 + 1504) = 0;
  *(void *)(a1 + 1520) = 0;
  *(void *)(a1 + 1544) = &unk_20E1710;
  *(void *)(a1 + 1584) = 0;
  *(void *)(a1 + 1560) = 0;
  *(void *)(a1 + 1552) = 0;
  *(void *)(a1 + 1568) = 0;
  *(void *)(a1 + 1592) = &unk_20E1710;
  *(void *)(a1 + 1632) = 0;
  *(void *)(a1 + 1608) = 0;
  *(void *)(a1 + 1600) = 0;
  *(void *)(a1 + 1616) = 0;
  *(void *)(a1 + 1640) = &unk_20E1710;
  *(void *)(a1 + 1680) = 0;
  *(void *)(a1 + 1656) = 0;
  *(void *)(a1 + 1648) = 0;
  *(void *)(a1 + 1664) = 0;
  *(void *)(a1 + 1688) = &unk_20E1710;
  *(void *)(a1 + 1728) = 0;
  *(void *)(a1 + 1704) = 0;
  *(void *)(a1 + 1696) = 0;
  *(void *)(a1 + 1712) = 0;
  *(void *)(a1 + 1736) = &unk_20E1710;
  *(void *)(a1 + 1776) = 0;
  *(void *)(a1 + 1752) = 0;
  *(void *)(a1 + 1744) = 0;
  *(void *)(a1 + 1760) = 0;
  *(void *)(a1 + 1784) = &unk_20E1710;
  *(void *)(a1 + 1824) = 0;
  *(void *)(a1 + 1800) = 0;
  *(void *)(a1 + 1792) = 0;
  *(void *)(a1 + 1808) = 0;
  *(void *)(a1 + 1832) = &unk_20E1710;
  *(void *)(a1 + 1872) = 0;
  *(void *)(a1 + 1848) = 0;
  *(void *)(a1 + 1840) = 0;
  *(void *)(a1 + 1856) = 0;
  *(void *)(a1 + 1880) = &unk_20E1710;
  *(void *)(a1 + 1920) = 0;
  *(void *)(a1 + 1896) = 0;
  *(void *)(a1 + 1888) = 0;
  *(void *)(a1 + 1904) = 0;
  *(void *)(a1 + 1928) = &unk_20E1710;
  *(void *)(a1 + 1968) = 0;
  *(void *)(a1 + 1944) = 0;
  *(void *)(a1 + 1936) = 0;
  *(void *)(a1 + 1952) = 0;
  *(void *)(a1 + 1976) = &unk_20E1710;
  *(void *)(a1 + 2016) = 0;
  *(void *)(a1 + 1992) = 0;
  *(void *)(a1 + 1984) = 0;
  *(void *)(a1 + 2000) = 0;
  *(void *)(a1 + 2024) = &unk_20E1710;
  *(void *)(a1 + 2064) = 0;
  *(void *)(a1 + 2040) = 0;
  *(void *)(a1 + 2032) = 0;
  *(void *)(a1 + 2048) = 0;
  *(void *)(a1 + 2072) = &unk_20E1710;
  *(void *)(a1 + 2112) = 0;
  *(void *)(a1 + 2088) = 0;
  *(void *)(a1 + 2080) = 0;
  *(void *)(a1 + 2096) = 0;
  *(void *)(a1 + 2120) = &unk_20E1710;
  *(void *)(a1 + 2160) = 0;
  *(void *)(a1 + 2136) = 0;
  *(void *)(a1 + 2128) = 0;
  *(void *)(a1 + 2144) = 0;
  *(void *)(a1 + 2168) = &unk_20E1710;
  *(void *)(a1 + 2208) = 0;
  *(void *)(a1 + 2184) = 0;
  *(void *)(a1 + 2176) = 0;
  *(void *)(a1 + 2192) = 0;
  *(void *)(a1 + 2216) = &unk_20E1710;
  *(void *)(a1 + 2256) = 0;
  *(void *)(a1 + 2232) = 0;
  *(void *)(a1 + 2224) = 0;
  *(void *)(a1 + 2240) = 0;
  *(void *)(a1 + 2264) = &unk_20E1710;
  *(void *)(a1 + 2304) = 0;
  *(void *)(a1 + 2280) = 0;
  *(void *)(a1 + 2272) = 0;
  *(void *)(a1 + 2288) = 0;
  *(void *)(a1 + 2312) = &unk_20E1710;
  *(void *)(a1 + 2352) = 0;
  *(void *)(a1 + 2328) = 0;
  *(void *)(a1 + 2320) = 0;
  *(void *)(a1 + 2336) = 0;
  *(void *)(a1 + 2360) = &unk_20E1710;
  *(void *)(a1 + 2400) = 0;
  *(void *)(a1 + 2376) = 0;
  *(void *)(a1 + 2368) = 0;
  *(void *)(a1 + 2384) = 0;
  *(void *)(a1 + 2408) = &unk_20E1710;
  *(void *)(a1 + 2424) = 0;
  *(void *)(a1 + 2416) = 0;
  *(void *)(a1 + 2432) = 0;
  *(void *)(a1 + 2496) = 0;
  *(_OWORD *)(a1 + 2480) = 0u;
  *(_OWORD *)(a1 + 2464) = 0u;
  *(_OWORD *)(a1 + 2448) = 0u;
  return a1;
}

void sub_2D2118(_Unwind_Exception *a1)
{
  sub_2D212C(v1);
  _Unwind_Resume(a1);
}

void *sub_2D212C(void *a1)
{
  unint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

BOOL sub_2D2174(uint64_t a1, void *a2, unint64_t **a3, char a4)
{
  *(unsigned char *)(a1 + 8) = a4;
  uint64_t v7 = (char **)(a1 + 1688);
  sub_2D2670(a1 + 1688);
  sub_2D2718(a1, a2);
  char v8 = *(char **)(a1 + 152);
  uint64_t v9 = *(uint64_t **)(a1 + 160);
  uint64_t v10 = v8;
  if (*v8 <= -2)
  {
    do
    {
      unint64_t v11 = (__clz(__rbit64(((*v10 >> 7) & ~*v10 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      uint64_t v10 = (void *)((char *)v10 + v11);
      v9 += 4 * v11;
    }
    while (*(char *)v10 < -1);
  }
  uint64_t v12 = &v8[*(void *)(a1 + 176)];
  unint64_t v13 = (char **)(a1 + 152);
  if (v10 == (void *)v12)
  {
    unint64_t v13 = (char **)(a1 + 200);
    uint64_t v22 = 1;
    uint64_t v23 = a1 + 152;
    do
    {
      uint64_t v9 = *(uint64_t **)(v23 + 56);
      uint64_t v10 = *v13;
      if (**v13 <= -2)
      {
        do
        {
          unint64_t v24 = (__clz(__rbit64(((*v10 >> 7) & ~*v10 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          uint64_t v10 = (void *)((char *)v10 + v24);
          v9 += 4 * v24;
        }
        while (*(char *)v10 < -1);
      }
      uint64_t v12 = &(*v13)[*(void *)(v23 + 72)];
      if (v10 != (void *)v12) {
        goto LABEL_4;
      }
      uint64_t v23 = a1 + 152 + 48 * v22++;
      unint64_t v13 = (char **)(v23 + 48);
    }
    while (v22 != 16);
LABEL_24:
    size_t v26 = *a3;
    size_t v25 = a3[1];
    while (v26 != v25)
    {
      unint64_t v52 = *v26;
      sub_2D6A20(a1 + 152, &v52, v53);
      if (!v53[0])
      {
        sub_2D2F20(a1, v52);
        BOOL result = sub_2D3718((uint64_t *)a1, v52);
        if (!result) {
          return result;
        }
      }
      ++v26;
    }
    size_t v27 = *(char **)(a1 + 1688);
    size_t v28 = *(char **)(a1 + 1696);
    if (*v27 > -2)
    {
      BOOL v29 = *(void **)(a1 + 1688);
      uint64_t v48 = *(void *)(a1 + 1712);
      unint64_t v31 = &v27[v48];
      if (v27 != &v27[v48])
      {
LABEL_34:
        unint64_t v32 = v7;
LABEL_35:
        long long v33 = (char **)(a1 + 2456);
        do
        {
          while (1)
          {
            char v34 = (int *)*((void *)v28 + 1);
            unsigned int v35 = (int *)*((void *)v28 + 2);
            unint64_t v36 = 126 - 2 * __clz(v35 - v34);
            if (v35 == v34) {
              uint64_t v37 = 0;
            }
            else {
              uint64_t v37 = v36;
            }
            sub_2D6BA8(v34, v35, v37, 1);
            BOOL v38 = (int *)*((void *)v28 + 4);
            uint64_t v39 = (int *)*((void *)v28 + 5);
            unint64_t v40 = 126 - 2 * __clz(v39 - v38);
            if (v39 == v38) {
              uint64_t v41 = 0;
            }
            else {
              uint64_t v41 = v40;
            }
            sub_2D6BA8(v38, v39, v41, 1);
            int v42 = *((char *)v29 + 1);
            BOOL v29 = (void *)((char *)v29 + 1);
            v28 += 104;
            if (v42 <= -2)
            {
              do
              {
                unint64_t v43 = (__clz(__rbit64(((*v29 >> 7) & ~*v29 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                BOOL v29 = (void *)((char *)v29 + v43);
                v28 += 104 * v43;
              }
              while (*(char *)v29 < -1);
            }
            if (v29 == (void *)v31) {
              break;
            }
            if (!v32) {
              return 1;
            }
          }
          uint64_t v44 = v32 + 6;
          if (v32 + 6 == v33) {
            break;
          }
          while (1)
          {
            uint64_t v45 = v44;
            unint64_t v46 = v32[6];
            size_t v28 = v32[7];
            BOOL v29 = v46;
            if (*v46 <= -2)
            {
              do
              {
                unint64_t v47 = (__clz(__rbit64(((*v29 >> 7) & ~*v29 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                BOOL v29 = (void *)((char *)v29 + v47);
                v28 += 104 * v47;
              }
              while (*(char *)v29 < -1);
            }
            unint64_t v31 = &v32[9][(void)v46];
            if (v29 != (void *)v31) {
              break;
            }
            uint64_t v44 = v45 + 6;
            unint64_t v32 = v45;
            if (v45 + 6 == v33) {
              return 1;
            }
          }
          unint64_t v32 = v45;
        }
        while (v45);
        return 1;
      }
    }
    else
    {
      BOOL v29 = *(void **)(a1 + 1688);
      do
      {
        unint64_t v30 = (__clz(__rbit64(((*v29 >> 7) & ~*v29 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        BOOL v29 = (void *)((char *)v29 + v30);
        v28 += 104 * v30;
      }
      while (*(char *)v29 < -1);
      unint64_t v31 = &v27[*(void *)(a1 + 1712)];
      if (v29 != (void *)v31) {
        goto LABEL_34;
      }
    }
    unint64_t v32 = (char **)(a1 + 1736);
    uint64_t v49 = 1;
    unint64_t v50 = v7;
    while (1)
    {
      size_t v28 = v50[7];
      BOOL v29 = *v32;
      if (**v32 <= -2)
      {
        do
        {
          unint64_t v51 = (__clz(__rbit64(((*v29 >> 7) & ~*v29 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          BOOL v29 = (void *)((char *)v29 + v51);
          v28 += 104 * v51;
        }
        while (*(char *)v29 < -1);
      }
      unint64_t v31 = &v50[9][(void)*v32];
      if (v29 != (void *)v31) {
        break;
      }
      unint64_t v50 = &v7[6 * v49++];
      unint64_t v32 = v50 + 6;
      if (v49 == 16) {
        return 1;
      }
    }
    goto LABEL_35;
  }
LABEL_4:
  unint64_t v14 = (char **)(a1 + 920);
  while (1)
  {
    sub_2D2F20(a1, *v9);
    BOOL result = sub_2D3718((uint64_t *)a1, *v9);
    if (!result) {
      return result;
    }
    int v16 = *((char *)v10 + 1);
    uint64_t v10 = (void *)((char *)v10 + 1);
    v9 += 4;
    if (v16 <= -2)
    {
      do
      {
        unint64_t v17 = (__clz(__rbit64(((*v10 >> 7) & ~*v10 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        uint64_t v10 = (void *)((char *)v10 + v17);
        v9 += 4 * v17;
      }
      while (*(char *)v10 < -1);
    }
    if (v10 == (void *)v12)
    {
      BOOL v18 = v13 + 6;
      if (v13 + 6 == v14) {
        goto LABEL_24;
      }
      while (1)
      {
        int64_t v19 = v18;
        unint64_t v20 = v13[6];
        uint64_t v9 = (uint64_t *)v13[7];
        uint64_t v10 = v20;
        if (*v20 <= -2)
        {
          do
          {
            unint64_t v21 = (__clz(__rbit64(((*v10 >> 7) & ~*v10 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            uint64_t v10 = (void *)((char *)v10 + v21);
            v9 += 4 * v21;
          }
          while (*(char *)v10 < -1);
        }
        uint64_t v12 = &v13[9][(void)v20];
        if (v10 != (void *)v12) {
          break;
        }
        BOOL v18 = v19 + 6;
        unint64_t v13 = v19;
        if (v19 + 6 == v14) {
          goto LABEL_24;
        }
      }
      unint64_t v13 = v19;
      if (!v19) {
        goto LABEL_24;
      }
    }
    else if (!v13)
    {
      goto LABEL_24;
    }
  }
}

void sub_2D2670(uint64_t a1)
{
  sub_2D68F0(a1);
  sub_2D68F0(a1 + 48);
  sub_2D68F0(a1 + 96);
  sub_2D68F0(a1 + 144);
  sub_2D68F0(a1 + 192);
  sub_2D68F0(a1 + 240);
  sub_2D68F0(a1 + 288);
  sub_2D68F0(a1 + 336);
  sub_2D68F0(a1 + 384);
  sub_2D68F0(a1 + 432);
  sub_2D68F0(a1 + 480);
  sub_2D68F0(a1 + 528);
  sub_2D68F0(a1 + 576);
  sub_2D68F0(a1 + 624);
  sub_2D68F0(a1 + 672);

  sub_2D68F0(a1 + 720);
}

void sub_2D2718(uint64_t a1, void *a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = a1;
  *(void *)(a1 + 72) = a2;
  uint64_t v4 = (char **)(a1 + 152);
  sub_2D49A4(a1 + 152);
  uint64_t v5 = (char **)(v3 + 920);
  sub_2D49A4(v3 + 920);
  unint64_t v6 = v2[1] - *v2;
  if ((v6 & 0x1FFFFFFFE0) != 0)
  {
    uint64_t v7 = 0;
    uint64_t v108 = (v6 >> 5);
    uint64_t v109 = v3;
    uint64_t v110 = v4;
    while (1)
    {
      uint64_t v8 = *v2 + 32 * v7;
      if ((*(_DWORD *)(v8 + 4) >> *(unsigned char *)(v3 + 8)))
      {
        unint64_t v9 = *(void *)(v8 + 16) - *(void *)(v8 + 8);
        if ((v9 & 0x7FFFFFFF8) != 0) {
          break;
        }
      }
LABEL_3:
      ++v7;
      uint64_t v3 = v109;
      if (v7 == v108) {
        goto LABEL_69;
      }
    }
    uint64_t v10 = 0;
    uint64_t v111 = v7;
    uint64_t v112 = (v9 >> 3);
    while (1)
    {
      unint64_t v12 = *(void *)(*(void *)(*v2 + 32 * v7 + 8) + 8 * v10);
      unint64_t v13 = (v12 >> 16) & 0xFFFF0000 | (v12 << 32);
      BOOL v14 = (v12 & 0xFF000000000000) == 0;
      unint64_t v15 = ((0x2127599BF4325C37 * ((v13 | v14) ^ (v13 >> 23))) ^ ~((0x2127599BF4325C37 * ((v13 | v14) ^ (v13 >> 23))) >> 47))
          + (((0x2127599BF4325C37 * ((v13 | v14) ^ (v13 >> 23))) ^ ((0x2127599BF4325C37 * ((v13 | v14) ^ (v13 >> 23))) >> 47)) << 21);
      unint64_t v16 = 21 * ((265 * (v15 ^ (v15 >> 24))) ^ ((265 * (v15 ^ (v15 >> 24))) >> 14));
      unint64_t v17 = 2147483649u * (v16 ^ (v16 >> 28));
      unsigned int v18 = ((((unsigned __int16)(v16 ^ (v16 >> 28)) >> 8) ^ ((-2147483647
                                                                              * (v16 ^ (v16 >> 28))) >> 16)) ^ ((-2147483647 * (v16 ^ (v16 >> 28))) >> 24)) & 0xF;
      unint64_t v19 = v17 >> 7;
      uint64_t v20 = 0x101010101010101 * ((v16 ^ (v16 >> 28)) & 0x7F);
      uint64_t v21 = 0;
      if (v10)
      {
        uint64_t v22 = (uint64_t *)&v5[6 * v18];
        uint64_t v23 = v22[3];
        while (1)
        {
          unint64_t v24 = v19 & v23;
          uint64_t v25 = *(void *)(*v22 + v24);
          unint64_t v26 = ((v25 ^ v20) - 0x101010101010101) & ~(v25 ^ v20) & 0x8080808080808080;
          if (v26) {
            break;
          }
LABEL_16:
          if ((v25 & (~v25 << 6) & 0x8080808080808080) != 0)
          {
            unint64_t v28 = sub_2D7ECC(v22, v17);
            BOOL v38 = (unint64_t *)(v22[1] + 32 * v28);
            v38[2] = 0;
            v38[3] = 0;
            *BOOL v38 = v12;
            v38[1] = 0;
            uint64_t v27 = v22[1];
            goto LABEL_27;
          }
          v21 += 8;
          unint64_t v19 = v21 + v24;
        }
        uint64_t v27 = v22[1];
        while (1)
        {
          unint64_t v28 = (v24 + (__clz(__rbit64(v26)) >> 3)) & v23;
          unint64_t v29 = v27 + 32 * v28;
          if (__PAIR64__(*(unsigned __int16 *)(v29 + 4), *(_DWORD *)v29) == __PAIR64__(WORD2(v12), v12)
            && (HIWORD(v12) & 1) != (*(unsigned char *)(v29 + 6) == 0))
          {
            break;
          }
          v26 &= v26 - 1;
          if (!v26) {
            goto LABEL_16;
          }
        }
LABEL_27:
        unint64_t v39 = v27 + 32 * v28;
        unint64_t v40 = v39 + 8;
        int v42 = *(char **)(v39 + 16);
        unint64_t v41 = *(void *)(v39 + 24);
        if ((unint64_t)v42 >= v41)
        {
          unint64_t v43 = *(char **)v40;
          uint64_t v44 = (uint64_t)&v42[-*(void *)v40];
          uint64_t v45 = v44 >> 3;
          unint64_t v46 = (v44 >> 3) + 1;
          if (v46 >> 61) {
            sub_2E00();
          }
          uint64_t v47 = v41 - (void)v43;
          if (v47 >> 2 > v46) {
            unint64_t v46 = v47 >> 2;
          }
          BOOL v48 = (unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v48) {
            unint64_t v49 = v46;
          }
          if (v49 >> 61) {
LABEL_108:
          }
            sub_188D718();
          uint64_t v50 = 8 * v49;
          unint64_t v51 = operator new(8 * v49);
          unint64_t v52 = &v51[8 * v45];
          *unint64_t v52 = v111;
          v52[1] = v10;
          if (v42 == v43)
          {
            uint64_t v54 = &v51[8 * v45];
          }
          else
          {
            unint64_t v53 = v42 - 8 - v43;
            if (v53 < 0x58)
            {
              uint64_t v54 = &v51[8 * v45];
              goto LABEL_55;
            }
            uint64_t v54 = &v51[8 * v45];
            if ((unint64_t)(&v42[-v44] - v51) < 0x20) {
              goto LABEL_113;
            }
            uint64_t v69 = (v53 >> 3) + 1;
            uint64_t v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v71 = &v42[-v70];
            uint64_t v54 = (char *)&v52[v70 / 0xFFFFFFFFFFFFFFFCLL];
            unint64_t v72 = &v51[8 * v45 - 16];
            uint64_t v73 = v42 - 16;
            uint64_t v74 = v69 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v75 = *(_OWORD *)v73;
              *(v72 - 1) = *((_OWORD *)v73 - 1);
              *unint64_t v72 = v75;
              v72 -= 2;
              v73 -= 32;
              v74 -= 4;
            }
            while (v74);
            int v42 = v71;
            if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_113:
              do
              {
LABEL_55:
                uint64_t v76 = *((void *)v42 - 1);
                v42 -= 8;
                *((void *)v54 - 1) = v76;
                v54 -= 8;
              }
              while (v42 != v43);
            }
          }
          uint64_t v11 = (uint64_t)(v52 + 2);
          *(void *)unint64_t v40 = v54;
          *(void *)(v40 + 8) = v52 + 2;
          *(void *)(v40 + 16) = &v51[v50];
          if (v43) {
            operator delete(v43);
          }
LABEL_68:
          uint64_t v7 = v111;
          goto LABEL_8;
        }
        *(_DWORD *)int v42 = v7;
        *((_DWORD *)v42 + 1) = v10;
        uint64_t v11 = (uint64_t)(v42 + 8);
      }
      else
      {
        unint64_t v30 = (uint64_t *)&v4[6 * v18];
        uint64_t v31 = v30[3];
        while (1)
        {
          unint64_t v32 = v19 & v31;
          uint64_t v33 = *(void *)(*v30 + v32);
          unint64_t v34 = ((v33 ^ v20) - 0x101010101010101) & ~(v33 ^ v20) & 0x8080808080808080;
          if (v34) {
            break;
          }
LABEL_24:
          if ((v33 & (~v33 << 6) & 0x8080808080808080) != 0)
          {
            unint64_t v36 = sub_2D7ECC(v30, v17);
            uint64_t v55 = (unint64_t *)(v30[1] + 32 * v36);
            v55[2] = 0;
            v55[3] = 0;
            *uint64_t v55 = v12;
            v55[1] = 0;
            uint64_t v35 = v30[1];
            goto LABEL_38;
          }
          v21 += 8;
          unint64_t v19 = v21 + v32;
        }
        uint64_t v35 = v30[1];
        while (1)
        {
          unint64_t v36 = (v32 + (__clz(__rbit64(v34)) >> 3)) & v31;
          unint64_t v37 = v35 + 32 * v36;
          if (__PAIR64__(*(unsigned __int16 *)(v37 + 4), *(_DWORD *)v37) == __PAIR64__(WORD2(v12), v12)
            && (HIWORD(v12) & 1) != (*(unsigned char *)(v37 + 6) == 0))
          {
            break;
          }
          v34 &= v34 - 1;
          if (!v34) {
            goto LABEL_24;
          }
        }
LABEL_38:
        unint64_t v56 = v35 + 32 * v36;
        unint64_t v40 = v56 + 8;
        unint64_t v58 = *(char **)(v56 + 16);
        unint64_t v57 = *(void *)(v56 + 24);
        if ((unint64_t)v58 >= v57)
        {
          uint64_t v59 = v2;
          uint64_t v60 = v5;
          uint64_t v61 = *(char **)v40;
          uint64_t v62 = (uint64_t)&v58[-*(void *)v40];
          uint64_t v63 = v62 >> 2;
          unint64_t v64 = (v62 >> 2) + 1;
          if (v64 >> 62) {
            sub_2E00();
          }
          uint64_t v65 = v57 - (void)v61;
          if (v65 >> 1 > v64) {
            unint64_t v64 = v65 >> 1;
          }
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v66 = v64;
          }
          if (v66)
          {
            if (v66 >> 62) {
              goto LABEL_108;
            }
            unint64_t v67 = operator new(4 * v66);
            uint64_t v68 = &v67[4 * v63];
            *uint64_t v68 = v111;
            uint64_t v11 = (uint64_t)(v68 + 1);
            if (v58 == v61)
            {
LABEL_65:
              *(void *)unint64_t v40 = v68;
              *(void *)(v40 + 8) = v11;
              *(void *)(v40 + 16) = &v67[4 * v66];
              if (v61) {
                operator delete(v61);
              }
              uint64_t v5 = v60;
              unint64_t v2 = v59;
              uint64_t v4 = v110;
              goto LABEL_68;
            }
          }
          else
          {
            unint64_t v67 = 0;
            uint64_t v68 = (_DWORD *)(4 * v63);
            *(_DWORD *)(4 * v63) = v111;
            uint64_t v11 = 4 * v63 + 4;
            if (v58 == v61) {
              goto LABEL_65;
            }
          }
          unint64_t v77 = v58 - 4 - v61;
          if (v77 < 0x2C) {
            goto LABEL_114;
          }
          if ((unint64_t)(v58 - v67 - v62) < 0x20) {
            goto LABEL_114;
          }
          uint64_t v78 = (v77 >> 2) + 1;
          uint64_t v79 = 4 * (v78 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v80 = &v58[-v79];
          uint64_t v68 = (_DWORD *)((char *)v68 - v79);
          uint64_t v81 = &v67[4 * v63 - 16];
          unint64_t v82 = v58 - 16;
          uint64_t v83 = v78 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v84 = *(_OWORD *)v82;
            *(v81 - 1) = *((_OWORD *)v82 - 1);
            *uint64_t v81 = v84;
            v81 -= 2;
            v82 -= 32;
            v83 -= 8;
          }
          while (v83);
          unint64_t v58 = v80;
          if (v78 != (v78 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_114:
            do
            {
              int v85 = *((_DWORD *)v58 - 1);
              v58 -= 4;
              *--uint64_t v68 = v85;
            }
            while (v58 != v61);
          }
          goto LABEL_65;
        }
        *(_DWORD *)unint64_t v58 = v7;
        uint64_t v11 = (uint64_t)(v58 + 4);
      }
LABEL_8:
      *(void *)(v40 + 8) = v11;
      if (++v10 == v112) {
        goto LABEL_3;
      }
    }
  }
LABEL_69:
  uint64_t v87 = *(char **)(v3 + 152);
  uint64_t v86 = *(char **)(v3 + 160);
  if (*v87 <= -2)
  {
    unint64_t v88 = *(char **)(v3 + 152);
    do
    {
      unint64_t v89 = (__clz(__rbit64(((*(void *)v88 >> 7) & ~*(void *)v88 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v88 += v89;
      v86 += 32 * v89;
    }
    while (*v88 < -1);
    uint64_t v90 = &v87[*(void *)(v3 + 176)];
    if (v88 != v90) {
      goto LABEL_73;
    }
LABEL_99:
    uint64_t v91 = (char **)(v3 + 200);
    uint64_t v104 = 1;
    long long v105 = v4;
    while (1)
    {
      uint64_t v106 = *v91;
      uint64_t v86 = v105[7];
      if (**v91 > -2)
      {
        unint64_t v88 = *v91;
        uint64_t v90 = &v105[9][(void)v106];
        if (v106 != v90) {
          goto LABEL_74;
        }
      }
      else
      {
        unint64_t v88 = *v91;
        do
        {
          unint64_t v107 = (__clz(__rbit64(((*(void *)v88 >> 7) & ~*(void *)v88 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v88 += v107;
          v86 += 32 * v107;
        }
        while (*v88 < -1);
        uint64_t v90 = &v105[9][(void)v106];
        if (v88 != v90) {
          goto LABEL_74;
        }
      }
      long long v105 = &v4[6 * v104++];
      uint64_t v91 = v105 + 6;
      if (v104 == 16) {
        return;
      }
    }
  }
  unint64_t v88 = *(char **)(v3 + 152);
  uint64_t v103 = *(void *)(v3 + 176);
  uint64_t v90 = &v87[v103];
  if (v87 == &v87[v103]) {
    goto LABEL_99;
  }
LABEL_73:
  uint64_t v91 = v4;
LABEL_74:
  uint64_t v92 = *v2;
LABEL_75:
  while (2)
  {
    uint64_t v93 = (_DWORD *)*((void *)v86 + 1);
    uint64_t v94 = (_DWORD *)*((void *)v86 + 2);
    while (v93 != v94)
    {
LABEL_78:
      uint64_t v95 = *v93;
      if (*(unsigned char *)(v92 + 32 * v95) != 2)
      {
        while (1)
        {
          if (--v94 == v93) {
            goto LABEL_82;
          }
          uint64_t v96 = *v94;
          if (*(unsigned char *)(v92 + 32 * v96) == 2)
          {
            *v93++ = v96;
            *uint64_t v94 = v95;
            if (v94 != v93) {
              goto LABEL_78;
            }
            goto LABEL_82;
          }
        }
      }
      ++v93;
    }
LABEL_82:
    int v97 = *++v88;
    v86 += 32;
    if (v97 <= -2)
    {
      do
      {
        unint64_t v98 = (__clz(__rbit64(((*(void *)v88 >> 7) & ~*(void *)v88 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v88 += v98;
        v86 += 32 * v98;
      }
      while (*v88 < -1);
    }
    if (v88 != v90)
    {
      if (!v91) {
        return;
      }
      continue;
    }
    break;
  }
  unint64_t v99 = v91 + 6;
  if (v91 + 6 != v5)
  {
    do
    {
      uint64_t v100 = v99;
      uint64_t v101 = v91[6];
      uint64_t v86 = v91[7];
      if (*v101 > -2)
      {
        unint64_t v88 = v91[6];
        uint64_t v90 = &v91[9][(void)v101];
        if (v88 != v90) {
          goto LABEL_96;
        }
      }
      else
      {
        unint64_t v88 = v91[6];
        do
        {
          unint64_t v102 = (__clz(__rbit64(((*(void *)v88 >> 7) & ~*(void *)v88 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v88 += v102;
          v86 += 32 * v102;
        }
        while (*v88 < -1);
        uint64_t v90 = &v91[9][(void)v101];
        if (v88 != v90)
        {
LABEL_96:
          uint64_t v91 = v100;
          if (!v100) {
            return;
          }
          goto LABEL_75;
        }
      }
      unint64_t v99 = v100 + 6;
      uint64_t v91 = v100;
    }
    while (v100 + 6 != v5);
  }
}

void sub_2D2F20(uint64_t a1, uint64_t a2)
{
  uint64_t v80 = a2;
  uint64_t v3 = *(void *)(a1 + 2464);
  uint64_t v4 = *(void *)(a1 + 2456);
  while (v3 != v4)
  {
    uint64_t v5 = *(void **)(v3 - 24);
    if (v5)
    {
      *(void *)(v3 - 16) = v5;
      operator delete(v5);
    }
    v3 -= 32;
  }
  *(void *)(a1 + 2464) = v4;
  sub_2D6A20(a1 + 152, (unint64_t *)&v80, &v81);
  if (!v81
    || (sub_2D7D20(a1 + 152, (unint64_t *)&v80, (uint64_t)&v81),
        unint64_t v6 = *(unsigned int **)(v83 + 8),
        *(unsigned char *)(**(void **)(a1 + 72) + 32 * *v6) != 2))
  {
    unsigned int v18 = (uint64_t *)(a1 + 16);
    *(void *)(a1 + 24) = *(void *)(a1 + 16);
    *(void *)(a1 + 40) = 0;
    LODWORD(v81) = 0;
    LODWORD(v76) = 0;
    int v79 = 0;
    BOOL v78 = sub_2DD794(a1, v80);
    BOOL v19 = sub_2DD800(a1, v80);
    BOOL v77 = v19;
    unint64_t v20 = *(void *)(a1 + 24);
    if (v20 >= *(void *)(a1 + 32))
    {
      uint64_t v21 = sub_2D86A4((uint64_t *)(a1 + 16), &v80, (__int16 *)&v81, word_20E1700, (unsigned __int8 *)&v76, (unsigned __int8 *)&v79, (unsigned __int8 *)&v78, (unsigned __int8 *)&v77);
    }
    else
    {
      sub_2DCEB0(*(void *)(a1 + 24), v80, v81, 0x1FFF, v76, v79, v78, v19);
      uint64_t v21 = v20 + 12;
      *(void *)(a1 + 24) = v20 + 12;
    }
    *(void *)(a1 + 24) = v21;
    uint64_t v22 = *(void *)(a1 + 16);
    uint64_t v23 = *(void *)(a1 + 40);
    if (0xAAAAAAAAAAAAAAABLL * ((v21 - v22) >> 2) == v23) {
      return;
    }
    unint64_t v72 = (char **)(a1 + 16);
    while (1)
    {
      uint64_t v24 = v22 + 12 * v23;
      uint64_t v25 = *(void *)v24;
      LODWORD(v24) = *(_DWORD *)(v24 + 8);
      LODWORD(__p[0]) = v24;
      uint64_t v81 = v25;
      *(void *)(a1 + 40) = v23 + 1;
      if ((~v24 & 0xFFF) == 0) {
        goto LABEL_28;
      }
      if (sub_2DD0AC((void *)a1, &v81)) {
        goto LABEL_28;
      }
      int v26 = sub_2D4D50(a1, (unint64_t *)&v81);
      if (v26 == 2) {
        goto LABEL_28;
      }
      if (v81 == v80 && WORD2(v81) == WORD2(v80))
      {
        int v27 = ((v80 & 0x1000000000000) == 0) ^ (BYTE6(v81) == 0);
        if (v26) {
          goto LABEL_38;
        }
      }
      else
      {
        int v27 = 1;
        if (v26) {
          goto LABEL_38;
        }
      }
      if (v27)
      {
        sub_2D5028(a1);
        goto LABEL_28;
      }
LABEL_38:
      sub_2DC860(a1 + 80, v81, *(unsigned char *)(a1 + 8), (uint64_t *)(a1 + 2480));
      unint64_t v28 = *(uint64_t ***)(a1 + 2480);
      uint64_t v71 = *(uint64_t ***)(a1 + 2488);
      if (v28 != v71)
      {
        __int16 v70 = v23;
        while (1)
        {
          int v74 = (uint64_t)__p[0] & 0xFFF;
          int v29 = (LODWORD(__p[0]) >> 25) & 3;
          int v30 = sub_2DD178(a1, v81);
          int v31 = (LODWORD(__p[0]) >> 27) & 7;
          int v32 = (LODWORD(__p[0]) >> 30) & 1;
          int v75 = LODWORD(__p[0]) >> 31;
          uint64_t v33 = v28;
          unint64_t v34 = *v28;
          uint64_t v73 = v33;
          uint64_t v35 = v33[1];
          unint64_t v36 = v34 + 1;
          if (v34 + 1 != v35 - 1) {
            break;
          }
LABEL_71:
          uint64_t v60 = (int *)sub_2D5D58(*(void *)a1, *(unsigned int *)v36 | ((unint64_t)*((unsigned __int16 *)v35 - 2) << 32));
          uint64_t v61 = (unsigned __int16 *)((char *)v60 - *v60);
          if (*v61 >= 9u && (uint64_t v62 = v61[4]) != 0)
          {
            unsigned int v63 = *(int *)((char *)v60 + v62);
            int v64 = sub_2DD178(a1, *(v73[1] - 1));
            if (v64 != 5) {
              goto LABEL_76;
            }
          }
          else
          {
            unsigned int v63 = 0;
            int v64 = sub_2DD178(a1, *(v73[1] - 1));
            if (v64 != 5)
            {
LABEL_76:
              int v65 = v64;
              if (v63 % 0x64 <= 0x31) {
                __int16 v66 = v63 / 0x64 + v74;
              }
              else {
                __int16 v66 = v63 / 0x64 + v74 + 1;
              }
              unsigned __int8 v67 = v31 + sub_2DD38C((uint64_t *)a1, *(v73[1] - 2), *(v73[1] - 1));
              if (v30 != v65) {
                LOBYTE(v29) = v29 + 1;
              }
              char v68 = v32 | sub_2DD794(a1, *(v73[1] - 1));
              char v69 = v75 | sub_2DD800(a1, *(v73[1] - 1));
              sub_2DCEB0((uint64_t)&v76, *(v73[1] - 1), v66, v23, v29, v67, v68 != 0, v69 != 0);
              if ((sub_2DCF24((void *)a1, &v76) & 1) == 0) {
                sub_30C0C(v72, &v76);
              }
            }
          }
          unint64_t v28 = v73 + 3;
          unsigned int v18 = (uint64_t *)(a1 + 16);
          LOWORD(v23) = v70;
          if (v73 + 3 == v71) {
            goto LABEL_28;
          }
        }
        while (2)
        {
          unint64_t v37 = v34;
          int v38 = v30;
          unint64_t v34 = v36;
          unint64_t v39 = (int *)sub_2D5D58(*(void *)a1, *((unsigned int *)v37 + 2) | ((unint64_t)*((unsigned __int16 *)v37 + 6) << 32));
          unint64_t v40 = (unsigned __int16 *)((char *)v39 - *v39);
          if (*v40 < 9u)
          {
            LODWORD(v41) = 0;
            int v42 = v74;
          }
          else
          {
            uint64_t v41 = v40[4];
            int v42 = v74;
            if (v41) {
              LODWORD(v41) = *(int *)((char *)v39 + v41);
            }
          }
          BOOL v43 = v41 % 0x64 > 0x31;
          int v44 = v41 / 0x64 + v42;
          if (v43) {
            ++v44;
          }
          int v74 = v44;
          int v30 = sub_2DD178(a1, *v34);
          if (v38 != v30) {
            LOBYTE(v29) = v29 + 1;
          }
          v31 += sub_2DD38C((uint64_t *)a1, *v37, *v34);
          v32 |= sub_2DD794(a1, *v34);
          char v45 = v75 | sub_2DD800(a1, *v34);
          unint64_t v47 = *(void *)(a1 + 24);
          unint64_t v46 = *(void *)(a1 + 32);
          LOBYTE(v75) = v45;
          if (v47 < v46)
          {
            sub_2DCEB0(v47, *v34, 4095, v23, v29, v31, v32 != 0, v45 != 0);
            uint64_t v23 = v47 + 12;
            *(void *)(a1 + 24) = v47 + 12;
            goto LABEL_45;
          }
          uint64_t v48 = *v18;
          unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - *v18) >> 2);
          unint64_t v50 = v49 + 1;
          if (v49 + 1 > 0x1555555555555555) {
            sub_2E00();
          }
          unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - v48) >> 2);
          if (2 * v51 > v50) {
            unint64_t v50 = 2 * v51;
          }
          if (v51 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v52 = 0x1555555555555555;
          }
          else {
            unint64_t v52 = v50;
          }
          if (v52)
          {
            if (v52 > 0x1555555555555555) {
              sub_188D718();
            }
            unint64_t v53 = (char *)operator new(12 * v52);
          }
          else
          {
            unint64_t v53 = 0;
          }
          uint64_t v54 = sub_2DCEB0((uint64_t)&v53[12 * v49], *v34, 4095, v23, v29, v31, v32 != 0, v75 != 0);
          unint64_t v56 = *(char **)(a1 + 16);
          uint64_t v55 = *(char **)(a1 + 24);
          uint64_t v57 = v54;
          if (v55 == v56)
          {
            unsigned int v18 = (uint64_t *)(a1 + 16);
            uint64_t v23 = v54 + 12;
            *(void *)(a1 + 16) = v54;
            *(void *)(a1 + 24) = v54 + 12;
            *(void *)(a1 + 32) = &v53[12 * v52];
            if (!v55) {
              goto LABEL_45;
            }
          }
          else
          {
            unsigned int v18 = (uint64_t *)(a1 + 16);
            do
            {
              uint64_t v58 = *(void *)(v55 - 12);
              v55 -= 12;
              int v59 = *((_DWORD *)v55 + 2);
              *(void *)(v57 - 12) = v58;
              v57 -= 12;
              *(_DWORD *)(v57 + 8) = v59;
            }
            while (v55 != v56);
            uint64_t v55 = *v72;
            uint64_t v23 = v54 + 12;
            *(void *)(a1 + 16) = v57;
            *(void *)(a1 + 24) = v54 + 12;
            *(void *)(a1 + 32) = &v53[12 * v52];
            if (!v55)
            {
LABEL_45:
              *(void *)(a1 + 24) = v23;
              LODWORD(v23) = -1 - 21845 * ((v23 - *(_DWORD *)(a1 + 16)) >> 2);
              unint64_t v36 = v34 + 1;
              uint64_t v35 = v73[1];
              if (v34 + 1 == v35 - 1) {
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        operator delete(v55);
        goto LABEL_45;
      }
LABEL_28:
      uint64_t v22 = *(void *)(a1 + 16);
      uint64_t v23 = *(void *)(a1 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 24) - v22) >> 2) == v23) {
        return;
      }
    }
  }
  for (uint64_t i = *(unsigned int **)(v83 + 16); v6 != i; ++v6)
  {
    uint64_t v8 = *v6;
    uint64_t v9 = **(void **)(a1 + 72);
    if (*(unsigned char *)(v9 + 32 * v8) != 2) {
      break;
    }
    uint64_t v10 = v9 + 32 * v8;
    unint64_t v12 = *(uint64_t **)(v10 + 8);
    unint64_t v13 = *(uint64_t **)(v10 + 16);
    uint64_t v11 = (char **)(v10 + 8);
    if (v12 == v13)
    {
LABEL_16:
      LODWORD(v81) = 0;
      __p[1] = 0;
      uint64_t v83 = 0;
      __p[0] = 0;
      if (__p != (void **)v11) {
        sub_2D8554(__p, *v11, v11[1], (v11[1] - *v11) >> 3);
      }
      int v14 = sub_2D4A4C(a1, (uint64_t)&v81);
      LODWORD(v81) = v14;
      unint64_t v15 = *(void *)(a1 + 2464);
      if (v15 < *(void *)(a1 + 2472))
      {
        *(_DWORD *)unint64_t v15 = v14;
        *(void *)(v15 + 16) = 0;
        *(void *)(v15 + 24) = 0;
        *(void *)(v15 + 8) = 0;
        *(_OWORD *)(v15 + 8) = *(_OWORD *)__p;
        *(void *)(v15 + 24) = v83;
        *(void *)(a1 + 2464) = v15 + 32;
      }
      else
      {
        unint64_t v16 = sub_38CE8((void **)(a1 + 2456), (uint64_t)&v81);
        unint64_t v17 = __p[0];
        *(void *)(a1 + 2464) = v16;
        if (v17)
        {
          __p[1] = v17;
          operator delete(v17);
        }
      }
    }
    else
    {
      while (sub_2DD178(a1, *v12) != 5)
      {
        if (++v12 == v13) {
          goto LABEL_16;
        }
      }
    }
  }
}

void sub_2D36D8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

void sub_2D36E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2D3710(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

BOOL sub_2D3718(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = a1;
  sub_2D51B4(a1, a2);
  uint64_t v3 = v2[307];
  uint64_t v190 = v2[308];
  if (v3 == v190) {
    return 1;
  }
  v196 = (char **)(v2 + 6);
  uint64_t v199 = (uint64_t)(v2 + 211);
  v192 = v2;
  while (1)
  {
    uint64_t v5 = *(uint64_t **)(v3 + 8);
    uint64_t v4 = *(uint64_t **)(v3 + 16);
    BOOL v6 = (char *)v4 - (char *)v5 == 16 && (*(_DWORD *)v3 & 0x14) == 0;
    if (!v6 && v5 != v4) {
      break;
    }
LABEL_3:
    v3 += 32;
    if (v3 == v190) {
      return 1;
    }
  }
  int v197 = (*(_DWORD *)v3 >> 3) & 2;
  uint64_t v194 = v3;
  while (1)
  {
    uint64_t v9 = (unint64_t *)v5++;
    if (v5 == v4)
    {
      LOBYTE(v198) = -1;
      if ((char *)v4 - (char *)v5 < 9) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v10 = v9[1];
      uint64_t v11 = *v2;
      unint64_t v12 = (unsigned int *)sub_2D5EC4(*v2, *v9 & 0xFFFFFFFFFFFFLL, (*v9 & 0xFF000000000000) == 0);
      sub_2D5904(v11, v12, 0, v196);
      uint64_t v13 = v2[6];
      uint64_t v14 = v2[7];
      uint64_t v15 = v13;
      if (v13 != v14)
      {
        while (__PAIR64__(*(unsigned __int16 *)(v15 + 4), *(_DWORD *)v15) != __PAIR64__(WORD2(v10), v10)
             || (HIWORD(v10) & 1) == (*(unsigned char *)(v15 + 6) == 0))
        {
          v15 += 8;
          if (v15 == v14)
          {
            uint64_t v15 = v2[7];
            break;
          }
        }
      }
      uint64_t v198 = (v15 - v13) >> 3;
      if ((uint64_t)(*(void *)(v3 + 16) - (void)v5) < 9)
      {
LABEL_23:
        __int16 v16 = 0;
        goto LABEL_36;
      }
    }
    uint64_t v17 = 0;
    unint64_t v18 = *v5;
    unint64_t v19 = ((unint64_t)*v5 >> 16) & 0xFFFF0000 | (*v5 << 32);
    BOOL v20 = (*v5 & 0xFF000000000000) == 0;
    unint64_t v21 = ((0x2127599BF4325C37 * ((v19 | v20) ^ (v19 >> 23))) ^ ~((0x2127599BF4325C37 * ((v19 | v20) ^ (v19 >> 23))) >> 47))
        + (((0x2127599BF4325C37 * ((v19 | v20) ^ (v19 >> 23))) ^ ((0x2127599BF4325C37 * ((v19 | v20) ^ (v19 >> 23))) >> 47)) << 21);
    unint64_t v22 = 21 * ((265 * (v21 ^ (v21 >> 24))) ^ ((265 * (v21 ^ (v21 >> 24))) >> 14));
    unint64_t v23 = 2147483649u * (v22 ^ (v22 >> 28));
    uint64_t v24 = (uint64_t *)(v199
                    + 48
                    * (((((unsigned __int16)(v22 ^ (v22 >> 28)) >> 8) ^ ((-2147483647
                                                                                         * (v22 ^ (v22 >> 28))) >> 16)) ^ ((-2147483647 * (v22 ^ (v22 >> 28))) >> 24)) & 0xF));
    unint64_t v25 = v23 >> 7;
    uint64_t v26 = v24[3];
    while (1)
    {
      unint64_t v27 = v25 & v26;
      uint64_t v28 = *(void *)(*v24 + v27);
      unint64_t v29 = ((v28 ^ (0x101010101010101 * (v23 & 0x7F))) - 0x101010101010101) & ~(v28 ^ (0x101010101010101
                                                                                          * (v23 & 0x7F))) & 0x8080808080808080;
      if (v29) {
        break;
      }
LABEL_32:
      if ((v28 & (~v28 << 6) & 0x8080808080808080) != 0)
      {
        unint64_t v31 = sub_2D8940(v24, v23);
        uint64_t v33 = v24[1] + 104 * v31;
        *(void *)uint64_t v33 = *v5;
        *(_OWORD *)(v33 + 8) = 0u;
        *(_OWORD *)(v33 + 24) = 0u;
        *(_OWORD *)(v33 + 40) = 0u;
        *(_OWORD *)(v33 + 56) = 0u;
        *(_OWORD *)(v33 + 72) = 0u;
        *(_OWORD *)(v33 + 88) = 0u;
        uint64_t v30 = v24[1];
        goto LABEL_35;
      }
      v17 += 8;
      unint64_t v25 = v17 + v27;
    }
    uint64_t v30 = v24[1];
    while (1)
    {
      unint64_t v31 = (v27 + (__clz(__rbit64(v29)) >> 3)) & v26;
      unint64_t v32 = v30 + 104 * v31;
      if (__PAIR64__(*(unsigned __int16 *)(v32 + 4), *(_DWORD *)v32) == __PAIR64__(WORD2(v18), v18)
        && (HIWORD(v18) & 1) != (*(unsigned char *)(v32 + 6) == 0))
      {
        break;
      }
      v29 &= v29 - 1;
      if (!v29) {
        goto LABEL_32;
      }
    }
LABEL_35:
    uint64_t v34 = (uint64_t)(*(void *)(v30 + 104 * v31 + 64) - *(void *)(v30 + 104 * v31 + 56)) >> 2;
    __int16 v16 = v34 + 1;
    if ((unint64_t)(v34 + 1) >= 0x10000) {
      break;
    }
LABEL_36:
    uint64_t v35 = *(unint64_t **)(v3 + 8);
    BOOL v36 = v9 == v35;
    if (v9 == v35) {
      uint64_t v37 = 0;
    }
    else {
      uint64_t v37 = -1;
    }
    int v38 = (uint64_t *)&v9[v37];
    if (v36)
    {
      char v45 = v9;
      LOBYTE(v46) = -1;
      if ((char *)v38 - (char *)v9 < 1) {
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v39 = *v38;
      uint64_t v40 = *v2;
      uint64_t v41 = (unsigned int *)sub_2D5EC4(*v2, *v38 & 0xFFFFFFFFFFFFLL, (*v38 & 0xFF000000000000) == 0);
      sub_2D5904(v40, v41, 0, v196);
      uint64_t v42 = v2[6];
      uint64_t v43 = v2[7];
      uint64_t v44 = v42;
      if (v42 != v43)
      {
        while (__PAIR64__(*(unsigned __int16 *)(v44 + 4), *(_DWORD *)v44) != __PAIR64__(WORD2(v39), v39)
             || ((v39 & 0x1000000000000) == 0) == (*(unsigned char *)(v44 + 6) == 0))
        {
          v44 += 8;
          if (v44 == v43)
          {
            uint64_t v44 = v2[7];
            break;
          }
        }
      }
      uint64_t v46 = (v44 - v42) >> 3;
      char v45 = *(unint64_t **)(v3 + 8);
      if ((char *)v38 - (char *)v45 < 1)
      {
LABEL_47:
        LOWORD(v47) = 0;
        if (v9 == v45) {
          goto LABEL_48;
        }
        goto LABEL_65;
      }
    }
    uint64_t v58 = 0;
    unint64_t v59 = *v38;
    unint64_t v60 = ((unint64_t)*v38 >> 16) & 0xFFFF0000 | (*v38 << 32);
    BOOL v61 = (*v38 & 0xFF000000000000) == 0;
    unint64_t v62 = ((0x2127599BF4325C37 * ((v60 | v61) ^ (v60 >> 23))) ^ ~((0x2127599BF4325C37 * ((v60 | v61) ^ (v60 >> 23))) >> 47))
        + (((0x2127599BF4325C37 * ((v60 | v61) ^ (v60 >> 23))) ^ ((0x2127599BF4325C37 * ((v60 | v61) ^ (v60 >> 23))) >> 47)) << 21);
    unint64_t v63 = 21 * ((265 * (v62 ^ (v62 >> 24))) ^ ((265 * (v62 ^ (v62 >> 24))) >> 14));
    unint64_t v64 = 2147483649u * (v63 ^ (v63 >> 28));
    int v65 = (uint64_t *)(v199
                    + 48
                    * (((((unsigned __int16)(v63 ^ (v63 >> 28)) >> 8) ^ ((-2147483647
                                                                                         * (v63 ^ (v63 >> 28))) >> 16)) ^ ((-2147483647 * (v63 ^ (v63 >> 28))) >> 24)) & 0xF));
    unint64_t v66 = v64 >> 7;
    uint64_t v67 = v65[3];
    while (1)
    {
      unint64_t v68 = v66 & v67;
      uint64_t v69 = *(void *)(*v65 + v68);
      unint64_t v70 = ((v69 ^ (0x101010101010101 * (v64 & 0x7F))) - 0x101010101010101) & ~(v69 ^ (0x101010101010101
                                                                                          * (v64 & 0x7F))) & 0x8080808080808080;
      if (v70) {
        break;
      }
LABEL_60:
      if ((v69 & (~v69 << 6) & 0x8080808080808080) != 0)
      {
        unint64_t v72 = sub_2D8940(v65, v64);
        uint64_t v74 = v65[1] + 104 * v72;
        *(void *)uint64_t v74 = *v38;
        *(_OWORD *)(v74 + 8) = 0u;
        *(_OWORD *)(v74 + 24) = 0u;
        *(_OWORD *)(v74 + 40) = 0u;
        *(_OWORD *)(v74 + 56) = 0u;
        *(_OWORD *)(v74 + 72) = 0u;
        *(_OWORD *)(v74 + 88) = 0u;
        uint64_t v71 = v65[1];
        goto LABEL_63;
      }
      v58 += 8;
      unint64_t v66 = v58 + v68;
    }
    uint64_t v71 = v65[1];
    while (1)
    {
      unint64_t v72 = (v68 + (__clz(__rbit64(v70)) >> 3)) & v67;
      unint64_t v73 = v71 + 104 * v72;
      if (__PAIR64__(*(unsigned __int16 *)(v73 + 4), *(_DWORD *)v73) == __PAIR64__(WORD2(v59), v59)
        && (HIWORD(v59) & 1) != (*(unsigned char *)(v73 + 6) == 0))
      {
        break;
      }
      v70 &= v70 - 1;
      if (!v70) {
        goto LABEL_60;
      }
    }
LABEL_63:
    uint64_t v75 = *(void *)(v71 + 104 * v72 + 88) - *(void *)(v71 + 104 * v72 + 80);
    uint64_t v47 = v75 >> 2;
    if ((unint64_t)v75 > 0x3FFFC)
    {
      BOOL result = sub_723EC(3u);
      if (!result) {
        return result;
      }
      sub_6BAC((uint64_t)&v202);
      v182 = sub_188FC78(&v202, (uint64_t)"Road ", 5);
      uint64_t v183 = sub_2DD928(v182, *v38);
      sub_188FC78(v183, (uint64_t)" would exceed the maximum number of supported arc edits (", 57);
      v184 = (void *)std::ostream::operator<<();
      sub_188FC78(v184, (uint64_t)").", 2);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      if (v201 < 0) {
        operator delete(__p[0]);
      }
      *(void (__cdecl ***)(std::ostringstream *__hidden))((char *)&v202
      if (SBYTE7(v206) < 0) {
        operator delete(v205[0]);
      }
      goto LABEL_156;
    }
    if (v9 == *(unint64_t **)(v3 + 8))
    {
LABEL_48:
      BOOL v49 = (*v9 & 0xFF000000000000) == 0;
      unint64_t v48 = (*v9 >> 16) & 0xFFFF0000 | (*v9 << 32);
      unint64_t v50 = ((0x2127599BF4325C37 * ((v48 | v49) ^ (v48 >> 23))) ^ ~((0x2127599BF4325C37 * ((v48 | v49) ^ (v48 >> 23))) >> 47))
          + (((0x2127599BF4325C37 * ((v48 | v49) ^ (v48 >> 23))) ^ ((0x2127599BF4325C37 * ((v48 | v49) ^ (v48 >> 23))) >> 47)) << 21);
      unint64_t v51 = 21 * ((265 * (v50 ^ (v50 >> 24))) ^ ((265 * (v50 ^ (v50 >> 24))) >> 14));
      sub_2D8820(v199, 2147483649u * (v51 ^ (v51 >> 28)), v9, (uint64_t)&v202);
      unint64_t v52 = v202;
      if (v204)
      {
        uint64_t v53 = (uint64_t)v202[1] + 104 * (void)v203;
        *(void *)uint64_t v53 = *v9;
        *(_OWORD *)(v53 + 8) = 0u;
        *(_OWORD *)(v53 + 24) = 0u;
        *(_OWORD *)(v53 + 40) = 0u;
        *(_OWORD *)(v53 + 56) = 0u;
        *(_OWORD *)(v53 + 72) = 0u;
        *(_OWORD *)(v53 + 88) = 0u;
      }
      uint64_t v54 = (uint64_t)v52[1] + 104 * (void)v203;
      uint64_t v55 = v54 + 8;
      uint64_t v57 = *(char **)(v54 + 16);
      unint64_t v56 = *(void *)(v54 + 24);
      if ((unint64_t)v57 < v56)
      {
        *(_WORD *)uint64_t v57 = v16;
        v57[2] = v198;
        v57[3] = v197;
        *(void *)(v55 + 8) = v57 + 4;
        goto LABEL_14;
      }
      uint64_t v122 = *(char **)v55;
      uint64_t v123 = (uint64_t)&v57[-*(void *)v55];
      uint64_t v124 = v123 >> 2;
      unint64_t v125 = (v123 >> 2) + 1;
      if (v125 >> 62) {
        sub_2E00();
      }
      uint64_t v126 = v56 - (void)v122;
      if (v126 >> 1 > v125) {
        unint64_t v125 = v126 >> 1;
      }
      BOOL v105 = (unint64_t)v126 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v127 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v105) {
        unint64_t v127 = v125;
      }
      if (v127 >> 62) {
        goto LABEL_158;
      }
      uint64_t v128 = 4 * v127;
      long long v129 = (char *)operator new(4 * v127);
      uint64_t v130 = &v129[4 * v124];
      *(_WORD *)uint64_t v130 = v16;
      v130[2] = v198;
      v130[3] = v197;
      if (v57 == v122)
      {
        uint64_t v132 = &v129[4 * v124];
        uint64_t v3 = v194;
      }
      else
      {
        unint64_t v131 = v57 - 4 - v122;
        if (v131 < 0x2C)
        {
          uint64_t v132 = &v129[4 * v124];
          uint64_t v3 = v194;
          goto LABEL_133;
        }
        unint64_t v163 = &v57[-v123] - v129;
        uint64_t v132 = &v129[4 * v124];
        uint64_t v3 = v194;
        if (v163 < 0x20) {
          goto LABEL_164;
        }
        uint64_t v164 = (v131 >> 2) + 1;
        uint64_t v165 = 4 * (v164 & 0x7FFFFFFFFFFFFFF8);
        v166 = &v57[-v165];
        uint64_t v132 = &v130[-v165];
        v167 = &v129[4 * v124 - 16];
        uint64_t v168 = v57 - 16;
        uint64_t v169 = v164 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v170 = *(_OWORD *)v168;
          *((_OWORD *)v167 - 1) = *((_OWORD *)v168 - 1);
          *(_OWORD *)v167 = v170;
          v167 -= 32;
          v168 -= 32;
          v169 -= 8;
        }
        while (v169);
        uint64_t v57 = v166;
        if (v164 != (v164 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_164:
          do
          {
LABEL_133:
            int v171 = *((_DWORD *)v57 - 1);
            v57 -= 4;
            *((_DWORD *)v132 - 1) = v171;
            v132 -= 4;
          }
          while (v57 != v122);
        }
      }
      v172 = v130 + 4;
      *(void *)uint64_t v55 = v132;
      *(void *)(v55 + 8) = v130 + 4;
      *(void *)(v55 + 16) = &v129[v128];
      if (v122) {
        operator delete(v122);
      }
      *(void *)(v55 + 8) = v172;
      goto LABEL_14;
    }
LABEL_65:
    char v195 = v46;
    if (v9 != (unint64_t *)(*(void *)(v3 + 16) - 8))
    {
      v193 = v5;
      BOOL v77 = (*v9 & 0xFF000000000000) == 0;
      unint64_t v76 = (*v9 >> 16) & 0xFFFF0000 | (*v9 << 32);
      unint64_t v78 = ((0x2127599BF4325C37 * ((v76 | v77) ^ (v76 >> 23))) ^ ~((0x2127599BF4325C37 * ((v76 | v77) ^ (v76 >> 23))) >> 47))
          + (((0x2127599BF4325C37 * ((v76 | v77) ^ (v76 >> 23))) ^ ((0x2127599BF4325C37 * ((v76 | v77) ^ (v76 >> 23))) >> 47)) << 21);
      unint64_t v79 = 21 * ((265 * (v78 ^ (v78 >> 24))) ^ ((265 * (v78 ^ (v78 >> 24))) >> 14));
      sub_2D8820(v199, 2147483649u * (v79 ^ (v79 >> 28)), v9, (uint64_t)&v202);
      uint64_t v80 = v202;
      if (v204)
      {
        uint64_t v81 = (uint64_t)v202[1] + 104 * (void)v203;
        *(void *)uint64_t v81 = *v9;
        *(_OWORD *)(v81 + 8) = 0u;
        *(_OWORD *)(v81 + 24) = 0u;
        *(_OWORD *)(v81 + 40) = 0u;
        *(_OWORD *)(v81 + 56) = 0u;
        *(_OWORD *)(v81 + 72) = 0u;
        *(_OWORD *)(v81 + 88) = 0u;
      }
      uint64_t v82 = (uint64_t)v80[1] + 104 * (void)v203;
      int v85 = *(char **)(v82 + 64);
      uint64_t v83 = (char **)(v82 + 64);
      long long v84 = v85;
      unint64_t v86 = (unint64_t)v83[1];
      if ((unint64_t)v85 < v86)
      {
        *(_WORD *)long long v84 = v16;
        v84[2] = v198;
        uint64_t v87 = v84 + 4;
        v84[3] = v197;
        uint64_t v5 = v193;
        goto LABEL_110;
      }
      uint64_t v112 = *(v83 - 1);
      uint64_t v113 = (v84 - v112) >> 2;
      unint64_t v114 = v113 + 1;
      if ((unint64_t)(v113 + 1) >> 62) {
        sub_2E00();
      }
      uint64_t v115 = v86 - (void)v112;
      if (v115 >> 1 > v114) {
        unint64_t v114 = v115 >> 1;
      }
      BOOL v105 = (unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v116 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v105) {
        unint64_t v116 = v114;
      }
      if (v116 >> 62) {
        goto LABEL_158;
      }
      uint64_t v191 = 4 * v116;
      uint64_t v117 = operator new(4 * v116);
      unint64_t v118 = &v117[4 * v113];
      *(_WORD *)unint64_t v118 = v16;
      v118[2] = v198;
      v118[3] = v197;
      if (v84 == v112)
      {
        uint64_t v120 = &v117[4 * v113];
        uint64_t v121 = v191;
        uint64_t v2 = v192;
      }
      else
      {
        unint64_t v119 = v84 - 4 - v112;
        if (v119 >= 0x2C)
        {
          uint64_t v120 = &v117[4 * v113];
          uint64_t v121 = v191;
          uint64_t v2 = v192;
          if ((unint64_t)(v112 - v117) >= 0x20)
          {
            uint64_t v133 = (v119 >> 2) + 1;
            uint64_t v134 = 4 * (v133 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v135 = &v84[-v134];
            uint64_t v120 = &v118[-v134];
            uint64_t v136 = &v117[4 * v113 - 16];
            uint64_t v137 = v84 - 16;
            uint64_t v138 = v133 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v139 = *(_OWORD *)v137;
              *(v136 - 1) = *((_OWORD *)v137 - 1);
              *uint64_t v136 = v139;
              v136 -= 2;
              v137 -= 32;
              v138 -= 8;
            }
            while (v138);
            long long v84 = v135;
            if (v133 == (v133 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_107;
            }
          }
        }
        else
        {
          uint64_t v120 = &v117[4 * v113];
          uint64_t v121 = v191;
          uint64_t v2 = v192;
        }
        do
        {
          int v140 = *((_DWORD *)v84 - 1);
          v84 -= 4;
          *((_DWORD *)v120 - 1) = v140;
          v120 -= 4;
        }
        while (v84 != v112);
      }
LABEL_107:
      *(v83 - 1) = v120;
      uint64_t v87 = v118 + 4;
      *uint64_t v83 = v118 + 4;
      v83[1] = &v117[v121];
      if (v112) {
        operator delete(v112);
      }
      uint64_t v5 = v193;
LABEL_110:
      *uint64_t v83 = v87;
      BOOL v142 = (*v9 & 0xFF000000000000) == 0;
      unint64_t v141 = (*v9 >> 16) & 0xFFFF0000 | (*v9 << 32);
      unint64_t v143 = ((0x2127599BF4325C37 * ((v141 | v142) ^ (v141 >> 23))) ^ ~((0x2127599BF4325C37
                                                                         * ((v141 | v142) ^ (v141 >> 23))) >> 47))
           + (((0x2127599BF4325C37 * ((v141 | v142) ^ (v141 >> 23))) ^ ((0x2127599BF4325C37
                                                                         * ((v141 | v142) ^ (v141 >> 23))) >> 47)) << 21);
      unint64_t v144 = 21 * ((265 * (v143 ^ (v143 >> 24))) ^ ((265 * (v143 ^ (v143 >> 24))) >> 14));
      sub_2D8820(v199, 2147483649u * (v144 ^ (v144 >> 28)), v9, (uint64_t)&v202);
      uint64_t v145 = v202;
      if (v204)
      {
        uint64_t v146 = (uint64_t)v202[1] + 104 * (void)v203;
        *(void *)uint64_t v146 = *v9;
        *(_OWORD *)(v146 + 8) = 0u;
        *(_OWORD *)(v146 + 24) = 0u;
        *(_OWORD *)(v146 + 40) = 0u;
        *(_OWORD *)(v146 + 56) = 0u;
        *(_OWORD *)(v146 + 72) = 0u;
        *(_OWORD *)(v146 + 88) = 0u;
      }
      uint64_t v147 = (uint64_t)v145[1] + 104 * (void)v203;
      uint64_t v148 = *(unsigned char **)(v147 + 88);
      uint64_t v95 = (char **)(v147 + 88);
      uint64_t v96 = v148;
      unint64_t v99 = v95 + 1;
      unint64_t v149 = (unint64_t)v95[1];
      if ((unint64_t)v148 >= v149)
      {
        uint64_t v100 = v95 - 1;
        uint64_t v101 = *(v95 - 1);
        uint64_t v150 = (v96 - v101) >> 2;
        unint64_t v151 = v150 + 1;
        if ((unint64_t)(v150 + 1) >> 62) {
LABEL_159:
        }
          sub_2E00();
        uint64_t v152 = v149 - (void)v101;
        if (v152 >> 1 > v151) {
          unint64_t v151 = v152 >> 1;
        }
        BOOL v105 = (unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v153 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v105) {
          unint64_t v153 = v151;
        }
        if (v153 >> 62) {
LABEL_158:
        }
          sub_188D718();
        uint64_t v107 = 4 * v153;
        uint64_t v108 = operator new(4 * v153);
        uint64_t v109 = &v108[4 * v150];
        *(_WORD *)uint64_t v109 = v47;
        v109[2] = v195;
        v109[3] = v197;
        if (v96 != v101)
        {
          unint64_t v154 = v96 - 4 - v101;
          if (v154 >= 0x2C)
          {
            uint64_t v111 = &v108[4 * v150];
            uint64_t v2 = v192;
            if ((unint64_t)(v101 - v108) >= 0x20)
            {
              uint64_t v155 = (v154 >> 2) + 1;
              uint64_t v156 = 4 * (v155 & 0x7FFFFFFFFFFFFFF8);
              long long v157 = &v96[-v156];
              uint64_t v111 = &v109[-v156];
              long long v158 = &v108[4 * v150 - 16];
              uint64_t v159 = (long long *)(v96 - 16);
              uint64_t v160 = v155 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v161 = *v159;
                *(v158 - 1) = *(v159 - 1);
                *long long v158 = v161;
                v158 -= 2;
                v159 -= 2;
                v160 -= 8;
              }
              while (v160);
              uint64_t v96 = v157;
              if (v155 == (v155 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_142;
              }
            }
          }
          else
          {
            uint64_t v111 = &v108[4 * v150];
            uint64_t v2 = v192;
          }
          do
          {
            int v162 = *((_DWORD *)v96 - 1);
            v96 -= 4;
            *((_DWORD *)v111 - 1) = v162;
            v111 -= 4;
          }
          while (v96 != v101);
LABEL_142:
          *uint64_t v100 = v111;
          uint64_t v8 = v109 + 4;
          *uint64_t v95 = v109 + 4;
          *unint64_t v99 = &v108[v107];
          if (v101) {
            operator delete(v101);
          }
          goto LABEL_13;
        }
        goto LABEL_122;
      }
      goto LABEL_12;
    }
    BOOL v89 = (*v9 & 0xFF000000000000) == 0;
    unint64_t v88 = (*v9 >> 16) & 0xFFFF0000 | (*v9 << 32);
    unint64_t v90 = ((0x2127599BF4325C37 * ((v88 | v89) ^ (v88 >> 23))) ^ ~((0x2127599BF4325C37 * ((v88 | v89) ^ (v88 >> 23))) >> 47))
        + (((0x2127599BF4325C37 * ((v88 | v89) ^ (v88 >> 23))) ^ ((0x2127599BF4325C37 * ((v88 | v89) ^ (v88 >> 23))) >> 47)) << 21);
    unint64_t v91 = 21 * ((265 * (v90 ^ (v90 >> 24))) ^ ((265 * (v90 ^ (v90 >> 24))) >> 14));
    sub_2D8820(v199, 2147483649u * (v91 ^ (v91 >> 28)), v9, (uint64_t)&v202);
    uint64_t v92 = v202;
    if (v204)
    {
      uint64_t v93 = (uint64_t)v202[1] + 104 * (void)v203;
      *(void *)uint64_t v93 = *v9;
      *(_OWORD *)(v93 + 8) = 0u;
      *(_OWORD *)(v93 + 24) = 0u;
      *(_OWORD *)(v93 + 40) = 0u;
      *(_OWORD *)(v93 + 56) = 0u;
      *(_OWORD *)(v93 + 72) = 0u;
      *(_OWORD *)(v93 + 88) = 0u;
    }
    uint64_t v94 = (uint64_t)v92[1] + 104 * (void)v203;
    int v97 = *(unsigned char **)(v94 + 40);
    uint64_t v95 = (char **)(v94 + 40);
    uint64_t v96 = v97;
    unint64_t v99 = v95 + 1;
    unint64_t v98 = (unint64_t)v95[1];
    if ((unint64_t)v97 >= v98)
    {
      uint64_t v100 = v95 - 1;
      uint64_t v101 = *(v95 - 1);
      uint64_t v102 = (v96 - v101) >> 2;
      unint64_t v103 = v102 + 1;
      if ((unint64_t)(v102 + 1) >> 62) {
        goto LABEL_159;
      }
      uint64_t v104 = v98 - (void)v101;
      if (v104 >> 1 > v103) {
        unint64_t v103 = v104 >> 1;
      }
      BOOL v105 = (unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v106 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v105) {
        unint64_t v106 = v103;
      }
      if (v106 >> 62) {
        goto LABEL_158;
      }
      uint64_t v107 = 4 * v106;
      uint64_t v108 = operator new(4 * v106);
      uint64_t v109 = &v108[4 * v102];
      *(_WORD *)uint64_t v109 = v47;
      v109[2] = v195;
      v109[3] = v197;
      if (v96 != v101)
      {
        unint64_t v110 = v96 - 4 - v101;
        if (v110 >= 0x2C)
        {
          uint64_t v111 = &v108[4 * v102];
          uint64_t v2 = v192;
          if ((unint64_t)(v101 - v108) >= 0x20)
          {
            uint64_t v173 = (v110 >> 2) + 1;
            uint64_t v174 = 4 * (v173 & 0x7FFFFFFFFFFFFFF8);
            v175 = &v96[-v174];
            uint64_t v111 = &v109[-v174];
            v176 = &v108[4 * v102 - 16];
            uint64_t v177 = (long long *)(v96 - 16);
            uint64_t v178 = v173 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v179 = *v177;
              *(v176 - 1) = *(v177 - 1);
              _OWORD *v176 = v179;
              v176 -= 2;
              v177 -= 2;
              v178 -= 8;
            }
            while (v178);
            uint64_t v96 = v175;
            if (v173 == (v173 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_142;
            }
          }
        }
        else
        {
          uint64_t v111 = &v108[4 * v102];
          uint64_t v2 = v192;
        }
        do
        {
          int v180 = *((_DWORD *)v96 - 1);
          v96 -= 4;
          *((_DWORD *)v111 - 1) = v180;
          v111 -= 4;
        }
        while (v96 != v101);
        goto LABEL_142;
      }
LABEL_122:
      uint64_t v111 = v109;
      uint64_t v2 = v192;
      goto LABEL_142;
    }
LABEL_12:
    *(_WORD *)uint64_t v96 = v47;
    v96[2] = v195;
    uint64_t v8 = v96 + 4;
    v96[3] = v197;
LABEL_13:
    *uint64_t v95 = v8;
    uint64_t v3 = v194;
LABEL_14:
    uint64_t v4 = *(uint64_t **)(v3 + 16);
    if (v5 == v4) {
      goto LABEL_3;
    }
  }
  BOOL result = sub_723EC(3u);
  if (!result) {
    return result;
  }
  *(void (__cdecl ***)(std::ostringstream *__hidden))((char *)&v202 + (void)*(v202 - 3)) = v185;
  uint64_t v186 = (std::ios_base *)((char *)&v202 + (void)*(v202 - 3));
  std::ios_base::init(v186, &v203);
  v186[1].__vftable = 0;
  v186[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf();
  *(_OWORD *)v205 = 0u;
  long long v206 = 0u;
  int v207 = 16;
  unint64_t v187 = sub_188FC78(&v202, (uint64_t)"Road ", 5);
  v188 = sub_2DD928(v187, *v5);
  sub_188FC78(v188, (uint64_t)" would exceed the maximum number of supported arc edits (", 57);
  v189 = (void *)std::ostream::operator<<();
  sub_188FC78(v189, (uint64_t)").", 2);
  std::stringbuf::str();
  sub_7246C((uint64_t *)__p, 3u);
  if (v201 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v206) < 0) {
    operator delete(v205[0]);
  }
LABEL_156:
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return 0;
}

void sub_2D48F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a25 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a26);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_2D499C(uint64_t a1)
{
  return a1 + 1688;
}

void sub_2D49A4(uint64_t a1)
{
  sub_2D7BD4(a1);
  sub_2D7BD4(a1 + 48);
  sub_2D7BD4(a1 + 96);
  sub_2D7BD4(a1 + 144);
  sub_2D7BD4(a1 + 192);
  sub_2D7BD4(a1 + 240);
  sub_2D7BD4(a1 + 288);
  sub_2D7BD4(a1 + 336);
  sub_2D7BD4(a1 + 384);
  sub_2D7BD4(a1 + 432);
  sub_2D7BD4(a1 + 480);
  sub_2D7BD4(a1 + 528);
  sub_2D7BD4(a1 + 576);
  sub_2D7BD4(a1 + 624);
  sub_2D7BD4(a1 + 672);

  sub_2D7BD4(a1 + 720);
}

uint64_t sub_2D4A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unint64_t **)(a2 + 8);
  if (v2 != *(unint64_t **)(a2 + 16))
  {
    uint64_t result = 0;
    uint64_t v6 = a1 + 152;
    while (1)
    {
      uint64_t v8 = result;
      sub_2D6A20(v6, v2, v25);
      if (v25[0])
      {
        sub_2D6A20(v6, v2, v25);
        if (!v25[0])
        {
          std::logic_error::logic_error(&v27, "phmap at(): lookup non-existent key");
          sub_2D9094(&v27);
        }
        unint64_t v10 = *(unsigned int **)(v26 + 8);
        uint64_t v9 = *(unsigned int **)(v26 + 16);
        uint64_t v7 = *(unint64_t **)(a2 + 16);
        uint64_t result = v8;
        if (v10 != v9)
        {
          if (v2 != v7)
          {
            uint64_t v11 = *(unint64_t **)(a2 + 16);
            unint64_t v23 = *(unsigned int **)(v26 + 16);
            while (1)
            {
              uint64_t v12 = **(void **)(a1 + 72) + 32 * *v10;
              uint64_t v13 = *(void **)(v12 + 8);
              if (v2 == v11)
              {
                uint64_t v11 = v2;
                if (v13 == *(void **)(v12 + 16)) {
                  goto LABEL_39;
                }
              }
              else
              {
                if (v13 != *(void **)(v12 + 16))
                {
                  int v14 = 0;
                  unsigned int v24 = result;
                  for (uint64_t i = v2 + 1; ; ++i)
                  {
                    while (1)
                    {
                      v14 |= 1 << sub_2DD178(a1, *(i - 1));
                      if (__PAIR64__(*((unsigned __int16 *)i - 2), *((_DWORD *)i - 2)) == __PAIR64__((unsigned __int16)WORD2(*v13), *v13)&& ((*v13 & 0x1000000000000) == 0) == (*((unsigned char *)i - 2) == 0))
                      {
                        break;
                      }
                      int v16 = sub_2DD4C0((uint64_t *)a1, *(i - 1));
                      uint64_t v7 = *(unint64_t **)(a2 + 16);
                      if (v16) {
                        BOOL v17 = i == v7;
                      }
                      else {
                        BOOL v17 = 1;
                      }
                      if (!v17)
                      {
                        ++i;
                        if (v13 != *(void **)(v12 + 16)) {
                          continue;
                        }
                      }
                      uint64_t v11 = *(unint64_t **)(a2 + 16);
                      uint64_t result = v24;
                      uint64_t v9 = v23;
                      if (v13 == *(void **)(v12 + 16) && (v14 & 4) == 0) {
                        goto LABEL_39;
                      }
                      goto LABEL_10;
                    }
                    ++v13;
                    uint64_t v7 = *(unint64_t **)(a2 + 16);
                    uint64_t result = v24;
                    uint64_t v9 = v23;
                    if (i == v7) {
                      break;
                    }
                    uint64_t v11 = *(unint64_t **)(a2 + 16);
                    if (v13 == *(void **)(v12 + 16)) {
                      goto LABEL_34;
                    }
                  }
                  uint64_t v7 = i;
                  uint64_t v11 = i;
                  if (v13 == *(void **)(v12 + 16) && (v14 & 4) == 0) {
                    goto LABEL_39;
                  }
                  goto LABEL_10;
                }
                LOBYTE(v14) = 0;
LABEL_34:
                if (v13 == *(void **)(v12 + 16) && (v14 & 4) == 0) {
LABEL_39:
                }
                  uint64_t result = (1 << *(unsigned char *)v12) | result;
              }
LABEL_10:
              if (++v10 == v9) {
                goto LABEL_4;
              }
            }
          }
          uint64_t v21 = **(void **)(a1 + 72);
          do
          {
            uint64_t v22 = *v10;
            if (*(void *)(v21 + 32 * v22 + 8) == *(void *)(v21 + 32 * v22 + 16)) {
              uint64_t result = (1 << *(unsigned char *)(v21 + 32 * v22)) | result;
            }
            ++v10;
          }
          while (v10 != v9);
          uint64_t v7 = v2;
        }
      }
      else
      {
        uint64_t v7 = *(unint64_t **)(a2 + 16);
        uint64_t result = v8;
      }
LABEL_4:
      ++v2;
      uint64_t v6 = a1 + 152;
      if (v2 == v7) {
        return result;
      }
    }
  }
  return 0;
}