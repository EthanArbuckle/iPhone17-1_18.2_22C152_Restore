void sub_F2594C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;
  void *v46;
  void *v47;

  sub_55758((uint64_t **)(v44 - 192));
  v46 = *(void **)(v44 - 168);
  if (v46)
  {
    *(void *)(v44 - 160) = v46;
    operator delete(v46);
  }
  v47 = *(void **)(v44 - 144);
  if (v47)
  {
    *(void *)(v44 - 136) = v47;
    operator delete(v47);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_F25F9C(uint64_t a1, void *a2, uint64_t *a3, int a4)
{
  return sub_F222B8(a1, a2, a3, a4);
}

void sub_F25FA4(uint64_t *a1@<X0>, char a2@<W1>, void **a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  *(double *)&long long v48 = a4;
  *((double *)&v48 + 1) = a5;
  double v49 = a6;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v7 != v8)
  {
    int v10 = *(_DWORD *)(v8 - 32);
    if (v10 != -1)
    {
      sub_EC2DFC(a3, (v10 + 1), &v48);
      uint64_t v7 = *a1;
      uint64_t v8 = a1[1];
    }
    if (v7 != v8)
    {
      v12 = (char *)*a3;
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a3[1] - (unsigned char *)*a3) >> 3);
      if (a2)
      {
        unint64_t v14 = 0;
        double v16 = *((double *)&v48 + 1);
        double v15 = *(double *)&v48;
        double v17 = v49;
        do
        {
          double v19 = v15;
          double v20 = v16;
          double v21 = v17;
          if (v14) {
            unsigned int v22 = v14 - 1;
          }
          else {
            unsigned int v22 = 0;
          }
          unsigned int v23 = *(_DWORD *)v7;
          double v15 = *(double *)(v7 + 8);
          double v16 = *(double *)(v7 + 16);
          double v17 = *(double *)(v7 + 24);
          unint64_t v18 = v14;
          if (v13 <= v14 || v14 > v23)
          {
            unint64_t v18 = v14;
          }
          else
          {
            double v25 = v15 - v19;
            double v26 = v16 - v20;
            double v27 = v17 - v21;
            BOOL v28 = v23 >= v22;
            unsigned int v29 = v23 - v22;
            if (v29 != 0 && v28)
            {
              double v30 = (double)v29;
              unsigned int v31 = v14 != 0;
              do
              {
                double v32 = (double)v31 / v30;
                v33 = (double *)&v12[24 * v18];
                unint64_t v18 = (v14 + 1);
                double *v33 = v19 + v25 * v32;
                v33[1] = v20 + v26 * v32;
                v33[2] = v21 + v27 * v32;
                if (v13 <= v18) {
                  break;
                }
                ++v31;
                LODWORD(v14) = v14 + 1;
              }
              while (v18 <= v23);
            }
            else
            {
              double v34 = v19 + v25;
              double v35 = v20 + v26;
              double v36 = v21 + v27;
              unint64_t v37 = v14;
              do
              {
                unint64_t v14 = (v14 + 1);
                v38 = (double *)&v12[24 * v37];
                double *v38 = v34;
                v38[1] = v35;
                v38[2] = v36;
                BOOL v39 = v13 <= v14 || v14 > v23;
                unint64_t v18 = v14;
                unint64_t v37 = v14;
              }
              while (!v39);
            }
          }
          v7 += 32;
          unint64_t v14 = v18;
        }
        while (v7 != v8);
      }
      else
      {
        LODWORD(v40) = 0;
        do
        {
          unsigned int v41 = *(_DWORD *)v7;
          unint64_t v42 = v40;
          if (v13 > v40 && v40 <= v41)
          {
            long long v44 = *(_OWORD *)(v7 + 8);
            uint64_t v45 = *(void *)(v7 + 24);
            do
            {
              unint64_t v40 = (v40 + 1);
              v46 = &v12[24 * v42];
              *(_OWORD *)v46 = v44;
              *((void *)v46 + 2) = v45;
              BOOL v47 = v13 <= v40 || v40 > v41;
              unint64_t v42 = v40;
            }
            while (!v47);
          }
          v7 += 32;
        }
        while (v7 != v8);
      }
    }
  }
}

void sub_F2618C(_Unwind_Exception *exception_object)
{
  v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F261A8(uint64_t a1)
{
  *(_OWORD *)(a1 + 8) = xmmword_20F0F60;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 24) = _Q0;
  *(_OWORD *)(a1 + 56) = unk_20F1030;
  *(_OWORD *)(a1 + 72) = xmmword_20F1040;
  *(_OWORD *)(a1 + 88) = unk_20F1050;
  *(_OWORD *)(a1 + 104) = xmmword_20F1060;
  *(_WORD *)a1 = 1;
  *(_OWORD *)(a1 + 40) = xmmword_20F1020;
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0x4034000000000000;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 152) = 0x3FF0000000000000;
  *(void *)(a1 + 160) = 0x700000002;
  *(_DWORD *)(a1 + 168) = 7;
  *(unsigned char *)(a1 + 172) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_WORD *)(a1 + 200) = 256;
  *(void *)(a1 + 220) = 0;
  *(_DWORD *)(a1 + 228) = 0;
  *(void *)(a1 + 204) = 0;
  *(void *)(a1 + 212) = 0;
  uint64_t v7 = (char *)operator new(0x168uLL);
  *(void *)(a1 + 208) = v7;
  uint64_t v8 = v7 + 360;
  *(void *)(a1 + 224) = v7 + 360;
  memset_pattern16(v7, &unk_20F0FB0, 0x168uLL);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = v8;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  v9 = operator new(0x18uLL);
  __asm { FMOV            V0.2D, #1.0 }
  long long v25 = _Q0;
  *(_OWORD *)v9 = _Q0;
  v9[2] = 0x3FF0000000000000;
  *(void *)(a1 + 232) = v9;
  *(void *)(a1 + 240) = v9 + 3;
  *(void *)(a1 + 248) = v9 + 3;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  v11 = (char *)operator new(0x60uLL);
  *(void *)(a1 + 256) = v11;
  v12 = v11 + 96;
  *(void *)(a1 + 272) = v11 + 96;
  memset_pattern16(v11, &unk_20F0FB0, 0x60uLL);
  *(void *)(a1 + 264) = v12;
  *(void *)(a1 + 280) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 288) = v25;
  *(_OWORD *)(a1 + 304) = v25;
  *(_OWORD *)(a1 + 320) = v25;
  *(_OWORD *)(a1 + 336) = v25;
  *(_OWORD *)(a1 + 352) = xmmword_20F1010;
  *(_OWORD *)(a1 + 368) = v25;
  *(_OWORD *)(a1 + 384) = v25;
  *(_OWORD *)(a1 + 400) = v25;
  *(_OWORD *)(a1 + 416) = v25;
  *(_OWORD *)(a1 + 432) = v25;
  *(_WORD *)(a1 + 448) = -1;
  *(_DWORD *)(a1 + 450) = 65793;
  *(void *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(unsigned char *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  unint64_t v13 = (char *)operator new(0xB50uLL);
  *(void *)(a1 + 496) = v13;
  unint64_t v14 = v13 + 2896;
  *(void *)(a1 + 512) = v13 + 2896;
  bzero(v13, 0xB50uLL);
  *(void *)(a1 + 504) = v14;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 528) = 0;
  double v15 = (char *)operator new(0xB50uLL);
  *(void *)(a1 + 520) = v15;
  double v16 = v15 + 2896;
  *(void *)(a1 + 536) = v15 + 2896;
  bzero(v15, 0xB50uLL);
  *(void *)(a1 + 528) = v16;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 552) = 0;
  double v17 = (char *)operator new(0xB50uLL);
  *(void *)(a1 + 544) = v17;
  unint64_t v18 = v17 + 2896;
  *(void *)(a1 + 560) = v17 + 2896;
  bzero(v17, 0xB50uLL);
  *(void *)(a1 + 552) = v18;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 576) = 0;
  double v19 = operator new(0x40uLL);
  *(void *)(a1 + 568) = v19;
  *(void *)(a1 + 584) = v19 + 4;
  *double v19 = 0u;
  v19[1] = 0u;
  v19[2] = 0u;
  v19[3] = 0u;
  *(void *)(a1 + 576) = v19 + 4;
  *(_WORD *)(a1 + 592) = 256;
  *(unsigned char *)(a1 + 594) = 0;
  *(void *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  double v20 = operator new(0x40uLL);
  *(void *)(a1 + 648) = v20;
  *(void *)(a1 + 664) = v20 + 4;
  *double v20 = 0u;
  v20[1] = 0u;
  v20[2] = 0u;
  v20[3] = 0u;
  *(void *)(a1 + 656) = v20 + 4;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 680) = 0;
  double v21 = operator new(0x50uLL);
  *(void *)(a1 + 672) = v21;
  *(void *)(a1 + 688) = v21 + 5;
  *double v21 = 0u;
  v21[1] = 0u;
  v21[2] = 0u;
  v21[3] = 0u;
  v21[4] = 0u;
  *(void *)(a1 + 680) = v21 + 5;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 704) = 0;
  unsigned int v22 = (char *)operator new(0x528uLL);
  *(void *)(a1 + 696) = v22;
  unsigned int v23 = v22 + 1320;
  *(void *)(a1 + 712) = v22 + 1320;
  memset_pattern16(v22, &unk_20F0FB0, 0x528uLL);
  *(void *)(a1 + 704) = v23;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1132) = 0u;
  *(_WORD *)(a1 + 1148) = -29536;
  *(void *)(a1 + 1152) = 100000;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(void *)(a1 + 1176) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 1184) = v25;
  *(_OWORD *)(a1 + 1200) = v25;
  *(void *)(a1 + 1216) = 0x3FF0000000000000;
  return a1;
}

void sub_F26534(_Unwind_Exception *a1)
{
  v6 = v2;
  v1[85] = v6;
  operator delete(v6);
  uint64_t v8 = (void *)v1[81];
  if (v8)
  {
    v1[82] = v8;
    operator delete(v8);
    v9 = (void **)(v1 + 71);
    int v10 = *v5;
    if (!*v5)
    {
LABEL_3:
      v11 = *v9;
      if (!*v9) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else
  {
    v9 = (void **)(v1 + 71);
    int v10 = *v5;
    if (!*v5) {
      goto LABEL_3;
    }
  }
  v1[76] = v10;
  operator delete(v10);
  v11 = *v9;
  if (!*v9)
  {
LABEL_4:
    v12 = (void *)v1[68];
    if (!v12) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  v1[72] = v11;
  operator delete(v11);
  v12 = (void *)v1[68];
  if (!v12)
  {
LABEL_5:
    unint64_t v13 = (void *)v1[65];
    if (!v13) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  v1[69] = v12;
  operator delete(v12);
  unint64_t v13 = (void *)v1[65];
  if (!v13)
  {
LABEL_6:
    unint64_t v14 = (void *)v1[62];
    if (!v14) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  v1[66] = v13;
  operator delete(v13);
  unint64_t v14 = (void *)v1[62];
  if (!v14)
  {
LABEL_7:
    double v15 = (void *)v1[32];
    if (!v15) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  v1[63] = v14;
  operator delete(v14);
  double v15 = (void *)v1[32];
  if (!v15)
  {
LABEL_8:
    double v16 = *v4;
    if (!*v4) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  v1[33] = v15;
  operator delete(v15);
  double v16 = *v4;
  if (!*v4)
  {
LABEL_9:
    double v17 = (void *)v1[26];
    if (!v17) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  v1[30] = v16;
  operator delete(v16);
  double v17 = (void *)v1[26];
  if (!v17)
  {
LABEL_10:
    unint64_t v18 = *v3;
    if (!*v3) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  v1[27] = v17;
  operator delete(v17);
  unint64_t v18 = *v3;
  if (!*v3) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_21:
  v1[23] = v18;
  operator delete(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_F266F8(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  long long v6 = a2[3];
  long long v7 = a2[4];
  long long v8 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  long long v9 = a2[7];
  long long v10 = a2[8];
  long long v11 = a2[9];
  *(_OWORD *)(a1 + 157) = *(long long *)((char *)a2 + 157);
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 112) = v9;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  unint64_t v13 = (unsigned char *)*((void *)a2 + 22);
  v12 = (unsigned char *)*((void *)a2 + 23);
  int64_t v14 = v12 - v13;
  if (v12 != v13)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v14 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    double v15 = (char *)operator new(v14);
    *(void *)(a1 + 176) = v15;
    *(void *)(a1 + 184) = v15;
    double v16 = &v15[8 * (v14 >> 3)];
    *(void *)(a1 + 192) = v16;
    memcpy(v15, v13, v14);
    *(void *)(a1 + 184) = v16;
  }
  uint64_t v17 = *((void *)a2 + 25);
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 200) = v17;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  double v19 = (unsigned char *)*((void *)a2 + 26);
  unint64_t v18 = (unsigned char *)*((void *)a2 + 27);
  int64_t v20 = v18 - v19;
  if (v18 != v19)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v20 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    double v21 = (char *)operator new(v20);
    *(void *)(a1 + 208) = v21;
    *(void *)(a1 + 216) = v21;
    unsigned int v22 = &v21[8 * (v20 >> 3)];
    *(void *)(a1 + 224) = v22;
    memcpy(v21, v19, v20);
    *(void *)(a1 + 216) = v22;
  }
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  v24 = (unsigned char *)*((void *)a2 + 29);
  unsigned int v23 = (unsigned char *)*((void *)a2 + 30);
  int64_t v25 = v23 - v24;
  if (v23 != v24)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v25 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    double v26 = (char *)operator new(v25);
    *(void *)(a1 + 232) = v26;
    *(void *)(a1 + 240) = v26;
    double v27 = &v26[8 * (v25 >> 3)];
    *(void *)(a1 + 248) = v27;
    memcpy(v26, v24, v25);
    *(void *)(a1 + 240) = v27;
  }
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  unsigned int v29 = (unsigned char *)*((void *)a2 + 32);
  BOOL v28 = (unsigned char *)*((void *)a2 + 33);
  int64_t v30 = v28 - v29;
  if (v28 != v29)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v30 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unsigned int v31 = (char *)operator new(v30);
    *(void *)(a1 + 256) = v31;
    *(void *)(a1 + 264) = v31;
    double v32 = &v31[8 * (v30 >> 3)];
    *(void *)(a1 + 272) = v32;
    memcpy(v31, v29, v30);
    *(void *)(a1 + 264) = v32;
  }
  long long v33 = *(long long *)((char *)a2 + 296);
  *(_OWORD *)(a1 + 280) = *(long long *)((char *)a2 + 280);
  *(_OWORD *)(a1 + 296) = v33;
  long long v34 = *(long long *)((char *)a2 + 312);
  long long v35 = *(long long *)((char *)a2 + 328);
  long long v36 = *(long long *)((char *)a2 + 360);
  *(_OWORD *)(a1 + 344) = *(long long *)((char *)a2 + 344);
  *(_OWORD *)(a1 + 360) = v36;
  *(_OWORD *)(a1 + 312) = v34;
  *(_OWORD *)(a1 + 328) = v35;
  long long v37 = *(long long *)((char *)a2 + 376);
  long long v38 = *(long long *)((char *)a2 + 392);
  long long v39 = *(long long *)((char *)a2 + 424);
  *(_OWORD *)(a1 + 408) = *(long long *)((char *)a2 + 408);
  *(_OWORD *)(a1 + 424) = v39;
  *(_OWORD *)(a1 + 376) = v37;
  *(_OWORD *)(a1 + 392) = v38;
  long long v40 = *(long long *)((char *)a2 + 440);
  long long v41 = *(long long *)((char *)a2 + 472);
  uint64_t v42 = *((void *)a2 + 61);
  *(_OWORD *)(a1 + 456) = *(long long *)((char *)a2 + 456);
  *(_OWORD *)(a1 + 472) = v41;
  *(_OWORD *)(a1 + 440) = v40;
  *(void *)(a1 + 488) = v42;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  long long v44 = (unsigned char *)*((void *)a2 + 62);
  v43 = (unsigned char *)*((void *)a2 + 63);
  int64_t v45 = v43 - v44;
  if (v43 != v44)
  {
    if (v45 < 0) {
      sub_2E00();
    }
    v46 = (char *)operator new(v43 - v44);
    *(void *)(a1 + 496) = v46;
    *(void *)(a1 + 504) = v46;
    BOOL v47 = &v46[16 * (v45 >> 4)];
    *(void *)(a1 + 512) = v47;
    memcpy(v46, v44, v45);
    *(void *)(a1 + 504) = v47;
  }
  *(void *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  long long v48 = (unsigned char *)*((void *)a2 + 65);
  double v49 = (unsigned char *)*((void *)a2 + 66);
  int64_t v50 = v49 - v48;
  if (v49 != v48)
  {
    if (v50 < 0) {
      sub_2E00();
    }
    v51 = (char *)operator new(v49 - v48);
    *(void *)(a1 + 520) = v51;
    *(void *)(a1 + 528) = v51;
    v52 = &v51[16 * (v50 >> 4)];
    *(void *)(a1 + 536) = v52;
    memcpy(v51, v48, v50);
    *(void *)(a1 + 528) = v52;
  }
  *(void *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  v53 = (unsigned char *)*((void *)a2 + 68);
  v54 = (unsigned char *)*((void *)a2 + 69);
  int64_t v55 = v54 - v53;
  if (v54 != v53)
  {
    if (v55 < 0) {
      sub_2E00();
    }
    v56 = (char *)operator new(v54 - v53);
    *(void *)(a1 + 544) = v56;
    *(void *)(a1 + 552) = v56;
    v57 = &v56[16 * (v55 >> 4)];
    *(void *)(a1 + 560) = v57;
    memcpy(v56, v53, v55);
    *(void *)(a1 + 552) = v57;
  }
  *(void *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  v58 = (unsigned char *)*((void *)a2 + 71);
  v59 = (unsigned char *)*((void *)a2 + 72);
  int64_t v60 = v59 - v58;
  if (v59 != v58)
  {
    if (v60 < 0) {
      sub_2E00();
    }
    v61 = (char *)operator new(v59 - v58);
    *(void *)(a1 + 568) = v61;
    *(void *)(a1 + 576) = v61;
    v62 = &v61[16 * (v60 >> 4)];
    *(void *)(a1 + 584) = v62;
    memcpy(v61, v58, v60);
    *(void *)(a1 + 576) = v62;
  }
  __int16 v63 = *((_WORD *)a2 + 296);
  *(unsigned char *)(a1 + 594) = *((unsigned char *)a2 + 594);
  *(_WORD *)(a1 + 592) = v63;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 616) = 0;
  *(void *)(a1 + 608) = 0;
  v64 = (unsigned char *)*((void *)a2 + 75);
  v65 = (unsigned char *)*((void *)a2 + 76);
  int64_t v66 = v65 - v64;
  if (v65 != v64)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v66 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    v67 = (char *)operator new(v66);
    *(void *)(a1 + 600) = v67;
    *(void *)(a1 + 608) = v67;
    *(void *)(a1 + 616) = &v67[8 * (v66 >> 3)];
    size_t v68 = 24 * ((v66 - 24) / 0x18uLL) + 24;
    memcpy(v67, v64, v68);
    *(void *)(a1 + 608) = &v67[v68];
  }
  long long v69 = a2[39];
  *(void *)(a1 + 640) = *((void *)a2 + 80);
  *(_OWORD *)(a1 + 624) = v69;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 656) = 0;
  v70 = (unsigned char *)*((void *)a2 + 81);
  v71 = (unsigned char *)*((void *)a2 + 82);
  int64_t v72 = v71 - v70;
  if (v71 != v70)
  {
    if (v72 < 0) {
      sub_2E00();
    }
    v73 = (char *)operator new(v71 - v70);
    *(void *)(a1 + 648) = v73;
    *(void *)(a1 + 656) = v73;
    v74 = &v73[16 * (v72 >> 4)];
    *(void *)(a1 + 664) = v74;
    memcpy(v73, v70, v72);
    *(void *)(a1 + 656) = v74;
  }
  *(void *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  v75 = (unsigned char *)*((void *)a2 + 84);
  v76 = (unsigned char *)*((void *)a2 + 85);
  int64_t v77 = v76 - v75;
  if (v76 != v75)
  {
    if (v77 < 0) {
      sub_2E00();
    }
    v78 = (char *)operator new(v76 - v75);
    *(void *)(a1 + 672) = v78;
    *(void *)(a1 + 680) = v78;
    v79 = &v78[16 * (v77 >> 4)];
    *(void *)(a1 + 688) = v79;
    memcpy(v78, v75, v77);
    *(void *)(a1 + 680) = v79;
  }
  *(void *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  v80 = (unsigned char *)*((void *)a2 + 87);
  v81 = (unsigned char *)*((void *)a2 + 88);
  int64_t v82 = v81 - v80;
  if (v81 != v80)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v82 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    v83 = (char *)operator new(v82);
    *(void *)(a1 + 696) = v83;
    *(void *)(a1 + 704) = v83;
    v84 = &v83[8 * (v82 >> 3)];
    *(void *)(a1 + 712) = v84;
    memcpy(v83, v80, v82);
    *(void *)(a1 + 704) = v84;
  }
  memcpy((void *)(a1 + 720), a2 + 45, 0x1F8uLL);
  return a1;
}

void sub_F26CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16)
{
  unsigned int v23 = *v17;
  if (*v17)
  {
    v16[88] = v23;
    operator delete(v23);
    v24 = *v20;
    if (!*v20)
    {
LABEL_3:
      int64_t v25 = *v21;
      if (!*v21) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    v24 = *v20;
    if (!*v20) {
      goto LABEL_3;
    }
  }
  v16[85] = v24;
  operator delete(v24);
  int64_t v25 = *v21;
  if (!*v21)
  {
LABEL_4:
    double v26 = *a11;
    if (!*a11) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  v16[82] = v25;
  operator delete(v25);
  double v26 = *a11;
  if (!*a11)
  {
LABEL_5:
    double v27 = *a10;
    if (!*a10)
    {
LABEL_12:
      BOOL v28 = *a12;
      if (*a12)
      {
        v16[69] = v28;
        operator delete(v28);
        unsigned int v29 = *a14;
        if (!*a14)
        {
LABEL_14:
          int64_t v30 = *a13;
          if (!*a13) {
            goto LABEL_16;
          }
          goto LABEL_15;
        }
      }
      else
      {
        unsigned int v29 = *a14;
        if (!*a14) {
          goto LABEL_14;
        }
      }
      v16[66] = v29;
      operator delete(v29);
      int64_t v30 = *a13;
      if (!*a13)
      {
LABEL_16:
        unsigned int v31 = *a15;
        if (*a15)
        {
          v16[33] = v31;
          operator delete(v31);
        }
        double v32 = *v19;
        if (*v19)
        {
          v16[30] = v32;
          operator delete(v32);
          long long v33 = *v18;
          if (!*v18)
          {
LABEL_20:
            long long v34 = *a16;
            if (!*a16) {
              goto LABEL_22;
            }
            goto LABEL_21;
          }
        }
        else
        {
          long long v33 = *v18;
          if (!*v18) {
            goto LABEL_20;
          }
        }
        v16[27] = v33;
        operator delete(v33);
        long long v34 = *a16;
        if (!*a16) {
LABEL_22:
        }
          _Unwind_Resume(exception_object);
LABEL_21:
        v16[23] = v34;
        operator delete(v34);
        goto LABEL_22;
      }
LABEL_15:
      v16[63] = v30;
      operator delete(v30);
      goto LABEL_16;
    }
LABEL_11:
    v16[72] = v27;
    operator delete(v27);
    goto LABEL_12;
  }
LABEL_10:
  v16[76] = v26;
  operator delete(v26);
  double v27 = *a10;
  if (!*a10) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

void sub_F26E70()
{
  if (!*v0) {
    JUMPOUT(0xF26DC8);
  }
  JUMPOUT(0xF26DC0);
}

void sub_F26E80()
{
  if (!*v0) {
    JUMPOUT(0xF26DDCLL);
  }
  JUMPOUT(0xF26DD4);
}

void sub_F26E90()
{
}

void sub_F26E98()
{
  if (*v0) {
    JUMPOUT(0xF26E18);
  }
  JUMPOUT(0xF26DECLL);
}

void sub_F26EA8()
{
  if (!*v0) {
    JUMPOUT(0xF26E00);
  }
  JUMPOUT(0xF26DF8);
}

double sub_F26EB8()
{
  unk_25FCD57 = 16641;
  word_25FCD40 = 65;
  byte_25FCD6F = 1;
  byte_25FCD59 = 0;
  qword_254E518 = (uint64_t)operator new(0x40uLL);
  unk_254E520 = xmmword_20B9810;
  strcpy((char *)qword_254E518, "routing/route-planning/path-finding/DrivingCostFunctions.json");
  return *(double *)"stFunctions.json";
}

uint64_t sub_F26F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 45168;
  uint64_t v5 = a1 + 44864;
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a2;
  sub_1000AF4(a1 + 16);
  *(_DWORD *)uint64_t v5 = 0;
  *(_OWORD *)(a1 + 44872) = 0u;
  *(_DWORD *)(a1 + 44888) = 0;
  *(_OWORD *)(a1 + 44896) = 0u;
  *(_DWORD *)(a1 + 44912) = 0;
  *(void *)(v5 + 224) = 0;
  *(_DWORD *)(v5 + 232) = 0;
  *(_OWORD *)(a1 + 45064) = 0u;
  *(_DWORD *)(a1 + 45080) = 0;
  *(_OWORD *)(a1 + 45104) = 0u;
  *(_OWORD *)(a1 + 45120) = 0u;
  *(_OWORD *)(a1 + 45136) = 0u;
  *(_OWORD *)(a1 + 45149) = 0u;
  *(_OWORD *)(a1 + 44840) = 0u;
  *(void *)(a1 + 44855) = 0;
  *(_DWORD *)(a1 + 45000) = 0;
  *(_OWORD *)(a1 + 44968) = 0u;
  *(_OWORD *)(a1 + 44984) = 0u;
  *(_OWORD *)(a1 + 44936) = 0u;
  *(_OWORD *)(a1 + 44952) = 0u;
  *(_OWORD *)(a1 + 44920) = 0u;
  *(_DWORD *)(a1 + 45056) = 0;
  *(_OWORD *)(a1 + 45040) = 0u;
  *(_OWORD *)(a1 + 45024) = 0u;
  *(_OWORD *)(a1 + 45008) = 0u;
  *(void *)(v4 + 48) = 0;
  *(_OWORD *)(a1 + 45200) = 0u;
  *(_OWORD *)(a1 + 45184) = 0u;
  *(_OWORD *)(a1 + 45168) = 0u;
  *(_DWORD *)(v4 + 56) = 1065353216;
  *(_OWORD *)(a1 + 45232) = xmmword_20B8E30;
  *(void *)(v4 + 80) = 0x7FFFFFFFFFFFFFFFLL;
  v7.n128_u64[0] = 0;
  v7.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814((__n128 *)(a1 + 45256), &v7);
  return a1;
}

void sub_F2703C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  sub_5450C(v2 + 45192);
  long long v6 = *(void **)v4;
  if (*(void *)v4)
  {
    *(void *)(v4 + 8) = v6;
    operator delete(v6);
  }
  sub_C76F88(v1);
  _Unwind_Resume(a1);
}

void sub_F27074()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  long long v8 = v7;
  long long v9 = (void *)v0;
  *(_OWORD *)(v0 + 45232) = xmmword_20B8E30;
  uint64_t v10 = v0 + 45248;
  *(void *)(v0 + 45248) = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)(v0 + 44840) = 0u;
  *(_OWORD *)(v0 + 44856) = 0u;
  *(_OWORD *)(v0 + 44872) = 0u;
  *(_OWORD *)(v0 + 44888) = 0u;
  *(_OWORD *)(v0 + 44904) = 0u;
  *(_OWORD *)(v0 + 44920) = 0u;
  *(_OWORD *)(v0 + 44936) = 0u;
  *(_OWORD *)(v0 + 44952) = 0u;
  *(_OWORD *)(v0 + 44968) = 0u;
  *(_OWORD *)(v0 + 44984) = 0u;
  *(_OWORD *)(v0 + 45000) = 0u;
  *(_OWORD *)(v0 + 45016) = 0u;
  *(_OWORD *)(v0 + 45032) = 0u;
  *(_OWORD *)(v0 + 45048) = 0u;
  *(_OWORD *)(v0 + 45064) = 0u;
  *(_OWORD *)(v0 + 45080) = 0u;
  *(_OWORD *)(v0 + 45096) = 0u;
  *(_OWORD *)(v0 + 45112) = 0u;
  *(_OWORD *)(v0 + 45128) = 0u;
  *(_OWORD *)(v0 + 45144) = 0u;
  *(void *)(v0 + 45160) = 0;
  uint64_t v11 = *(void *)(v0 + 45272);
  for (uint64_t i = *(void *)(v0 + 45280); i != v11; i -= 32)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  *(void *)(v10 + 32) = v11;
  BOOL v13 = sub_401FE4(v2);
  sub_F2C2FC(v34, v8);
  unsigned int v31 = 0;
  unint64_t v32 = 0;
  unint64_t v33 = 0;
  BOOL v28 = 0;
  unsigned int v29 = 0;
  uint64_t v30 = 0;
  sub_1000AF8((uint64_t)(v9 + 2), v8, v13, (uint64_t)v22, &v28);
  unint64_t v14 = v32;
  if (v32 >= v33)
  {
    uint64_t v15 = sub_F2EBA4(&v31, (uint64_t)v22);
  }
  else
  {
    sub_F2DB40(v32, (uint64_t)v22);
    uint64_t v15 = v14 + 2336;
  }
  unint64_t v32 = v15;
  sub_F2CA5C((uint64_t)v22);
  double v16 = v28;
  if (v28)
  {
    uint64_t v17 = (uint64_t)v29;
    unint64_t v18 = v28;
    if (v29 != v28)
    {
      do
        uint64_t v17 = sub_405F44(v17 - 472);
      while ((long long *)v17 != v16);
      unint64_t v18 = v28;
    }
    unsigned int v29 = v16;
    operator delete(v18);
  }
  HIBYTE(v30) = 7;
  strcpy((char *)&v28, "driving");
  sub_1070DBC(v22, *v9, &v28, *(unsigned __int8 *)(v9[1] + 16));
  if (SHIBYTE(v30) < 0)
  {
    operator delete(v28);
    if (v13) {
      goto LABEL_16;
    }
  }
  else if (v13)
  {
LABEL_16:
    sub_F273B0();
    goto LABEL_19;
  }
  sub_F27EE8((uint64_t)v9, v6, v4, (uint64_t)v22, v8, 0xFFFFFFFFLL, (uint64_t *)&v31);
LABEL_19:
  if (__p)
  {
    double v27 = __p;
    operator delete(__p);
  }
  sub_32834C(v25);
  if (v24 < 0) {
    operator delete(v23);
  }
  unint64_t v19 = (unint64_t)v31;
  if (v31)
  {
    uint64_t v20 = v32;
    double v21 = v31;
    if ((void *)v32 != v31)
    {
      do
        uint64_t v20 = sub_F2CA5C(v20 - 2336);
      while (v20 != v19);
      double v21 = v31;
    }
    unint64_t v32 = v19;
    operator delete(v21);
  }
}

void sub_F27338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_F2CA5C((uint64_t)va);
  sub_4323C0((void **)(v2 - 152));
  sub_F28078((void **)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_F273B0()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  v107 = v11;
  v12 = (uint64_t **)v0;
  unint64_t v14 = v13;
  v108 = v15;
  uint64_t v16 = *v15;
  if (sub_1005D48(*v15))
  {
    *unint64_t v14 = 0;
    v14[1] = 0;
    v14[2] = 0;
    return;
  }
  v102 = v6;
  v103 = v10;
  uint64_t v109 = (uint64_t)v14;
  uint64_t v105 = v8;
  uint64_t v106 = *v2;
  uint64_t v17 = (uint64_t *)sub_376F8C(*v12);
  v112 = (__n128 *)v4;
  v135[0].n128_u64[0] = sub_3FA038(v4 + 160);
  v135[0].n128_u64[1] = v18;
  uint64_t v19 = sub_40EFE8((uint64_t)v135);
  uint64_t v100 = *(void *)v19;
  uint64_t v138 = *(void *)v19;
  int v139 = 1;
  sub_28D048(v17, (uint64_t)&v138, (unint64_t)&v119);
  uint64_t v20 = (char **)sub_37D0C0(v4);
  int v21 = sub_89DD4(v20);
  BOOL v22 = 0;
  if (v123 && v124 != -1)
  {
    unsigned int v23 = (char *)v121;
    if (v121 == v122) {
      goto LABEL_20;
    }
    while (1)
    {
      uint64_t v24 = *(void *)(v23 + 4);
      v25.i64[0] = v24;
      v25.i64[1] = HIDWORD(v24);
      int32x4_t v26 = v25;
      v26.i32[1] = v25.i32[0];
      v26.i32[3] = *((_DWORD *)v23 + 3);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(v26, (int32x4_t)xmmword_20E12E0))) & 1) == 0
        && v23[16]
        && (!v21 || ((1 << *v23) & v21) != 0))
      {
        break;
      }
      v23 += 48;
      if (v23 == (char *)v122) {
        goto LABEL_20;
      }
    }
    if (v119 == v120)
    {
LABEL_20:
      BOOL v22 = 0;
    }
    else
    {
      double v27 = (char *)v119 + 48;
      do
      {
        unsigned int v28 = *(v27 - 31);
        BOOL v22 = v28 < 3;
        BOOL v29 = v28 < 3 || v27 == v120;
        v27 += 48;
      }
      while (!v29);
    }
  }
  unint64_t v30 = sub_3FA3A8(v4 + 160);
  BOOL v32 = v30 < 0xFFFFFFFF00000000 && v30 != 0;
  BOOL v104 = v32;
  if (*(_DWORD *)(v19 + 8)) {
    BOOL v33 = *(_DWORD *)(v19 + 12) == -1;
  }
  else {
    BOOL v33 = 1;
  }
  int v34 = !v33;
  long long v35 = (uint64_t *)sub_638A44(v16);
  uint64_t v36 = *v35;
  uint64_t v37 = v35[1];
  if (*v35 == v37)
  {
    int v40 = 0;
  }
  else
  {
    do
    {
      long long v38 = (uint64_t *)nullsub_1(v36);
      BOOL v39 = sub_EADC78(*v38);
      int v40 = v39;
      v36 += 48;
      int v41 = v36 == v37 || v39;
    }
    while (v41 != 1);
  }
  if (v34) {
    int v42 = 2;
  }
  else {
    int v42 = 3;
  }
  sub_3FDF30(v42, v112, v135);
  int v111 = sub_4F44((unsigned int *)v135);
  uint64_t v43 = nullsub_1(v112);
  unint64_t v44 = sub_40A454(v43);
  unint64_t v118 = v44;
  if (v22)
  {
    unint64_t v45 = HIDWORD(v44);
    int v110 = HIDWORD(v44) - v44;
  }
  else
  {
    v46 = (unsigned int *)nullsub_1(v112);
    LODWORD(v45) = sub_4F44(v46);
    BOOL v47 = (_DWORD *)nullsub_1(v112);
    int v110 = sub_40A440(v47);
  }
  sub_FE5268(v135, *v12, (uint64_t)v112);
  long long v48 = *v12;
  HIBYTE(__p[2]) = 8;
  strcpy((char *)__p, "standard");
  uint64_t v49 = sub_374E14(v48, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  LODWORD(__p[0]) = 0x7FFFFFFF;
  *(void **)((char *)__p + 4) = (void *)0x7FFFFFFF7FFFFFFFLL;
  if (sub_401FE4((uint64_t)v112))
  {
    uint64_t v50 = nullsub_1(v112);
    __p[0] = *(void **)v50;
    int v51 = *(_DWORD *)(v50 + 8);
    LODWORD(__p[1]) = v51;
  }
  else
  {
    int v51 = 0x7FFFFFFF;
  }
  BOOL v101 = v22;
  v116 = __p[0];
  int v117 = v51;
  v52 = (uint64_t *)sub_638A44(*v108);
  uint64_t v54 = *v52;
  uint64_t v53 = v52[1];
  if (*v52 != v53)
  {
    char v55 = 0;
    while (1)
    {
      v57 = (uint64_t *)nullsub_1(v54);
      __p[0] = (void *)sub_405278(*v57, v118, (uint64_t *)v135, v49, 0, 0x7FFFFFFF, (unsigned int *)&v116, *v12);
      LODWORD(__p[1]) = v58;
      if (!sub_40A820(__p)) {
        goto LABEL_55;
      }
      int v59 = (int)__p[0];
      int v60 = v118;
      int v61 = sub_40A8CC((int *)__p, v45);
      if (v61 == 0x7FFFFFFF) {
        goto LABEL_55;
      }
      v55 |= v61 >= 0;
      if (v61 >= v111)
      {
LABEL_69:
        char v63 = 0;
        BOOL v64 = v112[30].n128_u8[1] != 0;
        if (!v104) {
          goto LABEL_70;
        }
LABEL_68:
        BOOL v65 = *((unsigned char *)v12[1] + 28) == 1;
        goto LABEL_71;
      }
      double v56 = (double)(v59 - v60) * 5.0;
      if (v56 >= 0.0)
      {
        if (v56 < 4.50359963e15)
        {
          uint64_t v62 = (uint64_t)(v56 + v56) + 1;
LABEL_53:
          double v56 = (double)(v62 >> 1);
        }
      }
      else if (v56 > -4.50359963e15)
      {
        uint64_t v62 = (uint64_t)(v56 + v56);
        if (v62 >= 1) {
          --v62;
        }
        goto LABEL_53;
      }
      if (v110 > (int)v56) {
        goto LABEL_69;
      }
LABEL_55:
      v54 += 48;
      if (v54 == v53) {
        goto LABEL_67;
      }
    }
  }
  char v55 = 0;
LABEL_67:
  char v63 = 1;
  BOOL v64 = v112[30].n128_u8[1] != 0;
  if (v104) {
    goto LABEL_68;
  }
LABEL_70:
  BOOL v65 = 0;
LABEL_71:
  BOOL v66 = 0;
  int v67 = v64 & ~v40;
  if (v106) {
    char v68 = v40;
  }
  else {
    char v68 = 1;
  }
  char v69 = 1;
  if ((v68 & 1) == 0 && !v65)
  {
    BOOL v66 = v55 != 0;
    if (!v55) {
      char v63 = 1;
    }
    char v69 = v63 | v104;
  }
  *(void *)uint64_t v109 = 0;
  *(void *)(v109 + 8) = 0;
  *(void *)(v109 + 16) = 0;
  if ((v67 | v66) == 1)
  {
    sub_F27EE8((uint64_t)v12, (uint64_t)v107, (uint64_t)v103, v105, v102, v106, v108);
    if (*(void *)v109)
    {
      sub_C64384(v109, *(void ***)v109);
      operator delete(*(void **)v109);
      *(void *)uint64_t v109 = 0;
      *(void *)(v109 + 8) = 0;
      *(void *)(v109 + 16) = 0;
    }
    *(_OWORD *)uint64_t v109 = *(_OWORD *)__p;
    *(void **)(v109 + 16) = __p[2];
    if (v101)
    {
      sub_40A2E4((uint64_t)&v115, SHIDWORD(v118), &v118);
      sub_3FB100((uint64_t)v113, &v115, 0);
      char v129 = 0;
      __int16 v128 = 0;
      LODWORD(__p[0]) = 0;
      *(_OWORD *)&__p[1] = *(_OWORD *)v113;
      v126 = v114;
      *(_DWORD *)v127 = v111;
      memset(&v127[4], 0, 53);
      unint64_t v130 = 0x8000000080000000;
      int v131 = 0x7FFFFFFF;
      int v133 = 1;
      uint64_t v132 = v100;
      long long v134 = xmmword_20F0420;
      sub_89CD4((char *)&v121, (char **)v113);
      if (*(void *)&v127[8])
      {
        *(void *)&v127[16] = *(void *)&v127[8];
        operator delete(*(void **)&v127[8]);
      }
      *(_OWORD *)&v127[8] = *(_OWORD *)v113;
      *(void *)&v127[24] = v114;
      sub_89CD4((char *)&v121, (char **)v113);
      if (*(void *)&v127[32])
      {
        *(void *)&v127[40] = *(void *)&v127[32];
        operator delete(*(void **)&v127[32]);
      }
      *(_OWORD *)&v127[32] = *(_OWORD *)v113;
      *(void *)&v127[48] = v114;
      uint64_t v70 = sub_40EFE8(v109);
      for (uint64_t i = sub_52058(v109); v70 != i; v70 += 48)
      {
        int64_t v72 = (uint64_t *)nullsub_1(v70);
        sub_EAD948(*v72, (long long *)__p);
      }
      if (*(void *)&v127[32])
      {
        *(void *)&v127[40] = *(void *)&v127[32];
        operator delete(*(void **)&v127[32]);
      }
      if (*(void *)&v127[8])
      {
        *(void *)&v127[16] = *(void *)&v127[8];
        operator delete(*(void **)&v127[8]);
      }
    }
  }
  char v73 = v67 | v69 ^ 1;
  uint64_t v74 = v109;
  if ((v73 & 1) == 0)
  {
    if (sub_EB6EB0((void *)v109) > v106)
    {
      uint64_t v75 = sub_40EFE8(v109);
      uint64_t v76 = sub_52058(v109);
      sub_EB6F18(v109, v75 + 48 * v106, v76);
    }
    memset(__p, 0, sizeof(__p));
    v78 = *v107;
    int64_t v77 = v107[1];
    int64_t v79 = v77 - (unsigned char *)*v107;
    if (v77 != *v107)
    {
      if (0xCCCCCCCCCCCCCCCDLL * (v79 >> 4) > 0x333333333333333) {
        sub_2E00();
      }
      v80 = (char *)operator new(v79);
      __p[0] = v80;
      __p[1] = v80;
      __p[2] = &v80[16 * (v79 >> 4)];
      size_t v81 = 80 * ((v79 - 80) / 0x50uLL) + 80;
      memcpy(v80, v78, v81);
      __p[1] = &v80[v81];
      uint64_t v74 = v109;
    }
    v126 = v107[3];
    memset(v127, 0, 24);
    v83 = *v103;
    int64_t v82 = v103[1];
    int64_t v84 = v82 - (unsigned char *)*v103;
    if (v82 != *v103)
    {
      if (0xCCCCCCCCCCCCCCCDLL * (v84 >> 4) > 0x333333333333333) {
        sub_2E00();
      }
      v85 = (char *)operator new(v84);
      *(void *)v127 = v85;
      *(void *)&v127[8] = v85;
      *(void *)&v127[16] = &v85[16 * (v84 >> 4)];
      size_t v86 = 80 * ((v84 - 80) / 0x50uLL) + 80;
      memcpy(v85, v83, v86);
      *(void *)&v127[8] = &v85[v86];
    }
    *(void *)&v127[24] = v103[3];
    sub_F3553C(v113, (uint64_t)__p, 2uLL);
    sub_F2A8B8();
    v87 = (char *)v113[0];
    if (v113[0])
    {
      v88 = v113[1];
      v89 = v113[0];
      if (v113[1] != v113[0])
      {
        v90 = (char *)v113[1];
        do
        {
          v92 = (void *)*((void *)v90 - 4);
          v90 -= 32;
          v91 = v92;
          if (v92)
          {
            *(v88 - 3) = v91;
            operator delete(v91);
          }
          v88 = v90;
        }
        while (v90 != v87);
        v89 = v113[0];
      }
      v113[1] = v87;
      operator delete(v89);
    }
    if (*(void *)v127)
    {
      *(void *)&v127[8] = *(void *)v127;
      operator delete(*(void **)v127);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  sub_F2B7E8((uint64_t)v12, v105, 1, v74);
  sub_107EE10(v74, 0);
  if (v137) {
    sub_3A6230(v136);
  }
  v93 = (void **)v121;
  if (v121)
  {
    v94 = v122;
    v95 = v121;
    if (v122 != v121)
    {
      do
      {
        if (*((char *)v94 - 1) < 0) {
          operator delete(*(v94 - 3));
        }
        v94 -= 6;
      }
      while (v94 != v93);
      v95 = v121;
    }
    v122 = v93;
    operator delete(v95);
  }
  v96 = (char *)v119;
  if (v119)
  {
    v97 = v120;
    v98 = v119;
    if (v120 != v119)
    {
      do
      {
        v99 = (void *)*((void *)v97 - 3);
        if (v99)
        {
          *((void *)v97 - 2) = v99;
          operator delete(v99);
        }
        v97 -= 48;
      }
      while (v97 != v96);
      v98 = v119;
    }
    v120 = v96;
    operator delete(v98);
  }
}

void sub_F27D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void ***a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  sub_45E914(&a41);
  sub_C63044(a20);
  if (LOBYTE(STACK[0x15F8])) {
    sub_3A6230(&a68);
  }
  sub_28F1C0(&a31);
  _Unwind_Resume(a1);
}

void sub_F27EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t *a7)
{
  HIBYTE(v13) = 15;
  strcpy((char *)__p, "post_processing");
  sub_5C4AC(a5, (uint64_t)__p);
  sub_1000D20();
  long long v9 = (void **)(a1 + 45168);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  sub_10019E4((__n128 *)(a1 + 16), (__n128 *)__p);
  sub_33998(a1 + 45232, (uint64_t)__p);
  sub_1001E6C(a1 + 16, (uint64_t *)__p);
  uint64_t v10 = *v9;
  if (*v9)
  {
    *(void *)(a1 + 45176) = v10;
    operator delete(v10);
    void *v9 = 0;
    *(void *)(a1 + 45176) = 0;
    *(void *)(a1 + 45184) = 0;
  }
  *(_OWORD *)(a1 + 45168) = *(_OWORD *)__p;
  *(void *)(a1 + 45184) = v13;
  uint64_t v11 = (const void *)sub_1001F7C(a1 + 16);
  memcpy((void *)(a1 + 44840), v11, 0x148uLL);
  sub_638A44(*a7);
  sub_F2BB50();
}

void sub_F2805C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **sub_F28078(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_F2CA5C(v3 - 2336);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_F280D4()
{
  uint64_t v0 = __chkstk_darwin();
  int v61 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = (uint64_t **)v0;
  BOOL v65 = v7;
  *(_OWORD *)(v0 + 45232) = xmmword_20B8E30;
  uint64_t v8 = v0 + 45168;
  *(void *)(v0 + 45248) = 0x7FFFFFFFFFFFFFFFLL;
  long long v9 = (_DWORD *)(v0 + 44840);
  *(_OWORD *)(v0 + 44840) = 0u;
  *(_OWORD *)(v0 + 44856) = 0u;
  *(_OWORD *)(v0 + 44872) = 0u;
  *(_OWORD *)(v0 + 44888) = 0u;
  *(_OWORD *)(v0 + 44904) = 0u;
  *(_OWORD *)(v0 + 44920) = 0u;
  *(_OWORD *)(v0 + 44936) = 0u;
  *(_OWORD *)(v0 + 44952) = 0u;
  *(_OWORD *)(v0 + 44968) = 0u;
  *(_OWORD *)(v0 + 44984) = 0u;
  *(_OWORD *)(v0 + 45000) = 0u;
  *(_OWORD *)(v0 + 45016) = 0u;
  *(_OWORD *)(v0 + 45032) = 0u;
  *(_OWORD *)(v0 + 45048) = 0u;
  *(_OWORD *)(v0 + 45064) = 0u;
  *(_OWORD *)(v0 + 45080) = 0u;
  *(_OWORD *)(v0 + 45096) = 0u;
  *(_OWORD *)(v0 + 45112) = 0u;
  *(_OWORD *)(v0 + 45128) = 0u;
  *(_OWORD *)(v0 + 45144) = 0u;
  *(void *)(v0 + 45160) = 0;
  uint64_t v10 = *(void *)(v0 + 45272);
  for (uint64_t i = *(void *)(v0 + 45280); i != v10; i -= 32)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  *(void *)(v8 + 112) = v10;
  sub_F30D58(v65, (uint64_t)(v3[1] - *v3) >> 5);
  v12 = *v6;
  sub_F395A4((uint64_t)v6[1] + 17, (uint64_t)__p);
  uint64_t v13 = sub_374E14(v12, (uint64_t)__p);
  if (v95 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v62 = v9;
  uint64_t v63 = v8;
  sub_F30E44((uint64_t)__p, *v6);
  BOOL v64 = (uint64_t *)v6;
  uint64_t v14 = (uint64_t)*v6;
  HIBYTE(v84[2]) = 11;
  strcpy((char *)v84, "PathFinding");
  v90 = 0;
  v89 = 0;
  uint64_t v91 = 0;
  uint64_t v15 = sub_374CDC(v14, (uint64_t)v84, (uint64_t *)&v89);
  uint64_t v16 = (void **)v89;
  if (v89)
  {
    uint64_t v17 = v90;
    unint64_t v18 = v89;
    if (v90 != v89)
    {
      do
      {
        if (*((char *)v17 - 1) < 0) {
          operator delete(*(v17 - 3));
        }
        v17 -= 3;
      }
      while (v17 != v16);
      unint64_t v18 = v89;
    }
    v90 = v16;
    operator delete(v18);
  }
  if (SHIBYTE(v84[2]) < 0) {
    operator delete(v84[0]);
  }
  HIBYTE(v84[2]) = 12;
  strcpy((char *)v84, "use_dijkstra");
  BOOL v19 = sub_29D62C(v15, (uint64_t)v84);
  if (SHIBYTE(v84[2]) < 0) {
    operator delete(v84[0]);
  }
  HIBYTE(v84[2]) = 21;
  strcpy((char *)v84, "max_num_scanned_nodes");
  int v60 = sub_31AC04(v15, (uint64_t)v84);
  if (SHIBYTE(v84[2]) < 0) {
    operator delete(v84[0]);
  }
  uint64_t v20 = *v6;
  HIBYTE(v84[2]) = 19;
  strcpy((char *)v84, "DrivingPathAnalyzer");
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  int v21 = sub_374CDC((uint64_t)v20, (uint64_t)v84, (uint64_t *)&v75);
  v71[23] = 13;
  strcpy(v71, "path_analyzer");
  uint64_t v22 = sub_561B0(v5, (uint64_t)v71);
  unsigned int v23 = (void *)sub_560F4(v21, v22);
  sub_1068CE4((uint64_t **)&v89, v20, v23, *(unsigned __int8 *)(v64[1] + 16));
  if ((v71[23] & 0x80000000) != 0) {
    operator delete(*(void **)v71);
  }
  uint64_t v24 = (void **)v75;
  if (v75)
  {
    int32x4_t v25 = v76;
    int32x4_t v26 = v75;
    if (v76 != v75)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      int32x4_t v26 = v75;
    }
    uint64_t v76 = v24;
    operator delete(v26);
  }
  uint64_t v59 = v13;
  if (SHIBYTE(v84[2]) < 0) {
    operator delete(v84[0]);
  }
  HIBYTE(v77) = 7;
  strcpy((char *)&v75, "driving");
  double v27 = v64;
  sub_1070DBC(v84, *v64, &v75, *(unsigned __int8 *)(v64[1] + 16));
  if (SHIBYTE(v77) < 0) {
    operator delete(v75);
  }
  sub_F40DCC((uint64_t)&v75, v15, *v64, (uint64_t)&v89, (uint64_t)v84, (uint64_t)__p);
  uint64_t v28 = *v64;
  *(void *)v71 = operator new(0x20uLL);
  *(_OWORD *)&v71[8] = xmmword_20B91C0;
  strcpy(*(char **)v71, "OneToManyPathComputation");
  v66[0] = 0;
  v66[1] = 0;
  uint64_t v67 = 0;
  BOOL v29 = sub_374CDC(v28, (uint64_t)v71, (uint64_t *)v66);
  char v74 = 7;
  strcpy((char *)&v72, "default");
  uint64_t v30 = sub_560F4(v29, (uint64_t)&v72);
  if (v74 < 0) {
    operator delete(v72);
  }
  unsigned int v31 = (void **)v66[0];
  if (v66[0])
  {
    BOOL v32 = (void **)v66[1];
    BOOL v33 = v66[0];
    if (v66[1] != v66[0])
    {
      do
      {
        if (*((char *)v32 - 1) < 0) {
          operator delete(*(v32 - 3));
        }
        v32 -= 3;
      }
      while (v32 != v31);
      BOOL v33 = v66[0];
    }
    v66[1] = v31;
    operator delete(v33);
  }
  if ((v71[23] & 0x80000000) != 0) {
    operator delete(*(void **)v71);
  }
  if (v19) {
    int v34 = 0;
  }
  else {
    int v34 = -1;
  }
  sub_F5982C((uint64_t)v71, v30, *v64, (uint64_t)__p, v34, v60);
  v66[0] = v61;
  v66[1] = v3;
  uint64_t v35 = v64[1];
  uint64_t v67 = v59;
  char v68 = (void *)(v35 + 4);
  char v69 = *(unsigned char *)(v35 + 16);
  sub_F479C0();
  uint64_t v36 = v73;
  if (v73 != v72)
  {
    uint64_t v37 = 0;
    unint64_t v38 = 0xCBEEA4E1A08AD8F3 * (((unsigned char *)v73 - (unsigned char *)v72) >> 3);
    while (1)
    {
      uint64_t v40 = *v65;
      sub_EA7B04((uint64_t)v66, (long long *)((char *)v72 + 472 * v37));
      sub_EB7138((int64x2_t *)(v40 + 24 * v37), (uint64_t)v66, 1);
      if (v70 < 0)
      {
        operator delete(v68);
        int v41 = (void **)v66[0];
        if (v66[0])
        {
LABEL_60:
          int v42 = (char *)v66[1];
          BOOL v39 = v41;
          if (v66[1] != v41)
          {
            do
            {
              uint64_t v43 = (void *)*((void *)v42 - 28);
              if (v43)
              {
                *((void *)v42 - 27) = v43;
                operator delete(v43);
              }
              unint64_t v44 = (void *)*((void *)v42 - 31);
              if (v44)
              {
                *((void *)v42 - 30) = v44;
                operator delete(v44);
              }
              unint64_t v45 = (void *)*((void *)v42 - 39);
              if (v45)
              {
                *((void *)v42 - 38) = v45;
                operator delete(v45);
              }
              v46 = (void *)*((void *)v42 - 42);
              if (v46)
              {
                *((void *)v42 - 41) = v46;
                operator delete(v46);
              }
              uint64_t v47 = *((void *)v42 - 45);
              if (v47)
              {
                uint64_t v48 = *((void *)v42 - 44);
                uint64_t v49 = (void *)*((void *)v42 - 45);
                if (v48 != v47)
                {
                  do
                  {
                    uint64_t v50 = *(void **)(v48 - 24);
                    if (v50)
                    {
                      *(void *)(v48 - 16) = v50;
                      operator delete(v50);
                    }
                    v48 -= 56;
                  }
                  while (v48 != v47);
                  uint64_t v49 = (void *)*((void *)v42 - 45);
                }
                *((void *)v42 - 44) = v47;
                operator delete(v49);
              }
              int v51 = (void *)*((void *)v42 - 56);
              if (v51)
              {
                *((void *)v42 - 55) = v51;
                operator delete(v51);
              }
              v52 = (void **)(v42 - 472);
              if (*(v42 - 449) < 0) {
                operator delete(*v52);
              }
              v42 -= 472;
            }
            while (v52 != v41);
            BOOL v39 = (void **)v66[0];
          }
          v66[1] = v41;
          operator delete(v39);
        }
      }
      else
      {
        int v41 = (void **)v66[0];
        if (v66[0]) {
          goto LABEL_60;
        }
      }
      if (++v37 == v38)
      {
        uint64_t v36 = v72;
        uint64_t v8 = v63;
        double v27 = v64;
        long long v9 = v62;
        break;
      }
    }
  }
  if (v36)
  {
    uint64_t v53 = (uint64_t)v73;
    uint64_t v54 = v36;
    if (v73 != v36)
    {
      do
        uint64_t v53 = sub_405F44(v53 - 472);
      while ((void *)v53 != v36);
      uint64_t v54 = v72;
    }
    char v73 = v36;
    operator delete(v54);
  }
  sub_F0480C((__n128 *)v71, (__n128 *)v66);
  sub_33998((uint64_t)(v27 + 5654), (uint64_t)v66);
  v9[4] = 0;
  _DWORD *v9 = *(_DWORD *)sub_68EB4((uint64_t)&v75);
  v9[2] = *(_DWORD *)sub_68EB4((uint64_t)&v75);
  v9[3] = 0;
  sub_F40DD0(&v75, v66);
  char v55 = *(void **)v8;
  if (*(void *)v8)
  {
    *(void *)(v8 + 8) = v55;
    operator delete(v55);
    *(void *)uint64_t v8 = 0;
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
  }
  *((_OWORD *)v27 + 2823) = *(_OWORD *)v66;
  *(void *)(v8 + 16) = v67;
  uint64_t v57 = *v65;
  uint64_t v56 = v65[1];
  if (*v65 != v56)
  {
    do
    {
      sub_107EE10(v57, 1);
      v57 += 24;
    }
    while (v57 != v56);
  }
  if (v82)
  {
    v83 = v82;
    operator delete(v82);
  }
  if (v80)
  {
    size_t v81 = v80;
    operator delete(v80);
  }
  if (v78)
  {
    int64_t v79 = v78;
    operator delete(v78);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  sub_32834C(v86);
  if (v85 < 0)
  {
    operator delete(v84[18]);
    if ((v93 & 0x80000000) == 0) {
      return sub_C77084(__p);
    }
LABEL_105:
    operator delete(v92);
    return sub_C77084(__p);
  }
  if (v93 < 0) {
    goto LABEL_105;
  }
  return sub_C77084(__p);
}

void sub_F28988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void ****a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (SLOBYTE(STACK[0x219F]) < 0) {
    operator delete((void *)STACK[0x2188]);
  }
  sub_C77084(&STACK[0x21E0]);
  sub_C628C4(a16);
  _Unwind_Resume(a1);
}

void sub_F28B00()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  v178 = v3;
  unint64_t v186 = v5;
  v188 = v4;
  v183.n128_u64[0] = v6;
  v183.n128_u64[1] = v7;
  long long v9 = v8;
  uint64_t v10 = (uint64_t *)v0;
  uint64_t v12 = v11;
  *(_OWORD *)(v0 + 45232) = xmmword_20B8E30;
  uint64_t v13 = v0 + 45168;
  *(void *)(v0 + 45248) = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v14 = (_DWORD *)(v0 + 44840);
  *(_OWORD *)(v0 + 44840) = 0u;
  *(_OWORD *)(v0 + 44856) = 0u;
  *(_OWORD *)(v0 + 44872) = 0u;
  *(_OWORD *)(v0 + 44888) = 0u;
  *(_OWORD *)(v0 + 44904) = 0u;
  *(_OWORD *)(v0 + 44920) = 0u;
  *(_OWORD *)(v0 + 44936) = 0u;
  *(_OWORD *)(v0 + 44952) = 0u;
  *(_OWORD *)(v0 + 44968) = 0u;
  *(_OWORD *)(v0 + 44984) = 0u;
  *(_OWORD *)(v0 + 45000) = 0u;
  *(_OWORD *)(v0 + 45016) = 0u;
  *(_OWORD *)(v0 + 45032) = 0u;
  *(_OWORD *)(v0 + 45048) = 0u;
  *(_OWORD *)(v0 + 45064) = 0u;
  *(_OWORD *)(v0 + 45080) = 0u;
  *(_OWORD *)(v0 + 45096) = 0u;
  *(_OWORD *)(v0 + 45112) = 0u;
  *(_OWORD *)(v0 + 45128) = 0u;
  *(_OWORD *)(v0 + 45144) = 0u;
  *(void *)(v0 + 45160) = 0;
  uint64_t v15 = *(void *)(v0 + 45272);
  uint64_t v179 = v0 + 45272;
  for (uint64_t i = *(void *)(v0 + 45280); i != v15; i -= 32)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  *(void *)(v13 + 112) = v15;
  v246 = 0;
  v245 = 0;
  uint64_t v247 = 0;
  memset(v244, 0, sizeof(v244));
  uint64_t v17 = *v10;
  HIBYTE(v256[2]) = 18;
  strcpy((char *)v256, "DrivingPathFinding");
  memset(__p, 0, 24);
  v181 = sub_374CDC(v17, (uint64_t)v256, (uint64_t *)__p);
  unint64_t v18 = (void **)__p[0];
  if (__p[0])
  {
    BOOL v19 = (void **)__p[1];
    uint64_t v20 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v19 - 1) < 0) {
          operator delete(*(v19 - 3));
        }
        v19 -= 3;
      }
      while (v19 != v18);
      uint64_t v20 = __p[0];
    }
    __p[1] = v18;
    operator delete(v20);
  }
  if (SHIBYTE(v256[2]) < 0) {
    operator delete(v256[0]);
  }
  HIBYTE(v256[2]) = 21;
  strcpy((char *)v256, "waypoint_path_finding");
  int v21 = (void *)sub_560F4(v181, (uint64_t)v256);
  if (SHIBYTE(v256[2]) < 0) {
    operator delete(v256[0]);
  }
  int v22 = *(_DWORD *)(v10[1] + 36);
  v256[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v256[1] = xmmword_20B91C0;
  strcpy(v256[0], "enforce_single_leg_paths");
  if (sub_29D62C(v21, (uint64_t)v256))
  {
    char v23 = 0;
    if ((SHIBYTE(v256[2]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_20;
  }
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "enforce_multi_leg_paths");
  char v23 = sub_29D62C(v21, (uint64_t)__p) | v22;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v256[2]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_20:
    operator delete(v256[0]);
    goto LABEL_23;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v256[2]) < 0) {
    goto LABEL_20;
  }
LABEL_23:
  BOOL v24 = sub_401FE4(v2);
  if (*(unsigned char *)(v2 + 481)) {
    BOOL v25 = 0;
  }
  else {
    BOOL v25 = v24;
  }
  BOOL v180 = v25;
  sub_F30E44((uint64_t)v256, (void *)*v10);
  v189 = v10;
  uint64_t v26 = *v10;
  HIBYTE(__p[2]) = 11;
  strcpy((char *)__p, "PathFinding");
  memset(v248, 0, 24);
  double v27 = sub_374CDC(v26, (uint64_t)__p, (uint64_t *)v248);
  unint64_t v28 = v248[0].n128_u64[0];
  if (v248[0].n128_u64[0])
  {
    unint64_t v29 = v248[0].n128_u64[1];
    uint64_t v30 = (void *)v248[0].n128_u64[0];
    if (v248[0].n128_u64[1] != v248[0].n128_u64[0])
    {
      do
      {
        if (*(char *)(v29 - 1) < 0) {
          operator delete(*(void **)(v29 - 24));
        }
        v29 -= 24;
      }
      while (v29 != v28);
      uint64_t v30 = (void *)v248[0].n128_u64[0];
    }
    v248[0].n128_u64[1] = v28;
    operator delete(v30);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "use_dijkstra");
  BOOL v31 = sub_29D62C(v27, (uint64_t)__p);
  v174 = v14;
  uint64_t v177 = v13;
  uint64_t v175 = v12;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "max_num_scanned_nodes");
  int v32 = sub_31AC04(v27, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  BOOL v33 = (uint64_t *)*v189;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "DrivingPathAnalyzer");
  memset(v248, 0, 24);
  int v34 = sub_374CDC((uint64_t)v33, (uint64_t)__p, (uint64_t *)v248);
  BYTE7(v258) = 13;
  strcpy((char *)&v257, "path_analyzer");
  uint64_t v35 = sub_561B0(v9, (uint64_t)&v257);
  uint64_t v36 = (void *)sub_560F4(v34, v35);
  sub_1068CE4(v242, v33, v36, *(unsigned __int8 *)(v189[1] + 16));
  if (SBYTE7(v258) < 0) {
    operator delete((void *)v257.n128_u64[0]);
  }
  unint64_t v37 = v248[0].n128_u64[0];
  if (v248[0].n128_u64[0])
  {
    unint64_t v38 = v248[0].n128_u64[1];
    BOOL v39 = (void *)v248[0].n128_u64[0];
    if (v248[0].n128_u64[1] != v248[0].n128_u64[0])
    {
      do
      {
        if (*(char *)(v38 - 1) < 0) {
          operator delete(*(void **)(v38 - 24));
        }
        v38 -= 24;
      }
      while (v38 != v37);
      BOOL v39 = (void *)v248[0].n128_u64[0];
    }
    v248[0].n128_u64[1] = v37;
    operator delete(v39);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  v248[1].n128_u8[7] = 7;
  strcpy((char *)v248, "driving");
  sub_1070DBC(__p, *v189, v248, *(unsigned __int8 *)(v189[1] + 16));
  if (v248[1].n128_i8[7] < 0) {
    operator delete((void *)v248[0].n128_u64[0]);
  }
  sub_F40DCC((uint64_t)v230, v27, *v189, (uint64_t)v242, (uint64_t)__p, (uint64_t)v256);
  uint64_t v40 = *v189;
  v248[0].n128_u64[0] = (unint64_t)operator new(0x19uLL);
  *(__n128 *)((char *)v248 + 8) = (__n128)xmmword_20B9250;
  strcpy((char *)v248[0].n128_u64[0], "WaypointPathComputation");
  __n128 v257 = 0uLL;
  *(void *)&long long v258 = 0;
  int v41 = sub_374CDC(v40, (uint64_t)v248, (uint64_t *)&v257);
  char v221 = 7;
  strcpy((char *)v220, "default");
  uint64_t v42 = sub_560F4(v41, (uint64_t)v220);
  if (v221 < 0) {
    operator delete(v220[0]);
  }
  unint64_t v43 = v257.n128_u64[0];
  if (v257.n128_u64[0])
  {
    unint64_t v44 = v257.n128_u64[1];
    unint64_t v45 = (void *)v257.n128_u64[0];
    if (v257.n128_u64[1] != v257.n128_u64[0])
    {
      do
      {
        if (*(char *)(v44 - 1) < 0) {
          operator delete(*(void **)(v44 - 24));
        }
        v44 -= 24;
      }
      while (v44 != v43);
      unint64_t v45 = (void *)v257.n128_u64[0];
    }
    v257.n128_u64[1] = v43;
    operator delete(v45);
  }
  if (v248[1].n128_i8[7] < 0) {
    operator delete((void *)v248[0].n128_u64[0]);
  }
  sub_F395A4(v189[1] + 17, (uint64_t)v228);
  uint64_t v46 = sub_374E14((uint64_t *)*v189, (uint64_t)v228);
  sub_F2CD30((uint64_t)v220, v46);
  int v47 = v31 - 1;
  if (v23)
  {
    sub_F710D0(v21, (uint64_t)&v218);
    sub_F6FC9C((uint64_t)&v214, v42, *v189, (uint64_t)v256, v47, v32);
    v248[0] = v183;
    v248[1].n128_u64[0] = v186;
    v248[1].n128_u64[1] = (unint64_t)v220;
    *(void *)&long long v249 = 0;
    sub_F4A390();
    uint64_t v48 = (char *)v212;
    if (v212 != v213)
    {
      do
      {
        uint64_t v49 = (uint64_t *)nullsub_1(v48);
        uint64_t v51 = *v49;
        uint64_t v50 = v49[1];
        if (*v49 != v50)
        {
          do
          {
            uint64_t v52 = sub_69134(v51);
            __n128 v53 = *(__n128 *)(v52 + 16);
            long long v54 = *(_OWORD *)(v52 + 32);
            uint64_t v55 = *(void *)(v52 + 64);
            long long v250 = *(_OWORD *)(v52 + 48);
            __n128 v56 = *(__n128 *)v52;
            uint64_t v251 = v55;
            long long v249 = v54;
            v248[0] = v56;
            v248[1] = v53;
            *(void *)&long long v250 = 0;
            sub_EAD920(v51, (uint64_t)v248);
            uint64_t v57 = sub_EADAD0(v51);
            long long v58 = *(_OWORD *)(v57 + 16);
            long long v59 = *(_OWORD *)(v57 + 32);
            uint64_t v60 = *(void *)(v57 + 64);
            long long v260 = *(_OWORD *)(v57 + 48);
            __n128 v61 = *(__n128 *)v57;
            uint64_t v261 = v60;
            long long v259 = v59;
            __n128 v257 = v61;
            long long v258 = v58;
            *(void *)&long long v260 = 0;
            sub_EADAA8(v51, (uint64_t)&v257);
            v51 += 472;
          }
          while (v51 != v50);
        }
        v48 += 48;
      }
      while (v48 != v213);
    }
    uint64_t v62 = (void *)v189[1];
    int v63 = *((_DWORD *)v62 + 3);
    uint64_t v210 = *(void *)((char *)v62 + 4);
    int v211 = v63;
    BOOL v65 = *v178;
    BOOL v64 = v178[1];
    if (*v178 == v64)
    {
      uint64_t v67 = 0;
      goto LABEL_105;
    }
    unint64_t v66 = (char *)v64 - (char *)v65 - 8;
    if (v66 >= 0x18)
    {
      uint64_t v81 = (v66 >> 3) + 1;
      char v68 = (int64x2_t *)((char *)v65 + 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL));
      int64_t v82 = v65 + 1;
      int64x2_t v83 = 0uLL;
      uint64_t v84 = v81 & 0x3FFFFFFFFFFFFFFCLL;
      int64x2_t v85 = 0uLL;
      do
      {
        int64x2_t v83 = vaddq_s64(v82[-1], v83);
        int64x2_t v85 = vaddq_s64(*v82, v85);
        v82 += 2;
        v84 -= 4;
      }
      while (v84);
      uint64_t v67 = vaddvq_s64(vaddq_s64(v85, v83));
      if (v81 == (v81 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_105:
        sub_F2CEBC();
        v208 = 0;
        unint64_t v209 = 0;
        v207 = 0;
        int v182 = *(_DWORD *)(v189[1] + 12);
        unint64_t v176 = (((uint64_t)(v188[1] - *v188) >> 5) + 1) & 0xFFFFFFFFFFFFFFFELL;
        if (v176)
        {
          uint64_t v87 = 0;
          unint64_t v88 = 0;
          do
          {
            unint64_t v89 = v88;
            if (v182 == 1) {
              unint64_t v89 = ((uint64_t)(v188[1] - *v188) >> 5) - v88 - 2;
            }
            unint64_t v185 = v88;
            uint64_t v187 = v87;
            sub_F170E0(v205, v67, (*v178)->i64[v89 >> 1], v87);
            uint64_t v184 = (*v178)->i64[v89 >> 1];
            v90 = (void **)v218;
            uint64_t v91 = v219;
            if ((char *)v219 - (unsigned char *)v218 >= 48)
            {
              if ((char *)v219 - (unsigned char *)v218 != 48)
              {
                unint64_t v92 = ((char *)v219 - (unsigned char *)v218) / 0x30uLL;
                do
                {
                  uint64_t v93 = 6 * (v92 >> 2);
                  _X9 = &v90[v93];
                  __asm { PRFM            #0, [X9] }
                  uint64_t v100 = &v90[6 * (v92 >> 1)];
                  _X8 = &v100[v93];
                  __asm { PRFM            #0, [X8] }
                  if (sub_F7108C(v100, v205)) {
                    unint64_t v103 = v92 >> 1;
                  }
                  else {
                    unint64_t v103 = 0;
                  }
                  v90 += 6 * v103;
                  v92 -= v92 >> 1;
                }
                while ((uint64_t)v92 > 1);
              }
              v90 += 6 * sub_F7108C(v90, v205);
              uint64_t v91 = v219;
            }
            if (v90 == v91) {
              BOOL v104 = v91 - 6;
            }
            else {
              BOOL v104 = v90;
            }
            if (*((char *)v104 + 47) < 0)
            {
              sub_4200(__dst, v104[3], (unint64_t)v104[4]);
            }
            else
            {
              *(_OWORD *)__dst = *(_OWORD *)(v104 + 3);
              v204 = v104[5];
            }
            uint64_t v105 = (void *)sub_560F4(v181, (uint64_t)__dst);
            v200 = 0;
            v201 = 0;
            uint64_t v202 = 0;
            sub_F34748((uint64_t)&v200, 0xAAAAAAAAAAAAAAABLL * ((v213 - (unsigned char *)v212) >> 4));
            v107 = (char *)v212;
            uint64_t v106 = v213;
            if (v212 != v213)
            {
              uint64_t v108 = (uint64_t)v201;
              do
              {
                uint64_t v109 = (long long *)sub_EA8060(v107, v89 >> 1);
                sub_444D20((char *)&v257, v109);
                int v110 = sub_F34880((uint64_t *)&v200, v108, (long long *)&v257);
                if (v270)
                {
                  v271 = v270;
                  operator delete(v270);
                }
                if (v268)
                {
                  v269 = v268;
                  operator delete(v268);
                }
                if (v266)
                {
                  v267 = v266;
                  operator delete(v266);
                }
                if (v264)
                {
                  v265 = v264;
                  operator delete(v264);
                }
                int v111 = v262;
                if (v262)
                {
                  v112 = v263;
                  v113 = v262;
                  if (v263 != v262)
                  {
                    do
                    {
                      v114 = (void *)*((void *)v112 - 3);
                      if (v114)
                      {
                        *((void *)v112 - 2) = v114;
                        operator delete(v114);
                      }
                      v112 -= 56;
                    }
                    while (v112 != v111);
                    v113 = v262;
                  }
                  v263 = v111;
                  operator delete(v113);
                }
                if (*((void *)&v258 + 1))
                {
                  *(void *)&long long v259 = *((void *)&v258 + 1);
                  operator delete(*((void **)&v258 + 1));
                }
                if (SBYTE7(v258) < 0) {
                  operator delete((void *)v257.n128_u64[0]);
                }
                uint64_t v108 = (uint64_t)v110 + 472;
                v107 += 48;
              }
              while (v107 != v106);
            }
            uint64_t v115 = *v188 + 32 * (v89 + 1);
            v196 = 0;
            v197 = 0;
            v195 = 0;
            int v117 = *(const void **)v115;
            uint64_t v116 = *(void *)(v115 + 8);
            int64_t v118 = v116 - *(void *)v115;
            if (v116 != *(void *)v115)
            {
              if (0xCCCCCCCCCCCCCCCDLL * (v118 >> 4) >= 0x333333333333334) {
                sub_2E00();
              }
              v119 = (char *)operator new(v118);
              v195 = v119;
              v196 = v119;
              v197 = &v119[16 * (v118 >> 4)];
              size_t v120 = 80 * ((v118 - 80) / 0x50uLL) + 80;
              memcpy(v119, v117, v120);
              v196 = &v119[v120];
            }
            uint64_t v198 = *(void *)(v115 + 24);
            uint64_t v199 = 0;
            sub_1000AF8((uint64_t)(v189 + 2), v105, 1, (uint64_t)&v257, (long long **)&v200);
            if (!v180)
            {
              BYTE7(v192) = 15;
              strcpy((char *)v191, "post_processing");
              sub_5C4AC(v9, (uint64_t)v191);
              sub_1000D20();
              if (SBYTE7(v192) < 0) {
                operator delete(v191[0]);
              }
            }
            BOOL v121 = sub_1005D48((uint64_t)&v257);
            BOOL v122 = v121;
            if (v121)
            {
              v190.n128_u64[0] = 10;
              v190.n128_u64[1] = (unint64_t)&off_2439090;
              sub_3E78B0((__n128 *)v191, &v190, v89);
              *(_OWORD *)(v189 + 5657) = *(_OWORD *)v191;
              int v123 = *(void ***)v179;
              uint64_t v124 = v177;
              if (*(void *)v179)
              {
                v125 = *(void ***)(v177 + 112);
                v126 = *(void ***)v179;
                if (v125 != v123)
                {
                  do
                  {
                    if (*((char *)v125 - 1) < 0) {
                      operator delete(*(v125 - 3));
                    }
                    v125 -= 4;
                  }
                  while (v125 != v123);
                  v126 = *(void ***)v179;
                }
                uint64_t v124 = v177;
                *(void *)(v177 + 112) = v123;
                operator delete(v126);
                *(void *)uint64_t v179 = 0;
                *(void *)(v179 + 8) = 0;
                *(void *)(v179 + 16) = 0;
              }
              *(_OWORD *)(v124 + 104) = v192;
              *(void *)(v124 + 120) = v193;
              uint64_t v193 = 0;
              long long v192 = 0uLL;
              *(_DWORD *)(v124 + 128) = v194;
              *(void *)uint64_t v175 = 0;
              *(void *)(v175 + 8) = 0;
              *(void *)(v175 + 16) = 0;
              sub_F2CA5C((uint64_t)&v257);
              int v139 = (char *)v195;
              if (v195) {
                goto LABEL_176;
              }
            }
            else
            {
              v127 = (void *)sub_638A44((uint64_t)&v257);
              if (*v127 != v127[1])
              {
                __int16 v128 = (void *)sub_638A44((uint64_t)&v257);
                uint64_t v129 = *(void *)nullsub_1(*v128);
                unint64_t v130 = (uint64_t *)*v189;
                BYTE7(v192) = 8;
                strcpy((char *)v191, "standard");
                uint64_t v131 = sub_374E14(v130, (uint64_t)v191);
                unint64_t v132 = sub_1081054(v129, (uint64_t)v248, v131, *(unsigned __int8 *)(v189[1] + 16), v210, (uint64_t)&v190, (void *)*v189);
                if (SBYTE7(v192) < 0) {
                  operator delete(v191[0]);
                }
                unint64_t v133 = HIDWORD(v132);
                if (v182 == 1) {
                  LODWORD(v133) = -HIDWORD(v132);
                }
                int v134 = (int)v133 / 10;
                int v135 = (int)v133 % 10;
                if ((v133 & 0x80000000) != 0) {
                  char v136 = -5;
                }
                else {
                  char v136 = 5;
                }
                LODWORD(v210) = v134
                              + v210
                              + (((103 * (char)(v136 + v135)) >> 15) & 1)
                              + ((103 * (char)(v136 + v135)) >> 10);
              }
              char v137 = v208;
              if ((unint64_t)v208 >= v209)
              {
                uint64_t v138 = (char *)sub_F2EBA4(&v207, (uint64_t)&v257);
              }
              else
              {
                sub_F2DB40((uint64_t)v208, (uint64_t)&v257);
                uint64_t v138 = v137 + 2336;
              }
              v208 = v138;
              sub_F2CA5C((uint64_t)&v257);
              int v139 = (char *)v195;
              if (v195)
              {
LABEL_176:
                v196 = v139;
                operator delete(v139);
              }
            }
            v140 = (void **)v200;
            if (v200)
            {
              v141 = v201;
              v142 = v200;
              if (v201 != v200)
              {
                do
                {
                  v143 = *(v141 - 28);
                  if (v143)
                  {
                    *(v141 - 27) = v143;
                    operator delete(v143);
                  }
                  v144 = *(v141 - 31);
                  if (v144)
                  {
                    *(v141 - 30) = v144;
                    operator delete(v144);
                  }
                  v145 = *(v141 - 39);
                  if (v145)
                  {
                    *(v141 - 38) = v145;
                    operator delete(v145);
                  }
                  v146 = *(v141 - 42);
                  if (v146)
                  {
                    *(v141 - 41) = v146;
                    operator delete(v146);
                  }
                  v147 = (char *)*(v141 - 45);
                  if (v147)
                  {
                    v148 = (char *)*(v141 - 44);
                    v149 = *(v141 - 45);
                    if (v148 != v147)
                    {
                      do
                      {
                        v150 = (void *)*((void *)v148 - 3);
                        if (v150)
                        {
                          *((void *)v148 - 2) = v150;
                          operator delete(v150);
                        }
                        v148 -= 56;
                      }
                      while (v148 != v147);
                      v149 = *(v141 - 45);
                    }
                    *(v141 - 44) = v147;
                    operator delete(v149);
                  }
                  v151 = *(v141 - 56);
                  if (v151)
                  {
                    *(v141 - 55) = v151;
                    operator delete(v151);
                  }
                  v152 = v141 - 59;
                  if (*((char *)v141 - 449) < 0) {
                    operator delete(*v152);
                  }
                  v141 -= 59;
                }
                while (v152 != v140);
                v142 = v200;
              }
              v201 = v140;
              operator delete(v142);
            }
            if (SHIBYTE(v204) < 0)
            {
              operator delete(__dst[0]);
              if (v206 < 0)
              {
LABEL_208:
                operator delete(v205[3]);
                if (v122) {
                  goto LABEL_229;
                }
                goto LABEL_209;
              }
            }
            else if (v206 < 0)
            {
              goto LABEL_208;
            }
            if (v122) {
              goto LABEL_229;
            }
LABEL_209:
            uint64_t v87 = v184 + v187;
            unint64_t v88 = v185 + 2;
          }
          while (v185 + 2 != v176);
        }
        sub_10019E4((__n128 *)v189 + 1, &v257);
        sub_33998((uint64_t)(v189 + 5654), (uint64_t)&v257);
        sub_1001E6C((uint64_t)(v189 + 2), (uint64_t *)&v257);
        v153 = *(void **)v177;
        if (*(void *)v177)
        {
          *(void *)(v177 + 8) = v153;
          operator delete(v153);
          *(void *)uint64_t v177 = 0;
          *(void *)(v177 + 8) = 0;
          *(void *)(v177 + 16) = 0;
        }
        *((__n128 *)v189 + 2823) = v257;
        *(void *)(v177 + 16) = v258;
        v154 = (const void *)sub_1001F7C((uint64_t)(v189 + 2));
        memcpy(v174, v154, 0x148uLL);
        v155 = (char *)v207;
        if (v207 == v208)
        {
          *(void *)uint64_t v175 = 0;
          *(void *)(v175 + 8) = 0;
          *(void *)(v175 + 16) = 0;
        }
        else
        {
          if (v182 == 1)
          {
            unint64_t v156 = (unint64_t)(v208 - 2336);
            if (v208 - 2336 > v207)
            {
              do
              {
                sub_F2DB40((uint64_t)&v257, (uint64_t)v155);
                sub_F34D74((uint64_t)v155, v156);
                sub_F34D74(v156, (uint64_t)&v257);
                sub_F2CA5C((uint64_t)&v257);
                v155 += 2336;
                v156 -= 2336;
              }
              while ((unint64_t)v155 < v156);
            }
          }
          *(void *)uint64_t v175 = 0;
          *(void *)(v175 + 8) = 0;
          *(void *)(v175 + 16) = 0;
          if (v180)
          {
            sub_F2C2FC(&v257, v9);
            sub_F2A8B8();
            v157 = (uint64_t *)sub_40EFE8(v175);
            uint64_t v158 = sub_52058(v175);
            if (v157 == (uint64_t *)v158)
            {
              LOBYTE(v160) = 1;
            }
            else
            {
              do
              {
                sub_EA82B8(v157);
                uint64_t v160 = (v159 >> 8) & 1;
                if ((v159 & 0x100) == 0) {
                  break;
                }
                v157 += 6;
              }
              while (v157 != (uint64_t *)v158);
            }
            sub_F2B7E8((uint64_t)v189, (uint64_t)__p, v160, v175);
          }
          else
          {
            sub_F2BB50();
            if (*(void *)v175)
            {
              sub_C64384(v175, *(void ***)v175);
              operator delete(*(void **)v175);
              *(void *)uint64_t v175 = 0;
              *(void *)(v175 + 8) = 0;
              *(void *)(v175 + 16) = 0;
            }
            *(__n128 *)uint64_t v175 = v257;
            *(void *)(v175 + 16) = v258;
          }
        }
LABEL_229:
        v161 = (char *)v207;
        if (v207)
        {
          v162 = v208;
          v163 = v207;
          if (v208 != v207)
          {
            do
              v162 = (char *)sub_F2CA5C((uint64_t)(v162 - 2336));
            while (v162 != v161);
            v163 = v207;
          }
          v208 = v161;
          operator delete(v163);
        }
        if (v255) {
          sub_3A6230((void *)&v250 + 1);
        }
        if (v212)
        {
          sub_C64384((uint64_t)&v212, (void **)v212);
          operator delete(v212);
        }
        v164 = (void **)v216;
        if (v216)
        {
          v165 = v217;
          v166 = v216;
          if (v217 != v216)
          {
            do
            {
              if (*((char *)v165 - 1) < 0) {
                operator delete(*(v165 - 3));
              }
              v165 -= 4;
            }
            while (v165 != v164);
            v166 = v216;
          }
          v217 = v164;
          operator delete(v166);
        }
        v167 = (void **)v218;
        if (v218)
        {
          v168 = v219;
          v80 = v218;
          if (v219 != v218)
          {
            do
            {
              if (*((char *)v168 - 1) < 0) {
                operator delete(*(v168 - 3));
              }
              v168 -= 6;
            }
            while (v168 != v167);
            v80 = v218;
          }
          v219 = v167;
LABEL_254:
          operator delete(v80);
          goto LABEL_255;
        }
        goto LABEL_255;
      }
    }
    else
    {
      uint64_t v67 = 0;
      char v68 = *v178;
    }
    do
    {
      uint64_t v86 = v68->i64[0];
      char v68 = (int64x2_t *)((char *)v68 + 8);
      v67 += v86;
    }
    while (v68 != v64);
    goto LABEL_105;
  }
  if (v180)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v248);
      sub_188FC78(v248, (uint64_t)"Got an EV MPR request that does not support multi-leg paths.", 60);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v257, 3u);
      if (SBYTE7(v258) < 0) {
        operator delete((void *)v257.n128_u64[0]);
      }
      if (SHIBYTE(v253) < 0) {
        operator delete(v252);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(void *)uint64_t v175 = 0;
    *(void *)(v175 + 8) = 0;
    *(void *)(v175 + 16) = 0;
  }
  else
  {
    sub_F6FC9C((uint64_t)v248, v42, *v189, (uint64_t)v256, v47, v32);
    __n128 v257 = v183;
    *(void *)&long long v258 = v186;
    *((void *)&v258 + 1) = v220;
    *(void *)&long long v259 = 0;
    sub_F48EA8();
    sub_EB6874((unint64_t)&v245, (long long **)&v214, 1);
    sub_F0480C(v248, &v257);
    sub_33998((uint64_t)(v189 + 5654), (uint64_t)&v257);
    char v69 = (unsigned char **)sub_6477D4((uint64_t)v248);
    sub_3E7ED8((void **)v179, *(char **)(v13 + 112), *v69, v69[1], (v69[1] - *v69) >> 5);
    char v70 = *(unsigned __int8 **)(v13 + 104);
    v71 = *(unsigned __int8 **)(v13 + 112);
    unint64_t v72 = 126 - 2 * __clz((v71 - v70) >> 5);
    if (v71 == v70) {
      uint64_t v73 = 0;
    }
    else {
      uint64_t v73 = v72;
    }
    sub_F31400(v70, v71, (uint64_t)&v257, v73, 1);
    sub_F31318((unsigned __int8 **)v179);
    v174[4] = 0;
    _DWORD *v174 = *(_DWORD *)sub_68EB4((uint64_t)v230);
    v174[2] = *(_DWORD *)sub_68EB4((uint64_t)v230);
    v174[3] = 0;
    sub_F40DD0(v230, &v257);
    char v74 = *(void **)v13;
    if (*(void *)v13)
    {
      *(void *)(v13 + 8) = v74;
      operator delete(v74);
      *(void *)uint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
    }
    *((__n128 *)v189 + 2823) = v257;
    *(void *)(v13 + 16) = v258;
    sub_F2A7E8(&v245, v175);
    sub_107EE10(v175, 1);
    uint64_t v75 = v214;
    if (v214)
    {
      uint64_t v76 = (uint64_t)v215;
      uint64_t v77 = v214;
      if (v215 != v214)
      {
        do
          uint64_t v76 = sub_405F44(v76 - 472);
        while ((void *)v76 != v75);
        uint64_t v77 = v214;
      }
      v215 = v75;
      operator delete(v77);
    }
    v78 = v253;
    if (v253)
    {
      int64_t v79 = v254;
      v80 = v253;
      if (v254 != v253)
      {
        do
        {
          if (*((char *)v79 - 1) < 0) {
            operator delete(*(v79 - 3));
          }
          v79 -= 4;
        }
        while (v79 != v78);
        v80 = v253;
      }
      v254 = v78;
      goto LABEL_254;
    }
  }
LABEL_255:
  if (v226)
  {
    v227 = v226;
    operator delete(v226);
  }
  if (v224)
  {
    v225 = v224;
    operator delete(v224);
  }
  sub_3817F8(&v223);
  if (v222 < 0)
  {
    operator delete(v220[1]);
    if ((v229 & 0x80000000) == 0)
    {
LABEL_261:
      v169 = v235;
      if (!v235) {
        goto LABEL_263;
      }
      goto LABEL_262;
    }
  }
  else if ((v229 & 0x80000000) == 0)
  {
    goto LABEL_261;
  }
  operator delete(v228[0]);
  v169 = v235;
  if (v235)
  {
LABEL_262:
    v236 = v169;
    operator delete(v169);
  }
LABEL_263:
  if (v233)
  {
    v234 = v233;
    operator delete(v233);
  }
  if (v231)
  {
    v232 = v231;
    operator delete(v231);
  }
  if (v240)
  {
    v241 = v240;
    operator delete(v240);
  }
  sub_32834C(&v239);
  if (v238 < 0)
  {
    operator delete(__p[18]);
    if ((v243 & 0x80000000) == 0)
    {
LABEL_271:
      sub_C77084(v256);
      v170 = (void **)v244[0];
      if (!v244[0]) {
        goto LABEL_273;
      }
      goto LABEL_272;
    }
  }
  else if ((v243 & 0x80000000) == 0)
  {
    goto LABEL_271;
  }
  operator delete(v242[12]);
  sub_C77084(v256);
  v170 = (void **)v244[0];
  if (v244[0])
  {
LABEL_272:
    sub_C64384((uint64_t)v244, v170);
    operator delete(v244[0]);
  }
LABEL_273:
  v171 = v245;
  if (v245)
  {
    uint64_t v172 = (uint64_t)v246;
    v173 = v245;
    if (v246 != v245)
    {
      do
        uint64_t v172 = sub_405F44(v172 - 472);
      while ((void *)v172 != v171);
      v173 = v245;
    }
    v246 = v171;
    operator delete(v173);
  }
}

void sub_F2A3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void ***a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void **a62,uint64_t a63)
{
  sub_C63044(a16);
  sub_F28078(&a57);
  if (LOBYTE(STACK[0x3D30])) {
    sub_3A6230(&STACK[0x28F8]);
  }
  sub_C63044(&a62);
  sub_C64EA0((uint64_t)&a65);
  sub_28F14C((void **)&STACK[0x238]);
  sub_F2C150((uint64_t)&STACK[0x250]);
  if (SLOBYTE(STACK[0x77F]) < 0) {
    operator delete((void *)STACK[0x768]);
  }
  sub_C62948(&STACK[0x780]);
  sub_C6299C((uint64_t)&STACK[0x820]);
  if (SLOBYTE(STACK[0x284F]) < 0) {
    operator delete((void *)STACK[0x2838]);
  }
  sub_C77084(&STACK[0x3D40]);
  sub_C63044((void ***)&STACK[0x2890]);
  sub_4323C0((void **)&STACK[0x28A8]);
  _Unwind_Resume(a1);
}

double sub_F2A7E8@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v9 = 0uLL;
  uint64_t v10 = 0;
  unsigned int v4 = sub_EB6658(a1);
  sub_C635D8((unint64_t *)&v9, v4);
  unint64_t v5 = (char *)*((void *)&v9 + 1);
  unint64_t v6 = (long long *)sub_40EFE8((uint64_t)a1);
  unint64_t v7 = (long long *)sub_52058((uint64_t)a1);
  sub_F3420C(v6, v7, (char **)&v9, v5);
  if (*(void *)a2)
  {
    sub_C64384(a2, *(void ***)a2);
    operator delete(*(void **)a2);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  double result = *(double *)&v9;
  *(_OWORD *)a2 = v9;
  *(void *)(a2 + 16) = v10;
  return result;
}

void sub_F2A898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_C63044(&a9);
  sub_C63044(v9);
  _Unwind_Resume(a1);
}

void sub_F2A8B8()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v105 = v3;
  unint64_t v5 = v4;
  unint64_t v6 = (void **)v0;
  v107 = v7;
  sub_45FB38(v7);
  uint64_t v106 = (uint64_t *)sub_376F8C(*v6);
  sub_FE64A0((uint64_t)v140, (uint64_t)*v6);
  BYTE7(v128) = 15;
  strcpy((char *)&v127, "post_processing");
  qmemcpy(v104, "ocessingpost_pro", sizeof(v104));
  sub_5C4AC(v5, (uint64_t)&v127);
  uint64_t v109 = (__n128 *)(v6 + 2);
  sub_FE64F4();
  if (SBYTE7(v128) < 0) {
    operator delete((void *)v127.n128_u64[0]);
  }
  uint64_t v8 = (const void *)sub_1001F7C((uint64_t)v109);
  memcpy(v6 + 5605, v8, 0x148uLL);
  sub_FEA6A8((uint64_t)v140, (uint64_t)&v127);
  *((_OWORD *)v6 + 2819) = v130;
  *((_OWORD *)v6 + 2820) = v131;
  *((_OWORD *)v6 + 2821) = v132[0];
  *((__n128 *)v6 + 2816) = v127;
  *((_OWORD *)v6 + 2817) = v128;
  *((_OWORD *)v6 + 2818) = v129;
  *(_OWORD *)((char *)v6 + 45149) = *(_OWORD *)((char *)v132 + 13);
  sub_FEA694((uint64_t)v140, &v127);
  sub_33998((uint64_t)(v6 + 5654), (uint64_t)&v127);
  long long v137 = 0u;
  long long v136 = 0u;
  int v138 = 1065353216;
  uint64_t v9 = sub_40EFE8((uint64_t)v139);
  uint64_t v101 = (uint64_t)(v6 + 5654);
  int v110 = v5;
  uint64_t v10 = sub_52058((uint64_t)v139);
  int v111 = v6;
  if (v9 == v10)
  {
    unsigned int v11 = 0;
  }
  else
  {
    unsigned int v11 = 0;
    do
    {
      uint64_t v12 = sub_40EFE8(v9);
      if (v12 + 472 == sub_52058(v9)) {
        goto LABEL_5;
      }
      uint64_t v13 = sub_EADA60(v12 + 472);
      int v14 = *(_DWORD *)(v13 + 112);
      if (v14 == 1)
      {
        uint64_t v16 = *(void *)(v13 + 104);
        int v158 = 1;
        uint64_t v157 = v16;
      }
      else if (v14)
      {
        int v158 = *(_DWORD *)(v13 + 112);
      }
      else
      {
        uint64_t v15 = *(void *)(v13 + 104);
        int v158 = 0;
        uint64_t v157 = v15;
      }
      v127.n128_u64[0] = sub_28CDA4(v106, (uint64_t)&v157);
      if (*((void *)&v137 + 1) >= (unint64_t)*(unsigned int *)(v2 + 4))
      {
LABEL_5:
        sub_EB7138(v107, v9, 1);
      }
      else
      {
        sub_F38124((uint64_t)&v136, &v127, &v127);
        ++v11;
      }
      v9 += 48;
    }
    while (v9 != v10);
  }
  unsigned int v17 = *(_DWORD *)(v2 + 8);
  unsigned int v18 = sub_EB6EB0(v107);
  if (v11)
  {
    unsigned int v19 = v17 - v18;
    if (v17 < v18) {
      unsigned int v19 = 0;
    }
    unsigned int v20 = v19 / v11;
    if (v20 <= 1) {
      int v21 = 1;
    }
    else {
      int v21 = v20;
    }
  }
  else
  {
    int v21 = 0;
  }
  sub_F3848C(&v127, *v111);
  int v22 = (void *)v137;
  if ((void)v137)
  {
    unsigned int v102 = v21;
    unsigned int v103 = v21;
    while (1)
    {
      unint64_t v23 = v22[2];
      int v123 = 0;
      uint64_t v124 = 0;
      v125 = 0;
      long long v126 = xmmword_20E7D40;
      BOOL v24 = v23 > 0xFFFFFFFEFFFFFFFFLL || v23 == 0;
      unint64_t v108 = v23;
      if (v24)
      {
        BOOL v25 = (void *)*v105;
        v112[0] = 0;
        v112[1] = 0;
        v113 = 0;
        double v27 = (unsigned char *)v25[4];
        uint64_t v26 = (unsigned char *)v25[5];
        int64_t v28 = v26 - v27;
        if (v26 == v27)
        {
          uint64_t v30 = 0;
          int v32 = 0;
          unint64_t v29 = 0;
        }
        else
        {
          if (0xCCCCCCCCCCCCCCCDLL * (v28 >> 4) > 0x333333333333333) {
            sub_2E00();
          }
          unint64_t v29 = (char *)operator new(v28);
          uint64_t v30 = (long long *)&v29[16 * (v28 >> 4)];
          size_t v31 = 80 * ((v28 - 80) / 0x50uLL) + 80;
          memcpy(v29, v27, v31);
          int v32 = &v29[v31];
        }
        unint64_t v50 = v25[7];
        int v123 = v29;
        uint64_t v124 = v32;
        v125 = v30;
        long long v126 = v50;
        goto LABEL_70;
      }
      unint64_t v155 = v23;
      int v156 = 1;
      sub_28D048(v106, (uint64_t)&v155, (unint64_t)v112);
      BOOL v33 = v112[0];
      if (v112[0] != v112[1])
      {
        while (*((unsigned char *)v33 + 16) != 1)
        {
          v33 += 6;
          if (v33 == v112[1])
          {
            BOOL v33 = v112[1];
            break;
          }
        }
      }
      sub_F38518((uint64_t)&v127, *v33, 1, v33[1], (uint64_t)&v119);
      uint64_t v35 = v119;
      int v34 = v120;
      if (v119 != v120)
      {
        uint64_t v36 = -1;
        if (v116 && HIDWORD(v116) != -1)
        {
          uint64_t v36 = sub_28CE70(v135, v116);
          uint64_t v35 = v119;
          int v34 = v120;
        }
        uint64_t v122 = v36;
        memset(v143, 0, 24);
        int64_t v37 = v34 - v35;
        if (v34 != v35) {
          break;
        }
      }
      BOOL v39 = 0;
      uint64_t v40 = 0;
      unint64_t v38 = 0;
      uint64_t v42 = v122;
      int v41 = v123;
      if (v123) {
        goto LABEL_48;
      }
LABEL_49:
      int v123 = v38;
      uint64_t v124 = v40;
      v125 = v39;
      long long v126 = (unint64_t)v42;
      if (v35)
      {
        size_t v120 = v35;
        operator delete(v35);
      }
      unint64_t v43 = (void **)__p;
      if (__p)
      {
        unint64_t v44 = v115;
        unint64_t v45 = __p;
        if (v115 != __p)
        {
          do
          {
            if (*((char *)v44 - 1) < 0) {
              operator delete(*(v44 - 3));
            }
            v44 -= 6;
          }
          while (v44 != v43);
          unint64_t v45 = __p;
        }
        uint64_t v115 = v43;
        operator delete(v45);
      }
      uint64_t v46 = (char *)v112[0];
      if (v112[0])
      {
        int v47 = (char *)v112[1];
        uint64_t v48 = v112[0];
        if (v112[1] != v112[0])
        {
          do
          {
            uint64_t v49 = (void *)*((void *)v47 - 3);
            if (v49)
            {
              *((void *)v47 - 2) = v49;
              operator delete(v49);
            }
            v47 -= 48;
          }
          while (v47 != v46);
          uint64_t v48 = v112[0];
        }
        v112[1] = v46;
        operator delete(v48);
      }
LABEL_70:
      memset(v143, 0, 24);
      sub_1000AF8((uint64_t)v109, v110, 0, (uint64_t)v112, v143);
      uint64_t v51 = v143[0];
      if (v143[0])
      {
        uint64_t v52 = v143[1];
        __n128 v53 = v143[0];
        if (v143[1] != v143[0])
        {
          do
          {
            long long v54 = (void *)*((void *)v52 - 28);
            if (v54)
            {
              *((void *)v52 - 27) = v54;
              operator delete(v54);
            }
            uint64_t v55 = (void *)*((void *)v52 - 31);
            if (v55)
            {
              *((void *)v52 - 30) = v55;
              operator delete(v55);
            }
            __n128 v56 = (void *)*((void *)v52 - 39);
            if (v56)
            {
              *((void *)v52 - 38) = v56;
              operator delete(v56);
            }
            uint64_t v57 = (void *)*((void *)v52 - 42);
            if (v57)
            {
              *((void *)v52 - 41) = v57;
              operator delete(v57);
            }
            uint64_t v58 = *((void *)v52 - 45);
            if (v58)
            {
              uint64_t v59 = *((void *)v52 - 44);
              uint64_t v60 = (void *)*((void *)v52 - 45);
              if (v59 != v58)
              {
                do
                {
                  __n128 v61 = *(void **)(v59 - 24);
                  if (v61)
                  {
                    *(void *)(v59 - 16) = v61;
                    operator delete(v61);
                  }
                  v59 -= 56;
                }
                while (v59 != v58);
                uint64_t v60 = (void *)*((void *)v52 - 45);
              }
              *((void *)v52 - 44) = v58;
              operator delete(v60);
            }
            uint64_t v62 = (void *)*((void *)v52 - 56);
            if (v62)
            {
              *((void *)v52 - 55) = v62;
              operator delete(v62);
            }
            int v63 = (void **)v52 - 59;
            if (*((char *)v52 - 449) < 0) {
              operator delete(*v63);
            }
            uint64_t v52 = (long long *)((char *)v52 - 472);
          }
          while (v63 != (void **)v51);
          __n128 v53 = v143[0];
        }
        v143[1] = v51;
        operator delete(v53);
      }
      HIBYTE(v143[2]) = 15;
      v143[0] = (long long *)v104[1];
      *(long long **)((char *)v143 + 7) = (long long *)v104[0];
      HIBYTE(v143[1]) = 0;
      sub_5C4AC(v110, (uint64_t)v143);
      sub_1000D20();
      if (SHIBYTE(v143[2]) < 0) {
        operator delete(v143[0]);
      }
      sub_F2DB40((uint64_t)v143, (uint64_t)v112);
      sub_F38A0C(&v119, (uint64_t)v143, 1uLL);
      sub_F2CAFC((uint64_t)&v154);
      if (v153) {
        free(v153);
      }
      if (v151)
      {
        v152 = v151;
        operator delete(v151);
      }
      if (v149)
      {
        v150 = v149;
        operator delete(v149);
      }
      if (v148) {
        free(v148);
      }
      sub_328138((uint64_t)&v147);
      if (v145)
      {
        v146 = v145;
        operator delete(v145);
      }
      sub_328138((uint64_t)&v144);
      if (v143[1])
      {
        sub_C64384((uint64_t)&v143[1], (void **)v143[1]);
        operator delete(v143[1]);
      }
      sub_638A44((uint64_t)v119);
      sub_F2BB50();
      if (sub_EB6EB0(v143) > v103)
      {
        uint64_t v64 = sub_40EFE8((uint64_t)v143);
        uint64_t v65 = sub_52058((uint64_t)v143);
        sub_EB6F18((uint64_t)v143, v64 + 48 * v102, v65);
      }
      sub_F2C510(v111, (uint64_t)v139, (uint64_t)v143, v108, v107);
      if (v143[0])
      {
        sub_C64384((uint64_t)v143, (void **)v143[0]);
        operator delete(v143[0]);
      }
      unint64_t v66 = v119;
      if (v119)
      {
        uint64_t v67 = v119;
        if (v120 != v119)
        {
          uint64_t v68 = (uint64_t)(v120 - 2328);
          do
          {
            sub_F2CAFC(v68 + 2112);
            char v70 = *(void **)(v68 + 2104);
            if (v70) {
              free(v70);
            }
            v71 = *(void **)(v68 + 1688);
            if (v71)
            {
              *(void *)(v68 + 1696) = v71;
              operator delete(v71);
            }
            unint64_t v72 = *(void **)(v68 + 1664);
            if (v72)
            {
              *(void *)(v68 + 1672) = v72;
              operator delete(v72);
            }
            uint64_t v73 = *(void **)(v68 + 1656);
            if (v73) {
              free(v73);
            }
            sub_328138(v68 + 816);
            char v74 = *(void **)(v68 + 792);
            if (v74)
            {
              *(void *)(v68 + 800) = v74;
              operator delete(v74);
            }
            sub_328138(v68 + 24);
            if (*(void *)v68)
            {
              sub_C64384(v68, *(void ***)v68);
              operator delete(*(void **)v68);
            }
            char v69 = (unsigned char *)(v68 - 8);
            v68 -= 2336;
          }
          while (v69 != v66);
          uint64_t v67 = v119;
        }
        size_t v120 = v66;
        operator delete(v67);
      }
      sub_F2CA5C((uint64_t)v112);
      if (v123)
      {
        uint64_t v124 = v123;
        operator delete(v123);
      }
      int v22 = (void *)*v22;
      if (!v22) {
        goto LABEL_134;
      }
    }
    if (0xCCCCCCCCCCCCCCCDLL * (v37 >> 4) > 0x333333333333333) {
      sub_2E00();
    }
    unint64_t v38 = (char *)operator new(v37);
    v143[0] = (long long *)v38;
    v143[1] = (long long *)v38;
    BOOL v39 = (long long *)&v38[16 * (v37 >> 4)];
    v143[2] = v39;
    memcpy(v38, v35, 80 * ((v37 - 80) / 0x50uLL) + 80);
    uint64_t v40 = &v38[80 * ((v37 - 80) / 0x50uLL) + 80];
    uint64_t v42 = v122;
    int v41 = v123;
    if (!v123) {
      goto LABEL_49;
    }
LABEL_48:
    uint64_t v124 = v41;
    operator delete(v41);
    uint64_t v35 = v119;
    goto LABEL_49;
  }
LABEL_134:
  sub_10019E4(v109, (__n128 *)v112);
  sub_33998(v101, (uint64_t)v112);
  sub_1001E6C((uint64_t)v109, (uint64_t *)v112);
  uint64_t v75 = v111 + 5646;
  uint64_t v76 = v111[5646];
  if (v76)
  {
    v111[5647] = v76;
    operator delete(v76);
    void *v75 = 0;
    v75[1] = 0;
    v75[2] = 0;
  }
  *((_OWORD *)v111 + 2823) = *(_OWORD *)v112;
  v75[2] = v113;
  uint64_t v77 = *v111;
  HIBYTE(v143[2]) = 19;
  strcpy((char *)v143, "DrivingPathAnalyzer");
  int v123 = 0;
  uint64_t v124 = 0;
  v125 = 0;
  v78 = sub_374CDC((uint64_t)v77, (uint64_t)v143, (uint64_t *)&v123);
  char v121 = 7;
  strcpy((char *)&v119, "default");
  int64_t v79 = (void *)sub_560F4(v78, (uint64_t)&v119);
  sub_1068CE4((uint64_t **)v112, v77, v79, *((unsigned __int8 *)v111[1] + 16));
  if (v121 < 0) {
    operator delete(v119);
  }
  v80 = (void **)v123;
  if (v123)
  {
    uint64_t v81 = (void **)v124;
    int64_t v82 = v123;
    if (v124 != v123)
    {
      do
      {
        if (*((char *)v81 - 1) < 0) {
          operator delete(*(v81 - 3));
        }
        v81 -= 3;
      }
      while (v81 != v80);
      int64_t v82 = v123;
    }
    uint64_t v124 = (char *)v80;
    operator delete(v82);
  }
  if (SHIBYTE(v143[2]) < 0) {
    operator delete(v143[0]);
  }
  int64x2_t v83 = (uint64_t *)nullsub_1(v107);
  uint64_t v84 = *v83;
  uint64_t v85 = v83[1];
  if (*v83 != v85)
  {
    do
    {
      uint64_t v86 = nullsub_1(v84);
      uint64_t v87 = *(void **)v86;
      unint64_t v88 = *(void **)(v86 + 8);
      while (v87 != v88)
      {
        sub_1069090((uint64_t)v112, v87, (void **)v143);
        unint64_t v89 = v143[0];
        v90 = v143[1];
        *(unsigned char *)(sub_EAD918((uint64_t)v87) + 8) = v89 != v90;
        if (v143[0] == v143[1])
        {
          BOOL v93 = 0;
        }
        else
        {
          uint64_t v91 = (long long *)((char *)v143[0] + 24);
          do
          {
            uint64_t v92 = *((void *)v91 - 1);
            BOOL v93 = *(unsigned char *)(**((void **)v91 - 2) + 424 * v92 + 312) != 0;
            if (*(unsigned char *)(**((void **)v91 - 2) + 424 * v92 + 312)) {
              BOOL v94 = 1;
            }
            else {
              BOOL v94 = v91 == v143[1];
            }
            uint64_t v91 = (long long *)((char *)v91 + 24);
          }
          while (!v94);
        }
        *(unsigned char *)(sub_EAD918((uint64_t)v87) + 9) = v93;
        if (v143[0])
        {
          v143[1] = v143[0];
          operator delete(v143[0]);
        }
        v87 += 59;
      }
      v84 += 48;
    }
    while (v84 != v85);
  }
  if (v118 < 0) {
    operator delete(v117);
  }
  if (v133)
  {
    int v134 = v133;
    operator delete(v133);
  }
  sub_3A6318(&v127.n128_u64[1]);
  char v95 = (void *)v137;
  if ((void)v137)
  {
    do
    {
      v96 = (void *)*v95;
      operator delete(v95);
      char v95 = v96;
    }
    while (v96);
  }
  v97 = (void *)v136;
  *(void *)&long long v136 = 0;
  if (v97) {
    operator delete(v97);
  }
  if (v139[0])
  {
    sub_C64384((uint64_t)v139, (void **)v139[0]);
    operator delete(v139[0]);
  }
  v98 = v142;
  if (v142)
  {
    do
    {
      v99 = (void *)*v98;
      operator delete(v98);
      v98 = v99;
    }
    while (v99);
  }
  uint64_t v100 = v141;
  v141 = 0;
  if (v100) {
    operator delete(v100);
  }
}

void sub_F2B5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  sub_C62E9C(&STACK[0xA28]);
  sub_12168((uint64_t)&STACK[0x1A80]);
  sub_C63044((void ***)&STACK[0x1AB0]);
  sub_F2CA10((uint64_t)&STACK[0x1AC8]);
  _Unwind_Resume(a1);
}

uint64_t sub_F2B7E8(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (*(unsigned char *)(a2 + 8080))
  {
    uint64_t v7 = result;
    uint64_t v8 = (uint64_t *)(result + 45168);
    uint64_t v9 = (std::string *)sub_40EFE8(a4);
    if (v9 != (std::string *)sub_52058(a4))
    {
      if (a3)
      {
        uint64_t v10 = (char **)(v7 + 45168);
        do
        {
          sub_1071A74(a2, (uint64_t)v9);
          sub_1070DC0(a2, v9, &__p);
          sub_F35750(v10, v8[1], (uint64_t)__p, (uint64_t)v40, (v40 - (unsigned char *)__p) >> 5);
          if (__p)
          {
            uint64_t v40 = __p;
            operator delete(__p);
          }
          v9 += 2;
        }
        while (v9 != (std::string *)sub_52058(a4));
      }
      else
      {
        do
        {
          sub_1071A74(a2, (uint64_t)v9);
          v9 += 2;
        }
        while (v9 != (std::string *)sub_52058(a4));
      }
    }
    unsigned int v11 = (uint64_t *)nullsub_1(a4);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    uint64_t v38 = (uint64_t)v11;
    if (*v11 == v13) {
      goto LABEL_47;
    }
    while (!sub_EA80FC((char **)v12))
    {
      v12 += 48;
      if (v12 == v13)
      {
        uint64_t v14 = v13;
        goto LABEL_48;
      }
    }
    if (v12 == v13 || (uint64_t v15 = (char **)(v12 + 48), v12 + 48 == v13))
    {
LABEL_47:
      uint64_t v14 = v12;
    }
    else
    {
      uint64_t v14 = v12;
      int64_t v37 = v8;
      do
      {
        unsigned int v17 = v15;
        if (!sub_EA80FC(v15))
        {
          unsigned int v18 = *(void ***)v14;
          if (*(void *)v14)
          {
            unsigned int v19 = *(void ***)(v14 + 8);
            unsigned int v20 = *(void ***)v14;
            if (v19 != v18)
            {
              do
              {
                int v21 = *(v19 - 28);
                if (v21)
                {
                  *(v19 - 27) = v21;
                  operator delete(v21);
                }
                int v22 = *(v19 - 31);
                if (v22)
                {
                  *(v19 - 30) = v22;
                  operator delete(v22);
                }
                unint64_t v23 = *(v19 - 39);
                if (v23)
                {
                  *(v19 - 38) = v23;
                  operator delete(v23);
                }
                BOOL v24 = *(v19 - 42);
                if (v24)
                {
                  *(v19 - 41) = v24;
                  operator delete(v24);
                }
                BOOL v25 = (char *)*(v19 - 45);
                if (v25)
                {
                  uint64_t v26 = (char *)*(v19 - 44);
                  double v27 = *(v19 - 45);
                  if (v26 != v25)
                  {
                    do
                    {
                      int64_t v28 = (void *)*((void *)v26 - 3);
                      if (v28)
                      {
                        *((void *)v26 - 2) = v28;
                        operator delete(v28);
                      }
                      v26 -= 56;
                    }
                    while (v26 != v25);
                    double v27 = *(v19 - 45);
                  }
                  *(v19 - 44) = v25;
                  operator delete(v27);
                }
                unint64_t v29 = *(v19 - 56);
                if (v29)
                {
                  *(v19 - 55) = v29;
                  operator delete(v29);
                }
                uint64_t v30 = v19 - 59;
                if (*((char *)v19 - 449) < 0) {
                  operator delete(*v30);
                }
                v19 -= 59;
              }
              while (v30 != v18);
              unsigned int v20 = *(void ***)v14;
            }
            *(void *)(v14 + 8) = v18;
            operator delete(v20);
            *(void *)uint64_t v14 = 0;
            *(void *)(v14 + 8) = 0;
            *(void *)(v14 + 16) = 0;
            uint64_t v8 = v37;
          }
          *(_OWORD *)uint64_t v14 = *(_OWORD *)v17;
          *(void *)(v14 + 16) = *(void *)(v12 + 64);
          *unsigned int v17 = 0;
          v17[1] = 0;
          v17[2] = 0;
          size_t v31 = (void **)(v14 + 24);
          if (*(char *)(v14 + 47) < 0) {
            operator delete(*v31);
          }
          long long v16 = *(_OWORD *)(v12 + 72);
          *(void *)(v14 + 40) = *(void *)(v12 + 88);
          *(_OWORD *)size_t v31 = v16;
          *(unsigned char *)(v12 + 95) = 0;
          *(unsigned char *)(v12 + 72) = 0;
          v14 += 48;
        }
        uint64_t v15 = v17 + 6;
        uint64_t v12 = (uint64_t)v17;
      }
      while (v17 + 6 != (char **)v13);
    }
LABEL_48:
    uint64_t v32 = *(void *)(v38 + 8);
    if (v14 != v32)
    {
      sub_C641BC((uint64_t)&__p, v32, *(void *)(v38 + 8), v14);
      sub_C64384(v38, v33);
    }
    int v34 = (uint64_t *)v8[1];
    unint64_t v35 = 126 - 2 * __clz(((uint64_t)v34 - *v8) >> 5);
    if (v34 == (uint64_t *)*v8) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = v35;
    }
    sub_F35D00(*v8, v34, (uint64_t)&__p, v36, 1);
    return sub_F35B58(v8);
  }
  return result;
}

void sub_F2BB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_F2BB50()
{
  uint64_t v0 = (uint64_t *)__chkstk_darwin();
  unsigned int v2 = v1;
  unsigned int v4 = v3;
  uint64_t v45 = v5;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = (uint64_t)v0;
  uint64_t v12 = v11;
  uint64_t v13 = *v0;
  uint64_t v67 = operator new(0x20uLL);
  long long v68 = xmmword_20B8870;
  strcpy((char *)v67, "DrivingPathGraphExtractor");
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v14 = sub_374CDC(v13, (uint64_t)&v67, (uint64_t *)&v48);
  char v70 = 14;
  strcpy((char *)__p, "path_extractor");
  uint64_t v15 = sub_561B0(v4, (uint64_t)__p);
  long long v16 = (void *)sub_560F4(v14, v15);
  if (v70 < 0) {
    operator delete(__p[0]);
  }
  unsigned int v17 = (void **)v48;
  if (v48)
  {
    unsigned int v18 = v49;
    unsigned int v19 = v48;
    if (v49 != v48)
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 3;
      }
      while (v18 != v17);
      unsigned int v19 = v48;
    }
    uint64_t v49 = v17;
    operator delete(v19);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete(v67);
  }
  sub_10166A4((uint64_t)__p, v16);
  unsigned int v20 = v73;
  if (v73 >= v2) {
    unsigned int v20 = v2;
  }
  unsigned int v73 = v20;
  sub_1016DBC((uint64_t)&v67, *(uint64_t **)v10, (uint64_t)__p, *(void *)(*(void *)(v10 + 8) + 4), *(_DWORD *)(*(void *)(v10 + 8) + 12), *(unsigned __int8 *)(*(void *)(v10 + 8) + 16));
  sub_103629C(v9);
  sub_1016DC4((uint64_t)&v67, &v59, v7, v12);
  uint64_t v21 = sub_101D96C((uint64_t)&v67);
  *(_OWORD *)(v10 + 44936) = *(_OWORD *)v21;
  long long v22 = *(_OWORD *)(v21 + 16);
  long long v23 = *(_OWORD *)(v21 + 32);
  long long v24 = *(_OWORD *)(v21 + 48);
  *(_DWORD *)(v10 + 45000) = *(_DWORD *)(v21 + 64);
  *(_OWORD *)(v10 + 44968) = v23;
  *(_OWORD *)(v10 + 44984) = v24;
  *(_OWORD *)(v10 + 44952) = v22;
  uint64_t v25 = *v9;
  uint64_t v26 = v9[1];
  if (*v9 == v26)
  {
    int v27 = 0;
  }
  else
  {
    int v27 = 0;
    do
    {
      v27 += sub_1005690(v25);
      v25 += 2336;
    }
    while (v25 != v26);
  }
  int64_t v28 = (_DWORD *)(v10 + 44944);
  *(_DWORD *)(v10 + 44944) = v27;
  unint64_t v29 = (uint64_t *)sub_40EFE8((uint64_t)v12);
  uint64_t v30 = sub_52058((uint64_t)v12);
  if (v29 == (uint64_t *)v30)
  {
    LOBYTE(v32) = 1;
  }
  else
  {
    do
    {
      sub_EA82B8(v29);
      uint64_t v32 = (v31 >> 8) & 1;
      if ((v31 & 0x100) == 0) {
        break;
      }
      v29 += 6;
    }
    while (v29 != (uint64_t *)v30);
  }
  uint64_t v33 = *v9;
  uint64_t v34 = v9[1];
  if (*v9 == v34)
  {
LABEL_28:
    if (!sub_45FB38(v12)) {
      goto LABEL_41;
    }
    sub_103629C(v9);
    sub_1016DBC((uint64_t)&v48, *(uint64_t **)v10, (uint64_t)__p, *(void *)(*(void *)(v10 + 8) + 4), *(_DWORD *)(*(void *)(v10 + 8) + 12), 0);
    sub_1016DC4((uint64_t)&v48, &v51, v7, &v46);
    if (v12->i64[0])
    {
      sub_C64384((uint64_t)v12, (void **)v12->i64[0]);
      operator delete((void *)v12->i64[0]);
      v12->i64[0] = 0;
      v12->i64[1] = 0;
      v12[1].i64[0] = 0;
    }
    int64x2_t *v12 = v46;
    v12[1].i64[0] = v47;
    uint64_t v35 = sub_101D96C((uint64_t)&v48);
    *(_OWORD *)(v10 + 44936) = *(_OWORD *)v35;
    long long v36 = *(_OWORD *)(v35 + 16);
    long long v37 = *(_OWORD *)(v35 + 32);
    long long v38 = *(_OWORD *)(v35 + 48);
    *(_DWORD *)(v10 + 45000) = *(_DWORD *)(v35 + 64);
    *(_OWORD *)(v10 + 44968) = v37;
    *(_OWORD *)(v10 + 44984) = v38;
    *(_OWORD *)(v10 + 44952) = v36;
    uint64_t v40 = *v9;
    uint64_t v39 = v9[1];
    if (*v9 == v39)
    {
      *int64_t v28 = 0;
      sub_F2D7C0((uint64_t)&v48);
      uint64_t v42 = v57;
      if (!v57) {
        goto LABEL_36;
      }
    }
    else
    {
      int v41 = 0;
      do
      {
        v41 += sub_1005690(v40);
        v40 += 2336;
      }
      while (v40 != v39);
      *int64_t v28 = v41;
      sub_F2D7C0((uint64_t)&v48);
      uint64_t v42 = v57;
      if (!v57) {
        goto LABEL_36;
      }
    }
    uint64_t v58 = v42;
    operator delete(v42);
LABEL_36:
    if (v55)
    {
      __n128 v56 = v55;
      operator delete(v55);
    }
    if (v53)
    {
      long long v54 = v53;
      operator delete(v53);
    }
    sub_F2DA34((uint64_t)&v52);
    LOBYTE(v32) = 1;
    goto LABEL_41;
  }
  while (!sub_1005D48(v33))
  {
    v33 += 2336;
    if (v33 == v34) {
      goto LABEL_28;
    }
  }
LABEL_41:
  sub_107EE10((uint64_t)v12, 1);
  sub_F2B7E8(v10, v45, v32, (uint64_t)v12);
  uint64_t v43 = sub_101D978((uint64_t)&v67);
  if (v10 + 45192 != v43)
  {
    *(_DWORD *)(v10 + 45224) = *(_DWORD *)(v43 + 32);
    sub_5A4DC((void *)(v10 + 45192), *(uint64_t **)(v43 + 16), 0);
  }
  if (v65)
  {
    unint64_t v66 = v65;
    operator delete(v65);
  }
  if (v63)
  {
    uint64_t v64 = v63;
    operator delete(v63);
  }
  if (v61)
  {
    uint64_t v62 = v61;
    operator delete(v61);
  }
  sub_F2DA34((uint64_t)&v60);
  sub_F2D7C0((uint64_t)&v67);
  if (v77 < 0)
  {
    operator delete(v76);
    if ((v75 & 0x80000000) == 0)
    {
LABEL_51:
      unint64_t v44 = v71;
      if (!v71) {
        return;
      }
      goto LABEL_52;
    }
  }
  else if ((v75 & 0x80000000) == 0)
  {
    goto LABEL_51;
  }
  operator delete(v74);
  unint64_t v44 = v71;
  if (v71)
  {
LABEL_52:
    unint64_t v72 = v44;
    operator delete(v44);
  }
}

void sub_F2C080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_F2D7C0((uint64_t)va);
  sub_F2C44C(&STACK[0x1B28]);
  sub_C63044(v7);
  sub_F2C44C(&STACK[0x1BF8]);
  sub_F2D7C0((uint64_t)&STACK[0x1CC8]);
  sub_F2C4A8((uint64_t)&STACK[0x37C0]);
  _Unwind_Resume(a1);
}

uint64_t sub_F2C150(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 1280);
  if (v2)
  {
    *(void *)(a1 + 1288) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 1256);
  if (v3)
  {
    *(void *)(a1 + 1264) = v3;
    operator delete(v3);
  }
  sub_3817F8((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_F2C1BC(uint64_t a1)
{
  return a1 + 44840;
}

void *sub_F2C1C8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = result[5646];
  uint64_t v4 = result[5647];
  uint64_t v5 = v4 - v3;
  if (v4 != v3)
  {
    if (v5 < 0) {
      sub_2E00();
    }
    double result = operator new(v4 - v3);
    uint64_t v6 = 0;
    *a2 = result;
    a2[1] = result;
    a2[2] = &result[4 * (v5 >> 5)];
    do
    {
      uint64_t v7 = v3 + v6 * 8;
      uint64_t v8 = (char *)&result[v6];
      unsigned int v9 = *(_DWORD *)(v3 + v6 * 8 + 16);
      LODWORD(result[v6 + 2]) = v9;
      if (v9 <= 1) {
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v7;
      }
      v8[24] = *(unsigned char *)(v7 + 24);
      v6 += 4;
    }
    while (v3 + v6 * 8 != v4);
    a2[1] = &result[v6];
  }
  return result;
}

void sub_F2C280(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_F2C29C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_374D14(*(void **)a1);

  sub_29B088(v4, (_DWORD *)(a1 + 45232), a2);
}

uint64_t sub_F2C2E4(uint64_t a1)
{
  return a1 + 45192;
}

uint64_t sub_F2C2F0(uint64_t a1)
{
  return a1 + 45272;
}

_DWORD *sub_F2C2FC(_DWORD *a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "max_added_non_ev_candidates");
  int v4 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "max_replaced_first_ev_legs");
  int v5 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v5;
  strcpy((char *)__p, "max_ev_path_candidates");
  HIBYTE(__p[2]) = 22;
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[2] = v6;
  return a1;
}

void sub_F2C428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_F2C44C(void *a1)
{
  unsigned int v2 = (void *)a1[22];
  if (v2)
  {
    a1[23] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[19];
  if (v3)
  {
    a1[20] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[16];
  if (v4)
  {
    a1[17] = v4;
    operator delete(v4);
  }
  sub_F2DA34((uint64_t)(a1 + 1));
  return a1;
}

uint64_t sub_F2C4A8(uint64_t a1)
{
  if ((*(char *)(a1 + 415) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 391) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    operator delete(*(void **)(a1 + 368));
    unsigned int v2 = *(void **)(a1 + 168);
    if (!v2) {
      return a1;
    }
    goto LABEL_4;
  }
  operator delete(*(void **)(a1 + 392));
  if (*(char *)(a1 + 391) < 0) {
    goto LABEL_7;
  }
LABEL_3:
  unsigned int v2 = *(void **)(a1 + 168);
  if (v2)
  {
LABEL_4:
    *(void *)(a1 + 176) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_F2C510(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, int64x2_t *a5)
{
  uint64_t v47 = (uint64_t *)sub_376F8C(*a1);
  uint64_t v7 = sub_40EFE8(a2);
  uint64_t v48 = sub_52058(a2);
  while (v7 != v48)
  {
    if (sub_EA8440((void *)v7) >= 2)
    {
      uint64_t v8 = sub_40EFE8(v7);
      uint64_t v9 = sub_EADA60(v8 + 472);
      int v10 = *(_DWORD *)(v9 + 112);
      if (v10 == 1)
      {
        uint64_t v12 = *(void *)(v9 + 104);
        int v65 = 1;
        uint64_t v64 = v12;
      }
      else if (v10)
      {
        int v65 = *(_DWORD *)(v9 + 112);
      }
      else
      {
        uint64_t v11 = *(void *)(v9 + 104);
        int v65 = 0;
        uint64_t v64 = v11;
      }
      if (sub_28CDA4(v47, (uint64_t)&v64) == a4)
      {
        uint64_t v13 = (uint64_t *)nullsub_1(v7);
        uint64_t v14 = (long long *)sub_EADA60(*v13);
        sub_3B1DC8((uint64_t)v59, v14);
        uint64_t v15 = (uint64_t *)nullsub_1(v7);
        int v56 = *(_DWORD *)sub_EADD50(*v15);
        long long v16 = (uint64_t *)nullsub_1(v7);
        int v55 = *(_DWORD *)sub_EADD58(*v16);
        unsigned int v17 = (uint64_t *)sub_40EFE8(a3);
        for (uint64_t i = sub_52058(a3); v17 != (uint64_t *)i; v17 += 6)
        {
          sub_EA82B8(v17);
          if ((v20 & 0x100) == 0)
          {
            uint64_t v21 = a3;
            __p = 0;
            unsigned int v51 = 0;
            uint64_t v52 = 0;
            uint64_t v22 = *(void *)v7;
            uint64_t v23 = *(void *)(v7 + 8);
            p_p = &__p;
            char v58 = 0;
            int64_t v24 = v23 - v22;
            if (v23 != v22)
            {
              unint64_t v25 = 0xCBEEA4E1A08AD8F3 * (v24 >> 3);
              if (v25 >= 0x8AD8F2FBA93869) {
                sub_2E00();
              }
              uint64_t v26 = (char *)operator new(v24);
              uint64_t v27 = 0;
              __p = v26;
              unsigned int v51 = (void **)v26;
              uint64_t v52 = &v26[472 * v25];
              do
              {
                sub_444D20(&v26[v27], (long long *)(v22 + v27));
                v27 += 472;
              }
              while (v22 + v27 != v23);
              unsigned int v51 = (void **)&v26[v27];
            }
            if (*(char *)(v7 + 47) < 0)
            {
              sub_4200(&v53, *(void **)(v7 + 24), *(void *)(v7 + 32));
            }
            else
            {
              long long v28 = *(_OWORD *)(v7 + 24);
              uint64_t v54 = *(void *)(v7 + 40);
              long long v53 = v28;
            }
            a3 = v21;
            uint64_t v29 = *(void *)nullsub_1(v17);
            uint64_t v30 = (uint64_t *)nullsub_1(&__p);
            sub_D5C500(*v30, v29);
            unint64_t v31 = (uint64_t *)nullsub_1(&__p);
            sub_EAD948(*v31, v59);
            uint64_t v32 = (uint64_t *)nullsub_1(&__p);
            sub_EADD60(*v32, &v56);
            uint64_t v33 = (uint64_t *)nullsub_1(&__p);
            sub_EADD6C(*v33, &v55);
            sub_EB7138(a5, (uint64_t)&__p, 1);
            if (SHIBYTE(v54) < 0)
            {
              operator delete((void *)v53);
              uint64_t v34 = (void **)__p;
              if (__p)
              {
LABEL_29:
                uint64_t v35 = v51;
                unsigned int v19 = v34;
                if (v51 != v34)
                {
                  do
                  {
                    long long v36 = *(v35 - 28);
                    if (v36)
                    {
                      *(v35 - 27) = v36;
                      operator delete(v36);
                    }
                    long long v37 = *(v35 - 31);
                    if (v37)
                    {
                      *(v35 - 30) = v37;
                      operator delete(v37);
                    }
                    long long v38 = *(v35 - 39);
                    if (v38)
                    {
                      *(v35 - 38) = v38;
                      operator delete(v38);
                    }
                    uint64_t v39 = *(v35 - 42);
                    if (v39)
                    {
                      *(v35 - 41) = v39;
                      operator delete(v39);
                    }
                    uint64_t v40 = (char *)*(v35 - 45);
                    if (v40)
                    {
                      int v41 = (char *)*(v35 - 44);
                      uint64_t v42 = *(v35 - 45);
                      if (v41 != v40)
                      {
                        do
                        {
                          uint64_t v43 = (void *)*((void *)v41 - 3);
                          if (v43)
                          {
                            *((void *)v41 - 2) = v43;
                            operator delete(v43);
                          }
                          v41 -= 56;
                        }
                        while (v41 != v40);
                        uint64_t v42 = *(v35 - 45);
                      }
                      *(v35 - 44) = v40;
                      operator delete(v42);
                    }
                    unint64_t v44 = *(v35 - 56);
                    if (v44)
                    {
                      *(v35 - 55) = v44;
                      operator delete(v44);
                    }
                    uint64_t v45 = v35 - 59;
                    if (*((char *)v35 - 449) < 0) {
                      operator delete(*v45);
                    }
                    v35 -= 59;
                  }
                  while (v45 != v34);
                  unsigned int v19 = __p;
                }
                unsigned int v51 = v34;
                operator delete(v19);
                a3 = v21;
              }
            }
            else
            {
              uint64_t v34 = (void **)__p;
              if (__p) {
                goto LABEL_29;
              }
            }
          }
        }
        if (v62)
        {
          int v63 = v62;
          operator delete(v62);
        }
        if (v60)
        {
          __n128 v61 = v60;
          operator delete(v60);
        }
      }
    }
    v7 += 48;
  }
}

void sub_F2C968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_45E914((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_F2C9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_405E28((uint64_t)va);
  sub_45E914((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_F2C9D8()
{
  for (; v0; v0 -= 472)
    sub_405F44(v1 - 472 + v0);
  JUMPOUT(0xF2C9F8);
}

uint64_t sub_F2CA10(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 160);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      unsigned int v2 = v3;
    }
    while (v3);
  }
  int v4 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_F2CA5C(uint64_t a1)
{
  sub_F2CAFC(a1 + 2120);
  unsigned int v2 = *(void **)(a1 + 2112);
  if (v2) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 1696);
  if (v3)
  {
    *(void *)(a1 + 1704) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 1672);
  if (v4)
  {
    *(void *)(a1 + 1680) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)(a1 + 1664);
  if (v5) {
    free(v5);
  }
  sub_328138(a1 + 824);
  int v6 = *(void **)(a1 + 800);
  if (v6)
  {
    *(void *)(a1 + 808) = v6;
    operator delete(v6);
  }
  sub_328138(a1 + 32);
  uint64_t v7 = *(void ***)(a1 + 8);
  if (v7)
  {
    sub_C64384(a1 + 8, v7);
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_F2CAFC(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 192);
  if (v2)
  {
    *(void *)(a1 + 200) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 168);
  if (v3)
  {
    *(void *)(a1 + 176) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 144);
  if (v4)
  {
    *(void *)(a1 + 152) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void *)(a1 + 120);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 128);
    uint64_t v7 = *(void **)(a1 + 120);
    if (v6 != v5)
    {
      do
      {
        uint64_t v8 = *(void **)(v6 - 40);
        if (v8)
        {
          *(void *)(v6 - 32) = v8;
          operator delete(v8);
        }
        v6 -= 152;
      }
      while (v6 != v5);
      uint64_t v7 = *(void **)(a1 + 120);
    }
    *(void *)(a1 + 128) = v5;
    operator delete(v7);
  }
  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(a1 + 72);
  if (v10)
  {
    *(void *)(a1 + 80) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void **)(a1 + 48);
  if (v11)
  {
    *(void *)(a1 + 56) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *(void *)(a1 + 24);
  if (v12)
  {
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void **)(a1 + 24);
    if (v13 != v12)
    {
      do
      {
        uint64_t v15 = *(void **)(v13 - 40);
        if (v15)
        {
          *(void *)(v13 - 32) = v15;
          operator delete(v15);
        }
        v13 -= 152;
      }
      while (v13 != v12);
      uint64_t v14 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v12;
    operator delete(v14);
  }
  uint64_t v16 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v16;
    operator delete(v16);
  }
  return a1;
}

uint64_t sub_F2CC28(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(a1 + 24);
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = *(void **)(v4 - 40);
        if (v6)
        {
          *(void *)(v4 - 32) = v6;
          operator delete(v6);
        }
        v4 -= 152;
      }
      while (v4 != v3);
      uint64_t v5 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v3;
    operator delete(v5);
  }
  uint64_t v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

void **sub_F2CCBC(void **a1)
{
  unsigned int v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 5);
        if (v5)
        {
          *((void *)v3 - 4) = v5;
          operator delete(v5);
        }
        v3 -= 152;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_F2CD30(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_4200((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  sub_F266F8(a1 + 32, (long long *)(a2 + 32));
  *(void *)(a1 + 1272) = 0;
  *(_OWORD *)(a1 + 1256) = 0u;
  uint64_t v5 = *(unsigned char **)(a2 + 1256);
  uint64_t v6 = *(unsigned char **)(a2 + 1264);
  size_t v7 = v6 - v5;
  if (v6 != v5)
  {
    if ((v7 & 0x8000000000000000) != 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v6 - v5);
    *(void *)(a1 + 1256) = v8;
    *(void *)(a1 + 1264) = v8;
    uint64_t v9 = &v8[v7];
    *(void *)(a1 + 1272) = &v8[v7];
    memcpy(v8, v5, v7);
    *(void *)(a1 + 1264) = v9;
  }
  *(void *)(a1 + 1296) = 0;
  *(_OWORD *)(a1 + 1280) = 0u;
  uint64_t v10 = *(unsigned char **)(a2 + 1280);
  uint64_t v11 = *(unsigned char **)(a2 + 1288);
  size_t v12 = v11 - v10;
  if (v11 != v10)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      sub_2E00();
    }
    uint64_t v13 = (char *)operator new(v11 - v10);
    *(void *)(a1 + 1280) = v13;
    *(void *)(a1 + 1288) = v13;
    uint64_t v14 = &v13[v12];
    *(void *)(a1 + 1296) = &v13[v12];
    memcpy(v13, v10, v12);
    *(void *)(a1 + 1288) = v14;
  }
  return a1;
}

void sub_F2CE68(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_F2CEBC()
{
  uint64_t v0 = (uint64_t *)__chkstk_darwin();
  char v2 = v1;
  long long v4 = v3;
  uint64_t v5 = v0;
  uint64_t *v0 = sub_3769E8(v3);
  v5[1] = sub_376594(v4);
  v5[2] = sub_374D14(v4);
  v5[3] = sub_376B90(v4);
  v5[4] = sub_3750CC(v4);
  v5[5] = sub_3777C0(v4);
  *((_DWORD *)v5 + 12) = sub_299C38(v5[2]);
  *((unsigned char *)v5 + 52) = v2;
  sub_103E2B8(v7, 2, v4);
  *((unsigned char *)v5 + 5232) = 1;
  sub_F2CFB4((uint64_t)(v5 + 7), v7);
  sub_3A6230(v7);
  return v5;
}

void sub_F2CFA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A6230((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_F2CFB4(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  long long v7 = a2[4];
  long long v8 = a2[5];
  long long v9 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  long long v10 = a2[8];
  long long v11 = a2[9];
  long long v12 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  long long v13 = a2[12];
  long long v14 = a2[13];
  long long v15 = a2[14];
  *(void *)(a1 + 240) = *((void *)a2 + 30);
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 224) = v15;
  *(_OWORD *)(a1 + 192) = v13;
  long long v16 = *(long long *)((char *)a2 + 248);
  long long v17 = *(long long *)((char *)a2 + 264);
  long long v18 = *(long long *)((char *)a2 + 280);
  *(void *)(a1 + 296) = *((void *)a2 + 37);
  *(_OWORD *)(a1 + 264) = v17;
  *(_OWORD *)(a1 + 280) = v18;
  *(_OWORD *)(a1 + 248) = v16;
  long long v19 = a2[20];
  uint64_t v20 = *((void *)a2 + 42);
  *(_OWORD *)(a1 + 304) = a2[19];
  *(_OWORD *)(a1 + 320) = v19;
  *(void *)(a1 + 336) = v20;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  uint64_t v22 = (unsigned char *)*((void *)a2 + 43);
  uint64_t v21 = (unsigned char *)*((void *)a2 + 44);
  uint64_t v23 = v21 - v22;
  if (v21 != v22)
  {
    if (v23 < 0) {
      sub_2E00();
    }
    int64_t v24 = (char *)operator new(v21 - v22);
    *(void *)(a1 + 344) = v24;
    *(void *)(a1 + 352) = v24;
    unint64_t v25 = &v24[8 * (v23 >> 3)];
    *(void *)(a1 + 360) = v25;
    memcpy(v24, v22, v23 - 1);
    *(void *)(a1 + 352) = v25;
  }
  memcpy((void *)(a1 + 368), a2 + 23, 0x222uLL);
  sub_F2D1FC(a1 + 920, (uint64_t)a2 + 920);
  *(_OWORD *)(a1 + 5048) = 0u;
  *(void *)(a1 + 5064) = 0;
  *(void *)(a1 + 5048) = *((void *)a2 + 631);
  *(void *)(a1 + 5056) = *((void *)a2 + 632);
  *(void *)(a1 + 5064) = *((void *)a2 + 633);
  *(long long *)((char *)a2 + 5048) = 0u;
  *((void *)a2 + 633) = 0;
  *(void *)(a1 + 5072) = *((void *)a2 + 634);
  *(void *)(a1 + 5080) = *((void *)a2 + 635);
  *(void *)(a1 + 5088) = 0;
  *(_OWORD *)(a1 + 5096) = 0u;
  *(_OWORD *)(a1 + 5088) = a2[318];
  *(void *)(a1 + 5104) = *((void *)a2 + 638);
  *((void *)a2 + 638) = 0;
  a2[318] = 0u;
  *(void *)(a1 + 5128) = 0;
  *(_OWORD *)(a1 + 5112) = 0u;
  *(void *)(a1 + 5112) = *((void *)a2 + 639);
  *(void *)(a1 + 5120) = *((void *)a2 + 640);
  *(void *)(a1 + 5128) = *((void *)a2 + 641);
  uint64_t v26 = *((void *)a2 + 642);
  *(long long *)((char *)a2 + 5112) = 0u;
  *(long long *)((char *)a2 + 5128) = 0u;
  *(void *)(a1 + 5136) = v26;
  *(void *)(a1 + 5144) = *((void *)a2 + 643);
  *((void *)a2 + 643) = 0;
  uint64_t v27 = *((void *)a2 + 644);
  *(void *)(a1 + 5152) = v27;
  uint64_t v28 = *((void *)a2 + 645);
  *(void *)(a1 + 5160) = v28;
  *(_DWORD *)(a1 + 5168) = *((_DWORD *)a2 + 1292);
  if (v28)
  {
    unint64_t v29 = *(void *)(v27 + 8);
    unint64_t v30 = *(void *)(a1 + 5144);
    if ((v30 & (v30 - 1)) != 0)
    {
      if (v29 >= v30) {
        v29 %= v30;
      }
    }
    else
    {
      v29 &= v30 - 1;
    }
    *(void *)(v26 + 8 * v29) = a1 + 5152;
    *((void *)a2 + 644) = 0;
    *((void *)a2 + 645) = 0;
  }
  return a1;
}

void sub_F2D1DC(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 352) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F2D1FC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_F2D2F4(a1 + 16, (uint64_t *)(a2 + 16));
  *(unsigned char *)(a1 + 2520) = *(unsigned char *)(a2 + 2520);
  sub_F2D610((void *)(a1 + 2528), a2 + 2528);
  sub_F2D450((void *)(a1 + 3296), a2 + 3296);
  *(void *)(a1 + 4080) = 0;
  *(_OWORD *)(a1 + 4064) = 0u;
  *(_OWORD *)(a1 + 4064) = *(_OWORD *)(a2 + 4064);
  *(void *)(a1 + 4080) = *(void *)(a2 + 4080);
  *(_OWORD *)(a2 + 4064) = 0u;
  uint64_t v4 = *(void *)(a2 + 4088);
  *(_OWORD *)(a2 + 4080) = 0u;
  *(void *)(a1 + 4088) = v4;
  *(void *)(a1 + 4096) = *(void *)(a2 + 4096);
  *(void *)(a2 + 4096) = 0;
  uint64_t v5 = *(void *)(a2 + 4104);
  *(void *)(a1 + 4104) = v5;
  uint64_t v6 = *(void *)(a2 + 4112);
  *(void *)(a1 + 4112) = v6;
  *(_DWORD *)(a1 + 4120) = *(_DWORD *)(a2 + 4120);
  if (v6)
  {
    unint64_t v7 = *(void *)(v5 + 8);
    unint64_t v8 = *(void *)(a1 + 4096);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v4 + 8 * v7) = a1 + 4104;
    *(void *)(a2 + 4104) = 0;
    *(void *)(a2 + 4112) = 0;
  }
  return a1;
}

uint64_t sub_F2D2F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  uint64_t v5 = a2[5];
  *(void *)(a1 + 32) = a2[4];
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(void *)(a1 + 64) = a2[8];
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  *(void *)(a1 + 72) = a2[9];
  uint64_t v6 = a2[10];
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
  *(void *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  uint64_t v7 = a2[15];
  *(void *)(a1 + 112) = a2[14];
  a2[13] = 0;
  a2[14] = 0;
  a2[12] = 0;
  *(void *)(a1 + 120) = v7;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
  *(void *)(a1 + 144) = a2[18];
  a2[16] = 0;
  a2[17] = 0;
  a2[18] = 0;
  sub_F2D450((void *)(a1 + 152), (uint64_t)(a2 + 19));
  sub_F2D450((void *)(a1 + 920), (uint64_t)(a2 + 115));
  sub_F2D610((void *)(a1 + 1688), (uint64_t)(a2 + 211));
  *(void *)(a1 + 2472) = 0;
  *(_OWORD *)(a1 + 2456) = 0u;
  *(void *)(a1 + 2456) = a2[307];
  *(void *)(a1 + 2464) = a2[308];
  *(void *)(a1 + 2472) = a2[309];
  a2[309] = 0;
  *(_OWORD *)(a2 + 307) = 0u;
  *(void *)(a1 + 2496) = 0;
  *(_OWORD *)(a1 + 2480) = 0u;
  *(_OWORD *)(a1 + 2480) = *((_OWORD *)a2 + 155);
  *(void *)(a1 + 2496) = a2[312];
  a2[312] = 0;
  *((_OWORD *)a2 + 155) = 0u;
  return a1;
}

void *sub_F2D450(void *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  *a1 = &unk_20E1710;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[5] = 0;
  a1[6] = &unk_20E1710;
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = 0;
  a1[11] = 0;
  a1[12] = &unk_20E1710;
  a1[14] = 0;
  a1[15] = 0;
  a1[13] = 0;
  a1[17] = 0;
  a1[18] = &unk_20E1710;
  a1[19] = 0;
  a1[20] = 0;
  a1[21] = 0;
  a1[23] = 0;
  a1[24] = &unk_20E1710;
  a1[26] = 0;
  a1[27] = 0;
  a1[25] = 0;
  a1[29] = 0;
  a1[30] = &unk_20E1710;
  a1[32] = 0;
  a1[33] = 0;
  a1[31] = 0;
  a1[35] = 0;
  a1[36] = &unk_20E1710;
  a1[38] = 0;
  a1[39] = 0;
  a1[37] = 0;
  a1[41] = 0;
  a1[42] = &unk_20E1710;
  a1[43] = 0;
  a1[44] = 0;
  a1[45] = 0;
  a1[47] = 0;
  a1[48] = &unk_20E1710;
  a1[49] = 0;
  a1[50] = 0;
  a1[51] = 0;
  a1[53] = 0;
  a1[54] = &unk_20E1710;
  a1[55] = 0;
  a1[56] = 0;
  a1[57] = 0;
  a1[59] = 0;
  a1[60] = &unk_20E1710;
  a1[65] = 0;
  a1[61] = 0;
  a1[62] = 0;
  a1[63] = 0;
  a1[66] = &unk_20E1710;
  a1[71] = 0;
  a1[68] = 0;
  a1[67] = 0;
  a1[69] = 0;
  a1[72] = &unk_20E1710;
  a1[77] = 0;
  a1[74] = 0;
  a1[73] = 0;
  a1[75] = 0;
  a1[78] = &unk_20E1710;
  a1[83] = 0;
  a1[80] = 0;
  a1[79] = 0;
  a1[81] = 0;
  a1[84] = &unk_20E1710;
  a1[89] = 0;
  a1[86] = 0;
  a1[85] = 0;
  a1[87] = 0;
  a1[90] = &unk_20E1710;
  a1[95] = 0;
  a1[92] = 0;
  a1[91] = 0;
  a1[93] = 0;
  do
  {
    uint64_t v5 = (long long *)(a2 + 48 * v4);
    uint64_t v6 = &a1[6 * v4];
    long long v7 = *v5;
    long long v8 = v5[1];
    *(void *)uint64_t v5 = &unk_20E1710;
    *((void *)v5 + 1) = 0;
    long long v10 = (char *)*v6;
    uint64_t v9 = v6[1];
    *(_OWORD *)uint64_t v6 = v7;
    uint64_t v11 = *((void *)v5 + 5);
    *((void *)v5 + 5) = 0;
    *((void *)v5 + 2) = 0;
    *((void *)v5 + 3) = 0;
    uint64_t v12 = v6[3];
    *((_OWORD *)v6 + 1) = v8;
    v6[5] = v11;
    if (v12)
    {
      uint64_t v13 = 0;
      long long v14 = (void *)(v9 + 16);
      do
      {
        if ((v10[v13] & 0x80000000) == 0)
        {
          long long v15 = (void *)*(v14 - 1);
          if (v15)
          {
            *long long v14 = v15;
            operator delete(v15);
          }
        }
        ++v13;
        v14 += 4;
      }
      while (v12 != v13);
      operator delete(v10);
    }
    ++v4;
  }
  while (v4 != 16);
  return a1;
}

void *sub_F2D610(void *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  *a1 = &unk_20E1710;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[5] = 0;
  a1[6] = &unk_20E1710;
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = 0;
  a1[11] = 0;
  a1[12] = &unk_20E1710;
  a1[14] = 0;
  a1[15] = 0;
  a1[13] = 0;
  a1[17] = 0;
  a1[18] = &unk_20E1710;
  a1[19] = 0;
  a1[20] = 0;
  a1[21] = 0;
  a1[23] = 0;
  a1[24] = &unk_20E1710;
  a1[26] = 0;
  a1[27] = 0;
  a1[25] = 0;
  a1[29] = 0;
  a1[30] = &unk_20E1710;
  a1[32] = 0;
  a1[33] = 0;
  a1[31] = 0;
  a1[35] = 0;
  a1[36] = &unk_20E1710;
  a1[38] = 0;
  a1[39] = 0;
  a1[37] = 0;
  a1[41] = 0;
  a1[42] = &unk_20E1710;
  a1[43] = 0;
  a1[44] = 0;
  a1[45] = 0;
  a1[47] = 0;
  a1[48] = &unk_20E1710;
  a1[49] = 0;
  a1[50] = 0;
  a1[51] = 0;
  a1[53] = 0;
  a1[54] = &unk_20E1710;
  a1[55] = 0;
  a1[56] = 0;
  a1[57] = 0;
  a1[59] = 0;
  a1[60] = &unk_20E1710;
  a1[65] = 0;
  a1[61] = 0;
  a1[62] = 0;
  a1[63] = 0;
  a1[66] = &unk_20E1710;
  a1[71] = 0;
  a1[68] = 0;
  a1[67] = 0;
  a1[69] = 0;
  a1[72] = &unk_20E1710;
  a1[77] = 0;
  a1[74] = 0;
  a1[73] = 0;
  a1[75] = 0;
  a1[78] = &unk_20E1710;
  a1[83] = 0;
  a1[80] = 0;
  a1[79] = 0;
  a1[81] = 0;
  a1[84] = &unk_20E1710;
  a1[89] = 0;
  a1[86] = 0;
  a1[85] = 0;
  a1[87] = 0;
  a1[90] = &unk_20E1710;
  a1[95] = 0;
  a1[92] = 0;
  a1[91] = 0;
  a1[93] = 0;
  do
  {
    uint64_t v5 = (void *)(a2 + v4 * 8);
    uint64_t v6 = *(void *)(a2 + v4 * 8 + 40);
    v5[5] = 0;
    long long v7 = &a1[v4];
    long long v8 = *(_OWORD *)(a2 + v4 * 8);
    *uint64_t v5 = &unk_20E1710;
    v5[1] = 0;
    long long v9 = *(_OWORD *)&a1[v4];
    *(_OWORD *)long long v7 = v8;
    long long v10 = *(_OWORD *)(a2 + v4 * 8 + 16);
    v5[2] = 0;
    v5[3] = 0;
    long long v11 = *(_OWORD *)&a1[v4 + 2];
    *((_OWORD *)v7 + 1) = v10;
    v14[0] = &unk_20E1710;
    v14[5] = 0;
    memset(&v14[1], 0, 24);
    v15[0] = v9;
    v15[1] = v11;
    uint64_t v12 = a1[v4 + 5];
    v7[5] = v6;
    uint64_t v16 = v12;
    sub_2D5C78((uint64_t)v15);
    sub_2D5C78((uint64_t)v14);
    v4 += 6;
  }
  while (v4 != 96);
  return a1;
}

uint64_t sub_F2D7C0(uint64_t a1)
{
  char v2 = *(char **)(a1 + 6880);
  if (v2)
  {
    do
    {
      long long v15 = *(char **)v2;
      sub_57AC8((uint64_t *)v2 + 5);
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      char v2 = v15;
    }
    while (v15);
  }
  uint64_t v3 = *(void **)(a1 + 6864);
  *(void *)(a1 + 6864) = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 6840);
  if (v4)
  {
    *(void *)(a1 + 6848) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 6816);
  if (v5)
  {
    *(void *)(a1 + 6824) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 6792);
  if (v6)
  {
    *(void *)(a1 + 6800) = v6;
    operator delete(v6);
  }
  sub_328138(a1 + 6024);
  sub_328138(a1 + 5256);
  long long v7 = *(void **)(a1 + 5232);
  if (v7)
  {
    *(void *)(a1 + 5240) = v7;
    operator delete(v7);
  }
  long long v8 = *(void **)(a1 + 5208);
  if (v8)
  {
    *(void *)(a1 + 5216) = v8;
    operator delete(v8);
  }
  long long v9 = *(void **)(a1 + 5176);
  if (v9)
  {
    *(void *)(a1 + 5184) = v9;
    operator delete(v9);
  }
  long long v10 = *(void **)(a1 + 5152);
  if (v10)
  {
    *(void *)(a1 + 5160) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void *)(a1 + 5128);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 5136);
    uint64_t v13 = *(void **)(a1 + 5128);
    if (v12 != v11)
    {
      uint64_t v14 = *(void *)(a1 + 5136);
      do
      {
        long long v17 = *(void **)(v14 - 24);
        v14 -= 24;
        uint64_t v16 = v17;
        if (v17)
        {
          *(void *)(v12 - 16) = v16;
          operator delete(v16);
        }
        uint64_t v12 = v14;
      }
      while (v14 != v11);
      uint64_t v13 = *(void **)(a1 + 5128);
    }
    *(void *)(a1 + 5136) = v11;
    operator delete(v13);
  }
  long long v18 = *(void **)(a1 + 5104);
  if (v18) {
    operator delete(v18);
  }
  long long v19 = *(void **)(a1 + 5080);
  if (v19) {
    operator delete(v19);
  }
  uint64_t v20 = *(void **)(a1 + 5048);
  if (v20)
  {
    *(void *)(a1 + 5056) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *(void **)(a1 + 5024);
  if (v21)
  {
    *(void *)(a1 + 5032) = v21;
    operator delete(v21);
  }
  uint64_t v22 = *(void **)(a1 + 5000);
  if (v22)
  {
    *(void *)(a1 + 5008) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *(void **)(a1 + 4976);
  if (v23) {
    operator delete(v23);
  }
  int64_t v24 = *(void **)(a1 + 4952);
  if (v24)
  {
    *(void *)(a1 + 4960) = v24;
    operator delete(v24);
  }
  uint64_t v25 = *(void *)(a1 + 4928);
  if (v25)
  {
    uint64_t v26 = *(void *)(a1 + 4936);
    uint64_t v27 = *(void **)(a1 + 4928);
    if (v26 != v25)
    {
      do
      {
        uint64_t v28 = *(void **)(v26 - 72);
        if (v28)
        {
          *(void *)(v26 - 64) = v28;
          operator delete(v28);
        }
        v26 -= 80;
      }
      while (v26 != v25);
      uint64_t v27 = *(void **)(a1 + 4928);
    }
    *(void *)(a1 + 4936) = v25;
    operator delete(v27);
  }
  if (*(char *)(a1 + 4887) < 0)
  {
    operator delete(*(void **)(a1 + 4864));
    if ((*(char *)(a1 + 4863) & 0x80000000) == 0)
    {
LABEL_53:
      unint64_t v29 = *(void **)(a1 + 4640);
      if (!v29) {
        goto LABEL_55;
      }
      goto LABEL_54;
    }
  }
  else if ((*(char *)(a1 + 4863) & 0x80000000) == 0)
  {
    goto LABEL_53;
  }
  operator delete(*(void **)(a1 + 4840));
  unint64_t v29 = *(void **)(a1 + 4640);
  if (v29)
  {
LABEL_54:
    *(void *)(a1 + 4648) = v29;
    operator delete(v29);
  }
LABEL_55:
  if (*(char *)(a1 + 4407) < 0)
  {
    operator delete(*(void **)(a1 + 4384));
    unint64_t v30 = *(void **)(a1 + 4144);
    if (!v30) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  unint64_t v30 = *(void **)(a1 + 4144);
  if (v30)
  {
LABEL_57:
    *(void *)(a1 + 4152) = v30;
    operator delete(v30);
  }
LABEL_58:
  sub_3A6318((void *)(a1 + 16));
  return a1;
}

uint64_t sub_F2DA34(uint64_t a1)
{
  char v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 80);
    uint64_t v5 = *(void **)(a1 + 72);
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = *(void **)(v4 - 88);
        if (v6)
        {
          *(void *)(v4 - 80) = v6;
          operator delete(v6);
        }
        long long v7 = *(void **)(v4 - 168);
        if (v7)
        {
          *(void *)(v4 - 160) = v7;
          operator delete(v7);
        }
        v4 -= 184;
      }
      while (v4 != v3);
      uint64_t v5 = *(void **)(a1 + 72);
    }
    *(void *)(a1 + 80) = v3;
    operator delete(v5);
  }
  long long v8 = *(void **)(a1 + 48);
  if (v8)
  {
    *(void *)(a1 + 56) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void *)(a1 + 24);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void **)(a1 + 24);
    if (v10 != v9)
    {
      do
      {
        uint64_t v12 = *(void **)(v10 - 88);
        if (v12)
        {
          *(void *)(v10 - 80) = v12;
          operator delete(v12);
        }
        uint64_t v13 = *(void **)(v10 - 168);
        if (v13)
        {
          *(void *)(v10 - 160) = v13;
          operator delete(v13);
        }
        v10 -= 184;
      }
      while (v10 != v9);
      uint64_t v11 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v9;
    operator delete(v11);
  }
  uint64_t v14 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v14;
    operator delete(v14);
  }
  return a1;
}

uint64_t sub_F2DB40(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  sub_F2DEC0((void *)(a1 + 32), a2 + 32);
  *(void *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 800);
  *(void *)(a1 + 816) = *(void *)(a2 + 816);
  *(void *)(a2 + 816) = 0;
  *(_OWORD *)(a2 + 800) = 0u;
  sub_F2DEC0((void *)(a1 + 824), a2 + 824);
  sub_F2E1E4(a1 + 1592, a2 + 1592, 0x20uLL);
  *(void *)(a1 + 1688) = 0;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_OWORD *)(a1 + 1672) = *(_OWORD *)(a2 + 1672);
  *(void *)(a1 + 1688) = *(void *)(a2 + 1688);
  *(void *)(a2 + 1688) = 0;
  *(_OWORD *)(a2 + 1672) = 0u;
  *(void *)(a1 + 1712) = 0;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1696) = *(_OWORD *)(a2 + 1696);
  *(void *)(a1 + 1712) = *(void *)(a2 + 1712);
  *(void *)(a2 + 1712) = 0;
  *(_OWORD *)(a2 + 1696) = 0u;
  sub_F2E638(a1 + 1720, a2 + 1720, 0x20uLL);
  *(void *)(a1 + 2136) = 0;
  *(_OWORD *)(a1 + 2120) = 0u;
  *(void *)(a1 + 2120) = *(void *)(a2 + 2120);
  *(void *)(a1 + 2128) = *(void *)(a2 + 2128);
  *(void *)(a1 + 2136) = *(void *)(a2 + 2136);
  *(void *)(a2 + 2136) = 0;
  *(_OWORD *)(a2 + 2120) = 0u;
  *(void *)(a1 + 2152) = 0;
  *(void *)(a1 + 2144) = 0;
  *(void *)(a1 + 2160) = 0;
  *(_OWORD *)(a1 + 2144) = *(_OWORD *)(a2 + 2144);
  *(void *)(a1 + 2160) = *(void *)(a2 + 2160);
  *(void *)(a2 + 2152) = 0;
  *(void *)(a2 + 2144) = 0;
  *(void *)(a2 + 2160) = 0;
  *(void *)(a1 + 2176) = 0;
  *(void *)(a1 + 2168) = 0;
  *(void *)(a1 + 2184) = 0;
  *(void *)(a1 + 2168) = *(void *)(a2 + 2168);
  *(void *)(a1 + 2176) = *(void *)(a2 + 2176);
  *(void *)(a1 + 2184) = *(void *)(a2 + 2184);
  *(void *)(a2 + 2176) = 0;
  *(void *)(a2 + 2168) = 0;
  *(void *)(a2 + 2184) = 0;
  *(void *)(a1 + 2200) = 0;
  *(void *)(a1 + 2192) = 0;
  *(void *)(a1 + 2208) = 0;
  *(_OWORD *)(a1 + 2192) = *(_OWORD *)(a2 + 2192);
  *(void *)(a1 + 2208) = *(void *)(a2 + 2208);
  *(void *)(a2 + 2200) = 0;
  *(void *)(a2 + 2192) = 0;
  *(void *)(a2 + 2208) = 0;
  *(void *)(a1 + 2224) = 0;
  *(void *)(a1 + 2216) = 0;
  *(void *)(a1 + 2232) = 0;
  *(void *)(a1 + 2216) = *(void *)(a2 + 2216);
  *(void *)(a1 + 2224) = *(void *)(a2 + 2224);
  *(void *)(a1 + 2232) = *(void *)(a2 + 2232);
  *(void *)(a2 + 2224) = 0;
  *(void *)(a2 + 2216) = 0;
  *(void *)(a2 + 2232) = 0;
  *(void *)(a1 + 2248) = 0;
  *(void *)(a1 + 2240) = 0;
  *(void *)(a1 + 2256) = 0;
  *(_OWORD *)(a1 + 2240) = *(_OWORD *)(a2 + 2240);
  *(void *)(a1 + 2256) = *(void *)(a2 + 2256);
  *(void *)(a2 + 2248) = 0;
  *(void *)(a2 + 2240) = 0;
  *(void *)(a2 + 2256) = 0;
  *(void *)(a1 + 2272) = 0;
  *(void *)(a1 + 2264) = 0;
  *(void *)(a1 + 2280) = 0;
  *(void *)(a1 + 2264) = *(void *)(a2 + 2264);
  *(void *)(a1 + 2272) = *(void *)(a2 + 2272);
  *(void *)(a1 + 2280) = *(void *)(a2 + 2280);
  *(void *)(a2 + 2272) = 0;
  *(void *)(a2 + 2264) = 0;
  *(void *)(a2 + 2280) = 0;
  *(void *)(a1 + 2296) = 0;
  *(void *)(a1 + 2288) = 0;
  *(void *)(a1 + 2304) = 0;
  *(_OWORD *)(a1 + 2288) = *(_OWORD *)(a2 + 2288);
  *(void *)(a1 + 2304) = *(void *)(a2 + 2304);
  *(void *)(a2 + 2296) = 0;
  *(void *)(a2 + 2288) = 0;
  *(void *)(a2 + 2304) = 0;
  *(void *)(a1 + 2320) = 0;
  *(void *)(a1 + 2312) = 0;
  *(void *)(a1 + 2328) = 0;
  *(void *)(a1 + 2312) = *(void *)(a2 + 2312);
  *(void *)(a1 + 2320) = *(void *)(a2 + 2320);
  *(void *)(a1 + 2328) = *(void *)(a2 + 2328);
  *(void *)(a2 + 2320) = 0;
  *(void *)(a2 + 2312) = 0;
  *(void *)(a2 + 2328) = 0;
  return a1;
}

void sub_F2DDFC(_Unwind_Exception *a1)
{
  long long v8 = *v6;
  if (*v6)
  {
    v1[213] = v8;
    operator delete(v8);
    uint64_t v9 = *v5;
    if (!*v5)
    {
LABEL_3:
      uint64_t v10 = (void *)v1[208];
      if (!v10) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v9 = *v5;
    if (!*v5) {
      goto LABEL_3;
    }
  }
  v1[210] = v9;
  operator delete(v9);
  uint64_t v10 = (void *)v1[208];
  if (!v10)
  {
LABEL_4:
    sub_328138(v4);
    uint64_t v11 = (void *)v1[100];
    if (!v11) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  free(v10);
  sub_328138(v4);
  uint64_t v11 = (void *)v1[100];
  if (!v11)
  {
LABEL_5:
    sub_328138(v3);
    sub_C63044(v2);
    _Unwind_Resume(a1);
  }
LABEL_9:
  v1[101] = v11;
  operator delete(v11);
  sub_328138(v3);
  sub_C63044(v2);
  _Unwind_Resume(a1);
}

void *sub_F2DEC0(void *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  *a1 = &unk_20E1710;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[5] = 0;
  a1[6] = &unk_20E1710;
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = 0;
  a1[11] = 0;
  a1[12] = &unk_20E1710;
  a1[14] = 0;
  a1[15] = 0;
  a1[13] = 0;
  a1[17] = 0;
  a1[18] = &unk_20E1710;
  a1[19] = 0;
  a1[20] = 0;
  a1[21] = 0;
  a1[23] = 0;
  a1[24] = &unk_20E1710;
  a1[26] = 0;
  a1[27] = 0;
  a1[25] = 0;
  a1[29] = 0;
  a1[30] = &unk_20E1710;
  a1[32] = 0;
  a1[33] = 0;
  a1[31] = 0;
  a1[35] = 0;
  a1[36] = &unk_20E1710;
  a1[38] = 0;
  a1[39] = 0;
  a1[37] = 0;
  a1[41] = 0;
  a1[42] = &unk_20E1710;
  a1[43] = 0;
  a1[44] = 0;
  a1[45] = 0;
  a1[47] = 0;
  a1[48] = &unk_20E1710;
  a1[49] = 0;
  a1[50] = 0;
  a1[51] = 0;
  a1[53] = 0;
  a1[54] = &unk_20E1710;
  a1[55] = 0;
  a1[56] = 0;
  a1[57] = 0;
  a1[59] = 0;
  a1[60] = &unk_20E1710;
  a1[65] = 0;
  a1[61] = 0;
  a1[62] = 0;
  a1[63] = 0;
  a1[66] = &unk_20E1710;
  a1[71] = 0;
  a1[68] = 0;
  a1[67] = 0;
  a1[69] = 0;
  a1[72] = &unk_20E1710;
  a1[77] = 0;
  a1[74] = 0;
  a1[73] = 0;
  a1[75] = 0;
  a1[78] = &unk_20E1710;
  a1[83] = 0;
  a1[80] = 0;
  a1[79] = 0;
  a1[81] = 0;
  a1[84] = &unk_20E1710;
  a1[89] = 0;
  a1[86] = 0;
  a1[85] = 0;
  a1[87] = 0;
  a1[90] = &unk_20E1710;
  a1[95] = 0;
  a1[92] = 0;
  a1[91] = 0;
  a1[93] = 0;
  do
  {
    uint64_t v5 = (void *)(a2 + v4 * 8);
    uint64_t v6 = &a1[v4];
    long long v7 = *(_OWORD *)(a2 + v4 * 8);
    long long v8 = *(_OWORD *)(a2 + v4 * 8 + 16);
    *uint64_t v5 = &unk_20E1710;
    v5[1] = 0;
    uint64_t v9 = (void *)a1[v4];
    *(_OWORD *)uint64_t v6 = v7;
    uint64_t v10 = *(void *)(a2 + v4 * 8 + 40);
    v5[5] = 0;
    v5[2] = 0;
    v5[3] = 0;
    uint64_t v11 = a1[v4 + 3];
    *((_OWORD *)v6 + 1) = v8;
    v6[5] = v10;
    if (v11) {
      operator delete(v9);
    }
    v4 += 6;
  }
  while (v4 != 96);
  return a1;
}

void sub_F2E030(char **a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[3];
  unint64_t v7 = ((unint64_t)a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  long long v8 = (char *)operator new(v7 + 24 * (void)a2);
  *a1 = v8;
  a1[1] = &v8[v7];
  memset(v8, 128, (size_t)(a2 + 8));
  a2[(void)v8] = -1;
  uint64_t v9 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (unsigned char *)dword_4 + 3) {
    uint64_t v9 = 6;
  }
  a1[5] = (char *)(v9 - (void)a1[2]);
  a1[3] = a2;
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if ((i[(void)v4] & 0x80000000) == 0)
      {
        long long v15 = &v5[24 * (void)i];
        unint64_t v16 = ~(unint64_t)*(unsigned int *)v15 + ((unint64_t)*(unsigned int *)v15 << 21);
        unint64_t v17 = 21 * ((265 * (v16 ^ (v16 >> 24))) ^ ((265 * (v16 ^ (v16 >> 24))) >> 14));
        unint64_t v18 = 2147483649u * (v17 ^ (v17 >> 28));
        long long v19 = a1[3];
        uint64_t v20 = *a1;
        unint64_t v21 = (unint64_t)v19 & (v18 >> 7);
        unint64_t v22 = *(void *)&(*a1)[v21] & (~*(void *)&(*a1)[v21] << 7) & 0x8080808080808080;
        if (!v22)
        {
          uint64_t v23 = 8;
          do
          {
            unint64_t v21 = (v21 + v23) & (unint64_t)v19;
            v23 += 8;
            unint64_t v22 = *(void *)&v20[v21] & (~*(void *)&v20[v21] << 7) & 0x8080808080808080;
          }
          while (!v22);
        }
        unint64_t v11 = (v21 + (__clz(__rbit64(v22)) >> 3)) & (unint64_t)v19;
        char v12 = v18 & 0x7F;
        v20[v11] = v12;
        (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v11 - 8) & (unint64_t)a1[3])] = v12;
        uint64_t v13 = (uint64_t)&a1[1][24 * v11];
        long long v14 = *(_OWORD *)v15;
        *(void *)(v13 + 16) = *((void *)v15 + 2);
        *(_OWORD *)uint64_t v13 = v14;
      }
    }
    operator delete(v4);
  }
}

float sub_F2E1E4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = 0;
  if (*(unsigned char *)(a2 + 25))
  {
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)(a1 + 16), 0)));
    *(unsigned char *)(a1 + 24) = 0;
    sub_F2E320(a1, a2, a3);
  }
  else
  {
    unint64_t v6 = 4;
    if (a3 > 4) {
      goto LABEL_5;
    }
    while (1)
    {
      float v7 = *(float *)(a1 + 16) * (float)v6;
      if (*(void *)(a2 + 48) - *(void *)(a2 + 40) < (unint64_t)v7) {
        break;
      }
      do
      {
LABEL_5:
        if ((v6 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "resize overflow");
        }
        v6 *= 2;
      }
      while (v6 < a3);
    }
    *(void *)(a1 + 56) = v6;
    float result = *(float *)(a1 + 20) * (float)v6;
    *(void *)a1 = (unint64_t)v7;
    *(void *)(a1 + 8) = (unint64_t)result;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_F2E30C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_F2E320(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = *(void *)(a2 + 48) - *(void *)(a2 + 40);
  unint64_t v6 = 4;
  if (a3 <= 4) {
    goto LABEL_4;
  }
  do
  {
    do
    {
      if ((v6 & 0x8000000000000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v6 *= 2;
    }
    while (v6 < a3);
LABEL_4:
    ;
  }
  while (v5 >= (unint64_t)(float)(*(float *)(a1 + 16) * (float)v6));
  sub_C63140(a1, v6);
  uint64_t v7 = *(void *)(a2 + 56);
  if (v7)
  {
    int v8 = *(_DWORD *)(a2 + 64);
    int v9 = *(unsigned __int16 *)(a2 + 68);
    int v10 = *(unsigned __int8 *)(a2 + 70);
    if (*(void *)(a2 + 40))
    {
      uint64_t v11 = 8 * v7;
      char v12 = *(unint64_t **)(a2 + 72);
      while (1)
      {
        unint64_t v13 = *v12;
        int v14 = (unsigned __int16)WORD2(*v12);
        BOOL v15 = v8 == *v12 && v9 == v14;
        if (!v15 || (HIWORD(v13) & 1) == (v10 == 0))
        {
          BOOL v16 = *(_DWORD *)(a2 + 32) == v13 && *(unsigned __int16 *)(a2 + 36) == v14;
          if (!v16 || (HIWORD(v13) & 1) == (*(unsigned char *)(a2 + 38) == 0)) {
            break;
          }
        }
        ++v12;
        v11 -= 8;
        if (!v11) {
          goto LABEL_64;
        }
      }
    }
    else
    {
      uint64_t v33 = 8 * v7;
      char v12 = *(unint64_t **)(a2 + 72);
      while (1)
      {
        BOOL v34 = v8 == *v12 && v9 == (unsigned __int16)WORD2(*v12);
        if (!v34 || (HIWORD(*v12) & 1) == (v10 == 0)) {
          break;
        }
        ++v12;
        v33 -= 8;
        if (!v33) {
          goto LABEL_64;
        }
      }
    }
  }
  else
  {
    char v12 = *(unint64_t **)(a2 + 72);
  }
  uint64_t v17 = *(void *)(a2 + 72) + 8 * v7;
  if (v12 != (unint64_t *)v17)
  {
    do
    {
      unint64_t v18 = (*v12 >> 16) & 0xFFFF0000 | (*v12 << 32);
      unint64_t v19 = (0x2127599BF4325C37 * ((v18 | ((*v12 & 0xFF000000000000) == 0)) ^ (v18 >> 23))) ^ ((0x2127599BF4325C37
                                                                                                  * ((v18 | ((*v12 & 0xFF000000000000) == 0)) ^ (v18 >> 23))) >> 47);
      uint64_t v20 = *(void *)(a1 + 72);
      for (uint64_t i = 1; ; ++i)
      {
        uint64_t v22 = v19 & (*(void *)(a1 + 56) - 1);
        unint64_t v23 = *(void *)(v20 + 8 * v22);
        if (__PAIR64__(*(unsigned __int16 *)(a1 + 68), *(_DWORD *)(a1 + 64)) == __PAIR64__(WORD2(v23), v23)
          && (HIWORD(v23) & 1) != (*(unsigned char *)(a1 + 70) == 0))
        {
          break;
        }
        unint64_t v19 = i + v22;
      }
      *(void *)(v20 + 8 * v22) = *v12;
      ++*(void *)(a1 + 48);
      int64_t v24 = v12 + 1;
      char v12 = (unint64_t *)v17;
      if (v24 != (unint64_t *)v17)
      {
        int v25 = *(_DWORD *)(a2 + 64);
        int v26 = *(unsigned __int16 *)(a2 + 68);
        int v27 = *(unsigned __int8 *)(a2 + 70);
        if (*(void *)(a2 + 40))
        {
          while (1)
          {
            unint64_t v28 = *v24;
            int v29 = (unsigned __int16)WORD2(*v24);
            BOOL v30 = v25 == *v24 && v26 == v29;
            if (!v30 || (HIWORD(v28) & 1) == (v27 == 0))
            {
              BOOL v31 = *(_DWORD *)(a2 + 32) == v28 && *(unsigned __int16 *)(a2 + 36) == v29;
              if (!v31 || (HIWORD(v28) & 1) == (*(unsigned char *)(a2 + 38) == 0)) {
                break;
              }
            }
            if (++v24 == (unint64_t *)v17) {
              goto LABEL_55;
            }
          }
        }
        else
        {
          while (1)
          {
            BOOL v32 = v25 == *v24 && v26 == (unsigned __int16)WORD2(*v24);
            if (!v32 || (HIWORD(*v24) & 1) == (v27 == 0)) {
              break;
            }
            if (++v24 == (unint64_t *)v17)
            {
LABEL_55:
              char v12 = (unint64_t *)v17;
              goto LABEL_26;
            }
          }
        }
        char v12 = v24;
      }
LABEL_26:
      ;
    }
    while (v12 != (unint64_t *)(*(void *)(a2 + 72) + 8 * *(void *)(a2 + 56)));
  }
LABEL_64:
  ++*(_DWORD *)(a1 + 28);
}

void sub_F2E624(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float sub_F2E638(uint64_t a1, uint64_t a2, unint64_t a3)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v4 = *(_OWORD *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  long long v9 = *(_OWORD *)(a2 + 144);
  long long v10 = *(_OWORD *)(a2 + 176);
  uint64_t v11 = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 144) = v9;
  *(void *)(a1 + 192) = v11;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  long long v12 = *(_OWORD *)(a2 + 224);
  long long v13 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v13;
  *(_OWORD *)(a1 + 224) = v12;
  long long v14 = *(_OWORD *)(a2 + 272);
  long long v15 = *(_OWORD *)(a2 + 288);
  long long v16 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = v16;
  *(_OWORD *)(a1 + 272) = v14;
  *(_OWORD *)(a1 + 288) = v15;
  long long v17 = *(_OWORD *)(a2 + 336);
  long long v18 = *(_OWORD *)(a2 + 368);
  uint64_t v19 = *(void *)(a2 + 384);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v18;
  *(_OWORD *)(a1 + 336) = v17;
  *(void *)(a1 + 384) = v19;
  *(void *)(a1 + 392) = 0;
  if (*(unsigned char *)(a2 + 25))
  {
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)(a1 + 16), 0)));
    *(unsigned char *)(a1 + 24) = 0;
    sub_F2E7D4(a1, (void *)a2, a3);
  }
  else
  {
    unint64_t v21 = 4;
    if (a3 > 4) {
      goto LABEL_5;
    }
    while (1)
    {
      float v22 = *(float *)(a1 + 16) * (float)v21;
      if (*(void *)(a2 + 208) - *(void *)(a2 + 200) < (unint64_t)v22) {
        break;
      }
      do
      {
LABEL_5:
        if ((v21 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "resize overflow");
        }
        v21 *= 2;
      }
      while (v21 < a3);
    }
    *(void *)(a1 + 216) = v21;
    float result = *(float *)(a1 + 20) * (float)v21;
    *(void *)a1 = (unint64_t)v22;
    *(void *)(a1 + 8) = (unint64_t)result;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_F2E7C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_F2E7D4(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v5 = a2[26] - a2[25];
  unint64_t v6 = 4;
  if (a3 > 4) {
    goto LABEL_3;
  }
  while (v5 >= (unint64_t)(float)(*(float *)(a1 + 16) * (float)v6))
  {
    do
    {
LABEL_3:
      if ((v6 & 0x8000000000000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v6 *= 2;
    }
    while (v6 < a3);
  }
  sub_F2EA78(a1, v6);
  uint64_t v7 = a2[49];
  uint64_t v8 = a2[27];
  uint64_t v9 = v7 + 168 * v8;
  if (v8)
  {
    uint64_t v10 = 168 * v8;
    while (sub_1024810((uint64_t)(a2 + 28), v7) || a2[25] && sub_1024810((uint64_t)(a2 + 4), v7))
    {
      v7 += 168;
      v10 -= 168;
      if (!v10)
      {
        uint64_t v7 = v9;
        break;
      }
    }
    uint64_t v11 = v7;
    if (v7 != a2[49] + 168 * a2[27])
    {
      uint64_t v12 = (uint64_t)(a2 + 28);
      uint64_t v13 = (uint64_t)(a2 + 4);
      unint64_t v28 = a2;
      do
      {
        uint64_t v14 = *(void *)(a1 + 216) - 1;
        unint64_t v15 = sub_102488C(a1, v11) & v14;
        if (!sub_1024810(a1 + 224, *(void *)(a1 + 392) + 168 * v15))
        {
          uint64_t v16 = 1;
          do
            unint64_t v15 = (v15 + v16++) & v14;
          while (!sub_1024810(a1 + 224, *(void *)(a1 + 392) + 168 * v15));
        }
        uint64_t v17 = *(void *)(a1 + 392) + 168 * v15;
        long long v18 = *(_OWORD *)v11;
        long long v19 = *(_OWORD *)(v11 + 32);
        *(_OWORD *)(v17 + 16) = *(_OWORD *)(v11 + 16);
        *(_OWORD *)(v17 + 32) = v19;
        *(_OWORD *)uint64_t v17 = v18;
        long long v20 = *(_OWORD *)(v11 + 48);
        long long v21 = *(_OWORD *)(v11 + 64);
        long long v22 = *(_OWORD *)(v11 + 96);
        *(_OWORD *)(v17 + 80) = *(_OWORD *)(v11 + 80);
        *(_OWORD *)(v17 + 96) = v22;
        *(_OWORD *)(v17 + 48) = v20;
        *(_OWORD *)(v17 + 64) = v21;
        long long v23 = *(_OWORD *)(v11 + 112);
        long long v24 = *(_OWORD *)(v11 + 128);
        long long v25 = *(_OWORD *)(v11 + 144);
        *(void *)(v17 + 160) = *(void *)(v11 + 160);
        *(_OWORD *)(v17 + 128) = v24;
        *(_OWORD *)(v17 + 144) = v25;
        *(_OWORD *)(v17 + 112) = v23;
        ++*(void *)(a1 + 208);
        uint64_t v26 = v11 + 168;
        uint64_t v11 = v9;
        if (v26 != v9)
        {
          uint64_t v11 = v26;
          while (sub_1024810(v12, v11) || v28[25] && sub_1024810(v13, v11))
          {
            v11 += 168;
            if (v11 == v9)
            {
              uint64_t v11 = v9;
              break;
            }
          }
        }
      }
      while (v11 != v28[49] + 168 * v28[27]);
    }
  }
  ++*(_DWORD *)(a1 + 28);
}

void sub_F2EA64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64x2_t sub_F2EA78(uint64_t a1, unint64_t a2)
{
  long long v4 = *(_OWORD **)(a1 + 392);
  if (v4)
  {
    if (*(void *)(a1 + 216) == a2) {
      goto LABEL_7;
    }
    unint64_t v5 = malloc_type_realloc(*(void **)(a1 + 392), 168 * a2, 0x1000040287579A1uLL);
    if (!v5)
    {
      fprintf(__stderrp, "sparsehash: FATAL ERROR: failed to reallocate %lu elements for ptr %p", a2, v4);
      exit(1);
    }
  }
  else
  {
    unint64_t v5 = malloc_type_malloc(168 * a2, 0x1000040287579A1uLL);
  }
  *(void *)(a1 + 392) = v5;
  long long v4 = v5;
LABEL_7:
  if (a2)
  {
    uint64_t v6 = 168 * a2;
    do
    {
      long long v7 = *(_OWORD *)(a1 + 224);
      long long v8 = *(_OWORD *)(a1 + 256);
      v4[1] = *(_OWORD *)(a1 + 240);
      v4[2] = v8;
      *long long v4 = v7;
      long long v9 = *(_OWORD *)(a1 + 272);
      long long v10 = *(_OWORD *)(a1 + 288);
      long long v11 = *(_OWORD *)(a1 + 320);
      v4[5] = *(_OWORD *)(a1 + 304);
      v4[6] = v11;
      v4[3] = v9;
      v4[4] = v10;
      long long v12 = *(_OWORD *)(a1 + 336);
      long long v13 = *(_OWORD *)(a1 + 352);
      long long v14 = *(_OWORD *)(a1 + 368);
      *((void *)v4 + 20) = *(void *)(a1 + 384);
      v4[8] = v13;
      v4[9] = v14;
      v4[7] = v12;
      long long v4 = (_OWORD *)((char *)v4 + 168);
      v6 -= 168;
    }
    while (v6);
  }
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = a2;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)a2)));
  *(uint64x2_t *)a1 = result;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_F2EBA4(void *a1, uint64_t a2)
{
  uint64_t v3 = 0x7E3F1F8FC7E3F1F9 * ((uint64_t)(a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x1C0E070381C0E0) {
    sub_2E00();
  }
  if (0xFC7E3F1F8FC7E3F2 * ((uint64_t)(a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0xFC7E3F1F8FC7E3F2 * ((uint64_t)(a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x7E3F1F8FC7E3F1F9 * ((uint64_t)(a1[2] - *a1) >> 5)) >= 0xE070381C0E070) {
    unint64_t v6 = 0x1C0E070381C0E0;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1C0E070381C0E0) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(2336 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v14 = (uint64_t)&v7[2336 * v3];
  *((void *)&v15 + 1) = &v7[2336 * v6];
  sub_F2DB40(v14, a2);
  uint64_t v8 = 0;
  long long v10 = (void *)*a1;
  for (uint64_t i = a1[1]; (void *)(i + v8) != v10; sub_F2EDB4(v8 + v14, v8 + i))
    v8 -= 2336;
  long long v12 = (void *)*a1;
  uint64_t v11 = a1[1];
  *a1 = v14 + v8;
  *(void *)&long long v15 = v14 + 2336;
  for (*(_OWORD *)(a1 + 1) = v15; (void *)v11 != v12; uint64_t v11 = sub_F2CA5C(v11 - 2336))
    ;
  if (v12) {
    operator delete(v12);
  }
  return v14 + 2336;
}

void sub_F2ED1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_F2ED60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_F2ED60(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 2336;
    sub_F2CA5C(i - 2336);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_F2EDB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 32;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v5 = (void *)(a1 + 32);
  sub_D2E30C((void *)(a1 + 8), (uint64_t *)(a2 + 8));
  sub_F2F0BC(v5, v4, (uint64_t)&v22);
  *(void *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  unint64_t v6 = *(unsigned char **)(a2 + 800);
  long long v7 = *(unsigned char **)(a2 + 808);
  int64_t v8 = v7 - v6;
  if (v7 != v6)
  {
    if (v8 < 0) {
      sub_2E00();
    }
    long long v9 = (char *)operator new(v7 - v6);
    *(void *)(a1 + 800) = v9;
    *(void *)(a1 + 808) = v9;
    long long v10 = &v9[8 * (v8 >> 3)];
    *(void *)(a1 + 816) = v10;
    memcpy(v9, v6, v8);
    *(void *)(a1 + 808) = v10;
  }
  sub_F2FC20((void *)(a1 + 824), a2 + 824, (uint64_t)&v23);
  sub_F2E1E4(a1 + 1592, a2 + 1592, 0x20uLL);
  *(void *)(a1 + 1688) = 0;
  *(_OWORD *)(a1 + 1672) = 0u;
  uint64_t v11 = *(unsigned char **)(a2 + 1672);
  long long v12 = *(unsigned char **)(a2 + 1680);
  int64_t v13 = v12 - v11;
  if (v12 != v11)
  {
    if (0xCF3CF3CF3CF3CF3DLL * (v13 >> 3) > 0x186186186186186) {
      sub_2E00();
    }
    uint64_t v14 = (char *)operator new(v13);
    *(void *)(a1 + 1672) = v14;
    *(void *)(a1 + 1680) = v14;
    long long v15 = &v14[8 * (v13 >> 3)];
    *(void *)(a1 + 1688) = v15;
    memcpy(v14, v11, v13);
    *(void *)(a1 + 1680) = v15;
  }
  *(void *)(a1 + 1712) = 0;
  *(_OWORD *)(a1 + 1696) = 0u;
  uint64_t v16 = *(unsigned char **)(a2 + 1696);
  uint64_t v17 = *(unsigned char **)(a2 + 1704);
  int64_t v18 = v17 - v16;
  if (v17 != v16)
  {
    if (0xCF3CF3CF3CF3CF3DLL * (v18 >> 3) > 0x186186186186186) {
      sub_2E00();
    }
    long long v19 = (char *)operator new(v18);
    *(void *)(a1 + 1696) = v19;
    *(void *)(a1 + 1704) = v19;
    long long v20 = &v19[8 * (v18 >> 3)];
    *(void *)(a1 + 1712) = v20;
    memcpy(v19, v16, v18);
    *(void *)(a1 + 1704) = v20;
  }
  sub_F2E638(a1 + 1720, a2 + 1720, 0x20uLL);
  sub_F307B0((void *)(a1 + 2120), (void *)(a2 + 2120));
  return a1;
}

void sub_F2EFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void ***a11)
{
  uint64_t v17 = (void *)v12[264];
  if (v17)
  {
    free(v17);
    int64_t v18 = *v15;
    if (!*v15)
    {
LABEL_3:
      long long v19 = *v14;
      if (!*v14) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    int64_t v18 = *v15;
    if (!*v15) {
      goto LABEL_3;
    }
  }
  v12[213] = v18;
  operator delete(v18);
  long long v19 = *v14;
  if (!*v14)
  {
LABEL_4:
    long long v20 = (void *)v12[208];
    if (!v20)
    {
LABEL_10:
      sub_328138(v13);
      long long v21 = *a10;
      if (*a10)
      {
        v12[101] = v21;
        operator delete(v21);
      }
      sub_328138(v11);
      sub_C63044(a11);
      _Unwind_Resume(a1);
    }
LABEL_9:
    free(v20);
    goto LABEL_10;
  }
LABEL_8:
  v12[210] = v19;
  operator delete(v19);
  long long v20 = (void *)v12[208];
  if (!v20) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void sub_F2F0AC()
{
  if (!*v0) {
    JUMPOUT(0xF2F094);
  }
  JUMPOUT(0xF2F08CLL);
}

void *sub_F2F0BC(void *a1, uint64_t a2, uint64_t a3)
{
  __p[0] = 0;
  __p[1] = (void *)(a2 + 40);
  *(void *)&long long v14 = a2 + 40;
  *((void *)&v14 + 1) = a3;
  sub_F2F3F4(a1, (unint64_t *)__p);
  for (uint64_t i = 0; i != 96; i += 6)
  {
    sub_F2F198((uint64_t)__p, (char **)(a2 + i * 8));
    unint64_t v6 = &a1[i];
    uint64_t v7 = v15;
    uint64_t v15 = 0;
    int64_t v8 = (void *)a1[i];
    long long v9 = *(_OWORD *)__p;
    long long v10 = v14;
    __p[0] = &unk_20E1710;
    __p[1] = 0;
    uint64_t v11 = a1[i + 3];
    long long v14 = 0uLL;
    *(_OWORD *)unint64_t v6 = v9;
    *((_OWORD *)v6 + 1) = v10;
    v6[5] = v7;
    if (v11)
    {
      operator delete(v8);
      if (*((void *)&v14 + 1)) {
        operator delete(__p[0]);
      }
    }
  }
  return a1;
}

void sub_F2F184(_Unwind_Exception *a1)
{
  sub_328138(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F2F198(uint64_t a1, char **a2)
{
  *(void *)a1 = &unk_20E1710;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  unint64_t v4 = (unint64_t)a2[3];
  if (v4) {
    sub_EE1AA4((char **)a1, (char *)(0xFFFFFFFFFFFFFFFFLL >> __clz(v4)));
  }
  unint64_t v6 = *a2;
  unint64_t v5 = a2[1];
  if (**a2 > -2)
  {
    uint64_t v7 = *a2;
    long long v9 = &a2[3][(void)v6];
    if (*a2 == v9) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v7 = *a2;
    do
    {
      unint64_t v8 = (__clz(__rbit64(((*v7 >> 7) & ~*v7 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      uint64_t v7 = (void *)((char *)v7 + v8);
      v5 += 16 * v8;
    }
    while (*(char *)v7 < -1);
    long long v9 = &a2[3][(void)v6];
    if (v7 == (void *)v9) {
      goto LABEL_17;
    }
  }
  do
  {
    unint64_t v10 = 0x2127599BF4325C37 * (*(void *)v5 ^ (*(void *)v5 >> 23));
    unint64_t v11 = (v10 ^ ~(v10 >> 47)) + ((v10 ^ (v10 >> 47)) << 21);
    unint64_t v12 = 21 * ((265 * (v11 ^ (v11 >> 24))) ^ ((265 * (v11 ^ (v11 >> 24))) >> 14));
    unint64_t v13 = 2147483649u * (v12 ^ (v12 >> 28));
    uint64_t v14 = *(void *)(a1 + 24);
    uint64_t v15 = *(char **)a1;
    unint64_t v16 = v14 & (v13 >> 7);
    unint64_t v17 = *(void *)(*(void *)a1 + v16) & (~*(void *)(*(void *)a1 + v16) << 7) & 0x8080808080808080;
    if (!v17)
    {
      uint64_t v18 = 8;
      do
      {
        unint64_t v16 = (v16 + v18) & v14;
        v18 += 8;
        unint64_t v17 = *(void *)&v15[v16] & (~*(void *)&v15[v16] << 7) & 0x8080808080808080;
      }
      while (!v17);
    }
    unint64_t v19 = (v16 + (__clz(__rbit64(v17)) >> 3)) & v14;
    char v20 = v13 & 0x7F;
    v15[v19] = v20;
    *(unsigned char *)((*(void *)(a1 + 24) & 7) + *(void *)a1 + ((v19 - 8) & *(void *)(a1 + 24)) + 1) = v20;
    uint64_t v21 = *(void *)(a1 + 8) + 16 * v19;
    *(void *)uint64_t v21 = *(void *)v5;
    *(_DWORD *)(v21 + 8) = *((_DWORD *)v5 + 2);
    int v22 = *((char *)v7 + 1);
    uint64_t v7 = (void *)((char *)v7 + 1);
    v5 += 16;
    if (v22 <= -2)
    {
      do
      {
        unint64_t v23 = (__clz(__rbit64(((*v7 >> 7) & ~*v7 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        uint64_t v7 = (void *)((char *)v7 + v23);
        v5 += 16 * v23;
      }
      while (*(char *)v7 < -1);
    }
  }
  while (v7 != (void *)v9);
LABEL_17:
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 40) -= a2[2];
  return a1;
}

void sub_F2F3C8(_Unwind_Exception *exception_object)
{
  if (*(void *)(v1 + 24))
  {
    operator delete(*(void **)v1);
    *(void *)uint64_t v1 = v3;
    *(void *)(v1 + 40) = 0;
    v2[1] = 0;
    v2[2] = 0;
    void *v2 = 0;
  }
  _Unwind_Resume(exception_object);
}

void *sub_F2F3F4(void *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  a1[5] = 0;
  *a1 = &unk_20E1710;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  if (v4)
  {
    unint64_t v5 = __clz(v4);
    unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> v5;
    if (v5 == 61) {
      unint64_t v7 = 6;
    }
    else {
      unint64_t v7 = (0xFFFFFFFFFFFFFFFFLL >> v5) - (0x1FFFFFFFFFFFFFFFuLL >> v5);
    }
    a1[5] = v7;
    unint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 16;
    long long v9 = (char *)operator new(v8 + 16 * v6);
    *a1 = v9;
    a1[1] = &v9[v8];
    memset(v9, 128, v6 + 8);
    v9[v6] = -1;
    a1[5] = v7;
    a1[3] = v6;
  }
  a1[6] = &unk_20E1710;
  unint64_t v10 = *a2;
  a1[11] = 0;
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = 0;
  if (v10)
  {
    unint64_t v11 = __clz(v10);
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> v11;
    if (v11 == 61) {
      unint64_t v13 = 6;
    }
    else {
      unint64_t v13 = (0xFFFFFFFFFFFFFFFFLL >> v11) - (0x1FFFFFFFFFFFFFFFuLL >> v11);
    }
    a1[11] = v13;
    unint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v15 = (char *)operator new(v14 + 16 * v12);
    a1[6] = v15;
    a1[7] = &v15[v14];
    memset(v15, 128, v12 + 8);
    v15[v12] = -1;
    a1[11] = v13;
    a1[9] = v12;
  }
  a1[12] = &unk_20E1710;
  unint64_t v16 = *a2;
  a1[17] = 0;
  a1[14] = 0;
  a1[15] = 0;
  a1[13] = 0;
  if (v16)
  {
    unint64_t v17 = __clz(v16);
    unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> v17;
    if (v17 == 61) {
      unint64_t v19 = 6;
    }
    else {
      unint64_t v19 = (0xFFFFFFFFFFFFFFFFLL >> v17) - (0x1FFFFFFFFFFFFFFFuLL >> v17);
    }
    a1[17] = v19;
    unint64_t v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v21 = (char *)operator new(v20 + 16 * v18);
    a1[12] = v21;
    a1[13] = &v21[v20];
    memset(v21, 128, v18 + 8);
    v21[v18] = -1;
    a1[17] = v19;
    a1[15] = v18;
  }
  a1[18] = &unk_20E1710;
  unint64_t v22 = *a2;
  a1[23] = 0;
  a1[20] = 0;
  a1[21] = 0;
  a1[19] = 0;
  if (v22)
  {
    unint64_t v23 = __clz(v22);
    unint64_t v24 = 0xFFFFFFFFFFFFFFFFLL >> v23;
    if (v23 == 61) {
      unint64_t v25 = 6;
    }
    else {
      unint64_t v25 = (0xFFFFFFFFFFFFFFFFLL >> v23) - (0x1FFFFFFFFFFFFFFFuLL >> v23);
    }
    a1[23] = v25;
    unint64_t v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 16;
    int v27 = (char *)operator new(v26 + 16 * v24);
    a1[18] = v27;
    a1[19] = &v27[v26];
    memset(v27, 128, v24 + 8);
    v27[v24] = -1;
    a1[23] = v25;
    a1[21] = v24;
  }
  a1[24] = &unk_20E1710;
  unint64_t v28 = *a2;
  a1[29] = 0;
  a1[26] = 0;
  a1[27] = 0;
  a1[25] = 0;
  if (v28)
  {
    unint64_t v29 = __clz(v28);
    unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> v29;
    if (v29 == 61) {
      unint64_t v31 = 6;
    }
    else {
      unint64_t v31 = (0xFFFFFFFFFFFFFFFFLL >> v29) - (0x1FFFFFFFFFFFFFFFuLL >> v29);
    }
    a1[29] = v31;
    unint64_t v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v33 = (char *)operator new(v32 + 16 * v30);
    a1[24] = v33;
    a1[25] = &v33[v32];
    memset(v33, 128, v30 + 8);
    v33[v30] = -1;
    a1[29] = v31;
    a1[27] = v30;
  }
  a1[30] = &unk_20E1710;
  unint64_t v34 = *a2;
  a1[35] = 0;
  a1[32] = 0;
  a1[33] = 0;
  a1[31] = 0;
  if (v34)
  {
    unint64_t v35 = __clz(v34);
    unint64_t v36 = 0xFFFFFFFFFFFFFFFFLL >> v35;
    if (v35 == 61) {
      unint64_t v37 = 6;
    }
    else {
      unint64_t v37 = (0xFFFFFFFFFFFFFFFFLL >> v35) - (0x1FFFFFFFFFFFFFFFuLL >> v35);
    }
    a1[35] = v37;
    unint64_t v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v39 = (char *)operator new(v38 + 16 * v36);
    a1[30] = v39;
    a1[31] = &v39[v38];
    memset(v39, 128, v36 + 8);
    v39[v36] = -1;
    a1[35] = v37;
    a1[33] = v36;
  }
  unint64_t v40 = *a2;
  a1[41] = 0;
  a1[36] = &unk_20E1710;
  a1[37] = 0;
  a1[38] = 0;
  a1[39] = 0;
  if (v40)
  {
    unint64_t v41 = __clz(v40);
    unint64_t v42 = 0xFFFFFFFFFFFFFFFFLL >> v41;
    if (v41 == 61) {
      unint64_t v43 = 6;
    }
    else {
      unint64_t v43 = (0xFFFFFFFFFFFFFFFFLL >> v41) - (0x1FFFFFFFFFFFFFFFuLL >> v41);
    }
    a1[41] = v43;
    unint64_t v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v45 = (char *)operator new(v44 + 16 * v42);
    a1[36] = v45;
    a1[37] = &v45[v44];
    memset(v45, 128, v42 + 8);
    v45[v42] = -1;
    a1[41] = v43;
    a1[39] = v42;
  }
  unint64_t v46 = *a2;
  a1[47] = 0;
  a1[42] = &unk_20E1710;
  a1[43] = 0;
  a1[44] = 0;
  a1[45] = 0;
  if (v46)
  {
    unint64_t v47 = __clz(v46);
    unint64_t v48 = 0xFFFFFFFFFFFFFFFFLL >> v47;
    if (v47 == 61) {
      unint64_t v49 = 6;
    }
    else {
      unint64_t v49 = (0xFFFFFFFFFFFFFFFFLL >> v47) - (0x1FFFFFFFFFFFFFFFuLL >> v47);
    }
    a1[47] = v49;
    unint64_t v50 = (v48 & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v51 = (char *)operator new(v50 + 16 * v48);
    a1[42] = v51;
    a1[43] = &v51[v50];
    memset(v51, 128, v48 + 8);
    v51[v48] = -1;
    a1[47] = v49;
    a1[45] = v48;
  }
  unint64_t v52 = *a2;
  a1[53] = 0;
  a1[48] = &unk_20E1710;
  a1[49] = 0;
  a1[50] = 0;
  a1[51] = 0;
  if (v52)
  {
    unint64_t v53 = __clz(v52);
    unint64_t v54 = 0xFFFFFFFFFFFFFFFFLL >> v53;
    if (v53 == 61) {
      unint64_t v55 = 6;
    }
    else {
      unint64_t v55 = (0xFFFFFFFFFFFFFFFFLL >> v53) - (0x1FFFFFFFFFFFFFFFuLL >> v53);
    }
    a1[53] = v55;
    unint64_t v56 = (v54 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v57 = (char *)operator new(v56 + 16 * v54);
    a1[48] = v57;
    a1[49] = &v57[v56];
    memset(v57, 128, v54 + 8);
    v57[v54] = -1;
    a1[53] = v55;
    a1[51] = v54;
  }
  unint64_t v58 = *a2;
  a1[59] = 0;
  a1[54] = &unk_20E1710;
  a1[55] = 0;
  a1[56] = 0;
  a1[57] = 0;
  if (v58)
  {
    unint64_t v59 = __clz(v58);
    unint64_t v60 = 0xFFFFFFFFFFFFFFFFLL >> v59;
    if (v59 == 61) {
      unint64_t v61 = 6;
    }
    else {
      unint64_t v61 = (0xFFFFFFFFFFFFFFFFLL >> v59) - (0x1FFFFFFFFFFFFFFFuLL >> v59);
    }
    a1[59] = v61;
    unint64_t v62 = (v60 & 0xFFFFFFFFFFFFFFF8) + 16;
    int v63 = (char *)operator new(v62 + 16 * v60);
    a1[54] = v63;
    a1[55] = &v63[v62];
    memset(v63, 128, v60 + 8);
    v63[v60] = -1;
    a1[59] = v61;
    a1[57] = v60;
  }
  unint64_t v64 = *a2;
  a1[65] = 0;
  a1[60] = &unk_20E1710;
  a1[61] = 0;
  a1[62] = 0;
  a1[63] = 0;
  if (v64)
  {
    unint64_t v65 = __clz(v64);
    unint64_t v66 = 0xFFFFFFFFFFFFFFFFLL >> v65;
    if (v65 == 61) {
      unint64_t v67 = 6;
    }
    else {
      unint64_t v67 = (0xFFFFFFFFFFFFFFFFLL >> v65) - (0x1FFFFFFFFFFFFFFFuLL >> v65);
    }
    a1[65] = v67;
    unint64_t v68 = (v66 & 0xFFFFFFFFFFFFFFF8) + 16;
    char v69 = (char *)operator new(v68 + 16 * v66);
    a1[60] = v69;
    a1[61] = &v69[v68];
    memset(v69, 128, v66 + 8);
    v69[v66] = -1;
    a1[65] = v67;
    a1[63] = v66;
  }
  unint64_t v70 = *a2;
  a1[66] = &unk_20E1710;
  a1[71] = 0;
  a1[67] = 0;
  a1[69] = 0;
  a1[68] = 0;
  if (v70)
  {
    unint64_t v71 = __clz(v70);
    unint64_t v72 = 0xFFFFFFFFFFFFFFFFLL >> v71;
    if (v71 == 61) {
      unint64_t v73 = 6;
    }
    else {
      unint64_t v73 = (0xFFFFFFFFFFFFFFFFLL >> v71) - (0x1FFFFFFFFFFFFFFFuLL >> v71);
    }
    a1[71] = v73;
    unint64_t v74 = (v72 & 0xFFFFFFFFFFFFFFF8) + 16;
    char v75 = (char *)operator new(v74 + 16 * v72);
    a1[66] = v75;
    a1[67] = &v75[v74];
    memset(v75, 128, v72 + 8);
    v75[v72] = -1;
    a1[71] = v73;
    a1[69] = v72;
  }
  unint64_t v76 = *a2;
  a1[72] = &unk_20E1710;
  a1[77] = 0;
  a1[73] = 0;
  a1[75] = 0;
  a1[74] = 0;
  if (v76)
  {
    unint64_t v77 = __clz(v76);
    unint64_t v78 = 0xFFFFFFFFFFFFFFFFLL >> v77;
    if (v77 == 61) {
      unint64_t v79 = 6;
    }
    else {
      unint64_t v79 = (0xFFFFFFFFFFFFFFFFLL >> v77) - (0x1FFFFFFFFFFFFFFFuLL >> v77);
    }
    a1[77] = v79;
    unint64_t v80 = (v78 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v81 = (char *)operator new(v80 + 16 * v78);
    a1[72] = v81;
    a1[73] = &v81[v80];
    memset(v81, 128, v78 + 8);
    v81[v78] = -1;
    a1[77] = v79;
    a1[75] = v78;
  }
  unint64_t v82 = *a2;
  a1[78] = &unk_20E1710;
  a1[83] = 0;
  a1[79] = 0;
  a1[81] = 0;
  a1[80] = 0;
  if (v82)
  {
    unint64_t v83 = __clz(v82);
    unint64_t v84 = 0xFFFFFFFFFFFFFFFFLL >> v83;
    if (v83 == 61) {
      unint64_t v85 = 6;
    }
    else {
      unint64_t v85 = (0xFFFFFFFFFFFFFFFFLL >> v83) - (0x1FFFFFFFFFFFFFFFuLL >> v83);
    }
    a1[83] = v85;
    unint64_t v86 = (v84 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v87 = (char *)operator new(v86 + 16 * v84);
    a1[78] = v87;
    a1[79] = &v87[v86];
    memset(v87, 128, v84 + 8);
    v87[v84] = -1;
    a1[83] = v85;
    a1[81] = v84;
  }
  unint64_t v88 = *a2;
  a1[84] = &unk_20E1710;
  a1[89] = 0;
  a1[85] = 0;
  a1[87] = 0;
  a1[86] = 0;
  if (v88)
  {
    unint64_t v89 = __clz(v88);
    unint64_t v90 = 0xFFFFFFFFFFFFFFFFLL >> v89;
    if (v89 == 61) {
      unint64_t v91 = 6;
    }
    else {
      unint64_t v91 = (0xFFFFFFFFFFFFFFFFLL >> v89) - (0x1FFFFFFFFFFFFFFFuLL >> v89);
    }
    a1[89] = v91;
    unint64_t v92 = (v90 & 0xFFFFFFFFFFFFFFF8) + 16;
    BOOL v93 = (char *)operator new(v92 + 16 * v90);
    a1[84] = v93;
    a1[85] = &v93[v92];
    memset(v93, 128, v90 + 8);
    v93[v90] = -1;
    a1[89] = v91;
    a1[87] = v90;
  }
  unint64_t v94 = *a2;
  a1[90] = &unk_20E1710;
  a1[95] = 0;
  a1[91] = 0;
  a1[93] = 0;
  a1[92] = 0;
  if (v94)
  {
    unint64_t v95 = __clz(v94);
    unint64_t v96 = 0xFFFFFFFFFFFFFFFFLL >> v95;
    if (v95 == 61) {
      unint64_t v97 = 6;
    }
    else {
      unint64_t v97 = (0xFFFFFFFFFFFFFFFFLL >> v95) - (0x1FFFFFFFFFFFFFFFuLL >> v95);
    }
    a1[95] = v97;
    unint64_t v98 = (v96 & 0xFFFFFFFFFFFFFFF8) + 16;
    v99 = (char *)operator new(v98 + 16 * v96);
    a1[90] = v99;
    a1[91] = &v99[v98];
    memset(v99, 128, v96 + 8);
    v99[v96] = -1;
    a1[95] = v97;
    a1[93] = v96;
  }
  return a1;
}

void sub_F2FC08(_Unwind_Exception *a1)
{
}

void *sub_F2FC20(void *a1, uint64_t a2, uint64_t a3)
{
  __p[0] = 0;
  __p[1] = (void *)(a2 + 40);
  *(void *)&long long v14 = a2 + 40;
  *((void *)&v14 + 1) = a3;
  sub_F2FF44(a1, (unint64_t *)__p);
  for (uint64_t i = 0; i != 96; i += 6)
  {
    sub_F2FCFC((uint64_t)__p, (char **)(a2 + i * 8));
    unint64_t v6 = &a1[i];
    uint64_t v7 = v15;
    uint64_t v15 = 0;
    unint64_t v8 = (void *)a1[i];
    long long v9 = *(_OWORD *)__p;
    long long v10 = v14;
    __p[0] = &unk_20E1710;
    __p[1] = 0;
    uint64_t v11 = a1[i + 3];
    long long v14 = 0uLL;
    *(_OWORD *)unint64_t v6 = v9;
    *((_OWORD *)v6 + 1) = v10;
    v6[5] = v7;
    if (v11)
    {
      operator delete(v8);
      if (*((void *)&v14 + 1)) {
        operator delete(__p[0]);
      }
    }
  }
  return a1;
}

void sub_F2FCE8(_Unwind_Exception *a1)
{
  sub_328138(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F2FCFC(uint64_t a1, char **a2)
{
  *(void *)a1 = &unk_20E1710;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  unint64_t v4 = (unint64_t)a2[3];
  if (v4) {
    sub_F2E030((char **)a1, (char *)(0xFFFFFFFFFFFFFFFFLL >> __clz(v4)));
  }
  unint64_t v6 = *a2;
  unint64_t v5 = a2[1];
  if (**a2 > -2)
  {
    uint64_t v7 = *a2;
    long long v9 = &a2[3][(void)v6];
    if (*a2 == v9) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v7 = *a2;
    do
    {
      unint64_t v8 = (__clz(__rbit64(((*v7 >> 7) & ~*v7 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      uint64_t v7 = (void *)((char *)v7 + v8);
      v5 += 24 * v8;
    }
    while (*(char *)v7 < -1);
    long long v9 = &a2[3][(void)v6];
    if (v7 == (void *)v9) {
      goto LABEL_17;
    }
  }
  do
  {
    unint64_t v10 = ~(unint64_t)*(unsigned int *)v5 + ((unint64_t)*(unsigned int *)v5 << 21);
    unint64_t v11 = 21 * ((265 * (v10 ^ (v10 >> 24))) ^ ((265 * (v10 ^ (v10 >> 24))) >> 14));
    unint64_t v12 = 2147483649u * (v11 ^ (v11 >> 28));
    uint64_t v13 = *(void *)(a1 + 24);
    long long v14 = *(char **)a1;
    unint64_t v15 = v13 & (v12 >> 7);
    unint64_t v16 = *(void *)(*(void *)a1 + v15) & (~*(void *)(*(void *)a1 + v15) << 7) & 0x8080808080808080;
    if (!v16)
    {
      uint64_t v17 = 8;
      do
      {
        unint64_t v15 = (v15 + v17) & v13;
        v17 += 8;
        unint64_t v16 = *(void *)&v14[v15] & (~*(void *)&v14[v15] << 7) & 0x8080808080808080;
      }
      while (!v16);
    }
    unint64_t v18 = (v15 + (__clz(__rbit64(v16)) >> 3)) & v13;
    char v19 = v12 & 0x7F;
    v14[v18] = v19;
    *(unsigned char *)((*(void *)(a1 + 24) & 7) + *(void *)a1 + ((v18 - 8) & *(void *)(a1 + 24)) + 1) = v19;
    uint64_t v20 = *(void *)(a1 + 8) + 24 * v18;
    *(_DWORD *)uint64_t v20 = *(_DWORD *)v5;
    *(_OWORD *)(v20 + 8) = *(_OWORD *)(v5 + 8);
    int v21 = *((char *)v7 + 1);
    uint64_t v7 = (void *)((char *)v7 + 1);
    v5 += 24;
    if (v21 <= -2)
    {
      do
      {
        unint64_t v22 = (__clz(__rbit64(((*v7 >> 7) & ~*v7 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        uint64_t v7 = (void *)((char *)v7 + v22);
        v5 += 24 * v22;
      }
      while (*(char *)v7 < -1);
    }
  }
  while (v7 != (void *)v9);
LABEL_17:
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 40) -= a2[2];
  return a1;
}

void sub_F2FF18(_Unwind_Exception *exception_object)
{
  if (*(void *)(v1 + 24))
  {
    operator delete(*(void **)v1);
    *(void *)uint64_t v1 = v3;
    *(void *)(v1 + 40) = 0;
    v2[1] = 0;
    v2[2] = 0;
    void *v2 = 0;
  }
  _Unwind_Resume(exception_object);
}

void *sub_F2FF44(void *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  a1[5] = 0;
  *a1 = &unk_20E1710;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  if (v4)
  {
    unint64_t v5 = __clz(v4);
    unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> v5;
    if (v5 == 61) {
      unint64_t v7 = 6;
    }
    else {
      unint64_t v7 = (0xFFFFFFFFFFFFFFFFLL >> v5) - (0x1FFFFFFFFFFFFFFFuLL >> v5);
    }
    a1[5] = v7;
    unint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 16;
    long long v9 = (char *)operator new(v8 + 24 * v6);
    *a1 = v9;
    a1[1] = &v9[v8];
    memset(v9, 128, v6 + 8);
    v9[v6] = -1;
    a1[5] = v7;
    a1[3] = v6;
  }
  a1[6] = &unk_20E1710;
  unint64_t v10 = *a2;
  a1[11] = 0;
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = 0;
  if (v10)
  {
    unint64_t v11 = __clz(v10);
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> v11;
    if (v11 == 61) {
      unint64_t v13 = 6;
    }
    else {
      unint64_t v13 = (0xFFFFFFFFFFFFFFFFLL >> v11) - (0x1FFFFFFFFFFFFFFFuLL >> v11);
    }
    a1[11] = v13;
    unint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v15 = (char *)operator new(v14 + 24 * v12);
    a1[6] = v15;
    a1[7] = &v15[v14];
    memset(v15, 128, v12 + 8);
    v15[v12] = -1;
    a1[11] = v13;
    a1[9] = v12;
  }
  a1[12] = &unk_20E1710;
  unint64_t v16 = *a2;
  a1[17] = 0;
  a1[14] = 0;
  a1[15] = 0;
  a1[13] = 0;
  if (v16)
  {
    unint64_t v17 = __clz(v16);
    unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> v17;
    if (v17 == 61) {
      unint64_t v19 = 6;
    }
    else {
      unint64_t v19 = (0xFFFFFFFFFFFFFFFFLL >> v17) - (0x1FFFFFFFFFFFFFFFuLL >> v17);
    }
    a1[17] = v19;
    unint64_t v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 16;
    int v21 = (char *)operator new(v20 + 24 * v18);
    a1[12] = v21;
    a1[13] = &v21[v20];
    memset(v21, 128, v18 + 8);
    v21[v18] = -1;
    a1[17] = v19;
    a1[15] = v18;
  }
  a1[18] = &unk_20E1710;
  unint64_t v22 = *a2;
  a1[23] = 0;
  a1[20] = 0;
  a1[21] = 0;
  a1[19] = 0;
  if (v22)
  {
    unint64_t v23 = __clz(v22);
    unint64_t v24 = 0xFFFFFFFFFFFFFFFFLL >> v23;
    if (v23 == 61) {
      unint64_t v25 = 6;
    }
    else {
      unint64_t v25 = (0xFFFFFFFFFFFFFFFFLL >> v23) - (0x1FFFFFFFFFFFFFFFuLL >> v23);
    }
    a1[23] = v25;
    unint64_t v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 16;
    int v27 = (char *)operator new(v26 + 24 * v24);
    a1[18] = v27;
    a1[19] = &v27[v26];
    memset(v27, 128, v24 + 8);
    v27[v24] = -1;
    a1[23] = v25;
    a1[21] = v24;
  }
  a1[24] = &unk_20E1710;
  unint64_t v28 = *a2;
  a1[29] = 0;
  a1[26] = 0;
  a1[27] = 0;
  a1[25] = 0;
  if (v28)
  {
    unint64_t v29 = __clz(v28);
    unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> v29;
    if (v29 == 61) {
      unint64_t v31 = 6;
    }
    else {
      unint64_t v31 = (0xFFFFFFFFFFFFFFFFLL >> v29) - (0x1FFFFFFFFFFFFFFFuLL >> v29);
    }
    a1[29] = v31;
    unint64_t v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v33 = (char *)operator new(v32 + 24 * v30);
    a1[24] = v33;
    a1[25] = &v33[v32];
    memset(v33, 128, v30 + 8);
    v33[v30] = -1;
    a1[29] = v31;
    a1[27] = v30;
  }
  a1[30] = &unk_20E1710;
  unint64_t v34 = *a2;
  a1[35] = 0;
  a1[32] = 0;
  a1[33] = 0;
  a1[31] = 0;
  if (v34)
  {
    unint64_t v35 = __clz(v34);
    unint64_t v36 = 0xFFFFFFFFFFFFFFFFLL >> v35;
    if (v35 == 61) {
      unint64_t v37 = 6;
    }
    else {
      unint64_t v37 = (0xFFFFFFFFFFFFFFFFLL >> v35) - (0x1FFFFFFFFFFFFFFFuLL >> v35);
    }
    a1[35] = v37;
    unint64_t v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v39 = (char *)operator new(v38 + 24 * v36);
    a1[30] = v39;
    a1[31] = &v39[v38];
    memset(v39, 128, v36 + 8);
    v39[v36] = -1;
    a1[35] = v37;
    a1[33] = v36;
  }
  unint64_t v40 = *a2;
  a1[41] = 0;
  a1[36] = &unk_20E1710;
  a1[37] = 0;
  a1[38] = 0;
  a1[39] = 0;
  if (v40)
  {
    unint64_t v41 = __clz(v40);
    unint64_t v42 = 0xFFFFFFFFFFFFFFFFLL >> v41;
    if (v41 == 61) {
      unint64_t v43 = 6;
    }
    else {
      unint64_t v43 = (0xFFFFFFFFFFFFFFFFLL >> v41) - (0x1FFFFFFFFFFFFFFFuLL >> v41);
    }
    a1[41] = v43;
    unint64_t v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v45 = (char *)operator new(v44 + 24 * v42);
    a1[36] = v45;
    a1[37] = &v45[v44];
    memset(v45, 128, v42 + 8);
    v45[v42] = -1;
    a1[41] = v43;
    a1[39] = v42;
  }
  unint64_t v46 = *a2;
  a1[47] = 0;
  a1[42] = &unk_20E1710;
  a1[43] = 0;
  a1[44] = 0;
  a1[45] = 0;
  if (v46)
  {
    unint64_t v47 = __clz(v46);
    unint64_t v48 = 0xFFFFFFFFFFFFFFFFLL >> v47;
    if (v47 == 61) {
      unint64_t v49 = 6;
    }
    else {
      unint64_t v49 = (0xFFFFFFFFFFFFFFFFLL >> v47) - (0x1FFFFFFFFFFFFFFFuLL >> v47);
    }
    a1[47] = v49;
    unint64_t v50 = (v48 & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v51 = (char *)operator new(v50 + 24 * v48);
    a1[42] = v51;
    a1[43] = &v51[v50];
    memset(v51, 128, v48 + 8);
    v51[v48] = -1;
    a1[47] = v49;
    a1[45] = v48;
  }
  unint64_t v52 = *a2;
  a1[53] = 0;
  a1[48] = &unk_20E1710;
  a1[49] = 0;
  a1[50] = 0;
  a1[51] = 0;
  if (v52)
  {
    unint64_t v53 = __clz(v52);
    unint64_t v54 = 0xFFFFFFFFFFFFFFFFLL >> v53;
    if (v53 == 61) {
      unint64_t v55 = 6;
    }
    else {
      unint64_t v55 = (0xFFFFFFFFFFFFFFFFLL >> v53) - (0x1FFFFFFFFFFFFFFFuLL >> v53);
    }
    a1[53] = v55;
    unint64_t v56 = (v54 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v57 = (char *)operator new(v56 + 24 * v54);
    a1[48] = v57;
    a1[49] = &v57[v56];
    memset(v57, 128, v54 + 8);
    v57[v54] = -1;
    a1[53] = v55;
    a1[51] = v54;
  }
  unint64_t v58 = *a2;
  a1[59] = 0;
  a1[54] = &unk_20E1710;
  a1[55] = 0;
  a1[56] = 0;
  a1[57] = 0;
  if (v58)
  {
    unint64_t v59 = __clz(v58);
    unint64_t v60 = 0xFFFFFFFFFFFFFFFFLL >> v59;
    if (v59 == 61) {
      unint64_t v61 = 6;
    }
    else {
      unint64_t v61 = (0xFFFFFFFFFFFFFFFFLL >> v59) - (0x1FFFFFFFFFFFFFFFuLL >> v59);
    }
    a1[59] = v61;
    unint64_t v62 = (v60 & 0xFFFFFFFFFFFFFFF8) + 16;
    int v63 = (char *)operator new(v62 + 24 * v60);
    a1[54] = v63;
    a1[55] = &v63[v62];
    memset(v63, 128, v60 + 8);
    v63[v60] = -1;
    a1[59] = v61;
    a1[57] = v60;
  }
  unint64_t v64 = *a2;
  a1[65] = 0;
  a1[60] = &unk_20E1710;
  a1[61] = 0;
  a1[62] = 0;
  a1[63] = 0;
  if (v64)
  {
    unint64_t v65 = __clz(v64);
    unint64_t v66 = 0xFFFFFFFFFFFFFFFFLL >> v65;
    if (v65 == 61) {
      unint64_t v67 = 6;
    }
    else {
      unint64_t v67 = (0xFFFFFFFFFFFFFFFFLL >> v65) - (0x1FFFFFFFFFFFFFFFuLL >> v65);
    }
    a1[65] = v67;
    unint64_t v68 = (v66 & 0xFFFFFFFFFFFFFFF8) + 16;
    char v69 = (char *)operator new(v68 + 24 * v66);
    a1[60] = v69;
    a1[61] = &v69[v68];
    memset(v69, 128, v66 + 8);
    v69[v66] = -1;
    a1[65] = v67;
    a1[63] = v66;
  }
  unint64_t v70 = *a2;
  a1[66] = &unk_20E1710;
  a1[71] = 0;
  a1[67] = 0;
  a1[69] = 0;
  a1[68] = 0;
  if (v70)
  {
    unint64_t v71 = __clz(v70);
    unint64_t v72 = 0xFFFFFFFFFFFFFFFFLL >> v71;
    if (v71 == 61) {
      unint64_t v73 = 6;
    }
    else {
      unint64_t v73 = (0xFFFFFFFFFFFFFFFFLL >> v71) - (0x1FFFFFFFFFFFFFFFuLL >> v71);
    }
    a1[71] = v73;
    unint64_t v74 = (v72 & 0xFFFFFFFFFFFFFFF8) + 16;
    char v75 = (char *)operator new(v74 + 24 * v72);
    a1[66] = v75;
    a1[67] = &v75[v74];
    memset(v75, 128, v72 + 8);
    v75[v72] = -1;
    a1[71] = v73;
    a1[69] = v72;
  }
  unint64_t v76 = *a2;
  a1[72] = &unk_20E1710;
  a1[77] = 0;
  a1[73] = 0;
  a1[75] = 0;
  a1[74] = 0;
  if (v76)
  {
    unint64_t v77 = __clz(v76);
    unint64_t v78 = 0xFFFFFFFFFFFFFFFFLL >> v77;
    if (v77 == 61) {
      unint64_t v79 = 6;
    }
    else {
      unint64_t v79 = (0xFFFFFFFFFFFFFFFFLL >> v77) - (0x1FFFFFFFFFFFFFFFuLL >> v77);
    }
    a1[77] = v79;
    unint64_t v80 = (v78 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v81 = (char *)operator new(v80 + 24 * v78);
    a1[72] = v81;
    a1[73] = &v81[v80];
    memset(v81, 128, v78 + 8);
    v81[v78] = -1;
    a1[77] = v79;
    a1[75] = v78;
  }
  unint64_t v82 = *a2;
  a1[78] = &unk_20E1710;
  a1[83] = 0;
  a1[79] = 0;
  a1[81] = 0;
  a1[80] = 0;
  if (v82)
  {
    unint64_t v83 = __clz(v82);
    unint64_t v84 = 0xFFFFFFFFFFFFFFFFLL >> v83;
    if (v83 == 61) {
      unint64_t v85 = 6;
    }
    else {
      unint64_t v85 = (0xFFFFFFFFFFFFFFFFLL >> v83) - (0x1FFFFFFFFFFFFFFFuLL >> v83);
    }
    a1[83] = v85;
    unint64_t v86 = (v84 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v87 = (char *)operator new(v86 + 24 * v84);
    a1[78] = v87;
    a1[79] = &v87[v86];
    memset(v87, 128, v84 + 8);
    v87[v84] = -1;
    a1[83] = v85;
    a1[81] = v84;
  }
  unint64_t v88 = *a2;
  a1[84] = &unk_20E1710;
  a1[89] = 0;
  a1[85] = 0;
  a1[87] = 0;
  a1[86] = 0;
  if (v88)
  {
    unint64_t v89 = __clz(v88);
    unint64_t v90 = 0xFFFFFFFFFFFFFFFFLL >> v89;
    if (v89 == 61) {
      unint64_t v91 = 6;
    }
    else {
      unint64_t v91 = (0xFFFFFFFFFFFFFFFFLL >> v89) - (0x1FFFFFFFFFFFFFFFuLL >> v89);
    }
    a1[89] = v91;
    unint64_t v92 = (v90 & 0xFFFFFFFFFFFFFFF8) + 16;
    BOOL v93 = (char *)operator new(v92 + 24 * v90);
    a1[84] = v93;
    a1[85] = &v93[v92];
    memset(v93, 128, v90 + 8);
    v93[v90] = -1;
    a1[89] = v91;
    a1[87] = v90;
  }
  unint64_t v94 = *a2;
  a1[90] = &unk_20E1710;
  a1[95] = 0;
  a1[91] = 0;
  a1[93] = 0;
  a1[92] = 0;
  if (v94)
  {
    unint64_t v95 = __clz(v94);
    unint64_t v96 = 0xFFFFFFFFFFFFFFFFLL >> v95;
    if (v95 == 61) {
      unint64_t v97 = 6;
    }
    else {
      unint64_t v97 = (0xFFFFFFFFFFFFFFFFLL >> v95) - (0x1FFFFFFFFFFFFFFFuLL >> v95);
    }
    a1[95] = v97;
    unint64_t v98 = (v96 & 0xFFFFFFFFFFFFFFF8) + 16;
    v99 = (char *)operator new(v98 + 24 * v96);
    a1[90] = v99;
    a1[91] = &v99[v98];
    memset(v99, 128, v96 + 8);
    v99[v96] = -1;
    a1[95] = v97;
    a1[93] = v96;
  }
  return a1;
}

void sub_F30798(_Unwind_Exception *a1)
{
}

void *sub_F307B0(void *a1, void *a2)
{
  unint64_t v4 = sub_F30954(a1, (uint64_t)a2);
  v4[9] = 0;
  v4[10] = 0;
  v4[11] = 0;
  unint64_t v6 = (unsigned char *)a2[9];
  unint64_t v5 = (unsigned char *)a2[10];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    unint64_t v8 = (char *)operator new(v5 - v6);
    a1[9] = v8;
    a1[10] = v8;
    long long v9 = &v8[4 * (v7 >> 2)];
    a1[11] = v9;
    memcpy(v8, v6, v7);
    a1[10] = v9;
  }
  sub_F30954(a1 + 12, (uint64_t)(a2 + 12));
  a1[21] = 0;
  a1[22] = 0;
  a1[23] = 0;
  unint64_t v11 = (unsigned char *)a2[21];
  unint64_t v10 = (unsigned char *)a2[22];
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    unint64_t v13 = (char *)operator new(v10 - v11);
    a1[21] = v13;
    a1[22] = v13;
    unint64_t v14 = &v13[4 * (v12 >> 2)];
    a1[23] = v14;
    memcpy(v13, v11, v12);
    a1[22] = v14;
  }
  a1[24] = 0;
  a1[25] = 0;
  a1[26] = 0;
  unint64_t v16 = (unsigned char *)a2[24];
  unint64_t v15 = (unsigned char *)a2[25];
  int64_t v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0) {
      sub_2E00();
    }
    unint64_t v18 = (char *)operator new(v15 - v16);
    a1[24] = v18;
    a1[25] = v18;
    unint64_t v19 = &v18[2 * (v17 >> 1)];
    a1[26] = v19;
    memcpy(v18, v16, v17);
    a1[25] = v19;
  }
  return a1;
}

void sub_F308F4(_Unwind_Exception *a1)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 80) = v4;
    operator delete(v4);
  }
  sub_F2CC28(v1);
  _Unwind_Resume(a1);
}

void *sub_F30954(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    int64_t v7 = (char *)operator new(v4 - *(void *)a2);
    *a1 = v7;
    a1[1] = v7;
    unint64_t v8 = &v7[4 * (v6 >> 2)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  sub_F30A84(a1 + 3, (uint64_t *)(a2 + 24));
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  unint64_t v10 = *(unsigned char **)(a2 + 48);
  long long v9 = *(unsigned char **)(a2 + 56);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      sub_2E00();
    }
    int64_t v12 = (char *)operator new(v9 - v10);
    a1[6] = v12;
    a1[7] = v12;
    unint64_t v13 = &v12[4 * (v11 >> 2)];
    a1[8] = v13;
    memcpy(v12, v10, v11);
    a1[7] = v13;
  }
  return a1;
}

void sub_F30A44(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_F30A84(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0x86BCA1AF286BCA1BLL * (v6 >> 3);
    if (v7 >= 0x1AF286BCA1AF287) {
      sub_2E00();
    }
    unint64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[152 * v7];
    a1[1] = sub_F30B68(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_F30B3C(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20B1664((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F30B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v10 = a2 + v7;
      int64_t v11 = (_DWORD *)(a4 + v7);
      _DWORD *v11 = *(_DWORD *)(a2 + v7);
      int64_t v12 = (long long *)(a4 + v7 + 8);
      unint64_t v13 = (long long *)(a2 + v7 + 8);
      v11[26] = *(_DWORD *)(a2 + v7 + 104);
      int v14 = *(_DWORD *)(a2 + v7 + 104);
      if (v14 == 1)
      {
        long long v19 = *v13;
        long long v20 = *(_OWORD *)(a2 + v7 + 40);
        *(_OWORD *)(a4 + v7 + 24) = *(_OWORD *)(a2 + v7 + 24);
        *(_OWORD *)(a4 + v7 + 40) = v20;
        long long *v12 = v19;
      }
      else if (!v14)
      {
        long long v15 = *(_OWORD *)(a2 + v7 + 24);
        long long *v12 = *v13;
        *(_OWORD *)(a4 + v7 + 24) = v15;
        long long v16 = *(_OWORD *)(a2 + v7 + 40);
        long long v17 = *(_OWORD *)(a2 + v7 + 56);
        long long v18 = *(_OWORD *)(a2 + v7 + 88);
        *(_OWORD *)(a4 + v7 + 72) = *(_OWORD *)(a2 + v7 + 72);
        *(_OWORD *)(a4 + v7 + 88) = v18;
        *(_OWORD *)(a4 + v7 + 40) = v16;
        *(_OWORD *)(a4 + v7 + 56) = v17;
      }
      uint64_t v21 = a4 + v7;
      *(void *)(a4 + v7 + 112) = 0;
      *(void *)(v21 + 120) = 0;
      *(void *)(v21 + 128) = 0;
      unint64_t v23 = *(unsigned char **)(v10 + 112);
      unint64_t v22 = *(unsigned char **)(v10 + 120);
      int64_t v24 = v22 - v23;
      if (v22 != v23)
      {
        if (v24 < 0) {
          sub_2E00();
        }
        unint64_t v25 = (char *)operator new(v22 - v23);
        *(void *)(a4 + v7 + 112) = v25;
        unint64_t v8 = &v25[2 * (v24 >> 1)];
        *(void *)(v21 + 120) = v25;
        *(void *)(v21 + 128) = v8;
        memcpy(v25, v23, v24);
        *(void *)(v21 + 120) = v8;
      }
      uint64_t v9 = *(void *)(v10 + 136);
      *(_WORD *)(v21 + 144) = *(_WORD *)(v10 + 144);
      *(void *)(v21 + 136) = v9;
      v7 += 152;
    }
    while (v10 + 152 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_F30CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64_t v12 = *(void **)(v9 + v10 + 112);
  if (v12)
  {
    *(void *)(v9 + v10 + 120) = v12;
    operator delete(v12);
  }
  sub_F30CF4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_F30CF4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)(v3 - 40);
      if (v5)
      {
        *(void *)(v3 - 32) = v5;
        operator delete(v5);
      }
      v3 -= 152;
    }
  }
  return a1;
}

void *sub_F30D58(void *a1, unint64_t a2)
{
  memset(__p, 0, sizeof(__p));
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v3 = 3 * a2;
    uint64_t v4 = operator new(24 * a2);
    *a1 = v4;
    a1[1] = v4;
    uint64_t v5 = &v4[v3];
    a1[2] = &v4[v3];
    do
    {
      sub_D2E30C(v4, (uint64_t *)__p);
      v4 += 3;
      v3 -= 3;
    }
    while (v3 * 8);
    a1[1] = v5;
    if (__p[0])
    {
      sub_C64384((uint64_t)__p, (void **)__p[0]);
      operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_F30E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_F30E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_C63044(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_F30E44(uint64_t a1, void *a2)
{
  *(void *)a1 = sub_3750CC(a2);
  sub_ED82AC(a1 + 8, a2);
  *(void *)(a1 + 4168) = sub_3750CC(a2);
  sub_F5B750((void *)(a1 + 4176), (uint64_t)a2);
  uint64_t v4 = (_DWORD *)sub_374D14(a2);
  sub_29AEC4(v4);
  sub_F2CEBC();
  uint64_t v5 = sub_375E94(a2);
  uint64_t v6 = sub_3760BC(a2);
  *(void *)(a1 + 14664) = v5;
  *(void *)(a1 + 14672) = v6;
  sub_FA4CE8((void **)(a1 + 14680), a2);
  sub_FBBF54((void **)(a1 + 19984), a2, (void *)(a1 + 14680));
  uint64_t v7 = sub_3760BC(a2);
  *(unsigned char *)(a1 + 30352) = sub_383520(v7, 1u, 1) != 0;
  *(unsigned char *)(a1 + 30353) = sub_37D0C8(a2);
  *(unsigned char *)(a1 + 30354) = 0;
  *(unsigned char *)(a1 + 30386) = 0;
  *(void *)(a1 + 30376) = 0x3E4CCCCD3F000000;
  *(_DWORD *)(a1 + 30388) = 0;
  *(_DWORD *)(a1 + 30392) = 0;
  *(_WORD *)(a1 + 30396) = 0;
  *(unsigned char *)(a1 + 30398) = 1;
  *(void *)(a1 + 30408) = 0;
  *(void *)(a1 + 30400) = 0;
  *(void *)(a1 + 30432) = 0;
  *(void *)(a1 + 30360) = 16;
  *(void *)(a1 + 30368) = 6;
  *(unsigned char *)(a1 + 30384) = 0;
  *(_WORD *)(a1 + 30465) = 0;
  *(_DWORD *)(a1 + 30468) = 0;
  *(void *)(a1 + 30456) = 0x3E4CCCCD3F000000;
  *(_OWORD *)(a1 + 30472) = 0u;
  *(_OWORD *)(a1 + 30488) = 0u;
  *(_DWORD *)(a1 + 30504) = 0;
  *(_WORD *)(a1 + 30508) = -1;
  *(unsigned char *)(a1 + 30510) = 0;
  *(_OWORD *)(a1 + 30512) = 0u;
  *(_OWORD *)(a1 + 30528) = 0u;
  *(_DWORD *)(a1 + 30544) = 0;
  *(_WORD *)(a1 + 30548) = -1;
  *(unsigned char *)(a1 + 30550) = 0;
  *(_DWORD *)(a1 + 30552) = 0;
  *(_WORD *)(a1 + 30556) = *(_WORD *)(a1 + 30556) & 0x8000 | 0x280;
  *(_WORD *)(a1 + 30558) = 0;
  *(unsigned char *)(a1 + 30560) &= 0xE0u;
  *(void *)(a1 + 30568) = 0;
  *(void *)(a1 + 30576) = 0;
  *(void *)(a1 + 30584) = 32;
  *(_OWORD *)(a1 + 30592) = 0u;
  *(_OWORD *)(a1 + 30608) = 0u;
  *(_DWORD *)(a1 + 30624) = 0;
  *(_WORD *)(a1 + 30628) = -1;
  *(unsigned char *)(a1 + 30630) = 0;
  *(_OWORD *)(a1 + 30632) = 0u;
  *(_OWORD *)(a1 + 30648) = 0u;
  *(_DWORD *)(a1 + 30664) = 0;
  *(_WORD *)(a1 + 30668) = -1;
  *(unsigned char *)(a1 + 30670) = 0;
  *(_DWORD *)(a1 + 30672) = 0;
  *(_WORD *)(a1 + 30676) = *(_WORD *)(a1 + 30676) & 0x8000 | 0x280;
  *(_WORD *)(a1 + 30678) = 0;
  *(unsigned char *)(a1 + 30680) &= 0xE0u;
  *(void *)(a1 + 30688) = 0;
  *(void *)(a1 + 30440) = 16;
  *(void *)(a1 + 30448) = 6;
  *(unsigned char *)(a1 + 30464) = 0;
  *(unsigned char *)(a1 + 30385) = 1;
  *(_OWORD *)(a1 + 30416) = xmmword_20F02D0;
  unint64_t v8 = (char *)malloc_type_malloc(0x100uLL, 0x100004087442A64uLL);
  uint64_t v9 = (_OWORD *)(a1 + 30592);
  *(void *)(a1 + 30432) = v8;
  uint64_t v10 = *(void *)(a1 + 30416);
  if (v10)
  {
    int64_t v11 = (const double *)(a1 + 30424);
    unint64_t v12 = (v10 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v12 >= 0x11)
    {
      if ((unint64_t)v8 >= a1 + 30432 || (unint64_t v13 = v8, v11 >= (const double *)&v8[8 * v10]))
      {
        unint64_t v14 = v12 + 1;
        unint64_t v13 = &v8[8 * (v14 & 0x3FFFFFFFFFFFFFFCLL)];
        float64x2_t v15 = vld1q_dup_f64(v11);
        long long v16 = (float64x2_t *)(v8 + 16);
        uint64_t v17 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v16[-1] = v15;
          *long long v16 = v15;
          v16 += 2;
          v17 -= 4;
        }
        while (v17);
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_11;
        }
      }
    }
    else
    {
      unint64_t v13 = v8;
    }
    long long v18 = &v8[8 * v10];
    do
    {
      *(double *)unint64_t v13 = *v11;
      v13 += 8;
    }
    while (v13 != v18);
  }
LABEL_11:
  memset(&v28[1], 0, 32);
  _OWORD *v9 = 0u;
  *(_OWORD *)(a1 + 30608) = 0u;
  *(_OWORD *)(a1 + 30631) = *(_OWORD *)v28;
  *(unsigned char *)(a1 + 30465) = 1;
  *(_DWORD *)(a1 + 30624) = 0;
  *(_WORD *)(a1 + 30628) = -1;
  *(unsigned char *)(a1 + 30630) = 0;
  *(_OWORD *)(a1 + 30647) = *(_OWORD *)&v28[16];
  *(void *)(a1 + 30660) = 0;
  *(_WORD *)(a1 + 30668) = -1;
  *(unsigned char *)(a1 + 30670) = 0;
  *(_DWORD *)(a1 + 30672) = 0;
  *(_DWORD *)(a1 + 30676) = 640;
  size_t v19 = 96 * *(void *)(a1 + 30584);
  *(unsigned char *)(a1 + 30680) = 0;
  long long v20 = malloc_type_malloc(v19, 0x1060040BBEDDE67uLL);
  *(void *)(a1 + 30688) = v20;
  uint64_t v21 = *(void *)(a1 + 30584);
  if (v21)
  {
    uint64_t v22 = 96 * v21;
    do
    {
      long long v23 = *(_OWORD *)(a1 + 30608);
      *long long v20 = *v9;
      v20[1] = v23;
      long long v24 = *(_OWORD *)(a1 + 30624);
      long long v25 = *(_OWORD *)(a1 + 30640);
      long long v26 = *(_OWORD *)(a1 + 30672);
      v20[4] = *(_OWORD *)(a1 + 30656);
      v20[5] = v26;
      v20[2] = v24;
      v20[3] = v25;
      v20 += 6;
      v22 -= 96;
    }
    while (v22);
  }
  return a1;
}

void sub_F31228(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void **)(v1 + 30688);
  if (v5) {
    free(v5);
  }
  uint64_t v6 = *(void **)(v1 + 30432);
  if (v6) {
    free(v6);
  }
  sub_C7714C(v3);
  if (*(unsigned char *)(v1 + 19952))
  {
    sub_3A6230((void *)(v1 + 14776));
    *(unsigned char *)(v1 + 19952) = 0;
  }
  if (*(unsigned char *)(v1 + 14656))
  {
    sub_3A6230((void *)(v1 + 9480));
    *(unsigned char *)(v1 + 14656) = 0;
  }
  if (*(unsigned char *)(v1 + 9416))
  {
    sub_3A6230((void *)(v1 + 4240));
    *(unsigned char *)(v1 + 9416) = 0;
  }
  sub_C62E9C(v2);
  _Unwind_Resume(a1);
}

void sub_F31318(unsigned __int8 **a1)
{
  uint64_t v2 = sub_F34018(*a1, a1[1]);
  uint64_t v3 = a1[1];
  if (v3 != v2)
  {
    uint64_t v4 = v2;
    while (v3 != v4)
    {
      if ((char)*(v3 - 1) < 0) {
        operator delete(*((void **)v3 - 3));
      }
      v3 -= 32;
    }
    a1[1] = v4;
  }
}

void sub_F31400(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, char a5)
{
void sub_F319F8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = a1 + 32;
    if (a1 + 32 != a2)
    {
      uint64_t v4 = 0;
      char v5 = a1;
      do
      {
        char v6 = v5;
        char v5 = v3;
        unint64_t v8 = (long long *)(v6 + 40);
        unsigned int v9 = v6[32];
        unsigned int v10 = *v6;
        if (v9 < v10) {
          goto LABEL_8;
        }
        if (v10 >= v9)
        {
          int v34 = (char)v6[31];
          int v35 = (char)v6[63];
          if (v35 >= 0) {
            size_t v36 = v6[63];
          }
          else {
            size_t v36 = *((void *)v6 + 6);
          }
          if (v35 >= 0) {
            unsigned int v37 = v6 + 40;
          }
          else {
            unsigned int v37 = (const void *)*((void *)v6 + 5);
          }
          if (v34 >= 0) {
            size_t v38 = v6[31];
          }
          else {
            size_t v38 = *((void *)v6 + 2);
          }
          if (v34 >= 0) {
            unsigned int v39 = v6 + 8;
          }
          else {
            unsigned int v39 = (const void *)*((void *)v6 + 1);
          }
          if (v38 >= v36) {
            size_t v40 = v36;
          }
          else {
            size_t v40 = v38;
          }
          int v41 = memcmp(v37, v39, v40);
          BOOL v42 = v36 < v38;
          if (v41) {
            BOOL v42 = v41 < 0;
          }
          if (v42)
          {
LABEL_8:
            unsigned __int8 v44 = v9;
            long long v45 = *v8;
            uint64_t v46 = *((void *)v6 + 7);
            *(void *)unint64_t v8 = 0;
            *((void *)v6 + 6) = 0;
            *((void *)v6 + 7) = 0;
            int v11 = (char)v5[31];
            *char v5 = *v6;
            uint64_t v12 = (void **)(v5 + 8);
            if (v11 < 0) {
              operator delete(*v12);
            }
            uint64_t v13 = v6 + 8;
            *(_OWORD *)uint64_t v12 = *(_OWORD *)(v6 + 8);
            *((void *)v5 + 3) = *((void *)v6 + 3);
            v6[31] = 0;
            v6[8] = 0;
            unsigned __int8 v14 = v9;
            if (v6 == a1)
            {
              char v6 = a1;
            }
            else
            {
              unsigned int v15 = *(v6 - 32);
              if (v44 < v15) {
                goto LABEL_31;
              }
              if (v15 >= v44)
              {
                int v16 = (char)*(v6 - 1);
                if (v46 >= 0) {
                  size_t v17 = HIBYTE(v46);
                }
                else {
                  size_t v17 = *((void *)&v45 + 1);
                }
                if (v46 >= 0) {
                  long long v18 = &v45;
                }
                else {
                  long long v18 = (long long *)v45;
                }
                if (v16 >= 0) {
                  size_t v19 = *(v6 - 1);
                }
                else {
                  size_t v19 = *((void *)v6 - 2);
                }
                if (v16 >= 0) {
                  uint64_t v20 = v6 - 24;
                }
                else {
                  uint64_t v20 = (unsigned __int8 *)*((void *)v6 - 3);
                }
                if (v19 >= v17) {
                  size_t v21 = v17;
                }
                else {
                  size_t v21 = v19;
                }
                int v22 = memcmp(v18, v20, v21);
                BOOL v23 = v17 < v19;
                if (v22) {
                  BOOL v23 = v22 < 0;
                }
                if (v23)
                {
LABEL_31:
                  for (uint64_t i = v4; ; i -= 32)
                  {
                    int v25 = &a1[i];
                    *int v25 = v15;
                    *(_OWORD *)(v25 + 8) = *(_OWORD *)&a1[i - 24];
                    *((void *)v25 + 3) = *(void *)&a1[i - 8];
                    *(v25 - 1) = 0;
                    *(v25 - 24) = 0;
                    unsigned __int8 v14 = v44;
                    if (i == 32) {
                      break;
                    }
                    unsigned int v15 = *(v25 - 64);
                    if (v44 >= v15)
                    {
                      if (v15 < v44) {
                        goto LABEL_54;
                      }
                      int v26 = (char)a1[i - 33];
                      unint64_t v27 = v46 >= 0 ? HIBYTE(v46) : *((void *)&v45 + 1);
                      unint64_t v28 = v46 >= 0 ? &v45 : (long long *)v45;
                      unint64_t v29 = v26 >= 0 ? a1[i - 33] : *(void *)&a1[i - 48];
                      unint64_t v30 = v26 >= 0 ? v25 - 56 : (unsigned __int8 *)*((void *)v25 - 7);
                      size_t v31 = v29 >= v27 ? v27 : v29;
                      int v32 = memcmp(v28, v30, v31);
                      BOOL v33 = v27 < v29;
                      if (v32) {
                        BOOL v33 = v32 < 0;
                      }
                      if (!v33)
                      {
LABEL_54:
                        char v6 = &a1[i - 32];
                        goto LABEL_76;
                      }
                    }
                  }
                  char v6 = a1;
LABEL_76:
                  uint64_t v13 = v25 - 24;
                }
              }
            }
            unsigned __int8 *v6 = v14;
            long long v7 = v45;
            *((void *)v13 + 2) = v46;
            *(_OWORD *)uint64_t v13 = v7;
          }
        }
        uint64_t v3 = v5 + 32;
        v4 += 32;
      }
      while (v5 + 32 != a2);
    }
  }
}

void sub_F31CCC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t v47 = v2;
    uint64_t v48 = v3;
    char v5 = a1;
    char v6 = a1 + 32;
    if (a1 + 32 != a2)
    {
      long long v7 = a1 + 8;
      do
      {
        unint64_t v8 = v5;
        char v5 = v6;
        int v11 = (long long *)(v8 + 40);
        unsigned int v12 = v8[32];
        unsigned int v13 = *v8;
        if (v12 < v13) {
          goto LABEL_8;
        }
        if (v13 >= v12)
        {
          int v35 = (char)v8[31];
          int v36 = (char)v8[63];
          if (v36 >= 0) {
            size_t v37 = v8[63];
          }
          else {
            size_t v37 = *((void *)v8 + 6);
          }
          if (v36 >= 0) {
            size_t v38 = v8 + 40;
          }
          else {
            size_t v38 = (const void *)*((void *)v8 + 5);
          }
          if (v35 >= 0) {
            size_t v39 = v8[31];
          }
          else {
            size_t v39 = *((void *)v8 + 2);
          }
          if (v35 >= 0) {
            size_t v40 = v8 + 8;
          }
          else {
            size_t v40 = (const void *)*((void *)v8 + 1);
          }
          if (v39 >= v37) {
            size_t v41 = v37;
          }
          else {
            size_t v41 = v39;
          }
          int v42 = memcmp(v38, v40, v41);
          BOOL v43 = v37 < v39;
          if (v42) {
            BOOL v43 = v42 < 0;
          }
          if (v43)
          {
LABEL_8:
            unsigned __int8 v44 = v12;
            long long v45 = *v11;
            uint64_t v46 = *((void *)v8 + 7);
            *(void *)int v11 = 0;
            *((void *)v8 + 6) = 0;
            *((void *)v8 + 7) = 0;
            int v14 = (char)v5[31];
            *char v5 = *v8;
            unsigned int v15 = (void **)(v5 + 8);
            if (v14 < 0) {
              operator delete(*v15);
            }
            *(_OWORD *)unsigned int v15 = *(_OWORD *)(v8 + 8);
            *((void *)v5 + 3) = *((void *)v8 + 3);
            v8[31] = 0;
            v8[8] = 0;
            unsigned __int8 v16 = v12;
            unsigned int v17 = *(v8 - 32);
            if (v44 < v17) {
              goto LABEL_30;
            }
            unsigned int v9 = v8 + 8;
            if (v17 >= v44)
            {
              int v18 = (char)*(v8 - 1);
              if (v46 >= 0) {
                size_t v19 = HIBYTE(v46);
              }
              else {
                size_t v19 = *((void *)&v45 + 1);
              }
              if (v46 >= 0) {
                uint64_t v20 = &v45;
              }
              else {
                uint64_t v20 = (long long *)v45;
              }
              if (v18 >= 0) {
                size_t v21 = *(v8 - 1);
              }
              else {
                size_t v21 = *((void *)v8 - 2);
              }
              if (v18 >= 0) {
                int v22 = v8 - 24;
              }
              else {
                int v22 = (unsigned __int8 *)*((void *)v8 - 3);
              }
              if (v21 >= v19) {
                size_t v23 = v19;
              }
              else {
                size_t v23 = v21;
              }
              int v24 = memcmp(v20, v22, v23);
              BOOL v25 = v19 < v21;
              if (v24) {
                BOOL v25 = v24 < 0;
              }
              if (v25)
              {
LABEL_30:
                for (uint64_t i = v7; ; i -= 32)
                {
                  *(i - 8) = v17;
                  *(_OWORD *)uint64_t i = *((_OWORD *)i - 2);
                  *((void *)i + 2) = *((void *)i - 2);
                  *(i - 9) = 0;
                  *(i - 32) = 0;
                  unsigned __int8 v16 = v44;
                  unsigned int v17 = *(i - 72);
                  if (v44 >= v17)
                  {
                    if (v17 < v44) {
                      break;
                    }
                    int v27 = (char)*(i - 41);
                    unint64_t v28 = v46 >= 0 ? HIBYTE(v46) : *((void *)&v45 + 1);
                    unint64_t v29 = v46 >= 0 ? &v45 : (long long *)v45;
                    unint64_t v30 = v27 >= 0 ? *(i - 41) : *((void *)i - 7);
                    size_t v31 = v27 >= 0 ? i - 64 : (unsigned __int8 *)*((void *)i - 8);
                    size_t v32 = v30 >= v28 ? v28 : v30;
                    int v33 = memcmp(v29, v31, v32);
                    BOOL v34 = v28 < v30;
                    if (v33) {
                      BOOL v34 = v33 < 0;
                    }
                    if (!v34) {
                      break;
                    }
                  }
                }
                unint64_t v8 = i - 40;
                unsigned int v9 = i - 32;
              }
            }
            *unint64_t v8 = v16;
            long long v10 = v45;
            *((void *)v9 + 2) = v46;
            *(_OWORD *)unsigned int v9 = v10;
          }
        }
        char v6 = v5 + 32;
        v7 += 32;
      }
      while (v5 + 32 != a2);
    }
  }
}

uint64_t sub_F31F58(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  char v6 = a2 + 8;
  unsigned int v7 = *a2;
  unint64_t v8 = a1 + 8;
  unsigned int v9 = *a1;
  if (v7 < v9) {
    goto LABEL_21;
  }
  if (v9 >= v7)
  {
    int v10 = (char)a1[31];
    int v11 = (char)a2[31];
    if (v11 >= 0) {
      size_t v12 = a2[31];
    }
    else {
      size_t v12 = *((void *)a2 + 2);
    }
    if (v11 >= 0) {
      unsigned int v13 = a2 + 8;
    }
    else {
      unsigned int v13 = (const void *)*((void *)a2 + 1);
    }
    if (v10 >= 0) {
      size_t v14 = a1[31];
    }
    else {
      size_t v14 = *((void *)a1 + 2);
    }
    if (v10 >= 0) {
      unsigned int v15 = v8;
    }
    else {
      unsigned int v15 = (const void *)*((void *)a1 + 1);
    }
    if (v14 >= v12) {
      size_t v16 = v12;
    }
    else {
      size_t v16 = v14;
    }
    int v17 = memcmp(v13, v15, v16);
    BOOL v18 = v12 < v14;
    if (v17) {
      BOOL v18 = v17 < 0;
    }
    if (v18)
    {
LABEL_21:
      uint64_t v20 = (long long *)(a3 + 8);
      unsigned int v19 = *a3;
      if (v19 < v7) {
        goto LABEL_22;
      }
      if (v7 >= v19)
      {
        int v28 = (char)a2[31];
        int v29 = (char)a3[31];
        if (v29 >= 0) {
          size_t v30 = a3[31];
        }
        else {
          size_t v30 = *((void *)a3 + 2);
        }
        if (v29 >= 0) {
          size_t v31 = a3 + 8;
        }
        else {
          size_t v31 = (const void *)*((void *)a3 + 1);
        }
        if (v28 >= 0) {
          size_t v32 = a2[31];
        }
        else {
          size_t v32 = *((void *)a2 + 2);
        }
        if (v28 >= 0) {
          int v33 = v6;
        }
        else {
          int v33 = (unsigned __int8 *)*((void *)a2 + 1);
        }
        if (v32 >= v30) {
          size_t v34 = v30;
        }
        else {
          size_t v34 = v32;
        }
        int v35 = memcmp(v31, v33, v34);
        BOOL v36 = v30 < v32;
        if (v35) {
          BOOL v36 = v35 < 0;
        }
        if (v36)
        {
LABEL_22:
          uint64_t v21 = *((void *)a1 + 1);
          *(void *)&long long v76 = *((void *)a1 + 2);
          *(void *)((char *)&v76 + 7) = *(void *)(a1 + 23);
          unsigned __int8 v22 = a1[31];
          v8[1] = 0;
          v8[2] = 0;
          *unint64_t v8 = 0;
          *a1 = *a3;
          long long v23 = *v20;
          v8[2] = *((void *)a3 + 3);
          *(_OWORD *)unint64_t v8 = v23;
          *a3 = v9;
          *(void *)(a3 + 23) = *(void *)((char *)&v76 + 7);
          *((void *)a3 + 1) = v21;
          *((void *)a3 + 2) = v76;
          a3[31] = v22;
          return 1;
        }
      }
      size_t v37 = (unsigned __int8 *)*((void *)a1 + 1);
      *(void *)&long long v77 = *((void *)a1 + 2);
      *(void *)((char *)&v77 + 7) = *(void *)(a1 + 23);
      uint64_t v38 = a1[31];
      unsigned __int8 v39 = v38;
      *unint64_t v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      *a1 = *a2;
      long long v40 = *(_OWORD *)v6;
      v8[2] = *((void *)v6 + 2);
      *(_OWORD *)unint64_t v8 = v40;
      *a2 = v9;
      *((void *)a2 + 2) = v77;
      size_t v41 = a2 + 16;
      *((void *)a2 + 1) = v37;
      *(void *)(a2 + 23) = *(void *)((char *)&v77 + 7);
      a2[31] = v38;
      unsigned int v42 = *a3;
      if (v42 >= v9)
      {
        if (v9 < v42) {
          return 1;
        }
        int v59 = (char)a3[31];
        unint64_t v60 = v59 >= 0 ? a3[31] : *((void *)a3 + 2);
        unint64_t v61 = v59 >= 0 ? a3 + 8 : (unsigned __int8 *)*((void *)a3 + 1);
        unint64_t v62 = (v38 & 0x80u) == 0 ? v38 : *v41;
        int v63 = (v38 & 0x80u) == 0 ? v6 : v37;
        size_t v64 = v62 >= v60 ? v60 : v62;
        int v65 = memcmp(v61, v63, v64);
        BOOL v66 = v60 < v62;
        if (v65) {
          BOOL v66 = v65 < 0;
        }
        if (!v66) {
          return 1;
        }
      }
      *(void *)&long long v78 = *v41;
      *(void *)((char *)&v78 + 7) = *(void *)(a2 + 23);
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 2) = 0;
      *(void *)char v6 = 0;
      *a2 = *a3;
      long long v43 = *v20;
      *((void *)v6 + 2) = *((void *)a3 + 3);
      *(_OWORD *)char v6 = v43;
      *a3 = v9;
      *(void *)(a3 + 23) = *(void *)((char *)&v78 + 7);
      *((void *)a3 + 1) = v37;
      *((void *)a3 + 2) = v78;
      a3[31] = v39;
      return 2;
    }
  }
  unsigned int v25 = *a3;
  if (v25 >= v7)
  {
    if (v7 < v25) {
      return 0;
    }
    signed __int8 v44 = a2[31];
    uint64_t v26 = *((void *)a2 + 1);
    int v45 = (char)a3[31];
    if (v45 >= 0) {
      size_t v46 = a3[31];
    }
    else {
      size_t v46 = *((void *)a3 + 2);
    }
    if (v45 >= 0) {
      uint64_t v47 = a3 + 8;
    }
    else {
      uint64_t v47 = (const void *)*((void *)a3 + 1);
    }
    unsigned __int8 v75 = a2[31];
    if (v44 >= 0) {
      size_t v48 = a2[31];
    }
    else {
      size_t v48 = *((void *)a2 + 2);
    }
    if (v44 >= 0) {
      unint64_t v49 = v6;
    }
    else {
      unint64_t v49 = (unsigned __int8 *)*((void *)a2 + 1);
    }
    if (v48 >= v46) {
      size_t v50 = v46;
    }
    else {
      size_t v50 = v48;
    }
    int v51 = memcmp(v47, v49, v50);
    BOOL v52 = v46 < v48;
    if (v51) {
      BOOL v52 = v51 < 0;
    }
    if (!v52) {
      return 0;
    }
    unsigned __int8 v27 = v75;
  }
  else
  {
    uint64_t v26 = *((void *)a2 + 1);
    unsigned __int8 v27 = a2[31];
  }
  *(void *)&long long v79 = *((void *)a2 + 2);
  *(void *)((char *)&v79 + 7) = *(void *)(a2 + 23);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)char v6 = 0;
  *a2 = *a3;
  long long v53 = *(_OWORD *)(a3 + 8);
  *((void *)v6 + 2) = *((void *)a3 + 3);
  *(_OWORD *)char v6 = v53;
  *a3 = v7;
  *(void *)(a3 + 23) = *(void *)((char *)&v79 + 7);
  *((void *)a3 + 1) = v26;
  *((void *)a3 + 2) = v79;
  a3[31] = v27;
  unsigned int v54 = *a2;
  unsigned int v55 = *a1;
  if (v54 < v55)
  {
    uint64_t v56 = *((void *)a1 + 1);
    LOBYTE(v57) = a1[31];
LABEL_68:
    *(void *)&long long v80 = *((void *)a1 + 2);
    *(void *)((char *)&v80 + 7) = *(void *)(a1 + 23);
    v8[1] = 0;
    v8[2] = 0;
    *unint64_t v8 = 0;
    *a1 = *a2;
    long long v58 = *(_OWORD *)v6;
    v8[2] = *((void *)v6 + 2);
    *(_OWORD *)unint64_t v8 = v58;
    *a2 = v55;
    *((void *)a2 + 1) = v56;
    *(void *)(a2 + 23) = *(void *)((char *)&v80 + 7);
    *((void *)a2 + 2) = v80;
    a2[31] = v57;
    return 2;
  }
  if (v55 >= v54)
  {
    int v57 = (char)a1[31];
    uint64_t v56 = *((void *)a1 + 1);
    int v67 = (char)a2[31];
    if (v67 >= 0) {
      size_t v68 = a2[31];
    }
    else {
      size_t v68 = *((void *)a2 + 2);
    }
    if (v67 >= 0) {
      char v69 = v6;
    }
    else {
      char v69 = (unsigned __int8 *)*((void *)a2 + 1);
    }
    if (v57 >= 0) {
      size_t v70 = a1[31];
    }
    else {
      size_t v70 = *((void *)a1 + 2);
    }
    if (v57 >= 0) {
      unint64_t v71 = v8;
    }
    else {
      unint64_t v71 = (const void *)*((void *)a1 + 1);
    }
    if (v70 >= v68) {
      size_t v72 = v68;
    }
    else {
      size_t v72 = v70;
    }
    int v73 = memcmp(v69, v71, v72);
    BOOL v74 = v68 < v70;
    if (v73) {
      BOOL v74 = v73 < 0;
    }
    if (v74) {
      goto LABEL_68;
    }
  }
  return 1;
}

unsigned __int8 *sub_F323C0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2;
  unsigned __int8 v76 = *a1;
  unsigned int v4 = *a1;
  long long v77 = *(_OWORD *)(a1 + 8);
  uint64_t v78 = *((void *)a1 + 3);
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;
  *((void *)a1 + 1) = 0;
  unsigned int v5 = *(a2 - 32);
  if (v4 < v5) {
    goto LABEL_21;
  }
  if (v5 < v4) {
    goto LABEL_43;
  }
  int v6 = (char)*(a2 - 1);
  if (v78 >= 0) {
    size_t v7 = HIBYTE(v78);
  }
  else {
    size_t v7 = *((void *)&v77 + 1);
  }
  if (v78 >= 0) {
    unint64_t v8 = &v77;
  }
  else {
    unint64_t v8 = (long long *)v77;
  }
  if (v6 >= 0) {
    size_t v9 = *(a2 - 1);
  }
  else {
    size_t v9 = *((void *)a2 - 2);
  }
  if (v6 >= 0) {
    int v10 = a2 - 24;
  }
  else {
    int v10 = (unsigned __int8 *)*((void *)a2 - 3);
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  int v12 = memcmp(v8, v10, v11);
  BOOL v13 = v7 < v9;
  if (v12) {
    BOOL v13 = v12 < 0;
  }
  if (v13)
  {
LABEL_21:
    unsigned int v15 = a1 + 32;
    unsigned int v14 = a1[32];
    if (v4 >= v14)
    {
      if (v78 >= 0) {
        size_t v16 = HIBYTE(v78);
      }
      else {
        size_t v16 = *((void *)&v77 + 1);
      }
      if (v78 >= 0) {
        int v17 = &v77;
      }
      else {
        int v17 = (long long *)v77;
      }
      do
      {
        if (v14 >= v4)
        {
          int v19 = (char)v15[31];
          if (v19 >= 0) {
            size_t v20 = v15[31];
          }
          else {
            size_t v20 = *((void *)v15 + 2);
          }
          if (v19 >= 0) {
            uint64_t v21 = v15 + 8;
          }
          else {
            uint64_t v21 = (const void *)*((void *)v15 + 1);
          }
          if (v20 >= v16) {
            size_t v22 = v16;
          }
          else {
            size_t v22 = v20;
          }
          int v23 = memcmp(v17, v21, v22);
          BOOL v24 = v16 < v20;
          if (v23) {
            BOOL v24 = v23 < 0;
          }
          if (v24) {
            break;
          }
        }
        unsigned int v18 = v15[32];
        v15 += 32;
        unsigned int v14 = v18;
      }
      while (v4 >= v18);
    }
  }
  else
  {
LABEL_43:
    unsigned int v15 = a1 + 32;
    if (a1 + 32 < v2)
    {
      if (v78 >= 0) {
        size_t v25 = HIBYTE(v78);
      }
      else {
        size_t v25 = *((void *)&v77 + 1);
      }
      if (v78 >= 0) {
        uint64_t v26 = &v77;
      }
      else {
        uint64_t v26 = (long long *)v77;
      }
      do
      {
        unsigned int v27 = *v15;
        if (v4 < v27) {
          break;
        }
        if (v27 >= v4)
        {
          int v28 = (char)v15[31];
          if (v28 >= 0) {
            size_t v29 = v15[31];
          }
          else {
            size_t v29 = *((void *)v15 + 2);
          }
          if (v28 >= 0) {
            size_t v30 = v15 + 8;
          }
          else {
            size_t v30 = (const void *)*((void *)v15 + 1);
          }
          if (v29 >= v25) {
            size_t v31 = v25;
          }
          else {
            size_t v31 = v29;
          }
          int v32 = memcmp(v26, v30, v31);
          BOOL v33 = v25 < v29;
          if (v32) {
            BOOL v33 = v32 < 0;
          }
          if (v33) {
            break;
          }
        }
        v15 += 32;
      }
      while (v15 < v2);
    }
  }
  if (v15 < v2)
  {
    if (v78 >= 0) {
      size_t v34 = HIBYTE(v78);
    }
    else {
      size_t v34 = *((void *)&v77 + 1);
    }
    if (v78 >= 0) {
      int v35 = &v77;
    }
    else {
      int v35 = (long long *)v77;
    }
    for (v2 -= 32; ; v2 -= 32)
    {
      if (v4 >= v5)
      {
        if (v5 < v4) {
          break;
        }
        int v37 = (char)v2[31];
        if (v37 >= 0) {
          size_t v38 = v2[31];
        }
        else {
          size_t v38 = *((void *)v2 + 2);
        }
        if (v37 >= 0) {
          unsigned __int8 v39 = v2 + 8;
        }
        else {
          unsigned __int8 v39 = (const void *)*((void *)v2 + 1);
        }
        if (v38 >= v34) {
          size_t v40 = v34;
        }
        else {
          size_t v40 = v38;
        }
        int v41 = memcmp(v35, v39, v40);
        BOOL v42 = v34 < v38;
        if (v41) {
          BOOL v42 = v41 < 0;
        }
        if (!v42) {
          break;
        }
      }
      unsigned int v36 = *(v2 - 32);
      unsigned int v5 = v36;
    }
  }
  if (v15 < v2)
  {
    LOBYTE(v43) = *v15;
    do
    {
      uint64_t v44 = *((void *)v15 + 1);
      uint64_t v45 = *((void *)v15 + 2);
      *(void *)&v79[7] = *(void *)(v15 + 23);
      *(void *)long long v79 = v45;
      unsigned __int8 v46 = v15[31];
      *((void *)v15 + 2) = 0;
      *((void *)v15 + 3) = 0;
      *((void *)v15 + 1) = 0;
      *unsigned int v15 = *v2;
      long long v47 = *(_OWORD *)(v2 + 8);
      *((void *)v15 + 3) = *((void *)v2 + 3);
      *(_OWORD *)(v15 + 8) = v47;
      unsigned __int8 *v2 = v43;
      *((void *)v2 + 1) = v44;
      *(void *)(v2 + 23) = *(void *)&v79[7];
      *((void *)v2 + 2) = *(void *)v79;
      v2[31] = v46;
      LOBYTE(v4) = v76;
      unsigned int v48 = v15[32];
      v15 += 32;
      unsigned int v43 = v48;
      size_t v49 = HIBYTE(v78);
      long long v50 = v77;
      if (v76 >= v48)
      {
        if (v78 >= 0) {
          size_t v51 = HIBYTE(v78);
        }
        else {
          size_t v51 = *((void *)&v77 + 1);
        }
        if (v78 >= 0) {
          BOOL v52 = &v77;
        }
        else {
          BOOL v52 = (long long *)v77;
        }
        do
        {
          if (v43 >= v76)
          {
            int v54 = (char)v15[31];
            if (v54 >= 0) {
              size_t v55 = v15[31];
            }
            else {
              size_t v55 = *((void *)v15 + 2);
            }
            if (v54 >= 0) {
              uint64_t v56 = v15 + 8;
            }
            else {
              uint64_t v56 = (const void *)*((void *)v15 + 1);
            }
            if (v55 >= v51) {
              size_t v57 = v51;
            }
            else {
              size_t v57 = v55;
            }
            int v58 = memcmp(v52, v56, v57);
            BOOL v59 = v51 < v55;
            if (v58) {
              BOOL v59 = v58 < 0;
            }
            if (v59) {
              break;
            }
          }
          unsigned int v53 = v15[32];
          v15 += 32;
          unsigned int v43 = v53;
        }
        while (v76 >= v53);
      }
      if ((v49 & 0x80u) == 0) {
        size_t v60 = v49;
      }
      else {
        size_t v60 = *((void *)&v50 + 1);
      }
      if ((v49 & 0x80u) == 0) {
        unint64_t v61 = &v77;
      }
      else {
        unint64_t v61 = (long long *)v50;
      }
      do
      {
        do
        {
          v2 -= 32;
          unsigned int v62 = *v2;
        }
        while (v76 < v62);
        if (v62 < v76) {
          break;
        }
        int v63 = (char)v2[31];
        if (v63 >= 0) {
          size_t v64 = v2[31];
        }
        else {
          size_t v64 = *((void *)v2 + 2);
        }
        if (v63 >= 0) {
          int v65 = v2 + 8;
        }
        else {
          int v65 = (const void *)*((void *)v2 + 1);
        }
        if (v64 >= v60) {
          size_t v66 = v60;
        }
        else {
          size_t v66 = v64;
        }
        int v67 = memcmp(v61, v65, v66);
        BOOL v68 = v60 < v64;
        if (v67) {
          BOOL v68 = v67 < 0;
        }
      }
      while (v68);
    }
    while (v15 < v2);
  }
  if (v15 - 32 == a1)
  {
    int v72 = (char)*(v15 - 1);
    *(v15 - 32) = v4;
    size_t v70 = v15 - 24;
    if (v72 < 0) {
      operator delete(*(void **)v70);
    }
  }
  else
  {
    char v69 = (void **)(a1 + 8);
    *a1 = *(v15 - 32);
    if ((char)a1[31] < 0) {
      operator delete(*v69);
    }
    size_t v70 = v15 - 24;
    long long v71 = *(_OWORD *)(v15 - 24);
    *((void *)a1 + 3) = *((void *)v15 - 1);
    *(_OWORD *)char v69 = v71;
    *(v15 - 1) = 0;
    *(v15 - 24) = 0;
    *(v15 - 32) = v76;
  }
  long long v73 = v77;
  *((void *)v70 + 2) = v78;
  *(_OWORD *)size_t v70 = v73;
  return v15;
}

unsigned __int8 *sub_F32870(unsigned __int8 *a1, unint64_t a2)
{
  uint64_t v4 = 0;
  unsigned int v5 = *a1;
  unsigned __int8 v67 = *a1;
  size_t v66 = a1 + 8;
  uint64_t v69 = *((void *)a1 + 3);
  unint64_t v6 = v69;
  long long v68 = *(_OWORD *)(a1 + 8);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;
  size_t v7 = HIBYTE(v6);
  if ((v7 & 0x80u) == 0) {
    size_t v8 = v7;
  }
  else {
    size_t v8 = *((void *)&v68 + 1);
  }
  if ((v7 & 0x80u) == 0) {
    size_t v9 = &v68;
  }
  else {
    size_t v9 = (long long *)v68;
  }
  while (1)
  {
    int v10 = &a1[v4];
    unsigned int v11 = a1[v4 + 32];
    if (v11 >= v5)
    {
      if (v5 < v11) {
        break;
      }
      int v12 = (char)a1[v4 + 63];
      unsigned int v15 = (const void *)*((void *)v10 + 5);
      BOOL v13 = v10 + 40;
      unsigned int v14 = v15;
      if (v12 >= 0) {
        size_t v16 = a1[v4 + 63];
      }
      else {
        size_t v16 = *(void *)&a1[v4 + 48];
      }
      if (v12 >= 0) {
        int v17 = v13;
      }
      else {
        int v17 = v14;
      }
      if (v8 >= v16) {
        size_t v18 = v16;
      }
      else {
        size_t v18 = v8;
      }
      int v19 = memcmp(v17, v9, v18);
      BOOL v20 = v16 < v8;
      if (v19) {
        BOOL v20 = v19 < 0;
      }
      if (!v20) {
        break;
      }
    }
    v4 += 32;
  }
  unint64_t v21 = (unint64_t)&a1[v4 + 32];
  if (v4)
  {
    while (1)
    {
      unsigned int v23 = *(unsigned __int8 *)(a2 - 32);
      a2 -= 32;
      unsigned int v22 = v23;
      if (v23 < v5) {
        break;
      }
      if (v5 >= v22)
      {
        int v24 = *(char *)(a2 + 31);
        if (v24 >= 0) {
          size_t v25 = *(unsigned __int8 *)(a2 + 31);
        }
        else {
          size_t v25 = *(void *)(a2 + 16);
        }
        if (v24 >= 0) {
          uint64_t v26 = (const void *)(a2 + 8);
        }
        else {
          uint64_t v26 = *(const void **)(a2 + 8);
        }
        if (v8 >= v25) {
          size_t v27 = v25;
        }
        else {
          size_t v27 = v8;
        }
        int v28 = memcmp(v26, v9, v27);
        BOOL v29 = v25 < v8;
        if (v28) {
          BOOL v29 = v28 < 0;
        }
        if (v29) {
          break;
        }
      }
    }
  }
  else
  {
LABEL_57:
    if (v21 < a2)
    {
      do
      {
        unsigned int v31 = *(unsigned __int8 *)(a2 - 32);
        a2 -= 32;
        unsigned int v30 = v31;
        if (v31 < v5) {
          break;
        }
        if (v5 < v30) {
          goto LABEL_57;
        }
        int v32 = *(char *)(a2 + 31);
        if (v32 >= 0) {
          size_t v33 = *(unsigned __int8 *)(a2 + 31);
        }
        else {
          size_t v33 = *(void *)(a2 + 16);
        }
        if (v32 >= 0) {
          size_t v34 = (const void *)(a2 + 8);
        }
        else {
          size_t v34 = *(const void **)(a2 + 8);
        }
        if (v8 >= v33) {
          size_t v35 = v33;
        }
        else {
          size_t v35 = v8;
        }
        int v36 = memcmp(v34, v9, v35);
        BOOL v37 = v33 >= v8;
        if (v36) {
          BOOL v37 = v36 >= 0;
        }
      }
      while (v37 && v21 < a2);
    }
  }
  unsigned __int8 v39 = (unsigned __int8 *)v21;
  if (v21 < a2)
  {
    size_t v40 = (unsigned __int8 *)a2;
    do
    {
      uint64_t v41 = *((void *)v39 + 1);
      uint64_t v42 = *((void *)v39 + 2);
      *(void *)&v70[7] = *(void *)(v39 + 23);
      *(void *)size_t v70 = v42;
      unsigned __int8 v43 = v39[31];
      *((void *)v39 + 2) = 0;
      *((void *)v39 + 3) = 0;
      *((void *)v39 + 1) = 0;
      *unsigned __int8 v39 = *v40;
      long long v44 = *(_OWORD *)(v40 + 8);
      *((void *)v39 + 3) = *((void *)v40 + 3);
      *(_OWORD *)(v39 + 8) = v44;
      *size_t v40 = v11;
      *((void *)v40 + 1) = v41;
      *(void *)(v40 + 23) = *(void *)&v70[7];
      *((void *)v40 + 2) = *(void *)v70;
      v40[31] = v43;
      LOBYTE(v5) = v67;
      if (v69 >= 0) {
        size_t v45 = HIBYTE(v69);
      }
      else {
        size_t v45 = *((void *)&v68 + 1);
      }
      if (v69 >= 0) {
        unsigned __int8 v46 = &v68;
      }
      else {
        unsigned __int8 v46 = (long long *)v68;
      }
      do
      {
        do
        {
          v39 += 32;
          unsigned int v11 = *v39;
        }
        while (v11 < v67);
        if (v67 < v11) {
          break;
        }
        int v47 = (char)v39[31];
        if (v47 >= 0) {
          size_t v48 = v39[31];
        }
        else {
          size_t v48 = *((void *)v39 + 2);
        }
        if (v47 >= 0) {
          size_t v49 = v39 + 8;
        }
        else {
          size_t v49 = (const void *)*((void *)v39 + 1);
        }
        if (v45 >= v48) {
          size_t v50 = v48;
        }
        else {
          size_t v50 = v45;
        }
        int v51 = memcmp(v49, v46, v50);
        BOOL v52 = v48 < v45;
        if (v51) {
          BOOL v52 = v51 < 0;
        }
      }
      while (v52);
      while (1)
      {
        unsigned int v54 = *(v40 - 32);
        v40 -= 32;
        unsigned int v53 = v54;
        if (v54 < v67) {
          break;
        }
        if (v67 >= v53)
        {
          int v55 = (char)v40[31];
          if (v55 >= 0) {
            size_t v56 = v40[31];
          }
          else {
            size_t v56 = *((void *)v40 + 2);
          }
          if (v55 >= 0) {
            size_t v57 = v40 + 8;
          }
          else {
            size_t v57 = (const void *)*((void *)v40 + 1);
          }
          if (v45 >= v56) {
            size_t v58 = v56;
          }
          else {
            size_t v58 = v45;
          }
          int v59 = memcmp(v57, v46, v58);
          BOOL v60 = v56 < v45;
          if (v59) {
            BOOL v60 = v59 < 0;
          }
          if (v60) {
            break;
          }
        }
      }
    }
    while (v39 < v40);
  }
  if (v39 - 32 == a1)
  {
    int v63 = (char)*(v39 - 1);
    *(v39 - 32) = v5;
    unint64_t v61 = v39 - 24;
    if (v63 < 0) {
      operator delete(*(void **)v61);
    }
  }
  else
  {
    *a1 = *(v39 - 32);
    if ((char)a1[31] < 0) {
      operator delete(*(void **)v66);
    }
    unint64_t v61 = v39 - 24;
    long long v62 = *(_OWORD *)(v39 - 24);
    *((void *)v66 + 2) = *((void *)v39 - 1);
    *(_OWORD *)size_t v66 = v62;
    *(v39 - 1) = 0;
    *(v39 - 24) = 0;
    *(v39 - 32) = v67;
  }
  long long v64 = v68;
  *((void *)v61 + 2) = v69;
  *(_OWORD *)unint64_t v61 = v64;
  return v39 - 32;
}

BOOL sub_F32C50(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = a1 + 8;
      unsigned int v7 = *a1;
      unsigned int v8 = *(a2 - 32);
      if (v8 >= v7)
      {
        if (v7 < v8) {
          return result;
        }
        int v10 = (char)a1[31];
        uint64_t v9 = *((void *)a1 + 1);
        int v44 = (char)*(a2 - 1);
        if (v44 >= 0) {
          size_t v45 = *(a2 - 1);
        }
        else {
          size_t v45 = *((void *)a2 - 2);
        }
        if (v44 >= 0) {
          unsigned __int8 v46 = a2 - 24;
        }
        else {
          unsigned __int8 v46 = (unsigned __int8 *)*((void *)a2 - 3);
        }
        if (v10 >= 0) {
          size_t v47 = a1[31];
        }
        else {
          size_t v47 = *((void *)a1 + 2);
        }
        if (v10 >= 0) {
          size_t v48 = a1 + 8;
        }
        else {
          size_t v48 = (const void *)*((void *)a1 + 1);
        }
        if (v47 >= v45) {
          size_t v49 = v45;
        }
        else {
          size_t v49 = v47;
        }
        int v50 = memcmp(v46, v48, v49);
        BOOL v51 = v45 < v47;
        if (v50) {
          BOOL v51 = v50 < 0;
        }
        if (!v51) {
          return 1;
        }
      }
      else
      {
        uint64_t v9 = *((void *)a1 + 1);
        LOBYTE(v10) = a1[31];
      }
      *(void *)size_t v56 = *((void *)a1 + 2);
      *(void *)&v56[7] = *(void *)(a1 + 23);
      *((void *)a1 + 2) = 0;
      *((void *)a1 + 3) = 0;
      void *v6 = 0;
      *a1 = *(v2 - 32);
      long long v11 = *(_OWORD *)(v2 - 24);
      *((void *)a1 + 3) = *((void *)v2 - 1);
      *(_OWORD *)unint64_t v6 = v11;
      *(v2 - 32) = v7;
      *(void *)(v2 - 9) = *(void *)&v56[7];
      *((void *)v2 - 3) = v9;
      *((void *)v2 - 2) = *(void *)v56;
      *(v2 - 1) = v10;
      return 1;
    case 3:
      sub_F31F58(a1, a1 + 32, a2 - 32);
      return 1;
    case 4:
      sub_F33098(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      sub_F333A8(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      return 1;
    default:
      int v12 = a1 + 64;
      sub_F31F58(a1, a1 + 32, a1 + 64);
      BOOL v13 = a1 + 96;
      if (a1 + 96 == v2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v55 = 0;
      BOOL v52 = v2;
      while (1)
      {
        size_t v16 = v13 + 8;
        unsigned int v15 = *v13;
        uint64_t v18 = (uint64_t)(v12 + 8);
        unsigned int v17 = *v12;
        if (v15 < v17) {
          break;
        }
        if (v17 >= v15)
        {
          int v32 = (char)v12[31];
          int v33 = (char)v13[31];
          size_t v34 = v13;
          uint64_t v35 = v14;
          if (v33 >= 0) {
            size_t v36 = v13[31];
          }
          else {
            size_t v36 = *((void *)v13 + 2);
          }
          if (v33 >= 0) {
            BOOL v37 = v13 + 8;
          }
          else {
            BOOL v37 = (const void *)*((void *)v13 + 1);
          }
          if (v32 >= 0) {
            size_t v38 = v12[31];
          }
          else {
            size_t v38 = *((void *)v12 + 2);
          }
          if (v32 >= 0) {
            unsigned __int8 v39 = v12 + 8;
          }
          else {
            unsigned __int8 v39 = (const void *)*((void *)v12 + 1);
          }
          if (v38 >= v36) {
            size_t v40 = v36;
          }
          else {
            size_t v40 = v38;
          }
          int v41 = memcmp(v37, v39, v40);
          uint64_t v14 = v35;
          BOOL v13 = v34;
          BOOL v42 = v36 < v38;
          if (v41) {
            BOOL v42 = v41 < 0;
          }
          if (v42) {
            break;
          }
        }
LABEL_7:
        int v12 = v13;
        v14 += 32;
        v13 += 32;
        if (v13 == v2) {
          return 1;
        }
      }
      v56[0] = v15;
      *(_OWORD *)&v56[8] = *(_OWORD *)v16;
      uint64_t v57 = *((void *)v16 + 2);
      *(void *)size_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = 0;
      *BOOL v13 = *v12;
      *(_OWORD *)size_t v16 = *(_OWORD *)v18;
      *((void *)v16 + 2) = *((void *)v12 + 3);
      v12[31] = 0;
      v12[8] = 0;
      unsigned int v19 = v15;
      if (v12 == a1)
      {
        int v12 = a1;
        goto LABEL_57;
      }
      uint64_t v53 = v14;
      unsigned int v54 = v13;
      uint64_t v20 = v14;
      break;
  }
  while (1)
  {
    unint64_t v21 = &a1[v20];
    unsigned int v22 = &a1[v20 + 40];
    unsigned int v23 = a1[v20 + 32];
    if (v19 >= v23) {
      break;
    }
LABEL_11:
    uint64_t v18 = (uint64_t)(v12 - 24);
    v12 -= 32;
    v21[64] = v23;
    *(_OWORD *)(v21 + 72) = *(_OWORD *)v22;
    *((void *)v21 + 11) = *(void *)&a1[v20 + 56];
    v21[63] = 0;
    v21[40] = 0;
    unsigned int v19 = v56[0];
    v20 -= 32;
    if (v20 == -64)
    {
      uint64_t v18 = (uint64_t)(a1 + 8);
      int v12 = a1;
      goto LABEL_56;
    }
  }
  if (v23 >= v19)
  {
    int v24 = (char)a1[v20 + 63];
    if (v57 >= 0) {
      size_t v25 = HIBYTE(v57);
    }
    else {
      size_t v25 = *(void *)&v56[16];
    }
    if (v57 >= 0) {
      uint64_t v26 = &v56[8];
    }
    else {
      uint64_t v26 = *(unsigned char **)&v56[8];
    }
    if (v24 >= 0) {
      size_t v27 = a1[v20 + 63];
    }
    else {
      size_t v27 = *(void *)&a1[v20 + 48];
    }
    if (v24 >= 0) {
      int v28 = &a1[v20 + 40];
    }
    else {
      int v28 = *(unsigned __int8 **)v22;
    }
    if (v27 >= v25) {
      size_t v29 = v25;
    }
    else {
      size_t v29 = v27;
    }
    int v30 = memcmp(v26, v28, v29);
    BOOL v31 = v25 < v27;
    if (v30) {
      BOOL v31 = v30 < 0;
    }
    if (!v31) {
      goto LABEL_56;
    }
    goto LABEL_11;
  }
  uint64_t v18 = (uint64_t)&a1[v20 + 72];
  int v12 = &a1[v20 + 64];
LABEL_56:
  uint64_t v2 = v52;
  uint64_t v14 = v53;
  BOOL v13 = v54;
LABEL_57:
  unsigned __int8 *v12 = v19;
  long long v43 = *(_OWORD *)&v56[8];
  *(void *)(v18 + 16) = v57;
  *(_OWORD *)uint64_t v18 = v43;
  if (v55 != 7)
  {
    ++v55;
    goto LABEL_7;
  }
  return v13 + 32 == v2;
}

uint64_t sub_F33098(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned int v7 = a1;
  uint64_t result = sub_F31F58(a1, a2, a3);
  unsigned int v9 = *a4;
  int v10 = a3 + 8;
  unsigned int v11 = *a3;
  if (v9 >= v11)
  {
    if (v11 < v9) {
      return result;
    }
    signed __int8 v14 = a3[31];
    unsigned __int8 v13 = v14;
    uint64_t v12 = *((void *)a3 + 1);
    int v15 = (char)a4[31];
    if (v15 >= 0) {
      size_t v16 = a4[31];
    }
    else {
      size_t v16 = *((void *)a4 + 2);
    }
    if (v15 >= 0) {
      unsigned int v17 = a4 + 8;
    }
    else {
      unsigned int v17 = (const void *)*((void *)a4 + 1);
    }
    unsigned int v54 = v7;
    if (v14 >= 0) {
      size_t v18 = a3[31];
    }
    else {
      size_t v18 = *((void *)a3 + 2);
    }
    if (v14 >= 0) {
      unsigned int v19 = a3 + 8;
    }
    else {
      unsigned int v19 = (const void *)*((void *)a3 + 1);
    }
    if (v18 >= v16) {
      size_t v20 = v16;
    }
    else {
      size_t v20 = v18;
    }
    uint64_t result = memcmp(v17, v19, v20);
    BOOL v21 = v16 >= v18;
    unsigned int v7 = v54;
    BOOL v22 = !v21;
    if (result) {
      BOOL v22 = (int)result < 0;
    }
    if (!v22) {
      return result;
    }
  }
  else
  {
    uint64_t v12 = *((void *)a3 + 1);
    unsigned __int8 v13 = a3[31];
  }
  *(void *)&long long v56 = *((void *)a3 + 2);
  *(void *)((char *)&v56 + 7) = *(void *)(a3 + 23);
  *((void *)a3 + 2) = 0;
  *((void *)a3 + 3) = 0;
  *int v10 = 0;
  *a3 = *a4;
  long long v23 = *(_OWORD *)(a4 + 8);
  *((void *)a3 + 3) = *((void *)a4 + 3);
  *(_OWORD *)int v10 = v23;
  *a4 = v11;
  *(void *)(a4 + 23) = *(void *)((char *)&v56 + 7);
  *((void *)a4 + 1) = v12;
  *((void *)a4 + 2) = v56;
  a4[31] = v13;
  int v24 = a2 + 8;
  unsigned int v25 = *a2;
  unsigned int v26 = *a3;
  if (v26 >= v25)
  {
    if (v25 < v26) {
      return result;
    }
    signed __int8 v36 = a2[31];
    unsigned __int8 v28 = v36;
    uint64_t v27 = *((void *)a2 + 1);
    signed __int8 v37 = a3[31];
    int v55 = v7;
    if (v37 >= 0) {
      size_t v38 = a3[31];
    }
    else {
      size_t v38 = *((void *)a3 + 2);
    }
    if (v37 >= 0) {
      unsigned __int8 v39 = a3 + 8;
    }
    else {
      unsigned __int8 v39 = (const void *)*((void *)a3 + 1);
    }
    if (v36 >= 0) {
      size_t v40 = a2[31];
    }
    else {
      size_t v40 = *((void *)a2 + 2);
    }
    if (v36 >= 0) {
      int v41 = a2 + 8;
    }
    else {
      int v41 = (const void *)*((void *)a2 + 1);
    }
    if (v40 >= v38) {
      size_t v42 = v38;
    }
    else {
      size_t v42 = v40;
    }
    uint64_t result = memcmp(v39, v41, v42);
    BOOL v21 = v38 >= v40;
    unsigned int v7 = v55;
    BOOL v43 = !v21;
    if (result) {
      BOOL v43 = (int)result < 0;
    }
    if (!v43) {
      return result;
    }
  }
  else
  {
    uint64_t v27 = *((void *)a2 + 1);
    unsigned __int8 v28 = a2[31];
  }
  *(void *)&long long v57 = *((void *)a2 + 2);
  *(void *)((char *)&v57 + 7) = *(void *)(a2 + 23);
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  void *v24 = 0;
  *a2 = *a3;
  long long v29 = *(_OWORD *)v10;
  *((void *)a2 + 3) = *((void *)a3 + 3);
  *(_OWORD *)int v24 = v29;
  *a3 = v25;
  *((void *)a3 + 1) = v27;
  *(void *)(a3 + 23) = *(void *)((char *)&v57 + 7);
  *((void *)a3 + 2) = v57;
  a3[31] = v28;
  BOOL v31 = v7 + 8;
  unsigned int v30 = *v7;
  unsigned int v32 = *a2;
  if (v32 < v30)
  {
    int v33 = (void *)*((void *)v7 + 1);
    unsigned __int8 v34 = v7[31];
LABEL_29:
    *(void *)&long long v58 = *((void *)v7 + 2);
    *(void *)((char *)&v58 + 7) = *(void *)(v7 + 23);
    v31[1] = 0;
    v31[2] = 0;
    *BOOL v31 = 0;
    *unsigned int v7 = *a2;
    long long v35 = *(_OWORD *)v24;
    v31[2] = *((void *)a2 + 3);
    *(_OWORD *)BOOL v31 = v35;
    *a2 = v30;
    *((void *)a2 + 1) = v33;
    *(void *)(a2 + 23) = *(void *)((char *)&v58 + 7);
    *((void *)a2 + 2) = v58;
    a2[31] = v34;
    return result;
  }
  if (v30 >= v32)
  {
    uint64_t v44 = v7[31];
    unsigned __int8 v34 = v7[31];
    int v33 = (void *)*((void *)v7 + 1);
    uint64_t v45 = *((void *)v7 + 2);
    int v46 = (char)a2[31];
    size_t v47 = v7;
    unint64_t v48 = v46 >= 0 ? a2[31] : *((void *)a2 + 2);
    size_t v49 = v46 >= 0 ? a2 + 8 : (unsigned __int8 *)*((void *)a2 + 1);
    unint64_t v50 = (v44 & 0x80u) == 0 ? v44 : v45;
    BOOL v51 = (v44 & 0x80u) == 0 ? v31 : v33;
    size_t v52 = v50 >= v48 ? v48 : v50;
    uint64_t result = memcmp(v49, v51, v52);
    BOOL v53 = v48 < v50;
    if (result) {
      BOOL v53 = (int)result < 0;
    }
    if (v53)
    {
      unsigned int v7 = v47;
      goto LABEL_29;
    }
  }
  return result;
}

uint64_t sub_F333A8(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  unsigned int v8 = a2;
  uint64_t result = sub_F33098(a1, a2, a3, a4);
  unsigned int v10 = *a5;
  unsigned int v11 = a4 + 8;
  unsigned int v12 = *a4;
  if (v10 >= v12)
  {
    if (v12 < v10) {
      return result;
    }
    signed __int8 v15 = a4[31];
    unsigned __int8 v14 = v15;
    uint64_t v13 = *((void *)a4 + 1);
    int v16 = (char)a5[31];
    if (v16 >= 0) {
      size_t v17 = a5[31];
    }
    else {
      size_t v17 = *((void *)a5 + 2);
    }
    if (v16 >= 0) {
      size_t v18 = a5 + 8;
    }
    else {
      size_t v18 = (const void *)*((void *)a5 + 1);
    }
    int v72 = v8;
    if (v15 >= 0) {
      size_t v19 = a4[31];
    }
    else {
      size_t v19 = *((void *)a4 + 2);
    }
    if (v15 >= 0) {
      size_t v20 = a4 + 8;
    }
    else {
      size_t v20 = (const void *)*((void *)a4 + 1);
    }
    if (v19 >= v17) {
      size_t v21 = v17;
    }
    else {
      size_t v21 = v19;
    }
    uint64_t result = memcmp(v18, v20, v21);
    BOOL v22 = v17 >= v19;
    unsigned int v8 = v72;
    BOOL v23 = !v22;
    if (result) {
      BOOL v23 = (int)result < 0;
    }
    if (!v23) {
      return result;
    }
  }
  else
  {
    uint64_t v13 = *((void *)a4 + 1);
    unsigned __int8 v14 = a4[31];
  }
  *(void *)&long long v75 = *((void *)a4 + 2);
  *(void *)((char *)&v75 + 7) = *(void *)(a4 + 23);
  *((void *)a4 + 2) = 0;
  *((void *)a4 + 3) = 0;
  void *v11 = 0;
  *a4 = *a5;
  long long v24 = *(_OWORD *)(a5 + 8);
  *((void *)a4 + 3) = *((void *)a5 + 3);
  *(_OWORD *)unsigned int v11 = v24;
  *a5 = v12;
  *(void *)(a5 + 23) = *(void *)((char *)&v75 + 7);
  *((void *)a5 + 1) = v13;
  *((void *)a5 + 2) = v75;
  a5[31] = v14;
  unsigned int v25 = a3 + 8;
  unsigned int v26 = *a3;
  unsigned int v27 = *a4;
  if (v27 >= v26)
  {
    if (v26 < v27) {
      return result;
    }
    signed __int8 v45 = a3[31];
    unsigned __int8 v29 = v45;
    uint64_t v28 = *((void *)a3 + 1);
    signed __int8 v46 = a4[31];
    long long v73 = v8;
    if (v46 >= 0) {
      size_t v47 = a4[31];
    }
    else {
      size_t v47 = *((void *)a4 + 2);
    }
    if (v46 >= 0) {
      unint64_t v48 = a4 + 8;
    }
    else {
      unint64_t v48 = (const void *)*((void *)a4 + 1);
    }
    if (v45 >= 0) {
      size_t v49 = a3[31];
    }
    else {
      size_t v49 = *((void *)a3 + 2);
    }
    if (v45 >= 0) {
      unint64_t v50 = a3 + 8;
    }
    else {
      unint64_t v50 = (const void *)*((void *)a3 + 1);
    }
    if (v49 >= v47) {
      size_t v51 = v47;
    }
    else {
      size_t v51 = v49;
    }
    uint64_t result = memcmp(v48, v50, v51);
    BOOL v22 = v47 >= v49;
    unsigned int v8 = v73;
    BOOL v52 = !v22;
    if (result) {
      BOOL v52 = (int)result < 0;
    }
    if (!v52) {
      return result;
    }
  }
  else
  {
    uint64_t v28 = *((void *)a3 + 1);
    unsigned __int8 v29 = a3[31];
  }
  *(void *)&long long v76 = *((void *)a3 + 2);
  *(void *)((char *)&v76 + 7) = *(void *)(a3 + 23);
  *((void *)a3 + 2) = 0;
  *((void *)a3 + 3) = 0;
  *unsigned int v25 = 0;
  *a3 = *a4;
  long long v30 = *(_OWORD *)v11;
  *((void *)a3 + 3) = *((void *)a4 + 3);
  *(_OWORD *)unsigned int v25 = v30;
  *a4 = v26;
  *((void *)a4 + 1) = v28;
  *(void *)(a4 + 23) = *(void *)((char *)&v76 + 7);
  *((void *)a4 + 2) = v76;
  a4[31] = v29;
  BOOL v31 = v8 + 8;
  unsigned int v32 = *v8;
  unsigned int v33 = *a3;
  if (v33 >= v32)
  {
    if (v32 < v33) {
      return result;
    }
    size_t v53 = v8[31];
    unsigned __int8 v35 = v8[31];
    unsigned __int8 v34 = (const void *)*((void *)v8 + 1);
    size_t v54 = *((void *)v8 + 2);
    int v55 = (char)a3[31];
    long long v56 = v8;
    if (v55 >= 0) {
      size_t v57 = a3[31];
    }
    else {
      size_t v57 = *((void *)a3 + 2);
    }
    if (v55 >= 0) {
      long long v58 = a3 + 8;
    }
    else {
      long long v58 = (const void *)*((void *)a3 + 1);
    }
    if ((v53 & 0x80u) == 0) {
      size_t v59 = v53;
    }
    else {
      size_t v59 = v54;
    }
    if ((v53 & 0x80u) == 0) {
      BOOL v60 = v31;
    }
    else {
      BOOL v60 = v34;
    }
    if (v59 >= v57) {
      size_t v61 = v57;
    }
    else {
      size_t v61 = v59;
    }
    uint64_t result = memcmp(v58, v60, v61);
    BOOL v62 = v57 < v59;
    if (result) {
      BOOL v62 = (int)result < 0;
    }
    if (!v62) {
      return result;
    }
    unsigned int v8 = v56;
  }
  else
  {
    unsigned __int8 v34 = (const void *)*((void *)v8 + 1);
    unsigned __int8 v35 = v8[31];
  }
  signed __int8 v36 = v8 + 16;
  *(void *)&long long v77 = *((void *)v8 + 2);
  *(void *)((char *)&v77 + 7) = *(void *)(v8 + 23);
  v31[1] = 0;
  v31[2] = 0;
  *BOOL v31 = 0;
  *unsigned int v8 = *a3;
  long long v37 = *(_OWORD *)v25;
  v31[2] = *((void *)a3 + 3);
  *(_OWORD *)BOOL v31 = v37;
  *a3 = v32;
  *((void *)a3 + 1) = v34;
  *(void *)(a3 + 23) = *(void *)((char *)&v77 + 7);
  size_t v38 = a1;
  *((void *)a3 + 2) = v77;
  a3[31] = v35;
  size_t v40 = a1 + 8;
  unsigned int v39 = *a1;
  unsigned int v41 = *v8;
  if (v41 < v39)
  {
    uint64_t v42 = *((void *)a1 + 1);
    LOBYTE(v43) = a1[31];
LABEL_31:
    *(void *)&long long v78 = *((void *)v38 + 2);
    *(void *)((char *)&v78 + 7) = *(void *)(v38 + 23);
    *((void *)a1 + 2) = 0;
    *((void *)a1 + 3) = 0;
    *size_t v40 = 0;
    unsigned __int8 *v38 = *v8;
    long long v44 = *(_OWORD *)v31;
    *((void *)a1 + 3) = v31[2];
    *(_OWORD *)size_t v40 = v44;
    *unsigned int v8 = v39;
    *((void *)v8 + 1) = v42;
    *(void *)((char *)v36 + 7) = *(void *)((char *)&v78 + 7);
    *signed __int8 v36 = v78;
    v8[31] = v43;
    return result;
  }
  if (v39 >= v41)
  {
    int v43 = (char)a1[31];
    uint64_t v42 = *((void *)a1 + 1);
    int v63 = (char)v8[31];
    long long v64 = (void *)*((void *)v8 + 1);
    int v65 = v8;
    unint64_t v66 = v63 >= 0 ? v8[31] : *((void *)v8 + 2);
    unsigned __int8 v67 = v63 >= 0 ? v31 : v64;
    unint64_t v68 = v43 >= 0 ? a1[31] : *((void *)a1 + 2);
    uint64_t v69 = v43 >= 0 ? a1 + 8 : (unsigned __int8 *)*((void *)a1 + 1);
    size_t v70 = v68 >= v66 ? v66 : v68;
    uint64_t result = memcmp(v67, v69, v70);
    BOOL v71 = v66 < v68;
    if (result) {
      BOOL v71 = (int)result < 0;
    }
    if (v71)
    {
      unsigned int v8 = v65;
      size_t v38 = a1;
      goto LABEL_31;
    }
  }
  return result;
}

__n128 sub_F3379C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v76 = v4;
    uint64_t v77 = v5;
    uint64_t v8 = a1;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)&a4[-a1] >> 5)
    {
      uint64_t v10 = a3;
      uint64_t v11 = (uint64_t)&a4[-a1] >> 4;
      uint64_t v12 = v11 + 1;
      uint64_t v13 = (unsigned __int8 *)(a1 + 32 * (v11 + 1));
      uint64_t v14 = v11 + 2;
      if (v11 + 2 < a3)
      {
        unsigned int v15 = v13[32];
        unsigned int v16 = *v13;
        if (v16 < v15) {
          goto LABEL_24;
        }
        if (v15 >= v16)
        {
          int v17 = (char)v13[63];
          int v18 = (char)v13[31];
          if (v18 >= 0) {
            size_t v19 = v13[31];
          }
          else {
            size_t v19 = *(void *)(a1 + 32 * v12 + 16);
          }
          if (v18 >= 0) {
            size_t v20 = v13 + 8;
          }
          else {
            size_t v20 = (const void *)*((void *)v13 + 1);
          }
          if (v17 >= 0) {
            size_t v21 = v13[63];
          }
          else {
            size_t v21 = *((void *)v13 + 6);
          }
          if (v17 >= 0) {
            BOOL v22 = v13 + 40;
          }
          else {
            BOOL v22 = (const void *)*((void *)v13 + 5);
          }
          if (v21 >= v19) {
            size_t v23 = v19;
          }
          else {
            size_t v23 = v21;
          }
          int v24 = memcmp(v20, v22, v23);
          BOOL v26 = v19 < v21;
          if (v24) {
            BOOL v26 = v24 < 0;
          }
          if (v26)
          {
LABEL_24:
            v13 += 32;
            uint64_t v12 = v14;
          }
        }
      }
      uint64_t v28 = (__n128 *)(v13 + 8);
      unsigned int v27 = *v13;
      long long v30 = (__n128 *)(a4 + 8);
      unsigned int v29 = *a4;
      if (v27 >= v29)
      {
        uint64_t v71 = v9;
        if (v29 < v27) {
          goto LABEL_48;
        }
        int v31 = (char)a4[31];
        int v32 = (char)v13[31];
        if (v32 >= 0) {
          size_t v33 = v13[31];
        }
        else {
          size_t v33 = *((void *)v13 + 2);
        }
        if (v32 >= 0) {
          unsigned __int8 v34 = v13 + 8;
        }
        else {
          unsigned __int8 v34 = (const void *)*((void *)v13 + 1);
        }
        if (v31 >= 0) {
          size_t v35 = a4[31];
        }
        else {
          size_t v35 = *((void *)a4 + 2);
        }
        if (v31 >= 0) {
          signed __int8 v36 = a4 + 8;
        }
        else {
          signed __int8 v36 = (const void *)*((void *)a4 + 1);
        }
        if (v35 >= v33) {
          size_t v37 = v33;
        }
        else {
          size_t v37 = v35;
        }
        int v38 = memcmp(v34, v36, v37);
        BOOL v39 = v33 >= v35;
        uint64_t v9 = v71;
        BOOL v40 = !v39;
        if (v38) {
          BOOL v40 = v38 < 0;
        }
        if (!v40)
        {
LABEL_48:
          unsigned __int8 v73 = v29;
          __n128 v74 = *v30;
          int64_t v75 = *((void *)a4 + 3);
          v30->n128_u64[0] = 0;
          *((void *)a4 + 2) = 0;
          *((void *)a4 + 3) = 0;
          *a4 = *v13;
          __n128 v41 = *v28;
          *((void *)a4 + 3) = *((void *)v13 + 3);
          *long long v30 = v41;
          v13[31] = 0;
          v13[8] = 0;
          if (v9 >= v12)
          {
            while (1)
            {
              uint64_t v46 = 2 * v12;
              uint64_t v12 = (2 * v12) | 1;
              uint64_t v42 = (unsigned __int8 *)(v8 + 32 * v12);
              uint64_t v47 = v46 + 2;
              if (v46 + 2 < v10)
              {
                unsigned int v48 = v42[32];
                unsigned int v49 = *v42;
                if (v49 < v48) {
                  goto LABEL_78;
                }
                if (v48 >= v49)
                {
                  int v50 = (char)v42[63];
                  int v51 = (char)v42[31];
                  if (v51 >= 0) {
                    size_t v52 = v42[31];
                  }
                  else {
                    size_t v52 = *(void *)(v8 + 32 * v12 + 16);
                  }
                  if (v51 >= 0) {
                    size_t v53 = v42 + 8;
                  }
                  else {
                    size_t v53 = (const void *)*((void *)v42 + 1);
                  }
                  if (v50 >= 0) {
                    size_t v54 = v42[63];
                  }
                  else {
                    size_t v54 = *((void *)v42 + 6);
                  }
                  if (v50 >= 0) {
                    int v55 = v42 + 40;
                  }
                  else {
                    int v55 = (const void *)*((void *)v42 + 5);
                  }
                  if (v54 >= v52) {
                    size_t v56 = v52;
                  }
                  else {
                    size_t v56 = v54;
                  }
                  int v57 = memcmp(v53, v55, v56);
                  BOOL v39 = v52 >= v54;
                  uint64_t v9 = v71;
                  BOOL v58 = !v39;
                  if (v57) {
                    BOOL v58 = v57 < 0;
                  }
                  if (v58)
                  {
LABEL_78:
                    v42 += 32;
                    uint64_t v12 = v47;
                  }
                }
              }
              int v43 = (__n128 *)(v42 + 8);
              unsigned int v59 = *v42;
              unsigned __int8 v44 = v73;
              if (v59 < v73) {
                break;
              }
              if (v73 >= v59)
              {
                int v60 = (char)v42[31];
                unint64_t v61 = v60 >= 0 ? v42[31] : *((void *)v42 + 2);
                BOOL v62 = v60 >= 0 ? v42 + 8 : (unsigned __int8 *)*((void *)v42 + 1);
                uint64_t v72 = v12;
                int v63 = v28;
                uint64_t v64 = v10;
                uint64_t v65 = v8;
                unint64_t v66 = v75 >= 0 ? HIBYTE(v75) : v74.n128_u64[1];
                unsigned __int8 v67 = v75 >= 0 ? &v74 : (__n128 *)v74.n128_u64[0];
                size_t v68 = v66 >= v61 ? v61 : v66;
                int v69 = memcmp(v62, v67, v68);
                BOOL v39 = v61 >= v66;
                uint64_t v8 = v65;
                uint64_t v10 = v64;
                uint64_t v28 = v63;
                uint64_t v9 = v71;
                uint64_t v12 = v72;
                BOOL v70 = !v39;
                if (v69) {
                  BOOL v70 = v69 < 0;
                }
                if (v70) {
                  break;
                }
              }
              *uint64_t v13 = v59;
              __n128 v45 = *v43;
              *((void *)v13 + 3) = *((void *)v42 + 3);
              *(__n128 *)(v13 + 8) = v45;
              v42[31] = 0;
              v42[8] = 0;
              uint64_t v28 = (__n128 *)(v42 + 8);
              uint64_t v13 = v42;
              if (v9 < v12) {
                goto LABEL_50;
              }
            }
          }
          else
          {
            uint64_t v42 = v13;
            int v43 = (__n128 *)(v13 + 8);
LABEL_50:
            unsigned __int8 v44 = v73;
            uint64_t v13 = v42;
            uint64_t v28 = v43;
          }
          *uint64_t v13 = v44;
          __n128 result = v74;
          v28[1].n128_u64[0] = v75;
          *uint64_t v28 = result;
        }
      }
    }
  }
  return result;
}

void sub_F33B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unsigned __int8 v7 = *(unsigned char *)a1;
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)uint64_t v14 = *(void *)(a1 + 16);
    *(void *)&v14[7] = *(void *)(a1 + 23);
    unsigned __int8 v9 = *(unsigned char *)(a1 + 31);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = sub_F33C84((unsigned __int8 *)a1, a3, a4);
    uint64_t v11 = v10;
    if (v10 == (unsigned __int8 *)(a2 - 32))
    {
      *uint64_t v10 = v7;
      if ((char)v10[31] < 0) {
        operator delete(*((void **)v10 + 1));
      }
      *((void *)v11 + 1) = v8;
      *((void *)v11 + 2) = *(void *)v14;
      *(void *)(v11 + 23) = *(void *)&v14[7];
      v11[31] = v9;
    }
    else
    {
      *uint64_t v10 = *(unsigned char *)(a2 - 32);
      uint64_t v12 = (void **)(v10 + 8);
      if ((char)v10[31] < 0) {
        operator delete(*v12);
      }
      long long v13 = *(_OWORD *)(a2 - 24);
      *((void *)v11 + 3) = *(void *)(a2 - 8);
      *(_OWORD *)uint64_t v12 = v13;
      *(unsigned char *)(a2 - 32) = v7;
      *(void *)(a2 - 24) = v8;
      *(void *)(a2 - 16) = *(void *)v14;
      *(void *)(a2 - 9) = *(void *)&v14[7];
      *(unsigned char *)(a2 - 1) = v9;
      sub_F33DDC(a1, (uint64_t)(v11 + 32), a3, (uint64_t)&v11[-a1 + 32] >> 5);
    }
  }
}

void sub_F33C6C(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_F33C84(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v11 = v5 + 1;
    uint64_t v8 = &a1[32 * v5 + 32];
    uint64_t v12 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v13 = v12 + 2;
    if (v12 + 2 < a3)
    {
      unsigned int v14 = v8[32];
      unsigned int v15 = *v8;
      if (v15 < v14) {
        goto LABEL_4;
      }
      if (v14 >= v15)
      {
        int v16 = (char)v8[63];
        int v17 = (char)v8[31];
        size_t v18 = *(void *)&a1[32 * v11 + 16];
        if (v17 >= 0) {
          size_t v19 = v8[31];
        }
        else {
          size_t v19 = v18;
        }
        if (v17 >= 0) {
          size_t v20 = v8 + 8;
        }
        else {
          size_t v20 = (const void *)*((void *)v8 + 1);
        }
        if (v16 >= 0) {
          size_t v21 = v8[63];
        }
        else {
          size_t v21 = *((void *)v8 + 6);
        }
        if (v16 >= 0) {
          BOOL v22 = v8 + 40;
        }
        else {
          BOOL v22 = (const void *)*((void *)v8 + 5);
        }
        if (v21 >= v19) {
          size_t v23 = v19;
        }
        else {
          size_t v23 = v21;
        }
        int v24 = memcmp(v20, v22, v23);
        BOOL v25 = v19 < v21;
        if (v24) {
          BOOL v25 = v24 < 0;
        }
        if (v25)
        {
LABEL_4:
          v8 += 32;
          uint64_t v5 = v13;
        }
      }
    }
    *a1 = *v8;
    unsigned __int8 v9 = (void **)(a1 + 8);
    if ((char)a1[31] < 0) {
      operator delete(*v9);
    }
    long long v10 = *(_OWORD *)(v8 + 8);
    *((void *)a1 + 3) = *((void *)v8 + 3);
    *(_OWORD *)unsigned __int8 v9 = v10;
    v8[31] = 0;
    v8[8] = 0;
    a1 = v8;
  }
  while (v5 <= v7);
  return v8;
}

__n128 sub_F33DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = a1;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (unsigned __int8 *)(a1 + 32 * (v4 >> 1));
    long long v10 = v8 + 8;
    unsigned int v9 = *v8;
    uint64_t v11 = (__n128 *)(a2 - 24);
    unsigned int v12 = *(unsigned __int8 *)(a2 - 32);
    if (v9 < v12) {
      goto LABEL_3;
    }
    if (v12 >= v9)
    {
      int v29 = *(char *)(a2 - 1);
      int v30 = (char)v8[31];
      if (v30 >= 0) {
        size_t v31 = v8[31];
      }
      else {
        size_t v31 = *(void *)(a1 + 32 * v7 + 16);
      }
      if (v30 >= 0) {
        int v32 = v8 + 8;
      }
      else {
        int v32 = *(const void **)v10;
      }
      if (v29 >= 0) {
        size_t v33 = *(unsigned __int8 *)(a2 - 1);
      }
      else {
        size_t v33 = *(void *)(a2 - 16);
      }
      if (v29 >= 0) {
        unsigned __int8 v34 = (const void *)(a2 - 24);
      }
      else {
        unsigned __int8 v34 = *(const void **)(a2 - 24);
      }
      if (v33 >= v31) {
        size_t v35 = v31;
      }
      else {
        size_t v35 = v33;
      }
      int v36 = memcmp(v32, v34, v35);
      BOOL v38 = v31 < v33;
      if (v36) {
        BOOL v38 = v36 < 0;
      }
      if (v38)
      {
LABEL_3:
        unsigned __int8 v42 = v12;
        __n128 v43 = *v11;
        int64_t v44 = v11[1].n128_i64[0];
        v11->n128_u64[0] = 0;
        v11->n128_u64[1] = 0;
        v11[1].n128_u64[0] = 0;
        *(unsigned char *)(a2 - 32) = *v8;
        __n128 v13 = *(__n128 *)v10;
        v11[1].n128_u64[0] = *((void *)v8 + 3);
        __n128 *v11 = v13;
        v8[31] = 0;
        *long long v10 = 0;
        if (v4 >= 2)
        {
          unint64_t v14 = HIBYTE(v44);
          if (v44 < 0) {
            unint64_t v14 = v43.n128_u64[1];
          }
          uint64_t v40 = v6;
          unint64_t v41 = v14;
          if (v44 >= 0) {
            unsigned int v15 = &v43;
          }
          else {
            unsigned int v15 = (__n128 *)v43.n128_u64[0];
          }
          __s2 = v15;
          unsigned int v16 = v12;
          while (1)
          {
            unint64_t v18 = v7 - 1;
            unint64_t v7 = (v7 - 1) >> 1;
            size_t v19 = (unsigned __int8 *)(v6 + 32 * v7);
            size_t v21 = v19 + 8;
            unsigned int v20 = *v19;
            if (v20 >= v12)
            {
              if (v12 < v20) {
                break;
              }
              int v22 = (char)v19[31];
              unint64_t v23 = v22 >= 0 ? v19[31] : *(void *)(v6 + 32 * v7 + 16);
              int v24 = v22 >= 0 ? v19 + 8 : (unsigned __int8 *)*v21;
              size_t v25 = v41 >= v23 ? v23 : v41;
              int v26 = memcmp(v24, __s2, v25);
              BOOL v27 = v23 >= v41;
              uint64_t v6 = v40;
              BOOL v28 = !v27;
              if (v26) {
                BOOL v28 = v26 < 0;
              }
              unsigned int v16 = v42;
              if (!v28) {
                break;
              }
            }
            *uint64_t v8 = v20;
            uint64_t v17 = *((void *)v19 + 3);
            *(_OWORD *)(v8 + 8) = *(_OWORD *)v21;
            *((void *)v8 + 3) = v17;
            v19[31] = 0;
            *(unsigned char *)size_t v21 = 0;
            unsigned int v12 = v16;
            long long v10 = v19 + 8;
            uint64_t v8 = v19;
            if (v18 <= 1)
            {
              uint64_t v8 = v19;
              long long v10 = v19 + 8;
              LOBYTE(v12) = v16;
              break;
            }
          }
        }
        *uint64_t v8 = v12;
        __n128 result = v43;
        *((void *)v10 + 2) = v44;
        *(__n128 *)long long v10 = result;
      }
    }
  }
  return result;
}

unsigned __int8 *sub_F34018(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v3 = a1;
  unint64_t v4 = a1 + 32;
  if (a1 + 32 == a2) {
    return a2;
  }
  int v5 = *a1;
  while (1)
  {
    int v6 = v5;
    int v5 = *v4;
    if (v6 == v5)
    {
      uint64_t v7 = v3[31];
      if ((v7 & 0x80u) == 0) {
        uint64_t v8 = v3[31];
      }
      else {
        uint64_t v8 = *((void *)v3 + 2);
      }
      uint64_t v9 = v3[63];
      int v10 = (char)v9;
      if ((v9 & 0x80u) != 0) {
        uint64_t v9 = *((void *)v3 + 6);
      }
      if (v8 == v9) {
        break;
      }
    }
LABEL_5:
    v4 += 32;
    v3 += 32;
    if (v4 == a2) {
      return a2;
    }
  }
  if (v10 >= 0) {
    uint64_t v11 = v3 + 40;
  }
  else {
    uint64_t v11 = (unsigned __int8 *)*((void *)v3 + 5);
  }
  if ((v7 & 0x80) != 0)
  {
    if (!memcmp(*((const void **)v3 + 1), v11, *((void *)v3 + 2))) {
      goto LABEL_21;
    }
    goto LABEL_5;
  }
  if (v3[31])
  {
    uint64_t v12 = 0;
    while (v3[v12 + 8] == v11[v12])
    {
      if (v7 == ++v12) {
        goto LABEL_21;
      }
    }
    goto LABEL_5;
  }
LABEL_21:
  if (v3 != a2)
  {
    __n128 v13 = v3 + 64;
    if (v3 + 64 != a2)
    {
      unint64_t v14 = v3 + 32;
      do
      {
        uint64_t v17 = v14;
        unint64_t v14 = v13;
        int v18 = *v13;
        if (*v3 != v18) {
          goto LABEL_26;
        }
        uint64_t v19 = v3[31];
        if ((v19 & 0x80u) == 0) {
          uint64_t v20 = v3[31];
        }
        else {
          uint64_t v20 = *((void *)v3 + 2);
        }
        uint64_t v21 = v17[63];
        int v22 = (char)v21;
        if ((v21 & 0x80u) != 0) {
          uint64_t v21 = *((void *)v17 + 6);
        }
        if (v20 != v21) {
          goto LABEL_26;
        }
        if (v22 >= 0) {
          unint64_t v23 = v17 + 40;
        }
        else {
          unint64_t v23 = (unsigned __int8 *)*((void *)v17 + 5);
        }
        if ((v19 & 0x80) != 0)
        {
          if (memcmp(*((const void **)v3 + 1), v23, *((void *)v3 + 2))) {
            goto LABEL_26;
          }
        }
        else if (v3[31])
        {
          uint64_t v24 = 0;
          while (v3[v24 + 8] == v23[v24])
          {
            if (v19 == ++v24) {
              goto LABEL_29;
            }
          }
LABEL_26:
          v3[32] = v18;
          v3 += 32;
          unsigned int v15 = (void **)(v3 + 8);
          if ((char)v3[31] < 0) {
            operator delete(*v15);
          }
          long long v16 = *(_OWORD *)(v17 + 40);
          *((void *)v3 + 3) = *((void *)v17 + 7);
          *(_OWORD *)unsigned int v15 = v16;
          v17[63] = 0;
          v17[40] = 0;
        }
LABEL_29:
        __n128 v13 = v14 + 32;
      }
      while (v14 + 32 != a2);
    }
    v3 += 32;
  }
  return v3;
}

char **sub_F3420C(long long *a1, long long *a2, char **a3, char *a4)
{
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; uint64_t i = (long long *)((char *)i + 472))
    {
      sub_EA7B04((uint64_t)&__p, i);
      uint64_t v9 = sub_F343DC(a3, a4, (uint64_t)&__p);
      if (v26 < 0)
      {
        operator delete(v25);
        int v10 = (void **)__p;
        if (__p)
        {
LABEL_10:
          uint64_t v11 = v24;
          uint64_t v8 = v10;
          if (v24 != v10)
          {
            do
            {
              uint64_t v12 = *(v11 - 28);
              if (v12)
              {
                *(v11 - 27) = v12;
                operator delete(v12);
              }
              __n128 v13 = *(v11 - 31);
              if (v13)
              {
                *(v11 - 30) = v13;
                operator delete(v13);
              }
              unint64_t v14 = *(v11 - 39);
              if (v14)
              {
                *(v11 - 38) = v14;
                operator delete(v14);
              }
              unsigned int v15 = *(v11 - 42);
              if (v15)
              {
                *(v11 - 41) = v15;
                operator delete(v15);
              }
              long long v16 = (char *)*(v11 - 45);
              if (v16)
              {
                uint64_t v17 = (char *)*(v11 - 44);
                int v18 = *(v11 - 45);
                if (v17 != v16)
                {
                  do
                  {
                    uint64_t v19 = (void *)*((void *)v17 - 3);
                    if (v19)
                    {
                      *((void *)v17 - 2) = v19;
                      operator delete(v19);
                    }
                    v17 -= 56;
                  }
                  while (v17 != v16);
                  int v18 = *(v11 - 45);
                }
                *(v11 - 44) = v16;
                operator delete(v18);
              }
              uint64_t v20 = *(v11 - 56);
              if (v20)
              {
                *(v11 - 55) = v20;
                operator delete(v20);
              }
              uint64_t v21 = v11 - 59;
              if (*((char *)v11 - 449) < 0) {
                operator delete(*v21);
              }
              v11 -= 59;
            }
            while (v21 != v10);
            uint64_t v8 = __p;
          }
          uint64_t v24 = v10;
          operator delete(v8);
        }
      }
      else
      {
        int v10 = (void **)__p;
        if (__p) {
          goto LABEL_10;
        }
      }
      a4 = v9 + 48;
    }
  }
  return a3;
}

void sub_F343C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_F343DC(char **a1, char *a2, uint64_t a3)
{
  unint64_t v4 = a2;
  uint64_t v7 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a2 - *a1) >> 4);
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v7) >> 4) + 1;
    if (v18 > 0x555555555555555) {
      sub_2E00();
    }
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v7) >> 4);
    if (2 * v19 > v18) {
      unint64_t v18 = 2 * v19;
    }
    if (v19 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v20 = 0x555555555555555;
    }
    else {
      unint64_t v20 = v18;
    }
    uint64_t v40 = a1 + 2;
    if (v20)
    {
      if (v20 > 0x555555555555555) {
        sub_188D718();
      }
      uint64_t v21 = (char *)operator new(48 * v20);
    }
    else
    {
      uint64_t v21 = 0;
    }
    __p = v21;
    size_t v37 = &v21[48 * v8];
    BOOL v38 = v37;
    BOOL v39 = &v21[48 * v20];
    sub_C63DF8((uint64_t)&__p, a3);
    uint64_t v24 = v37;
    size_t v25 = *a1;
    char v26 = v37;
    if (*a1 != v4)
    {
      char v26 = v37;
      BOOL v27 = v4;
      do
      {
        *((void *)v26 - 6) = 0;
        *((void *)v26 - 5) = 0;
        v26 -= 48;
        *((void *)v26 + 2) = 0;
        long long v28 = *((_OWORD *)v27 - 3);
        v27 -= 48;
        *(_OWORD *)char v26 = v28;
        *((void *)v26 + 2) = *((void *)v27 + 2);
        *(void *)BOOL v27 = 0;
        *((void *)v27 + 1) = 0;
        *((void *)v27 + 2) = 0;
        long long v29 = *(_OWORD *)(v27 + 24);
        *((void *)v26 + 5) = *((void *)v27 + 5);
        *(_OWORD *)(v26 + 24) = v29;
        *((void *)v27 + 4) = 0;
        *((void *)v27 + 5) = 0;
        *((void *)v27 + 3) = 0;
      }
      while (v27 != v25);
    }
    size_t v37 = v26;
    int v30 = a1[1];
    size_t v31 = v38;
    if (v30 != v4)
    {
      do
      {
        *(void *)size_t v31 = 0;
        *((void *)v31 + 1) = 0;
        *((void *)v31 + 2) = 0;
        *(_OWORD *)size_t v31 = *(_OWORD *)v4;
        *((void *)v31 + 2) = *((void *)v4 + 2);
        *(void *)unint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 2) = 0;
        long long v32 = *(_OWORD *)(v4 + 24);
        *((void *)v31 + 5) = *((void *)v4 + 5);
        *(_OWORD *)(v31 + 24) = v32;
        *((void *)v4 + 4) = 0;
        *((void *)v4 + 5) = 0;
        *((void *)v4 + 3) = 0;
        v31 += 48;
        v4 += 48;
      }
      while (v4 != v30);
      char v26 = v37;
      unint64_t v4 = a1[1];
    }
    size_t v33 = *a1;
    *a1 = v26;
    a1[1] = v31;
    unsigned __int8 v34 = a1[2];
    a1[2] = v39;
    BOOL v38 = v4;
    BOOL v39 = v34;
    __p = v33;
    size_t v37 = v33;
    sub_C63730((uint64_t)&__p, (uint64_t)v33);
    if (__p) {
      operator delete(__p);
    }
    return v24;
  }
  else if (a2 == (char *)v6)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((void *)a2 + 2) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    int v22 = &v7[48 * v8];
    long long v23 = *(_OWORD *)(a3 + 24);
    *((void *)v22 + 5) = *(void *)(a3 + 40);
    *(_OWORD *)(v22 + 24) = v23;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 24) = 0;
    a1[1] = a2 + 48;
  }
  else
  {
    int v10 = a1[1];
    if (v6 >= 0x30)
    {
      unint64_t v11 = v6 - 48;
      int v10 = a1[1];
      do
      {
        *(void *)int v10 = 0;
        *((void *)v10 + 1) = 0;
        *((void *)v10 + 2) = 0;
        *(_OWORD *)int v10 = *(_OWORD *)v11;
        *((void *)v10 + 2) = *(void *)(v11 + 16);
        *(void *)unint64_t v11 = 0;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        long long v12 = *(_OWORD *)(v11 + 24);
        *((void *)v10 + 5) = *(void *)(v11 + 40);
        *(_OWORD *)(v10 + 24) = v12;
        *(void *)(v11 + 32) = 0;
        *(void *)(v11 + 40) = 0;
        *(void *)(v11 + 24) = 0;
        v10 += 48;
        v11 += 48;
      }
      while (v11 < v6);
    }
    a1[1] = v10;
    sub_C63FE0((uint64_t)&__p, a2, (void *)(v6 - 48), v6);
    uint64_t v13 = *(void *)v4;
    if (*(void *)v4)
    {
      uint64_t v14 = *((void *)v4 + 1);
      unsigned int v15 = *(void **)v4;
      if (v14 != v13)
      {
        do
          uint64_t v14 = sub_405F44(v14 - 472);
        while (v14 != v13);
        unsigned int v15 = *(void **)v4;
      }
      *((void *)v4 + 1) = v13;
      operator delete(v15);
      *(void *)unint64_t v4 = 0;
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 2) = 0;
    }
    *(_OWORD *)unint64_t v4 = *(_OWORD *)a3;
    *((void *)v4 + 2) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    long long v16 = (void **)&v7[48 * v8 + 24];
    if (v4[47] < 0) {
      operator delete(*v16);
    }
    long long v17 = *(_OWORD *)(a3 + 24);
    *(void *)&v7[48 * v8 + 40] = *(void *)(a3 + 40);
    *(_OWORD *)long long v16 = v17;
    *(unsigned char *)(a3 + 47) = 0;
    *(unsigned char *)(a3 + 24) = 0;
  }
  return v4;
}

void sub_F34734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_C636F8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_F34748(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(long long **)a1;
  if (0xCBEEA4E1A08AD8F3 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x8AD8F2FBA93869) {
    sub_2E00();
  }
  int v5 = *(long long **)(a1 + 8);
  uint64_t v6 = 472 * a2;
  uint64_t v7 = (char *)operator new(472 * a2);
  unint64_t v8 = &v7[v6];
  unint64_t v9 = &v7[(char *)v5 - (char *)v3];
  if (v5 == v3)
  {
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v8;
    if (!v3) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v10 = (uint64_t)&v7[(char *)v5 - (char *)v3];
  do
  {
    v10 -= 472;
    int v5 = (long long *)((char *)v5 - 472);
    sub_446D30(v2, v10, v5);
  }
  while (v5 != v3);
  unint64_t v11 = *(long long **)a1;
  uint64_t v3 = *(long long **)(a1 + 8);
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v8;
  if (v3 != v11)
  {
    do
    {
      uint64_t v3 = (long long *)((char *)v3 - 472);
      sub_405F44((uint64_t)v3);
    }
    while (v3 != v11);
    uint64_t v3 = v11;
  }
  if (v3)
  {
LABEL_10:
    operator delete(v3);
  }
}

long long *sub_F34880(uint64_t *a1, uint64_t a2, long long *a3)
{
  int v5 = (long long *)*a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = (a2 - *a1) / 472;
  unint64_t v8 = (long long *)(*a1 + 472 * v7);
  uint64_t v10 = (uint64_t)(a1 + 2);
  unint64_t v9 = a1[2];
  if (v6 >= v9)
  {
    unint64_t v15 = 0xCBEEA4E1A08AD8F3 * ((uint64_t)(v6 - (void)v5) >> 3) + 1;
    if (v15 > 0x8AD8F2FBA93868) {
      sub_2E00();
    }
    unint64_t v16 = 0xCBEEA4E1A08AD8F3 * ((uint64_t)(v9 - (void)v5) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x456C797DD49C34) {
      unint64_t v17 = 0x8AD8F2FBA93868;
    }
    else {
      unint64_t v17 = v15;
    }
    unsigned __int8 v34 = a1 + 2;
    if (v17)
    {
      if (v17 > 0x8AD8F2FBA93868) {
        sub_188D718();
      }
      unint64_t v18 = (long long *)operator new(472 * v17);
    }
    else
    {
      unint64_t v18 = 0;
    }
    int v30 = v18;
    size_t v31 = (long long *)((char *)v18 + 472 * v7);
    long long v32 = v31;
    size_t v33 = (char *)v18 + 472 * v17;
    sub_F34B78((uint64_t)&v30, a3);
    unint64_t v19 = v31;
    unint64_t v20 = (long long *)*a1;
    uint64_t v21 = (uint64_t)v31;
    if ((long long *)*a1 != v8)
    {
      int v22 = v8;
      uint64_t v21 = (uint64_t)v31;
      do
      {
        v21 -= 472;
        int v22 = (long long *)((char *)v22 - 472);
        sub_446D30(v10, v21, v22);
      }
      while (v22 != v20);
    }
    size_t v31 = (long long *)v21;
    long long v23 = (long long *)a1[1];
    uint64_t v24 = (uint64_t)v32;
    if (v23 != v8)
    {
      do
      {
        sub_446D30(v10, v24, v8);
        unint64_t v8 = (long long *)((char *)v8 + 472);
        v24 += 472;
      }
      while (v8 != v23);
      uint64_t v21 = (uint64_t)v31;
      unint64_t v8 = (long long *)a1[1];
    }
    size_t v25 = (long long *)*a1;
    *a1 = v21;
    a1[1] = v24;
    char v26 = (char *)a1[2];
    a1[2] = (uint64_t)v33;
    long long v32 = v8;
    size_t v33 = v26;
    int v30 = v25;
    size_t v31 = v25;
    if (v8 != v25)
    {
      do
      {
        long long v32 = (long long *)((char *)v8 - 472);
        sub_405F44((uint64_t)v8 - 472);
        unint64_t v8 = v32;
      }
      while (v32 != v25);
      unint64_t v8 = v30;
    }
    if (v8) {
      operator delete(v8);
    }
    return v19;
  }
  else
  {
    if (v8 != (long long *)v6)
    {
      unint64_t v11 = (char *)v8 + 472;
      uint64_t v12 = v6 - 472;
      if (v6 < 0x1D8)
      {
        a1[1] = v6;
        if ((char *)v6 == v11)
        {
LABEL_34:
          sub_448838((uint64_t)v8, a3);
          return v8;
        }
      }
      else
      {
        uint64_t v13 = (long long *)(v6 - 472);
        uint64_t v14 = a1[1];
        do
        {
          sub_446D30(v10, v14, v13);
          uint64_t v13 = (long long *)((char *)v13 + 472);
          v14 += 472;
        }
        while ((unint64_t)v13 < v6);
        a1[1] = v14;
        if ((char *)v6 == v11) {
          goto LABEL_34;
        }
      }
      uint64_t v27 = 8 * ((uint64_t)(v6 - (void)v11) >> 3);
      do
      {
        sub_448838(v12, (long long *)((char *)v5 + 472 * v7 + v27 - 472));
        v12 -= 472;
        v27 -= 472;
      }
      while (v27);
      goto LABEL_34;
    }
    sub_446D30((uint64_t)(a1 + 2), (uint64_t)v8, a3);
    a1[1] = (uint64_t)v8 + 472;
  }
  return v8;
}

void sub_F34B64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_446EA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_F34B78(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != *(void *)(a1 + 24)) {
    goto LABEL_22;
  }
  unint64_t v6 = *(void **)a1;
  int v5 = *(long long **)(a1 + 8);
  if ((unint64_t)v5 <= *(void *)a1)
  {
    unint64_t v12 = 0x97DD49C34115B1E6 * ((v4 - (uint64_t)v6) >> 3);
    if ((void *)v4 == v6) {
      unint64_t v12 = 1;
    }
    if (v12 >= 0x8AD8F2FBA93869) {
      sub_188D718();
    }
    uint64_t v13 = *(void *)(a1 + 32);
    unint64_t v14 = v12 >> 2;
    uint64_t v15 = 472 * v12;
    unint64_t v16 = (char *)operator new(472 * v12);
    unint64_t v17 = v16;
    unint64_t v18 = &v16[472 * v14];
    unint64_t v19 = &v16[v15];
    if ((long long *)v4 == v5)
    {
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v18;
      *(void *)(a1 + 16) = v18;
      *(void *)(a1 + 24) = v19;
      if (!v6) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v20 = (v4 - (uint64_t)v5) / 472;
      uint64_t v21 = &v18[472 * v20];
      uint64_t v22 = 472 * v20;
      uint64_t v23 = (uint64_t)v18;
      do
      {
        sub_446D30(v13, v23, v5);
        v23 += 472;
        int v5 = (long long *)((char *)v5 + 472);
        v22 -= 472;
      }
      while (v22);
      unint64_t v6 = *(void **)a1;
      uint64_t v24 = *(void *)(a1 + 8);
      uint64_t v25 = *(void *)(a1 + 16);
      *(void *)a1 = v17;
      *(void *)(a1 + 8) = v18;
      *(void *)(a1 + 16) = v21;
      for (*(void *)(a1 + 24) = v19; v25 != v24; uint64_t v25 = sub_405F44(v25 - 472))
        ;
      if (!v6) {
        goto LABEL_19;
      }
    }
    operator delete(v6);
LABEL_19:
    uint64_t v4 = *(void *)(a1 + 16);
    goto LABEL_22;
  }
  int64_t v7 = 0xCBEEA4E1A08AD8F3 * (((uint64_t)v5 - *(void *)a1) >> 3);
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -v9;
  if (v5 == (long long *)v4)
  {
    unint64_t v11 = (char *)v5 - 472 * v9;
  }
  else
  {
    do
    {
      sub_448838((uint64_t)v5 + 472 * v10, v5);
      int v5 = (long long *)((char *)v5 + 472);
    }
    while (v5 != (long long *)v4);
    uint64_t v4 = *(void *)(a1 + 8);
    unint64_t v11 = (char *)v5 + 472 * v10;
  }
  *(void *)(a1 + 8) = v4 + 472 * v10;
  *(void *)(a1 + 16) = v11;
  uint64_t v4 = (uint64_t)v11;
LABEL_22:
  sub_446D30(*(void *)(a1 + 32), v4, a2);
  *(void *)(a1 + 16) += 472;
}

uint64_t sub_F34D74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a2 + 8);
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = a1 + 8;
  int v5 = *(void ***)(a1 + 8);
  if (v5)
  {
    sub_C64384(a1 + 8, v5);
    operator delete(*(void **)v6);
    *(void *)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    *(void *)(v6 + 16) = 0;
  }
  uint64_t v7 = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *uint64_t v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  do
  {
    uint64_t v8 = (void *)(a2 + v7);
    uint64_t v9 = a1 + v7;
    uint64_t v10 = *(void *)(a2 + v7 + 72);
    long long v11 = *(_OWORD *)(a2 + v7 + 32);
    long long v12 = *(_OWORD *)(a2 + v7 + 48);
    v8[4] = &unk_20E1710;
    v8[5] = 0;
    uint64_t v13 = *(void **)(a1 + v7 + 32);
    *(_OWORD *)(v9 + 32) = v11;
    v8[9] = 0;
    v8[6] = 0;
    v8[7] = 0;
    uint64_t v14 = *(void *)(a1 + v7 + 56);
    *(_OWORD *)(v9 + 48) = v12;
    *(void *)(v9 + 72) = v10;
    if (v14) {
      operator delete(v13);
    }
    v7 += 48;
  }
  while (v7 != 768);
  uint64_t v15 = *(void **)(a1 + 800);
  if (v15)
  {
    *(void *)(a1 + 808) = v15;
    operator delete(v15);
    *(void *)(a1 + 800) = 0;
    *(void *)(a1 + 808) = 0;
    *(void *)(a1 + 816) = 0;
  }
  uint64_t v16 = 0;
  *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 800);
  *(void *)(a1 + 816) = *(void *)(a2 + 816);
  *(void *)(a2 + 800) = 0;
  *(void *)(a2 + 808) = 0;
  *(void *)(a2 + 816) = 0;
  do
  {
    unint64_t v17 = (void *)(a2 + v16);
    uint64_t v18 = a1 + v16;
    unint64_t v19 = (long long *)(a2 + v16 + 840);
    uint64_t v20 = *(void *)(a2 + v16 + 864);
    v17[108] = 0;
    long long v21 = *(_OWORD *)(a2 + v16 + 824);
    v17[103] = &unk_20E1710;
    v17[104] = 0;
    uint64_t v22 = *(void **)(a1 + v16 + 824);
    *(_OWORD *)(v18 + 824) = v21;
    long long v23 = *v19;
    *unint64_t v19 = 0u;
    uint64_t v24 = *(void *)(a1 + v16 + 848);
    *(_OWORD *)(a1 + v16 + 840) = v23;
    *(void *)(v18 + 864) = v20;
    if (v24) {
      operator delete(v22);
    }
    v16 += 48;
  }
  while (v16 != 768);
  sub_F35070(a1 + 1592, a2 + 1592);
  uint64_t v25 = *(void **)(a1 + 1672);
  if (v25)
  {
    *(void *)(a1 + 1680) = v25;
    operator delete(v25);
    *(void *)(a1 + 1672) = 0;
    *(void *)(a1 + 1680) = 0;
    *(void *)(a1 + 1688) = 0;
  }
  *(void *)(a1 + 1672) = *(void *)(a2 + 1672);
  *(void *)(a1 + 1680) = *(void *)(a2 + 1680);
  *(void *)(a1 + 1688) = *(void *)(a2 + 1688);
  *(void *)(a2 + 1672) = 0;
  *(void *)(a2 + 1680) = 0;
  *(void *)(a2 + 1688) = 0;
  char v26 = *(void **)(a1 + 1696);
  if (v26)
  {
    *(void *)(a1 + 1704) = v26;
    operator delete(v26);
    *(void *)(a1 + 1696) = 0;
    *(void *)(a1 + 1704) = 0;
    *(void *)(a1 + 1712) = 0;
  }
  *(_OWORD *)(a1 + 1696) = *(_OWORD *)(a2 + 1696);
  *(void *)(a1 + 1712) = *(void *)(a2 + 1712);
  *(void *)(a2 + 1712) = 0;
  *(_OWORD *)(a2 + 1696) = 0u;
  sub_F35188(a1 + 1720, a2 + 1720);
  sub_F34F8C((void *)(a1 + 2120), a2 + 2120);
  return a1;
}

void *sub_F34F8C(void *a1, uint64_t a2)
{
  sub_F35430((uint64_t)a1, a2);
  uint64_t v4 = (void *)a1[9];
  if (v4)
  {
    a1[10] = v4;
    operator delete(v4);
    a1[9] = 0;
    a1[10] = 0;
    a1[11] = 0;
  }
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
  a1[11] = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  sub_F35430((uint64_t)(a1 + 12), a2 + 96);
  int v5 = (void *)a1[21];
  if (v5)
  {
    a1[22] = v5;
    operator delete(v5);
    a1[21] = 0;
    a1[22] = 0;
    a1[23] = 0;
  }
  *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 168);
  a1[23] = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  uint64_t v6 = (void *)a1[24];
  if (v6)
  {
    a1[25] = v6;
    operator delete(v6);
    a1[24] = 0;
    a1[25] = 0;
    a1[26] = 0;
  }
  *((_OWORD *)a1 + 12) = *(_OWORD *)(a2 + 192);
  a1[26] = *(void *)(a2 + 208);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  return a1;
}

uint64_t sub_F35070(uint64_t a1, uint64_t a2)
{
  if (a2 == a1) {
    return a1;
  }
  if (*(unsigned char *)(a2 + 25))
  {
    long long v3 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v3;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    sub_F2E320(a1, a2, 4uLL);
    return a1;
  }
  sub_F2E1E4((uint64_t)&v12, a2, 0x20uLL);
  uint64x2_t v6 = *(uint64x2_t *)a1;
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v7 = v13;
  *(uint64x2_t *)a1 = v12;
  *(_OWORD *)(a1 + 16) = v7;
  uint64x2_t v12 = v6;
  long long v13 = v5;
  long long v8 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 32) = v14;
  long long v14 = v8;
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v15;
  uint64_t v15 = v9;
  *(void *)&long long v5 = v16;
  long long v10 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 56) = v16;
  long long v16 = v10;
  long long v11 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v17;
  unint64_t v17 = v11;
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v5)));
  *(unsigned char *)(a1 + 24) = 0;
  uint64x2_t v12 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v13, (float)(unint64_t)v10)));
  BYTE8(v13) = 0;
  if (!v11) {
    return a1;
  }
  free(v11);
  return a1;
}

uint64_t sub_F35188(uint64_t a1, uint64_t a2)
{
  if (a2 == a1) {
    return a1;
  }
  if (*(unsigned char *)(a2 + 25))
  {
    long long v3 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v3;
    long long v4 = *(_OWORD *)(a2 + 128);
    long long v6 = *(_OWORD *)(a2 + 80);
    long long v5 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v4;
    *(_OWORD *)(a1 + 80) = v6;
    *(_OWORD *)(a1 + 96) = v5;
    long long v8 = *(_OWORD *)(a2 + 160);
    long long v7 = *(_OWORD *)(a2 + 176);
    long long v9 = *(_OWORD *)(a2 + 144);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v8;
    *(_OWORD *)(a1 + 176) = v7;
    *(_OWORD *)(a1 + 144) = v9;
    long long v10 = *(_OWORD *)(a2 + 32);
    long long v11 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v11;
    *(_OWORD *)(a1 + 32) = v10;
    long long v12 = *(_OWORD *)(a2 + 224);
    long long v13 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v13;
    *(_OWORD *)(a1 + 224) = v12;
    long long v14 = *(_OWORD *)(a2 + 272);
    long long v15 = *(_OWORD *)(a2 + 288);
    long long v16 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = v16;
    *(_OWORD *)(a1 + 272) = v14;
    *(_OWORD *)(a1 + 288) = v15;
    long long v17 = *(_OWORD *)(a2 + 336);
    long long v18 = *(_OWORD *)(a2 + 352);
    long long v19 = *(_OWORD *)(a2 + 368);
    *(void *)(a1 + 384) = *(void *)(a2 + 384);
    *(_OWORD *)(a1 + 352) = v18;
    *(_OWORD *)(a1 + 368) = v19;
    *(_OWORD *)(a1 + 336) = v17;
    sub_F2E7D4(a1, (void *)a2, 4uLL);
    return a1;
  }
  sub_F2E638((uint64_t)&v50, a2, 0x20uLL);
  uint64_t v87 = *(void *)(a1 + 192);
  unint64_t v21 = v64;
  *(void *)(a1 + 192) = v62;
  uint64x2_t v23 = *(uint64x2_t *)a1;
  long long v22 = *(_OWORD *)(a1 + 16);
  long long v24 = v51;
  *(uint64x2_t *)a1 = v50;
  *(_OWORD *)(a1 + 16) = v24;
  uint64x2_t v50 = v23;
  long long v51 = v22;
  long long v25 = *(_OWORD *)(a1 + 176);
  long long v85 = *(_OWORD *)(a1 + 160);
  long long v86 = v25;
  long long v26 = *(_OWORD *)(a1 + 112);
  long long v81 = *(_OWORD *)(a1 + 96);
  long long v82 = v26;
  long long v27 = *(_OWORD *)(a1 + 144);
  long long v83 = *(_OWORD *)(a1 + 128);
  long long v84 = v27;
  long long v28 = *(_OWORD *)(a1 + 48);
  long long v77 = *(_OWORD *)(a1 + 32);
  long long v78 = v28;
  long long v29 = *(_OWORD *)(a1 + 80);
  long long v79 = *(_OWORD *)(a1 + 64);
  long long v80 = v29;
  long long v30 = v61;
  *(_OWORD *)(a1 + 160) = v60;
  *(_OWORD *)(a1 + 176) = v30;
  long long v31 = v57;
  *(_OWORD *)(a1 + 96) = v56;
  *(_OWORD *)(a1 + 112) = v31;
  long long v32 = v59;
  *(_OWORD *)(a1 + 128) = v58;
  *(_OWORD *)(a1 + 144) = v32;
  long long v33 = v53;
  *(_OWORD *)(a1 + 32) = v52;
  *(_OWORD *)(a1 + 48) = v33;
  long long v34 = v55;
  *(_OWORD *)(a1 + 64) = v54;
  *(_OWORD *)(a1 + 80) = v34;
  long long v60 = v85;
  long long v61 = v86;
  long long v35 = v63;
  long long v63 = *(_OWORD *)(a1 + 200);
  unint64_t v36 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = v21;
  uint64_t v37 = v87;
  long long v56 = v81;
  long long v57 = v82;
  long long v58 = v83;
  long long v59 = v84;
  long long v52 = v77;
  long long v53 = v78;
  long long v54 = v79;
  long long v55 = v80;
  *(_OWORD *)(a1 + 200) = v35;
  uint64_t v62 = v37;
  unint64_t v64 = v36;
  sub_1024750((uint64_t)&v77);
  long long v38 = *(_OWORD *)(a1 + 368);
  long long v85 = *(_OWORD *)(a1 + 352);
  long long v86 = v38;
  BOOL v39 = *(void **)(a1 + 392);
  uint64_t v87 = *(void *)(a1 + 384);
  long long v40 = *(_OWORD *)(a1 + 304);
  long long v81 = *(_OWORD *)(a1 + 288);
  long long v82 = v40;
  long long v41 = *(_OWORD *)(a1 + 336);
  long long v83 = *(_OWORD *)(a1 + 320);
  long long v84 = v41;
  long long v42 = *(_OWORD *)(a1 + 240);
  long long v77 = *(_OWORD *)(a1 + 224);
  long long v78 = v42;
  long long v43 = *(_OWORD *)(a1 + 272);
  long long v79 = *(_OWORD *)(a1 + 256);
  long long v80 = v43;
  long long v44 = v74;
  *(_OWORD *)(a1 + 352) = v73;
  *(_OWORD *)(a1 + 368) = v44;
  long long v45 = v70;
  *(_OWORD *)(a1 + 288) = v69;
  *(_OWORD *)(a1 + 304) = v45;
  long long v46 = v72;
  *(_OWORD *)(a1 + 320) = v71;
  *(_OWORD *)(a1 + 336) = v46;
  long long v47 = v66;
  *(_OWORD *)(a1 + 224) = v65;
  *(_OWORD *)(a1 + 240) = v47;
  long long v48 = v68;
  *(_OWORD *)(a1 + 256) = v67;
  *(_OWORD *)(a1 + 272) = v48;
  long long v73 = v85;
  long long v74 = v86;
  unsigned int v49 = v76;
  *(void *)(a1 + 384) = v75;
  *(void *)(a1 + 392) = v49;
  long long v69 = v81;
  long long v70 = v82;
  long long v71 = v83;
  long long v72 = v84;
  long long v65 = v77;
  long long v66 = v78;
  long long v67 = v79;
  long long v68 = v80;
  uint64_t v75 = v87;
  uint64_t v76 = v39;
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 216))));
  *(unsigned char *)(a1 + 24) = 0;
  uint64x2_t v50 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v51, (float)v64)));
  BYTE8(v51) = 0;
  if (!v39) {
    return a1;
  }
  free(v39);
  return a1;
}

void sub_F35418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  if (a58) {
    free(a58);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F35430(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v5 = (void **)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    long long v8 = *(void **)(a1 + 24);
    if (v7 != v6)
    {
      do
      {
        long long v9 = *(void **)(v7 - 40);
        if (v9)
        {
          *(void *)(v7 - 32) = v9;
          operator delete(v9);
        }
        v7 -= 152;
      }
      while (v7 != v6);
      long long v8 = *v5;
    }
    *(void *)(a1 + 32) = v6;
    operator delete(v8);
    *long long v5 = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  long long v10 = *(void **)(a1 + 48);
  if (v10)
  {
    *(void *)(a1 + 56) = v10;
    operator delete(v10);
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  return a1;
}

void *sub_F3553C(void *a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >> 59) {
      sub_2E00();
    }
    uint64_t v6 = 4 * a3;
    uint64_t v7 = operator new(32 * a3);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[v6];
    a1[1] = sub_F355F8(v4, a2, a2 + v6 * 8, v7);
  }
  return a1;
}

void sub_F355CC(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20B16C8();
  }
  _Unwind_Resume(exception_object);
}

void *sub_F355F8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      long long v10 = *(const void **)v6;
      uint64_t v9 = *(void *)(v6 + 8);
      int64_t v11 = v9 - *(void *)v6;
      if (v9 != *(void *)v6)
      {
        if (0xCCCCCCCCCCCCCCCDLL * (v11 >> 4) >= 0x333333333333334) {
          sub_2E00();
        }
        uint64_t v7 = (char *)operator new(v11);
        *a4 = v7;
        a4[1] = v7;
        a4[2] = &v7[16 * (v11 >> 4)];
        size_t v8 = 80 * ((v11 - 80) / 0x50uLL) + 80;
        memcpy(v7, v10, v8);
        a4[1] = &v7[v8];
      }
      a4[3] = *(void *)(v6 + 24);
      a4 += 4;
      v6 += 32;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_F35718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_F3572C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_BEF7C0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_F35750(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v5 = *a1;
  uint64_t v6 = a2 - (void)*a1;
  unint64_t v7 = (unint64_t)&(*a1)[v6 & 0xFFFFFFFFFFFFFFE0];
  if (a5 < 1) {
    return v7;
  }
  uint64_t v11 = v6 >> 5;
  unint64_t v13 = (unint64_t)a1[1];
  long long v12 = a1[2];
  if (a5 <= (uint64_t)&v12[-v13] >> 5)
  {
    uint64_t v18 = v13 - v7;
    uint64_t v19 = (uint64_t)(v13 - v7) >> 5;
    if (v19 >= a5)
    {
      uint64_t v20 = a3 + 32 * a5;
      long long v24 = a1[1];
      goto LABEL_41;
    }
    uint64_t v20 = a3 + 32 * v19;
    if (v20 != a4)
    {
      uint64_t v21 = 0;
      do
      {
        uint64_t v22 = v20 + v21;
        uint64_t v23 = v13 + v21;
        *(_DWORD *)(v13 + v21 + 16) = *(_DWORD *)(v20 + v21 + 16);
        if (*(_DWORD *)(v20 + v21 + 16) <= 1u) {
          *(_OWORD *)uint64_t v23 = *(_OWORD *)v22;
        }
        *(unsigned char *)(v23 + 24) = *(unsigned char *)(v22 + 24);
        v21 += 32;
      }
      while (v20 + v21 != a4);
      long long v24 = (char *)(v13 + v21);
      a1[1] = v24;
      if (v18 < 1) {
        return v7;
      }
      goto LABEL_41;
    }
    long long v24 = a1[1];
    a1[1] = (char *)v13;
    if (v18 >= 1)
    {
LABEL_41:
      unint64_t v47 = v7 + 32 * a5;
      uint64_t v48 = (uint64_t)&v24[-v47] >> 5;
      uint64_t v49 = 32 * v11;
      uint64x2_t v50 = v24;
      if ((unint64_t)&v24[-32 * a5] < v13)
      {
        uint64_t v51 = 0;
        long long v52 = &v5[32 * v48 + v49];
        do
        {
          long long v53 = &v52[v51];
          long long v54 = &v24[v51];
          *(_DWORD *)&v24[v51 + 16] = *(_DWORD *)&v52[v51 + 16];
          if (*(_DWORD *)&v52[v51 + 16] <= 1u) {
            *(_OWORD *)long long v54 = *(_OWORD *)v53;
          }
          v54[24] = v53[24];
          v51 += 32;
        }
        while ((unint64_t)&v52[v51] < v13);
        uint64x2_t v50 = &v24[v51];
      }
      a1[1] = v50;
      if (v24 != (char *)v47)
      {
        uint64_t v55 = 0;
        long long v56 = &v5[32 * v48 + v49];
        do
        {
          long long v57 = &v24[v55];
          long long v58 = &v56[v55];
          long long v59 = &v56[v55 - 32];
          if (v56 != v24)
          {
            long long v60 = v57 - 32;
            unsigned int v61 = *((_DWORD *)v57 - 4);
            unsigned int v62 = *((_DWORD *)v58 - 4);
            if (v61 == v62)
            {
              if (v61 <= 1) {
                *(_OWORD *)long long v60 = *(_OWORD *)v59;
              }
            }
            else
            {
              if (v62 <= 1)
              {
                *(_OWORD *)long long v60 = *(_OWORD *)v59;
                unsigned int v62 = *((_DWORD *)v58 - 4);
              }
              *((_DWORD *)v57 - 4) = v62;
            }
          }
          *(v57 - 8) = *(v58 - 8);
          v55 -= 32;
        }
        while (v59 != (char *)v7);
      }
      if (v20 != a3)
      {
        uint64_t v63 = 0;
        do
        {
          uint64_t v64 = v7 + v63;
          uint64_t v65 = a3 + v63;
          if (a3 != v7)
          {
            unsigned int v66 = *(_DWORD *)(v64 + 16);
            unsigned int v67 = *(_DWORD *)(v65 + 16);
            if (v66 == v67)
            {
              if (v66 <= 1) {
                *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
              }
            }
            else
            {
              if (v67 <= 1)
              {
                *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
                unsigned int v67 = *(_DWORD *)(v65 + 16);
              }
              *(_DWORD *)(v64 + 16) = v67;
            }
          }
          *(unsigned char *)(v64 + 24) = *(unsigned char *)(v65 + 24);
          v63 += 32;
        }
        while (a3 + v63 != v20);
      }
    }
    return v7;
  }
  unint64_t v14 = a5 + ((uint64_t)(v13 - (void)v5) >> 5);
  if (v14 >> 59) {
    sub_2E00();
  }
  uint64_t v15 = v12 - v5;
  if (v15 >> 4 > v14) {
    unint64_t v14 = v15 >> 4;
  }
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v14;
  }
  if (v16)
  {
    if (v16 >> 59) {
      sub_188D718();
    }
    long long v17 = (char *)operator new(32 * v16);
  }
  else
  {
    long long v17 = 0;
  }
  uint64_t v25 = 0;
  long long v26 = &v17[32 * v11];
  long long v27 = &v26[32 * a5];
  do
  {
    long long v28 = &v26[v25];
    uint64_t v29 = a3 + v25;
    unsigned int v30 = *(_DWORD *)(a3 + v25 + 16);
    *(_DWORD *)&v26[v25 + 16] = v30;
    if (v30 <= 1) {
      *(_OWORD *)long long v28 = *(_OWORD *)v29;
    }
    v28[24] = *(unsigned char *)(v29 + 24);
    v25 += 32;
  }
  while (32 * a5 != v25);
  long long v31 = *a1;
  long long v32 = &v17[32 * v11];
  if (*a1 != (char *)v7)
  {
    uint64_t v33 = 32 * v11;
    long long v34 = v17;
    long long v35 = v5;
    do
    {
      unint64_t v36 = &v34[v33];
      uint64_t v37 = &v35[v33];
      unsigned int v38 = *(_DWORD *)&v35[v33 - 16];
      *(_DWORD *)&v34[v33 - 16] = v38;
      if (v38 <= 1) {
        *((_OWORD *)v36 - 2) = *((_OWORD *)v37 - 2);
      }
      *(v36 - 8) = *(v37 - 8);
      v35 -= 32;
      v34 -= 32;
    }
    while (&v35[v33] != v31);
    long long v32 = &v34[32 * v11];
  }
  BOOL v39 = &v17[32 * v16];
  long long v40 = a1[1];
  if (v40 != (char *)v7)
  {
    uint64_t v41 = 32 * v11;
    long long v42 = &v17[32 * a5];
    do
    {
      long long v43 = &v5[v41];
      long long v44 = &v42[v41];
      unsigned int v45 = *(_DWORD *)&v5[v41 + 16];
      *(_DWORD *)&v42[v41 + 16] = v45;
      if (v45 <= 1) {
        *(_OWORD *)long long v44 = *(_OWORD *)v43;
      }
      v44[24] = v43[24];
      v5 += 32;
      v42 += 32;
    }
    while (&v5[v41] != v40);
    long long v27 = &v42[32 * v11];
  }
  long long v46 = *a1;
  *a1 = v32;
  a1[1] = v27;
  a1[2] = v39;
  if (v46) {
    operator delete(v46);
  }
  return (unint64_t)v26;
}

uint64_t sub_F35B58(uint64_t *a1)
{
  uint64_t result = *a1;
  uint64_t v3 = a1[1];
  if (result != v3)
  {
    while (1)
    {
      uint64_t v4 = result + 32;
      if (result + 32 == v3) {
        break;
      }
      BOOL v5 = sub_45E718(result, result + 32);
      uint64_t result = v4;
      if (v5)
      {
        uint64_t v6 = v4 + 32;
        uint64_t v7 = v4 - 32;
        if (v6 == v3)
        {
          size_t v8 = (_OWORD *)v7;
        }
        else
        {
          do
          {
            while (sub_45E718(v7, v6))
            {
              size_t v8 = (_OWORD *)v7;
              v6 += 32;
              if (v6 == v3) {
                goto LABEL_6;
              }
            }
            size_t v8 = (_OWORD *)(v7 + 32);
            if (v6 - 32 != v7)
            {
              unsigned int v9 = *(_DWORD *)(v7 + 48);
              unsigned int v10 = *(_DWORD *)(v6 + 16);
              if (v9 == v10)
              {
                if (v9 <= 1) {
                  *size_t v8 = *(_OWORD *)v6;
                }
              }
              else
              {
                if (v10 <= 1)
                {
                  *size_t v8 = *(_OWORD *)v6;
                  unsigned int v10 = *(_DWORD *)(v6 + 16);
                }
                *(_DWORD *)(v7 + 48) = v10;
              }
            }
            *(unsigned char *)(v7 + 56) = *(unsigned char *)(v6 + 24);
            v7 += 32;
            v6 += 32;
          }
          while (v6 != v3);
        }
LABEL_6:
        uint64_t result = (uint64_t)(v8 + 2);
        goto LABEL_7;
      }
    }
    uint64_t result = v3;
    if (v3 == a1[1]) {
      return result;
    }
    goto LABEL_21;
  }
LABEL_7:
  if (result != a1[1]) {
LABEL_21:
  }
    a1[1] = result;
  return result;
}

uint64_t sub_F35D00(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v11 = a2 - 4;
  long long v12 = (long long *)v10;
LABEL_3:
  unint64_t v13 = 1 - a4;
  int v41 = a5;
  while (1)
  {
    uint64_t v10 = (uint64_t)v12;
    uint64_t v14 = (char *)a2 - (char *)v12;
    unint64_t v15 = v14 >> 5;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = sub_45E610(a2 - 4, (uint64_t *)v10, v13);
          if (!result) {
            return result;
          }
          unsigned int v29 = *(_DWORD *)(v10 + 16);
          if (v29 <= 1) {
            long long v42 = *(_OWORD *)v10;
          }
          char v30 = *(unsigned char *)(v10 + 24);
          if ((uint64_t *)v10 == v11) {
            goto LABEL_71;
          }
          long long v32 = (unsigned int *)(a2 - 2);
          unsigned int v31 = *((_DWORD *)a2 - 4);
          if (v29 == v31)
          {
            if (v29 >= 2)
            {
              *(unsigned char *)(v10 + 24) = *((unsigned char *)a2 - 8);
              uint64_t v33 = a2 - 1;
              goto LABEL_78;
            }
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
            *(unsigned char *)(v10 + 24) = *((unsigned char *)a2 - 8);
            uint64_t v33 = a2 - 1;
            if (*((_DWORD *)a2 - 4) != v29) {
              goto LABEL_75;
            }
          }
          else
          {
            if (v31 <= 1)
            {
              *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
              unsigned int v31 = *v32;
            }
            *(_DWORD *)(v10 + 16) = v31;
LABEL_71:
            int v40 = *((_DWORD *)a2 - 4);
            BOOL v39 = a2 - 2;
            uint64_t v33 = v39 + 1;
            *(unsigned char *)(v10 + 24) = *((unsigned char *)v39 + 8);
            if (v40 != v29)
            {
              long long v32 = (unsigned int *)v39;
              if (v29 > 1)
              {
LABEL_76:
                *(_DWORD *)BOOL v39 = v29;
LABEL_78:
                *(unsigned char *)uint64_t v33 = v30;
                return result;
              }
LABEL_75:
              *(_OWORD *)uint64_t v11 = v42;
              BOOL v39 = (uint64_t *)v32;
              goto LABEL_76;
            }
            if (v29 > 1) {
              goto LABEL_78;
            }
          }
          *(_OWORD *)uint64_t v11 = v42;
          goto LABEL_78;
        case 3uLL:
          return sub_F36684((long long *)v10, (long long *)(v10 + 32), (long long *)a2 - 2);
        case 4uLL:
          return sub_F3741C(v10, v10 + 32, v10 + 64, (uint64_t)(a2 - 4));
        case 5uLL:
          return sub_F37744(v10, v10 + 32, v10 + 64, v10 + 96, (uint64_t)(a2 - 4));
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 767) {
      break;
    }
    unint64_t v16 = v13;
    if (v13 == 1)
    {
      if ((uint64_t *)v10 != a2)
      {
        unint64_t v34 = (v15 - 2) >> 1;
        unint64_t v35 = v34 + 1;
        unint64_t v36 = (long long *)(v10 + 32 * v34);
        do
        {
          sub_F37B68(v10, a3, v14 >> 5, v36);
          v36 -= 2;
          --v35;
        }
        while (v35);
        unint64_t v37 = (unint64_t)v14 >> 5;
        do
        {
          uint64_t result = sub_F37D58(v10, (uint64_t)a2, a3, v37);
          a2 -= 4;
        }
        while (v37-- > 2);
      }
      return result;
    }
    unint64_t v17 = v15 >> 1;
    unint64_t v18 = v10 + 32 * (v15 >> 1);
    if ((unint64_t)v14 <= 0x1000)
    {
      sub_F36684((long long *)v18, (long long *)v10, (long long *)a2 - 2);
      if (a5) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
    sub_F36684((long long *)v10, (long long *)v18, (long long *)a2 - 2);
    sub_F36684((long long *)(v10 + 32), (long long *)(32 * v17 + v10 - 32), (long long *)a2 - 4);
    sub_F36684((long long *)(v10 + 64), (long long *)(v10 + 32 + 32 * v17), (long long *)a2 - 6);
    sub_F36684((long long *)(32 * v17 + v10 - 32), (long long *)v18, (long long *)(v10 + 32 + 32 * v17));
    unsigned int v19 = *(_DWORD *)(v10 + 16);
    if (v19 > 1)
    {
      unint64_t v20 = *(unsigned __int8 *)(v10 + 24);
      uint64_t v22 = (unsigned int *)(v18 + 16);
      unsigned int v21 = *(_DWORD *)(v18 + 16);
      if (v19 == v21)
      {
        long long v24 = (unsigned char *)(v10 + 24 + 32 * v17);
        *(unsigned char *)(v10 + 24) = *v24;
        a5 = v41;
        unsigned char *v24 = v20;
        if (v41) {
          goto LABEL_29;
        }
        goto LABEL_28;
      }
    }
    else
    {
      long long v42 = *(_OWORD *)v10;
      unint64_t v20 = *(unsigned __int8 *)(v10 + 24);
      uint64_t v22 = (unsigned int *)(v18 + 16);
      unsigned int v21 = *(_DWORD *)(v18 + 16);
      if (v19 == v21)
      {
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v18;
        uint64_t v23 = (unsigned char *)(v10 + 24 + 32 * v17);
        *(unsigned char *)(v10 + 24) = *v23;
        a5 = v41;
        *(_OWORD *)unint64_t v18 = v42;
        *uint64_t v23 = v20;
        if (v41) {
          goto LABEL_29;
        }
        goto LABEL_28;
      }
    }
    if (v21 <= 1) {
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v18;
    }
    *(_DWORD *)(v10 + 16) = v21;
    uint64_t v25 = (unsigned char *)(v10 + 24 + 32 * v17);
    *(unsigned char *)(v10 + 24) = *v25;
    if (*v22 != v19)
    {
      a5 = v41;
      if (v19 <= 1) {
        *(_OWORD *)unint64_t v18 = v42;
      }
      *uint64_t v22 = v19;
LABEL_27:
      *uint64_t v25 = v20;
      if (a5) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
    a5 = v41;
    if (v19 > 1) {
      goto LABEL_27;
    }
    *(_OWORD *)unint64_t v18 = v42;
    *uint64_t v25 = v20;
    if (v41) {
      goto LABEL_29;
    }
LABEL_28:
    if (!sub_45E610((uint64_t *)(v10 - 32), (uint64_t *)v10, v20))
    {
      uint64_t result = (uint64_t)sub_F36B74((uint64_t *)v10, (unint64_t)a2);
      long long v12 = (long long *)result;
      goto LABEL_34;
    }
LABEL_29:
    long long v26 = sub_F36E08((long long *)v10, a2);
    if ((v27 & 1) == 0) {
      goto LABEL_32;
    }
    BOOL v28 = sub_F370A4(v10, (uint64_t)v26);
    long long v12 = v26 + 2;
    uint64_t result = sub_F370A4((uint64_t)(v26 + 2), (uint64_t)a2);
    if (result)
    {
      a4 = -(uint64_t)v16;
      a2 = (uint64_t *)v26;
      if (v28) {
        return result;
      }
      goto LABEL_2;
    }
    unint64_t v13 = v16 + 1;
    if (!v28)
    {
LABEL_32:
      uint64_t result = sub_F35D00(v10, v26, a3, -(uint64_t)v16, a5 & 1);
      long long v12 = v26 + 2;
LABEL_34:
      a5 = 0;
      a4 = -(uint64_t)v16;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return sub_F36354(v10, a2);
  }
  else
  {
    return sub_F364FC(v10, a2);
  }
}

BOOL sub_F36354(BOOL result, uint64_t *a2)
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v3 = (long long *)result;
    uint64_t v4 = (uint64_t *)(result + 32);
    if ((uint64_t *)(result + 32) != a2)
    {
      uint64_t v5 = 0;
      char v6 = (uint64_t *)result;
      do
      {
        uint64_t v7 = v4;
        uint64_t result = sub_45E610(v4, v6, (unint64_t)v4);
        if (result)
        {
          unsigned int v17 = *((_DWORD *)v6 + 12);
          if (v17 <= 1) {
            long long v16 = *(_OWORD *)v7;
          }
          char v18 = *((unsigned char *)v6 + 56);
          uint64_t v8 = v5;
          while (1)
          {
            unsigned int v9 = (char *)v3 + v8;
            uint64_t v10 = (long long *)((char *)v3 + v8 + 32);
            unsigned int v11 = *(_DWORD *)((char *)v3 + v8 + 48);
            unsigned int v12 = *(_DWORD *)((char *)v3 + v8 + 16);
            if (v11 == v12)
            {
              if (v11 <= 1) {
                *uint64_t v10 = *(_OWORD *)v9;
              }
            }
            else
            {
              if (v12 <= 1)
              {
                *uint64_t v10 = *(_OWORD *)v9;
                unsigned int v12 = *((_DWORD *)v9 + 4);
              }
              *((_DWORD *)v9 + 12) = v12;
            }
            *((unsigned char *)v3 + v8 + 56) = *((unsigned char *)v3 + v8 + 24);
            if (!v8) {
              break;
            }
            uint64_t result = sub_45E610((uint64_t *)&v16, (uint64_t *)((char *)v3 + v8 - 32), (unint64_t)v3 + v8);
            v8 -= 32;
            if (!result)
            {
              uint64_t v13 = (uint64_t)v3 + v8 + 32;
              if ((long long *)v13 == &v16) {
                goto LABEL_5;
              }
              goto LABEL_22;
            }
          }
          uint64_t v13 = (uint64_t)v3;
          if (v3 == &v16) {
            goto LABEL_5;
          }
LABEL_22:
          unsigned int v14 = *(_DWORD *)(v13 + 16);
          unsigned int v15 = v17;
          if (v14 == v17)
          {
            if (v14 <= 1) {
              *(_OWORD *)uint64_t v13 = v16;
            }
          }
          else
          {
            if (v17 <= 1) {
              *(_OWORD *)uint64_t v13 = v16;
            }
            *(_DWORD *)(v13 + 16) = v15;
          }
LABEL_5:
          *(unsigned char *)(v13 + 24) = v18;
        }
        uint64_t v4 = v7 + 4;
        v5 += 32;
        char v6 = v7;
      }
      while (v7 + 4 != a2);
    }
  }
  return result;
}

BOOL sub_F364FC(BOOL result, uint64_t *a2)
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = (uint64_t *)(result + 32);
    if ((uint64_t *)(result + 32) != a2)
    {
      uint64_t v5 = (unsigned char *)(result + 56);
      do
      {
        char v6 = v4;
        uint64_t result = sub_45E610(v4, v3, (unint64_t)v4);
        if (result)
        {
          unsigned int v17 = *((_DWORD *)v3 + 12);
          if (v17 <= 1) {
            long long v16 = *(_OWORD *)v6;
          }
          char v18 = *((unsigned char *)v3 + 56);
          uint64_t v7 = v5;
          do
          {
            uint64_t v8 = v7 - 56;
            unsigned int v9 = v7 - 24;
            unsigned int v10 = *((_DWORD *)v7 - 2);
            unsigned int v11 = *((_DWORD *)v7 - 10);
            if (v10 == v11)
            {
              if (v10 <= 1) {
                _OWORD *v9 = *v8;
              }
            }
            else
            {
              if (v11 <= 1)
              {
                _OWORD *v9 = *v8;
                unsigned int v11 = *((_DWORD *)v7 - 10);
              }
              *((_DWORD *)v7 - 2) = v11;
            }
            unint64_t v12 = *(v7 - 32);
            *uint64_t v7 = v12;
            uint64_t result = sub_45E610((uint64_t *)&v16, (uint64_t *)v7 - 11, v12);
            v7 -= 32;
          }
          while (result);
          uint64_t v13 = v7 - 24;
          if (v7 - 24 != (unsigned char *)&v16)
          {
            unsigned int v14 = *((_DWORD *)v7 - 2);
            unsigned int v15 = v17;
            if (v14 == v17)
            {
              if (v14 <= 1) {
                *uint64_t v13 = v16;
              }
            }
            else
            {
              if (v17 <= 1) {
                *uint64_t v13 = v16;
              }
              *((_DWORD *)v7 - 2) = v15;
            }
          }
          *uint64_t v7 = v18;
        }
        uint64_t v4 = v6 + 4;
        v5 += 32;
        uint64_t v3 = v6;
      }
      while (v6 + 4 != a2);
    }
  }
  return result;
}

uint64_t sub_F36684(long long *a1, long long *a2, long long *a3)
{
  BOOL v6 = sub_45E610((uint64_t *)a2, (uint64_t *)a1, __stack_chk_guard);
  uint64_t result = sub_45E610((uint64_t *)a3, (uint64_t *)a2, v7);
  if (v6)
  {
    if (result)
    {
      unsigned int v9 = *((_DWORD *)a1 + 4);
      if (v9 <= 1) {
        long long v32 = *a1;
      }
      char v10 = *((unsigned char *)a1 + 24);
      if (a1 != a3)
      {
        unint64_t v12 = (unsigned int *)(a3 + 1);
        unsigned int v11 = *((_DWORD *)a3 + 4);
        if (v9 == v11)
        {
          if (v9 >= 2)
          {
            *((unsigned char *)a1 + 24) = *((unsigned char *)a3 + 24);
            uint64_t v13 = (char *)a3 + 24;
            goto LABEL_71;
          }
          *a1 = *a3;
          uint64_t v13 = (char *)a3 + 24;
          *((unsigned char *)a1 + 24) = *((unsigned char *)a3 + 24);
          if (*((_DWORD *)a3 + 4) != v9) {
            goto LABEL_32;
          }
          goto LABEL_30;
        }
        if (v11 <= 1)
        {
          *a1 = *a3;
          unsigned int v11 = *((_DWORD *)a3 + 4);
        }
        *((_DWORD *)a1 + 4) = v11;
      }
      uint64_t v13 = (char *)a3 + 24;
      *((unsigned char *)a1 + 24) = *((unsigned char *)a3 + 24);
      unint64_t v12 = (unsigned int *)(a3 + 1);
      if (*((_DWORD *)a3 + 4) != v9)
      {
        if (v9 > 1)
        {
LABEL_33:
          unsigned int *v12 = v9;
          goto LABEL_71;
        }
LABEL_32:
        *a3 = v32;
        goto LABEL_33;
      }
      if (v9 > 1)
      {
LABEL_71:
        *uint64_t v13 = v10;
        return 1;
      }
LABEL_30:
      *a3 = v32;
      goto LABEL_71;
    }
    unsigned int v19 = *((_DWORD *)a1 + 4);
    if (v19 <= 1) {
      long long v32 = *a1;
    }
    unint64_t v20 = *((unsigned __int8 *)a1 + 24);
    if (a1 != a2)
    {
      unsigned int v21 = (unsigned int *)(a2 + 1);
      unsigned int v22 = *((_DWORD *)a2 + 4);
      if (v19 == v22)
      {
        if (v19 >= 2)
        {
          *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
          *((unsigned char *)a2 + 24) = v20;
          if (sub_45E610((uint64_t *)a3, (uint64_t *)a2, v20))
          {
LABEL_63:
            unsigned int v27 = *((_DWORD *)a2 + 4);
            if (v27 <= 1) {
              long long v32 = *a2;
            }
            char v28 = *((unsigned char *)a2 + 24);
            if (a2 != a3)
            {
              char v30 = (unsigned int *)(a3 + 1);
              unsigned int v29 = *((_DWORD *)a3 + 4);
              if (v27 == v29)
              {
                if (v27 >= 2)
                {
                  *((unsigned char *)a2 + 24) = *((unsigned char *)a3 + 24);
                  unsigned int v31 = (char *)a3 + 24;
                  goto LABEL_97;
                }
                *a2 = *a3;
                unsigned int v31 = (char *)a3 + 24;
                *((unsigned char *)a2 + 24) = *((unsigned char *)a3 + 24);
                if (*((_DWORD *)a3 + 4) != v27) {
                  goto LABEL_93;
                }
                goto LABEL_91;
              }
              if (v29 <= 1)
              {
                *a2 = *a3;
                unsigned int v29 = *((_DWORD *)a3 + 4);
              }
              *((_DWORD *)a2 + 4) = v29;
            }
            unsigned int v31 = (char *)a3 + 24;
            *((unsigned char *)a2 + 24) = *((unsigned char *)a3 + 24);
            char v30 = (unsigned int *)(a3 + 1);
            if (*((_DWORD *)a3 + 4) != v27)
            {
              if (v27 > 1)
              {
LABEL_94:
                *char v30 = v27;
                goto LABEL_97;
              }
LABEL_93:
              *a3 = v32;
              goto LABEL_94;
            }
            if (v27 > 1)
            {
LABEL_97:
              *unsigned int v31 = v28;
              return 2;
            }
LABEL_91:
            *a3 = v32;
            goto LABEL_97;
          }
          return 1;
        }
        *a1 = *a2;
        *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
        if (*((_DWORD *)a2 + 4) != v19) {
          goto LABEL_60;
        }
        goto LABEL_57;
      }
      if (v22 <= 1)
      {
        *a1 = *a2;
        unsigned int v22 = *((_DWORD *)a2 + 4);
      }
      *((_DWORD *)a1 + 4) = v22;
    }
    unsigned int v21 = (unsigned int *)(a2 + 1);
    int v26 = *((_DWORD *)a2 + 4);
    *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
    if (v26 != v19)
    {
      if (v19 > 1)
      {
LABEL_61:
        *unsigned int v21 = v19;
LABEL_62:
        *((unsigned char *)a2 + 24) = v20;
        if (sub_45E610((uint64_t *)a3, (uint64_t *)a2, v20)) {
          goto LABEL_63;
        }
        return 1;
      }
LABEL_60:
      *a2 = v32;
      goto LABEL_61;
    }
    if (v19 > 1) {
      goto LABEL_62;
    }
LABEL_57:
    *a2 = v32;
    *((unsigned char *)a2 + 24) = v20;
    if (sub_45E610((uint64_t *)a3, (uint64_t *)a2, v20)) {
      goto LABEL_63;
    }
    return 1;
  }
  if (!result) {
    return result;
  }
  unsigned int v14 = *((_DWORD *)a2 + 4);
  if (v14 <= 1) {
    long long v32 = *a2;
  }
  unint64_t v15 = *((unsigned __int8 *)a2 + 24);
  if (a2 != a3)
  {
    unsigned int v17 = (unsigned int *)(a3 + 1);
    unsigned int v16 = *((_DWORD *)a3 + 4);
    if (v14 == v16)
    {
      if (v14 >= 2)
      {
        *((unsigned char *)a2 + 24) = *((unsigned char *)a3 + 24);
        *((unsigned char *)a3 + 24) = v15;
        if (!sub_45E610((uint64_t *)a2, (uint64_t *)a1, v15)) {
          return 1;
        }
        goto LABEL_45;
      }
      *a2 = *a3;
      char v18 = (char *)a3 + 24;
      *((unsigned char *)a2 + 24) = *((unsigned char *)a3 + 24);
      if (*((_DWORD *)a3 + 4) != v14) {
        goto LABEL_42;
      }
LABEL_39:
      *a3 = v32;
      *char v18 = v15;
      if (!sub_45E610((uint64_t *)a2, (uint64_t *)a1, v15)) {
        return 1;
      }
      goto LABEL_45;
    }
    if (v16 <= 1)
    {
      *a2 = *a3;
      unsigned int v16 = *((_DWORD *)a3 + 4);
    }
    *((_DWORD *)a2 + 4) = v16;
  }
  char v18 = (char *)a3 + 24;
  *((unsigned char *)a2 + 24) = *((unsigned char *)a3 + 24);
  unsigned int v17 = (unsigned int *)(a3 + 1);
  if (*((_DWORD *)a3 + 4) == v14)
  {
    if (v14 > 1) {
      goto LABEL_44;
    }
    goto LABEL_39;
  }
  if (v14 <= 1) {
LABEL_42:
  }
    *a3 = v32;
  *unsigned int v17 = v14;
LABEL_44:
  *char v18 = v15;
  if (!sub_45E610((uint64_t *)a2, (uint64_t *)a1, v15)) {
    return 1;
  }
LABEL_45:
  unsigned int v23 = *((_DWORD *)a1 + 4);
  if (v23 <= 1) {
    long long v32 = *a1;
  }
  char v24 = *((unsigned char *)a1 + 24);
  if (a1 != a2)
  {
    unsigned int v25 = *((_DWORD *)a2 + 4);
    if (v23 == v25)
    {
      if (v23 >= 2)
      {
        *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
        *((unsigned char *)a2 + 24) = v24;
        return 2;
      }
      *a1 = *a2;
      *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
      if (*((_DWORD *)a2 + 4) != v23) {
        goto LABEL_83;
      }
      goto LABEL_81;
    }
    if (v25 <= 1)
    {
      *a1 = *a2;
      unsigned int v25 = *((_DWORD *)a2 + 4);
    }
    *((_DWORD *)a1 + 4) = v25;
  }
  *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
  if (*((_DWORD *)a2 + 4) != v23)
  {
    if (v23 > 1)
    {
LABEL_84:
      *((_DWORD *)a2 + 4) = v23;
      goto LABEL_85;
    }
LABEL_83:
    *a2 = v32;
    goto LABEL_84;
  }
  if (v23 > 1)
  {
LABEL_85:
    *((unsigned char *)a2 + 24) = v24;
    return 2;
  }
LABEL_81:
  *a2 = v32;
  *((unsigned char *)a2 + 24) = v24;
  return 2;
}

uint64_t *sub_F36B74(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a2;
  unsigned int v19 = *((_DWORD *)a1 + 4);
  if (v19 <= 1) {
    long long v18 = *(_OWORD *)a1;
  }
  unsigned __int8 v20 = *((unsigned char *)a1 + 24);
  if (sub_45E610((uint64_t *)&v18, (uint64_t *)(a2 - 32), v20))
  {
    uint64_t v5 = a1;
    do
      v5 += 4;
    while (!sub_45E610((uint64_t *)&v18, v5, (unint64_t)v4));
  }
  else
  {
    uint64_t v4 = a1 + 4;
    do
    {
      uint64_t v5 = v4;
      if ((unint64_t)v4 >= v2) {
        break;
      }
      BOOL v6 = sub_45E610((uint64_t *)&v18, v4, (unint64_t)v4);
      uint64_t v4 = v5 + 4;
    }
    while (!v6);
  }
  if ((unint64_t)v5 < v2)
  {
    do
      v2 -= 32;
    while (sub_45E610((uint64_t *)&v18, (uint64_t *)v2, (unint64_t)v4));
  }
  while ((unint64_t)v5 < v2)
  {
    unsigned int v7 = *((_DWORD *)v5 + 4);
    if (v7 <= 1) {
      long long v21 = *(_OWORD *)v5;
    }
    unint64_t v8 = *((unsigned __int8 *)v5 + 24);
    if (v5 != (uint64_t *)v2)
    {
      char v10 = (unsigned int *)(v2 + 16);
      unsigned int v9 = *(_DWORD *)(v2 + 16);
      if (v7 == v9)
      {
        if (v7 >= 2)
        {
          unsigned int v11 = (unsigned char *)(v2 + 24);
          *((unsigned char *)v5 + 24) = *(unsigned char *)(v2 + 24);
          goto LABEL_30;
        }
        *(_OWORD *)uint64_t v5 = *(_OWORD *)v2;
        unsigned int v11 = (unsigned char *)(v2 + 24);
        *((unsigned char *)v5 + 24) = *(unsigned char *)(v2 + 24);
        if (*(_DWORD *)(v2 + 16) != v7) {
          goto LABEL_27;
        }
LABEL_25:
        *(_OWORD *)unint64_t v2 = v21;
        goto LABEL_30;
      }
      if (v9 <= 1)
      {
        *(_OWORD *)uint64_t v5 = *(_OWORD *)v2;
        unsigned int v9 = *(_DWORD *)(v2 + 16);
      }
      *((_DWORD *)v5 + 4) = v9;
    }
    unsigned int v11 = (unsigned char *)(v2 + 24);
    *((unsigned char *)v5 + 24) = *(unsigned char *)(v2 + 24);
    char v10 = (unsigned int *)(v2 + 16);
    if (*(_DWORD *)(v2 + 16) != v7)
    {
      if (v7 <= 1) {
LABEL_27:
      }
        *(_OWORD *)unint64_t v2 = v21;
      *char v10 = v7;
      goto LABEL_30;
    }
    if (v7 <= 1) {
      goto LABEL_25;
    }
LABEL_30:
    unsigned char *v11 = v8;
    do
      v5 += 4;
    while (!sub_45E610((uint64_t *)&v18, v5, v8));
    do
      v2 -= 32;
    while (sub_45E610((uint64_t *)&v18, (uint64_t *)v2, v8));
  }
  unint64_t v12 = v5 - 4;
  if (v5 - 4 != a1)
  {
    unsigned int v13 = *((_DWORD *)a1 + 4);
    unsigned int v14 = *((_DWORD *)v5 - 4);
    if (v13 == v14)
    {
      if (v13 <= 1) {
        *(_OWORD *)a1 = *(_OWORD *)v12;
      }
    }
    else
    {
      if (v14 <= 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)v12;
        unsigned int v14 = *((_DWORD *)v5 - 4);
      }
      *((_DWORD *)a1 + 4) = v14;
    }
    *((unsigned char *)a1 + 24) = *((unsigned char *)v5 - 8);
  }
  if (v12 != (uint64_t *)&v18)
  {
    unsigned int v15 = *((_DWORD *)v5 - 4);
    unsigned int v16 = v19;
    if (v15 == v19)
    {
      if (v15 <= 1) {
        *(_OWORD *)unint64_t v12 = v18;
      }
    }
    else
    {
      if (v19 <= 1)
      {
        *(_OWORD *)unint64_t v12 = v18;
        unsigned int v16 = v19;
      }
      *((_DWORD *)v5 - 4) = v16;
    }
  }
  *((unsigned char *)v5 - 8) = v20;
  return v5;
}

long long *sub_F36E08(long long *a1, uint64_t *a2)
{
  unsigned int v21 = *((_DWORD *)a1 + 4);
  if (v21 <= 1) {
    long long v20 = *a1;
  }
  uint64_t v4 = 0;
  char v22 = *((unsigned char *)a1 + 24);
  do
  {
    BOOL v5 = sub_45E610((uint64_t *)&a1[v4 + 2], (uint64_t *)&v20, (unint64_t)&a1[v4]);
    v4 += 2;
  }
  while (v5);
  unint64_t v7 = (unint64_t)&a1[v4];
  if (v4 == 2)
  {
    do
    {
      if (v7 >= (unint64_t)a2) {
        break;
      }
      a2 -= 4;
    }
    while (!sub_45E610(a2, (uint64_t *)&v20, v6));
  }
  else
  {
    do
      a2 -= 4;
    while (!sub_45E610(a2, (uint64_t *)&v20, v6));
  }
  unint64_t v8 = (unint64_t)&a1[v4];
  if (v7 < (unint64_t)a2)
  {
    unsigned int v9 = a2;
    while (1)
    {
      unsigned int v10 = *(_DWORD *)(v8 + 16);
      if (v10 <= 1) {
        long long v23 = *(_OWORD *)v8;
      }
      unint64_t v11 = *(unsigned __int8 *)(v8 + 24);
      if ((uint64_t *)v8 == v9) {
        goto LABEL_22;
      }
      unsigned int v13 = (unsigned int *)(v9 + 2);
      unsigned int v12 = *((_DWORD *)v9 + 4);
      if (v10 != v12) {
        break;
      }
      if (v10 < 2)
      {
        *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
        unsigned int v14 = v9 + 3;
        *(unsigned char *)(v8 + 24) = *((unsigned char *)v9 + 24);
        if (*((_DWORD *)v9 + 4) == v10) {
          goto LABEL_24;
        }
        goto LABEL_26;
      }
      unsigned int v14 = v9 + 3;
      *(unsigned char *)(v8 + 24) = *((unsigned char *)v9 + 24);
LABEL_29:
      *unsigned int v14 = v11;
      do
        v8 += 32;
      while (sub_45E610((uint64_t *)v8, (uint64_t *)&v20, v11));
      do
        v9 -= 4;
      while (!sub_45E610(v9, (uint64_t *)&v20, v11));
      if (v8 >= (unint64_t)v9) {
        goto LABEL_33;
      }
    }
    if (v12 <= 1)
    {
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
      unsigned int v12 = *((_DWORD *)v9 + 4);
    }
    *(_DWORD *)(v8 + 16) = v12;
LABEL_22:
    unsigned int v14 = v9 + 3;
    *(unsigned char *)(v8 + 24) = *((unsigned char *)v9 + 24);
    unsigned int v13 = (unsigned int *)(v9 + 2);
    if (*((_DWORD *)v9 + 4) == v10)
    {
      if (v10 > 1) {
        goto LABEL_29;
      }
LABEL_24:
      *(_OWORD *)unsigned int v9 = v23;
      goto LABEL_29;
    }
    if (v10 <= 1) {
LABEL_26:
    }
      *(_OWORD *)unsigned int v9 = v23;
    *unsigned int v13 = v10;
    goto LABEL_29;
  }
LABEL_33:
  uint64_t result = (long long *)(v8 - 32);
  if ((long long *)(v8 - 32) != a1)
  {
    unsigned int v16 = *((_DWORD *)a1 + 4);
    unsigned int v17 = *(_DWORD *)(v8 - 16);
    if (v16 == v17)
    {
      if (v16 <= 1) {
        *a1 = *result;
      }
    }
    else
    {
      if (v17 <= 1)
      {
        *a1 = *result;
        unsigned int v17 = *(_DWORD *)(v8 - 16);
      }
      *((_DWORD *)a1 + 4) = v17;
    }
    *((unsigned char *)a1 + 24) = *(unsigned char *)(v8 - 8);
  }
  if (result != &v20)
  {
    unsigned int v18 = *(_DWORD *)(v8 - 16);
    unsigned int v19 = v21;
    if (v18 == v21)
    {
      if (v18 <= 1) {
        *uint64_t result = v20;
      }
    }
    else
    {
      if (v21 <= 1)
      {
        *uint64_t result = v20;
        unsigned int v19 = v21;
      }
      *(_DWORD *)(v8 - 16) = v19;
    }
  }
  *(unsigned char *)(v8 - 8) = v22;
  return result;
}

BOOL sub_F370A4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = a2 - a1;
  uint64_t v5 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v7 = (_OWORD *)(a2 - 32);
      if (!sub_45E610((uint64_t *)(a2 - 32), (uint64_t *)a1, v4)) {
        return 1;
      }
      unsigned int v8 = *(_DWORD *)(a1 + 16);
      if (v8 <= 1) {
        long long v30 = *(_OWORD *)a1;
      }
      char v9 = *(unsigned char *)(a1 + 24);
      if (v7 == (_OWORD *)a1) {
        goto LABEL_42;
      }
      unint64_t v11 = (unsigned int *)(a2 - 16);
      unsigned int v10 = *(_DWORD *)(a2 - 16);
      if (v8 == v10)
      {
        if (v8 >= 2)
        {
          *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 - 8);
          *(unsigned char *)(a2 - 8) = v9;
          return 1;
        }
        *(_OWORD *)a1 = *v7;
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 - 8);
        unsigned int v12 = (unsigned char *)(a2 - 8);
        if (*(_DWORD *)(a2 - 16) != v8) {
          goto LABEL_46;
        }
        goto LABEL_44;
      }
      if (v10 <= 1)
      {
        *(_OWORD *)a1 = *v7;
        unsigned int v10 = *v11;
      }
      *(_DWORD *)(a1 + 16) = v10;
LABEL_42:
      int v29 = *(_DWORD *)(a2 - 16);
      char v28 = (unsigned int *)(a2 - 16);
      unsigned int v12 = v28 + 2;
      *(unsigned char *)(a1 + 24) = *((unsigned char *)v28 + 8);
      if (v29 != v8)
      {
        unint64_t v11 = v28;
        if (v8 > 1)
        {
LABEL_47:
          *char v28 = v8;
          goto LABEL_48;
        }
LABEL_46:
        *unint64_t v7 = v30;
        char v28 = v11;
        goto LABEL_47;
      }
      if (v8 <= 1)
      {
LABEL_44:
        *unint64_t v7 = v30;
        unsigned char *v12 = v9;
        return 1;
      }
LABEL_48:
      unsigned char *v12 = v9;
      return 1;
    case 3:
      sub_F36684((long long *)a1, (long long *)(a1 + 32), (long long *)(a2 - 32));
      return 1;
    case 4:
      sub_F3741C(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      sub_F37744(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      return 1;
    default:
      unsigned int v13 = (uint64_t *)(a1 + 64);
      sub_F36684((long long *)a1, (long long *)(a1 + 32), (long long *)(a1 + 64));
      unint64_t v15 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      while (1)
      {
        if (sub_45E610((uint64_t *)v15, v13, v14))
        {
          unsigned int v31 = *(_DWORD *)(v15 + 16);
          if (v31 <= 1) {
            long long v30 = *(_OWORD *)v15;
          }
          char v32 = *(unsigned char *)(v15 + 24);
          uint64_t v18 = v16;
          while (1)
          {
            uint64_t v19 = a1 + v18;
            long long v20 = (_OWORD *)(a1 + v18 + 64);
            unsigned int v21 = (_OWORD *)(a1 + v18 + 96);
            unsigned int v22 = *(_DWORD *)(a1 + v18 + 112);
            unsigned int v23 = *(_DWORD *)(a1 + v18 + 80);
            if (v22 == v23)
            {
              if (v22 <= 1) {
                *unsigned int v21 = *v20;
              }
            }
            else
            {
              if (v23 <= 1)
              {
                *unsigned int v21 = *v20;
                unsigned int v23 = *(_DWORD *)(v19 + 80);
              }
              *(_DWORD *)(v19 + 112) = v23;
            }
            unint64_t v24 = a1 + v18;
            *(unsigned char *)(a1 + v18 + 120) = *(unsigned char *)(a1 + v18 + 88);
            if (v18 == -64) {
              break;
            }
            v18 -= 32;
            if (!sub_45E610((uint64_t *)&v30, (uint64_t *)(v24 + 32), v24))
            {
              uint64_t v25 = a1 + v18 + 96;
              if ((long long *)v25 == &v30) {
                goto LABEL_13;
              }
              goto LABEL_30;
            }
          }
          uint64_t v25 = a1;
          if ((long long *)a1 == &v30) {
            goto LABEL_13;
          }
LABEL_30:
          unsigned int v26 = *(_DWORD *)(v25 + 16);
          unsigned int v27 = v31;
          if (v26 == v31)
          {
            if (v26 <= 1) {
              *(_OWORD *)uint64_t v25 = v30;
            }
          }
          else
          {
            if (v31 <= 1)
            {
              *(_OWORD *)uint64_t v25 = v30;
              unsigned int v27 = v31;
            }
            *(_DWORD *)(v25 + 16) = v27;
          }
LABEL_13:
          *(unsigned char *)(v25 + 24) = v32;
          if (++v17 == 8) {
            return v15 + 32 == a2;
          }
        }
        unsigned int v13 = (uint64_t *)v15;
        unint64_t v14 = v15 + 32;
        v16 += 32;
        unint64_t v15 = v14;
        if (v14 == a2) {
          return 1;
        }
      }
  }
}

BOOL sub_F3741C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_F36684((long long *)a1, (long long *)a2, (long long *)a3);
  BOOL result = sub_45E610((uint64_t *)a4, (uint64_t *)a3, v8);
  if (!result) {
    return result;
  }
  unsigned int v10 = *(_DWORD *)(a3 + 16);
  if (v10 <= 1) {
    long long v21 = *(_OWORD *)a3;
  }
  unint64_t v11 = *(unsigned __int8 *)(a3 + 24);
  if (a3 == a4) {
    goto LABEL_12;
  }
  unsigned int v13 = (unsigned int *)(a4 + 16);
  unsigned int v12 = *(_DWORD *)(a4 + 16);
  if (v10 != v12)
  {
    if (v12 <= 1)
    {
      *(_OWORD *)a3 = *(_OWORD *)a4;
      unsigned int v12 = *(_DWORD *)(a4 + 16);
    }
    *(_DWORD *)(a3 + 16) = v12;
LABEL_12:
    unint64_t v14 = (unsigned char *)(a4 + 24);
    *(unsigned char *)(a3 + 24) = *(unsigned char *)(a4 + 24);
    unsigned int v13 = (unsigned int *)(a4 + 16);
    if (*(_DWORD *)(a4 + 16) != v10)
    {
      if (v10 > 1)
      {
LABEL_18:
        *unsigned int v13 = v10;
LABEL_19:
        *unint64_t v14 = v11;
        BOOL result = sub_45E610((uint64_t *)a3, (uint64_t *)a2, v11);
        if (!result) {
          return result;
        }
        goto LABEL_20;
      }
LABEL_17:
      *(_OWORD *)a4 = v21;
      goto LABEL_18;
    }
    if (v10 > 1) {
      goto LABEL_19;
    }
    goto LABEL_14;
  }
  if (v10 < 2)
  {
    *(_OWORD *)a3 = *(_OWORD *)a4;
    unint64_t v14 = (unsigned char *)(a4 + 24);
    *(unsigned char *)(a3 + 24) = *(unsigned char *)(a4 + 24);
    if (*(_DWORD *)(a4 + 16) != v10) {
      goto LABEL_17;
    }
LABEL_14:
    *(_OWORD *)a4 = v21;
    *unint64_t v14 = v11;
    BOOL result = sub_45E610((uint64_t *)a3, (uint64_t *)a2, v11);
    if (!result) {
      return result;
    }
    goto LABEL_20;
  }
  *(unsigned char *)(a3 + 24) = *(unsigned char *)(a4 + 24);
  *(unsigned char *)(a4 + 24) = v11;
  BOOL result = sub_45E610((uint64_t *)a3, (uint64_t *)a2, v11);
  if (!result) {
    return result;
  }
LABEL_20:
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  if (v15 <= 1) {
    long long v21 = *(_OWORD *)a2;
  }
  unint64_t v16 = *(unsigned __int8 *)(a2 + 24);
  if (a2 == a3) {
    goto LABEL_32;
  }
  unsigned int v17 = *(_DWORD *)(a3 + 16);
  if (v15 != v17)
  {
    if (v17 <= 1)
    {
      *(_OWORD *)a2 = *(_OWORD *)a3;
      unsigned int v17 = *(_DWORD *)(a3 + 16);
    }
    *(_DWORD *)(a2 + 16) = v17;
LABEL_32:
    *(unsigned char *)(a2 + 24) = *(unsigned char *)(a3 + 24);
    if (*(_DWORD *)(a3 + 16) != v15)
    {
      if (v15 > 1)
      {
LABEL_38:
        *(_DWORD *)(a3 + 16) = v15;
LABEL_39:
        *(unsigned char *)(a3 + 24) = v16;
        BOOL result = sub_45E610((uint64_t *)a2, (uint64_t *)a1, v16);
        if (!result) {
          return result;
        }
LABEL_40:
        unsigned int v18 = *(_DWORD *)(a1 + 16);
        if (v18 <= 1) {
          long long v21 = *(_OWORD *)a1;
        }
        char v19 = *(unsigned char *)(a1 + 24);
        if (a1 != a2)
        {
          unsigned int v20 = *(_DWORD *)(a2 + 16);
          if (v18 == v20)
          {
            if (v18 >= 2)
            {
              *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
              goto LABEL_59;
            }
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
            if (*(_DWORD *)(a2 + 16) != v18) {
              goto LABEL_56;
            }
            goto LABEL_54;
          }
          if (v20 <= 1)
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
            unsigned int v20 = *(_DWORD *)(a2 + 16);
          }
          *(_DWORD *)(a1 + 16) = v20;
        }
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        if (*(_DWORD *)(a2 + 16) != v18)
        {
          if (v18 > 1)
          {
LABEL_57:
            *(_DWORD *)(a2 + 16) = v18;
            goto LABEL_59;
          }
LABEL_56:
          *(_OWORD *)a2 = v21;
          goto LABEL_57;
        }
        if (v18 > 1)
        {
LABEL_59:
          *(unsigned char *)(a2 + 24) = v19;
          return result;
        }
LABEL_54:
        *(_OWORD *)a2 = v21;
        goto LABEL_59;
      }
LABEL_37:
      *(_OWORD *)a3 = v21;
      goto LABEL_38;
    }
    if (v15 > 1) {
      goto LABEL_39;
    }
    goto LABEL_34;
  }
  if (v15 < 2)
  {
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(unsigned char *)(a2 + 24) = *(unsigned char *)(a3 + 24);
    if (*(_DWORD *)(a3 + 16) != v15) {
      goto LABEL_37;
    }
LABEL_34:
    *(_OWORD *)a3 = v21;
    *(unsigned char *)(a3 + 24) = v16;
    BOOL result = sub_45E610((uint64_t *)a2, (uint64_t *)a1, v16);
    if (result) {
      goto LABEL_40;
    }
    return result;
  }
  *(unsigned char *)(a2 + 24) = *(unsigned char *)(a3 + 24);
  *(unsigned char *)(a3 + 24) = v16;
  BOOL result = sub_45E610((uint64_t *)a2, (uint64_t *)a1, v16);
  if (result) {
    goto LABEL_40;
  }
  return result;
}

BOOL sub_F37744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_F3741C(a1, a2, a3, a4);
  BOOL result = sub_45E610((uint64_t *)a5, (uint64_t *)a4, v10);
  if (!result) {
    return result;
  }
  unsigned int v12 = *(_DWORD *)(a4 + 16);
  if (v12 <= 1) {
    long long v26 = *(_OWORD *)a4;
  }
  unint64_t v13 = *(unsigned __int8 *)(a4 + 24);
  if (a4 == a5) {
    goto LABEL_12;
  }
  unsigned int v15 = (unsigned int *)(a5 + 16);
  unsigned int v14 = *(_DWORD *)(a5 + 16);
  if (v12 != v14)
  {
    if (v14 <= 1)
    {
      *(_OWORD *)a4 = *(_OWORD *)a5;
      unsigned int v14 = *(_DWORD *)(a5 + 16);
    }
    *(_DWORD *)(a4 + 16) = v14;
LABEL_12:
    unint64_t v16 = (unsigned char *)(a5 + 24);
    *(unsigned char *)(a4 + 24) = *(unsigned char *)(a5 + 24);
    unsigned int v15 = (unsigned int *)(a5 + 16);
    if (*(_DWORD *)(a5 + 16) != v12)
    {
      if (v12 > 1)
      {
LABEL_18:
        *unsigned int v15 = v12;
LABEL_19:
        *unint64_t v16 = v13;
        BOOL result = sub_45E610((uint64_t *)a4, (uint64_t *)a3, v13);
        if (!result) {
          return result;
        }
        goto LABEL_20;
      }
LABEL_17:
      *(_OWORD *)a5 = v26;
      goto LABEL_18;
    }
    if (v12 > 1) {
      goto LABEL_19;
    }
    goto LABEL_14;
  }
  if (v12 < 2)
  {
    *(_OWORD *)a4 = *(_OWORD *)a5;
    unint64_t v16 = (unsigned char *)(a5 + 24);
    *(unsigned char *)(a4 + 24) = *(unsigned char *)(a5 + 24);
    if (*(_DWORD *)(a5 + 16) != v12) {
      goto LABEL_17;
    }
LABEL_14:
    *(_OWORD *)a5 = v26;
    *unint64_t v16 = v13;
    BOOL result = sub_45E610((uint64_t *)a4, (uint64_t *)a3, v13);
    if (!result) {
      return result;
    }
    goto LABEL_20;
  }
  *(unsigned char *)(a4 + 24) = *(unsigned char *)(a5 + 24);
  *(unsigned char *)(a5 + 24) = v13;
  BOOL result = sub_45E610((uint64_t *)a4, (uint64_t *)a3, v13);
  if (!result) {
    return result;
  }
LABEL_20:
  unsigned int v17 = *(_DWORD *)(a3 + 16);
  if (v17 <= 1) {
    long long v26 = *(_OWORD *)a3;
  }
  unint64_t v18 = *(unsigned __int8 *)(a3 + 24);
  if (a3 == a4) {
    goto LABEL_32;
  }
  unsigned int v19 = *(_DWORD *)(a4 + 16);
  if (v17 != v19)
  {
    if (v19 <= 1)
    {
      *(_OWORD *)a3 = *(_OWORD *)a4;
      unsigned int v19 = *(_DWORD *)(a4 + 16);
    }
    *(_DWORD *)(a3 + 16) = v19;
LABEL_32:
    *(unsigned char *)(a3 + 24) = *(unsigned char *)(a4 + 24);
    if (*(_DWORD *)(a4 + 16) != v17)
    {
      if (v17 > 1)
      {
LABEL_38:
        *(_DWORD *)(a4 + 16) = v17;
LABEL_39:
        *(unsigned char *)(a4 + 24) = v18;
        BOOL result = sub_45E610((uint64_t *)a3, (uint64_t *)a2, v18);
        if (!result) {
          return result;
        }
        goto LABEL_40;
      }
LABEL_37:
      *(_OWORD *)a4 = v26;
      goto LABEL_38;
    }
    if (v17 > 1) {
      goto LABEL_39;
    }
    goto LABEL_34;
  }
  if (v17 < 2)
  {
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(unsigned char *)(a3 + 24) = *(unsigned char *)(a4 + 24);
    if (*(_DWORD *)(a4 + 16) != v17) {
      goto LABEL_37;
    }
LABEL_34:
    *(_OWORD *)a4 = v26;
    *(unsigned char *)(a4 + 24) = v18;
    BOOL result = sub_45E610((uint64_t *)a3, (uint64_t *)a2, v18);
    if (!result) {
      return result;
    }
    goto LABEL_40;
  }
  *(unsigned char *)(a3 + 24) = *(unsigned char *)(a4 + 24);
  *(unsigned char *)(a4 + 24) = v18;
  BOOL result = sub_45E610((uint64_t *)a3, (uint64_t *)a2, v18);
  if (!result) {
    return result;
  }
LABEL_40:
  unsigned int v20 = *(_DWORD *)(a2 + 16);
  if (v20 <= 1) {
    long long v26 = *(_OWORD *)a2;
  }
  unint64_t v21 = *(unsigned __int8 *)(a2 + 24);
  if (a2 == a3) {
    goto LABEL_52;
  }
  unsigned int v22 = *(_DWORD *)(a3 + 16);
  if (v20 != v22)
  {
    if (v22 <= 1)
    {
      *(_OWORD *)a2 = *(_OWORD *)a3;
      unsigned int v22 = *(_DWORD *)(a3 + 16);
    }
    *(_DWORD *)(a2 + 16) = v22;
LABEL_52:
    *(unsigned char *)(a2 + 24) = *(unsigned char *)(a3 + 24);
    if (*(_DWORD *)(a3 + 16) != v20)
    {
      if (v20 > 1)
      {
LABEL_58:
        *(_DWORD *)(a3 + 16) = v20;
LABEL_59:
        *(unsigned char *)(a3 + 24) = v21;
        BOOL result = sub_45E610((uint64_t *)a2, (uint64_t *)a1, v21);
        if (!result) {
          return result;
        }
LABEL_60:
        unsigned int v23 = *(_DWORD *)(a1 + 16);
        if (v23 <= 1) {
          long long v26 = *(_OWORD *)a1;
        }
        char v24 = *(unsigned char *)(a1 + 24);
        if (a1 != a2)
        {
          unsigned int v25 = *(_DWORD *)(a2 + 16);
          if (v23 == v25)
          {
            if (v23 >= 2)
            {
              *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
              goto LABEL_79;
            }
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
            if (*(_DWORD *)(a2 + 16) != v23) {
              goto LABEL_76;
            }
            goto LABEL_74;
          }
          if (v25 <= 1)
          {
            *(_OWORD *)a1 = *(_OWORD *)a2;
            unsigned int v25 = *(_DWORD *)(a2 + 16);
          }
          *(_DWORD *)(a1 + 16) = v25;
        }
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        if (*(_DWORD *)(a2 + 16) != v23)
        {
          if (v23 > 1)
          {
LABEL_77:
            *(_DWORD *)(a2 + 16) = v23;
            goto LABEL_79;
          }
LABEL_76:
          *(_OWORD *)a2 = v26;
          goto LABEL_77;
        }
        if (v23 > 1)
        {
LABEL_79:
          *(unsigned char *)(a2 + 24) = v24;
          return result;
        }
LABEL_74:
        *(_OWORD *)a2 = v26;
        goto LABEL_79;
      }
LABEL_57:
      *(_OWORD *)a3 = v26;
      goto LABEL_58;
    }
    if (v20 > 1) {
      goto LABEL_59;
    }
    goto LABEL_54;
  }
  if (v20 < 2)
  {
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(unsigned char *)(a2 + 24) = *(unsigned char *)(a3 + 24);
    if (*(_DWORD *)(a3 + 16) != v20) {
      goto LABEL_57;
    }
LABEL_54:
    *(_OWORD *)a3 = v26;
    *(unsigned char *)(a3 + 24) = v21;
    BOOL result = sub_45E610((uint64_t *)a2, (uint64_t *)a1, v21);
    if (result) {
      goto LABEL_60;
    }
    return result;
  }
  *(unsigned char *)(a2 + 24) = *(unsigned char *)(a3 + 24);
  *(unsigned char *)(a3 + 24) = v21;
  BOOL result = sub_45E610((uint64_t *)a2, (uint64_t *)a1, v21);
  if (result) {
    goto LABEL_60;
  }
  return result;
}

BOOL sub_F37B68(BOOL result, uint64_t a2, uint64_t a3, long long *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    BOOL v6 = result;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 5)
    {
      unint64_t v9 = ((uint64_t)a4 - result) >> 4;
      uint64_t v10 = v9 + 1;
      unint64_t v11 = result + 32 * (v9 + 1);
      uint64_t v12 = v9 + 2;
      if ((uint64_t)(v9 + 2) < a3 && sub_45E610((uint64_t *)(result + 32 * (v9 + 1)), (uint64_t *)(v11 + 32), v9))
      {
        v11 += 32;
        uint64_t v10 = v12;
      }
      BOOL result = sub_45E610((uint64_t *)v11, (uint64_t *)v5, v9);
      if (!result)
      {
        unsigned int v21 = *((_DWORD *)v5 + 4);
        if (v21 <= 1) {
          long long v20 = *v5;
        }
        char v22 = *((unsigned char *)v5 + 24);
        do
        {
          unint64_t v13 = v11;
          if (v5 != (long long *)v11)
          {
            unsigned int v14 = *((_DWORD *)v5 + 4);
            unsigned int v15 = *(_DWORD *)(v11 + 16);
            if (v14 == v15)
            {
              if (v14 <= 1) {
                *uint64_t v5 = *(_OWORD *)v11;
              }
            }
            else
            {
              if (v15 <= 1)
              {
                *uint64_t v5 = *(_OWORD *)v11;
                unsigned int v15 = *(_DWORD *)(v11 + 16);
              }
              *((_DWORD *)v5 + 4) = v15;
            }
          }
          *((unsigned char *)v5 + 24) = *(unsigned char *)(v11 + 24);
          if (v7 < v10) {
            break;
          }
          unint64_t v16 = 2 * v10;
          uint64_t v17 = (2 * v10) | 1;
          unint64_t v11 = v6 + 32 * v17;
          uint64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            uint64_t v10 = v17;
          }
          else if (sub_45E610((uint64_t *)(v6 + 32 * v17), (uint64_t *)(v11 + 32), v16))
          {
            v11 += 32;
          }
          else
          {
            uint64_t v10 = v17;
          }
          BOOL result = sub_45E610((uint64_t *)v11, (uint64_t *)&v20, v16);
          uint64_t v5 = (long long *)v13;
        }
        while (!result);
        if ((long long *)v13 != &v20)
        {
          unsigned int v18 = *(_DWORD *)(v13 + 16);
          unsigned int v19 = v21;
          if (v18 == v21)
          {
            if (v18 <= 1) {
              *(_OWORD *)unint64_t v13 = v20;
            }
          }
          else
          {
            if (v21 <= 1)
            {
              *(_OWORD *)unint64_t v13 = v20;
              unsigned int v19 = v21;
            }
            *(_DWORD *)(v13 + 16) = v19;
          }
        }
        *(unsigned char *)(v13 + 24) = v22;
      }
    }
  }
  return result;
}

BOOL sub_F37D58(BOOL result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    BOOL v6 = result;
    unsigned int v7 = *(_DWORD *)(result + 16);
    if (v7 <= 1) {
      long long v24 = *(_OWORD *)result;
    }
    uint64_t v8 = 0;
    char v23 = *(unsigned char *)(result + 24);
    int64_t v9 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v10 = result;
    do
    {
      unint64_t v11 = v8;
      uint64_t v12 = v10;
      v10 += 32 * v8 + 32;
      uint64_t v13 = 2 * v8;
      uint64_t v8 = (2 * v8) | 1;
      uint64_t v14 = v13 + 2;
      if (v13 + 2 < a4)
      {
        BOOL result = sub_45E610((uint64_t *)v10, (uint64_t *)(v10 + 32), v11);
        if (result)
        {
          v10 += 32;
          uint64_t v8 = v14;
        }
      }
      if (v12 != v10)
      {
        unsigned int v15 = *(_DWORD *)(v12 + 16);
        unsigned int v16 = *(_DWORD *)(v10 + 16);
        if (v15 == v16)
        {
          if (v15 <= 1) {
            *(_OWORD *)uint64_t v12 = *(_OWORD *)v10;
          }
        }
        else
        {
          if (v16 <= 1)
          {
            *(_OWORD *)uint64_t v12 = *(_OWORD *)v10;
            unsigned int v16 = *(_DWORD *)(v10 + 16);
          }
          *(_DWORD *)(v12 + 16) = v16;
        }
      }
      *(unsigned char *)(v12 + 24) = *(unsigned char *)(v10 + 24);
    }
    while (v8 <= v9);
    uint64_t v17 = (_OWORD *)(a2 - 32);
    unsigned int v18 = *(_DWORD *)(v10 + 16);
    if (v10 != a2 - 32)
    {
      unsigned int v19 = *(_DWORD *)(a2 - 16);
      if (v18 == v19)
      {
        if (v18 <= 1) {
          *(_OWORD *)uint64_t v10 = *v17;
        }
        *(unsigned char *)(v10 + 24) = *(unsigned char *)(a2 - 8);
        uint64_t v20 = v10 + 32;
        if (*(_DWORD *)(a2 - 16) == v7)
        {
LABEL_21:
          uint64_t v21 = a3;
          if (v7 <= 1) {
            *uint64_t v17 = v24;
          }
LABEL_32:
          *(unsigned char *)(a2 - 8) = v23;
          return sub_F37FB4(v6, v20, v21, (v20 - v6) >> 5);
        }
      }
      else
      {
        if (v19 <= 1)
        {
          *(_OWORD *)uint64_t v10 = *v17;
          unsigned int v19 = *(_DWORD *)(a2 - 16);
        }
        *(_DWORD *)(v10 + 16) = v19;
        *(unsigned char *)(v10 + 24) = *(unsigned char *)(a2 - 8);
        uint64_t v20 = v10 + 32;
        if (*(_DWORD *)(a2 - 16) == v7) {
          goto LABEL_21;
        }
      }
      uint64_t v21 = a3;
      if (v7 <= 1) {
        *uint64_t v17 = v24;
      }
      *(_DWORD *)(a2 - 16) = v7;
      goto LABEL_32;
    }
    if (v18 == v7)
    {
      if (v7 <= 1) {
        *(_OWORD *)uint64_t v10 = v24;
      }
    }
    else
    {
      if (v7 <= 1) {
        *(_OWORD *)uint64_t v10 = v24;
      }
      *(_DWORD *)(v10 + 16) = v7;
    }
    *(unsigned char *)(v10 + 24) = v23;
  }
  return result;
}

BOOL sub_F37FB4(BOOL result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    BOOL v6 = result;
    unint64_t v7 = v4 >> 1;
    unint64_t v8 = result + 32 * (v4 >> 1);
    int64_t v9 = (long long *)(a2 - 32);
    BOOL result = sub_45E610((uint64_t *)v8, (uint64_t *)(a2 - 32), v4);
    if (result)
    {
      unsigned int v17 = *(_DWORD *)(a2 - 16);
      if (v17 <= 1) {
        long long v16 = *v9;
      }
      char v18 = *(unsigned char *)(a2 - 8);
      do
      {
        unint64_t v10 = v8;
        if (v9 != (long long *)v8)
        {
          unsigned int v11 = *((_DWORD *)v9 + 4);
          unsigned int v12 = *(_DWORD *)(v8 + 16);
          if (v11 == v12)
          {
            if (v11 <= 1) {
              long long *v9 = *(_OWORD *)v8;
            }
          }
          else
          {
            if (v12 <= 1)
            {
              long long *v9 = *(_OWORD *)v8;
              unsigned int v12 = *(_DWORD *)(v8 + 16);
            }
            *((_DWORD *)v9 + 4) = v12;
          }
        }
        *((unsigned char *)v9 + 24) = *(unsigned char *)(v8 + 24);
        if (!v7) {
          break;
        }
        unint64_t v13 = v7 - 1;
        unint64_t v7 = (v7 - 1) >> 1;
        unint64_t v8 = v6 + 32 * v7;
        BOOL result = sub_45E610((uint64_t *)v8, (uint64_t *)&v16, v13);
        int64_t v9 = (long long *)v10;
      }
      while (result);
      if ((long long *)v10 != &v16)
      {
        unsigned int v14 = *(_DWORD *)(v10 + 16);
        unsigned int v15 = v17;
        if (v14 == v17)
        {
          if (v14 <= 1) {
            *(_OWORD *)unint64_t v10 = v16;
          }
        }
        else
        {
          if (v17 <= 1) {
            *(_OWORD *)unint64_t v10 = v16;
          }
          *(_DWORD *)(v10 + 16) = v15;
        }
      }
      *(unsigned char *)(v10 + 24) = v18;
    }
  }
  return result;
}

uint64_t *sub_F38124(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = __ROR8__(*a2, 32);
  unint64_t v8 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) >> 33));
  unint64_t v9 = v8 ^ (v8 >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8 ^ (v8 >> 33);
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    unsigned int v12 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      unint64_t v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == HIDWORD(v6)) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v3)
            {
              goto LABEL_31;
            }
            unint64_t v13 = (uint64_t *)*v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == HIDWORD(v6)) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          unint64_t v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  unsigned int v19 = operator new(0x18uLL);
  *unsigned int v19 = 0;
  v19[1] = v9;
  v19[2] = *a3;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    char v23 = *(void **)(*(void *)a1 + 8 * v3);
    if (v23)
    {
LABEL_34:
      *unsigned int v19 = *v23;
LABEL_69:
      *char v23 = v19;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        char v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v22 = *(void *)a1;
        char v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v3 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      char v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  *unsigned int v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v19;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v19)
  {
    unint64_t v32 = *(void *)(*v19 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    char v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v19;
}

void sub_F38478(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_F3848C(void *a1, void *a2)
{
  a1[520] = sub_3750CC(a2);
  a1[521] = sub_3750CC(a2);
  a1[522] = sub_376F8C(a2);
  return a1;
}

void sub_F384E0(_Unwind_Exception *a1)
{
  unint64_t v3 = (void *)v1[517];
  if (v3)
  {
    v1[518] = v3;
    operator delete(v3);
  }
  sub_3A6318(v1 + 1);
  _Unwind_Resume(a1);
}

void sub_F38504(_Unwind_Exception *a1)
{
  sub_C62E9C(v1);
  _Unwind_Resume(a1);
}

void sub_F38518(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = -1;
  v11[0] = 0;
  v11[1] = -1;
  int v12 = 0x7FFFFFFF;
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  int v15 = 16842752;
  uint64_t v16 = 0;
  char v17 = 0;
  long long v6 = 0u;
  v5[0] = -1;
  v5[1] = 0x7FFFFFFFLL;
  v5[2] = -1;
  v5[3] = -1;
  v5[4] = 0x7FFFFFFFFFFFFFFFLL;
  DWORD2(v6) = -1935635296;
  long long v7 = 0uLL;
  *(_DWORD *)((char *)&v7 + 7) = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0x6400000000;
  sub_F38624(a1, v11, a3, (uint64_t)v5, 0, (char **)a5, 1.0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_F385E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v22 = *(void **)v20;
    if (!*(void *)v20) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v22 = *(void **)v20;
    if (!*(void *)v20) {
      goto LABEL_3;
    }
  }
  *(void *)(v20 + 8) = v22;
  operator delete(v22);
  _Unwind_Resume(exception_object);
}

void sub_F38624(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, int a5, char **a6, double a7)
{
  int v36 = 0;
  char v39 = 0;
  char v41 = 1;
  char v45 = 0;
  double v40 = a7;
  uint64_t v37 = *a2;
  double v38 = *(double *)(a4 + 56) * 3.6;
  __int16 v46 = *(_WORD *)(a4 + 48);
  char v49 = *(unsigned char *)(a4 + 64);
  int v42 = a5;
  int v43 = a5;
  uint64_t v44 = v37;
  char v47 = *((unsigned char *)a2 + 56);
  BOOL v48 = a3 == 5;
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v11 = *(void *)(a1 + 4168);
  unint64_t v12 = a2[4];
  if (*(unsigned char *)(v11 + 7774))
  {
    uint64_t v13 = sub_290DEC(v11 + 3896, v12, 1);
    if (!v13) {
      return;
    }
    uint64_t v14 = &v13[-*(int *)v13];
    if (*(unsigned __int16 *)v14 < 5u) {
      return;
    }
    uint64_t v15 = *((unsigned __int16 *)v14 + 2);
    if (!v15
      || *(_DWORD *)&v13[v15 + *(unsigned int *)&v13[v15]] <= HIDWORD(v12)
      || !sub_295DB4(v11, v12))
    {
      return;
    }
    unint64_t v12 = a2[4];
  }
  sub_ED83E8(a1, v12, &v33);
  uint64_t v16 = v33;
  char v17 = v34;
  if (v33 != v34)
  {
    do
    {
      unint64_t v18 = *v16;
      unsigned int v19 = (int *)sub_2D5D58(*(void *)(a1 + 4168), *((unsigned int *)a2 + 8) | ((unint64_t)*((unsigned __int16 *)a2 + 18) << 32));
      uint64_t v20 = (unsigned __int16 *)((char *)v19 - *v19);
      if (*v20 >= 9u && (uint64_t v21 = v20[4]) != 0)
      {
        unsigned int v22 = 0;
        uint64_t v23 = a2[3];
        if (v23 != 0x7FFFFFFFFFFFFFFFLL)
        {
          unsigned int v24 = *(int *)((char *)v19 + v21);
          if (v24)
          {
            double v25 = (double)v23 / (double)v24;
            double v26 = 1000000000.0;
            if (v25 <= 1.0) {
              double v26 = v25 * 1000000000.0;
            }
            if (v25 >= 0.0) {
              double v27 = v26;
            }
            else {
              double v27 = 0.0;
            }
            unsigned int v22 = vcvtad_u64_f64(v27);
          }
        }
      }
      else
      {
        unsigned int v22 = 0;
      }
      if ((v18 & 2) != 0) {
        int v28 = v22;
      }
      else {
        int v28 = 1000000000 - v22;
      }
      __int16 v30 = *((_WORD *)a2 + 21);
      __int16 v29 = *((_WORD *)a2 + 20);
      sub_F388B8(a1, v18, (uint64_t)&v36, v28, &v30, &v29, (uint64_t)v31);
      if (a3 != 2 || !v32)
      {
        unint64_t v50 = v18;
        sub_BF6964(a6, &v50, v31);
      }
      ++v16;
    }
    while (v16 != v17);
    uint64_t v16 = v33;
  }
  if (v16)
  {
    unint64_t v34 = v16;
    operator delete(v16);
  }
}

void sub_F38894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_F388B8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, unsigned char *a5@<X4>, unsigned char *a6@<X5>, uint64_t a7@<X8>)
{
  char v8 = a2;
  long long v11 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a7 = *(_OWORD *)a3;
  *(_OWORD *)(a7 + 16) = v11;
  long long v12 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a7 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a7 + 48) = v12;
  *(void *)(a7 + 64) = *(void *)(a3 + 64);
  *(_DWORD *)a7 = a4;
  if (a5[1])
  {
    BOOL v13 = ((a2 >> 1) & 1) != *a5;
    *(unsigned char *)(a7 + 24) = v13;
    uint64_t v14 = (BOOL *)(a7 + 24);
    unint64_t v15 = HIDWORD(a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(a2) << 32);
    uint64_t v16 = (int *)sub_2D5D58(*(void *)(a1 + 4168), v15);
    char v17 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v17 >= 0xBu)
    {
      uint64_t v18 = v17[5];
      if (v18)
      {
        if ((*((unsigned char *)v16 + v18 + 1) & 0x80) != 0) {
          *uint64_t v14 = !v13;
        }
      }
    }
  }
  else
  {
    *(unsigned char *)(a7 + 24) = 0;
    uint64_t v14 = (BOOL *)(a7 + 24);
    unint64_t v15 = HIDWORD(a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(a2) << 32);
  }
  BOOL result = (int *)sub_2D5D58(*(void *)(a1 + 4168), v15);
  uint64_t v20 = (unsigned __int16 *)((char *)result - *result);
  if (*v20 >= 0x2Fu)
  {
    uint64_t v21 = v20[23];
    if (v21)
    {
      unsigned int v22 = *((unsigned __int8 *)result + v21);
      BOOL v23 = v22 > 0x2D;
      uint64_t v24 = (1 << v22) & 0x208040000000;
      if (!v23 && v24 != 0) {
        *uint64_t v14 = 0;
      }
    }
  }
  char v26 = a6[1];
  if (v26) {
    char v26 = ((v8 & 2) == 0) ^ (*a6 != 0);
  }
  *(unsigned char *)(a7 + 64) = v26;
  return result;
}

void *sub_F38A0C(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0x1C0E070381C0E1) {
      sub_2E00();
    }
    long long v6 = (char *)operator new(2336 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    uint64_t v8 = 2336 * a3;
    a1[2] = &v6[v8];
    do
    {
      sub_F2EDB4((uint64_t)&v6[v7], a2 + v7);
      v7 += 2336;
    }
    while (v8 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_F38AC0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = *v1;
    if ((void *)v4 != v3)
    {
      do
        uint64_t v4 = sub_F2CA5C(v4 - 2336);
      while ((void *)v4 != v3);
      uint64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_F38B28()
{
  unk_25FCD87 = 16641;
  word_25FCD70 = 65;
  byte_25FCD9F = 1;
  byte_25FCD89 = 0;
}

uint64_t sub_F38B50(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)a2 == *(void *)(a2 + 8)) {
    return 1;
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "run_if_all_paths_have");
  uint64_t v8 = sub_58070(a1, (uint64_t)__p);
  uint64_t v9 = v8;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (v9) {
      goto LABEL_4;
    }
    return 1;
  }
  if (!v8) {
    return 1;
  }
LABEL_4:
  int v65 = 0;
  __int16 v64 = 0;
  memset(v63, 0, sizeof(v63));
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "run_if_all_paths_have");
  uint64_t v10 = sub_58070(a1, (uint64_t)__p);
  if (v10 && *((_DWORD *)v10 + 12) == 3)
  {
    long long v11 = (void *)v10[5];
    if (SHIBYTE(__p[2]) < 0)
    {
LABEL_13:
      operator delete(__p[0]);
      long long v12 = (_DWORD *)*v11;
      BOOL v13 = (_DWORD *)v11[1];
      if ((_DWORD *)*v11 == v13)
      {
LABEL_163:
        double v58 = 0.0;
        goto LABEL_168;
      }
      goto LABEL_14;
    }
  }
  else
  {
    long long v11 = v63;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_13;
    }
  }
  long long v12 = (_DWORD *)*v11;
  BOOL v13 = (_DWORD *)v11[1];
  if ((_DWORD *)*v11 == v13) {
    goto LABEL_163;
  }
LABEL_14:
  uint64_t v55 = a4;
  int v15 = 0;
  int v16 = 0;
  do
  {
    if (v12[2])
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    uint64_t v17 = *(void *)v12;
    if ((*(char *)(*(void *)v12 + 23) & 0x80000000) == 0)
    {
      int v18 = *(unsigned __int8 *)(*(void *)v12 + 23);
      unsigned int v19 = *(uint64_t **)v12;
      switch(*(unsigned char *)(*(void *)v12 + 23))
      {
        case 5:
          if (*(_DWORD *)v17 == 1819045748 && *(unsigned char *)(v17 + 4) == 115) {
            goto LABEL_85;
          }
          goto LABEL_133;
        case 7:
          if (*(_DWORD *)v17 == 1920099686 && *(_DWORD *)(v17 + 3) == 1936025970) {
            goto LABEL_15;
          }
          if (v18 != 5) {
            goto LABEL_140;
          }
LABEL_133:
          if (*(_DWORD *)v17 != 1685221222 || *(unsigned char *)(v17 + 4) != 115) {
            goto LABEL_140;
          }
          goto LABEL_138;
        case 8:
          if (*(void *)v17 != 0x7379617768676968) {
            goto LABEL_140;
          }
          goto LABEL_150;
        case 0xE:
          goto LABEL_116;
        case 0x10:
          goto LABEL_122;
        case 0x13:
          goto LABEL_107;
        case 0x15:
LABEL_97:
          if (*(void *)v17 == 0x6E6F635F6C6C6F74
            && *(void *)(v17 + 8) == 0x5F6E6F6974736567
            && *(void *)(v17 + 13) == 0x73656E6F7A5F6E6FLL)
          {
            goto LABEL_152;
          }
          if (v18 == 14) {
            goto LABEL_116;
          }
          unsigned int v19 = *(uint64_t **)v12;
          if (v18 == 16) {
            goto LABEL_122;
          }
          if (v18 != 19) {
            goto LABEL_140;
          }
LABEL_107:
          if (*(void *)v17 == 0x756F7265676E6164
            && *(void *)(v17 + 8) == 0x6E65757165735F73
            && *(void *)(v17 + 11) == 0x7365636E65757165)
          {
            goto LABEL_153;
          }
          unsigned int v19 = *(uint64_t **)v12;
          if (v18 == 16) {
            goto LABEL_122;
          }
          if (v18 != 14) {
            goto LABEL_140;
          }
LABEL_116:
          if (*(void *)v17 != 0x636E695F61657261 || *(void *)(v17 + 6) != 0x73746E656469636ELL) {
            goto LABEL_140;
          }
          goto LABEL_121;
        case 0x1E:
          if (*(void *)v17 != 0x6D6E6F7269766E65
            || *(void *)(v17 + 8) != 0x6F635F6C61746E65
            || *(void *)(v17 + 16) != 0x6E6F69747365676ELL
            || *(void *)(v17 + 22) != 0x73656E6F7A5F6E6FLL)
          {
            unsigned int v19 = *(uint64_t **)v12;
            switch(*(unsigned char *)(*(void *)v12 + 23))
            {
              case 0xE:
                goto LABEL_116;
              case 0x10:
                goto LABEL_122;
              case 0x13:
                goto LABEL_107;
              case 0x15:
                goto LABEL_97;
              default:
                goto LABEL_140;
            }
          }
          goto LABEL_151;
        default:
          goto LABEL_140;
      }
    }
    uint64_t v21 = *(void *)(v17 + 8);
    if (v21 == 5 && **(_DWORD **)v17 == 1819045748 && *(unsigned char *)(*(void *)v17 + 4) == 115)
    {
LABEL_85:
      v16 |= 1u;
      goto LABEL_16;
    }
    if (v21 == 7)
    {
      if (**(_DWORD **)v17 == 1920099686 && *(_DWORD *)(*(void *)v17 + 3) == 1936025970)
      {
LABEL_15:
        v16 |= 4u;
LABEL_16:
        int v65 = v16;
        goto LABEL_17;
      }
      uint64_t v21 = *(void *)(v17 + 8);
    }
    if (v21 == 5)
    {
      if (**(_DWORD **)v17 == 1685221222 && *(unsigned char *)(*(void *)v17 + 4) == 115)
      {
LABEL_138:
        v16 |= 0x400000u;
        goto LABEL_16;
      }
      uint64_t v21 = *(void *)(v17 + 8);
    }
    if (v21 == 8)
    {
      if (**(void **)v17 == 0x7379617768676968)
      {
LABEL_150:
        v16 |= 2u;
        goto LABEL_16;
      }
      uint64_t v21 = *(void *)(v17 + 8);
    }
    if (v21 == 30)
    {
      if (**(void **)v17 == 0x6D6E6F7269766E65
        && *(void *)(*(void *)v17 + 8) == 0x6F635F6C61746E65
        && *(void *)(*(void *)v17 + 16) == 0x6E6F69747365676ELL
        && *(void *)(*(void *)v17 + 22) == 0x73656E6F7A5F6E6FLL)
      {
LABEL_151:
        v16 |= 0x10000u;
        goto LABEL_16;
      }
      uint64_t v21 = *(void *)(v17 + 8);
    }
    if (v21 == 21)
    {
      if (**(void **)v17 == 0x6E6F635F6C6C6F74
        && *(void *)(*(void *)v17 + 8) == 0x5F6E6F6974736567
        && *(void *)(*(void *)v17 + 13) == 0x73656E6F7A5F6E6FLL)
      {
LABEL_152:
        v16 |= 0x20000u;
        goto LABEL_16;
      }
      uint64_t v21 = *(void *)(v17 + 8);
    }
    if (v21 == 19)
    {
      if (**(void **)v17 == 0x756F7265676E6164
        && *(void *)(*(void *)v17 + 8) == 0x6E65757165735F73
        && *(void *)(*(void *)v17 + 11) == 0x7365636E65757165)
      {
LABEL_153:
        v16 |= 0x100000u;
        goto LABEL_16;
      }
      uint64_t v21 = *(void *)(v17 + 8);
    }
    if (v21 == 14)
    {
      if (**(void **)v17 == 0x636E695F61657261 && *(void *)(*(void *)v17 + 6) == 0x73746E656469636ELL)
      {
LABEL_121:
        HIBYTE(v64) = *(unsigned char *)(a3 + 3);
        goto LABEL_17;
      }
      uint64_t v21 = *(void *)(v17 + 8);
    }
    if (v21 != 16) {
      goto LABEL_140;
    }
    unsigned int v19 = *(uint64_t **)v17;
LABEL_122:
    uint64_t v41 = *v19;
    uint64_t v42 = v19[1];
    if (v41 == 0x74616964656D6D69 && v42 == 0x6E7275745F755F65)
    {
      int v15 = 1;
      LOBYTE(v64) = 1;
    }
    else
    {
LABEL_140:
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)__p);
        __int16 v46 = sub_188FC78(__p, (uint64_t)"Unknown condition for running path finding algorithm: ", 54);
        int v47 = *(char *)(v17 + 23);
        if (v47 >= 0) {
          uint64_t v48 = v17;
        }
        else {
          uint64_t v48 = *(void *)v17;
        }
        if (v47 >= 0) {
          uint64_t v49 = *(unsigned __int8 *)(v17 + 23);
        }
        else {
          uint64_t v49 = *(void *)(v17 + 8);
        }
        sub_188FC78(v46, v48, v49);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v59, 1u);
        if (SHIBYTE(v61) < 0) {
          operator delete(v59);
        }
        sub_111ECAC((uint64_t)__p);
      }
    }
LABEL_17:
    v12 += 4;
  }
  while (v12 != v13);
  if (!v15) {
    goto LABEL_163;
  }
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "DrivingPathFinding");
  long long v59 = 0;
  long long v60 = 0;
  uint64_t v61 = 0;
  unint64_t v50 = sub_374CDC(v55, (uint64_t)__p, (uint64_t *)&v59);
  long long v56 = operator new(0x28uLL);
  long long v57 = xmmword_20B8FD0;
  strcpy((char *)v56, "immediate_u_turn_speed_threshold_kph");
  double v58 = sub_5D138(v50, &v56);
  if (SHIBYTE(v57) < 0) {
    operator delete(v56);
  }
  uint64_t v51 = (void **)v59;
  if (v59)
  {
    long long v52 = v60;
    if (v60 == v59)
    {
      long long v60 = (void **)v59;
      long long v53 = v59;
    }
    else
    {
      do
      {
        if (*((char *)v52 - 1) < 0) {
          operator delete(*(v52 - 3));
        }
        v52 -= 3;
      }
      while (v52 != v51);
      long long v53 = v59;
      long long v60 = v51;
    }
    operator delete(v53);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
LABEL_168:
  __p[0] = &v65;
  __p[1] = (char *)&v64 + 1;
  __p[2] = &v64;
  __p[3] = &v58;
  return sub_F39490((uint64_t **)a2, (uint64_t)__p);
}

void sub_F3935C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_1A668(&a19);
  if (a30 < 0) {
    operator delete(a25);
  }
  sub_55758((uint64_t **)(v30 - 120));
  _Unwind_Resume(a1);
}

uint64_t sub_F39490(uint64_t **a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  if (*a1 == v3) {
    return 1;
  }
  uint64_t v4 = *(_DWORD **)a2;
  uint64_t v5 = *(unsigned char **)(a2 + 8);
  long long v6 = *(unsigned char **)(a2 + 16);
  uint64_t v7 = *(double **)(a2 + 24);
  while (1)
  {
    if ((*v4 & sub_EA83B0(v2)) == 0 && (!*v5 || (sub_EA82B8(v2) & 0x100000000000000) == 0))
    {
      if (!*v6 || !*(unsigned char *)(sub_EA841C(v2) + 64)) {
        break;
      }
      uint64_t v8 = sub_EA841C(v2);
      uint64_t result = 0;
      double v10 = *(double *)(v8 + 16);
      BOOL v13 = *(uint64_t *)&v10 > -1 && ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
         || (unint64_t)(*(void *)&v10 - 1) < 0xFFFFFFFFFFFFFLL
         || (*(void *)&v10 & 0x7FFFFFFFFFFFFFFFLL) == 0;
      if (!v13 || v10 <= 0.0) {
        return result;
      }
      if (*(double *)(sub_EA841C(v2) + 16) <= *v7) {
        break;
      }
    }
    v2 += 6;
    if (v2 == v3) {
      return 1;
    }
  }
  return 0;
}

double sub_F395A4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 5)) {
    BOOL v2 = *(unsigned char *)(a1 + 6) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (*(unsigned char *)(a1 + 5))
    {
      if (byte_25FCDFF < 0)
      {
        sub_4200((unsigned char *)a2, (void *)xmmword_25FCDE8, *((unint64_t *)&xmmword_25FCDE8 + 1));
      }
      else
      {
        double result = *(double *)&xmmword_25FCDE8;
        *(_OWORD *)a2 = xmmword_25FCDE8;
        *(void *)(a2 + 16) = unk_25FCDF8;
      }
    }
    else if (*(unsigned char *)(a1 + 6))
    {
      if (byte_25FCE17 < 0)
      {
        sub_4200((unsigned char *)a2, (void *)xmmword_25FCE00, *((unint64_t *)&xmmword_25FCE00 + 1));
      }
      else
      {
        double result = *(double *)&xmmword_25FCE00;
        *(_OWORD *)a2 = xmmword_25FCE00;
        *(void *)(a2 + 16) = unk_25FCE10;
      }
    }
    else if (byte_25FCE2F < 0)
    {
      sub_4200((unsigned char *)a2, (void *)xmmword_25FCE18, *((unint64_t *)&xmmword_25FCE18 + 1));
    }
    else
    {
      double result = *(double *)&xmmword_25FCE18;
      *(_OWORD *)a2 = xmmword_25FCE18;
      *(void *)(a2 + 16) = unk_25FCE28;
    }
  }
  else if (byte_25FCDE7 < 0)
  {
    sub_4200((unsigned char *)a2, (void *)xmmword_25FCDD0, *((unint64_t *)&xmmword_25FCDD0 + 1));
  }
  else
  {
    double result = *(double *)&xmmword_25FCDD0;
    *(_OWORD *)a2 = xmmword_25FCDD0;
    *(void *)(a2 + 16) = unk_25FCDE0;
  }
  return result;
}

unsigned char *sub_F396B0@<X0>(unsigned char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)result;
  if (*(void *)result) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = (result[10] | result[8]) == 0;
  }
  if (v3 && result[9] == 0) {
    goto LABEL_21;
  }
  if (BYTE5(v2)) {
    BOOL v5 = BYTE6(v2) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (byte_25FCDE7 < 0) {
      return sub_4200((unsigned char *)a2, (void *)xmmword_25FCDD0, *((unint64_t *)&xmmword_25FCDD0 + 1));
    }
    *(_OWORD *)a2 = xmmword_25FCDD0;
    *(void *)(a2 + 16) = unk_25FCDE0;
    return result;
  }
  if (BYTE5(v2))
  {
    if (byte_25FCDFF < 0) {
      return sub_4200((unsigned char *)a2, (void *)xmmword_25FCDE8, *((unint64_t *)&xmmword_25FCDE8 + 1));
    }
    *(_OWORD *)a2 = xmmword_25FCDE8;
    *(void *)(a2 + 16) = unk_25FCDF8;
    return result;
  }
  if (!BYTE6(v2))
  {
LABEL_21:
    if (byte_25FCE2F < 0)
    {
      return sub_4200((unsigned char *)a2, (void *)xmmword_25FCE18, *((unint64_t *)&xmmword_25FCE18 + 1));
    }
    else
    {
      *(_OWORD *)a2 = xmmword_25FCE18;
      *(void *)(a2 + 16) = unk_25FCE28;
    }
  }
  else if (byte_25FCE17 < 0)
  {
    return sub_4200((unsigned char *)a2, (void *)xmmword_25FCE00, *((unint64_t *)&xmmword_25FCE00 + 1));
  }
  else
  {
    *(_OWORD *)a2 = xmmword_25FCE00;
    *(void *)(a2 + 16) = unk_25FCE10;
  }
  return result;
}

uint64_t sub_F397F4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (sub_F06620(a1, *(_DWORD *)a2)
    && *(unsigned char *)(a2 + 176) == 0
    && *(unsigned char *)(a2 + 177) == 0
    && *(_DWORD *)(a2 + 1120) == 0
    && *(_DWORD *)(a2 + 1124) == 0)
  {
    BOOL v9 = *(void *)(a2 + 1128) == 0;
    if (a3 == -1) {
      return 0;
    }
  }
  else
  {
    BOOL v9 = 0;
    if (a3 == -1) {
      return 0;
    }
  }
  if (v9) {
    return 0;
  }
  double v10 = sub_69510();
  if ((sub_6913C((uint64_t)v10) & 1) == 0)
  {
    unsigned int v11 = atomic_load((unsigned int *)sub_F72FEC());
    if (v11 < a3) {
      return 0;
    }
  }
  return 1;
}

char *sub_F398A0()
{
  unk_25FCDB7 = 16641;
  word_25FCDA0 = 65;
  byte_25FCDCF = 1;
  byte_25FCDB9 = 0;
  double result = (char *)operator new(0x19uLL);
  *(void *)&xmmword_25FCDD0 = result;
  *(long long *)((char *)&xmmword_25FCDD0 + 8) = xmmword_20B9250;
  strcpy(result, "avoid_toll_and_highways");
  strcpy(&byte_25FCDFF, "\navoid_highways");
  strcpy((char *)&xmmword_25FCDE8, "avoid_toll");
  byte_25FCE17 = 14;
  byte_25FCE2F = 8;
  strcpy((char *)&xmmword_25FCE18, "standard");
  return result;
}

void sub_F3997C(void *a1, void *a2, uint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = sub_376B90(a2);
  a1[3] = sub_3750CC(a2);
  a1[4] = sub_3766F8(a2);
  a1[5] = sub_374D14(a2);
  operator new();
}

void sub_F3A498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_1A668(&a16);
    if (a27 < 0)
    {
LABEL_5:
      operator delete(a22);
      if (a33 < 0)
      {
LABEL_8:
        operator delete(a28);
        sub_328138(v35);
        uint64_t v37 = (void *)v33[22];
        if (!v37) {
          goto LABEL_12;
        }
LABEL_11:
        v33[23] = (uint64_t)v37;
        operator delete(v37);
LABEL_12:
        uint64_t v38 = v33[9];
        v33[9] = 0;
        if (v38) {
          operator delete();
        }
        sub_F3A968(v34);
        uint64_t v39 = v33[7];
        v33[7] = 0;
        if (!v39)
        {
          sub_F3A9C0(v33 + 6);
          _Unwind_Resume(a1);
        }
        operator delete();
      }
LABEL_10:
      sub_328138(v35);
      uint64_t v37 = (void *)v33[22];
      if (!v37) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  else
  {
    sub_1A668(&a16);
    if (a27 < 0) {
      goto LABEL_5;
    }
  }
  if (a33 < 0) {
    goto LABEL_8;
  }
  goto LABEL_10;
}

void sub_F3A7CC(uint64_t a1, void *a2)
{
  char v5 = 6;
  strcpy(__p, "enable");
  *(unsigned char *)a1 = sub_29D62C(a2, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(*(void **)__p);
  }
  char v5 = 5;
  strcpy(__p, "ratio");
  *(double *)(a1 + 8) = sub_5C7E8(a2, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(*(void **)__p);
  }
  char v5 = 4;
  strcpy(__p, "diff");
  *(double *)(a1 + 16) = sub_5C7E8(a2, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(*(void **)__p);
  }
  char v5 = 8;
  strcpy(__p, "length_m");
  *(void *)(a1 + 24) = sub_5CDE0(a2, __p);
  if (v5 < 0) {
    operator delete(*(void **)__p);
  }
  char v5 = 17;
  strcpy(__p, "min_head_length_m");
  *(void *)(a1 + 32) = sub_5CDE0(a2, __p);
  if (v5 < 0) {
    operator delete(*(void **)__p);
  }
}

void sub_F3A93C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_F3A968(uint64_t *result)
{
  uint64_t v1 = *result;
  *double result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 119) < 0) {
      operator delete(*(void **)(v1 + 96));
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_F3A9C0(uint64_t *result)
{
  uint64_t v1 = *result;
  *double result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 63) < 0) {
      operator delete(*(void **)(v1 + 40));
    }
    operator delete();
  }
  return result;
}

void sub_F3AA18(void *a1, void *a2, uint64_t a3)
{
}

void *sub_F3AA20(void *a1)
{
  sub_328138((uint64_t)(a1 + 92));
  uint64_t v2 = (void *)a1[22];
  if (v2)
  {
    a1[23] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[9];
  a1[9] = 0;
  if (v3) {
    operator delete();
  }
  uint64_t v4 = a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(char *)(v4 + 119) < 0) {
      operator delete(*(void **)(v4 + 96));
    }
    operator delete();
  }
  uint64_t v5 = a1[7];
  a1[7] = 0;
  if (v5) {
    operator delete();
  }
  uint64_t v6 = a1[6];
  a1[6] = 0;
  if (v6)
  {
    if (*(char *)(v6 + 63) < 0) {
      operator delete(*(void **)(v6 + 40));
    }
    operator delete();
  }
  return a1;
}

void sub_F3AB08(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = (uint64_t)a5;
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (!sub_45FB38(a2))
  {
    unsigned int v7 = sub_EB6EB0(a2);
    sub_D058A8(v6, v7);
    unsigned int v8 = sub_EB6EB0(a2);
    if (v8)
    {
      uint64_t v78 = 0;
      uint64_t v74 = v8;
      uint64_t v82 = v6;
      do
      {
        uint64_t v9 = *(void *)nullsub_1(a2);
        uint64_t v10 = *a3;
        unsigned int v11 = (void *)(*a4 + 48 * v78);
        BOOL v81 = sub_47E138(v11);
        memset(v91, 0, 32);
        *(_OWORD *)__p = 0u;
        v91[32] = 1;
        *(_DWORD *)&v91[33] = 0;
        v91[37] = 1;
        *(_DWORD *)&v91[38] = 0;
        *(_DWORD *)&v91[41] = 0;
        *(void *)unint64_t v92 = 0;
        *(void *)&v92[8] = 0;
        *(void *)&v91[48] = 0;
        *(_DWORD *)&v92[16] = -1;
        v92[20] = 0;
        uint64_t v94 = 0;
        long long v93 = 0uLL;
        long long v12 = (char **)nullsub_1(__p);
        BOOL v13 = (void *)(v9 + 48 * v78);
        unint64_t v14 = sub_EA8440(v13);
        sub_F3B7CC(v12, v14);
        int v15 = (void *)nullsub_1(v13);
        uint64_t v16 = v15[1] - *v15;
        if (v16)
        {
          uint64_t v17 = 0;
          unint64_t v79 = 0xCBEEA4E1A08AD8F3 * (v16 >> 3);
          long long v80 = (void *)(v10 + 24 * v78);
          while (1)
          {
            int v18 = (void *)sub_EA8060(v13, v17);
            sub_3B1F44((uint64_t)v95, (uint64_t *)(*v80 + 288 * v17));
            if (sub_47E138(v11))
            {
              *(void *)&double v19 = sub_46DD68((uint64_t)v11, &v84).n128_u64[0];
              unint64_t v20 = v84.n128_u64[0];
              unint64_t v21 = v84.n128_u64[0] + 56 * v17;
              uint64_t v22 = *(void *)v21;
              DWORD2(v85) = *(_DWORD *)(v21 + 8);
              *(void *)&long long v85 = v22;
              uint64_t v87 = 0;
              unint64_t v88 = 0;
              long long v86 = 0;
              uint64_t v24 = *(unsigned char **)(v21 + 16);
              BOOL v23 = *(unsigned char **)(v21 + 24);
              int64_t v25 = v23 - v24;
              if (v23 != v24)
              {
                if (0xAAAAAAAAAAAAAAABLL * (v25 >> 2) >= 0x1555555555555556) {
                  sub_2E00();
                }
                char v26 = (char *)operator new(v25);
                double v27 = &v26[4 * (v25 >> 2)];
                long long v86 = v26;
                unint64_t v88 = v27;
                memcpy(v26, v24, v25);
                uint64_t v87 = v27;
              }
              unint64_t v28 = v20 + 56 * v17;
              uint64_t v29 = *(void *)(v28 + 40);
              DWORD2(v89) = *(_DWORD *)(v28 + 48);
              *(void *)&long long v89 = v29;
              uint64_t v6 = v82;
            }
            else
            {
              double v19 = 0.0;
              long long v89 = 0u;
              HIDWORD(v85) = 0;
              LODWORD(v85) = 0x7FFFFFFF;
              *(void *)((char *)&v85 + 4) = 0x7FFFFFFF7FFFFFFFLL;
              uint64_t v87 = 0;
              unint64_t v88 = 0;
              long long v86 = 0;
              *(void *)&long long v89 = 0x8000000080000000;
              DWORD2(v89) = 0x7FFFFFFF;
            }
            sub_F1F7C0(*(int **)(a1 + 72), v18, (uint64_t)v83, v19);
            sub_46DB54((uint64_t)v116, v18, (uint64_t *)v95, (uint64_t *)&v85, (uint64_t)v83);
            if (v83[0])
            {
              v83[1] = v83[0];
              operator delete(v83[0]);
            }
            if (v86)
            {
              uint64_t v87 = v86;
              operator delete(v86);
            }
            if (v114)
            {
              uint64_t v115 = v114;
              operator delete(v114);
            }
            if (v112)
            {
              v113 = v112;
              operator delete(v112);
            }
            if (v110)
            {
              int v111 = v110;
              operator delete(v110);
            }
            if (v108)
            {
              uint64_t v109 = v108;
              operator delete(v108);
            }
            if (v106)
            {
              v107 = v106;
              operator delete(v106);
            }
            if (v104)
            {
              *(void *)&long long v105 = v104;
              operator delete(v104);
            }
            if ((void)v102)
            {
              *((void *)&v102 + 1) = v102;
              operator delete((void *)v102);
            }
            if (v100[0])
            {
              v100[1] = v100[0];
              operator delete(v100[0]);
            }
            if ((void)v98)
            {
              *((void *)&v98 + 1) = v98;
              operator delete((void *)v98);
            }
            if (v96[0])
            {
              v96[1] = v96[0];
              operator delete(v96[0]);
            }
            if (!v81) {
              goto LABEL_59;
            }
            sub_47E15C(v11, v17, (uint64_t)v95);
            uint64_t v30 = sub_374DF4((uint64_t)v116);
            long long v31 = *(_OWORD *)v95;
            long long v32 = *(_OWORD *)v96;
            *(void *)(v30 + 32) = v97;
            *(_OWORD *)uint64_t v30 = v31;
            *(_OWORD *)(v30 + 16) = v32;
            uint64_t v33 = *(void **)(v30 + 40);
            if (v33)
            {
              *(void *)(v30 + 48) = v33;
              operator delete(v33);
              *(void *)(v30 + 40) = 0;
              *(void *)(v30 + 48) = 0;
              *(void *)(v30 + 56) = 0;
            }
            unint64_t v34 = *(void **)(v30 + 64);
            *(_OWORD *)(v30 + 40) = v98;
            *(void *)(v30 + 56) = v99;
            long long v98 = 0uLL;
            uint64_t v99 = 0;
            if (v34)
            {
              *(void *)(v30 + 72) = v34;
              operator delete(v34);
              *(void *)(v30 + 64) = 0;
              *(void *)(v30 + 72) = 0;
              *(void *)(v30 + 80) = 0;
            }
            *(_OWORD *)(v30 + 64) = *(_OWORD *)v100;
            *(void *)(v30 + 80) = v101;
            v100[0] = 0;
            v100[1] = 0;
            uint64_t v101 = 0;
            *(_OWORD *)(v30 + 88) = v102;
            if ((void **)v30 == v95) {
              goto LABEL_47;
            }
            unsigned int v35 = *(_DWORD *)(v30 + 112);
            int v36 = (int)v104;
            if (v35 == v104) {
              break;
            }
            if (v104 == 1)
            {
              *(void *)(v30 + 104) = v103;
              int v36 = (int)v104;
            }
            else if (!v104)
            {
              *(void *)(v30 + 104) = v103;
            }
            *(_DWORD *)(v30 + 112) = v36;
            *(_OWORD *)(v30 + 120) = v105;
            uint64_t v37 = (void *)v98;
            if ((void)v98) {
              goto LABEL_48;
            }
LABEL_49:
            sub_47E170(v11, v17, (uint64_t)v95);
            uint64_t v38 = sub_46CAAC((uint64_t)v116);
            long long v39 = *(_OWORD *)v95;
            long long v40 = *(_OWORD *)v96;
            *(void *)(v38 + 32) = v97;
            *(_OWORD *)uint64_t v38 = v39;
            *(_OWORD *)(v38 + 16) = v40;
            uint64_t v41 = *(void **)(v38 + 40);
            if (v41)
            {
              *(void *)(v38 + 48) = v41;
              operator delete(v41);
              *(void *)(v38 + 40) = 0;
              *(void *)(v38 + 48) = 0;
              *(void *)(v38 + 56) = 0;
            }
            uint64_t v42 = *(void **)(v38 + 64);
            *(_OWORD *)(v38 + 40) = v98;
            *(void *)(v38 + 56) = v99;
            long long v98 = 0uLL;
            uint64_t v99 = 0;
            if (v42)
            {
              *(void *)(v38 + 72) = v42;
              operator delete(v42);
              *(void *)(v38 + 64) = 0;
              *(void *)(v38 + 72) = 0;
              *(void *)(v38 + 80) = 0;
            }
            *(_OWORD *)(v38 + 64) = *(_OWORD *)v100;
            *(void *)(v38 + 80) = v101;
            v100[0] = 0;
            v100[1] = 0;
            uint64_t v101 = 0;
            *(_OWORD *)(v38 + 88) = v102;
            uint64_t v6 = v82;
            if ((void **)v38 != v95)
            {
              unsigned int v43 = *(_DWORD *)(v38 + 112);
              int v44 = (int)v104;
              if (v43 != v104)
              {
                if (v104 == 1)
                {
                  *(void *)(v38 + 104) = v103;
                  int v44 = (int)v104;
                }
                else if (!v104)
                {
                  *(void *)(v38 + 104) = v103;
                }
                *(_DWORD *)(v38 + 112) = v44;
                *(_OWORD *)(v38 + 120) = v105;
                char v45 = (void *)v98;
                if (!(void)v98) {
                  goto LABEL_59;
                }
LABEL_58:
                *((void *)&v98 + 1) = v45;
                operator delete(v45);
                goto LABEL_59;
              }
              if (v43 <= 1) {
                *(void *)(v38 + 104) = v103;
              }
            }
            *(_OWORD *)(v38 + 120) = v105;
            char v45 = (void *)v98;
            if ((void)v98) {
              goto LABEL_58;
            }
LABEL_59:
            if (*(unsigned char *)(a1 + 1802))
            {
              sub_1083110((uint64_t)v95, *(void **)a1);
              sub_1082CF4((uint64_t)v95, v116, (uint64_t)&v85);
              sub_F3CA34(a1, (uint64_t)v116, v85, *((uint64_t *)&v85 + 1));
              if ((void)v85)
              {
                *((void *)&v85 + 1) = v85;
                operator delete((void *)v85);
              }
              if ((void)v98)
              {
                *((void *)&v98 + 1) = v98;
                operator delete((void *)v98);
              }
            }
            else
            {
              uint64_t v46 = sub_3C80F8((uint64_t)v116);
              uint64_t v47 = sub_3FA3A8((uint64_t)v116);
              sub_F3CA34(a1, (uint64_t)v116, v46, v47);
            }
            sub_F3B8EC();
            char v48 = v17 == sub_EA8440(v13) - 1;
            sub_F3C37C((uint64_t *)a1, (uint64_t)v116, v48);
            sub_108CF78(a1 + 80, (uint64_t)v116, (uint64_t)v95);
            uint64_t v49 = v119;
            if ((void)v119)
            {
              uint64_t v50 = *((void *)&v119 + 1);
              uint64_t v51 = (void *)v119;
              if (*((void *)&v119 + 1) != (void)v119)
              {
                do
                {
                  uint64_t v53 = *(void *)(v50 - 32);
                  if (v53)
                  {
                    uint64_t v54 = *(void *)(v50 - 24);
                    long long v52 = *(void **)(v50 - 32);
                    if (v54 != v53)
                    {
                      uint64_t v55 = *(void *)(v50 - 24);
                      do
                      {
                        long long v57 = *(void **)(v55 - 24);
                        v55 -= 24;
                        long long v56 = v57;
                        if (v57)
                        {
                          *(void *)(v54 - 16) = v56;
                          operator delete(v56);
                        }
                        uint64_t v54 = v55;
                      }
                      while (v55 != v53);
                      long long v52 = *(void **)(v50 - 32);
                    }
                    *(void *)(v50 - 24) = v53;
                    operator delete(v52);
                  }
                  v50 -= 64;
                }
                while (v50 != v49);
                uint64_t v51 = (void *)v119;
                uint64_t v6 = v82;
              }
              *((void *)&v119 + 1) = v49;
              operator delete(v51);
            }
            long long v119 = *(_OWORD *)v95;
            size_t v120 = v96[0];
            sub_45E7A0((uint64_t)__p, (uint64_t)v116);
            sub_3AFFFC((uint64_t)v116);
            if (++v17 == v79) {
              goto LABEL_93;
            }
          }
          if (v35 <= 1) {
            *(void *)(v30 + 104) = v103;
          }
LABEL_47:
          *(_OWORD *)(v30 + 120) = v105;
          uint64_t v37 = (void *)v98;
          if (!(void)v98) {
            goto LABEL_49;
          }
LABEL_48:
          *((void *)&v98 + 1) = v37;
          operator delete(v37);
          goto LABEL_49;
        }
LABEL_93:
        if (*(unsigned char *)(a1 + 1801))
        {
          sub_E1B4((uint64_t)v116);
          sub_188FC78(v117, (uint64_t)" probe_data_computed_using=pathlets ", 36);
          double v58 = (uint64_t *)nullsub_1(__p);
          uint64_t v59 = *v58;
          uint64_t v60 = v58[1];
          if (*v58 != v60)
          {
            do
            {
              sub_F3C80C(v117, v59 + 864);
              v59 += 1056;
            }
            while (v59 != v60);
          }
          std::stringbuf::str();
          sub_45FE3C((std::string *)__p, (const std::string::value_type *)v95);
          if (SHIBYTE(v96[0]) < 0) {
            operator delete(v95[0]);
          }
          v116[0] = v73;
          *(void *)((char *)v116 + *(void *)(v73 - 24)) = v72;
          v117[0] = v71;
          if (v118 < 0) {
            operator delete((void *)v117[9]);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          std::ios::~ios();
        }
        unint64_t v61 = *(void *)(v6 + 8);
        if (v61 >= *(void *)(v6 + 16))
        {
          unsigned int v67 = sub_CC1BB4((void **)v6, (uint64_t)__p);
          int v68 = SHIBYTE(v94);
          *(void *)(v6 + 8) = v67;
          if (v68 < 0)
          {
            operator delete((void *)v93);
            unsigned int v66 = __p[0];
            if (__p[0])
            {
LABEL_106:
              long long v69 = __p[1];
              long long v70 = v66;
              if (__p[1] != v66)
              {
                do
                  long long v69 = (void *)sub_3AFFFC((uint64_t)v69 - 1056);
                while (v69 != v66);
                long long v70 = __p[0];
              }
              __p[1] = v66;
              operator delete(v70);
            }
          }
          else
          {
            unsigned int v66 = __p[0];
            if (__p[0]) {
              goto LABEL_106;
            }
          }
        }
        else
        {
          *(void *)unint64_t v61 = 0;
          *(void *)(v61 + 8) = 0;
          *(void *)(v61 + 16) = 0;
          *(_OWORD *)unint64_t v61 = *(_OWORD *)__p;
          *(void *)(v61 + 16) = *(void *)v91;
          __p[0] = 0;
          __p[1] = 0;
          *(void *)unint64_t v91 = 0;
          *(_OWORD *)(v61 + 24) = *(_OWORD *)&v91[8];
          long long v63 = *(_OWORD *)&v91[40];
          long long v62 = *(_OWORD *)v92;
          uint64_t v64 = *(void *)&v92[13];
          *(_OWORD *)(v61 + 40) = *(_OWORD *)&v91[24];
          *(void *)(v61 + 85) = v64;
          *(_OWORD *)(v61 + 72) = v62;
          *(_OWORD *)(v61 + 56) = v63;
          long long v65 = v93;
          *(void *)(v61 + 112) = v94;
          *(_OWORD *)(v61 + 96) = v65;
          uint64_t v94 = 0;
          long long v93 = 0uLL;
          *(void *)(v6 + 8) = v61 + 120;
          unsigned int v66 = __p[0];
          if (__p[0]) {
            goto LABEL_106;
          }
        }
        ++v78;
      }
      while (v78 != v74);
    }
  }
}

void sub_F3B5E8(_Unwind_Exception *a1)
{
  sub_5AB1B0(v1);
  _Unwind_Resume(a1);
}

void sub_F3B5FC(_Unwind_Exception *a1)
{
  sub_5AB1B0(v1);
  _Unwind_Resume(a1);
}

void sub_F3B610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void ***a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a70 < 0) {
    operator delete(__p);
  }
  sub_1C02990((uint64_t)&STACK[0x2E8]);
  sub_3C77C4((uint64_t)&a49);
  sub_5AB1B0(a36);
  _Unwind_Resume(a1);
}

void sub_F3B730(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0xF3B788);
}

void sub_F3B764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  sub_3C77C4(&a49);
  sub_5AB1B0(v49);
  _Unwind_Resume(a1);
}

void sub_F3B7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_3AFFFC((uint64_t)&STACK[0x2E8]);
  sub_3C77C4((uint64_t)&a49);
  sub_5AB1B0(v49);
  _Unwind_Resume(a1);
}

void sub_F3B7CC(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0xF83E0F83E0F83E1 * ((a1[2] - *a1) >> 5) >= a2) {
    return;
  }
  if (a2 >= 0x3E0F83E0F83E10) {
    sub_2E00();
  }
  uint64_t v4 = (uint64_t)a1[1];
  uint64_t v5 = 1056 * a2;
  uint64_t v6 = (char *)operator new(1056 * a2);
  unsigned int v7 = &v6[v5];
  unsigned int v8 = &v6[v4 - (void)v2];
  if ((char *)v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v9 = &v6[v4 - (void)v2];
  do
  {
    v4 -= 1056;
    sub_463750((uint64_t)(v9 - 1056), v4);
  }
  while ((char *)v4 != v2);
  uint64_t v10 = *a1;
  uint64_t v2 = a1[1];
  *a1 = v9;
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v10)
  {
    do
    {
      v2 -= 1056;
      sub_3AFFFC((uint64_t)v2);
    }
    while (v2 != v10);
    uint64_t v2 = v10;
  }
  if (v2)
  {
LABEL_10:
    operator delete(v2);
  }
}

void sub_F3B8EC()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = (void *)v3;
  uint64_t v5 = v0;
  uint64_t v6 = (void *)sub_EAFF60(v3);
  unsigned int v7 = (unsigned __int16 *)(*v6 - *(int *)*v6);
  if (*v7 < 0x2Fu
    || (uint64_t v8 = v7[23]) == 0
    || ((v9 = *(unsigned __int8 *)(*v6 + v8), BOOL v10 = v9 > 0x2D, v11 = (1 << v9) & 0x208040000000, !v10)
      ? (BOOL v12 = v11 == 0)
      : (BOOL v12 = 1),
        v12))
  {
    if (*(unsigned char *)(sub_EADAD0((uint64_t)v4) + 24) && *(void *)(sub_EADAD0((uint64_t)v4) + 8) >= *(void *)(v5 + 1512)) {
      *(unsigned char *)(v2 + 804) = 1;
    }
  }
  *(_DWORD *)(v2 + 848) = 0;
  BOOL v13 = (uint64_t *)sub_5231C((uint64_t)v4);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  if (*v13 != v15)
  {
    int v16 = *(_DWORD *)(v2 + 848);
    do
    {
      if ((*(unsigned char *)(v14 + 88) & 3) == 1) {
        ++v16;
      }
      *(_DWORD *)(v2 + 848) = v16;
      v14 += 96;
    }
    while (v14 != v15);
  }
  int v17 = *(_DWORD *)(v5 + 1504);
  if ((v17 & 0x10) != 0) {
    sub_3DCBC0(*(uint64_t **)(v5 + 48), v2, &v92);
  }
  if ((v17 & 8) != 0)
  {
    sub_106C7DC(*(void *)(v5 + 64), v4, (uint64_t)&v92);
    BOOL v18 = v92 == v93 && v94 == v95 && __p == v97;
    *(unsigned char *)(v2 + 832) = !v18;
    sub_46B058();
    unint64_t v20 = v19;
    unint64_t v22 = v21;
    sub_46B060();
    uint64_t v24 = v23;
    unint64_t v26 = v25;
    if (v20)
    {
      if (v23)
      {
        do
        {
          unint64_t v27 = sub_46C760(v20);
          unint64_t v28 = sub_46C760(v24);
          if (v22 >= v27 || v26 >= v28)
          {
            if (v22 < v27 == v26 < v28) {
              goto LABEL_38;
            }
          }
          else
          {
            uint64_t v29 = sub_46C8EC(v20, v22);
            if (v29 == sub_46C8EC(v24, v26)) {
              goto LABEL_38;
            }
          }
          uint64_t v30 = (int **)sub_46C8EC(v20, v22++);
        }
        while (!sub_3EB32C(*(void *)(v5 + 56), v30));
LABEL_37:
        BOOL v33 = 1;
      }
      else
      {
        while (1)
        {
          unint64_t v32 = sub_46C760(v20);
          BOOL v33 = v22 < v32;
          if (v22 >= v32) {
            break;
          }
          long long v31 = (int **)sub_46C8EC(v20, v22++);
          if (sub_3EB32C(*(void *)(v5 + 56), v31)) {
            goto LABEL_37;
          }
        }
      }
    }
    else if (v23)
    {
      while (1)
      {
        unint64_t v34 = sub_46C760(v24);
        BOOL v33 = v26 < v34;
        if (v26 >= v34) {
          break;
        }
        unsigned int v35 = (int **)sub_46C8EC(0, v22++);
        if (sub_3EB32C(*(void *)(v5 + 56), v35)) {
          goto LABEL_37;
        }
      }
    }
    else
    {
LABEL_38:
      BOOL v33 = 0;
    }
    *(unsigned char *)(v2 + 833) = v33;
    sub_106BCAC(*(void *)(v5 + 64), v4, (uint64_t)&v98);
    int v36 = v98;
    uint64_t v37 = v99;
    if (v98)
    {
      uint64_t v99 = v98;
      operator delete(v98);
    }
    if (v36 != v37) {
      ++*(_DWORD *)(v2 + 848);
    }
    uint64_t v38 = (char *)__p;
    if (__p)
    {
      long long v39 = v97;
      long long v40 = __p;
      if (v97 != __p)
      {
        uint64_t v41 = v97;
        do
        {
          unsigned int v43 = (void *)*((void *)v41 - 3);
          v41 -= 24;
          uint64_t v42 = v43;
          if (v43)
          {
            *((void *)v39 - 2) = v42;
            operator delete(v42);
          }
          long long v39 = v41;
        }
        while (v41 != v38);
        long long v40 = __p;
      }
      uint64_t v97 = v38;
      operator delete(v40);
    }
    if (v94)
    {
      unint64_t v95 = v94;
      operator delete(v94);
    }
    if (v92)
    {
      long long v93 = (char *)v92;
      operator delete(v92);
    }
    int v17 = *(_DWORD *)(v5 + 1504);
  }
  if ((v17 & 0x20) != 0)
  {
    sub_3E03C4(*(void *)(v5 + 48), (void *)v2, (uint64_t)&v92);
    int v44 = (char *)v92;
    char v45 = v93;
    if (v92 != v93)
    {
      int v46 = *(_DWORD *)(v2 + 852);
      int v47 = *(_DWORD *)(v2 + 856);
      char v48 = (char *)v92;
      do
      {
        while (!v48[8])
        {
          *(_DWORD *)(v2 + 856) = ++v47;
          v48 += 32;
          if (v48 == v45) {
            goto LABEL_65;
          }
        }
        *(_DWORD *)(v2 + 852) = ++v46;
        v48 += 32;
      }
      while (v48 != v45);
    }
LABEL_65:
    if (v44)
    {
      long long v93 = v44;
      operator delete(v44);
    }
    int v17 = *(_DWORD *)(v5 + 1504);
    if ((v17 & 0x40) == 0) {
      goto LABEL_58;
    }
LABEL_68:
    sub_3EC020(*(void *)(v5 + 56), (void *)v2, &v92);
    uint64_t v50 = (char *)v92;
    uint64_t v49 = v93;
    *(_DWORD *)(v2 + 860) = -858993459 * ((unint64_t)(v93 - (unsigned char *)v92) >> 3);
    if (v50)
    {
      if (v49 != v50)
      {
        do
        {
          uint64_t v51 = (void *)*((void *)v49 - 4);
          if (v51)
          {
            *((void *)v49 - 3) = v51;
            operator delete(v51);
          }
          v49 -= 40;
        }
        while (v49 != v50);
        uint64_t v49 = (char *)v92;
      }
      long long v93 = v50;
      operator delete(v49);
    }
    if ((*(_DWORD *)(v5 + 1504) & 4) == 0) {
      return;
    }
    goto LABEL_77;
  }
  if ((v17 & 0x40) != 0) {
    goto LABEL_68;
  }
LABEL_58:
  if ((v17 & 4) == 0) {
    return;
  }
LABEL_77:
  sub_103E2B8(&v92, 2, *(void *)v5);
  sub_1069090(*(void *)(v5 + 64), v4, (void **)&v98);
  long long v52 = v98;
  BOOL v12 = v98 == v99;
  *(unsigned char *)(v2 + 835) = v98 != v99;
  if (v12) {
    goto LABEL_146;
  }
  unint64_t v53 = *(void *)(sub_EADD1C((uint64_t)v4) + 32);
  if (__PAIR64__(*((unsigned __int16 *)v52 + 2), *(_DWORD *)v52) != __PAIR64__(WORD2(v53), v53)
    || (HIWORD(v53) & 1) == (v52[6] == 0))
  {
    HIBYTE(v91) = 0;
    LOBYTE(__s2[0]) = 0;
  }
  else
  {
    uint64_t v54 = **((void **)v98 + 1) + 424 * *((void *)v98 + 2);
    if (*(char *)(v54 + 63) < 0)
    {
      sub_4200(__s2, *(void **)(v54 + 40), *(void *)(v54 + 48));
    }
    else
    {
      long long v55 = *(_OWORD *)(v54 + 40);
      uint64_t v91 = *(void *)(v54 + 56);
      *(_OWORD *)__s2 = v55;
    }
  }
  long long v57 = v98;
  long long v56 = v99;
  if (v98 == v99) {
    goto LABEL_150;
  }
  if (v91 >= 0) {
    double v58 = (void *)HIBYTE(v91);
  }
  else {
    double v58 = __s2[1];
  }
  if ((v91 & 0x8000000000000000) == 0)
  {
    uint64_t v59 = v98;
    while (1)
    {
      uint64_t v60 = **((void **)v59 + 1) + 424 * *((void *)v59 + 2);
      uint64_t v61 = *(unsigned __int8 *)(v60 + 63);
      size_t v62 = *(void *)(v60 + 48);
      if ((v61 & 0x80u) == 0) {
        long long v63 = (void *)*(unsigned __int8 *)(v60 + 63);
      }
      else {
        long long v63 = *(void **)(v60 + 48);
      }
      if (v63 == v58)
      {
        uint64_t v64 = (const void **)(v60 + 40);
        if ((v61 & 0x80) != 0)
        {
          if (!memcmp(*v64, __s2, v62)) {
            goto LABEL_113;
          }
        }
        else
        {
          if (!v61) {
            goto LABEL_113;
          }
          long long v65 = __s2;
          while (*(unsigned __int8 *)v64 == *(unsigned __int8 *)v65)
          {
            uint64_t v64 = (const void **)((char *)v64 + 1);
            long long v65 = (void **)((char *)v65 + 1);
            if (!--v61) {
              goto LABEL_113;
            }
          }
        }
      }
      v59 += 24;
      if (v59 == v56) {
        goto LABEL_138;
      }
    }
  }
  unsigned int v66 = (unsigned __int8 *)__s2[0];
  uint64_t v59 = v98;
  while (1)
  {
    uint64_t v67 = **((void **)v59 + 1) + 424 * *((void *)v59 + 2);
    uint64_t v68 = *(unsigned __int8 *)(v67 + 63);
    size_t v69 = *(void *)(v67 + 48);
    if ((v68 & 0x80u) == 0) {
      long long v70 = (void *)*(unsigned __int8 *)(v67 + 63);
    }
    else {
      long long v70 = *(void **)(v67 + 48);
    }
    if (v70 != v58) {
      goto LABEL_103;
    }
    uint64_t v71 = (const void **)(v67 + 40);
    if ((v68 & 0x80) == 0) {
      break;
    }
    if (!memcmp(*v71, v66, v69)) {
      goto LABEL_113;
    }
LABEL_103:
    v59 += 24;
    if (v59 == v56) {
      goto LABEL_138;
    }
  }
  if (v68)
  {
    uint64_t v72 = v66;
    while (*(unsigned __int8 *)v71 == *v72)
    {
      uint64_t v71 = (const void **)((char *)v71 + 1);
      ++v72;
      if (!--v68) {
        goto LABEL_113;
      }
    }
    goto LABEL_103;
  }
LABEL_113:
  if (v59 == v56) {
    goto LABEL_138;
  }
  uint64_t v73 = v59 + 24;
  if (v59 + 24 == v56)
  {
    uint64_t v74 = v59;
    if (v59 == v56) {
      goto LABEL_138;
    }
    goto LABEL_137;
  }
  uint64_t v74 = v59;
  do
  {
    uint64_t v76 = v59;
    uint64_t v59 = v73;
    long long v77 = (void *)*((void *)v76 + 4);
    uint64_t v78 = *((void *)v76 + 5);
    unint64_t v79 = v76 + 32;
    uint64_t v80 = *v77 + 424 * v78;
    uint64_t v81 = *(unsigned __int8 *)(v80 + 63);
    size_t v82 = *(void *)(v80 + 48);
    if ((v81 & 0x80u) == 0) {
      long long v83 = (void *)*(unsigned __int8 *)(v80 + 63);
    }
    else {
      long long v83 = *(void **)(v80 + 48);
    }
    __n128 v84 = (void *)HIBYTE(v91);
    if (v91 < 0) {
      __n128 v84 = __s2[1];
    }
    if (v83 != v84) {
      goto LABEL_117;
    }
    long long v85 = (const void **)(v80 + 40);
    if (v91 >= 0) {
      long long v86 = __s2;
    }
    else {
      long long v86 = (void **)__s2[0];
    }
    if ((v81 & 0x80) != 0)
    {
      if (!memcmp(*v85, v86, v82)) {
        goto LABEL_118;
      }
      goto LABEL_117;
    }
    if (v81)
    {
      while (*(unsigned __int8 *)v85 == *(unsigned __int8 *)v86)
      {
        long long v85 = (const void **)((char *)v85 + 1);
        long long v86 = (void **)((char *)v86 + 1);
        if (!--v81) {
          goto LABEL_118;
        }
      }
LABEL_117:
      int v75 = *(_DWORD *)v59;
      *(_DWORD *)(v74 + 3) = *(_DWORD *)(v59 + 3);
      *(_DWORD *)uint64_t v74 = v75;
      *(_OWORD *)(v74 + 8) = *v79;
      v74 += 24;
    }
LABEL_118:
    uint64_t v73 = v59 + 24;
  }
  while (v59 + 24 != v56);
  long long v57 = v98;
  long long v56 = v99;
  if (v74 != v99)
  {
LABEL_137:
    uint64_t v99 = v74;
    long long v56 = v74;
  }
LABEL_138:
  if (v57 == v56)
  {
LABEL_150:
    *(unsigned char *)(v2 + 833) = *(unsigned char *)(v2 + 833);
    if ((SHIBYTE(v91) & 0x80000000) == 0) {
      goto LABEL_145;
    }
    goto LABEL_151;
  }
  uint64_t v87 = v57 + 24;
  do
  {
    BOOL v88 = sub_1041610((uint64_t)&v92, **((void **)v87 - 2) + 424 * *((void *)v87 - 1));
    int v89 = v87 == v56 || v88;
    v87 += 24;
  }
  while (v89 != 1);
  *(unsigned char *)(v2 + 833) |= v88;
  if (SHIBYTE(v91) < 0) {
LABEL_151:
  }
    operator delete(__s2[0]);
LABEL_145:
  long long v52 = v98;
LABEL_146:
  if (v52)
  {
    uint64_t v99 = v52;
    operator delete(v52);
  }
  sub_3A6230(&v92);
}

void sub_F3C2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17)
{
  double v19 = *(void **)(v17 - 104);
  if (v19)
  {
    *(void *)(v17 - 96) = v19;
    operator delete(v19);
  }
  sub_3A6230(&__p);
  _Unwind_Resume(a1);
}

void sub_F3C340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_3DB6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_F3C354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_3DB6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_F3C368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_3DB6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_F3C37C(uint64_t *a1, uint64_t a2, char a3)
{
  if ((a1[188] & 2) == 0) {
    return;
  }
  uint64_t v6 = a2 + 448;
  uint64_t v7 = sub_4750FC(a2 + 448);
  uint64_t v54 = sub_474FB0(v6);
  int v55 = v8;
  uint64_t v52 = sub_475024(v6);
  int v53 = v9;
  if (v7 == 0x7FFFFFFF || HIDWORD(v7) == 0x7FFFFFFF || (int)v7 > SHIDWORD(v7))
  {
    *(unsigned char *)(a2 + 824) = 1;
  }
  else
  {
    BOOL v15 = sub_40A45C((int *)&v52);
    *(unsigned char *)(a2 + 824) = v15;
    if (!v15)
    {
      *(_WORD *)(a2 + 825) = 257;
      *(unsigned char *)(a2 + 827) = 1;
      return;
    }
  }
  if (sub_40A4AC((int *)&v52)) {
    return;
  }
  uint64_t v10 = *a1;
  HIBYTE(v57) = 9;
  strcpy(v56.i8, "EVRouting");
  __p = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v11 = sub_374CDC(v10, (uint64_t)&v56, (uint64_t *)&__p);
  sub_3FC01C(v11, a1[1], *(void *)(a1[1] + 288), (uint64_t)v51);
  BOOL v12 = (void **)__p;
  if (__p)
  {
    BOOL v13 = v49;
    uint64_t v14 = __p;
    if (v49 != __p)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      uint64_t v14 = __p;
    }
    uint64_t v49 = v12;
    operator delete(v14);
  }
  if (SHIBYTE(v57) < 0) {
    operator delete((void *)v56.i64[0]);
  }
  int v16 = sub_40A440(v51);
  int v17 = sub_40A440((_DWORD *)(a1[1] + 336));
  uint64_t v18 = sub_475100(v6);
  int v19 = *(_DWORD *)(v18 + 8);
  uint64_t v46 = *(void *)v18;
  int v47 = v19;
  int v20 = sub_40AA28((int *)&v46, (unsigned int *)&v54);
  int v21 = sub_40A440(&v52);
  double v22 = *((double *)a1 + 223) * (double)v16;
  if (v22 >= 0.0)
  {
    if (v22 >= 4.50359963e15) {
      goto LABEL_28;
    }
    uint64_t v23 = (uint64_t)(v22 + v22) + 1;
  }
  else
  {
    if (v22 <= -4.50359963e15) {
      goto LABEL_28;
    }
    uint64_t v23 = (uint64_t)(v22 + v22);
    if (v23 >= 1) {
      --v23;
    }
  }
  double v22 = (double)(v23 >> 1);
LABEL_28:
  *(unsigned char *)(a2 + 825) = v21 < (int)v22;
  double v24 = *((double *)a1 + 224) * (double)v17;
  if (v24 >= 0.0)
  {
    if (v24 < 4.50359963e15)
    {
      uint64_t v27 = (uint64_t)(v24 + v24) + 1;
      *(unsigned char *)(a2 + 827) = v20 < (int)((unint64_t)v27 >> 1);
      uint64_t v26 = v27 >> 1;
      goto LABEL_35;
    }
  }
  else if (v24 > -4.50359963e15)
  {
    uint64_t v25 = (uint64_t)(v24 + v24);
    if (v25 >= 1) {
      --v25;
    }
    uint64_t v26 = v25 >> 1;
    *(unsigned char *)(a2 + 827) = v20 < (int)v26;
LABEL_35:
    *(unsigned char *)(a2 + 826) = v21 < (int)(double)v26;
    if ((a3 & 1) == 0) {
      return;
    }
    goto LABEL_38;
  }
  *(unsigned char *)(a2 + 827) = v20 < (int)v24;
  *(unsigned char *)(a2 + 826) = v21 < (int)v24;
  if ((a3 & 1) == 0) {
    return;
  }
LABEL_38:
  *(unsigned char *)(a2 + 831) = sub_404B48(a2, a1[1], (void *)*a1);
  double v28 = (double)sub_3FDA3C((int *)&v52, a1[1]) * 0.5;
  if (v28 >= 0.0)
  {
    if (v28 >= 4.50359963e15) {
      goto LABEL_46;
    }
    uint64_t v29 = (uint64_t)(v28 + v28) + 1;
  }
  else
  {
    if (v28 <= -4.50359963e15) {
      goto LABEL_46;
    }
    uint64_t v29 = (uint64_t)(v28 + v28);
    if (v29 >= 1) {
      --v29;
    }
  }
  double v28 = (double)(v29 >> 1);
LABEL_46:
  uint64_t v30 = (uint64_t)v28;
  if (a1[190] < (uint64_t)v28) {
    return;
  }
  sub_4068B4((uint64_t)&__p, a1[1], *(unsigned char *)(a1[1] + 408), (void *)*a1);
  uint64_t v31 = a1[3];
  uint64_t v32 = sub_46C8FC(a2);
  double v33 = sub_2954EC(v31, *(void *)(v32 + 32), (uint64_t)&v56);
  unint64_t v34 = (void *)v56.i64[1];
  if ((void *)v56.i64[1] == v57)
  {
    int v38 = 0x7FFFFFFF;
    unint64_t v39 = 0xFFFFFFFF00000000;
    uint64_t v40 = 0xFFFFFFFFLL;
    if (!v56.i64[1]) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  unint64_t v35 = sub_2E40A4((uint64_t)&v56);
  unsigned int v36 = v35;
  int v38 = v37;
  unint64_t v39 = v35 & 0xFFFFFFFF00000000;
  unint64_t v34 = (void *)v56.i64[1];
  uint64_t v40 = v36;
  if (v56.i64[1])
  {
LABEL_49:
    long long v57 = v34;
    operator delete(v34);
  }
LABEL_50:
  unint64_t v44 = v39 | v40;
  int v45 = v38;
  sub_4068BC((uint64_t)&__p, (int *)&v44, v30, 0, &v56, v33);
  uint64_t v41 = (void **)v56.i64[0];
  if (*(unsigned char *)(a2 + 830)) {
    BOOL v42 = 1;
  }
  else {
    BOOL v42 = -858993459 * ((unint64_t)(v56.i64[1] - v56.i64[0]) >> 4) == 0;
  }
  char v43 = !v42;
  *(unsigned char *)(a2 + 829) = v43;
  if (v41)
  {
    sub_28F794((uint64_t)&v56, v41);
    operator delete((void *)v56.i64[0]);
  }
}

void sub_F3C7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  int v16 = *(void **)(v14 - 80);
  if (v16)
  {
    *(void *)(v14 - 72) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void *sub_F3C80C(void *a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = 0;
  do
  {
    sub_47548C((void *)v3, (uint64_t)__p);
    if ((v18 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v18 & 0x80u) == 0) {
      uint64_t v5 = v18;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_188FC78(v2, (uint64_t)v4, v5);
    sub_188FC78(v6, (uint64_t)":", 1);
    if ((char)v18 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v2 = a1;
    uint64_t v16 = v3;
    uint64_t v7 = (uint64_t *)(a2 + 24 * v3);
    uint64_t v9 = *v7;
    uint64_t v8 = v7[1];
    if (*v7 != v8)
    {
      do
      {
        sub_188FC78(a1, (uint64_t)" (", 2);
        uint64_t v10 = (void *)std::ostream::operator<<();
        sub_188FC78(v10, (uint64_t)",", 1);
        uint64_t v11 = (void *)std::ostream::operator<<();
        sub_188FC78(v11, (uint64_t)")", 1);
        v9 += 32;
      }
      while (v9 != v8);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    BOOL v12 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v3 = v16 + 1;
  }
  while (v16 != 5);
  return a1;
}

void sub_F3CA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
}

void sub_F3CA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_F3CA34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v4 = a3;
    uint64_t v74 = a2 + 864;
    sub_475458((void *)(a2 + 864));
    uint64_t v5 = a1;
    uint64_t v6 = 0;
    uint64_t v76 = a1 + 1528;
    uint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((a4 - v4) >> 3);
    if (v7 <= 1) {
      uint64_t v7 = 1;
    }
    uint64_t v8 = v7 - 1;
    uint64_t v79 = v7 - 1;
    while (1)
    {
      if (*(unsigned char *)(v76 + 40 * v6))
      {
        size_t v82 = (void **)(v74 + 24 * v6);
        if (v8)
        {
          uint64_t v10 = 0;
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          uint64_t v13 = v76 + 40 * v6;
          long long v85 = (uint64_t *)(v13 + 24);
          long long v83 = (uint64_t *)(v13 + 32);
          uint64_t v80 = (double *)(v13 + 16);
          uint64_t v81 = (double *)(v13 + 8);
          double v14 = 0.0;
          while (1)
          {
            BOOL v15 = (unint64_t *)(v4 + 56 * v12);
            uint64_t v16 = v15[5];
            v11 += v16;
            double v14 = v14 + sub_F3CFF8(v5, *v15, v6) * (double)v16;
            if (v11 >= *v85)
            {
              uint64_t v17 = 0;
              uint64_t v18 = *(void *)(v5 + 16);
              unint64_t v19 = v15[7];
              unint64_t v20 = (v19 >> 30) & 0xFFFFFFFC | (v19 << 32);
              uint64_t v21 = (v19 >> 61) & 2 | (v19 >> 63) | v20;
              unint64_t v22 = ((0x2127599BF4325C37 * (v21 ^ (v20 >> 23))) ^ ~((0x2127599BF4325C37 * (v21 ^ (v20 >> 23))) >> 47))
                  + (((0x2127599BF4325C37 * (v21 ^ (v20 >> 23))) ^ ((0x2127599BF4325C37 * (v21 ^ (v20 >> 23))) >> 47)) << 21);
              unint64_t v23 = 21 * ((265 * (v22 ^ (v22 >> 24))) ^ ((265 * (v22 ^ (v22 >> 24))) >> 14));
              unint64_t v24 = 2147483649u * (v23 ^ (v23 >> 28));
              uint64_t v25 = v18
                  + 48
                  * (((((unsigned __int16)(v23 ^ (v23 >> 28)) >> 8) ^ ((-2147483647
                                                                                       * (v23 ^ (v23 >> 28))) >> 16)) ^ ((-2147483647 * (v23 ^ (v23 >> 28))) >> 24)) & 0xF);
              uint64_t v26 = v25 + 3896;
              unint64_t v27 = v24 >> 7;
              uint64_t v28 = *(void *)(v25 + 3920);
              uint64_t v29 = *(void *)(v25 + 3896);
              uint64_t v30 = 0x101010101010101 * (v24 & 0x7F);
              while (1)
              {
                unint64_t v31 = v27 & v28;
                uint64_t v32 = *(void *)(v29 + v31);
                unint64_t v33 = ((v32 ^ v30) - 0x101010101010101) & ~(v32 ^ v30) & 0x8080808080808080;
                if (v33) {
                  break;
                }
LABEL_18:
                if ((v32 & (~v32 << 6) & 0x8080808080808080) != 0) {
                  goto LABEL_21;
                }
                v17 += 8;
                unint64_t v27 = v17 + v31;
              }
              while (1)
              {
                unint64_t v34 = (v31 + (__clz(__rbit64(v33)) >> 3)) & v28;
                unint64_t v35 = (unsigned int *)(*(void *)(v26 + 8) + 24 * v34);
                if (((4 * v35[1]) | ((unint64_t)*v35 << 32) | ((unint64_t)v35[1] >> 31) | ((unint64_t)v35[1] >> 29) & 2) == v21) {
                  break;
                }
                v33 &= v33 - 1;
                if (!v33) {
                  goto LABEL_18;
                }
              }
              if (v28 == v34)
              {
LABEL_21:
                uint64_t v5 = a1;
                if (sub_32A6F4(v18, v19) < *v83) {
                  goto LABEL_12;
                }
              }
              else if (*((void *)v35 + 1) < *v83)
              {
                goto LABEL_12;
              }
              double v36 = v14 / (double)v11;
              double v37 = sub_F3CFF8(v5, v15[7], v6);
              double v38 = v36 / v37;
              double v39 = vabdd_f64(v36, v37);
              BOOL v40 = v38 >= 1.0 / *v81 || v38 <= *v81;
              if (v40 && v39 >= *v80)
              {
                uint64_t v42 = v10;
                uint64_t v43 = v11 + v10;
                uint64_t v44 = *(void *)(a2 + 504);
                BOOL v40 = v44 < v11 + v10;
                uint64_t v45 = v44 - (v11 + v10);
                if (v40) {
                  uint64_t v46 = 0;
                }
                else {
                  uint64_t v46 = v45;
                }
                char v48 = (char *)v82[1];
                unint64_t v47 = (unint64_t)v82[2];
                if ((unint64_t)v48 < v47)
                {
                  *(void *)char v48 = v10;
                  *((void *)v48 + 1) = v46;
                  *((void *)v48 + 2) = v11;
                  uint64_t v49 = v48 + 32;
                  *((double *)v48 + 3) = v36;
                  uint64_t v8 = v79;
                  uint64_t v5 = a1;
LABEL_51:
                  uint64_t v11 = 0;
                  v82[1] = v49;
                  double v14 = 0.0;
                  uint64_t v10 = v43;
                  goto LABEL_12;
                }
                uint64_t v50 = v4;
                uint64_t v51 = (char *)*v82;
                uint64_t v52 = (v48 - (unsigned char *)*v82) >> 5;
                unint64_t v53 = v52 + 1;
                if ((unint64_t)(v52 + 1) >> 59) {
                  goto LABEL_75;
                }
                uint64_t v54 = v47 - (void)v51;
                if (v54 >> 4 > v53) {
                  unint64_t v53 = v54 >> 4;
                }
                if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFE0) {
                  unint64_t v53 = 0x7FFFFFFFFFFFFFFLL;
                }
                unint64_t v77 = v53;
                if (v53)
                {
                  if (v53 >> 59) {
                    goto LABEL_76;
                  }
                  int v55 = (char *)operator new(32 * v53);
                  uint64_t v42 = v10;
                }
                else
                {
                  int v55 = 0;
                }
                int64x2_t v56 = &v55[32 * v52];
                *(void *)int64x2_t v56 = v42;
                *((void *)v56 + 1) = v46;
                *((void *)v56 + 2) = v11;
                *((double *)v56 + 3) = v36;
                long long v57 = v56;
                uint64_t v4 = v50;
                if (v48 == v51)
                {
                  uint64_t v8 = v79;
                  uint64_t v49 = v56 + 32;
                  *size_t v82 = v56;
                  v82[1] = v56 + 32;
                  v82[2] = &v55[32 * v77];
                  if (v48) {
                    goto LABEL_49;
                  }
                }
                else
                {
                  uint64_t v8 = v79;
                  do
                  {
                    long long v58 = *((_OWORD *)v48 - 1);
                    *((_OWORD *)v57 - 2) = *((_OWORD *)v48 - 2);
                    *((_OWORD *)v57 - 1) = v58;
                    v57 -= 32;
                    v48 -= 32;
                  }
                  while (v48 != v51);
                  char v48 = (char *)*v82;
                  uint64_t v49 = v56 + 32;
                  *size_t v82 = v57;
                  v82[1] = v56 + 32;
                  v82[2] = &v55[32 * v77];
                  if (v48) {
LABEL_49:
                  }
                    operator delete(v48);
                }
                uint64_t v5 = a1;
                uint64_t v43 = v11 + v10;
                goto LABEL_51;
              }
              uint64_t v5 = a1;
            }
LABEL_12:
            if (++v12 == v8) {
              goto LABEL_55;
            }
          }
        }
        uint64_t v11 = 0;
        uint64_t v10 = 0;
        double v14 = 0.0;
LABEL_55:
        uint64_t v59 = *(void *)(a4 - 16) + v11;
        if (v59) {
          break;
        }
      }
LABEL_7:
      if (++v6 == 6) {
        return;
      }
    }
    double v60 = (v14 + sub_F3CFF8(v5, *(void *)(a4 - 56), v6) * (double)*(uint64_t *)(a4 - 16))
        / (double)v59;
    uint64_t v61 = v74 + 24 * v6;
    long long v63 = (char *)v82[1];
    unint64_t v62 = (unint64_t)v82[2];
    if ((unint64_t)v63 < v62)
    {
      *(void *)long long v63 = v10;
      *((void *)v63 + 1) = 0;
      *((void *)v63 + 2) = v59;
      uint64_t v9 = v63 + 32;
      *((double *)v63 + 3) = v60;
LABEL_6:
      uint64_t v5 = a1;
      *(void *)(v61 + 8) = v9;
      goto LABEL_7;
    }
    uint64_t v64 = (char *)*v82;
    uint64_t v65 = (v63 - (unsigned char *)*v82) >> 5;
    unint64_t v66 = v65 + 1;
    if ((unint64_t)(v65 + 1) >> 59) {
LABEL_75:
    }
      sub_2E00();
    uint64_t v67 = v62 - (void)v64;
    if (v67 >> 4 > v66) {
      unint64_t v66 = v67 >> 4;
    }
    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v68 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v68 = v66;
    }
    if (v68)
    {
      if (v68 >> 59) {
LABEL_76:
      }
        sub_188D718();
      size_t v69 = (char *)operator new(32 * v68);
      uint64_t v70 = v10;
    }
    else
    {
      uint64_t v70 = v10;
      size_t v69 = 0;
    }
    uint64_t v71 = &v69[32 * v65];
    *(void *)uint64_t v71 = v70;
    *((void *)v71 + 1) = 0;
    *((void *)v71 + 2) = v59;
    *((double *)v71 + 3) = v60;
    uint64_t v72 = v71;
    if (v63 == v64)
    {
      uint64_t v61 = v74 + 24 * v6;
      uint64_t v9 = v71 + 32;
      *size_t v82 = v71;
      v82[1] = v71 + 32;
      v82[2] = &v69[32 * v68];
      if (!v63) {
        goto LABEL_71;
      }
    }
    else
    {
      do
      {
        long long v73 = *((_OWORD *)v63 - 1);
        *((_OWORD *)v72 - 2) = *((_OWORD *)v63 - 2);
        *((_OWORD *)v72 - 1) = v73;
        v72 -= 32;
        v63 -= 32;
      }
      while (v63 != v64);
      uint64_t v61 = v74 + 24 * v6;
      long long v63 = (char *)*v82;
      uint64_t v9 = v71 + 32;
      *size_t v82 = v72;
      v82[1] = v71 + 32;
      v82[2] = &v69[32 * v68];
      if (!v63) {
        goto LABEL_71;
      }
    }
    operator delete(v63);
LABEL_71:
    uint64_t v8 = v79;
    goto LABEL_6;
  }
}

double sub_F3CFF8(uint64_t a1, unint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      double result = (double)(unsigned __int16)sub_3AC590(*(void *)(a1 + 32), a2);
      break;
    case 1:
      unint64_t v14 = a2;
      unint64_t v6 = 0x2127599BF4325C37
         * (((a2 >> 61) & 2 | (a2 >> 63) | (a2 >> 30) & 0xFFFFFFFC | (a2 << 32)) ^ (((a2 >> 30) & 0xFFFFFFFC | (a2 << 32)) >> 23));
      unint64_t v7 = (v6 ^ ~(v6 >> 47)) + ((v6 ^ (v6 >> 47)) << 21);
      unint64_t v8 = 21 * ((265 * (v7 ^ (v7 >> 24))) ^ ((265 * (v7 ^ (v7 >> 24))) >> 14));
      sub_32AC3C(a1 + 736, &v14, 2147483649u * (v8 ^ (v8 >> 28)), v13);
      if (v13[0])
      {
        double result = *((double *)v13[3] + 2);
      }
      else
      {
        sub_F3D548(a1, v14);
        double result = v12;
      }
      break;
    case 2:
      unsigned __int16 v9 = sub_F3D290(*(void *)(a1 + 32), a2);
      if (v9) {
        double result = (double)(unsigned __int16)sub_3AC590(*(void *)(a1 + 32), a2) / (*(double *)(a1 + 1768) * (double)v9);
      }
      else {
        double result = 1.0;
      }
      break;
    case 3:
      double result = sub_F3D374(a1, a2);
      break;
    case 4:
      uint64_t v10 = *(void *)(a1 + 32);
      double result = sub_3AC684(v10, a2);
      break;
    case 5:
      double v11 = sub_3AC684(*(void *)(a1 + 32), a2);
      double result = v11 * (1.0 - sub_F3D374(a1, a2));
      if (result < 0.0) {
        double result = 0.0;
      }
      break;
    default:
      double result = 0.0;
      break;
  }
  return result;
}

uint64_t sub_F3D290(uint64_t a1, unint64_t a2)
{
  double v4 = 0.0;
  if ((a2 & 0x8000000000000000) != 0) {
    return (int)(v4 * sub_3AC684(a1, a2) + 0.5);
  }
  uint64_t v5 = sub_2E5F98(a1, a2, 1);
  if (!v5) {
    return (int)(v4 * sub_3AC684(a1, a2) + 0.5);
  }
  unint64_t v7 = (unsigned __int16 *)&v5[-*(int *)v5];
  unsigned int v8 = *v7;
  if ((a2 & 0x4000000000000000) != 0)
  {
    if (v8 >= 0xB)
    {
      int v9 = v7[5];
      if (!v7[5]) {
        goto LABEL_12;
      }
LABEL_9:
      uint64_t v10 = (unsigned int *)&v5[v9 + *(unsigned int *)&v5[v9]];
      if (*v10 > (HIDWORD(a2) & 0x3FFFFFFFu))
      {
        double v11 = (char *)v10 + 2 * (HIDWORD(a2) & 0x3FFFFFFF) + 4;
LABEL_14:
        LOWORD(v6) = *(_WORD *)v11;
        double v4 = (double)v6;
        return (int)(v4 * sub_3AC684(a1, a2) + 0.5);
      }
      goto LABEL_12;
    }
LABEL_11:
    if (v8 < 9) {
      return (int)(v4 * sub_3AC684(a1, a2) + 0.5);
    }
    goto LABEL_12;
  }
  if (v8 < 0xD) {
    goto LABEL_11;
  }
  int v9 = v7[6];
  if (v7[6]) {
    goto LABEL_9;
  }
LABEL_12:
  uint64_t v12 = v7[4];
  if (v12)
  {
    double v11 = &v5[v12];
    goto LABEL_14;
  }
  return (int)(v4 * sub_3AC684(a1, a2) + 0.5);
}

double sub_F3D374(uint64_t a1, unint64_t a2)
{
  unint64_t v14 = a2;
  if (*(unsigned char *)(a1 + 1800))
  {
    unint64_t v4 = 0x2127599BF4325C37
       * (((a2 >> 61) & 2 | (a2 >> 63) | (a2 >> 30) & 0xFFFFFFFC | (a2 << 32)) ^ (((a2 >> 30) & 0xFFFFFFFC | (a2 << 32)) >> 23));
    unint64_t v5 = (v4 ^ ~(v4 >> 47)) + ((v4 ^ (v4 >> 47)) << 21);
    unint64_t v6 = 21 * ((265 * (v5 ^ (v5 >> 24))) ^ ((265 * (v5 ^ (v5 >> 24))) >> 14));
    sub_32AC3C(a1 + 736, &v14, 2147483649u * (v6 ^ (v6 >> 28)), v15);
    if (v15[0]) {
      return *(double *)(v16 + 8);
    }
    else {
      return sub_F3D548(a1, v14);
    }
  }
  else
  {
    unsigned __int16 v8 = sub_F3D290(*(void *)(a1 + 32), a2);
    if (v8)
    {
      unsigned __int16 v9 = v8;
      unint64_t v17 = a2;
      unint64_t v10 = 0x2127599BF4325C37
          * (((a2 >> 61) & 2 | (a2 >> 63) | (a2 >> 30) & 0xFFFFFFFC | (a2 << 32)) ^ (((a2 >> 30) & 0xFFFFFFFC | (a2 << 32)) >> 23));
      unint64_t v11 = (v10 ^ ~(v10 >> 47)) + ((v10 ^ (v10 >> 47)) << 21);
      unint64_t v12 = 21 * ((265 * (v11 ^ (v11 >> 24))) ^ ((265 * (v11 ^ (v11 >> 24))) >> 14));
      sub_32AC3C(a1 + 736, &v17, 2147483649u * (v12 ^ (v12 >> 28)), v15);
      if (v15[0]) {
        double v13 = *(double *)(v16 + 16);
      }
      else {
        sub_F3D548(a1, v17);
      }
      return v13 / (*(double *)(a1 + 1776) * (double)v9);
    }
    else
    {
      return 0.0;
    }
  }
}

double sub_F3D548(uint64_t a1, unint64_t a2)
{
  uint64_t v22 = 0;
  unint64_t v23 = a2;
  __p = 0;
  uint64_t v21 = 0;
  sub_318C48(*(void *)(a1 + 16), a2, (unint64_t *)&__p);
  unint64_t v4 = (uint64_t *)__p;
  unint64_t v5 = v21;
  if (__p == v21)
  {
    double v7 = 0.0;
    unsigned __int16 v9 = __p;
    double v6 = 0.0;
  }
  else
  {
    double v6 = 0.0;
    double v7 = 0.0;
    do
    {
      unint64_t v8 = sub_3A5DDC(*(void *)(a1 + 16), *v4);
      double v7 = v7 + (double)(unsigned __int16)sub_29A160(*(void *)(a1 + 40), v8);
      double v6 = v6 + sub_29A290(*(void *)(a1 + 40), v8);
      ++v4;
    }
    while (v4 != v5);
    unint64_t v4 = (uint64_t *)__p;
    unsigned __int16 v9 = v21;
  }
  unint64_t v10 = 0x2127599BF4325C37
      * (((a2 >> 61) & 2 | (a2 >> 63) | (a2 >> 30) & 0xFFFFFFFC | (a2 << 32)) ^ (((a2 >> 30) & 0xFFFFFFFC | (a2 << 32)) >> 23));
  unint64_t v11 = (v10 ^ ~(v10 >> 47)) + ((v10 ^ (v10 >> 47)) << 21);
  unint64_t v12 = 21 * ((265 * (v11 ^ (v11 >> 24))) ^ ((265 * (v11 ^ (v11 >> 24))) >> 14));
  double v13 = (uint64_t *)(a1
                  + 48
                  * (((((unsigned __int16)(v12 ^ (v12 >> 28)) >> 8) ^ ((-2147483647
                                                                                       * (v12 ^ (v12 >> 28))) >> 16)) ^ ((-2147483647 * (v12 ^ (v12 >> 28))) >> 24)) & 0xF)
                  + 736);
  unint64_t v14 = sub_32AD60(v13, &v23, 2147483649u * (v12 ^ (v12 >> 28)));
  double v15 = v6 / (double)(unint64_t)((v9 - (unsigned char *)v4) >> 3);
  if (v16)
  {
    unint64_t v17 = (unint64_t *)(v13[1] + 24 * v14);
    *unint64_t v17 = v23;
    v17[1] = 0;
    v17[2] = 0;
  }
  uint64_t v18 = v13[1] + 24 * v14;
  *(double *)(v18 + 8) = v15;
  *(double *)(v18 + 16) = v7;
  if (__p)
  {
    uint64_t v21 = (uint64_t *)__p;
    operator delete(__p);
  }
  return v15;
}

void sub_F3D6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_F3D714()
{
  unk_25FCE47 = 16641;
  word_25FCE30 = 65;
  byte_25FCE5F = 1;
  byte_25FCE49 = 0;
}

uint64_t sub_F3D73C(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = sub_DB6E94(a1);
  unint64_t v7 = sub_DB6BEC(a1);
  BOOL v8 = a3 == 2;
  BOOL v9 = a3 != 0;
  if (v6 != 2)
  {
    BOOL v8 = 0;
    BOOL v9 = 0;
  }
  BOOL v10 = a3 == 3;
  int v11 = a3 == 3 || v8;
  int v12 = v10 || v9;
  BOOL v13 = v6 == 2;
  uint64_t v14 = HIDWORD(v7) & 1;
  uint64_t v15 = (v7 >> 24) & 1;
  if (sub_401FE4(a2)) {
    int v16 = 3;
  }
  else {
    int v16 = 1;
  }
  if (v6) {
    v16 |= 0x10u;
  }
  if (v11) {
    v16 |= 4u;
  }
  if (v12) {
    v16 |= 8u;
  }
  unsigned int v17 = v16 & 0xFFFFFF9F;
  if ((v13 & v14) != 0) {
    int v18 = 32;
  }
  else {
    int v18 = 0;
  }
  if ((v13 & v15) != 0) {
    int v19 = 64;
  }
  else {
    int v19 = 0;
  }
  return v19 | v18 | v17;
}

uint64_t sub_F3D824(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = sub_DB8BEC(a1);
  unint64_t v7 = sub_DB893C(a1);
  BOOL v8 = a3 == 2;
  BOOL v9 = a3 != 0;
  if (v6 != 2)
  {
    BOOL v8 = 0;
    BOOL v9 = 0;
  }
  BOOL v10 = a3 == 3;
  int v11 = a3 == 3 || v8;
  int v12 = v10 || v9;
  BOOL v13 = v6 == 2;
  uint64_t v14 = HIDWORD(v7) & 1;
  uint64_t v15 = (v7 >> 24) & 1;
  if (sub_401FE4(a2)) {
    int v16 = 3;
  }
  else {
    int v16 = 1;
  }
  if (v6) {
    v16 |= 0x10u;
  }
  if (v11) {
    v16 |= 4u;
  }
  if (v12) {
    v16 |= 8u;
  }
  unsigned int v17 = v16 & 0xFFFFFF9F;
  if ((v13 & v14) != 0) {
    int v18 = 32;
  }
  else {
    int v18 = 0;
  }
  if ((v13 & v15) != 0) {
    int v19 = 64;
  }
  else {
    int v19 = 0;
  }
  return v19 | v18 | v17;
}

uint64_t sub_F3D90C(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = sub_DBE134(a1);
  unint64_t v7 = sub_DBBBCC(a1);
  BOOL v8 = a3 == 2;
  BOOL v9 = a3 != 0;
  if (v6 != 2)
  {
    BOOL v8 = 0;
    BOOL v9 = 0;
  }
  BOOL v10 = a3 == 3;
  int v11 = a3 == 3 || v8;
  int v12 = v10 || v9;
  BOOL v13 = v6 == 2;
  uint64_t v14 = HIDWORD(v7) & 1;
  uint64_t v15 = (v7 >> 24) & 1;
  if (sub_401FE4(a2)) {
    int v16 = 3;
  }
  else {
    int v16 = 1;
  }
  if (v6) {
    v16 |= 0x10u;
  }
  if (v11) {
    v16 |= 4u;
  }
  if (v12) {
    v16 |= 8u;
  }
  unsigned int v17 = v16 & 0xFFFFFF9F;
  if ((v13 & v14) != 0) {
    int v18 = 32;
  }
  else {
    int v18 = 0;
  }
  if ((v13 & v15) != 0) {
    int v19 = 64;
  }
  else {
    int v19 = 0;
  }
  return v19 | v18 | v17;
}

void sub_F3D9F4()
{
  unk_25FCE77 = 16641;
  word_25FCE60 = 65;
  byte_25FCE8F = 1;
  byte_25FCE79 = 0;
}

uint64_t sub_F3DA1C(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  unint64_t v4 = *a2;
  if (v2 - *a1 == a2[1] - *a2)
  {
    if (v3 == v2) {
      return 0;
    }
    while (1)
    {
      BOOL v5 = *v3 == *v4 && v3[1] == v4[1];
      if (!v5
        || *((_DWORD *)v3 + 2) != *((_DWORD *)v4 + 2)
        || *((_DWORD *)v3 + 3) != *((_DWORD *)v4 + 3)
        || *((void *)v3 + 2) != *((void *)v4 + 2))
      {
        break;
      }
      v3 += 24;
      v4 += 24;
      if (v3 == v2) {
        return 0;
      }
    }
  }
  return 1;
}

void sub_F3DAA8(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_F3F858(a1, (void (*)(void *__return_ptr, void))sub_F3DB44, (uint64_t)&__p);
  uint64_t v3 = (unsigned __int8 *)__p;
  unint64_t v4 = (unsigned __int8 *)v8;
  *(_OWORD *)(a2 + 8) = v8;
  unint64_t v5 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3));
  *(void *)a2 = v3;
  long long v8 = 0uLL;
  __p = 0;
  if (v4 == v3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  sub_F3E3E4(v3, v4, v6, 1);
  if (__p)
  {
    *(void *)&long long v8 = __p;
    operator delete(__p);
  }
}

unint64_t sub_F3DB44@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  char v11 = 4;
  strcpy((char *)__p, "from");
  uint64_t v4 = sub_561B0(a1, (uint64_t)__p);
  __int16 v5 = sub_F3DC1C(v4);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  char v11 = 2;
  strcpy((char *)__p, "to");
  uint64_t v6 = sub_561B0(a1, (uint64_t)__p);
  __int16 v7 = sub_F3DC1C(v6);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  unint64_t result = sub_ED57A0(a1);
  *(_WORD *)a2 = v5 | (v7 << 8);
  *(void *)(a2 + 8) = result;
  *(void *)(a2 + 16) = v9;
  return result;
}

void sub_F3DBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F3DC1C(uint64_t a1)
{
  uint64_t v2 = sub_F3DD84(&xmmword_25FCE90, a1);
  if (!v2)
  {
    sub_E1B4((uint64_t)v15);
    uint64_t v4 = sub_188FC78(v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/routing/src/route-planning/path-finding/FormOfWayTransitionPenalties.cpp", 149);
    sub_188FC78(v4, (uint64_t)":", 1);
    __int16 v5 = (void *)std::ostream::operator<<();
    uint64_t v6 = sub_188FC78(v5, (uint64_t)":", 1);
    __int16 v7 = sub_188FC78(v6, (uint64_t)"Invalid form of way \"", 21);
    int v8 = *(char *)(a1 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = *(void *)a1;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a1 + 8);
    }
    char v11 = sub_188FC78(v7, v9, v10);
    sub_188FC78(v11, (uint64_t)"\"", 1);
    exception = __cxa_allocate_exception(0x40uLL);
    std::stringbuf::str();
    BOOL v13 = (void *)sub_2F404((uint64_t)exception, &v14);
  }
  return *((unsigned __int8 *)v2 + 40);
}

void sub_F3DD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_1C02990((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_1C02990((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *sub_F3DD84(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  int v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    BOOL v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          unint64_t result = 0;
          BOOL v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        unint64_t result = 0;
        BOOL v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

unsigned __int8 *sub_F3DFB4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  int8x8_t v7 = (unsigned char *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v10 = v9;
  }
  unint64_t v11 = sub_B128((uint64_t)v43, (uint64_t *)a2, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v13) {
        unint64_t v4 = v11 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v11;
    }
    uint64_t v15 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      uint64_t v16 = (unsigned __int8 *)*v15;
      if (*v15)
      {
        char v17 = v7[23];
        if (v17 >= 0) {
          uint64_t v18 = v7[23];
        }
        else {
          uint64_t v18 = *((void *)v7 + 1);
        }
        if (v17 < 0) {
          int8x8_t v7 = *(unsigned char **)v7;
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = *((void *)v16 + 1);
            if (v23 == v12)
            {
              uint64_t v24 = v16[39];
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = v16[39];
              }
              else {
                uint64_t v25 = *((void *)v16 + 3);
              }
              if (v25 == v18)
              {
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v16 + 2), v7, *((void *)v16 + 3))) {
                    return v16;
                  }
                }
                else
                {
                  if (!v16[39]) {
                    return v16;
                  }
                  uint64_t v26 = 0;
                  while (v16[v26 + 16] == v7[v26])
                  {
                    if (v24 == ++v26) {
                      return v16;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v16 = *(unsigned __int8 **)v16;
            if (!v16) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v19 = *((void *)v16 + 1);
          if (v19 == v12)
          {
            uint64_t v20 = v16[39];
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = v16[39];
            }
            else {
              uint64_t v21 = *((void *)v16 + 3);
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v16 + 2), v7, *((void *)v16 + 3))) {
                  return v16;
                }
              }
              else
              {
                if (!v16[39]) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (v16[v22 + 16] == v7[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          uint64_t v16 = *(unsigned __int8 **)v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  unint64_t v27 = (void *)(a1 + 16);
  uint64_t v16 = (unsigned __int8 *)operator new(0x30uLL);
  v43[0] = v16;
  v43[1] = a1 + 16;
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = v12;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  *((void *)v16 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  v16[40] = *a4;
  char v44 = 1;
  float v28 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v29 = *(float *)(a1 + 32);
  if (v13 && (float)(v29 * (float)v13) >= v28)
  {
    uint64_t v30 = *(void *)a1;
    unint64_t v31 = *(void **)(*(void *)a1 + 8 * v4);
    if (v31)
    {
LABEL_54:
      *(void *)uint64_t v16 = *v31;
LABEL_89:
      *unint64_t v31 = v16;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v32 = 1;
    if (v13 >= 3) {
      BOOL v32 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v33 = v32 | (2 * v13);
    unint64_t v34 = vcvtps_u32_f32(v28 / v29);
    if (v33 <= v34) {
      size_t prime = v34;
    }
    else {
      size_t prime = v33;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v36 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v36) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v36)
    {
      unint64_t v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v36 < 3uLL || (uint8x8_t v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        unint64_t v37 = std::__next_prime(v37);
      }
      else
      {
        uint64_t v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2) {
          unint64_t v37 = v39;
        }
      }
      if (prime <= v37) {
        size_t prime = v37;
      }
      if (prime < *(void *)&v36) {
LABEL_65:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v40 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        uint64_t v30 = *(void *)a1;
        unint64_t v31 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        if (v31) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v12;
        uint64_t v30 = *(void *)a1;
        unint64_t v31 = *(void **)(*(void *)a1 + 8 * v12);
        if (v31) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v40 & v12;
      uint64_t v30 = *(void *)a1;
      unint64_t v31 = *(void **)(*(void *)a1 + 8 * (v40 & v12));
      if (v31) {
        goto LABEL_54;
      }
    }
  }
  *(void *)uint64_t v16 = *v27;
  *unint64_t v27 = v16;
  *(void *)(v30 + 8 * v4) = v27;
  if (*(void *)v16)
  {
    unint64_t v41 = *(void *)(*(void *)v16 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v41 >= v13) {
        v41 %= v13;
      }
    }
    else
    {
      v41 &= v13 - 1;
    }
    unint64_t v31 = (void *)(*(void *)a1 + 8 * v41);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_F3E3CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_F3E3E4(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v9 = a2 - 24;
    int v139 = a2 - 72;
    v140 = a2 - 48;
    unint64_t v10 = a1;
    v141 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                unsigned int v63 = *(a2 - 24);
                unsigned int v64 = *v10;
                unsigned int v65 = v10[1];
                if (v63 < v64 || (v64 >= v63 ? (BOOL v66 = *(a2 - 23) >= v65) : (BOOL v66 = 1), !v66))
                {
                  *(void *)&v149[14] = *((void *)v10 + 2);
                  *(_OWORD *)v149 = *(_OWORD *)(v10 + 2);
                  *unint64_t v10 = *(a2 - 24);
                  v10[1] = *(a2 - 23);
                  *(_OWORD *)(v10 + 8) = *((_OWORD *)a2 - 1);
                  *(a2 - 24) = v64;
                  *(a2 - 23) = v65;
                  *((_OWORD *)a2 - 1) = *(_OWORD *)&v149[6];
                }
                break;
              case 3uLL:
                sub_F3F228(v10, v10 + 24, v9);
                break;
              case 4uLL:
                sub_F3F6D4(v10, v10 + 24, v10 + 48, v9);
                break;
              case 5uLL:
                sub_F3F038(v10, v10 + 24, v10 + 48, v10 + 72, v9);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 575)
          {
            if (a4)
            {
              if (v10 != a2)
              {
                uint64_t v67 = v10 + 24;
                if (v10 + 24 != a2)
                {
                  uint64_t v68 = 0;
                  size_t v69 = v10;
                  do
                  {
                    uint64_t v72 = v67;
                    unsigned int v73 = v69[24];
                    unsigned int v74 = v69[25];
                    unsigned int v75 = *v69;
                    if (v73 < v75 || (v75 >= v73 ? (BOOL v76 = v74 >= v69[1]) : (BOOL v76 = 1), !v76))
                    {
                      *(_OWORD *)v150 = *(_OWORD *)(v69 + 26);
                      *(void *)&v150[14] = *((void *)v69 + 5);
                      v69[24] = *v69;
                      v72[1] = v69[1];
                      *(_OWORD *)(v72 + 8) = *(_OWORD *)(v69 + 8);
                      if (v69 == v10)
                      {
LABEL_124:
                        uint64_t v70 = v69 + 8;
                        uint64_t v71 = v10;
                      }
                      else
                      {
                        uint64_t v77 = v68;
                        while (1)
                        {
                          uint64_t v78 = &v10[v77];
                          unsigned int v79 = v10[v77 - 24];
                          unsigned int v80 = v10[v77 - 23];
                          if (v73 >= v79 && (v79 < v73 || v74 >= v80)) {
                            break;
                          }
                          unsigned __int8 *v78 = v79;
                          v78[1] = v80;
                          *(_OWORD *)(v78 + 8) = *((_OWORD *)v78 - 1);
                          v77 -= 24;
                          if (!v77)
                          {
                            size_t v69 = v10;
                            goto LABEL_124;
                          }
                        }
                        uint64_t v71 = &v10[v77];
                        uint64_t v70 = &v10[v77 + 8];
                      }
                      unsigned __int8 *v71 = v73;
                      v71[1] = v74;
                      *(_OWORD *)uint64_t v70 = *(_OWORD *)&v150[6];
                    }
                    uint64_t v67 = v72 + 24;
                    v68 += 24;
                    size_t v69 = v72;
                  }
                  while (v72 + 24 != a2);
                }
              }
            }
            else if (v10 != a2)
            {
              long long v129 = v10 + 24;
              if (v10 + 24 != a2)
              {
                long long v130 = v10 + 8;
                do
                {
                  long long v131 = v129;
                  unsigned int v132 = a1[24];
                  unsigned int v133 = a1[25];
                  unsigned int v134 = *a1;
                  if (v132 < v134 || (v134 >= v132 ? (BOOL v135 = v133 >= a1[1]) : (BOOL v135 = 1), !v135))
                  {
                    *(_OWORD *)v153 = *(_OWORD *)(a1 + 26);
                    *(void *)&v153[14] = *((void *)a1 + 5);
                    LOBYTE(v136) = *a1;
                    for (uint64_t i = v130; ; i -= 24)
                    {
                      i[16] = v136;
                      i[17] = *(i - 7);
                      *(_OWORD *)(i + 24) = *(_OWORD *)i;
                      unsigned int v136 = *(i - 32);
                      if (v132 >= v136 && (v136 < v132 || v133 >= *(i - 31))) {
                        break;
                      }
                    }
                    *(i - 8) = v132;
                    *(i - 7) = v133;
                    *(_OWORD *)uint64_t i = *(_OWORD *)&v153[6];
                  }
                  long long v129 = v131 + 24;
                  v130 += 24;
                  a1 = v131;
                }
                while (v131 + 24 != a2);
              }
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v82 = (v12 - 2) >> 1;
              int64_t v83 = v82;
              do
              {
                int64_t v84 = v83;
                if (v82 >= v83)
                {
                  uint64_t v85 = (2 * v83) | 1;
                  long long v86 = &v10[24 * v85];
                  if (2 * v84 + 2 < (uint64_t)v12)
                  {
                    unsigned int v87 = v86[24];
                    unsigned int v88 = *v86;
                    if (v88 < v87 || (v87 >= v88 ? (BOOL v89 = v86[1] >= v86[25]) : (BOOL v89 = 1), !v89))
                    {
                      v86 += 24;
                      uint64_t v85 = 2 * v84 + 2;
                    }
                  }
                  unint64_t v90 = &v10[24 * v84];
                  unsigned int v91 = *v86;
                  unsigned int v92 = *v90;
                  if (v91 >= v92)
                  {
                    unsigned int v93 = v90[1];
                    if (v92 < v91 || v86[1] >= v93)
                    {
                      *(void *)&v151[14] = *((void *)v90 + 2);
                      *(_OWORD *)v151 = *(_OWORD *)(v90 + 2);
                      do
                      {
                        unint64_t v95 = v90;
                        unint64_t v90 = v86;
                        unsigned __int8 *v95 = v91;
                        v95[1] = v86[1];
                        *(_OWORD *)(v95 + 8) = *(_OWORD *)(v86 + 8);
                        if (v82 < v85) {
                          break;
                        }
                        uint64_t v96 = 2 * v85;
                        uint64_t v85 = (2 * v85) | 1;
                        long long v86 = &v10[24 * v85];
                        uint64_t v97 = v96 + 2;
                        if (v97 < (uint64_t)v12)
                        {
                          unsigned int v98 = v86[24];
                          unsigned int v99 = *v86;
                          if (v99 < v98 || (v98 >= v99 ? (BOOL v100 = v86[1] >= v86[25]) : (BOOL v100 = 1), !v100))
                          {
                            v86 += 24;
                            uint64_t v85 = v97;
                          }
                        }
                        unsigned int v91 = *v86;
                        if (v91 < v92) {
                          break;
                        }
                      }
                      while (v92 < v91 || v86[1] >= v93);
                      unsigned __int8 *v90 = v92;
                      v90[1] = v93;
                      *(_OWORD *)(v90 + 8) = *(_OWORD *)&v151[6];
                    }
                  }
                }
                int64_t v83 = v84 - 1;
              }
              while (v84);
              int64_t v102 = v11 / 0x18uLL;
              do
              {
                uint64_t v104 = 0;
                unsigned __int8 v105 = *v10;
                unsigned __int8 v106 = v10[1];
                *(void *)&v145[14] = *((void *)v10 + 2);
                *(_OWORD *)v145 = *(_OWORD *)(v10 + 2);
                v107 = v10;
                do
                {
                  unint64_t v108 = v107;
                  v107 += 24 * v104 + 24;
                  uint64_t v109 = 2 * v104;
                  uint64_t v104 = (2 * v104) | 1;
                  int64_t v110 = v109 + 2;
                  if (v110 < v102)
                  {
                    unsigned int v111 = v107[24];
                    unsigned int v112 = *v107;
                    if (v112 < v111 || (v111 >= v112 ? (BOOL v113 = v107[1] >= v107[25]) : (BOOL v113 = 1), !v113))
                    {
                      v107 += 24;
                      uint64_t v104 = v110;
                    }
                  }
                  unsigned __int8 *v108 = *v107;
                  v108[1] = v107[1];
                  *(_OWORD *)(v108 + 8) = *(_OWORD *)(v107 + 8);
                }
                while (v104 <= (uint64_t)((unint64_t)(v102 - 2) >> 1));
                v114 = v107 + 8;
                if (v107 == a2 - 24)
                {
                  unsigned __int8 *v107 = v105;
                  v107[1] = v106;
                  _OWORD *v114 = *(_OWORD *)&v145[6];
                }
                else
                {
                  unsigned __int8 *v107 = *(a2 - 24);
                  v107[1] = *(a2 - 23);
                  _OWORD *v114 = *((_OWORD *)a2 - 1);
                  *(a2 - 24) = v105;
                  *(a2 - 23) = v106;
                  *((_OWORD *)a2 - 1) = *(_OWORD *)&v145[6];
                  uint64_t v115 = v107 - v10 + 24;
                  if (v115 >= 25)
                  {
                    unint64_t v116 = v115 / 0x18uLL - 2;
                    unint64_t v117 = v116 >> 1;
                    char v118 = &v10[24 * (v116 >> 1)];
                    unsigned int v119 = *v118;
                    unsigned int v120 = *v107;
                    unsigned int v121 = v107[1];
                    if (v119 < v120 || (v120 >= v119 ? (BOOL v122 = v118[1] >= v121) : (BOOL v122 = 1), !v122))
                    {
                      *(void *)&v152[14] = *((void *)v107 + 2);
                      *(_OWORD *)v152 = *(_OWORD *)(v107 + 2);
                      unsigned __int8 *v107 = v119;
                      v107[1] = v118[1];
                      int v123 = &v10[24 * v117 + 8];
                      _OWORD *v114 = *(_OWORD *)v123;
                      if (v116 >= 2)
                      {
                        while (1)
                        {
                          unint64_t v125 = v117 - 1;
                          unint64_t v117 = (v117 - 1) >> 1;
                          long long v126 = &v10[24 * v117];
                          unsigned int v127 = *v126;
                          if (v127 < v120)
                          {
                            LOBYTE(v124) = v126[1];
                          }
                          else
                          {
                            unsigned int v124 = v126[1];
                            if (v120 < v127 || v124 >= v121) {
                              break;
                            }
                          }
                          *char v118 = v127;
                          v118[1] = v124;
                          int v123 = &v10[24 * v117 + 8];
                          *(_OWORD *)(v118 + 8) = *(_OWORD *)v123;
                          char v118 = &v10[24 * v117];
                          if (v125 <= 1) {
                            goto LABEL_207;
                          }
                        }
                      }
                      long long v126 = v118;
LABEL_207:
                      unsigned __int8 *v126 = v120;
                      v126[1] = v121;
                      *(_OWORD *)int v123 = *(_OWORD *)&v152[6];
                    }
                  }
                }
                a2 -= 24;
              }
              while (v102-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint8x8_t v14 = &v10[24 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0xC01) {
            break;
          }
          sub_F3F228(&a1[24 * (v12 >> 1)], a1, v9);
          --a3;
          if (a4) {
            goto LABEL_24;
          }
LABEL_9:
          unsigned int v18 = *(a1 - 24);
          unsigned int v19 = *a1;
          if (v18 < v19) {
            goto LABEL_25;
          }
          unsigned int v20 = a1[1];
          if (v19 >= v18 && *(a1 - 23) < v20) {
            goto LABEL_25;
          }
          *(void *)&v143[14] = *((void *)a1 + 2);
          *(_OWORD *)v143 = *(_OWORD *)(a1 + 2);
          unsigned int v21 = *v9;
          if (v19 >= v21 && (v21 < v19 || v20 >= *(a2 - 23)))
          {
            uint64_t v59 = a1 + 24;
            do
            {
              unint64_t v10 = v59;
              if (v59 >= a2) {
                break;
              }
              unsigned int v60 = *v59;
              if (v19 < v60) {
                break;
              }
              unsigned int v61 = v59[1];
              v59 += 24;
            }
            while (v60 < v19 || v20 >= v61);
          }
          else
          {
            uint64_t v22 = a1 + 24;
            do
            {
              unint64_t v10 = v22;
              unsigned int v23 = *v22;
              if (v19 < v23) {
                break;
              }
              unsigned int v24 = v22[1];
              v22 += 24;
            }
            while (v23 < v19 || v20 >= v24);
          }
          j = a2;
          if (v10 < a2)
          {
            for (j = v9; v19 < v21 || v21 >= v19 && v20 < j[1]; j -= 24)
            {
              unsigned int v49 = *(j - 24);
              unsigned int v21 = v49;
            }
          }
          if (v10 < j)
          {
            LOBYTE(v50) = *v10;
            do
            {
              unsigned __int8 v51 = v10[1];
              *(void *)&v148[14] = *((void *)v10 + 2);
              *(_OWORD *)v148 = *(_OWORD *)(v10 + 2);
              *unint64_t v10 = *j;
              v10[1] = j[1];
              *(_OWORD *)(v10 + 8) = *(_OWORD *)(j + 8);
              unsigned __int8 *j = v50;
              j[1] = v51;
              *(_OWORD *)(j + 8) = *(_OWORD *)&v148[6];
              uint64_t v52 = v10 + 24;
              do
              {
                unint64_t v10 = v52;
                unsigned int v50 = *v52;
                if (v19 < v50) {
                  break;
                }
                unsigned int v53 = v52[1];
                v52 += 24;
              }
              while (v50 < v19 || v20 >= v53);
              do
              {
                do
                {
                  unsigned int v56 = *(j - 24);
                  j -= 24;
                  unsigned int v55 = v56;
                }
                while (v19 < v56);
              }
              while (v55 >= v19 && v20 < j[1]);
            }
            while (v10 < j);
          }
          BOOL v4 = v10 - 24 >= a1;
          BOOL v5 = v10 - 24 == a1;
          if (v10 - 24 != a1)
          {
            *a1 = *(v10 - 24);
            a1[1] = *(v10 - 23);
            *(_OWORD *)(a1 + 8) = *((_OWORD *)v10 - 1);
          }
          a4 = 0;
          *(v10 - 24) = v19;
          *(v10 - 23) = v20;
          *((_OWORD *)v10 - 1) = *(_OWORD *)&v143[6];
        }
        sub_F3F228(a1, &a1[24 * (v12 >> 1)], v9);
        uint64_t v15 = &a1[24 * v13];
        sub_F3F228(a1 + 24, v15 - 24, v140);
        a2 = v141;
        sub_F3F228(a1 + 48, &a1[24 * v13 + 24], v139);
        sub_F3F228(v15 - 24, v14, &a1[24 * v13 + 24]);
        unsigned __int8 v16 = *a1;
        unsigned __int8 v17 = a1[1];
        *(void *)&v146[14] = *((void *)a1 + 2);
        *(_OWORD *)v146 = *(_OWORD *)(a1 + 2);
        *a1 = *v14;
        a1[1] = v14[1];
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(v15 + 8);
        *uint8x8_t v14 = v16;
        v14[1] = v17;
        *(_OWORD *)(v15 + 8) = *(_OWORD *)&v146[6];
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_9;
        }
LABEL_24:
        unsigned int v19 = *a1;
LABEL_25:
        uint64_t v27 = 0;
        unsigned int v28 = a1[1];
        *(void *)&v144[14] = *((void *)a1 + 2);
        *(_OWORD *)uint64_t v144 = *(_OWORD *)(a1 + 2);
        while (1)
        {
          unsigned int v29 = a1[v27 + 24];
          if (v29 >= v19 && (v19 < v29 || a1[v27 + 25] >= v28)) {
            break;
          }
          v27 += 24;
        }
        unint64_t v31 = (unint64_t)&a1[v27 + 24];
        BOOL v32 = v9;
        if (v27)
        {
          do
          {
            unint64_t v33 = v32;
            unsigned int v34 = *v32;
            if (v34 < v19) {
              break;
            }
            unsigned int v35 = v32[1];
            v32 -= 24;
          }
          while (v19 < v34 || v35 >= v28);
LABEL_47:
          unint64_t v10 = (unsigned __int8 *)v31;
          if (v31 < (unint64_t)v33)
          {
            unint64_t v41 = v33;
            do
            {
              unsigned __int8 v42 = v10[1];
              *(void *)&v147[14] = *((void *)v10 + 2);
              *(_OWORD *)uint64_t v147 = *(_OWORD *)(v10 + 2);
              *unint64_t v10 = *v41;
              v10[1] = v41[1];
              *(_OWORD *)(v10 + 8) = *(_OWORD *)(v41 + 8);
              *unint64_t v41 = v29;
              v41[1] = v42;
              *(_OWORD *)(v41 + 8) = *(_OWORD *)&v147[6];
              do
              {
                do
                {
                  unsigned int v43 = v10[24];
                  v10 += 24;
                  unsigned int v29 = v43;
                }
                while (v43 < v19);
              }
              while (v19 >= v29 && v10[1] < v28);
              uint64_t v45 = v41 - 24;
              do
              {
                unint64_t v41 = v45;
                unsigned int v46 = *v45;
                if (v46 < v19) {
                  break;
                }
                unsigned int v47 = v45[1];
                v45 -= 24;
              }
              while (v19 < v46 || v47 >= v28);
            }
            while (v10 < v41);
          }
        }
        else
        {
          unint64_t v37 = v9;
          while (1)
          {
            unint64_t v33 = v37;
            uint8x8_t v38 = v37 + 24;
            if (v31 >= (unint64_t)v38) {
              break;
            }
            unsigned int v39 = *v33;
            if (v39 >= v19)
            {
              unint64_t v37 = v33 - 24;
              if (v19 < v39 || v33[1] >= v28) {
                continue;
              }
            }
            goto LABEL_47;
          }
          unint64_t v33 = v38;
          unint64_t v10 = (unsigned __int8 *)v31;
        }
        if (v10 - 24 != a1)
        {
          *a1 = *(v10 - 24);
          a1[1] = *(v10 - 23);
          *(_OWORD *)(a1 + 8) = *((_OWORD *)v10 - 1);
        }
        *(v10 - 24) = v19;
        *(v10 - 23) = v28;
        *((_OWORD *)v10 - 1) = *(_OWORD *)&v144[6];
        if (v31 >= (unint64_t)v33) {
          break;
        }
LABEL_92:
        sub_F3E3E4(a1, v10 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v58 = sub_F3F418(a1, v10 - 24);
      if (sub_F3F418(v10, a2)) {
        break;
      }
      if (!v58) {
        goto LABEL_92;
      }
    }
    a2 = v10 - 24;
    if (!v58) {
      continue;
    }
    break;
  }
}

void sub_F3F038(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  sub_F3F6D4(a1, a2, a3, a4);
  unsigned int v10 = *a5;
  unsigned int v11 = *a4;
  unsigned int v12 = a4[1];
  if (v10 < v11 || (v11 >= v10 ? (BOOL v13 = a5[1] >= v12) : (BOOL v13 = 1), !v13))
  {
    *(_OWORD *)unsigned int v23 = *(_OWORD *)(a4 + 2);
    *(void *)&v23[14] = *((void *)a4 + 2);
    *a4 = v10;
    a4[1] = a5[1];
    *(_OWORD *)(a4 + 8) = *(_OWORD *)(a5 + 8);
    *a5 = v11;
    a5[1] = v12;
    *(_OWORD *)(a5 + 8) = *(_OWORD *)&v23[6];
    unsigned int v14 = *a4;
    unsigned int v15 = *a3;
    unsigned int v16 = a3[1];
    if (v14 < v15 || v15 >= v14 && a4[1] < v16)
    {
      *(_OWORD *)unsigned int v24 = *(_OWORD *)(a3 + 2);
      *(void *)&v24[14] = *((void *)a3 + 2);
      *a3 = v14;
      a3[1] = a4[1];
      *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
      *a4 = v15;
      a4[1] = v16;
      *(_OWORD *)(a4 + 8) = *(_OWORD *)&v24[6];
      unsigned int v17 = *a3;
      unsigned int v18 = *a2;
      unsigned int v19 = a2[1];
      if (v17 < v18 || v18 >= v17 && a3[1] < v19)
      {
        *(_OWORD *)uint64_t v25 = *(_OWORD *)(a2 + 2);
        *(void *)&v25[14] = *((void *)a2 + 2);
        *a2 = v17;
        a2[1] = a3[1];
        *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
        *a3 = v18;
        a3[1] = v19;
        *(_OWORD *)(a3 + 8) = *(_OWORD *)&v25[6];
        unsigned int v20 = *a2;
        unsigned int v21 = *a1;
        unsigned int v22 = a1[1];
        if (v20 < v21 || v21 >= v20 && a2[1] < v22)
        {
          *(_OWORD *)uint64_t v26 = *(_OWORD *)(a1 + 2);
          *(void *)&v26[14] = *((void *)a1 + 2);
          *a1 = v20;
          a1[1] = a2[1];
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
          *a2 = v21;
          a2[1] = v22;
          *(_OWORD *)(a2 + 8) = *(_OWORD *)&v26[6];
        }
      }
    }
  }
}

__n128 sub_F3F228(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = a2[1];
  unsigned int v5 = *a1;
  unsigned int v6 = a1[1];
  if (v3 >= v5 && (v5 >= v3 ? (BOOL v7 = v4 >= v6) : (BOOL v7 = 1), v7))
  {
    unsigned int v8 = *a3;
    if (v8 < v3 || (v3 >= v8 ? (BOOL v9 = a3[1] >= v4) : (BOOL v9 = 1), !v9))
    {
      *(_OWORD *)unsigned int v17 = *(_OWORD *)(a2 + 2);
      *(void *)&v17[14] = *((void *)a2 + 2);
      *a2 = v8;
      a2[1] = a3[1];
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *a3 = v3;
      a3[1] = v4;
      __n128 result = *(__n128 *)&v17[6];
      *(_OWORD *)(a3 + 8) = *(_OWORD *)&v17[6];
      unsigned int v11 = *a2;
      unsigned int v12 = *a1;
      unsigned int v13 = a1[1];
      if (v11 < v12 || v12 >= v11 && a2[1] < v13)
      {
        *(_OWORD *)unsigned int v18 = *(_OWORD *)(a1 + 2);
        *(void *)&v18[14] = *((void *)a1 + 2);
        *a1 = v11;
        a1[1] = a2[1];
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *a2 = v12;
        a2[1] = v13;
        __n128 result = *(__n128 *)&v18[6];
        *(_OWORD *)(a2 + 8) = *(_OWORD *)&v18[6];
      }
    }
  }
  else
  {
    unsigned int v14 = *a3;
    if (v14 < v3 || (v3 >= v14 ? (BOOL v15 = a3[1] >= v4) : (BOOL v15 = 1), !v15))
    {
      *(_OWORD *)unsigned int v20 = *(_OWORD *)(a1 + 2);
      *(void *)&v20[14] = *((void *)a1 + 2);
      *a1 = v14;
      a1[1] = a3[1];
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a3 + 8);
      goto LABEL_27;
    }
    *(_OWORD *)unsigned int v19 = *(_OWORD *)(a1 + 2);
    *(void *)&v19[14] = *((void *)a1 + 2);
    *a1 = v3;
    a1[1] = a2[1];
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *a2 = v5;
    a2[1] = v6;
    __n128 result = *(__n128 *)&v19[6];
    *(_OWORD *)(a2 + 8) = *(_OWORD *)&v19[6];
    unsigned int v16 = *a3;
    if (v16 < v5 || v5 >= v16 && a3[1] < v6)
    {
      *(_OWORD *)unsigned int v20 = *(_OWORD *)(a2 + 2);
      *(void *)&v20[14] = *((void *)a2 + 2);
      *a2 = v16;
      a2[1] = a3[1];
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
LABEL_27:
      *a3 = v5;
      a3[1] = v6;
      __n128 result = *(__n128 *)&v20[6];
      *(_OWORD *)(a3 + 8) = *(_OWORD *)&v20[6];
    }
  }
  return result;
}

BOOL sub_F3F418(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unsigned int v6 = *(a2 - 24);
      unsigned int v7 = *a1;
      unsigned int v8 = a1[1];
      if (v6 < v7 || (v7 >= v6 ? (BOOL v9 = *(a2 - 23) >= v8) : (BOOL v9 = 1), !v9))
      {
        *(_OWORD *)uint64_t v26 = *(_OWORD *)(a1 + 2);
        *(void *)&v26[14] = *((void *)a1 + 2);
        *a1 = v6;
        a1[1] = *(a2 - 23);
        *(_OWORD *)(a1 + 8) = *((_OWORD *)a2 - 1);
        *(a2 - 24) = v7;
        *(a2 - 23) = v8;
        *((_OWORD *)a2 - 1) = *(_OWORD *)&v26[6];
      }
      return result;
    case 3uLL:
      sub_F3F228(a1, a1 + 24, a2 - 24);
      return 1;
    case 4uLL:
      sub_F3F6D4(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      sub_F3F038(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      unsigned int v10 = a1 + 48;
      sub_F3F228(a1, a1 + 24, a1 + 48);
      unsigned int v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    unsigned int v16 = *v11;
    unsigned int v17 = *v10;
    unsigned int v18 = v11[1];
    if (v16 < v17 || (v17 >= v16 ? (BOOL v19 = v18 >= v10[1]) : (BOOL v19 = 1), !v19))
    {
      *(void *)&v27[14] = *((void *)v11 + 2);
      *(_OWORD *)uint64_t v27 = *(_OWORD *)(v11 + 2);
      unsigned __int8 *v11 = *v10;
      v11[1] = v10[1];
      *(_OWORD *)(v11 + 8) = *(_OWORD *)(v10 + 8);
      if (v10 == a1)
      {
        unsigned int v14 = v10 + 8;
LABEL_11:
        BOOL v15 = a1;
      }
      else
      {
        uint64_t v20 = v12;
        while (1)
        {
          unsigned int v21 = &a1[v20];
          unsigned int v22 = a1[v20 + 24];
          unsigned int v23 = a1[v20 + 25];
          if (v16 >= v22 && (v22 < v16 || v18 >= v23)) {
            break;
          }
          v21[48] = v22;
          v21[49] = v23;
          *(_OWORD *)(v21 + 56) = *((_OWORD *)v21 + 2);
          v20 -= 24;
          if (v20 == -48)
          {
            unsigned int v14 = a1 + 8;
            goto LABEL_11;
          }
        }
        uint64_t v25 = &a1[v20];
        unsigned int v14 = &a1[v20 + 56];
        BOOL v15 = v25 + 48;
      }
      *BOOL v15 = v16;
      v15[1] = v18;
      *(_OWORD *)unsigned int v14 = *(_OWORD *)&v27[6];
      if (++v13 == 8) {
        return v11 + 24 == a2;
      }
    }
    unsigned int v10 = v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2) {
      return 1;
    }
  }
}

void sub_F3F6D4(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  sub_F3F228(a1, a2, a3);
  unsigned int v8 = *a4;
  unsigned int v9 = *a3;
  unsigned int v10 = a3[1];
  if (v8 < v9 || (v9 >= v8 ? (BOOL v11 = a4[1] >= v10) : (BOOL v11 = 1), !v11))
  {
    *(_OWORD *)unsigned int v18 = *(_OWORD *)(a3 + 2);
    *(void *)&v18[14] = *((void *)a3 + 2);
    *a3 = v8;
    a3[1] = a4[1];
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
    *a4 = v9;
    a4[1] = v10;
    *(_OWORD *)(a4 + 8) = *(_OWORD *)&v18[6];
    unsigned int v12 = *a3;
    unsigned int v13 = *a2;
    unsigned int v14 = a2[1];
    if (v12 < v13 || v13 >= v12 && a3[1] < v14)
    {
      *(_OWORD *)BOOL v19 = *(_OWORD *)(a2 + 2);
      *(void *)&v19[14] = *((void *)a2 + 2);
      *a2 = v12;
      a2[1] = a3[1];
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *a3 = v13;
      a3[1] = v14;
      *(_OWORD *)(a3 + 8) = *(_OWORD *)&v19[6];
      unsigned int v15 = *a2;
      unsigned int v16 = *a1;
      unsigned int v17 = a1[1];
      if (v15 < v16 || v16 >= v15 && a2[1] < v17)
      {
        *(_OWORD *)uint64_t v20 = *(_OWORD *)(a1 + 2);
        *(void *)&v20[14] = *((void *)a1 + 2);
        *a1 = v15;
        a1[1] = a2[1];
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *a2 = v16;
        a2[1] = v17;
        *(_OWORD *)(a2 + 8) = *(_OWORD *)&v20[6];
      }
    }
  }
}

uint64_t *sub_F3F858@<X0>(uint64_t *result@<X0>, void (*a2)(void *__return_ptr, void)@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v6 = *result;
  uint64_t v5 = result[1];
  uint64_t v7 = v5 - *result;
  if (v5 != *result)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    uint64_t v8 = v7 >> 4;
    BOOL result = (uint64_t *)operator new(24 * (v7 >> 4));
    uint64_t v9 = (uint64_t)result;
    *(void *)a3 = result;
    *(void *)(a3 + 8) = result;
    for (*(void *)(a3 + 16) = &result[3 * v8]; v6 != v5; v6 += 16)
    {
      if (*(_DWORD *)(v6 + 8) != 2)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      a2(v11, *(void *)v6);
      BOOL result = (uint64_t *)sub_F3F994((char **)a3, v9, (uint64_t)v11);
      uint64_t v9 = (uint64_t)(result + 3);
    }
  }
  return result;
}

void sub_F3F970(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F3F994(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 24;
  uint64_t v8 = (uint64_t)&(*a1)[24 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v5) >> 3) + 1;
    if (v15 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v5) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x555555555555555) {
      unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v17 = v15;
    }
    unint64_t v37 = a1 + 2;
    if (v17)
    {
      if (v17 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      unsigned int v18 = (char *)operator new(24 * v17);
    }
    else
    {
      unsigned int v18 = 0;
    }
    unint64_t v33 = v18;
    unsigned int v34 = &v18[24 * v7];
    unsigned int v35 = v34;
    int8x8_t v36 = &v18[24 * v17];
    sub_F3FCBC((uint64_t)&v33, (__n128 *)a3);
    uint64_t v20 = v34;
    unsigned int v21 = *a1;
    unsigned int v22 = v34;
    if (*a1 != (char *)v8)
    {
      uint64_t v23 = v8;
      unsigned int v24 = v34;
      do
      {
        unsigned int v22 = v24 - 24;
        long long v25 = *(_OWORD *)(v23 - 24);
        *((void *)v24 - 1) = *(void *)(v23 - 8);
        *(_OWORD *)(v24 - 24) = v25;
        v23 -= 24;
        v24 -= 24;
      }
      while ((char *)v23 != v21);
    }
    unsigned int v34 = v22;
    uint64_t v26 = a1[1];
    uint64_t v27 = v35;
    if (v26 != (char *)v8)
    {
      do
      {
        long long v28 = *(_OWORD *)v8;
        *((void *)v27 + 2) = *(void *)(v8 + 16);
        *(_OWORD *)uint64_t v27 = v28;
        v27 += 24;
        v8 += 24;
      }
      while ((char *)v8 != v26);
      unsigned int v22 = v34;
      uint64_t v8 = (uint64_t)a1[1];
    }
    unsigned int v29 = *a1;
    *a1 = v22;
    a1[1] = v27;
    uint64_t v30 = a1[2];
    a1[2] = v36;
    unsigned int v35 = (char *)v8;
    int8x8_t v36 = v30;
    unint64_t v33 = v29;
    unsigned int v34 = v29;
    if ((char *)v8 != v29) {
      unsigned int v35 = &v29[(v8 - (uint64_t)v29 - 24) % 0x18uLL];
    }
    if (v29) {
      operator delete(v29);
    }
    return (uint64_t)v20;
  }
  else
  {
    if (v8 != v6)
    {
      uint64_t v10 = v8 + 24;
      unint64_t v11 = v6 - 24;
      if (v6 < 0x18)
      {
        a1[1] = (char *)v6;
        if (v6 == v10)
        {
LABEL_33:
          *(unsigned char *)uint64_t v8 = *(unsigned char *)a3;
          *(unsigned char *)(v8 + 1) = *(unsigned char *)(a3 + 1);
          *(_OWORD *)&v5[24 * v7 + 8] = *(_OWORD *)(a3 + 8);
          return v8;
        }
      }
      else
      {
        unint64_t v12 = v6 - 24;
        unsigned int v13 = a1[1];
        do
        {
          long long v14 = *(_OWORD *)v12;
          *((void *)v13 + 2) = *(void *)(v12 + 16);
          *(_OWORD *)unsigned int v13 = v14;
          v13 += 24;
          v12 += 24;
        }
        while (v12 < v6);
        a1[1] = v13;
        if (v6 == v10) {
          goto LABEL_33;
        }
      }
      uint64_t v31 = 8 * ((uint64_t)(v6 - v10) >> 3);
      do
      {
        *(unsigned char *)unint64_t v11 = *(unsigned char *)(v8 + v31 - 24);
        *(unsigned char *)(v11 + 1) = *(unsigned char *)(v8 + v31 - 23);
        *(_OWORD *)(v11 + 8) = *(_OWORD *)(v8 + v31 - 16);
        v11 -= 24;
        v31 -= 24;
      }
      while (v31);
      goto LABEL_33;
    }
    __n128 v19 = *(__n128 *)a3;
    *(void *)(v8 + 16) = *(void *)(a3 + 16);
    *(__n128 *)uint64_t v8 = v19;
    a1[1] = (char *)(v8 + 24);
  }
  return v8;
}

void sub_F3FC60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    unsigned int v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    unsigned int v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

__n128 sub_F3FCBC(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    uint64_t v5 = *(__n128 **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    if (v6 <= *(void *)a1)
    {
      unint64_t v13 = 0x5555555555555556 * (((char *)v4 - (char *)v5) >> 3);
      if (v4 == v5) {
        unint64_t v13 = 1;
      }
      if (v13 >= 0xAAAAAAAAAAAAAABLL) {
        sub_188D718();
      }
      unint64_t v14 = v13 >> 2;
      uint64_t v15 = 24 * v13;
      unint64_t v16 = (char *)operator new(24 * v13);
      unint64_t v17 = (__n128 *)&v16[24 * v14];
      uint64_t v19 = (uint64_t)v4 - v6;
      BOOL v18 = v4 == (__n128 *)v6;
      uint64_t v4 = v17;
      if (!v18)
      {
        uint64_t v20 = v19 / 24;
        uint64_t v4 = (__n128 *)((char *)v17 + 24 * v20);
        uint64_t v21 = 24 * v20;
        unsigned int v22 = &v16[24 * v14];
        do
        {
          __n128 v23 = *(__n128 *)v6;
          *((void *)v22 + 2) = *(void *)(v6 + 16);
          *(__n128 *)unsigned int v22 = v23;
          v22 += 24;
          v6 += 24;
          v21 -= 24;
        }
        while (v21);
      }
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v17;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v16[v15];
      if (v5)
      {
        operator delete(v5);
        uint64_t v4 = *(__n128 **)(a1 + 16);
      }
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(void *)a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -(v8 >> 1);
      if ((__n128 *)v6 == v4)
      {
        unint64_t v12 = (__n128 *)(v6 - 24 * v9);
      }
      else
      {
        do
        {
          unint64_t v11 = v6 + 24 * v10;
          *(_WORD *)unint64_t v11 = *(_WORD *)v6;
          *(_OWORD *)(v11 + 8) = *(_OWORD *)(v6 + 8);
          v6 += 24;
        }
        while ((__n128 *)v6 != v4);
        uint64_t v4 = *(__n128 **)(a1 + 8);
        unint64_t v12 = (__n128 *)(v6 + 24 * v10);
      }
      *(void *)(a1 + 8) = (char *)v4 + 24 * v10;
      *(void *)(a1 + 16) = v12;
      uint64_t v4 = v12;
    }
  }
  __n128 result = *a2;
  v4[1].n128_u64[0] = a2[1].n128_u64[0];
  *uint64_t v4 = result;
  *(void *)(a1 + 16) += 24;
  return result;
}

void sub_F3FE68()
{
  uint64_t v0 = 0;
  xmmword_25FCE90 = 0u;
  *(_OWORD *)&qword_25FCEA0 = 0u;
  dword_25FCEB0 = 1065353216;
  do
  {
    uint64_t v1 = (&off_243F0D0)[v0];
    if (!*v1) {
      goto LABEL_2;
    }
    size_t v2 = strlen((&off_243F0D0)[v0]);
    if (v2 >= 0x7FFFFFFFFFFFFFF8) {
      sub_188D690();
    }
    unint64_t v3 = v2;
    if (v2 >= 0x17)
    {
      uint64_t v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v2 | 7) != 0x17) {
        uint64_t v5 = v2 | 7;
      }
      uint64_t v6 = v5 + 1;
      uint64_t v4 = operator new(v5 + 1);
      __p[1] = (void *)v3;
      int64_t v17 = v6 | 0x8000000000000000;
      __p[0] = v4;
      if (v3 < 0x20) {
        goto LABEL_17;
      }
LABEL_12:
      if ((unint64_t)((char *)v4 - v1) >= 0x20)
      {
        int64_t v7 = &v1[v3 & 0xFFFFFFFFFFFFFFE0];
        uint64_t v8 = (char *)v4 + (v3 & 0xFFFFFFFFFFFFFFE0);
        uint64_t v9 = v4 + 1;
        uint64_t v10 = (long long *)(v1 + 16);
        unint64_t v11 = v3 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v12 = *v10;
          *(v9 - 1) = *(v10 - 1);
          _OWORD *v9 = v12;
          v9 += 2;
          v10 += 2;
          v11 -= 32;
        }
        while (v11);
        if (v3 == (v3 & 0x7FFFFFFFFFFFFFE0))
        {
LABEL_19:
          *uint64_t v8 = 0;
          if (v3)
          {
            if (v17 >= 0) {
              unint64_t v14 = __p;
            }
            else {
              unint64_t v14 = (void **)__p[0];
            }
            do
            {
              *(unsigned char *)unint64_t v14 = __tolower(*v1);
              unint64_t v14 = (void **)((char *)v14 + 1);
              ++v1;
              --v3;
            }
            while (v3);
          }
          goto LABEL_26;
        }
        do
        {
LABEL_18:
          char v13 = *v7++;
          *v8++ = v13;
        }
        while (v7 != &v1[v3]);
        goto LABEL_19;
      }
LABEL_17:
      int64_t v7 = v1;
      uint64_t v8 = v4;
      goto LABEL_18;
    }
    HIBYTE(v17) = v2;
    if (v2)
    {
      uint64_t v4 = __p;
      if (v3 < 0x20) {
        goto LABEL_17;
      }
      goto LABEL_12;
    }
    LOBYTE(__p[0]) = 0;
LABEL_26:
    unsigned __int8 v15 = v0;
    sub_F3DFB4((uint64_t)&xmmword_25FCE90, (uint64_t)__p, (uint64_t)__p, &v15);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
LABEL_2:
    ++v0;
  }
  while (v0 != 55);
}

void sub_F40028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  unint64_t v16 = (void **)qword_25FCEA0;
  if (qword_25FCEA0)
  {
    do
    {
      BOOL v18 = (void **)*v16;
      if (*((char *)v16 + 39) < 0) {
        operator delete(v16[2]);
      }
      operator delete(v16);
      unint64_t v16 = v18;
    }
    while (v18);
  }
  int64_t v17 = (void *)xmmword_25FCE90;
  *(void *)&xmmword_25FCE90 = 0;
  if (v17) {
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F400A0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a6;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  __p = operator new(0x20uLL);
  long long v12 = xmmword_20B8870;
  strcpy((char *)__p, "intersection_loop_blocker");
  uint64_t v9 = sub_560F4(a2, (uint64_t)&__p);
  sub_1066020(&v13, v9);
  sub_1066024((void *)(a1 + 32), a6, &v13);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 77) = 0;
  *(void *)(a1 + 88) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 96) = 0;
  sub_F40A10(a1 + 72, a2);
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return a1;
}

void sub_F40184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  unint64_t v16 = *(void **)(v14 + 48);
  if (v16)
  {
    *(void *)(v14 + 56) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F401B8(uint64_t a1, void *a2, uint64_t a3, int *a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = a1;
  if (!a5)
  {
    int v18 = 0;
    char v15 = 0;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(a1 + 8);
  sub_3F4FA4(&__p);
  *(unsigned char *)(v12 + 9586) = 1;
  uint64_t v14 = __p;
  uint64_t v13 = v92;
  if (__p == v92)
  {
    char v15 = 0;
    uint64_t v11 = a1;
    int v18 = a5;
    if (__p)
    {
LABEL_9:
      unsigned int v92 = v14;
      operator delete(v14);
    }
  }
  else
  {
    char v15 = 0;
    do
    {
      *(unsigned char *)(v12 + 9586) = 1;
      sub_F57008(v12 + 9592, 1);
      uint64_t v17 = sub_F57414(v12 + 9592, v14);
      if (v17 == -1) {
        sub_F57530(v12 + 9592, v14, v16, v97);
      }
      v15 |= v17 == -1;
      ++v14;
    }
    while (v14 != v13);
    uint64_t v14 = __p;
    uint64_t v11 = a1;
    int v18 = a5;
    if (__p) {
      goto LABEL_9;
    }
  }
LABEL_10:
  if (!*(unsigned char *)(v11 + 96)) {
    goto LABEL_18;
  }
  uint64_t v19 = *(void *)(v11 + 8);
  sub_10672EC(a2, 0, *(void **)v11, (uint64_t)&__p);
  uint64_t v20 = (unsigned char *)(v19 + 9586);
  *(unsigned char *)(v19 + 9586) = 1;
  unsigned int v22 = __p;
  uint64_t v21 = v92;
  if (__p == v92)
  {
    uint64_t v11 = a1;
    int v18 = a5;
    if (__p)
    {
LABEL_17:
      unsigned int v92 = v22;
      operator delete(v22);
    }
  }
  else
  {
    int64_t v82 = a2;
    char v23 = 0;
    uint64_t v24 = v19 + 9592;
    do
    {
      *uint64_t v20 = 1;
      sub_F57008(v24, 1);
      uint64_t v26 = sub_F57414(v24, v22);
      if (v26 == -1) {
        sub_F57530(v24, v22, v25, v97);
      }
      v23 |= v26 == -1;
      ++v22;
    }
    while (v22 != v21);
    unsigned int v22 = __p;
    a2 = v82;
    v15 |= v23;
    uint64_t v11 = a1;
    int v18 = a5;
    if (__p) {
      goto LABEL_17;
    }
  }
LABEL_18:
  if (v18)
  {
    sub_1066D28(*(void *)(v11 + 16), a2, &v105);
    long long v28 = (unint64_t *)v105;
    uint64_t v27 = (unint64_t *)v106;
    if (v105 != v106)
    {
      do
      {
        sub_F52FF0(a7, v28, (uint64_t)v28);
        v28 += 3;
      }
      while (v28 != v27);
    }
    if (a6) {
      goto LABEL_22;
    }
LABEL_26:
    unsigned int v29 = 0;
    int64_t v102 = 0;
    uint64_t v103 = 0;
    uint64_t v104 = 0;
    goto LABEL_27;
  }
  unsigned __int8 v105 = 0;
  unsigned __int8 v106 = 0;
  uint64_t v107 = 0;
  if (!a6) {
    goto LABEL_26;
  }
LABEL_22:
  sub_106704C(a2, (void **)&v102);
  uint64_t v30 = (unint64_t *)v102;
  unsigned int v29 = v103;
  if (v102 != (char *)v103)
  {
    do
    {
      sub_F52FF0(a8, v30, (uint64_t)v30);
      v30 += 3;
    }
    while (v30 != v29);
    unsigned int v29 = (unint64_t *)v102;
  }
LABEL_27:
  uint64_t v31 = (char *)v103;
  *(unsigned char *)(sub_EAD918((uint64_t)a2) + 8) = v29 != (unint64_t *)v31;
  if (v102 == (char *)v103)
  {
    BOOL v35 = 0;
    uint64_t v33 = a1;
  }
  else
  {
    BOOL v32 = v102 + 24;
    uint64_t v33 = a1;
    do
    {
      uint64_t v34 = *((void *)v32 - 1);
      BOOL v35 = *(unsigned char *)(**((void **)v32 - 2) + 424 * v34 + 312) != 0;
      if (*(unsigned char *)(**((void **)v32 - 2) + 424 * v34 + 312)) {
        BOOL v36 = 1;
      }
      else {
        BOOL v36 = v32 == (char *)v103;
      }
      v32 += 24;
    }
    while (!v36);
  }
  *(unsigned char *)(sub_EAD918((uint64_t)a2) + 9) = v35;
  if (v18)
  {
    sub_1067AB4((uint64_t)v97);
    uint8x8_t v38 = (void *)(v33 + 8);
    uint64_t v37 = *(void *)(v33 + 8);
    uint64_t v39 = *((void *)&v98 + 1);
    uint64_t v40 = v99;
    unint64_t v41 = (unsigned char *)(v37 + 9586);
    *(unsigned char *)(v37 + 9586) = 1;
    if (v39 == v40)
    {
      char v42 = 0;
    }
    else
    {
      char v42 = 0;
      uint64_t v43 = v37 + 9672;
      do
      {
        *unint64_t v41 = 1;
        sub_F533D4(v43, 1);
        uint64_t v45 = sub_F54008(v43, v39);
        if (v45 == -1) {
          sub_F542E8(v43, v39, v44, &__p);
        }
        v42 |= v45 == -1;
        v39 += 88;
      }
      while (v39 != v40);
      uint64_t v37 = *v38;
    }
    uint64_t v33 = a1;
  }
  else
  {
    char v42 = 0;
    uint64_t v101 = 0;
    long long v99 = 0u;
    *(_OWORD *)BOOL v100 = 0u;
    *(_OWORD *)uint64_t v97 = 0u;
    long long v98 = 0u;
    uint8x8_t v38 = (void *)(v33 + 8);
    uint64_t v37 = *(void *)(v33 + 8);
    *(unsigned char *)(v37 + 9586) = 1;
  }
  BOOL v46 = sub_ED7C38(v37 + 8, (uint64_t *)v100);
  sub_10676E0(*(void *)(v33 + 16), a2, a3, a4, &__p);
  BOOL v47 = __p == v92 && v93 == v94 && v95 == v96;
  sub_EADC70((uint64_t)a2, !v47);
  sub_1068760(*(char ***)(v33 + 16), (uint64_t)&v89);
  char v48 = v89;
  unsigned int v49 = v90;
  *(unsigned char *)(sub_EAD918((uint64_t)a2) + 7) = v48 != v49;
  unsigned int v50 = v105;
  unsigned __int8 v51 = v106;
  if (v105 == v106 && v97[0] == v97[1] && *((void *)&v98 + 1) == (void)v99 && v100[0] == v100[1])
  {
    uint64_t v68 = *v38;
    size_t v69 = (unsigned char *)(*v38 + 9586);
    *size_t v69 = 1;
    uint64_t v70 = __p;
    uint64_t v71 = v92;
    if (__p == v92)
    {
      char v72 = 0;
    }
    else
    {
      char v72 = 0;
      uint64_t v73 = v68 + 9592;
      do
      {
        *size_t v69 = 1;
        sub_F57008(v73, 1);
        uint64_t v75 = sub_F57414(v73, v70);
        if (v75 == -1) {
          sub_F57530(v73, v70, v74, v108);
        }
        v72 |= v75 == -1;
        ++v70;
      }
      while (v70 != v71);
      uint64_t v68 = *v38;
    }
    unsigned int v88 = (unsigned char *)(v68 + 9586);
    *(unsigned char *)(v68 + 9586) = 1;
    BOOL v76 = (char *)v93;
    uint64_t v77 = v94;
    if (v93 == v94)
    {
      char v78 = 0;
    }
    else
    {
      char v78 = 0;
      uint64_t v79 = v68 + 9672;
      do
      {
        unsigned char *v88 = 1;
        sub_F533D4(v79, 1);
        uint64_t v81 = sub_F54008(v79, (uint64_t)v76);
        if (v81 == -1) {
          sub_F542E8(v79, (uint64_t)v76, v80, v108);
        }
        v78 |= v81 == -1;
        v76 += 88;
      }
      while (v76 != v77);
      uint64_t v68 = *v38;
    }
    char v52 = v72 | v78 | sub_ED7C38(v68 + 8, (uint64_t *)&v95);
    unsigned int v50 = v105;
    unsigned __int8 v51 = v106;
  }
  else
  {
    char v52 = __p != v92 || v93 != v94 || v95 != v96;
  }
  if (v52) {
    unsigned int v53 = ((v15 | v42) | v46) & 1 | 2;
  }
  else {
    unsigned int v53 = ((v15 | v42) | v46) & 1;
  }
  if (v50 == v51) {
    uint64_t v54 = v53;
  }
  else {
    uint64_t v54 = v53 | 4;
  }
  if (v97[0] != v97[1] || *((void *)&v98 + 1) != (void)v99 || v100[0] != v100[1]) {
    uint64_t v54 = v54 | 8;
  }
  if (v89)
  {
    unint64_t v90 = v89;
    operator delete(v89);
  }
  unsigned int v55 = (char *)v95;
  if (v95)
  {
    unsigned int v56 = v96;
    long long v57 = v95;
    if (v96 != v95)
    {
      BOOL v58 = v96;
      do
      {
        unsigned int v60 = (void *)*((void *)v58 - 3);
        v58 -= 24;
        uint64_t v59 = v60;
        if (v60)
        {
          *((void *)v56 - 2) = v59;
          operator delete(v59);
        }
        unsigned int v56 = v58;
      }
      while (v58 != v55);
      long long v57 = v95;
    }
    uint64_t v96 = v55;
    operator delete(v57);
  }
  if (v93)
  {
    uint64_t v94 = (char *)v93;
    operator delete(v93);
  }
  if (__p)
  {
    unsigned int v92 = __p;
    operator delete(__p);
  }
  unsigned int v61 = (char *)v100[0];
  if (v100[0])
  {
    unint64_t v62 = v100[1];
    unsigned int v63 = v100[0];
    if (v100[1] != v100[0])
    {
      unsigned int v64 = (char *)v100[1];
      do
      {
        BOOL v66 = (void *)*((void *)v64 - 3);
        v64 -= 24;
        unsigned int v65 = v66;
        if (v66)
        {
          *(v62 - 2) = v65;
          operator delete(v65);
        }
        unint64_t v62 = v64;
      }
      while (v64 != v61);
      unsigned int v63 = v100[0];
    }
    v100[1] = v61;
    operator delete(v63);
  }
  if (*((void *)&v98 + 1))
  {
    *(void *)&long long v99 = *((void *)&v98 + 1);
    operator delete(*((void **)&v98 + 1));
  }
  if (v97[0])
  {
    v97[1] = v97[0];
    operator delete(v97[0]);
  }
  if (v102)
  {
    uint64_t v103 = (unint64_t *)v102;
    operator delete(v102);
  }
  if (v105)
  {
    unsigned __int8 v106 = v105;
    operator delete(v105);
  }
  return v54;
}

void sub_F40958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  unsigned int v29 = *(void **)(v27 - 160);
  if (v29)
  {
    *(void *)(v27 - 152) = v29;
    operator delete(v29);
  }
  uint64_t v30 = *(void **)(v27 - 136);
  if (v30)
  {
    *(void *)(v27 - 128) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

void sub_F40A10(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "path_finding_iterations");
  uint64_t v4 = (void *)sub_560F4(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "max_path_finding_iterations");
  *(_DWORD *)a1 = sub_31AC04(v4, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93C0;
  strcpy((char *)__p[0], "max_iterations_block_dangerous_sequences");
  *(_DWORD *)(a1 + 4) = sub_31AC04(v4, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9380;
  strcpy((char *)__p[0], "max_blocked_sequence_avoiding_search_iterations");
  *(_DWORD *)(a1 + 8) = sub_31AC04(v4, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "bound_by_distance");
  *(unsigned char *)(a1 + 12) = sub_29D62C(v4, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "bound_by_distance_factor");
  *(double *)(a1 + 16) = sub_5C7E8(v4, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93C0;
  strcpy((char *)__p[0], "block_segments_outside_available_regions");
  *(unsigned char *)(a1 + 24) = sub_29D62C(v4, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_F40C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F40CB8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a6;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  __p = operator new(0x20uLL);
  long long v12 = xmmword_20B8870;
  strcpy((char *)__p, "intersection_loop_blocker");
  uint64_t v9 = sub_560F4(a2, (uint64_t)&__p);
  sub_1066144(&v13, v9);
  sub_1066024((void *)(a1 + 32), a6, &v13);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 77) = 0;
  *(void *)(a1 + 88) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 96) = 0;
  sub_F41750(a1 + 72, a2);
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return a1;
}

void sub_F40D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = *(void **)(v14 + 48);
  if (v16)
  {
    *(void *)(v14 + 56) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void *sub_F40DD0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = result[13];
  uint64_t v3 = result[14];
  uint64_t v4 = v3 - v2;
  if (v3 != v2)
  {
    if (v4 < 0) {
      sub_2E00();
    }
    __n128 result = operator new(v3 - v2);
    uint64_t v6 = 0;
    *a2 = result;
    a2[1] = result;
    a2[2] = &result[4 * (v4 >> 5)];
    do
    {
      uint64_t v7 = v2 + v6 * 8;
      uint64_t v8 = (char *)&result[v6];
      unsigned int v9 = *(_DWORD *)(v2 + v6 * 8 + 16);
      LODWORD(result[v6 + 2]) = v9;
      if (v9 <= 1) {
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v7;
      }
      v8[24] = *(unsigned char *)(v7 + 24);
      v6 += 4;
    }
    while (v2 + v6 * 8 != v3);
    a2[1] = &result[v6];
  }
  return result;
}

void sub_F40E80(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_F40E9C(void *a1)
{
  a1[14] = a1[13];
  uint64_t v1 = a1[1];
  *(unsigned char *)(v1 + 30354) = 0;
  sub_ED7C40(v1 + 8);
  sub_C63080(v1 + 30360);

  return sub_F54484(v1 + 30440);
}

uint64_t sub_F40EF8(uint64_t a1, void *a2, uint64_t a3, int *a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a2;
  uint64_t v11 = a1;
  if (!a5)
  {
    int v18 = 0;
    char v15 = 0;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(a1 + 8);
  sub_106BCAC(*(void *)(a1 + 16), a2, (uint64_t)&__p);
  *(unsigned char *)(v12 + 30354) = 1;
  uint64_t v14 = __p;
  uint64_t v13 = v92;
  if (__p == v92)
  {
    char v15 = 0;
    uint64_t v11 = a1;
    int v18 = a5;
    if (__p)
    {
LABEL_9:
      unsigned int v92 = v14;
      operator delete(v14);
    }
  }
  else
  {
    char v15 = 0;
    do
    {
      *(unsigned char *)(v12 + 30354) = 1;
      sub_F57008(v12 + 30360, 1);
      uint64_t v17 = sub_F57414(v12 + 30360, v14);
      if (v17 == -1) {
        sub_F57530(v12 + 30360, v14, v16, v97);
      }
      v15 |= v17 == -1;
      ++v14;
    }
    while (v14 != v13);
    uint64_t v14 = __p;
    uint64_t v11 = a1;
    int v18 = a5;
    if (__p) {
      goto LABEL_9;
    }
  }
LABEL_10:
  if (!*(unsigned char *)(v11 + 96)) {
    goto LABEL_18;
  }
  uint64_t v19 = *(void *)(v11 + 8);
  sub_1069330(v10, 0, *(void **)v11, (uint64_t)&__p);
  uint64_t v20 = (unsigned char *)(v19 + 30354);
  *(unsigned char *)(v19 + 30354) = 1;
  unsigned int v22 = __p;
  uint64_t v21 = v92;
  if (__p == v92)
  {
    uint64_t v11 = a1;
    int v18 = a5;
    if (__p)
    {
LABEL_17:
      unsigned int v92 = v22;
      operator delete(v22);
    }
  }
  else
  {
    int64_t v82 = v10;
    char v23 = 0;
    uint64_t v24 = v19 + 30360;
    do
    {
      *uint64_t v20 = 1;
      sub_F57008(v24, 1);
      uint64_t v26 = sub_F57414(v24, v22);
      if (v26 == -1) {
        sub_F57530(v24, v22, v25, v97);
      }
      v23 |= v26 == -1;
      ++v22;
    }
    while (v22 != v21);
    unsigned int v22 = __p;
    uint64_t v10 = v82;
    v15 |= v23;
    uint64_t v11 = a1;
    int v18 = a5;
    if (__p) {
      goto LABEL_17;
    }
  }
LABEL_18:
  if (v18)
  {
    sub_1068D6C(*(void *)(v11 + 16), v10, &v105);
    long long v28 = (unint64_t *)v105;
    uint64_t v27 = (unint64_t *)v106;
    if (v105 != v106)
    {
      do
      {
        sub_F54650(a7, v28, (uint64_t)v28);
        v28 += 3;
      }
      while (v28 != v27);
    }
    if (a6) {
      goto LABEL_22;
    }
LABEL_26:
    unsigned int v29 = 0;
    int64_t v102 = 0;
    uint64_t v103 = 0;
    uint64_t v104 = 0;
    goto LABEL_27;
  }
  unsigned __int8 v105 = 0;
  unsigned __int8 v106 = 0;
  uint64_t v107 = 0;
  if (!a6) {
    goto LABEL_26;
  }
LABEL_22:
  sub_1069090(*(void *)(v11 + 16), v10, (void **)&v102);
  uint64_t v30 = (unint64_t *)v102;
  unsigned int v29 = v103;
  if (v102 != (char *)v103)
  {
    do
    {
      sub_F54650(a8, v30, (uint64_t)v30);
      v30 += 3;
    }
    while (v30 != v29);
    unsigned int v29 = (unint64_t *)v102;
  }
LABEL_27:
  uint64_t v31 = (char *)v103;
  *(unsigned char *)(sub_EAD918((uint64_t)v10) + 8) = v29 != (unint64_t *)v31;
  if (v102 == (char *)v103)
  {
    BOOL v35 = 0;
    uint64_t v33 = a1;
  }
  else
  {
    BOOL v32 = v102 + 24;
    uint64_t v33 = a1;
    do
    {
      uint64_t v34 = *((void *)v32 - 1);
      BOOL v35 = *(unsigned char *)(**((void **)v32 - 2) + 424 * v34 + 312) != 0;
      if (*(unsigned char *)(**((void **)v32 - 2) + 424 * v34 + 312)) {
        BOOL v36 = 1;
      }
      else {
        BOOL v36 = v32 == (char *)v103;
      }
      v32 += 24;
    }
    while (!v36);
  }
  *(unsigned char *)(sub_EAD918((uint64_t)v10) + 9) = v35;
  if (v18)
  {
    sub_106C7DC(*(void *)(v33 + 16), v10, (uint64_t)v97);
    uint8x8_t v38 = (void *)(v33 + 8);
    uint64_t v37 = *(void *)(v33 + 8);
    uint64_t v39 = *((void *)&v98 + 1);
    uint64_t v40 = v99;
    unint64_t v41 = (unsigned char *)(v37 + 30354);
    *(unsigned char *)(v37 + 30354) = 1;
    if (v39 == v40)
    {
      char v42 = 0;
    }
    else
    {
      char v42 = 0;
      uint64_t v43 = (void *)(v37 + 30440);
      do
      {
        *unint64_t v41 = 1;
        sub_F54A34((uint64_t)v43, 1);
        uint64_t v45 = sub_F558C4((uint64_t)v43, v39);
        if (v45 == -1) {
          sub_F55B28(v43, v39, v44, &__p);
        }
        v42 |= v45 == -1;
        v39 += 96;
      }
      while (v39 != v40);
      uint64_t v37 = *v38;
    }
    uint64_t v33 = a1;
  }
  else
  {
    char v42 = 0;
    uint64_t v101 = 0;
    long long v99 = 0u;
    *(_OWORD *)BOOL v100 = 0u;
    *(_OWORD *)uint64_t v97 = 0u;
    long long v98 = 0u;
    uint8x8_t v38 = (void *)(v33 + 8);
    uint64_t v37 = *(void *)(v33 + 8);
    *(unsigned char *)(v37 + 30354) = 1;
  }
  BOOL v46 = sub_ED7C38(v37 + 8, (uint64_t *)v100);
  sub_1069724(*(void *)(v33 + 16), v10, a3, a4, &__p);
  BOOL v47 = __p == v92 && v93 == v94 && v95 == v96;
  sub_EADC70((uint64_t)v10, !v47);
  sub_106A7A0(*(char ***)(v33 + 16), (uint64_t)&v89);
  char v48 = v89;
  unsigned int v49 = v90;
  *(unsigned char *)(sub_EAD918((uint64_t)v10) + 7) = v48 != v49;
  unsigned int v50 = v105;
  unsigned __int8 v51 = v106;
  if (v105 == v106 && v97[0] == v97[1] && *((void *)&v98 + 1) == (void)v99 && v100[0] == v100[1])
  {
    uint64_t v68 = *v38;
    size_t v69 = (unsigned char *)(*v38 + 30354);
    *size_t v69 = 1;
    uint64_t v70 = __p;
    uint64_t v71 = v92;
    if (__p == v92)
    {
      char v72 = 0;
    }
    else
    {
      char v72 = 0;
      uint64_t v73 = v68 + 30360;
      do
      {
        *size_t v69 = 1;
        sub_F57008(v73, 1);
        uint64_t v75 = sub_F57414(v73, v70);
        if (v75 == -1) {
          sub_F57530(v73, v70, v74, v108);
        }
        v72 |= v75 == -1;
        ++v70;
      }
      while (v70 != v71);
      uint64_t v68 = *v38;
    }
    unsigned int v88 = (unsigned char *)(v68 + 30354);
    *(unsigned char *)(v68 + 30354) = 1;
    BOOL v76 = (char *)v93;
    uint64_t v77 = v94;
    if (v93 == v94)
    {
      char v78 = 0;
    }
    else
    {
      char v78 = 0;
      uint64_t v79 = (void *)(v68 + 30440);
      do
      {
        unsigned char *v88 = 1;
        sub_F54A34((uint64_t)v79, 1);
        uint64_t v81 = sub_F558C4((uint64_t)v79, (uint64_t)v76);
        if (v81 == -1) {
          sub_F55B28(v79, (uint64_t)v76, v80, v108);
        }
        v78 |= v81 == -1;
        v76 += 96;
      }
      while (v76 != v77);
      uint64_t v68 = *v38;
    }
    char v52 = v72 | v78 | sub_ED7C38(v68 + 8, (uint64_t *)&v95);
    unsigned int v50 = v105;
    unsigned __int8 v51 = v106;
  }
  else
  {
    char v52 = __p != v92 || v93 != v94 || v95 != v96;
  }
  if (v52) {
    unsigned int v53 = ((v15 | v42) | v46) & 1 | 2;
  }
  else {
    unsigned int v53 = ((v15 | v42) | v46) & 1;
  }
  if (v50 == v51) {
    uint64_t v54 = v53;
  }
  else {
    uint64_t v54 = v53 | 4;
  }
  if (v97[0] != v97[1] || *((void *)&v98 + 1) != (void)v99 || v100[0] != v100[1]) {
    uint64_t v54 = v54 | 8;
  }
  if (v89)
  {
    unint64_t v90 = v89;
    operator delete(v89);
  }
  unsigned int v55 = (char *)v95;
  if (v95)
  {
    unsigned int v56 = v96;
    long long v57 = v95;
    if (v96 != v95)
    {
      BOOL v58 = v96;
      do
      {
        unsigned int v60 = (void *)*((void *)v58 - 3);
        v58 -= 24;
        uint64_t v59 = v60;
        if (v60)
        {
          *((void *)v56 - 2) = v59;
          operator delete(v59);
        }
        unsigned int v56 = v58;
      }
      while (v58 != v55);
      long long v57 = v95;
    }
    uint64_t v96 = v55;
    operator delete(v57);
  }
  if (v93)
  {
    uint64_t v94 = (char *)v93;
    operator delete(v93);
  }
  if (__p)
  {
    unsigned int v92 = __p;
    operator delete(__p);
  }
  unsigned int v61 = (char *)v100[0];
  if (v100[0])
  {
    unint64_t v62 = v100[1];
    unsigned int v63 = v100[0];
    if (v100[1] != v100[0])
    {
      unsigned int v64 = (char *)v100[1];
      do
      {
        BOOL v66 = (void *)*((void *)v64 - 3);
        v64 -= 24;
        unsigned int v65 = v66;
        if (v66)
        {
          *(v62 - 2) = v65;
          operator delete(v65);
        }
        unint64_t v62 = v64;
      }
      while (v64 != v61);
      unsigned int v63 = v100[0];
    }
    v100[1] = v61;
    operator delete(v63);
  }
  if (*((void *)&v98 + 1))
  {
    *(void *)&long long v99 = *((void *)&v98 + 1);
    operator delete(*((void **)&v98 + 1));
  }
  if (v97[0])
  {
    v97[1] = v97[0];
    operator delete(v97[0]);
  }
  if (v102)
  {
    uint64_t v103 = (unint64_t *)v102;
    operator delete(v102);
  }
  if (v105)
  {
    unsigned __int8 v106 = v105;
    operator delete(v105);
  }
  return v54;
}

void sub_F41698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  unsigned int v29 = *(void **)(v27 - 160);
  if (v29)
  {
    *(void *)(v27 - 152) = v29;
    operator delete(v29);
  }
  uint64_t v30 = *(void **)(v27 - 136);
  if (v30)
  {
    *(void *)(v27 - 128) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

void sub_F41750(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "path_finding_iterations");
  uint64_t v4 = (void *)sub_560F4(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "max_path_finding_iterations");
  *(_DWORD *)a1 = sub_31AC04(v4, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93C0;
  strcpy((char *)__p[0], "max_iterations_block_dangerous_sequences");
  *(_DWORD *)(a1 + 4) = sub_31AC04(v4, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9380;
  strcpy((char *)__p[0], "max_blocked_sequence_avoiding_search_iterations");
  *(_DWORD *)(a1 + 8) = sub_31AC04(v4, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "bound_by_distance");
  *(unsigned char *)(a1 + 12) = sub_29D62C(v4, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "bound_by_distance_factor");
  *(double *)(a1 + 16) = sub_5C7E8(v4, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93C0;
  strcpy((char *)__p[0], "block_segments_outside_available_regions");
  *(unsigned char *)(a1 + 24) = sub_29D62C(v4, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_F419C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F419F8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a6;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  __p = operator new(0x20uLL);
  long long v12 = xmmword_20B8870;
  strcpy((char *)__p, "intersection_loop_blocker");
  uint64_t v9 = sub_560F4(a2, (uint64_t)&__p);
  sub_1066C7C(&v13, v9);
  sub_1066024((void *)(a1 + 32), a6, &v13);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 77) = 0;
  *(void *)(a1 + 88) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 96) = 0;
  sub_F422AC(a1 + 72, a2);
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return a1;
}

void sub_F41ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = *(void **)(v14 + 48);
  if (v16)
  {
    *(void *)(v14 + 56) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F41B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  int v10 = a5;
  uint64_t v12 = a1;
  if (!a5)
  {
    char v17 = 0;
    goto LABEL_10;
  }
  uint64_t v14 = *(void *)(a1 + 8);
  sub_3F4FA4(&__p);
  *(unsigned char *)(v14 + 1394) = 1;
  uint64_t v16 = (uint64_t *)__p;
  char v15 = v75;
  if (__p == v75)
  {
    char v17 = 0;
    int v10 = a5;
    if (!__p) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  char v17 = 0;
  do
  {
    *(unsigned char *)(v14 + 1394) = 1;
    sub_F57BA4(v14 + 1400, 1);
    sub_F57E78(v14 + 1400, v16, (uint64_t)v80);
    v17 |= BYTE8(v81) != 0;
    ++v16;
  }
  while (v16 != v15);
  uint64_t v16 = (uint64_t *)__p;
  uint64_t v12 = a1;
  int v10 = a5;
  if (__p)
  {
LABEL_9:
    uint64_t v75 = v16;
    operator delete(v16);
  }
LABEL_10:
  if (!*(unsigned char *)(v12 + 96)) {
    goto LABEL_16;
  }
  uint64_t v18 = *(void *)(v12 + 8);
  sub_106B368(a2, 0, *(void **)v12, (uint64_t)&__p);
  *(unsigned char *)(v18 + 1394) = 1;
  uint64_t v20 = (char *)__p;
  uint64_t v19 = v75;
  if (__p == v75)
  {
    if (__p)
    {
LABEL_15:
      uint64_t v75 = (uint64_t *)v20;
      operator delete(v20);
    }
  }
  else
  {
    char v21 = 0;
    do
    {
      *(unsigned char *)(v18 + 1394) = 1;
      sub_F57BA4(v18 + 1400, 1);
      sub_F57E78(v18 + 1400, (uint64_t *)v20, (uint64_t)v80);
      v21 |= BYTE8(v81) != 0;
      v20 += 8;
    }
    while (v20 != (char *)v19);
    uint64_t v20 = (char *)__p;
    uint64_t v12 = a1;
    v17 |= v21;
    if (__p) {
      goto LABEL_15;
    }
  }
LABEL_16:
  if (v10)
  {
    sub_106ADA4(*(void *)(v12 + 16), a2, &v88);
    char v23 = (uint64_t *)v88;
    unsigned int v22 = (uint64_t *)v89;
    if (v88 != v89)
    {
      do
      {
        sub_F55D84(a7, v23, (uint64_t)v23);
        v23 += 3;
      }
      while (v23 != v22);
    }
    if (a6) {
      goto LABEL_20;
    }
LABEL_24:
    uint64_t v24 = 0;
    uint64_t v85 = 0;
    long long v86 = 0;
    uint64_t v87 = 0;
    goto LABEL_25;
  }
  unsigned int v88 = 0;
  BOOL v89 = 0;
  uint64_t v90 = 0;
  if (!a6) {
    goto LABEL_24;
  }
LABEL_20:
  sub_106B0C8(a2, (void **)&v85);
  uint64_t v25 = (uint64_t *)v85;
  uint64_t v24 = v86;
  if (v85 != (char *)v86)
  {
    do
    {
      sub_F55D84(a8, v25, (uint64_t)v25);
      v25 += 3;
    }
    while (v25 != v24);
    uint64_t v24 = (uint64_t *)v85;
  }
LABEL_25:
  uint64_t v26 = (char *)v86;
  *(unsigned char *)(sub_EB22AC(a2) + 8) = v24 != (uint64_t *)v26;
  if (v85 == (char *)v86)
  {
    BOOL v29 = 0;
  }
  else
  {
    uint64_t v27 = v85 + 24;
    do
    {
      uint64_t v28 = *((void *)v27 - 1);
      BOOL v29 = *(unsigned char *)(**((void **)v27 - 2) + 424 * v28 + 312) != 0;
      if (*(unsigned char *)(**((void **)v27 - 2) + 424 * v28 + 312)) {
        BOOL v30 = 1;
      }
      else {
        BOOL v30 = v27 == (char *)v86;
      }
      v27 += 24;
    }
    while (!v30);
  }
  *(unsigned char *)(sub_EB22AC(a2) + 9) = v29;
  if (v10)
  {
    sub_1067AB4((uint64_t)v80);
    BOOL v32 = (long long *)*((void *)&v81 + 1);
    uint64_t v31 = (long long *)v82;
    uint64_t v33 = (uint64_t *)(v12 + 8);
    uint64_t v34 = *(void *)(v12 + 8);
    *(unsigned char *)(v34 + 1394) = 1;
    if (v32 == v31)
    {
      char v35 = 0;
    }
    else
    {
      char v35 = 0;
      do
      {
        *(unsigned char *)(v34 + 1394) = 1;
        sub_F56144(v34 + 1480, 1);
        uint64_t v37 = sub_F56CA0(v34 + 1480, (uint64_t)v32);
        if (v37 == -1) {
          sub_F56EB0(v34 + 1480, v32, v36, &__p);
        }
        v35 |= v37 == -1;
        BOOL v32 = (long long *)((char *)v32 + 104);
      }
      while (v32 != v31);
    }
  }
  else
  {
    char v35 = 0;
    uint64_t v84 = 0;
    long long v82 = 0u;
    *(_OWORD *)int64_t v83 = 0u;
    *(_OWORD *)uint64_t v80 = 0u;
    long long v81 = 0u;
    uint64_t v33 = (uint64_t *)(v12 + 8);
    *(unsigned char *)(*(void *)(v12 + 8) + 1394) = 1;
  }
  unsigned __int8 v38 = sub_35E640();
  sub_106B620(&__p);
  BOOL v39 = __p == v75 && v76 == v77 && v78 == v79;
  sub_EB29D4(a2, !v39);
  sub_106B6E0(*(void ***)(a1 + 16), (uint64_t)&v72);
  uint64_t v40 = v72;
  unint64_t v41 = v73;
  *(unsigned char *)(sub_EB22AC(a2) + 7) = v40 != v41;
  char v42 = v88;
  uint64_t v43 = v89;
  if (v88 == v89 && v80[0] == v80[1] && *((void *)&v81 + 1) == (void)v82 && v83[0] == v83[1])
  {
    uint64_t v71 = v33;
    uint64_t v60 = *v33;
    *(unsigned char *)(*v33 + 1394) = 1;
    unsigned int v61 = (uint64_t *)__p;
    unint64_t v62 = v75;
    if (__p == v75)
    {
      char v63 = 0;
    }
    else
    {
      char v63 = 0;
      do
      {
        *(unsigned char *)(v60 + 1394) = 1;
        sub_F57BA4(v60 + 1400, 1);
        sub_F57E78(v60 + 1400, v61, (uint64_t)v91);
        v63 |= v92 != 0;
        ++v61;
      }
      while (v61 != v62);
      uint64_t v60 = *v71;
    }
    *(unsigned char *)(v60 + 1394) = 1;
    unsigned int v64 = (long long *)v76;
    unsigned int v65 = v77;
    if (v76 == v77)
    {
      char v66 = 0;
    }
    else
    {
      char v66 = 0;
      do
      {
        *(unsigned char *)(v60 + 1394) = 1;
        sub_F56144(v60 + 1480, 1);
        uint64_t v68 = sub_F56CA0(v60 + 1480, (uint64_t)v64);
        if (v68 == -1) {
          sub_F56EB0(v60 + 1480, v64, v67, v91);
        }
        v66 |= v68 == -1;
        unsigned int v64 = (long long *)((char *)v64 + 104);
      }
      while (v64 != v65);
    }
    char v44 = v63 | v66 | sub_35E640();
    char v42 = v88;
    uint64_t v43 = v89;
  }
  else
  {
    char v44 = __p != v75 || v76 != v77 || v78 != v79;
  }
  if (v44) {
    unsigned int v45 = ((v17 | v35) | v38) & 1 | 2;
  }
  else {
    unsigned int v45 = ((v17 | v35) | v38) & 1;
  }
  if (v42 == v43) {
    uint64_t v46 = v45;
  }
  else {
    uint64_t v46 = v45 | 4;
  }
  if (v80[0] != v80[1] || *((void *)&v81 + 1) != (void)v82 || v83[0] != v83[1]) {
    uint64_t v46 = v46 | 8;
  }
  if (v72)
  {
    uint64_t v73 = v72;
    operator delete(v72);
  }
  BOOL v47 = (char *)v78;
  if (v78)
  {
    char v48 = v79;
    unsigned int v49 = v78;
    if (v79 != v78)
    {
      unsigned int v50 = v79;
      do
      {
        char v52 = (void *)*((void *)v50 - 3);
        v50 -= 24;
        unsigned __int8 v51 = v52;
        if (v52)
        {
          *((void *)v48 - 2) = v51;
          operator delete(v51);
        }
        char v48 = v50;
      }
      while (v50 != v47);
      unsigned int v49 = v78;
    }
    uint64_t v79 = v47;
    operator delete(v49);
  }
  if (v76)
  {
    uint64_t v77 = (long long *)v76;
    operator delete(v76);
  }
  if (__p)
  {
    uint64_t v75 = (uint64_t *)__p;
    operator delete(__p);
  }
  unsigned int v53 = (char *)v83[0];
  if (v83[0])
  {
    uint64_t v54 = v83[1];
    unsigned int v55 = v83[0];
    if (v83[1] != v83[0])
    {
      unsigned int v56 = (char *)v83[1];
      do
      {
        BOOL v58 = (void *)*((void *)v56 - 3);
        v56 -= 24;
        long long v57 = v58;
        if (v58)
        {
          *(v54 - 2) = v57;
          operator delete(v57);
        }
        uint64_t v54 = v56;
      }
      while (v56 != v53);
      unsigned int v55 = v83[0];
    }
    v83[1] = v53;
    operator delete(v55);
  }
  if (*((void *)&v81 + 1))
  {
    *(void *)&long long v82 = *((void *)&v81 + 1);
    operator delete(*((void **)&v81 + 1));
  }
  if (v80[0])
  {
    v80[1] = v80[0];
    operator delete(v80[0]);
  }
  if (v85)
  {
    long long v86 = (uint64_t *)v85;
    operator delete(v85);
  }
  if (v88)
  {
    BOOL v89 = v88;
    operator delete(v88);
  }
  return v46;
}

void sub_F421F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  BOOL v29 = *(void **)(v27 - 168);
  if (v29)
  {
    *(void *)(v27 - 160) = v29;
    operator delete(v29);
  }
  BOOL v30 = *(void **)(v27 - 144);
  if (v30)
  {
    *(void *)(v27 - 136) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

void sub_F422AC(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "path_finding_iterations");
  uint64_t v4 = (void *)sub_560F4(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "max_path_finding_iterations");
  *(_DWORD *)a1 = sub_31AC04(v4, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93C0;
  strcpy((char *)__p[0], "max_iterations_block_dangerous_sequences");
  *(_DWORD *)(a1 + 4) = sub_31AC04(v4, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9380;
  strcpy((char *)__p[0], "max_blocked_sequence_avoiding_search_iterations");
  *(_DWORD *)(a1 + 8) = sub_31AC04(v4, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "bound_by_distance");
  *(unsigned char *)(a1 + 12) = sub_29D62C(v4, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "bound_by_distance_factor");
  *(double *)(a1 + 16) = sub_5C7E8(v4, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93C0;
  strcpy((char *)__p[0], "block_segments_outside_available_regions");
  *(unsigned char *)(a1 + 24) = sub_29D62C(v4, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_F42520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_F42554()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  char v198 = v3;
  int v207 = v4;
  int v208 = v5;
  uint64_t v7 = v6;
  uint64_t v8 = (void **)v0;
  int v10 = v9;
  uint64_t v11 = *(void *)(v0 + 8);
  *(unsigned char *)(v11 + 9586) = 0;
  sub_ED7C40(v11 + 8);
  sub_C63080(v11 + 9592);
  sub_C6328C(v11 + 9672);
  uint64_t v13 = v8 + 17;
  uint64_t v12 = v8[17];
  v8[16] = 0;
  v200 = (char **)(v8 + 17);
  if (v12)
  {
    v8[18] = v12;
    operator delete(v12);
    uint64_t v13 = v8 + 17;
    void *v200 = 0;
    v8[18] = 0;
    v8[19] = 0;
  }
  *uint64_t v13 = 0;
  v13[1] = 0;
  v13[2] = 0;
  sub_10752F0((uint64_t)v224, *v8);
  sub_F5A844(v221, *v8);
  *int v10 = 0;
  v10[1] = 0;
  v10[2] = 0;
  v218 = 0;
  v219 = 0;
  unint64_t v220 = 0;
  if (v2 == 0x7FFFFFFFFFFFFFFFLL || !*((unsigned char *)v8 + 84))
  {
    uint64_t v199 = v10;
    if (!*((_DWORD *)v8 + 18)) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v199 = v10;
    if (!*((_DWORD *)v8 + 18))
    {
LABEL_6:
      LOBYTE(v202) = 0;
      unsigned int v14 = 0;
      goto LABEL_213;
    }
  }
  BOOL v202 = 0;
  unsigned int v203 = 0;
  uint64_t v201 = (uint64_t)(v10 + 2);
  v204 = (char **)(v8 + 13);
  char v15 = 1;
  char v205 = 1;
  uint64_t v206 = v7;
  while (2)
  {
    if (sub_F047E8(v7))
    {
      uint64_t v16 = (void **)*v10;
      uint64_t v17 = v10[1];
      if (v17 != *v10)
      {
        do
        {
          uint64_t v25 = *(void **)(v17 - 224);
          if (v25)
          {
            *(void *)(v17 - 216) = v25;
            operator delete(v25);
          }
          uint64_t v26 = *(void **)(v17 - 248);
          if (v26)
          {
            *(void *)(v17 - 240) = v26;
            operator delete(v26);
          }
          uint64_t v27 = *(void **)(v17 - 312);
          if (v27)
          {
            *(void *)(v17 - 304) = v27;
            operator delete(v27);
          }
          uint64_t v28 = *(void **)(v17 - 336);
          if (v28)
          {
            *(void *)(v17 - 328) = v28;
            operator delete(v28);
          }
          uint64_t v29 = *(void *)(v17 - 360);
          if (v29)
          {
            uint64_t v30 = *(void *)(v17 - 352);
            uint64_t v31 = *(void **)(v17 - 360);
            if (v30 != v29)
            {
              do
              {
                BOOL v32 = *(void **)(v30 - 24);
                if (v32)
                {
                  *(void *)(v30 - 16) = v32;
                  operator delete(v32);
                }
                v30 -= 56;
              }
              while (v30 != v29);
              uint64_t v31 = *(void **)(v17 - 360);
            }
            *(void *)(v17 - 352) = v29;
            operator delete(v31);
          }
          uint64_t v33 = *(void **)(v17 - 448);
          if (v33)
          {
            *(void *)(v17 - 440) = v33;
            operator delete(v33);
          }
          uint64_t v34 = (void **)(v17 - 472);
          if (*(char *)(v17 - 449) < 0) {
            operator delete(*v34);
          }
          v17 -= 472;
        }
        while (v34 != v16);
      }
      v10[1] = (uint64_t)v16;
    }
    if (v205)
    {
      uint64_t v18 = (void **)v218;
      uint64_t v19 = v219;
      if (v219 != v218)
      {
        do
        {
          char v35 = (void *)*((void *)v19 - 28);
          if (v35)
          {
            *((void *)v19 - 27) = v35;
            operator delete(v35);
          }
          uint64_t v36 = (void *)*((void *)v19 - 31);
          if (v36)
          {
            *((void *)v19 - 30) = v36;
            operator delete(v36);
          }
          uint64_t v37 = (void *)*((void *)v19 - 39);
          if (v37)
          {
            *((void *)v19 - 38) = v37;
            operator delete(v37);
          }
          unsigned __int8 v38 = (void *)*((void *)v19 - 42);
          if (v38)
          {
            *((void *)v19 - 41) = v38;
            operator delete(v38);
          }
          uint64_t v39 = *((void *)v19 - 45);
          if (v39)
          {
            uint64_t v40 = *((void *)v19 - 44);
            unint64_t v41 = (void *)*((void *)v19 - 45);
            if (v40 != v39)
            {
              do
              {
                char v42 = *(void **)(v40 - 24);
                if (v42)
                {
                  *(void *)(v40 - 16) = v42;
                  operator delete(v42);
                }
                v40 -= 56;
              }
              while (v40 != v39);
              unint64_t v41 = (void *)*((void *)v19 - 45);
            }
            *((void *)v19 - 44) = v39;
            operator delete(v41);
          }
          uint64_t v43 = (void *)*((void *)v19 - 56);
          if (v43)
          {
            *((void *)v19 - 55) = v43;
            operator delete(v43);
          }
          char v44 = (void **)(v19 - 472);
          if (*(v19 - 449) < 0) {
            operator delete(*v44);
          }
          v19 -= 472;
        }
        while (v44 != v18);
      }
      v219 = (char *)v18;
    }
    sub_F58E38();
    uint64_t v20 = (void *)sub_F047F8(v7);
    char v21 = v20;
    char v23 = (char *)v8[18];
    unsigned int v22 = (char *)v8[19];
    if (v23 >= v22)
    {
      unsigned int v45 = *v200;
      uint64_t v46 = v23 - *v200;
      uint64_t v47 = v46 >> 3;
      unint64_t v48 = (v46 >> 3) + 1;
      if (v48 >> 61) {
        sub_2E00();
      }
      uint64_t v49 = v22 - v45;
      if (v49 >> 2 > v48) {
        unint64_t v48 = v49 >> 2;
      }
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v50 = v48;
      }
      if (v50)
      {
        if (v50 >> 61) {
          sub_188D718();
        }
        unsigned __int8 v51 = operator new(8 * v50);
        char v52 = &v51[8 * v47];
        void *v52 = *v21;
        uint64_t v24 = (uint64_t)(v52 + 1);
        if (v23 != v45)
        {
LABEL_68:
          unint64_t v53 = v23 - 8 - v45;
          if (v53 < 0x58) {
            goto LABEL_292;
          }
          if ((unint64_t)(v23 - &v51[v46]) < 0x20) {
            goto LABEL_292;
          }
          uint64_t v54 = (v53 >> 3) + 1;
          uint64_t v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
          unsigned int v56 = &v23[-v55];
          char v52 = (void *)((char *)v52 - v55);
          long long v57 = &v51[8 * v47 - 16];
          BOOL v58 = v23 - 16;
          uint64_t v59 = v54 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v60 = *(_OWORD *)v58;
            *(v57 - 1) = *((_OWORD *)v58 - 1);
            _OWORD *v57 = v60;
            v57 -= 2;
            v58 -= 32;
            v59 -= 4;
          }
          while (v59);
          char v23 = v56;
          if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_292:
            do
            {
              uint64_t v61 = *((void *)v23 - 1);
              v23 -= 8;
              *--char v52 = v61;
            }
            while (v23 != v45);
          }
          char v23 = *v200;
          v8[17] = v52;
          v8[18] = (void *)v24;
          v8[19] = &v51[8 * v50];
          if (!v23) {
            goto LABEL_79;
          }
          goto LABEL_78;
        }
      }
      else
      {
        unsigned __int8 v51 = 0;
        char v52 = (void *)(8 * v47);
        *(void *)(8 * v47) = *v21;
        uint64_t v24 = 8 * v47 + 8;
        if (v23 != v45) {
          goto LABEL_68;
        }
      }
      v8[17] = v52;
      v8[18] = (void *)v24;
      v8[19] = &v51[8 * v50];
      if (!v23) {
        goto LABEL_79;
      }
LABEL_78:
      operator delete(v23);
      goto LABEL_79;
    }
    *(void *)char v23 = *v20;
    uint64_t v24 = (uint64_t)(v23 + 8);
LABEL_79:
    v8[18] = (void *)v24;
    char v62 = sub_F43A10((uint64_t)v8, &v216);
    char v63 = (long long *)v216;
    if (!(v205 & 1 | ((v62 & 1) == 0)))
    {
      char v205 = 0;
      int v93 = 4;
      if (v216) {
        goto LABEL_181;
      }
      goto LABEL_206;
    }
    unsigned int v64 = v217;
    BOOL v65 = v202;
    if (v15) {
      BOOL v65 = v216 != v217;
    }
    BOOL v202 = v65;
    *(_OWORD *)v213 = 0u;
    *(_OWORD *)v214 = 0u;
    int v215 = 1065353216;
    *(_OWORD *)uint64_t v210 = 0u;
    *(_OWORD *)int v211 = 0u;
    int v212 = 1065353216;
    if (v216 == v217)
    {
      LOBYTE(v67) = 0;
      unsigned __int8 v66 = 0;
      unint64_t v95 = v211[0];
      if (!v211[0]) {
        goto LABEL_158;
      }
      goto LABEL_162;
    }
    unsigned __int8 v66 = 0;
    int v67 = 0;
    do
    {
      size_t v69 = (int *)sub_37B3A8((uint64_t)*v8);
      char v70 = sub_F401B8((uint64_t)v8, v63, (uint64_t)v221, v69, v207, v208, (uint64_t)v213, (uint64_t)v210);
      if ((v70 & 0xC) != 0)
      {
        if (sub_F047E8(v206))
        {
          sub_EAD400((uint64_t)&v228);
          unint64_t v71 = v10[1];
          if (v71 >= v10[2])
          {
            uint64_t v87 = sub_446BBC(v10, &v228);
            unsigned int v88 = (void *)__p;
            v10[1] = v87;
            if (v88)
            {
              *((void *)&__p + 1) = v88;
              operator delete(v88);
            }
          }
          else
          {
            long long v72 = v228;
            *(void *)(v71 + 16) = v229;
            *(void *)(v71 + 24) = 0;
            *(_OWORD *)unint64_t v71 = v72;
            uint64_t v229 = 0;
            long long v228 = 0uLL;
            *(void *)(v71 + 32) = 0;
            *(void *)(v71 + 40) = 0;
            *(_OWORD *)(v71 + 24) = v230;
            *(void *)(v71 + 40) = v231;
            long long v230 = 0uLL;
            uint64_t v231 = 0;
            long long v73 = v232;
            long long v74 = v233;
            long long v75 = v234[0];
            *(_OWORD *)(v71 + 94) = *(_OWORD *)((char *)v234 + 14);
            *(_OWORD *)(v71 + 64) = v74;
            *(_OWORD *)(v71 + 80) = v75;
            *(_OWORD *)(v71 + 48) = v73;
            *(void *)(v71 + 112) = 0;
            *(void *)(v71 + 120) = 0;
            *(void *)(v71 + 128) = 0;
            *(void *)(v71 + 136) = 0;
            *(_OWORD *)(v71 + 112) = v235;
            *(void *)(v71 + 128) = v236;
            long long v235 = 0uLL;
            uint64_t v236 = 0;
            *(void *)(v71 + 144) = 0;
            *(void *)(v71 + 152) = 0;
            *(_OWORD *)(v71 + 136) = v237;
            long long v237 = 0uLL;
            *(void *)(v71 + 152) = v238;
            *(void *)(v71 + 160) = 0;
            uint64_t v238 = 0;
            *(void *)(v71 + 168) = 0;
            *(void *)(v71 + 176) = 0;
            *(_OWORD *)(v71 + 160) = v239;
            *(void *)(v71 + 176) = v240;
            long long v239 = 0uLL;
            uint64_t v240 = 0;
            long long v76 = v241;
            uint64_t v77 = v243;
            *(_OWORD *)(v71 + 200) = v242;
            *(_OWORD *)(v71 + 184) = v76;
            *(void *)(v71 + 216) = v77;
            *(void *)(v71 + 224) = 0;
            *(void *)(v71 + 232) = 0;
            *(void *)(v71 + 240) = 0;
            *(_OWORD *)(v71 + 224) = v244;
            long long v244 = 0uLL;
            *(void *)(v71 + 240) = v245;
            *(void *)(v71 + 248) = 0;
            uint64_t v245 = 0;
            *(void *)(v71 + 256) = 0;
            *(void *)(v71 + 264) = 0;
            *(_OWORD *)(v71 + 248) = __p;
            *(void *)(v71 + 264) = v247;
            long long __p = 0uLL;
            uint64_t v247 = 0;
            *(_OWORD *)(v71 + 272) = v248;
            *(_DWORD *)(v71 + 296) = v250;
            if (v250 <= 1) {
              *(void *)(v71 + 288) = v249;
            }
            *(_OWORD *)(v71 + 304) = v251;
            long long v78 = v257;
            long long v80 = v254;
            long long v79 = v255;
            *(_OWORD *)(v71 + 384) = v256;
            *(_OWORD *)(v71 + 400) = v78;
            *(_OWORD *)(v71 + 352) = v80;
            *(_OWORD *)(v71 + 368) = v79;
            long long v82 = v259;
            long long v81 = *(_OWORD *)v260;
            long long v83 = v258;
            *(void *)(v71 + 463) = *(void *)&v260[15];
            *(_OWORD *)(v71 + 432) = v82;
            *(_OWORD *)(v71 + 448) = v81;
            *(_OWORD *)(v71 + 416) = v83;
            long long v84 = v253;
            *(_OWORD *)(v71 + 320) = v252;
            *(_OWORD *)(v71 + 336) = v84;
            v10[1] = v71 + 472;
          }
          if ((void)v244)
          {
            *((void *)&v244 + 1) = v244;
            operator delete((void *)v244);
          }
          if ((void)v239)
          {
            *((void *)&v239 + 1) = v239;
            operator delete((void *)v239);
          }
          if ((void)v237)
          {
            *((void *)&v237 + 1) = v237;
            operator delete((void *)v237);
          }
          uint64_t v89 = v235;
          if ((void)v235)
          {
            uint64_t v90 = *((void *)&v235 + 1);
            unsigned int v91 = (void *)v235;
            if (*((void *)&v235 + 1) != (void)v235)
            {
              do
              {
                char v92 = *(void **)(v90 - 24);
                if (v92)
                {
                  *(void *)(v90 - 16) = v92;
                  operator delete(v92);
                }
                v90 -= 56;
              }
              while (v90 != v89);
              unsigned int v91 = (void *)v235;
            }
            *((void *)&v235 + 1) = v89;
            operator delete(v91);
          }
          if ((void)v230)
          {
            *((void *)&v230 + 1) = v230;
            operator delete((void *)v230);
          }
          if (SHIBYTE(v229) < 0) {
            operator delete((void *)v228);
          }
        }
      }
      else
      {
        sub_1075360((uint64_t)v224, (uint64_t)v63);
        if (v62)
        {
          if (v205)
          {
            uint64_t v85 = v219;
            if ((unint64_t)v219 >= v220)
            {
              v219 = (char *)sub_446BBC((uint64_t *)&v218, v63);
            }
            else
            {
              sub_446D30((uint64_t)&v220, (uint64_t)v219, v63);
              v219 = v85 + 472;
            }
          }
        }
        else
        {
          unint64_t v86 = v10[1];
          if (v86 < v10[2])
          {
            sub_446D30(v201, v10[1], v63);
            uint64_t v68 = v86 + 472;
          }
          else
          {
            uint64_t v68 = sub_446BBC(v10, v63);
          }
          v10[1] = v68;
        }
      }
      v66 |= v70;
      v67 |= (v70 & 2) >> 1;
      char v63 = (long long *)((char *)v63 + 472);
    }
    while (v63 != v64);
    uint64_t v94 = v214[0];
    if (!v214[0])
    {
      unint64_t v95 = v211[0];
      if (!v211[0]) {
        goto LABEL_158;
      }
      goto LABEL_162;
    }
    do
    {
      BOOL v100 = v8[1];
      *((unsigned char *)v100 + 9586) = 1;
      sub_F57008((uint64_t)(v100 + 1199), 1);
      uint64_t v101 = v94 + 2;
      uint64_t v103 = sub_F57414((uint64_t)(v100 + 1199), v94 + 2);
      if (v103 == -1)
      {
        uint64_t v107 = v100[1205];
        uint64_t v108 = v100[1204];
        if ((unint64_t)(v107 - v108) >= 0x1FFFFFFFFFFFFFFFLL)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "insert overflow");
        }
        uint64_t v109 = v100[1208];
        if (v108
          && (unint64_t v110 = *(void *)(v109 + 8 * v102),
              __PAIR64__(*((unsigned __int16 *)v100 + 4814), *((_DWORD *)v100 + 2406)) == __PAIR64__(WORD2(v110), v110))
          && (HIWORD(v110) & 1) != (*((unsigned char *)v100 + 9630) == 0))
        {
          v100[1204] = v108 - 1;
          *(void *)(v109 + 8 * v102) = *v101;
          uint64_t v104 = (__n128 *)(v94 + 3);
          unsigned __int8 v106 = (__n128 *)v8[14];
          unsigned __int8 v105 = (__n128 *)v8[15];
          if (v106 < v105) {
            goto LABEL_130;
          }
        }
        else
        {
          v100[1205] = v107 + 1;
          *(void *)(v109 + 8 * v102) = *v101;
          uint64_t v104 = (__n128 *)(v94 + 3);
          unsigned __int8 v106 = (__n128 *)v8[14];
          unsigned __int8 v105 = (__n128 *)v8[15];
          if (v106 < v105)
          {
LABEL_130:
            sub_45E5B0(v106, v104);
            long long v99 = v106 + 2;
            v8[14] = v106[2].n128_u64;
            goto LABEL_127;
          }
        }
      }
      else
      {
        uint64_t v104 = (__n128 *)(v94 + 3);
        unsigned __int8 v106 = (__n128 *)v8[14];
        unsigned __int8 v105 = (__n128 *)v8[15];
        if (v106 < v105) {
          goto LABEL_130;
        }
      }
      uint64_t v111 = ((char *)v106 - *v204) >> 5;
      if ((unint64_t)(v111 + 1) >> 59) {
        sub_2E00();
      }
      uint64_t v112 = (char *)v105 - *v204;
      uint64_t v113 = v112 >> 4;
      if (v112 >> 4 <= (unint64_t)(v111 + 1)) {
        uint64_t v113 = v111 + 1;
      }
      if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v114 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v114 = v113;
      }
      if (v114)
      {
        if (v114 >> 59) {
          sub_188D718();
        }
        uint64_t v115 = (__n128 *)operator new(32 * v114);
      }
      else
      {
        uint64_t v115 = 0;
      }
      sub_45E5B0(&v115[2 * v111], v104);
      unint64_t v117 = (char *)v8[13];
      uint64_t v96 = (char *)v8[14];
      if (v96 == v117)
      {
        unsigned int v121 = &v115[2 * v114];
        long long v99 = v116 + 2;
        v8[13] = v116->n128_u64;
        v8[14] = v116[2].n128_u64;
        v8[15] = v121->n128_u64;
        if (v96) {
          goto LABEL_126;
        }
      }
      else
      {
        uint64_t v118 = 0;
        do
        {
          unsigned int v119 = &v116[v118];
          unsigned int v120 = &v96[v118 * 16];
          v116[v118 - 1].n128_u32[0] = *(_DWORD *)&v96[v118 * 16 - 16];
          if (*(_DWORD *)&v96[v118 * 16 - 16] <= 1u) {
            v119[-2] = *((__n128 *)v120 - 2);
          }
          v119[-1].n128_u8[8] = *(v120 - 8);
          v118 -= 2;
        }
        while (&v96[v118 * 16] != v117);
        uint64_t v96 = *v204;
        uint64_t v97 = &v116[v118];
        long long v98 = &v115[2 * v114];
        long long v99 = v116 + 2;
        v8[13] = v97->n128_u64;
        v8[14] = v116[2].n128_u64;
        v8[15] = v98->n128_u64;
        if (v96) {
LABEL_126:
        }
          operator delete(v96);
      }
LABEL_127:
      v8[14] = v99->n128_u64;
      v66 |= v103 == -1;
      uint64_t v94 = (void *)*v94;
    }
    while (v94);
    int v10 = v199;
    unint64_t v95 = v211[0];
    if (!v211[0])
    {
LABEL_158:
      BOOL v122 = 0;
      goto LABEL_169;
    }
    do
    {
LABEL_162:
      int v123 = v8[1];
      *((unsigned char *)v123 + 9586) = 1;
      sub_F57008((uint64_t)(v123 + 1199), 1);
      uint64_t v124 = sub_F57414((uint64_t)(v123 + 1199), v95 + 2);
      if (v124 == -1)
      {
        uint64_t v126 = v123[1205];
        uint64_t v127 = v123[1204];
        if ((unint64_t)(v126 - v127) >= 0x1FFFFFFFFFFFFFFFLL)
        {
          v196 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v196, "insert overflow");
        }
        uint64_t v128 = v123[1208];
        if (v127
          && (unint64_t v129 = *(void *)(v128 + 8 * v125),
              __PAIR64__(*((unsigned __int16 *)v123 + 4814), *((_DWORD *)v123 + 2406)) == __PAIR64__(WORD2(v129), v129))
          && (HIWORD(v129) & 1) != (*((unsigned char *)v123 + 9630) == 0))
        {
          v123[1204] = v127 - 1;
        }
        else
        {
          v123[1205] = v126 + 1;
        }
        *(void *)(v128 + 8 * v125) = v95[2];
      }
      v66 |= v124 == -1;
      unint64_t v95 = (void *)*v95;
    }
    while (v95);
    BOOL v122 = v211[0];
LABEL_169:
    BOOL v130 = v218 == v219;
    if ((v66 | (v62 | v67))) {
      int v93 = 0;
    }
    else {
      int v93 = 2;
    }
    if (v122)
    {
      do
      {
        long long v131 = (void *)*v122;
        operator delete(v122);
        BOOL v122 = v131;
      }
      while (v131);
    }
    unsigned int v132 = v210[0];
    v210[0] = 0;
    if (v132) {
      operator delete(v132);
    }
    unsigned int v133 = v214[0];
    if (v214[0])
    {
      do
      {
        unsigned int v134 = (void *)*v133;
        operator delete(v133);
        unsigned int v133 = v134;
      }
      while (v134);
    }
    BOOL v135 = v213[0];
    v213[0] = 0;
    if (v135) {
      operator delete(v135);
    }
    char v15 = 0;
    v205 &= v66 | v130;
    char v63 = (long long *)v216;
    if (v216)
    {
LABEL_181:
      unsigned int v136 = v217;
      long long v137 = v63;
      if (v217 != v63)
      {
        do
        {
          int v138 = (void *)*((void *)v136 - 28);
          if (v138)
          {
            *((void *)v136 - 27) = v138;
            operator delete(v138);
          }
          int v139 = (void *)*((void *)v136 - 31);
          if (v139)
          {
            *((void *)v136 - 30) = v139;
            operator delete(v139);
          }
          v140 = (void *)*((void *)v136 - 39);
          if (v140)
          {
            *((void *)v136 - 38) = v140;
            operator delete(v140);
          }
          v141 = (void *)*((void *)v136 - 42);
          if (v141)
          {
            *((void *)v136 - 41) = v141;
            operator delete(v141);
          }
          uint64_t v142 = *((void *)v136 - 45);
          if (v142)
          {
            uint64_t v143 = *((void *)v136 - 44);
            uint64_t v144 = (void *)*((void *)v136 - 45);
            if (v143 != v142)
            {
              do
              {
                v145 = *(void **)(v143 - 24);
                if (v145)
                {
                  *(void *)(v143 - 16) = v145;
                  operator delete(v145);
                }
                v143 -= 56;
              }
              while (v143 != v142);
              uint64_t v144 = (void *)*((void *)v136 - 45);
            }
            *((void *)v136 - 44) = v142;
            operator delete(v144);
          }
          v146 = (void *)*((void *)v136 - 56);
          if (v146)
          {
            *((void *)v136 - 55) = v146;
            operator delete(v146);
          }
          uint64_t v147 = (void **)v136 - 59;
          if (*((char *)v136 - 449) < 0) {
            operator delete(*v147);
          }
          unsigned int v136 = (long long *)((char *)v136 - 472);
        }
        while (v147 != (void **)v63);
        long long v137 = v216;
      }
      v217 = v63;
      operator delete(v137);
    }
LABEL_206:
    unsigned int v148 = *((_DWORD *)v8 + 18);
    if (v93 != 2)
    {
      ++v203;
      uint64_t v7 = v206;
      if (v203 >= v148)
      {
        unsigned int v14 = v203;
        goto LABEL_210;
      }
      continue;
    }
    break;
  }
  uint64_t v7 = v206;
  unsigned int v14 = v203;
  if (v203 >= v148)
  {
LABEL_210:
    if (v218 != v219 && &v218 != (void **)v10) {
      sub_D5A97C(v10, (uint64_t)v218, (uint64_t)v219, 0xCBEEA4E1A08AD8F3 * ((v219 - (unsigned char *)v218) >> 3));
    }
  }
LABEL_213:
  if (!(sub_F047F0(v7) & 1 | !v202) && *((unsigned char *)v8[3] + 8080))
  {
    uint64_t v150 = *v10;
    uint64_t v149 = v10[1];
    if (*v10 == v149)
    {
LABEL_221:
      if (sub_F047E8(v7))
      {
        uint64_t v152 = *v10;
        uint64_t v151 = v10[1];
        if (v151 != *v10)
        {
          do
            uint64_t v151 = sub_405F44(v151 - 472);
          while (v151 != v152);
        }
        v10[1] = v152;
      }
      v153 = v8[1];
      *((unsigned char *)v153 + 9586) = 0;
      sub_ED7C40((uint64_t)(v153 + 1));
      sub_C63080((uint64_t)(v153 + 1199));
      sub_C6328C((uint64_t)(v153 + 1209));
      unsigned int v154 = v14;
      sub_F58E38();
      unint64_t v155 = (void *)sub_F047F8(v7);
      int v156 = v155;
      int v158 = (char *)v8[18];
      uint64_t v157 = (char *)v8[19];
      if (v158 >= v157)
      {
        uint64_t v160 = *v200;
        uint64_t v161 = v158 - *v200;
        uint64_t v162 = v161 >> 3;
        unint64_t v163 = (v161 >> 3) + 1;
        if (v163 >> 61) {
          sub_2E00();
        }
        uint64_t v164 = v157 - v160;
        if (v164 >> 2 > v163) {
          unint64_t v163 = v164 >> 2;
        }
        if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v165 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v165 = v163;
        }
        if (v165)
        {
          if (v165 >> 61) {
            sub_188D718();
          }
          v166 = operator new(8 * v165);
        }
        else
        {
          v166 = 0;
        }
        v167 = &v166[8 * v162];
        v168 = &v166[8 * v165];
        void *v167 = *v156;
        unint64_t v159 = v167 + 1;
        if (v158 != v160)
        {
          unint64_t v169 = v158 - v160 - 8;
          if (v169 < 0x58) {
            goto LABEL_293;
          }
          if ((unint64_t)(v158 - v166 - v161) < 0x20) {
            goto LABEL_293;
          }
          uint64_t v170 = (v169 >> 3) + 1;
          uint64_t v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v172 = &v158[-v171];
          v167 = (void *)((char *)v167 - v171);
          v173 = &v166[8 * v162 - 16];
          v174 = v158 - 16;
          uint64_t v175 = v170 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v176 = *(_OWORD *)v174;
            *(v173 - 1) = *((_OWORD *)v174 - 1);
            _OWORD *v173 = v176;
            v173 -= 2;
            v174 -= 32;
            v175 -= 4;
          }
          while (v175);
          int v158 = v172;
          if (v170 != (v170 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_293:
            do
            {
              uint64_t v177 = *((void *)v158 - 1);
              v158 -= 8;
              *--v167 = v177;
            }
            while (v158 != v160);
          }
          int v158 = *v200;
        }
        v8[17] = v167;
        v8[18] = v159;
        v8[19] = v168;
        if (v158) {
          operator delete(v158);
        }
      }
      else
      {
        *(void *)int v158 = *v155;
        unint64_t v159 = v158 + 8;
      }
      v8[18] = v159;
      uint64_t v179 = (long long *)*((void *)&v228 + 1);
      v178 = (long long *)v228;
      if ((void)v228 == *((void *)&v228 + 1))
      {
        unsigned int v14 = v154;
        if (!(void)v228) {
          goto LABEL_265;
        }
      }
      else
      {
        unsigned int v14 = v154;
        do
        {
          sub_1070128((uint64_t)v8[3], v178, v209);
          if (v209[0])
          {
            v209[1] = v209[0];
            operator delete(v209[0]);
          }
          if (!sub_EAE144(v178) || sub_F047E8(v7))
          {
            unint64_t v181 = v10[1];
            if (v181 < v10[2])
            {
              sub_446D30((uint64_t)(v10 + 2), v10[1], v178);
              uint64_t v180 = v181 + 472;
            }
            else
            {
              uint64_t v180 = sub_446BBC(v10, v178);
            }
            v10[1] = v180;
          }
          v178 = (long long *)((char *)v178 + 472);
        }
        while (v178 != v179);
        v178 = (long long *)v228;
        if (!(void)v228) {
          goto LABEL_265;
        }
      }
      uint64_t v182 = *((void *)&v228 + 1);
      __n128 v183 = v178;
      if (*((long long **)&v228 + 1) != v178)
      {
        do
          uint64_t v182 = sub_405F44(v182 - 472);
        while ((long long *)v182 != v178);
        __n128 v183 = (long long *)v228;
      }
      *((void *)&v228 + 1) = v178;
      operator delete(v183);
      goto LABEL_265;
    }
    while (*(double *)(sub_69134(v150) + 32) <= 0.95 || *(double *)(sub_EADAD0(v150) + 32) <= 0.95)
    {
      v150 += 472;
      if (v150 == v149) {
        goto LABEL_221;
      }
    }
  }
LABEL_265:
  uint64_t v184 = (uint64_t)v8[13];
  unint64_t v185 = v8[14];
  unint64_t v186 = 126 - 2 * __clz(((uint64_t)v185 - v184) >> 5);
  if (v185 == (uint64_t *)v184) {
    uint64_t v187 = 0;
  }
  else {
    uint64_t v187 = v186;
  }
  sub_F35D00(v184, v185, (uint64_t)&v228, v187, 1);
  sub_F35B58((uint64_t *)v8 + 13);
  __n128 v190 = (void *)*v10;
  v189 = (void *)v10[1];
  if ((void *)*v10 != v189)
  {
    do
    {
      sub_10702F4((uint64_t)v8[3], v190);
      v190 += 59;
    }
    while (v190 != v189);
  }
  *((_DWORD *)v8 + 32) = v14;
  *((_DWORD *)v8 + 33) = sub_FBB728((uint64_t)(v8[1] + 551), v188);
  if ((v198 & 1) == 0)
  {
    v191 = v8[1];
    *((unsigned char *)v191 + 9586) = 0;
    sub_ED7C40((uint64_t)(v191 + 1));
    sub_C63080((uint64_t)(v191 + 1199));
    sub_C6328C((uint64_t)(v191 + 1209));
  }
  sub_1066038((uint64_t)(v8 + 4));
  long long v192 = (char *)v218;
  if (v218)
  {
    uint64_t v193 = v219;
    int v194 = v218;
    if (v219 != v218)
    {
      do
        uint64_t v193 = (char *)sub_405F44((uint64_t)(v193 - 472));
      while (v193 != v192);
      int v194 = v218;
    }
    v219 = v192;
    operator delete(v194);
  }
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  if (v226)
  {
    v227 = v226;
    operator delete(v226);
  }
  return sub_3A6318(v225);
}

void sub_F438E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,uint64_t a61,uint64_t a62)
{
  sub_4323C0(&a52);
  sub_4323C0(v62);
  if (__p)
  {
    a60 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_C62E9C(&a62);
  _Unwind_Resume(a1);
}

uint64_t sub_F43A10(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  if (*a2 != v2)
  {
    char v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0xCBEEA4E1A08AD8F3 * ((v2 - *a2) >> 3);
    while (1)
    {
      uint64_t v9 = (void *)(*a2 + 472 * v6);
      uint64_t v10 = *(void *)(a1 + 16);
      if (v6)
      {
        sub_1067AC8(v10, v9, &__p);
        uint64_t v11 = (char *)__p;
        if (__p != v19) {
          goto LABEL_8;
        }
      }
      else
      {
        sub_106CD70(v10, v9, &__p);
        uint64_t v11 = (char *)__p;
        if (__p != v19)
        {
LABEL_8:
          BOOL v12 = sub_ED7C38(*(void *)(a1 + 8) + 8, (uint64_t *)&__p);
          uint64_t v11 = (char *)__p;
          if (__p) {
            goto LABEL_12;
          }
          goto LABEL_5;
        }
      }
      BOOL v12 = 0;
      if (v11)
      {
LABEL_12:
        uint64_t v13 = v19;
        uint64_t v8 = v11;
        if (v19 != v11)
        {
          unsigned int v14 = v19;
          do
          {
            uint64_t v16 = (void *)*((void *)v14 - 3);
            v14 -= 24;
            char v15 = v16;
            if (v16)
            {
              *((void *)v13 - 2) = v15;
              operator delete(v15);
            }
            uint64_t v13 = v14;
          }
          while (v14 != v11);
          uint64_t v8 = __p;
        }
        uint64_t v19 = v11;
        operator delete(v8);
      }
LABEL_5:
      v5 |= v12;
      if (++v6 == v7) {
        return v5 & 1;
      }
    }
  }
  char v5 = 0;
  return v5 & 1;
}

void sub_F43B4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

void *sub_F43B60()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v203 = v3;
  char v199 = v4;
  int v209 = v5;
  int v210 = v6;
  uint64_t v8 = v7;
  uint64_t v9 = (void **)v0;
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v0 + 8);
  *(unsigned char *)(v12 + 9586) = 0;
  sub_ED7C40(v12 + 8);
  sub_C63080(v12 + 9592);
  sub_C6328C(v12 + 9672);
  unsigned int v14 = v9 + 17;
  uint64_t v13 = v9[17];
  v9[16] = 0;
  uint64_t v201 = (char **)(v9 + 17);
  if (v13)
  {
    v9[18] = v13;
    operator delete(v13);
    unsigned int v14 = v9 + 17;
    *uint64_t v201 = 0;
    v9[18] = 0;
    v9[19] = 0;
  }
  *unsigned int v14 = 0;
  v14[1] = 0;
  v14[2] = 0;
  sub_10752F0((uint64_t)v226, *v9);
  sub_F5A844(v223, *v9);
  uint64_t *v11 = 0;
  v11[1] = 0;
  uint64_t v11[2] = 0;
  unint64_t v220 = 0;
  char v221 = 0;
  unint64_t v222 = 0;
  if (v2 == 0x7FFFFFFFFFFFFFFFLL || !*((unsigned char *)v9 + 84))
  {
    v200 = v11;
    if (!*((_DWORD *)v9 + 18)) {
      goto LABEL_6;
    }
  }
  else
  {
    v200 = v11;
    if (!*((_DWORD *)v9 + 18))
    {
LABEL_6:
      LOBYTE(v204) = 0;
      unsigned int v15 = 0;
      goto LABEL_213;
    }
  }
  BOOL v204 = 0;
  unsigned int v205 = 0;
  uint64_t v202 = (uint64_t)(v11 + 2);
  uint64_t v206 = (char **)(v9 + 13);
  char v16 = 1;
  char v207 = 1;
  uint64_t v208 = v8;
  while (2)
  {
    if (sub_F047E8(v8))
    {
      uint64_t v17 = (void **)*v11;
      uint64_t v18 = v11[1];
      if (v18 != *v11)
      {
        do
        {
          uint64_t v26 = *(void **)(v18 - 224);
          if (v26)
          {
            *(void *)(v18 - 216) = v26;
            operator delete(v26);
          }
          uint64_t v27 = *(void **)(v18 - 248);
          if (v27)
          {
            *(void *)(v18 - 240) = v27;
            operator delete(v27);
          }
          uint64_t v28 = *(void **)(v18 - 312);
          if (v28)
          {
            *(void *)(v18 - 304) = v28;
            operator delete(v28);
          }
          uint64_t v29 = *(void **)(v18 - 336);
          if (v29)
          {
            *(void *)(v18 - 328) = v29;
            operator delete(v29);
          }
          uint64_t v30 = *(void *)(v18 - 360);
          if (v30)
          {
            uint64_t v31 = *(void *)(v18 - 352);
            BOOL v32 = *(void **)(v18 - 360);
            if (v31 != v30)
            {
              do
              {
                uint64_t v33 = *(void **)(v31 - 24);
                if (v33)
                {
                  *(void *)(v31 - 16) = v33;
                  operator delete(v33);
                }
                v31 -= 56;
              }
              while (v31 != v30);
              BOOL v32 = *(void **)(v18 - 360);
            }
            *(void *)(v18 - 352) = v30;
            operator delete(v32);
          }
          uint64_t v34 = *(void **)(v18 - 448);
          if (v34)
          {
            *(void *)(v18 - 440) = v34;
            operator delete(v34);
          }
          char v35 = (void **)(v18 - 472);
          if (*(char *)(v18 - 449) < 0) {
            operator delete(*v35);
          }
          v18 -= 472;
        }
        while (v35 != v17);
      }
      v11[1] = (uint64_t)v17;
    }
    if (v207)
    {
      uint64_t v19 = (void **)v220;
      uint64_t v20 = v221;
      if (v221 != v220)
      {
        do
        {
          uint64_t v36 = (void *)*((void *)v20 - 28);
          if (v36)
          {
            *((void *)v20 - 27) = v36;
            operator delete(v36);
          }
          uint64_t v37 = (void *)*((void *)v20 - 31);
          if (v37)
          {
            *((void *)v20 - 30) = v37;
            operator delete(v37);
          }
          unsigned __int8 v38 = (void *)*((void *)v20 - 39);
          if (v38)
          {
            *((void *)v20 - 38) = v38;
            operator delete(v38);
          }
          uint64_t v39 = (void *)*((void *)v20 - 42);
          if (v39)
          {
            *((void *)v20 - 41) = v39;
            operator delete(v39);
          }
          uint64_t v40 = *((void *)v20 - 45);
          if (v40)
          {
            uint64_t v41 = *((void *)v20 - 44);
            char v42 = (void *)*((void *)v20 - 45);
            if (v41 != v40)
            {
              do
              {
                uint64_t v43 = *(void **)(v41 - 24);
                if (v43)
                {
                  *(void *)(v41 - 16) = v43;
                  operator delete(v43);
                }
                v41 -= 56;
              }
              while (v41 != v40);
              char v42 = (void *)*((void *)v20 - 45);
            }
            *((void *)v20 - 44) = v40;
            operator delete(v42);
          }
          char v44 = (void *)*((void *)v20 - 56);
          if (v44)
          {
            *((void *)v20 - 55) = v44;
            operator delete(v44);
          }
          unsigned int v45 = (void **)(v20 - 472);
          if (*(v20 - 449) < 0) {
            operator delete(*v45);
          }
          v20 -= 472;
        }
        while (v45 != v19);
      }
      char v221 = (char *)v19;
    }
    sub_F59838(v8, v203);
    char v21 = (void *)sub_F047F8(v8);
    unsigned int v22 = v21;
    uint64_t v24 = (char *)v9[18];
    char v23 = (char *)v9[19];
    if (v24 >= v23)
    {
      uint64_t v46 = *v201;
      uint64_t v47 = v24 - *v201;
      uint64_t v48 = v47 >> 3;
      unint64_t v49 = (v47 >> 3) + 1;
      if (v49 >> 61) {
        sub_2E00();
      }
      uint64_t v50 = v23 - v46;
      if (v50 >> 2 > v49) {
        unint64_t v49 = v50 >> 2;
      }
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v51 = v49;
      }
      if (v51)
      {
        if (v51 >> 61) {
          sub_188D718();
        }
        char v52 = operator new(8 * v51);
        unint64_t v53 = &v52[8 * v48];
        void *v53 = *v22;
        uint64_t v25 = (uint64_t)(v53 + 1);
        if (v24 != v46)
        {
LABEL_68:
          unint64_t v54 = v24 - 8 - v46;
          if (v54 < 0x58) {
            goto LABEL_292;
          }
          if ((unint64_t)(v24 - &v52[v47]) < 0x20) {
            goto LABEL_292;
          }
          uint64_t v55 = (v54 >> 3) + 1;
          uint64_t v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
          long long v57 = &v24[-v56];
          unint64_t v53 = (void *)((char *)v53 - v56);
          BOOL v58 = &v52[8 * v48 - 16];
          uint64_t v59 = v24 - 16;
          uint64_t v60 = v55 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v61 = *(_OWORD *)v59;
            *(v58 - 1) = *((_OWORD *)v59 - 1);
            _OWORD *v58 = v61;
            v58 -= 2;
            v59 -= 32;
            v60 -= 4;
          }
          while (v60);
          uint64_t v24 = v57;
          if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_292:
            do
            {
              uint64_t v62 = *((void *)v24 - 1);
              v24 -= 8;
              *--unint64_t v53 = v62;
            }
            while (v24 != v46);
          }
          uint64_t v24 = *v201;
          v9[17] = v53;
          v9[18] = (void *)v25;
          v9[19] = &v52[8 * v51];
          if (!v24) {
            goto LABEL_79;
          }
          goto LABEL_78;
        }
      }
      else
      {
        char v52 = 0;
        unint64_t v53 = (void *)(8 * v48);
        *(void *)(8 * v48) = *v22;
        uint64_t v25 = 8 * v48 + 8;
        if (v24 != v46) {
          goto LABEL_68;
        }
      }
      v9[17] = v53;
      v9[18] = (void *)v25;
      v9[19] = &v52[8 * v51];
      if (!v24) {
        goto LABEL_79;
      }
LABEL_78:
      operator delete(v24);
      goto LABEL_79;
    }
    *(void *)uint64_t v24 = *v21;
    uint64_t v25 = (uint64_t)(v24 + 8);
LABEL_79:
    v9[18] = (void *)v25;
    char v63 = sub_F43A10((uint64_t)v9, &v218);
    unsigned int v64 = (long long *)v218;
    if (!(v207 & 1 | ((v63 & 1) == 0)))
    {
      char v207 = 0;
      int v94 = 4;
      if (v218) {
        goto LABEL_181;
      }
      goto LABEL_206;
    }
    BOOL v65 = v219;
    BOOL v66 = v204;
    if (v16) {
      BOOL v66 = v218 != v219;
    }
    BOOL v204 = v66;
    *(_OWORD *)int v215 = 0u;
    *(_OWORD *)v216 = 0u;
    int v217 = 1065353216;
    *(_OWORD *)int v212 = 0u;
    *(_OWORD *)v213 = 0u;
    int v214 = 1065353216;
    if (v218 == v219)
    {
      LOBYTE(v68) = 0;
      unsigned __int8 v67 = 0;
      uint64_t v96 = v213[0];
      if (!v213[0]) {
        goto LABEL_158;
      }
      goto LABEL_162;
    }
    unsigned __int8 v67 = 0;
    int v68 = 0;
    do
    {
      char v70 = (int *)sub_37B3A8((uint64_t)*v9);
      char v71 = sub_F401B8((uint64_t)v9, v64, (uint64_t)v223, v70, v209, v210, (uint64_t)v215, (uint64_t)v212);
      if ((v71 & 0xC) != 0)
      {
        if (sub_F047E8(v208))
        {
          sub_EAD400((uint64_t)&v230);
          unint64_t v72 = v11[1];
          if (v72 >= v11[2])
          {
            uint64_t v88 = sub_446BBC(v11, &v230);
            uint64_t v89 = (void *)__p;
            v11[1] = v88;
            if (v89)
            {
              *((void *)&__p + 1) = v89;
              operator delete(v89);
            }
          }
          else
          {
            long long v73 = v230;
            *(void *)(v72 + 16) = v231;
            *(void *)(v72 + 24) = 0;
            *(_OWORD *)unint64_t v72 = v73;
            uint64_t v231 = 0;
            long long v230 = 0uLL;
            *(void *)(v72 + 32) = 0;
            *(void *)(v72 + 40) = 0;
            *(_OWORD *)(v72 + 24) = v232;
            *(void *)(v72 + 40) = v233;
            long long v232 = 0uLL;
            uint64_t v233 = 0;
            long long v74 = v234;
            long long v75 = v235;
            long long v76 = v236[0];
            *(_OWORD *)(v72 + 94) = *(_OWORD *)((char *)v236 + 14);
            *(_OWORD *)(v72 + 64) = v75;
            *(_OWORD *)(v72 + 80) = v76;
            *(_OWORD *)(v72 + 48) = v74;
            *(void *)(v72 + 112) = 0;
            *(void *)(v72 + 120) = 0;
            *(void *)(v72 + 128) = 0;
            *(void *)(v72 + 136) = 0;
            *(_OWORD *)(v72 + 112) = v237;
            *(void *)(v72 + 128) = v238;
            long long v237 = 0uLL;
            uint64_t v238 = 0;
            *(void *)(v72 + 144) = 0;
            *(void *)(v72 + 152) = 0;
            *(_OWORD *)(v72 + 136) = v239;
            long long v239 = 0uLL;
            *(void *)(v72 + 152) = v240;
            *(void *)(v72 + 160) = 0;
            uint64_t v240 = 0;
            *(void *)(v72 + 168) = 0;
            *(void *)(v72 + 176) = 0;
            *(_OWORD *)(v72 + 160) = v241;
            *(void *)(v72 + 176) = v242;
            long long v241 = 0uLL;
            uint64_t v242 = 0;
            long long v77 = v243;
            uint64_t v78 = v245;
            *(_OWORD *)(v72 + 200) = v244;
            *(_OWORD *)(v72 + 184) = v77;
            *(void *)(v72 + 216) = v78;
            *(void *)(v72 + 224) = 0;
            *(void *)(v72 + 232) = 0;
            *(void *)(v72 + 240) = 0;
            *(_OWORD *)(v72 + 224) = v246;
            long long v246 = 0uLL;
            *(void *)(v72 + 240) = v247;
            *(void *)(v72 + 248) = 0;
            uint64_t v247 = 0;
            *(void *)(v72 + 256) = 0;
            *(void *)(v72 + 264) = 0;
            *(_OWORD *)(v72 + 248) = __p;
            *(void *)(v72 + 264) = v249;
            long long __p = 0uLL;
            uint64_t v249 = 0;
            *(_OWORD *)(v72 + 272) = v250;
            *(_DWORD *)(v72 + 296) = v252;
            if (v252 <= 1) {
              *(void *)(v72 + 288) = v251;
            }
            *(_OWORD *)(v72 + 304) = v253;
            long long v79 = v259;
            long long v81 = v256;
            long long v80 = v257;
            *(_OWORD *)(v72 + 384) = v258;
            *(_OWORD *)(v72 + 400) = v79;
            *(_OWORD *)(v72 + 352) = v81;
            *(_OWORD *)(v72 + 368) = v80;
            long long v83 = v261;
            long long v82 = *(_OWORD *)v262;
            long long v84 = v260;
            *(void *)(v72 + 463) = *(void *)&v262[15];
            *(_OWORD *)(v72 + 432) = v83;
            *(_OWORD *)(v72 + 448) = v82;
            *(_OWORD *)(v72 + 416) = v84;
            long long v85 = v255;
            *(_OWORD *)(v72 + 320) = v254;
            *(_OWORD *)(v72 + 336) = v85;
            v11[1] = v72 + 472;
          }
          if ((void)v246)
          {
            *((void *)&v246 + 1) = v246;
            operator delete((void *)v246);
          }
          if ((void)v241)
          {
            *((void *)&v241 + 1) = v241;
            operator delete((void *)v241);
          }
          if ((void)v239)
          {
            *((void *)&v239 + 1) = v239;
            operator delete((void *)v239);
          }
          uint64_t v90 = v237;
          if ((void)v237)
          {
            uint64_t v91 = *((void *)&v237 + 1);
            char v92 = (void *)v237;
            if (*((void *)&v237 + 1) != (void)v237)
            {
              do
              {
                int v93 = *(void **)(v91 - 24);
                if (v93)
                {
                  *(void *)(v91 - 16) = v93;
                  operator delete(v93);
                }
                v91 -= 56;
              }
              while (v91 != v90);
              char v92 = (void *)v237;
            }
            *((void *)&v237 + 1) = v90;
            operator delete(v92);
          }
          if ((void)v232)
          {
            *((void *)&v232 + 1) = v232;
            operator delete((void *)v232);
          }
          if (SHIBYTE(v231) < 0) {
            operator delete((void *)v230);
          }
        }
      }
      else
      {
        sub_1075360((uint64_t)v226, (uint64_t)v64);
        if (v63)
        {
          if (v207)
          {
            unint64_t v86 = v221;
            if ((unint64_t)v221 >= v222)
            {
              char v221 = (char *)sub_446BBC((uint64_t *)&v220, v64);
            }
            else
            {
              sub_446D30((uint64_t)&v222, (uint64_t)v221, v64);
              char v221 = v86 + 472;
            }
          }
        }
        else
        {
          unint64_t v87 = v11[1];
          if (v87 < v11[2])
          {
            sub_446D30(v202, v11[1], v64);
            uint64_t v69 = v87 + 472;
          }
          else
          {
            uint64_t v69 = sub_446BBC(v11, v64);
          }
          v11[1] = v69;
        }
      }
      v67 |= v71;
      v68 |= (v71 & 2) >> 1;
      unsigned int v64 = (long long *)((char *)v64 + 472);
    }
    while (v64 != v65);
    unint64_t v95 = v216[0];
    if (!v216[0])
    {
      uint64_t v96 = v213[0];
      if (!v213[0]) {
        goto LABEL_158;
      }
      goto LABEL_162;
    }
    do
    {
      uint64_t v101 = v9[1];
      *((unsigned char *)v101 + 9586) = 1;
      sub_F57008((uint64_t)(v101 + 1199), 1);
      uint64_t v102 = v95 + 2;
      uint64_t v104 = sub_F57414((uint64_t)(v101 + 1199), v95 + 2);
      if (v104 == -1)
      {
        uint64_t v108 = v101[1205];
        uint64_t v109 = v101[1204];
        if ((unint64_t)(v108 - v109) >= 0x1FFFFFFFFFFFFFFFLL)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "insert overflow");
        }
        uint64_t v110 = v101[1208];
        if (v109
          && (unint64_t v111 = *(void *)(v110 + 8 * v103),
              __PAIR64__(*((unsigned __int16 *)v101 + 4814), *((_DWORD *)v101 + 2406)) == __PAIR64__(WORD2(v111), v111))
          && (HIWORD(v111) & 1) != (*((unsigned char *)v101 + 9630) == 0))
        {
          v101[1204] = v109 - 1;
          *(void *)(v110 + 8 * v103) = *v102;
          unsigned __int8 v105 = (__n128 *)(v95 + 3);
          uint64_t v107 = (__n128 *)v9[14];
          unsigned __int8 v106 = (__n128 *)v9[15];
          if (v107 < v106) {
            goto LABEL_130;
          }
        }
        else
        {
          v101[1205] = v108 + 1;
          *(void *)(v110 + 8 * v103) = *v102;
          unsigned __int8 v105 = (__n128 *)(v95 + 3);
          uint64_t v107 = (__n128 *)v9[14];
          unsigned __int8 v106 = (__n128 *)v9[15];
          if (v107 < v106)
          {
LABEL_130:
            sub_45E5B0(v107, v105);
            BOOL v100 = v107 + 2;
            v9[14] = v107[2].n128_u64;
            goto LABEL_127;
          }
        }
      }
      else
      {
        unsigned __int8 v105 = (__n128 *)(v95 + 3);
        uint64_t v107 = (__n128 *)v9[14];
        unsigned __int8 v106 = (__n128 *)v9[15];
        if (v107 < v106) {
          goto LABEL_130;
        }
      }
      uint64_t v112 = ((char *)v107 - *v206) >> 5;
      if ((unint64_t)(v112 + 1) >> 59) {
        sub_2E00();
      }
      uint64_t v113 = (char *)v106 - *v206;
      uint64_t v114 = v113 >> 4;
      if (v113 >> 4 <= (unint64_t)(v112 + 1)) {
        uint64_t v114 = v112 + 1;
      }
      if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v115 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v115 = v114;
      }
      if (v115)
      {
        if (v115 >> 59) {
          sub_188D718();
        }
        unint64_t v116 = (__n128 *)operator new(32 * v115);
      }
      else
      {
        unint64_t v116 = 0;
      }
      sub_45E5B0(&v116[2 * v112], v105);
      uint64_t v118 = (char *)v9[13];
      uint64_t v97 = (char *)v9[14];
      if (v97 == v118)
      {
        BOOL v122 = &v116[2 * v115];
        BOOL v100 = v117 + 2;
        v9[13] = v117->n128_u64;
        v9[14] = v117[2].n128_u64;
        v9[15] = v122->n128_u64;
        if (v97) {
          goto LABEL_126;
        }
      }
      else
      {
        uint64_t v119 = 0;
        do
        {
          unsigned int v120 = &v117[v119];
          unsigned int v121 = &v97[v119 * 16];
          v117[v119 - 1].n128_u32[0] = *(_DWORD *)&v97[v119 * 16 - 16];
          if (*(_DWORD *)&v97[v119 * 16 - 16] <= 1u) {
            v120[-2] = *((__n128 *)v121 - 2);
          }
          v120[-1].n128_u8[8] = *(v121 - 8);
          v119 -= 2;
        }
        while (&v97[v119 * 16] != v118);
        uint64_t v97 = *v206;
        long long v98 = &v117[v119];
        long long v99 = &v116[2 * v115];
        BOOL v100 = v117 + 2;
        v9[13] = v98->n128_u64;
        v9[14] = v117[2].n128_u64;
        v9[15] = v99->n128_u64;
        if (v97) {
LABEL_126:
        }
          operator delete(v97);
      }
LABEL_127:
      v9[14] = v100->n128_u64;
      v67 |= v104 == -1;
      unint64_t v95 = (void *)*v95;
    }
    while (v95);
    uint64_t v11 = v200;
    uint64_t v96 = v213[0];
    if (!v213[0])
    {
LABEL_158:
      int v123 = 0;
      goto LABEL_169;
    }
    do
    {
LABEL_162:
      uint64_t v124 = v9[1];
      *((unsigned char *)v124 + 9586) = 1;
      sub_F57008((uint64_t)(v124 + 1199), 1);
      uint64_t v125 = sub_F57414((uint64_t)(v124 + 1199), v96 + 2);
      if (v125 == -1)
      {
        uint64_t v127 = v124[1205];
        uint64_t v128 = v124[1204];
        if ((unint64_t)(v127 - v128) >= 0x1FFFFFFFFFFFFFFFLL)
        {
          v197 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v197, "insert overflow");
        }
        uint64_t v129 = v124[1208];
        if (v128
          && (unint64_t v130 = *(void *)(v129 + 8 * v126),
              __PAIR64__(*((unsigned __int16 *)v124 + 4814), *((_DWORD *)v124 + 2406)) == __PAIR64__(WORD2(v130), v130))
          && (HIWORD(v130) & 1) != (*((unsigned char *)v124 + 9630) == 0))
        {
          v124[1204] = v128 - 1;
        }
        else
        {
          v124[1205] = v127 + 1;
        }
        *(void *)(v129 + 8 * v126) = v96[2];
      }
      v67 |= v125 == -1;
      uint64_t v96 = (void *)*v96;
    }
    while (v96);
    int v123 = v213[0];
LABEL_169:
    BOOL v131 = v220 == v221;
    if ((v67 | (v63 | v68))) {
      int v94 = 0;
    }
    else {
      int v94 = 2;
    }
    if (v123)
    {
      do
      {
        unsigned int v132 = (void *)*v123;
        operator delete(v123);
        int v123 = v132;
      }
      while (v132);
    }
    unsigned int v133 = v212[0];
    v212[0] = 0;
    if (v133) {
      operator delete(v133);
    }
    unsigned int v134 = v216[0];
    if (v216[0])
    {
      do
      {
        BOOL v135 = (void *)*v134;
        operator delete(v134);
        unsigned int v134 = v135;
      }
      while (v135);
    }
    unsigned int v136 = v215[0];
    v215[0] = 0;
    if (v136) {
      operator delete(v136);
    }
    char v16 = 0;
    v207 &= v67 | v131;
    unsigned int v64 = (long long *)v218;
    if (v218)
    {
LABEL_181:
      long long v137 = v219;
      int v138 = v64;
      if (v219 != v64)
      {
        do
        {
          int v139 = (void *)*((void *)v137 - 28);
          if (v139)
          {
            *((void *)v137 - 27) = v139;
            operator delete(v139);
          }
          v140 = (void *)*((void *)v137 - 31);
          if (v140)
          {
            *((void *)v137 - 30) = v140;
            operator delete(v140);
          }
          v141 = (void *)*((void *)v137 - 39);
          if (v141)
          {
            *((void *)v137 - 38) = v141;
            operator delete(v141);
          }
          uint64_t v142 = (void *)*((void *)v137 - 42);
          if (v142)
          {
            *((void *)v137 - 41) = v142;
            operator delete(v142);
          }
          uint64_t v143 = *((void *)v137 - 45);
          if (v143)
          {
            uint64_t v144 = *((void *)v137 - 44);
            v145 = (void *)*((void *)v137 - 45);
            if (v144 != v143)
            {
              do
              {
                v146 = *(void **)(v144 - 24);
                if (v146)
                {
                  *(void *)(v144 - 16) = v146;
                  operator delete(v146);
                }
                v144 -= 56;
              }
              while (v144 != v143);
              v145 = (void *)*((void *)v137 - 45);
            }
            *((void *)v137 - 44) = v143;
            operator delete(v145);
          }
          uint64_t v147 = (void *)*((void *)v137 - 56);
          if (v147)
          {
            *((void *)v137 - 55) = v147;
            operator delete(v147);
          }
          unsigned int v148 = (void **)v137 - 59;
          if (*((char *)v137 - 449) < 0) {
            operator delete(*v148);
          }
          long long v137 = (long long *)((char *)v137 - 472);
        }
        while (v148 != (void **)v64);
        int v138 = v218;
      }
      v219 = v64;
      operator delete(v138);
    }
LABEL_206:
    unsigned int v149 = *((_DWORD *)v9 + 18);
    if (v94 != 2)
    {
      ++v205;
      uint64_t v8 = v208;
      if (v205 >= v149)
      {
        unsigned int v15 = v205;
        goto LABEL_210;
      }
      continue;
    }
    break;
  }
  uint64_t v8 = v208;
  unsigned int v15 = v205;
  if (v205 >= v149)
  {
LABEL_210:
    if (v220 != v221 && &v220 != (void **)v11) {
      sub_D5A97C(v11, (uint64_t)v220, (uint64_t)v221, 0xCBEEA4E1A08AD8F3 * ((v221 - (unsigned char *)v220) >> 3));
    }
  }
LABEL_213:
  if (!(sub_F047F0(v8) & 1 | !v204) && *((unsigned char *)v9[3] + 8080))
  {
    uint64_t v151 = *v11;
    uint64_t v150 = v11[1];
    if (*v11 == v150)
    {
LABEL_221:
      if (sub_F047E8(v8))
      {
        uint64_t v153 = *v11;
        uint64_t v152 = v11[1];
        if (v152 != *v11)
        {
          do
            uint64_t v152 = sub_405F44(v152 - 472);
          while (v152 != v153);
        }
        v11[1] = v153;
      }
      unsigned int v154 = v9[1];
      *((unsigned char *)v154 + 9586) = 0;
      sub_ED7C40((uint64_t)(v154 + 1));
      sub_C63080((uint64_t)(v154 + 1199));
      sub_C6328C((uint64_t)(v154 + 1209));
      unsigned int v155 = v15;
      sub_F59838(v8, v203);
      int v156 = (void *)sub_F047F8(v8);
      uint64_t v157 = v156;
      unint64_t v159 = (char *)v9[18];
      int v158 = (char *)v9[19];
      if (v159 >= v158)
      {
        uint64_t v161 = *v201;
        uint64_t v162 = v159 - *v201;
        uint64_t v163 = v162 >> 3;
        unint64_t v164 = (v162 >> 3) + 1;
        if (v164 >> 61) {
          sub_2E00();
        }
        uint64_t v165 = v158 - v161;
        if (v165 >> 2 > v164) {
          unint64_t v164 = v165 >> 2;
        }
        if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v166 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v166 = v164;
        }
        if (v166)
        {
          if (v166 >> 61) {
            sub_188D718();
          }
          v167 = operator new(8 * v166);
        }
        else
        {
          v167 = 0;
        }
        v168 = &v167[8 * v163];
        unint64_t v169 = &v167[8 * v166];
        void *v168 = *v157;
        uint64_t v160 = v168 + 1;
        if (v159 != v161)
        {
          unint64_t v170 = v159 - v161 - 8;
          if (v170 < 0x58) {
            goto LABEL_293;
          }
          if ((unint64_t)(v159 - v167 - v162) < 0x20) {
            goto LABEL_293;
          }
          uint64_t v171 = (v170 >> 3) + 1;
          uint64_t v172 = 8 * (v171 & 0x3FFFFFFFFFFFFFFCLL);
          v173 = &v159[-v172];
          v168 = (void *)((char *)v168 - v172);
          v174 = &v167[8 * v163 - 16];
          uint64_t v175 = v159 - 16;
          uint64_t v176 = v171 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v177 = *(_OWORD *)v175;
            *(v174 - 1) = *((_OWORD *)v175 - 1);
            _OWORD *v174 = v177;
            v174 -= 2;
            v175 -= 32;
            v176 -= 4;
          }
          while (v176);
          unint64_t v159 = v173;
          if (v171 != (v171 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_293:
            do
            {
              uint64_t v178 = *((void *)v159 - 1);
              v159 -= 8;
              *--v168 = v178;
            }
            while (v159 != v161);
          }
          unint64_t v159 = *v201;
        }
        v9[17] = v168;
        v9[18] = v160;
        v9[19] = v169;
        if (v159) {
          operator delete(v159);
        }
      }
      else
      {
        *(void *)unint64_t v159 = *v156;
        uint64_t v160 = v159 + 8;
      }
      v9[18] = v160;
      uint64_t v180 = (long long *)*((void *)&v230 + 1);
      uint64_t v179 = (long long *)v230;
      if ((void)v230 == *((void *)&v230 + 1))
      {
        unsigned int v15 = v155;
        if (!(void)v230) {
          goto LABEL_265;
        }
      }
      else
      {
        unsigned int v15 = v155;
        do
        {
          sub_1070128((uint64_t)v9[3], v179, v211);
          if (v211[0])
          {
            v211[1] = v211[0];
            operator delete(v211[0]);
          }
          if (!sub_EAE144(v179) || sub_F047E8(v8))
          {
            unint64_t v182 = v11[1];
            if (v182 < v11[2])
            {
              sub_446D30((uint64_t)(v11 + 2), v11[1], v179);
              uint64_t v181 = v182 + 472;
            }
            else
            {
              uint64_t v181 = sub_446BBC(v11, v179);
            }
            v11[1] = v181;
          }
          uint64_t v179 = (long long *)((char *)v179 + 472);
        }
        while (v179 != v180);
        uint64_t v179 = (long long *)v230;
        if (!(void)v230) {
          goto LABEL_265;
        }
      }
      uint64_t v183 = *((void *)&v230 + 1);
      uint64_t v184 = v179;
      if (*((long long **)&v230 + 1) != v179)
      {
        do
          uint64_t v183 = sub_405F44(v183 - 472);
        while ((long long *)v183 != v179);
        uint64_t v184 = (long long *)v230;
      }
      *((void *)&v230 + 1) = v179;
      operator delete(v184);
      goto LABEL_265;
    }
    while (*(double *)(sub_69134(v151) + 32) <= 0.95 || *(double *)(sub_EADAD0(v151) + 32) <= 0.95)
    {
      v151 += 472;
      if (v151 == v150) {
        goto LABEL_221;
      }
    }
  }
LABEL_265:
  uint64_t v185 = (uint64_t)v9[13];
  unint64_t v186 = v9[14];
  unint64_t v187 = 126 - 2 * __clz(((uint64_t)v186 - v185) >> 5);
  if (v186 == (uint64_t *)v185) {
    uint64_t v188 = 0;
  }
  else {
    uint64_t v188 = v187;
  }
  sub_F35D00(v185, v186, (uint64_t)&v230, v188, 1);
  sub_F35B58((uint64_t *)v9 + 13);
  v191 = (void *)*v11;
  __n128 v190 = (void *)v11[1];
  if ((void *)*v11 != v190)
  {
    do
    {
      sub_10702F4((uint64_t)v9[3], v191);
      v191 += 59;
    }
    while (v191 != v190);
  }
  *((_DWORD *)v9 + 32) = v15;
  *((_DWORD *)v9 + 33) = sub_FBB728((uint64_t)(v9[1] + 551), v189);
  if ((v199 & 1) == 0)
  {
    long long v192 = v9[1];
    *((unsigned char *)v192 + 9586) = 0;
    sub_ED7C40((uint64_t)(v192 + 1));
    sub_C63080((uint64_t)(v192 + 1199));
    sub_C6328C((uint64_t)(v192 + 1209));
  }
  sub_1066038((uint64_t)(v9 + 4));
  uint64_t v193 = (char *)v220;
  if (v220)
  {
    int v194 = v221;
    v195 = v220;
    if (v221 != v220)
    {
      do
        int v194 = (char *)sub_405F44((uint64_t)(v194 - 472));
      while (v194 != v193);
      v195 = v220;
    }
    char v221 = v193;
    operator delete(v195);
  }
  if (v224)
  {
    v225 = v224;
    operator delete(v224);
  }
  if (v228)
  {
    uint64_t v229 = v228;
    operator delete(v228);
  }
  return sub_3A6318(v227);
}

void sub_F44EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,uint64_t a61,uint64_t a62)
{
  sub_4323C0(&a52);
  sub_4323C0(v62);
  if (__p)
  {
    a60 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_C62E9C(&a62);
  _Unwind_Resume(a1);
}

void *sub_F4501C()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  char v198 = v3;
  int v207 = v4;
  int v208 = v5;
  uint64_t v7 = v6;
  uint64_t v8 = (void **)v0;
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v0 + 8);
  *(unsigned char *)(v11 + 9586) = 0;
  sub_ED7C40(v11 + 8);
  sub_C63080(v11 + 9592);
  sub_C6328C(v11 + 9672);
  uint64_t v13 = v8 + 17;
  uint64_t v12 = v8[17];
  v8[16] = 0;
  v200 = (char **)(v8 + 17);
  if (v12)
  {
    v8[18] = v12;
    operator delete(v12);
    uint64_t v13 = v8 + 17;
    uint64_t *v200 = 0;
    v8[18] = 0;
    v8[19] = 0;
  }
  *uint64_t v13 = 0;
  v13[1] = 0;
  v13[2] = 0;
  sub_10752F0((uint64_t)v224, *v8);
  sub_F5A844(v221, *v8);
  *uint64_t v10 = 0;
  v10[1] = 0;
  v10[2] = 0;
  v218 = 0;
  v219 = 0;
  unint64_t v220 = 0;
  if (v2 == 0x7FFFFFFFFFFFFFFFLL || !*((unsigned char *)v8 + 84))
  {
    char v199 = v10;
    if (!*((_DWORD *)v8 + 18)) {
      goto LABEL_6;
    }
  }
  else
  {
    char v199 = v10;
    if (!*((_DWORD *)v8 + 18))
    {
LABEL_6:
      LOBYTE(v202) = 0;
      unsigned int v14 = 0;
      goto LABEL_213;
    }
  }
  BOOL v202 = 0;
  unsigned int v203 = 0;
  uint64_t v201 = (uint64_t)(v10 + 2);
  BOOL v204 = (char **)(v8 + 13);
  char v15 = 1;
  char v205 = 1;
  uint64_t v206 = v7;
  while (2)
  {
    if (sub_F047E8(v7))
    {
      char v16 = (void **)*v10;
      uint64_t v17 = v10[1];
      if (v17 != *v10)
      {
        do
        {
          uint64_t v25 = *(void **)(v17 - 224);
          if (v25)
          {
            *(void *)(v17 - 216) = v25;
            operator delete(v25);
          }
          uint64_t v26 = *(void **)(v17 - 248);
          if (v26)
          {
            *(void *)(v17 - 240) = v26;
            operator delete(v26);
          }
          uint64_t v27 = *(void **)(v17 - 312);
          if (v27)
          {
            *(void *)(v17 - 304) = v27;
            operator delete(v27);
          }
          uint64_t v28 = *(void **)(v17 - 336);
          if (v28)
          {
            *(void *)(v17 - 328) = v28;
            operator delete(v28);
          }
          uint64_t v29 = *(void *)(v17 - 360);
          if (v29)
          {
            uint64_t v30 = *(void *)(v17 - 352);
            uint64_t v31 = *(void **)(v17 - 360);
            if (v30 != v29)
            {
              do
              {
                BOOL v32 = *(void **)(v30 - 24);
                if (v32)
                {
                  *(void *)(v30 - 16) = v32;
                  operator delete(v32);
                }
                v30 -= 56;
              }
              while (v30 != v29);
              uint64_t v31 = *(void **)(v17 - 360);
            }
            *(void *)(v17 - 352) = v29;
            operator delete(v31);
          }
          uint64_t v33 = *(void **)(v17 - 448);
          if (v33)
          {
            *(void *)(v17 - 440) = v33;
            operator delete(v33);
          }
          uint64_t v34 = (void **)(v17 - 472);
          if (*(char *)(v17 - 449) < 0) {
            operator delete(*v34);
          }
          v17 -= 472;
        }
        while (v34 != v16);
      }
      v10[1] = (uint64_t)v16;
    }
    if (v205)
    {
      uint64_t v18 = (void **)v218;
      uint64_t v19 = v219;
      if (v219 != v218)
      {
        do
        {
          char v35 = (void *)*((void *)v19 - 28);
          if (v35)
          {
            *((void *)v19 - 27) = v35;
            operator delete(v35);
          }
          uint64_t v36 = (void *)*((void *)v19 - 31);
          if (v36)
          {
            *((void *)v19 - 30) = v36;
            operator delete(v36);
          }
          uint64_t v37 = (void *)*((void *)v19 - 39);
          if (v37)
          {
            *((void *)v19 - 38) = v37;
            operator delete(v37);
          }
          unsigned __int8 v38 = (void *)*((void *)v19 - 42);
          if (v38)
          {
            *((void *)v19 - 41) = v38;
            operator delete(v38);
          }
          uint64_t v39 = *((void *)v19 - 45);
          if (v39)
          {
            uint64_t v40 = *((void *)v19 - 44);
            uint64_t v41 = (void *)*((void *)v19 - 45);
            if (v40 != v39)
            {
              do
              {
                char v42 = *(void **)(v40 - 24);
                if (v42)
                {
                  *(void *)(v40 - 16) = v42;
                  operator delete(v42);
                }
                v40 -= 56;
              }
              while (v40 != v39);
              uint64_t v41 = (void *)*((void *)v19 - 45);
            }
            *((void *)v19 - 44) = v39;
            operator delete(v41);
          }
          uint64_t v43 = (void *)*((void *)v19 - 56);
          if (v43)
          {
            *((void *)v19 - 55) = v43;
            operator delete(v43);
          }
          char v44 = (void **)(v19 - 472);
          if (*(v19 - 449) < 0) {
            operator delete(*v44);
          }
          v19 -= 472;
        }
        while (v44 != v18);
      }
      v219 = (char *)v18;
    }
    sub_F6FCEC();
    uint64_t v20 = (void *)sub_F047F8(v7);
    char v21 = v20;
    char v23 = (char *)v8[18];
    unsigned int v22 = (char *)v8[19];
    if (v23 >= v22)
    {
      unsigned int v45 = *v200;
      uint64_t v46 = v23 - *v200;
      uint64_t v47 = v46 >> 3;
      unint64_t v48 = (v46 >> 3) + 1;
      if (v48 >> 61) {
        sub_2E00();
      }
      uint64_t v49 = v22 - v45;
      if (v49 >> 2 > v48) {
        unint64_t v48 = v49 >> 2;
      }
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v50 = v48;
      }
      if (v50)
      {
        if (v50 >> 61) {
          sub_188D718();
        }
        unint64_t v51 = operator new(8 * v50);
        char v52 = &v51[8 * v47];
        void *v52 = *v21;
        uint64_t v24 = (uint64_t)(v52 + 1);
        if (v23 != v45)
        {
LABEL_68:
          unint64_t v53 = v23 - 8 - v45;
          if (v53 < 0x58) {
            goto LABEL_292;
          }
          if ((unint64_t)(v23 - &v51[v46]) < 0x20) {
            goto LABEL_292;
          }
          uint64_t v54 = (v53 >> 3) + 1;
          uint64_t v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v56 = &v23[-v55];
          char v52 = (void *)((char *)v52 - v55);
          long long v57 = &v51[8 * v47 - 16];
          BOOL v58 = v23 - 16;
          uint64_t v59 = v54 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v60 = *(_OWORD *)v58;
            *(v57 - 1) = *((_OWORD *)v58 - 1);
            _OWORD *v57 = v60;
            v57 -= 2;
            v58 -= 32;
            v59 -= 4;
          }
          while (v59);
          char v23 = v56;
          if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_292:
            do
            {
              uint64_t v61 = *((void *)v23 - 1);
              v23 -= 8;
              *--char v52 = v61;
            }
            while (v23 != v45);
          }
          char v23 = *v200;
          v8[17] = v52;
          v8[18] = (void *)v24;
          v8[19] = &v51[8 * v50];
          if (!v23) {
            goto LABEL_79;
          }
          goto LABEL_78;
        }
      }
      else
      {
        unint64_t v51 = 0;
        char v52 = (void *)(8 * v47);
        *(void *)(8 * v47) = *v21;
        uint64_t v24 = 8 * v47 + 8;
        if (v23 != v45) {
          goto LABEL_68;
        }
      }
      v8[17] = v52;
      v8[18] = (void *)v24;
      v8[19] = &v51[8 * v50];
      if (!v23) {
        goto LABEL_79;
      }
LABEL_78:
      operator delete(v23);
      goto LABEL_79;
    }
    *(void *)char v23 = *v20;
    uint64_t v24 = (uint64_t)(v23 + 8);
LABEL_79:
    v8[18] = (void *)v24;
    char v62 = sub_F43A10((uint64_t)v8, &v216);
    char v63 = (long long *)v216;
    if (!(v205 & 1 | ((v62 & 1) == 0)))
    {
      char v205 = 0;
      int v93 = 4;
      if (v216) {
        goto LABEL_181;
      }
      goto LABEL_206;
    }
    unsigned int v64 = v217;
    BOOL v65 = v202;
    if (v15) {
      BOOL v65 = v216 != v217;
    }
    BOOL v202 = v65;
    *(_OWORD *)v213 = 0u;
    *(_OWORD *)int v214 = 0u;
    int v215 = 1065353216;
    *(_OWORD *)int v210 = 0u;
    *(_OWORD *)int v211 = 0u;
    int v212 = 1065353216;
    if (v216 == v217)
    {
      LOBYTE(v67) = 0;
      unsigned __int8 v66 = 0;
      unint64_t v95 = v211[0];
      if (!v211[0]) {
        goto LABEL_158;
      }
      goto LABEL_162;
    }
    unsigned __int8 v66 = 0;
    int v67 = 0;
    do
    {
      uint64_t v69 = (int *)sub_37B3A8((uint64_t)*v8);
      char v70 = sub_F401B8((uint64_t)v8, v63, (uint64_t)v221, v69, v207, v208, (uint64_t)v213, (uint64_t)v210);
      if ((v70 & 0xC) != 0)
      {
        if (sub_F047E8(v206))
        {
          sub_EAD400((uint64_t)&v228);
          unint64_t v71 = v10[1];
          if (v71 >= v10[2])
          {
            uint64_t v87 = sub_446BBC(v10, &v228);
            uint64_t v88 = (void *)__p;
            v10[1] = v87;
            if (v88)
            {
              *((void *)&__p + 1) = v88;
              operator delete(v88);
            }
          }
          else
          {
            long long v72 = v228;
            *(void *)(v71 + 16) = v229;
            *(void *)(v71 + 24) = 0;
            *(_OWORD *)unint64_t v71 = v72;
            uint64_t v229 = 0;
            long long v228 = 0uLL;
            *(void *)(v71 + 32) = 0;
            *(void *)(v71 + 40) = 0;
            *(_OWORD *)(v71 + 24) = v230;
            *(void *)(v71 + 40) = v231;
            long long v230 = 0uLL;
            uint64_t v231 = 0;
            long long v73 = v232;
            long long v74 = v233;
            long long v75 = v234[0];
            *(_OWORD *)(v71 + 94) = *(_OWORD *)((char *)v234 + 14);
            *(_OWORD *)(v71 + 64) = v74;
            *(_OWORD *)(v71 + 80) = v75;
            *(_OWORD *)(v71 + 48) = v73;
            *(void *)(v71 + 112) = 0;
            *(void *)(v71 + 120) = 0;
            *(void *)(v71 + 128) = 0;
            *(void *)(v71 + 136) = 0;
            *(_OWORD *)(v71 + 112) = v235;
            *(void *)(v71 + 128) = v236;
            long long v235 = 0uLL;
            uint64_t v236 = 0;
            *(void *)(v71 + 144) = 0;
            *(void *)(v71 + 152) = 0;
            *(_OWORD *)(v71 + 136) = v237;
            long long v237 = 0uLL;
            *(void *)(v71 + 152) = v238;
            *(void *)(v71 + 160) = 0;
            uint64_t v238 = 0;
            *(void *)(v71 + 168) = 0;
            *(void *)(v71 + 176) = 0;
            *(_OWORD *)(v71 + 160) = v239;
            *(void *)(v71 + 176) = v240;
            long long v239 = 0uLL;
            uint64_t v240 = 0;
            long long v76 = v241;
            uint64_t v77 = v243;
            *(_OWORD *)(v71 + 200) = v242;
            *(_OWORD *)(v71 + 184) = v76;
            *(void *)(v71 + 216) = v77;
            *(void *)(v71 + 224) = 0;
            *(void *)(v71 + 232) = 0;
            *(void *)(v71 + 240) = 0;
            *(_OWORD *)(v71 + 224) = v244;
            long long v244 = 0uLL;
            *(void *)(v71 + 240) = v245;
            *(void *)(v71 + 248) = 0;
            uint64_t v245 = 0;
            *(void *)(v71 + 256) = 0;
            *(void *)(v71 + 264) = 0;
            *(_OWORD *)(v71 + 248) = __p;
            *(void *)(v71 + 264) = v247;
            long long __p = 0uLL;
            uint64_t v247 = 0;
            *(_OWORD *)(v71 + 272) = v248;
            *(_DWORD *)(v71 + 296) = v250;
            if (v250 <= 1) {
              *(void *)(v71 + 288) = v249;
            }
            *(_OWORD *)(v71 + 304) = v251;
            long long v78 = v257;
            long long v80 = v254;
            long long v79 = v255;
            *(_OWORD *)(v71 + 384) = v256;
            *(_OWORD *)(v71 + 400) = v78;
            *(_OWORD *)(v71 + 352) = v80;
            *(_OWORD *)(v71 + 368) = v79;
            long long v82 = v259;
            long long v81 = *(_OWORD *)v260;
            long long v83 = v258;
            *(void *)(v71 + 463) = *(void *)&v260[15];
            *(_OWORD *)(v71 + 432) = v82;
            *(_OWORD *)(v71 + 448) = v81;
            *(_OWORD *)(v71 + 416) = v83;
            long long v84 = v253;
            *(_OWORD *)(v71 + 320) = v252;
            *(_OWORD *)(v71 + 336) = v84;
            v10[1] = v71 + 472;
          }
          if ((void)v244)
          {
            *((void *)&v244 + 1) = v244;
            operator delete((void *)v244);
          }
          if ((void)v239)
          {
            *((void *)&v239 + 1) = v239;
            operator delete((void *)v239);
          }
          if ((void)v237)
          {
            *((void *)&v237 + 1) = v237;
            operator delete((void *)v237);
          }
          uint64_t v89 = v235;
          if ((void)v235)
          {
            uint64_t v90 = *((void *)&v235 + 1);
            uint64_t v91 = (void *)v235;
            if (*((void *)&v235 + 1) != (void)v235)
            {
              do
              {
                char v92 = *(void **)(v90 - 24);
                if (v92)
                {
                  *(void *)(v90 - 16) = v92;
                  operator delete(v92);
                }
                v90 -= 56;
              }
              while (v90 != v89);
              uint64_t v91 = (void *)v235;
            }
            *((void *)&v235 + 1) = v89;
            operator delete(v91);
          }
          if ((void)v230)
          {
            *((void *)&v230 + 1) = v230;
            operator delete((void *)v230);
          }
          if (SHIBYTE(v229) < 0) {
            operator delete((void *)v228);
          }
        }
      }
      else
      {
        sub_1075360((uint64_t)v224, (uint64_t)v63);
        if (v62)
        {
          if (v205)
          {
            long long v85 = v219;
            if ((unint64_t)v219 >= v220)
            {
              v219 = (char *)sub_446BBC((uint64_t *)&v218, v63);
            }
            else
            {
              sub_446D30((uint64_t)&v220, (uint64_t)v219, v63);
              v219 = v85 + 472;
            }
          }
        }
        else
        {
          unint64_t v86 = v10[1];
          if (v86 < v10[2])
          {
            sub_446D30(v201, v10[1], v63);
            uint64_t v68 = v86 + 472;
          }
          else
          {
            uint64_t v68 = sub_446BBC(v10, v63);
          }
          v10[1] = v68;
        }
      }
      v66 |= v70;
      v67 |= (v70 & 2) >> 1;
      char v63 = (long long *)((char *)v63 + 472);
    }
    while (v63 != v64);
    int v94 = v214[0];
    if (!v214[0])
    {
      unint64_t v95 = v211[0];
      if (!v211[0]) {
        goto LABEL_158;
      }
      goto LABEL_162;
    }
    do
    {
      BOOL v100 = v8[1];
      *((unsigned char *)v100 + 9586) = 1;
      sub_F57008((uint64_t)(v100 + 1199), 1);
      uint64_t v101 = v94 + 2;
      uint64_t v103 = sub_F57414((uint64_t)(v100 + 1199), v94 + 2);
      if (v103 == -1)
      {
        uint64_t v107 = v100[1205];
        uint64_t v108 = v100[1204];
        if ((unint64_t)(v107 - v108) >= 0x1FFFFFFFFFFFFFFFLL)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "insert overflow");
        }
        uint64_t v109 = v100[1208];
        if (v108
          && (unint64_t v110 = *(void *)(v109 + 8 * v102),
              __PAIR64__(*((unsigned __int16 *)v100 + 4814), *((_DWORD *)v100 + 2406)) == __PAIR64__(WORD2(v110), v110))
          && (HIWORD(v110) & 1) != (*((unsigned char *)v100 + 9630) == 0))
        {
          v100[1204] = v108 - 1;
          *(void *)(v109 + 8 * v102) = *v101;
          uint64_t v104 = (__n128 *)(v94 + 3);
          unsigned __int8 v106 = (__n128 *)v8[14];
          unsigned __int8 v105 = (__n128 *)v8[15];
          if (v106 < v105) {
            goto LABEL_130;
          }
        }
        else
        {
          v100[1205] = v107 + 1;
          *(void *)(v109 + 8 * v102) = *v101;
          uint64_t v104 = (__n128 *)(v94 + 3);
          unsigned __int8 v106 = (__n128 *)v8[14];
          unsigned __int8 v105 = (__n128 *)v8[15];
          if (v106 < v105)
          {
LABEL_130:
            sub_45E5B0(v106, v104);
            long long v99 = v106 + 2;
            v8[14] = v106[2].n128_u64;
            goto LABEL_127;
          }
        }
      }
      else
      {
        uint64_t v104 = (__n128 *)(v94 + 3);
        unsigned __int8 v106 = (__n128 *)v8[14];
        unsigned __int8 v105 = (__n128 *)v8[15];
        if (v106 < v105) {
          goto LABEL_130;
        }
      }
      uint64_t v111 = ((char *)v106 - *v204) >> 5;
      if ((unint64_t)(v111 + 1) >> 59) {
        sub_2E00();
      }
      uint64_t v112 = (char *)v105 - *v204;
      uint64_t v113 = v112 >> 4;
      if (v112 >> 4 <= (unint64_t)(v111 + 1)) {
        uint64_t v113 = v111 + 1;
      }
      if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v114 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v114 = v113;
      }
      if (v114)
      {
        if (v114 >> 59) {
          sub_188D718();
        }
        unint64_t v115 = (__n128 *)operator new(32 * v114);
      }
      else
      {
        unint64_t v115 = 0;
      }
      sub_45E5B0(&v115[2 * v111], v104);
      unint64_t v117 = (char *)v8[13];
      uint64_t v96 = (char *)v8[14];
      if (v96 == v117)
      {
        unsigned int v121 = &v115[2 * v114];
        long long v99 = v116 + 2;
        v8[13] = v116->n128_u64;
        v8[14] = v116[2].n128_u64;
        v8[15] = v121->n128_u64;
        if (v96) {
          goto LABEL_126;
        }
      }
      else
      {
        uint64_t v118 = 0;
        do
        {
          uint64_t v119 = &v116[v118];
          unsigned int v120 = &v96[v118 * 16];
          v116[v118 - 1].n128_u32[0] = *(_DWORD *)&v96[v118 * 16 - 16];
          if (*(_DWORD *)&v96[v118 * 16 - 16] <= 1u) {
            v119[-2] = *((__n128 *)v120 - 2);
          }
          v119[-1].n128_u8[8] = *(v120 - 8);
          v118 -= 2;
        }
        while (&v96[v118 * 16] != v117);
        uint64_t v96 = *v204;
        uint64_t v97 = &v116[v118];
        long long v98 = &v115[2 * v114];
        long long v99 = v116 + 2;
        v8[13] = v97->n128_u64;
        v8[14] = v116[2].n128_u64;
        v8[15] = v98->n128_u64;
        if (v96) {
LABEL_126:
        }
          operator delete(v96);
      }
LABEL_127:
      v8[14] = v99->n128_u64;
      v66 |= v103 == -1;
      int v94 = (void *)*v94;
    }
    while (v94);
    uint64_t v10 = v199;
    unint64_t v95 = v211[0];
    if (!v211[0])
    {
LABEL_158:
      BOOL v122 = 0;
      goto LABEL_169;
    }
    do
    {
LABEL_162:
      int v123 = v8[1];
      *((unsigned char *)v123 + 9586) = 1;
      sub_F57008((uint64_t)(v123 + 1199), 1);
      uint64_t v124 = sub_F57414((uint64_t)(v123 + 1199), v95 + 2);
      if (v124 == -1)
      {
        uint64_t v126 = v123[1205];
        uint64_t v127 = v123[1204];
        if ((unint64_t)(v126 - v127) >= 0x1FFFFFFFFFFFFFFFLL)
        {
          v196 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v196, "insert overflow");
        }
        uint64_t v128 = v123[1208];
        if (v127
          && (unint64_t v129 = *(void *)(v128 + 8 * v125),
              __PAIR64__(*((unsigned __int16 *)v123 + 4814), *((_DWORD *)v123 + 2406)) == __PAIR64__(WORD2(v129), v129))
          && (HIWORD(v129) & 1) != (*((unsigned char *)v123 + 9630) == 0))
        {
          v123[1204] = v127 - 1;
        }
        else
        {
          v123[1205] = v126 + 1;
        }
        *(void *)(v128 + 8 * v125) = v95[2];
      }
      v66 |= v124 == -1;
      unint64_t v95 = (void *)*v95;
    }
    while (v95);
    BOOL v122 = v211[0];
LABEL_169:
    BOOL v130 = v218 == v219;
    if ((v66 | (v62 | v67))) {
      int v93 = 0;
    }
    else {
      int v93 = 2;
    }
    if (v122)
    {
      do
      {
        BOOL v131 = (void *)*v122;
        operator delete(v122);
        BOOL v122 = v131;
      }
      while (v131);
    }
    unsigned int v132 = v210[0];
    v210[0] = 0;
    if (v132) {
      operator delete(v132);
    }
    unsigned int v133 = v214[0];
    if (v214[0])
    {
      do
      {
        unsigned int v134 = (void *)*v133;
        operator delete(v133);
        unsigned int v133 = v134;
      }
      while (v134);
    }
    BOOL v135 = v213[0];
    v213[0] = 0;
    if (v135) {
      operator delete(v135);
    }
    char v15 = 0;
    v205 &= v66 | v130;
    char v63 = (long long *)v216;
    if (v216)
    {
LABEL_181:
      unsigned int v136 = v217;
      long long v137 = v63;
      if (v217 != v63)
      {
        do
        {
          int v138 = (void *)*((void *)v136 - 28);
          if (v138)
          {
            *((void *)v136 - 27) = v138;
            operator delete(v138);
          }
          int v139 = (void *)*((void *)v136 - 31);
          if (v139)
          {
            *((void *)v136 - 30) = v139;
            operator delete(v139);
          }
          v140 = (void *)*((void *)v136 - 39);
          if (v140)
          {
            *((void *)v136 - 38) = v140;
            operator delete(v140);
          }
          v141 = (void *)*((void *)v136 - 42);
          if (v141)
          {
            *((void *)v136 - 41) = v141;
            operator delete(v141);
          }
          uint64_t v142 = *((void *)v136 - 45);
          if (v142)
          {
            uint64_t v143 = *((void *)v136 - 44);
            uint64_t v144 = (void *)*((void *)v136 - 45);
            if (v143 != v142)
            {
              do
              {
                v145 = *(void **)(v143 - 24);
                if (v145)
                {
                  *(void *)(v143 - 16) = v145;
                  operator delete(v145);
                }
                v143 -= 56;
              }
              while (v143 != v142);
              uint64_t v144 = (void *)*((void *)v136 - 45);
            }
            *((void *)v136 - 44) = v142;
            operator delete(v144);
          }
          v146 = (void *)*((void *)v136 - 56);
          if (v146)
          {
            *((void *)v136 - 55) = v146;
            operator delete(v146);
          }
          uint64_t v147 = (void **)v136 - 59;
          if (*((char *)v136 - 449) < 0) {
            operator delete(*v147);
          }
          unsigned int v136 = (long long *)((char *)v136 - 472);
        }
        while (v147 != (void **)v63);
        long long v137 = v216;
      }
      int v217 = v63;
      operator delete(v137);
    }
LABEL_206:
    unsigned int v148 = *((_DWORD *)v8 + 18);
    if (v93 != 2)
    {
      ++v203;
      uint64_t v7 = v206;
      if (v203 >= v148)
      {
        unsigned int v14 = v203;
        goto LABEL_210;
      }
      continue;
    }
    break;
  }
  uint64_t v7 = v206;
  unsigned int v14 = v203;
  if (v203 >= v148)
  {
LABEL_210:
    if (v218 != v219 && &v218 != (void **)v10) {
      sub_D5A97C(v10, (uint64_t)v218, (uint64_t)v219, 0xCBEEA4E1A08AD8F3 * ((v219 - (unsigned char *)v218) >> 3));
    }
  }
LABEL_213:
  if (!(sub_F047F0(v7) & 1 | !v202) && *((unsigned char *)v8[3] + 8080))
  {
    uint64_t v150 = *v10;
    uint64_t v149 = v10[1];
    if (*v10 == v149)
    {
LABEL_221:
      if (sub_F047E8(v7))
      {
        uint64_t v152 = *v10;
        uint64_t v151 = v10[1];
        if (v151 != *v10)
        {
          do
            uint64_t v151 = sub_405F44(v151 - 472);
          while (v151 != v152);
        }
        v10[1] = v152;
      }
      uint64_t v153 = v8[1];
      *((unsigned char *)v153 + 9586) = 0;
      sub_ED7C40((uint64_t)(v153 + 1));
      sub_C63080((uint64_t)(v153 + 1199));
      sub_C6328C((uint64_t)(v153 + 1209));
      unsigned int v154 = v14;
      sub_F6FCEC();
      unsigned int v155 = (void *)sub_F047F8(v7);
      int v156 = v155;
      int v158 = (char *)v8[18];
      uint64_t v157 = (char *)v8[19];
      if (v158 >= v157)
      {
        uint64_t v160 = *v200;
        uint64_t v161 = v158 - *v200;
        uint64_t v162 = v161 >> 3;
        unint64_t v163 = (v161 >> 3) + 1;
        if (v163 >> 61) {
          sub_2E00();
        }
        uint64_t v164 = v157 - v160;
        if (v164 >> 2 > v163) {
          unint64_t v163 = v164 >> 2;
        }
        if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v165 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v165 = v163;
        }
        if (v165)
        {
          if (v165 >> 61) {
            sub_188D718();
          }
          unint64_t v166 = operator new(8 * v165);
        }
        else
        {
          unint64_t v166 = 0;
        }
        v167 = &v166[8 * v162];
        v168 = &v166[8 * v165];
        void *v167 = *v156;
        unint64_t v159 = v167 + 1;
        if (v158 != v160)
        {
          unint64_t v169 = v158 - v160 - 8;
          if (v169 < 0x58) {
            goto LABEL_293;
          }
          if ((unint64_t)(v158 - v166 - v161) < 0x20) {
            goto LABEL_293;
          }
          uint64_t v170 = (v169 >> 3) + 1;
          uint64_t v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v172 = &v158[-v171];
          v167 = (void *)((char *)v167 - v171);
          v173 = &v166[8 * v162 - 16];
          v174 = v158 - 16;
          uint64_t v175 = v170 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v176 = *(_OWORD *)v174;
            *(v173 - 1) = *((_OWORD *)v174 - 1);
            _OWORD *v173 = v176;
            v173 -= 2;
            v174 -= 32;
            v175 -= 4;
          }
          while (v175);
          int v158 = v172;
          if (v170 != (v170 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_293:
            do
            {
              uint64_t v177 = *((void *)v158 - 1);
              v158 -= 8;
              *--v167 = v177;
            }
            while (v158 != v160);
          }
          int v158 = *v200;
        }
        v8[17] = v167;
        v8[18] = v159;
        v8[19] = v168;
        if (v158) {
          operator delete(v158);
        }
      }
      else
      {
        *(void *)int v158 = *v155;
        unint64_t v159 = v158 + 8;
      }
      v8[18] = v159;
      uint64_t v179 = (long long *)*((void *)&v228 + 1);
      uint64_t v178 = (long long *)v228;
      if ((void)v228 == *((void *)&v228 + 1))
      {
        unsigned int v14 = v154;
        if (!(void)v228) {
          goto LABEL_265;
        }
      }
      else
      {
        unsigned int v14 = v154;
        do
        {
          sub_1070128((uint64_t)v8[3], v178, v209);
          if (v209[0])
          {
            v209[1] = v209[0];
            operator delete(v209[0]);
          }
          if (!sub_EAE144(v178) || sub_F047E8(v7))
          {
            unint64_t v181 = v10[1];
            if (v181 < v10[2])
            {
              sub_446D30((uint64_t)(v10 + 2), v10[1], v178);
              uint64_t v180 = v181 + 472;
            }
            else
            {
              uint64_t v180 = sub_446BBC(v10, v178);
            }
            v10[1] = v180;
          }
          uint64_t v178 = (long long *)((char *)v178 + 472);
        }
        while (v178 != v179);
        uint64_t v178 = (long long *)v228;
        if (!(void)v228) {
          goto LABEL_265;
        }
      }
      uint64_t v182 = *((void *)&v228 + 1);
      uint64_t v183 = v178;
      if (*((long long **)&v228 + 1) != v178)
      {
        do
          uint64_t v182 = sub_405F44(v182 - 472);
        while ((long long *)v182 != v178);
        uint64_t v183 = (long long *)v228;
      }
      *((void *)&v228 + 1) = v178;
      operator delete(v183);
      goto LABEL_265;
    }
    while (*(double *)(sub_69134(v150) + 32) <= 0.95 || *(double *)(sub_EADAD0(v150) + 32) <= 0.95)
    {
      v150 += 472;
      if (v150 == v149) {
        goto LABEL_221;
      }
    }
  }
LABEL_265:
  uint64_t v184 = (uint64_t)v8[13];
  uint64_t v185 = v8[14];
  unint64_t v186 = 126 - 2 * __clz(((uint64_t)v185 - v184) >> 5);
  if (v185 == (uint64_t *)v184) {
    uint64_t v187 = 0;
  }
  else {
    uint64_t v187 = v186;
  }
  sub_F35D00(v184, v185, (uint64_t)&v228, v187, 1);
  sub_F35B58((uint64_t *)v8 + 13);
  __n128 v190 = (void *)*v10;
  double v189 = (void *)v10[1];
  if ((void *)*v10 != v189)
  {
    do
    {
      sub_10702F4((uint64_t)v8[3], v190);
      v190 += 59;
    }
    while (v190 != v189);
  }
  *((_DWORD *)v8 + 32) = v14;
  *((_DWORD *)v8 + 33) = sub_FBB728((uint64_t)(v8[1] + 551), v188);
  if ((v198 & 1) == 0)
  {
    v191 = v8[1];
    *((unsigned char *)v191 + 9586) = 0;
    sub_ED7C40((uint64_t)(v191 + 1));
    sub_C63080((uint64_t)(v191 + 1199));
    sub_C6328C((uint64_t)(v191 + 1209));
  }
  sub_1066038((uint64_t)(v8 + 4));
  long long v192 = (char *)v218;
  if (v218)
  {
    uint64_t v193 = v219;
    int v194 = v218;
    if (v219 != v218)
    {
      do
        uint64_t v193 = (char *)sub_405F44((uint64_t)(v193 - 472));
      while (v193 != v192);
      int v194 = v218;
    }
    v219 = v192;
    operator delete(v194);
  }
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  if (v226)
  {
    v227 = v226;
    operator delete(v226);
  }
  return sub_3A6318(v225);
}

void sub_F463A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,uint64_t a61,uint64_t a62)
{
  sub_4323C0(&a52);
  sub_4323C0(v62);
  if (__p)
  {
    a60 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_C62E9C(&a62);
  _Unwind_Resume(a1);
}

void *sub_F464D8()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  char v197 = v3;
  int v204 = v4;
  int v205 = v5;
  uint64_t v7 = v6;
  uint64_t v8 = v0;
  uint64_t v206 = v9;
  uint64_t v10 = *(void *)(v0 + 8);
  *(unsigned char *)(v10 + 30354) = 0;
  sub_ED7C40(v10 + 8);
  sub_C63080(v10 + 30360);
  sub_F54484(v10 + 30440);
  uint64_t v12 = (void *)(v8 + 136);
  uint64_t v11 = *(void **)(v8 + 136);
  *(void *)(v8 + 128) = 0;
  char v198 = (char **)(v8 + 136);
  if (v11)
  {
    *(void *)(v8 + 144) = v11;
    operator delete(v11);
    uint64_t v12 = (void *)(v8 + 136);
    *char v198 = 0;
    *(void *)(v8 + 144) = 0;
    *(void *)(v8 + 152) = 0;
  }
  void *v12 = 0;
  v12[1] = 0;
  v12[2] = 0;
  sub_1075F74((uint64_t)v219, *(void **)v8);
  sub_F5B750(v256, *(void *)v8);
  *uint64_t v206 = 0;
  v206[1] = 0;
  v206[2] = 0;
  v216 = 0;
  int v217 = 0;
  unint64_t v218 = 0;
  if (v2 == 0x7FFFFFFFFFFFFFFFLL || !*(unsigned char *)(v8 + 84))
  {
    uint64_t v203 = v7;
    if (!*(_DWORD *)(v8 + 72)) {
      goto LABEL_6;
    }
    goto LABEL_8;
  }
  uint64_t v203 = v7;
  if (*(_DWORD *)(v8 + 72))
  {
LABEL_8:
    uint64_t v199 = 0;
    BOOL v202 = (char **)(v8 + 104);
    char v15 = 1;
    char v201 = 1;
    while (1)
    {
      if (sub_F047E8(v7))
      {
        char v16 = (void **)*v206;
        uint64_t v17 = v206[1];
        if (v17 != *v206)
        {
          do
          {
            uint64_t v25 = *(void **)(v17 - 224);
            if (v25)
            {
              *(void *)(v17 - 216) = v25;
              operator delete(v25);
            }
            uint64_t v26 = *(void **)(v17 - 248);
            if (v26)
            {
              *(void *)(v17 - 240) = v26;
              operator delete(v26);
            }
            uint64_t v27 = *(void **)(v17 - 312);
            if (v27)
            {
              *(void *)(v17 - 304) = v27;
              operator delete(v27);
            }
            uint64_t v28 = *(void **)(v17 - 336);
            if (v28)
            {
              *(void *)(v17 - 328) = v28;
              operator delete(v28);
            }
            uint64_t v29 = *(void *)(v17 - 360);
            if (v29)
            {
              uint64_t v30 = *(void *)(v17 - 352);
              uint64_t v31 = *(void **)(v17 - 360);
              if (v30 != v29)
              {
                do
                {
                  BOOL v32 = *(void **)(v30 - 24);
                  if (v32)
                  {
                    *(void *)(v30 - 16) = v32;
                    operator delete(v32);
                  }
                  v30 -= 56;
                }
                while (v30 != v29);
                uint64_t v31 = *(void **)(v17 - 360);
              }
              *(void *)(v17 - 352) = v29;
              operator delete(v31);
            }
            uint64_t v33 = *(void **)(v17 - 448);
            if (v33)
            {
              *(void *)(v17 - 440) = v33;
              operator delete(v33);
            }
            uint64_t v34 = (void **)(v17 - 472);
            if (*(char *)(v17 - 449) < 0) {
              operator delete(*v34);
            }
            v17 -= 472;
          }
          while (v34 != v16);
        }
        v206[1] = (uint64_t)v16;
        uint64_t v7 = v203;
      }
      if (v201)
      {
        uint64_t v18 = (void **)v216;
        uint64_t v19 = v217;
        if (v217 != v216)
        {
          do
          {
            char v35 = (void *)*((void *)v19 - 28);
            if (v35)
            {
              *((void *)v19 - 27) = v35;
              operator delete(v35);
            }
            uint64_t v36 = (void *)*((void *)v19 - 31);
            if (v36)
            {
              *((void *)v19 - 30) = v36;
              operator delete(v36);
            }
            uint64_t v37 = (void *)*((void *)v19 - 39);
            if (v37)
            {
              *((void *)v19 - 38) = v37;
              operator delete(v37);
            }
            unsigned __int8 v38 = (void *)*((void *)v19 - 42);
            if (v38)
            {
              *((void *)v19 - 41) = v38;
              operator delete(v38);
            }
            uint64_t v39 = *((void *)v19 - 45);
            if (v39)
            {
              uint64_t v40 = *((void *)v19 - 44);
              uint64_t v41 = (void *)*((void *)v19 - 45);
              if (v40 != v39)
              {
                do
                {
                  char v42 = *(void **)(v40 - 24);
                  if (v42)
                  {
                    *(void *)(v40 - 16) = v42;
                    operator delete(v42);
                  }
                  v40 -= 56;
                }
                while (v40 != v39);
                uint64_t v41 = (void *)*((void *)v19 - 45);
              }
              *((void *)v19 - 44) = v39;
              operator delete(v41);
            }
            uint64_t v43 = (void *)*((void *)v19 - 56);
            if (v43)
            {
              *((void *)v19 - 55) = v43;
              operator delete(v43);
            }
            char v44 = (void **)(v19 - 472);
            if (*(v19 - 449) < 0) {
              operator delete(*v44);
            }
            v19 -= 472;
          }
          while (v44 != v18);
        }
        int v217 = (char *)v18;
        uint64_t v7 = v203;
      }
      sub_F59178();
      uint64_t v20 = (void *)sub_F047F8(v7);
      char v21 = v20;
      char v23 = *(char **)(v8 + 144);
      unint64_t v22 = *(void *)(v8 + 152);
      if ((unint64_t)v23 < v22)
      {
        *(void *)char v23 = *v20;
        uint64_t v24 = (uint64_t)(v23 + 8);
        goto LABEL_79;
      }
      unsigned int v45 = *v198;
      uint64_t v46 = v23 - *v198;
      uint64_t v47 = v46 >> 3;
      unint64_t v48 = (v46 >> 3) + 1;
      if (v48 >> 61) {
        sub_2E00();
      }
      uint64_t v49 = v22 - (void)v45;
      if (v49 >> 2 > v48) {
        unint64_t v48 = v49 >> 2;
      }
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v50 = v48;
      }
      if (v50)
      {
        if (v50 >> 61) {
          sub_188D718();
        }
        unint64_t v51 = operator new(8 * v50);
        char v52 = &v51[8 * v47];
        void *v52 = *v21;
        uint64_t v24 = (uint64_t)(v52 + 1);
        if (v23 == v45)
        {
LABEL_77:
          *(void *)(v8 + 136) = v52;
          *(void *)(v8 + 144) = v24;
          *(void *)(v8 + 152) = &v51[8 * v50];
          if (!v23) {
            goto LABEL_79;
          }
LABEL_78:
          operator delete(v23);
          goto LABEL_79;
        }
      }
      else
      {
        unint64_t v51 = 0;
        char v52 = (void *)(8 * v47);
        *(void *)(8 * v47) = *v21;
        uint64_t v24 = 8 * v47 + 8;
        if (v23 == v45) {
          goto LABEL_77;
        }
      }
      unint64_t v53 = v23 - 8 - v45;
      if (v53 < 0x58) {
        goto LABEL_293;
      }
      if ((unint64_t)(v23 - &v51[v46]) < 0x20) {
        goto LABEL_293;
      }
      uint64_t v54 = (v53 >> 3) + 1;
      uint64_t v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v56 = &v23[-v55];
      char v52 = (void *)((char *)v52 - v55);
      long long v57 = &v51[8 * v47 - 16];
      BOOL v58 = v23 - 16;
      uint64_t v59 = v54 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v60 = *(_OWORD *)v58;
        *(v57 - 1) = *((_OWORD *)v58 - 1);
        _OWORD *v57 = v60;
        v57 -= 2;
        v58 -= 32;
        v59 -= 4;
      }
      while (v59);
      char v23 = v56;
      if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_293:
        do
        {
          uint64_t v61 = *((void *)v23 - 1);
          v23 -= 8;
          *--char v52 = v61;
        }
        while (v23 != v45);
      }
      char v23 = *v198;
      *(void *)(v8 + 136) = v52;
      *(void *)(v8 + 144) = v24;
      *(void *)(v8 + 152) = &v51[8 * v50];
      if (v23) {
        goto LABEL_78;
      }
LABEL_79:
      *(void *)(v8 + 144) = v24;
      char v62 = (long long *)v214;
      if (v214 == v215)
      {
        char v63 = 0;
        unsigned int v64 = (long long *)v214;
LABEL_83:
        *(_OWORD *)int v211 = 0u;
        *(_OWORD *)int v212 = 0u;
        BOOL v65 = v199;
        if (v15) {
          BOOL v65 = v64 != v62;
        }
        LODWORD(v199) = v65;
        int v213 = 1065353216;
        *(_OWORD *)int v208 = 0uLL;
        *(_OWORD *)int v209 = 0uLL;
        int v210 = 1065353216;
        char v200 = v63;
        if (v64 == v62)
        {
          LOBYTE(v67) = 0;
          unsigned __int8 v66 = 0;
          int v94 = v209[0];
          if (!v209[0]) {
            goto LABEL_159;
          }
          goto LABEL_163;
        }
        unsigned __int8 v66 = 0;
        int v67 = 0;
        do
        {
          uint64_t v69 = (int *)sub_37B3A8(*(void *)v8);
          char v70 = sub_F40EF8(v8, v64, (uint64_t)v256, v69, v204, v205, (uint64_t)v211, (uint64_t)v208);
          if ((v70 & 0xC) != 0)
          {
            if (sub_F047E8(v203))
            {
              sub_EAFC08((uint64_t)&v223);
              unint64_t v71 = v206[1];
              if (v71 >= v206[2])
              {
                uint64_t v87 = sub_446BBC(v206, &v223);
                uint64_t v88 = (void *)__p;
                v206[1] = v87;
                if (v88)
                {
                  *((void *)&__p + 1) = v88;
                  operator delete(v88);
                }
              }
              else
              {
                long long v72 = v223;
                *(void *)(v71 + 16) = v224;
                *(void *)(v71 + 24) = 0;
                *(_OWORD *)unint64_t v71 = v72;
                uint64_t v224 = 0;
                long long v223 = 0uLL;
                *(void *)(v71 + 32) = 0;
                *(void *)(v71 + 40) = 0;
                *(_OWORD *)(v71 + 24) = v225;
                *(void *)(v71 + 40) = v226;
                long long v225 = 0uLL;
                uint64_t v226 = 0;
                long long v73 = v227;
                long long v74 = v228;
                long long v75 = v229[0];
                *(_OWORD *)(v71 + 94) = *(_OWORD *)((char *)v229 + 14);
                *(_OWORD *)(v71 + 64) = v74;
                *(_OWORD *)(v71 + 80) = v75;
                *(_OWORD *)(v71 + 48) = v73;
                *(void *)(v71 + 112) = 0;
                *(void *)(v71 + 120) = 0;
                *(void *)(v71 + 128) = 0;
                *(void *)(v71 + 136) = 0;
                *(_OWORD *)(v71 + 112) = v230;
                *(void *)(v71 + 128) = v231;
                long long v230 = 0uLL;
                uint64_t v231 = 0;
                *(void *)(v71 + 144) = 0;
                *(void *)(v71 + 152) = 0;
                *(_OWORD *)(v71 + 136) = v232;
                long long v232 = 0uLL;
                *(void *)(v71 + 152) = v233;
                *(void *)(v71 + 160) = 0;
                uint64_t v233 = 0;
                *(void *)(v71 + 168) = 0;
                *(void *)(v71 + 176) = 0;
                *(_OWORD *)(v71 + 160) = v234;
                *(void *)(v71 + 176) = v235;
                long long v234 = 0uLL;
                uint64_t v235 = 0;
                long long v76 = v236;
                uint64_t v77 = v238;
                *(_OWORD *)(v71 + 200) = v237;
                *(_OWORD *)(v71 + 184) = v76;
                *(void *)(v71 + 216) = v77;
                *(void *)(v71 + 224) = 0;
                *(void *)(v71 + 232) = 0;
                *(void *)(v71 + 240) = 0;
                *(_OWORD *)(v71 + 224) = v239;
                long long v239 = 0uLL;
                *(void *)(v71 + 240) = v240;
                *(void *)(v71 + 248) = 0;
                uint64_t v240 = 0;
                *(void *)(v71 + 256) = 0;
                *(void *)(v71 + 264) = 0;
                *(_OWORD *)(v71 + 248) = __p;
                *(void *)(v71 + 264) = v242;
                long long __p = 0uLL;
                uint64_t v242 = 0;
                *(_OWORD *)(v71 + 272) = v243;
                *(_DWORD *)(v71 + 296) = v245;
                if (v245 <= 1) {
                  *(void *)(v71 + 288) = v244;
                }
                *(_OWORD *)(v71 + 304) = v246;
                long long v78 = v252;
                long long v80 = v249;
                long long v79 = v250;
                *(_OWORD *)(v71 + 384) = v251;
                *(_OWORD *)(v71 + 400) = v78;
                *(_OWORD *)(v71 + 352) = v80;
                *(_OWORD *)(v71 + 368) = v79;
                long long v82 = v254;
                long long v81 = *(_OWORD *)v255;
                long long v83 = v253;
                *(void *)(v71 + 463) = *(void *)&v255[15];
                *(_OWORD *)(v71 + 432) = v82;
                *(_OWORD *)(v71 + 448) = v81;
                *(_OWORD *)(v71 + 416) = v83;
                long long v84 = v248;
                *(_OWORD *)(v71 + 320) = v247;
                *(_OWORD *)(v71 + 336) = v84;
                v206[1] = v71 + 472;
              }
              if ((void)v239)
              {
                *((void *)&v239 + 1) = v239;
                operator delete((void *)v239);
              }
              if ((void)v234)
              {
                *((void *)&v234 + 1) = v234;
                operator delete((void *)v234);
              }
              if ((void)v232)
              {
                *((void *)&v232 + 1) = v232;
                operator delete((void *)v232);
              }
              uint64_t v89 = v230;
              if ((void)v230)
              {
                uint64_t v90 = *((void *)&v230 + 1);
                uint64_t v91 = (void *)v230;
                if (*((void *)&v230 + 1) != (void)v230)
                {
                  do
                  {
                    char v92 = *(void **)(v90 - 24);
                    if (v92)
                    {
                      *(void *)(v90 - 16) = v92;
                      operator delete(v92);
                    }
                    v90 -= 56;
                  }
                  while (v90 != v89);
                  uint64_t v91 = (void *)v230;
                }
                *((void *)&v230 + 1) = v89;
                operator delete(v91);
              }
              if ((void)v225)
              {
                *((void *)&v225 + 1) = v225;
                operator delete((void *)v225);
              }
              char v63 = v200;
              if (SHIBYTE(v224) < 0) {
                operator delete((void *)v223);
              }
            }
          }
          else
          {
            sub_1075FE4((uint64_t)v219, (uint64_t)v64);
            if (v63)
            {
              if (v201)
              {
                long long v85 = v217;
                if ((unint64_t)v217 >= v218)
                {
                  int v217 = (char *)sub_446BBC((uint64_t *)&v216, v64);
                }
                else
                {
                  sub_446D30((uint64_t)&v218, (uint64_t)v217, v64);
                  int v217 = v85 + 472;
                }
              }
            }
            else
            {
              unint64_t v86 = v206[1];
              if (v86 < v206[2])
              {
                sub_446D30((uint64_t)(v206 + 2), v206[1], v64);
                uint64_t v68 = v86 + 472;
              }
              else
              {
                uint64_t v68 = sub_446BBC(v206, v64);
              }
              v206[1] = v68;
            }
          }
          v66 |= v70;
          v67 |= (v70 & 2) >> 1;
          unsigned int v64 = (long long *)((char *)v64 + 472);
        }
        while (v64 != v62);
        int v93 = v212[0];
        if (!v212[0])
        {
LABEL_124:
          int v94 = v209[0];
          if (!v209[0])
          {
LABEL_159:
            BOOL v122 = 0;
            goto LABEL_170;
          }
          do
          {
LABEL_163:
            uint64_t v123 = *(void *)(v8 + 8);
            *(unsigned char *)(v123 + 30354) = 1;
            sub_F57008(v123 + 30360, 1);
            uint64_t v124 = sub_F57414(v123 + 30360, v94 + 2);
            if (v124 == -1)
            {
              uint64_t v126 = *(void *)(v123 + 30408);
              uint64_t v127 = *(void *)(v123 + 30400);
              if ((unint64_t)(v126 - v127) >= 0x1FFFFFFFFFFFFFFFLL)
              {
                exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(exception, "insert overflow");
              }
              uint64_t v128 = *(void *)(v123 + 30432);
              if (v127
                && (unint64_t v129 = *(void *)(v128 + 8 * v125),
                    __PAIR64__(*(unsigned __int16 *)(v123 + 30396), *(_DWORD *)(v123 + 30392)) == __PAIR64__(WORD2(v129), v129))&& (HIWORD(v129) & 1) != (*(unsigned char *)(v123 + 30398) == 0))
              {
                *(void *)(v123 + 30400) = v127 - 1;
              }
              else
              {
                *(void *)(v123 + 30408) = v126 + 1;
              }
              *(void *)(v128 + 8 * v125) = v94[2];
            }
            v66 |= v124 == -1;
            int v94 = (void *)*v94;
          }
          while (v94);
          BOOL v122 = v209[0];
LABEL_170:
          BOOL v130 = v216 == v217;
          if ((v66 | (v200 | v67))) {
            int v121 = 0;
          }
          else {
            int v121 = 2;
          }
          if (v122)
          {
            do
            {
              BOOL v131 = (void *)*v122;
              operator delete(v122);
              BOOL v122 = v131;
            }
            while (v131);
          }
          unsigned int v132 = v208[0];
          v208[0] = 0;
          if (v132) {
            operator delete(v132);
          }
          unsigned int v133 = v212[0];
          if (v212[0])
          {
            do
            {
              unsigned int v134 = (void *)*v133;
              operator delete(v133);
              unsigned int v133 = v134;
            }
            while (v134);
          }
          BOOL v135 = v211[0];
          v211[0] = 0;
          if (v135) {
            operator delete(v135);
          }
          char v15 = 0;
          v201 &= v66 | v130;
          unsigned int v64 = (long long *)v214;
          if (!v214) {
            goto LABEL_207;
          }
LABEL_182:
          unsigned int v136 = v215;
          long long v137 = v64;
          if (v215 != v64)
          {
            do
            {
              int v138 = (void *)*((void *)v136 - 28);
              if (v138)
              {
                *((void *)v136 - 27) = v138;
                operator delete(v138);
              }
              int v139 = (void *)*((void *)v136 - 31);
              if (v139)
              {
                *((void *)v136 - 30) = v139;
                operator delete(v139);
              }
              v140 = (void *)*((void *)v136 - 39);
              if (v140)
              {
                *((void *)v136 - 38) = v140;
                operator delete(v140);
              }
              v141 = (void *)*((void *)v136 - 42);
              if (v141)
              {
                *((void *)v136 - 41) = v141;
                operator delete(v141);
              }
              uint64_t v142 = *((void *)v136 - 45);
              if (v142)
              {
                uint64_t v143 = *((void *)v136 - 44);
                uint64_t v144 = (void *)*((void *)v136 - 45);
                if (v143 != v142)
                {
                  do
                  {
                    v145 = *(void **)(v143 - 24);
                    if (v145)
                    {
                      *(void *)(v143 - 16) = v145;
                      operator delete(v145);
                    }
                    v143 -= 56;
                  }
                  while (v143 != v142);
                  uint64_t v144 = (void *)*((void *)v136 - 45);
                }
                *((void *)v136 - 44) = v142;
                operator delete(v144);
              }
              v146 = (void *)*((void *)v136 - 56);
              if (v146)
              {
                *((void *)v136 - 55) = v146;
                operator delete(v146);
              }
              uint64_t v147 = (void **)v136 - 59;
              if (*((char *)v136 - 449) < 0) {
                operator delete(*v147);
              }
              unsigned int v136 = (long long *)((char *)v136 - 472);
            }
            while (v147 != (void **)v64);
            long long v137 = v214;
          }
          int v215 = v64;
          operator delete(v137);
          goto LABEL_207;
        }
        while (2)
        {
          uint64_t v99 = *(void *)(v8 + 8);
          *(unsigned char *)(v99 + 30354) = 1;
          sub_F57008(v99 + 30360, 1);
          BOOL v100 = v93 + 2;
          uint64_t v102 = sub_F57414(v99 + 30360, v93 + 2);
          if (v102 == -1)
          {
            uint64_t v106 = *(void *)(v99 + 30408);
            uint64_t v107 = *(void *)(v99 + 30400);
            if ((unint64_t)(v106 - v107) >= 0x1FFFFFFFFFFFFFFFLL)
            {
              v196 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v196, "insert overflow");
            }
            uint64_t v108 = *(void *)(v99 + 30432);
            if (v107
              && (unint64_t v109 = *(void *)(v108 + 8 * v101),
                  __PAIR64__(*(unsigned __int16 *)(v99 + 30396), *(_DWORD *)(v99 + 30392)) == __PAIR64__(WORD2(v109), v109))&& (HIWORD(v109) & 1) != (*(unsigned char *)(v99 + 30398) == 0))
            {
              *(void *)(v99 + 30400) = v107 - 1;
              *(void *)(v108 + 8 * v101) = *v100;
              uint64_t v103 = (__n128 *)(v93 + 3);
              unsigned __int8 v105 = *(__n128 **)(v8 + 112);
              unint64_t v104 = *(void *)(v8 + 120);
              if ((unint64_t)v105 >= v104) {
                goto LABEL_139;
              }
            }
            else
            {
              *(void *)(v99 + 30408) = v106 + 1;
              *(void *)(v108 + 8 * v101) = *v100;
              uint64_t v103 = (__n128 *)(v93 + 3);
              unsigned __int8 v105 = *(__n128 **)(v8 + 112);
              unint64_t v104 = *(void *)(v8 + 120);
              if ((unint64_t)v105 >= v104) {
                goto LABEL_139;
              }
            }
LABEL_131:
            sub_45E5B0(v105, v103);
            long long v98 = v105 + 2;
            *(void *)(v8 + 112) = v105 + 2;
          }
          else
          {
            uint64_t v103 = (__n128 *)(v93 + 3);
            unsigned __int8 v105 = *(__n128 **)(v8 + 112);
            unint64_t v104 = *(void *)(v8 + 120);
            if ((unint64_t)v105 < v104) {
              goto LABEL_131;
            }
LABEL_139:
            uint64_t v110 = ((char *)v105 - *v202) >> 5;
            if ((unint64_t)(v110 + 1) >> 59) {
              sub_2E00();
            }
            uint64_t v111 = v104 - (void)*v202;
            uint64_t v112 = v111 >> 4;
            if (v111 >> 4 <= (unint64_t)(v110 + 1)) {
              uint64_t v112 = v110 + 1;
            }
            if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v113 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v113 = v112;
            }
            if (v113)
            {
              if (v113 >> 59) {
                sub_188D718();
              }
              unint64_t v114 = (__n128 *)operator new(32 * v113);
            }
            else
            {
              unint64_t v114 = 0;
            }
            sub_45E5B0(&v114[2 * v110], v103);
            unint64_t v116 = *(char **)(v8 + 104);
            unint64_t v95 = *(char **)(v8 + 112);
            if (v95 == v116)
            {
              unsigned int v120 = &v114[2 * v113];
              long long v98 = v115 + 2;
              *(void *)(v8 + 104) = v115;
              *(void *)(v8 + 112) = v115 + 2;
              *(void *)(v8 + 120) = v120;
              if (v95) {
                goto LABEL_127;
              }
            }
            else
            {
              uint64_t v117 = 0;
              do
              {
                uint64_t v118 = &v115[v117];
                uint64_t v119 = &v95[v117 * 16];
                v115[v117 - 1].n128_u32[0] = *(_DWORD *)&v95[v117 * 16 - 16];
                if (*(_DWORD *)&v95[v117 * 16 - 16] <= 1u) {
                  v118[-2] = *((__n128 *)v119 - 2);
                }
                v118[-1].n128_u8[8] = *(v119 - 8);
                v117 -= 2;
              }
              while (&v95[v117 * 16] != v116);
              unint64_t v95 = *v202;
              uint64_t v96 = &v115[v117];
              uint64_t v97 = &v114[2 * v113];
              long long v98 = v115 + 2;
              *(void *)(v8 + 104) = v96;
              *(void *)(v8 + 112) = v115 + 2;
              *(void *)(v8 + 120) = v97;
              if (v95) {
LABEL_127:
              }
                operator delete(v95);
            }
          }
          *(void *)(v8 + 112) = v98;
          v66 |= v102 == -1;
          int v93 = (void *)*v93;
          if (!v93) {
            goto LABEL_124;
          }
          continue;
        }
      }
      char v63 = sub_1066148((void *)(v8 + 32), *(void *)(v8 + 16), (uint64_t)&v214);
      unsigned int v64 = (long long *)v214;
      if (v201 & 1 | ((v63 & 1) == 0))
      {
        char v62 = v215;
        goto LABEL_83;
      }
      char v201 = 0;
      int v121 = 4;
      if (v214) {
        goto LABEL_182;
      }
LABEL_207:
      unsigned int v148 = *(_DWORD *)(v8 + 72);
      if (v121 == 2)
      {
        uint64_t v7 = v203;
        char v13 = v199;
        int v14 = HIDWORD(v199);
        if (HIDWORD(v199) < v148) {
          goto LABEL_214;
        }
        goto LABEL_211;
      }
      ++HIDWORD(v199);
      uint64_t v7 = v203;
      if (HIDWORD(v199) >= v148)
      {
        char v13 = v199;
        int v14 = HIDWORD(v199);
        goto LABEL_211;
      }
    }
  }
LABEL_6:
  char v13 = 0;
  int v14 = 0;
LABEL_211:
  if (v216 != v217 && &v216 != (void **)v206) {
    sub_D5C258(v206, (uint64_t)v216, (uint64_t)v217, 0xCBEEA4E1A08AD8F3 * ((v217 - (unsigned char *)v216) >> 3));
  }
LABEL_214:
  if (sub_F047F0(v7) & 1 | ((v13 & 1) == 0) || !*(unsigned char *)(*(void *)(v8 + 24) + 8080)) {
    goto LABEL_266;
  }
  uint64_t v150 = *v206;
  uint64_t v149 = v206[1];
  if (*v206 == v149)
  {
LABEL_222:
    if (sub_F047E8(v7))
    {
      uint64_t v152 = *v206;
      uint64_t v151 = v206[1];
      if (v151 != *v206)
      {
        do
          uint64_t v151 = sub_405F44(v151 - 472);
        while (v151 != v152);
      }
      v206[1] = v152;
    }
    uint64_t v153 = *(void *)(v8 + 8);
    *(unsigned char *)(v153 + 30354) = 0;
    sub_ED7C40(v153 + 8);
    sub_C63080(v153 + 30360);
    sub_F54484(v153 + 30440);
    int v154 = v14;
    sub_F59178();
    unsigned int v155 = (void *)sub_F047F8(v7);
    int v156 = v155;
    int v158 = *(char **)(v8 + 144);
    unint64_t v157 = *(void *)(v8 + 152);
    if ((unint64_t)v158 >= v157)
    {
      uint64_t v160 = *v198;
      uint64_t v161 = v158 - *v198;
      uint64_t v162 = v161 >> 3;
      unint64_t v163 = (v161 >> 3) + 1;
      if (v163 >> 61) {
        sub_2E00();
      }
      uint64_t v164 = v157 - (void)v160;
      if (v164 >> 2 > v163) {
        unint64_t v163 = v164 >> 2;
      }
      if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v165 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v165 = v163;
      }
      if (v165)
      {
        if (v165 >> 61) {
          sub_188D718();
        }
        unint64_t v166 = operator new(8 * v165);
      }
      else
      {
        unint64_t v166 = 0;
      }
      v167 = &v166[8 * v162];
      void *v167 = *v156;
      unint64_t v159 = v167 + 1;
      if (v158 != v160)
      {
        unint64_t v168 = v158 - v160 - 8;
        if (v168 < 0x58) {
          goto LABEL_294;
        }
        if ((unint64_t)(v158 - v166 - v161) < 0x20) {
          goto LABEL_294;
        }
        uint64_t v169 = (v168 >> 3) + 1;
        uint64_t v170 = 8 * (v169 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v171 = &v158[-v170];
        v167 = (void *)((char *)v167 - v170);
        uint64_t v172 = &v166[8 * v162 - 16];
        v173 = v158 - 16;
        uint64_t v174 = v169 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v175 = *(_OWORD *)v173;
          *(v172 - 1) = *((_OWORD *)v173 - 1);
          *uint64_t v172 = v175;
          v172 -= 2;
          v173 -= 32;
          v174 -= 4;
        }
        while (v174);
        int v158 = v171;
        if (v169 != (v169 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_294:
          do
          {
            uint64_t v176 = *((void *)v158 - 1);
            v158 -= 8;
            *--v167 = v176;
          }
          while (v158 != v160);
        }
        int v158 = *v198;
      }
      *(void *)(v8 + 136) = v167;
      *(void *)(v8 + 144) = v159;
      *(void *)(v8 + 152) = &v166[8 * v165];
      if (v158) {
        operator delete(v158);
      }
    }
    else
    {
      *(void *)int v158 = *v155;
      unint64_t v159 = v158 + 8;
    }
    *(void *)(v8 + 144) = v159;
    uint64_t v178 = (long long *)*((void *)&v223 + 1);
    uint64_t v177 = (long long *)v223;
    if ((void)v223 == *((void *)&v223 + 1))
    {
      int v14 = v154;
      if (!(void)v223) {
        goto LABEL_266;
      }
    }
    else
    {
      int v14 = v154;
      do
      {
        sub_1071768(*(void *)(v8 + 24), v177, v207);
        if (v207[0])
        {
          v207[1] = v207[0];
          operator delete(v207[0]);
        }
        if (!sub_EAE144(v177) || sub_F047E8(v203))
        {
          unint64_t v180 = v206[1];
          if (v180 < v206[2])
          {
            sub_446D30((uint64_t)(v206 + 2), v206[1], v177);
            uint64_t v179 = v180 + 472;
          }
          else
          {
            uint64_t v179 = sub_446BBC(v206, v177);
          }
          v206[1] = v179;
        }
        uint64_t v177 = (long long *)((char *)v177 + 472);
      }
      while (v177 != v178);
      uint64_t v177 = (long long *)v223;
      if (!(void)v223) {
        goto LABEL_266;
      }
    }
    uint64_t v181 = *((void *)&v223 + 1);
    uint64_t v182 = v177;
    if (*((long long **)&v223 + 1) != v177)
    {
      do
        uint64_t v181 = sub_405F44(v181 - 472);
      while ((long long *)v181 != v177);
      uint64_t v182 = (long long *)v223;
    }
    *((void *)&v223 + 1) = v177;
    operator delete(v182);
    goto LABEL_266;
  }
  while (*(double *)(sub_69134(v150) + 32) <= 0.95 || *(double *)(sub_EADAD0(v150) + 32) <= 0.95)
  {
    v150 += 472;
    if (v150 == v149) {
      goto LABEL_222;
    }
  }
LABEL_266:
  uint64_t v183 = *(void *)(v8 + 104);
  uint64_t v184 = *(uint64_t **)(v8 + 112);
  unint64_t v185 = 126 - 2 * __clz(((uint64_t)v184 - v183) >> 5);
  if (v184 == (uint64_t *)v183) {
    uint64_t v186 = 0;
  }
  else {
    uint64_t v186 = v185;
  }
  sub_F35D00(v183, v184, (uint64_t)&v223, v186, 1);
  sub_F35B58((uint64_t *)(v8 + 104));
  double v189 = (void *)*v206;
  double v188 = (void *)v206[1];
  if ((void *)*v206 != v188)
  {
    do
    {
      sub_10719A0(*(void *)(v8 + 24), v189);
      v189 += 59;
    }
    while (v189 != v188);
  }
  *(_DWORD *)(v8 + 128) = v14;
  *(_DWORD *)(v8 + 132) = sub_FBEF1C(*(void *)(v8 + 8) + 19984, v187);
  if ((v197 & 1) == 0)
  {
    uint64_t v190 = *(void *)(v8 + 8);
    *(unsigned char *)(v190 + 30354) = 0;
    sub_ED7C40(v190 + 8);
    sub_C63080(v190 + 30360);
    sub_F54484(v190 + 30440);
  }
  sub_1066038(v8 + 32);
  v191 = (char *)v216;
  if (v216)
  {
    long long v192 = v217;
    uint64_t v193 = v216;
    if (v217 != v216)
    {
      do
        long long v192 = (char *)sub_405F44((uint64_t)(v192 - 472));
      while (v192 != v191);
      uint64_t v193 = v216;
    }
    int v217 = v191;
    operator delete(v193);
  }
  if (v258) {
    sub_3A6230(v257);
  }
  if (v221)
  {
    unint64_t v222 = v221;
    operator delete(v221);
  }
  return sub_3A6318(v220);
}

void sub_F478AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  if (LOBYTE(STACK[0x2800])) {
    sub_3A6230(&STACK[0x13C8]);
  }
  sub_C62E9C(&a53);
  _Unwind_Resume(a1);
}

void *sub_F479C0()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v200 = v3;
  char v198 = v4;
  int v206 = v5;
  int v207 = v6;
  uint64_t v8 = v7;
  uint64_t v9 = v0;
  int v208 = v10;
  uint64_t v11 = *(void *)(v0 + 8);
  *(unsigned char *)(v11 + 30354) = 0;
  sub_ED7C40(v11 + 8);
  sub_C63080(v11 + 30360);
  sub_F54484(v11 + 30440);
  char v13 = (void *)(v9 + 136);
  uint64_t v12 = *(void **)(v9 + 136);
  *(void *)(v9 + 128) = 0;
  uint64_t v199 = (char **)(v9 + 136);
  if (v12)
  {
    *(void *)(v9 + 144) = v12;
    operator delete(v12);
    char v13 = (void *)(v9 + 136);
    *uint64_t v199 = 0;
    *(void *)(v9 + 144) = 0;
    *(void *)(v9 + 152) = 0;
  }
  *char v13 = 0;
  v13[1] = 0;
  v13[2] = 0;
  sub_1075F74((uint64_t)v221, *(void **)v9);
  sub_F5B750(v258, *(void *)v9);
  uint64_t *v208 = 0;
  v208[1] = 0;
  v208[2] = 0;
  unint64_t v218 = 0;
  v219 = 0;
  unint64_t v220 = 0;
  if (v2 == 0x7FFFFFFFFFFFFFFFLL || !*(unsigned char *)(v9 + 84))
  {
    uint64_t v205 = v8;
    if (!*(_DWORD *)(v9 + 72)) {
      goto LABEL_6;
    }
    goto LABEL_8;
  }
  uint64_t v205 = v8;
  if (*(_DWORD *)(v9 + 72))
  {
LABEL_8:
    uint64_t v201 = 0;
    int v204 = (char **)(v9 + 104);
    char v16 = 1;
    char v203 = 1;
    while (1)
    {
      if (sub_F047E8(v8))
      {
        uint64_t v17 = (void **)*v208;
        uint64_t v18 = v208[1];
        if (v18 != *v208)
        {
          do
          {
            uint64_t v26 = *(void **)(v18 - 224);
            if (v26)
            {
              *(void *)(v18 - 216) = v26;
              operator delete(v26);
            }
            uint64_t v27 = *(void **)(v18 - 248);
            if (v27)
            {
              *(void *)(v18 - 240) = v27;
              operator delete(v27);
            }
            uint64_t v28 = *(void **)(v18 - 312);
            if (v28)
            {
              *(void *)(v18 - 304) = v28;
              operator delete(v28);
            }
            uint64_t v29 = *(void **)(v18 - 336);
            if (v29)
            {
              *(void *)(v18 - 328) = v29;
              operator delete(v29);
            }
            uint64_t v30 = *(void *)(v18 - 360);
            if (v30)
            {
              uint64_t v31 = *(void *)(v18 - 352);
              BOOL v32 = *(void **)(v18 - 360);
              if (v31 != v30)
              {
                do
                {
                  uint64_t v33 = *(void **)(v31 - 24);
                  if (v33)
                  {
                    *(void *)(v31 - 16) = v33;
                    operator delete(v33);
                  }
                  v31 -= 56;
                }
                while (v31 != v30);
                BOOL v32 = *(void **)(v18 - 360);
              }
              *(void *)(v18 - 352) = v30;
              operator delete(v32);
            }
            uint64_t v34 = *(void **)(v18 - 448);
            if (v34)
            {
              *(void *)(v18 - 440) = v34;
              operator delete(v34);
            }
            char v35 = (void **)(v18 - 472);
            if (*(char *)(v18 - 449) < 0) {
              operator delete(*v35);
            }
            v18 -= 472;
          }
          while (v35 != v17);
        }
        v208[1] = (uint64_t)v17;
        uint64_t v8 = v205;
      }
      if (v203)
      {
        uint64_t v19 = (void **)v218;
        uint64_t v20 = v219;
        if (v219 != v218)
        {
          do
          {
            uint64_t v36 = (void *)*((void *)v20 - 28);
            if (v36)
            {
              *((void *)v20 - 27) = v36;
              operator delete(v36);
            }
            uint64_t v37 = (void *)*((void *)v20 - 31);
            if (v37)
            {
              *((void *)v20 - 30) = v37;
              operator delete(v37);
            }
            unsigned __int8 v38 = (void *)*((void *)v20 - 39);
            if (v38)
            {
              *((void *)v20 - 38) = v38;
              operator delete(v38);
            }
            uint64_t v39 = (void *)*((void *)v20 - 42);
            if (v39)
            {
              *((void *)v20 - 41) = v39;
              operator delete(v39);
            }
            uint64_t v40 = *((void *)v20 - 45);
            if (v40)
            {
              uint64_t v41 = *((void *)v20 - 44);
              char v42 = (void *)*((void *)v20 - 45);
              if (v41 != v40)
              {
                do
                {
                  uint64_t v43 = *(void **)(v41 - 24);
                  if (v43)
                  {
                    *(void *)(v41 - 16) = v43;
                    operator delete(v43);
                  }
                  v41 -= 56;
                }
                while (v41 != v40);
                char v42 = (void *)*((void *)v20 - 45);
              }
              *((void *)v20 - 44) = v40;
              operator delete(v42);
            }
            char v44 = (void *)*((void *)v20 - 56);
            if (v44)
            {
              *((void *)v20 - 55) = v44;
              operator delete(v44);
            }
            unsigned int v45 = (void **)(v20 - 472);
            if (*(v20 - 449) < 0) {
              operator delete(*v45);
            }
            v20 -= 472;
          }
          while (v45 != v19);
        }
        v219 = (char *)v19;
        uint64_t v8 = v205;
      }
      sub_F59BD4(v8, v200);
      char v21 = (void *)sub_F047F8(v8);
      unint64_t v22 = v21;
      uint64_t v24 = *(char **)(v9 + 144);
      unint64_t v23 = *(void *)(v9 + 152);
      if ((unint64_t)v24 < v23)
      {
        *(void *)uint64_t v24 = *v21;
        uint64_t v25 = (uint64_t)(v24 + 8);
        goto LABEL_79;
      }
      uint64_t v46 = *v199;
      uint64_t v47 = v24 - *v199;
      uint64_t v48 = v47 >> 3;
      unint64_t v49 = (v47 >> 3) + 1;
      if (v49 >> 61) {
        sub_2E00();
      }
      uint64_t v50 = v23 - (void)v46;
      if (v50 >> 2 > v49) {
        unint64_t v49 = v50 >> 2;
      }
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v51 = v49;
      }
      if (v51)
      {
        if (v51 >> 61) {
          sub_188D718();
        }
        char v52 = operator new(8 * v51);
        unint64_t v53 = &v52[8 * v48];
        void *v53 = *v22;
        uint64_t v25 = (uint64_t)(v53 + 1);
        if (v24 == v46)
        {
LABEL_77:
          *(void *)(v9 + 136) = v53;
          *(void *)(v9 + 144) = v25;
          *(void *)(v9 + 152) = &v52[8 * v51];
          if (!v24) {
            goto LABEL_79;
          }
LABEL_78:
          operator delete(v24);
          goto LABEL_79;
        }
      }
      else
      {
        char v52 = 0;
        unint64_t v53 = (void *)(8 * v48);
        *(void *)(8 * v48) = *v22;
        uint64_t v25 = 8 * v48 + 8;
        if (v24 == v46) {
          goto LABEL_77;
        }
      }
      unint64_t v54 = v24 - 8 - v46;
      if (v54 < 0x58) {
        goto LABEL_293;
      }
      if ((unint64_t)(v24 - &v52[v47]) < 0x20) {
        goto LABEL_293;
      }
      uint64_t v55 = (v54 >> 3) + 1;
      uint64_t v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
      long long v57 = &v24[-v56];
      unint64_t v53 = (void *)((char *)v53 - v56);
      BOOL v58 = &v52[8 * v48 - 16];
      uint64_t v59 = v24 - 16;
      uint64_t v60 = v55 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v61 = *(_OWORD *)v59;
        *(v58 - 1) = *((_OWORD *)v59 - 1);
        _OWORD *v58 = v61;
        v58 -= 2;
        v59 -= 32;
        v60 -= 4;
      }
      while (v60);
      uint64_t v24 = v57;
      if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_293:
        do
        {
          uint64_t v62 = *((void *)v24 - 1);
          v24 -= 8;
          *--unint64_t v53 = v62;
        }
        while (v24 != v46);
      }
      uint64_t v24 = *v199;
      *(void *)(v9 + 136) = v53;
      *(void *)(v9 + 144) = v25;
      *(void *)(v9 + 152) = &v52[8 * v51];
      if (v24) {
        goto LABEL_78;
      }
LABEL_79:
      *(void *)(v9 + 144) = v25;
      char v63 = (long long *)v216;
      if (v216 == v217)
      {
        char v64 = 0;
        BOOL v65 = (long long *)v216;
LABEL_83:
        *(_OWORD *)int v213 = 0u;
        *(_OWORD *)int v214 = 0u;
        BOOL v66 = v201;
        if (v16) {
          BOOL v66 = v65 != v63;
        }
        LODWORD(v201) = v66;
        int v215 = 1065353216;
        *(_OWORD *)int v210 = 0uLL;
        *(_OWORD *)int v211 = 0uLL;
        int v212 = 1065353216;
        char v202 = v64;
        if (v65 == v63)
        {
          LOBYTE(v68) = 0;
          unsigned __int8 v67 = 0;
          unint64_t v95 = v211[0];
          if (!v211[0]) {
            goto LABEL_159;
          }
          goto LABEL_163;
        }
        unsigned __int8 v67 = 0;
        int v68 = 0;
        do
        {
          char v70 = (int *)sub_37B3A8(*(void *)v9);
          char v71 = sub_F40EF8(v9, v65, (uint64_t)v258, v70, v206, v207, (uint64_t)v213, (uint64_t)v210);
          if ((v71 & 0xC) != 0)
          {
            if (sub_F047E8(v205))
            {
              sub_EAFC08((uint64_t)&v225);
              unint64_t v72 = v208[1];
              if (v72 >= v208[2])
              {
                uint64_t v88 = sub_446BBC(v208, &v225);
                uint64_t v89 = (void *)__p;
                v208[1] = v88;
                if (v89)
                {
                  *((void *)&__p + 1) = v89;
                  operator delete(v89);
                }
              }
              else
              {
                long long v73 = v225;
                *(void *)(v72 + 16) = v226;
                *(void *)(v72 + 24) = 0;
                *(_OWORD *)unint64_t v72 = v73;
                uint64_t v226 = 0;
                long long v225 = 0uLL;
                *(void *)(v72 + 32) = 0;
                *(void *)(v72 + 40) = 0;
                *(_OWORD *)(v72 + 24) = v227;
                *(void *)(v72 + 40) = v228;
                long long v227 = 0uLL;
                uint64_t v228 = 0;
                long long v74 = v229;
                long long v75 = v230;
                long long v76 = v231[0];
                *(_OWORD *)(v72 + 94) = *(_OWORD *)((char *)v231 + 14);
                *(_OWORD *)(v72 + 64) = v75;
                *(_OWORD *)(v72 + 80) = v76;
                *(_OWORD *)(v72 + 48) = v74;
                *(void *)(v72 + 112) = 0;
                *(void *)(v72 + 120) = 0;
                *(void *)(v72 + 128) = 0;
                *(void *)(v72 + 136) = 0;
                *(_OWORD *)(v72 + 112) = v232;
                *(void *)(v72 + 128) = v233;
                long long v232 = 0uLL;
                uint64_t v233 = 0;
                *(void *)(v72 + 144) = 0;
                *(void *)(v72 + 152) = 0;
                *(_OWORD *)(v72 + 136) = v234;
                long long v234 = 0uLL;
                *(void *)(v72 + 152) = v235;
                *(void *)(v72 + 160) = 0;
                uint64_t v235 = 0;
                *(void *)(v72 + 168) = 0;
                *(void *)(v72 + 176) = 0;
                *(_OWORD *)(v72 + 160) = v236;
                *(void *)(v72 + 176) = v237;
                long long v236 = 0uLL;
                uint64_t v237 = 0;
                long long v77 = v238;
                uint64_t v78 = v240;
                *(_OWORD *)(v72 + 200) = v239;
                *(_OWORD *)(v72 + 184) = v77;
                *(void *)(v72 + 216) = v78;
                *(void *)(v72 + 224) = 0;
                *(void *)(v72 + 232) = 0;
                *(void *)(v72 + 240) = 0;
                *(_OWORD *)(v72 + 224) = v241;
                long long v241 = 0uLL;
                *(void *)(v72 + 240) = v242;
                *(void *)(v72 + 248) = 0;
                uint64_t v242 = 0;
                *(void *)(v72 + 256) = 0;
                *(void *)(v72 + 264) = 0;
                *(_OWORD *)(v72 + 248) = __p;
                *(void *)(v72 + 264) = v244;
                long long __p = 0uLL;
                uint64_t v244 = 0;
                *(_OWORD *)(v72 + 272) = v245;
                *(_DWORD *)(v72 + 296) = v247;
                if (v247 <= 1) {
                  *(void *)(v72 + 288) = v246;
                }
                *(_OWORD *)(v72 + 304) = v248;
                long long v79 = v254;
                long long v81 = v251;
                long long v80 = v252;
                *(_OWORD *)(v72 + 384) = v253;
                *(_OWORD *)(v72 + 400) = v79;
                *(_OWORD *)(v72 + 352) = v81;
                *(_OWORD *)(v72 + 368) = v80;
                long long v83 = v256;
                long long v82 = *(_OWORD *)v257;
                long long v84 = v255;
                *(void *)(v72 + 463) = *(void *)&v257[15];
                *(_OWORD *)(v72 + 432) = v83;
                *(_OWORD *)(v72 + 448) = v82;
                *(_OWORD *)(v72 + 416) = v84;
                long long v85 = v250;
                *(_OWORD *)(v72 + 320) = v249;
                *(_OWORD *)(v72 + 336) = v85;
                v208[1] = v72 + 472;
              }
              if ((void)v241)
              {
                *((void *)&v241 + 1) = v241;
                operator delete((void *)v241);
              }
              if ((void)v236)
              {
                *((void *)&v236 + 1) = v236;
                operator delete((void *)v236);
              }
              if ((void)v234)
              {
                *((void *)&v234 + 1) = v234;
                operator delete((void *)v234);
              }
              uint64_t v90 = v232;
              if ((void)v232)
              {
                uint64_t v91 = *((void *)&v232 + 1);
                char v92 = (void *)v232;
                if (*((void *)&v232 + 1) != (void)v232)
                {
                  do
                  {
                    int v93 = *(void **)(v91 - 24);
                    if (v93)
                    {
                      *(void *)(v91 - 16) = v93;
                      operator delete(v93);
                    }
                    v91 -= 56;
                  }
                  while (v91 != v90);
                  char v92 = (void *)v232;
                }
                *((void *)&v232 + 1) = v90;
                operator delete(v92);
              }
              if ((void)v227)
              {
                *((void *)&v227 + 1) = v227;
                operator delete((void *)v227);
              }
              char v64 = v202;
              if (SHIBYTE(v226) < 0) {
                operator delete((void *)v225);
              }
            }
          }
          else
          {
            sub_1075FE4((uint64_t)v221, (uint64_t)v65);
            if (v64)
            {
              if (v203)
              {
                unint64_t v86 = v219;
                if ((unint64_t)v219 >= v220)
                {
                  v219 = (char *)sub_446BBC((uint64_t *)&v218, v65);
                }
                else
                {
                  sub_446D30((uint64_t)&v220, (uint64_t)v219, v65);
                  v219 = v86 + 472;
                }
              }
            }
            else
            {
              unint64_t v87 = v208[1];
              if (v87 < v208[2])
              {
                sub_446D30((uint64_t)(v208 + 2), v208[1], v65);
                uint64_t v69 = v87 + 472;
              }
              else
              {
                uint64_t v69 = sub_446BBC(v208, v65);
              }
              v208[1] = v69;
            }
          }
          v67 |= v71;
          v68 |= (v71 & 2) >> 1;
          BOOL v65 = (long long *)((char *)v65 + 472);
        }
        while (v65 != v63);
        int v94 = v214[0];
        if (!v214[0])
        {
LABEL_124:
          unint64_t v95 = v211[0];
          if (!v211[0])
          {
LABEL_159:
            uint64_t v123 = 0;
            goto LABEL_170;
          }
          do
          {
LABEL_163:
            uint64_t v124 = *(void *)(v9 + 8);
            *(unsigned char *)(v124 + 30354) = 1;
            sub_F57008(v124 + 30360, 1);
            uint64_t v125 = sub_F57414(v124 + 30360, v95 + 2);
            if (v125 == -1)
            {
              uint64_t v127 = *(void *)(v124 + 30408);
              uint64_t v128 = *(void *)(v124 + 30400);
              if ((unint64_t)(v127 - v128) >= 0x1FFFFFFFFFFFFFFFLL)
              {
                exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(exception, "insert overflow");
              }
              uint64_t v129 = *(void *)(v124 + 30432);
              if (v128
                && (unint64_t v130 = *(void *)(v129 + 8 * v126),
                    __PAIR64__(*(unsigned __int16 *)(v124 + 30396), *(_DWORD *)(v124 + 30392)) == __PAIR64__(WORD2(v130), v130))&& (HIWORD(v130) & 1) != (*(unsigned char *)(v124 + 30398) == 0))
              {
                *(void *)(v124 + 30400) = v128 - 1;
              }
              else
              {
                *(void *)(v124 + 30408) = v127 + 1;
              }
              *(void *)(v129 + 8 * v126) = v95[2];
            }
            v67 |= v125 == -1;
            unint64_t v95 = (void *)*v95;
          }
          while (v95);
          uint64_t v123 = v211[0];
LABEL_170:
          BOOL v131 = v218 == v219;
          if ((v67 | (v202 | v68))) {
            int v122 = 0;
          }
          else {
            int v122 = 2;
          }
          if (v123)
          {
            do
            {
              unsigned int v132 = (void *)*v123;
              operator delete(v123);
              uint64_t v123 = v132;
            }
            while (v132);
          }
          unsigned int v133 = v210[0];
          v210[0] = 0;
          if (v133) {
            operator delete(v133);
          }
          unsigned int v134 = v214[0];
          if (v214[0])
          {
            do
            {
              BOOL v135 = (void *)*v134;
              operator delete(v134);
              unsigned int v134 = v135;
            }
            while (v135);
          }
          unsigned int v136 = v213[0];
          v213[0] = 0;
          if (v136) {
            operator delete(v136);
          }
          char v16 = 0;
          v203 &= v67 | v131;
          BOOL v65 = (long long *)v216;
          if (!v216) {
            goto LABEL_207;
          }
LABEL_182:
          long long v137 = v217;
          int v138 = v65;
          if (v217 != v65)
          {
            do
            {
              int v139 = (void *)*((void *)v137 - 28);
              if (v139)
              {
                *((void *)v137 - 27) = v139;
                operator delete(v139);
              }
              v140 = (void *)*((void *)v137 - 31);
              if (v140)
              {
                *((void *)v137 - 30) = v140;
                operator delete(v140);
              }
              v141 = (void *)*((void *)v137 - 39);
              if (v141)
              {
                *((void *)v137 - 38) = v141;
                operator delete(v141);
              }
              uint64_t v142 = (void *)*((void *)v137 - 42);
              if (v142)
              {
                *((void *)v137 - 41) = v142;
                operator delete(v142);
              }
              uint64_t v143 = *((void *)v137 - 45);
              if (v143)
              {
                uint64_t v144 = *((void *)v137 - 44);
                v145 = (void *)*((void *)v137 - 45);
                if (v144 != v143)
                {
                  do
                  {
                    v146 = *(void **)(v144 - 24);
                    if (v146)
                    {
                      *(void *)(v144 - 16) = v146;
                      operator delete(v146);
                    }
                    v144 -= 56;
                  }
                  while (v144 != v143);
                  v145 = (void *)*((void *)v137 - 45);
                }
                *((void *)v137 - 44) = v143;
                operator delete(v145);
              }
              uint64_t v147 = (void *)*((void *)v137 - 56);
              if (v147)
              {
                *((void *)v137 - 55) = v147;
                operator delete(v147);
              }
              unsigned int v148 = (void **)v137 - 59;
              if (*((char *)v137 - 449) < 0) {
                operator delete(*v148);
              }
              long long v137 = (long long *)((char *)v137 - 472);
            }
            while (v148 != (void **)v65);
            int v138 = v216;
          }
          int v217 = v65;
          operator delete(v138);
          goto LABEL_207;
        }
        while (2)
        {
          uint64_t v100 = *(void *)(v9 + 8);
          *(unsigned char *)(v100 + 30354) = 1;
          sub_F57008(v100 + 30360, 1);
          uint64_t v101 = v94 + 2;
          uint64_t v103 = sub_F57414(v100 + 30360, v94 + 2);
          if (v103 == -1)
          {
            uint64_t v107 = *(void *)(v100 + 30408);
            uint64_t v108 = *(void *)(v100 + 30400);
            if ((unint64_t)(v107 - v108) >= 0x1FFFFFFFFFFFFFFFLL)
            {
              char v197 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v197, "insert overflow");
            }
            uint64_t v109 = *(void *)(v100 + 30432);
            if (v108
              && (unint64_t v110 = *(void *)(v109 + 8 * v102),
                  __PAIR64__(*(unsigned __int16 *)(v100 + 30396), *(_DWORD *)(v100 + 30392)) == __PAIR64__(WORD2(v110), v110))&& (HIWORD(v110) & 1) != (*(unsigned char *)(v100 + 30398) == 0))
            {
              *(void *)(v100 + 30400) = v108 - 1;
              *(void *)(v109 + 8 * v102) = *v101;
              unint64_t v104 = (__n128 *)(v94 + 3);
              uint64_t v106 = *(__n128 **)(v9 + 112);
              unint64_t v105 = *(void *)(v9 + 120);
              if ((unint64_t)v106 >= v105) {
                goto LABEL_139;
              }
            }
            else
            {
              *(void *)(v100 + 30408) = v107 + 1;
              *(void *)(v109 + 8 * v102) = *v101;
              unint64_t v104 = (__n128 *)(v94 + 3);
              uint64_t v106 = *(__n128 **)(v9 + 112);
              unint64_t v105 = *(void *)(v9 + 120);
              if ((unint64_t)v106 >= v105) {
                goto LABEL_139;
              }
            }
LABEL_131:
            sub_45E5B0(v106, v104);
            uint64_t v99 = v106 + 2;
            *(void *)(v9 + 112) = v106 + 2;
          }
          else
          {
            unint64_t v104 = (__n128 *)(v94 + 3);
            uint64_t v106 = *(__n128 **)(v9 + 112);
            unint64_t v105 = *(void *)(v9 + 120);
            if ((unint64_t)v106 < v105) {
              goto LABEL_131;
            }
LABEL_139:
            uint64_t v111 = ((char *)v106 - *v204) >> 5;
            if ((unint64_t)(v111 + 1) >> 59) {
              sub_2E00();
            }
            uint64_t v112 = v105 - (void)*v204;
            uint64_t v113 = v112 >> 4;
            if (v112 >> 4 <= (unint64_t)(v111 + 1)) {
              uint64_t v113 = v111 + 1;
            }
            if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v114 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v114 = v113;
            }
            if (v114)
            {
              if (v114 >> 59) {
                sub_188D718();
              }
              unint64_t v115 = (__n128 *)operator new(32 * v114);
            }
            else
            {
              unint64_t v115 = 0;
            }
            sub_45E5B0(&v115[2 * v111], v104);
            uint64_t v117 = *(char **)(v9 + 104);
            uint64_t v96 = *(char **)(v9 + 112);
            if (v96 == v117)
            {
              int v121 = &v115[2 * v114];
              uint64_t v99 = v116 + 2;
              *(void *)(v9 + 104) = v116;
              *(void *)(v9 + 112) = v116 + 2;
              *(void *)(v9 + 120) = v121;
              if (v96) {
                goto LABEL_127;
              }
            }
            else
            {
              uint64_t v118 = 0;
              do
              {
                uint64_t v119 = &v116[v118];
                unsigned int v120 = &v96[v118 * 16];
                v116[v118 - 1].n128_u32[0] = *(_DWORD *)&v96[v118 * 16 - 16];
                if (*(_DWORD *)&v96[v118 * 16 - 16] <= 1u) {
                  v119[-2] = *((__n128 *)v120 - 2);
                }
                v119[-1].n128_u8[8] = *(v120 - 8);
                v118 -= 2;
              }
              while (&v96[v118 * 16] != v117);
              uint64_t v96 = *v204;
              uint64_t v97 = &v116[v118];
              long long v98 = &v115[2 * v114];
              uint64_t v99 = v116 + 2;
              *(void *)(v9 + 104) = v97;
              *(void *)(v9 + 112) = v116 + 2;
              *(void *)(v9 + 120) = v98;
              if (v96) {
LABEL_127:
              }
                operator delete(v96);
            }
          }
          *(void *)(v9 + 112) = v99;
          v67 |= v103 == -1;
          int v94 = (void *)*v94;
          if (!v94) {
            goto LABEL_124;
          }
          continue;
        }
      }
      char v64 = sub_1066148((void *)(v9 + 32), *(void *)(v9 + 16), (uint64_t)&v216);
      BOOL v65 = (long long *)v216;
      if (v203 & 1 | ((v64 & 1) == 0))
      {
        char v63 = v217;
        goto LABEL_83;
      }
      char v203 = 0;
      int v122 = 4;
      if (v216) {
        goto LABEL_182;
      }
LABEL_207:
      unsigned int v149 = *(_DWORD *)(v9 + 72);
      if (v122 == 2)
      {
        uint64_t v8 = v205;
        char v14 = v201;
        int v15 = HIDWORD(v201);
        if (HIDWORD(v201) < v149) {
          goto LABEL_214;
        }
        goto LABEL_211;
      }
      ++HIDWORD(v201);
      uint64_t v8 = v205;
      if (HIDWORD(v201) >= v149)
      {
        char v14 = v201;
        int v15 = HIDWORD(v201);
        goto LABEL_211;
      }
    }
  }
LABEL_6:
  char v14 = 0;
  int v15 = 0;
LABEL_211:
  if (v218 != v219 && &v218 != (void **)v208) {
    sub_D5C258(v208, (uint64_t)v218, (uint64_t)v219, 0xCBEEA4E1A08AD8F3 * ((v219 - (unsigned char *)v218) >> 3));
  }
LABEL_214:
  if (sub_F047F0(v8) & 1 | ((v14 & 1) == 0) || !*(unsigned char *)(*(void *)(v9 + 24) + 8080)) {
    goto LABEL_266;
  }
  uint64_t v151 = *v208;
  uint64_t v150 = v208[1];
  if (*v208 == v150)
  {
LABEL_222:
    if (sub_F047E8(v8))
    {
      uint64_t v153 = *v208;
      uint64_t v152 = v208[1];
      if (v152 != *v208)
      {
        do
          uint64_t v152 = sub_405F44(v152 - 472);
        while (v152 != v153);
      }
      v208[1] = v153;
    }
    uint64_t v154 = *(void *)(v9 + 8);
    *(unsigned char *)(v154 + 30354) = 0;
    sub_ED7C40(v154 + 8);
    sub_C63080(v154 + 30360);
    sub_F54484(v154 + 30440);
    int v155 = v15;
    sub_F59BD4(v8, v200);
    int v156 = (void *)sub_F047F8(v8);
    unint64_t v157 = v156;
    unint64_t v159 = *(char **)(v9 + 144);
    unint64_t v158 = *(void *)(v9 + 152);
    if ((unint64_t)v159 >= v158)
    {
      uint64_t v161 = *v199;
      uint64_t v162 = v159 - *v199;
      uint64_t v163 = v162 >> 3;
      unint64_t v164 = (v162 >> 3) + 1;
      if (v164 >> 61) {
        sub_2E00();
      }
      uint64_t v165 = v158 - (void)v161;
      if (v165 >> 2 > v164) {
        unint64_t v164 = v165 >> 2;
      }
      if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v166 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v166 = v164;
      }
      if (v166)
      {
        if (v166 >> 61) {
          sub_188D718();
        }
        v167 = operator new(8 * v166);
      }
      else
      {
        v167 = 0;
      }
      unint64_t v168 = &v167[8 * v163];
      void *v168 = *v157;
      uint64_t v160 = v168 + 1;
      if (v159 != v161)
      {
        unint64_t v169 = v159 - v161 - 8;
        if (v169 < 0x58) {
          goto LABEL_294;
        }
        if ((unint64_t)(v159 - v167 - v162) < 0x20) {
          goto LABEL_294;
        }
        uint64_t v170 = (v169 >> 3) + 1;
        uint64_t v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v172 = &v159[-v171];
        unint64_t v168 = (void *)((char *)v168 - v171);
        v173 = &v167[8 * v163 - 16];
        uint64_t v174 = v159 - 16;
        uint64_t v175 = v170 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v176 = *(_OWORD *)v174;
          *(v173 - 1) = *((_OWORD *)v174 - 1);
          _OWORD *v173 = v176;
          v173 -= 2;
          v174 -= 32;
          v175 -= 4;
        }
        while (v175);
        unint64_t v159 = v172;
        if (v170 != (v170 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_294:
          do
          {
            uint64_t v177 = *((void *)v159 - 1);
            v159 -= 8;
            *--unint64_t v168 = v177;
          }
          while (v159 != v161);
        }
        unint64_t v159 = *v199;
      }
      *(void *)(v9 + 136) = v168;
      *(void *)(v9 + 144) = v160;
      *(void *)(v9 + 152) = &v167[8 * v166];
      if (v159) {
        operator delete(v159);
      }
    }
    else
    {
      *(void *)unint64_t v159 = *v156;
      uint64_t v160 = v159 + 8;
    }
    *(void *)(v9 + 144) = v160;
    uint64_t v179 = (long long *)*((void *)&v225 + 1);
    uint64_t v178 = (long long *)v225;
    if ((void)v225 == *((void *)&v225 + 1))
    {
      int v15 = v155;
      if (!(void)v225) {
        goto LABEL_266;
      }
    }
    else
    {
      int v15 = v155;
      do
      {
        sub_1071768(*(void *)(v9 + 24), v178, v209);
        if (v209[0])
        {
          v209[1] = v209[0];
          operator delete(v209[0]);
        }
        if (!sub_EAE144(v178) || sub_F047E8(v205))
        {
          unint64_t v181 = v208[1];
          if (v181 < v208[2])
          {
            sub_446D30((uint64_t)(v208 + 2), v208[1], v178);
            uint64_t v180 = v181 + 472;
          }
          else
          {
            uint64_t v180 = sub_446BBC(v208, v178);
          }
          v208[1] = v180;
        }
        uint64_t v178 = (long long *)((char *)v178 + 472);
      }
      while (v178 != v179);
      uint64_t v178 = (long long *)v225;
      if (!(void)v225) {
        goto LABEL_266;
      }
    }
    uint64_t v182 = *((void *)&v225 + 1);
    uint64_t v183 = v178;
    if (*((long long **)&v225 + 1) != v178)
    {
      do
        uint64_t v182 = sub_405F44(v182 - 472);
      while ((long long *)v182 != v178);
      uint64_t v183 = (long long *)v225;
    }
    *((void *)&v225 + 1) = v178;
    operator delete(v183);
    goto LABEL_266;
  }
  while (*(double *)(sub_69134(v151) + 32) <= 0.95 || *(double *)(sub_EADAD0(v151) + 32) <= 0.95)
  {
    v151 += 472;
    if (v151 == v150) {
      goto LABEL_222;
    }
  }
LABEL_266:
  uint64_t v184 = *(void *)(v9 + 104);
  unint64_t v185 = *(uint64_t **)(v9 + 112);
  unint64_t v186 = 126 - 2 * __clz(((uint64_t)v185 - v184) >> 5);
  if (v185 == (uint64_t *)v184) {
    uint64_t v187 = 0;
  }
  else {
    uint64_t v187 = v186;
  }
  sub_F35D00(v184, v185, (uint64_t)&v225, v187, 1);
  sub_F35B58((uint64_t *)(v9 + 104));
  uint64_t v190 = (void *)*v208;
  double v189 = (void *)v208[1];
  if ((void *)*v208 != v189)
  {
    do
    {
      sub_10719A0(*(void *)(v9 + 24), v190);
      v190 += 59;
    }
    while (v190 != v189);
  }
  *(_DWORD *)(v9 + 128) = v15;
  *(_DWORD *)(v9 + 132) = sub_FBEF1C(*(void *)(v9 + 8) + 19984, v188);
  if ((v198 & 1) == 0)
  {
    uint64_t v191 = *(void *)(v9 + 8);
    *(unsigned char *)(v191 + 30354) = 0;
    sub_ED7C40(v191 + 8);
    sub_C63080(v191 + 30360);
    sub_F54484(v191 + 30440);
  }
  sub_1066038(v9 + 32);
  long long v192 = (char *)v218;
  if (v218)
  {
    uint64_t v193 = v219;
    int v194 = v218;
    if (v219 != v218)
    {
      do
        uint64_t v193 = (char *)sub_405F44((uint64_t)(v193 - 472));
      while (v193 != v192);
      int v194 = v218;
    }
    v219 = v192;
    operator delete(v194);
  }
  if (v260) {
    sub_3A6230(v259);
  }
  if (v223)
  {
    uint64_t v224 = v223;
    operator delete(v223);
  }
  return sub_3A6318(v222);
}

void sub_F48D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  if (LOBYTE(STACK[0x2800])) {
    sub_3A6230(&STACK[0x13C8]);
  }
  sub_C62E9C(&a53);
  _Unwind_Resume(a1);
}

void *sub_F48EA8()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  char v197 = v3;
  int v204 = v4;
  int v205 = v5;
  uint64_t v7 = v6;
  uint64_t v8 = v0;
  int v206 = v9;
  uint64_t v10 = *(void *)(v0 + 8);
  *(unsigned char *)(v10 + 30354) = 0;
  sub_ED7C40(v10 + 8);
  sub_C63080(v10 + 30360);
  sub_F54484(v10 + 30440);
  uint64_t v12 = (void *)(v8 + 136);
  uint64_t v11 = *(void **)(v8 + 136);
  *(void *)(v8 + 128) = 0;
  char v198 = (char **)(v8 + 136);
  if (v11)
  {
    *(void *)(v8 + 144) = v11;
    operator delete(v11);
    uint64_t v12 = (void *)(v8 + 136);
    *char v198 = 0;
    *(void *)(v8 + 144) = 0;
    *(void *)(v8 + 152) = 0;
  }
  void *v12 = 0;
  v12[1] = 0;
  v12[2] = 0;
  sub_1075F74((uint64_t)v219, *(void **)v8);
  sub_F5B750(v256, *(void *)v8);
  *int v206 = 0;
  v206[1] = 0;
  v206[2] = 0;
  v216 = 0;
  int v217 = 0;
  unint64_t v218 = 0;
  if (v2 == 0x7FFFFFFFFFFFFFFFLL || !*(unsigned char *)(v8 + 84))
  {
    uint64_t v203 = v7;
    if (!*(_DWORD *)(v8 + 72)) {
      goto LABEL_6;
    }
    goto LABEL_8;
  }
  uint64_t v203 = v7;
  if (*(_DWORD *)(v8 + 72))
  {
LABEL_8:
    uint64_t v199 = 0;
    char v202 = (char **)(v8 + 104);
    char v15 = 1;
    char v201 = 1;
    while (1)
    {
      if (sub_F047E8(v7))
      {
        char v16 = (void **)*v206;
        uint64_t v17 = v206[1];
        if (v17 != *v206)
        {
          do
          {
            uint64_t v25 = *(void **)(v17 - 224);
            if (v25)
            {
              *(void *)(v17 - 216) = v25;
              operator delete(v25);
            }
            uint64_t v26 = *(void **)(v17 - 248);
            if (v26)
            {
              *(void *)(v17 - 240) = v26;
              operator delete(v26);
            }
            uint64_t v27 = *(void **)(v17 - 312);
            if (v27)
            {
              *(void *)(v17 - 304) = v27;
              operator delete(v27);
            }
            uint64_t v28 = *(void **)(v17 - 336);
            if (v28)
            {
              *(void *)(v17 - 328) = v28;
              operator delete(v28);
            }
            uint64_t v29 = *(void *)(v17 - 360);
            if (v29)
            {
              uint64_t v30 = *(void *)(v17 - 352);
              uint64_t v31 = *(void **)(v17 - 360);
              if (v30 != v29)
              {
                do
                {
                  BOOL v32 = *(void **)(v30 - 24);
                  if (v32)
                  {
                    *(void *)(v30 - 16) = v32;
                    operator delete(v32);
                  }
                  v30 -= 56;
                }
                while (v30 != v29);
                uint64_t v31 = *(void **)(v17 - 360);
              }
              *(void *)(v17 - 352) = v29;
              operator delete(v31);
            }
            uint64_t v33 = *(void **)(v17 - 448);
            if (v33)
            {
              *(void *)(v17 - 440) = v33;
              operator delete(v33);
            }
            uint64_t v34 = (void **)(v17 - 472);
            if (*(char *)(v17 - 449) < 0) {
              operator delete(*v34);
            }
            v17 -= 472;
          }
          while (v34 != v16);
        }
        v206[1] = (uint64_t)v16;
        uint64_t v7 = v203;
      }
      if (v201)
      {
        uint64_t v18 = (void **)v216;
        uint64_t v19 = v217;
        if (v217 != v216)
        {
          do
          {
            char v35 = (void *)*((void *)v19 - 28);
            if (v35)
            {
              *((void *)v19 - 27) = v35;
              operator delete(v35);
            }
            uint64_t v36 = (void *)*((void *)v19 - 31);
            if (v36)
            {
              *((void *)v19 - 30) = v36;
              operator delete(v36);
            }
            uint64_t v37 = (void *)*((void *)v19 - 39);
            if (v37)
            {
              *((void *)v19 - 38) = v37;
              operator delete(v37);
            }
            unsigned __int8 v38 = (void *)*((void *)v19 - 42);
            if (v38)
            {
              *((void *)v19 - 41) = v38;
              operator delete(v38);
            }
            uint64_t v39 = *((void *)v19 - 45);
            if (v39)
            {
              uint64_t v40 = *((void *)v19 - 44);
              uint64_t v41 = (void *)*((void *)v19 - 45);
              if (v40 != v39)
              {
                do
                {
                  char v42 = *(void **)(v40 - 24);
                  if (v42)
                  {
                    *(void *)(v40 - 16) = v42;
                    operator delete(v42);
                  }
                  v40 -= 56;
                }
                while (v40 != v39);
                uint64_t v41 = (void *)*((void *)v19 - 45);
              }
              *((void *)v19 - 44) = v39;
              operator delete(v41);
            }
            uint64_t v43 = (void *)*((void *)v19 - 56);
            if (v43)
            {
              *((void *)v19 - 55) = v43;
              operator delete(v43);
            }
            char v44 = (void **)(v19 - 472);
            if (*(v19 - 449) < 0) {
              operator delete(*v44);
            }
            v19 -= 472;
          }
          while (v44 != v18);
        }
        int v217 = (char *)v18;
        uint64_t v7 = v203;
      }
      sub_F6FF80();
      uint64_t v20 = (void *)sub_F047F8(v7);
      char v21 = v20;
      unint64_t v23 = *(char **)(v8 + 144);
      unint64_t v22 = *(void *)(v8 + 152);
      if ((unint64_t)v23 < v22)
      {
        *(void *)unint64_t v23 = *v20;
        uint64_t v24 = (uint64_t)(v23 + 8);
        goto LABEL_79;
      }
      unsigned int v45 = *v198;
      uint64_t v46 = v23 - *v198;
      uint64_t v47 = v46 >> 3;
      unint64_t v48 = (v46 >> 3) + 1;
      if (v48 >> 61) {
        sub_2E00();
      }
      uint64_t v49 = v22 - (void)v45;
      if (v49 >> 2 > v48) {
        unint64_t v48 = v49 >> 2;
      }
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v50 = v48;
      }
      if (v50)
      {
        if (v50 >> 61) {
          sub_188D718();
        }
        unint64_t v51 = operator new(8 * v50);
        char v52 = &v51[8 * v47];
        void *v52 = *v21;
        uint64_t v24 = (uint64_t)(v52 + 1);
        if (v23 == v45)
        {
LABEL_77:
          *(void *)(v8 + 136) = v52;
          *(void *)(v8 + 144) = v24;
          *(void *)(v8 + 152) = &v51[8 * v50];
          if (!v23) {
            goto LABEL_79;
          }
LABEL_78:
          operator delete(v23);
          goto LABEL_79;
        }
      }
      else
      {
        unint64_t v51 = 0;
        char v52 = (void *)(8 * v47);
        *(void *)(8 * v47) = *v21;
        uint64_t v24 = 8 * v47 + 8;
        if (v23 == v45) {
          goto LABEL_77;
        }
      }
      unint64_t v53 = v23 - 8 - v45;
      if (v53 < 0x58) {
        goto LABEL_293;
      }
      if ((unint64_t)(v23 - &v51[v46]) < 0x20) {
        goto LABEL_293;
      }
      uint64_t v54 = (v53 >> 3) + 1;
      uint64_t v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v56 = &v23[-v55];
      char v52 = (void *)((char *)v52 - v55);
      long long v57 = &v51[8 * v47 - 16];
      BOOL v58 = v23 - 16;
      uint64_t v59 = v54 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v60 = *(_OWORD *)v58;
        *(v57 - 1) = *((_OWORD *)v58 - 1);
        _OWORD *v57 = v60;
        v57 -= 2;
        v58 -= 32;
        v59 -= 4;
      }
      while (v59);
      unint64_t v23 = v56;
      if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_293:
        do
        {
          uint64_t v61 = *((void *)v23 - 1);
          v23 -= 8;
          *--char v52 = v61;
        }
        while (v23 != v45);
      }
      unint64_t v23 = *v198;
      *(void *)(v8 + 136) = v52;
      *(void *)(v8 + 144) = v24;
      *(void *)(v8 + 152) = &v51[8 * v50];
      if (v23) {
        goto LABEL_78;
      }
LABEL_79:
      *(void *)(v8 + 144) = v24;
      uint64_t v62 = (long long *)v214;
      if (v214 == v215)
      {
        char v63 = 0;
        char v64 = (long long *)v214;
LABEL_83:
        *(_OWORD *)int v211 = 0u;
        *(_OWORD *)int v212 = 0u;
        BOOL v65 = v199;
        if (v15) {
          BOOL v65 = v64 != v62;
        }
        LODWORD(v199) = v65;
        int v213 = 1065353216;
        *(_OWORD *)int v208 = 0uLL;
        *(_OWORD *)int v209 = 0uLL;
        int v210 = 1065353216;
        char v200 = v63;
        if (v64 == v62)
        {
          LOBYTE(v67) = 0;
          unsigned __int8 v66 = 0;
          int v94 = v209[0];
          if (!v209[0]) {
            goto LABEL_159;
          }
          goto LABEL_163;
        }
        unsigned __int8 v66 = 0;
        int v67 = 0;
        do
        {
          uint64_t v69 = (int *)sub_37B3A8(*(void *)v8);
          char v70 = sub_F40EF8(v8, v64, (uint64_t)v256, v69, v204, v205, (uint64_t)v211, (uint64_t)v208);
          if ((v70 & 0xC) != 0)
          {
            if (sub_F047E8(v203))
            {
              sub_EAFC08((uint64_t)&v223);
              unint64_t v71 = v206[1];
              if (v71 >= v206[2])
              {
                uint64_t v87 = sub_446BBC(v206, &v223);
                uint64_t v88 = (void *)__p;
                v206[1] = v87;
                if (v88)
                {
                  *((void *)&__p + 1) = v88;
                  operator delete(v88);
                }
              }
              else
              {
                long long v72 = v223;
                *(void *)(v71 + 16) = v224;
                *(void *)(v71 + 24) = 0;
                *(_OWORD *)unint64_t v71 = v72;
                uint64_t v224 = 0;
                long long v223 = 0uLL;
                *(void *)(v71 + 32) = 0;
                *(void *)(v71 + 40) = 0;
                *(_OWORD *)(v71 + 24) = v225;
                *(void *)(v71 + 40) = v226;
                long long v225 = 0uLL;
                uint64_t v226 = 0;
                long long v73 = v227;
                long long v74 = v228;
                long long v75 = v229[0];
                *(_OWORD *)(v71 + 94) = *(_OWORD *)((char *)v229 + 14);
                *(_OWORD *)(v71 + 64) = v74;
                *(_OWORD *)(v71 + 80) = v75;
                *(_OWORD *)(v71 + 48) = v73;
                *(void *)(v71 + 112) = 0;
                *(void *)(v71 + 120) = 0;
                *(void *)(v71 + 128) = 0;
                *(void *)(v71 + 136) = 0;
                *(_OWORD *)(v71 + 112) = v230;
                *(void *)(v71 + 128) = v231;
                long long v230 = 0uLL;
                uint64_t v231 = 0;
                *(void *)(v71 + 144) = 0;
                *(void *)(v71 + 152) = 0;
                *(_OWORD *)(v71 + 136) = v232;
                long long v232 = 0uLL;
                *(void *)(v71 + 152) = v233;
                *(void *)(v71 + 160) = 0;
                uint64_t v233 = 0;
                *(void *)(v71 + 168) = 0;
                *(void *)(v71 + 176) = 0;
                *(_OWORD *)(v71 + 160) = v234;
                *(void *)(v71 + 176) = v235;
                long long v234 = 0uLL;
                uint64_t v235 = 0;
                long long v76 = v236;
                uint64_t v77 = v238;
                *(_OWORD *)(v71 + 200) = v237;
                *(_OWORD *)(v71 + 184) = v76;
                *(void *)(v71 + 216) = v77;
                *(void *)(v71 + 224) = 0;
                *(void *)(v71 + 232) = 0;
                *(void *)(v71 + 240) = 0;
                *(_OWORD *)(v71 + 224) = v239;
                long long v239 = 0uLL;
                *(void *)(v71 + 240) = v240;
                *(void *)(v71 + 248) = 0;
                uint64_t v240 = 0;
                *(void *)(v71 + 256) = 0;
                *(void *)(v71 + 264) = 0;
                *(_OWORD *)(v71 + 248) = __p;
                *(void *)(v71 + 264) = v242;
                long long __p = 0uLL;
                uint64_t v242 = 0;
                *(_OWORD *)(v71 + 272) = v243;
                *(_DWORD *)(v71 + 296) = v245;
                if (v245 <= 1) {
                  *(void *)(v71 + 288) = v244;
                }
                *(_OWORD *)(v71 + 304) = v246;
                long long v78 = v252;
                long long v80 = v249;
                long long v79 = v250;
                *(_OWORD *)(v71 + 384) = v251;
                *(_OWORD *)(v71 + 400) = v78;
                *(_OWORD *)(v71 + 352) = v80;
                *(_OWORD *)(v71 + 368) = v79;
                long long v82 = v254;
                long long v81 = *(_OWORD *)v255;
                long long v83 = v253;
                *(void *)(v71 + 463) = *(void *)&v255[15];
                *(_OWORD *)(v71 + 432) = v82;
                *(_OWORD *)(v71 + 448) = v81;
                *(_OWORD *)(v71 + 416) = v83;
                long long v84 = v248;
                *(_OWORD *)(v71 + 320) = v247;
                *(_OWORD *)(v71 + 336) = v84;
                v206[1] = v71 + 472;
              }
              if ((void)v239)
              {
                *((void *)&v239 + 1) = v239;
                operator delete((void *)v239);
              }
              if ((void)v234)
              {
                *((void *)&v234 + 1) = v234;
                operator delete((void *)v234);
              }
              if ((void)v232)
              {
                *((void *)&v232 + 1) = v232;
                operator delete((void *)v232);
              }
              uint64_t v89 = v230;
              if ((void)v230)
              {
                uint64_t v90 = *((void *)&v230 + 1);
                uint64_t v91 = (void *)v230;
                if (*((void *)&v230 + 1) != (void)v230)
                {
                  do
                  {
                    char v92 = *(void **)(v90 - 24);
                    if (v92)
                    {
                      *(void *)(v90 - 16) = v92;
                      operator delete(v92);
                    }
                    v90 -= 56;
                  }
                  while (v90 != v89);
                  uint64_t v91 = (void *)v230;
                }
                *((void *)&v230 + 1) = v89;
                operator delete(v91);
              }
              if ((void)v225)
              {
                *((void *)&v225 + 1) = v225;
                operator delete((void *)v225);
              }
              char v63 = v200;
              if (SHIBYTE(v224) < 0) {
                operator delete((void *)v223);
              }
            }
          }
          else
          {
            sub_1075FE4((uint64_t)v219, (uint64_t)v64);
            if (v63)
            {
              if (v201)
              {
                long long v85 = v217;
                if ((unint64_t)v217 >= v218)
                {
                  int v217 = (char *)sub_446BBC((uint64_t *)&v216, v64);
                }
                else
                {
                  sub_446D30((uint64_t)&v218, (uint64_t)v217, v64);
                  int v217 = v85 + 472;
                }
              }
            }
            else
            {
              unint64_t v86 = v206[1];
              if (v86 < v206[2])
              {
                sub_446D30((uint64_t)(v206 + 2), v206[1], v64);
                uint64_t v68 = v86 + 472;
              }
              else
              {
                uint64_t v68 = sub_446BBC(v206, v64);
              }
              v206[1] = v68;
            }
          }
          v66 |= v70;
          v67 |= (v70 & 2) >> 1;
          char v64 = (long long *)((char *)v64 + 472);
        }
        while (v64 != v62);
        int v93 = v212[0];
        if (!v212[0])
        {
LABEL_124:
          int v94 = v209[0];
          if (!v209[0])
          {
LABEL_159:
            int v122 = 0;
            goto LABEL_170;
          }
          do
          {
LABEL_163:
            uint64_t v123 = *(void *)(v8 + 8);
            *(unsigned char *)(v123 + 30354) = 1;
            sub_F57008(v123 + 30360, 1);
            uint64_t v124 = sub_F57414(v123 + 30360, v94 + 2);
            if (v124 == -1)
            {
              uint64_t v126 = *(void *)(v123 + 30408);
              uint64_t v127 = *(void *)(v123 + 30400);
              if ((unint64_t)(v126 - v127) >= 0x1FFFFFFFFFFFFFFFLL)
              {
                exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(exception, "insert overflow");
              }
              uint64_t v128 = *(void *)(v123 + 30432);
              if (v127
                && (unint64_t v129 = *(void *)(v128 + 8 * v125),
                    __PAIR64__(*(unsigned __int16 *)(v123 + 30396), *(_DWORD *)(v123 + 30392)) == __PAIR64__(WORD2(v129), v129))&& (HIWORD(v129) & 1) != (*(unsigned char *)(v123 + 30398) == 0))
              {
                *(void *)(v123 + 30400) = v127 - 1;
              }
              else
              {
                *(void *)(v123 + 30408) = v126 + 1;
              }
              *(void *)(v128 + 8 * v125) = v94[2];
            }
            v66 |= v124 == -1;
            int v94 = (void *)*v94;
          }
          while (v94);
          int v122 = v209[0];
LABEL_170:
          BOOL v130 = v216 == v217;
          if ((v66 | (v200 | v67))) {
            int v121 = 0;
          }
          else {
            int v121 = 2;
          }
          if (v122)
          {
            do
            {
              BOOL v131 = (void *)*v122;
              operator delete(v122);
              int v122 = v131;
            }
            while (v131);
          }
          unsigned int v132 = v208[0];
          v208[0] = 0;
          if (v132) {
            operator delete(v132);
          }
          unsigned int v133 = v212[0];
          if (v212[0])
          {
            do
            {
              unsigned int v134 = (void *)*v133;
              operator delete(v133);
              unsigned int v133 = v134;
            }
            while (v134);
          }
          BOOL v135 = v211[0];
          v211[0] = 0;
          if (v135) {
            operator delete(v135);
          }
          char v15 = 0;
          v201 &= v66 | v130;
          char v64 = (long long *)v214;
          if (!v214) {
            goto LABEL_207;
          }
LABEL_182:
          unsigned int v136 = v215;
          long long v137 = v64;
          if (v215 != v64)
          {
            do
            {
              int v138 = (void *)*((void *)v136 - 28);
              if (v138)
              {
                *((void *)v136 - 27) = v138;
                operator delete(v138);
              }
              int v139 = (void *)*((void *)v136 - 31);
              if (v139)
              {
                *((void *)v136 - 30) = v139;
                operator delete(v139);
              }
              v140 = (void *)*((void *)v136 - 39);
              if (v140)
              {
                *((void *)v136 - 38) = v140;
                operator delete(v140);
              }
              v141 = (void *)*((void *)v136 - 42);
              if (v141)
              {
                *((void *)v136 - 41) = v141;
                operator delete(v141);
              }
              uint64_t v142 = *((void *)v136 - 45);
              if (v142)
              {
                uint64_t v143 = *((void *)v136 - 44);
                uint64_t v144 = (void *)*((void *)v136 - 45);
                if (v143 != v142)
                {
                  do
                  {
                    v145 = *(void **)(v143 - 24);
                    if (v145)
                    {
                      *(void *)(v143 - 16) = v145;
                      operator delete(v145);
                    }
                    v143 -= 56;
                  }
                  while (v143 != v142);
                  uint64_t v144 = (void *)*((void *)v136 - 45);
                }
                *((void *)v136 - 44) = v142;
                operator delete(v144);
              }
              v146 = (void *)*((void *)v136 - 56);
              if (v146)
              {
                *((void *)v136 - 55) = v146;
                operator delete(v146);
              }
              uint64_t v147 = (void **)v136 - 59;
              if (*((char *)v136 - 449) < 0) {
                operator delete(*v147);
              }
              unsigned int v136 = (long long *)((char *)v136 - 472);
            }
            while (v147 != (void **)v64);
            long long v137 = v214;
          }
          int v215 = v64;
          operator delete(v137);
          goto LABEL_207;
        }
        while (2)
        {
          uint64_t v99 = *(void *)(v8 + 8);
          *(unsigned char *)(v99 + 30354) = 1;
          sub_F57008(v99 + 30360, 1);
          uint64_t v100 = v93 + 2;
          uint64_t v102 = sub_F57414(v99 + 30360, v93 + 2);
          if (v102 == -1)
          {
            uint64_t v106 = *(void *)(v99 + 30408);
            uint64_t v107 = *(void *)(v99 + 30400);
            if ((unint64_t)(v106 - v107) >= 0x1FFFFFFFFFFFFFFFLL)
            {
              v196 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v196, "insert overflow");
            }
            uint64_t v108 = *(void *)(v99 + 30432);
            if (v107
              && (unint64_t v109 = *(void *)(v108 + 8 * v101),
                  __PAIR64__(*(unsigned __int16 *)(v99 + 30396), *(_DWORD *)(v99 + 30392)) == __PAIR64__(WORD2(v109), v109))&& (HIWORD(v109) & 1) != (*(unsigned char *)(v99 + 30398) == 0))
            {
              *(void *)(v99 + 30400) = v107 - 1;
              *(void *)(v108 + 8 * v101) = *v100;
              uint64_t v103 = (__n128 *)(v93 + 3);
              unint64_t v105 = *(__n128 **)(v8 + 112);
              unint64_t v104 = *(void *)(v8 + 120);
              if ((unint64_t)v105 >= v104) {
                goto LABEL_139;
              }
            }
            else
            {
              *(void *)(v99 + 30408) = v106 + 1;
              *(void *)(v108 + 8 * v101) = *v100;
              uint64_t v103 = (__n128 *)(v93 + 3);
              unint64_t v105 = *(__n128 **)(v8 + 112);
              unint64_t v104 = *(void *)(v8 + 120);
              if ((unint64_t)v105 >= v104) {
                goto LABEL_139;
              }
            }
LABEL_131:
            sub_45E5B0(v105, v103);
            long long v98 = v105 + 2;
            *(void *)(v8 + 112) = v105 + 2;
          }
          else
          {
            uint64_t v103 = (__n128 *)(v93 + 3);
            unint64_t v105 = *(__n128 **)(v8 + 112);
            unint64_t v104 = *(void *)(v8 + 120);
            if ((unint64_t)v105 < v104) {
              goto LABEL_131;
            }
LABEL_139:
            uint64_t v110 = ((char *)v105 - *v202) >> 5;
            if ((unint64_t)(v110 + 1) >> 59) {
              sub_2E00();
            }
            uint64_t v111 = v104 - (void)*v202;
            uint64_t v112 = v111 >> 4;
            if (v111 >> 4 <= (unint64_t)(v110 + 1)) {
              uint64_t v112 = v110 + 1;
            }
            if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v113 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v113 = v112;
            }
            if (v113)
            {
              if (v113 >> 59) {
                sub_188D718();
              }
              unint64_t v114 = (__n128 *)operator new(32 * v113);
            }
            else
            {
              unint64_t v114 = 0;
            }
            sub_45E5B0(&v114[2 * v110], v103);
            unint64_t v116 = *(char **)(v8 + 104);
            unint64_t v95 = *(char **)(v8 + 112);
            if (v95 == v116)
            {
              unsigned int v120 = &v114[2 * v113];
              long long v98 = v115 + 2;
              *(void *)(v8 + 104) = v115;
              *(void *)(v8 + 112) = v115 + 2;
              *(void *)(v8 + 120) = v120;
              if (v95) {
                goto LABEL_127;
              }
            }
            else
            {
              uint64_t v117 = 0;
              do
              {
                uint64_t v118 = &v115[v117];
                uint64_t v119 = &v95[v117 * 16];
                v115[v117 - 1].n128_u32[0] = *(_DWORD *)&v95[v117 * 16 - 16];
                if (*(_DWORD *)&v95[v117 * 16 - 16] <= 1u) {
                  v118[-2] = *((__n128 *)v119 - 2);
                }
                v118[-1].n128_u8[8] = *(v119 - 8);
                v117 -= 2;
              }
              while (&v95[v117 * 16] != v116);
              unint64_t v95 = *v202;
              uint64_t v96 = &v115[v117];
              uint64_t v97 = &v114[2 * v113];
              long long v98 = v115 + 2;
              *(void *)(v8 + 104) = v96;
              *(void *)(v8 + 112) = v115 + 2;
              *(void *)(v8 + 120) = v97;
              if (v95) {
LABEL_127:
              }
                operator delete(v95);
            }
          }
          *(void *)(v8 + 112) = v98;
          v66 |= v102 == -1;
          int v93 = (void *)*v93;
          if (!v93) {
            goto LABEL_124;
          }
          continue;
        }
      }
      char v63 = sub_1066148((void *)(v8 + 32), *(void *)(v8 + 16), (uint64_t)&v214);
      char v64 = (long long *)v214;
      if (v201 & 1 | ((v63 & 1) == 0))
      {
        uint64_t v62 = v215;
        goto LABEL_83;
      }
      char v201 = 0;
      int v121 = 4;
      if (v214) {
        goto LABEL_182;
      }
LABEL_207:
      unsigned int v148 = *(_DWORD *)(v8 + 72);
      if (v121 == 2)
      {
        uint64_t v7 = v203;
        char v13 = v199;
        int v14 = HIDWORD(v199);
        if (HIDWORD(v199) < v148) {
          goto LABEL_214;
        }
        goto LABEL_211;
      }
      ++HIDWORD(v199);
      uint64_t v7 = v203;
      if (HIDWORD(v199) >= v148)
      {
        char v13 = v199;
        int v14 = HIDWORD(v199);
        goto LABEL_211;
      }
    }
  }
LABEL_6:
  char v13 = 0;
  int v14 = 0;
LABEL_211:
  if (v216 != v217 && &v216 != (void **)v206) {
    sub_D5C258(v206, (uint64_t)v216, (uint64_t)v217, 0xCBEEA4E1A08AD8F3 * ((v217 - (unsigned char *)v216) >> 3));
  }
LABEL_214:
  if (sub_F047F0(v7) & 1 | ((v13 & 1) == 0) || !*(unsigned char *)(*(void *)(v8 + 24) + 8080)) {
    goto LABEL_266;
  }
  uint64_t v150 = *v206;
  uint64_t v149 = v206[1];
  if (*v206 == v149)
  {
LABEL_222:
    if (sub_F047E8(v7))
    {
      uint64_t v152 = *v206;
      uint64_t v151 = v206[1];
      if (v151 != *v206)
      {
        do
          uint64_t v151 = sub_405F44(v151 - 472);
        while (v151 != v152);
      }
      v206[1] = v152;
    }
    uint64_t v153 = *(void *)(v8 + 8);
    *(unsigned char *)(v153 + 30354) = 0;
    sub_ED7C40(v153 + 8);
    sub_C63080(v153 + 30360);
    sub_F54484(v153 + 30440);
    int v154 = v14;
    sub_F6FF80();
    int v155 = (void *)sub_F047F8(v7);
    int v156 = v155;
    unint64_t v158 = *(char **)(v8 + 144);
    unint64_t v157 = *(void *)(v8 + 152);
    if ((unint64_t)v158 >= v157)
    {
      uint64_t v160 = *v198;
      uint64_t v161 = v158 - *v198;
      uint64_t v162 = v161 >> 3;
      unint64_t v163 = (v161 >> 3) + 1;
      if (v163 >> 61) {
        sub_2E00();
      }
      uint64_t v164 = v157 - (void)v160;
      if (v164 >> 2 > v163) {
        unint64_t v163 = v164 >> 2;
      }
      if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v165 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v165 = v163;
      }
      if (v165)
      {
        if (v165 >> 61) {
          sub_188D718();
        }
        unint64_t v166 = operator new(8 * v165);
      }
      else
      {
        unint64_t v166 = 0;
      }
      v167 = &v166[8 * v162];
      void *v167 = *v156;
      unint64_t v159 = v167 + 1;
      if (v158 != v160)
      {
        unint64_t v168 = v158 - v160 - 8;
        if (v168 < 0x58) {
          goto LABEL_294;
        }
        if ((unint64_t)(v158 - v166 - v161) < 0x20) {
          goto LABEL_294;
        }
        uint64_t v169 = (v168 >> 3) + 1;
        uint64_t v170 = 8 * (v169 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v171 = &v158[-v170];
        v167 = (void *)((char *)v167 - v170);
        uint64_t v172 = &v166[8 * v162 - 16];
        v173 = v158 - 16;
        uint64_t v174 = v169 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v175 = *(_OWORD *)v173;
          *(v172 - 1) = *((_OWORD *)v173 - 1);
          *uint64_t v172 = v175;
          v172 -= 2;
          v173 -= 32;
          v174 -= 4;
        }
        while (v174);
        unint64_t v158 = v171;
        if (v169 != (v169 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_294:
          do
          {
            uint64_t v176 = *((void *)v158 - 1);
            v158 -= 8;
            *--v167 = v176;
          }
          while (v158 != v160);
        }
        unint64_t v158 = *v198;
      }
      *(void *)(v8 + 136) = v167;
      *(void *)(v8 + 144) = v159;
      *(void *)(v8 + 152) = &v166[8 * v165];
      if (v158) {
        operator delete(v158);
      }
    }
    else
    {
      *(void *)unint64_t v158 = *v155;
      unint64_t v159 = v158 + 8;
    }
    *(void *)(v8 + 144) = v159;
    uint64_t v178 = (long long *)*((void *)&v223 + 1);
    uint64_t v177 = (long long *)v223;
    if ((void)v223 == *((void *)&v223 + 1))
    {
      int v14 = v154;
      if (!(void)v223) {
        goto LABEL_266;
      }
    }
    else
    {
      int v14 = v154;
      do
      {
        sub_1071768(*(void *)(v8 + 24), v177, v207);
        if (v207[0])
        {
          v207[1] = v207[0];
          operator delete(v207[0]);
        }
        if (!sub_EAE144(v177) || sub_F047E8(v203))
        {
          unint64_t v180 = v206[1];
          if (v180 < v206[2])
          {
            sub_446D30((uint64_t)(v206 + 2), v206[1], v177);
            uint64_t v179 = v180 + 472;
          }
          else
          {
            uint64_t v179 = sub_446BBC(v206, v177);
          }
          v206[1] = v179;
        }
        uint64_t v177 = (long long *)((char *)v177 + 472);
      }
      while (v177 != v178);
      uint64_t v177 = (long long *)v223;
      if (!(void)v223) {
        goto LABEL_266;
      }
    }
    uint64_t v181 = *((void *)&v223 + 1);
    uint64_t v182 = v177;
    if (*((long long **)&v223 + 1) != v177)
    {
      do
        uint64_t v181 = sub_405F44(v181 - 472);
      while ((long long *)v181 != v177);
      uint64_t v182 = (long long *)v223;
    }
    *((void *)&v223 + 1) = v177;
    operator delete(v182);
    goto LABEL_266;
  }
  while (*(double *)(sub_69134(v150) + 32) <= 0.95 || *(double *)(sub_EADAD0(v150) + 32) <= 0.95)
  {
    v150 += 472;
    if (v150 == v149) {
      goto LABEL_222;
    }
  }
LABEL_266:
  uint64_t v183 = *(void *)(v8 + 104);
  uint64_t v184 = *(uint64_t **)(v8 + 112);
  unint64_t v185 = 126 - 2 * __clz(((uint64_t)v184 - v183) >> 5);
  if (v184 == (uint64_t *)v183) {
    uint64_t v186 = 0;
  }
  else {
    uint64_t v186 = v185;
  }
  sub_F35D00(v183, v184, (uint64_t)&v223, v186, 1);
  sub_F35B58((uint64_t *)(v8 + 104));
  double v189 = (void *)*v206;
  double v188 = (void *)v206[1];
  if ((void *)*v206 != v188)
  {
    do
    {
      sub_10719A0(*(void *)(v8 + 24), v189);
      v189 += 59;
    }
    while (v189 != v188);
  }
  *(_DWORD *)(v8 + 128) = v14;
  *(_DWORD *)(v8 + 132) = sub_FBEF1C(*(void *)(v8 + 8) + 19984, v187);
  if ((v197 & 1) == 0)
  {
    uint64_t v190 = *(void *)(v8 + 8);
    *(unsigned char *)(v190 + 30354) = 0;
    sub_ED7C40(v190 + 8);
    sub_C63080(v190 + 30360);
    sub_F54484(v190 + 30440);
  }
  sub_1066038(v8 + 32);
  uint64_t v191 = (char *)v216;
  if (v216)
  {
    long long v192 = v217;
    uint64_t v193 = v216;
    if (v217 != v216)
    {
      do
        long long v192 = (char *)sub_405F44((uint64_t)(v192 - 472));
      while (v192 != v191);
      uint64_t v193 = v216;
    }
    int v217 = v191;
    operator delete(v193);
  }
  if (v258) {
    sub_3A6230(v257);
  }
  if (v221)
  {
    unint64_t v222 = v221;
    operator delete(v221);
  }
  return sub_3A6318(v220);
}

void sub_F4A27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  if (LOBYTE(STACK[0x2800])) {
    sub_3A6230(&STACK[0x13C8]);
  }
  sub_C62E9C(&a53);
  _Unwind_Resume(a1);
}

void *sub_F4A390()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  char v156 = v3;
  int v166 = v4;
  int v167 = v5;
  uint64_t v7 = v6;
  uint64_t v8 = v0;
  uint64_t v164 = v9;
  uint64_t v10 = *(void *)(v0 + 8);
  *(unsigned char *)(v10 + 30354) = 0;
  sub_ED7C40(v10 + 8);
  sub_C63080(v10 + 30360);
  sub_F54484(v10 + 30440);
  uint64_t v12 = (void *)(v8 + 136);
  uint64_t v11 = *(void **)(v8 + 136);
  *(void *)(v8 + 128) = 0;
  if (v11)
  {
    *(void *)(v8 + 144) = v11;
    operator delete(v11);
    void *v12 = 0;
    *(void *)(v8 + 144) = 0;
    *(void *)(v8 + 152) = 0;
  }
  void *v12 = 0;
  *(void *)(v8 + 144) = 0;
  *(void *)(v8 + 152) = 0;
  sub_1075F74((uint64_t)v179, *(void **)v8);
  sub_F5B750(v197, *(void *)v8);
  *(void *)uint64_t v164 = 0;
  *(void *)(v164 + 8) = 0;
  *(void *)(v164 + 16) = 0;
  int64x2_t v177 = 0uLL;
  unint64_t v178 = 0;
  if (v2 == 0x7FFFFFFFFFFFFFFFLL || !*(unsigned char *)(v8 + 84))
  {
    unint64_t v157 = (char **)(v8 + 136);
    if (!*(_DWORD *)(v8 + 72)) {
      goto LABEL_6;
    }
    goto LABEL_8;
  }
  unint64_t v157 = (char **)(v8 + 136);
  if (*(_DWORD *)(v8 + 72))
  {
LABEL_8:
    unsigned int v13 = 0;
    uint64_t v161 = (char **)(v8 + 104);
    uint64_t v162 = v7;
    char v14 = 1;
    BOOL v159 = 0;
    char v160 = 1;
    while (1)
    {
      if (sub_F047E8(v7)) {
        sub_C64384(v164, *(void ***)v164);
      }
      if (v160) {
        sub_C64384((uint64_t)&v177, (void **)v177.i64[0]);
      }
      sub_F70190();
      char v15 = (void *)sub_F047F8(v7);
      char v16 = v15;
      uint64_t v18 = *(char **)(v8 + 144);
      unint64_t v17 = *(void *)(v8 + 152);
      if ((unint64_t)v18 < v17)
      {
        *(void *)uint64_t v18 = *v15;
        uint64_t v19 = (uint64_t)(v18 + 8);
        goto LABEL_35;
      }
      uint64_t v20 = *v157;
      uint64_t v21 = v18 - *v157;
      uint64_t v22 = v21 >> 3;
      unint64_t v23 = (v21 >> 3) + 1;
      if (v23 >> 61) {
        sub_2E00();
      }
      uint64_t v24 = v17 - (void)v20;
      if (v24 >> 2 > v23) {
        unint64_t v23 = v24 >> 2;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25)
      {
        if (v25 >> 61) {
          sub_188D718();
        }
        uint64_t v26 = operator new(8 * v25);
        uint64_t v27 = &v26[8 * v22];
        *uint64_t v27 = *v16;
        uint64_t v19 = (uint64_t)(v27 + 1);
        if (v18 == v20)
        {
LABEL_33:
          *(void *)(v8 + 136) = v27;
          *(void *)(v8 + 144) = v19;
          *(void *)(v8 + 152) = &v26[8 * v25];
          if (!v18) {
            goto LABEL_35;
          }
LABEL_34:
          operator delete(v18);
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v26 = 0;
        uint64_t v27 = (void *)(8 * v22);
        *(void *)(8 * v22) = *v16;
        uint64_t v19 = 8 * v22 + 8;
        if (v18 == v20) {
          goto LABEL_33;
        }
      }
      unint64_t v28 = v18 - 8 - v20;
      if (v28 < 0x58) {
        goto LABEL_233;
      }
      if ((unint64_t)(v18 - &v26[v21]) < 0x20) {
        goto LABEL_233;
      }
      uint64_t v29 = (v28 >> 3) + 1;
      uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v31 = &v18[-v30];
      uint64_t v27 = (void *)((char *)v27 - v30);
      BOOL v32 = &v26[8 * v22 - 16];
      uint64_t v33 = v18 - 16;
      uint64_t v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v35 = *(_OWORD *)v33;
        *(v32 - 1) = *((_OWORD *)v33 - 1);
        *BOOL v32 = v35;
        v32 -= 2;
        v33 -= 32;
        v34 -= 4;
      }
      while (v34);
      uint64_t v18 = v31;
      if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_233:
        do
        {
          uint64_t v36 = *((void *)v18 - 1);
          v18 -= 8;
          *--uint64_t v27 = v36;
        }
        while (v18 != v20);
      }
      uint64_t v18 = *v157;
      *(void *)(v8 + 136) = v27;
      *(void *)(v8 + 144) = v19;
      *(void *)(v8 + 152) = &v26[8 * v25];
      if (v18) {
        goto LABEL_34;
      }
LABEL_35:
      *(void *)(v8 + 144) = v19;
      unsigned __int8 v38 = (char *)v175;
      uint64_t v37 = v176;
      if (v175 == v176)
      {
        LOBYTE(v39) = 0;
        char v42 = (char *)v175;
      }
      else
      {
        LODWORD(v39) = 0;
        do
        {
          uint64_t v40 = *(void *)(v8 + 16);
          uint64_t v41 = nullsub_1(v38);
          LODWORD(v39) = v39 | sub_1066148((void *)(v8 + 32), v40, v41);
          v38 += 48;
        }
        while (v38 != v37);
        char v42 = (char *)v175;
        if (!(v160 & 1 | ((v39 & 1) == 0)))
        {
          char v160 = 0;
          int v98 = 4;
          if (v175) {
            goto LABEL_156;
          }
          goto LABEL_157;
        }
        unsigned __int8 v38 = v176;
      }
      *(_OWORD *)uint64_t v172 = 0u;
      *(_OWORD *)v173 = 0u;
      BOOL v43 = v159;
      if (v14) {
        BOOL v43 = v42 != v38;
      }
      unsigned int v158 = v13;
      BOOL v159 = v43;
      int v174 = 1065353216;
      *(_OWORD *)uint64_t v169 = 0uLL;
      *(_OWORD *)uint64_t v170 = 0uLL;
      int v171 = 1065353216;
      if (v42 != v38)
      {
        char v163 = v39;
        unsigned __int8 v44 = 0;
        int v165 = 0;
        while (1)
        {
          uint64_t v47 = (int *)sub_37B3A8(*(void *)v8);
          unint64_t v48 = *(void **)v47;
          LODWORD(v183[1]) = v47[2];
          v183[0] = v48;
          uint64_t v49 = nullsub_1(v42);
          unint64_t v51 = *(void **)v49;
          unint64_t v50 = *(void **)(v49 + 8);
          if (*(void **)v49 == v50)
          {
            char v52 = 0;
          }
          else
          {
            char v52 = 0;
            do
            {
              char v53 = sub_F40EF8(v8, v51, (uint64_t)v197, (int *)v183, v166, v167, (uint64_t)v172, (uint64_t)v169);
              uint64_t v54 = (int *)sub_1068D64(*(void *)(v8 + 16));
              int v55 = sub_2A9F0(*(void *)(v8 + 16));
              uint64_t v56 = sub_F5B780((uint64_t)v197, v51, v54, v47, v55, v47[2]);
              int v57 = v56[5];
              if (v56[4] != -1 && v57 != 0x7FFFFFFF && *((void *)v56 + 3) != 0x7FFFFFFFFFFFFFFFLL)
              {
                if (LODWORD(v183[1])) {
                  int v57 = -v57;
                }
                int v60 = v57 / 10;
                int v61 = v57 % 10;
                if (v57 < 0) {
                  char v62 = -5;
                }
                else {
                  char v62 = 5;
                }
                LODWORD(v183[0]) += v60
                                  + (((103 * (char)(v62 + v61)) >> 15) & 1)
                                  + ((103 * (char)(v62 + v61)) >> 10);
              }
              v52 |= v53;
              v51 += 59;
            }
            while (v51 != v50);
          }
          if ((v52 & 0xC) == 0)
          {
            sub_1076BE8((uint64_t)v179, (uint64_t)v42);
            if (v163)
            {
              if (v160)
              {
                uint64_t v65 = v177.i64[1];
                if (v177.i64[1] >= v178)
                {
                  v177.i64[1] = (uint64_t)sub_F57624(&v177, (uint64_t)v42);
                }
                else
                {
                  *(void *)v177.i64[1] = 0;
                  *(void *)(v65 + 8) = 0;
                  *(void *)(v65 + 16) = 0;
                  *(_OWORD *)uint64_t v65 = *(_OWORD *)v42;
                  *(void *)(v65 + 16) = *((void *)v42 + 2);
                  *(void *)char v42 = 0;
                  *((void *)v42 + 1) = 0;
                  *((void *)v42 + 2) = 0;
                  long long v66 = *(_OWORD *)(v42 + 24);
                  *(void *)(v65 + 40) = *((void *)v42 + 5);
                  *(_OWORD *)(v65 + 24) = v66;
                  *((void *)v42 + 4) = 0;
                  *((void *)v42 + 5) = 0;
                  *((void *)v42 + 3) = 0;
                  v177.i64[1] = v65 + 48;
                }
              }
            }
            else
            {
              unint64_t v67 = *(void *)(v164 + 8);
              if (v67 < *(void *)(v164 + 16))
              {
                *(void *)unint64_t v67 = 0;
                *(void *)(v67 + 8) = 0;
                *(void *)(v67 + 16) = 0;
                *(_OWORD *)unint64_t v67 = *(_OWORD *)v42;
                *(void *)(v67 + 16) = *((void *)v42 + 2);
                *(void *)char v42 = 0;
                *((void *)v42 + 1) = 0;
                *((void *)v42 + 2) = 0;
                long long v45 = *(_OWORD *)(v42 + 24);
                *(void *)(v67 + 40) = *((void *)v42 + 5);
                *(_OWORD *)(v67 + 24) = v45;
                *((void *)v42 + 4) = 0;
                *((void *)v42 + 5) = 0;
                *((void *)v42 + 3) = 0;
                uint64_t v46 = (char *)(v67 + 48);
              }
              else
              {
                uint64_t v46 = sub_F57624((int64x2_t *)v164, (uint64_t)v42);
              }
              *(void *)(v164 + 8) = v46;
            }
            goto LABEL_47;
          }
          if (sub_F047E8(v162)) {
            break;
          }
LABEL_47:
          v44 |= v52;
          v165 |= (v52 & 2) >> 1;
          v42 += 48;
          if (v42 == v38)
          {
            long long v72 = v173[0];
            if (!v173[0])
            {
              LOBYTE(v39) = v163;
              goto LABEL_132;
            }
            while (2)
            {
              uint64_t v77 = *(void *)(v8 + 8);
              *(unsigned char *)(v77 + 30354) = 1;
              sub_F57008(v77 + 30360, 1);
              long long v78 = v72 + 2;
              uint64_t v80 = sub_F57414(v77 + 30360, v72 + 2);
              if (v80 == -1)
              {
                uint64_t v84 = *(void *)(v77 + 30408);
                uint64_t v85 = *(void *)(v77 + 30400);
                if ((unint64_t)(v84 - v85) >= 0x1FFFFFFFFFFFFFFFLL)
                {
                  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error(exception, "insert overflow");
                }
                uint64_t v86 = *(void *)(v77 + 30432);
                if (v85
                  && (unint64_t v87 = *(void *)(v86 + 8 * v79),
                      __PAIR64__(*(unsigned __int16 *)(v77 + 30396), *(_DWORD *)(v77 + 30392)) == __PAIR64__(WORD2(v87), v87))&& (HIWORD(v87) & 1) != (*(unsigned char *)(v77 + 30398) == 0))
                {
                  *(void *)(v77 + 30400) = v85 - 1;
                  *(void *)(v86 + 8 * v79) = *v78;
                  long long v81 = (__n128 *)(v72 + 3);
                  long long v83 = *(__n128 **)(v8 + 112);
                  unint64_t v82 = *(void *)(v8 + 120);
                  if ((unint64_t)v83 >= v82) {
                    goto LABEL_112;
                  }
                }
                else
                {
                  *(void *)(v77 + 30408) = v84 + 1;
                  *(void *)(v86 + 8 * v79) = *v78;
                  long long v81 = (__n128 *)(v72 + 3);
                  long long v83 = *(__n128 **)(v8 + 112);
                  unint64_t v82 = *(void *)(v8 + 120);
                  if ((unint64_t)v83 >= v82) {
                    goto LABEL_112;
                  }
                }
LABEL_104:
                sub_45E5B0(v83, v81);
                long long v76 = v83 + 2;
                *(void *)(v8 + 112) = v83 + 2;
                LOBYTE(v39) = v163;
              }
              else
              {
                long long v81 = (__n128 *)(v72 + 3);
                long long v83 = *(__n128 **)(v8 + 112);
                unint64_t v82 = *(void *)(v8 + 120);
                if ((unint64_t)v83 < v82) {
                  goto LABEL_104;
                }
LABEL_112:
                uint64_t v39 = ((char *)v83 - *v161) >> 5;
                if ((unint64_t)(v39 + 1) >> 59) {
                  sub_2E00();
                }
                uint64_t v88 = v82 - (void)*v161;
                uint64_t v89 = v88 >> 4;
                if (v88 >> 4 <= (unint64_t)(v39 + 1)) {
                  uint64_t v89 = v39 + 1;
                }
                if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFE0) {
                  unint64_t v90 = 0x7FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v90 = v89;
                }
                if (v90)
                {
                  if (v90 >> 59) {
                    sub_188D718();
                  }
                  uint64_t v91 = (__n128 *)operator new(32 * v90);
                }
                else
                {
                  uint64_t v91 = 0;
                }
                sub_45E5B0(&v91[2 * v39], v81);
                int v93 = *(char **)(v8 + 104);
                long long v73 = *(char **)(v8 + 112);
                LOBYTE(v39) = v163;
                if (v73 == v93)
                {
                  uint64_t v97 = &v91[2 * v90];
                  long long v76 = v92 + 2;
                  *(void *)(v8 + 104) = v92;
                  *(void *)(v8 + 112) = v92 + 2;
                  *(void *)(v8 + 120) = v97;
                  if (v73) {
                    goto LABEL_100;
                  }
                }
                else
                {
                  uint64_t v94 = 0;
                  do
                  {
                    unint64_t v95 = &v92[v94];
                    uint64_t v96 = &v73[v94 * 16];
                    v92[v94 - 1].n128_u32[0] = *(_DWORD *)&v73[v94 * 16 - 16];
                    if (*(_DWORD *)&v73[v94 * 16 - 16] <= 1u) {
                      v95[-2] = *((__n128 *)v96 - 2);
                    }
                    v95[-1].n128_u8[8] = *(v96 - 8);
                    v94 -= 2;
                  }
                  while (&v73[v94 * 16] != v93);
                  long long v73 = *v161;
                  long long v74 = &v92[v94];
                  long long v75 = &v91[2 * v90];
                  long long v76 = v92 + 2;
                  *(void *)(v8 + 104) = v74;
                  *(void *)(v8 + 112) = v92 + 2;
                  *(void *)(v8 + 120) = v75;
                  if (v73) {
LABEL_100:
                  }
                    operator delete(v73);
                }
              }
              *(void *)(v8 + 112) = v76;
              v44 |= v80 == -1;
              long long v72 = (void *)*v72;
              if (!v72) {
                goto LABEL_132;
              }
              continue;
            }
          }
        }
        sub_EAFC08((uint64_t)v183);
        unint64_t v63 = *(void *)(v164 + 8);
        if (v63 >= *(void *)(v164 + 16))
        {
          *(void *)(v164 + 8) = sub_F577B4((int64x2_t *)v164, (long long *)v183);
          char v64 = __p;
          if (__p) {
            goto LABEL_77;
          }
        }
        else
        {
          sub_EA7B04(*(void *)(v164 + 8), (long long *)v183);
          *(void *)(v164 + 8) = v63 + 48;
          *(void *)(v164 + 8) = v63 + 48;
          char v64 = __p;
          if (!__p) {
            goto LABEL_78;
          }
LABEL_77:
          v196 = v64;
          operator delete(v64);
        }
LABEL_78:
        if (v193)
        {
          int v194 = v193;
          operator delete(v193);
        }
        if (v191)
        {
          long long v192 = v191;
          operator delete(v191);
        }
        if (v189)
        {
          uint64_t v190 = v189;
          operator delete(v189);
        }
        uint64_t v68 = (char *)v187;
        if (v187)
        {
          uint64_t v69 = v188;
          char v70 = v187;
          if (v188 != v187)
          {
            do
            {
              unint64_t v71 = (void *)*((void *)v69 - 3);
              if (v71)
              {
                *((void *)v69 - 2) = v71;
                operator delete(v71);
              }
              v69 -= 56;
            }
            while (v69 != v68);
            char v70 = v187;
          }
          double v188 = v68;
          operator delete(v70);
        }
        if (v185)
        {
          uint64_t v186 = v185;
          operator delete(v185);
        }
        if (v184 < 0) {
          operator delete(v183[0]);
        }
        goto LABEL_47;
      }
      LOBYTE(v165) = 0;
      unsigned __int8 v44 = 0;
LABEL_132:
      uint64_t v99 = v170[0];
      if (v170[0])
      {
        do
        {
          uint64_t v101 = *(void *)(v8 + 8);
          *(unsigned char *)(v101 + 30354) = 1;
          sub_F57008(v101 + 30360, 1);
          uint64_t v102 = sub_F57414(v101 + 30360, v99 + 2);
          if (v102 == -1)
          {
            uint64_t v104 = *(void *)(v101 + 30408);
            uint64_t v105 = *(void *)(v101 + 30400);
            if ((unint64_t)(v104 - v105) >= 0x1FFFFFFFFFFFFFFFLL)
            {
              int v154 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v154, "insert overflow");
            }
            uint64_t v106 = *(void *)(v101 + 30432);
            if (v105
              && (unint64_t v107 = *(void *)(v106 + 8 * v103),
                  __PAIR64__(*(unsigned __int16 *)(v101 + 30396), *(_DWORD *)(v101 + 30392)) == __PAIR64__(WORD2(v107), v107))&& (HIWORD(v107) & 1) != (*(unsigned char *)(v101 + 30398) == 0))
            {
              *(void *)(v101 + 30400) = v105 - 1;
            }
            else
            {
              *(void *)(v101 + 30408) = v104 + 1;
            }
            *(void *)(v106 + 8 * v103) = v99[2];
          }
          v44 |= v102 == -1;
          uint64_t v99 = (void *)*v99;
        }
        while (v99);
        uint64_t v100 = v170[0];
      }
      else
      {
        uint64_t v100 = 0;
      }
      BOOL v108 = v177.i64[0] == v177.i64[1];
      if ((v44 | (v39 | v165))) {
        int v98 = 0;
      }
      else {
        int v98 = 2;
      }
      if (v100)
      {
        do
        {
          unint64_t v109 = (void *)*v100;
          operator delete(v100);
          uint64_t v100 = v109;
        }
        while (v109);
      }
      uint64_t v110 = v169[0];
      v169[0] = 0;
      if (v110) {
        operator delete(v110);
      }
      uint64_t v111 = v173[0];
      if (v173[0])
      {
        do
        {
          uint64_t v112 = (void *)*v111;
          operator delete(v111);
          uint64_t v111 = v112;
        }
        while (v112);
      }
      unint64_t v113 = v172[0];
      v172[0] = 0;
      if (v113) {
        operator delete(v113);
      }
      char v14 = 0;
      v160 &= v44 | v108;
      char v42 = (char *)v175;
      uint64_t v7 = v162;
      unsigned int v13 = v158;
      if (v175)
      {
LABEL_156:
        sub_C64384((uint64_t)&v175, (void **)v42);
        operator delete(v175);
      }
LABEL_157:
      unsigned int v114 = *(_DWORD *)(v8 + 72);
      if (v98 != 2 && ++v13 < v114) {
        continue;
      }
      if (v13 < v114) {
        goto LABEL_163;
      }
      goto LABEL_160;
    }
  }
LABEL_6:
  LOBYTE(v159) = 0;
  unsigned int v13 = 0;
LABEL_160:
  if (v177.i64[0] != v177.i64[1] && &v177 != (int64x2_t *)v164) {
    sub_F57948(v164, (const std::string *)v177.i64[0], v177.i64[1], 0xAAAAAAAAAAAAAAABLL * ((v177.i64[1] - v177.i64[0]) >> 4));
  }
LABEL_163:
  if (sub_F047F0(v7) & 1 | !v159 || !*(unsigned char *)(*(void *)(v8 + 24) + 8080)) {
    goto LABEL_198;
  }
  unint64_t v116 = *(void ***)v164;
  unint64_t v115 = *(void ***)(v164 + 8);
  if (*(void ***)v164 == v115)
  {
LABEL_171:
    if (sub_F047E8(v7)) {
      sub_C64384(v164, *(void ***)v164);
    }
    uint64_t v117 = *(void *)(v8 + 8);
    *(unsigned char *)(v117 + 30354) = 0;
    sub_ED7C40(v117 + 8);
    sub_C63080(v117 + 30360);
    sub_F54484(v117 + 30440);
    sub_F70190();
    uint64_t v118 = (void *)sub_F047F8(v7);
    uint64_t v119 = v118;
    int v121 = *(char **)(v8 + 144);
    unint64_t v120 = *(void *)(v8 + 152);
    if ((unint64_t)v121 >= v120)
    {
      uint64_t v123 = *v157;
      uint64_t v124 = v121 - *v157;
      uint64_t v125 = v124 >> 3;
      unint64_t v126 = (v124 >> 3) + 1;
      if (v126 >> 61) {
        sub_2E00();
      }
      uint64_t v127 = v120 - (void)v123;
      if (v127 >> 2 > v126) {
        unint64_t v126 = v127 >> 2;
      }
      if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v128 = v126;
      }
      if (v128)
      {
        if (v128 >> 61) {
          sub_188D718();
        }
        unint64_t v129 = operator new(8 * v128);
      }
      else
      {
        unint64_t v129 = 0;
      }
      BOOL v130 = &v129[8 * v125];
      *BOOL v130 = *v119;
      int v122 = v130 + 1;
      if (v121 != v123)
      {
        unint64_t v131 = v121 - v123 - 8;
        if (v131 < 0x58) {
          goto LABEL_234;
        }
        if ((unint64_t)(v121 - v129 - v124) < 0x20) {
          goto LABEL_234;
        }
        uint64_t v132 = (v131 >> 3) + 1;
        uint64_t v133 = 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
        unsigned int v134 = &v121[-v133];
        BOOL v130 = (void *)((char *)v130 - v133);
        BOOL v135 = &v129[8 * v125 - 16];
        unsigned int v136 = v121 - 16;
        uint64_t v137 = v132 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v138 = *(_OWORD *)v136;
          *(v135 - 1) = *((_OWORD *)v136 - 1);
          *BOOL v135 = v138;
          v135 -= 2;
          v136 -= 32;
          v137 -= 4;
        }
        while (v137);
        int v121 = v134;
        if (v132 != (v132 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_234:
          do
          {
            uint64_t v139 = *((void *)v121 - 1);
            v121 -= 8;
            *--BOOL v130 = v139;
          }
          while (v121 != v123);
        }
        int v121 = *v157;
      }
      *(void *)(v8 + 136) = v130;
      *(void *)(v8 + 144) = v122;
      *(void *)(v8 + 152) = &v129[8 * v128];
      if (v121) {
        operator delete(v121);
      }
    }
    else
    {
      *(void *)int v121 = *v118;
      int v122 = v121 + 8;
    }
    *(void *)(v8 + 144) = v122;
    v140 = (char *)v183[0];
    v141 = (char *)v183[1];
    if (v183[0] == v183[1])
    {
      if (!v183[0]) {
        goto LABEL_198;
      }
    }
    else
    {
      do
      {
        sub_1070DC0(*(void *)(v8 + 24), (std::string *)v140, v168);
        if (v168[0])
        {
          v168[1] = v168[0];
          operator delete(v168[0]);
        }
        if (!sub_EA80FC((char **)v140) || sub_F047E8(v7))
        {
          unint64_t v153 = *(void *)(v164 + 8);
          if (v153 < *(void *)(v164 + 16))
          {
            *(void *)unint64_t v153 = 0;
            *(void *)(v153 + 8) = 0;
            *(void *)(v153 + 16) = 0;
            *(_OWORD *)unint64_t v153 = *(_OWORD *)v140;
            *(void *)(v153 + 16) = *((void *)v140 + 2);
            *(void *)v140 = 0;
            *((void *)v140 + 1) = 0;
            *((void *)v140 + 2) = 0;
            long long v151 = *(_OWORD *)(v140 + 24);
            *(void *)(v153 + 40) = *((void *)v140 + 5);
            *(_OWORD *)(v153 + 24) = v151;
            *((void *)v140 + 4) = 0;
            *((void *)v140 + 5) = 0;
            *((void *)v140 + 3) = 0;
            uint64_t v152 = (char *)(v153 + 48);
          }
          else
          {
            uint64_t v152 = sub_F57624((int64x2_t *)v164, (uint64_t)v140);
          }
          *(void *)(v164 + 8) = v152;
        }
        v140 += 48;
      }
      while (v140 != v141);
      v140 = (char *)v183[0];
      if (!v183[0]) {
        goto LABEL_198;
      }
    }
    sub_C64384((uint64_t)v183, (void **)v140);
    operator delete(v183[0]);
    goto LABEL_198;
  }
  while (*(double *)(sub_EA841C((uint64_t *)v116) + 32) <= 0.95 || *(double *)(sub_EA8424((uint64_t)v116) + 32) <= 0.95)
  {
    v116 += 6;
    if (v116 == v115) {
      goto LABEL_171;
    }
  }
LABEL_198:
  uint64_t v142 = *(void *)(v8 + 104);
  uint64_t v143 = *(uint64_t **)(v8 + 112);
  unint64_t v144 = 126 - 2 * __clz(((uint64_t)v143 - v142) >> 5);
  if (v143 == (uint64_t *)v142) {
    uint64_t v145 = 0;
  }
  else {
    uint64_t v145 = v144;
  }
  sub_F35D00(v142, v143, (uint64_t)v183, v145, 1);
  sub_F35B58((uint64_t *)(v8 + 104));
  unsigned int v148 = *(void ***)v164;
  uint64_t v147 = *(void ***)(v164 + 8);
  if (*(void ***)v164 != v147)
  {
    do
    {
      sub_1071934(*(void *)(v8 + 24), (uint64_t)v148);
      v148 += 6;
    }
    while (v148 != v147);
  }
  *(_DWORD *)(v8 + 128) = v13;
  *(_DWORD *)(v8 + 132) = sub_FBEF1C(*(void *)(v8 + 8) + 19984, v146);
  if ((v156 & 1) == 0)
  {
    uint64_t v149 = *(void *)(v8 + 8);
    *(unsigned char *)(v149 + 30354) = 0;
    sub_ED7C40(v149 + 8);
    sub_C63080(v149 + 30360);
    sub_F54484(v149 + 30440);
  }
  sub_1066038(v8 + 32);
  if (v177.i64[0])
  {
    sub_C64384((uint64_t)&v177, (void **)v177.i64[0]);
    operator delete((void *)v177.i64[0]);
  }
  if (v199) {
    sub_3A6230(v198);
  }
  if (v181)
  {
    uint64_t v182 = v181;
    operator delete(v181);
  }
  return sub_3A6318(v180);
}

void sub_F4B3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void ***a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void **a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (LOBYTE(STACK[0x27A8])) {
    sub_3A6230(&STACK[0x1370]);
  }
  sub_C62E9C(&a42);
  _Unwind_Resume(a1);
}

void sub_F4B510(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, char a5@<W4>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v9 = (void **)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  *(unsigned char *)(v11 + 1394) = 0;
  nullsub_1(v11 + 8);
  sub_CE3520(v11 + 1400);
  sub_CE35E0(v11 + 1480);
  unsigned int v13 = v9 + 17;
  uint64_t v12 = v9[17];
  v9[16] = 0;
  if (v12)
  {
    v9[18] = v12;
    operator delete(v12);
    *unsigned int v13 = 0;
    v9[18] = 0;
    v9[19] = 0;
  }
  *unsigned int v13 = 0;
  v9[18] = 0;
  v9[19] = 0;
  sub_1076C48((uint64_t)&v352, *v9);
  sub_F5C7F8(v351, *v9);
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  v348 = 0;
  v349 = 0;
  uint64_t v350 = 0;
  if (a6 == 0x7FFFFFFFFFFFFFFFLL || !*((unsigned char *)v9 + 84))
  {
    v334 = a7;
    if (!*((_DWORD *)v9 + 18)) {
      goto LABEL_6;
    }
  }
  else
  {
    v334 = a7;
    if (!*((_DWORD *)v9 + 18))
    {
LABEL_6:
      LOBYTE(v328) = 0;
      unsigned int v14 = 0;
      goto LABEL_277;
    }
  }
  v324 = v9 + 17;
  unsigned int v326 = 0;
  BOOL v328 = 0;
  v332 = (char **)(v9 + 13);
  uint64_t v333 = a2;
  char v15 = 1;
  int v16 = 1;
  v338 = v9;
  do
  {
    int v329 = v16;
    if (sub_F047E8(a2))
    {
      unint64_t v17 = (void **)*a7;
      uint64_t v18 = a7[1];
      if (v18 != *a7)
      {
        do
        {
          uint64_t v26 = *(void **)(v18 - 224);
          if (v26)
          {
            *(void *)(v18 - 216) = v26;
            operator delete(v26);
          }
          uint64_t v27 = *(void **)(v18 - 248);
          if (v27)
          {
            *(void *)(v18 - 240) = v27;
            operator delete(v27);
          }
          unint64_t v28 = *(void **)(v18 - 312);
          if (v28)
          {
            *(void *)(v18 - 304) = v28;
            operator delete(v28);
          }
          uint64_t v29 = *(void **)(v18 - 336);
          if (v29)
          {
            *(void *)(v18 - 328) = v29;
            operator delete(v29);
          }
          uint64_t v30 = *(void *)(v18 - 360);
          if (v30)
          {
            uint64_t v31 = *(void *)(v18 - 352);
            BOOL v32 = *(void **)(v18 - 360);
            if (v31 != v30)
            {
              do
              {
                uint64_t v33 = *(void **)(v31 - 24);
                if (v33)
                {
                  *(void *)(v31 - 16) = v33;
                  operator delete(v33);
                }
                v31 -= 56;
              }
              while (v31 != v30);
              BOOL v32 = *(void **)(v18 - 360);
            }
            *(void *)(v18 - 352) = v30;
            operator delete(v32);
          }
          uint64_t v34 = *(void **)(v18 - 456);
          if (v34)
          {
            *(void *)(v18 - 448) = v34;
            operator delete(v34);
          }
          long long v35 = (void **)(v18 - 480);
          if (*(char *)(v18 - 457) < 0) {
            operator delete(*v35);
          }
          v18 -= 480;
        }
        while (v35 != v17);
      }
      a7[1] = (uint64_t)v17;
      LOBYTE(v16) = v329;
    }
    if (v16)
    {
      uint64_t v19 = (void **)v348;
      uint64_t v20 = v349;
      if (v349 != v348)
      {
        do
        {
          uint64_t v36 = *(v20 - 28);
          if (v36)
          {
            *(v20 - 27) = v36;
            operator delete(v36);
          }
          uint64_t v37 = *(v20 - 31);
          if (v37)
          {
            *(v20 - 30) = v37;
            operator delete(v37);
          }
          unsigned __int8 v38 = *(v20 - 39);
          if (v38)
          {
            *(v20 - 38) = v38;
            operator delete(v38);
          }
          uint64_t v39 = *(v20 - 42);
          if (v39)
          {
            *(v20 - 41) = v39;
            operator delete(v39);
          }
          uint64_t v40 = (char *)*(v20 - 45);
          if (v40)
          {
            uint64_t v41 = (char *)*(v20 - 44);
            char v42 = *(v20 - 45);
            if (v41 != v40)
            {
              do
              {
                BOOL v43 = (void *)*((void *)v41 - 3);
                if (v43)
                {
                  *((void *)v41 - 2) = v43;
                  operator delete(v43);
                }
                v41 -= 56;
              }
              while (v41 != v40);
              char v42 = *(v20 - 45);
            }
            *(v20 - 44) = v40;
            operator delete(v42);
          }
          unsigned __int8 v44 = *(v20 - 57);
          if (v44)
          {
            *(v20 - 56) = v44;
            operator delete(v44);
          }
          long long v45 = v20 - 60;
          if (*((char *)v20 - 457) < 0) {
            operator delete(*v45);
          }
          v20 -= 60;
        }
        while (v45 != v19);
      }
      v349 = v19;
    }
    sub_F594B8();
    uint64_t v21 = (void *)sub_F047F8(a2);
    uint64_t v22 = v21;
    uint64_t v24 = (char *)v9[18];
    unint64_t v23 = (char *)v9[19];
    if (v24 >= v23)
    {
      uint64_t v46 = (char *)*v324;
      uint64_t v47 = (uint64_t)&v24[-*v324];
      uint64_t v48 = v47 >> 3;
      unint64_t v49 = (v47 >> 3) + 1;
      if (v49 >> 61) {
        sub_2E00();
      }
      uint64_t v50 = v23 - v46;
      if (v50 >> 2 > v49) {
        unint64_t v49 = v50 >> 2;
      }
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v51 = v49;
      }
      if (v51)
      {
        if (v51 >> 61) {
          sub_188D718();
        }
        char v52 = operator new(8 * v51);
        char v53 = &v52[8 * v48];
        void *v53 = *v22;
        uint64_t v25 = (uint64_t)(v53 + 1);
        if (v24 != v46)
        {
LABEL_68:
          unint64_t v54 = v24 - 8 - v46;
          if (v54 < 0x58) {
            goto LABEL_361;
          }
          if ((unint64_t)(v24 - &v52[v47]) < 0x20) {
            goto LABEL_361;
          }
          uint64_t v55 = (v54 >> 3) + 1;
          uint64_t v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
          int v57 = &v24[-v56];
          char v53 = (void *)((char *)v53 - v56);
          BOOL v58 = &v52[8 * v48 - 16];
          uint64_t v59 = v24 - 16;
          uint64_t v60 = v55 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v61 = *(_OWORD *)v59;
            *(v58 - 1) = *((_OWORD *)v59 - 1);
            _OWORD *v58 = v61;
            v58 -= 2;
            v59 -= 32;
            v60 -= 4;
          }
          while (v60);
          uint64_t v24 = v57;
          if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_361:
            do
            {
              uint64_t v62 = *((void *)v24 - 1);
              v24 -= 8;
              *--char v53 = v62;
            }
            while (v24 != v46);
          }
          uint64_t v24 = (char *)*v324;
          v9[17] = v53;
          v9[18] = (void *)v25;
          v9[19] = &v52[8 * v51];
          if (!v24) {
            goto LABEL_79;
          }
LABEL_78:
          operator delete(v24);
          goto LABEL_79;
        }
      }
      else
      {
        char v52 = 0;
        char v53 = (void *)(8 * v48);
        *(void *)(8 * v48) = *v22;
        uint64_t v25 = 8 * v48 + 8;
        if (v24 != v46) {
          goto LABEL_68;
        }
      }
      v9[17] = v53;
      v9[18] = (void *)v25;
      v9[19] = &v52[8 * v51];
      if (v24) {
        goto LABEL_78;
      }
    }
    else
    {
      *(void *)uint64_t v24 = *v21;
      uint64_t v25 = (uint64_t)(v24 + 8);
    }
LABEL_79:
    char v64 = (char *)v346;
    unint64_t v63 = v347;
    BOOL v65 = v328;
    if (v15) {
      BOOL v65 = v346 != v347;
    }
    BOOL v328 = v65;
    v9[18] = (void *)v25;
    *(_OWORD *)v343 = 0u;
    *(_OWORD *)v344 = 0u;
    int v345 = 1065353216;
    *(_OWORD *)v340 = 0u;
    *(_OWORD *)v341 = 0u;
    int v342 = 1065353216;
    v337 = (char *)v63;
    if (v64 == (char *)v63)
    {
      int v67 = 0;
      int v66 = 0;
      uint64_t v235 = v341[0];
      if (v341[0]) {
        goto LABEL_210;
      }
      goto LABEL_271;
    }
    int v66 = 0;
    int v67 = 0;
    do
    {
      uint64_t v68 = sub_37B3A8((uint64_t)*v9);
      int v69 = sub_F41B10((uint64_t)v9, (uint64_t)v64, (uint64_t)v351, v68, a3, a4, (uint64_t)v343, (uint64_t)v340);
      if ((v69 & 0xC) == 0)
      {
        sub_65BD8();
        unint64_t v87 = a7[1];
        unint64_t v88 = a7[2];
        if (v87 < v88)
        {
          long long v89 = *(_OWORD *)v64;
          *(void *)(v87 + 16) = *((void *)v64 + 2);
          *(_OWORD *)unint64_t v87 = v89;
          *((void *)v64 + 1) = 0;
          *((void *)v64 + 2) = 0;
          *(void *)char v64 = 0;
          *(void *)(v87 + 24) = 0;
          *(void *)(v87 + 32) = 0;
          *(void *)(v87 + 40) = 0;
          *(_OWORD *)(v87 + 24) = *(_OWORD *)(v64 + 24);
          *(void *)(v87 + 40) = *((void *)v64 + 5);
          *((void *)v64 + 4) = 0;
          *((void *)v64 + 5) = 0;
          *((void *)v64 + 3) = 0;
          long long v90 = *((_OWORD *)v64 + 4);
          long long v91 = *((_OWORD *)v64 + 5);
          long long v92 = *((_OWORD *)v64 + 6);
          *(void *)(v87 + 110) = *(void *)(v64 + 110);
          *(_OWORD *)(v87 + 80) = v91;
          *(_OWORD *)(v87 + 96) = v92;
          *(_OWORD *)(v87 + 64) = v90;
          *(_OWORD *)(v87 + 48) = *((_OWORD *)v64 + 3);
          *(void *)(v87 + 128) = 0;
          *(void *)(v87 + 136) = 0;
          *(void *)(v87 + 120) = 0;
          *(_OWORD *)(v87 + 120) = *(_OWORD *)(v64 + 120);
          *(void *)(v87 + 136) = *((void *)v64 + 17);
          *((void *)v64 + 15) = 0;
          *((void *)v64 + 16) = 0;
          *((void *)v64 + 17) = 0;
          *(void *)(v87 + 144) = 0;
          *(void *)(v87 + 152) = 0;
          *(void *)(v87 + 160) = 0;
          *(_OWORD *)(v87 + 144) = *((_OWORD *)v64 + 9);
          *(void *)(v87 + 160) = *((void *)v64 + 20);
          *((void *)v64 + 18) = 0;
          *((void *)v64 + 19) = 0;
          *((void *)v64 + 20) = 0;
          *(void *)(v87 + 168) = 0;
          *(void *)(v87 + 176) = 0;
          *(void *)(v87 + 184) = 0;
          *(_OWORD *)(v87 + 168) = *(_OWORD *)(v64 + 168);
          *(void *)(v87 + 184) = *((void *)v64 + 23);
          *((void *)v64 + 21) = 0;
          *((void *)v64 + 22) = 0;
          *((void *)v64 + 23) = 0;
          long long v93 = *((_OWORD *)v64 + 13);
          uint64_t v94 = *((void *)v64 + 28);
          *(_OWORD *)(v87 + 192) = *((_OWORD *)v64 + 12);
          *(_OWORD *)(v87 + 208) = v93;
          *(void *)(v87 + 224) = v94;
          *(void *)(v87 + 232) = 0;
          *(void *)(v87 + 240) = 0;
          *(void *)(v87 + 248) = 0;
          *(_OWORD *)(v87 + 232) = *(_OWORD *)(v64 + 232);
          *(void *)(v87 + 248) = *((void *)v64 + 31);
          *((void *)v64 + 29) = 0;
          *((void *)v64 + 30) = 0;
          *((void *)v64 + 31) = 0;
          *(void *)(v87 + 256) = 0;
          *(void *)(v87 + 264) = 0;
          *(void *)(v87 + 272) = 0;
          *(_OWORD *)(v87 + 256) = *((_OWORD *)v64 + 16);
          *(void *)(v87 + 272) = *((void *)v64 + 34);
          *((void *)v64 + 32) = 0;
          *((void *)v64 + 33) = 0;
          *((void *)v64 + 34) = 0;
          *(_OWORD *)(v87 + 280) = *(_OWORD *)(v64 + 280);
          *(_DWORD *)(v87 + 304) = *((_DWORD *)v64 + 76);
          if (*((_DWORD *)v64 + 76) <= 1u) {
            *(void *)(v87 + 296) = *((void *)v64 + 37);
          }
          *(_OWORD *)(v87 + 312) = *(_OWORD *)(v64 + 312);
          long long v95 = *(_OWORD *)(v64 + 408);
          long long v97 = *(_OWORD *)(v64 + 360);
          long long v96 = *(_OWORD *)(v64 + 376);
          *(_OWORD *)(v87 + 392) = *(_OWORD *)(v64 + 392);
          *(_OWORD *)(v87 + 408) = v95;
          *(_OWORD *)(v87 + 360) = v97;
          *(_OWORD *)(v87 + 376) = v96;
          long long v99 = *(_OWORD *)(v64 + 440);
          long long v98 = *(_OWORD *)(v64 + 456);
          long long v100 = *(_OWORD *)(v64 + 424);
          *(void *)(v87 + 471) = *(void *)(v64 + 471);
          *(_OWORD *)(v87 + 440) = v99;
          *(_OWORD *)(v87 + 456) = v98;
          *(_OWORD *)(v87 + 424) = v100;
          long long v101 = *(_OWORD *)(v64 + 344);
          *(_OWORD *)(v87 + 328) = *(_OWORD *)(v64 + 328);
          *(_OWORD *)(v87 + 344) = v101;
          uint64_t v102 = v87 + 480;
          goto LABEL_84;
        }
        unint64_t v103 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v87 - *a7) >> 5);
        unint64_t v104 = v103 + 1;
        if (v103 + 1 > 0x88888888888888) {
          sub_2E00();
        }
        unint64_t v105 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v88 - *a7) >> 5);
        if (2 * v105 > v104) {
          unint64_t v104 = 2 * v105;
        }
        if (v105 >= 0x44444444444444) {
          unint64_t v106 = 0x88888888888888;
        }
        else {
          unint64_t v106 = v104;
        }
        if (v106)
        {
          if (v106 > 0x88888888888888) {
            sub_188D718();
          }
          unint64_t v107 = (char *)operator new(480 * v106);
        }
        else
        {
          unint64_t v107 = 0;
        }
        unsigned int v114 = &v107[480 * v103];
        long long v115 = *(_OWORD *)v64;
        *((void *)v114 + 2) = *((void *)v64 + 2);
        *(_OWORD *)unsigned int v114 = v115;
        *((void *)v64 + 1) = 0;
        *((void *)v64 + 2) = 0;
        *(void *)char v64 = 0;
        *((void *)v114 + 3) = 0;
        *((void *)v114 + 4) = 0;
        *((void *)v114 + 5) = 0;
        *(_OWORD *)(v114 + 24) = *(_OWORD *)(v64 + 24);
        *((void *)v114 + 5) = *((void *)v64 + 5);
        *((void *)v64 + 4) = 0;
        *((void *)v64 + 5) = 0;
        *((void *)v64 + 3) = 0;
        long long v116 = *((_OWORD *)v64 + 4);
        long long v117 = *((_OWORD *)v64 + 5);
        long long v118 = *((_OWORD *)v64 + 6);
        *(void *)(v114 + 110) = *(void *)(v64 + 110);
        *((_OWORD *)v114 + 5) = v117;
        *((_OWORD *)v114 + 6) = v118;
        *((_OWORD *)v114 + 4) = v116;
        *((_OWORD *)v114 + 3) = *((_OWORD *)v64 + 3);
        *((void *)v114 + 16) = 0;
        *((void *)v114 + 17) = 0;
        *((void *)v114 + 15) = 0;
        *(_OWORD *)(v114 + 120) = *(_OWORD *)(v64 + 120);
        *((void *)v114 + 17) = *((void *)v64 + 17);
        *((void *)v64 + 15) = 0;
        *((void *)v64 + 16) = 0;
        *((void *)v64 + 17) = 0;
        *((void *)v114 + 18) = 0;
        *((void *)v114 + 19) = 0;
        *((void *)v114 + 20) = 0;
        *((_OWORD *)v114 + 9) = *((_OWORD *)v64 + 9);
        *((void *)v114 + 20) = *((void *)v64 + 20);
        *((void *)v64 + 18) = 0;
        *((void *)v64 + 19) = 0;
        *((void *)v64 + 20) = 0;
        *((void *)v114 + 21) = 0;
        *((void *)v114 + 22) = 0;
        *((void *)v114 + 23) = 0;
        *(_OWORD *)(v114 + 168) = *(_OWORD *)(v64 + 168);
        *((void *)v114 + 23) = *((void *)v64 + 23);
        *((void *)v64 + 21) = 0;
        *((void *)v64 + 22) = 0;
        *((void *)v64 + 23) = 0;
        long long v119 = *((_OWORD *)v64 + 13);
        uint64_t v120 = *((void *)v64 + 28);
        *((_OWORD *)v114 + 12) = *((_OWORD *)v64 + 12);
        *((_OWORD *)v114 + 13) = v119;
        *((void *)v114 + 28) = v120;
        *((void *)v114 + 29) = 0;
        *((void *)v114 + 30) = 0;
        *((void *)v114 + 31) = 0;
        *(_OWORD *)(v114 + 232) = *(_OWORD *)(v64 + 232);
        *((void *)v114 + 31) = *((void *)v64 + 31);
        *((void *)v64 + 29) = 0;
        *((void *)v64 + 30) = 0;
        *((void *)v64 + 31) = 0;
        *((void *)v114 + 32) = 0;
        *((void *)v114 + 33) = 0;
        *((void *)v114 + 34) = 0;
        *((_OWORD *)v114 + 16) = *((_OWORD *)v64 + 16);
        *((void *)v114 + 34) = *((void *)v64 + 34);
        *((void *)v64 + 32) = 0;
        *((void *)v64 + 33) = 0;
        *((void *)v64 + 34) = 0;
        *(_OWORD *)(v114 + 280) = *(_OWORD *)(v64 + 280);
        *((_DWORD *)v114 + 76) = *((_DWORD *)v64 + 76);
        if (*((_DWORD *)v64 + 76) <= 1u) {
          *((void *)v114 + 37) = *((void *)v64 + 37);
        }
        int v121 = &v107[480 * v106];
        int v122 = &v107[480 * v103];
        *(_OWORD *)(v122 + 312) = *(_OWORD *)(v64 + 312);
        v122 += 328;
        long long v123 = *(_OWORD *)(v64 + 408);
        long long v125 = *(_OWORD *)(v64 + 360);
        long long v124 = *(_OWORD *)(v64 + 376);
        *((_OWORD *)v122 + 4) = *(_OWORD *)(v64 + 392);
        *((_OWORD *)v122 + 5) = v123;
        *((_OWORD *)v122 + 2) = v125;
        *((_OWORD *)v122 + 3) = v124;
        long long v127 = *(_OWORD *)(v64 + 440);
        long long v126 = *(_OWORD *)(v64 + 456);
        long long v128 = *(_OWORD *)(v64 + 424);
        *(void *)(v122 + 143) = *(void *)(v64 + 471);
        *((_OWORD *)v122 + 7) = v127;
        *((_OWORD *)v122 + 8) = v126;
        *((_OWORD *)v122 + 6) = v128;
        long long v129 = *(_OWORD *)(v64 + 344);
        *(_OWORD *)int v122 = *(_OWORD *)(v64 + 328);
        *((_OWORD *)v122 + 1) = v129;
        uint64_t v102 = (uint64_t)(v114 + 480);
        BOOL v130 = a7;
        unint64_t v131 = (void **)a7[1];
        uint64_t v132 = (void **)*v130;
        if (v131 == (void **)*v130)
        {
          *BOOL v130 = (uint64_t)v114;
          v130[1] = v102;
          v130[2] = (uint64_t)v121;
          if (!v131)
          {
LABEL_83:
            a7 = v334;
LABEL_84:
            a7[1] = v102;
            goto LABEL_85;
          }
        }
        else
        {
          uint64_t v133 = 0;
          do
          {
            uint64_t v142 = &v114[v133 * 8];
            uint64_t v143 = (uint64_t)&v114[v133 * 8 - 480];
            unint64_t v144 = &v131[v133];
            uint64_t v145 = (uint64_t)&v131[v133 - 60];
            long long v146 = *(_OWORD *)v145;
            *(void *)(v143 + 16) = v131[v133 - 58];
            *(_OWORD *)uint64_t v143 = v146;
            *(void *)(v145 + 8) = 0;
            *(void *)(v145 + 16) = 0;
            *(void *)uint64_t v145 = 0;
            uint64_t v147 = &v114[v133 * 8 - 456];
            uint64_t v148 = (uint64_t)&v131[v133 - 57];
            *(void *)&v114[v133 * 8 - 448] = 0;
            *(void *)uint64_t v147 = 0;
            *((void *)v147 + 2) = 0;
            *(_OWORD *)uint64_t v147 = *(_OWORD *)v148;
            *(void *)&v114[v133 * 8 - 440] = v131[v133 - 55];
            *(void *)(v148 + 16) = 0;
            v131[v133 - 56] = 0;
            *(void *)uint64_t v148 = 0;
            uint64_t v149 = (uint64_t)&v114[v133 * 8 - 432];
            long long v150 = *(_OWORD *)&v131[v133 - 52];
            long long v151 = *(_OWORD *)&v131[v133 - 50];
            long long v152 = *(_OWORD *)&v131[v133 - 48];
            *(void *)(v149 + 62) = *(void **)((char *)&v131[v133 - 46] - 2);
            *(_OWORD *)(v149 + 32) = v151;
            *(_OWORD *)(v149 + 48) = v152;
            *(_OWORD *)(v149 + 16) = v150;
            *(_OWORD *)uint64_t v149 = *(_OWORD *)&v131[v133 - 54];
            unint64_t v153 = &v114[v133 * 8 - 360];
            uint64_t v154 = (uint64_t)&v131[v133 - 45];
            *((void *)v153 + 1) = 0;
            *((void *)v153 + 2) = 0;
            *(void *)unint64_t v153 = 0;
            *(_OWORD *)unint64_t v153 = *(_OWORD *)v154;
            *(void *)&v114[v133 * 8 - 344] = v131[v133 - 43];
            v131[v133 - 44] = 0;
            *(void *)uint64_t v154 = 0;
            *(void *)(v154 + 16) = 0;
            int v155 = &v114[v133 * 8 - 336];
            uint64_t v156 = (uint64_t)&v131[v133 - 42];
            *(void *)&v114[v133 * 8 - 328] = 0;
            *(void *)int v155 = 0;
            *((void *)v155 + 2) = 0;
            *(_OWORD *)int v155 = *(_OWORD *)v156;
            *(void *)&v114[v133 * 8 - 320] = v131[v133 - 40];
            v131[v133 - 41] = 0;
            *(void *)uint64_t v156 = 0;
            *(void *)(v156 + 16) = 0;
            unint64_t v157 = &v114[v133 * 8 - 312];
            uint64_t v158 = (uint64_t)&v131[v133 - 39];
            *(void *)&v114[v133 * 8 - 304] = 0;
            *(void *)unint64_t v157 = 0;
            *((void *)v157 + 2) = 0;
            *(_OWORD *)unint64_t v157 = *(_OWORD *)v158;
            *(void *)&v114[v133 * 8 - 296] = v131[v133 - 37];
            v131[v133 - 38] = 0;
            *(void *)uint64_t v158 = 0;
            *(void *)(v158 + 16) = 0;
            BOOL v159 = &v114[v133 * 8 - 288];
            long long v160 = *(_OWORD *)&v131[v133 - 34];
            uint64_t v161 = v131[v133 - 32];
            *(_OWORD *)BOOL v159 = *(_OWORD *)&v131[v133 - 36];
            *((_OWORD *)v159 + 1) = v160;
            *((void *)v142 - 32) = v161;
            *((void *)v142 - 31) = 0;
            *((void *)v142 - 30) = 0;
            *((void *)v142 - 29) = 0;
            *(_OWORD *)(v142 - 248) = *(_OWORD *)&v131[v133 - 31];
            *((void *)v142 - 29) = v131[v133 - 29];
            *(v144 - 31) = 0;
            *(v144 - 30) = 0;
            *(v144 - 29) = 0;
            *((void *)v142 - 28) = 0;
            *((void *)v142 - 27) = 0;
            *((void *)v142 - 26) = 0;
            *((_OWORD *)v142 - 14) = *(_OWORD *)&v131[v133 - 28];
            *((void *)v142 - 26) = v131[v133 - 26];
            *(v144 - 28) = 0;
            *(v144 - 27) = 0;
            *(v144 - 26) = 0;
            *(_OWORD *)(v142 - 200) = *(_OWORD *)&v131[v133 - 25];
            *((_DWORD *)v142 - 44) = v131[v133 - 22];
            if (LODWORD(v131[v133 - 22]) < 2) {
              *((void *)v142 - 23) = *(v144 - 23);
            }
            unsigned int v134 = &v114[v133 * 8];
            *(_OWORD *)(v134 - 168) = *(_OWORD *)&v131[v133 - 21];
            long long v135 = *(_OWORD *)&v131[v133 - 13];
            long long v136 = *(_OWORD *)&v131[v133 - 11];
            long long v137 = *(_OWORD *)&v131[v133 - 9];
            *(_OWORD *)(v134 - 120) = *(_OWORD *)&v131[v133 - 15];
            *(_OWORD *)(v134 - 72) = v137;
            *(_OWORD *)(v134 - 88) = v136;
            *(_OWORD *)(v134 - 104) = v135;
            long long v138 = *(_OWORD *)&v131[v133 - 5];
            long long v139 = *(_OWORD *)&v131[v133 - 3];
            uint64_t v140 = *(uint64_t *)((char *)&v131[v133 - 1] - 1);
            *(_OWORD *)(v134 - 56) = *(_OWORD *)&v131[v133 - 7];
            *(void *)(v134 - 9) = v140;
            *(_OWORD *)(v134 - 24) = v139;
            *(_OWORD *)(v134 - 40) = v138;
            long long v141 = *(_OWORD *)&v131[v133 - 19];
            *(_OWORD *)(v134 - 136) = *(_OWORD *)&v131[v133 - 17];
            *(_OWORD *)(v134 - 152) = v141;
            v133 -= 60;
          }
          while (&v131[v133] != v132);
          unint64_t v131 = (void **)*v334;
          uint64_t v162 = (void **)v334[1];
          uint64_t *v334 = (uint64_t)&v114[v133 * 8];
          v334[1] = v102;
          v334[2] = (uint64_t)v121;
          if (v162 != v131)
          {
            v330 = v114 + 480;
            do
            {
              char v163 = *(v162 - 28);
              if (v163)
              {
                *(v162 - 27) = v163;
                operator delete(v163);
              }
              uint64_t v164 = *(v162 - 31);
              if (v164)
              {
                *(v162 - 30) = v164;
                operator delete(v164);
              }
              int v165 = *(v162 - 39);
              if (v165)
              {
                *(v162 - 38) = v165;
                operator delete(v165);
              }
              int v166 = *(v162 - 42);
              if (v166)
              {
                *(v162 - 41) = v166;
                operator delete(v166);
              }
              int v167 = (char *)*(v162 - 45);
              if (v167)
              {
                unint64_t v168 = (char *)*(v162 - 44);
                uint64_t v169 = *(v162 - 45);
                if (v168 != v167)
                {
                  do
                  {
                    uint64_t v170 = (void *)*((void *)v168 - 3);
                    if (v170)
                    {
                      *((void *)v168 - 2) = v170;
                      operator delete(v170);
                    }
                    v168 -= 56;
                  }
                  while (v168 != v167);
                  uint64_t v169 = *(v162 - 45);
                }
                *(v162 - 44) = v167;
                operator delete(v169);
                uint64_t v9 = v338;
              }
              int v171 = *(v162 - 57);
              if (v171)
              {
                *(v162 - 56) = v171;
                operator delete(v171);
              }
              uint64_t v172 = v162 - 60;
              if (*((char *)v162 - 457) < 0) {
                operator delete(*v172);
              }
              v162 -= 60;
            }
            while (v172 != v131);
            uint64_t v102 = (uint64_t)v330;
          }
          if (!v131) {
            goto LABEL_83;
          }
        }
        uint64_t v173 = v102;
        operator delete(v131);
        uint64_t v102 = v173;
        goto LABEL_83;
      }
      if (!sub_F047E8(v333)) {
        goto LABEL_85;
      }
      sub_EB1D94(&v359);
      char v70 = a7;
      unint64_t v71 = (void **)a7[1];
      unint64_t v72 = v70[2];
      if ((unint64_t)v71 < v72)
      {
        long long v73 = v359;
        v71[2] = v360;
        v71[3] = 0;
        *(_OWORD *)unint64_t v71 = v73;
        v360 = 0;
        long long v359 = 0uLL;
        v71[4] = 0;
        v71[5] = 0;
        *(_OWORD *)(v71 + 3) = v361;
        v71[5] = v362;
        long long v361 = 0uLL;
        v362 = 0;
        *((_OWORD *)v71 + 3) = v363;
        long long v74 = v364;
        long long v75 = v365;
        long long v76 = *(_OWORD *)v366;
        *(void **)((char *)v71 + 110) = *(void **)&v366[14];
        *((_OWORD *)v71 + 5) = v75;
        *((_OWORD *)v71 + 6) = v76;
        *((_OWORD *)v71 + 4) = v74;
        v71[15] = 0;
        v71[16] = 0;
        v71[17] = 0;
        v71[18] = 0;
        *(_OWORD *)(v71 + 15) = v367;
        v71[17] = v368;
        long long v367 = 0uLL;
        v368 = 0;
        v71[19] = 0;
        v71[20] = 0;
        *((_OWORD *)v71 + 9) = v369;
        long long v369 = 0uLL;
        v71[20] = v370;
        v71[21] = 0;
        v370 = 0;
        v71[22] = 0;
        v71[23] = 0;
        *(_OWORD *)(v71 + 21) = v371;
        v71[23] = v372;
        long long v371 = 0uLL;
        v372 = 0;
        long long v77 = v374;
        long long v78 = v375;
        *((_OWORD *)v71 + 12) = v373;
        *((_OWORD *)v71 + 13) = v77;
        v71[28] = v78;
        v71[29] = 0;
        v71[30] = 0;
        v71[31] = 0;
        *(_OWORD *)(v71 + 29) = v376;
        long long v376 = 0uLL;
        v71[31] = v377;
        v71[32] = 0;
        v377 = 0;
        v71[33] = 0;
        v71[34] = 0;
        *((_OWORD *)v71 + 16) = __p;
        v71[34] = v379;
        long long __p = 0uLL;
        v379 = 0;
        *(_OWORD *)(v71 + 35) = v380;
        *((_DWORD *)v71 + 76) = v382;
        if (v382 <= 1) {
          v71[37] = v381;
        }
        *(_OWORD *)(v71 + 39) = v383;
        long long v79 = v389;
        long long v81 = v386;
        long long v80 = v387;
        *(_OWORD *)(v71 + 49) = v388;
        *(_OWORD *)(v71 + 51) = v79;
        *(_OWORD *)(v71 + 45) = v81;
        *(_OWORD *)(v71 + 47) = v80;
        long long v83 = v391;
        long long v82 = *(_OWORD *)v392;
        long long v84 = v390;
        *(void **)((char *)v71 + 471) = *(void **)&v392[15];
        *(_OWORD *)(v71 + 55) = v83;
        *(_OWORD *)(v71 + 57) = v82;
        *(_OWORD *)(v71 + 53) = v84;
        long long v85 = v385;
        *(_OWORD *)(v71 + 41) = v384;
        *(_OWORD *)(v71 + 43) = v85;
        uint64_t v86 = (char *)(v71 + 60);
        goto LABEL_186;
      }
      BOOL v108 = (void **)*v70;
      unint64_t v109 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v71 - *v70) >> 5);
      unint64_t v110 = v109 + 1;
      if (v109 + 1 > 0x88888888888888) {
        sub_2E00();
      }
      unint64_t v111 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v72 - (void)v108) >> 5);
      if (2 * v111 > v110) {
        unint64_t v110 = 2 * v111;
      }
      if (v111 >= 0x44444444444444) {
        unint64_t v112 = 0x88888888888888;
      }
      else {
        unint64_t v112 = v110;
      }
      if (v112)
      {
        if (v112 > 0x88888888888888) {
          sub_188D718();
        }
        unint64_t v113 = (char *)operator new(480 * v112);
      }
      else
      {
        unint64_t v113 = 0;
      }
      int v174 = &v113[480 * v109];
      *(_OWORD *)int v174 = v359;
      long long v175 = v362;
      *((void *)v174 + 2) = v360;
      v360 = 0;
      long long v359 = 0uLL;
      *(_OWORD *)(v174 + 24) = v361;
      *((void *)v174 + 5) = v175;
      v362 = 0;
      long long v361 = 0uLL;
      long long v176 = v363;
      long long v177 = v364;
      long long v178 = v365;
      long long v179 = *(_OWORD *)v366;
      *(void *)(v174 + 110) = *(void *)&v366[14];
      *((_OWORD *)v174 + 5) = v178;
      *((_OWORD *)v174 + 6) = v179;
      *((_OWORD *)v174 + 3) = v176;
      *((_OWORD *)v174 + 4) = v177;
      *((void *)v174 + 16) = 0;
      *((void *)v174 + 17) = 0;
      *(_OWORD *)(v174 + 120) = v367;
      *((void *)v174 + 17) = v368;
      long long v367 = 0uLL;
      v368 = 0;
      *((void *)v174 + 19) = 0;
      *((void *)v174 + 20) = 0;
      *((_OWORD *)v174 + 9) = v369;
      unint64_t v180 = v372;
      *((void *)v174 + 20) = v370;
      long long v369 = 0uLL;
      v370 = 0;
      *((void *)v174 + 22) = 0;
      *((void *)v174 + 23) = 0;
      *(_OWORD *)(v174 + 168) = v371;
      *((void *)v174 + 23) = v180;
      long long v371 = 0uLL;
      v372 = 0;
      long long v181 = v373;
      long long v182 = v374;
      *((void *)v174 + 28) = v375;
      *((_OWORD *)v174 + 12) = v181;
      *((_OWORD *)v174 + 13) = v182;
      *((void *)v174 + 30) = 0;
      *((void *)v174 + 31) = 0;
      *(_OWORD *)(v174 + 232) = v376;
      *((void *)v174 + 31) = v377;
      long long v376 = 0uLL;
      v377 = 0;
      *((void *)v174 + 33) = 0;
      *((void *)v174 + 34) = 0;
      *((_OWORD *)v174 + 16) = __p;
      *((void *)v174 + 34) = v379;
      long long __p = 0uLL;
      v379 = 0;
      *(_OWORD *)(v174 + 280) = v380;
      LODWORD(v180) = v382;
      *((_DWORD *)v174 + 76) = v382;
      if (v180 <= 1) {
        *((void *)v174 + 37) = v381;
      }
      uint64_t v183 = &v113[480 * v109];
      *(_OWORD *)(v183 + 312) = v383;
      long long v184 = v391;
      unint64_t v185 = &v113[480 * v112];
      v183 += 328;
      *((_OWORD *)v183 + 6) = v390;
      *((_OWORD *)v183 + 7) = v184;
      *((_OWORD *)v183 + 8) = *(_OWORD *)v392;
      *(void *)(v183 + 143) = *(void *)&v392[15];
      long long v186 = v387;
      *((_OWORD *)v183 + 2) = v386;
      *((_OWORD *)v183 + 3) = v186;
      long long v187 = v389;
      *((_OWORD *)v183 + 4) = v388;
      *((_OWORD *)v183 + 5) = v187;
      long long v188 = v385;
      uint64_t v86 = v174 + 480;
      *(_OWORD *)uint64_t v183 = v384;
      *((_OWORD *)v183 + 1) = v188;
      if (v71 == v108)
      {
        uint64_t *v334 = (uint64_t)v174;
        v334[1] = (uint64_t)v86;
        v334[2] = (uint64_t)v185;
        if (!v71) {
          goto LABEL_186;
        }
      }
      else
      {
        uint64_t v189 = 0;
        do
        {
          char v198 = &v174[v189 * 8];
          uint64_t v199 = (uint64_t)&v174[v189 * 8 - 480];
          char v200 = &v71[v189];
          uint64_t v201 = (uint64_t)&v71[v189 - 60];
          long long v202 = *(_OWORD *)v201;
          *(void *)(v199 + 16) = v71[v189 - 58];
          *(_OWORD *)uint64_t v199 = v202;
          *(void *)(v201 + 8) = 0;
          *(void *)(v201 + 16) = 0;
          *(void *)uint64_t v201 = 0;
          uint64_t v203 = &v174[v189 * 8 - 456];
          uint64_t v204 = (uint64_t)&v71[v189 - 57];
          *(void *)&v174[v189 * 8 - 448] = 0;
          *(void *)uint64_t v203 = 0;
          *((void *)v203 + 2) = 0;
          *(_OWORD *)uint64_t v203 = *(_OWORD *)v204;
          *(void *)&v174[v189 * 8 - 440] = v71[v189 - 55];
          *(void *)(v204 + 16) = 0;
          v71[v189 - 56] = 0;
          *(void *)uint64_t v204 = 0;
          uint64_t v205 = (uint64_t)&v174[v189 * 8 - 432];
          long long v206 = *(_OWORD *)&v71[v189 - 52];
          long long v207 = *(_OWORD *)&v71[v189 - 50];
          long long v208 = *(_OWORD *)&v71[v189 - 48];
          *(void *)(v205 + 62) = *(void **)((char *)&v71[v189 - 46] - 2);
          *(_OWORD *)(v205 + 32) = v207;
          *(_OWORD *)(v205 + 48) = v208;
          *(_OWORD *)(v205 + 16) = v206;
          *(_OWORD *)uint64_t v205 = *(_OWORD *)&v71[v189 - 54];
          int v209 = &v174[v189 * 8 - 360];
          uint64_t v210 = (uint64_t)&v71[v189 - 45];
          *((void *)v209 + 1) = 0;
          *((void *)v209 + 2) = 0;
          *(void *)int v209 = 0;
          *(_OWORD *)int v209 = *(_OWORD *)v210;
          *(void *)&v174[v189 * 8 - 344] = v71[v189 - 43];
          v71[v189 - 44] = 0;
          *(void *)uint64_t v210 = 0;
          *(void *)(v210 + 16) = 0;
          int v211 = &v174[v189 * 8 - 336];
          uint64_t v212 = (uint64_t)&v71[v189 - 42];
          *(void *)&v174[v189 * 8 - 328] = 0;
          *(void *)int v211 = 0;
          *((void *)v211 + 2) = 0;
          *(_OWORD *)int v211 = *(_OWORD *)v212;
          *(void *)&v174[v189 * 8 - 320] = v71[v189 - 40];
          v71[v189 - 41] = 0;
          *(void *)uint64_t v212 = 0;
          *(void *)(v212 + 16) = 0;
          int v213 = &v174[v189 * 8 - 312];
          uint64_t v214 = (uint64_t)&v71[v189 - 39];
          *(void *)&v174[v189 * 8 - 304] = 0;
          *(void *)int v213 = 0;
          *((void *)v213 + 2) = 0;
          *(_OWORD *)int v213 = *(_OWORD *)v214;
          *(void *)&v174[v189 * 8 - 296] = v71[v189 - 37];
          v71[v189 - 38] = 0;
          *(void *)uint64_t v214 = 0;
          *(void *)(v214 + 16) = 0;
          int v215 = &v174[v189 * 8 - 288];
          long long v216 = *(_OWORD *)&v71[v189 - 34];
          int v217 = v71[v189 - 32];
          *(_OWORD *)int v215 = *(_OWORD *)&v71[v189 - 36];
          *((_OWORD *)v215 + 1) = v216;
          *((void *)v198 - 32) = v217;
          *((void *)v198 - 31) = 0;
          *((void *)v198 - 30) = 0;
          *((void *)v198 - 29) = 0;
          *(_OWORD *)(v198 - 248) = *(_OWORD *)&v71[v189 - 31];
          *((void *)v198 - 29) = v71[v189 - 29];
          *(v200 - 31) = 0;
          *(v200 - 30) = 0;
          *(v200 - 29) = 0;
          *((void *)v198 - 28) = 0;
          *((void *)v198 - 27) = 0;
          *((void *)v198 - 26) = 0;
          *((_OWORD *)v198 - 14) = *(_OWORD *)&v71[v189 - 28];
          *((void *)v198 - 26) = v71[v189 - 26];
          *(v200 - 28) = 0;
          *(v200 - 27) = 0;
          *(v200 - 26) = 0;
          *(_OWORD *)(v198 - 200) = *(_OWORD *)&v71[v189 - 25];
          *((_DWORD *)v198 - 44) = v71[v189 - 22];
          if (LODWORD(v71[v189 - 22]) < 2) {
            *((void *)v198 - 23) = *(v200 - 23);
          }
          uint64_t v190 = &v174[v189 * 8];
          *(_OWORD *)(v190 - 168) = *(_OWORD *)&v71[v189 - 21];
          long long v191 = *(_OWORD *)&v71[v189 - 13];
          long long v192 = *(_OWORD *)&v71[v189 - 11];
          long long v193 = *(_OWORD *)&v71[v189 - 9];
          *(_OWORD *)(v190 - 120) = *(_OWORD *)&v71[v189 - 15];
          *(_OWORD *)(v190 - 72) = v193;
          *(_OWORD *)(v190 - 88) = v192;
          *(_OWORD *)(v190 - 104) = v191;
          long long v194 = *(_OWORD *)&v71[v189 - 5];
          long long v195 = *(_OWORD *)&v71[v189 - 3];
          uint64_t v196 = *(uint64_t *)((char *)&v71[v189 - 1] - 1);
          *(_OWORD *)(v190 - 56) = *(_OWORD *)&v71[v189 - 7];
          *(void *)(v190 - 9) = v196;
          *(_OWORD *)(v190 - 24) = v195;
          *(_OWORD *)(v190 - 40) = v194;
          long long v197 = *(_OWORD *)&v71[v189 - 19];
          *(_OWORD *)(v190 - 136) = *(_OWORD *)&v71[v189 - 17];
          *(_OWORD *)(v190 - 152) = v197;
          v189 -= 60;
        }
        while (&v71[v189] != v108);
        unint64_t v71 = (void **)*v334;
        unint64_t v218 = (void **)v334[1];
        uint64_t *v334 = (uint64_t)&v174[v189 * 8];
        v334[1] = (uint64_t)v86;
        v334[2] = (uint64_t)v185;
        if (v218 != v71)
        {
          v331 = v174 + 480;
          do
          {
            v219 = *(v218 - 28);
            if (v219)
            {
              *(v218 - 27) = v219;
              operator delete(v219);
            }
            unint64_t v220 = *(v218 - 31);
            if (v220)
            {
              *(v218 - 30) = v220;
              operator delete(v220);
            }
            char v221 = *(v218 - 39);
            if (v221)
            {
              *(v218 - 38) = v221;
              operator delete(v221);
            }
            unint64_t v222 = *(v218 - 42);
            if (v222)
            {
              *(v218 - 41) = v222;
              operator delete(v222);
            }
            long long v223 = (char *)*(v218 - 45);
            if (v223)
            {
              uint64_t v224 = (char *)*(v218 - 44);
              long long v225 = *(v218 - 45);
              if (v224 != v223)
              {
                do
                {
                  uint64_t v226 = (void *)*((void *)v224 - 3);
                  if (v226)
                  {
                    *((void *)v224 - 2) = v226;
                    operator delete(v226);
                  }
                  v224 -= 56;
                }
                while (v224 != v223);
                long long v225 = *(v218 - 45);
              }
              *(v218 - 44) = v223;
              operator delete(v225);
              uint64_t v9 = v338;
            }
            long long v227 = *(v218 - 57);
            if (v227)
            {
              *(v218 - 56) = v227;
              operator delete(v227);
            }
            long long v228 = v218 - 60;
            if (*((char *)v218 - 457) < 0) {
              operator delete(*v228);
            }
            v218 -= 60;
          }
          while (v228 != v71);
          uint64_t v86 = v331;
        }
        if (!v71) {
          goto LABEL_186;
        }
      }
      long long v229 = v86;
      operator delete(v71);
      uint64_t v86 = v229;
LABEL_186:
      a7 = v334;
      v334[1] = (uint64_t)v86;
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if ((void)v376)
      {
        *((void *)&v376 + 1) = v376;
        operator delete((void *)v376);
      }
      if ((void)v371)
      {
        *((void *)&v371 + 1) = v371;
        operator delete((void *)v371);
      }
      if ((void)v369)
      {
        *((void *)&v369 + 1) = v369;
        operator delete((void *)v369);
      }
      uint64_t v230 = v367;
      if ((void)v367)
      {
        uint64_t v231 = *((void *)&v367 + 1);
        long long v232 = (void *)v367;
        if (*((void *)&v367 + 1) != (void)v367)
        {
          do
          {
            uint64_t v233 = *(void **)(v231 - 24);
            if (v233)
            {
              *(void *)(v231 - 16) = v233;
              operator delete(v233);
            }
            v231 -= 56;
          }
          while (v231 != v230);
          long long v232 = (void *)v367;
        }
        *((void *)&v367 + 1) = v230;
        operator delete(v232);
      }
      if ((void)v361)
      {
        *((void *)&v361 + 1) = v361;
        operator delete((void *)v361);
      }
      if (SHIBYTE(v360) < 0) {
        operator delete((void *)v359);
      }
LABEL_85:
      v66 |= v69;
      v67 |= (v69 & 2) >> 1;
      v64 += 480;
    }
    while (v64 != v337);
    long long v234 = (char *)v344[0];
    if (v344[0])
    {
      do
      {
        char v260 = v9[1];
        *((unsigned char *)v260 + 1394) = 1;
        uint64_t v261 = (uint64_t)(v260 + 175);
        sub_F57BA4((uint64_t)(v260 + 175), 1);
        sub_F57E78(v261, (uint64_t *)v234 + 2, (uint64_t)&v359);
        int v262 = v361;
        v264 = (char *)v9[14];
        v263 = (char *)v9[15];
        if (v264 >= v263)
        {
          uint64_t v265 = (v264 - *v332) >> 5;
          if ((unint64_t)(v265 + 1) >> 59) {
            sub_2E00();
          }
          uint64_t v266 = v263 - *v332;
          uint64_t v267 = v266 >> 4;
          if (v266 >> 4 <= (unint64_t)(v265 + 1)) {
            uint64_t v267 = v265 + 1;
          }
          if ((unint64_t)v266 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v268 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v268 = v267;
          }
          if (v268)
          {
            if (v268 >> 59) {
              sub_188D718();
            }
            v269 = (__n128 *)operator new(32 * v268);
          }
          else
          {
            v269 = 0;
          }
          sub_45E5B0(&v269[2 * v265], (__n128 *)(v234 + 24));
          v271 = (char *)v9[13];
          char v258 = (char *)v9[14];
          if (v258 == v271)
          {
            long long v259 = v270 + 4;
            v9[13] = v270;
            v9[14] = v270 + 4;
            v9[15] = v269[2 * v268].n128_u64;
            if (!v258) {
              goto LABEL_245;
            }
          }
          else
          {
            uint64_t v272 = 0;
            do
            {
              v273 = &v270[v272];
              v274 = &v258[v272 * 8];
              LODWORD(v270[v272 - 2]) = *(_DWORD *)&v258[v272 * 8 - 16];
              if (*(_DWORD *)&v258[v272 * 8 - 16] <= 1u) {
                *((_OWORD *)v273 - 2) = *((_OWORD *)v274 - 2);
              }
              *((unsigned char *)v273 - 8) = *(v274 - 8);
              v272 -= 4;
            }
            while (&v258[v272 * 8] != v271);
            char v258 = *v332;
            long long v259 = v270 + 4;
            v9[13] = &v270[v272];
            v9[14] = v270 + 4;
            v9[15] = v269[2 * v268].n128_u64;
            if (!v258) {
              goto LABEL_245;
            }
          }
          operator delete(v258);
        }
        else
        {
          sub_45E5B0((__n128 *)v9[14], (__n128 *)(v234 + 24));
          long long v259 = v264 + 32;
          v9[14] = v264 + 32;
        }
LABEL_245:
        v9[14] = v259;
        v66 |= v262 != 0;
        long long v234 = *(char **)v234;
      }
      while (v234);
    }
    uint64_t v235 = v341[0];
    if (!v341[0])
    {
LABEL_271:
      BOOL v239 = v348 == v349;
      goto LABEL_213;
    }
    do
    {
LABEL_210:
      long long v236 = v9[1];
      *((unsigned char *)v236 + 1394) = 1;
      uint64_t v237 = (uint64_t)(v236 + 175);
      sub_F57BA4((uint64_t)(v236 + 175), 1);
      sub_F57E78(v237, v235 + 2, (uint64_t)&v359);
      v66 |= (_BYTE)v361 != 0;
      uint64_t v235 = (void *)*v235;
    }
    while (v235);
    uint64_t v238 = v341[0];
    BOOL v239 = v348 == v349;
    if (v341[0])
    {
      do
      {
        uint64_t v240 = (void *)*v238;
        operator delete(v238);
        uint64_t v238 = v240;
      }
      while (v240);
    }
LABEL_213:
    long long v241 = v340[0];
    v340[0] = 0;
    if (v241) {
      operator delete(v241);
    }
    uint64_t v242 = v344[0];
    if (v344[0])
    {
      do
      {
        long long v243 = (void *)*v242;
        operator delete(v242);
        uint64_t v242 = v243;
      }
      while (v243);
    }
    uint64_t v244 = v343[0];
    v343[0] = 0;
    if (v244) {
      operator delete(v244);
    }
    unsigned int v245 = (void **)v346;
    if (v346)
    {
      long long v246 = v347;
      long long v247 = v346;
      if (v347 != v346)
      {
        do
        {
          long long v248 = *(v246 - 28);
          if (v248)
          {
            *(v246 - 27) = v248;
            operator delete(v248);
          }
          long long v249 = *(v246 - 31);
          if (v249)
          {
            *(v246 - 30) = v249;
            operator delete(v249);
          }
          long long v250 = *(v246 - 39);
          if (v250)
          {
            *(v246 - 38) = v250;
            operator delete(v250);
          }
          long long v251 = *(v246 - 42);
          if (v251)
          {
            *(v246 - 41) = v251;
            operator delete(v251);
          }
          long long v252 = (char *)*(v246 - 45);
          if (v252)
          {
            long long v253 = (char *)*(v246 - 44);
            long long v254 = *(v246 - 45);
            if (v253 != v252)
            {
              do
              {
                long long v255 = (void *)*((void *)v253 - 3);
                if (v255)
                {
                  *((void *)v253 - 2) = v255;
                  operator delete(v255);
                }
                v253 -= 56;
              }
              while (v253 != v252);
              long long v254 = *(v246 - 45);
            }
            *(v246 - 44) = v252;
            operator delete(v254);
          }
          long long v256 = *(v246 - 57);
          if (v256)
          {
            *(v246 - 56) = v256;
            operator delete(v256);
          }
          long long v257 = v246 - 60;
          uint64_t v9 = v338;
          if (*((char *)v246 - 457) < 0) {
            operator delete(*v257);
          }
          v246 -= 60;
        }
        while (v257 != v245);
        long long v247 = v346;
      }
      v347 = v245;
      operator delete(v247);
    }
    unsigned int v275 = *((_DWORD *)v9 + 18);
    if (((v66 | v67) & 1) == 0)
    {
      a2 = v333;
      break;
    }
    char v15 = 0;
    int v16 = (v66 | v239) & v329;
    ++v326;
    a2 = v333;
  }
  while (v326 < v275);
  unsigned int v14 = v326;
  unsigned int v13 = v324;
  if (v326 >= v275 && v348 != v349 && &v348 != (void **)a7) {
    sub_D5D9A0(a7, (uint64_t)v348, (uint64_t)v349, 0xEEEEEEEEEEEEEEEFLL * (((char *)v349 - (unsigned char *)v348) >> 5));
  }
LABEL_277:
  if (!(sub_F047F0(a2) & 1 | !v328) && *((unsigned char *)v9[3] + 8080))
  {
    uint64_t v276 = *a7;
    uint64_t v277 = a7[1];
    if (*a7 == v277)
    {
LABEL_285:
      if (sub_F047E8(a2))
      {
        uint64_t v279 = *a7;
        uint64_t v278 = a7[1];
        if (v278 != *a7)
        {
          do
            uint64_t v278 = sub_4451C0(v278 - 480);
          while (v278 != v279);
        }
        a7[1] = v279;
      }
      v280 = v9[1];
      *((unsigned char *)v280 + 1394) = 0;
      nullsub_1(v280 + 1);
      sub_CE3520((uint64_t)(v280 + 175));
      sub_CE35E0((uint64_t)(v280 + 185));
      v325 = (char **)v13;
      unsigned int v327 = v14;
      sub_F594B8();
      v281 = (void *)sub_F047F8(a2);
      v282 = v281;
      v284 = (char *)v9[18];
      v283 = (char *)v9[19];
      if (v284 >= v283)
      {
        v286 = (char *)*v13;
        uint64_t v287 = (uint64_t)&v284[-*v13];
        uint64_t v288 = v287 >> 3;
        unint64_t v289 = (v287 >> 3) + 1;
        if (v289 >> 61) {
          sub_2E00();
        }
        uint64_t v290 = v283 - v286;
        if (v290 >> 2 > v289) {
          unint64_t v289 = v290 >> 2;
        }
        if ((unint64_t)v290 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v291 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v291 = v289;
        }
        if (v291)
        {
          if (v291 >> 61) {
            sub_188D718();
          }
          v292 = operator new(8 * v291);
        }
        else
        {
          v292 = 0;
        }
        v293 = &v292[8 * v288];
        void *v293 = *v282;
        v285 = v293 + 1;
        if (v284 != v286)
        {
          unint64_t v294 = v284 - v286 - 8;
          if (v294 < 0x58) {
            goto LABEL_362;
          }
          if ((unint64_t)(v284 - v292 - v287) < 0x20) {
            goto LABEL_362;
          }
          uint64_t v295 = (v294 >> 3) + 1;
          uint64_t v296 = 8 * (v295 & 0x3FFFFFFFFFFFFFFCLL);
          v297 = &v284[-v296];
          v293 = (void *)((char *)v293 - v296);
          v298 = &v292[8 * v288 - 16];
          v299 = v284 - 16;
          uint64_t v300 = v295 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v301 = *(_OWORD *)v299;
            *(v298 - 1) = *((_OWORD *)v299 - 1);
            _OWORD *v298 = v301;
            v298 -= 2;
            v299 -= 32;
            v300 -= 4;
          }
          while (v300);
          v284 = v297;
          if (v295 != (v295 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_362:
            do
            {
              uint64_t v302 = *((void *)v284 - 1);
              v284 -= 8;
              *--v293 = v302;
            }
            while (v284 != v286);
          }
          v284 = *v325;
        }
        v9[17] = v293;
        v9[18] = v285;
        v9[19] = &v292[8 * v291];
        unsigned int v14 = v327;
        if (v284) {
          operator delete(v284);
        }
      }
      else
      {
        *(void *)v284 = *v281;
        v285 = v284 + 8;
        unsigned int v14 = v327;
      }
      v9[18] = v285;
      v304 = (long long *)*((void *)&v359 + 1);
      v303 = (long long *)v359;
      if ((void)v359 != *((void *)&v359 + 1))
      {
        do
        {
          sub_1073620((uint64_t)v9[3], v303, v339);
          if (v339[0])
          {
            v339[1] = v339[0];
            operator delete(v339[0]);
          }
          if (!sub_EB2EC4((uint64_t)v303) || sub_F047E8(a2))
          {
            unint64_t v306 = a7[1];
            if (v306 < a7[2])
            {
              sub_CE3918((uint64_t)(a7 + 2), a7[1], v303);
              uint64_t v305 = v306 + 480;
            }
            else
            {
              uint64_t v305 = sub_CE37BC(a7, v303);
            }
            a7[1] = v305;
          }
          v303 += 30;
        }
        while (v303 != v304);
        v303 = (long long *)v359;
        unsigned int v14 = v327;
      }
      if (v303)
      {
        uint64_t v307 = *((void *)&v359 + 1);
        v308 = v303;
        if (*((long long **)&v359 + 1) != v303)
        {
          do
            uint64_t v307 = sub_4451C0(v307 - 480);
          while ((long long *)v307 != v303);
          v308 = (long long *)v359;
        }
        *((void *)&v359 + 1) = v303;
        operator delete(v308);
      }
    }
    else
    {
      while (*(double *)(sub_EB22DC(v276) + 32) <= 0.95 || *(double *)(sub_486CB4(v276) + 32) <= 0.95)
      {
        v276 += 480;
        if (v276 == v277) {
          goto LABEL_285;
        }
      }
    }
  }
  uint64_t v309 = (uint64_t)v9[13];
  v310 = v9[14];
  unint64_t v311 = 126 - 2 * __clz(((uint64_t)v310 - v309) >> 5);
  if (v310 == (uint64_t *)v309) {
    uint64_t v312 = 0;
  }
  else {
    uint64_t v312 = v311;
  }
  sub_F35D00(v309, v310, (uint64_t)&v359, v312, 1);
  sub_F35B58((uint64_t *)v9 + 13);
  v315 = (void *)*a7;
  v314 = (void *)a7[1];
  if ((void *)*a7 != v314)
  {
    do
    {
      sub_1073858((uint64_t)v9[3], v315);
      v315 += 60;
    }
    while (v315 != v314);
  }
  *((_DWORD *)v9 + 32) = v14;
  *((_DWORD *)v9 + 33) = sub_FC2A24((uint64_t)(v9[1] + 37), v313);
  if ((a5 & 1) == 0)
  {
    v316 = v9[1];
    *((unsigned char *)v316 + 1394) = 0;
    nullsub_1(v316 + 1);
    sub_CE3520((uint64_t)(v316 + 175));
    sub_CE35E0((uint64_t)(v316 + 185));
  }
  sub_1066038((uint64_t)(v9 + 4));
  v317 = (void **)v348;
  if (v348)
  {
    v318 = v349;
    v319 = v348;
    if (v349 != v348)
    {
      do
        v318 = (void **)sub_4451C0((uint64_t)(v318 - 60));
      while (v318 != v317);
      v319 = v348;
    }
    v349 = v317;
    operator delete(v319);
  }
  if (v357)
  {
    v358 = v357;
    operator delete(v357);
  }
  v320 = v356;
  if (v356)
  {
    do
    {
      v321 = (void *)*v320;
      operator delete(v320);
      v320 = v321;
    }
    while (v321);
  }
  v322 = v355;
  v355 = 0;
  if (v322) {
    operator delete(v322);
  }
  if (v353)
  {
    v354 = v353;
    operator delete(v353);
  }
}

void sub_F4D28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  sub_44106C(&a52);
  sub_44106C(v60);
  sub_3821F8(&a60);
  _Unwind_Resume(a1);
}

void sub_F4D388(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v10 = (void **)a1;
  uint64_t v12 = *(void *)(a1 + 8);
  *(unsigned char *)(v12 + 1394) = 0;
  nullsub_1(v12 + 8);
  sub_CE3520(v12 + 1400);
  sub_CE35E0(v12 + 1480);
  unsigned int v14 = v10 + 17;
  unsigned int v13 = v10[17];
  v10[16] = 0;
  if (v13)
  {
    v10[18] = v13;
    operator delete(v13);
    *unsigned int v14 = 0;
    v10[18] = 0;
    v10[19] = 0;
  }
  *unsigned int v14 = 0;
  v10[18] = 0;
  v10[19] = 0;
  sub_1076C48((uint64_t)&v354, *v10);
  sub_F5C7F8(v353, *v10);
  *a8 = 0;
  a8[1] = 0;
  a8[2] = 0;
  uint64_t v350 = 0;
  v351 = 0;
  uint64_t v352 = 0;
  if (a7 == 0x7FFFFFFFFFFFFFFFLL || !*((unsigned char *)v10 + 84))
  {
    v336 = a8;
    if (!*((_DWORD *)v10 + 18)) {
      goto LABEL_6;
    }
  }
  else
  {
    v336 = a8;
    if (!*((_DWORD *)v10 + 18))
    {
LABEL_6:
      LOBYTE(v330) = 0;
      unsigned int v15 = 0;
      goto LABEL_277;
    }
  }
  v325 = v10 + 17;
  unsigned int v328 = 0;
  BOOL v330 = 0;
  v334 = (char **)(v10 + 13);
  uint64_t v335 = a2;
  char v16 = 1;
  int v17 = 1;
  v340 = v10;
  do
  {
    int v331 = v17;
    if (sub_F047E8(a2))
    {
      uint64_t v18 = (void **)*a8;
      uint64_t v19 = a8[1];
      if (v19 != *a8)
      {
        do
        {
          uint64_t v27 = *(void **)(v19 - 224);
          if (v27)
          {
            *(void *)(v19 - 216) = v27;
            operator delete(v27);
          }
          unint64_t v28 = *(void **)(v19 - 248);
          if (v28)
          {
            *(void *)(v19 - 240) = v28;
            operator delete(v28);
          }
          uint64_t v29 = *(void **)(v19 - 312);
          if (v29)
          {
            *(void *)(v19 - 304) = v29;
            operator delete(v29);
          }
          uint64_t v30 = *(void **)(v19 - 336);
          if (v30)
          {
            *(void *)(v19 - 328) = v30;
            operator delete(v30);
          }
          uint64_t v31 = *(void *)(v19 - 360);
          if (v31)
          {
            uint64_t v32 = *(void *)(v19 - 352);
            uint64_t v33 = *(void **)(v19 - 360);
            if (v32 != v31)
            {
              do
              {
                uint64_t v34 = *(void **)(v32 - 24);
                if (v34)
                {
                  *(void *)(v32 - 16) = v34;
                  operator delete(v34);
                }
                v32 -= 56;
              }
              while (v32 != v31);
              uint64_t v33 = *(void **)(v19 - 360);
            }
            *(void *)(v19 - 352) = v31;
            operator delete(v33);
          }
          long long v35 = *(void **)(v19 - 456);
          if (v35)
          {
            *(void *)(v19 - 448) = v35;
            operator delete(v35);
          }
          uint64_t v36 = (void **)(v19 - 480);
          if (*(char *)(v19 - 457) < 0) {
            operator delete(*v36);
          }
          v19 -= 480;
        }
        while (v36 != v18);
      }
      a8[1] = (uint64_t)v18;
      LOBYTE(v17) = v331;
    }
    if (v17)
    {
      uint64_t v20 = (void **)v350;
      uint64_t v21 = v351;
      if (v351 != v350)
      {
        do
        {
          uint64_t v37 = *(v21 - 28);
          if (v37)
          {
            *(v21 - 27) = v37;
            operator delete(v37);
          }
          unsigned __int8 v38 = *(v21 - 31);
          if (v38)
          {
            *(v21 - 30) = v38;
            operator delete(v38);
          }
          uint64_t v39 = *(v21 - 39);
          if (v39)
          {
            *(v21 - 38) = v39;
            operator delete(v39);
          }
          uint64_t v40 = *(v21 - 42);
          if (v40)
          {
            *(v21 - 41) = v40;
            operator delete(v40);
          }
          uint64_t v41 = (char *)*(v21 - 45);
          if (v41)
          {
            char v42 = (char *)*(v21 - 44);
            BOOL v43 = *(v21 - 45);
            if (v42 != v41)
            {
              do
              {
                unsigned __int8 v44 = (void *)*((void *)v42 - 3);
                if (v44)
                {
                  *((void *)v42 - 2) = v44;
                  operator delete(v44);
                }
                v42 -= 56;
              }
              while (v42 != v41);
              BOOL v43 = *(v21 - 45);
            }
            *(v21 - 44) = v41;
            operator delete(v43);
          }
          long long v45 = *(v21 - 57);
          if (v45)
          {
            *(v21 - 56) = v45;
            operator delete(v45);
          }
          uint64_t v46 = v21 - 60;
          if (*((char *)v21 - 457) < 0) {
            operator delete(*v46);
          }
          v21 -= 60;
        }
        while (v46 != v20);
      }
      v351 = v20;
    }
    sub_F59F70(a2, a6);
    uint64_t v22 = (void *)sub_F047F8(a2);
    unint64_t v23 = v22;
    uint64_t v25 = (char *)v10[18];
    uint64_t v24 = (char *)v10[19];
    if (v25 >= v24)
    {
      uint64_t v47 = (char *)*v325;
      uint64_t v48 = (uint64_t)&v25[-*v325];
      uint64_t v49 = v48 >> 3;
      unint64_t v50 = (v48 >> 3) + 1;
      if (v50 >> 61) {
        sub_2E00();
      }
      uint64_t v51 = v24 - v47;
      if (v51 >> 2 > v50) {
        unint64_t v50 = v51 >> 2;
      }
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v52 = v50;
      }
      if (v52)
      {
        if (v52 >> 61) {
          sub_188D718();
        }
        char v53 = operator new(8 * v52);
        unint64_t v54 = &v53[8 * v49];
        void *v54 = *v23;
        uint64_t v26 = (uint64_t)(v54 + 1);
        if (v25 != v47)
        {
LABEL_68:
          unint64_t v55 = v25 - 8 - v47;
          if (v55 < 0x58) {
            goto LABEL_361;
          }
          if ((unint64_t)(v25 - &v53[v48]) < 0x20) {
            goto LABEL_361;
          }
          uint64_t v56 = (v55 >> 3) + 1;
          uint64_t v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
          BOOL v58 = &v25[-v57];
          unint64_t v54 = (void *)((char *)v54 - v57);
          uint64_t v59 = &v53[8 * v49 - 16];
          uint64_t v60 = v25 - 16;
          uint64_t v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v62 = *(_OWORD *)v60;
            *(v59 - 1) = *((_OWORD *)v60 - 1);
            _OWORD *v59 = v62;
            v59 -= 2;
            v60 -= 32;
            v61 -= 4;
          }
          while (v61);
          uint64_t v25 = v58;
          if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_361:
            do
            {
              uint64_t v63 = *((void *)v25 - 1);
              v25 -= 8;
              *--unint64_t v54 = v63;
            }
            while (v25 != v47);
          }
          uint64_t v25 = (char *)*v325;
          v10[17] = v54;
          v10[18] = (void *)v26;
          v10[19] = &v53[8 * v52];
          if (!v25) {
            goto LABEL_79;
          }
LABEL_78:
          operator delete(v25);
          goto LABEL_79;
        }
      }
      else
      {
        char v53 = 0;
        unint64_t v54 = (void *)(8 * v49);
        *(void *)(8 * v49) = *v23;
        uint64_t v26 = 8 * v49 + 8;
        if (v25 != v47) {
          goto LABEL_68;
        }
      }
      v10[17] = v54;
      v10[18] = (void *)v26;
      v10[19] = &v53[8 * v52];
      if (v25) {
        goto LABEL_78;
      }
    }
    else
    {
      *(void *)uint64_t v25 = *v22;
      uint64_t v26 = (uint64_t)(v25 + 8);
    }
LABEL_79:
    BOOL v65 = (char *)v348;
    char v64 = v349;
    BOOL v66 = v330;
    if (v16) {
      BOOL v66 = v348 != v349;
    }
    BOOL v330 = v66;
    v10[18] = (void *)v26;
    *(_OWORD *)int v345 = 0u;
    *(_OWORD *)v346 = 0u;
    int v347 = 1065353216;
    *(_OWORD *)int v342 = 0u;
    *(_OWORD *)v343 = 0u;
    int v344 = 1065353216;
    v339 = (char *)v64;
    if (v65 == (char *)v64)
    {
      int v68 = 0;
      int v67 = 0;
      long long v236 = v343[0];
      if (v343[0]) {
        goto LABEL_210;
      }
      goto LABEL_271;
    }
    int v67 = 0;
    int v68 = 0;
    do
    {
      uint64_t v69 = sub_37B3A8((uint64_t)*v10);
      int v70 = sub_F41B10((uint64_t)v10, (uint64_t)v65, (uint64_t)v353, v69, a3, a4, (uint64_t)v345, (uint64_t)v342);
      if ((v70 & 0xC) == 0)
      {
        sub_65BD8();
        unint64_t v88 = a8[1];
        unint64_t v89 = a8[2];
        if (v88 < v89)
        {
          long long v90 = *(_OWORD *)v65;
          *(void *)(v88 + 16) = *((void *)v65 + 2);
          *(_OWORD *)unint64_t v88 = v90;
          *((void *)v65 + 1) = 0;
          *((void *)v65 + 2) = 0;
          *(void *)BOOL v65 = 0;
          *(void *)(v88 + 24) = 0;
          *(void *)(v88 + 32) = 0;
          *(void *)(v88 + 40) = 0;
          *(_OWORD *)(v88 + 24) = *(_OWORD *)(v65 + 24);
          *(void *)(v88 + 40) = *((void *)v65 + 5);
          *((void *)v65 + 4) = 0;
          *((void *)v65 + 5) = 0;
          *((void *)v65 + 3) = 0;
          long long v91 = *((_OWORD *)v65 + 4);
          long long v92 = *((_OWORD *)v65 + 5);
          long long v93 = *((_OWORD *)v65 + 6);
          *(void *)(v88 + 110) = *(void *)(v65 + 110);
          *(_OWORD *)(v88 + 80) = v92;
          *(_OWORD *)(v88 + 96) = v93;
          *(_OWORD *)(v88 + 64) = v91;
          *(_OWORD *)(v88 + 48) = *((_OWORD *)v65 + 3);
          *(void *)(v88 + 128) = 0;
          *(void *)(v88 + 136) = 0;
          *(void *)(v88 + 120) = 0;
          *(_OWORD *)(v88 + 120) = *(_OWORD *)(v65 + 120);
          *(void *)(v88 + 136) = *((void *)v65 + 17);
          *((void *)v65 + 15) = 0;
          *((void *)v65 + 16) = 0;
          *((void *)v65 + 17) = 0;
          *(void *)(v88 + 144) = 0;
          *(void *)(v88 + 152) = 0;
          *(void *)(v88 + 160) = 0;
          *(_OWORD *)(v88 + 144) = *((_OWORD *)v65 + 9);
          *(void *)(v88 + 160) = *((void *)v65 + 20);
          *((void *)v65 + 18) = 0;
          *((void *)v65 + 19) = 0;
          *((void *)v65 + 20) = 0;
          *(void *)(v88 + 168) = 0;
          *(void *)(v88 + 176) = 0;
          *(void *)(v88 + 184) = 0;
          *(_OWORD *)(v88 + 168) = *(_OWORD *)(v65 + 168);
          *(void *)(v88 + 184) = *((void *)v65 + 23);
          *((void *)v65 + 21) = 0;
          *((void *)v65 + 22) = 0;
          *((void *)v65 + 23) = 0;
          long long v94 = *((_OWORD *)v65 + 13);
          uint64_t v95 = *((void *)v65 + 28);
          *(_OWORD *)(v88 + 192) = *((_OWORD *)v65 + 12);
          *(_OWORD *)(v88 + 208) = v94;
          *(void *)(v88 + 224) = v95;
          *(void *)(v88 + 232) = 0;
          *(void *)(v88 + 240) = 0;
          *(void *)(v88 + 248) = 0;
          *(_OWORD *)(v88 + 232) = *(_OWORD *)(v65 + 232);
          *(void *)(v88 + 248) = *((void *)v65 + 31);
          *((void *)v65 + 29) = 0;
          *((void *)v65 + 30) = 0;
          *((void *)v65 + 31) = 0;
          *(void *)(v88 + 256) = 0;
          *(void *)(v88 + 264) = 0;
          *(void *)(v88 + 272) = 0;
          *(_OWORD *)(v88 + 256) = *((_OWORD *)v65 + 16);
          *(void *)(v88 + 272) = *((void *)v65 + 34);
          *((void *)v65 + 32) = 0;
          *((void *)v65 + 33) = 0;
          *((void *)v65 + 34) = 0;
          *(_OWORD *)(v88 + 280) = *(_OWORD *)(v65 + 280);
          *(_DWORD *)(v88 + 304) = *((_DWORD *)v65 + 76);
          if (*((_DWORD *)v65 + 76) <= 1u) {
            *(void *)(v88 + 296) = *((void *)v65 + 37);
          }
          *(_OWORD *)(v88 + 312) = *(_OWORD *)(v65 + 312);
          long long v96 = *(_OWORD *)(v65 + 408);
          long long v98 = *(_OWORD *)(v65 + 360);
          long long v97 = *(_OWORD *)(v65 + 376);
          *(_OWORD *)(v88 + 392) = *(_OWORD *)(v65 + 392);
          *(_OWORD *)(v88 + 408) = v96;
          *(_OWORD *)(v88 + 360) = v98;
          *(_OWORD *)(v88 + 376) = v97;
          long long v100 = *(_OWORD *)(v65 + 440);
          long long v99 = *(_OWORD *)(v65 + 456);
          long long v101 = *(_OWORD *)(v65 + 424);
          *(void *)(v88 + 471) = *(void *)(v65 + 471);
          *(_OWORD *)(v88 + 440) = v100;
          *(_OWORD *)(v88 + 456) = v99;
          *(_OWORD *)(v88 + 424) = v101;
          long long v102 = *(_OWORD *)(v65 + 344);
          *(_OWORD *)(v88 + 328) = *(_OWORD *)(v65 + 328);
          *(_OWORD *)(v88 + 344) = v102;
          uint64_t v103 = v88 + 480;
          goto LABEL_84;
        }
        unint64_t v104 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v88 - *a8) >> 5);
        unint64_t v105 = v104 + 1;
        if (v104 + 1 > 0x88888888888888) {
          sub_2E00();
        }
        unint64_t v106 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v89 - *a8) >> 5);
        if (2 * v106 > v105) {
          unint64_t v105 = 2 * v106;
        }
        if (v106 >= 0x44444444444444) {
          unint64_t v107 = 0x88888888888888;
        }
        else {
          unint64_t v107 = v105;
        }
        if (v107)
        {
          if (v107 > 0x88888888888888) {
            sub_188D718();
          }
          BOOL v108 = (char *)operator new(480 * v107);
        }
        else
        {
          BOOL v108 = 0;
        }
        long long v115 = &v108[480 * v104];
        long long v116 = *(_OWORD *)v65;
        *((void *)v115 + 2) = *((void *)v65 + 2);
        *(_OWORD *)long long v115 = v116;
        *((void *)v65 + 1) = 0;
        *((void *)v65 + 2) = 0;
        *(void *)BOOL v65 = 0;
        *((void *)v115 + 3) = 0;
        *((void *)v115 + 4) = 0;
        *((void *)v115 + 5) = 0;
        *(_OWORD *)(v115 + 24) = *(_OWORD *)(v65 + 24);
        *((void *)v115 + 5) = *((void *)v65 + 5);
        *((void *)v65 + 4) = 0;
        *((void *)v65 + 5) = 0;
        *((void *)v65 + 3) = 0;
        long long v117 = *((_OWORD *)v65 + 4);
        long long v118 = *((_OWORD *)v65 + 5);
        long long v119 = *((_OWORD *)v65 + 6);
        *(void *)(v115 + 110) = *(void *)(v65 + 110);
        *((_OWORD *)v115 + 5) = v118;
        *((_OWORD *)v115 + 6) = v119;
        *((_OWORD *)v115 + 4) = v117;
        *((_OWORD *)v115 + 3) = *((_OWORD *)v65 + 3);
        *((void *)v115 + 16) = 0;
        *((void *)v115 + 17) = 0;
        *((void *)v115 + 15) = 0;
        *(_OWORD *)(v115 + 120) = *(_OWORD *)(v65 + 120);
        *((void *)v115 + 17) = *((void *)v65 + 17);
        *((void *)v65 + 15) = 0;
        *((void *)v65 + 16) = 0;
        *((void *)v65 + 17) = 0;
        *((void *)v115 + 18) = 0;
        *((void *)v115 + 19) = 0;
        *((void *)v115 + 20) = 0;
        *((_OWORD *)v115 + 9) = *((_OWORD *)v65 + 9);
        *((void *)v115 + 20) = *((void *)v65 + 20);
        *((void *)v65 + 18) = 0;
        *((void *)v65 + 19) = 0;
        *((void *)v65 + 20) = 0;
        *((void *)v115 + 21) = 0;
        *((void *)v115 + 22) = 0;
        *((void *)v115 + 23) = 0;
        *(_OWORD *)(v115 + 168) = *(_OWORD *)(v65 + 168);
        *((void *)v115 + 23) = *((void *)v65 + 23);
        *((void *)v65 + 21) = 0;
        *((void *)v65 + 22) = 0;
        *((void *)v65 + 23) = 0;
        long long v120 = *((_OWORD *)v65 + 13);
        uint64_t v121 = *((void *)v65 + 28);
        *((_OWORD *)v115 + 12) = *((_OWORD *)v65 + 12);
        *((_OWORD *)v115 + 13) = v120;
        *((void *)v115 + 28) = v121;
        *((void *)v115 + 29) = 0;
        *((void *)v115 + 30) = 0;
        *((void *)v115 + 31) = 0;
        *(_OWORD *)(v115 + 232) = *(_OWORD *)(v65 + 232);
        *((void *)v115 + 31) = *((void *)v65 + 31);
        *((void *)v65 + 29) = 0;
        *((void *)v65 + 30) = 0;
        *((void *)v65 + 31) = 0;
        *((void *)v115 + 32) = 0;
        *((void *)v115 + 33) = 0;
        *((void *)v115 + 34) = 0;
        *((_OWORD *)v115 + 16) = *((_OWORD *)v65 + 16);
        *((void *)v115 + 34) = *((void *)v65 + 34);
        *((void *)v65 + 32) = 0;
        *((void *)v65 + 33) = 0;
        *((void *)v65 + 34) = 0;
        *(_OWORD *)(v115 + 280) = *(_OWORD *)(v65 + 280);
        *((_DWORD *)v115 + 76) = *((_DWORD *)v65 + 76);
        if (*((_DWORD *)v65 + 76) <= 1u) {
          *((void *)v115 + 37) = *((void *)v65 + 37);
        }
        int v122 = &v108[480 * v107];
        long long v123 = &v108[480 * v104];
        *(_OWORD *)(v123 + 312) = *(_OWORD *)(v65 + 312);
        v123 += 328;
        long long v124 = *(_OWORD *)(v65 + 408);
        long long v126 = *(_OWORD *)(v65 + 360);
        long long v125 = *(_OWORD *)(v65 + 376);
        *((_OWORD *)v123 + 4) = *(_OWORD *)(v65 + 392);
        *((_OWORD *)v123 + 5) = v124;
        *((_OWORD *)v123 + 2) = v126;
        *((_OWORD *)v123 + 3) = v125;
        long long v128 = *(_OWORD *)(v65 + 440);
        long long v127 = *(_OWORD *)(v65 + 456);
        long long v129 = *(_OWORD *)(v65 + 424);
        *(void *)(v123 + 143) = *(void *)(v65 + 471);
        *((_OWORD *)v123 + 7) = v128;
        *((_OWORD *)v123 + 8) = v127;
        *((_OWORD *)v123 + 6) = v129;
        long long v130 = *(_OWORD *)(v65 + 344);
        *(_OWORD *)long long v123 = *(_OWORD *)(v65 + 328);
        *((_OWORD *)v123 + 1) = v130;
        uint64_t v103 = (uint64_t)(v115 + 480);
        unint64_t v131 = a8;
        uint64_t v132 = (void **)a8[1];
        uint64_t v133 = (void **)*v131;
        if (v132 == (void **)*v131)
        {
          *unint64_t v131 = (uint64_t)v115;
          v131[1] = v103;
          v131[2] = (uint64_t)v122;
          if (!v132)
          {
LABEL_83:
            a8 = v336;
LABEL_84:
            a8[1] = v103;
            goto LABEL_85;
          }
        }
        else
        {
          uint64_t v134 = 0;
          do
          {
            uint64_t v143 = &v115[v134 * 8];
            uint64_t v144 = (uint64_t)&v115[v134 * 8 - 480];
            uint64_t v145 = &v132[v134];
            uint64_t v146 = (uint64_t)&v132[v134 - 60];
            long long v147 = *(_OWORD *)v146;
            *(void *)(v144 + 16) = v132[v134 - 58];
            *(_OWORD *)uint64_t v144 = v147;
            *(void *)(v146 + 8) = 0;
            *(void *)(v146 + 16) = 0;
            *(void *)uint64_t v146 = 0;
            uint64_t v148 = &v115[v134 * 8 - 456];
            uint64_t v149 = (uint64_t)&v132[v134 - 57];
            *(void *)&v115[v134 * 8 - 448] = 0;
            *(void *)uint64_t v148 = 0;
            *((void *)v148 + 2) = 0;
            *(_OWORD *)uint64_t v148 = *(_OWORD *)v149;
            *(void *)&v115[v134 * 8 - 440] = v132[v134 - 55];
            *(void *)(v149 + 16) = 0;
            v132[v134 - 56] = 0;
            *(void *)uint64_t v149 = 0;
            uint64_t v150 = (uint64_t)&v115[v134 * 8 - 432];
            long long v151 = *(_OWORD *)&v132[v134 - 52];
            long long v152 = *(_OWORD *)&v132[v134 - 50];
            long long v153 = *(_OWORD *)&v132[v134 - 48];
            *(void *)(v150 + 62) = *(void **)((char *)&v132[v134 - 46] - 2);
            *(_OWORD *)(v150 + 32) = v152;
            *(_OWORD *)(v150 + 48) = v153;
            *(_OWORD *)(v150 + 16) = v151;
            *(_OWORD *)uint64_t v150 = *(_OWORD *)&v132[v134 - 54];
            uint64_t v154 = &v115[v134 * 8 - 360];
            uint64_t v155 = (uint64_t)&v132[v134 - 45];
            *((void *)v154 + 1) = 0;
            *((void *)v154 + 2) = 0;
            *(void *)uint64_t v154 = 0;
            *(_OWORD *)uint64_t v154 = *(_OWORD *)v155;
            *(void *)&v115[v134 * 8 - 344] = v132[v134 - 43];
            v132[v134 - 44] = 0;
            *(void *)uint64_t v155 = 0;
            *(void *)(v155 + 16) = 0;
            uint64_t v156 = &v115[v134 * 8 - 336];
            uint64_t v157 = (uint64_t)&v132[v134 - 42];
            *(void *)&v115[v134 * 8 - 328] = 0;
            *(void *)uint64_t v156 = 0;
            *((void *)v156 + 2) = 0;
            *(_OWORD *)uint64_t v156 = *(_OWORD *)v157;
            *(void *)&v115[v134 * 8 - 320] = v132[v134 - 40];
            v132[v134 - 41] = 0;
            *(void *)uint64_t v157 = 0;
            *(void *)(v157 + 16) = 0;
            uint64_t v158 = &v115[v134 * 8 - 312];
            uint64_t v159 = (uint64_t)&v132[v134 - 39];
            *(void *)&v115[v134 * 8 - 304] = 0;
            *(void *)uint64_t v158 = 0;
            *((void *)v158 + 2) = 0;
            *(_OWORD *)uint64_t v158 = *(_OWORD *)v159;
            *(void *)&v115[v134 * 8 - 296] = v132[v134 - 37];
            v132[v134 - 38] = 0;
            *(void *)uint64_t v159 = 0;
            *(void *)(v159 + 16) = 0;
            long long v160 = &v115[v134 * 8 - 288];
            long long v161 = *(_OWORD *)&v132[v134 - 34];
            uint64_t v162 = v132[v134 - 32];
            *(_OWORD *)long long v160 = *(_OWORD *)&v132[v134 - 36];
            *((_OWORD *)v160 + 1) = v161;
            *((void *)v143 - 32) = v162;
            *((void *)v143 - 31) = 0;
            *((void *)v143 - 30) = 0;
            *((void *)v143 - 29) = 0;
            *(_OWORD *)(v143 - 248) = *(_OWORD *)&v132[v134 - 31];
            *((void *)v143 - 29) = v132[v134 - 29];
            *(v145 - 31) = 0;
            *(v145 - 30) = 0;
            *(v145 - 29) = 0;
            *((void *)v143 - 28) = 0;
            *((void *)v143 - 27) = 0;
            *((void *)v143 - 26) = 0;
            *((_OWORD *)v143 - 14) = *(_OWORD *)&v132[v134 - 28];
            *((void *)v143 - 26) = v132[v134 - 26];
            *(v145 - 28) = 0;
            *(v145 - 27) = 0;
            *(v145 - 26) = 0;
            *(_OWORD *)(v143 - 200) = *(_OWORD *)&v132[v134 - 25];
            *((_DWORD *)v143 - 44) = v132[v134 - 22];
            if (LODWORD(v132[v134 - 22]) < 2) {
              *((void *)v143 - 23) = *(v145 - 23);
            }
            long long v135 = &v115[v134 * 8];
            *(_OWORD *)(v135 - 168) = *(_OWORD *)&v132[v134 - 21];
            long long v136 = *(_OWORD *)&v132[v134 - 13];
            long long v137 = *(_OWORD *)&v132[v134 - 11];
            long long v138 = *(_OWORD *)&v132[v134 - 9];
            *(_OWORD *)(v135 - 120) = *(_OWORD *)&v132[v134 - 15];
            *(_OWORD *)(v135 - 72) = v138;
            *(_OWORD *)(v135 - 88) = v137;
            *(_OWORD *)(v135 - 104) = v136;
            long long v139 = *(_OWORD *)&v132[v134 - 5];
            long long v140 = *(_OWORD *)&v132[v134 - 3];
            uint64_t v141 = *(uint64_t *)((char *)&v132[v134 - 1] - 1);
            *(_OWORD *)(v135 - 56) = *(_OWORD *)&v132[v134 - 7];
            *(void *)(v135 - 9) = v141;
            *(_OWORD *)(v135 - 24) = v140;
            *(_OWORD *)(v135 - 40) = v139;
            long long v142 = *(_OWORD *)&v132[v134 - 19];
            *(_OWORD *)(v135 - 136) = *(_OWORD *)&v132[v134 - 17];
            *(_OWORD *)(v135 - 152) = v142;
            v134 -= 60;
          }
          while (&v132[v134] != v133);
          uint64_t v132 = (void **)*v336;
          char v163 = (void **)v336[1];
          uint64_t *v336 = (uint64_t)&v115[v134 * 8];
          v336[1] = v103;
          v336[2] = (uint64_t)v122;
          if (v163 != v132)
          {
            v332 = v115 + 480;
            do
            {
              uint64_t v164 = *(v163 - 28);
              if (v164)
              {
                *(v163 - 27) = v164;
                operator delete(v164);
              }
              int v165 = *(v163 - 31);
              if (v165)
              {
                *(v163 - 30) = v165;
                operator delete(v165);
              }
              int v166 = *(v163 - 39);
              if (v166)
              {
                *(v163 - 38) = v166;
                operator delete(v166);
              }
              int v167 = *(v163 - 42);
              if (v167)
              {
                *(v163 - 41) = v167;
                operator delete(v167);
              }
              unint64_t v168 = (char *)*(v163 - 45);
              if (v168)
              {
                uint64_t v169 = (char *)*(v163 - 44);
                uint64_t v170 = *(v163 - 45);
                if (v169 != v168)
                {
                  do
                  {
                    int v171 = (void *)*((void *)v169 - 3);
                    if (v171)
                    {
                      *((void *)v169 - 2) = v171;
                      operator delete(v171);
                    }
                    v169 -= 56;
                  }
                  while (v169 != v168);
                  uint64_t v170 = *(v163 - 45);
                }
                *(v163 - 44) = v168;
                operator delete(v170);
                uint64_t v10 = v340;
              }
              uint64_t v172 = *(v163 - 57);
              if (v172)
              {
                *(v163 - 56) = v172;
                operator delete(v172);
              }
              uint64_t v173 = v163 - 60;
              if (*((char *)v163 - 457) < 0) {
                operator delete(*v173);
              }
              v163 -= 60;
            }
            while (v173 != v132);
            uint64_t v103 = (uint64_t)v332;
          }
          if (!v132) {
            goto LABEL_83;
          }
        }
        uint64_t v174 = v103;
        operator delete(v132);
        uint64_t v103 = v174;
        goto LABEL_83;
      }
      if (!sub_F047E8(v335)) {
        goto LABEL_85;
      }
      sub_EB1D94(&v361);
      unint64_t v71 = a8;
      unint64_t v72 = (void **)a8[1];
      unint64_t v73 = v71[2];
      if ((unint64_t)v72 < v73)
      {
        long long v74 = v361;
        v72[2] = v362;
        v72[3] = 0;
        *(_OWORD *)unint64_t v72 = v74;
        v362 = 0;
        long long v361 = 0uLL;
        v72[4] = 0;
        v72[5] = 0;
        *(_OWORD *)(v72 + 3) = v363;
        v72[5] = v364;
        long long v363 = 0uLL;
        long long v364 = 0;
        *((_OWORD *)v72 + 3) = v365;
        long long v75 = v366;
        long long v76 = v367;
        long long v77 = *(_OWORD *)v368;
        *(void **)((char *)v72 + 110) = *(void **)&v368[14];
        *((_OWORD *)v72 + 5) = v76;
        *((_OWORD *)v72 + 6) = v77;
        *((_OWORD *)v72 + 4) = v75;
        v72[15] = 0;
        v72[16] = 0;
        v72[17] = 0;
        v72[18] = 0;
        *(_OWORD *)(v72 + 15) = v369;
        v72[17] = v370;
        long long v369 = 0uLL;
        v370 = 0;
        v72[19] = 0;
        v72[20] = 0;
        *((_OWORD *)v72 + 9) = v371;
        long long v371 = 0uLL;
        v72[20] = v372;
        v72[21] = 0;
        v372 = 0;
        v72[22] = 0;
        v72[23] = 0;
        *(_OWORD *)(v72 + 21) = v373;
        v72[23] = v374;
        long long v373 = 0uLL;
        long long v374 = 0;
        long long v78 = v376;
        long long v79 = v377;
        *((_OWORD *)v72 + 12) = v375;
        *((_OWORD *)v72 + 13) = v78;
        v72[28] = v79;
        v72[29] = 0;
        v72[30] = 0;
        v72[31] = 0;
        *(_OWORD *)(v72 + 29) = v378;
        long long v378 = 0uLL;
        v72[31] = v379;
        v72[32] = 0;
        v379 = 0;
        v72[33] = 0;
        v72[34] = 0;
        *((_OWORD *)v72 + 16) = __p;
        v72[34] = v381;
        long long __p = 0uLL;
        v381 = 0;
        *(_OWORD *)(v72 + 35) = v382;
        *((_DWORD *)v72 + 76) = v384;
        if (v384 <= 1) {
          v72[37] = v383;
        }
        *(_OWORD *)(v72 + 39) = v385;
        long long v80 = v391;
        long long v82 = v388;
        long long v81 = v389;
        *(_OWORD *)(v72 + 49) = v390;
        *(_OWORD *)(v72 + 51) = v80;
        *(_OWORD *)(v72 + 45) = v82;
        *(_OWORD *)(v72 + 47) = v81;
        long long v84 = v393;
        long long v83 = *(_OWORD *)v394;
        long long v85 = v392;
        *(void **)((char *)v72 + 471) = *(void **)&v394[15];
        *(_OWORD *)(v72 + 55) = v84;
        *(_OWORD *)(v72 + 57) = v83;
        *(_OWORD *)(v72 + 53) = v85;
        long long v86 = v387;
        *(_OWORD *)(v72 + 41) = v386;
        *(_OWORD *)(v72 + 43) = v86;
        unint64_t v87 = (char *)(v72 + 60);
        goto LABEL_186;
      }
      unint64_t v109 = (void **)*v71;
      unint64_t v110 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v72 - *v71) >> 5);
      unint64_t v111 = v110 + 1;
      if (v110 + 1 > 0x88888888888888) {
        sub_2E00();
      }
      unint64_t v112 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v73 - (void)v109) >> 5);
      if (2 * v112 > v111) {
        unint64_t v111 = 2 * v112;
      }
      if (v112 >= 0x44444444444444) {
        unint64_t v113 = 0x88888888888888;
      }
      else {
        unint64_t v113 = v111;
      }
      if (v113)
      {
        if (v113 > 0x88888888888888) {
          sub_188D718();
        }
        unsigned int v114 = (char *)operator new(480 * v113);
      }
      else
      {
        unsigned int v114 = 0;
      }
      long long v175 = &v114[480 * v110];
      *(_OWORD *)long long v175 = v361;
      long long v176 = v364;
      *((void *)v175 + 2) = v362;
      v362 = 0;
      long long v361 = 0uLL;
      *(_OWORD *)(v175 + 24) = v363;
      *((void *)v175 + 5) = v176;
      long long v364 = 0;
      long long v363 = 0uLL;
      long long v177 = v365;
      long long v178 = v366;
      long long v179 = v367;
      long long v180 = *(_OWORD *)v368;
      *(void *)(v175 + 110) = *(void *)&v368[14];
      *((_OWORD *)v175 + 5) = v179;
      *((_OWORD *)v175 + 6) = v180;
      *((_OWORD *)v175 + 3) = v177;
      *((_OWORD *)v175 + 4) = v178;
      *((void *)v175 + 16) = 0;
      *((void *)v175 + 17) = 0;
      *(_OWORD *)(v175 + 120) = v369;
      *((void *)v175 + 17) = v370;
      long long v369 = 0uLL;
      v370 = 0;
      *((void *)v175 + 19) = 0;
      *((void *)v175 + 20) = 0;
      *((_OWORD *)v175 + 9) = v371;
      long long v181 = v374;
      *((void *)v175 + 20) = v372;
      long long v371 = 0uLL;
      v372 = 0;
      *((void *)v175 + 22) = 0;
      *((void *)v175 + 23) = 0;
      *(_OWORD *)(v175 + 168) = v373;
      *((void *)v175 + 23) = v181;
      long long v373 = 0uLL;
      long long v374 = 0;
      long long v182 = v375;
      long long v183 = v376;
      *((void *)v175 + 28) = v377;
      *((_OWORD *)v175 + 12) = v182;
      *((_OWORD *)v175 + 13) = v183;
      *((void *)v175 + 30) = 0;
      *((void *)v175 + 31) = 0;
      *(_OWORD *)(v175 + 232) = v378;
      *((void *)v175 + 31) = v379;
      long long v378 = 0uLL;
      v379 = 0;
      *((void *)v175 + 33) = 0;
      *((void *)v175 + 34) = 0;
      *((_OWORD *)v175 + 16) = __p;
      *((void *)v175 + 34) = v381;
      long long __p = 0uLL;
      v381 = 0;
      *(_OWORD *)(v175 + 280) = v382;
      LODWORD(v181) = v384;
      *((_DWORD *)v175 + 76) = v384;
      if (v181 <= 1) {
        *((void *)v175 + 37) = v383;
      }
      long long v184 = &v114[480 * v110];
      *(_OWORD *)(v184 + 312) = v385;
      long long v185 = v393;
      long long v186 = &v114[480 * v113];
      v184 += 328;
      *((_OWORD *)v184 + 6) = v392;
      *((_OWORD *)v184 + 7) = v185;
      *((_OWORD *)v184 + 8) = *(_OWORD *)v394;
      *(void *)(v184 + 143) = *(void *)&v394[15];
      long long v187 = v389;
      *((_OWORD *)v184 + 2) = v388;
      *((_OWORD *)v184 + 3) = v187;
      long long v188 = v391;
      *((_OWORD *)v184 + 4) = v390;
      *((_OWORD *)v184 + 5) = v188;
      long long v189 = v387;
      unint64_t v87 = v175 + 480;
      *(_OWORD *)long long v184 = v386;
      *((_OWORD *)v184 + 1) = v189;
      if (v72 == v109)
      {
        uint64_t *v336 = (uint64_t)v175;
        v336[1] = (uint64_t)v87;
        v336[2] = (uint64_t)v186;
        if (!v72) {
          goto LABEL_186;
        }
      }
      else
      {
        uint64_t v190 = 0;
        do
        {
          uint64_t v199 = &v175[v190 * 8];
          uint64_t v200 = (uint64_t)&v175[v190 * 8 - 480];
          uint64_t v201 = &v72[v190];
          uint64_t v202 = (uint64_t)&v72[v190 - 60];
          long long v203 = *(_OWORD *)v202;
          *(void *)(v200 + 16) = v72[v190 - 58];
          *(_OWORD *)uint64_t v200 = v203;
          *(void *)(v202 + 8) = 0;
          *(void *)(v202 + 16) = 0;
          *(void *)uint64_t v202 = 0;
          uint64_t v204 = &v175[v190 * 8 - 456];
          uint64_t v205 = (uint64_t)&v72[v190 - 57];
          *(void *)&v175[v190 * 8 - 448] = 0;
          *(void *)uint64_t v204 = 0;
          *((void *)v204 + 2) = 0;
          *(_OWORD *)uint64_t v204 = *(_OWORD *)v205;
          *(void *)&v175[v190 * 8 - 440] = v72[v190 - 55];
          *(void *)(v205 + 16) = 0;
          v72[v190 - 56] = 0;
          *(void *)uint64_t v205 = 0;
          uint64_t v206 = (uint64_t)&v175[v190 * 8 - 432];
          long long v207 = *(_OWORD *)&v72[v190 - 52];
          long long v208 = *(_OWORD *)&v72[v190 - 50];
          long long v209 = *(_OWORD *)&v72[v190 - 48];
          *(void *)(v206 + 62) = *(void **)((char *)&v72[v190 - 46] - 2);
          *(_OWORD *)(v206 + 32) = v208;
          *(_OWORD *)(v206 + 48) = v209;
          *(_OWORD *)(v206 + 16) = v207;
          *(_OWORD *)uint64_t v206 = *(_OWORD *)&v72[v190 - 54];
          uint64_t v210 = &v175[v190 * 8 - 360];
          uint64_t v211 = (uint64_t)&v72[v190 - 45];
          *((void *)v210 + 1) = 0;
          *((void *)v210 + 2) = 0;
          *(void *)uint64_t v210 = 0;
          *(_OWORD *)uint64_t v210 = *(_OWORD *)v211;
          *(void *)&v175[v190 * 8 - 344] = v72[v190 - 43];
          v72[v190 - 44] = 0;
          *(void *)uint64_t v211 = 0;
          *(void *)(v211 + 16) = 0;
          uint64_t v212 = &v175[v190 * 8 - 336];
          uint64_t v213 = (uint64_t)&v72[v190 - 42];
          *(void *)&v175[v190 * 8 - 328] = 0;
          *(void *)uint64_t v212 = 0;
          *((void *)v212 + 2) = 0;
          *(_OWORD *)uint64_t v212 = *(_OWORD *)v213;
          *(void *)&v175[v190 * 8 - 320] = v72[v190 - 40];
          v72[v190 - 41] = 0;
          *(void *)uint64_t v213 = 0;
          *(void *)(v213 + 16) = 0;
          uint64_t v214 = &v175[v190 * 8 - 312];
          uint64_t v215 = (uint64_t)&v72[v190 - 39];
          *(void *)&v175[v190 * 8 - 304] = 0;
          *(void *)uint64_t v214 = 0;
          *((void *)v214 + 2) = 0;
          *(_OWORD *)uint64_t v214 = *(_OWORD *)v215;
          *(void *)&v175[v190 * 8 - 296] = v72[v190 - 37];
          v72[v190 - 38] = 0;
          *(void *)uint64_t v215 = 0;
          *(void *)(v215 + 16) = 0;
          long long v216 = &v175[v190 * 8 - 288];
          long long v217 = *(_OWORD *)&v72[v190 - 34];
          unint64_t v218 = v72[v190 - 32];
          *(_OWORD *)long long v216 = *(_OWORD *)&v72[v190 - 36];
          *((_OWORD *)v216 + 1) = v217;
          *((void *)v199 - 32) = v218;
          *((void *)v199 - 31) = 0;
          *((void *)v199 - 30) = 0;
          *((void *)v199 - 29) = 0;
          *(_OWORD *)(v199 - 248) = *(_OWORD *)&v72[v190 - 31];
          *((void *)v199 - 29) = v72[v190 - 29];
          *(v201 - 31) = 0;
          *(v201 - 30) = 0;
          *(v201 - 29) = 0;
          *((void *)v199 - 28) = 0;
          *((void *)v199 - 27) = 0;
          *((void *)v199 - 26) = 0;
          *((_OWORD *)v199 - 14) = *(_OWORD *)&v72[v190 - 28];
          *((void *)v199 - 26) = v72[v190 - 26];
          *(v201 - 28) = 0;
          *(v201 - 27) = 0;
          *(v201 - 26) = 0;
          *(_OWORD *)(v199 - 200) = *(_OWORD *)&v72[v190 - 25];
          *((_DWORD *)v199 - 44) = v72[v190 - 22];
          if (LODWORD(v72[v190 - 22]) < 2) {
            *((void *)v199 - 23) = *(v201 - 23);
          }
          long long v191 = &v175[v190 * 8];
          *(_OWORD *)(v191 - 168) = *(_OWORD *)&v72[v190 - 21];
          long long v192 = *(_OWORD *)&v72[v190 - 13];
          long long v193 = *(_OWORD *)&v72[v190 - 11];
          long long v194 = *(_OWORD *)&v72[v190 - 9];
          *(_OWORD *)(v191 - 120) = *(_OWORD *)&v72[v190 - 15];
          *(_OWORD *)(v191 - 72) = v194;
          *(_OWORD *)(v191 - 88) = v193;
          *(_OWORD *)(v191 - 104) = v192;
          long long v195 = *(_OWORD *)&v72[v190 - 5];
          long long v196 = *(_OWORD *)&v72[v190 - 3];
          uint64_t v197 = *(uint64_t *)((char *)&v72[v190 - 1] - 1);
          *(_OWORD *)(v191 - 56) = *(_OWORD *)&v72[v190 - 7];
          *(void *)(v191 - 9) = v197;
          *(_OWORD *)(v191 - 24) = v196;
          *(_OWORD *)(v191 - 40) = v195;
          long long v198 = *(_OWORD *)&v72[v190 - 19];
          *(_OWORD *)(v191 - 136) = *(_OWORD *)&v72[v190 - 17];
          *(_OWORD *)(v191 - 152) = v198;
          v190 -= 60;
        }
        while (&v72[v190] != v109);
        unint64_t v72 = (void **)*v336;
        v219 = (void **)v336[1];
        uint64_t *v336 = (uint64_t)&v175[v190 * 8];
        v336[1] = (uint64_t)v87;
        v336[2] = (uint64_t)v186;
        if (v219 != v72)
        {
          uint64_t v333 = v175 + 480;
          do
          {
            unint64_t v220 = *(v219 - 28);
            if (v220)
            {
              *(v219 - 27) = v220;
              operator delete(v220);
            }
            char v221 = *(v219 - 31);
            if (v221)
            {
              *(v219 - 30) = v221;
              operator delete(v221);
            }
            unint64_t v222 = *(v219 - 39);
            if (v222)
            {
              *(v219 - 38) = v222;
              operator delete(v222);
            }
            long long v223 = *(v219 - 42);
            if (v223)
            {
              *(v219 - 41) = v223;
              operator delete(v223);
            }
            uint64_t v224 = (char *)*(v219 - 45);
            if (v224)
            {
              long long v225 = (char *)*(v219 - 44);
              uint64_t v226 = *(v219 - 45);
              if (v225 != v224)
              {
                do
                {
                  long long v227 = (void *)*((void *)v225 - 3);
                  if (v227)
                  {
                    *((void *)v225 - 2) = v227;
                    operator delete(v227);
                  }
                  v225 -= 56;
                }
                while (v225 != v224);
                uint64_t v226 = *(v219 - 45);
              }
              *(v219 - 44) = v224;
              operator delete(v226);
              uint64_t v10 = v340;
            }
            long long v228 = *(v219 - 57);
            if (v228)
            {
              *(v219 - 56) = v228;
              operator delete(v228);
            }
            long long v229 = v219 - 60;
            if (*((char *)v219 - 457) < 0) {
              operator delete(*v229);
            }
            v219 -= 60;
          }
          while (v229 != v72);
          unint64_t v87 = v333;
        }
        if (!v72) {
          goto LABEL_186;
        }
      }
      uint64_t v230 = v87;
      operator delete(v72);
      unint64_t v87 = v230;
LABEL_186:
      a8 = v336;
      v336[1] = (uint64_t)v87;
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if ((void)v378)
      {
        *((void *)&v378 + 1) = v378;
        operator delete((void *)v378);
      }
      if ((void)v373)
      {
        *((void *)&v373 + 1) = v373;
        operator delete((void *)v373);
      }
      if ((void)v371)
      {
        *((void *)&v371 + 1) = v371;
        operator delete((void *)v371);
      }
      uint64_t v231 = v369;
      if ((void)v369)
      {
        uint64_t v232 = *((void *)&v369 + 1);
        uint64_t v233 = (void *)v369;
        if (*((void *)&v369 + 1) != (void)v369)
        {
          do
          {
            long long v234 = *(void **)(v232 - 24);
            if (v234)
            {
              *(void *)(v232 - 16) = v234;
              operator delete(v234);
            }
            v232 -= 56;
          }
          while (v232 != v231);
          uint64_t v233 = (void *)v369;
        }
        *((void *)&v369 + 1) = v231;
        operator delete(v233);
      }
      if ((void)v363)
      {
        *((void *)&v363 + 1) = v363;
        operator delete((void *)v363);
      }
      if (SHIBYTE(v362) < 0) {
        operator delete((void *)v361);
      }
LABEL_85:
      v67 |= v70;
      v68 |= (v70 & 2) >> 1;
      v65 += 480;
    }
    while (v65 != v339);
    uint64_t v235 = (char *)v346[0];
    if (v346[0])
    {
      do
      {
        uint64_t v261 = v10[1];
        *((unsigned char *)v261 + 1394) = 1;
        uint64_t v262 = (uint64_t)(v261 + 175);
        sub_F57BA4((uint64_t)(v261 + 175), 1);
        sub_F57E78(v262, (uint64_t *)v235 + 2, (uint64_t)&v361);
        int v263 = v363;
        uint64_t v265 = (char *)v10[14];
        v264 = (char *)v10[15];
        if (v265 >= v264)
        {
          uint64_t v266 = (v265 - *v334) >> 5;
          if ((unint64_t)(v266 + 1) >> 59) {
            sub_2E00();
          }
          uint64_t v267 = v264 - *v334;
          uint64_t v268 = v267 >> 4;
          if (v267 >> 4 <= (unint64_t)(v266 + 1)) {
            uint64_t v268 = v266 + 1;
          }
          if ((unint64_t)v267 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v269 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v269 = v268;
          }
          if (v269)
          {
            if (v269 >> 59) {
              sub_188D718();
            }
            v270 = (__n128 *)operator new(32 * v269);
          }
          else
          {
            v270 = 0;
          }
          sub_45E5B0(&v270[2 * v266], (__n128 *)(v235 + 24));
          uint64_t v272 = (char *)v10[13];
          long long v259 = (char *)v10[14];
          if (v259 == v272)
          {
            char v260 = v271 + 4;
            v10[13] = v271;
            v10[14] = v271 + 4;
            v10[15] = v270[2 * v269].n128_u64;
            if (!v259) {
              goto LABEL_245;
            }
          }
          else
          {
            uint64_t v273 = 0;
            do
            {
              v274 = &v271[v273];
              unsigned int v275 = &v259[v273 * 8];
              LODWORD(v271[v273 - 2]) = *(_DWORD *)&v259[v273 * 8 - 16];
              if (*(_DWORD *)&v259[v273 * 8 - 16] <= 1u) {
                *((_OWORD *)v274 - 2) = *((_OWORD *)v275 - 2);
              }
              *((unsigned char *)v274 - 8) = *(v275 - 8);
              v273 -= 4;
            }
            while (&v259[v273 * 8] != v272);
            long long v259 = *v334;
            char v260 = v271 + 4;
            v10[13] = &v271[v273];
            v10[14] = v271 + 4;
            v10[15] = v270[2 * v269].n128_u64;
            if (!v259) {
              goto LABEL_245;
            }
          }
          operator delete(v259);
        }
        else
        {
          sub_45E5B0((__n128 *)v10[14], (__n128 *)(v235 + 24));
          char v260 = v265 + 32;
          v10[14] = v265 + 32;
        }
LABEL_245:
        v10[14] = v260;
        v67 |= v263 != 0;
        uint64_t v235 = *(char **)v235;
      }
      while (v235);
    }
    long long v236 = v343[0];
    if (!v343[0])
    {
LABEL_271:
      BOOL v240 = v350 == v351;
      goto LABEL_213;
    }
    do
    {
LABEL_210:
      uint64_t v237 = v10[1];
      *((unsigned char *)v237 + 1394) = 1;
      uint64_t v238 = (uint64_t)(v237 + 175);
      sub_F57BA4((uint64_t)(v237 + 175), 1);
      sub_F57E78(v238, v236 + 2, (uint64_t)&v361);
      v67 |= (_BYTE)v363 != 0;
      long long v236 = (void *)*v236;
    }
    while (v236);
    BOOL v239 = v343[0];
    BOOL v240 = v350 == v351;
    if (v343[0])
    {
      do
      {
        long long v241 = (void *)*v239;
        operator delete(v239);
        BOOL v239 = v241;
      }
      while (v241);
    }
LABEL_213:
    uint64_t v242 = v342[0];
    v342[0] = 0;
    if (v242) {
      operator delete(v242);
    }
    long long v243 = v346[0];
    if (v346[0])
    {
      do
      {
        uint64_t v244 = (void *)*v243;
        operator delete(v243);
        long long v243 = v244;
      }
      while (v244);
    }
    unsigned int v245 = v345[0];
    v345[0] = 0;
    if (v245) {
      operator delete(v245);
    }
    long long v246 = (void **)v348;
    if (v348)
    {
      long long v247 = v349;
      long long v248 = v348;
      if (v349 != v348)
      {
        do
        {
          long long v249 = *(v247 - 28);
          if (v249)
          {
            *(v247 - 27) = v249;
            operator delete(v249);
          }
          long long v250 = *(v247 - 31);
          if (v250)
          {
            *(v247 - 30) = v250;
            operator delete(v250);
          }
          long long v251 = *(v247 - 39);
          if (v251)
          {
            *(v247 - 38) = v251;
            operator delete(v251);
          }
          long long v252 = *(v247 - 42);
          if (v252)
          {
            *(v247 - 41) = v252;
            operator delete(v252);
          }
          long long v253 = (char *)*(v247 - 45);
          if (v253)
          {
            long long v254 = (char *)*(v247 - 44);
            long long v255 = *(v247 - 45);
            if (v254 != v253)
            {
              do
              {
                long long v256 = (void *)*((void *)v254 - 3);
                if (v256)
                {
                  *((void *)v254 - 2) = v256;
                  operator delete(v256);
                }
                v254 -= 56;
              }
              while (v254 != v253);
              long long v255 = *(v247 - 45);
            }
            *(v247 - 44) = v253;
            operator delete(v255);
          }
          long long v257 = *(v247 - 57);
          if (v257)
          {
            *(v247 - 56) = v257;
            operator delete(v257);
          }
          char v258 = v247 - 60;
          uint64_t v10 = v340;
          if (*((char *)v247 - 457) < 0) {
            operator delete(*v258);
          }
          v247 -= 60;
        }
        while (v258 != v246);
        long long v248 = v348;
      }
      v349 = v246;
      operator delete(v248);
    }
    unsigned int v276 = *((_DWORD *)v10 + 18);
    if (((v67 | v68) & 1) == 0)
    {
      a2 = v335;
      break;
    }
    char v16 = 0;
    int v17 = (v67 | v240) & v331;
    ++v328;
    a2 = v335;
  }
  while (v328 < v276);
  unsigned int v15 = v328;
  unsigned int v14 = v325;
  if (v328 >= v276 && v350 != v351 && &v350 != (void **)a8) {
    sub_D5D9A0(a8, (uint64_t)v350, (uint64_t)v351, 0xEEEEEEEEEEEEEEEFLL * (((char *)v351 - (unsigned char *)v350) >> 5));
  }
LABEL_277:
  if (!(sub_F047F0(a2) & 1 | !v330) && *((unsigned char *)v10[3] + 8080))
  {
    uint64_t v277 = *a8;
    uint64_t v278 = a8[1];
    if (*a8 == v278)
    {
LABEL_285:
      if (sub_F047E8(a2))
      {
        uint64_t v280 = *a8;
        uint64_t v279 = a8[1];
        if (v279 != *a8)
        {
          do
            uint64_t v279 = sub_4451C0(v279 - 480);
          while (v279 != v280);
        }
        a8[1] = v280;
      }
      v281 = v10[1];
      *((unsigned char *)v281 + 1394) = 0;
      nullsub_1(v281 + 1);
      sub_CE3520((uint64_t)(v281 + 175));
      sub_CE35E0((uint64_t)(v281 + 185));
      unsigned int v326 = (char **)v14;
      unsigned int v329 = v15;
      sub_F59F70(a2, a6);
      v282 = (void *)sub_F047F8(a2);
      v283 = v282;
      v285 = (char *)v10[18];
      v284 = (char *)v10[19];
      if (v285 >= v284)
      {
        uint64_t v287 = (char *)*v14;
        uint64_t v288 = (uint64_t)&v285[-*v14];
        uint64_t v289 = v288 >> 3;
        unint64_t v290 = (v288 >> 3) + 1;
        if (v290 >> 61) {
          sub_2E00();
        }
        uint64_t v291 = v284 - v287;
        if (v291 >> 2 > v290) {
          unint64_t v290 = v291 >> 2;
        }
        if ((unint64_t)v291 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v292 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v292 = v290;
        }
        if (v292)
        {
          if (v292 >> 61) {
            sub_188D718();
          }
          v293 = operator new(8 * v292);
        }
        else
        {
          v293 = 0;
        }
        unint64_t v294 = &v293[8 * v289];
        *unint64_t v294 = *v283;
        v286 = v294 + 1;
        if (v285 != v287)
        {
          unint64_t v295 = v285 - v287 - 8;
          if (v295 < 0x58) {
            goto LABEL_362;
          }
          if ((unint64_t)(v285 - v293 - v288) < 0x20) {
            goto LABEL_362;
          }
          uint64_t v296 = (v295 >> 3) + 1;
          uint64_t v297 = 8 * (v296 & 0x3FFFFFFFFFFFFFFCLL);
          v298 = &v285[-v297];
          unint64_t v294 = (void *)((char *)v294 - v297);
          v299 = &v293[8 * v289 - 16];
          uint64_t v300 = v285 - 16;
          uint64_t v301 = v296 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v302 = *(_OWORD *)v300;
            *(v299 - 1) = *((_OWORD *)v300 - 1);
            _OWORD *v299 = v302;
            v299 -= 2;
            v300 -= 32;
            v301 -= 4;
          }
          while (v301);
          v285 = v298;
          if (v296 != (v296 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_362:
            do
            {
              uint64_t v303 = *((void *)v285 - 1);
              v285 -= 8;
              *--unint64_t v294 = v303;
            }
            while (v285 != v287);
          }
          v285 = *v326;
        }
        v10[17] = v294;
        v10[18] = v286;
        v10[19] = &v293[8 * v292];
        unsigned int v15 = v329;
        if (v285) {
          operator delete(v285);
        }
      }
      else
      {
        *(void *)v285 = *v282;
        v286 = v285 + 8;
        unsigned int v15 = v329;
      }
      v10[18] = v286;
      uint64_t v305 = (long long *)*((void *)&v361 + 1);
      v304 = (long long *)v361;
      if ((void)v361 != *((void *)&v361 + 1))
      {
        do
        {
          sub_1073620((uint64_t)v10[3], v304, v341);
          if (v341[0])
          {
            v341[1] = v341[0];
            operator delete(v341[0]);
          }
          if (!sub_EB2EC4((uint64_t)v304) || sub_F047E8(a2))
          {
            unint64_t v307 = a8[1];
            if (v307 < a8[2])
            {
              sub_CE3918((uint64_t)(a8 + 2), a8[1], v304);
              uint64_t v306 = v307 + 480;
            }
            else
            {
              uint64_t v306 = sub_CE37BC(a8, v304);
            }
            a8[1] = v306;
          }
          v304 += 30;
        }
        while (v304 != v305);
        v304 = (long long *)v361;
        unsigned int v15 = v329;
      }
      if (v304)
      {
        uint64_t v308 = *((void *)&v361 + 1);
        uint64_t v309 = v304;
        if (*((long long **)&v361 + 1) != v304)
        {
          do
            uint64_t v308 = sub_4451C0(v308 - 480);
          while ((long long *)v308 != v304);
          uint64_t v309 = (long long *)v361;
        }
        *((void *)&v361 + 1) = v304;
        operator delete(v309);
      }
    }
    else
    {
      while (*(double *)(sub_EB22DC(v277) + 32) <= 0.95 || *(double *)(sub_486CB4(v277) + 32) <= 0.95)
      {
        v277 += 480;
        if (v277 == v278) {
          goto LABEL_285;
        }
      }
    }
  }
  uint64_t v310 = (uint64_t)v10[13];
  unint64_t v311 = v10[14];
  unint64_t v312 = 126 - 2 * __clz(((uint64_t)v311 - v310) >> 5);
  if (v311 == (uint64_t *)v310) {
    uint64_t v313 = 0;
  }
  else {
    uint64_t v313 = v312;
  }
  sub_F35D00(v310, v311, (uint64_t)&v361, v313, 1);
  sub_F35B58((uint64_t *)v10 + 13);
  v316 = (void *)*a8;
  v315 = (void *)a8[1];
  if ((void *)*a8 != v315)
  {
    do
    {
      sub_1073858((uint64_t)v10[3], v316);
      v316 += 60;
    }
    while (v316 != v315);
  }
  *((_DWORD *)v10 + 32) = v15;
  *((_DWORD *)v10 + 33) = sub_FC2A24((uint64_t)(v10[1] + 37), v314);
  if ((a5 & 1) == 0)
  {
    v317 = v10[1];
    *((unsigned char *)v317 + 1394) = 0;
    nullsub_1(v317 + 1);
    sub_CE3520((uint64_t)(v317 + 175));
    sub_CE35E0((uint64_t)(v317 + 185));
  }
  sub_1066038((uint64_t)(v10 + 4));
  v318 = (void **)v350;
  if (v350)
  {
    v319 = v351;
    v320 = v350;
    if (v351 != v350)
    {
      do
        v319 = (void **)sub_4451C0((uint64_t)(v319 - 60));
      while (v319 != v318);
      v320 = v350;
    }
    v351 = v318;
    operator delete(v320);
  }
  if (v359)
  {
    v360 = v359;
    operator delete(v359);
  }
  v321 = v358;
  if (v358)
  {
    do
    {
      v322 = (void *)*v321;
      operator delete(v321);
      v321 = v322;
    }
    while (v322);
  }
  v323 = v357;
  v357 = 0;
  if (v323) {
    operator delete(v323);
  }
  if (v355)
  {
    v356 = v355;
    operator delete(v355);
  }
}

void sub_F4F104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  sub_44106C(&a52);
  sub_44106C(v60);
  sub_3821F8(&a60);
  _Unwind_Resume(a1);
}

void sub_F4F200(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, char a5@<W4>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v9 = (void **)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  *(unsigned char *)(v11 + 1394) = 0;
  nullsub_1(v11 + 8);
  sub_CE3520(v11 + 1400);
  sub_CE35E0(v11 + 1480);
  unsigned int v13 = v9 + 17;
  uint64_t v12 = v9[17];
  v9[16] = 0;
  if (v12)
  {
    v9[18] = v12;
    operator delete(v12);
    *unsigned int v13 = 0;
    v9[18] = 0;
    v9[19] = 0;
  }
  *unsigned int v13 = 0;
  v9[18] = 0;
  v9[19] = 0;
  sub_1076C48((uint64_t)&v352, *v9);
  sub_F5C7F8(v351, *v9);
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  v348 = 0;
  v349 = 0;
  uint64_t v350 = 0;
  if (a6 == 0x7FFFFFFFFFFFFFFFLL || !*((unsigned char *)v9 + 84))
  {
    v334 = a7;
    if (!*((_DWORD *)v9 + 18)) {
      goto LABEL_6;
    }
  }
  else
  {
    v334 = a7;
    if (!*((_DWORD *)v9 + 18))
    {
LABEL_6:
      LOBYTE(v328) = 0;
      unsigned int v14 = 0;
      goto LABEL_277;
    }
  }
  v324 = v9 + 17;
  unsigned int v326 = 0;
  BOOL v328 = 0;
  v332 = (char **)(v9 + 13);
  uint64_t v333 = a2;
  char v15 = 1;
  int v16 = 1;
  v338 = v9;
  do
  {
    int v329 = v16;
    if (sub_F047E8(a2))
    {
      int v17 = (void **)*a7;
      uint64_t v18 = a7[1];
      if (v18 != *a7)
      {
        do
        {
          uint64_t v26 = *(void **)(v18 - 224);
          if (v26)
          {
            *(void *)(v18 - 216) = v26;
            operator delete(v26);
          }
          uint64_t v27 = *(void **)(v18 - 248);
          if (v27)
          {
            *(void *)(v18 - 240) = v27;
            operator delete(v27);
          }
          unint64_t v28 = *(void **)(v18 - 312);
          if (v28)
          {
            *(void *)(v18 - 304) = v28;
            operator delete(v28);
          }
          uint64_t v29 = *(void **)(v18 - 336);
          if (v29)
          {
            *(void *)(v18 - 328) = v29;
            operator delete(v29);
          }
          uint64_t v30 = *(void *)(v18 - 360);
          if (v30)
          {
            uint64_t v31 = *(void *)(v18 - 352);
            uint64_t v32 = *(void **)(v18 - 360);
            if (v31 != v30)
            {
              do
              {
                uint64_t v33 = *(void **)(v31 - 24);
                if (v33)
                {
                  *(void *)(v31 - 16) = v33;
                  operator delete(v33);
                }
                v31 -= 56;
              }
              while (v31 != v30);
              uint64_t v32 = *(void **)(v18 - 360);
            }
            *(void *)(v18 - 352) = v30;
            operator delete(v32);
          }
          uint64_t v34 = *(void **)(v18 - 456);
          if (v34)
          {
            *(void *)(v18 - 448) = v34;
            operator delete(v34);
          }
          long long v35 = (void **)(v18 - 480);
          if (*(char *)(v18 - 457) < 0) {
            operator delete(*v35);
          }
          v18 -= 480;
        }
        while (v35 != v17);
      }
      a7[1] = (uint64_t)v17;
      LOBYTE(v16) = v329;
    }
    if (v16)
    {
      uint64_t v19 = (void **)v348;
      uint64_t v20 = v349;
      if (v349 != v348)
      {
        do
        {
          uint64_t v36 = *(v20 - 28);
          if (v36)
          {
            *(v20 - 27) = v36;
            operator delete(v36);
          }
          uint64_t v37 = *(v20 - 31);
          if (v37)
          {
            *(v20 - 30) = v37;
            operator delete(v37);
          }
          unsigned __int8 v38 = *(v20 - 39);
          if (v38)
          {
            *(v20 - 38) = v38;
            operator delete(v38);
          }
          uint64_t v39 = *(v20 - 42);
          if (v39)
          {
            *(v20 - 41) = v39;
            operator delete(v39);
          }
          uint64_t v40 = (char *)*(v20 - 45);
          if (v40)
          {
            uint64_t v41 = (char *)*(v20 - 44);
            char v42 = *(v20 - 45);
            if (v41 != v40)
            {
              do
              {
                BOOL v43 = (void *)*((void *)v41 - 3);
                if (v43)
                {
                  *((void *)v41 - 2) = v43;
                  operator delete(v43);
                }
                v41 -= 56;
              }
              while (v41 != v40);
              char v42 = *(v20 - 45);
            }
            *(v20 - 44) = v40;
            operator delete(v42);
          }
          unsigned __int8 v44 = *(v20 - 57);
          if (v44)
          {
            *(v20 - 56) = v44;
            operator delete(v44);
          }
          long long v45 = v20 - 60;
          if (*((char *)v20 - 457) < 0) {
            operator delete(*v45);
          }
          v20 -= 60;
        }
        while (v45 != v19);
      }
      v349 = v19;
    }
    sub_F705C0();
    uint64_t v21 = (void *)sub_F047F8(a2);
    uint64_t v22 = v21;
    uint64_t v24 = (char *)v9[18];
    unint64_t v23 = (char *)v9[19];
    if (v24 >= v23)
    {
      uint64_t v46 = (char *)*v324;
      uint64_t v47 = (uint64_t)&v24[-*v324];
      uint64_t v48 = v47 >> 3;
      unint64_t v49 = (v47 >> 3) + 1;
      if (v49 >> 61) {
        sub_2E00();
      }
      uint64_t v50 = v23 - v46;
      if (v50 >> 2 > v49) {
        unint64_t v49 = v50 >> 2;
      }
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v51 = v49;
      }
      if (v51)
      {
        if (v51 >> 61) {
          sub_188D718();
        }
        unint64_t v52 = operator new(8 * v51);
        char v53 = &v52[8 * v48];
        void *v53 = *v22;
        uint64_t v25 = (uint64_t)(v53 + 1);
        if (v24 != v46)
        {
LABEL_68:
          unint64_t v54 = v24 - 8 - v46;
          if (v54 < 0x58) {
            goto LABEL_361;
          }
          if ((unint64_t)(v24 - &v52[v47]) < 0x20) {
            goto LABEL_361;
          }
          uint64_t v55 = (v54 >> 3) + 1;
          uint64_t v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v57 = &v24[-v56];
          char v53 = (void *)((char *)v53 - v56);
          BOOL v58 = &v52[8 * v48 - 16];
          uint64_t v59 = v24 - 16;
          uint64_t v60 = v55 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v61 = *(_OWORD *)v59;
            *(v58 - 1) = *((_OWORD *)v59 - 1);
            _OWORD *v58 = v61;
            v58 -= 2;
            v59 -= 32;
            v60 -= 4;
          }
          while (v60);
          uint64_t v24 = v57;
          if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_361:
            do
            {
              uint64_t v62 = *((void *)v24 - 1);
              v24 -= 8;
              *--char v53 = v62;
            }
            while (v24 != v46);
          }
          uint64_t v24 = (char *)*v324;
          v9[17] = v53;
          v9[18] = (void *)v25;
          v9[19] = &v52[8 * v51];
          if (!v24) {
            goto LABEL_79;
          }
LABEL_78:
          operator delete(v24);
          goto LABEL_79;
        }
      }
      else
      {
        unint64_t v52 = 0;
        char v53 = (void *)(8 * v48);
        *(void *)(8 * v48) = *v22;
        uint64_t v25 = 8 * v48 + 8;
        if (v24 != v46) {
          goto LABEL_68;
        }
      }
      v9[17] = v53;
      v9[18] = (void *)v25;
      v9[19] = &v52[8 * v51];
      if (v24) {
        goto LABEL_78;
      }
    }
    else
    {
      *(void *)uint64_t v24 = *v21;
      uint64_t v25 = (uint64_t)(v24 + 8);
    }
LABEL_79:
    char v64 = (char *)v346;
    uint64_t v63 = v347;
    BOOL v65 = v328;
    if (v15) {
      BOOL v65 = v346 != v347;
    }
    BOOL v328 = v65;
    v9[18] = (void *)v25;
    *(_OWORD *)v343 = 0u;
    *(_OWORD *)int v344 = 0u;
    int v345 = 1065353216;
    *(_OWORD *)v340 = 0u;
    *(_OWORD *)v341 = 0u;
    int v342 = 1065353216;
    v337 = (char *)v63;
    if (v64 == (char *)v63)
    {
      int v67 = 0;
      int v66 = 0;
      uint64_t v235 = v341[0];
      if (v341[0]) {
        goto LABEL_210;
      }
      goto LABEL_271;
    }
    int v66 = 0;
    int v67 = 0;
    do
    {
      uint64_t v68 = sub_37B3A8((uint64_t)*v9);
      int v69 = sub_F41B10((uint64_t)v9, (uint64_t)v64, (uint64_t)v351, v68, a3, a4, (uint64_t)v343, (uint64_t)v340);
      if ((v69 & 0xC) == 0)
      {
        sub_65BD8();
        unint64_t v87 = a7[1];
        unint64_t v88 = a7[2];
        if (v87 < v88)
        {
          long long v89 = *(_OWORD *)v64;
          *(void *)(v87 + 16) = *((void *)v64 + 2);
          *(_OWORD *)unint64_t v87 = v89;
          *((void *)v64 + 1) = 0;
          *((void *)v64 + 2) = 0;
          *(void *)char v64 = 0;
          *(void *)(v87 + 24) = 0;
          *(void *)(v87 + 32) = 0;
          *(void *)(v87 + 40) = 0;
          *(_OWORD *)(v87 + 24) = *(_OWORD *)(v64 + 24);
          *(void *)(v87 + 40) = *((void *)v64 + 5);
          *((void *)v64 + 4) = 0;
          *((void *)v64 + 5) = 0;
          *((void *)v64 + 3) = 0;
          long long v90 = *((_OWORD *)v64 + 4);
          long long v91 = *((_OWORD *)v64 + 5);
          long long v92 = *((_OWORD *)v64 + 6);
          *(void *)(v87 + 110) = *(void *)(v64 + 110);
          *(_OWORD *)(v87 + 80) = v91;
          *(_OWORD *)(v87 + 96) = v92;
          *(_OWORD *)(v87 + 64) = v90;
          *(_OWORD *)(v87 + 48) = *((_OWORD *)v64 + 3);
          *(void *)(v87 + 128) = 0;
          *(void *)(v87 + 136) = 0;
          *(void *)(v87 + 120) = 0;
          *(_OWORD *)(v87 + 120) = *(_OWORD *)(v64 + 120);
          *(void *)(v87 + 136) = *((void *)v64 + 17);
          *((void *)v64 + 15) = 0;
          *((void *)v64 + 16) = 0;
          *((void *)v64 + 17) = 0;
          *(void *)(v87 + 144) = 0;
          *(void *)(v87 + 152) = 0;
          *(void *)(v87 + 160) = 0;
          *(_OWORD *)(v87 + 144) = *((_OWORD *)v64 + 9);
          *(void *)(v87 + 160) = *((void *)v64 + 20);
          *((void *)v64 + 18) = 0;
          *((void *)v64 + 19) = 0;
          *((void *)v64 + 20) = 0;
          *(void *)(v87 + 168) = 0;
          *(void *)(v87 + 176) = 0;
          *(void *)(v87 + 184) = 0;
          *(_OWORD *)(v87 + 168) = *(_OWORD *)(v64 + 168);
          *(void *)(v87 + 184) = *((void *)v64 + 23);
          *((void *)v64 + 21) = 0;
          *((void *)v64 + 22) = 0;
          *((void *)v64 + 23) = 0;
          long long v93 = *((_OWORD *)v64 + 13);
          uint64_t v94 = *((void *)v64 + 28);
          *(_OWORD *)(v87 + 192) = *((_OWORD *)v64 + 12);
          *(_OWORD *)(v87 + 208) = v93;
          *(void *)(v87 + 224) = v94;
          *(void *)(v87 + 232) = 0;
          *(void *)(v87 + 240) = 0;
          *(void *)(v87 + 248) = 0;
          *(_OWORD *)(v87 + 232) = *(_OWORD *)(v64 + 232);
          *(void *)(v87 + 248) = *((void *)v64 + 31);
          *((void *)v64 + 29) = 0;
          *((void *)v64 + 30) = 0;
          *((void *)v64 + 31) = 0;
          *(void *)(v87 + 256) = 0;
          *(void *)(v87 + 264) = 0;
          *(void *)(v87 + 272) = 0;
          *(_OWORD *)(v87 + 256) = *((_OWORD *)v64 + 16);
          *(void *)(v87 + 272) = *((void *)v64 + 34);
          *((void *)v64 + 32) = 0;
          *((void *)v64 + 33) = 0;
          *((void *)v64 + 34) = 0;
          *(_OWORD *)(v87 + 280) = *(_OWORD *)(v64 + 280);
          *(_DWORD *)(v87 + 304) = *((_DWORD *)v64 + 76);
          if (*((_DWORD *)v64 + 76) <= 1u) {
            *(void *)(v87 + 296) = *((void *)v64 + 37);
          }
          *(_OWORD *)(v87 + 312) = *(_OWORD *)(v64 + 312);
          long long v95 = *(_OWORD *)(v64 + 408);
          long long v97 = *(_OWORD *)(v64 + 360);
          long long v96 = *(_OWORD *)(v64 + 376);
          *(_OWORD *)(v87 + 392) = *(_OWORD *)(v64 + 392);
          *(_OWORD *)(v87 + 408) = v95;
          *(_OWORD *)(v87 + 360) = v97;
          *(_OWORD *)(v87 + 376) = v96;
          long long v99 = *(_OWORD *)(v64 + 440);
          long long v98 = *(_OWORD *)(v64 + 456);
          long long v100 = *(_OWORD *)(v64 + 424);
          *(void *)(v87 + 471) = *(void *)(v64 + 471);
          *(_OWORD *)(v87 + 440) = v99;
          *(_OWORD *)(v87 + 456) = v98;
          *(_OWORD *)(v87 + 424) = v100;
          long long v101 = *(_OWORD *)(v64 + 344);
          *(_OWORD *)(v87 + 328) = *(_OWORD *)(v64 + 328);
          *(_OWORD *)(v87 + 344) = v101;
          uint64_t v102 = v87 + 480;
          goto LABEL_84;
        }
        unint64_t v103 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v87 - *a7) >> 5);
        unint64_t v104 = v103 + 1;
        if (v103 + 1 > 0x88888888888888) {
          sub_2E00();
        }
        unint64_t v105 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v88 - *a7) >> 5);
        if (2 * v105 > v104) {
          unint64_t v104 = 2 * v105;
        }
        if (v105 >= 0x44444444444444) {
          unint64_t v106 = 0x88888888888888;
        }
        else {
          unint64_t v106 = v104;
        }
        if (v106)
        {
          if (v106 > 0x88888888888888) {
            sub_188D718();
          }
          unint64_t v107 = (char *)operator new(480 * v106);
        }
        else
        {
          unint64_t v107 = 0;
        }
        unsigned int v114 = &v107[480 * v103];
        long long v115 = *(_OWORD *)v64;
        *((void *)v114 + 2) = *((void *)v64 + 2);
        *(_OWORD *)unsigned int v114 = v115;
        *((void *)v64 + 1) = 0;
        *((void *)v64 + 2) = 0;
        *(void *)char v64 = 0;
        *((void *)v114 + 3) = 0;
        *((void *)v114 + 4) = 0;
        *((void *)v114 + 5) = 0;
        *(_OWORD *)(v114 + 24) = *(_OWORD *)(v64 + 24);
        *((void *)v114 + 5) = *((void *)v64 + 5);
        *((void *)v64 + 4) = 0;
        *((void *)v64 + 5) = 0;
        *((void *)v64 + 3) = 0;
        long long v116 = *((_OWORD *)v64 + 4);
        long long v117 = *((_OWORD *)v64 + 5);
        long long v118 = *((_OWORD *)v64 + 6);
        *(void *)(v114 + 110) = *(void *)(v64 + 110);
        *((_OWORD *)v114 + 5) = v117;
        *((_OWORD *)v114 + 6) = v118;
        *((_OWORD *)v114 + 4) = v116;
        *((_OWORD *)v114 + 3) = *((_OWORD *)v64 + 3);
        *((void *)v114 + 16) = 0;
        *((void *)v114 + 17) = 0;
        *((void *)v114 + 15) = 0;
        *(_OWORD *)(v114 + 120) = *(_OWORD *)(v64 + 120);
        *((void *)v114 + 17) = *((void *)v64 + 17);
        *((void *)v64 + 15) = 0;
        *((void *)v64 + 16) = 0;
        *((void *)v64 + 17) = 0;
        *((void *)v114 + 18) = 0;
        *((void *)v114 + 19) = 0;
        *((void *)v114 + 20) = 0;
        *((_OWORD *)v114 + 9) = *((_OWORD *)v64 + 9);
        *((void *)v114 + 20) = *((void *)v64 + 20);
        *((void *)v64 + 18) = 0;
        *((void *)v64 + 19) = 0;
        *((void *)v64 + 20) = 0;
        *((void *)v114 + 21) = 0;
        *((void *)v114 + 22) = 0;
        *((void *)v114 + 23) = 0;
        *(_OWORD *)(v114 + 168) = *(_OWORD *)(v64 + 168);
        *((void *)v114 + 23) = *((void *)v64 + 23);
        *((void *)v64 + 21) = 0;
        *((void *)v64 + 22) = 0;
        *((void *)v64 + 23) = 0;
        long long v119 = *((_OWORD *)v64 + 13);
        uint64_t v120 = *((void *)v64 + 28);
        *((_OWORD *)v114 + 12) = *((_OWORD *)v64 + 12);
        *((_OWORD *)v114 + 13) = v119;
        *((void *)v114 + 28) = v120;
        *((void *)v114 + 29) = 0;
        *((void *)v114 + 30) = 0;
        *((void *)v114 + 31) = 0;
        *(_OWORD *)(v114 + 232) = *(_OWORD *)(v64 + 232);
        *((void *)v114 + 31) = *((void *)v64 + 31);
        *((void *)v64 + 29) = 0;
        *((void *)v64 + 30) = 0;
        *((void *)v64 + 31) = 0;
        *((void *)v114 + 32) = 0;
        *((void *)v114 + 33) = 0;
        *((void *)v114 + 34) = 0;
        *((_OWORD *)v114 + 16) = *((_OWORD *)v64 + 16);
        *((void *)v114 + 34) = *((void *)v64 + 34);
        *((void *)v64 + 32) = 0;
        *((void *)v64 + 33) = 0;
        *((void *)v64 + 34) = 0;
        *(_OWORD *)(v114 + 280) = *(_OWORD *)(v64 + 280);
        *((_DWORD *)v114 + 76) = *((_DWORD *)v64 + 76);
        if (*((_DWORD *)v64 + 76) <= 1u) {
          *((void *)v114 + 37) = *((void *)v64 + 37);
        }
        uint64_t v121 = &v107[480 * v106];
        int v122 = &v107[480 * v103];
        *(_OWORD *)(v122 + 312) = *(_OWORD *)(v64 + 312);
        v122 += 328;
        long long v123 = *(_OWORD *)(v64 + 408);
        long long v125 = *(_OWORD *)(v64 + 360);
        long long v124 = *(_OWORD *)(v64 + 376);
        *((_OWORD *)v122 + 4) = *(_OWORD *)(v64 + 392);
        *((_OWORD *)v122 + 5) = v123;
        *((_OWORD *)v122 + 2) = v125;
        *((_OWORD *)v122 + 3) = v124;
        long long v127 = *(_OWORD *)(v64 + 440);
        long long v126 = *(_OWORD *)(v64 + 456);
        long long v128 = *(_OWORD *)(v64 + 424);
        *(void *)(v122 + 143) = *(void *)(v64 + 471);
        *((_OWORD *)v122 + 7) = v127;
        *((_OWORD *)v122 + 8) = v126;
        *((_OWORD *)v122 + 6) = v128;
        long long v129 = *(_OWORD *)(v64 + 344);
        *(_OWORD *)int v122 = *(_OWORD *)(v64 + 328);
        *((_OWORD *)v122 + 1) = v129;
        uint64_t v102 = (uint64_t)(v114 + 480);
        long long v130 = a7;
        unint64_t v131 = (void **)a7[1];
        uint64_t v132 = (void **)*v130;
        if (v131 == (void **)*v130)
        {
          *long long v130 = (uint64_t)v114;
          v130[1] = v102;
          v130[2] = (uint64_t)v121;
          if (!v131)
          {
LABEL_83:
            a7 = v334;
LABEL_84:
            a7[1] = v102;
            goto LABEL_85;
          }
        }
        else
        {
          uint64_t v133 = 0;
          do
          {
            long long v142 = &v114[v133 * 8];
            uint64_t v143 = (uint64_t)&v114[v133 * 8 - 480];
            uint64_t v144 = &v131[v133];
            uint64_t v145 = (uint64_t)&v131[v133 - 60];
            long long v146 = *(_OWORD *)v145;
            *(void *)(v143 + 16) = v131[v133 - 58];
            *(_OWORD *)uint64_t v143 = v146;
            *(void *)(v145 + 8) = 0;
            *(void *)(v145 + 16) = 0;
            *(void *)uint64_t v145 = 0;
            long long v147 = &v114[v133 * 8 - 456];
            uint64_t v148 = (uint64_t)&v131[v133 - 57];
            *(void *)&v114[v133 * 8 - 448] = 0;
            *(void *)long long v147 = 0;
            *((void *)v147 + 2) = 0;
            *(_OWORD *)long long v147 = *(_OWORD *)v148;
            *(void *)&v114[v133 * 8 - 440] = v131[v133 - 55];
            *(void *)(v148 + 16) = 0;
            v131[v133 - 56] = 0;
            *(void *)uint64_t v148 = 0;
            uint64_t v149 = (uint64_t)&v114[v133 * 8 - 432];
            long long v150 = *(_OWORD *)&v131[v133 - 52];
            long long v151 = *(_OWORD *)&v131[v133 - 50];
            long long v152 = *(_OWORD *)&v131[v133 - 48];
            *(void *)(v149 + 62) = *(void **)((char *)&v131[v133 - 46] - 2);
            *(_OWORD *)(v149 + 32) = v151;
            *(_OWORD *)(v149 + 48) = v152;
            *(_OWORD *)(v149 + 16) = v150;
            *(_OWORD *)uint64_t v149 = *(_OWORD *)&v131[v133 - 54];
            long long v153 = &v114[v133 * 8 - 360];
            uint64_t v154 = (uint64_t)&v131[v133 - 45];
            *((void *)v153 + 1) = 0;
            *((void *)v153 + 2) = 0;
            *(void *)long long v153 = 0;
            *(_OWORD *)long long v153 = *(_OWORD *)v154;
            *(void *)&v114[v133 * 8 - 344] = v131[v133 - 43];
            v131[v133 - 44] = 0;
            *(void *)uint64_t v154 = 0;
            *(void *)(v154 + 16) = 0;
            uint64_t v155 = &v114[v133 * 8 - 336];
            uint64_t v156 = (uint64_t)&v131[v133 - 42];
            *(void *)&v114[v133 * 8 - 328] = 0;
            *(void *)uint64_t v155 = 0;
            *((void *)v155 + 2) = 0;
            *(_OWORD *)uint64_t v155 = *(_OWORD *)v156;
            *(void *)&v114[v133 * 8 - 320] = v131[v133 - 40];
            v131[v133 - 41] = 0;
            *(void *)uint64_t v156 = 0;
            *(void *)(v156 + 16) = 0;
            uint64_t v157 = &v114[v133 * 8 - 312];
            uint64_t v158 = (uint64_t)&v131[v133 - 39];
            *(void *)&v114[v133 * 8 - 304] = 0;
            *(void *)uint64_t v157 = 0;
            *((void *)v157 + 2) = 0;
            *(_OWORD *)uint64_t v157 = *(_OWORD *)v158;
            *(void *)&v114[v133 * 8 - 296] = v131[v133 - 37];
            v131[v133 - 38] = 0;
            *(void *)uint64_t v158 = 0;
            *(void *)(v158 + 16) = 0;
            uint64_t v159 = &v114[v133 * 8 - 288];
            long long v160 = *(_OWORD *)&v131[v133 - 34];
            long long v161 = v131[v133 - 32];
            *(_OWORD *)uint64_t v159 = *(_OWORD *)&v131[v133 - 36];
            *((_OWORD *)v159 + 1) = v160;
            *((void *)v142 - 32) = v161;
            *((void *)v142 - 31) = 0;
            *((void *)v142 - 30) = 0;
            *((void *)v142 - 29) = 0;
            *(_OWORD *)(v142 - 248) = *(_OWORD *)&v131[v133 - 31];
            *((void *)v142 - 29) = v131[v133 - 29];
            *(v144 - 31) = 0;
            *(v144 - 30) = 0;
            *(v144 - 29) = 0;
            *((void *)v142 - 28) = 0;
            *((void *)v142 - 27) = 0;
            *((void *)v142 - 26) = 0;
            *((_OWORD *)v142 - 14) = *(_OWORD *)&v131[v133 - 28];
            *((void *)v142 - 26) = v131[v133 - 26];
            *(v144 - 28) = 0;
            *(v144 - 27) = 0;
            *(v144 - 26) = 0;
            *(_OWORD *)(v142 - 200) = *(_OWORD *)&v131[v133 - 25];
            *((_DWORD *)v142 - 44) = v131[v133 - 22];
            if (LODWORD(v131[v133 - 22]) < 2) {
              *((void *)v142 - 23) = *(v144 - 23);
            }
            uint64_t v134 = &v114[v133 * 8];
            *(_OWORD *)(v134 - 168) = *(_OWORD *)&v131[v133 - 21];
            long long v135 = *(_OWORD *)&v131[v133 - 13];
            long long v136 = *(_OWORD *)&v131[v133 - 11];
            long long v137 = *(_OWORD *)&v131[v133 - 9];
            *(_OWORD *)(v134 - 120) = *(_OWORD *)&v131[v133 - 15];
            *(_OWORD *)(v134 - 72) = v137;
            *(_OWORD *)(v134 - 88) = v136;
            *(_OWORD *)(v134 - 104) = v135;
            long long v138 = *(_OWORD *)&v131[v133 - 5];
            long long v139 = *(_OWORD *)&v131[v133 - 3];
            uint64_t v140 = *(uint64_t *)((char *)&v131[v133 - 1] - 1);
            *(_OWORD *)(v134 - 56) = *(_OWORD *)&v131[v133 - 7];
            *(void *)(v134 - 9) = v140;
            *(_OWORD *)(v134 - 24) = v139;
            *(_OWORD *)(v134 - 40) = v138;
            long long v141 = *(_OWORD *)&v131[v133 - 19];
            *(_OWORD *)(v134 - 136) = *(_OWORD *)&v131[v133 - 17];
            *(_OWORD *)(v134 - 152) = v141;
            v133 -= 60;
          }
          while (&v131[v133] != v132);
          unint64_t v131 = (void **)*v334;
          uint64_t v162 = (void **)v334[1];
          uint64_t *v334 = (uint64_t)&v114[v133 * 8];
          v334[1] = v102;
          v334[2] = (uint64_t)v121;
          if (v162 != v131)
          {
            BOOL v330 = v114 + 480;
            do
            {
              char v163 = *(v162 - 28);
              if (v163)
              {
                *(v162 - 27) = v163;
                operator delete(v163);
              }
              uint64_t v164 = *(v162 - 31);
              if (v164)
              {
                *(v162 - 30) = v164;
                operator delete(v164);
              }
              int v165 = *(v162 - 39);
              if (v165)
              {
                *(v162 - 38) = v165;
                operator delete(v165);
              }
              int v166 = *(v162 - 42);
              if (v166)
              {
                *(v162 - 41) = v166;
                operator delete(v166);
              }
              int v167 = (char *)*(v162 - 45);
              if (v167)
              {
                unint64_t v168 = (char *)*(v162 - 44);
                uint64_t v169 = *(v162 - 45);
                if (v168 != v167)
                {
                  do
                  {
                    uint64_t v170 = (void *)*((void *)v168 - 3);
                    if (v170)
                    {
                      *((void *)v168 - 2) = v170;
                      operator delete(v170);
                    }
                    v168 -= 56;
                  }
                  while (v168 != v167);
                  uint64_t v169 = *(v162 - 45);
                }
                *(v162 - 44) = v167;
                operator delete(v169);
                uint64_t v9 = v338;
              }
              int v171 = *(v162 - 57);
              if (v171)
              {
                *(v162 - 56) = v171;
                operator delete(v171);
              }
              uint64_t v172 = v162 - 60;
              if (*((char *)v162 - 457) < 0) {
                operator delete(*v172);
              }
              v162 -= 60;
            }
            while (v172 != v131);
            uint64_t v102 = (uint64_t)v330;
          }
          if (!v131) {
            goto LABEL_83;
          }
        }
        uint64_t v173 = v102;
        operator delete(v131);
        uint64_t v102 = v173;
        goto LABEL_83;
      }
      if (!sub_F047E8(v333)) {
        goto LABEL_85;
      }
      sub_EB1D94(&v359);
      int v70 = a7;
      unint64_t v71 = (void **)a7[1];
      unint64_t v72 = v70[2];
      if ((unint64_t)v71 < v72)
      {
        long long v73 = v359;
        v71[2] = v360;
        v71[3] = 0;
        *(_OWORD *)unint64_t v71 = v73;
        v360 = 0;
        long long v359 = 0uLL;
        v71[4] = 0;
        v71[5] = 0;
        *(_OWORD *)(v71 + 3) = v361;
        v71[5] = v362;
        long long v361 = 0uLL;
        v362 = 0;
        *((_OWORD *)v71 + 3) = v363;
        long long v74 = v364;
        long long v75 = v365;
        long long v76 = *(_OWORD *)v366;
        *(void **)((char *)v71 + 110) = *(void **)&v366[14];
        *((_OWORD *)v71 + 5) = v75;
        *((_OWORD *)v71 + 6) = v76;
        *((_OWORD *)v71 + 4) = v74;
        v71[15] = 0;
        v71[16] = 0;
        v71[17] = 0;
        v71[18] = 0;
        *(_OWORD *)(v71 + 15) = v367;
        v71[17] = v368;
        long long v367 = 0uLL;
        v368 = 0;
        v71[19] = 0;
        v71[20] = 0;
        *((_OWORD *)v71 + 9) = v369;
        long long v369 = 0uLL;
        v71[20] = v370;
        v71[21] = 0;
        v370 = 0;
        v71[22] = 0;
        v71[23] = 0;
        *(_OWORD *)(v71 + 21) = v371;
        v71[23] = v372;
        long long v371 = 0uLL;
        v372 = 0;
        long long v77 = v374;
        long long v78 = v375;
        *((_OWORD *)v71 + 12) = v373;
        *((_OWORD *)v71 + 13) = v77;
        v71[28] = v78;
        v71[29] = 0;
        v71[30] = 0;
        v71[31] = 0;
        *(_OWORD *)(v71 + 29) = v376;
        long long v376 = 0uLL;
        v71[31] = v377;
        v71[32] = 0;
        v377 = 0;
        v71[33] = 0;
        v71[34] = 0;
        *((_OWORD *)v71 + 16) = __p;
        v71[34] = v379;
        long long __p = 0uLL;
        v379 = 0;
        *(_OWORD *)(v71 + 35) = v380;
        *((_DWORD *)v71 + 76) = v382;
        if (v382 <= 1) {
          v71[37] = v381;
        }
        *(_OWORD *)(v71 + 39) = v383;
        long long v79 = v389;
        long long v81 = v386;
        long long v80 = v387;
        *(_OWORD *)(v71 + 49) = v388;
        *(_OWORD *)(v71 + 51) = v79;
        *(_OWORD *)(v71 + 45) = v81;
        *(_OWORD *)(v71 + 47) = v80;
        long long v83 = v391;
        long long v82 = *(_OWORD *)v392;
        long long v84 = v390;
        *(void **)((char *)v71 + 471) = *(void **)&v392[15];
        *(_OWORD *)(v71 + 55) = v83;
        *(_OWORD *)(v71 + 57) = v82;
        *(_OWORD *)(v71 + 53) = v84;
        long long v85 = v385;
        *(_OWORD *)(v71 + 41) = v384;
        *(_OWORD *)(v71 + 43) = v85;
        long long v86 = (char *)(v71 + 60);
        goto LABEL_186;
      }
      BOOL v108 = (void **)*v70;
      unint64_t v109 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v71 - *v70) >> 5);
      unint64_t v110 = v109 + 1;
      if (v109 + 1 > 0x88888888888888) {
        sub_2E00();
      }
      unint64_t v111 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v72 - (void)v108) >> 5);
      if (2 * v111 > v110) {
        unint64_t v110 = 2 * v111;
      }
      if (v111 >= 0x44444444444444) {
        unint64_t v112 = 0x88888888888888;
      }
      else {
        unint64_t v112 = v110;
      }
      if (v112)
      {
        if (v112 > 0x88888888888888) {
          sub_188D718();
        }
        unint64_t v113 = (char *)operator new(480 * v112);
      }
      else
      {
        unint64_t v113 = 0;
      }
      uint64_t v174 = &v113[480 * v109];
      *(_OWORD *)uint64_t v174 = v359;
      long long v175 = v362;
      *((void *)v174 + 2) = v360;
      v360 = 0;
      long long v359 = 0uLL;
      *(_OWORD *)(v174 + 24) = v361;
      *((void *)v174 + 5) = v175;
      v362 = 0;
      long long v361 = 0uLL;
      long long v176 = v363;
      long long v177 = v364;
      long long v178 = v365;
      long long v179 = *(_OWORD *)v366;
      *(void *)(v174 + 110) = *(void *)&v366[14];
      *((_OWORD *)v174 + 5) = v178;
      *((_OWORD *)v174 + 6) = v179;
      *((_OWORD *)v174 + 3) = v176;
      *((_OWORD *)v174 + 4) = v177;
      *((void *)v174 + 16) = 0;
      *((void *)v174 + 17) = 0;
      *(_OWORD *)(v174 + 120) = v367;
      *((void *)v174 + 17) = v368;
      long long v367 = 0uLL;
      v368 = 0;
      *((void *)v174 + 19) = 0;
      *((void *)v174 + 20) = 0;
      *((_OWORD *)v174 + 9) = v369;
      long long v180 = v372;
      *((void *)v174 + 20) = v370;
      long long v369 = 0uLL;
      v370 = 0;
      *((void *)v174 + 22) = 0;
      *((void *)v174 + 23) = 0;
      *(_OWORD *)(v174 + 168) = v371;
      *((void *)v174 + 23) = v180;
      long long v371 = 0uLL;
      v372 = 0;
      long long v181 = v373;
      long long v182 = v374;
      *((void *)v174 + 28) = v375;
      *((_OWORD *)v174 + 12) = v181;
      *((_OWORD *)v174 + 13) = v182;
      *((void *)v174 + 30) = 0;
      *((void *)v174 + 31) = 0;
      *(_OWORD *)(v174 + 232) = v376;
      *((void *)v174 + 31) = v377;
      long long v376 = 0uLL;
      v377 = 0;
      *((void *)v174 + 33) = 0;
      *((void *)v174 + 34) = 0;
      *((_OWORD *)v174 + 16) = __p;
      *((void *)v174 + 34) = v379;
      long long __p = 0uLL;
      v379 = 0;
      *(_OWORD *)(v174 + 280) = v380;
      LODWORD(v180) = v382;
      *((_DWORD *)v174 + 76) = v382;
      if (v180 <= 1) {
        *((void *)v174 + 37) = v381;
      }
      long long v183 = &v113[480 * v109];
      *(_OWORD *)(v183 + 312) = v383;
      long long v184 = v391;
      long long v185 = &v113[480 * v112];
      v183 += 328;
      *((_OWORD *)v183 + 6) = v390;
      *((_OWORD *)v183 + 7) = v184;
      *((_OWORD *)v183 + 8) = *(_OWORD *)v392;
      *(void *)(v183 + 143) = *(void *)&v392[15];
      long long v186 = v387;
      *((_OWORD *)v183 + 2) = v386;
      *((_OWORD *)v183 + 3) = v186;
      long long v187 = v389;
      *((_OWORD *)v183 + 4) = v388;
      *((_OWORD *)v183 + 5) = v187;
      long long v188 = v385;
      long long v86 = v174 + 480;
      *(_OWORD *)long long v183 = v384;
      *((_OWORD *)v183 + 1) = v188;
      if (v71 == v108)
      {
        uint64_t *v334 = (uint64_t)v174;
        v334[1] = (uint64_t)v86;
        v334[2] = (uint64_t)v185;
        if (!v71) {
          goto LABEL_186;
        }
      }
      else
      {
        uint64_t v189 = 0;
        do
        {
          long long v198 = &v174[v189 * 8];
          uint64_t v199 = (uint64_t)&v174[v189 * 8 - 480];
          uint64_t v200 = &v71[v189];
          uint64_t v201 = (uint64_t)&v71[v189 - 60];
          long long v202 = *(_OWORD *)v201;
          *(void *)(v199 + 16) = v71[v189 - 58];
          *(_OWORD *)uint64_t v199 = v202;
          *(void *)(v201 + 8) = 0;
          *(void *)(v201 + 16) = 0;
          *(void *)uint64_t v201 = 0;
          long long v203 = &v174[v189 * 8 - 456];
          uint64_t v204 = (uint64_t)&v71[v189 - 57];
          *(void *)&v174[v189 * 8 - 448] = 0;
          *(void *)long long v203 = 0;
          *((void *)v203 + 2) = 0;
          *(_OWORD *)long long v203 = *(_OWORD *)v204;
          *(void *)&v174[v189 * 8 - 440] = v71[v189 - 55];
          *(void *)(v204 + 16) = 0;
          v71[v189 - 56] = 0;
          *(void *)uint64_t v204 = 0;
          uint64_t v205 = (uint64_t)&v174[v189 * 8 - 432];
          long long v206 = *(_OWORD *)&v71[v189 - 52];
          long long v207 = *(_OWORD *)&v71[v189 - 50];
          long long v208 = *(_OWORD *)&v71[v189 - 48];
          *(void *)(v205 + 62) = *(void **)((char *)&v71[v189 - 46] - 2);
          *(_OWORD *)(v205 + 32) = v207;
          *(_OWORD *)(v205 + 48) = v208;
          *(_OWORD *)(v205 + 16) = v206;
          *(_OWORD *)uint64_t v205 = *(_OWORD *)&v71[v189 - 54];
          long long v209 = &v174[v189 * 8 - 360];
          uint64_t v210 = (uint64_t)&v71[v189 - 45];
          *((void *)v209 + 1) = 0;
          *((void *)v209 + 2) = 0;
          *(void *)long long v209 = 0;
          *(_OWORD *)long long v209 = *(_OWORD *)v210;
          *(void *)&v174[v189 * 8 - 344] = v71[v189 - 43];
          v71[v189 - 44] = 0;
          *(void *)uint64_t v210 = 0;
          *(void *)(v210 + 16) = 0;
          uint64_t v211 = &v174[v189 * 8 - 336];
          uint64_t v212 = (uint64_t)&v71[v189 - 42];
          *(void *)&v174[v189 * 8 - 328] = 0;
          *(void *)uint64_t v211 = 0;
          *((void *)v211 + 2) = 0;
          *(_OWORD *)uint64_t v211 = *(_OWORD *)v212;
          *(void *)&v174[v189 * 8 - 320] = v71[v189 - 40];
          v71[v189 - 41] = 0;
          *(void *)uint64_t v212 = 0;
          *(void *)(v212 + 16) = 0;
          uint64_t v213 = &v174[v189 * 8 - 312];
          uint64_t v214 = (uint64_t)&v71[v189 - 39];
          *(void *)&v174[v189 * 8 - 304] = 0;
          *(void *)uint64_t v213 = 0;
          *((void *)v213 + 2) = 0;
          *(_OWORD *)uint64_t v213 = *(_OWORD *)v214;
          *(void *)&v174[v189 * 8 - 296] = v71[v189 - 37];
          v71[v189 - 38] = 0;
          *(void *)uint64_t v214 = 0;
          *(void *)(v214 + 16) = 0;
          uint64_t v215 = &v174[v189 * 8 - 288];
          long long v216 = *(_OWORD *)&v71[v189 - 34];
          long long v217 = v71[v189 - 32];
          *(_OWORD *)uint64_t v215 = *(_OWORD *)&v71[v189 - 36];
          *((_OWORD *)v215 + 1) = v216;
          *((void *)v198 - 32) = v217;
          *((void *)v198 - 31) = 0;
          *((void *)v198 - 30) = 0;
          *((void *)v198 - 29) = 0;
          *(_OWORD *)(v198 - 248) = *(_OWORD *)&v71[v189 - 31];
          *((void *)v198 - 29) = v71[v189 - 29];
          *(v200 - 31) = 0;
          *(v200 - 30) = 0;
          *(v200 - 29) = 0;
          *((void *)v198 - 28) = 0;
          *((void *)v198 - 27) = 0;
          *((void *)v198 - 26) = 0;
          *((_OWORD *)v198 - 14) = *(_OWORD *)&v71[v189 - 28];
          *((void *)v198 - 26) = v71[v189 - 26];
          *(v200 - 28) = 0;
          *(v200 - 27) = 0;
          *(v200 - 26) = 0;
          *(_OWORD *)(v198 - 200) = *(_OWORD *)&v71[v189 - 25];
          *((_DWORD *)v198 - 44) = v71[v189 - 22];
          if (LODWORD(v71[v189 - 22]) < 2) {
            *((void *)v198 - 23) = *(v200 - 23);
          }
          uint64_t v190 = &v174[v189 * 8];
          *(_OWORD *)(v190 - 168) = *(_OWORD *)&v71[v189 - 21];
          long long v191 = *(_OWORD *)&v71[v189 - 13];
          long long v192 = *(_OWORD *)&v71[v189 - 11];
          long long v193 = *(_OWORD *)&v71[v189 - 9];
          *(_OWORD *)(v190 - 120) = *(_OWORD *)&v71[v189 - 15];
          *(_OWORD *)(v190 - 72) = v193;
          *(_OWORD *)(v190 - 88) = v192;
          *(_OWORD *)(v190 - 104) = v191;
          long long v194 = *(_OWORD *)&v71[v189 - 5];
          long long v195 = *(_OWORD *)&v71[v189 - 3];
          uint64_t v196 = *(uint64_t *)((char *)&v71[v189 - 1] - 1);
          *(_OWORD *)(v190 - 56) = *(_OWORD *)&v71[v189 - 7];
          *(void *)(v190 - 9) = v196;
          *(_OWORD *)(v190 - 24) = v195;
          *(_OWORD *)(v190 - 40) = v194;
          long long v197 = *(_OWORD *)&v71[v189 - 19];
          *(_OWORD *)(v190 - 136) = *(_OWORD *)&v71[v189 - 17];
          *(_OWORD *)(v190 - 152) = v197;
          v189 -= 60;
        }
        while (&v71[v189] != v108);
        unint64_t v71 = (void **)*v334;
        unint64_t v218 = (void **)v334[1];
        uint64_t *v334 = (uint64_t)&v174[v189 * 8];
        v334[1] = (uint64_t)v86;
        v334[2] = (uint64_t)v185;
        if (v218 != v71)
        {
          int v331 = v174 + 480;
          do
          {
            v219 = *(v218 - 28);
            if (v219)
            {
              *(v218 - 27) = v219;
              operator delete(v219);
            }
            unint64_t v220 = *(v218 - 31);
            if (v220)
            {
              *(v218 - 30) = v220;
              operator delete(v220);
            }
            char v221 = *(v218 - 39);
            if (v221)
            {
              *(v218 - 38) = v221;
              operator delete(v221);
            }
            unint64_t v222 = *(v218 - 42);
            if (v222)
            {
              *(v218 - 41) = v222;
              operator delete(v222);
            }
            long long v223 = (char *)*(v218 - 45);
            if (v223)
            {
              uint64_t v224 = (char *)*(v218 - 44);
              long long v225 = *(v218 - 45);
              if (v224 != v223)
              {
                do
                {
                  uint64_t v226 = (void *)*((void *)v224 - 3);
                  if (v226)
                  {
                    *((void *)v224 - 2) = v226;
                    operator delete(v226);
                  }
                  v224 -= 56;
                }
                while (v224 != v223);
                long long v225 = *(v218 - 45);
              }
              *(v218 - 44) = v223;
              operator delete(v225);
              uint64_t v9 = v338;
            }
            long long v227 = *(v218 - 57);
            if (v227)
            {
              *(v218 - 56) = v227;
              operator delete(v227);
            }
            long long v228 = v218 - 60;
            if (*((char *)v218 - 457) < 0) {
              operator delete(*v228);
            }
            v218 -= 60;
          }
          while (v228 != v71);
          long long v86 = v331;
        }
        if (!v71) {
          goto LABEL_186;
        }
      }
      long long v229 = v86;
      operator delete(v71);
      long long v86 = v229;
LABEL_186:
      a7 = v334;
      v334[1] = (uint64_t)v86;
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if ((void)v376)
      {
        *((void *)&v376 + 1) = v376;
        operator delete((void *)v376);
      }
      if ((void)v371)
      {
        *((void *)&v371 + 1) = v371;
        operator delete((void *)v371);
      }
      if ((void)v369)
      {
        *((void *)&v369 + 1) = v369;
        operator delete((void *)v369);
      }
      uint64_t v230 = v367;
      if ((void)v367)
      {
        uint64_t v231 = *((void *)&v367 + 1);
        uint64_t v232 = (void *)v367;
        if (*((void *)&v367 + 1) != (void)v367)
        {
          do
          {
            uint64_t v233 = *(void **)(v231 - 24);
            if (v233)
            {
              *(void *)(v231 - 16) = v233;
              operator delete(v233);
            }
            v231 -= 56;
          }
          while (v231 != v230);
          uint64_t v232 = (void *)v367;
        }
        *((void *)&v367 + 1) = v230;
        operator delete(v232);
      }
      if ((void)v361)
      {
        *((void *)&v361 + 1) = v361;
        operator delete((void *)v361);
      }
      if (SHIBYTE(v360) < 0) {
        operator delete((void *)v359);
      }
LABEL_85:
      v66 |= v69;
      v67 |= (v69 & 2) >> 1;
      v64 += 480;
    }
    while (v64 != v337);
    long long v234 = (char *)v344[0];
    if (v344[0])
    {
      do
      {
        char v260 = v9[1];
        *((unsigned char *)v260 + 1394) = 1;
        uint64_t v261 = (uint64_t)(v260 + 175);
        sub_F57BA4((uint64_t)(v260 + 175), 1);
        sub_F57E78(v261, (uint64_t *)v234 + 2, (uint64_t)&v359);
        int v262 = v361;
        v264 = (char *)v9[14];
        int v263 = (char *)v9[15];
        if (v264 >= v263)
        {
          uint64_t v265 = (v264 - *v332) >> 5;
          if ((unint64_t)(v265 + 1) >> 59) {
            sub_2E00();
          }
          uint64_t v266 = v263 - *v332;
          uint64_t v267 = v266 >> 4;
          if (v266 >> 4 <= (unint64_t)(v265 + 1)) {
            uint64_t v267 = v265 + 1;
          }
          if ((unint64_t)v266 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v268 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v268 = v267;
          }
          if (v268)
          {
            if (v268 >> 59) {
              sub_188D718();
            }
            unint64_t v269 = (__n128 *)operator new(32 * v268);
          }
          else
          {
            unint64_t v269 = 0;
          }
          sub_45E5B0(&v269[2 * v265], (__n128 *)(v234 + 24));
          v271 = (char *)v9[13];
          char v258 = (char *)v9[14];
          if (v258 == v271)
          {
            long long v259 = v270 + 4;
            v9[13] = v270;
            v9[14] = v270 + 4;
            v9[15] = v269[2 * v268].n128_u64;
            if (!v258) {
              goto LABEL_245;
            }
          }
          else
          {
            uint64_t v272 = 0;
            do
            {
              uint64_t v273 = &v270[v272];
              v274 = &v258[v272 * 8];
              LODWORD(v270[v272 - 2]) = *(_DWORD *)&v258[v272 * 8 - 16];
              if (*(_DWORD *)&v258[v272 * 8 - 16] <= 1u) {
                *((_OWORD *)v273 - 2) = *((_OWORD *)v274 - 2);
              }
              *((unsigned char *)v273 - 8) = *(v274 - 8);
              v272 -= 4;
            }
            while (&v258[v272 * 8] != v271);
            char v258 = *v332;
            long long v259 = v270 + 4;
            v9[13] = &v270[v272];
            v9[14] = v270 + 4;
            v9[15] = v269[2 * v268].n128_u64;
            if (!v258) {
              goto LABEL_245;
            }
          }
          operator delete(v258);
        }
        else
        {
          sub_45E5B0((__n128 *)v9[14], (__n128 *)(v234 + 24));
          long long v259 = v264 + 32;
          v9[14] = v264 + 32;
        }
LABEL_245:
        v9[14] = v259;
        v66 |= v262 != 0;
        long long v234 = *(char **)v234;
      }
      while (v234);
    }
    uint64_t v235 = v341[0];
    if (!v341[0])
    {
LABEL_271:
      BOOL v239 = v348 == v349;
      goto LABEL_213;
    }
    do
    {
LABEL_210:
      long long v236 = v9[1];
      *((unsigned char *)v236 + 1394) = 1;
      uint64_t v237 = (uint64_t)(v236 + 175);
      sub_F57BA4((uint64_t)(v236 + 175), 1);
      sub_F57E78(v237, v235 + 2, (uint64_t)&v359);
      v66 |= (_BYTE)v361 != 0;
      uint64_t v235 = (void *)*v235;
    }
    while (v235);
    uint64_t v238 = v341[0];
    BOOL v239 = v348 == v349;
    if (v341[0])
    {
      do
      {
        BOOL v240 = (void *)*v238;
        operator delete(v238);
        uint64_t v238 = v240;
      }
      while (v240);
    }
LABEL_213:
    long long v241 = v340[0];
    v340[0] = 0;
    if (v241) {
      operator delete(v241);
    }
    uint64_t v242 = v344[0];
    if (v344[0])
    {
      do
      {
        long long v243 = (void *)*v242;
        operator delete(v242);
        uint64_t v242 = v243;
      }
      while (v243);
    }
    uint64_t v244 = v343[0];
    v343[0] = 0;
    if (v244) {
      operator delete(v244);
    }
    unsigned int v245 = (void **)v346;
    if (v346)
    {
      long long v246 = v347;
      long long v247 = v346;
      if (v347 != v346)
      {
        do
        {
          long long v248 = *(v246 - 28);
          if (v248)
          {
            *(v246 - 27) = v248;
            operator delete(v248);
          }
          long long v249 = *(v246 - 31);
          if (v249)
          {
            *(v246 - 30) = v249;
            operator delete(v249);
          }
          long long v250 = *(v246 - 39);
          if (v250)
          {
            *(v246 - 38) = v250;
            operator delete(v250);
          }
          long long v251 = *(v246 - 42);
          if (v251)
          {
            *(v246 - 41) = v251;
            operator delete(v251);
          }
          long long v252 = (char *)*(v246 - 45);
          if (v252)
          {
            long long v253 = (char *)*(v246 - 44);
            long long v254 = *(v246 - 45);
            if (v253 != v252)
            {
              do
              {
                long long v255 = (void *)*((void *)v253 - 3);
                if (v255)
                {
                  *((void *)v253 - 2) = v255;
                  operator delete(v255);
                }
                v253 -= 56;
              }
              while (v253 != v252);
              long long v254 = *(v246 - 45);
            }
            *(v246 - 44) = v252;
            operator delete(v254);
          }
          long long v256 = *(v246 - 57);
          if (v256)
          {
            *(v246 - 56) = v256;
            operator delete(v256);
          }
          long long v257 = v246 - 60;
          uint64_t v9 = v338;
          if (*((char *)v246 - 457) < 0) {
            operator delete(*v257);
          }
          v246 -= 60;
        }
        while (v257 != v245);
        long long v247 = v346;
      }
      int v347 = v245;
      operator delete(v247);
    }
    unsigned int v275 = *((_DWORD *)v9 + 18);
    if (((v66 | v67) & 1) == 0)
    {
      a2 = v333;
      break;
    }
    char v15 = 0;
    int v16 = (v66 | v239) & v329;
    ++v326;
    a2 = v333;
  }
  while (v326 < v275);
  unsigned int v14 = v326;
  unsigned int v13 = v324;
  if (v326 >= v275 && v348 != v349 && &v348 != (void **)a7) {
    sub_D5D9A0(a7, (uint64_t)v348, (uint64_t)v349, 0xEEEEEEEEEEEEEEEFLL * (((char *)v349 - (unsigned char *)v348) >> 5));
  }
LABEL_277:
  if (!(sub_F047F0(a2) & 1 | !v328) && *((unsigned char *)v9[3] + 8080))
  {
    uint64_t v276 = *a7;
    uint64_t v277 = a7[1];
    if (*a7 == v277)
    {
LABEL_285:
      if (sub_F047E8(a2))
      {
        uint64_t v279 = *a7;
        uint64_t v278 = a7[1];
        if (v278 != *a7)
        {
          do
            uint64_t v278 = sub_4451C0(v278 - 480);
          while (v278 != v279);
        }
        a7[1] = v279;
      }
      uint64_t v280 = v9[1];
      *((unsigned char *)v280 + 1394) = 0;
      nullsub_1(v280 + 1);
      sub_CE3520((uint64_t)(v280 + 175));
      sub_CE35E0((uint64_t)(v280 + 185));
      v325 = (char **)v13;
      unsigned int v327 = v14;
      sub_F705C0();
      v281 = (void *)sub_F047F8(a2);
      v282 = v281;
      v284 = (char *)v9[18];
      v283 = (char *)v9[19];
      if (v284 >= v283)
      {
        v286 = (char *)*v13;
        uint64_t v287 = (uint64_t)&v284[-*v13];
        uint64_t v288 = v287 >> 3;
        unint64_t v289 = (v287 >> 3) + 1;
        if (v289 >> 61) {
          sub_2E00();
        }
        uint64_t v290 = v283 - v286;
        if (v290 >> 2 > v289) {
          unint64_t v289 = v290 >> 2;
        }
        if ((unint64_t)v290 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v291 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v291 = v289;
        }
        if (v291)
        {
          if (v291 >> 61) {
            sub_188D718();
          }
          unint64_t v292 = operator new(8 * v291);
        }
        else
        {
          unint64_t v292 = 0;
        }
        v293 = &v292[8 * v288];
        void *v293 = *v282;
        v285 = v293 + 1;
        if (v284 != v286)
        {
          unint64_t v294 = v284 - v286 - 8;
          if (v294 < 0x58) {
            goto LABEL_362;
          }
          if ((unint64_t)(v284 - v292 - v287) < 0x20) {
            goto LABEL_362;
          }
          uint64_t v295 = (v294 >> 3) + 1;
          uint64_t v296 = 8 * (v295 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v297 = &v284[-v296];
          v293 = (void *)((char *)v293 - v296);
          v298 = &v292[8 * v288 - 16];
          v299 = v284 - 16;
          uint64_t v300 = v295 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v301 = *(_OWORD *)v299;
            *(v298 - 1) = *((_OWORD *)v299 - 1);
            _OWORD *v298 = v301;
            v298 -= 2;
            v299 -= 32;
            v300 -= 4;
          }
          while (v300);
          v284 = v297;
          if (v295 != (v295 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_362:
            do
            {
              uint64_t v302 = *((void *)v284 - 1);
              v284 -= 8;
              *--v293 = v302;
            }
            while (v284 != v286);
          }
          v284 = *v325;
        }
        v9[17] = v293;
        v9[18] = v285;
        v9[19] = &v292[8 * v291];
        unsigned int v14 = v327;
        if (v284) {
          operator delete(v284);
        }
      }
      else
      {
        *(void *)v284 = *v281;
        v285 = v284 + 8;
        unsigned int v14 = v327;
      }
      v9[18] = v285;
      v304 = (long long *)*((void *)&v359 + 1);
      uint64_t v303 = (long long *)v359;
      if ((void)v359 != *((void *)&v359 + 1))
      {
        do
        {
          sub_1073620((uint64_t)v9[3], v303, v339);
          if (v339[0])
          {
            v339[1] = v339[0];
            operator delete(v339[0]);
          }
          if (!sub_EB2EC4((uint64_t)v303) || sub_F047E8(a2))
          {
            unint64_t v306 = a7[1];
            if (v306 < a7[2])
            {
              sub_CE3918((uint64_t)(a7 + 2), a7[1], v303);
              uint64_t v305 = v306 + 480;
            }
            else
            {
              uint64_t v305 = sub_CE37BC(a7, v303);
            }
            a7[1] = v305;
          }
          v303 += 30;
        }
        while (v303 != v304);
        uint64_t v303 = (long long *)v359;
        unsigned int v14 = v327;
      }
      if (v303)
      {
        uint64_t v307 = *((void *)&v359 + 1);
        uint64_t v308 = v303;
        if (*((long long **)&v359 + 1) != v303)
        {
          do
            uint64_t v307 = sub_4451C0(v307 - 480);
          while ((long long *)v307 != v303);
          uint64_t v308 = (long long *)v359;
        }
        *((void *)&v359 + 1) = v303;
        operator delete(v308);
      }
    }
    else
    {
      while (*(double *)(sub_EB22DC(v276) + 32) <= 0.95 || *(double *)(sub_486CB4(v276) + 32) <= 0.95)
      {
        v276 += 480;
        if (v276 == v277) {
          goto LABEL_285;
        }
      }
    }
  }
  uint64_t v309 = (uint64_t)v9[13];
  uint64_t v310 = v9[14];
  unint64_t v311 = 126 - 2 * __clz(((uint64_t)v310 - v309) >> 5);
  if (v310 == (uint64_t *)v309) {
    uint64_t v312 = 0;
  }
  else {
    uint64_t v312 = v311;
  }
  sub_F35D00(v309, v310, (uint64_t)&v359, v312, 1);
  sub_F35B58((uint64_t *)v9 + 13);
  v315 = (void *)*a7;
  double v314 = (void *)a7[1];
  if ((void *)*a7 != v314)
  {
    do
    {
      sub_1073858((uint64_t)v9[3], v315);
      v315 += 60;
    }
    while (v315 != v314);
  }
  *((_DWORD *)v9 + 32) = v14;
  *((_DWORD *)v9 + 33) = sub_FC2A24((uint64_t)(v9[1] + 37), v313);
  if ((a5 & 1) == 0)
  {
    v316 = v9[1];
    *((unsigned char *)v316 + 1394) = 0;
    nullsub_1(v316 + 1);
    sub_CE3520((uint64_t)(v316 + 175));
    sub_CE35E0((uint64_t)(v316 + 185));
  }
  sub_1066038((uint64_t)(v9 + 4));
  v317 = (void **)v348;
  if (v348)
  {
    v318 = v349;
    v319 = v348;
    if (v349 != v348)
    {
      do
        v318 = (void **)sub_4451C0((uint64_t)(v318 - 60));
      while (v318 != v317);
      v319 = v348;
    }
    v349 = v317;
    operator delete(v319);
  }
  if (v357)
  {
    v358 = v357;
    operator delete(v357);
  }
  v320 = v356;
  if (v356)
  {
    do
    {
      v321 = (void *)*v320;
      operator delete(v320);
      v320 = v321;
    }
    while (v321);
  }
  v322 = v355;
  v355 = 0;
  if (v322) {
    operator delete(v322);
  }
  if (v353)
  {
    char v354 = v353;
    operator delete(v353);
  }
}

void sub_F50F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  sub_44106C(&a52);
  sub_44106C(v60);
  sub_3821F8(&a60);
  _Unwind_Resume(a1);
}

void sub_F51078(void **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, char a5@<W4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v11 = a1[1];
  *((unsigned char *)v11 + 1394) = 0;
  nullsub_1(v11 + 1);
  sub_CE3520((uint64_t)(v11 + 175));
  sub_CE35E0((uint64_t)(v11 + 185));
  unsigned int v13 = a1 + 17;
  uint64_t v12 = a1[17];
  a1[16] = 0;
  uint64_t v156 = (char **)(a1 + 17);
  if (v12)
  {
    a1[18] = v12;
    operator delete(v12);
    unsigned int v13 = a1 + 17;
    *uint64_t v156 = 0;
    a1[18] = 0;
    a1[19] = 0;
  }
  *unsigned int v13 = 0;
  v13[1] = 0;
  v13[2] = 0;
  sub_1076C48((uint64_t)v179, *a1);
  sub_F5C7F8(v178, *a1);
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  long long v175 = 0;
  long long v176 = 0;
  uint64_t v177 = 0;
  if (a6 == 0x7FFFFFFFFFFFFFFFLL || !*((unsigned char *)a1 + 84))
  {
    char v163 = (int64x2_t *)a7;
    if (!*((_DWORD *)a1 + 18)) {
      goto LABEL_6;
    }
  }
  else
  {
    char v163 = (int64x2_t *)a7;
    if (!*((_DWORD *)a1 + 18))
    {
LABEL_6:
      uint64_t v158 = 0;
      uint64_t v14 = a2;
      goto LABEL_148;
    }
  }
  uint64_t v158 = 0;
  uint64_t v159 = (void *)(a7 + 16);
  long long v160 = (char **)(a1 + 13);
  char v15 = 1;
  int v16 = 1;
  do
  {
    if (sub_F047E8(a2)) {
      sub_CE2264(a7, *(void ***)a7);
    }
    if (v16) {
      sub_CE2264((uint64_t)&v175, (void **)v175);
    }
    int v157 = v16;
    sub_F707D0();
    int v17 = (void *)sub_F047F8(a2);
    uint64_t v18 = v17;
    uint64_t v20 = (char *)a1[18];
    uint64_t v19 = (char *)a1[19];
    if (v20 < v19)
    {
      *(void *)uint64_t v20 = *v17;
      uint64_t v21 = (uint64_t)(v20 + 8);
      a7 = (uint64_t)v163;
      goto LABEL_36;
    }
    uint64_t v22 = *v156;
    uint64_t v23 = v20 - *v156;
    uint64_t v24 = v23 >> 3;
    unint64_t v25 = (v23 >> 3) + 1;
    if (v25 >> 61) {
      sub_2E00();
    }
    uint64_t v26 = v19 - v22;
    if (v26 >> 2 > v25) {
      unint64_t v25 = v26 >> 2;
    }
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v25;
    }
    if (v27)
    {
      if (v27 >> 61) {
        sub_188D718();
      }
      unint64_t v28 = operator new(8 * v27);
      uint64_t v29 = &v28[8 * v24];
      *uint64_t v29 = *v18;
      uint64_t v21 = (uint64_t)(v29 + 1);
      if (v20 == v22)
      {
LABEL_27:
        a7 = (uint64_t)v163;
        a1[17] = v29;
        a1[18] = (void *)v21;
        a1[19] = &v28[8 * v27];
        if (!v20) {
          goto LABEL_36;
        }
LABEL_35:
        operator delete(v20);
        goto LABEL_36;
      }
    }
    else
    {
      unint64_t v28 = 0;
      uint64_t v29 = (void *)(8 * v24);
      *(void *)(8 * v24) = *v18;
      uint64_t v21 = 8 * v24 + 8;
      if (v20 == v22) {
        goto LABEL_27;
      }
    }
    unint64_t v30 = v20 - 8 - v22;
    if (v30 < 0x58)
    {
      a7 = (uint64_t)v163;
      do
      {
LABEL_33:
        uint64_t v39 = *((void *)v20 - 1);
        v20 -= 8;
        *--uint64_t v29 = v39;
      }
      while (v20 != v22);
      goto LABEL_34;
    }
    unint64_t v31 = v20 - &v28[v23];
    a7 = (uint64_t)v163;
    if (v31 < 0x20) {
      goto LABEL_33;
    }
    uint64_t v32 = (v30 >> 3) + 1;
    uint64_t v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v34 = &v20[-v33];
    uint64_t v29 = (void *)((char *)v29 - v33);
    long long v35 = &v28[8 * v24 - 16];
    uint64_t v36 = v20 - 16;
    uint64_t v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v38 = *(_OWORD *)v36;
      *(v35 - 1) = *((_OWORD *)v36 - 1);
      *long long v35 = v38;
      v35 -= 2;
      v36 -= 32;
      v37 -= 4;
    }
    while (v37);
    uint64_t v20 = v34;
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_33;
    }
LABEL_34:
    uint64_t v20 = *v156;
    a1[17] = v29;
    a1[18] = (void *)v21;
    a1[19] = &v28[8 * v27];
    if (v20) {
      goto LABEL_35;
    }
LABEL_36:
    uint64_t v41 = (char *)v173;
    uint64_t v40 = v174;
    int v42 = HIDWORD(v158);
    if (v15) {
      int v42 = v173 != v174;
    }
    HIDWORD(v158) = v42;
    a1[18] = (void *)v21;
    *(_OWORD *)uint64_t v170 = 0u;
    *(_OWORD *)int v171 = 0u;
    int v172 = 1065353216;
    *(_OWORD *)int v167 = 0u;
    *(_OWORD *)unint64_t v168 = 0u;
    int v169 = 1065353216;
    uint64_t v162 = v40;
    if (v41 == v40)
    {
      int v164 = 0;
      int v43 = 0;
      long long v85 = v168[0];
      if (v168[0]) {
        goto LABEL_104;
      }
LABEL_141:
      BOOL v89 = v175 == v176;
      goto LABEL_107;
    }
    int v43 = 0;
    int v164 = 0;
    do
    {
      long long v45 = (int *)sub_37B3A8((uint64_t)*a1);
      uint64_t v46 = *(void **)v45;
      v187.i32[0] = v45[2];
      long long v186 = v46;
      uint64_t v47 = (uint64_t *)nullsub_1(v41);
      uint64_t v49 = *v47;
      uint64_t v48 = v47[1];
      if (*v47 == v48)
      {
        int v50 = 0;
      }
      else
      {
        int v50 = 0;
        do
        {
          int v51 = sub_F41B10((uint64_t)a1, v49, (uint64_t)v178, (uint64_t)&v186, a3, a4, (uint64_t)v170, (uint64_t)v167);
          unint64_t v52 = (int *)sub_1068D64((uint64_t)a1[2]);
          int v53 = sub_2A9F0((uint64_t)a1[2]);
          unint64_t v54 = sub_F5C828((uint64_t)v178, v49, v52, v45, v53, v45[2]);
          int v55 = v54[5];
          if (v54[4] != -1 && v55 != 0x7FFFFFFF && *((void *)v54 + 3) != 0x7FFFFFFFFFFFFFFFLL)
          {
            if (v187.i32[0]) {
              int v55 = -v55;
            }
            int v58 = v55 / 10;
            int v59 = v55 % 10;
            if (v55 < 0) {
              char v60 = -5;
            }
            else {
              char v60 = 5;
            }
            LODWORD(v186) = v58
                          + v186
                          + (((103 * (char)(v60 + v59)) >> 15) & 1)
                          + ((103 * (char)(v60 + v59)) >> 10);
          }
          v50 |= v51;
          v49 += 480;
        }
        while (v49 != v48);
      }
      if ((v50 & 0xC) != 0)
      {
        a7 = (uint64_t)v163;
        if (sub_F047E8(a2))
        {
          sub_EB1D94(&v186);
          unint64_t v61 = v163->u64[1];
          if (v61 >= v163[1].i64[0])
          {
            uint64_t v62 = sub_F5873C(v163, (long long *)&v186);
          }
          else
          {
            sub_EA8898(v163->i64[1], (long long *)&v186);
            uint64_t v62 = v61 + 48;
            v163->i64[1] = v61 + 48;
          }
          v163->i64[1] = v62;
          if (__p)
          {
            uint64_t v199 = __p;
            operator delete(__p);
          }
          if (v196)
          {
            long long v197 = v196;
            operator delete(v196);
          }
          if (v194)
          {
            long long v195 = v194;
            operator delete(v194);
          }
          if (v192)
          {
            long long v193 = v192;
            operator delete(v192);
          }
          int v70 = (char *)v190;
          if (v190)
          {
            unint64_t v71 = v191;
            unint64_t v72 = v190;
            if (v191 != v190)
            {
              do
              {
                long long v73 = (void *)*((void *)v71 - 3);
                if (v73)
                {
                  *((void *)v71 - 2) = v73;
                  operator delete(v73);
                }
                v71 -= 56;
              }
              while (v71 != v70);
              unint64_t v72 = v190;
            }
            long long v191 = v70;
            operator delete(v72);
          }
          if (v188)
          {
            uint64_t v189 = v188;
            operator delete(v188);
          }
          if (v187.i8[15] < 0) {
            operator delete(v186);
          }
        }
      }
      else
      {
        a7 = (uint64_t)v163;
        sub_1076CA8((uint64_t)v179, (uint64_t)v41);
        unint64_t v63 = v163->u64[1];
        unint64_t v64 = v163[1].u64[0];
        if (v63 < v64)
        {
          *(void *)unint64_t v63 = 0;
          *(void *)(v63 + 8) = 0;
          *(void *)(v63 + 16) = 0;
          *(_OWORD *)unint64_t v63 = *(_OWORD *)v41;
          *(void *)(v63 + 16) = *((void *)v41 + 2);
          *(void *)uint64_t v41 = 0;
          *((void *)v41 + 1) = 0;
          *((void *)v41 + 2) = 0;
          long long v44 = *(_OWORD *)(v41 + 24);
          *(void *)(v63 + 40) = *((void *)v41 + 5);
          *(_OWORD *)(v63 + 24) = v44;
          *((void *)v41 + 4) = 0;
          *((void *)v41 + 5) = 0;
          *((void *)v41 + 3) = 0;
          v163->i64[1] = v63 + 48;
        }
        else
        {
          unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - v163->i64[0]) >> 4);
          unint64_t v66 = v65 + 1;
          if (v65 + 1 > 0x555555555555555) {
            sub_2E00();
          }
          unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - v163->i64[0]) >> 4);
          if (2 * v67 > v66) {
            unint64_t v66 = 2 * v67;
          }
          if (v67 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v68 = 0x555555555555555;
          }
          else {
            unint64_t v68 = v66;
          }
          uint64_t v189 = v159;
          if (v68)
          {
            if (v68 > 0x555555555555555) {
              sub_188D718();
            }
            int v69 = (char *)operator new(48 * v68);
          }
          else
          {
            int v69 = 0;
          }
          long long v74 = &v69[48 * v65];
          long long v75 = &v69[48 * v68];
          long long v188 = v75;
          *(_OWORD *)long long v74 = *(_OWORD *)v41;
          *((void *)v74 + 2) = *((void *)v41 + 2);
          *((void *)v41 + 1) = 0;
          *((void *)v41 + 2) = 0;
          *(void *)uint64_t v41 = 0;
          long long v76 = *(_OWORD *)(v41 + 24);
          *((void *)v74 + 5) = *((void *)v41 + 5);
          *(_OWORD *)(v74 + 24) = v76;
          *((void *)v41 + 4) = 0;
          *((void *)v41 + 5) = 0;
          *((void *)v41 + 3) = 0;
          uint64_t v77 = (uint64_t)(v74 + 48);
          v187.i64[1] = (uint64_t)(v74 + 48);
          uint64_t v79 = v163->i64[0];
          unint64_t v78 = v163->u64[1];
          if (v78 == v163->i64[0])
          {
            int64x2_t v82 = vdupq_n_s64(v78);
          }
          else
          {
            do
            {
              *((void *)v74 - 6) = 0;
              *((void *)v74 - 5) = 0;
              v74 -= 48;
              *((void *)v74 + 2) = 0;
              long long v80 = *(_OWORD *)(v78 - 48);
              v78 -= 48;
              *(_OWORD *)long long v74 = v80;
              *((void *)v74 + 2) = *(void *)(v78 + 16);
              *(void *)unint64_t v78 = 0;
              *(void *)(v78 + 8) = 0;
              *(void *)(v78 + 16) = 0;
              long long v81 = *(_OWORD *)(v78 + 24);
              *((void *)v74 + 5) = *(void *)(v78 + 40);
              *(_OWORD *)(v74 + 24) = v81;
              *(void *)(v78 + 32) = 0;
              *(void *)(v78 + 40) = 0;
              *(void *)(v78 + 24) = 0;
            }
            while (v78 != v79);
            int64x2_t v82 = *v163;
            uint64_t v77 = v187.i64[1];
            long long v75 = (char *)v188;
          }
          v163->i64[0] = (uint64_t)v74;
          v163->i64[1] = v77;
          int64x2_t v187 = v82;
          long long v83 = (void *)v163[1].i64[0];
          v163[1].i64[0] = (uint64_t)v75;
          long long v188 = v83;
          long long v186 = (void *)v82.i64[0];
          sub_CE25EC((uint64_t)&v186, v82.i64[0]);
          if (v186) {
            operator delete(v186);
          }
          v163->i64[1] = v77;
        }
      }
      v43 |= v50;
      v164 |= (v50 & 2) >> 1;
      v41 += 48;
    }
    while (v41 != v162);
    long long v84 = (char *)v171[0];
    if (!v171[0])
    {
      long long v85 = v168[0];
      if (!v168[0]) {
        goto LABEL_141;
      }
      goto LABEL_104;
    }
    do
    {
      long long v98 = a1[1];
      *((unsigned char *)v98 + 1394) = 1;
      uint64_t v99 = (uint64_t)(v98 + 175);
      sub_F57BA4((uint64_t)(v98 + 175), 1);
      sub_F57E78(v99, (uint64_t *)v84 + 2, (uint64_t)&v186);
      int v100 = v188;
      uint64_t v102 = (char *)a1[14];
      long long v101 = (char *)a1[15];
      if (v102 >= v101)
      {
        uint64_t v103 = (v102 - *v160) >> 5;
        if ((unint64_t)(v103 + 1) >> 59) {
          sub_2E00();
        }
        uint64_t v104 = v101 - *v160;
        uint64_t v105 = v104 >> 4;
        if (v104 >> 4 <= (unint64_t)(v103 + 1)) {
          uint64_t v105 = v103 + 1;
        }
        if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v106 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v106 = v105;
        }
        if (v106)
        {
          if (v106 >> 59) {
            sub_188D718();
          }
          unint64_t v107 = (__n128 *)operator new(32 * v106);
        }
        else
        {
          unint64_t v107 = 0;
        }
        sub_45E5B0(&v107[2 * v103], (__n128 *)(v84 + 24));
        unint64_t v109 = (char *)a1[13];
        long long v96 = (char *)a1[14];
        if (v96 == v109)
        {
          long long v97 = v108 + 4;
          a1[13] = v108;
          a1[14] = v108 + 4;
          a1[15] = v107[2 * v106].n128_u64;
          if (v96) {
            goto LABEL_119;
          }
        }
        else
        {
          uint64_t v110 = 0;
          do
          {
            unint64_t v111 = &v108[v110];
            unint64_t v112 = &v96[v110 * 8];
            LODWORD(v108[v110 - 2]) = *(_DWORD *)&v96[v110 * 8 - 16];
            if (*(_DWORD *)&v96[v110 * 8 - 16] <= 1u) {
              *((_OWORD *)v111 - 2) = *((_OWORD *)v112 - 2);
            }
            *((unsigned char *)v111 - 8) = *(v112 - 8);
            v110 -= 4;
          }
          while (&v96[v110 * 8] != v109);
          long long v96 = *v160;
          long long v97 = v108 + 4;
          a1[13] = &v108[v110];
          a1[14] = v108 + 4;
          a1[15] = v107[2 * v106].n128_u64;
          if (v96) {
LABEL_119:
          }
            operator delete(v96);
        }
      }
      else
      {
        sub_45E5B0((__n128 *)a1[14], (__n128 *)(v84 + 24));
        long long v97 = v102 + 32;
        a1[14] = v102 + 32;
      }
      a1[14] = v97;
      v43 |= v100 != 0;
      long long v84 = *(char **)v84;
    }
    while (v84);
    a7 = (uint64_t)v163;
    long long v85 = v168[0];
    if (!v168[0]) {
      goto LABEL_141;
    }
    do
    {
LABEL_104:
      long long v86 = a1[1];
      *((unsigned char *)v86 + 1394) = 1;
      uint64_t v87 = (uint64_t)(v86 + 175);
      sub_F57BA4((uint64_t)(v86 + 175), 1);
      sub_F57E78(v87, v85 + 2, (uint64_t)&v186);
      v43 |= (_BYTE)v188 != 0;
      long long v85 = (void *)*v85;
    }
    while (v85);
    unint64_t v88 = v168[0];
    BOOL v89 = v175 == v176;
    if (v168[0])
    {
      do
      {
        long long v90 = (void *)*v88;
        operator delete(v88);
        unint64_t v88 = v90;
      }
      while (v90);
    }
LABEL_107:
    long long v91 = v167[0];
    v167[0] = 0;
    if (v91) {
      operator delete(v91);
    }
    long long v92 = v171[0];
    if (v171[0])
    {
      do
      {
        long long v93 = (void *)*v92;
        operator delete(v92);
        long long v92 = v93;
      }
      while (v93);
    }
    uint64_t v94 = v170[0];
    v170[0] = 0;
    if (v94) {
      operator delete(v94);
    }
    if (v173)
    {
      sub_CE2264((uint64_t)&v173, (void **)v173);
      operator delete(v173);
    }
    unsigned int v95 = *((_DWORD *)a1 + 18);
    if (((v43 | v164) & 1) == 0) {
      break;
    }
    char v15 = 0;
    int v16 = (v43 | v89) & v157;
    LODWORD(v158) = v158 + 1;
  }
  while (v158 < v95);
  uint64_t v14 = a2;
  if (v158 >= v95 && v175 != v176 && &v175 != (void **)a7) {
    sub_F588D0(a7, (const std::string *)v175, (uint64_t)v176, 0xAAAAAAAAAAAAAAABLL * ((v176 - (unsigned char *)v175) >> 4));
  }
LABEL_148:
  if (!(sub_F047F0(v14) & 1 | ((v158 & 0x100000000) == 0)) && *((unsigned char *)a1[3] + 8080))
  {
    unsigned int v114 = *(void ***)a7;
    unint64_t v113 = *(void ***)(a7 + 8);
    if (*(void ***)a7 == v113)
    {
LABEL_156:
      if (sub_F047E8(v14)) {
        sub_CE2264(a7, *(void ***)a7);
      }
      long long v115 = a1[1];
      *((unsigned char *)v115 + 1394) = 0;
      nullsub_1(v115 + 1);
      sub_CE3520((uint64_t)(v115 + 175));
      sub_CE35E0((uint64_t)(v115 + 185));
      sub_F707D0();
      long long v116 = (void *)sub_F047F8(v14);
      long long v117 = v116;
      long long v119 = (char *)a1[18];
      long long v118 = (char *)a1[19];
      if (v119 >= v118)
      {
        uint64_t v121 = *v156;
        uint64_t v122 = v119 - *v156;
        uint64_t v123 = v122 >> 3;
        unint64_t v124 = (v122 >> 3) + 1;
        if (v124 >> 61) {
          sub_2E00();
        }
        uint64_t v125 = v118 - v121;
        if (v125 >> 2 > v124) {
          unint64_t v124 = v125 >> 2;
        }
        if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v126 = v124;
        }
        if (v126)
        {
          if (v126 >> 61) {
            sub_188D718();
          }
          long long v127 = operator new(8 * v126);
        }
        else
        {
          long long v127 = 0;
        }
        long long v128 = &v127[8 * v123];
        long long v129 = &v127[8 * v126];
        *long long v128 = *v117;
        uint64_t v120 = v128 + 1;
        if (v119 != v121)
        {
          unint64_t v130 = v119 - v121 - 8;
          if (v130 < 0x58) {
            goto LABEL_222;
          }
          if ((unint64_t)(v119 - v127 - v122) < 0x20) {
            goto LABEL_222;
          }
          uint64_t v131 = (v130 >> 3) + 1;
          uint64_t v132 = 8 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v133 = &v119[-v132];
          long long v128 = (void *)((char *)v128 - v132);
          uint64_t v134 = &v127[8 * v123 - 16];
          long long v135 = v119 - 16;
          uint64_t v136 = v131 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v137 = *(_OWORD *)v135;
            *(v134 - 1) = *((_OWORD *)v135 - 1);
            *uint64_t v134 = v137;
            v134 -= 2;
            v135 -= 32;
            v136 -= 4;
          }
          while (v136);
          long long v119 = v133;
          if (v131 != (v131 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_222:
            do
            {
              uint64_t v138 = *((void *)v119 - 1);
              v119 -= 8;
              *--long long v128 = v138;
            }
            while (v119 != v121);
          }
          long long v119 = *v156;
        }
        a1[17] = v128;
        a1[18] = v120;
        a1[19] = v129;
        if (v119) {
          operator delete(v119);
        }
      }
      else
      {
        *(void *)long long v119 = *v116;
        uint64_t v120 = v119 + 8;
      }
      a1[18] = v120;
      uint64_t v140 = (char *)v186;
      long long v139 = (char *)v187.i64[0];
      if (v186 == (void *)v187.i64[0])
      {
        if (!v186) {
          goto LABEL_183;
        }
      }
      else
      {
        do
        {
          sub_1072C78((uint64_t)a1[3], (std::string *)v140, v166);
          if (v166[0])
          {
            v166[1] = v166[0];
            operator delete(v166[0]);
          }
          if (!sub_EA8E90((uint64_t *)v140) || sub_F047E8(v14))
          {
            unint64_t v154 = *(void *)(a7 + 8);
            if (v154 < *(void *)(a7 + 16))
            {
              *(void *)unint64_t v154 = 0;
              *(void *)(v154 + 8) = 0;
              *(void *)(v154 + 16) = 0;
              *(_OWORD *)unint64_t v154 = *(_OWORD *)v140;
              *(void *)(v154 + 16) = *((void *)v140 + 2);
              *(void *)uint64_t v140 = 0;
              *((void *)v140 + 1) = 0;
              *((void *)v140 + 2) = 0;
              long long v152 = *(_OWORD *)(v140 + 24);
              *(void *)(v154 + 40) = *((void *)v140 + 5);
              *(_OWORD *)(v154 + 24) = v152;
              *((void *)v140 + 4) = 0;
              *((void *)v140 + 5) = 0;
              *((void *)v140 + 3) = 0;
              long long v153 = (char *)(v154 + 48);
            }
            else
            {
              long long v153 = sub_F585AC((int64x2_t *)a7, (uint64_t)v140);
            }
            *(void *)(a7 + 8) = v153;
          }
          v140 += 48;
        }
        while (v140 != v139);
        uint64_t v140 = (char *)v186;
        if (!v186) {
          goto LABEL_183;
        }
      }
      sub_CE2264((uint64_t)&v186, (void **)v140);
      operator delete(v186);
      goto LABEL_183;
    }
    while (*(double *)(sub_EA904C((uint64_t *)v114) + 32) <= 0.95 || *(double *)(sub_EA9054((uint64_t)v114) + 32) <= 0.95)
    {
      v114 += 6;
      if (v114 == v113) {
        goto LABEL_156;
      }
    }
  }
LABEL_183:
  uint64_t v141 = (uint64_t)a1[13];
  long long v142 = a1[14];
  unint64_t v143 = 126 - 2 * __clz(((uint64_t)v142 - v141) >> 5);
  if (v142 == (uint64_t *)v141) {
    uint64_t v144 = 0;
  }
  else {
    uint64_t v144 = v143;
  }
  sub_F35D00(v141, v142, (uint64_t)&v186, v144, 1);
  sub_F35B58((uint64_t *)a1 + 13);
  long long v147 = *(void ***)a7;
  long long v146 = *(void ***)(a7 + 8);
  if (*(void ***)a7 != v146)
  {
    do
    {
      sub_10737EC((uint64_t)a1[3], (uint64_t)v147);
      v147 += 6;
    }
    while (v147 != v146);
  }
  *((_DWORD *)a1 + 32) = v158;
  *((_DWORD *)a1 + 33) = sub_FC2A24((uint64_t)(a1[1] + 37), v145);
  if ((a5 & 1) == 0)
  {
    uint64_t v148 = a1[1];
    *((unsigned char *)v148 + 1394) = 0;
    nullsub_1(v148 + 1);
    sub_CE3520((uint64_t)(v148 + 175));
    sub_CE35E0((uint64_t)(v148 + 185));
  }
  sub_1066038((uint64_t)(a1 + 4));
  if (v175)
  {
    sub_CE2264((uint64_t)&v175, (void **)v175);
    operator delete(v175);
  }
  if (v184)
  {
    long long v185 = v184;
    operator delete(v184);
  }
  uint64_t v149 = v183;
  if (v183)
  {
    do
    {
      long long v150 = (void *)*v149;
      operator delete(v149);
      uint64_t v149 = v150;
    }
    while (v150);
  }
  long long v151 = v182;
  long long v182 = 0;
  if (v151) {
    operator delete(v151);
  }
  if (v180)
  {
    long long v181 = v180;
    operator delete(v180);
  }
}

void sub_F51F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void **a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  sub_CE1C80(&a39);
  sub_CE1C80(v47);
  sub_3821F8(&a47);
  _Unwind_Resume(a1);
}

void sub_F52034(void **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, char a5@<W4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v11 = a1[1];
  *((unsigned char *)v11 + 1394) = 0;
  nullsub_1(v11 + 1);
  sub_CE3520((uint64_t)(v11 + 175));
  sub_CE35E0((uint64_t)(v11 + 185));
  unsigned int v13 = a1 + 17;
  uint64_t v12 = a1[17];
  a1[16] = 0;
  uint64_t v156 = (char **)(a1 + 17);
  if (v12)
  {
    a1[18] = v12;
    operator delete(v12);
    unsigned int v13 = a1 + 17;
    *uint64_t v156 = 0;
    a1[18] = 0;
    a1[19] = 0;
  }
  *unsigned int v13 = 0;
  v13[1] = 0;
  v13[2] = 0;
  sub_1076C48((uint64_t)v179, *a1);
  sub_F5C7F8(v178, *a1);
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  long long v175 = 0;
  long long v176 = 0;
  uint64_t v177 = 0;
  if (a6 == 0x7FFFFFFFFFFFFFFFLL || !*((unsigned char *)a1 + 84))
  {
    char v163 = (int64x2_t *)a7;
    if (!*((_DWORD *)a1 + 18)) {
      goto LABEL_6;
    }
  }
  else
  {
    char v163 = (int64x2_t *)a7;
    if (!*((_DWORD *)a1 + 18))
    {
LABEL_6:
      uint64_t v158 = 0;
      uint64_t v14 = a2;
      goto LABEL_148;
    }
  }
  uint64_t v158 = 0;
  uint64_t v159 = (void *)(a7 + 16);
  long long v160 = (char **)(a1 + 13);
  char v15 = 1;
  int v16 = 1;
  do
  {
    if (sub_F047E8(a2)) {
      sub_CE2264(a7, *(void ***)a7);
    }
    if (v16) {
      sub_CE2264((uint64_t)&v175, (void **)v175);
    }
    int v157 = v16;
    sub_F62754();
    int v17 = (void *)sub_F047F8(a2);
    uint64_t v18 = v17;
    uint64_t v20 = (char *)a1[18];
    uint64_t v19 = (char *)a1[19];
    if (v20 < v19)
    {
      *(void *)uint64_t v20 = *v17;
      uint64_t v21 = (uint64_t)(v20 + 8);
      a7 = (uint64_t)v163;
      goto LABEL_36;
    }
    uint64_t v22 = *v156;
    uint64_t v23 = v20 - *v156;
    uint64_t v24 = v23 >> 3;
    unint64_t v25 = (v23 >> 3) + 1;
    if (v25 >> 61) {
      sub_2E00();
    }
    uint64_t v26 = v19 - v22;
    if (v26 >> 2 > v25) {
      unint64_t v25 = v26 >> 2;
    }
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v25;
    }
    if (v27)
    {
      if (v27 >> 61) {
        sub_188D718();
      }
      unint64_t v28 = operator new(8 * v27);
      uint64_t v29 = &v28[8 * v24];
      *uint64_t v29 = *v18;
      uint64_t v21 = (uint64_t)(v29 + 1);
      if (v20 == v22)
      {
LABEL_27:
        a7 = (uint64_t)v163;
        a1[17] = v29;
        a1[18] = (void *)v21;
        a1[19] = &v28[8 * v27];
        if (!v20) {
          goto LABEL_36;
        }
LABEL_35:
        operator delete(v20);
        goto LABEL_36;
      }
    }
    else
    {
      unint64_t v28 = 0;
      uint64_t v29 = (void *)(8 * v24);
      *(void *)(8 * v24) = *v18;
      uint64_t v21 = 8 * v24 + 8;
      if (v20 == v22) {
        goto LABEL_27;
      }
    }
    unint64_t v30 = v20 - 8 - v22;
    if (v30 < 0x58)
    {
      a7 = (uint64_t)v163;
      do
      {
LABEL_33:
        uint64_t v39 = *((void *)v20 - 1);
        v20 -= 8;
        *--uint64_t v29 = v39;
      }
      while (v20 != v22);
      goto LABEL_34;
    }
    unint64_t v31 = v20 - &v28[v23];
    a7 = (uint64_t)v163;
    if (v31 < 0x20) {
      goto LABEL_33;
    }
    uint64_t v32 = (v30 >> 3) + 1;
    uint64_t v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v34 = &v20[-v33];
    uint64_t v29 = (void *)((char *)v29 - v33);
    long long v35 = &v28[8 * v24 - 16];
    uint64_t v36 = v20 - 16;
    uint64_t v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v38 = *(_OWORD *)v36;
      *(v35 - 1) = *((_OWORD *)v36 - 1);
      *long long v35 = v38;
      v35 -= 2;
      v36 -= 32;
      v37 -= 4;
    }
    while (v37);
    uint64_t v20 = v34;
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_33;
    }
LABEL_34:
    uint64_t v20 = *v156;
    a1[17] = v29;
    a1[18] = (void *)v21;
    a1[19] = &v28[8 * v27];
    if (v20) {
      goto LABEL_35;
    }
LABEL_36:
    uint64_t v41 = (char *)v173;
    uint64_t v40 = v174;
    int v42 = HIDWORD(v158);
    if (v15) {
      int v42 = v173 != v174;
    }
    HIDWORD(v158) = v42;
    a1[18] = (void *)v21;
    *(_OWORD *)uint64_t v170 = 0u;
    *(_OWORD *)int v171 = 0u;
    int v172 = 1065353216;
    *(_OWORD *)int v167 = 0u;
    *(_OWORD *)unint64_t v168 = 0u;
    int v169 = 1065353216;
    uint64_t v162 = v40;
    if (v41 == v40)
    {
      int v164 = 0;
      int v43 = 0;
      long long v85 = v168[0];
      if (v168[0]) {
        goto LABEL_104;
      }
LABEL_141:
      BOOL v89 = v175 == v176;
      goto LABEL_107;
    }
    int v43 = 0;
    int v164 = 0;
    do
    {
      long long v45 = (int *)sub_37B3A8((uint64_t)*a1);
      uint64_t v46 = *(void **)v45;
      v187.i32[0] = v45[2];
      long long v186 = v46;
      uint64_t v47 = (uint64_t *)nullsub_1(v41);
      uint64_t v49 = *v47;
      uint64_t v48 = v47[1];
      if (*v47 == v48)
      {
        int v50 = 0;
      }
      else
      {
        int v50 = 0;
        do
        {
          int v51 = sub_F41B10((uint64_t)a1, v49, (uint64_t)v178, (uint64_t)&v186, a3, a4, (uint64_t)v170, (uint64_t)v167);
          unint64_t v52 = (int *)sub_1068D64((uint64_t)a1[2]);
          int v53 = sub_2A9F0((uint64_t)a1[2]);
          unint64_t v54 = sub_F5C828((uint64_t)v178, v49, v52, v45, v53, v45[2]);
          int v55 = v54[5];
          if (v54[4] != -1 && v55 != 0x7FFFFFFF && *((void *)v54 + 3) != 0x7FFFFFFFFFFFFFFFLL)
          {
            if (v187.i32[0]) {
              int v55 = -v55;
            }
            int v58 = v55 / 10;
            int v59 = v55 % 10;
            if (v55 < 0) {
              char v60 = -5;
            }
            else {
              char v60 = 5;
            }
            LODWORD(v186) = v58
                          + v186
                          + (((103 * (char)(v60 + v59)) >> 15) & 1)
                          + ((103 * (char)(v60 + v59)) >> 10);
          }
          v50 |= v51;
          v49 += 480;
        }
        while (v49 != v48);
      }
      if ((v50 & 0xC) != 0)
      {
        a7 = (uint64_t)v163;
        if (sub_F047E8(a2))
        {
          sub_EB1D94(&v186);
          unint64_t v61 = v163->u64[1];
          if (v61 >= v163[1].i64[0])
          {
            uint64_t v62 = sub_F5873C(v163, (long long *)&v186);
          }
          else
          {
            sub_EA8898(v163->i64[1], (long long *)&v186);
            uint64_t v62 = v61 + 48;
            v163->i64[1] = v61 + 48;
          }
          v163->i64[1] = v62;
          if (__p)
          {
            uint64_t v199 = __p;
            operator delete(__p);
          }
          if (v196)
          {
            long long v197 = v196;
            operator delete(v196);
          }
          if (v194)
          {
            long long v195 = v194;
            operator delete(v194);
          }
          if (v192)
          {
            long long v193 = v192;
            operator delete(v192);
          }
          int v70 = (char *)v190;
          if (v190)
          {
            unint64_t v71 = v191;
            unint64_t v72 = v190;
            if (v191 != v190)
            {
              do
              {
                long long v73 = (void *)*((void *)v71 - 3);
                if (v73)
                {
                  *((void *)v71 - 2) = v73;
                  operator delete(v73);
                }
                v71 -= 56;
              }
              while (v71 != v70);
              unint64_t v72 = v190;
            }
            long long v191 = v70;
            operator delete(v72);
          }
          if (v188)
          {
            uint64_t v189 = v188;
            operator delete(v188);
          }
          if (v187.i8[15] < 0) {
            operator delete(v186);
          }
        }
      }
      else
      {
        a7 = (uint64_t)v163;
        sub_1076CA8((uint64_t)v179, (uint64_t)v41);
        unint64_t v63 = v163->u64[1];
        unint64_t v64 = v163[1].u64[0];
        if (v63 < v64)
        {
          *(void *)unint64_t v63 = 0;
          *(void *)(v63 + 8) = 0;
          *(void *)(v63 + 16) = 0;
          *(_OWORD *)unint64_t v63 = *(_OWORD *)v41;
          *(void *)(v63 + 16) = *((void *)v41 + 2);
          *(void *)uint64_t v41 = 0;
          *((void *)v41 + 1) = 0;
          *((void *)v41 + 2) = 0;
          long long v44 = *(_OWORD *)(v41 + 24);
          *(void *)(v63 + 40) = *((void *)v41 + 5);
          *(_OWORD *)(v63 + 24) = v44;
          *((void *)v41 + 4) = 0;
          *((void *)v41 + 5) = 0;
          *((void *)v41 + 3) = 0;
          v163->i64[1] = v63 + 48;
        }
        else
        {
          unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - v163->i64[0]) >> 4);
          unint64_t v66 = v65 + 1;
          if (v65 + 1 > 0x555555555555555) {
            sub_2E00();
          }
          unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - v163->i64[0]) >> 4);
          if (2 * v67 > v66) {
            unint64_t v66 = 2 * v67;
          }
          if (v67 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v68 = 0x555555555555555;
          }
          else {
            unint64_t v68 = v66;
          }
          uint64_t v189 = v159;
          if (v68)
          {
            if (v68 > 0x555555555555555) {
              sub_188D718();
            }
            int v69 = (char *)operator new(48 * v68);
          }
          else
          {
            int v69 = 0;
          }
          long long v74 = &v69[48 * v65];
          long long v75 = &v69[48 * v68];
          long long v188 = v75;
          *(_OWORD *)long long v74 = *(_OWORD *)v41;
          *((void *)v74 + 2) = *((void *)v41 + 2);
          *((void *)v41 + 1) = 0;
          *((void *)v41 + 2) = 0;
          *(void *)uint64_t v41 = 0;
          long long v76 = *(_OWORD *)(v41 + 24);
          *((void *)v74 + 5) = *((void *)v41 + 5);
          *(_OWORD *)(v74 + 24) = v76;
          *((void *)v41 + 4) = 0;
          *((void *)v41 + 5) = 0;
          *((void *)v41 + 3) = 0;
          uint64_t v77 = (uint64_t)(v74 + 48);
          v187.i64[1] = (uint64_t)(v74 + 48);
          uint64_t v79 = v163->i64[0];
          unint64_t v78 = v163->u64[1];
          if (v78 == v163->i64[0])
          {
            int64x2_t v82 = vdupq_n_s64(v78);
          }
          else
          {
            do
            {
              *((void *)v74 - 6) = 0;
              *((void *)v74 - 5) = 0;
              v74 -= 48;
              *((void *)v74 + 2) = 0;
              long long v80 = *(_OWORD *)(v78 - 48);
              v78 -= 48;
              *(_OWORD *)long long v74 = v80;
              *((void *)v74 + 2) = *(void *)(v78 + 16);
              *(void *)unint64_t v78 = 0;
              *(void *)(v78 + 8) = 0;
              *(void *)(v78 + 16) = 0;
              long long v81 = *(_OWORD *)(v78 + 24);
              *((void *)v74 + 5) = *(void *)(v78 + 40);
              *(_OWORD *)(v74 + 24) = v81;
              *(void *)(v78 + 32) = 0;
              *(void *)(v78 + 40) = 0;
              *(void *)(v78 + 24) = 0;
            }
            while (v78 != v79);
            int64x2_t v82 = *v163;
            uint64_t v77 = v187.i64[1];
            long long v75 = (char *)v188;
          }
          v163->i64[0] = (uint64_t)v74;
          v163->i64[1] = v77;
          int64x2_t v187 = v82;
          long long v83 = (void *)v163[1].i64[0];
          v163[1].i64[0] = (uint64_t)v75;
          long long v188 = v83;
          long long v186 = (void *)v82.i64[0];
          sub_CE25EC((uint64_t)&v186, v82.i64[0]);
          if (v186) {
            operator delete(v186);
          }
          v163->i64[1] = v77;
        }
      }
      v43 |= v50;
      v164 |= (v50 & 2) >> 1;
      v41 += 48;
    }
    while (v41 != v162);
    long long v84 = (char *)v171[0];
    if (!v171[0])
    {
      long long v85 = v168[0];
      if (!v168[0]) {
        goto LABEL_141;
      }
      goto LABEL_104;
    }
    do
    {
      long long v98 = a1[1];
      *((unsigned char *)v98 + 1394) = 1;
      uint64_t v99 = (uint64_t)(v98 + 175);
      sub_F57BA4((uint64_t)(v98 + 175), 1);
      sub_F57E78(v99, (uint64_t *)v84 + 2, (uint64_t)&v186);
      int v100 = v188;
      uint64_t v102 = (char *)a1[14];
      long long v101 = (char *)a1[15];
      if (v102 >= v101)
      {
        uint64_t v103 = (v102 - *v160) >> 5;
        if ((unint64_t)(v103 + 1) >> 59) {
          sub_2E00();
        }
        uint64_t v104 = v101 - *v160;
        uint64_t v105 = v104 >> 4;
        if (v104 >> 4 <= (unint64_t)(v103 + 1)) {
          uint64_t v105 = v103 + 1;
        }
        if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v106 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v106 = v105;
        }
        if (v106)
        {
          if (v106 >> 59) {
            sub_188D718();
          }
          unint64_t v107 = (__n128 *)operator new(32 * v106);
        }
        else
        {
          unint64_t v107 = 0;
        }
        sub_45E5B0(&v107[2 * v103], (__n128 *)(v84 + 24));
        unint64_t v109 = (char *)a1[13];
        long long v96 = (char *)a1[14];
        if (v96 == v109)
        {
          long long v97 = v108 + 4;
          a1[13] = v108;
          a1[14] = v108 + 4;
          a1[15] = v107[2 * v106].n128_u64;
          if (v96) {
            goto LABEL_119;
          }
        }
        else
        {
          uint64_t v110 = 0;
          do
          {
            unint64_t v111 = &v108[v110];
            unint64_t v112 = &v96[v110 * 8];
            LODWORD(v108[v110 - 2]) = *(_DWORD *)&v96[v110 * 8 - 16];
            if (*(_DWORD *)&v96[v110 * 8 - 16] <= 1u) {
              *((_OWORD *)v111 - 2) = *((_OWORD *)v112 - 2);
            }
            *((unsigned char *)v111 - 8) = *(v112 - 8);
            v110 -= 4;
          }
          while (&v96[v110 * 8] != v109);
          long long v96 = *v160;
          long long v97 = v108 + 4;
          a1[13] = &v108[v110];
          a1[14] = v108 + 4;
          a1[15] = v107[2 * v106].n128_u64;
          if (v96) {
LABEL_119:
          }
            operator delete(v96);
        }
      }
      else
      {
        sub_45E5B0((__n128 *)a1[14], (__n128 *)(v84 + 24));
        long long v97 = v102 + 32;
        a1[14] = v102 + 32;
      }
      a1[14] = v97;
      v43 |= v100 != 0;
      long long v84 = *(char **)v84;
    }
    while (v84);
    a7 = (uint64_t)v163;
    long long v85 = v168[0];
    if (!v168[0]) {
      goto LABEL_141;
    }
    do
    {
LABEL_104:
      long long v86 = a1[1];
      *((unsigned char *)v86 + 1394) = 1;
      uint64_t v87 = (uint64_t)(v86 + 175);
      sub_F57BA4((uint64_t)(v86 + 175), 1);
      sub_F57E78(v87, v85 + 2, (uint64_t)&v186);
      v43 |= (_BYTE)v188 != 0;
      long long v85 = (void *)*v85;
    }
    while (v85);
    unint64_t v88 = v168[0];
    BOOL v89 = v175 == v176;
    if (v168[0])
    {
      do
      {
        long long v90 = (void *)*v88;
        operator delete(v88);
        unint64_t v88 = v90;
      }
      while (v90);
    }
LABEL_107:
    long long v91 = v167[0];
    v167[0] = 0;
    if (v91) {
      operator delete(v91);
    }
    long long v92 = v171[0];
    if (v171[0])
    {
      do
      {
        long long v93 = (void *)*v92;
        operator delete(v92);
        long long v92 = v93;
      }
      while (v93);
    }
    uint64_t v94 = v170[0];
    v170[0] = 0;
    if (v94) {
      operator delete(v94);
    }
    if (v173)
    {
      sub_CE2264((uint64_t)&v173, (void **)v173);
      operator delete(v173);
    }
    unsigned int v95 = *((_DWORD *)a1 + 18);
    if (((v43 | v164) & 1) == 0) {
      break;
    }
    char v15 = 0;
    int v16 = (v43 | v89) & v157;
    LODWORD(v158) = v158 + 1;
  }
  while (v158 < v95);
  uint64_t v14 = a2;
  if (v158 >= v95 && v175 != v176 && &v175 != (void **)a7) {
    sub_F588D0(a7, (const std::string *)v175, (uint64_t)v176, 0xAAAAAAAAAAAAAAABLL * ((v176 - (unsigned char *)v175) >> 4));
  }
LABEL_148:
  if (!(sub_F047F0(v14) & 1 | ((v158 & 0x100000000) == 0)) && *((unsigned char *)a1[3] + 8080))
  {
    unsigned int v114 = *(void ***)a7;
    unint64_t v113 = *(void ***)(a7 + 8);
    if (*(void ***)a7 == v113)
    {
LABEL_156:
      if (sub_F047E8(v14)) {
        sub_CE2264(a7, *(void ***)a7);
      }
      long long v115 = a1[1];
      *((unsigned char *)v115 + 1394) = 0;
      nullsub_1(v115 + 1);
      sub_CE3520((uint64_t)(v115 + 175));
      sub_CE35E0((uint64_t)(v115 + 185));
      sub_F62754();
      long long v116 = (void *)sub_F047F8(v14);
      long long v117 = v116;
      long long v119 = (char *)a1[18];
      long long v118 = (char *)a1[19];
      if (v119 >= v118)
      {
        uint64_t v121 = *v156;
        uint64_t v122 = v119 - *v156;
        uint64_t v123 = v122 >> 3;
        unint64_t v124 = (v122 >> 3) + 1;
        if (v124 >> 61) {
          sub_2E00();
        }
        uint64_t v125 = v118 - v121;
        if (v125 >> 2 > v124) {
          unint64_t v124 = v125 >> 2;
        }
        if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v126 = v124;
        }
        if (v126)
        {
          if (v126 >> 61) {
            sub_188D718();
          }
          long long v127 = operator new(8 * v126);
        }
        else
        {
          long long v127 = 0;
        }
        long long v128 = &v127[8 * v123];
        long long v129 = &v127[8 * v126];
        *long long v128 = *v117;
        uint64_t v120 = v128 + 1;
        if (v119 != v121)
        {
          unint64_t v130 = v119 - v121 - 8;
          if (v130 < 0x58) {
            goto LABEL_222;
          }
          if ((unint64_t)(v119 - v127 - v122) < 0x20) {
            goto LABEL_222;
          }
          uint64_t v131 = (v130 >> 3) + 1;
          uint64_t v132 = 8 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v133 = &v119[-v132];
          long long v128 = (void *)((char *)v128 - v132);
          uint64_t v134 = &v127[8 * v123 - 16];
          long long v135 = v119 - 16;
          uint64_t v136 = v131 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v137 = *(_OWORD *)v135;
            *(v134 - 1) = *((_OWORD *)v135 - 1);
            *uint64_t v134 = v137;
            v134 -= 2;
            v135 -= 32;
            v136 -= 4;
          }
          while (v136);
          long long v119 = v133;
          if (v131 != (v131 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_222:
            do
            {
              uint64_t v138 = *((void *)v119 - 1);
              v119 -= 8;
              *--long long v128 = v138;
            }
            while (v119 != v121);
          }
          long long v119 = *v156;
        }
        a1[17] = v128;
        a1[18] = v120;
        a1[19] = v129;
        if (v119) {
          operator delete(v119);
        }
      }
      else
      {
        *(void *)long long v119 = *v116;
        uint64_t v120 = v119 + 8;
      }
      a1[18] = v120;
      uint64_t v140 = (char *)v186;
      long long v139 = (char *)v187.i64[0];
      if (v186 == (void *)v187.i64[0])
      {
        if (!v186) {
          goto LABEL_183;
        }
      }
      else
      {
        do
        {
          sub_1072C78((uint64_t)a1[3], (std::string *)v140, v166);
          if (v166[0])
          {
            v166[1] = v166[0];
            operator delete(v166[0]);
          }
          if (!sub_EA8E90((uint64_t *)v140) || sub_F047E8(v14))
          {
            unint64_t v154 = *(void *)(a7 + 8);
            if (v154 < *(void *)(a7 + 16))
            {
              *(void *)unint64_t v154 = 0;
              *(void *)(v154 + 8) = 0;
              *(void *)(v154 + 16) = 0;
              *(_OWORD *)unint64_t v154 = *(_OWORD *)v140;
              *(void *)(v154 + 16) = *((void *)v140 + 2);
              *(void *)uint64_t v140 = 0;
              *((void *)v140 + 1) = 0;
              *((void *)v140 + 2) = 0;
              long long v152 = *(_OWORD *)(v140 + 24);
              *(void *)(v154 + 40) = *((void *)v140 + 5);
              *(_OWORD *)(v154 + 24) = v152;
              *((void *)v140 + 4) = 0;
              *((void *)v140 + 5) = 0;
              *((void *)v140 + 3) = 0;
              long long v153 = (char *)(v154 + 48);
            }
            else
            {
              long long v153 = sub_F585AC((int64x2_t *)a7, (uint64_t)v140);
            }
            *(void *)(a7 + 8) = v153;
          }
          v140 += 48;
        }
        while (v140 != v139);
        uint64_t v140 = (char *)v186;
        if (!v186) {
          goto LABEL_183;
        }
      }
      sub_CE2264((uint64_t)&v186, (void **)v140);
      operator delete(v186);
      goto LABEL_183;
    }
    while (*(double *)(sub_EA904C((uint64_t *)v114) + 32) <= 0.95 || *(double *)(sub_EA9054((uint64_t)v114) + 32) <= 0.95)
    {
      v114 += 6;
      if (v114 == v113) {
        goto LABEL_156;
      }
    }
  }
LABEL_183:
  uint64_t v141 = (uint64_t)a1[13];
  long long v142 = a1[14];
  unint64_t v143 = 126 - 2 * __clz(((uint64_t)v142 - v141) >> 5);
  if (v142 == (uint64_t *)v141) {
    uint64_t v144 = 0;
  }
  else {
    uint64_t v144 = v143;
  }
  sub_F35D00(v141, v142, (uint64_t)&v186, v144, 1);
  sub_F35B58((uint64_t *)a1 + 13);
  long long v147 = *(void ***)a7;
  long long v146 = *(void ***)(a7 + 8);
  if (*(void ***)a7 != v146)
  {
    do
    {
      sub_10737EC((uint64_t)a1[3], (uint64_t)v147);
      v147 += 6;
    }
    while (v147 != v146);
  }
  *((_DWORD *)a1 + 32) = v158;
  *((_DWORD *)a1 + 33) = sub_FC2A24((uint64_t)(a1[1] + 37), v145);
  if ((a5 & 1) == 0)
  {
    uint64_t v148 = a1[1];
    *((unsigned char *)v148 + 1394) = 0;
    nullsub_1(v148 + 1);
    sub_CE3520((uint64_t)(v148 + 175));
    sub_CE35E0((uint64_t)(v148 + 185));
  }
  sub_1066038((uint64_t)(a1 + 4));
  if (v175)
  {
    sub_CE2264((uint64_t)&v175, (void **)v175);
    operator delete(v175);
  }
  if (v184)
  {
    long long v185 = v184;
    operator delete(v184);
  }
  uint64_t v149 = v183;
  if (v183)
  {
    do
    {
      long long v150 = (void *)*v149;
      operator delete(v149);
      uint64_t v149 = v150;
    }
    while (v150);
  }
  long long v151 = v182;
  long long v182 = 0;
  if (v151) {
    operator delete(v151);
  }
  if (v180)
  {
    long long v181 = v180;
    operator delete(v180);
  }
}

void sub_F52EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void **a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  sub_CE1C80(&a39);
  sub_CE1C80(v47);
  sub_3821F8(&a47);
  _Unwind_Resume(a1);
}

uint64_t *sub_F52FF0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = (*a2 >> 16) & 0xFFFF0000 | (*a2 << 32);
  unint64_t v8 = 0x2127599BF4325C37 * ((v7 | ((*a2 & 0xFF000000000000) == 0)) ^ (v7 >> 23));
  unint64_t v9 = v8 ^ (v8 >> 47);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8 ^ (v8 >> 47);
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      unsigned int v13 = *v12;
      if (*v12)
      {
        unint64_t v14 = a2[1];
        unint64_t v15 = a2[2];
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == v9)
            {
              if (__PAIR64__(*((unsigned __int16 *)v13 + 10), *((_DWORD *)v13 + 4)) == __PAIR64__(WORD2(v6), v6)
                && (HIWORD(v6) & 1) != (*((unsigned char *)v13 + 22) == 0)
                && v13[3] == v14
                && v13[4] == v15)
              {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v3)
            {
              goto LABEL_30;
            }
            unsigned int v13 = (uint64_t *)*v13;
            if (!v13) {
              goto LABEL_30;
            }
          }
        }
        do
        {
          unint64_t v18 = v13[1];
          if (v18 == v9)
          {
            if (__PAIR64__(*((unsigned __int16 *)v13 + 10), *((_DWORD *)v13 + 4)) == __PAIR64__(WORD2(v6), v6)
              && (HIWORD(v6) & 1) != (*((unsigned char *)v13 + 22) == 0)
              && v13[3] == v14
              && v13[4] == v15)
            {
              return v13;
            }
          }
          else
          {
            if (v18 >= v10) {
              v18 %= v10;
            }
            if (v18 != v3) {
              break;
            }
          }
          unsigned int v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_30:
  uint64_t v19 = operator new(0x28uLL);
  *uint64_t v19 = 0;
  v19[1] = v9;
  *((_OWORD *)v19 + 1) = *(_OWORD *)a3;
  v19[4] = *(void *)(a3 + 16);
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
    if (v23)
    {
LABEL_33:
      *uint64_t v19 = *v23;
LABEL_68:
      *uint64_t v23 = v19;
      goto LABEL_69;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_44;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_44:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_33;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_33;
        }
      }
    }
    else
    {
      unint64_t v3 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_33;
      }
    }
  }
  *uint64_t v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v19;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v19)
  {
    unint64_t v32 = *(void *)(*v19 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_68;
  }
LABEL_69:
  ++*(void *)(a1 + 24);
  return v19;
}

void sub_F533C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F533D4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t result = sub_F537D8(a1);
    unint64_t v5 = *(void *)(a1 + 128);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v5 = *(void *)(a1 + 128);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  unint64_t v6 = *(void *)(a1 + 136);
  unint64_t v7 = v5 + a2;
  if (v6 < 4 || v7 > *(void *)a1)
  {
    float v8 = *(float *)(a1 + 16);
    unint64_t v9 = vcvts_n_u32_f32(v8, 2uLL);
    unint64_t v10 = 4;
    if (v7 >= v9)
    {
      while ((v10 & 0x8000000000000000) == 0)
      {
        v10 *= 2;
        if (v7 < (unint64_t)(float)(v8 * (float)v10)) {
          goto LABEL_8;
        }
      }
LABEL_27:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
LABEL_8:
    if (v10 > v6)
    {
      unint64_t v11 = *(void *)(a1 + 120);
      unint64_t v12 = v5 - v11 + a2;
      unint64_t v13 = 4;
      if (v6 > 4) {
        goto LABEL_11;
      }
LABEL_10:
      if (v12 >= (unint64_t)(float)(v8 * (float)v13))
      {
LABEL_11:
        while ((v13 & 0x8000000000000000) == 0)
        {
          v13 *= 2;
          if (v13 >= v6) {
            goto LABEL_10;
          }
        }
        goto LABEL_27;
      }
      unint64_t v14 = v7 - (v11 >> 2);
      unint64_t v15 = 4;
      if (v14 >= v9)
      {
        while ((v15 & 0x8000000000000000) == 0)
        {
          v15 *= 2;
          if (v14 < (unint64_t)(float)(v8 * (float)v15)) {
            goto LABEL_19;
          }
        }
        goto LABEL_27;
      }
LABEL_19:
      if (v13 <= 0x7FFFFFFFFFFFFFFELL
        && v13 < v15
        && v12 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v13)))
      {
        v13 *= 2;
      }
      sub_F53A28((uint64_t)&v41, a1, v13);
      uint64x2_t v17 = *(uint64x2_t *)a1;
      long long v16 = *(_OWORD *)(a1 + 16);
      long long v18 = v42;
      *(uint64x2_t *)a1 = v41;
      *(_OWORD *)(a1 + 16) = v18;
      uint64x2_t v41 = v17;
      long long v42 = v16;
      long long v19 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)&v62[16] = *(_OWORD *)(a1 + 64);
      long long v63 = v19;
      long long v64 = *(_OWORD *)(a1 + 96);
      uint64_t v65 = *(void *)(a1 + 112);
      long long v20 = *(_OWORD *)(a1 + 48);
      long long v61 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)uint64_t v62 = v20;
      long long v21 = v46;
      *(_OWORD *)(a1 + 64) = v45;
      *(_OWORD *)(a1 + 80) = v21;
      *(_OWORD *)(a1 + 96) = v47;
      *(void *)(a1 + 112) = v48;
      long long v22 = v44;
      *(_OWORD *)(a1 + 32) = v43;
      *(_OWORD *)(a1 + 48) = v22;
      long long v43 = v61;
      long long v44 = *(_OWORD *)v62;
      uint64_t v48 = v65;
      long long v46 = v63;
      long long v47 = v64;
      long long v45 = *(_OWORD *)&v62[16];
      long long v23 = *(_OWORD *)(a1 + 120);
      *(_OWORD *)(a1 + 120) = v49;
      long long v49 = v23;
      unint64_t v24 = *(void *)(a1 + 136);
      unint64_t v25 = v50;
      *(void *)(a1 + 136) = v50;
      unint64_t v50 = v24;
      long long v26 = *(_OWORD *)(a1 + 160);
      long long v58 = *(_OWORD *)(a1 + 144);
      long long v59 = v26;
      int v60 = *(_DWORD *)(a1 + 176);
      __int16 v27 = *(_WORD *)(a1 + 180);
      char v28 = *(unsigned char *)(a1 + 182);
      long long v29 = *(_OWORD *)(a1 + 199);
      long long v61 = *(_OWORD *)(a1 + 183);
      *(_OWORD *)uint64_t v62 = v29;
      *(void *)&v62[13] = *(void *)(a1 + 212);
      int v30 = *(_DWORD *)(a1 + 220);
      int v31 = *(_DWORD *)(a1 + 224);
      char v32 = *(unsigned char *)(a1 + 228);
      __int16 v33 = *(_WORD *)(a1 + 229);
      char v57 = *(unsigned char *)(a1 + 231);
      __int16 v56 = v33;
      long long v34 = v52;
      *(_OWORD *)(a1 + 144) = v51;
      *(_OWORD *)(a1 + 160) = v34;
      long long v35 = *(_OWORD *)&v53[32];
      long long v36 = *(_OWORD *)v53;
      *(_OWORD *)(a1 + 192) = *(_OWORD *)&v53[16];
      *(_OWORD *)(a1 + 208) = v35;
      *(_OWORD *)(a1 + 176) = v36;
      *(_DWORD *)int v53 = v60;
      long long v51 = v58;
      long long v52 = v59;
      *(_WORD *)&v53[4] = v27;
      v53[6] = v28;
      uint64_t v37 = v54;
      long long v38 = v55;
      *(void *)&v53[36] = *(void *)&v62[13];
      *(_OWORD *)&v53[23] = *(_OWORD *)v62;
      *(_OWORD *)&v53[7] = v61;
      *(_DWORD *)&v53[44] = v30;
      LODWORD(v54) = v31;
      BYTE4(v54) = v32;
      HIBYTE(v54) = v57;
      *(_WORD *)((char *)&v54 + 5) = v56;
      uint64_t v39 = *(void **)(a1 + 232);
      *(void *)(a1 + 224) = v37;
      *(void *)(a1 + 232) = v38;
      int v55 = v39;
      *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)v25)));
      *(unsigned char *)(a1 + 24) = 0;
      uint64x2_t v41 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v42, (float)v24)));
      BYTE8(v42) = 0;
      if (v39) {
        free(v39);
      }
      return 1;
    }
  }
  return result;
}

void sub_F53788(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_F5379C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_F537B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_F537C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F537D8(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 128) - *(void *)(a1 + 120);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 136), v5 < 0x21))
  {
    uint64_t result = 0;
  }
  else
  {
    float v6 = (float)v2;
    do
    {
      unint64_t v7 = v5;
      v5 >>= 1;
    }
    while (v7 >= 0x42 && (float)(*(float *)(a1 + 20) * (float)v5) > v6);
    sub_F53A28((uint64_t)&v33, a1, v5);
    uint64x2_t v9 = *(uint64x2_t *)a1;
    long long v8 = *(_OWORD *)(a1 + 16);
    long long v10 = v34;
    *(uint64x2_t *)a1 = v33;
    *(_OWORD *)(a1 + 16) = v10;
    uint64x2_t v33 = v9;
    long long v34 = v8;
    long long v11 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)&v54[16] = *(_OWORD *)(a1 + 64);
    long long v55 = v11;
    long long v56 = *(_OWORD *)(a1 + 96);
    uint64_t v57 = *(void *)(a1 + 112);
    long long v12 = *(_OWORD *)(a1 + 48);
    long long v53 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)uint64_t v54 = v12;
    long long v13 = v38;
    *(_OWORD *)(a1 + 64) = v37;
    *(_OWORD *)(a1 + 80) = v13;
    *(_OWORD *)(a1 + 96) = v39;
    *(void *)(a1 + 112) = v40;
    long long v14 = v36;
    *(_OWORD *)(a1 + 32) = v35;
    *(_OWORD *)(a1 + 48) = v14;
    long long v35 = v53;
    long long v36 = *(_OWORD *)v54;
    uint64_t v40 = v57;
    long long v38 = v55;
    long long v39 = v56;
    long long v37 = *(_OWORD *)&v54[16];
    long long v15 = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(a1 + 120) = v41;
    long long v41 = v15;
    unint64_t v16 = *(void *)(a1 + 136);
    unint64_t v17 = v42;
    *(void *)(a1 + 136) = v42;
    unint64_t v42 = v16;
    long long v18 = *(_OWORD *)(a1 + 160);
    long long v50 = *(_OWORD *)(a1 + 144);
    long long v51 = v18;
    int v52 = *(_DWORD *)(a1 + 176);
    __int16 v19 = *(_WORD *)(a1 + 180);
    char v20 = *(unsigned char *)(a1 + 182);
    long long v21 = *(_OWORD *)(a1 + 199);
    long long v53 = *(_OWORD *)(a1 + 183);
    *(_OWORD *)uint64_t v54 = v21;
    *(void *)&v54[13] = *(void *)(a1 + 212);
    int v22 = *(_DWORD *)(a1 + 220);
    int v23 = *(_DWORD *)(a1 + 224);
    char v24 = *(unsigned char *)(a1 + 228);
    __int16 v25 = *(_WORD *)(a1 + 229);
    char v49 = *(unsigned char *)(a1 + 231);
    __int16 v48 = v25;
    long long v26 = v44;
    *(_OWORD *)(a1 + 144) = v43;
    *(_OWORD *)(a1 + 160) = v26;
    long long v27 = *(_OWORD *)&v45[32];
    long long v28 = *(_OWORD *)v45;
    *(_OWORD *)(a1 + 192) = *(_OWORD *)&v45[16];
    *(_OWORD *)(a1 + 208) = v27;
    *(_OWORD *)(a1 + 176) = v28;
    *(_DWORD *)long long v45 = v52;
    long long v43 = v50;
    long long v44 = v51;
    *(_WORD *)&v45[4] = v19;
    v45[6] = v20;
    uint64_t v29 = v46;
    int v30 = v47;
    *(void *)&v45[36] = *(void *)&v54[13];
    *(_OWORD *)&v45[23] = *(_OWORD *)v54;
    *(_OWORD *)&v45[7] = v53;
    *(_DWORD *)&v45[44] = v22;
    LODWORD(v46) = v23;
    BYTE4(v46) = v24;
    HIBYTE(v46) = v49;
    *(_WORD *)((char *)&v46 + 5) = v48;
    int v31 = *(void **)(a1 + 232);
    *(void *)(a1 + 224) = v29;
    *(void *)(a1 + 232) = v30;
    long long v47 = v31;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)v17)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v33 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v34, (float)v16)));
    BYTE8(v34) = 0;
    if (v31) {
      free(v31);
    }
    uint64_t result = 1;
  }
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

float sub_F53A28(uint64_t a1, uint64_t a2, unint64_t a3)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  long long v5 = *(_OWORD *)(a2 + 64);
  long long v6 = *(_OWORD *)(a2 + 96);
  uint64_t v7 = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 64) = v5;
  *(void *)(a1 + 112) = v7;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  long long v8 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v8;
  long long v9 = *(_OWORD *)(a2 + 176);
  long long v10 = *(_OWORD *)(a2 + 208);
  uint64_t v11 = *(void *)(a2 + 224);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v10;
  *(_OWORD *)(a1 + 176) = v9;
  *(void *)(a1 + 224) = v11;
  *(void *)(a1 + 232) = 0;
  if (*(unsigned char *)(a2 + 25))
  {
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)(a1 + 16), 0)));
    *(unsigned char *)(a1 + 24) = 0;
    sub_F53B94(a1, (void *)a2, a3);
  }
  else
  {
    unint64_t v13 = 4;
    if (a3 > 4) {
      goto LABEL_5;
    }
    while (1)
    {
      float v14 = *(float *)(a1 + 16) * (float)v13;
      if (*(void *)(a2 + 128) - *(void *)(a2 + 120) < (unint64_t)v14) {
        break;
      }
      do
      {
LABEL_5:
        if ((v13 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "resize overflow");
        }
        v13 *= 2;
      }
      while (v13 < a3);
    }
    *(void *)(a1 + 136) = v13;
    float result = *(float *)(a1 + 20) * (float)v13;
    *(void *)a1 = (unint64_t)v14;
    *(void *)(a1 + 8) = (unint64_t)result;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_F53B80(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_F53B94(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v5 = a2[16] - a2[15];
  unint64_t v6 = 4;
  if (a3 > 4) {
    goto LABEL_3;
  }
  while (v5 >= (unint64_t)(float)(*(float *)(a1 + 16) * (float)v6))
  {
    do
    {
LABEL_3:
      if ((v6 & 0x8000000000000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v6 *= 2;
    }
    while (v6 < a3);
  }
  sub_C6334C(a1, v6);
  uint64_t v7 = a2[29];
  uint64_t v8 = v7 + 88 * a2[17];
  long long v35 = a2;
  uint64_t v36 = v7;
  uint64_t v37 = v8;
  sub_F53EB8(&v35);
  uint64_t v9 = a2[29] + 88 * a2[17];
  char v32 = a2;
  uint64_t v33 = v9;
  uint64_t v34 = v9;
  float result = sub_F53EB8(&v32);
  for (uint64_t i = v36; v36 != v33; uint64_t i = v36)
  {
    unint64_t v12 = *(void *)(i + 32);
    unint64_t v13 = *(unsigned __int8 *)(i + 84);
    uint64_t v14 = 4 * (unsigned __int16)*(_DWORD *)(i + 80);
    unint64_t v15 = 0x2127599BF4325C37
        * (((((v12 >> 16) & 0xFFFF0000 | (v12 << 32) | (2 * ((v12 & 0xFF000000000000) == 0))) + v14) & 0xFFFFFFFFFFFFFFFELL | v13 & 1) ^ ((((v12 >> 16) & 0xFFFF0000 | (v12 << 32) | (2 * ((v12 & 0xFF000000000000) == 0))) + v14) >> 23));
    unint64_t v16 = *(void *)(i + 72);
    unint64_t v17 = ((unint64_t)*(unsigned int *)(i + 80) >> 14) & 0x3FFFC;
    unint64_t v18 = 0x2127599BF4325C37
        * (((v13 >> 1) & 1 | (2 * ((v16 & 0xFF000000000000) == 0)) | ((v17 | (v16 << 32))
                                                                        + ((v16 >> 16) & 0xFFFF0000))) ^ (((v17 | (v16 << 32)) + ((v16 >> 16) & 0xFFFF0000)) >> 23));
    unint64_t v19 = ((v18 ^ (v18 >> 47))
         + ((((v15 ^ (v15 >> 47)) + 0x388152A534) ^ 0xDEADBEEF) << 6)
         + ((((v15 ^ (v15 >> 47)) + 0x388152A534) ^ 0xDEADBEEF) >> 2)
         + 2654435769u) ^ ((v15 ^ (v15 >> 47)) + 0x388152A534) ^ 0xDEADBEEF;
    uint64_t v20 = *(void *)(a1 + 232);
    for (uint64_t j = 1; ; ++j)
    {
      uint64_t v22 = v19 & (*(void *)(a1 + 136) - 1);
      unint64_t v23 = *(void *)(v20 + 88 * v22 + 32);
      if (__PAIR64__(*(unsigned __int16 *)(a1 + 180), *(_DWORD *)(a1 + 176)) == __PAIR64__(WORD2(v23), v23)
        && (HIWORD(v23) & 1) != (*(unsigned char *)(a1 + 182) == 0))
      {
        unint64_t v24 = *(void *)(v20 + 88 * v22 + 72);
        if (__PAIR64__(*(unsigned __int16 *)(a1 + 220), *(_DWORD *)(a1 + 216)) == __PAIR64__(WORD2(v24), v24)
          && (HIWORD(v24) & 1) != (*(unsigned char *)(a1 + 222) == 0)
          && *(_DWORD *)(a1 + 224) == *(_DWORD *)(v20 + 88 * v22 + 80)
          && ((*(unsigned char *)(v20 + 88 * v22 + 84) ^ *(unsigned char *)(a1 + 228)) & 7) == 0)
        {
          break;
        }
      }
      unint64_t v19 = j + v22;
    }
    uint64_t v25 = v20 + 88 * v22;
    long long v26 = *(_OWORD *)(i + 16);
    *(_OWORD *)uint64_t v25 = *(_OWORD *)i;
    *(_OWORD *)(v25 + 16) = v26;
    long long v27 = *(_OWORD *)(i + 32);
    long long v28 = *(_OWORD *)(i + 48);
    long long v29 = *(_OWORD *)(i + 64);
    *(void *)(v25 + 80) = *(void *)(i + 80);
    *(_OWORD *)(v25 + 48) = v28;
    *(_OWORD *)(v25 + 64) = v29;
    *(_OWORD *)(v25 + 32) = v27;
    ++*(void *)(a1 + 128);
    uint64_t v36 = i + 88;
    sub_F53EB8(&v35);
    uint64_t v30 = a2[29] + 88 * a2[17];
    char v32 = a2;
    uint64_t v33 = v30;
    uint64_t v34 = v30;
    float result = sub_F53EB8(&v32);
  }
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void sub_F53EA4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_F53EB8(void *result)
{
  uint64_t v2 = result[1];
  uint64_t v1 = result[2];
  if (v2 != v1)
  {
    uint64_t v3 = *result;
    int v4 = *(_DWORD *)(*result + 176);
    uint64_t v5 = v2 + 88;
    do
    {
      unint64_t v6 = *(void *)(v5 - 56);
      uint64_t v7 = HIWORD(v6) & 1;
      if (v4 != v6
        || *(unsigned __int16 *)(v3 + 180) != WORD2(v6)
        || v7 == (*(unsigned char *)(v3 + 182) == 0)
        || (unint64_t v8 = *(void *)(v5 - 16),
            __PAIR64__(*(unsigned __int16 *)(v3 + 220), *(_DWORD *)(v3 + 216)) != __PAIR64__(WORD2(v8), v8))
        || (HIWORD(v8) & 1) == (*(unsigned char *)(v3 + 222) == 0)
        || *(_DWORD *)(v3 + 224) != *(_DWORD *)(v5 - 8)
        || ((*(unsigned char *)(v5 - 4) ^ *(unsigned char *)(v3 + 228)) & 7) != 0)
      {
        if (!*(void *)(v3 + 120)) {
          break;
        }
        if (__PAIR64__(*(unsigned __int16 *)(v3 + 68), *(_DWORD *)(v3 + 64)) != __PAIR64__(WORD2(v6), v6)) {
          break;
        }
        if (v7 == (*(unsigned char *)(v3 + 70) == 0)) {
          break;
        }
        unint64_t v9 = *(void *)(v5 - 16);
        if (__PAIR64__(*(unsigned __int16 *)(v3 + 108), *(_DWORD *)(v3 + 104)) != __PAIR64__(WORD2(v9), v9)
          || (HIWORD(v9) & 1) == (*(unsigned char *)(v3 + 110) == 0)
          || *(_DWORD *)(v3 + 112) != *(_DWORD *)(v5 - 8)
          || ((*(unsigned char *)(v5 - 4) ^ *(unsigned char *)(v3 + 116)) & 7) != 0)
        {
          break;
        }
      }
      result[1] = v5;
      BOOL v10 = v5 == v1;
      v5 += 88;
    }
    while (!v10);
  }
  return result;
}

uint64_t sub_F54008(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *(void *)(a2 + 32);
  unint64_t v4 = *(unsigned int *)(a2 + 80);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 84);
  uint64_t v6 = 4 * (unsigned __int16)*(_DWORD *)(a2 + 80);
  unint64_t v7 = ((((v3 >> 16) & 0xFFFF0000 | (v3 << 32) | (2 * ((v3 & 0xFF000000000000) == 0))) + v6) & 0xFFFFFFFFFFFFFFFELL | v5 & 1) ^ ((((v3 >> 16) & 0xFFFF0000 | (v3 << 32) | (2 * ((v3 & 0xFF000000000000) == 0))) + v6) >> 23);
  unint64_t v8 = (((0x2127599BF4325C37 * v7) ^ ((0x2127599BF4325C37 * v7) >> 47)) + 0x388152A534) ^ 0xDEADBEEF;
  unint64_t v9 = *(void *)(a2 + 72);
  uint64_t v10 = v9 & 0xFF000000000000;
  unint64_t v11 = 0x2127599BF4325C37
      * (((v5 >> 1) & 1 | (2 * ((v9 & 0xFF000000000000) == 0)) | (((v4 >> 14) & 0x3FFFC | (v9 << 32))
                                                                    + ((v9 >> 16) & 0xFFFF0000))) ^ ((((v4 >> 14) & 0x3FFFC | (v9 << 32)) + ((v9 >> 16) & 0xFFFF0000)) >> 23));
  uint64_t v12 = ((v11 ^ (v11 >> 47)) + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
  uint64_t v13 = *(void *)(a1 + 232);
  uint64_t v14 = v9 & 0xFFFFFFFFFFFFLL;
  uint64_t v15 = -1;
  while (1)
  {
    uint64_t v16 = v12 & (*(void *)(a1 + 136) - 1);
    unint64_t v17 = *(void *)(v13 + 88 * v16 + 32);
    if (__PAIR64__(*(unsigned __int16 *)(a1 + 180), *(_DWORD *)(a1 + 176)) == __PAIR64__(WORD2(v17), v17)
      && (HIWORD(v17) & 1) != (*(unsigned char *)(a1 + 182) == 0))
    {
      unint64_t v18 = *(void *)(v13 + 88 * v16 + 72);
      if (__PAIR64__(*(unsigned __int16 *)(a1 + 220), *(_DWORD *)(a1 + 216)) == __PAIR64__(WORD2(v18), v18)
        && (HIWORD(v18) & 1) != (*(unsigned char *)(a1 + 222) == 0)
        && *(_DWORD *)(a1 + 224) == *(_DWORD *)(v13 + 88 * v16 + 80)
        && ((*(unsigned char *)(v13 + 88 * v16 + 84) ^ *(unsigned char *)(a1 + 228)) & 7) == 0)
      {
        break;
      }
    }
    if (*(void *)(a1 + 120)
      && __PAIR64__(*(unsigned __int16 *)(a1 + 68), *(_DWORD *)(a1 + 64)) == __PAIR64__(WORD2(v17), v17)
      && (HIWORD(v17) & 1) != (*(unsigned char *)(a1 + 70) == 0)
      && (unint64_t v19 = *(void *)(v13 + 88 * v16 + 72),
          __PAIR64__(*(unsigned __int16 *)(a1 + 108), *(_DWORD *)(a1 + 104)) == __PAIR64__(WORD2(v19), v19))
      && (HIWORD(v19) & 1) != (*(unsigned char *)(a1 + 110) == 0)
      && *(_DWORD *)(a1 + 112) == *(_DWORD *)(v13 + 88 * v16 + 80)
      && ((*(unsigned char *)(v13 + 88 * v16 + 84) ^ *(unsigned char *)(a1 + 116)) & 7) == 0)
    {
      if (v15 == -1) {
        uint64_t v15 = v16;
      }
    }
    else if (v3 == v17 {
           && WORD2(v3) == WORD2(v17)
    }
           && (HIWORD(v17) & 1) != ((v3 & 0xFF000000000000) == 0))
    {
      unint64_t v21 = *(void *)(v13 + 88 * v16 + 72);
      if (v14 == (v21 & 0xFFFFFFFFFFFFLL)
        && (HIWORD(v21) & 1) != (v10 == 0)
        && v4 == *(_DWORD *)(v13 + 88 * v16 + 80)
        && ((*(unsigned char *)(v13 + 88 * v16 + 84) ^ v5) & 7) == 0)
      {
        return v16;
      }
    }
    uint64_t v12 = ++v2 + v16;
  }
  return -1;
}

__n128 sub_F542E8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 120);
  uint64_t v4 = *(void *)(a1 + 128);
  if ((unint64_t)(v4 - v5) >= 0x2E8BA2E8BA2E8BALL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2E18(exception, "insert overflow");
  }
  uint64_t v6 = *(void *)(a1 + 232);
  if (v5
    && (unint64_t v7 = *(void *)(v6 + 88 * a3 + 32),
        __PAIR64__(*(unsigned __int16 *)(a1 + 68), *(_DWORD *)(a1 + 64)) == __PAIR64__(WORD2(v7), v7))
    && (HIWORD(v7) & 1) != (*(unsigned char *)(a1 + 70) == 0)
    && (unint64_t v8 = *(void *)(v6 + 88 * a3 + 72),
        __PAIR64__(*(unsigned __int16 *)(a1 + 108), *(_DWORD *)(a1 + 104)) == __PAIR64__(WORD2(v8), v8))
    && (HIWORD(v8) & 1) != (*(unsigned char *)(a1 + 110) == 0)
    && *(_DWORD *)(a1 + 112) == *(_DWORD *)(v6 + 88 * a3 + 80)
    && ((*(unsigned char *)(v6 + 88 * a3 + 84) ^ *(unsigned char *)(a1 + 116)) & 7) == 0)
  {
    *(void *)(a1 + 120) = v5 - 1;
  }
  else
  {
    *(void *)(a1 + 128) = v4 + 1;
  }
  uint64_t v9 = v6 + 88 * a3;
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *(_OWORD *)(v9 + 16) = v10;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v12 = *(_OWORD *)(a2 + 48);
  long long v13 = *(_OWORD *)(a2 + 64);
  *(void *)(v9 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(v9 + 48) = v12;
  *(_OWORD *)(v9 + 64) = v13;
  *(__n128 *)(v9 + 32) = result;
  uint64_t v14 = *(void *)(a1 + 232);
  uint64_t v15 = v14 + 88 * a3;
  uint64_t v16 = v14 + 88 * *(void *)(a1 + 136);
  *a4 = a1;
  a4[1] = v15;
  a4[2] = v16;
  return result;
}

void sub_F54470(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_F54484(uint64_t a1)
{
  LODWORD(result) = *(_DWORD *)(a1 + 16);
  unint64_t v2 = 4;
  if (!vcvts_n_u32_f32(*(float *)&result, 2uLL))
  {
    do
    {
      if ((v2 & 0x8000000000000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v2 *= 2;
    }
    while (!(unint64_t)(float)(*(float *)&result * (float)v2));
  }
  if (*(void *)(a1 + 136) || v2 != *(void *)(a1 + 144))
  {
    *(void *)&double result = sub_F54544(a1, v2).u64[0];
  }
  return result;
}

void sub_F54530(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64x2_t sub_F54544(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(_OWORD **)(a1 + 248);
  if (v4)
  {
    if (*(void *)(a1 + 144) == a2) {
      goto LABEL_7;
    }
    uint64_t v5 = malloc_type_realloc(*(void **)(a1 + 248), 96 * a2, 0x1060040BBEDDE67uLL);
    if (!v5)
    {
      fprintf(__stderrp, "sparsehash: FATAL ERROR: failed to reallocate %lu elements for ptr %p", a2, v4);
      exit(1);
    }
  }
  else
  {
    uint64_t v5 = malloc_type_malloc(96 * a2, 0x1060040BBEDDE67uLL);
  }
  *(void *)(a1 + 248) = v5;
  uint64_t v4 = v5;
LABEL_7:
  if (a2)
  {
    uint64_t v6 = 96 * a2;
    do
    {
      long long v7 = *(_OWORD *)(a1 + 168);
      *uint64_t v4 = *(_OWORD *)(a1 + 152);
      v4[1] = v7;
      long long v8 = *(_OWORD *)(a1 + 184);
      long long v9 = *(_OWORD *)(a1 + 200);
      long long v10 = *(_OWORD *)(a1 + 232);
      v4[4] = *(_OWORD *)(a1 + 216);
      v4[5] = v10;
      v4[2] = v8;
      v4[3] = v9;
      v4 += 6;
      v6 -= 96;
    }
    while (v6);
  }
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = a2;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)a2)));
  *(uint64x2_t *)a1 = result;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

uint64_t *sub_F54650(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = (*a2 >> 16) & 0xFFFF0000 | (*a2 << 32);
  unint64_t v8 = 0x2127599BF4325C37 * ((v7 | ((*a2 & 0xFF000000000000) == 0)) ^ (v7 >> 23));
  unint64_t v9 = v8 ^ (v8 >> 47);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8 ^ (v8 >> 47);
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    long long v12 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      long long v13 = *v12;
      if (*v12)
      {
        unint64_t v14 = a2[1];
        unint64_t v15 = a2[2];
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == v9)
            {
              if (__PAIR64__(*((unsigned __int16 *)v13 + 10), *((_DWORD *)v13 + 4)) == __PAIR64__(WORD2(v6), v6)
                && (HIWORD(v6) & 1) != (*((unsigned char *)v13 + 22) == 0)
                && v13[3] == v14
                && v13[4] == v15)
              {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v3)
            {
              goto LABEL_30;
            }
            long long v13 = (uint64_t *)*v13;
            if (!v13) {
              goto LABEL_30;
            }
          }
        }
        do
        {
          unint64_t v18 = v13[1];
          if (v18 == v9)
          {
            if (__PAIR64__(*((unsigned __int16 *)v13 + 10), *((_DWORD *)v13 + 4)) == __PAIR64__(WORD2(v6), v6)
              && (HIWORD(v6) & 1) != (*((unsigned char *)v13 + 22) == 0)
              && v13[3] == v14
              && v13[4] == v15)
            {
              return v13;
            }
          }
          else
          {
            if (v18 >= v10) {
              v18 %= v10;
            }
            if (v18 != v3) {
              break;
            }
          }
          long long v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_30:
  unint64_t v19 = operator new(0x28uLL);
  *unint64_t v19 = 0;
  v19[1] = v9;
  *((_OWORD *)v19 + 1) = *(_OWORD *)a3;
  v19[4] = *(void *)(a3 + 16);
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    unint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
    if (v23)
    {
LABEL_33:
      *unint64_t v19 = *v23;
LABEL_68:
      *unint64_t v23 = v19;
      goto LABEL_69;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_44;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_44:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        unint64_t v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_33;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v22 = *(void *)a1;
        unint64_t v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_33;
        }
      }
    }
    else
    {
      unint64_t v3 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      unint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_33;
      }
    }
  }
  *unint64_t v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v19;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v19)
  {
    unint64_t v32 = *(void *)(*v19 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_68;
  }
LABEL_69:
  ++*(void *)(a1 + 24);
  return v19;
}

void sub_F54A20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F54A34(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t result = sub_F54E48(a1);
    unint64_t v5 = *(void *)(a1 + 136);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v5 = *(void *)(a1 + 136);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  unint64_t v6 = *(void *)(a1 + 144);
  unint64_t v7 = v5 + a2;
  if (v6 < 4 || v7 > *(void *)a1)
  {
    float v8 = *(float *)(a1 + 16);
    unint64_t v9 = vcvts_n_u32_f32(v8, 2uLL);
    unint64_t v10 = 4;
    if (v7 >= v9)
    {
      while ((v10 & 0x8000000000000000) == 0)
      {
        v10 *= 2;
        if (v7 < (unint64_t)(float)(v8 * (float)v10)) {
          goto LABEL_8;
        }
      }
LABEL_27:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
LABEL_8:
    if (v10 > v6)
    {
      unint64_t v11 = *(void *)(a1 + 128);
      unint64_t v12 = v5 - v11 + a2;
      unint64_t v13 = 4;
      if (v6 > 4) {
        goto LABEL_11;
      }
LABEL_10:
      if (v12 >= (unint64_t)(float)(v8 * (float)v13))
      {
LABEL_11:
        while ((v13 & 0x8000000000000000) == 0)
        {
          v13 *= 2;
          if (v13 >= v6) {
            goto LABEL_10;
          }
        }
        goto LABEL_27;
      }
      unint64_t v14 = v7 - (v11 >> 2);
      unint64_t v15 = 4;
      if (v14 >= v9)
      {
        while ((v15 & 0x8000000000000000) == 0)
        {
          v15 *= 2;
          if (v14 < (unint64_t)(float)(v8 * (float)v15)) {
            goto LABEL_19;
          }
        }
        goto LABEL_27;
      }
LABEL_19:
      if (v13 <= 0x7FFFFFFFFFFFFFFELL
        && v13 < v15
        && v12 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v13)))
      {
        v13 *= 2;
      }
      sub_F550A8((uint64_t)&v38, a1, v13);
      uint64x2_t v17 = *(uint64x2_t *)a1;
      long long v16 = *(_OWORD *)(a1 + 16);
      long long v18 = v39;
      *(uint64x2_t *)a1 = v38;
      *(_OWORD *)(a1 + 16) = v18;
      uint64x2_t v38 = v17;
      long long v39 = v16;
      long long v19 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)&v57[16] = *(_OWORD *)(a1 + 64);
      long long v58 = v19;
      long long v20 = *(_OWORD *)(a1 + 112);
      long long v59 = *(_OWORD *)(a1 + 96);
      long long v60 = v20;
      long long v21 = *(_OWORD *)(a1 + 48);
      long long v56 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)uint64_t v57 = v21;
      long long v22 = v43;
      *(_OWORD *)(a1 + 64) = v42;
      *(_OWORD *)(a1 + 80) = v22;
      long long v23 = v45;
      *(_OWORD *)(a1 + 96) = v44;
      *(_OWORD *)(a1 + 112) = v23;
      long long v24 = v41;
      *(_OWORD *)(a1 + 32) = v40;
      *(_OWORD *)(a1 + 48) = v24;
      long long v40 = v56;
      long long v41 = *(_OWORD *)v57;
      long long v44 = v59;
      long long v45 = v60;
      long long v42 = *(_OWORD *)&v57[16];
      long long v43 = v58;
      long long v25 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 128) = v46;
      long long v46 = v25;
      unint64_t v26 = *(void *)(a1 + 144);
      unint64_t v27 = v47;
      unint64_t v28 = v51;
      *(void *)(a1 + 144) = v47;
      unint64_t v47 = v26;
      long long v29 = *(_OWORD *)(a1 + 168);
      long long v53 = *(_OWORD *)(a1 + 152);
      long long v54 = v29;
      int v55 = *(_DWORD *)(a1 + 184);
      __int16 v30 = *(_WORD *)(a1 + 188);
      char v31 = *(unsigned char *)(a1 + 190);
      long long v32 = *(_OWORD *)(a1 + 207);
      long long v56 = *(_OWORD *)(a1 + 191);
      *(_OWORD *)uint64_t v57 = v32;
      *(void *)&v57[13] = *(void *)(a1 + 220);
      uint64_t v33 = *(void *)(a1 + 228);
      int v34 = *(_DWORD *)(a1 + 236);
      char v35 = *(unsigned char *)(a1 + 240);
      *(_DWORD *)((char *)v52 + 3) = *(_DWORD *)(a1 + 244);
      v52[0] = *(_DWORD *)(a1 + 241);
      *(_OWORD *)(a1 + 200) = *(_OWORD *)&v50[16];
      *(_OWORD *)(a1 + 168) = v49;
      *(_OWORD *)(a1 + 152) = v48;
      *(_OWORD *)(a1 + 216) = *(_OWORD *)&v50[32];
      *(_OWORD *)(a1 + 184) = *(_OWORD *)v50;
      *(_OWORD *)(a1 + 232) = *(_OWORD *)&v50[48];
      *(_DWORD *)long long v50 = v55;
      long long v49 = v54;
      long long v48 = v53;
      *(_WORD *)&v50[4] = v30;
      v50[6] = v31;
      *(void *)&v50[36] = *(void *)&v57[13];
      *(_OWORD *)&v50[23] = *(_OWORD *)v57;
      *(_OWORD *)&v50[7] = v56;
      *(void *)&v50[44] = v33;
      *(_DWORD *)&v50[52] = v34;
      v50[56] = v35;
      *(_DWORD *)&v50[60] = *(_DWORD *)((char *)v52 + 3);
      *(_DWORD *)&v50[57] = v52[0];
      uint64_t v36 = *(void **)(a1 + 248);
      *(void *)(a1 + 248) = v28;
      long long v51 = v36;
      *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)v27)));
      *(unsigned char *)(a1 + 24) = 0;
      uint64x2_t v38 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v39, (float)v26)));
      BYTE8(v39) = 0;
      if (v36) {
        free(v36);
      }
      return 1;
    }
  }
  return result;
}

void sub_F54DF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_F54E0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_F54E20(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_F54E34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F54E48(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 136) - *(void *)(a1 + 128);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 144), v5 < 0x21))
  {
    uint64_t result = 0;
  }
  else
  {
    float v6 = (float)v2;
    do
    {
      unint64_t v7 = v5;
      v5 >>= 1;
    }
    while (v7 >= 0x42 && (float)(*(float *)(a1 + 20) * (float)v5) > v6);
    sub_F550A8((uint64_t)&v30, a1, v5);
    uint64x2_t v9 = *(uint64x2_t *)a1;
    long long v8 = *(_OWORD *)(a1 + 16);
    long long v10 = v31;
    *(uint64x2_t *)a1 = v30;
    *(_OWORD *)(a1 + 16) = v10;
    uint64x2_t v30 = v9;
    long long v31 = v8;
    long long v11 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)&v49[16] = *(_OWORD *)(a1 + 64);
    long long v50 = v11;
    long long v12 = *(_OWORD *)(a1 + 112);
    long long v51 = *(_OWORD *)(a1 + 96);
    long long v52 = v12;
    long long v13 = *(_OWORD *)(a1 + 48);
    long long v48 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)long long v49 = v13;
    long long v14 = v35;
    *(_OWORD *)(a1 + 64) = v34;
    *(_OWORD *)(a1 + 80) = v14;
    long long v15 = v37;
    *(_OWORD *)(a1 + 96) = v36;
    *(_OWORD *)(a1 + 112) = v15;
    long long v16 = v33;
    *(_OWORD *)(a1 + 32) = v32;
    *(_OWORD *)(a1 + 48) = v16;
    long long v32 = v48;
    long long v33 = *(_OWORD *)v49;
    long long v36 = v51;
    long long v37 = v52;
    long long v34 = *(_OWORD *)&v49[16];
    long long v35 = v50;
    long long v17 = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(a1 + 128) = v38;
    long long v38 = v17;
    unint64_t v18 = *(void *)(a1 + 144);
    unint64_t v19 = v39;
    long long v20 = v43;
    *(void *)(a1 + 144) = v39;
    unint64_t v39 = v18;
    long long v21 = *(_OWORD *)(a1 + 168);
    long long v45 = *(_OWORD *)(a1 + 152);
    long long v46 = v21;
    int v47 = *(_DWORD *)(a1 + 184);
    __int16 v22 = *(_WORD *)(a1 + 188);
    char v23 = *(unsigned char *)(a1 + 190);
    long long v24 = *(_OWORD *)(a1 + 207);
    long long v48 = *(_OWORD *)(a1 + 191);
    *(_OWORD *)long long v49 = v24;
    *(void *)&v49[13] = *(void *)(a1 + 220);
    uint64_t v25 = *(void *)(a1 + 228);
    int v26 = *(_DWORD *)(a1 + 236);
    char v27 = *(unsigned char *)(a1 + 240);
    *(_DWORD *)((char *)v44 + 3) = *(_DWORD *)(a1 + 244);
    v44[0] = *(_DWORD *)(a1 + 241);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)&v42[16];
    *(_OWORD *)(a1 + 168) = v41;
    *(_OWORD *)(a1 + 152) = v40;
    *(_OWORD *)(a1 + 216) = *(_OWORD *)&v42[32];
    *(_OWORD *)(a1 + 184) = *(_OWORD *)v42;
    *(_OWORD *)(a1 + 232) = *(_OWORD *)&v42[48];
    *(_DWORD *)long long v42 = v47;
    long long v41 = v46;
    long long v40 = v45;
    *(_WORD *)&v42[4] = v22;
    v42[6] = v23;
    *(void *)&v42[36] = *(void *)&v49[13];
    *(_OWORD *)&v42[23] = *(_OWORD *)v49;
    *(_OWORD *)&v42[7] = v48;
    *(void *)&v42[44] = v25;
    *(_DWORD *)&v42[52] = v26;
    v42[56] = v27;
    *(_DWORD *)&v42[60] = *(_DWORD *)((char *)v44 + 3);
    *(_DWORD *)&v42[57] = v44[0];
    unint64_t v28 = *(void **)(a1 + 248);
    *(void *)(a1 + 248) = v20;
    long long v43 = v28;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)v19)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v30 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v31, (float)v18)));
    BYTE8(v31) = 0;
    if (v28) {
      free(v28);
    }
    uint64_t result = 1;
  }
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

float sub_F550A8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  long long v5 = *(_OWORD *)(a2 + 64);
  long long v6 = *(_OWORD *)(a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0;
  long long v8 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v8;
  long long v9 = *(_OWORD *)(a2 + 184);
  long long v10 = *(_OWORD *)(a2 + 200);
  long long v11 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v11;
  *(_OWORD *)(a1 + 200) = v10;
  *(_OWORD *)(a1 + 184) = v9;
  *(void *)(a1 + 248) = 0;
  if (*(unsigned char *)(a2 + 25))
  {
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)(a1 + 16), 0)));
    *(unsigned char *)(a1 + 24) = 0;
    sub_F55224(a1, (void *)a2, a3);
  }
  else
  {
    unint64_t v13 = 4;
    if (a3 > 4) {
      goto LABEL_5;
    }
    while (1)
    {
      float v14 = *(float *)(a1 + 16) * (float)v13;
      if (*(void *)(a2 + 136) - *(void *)(a2 + 128) < (unint64_t)v14) {
        break;
      }
      do
      {
LABEL_5:
        if ((v13 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "resize overflow");
        }
        v13 *= 2;
      }
      while (v13 < a3);
    }
    *(void *)(a1 + 144) = v13;
    float result = *(float *)(a1 + 20) * (float)v13;
    *(void *)a1 = (unint64_t)v14;
    *(void *)(a1 + 8) = (unint64_t)result;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_F55210(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F55224(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v5 = a2[17] - a2[16];
  unint64_t v6 = 4;
  if (a3 > 4) {
    goto LABEL_3;
  }
  while (v5 >= (unint64_t)(float)(*(float *)(a1 + 16) * (float)v6))
  {
    do
    {
LABEL_3:
      if ((v6 & 0x8000000000000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v6 *= 2;
    }
    while (v6 < a3);
  }
  sub_F54544(a1, v6);
  uint64_t v7 = a2[31];
  uint64_t v8 = v7 + 96 * a2[18];
  long long v38 = a2;
  uint64_t v39 = v7;
  uint64_t v40 = v8;
  sub_F556A4((uint64_t)&v38);
  uint64_t v9 = a2[31] + 96 * a2[18];
  long long v35 = a2;
  uint64_t v36 = v9;
  uint64_t v37 = v9;
  uint64_t result = sub_F556A4((uint64_t)&v35);
  for (uint64_t i = v39; v39 != v36; uint64_t i = v39)
  {
    unint64_t v12 = *(void *)(i + 32);
    unint64_t v13 = *(unsigned __int8 *)(i + 88);
    uint64_t v14 = 4 * (unsigned __int16)*(_DWORD *)(i + 80);
    unint64_t v15 = 0x2127599BF4325C37
        * (((((v12 >> 16) & 0xFFFF0000 | (v12 << 32) | (2 * ((v12 & 0xFF000000000000) == 0))) + v14) & 0xFFFFFFFFFFFFFFFELL | v13 & 1) ^ ((((v12 >> 16) & 0xFFFF0000 | (v12 << 32) | (2 * ((v12 & 0xFF000000000000) == 0))) + v14) >> 23));
    unint64_t v16 = *(void *)(i + 72);
    unint64_t v17 = ((unint64_t)*(unsigned int *)(i + 80) >> 14) & 0x3FFFC;
    unint64_t v18 = 0x2127599BF4325C37
        * (((v13 >> 1) & 1 | (2 * ((v16 & 0xFF000000000000) == 0)) | ((v17 | (v16 << 32))
                                                                        + ((v16 >> 16) & 0xFFFF0000))) ^ (((v17 | (v16 << 32)) + ((v16 >> 16) & 0xFFFF0000)) >> 23));
    unint64_t v19 = ((v18 ^ (v18 >> 47))
         + ((((v15 ^ (v15 >> 47)) + 0x388152A534) ^ 0xDEADBEEF) << 6)
         + ((((v15 ^ (v15 >> 47)) + 0x388152A534) ^ 0xDEADBEEF) >> 2)
         + 2654435769u) ^ ((v15 ^ (v15 >> 47)) + 0x388152A534) ^ 0xDEADBEEF;
    uint64_t v20 = *(void *)(a1 + 248);
    for (uint64_t j = 1; ; ++j)
    {
      uint64_t v22 = v19 & (*(void *)(a1 + 144) - 1);
      unint64_t v23 = *(void *)(v20 + 96 * v22 + 32);
      if (__PAIR64__(*(unsigned __int16 *)(a1 + 188), *(_DWORD *)(a1 + 184)) == __PAIR64__(WORD2(v23), v23)
        && (HIWORD(v23) & 1) != (*(unsigned char *)(a1 + 190) == 0))
      {
        unint64_t v24 = *(void *)(v20 + 96 * v22 + 72);
        if (__PAIR64__(*(unsigned __int16 *)(a1 + 228), *(_DWORD *)(a1 + 224)) == __PAIR64__(WORD2(v24), v24)
          && (HIWORD(v24) & 1) != (*(unsigned char *)(a1 + 230) == 0))
        {
          unsigned int v25 = *(_DWORD *)(a1 + 232);
          BOOL v27 = (unsigned __int16)*(_DWORD *)(v20 + 96 * v22 + 80) == (unsigned __int16)v25;
          unsigned int v26 = (*(_DWORD *)(v20 + 96 * v22 + 80) ^ v25) >> 16;
          BOOL v27 = v27 && v26 == 0;
          if (v27
            && ((*(unsigned char *)(v20 + 96 * v22 + 88) ^ *(unsigned char *)(a1 + 240)) & 3) == 0
            && ((*(_WORD *)(v20 + 96 * v22 + 84) ^ *(_WORD *)(a1 + 236)) & 0x7FFF) == 0
            && ((*(unsigned char *)(v20 + 96 * v22 + 88) ^ *(unsigned char *)(a1 + 240)) & 0x1C) == 0
            && *(unsigned __int16 *)(v20 + 96 * v22 + 86) == *(unsigned __int16 *)(a1 + 238))
          {
            break;
          }
        }
      }
      unint64_t v19 = j + v22;
    }
    unint64_t v28 = (_OWORD *)(v20 + 96 * v22);
    long long v29 = *(_OWORD *)(i + 16);
    *unint64_t v28 = *(_OWORD *)i;
    v28[1] = v29;
    long long v30 = *(_OWORD *)(i + 32);
    long long v31 = *(_OWORD *)(i + 48);
    long long v32 = *(_OWORD *)(i + 80);
    v28[4] = *(_OWORD *)(i + 64);
    v28[5] = v32;
    v28[2] = v30;
    v28[3] = v31;
    ++*(void *)(a1 + 136);
    uint64_t v39 = i + 96;
    sub_F556A4((uint64_t)&v38);
    uint64_t v33 = a2[31] + 96 * a2[18];
    long long v35 = a2;
    uint64_t v36 = v33;
    uint64_t v37 = v33;
    uint64_t result = sub_F556A4((uint64_t)&v35);
  }
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void sub_F55570(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_F55584(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 248);
  unint64_t v3 = *(void *)(v2 + 96 * a2 + 32);
  if (__PAIR64__(*(unsigned __int16 *)(a1 + 188), *(_DWORD *)(a1 + 184)) != __PAIR64__(WORD2(v3), v3)) {
    return 0;
  }
  if ((HIWORD(v3) & 1) == (*(unsigned char *)(a1 + 190) == 0)) {
    return 0;
  }
  unint64_t v4 = *(void *)(v2 + 96 * a2 + 72);
  if (__PAIR64__(*(unsigned __int16 *)(a1 + 228), *(_DWORD *)(a1 + 224)) != __PAIR64__(WORD2(v4), v4)
    || (HIWORD(v4) & 1) == (*(unsigned char *)(a1 + 230) == 0))
  {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 232);
  BOOL v7 = (unsigned __int16)*(_DWORD *)(v2 + 96 * a2 + 80) == (unsigned __int16)v5;
  unsigned int v6 = (*(_DWORD *)(v2 + 96 * a2 + 80) ^ v5) >> 16;
  BOOL v7 = v7 && v6 == 0;
  if (!v7
    || ((*(unsigned char *)(v2 + 96 * a2 + 88) ^ *(unsigned char *)(a1 + 240)) & 3) != 0
    || ((*(_WORD *)(v2 + 96 * a2 + 84) ^ *(_WORD *)(a1 + 236)) & 0x7FFF) != 0)
  {
    return 0;
  }
  uint64_t v9 = 0;
  if (((*(unsigned char *)(v2 + 96 * a2 + 88) ^ *(unsigned char *)(a1 + 240)) & 0xC) == 0
    && *(unsigned __int16 *)(v2 + 96 * a2 + 86) == *(unsigned __int16 *)(a1 + 238))
  {
    return ((*(unsigned char *)(v2 + 96 * a2 + 88) ^ *(unsigned char *)(a1 + 240)) & 0x10) == 0;
  }
  return v9;
}

uint64_t sub_F556A4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  if (v1 != v2)
  {
    unint64_t v3 = (uint64_t *)result;
    do
    {
      uint64_t result = *v3;
      unint64_t v4 = *(void *)(v1 + 32);
      if (*(_DWORD *)(*v3 + 184) != v4
        || *(unsigned __int16 *)(result + 188) != WORD2(v4)
        || (HIWORD(v4) & 1) == (*(unsigned char *)(result + 190) == 0)
        || (unint64_t v5 = *(void *)(v1 + 72),
            __PAIR64__(*(unsigned __int16 *)(result + 228), *(_DWORD *)(result + 224)) != __PAIR64__(WORD2(v5), v5))
        || (HIWORD(v5) & 1) == (*(unsigned char *)(result + 230) == 0)
        || (unsigned int v6 = *(_DWORD *)(result + 232), (unsigned __int16)*(_DWORD *)(v1 + 80) != (unsigned __int16)v6)
        || (*(_DWORD *)(v1 + 80) ^ v6) >> 16
        || ((*(unsigned char *)(v1 + 88) ^ *(unsigned char *)(result + 240)) & 3) != 0
        || ((*(_WORD *)(v1 + 84) ^ *(_WORD *)(result + 236)) & 0x7FFF) != 0
        || ((*(unsigned char *)(v1 + 88) ^ *(unsigned char *)(result + 240)) & 0x1C) != 0
        || *(unsigned __int16 *)(v1 + 86) != *(unsigned __int16 *)(result + 238))
      {
        uint64_t result = sub_F557CC(result, (uint64_t)v3);
        if (!result) {
          return result;
        }
        uint64_t v1 = v3[1];
        uint64_t v2 = v3[2];
      }
      v1 += 96;
      v3[1] = v1;
    }
    while (v1 != v2);
  }
  return result;
}

BOOL sub_F557CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 128);
  if (v2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    unint64_t v4 = *(void *)(v3 + 32);
    if (__PAIR64__(*(unsigned __int16 *)(a1 + 68), *(_DWORD *)(a1 + 64)) != __PAIR64__(WORD2(v4), v4)) {
      return 0;
    }
    if ((HIWORD(v4) & 1) == (*(unsigned char *)(a1 + 70) == 0)) {
      return 0;
    }
    unint64_t v5 = *(void *)(v3 + 72);
    if (__PAIR64__(*(unsigned __int16 *)(a1 + 108), *(_DWORD *)(a1 + 104)) != __PAIR64__(WORD2(v5), v5)
      || (HIWORD(v5) & 1) == (*(unsigned char *)(a1 + 110) == 0))
    {
      return 0;
    }
    unsigned int v6 = *(_DWORD *)(a1 + 112);
    BOOL v8 = (unsigned __int16)*(_DWORD *)(v3 + 80) == (unsigned __int16)v6;
    unsigned int v7 = (*(_DWORD *)(v3 + 80) ^ v6) >> 16;
    BOOL v8 = v8 && v7 == 0;
    if (!v8
      || ((*(unsigned char *)(v3 + 88) ^ *(unsigned char *)(a1 + 120)) & 3) != 0
      || ((*(_WORD *)(v3 + 84) ^ *(_WORD *)(a1 + 116)) & 0x7FFF) != 0)
    {
      return 0;
    }
    uint64_t v2 = 0;
    if (((*(unsigned char *)(v3 + 88) ^ *(unsigned char *)(a1 + 120)) & 0xC) == 0
      && *(unsigned __int16 *)(v3 + 86) == *(unsigned __int16 *)(a1 + 118))
    {
      return ((*(unsigned char *)(v3 + 88) ^ *(unsigned char *)(a1 + 120)) & 0x10) == 0;
    }
  }
  return v2;
}

uint64_t sub_F558C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 144) - 1;
  unint64_t v5 = *(void *)(a2 + 32);
  unint64_t v6 = *(unsigned __int8 *)(a2 + 88);
  uint64_t v7 = 4 * (unsigned __int16)*(_DWORD *)(a2 + 80);
  unint64_t v8 = ((((v5 >> 16) & 0xFFFF0000 | (v5 << 32) | (2 * ((v5 & 0xFF000000000000) == 0))) + v7) & 0xFFFFFFFFFFFFFFFELL | v6 & 1) ^ ((((v5 >> 16) & 0xFFFF0000 | (v5 << 32) | (2 * ((v5 & 0xFF000000000000) == 0))) + v7) >> 23);
  unint64_t v9 = (((0x2127599BF4325C37 * v8) ^ ((0x2127599BF4325C37 * v8) >> 47)) + 0x388152A534) ^ 0xDEADBEEF;
  unint64_t v10 = *(void *)(a2 + 72);
  unint64_t v11 = (((unint64_t)*(unsigned int *)(a2 + 80) >> 14) & 0x3FFFC | (v10 << 32)) + ((v10 >> 16) & 0xFFFF0000);
  uint64_t v12 = (v6 >> 1) & 1 | (2 * ((v10 & 0xFF000000000000) == 0)) | v11;
  unint64_t v13 = ((((0x2127599BF4325C37 * (v12 ^ (v11 >> 23))) ^ ((0x2127599BF4325C37 * (v12 ^ (v11 >> 23))) >> 47))
        + (v9 << 6)
        + (v9 >> 2)
        + 2654435769u) ^ v9) & v4;
  if (!sub_F55584(a1, v13))
  {
    uint64_t v14 = -1;
    uint64_t v15 = 1;
    do
    {
      if (sub_F55C5C(a1, v13))
      {
        if (v14 == -1) {
          uint64_t v14 = v13;
        }
      }
      else
      {
        uint64_t v16 = *(void *)(a1 + 248);
        unint64_t v17 = *(void *)(v16 + 96 * v13 + 32);
        if (__PAIR64__(*(unsigned __int16 *)(a2 + 36), *(_DWORD *)(a2 + 32)) == __PAIR64__(WORD2(v17), v17)
          && (HIWORD(v17) & 1) != (*(unsigned char *)(a2 + 38) == 0))
        {
          unint64_t v18 = *(void *)(v16 + 96 * v13 + 72);
          if (__PAIR64__(*(unsigned __int16 *)(a2 + 76), *(_DWORD *)(a2 + 72)) == __PAIR64__(WORD2(v18), v18)
            && (HIWORD(v18) & 1) != (*(unsigned char *)(a2 + 78) == 0))
          {
            unsigned int v19 = *(_DWORD *)(a2 + 80);
            BOOL v21 = (unsigned __int16)*(_DWORD *)(v16 + 96 * v13 + 80) == (unsigned __int16)v19;
            unsigned int v20 = (*(_DWORD *)(v16 + 96 * v13 + 80) ^ v19) >> 16;
            BOOL v21 = v21 && v20 == 0;
            if (v21
              && ((*(unsigned char *)(v16 + 96 * v13 + 88) ^ *(unsigned char *)(a2 + 88)) & 3) == 0
              && ((*(_WORD *)(v16 + 96 * v13 + 84) ^ *(_WORD *)(a2 + 84)) & 0x7FFF) == 0
              && ((*(unsigned char *)(v16 + 96 * v13 + 88) ^ *(unsigned char *)(a2 + 88)) & 0x1C) == 0
              && *(unsigned __int16 *)(v16 + 96 * v13 + 86) == *(unsigned __int16 *)(a2 + 86))
            {
              return v13;
            }
          }
        }
      }
      unint64_t v13 = (v13 + v15++) & v4;
    }
    while (!sub_F55584(a1, v13));
  }
  return -1;
}

__n128 sub_F55B28@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (a1[17] - a1[16] >= 0x2AAAAAAAAAAAAAAuLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2E18(exception, "insert overflow");
  }
  if (sub_F55C5C((uint64_t)a1, a3))
  {
    uint64_t v8 = a1[31];
    uint64_t v9 = v8 + 96 * a3;
    uint64_t v10 = v8 + 96 * a1[18];
    v20[0] = a1;
    v20[1] = v9;
    v20[2] = v10;
    sub_F557CC((uint64_t)a1, (uint64_t)v20);
    --a1[16];
  }
  else
  {
    ++a1[17];
  }
  uint64_t v11 = a1[31] + 96 * a3;
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *(_OWORD *)(v11 + 16) = v12;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v14 = *(_OWORD *)(a2 + 48);
  long long v15 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v11 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v11 + 80) = v15;
  *(__n128 *)(v11 + 32) = result;
  *(_OWORD *)(v11 + 48) = v14;
  uint64_t v16 = a1[31];
  uint64_t v17 = v16 + 96 * a3;
  uint64_t v18 = v16 + 96 * a1[18];
  *a4 = a1;
  a4[1] = v17;
  a4[2] = v18;
  return result;
}

void sub_F55C48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_F55C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 128);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 248);
    unint64_t v4 = *(void *)(v3 + 96 * a2 + 32);
    if (__PAIR64__(*(unsigned __int16 *)(a1 + 68), *(_DWORD *)(a1 + 64)) != __PAIR64__(WORD2(v4), v4)) {
      return 0;
    }
    if ((HIWORD(v4) & 1) == (*(unsigned char *)(a1 + 70) == 0)) {
      return 0;
    }
    unint64_t v5 = *(void *)(v3 + 96 * a2 + 72);
    if (__PAIR64__(*(unsigned __int16 *)(a1 + 108), *(_DWORD *)(a1 + 104)) != __PAIR64__(WORD2(v5), v5)
      || (HIWORD(v5) & 1) == (*(unsigned char *)(a1 + 110) == 0))
    {
      return 0;
    }
    unsigned int v6 = *(_DWORD *)(a1 + 112);
    BOOL v8 = (unsigned __int16)*(_DWORD *)(v3 + 96 * a2 + 80) == (unsigned __int16)v6;
    unsigned int v7 = (*(_DWORD *)(v3 + 96 * a2 + 80) ^ v6) >> 16;
    BOOL v8 = v8 && v7 == 0;
    if (!v8
      || ((*(unsigned char *)(v3 + 96 * a2 + 88) ^ *(unsigned char *)(a1 + 120)) & 3) != 0
      || ((*(_WORD *)(v3 + 96 * a2 + 84) ^ *(_WORD *)(a1 + 116)) & 0x7FFF) != 0)
    {
      return 0;
    }
    uint64_t v2 = 0;
    if (((*(unsigned char *)(v3 + 96 * a2 + 88) ^ *(unsigned char *)(a1 + 120)) & 0xC) == 0
      && *(unsigned __int16 *)(v3 + 96 * a2 + 86) == *(unsigned __int16 *)(a1 + 118))
    {
      return ((*(unsigned char *)(v3 + 96 * a2 + 88) ^ *(unsigned char *)(a1 + 120)) & 0x10) == 0;
    }
  }
  return v2;
}

uint64_t *sub_F55D84(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = ((int)(*a2 >> 29) & 0xFFFFFFFFFFFFFFF8) + (*a2 << 32);
  unint64_t v8 = 0x2127599BF4325C37
     * ((((unint64_t)*a2 >> 61) & 2 | ((unint64_t)*a2 >> 63) | ((unint64_t)*a2 >> 59) & 4 | v7) ^ (v7 >> 23));
  unint64_t v9 = v8 ^ (v8 >> 47);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8 ^ (v8 >> 47);
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    long long v12 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      unint64_t v13 = *v12;
      if (*v12)
      {
        uint64_t v14 = a2[1];
        uint64_t v15 = a2[2];
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v13[1];
            if (v17 == v9)
            {
              if (*((_OWORD *)v13 + 1) == __PAIR128__(v14, v6) && v13[4] == v15) {
                return v13;
              }
            }
            else if ((v17 & (v10 - 1)) != v3)
            {
              goto LABEL_25;
            }
            unint64_t v13 = (uint64_t *)*v13;
            if (!v13) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v16 = v13[1];
          if (v16 == v9)
          {
            if (*((_OWORD *)v13 + 1) == __PAIR128__(v14, v6) && v13[4] == v15) {
              return v13;
            }
          }
          else
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
            if (v16 != v3) {
              break;
            }
          }
          unint64_t v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_25:
  unsigned int v19 = operator new(0x28uLL);
  *unsigned int v19 = 0;
  v19[1] = v9;
  *((_OWORD *)v19 + 1) = *(_OWORD *)a3;
  v19[4] = *(void *)(a3 + 16);
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    unint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
    if (v23)
    {
LABEL_28:
      *unsigned int v19 = *v23;
LABEL_63:
      *unint64_t v23 = v19;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_39;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_39:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        unint64_t v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v22 = *(void *)a1;
        unint64_t v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      unint64_t v3 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      unint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_28;
      }
    }
  }
  *unsigned int v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v19;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v19)
  {
    unint64_t v32 = *(void *)(*v19 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v19;
}

void sub_F56130(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F56144(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t result = sub_F564DC(a1);
    unint64_t v5 = *(void *)(a1 + 144);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v5 = *(void *)(a1 + 144);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  unint64_t v6 = *(void *)(a1 + 152);
  unint64_t v7 = v5 + a2;
  if (v6 < 4 || v7 > *(void *)a1)
  {
    float v8 = *(float *)(a1 + 16);
    unint64_t v9 = vcvts_n_u32_f32(v8, 2uLL);
    unint64_t v10 = 4;
    if (v7 >= v9)
    {
      while ((v10 & 0x8000000000000000) == 0)
      {
        v10 *= 2;
        if (v7 < (unint64_t)(float)(v8 * (float)v10)) {
          goto LABEL_8;
        }
      }
LABEL_27:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
LABEL_8:
    if (v10 > v6)
    {
      unint64_t v11 = *(void *)(a1 + 136);
      unint64_t v12 = v5 - v11 + a2;
      unint64_t v13 = 4;
      if (v6 > 4) {
        goto LABEL_11;
      }
LABEL_10:
      if (v12 >= (unint64_t)(float)(v8 * (float)v13))
      {
LABEL_11:
        while ((v13 & 0x8000000000000000) == 0)
        {
          v13 *= 2;
          if (v13 >= v6) {
            goto LABEL_10;
          }
        }
        goto LABEL_27;
      }
      unint64_t v14 = v7 - (v11 >> 2);
      unint64_t v15 = 4;
      if (v14 >= v9)
      {
        while ((v15 & 0x8000000000000000) == 0)
        {
          v15 *= 2;
          if (v14 < (unint64_t)(float)(v8 * (float)v15)) {
            goto LABEL_19;
          }
        }
        goto LABEL_27;
      }
LABEL_19:
      if (v13 <= 0x7FFFFFFFFFFFFFFELL
        && v13 < v15
        && v12 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v13)))
      {
        v13 *= 2;
      }
      sub_F566DC((uint64_t)&v42, a1, v13);
      uint64x2_t v17 = *(uint64x2_t *)a1;
      long long v16 = *(_OWORD *)(a1 + 16);
      long long v18 = v43;
      *(uint64x2_t *)a1 = v42;
      *(_OWORD *)(a1 + 16) = v18;
      uint64x2_t v42 = v17;
      long long v43 = v16;
      long long v19 = *(_OWORD *)(a1 + 112);
      long long v63 = *(_OWORD *)(a1 + 96);
      long long v64 = v19;
      uint64_t v65 = *(void *)(a1 + 128);
      long long v20 = *(_OWORD *)(a1 + 48);
      long long v59 = *(_OWORD *)(a1 + 32);
      long long v60 = v20;
      long long v21 = *(_OWORD *)(a1 + 80);
      long long v61 = *(_OWORD *)(a1 + 64);
      long long v62 = v21;
      long long v22 = v45;
      *(_OWORD *)(a1 + 32) = v44;
      *(_OWORD *)(a1 + 48) = v22;
      long long v23 = v49;
      *(_OWORD *)(a1 + 96) = v48;
      *(_OWORD *)(a1 + 112) = v23;
      long long v24 = v47;
      *(_OWORD *)(a1 + 64) = v46;
      *(_OWORD *)(a1 + 80) = v24;
      unint64_t v25 = v52;
      *(void *)(a1 + 128) = v50;
      long long v44 = v59;
      long long v45 = v60;
      uint64_t v26 = v65;
      long long v48 = v63;
      long long v49 = v64;
      long long v46 = v61;
      long long v47 = v62;
      long long v27 = *(_OWORD *)(a1 + 136);
      *(_OWORD *)(a1 + 136) = v51;
      long long v51 = v27;
      unint64_t v28 = *(void *)(a1 + 152);
      *(void *)(a1 + 152) = v25;
      uint64_t v50 = v26;
      unint64_t v52 = v28;
      long long v29 = *(_OWORD *)(a1 + 184);
      long long v59 = *(_OWORD *)(a1 + 168);
      long long v60 = v29;
      LODWORD(v26) = *(_DWORD *)(a1 + 200);
      int v30 = *(_DWORD *)(a1 + 204);
      long long v31 = *(_OWORD *)(a1 + 232);
      long long v57 = *(_OWORD *)(a1 + 216);
      long long v58 = v31;
      int v32 = *(_DWORD *)(a1 + 248);
      int v33 = *(_DWORD *)(a1 + 252);
      *(void *)&long long v23 = *(void *)(a1 + 160);
      *(void *)&long long v31 = *(void *)(a1 + 208);
      uint64_t v34 = *(void *)(a1 + 256);
      long long v35 = *(_OWORD *)&v53[16];
      *(_OWORD *)(a1 + 160) = *(_OWORD *)v53;
      *(_OWORD *)(a1 + 176) = v35;
      long long v36 = *(_OWORD *)v54;
      *(_OWORD *)(a1 + 192) = *(_OWORD *)&v53[32];
      *(_OWORD *)(a1 + 208) = v36;
      long long v37 = *(_OWORD *)&v54[32];
      *(_OWORD *)(a1 + 224) = *(_OWORD *)&v54[16];
      *(_OWORD *)(a1 + 240) = v37;
      *(void *)long long v53 = v23;
      uint64_t v38 = v55;
      uint64_t v39 = v56;
      *(_OWORD *)&v53[24] = v60;
      *(_OWORD *)&v53[8] = v59;
      *(_DWORD *)&v53[40] = v26;
      *(_DWORD *)&v53[44] = v30;
      *(void *)long long v54 = v31;
      *(_OWORD *)&v54[24] = v58;
      *(_OWORD *)&v54[8] = v57;
      *(_DWORD *)&v54[40] = v32;
      *(_DWORD *)&v54[44] = v33;
      uint64_t v55 = v34;
      uint64_t v40 = *(void **)(a1 + 264);
      *(void *)(a1 + 256) = v38;
      *(void *)(a1 + 264) = v39;
      long long v56 = v40;
      *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)v25)));
      *(unsigned char *)(a1 + 24) = 0;
      uint64x2_t v42 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v43, (float)v28)));
      BYTE8(v43) = 0;
      if (v40) {
        free(v40);
      }
      return 1;
    }
  }
  return result;
}

void sub_F5648C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_F564A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_F564B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_F564C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F564DC(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 144) - *(void *)(a1 + 136);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 152), v5 < 0x21))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    float v6 = (float)v2;
    do
    {
      unint64_t v7 = v5;
      v5 >>= 1;
    }
    while (v7 >= 0x42 && (float)(*(float *)(a1 + 20) * (float)v5) > v6);
    sub_F566DC((uint64_t)&v34, a1, v5);
    uint64x2_t v9 = *(uint64x2_t *)a1;
    long long v8 = *(_OWORD *)(a1 + 16);
    long long v10 = v35;
    *(uint64x2_t *)a1 = v34;
    *(_OWORD *)(a1 + 16) = v10;
    uint64x2_t v34 = v9;
    long long v35 = v8;
    long long v11 = *(_OWORD *)(a1 + 112);
    long long v55 = *(_OWORD *)(a1 + 96);
    long long v56 = v11;
    uint64_t v57 = *(void *)(a1 + 128);
    long long v12 = *(_OWORD *)(a1 + 48);
    long long v51 = *(_OWORD *)(a1 + 32);
    long long v52 = v12;
    long long v13 = *(_OWORD *)(a1 + 80);
    long long v53 = *(_OWORD *)(a1 + 64);
    long long v54 = v13;
    long long v14 = v37;
    *(_OWORD *)(a1 + 32) = v36;
    *(_OWORD *)(a1 + 48) = v14;
    long long v15 = v41;
    *(_OWORD *)(a1 + 96) = v40;
    *(_OWORD *)(a1 + 112) = v15;
    long long v16 = v39;
    *(_OWORD *)(a1 + 64) = v38;
    *(_OWORD *)(a1 + 80) = v16;
    unint64_t v17 = v44;
    *(void *)(a1 + 128) = v42;
    long long v36 = v51;
    long long v37 = v52;
    uint64_t v18 = v57;
    long long v40 = v55;
    long long v41 = v56;
    long long v38 = v53;
    long long v39 = v54;
    long long v19 = *(_OWORD *)(a1 + 136);
    *(_OWORD *)(a1 + 136) = v43;
    long long v43 = v19;
    unint64_t v20 = *(void *)(a1 + 152);
    *(void *)(a1 + 152) = v17;
    uint64_t v42 = v18;
    unint64_t v44 = v20;
    long long v21 = *(_OWORD *)(a1 + 184);
    long long v51 = *(_OWORD *)(a1 + 168);
    long long v52 = v21;
    LODWORD(v18) = *(_DWORD *)(a1 + 200);
    int v22 = *(_DWORD *)(a1 + 204);
    long long v23 = *(_OWORD *)(a1 + 232);
    long long v49 = *(_OWORD *)(a1 + 216);
    long long v50 = v23;
    int v24 = *(_DWORD *)(a1 + 248);
    int v25 = *(_DWORD *)(a1 + 252);
    *(void *)&long long v15 = *(void *)(a1 + 160);
    *(void *)&long long v23 = *(void *)(a1 + 208);
    uint64_t v26 = *(void *)(a1 + 256);
    long long v27 = *(_OWORD *)&v45[16];
    *(_OWORD *)(a1 + 160) = *(_OWORD *)v45;
    *(_OWORD *)(a1 + 176) = v27;
    long long v28 = *(_OWORD *)v46;
    *(_OWORD *)(a1 + 192) = *(_OWORD *)&v45[32];
    *(_OWORD *)(a1 + 208) = v28;
    long long v29 = *(_OWORD *)&v46[32];
    *(_OWORD *)(a1 + 224) = *(_OWORD *)&v46[16];
    *(_OWORD *)(a1 + 240) = v29;
    *(void *)long long v45 = v15;
    uint64_t v30 = v47;
    long long v31 = v48;
    *(_OWORD *)&v45[24] = v52;
    *(_OWORD *)&v45[8] = v51;
    *(_DWORD *)&v45[40] = v18;
    *(_DWORD *)&v45[44] = v22;
    *(void *)long long v46 = v23;
    *(_OWORD *)&v46[24] = v50;
    *(_OWORD *)&v46[8] = v49;
    *(_DWORD *)&v46[40] = v24;
    *(_DWORD *)&v46[44] = v25;
    uint64_t v47 = v26;
    int v32 = *(void **)(a1 + 264);
    *(void *)(a1 + 256) = v30;
    *(void *)(a1 + 264) = v31;
    long long v48 = v32;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)v17)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v34 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v35, (float)v20)));
    BYTE8(v35) = 0;
    if (v32) {
      free(v32);
    }
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

float sub_F566DC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v4 = *(_OWORD *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 112);
  uint64_t v8 = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(void *)(a1 + 128) = v8;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(_OWORD *)(a1 + 160) = v9;
  long long v11 = *(_OWORD *)(a2 + 208);
  long long v12 = *(_OWORD *)(a2 + 240);
  uint64_t v13 = *(void *)(a2 + 256);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v12;
  *(_OWORD *)(a1 + 208) = v11;
  *(void *)(a1 + 256) = v13;
  *(void *)(a1 + 264) = 0;
  if (*(unsigned char *)(a2 + 25))
  {
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)(a1 + 16), 0)));
    *(unsigned char *)(a1 + 24) = 0;
    sub_F56858(a1, a2, a3);
  }
  else
  {
    unint64_t v15 = 4;
    if (a3 > 4) {
      goto LABEL_5;
    }
    while (1)
    {
      float v16 = *(float *)(a1 + 16) * (float)v15;
      if (*(void *)(a2 + 144) - *(void *)(a2 + 136) < (unint64_t)v16) {
        break;
      }
      do
      {
LABEL_5:
        if ((v15 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "resize overflow");
        }
        v15 *= 2;
      }
      while (v15 < a3);
    }
    *(void *)(a1 + 152) = v15;
    float result = *(float *)(a1 + 20) * (float)v15;
    *(void *)a1 = (unint64_t)v16;
    *(void *)(a1 + 8) = (unint64_t)result;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_F56844(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_F56858(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = *(void *)(a2 + 144) - *(void *)(a2 + 136);
  unint64_t v6 = 4;
  if (a3 <= 4) {
    goto LABEL_4;
  }
  do
  {
    do
    {
      if ((v6 & 0x8000000000000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v6 *= 2;
    }
    while (v6 < a3);
LABEL_4:
    ;
  }
  while (v5 >= (unint64_t)(float)(*(float *)(a1 + 16) * (float)v6));
  sub_CE36A0(a1, v6);
  uint64_t v7 = *(void *)(a2 + 152);
  if (v7)
  {
    int v8 = *(_DWORD *)(a2 + 160);
    int v9 = *(_DWORD *)(a2 + 164);
    int v10 = *(_DWORD *)(a2 + 208);
    int v11 = *(_DWORD *)(a2 + 212);
    int v12 = *(_DWORD *)(a2 + 256);
    if (*(void *)(a2 + 136))
    {
      uint64_t v13 = 104 * v7;
      long long v14 = *(_DWORD **)(a2 + 264);
      while (1)
      {
        int v15 = v14[1];
        BOOL v16 = v8 == *v14 && v9 == v15;
        if (!v16 || (v10 == v14[12] ? (BOOL v17 = v11 == v14[13]) : (BOOL v17 = 0), !v17 || v12 != v14[24]))
        {
          if (*(_DWORD *)(a2 + 32) != *v14 || *(_DWORD *)(a2 + 36) != v15) {
            break;
          }
          BOOL v19 = *(_DWORD *)(a2 + 80) == v14[12] && *(_DWORD *)(a2 + 84) == v14[13];
          if (!v19 || *(_DWORD *)(a2 + 128) != v14[24]) {
            break;
          }
        }
        v14 += 26;
        v13 -= 104;
        if (!v13) {
          goto LABEL_106;
        }
      }
    }
    else
    {
      uint64_t v56 = 104 * v7;
      long long v14 = *(_DWORD **)(a2 + 264);
      while (v8 == *v14 && v9 == v14[1])
      {
        BOOL v58 = v10 == v14[12] && v11 == v14[13];
        if (!v58 || v12 != v14[24]) {
          break;
        }
        v14 += 26;
        v56 -= 104;
        if (!v56) {
          goto LABEL_106;
        }
      }
    }
  }
  else
  {
    long long v14 = *(_DWORD **)(a2 + 264);
  }
  uint64_t v20 = *(void *)(a2 + 264) + 104 * v7;
  if (v14 != (_DWORD *)v20)
  {
    do
    {
      uint64_t v21 = *(void *)(a1 + 152) - 1;
      uint64_t v22 = *((void *)v14 + 6);
      unsigned int v23 = v14[24];
      if (v22 < 0 && (v22 & 0x4000000000000000) == 0) {
        int v25 = 2;
      }
      else {
        int v25 = 0;
      }
      unint64_t v26 = 0x2127599BF4325C37
          * ((((v22 << 32) + 16 * HIDWORD(v22)) | ((unint64_t)v22 >> 58) & 8 | ((HIDWORD(v22) & 0x40000000 | v23 & 0x1FFFFFFF) >> 28) | v25) ^ ((unint64_t)((v22 << 32) + 16 * HIDWORD(v22)) >> 23));
      unint64_t v27 = ((v26 ^ (v26 >> 47)) + 0x388152A534) ^ 0xDEADBEEF;
      uint64_t v28 = HIDWORD(*(void *)v14);
      unsigned int v29 = v28 & 0x40000000;
      if (*(uint64_t *)v14 < 0 && v29 == 0) {
        int v31 = 2;
      }
      else {
        int v31 = 0;
      }
      unint64_t v32 = 0x2127599BF4325C37
          * ((((*(void *)v14 << 32) + 16 * (int)v28) | (v29 >> 28) & 0xFFFFFFFE | (v23 >> 27) & 1 | (*(void *)v14 >> 58) & 8 | v31) ^ ((unint64_t)((*(void *)v14 << 32) + 16 * (int)v28) >> 23));
      uint64_t v33 = ((v32 ^ (v32 >> 47)) + (v27 << 6) + (v27 >> 2) + 2654435769u) ^ v27;
      uint64_t v34 = *(void *)(a1 + 264);
      for (uint64_t i = 1; ; ++i)
      {
        uint64_t v36 = v33 & v21;
        uint64_t v37 = v34 + 104 * (v33 & v21);
        if (*(void *)(a1 + 160) == *(void *)v37
          && *(void *)(a1 + 208) == *(void *)(v34 + 104 * v36 + 48)
          && *(_DWORD *)(a1 + 256) == *(_DWORD *)(v34 + 104 * v36 + 96))
        {
          break;
        }
        uint64_t v33 = i + v36;
      }
      long long v38 = *(_OWORD *)v14;
      long long v39 = *((_OWORD *)v14 + 2);
      *(_OWORD *)(v37 + 16) = *((_OWORD *)v14 + 1);
      *(_OWORD *)(v37 + 32) = v39;
      *(_OWORD *)uint64_t v37 = v38;
      long long v40 = *((_OWORD *)v14 + 3);
      long long v41 = *((_OWORD *)v14 + 4);
      long long v42 = *((_OWORD *)v14 + 5);
      *(void *)(v37 + 96) = *((void *)v14 + 12);
      *(_OWORD *)(v37 + 64) = v41;
      *(_OWORD *)(v37 + 80) = v42;
      *(_OWORD *)(v37 + 48) = v40;
      ++*(void *)(a1 + 144);
      long long v43 = v14 + 26;
      long long v14 = (_DWORD *)v20;
      if (v43 != (_DWORD *)v20)
      {
        int v44 = *(_DWORD *)(a2 + 160);
        int v45 = *(_DWORD *)(a2 + 164);
        int v46 = *(_DWORD *)(a2 + 208);
        int v47 = *(_DWORD *)(a2 + 212);
        int v48 = *(_DWORD *)(a2 + 256);
        if (*(void *)(a2 + 136))
        {
          while (1)
          {
            int v49 = v43[1];
            BOOL v50 = v44 == *v43 && v45 == v49;
            if (!v50 || (v46 == v43[12] ? (BOOL v51 = v47 == v43[13]) : (BOOL v51 = 0), !v51 || v48 != v43[24]))
            {
              if (*(_DWORD *)(a2 + 32) != *v43 || *(_DWORD *)(a2 + 36) != v49) {
                break;
              }
              BOOL v53 = *(_DWORD *)(a2 + 80) == v43[12] && *(_DWORD *)(a2 + 84) == v43[13];
              if (!v53 || *(_DWORD *)(a2 + 128) != v43[24]) {
                break;
              }
            }
            v43 += 26;
            if (v43 == (_DWORD *)v20) {
              goto LABEL_92;
            }
          }
        }
        else
        {
          while (v44 == *v43 && v45 == v43[1])
          {
            BOOL v55 = v46 == v43[12] && v47 == v43[13];
            if (!v55 || v48 != v43[24]) {
              break;
            }
            v43 += 26;
            if (v43 == (_DWORD *)v20)
            {
LABEL_92:
              long long v14 = (_DWORD *)v20;
              goto LABEL_36;
            }
          }
        }
        long long v14 = v43;
      }
LABEL_36:
      ;
    }
    while (v14 != (_DWORD *)(*(void *)(a2 + 264) + 104 * *(void *)(a2 + 152)));
  }
LABEL_106:
  ++*(_DWORD *)(a1 + 28);
}

void sub_F56C8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F56CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)(a2 + 48);
  unsigned int v4 = *(_DWORD *)(a2 + 96);
  if (v3 < 0 && (v3 & 0x4000000000000000) == 0) {
    int v6 = 2;
  }
  else {
    int v6 = 0;
  }
  unint64_t v7 = 0x2127599BF4325C37
     * ((((v3 << 32) + 16 * HIDWORD(v3)) | ((unint64_t)v3 >> 58) & 8 | ((HIDWORD(v3) & 0x40000000 | v4 & 0x1FFFFFFF) >> 28) | v6) ^ ((unint64_t)((v3 << 32) + 16 * HIDWORD(v3)) >> 23));
  unint64_t v8 = ((v7 ^ (v7 >> 47)) + 0x388152A534) ^ 0xDEADBEEF;
  uint64_t v9 = *(void *)a2;
  uint64_t v10 = HIDWORD(*(void *)a2);
  uint64_t v11 = (*(void *)a2 >> 58) & 8;
  unsigned int v12 = v10 & 0x40000000;
  if (v9 < 0 && v12 == 0) {
    int v14 = 2;
  }
  else {
    int v14 = 0;
  }
  unint64_t v15 = 0x2127599BF4325C37
      * ((((v9 << 32) + 16 * (int)v10) | (v12 >> 28) & 0xFFFFFFFE | (v4 >> 27) & 1 | v11 | v14) ^ ((unint64_t)((v9 << 32) + 16 * (int)v10) >> 23));
  uint64_t v16 = ((v15 ^ (v15 >> 47)) + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
  uint64_t v17 = *(void *)(a1 + 264);
  uint64_t v18 = -1;
  while (1)
  {
    uint64_t v19 = v16 & (*(void *)(a1 + 152) - 1);
    uint64_t v20 = *(void *)(v17 + 104 * v19);
    if (*(void *)(a1 + 160) == v20
      && *(void *)(a1 + 208) == *(void *)(v17 + 104 * v19 + 48)
      && *(_DWORD *)(a1 + 256) == *(_DWORD *)(v17 + 104 * v19 + 96))
    {
      break;
    }
    if (*(void *)(a1 + 136)
      && *(void *)(a1 + 32) == v20
      && *(void *)(a1 + 80) == *(void *)(v17 + 104 * v19 + 48)
      && *(_DWORD *)(a1 + 128) == *(_DWORD *)(v17 + 104 * v19 + 96))
    {
      if (v18 == -1) {
        uint64_t v18 = v19;
      }
    }
    else if (v9 == v20 && v10 == HIDWORD(v20))
    {
      BOOL v22 = v3 == *(_DWORD *)(v17 + 104 * v19 + 48) && HIDWORD(v3) == *(_DWORD *)(v17 + 104 * v19 + 52);
      if (v22 && v4 == *(_DWORD *)(v17 + 104 * v19 + 96)) {
        return v19;
      }
    }
    uint64_t v16 = ++v2 + v19;
  }
  return -1;
}

__n128 sub_F56EB0@<Q0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 136);
  uint64_t v4 = *(void *)(a1 + 144);
  if ((unint64_t)(v4 - v5) >= 0x276276276276276)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2E18(exception, "insert overflow");
  }
  uint64_t v6 = *(void *)(a1 + 264);
  if (v5
    && *(void *)(a1 + 32) == *(void *)(v6 + 104 * a3)
    && *(void *)(a1 + 80) == *(void *)(v6 + 104 * a3 + 48)
    && *(_DWORD *)(a1 + 128) == *(_DWORD *)(v6 + 104 * a3 + 96))
  {
    *(void *)(a1 + 136) = v5 - 1;
  }
  else
  {
    *(void *)(a1 + 144) = v4 + 1;
  }
  uint64_t v7 = v6 + 104 * a3;
  long long v8 = *a2;
  long long v9 = a2[2];
  *(_OWORD *)(v7 + 16) = a2[1];
  *(_OWORD *)(v7 + 32) = v9;
  *(_OWORD *)uint64_t v7 = v8;
  __n128 result = (__n128)a2[3];
  long long v11 = a2[4];
  long long v12 = a2[5];
  *(void *)(v7 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(v7 + 64) = v11;
  *(_OWORD *)(v7 + 80) = v12;
  *(__n128 *)(v7 + 48) = result;
  uint64_t v13 = *(void *)(a1 + 264);
  uint64_t v14 = v13 + 104 * a3;
  uint64_t v15 = v13 + 104 * *(void *)(a1 + 152);
  *a4 = a1;
  a4[1] = v14;
  a4[2] = v15;
  return result;
}

void sub_F56FF4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F57008(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t result = sub_F572DC(a1);
    unint64_t v5 = *(void *)(a1 + 48);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v5 = *(void *)(a1 + 48);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  unint64_t v6 = *(void *)(a1 + 56);
  unint64_t v7 = v5 + a2;
  if (v6 < 4 || v7 > *(void *)a1)
  {
    float v8 = *(float *)(a1 + 16);
    unint64_t v9 = vcvts_n_u32_f32(v8, 2uLL);
    unint64_t v10 = 4;
    if (v7 >= v9)
    {
      while ((v10 & 0x8000000000000000) == 0)
      {
        v10 *= 2;
        if (v7 < (unint64_t)(float)(v8 * (float)v10)) {
          goto LABEL_8;
        }
      }
LABEL_27:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
LABEL_8:
    if (v10 > v6)
    {
      unint64_t v11 = *(void *)(a1 + 40);
      unint64_t v12 = v5 - v11 + a2;
      unint64_t v13 = 4;
      if (v6 > 4) {
        goto LABEL_11;
      }
LABEL_10:
      if (v12 >= (unint64_t)(float)(v8 * (float)v13))
      {
LABEL_11:
        while ((v13 & 0x8000000000000000) == 0)
        {
          v13 *= 2;
          if (v13 >= v6) {
            goto LABEL_10;
          }
        }
        goto LABEL_27;
      }
      unint64_t v14 = v7 - (v11 >> 2);
      unint64_t v15 = 4;
      if (v14 >= v9)
      {
        while ((v15 & 0x8000000000000000) == 0)
        {
          v15 *= 2;
          if (v14 < (unint64_t)(float)(v8 * (float)v15)) {
            goto LABEL_19;
          }
        }
        goto LABEL_27;
      }
LABEL_19:
      if (v13 <= 0x7FFFFFFFFFFFFFFELL
        && v13 < v15
        && v12 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v13)))
      {
        v13 *= 2;
      }
      sub_F2E1E4((uint64_t)&v24, a1, v13);
      uint64x2_t v17 = *(uint64x2_t *)a1;
      long long v16 = *(_OWORD *)(a1 + 16);
      long long v18 = v25;
      *(uint64x2_t *)a1 = v24;
      *(_OWORD *)(a1 + 16) = v18;
      uint64x2_t v24 = v17;
      long long v25 = v16;
      long long v19 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 32) = v26;
      long long v26 = v19;
      uint64_t v20 = *(void *)(a1 + 48);
      *(void *)(a1 + 48) = v27;
      uint64_t v27 = v20;
      *(void *)&long long v16 = v28;
      long long v21 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)(a1 + 56) = v28;
      long long v28 = v21;
      BOOL v22 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v29;
      unsigned int v29 = v22;
      *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v16)));
      *(unsigned char *)(a1 + 24) = 0;
      uint64x2_t v24 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v25, (float)(unint64_t)v21)));
      BYTE8(v25) = 0;
      if (v22) {
        free(v22);
      }
      return 1;
    }
  }
  return result;
}

void sub_F5728C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_F572A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_F572B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_F572C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F572DC(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 48) - *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 56), v5 < 0x21))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    float v6 = (float)v2;
    do
    {
      unint64_t v7 = v5;
      v5 >>= 1;
    }
    while (v7 >= 0x42 && (float)(*(float *)(a1 + 20) * (float)v5) > v6);
    sub_F2E1E4((uint64_t)&v16, a1, v5);
    uint64x2_t v9 = *(uint64x2_t *)a1;
    long long v8 = *(_OWORD *)(a1 + 16);
    long long v10 = v17;
    *(uint64x2_t *)a1 = v16;
    *(_OWORD *)(a1 + 16) = v10;
    uint64x2_t v16 = v9;
    long long v17 = v8;
    long long v11 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v18;
    long long v18 = v11;
    uint64_t v12 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v19;
    uint64_t v19 = v12;
    *(void *)&long long v8 = v20;
    long long v13 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v20;
    long long v20 = v13;
    unint64_t v14 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v21;
    long long v21 = v14;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v8)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v16 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v17, (float)(unint64_t)v13)));
    BYTE8(v17) = 0;
    if (v14) {
      free(v14);
    }
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t sub_F57414(uint64_t a1, void *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = (*a2 >> 16) & 0xFFFF0000 | (*a2 << 32);
  unint64_t v4 = (0x2127599BF4325C37 * ((v3 | ((*a2 & 0xFF000000000000) == 0)) ^ (v3 >> 23))) ^ ((0x2127599BF4325C37
                                                                                          * ((v3 | ((*a2 & 0xFF000000000000) == 0)) ^ (v3 >> 23))) >> 47);
  uint64_t v5 = -1;
  while (1)
  {
    uint64_t v6 = v4 & (*(void *)(a1 + 56) - 1);
    unint64_t v7 = *(void *)(*(void *)(a1 + 72) + 8 * v6);
    if (__PAIR64__(*(unsigned __int16 *)(a1 + 68), *(_DWORD *)(a1 + 64)) == __PAIR64__(WORD2(v7), v7)
      && (HIWORD(v7) & 1) != (*(unsigned char *)(a1 + 70) == 0))
    {
      break;
    }
    if (*(void *)(a1 + 40)
      && __PAIR64__(*(unsigned __int16 *)(a1 + 36), *(_DWORD *)(a1 + 32)) == __PAIR64__(WORD2(v7), v7)
      && (HIWORD(v7) & 1) != (*(unsigned char *)(a1 + 38) == 0))
    {
      if (v5 == -1) {
        uint64_t v5 = v6;
      }
    }
    else
    {
      BOOL v8 = *a2 == v7 && (unsigned __int16)WORD2(*a2) == WORD2(v7);
      if (v8 && (HIWORD(v7) & 1) != ((*a2 & 0xFF000000000000) == 0)) {
        return v6;
      }
    }
    unint64_t v4 = ++v2 + v6;
  }
  return -1;
}

uint64_t sub_F57530@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(result + 40);
  uint64_t v4 = *(void *)(result + 48);
  if ((unint64_t)(v4 - v5) >= 0x1FFFFFFFFFFFFFFFLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2E18(exception, "insert overflow");
  }
  uint64_t v6 = *(void *)(result + 72);
  if (v5
    && (unint64_t v7 = *(void *)(v6 + 8 * a3),
        __PAIR64__(*(unsigned __int16 *)(result + 36), *(_DWORD *)(result + 32)) == __PAIR64__(WORD2(v7), v7))
    && (HIWORD(v7) & 1) != (*(unsigned char *)(result + 38) == 0))
  {
    *(void *)(result + 40) = v5 - 1;
  }
  else
  {
    *(void *)(result + 48) = v4 + 1;
  }
  *(void *)(v6 + 8 * a3) = *a2;
  uint64_t v8 = *(void *)(result + 72);
  uint64_t v9 = v8 + 8 * a3;
  uint64_t v10 = v8 + 8 * *(void *)(result + 56);
  *a4 = result;
  a4[1] = v9;
  a4[2] = v10;
  return result;
}

void sub_F57610(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_F57624(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  BOOL v22 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = &v7[48 * v3];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  uint64_t v9 = &v7[48 * v6];
  long long v10 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  long long v11 = v8 + 48;
  v20.i64[1] = (uint64_t)(v8 + 48);
  long long v21 = v9;
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v16 = vdupq_n_s64(v12);
  }
  else
  {
    do
    {
      *((void *)v8 - 6) = 0;
      *((void *)v8 - 5) = 0;
      v8 -= 48;
      *((void *)v8 + 2) = 0;
      long long v14 = *(_OWORD *)(v12 - 48);
      v12 -= 48;
      *(_OWORD *)uint64_t v8 = v14;
      *((void *)v8 + 2) = *(void *)(v12 + 16);
      *(void *)unint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      long long v15 = *(_OWORD *)(v12 + 24);
      *((void *)v8 + 5) = *(void *)(v12 + 40);
      *(_OWORD *)(v8 + 24) = v15;
      *(void *)(v12 + 32) = 0;
      *(void *)(v12 + 40) = 0;
      *(void *)(v12 + 24) = 0;
    }
    while (v12 != v13);
    int64x2_t v16 = *a1;
    long long v11 = (char *)v20.i64[1];
    uint64_t v9 = v21;
  }
  a1->i64[0] = (uint64_t)v8;
  a1->i64[1] = (uint64_t)v11;
  int64x2_t v20 = v16;
  long long v17 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v9;
  long long v21 = v17;
  long long __p = (void *)v16.i64[0];
  sub_C63730((uint64_t)&__p, v16.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

uint64_t sub_F577B4(int64x2_t *a1, long long *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  int64x2_t v20 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  long long __p = v7;
  v18.i64[0] = (uint64_t)&v7[48 * v3];
  uint64_t v19 = &v7[48 * v6];
  sub_EA7B04(v18.i64[0], a2);
  uint64_t v8 = v18.i64[0];
  uint64_t v9 = v18.i64[0] + 48;
  v18.i64[1] = v18.i64[0] + 48;
  uint64_t v11 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    int64x2_t v14 = vdupq_n_s64(v10);
  }
  else
  {
    do
    {
      *(void *)(v8 - 48) = 0;
      *(void *)(v8 - 40) = 0;
      v8 -= 48;
      *(void *)(v8 + 16) = 0;
      long long v12 = *(_OWORD *)(v10 - 48);
      v10 -= 48;
      *(_OWORD *)uint64_t v8 = v12;
      *(void *)(v8 + 16) = *(void *)(v10 + 16);
      *(void *)unint64_t v10 = 0;
      *(void *)(v10 + 8) = 0;
      *(void *)(v10 + 16) = 0;
      long long v13 = *(_OWORD *)(v10 + 24);
      *(void *)(v8 + 40) = *(void *)(v10 + 40);
      *(_OWORD *)(v8 + 24) = v13;
      *(void *)(v10 + 32) = 0;
      *(void *)(v10 + 40) = 0;
      *(void *)(v10 + 24) = 0;
    }
    while (v10 != v11);
    int64x2_t v14 = *a1;
    uint64_t v9 = v18.i64[1];
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  int64x2_t v18 = v14;
  long long v15 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v19;
  uint64_t v19 = v15;
  long long __p = (void *)v14.i64[0];
  sub_C63730((uint64_t)&__p, v14.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v9;
}

void sub_F57934(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_C636F8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_F57948(uint64_t a1, const std::string *a2, uint64_t a3, size_t __sz)
{
  unint64_t v6 = a2;
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v10 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 4) < __sz)
  {
    if (v10)
    {
      sub_C64384(a1, *(void ***)a1);
      operator delete(*(void **)a1);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0x555555555555555) {
      goto LABEL_30;
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= __sz) {
      uint64_t v12 = __sz;
    }
    unint64_t v13 = v11 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v12;
    if (v13 > 0x555555555555555) {
LABEL_30:
    }
      sub_2E00();
    uint64_t v14 = 6 * v13;
    long long v15 = operator new(48 * v13);
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = &v15[v14];
    int64x2_t v16 = sub_D2E3E8(v9, (uint64_t)v6, a3, v15);
LABEL_25:
    *(void *)(a1 + 8) = v16;
    return;
  }
  long long v17 = *(std::string **)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)v10) >> 4) < __sz)
  {
    uint64_t v18 = (uint64_t)a2 + 16 * (((char *)v17 - (char *)v10) >> 4);
    if (v17 != v10)
    {
      uint64_t v19 = 16 * (((char *)v17 - (char *)v10) >> 4);
      do
      {
        if (v6 != v10) {
          sub_D5C258((uint64_t *)v10, v6->__r_.__value_.__r.__words[0], v6->__r_.__value_.__l.__size_, 0xCBEEA4E1A08AD8F3 * ((uint64_t)(v6->__r_.__value_.__l.__size_ - v6->__r_.__value_.__r.__words[0]) >> 3));
        }
        std::string::operator=(v10 + 1, v6 + 1);
        v6 += 2;
        v10 += 2;
        v19 -= 48;
      }
      while (v19);
      unint64_t v10 = *(std::string **)(a1 + 8);
    }
    int64x2_t v16 = sub_D2E3E8(v9, v18, a3, v10);
    goto LABEL_25;
  }
  if (a2 == (const std::string *)a3)
  {
    int64x2_t v20 = *(void ***)a1;
  }
  else
  {
    int64x2_t v20 = *(void ***)a1;
    do
    {
      if (v6 != v10) {
        sub_D5C258((uint64_t *)v10, v6->__r_.__value_.__r.__words[0], v6->__r_.__value_.__l.__size_, 0xCBEEA4E1A08AD8F3 * ((uint64_t)(v6->__r_.__value_.__l.__size_ - v6->__r_.__value_.__r.__words[0]) >> 3));
      }
      std::string::operator=(v10 + 1, v6 + 1);
      v6 += 2;
      v10 += 2;
      v20 += 6;
    }
    while (v6 != (const std::string *)a3);
  }

  sub_C64384(a1, v20);
}

void sub_F57B94(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_F57B9C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_F57BA4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t result = sub_F57F84(a1);
    unint64_t v5 = *(void *)(a1 + 48);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v5 = *(void *)(a1 + 48);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  unint64_t v6 = *(void *)(a1 + 56);
  unint64_t v7 = v5 + a2;
  if (v6 < 4 || v7 > *(void *)a1)
  {
    float v8 = *(float *)(a1 + 16);
    unint64_t v9 = vcvts_n_u32_f32(v8, 2uLL);
    unint64_t v10 = 4;
    if (v7 >= v9)
    {
      while ((v10 & 0x8000000000000000) == 0)
      {
        v10 *= 2;
        if (v7 < (unint64_t)(float)(v8 * (float)v10)) {
          goto LABEL_8;
        }
      }
LABEL_27:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
LABEL_8:
    if (v10 > v6)
    {
      unint64_t v11 = *(void *)(a1 + 40);
      unint64_t v12 = v5 - v11 + a2;
      unint64_t v13 = 4;
      if (v6 > 4) {
        goto LABEL_11;
      }
LABEL_10:
      if (v12 >= (unint64_t)(float)(v8 * (float)v13))
      {
LABEL_11:
        while ((v13 & 0x8000000000000000) == 0)
        {
          v13 *= 2;
          if (v13 >= v6) {
            goto LABEL_10;
          }
        }
        goto LABEL_27;
      }
      unint64_t v14 = v7 - (v11 >> 2);
      unint64_t v15 = 4;
      if (v14 >= v9)
      {
        while ((v15 & 0x8000000000000000) == 0)
        {
          v15 *= 2;
          if (v14 < (unint64_t)(float)(v8 * (float)v15)) {
            goto LABEL_19;
          }
        }
        goto LABEL_27;
      }
LABEL_19:
      if (v13 <= 0x7FFFFFFFFFFFFFFELL
        && v13 < v15
        && v12 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v13)))
      {
        v13 *= 2;
      }
      sub_F580BC((uint64_t)&v24, a1, v13);
      uint64x2_t v17 = *(uint64x2_t *)a1;
      long long v16 = *(_OWORD *)(a1 + 16);
      long long v18 = v25;
      *(uint64x2_t *)a1 = v24;
      *(_OWORD *)(a1 + 16) = v18;
      uint64x2_t v24 = v17;
      long long v25 = v16;
      long long v19 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 32) = v26;
      long long v26 = v19;
      uint64_t v20 = *(void *)(a1 + 48);
      *(void *)(a1 + 48) = v27;
      uint64_t v27 = v20;
      *(void *)&long long v16 = v28;
      long long v21 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)(a1 + 56) = v28;
      long long v28 = v21;
      BOOL v22 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v29;
      unsigned int v29 = v22;
      *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v16)));
      *(unsigned char *)(a1 + 24) = 0;
      uint64x2_t v24 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v25, (float)(unint64_t)v21)));
      BYTE8(v25) = 0;
      if (v22) {
        free(v22);
      }
      return 1;
    }
  }
  return result;
}

void sub_F57E28(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_F57E3C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_F57E50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_F57E64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F57E78@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_F58474(a1, a2);
  if (result == -1)
  {
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    if ((unint64_t)(v11 - v12) >= 0x1FFFFFFFFFFFFFFFLL)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "insert overflow");
    }
    uint64_t v13 = *(void *)(a1 + 72);
    if (v12
      && (*(_DWORD *)(a1 + 32) == *(_DWORD *)(v13 + 8 * v7)
        ? (BOOL v14 = *(_DWORD *)(a1 + 36) == *(_DWORD *)(v13 + 8 * v7 + 4))
        : (BOOL v14 = 0),
          v14))
    {
      *(void *)(a1 + 40) = v12 - 1;
    }
    else
    {
      *(void *)(a1 + 48) = v11 + 1;
    }
    *(void *)(v13 + 8 * v7) = *a2;
    uint64_t v9 = *(void *)(a1 + 72);
    uint64_t v10 = v9 + 8 * v7;
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    uint64_t v9 = *(void *)(a1 + 72);
    uint64_t v10 = v9 + 8 * result;
  }
  uint64_t v15 = v9 + 8 * *(void *)(a1 + 56);
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = v10;
  *(void *)(a3 + 16) = v15;
  *(unsigned char *)(a3 + 24) = v8;
  return result;
}

void sub_F57F70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F57F84(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 48) - *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 56), v5 < 0x21))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    float v6 = (float)v2;
    do
    {
      unint64_t v7 = v5;
      v5 >>= 1;
    }
    while (v7 >= 0x42 && (float)(*(float *)(a1 + 20) * (float)v5) > v6);
    sub_F580BC((uint64_t)&v16, a1, v5);
    uint64x2_t v9 = *(uint64x2_t *)a1;
    long long v8 = *(_OWORD *)(a1 + 16);
    long long v10 = v17;
    *(uint64x2_t *)a1 = v16;
    *(_OWORD *)(a1 + 16) = v10;
    uint64x2_t v16 = v9;
    long long v17 = v8;
    long long v11 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v18;
    long long v18 = v11;
    uint64_t v12 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v19;
    uint64_t v19 = v12;
    *(void *)&long long v8 = v20;
    long long v13 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v20;
    long long v20 = v13;
    BOOL v14 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v21;
    long long v21 = v14;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v8)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v16 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v17, (float)(unint64_t)v13)));
    BYTE8(v17) = 0;
    if (v14) {
      free(v14);
    }
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

float sub_F580BC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = 0;
  if (*(unsigned char *)(a2 + 25))
  {
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)(a1 + 16), 0)));
    *(unsigned char *)(a1 + 24) = 0;
    sub_F581F8(a1, a2, a3);
  }
  else
  {
    unint64_t v6 = 4;
    if (a3 > 4) {
      goto LABEL_5;
    }
    while (1)
    {
      float v7 = *(float *)(a1 + 16) * (float)v6;
      if (*(void *)(a2 + 48) - *(void *)(a2 + 40) < (unint64_t)v7) {
        break;
      }
      do
      {
LABEL_5:
        if ((v6 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "resize overflow");
        }
        v6 *= 2;
      }
      while (v6 < a3);
    }
    *(void *)(a1 + 56) = v6;
    float result = *(float *)(a1 + 20) * (float)v6;
    *(void *)a1 = (unint64_t)v7;
    *(void *)(a1 + 8) = (unint64_t)result;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_F581E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_F581F8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = *(void *)(a2 + 48) - *(void *)(a2 + 40);
  unint64_t v6 = 4;
  if (a3 <= 4) {
    goto LABEL_4;
  }
  do
  {
    do
    {
      if ((v6 & 0x8000000000000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v6 *= 2;
    }
    while (v6 < a3);
LABEL_4:
    ;
  }
  while (v5 >= (unint64_t)(float)(*(float *)(a1 + 16) * (float)v6));
  sub_C74D8C(a1, v6);
  uint64_t v7 = *(void *)(a2 + 56);
  if (v7)
  {
    int v8 = *(_DWORD *)(a2 + 64);
    int v9 = *(_DWORD *)(a2 + 68);
    if (*(void *)(a2 + 40))
    {
      uint64_t v10 = 8 * v7;
      long long v11 = *(_DWORD **)(a2 + 72);
      while (1)
      {
        int v12 = v11[1];
        if ((v8 != *v11 || v9 != v12) && (*(_DWORD *)(a2 + 32) != *v11 || *(_DWORD *)(a2 + 36) != v12)) {
          break;
        }
        v11 += 2;
        v10 -= 8;
        if (!v10) {
          goto LABEL_60;
        }
      }
    }
    else
    {
      uint64_t v34 = 8 * v7;
      long long v11 = *(_DWORD **)(a2 + 72);
      while (v8 == *v11 && v9 == v11[1])
      {
        v11 += 2;
        v34 -= 8;
        if (!v34) {
          goto LABEL_60;
        }
      }
    }
  }
  else
  {
    long long v11 = *(_DWORD **)(a2 + 72);
  }
  uint64_t v15 = *(void *)(a2 + 72) + 8 * v7;
  if (v11 != (_DWORD *)v15)
  {
    do
    {
      uint64_t v16 = *(void *)(a1 + 56) - 1;
      unint64_t v17 = ((int)(*(uint64_t *)v11 >> 29) & 0xFFFFFFFFFFFFFFF8) + (*(void *)v11 << 32);
      unint64_t v18 = 0x2127599BF4325C37
          * (((*(void *)v11 >> 61) & 2 | (*(void *)v11 >> 63) | (*(void *)v11 >> 59) & 4 | v17) ^ (v17 >> 23));
      unint64_t v19 = v18 ^ (v18 >> 47);
      uint64_t v20 = *(void *)(a1 + 72);
      int v21 = *(_DWORD *)(a1 + 64);
      int v22 = *(_DWORD *)(a1 + 68);
      uint64_t v23 = v19 & v16;
      if (v21 != *(_DWORD *)(v20 + 8 * v23) || v22 != *(_DWORD *)(v20 + 8 * v23 + 4))
      {
        uint64_t v25 = 1;
        do
          uint64_t v23 = (v23 + v25++) & v16;
        while (v21 != *(_DWORD *)(v20 + 8 * v23) || v22 != *(_DWORD *)(v20 + 8 * v23 + 4));
      }
      *(void *)(v20 + 8 * v23) = *(void *)v11;
      ++*(void *)(a1 + 48);
      uint64_t v27 = v11 + 2;
      long long v11 = (_DWORD *)v15;
      if (v27 != (_DWORD *)v15)
      {
        int v28 = *(_DWORD *)(a2 + 64);
        int v29 = *(_DWORD *)(a2 + 68);
        if (*(void *)(a2 + 40))
        {
          while (1)
          {
            int v30 = v27[1];
            if ((v28 != *v27 || v29 != v30) && (*(_DWORD *)(a2 + 32) != *v27 || *(_DWORD *)(a2 + 36) != v30)) {
              break;
            }
            v27 += 2;
            if (v27 == (_DWORD *)v15) {
              goto LABEL_21;
            }
          }
        }
        else
        {
          while (v28 == *v27 && v29 == v27[1])
          {
            v27 += 2;
            if (v27 == (_DWORD *)v15)
            {
LABEL_21:
              long long v11 = (_DWORD *)v15;
              goto LABEL_22;
            }
          }
        }
        long long v11 = v27;
      }
LABEL_22:
      ;
    }
    while (v11 != (_DWORD *)(*(void *)(a2 + 72) + 8 * *(void *)(a2 + 56)));
  }
LABEL_60:
  ++*(_DWORD *)(a1 + 28);
}

void sub_F58460(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F58474(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 56) - 1;
  uint64_t v4 = *a2;
  unint64_t v5 = ((int)(*a2 >> 29) & 0xFFFFFFFFFFFFFFF8) + (*a2 << 32);
  unint64_t v6 = 0x2127599BF4325C37
     * ((((unint64_t)*a2 >> 61) & 2 | ((unint64_t)*a2 >> 63) | ((unint64_t)*a2 >> 59) & 4 | v5) ^ (v5 >> 23));
  unint64_t v7 = v6 ^ (v6 >> 47);
  uint64_t v8 = *(void *)(a1 + 72);
  int v9 = *(_DWORD *)(a1 + 64);
  int v10 = *(_DWORD *)(a1 + 68);
  uint64_t result = v7 & v3;
  int v12 = (unsigned int *)(v8 + 8 * (v7 & v3));
  unsigned int v14 = *v12;
  unsigned int v13 = v12[1];
  if (v9 == *v12 && v10 == v13) {
    return -1;
  }
  if (*(void *)(a1 + 40))
  {
    int v17 = *(_DWORD *)(a1 + 32);
    int v16 = *(_DWORD *)(a1 + 36);
    uint64_t v18 = -1;
    uint64_t v19 = 1;
    do
    {
      if (v17 == v14 && v16 == v13)
      {
        if (v18 == -1) {
          uint64_t v18 = result;
        }
      }
      else if (__PAIR64__(v13, v14) == v4)
      {
        return result;
      }
      uint64_t result = (result + v19) & v3;
      unsigned int v14 = *(_DWORD *)(v8 + 8 * result);
      unsigned int v13 = *(_DWORD *)(v8 + 8 * result + 4);
      ++v19;
    }
    while (v9 != v14 || v10 != v13);
    if (v18 != -1) {
      return -1;
    }
    return -1;
  }
  uint64_t v21 = 1;
  while (__PAIR64__(v13, v14) != v4)
  {
    uint64_t result = (result + v21) & v3;
    unsigned int v14 = *(_DWORD *)(v8 + 8 * result);
    unsigned int v13 = *(_DWORD *)(v8 + 8 * result + 4);
    ++v21;
    if (v9 == v14 && v10 == v13) {
      return -1;
    }
  }
  return result;
}

char *sub_F585AC(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  int v22 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = &v7[48 * v3];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  int v9 = &v7[48 * v6];
  long long v10 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  long long v11 = v8 + 48;
  v20.i64[1] = (uint64_t)(v8 + 48);
  uint64_t v21 = v9;
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v16 = vdupq_n_s64(v12);
  }
  else
  {
    do
    {
      *((void *)v8 - 6) = 0;
      *((void *)v8 - 5) = 0;
      v8 -= 48;
      *((void *)v8 + 2) = 0;
      long long v14 = *(_OWORD *)(v12 - 48);
      v12 -= 48;
      *(_OWORD *)uint64_t v8 = v14;
      *((void *)v8 + 2) = *(void *)(v12 + 16);
      *(void *)unint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      long long v15 = *(_OWORD *)(v12 + 24);
      *((void *)v8 + 5) = *(void *)(v12 + 40);
      *(_OWORD *)(v8 + 24) = v15;
      *(void *)(v12 + 32) = 0;
      *(void *)(v12 + 40) = 0;
      *(void *)(v12 + 24) = 0;
    }
    while (v12 != v13);
    int64x2_t v16 = *a1;
    long long v11 = (char *)v20.i64[1];
    int v9 = v21;
  }
  a1->i64[0] = (uint64_t)v8;
  a1->i64[1] = (uint64_t)v11;
  int64x2_t v20 = v16;
  int v17 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v9;
  uint64_t v21 = v17;
  long long __p = (void *)v16.i64[0];
  sub_CE25EC((uint64_t)&__p, v16.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

uint64_t sub_F5873C(int64x2_t *a1, long long *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  int64x2_t v20 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  long long __p = v7;
  v18.i64[0] = (uint64_t)&v7[48 * v3];
  uint64_t v19 = &v7[48 * v6];
  sub_EA8898(v18.i64[0], a2);
  uint64_t v8 = v18.i64[0];
  uint64_t v9 = v18.i64[0] + 48;
  v18.i64[1] = v18.i64[0] + 48;
  uint64_t v11 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    int64x2_t v14 = vdupq_n_s64(v10);
  }
  else
  {
    do
    {
      *(void *)(v8 - 48) = 0;
      *(void *)(v8 - 40) = 0;
      v8 -= 48;
      *(void *)(v8 + 16) = 0;
      long long v12 = *(_OWORD *)(v10 - 48);
      v10 -= 48;
      *(_OWORD *)uint64_t v8 = v12;
      *(void *)(v8 + 16) = *(void *)(v10 + 16);
      *(void *)unint64_t v10 = 0;
      *(void *)(v10 + 8) = 0;
      *(void *)(v10 + 16) = 0;
      long long v13 = *(_OWORD *)(v10 + 24);
      *(void *)(v8 + 40) = *(void *)(v10 + 40);
      *(_OWORD *)(v8 + 24) = v13;
      *(void *)(v10 + 32) = 0;
      *(void *)(v10 + 40) = 0;
      *(void *)(v10 + 24) = 0;
    }
    while (v10 != v11);
    int64x2_t v14 = *a1;
    uint64_t v9 = v18.i64[1];
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  int64x2_t v18 = v14;
  long long v15 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v19;
  uint64_t v19 = v15;
  long long __p = (void *)v14.i64[0];
  sub_CE25EC((uint64_t)&__p, v14.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v9;
}

void sub_F588BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_CE25B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_F588D0(uint64_t a1, const std::string *a2, uint64_t a3, size_t __sz)
{
  unint64_t v6 = a2;
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v10 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 4) < __sz)
  {
    if (v10)
    {
      sub_CE2264(a1, *(void ***)a1);
      operator delete(*(void **)a1);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0x555555555555555) {
      goto LABEL_30;
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= __sz) {
      uint64_t v12 = __sz;
    }
    unint64_t v13 = v11 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v12;
    if (v13 > 0x555555555555555) {
LABEL_30:
    }
      sub_2E00();
    uint64_t v14 = 6 * v13;
    long long v15 = operator new(48 * v13);
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = &v15[v14];
    int64x2_t v16 = sub_F58B1C(v9, (uint64_t)v6, a3, v15);
LABEL_25:
    *(void *)(a1 + 8) = v16;
    return;
  }
  int v17 = *(std::string **)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)v10) >> 4) < __sz)
  {
    uint64_t v18 = (uint64_t)a2 + 16 * (((char *)v17 - (char *)v10) >> 4);
    if (v17 != v10)
    {
      uint64_t v19 = 16 * (((char *)v17 - (char *)v10) >> 4);
      do
      {
        if (v6 != v10) {
          sub_D5D9A0((uint64_t *)v10, v6->__r_.__value_.__r.__words[0], v6->__r_.__value_.__l.__size_, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v6->__r_.__value_.__l.__size_ - v6->__r_.__value_.__r.__words[0]) >> 5));
        }
        std::string::operator=(v10 + 1, v6 + 1);
        v6 += 2;
        v10 += 2;
        v19 -= 48;
      }
      while (v19);
      unint64_t v10 = *(std::string **)(a1 + 8);
    }
    int64x2_t v16 = sub_F58B1C(v9, v18, a3, v10);
    goto LABEL_25;
  }
  if (a2 == (const std::string *)a3)
  {
    int64x2_t v20 = *(void ***)a1;
  }
  else
  {
    int64x2_t v20 = *(void ***)a1;
    do
    {
      if (v6 != v10) {
        sub_D5D9A0((uint64_t *)v10, v6->__r_.__value_.__r.__words[0], v6->__r_.__value_.__l.__size_, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v6->__r_.__value_.__l.__size_ - v6->__r_.__value_.__r.__words[0]) >> 5));
      }
      std::string::operator=(v10 + 1, v6 + 1);
      v6 += 2;
      v10 += 2;
      v20 += 6;
    }
    while (v6 != (const std::string *)a3);
  }

  sub_CE2264(a1, v20);
}

void sub_F58B0C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_F58B14(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_F58B1C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a4;
  unint64_t v11 = a4;
  if (a2 != a3)
  {
    unint64_t v6 = (long long *)(a2 + 24);
    do
    {
      *unint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      uint64_t v8 = (uint64_t)v6 - 24;
      sub_445528(v4, *((void *)v6 - 3), *((void *)v6 - 2), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((void *)v6 - 2) - *((void *)v6 - 3)) >> 5));
      uint64_t v9 = v4 + 3;
      if (*((char *)v6 + 23) < 0)
      {
        sub_4200(v9, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        v4[5] = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v9 = v7;
      }
      unint64_t v4 = v11 + 6;
      v11 += 6;
      v6 += 3;
    }
    while (v8 + 48 != a3);
  }
  return v4;
}

void sub_F58BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*v9)
  {
    sub_20B173C((uint64_t)v9);
    sub_F58C2C((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_F58C2C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_F58C2C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_F58C78(*(void *)a1, **(void **)(a1 + 16), **(void ****)(a1 + 16), **(void **)(a1 + 8), **(void ****)(a1 + 8));
  }
  return a1;
}

void sub_F58C78(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, void **a5)
{
  if (a3 != a5)
  {
    unint64_t v6 = a3;
    do
    {
      if (*((char *)v6 - 1) < 0)
      {
        operator delete(*(v6 - 3));
        uint64_t v8 = v6 - 6;
        uint64_t v9 = (void **)*(v6 - 6);
        if (v9)
        {
LABEL_10:
          unint64_t v10 = (void **)*(v6 - 5);
          long long v7 = v9;
          if (v10 != v9)
          {
            do
            {
              unint64_t v11 = *(v10 - 28);
              if (v11)
              {
                *(v10 - 27) = v11;
                operator delete(v11);
              }
              uint64_t v12 = *(v10 - 31);
              if (v12)
              {
                *(v10 - 30) = v12;
                operator delete(v12);
              }
              unint64_t v13 = *(v10 - 39);
              if (v13)
              {
                *(v10 - 38) = v13;
                operator delete(v13);
              }
              uint64_t v14 = *(v10 - 42);
              if (v14)
              {
                *(v10 - 41) = v14;
                operator delete(v14);
              }
              long long v15 = (char *)*(v10 - 45);
              if (v15)
              {
                int64x2_t v16 = (char *)*(v10 - 44);
                int v17 = *(v10 - 45);
                if (v16 != v15)
                {
                  do
                  {
                    uint64_t v18 = (void *)*((void *)v16 - 3);
                    if (v18)
                    {
                      *((void *)v16 - 2) = v18;
                      operator delete(v18);
                    }
                    v16 -= 56;
                  }
                  while (v16 != v15);
                  int v17 = *(v10 - 45);
                }
                *(v10 - 44) = v15;
                operator delete(v17);
              }
              uint64_t v19 = *(v10 - 57);
              if (v19)
              {
                *(v10 - 56) = v19;
                operator delete(v19);
              }
              int64x2_t v20 = v10 - 60;
              if (*((char *)v10 - 457) < 0) {
                operator delete(*v20);
              }
              v10 -= 60;
            }
            while (v20 != v9);
            long long v7 = *v8;
          }
          *(v6 - 5) = v9;
          operator delete(v7);
        }
      }
      else
      {
        uint64_t v8 = v6 - 6;
        uint64_t v9 = (void **)*(v6 - 6);
        if (v9) {
          goto LABEL_10;
        }
      }
      unint64_t v6 = v8;
    }
    while (v8 != a5);
  }
}

void sub_F58E04()
{
  unk_25FCECF = 16641;
  word_25FCEB8 = 65;
  byte_25FCEE7 = 1;
  byte_25FCED1 = 0;
}

double sub_F58E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  return sub_F047B4(a1, a2, a3, a4, a5, a6, 0);
}

void *sub_F58E38()
{
  uint64_t v0 = __chkstk_darwin();
  int v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v7 = v6;
  sub_F04800(v0);
  sub_F734A0((uint64_t)v11, *(void *)(v5 + 8), 0);
  unint64_t v8 = sub_F734A4((uint64_t)v11, *(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(int **)(v4 + 24), *(unsigned char *)(v4 + 32), v2, *(_DWORD *)(v5 + 24), *(_DWORD *)(v5 + 28));
  sub_F76A30((uint64_t)v11, (uint64_t)&v44);
  sub_33998(v5 + 32, (uint64_t)&v44);
  if (v8 == -1 || (v8 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000)
  {
    *(_DWORD *)(v5 + 60) = sub_F76A1C((uint64_t)v11);
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0;
    *(void *)uint64_t v7 = 0;
  }
  else
  {
    sub_F75894((uint64_t)v11, &v44);
    if (sub_EAE144(&v44))
    {
      if (!sub_37D0C8(*(void **)v5))
      {
        uint64_t v9 = sub_69510();
        nullsub_1(v9);
      }
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v5 + 57) = 1;
      long long v12 = v44;
      uint64_t v13 = v45;
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      long long v14 = v46;
      uint64_t v15 = v47;
      long long v46 = 0uLL;
      uint64_t v47 = 0;
      *(_OWORD *)((char *)v18 + 14) = *(_OWORD *)((char *)v50 + 14);
      long long v17 = v49;
      v18[0] = v50[0];
      long long v16 = v48;
      v18[2] = v51;
      uint64_t v19 = v52;
      long long v51 = 0uLL;
      long long v20 = v53;
      uint64_t v21 = v54;
      uint64_t v52 = 0;
      long long v53 = 0uLL;
      uint64_t v54 = 0;
      long long v22 = v55;
      uint64_t v23 = v56;
      long long v55 = 0uLL;
      uint64_t v56 = 0;
      uint64_t v26 = v59;
      long long v25 = v58;
      long long v24 = v57;
      long long v27 = v60;
      uint64_t v28 = v61;
      long long v60 = 0uLL;
      long long v29 = v62;
      uint64_t v30 = v63;
      uint64_t v61 = 0;
      long long v62 = 0uLL;
      uint64_t v63 = 0;
      long long v31 = v64;
      unsigned int v33 = v66;
      if (v66 <= 1) {
        uint64_t v32 = v65;
      }
      *(void *)((char *)v43 + 15) = *(void *)&v76[15];
      long long v42 = v75;
      v43[0] = *(_OWORD *)v76;
      long long v38 = v71;
      long long v39 = v72;
      long long v40 = v73;
      long long v41 = v74;
      long long v34 = v67;
      long long v35 = v68;
      long long v36 = v69;
      long long v37 = v70;
      sub_EAC378((char **)v7, (uint64_t)&v12, 1uLL);
      sub_405F44((uint64_t)&v12);
    }
    sub_405F44((uint64_t)&v44);
  }
  return sub_BF0DE8(v11);
}

void sub_F59108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_405F44((uint64_t)&STACK[0xF70]);
  sub_405F44((uint64_t)&STACK[0x1150]);
  sub_BF0DE8(va);
  _Unwind_Resume(a1);
}

void sub_F59150(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_BF0DE8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_F59164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_BF0DE8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_F59178()
{
  uint64_t v0 = __chkstk_darwin();
  __int32 v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v7 = v6;
  sub_F04800(v0);
  sub_F7D728((uint64_t)v11, *(void *)(v5 + 8), 0);
  unint64_t v8 = sub_F7D72C(v11, *(int32x2_t **)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(__int32 **)(v4 + 24), *(unsigned char *)(v4 + 32), v2, *(_DWORD *)(v5 + 24), *(_DWORD *)(v5 + 28));
  sub_F809F4((uint64_t)v11, (uint64_t)&v44);
  sub_33998(v5 + 32, (uint64_t)&v44);
  if (v8 == -1 || (v8 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000)
  {
    *(_DWORD *)(v5 + 60) = sub_F76A1C((uint64_t)v11);
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0;
    *(void *)uint64_t v7 = 0;
  }
  else
  {
    sub_F7FAB4((uint64_t)v11, &v44);
    if (sub_EAE144(&v44))
    {
      if (!sub_37D0C8(*(void **)v5))
      {
        uint64_t v9 = sub_69510();
        nullsub_1(v9);
      }
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v5 + 57) = 1;
      long long v12 = v44;
      uint64_t v13 = v45;
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      long long v14 = v46;
      uint64_t v15 = v47;
      long long v46 = 0uLL;
      uint64_t v47 = 0;
      *(_OWORD *)((char *)v18 + 14) = *(_OWORD *)((char *)v50 + 14);
      long long v17 = v49;
      v18[0] = v50[0];
      long long v16 = v48;
      v18[2] = v51;
      uint64_t v19 = v52;
      long long v51 = 0uLL;
      long long v20 = v53;
      uint64_t v21 = v54;
      uint64_t v52 = 0;
      long long v53 = 0uLL;
      uint64_t v54 = 0;
      long long v22 = v55;
      uint64_t v23 = v56;
      long long v55 = 0uLL;
      uint64_t v56 = 0;
      uint64_t v26 = v59;
      long long v25 = v58;
      long long v24 = v57;
      long long v27 = v60;
      uint64_t v28 = v61;
      long long v60 = 0uLL;
      long long v29 = v62;
      uint64_t v30 = v63;
      uint64_t v61 = 0;
      long long v62 = 0uLL;
      uint64_t v63 = 0;
      long long v31 = v64;
      unsigned int v33 = v66;
      if (v66 <= 1) {
        uint64_t v32 = v65;
      }
      *(void *)((char *)v43 + 15) = *(void *)&v76[15];
      long long v42 = v75;
      v43[0] = *(_OWORD *)v76;
      long long v38 = v71;
      long long v39 = v72;
      long long v40 = v73;
      long long v41 = v74;
      long long v34 = v67;
      long long v35 = v68;
      long long v36 = v69;
      long long v37 = v70;
      sub_EA9DBC((char **)v7, (uint64_t)&v12, 1uLL);
      sub_405F44((uint64_t)&v12);
    }
    sub_405F44((uint64_t)&v44);
  }
  return sub_BF0DE8(v11);
}

void sub_F59448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_405F44((uint64_t)&STACK[0xF70]);
  sub_405F44((uint64_t)&STACK[0x1150]);
  sub_BF0DE8(va);
  _Unwind_Resume(a1);
}

void sub_F59490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_BF0DE8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_F594A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_BF0DE8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_F594B8()
{
  uint64_t v0 = __chkstk_darwin();
  __int32 v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v7 = v6;
  sub_F04800(v0);
  sub_F86C00(v11);
  unint64_t v8 = sub_F86CA8(v11, *(int32x2_t **)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(__int32 **)(v4 + 24), *(unsigned char *)(v4 + 32), v2, *(_DWORD *)(v5 + 24), *(_DWORD *)(v5 + 28));
  sub_F8A7A8((uint64_t)v11, (uint64_t)&v44);
  sub_33998(v5 + 32, (uint64_t)&v44);
  if (v8 == -1 || (v8 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000)
  {
    *(_DWORD *)(v5 + 60) = sub_F76A1C((uint64_t)v11);
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0;
    *(void *)uint64_t v7 = 0;
  }
  else
  {
    sub_F89790(v11, (uint64_t)&v44);
    if (sub_EB2EC4((uint64_t)&v44))
    {
      if (!sub_37D0C8(*(void **)v5))
      {
        uint64_t v9 = sub_69510();
        nullsub_1(v9);
      }
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v5 + 57) = 1;
      long long v12 = v44;
      uint64_t v13 = v45;
      long long v44 = 0uLL;
      long long v14 = v46;
      uint64_t v15 = v47;
      uint64_t v45 = 0;
      long long v46 = 0uLL;
      uint64_t v47 = 0;
      *(void *)((char *)&v19[1] + 6) = *(void *)&v51[14];
      long long v18 = v50;
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v51;
      long long v16 = v48;
      long long v17 = v49;
      *(_OWORD *)&v19[3] = v52;
      v19[5] = v53;
      long long v52 = 0uLL;
      long long v20 = v54;
      uint64_t v21 = v55;
      uint64_t v53 = 0;
      long long v54 = 0uLL;
      uint64_t v55 = 0;
      long long v22 = v56;
      uint64_t v23 = v57;
      long long v56 = 0uLL;
      uint64_t v57 = 0;
      uint64_t v26 = v60;
      long long v24 = v58;
      long long v25 = v59;
      long long v27 = v61;
      uint64_t v28 = v62;
      long long v61 = 0uLL;
      long long v29 = v63;
      uint64_t v30 = v64;
      uint64_t v62 = 0;
      long long v63 = 0uLL;
      uint64_t v64 = 0;
      long long v31 = v65;
      unsigned int v33 = v67;
      if (v67 <= 1) {
        uint64_t v32 = v66;
      }
      long long v34 = v68;
      long long v41 = v75;
      long long v42 = v76;
      v43[0] = *(_OWORD *)v77;
      *(void *)((char *)v43 + 15) = *(void *)&v77[15];
      long long v37 = v71;
      long long v38 = v72;
      long long v39 = v73;
      long long v40 = v74;
      long long v35 = v69;
      long long v36 = v70;
      sub_EAAF00((char **)v7, (uint64_t)&v12, 1uLL);
      sub_4451C0((uint64_t)&v12);
    }
    sub_4451C0((uint64_t)&v44);
  }
  return sub_BF0DE8(v11);
}

void sub_F59794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4451C0((uint64_t)&STACK[0xF70]);
  sub_4451C0((uint64_t)&STACK[0x1158]);
  sub_BF0DE8(va);
  _Unwind_Resume(a1);
}

void sub_F597DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_BF0DE8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_F597F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_BF0DE8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_F59804()
{
  unk_25FCEFF = 16641;
  word_25FCEE8 = 65;
  byte_25FCF17 = 1;
  byte_25FCF01 = 0;
}

double sub_F5982C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  return sub_F047B4(a1, a2, a3, a4, a5, a6, 1);
}

void *sub_F59838(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(*(void *)(a2 + 24) + 8) == 1
    && *(void *)(*(void *)(a2 + 8) + 8) - **(void **)(a2 + 8) >= 0x21uLL)
  {
    return sub_F5986C();
  }
  else
  {
    return sub_F59A20();
  }
}

void *sub_F5986C()
{
  uint64_t v0 = __chkstk_darwin();
  int v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v7 = v6;
  sub_F04800(v0);
  sub_F79350((uint64_t)v13, *(void *)(v5 + 8), 0);
  sub_F5A30C(v7, (uint64_t)(*(void *)(*(void *)(v4 + 8) + 8) - **(void **)(v4 + 8)) >> 5);
  sub_F7AD4C(v13, *(void *)v4, *(uint64_t ****)(v4 + 8), *(void *)(v4 + 16), **(_DWORD **)(v4 + 24), *(unsigned char *)(v4 + 32), v2, 0x7FFFFFFF, *(_DWORD *)(v5 + 24), 0, *(_DWORD *)(v5 + 28));
  *(_DWORD *)(v5 + 60) = sub_F76A1C((uint64_t)v13);
  sub_F7BB54((uint64_t)v13, (uint64_t)v14);
  sub_33998(v5 + 32, (uint64_t)v14);
  uint64_t v8 = sub_F7571C((uint64_t)v13);
  uint64_t v9 = *(unint64_t **)v8;
  unint64_t v10 = *(unint64_t **)(v8 + 8);
  if (*(unint64_t **)v8 != v10)
  {
    do
    {
      unint64_t v11 = *v9;
      sub_F7AFD4((uint64_t)v13, *v9, v14);
      sub_448838((uint64_t)&(*v7)[472 * v11], v14);
      sub_405F44((uint64_t)v14);
      ++v9;
    }
    while (v9 != v10);
  }
  *(unsigned char *)(v5 + 57) = 1;
  return sub_BF0DE8(v13);
}

void sub_F599E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4323C0(v4);
  sub_BF0DE8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_F59A20()
{
  uint64_t v0 = __chkstk_darwin();
  int v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v7 = v6;
  sub_F04800(v0);
  sub_F734A0((uint64_t)v13, *(void *)(v5 + 8), 0);
  sub_F5A30C(v7, (uint64_t)(*(void *)(*(void *)(v4 + 8) + 8) - **(void **)(v4 + 8)) >> 5);
  sub_F75494(v13, *(void *)v4, *(uint64_t ****)(v4 + 8), *(void *)(v4 + 16), **(_DWORD **)(v4 + 24), *(unsigned char *)(v4 + 32), v2, 0x7FFFFFFF, *(_DWORD *)(v5 + 24), 0, *(_DWORD *)(v5 + 28));
  *(_DWORD *)(v5 + 60) = sub_F76A1C((uint64_t)v13);
  sub_F76A30((uint64_t)v13, (uint64_t)v14);
  sub_33998(v5 + 32, (uint64_t)v14);
  uint64_t v8 = sub_F7571C((uint64_t)v13);
  uint64_t v9 = *(unint64_t **)v8;
  unint64_t v10 = *(unint64_t **)(v8 + 8);
  if (*(unint64_t **)v8 != v10)
  {
    do
    {
      unint64_t v11 = *v9;
      sub_F759B0((uint64_t)v13, *v9, v14);
      sub_448838((uint64_t)&(*v7)[472 * v11], v14);
      sub_405F44((uint64_t)v14);
      ++v9;
    }
    while (v9 != v10);
  }
  *(unsigned char *)(v5 + 57) = 1;
  return sub_BF0DE8(v13);
}

void sub_F59B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4323C0(v4);
  sub_BF0DE8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_F59BD4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(*(void *)(a2 + 24) + 8) == 1
    && *(void *)(*(void *)(a2 + 8) + 8) - **(void **)(a2 + 8) >= 0x21uLL)
  {
    return sub_F59C08();
  }
  else
  {
    return sub_F59DBC();
  }
}

void *sub_F59C08()
{
  uint64_t v0 = __chkstk_darwin();
  __int32 v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v7 = v6;
  sub_F04800(v0);
  sub_F82704((uint64_t)v13, *(void *)(v5 + 8), 0);
  sub_F5A428(v7, (uint64_t)(*(void *)(*(void *)(v4 + 8) + 8) - **(void **)(v4 + 8)) >> 5);
  sub_F843E8(v13, *(int32x2_t **)v4, *(uint64_t ****)(v4 + 8), *(void *)(v4 + 16), **(_DWORD **)(v4 + 24), *(unsigned char *)(v4 + 32), v2, 0x7FFFFFFF, *(_DWORD *)(v5 + 24), 0, *(_DWORD *)(v5 + 28));
  *(_DWORD *)(v5 + 60) = sub_F76A1C((uint64_t)v13);
  sub_F851F0((uint64_t)v13, (uint64_t)v14);
  sub_33998(v5 + 32, (uint64_t)v14);
  uint64_t v8 = sub_F7571C((uint64_t)v13);
  uint64_t v9 = *(unint64_t **)v8;
  unint64_t v10 = *(unint64_t **)(v8 + 8);
  if (*(unint64_t **)v8 != v10)
  {
    do
    {
      unint64_t v11 = *v9;
      sub_F84670((uint64_t)v13, *v9, v14);
      sub_448838((uint64_t)&(*v7)[472 * v11], v14);
      sub_405F44((uint64_t)v14);
      ++v9;
    }
    while (v9 != v10);
  }
  *(unsigned char *)(v5 + 57) = 1;
  return sub_BF0DE8(v13);
}

void sub_F59D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4323C0(v4);
  sub_BF0DE8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_F59DBC()
{
  uint64_t v0 = __chkstk_darwin();
  __int32 v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v7 = v6;
  sub_F04800(v0);
  sub_F7D728((uint64_t)v13, *(void *)(v5 + 8), 0);
  sub_F5A428(v7, (uint64_t)(*(void *)(*(void *)(v4 + 8) + 8) - **(void **)(v4 + 8)) >> 5);
  sub_F7F6F8(v13, *(int32x2_t **)v4, *(uint64_t ****)(v4 + 8), *(void *)(v4 + 16), **(_DWORD **)(v4 + 24), *(unsigned char *)(v4 + 32), v2, 0x7FFFFFFF, *(_DWORD *)(v5 + 24), 0, *(_DWORD *)(v5 + 28));
  *(_DWORD *)(v5 + 60) = sub_F76A1C((uint64_t)v13);
  sub_F809F4((uint64_t)v13, (uint64_t)v14);
  sub_33998(v5 + 32, (uint64_t)v14);
  uint64_t v8 = sub_F7571C((uint64_t)v13);
  uint64_t v9 = *(unint64_t **)v8;
  unint64_t v10 = *(unint64_t **)(v8 + 8);
  if (*(unint64_t **)v8 != v10)
  {
    do
    {
      unint64_t v11 = *v9;
      sub_F7FBD0((uint64_t)v13, *v9, v14);
      sub_448838((uint64_t)&(*v7)[472 * v11], v14);
      sub_405F44((uint64_t)v14);
      ++v9;
    }
    while (v9 != v10);
  }
  *(unsigned char *)(v5 + 57) = 1;
  return sub_BF0DE8(v13);
}

void sub_F59F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4323C0(v4);
  sub_BF0DE8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_F59F70(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(*(void *)(a2 + 24) + 8) == 1
    && *(void *)(*(void *)(a2 + 8) + 8) - **(void **)(a2 + 8) >= 0x21uLL)
  {
    return sub_F59FA4();
  }
  else
  {
    return sub_F5A158();
  }
}

void *sub_F59FA4()
{
  uint64_t v0 = __chkstk_darwin();
  __int32 v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v7 = v6;
  sub_F04800(v0);
  sub_F8CE40(v13, *(void *)(v5 + 8), 0);
  sub_F5A544(v7, (uint64_t)(*(void *)(*(void *)(v4 + 8) + 8) - **(void **)(v4 + 8)) >> 5);
  sub_F8EB54(v13, *(int32x2_t **)v4, *(unsigned int ****)(v4 + 8), *(void *)(v4 + 16), **(_DWORD **)(v4 + 24), *(unsigned char *)(v4 + 32), v2, 0x7FFFFFFF, *(_DWORD *)(v5 + 24), 0, *(_DWORD *)(v5 + 28));
  *(_DWORD *)(v5 + 60) = sub_F76A1C((uint64_t)v13);
  sub_F8FE0C((uint64_t)v13, (uint64_t)v14);
  sub_33998(v5 + 32, (uint64_t)v14);
  uint64_t v8 = sub_F7571C((uint64_t)v13);
  uint64_t v9 = *(unint64_t **)v8;
  unint64_t v10 = *(unint64_t **)(v8 + 8);
  if (*(unint64_t **)v8 != v10)
  {
    do
    {
      unint64_t v11 = *v9;
      sub_F8F2CC(v13, *v9, (uint64_t)v14);
      sub_4495AC((uint64_t)&(*v7)[480 * v11], v14);
      sub_4451C0((uint64_t)v14);
      ++v9;
    }
    while (v9 != v10);
  }
  *(unsigned char *)(v5 + 57) = 1;
  return sub_BF0DE8(v13);
}

void sub_F5A118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_44106C(v3);
  sub_BF0DE8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_F5A158()
{
  uint64_t v0 = __chkstk_darwin();
  __int32 v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v7 = v6;
  sub_F04800(v0);
  sub_F86C00(v13);
  sub_F5A544(v7, (uint64_t)(*(void *)(*(void *)(v4 + 8) + 8) - **(void **)(v4 + 8)) >> 5);
  sub_F88F70(v13, *(int32x2_t **)v4, *(unsigned int ****)(v4 + 8), *(void *)(v4 + 16), **(_DWORD **)(v4 + 24), *(unsigned char *)(v4 + 32), v2, 0x7FFFFFFF, *(_DWORD *)(v5 + 24), 0, *(_DWORD *)(v5 + 28));
  *(_DWORD *)(v5 + 60) = sub_F76A1C((uint64_t)v13);
  sub_F8A7A8((uint64_t)v13, (uint64_t)v14);
  sub_33998(v5 + 32, (uint64_t)v14);
  uint64_t v8 = sub_F7571C((uint64_t)v13);
  uint64_t v9 = *(unint64_t **)v8;
  unint64_t v10 = *(unint64_t **)(v8 + 8);
  if (*(unint64_t **)v8 != v10)
  {
    do
    {
      unint64_t v11 = *v9;
      sub_F898AC(v13, *v9, (uint64_t)v14);
      sub_4495AC((uint64_t)&(*v7)[480 * v11], v14);
      sub_4451C0((uint64_t)v14);
      ++v9;
    }
    while (v9 != v10);
  }
  *(unsigned char *)(v5 + 57) = 1;
  return sub_BF0DE8(v13);
}

void sub_F5A2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_44106C(v3);
  sub_BF0DE8((uint64_t *)va);
  _Unwind_Resume(a1);
}

char **sub_F5A30C(char **a1, unint64_t a2)
{
  sub_EAD400((uint64_t)v8);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x8AD8F2FBA93869) {
      sub_2E00();
    }
    uint64_t v4 = (char *)operator new(472 * a2);
    *a1 = v4;
    a1[1] = v4;
    uint64_t v5 = 472 * a2;
    uint64_t v6 = &v4[472 * a2];
    a1[2] = v6;
    do
    {
      sub_443EFC(v4, v8);
      v4 += 472;
      v5 -= 472;
    }
    while (v5);
    a1[1] = v6;
  }
  sub_405F44((uint64_t)v8);
  return a1;
}

void sub_F5A3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_F5A410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 8) = v10;
  sub_405F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char **sub_F5A428(char **a1, unint64_t a2)
{
  sub_EAFC08((uint64_t)v8);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x8AD8F2FBA93869) {
      sub_2E00();
    }
    uint64_t v4 = (char *)operator new(472 * a2);
    *a1 = v4;
    a1[1] = v4;
    uint64_t v5 = 472 * a2;
    uint64_t v6 = &v4[472 * a2];
    a1[2] = v6;
    do
    {
      sub_444D20(v4, v8);
      v4 += 472;
      v5 -= 472;
    }
    while (v5);
    a1[1] = v6;
  }
  sub_405F44((uint64_t)v8);
  return a1;
}

void sub_F5A518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_F5A52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 8) = v10;
  sub_405F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char **sub_F5A544(char **a1, unint64_t a2)
{
  sub_EB1D94(v8);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x88888888888889) {
      sub_2E00();
    }
    size_t v4 = 480 * a2;
    uint64_t v5 = (char *)operator new(v4);
    *a1 = v5;
    a1[1] = v5;
    uint64_t v6 = &v5[v4];
    a1[2] = &v5[v4];
    do
    {
      sub_4456B4(v5, v8);
      v5 += 480;
      v4 -= 480;
    }
    while (v4);
    a1[1] = v6;
  }
  sub_4451C0((uint64_t)v8);
  return a1;
}

void sub_F5A62C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4451C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_F5A640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v2 + 8) = v3;
  sub_4451C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_F5A658()
{
  unk_25FCF2F = 16641;
  word_25FCF18 = 65;
  byte_25FCF47 = 1;
  byte_25FCF31 = 0;
}

uint64_t sub_F5A680(unsigned int a1)
{
  unsigned __int8 v1 = a1;
  if (a1 >= 3)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v5);
      sub_188FC78(v5, (uint64_t)"Unknown path computation method encountered: ", 45);
      std::ostream::operator<<();
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (v4 < 0) {
        operator delete(__p);
      }
      if (v6 < 0) {
        operator delete((void *)v5[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    return 0;
  }
  return v1;
}

void sub_F5A7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void *sub_F5A844(void *a1, void *a2)
{
  *a1 = a2;
  sub_F170F0(a1 + 1, a2);
  return a1;
}

int *sub_F5A874(uint64_t a1, void *a2, int *a3, int *a4, int a5, int a6)
{
  if (sub_EAE144(a2)) {
    return &dword_24F7398;
  }
  if (a6)
  {
    return (int *)sub_F5AFE4(a1, (uint64_t)a2, a3, a4, a5);
  }
  else
  {
    return (int *)sub_F5A92C(a1, (uint64_t)a2, a3, a4, a5);
  }
}

uint64_t sub_F5A92C(uint64_t a1, uint64_t a2, int *a3, int *a4, int a5)
{
  char v5 = a5;
  uint64_t v10 = sub_EAF9B4(a2, *a4, a5, *a3, 0);
  uint64_t v11 = v10;
  if (*(_DWORD *)(v10 + 12) == -1)
  {
    *(_DWORD *)uint64_t v10 = *a4;
    *(unsigned char *)(v10 + 4) = v5;
    *(_DWORD *)(v10 + 8) = 0;
    *(_DWORD *)(v10 + 12) = *a3;
    uint64_t v13 = (uint64_t *)(a1 + 8);
    *(void *)&long long v77 = sub_EADC88(a2);
    uint64_t v14 = sub_69134(a2);
    *(void *)&long long v78 = sub_F17140((uint64_t *)(a1 + 8), (uint64_t *)&v77, v14, (uint64_t)a3);
    *((void *)&v78 + 1) = v15;
    *(void *)&long long v77 = sub_EADCD0(a2);
    uint64_t v16 = sub_EADAD0(a2);
    unint64_t v17 = sub_F17140((uint64_t *)(a1 + 8), (uint64_t *)&v77, v16, (uint64_t)a3);
    if (v78 != -1 && DWORD1(v78) != 0x7FFFFFFF && *((void *)&v78 + 1) != 0x7FFFFFFFFFFFFFFFLL)
    {
      unint64_t v19 = v17;
      if (v17 != -1 && (v17 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
      {
        uint64_t v20 = v18;
        if (v18 != 0x7FFFFFFFFFFFFFFFLL)
        {
          long long v75 = (char **)(v11 + 32);
          if (!sub_EADC78(a2))
          {
            uint64_t v74 = v20;
            long long v43 = (void *)sub_5231C(a2);
            unint64_t v44 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v43[1] - *v43) >> 3) + 3;
            uint64_t v45 = *(unsigned char **)(v11 + 32);
            if (v44 > (uint64_t)(*(void *)(v11 + 48) - (void)v45) >> 4)
            {
              if (v44 >> 60) {
                sub_2E00();
              }
              long long v46 = *(unsigned char **)(v11 + 40);
              uint64_t v47 = 16 * v44;
              long long v48 = (char *)operator new(16 * v44);
              long long v49 = &v48[(v46 - v45) & 0xFFFFFFFFFFFFFFF0];
              long long v50 = v49;
              if (v46 != v45)
              {
                long long v51 = &v48[(v46 - v45) & 0xFFFFFFFFFFFFFFF0];
                do
                {
                  long long v50 = v51 - 16;
                  *((_OWORD *)v51 - 1) = *((_OWORD *)v46 - 1);
                  v46 -= 16;
                  v51 -= 16;
                }
                while (v46 != v45);
              }
              *(void *)(v11 + 32) = v50;
              *(void *)(v11 + 40) = v49;
              *(void *)(v11 + 48) = &v48[v47];
              if (v45) {
                operator delete(v45);
              }
            }
            long long v77 = v78;
            sub_3BFF8(v75, &v78);
            long long v52 = (uint64_t *)sub_5231C(a2);
            uint64_t v54 = *v52;
            uint64_t v53 = v52[1];
            if (*v52 == v53)
            {
LABEL_39:
              uint64_t v62 = (int **)sub_EADD34(a2);
              unsigned int v63 = sub_486A4C(a2);
              unint64_t v64 = sub_F17510(v13, v62, v63, (uint64_t)a3);
              if (v64 != -1
                && (v64 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000
                && v65 != 0x7FFFFFFFFFFFFFFFLL)
              {
                uint64_t v66 = *(void *)(v11 + 40);
                uint64_t v67 = (*(_DWORD *)(v66 - 16) + v64);
                uint64_t v68 = (*(_DWORD *)(v66 - 12) + HIDWORD(v64));
                uint64_t v69 = *(void *)(v66 - 8) + v65;
                *(void *)&long long v76 = v67 | (v68 << 32);
                *((void *)&v76 + 1) = v69;
                sub_3BFF8(v75, &v76);
                uint64_t v70 = *(void *)(v11 + 40);
                uint64_t v71 = (*(_DWORD *)(v70 - 16) + v19);
                uint64_t v72 = (*(_DWORD *)(v70 - 12) + HIDWORD(v19));
                uint64_t v73 = *(void *)(v70 - 8) + v74;
                *(void *)&long long v76 = v71 | (v72 << 32);
                *((void *)&v76 + 1) = v73;
                long long v41 = &v76;
                long long v42 = (char **)(v11 + 32);
                goto LABEL_43;
              }
            }
            else
            {
              while (1)
              {
                uint64_t v55 = sub_5231C(a2);
                uint64_t v56 = *(void *)v55;
                unint64_t v57 = *(void *)(*(void *)v55 + 32);
                unsigned int v58 = 1000000000;
                if (__PAIR64__(*(unsigned __int16 *)(v54 + 36), *(_DWORD *)(v54 + 32)) == __PAIR64__(WORD2(v57), v57)
                  && (HIWORD(v57) & 1) != (*(unsigned char *)(v54 + 38) == 0))
                {
                  unint64_t v59 = *(void *)(v56 + 72);
                  if (__PAIR64__(*(unsigned __int16 *)(v54 + 76), *(_DWORD *)(v54 + 72)) == __PAIR64__(WORD2(v59), v59)
                    && (HIWORD(v59) & 1) != (*(unsigned char *)(v54 + 78) == 0)
                    && *(_DWORD *)(v54 + 80) == *(_DWORD *)(v56 + 80)
                    && ((*(unsigned char *)(v56 + 84) ^ *(unsigned char *)(v54 + 84)) & 7) == 0)
                  {
                    unsigned int v58 = sub_EAE428(a2);
                  }
                }
                unint64_t v60 = sub_F178C0(v13, (int **)v54, v58, (uint64_t)a3);
                if (v60 == -1
                  || (v60 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000
                  || v61 == 0x7FFFFFFFFFFFFFFFLL)
                {
                  break;
                }
                LODWORD(v77) = v77 + v60;
                DWORD1(v77) += HIDWORD(v60);
                *((void *)&v77 + 1) += v61;
                sub_3BFF8(v75, &v77);
                v54 += 88;
                if (v54 == v53) {
                  goto LABEL_39;
                }
              }
            }
            *(void *)(v11 + 40) = *(void *)(v11 + 32);
            return v11;
          }
          uint64_t v21 = *(unsigned char **)(v11 + 32);
          if (*(void *)(v11 + 48) - (void)v21 <= 0x2FuLL)
          {
            long long v22 = *(unsigned char **)(v11 + 40);
            uint64_t v23 = (char *)operator new(0x30uLL);
            long long v24 = &v23[(v22 - v21) & 0xFFFFFFFFFFFFFFF0];
            long long v25 = v24;
            if (v22 != v21)
            {
              uint64_t v26 = &v23[(v22 - v21) & 0xFFFFFFFFFFFFFFF0];
              do
              {
                long long v25 = v26 - 16;
                *((_OWORD *)v26 - 1) = *((_OWORD *)v22 - 1);
                v22 -= 16;
                v26 -= 16;
              }
              while (v22 != v21);
            }
            *(void *)(v11 + 32) = v25;
            *(void *)(v11 + 40) = v24;
            *(void *)(v11 + 48) = v23 + 48;
            if (v21) {
              operator delete(v21);
            }
          }
          unsigned int v27 = sub_EAE418(a2);
          uint64_t v28 = (int **)sub_EADD1C(a2);
          unint64_t v29 = sub_F17510(v13, v28, v27, (uint64_t)a3);
          unint64_t v31 = v29;
          if (v29 != -1 && (v29 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
          {
            uint64_t v32 = v30;
            if (v30 != 0x7FFFFFFFFFFFFFFFLL)
            {
              sub_3BFF8(v75, &v78);
              uint64_t v33 = *(void *)(v11 + 40);
              uint64_t v34 = (*(_DWORD *)(v33 - 16) + v31);
              uint64_t v35 = (*(_DWORD *)(v33 - 12) + HIDWORD(v31));
              uint64_t v36 = *(void *)(v33 - 8) + v32;
              *(void *)&long long v77 = v34 | (v35 << 32);
              *((void *)&v77 + 1) = v36;
              sub_3BFF8(v75, &v77);
              uint64_t v37 = *(void *)(v11 + 40);
              uint64_t v38 = (*(_DWORD *)(v37 - 16) + v19);
              uint64_t v39 = (*(_DWORD *)(v37 - 12) + HIDWORD(v19));
              uint64_t v40 = *(void *)(v37 - 8) + v20;
              *(void *)&long long v77 = v38 | (v39 << 32);
              *((void *)&v77 + 1) = v40;
              long long v41 = &v77;
              long long v42 = (char **)(v11 + 32);
LABEL_43:
              sub_3BFF8(v42, v41);
              *(_OWORD *)(v11 + 16) = *(_OWORD *)(*(void *)(v11 + 40) - 16);
            }
          }
        }
      }
    }
  }
  return v11;
}

uint64_t sub_F5AFE4(uint64_t a1, uint64_t a2, int *a3, int *a4, int a5)
{
  char v5 = a5;
  uint64_t v10 = sub_EAF9B4(a2, *a4, a5, *a3, 1);
  uint64_t v11 = v10;
  if (*(_DWORD *)(v10 + 12) == -1)
  {
    *(_DWORD *)uint64_t v10 = *a4;
    *(unsigned char *)(v10 + 4) = v5;
    *(_DWORD *)(v10 + 8) = 1;
    *(_DWORD *)(v10 + 12) = *a3;
    uint64_t v13 = (uint64_t *)(a1 + 8);
    *(void *)&long long v83 = sub_EADC88(a2);
    uint64_t v14 = sub_69134(a2);
    *(void *)&v84[0] = sub_F17140(v13, (uint64_t *)&v83, v14, (uint64_t)a3);
    *((void *)&v84[0] + 1) = v15;
    *(void *)&long long v82 = sub_EADCD0(a2);
    uint64_t v16 = sub_EADAD0(a2);
    unint64_t v17 = sub_F17140(v13, (uint64_t *)&v82, v16, (uint64_t)a3);
    *(void *)&long long v83 = v17;
    *((void *)&v83 + 1) = v18;
    if (LODWORD(v84[0]) != -1 && DWORD1(v84[0]) != 0x7FFFFFFF && *((void *)&v84[0] + 1) != 0x7FFFFFFFFFFFFFFFLL)
    {
      int v19 = v17;
      if (v17 != -1)
      {
        unint64_t v20 = HIDWORD(v17);
        if (HIDWORD(v17) != 0x7FFFFFFF)
        {
          uint64_t v21 = v18;
          if (v18 != 0x7FFFFFFFFFFFFFFFLL)
          {
            long long v81 = (char **)(v11 + 32);
            if (sub_EADC78(a2))
            {
              long long v22 = *(unsigned char **)(v11 + 32);
              if (*(void *)(v11 + 48) - (void)v22 <= 0x2FuLL)
              {
                long long v78 = v13;
                uint64_t v23 = *(unsigned char **)(v11 + 40);
                long long v24 = (char *)operator new(0x30uLL);
                long long v25 = &v24[(v23 - v22) & 0xFFFFFFFFFFFFFFF0];
                uint64_t v26 = v25;
                if (v23 != v22)
                {
                  unsigned int v27 = &v24[(v23 - v22) & 0xFFFFFFFFFFFFFFF0];
                  do
                  {
                    uint64_t v26 = v27 - 16;
                    *((_OWORD *)v27 - 1) = *((_OWORD *)v23 - 1);
                    v23 -= 16;
                    v27 -= 16;
                  }
                  while (v23 != v22);
                }
                *(void *)(v11 + 32) = v26;
                *(void *)(v11 + 40) = v25;
                *(void *)(v11 + 48) = v24 + 48;
                uint64_t v13 = v78;
                if (v22) {
                  operator delete(v22);
                }
              }
              unsigned int v28 = sub_EAE418(a2);
              unint64_t v29 = (int **)sub_EADD34(a2);
              unint64_t v30 = sub_F17510(v13, v29, v28, (uint64_t)a3);
              unint64_t v32 = v30;
              if (v30 != -1 && (v30 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
              {
                uint64_t v33 = v31;
                if (v31 != 0x7FFFFFFFFFFFFFFFLL)
                {
                  sub_3BFF8(v81, v84);
                  uint64_t v34 = *(void *)(v11 + 40);
                  uint64_t v35 = (*(_DWORD *)(v34 - 16) + v32);
                  uint64_t v36 = (*(_DWORD *)(v34 - 12) + HIDWORD(v32));
                  uint64_t v37 = *(void *)(v34 - 8) + v33;
                  *(void *)&long long v82 = v35 | (v36 << 32);
                  *((void *)&v82 + 1) = v37;
                  sub_3BFF8(v81, &v82);
                  uint64_t v38 = *(void *)(v11 + 40);
                  uint64_t v39 = (*(_DWORD *)(v38 - 16) + v19);
                  uint64_t v40 = (*(_DWORD *)(v38 - 12) + v20);
                  uint64_t v41 = v21 + *(void *)(v38 - 8);
                  *(void *)&long long v82 = v39 | (v40 << 32);
                  *((void *)&v82 + 1) = v41;
                  sub_3BFF8(v81, &v82);
                  *(_OWORD *)(v11 + 16) = *(_OWORD *)(*(void *)(v11 + 40) - 16);
                }
              }
            }
            else
            {
              long long v42 = (int **)sub_EADD34(a2);
              unsigned int v43 = sub_486A4C(a2);
              unint64_t v44 = sub_F17510(v13, v42, v43, (uint64_t)a3);
              unint64_t v46 = v44;
              if (v44 != -1 && (v44 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
              {
                uint64_t v47 = v45;
                if (v45 != 0x7FFFFFFFFFFFFFFFLL)
                {
                  long long v48 = (void *)sub_5231C(a2);
                  unint64_t v49 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v48[1] - *v48) >> 3) + 3;
                  long long v50 = *(unsigned char **)(v11 + 32);
                  if (v49 > (uint64_t)(*(void *)(v11 + 48) - (void)v50) >> 4)
                  {
                    uint64_t v79 = v13;
                    if (v49 >> 60) {
                      sub_2E00();
                    }
                    long long v51 = *(unsigned char **)(v11 + 40);
                    uint64_t v52 = 16 * v49;
                    uint64_t v53 = (char *)operator new(16 * v49);
                    uint64_t v54 = &v53[(v51 - v50) & 0xFFFFFFFFFFFFFFF0];
                    uint64_t v55 = v54;
                    if (v51 != v50)
                    {
                      uint64_t v56 = &v53[(v51 - v50) & 0xFFFFFFFFFFFFFFF0];
                      do
                      {
                        uint64_t v55 = v56 - 16;
                        *((_OWORD *)v56 - 1) = *((_OWORD *)v51 - 1);
                        v51 -= 16;
                        v56 -= 16;
                      }
                      while (v51 != v50);
                    }
                    *(void *)(v11 + 32) = v55;
                    *(void *)(v11 + 40) = v54;
                    *(void *)(v11 + 48) = &v53[v52];
                    uint64_t v13 = v79;
                    if (v50) {
                      operator delete(v50);
                    }
                  }
                  sub_3BFF8(v81, &v83);
                  int v57 = v83 + v46;
                  int v58 = DWORD1(v83) + HIDWORD(v46);
                  uint64_t v59 = *((void *)&v83 + 1) + v47;
                  unint64_t v60 = (int ***)sub_5231C(a2);
                  uint64_t v61 = v60[1];
                  long long v80 = *v60;
                  if (v61 == *v60)
                  {
LABEL_42:
                    sub_3BFF8(v81, v84);
                    uint64_t v69 = (LODWORD(v84[0]) + v57);
                    uint64_t v70 = (DWORD1(v84[0]) + v58);
                    uint64_t v71 = *((void *)&v84[0] + 1) + v59;
                    uint64_t v72 = *(unint64_t **)(v11 + 32);
                    uint64_t v73 = *(unint64_t **)(v11 + 40);
                    if (v72 != v73)
                    {
                      uint64_t v74 = v73 - 2;
                      if (v73 - 2 > v72)
                      {
                        long long v75 = v72 + 2;
                        do
                        {
                          long long v76 = *((_OWORD *)v75 - 1);
                          *((_OWORD *)v75 - 1) = *(_OWORD *)v74;
                          *(_OWORD *)uint64_t v74 = v76;
                          v74 -= 2;
                          BOOL v77 = v75 >= v74;
                          v75 += 2;
                        }
                        while (!v77);
                        uint64_t v72 = *(unint64_t **)(v11 + 32);
                        uint64_t v73 = *(unint64_t **)(v11 + 40);
                      }
                    }
                    sub_F5B700(v72, v73, (uint64_t *)v72);
                    *(void *)(v11 + 16) = v69 | (v70 << 32);
                    *(void *)(v11 + 24) = v71;
                  }
                  else
                  {
                    while (1)
                    {
                      uint64_t v62 = sub_5231C(a2);
                      uint64_t v63 = *(void *)v62;
                      unint64_t v64 = *(void *)(*(void *)v62 + 32);
                      unsigned int v65 = 1000000000;
                      if (__PAIR64__(*((unsigned __int16 *)v61 - 26), *((_DWORD *)v61 - 14)) == __PAIR64__(WORD2(v64), v64)&& (HIWORD(v64) & 1) != (*((unsigned char *)v61 - 50) == 0))
                      {
                        unint64_t v66 = *(void *)(v63 + 72);
                        if (__PAIR64__(*((unsigned __int16 *)v61 - 6), *((_DWORD *)v61 - 4)) == __PAIR64__(WORD2(v66), v66)&& (HIWORD(v66) & 1) != (*((unsigned char *)v61 - 10) == 0)&& *((_DWORD *)v61 - 2) == *(_DWORD *)(v63 + 80)&& ((*(unsigned char *)(v63 + 84) ^ *((unsigned char *)v61 - 4)) & 7) == 0)
                        {
                          unsigned int v65 = sub_EAE428(a2);
                        }
                      }
                      v61 -= 11;
                      unint64_t v67 = sub_F178C0(v13, v61, v65, (uint64_t)a3);
                      *(void *)&long long v82 = v67;
                      *((void *)&v82 + 1) = v68;
                      if (v67 == -1
                        || (v67 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000
                        || v68 == 0x7FFFFFFFFFFFFFFFLL)
                      {
                        break;
                      }
                      sub_3BFF8(v81, &v82);
                      v57 += v82;
                      v58 += DWORD1(v82);
                      v59 += *((void *)&v82 + 1);
                      if (v61 == v80) {
                        goto LABEL_42;
                      }
                    }
                    *(void *)(v11 + 40) = *(void *)(v11 + 32);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v11;
}

uint64_t *sub_F5B700(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  if (a1 != a2)
  {
    unint64_t v4 = *a1;
    uint64_t v3 = a1[1];
    *a3 = *a1;
    a3[1] = v3;
    a3 += 2;
    char v5 = a1 + 2;
    if (a1 + 2 != a2)
    {
      unint64_t v6 = HIDWORD(v4);
      do
      {
        unint64_t v4 = (*(_DWORD *)v5 + v4);
        unint64_t v6 = (*((_DWORD *)v5 + 1) + v6);
        v3 += v5[1];
        *a3 = v4 | (v6 << 32);
        a3[1] = v3;
        a3 += 2;
        v5 += 2;
      }
      while (v5 != a2);
    }
  }
  return a3;
}

void *sub_F5B750(void *a1, uint64_t a2)
{
  *a1 = a2;
  sub_F2CEBC();
  return a1;
}

int *sub_F5B780(uint64_t a1, void *a2, int *a3, int *a4, int a5, int a6)
{
  if (sub_EAE144(a2)) {
    return &dword_24F73D8;
  }
  if (a6)
  {
    return (int *)sub_F5BF58(a1, (uint64_t)a2, a3, a4, a5);
  }
  else
  {
    return (int *)sub_F5B838(a1, (uint64_t)a2, a3, a4, a5);
  }
}

uint64_t sub_F5B838(uint64_t a1, uint64_t a2, int *a3, int *a4, int a5)
{
  uint64_t v10 = sub_EAF9B4(a2, *a4, a5, *a3, 0);
  uint64_t v11 = v10;
  if (*(_DWORD *)(v10 + 12) == -1)
  {
    *(_DWORD *)uint64_t v10 = *a4;
    *(unsigned char *)(v10 + 4) = a5;
    *(_DWORD *)(v10 + 8) = 0;
    *(_DWORD *)(v10 + 12) = *a3;
    uint64_t v13 = a1 + 8;
    *(void *)&long long v95 = sub_EAFECC(a2);
    uint64_t v14 = sub_69134(a2);
    *(void *)&long long v96 = sub_EC98F8(v15, v16, a1 + 8, (uint64_t)&v95, v14, (uint64_t)a3, 0);
    *((void *)&v96 + 1) = v17;
    *(void *)&long long v95 = sub_EAFF14(a2);
    uint64_t v18 = sub_EADAD0(a2);
    uint64_t v21 = sub_EC98F8(v19, v20, a1 + 8, (uint64_t)&v95, v18, (uint64_t)a3, 0);
    if (v96 != -1 && DWORD1(v96) != 0x7FFFFFFF && *((void *)&v96 + 1) != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v23 = v21;
      if (v21 != -1 && (v21 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
      {
        uint64_t v24 = v22;
        if (v22 != 0x7FFFFFFFFFFFFFFFLL)
        {
          long long v93 = (char **)(v11 + 32);
          if (!sub_EADC78(a2))
          {
            uint64_t v92 = v24;
            long long v51 = (void *)sub_5231C(a2);
            unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51[1] - *v51) >> 5) + 3;
            uint64_t v53 = *(unsigned char **)(v11 + 32);
            if (v52 > (uint64_t)(*(void *)(v11 + 48) - (void)v53) >> 4)
            {
              if (v52 >> 60) {
                sub_2E00();
              }
              uint64_t v54 = *(unsigned char **)(v11 + 40);
              uint64_t v55 = 16 * v52;
              uint64_t v56 = (char *)operator new(16 * v52);
              int v57 = &v56[(v54 - v53) & 0xFFFFFFFFFFFFFFF0];
              int v58 = v57;
              if (v54 != v53)
              {
                uint64_t v59 = &v56[(v54 - v53) & 0xFFFFFFFFFFFFFFF0];
                do
                {
                  int v58 = v59 - 16;
                  *((_OWORD *)v59 - 1) = *((_OWORD *)v54 - 1);
                  v54 -= 16;
                  v59 -= 16;
                }
                while (v54 != v53);
              }
              *(void *)(v11 + 32) = v58;
              *(void *)(v11 + 40) = v57;
              *(void *)(v11 + 48) = &v56[v55];
              if (v53) {
                operator delete(v53);
              }
            }
            long long v95 = v96;
            sub_3BFF8(v93, &v96);
            unint64_t v60 = (uint64_t *)sub_5231C(a2);
            uint64_t v62 = *v60;
            uint64_t v61 = v60[1];
            if (*v60 == v61)
            {
LABEL_56:
              long long v75 = (int **)sub_EAFF60(a2);
              unsigned int v76 = sub_486A4C(a2);
              int v77 = *a4;
              signed int v78 = 0x7FFFFFFF;
              if (v77 != 0x7FFFFFFF)
              {
                if (SDWORD1(v95) < 0) {
                  char v79 = -5;
                }
                else {
                  char v79 = 5;
                }
                signed int v78 = SDWORD1(v95) / 10
                    + v77
                    + (((103 * (char)(v79 + SDWORD1(v95) % 10)) >> 15) & 1)
                    + ((103 * (char)(v79 + SDWORD1(v95) % 10)) >> 10);
              }
              unsigned int v80 = v76;
              double v81 = sub_ECA6AC(v13, v75, (uint64_t)a3, v78, a5);
              unint64_t v82 = sub_ECA410(v13, v75, v80, (uint64_t)a3, v78, a5, v81);
              if (v82 != -1
                && (v82 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000
                && v83 != 0x7FFFFFFFFFFFFFFFLL)
              {
                uint64_t v84 = *(void *)(v11 + 40);
                uint64_t v85 = (*(_DWORD *)(v84 - 16) + v82);
                uint64_t v86 = (*(_DWORD *)(v84 - 12) + HIDWORD(v82));
                uint64_t v87 = *(void *)(v84 - 8) + v83;
                *(void *)&long long v94 = v85 | (v86 << 32);
                *((void *)&v94 + 1) = v87;
                uint64_t v41 = (char **)(v11 + 32);
                sub_3BFF8(v93, &v94);
                uint64_t v88 = *(void *)(v11 + 40);
                uint64_t v89 = (*(_DWORD *)(v88 - 16) + v23);
                uint64_t v90 = (*(_DWORD *)(v88 - 12) + HIDWORD(v23));
                uint64_t v91 = *(void *)(v88 - 8) + v92;
                *(void *)&long long v94 = v89 | (v90 << 32);
                *((void *)&v94 + 1) = v91;
                long long v50 = &v94;
                goto LABEL_65;
              }
            }
            else
            {
              while (1)
              {
                uint64_t v63 = sub_5231C(a2);
                uint64_t v64 = *(void *)v63;
                unint64_t v65 = *(void *)(*(void *)v63 + 32);
                unsigned int v66 = 1000000000;
                if (__PAIR64__(*(unsigned __int16 *)(v62 + 36), *(_DWORD *)(v62 + 32)) == __PAIR64__(WORD2(v65), v65)
                  && (HIWORD(v65) & 1) != (*(unsigned char *)(v62 + 38) == 0))
                {
                  unint64_t v67 = *(void *)(v64 + 72);
                  if (__PAIR64__(*(unsigned __int16 *)(v62 + 76), *(_DWORD *)(v62 + 72)) == __PAIR64__(WORD2(v67), v67)
                    && (HIWORD(v67) & 1) != (*(unsigned char *)(v62 + 78) == 0))
                  {
                    unsigned int v68 = *(_DWORD *)(v62 + 80);
                    BOOL v70 = (unsigned __int16)*(_DWORD *)(v64 + 80) == (unsigned __int16)v68;
                    unsigned int v69 = (*(_DWORD *)(v64 + 80) ^ v68) >> 16;
                    BOOL v70 = v70 && v69 == 0;
                    if (v70
                      && ((*(unsigned char *)(v64 + 88) ^ *(unsigned char *)(v62 + 88)) & 3) == 0
                      && ((*(_WORD *)(v64 + 84) ^ *(_WORD *)(v62 + 84)) & 0x7FFF) == 0
                      && ((*(unsigned char *)(v64 + 88) ^ *(unsigned char *)(v62 + 88)) & 0x1C) == 0
                      && *(unsigned __int16 *)(v64 + 86) == *(unsigned __int16 *)(v62 + 86))
                    {
                      unsigned int v66 = sub_EAE428(a2);
                    }
                  }
                }
                signed int v71 = 0x7FFFFFFF;
                if (*a4 != 0x7FFFFFFF)
                {
                  if (SDWORD1(v95) < 0) {
                    char v72 = -5;
                  }
                  else {
                    char v72 = 5;
                  }
                  signed int v71 = SDWORD1(v95) / 10
                      + *a4
                      + (((103 * (char)(v72 + SDWORD1(v95) % 10)) >> 15) & 1)
                      + ((103 * (char)(v72 + SDWORD1(v95) % 10)) >> 10);
                }
                unint64_t v73 = sub_F5C6E0(v13, (int **)v62, v66, (uint64_t)a3, v71, a5);
                if (v73 == -1
                  || (v73 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000
                  || v74 == 0x7FFFFFFFFFFFFFFFLL)
                {
                  break;
                }
                LODWORD(v95) = v95 + v73;
                DWORD1(v95) += HIDWORD(v73);
                *((void *)&v95 + 1) += v74;
                sub_3BFF8(v93, &v95);
                v62 += 96;
                if (v62 == v61) {
                  goto LABEL_56;
                }
              }
            }
            *(void *)(v11 + 40) = *(void *)(v11 + 32);
            return v11;
          }
          long long v25 = *(unsigned char **)(v11 + 32);
          if (*(void *)(v11 + 48) - (void)v25 <= 0x2FuLL)
          {
            uint64_t v26 = *(unsigned char **)(v11 + 40);
            unsigned int v27 = (char *)operator new(0x30uLL);
            unsigned int v28 = &v27[(v26 - v25) & 0xFFFFFFFFFFFFFFF0];
            unint64_t v29 = v28;
            if (v26 != v25)
            {
              unint64_t v30 = &v27[(v26 - v25) & 0xFFFFFFFFFFFFFFF0];
              do
              {
                unint64_t v29 = v30 - 16;
                *((_OWORD *)v30 - 1) = *((_OWORD *)v26 - 1);
                v26 -= 16;
                v30 -= 16;
              }
              while (v26 != v25);
            }
            *(void *)(v11 + 32) = v29;
            *(void *)(v11 + 40) = v28;
            *(void *)(v11 + 48) = v27 + 48;
            if (v25) {
              operator delete(v25);
            }
          }
          unsigned int v31 = sub_EAE418(a2);
          unint64_t v32 = (int **)sub_EADD1C(a2);
          int v33 = *a4;
          signed int v34 = 0x7FFFFFFF;
          if (v33 != 0x7FFFFFFF)
          {
            if (SDWORD1(v96) < 0) {
              char v35 = -5;
            }
            else {
              char v35 = 5;
            }
            signed int v34 = SDWORD1(v96) / 10
                + v33
                + (((103 * (char)(v35 + SDWORD1(v96) % 10)) >> 15) & 1)
                + ((103 * (char)(v35 + SDWORD1(v96) % 10)) >> 10);
          }
          double v36 = sub_ECA6AC(v13, v32, (uint64_t)a3, v34, a5);
          unint64_t v37 = sub_ECA410(v13, v32, v31, (uint64_t)a3, v34, a5, v36);
          unint64_t v39 = v37;
          if (v37 != -1 && (v37 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
          {
            uint64_t v40 = v38;
            if (v38 != 0x7FFFFFFFFFFFFFFFLL)
            {
              uint64_t v41 = (char **)(v11 + 32);
              sub_3BFF8(v93, &v96);
              uint64_t v42 = *(void *)(v11 + 40);
              uint64_t v43 = (*(_DWORD *)(v42 - 16) + v39);
              uint64_t v44 = (*(_DWORD *)(v42 - 12) + HIDWORD(v39));
              uint64_t v45 = *(void *)(v42 - 8) + v40;
              *(void *)&long long v95 = v43 | (v44 << 32);
              *((void *)&v95 + 1) = v45;
              sub_3BFF8(v93, &v95);
              uint64_t v46 = *(void *)(v11 + 40);
              uint64_t v47 = (*(_DWORD *)(v46 - 16) + v23);
              uint64_t v48 = (*(_DWORD *)(v46 - 12) + HIDWORD(v23));
              uint64_t v49 = *(void *)(v46 - 8) + v24;
              *(void *)&long long v95 = v47 | (v48 << 32);
              *((void *)&v95 + 1) = v49;
              long long v50 = &v95;
LABEL_65:
              sub_3BFF8(v41, v50);
              *(_OWORD *)(v11 + 16) = *(_OWORD *)(*(void *)(v11 + 40) - 16);
            }
          }
        }
      }
    }
  }
  return v11;
}

uint64_t sub_F5BF58(uint64_t a1, uint64_t a2, int *a3, int *a4, int a5)
{
  uint64_t v10 = sub_EAF9B4(a2, *a4, a5, *a3, 1);
  uint64_t v11 = v10;
  if (*(_DWORD *)(v10 + 12) == -1)
  {
    *(_DWORD *)uint64_t v10 = *a4;
    *(unsigned char *)(v10 + 4) = a5;
    *(_DWORD *)(v10 + 8) = 1;
    *(_DWORD *)(v10 + 12) = *a3;
    uint64_t v13 = a1 + 8;
    *(void *)&long long v100 = sub_EAFECC(a2);
    uint64_t v14 = sub_69134(a2);
    *(void *)&v101[0] = sub_EC98F8(v15, v16, v13, (uint64_t)&v100, v14, (uint64_t)a3, 0);
    *((void *)&v101[0] + 1) = v17;
    *(void *)&long long v99 = sub_EAFF14(a2);
    uint64_t v18 = sub_EADAD0(a2);
    unint64_t v21 = sub_EC98F8(v19, v20, v13, (uint64_t)&v99, v18, (uint64_t)a3, 0);
    *(void *)&long long v100 = v21;
    *((void *)&v100 + 1) = v22;
    if (LODWORD(v101[0]) != -1 && DWORD1(v101[0]) != 0x7FFFFFFF && *((void *)&v101[0] + 1) != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v23 = v21;
      if (v21 != -1)
      {
        unint64_t v24 = HIDWORD(v21);
        if (HIDWORD(v21) != 0x7FFFFFFF)
        {
          uint64_t v25 = v22;
          if (v22 != 0x7FFFFFFFFFFFFFFFLL)
          {
            long long v98 = (char **)(v11 + 32);
            if (sub_EADC78(a2))
            {
              uint64_t v26 = *(unsigned char **)(v11 + 32);
              if (*(void *)(v11 + 48) - (void)v26 <= 0x2FuLL)
              {
                uint64_t v95 = v13;
                unsigned int v27 = *(unsigned char **)(v11 + 40);
                unsigned int v28 = (char *)operator new(0x30uLL);
                unint64_t v29 = &v28[(v27 - v26) & 0xFFFFFFFFFFFFFFF0];
                unint64_t v30 = v29;
                if (v27 != v26)
                {
                  unsigned int v31 = &v28[(v27 - v26) & 0xFFFFFFFFFFFFFFF0];
                  do
                  {
                    unint64_t v30 = v31 - 16;
                    *((_OWORD *)v31 - 1) = *((_OWORD *)v27 - 1);
                    v27 -= 16;
                    v31 -= 16;
                  }
                  while (v27 != v26);
                }
                *(void *)(v11 + 32) = v30;
                *(void *)(v11 + 40) = v29;
                *(void *)(v11 + 48) = v28 + 48;
                uint64_t v13 = v95;
                if (v26) {
                  operator delete(v26);
                }
              }
              unsigned int v32 = sub_EAE418(a2);
              int v33 = (int **)sub_EAFF60(a2);
              int v34 = *a4;
              signed int v35 = 0x7FFFFFFF;
              if (v34 != 0x7FFFFFFF)
              {
                if (v23 < 0) {
                  char v36 = -5;
                }
                else {
                  char v36 = 5;
                }
                signed int v35 = (int)v24 / -10
                    + v34
                    + (((-103 * (char)(v36 + (int)v24 % 10)) >> 15) & 1)
                    + ((-103 * (char)(v36 + (int)v24 % 10)) >> 10);
              }
              double v37 = sub_ECA6AC(v13, v33, (uint64_t)a3, v35, a5);
              unint64_t v38 = sub_ECA410(v13, v33, v32, (uint64_t)a3, v35, a5, v37);
              unint64_t v40 = v38;
              if (v38 != -1 && (v38 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
              {
                uint64_t v41 = v39;
                if (v39 != 0x7FFFFFFFFFFFFFFFLL)
                {
                  sub_3BFF8(v98, v101);
                  uint64_t v42 = *(void *)(v11 + 40);
                  uint64_t v43 = (*(_DWORD *)(v42 - 16) + v40);
                  uint64_t v44 = (*(_DWORD *)(v42 - 12) + HIDWORD(v40));
                  uint64_t v45 = *(void *)(v42 - 8) + v41;
                  *(void *)&long long v99 = v43 | (v44 << 32);
                  *((void *)&v99 + 1) = v45;
                  sub_3BFF8(v98, &v99);
                  uint64_t v46 = *(void *)(v11 + 40);
                  uint64_t v47 = (*(_DWORD *)(v46 - 16) + v23);
                  uint64_t v48 = (*(_DWORD *)(v46 - 12) + v24);
                  uint64_t v49 = v25 + *(void *)(v46 - 8);
                  *(void *)&long long v99 = v47 | (v48 << 32);
                  *((void *)&v99 + 1) = v49;
                  sub_3BFF8(v98, &v99);
                  *(_OWORD *)(v11 + 16) = *(_OWORD *)(*(void *)(v11 + 40) - 16);
                }
              }
            }
            else
            {
              long long v50 = (int **)sub_EAFF60(a2);
              unsigned int v51 = sub_486A4C(a2);
              signed int v52 = 0x7FFFFFFF;
              if (*a4 != 0x7FFFFFFF)
              {
                if (v23 < 0) {
                  char v53 = -5;
                }
                else {
                  char v53 = 5;
                }
                signed int v52 = (int)v24 / -10
                    + *a4
                    + (((-103 * (char)(v53 + (int)v24 % 10)) >> 15) & 1)
                    + ((-103 * (char)(v53 + (int)v24 % 10)) >> 10);
              }
              unsigned int v54 = v51;
              double v55 = sub_ECA6AC(v13, v50, (uint64_t)a3, v52, a5);
              unint64_t v56 = sub_ECA410(v13, v50, v54, (uint64_t)a3, v52, a5, v55);
              unint64_t v58 = v56;
              if (v56 != -1 && (v56 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
              {
                uint64_t v59 = v57;
                if (v57 != 0x7FFFFFFFFFFFFFFFLL)
                {
                  unint64_t v60 = (void *)sub_5231C(a2);
                  unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60[1] - *v60) >> 5) + 3;
                  uint64_t v62 = *(unsigned char **)(v11 + 32);
                  if (v61 > (uint64_t)(*(void *)(v11 + 48) - (void)v62) >> 4)
                  {
                    uint64_t v96 = v13;
                    if (v61 >> 60) {
                      sub_2E00();
                    }
                    uint64_t v63 = *(unsigned char **)(v11 + 40);
                    uint64_t v64 = 16 * v61;
                    unint64_t v65 = (char *)operator new(16 * v61);
                    unsigned int v66 = &v65[(v63 - v62) & 0xFFFFFFFFFFFFFFF0];
                    unint64_t v67 = v66;
                    if (v63 != v62)
                    {
                      unsigned int v68 = &v65[(v63 - v62) & 0xFFFFFFFFFFFFFFF0];
                      do
                      {
                        unint64_t v67 = v68 - 16;
                        *((_OWORD *)v68 - 1) = *((_OWORD *)v63 - 1);
                        v63 -= 16;
                        v68 -= 16;
                      }
                      while (v63 != v62);
                    }
                    *(void *)(v11 + 32) = v67;
                    *(void *)(v11 + 40) = v66;
                    *(void *)(v11 + 48) = &v65[v64];
                    uint64_t v13 = v96;
                    if (v62) {
                      operator delete(v62);
                    }
                  }
                  sub_3BFF8(v98, &v100);
                  int v69 = v100 + v58;
                  int v70 = DWORD1(v100) + HIDWORD(v58);
                  uint64_t v71 = *((void *)&v100 + 1) + v59;
                  char v72 = (int ***)sub_5231C(a2);
                  unint64_t v73 = v72[1];
                  long long v97 = *v72;
                  if (v73 == *v72)
                  {
LABEL_64:
                    sub_3BFF8(v98, v101);
                    uint64_t v86 = (LODWORD(v101[0]) + v69);
                    uint64_t v87 = (DWORD1(v101[0]) + v70);
                    uint64_t v88 = *((void *)&v101[0] + 1) + v71;
                    uint64_t v89 = *(unint64_t **)(v11 + 32);
                    uint64_t v90 = *(unint64_t **)(v11 + 40);
                    if (v89 != v90)
                    {
                      uint64_t v91 = v90 - 2;
                      if (v90 - 2 > v89)
                      {
                        uint64_t v92 = v89 + 2;
                        do
                        {
                          long long v93 = *((_OWORD *)v92 - 1);
                          *((_OWORD *)v92 - 1) = *(_OWORD *)v91;
                          *(_OWORD *)uint64_t v91 = v93;
                          v91 -= 2;
                          BOOL v94 = v92 >= v91;
                          v92 += 2;
                        }
                        while (!v94);
                        uint64_t v89 = *(unint64_t **)(v11 + 32);
                        uint64_t v90 = *(unint64_t **)(v11 + 40);
                      }
                    }
                    sub_F5B700(v89, v90, (uint64_t *)v89);
                    *(void *)(v11 + 16) = v86 | (v87 << 32);
                    *(void *)(v11 + 24) = v88;
                  }
                  else
                  {
                    while (1)
                    {
                      uint64_t v74 = sub_5231C(a2);
                      uint64_t v75 = *(void *)v74;
                      unint64_t v76 = *(void *)(*(void *)v74 + 32);
                      unsigned int v77 = 1000000000;
                      if (__PAIR64__(*((unsigned __int16 *)v73 - 30), *((_DWORD *)v73 - 16)) == __PAIR64__(WORD2(v76), v76)&& (HIWORD(v76) & 1) != (*((unsigned char *)v73 - 58) == 0))
                      {
                        unint64_t v78 = *(void *)(v75 + 72);
                        if (__PAIR64__(*((unsigned __int16 *)v73 - 10), *((_DWORD *)v73 - 6)) == __PAIR64__(WORD2(v78), v78)&& (HIWORD(v78) & 1) != (*((unsigned char *)v73 - 18) == 0))
                        {
                          unsigned int v79 = *((_DWORD *)v73 - 4);
                          BOOL v81 = (unsigned __int16)*(_DWORD *)(v75 + 80) == (unsigned __int16)v79;
                          unsigned int v80 = (*(_DWORD *)(v75 + 80) ^ v79) >> 16;
                          BOOL v81 = v81 && v80 == 0;
                          if (v81
                            && ((*(unsigned char *)(v75 + 88) ^ *((unsigned char *)v73 - 8)) & 3) == 0
                            && ((*(_WORD *)(v75 + 84) ^ *((_WORD *)v73 - 6)) & 0x7FFF) == 0
                            && ((*(unsigned char *)(v75 + 88) ^ *((unsigned char *)v73 - 8)) & 0x1C) == 0
                            && *(unsigned __int16 *)(v75 + 86) == *((unsigned __int16 *)v73 - 5))
                          {
                            unsigned int v77 = sub_EAE428(a2);
                          }
                        }
                      }
                      signed int v82 = 0x7FFFFFFF;
                      if (*a4 != 0x7FFFFFFF)
                      {
                        if (v70 < 0) {
                          char v83 = -5;
                        }
                        else {
                          char v83 = 5;
                        }
                        signed int v82 = v70 / -10
                            + *a4
                            + (((-103 * (char)(v83 + v70 % 10)) >> 15) & 1)
                            + ((-103 * (char)(v83 + v70 % 10)) >> 10);
                      }
                      v73 -= 12;
                      unint64_t v84 = sub_F5C6E0(v13, v73, v77, (uint64_t)a3, v82, a5);
                      *(void *)&long long v99 = v84;
                      *((void *)&v99 + 1) = v85;
                      if (v84 == -1
                        || (v84 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000
                        || v85 == 0x7FFFFFFFFFFFFFFFLL)
                      {
                        break;
                      }
                      sub_3BFF8(v98, &v99);
                      v69 += v99;
                      v70 += DWORD1(v99);
                      v71 += *((void *)&v99 + 1);
                      if (v73 == v97) {
                        goto LABEL_64;
                      }
                    }
                    *(void *)(v11 + 40) = *(void *)(v11 + 32);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v11;
}

unint64_t sub_F5C6E0(uint64_t a1, int **a2, unsigned int a3, uint64_t a4, signed int a5, int a6)
{
  double v12 = sub_ECA6AC(a1, a2, a4, a5, a6);
  unint64_t v13 = sub_ECA410(a1, a2, a3, a4, a5, a6, v12);
  int v15 = v13;
  unint64_t v16 = HIDWORD(v13);
  if (v13 == -1 || v16 == 0x7FFFFFFF || v14 == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v19 = 0x7FFFFFFF00000000;
    LODWORD(v20) = -1;
  }
  else
  {
    unint64_t v20 = sub_ECC250(a1, a2, a4, a5, a6);
    if (v20 == -1 || HIDWORD(v20) == 0x7FFFFFFF || v21 == 0x7FFFFFFFFFFFFFFFLL)
    {
      unint64_t v19 = v20 & 0xFFFFFFFF00000000;
    }
    else
    {
      if ((v20 + v15) <= 1) {
        LODWORD(v20) = 1;
      }
      else {
        LODWORD(v20) = v20 + v15;
      }
      unint64_t v19 = (unint64_t)(HIDWORD(v20) + v16) << 32;
    }
  }
  return v19 | v20;
}

void *sub_F5C7F8(void *a1, void *a2)
{
  *a1 = a2;
  sub_F6DA28(a1 + 1, a2);
  return a1;
}

int *sub_F5C828(uint64_t a1, uint64_t a2, int *a3, int *a4, int a5, int a6)
{
  if (sub_EB2EC4(a2)) {
    return &dword_24F7418;
  }
  if (a6)
  {
    return (int *)sub_F5CF4C(a1, a2, a3, a4, a5);
  }
  else
  {
    return (int *)sub_F5C8E0(a1, a2, a3, a4, a5);
  }
}

uint64_t sub_F5C8E0(uint64_t a1, uint64_t a2, int *a3, int *a4, int a5)
{
  char v5 = a5;
  uint64_t v10 = sub_EB44A4(a2, *a4, a5, *a3, 0);
  uint64_t v11 = v10;
  if (*(_DWORD *)(v10 + 12) == -1)
  {
    *(_DWORD *)uint64_t v10 = *a4;
    *(unsigned char *)(v10 + 4) = v5;
    *(_DWORD *)(v10 + 8) = 0;
    *(_DWORD *)(v10 + 12) = *a3;
    unint64_t v13 = (uint64_t *)(a1 + 8);
    *(void *)&long long v76 = sub_EB29EC(a2);
    uint64_t v14 = sub_EB22DC(a2);
    *(void *)&long long v77 = sub_F6DA8C((uint64_t *)(a1 + 8), (unsigned int *)&v76, v14, (uint64_t)a3, 0, 1);
    *((void *)&v77 + 1) = v15;
    *(void *)&long long v76 = sub_EB2A48(a2);
    uint64_t v16 = sub_486CB4(a2);
    unint64_t v17 = sub_F6DA8C((uint64_t *)(a1 + 8), (unsigned int *)&v76, v16, (uint64_t)a3, 0, 1);
    if (v77 != -1 && DWORD1(v77) != 0x7FFFFFFF && *((void *)&v77 + 1) != 0x7FFFFFFFFFFFFFFFLL)
    {
      unint64_t v19 = v17;
      if (v17 != -1 && (v17 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
      {
        uint64_t v20 = v18;
        if (v18 != 0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v74 = (char **)(v11 + 32);
          if (!sub_EB29DC(a2))
          {
            unint64_t v73 = v19;
            uint64_t v43 = (void *)sub_5231C(a2);
            unint64_t v44 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v43[1] - *v43) >> 3) + 3;
            uint64_t v45 = *(unsigned char **)(v11 + 32);
            if (v44 > (uint64_t)(*(void *)(v11 + 48) - (void)v45) >> 4)
            {
              if (v44 >> 60) {
                sub_2E00();
              }
              uint64_t v46 = *(unsigned char **)(v11 + 40);
              uint64_t v47 = 16 * v44;
              uint64_t v48 = (char *)operator new(16 * v44);
              uint64_t v49 = &v48[(v46 - v45) & 0xFFFFFFFFFFFFFFF0];
              long long v50 = v49;
              if (v46 != v45)
              {
                unsigned int v51 = &v48[(v46 - v45) & 0xFFFFFFFFFFFFFFF0];
                do
                {
                  long long v50 = v51 - 16;
                  *((_OWORD *)v51 - 1) = *((_OWORD *)v46 - 1);
                  v46 -= 16;
                  v51 -= 16;
                }
                while (v46 != v45);
              }
              *(void *)(v11 + 32) = v50;
              *(void *)(v11 + 40) = v49;
              *(void *)(v11 + 48) = &v48[v47];
              if (v45) {
                operator delete(v45);
              }
            }
            long long v76 = v77;
            sub_3BFF8(v74, &v77);
            signed int v52 = (uint64_t *)sub_5231C(a2);
            uint64_t v54 = *v52;
            uint64_t v53 = v52[1];
            if (*v52 == v53)
            {
LABEL_36:
              unint64_t v61 = (unsigned int *)sub_EB2ABC(a2);
              unsigned int v62 = sub_EB3228(a2);
              unint64_t v63 = sub_F6D9F4(v13, v61, v62, (uint64_t)a3);
              if (v63 != -1
                && (v63 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000
                && v64 != 0x7FFFFFFFFFFFFFFFLL)
              {
                uint64_t v65 = *(void *)(v11 + 40);
                uint64_t v66 = (*(_DWORD *)(v65 - 16) + v63);
                uint64_t v67 = (*(_DWORD *)(v65 - 12) + HIDWORD(v63));
                uint64_t v68 = *(void *)(v65 - 8) + v64;
                *(void *)&long long v75 = v66 | (v67 << 32);
                *((void *)&v75 + 1) = v68;
                sub_3BFF8(v74, &v75);
                uint64_t v69 = *(void *)(v11 + 40);
                uint64_t v70 = (*(_DWORD *)(v69 - 16) + v73);
                uint64_t v71 = (*(_DWORD *)(v69 - 12) + HIDWORD(v73));
                uint64_t v72 = *(void *)(v69 - 8) + v20;
                *(void *)&long long v75 = v70 | (v71 << 32);
                *((void *)&v75 + 1) = v72;
                uint64_t v41 = &v75;
                uint64_t v42 = (char **)(v11 + 32);
                goto LABEL_40;
              }
            }
            else
            {
              while (1)
              {
                double v55 = (uint64_t **)sub_5231C(a2);
                unint64_t v56 = *v55;
                uint64_t v57 = **v55;
                unsigned int v58 = 1000000000;
                if (*(void *)v54 == v57
                  && *(void *)(v54 + 48) == v56[6]
                  && *(_DWORD *)(v54 + 96) == *((_DWORD *)v56 + 24))
                {
                  unsigned int v58 = sub_EB3214(a2);
                }
                unint64_t v59 = sub_F6D3B4(v13, v54, v58, (uint64_t)a3);
                if (v59 == -1
                  || (v59 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000
                  || v60 == 0x7FFFFFFFFFFFFFFFLL)
                {
                  break;
                }
                LODWORD(v76) = v76 + v59;
                DWORD1(v76) += HIDWORD(v59);
                *((void *)&v76 + 1) += v60;
                sub_3BFF8(v74, &v76);
                v54 += 104;
                if (v54 == v53) {
                  goto LABEL_36;
                }
              }
            }
            *(void *)(v11 + 40) = *(void *)(v11 + 32);
            return v11;
          }
          uint64_t v21 = *(unsigned char **)(v11 + 32);
          if (*(void *)(v11 + 48) - (void)v21 <= 0x2FuLL)
          {
            uint64_t v22 = *(unsigned char **)(v11 + 40);
            uint64_t v23 = (char *)operator new(0x30uLL);
            unint64_t v24 = &v23[(v22 - v21) & 0xFFFFFFFFFFFFFFF0];
            uint64_t v25 = v24;
            if (v22 != v21)
            {
              uint64_t v26 = &v23[(v22 - v21) & 0xFFFFFFFFFFFFFFF0];
              do
              {
                uint64_t v25 = v26 - 16;
                *((_OWORD *)v26 - 1) = *((_OWORD *)v22 - 1);
                v22 -= 16;
                v26 -= 16;
              }
              while (v22 != v21);
            }
            *(void *)(v11 + 32) = v25;
            *(void *)(v11 + 40) = v24;
            *(void *)(v11 + 48) = v23 + 48;
            if (v21) {
              operator delete(v21);
            }
          }
          unsigned int v27 = sub_EB3204(a2);
          unsigned int v28 = (unsigned int *)sub_EB2AA4(a2);
          unint64_t v29 = sub_F6D9F4(v13, v28, v27, (uint64_t)a3);
          unint64_t v31 = v29;
          if (v29 != -1 && (v29 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
          {
            uint64_t v32 = v30;
            if (v30 != 0x7FFFFFFFFFFFFFFFLL)
            {
              sub_3BFF8(v74, &v77);
              uint64_t v33 = *(void *)(v11 + 40);
              uint64_t v34 = (*(_DWORD *)(v33 - 16) + v31);
              uint64_t v35 = (*(_DWORD *)(v33 - 12) + HIDWORD(v31));
              uint64_t v36 = *(void *)(v33 - 8) + v32;
              *(void *)&long long v76 = v34 | (v35 << 32);
              *((void *)&v76 + 1) = v36;
              sub_3BFF8(v74, &v76);
              uint64_t v37 = *(void *)(v11 + 40);
              uint64_t v38 = (*(_DWORD *)(v37 - 16) + v19);
              uint64_t v39 = (*(_DWORD *)(v37 - 12) + HIDWORD(v19));
              uint64_t v40 = *(void *)(v37 - 8) + v20;
              *(void *)&long long v76 = v38 | (v39 << 32);
              *((void *)&v76 + 1) = v40;
              uint64_t v41 = &v76;
              uint64_t v42 = (char **)(v11 + 32);
LABEL_40:
              sub_3BFF8(v42, v41);
              *(_OWORD *)(v11 + 16) = *(_OWORD *)(*(void *)(v11 + 40) - 16);
            }
          }
        }
      }
    }
  }
  return v11;
}

uint64_t sub_F5CF4C(uint64_t a1, uint64_t a2, int *a3, int *a4, int a5)
{
  char v5 = a5;
  uint64_t v10 = sub_EB44A4(a2, *a4, a5, *a3, 1);
  uint64_t v11 = v10;
  if (*(_DWORD *)(v10 + 12) == -1)
  {
    *(_DWORD *)uint64_t v10 = *a4;
    *(unsigned char *)(v10 + 4) = v5;
    *(_DWORD *)(v10 + 8) = 1;
    *(_DWORD *)(v10 + 12) = *a3;
    unint64_t v13 = (uint64_t *)(a1 + 8);
    *(void *)&long long v84 = sub_EB29EC(a2);
    uint64_t v14 = sub_EB22DC(a2);
    *(void *)&v85[0] = sub_F6DA8C(v13, (unsigned int *)&v84, v14, (uint64_t)a3, 0, 1);
    *((void *)&v85[0] + 1) = v15;
    *(void *)&long long v83 = sub_EB2A48(a2);
    uint64_t v16 = sub_486CB4(a2);
    unint64_t v17 = sub_F6DA8C(v13, (unsigned int *)&v83, v16, (uint64_t)a3, 0, 1);
    *(void *)&long long v84 = v17;
    *((void *)&v84 + 1) = v18;
    if (LODWORD(v85[0]) != -1 && DWORD1(v85[0]) != 0x7FFFFFFF && *((void *)&v85[0] + 1) != 0x7FFFFFFFFFFFFFFFLL)
    {
      int v19 = v17;
      if (v17 != -1)
      {
        unint64_t v20 = HIDWORD(v17);
        if (HIDWORD(v17) != 0x7FFFFFFF)
        {
          uint64_t v21 = v18;
          if (v18 != 0x7FFFFFFFFFFFFFFFLL)
          {
            signed int v82 = (char **)(v11 + 32);
            if (sub_EB29DC(a2))
            {
              uint64_t v22 = *(unsigned char **)(v11 + 32);
              if (*(void *)(v11 + 48) - (void)v22 <= 0x2FuLL)
              {
                unsigned int v79 = v13;
                uint64_t v23 = *(unsigned char **)(v11 + 40);
                unint64_t v24 = (char *)operator new(0x30uLL);
                uint64_t v25 = &v24[(v23 - v22) & 0xFFFFFFFFFFFFFFF0];
                uint64_t v26 = v25;
                if (v23 != v22)
                {
                  unsigned int v27 = &v24[(v23 - v22) & 0xFFFFFFFFFFFFFFF0];
                  do
                  {
                    uint64_t v26 = v27 - 16;
                    *((_OWORD *)v27 - 1) = *((_OWORD *)v23 - 1);
                    v23 -= 16;
                    v27 -= 16;
                  }
                  while (v23 != v22);
                }
                *(void *)(v11 + 32) = v26;
                *(void *)(v11 + 40) = v25;
                *(void *)(v11 + 48) = v24 + 48;
                unint64_t v13 = v79;
                if (v22) {
                  operator delete(v22);
                }
              }
              unsigned int v28 = sub_EB3204(a2);
              unint64_t v29 = (unsigned int *)sub_EB2ABC(a2);
              unint64_t v30 = sub_F6D9F4(v13, v29, v28, (uint64_t)a3);
              unint64_t v32 = v30;
              if (v30 != -1 && (v30 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
              {
                uint64_t v33 = v31;
                if (v31 != 0x7FFFFFFFFFFFFFFFLL)
                {
                  sub_3BFF8(v82, v85);
                  uint64_t v34 = *(void *)(v11 + 40);
                  uint64_t v35 = (*(_DWORD *)(v34 - 16) + v32);
                  uint64_t v36 = (*(_DWORD *)(v34 - 12) + HIDWORD(v32));
                  uint64_t v37 = *(void *)(v34 - 8) + v33;
                  *(void *)&long long v83 = v35 | (v36 << 32);
                  *((void *)&v83 + 1) = v37;
                  sub_3BFF8(v82, &v83);
                  uint64_t v38 = *(void *)(v11 + 40);
                  uint64_t v39 = (*(_DWORD *)(v38 - 16) + v19);
                  uint64_t v40 = (*(_DWORD *)(v38 - 12) + v20);
                  uint64_t v41 = v21 + *(void *)(v38 - 8);
                  *(void *)&long long v83 = v39 | (v40 << 32);
                  *((void *)&v83 + 1) = v41;
                  sub_3BFF8(v82, &v83);
                  *(_OWORD *)(v11 + 16) = *(_OWORD *)(*(void *)(v11 + 40) - 16);
                }
              }
            }
            else
            {
              uint64_t v42 = (unsigned int *)sub_EB2ABC(a2);
              unsigned int v43 = sub_EB3228(a2);
              unint64_t v44 = sub_F6D9F4(v13, v42, v43, (uint64_t)a3);
              unint64_t v46 = v44;
              if (v44 != -1 && (v44 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
              {
                uint64_t v47 = v45;
                if (v45 != 0x7FFFFFFFFFFFFFFFLL)
                {
                  uint64_t v48 = (void *)sub_5231C(a2);
                  unint64_t v49 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v48[1] - *v48) >> 3) + 3;
                  long long v50 = *(unsigned char **)(v11 + 32);
                  if (v49 > (uint64_t)(*(void *)(v11 + 48) - (void)v50) >> 4)
                  {
                    unsigned int v80 = v13;
                    if (v49 >> 60) {
                      sub_2E00();
                    }
                    unsigned int v51 = *(unsigned char **)(v11 + 40);
                    uint64_t v52 = 16 * v49;
                    uint64_t v53 = (char *)operator new(16 * v49);
                    uint64_t v54 = &v53[(v51 - v50) & 0xFFFFFFFFFFFFFFF0];
                    double v55 = v54;
                    if (v51 != v50)
                    {
                      unint64_t v56 = &v53[(v51 - v50) & 0xFFFFFFFFFFFFFFF0];
                      do
                      {
                        double v55 = v56 - 16;
                        *((_OWORD *)v56 - 1) = *((_OWORD *)v51 - 1);
                        v51 -= 16;
                        v56 -= 16;
                      }
                      while (v51 != v50);
                    }
                    *(void *)(v11 + 32) = v55;
                    *(void *)(v11 + 40) = v54;
                    *(void *)(v11 + 48) = &v53[v52];
                    unint64_t v13 = v80;
                    if (v50) {
                      operator delete(v50);
                    }
                  }
                  sub_3BFF8(v82, &v84);
                  int v57 = v84 + v46;
                  int v58 = DWORD1(v84) + HIDWORD(v46);
                  uint64_t v59 = *((void *)&v84 + 1) + v47;
                  uint64_t v60 = (uint64_t *)sub_5231C(a2);
                  uint64_t v61 = v60[1];
                  uint64_t v81 = *v60;
                  if (v61 == *v60)
                  {
LABEL_41:
                    sub_3BFF8(v82, v85);
                    uint64_t v70 = (LODWORD(v85[0]) + v57);
                    uint64_t v71 = (DWORD1(v85[0]) + v58);
                    uint64_t v72 = *((void *)&v85[0] + 1) + v59;
                    unint64_t v73 = *(unint64_t **)(v11 + 32);
                    uint64_t v74 = *(unint64_t **)(v11 + 40);
                    if (v73 != v74)
                    {
                      long long v75 = v74 - 2;
                      if (v74 - 2 > v73)
                      {
                        long long v76 = v73 + 2;
                        do
                        {
                          long long v77 = *((_OWORD *)v76 - 1);
                          *((_OWORD *)v76 - 1) = *(_OWORD *)v75;
                          *(_OWORD *)long long v75 = v77;
                          v75 -= 2;
                          BOOL v78 = v76 >= v75;
                          v76 += 2;
                        }
                        while (!v78);
                        unint64_t v73 = *(unint64_t **)(v11 + 32);
                        uint64_t v74 = *(unint64_t **)(v11 + 40);
                      }
                    }
                    sub_F5B700(v73, v74, (uint64_t *)v73);
                    *(void *)(v11 + 16) = v70 | (v71 << 32);
                    *(void *)(v11 + 24) = v72;
                  }
                  else
                  {
                    uint64_t v62 = v61 - 104;
                    while (1)
                    {
                      unint64_t v63 = (uint64_t **)sub_5231C(a2);
                      uint64_t v64 = *v63;
                      uint64_t v65 = **v63;
                      unsigned int v66 = 1000000000;
                      if (*(void *)v62 == v65
                        && *(void *)(v62 + 48) == v64[6]
                        && *(_DWORD *)(v62 + 96) == *((_DWORD *)v64 + 24))
                      {
                        unsigned int v66 = sub_EB3214(a2);
                      }
                      unint64_t v67 = sub_F6D3B4(v13, v62, v66, (uint64_t)a3);
                      *(void *)&long long v83 = v67;
                      *((void *)&v83 + 1) = v68;
                      if (v67 == -1
                        || (v67 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000
                        || v68 == 0x7FFFFFFFFFFFFFFFLL)
                      {
                        break;
                      }
                      sub_3BFF8(v82, &v83);
                      v57 += v83;
                      v58 += DWORD1(v83);
                      v59 += *((void *)&v83 + 1);
                      BOOL v69 = v62 == v81;
                      v62 -= 104;
                      if (v69) {
                        goto LABEL_41;
                      }
                    }
                    *(void *)(v11 + 40) = *(void *)(v11 + 32);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v11;
}

double sub_F5D620()
{
  if ((byte_24F73D0 & 1) == 0)
  {
    byte_24F73D0 = 1;
    dword_24F7398 = 0x7FFFFFFF;
    byte_24F739C = 0;
    double result = NAN;
    unk_24F73A0 = xmmword_20E22B0;
    qword_24F73B0 = 0x7FFFFFFFFFFFFFFFLL;
    unk_24F73B8 = 0;
    qword_24F73C0 = 0;
    unk_24F73C8 = 0;
  }
  return result;
}

double sub_F5D664()
{
  if ((byte_24F7410 & 1) == 0)
  {
    byte_24F7410 = 1;
    dword_24F73D8 = 0x7FFFFFFF;
    byte_24F73DC = 0;
    double result = NAN;
    unk_24F73E0 = xmmword_20E22B0;
    qword_24F73F0 = 0x7FFFFFFFFFFFFFFFLL;
    unk_24F73F8 = 0;
    qword_24F7400 = 0;
    unk_24F7408 = 0;
  }
  return result;
}

double sub_F5D6A8()
{
  if ((byte_24F7450 & 1) == 0)
  {
    byte_24F7450 = 1;
    dword_24F7418 = 0x7FFFFFFF;
    byte_24F741C = 0;
    double result = NAN;
    unk_24F7420 = xmmword_20E22B0;
    qword_24F7430 = 0x7FFFFFFFFFFFFFFFLL;
    unk_24F7438 = 0;
    qword_24F7440 = 0;
    unk_24F7448 = 0;
  }
  return result;
}

void sub_F5D6EC()
{
  unk_25FCF5F = 16641;
  word_25FCF48 = 65;
  byte_25FCF77 = 1;
  byte_25FCF61 = 0;
}

void sub_F5D714(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = v8;
  int v9 = *(_DWORD *)(a2 + 152);
  uint64_t v10 = *(uint64_t **)(a2 + 104);
  uint64_t v11 = *(uint64_t **)(a2 + 112);
  if (v10 != v11)
  {
    do
    {
      sub_F60E7C(a1, v10, v9, a2, a3, (char **)a4, 1.0);
      v10 += 8;
    }
    while (v10 != v11);
    unint64_t v13 = *(char **)a4;
    double v12 = *(char **)(a4 + 8);
    if (*(char **)a4 != v12)
    {
      uint64_t v14 = *(char **)a4;
      uint64_t v15 = *(char **)a4;
      while (v15[32])
      {
        v15 += 80;
        if (v15 == v12)
        {
          unint64_t v16 = v12 - v13 - 80;
          if (v16 < 0x50) {
            goto LABEL_27;
          }
          unint64_t v17 = v16 / 0x50 + 1;
          uint64_t v14 = &v13[80 * (v17 & 0x7FFFFFFFFFFFFFELL)];
          uint64_t v18 = v13 + 128;
          uint64_t v19 = v17 & 0x7FFFFFFFFFFFFFELL;
          do
          {
            *(v18 - 80) = 0;
            *uint64_t v18 = 0;
            v18 += 160;
            v19 -= 2;
          }
          while (v19);
          if (v17 != (v17 & 0x7FFFFFFFFFFFFFELL))
          {
LABEL_27:
            do
            {
              v14[48] = 0;
              v14 += 80;
            }
            while (v14 != v12);
          }
          break;
        }
      }
    }
  }
  uint64_t v20 = *(void *)(a2 + 128);
  uint64_t v21 = *(void *)(a2 + 136);
  if (v20 != v21)
  {
    if (v21 - v20 < 0) {
      sub_2E00();
    }
    uint64_t v22 = (char *)operator new(v21 - v20);
    uint64_t v23 = v22;
    uint64_t v24 = 0;
    do
    {
      uint64_t v25 = v20 + v24;
      uint64_t v26 = &v22[v24];
      long long v27 = *(_OWORD *)(v20 + v24);
      long long v28 = *(_OWORD *)(v20 + v24 + 16);
      *((void *)v26 + 4) = *(void *)(v20 + v24 + 32);
      *(_OWORD *)uint64_t v26 = v27;
      *((_OWORD *)v26 + 1) = v28;
      *((_WORD *)v26 + 20) = *(_WORD *)(v20 + v24 + 40);
      *((_WORD *)v26 + 21) = *(_WORD *)(v20 + v24 + 42);
      uint64_t v29 = *(void *)(v20 + v24 + 48);
      v26[56] = *(unsigned char *)(v20 + v24 + 56);
      *((void *)v26 + 6) = v29;
      v24 += 64;
    }
    while (v25 + 64 != v21);
    uint64_t v30 = v24 >> 6;
    unint64_t v31 = 126 - 2 * __clz(v24 >> 6);
    if (v24) {
      uint64_t v32 = v31;
    }
    else {
      uint64_t v32 = 0;
    }
    sub_F61110((uint64_t)v22, (unint64_t)&v22[v24], (uint64_t)&v37, v32, 1);
    if (v24)
    {
      uint64_t v33 = 0;
      double v34 = 0.5;
      double v35 = 0.5 / (double)(unint64_t)v30;
      uint64_t v36 = v30 << 6;
      do
      {
        sub_F60E7C(a1, (uint64_t *)&v23[v33], v9, a2, a3, (char **)a4, v34);
        double v34 = v34 - v35;
        v33 += 64;
      }
      while (v36 != v33);
    }
    operator delete(v23);
  }
}

void sub_F5D940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  operator delete(v11);
  unint64_t v13 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v13;
    operator delete(v13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_F5D99C()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = (uint64_t *)v0;
  uint64_t v5 = v4;
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = -1;
  *(void *)(v4 + 32) = -1;
  *(_DWORD *)(v4 + 40) = 0x7FFFFFFF;
  *(void *)(v4 + 48) = -1;
  *(void *)(v4 + 56) = -1;
  *(void *)(v4 + 64) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(v4 + 72) = 0;
  *(_DWORD *)(v4 + 80) = -1935635296;
  *(void *)(v4 + 104) = 0;
  unint64_t v6 = (void *)(v4 + 104);
  *(void *)(v4 + 88) = 0;
  *(_DWORD *)(v4 + 95) = 0;
  *(void *)(v4 + 112) = 0;
  *(void *)(v4 + 120) = 0;
  *(_DWORD *)(v4 + 128) = 0;
  *(_OWORD *)(v4 + 136) = 0u;
  uint64_t v7 = (void **)(v4 + 136);
  *(unsigned char *)(v4 + 132) = 100;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  sub_F3848C(&v53, v1);
  uint64_t v9 = *v3;
  uint64_t v8 = v3[1];
  if (*v3 != v8)
  {
    while (*(_DWORD *)(v9 + 152))
    {
      v9 += 160;
      if (v9 == v8) {
        goto LABEL_4;
      }
    }
  }
  if (v9 == v8)
  {
LABEL_4:
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(__p, "No origin found in input snapped locations.");
    uint64_t v11 = (void *)sub_2F404((uint64_t)exception, (long long *)__p);
  }
  unsigned int v13 = *(_DWORD *)v9;
  unsigned int v12 = *(_DWORD *)(v9 + 4);
  sub_F5DFA8(v9, (uint64_t)&v53, v2, __p);
  uint64_t v14 = *(void **)v5;
  if (*(void *)v5)
  {
    *(void *)(v5 + 8) = v14;
    operator delete(v14);
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
  }
  *(_OWORD *)uint64_t v5 = *(_OWORD *)__p;
  uint64_t v15 = v52;
  *(void *)(v5 + 16) = v51;
  *(void *)(v5 + 24) = v15;
  *(_OWORD *)(v5 + 32) = *(_OWORD *)v9;
  long long v16 = *(_OWORD *)(v9 + 16);
  long long v17 = *(_OWORD *)(v9 + 32);
  long long v18 = *(_OWORD *)(v9 + 48);
  *(_DWORD *)(v5 + 95) = *(_DWORD *)(v9 + 63);
  *(_OWORD *)(v5 + 64) = v17;
  *(_OWORD *)(v5 + 80) = v18;
  *(_OWORD *)(v5 + 48) = v16;
  if (v5 + 32 != v9) {
    sub_147D0(v6, *(char **)(v9 + 72), *(char **)(v9 + 80), (uint64_t)(*(void *)(v9 + 80) - *(void *)(v9 + 72)) >> 2);
  }
  int v19 = *(_DWORD *)(v9 + 96);
  *(unsigned char *)(v5 + 132) = *(unsigned char *)(v9 + 100);
  *(_DWORD *)(v5 + 128) = v19;
  uint64_t v20 = (unsigned int *)*v3;
  uint64_t v21 = (unsigned int *)v3[1];
  if ((unsigned int *)*v3 != v21)
  {
    BOOL v22 = (v13 & v12) != -1;
    long double v23 = exp((double)v12 * -6.28318531 / 4294967300.0 + 3.14159265);
    double __x = (v23 + -1.0 / v23) * 0.5;
    double v47 = ((double)v13 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925;
    while (1)
    {
      unsigned int v24 = v20[38];
      if (v24 - 2 >= 3) {
        break;
      }
      sub_F5DFA8((uint64_t)v20, (uint64_t)&v53, v2, __p);
      uint64_t v25 = *(void **)(v5 + 144);
      if ((unint64_t)v25 >= *(void *)(v5 + 152))
      {
        uint64_t v26 = sub_D128A0(v7, (uint64_t)__p);
        long long v27 = __p[0];
        *(void *)(v5 + 144) = v26;
        if (!v27) {
          goto LABEL_13;
        }
LABEL_34:
        __p[1] = v27;
        operator delete(v27);
        goto LABEL_13;
      }
      *uint64_t v25 = 0;
      v25[1] = 0;
      v25[2] = 0;
      *(_OWORD *)uint64_t v25 = *(_OWORD *)__p;
      v25[2] = v51;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v51 = 0;
      v25[3] = v52;
      *(void *)(v5 + 144) = v25 + 4;
LABEL_13:
      v20 += 40;
      if (v20 == v21) {
        goto LABEL_49;
      }
    }
    if (v24) {
      BOOL v28 = v24 == 5;
    }
    else {
      BOOL v28 = 1;
    }
    if (v28) {
      goto LABEL_13;
    }
    if (!v22 || ((unsigned int v29 = *v20, v30 = v20[1], *v20 == -1) ? (v31 = v30 == -1) : (v31 = 0), v31))
    {
      uint64_t v44 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_33;
    }
    long double v32 = atan(__x) * 57.2957795 * 0.0174532925;
    long double v33 = exp((double)v30 * -6.28318531 / 4294967300.0 + 3.14159265);
    long double v34 = atan((v33 - 1.0 / v33) * 0.5) * 57.2957795 * 0.0174532925;
    long double v35 = sin((v32 - v34) * 0.5);
    long double v36 = v35 * v35;
    double v37 = cos(v32);
    long double v38 = v37 * cos(v34);
    long double v39 = sin((v47 - ((double)v29 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925) * 0.5);
    long double v40 = atan2(sqrt(v39 * v39 * v38 + v36), sqrt(1.0 - (v39 * v39 * v38 + v36)));
    double v41 = (v40 + v40) * 6372797.56 * 100.0;
    if (v41 >= 0.0)
    {
      double v42 = v41;
      if (v41 >= 4.50359963e15) {
        goto LABEL_38;
      }
      uint64_t v43 = (uint64_t)(v41 + v41) + 1;
    }
    else
    {
      double v42 = v41;
      if (v41 <= -4.50359963e15) {
        goto LABEL_38;
      }
      uint64_t v43 = (uint64_t)(v41 + v41);
      if (v43 >= 1) {
        --v43;
      }
    }
    double v42 = (double)(v43 >> 1);
LABEL_38:
    if (v42 >= 9.22337204e18)
    {
      uint64_t v44 = 0x7FFFFFFFFFFFFFFELL;
      goto LABEL_33;
    }
    if (v41 >= 0.0)
    {
      if (v41 < 4.50359963e15)
      {
        uint64_t v45 = (uint64_t)(v41 + v41) + 1;
LABEL_47:
        double v41 = (double)(v45 >> 1);
      }
    }
    else if (v41 > -4.50359963e15)
    {
      uint64_t v45 = (uint64_t)(v41 + v41);
      if (v45 >= 1) {
        --v45;
      }
      goto LABEL_47;
    }
    uint64_t v44 = (uint64_t)v41;
LABEL_33:
    uint64_t v49 = v44;
    sub_F5DFA8((uint64_t)v20, (uint64_t)&v53, v2, __p);
    sub_F5EAA8(v5 + 160, (const void **)__p, &v49);
    long long v27 = __p[0];
    if (__p[0]) {
      goto LABEL_34;
    }
    goto LABEL_13;
  }
LABEL_49:
  if (v55)
  {
    unint64_t v56 = v55;
    operator delete(v55);
  }
  return sub_3A6318(v54);
}

void sub_F5DF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  sub_C62E9C(&a19);
  sub_CF7EAC(v19);
  _Unwind_Resume(a1);
}

void sub_F5DF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, ...)
{
  va_start(va, a14);
  if (a13 < 0) {
    JUMPOUT(0xF5DF68);
  }
  sub_C62E9C((uint64_t *)va);
  sub_CF7EAC(v14);
  _Unwind_Resume(a1);
}

void sub_F5DF84()
{
  __cxa_free_exception(v0);
  JUMPOUT(0xF5DF90);
}

void sub_F5DFA8(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  if (*(_DWORD *)(a1 + 152) >= 2u
    || ((uint64_t v8 = (uint64_t *)sub_376F8C(a3), v9 = sub_28CD20(v8, *(void *)(a1 + 16)), v9 <= 0xFFFFFFFEFFFFFFFFLL)
      ? (BOOL v10 = v9 == 0)
      : (BOOL v10 = 1),
        v10))
  {
    sub_F5FB7C(a2, a1, 0, (uint64_t)a4);
    return;
  }
  unint64_t v11 = v9;
  unint64_t v12 = sub_28E018((uint64_t)v8, v9);
  unsigned int v13 = v12;
  unsigned int v15 = *(_DWORD *)a1;
  unsigned int v14 = *(_DWORD *)(a1 + 4);
  if (*(_DWORD *)a1 == -1 && v14 == -1 || (unint64_t v16 = HIDWORD(v12), (HIDWORD(v12) & v12) == 0xFFFFFFFF))
  {
    uint64_t v32 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_19;
  }
  long double v17 = exp(3.14159265 - (double)v14 * 6.28318531 / 4294967300.0);
  long double v18 = atan((v17 - 1.0 / v17) * 0.5) * 57.2957795 * 0.0174532925;
  v19.i64[0] = v15;
  v19.i64[1] = v13;
  long double v20 = exp(3.14159265 - (double)v16 * 6.28318531 / 4294967300.0);
  long double v21 = atan((v20 - 1.0 / v20) * 0.5) * 57.2957795 * 0.0174532925;
  int64x2_t v22 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v19), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v71 = vsubq_f64((float64x2_t)v22, (float64x2_t)vdupq_laneq_s64(v22, 1)).f64[0];
  long double v23 = sin((v18 - v21) * 0.5);
  long double v24 = v23 * v23;
  double v25 = cos(v18);
  long double v26 = v25 * cos(v21);
  long double v27 = sin(0.5 * v71);
  long double v28 = atan2(sqrt(v27 * v27 * v26 + v24), sqrt(1.0 - (v27 * v27 * v26 + v24)));
  double v29 = (v28 + v28) * 6372797.56 * 100.0;
  if (v29 >= 0.0)
  {
    double v30 = v29;
    if (v29 >= 4.50359963e15) {
      goto LABEL_58;
    }
    uint64_t v31 = (uint64_t)(v29 + v29) + 1;
  }
  else
  {
    double v30 = v29;
    if (v29 <= -4.50359963e15) {
      goto LABEL_58;
    }
    uint64_t v31 = (uint64_t)(v29 + v29);
    if (v31 >= 1) {
      --v31;
    }
  }
  double v30 = (double)(v31 >> 1);
LABEL_58:
  if (v30 >= 9.22337204e18)
  {
    uint64_t v32 = 0x7FFFFFFFFFFFFFFELL;
    goto LABEL_19;
  }
  if (v29 >= 0.0)
  {
    if (v29 < 4.50359963e15)
    {
      uint64_t v49 = (uint64_t)(v29 + v29) + 1;
LABEL_124:
      double v29 = (double)(v49 >> 1);
    }
  }
  else if (v29 > -4.50359963e15)
  {
    uint64_t v49 = (uint64_t)(v29 + v29);
    if (v49 >= 1) {
      --v49;
    }
    goto LABEL_124;
  }
  uint64_t v32 = (uint64_t)v29;
LABEL_19:
  strcpy((char *)__p, "QueryTerminalUtilities");
  HIBYTE(__p[2]) = 22;
  memset(v80, 0, 24);
  long double v33 = sub_374CDC((uint64_t)a3, (uint64_t)__p, (uint64_t *)v80);
  sub_54214((uint64_t)v81, (uint64_t)v33);
  uint64_t v34 = *(void *)&v80[0];
  if (*(void *)&v80[0])
  {
    uint64_t v35 = *((void *)&v80[0] + 1);
    long double v36 = *(void **)&v80[0];
    if (*((void *)&v80[0] + 1) != *(void *)&v80[0])
    {
      do
      {
        if (*(char *)(v35 - 1) < 0) {
          operator delete(*(void **)(v35 - 24));
        }
        v35 -= 24;
      }
      while (v35 != v34);
      long double v36 = *(void **)&v80[0];
    }
    *((void *)&v80[0] + 1) = v34;
    operator delete(v36);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20E1380;
  strcpy((char *)__p[0], "max_origin_poi_distance_from_user_location_m");
  double v37 = sub_5C7E8(v81, (uint64_t)__p);
  double v38 = v37;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    double v39 = v38 * 100.0;
    if (v38 * 100.0 < 0.0) {
      goto LABEL_31;
    }
  }
  else
  {
    double v39 = v37 * 100.0;
    if (v38 * 100.0 < 0.0)
    {
LABEL_31:
      double v40 = v39;
      if (v39 <= -4.50359963e15) {
        goto LABEL_39;
      }
      uint64_t v41 = (uint64_t)(v39 + v39);
      if (v41 >= 1) {
        --v41;
      }
      goto LABEL_38;
    }
  }
  double v40 = v39;
  if (v39 >= 4.50359963e15) {
    goto LABEL_39;
  }
  uint64_t v41 = (uint64_t)(v39 + v39) + 1;
LABEL_38:
  double v40 = (double)(v41 >> 1);
LABEL_39:
  if (v40 < 9.22337204e18)
  {
    if (v39 >= 0.0)
    {
      if (v39 >= 4.50359963e15) {
        goto LABEL_50;
      }
      uint64_t v42 = (uint64_t)(v39 + v39) + 1;
    }
    else
    {
      if (v39 <= -4.50359963e15) {
        goto LABEL_50;
      }
      uint64_t v42 = (uint64_t)(v39 + v39);
      if (v42 >= 1) {
        --v42;
      }
    }
    double v39 = (double)(v42 >> 1);
LABEL_50:
    uint64_t v43 = (uint64_t)v39;
    if (v32 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  uint64_t v43 = 0x7FFFFFFFFFFFFFFELL;
  if (v32 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_52:
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)__p);
      sub_188FC78(__p, (uint64_t)"Got a place (Muid ", 18);
      uint64_t v44 = (void *)std::ostream::operator<<();
      uint64_t v45 = sub_188FC78(v44, (uint64_t)") with a coordinate that ", 25);
      if (v32 == 0x7FFFFFFFFFFFFFFFLL)
      {
        unsigned int v46 = 21;
        BYTE7(v80[1]) = 21;
        strcpy((char *)v80, "cannot be compared to");
        uint64_t v47 = 0x6220746F6E6E6163;
        uint64_t v48 = 0x7261706D6F632065;
      }
      else
      {
        if (v32 < 0) {
          __int16 v50 = -50;
        }
        else {
          __int16 v50 = 50;
        }
        std::to_string(&v72, v32 / 100+ (int)(((5243 * (__int16)(v50 + v32 % 100)) >> 19) + ((5243 * (__int16)(v50 + v32 % 100)) >> 31)));
        uint64_t v51 = std::string::insert(&v72, 0, "is ");
        long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        v73.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        uint64_t v53 = std::string::append(&v73, " meters away from");
        long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
        *(void *)&v80[1] = *((void *)&v53->__r_.__value_.__l + 2);
        v80[0] = v54;
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        v53->__r_.__value_.__r.__words[0] = 0;
        unsigned int v46 = BYTE7(v80[1]);
        uint64_t v48 = *((void *)&v80[0] + 1);
        uint64_t v47 = *(void *)&v80[0];
      }
      if ((v46 & 0x80u) == 0) {
        double v55 = v80;
      }
      else {
        double v55 = (_OWORD *)v47;
      }
      if ((v46 & 0x80u) == 0) {
        uint64_t v56 = v46;
      }
      else {
        uint64_t v56 = v48;
      }
      int v57 = sub_188FC78(v45, (uint64_t)v55, v56);
      sub_188FC78(v57, (uint64_t)" the coordinate of the snapped location.", 40);
      if (SBYTE7(v80[1]) < 0) {
        operator delete(*(void **)&v80[0]);
      }
      if (v32 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v73.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v72.__r_.__value_.__l.__data_);
        }
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)v80, 3u);
      if (SBYTE7(v80[1]) < 0) {
        operator delete(*(void **)&v80[0]);
      }
      if (v79 < 0) {
        operator delete(v78);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    goto LABEL_87;
  }
LABEL_51:
  if (v32 > v43) {
    goto LABEL_52;
  }
LABEL_87:
  unint64_t v83 = v11;
  int v84 = 1;
  sub_28D048(v8, (uint64_t)&v83, (unint64_t)__p);
  if (!v77 || HIDWORD(v77) == -1)
  {
    sub_F5FB7C(a2, a1, 0, (uint64_t)a4);
  }
  else
  {
    int v58 = __p[0];
    int v59 = *(_DWORD *)(a1 + 152);
    if (__p[0] != __p[1])
    {
      while (*((unsigned char *)v58 + 16) != (v59 == 1))
      {
        v58 += 6;
        if (v58 == __p[1])
        {
          int v58 = __p[1];
          break;
        }
      }
    }
    sub_F38518(a2, *v58, v59, v58[1], (uint64_t)a4);
    if (*a4 != a4[1])
    {
      uint64_t v60 = -1;
      if (v77 && HIDWORD(v77) != -1) {
        uint64_t v60 = sub_28CE70(*(void *)(a2 + 4176), v77);
      }
      a4[3] = v60;
    }
  }
  uint64_t v61 = (void **)v75;
  if (v75)
  {
    uint64_t v62 = v76;
    unint64_t v63 = v75;
    if (v76 != v75)
    {
      do
      {
        if (*((char *)v62 - 1) < 0) {
          operator delete(*(v62 - 3));
        }
        v62 -= 6;
      }
      while (v62 != v61);
      unint64_t v63 = v75;
    }
    long long v76 = v61;
    operator delete(v63);
  }
  uint64_t v64 = (char *)__p[0];
  if (__p[0])
  {
    uint64_t v65 = (char *)__p[1];
    unsigned int v66 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        unint64_t v67 = (void *)*((void *)v65 - 3);
        if (v67)
        {
          *((void *)v65 - 2) = v67;
          operator delete(v67);
        }
        v65 -= 48;
      }
      while (v65 != v64);
      unsigned int v66 = __p[0];
    }
    __p[1] = v64;
    operator delete(v66);
  }
  uint64_t v68 = v82;
  if (v82)
  {
    do
    {
      uint64_t v70 = (void **)*v68;
      sub_55198((uint64_t)(v68 + 5));
      if (*((char *)v68 + 39) < 0) {
        operator delete(v68[2]);
      }
      operator delete(v68);
      uint64_t v68 = v70;
    }
    while (v70);
  }
  BOOL v69 = (void *)v81[0];
  v81[0] = 0;
  if (v69) {
    operator delete(v69);
  }
}

void sub_F5E9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  sub_111ECAC((uint64_t)&a25);
  sub_5450C(v30 - 224);
  _Unwind_Resume(a1);
}

void sub_F5EA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_1A668((void **)(v24 - 256));
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xF5EA7CLL);
}

void *sub_F5EAA8(uint64_t a1, const void **a2, uint64_t *a3)
{
  uint64_t v5 = *(void **)(a1 + 8);
  if ((unint64_t)v5 >= *(void *)(a1 + 16))
  {
    unint64_t v12 = sub_F61E54((void **)a1, (uint64_t)a2, a3);
  }
  else
  {
    uint64_t v6 = *a3;
    *uint64_t v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    uint64_t v8 = *a2;
    uint64_t v7 = a2[1];
    int64_t v9 = v7 - (unsigned char *)*a2;
    if (v7 != *a2)
    {
      if (0xCCCCCCCCCCCCCCCDLL * (v9 >> 4) >= 0x333333333333334) {
        sub_2E00();
      }
      BOOL v10 = (char *)operator new(v9);
      *uint64_t v5 = v10;
      v5[1] = v10;
      v5[2] = &v10[16 * (v9 >> 4)];
      size_t v11 = 80 * ((v9 - 80) / 0x50uLL) + 80;
      memcpy(v10, v8, v11);
      v5[1] = &v10[v11];
    }
    v5[3] = a2[3];
    v5[4] = v6;
    unint64_t v12 = v5 + 5;
    *(void *)(a1 + 8) = v5 + 5;
  }
  *(void *)(a1 + 8) = v12;
  return v12 - 5;
}

void sub_F5EBAC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void *sub_F5EBCC()
{
  uint64_t v0 = (uint64_t *)__chkstk_darwin();
  uint64_t v2 = v1;
  *(void *)uint64_t v1 = 0;
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = -1;
  *(void *)(v1 + 32) = -1;
  *(_DWORD *)(v1 + 40) = 0x7FFFFFFF;
  *(void *)(v1 + 48) = -1;
  *(void *)(v1 + 56) = -1;
  *(void *)(v1 + 64) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(v1 + 72) = 0;
  *(_DWORD *)(v1 + 80) = -1935635296;
  *(void *)(v1 + 104) = 0;
  uint64_t v3 = (void *)(v1 + 104);
  *(void *)(v1 + 88) = 0;
  *(_DWORD *)(v1 + 95) = 0;
  *(void *)(v1 + 112) = 0;
  *(void *)(v1 + 120) = 0;
  *(_DWORD *)(v1 + 128) = 0;
  *(_OWORD *)(v1 + 136) = 0u;
  uint64_t v4 = (void **)(v1 + 136);
  *(unsigned char *)(v1 + 132) = 100;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  sub_F620E8(&v50, v5);
  uint64_t v7 = *v0;
  uint64_t v6 = v0[1];
  if (*v0 != v6)
  {
    while (*(_DWORD *)(v7 + 152))
    {
      v7 += 160;
      if (v7 == v6) {
        goto LABEL_4;
      }
    }
  }
  if (v7 == v6)
  {
LABEL_4:
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(__p, "No origin found in input snapped locations.");
    int64_t v9 = (void *)sub_2F404((uint64_t)exception, (long long *)__p);
  }
  unsigned int v11 = *(_DWORD *)v7;
  unsigned int v10 = *(_DWORD *)(v7 + 4);
  sub_F5D714((uint64_t)&v50, v7, 0, (uint64_t)__p);
  unint64_t v12 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v12;
    operator delete(v12);
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    *(void *)(v2 + 16) = 0;
  }
  *(_OWORD *)uint64_t v2 = *(_OWORD *)__p;
  uint64_t v13 = v49;
  *(void *)(v2 + 16) = v48;
  *(void *)(v2 + 24) = v13;
  *(_OWORD *)(v2 + 32) = *(_OWORD *)v7;
  long long v14 = *(_OWORD *)(v7 + 16);
  long long v15 = *(_OWORD *)(v7 + 32);
  long long v16 = *(_OWORD *)(v7 + 48);
  *(_DWORD *)(v2 + 95) = *(_DWORD *)(v7 + 63);
  *(_OWORD *)(v2 + 64) = v15;
  *(_OWORD *)(v2 + 80) = v16;
  *(_OWORD *)(v2 + 48) = v14;
  if (v2 + 32 != v7) {
    sub_147D0(v3, *(char **)(v7 + 72), *(char **)(v7 + 80), (uint64_t)(*(void *)(v7 + 80) - *(void *)(v7 + 72)) >> 2);
  }
  int v17 = *(_DWORD *)(v7 + 96);
  *(unsigned char *)(v2 + 132) = *(unsigned char *)(v7 + 100);
  *(_DWORD *)(v2 + 128) = v17;
  long double v18 = (unsigned int *)*v0;
  uint64x2_t v19 = (unsigned int *)v0[1];
  if ((unsigned int *)*v0 != v19)
  {
    BOOL v20 = (v11 & v10) != -1;
    long double v21 = exp((double)v10 * -6.28318531 / 4294967300.0 + 3.14159265);
    double __x = (v21 + -1.0 / v21) * 0.5;
    while (1)
    {
      unsigned int v22 = v18[38];
      if (v22 - 2 >= 3) {
        break;
      }
      sub_F5D714((uint64_t)&v50, (uint64_t)v18, 0, (uint64_t)__p);
      long double v23 = *(void **)(v2 + 144);
      if ((unint64_t)v23 >= *(void *)(v2 + 152))
      {
        uint64_t v24 = sub_D128A0(v4, (uint64_t)__p);
        double v25 = __p[0];
        *(void *)(v2 + 144) = v24;
        if (!v25) {
          goto LABEL_13;
        }
LABEL_34:
        __p[1] = v25;
        operator delete(v25);
        goto LABEL_13;
      }
      *long double v23 = 0;
      v23[1] = 0;
      v23[2] = 0;
      *(_OWORD *)long double v23 = *(_OWORD *)__p;
      v23[2] = v48;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v48 = 0;
      v23[3] = v49;
      *(void *)(v2 + 144) = v23 + 4;
LABEL_13:
      v18 += 40;
      if (v18 == v19) {
        goto LABEL_49;
      }
    }
    if (v22) {
      BOOL v26 = v22 == 5;
    }
    else {
      BOOL v26 = 1;
    }
    if (v26) {
      goto LABEL_13;
    }
    if (!v20 || ((v28 = *v18, unsigned int v27 = v18[1], *v18 == -1) ? (v29 = v27 == -1) : (v29 = 0), v29))
    {
      uint64_t v42 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_33;
    }
    long double v30 = atan(__x) * 57.2957795 * 0.0174532925;
    long double v31 = exp((double)v27 * -6.28318531 / 4294967300.0 + 3.14159265);
    long double v32 = atan((v31 - 1.0 / v31) * 0.5) * 57.2957795 * 0.0174532925;
    long double v33 = sin((v30 - v32) * 0.5);
    long double v34 = v33 * v33;
    double v35 = cos(v30);
    long double v36 = v35 * cos(v32);
    long double v37 = sin((((double)v11 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925- ((double)v28 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925)* 0.5);
    long double v38 = atan2(sqrt(v37 * v37 * v36 + v34), sqrt(1.0 - (v37 * v37 * v36 + v34)));
    double v39 = (v38 + v38) * 6372797.56 * 100.0;
    if (v39 >= 0.0)
    {
      double v40 = v39;
      if (v39 >= 4.50359963e15) {
        goto LABEL_38;
      }
      uint64_t v41 = (uint64_t)(v39 + v39) + 1;
    }
    else
    {
      double v40 = v39;
      if (v39 <= -4.50359963e15) {
        goto LABEL_38;
      }
      uint64_t v41 = (uint64_t)(v39 + v39);
      if (v41 >= 1) {
        --v41;
      }
    }
    double v40 = (double)(v41 >> 1);
LABEL_38:
    if (v40 >= 9.22337204e18)
    {
      uint64_t v42 = 0x7FFFFFFFFFFFFFFELL;
      goto LABEL_33;
    }
    if (v39 >= 0.0)
    {
      if (v39 < 4.50359963e15)
      {
        uint64_t v43 = (uint64_t)(v39 + v39) + 1;
LABEL_47:
        double v39 = (double)(v43 >> 1);
      }
    }
    else if (v39 > -4.50359963e15)
    {
      uint64_t v43 = (uint64_t)(v39 + v39);
      if (v43 >= 1) {
        --v43;
      }
      goto LABEL_47;
    }
    uint64_t v42 = (uint64_t)v39;
LABEL_33:
    uint64_t v46 = v42;
    sub_F5D714((uint64_t)&v50, (uint64_t)v18, 0, (uint64_t)__p);
    sub_F5EAA8(v2 + 160, (const void **)__p, &v46);
    double v25 = __p[0];
    if (__p[0]) {
      goto LABEL_34;
    }
    goto LABEL_13;
  }
LABEL_49:
  if (v52)
  {
    uint64_t v53 = v52;
    operator delete(v52);
  }
  return sub_3A6318(v51);
}

void sub_F5F128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  sub_C62E9C(&a19);
  sub_CF7EAC(v19);
  _Unwind_Resume(a1);
}

void sub_F5F17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, ...)
{
  va_start(va, a14);
  if (a13 < 0) {
    JUMPOUT(0xF5F18CLL);
  }
  sub_C62E9C((uint64_t *)va);
  sub_CF7EAC(v14);
  _Unwind_Resume(a1);
}

void sub_F5F1A8()
{
  __cxa_free_exception(v0);
  JUMPOUT(0xF5F1B4);
}

void sub_F5F1CC(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = -1;
  *(void *)(a3 + 32) = -1;
  *(_DWORD *)(a3 + 40) = 0x7FFFFFFF;
  *(void *)(a3 + 48) = -1;
  *(void *)(a3 + 56) = -1;
  *(void *)(a3 + 64) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a3 + 72) = 0;
  *(_DWORD *)(a3 + 80) = -1935635296;
  *(void *)(a3 + 104) = 0;
  uint64_t v5 = (void *)(a3 + 104);
  *(void *)(a3 + 88) = 0;
  *(_DWORD *)(a3 + 95) = 0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 120) = 0;
  *(_DWORD *)(a3 + 128) = 0;
  *(_OWORD *)(a3 + 136) = 0u;
  uint64_t v6 = (void **)(a3 + 136);
  *(unsigned char *)(a3 + 132) = 100;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  sub_BF4E90((uint64_t)v53, a2);
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 != v7)
  {
    while (*(_DWORD *)(v8 + 152))
    {
      v8 += 160;
      if (v8 == v7) {
        goto LABEL_4;
      }
    }
  }
  if (v8 == v7)
  {
LABEL_4:
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(__p, "No origin found in input snapped locations.");
    unsigned int v10 = (void *)sub_2F404((uint64_t)exception, (long long *)__p);
  }
  unsigned int v12 = *(_DWORD *)v8;
  unsigned int v11 = *(_DWORD *)(v8 + 4);
  sub_BF4FB0((uint64_t)v53, v8, 0, (uint64_t)__p);
  uint64_t v13 = *(void **)a3;
  if (*(void *)a3)
  {
    *(void *)(a3 + 8) = v13;
    operator delete(v13);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  *(_OWORD *)a3 = *(_OWORD *)__p;
  uint64_t v14 = v52;
  *(void *)(a3 + 16) = v51;
  *(void *)(a3 + 24) = v14;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)v8;
  long long v15 = *(_OWORD *)(v8 + 16);
  long long v16 = *(_OWORD *)(v8 + 32);
  long long v17 = *(_OWORD *)(v8 + 48);
  *(_DWORD *)(a3 + 95) = *(_DWORD *)(v8 + 63);
  *(_OWORD *)(a3 + 64) = v16;
  *(_OWORD *)(a3 + 80) = v17;
  *(_OWORD *)(a3 + 48) = v15;
  if (a3 + 32 != v8) {
    sub_147D0(v5, *(char **)(v8 + 72), *(char **)(v8 + 80), (uint64_t)(*(void *)(v8 + 80) - *(void *)(v8 + 72)) >> 2);
  }
  int v18 = *(_DWORD *)(v8 + 96);
  *(unsigned char *)(a3 + 132) = *(unsigned char *)(v8 + 100);
  *(_DWORD *)(a3 + 128) = v18;
  uint64_t v19 = (unsigned int *)*a1;
  BOOL v20 = (unsigned int *)a1[1];
  if ((unsigned int *)*a1 != v20)
  {
    BOOL v21 = (v12 & v11) != -1;
    long double v22 = exp((double)v11 * -6.28318531 / 4294967300.0 + 3.14159265);
    double __x = (v22 + -1.0 / v22) * 0.5;
    while (1)
    {
      unsigned int v23 = v19[38];
      if (v23 - 2 >= 3) {
        break;
      }
      sub_BF4FB0((uint64_t)v53, (uint64_t)v19, 0, (uint64_t)__p);
      uint64_t v24 = *(void **)(a3 + 144);
      if ((unint64_t)v24 >= *(void *)(a3 + 152))
      {
        double v25 = sub_D128A0(v6, (uint64_t)__p);
        BOOL v26 = __p[0];
        *(void *)(a3 + 144) = v25;
        if (!v26) {
          goto LABEL_13;
        }
LABEL_34:
        __p[1] = v26;
        operator delete(v26);
        goto LABEL_13;
      }
      void *v24 = 0;
      v24[1] = 0;
      v24[2] = 0;
      *(_OWORD *)uint64_t v24 = *(_OWORD *)__p;
      v24[2] = v51;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v51 = 0;
      v24[3] = v52;
      *(void *)(a3 + 144) = v24 + 4;
LABEL_13:
      v19 += 40;
      if (v19 == v20) {
        goto LABEL_49;
      }
    }
    if (v23) {
      BOOL v27 = v23 == 5;
    }
    else {
      BOOL v27 = 1;
    }
    if (v27) {
      goto LABEL_13;
    }
    if (!v21 || ((v29 = *v19, unsigned int v28 = v19[1], *v19 == -1) ? (v30 = v28 == -1) : (v30 = 0), v30))
    {
      uint64_t v43 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_33;
    }
    long double v31 = atan(__x) * 57.2957795 * 0.0174532925;
    long double v32 = exp((double)v28 * -6.28318531 / 4294967300.0 + 3.14159265);
    long double v33 = atan((v32 - 1.0 / v32) * 0.5) * 57.2957795 * 0.0174532925;
    long double v34 = sin((v31 - v33) * 0.5);
    long double v35 = v34 * v34;
    double v36 = cos(v31);
    long double v37 = v36 * cos(v33);
    long double v38 = sin((((double)v12 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925- ((double)v29 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925)* 0.5);
    long double v39 = atan2(sqrt(v38 * v38 * v37 + v35), sqrt(1.0 - (v38 * v38 * v37 + v35)));
    double v40 = (v39 + v39) * 6372797.56 * 100.0;
    if (v40 >= 0.0)
    {
      double v41 = v40;
      if (v40 >= 4.50359963e15) {
        goto LABEL_38;
      }
      uint64_t v42 = (uint64_t)(v40 + v40) + 1;
    }
    else
    {
      double v41 = v40;
      if (v40 <= -4.50359963e15) {
        goto LABEL_38;
      }
      uint64_t v42 = (uint64_t)(v40 + v40);
      if (v42 >= 1) {
        --v42;
      }
    }
    double v41 = (double)(v42 >> 1);
LABEL_38:
    if (v41 >= 9.22337204e18)
    {
      uint64_t v43 = 0x7FFFFFFFFFFFFFFELL;
      goto LABEL_33;
    }
    if (v40 >= 0.0)
    {
      if (v40 < 4.50359963e15)
      {
        uint64_t v44 = (uint64_t)(v40 + v40) + 1;
LABEL_47:
        double v40 = (double)(v44 >> 1);
      }
    }
    else if (v40 > -4.50359963e15)
    {
      uint64_t v44 = (uint64_t)(v40 + v40);
      if (v44 >= 1) {
        --v44;
      }
      goto LABEL_47;
    }
    uint64_t v43 = (uint64_t)v40;
LABEL_33:
    uint64_t v49 = v43;
    sub_BF4FB0((uint64_t)v53, (uint64_t)v19, 0, (uint64_t)__p);
    sub_F5F7DC(a3 + 160, (const void **)__p, &v49);
    BOOL v26 = __p[0];
    if (__p[0]) {
      goto LABEL_34;
    }
    goto LABEL_13;
  }
LABEL_49:
  if (v58)
  {
    int v59 = v58;
    operator delete(v58);
  }
  uint64_t v45 = v57;
  if (v57)
  {
    do
    {
      uint64_t v46 = (void *)*v45;
      operator delete(v45);
      uint64_t v45 = v46;
    }
    while (v46);
  }
  uint64_t v47 = v56;
  uint64_t v56 = 0;
  if (v47) {
    operator delete(v47);
  }
  if (v54)
  {
    double v55 = v54;
    operator delete(v54);
  }
}

void sub_F5F738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  sub_3821F8(&a19);
  sub_CF7EAC(v19);
  _Unwind_Resume(a1);
}

void sub_F5F78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, ...)
{
  va_start(va, a14);
  if (a13 < 0) {
    JUMPOUT(0xF5F79CLL);
  }
  sub_3821F8((uint64_t *)va);
  sub_CF7EAC(v14);
  _Unwind_Resume(a1);
}

void sub_F5F7B8()
{
  __cxa_free_exception(v0);
  JUMPOUT(0xF5F7C4);
}

void *sub_F5F7DC(uint64_t a1, const void **a2, uint64_t *a3)
{
  uint64_t v5 = *(void **)(a1 + 8);
  if ((unint64_t)v5 >= *(void *)(a1 + 16))
  {
    unsigned int v12 = sub_F62174((void **)a1, (uint64_t)a2, a3);
  }
  else
  {
    uint64_t v6 = *a3;
    *uint64_t v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    uint64_t v8 = *a2;
    uint64_t v7 = a2[1];
    int64_t v9 = v7 - (unsigned char *)*a2;
    if (v7 != *a2)
    {
      if (0xCCCCCCCCCCCCCCCDLL * (v9 >> 4) >= 0x333333333333334) {
        sub_2E00();
      }
      unsigned int v10 = (char *)operator new(v9);
      *uint64_t v5 = v10;
      v5[1] = v10;
      v5[2] = &v10[16 * (v9 >> 4)];
      size_t v11 = 80 * ((v9 - 80) / 0x50uLL) + 80;
      memcpy(v10, v8, v11);
      v5[1] = &v10[v11];
    }
    v5[3] = a2[3];
    v5[4] = v6;
    unsigned int v12 = v5 + 5;
    *(void *)(a1 + 8) = v5 + 5;
  }
  *(void *)(a1 + 8) = v12;
  return v12 - 5;
}

void sub_F5F8E0(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

char **sub_F5F900@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int64_t v9 = a2;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  uint64_t v5 = a1[1] - *a1;
  if (v5)
  {
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * (v5 >> 4);
    if (v6 >= 0x1555555555555556) {
      sub_2E00();
    }
    uint64_t v7 = (char *)operator new(0x999999999999999CLL * (v5 >> 4));
    *(void *)a3 = v7;
    *(void *)(a3 + 8) = v7;
    *(void *)(a3 + 16) = &v7[12 * v6];
  }
  else
  {
    uint64_t v7 = 0;
  }
  return sub_F62408(a1, (char **)a3, v7, &v9);
}

void sub_F5F9B4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char **sub_F5F9D4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int64_t v9 = a2;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  uint64_t v5 = a1[1] - *a1;
  if (v5)
  {
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * (v5 >> 4);
    if (v6 >= 0x1555555555555556) {
      sub_2E00();
    }
    uint64_t v7 = (char *)operator new(0x999999999999999CLL * (v5 >> 4));
    *(void *)a3 = v7;
    *(void *)(a3 + 8) = v7;
    *(void *)(a3 + 16) = &v7[12 * v6];
  }
  else
  {
    uint64_t v7 = 0;
  }
  return sub_F62514(a1, (char **)a3, v7, &v9);
}

void sub_F5FA88(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char **sub_F5FAA8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int64_t v9 = a2;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  uint64_t v5 = *(void *)(a1 + 8) - *(void *)a1;
  if (v5)
  {
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * (v5 >> 4);
    if (v6 >= 0x1555555555555556) {
      sub_2E00();
    }
    uint64_t v7 = (char *)operator new(0x999999999999999CLL * (v5 >> 4));
    *(void *)a3 = v7;
    *(void *)(a3 + 8) = v7;
    *(void *)(a3 + 16) = &v7[12 * v6];
  }
  else
  {
    uint64_t v7 = 0;
  }
  return sub_F62620((unsigned int **)a1, (char **)a3, v7, &v9);
}

void sub_F5FB5C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_F5FB7C(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = v8;
  int v9 = *(_DWORD *)(a2 + 152);
  unsigned int v10 = *(uint64_t **)(a2 + 104);
  size_t v11 = *(uint64_t **)(a2 + 112);
  if (v10 != v11)
  {
    do
    {
      sub_F38624(a1, v10, v9, a2, a3, (char **)a4, 1.0);
      v10 += 8;
    }
    while (v10 != v11);
    uint64_t v13 = *(char **)a4;
    unsigned int v12 = *(char **)(a4 + 8);
    if (*(char **)a4 != v12)
    {
      uint64_t v14 = *(char **)a4;
      long long v15 = *(char **)a4;
      while (v15[32])
      {
        v15 += 80;
        if (v15 == v12)
        {
          unint64_t v16 = v12 - v13 - 80;
          if (v16 < 0x50) {
            goto LABEL_27;
          }
          unint64_t v17 = v16 / 0x50 + 1;
          uint64_t v14 = &v13[80 * (v17 & 0x7FFFFFFFFFFFFFELL)];
          int v18 = v13 + 128;
          uint64_t v19 = v17 & 0x7FFFFFFFFFFFFFELL;
          do
          {
            *(v18 - 80) = 0;
            *int v18 = 0;
            v18 += 160;
            v19 -= 2;
          }
          while (v19);
          if (v17 != (v17 & 0x7FFFFFFFFFFFFFELL))
          {
LABEL_27:
            do
            {
              v14[48] = 0;
              v14 += 80;
            }
            while (v14 != v12);
          }
          break;
        }
      }
    }
  }
  uint64_t v20 = *(void *)(a2 + 128);
  uint64_t v21 = *(void *)(a2 + 136);
  if (v20 != v21)
  {
    if (v21 - v20 < 0) {
      sub_2E00();
    }
    long double v22 = (char *)operator new(v21 - v20);
    unsigned int v23 = v22;
    uint64_t v24 = 0;
    do
    {
      uint64_t v25 = v20 + v24;
      BOOL v26 = &v22[v24];
      long long v27 = *(_OWORD *)(v20 + v24);
      long long v28 = *(_OWORD *)(v20 + v24 + 16);
      *((void *)v26 + 4) = *(void *)(v20 + v24 + 32);
      *(_OWORD *)BOOL v26 = v27;
      *((_OWORD *)v26 + 1) = v28;
      *((_WORD *)v26 + 20) = *(_WORD *)(v20 + v24 + 40);
      *((_WORD *)v26 + 21) = *(_WORD *)(v20 + v24 + 42);
      uint64_t v29 = *(void *)(v20 + v24 + 48);
      v26[56] = *(unsigned char *)(v20 + v24 + 56);
      *((void *)v26 + 6) = v29;
      v24 += 64;
    }
    while (v25 + 64 != v21);
    uint64_t v30 = v24 >> 6;
    unint64_t v31 = 126 - 2 * __clz(v24 >> 6);
    if (v24) {
      uint64_t v32 = v31;
    }
    else {
      uint64_t v32 = 0;
    }
    sub_F60138((uint64_t)v22, (unint64_t)&v22[v24], (uint64_t)&v37, v32, 1);
    if (v24)
    {
      uint64_t v33 = 0;
      double v34 = 0.5;
      double v35 = 0.5 / (double)(unint64_t)v30;
      uint64_t v36 = v30 << 6;
      do
      {
        sub_F38624(a1, (uint64_t *)&v23[v33], v9, a2, a3, (char **)a4, v34);
        double v34 = v34 - v35;
        v33 += 64;
      }
      while (v36 != v33);
    }
    operator delete(v23);
  }
}

void sub_F5FDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  operator delete(v11);
  uint64_t v13 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v13;
    operator delete(v13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

unsigned int **sub_F5FE04@<X0>(unsigned int **result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  if (*result != v3)
  {
    unsigned int v5 = -1;
    float64x2_t v29 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
    float64x2_t v30 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
    float64x2_t v27 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
    float64x2_t v28 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
    unsigned int v6 = -1;
    do
    {
      if (!v2[38]) {
        goto LABEL_5;
      }
      if (v5 == -1 && v6 == -1 || ((unsigned int v8 = *v2, v9 = v2[1], *v2 == -1) ? (v10 = v9 == -1) : (v10 = 0), v10))
      {
        uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_4;
      }
      long double v11 = exp(3.14159265 - (double)v6 * 6.28318531 / 4294967300.0);
      long double v12 = atan((v11 - 1.0 / v11) * 0.5) * 57.2957795 * 0.0174532925;
      v13.i64[0] = v5;
      v13.i64[1] = v8;
      long double v14 = exp(3.14159265 - (double)v9 * 6.28318531 / 4294967300.0);
      long double v15 = atan((v14 - 1.0 / v14) * 0.5) * 57.2957795 * 0.0174532925;
      int64x2_t v16 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v13), v30), v29), v28), v27);
      double v31 = vsubq_f64((float64x2_t)v16, (float64x2_t)vdupq_laneq_s64(v16, 1)).f64[0];
      long double v17 = sin((v12 - v15) * 0.5);
      long double v18 = v17 * v17;
      double v19 = cos(v12);
      long double v20 = v19 * cos(v15);
      long double v21 = sin(0.5 * v31);
      long double v22 = atan2(sqrt(v21 * v21 * v20 + v18), sqrt(1.0 - (v21 * v21 * v20 + v18)));
      double v23 = (v22 + v22) * 6372797.56 * 100.0;
      if (v23 >= 0.0)
      {
        double v24 = v23;
        if (v23 < 4.50359963e15)
        {
          uint64_t v25 = (uint64_t)(v23 + v23) + 1;
LABEL_20:
          double v24 = (double)(v25 >> 1);
        }
      }
      else
      {
        double v24 = v23;
        if (v23 > -4.50359963e15)
        {
          uint64_t v25 = (uint64_t)(v23 + v23);
          if (v25 >= 1) {
            --v25;
          }
          goto LABEL_20;
        }
      }
      if (v24 < 9.22337204e18)
      {
        if (v23 >= 0.0)
        {
          if (v23 < 4.50359963e15)
          {
            uint64_t v26 = (uint64_t)(v23 + v23) + 1;
            goto LABEL_30;
          }
        }
        else if (v23 > -4.50359963e15)
        {
          uint64_t v26 = (uint64_t)(v23 + v23);
          if (v26 >= 1) {
            --v26;
          }
LABEL_30:
          double v23 = (double)(v26 >> 1);
        }
        uint64_t v7 = (uint64_t)v23;
        goto LABEL_4;
      }
      uint64_t v7 = 0x7FFFFFFFFFFFFFFELL;
LABEL_4:
      uint64_t v32 = v7;
      double result = (unsigned int **)sub_29603C((void **)a2, &v32);
LABEL_5:
      unsigned int v5 = *v2;
      unsigned int v6 = v2[1];
      v2 += 40;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_F6011C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F60138(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = result;
LABEL_2:
  unint64_t v78 = a2;
  char v79 = (uint64_t *)(a2 - 64);
  long long v76 = (uint64_t *)(a2 - 192);
  unint64_t v77 = (uint64_t *)(a2 - 128);
  uint64_t v10 = v9;
LABEL_3:
  uint64_t v11 = 1 - a4;
  while (1)
  {
    uint64_t v9 = v10;
    uint64_t v12 = a2 - v10;
    unint64_t v13 = (uint64_t)(a2 - v10) >> 6;
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v35 = *(void *)v10;
          if (*(void *)(a2 - 64) >= *(void *)v10) {
            return result;
          }
          uint64_t v94 = *(void *)(v10 + 8);
          int v98 = *(_DWORD *)(v10 + 16);
          *(_OWORD *)uint64_t v90 = *(_OWORD *)(v10 + 20);
          *(_DWORD *)&v90[16] = *(_DWORD *)(v10 + 36);
          unsigned int v36 = *(unsigned __int16 *)(v10 + 40);
          unsigned int v37 = *(unsigned __int16 *)(v10 + 42);
          uint64_t v82 = *(void *)(v10 + 48);
          char v86 = *(unsigned char *)(v10 + 56);
          *(void *)uint64_t v10 = *(void *)(a2 - 64);
          uint64_t v38 = *(void *)(a2 - 56);
          *(_DWORD *)(v10 + 16) = *(_DWORD *)(a2 - 48);
          *(void *)(v10 + 8) = v38;
          *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 - 40);
          char v39 = *(unsigned char *)(a2 - 23);
          if (v39)
          {
            *(unsigned char *)(v10 + 40) = *(unsigned char *)(a2 - 24);
            char v39 = 1;
          }
          *(unsigned char *)(v10 + 41) = v39;
          char v40 = *(unsigned char *)(a2 - 21);
          if (v40)
          {
            *(unsigned char *)(v10 + 42) = *(unsigned char *)(a2 - 22);
            char v40 = 1;
          }
          *(unsigned char *)(v10 + 43) = v40;
          uint64_t v41 = *(void *)(a2 - 16);
          *(unsigned char *)(v10 + 56) = *(unsigned char *)(a2 - 8);
          *(void *)(v10 + 48) = v41;
          *(void *)(a2 - 64) = v35;
          *(void *)(a2 - 56) = v94;
          *(_DWORD *)(a2 - 48) = v98;
          *(_OWORD *)(a2 - 40) = *(_OWORD *)&v90[4];
          if (v36 < 0x100)
          {
            *(unsigned char *)(a2 - 23) = 0;
            if (v37 >= 0x100) {
              goto LABEL_40;
            }
          }
          else
          {
            *(unsigned char *)(a2 - 24) = v36;
            *(unsigned char *)(a2 - 23) = 1;
            if (v37 >= 0x100)
            {
LABEL_40:
              *(unsigned char *)(a2 - 22) = v37;
              char v42 = 1;
              goto LABEL_41;
            }
          }
          char v42 = 0;
LABEL_41:
          *(unsigned char *)(a2 - 21) = v42;
          *(void *)(a2 - 16) = v82;
          *(unsigned char *)(a2 - 8) = v86;
          return result;
        case 3uLL:
          return sub_BF7404((uint64_t *)v10, (uint64_t *)(v10 + 64), v79);
        case 4uLL:
          return sub_BF8420(v10, v10 + 64, v10 + 128, (uint64_t)v79);
        case 5uLL:
          return sub_BF87F0(v10, v10 + 64, v10 + 128, v10 + 192, (uint64_t)v79);
        default:
          JUMPOUT(0);
      }
    }
    if (v12 <= 1535)
    {
      if (a5)
      {
        if (v10 == a2) {
          return result;
        }
        uint64_t v43 = v10 + 64;
        if (v10 + 64 == a2) {
          return result;
        }
        uint64_t v44 = 0;
        uint64_t v45 = v10;
        while (2)
        {
          uint64_t v47 = v43;
          uint64_t v48 = *(void *)(v45 + 64);
          if (v48 < *(void *)v45)
          {
            uint64_t v95 = *(void *)(v45 + 72);
            int v99 = *(_DWORD *)(v45 + 80);
            *(_DWORD *)&v91[16] = *(_DWORD *)(v45 + 100);
            *(_OWORD *)uint64_t v91 = *(_OWORD *)(v45 + 84);
            unsigned int v49 = *(unsigned __int16 *)(v45 + 104);
            unsigned int v50 = *(unsigned __int16 *)(v45 + 106);
            uint64_t v83 = *(void *)(v45 + 112);
            char v87 = *(unsigned char *)(v45 + 120);
            uint64_t v51 = v44;
            uint64_t v52 = *(void *)v45;
            while (1)
            {
              uint64_t v53 = v10 + v51;
              double result = *(void *)(v10 + v51 + 8);
              *(void *)(v53 + 64) = v52;
              *(void *)(v53 + 72) = result;
              *(_DWORD *)(v53 + 80) = *(_DWORD *)(v10 + v51 + 16);
              *(_OWORD *)(v53 + 88) = *(_OWORD *)(v10 + v51 + 24);
              char v54 = *(unsigned char *)(v10 + v51 + 41);
              if (v54)
              {
                *(unsigned char *)(v53 + 104) = *(unsigned char *)(v53 + 40);
                char v54 = 1;
              }
              *(unsigned char *)(v53 + 105) = v54;
              if (*(unsigned char *)(v53 + 43))
              {
                *(unsigned char *)(v10 + v51 + 106) = *(unsigned char *)(v10 + v51 + 42);
                char v55 = 1;
              }
              else
              {
                char v55 = 0;
              }
              uint64_t v56 = v10 + v51;
              *(unsigned char *)(v56 + 107) = v55;
              *(void *)(v56 + 112) = *(void *)(v10 + v51 + 48);
              *(unsigned char *)(v56 + 120) = *(unsigned char *)(v10 + v51 + 56);
              if (!v51) {
                break;
              }
              uint64_t v52 = *(void *)(v56 - 64);
              v51 -= 64;
              if (v48 >= v52)
              {
                uint64_t v57 = v10 + v51 + 64;
                goto LABEL_69;
              }
            }
            uint64_t v57 = v10;
LABEL_69:
            *(void *)uint64_t v57 = v48;
            *(_DWORD *)(v56 + 16) = v99;
            *(void *)(v56 + 8) = v95;
            *(_OWORD *)(v56 + 24) = *(_OWORD *)&v91[4];
            if (v49 < 0x100)
            {
              *(unsigned char *)(v57 + 41) = 0;
              if (v50 >= 0x100) {
                goto LABEL_55;
              }
LABEL_71:
              char v46 = 0;
            }
            else
            {
              *(unsigned char *)(v57 + 40) = v49;
              *(unsigned char *)(v57 + 41) = 1;
              if (v50 < 0x100) {
                goto LABEL_71;
              }
LABEL_55:
              *(unsigned char *)(v57 + 42) = v50;
              char v46 = 1;
            }
            *(unsigned char *)(v57 + 43) = v46;
            *(unsigned char *)(v56 + 56) = v87;
            *(void *)(v56 + 48) = v83;
          }
          uint64_t v43 = v47 + 64;
          v44 += 64;
          uint64_t v45 = v47;
          if (v47 + 64 == a2) {
            return result;
          }
          continue;
        }
      }
      if (v10 == a2) {
        return result;
      }
      uint64_t v63 = v10 + 64;
      if (v10 + 64 == a2) {
        return result;
      }
      uint64_t v64 = v10 + 112;
      while (2)
      {
        uint64_t v66 = v63;
        uint64_t v67 = *(void *)(v9 + 64);
        if (v67 < *(void *)v9)
        {
          uint64_t v96 = *(void *)(v9 + 72);
          int v100 = *(_DWORD *)(v9 + 80);
          *(_DWORD *)&v92[16] = *(_DWORD *)(v9 + 100);
          *(_OWORD *)uint64_t v92 = *(_OWORD *)(v9 + 84);
          unsigned int v68 = *(unsigned __int16 *)(v9 + 104);
          unsigned int v69 = *(unsigned __int16 *)(v9 + 106);
          uint64_t v84 = *(void *)(v9 + 112);
          char v88 = *(unsigned char *)(v9 + 120);
          uint64_t v70 = v64;
          uint64_t v71 = *(void *)v9;
          do
          {
            uint64_t v72 = *(void *)(v70 - 104);
            *(void *)(v70 - 48) = v71;
            *(void *)(v70 - 40) = v72;
            *(_DWORD *)(v70 - 32) = *(_DWORD *)(v70 - 96);
            *(_OWORD *)(v70 - 24) = *(_OWORD *)(v70 - 88);
            char v73 = *(unsigned char *)(v70 - 71);
            if (v73)
            {
              *(unsigned char *)(v70 - 8) = *(unsigned char *)(v70 - 72);
              char v73 = 1;
            }
            *(unsigned char *)(v70 - 7) = v73;
            char v74 = *(unsigned char *)(v70 - 69);
            if (v74)
            {
              *(unsigned char *)(v70 - 6) = *(unsigned char *)(v70 - 70);
              char v74 = 1;
            }
            *(unsigned char *)(v70 - 5) = v74;
            uint64_t v75 = v70 - 64;
            *(void *)uint64_t v70 = *(void *)(v70 - 64);
            *(unsigned char *)(v70 + 8) = *(unsigned char *)(v70 - 56);
            uint64_t v71 = *(void *)(v70 - 176);
            v70 -= 64;
          }
          while (v67 < v71);
          *(void *)(v75 - 48) = v67;
          *(_DWORD *)(v75 - 32) = v100;
          *(void *)(v75 - 40) = v96;
          *(_OWORD *)(v75 - 24) = *(_OWORD *)&v92[4];
          if (v68 < 0x100)
          {
            *(unsigned char *)(v75 - 7) = 0;
            if (v69 >= 0x100) {
              goto LABEL_83;
            }
LABEL_95:
            char v65 = 0;
          }
          else
          {
            *(unsigned char *)(v75 - 8) = v68;
            *(unsigned char *)(v75 - 7) = 1;
            if (v69 < 0x100) {
              goto LABEL_95;
            }
LABEL_83:
            *(unsigned char *)(v75 - 6) = v69;
            char v65 = 1;
          }
          *(unsigned char *)(v75 - 5) = v65;
          *(unsigned char *)(v75 + 8) = v88;
          *(void *)uint64_t v75 = v84;
        }
        uint64_t v63 = v66 + 64;
        v64 += 64;
        uint64_t v9 = v66;
        if (v66 + 64 == a2) {
          return result;
        }
        continue;
      }
    }
    uint64_t v14 = v11;
    if (v11 == 1) {
      break;
    }
    unint64_t v15 = v13 >> 1;
    int64x2_t v16 = (uint64_t *)(v10 + (v13 >> 1 << 6));
    if ((unint64_t)v12 <= 0x2000)
    {
      sub_BF7404(v16, (uint64_t *)v10, v79);
      if (a5) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    sub_BF7404((uint64_t *)v10, v16, v79);
    uint64_t v17 = v10 + (v15 << 6);
    sub_BF7404((uint64_t *)(v10 + 64), (uint64_t *)(v17 - 64), v77);
    sub_BF7404((uint64_t *)(v10 + 128), (uint64_t *)(v10 + 64 + (v15 << 6)), v76);
    sub_BF7404((uint64_t *)(v17 - 64), v16, (uint64_t *)(v10 + 64 + (v15 << 6)));
    uint64_t v18 = *(void *)v10;
    uint64_t v93 = *(void *)(v10 + 8);
    int v97 = *(_DWORD *)(v10 + 16);
    *(_DWORD *)&v89[16] = *(_DWORD *)(v10 + 36);
    *(_OWORD *)uint64_t v89 = *(_OWORD *)(v10 + 20);
    unsigned int v19 = *(unsigned __int16 *)(v10 + 40);
    unsigned int v20 = *(unsigned __int16 *)(v10 + 42);
    uint64_t v81 = *(void *)(v10 + 48);
    char v85 = *(unsigned char *)(v10 + 56);
    int v22 = *(unsigned __int8 *)(v17 + 41);
    long double v21 = (unsigned char *)(v17 + 41);
    uint64_t v23 = *(void *)(v21 - 33);
    int v24 = *(_DWORD *)(v21 - 25);
    *(void *)uint64_t v10 = *v16;
    *(void *)(v10 + 8) = v23;
    *(_DWORD *)(v10 + 16) = v24;
    *(_OWORD *)(v10 + 24) = *(_OWORD *)(v21 - 17);
    if (v22)
    {
      *(unsigned char *)(v10 + 40) = *(unsigned char *)(v10 + (v15 << 6) + 40);
      *(unsigned char *)(v10 + 41) = 1;
      uint64_t v25 = v10 + (v15 << 6);
      uint64_t v26 = (char *)(v25 + 43);
      char v27 = *(unsigned char *)(v25 + 43);
      a2 = v78;
      if (!v27) {
        goto LABEL_12;
      }
LABEL_11:
      *(unsigned char *)(v10 + 42) = *(unsigned char *)(v25 + 42);
      char v27 = 1;
      goto LABEL_12;
    }
    *(unsigned char *)(v10 + 41) = 0;
    uint64_t v25 = v10 + (v15 << 6);
    uint64_t v26 = (char *)(v25 + 43);
    char v27 = *(unsigned char *)(v25 + 43);
    a2 = v78;
    if (v27) {
      goto LABEL_11;
    }
LABEL_12:
    uint64_t v29 = *(void *)(v25 + 48);
    uint64_t v28 = v25 + 48;
    *(unsigned char *)(v10 + 43) = v27;
    char v30 = *(unsigned char *)(v28 + 8);
    *(void *)(v10 + 48) = v29;
    *(unsigned char *)(v10 + 56) = v30;
    *int64x2_t v16 = v18;
    *(_DWORD *)(v21 - 25) = v97;
    *(void *)(v21 - 33) = v93;
    *(_OWORD *)(v21 - 17) = *(_OWORD *)&v89[4];
    if (v19 < 0x100)
    {
      *long double v21 = 0;
      if (v20 >= 0x100)
      {
LABEL_14:
        *(unsigned char *)(v10 + (v15 << 6) + 42) = v20;
        char v31 = 1;
        goto LABEL_15;
      }
    }
    else
    {
      *(unsigned char *)(v10 + (v15 << 6) + 40) = v19;
      *long double v21 = 1;
      if (v20 >= 0x100) {
        goto LABEL_14;
      }
    }
    char v31 = 0;
LABEL_15:
    *uint64_t v26 = v31;
    *(unsigned char *)(v28 + 8) = v85;
    *(void *)uint64_t v28 = v81;
    if (a5) {
      goto LABEL_19;
    }
LABEL_18:
    if (*(void *)(v10 - 64) >= *(void *)v10)
    {
      double result = (uint64_t)sub_BF7A18((uint64_t *)v10, a2);
      uint64_t v10 = result;
      goto LABEL_29;
    }
LABEL_19:
    unint64_t v32 = sub_BF7D00((uint64_t *)v10, a2);
    if ((v33 & 1) == 0) {
      goto LABEL_27;
    }
    BOOL v34 = sub_F60A4C(v10, v32);
    uint64_t v10 = v32 + 64;
    double result = sub_F60A4C(v32 + 64, a2);
    if (result)
    {
      a4 = -v14;
      a2 = v32;
      if (v34) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v11 = v14 + 1;
    if (!v34)
    {
LABEL_27:
      double result = sub_F60138(v9, v32, a3, -v14, a5 & 1);
      uint64_t v10 = v32 + 64;
LABEL_29:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  if (v10 != a2)
  {
    unint64_t v58 = (v13 - 2) >> 1;
    unint64_t v59 = v58 + 1;
    uint64_t v60 = (void *)(v10 + (v58 << 6));
    do
    {
      sub_BF8CFC(v10, a3, (uint64_t)(a2 - v10) >> 6, v60);
      v60 -= 8;
      --v59;
    }
    while (v59);
    unint64_t v61 = (unint64_t)v12 >> 6;
    do
    {
      double result = sub_BF8EF0(v10, a2, a3, v61);
      a2 -= 64;
    }
    while (v61-- > 2);
  }
  return result;
}

BOOL sub_F60A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 6;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v22 = *(void *)(a2 - 64);
      uint64_t v23 = *(void *)a1;
      if (v22 >= *(void *)a1) {
        return result;
      }
      uint64_t v38 = *(void *)(a1 + 8);
      int v40 = *(_DWORD *)(a1 + 16);
      *(_OWORD *)unsigned int v36 = *(_OWORD *)(a1 + 20);
      *(_DWORD *)&v36[16] = *(_DWORD *)(a1 + 36);
      unsigned int v24 = *(unsigned __int16 *)(a1 + 40);
      unsigned int v25 = *(unsigned __int16 *)(a1 + 42);
      uint64_t v32 = *(void *)(a1 + 48);
      char v34 = *(unsigned char *)(a1 + 56);
      *(void *)a1 = v22;
      uint64_t v26 = *(void *)(a2 - 56);
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 48);
      *(void *)(a1 + 8) = v26;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 40);
      char v27 = *(unsigned char *)(a2 - 23);
      if (v27)
      {
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 - 24);
        char v27 = 1;
      }
      *(unsigned char *)(a1 + 41) = v27;
      char v28 = *(unsigned char *)(a2 - 21);
      if (v28)
      {
        *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 - 22);
        char v28 = 1;
      }
      *(unsigned char *)(a1 + 43) = v28;
      uint64_t v29 = *(void *)(a2 - 16);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 - 8);
      *(void *)(a1 + 48) = v29;
      *(void *)(a2 - 64) = v23;
      *(void *)(a2 - 56) = v38;
      *(_DWORD *)(a2 - 48) = v40;
      *(_OWORD *)(a2 - 40) = *(_OWORD *)&v36[4];
      if (v24 < 0x100)
      {
        *(unsigned char *)(a2 - 23) = 0;
        if (v25 >= 0x100) {
          goto LABEL_31;
        }
      }
      else
      {
        *(unsigned char *)(a2 - 24) = v24;
        *(unsigned char *)(a2 - 23) = 1;
        if (v25 >= 0x100)
        {
LABEL_31:
          *(unsigned char *)(a2 - 22) = v25;
          char v30 = 1;
          goto LABEL_32;
        }
      }
      char v30 = 0;
LABEL_32:
      *(unsigned char *)(a2 - 21) = v30;
      *(void *)(a2 - 16) = v32;
      *(unsigned char *)(a2 - 8) = v34;
      return result;
    case 3:
      sub_BF7404((uint64_t *)a1, (uint64_t *)(a1 + 64), (uint64_t *)(a2 - 64));
      return 1;
    case 4:
      sub_BF8420(a1, a1 + 64, a1 + 128, a2 - 64);
      return 1;
    case 5:
      sub_BF87F0(a1, a1 + 64, a1 + 128, a1 + 192, a2 - 64);
      return 1;
    default:
      char v6 = (uint64_t *)(a1 + 128);
      sub_BF7404((uint64_t *)a1, (uint64_t *)(a1 + 64), (uint64_t *)(a1 + 128));
      uint64_t v7 = a1 + 192;
      if (a1 + 192 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    uint64_t v10 = *(void *)v7;
    if (*(void *)v7 < *v6) {
      break;
    }
LABEL_5:
    char v6 = (uint64_t *)v7;
    v8 += 64;
    v7 += 64;
    if (v7 == a2) {
      return 1;
    }
  }
  uint64_t v37 = *(void *)(v7 + 8);
  int v39 = *(_DWORD *)(v7 + 16);
  *(_DWORD *)&v35[16] = *(_DWORD *)(v7 + 36);
  *(_OWORD *)uint64_t v35 = *(_OWORD *)(v7 + 20);
  unsigned int v11 = *(unsigned __int16 *)(v7 + 40);
  unsigned int v12 = *(unsigned __int16 *)(v7 + 42);
  uint64_t v31 = *(void *)(v7 + 48);
  char v33 = *(unsigned char *)(v7 + 56);
  uint64_t v13 = v8;
  uint64_t v14 = *v6;
  while (1)
  {
    uint64_t v15 = a1 + v13;
    uint64_t v16 = *(void *)(a1 + v13 + 136);
    *(void *)(v15 + 192) = v14;
    *(void *)(v15 + 200) = v16;
    *(_DWORD *)(v15 + 208) = *(_DWORD *)(a1 + v13 + 144);
    *(_OWORD *)(v15 + 216) = *(_OWORD *)(a1 + v13 + 152);
    char v17 = *(unsigned char *)(a1 + v13 + 169);
    if (v17)
    {
      *(unsigned char *)(v15 + 232) = *(unsigned char *)(v15 + 168);
      char v17 = 1;
    }
    *(unsigned char *)(v15 + 233) = v17;
    if (*(unsigned char *)(v15 + 171))
    {
      *(unsigned char *)(a1 + v13 + 234) = *(unsigned char *)(a1 + v13 + 170);
      char v18 = 1;
    }
    else
    {
      char v18 = 0;
    }
    uint64_t v19 = a1 + v13;
    *(unsigned char *)(v19 + 235) = v18;
    *(void *)(v19 + 240) = *(void *)(a1 + v13 + 176);
    *(unsigned char *)(v19 + 248) = *(unsigned char *)(a1 + v13 + 184);
    if (v13 == -128) {
      break;
    }
    uint64_t v14 = *(void *)(v19 + 64);
    v13 -= 64;
    if (v10 >= v14)
    {
      uint64_t v20 = a1 + v13 + 192;
      goto LABEL_17;
    }
  }
  uint64_t v20 = a1;
LABEL_17:
  *(void *)uint64_t v20 = v10;
  *(void *)(v19 + 136) = v37;
  *(_DWORD *)(v19 + 144) = v39;
  *(_OWORD *)(v19 + 152) = *(_OWORD *)&v35[4];
  if (v11 < 0x100)
  {
    *(unsigned char *)(v20 + 41) = 0;
    if (v12 >= 0x100) {
      goto LABEL_19;
    }
  }
  else
  {
    *(unsigned char *)(v20 + 40) = v11;
    *(unsigned char *)(v20 + 41) = 1;
    if (v12 >= 0x100)
    {
LABEL_19:
      *(unsigned char *)(v20 + 42) = v12;
      char v21 = 1;
      goto LABEL_20;
    }
  }
  char v21 = 0;
LABEL_20:
  *(unsigned char *)(v20 + 43) = v21;
  *(void *)(v19 + 176) = v31;
  *(unsigned char *)(v19 + 184) = v33;
  if (++v9 == 8) {
    return v7 + 64 == a2;
  }
  goto LABEL_5;
}

void sub_F60E7C(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, int a5, char **a6, double a7)
{
  int v36 = 0;
  char v39 = 0;
  char v41 = 1;
  char v45 = 0;
  double v40 = a7;
  uint64_t v37 = *a2;
  double v38 = *(double *)(a4 + 56) * 3.6;
  __int16 v46 = *(_WORD *)(a4 + 48);
  char v49 = *(unsigned char *)(a4 + 64);
  int v42 = a5;
  int v43 = a5;
  uint64_t v44 = v37;
  char v47 = *((unsigned char *)a2 + 56);
  BOOL v48 = a3 == 5;
  char v33 = 0;
  char v34 = 0;
  uint64_t v35 = 0;
  uint64_t v11 = *(void *)(a1 + 4168);
  unint64_t v12 = a2[4];
  if (*(unsigned char *)(v11 + 7774))
  {
    uint64_t v13 = sub_290DEC(v11 + 3896, v12, 1);
    if (!v13) {
      return;
    }
    uint64_t v14 = &v13[-*(int *)v13];
    if (*(unsigned __int16 *)v14 < 5u) {
      return;
    }
    uint64_t v15 = *((unsigned __int16 *)v14 + 2);
    if (!v15
      || *(_DWORD *)&v13[v15 + *(unsigned int *)&v13[v15]] <= HIDWORD(v12)
      || !sub_295DB4(v11, v12))
    {
      return;
    }
    unint64_t v12 = a2[4];
  }
  sub_ED712C(a1, v12, &v33);
  uint64_t v16 = v33;
  char v17 = v34;
  if (v33 != v34)
  {
    do
    {
      unint64_t v18 = *v16;
      uint64_t v19 = (int *)sub_2D5D58(*(void *)(a1 + 4168), *((unsigned int *)a2 + 8) | ((unint64_t)*((unsigned __int16 *)a2 + 18) << 32));
      uint64_t v20 = (unsigned __int16 *)((char *)v19 - *v19);
      if (*v20 >= 9u && (uint64_t v21 = v20[4]) != 0)
      {
        unsigned int v22 = 0;
        uint64_t v23 = a2[3];
        if (v23 != 0x7FFFFFFFFFFFFFFFLL)
        {
          unsigned int v24 = *(int *)((char *)v19 + v21);
          if (v24)
          {
            double v25 = (double)v23 / (double)v24;
            double v26 = 1000000000.0;
            if (v25 <= 1.0) {
              double v26 = v25 * 1000000000.0;
            }
            if (v25 >= 0.0) {
              double v27 = v26;
            }
            else {
              double v27 = 0.0;
            }
            unsigned int v22 = vcvtad_u64_f64(v27);
          }
        }
      }
      else
      {
        unsigned int v22 = 0;
      }
      if ((v18 & 2) != 0) {
        int v28 = v22;
      }
      else {
        int v28 = 1000000000 - v22;
      }
      __int16 v30 = *((_WORD *)a2 + 21);
      __int16 v29 = *((_WORD *)a2 + 20);
      sub_F388B8(a1, v18, (uint64_t)&v36, v28, &v30, &v29, (uint64_t)v31);
      if (a3 != 2 || !v32)
      {
        unint64_t v50 = v18;
        sub_BF6964(a6, &v50, v31);
      }
      ++v16;
    }
    while (v16 != v17);
    uint64_t v16 = v33;
  }
  if (v16)
  {
    char v34 = v16;
    operator delete(v16);
  }
}

void sub_F610EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F61110(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = result;
LABEL_2:
  unint64_t v78 = a2;
  char v79 = (uint64_t *)(a2 - 64);
  long long v76 = (uint64_t *)(a2 - 192);
  unint64_t v77 = (uint64_t *)(a2 - 128);
  uint64_t v10 = v9;
LABEL_3:
  uint64_t v11 = 1 - a4;
  while (1)
  {
    uint64_t v9 = v10;
    uint64_t v12 = a2 - v10;
    unint64_t v13 = (uint64_t)(a2 - v10) >> 6;
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v35 = *(void *)v10;
          if (*(void *)(a2 - 64) >= *(void *)v10) {
            return result;
          }
          uint64_t v94 = *(void *)(v10 + 8);
          int v98 = *(_DWORD *)(v10 + 16);
          *(_OWORD *)uint64_t v90 = *(_OWORD *)(v10 + 20);
          *(_DWORD *)&v90[16] = *(_DWORD *)(v10 + 36);
          unsigned int v36 = *(unsigned __int16 *)(v10 + 40);
          unsigned int v37 = *(unsigned __int16 *)(v10 + 42);
          uint64_t v82 = *(void *)(v10 + 48);
          char v86 = *(unsigned char *)(v10 + 56);
          *(void *)uint64_t v10 = *(void *)(a2 - 64);
          uint64_t v38 = *(void *)(a2 - 56);
          *(_DWORD *)(v10 + 16) = *(_DWORD *)(a2 - 48);
          *(void *)(v10 + 8) = v38;
          *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 - 40);
          char v39 = *(unsigned char *)(a2 - 23);
          if (v39)
          {
            *(unsigned char *)(v10 + 40) = *(unsigned char *)(a2 - 24);
            char v39 = 1;
          }
          *(unsigned char *)(v10 + 41) = v39;
          char v40 = *(unsigned char *)(a2 - 21);
          if (v40)
          {
            *(unsigned char *)(v10 + 42) = *(unsigned char *)(a2 - 22);
            char v40 = 1;
          }
          *(unsigned char *)(v10 + 43) = v40;
          uint64_t v41 = *(void *)(a2 - 16);
          *(unsigned char *)(v10 + 56) = *(unsigned char *)(a2 - 8);
          *(void *)(v10 + 48) = v41;
          *(void *)(a2 - 64) = v35;
          *(void *)(a2 - 56) = v94;
          *(_DWORD *)(a2 - 48) = v98;
          *(_OWORD *)(a2 - 40) = *(_OWORD *)&v90[4];
          if (v36 < 0x100)
          {
            *(unsigned char *)(a2 - 23) = 0;
            if (v37 >= 0x100) {
              goto LABEL_40;
            }
          }
          else
          {
            *(unsigned char *)(a2 - 24) = v36;
            *(unsigned char *)(a2 - 23) = 1;
            if (v37 >= 0x100)
            {
LABEL_40:
              *(unsigned char *)(a2 - 22) = v37;
              char v42 = 1;
              goto LABEL_41;
            }
          }
          char v42 = 0;
LABEL_41:
          *(unsigned char *)(a2 - 21) = v42;
          *(void *)(a2 - 16) = v82;
          *(unsigned char *)(a2 - 8) = v86;
          return result;
        case 3uLL:
          return sub_BF7404((uint64_t *)v10, (uint64_t *)(v10 + 64), v79);
        case 4uLL:
          return sub_BF8420(v10, v10 + 64, v10 + 128, (uint64_t)v79);
        case 5uLL:
          return sub_BF87F0(v10, v10 + 64, v10 + 128, v10 + 192, (uint64_t)v79);
        default:
          JUMPOUT(0);
      }
    }
    if (v12 <= 1535)
    {
      if (a5)
      {
        if (v10 == a2) {
          return result;
        }
        uint64_t v43 = v10 + 64;
        if (v10 + 64 == a2) {
          return result;
        }
        uint64_t v44 = 0;
        uint64_t v45 = v10;
        while (2)
        {
          uint64_t v47 = v43;
          uint64_t v48 = *(void *)(v45 + 64);
          if (v48 < *(void *)v45)
          {
            uint64_t v95 = *(void *)(v45 + 72);
            int v99 = *(_DWORD *)(v45 + 80);
            *(_DWORD *)&v91[16] = *(_DWORD *)(v45 + 100);
            *(_OWORD *)uint64_t v91 = *(_OWORD *)(v45 + 84);
            unsigned int v49 = *(unsigned __int16 *)(v45 + 104);
            unsigned int v50 = *(unsigned __int16 *)(v45 + 106);
            uint64_t v83 = *(void *)(v45 + 112);
            char v87 = *(unsigned char *)(v45 + 120);
            uint64_t v51 = v44;
            uint64_t v52 = *(void *)v45;
            while (1)
            {
              uint64_t v53 = v10 + v51;
              BOOL result = *(void *)(v10 + v51 + 8);
              *(void *)(v53 + 64) = v52;
              *(void *)(v53 + 72) = result;
              *(_DWORD *)(v53 + 80) = *(_DWORD *)(v10 + v51 + 16);
              *(_OWORD *)(v53 + 88) = *(_OWORD *)(v10 + v51 + 24);
              char v54 = *(unsigned char *)(v10 + v51 + 41);
              if (v54)
              {
                *(unsigned char *)(v53 + 104) = *(unsigned char *)(v53 + 40);
                char v54 = 1;
              }
              *(unsigned char *)(v53 + 105) = v54;
              if (*(unsigned char *)(v53 + 43))
              {
                *(unsigned char *)(v10 + v51 + 106) = *(unsigned char *)(v10 + v51 + 42);
                char v55 = 1;
              }
              else
              {
                char v55 = 0;
              }
              uint64_t v56 = v10 + v51;
              *(unsigned char *)(v56 + 107) = v55;
              *(void *)(v56 + 112) = *(void *)(v10 + v51 + 48);
              *(unsigned char *)(v56 + 120) = *(unsigned char *)(v10 + v51 + 56);
              if (!v51) {
                break;
              }
              uint64_t v52 = *(void *)(v56 - 64);
              v51 -= 64;
              if (v48 >= v52)
              {
                uint64_t v57 = v10 + v51 + 64;
                goto LABEL_69;
              }
            }
            uint64_t v57 = v10;
LABEL_69:
            *(void *)uint64_t v57 = v48;
            *(_DWORD *)(v56 + 16) = v99;
            *(void *)(v56 + 8) = v95;
            *(_OWORD *)(v56 + 24) = *(_OWORD *)&v91[4];
            if (v49 < 0x100)
            {
              *(unsigned char *)(v57 + 41) = 0;
              if (v50 >= 0x100) {
                goto LABEL_55;
              }
LABEL_71:
              char v46 = 0;
            }
            else
            {
              *(unsigned char *)(v57 + 40) = v49;
              *(unsigned char *)(v57 + 41) = 1;
              if (v50 < 0x100) {
                goto LABEL_71;
              }
LABEL_55:
              *(unsigned char *)(v57 + 42) = v50;
              char v46 = 1;
            }
            *(unsigned char *)(v57 + 43) = v46;
            *(unsigned char *)(v56 + 56) = v87;
            *(void *)(v56 + 48) = v83;
          }
          uint64_t v43 = v47 + 64;
          v44 += 64;
          uint64_t v45 = v47;
          if (v47 + 64 == a2) {
            return result;
          }
          continue;
        }
      }
      if (v10 == a2) {
        return result;
      }
      uint64_t v63 = v10 + 64;
      if (v10 + 64 == a2) {
        return result;
      }
      uint64_t v64 = v10 + 112;
      while (2)
      {
        uint64_t v66 = v63;
        uint64_t v67 = *(void *)(v9 + 64);
        if (v67 < *(void *)v9)
        {
          uint64_t v96 = *(void *)(v9 + 72);
          int v100 = *(_DWORD *)(v9 + 80);
          *(_DWORD *)&v92[16] = *(_DWORD *)(v9 + 100);
          *(_OWORD *)uint64_t v92 = *(_OWORD *)(v9 + 84);
          unsigned int v68 = *(unsigned __int16 *)(v9 + 104);
          unsigned int v69 = *(unsigned __int16 *)(v9 + 106);
          uint64_t v84 = *(void *)(v9 + 112);
          char v88 = *(unsigned char *)(v9 + 120);
          uint64_t v70 = v64;
          uint64_t v71 = *(void *)v9;
          do
          {
            uint64_t v72 = *(void *)(v70 - 104);
            *(void *)(v70 - 48) = v71;
            *(void *)(v70 - 40) = v72;
            *(_DWORD *)(v70 - 32) = *(_DWORD *)(v70 - 96);
            *(_OWORD *)(v70 - 24) = *(_OWORD *)(v70 - 88);
            char v73 = *(unsigned char *)(v70 - 71);
            if (v73)
            {
              *(unsigned char *)(v70 - 8) = *(unsigned char *)(v70 - 72);
              char v73 = 1;
            }
            *(unsigned char *)(v70 - 7) = v73;
            char v74 = *(unsigned char *)(v70 - 69);
            if (v74)
            {
              *(unsigned char *)(v70 - 6) = *(unsigned char *)(v70 - 70);
              char v74 = 1;
            }
            *(unsigned char *)(v70 - 5) = v74;
            uint64_t v75 = v70 - 64;
            *(void *)uint64_t v70 = *(void *)(v70 - 64);
            *(unsigned char *)(v70 + 8) = *(unsigned char *)(v70 - 56);
            uint64_t v71 = *(void *)(v70 - 176);
            v70 -= 64;
          }
          while (v67 < v71);
          *(void *)(v75 - 48) = v67;
          *(_DWORD *)(v75 - 32) = v100;
          *(void *)(v75 - 40) = v96;
          *(_OWORD *)(v75 - 24) = *(_OWORD *)&v92[4];
          if (v68 < 0x100)
          {
            *(unsigned char *)(v75 - 7) = 0;
            if (v69 >= 0x100) {
              goto LABEL_83;
            }
LABEL_95:
            char v65 = 0;
          }
          else
          {
            *(unsigned char *)(v75 - 8) = v68;
            *(unsigned char *)(v75 - 7) = 1;
            if (v69 < 0x100) {
              goto LABEL_95;
            }
LABEL_83:
            *(unsigned char *)(v75 - 6) = v69;
            char v65 = 1;
          }
          *(unsigned char *)(v75 - 5) = v65;
          *(unsigned char *)(v75 + 8) = v88;
          *(void *)uint64_t v75 = v84;
        }
        uint64_t v63 = v66 + 64;
        v64 += 64;
        uint64_t v9 = v66;
        if (v66 + 64 == a2) {
          return result;
        }
        continue;
      }
    }
    uint64_t v14 = v11;
    if (v11 == 1) {
      break;
    }
    unint64_t v15 = v13 >> 1;
    uint64_t v16 = (uint64_t *)(v10 + (v13 >> 1 << 6));
    if ((unint64_t)v12 <= 0x2000)
    {
      sub_BF7404(v16, (uint64_t *)v10, v79);
      if (a5) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    sub_BF7404((uint64_t *)v10, v16, v79);
    uint64_t v17 = v10 + (v15 << 6);
    sub_BF7404((uint64_t *)(v10 + 64), (uint64_t *)(v17 - 64), v77);
    sub_BF7404((uint64_t *)(v10 + 128), (uint64_t *)(v10 + 64 + (v15 << 6)), v76);
    sub_BF7404((uint64_t *)(v17 - 64), v16, (uint64_t *)(v10 + 64 + (v15 << 6)));
    uint64_t v18 = *(void *)v10;
    uint64_t v93 = *(void *)(v10 + 8);
    int v97 = *(_DWORD *)(v10 + 16);
    *(_DWORD *)&v89[16] = *(_DWORD *)(v10 + 36);
    *(_OWORD *)uint64_t v89 = *(_OWORD *)(v10 + 20);
    unsigned int v19 = *(unsigned __int16 *)(v10 + 40);
    unsigned int v20 = *(unsigned __int16 *)(v10 + 42);
    uint64_t v81 = *(void *)(v10 + 48);
    char v85 = *(unsigned char *)(v10 + 56);
    int v22 = *(unsigned __int8 *)(v17 + 41);
    uint64_t v21 = (unsigned char *)(v17 + 41);
    uint64_t v23 = *(void *)(v21 - 33);
    int v24 = *(_DWORD *)(v21 - 25);
    *(void *)uint64_t v10 = *v16;
    *(void *)(v10 + 8) = v23;
    *(_DWORD *)(v10 + 16) = v24;
    *(_OWORD *)(v10 + 24) = *(_OWORD *)(v21 - 17);
    if (v22)
    {
      *(unsigned char *)(v10 + 40) = *(unsigned char *)(v10 + (v15 << 6) + 40);
      *(unsigned char *)(v10 + 41) = 1;
      uint64_t v25 = v10 + (v15 << 6);
      double v26 = (char *)(v25 + 43);
      char v27 = *(unsigned char *)(v25 + 43);
      a2 = v78;
      if (!v27) {
        goto LABEL_12;
      }
LABEL_11:
      *(unsigned char *)(v10 + 42) = *(unsigned char *)(v25 + 42);
      char v27 = 1;
      goto LABEL_12;
    }
    *(unsigned char *)(v10 + 41) = 0;
    uint64_t v25 = v10 + (v15 << 6);
    double v26 = (char *)(v25 + 43);
    char v27 = *(unsigned char *)(v25 + 43);
    a2 = v78;
    if (v27) {
      goto LABEL_11;
    }
LABEL_12:
    uint64_t v29 = *(void *)(v25 + 48);
    uint64_t v28 = v25 + 48;
    *(unsigned char *)(v10 + 43) = v27;
    char v30 = *(unsigned char *)(v28 + 8);
    *(void *)(v10 + 48) = v29;
    *(unsigned char *)(v10 + 56) = v30;
    *uint64_t v16 = v18;
    *(_DWORD *)(v21 - 25) = v97;
    *(void *)(v21 - 33) = v93;
    *(_OWORD *)(v21 - 17) = *(_OWORD *)&v89[4];
    if (v19 < 0x100)
    {
      *uint64_t v21 = 0;
      if (v20 >= 0x100)
      {
LABEL_14:
        *(unsigned char *)(v10 + (v15 << 6) + 42) = v20;
        char v31 = 1;
        goto LABEL_15;
      }
    }
    else
    {
      *(unsigned char *)(v10 + (v15 << 6) + 40) = v19;
      *uint64_t v21 = 1;
      if (v20 >= 0x100) {
        goto LABEL_14;
      }
    }
    char v31 = 0;
LABEL_15:
    *double v26 = v31;
    *(unsigned char *)(v28 + 8) = v85;
    *(void *)uint64_t v28 = v81;
    if (a5) {
      goto LABEL_19;
    }
LABEL_18:
    if (*(void *)(v10 - 64) >= *(void *)v10)
    {
      BOOL result = (uint64_t)sub_BF7A18((uint64_t *)v10, a2);
      uint64_t v10 = result;
      goto LABEL_29;
    }
LABEL_19:
    unint64_t v32 = sub_BF7D00((uint64_t *)v10, a2);
    if ((v33 & 1) == 0) {
      goto LABEL_27;
    }
    BOOL v34 = sub_F61A24(v10, v32);
    uint64_t v10 = v32 + 64;
    BOOL result = sub_F61A24(v32 + 64, a2);
    if (result)
    {
      a4 = -v14;
      a2 = v32;
      if (v34) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v11 = v14 + 1;
    if (!v34)
    {
LABEL_27:
      BOOL result = sub_F61110(v9, v32, a3, -v14, a5 & 1);
      uint64_t v10 = v32 + 64;
LABEL_29:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  if (v10 != a2)
  {
    unint64_t v58 = (v13 - 2) >> 1;
    unint64_t v59 = v58 + 1;
    uint64_t v60 = (void *)(v10 + (v58 << 6));
    do
    {
      sub_BF8CFC(v10, a3, (uint64_t)(a2 - v10) >> 6, v60);
      v60 -= 8;
      --v59;
    }
    while (v59);
    unint64_t v61 = (unint64_t)v12 >> 6;
    do
    {
      BOOL result = sub_BF8EF0(v10, a2, a3, v61);
      a2 -= 64;
    }
    while (v61-- > 2);
  }
  return result;
}

BOOL sub_F61A24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 6;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v22 = *(void *)(a2 - 64);
      uint64_t v23 = *(void *)a1;
      if (v22 >= *(void *)a1) {
        return result;
      }
      uint64_t v38 = *(void *)(a1 + 8);
      int v40 = *(_DWORD *)(a1 + 16);
      *(_OWORD *)unsigned int v36 = *(_OWORD *)(a1 + 20);
      *(_DWORD *)&v36[16] = *(_DWORD *)(a1 + 36);
      unsigned int v24 = *(unsigned __int16 *)(a1 + 40);
      unsigned int v25 = *(unsigned __int16 *)(a1 + 42);
      uint64_t v32 = *(void *)(a1 + 48);
      char v34 = *(unsigned char *)(a1 + 56);
      *(void *)a1 = v22;
      uint64_t v26 = *(void *)(a2 - 56);
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 48);
      *(void *)(a1 + 8) = v26;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 40);
      char v27 = *(unsigned char *)(a2 - 23);
      if (v27)
      {
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 - 24);
        char v27 = 1;
      }
      *(unsigned char *)(a1 + 41) = v27;
      char v28 = *(unsigned char *)(a2 - 21);
      if (v28)
      {
        *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 - 22);
        char v28 = 1;
      }
      *(unsigned char *)(a1 + 43) = v28;
      uint64_t v29 = *(void *)(a2 - 16);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 - 8);
      *(void *)(a1 + 48) = v29;
      *(void *)(a2 - 64) = v23;
      *(void *)(a2 - 56) = v38;
      *(_DWORD *)(a2 - 48) = v40;
      *(_OWORD *)(a2 - 40) = *(_OWORD *)&v36[4];
      if (v24 < 0x100)
      {
        *(unsigned char *)(a2 - 23) = 0;
        if (v25 >= 0x100) {
          goto LABEL_31;
        }
      }
      else
      {
        *(unsigned char *)(a2 - 24) = v24;
        *(unsigned char *)(a2 - 23) = 1;
        if (v25 >= 0x100)
        {
LABEL_31:
          *(unsigned char *)(a2 - 22) = v25;
          char v30 = 1;
          goto LABEL_32;
        }
      }
      char v30 = 0;
LABEL_32:
      *(unsigned char *)(a2 - 21) = v30;
      *(void *)(a2 - 16) = v32;
      *(unsigned char *)(a2 - 8) = v34;
      return result;
    case 3:
      sub_BF7404((uint64_t *)a1, (uint64_t *)(a1 + 64), (uint64_t *)(a2 - 64));
      return 1;
    case 4:
      sub_BF8420(a1, a1 + 64, a1 + 128, a2 - 64);
      return 1;
    case 5:
      sub_BF87F0(a1, a1 + 64, a1 + 128, a1 + 192, a2 - 64);
      return 1;
    default:
      char v6 = (uint64_t *)(a1 + 128);
      sub_BF7404((uint64_t *)a1, (uint64_t *)(a1 + 64), (uint64_t *)(a1 + 128));
      uint64_t v7 = a1 + 192;
      if (a1 + 192 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    uint64_t v10 = *(void *)v7;
    if (*(void *)v7 < *v6) {
      break;
    }
LABEL_5:
    char v6 = (uint64_t *)v7;
    v8 += 64;
    v7 += 64;
    if (v7 == a2) {
      return 1;
    }
  }
  uint64_t v37 = *(void *)(v7 + 8);
  int v39 = *(_DWORD *)(v7 + 16);
  *(_DWORD *)&v35[16] = *(_DWORD *)(v7 + 36);
  *(_OWORD *)uint64_t v35 = *(_OWORD *)(v7 + 20);
  unsigned int v11 = *(unsigned __int16 *)(v7 + 40);
  unsigned int v12 = *(unsigned __int16 *)(v7 + 42);
  uint64_t v31 = *(void *)(v7 + 48);
  char v33 = *(unsigned char *)(v7 + 56);
  uint64_t v13 = v8;
  uint64_t v14 = *v6;
  while (1)
  {
    uint64_t v15 = a1 + v13;
    uint64_t v16 = *(void *)(a1 + v13 + 136);
    *(void *)(v15 + 192) = v14;
    *(void *)(v15 + 200) = v16;
    *(_DWORD *)(v15 + 208) = *(_DWORD *)(a1 + v13 + 144);
    *(_OWORD *)(v15 + 216) = *(_OWORD *)(a1 + v13 + 152);
    char v17 = *(unsigned char *)(a1 + v13 + 169);
    if (v17)
    {
      *(unsigned char *)(v15 + 232) = *(unsigned char *)(v15 + 168);
      char v17 = 1;
    }
    *(unsigned char *)(v15 + 233) = v17;
    if (*(unsigned char *)(v15 + 171))
    {
      *(unsigned char *)(a1 + v13 + 234) = *(unsigned char *)(a1 + v13 + 170);
      char v18 = 1;
    }
    else
    {
      char v18 = 0;
    }
    uint64_t v19 = a1 + v13;
    *(unsigned char *)(v19 + 235) = v18;
    *(void *)(v19 + 240) = *(void *)(a1 + v13 + 176);
    *(unsigned char *)(v19 + 248) = *(unsigned char *)(a1 + v13 + 184);
    if (v13 == -128) {
      break;
    }
    uint64_t v14 = *(void *)(v19 + 64);
    v13 -= 64;
    if (v10 >= v14)
    {
      uint64_t v20 = a1 + v13 + 192;
      goto LABEL_17;
    }
  }
  uint64_t v20 = a1;
LABEL_17:
  *(void *)uint64_t v20 = v10;
  *(void *)(v19 + 136) = v37;
  *(_DWORD *)(v19 + 144) = v39;
  *(_OWORD *)(v19 + 152) = *(_OWORD *)&v35[4];
  if (v11 < 0x100)
  {
    *(unsigned char *)(v20 + 41) = 0;
    if (v12 >= 0x100) {
      goto LABEL_19;
    }
  }
  else
  {
    *(unsigned char *)(v20 + 40) = v11;
    *(unsigned char *)(v20 + 41) = 1;
    if (v12 >= 0x100)
    {
LABEL_19:
      *(unsigned char *)(v20 + 42) = v12;
      char v21 = 1;
      goto LABEL_20;
    }
  }
  char v21 = 0;
LABEL_20:
  *(unsigned char *)(v20 + 43) = v21;
  *(void *)(v19 + 176) = v31;
  *(unsigned char *)(v19 + 184) = v33;
  if (++v9 == 8) {
    return v7 + 64 == a2;
  }
  goto LABEL_5;
}

void *sub_F61E54(void **a1, uint64_t a2, uint64_t *a3)
{
  char v5 = (char *)*a1;
  uint64_t v4 = (char *)a1[1];
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666) {
    sub_2E00();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - v5) >> 3) > v7) {
    unint64_t v7 = 0x999999999999999ALL * (((unsigned char *)a1[2] - v5) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - v5) >> 3) >= 0x333333333333333) {
    unint64_t v10 = 0x666666666666666;
  }
  else {
    unint64_t v10 = v7;
  }
  if (v10)
  {
    if (v10 > 0x666666666666666) {
      sub_188D718();
    }
    unsigned int v11 = operator new(40 * v10);
  }
  else
  {
    unsigned int v11 = 0;
  }
  unint64_t v29 = v6;
  unsigned int v12 = &v11[5 * v6];
  uint64_t v13 = (char *)&v11[5 * v10];
  uint64_t v28 = *a3;
  v12[1] = 0;
  v12[2] = 0;
  void *v12 = 0;
  uint64_t v15 = *(const void **)a2;
  uint64_t v14 = *(void *)(a2 + 8);
  int64_t v16 = v14 - *(void *)a2;
  if (v14 != *(void *)a2)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v16 >> 4) > 0x333333333333333) {
      sub_2E00();
    }
    char v17 = (char *)operator new(v16);
    void *v12 = v17;
    v12[1] = v17;
    v12[2] = &v17[16 * (v16 >> 4)];
    size_t v18 = 80 * ((v16 - 80) / 0x50uLL) + 80;
    memcpy(v17, v15, v18);
    v12[1] = &v17[v18];
  }
  v12[3] = *(void *)(a2 + 24);
  v11[5 * v29 + 4] = v28;
  uint64_t v19 = v12 + 5;
  if (v4 == v5)
  {
    *a1 = v12;
    a1[1] = v19;
    a1[2] = v13;
  }
  else
  {
    unint64_t v20 = 0;
    do
    {
      char v21 = &v12[v20 / 8];
      uint64_t v22 = &v4[v20];
      *(v21 - 4) = 0;
      *(v21 - 3) = 0;
      *(_OWORD *)(v21 - 5) = *(_OWORD *)&v4[v20 - 40];
      *(v21 - 3) = *(void *)&v4[v20 - 24];
      *((void *)v22 - 5) = 0;
      *((void *)v22 - 4) = 0;
      *((void *)v22 - 3) = 0;
      *(v21 - 2) = *(void *)&v4[v20 - 16];
      *(v21 - 1) = *(void *)&v4[v20 - 8];
      v20 -= 40;
    }
    while (&v4[v20] != v5);
    uint64_t v23 = (char *)*a1;
    uint64_t v4 = (char *)a1[1];
    uint64_t v19 = v12 + 5;
    *a1 = &v12[v20 / 8];
    a1[1] = v12 + 5;
    a1[2] = v13;
    if (v4 != v23)
    {
      unsigned int v24 = v4;
      do
      {
        uint64_t v26 = (void *)*((void *)v24 - 5);
        v24 -= 40;
        unsigned int v25 = v26;
        if (v26)
        {
          *((void *)v4 - 4) = v25;
          operator delete(v25);
        }
        uint64_t v4 = v24;
      }
      while (v24 != v23);
      uint64_t v4 = v23;
    }
  }
  if (v4) {
    operator delete(v4);
  }
  return v19;
}

void sub_F620C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  unint64_t v6 = *(void **)v4;
  if (*(void *)v4)
  {
    *(void *)(v4 + 8) = v6;
    operator delete(v6);
  }
  sub_481FD4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_F620E8(void *a1, void *a2)
{
  a1[520] = sub_3750CC(a2);
  a1[521] = sub_3750CC(a2);
  a1[522] = sub_376F8C(a2);
  return a1;
}

void sub_F6213C(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)v1[517];
  if (v3)
  {
    v1[518] = v3;
    operator delete(v3);
  }
  sub_3A6318(v1 + 1);
  _Unwind_Resume(a1);
}

void sub_F62160(_Unwind_Exception *a1)
{
  sub_C62E9C(v1);
  _Unwind_Resume(a1);
}

void *sub_F62174(void **a1, uint64_t a2, uint64_t *a3)
{
  char v5 = (char *)*a1;
  uint64_t v4 = (char *)a1[1];
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666) {
    sub_2E00();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - v5) >> 3) > v7) {
    unint64_t v7 = 0x999999999999999ALL * (((unsigned char *)a1[2] - v5) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - v5) >> 3) >= 0x333333333333333) {
    unint64_t v10 = 0x666666666666666;
  }
  else {
    unint64_t v10 = v7;
  }
  if (v10)
  {
    if (v10 > 0x666666666666666) {
      sub_188D718();
    }
    unsigned int v11 = operator new(40 * v10);
  }
  else
  {
    unsigned int v11 = 0;
  }
  unint64_t v29 = v6;
  unsigned int v12 = &v11[5 * v6];
  uint64_t v13 = (char *)&v11[5 * v10];
  uint64_t v28 = *a3;
  v12[1] = 0;
  v12[2] = 0;
  void *v12 = 0;
  uint64_t v15 = *(const void **)a2;
  uint64_t v14 = *(void *)(a2 + 8);
  int64_t v16 = v14 - *(void *)a2;
  if (v14 != *(void *)a2)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v16 >> 4) > 0x333333333333333) {
      sub_2E00();
    }
    char v17 = (char *)operator new(v16);
    void *v12 = v17;
    v12[1] = v17;
    v12[2] = &v17[16 * (v16 >> 4)];
    size_t v18 = 80 * ((v16 - 80) / 0x50uLL) + 80;
    memcpy(v17, v15, v18);
    v12[1] = &v17[v18];
  }
  v12[3] = *(void *)(a2 + 24);
  v11[5 * v29 + 4] = v28;
  uint64_t v19 = v12 + 5;
  if (v4 == v5)
  {
    *a1 = v12;
    a1[1] = v19;
    a1[2] = v13;
  }
  else
  {
    unint64_t v20 = 0;
    do
    {
      char v21 = &v12[v20 / 8];
      uint64_t v22 = &v4[v20];
      *(v21 - 4) = 0;
      *(v21 - 3) = 0;
      *(_OWORD *)(v21 - 5) = *(_OWORD *)&v4[v20 - 40];
      *(v21 - 3) = *(void *)&v4[v20 - 24];
      *((void *)v22 - 5) = 0;
      *((void *)v22 - 4) = 0;
      *((void *)v22 - 3) = 0;
      *(v21 - 2) = *(void *)&v4[v20 - 16];
      *(v21 - 1) = *(void *)&v4[v20 - 8];
      v20 -= 40;
    }
    while (&v4[v20] != v5);
    uint64_t v23 = (char *)*a1;
    uint64_t v4 = (char *)a1[1];
    uint64_t v19 = v12 + 5;
    *a1 = &v12[v20 / 8];
    a1[1] = v12 + 5;
    a1[2] = v13;
    if (v4 != v23)
    {
      unsigned int v24 = v4;
      do
      {
        uint64_t v26 = (void *)*((void *)v24 - 5);
        v24 -= 40;
        unsigned int v25 = v26;
        if (v26)
        {
          *((void *)v4 - 4) = v25;
          operator delete(v25);
        }
        uint64_t v4 = v24;
      }
      while (v24 != v23);
      uint64_t v4 = v23;
    }
  }
  if (v4) {
    operator delete(v4);
  }
  return v19;
}

void sub_F623E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  unint64_t v6 = *(void **)v4;
  if (*(void *)v4)
  {
    *(void *)(v4 + 8) = v6;
    operator delete(v6);
  }
  sub_481FD4((uint64_t)va);
  _Unwind_Resume(a1);
}

char **sub_F62408(uint64_t *a1, char **a2, char *a3, uint64_t **a4)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 != v7)
  {
    uint64_t v8 = *a4;
    do
    {
      double v9 = sub_2954EC(*v8, (HIDWORD(*(void *)v6) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(*(void *)v6) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((*(void *)v6 >> 1) & 1) << 48)) ^ 0x1000000000000, (uint64_t)&v14);
      LODWORD(v9) = *(_DWORD *)(v6 + 8);
      uint64_t v10 = sub_47F36C((uint64_t)&v14, 1, (double)*(unint64_t *)&v9 / 1000000000.0);
      int v12 = v11;
      if (__p)
      {
        int64_t v16 = __p;
        operator delete(__p);
      }
      uint64_t v14 = v10;
      LODWORD(__p) = v12;
      a3 = sub_32ACC(a2, (uint64_t)a3, (uint64_t)&v14) + 12;
      v6 += 80;
    }
    while (v6 != v7);
  }
  return a2;
}

void sub_F624F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char **sub_F62514(uint64_t *a1, char **a2, char *a3, uint64_t **a4)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 != v7)
  {
    uint64_t v8 = *a4;
    do
    {
      double v9 = sub_2954EC(*v8, (HIDWORD(*(void *)v6) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(*(void *)v6) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((*(void *)v6 >> 1) & 1) << 48)) ^ 0x1000000000000, (uint64_t)&v14);
      LODWORD(v9) = *(_DWORD *)(v6 + 8);
      uint64_t v10 = sub_47F36C((uint64_t)&v14, 1, (double)*(unint64_t *)&v9 / 1000000000.0);
      int v12 = v11;
      if (__p)
      {
        int64_t v16 = __p;
        operator delete(__p);
      }
      uint64_t v14 = v10;
      LODWORD(__p) = v12;
      a3 = sub_32ACC(a2, (uint64_t)a3, (uint64_t)&v14) + 12;
      v6 += 80;
    }
    while (v6 != v7);
  }
  return a2;
}

void sub_F62604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char **sub_F62620(unsigned int **a1, char **a2, char *a3, uint64_t **a4)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 != v7)
  {
    uint64_t v8 = *a4;
    do
    {
      double v9 = sub_2954EC(*v8, (((unint64_t)(v6[1] & 0x10000000) << 20) | ((unint64_t)(unsigned __int16)v6[1] << 32) | *v6) ^ 0x1000000000000, (uint64_t)&v14);
      LODWORD(v9) = v6[2];
      uint64_t v10 = sub_47F36C((uint64_t)&v14, 1, (double)*(unint64_t *)&v9 / 1000000000.0);
      int v12 = v11;
      if (__p)
      {
        int64_t v16 = __p;
        operator delete(__p);
      }
      uint64_t v14 = v10;
      LODWORD(__p) = v12;
      a3 = sub_32ACC(a2, (uint64_t)a3, (uint64_t)&v14) + 12;
      v6 += 20;
    }
    while (v6 != v7);
  }
  return a2;
}

void sub_F62710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_F6272C()
{
  unk_25FCF8F = 16641;
  word_25FCF78 = 65;
  byte_25FCFA7 = 1;
  byte_25FCF91 = 0;
}

void sub_F62754()
{
  uint64_t v0 = __chkstk_darwin();
  __int32 v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  v6->i64[0] = 0;
  v6->i64[1] = 0;
  uint64_t v215 = v6;
  v6[1].i64[0] = 0;
  sub_F04800(v0);
  long long v216 = *(uint64_t **)(v4 + 8);
  v219 = *(int **)(v4 + 16);
  unint64_t v220 = *(int32x2_t **)v4;
  int v7 = **(_DWORD **)(v4 + 24);
  int v218 = *(unsigned __int8 *)(v4 + 32);
  uint64_t v8 = *(void **)v5;
  double v9 = *(void **)(v5 + 16);
  *(void *)uint64_t v232 = operator new(0x28uLL);
  *(_OWORD *)&v232[8] = xmmword_20B8FD0;
  strcpy(*(char **)v232, "enable_rerouting_onto_original_route");
  BOOL v10 = sub_29D62C(v9, (uint64_t)v232);
  LODWORD(v228[0]) = v7;
  long long v240 = 0u;
  long long v241 = 0u;
  long long v242 = 0u;
  long long v243 = 0u;
  uint64_t v244 = 0;
  uint64_t v230 = 0;
  sub_F5C7F8(v247, v8);
  v229[0] = sub_EA9060(v216);
  int v11 = (long long *)sub_EA904C(v216);
  uint64_t v12 = *((void *)&v240 + 1);
  if (*((void *)&v240 + 1) >= (unint64_t)v241)
  {
    uint64_t v14 = sub_F640D8((void **)&v240, v229, v11);
  }
  else
  {
    uint64_t v13 = v229[0];
    **((void **)&v240 + 1) = 0;
    *(void *)(v12 + 8) = 0;
    *(void *)(v12 + 16) = 0;
    *(void *)(v12 + 24) = -1;
    *(void *)&long long v235 = v13;
    sub_BF6964((char **)v12, &v235, v11);
    uint64_t v14 = (char *)(v12 + 32);
  }
  *((void *)&v240 + 1) = v14;
  sub_29603C((void **)&v241 + 1, &v230);
  unint64_t v15 = sub_EA9060(v216);
  *(void *)&long long v235 = v15 | ((HIDWORD(v15) & 0xFFFFFFF | (v15 >> 31) & 0x60000000 | (((v15 & 0x6000000000000000) == 0x4000000000000000) << 31)) << 32);
  sub_29603C((void **)&v243, &v235);
  uint64_t v214 = v4;
  if (v10)
  {
    uint64_t v213 = v5;
    __int32 v212 = v2;
    uint64_t v16 = nullsub_1(v216);
    char v17 = *(void **)v16;
    long long v217 = *(void **)(v16 + 8);
    if (*(void **)v16 != v217)
    {
      while (1)
      {
        uint64_t v224 = (int32x2_t *)sub_F5C828((uint64_t)v247, (uint64_t)v17, v219, (int *)v228, v218, 0);
        uint64_t v221 = sub_EB2E84((uint64_t)v17);
        if (v221) {
          break;
        }
LABEL_7:
        uint64_t v230 = (void *)vadd_s32((int32x2_t)v230, v224[2]);
        v17 += 60;
        if (v17 == v217) {
          goto LABEL_131;
        }
      }
      unint64_t v18 = 0;
      while (!v18 || (*(unsigned char *)(sub_EB25CC((uint64_t)v17, v18 - 1) + 99) & 0x20) != 0)
      {
LABEL_61:
        uint64_t v66 = (uint64_t *)*v220;
        uint64_t v67 = (unsigned int *)v220[1];
        unint64_t v68 = v18 + 1;
        if ((unsigned int *)*v220 != v67)
        {
          do
          {
            if (*v66 != sub_EB249C(v17, v18)
              || sub_EB2FB4((uint64_t)v17, v18) > *((_DWORD *)v66 + 2)
              || *((_DWORD *)v66 + 2) > sub_EB2FC8((uint64_t)v17, v18))
            {
              goto LABEL_65;
            }
            *((void *)&v235 + 1) = 0;
            *(void *)&long long v236 = 0;
            BYTE8(v236) = 0;
            *(void *)&long long v237 = 0x3FF0000000000000;
            BYTE8(v237) = 1;
            LOBYTE(v239) = 0;
            long long v238 = 0uLL;
            *(_DWORD *)((char *)&v239 + 2) = 36000;
            BYTE6(v239) = 0;
            LODWORD(v235) = *((_DWORD *)v66 + 2);
            int32x2_t v70 = v224[4];
            uint64_t v71 = (_DWORD *)(*(void *)&v70 + 16 * v68);
            uint64_t v72 = (_DWORD *)(*(void *)&v70 + 16 * v18);
            double v73 = (double)v235 / 1000000000.0;
            double v74 = v73 * (double)(*v71 - *v72);
            if (v74 >= 0.0)
            {
              if (v74 >= 4.50359963e15) {
                goto LABEL_77;
              }
              uint64_t v75 = (uint64_t)(v74 + v74) + 1;
            }
            else
            {
              if (v74 <= -4.50359963e15) {
                goto LABEL_77;
              }
              uint64_t v75 = (uint64_t)(v74 + v74);
              if (v75 >= 1) {
                --v75;
              }
            }
            double v74 = (double)(v75 >> 1);
LABEL_77:
            double v76 = v73 * (double)(v71[1] - v72[1]);
            if (v76 >= 0.0)
            {
              if (v76 >= 4.50359963e15) {
                goto LABEL_85;
              }
              uint64_t v77 = (uint64_t)(v76 + v76) + 1;
            }
            else
            {
              if (v76 <= -4.50359963e15) {
                goto LABEL_85;
              }
              uint64_t v77 = (uint64_t)(v76 + v76);
              if (v77 >= 1) {
                --v77;
              }
            }
            double v76 = (double)(v77 >> 1);
LABEL_85:
            unint64_t v78 = (void *)*((void *)&v240 + 1);
            if (*((void *)&v240 + 1) >= (unint64_t)v241)
            {
              uint64_t v83 = sub_F64450((void **)&v240, v66, &v235);
            }
            else
            {
              uint64_t v79 = *v66;
              **((void **)&v240 + 1) = 0;
              v78[1] = 0;
              v78[2] = 0;
              v78[3] = -1;
              unsigned int v80 = (char *)operator new(0x50uLL);
              long long v81 = v237;
              *(_OWORD *)(v80 + 56) = v238;
              *(_OWORD *)(v80 + 40) = v81;
              long long v82 = v235;
              *(_OWORD *)(v80 + 24) = v236;
              *(void *)unsigned int v80 = v79;
              *((void *)v80 + 9) = v239;
              *(_OWORD *)(v80 + 8) = v82;
              v78[1] = v80 + 80;
              v78[2] = v80 + 80;
              uint64_t v83 = (char *)(v78 + 4);
              void *v78 = v80;
            }
            *((void *)&v240 + 1) = v83;
            unint64_t v84 = (v230 + *(_DWORD *)(*(void *)&v224[4] + 16 * v18) + v74) | ((unint64_t)(HIDWORD(v230) + *(_DWORD *)(*(void *)&v224[4] + 16 * v18 + 4) + (int)v76) << 32);
            char v85 = (unsigned char *)v242;
            if ((unint64_t)v242 < *((void *)&v242 + 1))
            {
              *(void *)long long v242 = v84;
              uint64_t v86 = (uint64_t)(v85 + 8);
              goto LABEL_110;
            }
            char v87 = (unsigned char *)*((void *)&v241 + 1);
            uint64_t v88 = v242 - *((void *)&v241 + 1);
            uint64_t v89 = (uint64_t)(v242 - *((void *)&v241 + 1)) >> 3;
            unint64_t v90 = v89 + 1;
            if ((unint64_t)(v89 + 1) >> 61) {
              sub_2E00();
            }
            uint64_t v91 = *((void *)&v242 + 1) - *((void *)&v241 + 1);
            if ((uint64_t)(*((void *)&v242 + 1) - *((void *)&v241 + 1)) >> 2 > v90) {
              unint64_t v90 = v91 >> 2;
            }
            if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v92 = v90;
            }
            if (v92)
            {
              if (v92 >> 61) {
                sub_188D718();
              }
              unint64_t v93 = v92;
              uint64_t v94 = operator new(8 * v92);
              unint64_t v92 = v93;
              uint64_t v95 = (unint64_t *)&v94[8 * v89];
              unint64_t *v95 = v84;
              uint64_t v86 = (uint64_t)(v95 + 1);
              if (v85 == v87) {
                goto LABEL_108;
              }
LABEL_101:
              unint64_t v96 = v85 - 8 - v87;
              if (v96 < 0x58) {
                goto LABEL_282;
              }
              if ((unint64_t)(v85 - &v94[v88]) < 0x20) {
                goto LABEL_282;
              }
              uint64_t v97 = (v96 >> 3) + 1;
              uint64_t v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
              int v99 = &v85[-v98];
              uint64_t v95 = (unint64_t *)((char *)v95 - v98);
              int v100 = &v94[8 * v89 - 16];
              long long v101 = (long long *)(v85 - 16);
              uint64_t v102 = v97 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v103 = *v101;
                *(v100 - 1) = *(v101 - 1);
                *int v100 = v103;
                v100 -= 2;
                v101 -= 2;
                v102 -= 4;
              }
              while (v102);
              char v85 = v99;
              if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_282:
                do
                {
                  unint64_t v104 = *((void *)v85 - 1);
                  v85 -= 8;
                  *--uint64_t v95 = v104;
                }
                while (v85 != v87);
              }
              char v85 = (unsigned char *)*((void *)&v241 + 1);
              goto LABEL_108;
            }
            uint64_t v94 = 0;
            uint64_t v95 = (unint64_t *)(8 * v89);
            *(void *)(8 * v89) = v84;
            uint64_t v86 = 8 * v89 + 8;
            if (v85 != v87) {
              goto LABEL_101;
            }
LABEL_108:
            *((void *)&v241 + 1) = v95;
            *(void *)&long long v242 = v86;
            *((void *)&v242 + 1) = &v94[8 * v92];
            unint64_t v68 = v18 + 1;
            if (v85) {
              operator delete(v85);
            }
LABEL_110:
            *(void *)&long long v242 = v86;
            unint64_t v105 = *(unsigned int *)v66 | ((unint64_t)(*((_DWORD *)v66 + 1) & 0xFFFFFFF | (((*((_DWORD *)v66 + 1) >> 28) & 3) << 29) | (((*((_DWORD *)v66 + 1) & 0x60000000) == 0x40000000) << 31)) << 32);
            unint64_t v106 = (unsigned char *)*((void *)&v243 + 1);
            if (*((void *)&v243 + 1) >= (unint64_t)v244)
            {
              unint64_t v107 = (unsigned char *)v243;
              uint64_t v108 = *((void *)&v243 + 1) - v243;
              uint64_t v109 = (uint64_t)(*((void *)&v243 + 1) - v243) >> 3;
              unint64_t v110 = v109 + 1;
              if ((unint64_t)(v109 + 1) >> 61) {
                sub_2E00();
              }
              uint64_t v111 = (uint64_t)&v244[-v243];
              if ((uint64_t)&v244[-v243] >> 2 > v110) {
                unint64_t v110 = v111 >> 2;
              }
              if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v112 = v110;
              }
              if (v112)
              {
                if (v112 >> 61) {
                  sub_188D718();
                }
                unint64_t v113 = v112;
                unsigned int v114 = operator new(8 * v112);
                unint64_t v112 = v113;
                long long v115 = (unint64_t *)&v114[8 * v109];
                *long long v115 = v105;
                uint64_t v69 = (uint64_t)(v115 + 1);
                if (v106 == v107) {
                  goto LABEL_129;
                }
LABEL_122:
                unint64_t v116 = v106 - 8 - v107;
                if (v116 < 0x58) {
                  goto LABEL_283;
                }
                if ((unint64_t)(v106 - &v114[v108]) < 0x20) {
                  goto LABEL_283;
                }
                uint64_t v117 = (v116 >> 3) + 1;
                uint64_t v118 = 8 * (v117 & 0x3FFFFFFFFFFFFFFCLL);
                long long v119 = &v106[-v118];
                long long v115 = (unint64_t *)((char *)v115 - v118);
                uint64_t v120 = &v114[8 * v109 - 16];
                uint64_t v121 = (long long *)(v106 - 16);
                uint64_t v122 = v117 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v123 = *v121;
                  *(v120 - 1) = *(v121 - 1);
                  _OWORD *v120 = v123;
                  v120 -= 2;
                  v121 -= 2;
                  v122 -= 4;
                }
                while (v122);
                unint64_t v106 = v119;
                if (v117 != (v117 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_283:
                  do
                  {
                    unint64_t v124 = *((void *)v106 - 1);
                    v106 -= 8;
                    *--long long v115 = v124;
                  }
                  while (v106 != v107);
                }
                unint64_t v106 = (unsigned char *)v243;
              }
              else
              {
                unsigned int v114 = 0;
                long long v115 = (unint64_t *)(8 * v109);
                *(void *)(8 * v109) = v105;
                uint64_t v69 = 8 * v109 + 8;
                if (v106 != v107) {
                  goto LABEL_122;
                }
              }
LABEL_129:
              *(void *)&long long v243 = v115;
              *((void *)&v243 + 1) = v69;
              uint64_t v244 = &v114[8 * v112];
              unint64_t v68 = v18 + 1;
              if (v106) {
                operator delete(v106);
              }
              goto LABEL_64;
            }
            **((void **)&v243 + 1) = v105;
            uint64_t v69 = (uint64_t)(v106 + 8);
LABEL_64:
            *((void *)&v243 + 1) = v69;
LABEL_65:
            v66 += 10;
          }
          while (v66 != (uint64_t *)v67);
        }
        unint64_t v18 = v68;
        if (v68 == v221) {
          goto LABEL_7;
        }
      }
      unint64_t v19 = sub_EB249C(v17, v18);
      v229[0] = v19;
      LODWORD(v235) = 0;
      *((void *)&v235 + 1) = 0;
      *(void *)&long long v236 = 0;
      BYTE8(v236) = 0;
      *(void *)&long long v237 = 0x3FF0000000000000;
      BYTE8(v237) = 1;
      long long v238 = 0uLL;
      LOBYTE(v239) = 0;
      *(_DWORD *)((char *)&v239 + 2) = 36000;
      BYTE6(v239) = 0;
      unint64_t v20 = (void *)*((void *)&v240 + 1);
      if (*((void *)&v240 + 1) >= (unint64_t)v241)
      {
        unsigned int v24 = sub_F64294((void **)&v240, v229, &v235);
      }
      else
      {
        **((void **)&v240 + 1) = 0;
        v20[1] = 0;
        v20[2] = 0;
        void v20[3] = -1;
        char v21 = (char *)operator new(0x50uLL);
        long long v22 = v237;
        *(_OWORD *)(v21 + 56) = v238;
        *(_OWORD *)(v21 + 40) = v22;
        long long v23 = v235;
        *(_OWORD *)(v21 + 24) = v236;
        *(void *)char v21 = v19;
        *((void *)v21 + 9) = v239;
        *(_OWORD *)(v21 + 8) = v23;
        v20[1] = v21 + 80;
        v20[2] = v21 + 80;
        unsigned int v24 = (char *)(v20 + 4);
        *unint64_t v20 = v21;
      }
      *((void *)&v240 + 1) = v24;
      unint64_t v25 = (*(_DWORD *)(*(void *)&v224[4] + 16 * v18) + v230) | ((unint64_t)(*(_DWORD *)(*(void *)&v224[4] + 16 * v18 + 4) + HIDWORD(v230)) << 32);
      uint64_t v26 = (unsigned char *)v242;
      if ((unint64_t)v242 < *((void *)&v242 + 1))
      {
        *(void *)long long v242 = v25;
        uint64_t v27 = (uint64_t)(v26 + 8);
        goto LABEL_38;
      }
      uint64_t v28 = (unsigned char *)*((void *)&v241 + 1);
      uint64_t v29 = v242 - *((void *)&v241 + 1);
      uint64_t v30 = (uint64_t)(v242 - *((void *)&v241 + 1)) >> 3;
      unint64_t v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v32 = *((void *)&v242 + 1) - *((void *)&v241 + 1);
      if ((uint64_t)(*((void *)&v242 + 1) - *((void *)&v241 + 1)) >> 2 > v31) {
        unint64_t v31 = v32 >> 2;
      }
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v33 = v31;
      }
      if (v33)
      {
        if (v33 >> 61) {
          sub_188D718();
        }
        char v34 = operator new(8 * v33);
        uint64_t v35 = (unint64_t *)&v34[8 * v30];
        *uint64_t v35 = v25;
        uint64_t v27 = (uint64_t)(v35 + 1);
        if (v26 != v28)
        {
LABEL_27:
          unint64_t v36 = v26 - 8 - v28;
          if (v36 < 0x58) {
            goto LABEL_284;
          }
          if ((unint64_t)(v26 - &v34[v29]) < 0x20) {
            goto LABEL_284;
          }
          uint64_t v37 = (v36 >> 3) + 1;
          uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
          int v39 = &v26[-v38];
          uint64_t v35 = (unint64_t *)((char *)v35 - v38);
          int v40 = &v34[8 * v30 - 16];
          uint64_t v41 = (long long *)(v26 - 16);
          uint64_t v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v43 = *v41;
            *(v40 - 1) = *(v41 - 1);
            *int v40 = v43;
            v40 -= 2;
            v41 -= 2;
            v42 -= 4;
          }
          while (v42);
          uint64_t v26 = v39;
          if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_284:
            do
            {
              unint64_t v44 = *((void *)v26 - 1);
              v26 -= 8;
              *--uint64_t v35 = v44;
            }
            while (v26 != v28);
          }
          uint64_t v26 = (unsigned char *)*((void *)&v241 + 1);
          *((void *)&v241 + 1) = v35;
          *(void *)&long long v242 = v27;
          *((void *)&v242 + 1) = &v34[8 * v33];
          if (!v26)
          {
LABEL_38:
            *(void *)&long long v242 = v27;
            unint64_t v45 = sub_EB249C(v17, v18 - 1);
            unint64_t v46 = v45 | ((HIDWORD(v45) & 0xFFFFFFF | (v45 >> 31) & 0x60000000 | (((v45 & 0x6000000000000000) == 0x4000000000000000) << 31)) << 32);
            uint64_t v47 = (unsigned char *)*((void *)&v243 + 1);
            if (*((void *)&v243 + 1) < (unint64_t)v244)
            {
              **((void **)&v243 + 1) = v46;
              uint64_t v48 = (uint64_t)(v47 + 8);
LABEL_60:
              *((void *)&v243 + 1) = v48;
              goto LABEL_61;
            }
            unsigned int v49 = (unsigned char *)v243;
            uint64_t v50 = *((void *)&v243 + 1) - v243;
            uint64_t v51 = (uint64_t)(*((void *)&v243 + 1) - v243) >> 3;
            unint64_t v52 = v51 + 1;
            if ((unint64_t)(v51 + 1) >> 61) {
              sub_2E00();
            }
            uint64_t v53 = (uint64_t)&v244[-v243];
            if ((uint64_t)&v244[-v243] >> 2 > v52) {
              unint64_t v52 = v53 >> 2;
            }
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v54 = v52;
            }
            if (v54)
            {
              if (v54 >> 61) {
                sub_188D718();
              }
              char v55 = operator new(8 * v54);
              uint64_t v56 = (unint64_t *)&v55[8 * v51];
              unint64_t *v56 = v46;
              uint64_t v48 = (uint64_t)(v56 + 1);
              if (v47 != v49)
              {
LABEL_49:
                unint64_t v57 = v47 - 8 - v49;
                if (v57 < 0x58) {
                  goto LABEL_285;
                }
                if ((unint64_t)(v47 - &v55[v50]) < 0x20) {
                  goto LABEL_285;
                }
                uint64_t v58 = (v57 >> 3) + 1;
                uint64_t v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v60 = &v47[-v59];
                uint64_t v56 = (unint64_t *)((char *)v56 - v59);
                unint64_t v61 = &v55[8 * v51 - 16];
                uint64_t v62 = (long long *)(v47 - 16);
                uint64_t v63 = v58 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v64 = *v62;
                  *(v61 - 1) = *(v62 - 1);
                  _OWORD *v61 = v64;
                  v61 -= 2;
                  v62 -= 2;
                  v63 -= 4;
                }
                while (v63);
                uint64_t v47 = v60;
                if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_285:
                  do
                  {
                    unint64_t v65 = *((void *)v47 - 1);
                    v47 -= 8;
                    *--uint64_t v56 = v65;
                  }
                  while (v47 != v49);
                }
                uint64_t v47 = (unsigned char *)v243;
                *(void *)&long long v243 = v56;
                *((void *)&v243 + 1) = v48;
                uint64_t v244 = &v55[8 * v54];
                if (!v47) {
                  goto LABEL_60;
                }
                goto LABEL_59;
              }
            }
            else
            {
              char v55 = 0;
              uint64_t v56 = (unint64_t *)(8 * v51);
              *(void *)(8 * v51) = v46;
              uint64_t v48 = 8 * v51 + 8;
              if (v47 != v49) {
                goto LABEL_49;
              }
            }
            *(void *)&long long v243 = v56;
            *((void *)&v243 + 1) = v48;
            uint64_t v244 = &v55[8 * v54];
            if (!v47) {
              goto LABEL_60;
            }
LABEL_59:
            operator delete(v47);
            goto LABEL_60;
          }
LABEL_37:
          operator delete(v26);
          goto LABEL_38;
        }
      }
      else
      {
        char v34 = 0;
        uint64_t v35 = (unint64_t *)(8 * v30);
        *(void *)(8 * v30) = v25;
        uint64_t v27 = 8 * v30 + 8;
        if (v26 != v28) {
          goto LABEL_27;
        }
      }
      *((void *)&v241 + 1) = v35;
      *(void *)&long long v242 = v27;
      *((void *)&v242 + 1) = &v34[8 * v33];
      if (!v26) {
        goto LABEL_38;
      }
      goto LABEL_37;
    }
LABEL_131:
    uint64_t v4 = v214;
    __int32 v2 = v212;
    uint64_t v5 = v213;
    unint64_t v125 = sub_EA9068((uint64_t)v216);
    v229[0] = v125;
    unint64_t v126 = (long long *)sub_EA9054((uint64_t)v216);
    uint64_t v127 = *((void *)&v240 + 1);
    if (*((void *)&v240 + 1) >= (unint64_t)v241)
    {
      long long v128 = sub_F640D8((void **)&v240, v229, v126);
    }
    else
    {
      **((void **)&v240 + 1) = 0;
      *(void *)(v127 + 8) = 0;
      *(void *)(v127 + 16) = 0;
      *(void *)(v127 + 24) = -1;
      *(void *)&long long v235 = v125;
      sub_BF6964((char **)v127, &v235, v126);
      long long v128 = (char *)(v127 + 32);
    }
    *((void *)&v240 + 1) = v128;
    sub_29603C((void **)&v241 + 1, &v230);
    unint64_t v129 = sub_EA9068((uint64_t)v216);
    *(void *)&long long v235 = v129 | ((HIDWORD(v129) & 0xFFFFFFF | (v129 >> 31) & 0x60000000 | (((v129 & 0x6000000000000000) == 0x4000000000000000) << 31)) << 32);
    sub_29603C((void **)&v243, &v235);
  }
  if ((v232[23] & 0x80000000) != 0) {
    operator delete(*(void **)v232);
  }
  sub_F86C00(&v235);
  sub_F88F70((int32x2_t *)&v235, *(int32x2_t **)v4, (unsigned int ***)&v240, *(void *)(v4 + 16), **(_DWORD **)(v4 + 24), *(unsigned char *)(v4 + 32), v2, 0x7FFFFFFF, 0, 0, *(_DWORD *)(v5 + 28));
  sub_F8A7A8((uint64_t)&v235, (uint64_t)v247);
  sub_33998(v5 + 32, (uint64_t)v247);
  *(_DWORD *)(v5 + 60) = sub_F76A1C((uint64_t)&v235);
  if (sub_F8A784((uint64_t)&v235))
  {
    unint64_t v130 = *(void **)(v5 + 16);
    unint64_t v131 = *(unsigned int *)(v4 + 36);
    BYTE7(v247[1]) = 17;
    strcpy((char *)v247, "rerouting_factors");
    uint64_t v132 = (void *)sub_5C4AC(v130, (uint64_t)v247);
    if (SBYTE7(v247[1]) < 0) {
      operator delete(*(void **)&v247[0]);
    }
    unint64_t v133 = (uint64_t)(v132[1] - *v132) >> 4;
    if (v133 >= v131) {
      unint64_t v133 = v131;
    }
    uint64_t v134 = sub_319D38(v132, v133 - 1);
    if (*(_DWORD *)(v134 + 8) != 2)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    long long v135 = *(void **)v134;
    uint64_t v230 = operator new(0x19uLL);
    long long v231 = xmmword_20B9250;
    strcpy((char *)v230, "skipped_factor_off_path");
    double v136 = sub_5C7E8(v135, (uint64_t)&v230);
    strcpy((char *)v229, "skipped_factor_on_path");
    HIBYTE(v229[2]) = 22;
    double v137 = sub_5C7E8(v135, (uint64_t)v229);
    HIBYTE(v228[2]) = 16;
    strcpy((char *)v228, "preserved_factor");
    double v138 = sub_5C7E8(v135, (uint64_t)v228);
    uint64_t v226 = operator new(0x20uLL);
    long long v227 = xmmword_20B5EB0;
    strcpy((char *)v226, "local_minima_filter_factor");
    double v245 = sub_5C7E8(v135, (uint64_t)&v226);
    uint64_t v246 = 0;
    uint64_t v139 = *((void *)&v240 + 1) - v240;
    if (*((void *)&v240 + 1) != (void)v240)
    {
      uint64_t v140 = 0;
      uint64_t v141 = 0;
      long long v142 = 0;
      unint64_t v143 = 0;
      uint64_t v144 = 0;
      long long v223 = 0;
      uint64_t v225 = v139 >> 5;
      while (1)
      {
        uint64_t v147 = sub_F75724((uint64_t)&v235, v143);
        BOOL v148 = v147 == -1 || (v147 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000;
        if (v148) {
          goto LABEL_147;
        }
        unint64_t v149 = sub_F8AD28((uint64_t)&v235, v143);
        unint64_t v150 = *(void *)(v243 + 8 * v143);
        BOOL v148 = v149 == v150;
        unint64_t v151 = HIDWORD(v150);
        if (v148 && HIDWORD(v149) == v151) {
          goto LABEL_147;
        }
        uint64_t v153 = sub_F75724((uint64_t)&v235, v143);
        double v155 = sub_F8AD28((uint64_t)&v235, v143) ? v136 : v137;
        unint64_t v156 = sub_F6460C((uint64_t)&v240, v143, v155, v154);
        unsigned int v157 = v156 + v153;
        unint64_t v158 = v156 + (v153 & 0xFFFFFFFF00000000);
        unint64_t v159 = v158 & 0xFFFFFFFF00000000 | (v156 + v153);
        *(void *)&v247[0] = v159;
        unint64_t v161 = sub_F6460C((uint64_t)&v240, v143, v138, v160);
        if (v246 >= v157
          && (SHIDWORD(v246) < SHIDWORD(v158) ? (BOOL v162 = v246 > v157) : (BOOL v162 = 1), v162))
        {
          char v163 = (long long *)&v246;
        }
        else
        {
          char v163 = v247;
        }
        unint64_t v164 = ((v161 & 0xFFFFFFFF00000000) + v153) & 0xFFFFFFFF00000000 | (v161 + v153);
        uint64_t v246 = *(void *)v163;
        uint64_t v165 = (v144 - v142) / 24;
        long long v146 = &v142[24 * v165];
        if (v141 >= v140) {
          break;
        }
        if (v146 == v141)
        {
          *(void *)uint64_t v141 = v143;
          *((void *)v141 + 1) = v164;
          uint64_t v145 = (uint64_t)(v141 + 24);
          long long v146 = v141;
          *((void *)v141 + 2) = v159;
        }
        else
        {
          int v166 = v141 - 24;
          uint64_t v145 = (uint64_t)v141;
          if ((unint64_t)v141 >= 0x18)
          {
            do
            {
              long long v167 = *(_OWORD *)v166;
              *(void *)(v145 + 16) = *((void *)v166 + 2);
              *(_OWORD *)uint64_t v145 = v167;
              v145 += 24;
              v166 += 24;
            }
            while (v166 < v141);
          }
          if (v141 != v146 + 24) {
            memmove(v146 + 24, v146, v141 - (v146 + 24));
          }
          *(void *)long long v146 = v143;
          *((void *)v146 + 1) = v164;
          *((void *)v146 + 2) = v159;
        }
LABEL_146:
        uint64_t v144 = v146 + 24;
        uint64_t v141 = (char *)v145;
LABEL_147:
        if (++v143 == v225)
        {
          long long v180 = v223;
          if (v223 == v141 || (long long v181 = v223 + 24, v223 + 24 == v141))
          {
            uint64_t v139 = (uint64_t)v223;
          }
          else
          {
            long long v182 = v223 + 24;
            long long v183 = v223;
            do
            {
              unsigned int v184 = *((_DWORD *)v182 + 2);
              unsigned int v185 = *((_DWORD *)v182 - 4);
              if (v184 < v185
                || (*((_DWORD *)v182 + 3) < *((_DWORD *)v182 - 3) ? (BOOL v186 = v185 >= v184) : (BOOL v186 = 0), v187 = v182, v186))
              {
                int64x2_t v187 = v183;
              }
              *((void *)v187 + 2) = sub_F64768((_DWORD *)v187 + 4, &v246, &v245);
              v183 += 24;
              v182 += 24;
            }
            while (v182 != v141);
            uint64_t v139 = (uint64_t)v223;
            do
            {
              unsigned int v188 = *((_DWORD *)v181 + 4);
              unsigned int v189 = *(_DWORD *)(v139 + 16);
              if (v188 < v189
                || (v189 >= v188 ? (BOOL v190 = *((_DWORD *)v181 + 5) < *(_DWORD *)(v139 + 20)) : (BOOL v190 = 0), v190))
              {
                uint64_t v139 = (uint64_t)v181;
              }
              v181 += 24;
            }
            while (v181 != v141);
          }
          uint64_t v191 = (uint64_t)(v141 - 24);
          if ((char *)v139 != v141 - 24) {
            goto LABEL_226;
          }
          goto LABEL_235;
        }
      }
      unint64_t v168 = 1 - 0x5555555555555555 * ((v141 - v142) >> 3);
      if (v168 > 0xAAAAAAAAAAAAAAALL) {
        sub_2E00();
      }
      if (0x5555555555555556 * ((v140 - v142) >> 3) > v168) {
        unint64_t v168 = 0x5555555555555556 * ((v140 - v142) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v140 - v142) >> 3) >= 0x555555555555555) {
        unint64_t v169 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v169 = v168;
      }
      unint64_t v222 = v164;
      if (v169)
      {
        if (v169 > 0xAAAAAAAAAAAAAAALL) {
          sub_188D718();
        }
        uint64_t v170 = (char *)operator new(24 * v169);
        unint64_t v171 = (unint64_t)&v170[24 * v165];
        int v172 = &v170[24 * v169];
        if ((char *)v171 != v172) {
          goto LABEL_182;
        }
      }
      else
      {
        uint64_t v170 = 0;
        unint64_t v171 = 24 * v165;
        int v172 = 0;
        if (24 * v165)
        {
LABEL_182:
          uint64_t v140 = v172;
LABEL_195:
          *(void *)unint64_t v171 = v143;
          *(void *)(v171 + 8) = v222;
          long long v142 = (char *)v171;
          *(void *)(v171 + 16) = v159;
          if (v223 != v146)
          {
            uint64_t v177 = v146;
            unint64_t v178 = v171;
            do
            {
              long long v179 = *(_OWORD *)(v177 - 24);
              long long v142 = (char *)(v178 - 24);
              *(void *)(v178 - 8) = *((void *)v177 - 1);
              *(_OWORD *)(v178 - 24) = v179;
              v177 -= 24;
              v178 -= 24;
            }
            while (v177 != v223);
          }
          if (v141 != v146) {
            memmove((void *)(v171 + 24), v146, v141 - v146);
          }
          uint64_t v145 = v171 + 24 + v141 - v146;
          if (v223) {
            operator delete(v223);
          }
          long long v223 = v142;
          long long v146 = (char *)v171;
          goto LABEL_146;
        }
      }
      int64_t v173 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v171 - (void)v170) >> 3);
      if (v171 <= (unint64_t)v170)
      {
        if ((char *)v171 == v170) {
          unint64_t v175 = 1;
        }
        else {
          unint64_t v175 = 0x5555555555555556 * ((uint64_t)(v171 - (void)v170) >> 3);
        }
        if (v175 > 0xAAAAAAAAAAAAAAALL) {
          sub_188D718();
        }
        long long v176 = (char *)operator new(24 * v175);
        unint64_t v171 = (unint64_t)&v176[24 * (v175 >> 2)];
        uint64_t v140 = &v176[24 * v175];
        if (v170) {
          operator delete(v170);
        }
      }
      else
      {
        if (v173 >= -1) {
          uint64_t v174 = v173 + 1;
        }
        else {
          uint64_t v174 = v173 + 2;
        }
        uint64_t v140 = (char *)v171;
        v171 -= 24 * (v174 >> 1);
      }
      goto LABEL_195;
    }
    long long v180 = 0;
    uint64_t v191 = -24;
LABEL_226:
    uint64_t v192 = v139 + 24;
    if (v192 == v191)
    {
LABEL_227:
      uint64_t v139 = v191;
    }
    else
    {
      while (1)
      {
        unsigned int v193 = *(_DWORD *)(v192 - 16);
        unsigned int v194 = *(_DWORD *)(v192 + 8);
        if (v194 >= v193 && (v193 < v194 || *(_DWORD *)(v192 + 12) >= *(_DWORD *)(v192 - 12))) {
          break;
        }
        v192 += 24;
        if (v192 == v191) {
          goto LABEL_227;
        }
      }
      uint64_t v139 = v192 - 24;
    }
LABEL_235:
    sub_F898AC(&v235, *(void *)v139, (uint64_t)v247);
    sub_EA8898((uint64_t)v232, v247);
    sub_4451C0((uint64_t)v247);
    if (v180) {
      operator delete(v180);
    }
    uint64_t v196 = v215;
    unint64_t v197 = v215->u64[1];
    if (v197 >= v215[1].i64[0])
    {
      uint64_t v200 = sub_F585AC(v215, (uint64_t)v232);
      uint64_t v199 = v214;
      int v201 = SHIBYTE(v234);
      v215->i64[1] = (uint64_t)v200;
      uint64_t v196 = v215;
      if (v201 < 0)
      {
        operator delete((void *)v233);
        uint64_t v196 = v215;
      }
    }
    else
    {
      *(void *)unint64_t v197 = 0;
      *(void *)(v197 + 8) = 0;
      *(void *)(v197 + 16) = 0;
      *(_OWORD *)unint64_t v197 = *(_OWORD *)v232;
      *(void *)(v197 + 16) = *(void *)&v232[16];
      *(void *)uint64_t v232 = 0;
      *(void *)&v232[8] = 0;
      uint64_t v198 = v234;
      *(_OWORD *)(v197 + 24) = v233;
      *(void *)(v197 + 40) = v198;
      *(void *)&v232[16] = 0;
      long long v233 = 0uLL;
      uint64_t v234 = 0;
      v215->i64[1] = v197 + 48;
      uint64_t v199 = v214;
    }
    uint64_t v202 = *(void *)v232;
    if (*(void *)v232)
    {
      uint64_t v203 = *(void *)&v232[8];
      uint64_t v204 = *(void **)v232;
      if (*(void *)&v232[8] != *(void *)v232)
      {
        do
          uint64_t v203 = sub_4451C0(v203 - 480);
        while (v203 != v202);
        uint64_t v204 = *(void **)v232;
      }
      *(void *)&v232[8] = v202;
      operator delete(v204);
      uint64_t v196 = v215;
    }
    if (SHIBYTE(v227) < 0)
    {
      operator delete(v226);
      uint64_t v196 = v215;
      if ((SHIBYTE(v228[2]) & 0x80000000) == 0)
      {
LABEL_248:
        if ((SHIBYTE(v229[2]) & 0x80000000) == 0) {
          goto LABEL_249;
        }
        goto LABEL_266;
      }
    }
    else if ((SHIBYTE(v228[2]) & 0x80000000) == 0)
    {
      goto LABEL_248;
    }
    operator delete(v228[0]);
    uint64_t v196 = v215;
    if ((SHIBYTE(v229[2]) & 0x80000000) == 0)
    {
LABEL_249:
      if ((SHIBYTE(v231) & 0x80000000) == 0)
      {
LABEL_250:
        sub_107D348(v196->i64[1] - 48, *(void **)(v199 + 8));
        goto LABEL_251;
      }
LABEL_267:
      operator delete(v230);
      uint64_t v196 = v215;
      goto LABEL_250;
    }
LABEL_266:
    operator delete((void *)v229[0]);
    uint64_t v196 = v215;
    if ((SHIBYTE(v231) & 0x80000000) == 0) {
      goto LABEL_250;
    }
    goto LABEL_267;
  }
LABEL_251:
  sub_BF0DE8(&v235);
  if ((void)v243)
  {
    *((void *)&v243 + 1) = v243;
    operator delete((void *)v243);
  }
  if (*((void *)&v241 + 1))
  {
    *(void *)&long long v242 = *((void *)&v241 + 1);
    operator delete(*((void **)&v241 + 1));
  }
  uint64_t v205 = v240;
  if ((void)v240)
  {
    uint64_t v206 = *((void *)&v240 + 1);
    long long v207 = (void *)v240;
    if (*((void *)&v240 + 1) != (void)v240)
    {
      uint64_t v208 = *((void *)&v240 + 1);
      do
      {
        uint64_t v210 = *(void **)(v208 - 32);
        v208 -= 32;
        long long v209 = v210;
        if (v210)
        {
          *(void *)(v206 - 24) = v209;
          operator delete(v209);
        }
        uint64_t v206 = v208;
      }
      while (v208 != v205);
      long long v207 = (void *)v240;
    }
    *((void *)&v240 + 1) = v205;
    operator delete(v207);
  }
}

void sub_F63D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void ***a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v48 = *(void **)v46;
  if (*(void *)v46)
  {
    *(void *)(v46 + 8) = v48;
    operator delete(v48);
  }
  STACK[0x10A8] = v46;
  unsigned int v49 = (void *)STACK[0x10D0];
  if (STACK[0x10D0])
  {
    STACK[0x10D8] = (unint64_t)v49;
    operator delete(v49);
    uint64_t v50 = (void *)STACK[0x10B8];
    if (!STACK[0x10B8])
    {
LABEL_5:
      unint64_t v51 = STACK[0x10A0];
      if (!STACK[0x10A0]) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v50 = (void *)STACK[0x10B8];
    if (!STACK[0x10B8]) {
      goto LABEL_5;
    }
  }
  STACK[0x10C0] = (unint64_t)v50;
  operator delete(v50);
  unint64_t v51 = STACK[0x10A0];
  if (!STACK[0x10A0])
  {
LABEL_6:
    if (a46 < 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_10:
  unint64_t v52 = STACK[0x10A8];
  uint64_t v53 = (void *)v51;
  if (STACK[0x10A8] != v51)
  {
    unint64_t v54 = STACK[0x10A8];
    do
    {
      uint64_t v56 = *(void **)(v54 - 32);
      v54 -= 32;
      char v55 = v56;
      if (v56)
      {
        *(void *)(v52 - 24) = v55;
        operator delete(v55);
      }
      unint64_t v52 = v54;
    }
    while (v54 != v51);
    uint64_t v53 = (void *)STACK[0x10A0];
  }
  STACK[0x10A8] = v51;
  operator delete(v53);
  if (a46 < 0)
  {
LABEL_7:
    operator delete(__p);
    sub_CE1C80(a17);
    _Unwind_Resume(a1);
  }
LABEL_17:
  sub_CE1C80(a17);
  _Unwind_Resume(a1);
}

void **sub_F64040(void **a1)
{
  __int32 v2 = a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (char *)*a1;
  if (*a1)
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = *a1;
    if (v5 != v4)
    {
      int v7 = (char *)a1[1];
      do
      {
        double v9 = (void *)*((void *)v7 - 4);
        v7 -= 32;
        uint64_t v8 = v9;
        if (v9)
        {
          *((void *)v5 - 3) = v8;
          operator delete(v8);
        }
        uint64_t v5 = v7;
      }
      while (v7 != v4);
      uint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  return a1;
}

char *sub_F640D8(void **a1, uint64_t *a2, long long *a3)
{
  uint64_t v4 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v6 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v6 >> 4 > v5) {
    unint64_t v5 = v6 >> 4;
  }
  BOOL v7 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0;
  unint64_t v8 = 0x7FFFFFFFFFFFFFFLL;
  if (!v7) {
    unint64_t v8 = v5;
  }
  if (v8 >> 59) {
    sub_188D718();
  }
  uint64_t v11 = 32 * v8;
  uint64_t v12 = (char *)operator new(32 * v8);
  uint64_t v13 = &v12[32 * v4];
  uint64_t v14 = &v12[v11];
  uint64_t v15 = *a2;
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  *((void *)v13 + 3) = -1;
  uint64_t v27 = v15;
  sub_BF6964((char **)v13, &v27, a3);
  uint64_t v16 = v13 + 32;
  unint64_t v18 = (char *)*a1;
  char v17 = (char *)a1[1];
  if (v17 == *a1)
  {
    long long v22 = (char *)a1[1];
  }
  else
  {
    uint64_t v19 = 0;
    do
    {
      unint64_t v20 = &v13[v19];
      char v21 = &v17[v19];
      *((void *)v20 - 4) = 0;
      *((void *)v20 - 3) = 0;
      *((void *)v20 - 2) = 0;
      *((_OWORD *)v20 - 2) = *(_OWORD *)&v17[v19 - 32];
      *((void *)v20 - 2) = *(void *)&v17[v19 - 16];
      *((void *)v21 - 4) = 0;
      *((void *)v21 - 3) = 0;
      *((void *)v21 - 2) = 0;
      *((void *)v20 - 1) = *(void *)&v17[v19 - 8];
      v19 -= 32;
    }
    while (&v17[v19] != v18);
    long long v22 = (char *)*a1;
    char v17 = (char *)a1[1];
    v13 += v19;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v14;
  if (v17 != v22)
  {
    long long v23 = v17 - 32;
    do
    {
      unint64_t v25 = *(void **)v23;
      if (*(void *)v23)
      {
        *((void *)v23 + 1) = v25;
        operator delete(v25);
      }
      BOOL v24 = v23 == v22;
      v23 -= 32;
    }
    while (!v24);
    char v17 = v22;
  }
  if (v17) {
    operator delete(v17);
  }
  return v16;
}

void sub_F64270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_BF93E8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_F64294(void **a1, uint64_t *a2, long long *a3)
{
  uint64_t v4 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v6 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v6 >> 4 > v5) {
    unint64_t v5 = v6 >> 4;
  }
  BOOL v7 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0;
  unint64_t v8 = 0x7FFFFFFFFFFFFFFLL;
  if (!v7) {
    unint64_t v8 = v5;
  }
  if (v8 >> 59) {
    sub_188D718();
  }
  uint64_t v11 = 32 * v8;
  uint64_t v12 = (char *)operator new(32 * v8);
  uint64_t v13 = &v12[32 * v4];
  uint64_t v14 = &v12[v11];
  uint64_t v15 = *a2;
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  *((void *)v13 + 3) = -1;
  uint64_t v27 = v15;
  sub_BF6964((char **)v13, &v27, a3);
  uint64_t v16 = v13 + 32;
  unint64_t v18 = (char *)*a1;
  char v17 = (char *)a1[1];
  if (v17 == *a1)
  {
    long long v22 = (char *)a1[1];
  }
  else
  {
    uint64_t v19 = 0;
    do
    {
      unint64_t v20 = &v13[v19];
      char v21 = &v17[v19];
      *((void *)v20 - 4) = 0;
      *((void *)v20 - 3) = 0;
      *((void *)v20 - 2) = 0;
      *((_OWORD *)v20 - 2) = *(_OWORD *)&v17[v19 - 32];
      *((void *)v20 - 2) = *(void *)&v17[v19 - 16];
      *((void *)v21 - 4) = 0;
      *((void *)v21 - 3) = 0;
      *((void *)v21 - 2) = 0;
      *((void *)v20 - 1) = *(void *)&v17[v19 - 8];
      v19 -= 32;
    }
    while (&v17[v19] != v18);
    long long v22 = (char *)*a1;
    char v17 = (char *)a1[1];
    v13 += v19;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v14;
  if (v17 != v22)
  {
    long long v23 = v17 - 32;
    do
    {
      unint64_t v25 = *(void **)v23;
      if (*(void *)v23)
      {
        *((void *)v23 + 1) = v25;
        operator delete(v25);
      }
      BOOL v24 = v23 == v22;
      v23 -= 32;
    }
    while (!v24);
    char v17 = v22;
  }
  if (v17) {
    operator delete(v17);
  }
  return v16;
}

void sub_F6442C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_BF93E8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_F64450(void **a1, uint64_t *a2, long long *a3)
{
  uint64_t v4 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v6 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v6 >> 4 > v5) {
    unint64_t v5 = v6 >> 4;
  }
  BOOL v7 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0;
  unint64_t v8 = 0x7FFFFFFFFFFFFFFLL;
  if (!v7) {
    unint64_t v8 = v5;
  }
  if (v8 >> 59) {
    sub_188D718();
  }
  uint64_t v11 = 32 * v8;
  uint64_t v12 = (char *)operator new(32 * v8);
  uint64_t v13 = &v12[32 * v4];
  uint64_t v14 = &v12[v11];
  uint64_t v15 = *a2;
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  *((void *)v13 + 3) = -1;
  uint64_t v27 = v15;
  sub_BF6964((char **)v13, &v27, a3);
  uint64_t v16 = v13 + 32;
  unint64_t v18 = (char *)*a1;
  char v17 = (char *)a1[1];
  if (v17 == *a1)
  {
    long long v22 = (char *)a1[1];
  }
  else
  {
    uint64_t v19 = 0;
    do
    {
      unint64_t v20 = &v13[v19];
      char v21 = &v17[v19];
      *((void *)v20 - 4) = 0;
      *((void *)v20 - 3) = 0;
      *((void *)v20 - 2) = 0;
      *((_OWORD *)v20 - 2) = *(_OWORD *)&v17[v19 - 32];
      *((void *)v20 - 2) = *(void *)&v17[v19 - 16];
      *((void *)v21 - 4) = 0;
      *((void *)v21 - 3) = 0;
      *((void *)v21 - 2) = 0;
      *((void *)v20 - 1) = *(void *)&v17[v19 - 8];
      v19 -= 32;
    }
    while (&v17[v19] != v18);
    long long v22 = (char *)*a1;
    char v17 = (char *)a1[1];
    v13 += v19;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v14;
  if (v17 != v22)
  {
    long long v23 = v17 - 32;
    do
    {
      unint64_t v25 = *(void **)v23;
      if (*(void *)v23)
      {
        *((void *)v23 + 1) = v25;
        operator delete(v25);
      }
      BOOL v24 = v23 == v22;
      v23 -= 32;
    }
    while (!v24);
    char v17 = v22;
  }
  if (v17) {
    operator delete(v17);
  }
  return v16;
}

void sub_F645E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_BF93E8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_F6460C(uint64_t a1, uint64_t a2, double a3, double a4)
{
  if (a3 < 0.0)
  {
    uint64_t v4 = (_DWORD *)(*(void *)(a1 + 24) + 8 * a2);
    int v5 = *(_DWORD *)(*(void *)(a1 + 32) - 4) - v4[1];
    double v6 = -(a3 * (double)(*(_DWORD *)(*(void *)(a1 + 32) - 8) - *v4));
    if (v6 >= 0.0)
    {
      if (v6 >= 4.50359963e15) {
        goto LABEL_15;
      }
      uint64_t v7 = (uint64_t)(v6 + v6) + 1;
    }
    else
    {
      if (v6 <= -4.50359963e15) {
        goto LABEL_15;
      }
      uint64_t v7 = (uint64_t)(v6 + v6);
      if (v7 >= 1) {
        --v7;
      }
    }
    double v6 = (double)(v7 >> 1);
LABEL_15:
    double v11 = -a3 * (double)v5;
    if (v11 >= 0.0) {
      goto LABEL_16;
    }
    goto LABEL_22;
  }
  unint64_t v8 = (_DWORD *)(*(void *)(a1 + 24) + 8 * a2);
  int v9 = v8[1];
  LODWORD(a4) = *v8;
  double v6 = (double)*(unint64_t *)&a4 * a3;
  if (v6 >= 0.0)
  {
    if (v6 >= 4.50359963e15) {
      goto LABEL_21;
    }
    uint64_t v10 = (uint64_t)(v6 + v6) + 1;
  }
  else
  {
    if (v6 <= -4.50359963e15) {
      goto LABEL_21;
    }
    uint64_t v10 = (uint64_t)(v6 + v6);
    if (v10 >= 1) {
      --v10;
    }
  }
  double v6 = (double)(v10 >> 1);
LABEL_21:
  double v11 = (double)v9 * a3;
  if (v11 >= 0.0)
  {
LABEL_16:
    if (v11 < 4.50359963e15)
    {
      uint64_t v12 = (uint64_t)(v11 + v11) + 1;
LABEL_25:
      double v11 = (double)(v12 >> 1);
      return v6 | ((unint64_t)(int)v11 << 32);
    }
    return v6 | ((unint64_t)(int)v11 << 32);
  }
LABEL_22:
  if (v11 > -4.50359963e15)
  {
    uint64_t v12 = (uint64_t)(v11 + v11);
    if (v12 >= 1) {
      --v12;
    }
    goto LABEL_25;
  }
  return v6 | ((unint64_t)(int)v11 << 32);
}

unint64_t sub_F64768(_DWORD *a1, _DWORD *a2, double *a3)
{
  double v3 = *a3;
  unint64_t v4 = 1.0;
  double v5 = 1.0 - *a3;
  LODWORD(v4) = *a1;
  double v6 = v5 * (double)v4;
  if (v6 >= 0.0)
  {
    if (v6 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v7 = (uint64_t)(v6 + v6) + 1;
  }
  else
  {
    if (v6 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v7 = (uint64_t)(v6 + v6);
    if (v7 >= 1) {
      --v7;
    }
  }
  double v6 = (double)(v7 >> 1);
LABEL_9:
  double v8 = v5 * (double)(int)a1[1];
  if (v8 >= 0.0)
  {
    HIDWORD(v9) = 1127219200;
    if (v8 >= 4.50359963e15) {
      goto LABEL_17;
    }
    uint64_t v10 = (uint64_t)(v8 + v8) + 1;
  }
  else
  {
    HIDWORD(v9) = -1020264448;
    if (v8 <= -4.50359963e15) {
      goto LABEL_17;
    }
    uint64_t v10 = (uint64_t)(v8 + v8);
    if (v10 >= 1) {
      --v10;
    }
  }
  double v8 = (double)(v10 >> 1);
LABEL_17:
  LODWORD(v9) = *a2;
  double v11 = v3 * (double)v9;
  if (v11 >= 0.0)
  {
    if (v11 >= 4.50359963e15) {
      goto LABEL_25;
    }
    uint64_t v12 = (uint64_t)(v11 + v11) + 1;
  }
  else
  {
    if (v11 <= -4.50359963e15) {
      goto LABEL_25;
    }
    uint64_t v12 = (uint64_t)(v11 + v11);
    if (v12 >= 1) {
      --v12;
    }
  }
  double v11 = (double)(v12 >> 1);
LABEL_25:
  double v13 = v3 * (double)(int)a2[1];
  if (v13 >= 0.0)
  {
    if (v13 < 4.50359963e15)
    {
      uint64_t v14 = (uint64_t)(v13 + v13) + 1;
LABEL_32:
      double v13 = (double)(v14 >> 1);
    }
  }
  else if (v13 > -4.50359963e15)
  {
    uint64_t v14 = (uint64_t)(v13 + v13);
    if (v14 >= 1) {
      --v14;
    }
    goto LABEL_32;
  }
  return (v11 + v6) | ((unint64_t)((int)v13 + (int)v8) << 32);
}

void sub_F64904()
{
  unk_25FCFBF = 16641;
  word_25FCFA8 = 65;
  byte_25FCFD7 = 1;
  byte_25FCFC1 = 0;
}

uint64_t sub_F6492C(uint64_t a1, void *a2, void *a3)
{
  *(void *)a1 = sub_3750CC(a2);
  *(void *)(a1 + 8) = sub_3766F8(a2);
  *(void *)(a1 + 16) = sub_376B90(a2);
  *(void *)(a1 + 24) = sub_374D14(a2);
  sub_F65FE0(a1 + 32, a3);
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  return a1;
}

uint64_t sub_F649B4(uint64_t a1, uint64_t a2)
{
  return sub_F649C8(*(void **)a2, *(void *)(a2 + 8), *(void **)(a2 + 16), *(void *)(a2 + 24) + 1);
}

uint64_t sub_F649C8(void *a1, unint64_t a2, void *a3, unint64_t a4)
{
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v8 = sub_EB04C4(a1);
        unint64_t v9 = sub_EB04C4(a3);
        if (a2 >= v8 || a4 >= v9)
        {
          if (a2 < v8 == a4 < v9) {
            return 1;
          }
        }
        else
        {
          uint64_t v10 = sub_EB0624(a1, a2);
          if (v10 == sub_EB0624(a3, a4)) {
            return 1;
          }
        }
        double v11 = (int **)sub_EB0624(a1, a2);
        uint64_t v12 = (unsigned __int16 *)((char *)*v11 - **v11);
        unsigned int v13 = *v12;
        if (*((unsigned char *)v11 + 38))
        {
          if (v13 < 0xB) {
            return 0;
          }
          unsigned int v14 = v12[5];
          if (!v14) {
            return 0;
          }
          int v15 = 2;
        }
        else
        {
          if (v13 < 0xB) {
            return 0;
          }
          unsigned int v14 = v12[5];
          if (!v14) {
            return 0;
          }
          int v15 = 1;
        }
        ++a2;
        if ((*(int *)((char *)*v11 + v14) & v15) == 0) {
          return 0;
        }
      }
    }
    while (1)
    {
      BOOL v16 = a2 >= sub_EB04C4(a1);
      uint64_t result = v16;
      if (v16) {
        break;
      }
      unint64_t v18 = (int **)sub_EB0624(a1, a2);
      uint64_t v19 = (unsigned __int16 *)((char *)*v18 - **v18);
      unsigned int v20 = *v19;
      if (*((unsigned char *)v18 + 38))
      {
        if (v20 < 0xB) {
          return 0;
        }
        unsigned int v21 = v19[5];
        if (!v21) {
          return 0;
        }
        int v22 = 2;
      }
      else
      {
        if (v20 < 0xB) {
          return 0;
        }
        unsigned int v21 = v19[5];
        if (!v21) {
          return 0;
        }
        int v22 = 1;
      }
      ++a2;
      if ((*(int *)((char *)*v18 + v21) & v22) == 0) {
        return 0;
      }
    }
  }
  else if (a3)
  {
    while (1)
    {
      BOOL v16 = a4 >= sub_EB04C4(a3);
      uint64_t result = v16;
      if (v16) {
        break;
      }
      long long v23 = (int **)sub_EB0624(0, a2);
      BOOL v24 = (unsigned __int16 *)((char *)*v23 - **v23);
      unsigned int v25 = *v24;
      if (*((unsigned char *)v23 + 38))
      {
        if (v25 < 0xB) {
          return 0;
        }
        unsigned int v26 = v24[5];
        if (!v26) {
          return 0;
        }
        int v27 = 2;
      }
      else
      {
        if (v25 < 0xB) {
          return 0;
        }
        unsigned int v26 = v24[5];
        if (!v26) {
          return 0;
        }
        int v27 = 1;
      }
      ++a2;
      if ((*(int *)((char *)*v23 + v26) & v27) == 0) {
        return 0;
      }
    }
  }
  else
  {
    return 1;
  }
  return result;
}

unint64_t sub_F64BF4(uint64_t a1, uint64_t a2)
{
  double v3 = (void *)sub_EB0624(*(void **)a2, *(void *)(a2 + 8));
  unint64_t v4 = (unsigned __int16 *)(*v3 - *(int *)*v3);
  if (*v4 < 0x2Fu) {
    return 0;
  }
  uint64_t v5 = v4[23];
  if (!v5) {
    return 0;
  }
  unsigned int v6 = *(unsigned __int8 *)(*v3 + v5);
  BOOL v7 = v6 > 0x2D;
  uint64_t v8 = (1 << v6) & 0x208040000000;
  BOOL v9 = v7 || v8 == 0;
  if (!v9
    && (uint64_t v10 = (void *)sub_EB0624(*(void **)(a2 + 16), *(void *)(a2 + 24)),
        double v11 = (unsigned __int16 *)(*v10 - *(int *)*v10),
        *v11 >= 0x2Fu)
    && (uint64_t v12 = v11[23]) != 0
    && (unsigned int v13 = *(unsigned __int8 *)(*v10 + v12), v13 <= 0x2D))
  {
    return (0x208040000000uLL >> v13) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_F64CB4(uint64_t *a1, uint64_t a2)
{
  double v3 = (uint64_t **)(a1 + 22);
  a1[23] = a1[22];
  unint64_t v4 = *(void **)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  unsigned int v6 = *(void **)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24) + 1;
  v13[0] = a1;
  v13[1] = v3;
  sub_F662F0(v4, v5, v6, v7, (uint64_t)v13);
  uint64_t v8 = *v3;
  BOOL v9 = (uint64_t *)a1[23];
  if (*v3 == v9) {
    return 0;
  }
  LODWORD(v10) = 0;
  do
  {
    uint64_t v11 = *v8++;
    uint64_t v10 = sub_3AC808(a1[1], v11 ^ 0x1000000000000) + v10;
  }
  while (v8 != v9);
  return v10;
}

uint64_t sub_F64D5C(uint64_t a1, uint64_t a2)
{
  if (sub_F64F14(a1, a2)) {
    return 1;
  }
  unint64_t v5 = (int **)sub_EB0624(*(void **)a2, *(void *)(a2 + 8));
  uint64_t v6 = sub_EB0624(*(void **)(a2 + 16), *(void *)(a2 + 24));
  unint64_t v7 = v5[1];
  uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
  unsigned int v9 = *v8;
  if (*((unsigned char *)v5 + 38))
  {
    if (v9 < 5) {
      goto LABEL_13;
    }
    unsigned int v10 = v8[2];
    if (!v10) {
      goto LABEL_13;
    }
  }
  else if (v9 < 9 || (unsigned int v10 = v8[4]) == 0)
  {
LABEL_13:
    __int16 v11 = 0;
    uint64_t v12 = *(int **)(v6 + 8);
    unsigned int v13 = (unsigned __int16 *)((char *)v12 - *v12);
    unsigned int v14 = *v13;
    if (*(unsigned char *)(v6 + 38)) {
      goto LABEL_14;
    }
LABEL_10:
    if (v14 >= 5)
    {
      unsigned int v15 = v13[2];
      if (v15) {
        goto LABEL_16;
      }
    }
LABEL_17:
    int v16 = 0;
    goto LABEL_18;
  }
  __int16 v11 = *(_WORD *)((char *)v7 + v10);
  uint64_t v12 = *(int **)(v6 + 8);
  unsigned int v13 = (unsigned __int16 *)((char *)v12 - *v12);
  unsigned int v14 = *v13;
  if (!*(unsigned char *)(v6 + 38)) {
    goto LABEL_10;
  }
LABEL_14:
  if (v14 < 9) {
    goto LABEL_17;
  }
  unsigned int v15 = v13[4];
  if (!v15) {
    goto LABEL_17;
  }
LABEL_16:
  int v16 = *(unsigned __int16 *)((char *)v12 + v15);
LABEL_18:
  unsigned __int16 v17 = v11 + 18000;
  unsigned __int16 v18 = v11 - 18000;
  if ((unsigned __int16)(v17 >> 5) < 0x465u) {
    unsigned __int16 v18 = v17;
  }
  int v19 = v16 - v18;
  if (v19 > 18000) {
    v19 -= 36000;
  }
  if (v19 < -17999) {
    v19 += 36000;
  }
  double v20 = (double)v19 / 100.0;
  if (fabs(v20) < *(double *)(a1 + 40)) {
    return 0;
  }
  unsigned int v21 = (unsigned __int16 *)((char *)*v5 - **v5);
  if (*v21 >= 0xBu && (uint64_t v22 = v21[5]) != 0) {
    int v23 = *((unsigned __int8 *)*v5 + v22 + 1) >> 7;
  }
  else {
    int v23 = 0;
  }
  return (v20 < 0.0) ^ v23;
}

BOOL sub_F64F14(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (int **)sub_EB0624(*(void **)a2, *(void *)(a2 + 8));
  unint64_t v5 = (int **)sub_EB0624(*(void **)(a2 + 16), *(void *)(a2 + 24));
  if (*((unsigned __int16 *)v4 + 18) == *((unsigned __int16 *)v5 + 18) && *((_DWORD *)v4 + 8) == *((_DWORD *)v5 + 8)) {
    return 1;
  }
  unint64_t v7 = (unsigned __int16 *)((char *)*v4 - **v4);
  if (*v7 < 0xBu) {
    return 0;
  }
  uint64_t v8 = v7[5];
  if (!v8) {
    return 0;
  }
  if ((*((unsigned char *)*v4 + v8) & 4) == 0) {
    return 0;
  }
  unsigned int v9 = (unsigned __int16 *)((char *)*v5 - **v5);
  if (*v9 < 0xBu) {
    return 0;
  }
  uint64_t v10 = v9[5];
  if (!v10 || (*((unsigned char *)*v5 + v10) & 4) == 0) {
    return 0;
  }
  uint64_t v12 = v4[1];
  unsigned int v13 = (unsigned __int16 *)((char *)v12 - *v12);
  unsigned int v14 = *v13;
  if (!*((unsigned char *)v4 + 38))
  {
    if (v14 < 9) {
      goto LABEL_20;
    }
    unsigned int v15 = v13[4];
    if (!v15) {
      goto LABEL_20;
    }
LABEL_19:
    __int16 v16 = *(_WORD *)((char *)v12 + v15);
    goto LABEL_21;
  }
  if (v14 >= 5)
  {
    unsigned int v15 = v13[2];
    if (v15) {
      goto LABEL_19;
    }
  }
LABEL_20:
  __int16 v16 = 0;
LABEL_21:
  unsigned __int16 v17 = v5[1];
  unsigned __int16 v18 = (unsigned __int16 *)((char *)v17 - *v17);
  unsigned int v19 = *v18;
  if (*((unsigned char *)v5 + 38))
  {
    if (v19 < 9 || (unsigned int v20 = v18[4]) == 0)
    {
LABEL_28:
      int v21 = 0;
      goto LABEL_29;
    }
  }
  else
  {
    if (v19 < 5) {
      goto LABEL_28;
    }
    unsigned int v20 = v18[2];
    if (!v20) {
      goto LABEL_28;
    }
  }
  int v21 = *(unsigned __int16 *)((char *)v17 + v20);
LABEL_29:
  unsigned __int16 v22 = v16 + 18000;
  unsigned __int16 v23 = v16 - 18000;
  if ((unsigned __int16)(v22 >> 5) < 0x465u) {
    unsigned __int16 v23 = v22;
  }
  int v24 = v21 - v23;
  if (v24 > 18000) {
    v24 -= 36000;
  }
  if (v24 < -17999) {
    v24 += 36000;
  }
  return fabs((double)v24 / 100.0) >= *(double *)(a1 + 32);
}

uint64_t sub_F650DC(uint64_t a1, uint64_t a2)
{
  double v3 = (void *)sub_EB0624(*(void **)a2, *(void *)(a2 + 8));
  unint64_t v4 = (unsigned __int16 *)(*v3 - *(int *)*v3);
  if (*v4 < 0xBu) {
    return 0;
  }
  uint64_t v5 = v4[5];
  if (!v5 || (*(unsigned char *)(*v3 + v5 + 3) & 2) == 0) {
    return 0;
  }
  unint64_t v7 = *(void **)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  unsigned int v9 = *(void **)(a2 + 16);
  unint64_t v10 = *(void *)(a2 + 24);

  return sub_F69A3C(v7, v8, v9, v10);
}

uint64_t sub_F65158(uint64_t a1, uint64_t a2)
{
  return sub_F65170(*(void **)a2, *(void *)(a2 + 8) + 1, *(void **)(a2 + 16), *(void *)(a2 + 24), 0);
}

uint64_t sub_F65170(void *a1, unint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v11 = sub_EB04C4(a1);
        unint64_t v12 = sub_EB04C4(a3);
        if (a2 >= v11 || a4 >= v12)
        {
          if (a2 < v11 == a4 < v12) {
            return a5;
          }
        }
        else
        {
          uint64_t v13 = sub_EB0624(a1, a2);
          if (v13 == sub_EB0624(a3, a4)) {
            return a5;
          }
        }
        unsigned int v14 = (void *)sub_EB0624(a1, a2);
        unsigned int v15 = (unsigned __int16 *)(*v14 - *(int *)*v14);
        if (*v15 >= 9u && (uint64_t v16 = v15[4]) != 0) {
          uint64_t v10 = *(unsigned int *)(*v14 + v16);
        }
        else {
          uint64_t v10 = 0;
        }
        a5 += v10;
        ++a2;
      }
    }
    while (a2 < sub_EB04C4(a1))
    {
      unsigned __int16 v18 = (void *)sub_EB0624(a1, a2);
      unsigned int v19 = (unsigned __int16 *)(*v18 - *(int *)*v18);
      if (*v19 >= 9u && (uint64_t v20 = v19[4]) != 0) {
        uint64_t v17 = *(unsigned int *)(*v18 + v20);
      }
      else {
        uint64_t v17 = 0;
      }
      a5 += v17;
      ++a2;
    }
  }
  else if (a3)
  {
    while (a4 < sub_EB04C4(a3))
    {
      unsigned __int16 v23 = (void *)sub_EB0624(0, a2);
      int v24 = (unsigned __int16 *)(*v23 - *(int *)*v23);
      if (*v24 >= 9u && (uint64_t v25 = v24[4]) != 0) {
        uint64_t v22 = *(unsigned int *)(*v23 + v25);
      }
      else {
        uint64_t v22 = 0;
      }
      a5 += v22;
      ++a2;
    }
  }
  return a5;
}

uint64_t sub_F65308(uint64_t *a1, uint64_t a2)
{
  sub_F65434(a1, a2, 1, a1 + 19);
  uint64_t v4 = sub_EB0624(*(void **)a2, *(void *)(a2 + 8));
  if (*(unsigned char *)(v4 + 38)) {
    uint64_t v5 = (int **)(v4 + 24);
  }
  else {
    uint64_t v5 = (int **)(v4 + 16);
  }
  uint64_t v6 = *v5;
  if (!v6
    || (unint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6), *v7 < 7u)
    || (uint64_t v8 = v7[3]) == 0
    || (int v9 = *(unsigned __int16 *)((char *)v6 + v8), (_WORD)v9 == 0xFFFF))
  {
    int v9 = 0;
  }
  uint64_t v10 = sub_EB0624(*(void **)(a2 + 16), *(void *)(a2 + 24));
  if (*(unsigned char *)(v10 + 38)) {
    unint64_t v11 = (int **)(v10 + 16);
  }
  else {
    unint64_t v11 = (int **)(v10 + 24);
  }
  unint64_t v12 = *v11;
  if (v12)
  {
    uint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
    if (*v13 >= 7u)
    {
      uint64_t v14 = v13[3];
      if (v14)
      {
        int v15 = *(unsigned __int16 *)((char *)v12 + v14);
        if ((_WORD)v15 != 0xFFFF)
        {
          uint64_t v16 = (uint64_t *)a1[19];
          uint64_t v17 = (uint64_t *)a1[20];
          if (v16 != v17) {
            goto LABEL_17;
          }
LABEL_21:
          int v18 = 0;
          return (v15 + v9 + v18);
        }
      }
    }
  }
  int v15 = 0;
  uint64_t v16 = (uint64_t *)a1[19];
  uint64_t v17 = (uint64_t *)a1[20];
  if (v16 == v17) {
    goto LABEL_21;
  }
LABEL_17:
  int v18 = 0;
  do
  {
    uint64_t v19 = *v16++;
    v18 += sub_3AC808(a1[1], v19);
  }
  while (v16 != v17);
  return (v15 + v9 + v18);
}

void sub_F65434(uint64_t *a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  a4[1] = *a4;
  unint64_t v7 = a1 + 25;
  a1[26] = a1[25];
  uint64_t v8 = (int **)sub_EB0624(*(void **)a2, *(void *)(a2 + 8));
  unint64_t v9 = sub_2E4738(v8);
  uint64_t v10 = v7[5];
  uint64_t v11 = v7[4];
  uint64_t v12 = ((v10 - v11) << 6) - 1;
  unint64_t v125 = v9;
  uint64_t v118 = (uint64_t)(v7 + 3);
  if (v10 == v11) {
    uint64_t v12 = 0;
  }
  uint64_t v120 = (char **)v7;
  unint64_t v13 = v7[8] + v7[7];
  if (v12 == v13)
  {
    sub_F692A0(v118);
    uint64_t v11 = a1[29];
    unint64_t v13 = a1[33] + a1[32];
  }
  *(void *)(*(void *)(v11 + ((v13 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v13 & 0x1FF)) = v9;
  ++a1[33];
  sub_29603C((void **)v7, &v125);
  uint64_t v14 = a1[33];
  if (v14)
  {
    int v122 = a3;
    uint64_t v124 = v5;
    while (1)
    {
      int v15 = (void **)a1[29];
      uint64_t v16 = (unsigned int *)(*(void **)((char *)v15 + (((unint64_t)a1[32] >> 6) & 0x3FFFFFFFFFFFFF8)))[a1[32] & 0x1FF];
      unint64_t v17 = a1[32] + 1;
      a1[32] = v17;
      a1[33] = v14 - 1;
      if (v17 >= 0x400)
      {
        operator delete(*v15);
        a1[29] += 8;
        a1[32] -= 512;
      }
      sub_2E45D4(*a1, v16, (uint64_t)(a1 + 16), a3, 0, 0);
      int v18 = (int **)a1[16];
      uint64_t v19 = (int **)a1[17];
      if (v18 != v19) {
        break;
      }
LABEL_7:
      uint64_t v14 = a1[33];
      if (!v14) {
        return;
      }
    }
    uint64_t v123 = a1[17];
    while (1)
    {
      uint64_t v20 = *v18;
      int v21 = (unsigned __int16 *)((char *)*v18 - **v18);
      unsigned int v22 = *v21;
      if (a3) {
        break;
      }
      if (*((unsigned char *)v18 + 38))
      {
        if (v22 < 5) {
          goto LABEL_52;
        }
        unsigned __int16 v24 = v21[2];
        if (!v24)
        {
          if (v22 < 0x77 || (uint64_t v25 = v21[59]) == 0)
          {
LABEL_52:
            unint64_t v26 = 0;
            LODWORD(v27) = *((_DWORD *)v18 + 8);
            uint64_t v28 = (_DWORD *)a1[25];
            uint64_t v29 = (_DWORD *)a1[26];
            if (v28 != v29) {
              goto LABEL_55;
            }
            goto LABEL_57;
          }
          goto LABEL_50;
        }
LABEL_26:
        uint64_t v23 = v24;
        goto LABEL_27;
      }
      if (!v21[3])
      {
        unint64_t v46 = *(unsigned int *)((char *)v20 + v21[60]);
        unsigned int v47 = *((_DWORD *)v18 + 8);
        unint64_t v26 = v46 >> 16;
        unsigned int v48 = sub_511FC(v47);
        unsigned int v49 = v48 >> 1;
        char v50 = v48 & 0xFE;
        unsigned int v51 = v47 & ~(-1 << (v48 & 0xFE));
        int v52 = sub_51938(v51);
        int v53 = sub_51938(v51 >> 1);
        int v54 = v52 + (char)v46;
        uint64_t v5 = v124;
        int v55 = v53 + ((__int16)v46 >> 8);
        unsigned int v56 = (int)((((((v54 & ~(v54 >> 31)) - v54 + (v54 >> 31)) >> v49) + (v54 >> 31)) << v49)
                  + v54)
            % (1 << v49);
        unsigned int v57 = (int)((((((v55 & ~(v55 >> 31)) - v55 + (v55 >> 31)) >> v49) + (v55 >> 31)) << v49)
                  + v55)
            % (1 << v49);
        int v58 = -1 << v49;
        uint64_t v19 = (int **)v123;
        unsigned int v59 = ~(-1 << v49);
        if (v59 < v56) {
          unsigned int v43 = ~v58;
        }
        else {
          unsigned int v43 = v56;
        }
        if (v59 < v57) {
          unsigned int v44 = ~v58;
        }
        else {
          unsigned int v44 = v57;
        }
        int v45 = 1 << v50;
        a3 = v122;
LABEL_46:
        sub_518C8(v43, v44);
        LODWORD(v27) = v60 | v45;
        uint64_t v28 = (_DWORD *)a1[25];
        uint64_t v29 = (_DWORD *)a1[26];
        if (v28 != v29) {
          goto LABEL_55;
        }
        goto LABEL_57;
      }
      unint64_t v26 = __ROR8__(*(void *)((char *)v20 + v21[3]), 32);
      unint64_t v27 = HIDWORD(v26);
      uint64_t v28 = (_DWORD *)a1[25];
      uint64_t v29 = (_DWORD *)a1[26];
      if (v28 != v29) {
        goto LABEL_55;
      }
LABEL_57:
      if (v28 == v29)
      {
LABEL_58:
        int v61 = *((unsigned __int16 *)v18 + 18);
        int v62 = *((_DWORD *)v18 + 8);
        uint64_t v63 = sub_EB0624(*(void **)v5, *(void *)(v5 + 8));
        if (v62 == *(_DWORD *)(v63 + 32) && v61 == *(unsigned __int16 *)(v63 + 36)) {
          goto LABEL_13;
        }
        int v65 = *((unsigned __int16 *)v18 + 18);
        int v66 = *((_DWORD *)v18 + 8);
        uint64_t v67 = sub_EB0624(*(void **)(v5 + 16), *(void *)(v5 + 24));
        if (v66 == *(_DWORD *)(v67 + 32) && v65 == *(unsigned __int16 *)(v67 + 36)) {
          goto LABEL_13;
        }
        uint64_t v69 = *v18;
        int32x2_t v70 = (unsigned __int16 *)((char *)*v18 - **v18);
        unsigned int v71 = *v70;
        if (v71 >= 0xB && v70[5] && (int v72 = *(int *)((char *)v69 + v70[5]), (v72 & 0x2000000) != 0))
        {
          if ((v72 & 0x4000000) != 0) {
            goto LABEL_94;
          }
        }
        else
        {
          double v73 = v18[1];
          if (v73 && (double v74 = (unsigned __int16 *)((char *)v73 - *v73), *v74 >= 0x11u) && (v75 = v74[8]) != 0)
          {
            __int16 v76 = *(_WORD *)((char *)v73 + v75);
            if (v71 < 0xB || (v76 & 4) != 0)
            {
              if ((v76 & 4) != 0) {
                goto LABEL_94;
              }
              goto LABEL_81;
            }
          }
          else if (v71 < 0xB)
          {
            goto LABEL_81;
          }
          uint64_t v78 = v70[5];
          if (v78 && (*((unsigned char *)v69 + v78 + 2) & 1) != 0)
          {
LABEL_94:
            unint64_t v91 = v27 | (v26 << 32);
            unint64_t v93 = (char *)a1[26];
            unint64_t v92 = a1[27];
            if ((unint64_t)v93 < v92)
            {
              *(void *)unint64_t v93 = v91;
              uint64_t v94 = (uint64_t)(v93 + 8);
LABEL_122:
              uint64_t v114 = a1[30];
              uint64_t v115 = a1[29];
              uint64_t v116 = ((v114 - v115) << 6) - 1;
              a1[26] = v94;
              if (v114 == v115) {
                uint64_t v116 = 0;
              }
              unint64_t v117 = a1[33] + a1[32];
              if (v116 == v117)
              {
                sub_F692A0(v118);
                uint64_t v115 = a1[29];
                unint64_t v117 = a1[33] + a1[32];
              }
              *(void *)(*(void *)(v115 + ((v117 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v117 & 0x1FF)) = v91;
              ++a1[33];
              goto LABEL_13;
            }
            uint64_t v98 = *v120;
            uint64_t v99 = v93 - *v120;
            uint64_t v100 = v99 >> 3;
            unint64_t v101 = (v99 >> 3) + 1;
            if (v101 >> 61) {
              sub_2E00();
            }
            uint64_t v102 = v92 - (void)v98;
            if (v102 >> 2 > v101) {
              unint64_t v101 = v102 >> 2;
            }
            if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v101 = 0x1FFFFFFFFFFFFFFFLL;
            }
            unint64_t v119 = v101;
            if (v101)
            {
              if (v101 >> 61) {
LABEL_129:
              }
                sub_188D718();
              long long v103 = operator new(8 * v101);
              unint64_t v104 = (unint64_t *)&v103[8 * v100];
              *unint64_t v104 = v91;
              uint64_t v94 = (uint64_t)(v104 + 1);
              if (v93 == v98) {
                goto LABEL_120;
              }
LABEL_113:
              unint64_t v105 = v93 - 8 - v98;
              if (v105 < 0x58) {
                goto LABEL_133;
              }
              if ((unint64_t)(v93 - &v103[v99]) < 0x20) {
                goto LABEL_133;
              }
              uint64_t v106 = (v105 >> 3) + 1;
              uint64_t v107 = 8 * (v106 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v108 = &v93[-v107];
              unint64_t v104 = (unint64_t *)((char *)v104 - v107);
              uint64_t v109 = &v103[8 * v100 - 16];
              unint64_t v110 = v93 - 16;
              uint64_t v111 = v106 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v112 = *(_OWORD *)v110;
                *(v109 - 1) = *((_OWORD *)v110 - 1);
                *uint64_t v109 = v112;
                v109 -= 2;
                v110 -= 32;
                v111 -= 4;
              }
              while (v111);
              unint64_t v93 = v108;
              if (v106 != (v106 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_133:
                do
                {
                  unint64_t v113 = *((void *)v93 - 1);
                  v93 -= 8;
                  *--unint64_t v104 = v113;
                }
                while (v93 != v98);
              }
              unint64_t v93 = *v120;
            }
            else
            {
              long long v103 = 0;
              unint64_t v104 = (unint64_t *)(8 * v100);
              *(void *)(8 * v100) = v91;
              uint64_t v94 = 8 * v100 + 8;
              if (v93 != v98) {
                goto LABEL_113;
              }
            }
LABEL_120:
            a1[25] = (uint64_t)v104;
            a1[26] = v94;
            a1[27] = (uint64_t)&v103[8 * v119];
            uint64_t v5 = v124;
            if (v93) {
              operator delete(v93);
            }
            goto LABEL_122;
          }
        }
LABEL_81:
        uint64_t v79 = v18[4];
        unsigned int v80 = a4;
        long long v82 = (_DWORD *)a4[1];
        unint64_t v81 = a4[2];
        if ((unint64_t)v82 < v81)
        {
          *(void *)long long v82 = v79;
          uint64_t v83 = v82 + 2;
LABEL_102:
          v80[1] = (uint64_t)v83;
          goto LABEL_13;
        }
        unint64_t v84 = (_DWORD *)*a4;
        uint64_t v85 = ((uint64_t)v82 - *a4) >> 3;
        unint64_t v86 = v85 + 1;
        if ((unint64_t)(v85 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v87 = v81 - (void)v84;
        if (v87 >> 2 > v86) {
          unint64_t v86 = v87 >> 2;
        }
        if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v88 = v86;
        }
        if (v88)
        {
          if (v88 >> 61) {
            goto LABEL_129;
          }
          uint64_t v89 = (char *)operator new(8 * v88);
          unsigned int v80 = a4;
          uint64_t v90 = (uint64_t)&v89[8 * v85];
          *(void *)uint64_t v90 = v79;
          uint64_t v83 = (void *)(v90 + 8);
          if (v82 == v84) {
            goto LABEL_99;
          }
          do
          {
LABEL_97:
            int v96 = *(v82 - 2);
            v82 -= 2;
            int v97 = *(_DWORD *)((char *)v82 + 3);
            *(_DWORD *)(v90 - 8) = v96;
            v90 -= 8;
            *(_DWORD *)(v90 + 3) = v97;
          }
          while (v82 != v84);
          long long v82 = (_DWORD *)*v80;
        }
        else
        {
          uint64_t v89 = 0;
          uint64_t v90 = 8 * v85;
          uint64_t v95 = (int **)(8 * v85);
          unint64_t *v95 = v79;
          uint64_t v83 = v95 + 1;
          if (v82 != v84) {
            goto LABEL_97;
          }
        }
LABEL_99:
        uint64_t *v80 = v90;
        v80[1] = (uint64_t)v83;
        _OWORD v80[2] = (uint64_t)&v89[8 * v88];
        if (v82)
        {
          operator delete(v82);
          unsigned int v80 = a4;
        }
        uint64_t v5 = v124;
        goto LABEL_102;
      }
LABEL_13:
      v18 += 5;
      if (v18 == v19) {
        goto LABEL_7;
      }
    }
    if (!*((unsigned char *)v18 + 38))
    {
      if (v22 < 5) {
        goto LABEL_52;
      }
      unsigned __int16 v24 = v21[2];
      if (!v24)
      {
        if (v22 < 0x77) {
          goto LABEL_52;
        }
        uint64_t v25 = v21[59];
        if (!v25) {
          goto LABEL_52;
        }
LABEL_50:
        unint64_t v26 = *(unsigned __int16 *)((char *)v20 + v25);
        LODWORD(v27) = *((_DWORD *)v18 + 8);
        uint64_t v28 = (_DWORD *)a1[25];
        uint64_t v29 = (_DWORD *)a1[26];
        if (v28 != v29) {
          goto LABEL_55;
        }
        goto LABEL_57;
      }
      goto LABEL_26;
    }
    if (!v21[3])
    {
      unint64_t v30 = *(unsigned int *)((char *)v20 + v21[60]);
      unsigned int v31 = *((_DWORD *)v18 + 8);
      unint64_t v26 = v30 >> 16;
      unsigned int v32 = sub_511FC(v31);
      unsigned int v33 = v32 >> 1;
      char v34 = v32 & 0xFE;
      unsigned int v35 = v31 & ~(-1 << (v32 & 0xFE));
      int v36 = sub_51938(v35);
      int v37 = sub_51938(v35 >> 1);
      int v38 = v36 + (char)v30;
      uint64_t v5 = v124;
      int v39 = v37 + ((__int16)v30 >> 8);
      unsigned int v40 = (int)((((((v38 & ~(v38 >> 31)) - v38 + (v38 >> 31)) >> v33) + (v38 >> 31)) << v33)
                + v38)
          % (1 << v33);
      unsigned int v41 = (int)((((((v39 & ~(v39 >> 31)) - v39 + (v39 >> 31)) >> v33) + (v39 >> 31)) << v33)
                + v39)
          % (1 << v33);
      int v42 = -1 << v33;
      uint64_t v19 = (int **)v123;
      a3 = v122;
      if (~v42 < v40) {
        unsigned int v43 = ~v42;
      }
      else {
        unsigned int v43 = v40;
      }
      if (~v42 < v41) {
        unsigned int v44 = ~v42;
      }
      else {
        unsigned int v44 = v41;
      }
      int v45 = 1 << v34;
      goto LABEL_46;
    }
    uint64_t v23 = v21[3];
LABEL_27:
    unint64_t v26 = __ROR8__(*(void *)((char *)v20 + v23), 32);
    unint64_t v27 = HIDWORD(v26);
    uint64_t v28 = (_DWORD *)a1[25];
    uint64_t v29 = (_DWORD *)a1[26];
    if (v28 != v29)
    {
LABEL_55:
      while (*v28 != v27 || v28[1] != v26)
      {
        v28 += 2;
        if (v28 == v29) {
          goto LABEL_58;
        }
      }
    }
    goto LABEL_57;
  }
}

uint64_t sub_F65C4C(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "min_number_of_crossed_trips");
  *(_WORD *)a1 = sub_376928(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "min_number_of_crossed_live_observations");
  *(_WORD *)(a1 + 2) = sub_376928(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "min_crossing_factor");
  double v4 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 8) = v4;
  return a1;
}

void sub_F65D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F65D9C(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "min_crossing_factor");
  double v4 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)a1 = v4;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "observation_exponent");
  double v5 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 8) = v5;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "observation_threshold");
  int v6 = sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 16) = v6;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "from_observation_offset_factor");
  double v7 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 24) = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "ignore_destination_roads");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 32) = v8;
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "ignore_slip_roads");
  BOOL v9 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 33) = v9;
  return a1;
}

void sub_F65FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F65FE0(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "min_u_turn_angle");
  double v4 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)a1 = v4;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "min_turn_against_traffic_angle");
  double v5 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 8) = v5;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "max_straight_ahead_turn_angle");
  double v6 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 16) = v6;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9380;
  strcpy((char *)__p[0], "min_num_lanes_unprotected_turns_against_traffic");
  int v7 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 24) = v7;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9A80;
  strcpy((char *)__p[0], "min_crossed_trips_incomplete_lane_connectivity");
  *(_WORD *)(a1 + 28) = sub_29D6F0(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "traffic_sign_search_radius_m");
  *(void *)(a1 + 32) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "dangerous_transitions");
  BOOL v8 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_F65C4C(a1 + 40, v8);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "uncontrolled_live_observations");
  BOOL v9 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_F65D9C(a1 + 56, v9);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_F662B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_F662F0(void *result, unint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  BOOL v9 = result;
  if (result)
  {
    uint64_t result = (void *)sub_EB04C4(result);
    uint64_t v10 = result;
    if (a3)
    {
      uint64_t result = (void *)sub_EB04C4(a3);
      if (a2 >= (unint64_t)v10 || a4 >= (unint64_t)result)
      {
        if (a2 < (unint64_t)v10 != a4 < (unint64_t)result) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v11 = sub_EB0624(v9, a2);
        uint64_t result = (void *)sub_EB0624(a3, a4);
        if ((void *)v11 != result)
        {
          while (1)
          {
LABEL_20:
            unint64_t v20 = a2 + 1;
            unint64_t v21 = sub_EB04C4(v9);
            uint64_t result = (void *)sub_EB04C4(a3);
            if (a2 + 1 >= v21 || a4 >= (unint64_t)result)
            {
              if (v20 < v21 == a4 < (unint64_t)result) {
                return result;
              }
            }
            else
            {
              uint64_t v22 = sub_EB0624(v9, a2 + 1);
              uint64_t result = (void *)sub_EB0624(a3, a4);
              if ((void *)v22 == result) {
                return result;
              }
            }
            int v18 = (int **)sub_EB0624(v9, a2);
            uint64_t v19 = sub_EB0624(v9, v20);
            sub_F69CA0(a5, v18, v19);
            a2 = v20;
          }
        }
      }
    }
    else if (a2 < (unint64_t)result)
    {
      uint64_t result = (void *)sub_EB04C4(v9);
      if (a2 + 1 < (unint64_t)result)
      {
        do
        {
          int v15 = (int **)sub_EB0624(v9, a2);
          uint64_t v16 = sub_EB0624(v9, a2 + 1);
          sub_F69CA0(a5, v15, v16);
          uint64_t result = (void *)sub_EB04C4(v9);
          unint64_t v17 = a2 + 2;
          ++a2;
        }
        while (v17 < (unint64_t)result);
      }
    }
  }
  else if (a3)
  {
    uint64_t result = (void *)sub_EB04C4(a3);
    if (a4 < (unint64_t)result)
    {
      for (uint64_t result = (void *)sub_EB04C4(a3); a4 < (unint64_t)result; a2 = v12)
      {
        unint64_t v12 = a2 + 1;
        unint64_t v13 = (int **)sub_EB0624(0, a2);
        uint64_t v14 = sub_EB0624(0, v12);
        sub_F69CA0(a5, v13, v14);
        uint64_t result = (void *)sub_EB04C4(a3);
      }
    }
  }
  return result;
}

uint64_t sub_F66510(uint64_t a1, void *a2, void *a3)
{
  *(void *)a1 = sub_3750CC(a2);
  *(void *)(a1 + 8) = sub_3766F8(a2);
  *(void *)(a1 + 16) = sub_376B90(a2);
  *(void *)(a1 + 24) = sub_374D14(a2);
  sub_F68BBC(a1 + 32, a3);
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  return a1;
}

uint64_t sub_F66598(uint64_t a1, uint64_t a2)
{
  return sub_F665AC(*(void **)a2, *(void *)(a2 + 8), *(void **)(a2 + 16), *(void *)(a2 + 24) + 1);
}

uint64_t sub_F665AC(void *a1, unint64_t a2, void *a3, unint64_t a4)
{
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v8 = sub_46C760(a1);
        unint64_t v9 = sub_46C760(a3);
        if (a2 >= v8 || a4 >= v9)
        {
          if (a2 < v8 == a4 < v9) {
            return 1;
          }
        }
        else
        {
          uint64_t v10 = sub_46C8EC(a1, a2);
          if (v10 == sub_46C8EC(a3, a4)) {
            return 1;
          }
        }
        uint64_t v11 = (int **)sub_46C8EC(a1, a2);
        unint64_t v12 = (unsigned __int16 *)((char *)*v11 - **v11);
        unsigned int v13 = *v12;
        if (*((unsigned char *)v11 + 38))
        {
          if (v13 < 0xB) {
            return 0;
          }
          unsigned int v14 = v12[5];
          if (!v14) {
            return 0;
          }
          int v15 = 2;
        }
        else
        {
          if (v13 < 0xB) {
            return 0;
          }
          unsigned int v14 = v12[5];
          if (!v14) {
            return 0;
          }
          int v15 = 1;
        }
        ++a2;
        if ((*(int *)((char *)*v11 + v14) & v15) == 0) {
          return 0;
        }
      }
    }
    while (1)
    {
      BOOL v16 = a2 >= sub_46C760(a1);
      uint64_t result = v16;
      if (v16) {
        break;
      }
      int v18 = (int **)sub_46C8EC(a1, a2);
      uint64_t v19 = (unsigned __int16 *)((char *)*v18 - **v18);
      unsigned int v20 = *v19;
      if (*((unsigned char *)v18 + 38))
      {
        if (v20 < 0xB) {
          return 0;
        }
        unsigned int v21 = v19[5];
        if (!v21) {
          return 0;
        }
        int v22 = 2;
      }
      else
      {
        if (v20 < 0xB) {
          return 0;
        }
        unsigned int v21 = v19[5];
        if (!v21) {
          return 0;
        }
        int v22 = 1;
      }
      ++a2;
      if ((*(int *)((char *)*v18 + v21) & v22) == 0) {
        return 0;
      }
    }
  }
  else if (a3)
  {
    while (1)
    {
      BOOL v16 = a4 >= sub_46C760(a3);
      uint64_t result = v16;
      if (v16) {
        break;
      }
      uint64_t v23 = (int **)sub_46C8EC(0, a2);
      unsigned __int16 v24 = (unsigned __int16 *)((char *)*v23 - **v23);
      unsigned int v25 = *v24;
      if (*((unsigned char *)v23 + 38))
      {
        if (v25 < 0xB) {
          return 0;
        }
        unsigned int v26 = v24[5];
        if (!v26) {
          return 0;
        }
        int v27 = 2;
      }
      else
      {
        if (v25 < 0xB) {
          return 0;
        }
        unsigned int v26 = v24[5];
        if (!v26) {
          return 0;
        }
        int v27 = 1;
      }
      ++a2;
      if ((*(int *)((char *)*v23 + v26) & v27) == 0) {
        return 0;
      }
    }
  }
  else
  {
    return 1;
  }
  return result;
}

unint64_t sub_F667D8(uint64_t a1, uint64_t a2)
{
  double v3 = (void *)sub_46C8EC(*(void **)a2, *(void *)(a2 + 8));
  double v4 = (unsigned __int16 *)(*v3 - *(int *)*v3);
  if (*v4 < 0x2Fu) {
    return 0;
  }
  uint64_t v5 = v4[23];
  if (!v5) {
    return 0;
  }
  unsigned int v6 = *(unsigned __int8 *)(*v3 + v5);
  BOOL v7 = v6 > 0x2D;
  uint64_t v8 = (1 << v6) & 0x208040000000;
  BOOL v9 = v7 || v8 == 0;
  if (!v9
    && (uint64_t v10 = (void *)sub_46C8EC(*(void **)(a2 + 16), *(void *)(a2 + 24)),
        uint64_t v11 = (unsigned __int16 *)(*v10 - *(int *)*v10),
        *v11 >= 0x2Fu)
    && (uint64_t v12 = v11[23]) != 0
    && (unsigned int v13 = *(unsigned __int8 *)(*v10 + v12), v13 <= 0x2D))
  {
    return (0x208040000000uLL >> v13) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_F66898(uint64_t a1, uint64_t a2)
{
  double v4 = (int **)sub_46C8EC(*(void **)a2, *(void *)(a2 + 8));
  uint64_t v5 = (void *)sub_46C8EC(*(void **)(a2 + 16), *(void *)(a2 + 24));
  unsigned int v6 = (unsigned __int16 *)((char *)*v4 - **v4);
  if (*v6 < 0xBu) {
    return 1;
  }
  uint64_t v7 = v6[5];
  if (!v7) {
    return 1;
  }
  if ((~*(int *)((char *)*v4 + v7) & 0xA000000) != 0) {
    return 1;
  }
  uint64_t v8 = v5;
  BOOL v9 = (unsigned __int16 *)(*v5 - *(int *)*v5);
  if (*v9 < 0xBu) {
    return 1;
  }
  uint64_t v10 = v9[5];
  if (!v10 || (~*(_DWORD *)(*v5 + v10) & 0xA000000) != 0) {
    return 1;
  }
  *(void *)(a1 + 184) = *(void *)(a1 + 176);
  uint64_t v11 = *(void **)a2;
  unint64_t v12 = *(void *)(a2 + 8);
  unsigned int v13 = *(void **)(a2 + 16);
  unint64_t v14 = *(void *)(a2 + 24) + 1;
  char v34 = (uint64_t *)a1;
  unsigned int v35 = (char *)(a1 + 176);
  sub_F68ECC(v11, v12, v13, v14, (uint64_t)&v34);
  int v15 = *(uint64_t **)(a1 + 176);
  BOOL v16 = *(uint64_t **)(a1 + 184);
  if (v15 == v16)
  {
    LOWORD(v17) = 0;
  }
  else
  {
    int v17 = 0;
    do
    {
      uint64_t v18 = *v15++;
      v17 += sub_3AC808(*(void *)(a1 + 8), v18 ^ 0x1000000000000);
    }
    while (v15 != v16);
  }
  uint64_t result = 1;
  if (*(unsigned __int16 *)(a1 + 60) <= (unsigned __int16)v17)
  {
    uint64_t v33 = v8[4];
    char v32 = 1;
    char v31 = 0;
    unsigned int v20 = (unsigned __int16 *)((char *)*v4 - **v4);
    unsigned int v21 = *v20;
    if (*((unsigned char *)v4 + 38))
    {
      if (v21 < 0x29) {
        return 0;
      }
      unsigned int v22 = v20[20];
      if (!v22) {
        return 0;
      }
    }
    else
    {
      if (v21 < 0x27) {
        return 0;
      }
      unsigned int v22 = v20[19];
      if (!v22) {
        return 0;
      }
    }
    uint64_t v23 = (unsigned int *)((char *)*v4 + v22 + *(int *)((char *)*v4 + v22));
    unsigned int v26 = *v23;
    unsigned __int16 v24 = v23 + 1;
    uint64_t v25 = v26;
    char v34 = &v33;
    unsigned int v35 = &v32;
    int v36 = &v31;
    if (!v26) {
      return 0;
    }
    uint64_t v27 = 4 * v25 - 4;
    uint64_t v28 = v24;
    do
    {
      unsigned int v29 = *v28++;
      uint64_t result = sub_F690EC((uint64_t *)&v34, (int *)((char *)v24 + v29));
      if (result) {
        break;
      }
      uint64_t v30 = v27;
      v27 -= 4;
      unsigned __int16 v24 = v28;
    }
    while (v30);
  }
  return result;
}

uint64_t sub_F66A9C(uint64_t *a1, uint64_t a2)
{
  double v3 = (uint64_t **)(a1 + 22);
  a1[23] = a1[22];
  double v4 = *(void **)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  unsigned int v6 = *(void **)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24) + 1;
  v13[0] = a1;
  v13[1] = v3;
  sub_F68ECC(v4, v5, v6, v7, (uint64_t)v13);
  uint64_t v8 = *v3;
  BOOL v9 = (uint64_t *)a1[23];
  if (*v3 == v9) {
    return 0;
  }
  LODWORD(v10) = 0;
  do
  {
    uint64_t v11 = *v8++;
    uint64_t v10 = sub_3AC808(a1[1], v11 ^ 0x1000000000000) + v10;
  }
  while (v8 != v9);
  return v10;
}

uint64_t sub_F66B44(uint64_t a1, uint64_t a2)
{
  if (sub_F66CFC(a1, a2)) {
    return 1;
  }
  unint64_t v5 = (int **)sub_46C8EC(*(void **)a2, *(void *)(a2 + 8));
  uint64_t v6 = sub_46C8EC(*(void **)(a2 + 16), *(void *)(a2 + 24));
  unint64_t v7 = v5[1];
  uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
  unsigned int v9 = *v8;
  if (*((unsigned char *)v5 + 38))
  {
    if (v9 < 5) {
      goto LABEL_13;
    }
    unsigned int v10 = v8[2];
    if (!v10) {
      goto LABEL_13;
    }
  }
  else if (v9 < 9 || (unsigned int v10 = v8[4]) == 0)
  {
LABEL_13:
    __int16 v11 = 0;
    unint64_t v12 = *(int **)(v6 + 8);
    unsigned int v13 = (unsigned __int16 *)((char *)v12 - *v12);
    unsigned int v14 = *v13;
    if (*(unsigned char *)(v6 + 38)) {
      goto LABEL_14;
    }
LABEL_10:
    if (v14 >= 5)
    {
      unsigned int v15 = v13[2];
      if (v15) {
        goto LABEL_16;
      }
    }
LABEL_17:
    int v16 = 0;
    goto LABEL_18;
  }
  __int16 v11 = *(_WORD *)((char *)v7 + v10);
  unint64_t v12 = *(int **)(v6 + 8);
  unsigned int v13 = (unsigned __int16 *)((char *)v12 - *v12);
  unsigned int v14 = *v13;
  if (!*(unsigned char *)(v6 + 38)) {
    goto LABEL_10;
  }
LABEL_14:
  if (v14 < 9) {
    goto LABEL_17;
  }
  unsigned int v15 = v13[4];
  if (!v15) {
    goto LABEL_17;
  }
LABEL_16:
  int v16 = *(unsigned __int16 *)((char *)v12 + v15);
LABEL_18:
  unsigned __int16 v17 = v11 + 18000;
  unsigned __int16 v18 = v11 - 18000;
  if ((unsigned __int16)(v17 >> 5) < 0x465u) {
    unsigned __int16 v18 = v17;
  }
  int v19 = v16 - v18;
  if (v19 > 18000) {
    v19 -= 36000;
  }
  if (v19 < -17999) {
    v19 += 36000;
  }
  double v20 = (double)v19 / 100.0;
  if (fabs(v20) < *(double *)(a1 + 40)) {
    return 0;
  }
  unsigned int v21 = (unsigned __int16 *)((char *)*v5 - **v5);
  if (*v21 >= 0xBu && (uint64_t v22 = v21[5]) != 0) {
    int v23 = *((unsigned __int8 *)*v5 + v22 + 1) >> 7;
  }
  else {
    int v23 = 0;
  }
  return (v20 < 0.0) ^ v23;
}

BOOL sub_F66CFC(uint64_t a1, uint64_t a2)
{
  double v4 = (int **)sub_46C8EC(*(void **)a2, *(void *)(a2 + 8));
  unint64_t v5 = (int **)sub_46C8EC(*(void **)(a2 + 16), *(void *)(a2 + 24));
  if (*((unsigned __int16 *)v4 + 18) == *((unsigned __int16 *)v5 + 18) && *((_DWORD *)v4 + 8) == *((_DWORD *)v5 + 8)) {
    return 1;
  }
  unint64_t v7 = (unsigned __int16 *)((char *)*v4 - **v4);
  if (*v7 < 0xBu) {
    return 0;
  }
  uint64_t v8 = v7[5];
  if (!v8) {
    return 0;
  }
  if ((*((unsigned char *)*v4 + v8) & 4) == 0) {
    return 0;
  }
  unsigned int v9 = (unsigned __int16 *)((char *)*v5 - **v5);
  if (*v9 < 0xBu) {
    return 0;
  }
  uint64_t v10 = v9[5];
  if (!v10 || (*((unsigned char *)*v5 + v10) & 4) == 0) {
    return 0;
  }
  unint64_t v12 = v4[1];
  unsigned int v13 = (unsigned __int16 *)((char *)v12 - *v12);
  unsigned int v14 = *v13;
  if (!*((unsigned char *)v4 + 38))
  {
    if (v14 < 9) {
      goto LABEL_20;
    }
    unsigned int v15 = v13[4];
    if (!v15) {
      goto LABEL_20;
    }
LABEL_19:
    __int16 v16 = *(_WORD *)((char *)v12 + v15);
    goto LABEL_21;
  }
  if (v14 >= 5)
  {
    unsigned int v15 = v13[2];
    if (v15) {
      goto LABEL_19;
    }
  }
LABEL_20:
  __int16 v16 = 0;
LABEL_21:
  unsigned __int16 v17 = v5[1];
  unsigned __int16 v18 = (unsigned __int16 *)((char *)v17 - *v17);
  unsigned int v19 = *v18;
  if (*((unsigned char *)v5 + 38))
  {
    if (v19 < 9 || (unsigned int v20 = v18[4]) == 0)
    {
LABEL_28:
      int v21 = 0;
      goto LABEL_29;
    }
  }
  else
  {
    if (v19 < 5) {
      goto LABEL_28;
    }
    unsigned int v20 = v18[2];
    if (!v20) {
      goto LABEL_28;
    }
  }
  int v21 = *(unsigned __int16 *)((char *)v17 + v20);
LABEL_29:
  unsigned __int16 v22 = v16 + 18000;
  unsigned __int16 v23 = v16 - 18000;
  if ((unsigned __int16)(v22 >> 5) < 0x465u) {
    unsigned __int16 v23 = v22;
  }
  int v24 = v21 - v23;
  if (v24 > 18000) {
    v24 -= 36000;
  }
  if (v24 < -17999) {
    v24 += 36000;
  }
  return fabs((double)v24 / 100.0) >= *(double *)(a1 + 32);
}

uint64_t sub_F66EC4(uint64_t a1, uint64_t a2)
{
  if (!sub_F66B44(a1, a2)) {
    return 0;
  }
  double v4 = (int **)sub_46C8EC(*(void **)a2, *(void *)(a2 + 8));
  unint64_t v5 = (unsigned __int16 *)((char *)*v4 - **v4);
  if (*v5 < 0xBu) {
    return 0;
  }
  uint64_t v6 = v5[5];
  if (!v6 || (~*(int *)((char *)*v4 + v6) & 0xA000000) != 0) {
    return 0;
  }
  unint64_t v7 = v4;
  uint64_t v8 = (int **)sub_46C8EC(*(void **)(a2 + 16), *(void *)(a2 + 24));
  unsigned int v9 = (unsigned __int16 *)((char *)*v8 - **v8);
  if (*v9 >= 0xBu)
  {
    uint64_t v10 = v9[5];
    if (v10)
    {
      if ((*((unsigned char *)*v8 + v10 + 3) & 8) != 0)
      {
        unsigned int v57 = v8[4];
        char v56 = 1;
        char v55 = 1;
        __int16 v11 = (unsigned __int16 *)((char *)*v7 - **v7);
        unsigned int v12 = *v11;
        if (*((unsigned char *)v7 + 38))
        {
          if (v12 < 0x29) {
            goto LABEL_18;
          }
          unsigned int v13 = v11[20];
          if (!v13) {
            goto LABEL_18;
          }
        }
        else
        {
          if (v12 < 0x27) {
            goto LABEL_18;
          }
          unsigned int v13 = v11[19];
          if (!v13) {
            goto LABEL_18;
          }
        }
        unsigned int v14 = (unsigned int *)((char *)*v7 + v13 + *(int *)((char *)*v7 + v13));
        unsigned int v17 = *v14;
        __int16 v16 = v14 + 1;
        uint64_t v15 = v17;
        v58[0] = (uint64_t)&v57;
        v58[1] = (uint64_t)&v56;
        v58[2] = (uint64_t)&v55;
        if (v17)
        {
          uint64_t v18 = 4 * v15;
          while ((sub_F690EC(v58, (int *)((char *)v16 + *v16)) & 1) == 0)
          {
            ++v16;
            v18 -= 4;
            if (!v18) {
              goto LABEL_18;
            }
          }
          return 0;
        }
      }
    }
  }
LABEL_18:
  if (sub_2E35CC(v7) < *(_DWORD *)(a1 + 56)) {
    return 0;
  }
  unsigned int v20 = *v7;
  int v21 = (unsigned __int16 *)((char *)*v7 - **v7);
  unsigned int v22 = *v21;
  if (v22 >= 0xB)
  {
    uint64_t v23 = v21[5];
    if (v21[5])
    {
      if ((*((unsigned char *)v20 + v23) & 4) != 0)
      {
        int v36 = *((unsigned __int8 *)v7 + 38);
        uint64_t v25 = (char *)v7 + 38;
        if (v36) {
          int v35 = 5;
        }
        else {
          int v35 = 6;
        }
        goto LABEL_46;
      }
    }
  }
  int v26 = *((unsigned __int8 *)v7 + 38);
  uint64_t v25 = (char *)v7 + 38;
  int v24 = v26;
  if (!v26)
  {
    if (v22 < 0x27)
    {
LABEL_40:
      if (v22 < 0xB) {
        return 0;
      }
      goto LABEL_41;
    }
    unsigned int v27 = v21[19];
    if (!v21[19])
    {
LABEL_41:
      LODWORD(v23) = v21[5];
      if (!v21[5]) {
        return 0;
      }
      int v35 = 6;
      goto LABEL_46;
    }
LABEL_29:
    uint64_t v28 = (unsigned int *)((char *)v20 + v27 + *(int *)((char *)v20 + v27));
    uint64_t v29 = *v28;
    if (v29)
    {
      unint64_t v30 = 0;
      uint64_t v31 = 4 * v29;
      do
      {
        uint64_t v32 = v28[v30 / 4 + 1];
        uint64_t v33 = (char *)&v28[v30 / 4] + v32 - *(int *)((char *)&v28[v30 / 4 + 1] + v32);
        if (*((unsigned __int16 *)v33 + 2) >= 5u)
        {
          uint64_t v34 = *((unsigned __int16 *)v33 + 4);
          if (v34)
          {
            if ((*((unsigned char *)&v28[v30 / 4 + 1] + v32 + v34) & 5) == 1) {
              return 0;
            }
          }
        }
        v30 += 4;
      }
      while (v31 != v30);
    }
    if (v24)
    {
LABEL_37:
      if (v22 < 0xB) {
        return 0;
      }
      goto LABEL_38;
    }
    goto LABEL_40;
  }
  if (v22 < 0x29) {
    goto LABEL_37;
  }
  unsigned int v27 = v21[20];
  if (v21[20]) {
    goto LABEL_29;
  }
LABEL_38:
  LODWORD(v23) = v21[5];
  if (!v21[5]) {
    return 0;
  }
  int v35 = 5;
LABEL_46:
  if ((*(int *)((char *)v20 + v23) & v35) == 0) {
    return 0;
  }
  int v37 = operator new(6uLL);
  *int v37 = 1;
  if (*v25)
  {
    if (v22 < 0x29) {
      goto LABEL_67;
    }
    unsigned int v38 = v21[20];
    if (!v21[20]) {
      goto LABEL_67;
    }
  }
  else
  {
    if (v22 < 0x27) {
      goto LABEL_67;
    }
    unsigned int v38 = v21[19];
    if (!v21[19]) {
      goto LABEL_67;
    }
  }
  int v39 = (unsigned int *)((char *)v20 + v38 + *(int *)((char *)v20 + v38));
  unsigned int v42 = *v39;
  unsigned int v40 = v39 + 1;
  uint64_t v41 = v42;
  if (v42)
  {
    unsigned int v43 = &v40[v41];
    while (1)
    {
      unsigned int v44 = (int *)((char *)v40 + *v40);
      int v45 = (unsigned __int16 *)((char *)v44 - *v44);
      if (*v45 >= 0xBu)
      {
        uint64_t v46 = v45[5];
        if (v45[5])
        {
          uint64_t v47 = v45[2];
          if (!v47 || (*((unsigned char *)v44 + v47) & 4) == 0)
          {
            unsigned int v48 = (int *)((char *)v44 + v46 + *(unsigned int *)((char *)v44 + v46));
            unsigned int v51 = *v48;
            unsigned int v49 = (unsigned __int8 *)(v48 + 1);
            uint64_t v50 = v51;
            if (v51) {
              break;
            }
          }
        }
      }
LABEL_55:
      if (++v40 == v43) {
        goto LABEL_67;
      }
    }
    while (1)
    {
      unsigned int v52 = *v49 - 1;
      int v53 = v37 + 6;
      if (v52 <= 0xC)
      {
        int v53 = v37 + 6;
        if ((0x1255u >> v52)) {
          int v53 = &v37[qword_20F1358[(char)v52]];
        }
      }
      if (v53 - v37 != 6) {
        break;
      }
      ++v49;
      if (!--v50) {
        goto LABEL_55;
      }
    }
    uint64_t v54 = 0;
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v54 = 1;
LABEL_68:
  operator delete(v37);
  return v54;
}

uint64_t sub_F67274(uint64_t a1, uint64_t a2)
{
  double v3 = (void *)sub_46C8EC(*(void **)a2, *(void *)(a2 + 8));
  double v4 = (unsigned __int16 *)(*v3 - *(int *)*v3);
  if (*v4 < 0xBu) {
    return 0;
  }
  uint64_t v5 = v4[5];
  if (!v5 || (*(unsigned char *)(*v3 + v5 + 3) & 2) == 0) {
    return 0;
  }
  unint64_t v7 = *(void **)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  unsigned int v9 = *(void **)(a2 + 16);
  unint64_t v10 = *(void *)(a2 + 24);

  return sub_F69EA8(v7, v8, v9, v10);
}

uint64_t sub_F672F0(uint64_t a1, uint64_t a2)
{
  return sub_F67308(*(void **)a2, *(void *)(a2 + 8) + 1, *(void **)(a2 + 16), *(void *)(a2 + 24), 0);
}

uint64_t sub_F67308(void *a1, unint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v11 = sub_46C760(a1);
        unint64_t v12 = sub_46C760(a3);
        if (a2 >= v11 || a4 >= v12)
        {
          if (a2 < v11 == a4 < v12) {
            return a5;
          }
        }
        else
        {
          uint64_t v13 = sub_46C8EC(a1, a2);
          if (v13 == sub_46C8EC(a3, a4)) {
            return a5;
          }
        }
        unsigned int v14 = (void *)sub_46C8EC(a1, a2);
        uint64_t v15 = (unsigned __int16 *)(*v14 - *(int *)*v14);
        if (*v15 >= 9u && (uint64_t v16 = v15[4]) != 0) {
          uint64_t v10 = *(unsigned int *)(*v14 + v16);
        }
        else {
          uint64_t v10 = 0;
        }
        a5 += v10;
        ++a2;
      }
    }
    while (a2 < sub_46C760(a1))
    {
      uint64_t v18 = (void *)sub_46C8EC(a1, a2);
      unsigned int v19 = (unsigned __int16 *)(*v18 - *(int *)*v18);
      if (*v19 >= 9u && (uint64_t v20 = v19[4]) != 0) {
        uint64_t v17 = *(unsigned int *)(*v18 + v20);
      }
      else {
        uint64_t v17 = 0;
      }
      a5 += v17;
      ++a2;
    }
  }
  else if (a3)
  {
    while (a4 < sub_46C760(a3))
    {
      uint64_t v23 = (void *)sub_46C8EC(0, a2);
      int v24 = (unsigned __int16 *)(*v23 - *(int *)*v23);
      if (*v24 >= 9u && (uint64_t v25 = v24[4]) != 0) {
        uint64_t v22 = *(unsigned int *)(*v23 + v25);
      }
      else {
        uint64_t v22 = 0;
      }
      a5 += v22;
      ++a2;
    }
  }
  return a5;
}

uint64_t sub_F674A0(uint64_t *a1, uint64_t a2)
{
  sub_F675CC(a1, a2, 1, a1 + 19);
  uint64_t v4 = sub_46C8EC(*(void **)a2, *(void *)(a2 + 8));
  if (*(unsigned char *)(v4 + 38)) {
    uint64_t v5 = (int **)(v4 + 24);
  }
  else {
    uint64_t v5 = (int **)(v4 + 16);
  }
  uint64_t v6 = *v5;
  if (!v6
    || (unint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6), *v7 < 7u)
    || (uint64_t v8 = v7[3]) == 0
    || (int v9 = *(unsigned __int16 *)((char *)v6 + v8), (_WORD)v9 == 0xFFFF))
  {
    int v9 = 0;
  }
  uint64_t v10 = sub_46C8EC(*(void **)(a2 + 16), *(void *)(a2 + 24));
  if (*(unsigned char *)(v10 + 38)) {
    unint64_t v11 = (int **)(v10 + 16);
  }
  else {
    unint64_t v11 = (int **)(v10 + 24);
  }
  unint64_t v12 = *v11;
  if (v12)
  {
    uint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
    if (*v13 >= 7u)
    {
      uint64_t v14 = v13[3];
      if (v14)
      {
        int v15 = *(unsigned __int16 *)((char *)v12 + v14);
        if ((_WORD)v15 != 0xFFFF)
        {
          uint64_t v16 = (uint64_t *)a1[19];
          uint64_t v17 = (uint64_t *)a1[20];
          if (v16 != v17) {
            goto LABEL_17;
          }
LABEL_21:
          int v18 = 0;
          return (v15 + v9 + v18);
        }
      }
    }
  }
  int v15 = 0;
  uint64_t v16 = (uint64_t *)a1[19];
  uint64_t v17 = (uint64_t *)a1[20];
  if (v16 == v17) {
    goto LABEL_21;
  }
LABEL_17:
  int v18 = 0;
  do
  {
    uint64_t v19 = *v16++;
    v18 += sub_3AC808(a1[1], v19);
  }
  while (v16 != v17);
  return (v15 + v9 + v18);
}

void sub_F675CC(uint64_t *a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  a4[1] = *a4;
  unint64_t v7 = a1 + 25;
  a1[26] = a1[25];
  uint64_t v8 = (int **)sub_46C8EC(*(void **)a2, *(void *)(a2 + 8));
  unint64_t v9 = sub_2E4738(v8);
  uint64_t v10 = v7[5];
  uint64_t v11 = v7[4];
  uint64_t v12 = ((v10 - v11) << 6) - 1;
  unint64_t v125 = v9;
  uint64_t v118 = (uint64_t)(v7 + 3);
  if (v10 == v11) {
    uint64_t v12 = 0;
  }
  uint64_t v120 = (char **)v7;
  unint64_t v13 = v7[8] + v7[7];
  if (v12 == v13)
  {
    sub_F692A0(v118);
    uint64_t v11 = a1[29];
    unint64_t v13 = a1[33] + a1[32];
  }
  *(void *)(*(void *)(v11 + ((v13 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v13 & 0x1FF)) = v9;
  ++a1[33];
  sub_29603C((void **)v7, &v125);
  uint64_t v14 = a1[33];
  if (v14)
  {
    int v122 = a3;
    uint64_t v124 = v5;
    while (1)
    {
      int v15 = (void **)a1[29];
      uint64_t v16 = (unsigned int *)(*(void **)((char *)v15 + (((unint64_t)a1[32] >> 6) & 0x3FFFFFFFFFFFFF8)))[a1[32] & 0x1FF];
      unint64_t v17 = a1[32] + 1;
      a1[32] = v17;
      a1[33] = v14 - 1;
      if (v17 >= 0x400)
      {
        operator delete(*v15);
        a1[29] += 8;
        a1[32] -= 512;
      }
      sub_2E45D4(*a1, v16, (uint64_t)(a1 + 16), a3, 0, 0);
      int v18 = (int **)a1[16];
      uint64_t v19 = (int **)a1[17];
      if (v18 != v19) {
        break;
      }
LABEL_7:
      uint64_t v14 = a1[33];
      if (!v14) {
        return;
      }
    }
    uint64_t v123 = a1[17];
    while (1)
    {
      uint64_t v20 = *v18;
      int v21 = (unsigned __int16 *)((char *)*v18 - **v18);
      unsigned int v22 = *v21;
      if (a3) {
        break;
      }
      if (*((unsigned char *)v18 + 38))
      {
        if (v22 < 5) {
          goto LABEL_52;
        }
        unsigned __int16 v24 = v21[2];
        if (!v24)
        {
          if (v22 < 0x77 || (uint64_t v25 = v21[59]) == 0)
          {
LABEL_52:
            unint64_t v26 = 0;
            LODWORD(v27) = *((_DWORD *)v18 + 8);
            uint64_t v28 = (_DWORD *)a1[25];
            uint64_t v29 = (_DWORD *)a1[26];
            if (v28 != v29) {
              goto LABEL_55;
            }
            goto LABEL_57;
          }
          goto LABEL_50;
        }
LABEL_26:
        uint64_t v23 = v24;
        goto LABEL_27;
      }
      if (!v21[3])
      {
        unint64_t v46 = *(unsigned int *)((char *)v20 + v21[60]);
        unsigned int v47 = *((_DWORD *)v18 + 8);
        unint64_t v26 = v46 >> 16;
        unsigned int v48 = sub_511FC(v47);
        unsigned int v49 = v48 >> 1;
        char v50 = v48 & 0xFE;
        unsigned int v51 = v47 & ~(-1 << (v48 & 0xFE));
        int v52 = sub_51938(v51);
        int v53 = sub_51938(v51 >> 1);
        int v54 = v52 + (char)v46;
        uint64_t v5 = v124;
        int v55 = v53 + ((__int16)v46 >> 8);
        unsigned int v56 = (int)((((((v54 & ~(v54 >> 31)) - v54 + (v54 >> 31)) >> v49) + (v54 >> 31)) << v49)
                  + v54)
            % (1 << v49);
        unsigned int v57 = (int)((((((v55 & ~(v55 >> 31)) - v55 + (v55 >> 31)) >> v49) + (v55 >> 31)) << v49)
                  + v55)
            % (1 << v49);
        int v58 = -1 << v49;
        uint64_t v19 = (int **)v123;
        unsigned int v59 = ~(-1 << v49);
        if (v59 < v56) {
          unsigned int v43 = ~v58;
        }
        else {
          unsigned int v43 = v56;
        }
        if (v59 < v57) {
          unsigned int v44 = ~v58;
        }
        else {
          unsigned int v44 = v57;
        }
        int v45 = 1 << v50;
        a3 = v122;
LABEL_46:
        sub_518C8(v43, v44);
        LODWORD(v27) = v60 | v45;
        uint64_t v28 = (_DWORD *)a1[25];
        uint64_t v29 = (_DWORD *)a1[26];
        if (v28 != v29) {
          goto LABEL_55;
        }
        goto LABEL_57;
      }
      unint64_t v26 = __ROR8__(*(void *)((char *)v20 + v21[3]), 32);
      unint64_t v27 = HIDWORD(v26);
      uint64_t v28 = (_DWORD *)a1[25];
      uint64_t v29 = (_DWORD *)a1[26];
      if (v28 != v29) {
        goto LABEL_55;
      }
LABEL_57:
      if (v28 == v29)
      {
LABEL_58:
        int v61 = *((unsigned __int16 *)v18 + 18);
        int v62 = *((_DWORD *)v18 + 8);
        uint64_t v63 = sub_46C8EC(*(void **)v5, *(void *)(v5 + 8));
        if (v62 == *(_DWORD *)(v63 + 32) && v61 == *(unsigned __int16 *)(v63 + 36)) {
          goto LABEL_13;
        }
        int v65 = *((unsigned __int16 *)v18 + 18);
        int v66 = *((_DWORD *)v18 + 8);
        uint64_t v67 = sub_46C8EC(*(void **)(v5 + 16), *(void *)(v5 + 24));
        if (v66 == *(_DWORD *)(v67 + 32) && v65 == *(unsigned __int16 *)(v67 + 36)) {
          goto LABEL_13;
        }
        uint64_t v69 = *v18;
        int32x2_t v70 = (unsigned __int16 *)((char *)*v18 - **v18);
        unsigned int v71 = *v70;
        if (v71 >= 0xB && v70[5] && (int v72 = *(int *)((char *)v69 + v70[5]), (v72 & 0x2000000) != 0))
        {
          if ((v72 & 0x4000000) != 0) {
            goto LABEL_94;
          }
        }
        else
        {
          double v73 = v18[1];
          if (v73 && (double v74 = (unsigned __int16 *)((char *)v73 - *v73), *v74 >= 0x11u) && (v75 = v74[8]) != 0)
          {
            __int16 v76 = *(_WORD *)((char *)v73 + v75);
            if (v71 < 0xB || (v76 & 4) != 0)
            {
              if ((v76 & 4) != 0) {
                goto LABEL_94;
              }
              goto LABEL_81;
            }
          }
          else if (v71 < 0xB)
          {
            goto LABEL_81;
          }
          uint64_t v78 = v70[5];
          if (v78 && (*((unsigned char *)v69 + v78 + 2) & 1) != 0)
          {
LABEL_94:
            unint64_t v91 = v27 | (v26 << 32);
            unint64_t v93 = (char *)a1[26];
            unint64_t v92 = a1[27];
            if ((unint64_t)v93 < v92)
            {
              *(void *)unint64_t v93 = v91;
              uint64_t v94 = (uint64_t)(v93 + 8);
LABEL_122:
              uint64_t v114 = a1[30];
              uint64_t v115 = a1[29];
              uint64_t v116 = ((v114 - v115) << 6) - 1;
              a1[26] = v94;
              if (v114 == v115) {
                uint64_t v116 = 0;
              }
              unint64_t v117 = a1[33] + a1[32];
              if (v116 == v117)
              {
                sub_F692A0(v118);
                uint64_t v115 = a1[29];
                unint64_t v117 = a1[33] + a1[32];
              }
              *(void *)(*(void *)(v115 + ((v117 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v117 & 0x1FF)) = v91;
              ++a1[33];
              goto LABEL_13;
            }
            uint64_t v98 = *v120;
            uint64_t v99 = v93 - *v120;
            uint64_t v100 = v99 >> 3;
            unint64_t v101 = (v99 >> 3) + 1;
            if (v101 >> 61) {
              sub_2E00();
            }
            uint64_t v102 = v92 - (void)v98;
            if (v102 >> 2 > v101) {
              unint64_t v101 = v102 >> 2;
            }
            if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v101 = 0x1FFFFFFFFFFFFFFFLL;
            }
            unint64_t v119 = v101;
            if (v101)
            {
              if (v101 >> 61) {
LABEL_129:
              }
                sub_188D718();
              long long v103 = operator new(8 * v101);
              unint64_t v104 = (unint64_t *)&v103[8 * v100];
              *unint64_t v104 = v91;
              uint64_t v94 = (uint64_t)(v104 + 1);
              if (v93 == v98) {
                goto LABEL_120;
              }
LABEL_113:
              unint64_t v105 = v93 - 8 - v98;
              if (v105 < 0x58) {
                goto LABEL_133;
              }
              if ((unint64_t)(v93 - &v103[v99]) < 0x20) {
                goto LABEL_133;
              }
              uint64_t v106 = (v105 >> 3) + 1;
              uint64_t v107 = 8 * (v106 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v108 = &v93[-v107];
              unint64_t v104 = (unint64_t *)((char *)v104 - v107);
              uint64_t v109 = &v103[8 * v100 - 16];
              unint64_t v110 = v93 - 16;
              uint64_t v111 = v106 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v112 = *(_OWORD *)v110;
                *(v109 - 1) = *((_OWORD *)v110 - 1);
                *uint64_t v109 = v112;
                v109 -= 2;
                v110 -= 32;
                v111 -= 4;
              }
              while (v111);
              unint64_t v93 = v108;
              if (v106 != (v106 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_133:
                do
                {
                  unint64_t v113 = *((void *)v93 - 1);
                  v93 -= 8;
                  *--unint64_t v104 = v113;
                }
                while (v93 != v98);
              }
              unint64_t v93 = *v120;
            }
            else
            {
              long long v103 = 0;
              unint64_t v104 = (unint64_t *)(8 * v100);
              *(void *)(8 * v100) = v91;
              uint64_t v94 = 8 * v100 + 8;
              if (v93 != v98) {
                goto LABEL_113;
              }
            }
LABEL_120:
            a1[25] = (uint64_t)v104;
            a1[26] = v94;
            a1[27] = (uint64_t)&v103[8 * v119];
            uint64_t v5 = v124;
            if (v93) {
              operator delete(v93);
            }
            goto LABEL_122;
          }
        }
LABEL_81:
        uint64_t v79 = v18[4];
        unsigned int v80 = a4;
        long long v82 = (_DWORD *)a4[1];
        unint64_t v81 = a4[2];
        if ((unint64_t)v82 < v81)
        {
          *(void *)long long v82 = v79;
          uint64_t v83 = v82 + 2;
LABEL_102:
          v80[1] = (uint64_t)v83;
          goto LABEL_13;
        }
        unint64_t v84 = (_DWORD *)*a4;
        uint64_t v85 = ((uint64_t)v82 - *a4) >> 3;
        unint64_t v86 = v85 + 1;
        if ((unint64_t)(v85 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v87 = v81 - (void)v84;
        if (v87 >> 2 > v86) {
          unint64_t v86 = v87 >> 2;
        }
        if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v88 = v86;
        }
        if (v88)
        {
          if (v88 >> 61) {
            goto LABEL_129;
          }
          uint64_t v89 = (char *)operator new(8 * v88);
          unsigned int v80 = a4;
          uint64_t v90 = (uint64_t)&v89[8 * v85];
          *(void *)uint64_t v90 = v79;
          uint64_t v83 = (void *)(v90 + 8);
          if (v82 == v84) {
            goto LABEL_99;
          }
          do
          {
LABEL_97:
            int v96 = *(v82 - 2);
            v82 -= 2;
            int v97 = *(_DWORD *)((char *)v82 + 3);
            *(_DWORD *)(v90 - 8) = v96;
            v90 -= 8;
            *(_DWORD *)(v90 + 3) = v97;
          }
          while (v82 != v84);
          long long v82 = (_DWORD *)*v80;
        }
        else
        {
          uint64_t v89 = 0;
          uint64_t v90 = 8 * v85;
          uint64_t v95 = (int **)(8 * v85);
          unint64_t *v95 = v79;
          uint64_t v83 = v95 + 1;
          if (v82 != v84) {
            goto LABEL_97;
          }
        }
LABEL_99:
        uint64_t *v80 = v90;
        v80[1] = (uint64_t)v83;
        _OWORD v80[2] = (uint64_t)&v89[8 * v88];
        if (v82)
        {
          operator delete(v82);
          unsigned int v80 = a4;
        }
        uint64_t v5 = v124;
        goto LABEL_102;
      }
LABEL_13:
      v18 += 5;
      if (v18 == v19) {
        goto LABEL_7;
      }
    }
    if (!*((unsigned char *)v18 + 38))
    {
      if (v22 < 5) {
        goto LABEL_52;
      }
      unsigned __int16 v24 = v21[2];
      if (!v24)
      {
        if (v22 < 0x77) {
          goto LABEL_52;
        }
        uint64_t v25 = v21[59];
        if (!v25) {
          goto LABEL_52;
        }
LABEL_50:
        unint64_t v26 = *(unsigned __int16 *)((char *)v20 + v25);
        LODWORD(v27) = *((_DWORD *)v18 + 8);
        uint64_t v28 = (_DWORD *)a1[25];
        uint64_t v29 = (_DWORD *)a1[26];
        if (v28 != v29) {
          goto LABEL_55;
        }
        goto LABEL_57;
      }
      goto LABEL_26;
    }
    if (!v21[3])
    {
      unint64_t v30 = *(unsigned int *)((char *)v20 + v21[60]);
      unsigned int v31 = *((_DWORD *)v18 + 8);
      unint64_t v26 = v30 >> 16;
      unsigned int v32 = sub_511FC(v31);
      unsigned int v33 = v32 >> 1;
      char v34 = v32 & 0xFE;
      unsigned int v35 = v31 & ~(-1 << (v32 & 0xFE));
      int v36 = sub_51938(v35);
      int v37 = sub_51938(v35 >> 1);
      int v38 = v36 + (char)v30;
      uint64_t v5 = v124;
      int v39 = v37 + ((__int16)v30 >> 8);
      unsigned int v40 = (int)((((((v38 & ~(v38 >> 31)) - v38 + (v38 >> 31)) >> v33) + (v38 >> 31)) << v33)
                + v38)
          % (1 << v33);
      unsigned int v41 = (int)((((((v39 & ~(v39 >> 31)) - v39 + (v39 >> 31)) >> v33) + (v39 >> 31)) << v33)
                + v39)
          % (1 << v33);
      int v42 = -1 << v33;
      uint64_t v19 = (int **)v123;
      a3 = v122;
      if (~v42 < v40) {
        unsigned int v43 = ~v42;
      }
      else {
        unsigned int v43 = v40;
      }
      if (~v42 < v41) {
        unsigned int v44 = ~v42;
      }
      else {
        unsigned int v44 = v41;
      }
      int v45 = 1 << v34;
      goto LABEL_46;
    }
    uint64_t v23 = v21[3];
LABEL_27:
    unint64_t v26 = __ROR8__(*(void *)((char *)v20 + v23), 32);
    unint64_t v27 = HIDWORD(v26);
    uint64_t v28 = (_DWORD *)a1[25];
    uint64_t v29 = (_DWORD *)a1[26];
    if (v28 != v29)
    {
LABEL_55:
      while (*v28 != v27 || v28[1] != v26)
      {
        v28 += 2;
        if (v28 == v29) {
          goto LABEL_58;
        }
      }
    }
    goto LABEL_57;
  }
}

uint64_t sub_F67DE4(uint64_t a1, void **a2, int a3)
{
  if (a3 != 2 && *(_WORD *)(a1 + 74)) {
    return 0;
  }
  uint64_t v5 = (void *)sub_46C8EC(*a2, (uint64_t)a2[1]);
  uint64_t v6 = (unsigned __int16 *)(*v5 - *(int *)*v5);
  if (*v6 < 0xBu) {
    return 0;
  }
  uint64_t v7 = v6[5];
  if (!v7) {
    return 0;
  }
  if ((*(unsigned char *)(*v5 + v7 + 3) & 2) == 0) {
    return 0;
  }
  *(void *)(a1 + 184) = *(void *)(a1 + 176);
  uint64_t v8 = *a2;
  unint64_t v9 = (unint64_t)a2[1];
  uint64_t v10 = a2[2];
  unint64_t v11 = (unint64_t)a2[3] + 1;
  unsigned int v57 = (int *)a1;
  uint64_t v58 = a1 + 176;
  sub_F68ECC(v8, v9, v10, v11, (uint64_t)&v57);
  if (*(void *)(a1 + 176) == *(void *)(a1 + 184)) {
    return 0;
  }
  uint64_t v12 = sub_46C8EC(*a2, (uint64_t)a2[1]);
  if (*(unsigned char *)(v12 + 38)) {
    unint64_t v13 = (int **)(v12 + 24);
  }
  else {
    unint64_t v13 = (int **)(v12 + 16);
  }
  uint64_t v14 = *v13;
  if (!v14
    || (int v15 = (unsigned __int16 *)((char *)v14 - *v14), *v15 < 7u)
    || (uint64_t v16 = v15[3]) == 0
    || (unsigned __int16 v17 = *(_WORD *)((char *)v14 + v16), v17 == 0xFFFF))
  {
    unsigned __int16 v17 = 0;
  }
  uint64_t v18 = sub_46C8EC(a2[2], (uint64_t)a2[3]);
  if (*(unsigned char *)(v18 + 38)) {
    uint64_t v19 = (int **)(v18 + 24);
  }
  else {
    uint64_t v19 = (int **)(v18 + 16);
  }
  uint64_t v20 = *v19;
  if (v20)
  {
    int v21 = (unsigned __int16 *)((char *)v20 - *v20);
    if (*v21 < 7u || (uint64_t v22 = v21[3]) == 0 || (LOWORD(v20) = *(_WORD *)((char *)v20 + v22), (_WORD)v20 == 0xFFFF)) {
      LOWORD(v20) = 0;
    }
  }
  LODWORD(v20) = (unsigned __int16)v20;
  if (v17 < (unsigned __int16)v20) {
    LODWORD(v20) = v17;
  }
  unsigned int v23 = (int)(*(double *)(a1 + 80) * (double)v20 + 0.5);
  if (*(unsigned __int16 *)(a1 + 72) > v23) {
    unsigned int v23 = *(unsigned __int16 *)(a1 + 72);
  }
  unsigned int v55 = v23;
  unsigned __int16 v24 = *(uint64_t **)(a1 + 176);
  unsigned int v56 = *(uint64_t **)(a1 + 184);
  if (v24 == v56) {
    return 0;
  }
  int v54 = a2;
  while (1)
  {
    uint64_t v25 = *(void *)a1;
    unint64_t v26 = *v24;
    unint64_t v27 = *v24 & 0xFFFFFFFFFFFFLL;
    uint64_t v28 = (int *)sub_2D5D58(*(void *)a1, v27);
    if (*(unsigned char *)(v25 + 7772))
    {
      uint64_t v29 = sub_2DB8E0(v25 + 3896, v26, 0);
      unint64_t v30 = &v29[-*(int *)v29];
      if (*(unsigned __int16 *)v30 < 5u)
      {
        uint64_t v31 = 0;
      }
      else
      {
        uint64_t v31 = *((unsigned __int16 *)v30 + 2);
        if (v31) {
          v31 += (uint64_t)&v29[*(unsigned int *)&v29[v31]];
        }
      }
      uint64_t v32 = v31 + ((v26 >> 30) & 0x3FFFC) + 4 + *(unsigned int *)(v31 + ((v26 >> 30) & 0x3FFFC) + 4);
    }
    else
    {
      uint64_t v32 = 0;
    }
    uint64_t v33 = sub_2E5C38(v25, v27, 1);
    unsigned int v35 = (int *)v33;
    int v36 = (int *)v34;
    uint64_t v37 = v26 & 0xFF000000000000;
    BOOL v38 = (v26 & 0xFF000000000000) != 0x1000000000000;
    unint64_t v39 = v27 & 0xFFFEFFFFFFFFFFFFLL | ((unint64_t)v38 << 48);
    unsigned int v40 = (int *)((v26 & 0xFF000000000000) == 0x1000000000000 ? v33 : v34);
    if (v40)
    {
      unsigned int v41 = (unsigned __int16 *)((char *)v40 - *v40);
      if (*v41 >= 7u)
      {
        uint64_t v42 = v41[3];
        if (v42)
        {
          unsigned __int16 v43 = *(_WORD *)((char *)v40 + v42);
          if (v43 != 0xFFFF && v55 < v43)
          {
            uint64_t v44 = *(void *)(a1 + 24);
            unint64_t v45 = sub_3A5DDC(*(void *)(a1 + 16), v39);
            if (*(unsigned __int16 *)(a1 + 74) <= (unsigned __int16)sub_29A160(v44, v45))
            {
              uint64_t v46 = 1;
              if (!sub_45E400(*(void *)a1, v39, *(void *)(a1 + 64), 1)) {
                break;
              }
            }
          }
        }
      }
    }
    if (v37 == 0x1000000000000) {
      unsigned int v47 = v36;
    }
    else {
      unsigned int v47 = v35;
    }
    if (v47)
    {
      unsigned int v48 = (unsigned __int16 *)((char *)v47 - *v47);
      if (*v48 >= 7u)
      {
        uint64_t v49 = v48[3];
        if (v49)
        {
          unsigned __int16 v50 = *(_WORD *)((char *)v47 + v49);
          if (v50 != 0xFFFF && v55 < v50)
          {
            uint64_t v51 = *(void *)(a1 + 24);
            unint64_t v52 = sub_3A5DDC(*(void *)(a1 + 16), *v24);
            if (*(unsigned __int16 *)(a1 + 74) <= (unsigned __int16)sub_29A160(v51, v52))
            {
              unsigned int v57 = v28;
              uint64_t v58 = v32;
              unsigned int v59 = v35;
              int v60 = v36;
              unint64_t v61 = v39;
              BYTE6(v61) = !v38;
              uint64_t v62 = sub_2E3710(&v57, 1, *(void *)a1);
              if (v62)
              {
                if ((sub_F69870(*v54, (unint64_t)v54[1], v54[2], (unint64_t)v54[3], &v62) & 1) == 0
                  && !sub_45E400(*(void *)a1, v62, *(void *)(a1 + 64), 1))
                {
                  return 1;
                }
              }
            }
          }
        }
      }
    }
    if (++v24 == v56) {
      return 0;
    }
  }
  return v46;
}

double sub_F681C0(uint64_t a1, void **a2)
{
  double v4 = 0.0;
  if (sub_F665AC(*a2, (unint64_t)a2[1], a2[2], (unint64_t)a2[3] + 1))
  {
    uint64_t v5 = (void *)sub_46C8EC(*a2, (uint64_t)a2[1]);
    uint64_t v6 = (unsigned __int16 *)(*v5 - *(int *)*v5);
    if (*v6 >= 0xBu)
    {
      uint64_t v7 = v6[5];
      if (v7)
      {
        if ((*(unsigned char *)(*v5 + v7 + 3) & 2) != 0)
        {
          uint64_t v8 = (void *)sub_46C8EC(*a2, (uint64_t)a2[1]);
          unint64_t v9 = (unsigned __int16 *)(*v8 - *(int *)*v8);
          if (*v9 < 0x2Fu) {
            goto LABEL_18;
          }
          uint64_t v10 = v9[23];
          if (!v10) {
            goto LABEL_18;
          }
          unsigned int v11 = *(unsigned __int8 *)(*v8 + v10);
          BOOL v12 = v11 > 0x1A;
          int v13 = (1 << v11) & 0x4810001;
          BOOL v14 = v12 || v13 == 0;
          if (v14
            || (int v15 = (void *)sub_46C8EC(a2[2], (uint64_t)a2[3]),
                uint64_t v16 = (unsigned __int16 *)(*v15 - *(int *)*v15),
                *v16 < 0x2Fu)
            || (uint64_t v17 = v16[23]) == 0
            || ((unsigned int v18 = *(unsigned __int8 *)(*v15 + v17), v12 = v18 > 0x1A, v19 = (1 << v18) & 0x4810001, !v12)
              ? (BOOL v20 = v19 == 0)
              : (BOOL v20 = 1),
                v20))
          {
LABEL_18:
            uint64_t v21 = sub_46C8EC(*a2, (uint64_t)a2[1]);
            if (*(unsigned char *)(v21 + 38)) {
              uint64_t v22 = (int **)(v21 + 24);
            }
            else {
              uint64_t v22 = (int **)(v21 + 16);
            }
            unsigned int v23 = *v22;
            if (v23)
            {
              unsigned __int16 v24 = (unsigned __int16 *)((char *)v23 - *v23);
              if (*v24 < 7u
                || (uint64_t v25 = v24[3]) == 0
                || (LOWORD(v23) = *(_WORD *)((char *)v23 + v25), (_WORD)v23 == 0xFFFF))
              {
                LOWORD(v23) = 0;
              }
            }
            double v70 = *(double *)(a1 + 88) * (double)(unsigned __int16)v23;
            *(void *)(a1 + 184) = *(void *)(a1 + 176);
            unint64_t v26 = *a2;
            unint64_t v27 = (unint64_t)a2[1];
            uint64_t v28 = a2[2];
            unint64_t v29 = (unint64_t)a2[3] + 1;
            *(void *)&long long v66 = a1;
            *((void *)&v66 + 1) = a1 + 176;
            sub_F68ECC(v26, v27, v28, v29, (uint64_t)&v66);
            if (*(void *)(a1 + 176) != *(void *)(a1 + 184))
            {
              v69[0] = &v70;
              v69[1] = a1;
              v69[2] = a2;
              int v30 = *(_DWORD *)(a1 + 104);
              double v31 = *(double *)(a1 + 112);
              uint64_t v32 = sub_46C8EC(*a2, (uint64_t)a2[1]);
              uint64_t v33 = *(void *)(a1 + 24);
              unint64_t v34 = sub_3A5DDC(*(void *)(a1 + 16), *(void *)(v32 + 32));
              unsigned __int16 v35 = sub_29A160(v33, v34);
              int v36 = *(uint64_t **)(a1 + 176);
              uint64_t v37 = *(uint64_t **)(a1 + 184);
              if (v36 == v37)
              {
                return 0.0;
              }
              else
              {
                int v63 = v30 + llround(v31 * (double)v35);
                double v4 = 0.0;
                do
                {
                  uint64_t v42 = *(void *)a1;
                  uint64_t v43 = *v36;
                  uint64_t v44 = *v36 ^ 0x1000000000000;
                  unint64_t v45 = *v36 & 0xFFFFFFFFFFFFLL;
                  uint64_t v46 = (int *)sub_2D5D58(*(void *)a1, v45);
                  if (*(unsigned char *)(v42 + 7772))
                  {
                    unsigned int v47 = sub_2DB8E0(v42 + 3896, v43, 0);
                    unsigned int v48 = &v47[-*(int *)v47];
                    if (*(unsigned __int16 *)v48 < 5u)
                    {
                      uint64_t v49 = 0;
                    }
                    else
                    {
                      uint64_t v49 = *((unsigned __int16 *)v48 + 2);
                      if (v49) {
                        v49 += (uint64_t)&v47[*(unsigned int *)&v47[v49]];
                      }
                    }
                    uint64_t v50 = v49 + 4 * WORD2(v44) + 4 + *(unsigned int *)(v49 + 4 * WORD2(v44) + 4);
                  }
                  else
                  {
                    uint64_t v50 = 0;
                  }
                  uint64_t v51 = sub_2E5C38(v42, v45, 1);
                  *(void *)&long long v66 = v46;
                  *((void *)&v66 + 1) = v50;
                  *(void *)&long long v67 = v51;
                  *((void *)&v67 + 1) = v52;
                  LODWORD(v68) = v43;
                  WORD2(v68) = WORD2(v44);
                  BYTE6(v68) = (v44 & 0xFF000000000000) != 0;
                  if (!*(unsigned char *)(a1 + 121)
                    || (int v53 = (unsigned __int16 *)((char *)v46 - *v46), *v53 < 0x2Fu)
                    || (uint64_t v38 = v53[23]) == 0
                    || ((unsigned int v39 = *((unsigned __int8 *)v46 + v38),
                         BOOL v12 = v39 > 0x2A,
                         uint64_t v40 = (1 << v39) & 0x50426810004,
                         !v12)
                      ? (BOOL v41 = v40 == 0)
                      : (BOOL v41 = 1),
                        v41))
                  {
                    if (!*(unsigned char *)(a1 + 120)
                      || (int v54 = (unsigned __int16 *)((char *)v46 - *v46), *v54 < 0x2Fu)
                      || (uint64_t v55 = v54[23]) == 0
                      || *((unsigned char *)v46 + v55) != 47)
                    {
                      if (sub_F685F8((uint64_t)v69, (int **)&v66, 0))
                      {
                        uint64_t v56 = *(void *)(a1 + 24);
                        unint64_t v57 = sub_3A5DDC(*(void *)(a1 + 16), v68);
                        unsigned __int16 v58 = sub_29A160(v56, v57);
                        double v4 = v4 + pow((double)((v58 - v63) & ~((v58 - v63) >> 31)), *(long double *)(a1 + 96));
                      }
                      uint64_t v65 = v68;
                      v64[0] = v66;
                      v64[1] = v67;
                      BYTE6(v65) = BYTE6(v68) ^ 1;
                      if (sub_F685F8((uint64_t)v69, (int **)v64, 1))
                      {
                        uint64_t v59 = *(void *)(a1 + 24);
                        unint64_t v60 = sub_3A5DDC(*(void *)(a1 + 16), v65);
                        unsigned __int16 v61 = sub_29A160(v59, v60);
                        double v4 = v4 + pow((double)((v61 - v63) & ~((v61 - v63) >> 31)), *(long double *)(a1 + 96));
                      }
                    }
                  }
                  ++v36;
                }
                while (v36 != v37);
              }
            }
          }
        }
      }
    }
  }
  return v4;
}

uint64_t sub_F685F8(uint64_t a1, int **a2, int a3)
{
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  uint64_t v7 = *a2;
  uint64_t v8 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v9 = *v8;
  if (*((unsigned char *)a2 + 38))
  {
    if (v9 < 0xB) {
      return 0;
    }
    unsigned int v10 = v8[5];
    if (!v10 || (*(int *)((char *)v7 + v10) & 2) == 0) {
      return 0;
    }
  }
  else
  {
    if (v9 < 0xB) {
      return 0;
    }
    unsigned int v11 = v8[5];
    if (!v11 || (*(int *)((char *)v7 + v11) & 1) == 0) {
      return 0;
    }
  }
  if (*((unsigned char *)a2 + 38)) {
    BOOL v12 = a2 + 3;
  }
  else {
    BOOL v12 = a2 + 2;
  }
  int v13 = *v12;
  if (v13)
  {
    BOOL v14 = (unsigned __int16 *)((char *)v13 - *v13);
    if (*v14 < 7u || (uint64_t v15 = v14[3]) == 0 || (LOWORD(v13) = *(_WORD *)((char *)v13 + v15), (_WORD)v13 == 0xFFFF)) {
      LOWORD(v13) = 0;
    }
  }
  if (**(double **)a1 >= (double)(unsigned __int16)v13) {
    return 0;
  }
  uint64_t result = sub_2E3710(a2, a3, *v6);
  uint64_t v18 = result;
  if (result)
  {
    if (sub_F69870(**(void ***)(a1 + 16), *(void *)(*(void *)(a1 + 16) + 8), *(void **)(*(void *)(a1 + 16) + 16), *(void *)(*(void *)(a1 + 16) + 24) + 1, &v18))
    {
      return 0;
    }
    else
    {
      uint64_t v17 = (uint64_t *)(a2 + 4);
      if (a3) {
        uint64_t v17 = &v18;
      }
      return sub_45E400(*v6, *v17, v6[8], 1) ^ 1;
    }
  }
  return result;
}

uint64_t sub_F68778(uint64_t a1, uint64_t a2, char a3)
{
  char v14 = a3;
  uint64_t v5 = (unint64_t **)(a1 + 176);
  *(void *)(a1 + 184) = *(void *)(a1 + 176);
  uint64_t v6 = *(void **)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void **)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24) + 1;
  v15[0] = a1;
  v15[1] = v5;
  sub_F68ECC(v6, v7, v8, v9, (uint64_t)v15);
  unsigned int v10 = *v5;
  unsigned int v11 = *(unint64_t **)(a1 + 184);
  v13[0] = a1;
  v13[1] = &v14;
  void v13[2] = a2;
  if (v10 == v11) {
    return 0;
  }
  LOWORD(result) = 0;
  do
    uint64_t result = sub_F6A10C((uint64_t)v13, (unsigned __int16)result, v10++);
  while (v10 != v11);
  return result;
}

uint64_t sub_F68828(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "min_number_of_crossed_trips");
  *(_WORD *)a1 = sub_376928(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "min_number_of_crossed_live_observations");
  *(_WORD *)(a1 + 2) = sub_376928(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "min_crossing_factor");
  double v4 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 8) = v4;
  return a1;
}

void sub_F68954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F68978(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "min_crossing_factor");
  double v4 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)a1 = v4;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "observation_exponent");
  double v5 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 8) = v5;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "observation_threshold");
  int v6 = sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 16) = v6;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "from_observation_offset_factor");
  double v7 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 24) = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "ignore_destination_roads");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 32) = v8;
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "ignore_slip_roads");
  BOOL v9 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 33) = v9;
  return a1;
}

void sub_F68B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F68BBC(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "min_u_turn_angle");
  double v4 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)a1 = v4;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "min_turn_against_traffic_angle");
  double v5 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 8) = v5;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "max_straight_ahead_turn_angle");
  double v6 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 16) = v6;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9380;
  strcpy((char *)__p[0], "min_num_lanes_unprotected_turns_against_traffic");
  int v7 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 24) = v7;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9A80;
  strcpy((char *)__p[0], "min_crossed_trips_incomplete_lane_connectivity");
  *(_WORD *)(a1 + 28) = sub_29D6F0(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "traffic_sign_search_radius_m");
  *(void *)(a1 + 32) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "dangerous_transitions");
  BOOL v8 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_F68828(a1 + 40, v8);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "uncontrolled_live_observations");
  BOOL v9 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_F68978(a1 + 56, v9);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_F68E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_F68ECC(void *result, unint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  BOOL v9 = result;
  if (result)
  {
    uint64_t result = (void *)sub_46C760(result);
    unsigned int v10 = result;
    if (a3)
    {
      uint64_t result = (void *)sub_46C760(a3);
      if (a2 >= (unint64_t)v10 || a4 >= (unint64_t)result)
      {
        if (a2 < (unint64_t)v10 != a4 < (unint64_t)result) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v11 = sub_46C8EC(v9, a2);
        uint64_t result = (void *)sub_46C8EC(a3, a4);
        if ((void *)v11 != result)
        {
          while (1)
          {
LABEL_20:
            unint64_t v20 = a2 + 1;
            unint64_t v21 = sub_46C760(v9);
            uint64_t result = (void *)sub_46C760(a3);
            if (a2 + 1 >= v21 || a4 >= (unint64_t)result)
            {
              if (v20 < v21 == a4 < (unint64_t)result) {
                return result;
              }
            }
            else
            {
              uint64_t v22 = sub_46C8EC(v9, a2 + 1);
              uint64_t result = (void *)sub_46C8EC(a3, a4);
              if ((void *)v22 == result) {
                return result;
              }
            }
            uint64_t v18 = (int **)sub_46C8EC(v9, a2);
            uint64_t v19 = sub_46C8EC(v9, v20);
            sub_F69CA0(a5, v18, v19);
            a2 = v20;
          }
        }
      }
    }
    else if (a2 < (unint64_t)result)
    {
      uint64_t result = (void *)sub_46C760(v9);
      if (a2 + 1 < (unint64_t)result)
      {
        do
        {
          uint64_t v15 = (int **)sub_46C8EC(v9, a2);
          uint64_t v16 = sub_46C8EC(v9, a2 + 1);
          sub_F69CA0(a5, v15, v16);
          uint64_t result = (void *)sub_46C760(v9);
          unint64_t v17 = a2 + 2;
          ++a2;
        }
        while (v17 < (unint64_t)result);
      }
    }
  }
  else if (a3)
  {
    uint64_t result = (void *)sub_46C760(a3);
    if (a4 < (unint64_t)result)
    {
      for (uint64_t result = (void *)sub_46C760(a3); a4 < (unint64_t)result; a2 = v12)
      {
        uint64_t v12 = a2 + 1;
        int v13 = (int **)sub_46C8EC(0, a2);
        uint64_t v14 = sub_46C8EC(0, v12);
        sub_F69CA0(a5, v13, v14);
        uint64_t result = (void *)sub_46C760(a3);
      }
    }
  }
  return result;
}

uint64_t sub_F690EC(uint64_t *a1, int *a2)
{
  if (a2)
  {
    __int32 v2 = (unsigned __int16 *)((char *)a2 - *a2);
    if (*v2 >= 0xDu)
    {
      uint64_t v3 = v2[6];
      if (v2[6])
      {
        if (!*(unsigned char *)a1[1] || (uint64_t v4 = v2[2]) == 0 || (*((unsigned char *)a2 + v4) & 4) == 0)
        {
          uint64_t v5 = *a1;
          uint64_t v6 = *(unsigned int *)((char *)a2 + v3);
          int v7 = (unsigned int *)((char *)a2 + v3 + v6);
          uint64_t v8 = *v7;
          uint64_t v9 = 4 * v8;
          if (*(unsigned char *)a1[2])
          {
            if (v8)
            {
              unint64_t v10 = 0;
              uint64_t v11 = (char *)a2 + v3 + v6;
              uint64_t result = 1;
              while (1)
              {
                uint64_t v13 = v7[v10 / 4 + 1];
                uint64_t v14 = v13 - *(int *)((char *)&v7[v10 / 4 + 1] + v13);
                uint64_t v15 = &v11[v10 + v14];
                if (*((unsigned __int16 *)v15 + 2) < 7u) {
                  break;
                }
                if (!*((_WORD *)v15 + 5)) {
                  break;
                }
                uint64_t v16 = *(void *)&v11[v10 + 4 + v13 + *(unsigned __int16 *)&v11[v10 + 8 + v14]];
                if (__PAIR64__(*(unsigned __int16 *)(v5 + 4), *(_DWORD *)v5) != __PAIR64__(WORD2(v16), v16)
                  || ((v16 & 0xFF000000000000) != 0) == (*(unsigned char *)(v5 + 6) != 0))
                {
                  break;
                }
                v10 += 4;
                if (v9 == v10) {
                  return result;
                }
              }
              return 0;
            }
            return 1;
          }
          if (v8)
          {
            unint64_t v17 = 0;
            uint64_t v18 = (char *)a2 + v3 + v6;
            while (1)
            {
              uint64_t v19 = v7[v17 / 4 + 1];
              uint64_t v20 = v19 - *(int *)((char *)&v7[v17 / 4 + 1] + v19);
              unint64_t v21 = &v18[v17 + v20];
              if (*((unsigned __int16 *)v21 + 2) >= 7u)
              {
                if (*((_WORD *)v21 + 5))
                {
                  uint64_t v22 = *(void *)&v18[v17 + 4 + v19 + *(unsigned __int16 *)&v18[v17 + 8 + v20]];
                  if (__PAIR64__(*(unsigned __int16 *)(v5 + 4), *(_DWORD *)v5) == __PAIR64__(WORD2(v22), v22)
                    && ((v22 & 0xFF000000000000) != 0) != (*(unsigned char *)(v5 + 6) != 0))
                  {
                    break;
                  }
                }
              }
              v17 += 4;
              if (v9 == v17) {
                return 0;
              }
            }
            return 1;
          }
        }
      }
    }
  }
  return 0;
}

void sub_F692A0(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    int v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        unint64_t v34 = (char *)operator new(8 * v31);
        unsigned __int16 v35 = &v34[8 * v32];
        int v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            double v74 = &v34[8 * v32];
            uint64_t v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v40 = &v35[v76];
              v7 += v76;
              uint64_t v77 = (long long *)(v6 + 3);
              uint64_t v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                _OWORD *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            uint64_t v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_188D718();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    uint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      int v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      unint64_t v91 = operator new(0x1000uLL);
      sub_22368((char **)a1, &v91);
      return;
    }
    unint64_t v91 = operator new(0x1000uLL);
    sub_224F8((void **)a1, &v91);
    BOOL v41 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    int v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        unint64_t v34 = (char *)operator new(8 * v42);
        unsigned __int16 v35 = &v34[8 * v43];
        int v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            long long v82 = &v34[8 * v43];
            unsigned int v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              unsigned int v47 = &v35[v84];
              v7 += v84;
              uint64_t v85 = (long long *)(v41 + 3);
              unint64_t v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *unint64_t v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            unsigned int v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)unsigned int v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  unint64_t v26 = operator new(0x1000uLL);
  unint64_t v27 = &v25[8 * v21];
  uint64_t v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    uint64_t v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_188D718();
      }
      uint64_t v49 = (char *)operator new(8 * v48);
      unint64_t v27 = &v49[8 * (v48 >> 2)];
      uint64_t v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v49;
      *(void *)unint64_t v27 = v90;
      unint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)unint64_t v27 = v26;
      unint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_188D718();
          }
          unint64_t v60 = (char *)operator new(8 * v59);
          uint64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          int v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          unint64_t v29 = v53;
          if (!v37)
          {
            unint64_t v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            long long v64 = &v60[8 * v61];
            uint64_t v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            long long v64 = &v60[8 * v61];
            uint64_t v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            long long v64 = &v53[v68];
            uint64_t v65 = &v27[v68];
            uint64_t v69 = (long long *)(v27 + 16);
            double v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)double v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)long long v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          uint64_t v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          unint64_t v57 = &v29[8 * (v56 >> 1)];
          int v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          unint64_t v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          uint64_t v25 = v27;
        }
      }
      else
      {
        int v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      uint64_t v51 = v53 - 8;
      unint64_t v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)unint64_t v27 = v26;
  unint64_t v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  uint64_t v51 = v27;
LABEL_46:
  uint64_t v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_F69810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_F6982C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_F69840(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_F69858(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F69870(void *a1, unint64_t a2, void *a3, unint64_t a4, void *a5)
{
  unint64_t v8 = a2;
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v10 = sub_46C760(a1);
        unint64_t v11 = sub_46C760(a3);
        if (v8 >= v10 || a4 >= v11)
        {
          if (v8 < v10 == a4 < v11) {
            return 0;
          }
        }
        else
        {
          uint64_t v12 = sub_46C8EC(a1, v8);
          if (v12 == sub_46C8EC(a3, a4)) {
            return 0;
          }
        }
        uint64_t v13 = *(void *)(sub_46C8EC(a1, v8) + 32);
        if ((v13 & 0xFFFFFFFFFFFFLL) == (*a5 & 0xFFFFFFFFFFFFLL)
          && ((v13 & 0xFF000000000000) == 0) != (HIWORD(*a5) & 1))
        {
          break;
        }
        ++v8;
      }
    }
    else
    {
      if (a2 >= sub_46C760(a1)) {
        return 0;
      }
      while (1)
      {
        uint64_t v14 = *(void *)(sub_46C8EC(a1, v8) + 32);
        if ((v14 & 0xFFFFFFFFFFFFLL) == (*a5 & 0xFFFFFFFFFFFFLL)
          && ((v14 & 0xFF000000000000) == 0) != (HIWORD(*a5) & 1))
        {
          break;
        }
        if (++v8 >= sub_46C760(a1)) {
          return 0;
        }
      }
    }
  }
  else
  {
    if (!a3 || a4 >= sub_46C760(a3)) {
      return 0;
    }
    while (1)
    {
      uint64_t v16 = *(void *)(sub_46C8EC(0, v8) + 32);
      if ((v16 & 0xFFFFFFFFFFFFLL) == (*a5 & 0xFFFFFFFFFFFFLL)
        && ((v16 & 0xFF000000000000) == 0) != (HIWORD(*a5) & 1))
      {
        break;
      }
      ++v8;
      if (a4 >= sub_46C760(a3)) {
        return 0;
      }
    }
  }
  return 1;
}

uint64_t sub_F69A3C(void *a1, unint64_t a2, void *a3, unint64_t a4)
{
  unint64_t v6 = a2;
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v8 = sub_EB04C4(a1);
        unint64_t v9 = sub_EB04C4(a3);
        if (v6 >= v8 || a4 >= v9)
        {
          if (v6 < v8 == a4 < v9) {
            return 1;
          }
        }
        else
        {
          uint64_t v10 = sub_EB0624(a1, v6);
          if (v10 == sub_EB0624(a3, a4)) {
            return 1;
          }
        }
        unint64_t v11 = (int **)sub_EB0624(a1, v6);
        uint64_t v12 = (char *)*v11;
        uint64_t v13 = (unsigned __int16 *)((char *)*v11 - **v11);
        unsigned int v14 = *v13;
        if (*((unsigned char *)v11 + 38))
        {
          if (v14 >= 0x4D)
          {
            uint64_t v15 = v13[38];
            if (v15)
            {
              int v16 = *(_DWORD *)&v12[v15];
              if ((v16 & 2) != 0 || (v16 & 8) != 0) {
                return 0;
              }
            }
          }
        }
        else if (v14 >= 0x4D)
        {
          uint64_t v17 = v13[38];
          if (v17)
          {
            int v18 = *(_DWORD *)&v12[v17];
            if ((v18 & 1) != 0 || (v18 & 4) != 0) {
              return 0;
            }
          }
        }
        ++v6;
      }
    }
    if (a2 < sub_EB04C4(a1))
    {
      while (1)
      {
        uint64_t v19 = (int **)sub_EB0624(a1, v6);
        uint64_t v20 = (char *)*v19;
        uint64_t v21 = (unsigned __int16 *)((char *)*v19 - **v19);
        unsigned int v22 = *v21;
        if (*((unsigned char *)v19 + 38))
        {
          if (v22 >= 0x4D)
          {
            uint64_t v23 = v21[38];
            if (v23)
            {
              int v24 = *(_DWORD *)&v20[v23];
              if ((v24 & 2) != 0 || (v24 & 8) != 0) {
                return 0;
              }
            }
          }
        }
        else if (v22 >= 0x4D)
        {
          uint64_t v25 = v21[38];
          if (v25)
          {
            int v26 = *(_DWORD *)&v20[v25];
            if ((v26 & 1) != 0 || (v26 & 4) != 0) {
              return 0;
            }
          }
        }
        if (++v6 >= sub_EB04C4(a1)) {
          return 1;
        }
      }
    }
    return 1;
  }
  if (!a3 || a4 >= sub_EB04C4(a3)) {
    return 1;
  }
  while (1)
  {
    uint64_t v28 = (int **)sub_EB0624(0, v6);
    unint64_t v29 = (char *)*v28;
    unint64_t v30 = (unsigned __int16 *)((char *)*v28 - **v28);
    unsigned int v31 = *v30;
    if (!*((unsigned char *)v28 + 38)) {
      break;
    }
    if (v31 >= 0x4D)
    {
      uint64_t v32 = v30[38];
      if (v32)
      {
        int v33 = *(_DWORD *)&v29[v32];
        if ((v33 & 2) != 0 || (v33 & 8) != 0) {
          return 0;
        }
      }
    }
LABEL_37:
    ++v6;
    if (a4 >= sub_EB04C4(a3)) {
      return 1;
    }
  }
  if (v31 < 0x4D) {
    goto LABEL_37;
  }
  uint64_t v34 = v30[38];
  if (!v34) {
    goto LABEL_37;
  }
  int v35 = *(_DWORD *)&v29[v34];
  if ((v35 & 1) == 0 && (v35 & 4) == 0) {
    goto LABEL_37;
  }
  return 0;
}

char *sub_F69CA0(uint64_t a1, int **a2, uint64_t a3)
{
  unint64_t v6 = *(uint64_t **)a1;
  int v7 = (char **)(*(void *)a1 + 152);
  uint64_t v8 = **(void **)a1;
  unint64_t v9 = (unsigned int *)sub_2E4738(a2);
  uint64_t result = (char *)sub_2D5904(v8, v9, 0, v7);
  LOBYTE(v11) = 0;
  unint64_t v12 = *(void *)(a3 + 32);
  uint64_t v13 = (unsigned __int16 *)((char *)*a2 - **a2);
  if (*v13 < 0xBu)
  {
LABEL_4:
    uint64_t v15 = v6[19];
    uint64_t v16 = v6[20];
    if (v15 != v16) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
  uint64_t v14 = v13[5];
  if (v14)
  {
    int v11 = *((unsigned __int8 *)*a2 + v14 + 1) >> 7;
    goto LABEL_4;
  }
  LOBYTE(v11) = 0;
  uint64_t v15 = v6[19];
  uint64_t v16 = v6[20];
  if (v15 != v16)
  {
LABEL_5:
    unint64_t v17 = (unint64_t)a2[4];
    uint64_t v18 = v15;
    while (__PAIR64__(*(unsigned __int16 *)(v18 + 4), *(_DWORD *)v18) != __PAIR64__(WORD2(v17), v17)
         || ((v17 & 0x1000000000000) == 0) == (*(unsigned char *)(v18 + 6) == 0))
    {
      v18 += 8;
      if (v18 == v16)
      {
        uint64_t v18 = v16;
        break;
      }
    }
    uint64_t v19 = (v18 - v15) >> 3;
    int v20 = WORD2(v12);
    if (v11) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_22:
  uint64_t v19 = 0;
  int v20 = WORD2(v12);
  if (v11)
  {
    while (1)
    {
LABEL_14:
      if (v19)
      {
        uint64_t v21 = *v7;
        --v19;
        uint64_t v22 = (uint64_t)&(*v7)[8 * v19];
        if (*(_DWORD *)v22 != v12) {
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v21 = (char *)v6[19];
        uint64_t v19 = ((v6[20] - (uint64_t)v21) >> 3) - 1;
        uint64_t v22 = (uint64_t)&v21[8 * v19];
        if (*(_DWORD *)v22 != v12) {
          goto LABEL_13;
        }
      }
      if (*(unsigned __int16 *)(v22 + 4) == v20 && (HIWORD(v12) & 1) != (v21[8 * v19 + 6] == 0)) {
        return result;
      }
LABEL_13:
      uint64_t result = sub_2D5B74(*(char ***)(a1 + 8), (void *)v22);
    }
  }
LABEL_25:
  while (1)
  {
    uint64_t v19 = (v19 + 1) % (unint64_t)((v16 - v15) >> 3);
    uint64_t v23 = v15 + 8 * v19;
    if (*(_DWORD *)v23 == v12
      && *(unsigned __int16 *)(v23 + 4) == v20
      && (HIWORD(v12) & 1) != (*(unsigned char *)(v15 + 8 * v19 + 6) == 0))
    {
      break;
    }
    uint64_t result = sub_2D5B74(*(char ***)(a1 + 8), (void *)v23);
    uint64_t v15 = v6[19];
    uint64_t v16 = v6[20];
  }
  return result;
}

uint64_t sub_F69EA8(void *a1, unint64_t a2, void *a3, unint64_t a4)
{
  unint64_t v6 = a2;
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v8 = sub_46C760(a1);
        unint64_t v9 = sub_46C760(a3);
        if (v6 >= v8 || a4 >= v9)
        {
          if (v6 < v8 == a4 < v9) {
            return 1;
          }
        }
        else
        {
          uint64_t v10 = sub_46C8EC(a1, v6);
          if (v10 == sub_46C8EC(a3, a4)) {
            return 1;
          }
        }
        int v11 = (int **)sub_46C8EC(a1, v6);
        unint64_t v12 = (char *)*v11;
        uint64_t v13 = (unsigned __int16 *)((char *)*v11 - **v11);
        unsigned int v14 = *v13;
        if (*((unsigned char *)v11 + 38))
        {
          if (v14 >= 0x4D)
          {
            uint64_t v15 = v13[38];
            if (v15)
            {
              int v16 = *(_DWORD *)&v12[v15];
              if ((v16 & 2) != 0 || (v16 & 8) != 0) {
                return 0;
              }
            }
          }
        }
        else if (v14 >= 0x4D)
        {
          uint64_t v17 = v13[38];
          if (v17)
          {
            int v18 = *(_DWORD *)&v12[v17];
            if ((v18 & 1) != 0 || (v18 & 4) != 0) {
              return 0;
            }
          }
        }
        ++v6;
      }
    }
    if (a2 < sub_46C760(a1))
    {
      while (1)
      {
        uint64_t v19 = (int **)sub_46C8EC(a1, v6);
        int v20 = (char *)*v19;
        uint64_t v21 = (unsigned __int16 *)((char *)*v19 - **v19);
        unsigned int v22 = *v21;
        if (*((unsigned char *)v19 + 38))
        {
          if (v22 >= 0x4D)
          {
            uint64_t v23 = v21[38];
            if (v23)
            {
              int v24 = *(_DWORD *)&v20[v23];
              if ((v24 & 2) != 0 || (v24 & 8) != 0) {
                return 0;
              }
            }
          }
        }
        else if (v22 >= 0x4D)
        {
          uint64_t v25 = v21[38];
          if (v25)
          {
            int v26 = *(_DWORD *)&v20[v25];
            if ((v26 & 1) != 0 || (v26 & 4) != 0) {
              return 0;
            }
          }
        }
        if (++v6 >= sub_46C760(a1)) {
          return 1;
        }
      }
    }
    return 1;
  }
  if (!a3 || a4 >= sub_46C760(a3)) {
    return 1;
  }
  while (1)
  {
    uint64_t v28 = (int **)sub_46C8EC(0, v6);
    unint64_t v29 = (char *)*v28;
    unint64_t v30 = (unsigned __int16 *)((char *)*v28 - **v28);
    unsigned int v31 = *v30;
    if (!*((unsigned char *)v28 + 38)) {
      break;
    }
    if (v31 >= 0x4D)
    {
      uint64_t v32 = v30[38];
      if (v32)
      {
        int v33 = *(_DWORD *)&v29[v32];
        if ((v33 & 2) != 0 || (v33 & 8) != 0) {
          return 0;
        }
      }
    }
LABEL_37:
    ++v6;
    if (a4 >= sub_46C760(a3)) {
      return 1;
    }
  }
  if (v31 < 0x4D) {
    goto LABEL_37;
  }
  uint64_t v34 = v30[38];
  if (!v34) {
    goto LABEL_37;
  }
  int v35 = *(_DWORD *)&v29[v34];
  if ((v35 & 1) == 0 && (v35 & 4) == 0) {
    goto LABEL_37;
  }
  return 0;
}

uint64_t sub_F6A10C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v6 = *(uint64_t **)a1;
  uint64_t v7 = *a3 & 0xFF000000000000;
  unint64_t v8 = (int *)sub_2D5D58(**(void **)a1, *a3 & 0xFFFFFFFFFFFFLL);
  unint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
  unsigned int v10 = *v9;
  if (v7)
  {
    if (v10 < 0xB) {
      return a2;
    }
    unsigned int v11 = v9[5];
    if (!v11 || (*(int *)((char *)v8 + v11) & 1) == 0) {
      return a2;
    }
  }
  else
  {
    if (v10 < 0xB) {
      return a2;
    }
    unsigned int v12 = v9[5];
    if (!v12 || (*(int *)((char *)v8 + v12) & 2) == 0) {
      return a2;
    }
  }
  if (!**(unsigned char **)(a1 + 8))
  {
LABEL_39:
    uint64_t v33 = *a3 ^ 0x1000000000000;
    uint64_t v34 = v6[3];
    unint64_t v35 = sub_3A5DDC(v6[2], v33);
    return sub_29A160(v34, v35) + a2;
  }
  uint64_t v13 = sub_46C8EC(**(void ***)(a1 + 16), *(void *)(*(void *)(a1 + 16) + 8));
  uint64_t v14 = *v6;
  unint64_t v15 = *a3;
  unint64_t v16 = *a3 & 0xFFFFFFFFFFFFLL;
  sub_2D5D58(*v6, v16);
  if (*(unsigned char *)(v14 + 7772))
  {
    uint64_t v17 = sub_2DB8E0(v14 + 3896, v15, 0);
    int v18 = &v17[-*(int *)v17];
    if (*(unsigned __int16 *)v18 < 5u)
    {
      uint64_t v19 = 0;
    }
    else
    {
      uint64_t v19 = *((unsigned __int16 *)v18 + 2);
      if (v19) {
        v19 += (uint64_t)&v17[*(unsigned int *)&v17[v19]];
      }
    }
    int v20 = (int *)(v19 + ((v15 >> 30) & 0x3FFFC) + 4 + *(unsigned int *)(v19 + ((v15 >> 30) & 0x3FFFC) + 4));
  }
  else
  {
    int v20 = 0;
  }
  sub_2E5C38(v14, v16, 1);
  uint64_t v21 = v15 & 0xFF000000000000;
  unsigned int v22 = *(int **)(v13 + 8);
  uint64_t v23 = (unsigned __int16 *)((char *)v22 - *v22);
  unsigned int v24 = *v23;
  if (*(unsigned char *)(v13 + 38))
  {
    if (v24 < 5) {
      goto LABEL_27;
    }
    unsigned int v25 = v23[2];
    if (!v25) {
      goto LABEL_27;
    }
LABEL_23:
    __int16 v26 = *(_WORD *)((char *)v22 + v25);
    unint64_t v27 = (unsigned __int16 *)((char *)v20 - *v20);
    unsigned int v28 = *v27;
    if (v21) {
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  if (v24 >= 9)
  {
    unsigned int v25 = v23[4];
    if (v25) {
      goto LABEL_23;
    }
  }
LABEL_27:
  __int16 v26 = 0;
  unint64_t v27 = (unsigned __int16 *)((char *)v20 - *v20);
  unsigned int v28 = *v27;
  if (v21)
  {
LABEL_28:
    if (v28 >= 9)
    {
      unsigned int v29 = v27[4];
      if (!v27[4]) {
        goto LABEL_32;
      }
      goto LABEL_30;
    }
    goto LABEL_31;
  }
LABEL_24:
  if (v28 < 5)
  {
LABEL_31:
    unsigned int v29 = 0;
    goto LABEL_32;
  }
  unsigned int v29 = v27[2];
  if (v27[2]) {
LABEL_30:
  }
    unsigned int v29 = *(unsigned __int16 *)((char *)v20 + v29);
LABEL_32:
  unsigned __int16 v30 = v26 + 18000;
  unsigned __int16 v31 = v26 - 18000;
  if ((unsigned __int16)(v30 >> 5) < 0x465u) {
    unsigned __int16 v31 = v30;
  }
  int v32 = v29 - v31;
  if (v32 > 18000) {
    v32 -= 36000;
  }
  if (v32 < -17999) {
    v32 += 36000;
  }
  if (fabs((double)v32 / 100.0) <= *((double *)v6 + 6)) {
    goto LABEL_39;
  }
  return a2;
}

void sub_F6A380()
{
  unk_25FCFEF = 16641;
  word_25FCFD8 = 65;
  byte_25FD007 = 1;
  byte_25FCFF1 = 0;
}

void sub_F6A3A8()
{
  uint64_t v0 = __chkstk_darwin();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  unint64_t v7 = v6;
  int v39 = v8;
  sub_F04800(v0);
  BOOL v37 = (char *)operator new(0x48uLL);
  long long v38 = xmmword_20B9820;
  strcpy(v37, "routing/route-planning/path-finding/cbr/CyclingViaNodeAlternates.json");
  uint64_t v9 = *(void *)v5;
  long long __p = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  unsigned int v10 = sub_374CDC(v9, (uint64_t)&v37, (uint64_t *)&__p);
  unsigned int v11 = *(void **)(v5 + 16);
  HIBYTE(v36[2]) = 19;
  strcpy((char *)v36, "via_node_alternates");
  uint64_t v12 = sub_561B0(v11, (uint64_t)v36);
  uint64_t v13 = (void *)sub_560F4(v10, v12);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  uint64_t v14 = (void **)__p;
  if (__p)
  {
    unint64_t v15 = v34;
    unint64_t v16 = __p;
    if (v34 != __p)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      unint64_t v16 = __p;
    }
    uint64_t v34 = v14;
    operator delete(v16);
  }
  sub_F734A0((uint64_t)v36, *(void *)(v5 + 8), 0);
  sub_FC9FD4((uint64_t)&__p, *(void *)(v5 + 8), v13);
  uint64_t v17 = *(int **)(v4 + 24);
  unint64_t v27 = v2;
  unsigned int v28 = v36;
  uint64_t v29 = v4;
  unsigned __int16 v30 = v17;
  unsigned __int16 v31 = &v39;
  uint64_t v32 = v5;
  sub_F6ABE8((long long **)&v27, (char *)v40);
  if (sub_EAE43C(v40))
  {
    sub_FC9FD8((uint64_t)&__p, *(uint64_t **)v4, *(uint64_t **)(v4 + 8), *(void *)(v4 + 16), v17, *(unsigned __int8 *)(v4 + 32), v40, *(_DWORD *)(v5 + 24), (uint64_t *)&v27);
    int v18 = sub_FCC3E0((uint64_t)&__p);
    *(_DWORD *)(v5 + 60) = sub_F76A1C((uint64_t)v36) + v18;
    sub_FCC418((uint64_t)&__p, &v26);
    sub_33998(v5 + 32, (uint64_t)&v26);
    *(void *)unint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0;
    uint64_t v19 = sub_F6AD7C((long long **)v7, v40);
    uint64_t v21 = v27;
    uint64_t v20 = (uint64_t)v28;
    *(void *)(v7 + 8) = v19;
    v26.n128_u64[0] = v7;
    sub_F6AF20((uint64_t)v21, v20, (uint64_t *)v7, (uint64_t)&v25, &v26);
    *(unsigned char *)(v5 + 57) = *(void *)v7 != *(void *)(v7 + 8);
    unsigned int v22 = (void **)v27;
    if (v27)
    {
      uint64_t v23 = (uint64_t)v28;
      unsigned int v24 = v27;
      if (v28 != v27)
      {
        do
          uint64_t v23 = sub_405F44(v23 - 472);
        while ((void **)v23 != v22);
        unsigned int v24 = v27;
      }
      unsigned int v28 = v22;
      operator delete(v24);
    }
  }
  else
  {
    *(void *)unint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0;
  }
  sub_405F44((uint64_t)v40);
  sub_F6AB58(&__p);
  sub_BF0DE8(v36);
  if (SHIBYTE(v38) < 0) {
    operator delete(v37);
  }
}

void sub_F6A6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v9 = va_arg(va1, void *);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  sub_4323C0(v6);
  sub_4323C0((void **)va);
  sub_405F44((uint64_t)&STACK[0x32A0]);
  sub_F6AB58((uint64_t *)va1);
  sub_BF0DE8(&STACK[0x2310]);
  if (*(char *)(v7 + 23) < 0) {
    operator delete(*(void **)v7);
  }
  _Unwind_Resume(a1);
}

void sub_F6A780()
{
  uint64_t v0 = __chkstk_darwin();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  unint64_t v7 = v6;
  int v39 = v8;
  sub_F04800(v0);
  BOOL v37 = (char *)operator new(0x48uLL);
  long long v38 = xmmword_20B9820;
  strcpy(v37, "routing/route-planning/path-finding/cbr/WalkingViaNodeAlternates.json");
  uint64_t v9 = *(void *)v5;
  long long __p = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  unsigned int v10 = sub_374CDC(v9, (uint64_t)&v37, (uint64_t *)&__p);
  uint64_t v11 = *(void **)(v5 + 16);
  HIBYTE(v36[2]) = 19;
  strcpy((char *)v36, "via_node_alternates");
  uint64_t v12 = sub_561B0(v11, (uint64_t)v36);
  uint64_t v13 = (void *)sub_560F4(v10, v12);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  uint64_t v14 = (void **)__p;
  if (__p)
  {
    uint64_t v15 = v34;
    unint64_t v16 = __p;
    if (v34 != __p)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      unint64_t v16 = __p;
    }
    uint64_t v34 = v14;
    operator delete(v16);
  }
  sub_F86C00(v36);
  sub_FD24B4((uint64_t)&__p, *(void *)(v5 + 8), v13);
  uint64_t v17 = *(int **)(v4 + 24);
  unint64_t v27 = v2;
  unsigned int v28 = v36;
  uint64_t v29 = v4;
  unsigned __int16 v30 = v17;
  unsigned __int16 v31 = &v39;
  uint64_t v32 = v5;
  sub_F6B2EC((uint64_t)&v27, (char *)v40);
  if (sub_EB3230((uint64_t)v40))
  {
    sub_FD24B8((uint64_t)&__p, *(void **)v4, *(void **)(v4 + 8), *(void *)(v4 + 16), v17, *(unsigned __int8 *)(v4 + 32), (uint64_t)v40, *(_DWORD *)(v5 + 24), (uint64_t *)&v27);
    int v18 = sub_FCC3E0((uint64_t)&__p);
    *(_DWORD *)(v5 + 60) = sub_F76A1C((uint64_t)v36) + v18;
    sub_FCC418((uint64_t)&__p, &v26);
    sub_33998(v5 + 32, (uint64_t)&v26);
    *(void *)unint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0;
    uint64_t v19 = sub_F6B480((long long **)v7, v40);
    uint64_t v21 = v27;
    uint64_t v20 = (uint64_t)v28;
    *(void *)(v7 + 8) = v19;
    v26.n128_u64[0] = v7;
    sub_F6B60C((uint64_t)v21, v20, (uint64_t *)v7, (uint64_t)&v25, (uint64_t **)&v26);
    *(unsigned char *)(v5 + 57) = *(void *)v7 != *(void *)(v7 + 8);
    unsigned int v22 = (void **)v27;
    if (v27)
    {
      uint64_t v23 = (uint64_t)v28;
      unsigned int v24 = v27;
      if (v28 != v27)
      {
        do
          uint64_t v23 = sub_4451C0(v23 - 480);
        while ((void **)v23 != v22);
        unsigned int v24 = v27;
      }
      unsigned int v28 = v22;
      operator delete(v24);
    }
  }
  else
  {
    *(void *)unint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0;
  }
  sub_4451C0((uint64_t)v40);
  sub_F6AB58(&__p);
  sub_BF0DE8(v36);
  if (SHIBYTE(v38) < 0) {
    operator delete(v37);
  }
}

void sub_F6AAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v9 = va_arg(va1, void *);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  sub_44106C(v6);
  sub_44106C((void **)va);
  sub_4451C0((uint64_t)&STACK[0x3298]);
  sub_F6AB58((uint64_t *)va1);
  sub_BF0DE8(&STACK[0x2310]);
  if (*(char *)(v7 + 23) < 0) {
    operator delete(*(void **)v7);
  }
  _Unwind_Resume(a1);
}

void *sub_F6AB58(void *a1)
{
  unint64_t v2 = (void *)a1[1105];
  if (v2)
  {
    a1[1106] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1102];
  if (v3)
  {
    a1[1103] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[1093];
  if (v4)
  {
    a1[1094] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[1090];
  if (v5)
  {
    a1[1091] = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)a1[1087];
  if (v6)
  {
    a1[1088] = v6;
    operator delete(v6);
  }
  sub_328138((uint64_t)(a1 + 990));
  sub_BF0DE8(a1 + 494);
  sub_BF0DE8(a1 + 1);
  return a1;
}

char *sub_F6ABE8@<X0>(long long **a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = a1[5];
  if (sub_EAE43C(*a1))
  {
    uint64_t v5 = *a1;
    return sub_443EFC(a2, v5);
  }
  else
  {
    unint64_t v7 = sub_F734A4((uint64_t)a1[1], *(void *)a1[2], *((void *)a1[2] + 1), *((void *)a1[2] + 2), (int *)a1[3], 0, *(_DWORD *)a1[4], *((_DWORD *)v4 + 6), *((_DWORD *)v4 + 7));
    sub_F76A30((uint64_t)a1[1], (uint64_t)v11);
    sub_33998((uint64_t)(v4 + 2), (uint64_t)v11);
    if (v7 == -1 || (v7 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000)
    {
      *((_DWORD *)v4 + 15) = sub_F76A1C((uint64_t)a1[1]);
      return (char *)sub_EAD400((uint64_t)a2);
    }
    else
    {
      sub_F75894((uint64_t)a1[1], v11);
      BOOL v9 = sub_EAE144(v11);
      if (v9 && (sub_37D0C8(*(void **)v4) & 1) == 0)
      {
        unsigned int v10 = sub_69510();
        nullsub_1(v10);
        sub_EAD400((uint64_t)a2);
      }
      else
      {
        sub_443EFC(a2, v11);
      }
      return (char *)sub_405F44((uint64_t)v11);
    }
  }
}

void sub_F6AD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_405F44((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_F6AD7C(long long **a1, long long *a2)
{
  unint64_t v3 = 0xCBEEA4E1A08AD8F3 * (((char *)a1[1] - (char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x8AD8F2FBA93868) {
    sub_2E00();
  }
  if (0x97DD49C34115B1E6 * (((char *)a1[2] - (char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x97DD49C34115B1E6 * (((char *)a1[2] - (char *)*a1) >> 3);
  }
  if (0xCBEEA4E1A08AD8F3 * (((char *)a1[2] - (char *)*a1) >> 3) >= 0x456C797DD49C34) {
    unint64_t v6 = 0x8AD8F2FBA93868;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x8AD8F2FBA93868) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(472 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v14 = &v7[472 * v3];
  uint64_t v15 = (long long *)&v7[472 * v6];
  sub_443EFC(v14, a2);
  uint64_t v8 = (uint64_t)v14;
  BOOL v9 = v14 + 472;
  uint64_t v11 = *a1;
  unsigned int v10 = a1[1];
  if (v10 == *a1)
  {
    *a1 = (long long *)v14;
    a1[1] = (long long *)v9;
    a1[2] = v15;
  }
  else
  {
    do
    {
      v8 -= 472;
      unsigned int v10 = (long long *)((char *)v10 - 472);
      sub_446D30((uint64_t)(a1 + 2), v8, v10);
    }
    while (v10 != v11);
    uint64_t v12 = *a1;
    unsigned int v10 = a1[1];
    *a1 = (long long *)v8;
    a1[1] = (long long *)v9;
    a1[2] = v15;
    if (v10 != v12)
    {
      do
      {
        unsigned int v10 = (long long *)((char *)v10 - 472);
        sub_405F44((uint64_t)v10);
      }
      while (v10 != v12);
      unsigned int v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 472;
}

void sub_F6AF0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_446EA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_F6AF20(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void ***a5)
{
  if (a1 != a2)
  {
    uint64_t v6 = a1;
    do
    {
      uint64_t v8 = **a5;
      if (v8 == (*a5)[1] || sub_EAF998(v6, v8))
      {
        long long v9 = *(_OWORD *)v6;
        uint64_t v40 = *(void *)(v6 + 16);
        long long v39 = v9;
        *(void *)(v6 + 8) = 0;
        *(void *)(v6 + 16) = 0;
        *(void *)uint64_t v6 = 0;
        long long v41 = *(_OWORD *)(v6 + 24);
        uint64_t v42 = *(void *)(v6 + 40);
        *(void *)(v6 + 24) = 0;
        *(void *)(v6 + 32) = 0;
        *(void *)(v6 + 40) = 0;
        long long v10 = *(_OWORD *)(v6 + 94);
        long long v12 = *(_OWORD *)(v6 + 64);
        long long v11 = *(_OWORD *)(v6 + 80);
        long long v43 = *(_OWORD *)(v6 + 48);
        long long v44 = v12;
        v45[0] = v11;
        *(_OWORD *)((char *)v45 + 14) = v10;
        long long v46 = *(_OWORD *)(v6 + 112);
        uint64_t v47 = *(void *)(v6 + 128);
        *(void *)(v6 + 112) = 0;
        *(void *)(v6 + 120) = 0;
        *(void *)(v6 + 128) = 0;
        long long v48 = *(_OWORD *)(v6 + 136);
        uint64_t v49 = *(void *)(v6 + 152);
        *(void *)(v6 + 136) = 0;
        *(void *)(v6 + 144) = 0;
        *(void *)(v6 + 152) = 0;
        long long v50 = *(_OWORD *)(v6 + 160);
        uint64_t v51 = *(void *)(v6 + 176);
        *(void *)(v6 + 160) = 0;
        *(void *)(v6 + 168) = 0;
        *(void *)(v6 + 176) = 0;
        long long v13 = *(_OWORD *)(v6 + 184);
        long long v14 = *(_OWORD *)(v6 + 200);
        uint64_t v54 = *(void *)(v6 + 216);
        long long v52 = v13;
        long long v53 = v14;
        long long v55 = *(_OWORD *)(v6 + 224);
        uint64_t v56 = *(void *)(v6 + 240);
        *(void *)(v6 + 224) = 0;
        *(void *)(v6 + 232) = 0;
        *(void *)(v6 + 240) = 0;
        long long v57 = *(_OWORD *)(v6 + 248);
        uint64_t v58 = *(void *)(v6 + 264);
        *(void *)(v6 + 248) = 0;
        *(void *)(v6 + 256) = 0;
        *(void *)(v6 + 264) = 0;
        long long v59 = *(_OWORD *)(v6 + 272);
        unsigned int v61 = *(_DWORD *)(v6 + 296);
        if (v61 <= 1) {
          uint64_t v60 = *(void *)(v6 + 288);
        }
        long long v62 = *(_OWORD *)(v6 + 304);
        long long v15 = *(_OWORD *)(v6 + 400);
        long long v17 = *(_OWORD *)(v6 + 352);
        long long v16 = *(_OWORD *)(v6 + 368);
        long long v67 = *(_OWORD *)(v6 + 384);
        long long v68 = v15;
        long long v65 = v17;
        long long v66 = v16;
        long long v19 = *(_OWORD *)(v6 + 432);
        long long v18 = *(_OWORD *)(v6 + 448);
        long long v20 = *(_OWORD *)(v6 + 416);
        *(void *)&v71[15] = *(void *)(v6 + 463);
        long long v70 = v19;
        *(_OWORD *)uint64_t v71 = v18;
        long long v69 = v20;
        long long v21 = *(_OWORD *)(v6 + 336);
        long long v63 = *(_OWORD *)(v6 + 320);
        long long v64 = v21;
        unint64_t v22 = a3[1];
        if (v22 >= a3[2])
        {
          uint64_t v7 = sub_446BBC(a3, &v39);
        }
        else
        {
          long long v23 = v39;
          *(void *)(v22 + 16) = v40;
          *(void *)(v22 + 24) = 0;
          *(_OWORD *)unint64_t v22 = v23;
          uint64_t v40 = 0;
          long long v39 = 0uLL;
          *(void *)(v22 + 32) = 0;
          *(void *)(v22 + 40) = 0;
          *(_OWORD *)(v22 + 24) = v41;
          *(void *)(v22 + 40) = v42;
          long long v41 = 0uLL;
          uint64_t v42 = 0;
          long long v24 = v43;
          long long v25 = v44;
          long long v26 = v45[0];
          *(_OWORD *)(v22 + 94) = *(_OWORD *)((char *)v45 + 14);
          *(_OWORD *)(v22 + 64) = v25;
          *(_OWORD *)(v22 + 80) = v26;
          *(_OWORD *)(v22 + 48) = v24;
          *(void *)(v22 + 112) = 0;
          *(void *)(v22 + 120) = 0;
          *(void *)(v22 + 128) = 0;
          *(void *)(v22 + 136) = 0;
          *(_OWORD *)(v22 + 112) = v46;
          *(void *)(v22 + 128) = v47;
          long long v46 = 0uLL;
          uint64_t v47 = 0;
          *(void *)(v22 + 144) = 0;
          *(void *)(v22 + 152) = 0;
          *(_OWORD *)(v22 + 136) = v48;
          long long v48 = 0uLL;
          *(void *)(v22 + 152) = v49;
          *(void *)(v22 + 160) = 0;
          uint64_t v49 = 0;
          *(void *)(v22 + 168) = 0;
          *(void *)(v22 + 176) = 0;
          *(_OWORD *)(v22 + 160) = v50;
          *(void *)(v22 + 176) = v51;
          long long v50 = 0uLL;
          uint64_t v51 = 0;
          long long v27 = v52;
          uint64_t v28 = v54;
          *(_OWORD *)(v22 + 200) = v53;
          *(_OWORD *)(v22 + 184) = v27;
          *(void *)(v22 + 216) = v28;
          *(void *)(v22 + 224) = 0;
          *(void *)(v22 + 232) = 0;
          *(void *)(v22 + 240) = 0;
          *(_OWORD *)(v22 + 224) = v55;
          long long v55 = 0uLL;
          *(void *)(v22 + 240) = v56;
          *(void *)(v22 + 248) = 0;
          uint64_t v56 = 0;
          *(void *)(v22 + 256) = 0;
          *(void *)(v22 + 264) = 0;
          *(_OWORD *)(v22 + 248) = v57;
          *(void *)(v22 + 264) = v58;
          long long v57 = 0uLL;
          uint64_t v58 = 0;
          *(_OWORD *)(v22 + 272) = v59;
          *(_DWORD *)(v22 + 296) = v61;
          if (v61 <= 1) {
            *(void *)(v22 + 288) = v60;
          }
          *(_OWORD *)(v22 + 304) = v62;
          long long v29 = v68;
          long long v31 = v65;
          long long v30 = v66;
          *(_OWORD *)(v22 + 384) = v67;
          *(_OWORD *)(v22 + 400) = v29;
          *(_OWORD *)(v22 + 352) = v31;
          *(_OWORD *)(v22 + 368) = v30;
          long long v33 = v70;
          long long v32 = *(_OWORD *)v71;
          long long v34 = v69;
          *(void *)(v22 + 463) = *(void *)&v71[15];
          *(_OWORD *)(v22 + 432) = v33;
          *(_OWORD *)(v22 + 448) = v32;
          *(_OWORD *)(v22 + 416) = v34;
          long long v35 = v64;
          *(_OWORD *)(v22 + 320) = v63;
          *(_OWORD *)(v22 + 336) = v35;
          uint64_t v7 = v22 + 472;
        }
        a3[1] = v7;
        sub_405F44((uint64_t)&v39);
      }
      v6 += 472;
    }
    while (v6 != a2);
  }
  return a3;
}

void sub_F6B2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_405F44((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_F6B2EC@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (sub_EB3230(*(void *)a1))
  {
    uint64_t v5 = *(long long **)a1;
    return sub_4456B4(a2, v5);
  }
  else
  {
    unint64_t v7 = sub_F86CA8(*(int32x2_t **)(a1 + 8), **(int32x2_t ***)(a1 + 16), *(void *)(*(void *)(a1 + 16) + 8), *(void *)(*(void *)(a1 + 16) + 16), *(__int32 **)(a1 + 24), 0, **(_DWORD **)(a1 + 32), *(_DWORD *)(v4 + 24), *(_DWORD *)(v4 + 28));
    sub_F8A7A8(*(void *)(a1 + 8), (uint64_t)v11);
    sub_33998(v4 + 32, (uint64_t)v11);
    if (v7 == -1 || (v7 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000)
    {
      *(_DWORD *)(v4 + 60) = sub_F76A1C(*(void *)(a1 + 8));
      return (char *)sub_EB1D94(a2);
    }
    else
    {
      sub_F89790(*(void **)(a1 + 8), (uint64_t)v11);
      BOOL v9 = sub_EB2EC4((uint64_t)v11);
      if (v9 && (sub_37D0C8(*(void **)v4) & 1) == 0)
      {
        long long v10 = sub_69510();
        nullsub_1(v10);
        sub_EB1D94(a2);
      }
      else
      {
        sub_4456B4(a2, v11);
      }
      return (char *)sub_4451C0((uint64_t)v11);
    }
  }
}

void sub_F6B468(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4451C0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_F6B480(long long **a1, long long *a2)
{
  unint64_t v3 = 0xEEEEEEEEEEEEEEEFLL * (((char *)a1[1] - (char *)*a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x88888888888888) {
    sub_2E00();
  }
  if (0xDDDDDDDDDDDDDDDELL * (((char *)a1[2] - (char *)*a1) >> 5) > v4) {
    unint64_t v4 = 0xDDDDDDDDDDDDDDDELL * (((char *)a1[2] - (char *)*a1) >> 5);
  }
  if (0xEEEEEEEEEEEEEEEFLL * (((char *)a1[2] - (char *)*a1) >> 5) >= 0x44444444444444) {
    unint64_t v6 = 0x88888888888888;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x88888888888888) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(480 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  long long v14 = &v7[480 * v3];
  long long v15 = (long long *)&v7[480 * v6];
  sub_4456B4(v14, a2);
  uint64_t v8 = (uint64_t)v14;
  BOOL v9 = v14 + 480;
  long long v11 = *a1;
  long long v10 = a1[1];
  if (v10 == *a1)
  {
    *a1 = (long long *)v14;
    a1[1] = (long long *)v9;
    a1[2] = v15;
  }
  else
  {
    do
    {
      v8 -= 480;
      v10 -= 30;
      sub_CE3918((uint64_t)(a1 + 2), v8, v10);
    }
    while (v10 != v11);
    long long v12 = *a1;
    long long v10 = a1[1];
    *a1 = (long long *)v8;
    a1[1] = (long long *)v9;
    a1[2] = v15;
    if (v10 != v12)
    {
      do
      {
        v10 -= 30;
        sub_4451C0((uint64_t)v10);
      }
      while (v10 != v12);
      long long v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 480;
}

void sub_F6B5F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_449164((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_F6B60C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t **a5)
{
  if (a1 != a2)
  {
    uint64_t v6 = a1;
    do
    {
      uint64_t v8 = **a5;
      if (v8 == (*a5)[1] || sub_EB4488(v6, v8))
      {
        long long v9 = *(_OWORD *)v6;
        uint64_t v40 = *(void *)(v6 + 16);
        long long v39 = v9;
        *(void *)(v6 + 8) = 0;
        *(void *)(v6 + 16) = 0;
        *(void *)uint64_t v6 = 0;
        long long v41 = *(_OWORD *)(v6 + 24);
        uint64_t v42 = *(void *)(v6 + 40);
        *(void *)(v6 + 32) = 0;
        *(void *)(v6 + 40) = 0;
        *(void *)(v6 + 24) = 0;
        uint64_t v10 = *(void *)(v6 + 110);
        long long v12 = *(_OWORD *)(v6 + 80);
        long long v11 = *(_OWORD *)(v6 + 96);
        long long v44 = *(_OWORD *)(v6 + 64);
        long long v45 = v12;
        *(_OWORD *)long long v46 = v11;
        *(void *)&v46[14] = v10;
        long long v43 = *(_OWORD *)(v6 + 48);
        long long v47 = *(_OWORD *)(v6 + 120);
        uint64_t v48 = *(void *)(v6 + 136);
        *(void *)(v6 + 120) = 0;
        *(void *)(v6 + 128) = 0;
        *(void *)(v6 + 136) = 0;
        long long v49 = *(_OWORD *)(v6 + 144);
        uint64_t v50 = *(void *)(v6 + 160);
        *(void *)(v6 + 144) = 0;
        *(void *)(v6 + 152) = 0;
        *(void *)(v6 + 160) = 0;
        long long v51 = *(_OWORD *)(v6 + 168);
        uint64_t v52 = *(void *)(v6 + 184);
        *(void *)(v6 + 168) = 0;
        *(void *)(v6 + 176) = 0;
        *(void *)(v6 + 184) = 0;
        long long v13 = *(_OWORD *)(v6 + 192);
        long long v14 = *(_OWORD *)(v6 + 208);
        uint64_t v55 = *(void *)(v6 + 224);
        long long v53 = v13;
        long long v54 = v14;
        long long v56 = *(_OWORD *)(v6 + 232);
        uint64_t v57 = *(void *)(v6 + 248);
        *(void *)(v6 + 232) = 0;
        *(void *)(v6 + 240) = 0;
        *(void *)(v6 + 248) = 0;
        long long v58 = *(_OWORD *)(v6 + 256);
        uint64_t v59 = *(void *)(v6 + 272);
        *(void *)(v6 + 256) = 0;
        *(void *)(v6 + 264) = 0;
        *(void *)(v6 + 272) = 0;
        long long v60 = *(_OWORD *)(v6 + 280);
        unsigned int v62 = *(_DWORD *)(v6 + 304);
        if (v62 <= 1) {
          uint64_t v61 = *(void *)(v6 + 296);
        }
        long long v63 = *(_OWORD *)(v6 + 312);
        long long v15 = *(_OWORD *)(v6 + 408);
        long long v17 = *(_OWORD *)(v6 + 360);
        long long v16 = *(_OWORD *)(v6 + 376);
        long long v68 = *(_OWORD *)(v6 + 392);
        long long v69 = v15;
        long long v66 = v17;
        long long v67 = v16;
        long long v19 = *(_OWORD *)(v6 + 440);
        long long v18 = *(_OWORD *)(v6 + 456);
        long long v20 = *(_OWORD *)(v6 + 424);
        *(void *)((char *)v72 + 15) = *(void *)(v6 + 471);
        long long v71 = v19;
        v72[0] = v18;
        long long v70 = v20;
        long long v21 = *(_OWORD *)(v6 + 344);
        long long v64 = *(_OWORD *)(v6 + 328);
        long long v65 = v21;
        unint64_t v22 = a3[1];
        if (v22 >= a3[2])
        {
          uint64_t v7 = sub_CE37BC(a3, &v39);
        }
        else
        {
          long long v23 = v39;
          *(void *)(v22 + 16) = v40;
          *(void *)(v22 + 24) = 0;
          *(_OWORD *)unint64_t v22 = v23;
          uint64_t v40 = 0;
          long long v39 = 0uLL;
          *(void *)(v22 + 32) = 0;
          *(void *)(v22 + 40) = 0;
          *(_OWORD *)(v22 + 24) = v41;
          *(void *)(v22 + 40) = v42;
          long long v41 = 0uLL;
          uint64_t v42 = 0;
          *(_OWORD *)(v22 + 48) = v43;
          long long v24 = v44;
          long long v25 = v45;
          long long v26 = *(_OWORD *)v46;
          *(void *)(v22 + 110) = *(void *)&v46[14];
          *(_OWORD *)(v22 + 80) = v25;
          *(_OWORD *)(v22 + 96) = v26;
          *(_OWORD *)(v22 + 64) = v24;
          *(void *)(v22 + 120) = 0;
          *(void *)(v22 + 128) = 0;
          *(void *)(v22 + 136) = 0;
          *(void *)(v22 + 144) = 0;
          *(_OWORD *)(v22 + 120) = v47;
          *(void *)(v22 + 136) = v48;
          long long v47 = 0uLL;
          uint64_t v48 = 0;
          *(void *)(v22 + 152) = 0;
          *(void *)(v22 + 160) = 0;
          *(_OWORD *)(v22 + 144) = v49;
          long long v49 = 0uLL;
          *(void *)(v22 + 160) = v50;
          *(void *)(v22 + 168) = 0;
          uint64_t v50 = 0;
          *(void *)(v22 + 176) = 0;
          *(void *)(v22 + 184) = 0;
          *(_OWORD *)(v22 + 168) = v51;
          *(void *)(v22 + 184) = v52;
          long long v51 = 0uLL;
          uint64_t v52 = 0;
          long long v27 = v54;
          uint64_t v28 = v55;
          *(_OWORD *)(v22 + 192) = v53;
          *(_OWORD *)(v22 + 208) = v27;
          *(void *)(v22 + 224) = v28;
          *(void *)(v22 + 232) = 0;
          *(void *)(v22 + 240) = 0;
          *(void *)(v22 + 248) = 0;
          *(_OWORD *)(v22 + 232) = v56;
          long long v56 = 0uLL;
          *(void *)(v22 + 248) = v57;
          *(void *)(v22 + 256) = 0;
          uint64_t v57 = 0;
          *(void *)(v22 + 264) = 0;
          *(void *)(v22 + 272) = 0;
          *(_OWORD *)(v22 + 256) = v58;
          *(void *)(v22 + 272) = v59;
          long long v58 = 0uLL;
          uint64_t v59 = 0;
          *(_OWORD *)(v22 + 280) = v60;
          *(_DWORD *)(v22 + 304) = v62;
          if (v62 <= 1) {
            *(void *)(v22 + 296) = v61;
          }
          *(_OWORD *)(v22 + 312) = v63;
          long long v29 = v69;
          long long v31 = v66;
          long long v30 = v67;
          *(_OWORD *)(v22 + 392) = v68;
          *(_OWORD *)(v22 + 408) = v29;
          *(_OWORD *)(v22 + 360) = v31;
          *(_OWORD *)(v22 + 376) = v30;
          long long v33 = v71;
          long long v32 = v72[0];
          long long v34 = v70;
          *(void *)(v22 + 471) = *(void *)((char *)v72 + 15);
          *(_OWORD *)(v22 + 440) = v33;
          *(_OWORD *)(v22 + 456) = v32;
          *(_OWORD *)(v22 + 424) = v34;
          long long v35 = v65;
          *(_OWORD *)(v22 + 328) = v64;
          *(_OWORD *)(v22 + 344) = v35;
          uint64_t v7 = v22 + 480;
        }
        a3[1] = v7;
        sub_4451C0((uint64_t)&v39);
      }
      v6 += 480;
    }
    while (v6 != a2);
  }
  return a3;
}

void sub_F6B9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4451C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_F6B9F0()
{
  unk_25FD01F = 16641;
  word_25FD008 = 65;
  byte_25FD037 = 1;
  byte_25FD021 = 0;
}

uint64_t sub_F6BA18(uint64_t a1, void *a2, uint64_t *a3, int a4)
{
  uint64_t v6 = *a3;
  *(void *)&long long v17 = a3[1];
  *(void *)((char *)&v17 + 7) = *(uint64_t *)((char *)a3 + 15);
  char v7 = *((unsigned char *)a3 + 23);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  *(_DWORD *)a1 = a4;
  *(void *)(a1 + 23) = *(void *)((char *)&v17 + 7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v17;
  *(unsigned char *)(a1 + 31) = v7;
  uint64_t v8 = (uint64_t *)(a1 + 32);
  sub_F6CF90(a1 + 32);
  sub_F6BB7C(a1, a2);
  if (*(_DWORD *)a1 == -1
    || ((uint64_t v9 = *v8 & 0x7FFFFFFFFFFFFFFFLL, *v8 > -1)
      ? (BOOL v10 = (unint64_t)(v9 - 0x10000000000000) >> 53 >= 0x3FF)
      : (BOOL v10 = 1),
        v10 ? (BOOL v11 = (unint64_t)(*v8 - 1) >= 0xFFFFFFFFFFFFFLL) : (BOOL v11 = 0),
        v11 ? (BOOL v12 = v9 == 0) : (BOOL v12 = 1),
        !v12 || (uint64_t v13 = *(void *)(a1 + 432), *(void *)(a1 + 424) == v13) || *(_DWORD *)(v13 - 24) <= 0xB3u))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    long long v16 = (void *)sub_2F480((uint64_t)exception, 8u);
  }
  return a1;
}

void sub_F6BB50(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_F6BB7C(uint64_t a1, void *a2)
{
  BYTE7(v101[1]) = 13;
  strcpy((char *)v101, "walking_speed");
  sub_5D63C(a2, (uint64_t)v101, (uint64_t *)(a1 + 32));
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  BYTE7(v101[1]) = 21;
  strcpy((char *)v101, "elevation_gain_factor");
  if (sub_58070(a2, (uint64_t)v101))
  {
    unint64_t v4 = (void *)sub_560F4(a2, (uint64_t)v101);
    sub_F15B20(v4);
    *(void *)(a1 + 40) = v5;
    *(void *)(a1 + 48) = v6;
    *(void *)(a1 + 56) = v7;
  }
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  BYTE7(v101[1]) = 21;
  strcpy((char *)v101, "elevation_loss_factor");
  if (sub_58070(a2, (uint64_t)v101))
  {
    uint64_t v8 = (void *)sub_560F4(a2, (uint64_t)v101);
    sub_F15B20(v8);
    *(void *)(a1 + 64) = v9;
    *(void *)(a1 + 72) = v10;
    *(void *)(a1 + 80) = v11;
  }
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  strcpy((char *)v101, "elevation_gain_penalty");
  BYTE7(v101[1]) = 22;
  if (sub_58070(a2, (uint64_t)v101))
  {
    BOOL v12 = (void *)sub_560F4(a2, (uint64_t)v101);
    *(void *)(a1 + 112) = sub_ED57A0(v12);
    *(void *)(a1 + 120) = v13;
  }
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  BYTE7(v101[1]) = 17;
  strcpy((char *)v101, "elevation_factors");
  sub_F15C54(a2, (uint64_t)v101, a1 + 88);
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  *(void *)&v101[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v101 + 8) = xmmword_20B91C0;
  strcpy(*(char **)&v101[0], "use_ferry_speed_override");
  long long v14 = sub_58070(a2, (uint64_t)v101);
  if (v14 && (int v15 = *((_DWORD *)v14 + 12), (v15 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 570) = v15 == 4;
    if ((SBYTE7(v101[1]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 570) = *(unsigned char *)(a1 + 570) != 0;
    if ((SBYTE7(v101[1]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
  }
  operator delete(*(void **)&v101[0]);
LABEL_23:
  BYTE7(v101[1]) = 20;
  strcpy((char *)v101, "ferry_speed_override");
  sub_5D63C(a2, (uint64_t)v101, (uint64_t *)(a1 + 576));
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  BYTE7(v101[1]) = 20;
  strcpy((char *)v101, "ferry_penalty_factor");
  if (sub_58070(a2, (uint64_t)v101))
  {
    long long v16 = (void *)sub_560F4(a2, (uint64_t)v101);
    sub_F15B20(v16);
    *(void *)(a1 + 128) = v17;
    *(void *)(a1 + 136) = v18;
    *(void *)(a1 + 144) = v19;
  }
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  BYTE7(v101[1]) = 15;
  strcpy((char *)v101, "crossing_factor");
  if (sub_58070(a2, (uint64_t)v101))
  {
    long long v20 = (void *)sub_560F4(a2, (uint64_t)v101);
    sub_F15B20(v20);
    *(void *)(a1 + 152) = v21;
    *(void *)(a1 + 160) = v22;
    *(void *)(a1 + 168) = v23;
  }
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  *(void *)&v101[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v101 + 8) = xmmword_20B91C0;
  strcpy(*(char **)&v101[0], "terminal_crossing_factor");
  if (sub_58070(a2, (uint64_t)v101))
  {
    long long v24 = (void *)sub_560F4(a2, (uint64_t)v101);
    sub_F15B20(v24);
    *(void *)(a1 + 152) = v25;
    *(void *)(a1 + 160) = v26;
    *(void *)(a1 + 168) = v27;
  }
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  *(void *)&v101[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v101 + 8) = xmmword_20B5EB0;
  strcpy(*(char **)&v101[0], "transition_crossing_factor");
  if (sub_58070(a2, (uint64_t)v101))
  {
    uint64_t v28 = (void *)sub_560F4(a2, (uint64_t)v101);
    sub_F15B20(v28);
    *(void *)(a1 + 176) = v29;
    *(void *)(a1 + 184) = v30;
    *(void *)(a1 + 192) = v31;
  }
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  *(void *)&v101[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v101 + 8) = xmmword_20B8890;
  strcpy(*(char **)&v101[0], "dangerous_zone_penalty_factor");
  if (sub_58070(a2, (uint64_t)v101))
  {
    long long v32 = (void *)sub_560F4(a2, (uint64_t)v101);
    sub_F15B20(v32);
    *(void *)(a1 + 200) = v33;
    *(void *)(a1 + 208) = v34;
    *(void *)(a1 + 216) = v35;
  }
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  *(void *)&v101[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v101 + 8) = xmmword_20B91A0;
  strcpy(*(char **)&v101[0], "terminal_fow_penalty_factor");
  if (sub_58070(a2, (uint64_t)v101))
  {
    int v36 = (void *)sub_560F4(a2, (uint64_t)v101);
    sub_F15B20(v36);
    *(void *)(a1 + 224) = v37;
    *(void *)(a1 + 232) = v38;
    *(void *)(a1 + 240) = v39;
  }
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  *(void *)&v101[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v101 + 8) = xmmword_20B5EB0;
  strcpy(*(char **)&v101[0], "underground_penalty_factor");
  if (sub_58070(a2, (uint64_t)v101))
  {
    uint64_t v40 = (void *)sub_560F4(a2, (uint64_t)v101);
    sub_F15B20(v40);
    *(void *)(a1 + 248) = v41;
    *(void *)(a1 + 256) = v42;
    *(void *)(a1 + 264) = v43;
  }
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  *(void *)&v101[0] = operator new(0x28uLL);
  *(_OWORD *)((char *)v101 + 8) = xmmword_20B93A0;
  strcpy(*(char **)&v101[0], "contingency_distance_penalty_factor");
  if (sub_58070(a2, (uint64_t)v101))
  {
    long long v44 = (void *)sub_560F4(a2, (uint64_t)v101);
    sub_F15B20(v44);
    *(void *)(a1 + 712) = v45;
    *(void *)(a1 + 720) = v46;
    *(void *)(a1 + 728) = v47;
  }
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  *(void *)&v101[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v101 + 8) = xmmword_20B8E90;
  strcpy(*(char **)&v101[0], "primary_distance_penalty_factor");
  if (sub_58070(a2, (uint64_t)v101))
  {
    uint64_t v48 = (void *)sub_560F4(a2, (uint64_t)v101);
    sub_F15B20(v48);
    *(void *)(a1 + 688) = v49;
    *(void *)(a1 + 696) = v50;
    *(void *)(a1 + 704) = v51;
  }
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  BYTE7(v101[1]) = 17;
  strcpy((char *)v101, "car_speed_factors");
  sub_F15C54(a2, (uint64_t)v101, a1 + 320);
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  *(void *)&v101[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v101 + 8) = xmmword_20B91B0;
  strcpy(*(char **)&v101[0], "normalized_car_trips_factors");
  sub_F15C54(a2, (uint64_t)v101, a1 + 344);
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  *(void *)&v101[0] = operator new(0x28uLL);
  *(_OWORD *)((char *)v101 + 8) = xmmword_20B93A0;
  strcpy(*(char **)&v101[0], "normalized_park_probe_count_factors");
  sub_F15C54(a2, (uint64_t)v101, a1 + 368);
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  BYTE7(v101[1]) = 14;
  strcpy((char *)v101, "in_park_factor");
  if (sub_58070(a2, (uint64_t)v101))
  {
    uint64_t v52 = (void *)sub_560F4(a2, (uint64_t)v101);
    sub_F15B20(v52);
    *(void *)(a1 + 392) = v53;
    *(void *)(a1 + 400) = v54;
    *(void *)(a1 + 408) = v55;
  }
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  char v100 = 19;
  strcpy(__p, "form_of_way_factors");
  __asm { FMOV            V0.2D, #1.0 }
  long long v97 = _Q0;
  uint64_t v98 = 0x3FF0000000000000;
  sub_F150C8(a2, (uint64_t)__p, (uint64_t)&off_243F0D0, (uint64_t)&v97, v101);
  uint64_t v61 = *(void **)(a1 + 272);
  if (v61)
  {
    *(void *)(a1 + 280) = v61;
    operator delete(v61);
    *(void *)(a1 + 272) = 0;
    *(void *)(a1 + 280) = 0;
    *(void *)(a1 + 288) = 0;
  }
  *(_OWORD *)(a1 + 272) = v101[0];
  *(void *)(a1 + 288) = *(void *)&v101[1];
  memset(v101, 0, 24);
  if (v100 < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)&v101[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v101 + 8) = xmmword_20B91B0;
  strcpy(*(char **)&v101[0], "treat_alleys_as_terminal_fow");
  unsigned int v62 = sub_58070(a2, (uint64_t)v101);
  if (v62 && (int v63 = *((_DWORD *)v62 + 12), (v63 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 416) = v63 == 4;
    if ((SBYTE7(v101[1]) & 0x80000000) == 0) {
      goto LABEL_81;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 416) = *(unsigned char *)(a1 + 416) != 0;
    if ((SBYTE7(v101[1]) & 0x80000000) == 0) {
      goto LABEL_81;
    }
  }
  operator delete(*(void **)&v101[0]);
LABEL_81:
  BYTE7(v101[1]) = 13;
  strcpy((char *)v101, "stairs_factor");
  if (sub_58070(a2, (uint64_t)v101))
  {
    long long v64 = (void *)sub_560F4(a2, (uint64_t)v101);
    sub_F15B20(v64);
    *(void *)(a1 + 296) = v65;
    *(void *)(a1 + 304) = v66;
    *(void *)(a1 + 312) = v67;
  }
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  BYTE7(v101[1]) = 10;
  strcpy((char *)v101, "turn_costs");
  sub_F1675C(a2, (uint64_t)v101, a1 + 424);
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  BYTE7(v101[1]) = 19;
  strcpy((char *)v101, "ferry_entry_penalty");
  if (sub_58070(a2, (uint64_t)v101))
  {
    long long v68 = (void *)sub_560F4(a2, (uint64_t)v101);
    *(void *)(a1 + 448) = sub_ED57A0(v68);
    *(void *)(a1 + 456) = v69;
  }
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  BYTE7(v101[1]) = 20;
  strcpy((char *)v101, "stairs_entry_penalty");
  if (sub_58070(a2, (uint64_t)v101))
  {
    long long v70 = (void *)sub_560F4(a2, (uint64_t)v101);
    *(void *)(a1 + 464) = sub_ED57A0(v70);
    *(void *)(a1 + 472) = v71;
  }
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  BYTE7(v101[1]) = 21;
  strcpy((char *)v101, "border_crossing_costs");
  sub_F15604(a2, (uint64_t)v101, (uint64_t *)(a1 + 480));
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  BYTE7(v101[1]) = 20;
  strcpy((char *)v101, "zone_violation_costs");
  sub_F15604(a2, (uint64_t)v101, (uint64_t *)(a1 + 504));
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  *(void *)&v101[0] = operator new(0x30uLL);
  *(_OWORD *)((char *)v101 + 8) = xmmword_20B93C0;
  strcpy(*(char **)&v101[0], "apply_turn_costs_to_degree_2_transitions");
  long long v72 = sub_58070(a2, (uint64_t)v101);
  if (v72 && (int v73 = *((_DWORD *)v72 + 12), (v73 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 568) = v73 == 4;
    if (SBYTE7(v101[1]) < 0) {
      goto LABEL_104;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 568) = *(unsigned char *)(a1 + 568) != 0;
    if (SBYTE7(v101[1]) < 0) {
LABEL_104:
    }
      operator delete(*(void **)&v101[0]);
  }
  BYTE7(v101[1]) = 20;
  strcpy((char *)v101, "use_angle_of_contact");
  double v74 = sub_58070(a2, (uint64_t)v101);
  if (v74 && (int v75 = *((_DWORD *)v74 + 12), (v75 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 569) = v75 == 4;
    if ((SBYTE7(v101[1]) & 0x80000000) == 0) {
      goto LABEL_111;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 569) = *(unsigned char *)(a1 + 569) != 0;
    if ((SBYTE7(v101[1]) & 0x80000000) == 0) {
      goto LABEL_111;
    }
  }
  operator delete(*(void **)&v101[0]);
LABEL_111:
  *(void *)&v101[0] = operator new(0x28uLL);
  *(_OWORD *)((char *)v101 + 8) = xmmword_20B8FD0;
  strcpy(*(char **)&v101[0], "normalized_car_trips_entry_penalties");
  sub_F16324(a2, (uint64_t)v101, a1 + 528);
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  BYTE7(v101[1]) = 17;
  strcpy((char *)v101, "park_exit_penalty");
  if (sub_58070(a2, (uint64_t)v101))
  {
    uint64_t v76 = (void *)sub_560F4(a2, (uint64_t)v101);
    *(void *)(a1 + 552) = sub_ED57A0(v76);
    *(void *)(a1 + 560) = v77;
  }
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  BYTE7(v101[1]) = 20;
  strcpy((char *)v101, "u_turn_start_penalty");
  if (sub_58070(a2, (uint64_t)v101))
  {
    uint64_t v78 = (void *)sub_560F4(a2, (uint64_t)v101);
    *(void *)(a1 + 584) = sub_ED57A0(v78);
    *(void *)(a1 + 592) = v79;
  }
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  strcpy((char *)v101, "u_turn_speed_threshold");
  BYTE7(v101[1]) = 22;
  long long v80 = sub_58070(a2, (uint64_t)v101);
  if (v80 && *((_DWORD *)v80 + 12) == 1)
  {
    *(_DWORD *)(a1 + 600) = *((double *)v80 + 5);
    if ((SBYTE7(v101[1]) & 0x80000000) == 0) {
      goto LABEL_127;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 600) = *(_DWORD *)(a1 + 600);
    if ((SBYTE7(v101[1]) & 0x80000000) == 0) {
      goto LABEL_127;
    }
  }
  operator delete(*(void **)&v101[0]);
LABEL_127:
  *(void *)&v101[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v101 + 8) = xmmword_20B8870;
  strcpy(*(char **)&v101[0], "u_turn_distance_threshold");
  sub_5C8A4(a2, (uint64_t)v101, (uint64_t *)(a1 + 608));
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  *(void *)&v101[0] = operator new(0x28uLL);
  *(_OWORD *)((char *)v101 + 8) = xmmword_20B9260;
  strcpy(*(char **)&v101[0], "min_offroad_distance_for_crossing");
  sub_5C6DC(a2, (uint64_t)v101, (uint64_t *)(a1 + 616));
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  *(void *)&v101[0] = operator new(0x38uLL);
  *(_OWORD *)((char *)v101 + 8) = xmmword_20B8DF0;
  strcpy(*(char **)&v101[0], "min_offroad_distance_for_crossing_to_transit_entity_cm");
  sub_5C6DC(a2, (uint64_t)v101, (uint64_t *)(a1 + 624));
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  *(void *)&v101[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v101 + 8) = xmmword_20B91B0;
  strcpy(*(char **)&v101[0], "contingency_terminal_penalty");
  if (sub_58070(a2, (uint64_t)v101))
  {
    uint64_t v81 = (void *)sub_560F4(a2, (uint64_t)v101);
    *(void *)(a1 + 632) = sub_ED57A0(v81);
    *(void *)(a1 + 640) = v82;
  }
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  *(void *)&v101[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v101 + 8) = xmmword_20B91C0;
  strcpy(*(char **)&v101[0], "illegal_crossing_penalty");
  if (sub_58070(a2, (uint64_t)v101))
  {
    uint64_t v83 = (void *)sub_560F4(a2, (uint64_t)v101);
    *(void *)(a1 + 648) = sub_ED57A0(v83);
    *(void *)(a1 + 656) = v84;
  }
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  BYTE7(v101[1]) = 19;
  strcpy((char *)v101, "non_drivable_factor");
  if (sub_58070(a2, (uint64_t)v101))
  {
    uint64_t v85 = (void *)sub_560F4(a2, (uint64_t)v101);
    sub_F15B20(v85);
    *(void *)(a1 + 664) = v86;
    *(void *)(a1 + 672) = v87;
    *(void *)(a1 + 680) = v88;
  }
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  *(void *)&v101[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v101 + 8) = xmmword_20B91A0;
  strcpy(*(char **)&v101[0], "transit_access_only_penalty");
  if (sub_58070(a2, (uint64_t)v101))
  {
    uint64_t v89 = (void *)sub_560F4(a2, (uint64_t)v101);
    *(void *)(a1 + 736) = sub_ED57A0(v89);
    *(void *)(a1 + 744) = v90;
  }
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
  BYTE7(v101[1]) = 15;
  strcpy((char *)v101, "enable_barriers");
  unint64_t v91 = sub_58070(a2, (uint64_t)v101);
  if (v91 && (int v92 = *((_DWORD *)v91 + 12), (v92 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 752) = v92 == 4;
    if (SBYTE7(v101[1]) < 0) {
      goto LABEL_154;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 752) = *(unsigned char *)(a1 + 752) != 0;
    if (SBYTE7(v101[1]) < 0) {
LABEL_154:
    }
      operator delete(*(void **)&v101[0]);
  }
  BYTE7(v101[1]) = 18;
  strcpy((char *)v101, "enable_barriers_kh");
  unint64_t v93 = sub_58070(a2, (uint64_t)v101);
  if (v93 && (int v94 = *((_DWORD *)v93 + 12), (v94 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 753) = v94 == 4;
    if ((SBYTE7(v101[1]) & 0x80000000) == 0) {
      goto LABEL_161;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 753) = *(unsigned char *)(a1 + 753) != 0;
    if ((SBYTE7(v101[1]) & 0x80000000) == 0) {
      goto LABEL_161;
    }
  }
  operator delete(*(void **)&v101[0]);
LABEL_161:
  *(void *)&v101[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v101 + 8) = xmmword_20B91C0;
  strcpy(*(char **)&v101[0], "impeding_barrier_penalty");
  if (sub_58070(a2, (uint64_t)v101))
  {
    uint64_t v95 = (void *)sub_560F4(a2, (uint64_t)v101);
    *(void *)(a1 + 760) = sub_ED57A0(v95);
    *(void *)(a1 + 768) = v96;
  }
  if (SBYTE7(v101[1]) < 0) {
    operator delete(*(void **)&v101[0]);
  }
}

void sub_F6CCEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 - 41) < 0) {
    operator delete(*(void **)(v26 - 64));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F6CDC4(uint64_t a1, void *a2, uint64_t *a3, int a4)
{
  return sub_F6BA18(a1, a2, a3, a4);
}

uint64_t sub_F6CDCC(uint64_t *a1, unsigned __int8 *a2, int a3, void *a4)
{
  if (a3)
  {
    *((unsigned char *)&v18.__r_.__value_.__s + 23) = 9;
    strcpy((char *)&v18, "hiking_cf");
    uint64_t v6 = sub_561B0(a4, (uint64_t)&v18);
    uint64_t result = sub_374E2C(a1, v6);
  }
  else
  {
    int v9 = a2[8];
    if (a2[10]) {
      BOOL v10 = 0;
    }
    else {
      BOOL v10 = v9 == 0;
    }
    if (v10 && a2[9] == 0)
    {
      *((unsigned char *)&v18.__r_.__value_.__s + 23) = 13;
      strcpy((char *)&v18, "cost_function");
      uint64_t v16 = sub_561B0(a4, (uint64_t)&v18);
      uint64_t result = sub_374E2C(a1, v16);
    }
    else
    {
      *((unsigned char *)&v18.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v18, "avoid");
      if (v9) {
        BOOL v12 = "_busy_roads";
      }
      else {
        BOOL v12 = "";
      }
      std::string::append(&v18, v12);
      if (a2[9]) {
        uint64_t v13 = "_hills";
      }
      else {
        uint64_t v13 = "";
      }
      std::string::append(&v18, v13);
      if (a2[10]) {
        long long v14 = "_stairs";
      }
      else {
        long long v14 = "";
      }
      std::string::append(&v18, v14);
      std::string::append(&v18, "_cf");
      uint64_t v15 = sub_561B0(a4, (uint64_t)&v18);
      uint64_t result = sub_374E2C(a1, v15);
    }
  }
  uint64_t v17 = result;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v18.__r_.__value_.__l.__data_);
    return v17;
  }
  return result;
}

void sub_F6CF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F6CF90(uint64_t a1)
{
  *(void *)a1 = 0x4012CCCCCCCCCCCDLL;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  unint64_t v2 = operator new(0x20uLL);
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 72) = v2 + 2;
  __asm { FMOV            V1.2D, #1.0 }
  _OWORD *v2 = xmmword_20B8F70;
  v2[1] = _Q1;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 64) = v2 + 2;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = _Q1;
  *(_OWORD *)(a1 + 112) = _Q1;
  *(_OWORD *)(a1 + 128) = xmmword_20F1070;
  *(_OWORD *)(a1 + 144) = _Q1;
  long long v16 = _Q1;
  *(_OWORD *)(a1 + 160) = xmmword_20B8F70;
  *(_OWORD *)(a1 + 176) = _Q1;
  *(_OWORD *)(a1 + 192) = _Q1;
  *(_OWORD *)(a1 + 208) = _Q1;
  *(_OWORD *)(a1 + 224) = _Q1;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 272) = _Q1;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  uint64_t v8 = operator new(0x20uLL);
  *uint64_t v8 = xmmword_20B8F70;
  v8[1] = v16;
  *(void *)(a1 + 288) = v8;
  *(void *)(a1 + 296) = v8 + 2;
  *(void *)(a1 + 304) = v8 + 2;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  int v9 = operator new(0x20uLL);
  _OWORD *v9 = xmmword_20B8F70;
  v9[1] = v16;
  *(void *)(a1 + 312) = v9;
  *(void *)(a1 + 320) = v9 + 2;
  *(void *)(a1 + 328) = v9 + 2;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  BOOL v10 = operator new(0x20uLL);
  *BOOL v10 = xmmword_20B8F70;
  v10[1] = v16;
  *(void *)(a1 + 336) = v10;
  *(void *)(a1 + 344) = v10 + 2;
  *(void *)(a1 + 352) = v10 + 2;
  *(void *)(a1 + 360) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 368) = v16;
  *(unsigned char *)(a1 + 384) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 392) = 0;
  uint64_t v11 = operator new(0x30uLL);
  *(void *)(a1 + 400) = v11 + 6;
  *(void *)(a1 + 408) = v11 + 6;
  *(_DWORD *)uint64_t v11 = 0;
  v11[1] = 0;
  uint64_t v11[2] = 0;
  *((_DWORD *)v11 + 6) = 180;
  v11[4] = 0x1400000014;
  v11[5] = 0;
  *(void *)(a1 + 392) = v11;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(void *)(a1 + 464) = 0;
  BOOL v12 = operator new(0x50uLL);
  _OWORD *v12 = 0u;
  v12[1] = 0u;
  v12[2] = 0u;
  v12[3] = 0u;
  v12[4] = 0u;
  *(void *)(a1 + 448) = v12;
  *(void *)(a1 + 456) = v12 + 5;
  *(void *)(a1 + 464) = v12 + 5;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  uint64_t v13 = operator new(0x40uLL);
  *uint64_t v13 = 0u;
  v13[1] = 0u;
  void v13[2] = 0u;
  void v13[3] = 0u;
  *(void *)(a1 + 472) = v13;
  *(void *)(a1 + 480) = v13 + 4;
  *(void *)(a1 + 488) = v13 + 4;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  long long v14 = (char *)operator new(0x18uLL);
  *(void *)(a1 + 504) = v14 + 24;
  *(void *)(a1 + 512) = v14 + 24;
  *(void *)long long v14 = 0;
  *(_OWORD *)(v14 + 8) = 0u;
  *(void *)(a1 + 496) = v14;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_WORD *)(a1 + 536) = 1;
  *(unsigned char *)(a1 + 538) = 0;
  *(void *)(a1 + 544) = 0x4041800000000000;
  *(_DWORD *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 576) = xmmword_20F13C0;
  *(void *)(a1 + 592) = 675;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(void *)(a1 + 632) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 640) = v16;
  *(_OWORD *)(a1 + 656) = v16;
  *(_OWORD *)(a1 + 672) = v16;
  *(_OWORD *)(a1 + 688) = v16;
  *(_WORD *)(a1 + 720) = 256;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  return a1;
}

void sub_F6D1EC(_Unwind_Exception *a1)
{
  unint64_t v4 = v2;
  v1[60] = v4;
  operator delete(v4);
  uint64_t v6 = (void *)v1[56];
  if (v6)
  {
    v1[57] = v6;
    operator delete(v6);
    uint64_t v7 = (void *)v1[49];
    if (!v7)
    {
LABEL_3:
      uint64_t v8 = (void *)v1[42];
      if (!v8) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v7 = (void *)v1[49];
    if (!v7) {
      goto LABEL_3;
    }
  }
  v1[50] = v7;
  operator delete(v7);
  uint64_t v8 = (void *)v1[42];
  if (!v8)
  {
LABEL_4:
    int v9 = (void *)v1[39];
    if (!v9) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  v1[43] = v8;
  operator delete(v8);
  int v9 = (void *)v1[39];
  if (!v9)
  {
LABEL_5:
    BOOL v10 = *(void **)(v3 + 48);
    if (!v10) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  v1[40] = v9;
  operator delete(v9);
  BOOL v10 = *(void **)(v3 + 48);
  if (!v10)
  {
LABEL_6:
    uint64_t v11 = *(void **)v3;
    if (!*(void *)v3) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  v1[37] = v10;
  operator delete(v10);
  uint64_t v11 = *(void **)v3;
  if (!*(void *)v3)
  {
LABEL_7:
    BOOL v12 = (void *)v1[7];
    if (!v12) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  v1[31] = v11;
  operator delete(v11);
  BOOL v12 = (void *)v1[7];
  if (!v12) {
LABEL_8:
  }
    _Unwind_Resume(a1);
LABEL_15:
  v1[8] = v12;
  operator delete(v12);
  _Unwind_Resume(a1);
}

double sub_F6D338()
{
  unk_25FD04F = 16641;
  word_25FD038 = 65;
  byte_25FD067 = 1;
  byte_25FD051 = 0;
  qword_254E530 = (uint64_t)operator new(0x40uLL);
  unk_254E538 = xmmword_20B9810;
  strcpy((char *)qword_254E530, "routing/route-planning/path-finding/WalkingCostFunctions.json");
  return *(double *)"stFunctions.json";
}

unint64_t sub_F6D3B4(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  return sub_F6D3C0(a1, a2, a3, a4);
}

unint64_t sub_F6D3C0(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unint64_t v7 = sub_F6DDB8(a1, (unsigned int *)a2, a3, a4);
  int v9 = v7;
  unint64_t v10 = HIDWORD(v7);
  if (v7 == -1 || HIDWORD(v7) == 0x7FFFFFFF || v8 == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v13 = v7 & 0xFFFFFFFF00000000;
    uint64_t v14 = v7;
    return v13 | v14;
  }
  uint64_t v15 = (int **)(a2 + 56);
  unsigned int v16 = *(_DWORD *)(a2 + 52);
  if ((v16 & 0x40000000) != 0) {
    int v17 = 2;
  }
  else {
    int v17 = v16 >> 31;
  }
  if (!sub_3F4FC8((int **)(a2 + 56), v17)) {
    goto LABEL_27;
  }
  uint64_t v18 = *(void *)(a4 + 480) + 16 * sub_3D31B4(a1[3], (unsigned int *)a2, (unsigned int *)(a2 + 48));
  int v19 = *(_DWORD *)v18;
  int v20 = *(_DWORD *)(v18 + 4);
  BOOL v21 = *(_DWORD *)v18 == -1 || v20 == 0x7FFFFFFF;
  if (v21 || *(void *)(v18 + 8) == 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_27;
  }
  if (*(unsigned char *)(a4 + 752))
  {
    uint64_t v23 = *(int **)(a2 + 8);
    uint64_t v24 = *v23;
  }
  else
  {
    if (!*(unsigned char *)(a4 + 753)) {
      goto LABEL_67;
    }
    uint64_t v23 = *(int **)(a2 + 8);
    uint64_t v24 = *v23;
    if (*(unsigned __int16 *)((char *)v23 - v24) < 0xBu) {
      goto LABEL_67;
    }
    if (!*(_WORD *)((char *)v23 - v24 + 10)) {
      goto LABEL_67;
    }
    if ((*((unsigned char *)v23 + *(unsigned __int16 *)((char *)v23 - v24 + 10) + 3) & 2) == 0) {
      goto LABEL_67;
    }
    uint64_t v30 = (unsigned __int16 *)((char *)*v15 - **v15);
    if (*v30 < 0xBu) {
      goto LABEL_67;
    }
    uint64_t v31 = v30[5];
    if (!v31 || (*((unsigned char *)*v15 + v31 + 3) & 2) == 0) {
      goto LABEL_67;
    }
  }
  uint64_t v25 = (char *)v23 - v24;
  unsigned int v26 = *(unsigned __int16 *)((char *)v23 - v24);
  if (*(unsigned char *)(a2 + 46))
  {
    if (v26 < 0x51) {
      goto LABEL_41;
    }
    unsigned int v27 = *((unsigned __int16 *)v25 + 40);
    if (!*((_WORD *)v25 + 40)) {
      goto LABEL_41;
    }
    __int16 v28 = 4;
  }
  else
  {
    if (v26 < 0x51) {
      goto LABEL_41;
    }
    unsigned int v27 = *((unsigned __int16 *)v25 + 40);
    if (!*((_WORD *)v25 + 40)) {
      goto LABEL_41;
    }
    __int16 v28 = 64;
  }
  if ((*(_WORD *)((unsigned char *)v23 + v27) & (unsigned __int16)v28) != 0) {
    goto LABEL_27;
  }
LABEL_41:
  long long v32 = *(int **)(a2 + 56);
  uint64_t v33 = (unsigned __int16 *)((char *)v32 - *v32);
  unsigned int v34 = *v33;
  if (*(unsigned char *)(a2 + 94))
  {
    if (v34 >= 0x51)
    {
      unsigned int v35 = v33[40];
      if (v33[40])
      {
        __int16 v36 = 16;
        goto LABEL_48;
      }
    }
  }
  else if (v34 >= 0x51)
  {
    unsigned int v35 = v33[40];
    if (v33[40])
    {
      __int16 v36 = 1;
LABEL_48:
      if ((*(_WORD *)((unsigned char *)v32 + v35) & (unsigned __int16)v36) == 0) {
        goto LABEL_49;
      }
LABEL_27:
      unint64_t v13 = 0x7FFFFFFF00000000;
      uint64_t v14 = 0xFFFFFFFFLL;
      return v13 | v14;
    }
  }
LABEL_49:
  if (*(unsigned char *)(a2 + 46))
  {
    if (v26 >= 0x51)
    {
      unsigned int v37 = *((unsigned __int16 *)v25 + 40);
      if (v37)
      {
        __int16 v38 = 8;
        goto LABEL_56;
      }
    }
  }
  else if (v26 >= 0x51)
  {
    unsigned int v37 = *((unsigned __int16 *)v25 + 40);
    if (v37)
    {
      __int16 v38 = 128;
LABEL_56:
      if ((*(_WORD *)((unsigned char *)v23 + v37) & (unsigned __int16)v38) != 0)
      {
        v19 += *(_DWORD *)(a4 + 760);
        v20 += *(_DWORD *)(a4 + 764);
      }
    }
  }
  if (*(unsigned char *)(a2 + 94))
  {
    if (v34 < 0x51) {
      goto LABEL_67;
    }
    unsigned int v39 = v33[40];
    if (!v33[40]) {
      goto LABEL_67;
    }
    __int16 v40 = 32;
  }
  else
  {
    if (v34 < 0x51) {
      goto LABEL_67;
    }
    unsigned int v39 = v33[40];
    if (!v33[40]) {
      goto LABEL_67;
    }
    __int16 v40 = 2;
  }
  if ((*(_WORD *)((unsigned char *)v32 + v39) & (unsigned __int16)v40) != 0)
  {
    v19 += *(_DWORD *)(a4 + 760);
    v20 += *(_DWORD *)(a4 + 764);
  }
LABEL_67:
  v84[0] = *(_DWORD *)(a2 + 96) & 0x7FFFFFF;
  v84[1] = v84[0];
  uint64_t v85 = 0;
  v83[0] = sub_F6EA38((uint64_t)a1, (unsigned int *)a2, a4);
  v83[1] = v41;
  v83[2] = v42;
  v86[0] = sub_ECA2D8(v84, v83, v83[0]);
  v86[1] = v43;
  unint64_t v45 = sub_ECA2D8(v86, (double *)(a4 + 176), v44);
  int v46 = v19 + v45;
  int v47 = v20 + HIDWORD(v45);
  if (*(unsigned char *)(a4 + 568) || (*(unsigned char *)(a2 + 99) & 0x20) == 0)
  {
    uint64_t v48 = sub_F6EB7C(v45, a2, a4 + 32);
    v46 += *v48;
    v47 += v48[1];
  }
  uint64_t v49 = *(int **)(a2 + 8);
  uint64_t v50 = (unsigned __int16 *)((char *)v49 - *v49);
  unsigned int v51 = *v50;
  if (v51 < 0xB || !v50[5] || (*((unsigned char *)v49 + v50[5]) & 8) == 0)
  {
    uint64_t v52 = (unsigned __int16 *)((char *)*v15 - **v15);
    if (*v52 >= 0xBu)
    {
      uint64_t v53 = v52[5];
      if (v53)
      {
        if ((*((unsigned char *)*v15 + v53) & 8) != 0)
        {
          int v54 = *(_DWORD *)(a4 + 448);
          unint64_t v13 = 0x7FFFFFFF00000000;
          uint64_t v14 = 0xFFFFFFFFLL;
          if (v54 == -1) {
            return v13 | v14;
          }
          int v55 = *(_DWORD *)(a4 + 452);
          if (v55 == 0x7FFFFFFF || *(void *)(a4 + 456) == 0x7FFFFFFFFFFFFFFFLL) {
            return v13 | v14;
          }
          v46 += v54;
          v47 += v55;
        }
      }
    }
  }
  if (v51 >= 0x75 && v50[58] && (*((unsigned char *)v49 + v50[58]) & 0x10) != 0
    || (long long v56 = (unsigned __int16 *)((char *)*v15 - **v15), *v56 >= 0x75u)
    && (uint64_t v57 = v56[58]) != 0
    && (*((unsigned char *)*v15 + v57) & 0x10) != 0)
  {
    int v58 = *(_DWORD *)(a4 + 736);
    unint64_t v13 = 0x7FFFFFFF00000000;
    uint64_t v14 = 0xFFFFFFFFLL;
    if (v58 == -1) {
      return v13 | v14;
    }
    int v59 = *(_DWORD *)(a4 + 740);
    if (v59 == 0x7FFFFFFF || *(void *)(a4 + 744) == 0x7FFFFFFFFFFFFFFFLL) {
      return v13 | v14;
    }
    v46 += v58;
    v47 += v59;
  }
  if (v51 < 0x2F || (uint64_t v60 = v50[23]) == 0 || *((unsigned char *)v49 + v60) != 9)
  {
    uint64_t v61 = (unsigned __int16 *)((char *)*v15 - **v15);
    if (*v61 >= 0x2Fu)
    {
      uint64_t v62 = v61[23];
      if (v62)
      {
        if (*((unsigned char *)*v15 + v62) == 9)
        {
          v46 += *(_DWORD *)(a4 + 464);
          v47 += *(_DWORD *)(a4 + 468);
        }
      }
    }
  }
  uint64_t v63 = sub_ECDD38((void *)(a4 + 504), (unint64_t)*(unsigned int *)(a2 + 96) >> 30);
  unint64_t v13 = 0x7FFFFFFF00000000;
  uint64_t v14 = 0xFFFFFFFFLL;
  if (*(_DWORD *)v63 != -1)
  {
    int v64 = *(_DWORD *)(v63 + 4);
    if (v64 != 0x7FFFFFFF && *(void *)(v63 + 8) != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v65 = *(int **)(a2 + 8);
      uint64_t v66 = (unsigned __int16 *)((char *)v65 - *v65);
      if (*v66 >= 0x1Fu && (uint64_t v67 = v66[15]) != 0) {
        int v68 = *(int *)((char *)v65 + v67);
      }
      else {
        int v68 = -1;
      }
      int v69 = *(_DWORD *)v63 + v46;
      int v70 = v64 + v47;
      uint64_t v71 = *v15;
      long long v72 = (unsigned __int16 *)((char *)*v15 - **v15);
      if (*v72 < 0x1Fu)
      {
        int v75 = -1;
        double v74 = (unsigned int *)(a2 + 48);
      }
      else
      {
        uint64_t v73 = v72[15];
        double v74 = (unsigned int *)(a2 + 48);
        if (v73) {
          int v75 = *(int *)((char *)v71 + v73);
        }
        else {
          int v75 = -1;
        }
      }
      if (v68 != v75 && (sub_F6E970((uint64_t)v74) || sub_F6E9D4((uint64_t)v74)))
      {
        unint64_t v76 = sub_F6EE0C((uint64_t)a1, v74, (double **)(a4 + 528));
        v69 += v76;
        v70 += HIDWORD(v76);
      }
      uint64_t v77 = *(int **)(a2 + 16);
      if (v77)
      {
        uint64_t v78 = (unsigned __int16 *)((char *)v77 - *v77);
        if (*v78 >= 0x1Du)
        {
          uint64_t v79 = v78[14];
          if (v79)
          {
            if (*(int *)((char *)v77 + v79 + *(unsigned int *)((char *)v77 + v79)))
            {
              long long v80 = *(int **)(a2 + 64);
              if (!v80
                || (uint64_t v81 = (unsigned __int16 *)((char *)v80 - *v80), *v81 < 0x1Du)
                || (uint64_t v82 = v81[14]) == 0
                || !*(int *)((char *)v80 + v82 + *(unsigned int *)((char *)v80 + v82)))
              {
                v69 += *(_DWORD *)(a4 + 552);
                v70 += *(_DWORD *)(a4 + 556);
              }
            }
          }
        }
      }
      uint64_t v14 = (v69 + v9);
      unint64_t v13 = (unint64_t)(v70 + v10) << 32;
    }
  }
  return v13 | v14;
}

unint64_t sub_F6D9F4(uint64_t *a1, unsigned int *a2, unsigned int a3, uint64_t a4)
{
  return sub_F6DDB8(a1, a2, a3, a4);
}

unint64_t sub_F6DA00(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_F6D3C0(a1, a2, 0x3B9ACA00u, a3);
}

unint64_t sub_F6DA14(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  return sub_F6DDB8(a1, a2, 0x3B9ACA00u, a3);
}

uint64_t *sub_F6DA28(uint64_t *a1, void *a2)
{
  *a1 = sub_3750CC(a2);
  a1[1] = sub_3769E8(a2);
  a1[2] = sub_376D3C(a2);
  a1[3] = sub_3777C0(a2);
  return a1;
}

void *sub_F6DA80(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

unint64_t sub_F6DA8C(uint64_t *a1, unsigned int *a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  uint64_t v10 = *a1;
  uint64_t v11 = *a2;
  unint64_t v12 = v11 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
  unint64_t v13 = (int *)sub_2D5D58(*a1, v12);
  if (*(unsigned char *)(v10 + 7772)) {
    sub_2DB8E0(v10 + 3896, v11, 0);
  }
  sub_2E5C38(v10, v12, 1);
  uint64_t v14 = *(void *)(a3 + 8);
  v42[0] = 0.1 / (*(double *)(a4 + 32) / 3.6);
  v42[1] = v42[0];
  v42[2] = 1.0;
  uint64_t v15 = (long long *)(a4 + 688);
  if (*(double *)(a3 + 32) <= 0.95) {
    uint64_t v15 = (long long *)(a4 + 712);
  }
  long long v40 = *v15;
  uint64_t v41 = *((void *)v15 + 2);
  int v35 = v14;
  int v36 = v14;
  uint64_t v37 = v14;
  unint64_t v38 = sub_ECA2D8(&v35, v42, *(double *)&v40);
  uint64_t v39 = v16;
  unint64_t v18 = sub_ECA2D8(&v38, (double *)&v40, v17);
  if (!*(unsigned char *)(a3 + 24)
    || (*(unsigned char *)(a3 + 69) ? (int v20 = (void *)(a4 + 624)) : (int v20 = (void *)(a4 + 616)), *(void *)(a3 + 8) <= *v20))
  {
    int v25 = 0;
    int v27 = *(_DWORD *)(a3 + 48);
    int v26 = *(_DWORD *)(a3 + 52);
    if (!a5)
    {
      int v26 = 0;
      int v27 = 0;
    }
    if ((a6 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_17:
    int32x2_t v30 = (int32x2_t)vand_s8(*(int8x8_t *)(a4 + 632), (int8x8_t)vcgez_s32(vshl_n_s32(vdup_n_s32(*(double *)(a3 + 32) > 0.95), 0x1FuLL)));
    if (!*(unsigned char *)(a3 + 70))
    {
      if (*(unsigned char *)(a3 + 64))
      {
        LODWORD(v19) = *(_DWORD *)(a4 + 600);
        if (*(double *)(a3 + 16) > (double)v19 && *(void *)(a3 + 8) < *(void *)(a4 + 608)) {
          int32x2_t v30 = vadd_s32(*(int32x2_t *)(a4 + 584), v30);
        }
      }
    }
    if (!v25) {
      goto LABEL_40;
    }
    uint64_t v31 = (unsigned __int16 *)((char *)v13 - *v13);
    unsigned int v32 = *v31;
    if (v32 < 0x1B)
    {
      if (v32 < 0x15) {
        goto LABEL_36;
      }
    }
    else if (v31[13] && *((unsigned __int8 *)v13 + v31[13]) > 7u)
    {
LABEL_40:
      unsigned int v28 = v27 + v18 + v30.i32[0];
      uint64_t v29 = (v26 + HIDWORD(v18) + v30.i32[1]);
      return v28 | (unint64_t)(v29 << 32);
    }
    if (!v31[10] || *((unsigned __int8 *)v13 + v31[10]) <= 3u)
    {
      if (v32 < 0x2F)
      {
        if (v32 >= 0x1B) {
          goto LABEL_33;
        }
      }
      else if (!v31[23] || *((unsigned char *)v13 + v31[23]))
      {
LABEL_33:
        uint64_t v33 = v31[13];
        if (v33) {
          LOBYTE(v33) = *((unsigned __int8 *)v13 + v33) > 2u;
        }
        goto LABEL_37;
      }
    }
LABEL_36:
    LOBYTE(v33) = 0;
LABEL_37:
    if ((v33 & 1) == 0 && *(unsigned char *)(a3 + 40)) {
      int32x2_t v30 = vadd_s32(*(int32x2_t *)(a4 + 648), v30);
    }
    goto LABEL_40;
  }
  int v35 = sub_EDAAAC(v13);
  int v36 = v35;
  uint64_t v37 = 0;
  unint64_t v38 = sub_ECA2D8(&v35, v42, v21);
  uint64_t v39 = v22;
  unint64_t v24 = sub_ECA2D8(&v38, (double *)(a4 + 152), v23);
  unint64_t v18 = ((v24 & 0xFFFFFFFF00000000) + v18) & 0xFFFFFFFF00000000 | (v24 + v18);
  int v25 = 1;
  int v27 = *(_DWORD *)(a3 + 48);
  int v26 = *(_DWORD *)(a3 + 52);
  if (!a5)
  {
    int v26 = 0;
    int v27 = 0;
  }
  if (a6) {
    goto LABEL_17;
  }
LABEL_13:
  unsigned int v28 = v27 + v18;
  uint64_t v29 = (v26 + HIDWORD(v18));
  return v28 | (unint64_t)(v29 << 32);
}

unint64_t sub_F6DDB8(uint64_t *a1, unsigned int *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = (int **)(a2 + 2);
  unsigned int v9 = a2[1];
  if ((v9 & 0x40000000) != 0) {
    int v10 = 2;
  }
  else {
    int v10 = v9 >> 31;
  }
  if (sub_3F4FC8(v8, v10))
  {
    if (a3)
    {
      double v11 = (double)a3 / 1000000000.0;
      double v132 = v11;
      v133.f64[0] = v11;
      v133.f64[1] = v11;
      unint64_t v12 = *v8;
      uint64_t v13 = **v8;
      uint64_t v14 = (unsigned __int16 *)((char *)*v8 - v13);
      unsigned int v15 = *v14;
      if (v15 >= 0x2F && v14[23]) {
        unsigned int v16 = *((unsigned __int8 *)v12 + v14[23]);
      }
      else {
        unsigned int v16 = 32;
      }
      uint64_t v19 = *(void *)(a4 + 272);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a4 + 280) - v19) >> 3) <= v16)
      {
        float64x2_t v22 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v11, 0);
        double v21 = (double)a3 / 1000000000.0;
        double v126 = v21;
        if (v15 < 0x2F)
        {
LABEL_13:
          if (v15 < 0xB) {
            goto LABEL_22;
          }
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v20 = v19 + 24 * v16;
        double v21 = v11 * *(double *)v20;
        double v132 = v21;
        float64x2_t v22 = vmulq_n_f64(*(float64x2_t *)(v20 + 8), v11);
        float64x2_t v133 = v22;
        double v126 = (double)a3 / 1000000000.0;
        if (v15 < 0x2F) {
          goto LABEL_13;
        }
      }
      if (v14[23] && *((unsigned char *)v12 + v14[23]) == 9)
      {
        double v21 = *(double *)(a4 + 296) * v21;
        double v132 = v21;
        float64x2_t v22 = vmulq_f64(*(float64x2_t *)(a4 + 304), v22);
        float64x2_t v133 = v22;
      }
LABEL_20:
      if (v14[5] && (*((unsigned char *)v12 + v14[5]) & 8) != 0)
      {
        double v34 = *(double *)(a4 + 128) * v21;
        double v35 = *(double *)(a4 + 136) * v22.f64[0];
        double v36 = vmuld_lane_f64(*(double *)(a4 + 144), v22, 1);
        uint64_t v37 = (unsigned __int16 *)((char *)v12 - v13);
        unsigned int v38 = *(unsigned __int16 *)((char *)v12 - v13);
        if (v38 >= 0xB)
        {
LABEL_109:
          uint64_t v69 = v37[5];
          if (v37[5] && (*((unsigned char *)v12 + v69 + 3) & 1) != 0)
          {
            double v34 = *(double *)(a4 + 200) * v34;
            double v35 = *(double *)(a4 + 208) * v35;
            double v36 = *(double *)(a4 + 216) * v36;
          }
          if (v38 >= 0x2F)
          {
            if (v37[23])
            {
              unsigned int v70 = *((unsigned __int8 *)v12 + v37[23]);
              _ZF = v70 > 0x2F || ((1 << v70) & 0xE2E040048000) == 0;
              if (!_ZF
                && (v38 < 0x39 || !v37[28] || (*(int *)((char *)v12 + v37[28]) & 0x10100) != 0x10000)
                && (*(unsigned char *)(a4 + 416) || v70 != 15))
              {
                double v34 = *(double *)(a4 + 224) * v34;
                double v35 = *(double *)(a4 + 232) * v35;
                double v132 = v34;
                v133.f64[0] = v35;
                double v36 = *(double *)(a4 + 240) * v36;
                v133.f64[1] = v36;
              }
            }
            if (v38 >= 0x45)
            {
              uint64_t v72 = v37[34];
              if (v72)
              {
                if (*((unsigned char *)v12 + v72) == 3)
                {
                  double v34 = *(double *)(a4 + 248) * v34;
                  double v35 = *(double *)(a4 + 256) * v35;
                  double v36 = *(double *)(a4 + 264) * v36;
                }
              }
            }
          }
          uint64_t v39 = (char *)a2 + 46;
          if (*((unsigned char *)a2 + 46))
          {
            if (!v69) {
              goto LABEL_145;
            }
            if ((*((unsigned char *)v12 + v69) & 2) == 0)
            {
              int v73 = 1;
              goto LABEL_135;
            }
          }
          else
          {
            if (!v69) {
              goto LABEL_145;
            }
            if ((*((unsigned char *)v12 + v69) & 1) == 0)
            {
              int v73 = 2;
LABEL_135:
              if ((*(int *)((char *)v12 + v69) & v73) == 0) {
                goto LABEL_145;
              }
            }
          }
          double v74 = *(double **)(a4 + 320);
          if (*(void *)(a4 + 328) - (void)v74 == 32)
          {
            double v75 = v74[1];
            double v76 = v74[2];
            double v77 = v74[3];
          }
          else
          {
            unint64_t v78 = ((unint64_t)(a2[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)a2[1] << 32) | *a2;
            v128[0] = v78 ^ 0x1000000000000;
            sub_F6EE6C(a1, v128);
            double v80 = v79;
            v131[0] = v78;
            sub_F6EE6C(a1, v131);
            if (v80 >= v81) {
              double v81 = v80;
            }
            v128[0] = round(v81);
            double v75 = sub_F1DAF8((double *)v128, (double **)(a4 + 320));
          }
          double v82 = v75 * v34;
          double v83 = v76 * v35;
          double v132 = v75 * v34;
          v133.f64[0] = v83;
          double v84 = v77 * v36;
          v133.f64[1] = v84;
          uint64_t v85 = *(double **)(a4 + 344);
          if (*(void *)(a4 + 352) - (void)v85 == 32)
          {
            double v86 = v85[1];
            double v87 = v85[2];
            double v88 = v85[3];
          }
          else
          {
            v128[0] = sub_F6EFD4((uint64_t)a1, a2);
            double v86 = sub_F1DAF8((double *)v128, (double **)(a4 + 344));
          }
          double v34 = v86 * v82;
          double v35 = v87 * v83;
          double v36 = v88 * v84;
LABEL_145:
          uint64_t v89 = *(double **)(a4 + 368);
          if (*(void *)(a4 + 376) - (void)v89 == 32)
          {
            double v90 = v89[1];
            double v91 = v89[2];
            double v92 = v89[3];
          }
          else
          {
            v128[0] = sub_F6F0E0(a1[2], (uint64_t *)a2, *a1);
            double v90 = sub_F1DAF8((double *)v128, (double **)(a4 + 368));
          }
          double v93 = v90 * v34;
          double v94 = v91 * v35;
          double v132 = v93;
          v133.f64[0] = v91 * v35;
          double v95 = v92 * v36;
          v133.f64[1] = v92 * v36;
          uint64_t v96 = *v8;
          int v97 = *v39;
          uint64_t v98 = **v8;
          uint64_t v99 = (unsigned __int16 *)((char *)*v8 - v98);
          unsigned int v100 = *v99;
          if (*v39)
          {
            if (v100 < 0xB || !v99[5] || (*(int *)((char *)v96 + v99[5]) & 2) == 0)
            {
LABEL_156:
              double v93 = v93 * *(double *)(a4 + 664);
              double v94 = v94 * *(double *)(a4 + 672);
              double v132 = v93;
              v133.f64[0] = v94;
              double v95 = v95 * *(double *)(a4 + 680);
              v133.f64[1] = v95;
            }
          }
          else if (v100 < 0xB || !v99[5] || (*(int *)((char *)v96 + v99[5]) & 1) == 0)
          {
            goto LABEL_156;
          }
          uint64_t v101 = -v98;
          uint64_t v102 = (int *)*((void *)a2 + 2);
          if (v102)
          {
            long long v103 = (unsigned __int16 *)((char *)v102 - *v102);
            if (*v103 >= 0x1Du)
            {
              uint64_t v104 = v103[14];
              if (v104)
              {
                if (*(int *)((char *)v102 + v104 + *(unsigned int *)((char *)v102 + v104)))
                {
                  double v105 = *(double *)(a4 + 400) * v94;
                  double v132 = *(double *)(a4 + 392) * v93;
                  v133.f64[0] = v105;
                  v133.f64[1] = *(double *)(a4 + 408) * v95;
                }
              }
            }
          }
          if (v100 >= 0xB && v99[5] && (*((unsigned char *)v96 + v99[5]) & 8) != 0
            || !*(void *)(a4 + 112) && !*(void *)(a4 + 120))
          {
            int v106 = 0;
            unint64_t v107 = 0;
            uint64_t v108 = (unsigned __int16 *)((char *)v96 + v101);
            if (*(unsigned __int16 *)((char *)v96 + v101) < 9u) {
              goto LABEL_201;
            }
            goto LABEL_199;
          }
          double v109 = 0.0;
          if (v100 < 9)
          {
            double v110 = v126 * 0.0;
            if (v126 * 0.0 < 0.0)
            {
LABEL_173:
              if (v110 <= -4.50359963e15) {
                goto LABEL_181;
              }
              uint64_t v111 = (uint64_t)(v110 + v110);
              if (v111 >= 1) {
                --v111;
              }
              goto LABEL_180;
            }
          }
          else
          {
            if (v99[4])
            {
              LODWORD(v109) = *(int *)((char *)v96 + v99[4]);
              double v109 = (double)*(unint64_t *)&v109;
            }
            double v110 = v126 * v109;
            if (v110 < 0.0) {
              goto LABEL_173;
            }
          }
          if (v110 >= 4.50359963e15) {
            goto LABEL_181;
          }
          uint64_t v111 = (uint64_t)(v110 + v110) + 1;
LABEL_180:
          double v110 = (double)(v111 >> 1);
LABEL_181:
          uint64_t v112 = (uint64_t)v110;
          double v113 = 0.0;
          if (v97)
          {
            if (v100 < 0x57) {
              goto LABEL_198;
            }
            if (v99[43])
            {
              uint64_t v96 = (int *)((char *)v96 + v99[43] + (unint64_t)*(unsigned int *)((char *)v96 + v99[43]));
              uint64_t v114 = (unsigned __int16 *)((char *)v96 - *v96);
              if (*v114 < 7u) {
                goto LABEL_198;
              }
              unsigned int v115 = v114[3];
              if (!v115) {
                goto LABEL_198;
              }
LABEL_197:
              LOWORD(v113) = *(_WORD *)((char *)v96 + v115);
              double v113 = (double)*(unint64_t *)&v113 + (double)*(unint64_t *)&v113;
              goto LABEL_198;
            }
            if (v100 >= 0x7D)
            {
              unsigned int v115 = v99[62];
              if (v115) {
                goto LABEL_197;
              }
            }
          }
          else
          {
            if (v100 < 0x57) {
              goto LABEL_198;
            }
            if (v99[43])
            {
              uint64_t v96 = (int *)((char *)v96 + v99[43] + (unint64_t)*(unsigned int *)((char *)v96 + v99[43]));
              uint64_t v116 = (unsigned __int16 *)((char *)v96 - *v96);
              if (*v116 >= 5u)
              {
                unsigned int v115 = v116[2];
                if (v115) {
                  goto LABEL_197;
                }
              }
            }
            else if (v100 >= 0x7B)
            {
              unsigned int v115 = v99[61];
              if (v115) {
                goto LABEL_197;
              }
            }
          }
LABEL_198:
          unint64_t v117 = sub_ECE090((_DWORD *)(a4 + 112), (double)v112 / 100.0 * (v113 / 65535.0), (double)v112 / 100.0);
          int v106 = v117;
          unint64_t v107 = v117 & 0xFFFFFFFF00000000;
          uint64_t v96 = *v8;
          uint64_t v108 = (unsigned __int16 *)((char *)*v8 - **v8);
          if (*v108 < 9u) {
            goto LABEL_201;
          }
LABEL_199:
          uint64_t v118 = v108[4];
          if (v118)
          {
            unsigned int v119 = *(int *)((char *)v96 + v118);
LABEL_202:
            v129[0] = v119;
            v129[1] = v119;
            uint64_t v130 = v119;
            v128[0] = sub_F6EA38((uint64_t)a1, a2, a4);
            v128[1] = v120;
            v128[2] = v121;
            v131[0] = sub_ECA2D8(v129, (double *)v128, *(double *)v128);
            v131[1] = v122;
            unint64_t v124 = sub_ECA2D8(v131, &v132, v123);
            uint64_t v18 = (v124 + v106);
            unint64_t v17 = (v124 + v107) & 0xFFFFFFFF00000000;
            return v17 | v18;
          }
LABEL_201:
          unsigned int v119 = 0;
          goto LABEL_202;
        }
LABEL_40:
        uint64_t v39 = (char *)a2 + 46;
        goto LABEL_145;
      }
LABEL_22:
      double v23 = *(double *)(a4 + 40);
      __asm { FMOV            V0.2D, #1.0 }
      if (_ZF || fabs(v23) < 2.22044605e-16)
      {
        double v27 = *(double *)(a4 + 48);
        if (v27 == 0.0 || fabs(v27) < 2.22044605e-16)
        {
          double v28 = *(double *)(a4 + 56);
          if (v28 == 0.0 || fabs(v28) < 2.22044605e-16)
          {
LABEL_48:
            double v41 = *(double *)(a4 + 64);
            if (v41 == 0.0 || fabs(v41) < 2.22044605e-16)
            {
              double v42 = *(double *)(a4 + 72);
              if (v42 == 0.0 || fabs(v42) < 2.22044605e-16)
              {
                double v43 = *(double *)(a4 + 80);
                if (v43 == 0.0 || fabs(v43) < 2.22044605e-16)
                {
                  float64x2_t v127 = v22;
                  double v49 = 0.0;
                  _CF = v15 >= 0x57;
                  if (*((unsigned char *)a2 + 46))
                  {
LABEL_82:
                    if (!_CF) {
                      goto LABEL_91;
                    }
                    if (v14[43])
                    {
                      unint64_t v12 = (int *)((char *)v12 + v14[43] + (unint64_t)*(unsigned int *)((char *)v12 + v14[43]));
                      int v54 = (unsigned __int16 *)((char *)v12 - *v12);
                      if (*v54 < 7u) {
                        goto LABEL_91;
                      }
                      unsigned int v52 = v54[3];
                      if (!v52) {
                        goto LABEL_91;
                      }
LABEL_90:
                      LOWORD(v49) = *(_WORD *)((char *)v12 + v52);
                      double v49 = (double)*(unint64_t *)&v49 + (double)*(unint64_t *)&v49;
                      goto LABEL_91;
                    }
                    if (v15 >= 0x7D)
                    {
                      unsigned int v52 = v14[62];
                      if (v52) {
                        goto LABEL_90;
                      }
                    }
LABEL_91:
                    *(double *)long long v128 = v49 / 65535.0;
                    double v55 = sub_F1DAF8((double *)v128, (double **)(a4 + 88)) * v21;
                    double v57 = v56 * v127.f64[0];
                    double v59 = vmuld_lane_f64(v58, v127, 1);
                    v133.f64[1] = v59;
                    uint64_t v60 = (int *)*((void *)a2 + 1);
                    uint64_t v61 = (unsigned __int16 *)((char *)v60 - *v60);
                    unsigned int v62 = *v61;
                    double v63 = 0.0;
                    if (*((unsigned char *)a2 + 46))
                    {
                      if (v62 < 0x57) {
                        goto LABEL_108;
                      }
                      if (v61[43])
                      {
                        uint64_t v60 = (int *)((char *)v60 + v61[43] + (unint64_t)*(unsigned int *)((char *)v60 + v61[43]));
                        int v64 = (unsigned __int16 *)((char *)v60 - *v60);
                        if (*v64 < 5u) {
                          goto LABEL_108;
                        }
                        unsigned int v65 = v64[2];
                        if (!v65) {
                          goto LABEL_108;
                        }
LABEL_107:
                        LOWORD(v63) = *(_WORD *)((char *)v60 + v65);
                        double v63 = (double)*(unint64_t *)&v63 + (double)*(unint64_t *)&v63;
                        goto LABEL_108;
                      }
                      if (v62 >= 0x7B)
                      {
                        unsigned int v65 = v61[61];
                        if (v65) {
                          goto LABEL_107;
                        }
                      }
                    }
                    else
                    {
                      if (v62 < 0x57) {
                        goto LABEL_108;
                      }
                      if (v61[43])
                      {
                        uint64_t v60 = (int *)((char *)v60 + v61[43] + (unint64_t)*(unsigned int *)((char *)v60 + v61[43]));
                        uint64_t v66 = (unsigned __int16 *)((char *)v60 - *v60);
                        if (*v66 >= 7u)
                        {
                          unsigned int v65 = v66[3];
                          if (v65) {
                            goto LABEL_107;
                          }
                        }
                      }
                      else if (v62 >= 0x7D)
                      {
                        unsigned int v65 = v61[62];
                        if (v65) {
                          goto LABEL_107;
                        }
                      }
                    }
LABEL_108:
                    *(double *)long long v128 = v63 / -65535.0;
                    double v34 = sub_F1DAF8((double *)v128, (double **)(a4 + 88)) * v55;
                    double v35 = v67 * v57;
                    double v132 = v34;
                    v133.f64[0] = v35;
                    double v36 = v68 * v59;
                    unint64_t v12 = *v8;
                    uint64_t v37 = (unsigned __int16 *)((char *)*v8 - **v8);
                    unsigned int v38 = *v37;
                    if (v38 >= 0xB) {
                      goto LABEL_109;
                    }
                    goto LABEL_40;
                  }
LABEL_66:
                  if (!_CF) {
                    goto LABEL_91;
                  }
                  if (v14[43])
                  {
                    unint64_t v12 = (int *)((char *)v12 + v14[43] + (unint64_t)*(unsigned int *)((char *)v12 + v14[43]));
                    unsigned int v51 = (unsigned __int16 *)((char *)v12 - *v12);
                    if (*v51 >= 5u)
                    {
                      unsigned int v52 = v51[2];
                      if (v52) {
                        goto LABEL_90;
                      }
                    }
                  }
                  else if (v15 >= 0x7B)
                  {
                    unsigned int v52 = v14[61];
                    if (v52) {
                      goto LABEL_90;
                    }
                  }
                  goto LABEL_91;
                }
              }
            }
            if (*((unsigned char *)a2 + 46))
            {
              double v44 = 0.0;
              if (v15 < 0x57) {
                goto LABEL_81;
              }
              if (v14[43])
              {
                unint64_t v45 = (int *)((char *)v12 + v14[43] + *(unsigned int *)((char *)v12 + v14[43]));
                int v46 = (unsigned __int16 *)((char *)v45 - *v45);
                if (*v46 < 5u) {
                  goto LABEL_81;
                }
                unsigned int v47 = v46[2];
                if (!v47) {
                  goto LABEL_81;
                }
                goto LABEL_80;
              }
              if (v15 < 0x7B) {
                goto LABEL_81;
              }
              unsigned int v47 = v14[61];
            }
            else
            {
              double v44 = 0.0;
              if (v15 < 0x57) {
                goto LABEL_81;
              }
              if (v14[43])
              {
                unint64_t v45 = (int *)((char *)v12 + v14[43] + *(unsigned int *)((char *)v12 + v14[43]));
                uint64_t v48 = (unsigned __int16 *)((char *)v45 - *v45);
                if (*v48 < 7u || (unsigned int v47 = v48[3]) == 0)
                {
LABEL_81:
                  double v53 = v44 / 65535.0;
                  double v21 = v21 / (v41 * v53 + 1.0);
                  float64x2_t v127 = vdivq_f64(v22, vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a4 + 72), v53), _Q0));
                  double v49 = 0.0;
                  _CF = v15 >= 0x57;
                  if (*((unsigned char *)a2 + 46)) {
                    goto LABEL_82;
                  }
                  goto LABEL_66;
                }
LABEL_80:
                LOWORD(v44) = *(_WORD *)((char *)v45 + v47);
                double v44 = (double)*(unint64_t *)&v44 + (double)*(unint64_t *)&v44;
                goto LABEL_81;
              }
              if (v15 < 0x7D) {
                goto LABEL_81;
              }
              unsigned int v47 = v14[62];
            }
            unint64_t v45 = v12;
            if (!v47) {
              goto LABEL_81;
            }
            goto LABEL_80;
          }
        }
      }
      if (*((unsigned char *)a2 + 46))
      {
        double v29 = 0.0;
        if (v15 < 0x57) {
          goto LABEL_47;
        }
        if (v14[43])
        {
          int32x2_t v30 = (int *)((char *)v12 + v14[43] + *(unsigned int *)((char *)v12 + v14[43]));
          uint64_t v31 = (unsigned __int16 *)((char *)v30 - *v30);
          if (*v31 < 7u) {
            goto LABEL_47;
          }
          unsigned int v32 = v31[3];
          if (!v32) {
            goto LABEL_47;
          }
          goto LABEL_46;
        }
        if (v15 < 0x7D) {
          goto LABEL_47;
        }
        unsigned int v32 = v14[62];
      }
      else
      {
        double v29 = 0.0;
        if (v15 < 0x57) {
          goto LABEL_47;
        }
        if (v14[43])
        {
          int32x2_t v30 = (int *)((char *)v12 + v14[43] + *(unsigned int *)((char *)v12 + v14[43]));
          uint64_t v33 = (unsigned __int16 *)((char *)v30 - *v30);
          if (*v33 < 5u) {
            goto LABEL_47;
          }
          unsigned int v32 = v33[2];
          if (!v32) {
            goto LABEL_47;
          }
          goto LABEL_46;
        }
        if (v15 < 0x7B)
        {
LABEL_47:
          double v40 = v29 / 65535.0;
          double v21 = (v23 * v40 + 1.0) * v21;
          float64x2_t v22 = vmulq_f64(vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a4 + 48), v40), _Q0), v22);
          goto LABEL_48;
        }
        unsigned int v32 = v14[61];
      }
      int32x2_t v30 = v12;
      if (v32)
      {
LABEL_46:
        LOWORD(v29) = *(_WORD *)((char *)v30 + v32);
        double v29 = (double)*(unint64_t *)&v29 + (double)*(unint64_t *)&v29;
        goto LABEL_47;
      }
      goto LABEL_47;
    }
    uint64_t v18 = 0;
    unint64_t v17 = 0;
  }
  else
  {
    unint64_t v17 = 0x7FFFFFFF00000000;
    uint64_t v18 = 0xFFFFFFFFLL;
  }
  return v17 | v18;
}

BOOL sub_F6E970(uint64_t a1)
{
  uint64_t v1 = *(int **)(a1 + 8);
  unint64_t v2 = (unsigned __int16 *)((char *)v1 - *v1);
  unsigned int v3 = *v2;
  if (*(unsigned char *)(a1 + 46))
  {
    if (v3 >= 0xB)
    {
      unsigned int v4 = v2[5];
      if (v4) {
        return (*(int *)((char *)v1 + v4) & 2) != 0;
      }
    }
  }
  else if (v3 >= 0xB)
  {
    unsigned int v6 = v2[5];
    if (v6) {
      return (*(int *)((char *)v1 + v6) & 1) != 0;
    }
  }
  return 0;
}

BOOL sub_F6E9D4(uint64_t a1)
{
  uint64_t v1 = *(int **)(a1 + 8);
  unint64_t v2 = (unsigned __int16 *)((char *)v1 - *v1);
  unsigned int v3 = *v2;
  if (*(unsigned char *)(a1 + 46))
  {
    if (v3 >= 0xB)
    {
      unsigned int v4 = v2[5];
      if (v4) {
        return (*(int *)((char *)v1 + v4) & 1) != 0;
      }
    }
  }
  else if (v3 >= 0xB)
  {
    unsigned int v6 = v2[5];
    if (v6) {
      return (*(int *)((char *)v1 + v6) & 2) != 0;
    }
  }
  return 0;
}

double sub_F6EA38(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  double v3 = *(double *)(a3 + 32);
  unsigned int v4 = (int *)*((void *)a2 + 1);
  uint64_t v5 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v5 >= 0xBu)
  {
    uint64_t v6 = v5[5];
    if (v6)
    {
      if ((*((unsigned char *)v4 + v6) & 8) != 0)
      {
        uint64_t v8 = *(void *)(a1 + 8);
        unint64_t v9 = (((unint64_t)(a2[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)a2[1] << 32) | *a2) ^ 0x1000000000000;
        int v10 = sub_32A458(v8, v9);
        if (v10)
        {
          double v11 = &v10[-*(int *)v10];
          double v3 = -1.0;
          if (*(unsigned __int16 *)v11 >= 9u)
          {
            uint64_t v12 = *((unsigned __int16 *)v11 + 4);
            if (v12)
            {
              unsigned int v13 = *(unsigned __int16 *)&v10[v12];
              if ((unsigned __int16)(v13 - 1) <= 0xFFFDu) {
                double v3 = (double)v13 / 100.0;
              }
            }
          }
        }
        else
        {
          double v3 = sub_32A584(v8, v9);
        }
        if (*(unsigned char *)(a3 + 570)
          || (*(uint64_t *)&v3 > -1
            ? (BOOL v15 = ((*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
            : (BOOL v15 = 1),
              v15 ? (BOOL v16 = (unint64_t)(*(void *)&v3 - 1) >= 0xFFFFFFFFFFFFFLL) : (BOOL v16 = 0),
              v16 ? (BOOL v17 = (*(void *)&v3 & 0x7FFFFFFFFFFFFFFFLL) == 0) : (BOOL v17 = 1),
              !v17 || v3 <= 0.0))
        {
          double v3 = *(double *)(a3 + 576);
        }
      }
    }
  }
  return 0.1 / (v3 / 3.6);
}

unsigned int *sub_F6EB7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 537))
  {
    double v3 = *(int **)(a2 + 8);
    unsigned int v4 = (unsigned __int16 *)((char *)v3 - *v3);
    unsigned int v5 = *v4;
    if (*(unsigned char *)(a2 + 46))
    {
      if (v5 < 0x49) {
        goto LABEL_18;
      }
      unsigned int v6 = v4[36];
      if (!v6) {
        goto LABEL_18;
      }
    }
    else if (v5 < 0x4B || (unsigned int v6 = v4[37]) == 0)
    {
LABEL_18:
      unsigned __int16 v13 = 17999;
      uint64_t v14 = *(int **)(a2 + 56);
      BOOL v15 = (unsigned __int16 *)((char *)v14 - *v14);
      unsigned int v16 = *v15;
      if (*(unsigned char *)(a2 + 94)) {
        goto LABEL_19;
      }
LABEL_15:
      if (v16 < 0x49) {
        goto LABEL_21;
      }
      unsigned int v17 = v15[36];
      if (!v17) {
        goto LABEL_21;
      }
      goto LABEL_33;
    }
    __int16 v11 = *(_WORD *)((char *)v3 + v6);
    unsigned __int16 v12 = v11 + 18000;
    unsigned __int16 v13 = v11 - 18000;
    if ((unsigned __int16)(v12 >> 5) < 0x465u) {
      unsigned __int16 v13 = v12;
    }
    uint64_t v14 = *(int **)(a2 + 56);
    BOOL v15 = (unsigned __int16 *)((char *)v14 - *v14);
    unsigned int v16 = *v15;
    if (*(unsigned char *)(a2 + 94))
    {
LABEL_19:
      if (v16 < 0x4B || (unsigned int v17 = v15[37]) == 0)
      {
LABEL_21:
        int v18 = 0xFFFF;
        goto LABEL_35;
      }
      goto LABEL_33;
    }
    goto LABEL_15;
  }
  unint64_t v7 = *(int **)(a2 + 16);
  uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
  unsigned int v9 = *v8;
  if (*(unsigned char *)(a2 + 46))
  {
    if (v9 < 5) {
      goto LABEL_30;
    }
    unsigned int v10 = v8[2];
    if (!v10) {
      goto LABEL_30;
    }
  }
  else if (v9 < 9 || (unsigned int v10 = v8[4]) == 0)
  {
LABEL_30:
    unsigned __int16 v13 = 18000;
    uint64_t v14 = *(int **)(a2 + 64);
    double v21 = (unsigned __int16 *)((char *)v14 - *v14);
    unsigned int v22 = *v21;
    if (*(unsigned char *)(a2 + 94)) {
      goto LABEL_31;
    }
LABEL_27:
    if (v22 >= 5)
    {
      unsigned int v17 = v21[2];
      if (v17) {
        goto LABEL_33;
      }
    }
    goto LABEL_34;
  }
  __int16 v19 = *(_WORD *)((char *)v7 + v10);
  unsigned __int16 v20 = v19 + 18000;
  unsigned __int16 v13 = v19 - 18000;
  if ((unsigned __int16)(v20 >> 5) < 0x465u) {
    unsigned __int16 v13 = v20;
  }
  uint64_t v14 = *(int **)(a2 + 64);
  double v21 = (unsigned __int16 *)((char *)v14 - *v14);
  unsigned int v22 = *v21;
  if (!*(unsigned char *)(a2 + 94)) {
    goto LABEL_27;
  }
LABEL_31:
  if (v22 >= 9)
  {
    unsigned int v17 = v21[4];
    if (v17)
    {
LABEL_33:
      int v18 = *(unsigned __int16 *)((char *)v14 + v17);
      goto LABEL_35;
    }
  }
LABEL_34:
  int v18 = 0;
LABEL_35:
  int v23 = v18 - v13;
  if (v23 > 18000) {
    v23 -= 36000;
  }
  if (v23 < -17999) {
    v23 += 36000;
  }
  unsigned int v24 = (int)fabs((double)v23 / 100.0);
  int v26 = *(unsigned int **)(a3 + 392);
  int v25 = *(unsigned int **)(a3 + 400);
  double v27 = v26;
  do
  {
    unsigned int v28 = *v27;
    v27 += 6;
    BOOL v29 = v28 >= v24 || v26 >= v25;
    int v26 = v27;
  }
  while (!v29);
  if (v27 - 6 == v25)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v33, "Angle based costs for walking not valid");
    unsigned int v32 = (void *)sub_2F404((uint64_t)exception, &v33);
  }
  return v27 - 4;
}

void sub_F6EDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_F6EE0C(uint64_t a1, unsigned int *a2, double **a3)
{
  if ((char *)a3[1] - (char *)*a3 == 24) {
    return *((void *)*a3 + 1);
  }
  double v5 = sub_F6EFD4(a1, a2);
  return sub_ECDF48(&v5, a3);
}

void sub_F6EE6C(uint64_t *a1, uint64_t *a2)
{
  sub_2D5D58(*a1, *a2 & 0xFFFFFFFFFFFFLL);
  uint64_t v4 = a1[1];
  uint64_t v5 = *a2;
  if (!sub_32A458(v4, v5)) {
    sub_32A584(v4, v5);
  }
}

double sub_F6EFD4(uint64_t a1, unsigned int *a2)
{
  unint64_t v4 = ((unint64_t)(a2[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)a2[1] << 32) | *a2;
  unsigned int v5 = (unsigned __int16)sub_3E73C4(*(void *)(a1 + 8), v4 ^ 0x1000000000000);
  unsigned int v6 = (unsigned __int16)sub_3E73C4(*(void *)(a1 + 8), v4);
  if (v6 <= v5) {
    unsigned int v6 = v5;
  }
  if (!v6) {
    return 0.0;
  }
  double v7 = (double)v6;
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
  unsigned __int16 v10 = (unsigned __int16)sub_3AC808(v8, v9);
  LOWORD(v11) = (unsigned __int16)sub_3AC808(v8, v9 | 0x1000000000000) + v10;
  unsigned __int16 v12 = (int *)*((void *)a2 + 1);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v13 >= 0xBu && (uint64_t v14 = v13[5]) != 0 && (*((unsigned char *)v12 + v14) & 4) != 0) {
    uint64_t v11 = 2 * (unsigned __int16)v11;
  }
  else {
    uint64_t v11 = (unsigned __int16)v11;
  }
  return (double)(unint64_t)v11 / v7;
}

uint64_t sub_F6F0D8()
{
  return 0x7FFFFFFFLL;
}

double sub_F6F0E0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  double v3 = (int *)a2[2];
  double v4 = 0.0;
  if (v3)
  {
    unsigned int v5 = (unsigned __int16 *)((char *)v3 - *v3);
    if (*v5 >= 0x1Du)
    {
      uint64_t v6 = v5[14];
      if (v6)
      {
        double v7 = (unsigned int *)((char *)v3 + v6 + *(unsigned int *)((char *)v3 + v6));
        uint64_t v8 = *v7;
        if (v8)
        {
          uint64_t v12 = v8;
          unsigned __int16 v13 = (unint64_t *)operator new(8 * v8);
          int v25 = v13;
          int v26 = v13;
          double v27 = &v13[v12];
          uint64_t v14 = (uint64_t *)(v7 + 1);
          do
          {
            uint64_t v28 = *v14;
            unsigned __int16 v13 = (unint64_t *)(sub_F6F548((unint64_t *)&v25, v13, &v28) + 8);
            ++v14;
            --v12;
          }
          while (v12 * 8);
          BOOL v15 = v25;
          double v4 = 0.0;
          if (v25 != v26)
          {
            unint64_t v16 = *sub_F6F29C(v25, v26, a1);
            unsigned int v17 = sub_F6F8B8(a1, v16, 1);
            if (v17)
            {
              int v18 = &v17[-*(int *)v17];
              if (*(unsigned __int16 *)v18 >= 5u)
              {
                if (*((_WORD *)v18 + 2))
                {
                  __int16 v19 = &v17[*((unsigned __int16 *)v18 + 2) + *(unsigned int *)&v17[*((unsigned __int16 *)v18 + 2)]];
                  if (*(_DWORD *)v19 > HIDWORD(v16))
                  {
                    unsigned __int16 v20 = &v19[4 * HIDWORD(v16) + 4 + *(unsigned int *)&v19[4 * HIDWORD(v16) + 4]];
                    double v21 = &v20[-*(int *)v20];
                    if (*(unsigned __int16 *)v21 >= 5u)
                    {
                      uint64_t v22 = *((unsigned __int16 *)v21 + 2);
                      if (v22)
                      {
                        float v23 = *(float *)&v20[v22];
                        if (v23 != 0.0) {
                          double v4 = sub_F6F410(a3, *a2) / v23;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (v15) {
            operator delete(v15);
          }
        }
      }
    }
  }
  return v4;
}

void sub_F6F26C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (v10) {
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_F6F29C(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  double v3 = a1;
  if (a1 != a2)
  {
    for (uint64_t i = a1 + 1; i != a2; ++i)
    {
      unint64_t v7 = *i;
      unint64_t v8 = *v3;
      unint64_t v9 = sub_F6F8B8(a3, *i, 1);
      float v10 = 0.0;
      float v11 = 0.0;
      if (v9)
      {
        uint64_t v12 = &v9[-*(int *)v9];
        if (*(unsigned __int16 *)v12 >= 5u)
        {
          if (*((_WORD *)v12 + 2))
          {
            unsigned __int16 v13 = &v9[*((unsigned __int16 *)v12 + 2) + *(unsigned int *)&v9[*((unsigned __int16 *)v12 + 2)]];
            if (*(_DWORD *)v13 > HIDWORD(v7))
            {
              uint64_t v14 = &v13[4 * HIDWORD(v7) + 4 + *(unsigned int *)&v13[4 * HIDWORD(v7) + 4]];
              BOOL v15 = &v14[-*(int *)v14];
              if (*(unsigned __int16 *)v15 >= 5u)
              {
                uint64_t v16 = *((unsigned __int16 *)v15 + 2);
                if (v16) {
                  float v11 = *(float *)&v14[v16];
                }
              }
            }
          }
        }
      }
      unsigned int v17 = sub_F6F8B8(a3, v8, 1);
      if (v17)
      {
        int v18 = &v17[-*(int *)v17];
        if (*(unsigned __int16 *)v18 >= 5u)
        {
          if (*((_WORD *)v18 + 2))
          {
            __int16 v19 = &v17[*((unsigned __int16 *)v18 + 2) + *(unsigned int *)&v17[*((unsigned __int16 *)v18 + 2)]];
            if (*(_DWORD *)v19 > HIDWORD(v8))
            {
              unsigned __int16 v20 = &v19[4 * HIDWORD(v8) + 4 + *(unsigned int *)&v19[4 * HIDWORD(v8) + 4]];
              double v21 = &v20[-*(int *)v20];
              if (*(unsigned __int16 *)v21 >= 5u)
              {
                uint64_t v22 = *((unsigned __int16 *)v21 + 2);
                if (v22) {
                  float v10 = *(float *)&v20[v22];
                }
              }
            }
          }
        }
      }
      if (v11 < v10) {
        double v3 = i;
      }
    }
  }
  return v3;
}

double sub_F6F410(uint64_t a1, uint64_t a2)
{
  double v3 = 0.0;
  if (a2)
  {
    double v4 = (int *)sub_2D5D58(a1, a2 & 0x1FFFFFFFFFFFFFFFLL);
    unsigned int v5 = (unsigned __int16 *)((char *)v4 - *v4);
    if (*v5 >= 0x6Du)
    {
      uint64_t v6 = v5[54];
      if (v5[54])
      {
        uint64_t v7 = *(unsigned int *)((char *)v4 + v6);
        unint64_t v8 = (int *)((char *)v4 + v6 + v7);
        unint64_t v9 = v8 + 1;
        uint64_t v10 = 4 * *v8;
        if (*v8)
        {
          unint64_t v11 = 0;
          uint64_t v12 = (char *)v4 + v6 + v7;
          while (1)
          {
            uint64_t v13 = v8[v11 / 4 + 1];
            uint64_t v14 = &v12[v11 + v13 - *(int *)((char *)&v8[v11 / 4 + 1] + v13)];
            if (*((unsigned __int16 *)v14 + 2) >= 5u)
            {
              uint64_t v15 = *((unsigned __int16 *)v14 + 4);
              if (v15)
              {
                if (v12[v11 + 4 + v13 + v15] == 2) {
                  break;
                }
              }
            }
            v11 += 4;
            if (v10 == v11) {
              return v3;
            }
          }
          uint64_t v16 = &v8[v11 / 4 + 1];
        }
        else
        {
          uint64_t v16 = v8 + 1;
        }
        if (v16 != &v9[(unint64_t)v10 / 4])
        {
          unsigned int v17 = (int *)((char *)v16 + *v16);
          int v18 = (unsigned __int16 *)((char *)v17 - *v17);
          unsigned int v19 = *v18;
          if ((a2 & 0x2000000000000000) == 0)
          {
            if (v19 < 0xD) {
              return v3;
            }
            unsigned int v20 = v18[6];
            if (!v20) {
              return v3;
            }
            return *(float *)((char *)v17 + v20);
          }
          if (v19 >= 0xB)
          {
            unsigned int v20 = v18[5];
            if (v20) {
              return *(float *)((char *)v17 + v20);
            }
          }
        }
      }
    }
  }
  return v3;
}

char *sub_F6F548(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  unint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)unint64_t v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      unsigned int v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      uint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        unsigned int v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        unsigned int v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v13 = (uint64_t *)((char *)v13 + v21);
          unsigned int v19 = (void *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          float v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *uint64_t v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)unint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    int32x2_t v30 = (char *)operator new(8 * v29);
    uint64_t v31 = &v30[8 * v8];
    unsigned int v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    int32x2_t v30 = 0;
    uint64_t v31 = (char *)(8 * v8);
    unsigned int v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    int v54 = (char *)operator new(8 * v53);
    uint64_t v31 = &v54[8 * (v53 >> 2)];
    unsigned int v32 = &v54[8 * v53];
    if (v30)
    {
      double v55 = &v54[8 * v53];
      operator delete(v30);
      unsigned int v32 = v55;
      double v34 = (char *)*a1;
      *(void *)uint64_t v31 = *a3;
      double v35 = v31 + 8;
      double v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  double v34 = (char *)v6;
  *(void *)uint64_t v31 = *a3;
  double v35 = v31 + 8;
  double v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    uint64_t v39 = v9;
    double v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    uint64_t v39 = v9;
    double v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v39 = &v9[-v41];
    double v36 = &v31[-v41];
    double v42 = v31 - 16;
    double v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)double v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  unsigned int v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    double v49 = v9;
    size_t v50 = v47 - v9;
    unsigned int v51 = v32;
    memmove(v35, v49, v50);
    unsigned int v32 = v51;
  }
  unsigned int v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_F6F8A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_F6F8B8(uint64_t a1, unsigned int a2, int a3)
{
  int v25 = a3;
  unsigned int v26 = a2;
  v24[0] = &v25;
  v24[1] = (int *)&v26;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 3280) == a2)
    {
      unsigned int v7 = 136;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 3304) == a2)
    {
      unsigned int v7 = 137;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 3328) == a2)
    {
      unsigned int v7 = 138;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 3352) == a2)
    {
      unsigned int v7 = 139;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      unint64_t v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_32;
    }
    unint64_t v11 = *(void *)(a1 + 3336);
    unint64_t v12 = *(void *)(a1 + 3312);
    unint64_t v13 = *(void *)(a1 + 3288);
    BOOL v14 = v13 >= v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 3288);
    }
    int v15 = 136;
    if (v14) {
      int v15 = 0;
    }
    BOOL v16 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 3312);
    }
    int v17 = 137;
    if (v16) {
      int v17 = v15;
    }
    if (v11 >= v4) {
      unint64_t v18 = v4;
    }
    else {
      unint64_t v18 = *(void *)(a1 + 3336);
    }
    unint64_t v19 = *(void *)(a1 + 3360);
    if (v11 >= v4) {
      int v20 = v17;
    }
    else {
      int v20 = 138;
    }
    uint64_t v21 = (unsigned int *)sub_2AB884(v5, 34, a2, 1);
    unsigned int v22 = 139;
    if (v19 >= v18) {
      unsigned int v22 = v20;
    }
    uint64_t v23 = v6 + 24 * v22;
    *(_DWORD *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = *(void *)(a1 + 3856);
    *(void *)(v23 + 16) = v21;
    if (v21) {
      return (char *)v21 + *v21;
    }
  }
LABEL_32:
  sub_F6FA48(v24);
  return 0;
}

uint64_t sub_F6FA48(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      unint64_t v9 = sub_736EC(0x22u);
      unint64_t v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    BOOL v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_F6FBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

void sub_F6FC74()
{
  unk_25FD07F = 16641;
  word_25FD068 = 65;
  byte_25FD097 = 1;
  byte_25FD081 = 0;
}

uint64_t sub_F6FC9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  sub_F047B4(a1, a2, a3, a4, a5, a6, 0);
  v9.n128_u64[0] = 0;
  v9.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814((__n128 *)(v7 + 72), &v9);
  return a1;
}

void *sub_F6FCEC()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  sub_F04800(v0);
  sub_FDC76C((uint64_t)v11, *(void *)(v3 + 8));
  sub_FDC7EC(v11, *(void *)v2, *(void **)(v2 + 8), *(void *)(v2 + 16), *(void *)(v2 + 24), -1, *(_DWORD *)(v3 + 24), (char *)v15);
  *(_DWORD *)(v3 + 60) = sub_FDD700((uint64_t)v11);
  sub_FDD708((uint64_t)v11, __dst);
  sub_33998(v3 + 32, (uint64_t)__dst);
  long long v6 = (unsigned char **)sub_FDD720((uint64_t)v11);
  sub_3E7ED8((void **)(v3 + 88), *(char **)(v3 + 96), *v6, v6[1], (v6[1] - *v6) >> 5);
  *(unsigned char *)(v3 + 57) = 1;
  if (sub_EAE144(v15))
  {
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
    sub_405F44((uint64_t)v15);
    uint64_t v7 = v12;
    if (!v12) {
      return sub_BF0DE8(v11);
    }
  }
  else
  {
    sub_443EFC((char *)__dst, v15);
    sub_EAC378((char **)v5, (uint64_t)__dst, 1uLL);
    sub_405F44((uint64_t)__dst);
    sub_405F44((uint64_t)v15);
    uint64_t v7 = v12;
    if (!v12) {
      return sub_BF0DE8(&v11[0]);
    }
  }
  long long v8 = v13;
  __n128 v9 = v7;
  if (v13 != v7)
  {
    do
    {
      if (*((char *)v8 - 1) < 0) {
        operator delete(*(v8 - 3));
      }
      v8 -= 4;
    }
    while (v8 != v7);
    __n128 v9 = v12;
  }
  unint64_t v13 = v7;
  operator delete(v9);
  return sub_BF0DE8(&v11[0]);
}

void sub_F6FEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_405F44((uint64_t)&STACK[0xFC8]);
  sub_405F44((uint64_t)&STACK[0x11A0]);
  sub_F6FEFC(va);
  _Unwind_Resume(a1);
}

void *sub_F6FEFC(void *a1)
{
  uint64_t v2 = a1[499];
  if (v2)
  {
    uint64_t v3 = a1[500];
    uint64_t v4 = (void *)a1[499];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 32;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[499];
    }
    a1[500] = v2;
    operator delete(v4);
  }

  return sub_BF0DE8(a1);
}

void *sub_F6FF80()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  sub_F04800(v0);
  sub_FDE7C4((uint64_t)v11, *(void *)(v3 + 8));
  sub_FDE844(v11, *(void *)v2, *(void **)(v2 + 8), *(void *)(v2 + 16), *(int32x2_t **)(v2 + 24), -1, *(_DWORD *)(v3 + 24), (char *)v15);
  *(_DWORD *)(v3 + 60) = sub_FDD700((uint64_t)v11);
  sub_FDD708((uint64_t)v11, __dst);
  sub_33998(v3 + 32, (uint64_t)__dst);
  long long v6 = (unsigned char **)sub_FDD720((uint64_t)v11);
  sub_3E7ED8((void **)(v3 + 88), *(char **)(v3 + 96), *v6, v6[1], (v6[1] - *v6) >> 5);
  *(unsigned char *)(v3 + 57) = 1;
  if (sub_EAE144(v15))
  {
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
    sub_405F44((uint64_t)v15);
    uint64_t v7 = v12;
    if (!v12) {
      return sub_BF0DE8(v11);
    }
  }
  else
  {
    sub_444D20((char *)__dst, v15);
    sub_EA9DBC((char **)v5, (uint64_t)__dst, 1uLL);
    sub_405F44((uint64_t)__dst);
    sub_405F44((uint64_t)v15);
    uint64_t v7 = v12;
    if (!v12) {
      return sub_BF0DE8(&v11[0]);
    }
  }
  long long v8 = v13;
  __n128 v9 = v7;
  if (v13 != v7)
  {
    do
    {
      if (*((char *)v8 - 1) < 0) {
        operator delete(*(v8 - 3));
      }
      v8 -= 4;
    }
    while (v8 != v7);
    __n128 v9 = v12;
  }
  unint64_t v13 = v7;
  operator delete(v9);
  return sub_BF0DE8(&v11[0]);
}

void sub_F70140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_405F44((uint64_t)&STACK[0xFC8]);
  sub_405F44((uint64_t)&STACK[0x11A0]);
  sub_F6FEFC(va);
  _Unwind_Resume(a1);
}

void *sub_F70190()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  sub_F04800(v0);
  sub_FDE7C4((uint64_t)v34, *(void *)(v3 + 8));
  unsigned int v6 = *(_DWORD *)(v3 + 24);
  uint64_t v7 = *(void *)v2;
  long long v8 = *(void **)(v2 + 8);
  uint64_t v9 = *(void *)(v2 + 16);
  if (*(void *)(v2 + 32))
  {
    sub_F70BF8((uint64_t *)(v2 + 32));
    sub_FDFAA0(v34, v7, v8, v9, *(int32x2_t **)(v2 + 24), -1, v6, &v31);
  }
  else
  {
    sub_FDF874(v34, *(void *)v2, *(void **)(v2 + 8), *(void *)(v2 + 16), *(int32x2_t **)(v2 + 24), -1, *(_DWORD *)(v3 + 24), &v31);
  }
  *(_DWORD *)(v3 + 60) = sub_FDD700((uint64_t)v34);
  sub_FDD708((uint64_t)v34, &v37);
  sub_33998(v3 + 32, (uint64_t)&v37);
  unint64_t v10 = (unsigned char **)sub_FDD720((uint64_t)v34);
  sub_3E7ED8((void **)(v3 + 88), *(char **)(v3 + 96), *v10, v10[1], (v10[1] - *v10) >> 5);
  *(unsigned char *)(v3 + 57) = 1;
  if (sub_EA80FC(&v31.__r_.__value_.__l.__data_))
  {
    *uint64_t v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  else
  {
    __n128 v37 = 0uLL;
    uint64_t v38 = 0;
    sub_444C18(&v37, (uint64_t)v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_, 0xCBEEA4E1A08AD8F3 * ((uint64_t)(v31.__r_.__value_.__l.__size_ - v31.__r_.__value_.__r.__words[0]) >> 3));
    if (SHIBYTE(v33) < 0)
    {
      sub_4200(&v39, (void *)__p, *((unint64_t *)&__p + 1));
    }
    else
    {
      long long v39 = __p;
      uint64_t v40 = v33;
    }
    sub_F70C9C(v5, (uint64_t)&v37, 1uLL);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    unint64_t v11 = v37.n128_u64[0];
    if (v37.n128_u64[0])
    {
      unint64_t v12 = v37.n128_u64[1];
      unint64_t v13 = (void *)v37.n128_u64[0];
      if (v37.n128_u64[1] != v37.n128_u64[0])
      {
        do
        {
          BOOL v14 = *(void **)(v12 - 224);
          if (v14)
          {
            *(void *)(v12 - 216) = v14;
            operator delete(v14);
          }
          std::string v15 = *(void **)(v12 - 248);
          if (v15)
          {
            *(void *)(v12 - 240) = v15;
            operator delete(v15);
          }
          std::string v16 = *(void **)(v12 - 312);
          if (v16)
          {
            *(void *)(v12 - 304) = v16;
            operator delete(v16);
          }
          std::string v17 = *(void **)(v12 - 336);
          if (v17)
          {
            *(void *)(v12 - 328) = v17;
            operator delete(v17);
          }
          uint64_t v18 = *(void *)(v12 - 360);
          if (v18)
          {
            uint64_t v19 = *(void *)(v12 - 352);
            int v20 = *(void **)(v12 - 360);
            if (v19 != v18)
            {
              do
              {
                uint64_t v21 = *(void **)(v19 - 24);
                if (v21)
                {
                  *(void *)(v19 - 16) = v21;
                  operator delete(v21);
                }
                v19 -= 56;
              }
              while (v19 != v18);
              int v20 = *(void **)(v12 - 360);
            }
            *(void *)(v12 - 352) = v18;
            operator delete(v20);
          }
          unsigned int v22 = *(void **)(v12 - 448);
          if (v22)
          {
            *(void *)(v12 - 440) = v22;
            operator delete(v22);
          }
          uint64_t v23 = (void **)(v12 - 472);
          if (*(char *)(v12 - 449) < 0) {
            operator delete(*v23);
          }
          v12 -= 472;
        }
        while (v23 != (void **)v11);
        unint64_t v13 = (void *)v37.n128_u64[0];
      }
      v37.n128_u64[1] = v11;
      operator delete(v13);
    }
  }
  if (SHIBYTE(v33) < 0) {
    operator delete((void *)__p);
  }
  std::string::size_type v24 = v31.__r_.__value_.__r.__words[0];
  if (v31.__r_.__value_.__r.__words[0])
  {
    std::string::size_type size = v31.__r_.__value_.__l.__size_;
    unsigned int v26 = (void *)v31.__r_.__value_.__r.__words[0];
    if (v31.__r_.__value_.__l.__size_ != v31.__r_.__value_.__r.__words[0])
    {
      do
        std::string::size_type size = sub_405F44(size - 472);
      while (size != v24);
      unsigned int v26 = (void *)v31.__r_.__value_.__r.__words[0];
    }
    v31.__r_.__value_.__l.__size_ = v24;
    operator delete(v26);
  }
  double v27 = v35;
  if (v35)
  {
    uint64_t v28 = v36;
    unint64_t v29 = v35;
    if (v36 != v35)
    {
      do
      {
        if (*((char *)v28 - 1) < 0) {
          operator delete(*(v28 - 3));
        }
        v28 -= 4;
      }
      while (v28 != v27);
      unint64_t v29 = v35;
    }
    double v36 = v27;
    operator delete(v29);
  }
  return sub_BF0DE8(v34);
}

void sub_F70530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  if (*(void *)(v3 + 4024)) {
    sub_20B1780(v4 - 120);
  }
  sub_405E28((uint64_t)va);
  sub_F6FEFC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_F705C0()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  sub_F04800(v0);
  sub_FE05DC((uint64_t)v11);
  sub_FE065C(v11, *(void *)v2, *(void **)(v2 + 8), *(void *)(v2 + 16), *(void *)(v2 + 24), -1, *(_DWORD *)(v3 + 24), (char *)v15);
  *(_DWORD *)(v3 + 60) = sub_FDD700((uint64_t)v11);
  sub_FDD708((uint64_t)v11, __dst);
  sub_33998(v3 + 32, (uint64_t)__dst);
  uint64_t v6 = (unsigned char **)sub_FDD720((uint64_t)v11);
  sub_3E7ED8((void **)(v3 + 88), *(char **)(v3 + 96), *v6, v6[1], (v6[1] - *v6) >> 5);
  *(unsigned char *)(v3 + 57) = 1;
  if (sub_EB2EC4((uint64_t)v15))
  {
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
    sub_4451C0((uint64_t)v15);
    uint64_t v7 = v12;
    if (!v12) {
      return sub_BF0DE8(v11);
    }
  }
  else
  {
    sub_4456B4((char *)__dst, v15);
    sub_EAAF00((char **)v5, (uint64_t)__dst, 1uLL);
    sub_4451C0((uint64_t)__dst);
    sub_4451C0((uint64_t)v15);
    uint64_t v7 = v12;
    if (!v12) {
      return sub_BF0DE8(&v11[0]);
    }
  }
  uint64_t v8 = v13;
  uint64_t v9 = v7;
  if (v13 != v7)
  {
    do
    {
      if (*((char *)v8 - 1) < 0) {
        operator delete(*(v8 - 3));
      }
      v8 -= 4;
    }
    while (v8 != v7);
    uint64_t v9 = v12;
  }
  unint64_t v13 = v7;
  operator delete(v9);
  return sub_BF0DE8(&v11[0]);
}

void sub_F70780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_4451C0((uint64_t)&STACK[0xFC8]);
  sub_4451C0((uint64_t)&STACK[0x11A8]);
  sub_F6FEFC(va);
  _Unwind_Resume(a1);
}

void *sub_F707D0()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  sub_F04800(v0);
  sub_FE05DC((uint64_t)v34);
  unsigned int v6 = *(_DWORD *)(v3 + 24);
  uint64_t v7 = *v2;
  uint64_t v8 = (void *)v2[1];
  uint64_t v9 = v2[2];
  if (v2[4])
  {
    sub_CE23F0(v2 + 4);
    sub_FE177C(v34, v7, v8, v9, v2[3], -1, v6, &v31);
  }
  else
  {
    sub_FE1550(v34, *v2, (void *)v2[1], v2[2], v2[3], -1, *(_DWORD *)(v3 + 24), &v31);
  }
  *(_DWORD *)(v3 + 60) = sub_FDD700((uint64_t)v34);
  sub_FDD708((uint64_t)v34, &v37);
  sub_33998(v3 + 32, (uint64_t)&v37);
  uint64_t v10 = (unsigned char **)sub_FDD720((uint64_t)v34);
  sub_3E7ED8((void **)(v3 + 88), *(char **)(v3 + 96), *v10, v10[1], (v10[1] - *v10) >> 5);
  *(unsigned char *)(v3 + 57) = 1;
  if (sub_EA8E90((uint64_t *)&v31))
  {
    *uint64_t v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  else
  {
    __n128 v37 = 0uLL;
    uint64_t v38 = 0;
    sub_445528(&v37, (uint64_t)v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v31.__r_.__value_.__l.__size_ - v31.__r_.__value_.__r.__words[0]) >> 5));
    if (SHIBYTE(v33) < 0)
    {
      sub_4200(&v39, (void *)__p, *((unint64_t *)&__p + 1));
    }
    else
    {
      long long v39 = __p;
      uint64_t v40 = v33;
    }
    sub_F70E84(v5, (uint64_t)&v37, 1uLL);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    unint64_t v11 = v37.n128_u64[0];
    if (v37.n128_u64[0])
    {
      unint64_t v12 = v37.n128_u64[1];
      unint64_t v13 = (void *)v37.n128_u64[0];
      if (v37.n128_u64[1] != v37.n128_u64[0])
      {
        do
        {
          BOOL v14 = *(void **)(v12 - 224);
          if (v14)
          {
            *(void *)(v12 - 216) = v14;
            operator delete(v14);
          }
          std::string v15 = *(void **)(v12 - 248);
          if (v15)
          {
            *(void *)(v12 - 240) = v15;
            operator delete(v15);
          }
          std::string v16 = *(void **)(v12 - 312);
          if (v16)
          {
            *(void *)(v12 - 304) = v16;
            operator delete(v16);
          }
          std::string v17 = *(void **)(v12 - 336);
          if (v17)
          {
            *(void *)(v12 - 328) = v17;
            operator delete(v17);
          }
          uint64_t v18 = *(void *)(v12 - 360);
          if (v18)
          {
            uint64_t v19 = *(void *)(v12 - 352);
            int v20 = *(void **)(v12 - 360);
            if (v19 != v18)
            {
              do
              {
                uint64_t v21 = *(void **)(v19 - 24);
                if (v21)
                {
                  *(void *)(v19 - 16) = v21;
                  operator delete(v21);
                }
                v19 -= 56;
              }
              while (v19 != v18);
              int v20 = *(void **)(v12 - 360);
            }
            *(void *)(v12 - 352) = v18;
            operator delete(v20);
          }
          unsigned int v22 = *(void **)(v12 - 456);
          if (v22)
          {
            *(void *)(v12 - 448) = v22;
            operator delete(v22);
          }
          uint64_t v23 = (void **)(v12 - 480);
          if (*(char *)(v12 - 457) < 0) {
            operator delete(*v23);
          }
          v12 -= 480;
        }
        while (v23 != (void **)v11);
        unint64_t v13 = (void *)v37.n128_u64[0];
      }
      v37.n128_u64[1] = v11;
      operator delete(v13);
    }
  }
  if (SHIBYTE(v33) < 0) {
    operator delete((void *)__p);
  }
  std::string::size_type v24 = v31.__r_.__value_.__r.__words[0];
  if (v31.__r_.__value_.__r.__words[0])
  {
    std::string::size_type size = v31.__r_.__value_.__l.__size_;
    unsigned int v26 = (void *)v31.__r_.__value_.__r.__words[0];
    if (v31.__r_.__value_.__l.__size_ != v31.__r_.__value_.__r.__words[0])
    {
      do
        std::string::size_type size = sub_4451C0(size - 480);
      while (size != v24);
      unsigned int v26 = (void *)v31.__r_.__value_.__r.__words[0];
    }
    v31.__r_.__value_.__l.__size_ = v24;
    operator delete(v26);
  }
  double v27 = v35;
  if (v35)
  {
    uint64_t v28 = v36;
    unint64_t v29 = v35;
    if (v36 != v35)
    {
      do
      {
        if (*((char *)v28 - 1) < 0) {
          operator delete(*(v28 - 3));
        }
        v28 -= 4;
      }
      while (v28 != v27);
      unint64_t v29 = v35;
    }
    double v36 = v27;
    operator delete(v29);
  }
  return sub_BF0DE8(v34);
}

void sub_F70B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  if (*(void *)(v3 + 4024)) {
    sub_20B17BC(v4 - 120);
  }
  sub_440ED4((uint64_t)va);
  sub_F6FEFC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_F70BF8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "Bad optional access.");
    uint64_t v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return result;
}

void sub_F70C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_F70C9C(void *a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0x555555555555556) {
      sub_2E00();
    }
    uint64_t v6 = 6 * a3;
    uint64_t v7 = operator new(48 * a3);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[v6];
    a1[1] = sub_F70D6C(v4, a2, a2 + v6 * 8, v7);
  }
  return a1;
}

void sub_F70D3C(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1)
  {
    sub_C64384(v1, *(void ***)v1);
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_F70D6C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  if (a2 != a3)
  {
    uint64_t v6 = (long long *)(a2 + 24);
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      uint64_t v8 = (uint64_t)v6 - 24;
      sub_444C18(v4, *((void *)v6 - 3), *((void *)v6 - 2), 0xCBEEA4E1A08AD8F3 * ((uint64_t)(*((void *)v6 - 2) - *((void *)v6 - 3)) >> 3));
      uint64_t v9 = v4 + 3;
      if (*((char *)v6 + 23) < 0)
      {
        sub_4200(v9, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        v4[5] = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v9 = v7;
      }
      uint64_t v4 = v11 + 6;
      v11 += 6;
      v6 += 3;
    }
    while (v8 + 48 != a3);
  }
  return v4;
}

void sub_F70E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*v9)
  {
    sub_20B1780((uint64_t)v9);
    sub_D2E500((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_D2E500((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *sub_F70E84(void *a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0x555555555555556) {
      sub_2E00();
    }
    uint64_t v6 = 6 * a3;
    long long v7 = operator new(48 * a3);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[v6];
    a1[1] = sub_F70F54(v4, a2, a2 + v6 * 8, v7);
  }
  return a1;
}

void sub_F70F24(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1)
  {
    sub_CE2264(v1, *(void ***)v1);
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_F70F54(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  if (a2 != a3)
  {
    uint64_t v6 = (long long *)(a2 + 24);
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      uint64_t v8 = (uint64_t)v6 - 24;
      sub_445528(v4, *((void *)v6 - 3), *((void *)v6 - 2), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((void *)v6 - 2) - *((void *)v6 - 3)) >> 5));
      uint64_t v9 = v4 + 3;
      if (*((char *)v6 + 23) < 0)
      {
        sub_4200(v9, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        v4[5] = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v9 = v7;
      }
      uint64_t v4 = v11 + 6;
      v11 += 6;
      v6 += 3;
    }
    while (v8 + 48 != a3);
  }
  return v4;
}

void sub_F7102C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*v9)
  {
    sub_20B17BC((uint64_t)v9);
    sub_F58C2C((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_F58C2C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_F71064()
{
  unk_25FD0AF = 16641;
  word_25FD098 = 65;
  byte_25FD0C7 = 1;
  byte_25FD0B1 = 0;
}

BOOL sub_F7108C(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 1;
  }
  if (a1[1] >= a2[1]) {
    return a1[2] < a2[2];
  }
  return 1;
}

void sub_F710D0(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  v24[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v24[1] = xmmword_20B93A0;
  strcpy(v24[0], "leg_config_by_great_circle_distance");
  uint64_t v4 = (uint64_t *)sub_5C4AC(a1, (uint64_t)v24);
  uint64_t v5 = v4;
  if (SHIBYTE(v24[2]) < 0)
  {
    operator delete(v24[0]);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    if (*v5 == v7) {
      return;
    }
    while (1)
    {
LABEL_7:
      if (*(_DWORD *)(v6 + 8) != 2)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      uint64_t v8 = *(void **)v6;
      HIBYTE(v24[2]) = 20;
      strcpy((char *)v24, "max_total_distance_m");
      uint64_t v23 = sub_5CDE0(v8, v24);
      HIBYTE(v21[2]) = 18;
      strcpy((char *)v21, "max_leg_distance_m");
      uint64_t v22 = sub_5CDE0(v8, v21);
      uint64_t v18 = operator new(0x20uLL);
      long long v19 = xmmword_20B5EB0;
      strcpy((char *)v18, "max_distance_from_origin_m");
      uint64_t v20 = sub_5CDE0(v8, &v18);
      char v17 = 6;
      strcpy((char *)__p, "config");
      uint64_t v9 = sub_561B0(v8, (uint64_t)__p);
      uint64_t v10 = *(uint64_t **)(a2 + 8);
      if ((unint64_t)v10 >= *(void *)(a2 + 16))
      {
        *(void *)(a2 + 8) = sub_F714B4((char **)a2, &v23, &v22, &v20, v9);
        if ((v17 & 0x80000000) == 0) {
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v11 = v22;
        uint64_t v12 = v20;
        *uint64_t v10 = v23;
        v10[1] = v11;
        v10[2] = v12;
        unint64_t v13 = v10 + 3;
        if (*(char *)(v9 + 23) < 0)
        {
          sub_4200(v13, *(void **)v9, *(void *)(v9 + 8));
        }
        else
        {
          long long v14 = *(_OWORD *)v9;
          v10[5] = *(void *)(v9 + 16);
          *(_OWORD *)unint64_t v13 = v14;
        }
        *(void *)(a2 + 8) = v10 + 6;
        *(void *)(a2 + 8) = v10 + 6;
        if ((v17 & 0x80000000) == 0)
        {
LABEL_12:
          if ((SHIBYTE(v19) & 0x80000000) == 0) {
            goto LABEL_13;
          }
          goto LABEL_19;
        }
      }
      operator delete(__p[0]);
      if ((SHIBYTE(v19) & 0x80000000) == 0)
      {
LABEL_13:
        if ((SHIBYTE(v21[2]) & 0x80000000) == 0) {
          goto LABEL_14;
        }
        goto LABEL_20;
      }
LABEL_19:
      operator delete(v18);
      if ((SHIBYTE(v21[2]) & 0x80000000) == 0)
      {
LABEL_14:
        if (SHIBYTE(v24[2]) < 0) {
          goto LABEL_21;
        }
        goto LABEL_6;
      }
LABEL_20:
      operator delete(v21[0]);
      if (SHIBYTE(v24[2]) < 0) {
LABEL_21:
      }
        operator delete(v24[0]);
LABEL_6:
      v6 += 16;
      if (v6 == v7) {
        return;
      }
    }
  }
  uint64_t v6 = *v4;
  uint64_t v7 = v4[1];
  if (*v4 != v7) {
    goto LABEL_7;
  }
}

void sub_F713B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if ((*(char *)(v31 - 89) & 0x80000000) == 0)
  {
    sub_28F14C(v30);
    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v31 - 112));
  sub_28F14C(v30);
  _Unwind_Resume(a1);
}

char *sub_F714B4(char **a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
  unint64_t v9 = v8 + 1;
  if (v8 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - v6) >> 4) > v9) {
    unint64_t v9 = 0x5555555555555556 * ((a1[2] - v6) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v6) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v14 = 0x555555555555555;
  }
  else {
    unint64_t v14 = v9;
  }
  if (v14)
  {
    if (v14 > 0x555555555555555) {
      sub_188D718();
    }
    std::string v15 = (char *)operator new(48 * v14);
  }
  else
  {
    std::string v15 = 0;
  }
  std::string v16 = &v15[48 * v8];
  unsigned int v26 = v16;
  double v27 = v16;
  uint64_t v28 = &v15[48 * v14];
  uint64_t v17 = *a3;
  uint64_t v18 = *a4;
  *(void *)std::string v16 = *a2;
  *((void *)v16 + 1) = v17;
  *((void *)v16 + 2) = v18;
  long long v19 = v16 + 24;
  if (*(char *)(a5 + 23) < 0)
  {
    sub_4200(v19, *(void **)a5, *(void *)(a5 + 8));
    uint64_t v6 = *a1;
    uint64_t v7 = a1[1];
    std::string v16 = v26;
    uint64_t v20 = v27 + 48;
    if (v7 == *a1)
    {
LABEL_17:
      uint64_t v23 = v6;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)long long v19 = *(_OWORD *)a5;
    *((void *)v16 + 5) = *(void *)(a5 + 16);
    uint64_t v20 = v16 + 48;
    if (v7 == v6) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v21 = *((_OWORD *)v7 - 3);
    *((void *)v16 - 4) = *((void *)v7 - 4);
    *((_OWORD *)v16 - 3) = v21;
    long long v22 = *(_OWORD *)(v7 - 24);
    *((void *)v16 - 1) = *((void *)v7 - 1);
    *(_OWORD *)(v16 - 24) = v22;
    v16 -= 48;
    *((void *)v7 - 2) = 0;
    *((void *)v7 - 1) = 0;
    *((void *)v7 - 3) = 0;
    v7 -= 48;
  }
  while (v7 != v6);
  uint64_t v23 = *a1;
  uint64_t v6 = a1[1];
LABEL_18:
  *a1 = v16;
  a1[1] = v20;
  a1[2] = v28;
  if (v6 == v23)
  {
    if (v6) {
LABEL_20:
    }
      operator delete(v6);
  }
  else
  {
    do
    {
      int v25 = v6 - 48;
      if (*(v6 - 1) < 0) {
        operator delete(*((void **)v6 - 3));
      }
      v6 -= 48;
    }
    while (v25 != v23);
    uint64_t v6 = v23;
    if (v23) {
      goto LABEL_20;
    }
  }
  return v20;
}

void sub_F716B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_29078C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_F716CC(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(0x10uLL);
  v2[1] = 50529027;
  *(_DWORD *)((char *)v2 + 7) = 50529027;
  *a1 = v2;
  a1[1] = v2 + 4;
  a1[2] = v2 + 4;
  *((unsigned char *)v2 + 15) = 0;
  _DWORD *v2 = 197376;
  *(_DWORD *)((char *)v2 + 6) = 0x2000000;
  *(_DWORD *)((char *)v2 + 11) = 50528258;
  return a1;
}

uint64_t sub_F7173C(void *a1, unsigned __int8 *a2, unsigned __int8 *a3, int a4, int a5)
{
  uint64_t v5 = 3;
  if (!a5) {
    uint64_t v5 = 1;
  }
  uint64_t v6 = 2;
  if (!a5) {
    uint64_t v6 = 0;
  }
  if (!a4) {
    uint64_t v5 = v6;
  }
  return *(unsigned __int8 *)(*a1 + ((4 * *a3 + 8 * *a2) | v5));
}

void sub_F71778(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = (void *)*a1;
  int64_t v7 = a1[1] - (void)v6;
  if (v7 >= 1) {
    memset(v6, 3, v7);
  }
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  while (v8 != v9)
  {
    if (*(_DWORD *)(v8 + 8) != 2) {
      goto LABEL_19;
    }
    uint64_t v10 = *(void **)v8;
    uint64_t v11 = *a3;
    uint64_t v12 = a3[1];
    uint64_t v17 = *(void **)v8;
    if (v11 == v12) {
      goto LABEL_4;
    }
    do
    {
      if (*(_DWORD *)(v11 + 8) != 2) {
        goto LABEL_19;
      }
      if (sub_F729F8(&v17, *(void **)v11)) {
        goto LABEL_13;
      }
      v11 += 16;
    }
    while (v11 != v12);
    uint64_t v11 = v12;
LABEL_13:
    if (v11 == a3[1]) {
LABEL_4:
    }
      sub_F718C4(a1, v10);
    v8 += 16;
  }
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  if (v14 != v13)
  {
    while (*(_DWORD *)(v14 + 8) == 2)
    {
      std::string v15 = *(void **)v14;
      v14 += 16;
      sub_F718C4(a1, v15);
      if (v14 == v13) {
        return;
      }
    }
LABEL_19:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
}

void sub_F718C4(uint64_t *a1, void *a2)
{
  HIBYTE(v16) = 9;
  strcpy((char *)__p, "from_zone");
  uint64_t v4 = (unsigned __int16 *)sub_561B0(a2, (uint64_t)__p);
  int v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (*((void *)v4 + 1) != 2) {
      goto LABEL_8;
    }
    uint64_t v4 = *(unsigned __int16 **)v4;
  }
  else if (v5 != 2)
  {
LABEL_8:
    BOOL v6 = 0;
    if ((SHIBYTE(v16) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  BOOL v6 = bswap32(*v4) >> 16 == 20052;
  if ((SHIBYTE(v16) & 0x80000000) == 0) {
    goto LABEL_10;
  }
LABEL_9:
  operator delete(__p[0]);
LABEL_10:
  BOOL v17 = v6;
  HIBYTE(v16) = 7;
  strcpy((char *)__p, "to_zone");
  int64_t v7 = (unsigned __int16 *)sub_561B0(a2, (uint64_t)__p);
  int v8 = *((char *)v7 + 23);
  if (v8 < 0)
  {
    if (*((void *)v7 + 1) != 2) {
      goto LABEL_19;
    }
    int64_t v7 = *(unsigned __int16 **)v7;
LABEL_15:
    BOOL v9 = bswap32(*v7) >> 16 == 20052;
    if ((SHIBYTE(v16) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v8 == 2) {
    goto LABEL_15;
  }
LABEL_19:
  BOOL v9 = 0;
  if (SHIBYTE(v16) < 0) {
LABEL_16:
  }
    operator delete(__p[0]);
LABEL_17:
  BOOL v14 = v9;
  char v13 = 4;
  strcpy((char *)v12, "type");
  uint64_t v10 = sub_561B0(a2, (uint64_t)v12);
  if (*(char *)(v10 + 23) < 0)
  {
    sub_4200(__p, *(void **)v10, *(void *)(v10 + 8));
  }
  else
  {
    long long v11 = *(_OWORD *)v10;
    uint64_t v16 = *(void *)(v10 + 16);
    *(_OWORD *)long long __p = v11;
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  sub_F71B2C(a1, (unsigned __int8 *)&v17, &v14, __p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
}

void sub_F71AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_F71AD8(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  if (v2 - *a1 != a2[1] - *a2) {
    return 1;
  }
  if (v3 == v2) {
    return 0;
  }
  uint64_t v5 = v3 + 1;
  do
  {
    int v6 = *v4++;
    int v7 = *(unsigned __int8 *)(v5 - 1);
    BOOL result = v7 != v6;
  }
  while (v7 == v6 && v5++ != v2);
  return result;
}

uint64_t *sub_F71B2C(uint64_t *result, unsigned __int8 *a2, unsigned char *a3, void *a4)
{
  if ((*((char *)a4 + 23) & 0x80000000) == 0)
  {
    int v4 = *((unsigned __int8 *)a4 + 23);
    switch(*((unsigned char *)a4 + 23))
    {
      case 4:
        break;
      case 7:
        if (*(_DWORD *)a4 == 1668506980 && *(_DWORD *)((char *)a4 + 3) == 1684956515) {
          goto LABEL_56;
        }
        return result;
      case 0xB:
        goto LABEL_40;
      case 0xC:
        goto LABEL_48;
      case 0xE:
        if (*a4 == 0x645F646E65637361 && *(void *)((char *)a4 + 6) == 0x646E65637365645FLL) {
          goto LABEL_55;
        }
        switch(v4)
        {
          case 4:
            goto LABEL_53;
          case 12:
LABEL_48:
            if (*a4 == 0x5F6574616C6F6976 && *((_DWORD *)a4 + 2) == 1212631368) {
              goto LABEL_57;
            }
            break;
          case 11:
LABEL_40:
            if (*a4 == 0x5F6574616C6F6976 && *(void *)((char *)a4 + 3) == 0x574F4C5F6574616CLL) {
              goto LABEL_45;
            }
            break;
          default:
            return result;
        }
        if (v4 != 4) {
          return result;
        }
        break;
      default:
        return result;
    }
LABEL_53:
    if (*(_DWORD *)a4 == 1701147238) {
      *(_DWORD *)(*result + 4 * *a3 + 8 * *a2) = 197376;
    }
    return result;
  }
  uint64_t v6 = a4[1];
  if (v6 == 7 && *(_DWORD *)*a4 == 1668506980 && *(_DWORD *)(*a4 + 3) == 1684956515)
  {
LABEL_56:
    int v20 = *a2;
    int v21 = *a3;
    uint64_t v22 = *result;
    *(_WORD *)(*result + (4 * v21 + 8 * v20) + 2) = 0;
    *(unsigned char *)(v22 + (8 * v21 + 4 * v20)) = 0;
    return result;
  }
  if (v6 == 14)
  {
    if (*(void *)*a4 == 0x645F646E65637361 && *(void *)(*a4 + 6) == 0x646E65637365645FLL)
    {
LABEL_55:
      int v17 = *a2;
      int v18 = *a3;
      uint64_t v19 = *result;
      *(unsigned char *)(*result + (4 * v18 + 8 * v17) + 2) = 0;
      *(unsigned char *)(v19 + (8 * v18 + 4 * v17) + 2) = 0;
      return result;
    }
    uint64_t v6 = a4[1];
  }
  if (v6 == 11)
  {
    if (*(void *)*a4 == 0x5F6574616C6F6976 && *(void *)(*a4 + 3) == 0x574F4C5F6574616CLL)
    {
LABEL_45:
      uint64_t v13 = *a3;
      uint64_t v14 = *result;
      uint64_t v15 = 8 * *a2;
      if (!*a3) {
        *(unsigned char *)(v14 + (v15 | 1)) = 1;
      }
      *(unsigned char *)(v14 + ((v15 + 4 * v13) | 3)) = 1;
      return result;
    }
    uint64_t v6 = a4[1];
  }
  if (v6 != 12)
  {
LABEL_31:
    if (v6 != 4) {
      return result;
    }
    a4 = (void *)*a4;
    goto LABEL_53;
  }
  if (*(void *)*a4 != 0x5F6574616C6F6976 || *(_DWORD *)(*a4 + 8) != 1212631368)
  {
    uint64_t v6 = a4[1];
    goto LABEL_31;
  }
LABEL_57:
  uint64_t v23 = *a3;
  uint64_t v24 = *result;
  uint64_t v25 = 8 * *a2;
  if (!*a3) {
    *(unsigned char *)(v24 + (v25 | 1)) = 2;
  }
  *(unsigned char *)(v24 + ((v25 + 4 * v23) | 3)) = 2;
  return result;
}

void *sub_F71E98(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = (char *)operator new(0x90uLL);
  *(void *)&long long v3 = 0x303030303030303;
  *((void *)&v3 + 1) = 0x303030303030303;
  *((_OWORD *)v2 + 7) = v3;
  *((_OWORD *)v2 + 8) = v3;
  *(_OWORD *)uint64_t v2 = v3;
  *((_OWORD *)v2 + 1) = v3;
  *((_OWORD *)v2 + 2) = v3;
  *((_OWORD *)v2 + 3) = v3;
  *((_OWORD *)v2 + 4) = v3;
  *((_OWORD *)v2 + 5) = v3;
  *((_OWORD *)v2 + 6) = v3;
  *a1 = v2;
  a1[1] = v2 + 144;
  a1[2] = v2 + 144;
  *((_WORD *)v2 + 69) = 0;
  v2[116] = 0;
  *((_WORD *)v2 + 67) = 0;
  *((_WORD *)v2 + 65) = 0;
  v2[68] = 0;
  *((_WORD *)v2 + 63) = 0;
  v2[44] = 0;
  *((_WORD *)v2 + 61) = 0;
  v2[20] = 0;
  *((_WORD *)v2 + 39) = 0;
  v2[36] = 0;
  v2[110] = 0;
  *((_WORD *)v2 + 41) = 512;
  v2[62] = 0;
  *((_WORD *)v2 + 37) = 512;
  v2[14] = 0;
  v2[95] = 2;
  *(_DWORD *)(v2 + 90) = 33554944;
  *((_WORD *)v2 + 49) = 0;
  v2[16] = 0;
  v2[106] = 0;
  v2[66] = 0;
  v2[102] = 0;
  v2[42] = 0;
  v2[117] = 1;
  v2[119] = 1;
  v2[111] = 1;
  v2[107] = 1;
  v2[103] = 1;
  *((_WORD *)v2 + 27) = 0;
  v2[32] = 0;
  *((_WORD *)v2 + 25) = 0;
  v2[8] = 0;
  *((_WORD *)v2 + 13) = 512;
  *((_WORD *)v2 + 3) = 256;
  v2[35] = 2;
  v2[11] = 1;
  return a1;
}

uint64_t sub_F71F98(void *a1, unsigned __int8 *a2, unsigned __int8 *a3, int a4, int a5)
{
  uint64_t v5 = 3;
  if (!a5) {
    uint64_t v5 = 1;
  }
  uint64_t v6 = 2;
  if (!a5) {
    uint64_t v6 = 0;
  }
  if (!a4) {
    uint64_t v5 = v6;
  }
  return *(unsigned __int8 *)(*a1 + (v5 | (4 * (*a3 + 6 * *a2))));
}

void sub_F71FD4(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = (void *)*a1;
  int64_t v7 = a1[1] - (void)v6;
  if (v7 >= 1) {
    memset(v6, 3, v7);
  }
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  while (v8 != v9)
  {
    if (*(_DWORD *)(v8 + 8) != 2) {
      goto LABEL_19;
    }
    uint64_t v10 = *(void **)v8;
    uint64_t v11 = *a3;
    uint64_t v12 = a3[1];
    int v17 = *(void **)v8;
    if (v11 == v12) {
      goto LABEL_4;
    }
    do
    {
      if (*(_DWORD *)(v11 + 8) != 2) {
        goto LABEL_19;
      }
      if (sub_F72CE4(&v17, *(void **)v11)) {
        goto LABEL_13;
      }
      v11 += 16;
    }
    while (v11 != v12);
    uint64_t v11 = v12;
LABEL_13:
    if (v11 == a3[1]) {
LABEL_4:
    }
      sub_F72120(a1, v10);
    v8 += 16;
  }
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  if (v14 != v13)
  {
    while (*(_DWORD *)(v14 + 8) == 2)
    {
      uint64_t v15 = *(void **)v14;
      v14 += 16;
      sub_F72120(a1, v15);
      if (v14 == v13) {
        return;
      }
    }
LABEL_19:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
}

void sub_F72120(uint64_t *a1, void *a2)
{
  HIBYTE(v14) = 9;
  strcpy((char *)__p, "from_zone");
  int v4 = (unsigned int *)sub_561B0(a2, (uint64_t)__p);
  unsigned __int8 v5 = sub_F726EC(v4);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  unsigned __int8 v15 = v5;
  HIBYTE(v14) = 7;
  strcpy((char *)__p, "to_zone");
  uint64_t v6 = (unsigned int *)sub_561B0(a2, (uint64_t)__p);
  unsigned __int8 v7 = sub_F726EC(v6);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  unsigned __int8 v12 = v7;
  char v11 = 4;
  strcpy((char *)v10, "type");
  uint64_t v8 = sub_561B0(a2, (uint64_t)v10);
  if (*(char *)(v8 + 23) < 0)
  {
    sub_4200(__p, *(void **)v8, *(void *)(v8 + 8));
  }
  else
  {
    long long v9 = *(_OWORD *)v8;
    uint64_t v14 = *(void *)(v8 + 16);
    *(_OWORD *)long long __p = v9;
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  sub_F722B4(a1, &v15, &v12, __p);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
}

void sub_F7227C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_F722B4(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3, void *a4)
{
  if ((*((char *)a4 + 23) & 0x80000000) == 0)
  {
    int v4 = *((unsigned __int8 *)a4 + 23);
    switch(*((unsigned char *)a4 + 23))
    {
      case 4:
        break;
      case 7:
        if (*(_DWORD *)a4 == 1668506980 && *(_DWORD *)((char *)a4 + 3) == 1684956515) {
          goto LABEL_56;
        }
        return result;
      case 0xB:
        goto LABEL_40;
      case 0xC:
        goto LABEL_48;
      case 0xE:
        if (*a4 == 0x645F646E65637361 && *(void *)((char *)a4 + 6) == 0x646E65637365645FLL) {
          goto LABEL_55;
        }
        switch(v4)
        {
          case 4:
            goto LABEL_53;
          case 12:
LABEL_48:
            if (*a4 == 0x5F6574616C6F6976 && *((_DWORD *)a4 + 2) == 1212631368) {
              goto LABEL_57;
            }
            break;
          case 11:
LABEL_40:
            if (*a4 == 0x5F6574616C6F6976 && *(void *)((char *)a4 + 3) == 0x574F4C5F6574616CLL) {
              goto LABEL_45;
            }
            break;
          default:
            return result;
        }
        if (v4 != 4) {
          return result;
        }
        break;
      default:
        return result;
    }
LABEL_53:
    if (*(_DWORD *)a4 == 1701147238) {
      *(_DWORD *)(*result + 4 * (*a3 + 6 * *a2)) = 197376;
    }
    return result;
  }
  uint64_t v6 = a4[1];
  if (v6 == 7 && *(_DWORD *)*a4 == 1668506980 && *(_DWORD *)(*a4 + 3) == 1684956515)
  {
LABEL_56:
    int v20 = *a2;
    int v21 = *a3;
    uint64_t v22 = *result;
    *(_WORD *)(*result + (4 * (v21 + 6 * v20)) + 2) = 0;
    *(unsigned char *)(v22 + 4 * (v20 + 6 * v21)) = 0;
    return result;
  }
  if (v6 == 14)
  {
    if (*(void *)*a4 == 0x645F646E65637361 && *(void *)(*a4 + 6) == 0x646E65637365645FLL)
    {
LABEL_55:
      int v17 = *a2;
      int v18 = *a3;
      uint64_t v19 = *result;
      *(unsigned char *)(*result + (4 * (v18 + 6 * v17)) + 2) = 0;
      *(unsigned char *)(v19 + (4 * (v17 + 6 * v18)) + 2) = 0;
      return result;
    }
    uint64_t v6 = a4[1];
  }
  if (v6 == 11)
  {
    if (*(void *)*a4 == 0x5F6574616C6F6976 && *(void *)(*a4 + 3) == 0x574F4C5F6574616CLL)
    {
LABEL_45:
      uint64_t v13 = *a3;
      unsigned int v14 = *a2;
      uint64_t v15 = *result;
      if (v13 == 5) {
        *(unsigned char *)(v15 + 24 * *a2 + 21) = 1;
      }
      *(unsigned char *)(v15 + 4 * (v13 + 6 * v14) + 3) = 1;
      return result;
    }
    uint64_t v6 = a4[1];
  }
  if (v6 != 12)
  {
LABEL_31:
    if (v6 != 4) {
      return result;
    }
    a4 = (void *)*a4;
    goto LABEL_53;
  }
  if (*(void *)*a4 != 0x5F6574616C6F6976 || *(_DWORD *)(*a4 + 8) != 1212631368)
  {
    uint64_t v6 = a4[1];
    goto LABEL_31;
  }
LABEL_57:
  uint64_t v23 = *a3;
  unsigned int v24 = *a2;
  uint64_t v25 = *result;
  if (v23 == 5) {
    *(unsigned char *)(v25 + 24 * *a2 + 21) = 2;
  }
  *(unsigned char *)(v25 + 4 * (v23 + 6 * v24) + 3) = 2;
  return result;
}

void *sub_F72610(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = (char *)operator new(0x24uLL);
  *(void *)(v2 + 12) = 0x303030303030303;
  *(void *)(v2 + 20) = 0x303030303030303;
  *(void *)(v2 + 4) = 0x303030303030303;
  *((_WORD *)v2 + 14) = 771;
  *a1 = v2;
  a1[1] = v2 + 36;
  a1[2] = v2 + 36;
  *(_DWORD *)uint64_t v2 = 197376;
  v2[16] = 0;
  v2[19] = 0;
  *((_WORD *)v2 + 17) = 3;
  *((_WORD *)v2 + 13) = 0;
  *(_DWORD *)(v2 + 30) = 50331648;
  *((_WORD *)v2 + 10) = 256;
  *((_WORD *)v2 + 7) = 256;
  v2[11] = 2;
  *(_DWORD *)(v2 + 6) = 33554944;
  v2[23] = 1;
  return a1;
}

uint64_t sub_F726B0(void *a1, unsigned __int8 *a2, unsigned __int8 *a3, int a4, int a5)
{
  uint64_t v5 = 3;
  if (!a5) {
    uint64_t v5 = 1;
  }
  uint64_t v6 = 2;
  if (!a5) {
    uint64_t v6 = 0;
  }
  if (!a4) {
    uint64_t v5 = v6;
  }
  return *(unsigned __int8 *)(*a1 + (v5 | (4 * (3 * *a2 + *a3))));
}

uint64_t sub_F726EC(unsigned int *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v5 = *((void *)a1 + 1);
    if (v5 == 14 && **(void **)a1 == 0x505F5241435F4F4ELL && *(void *)(*(void *)a1 + 6) == 0x455441564952505FLL) {
      return 0;
    }
    if (v5 == 17)
    {
      if (**(void **)a1 == 0x4E5F5241435F4F4ELL
        && *(void *)(*(void *)a1 + 8) == 0x47554F5248545F4FLL
        && *(unsigned char *)(*(void *)a1 + 16) == 72)
      {
        return 1;
      }
      uint64_t v5 = *((void *)a1 + 1);
    }
    if (v5 == 6)
    {
      if (**(_DWORD **)a1 == 1130319694 && *(_WORD *)(*(void *)a1 + 4) == 21057) {
        return 2;
      }
      uint64_t v5 = *((void *)a1 + 1);
    }
    if (v5 == 10)
    {
      if (**(void **)a1 == 0x554F5248545F4F4ELL && *(_WORD *)(*(void *)a1 + 8) == 18503) {
        return 3;
      }
      uint64_t v5 = *((void *)a1 + 1);
    }
    if (v5 != 7) {
      return 5;
    }
    a1 = *(unsigned int **)a1;
  }
  else
  {
    int v1 = *((unsigned __int8 *)a1 + 23);
    unsigned __int8 v2 = 5;
    switch(*((unsigned char *)a1 + 23))
    {
      case 6:
        goto LABEL_3;
      case 7:
        break;
      case 0xA:
        goto LABEL_50;
      case 0xE:
        if (*(void *)a1 ^ 0x505F5241435F4F4ELL | *(void *)((char *)a1 + 6) ^ 0x455441564952505FLL) {
          return 5;
        }
        else {
          return 0;
        }
      case 0x11:
        if (*(void *)a1 == 0x4E5F5241435F4F4ELL
          && *((void *)a1 + 1) == 0x47554F5248545F4FLL
          && *((unsigned char *)a1 + 16) == 72)
        {
          return 1;
        }
        if (v1 != 10)
        {
          if (v1 == 7) {
            break;
          }
          if (v1 == 6)
          {
LABEL_3:
            if (*a1 ^ 0x435F4F4E | *((unsigned __int16 *)a1 + 2) ^ 0x5241) {
              return 5;
            }
            else {
              return 2;
            }
          }
          return 5;
        }
LABEL_50:
        if (*(void *)a1 == 0x554F5248545F4F4ELL && *((_WORD *)a1 + 4) == 18503) {
          return 3;
        }
        if (v1 != 7) {
          return 5;
        }
        break;
      default:
        return v2;
    }
  }
  unsigned int v15 = 1347570006;
  unsigned int v16 = bswap32(*a1);
  if (v16 == 1347570006 && (unsigned int v15 = 1447121989, v16 = bswap32(*(unsigned int *)((char *)a1 + 3)), v16 == 1447121989))
  {
    int v17 = 0;
  }
  else if (v16 < v15)
  {
    int v17 = -1;
  }
  else
  {
    int v17 = 1;
  }
  if (v17) {
    return 5;
  }
  else {
    return 4;
  }
}

BOOL sub_F729F8(void **a1, void *a2)
{
  int v4 = *a1;
  char v36 = 9;
  strcpy((char *)v35, "from_zone");
  uint64_t v5 = (unsigned __int8 *)sub_561B0(v4, (uint64_t)v35);
  char v34 = 9;
  strcpy((char *)__p, "from_zone");
  uint64_t v6 = sub_561B0(a2, (uint64_t)__p);
  uint64_t v7 = v5[23];
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v5[23];
  }
  else {
    uint64_t v8 = *((void *)v5 + 1);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 23);
  int v10 = (char)v9;
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(v6 + 8);
  }
  if (v8 != v9) {
    goto LABEL_16;
  }
  if (v10 >= 0) {
    char v11 = (unsigned __int8 *)v6;
  }
  else {
    char v11 = *(unsigned __int8 **)v6;
  }
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v5, v11, *((void *)v5 + 1))) {
      goto LABEL_16;
    }
  }
  else if (v5[23])
  {
    while (*v5 == *v11)
    {
      ++v5;
      ++v11;
      if (!--v7) {
        goto LABEL_19;
      }
    }
LABEL_16:
    BOOL v12 = 0;
    if (v34 < 0) {
      goto LABEL_17;
    }
LABEL_45:
    if ((v36 & 0x80000000) == 0) {
      return v12;
    }
    goto LABEL_18;
  }
LABEL_19:
  uint64_t v13 = *a1;
  char v32 = 7;
  strcpy((char *)v31, "to_zone");
  unsigned int v14 = (unsigned __int8 *)sub_561B0(v13, (uint64_t)v31);
  char v30 = 7;
  strcpy((char *)v29, "to_zone");
  uint64_t v15 = sub_561B0(a2, (uint64_t)v29);
  uint64_t v16 = v14[23];
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = v14[23];
  }
  else {
    uint64_t v17 = *((void *)v14 + 1);
  }
  uint64_t v18 = *(unsigned __int8 *)(v15 + 23);
  int v19 = (char)v18;
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *(void *)(v15 + 8);
  }
  if (v17 != v18)
  {
    BOOL v12 = 0;
    if ((v30 & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_38;
  }
  if (v19 >= 0) {
    int v20 = (unsigned __int8 *)v15;
  }
  else {
    int v20 = *(unsigned __int8 **)v15;
  }
  if ((v16 & 0x80) != 0)
  {
    BOOL v12 = memcmp(*(const void **)v14, v20, *((void *)v14 + 1)) == 0;
    goto LABEL_42;
  }
  if (v14[23])
  {
    uint64_t v21 = v16 - 1;
    do
    {
      int v23 = *v14++;
      int v22 = v23;
      int v25 = *v20++;
      int v24 = v25;
      BOOL v27 = v21-- != 0;
      BOOL v12 = v22 == v24;
    }
    while (v22 == v24 && v27);
LABEL_42:
    if ((v30 & 0x80000000) == 0) {
      goto LABEL_43;
    }
LABEL_38:
    operator delete(v29[0]);
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_44;
    }
LABEL_39:
    operator delete(v31[0]);
    if ((v34 & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_17;
  }
  BOOL v12 = 1;
  if (v30 < 0) {
    goto LABEL_38;
  }
LABEL_43:
  if (v32 < 0) {
    goto LABEL_39;
  }
LABEL_44:
  if ((v34 & 0x80000000) == 0) {
    goto LABEL_45;
  }
LABEL_17:
  operator delete(__p[0]);
  if (v36 < 0) {
LABEL_18:
  }
    operator delete(v35[0]);
  return v12;
}

void sub_F72C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if (a20 < 0)
    {
LABEL_5:
      operator delete(a15);
      if (a26 < 0)
      {
LABEL_8:
        operator delete(a21);
        if (a32 < 0)
        {
LABEL_11:
          operator delete(a27);
          _Unwind_Resume(a1);
        }
LABEL_12:
        _Unwind_Resume(a1);
      }
LABEL_10:
      if (a32 < 0) {
        goto LABEL_11;
      }
      goto LABEL_12;
    }
  }
  else if (a20 < 0)
  {
    goto LABEL_5;
  }
  if (a26 < 0) {
    goto LABEL_8;
  }
  goto LABEL_10;
}

BOOL sub_F72CE4(void **a1, void *a2)
{
  int v4 = *a1;
  char v36 = 9;
  strcpy((char *)v35, "from_zone");
  uint64_t v5 = (unsigned __int8 *)sub_561B0(v4, (uint64_t)v35);
  char v34 = 9;
  strcpy((char *)__p, "from_zone");
  uint64_t v6 = sub_561B0(a2, (uint64_t)__p);
  uint64_t v7 = v5[23];
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v5[23];
  }
  else {
    uint64_t v8 = *((void *)v5 + 1);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 23);
  int v10 = (char)v9;
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(v6 + 8);
  }
  if (v8 != v9) {
    goto LABEL_16;
  }
  if (v10 >= 0) {
    char v11 = (unsigned __int8 *)v6;
  }
  else {
    char v11 = *(unsigned __int8 **)v6;
  }
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v5, v11, *((void *)v5 + 1))) {
      goto LABEL_16;
    }
  }
  else if (v5[23])
  {
    while (*v5 == *v11)
    {
      ++v5;
      ++v11;
      if (!--v7) {
        goto LABEL_19;
      }
    }
LABEL_16:
    BOOL v12 = 0;
    if (v34 < 0) {
      goto LABEL_17;
    }
LABEL_45:
    if ((v36 & 0x80000000) == 0) {
      return v12;
    }
    goto LABEL_18;
  }
LABEL_19:
  uint64_t v13 = *a1;
  char v32 = 7;
  strcpy((char *)v31, "to_zone");
  unsigned int v14 = (unsigned __int8 *)sub_561B0(v13, (uint64_t)v31);
  char v30 = 7;
  strcpy((char *)v29, "to_zone");
  uint64_t v15 = sub_561B0(a2, (uint64_t)v29);
  uint64_t v16 = v14[23];
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = v14[23];
  }
  else {
    uint64_t v17 = *((void *)v14 + 1);
  }
  uint64_t v18 = *(unsigned __int8 *)(v15 + 23);
  int v19 = (char)v18;
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *(void *)(v15 + 8);
  }
  if (v17 != v18)
  {
    BOOL v12 = 0;
    if ((v30 & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_38;
  }
  if (v19 >= 0) {
    int v20 = (unsigned __int8 *)v15;
  }
  else {
    int v20 = *(unsigned __int8 **)v15;
  }
  if ((v16 & 0x80) != 0)
  {
    BOOL v12 = memcmp(*(const void **)v14, v20, *((void *)v14 + 1)) == 0;
    goto LABEL_42;
  }
  if (v14[23])
  {
    uint64_t v21 = v16 - 1;
    do
    {
      int v23 = *v14++;
      int v22 = v23;
      int v25 = *v20++;
      int v24 = v25;
      BOOL v27 = v21-- != 0;
      BOOL v12 = v22 == v24;
    }
    while (v22 == v24 && v27);
LABEL_42:
    if ((v30 & 0x80000000) == 0) {
      goto LABEL_43;
    }
LABEL_38:
    operator delete(v29[0]);
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_44;
    }
LABEL_39:
    operator delete(v31[0]);
    if ((v34 & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_17;
  }
  BOOL v12 = 1;
  if (v30 < 0) {
    goto LABEL_38;
  }
LABEL_43:
  if (v32 < 0) {
    goto LABEL_39;
  }
LABEL_44:
  if ((v34 & 0x80000000) == 0) {
    goto LABEL_45;
  }
LABEL_17:
  operator delete(__p[0]);
  if (v36 < 0) {
LABEL_18:
  }
    operator delete(v35[0]);
  return v12;
}

void sub_F72F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if (a20 < 0)
    {
LABEL_5:
      operator delete(a15);
      if (a26 < 0)
      {
LABEL_8:
        operator delete(a21);
        if (a32 < 0)
        {
LABEL_11:
          operator delete(a27);
          _Unwind_Resume(a1);
        }
LABEL_12:
        _Unwind_Resume(a1);
      }
LABEL_10:
      if (a32 < 0) {
        goto LABEL_11;
      }
      goto LABEL_12;
    }
  }
  else if (a20 < 0)
  {
    goto LABEL_5;
  }
  if (a26 < 0) {
    goto LABEL_8;
  }
  goto LABEL_10;
}

void sub_F72FD0()
{
  byte_25FD0DF = 1;
  word_25FD0C8 = 65;
}

void *sub_F72FEC()
{
  return &unk_25FD0E0;
}

uint64_t sub_F72FF8(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a2 + 4280;
  *(void *)(a1 + 16) = -1;
  sub_F92034((void *)(a1 + 24), a2);
  *(void *)(a1 + 944) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  uint64_t v5 = (char *)operator new(0x18uLL);
  *(void *)(a1 + 928) = v5;
  *(void *)(a1 + 944) = v5 + 24;
  *(void *)uint64_t v5 = 0;
  *(_OWORD *)(v5 + 8) = xmmword_20E7B70;
  *(void *)(a1 + 936) = v5 + 24;
  if (a3) {
    uint64_t v6 = 128;
  }
  else {
    uint64_t v6 = 2;
  }
  *(_DWORD *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  uint64_t v7 = (char *)operator new(4 * v6);
  *(void *)(a1 + 1008) = v7;
  *(void *)(a1 + 1016) = v7;
  *(void *)(a1 + 1024) = &v7[4 * v6];
  uint64_t v8 = (char *)operator new(0x3F8uLL);
  *(void *)(a1 + 984) = v8;
  *(void *)(a1 + 992) = v8;
  *(void *)(a1 + 1000) = v8 + 1016;
  *(void *)(a1 + 1040) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 1048) = 0;
  *(unsigned char *)(a1 + 1052) = 0;
  sub_F92190(a1 + 1056, *(uint64_t **)(a1 + 8));
  *(void *)(a1 + 1184) = 0;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(void *)(a1 + 1192) = -1;
  if (a3) {
    unsigned int v9 = 0x10000;
  }
  else {
    unsigned int v9 = 0x2000;
  }
  sub_F924AC((void *)(a1 + 1200), v9);
  v14[0] = 256;
  v14[1] = (unint64_t)&v13;
  v14[2] = (unint64_t)&v12;
  v14[3] = (unint64_t)&v11;
  sub_F91654((void *)(a1 + 2080), v14);
  sub_F92190(a1 + 2848, *(uint64_t **)(a1 + 8));
  *(_DWORD *)(a1 + 2960) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 2964) = 0;
  *(void *)(a1 + 3016) = 0;
  *(_OWORD *)(a1 + 2968) = 0u;
  *(_OWORD *)(a1 + 2984) = 0u;
  *(_OWORD *)(a1 + 3000) = 0u;
  *(_DWORD *)(a1 + 3024) = -1;
  *(_WORD *)(a1 + 3048) = 256;
  *(_OWORD *)(a1 + 3032) = 0u;
  *(void *)(a1 + 3052) = 0xFFFFFFFFLL;
  *(void *)(a1 + 3064) = 0;
  *(void *)(a1 + 3080) = 0;
  *(void *)(a1 + 3072) = 0;
  *(void *)(a1 + 3088) = &unk_20E1710;
  *(void *)(a1 + 3128) = 0;
  *(void *)(a1 + 3112) = 0;
  *(void *)(a1 + 3096) = 0;
  *(void *)(a1 + 3104) = 0;
  *(void *)(a1 + 3136) = &unk_20E1710;
  *(void *)(a1 + 3176) = 0;
  *(void *)(a1 + 3160) = 0;
  *(void *)(a1 + 3144) = 0;
  *(void *)(a1 + 3152) = 0;
  *(void *)(a1 + 3184) = &unk_20E1710;
  *(void *)(a1 + 3224) = 0;
  *(void *)(a1 + 3208) = 0;
  *(void *)(a1 + 3192) = 0;
  *(void *)(a1 + 3200) = 0;
  *(void *)(a1 + 3232) = &unk_20E1710;
  *(void *)(a1 + 3272) = 0;
  *(void *)(a1 + 3256) = 0;
  *(void *)(a1 + 3240) = 0;
  *(void *)(a1 + 3248) = 0;
  *(void *)(a1 + 3280) = &unk_20E1710;
  *(void *)(a1 + 3320) = 0;
  *(void *)(a1 + 3304) = 0;
  *(void *)(a1 + 3288) = 0;
  *(void *)(a1 + 3296) = 0;
  *(void *)(a1 + 3328) = &unk_20E1710;
  *(void *)(a1 + 3368) = 0;
  *(void *)(a1 + 3352) = 0;
  *(void *)(a1 + 3336) = 0;
  *(void *)(a1 + 3344) = 0;
  *(void *)(a1 + 3376) = &unk_20E1710;
  *(void *)(a1 + 3416) = 0;
  *(void *)(a1 + 3400) = 0;
  *(void *)(a1 + 3384) = 0;
  *(void *)(a1 + 3392) = 0;
  *(void *)(a1 + 3424) = &unk_20E1710;
  *(void *)(a1 + 3464) = 0;
  *(void *)(a1 + 3448) = 0;
  *(void *)(a1 + 3432) = 0;
  *(void *)(a1 + 3440) = 0;
  *(void *)(a1 + 3472) = &unk_20E1710;
  *(void *)(a1 + 3512) = 0;
  *(void *)(a1 + 3488) = 0;
  *(void *)(a1 + 3480) = 0;
  *(void *)(a1 + 3496) = 0;
  *(void *)(a1 + 3520) = &unk_20E1710;
  *(void *)(a1 + 3560) = 0;
  *(void *)(a1 + 3536) = 0;
  *(void *)(a1 + 3528) = 0;
  *(void *)(a1 + 3544) = 0;
  *(void *)(a1 + 3568) = &unk_20E1710;
  *(void *)(a1 + 3608) = 0;
  *(void *)(a1 + 3584) = 0;
  *(void *)(a1 + 3576) = 0;
  *(void *)(a1 + 3592) = 0;
  *(void *)(a1 + 3616) = &unk_20E1710;
  *(void *)(a1 + 3656) = 0;
  *(void *)(a1 + 3632) = 0;
  *(void *)(a1 + 3624) = 0;
  *(void *)(a1 + 3640) = 0;
  *(void *)(a1 + 3664) = &unk_20E1710;
  *(void *)(a1 + 3704) = 0;
  *(void *)(a1 + 3680) = 0;
  *(void *)(a1 + 3672) = 0;
  *(void *)(a1 + 3688) = 0;
  *(void *)(a1 + 3712) = &unk_20E1710;
  *(void *)(a1 + 3752) = 0;
  *(void *)(a1 + 3728) = 0;
  *(void *)(a1 + 3720) = 0;
  *(void *)(a1 + 3736) = 0;
  *(void *)(a1 + 3760) = &unk_20E1710;
  *(void *)(a1 + 3800) = 0;
  *(void *)(a1 + 3776) = 0;
  *(void *)(a1 + 3768) = 0;
  *(void *)(a1 + 3784) = 0;
  *(void *)(a1 + 3808) = &unk_20E1710;
  *(void *)(a1 + 3824) = 0;
  *(void *)(a1 + 3816) = 0;
  *(void *)(a1 + 3832) = 0;
  *(_OWORD *)(a1 + 3928) = 0u;
  *(_OWORD *)(a1 + 3912) = 0u;
  *(_OWORD *)(a1 + 3896) = 0u;
  *(_OWORD *)(a1 + 3880) = 0u;
  *(_OWORD *)(a1 + 3864) = 0u;
  *(_OWORD *)(a1 + 3848) = 0u;
  return a1;
}

void sub_F73318(_Unwind_Exception *a1)
{
  uint64_t v7 = v3;
  sub_328138(v7);
  sub_5139D0(v5);
  unsigned int v9 = (void *)v1[146];
  if (v9)
  {
    v1[147] = v9;
    operator delete(v9);
  }
  sub_F7341C(v4);
  sub_3310C((uint64_t)(v1 + 123));
  int v10 = (void **)(v1 + 116);
  char v11 = *v6;
  if (*v6)
  {
    v1[120] = v11;
    operator delete(v11);
    char v12 = *v10;
    if (!*v10)
    {
LABEL_5:
      sub_BF10E8(v2);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    char v12 = *v10;
    if (!*v10) {
      goto LABEL_5;
    }
  }
  v1[117] = v12;
  operator delete(v12);
  sub_BF10E8(v2);
  _Unwind_Resume(a1);
}

void sub_F73408(_Unwind_Exception *a1)
{
  sub_BF10E8(v1);
  _Unwind_Resume(a1);
}

void *sub_F7341C(void *a1)
{
  uint64_t v2 = a1[11];
  if (v2)
  {
    uint64_t v3 = a1[12];
    int v4 = (void *)a1[11];
    if (v3 != v2)
    {
      uint64_t v5 = a1[12];
      do
      {
        uint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      int v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  uint64_t v8 = (void *)a1[10];
  if (v8) {
    free(v8);
  }
  return a1;
}

unint64_t sub_F734A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, char a6, int a7, unsigned int a8, unsigned int a9)
{
  unsigned int v27 = a8;
  sub_F73894(a1);
  if (*(void *)a2 == *(void *)(a2 + 8))
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&__t);
      sub_188FC78(&__t, (uint64_t)"p2p_query called with empty origin terminal", 43);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
LABEL_15:
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v26 < 0) {
        operator delete(v25);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
LABEL_20:
    unint64_t v17 = 0x7FFFFFFF00000000;
    uint64_t v18 = 0xFFFFFFFFLL;
    return v17 | v18;
  }
  if (*(void *)a3 == *(void *)(a3 + 8))
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&__t);
      sub_188FC78(&__t, (uint64_t)"p2p_query called with empty destination terminal", 48);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  int v16 = *a5;
  if (*a5 == 0x7FFFFFFF)
  {
    __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    int v16 = std::chrono::system_clock::to_time_t(&__t);
  }
  *(_DWORD *)(a1 + 2960) = v16;
  *(unsigned char *)(a1 + 2964) = a6;
  *(void *)(a1 + 2968) = a4;
  *(_DWORD *)(a1 + 1040) = a7;
  if (a1 + 1168 != a2) {
    sub_BFF628((void *)(a1 + 1168), *(char **)a2, *(char **)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
  }
  *(void *)(a1 + 1192) = *(void *)(a2 + 24);
  __t.__d_.__rep_ = a1;
  sub_F770A8((int32x2_t *)(a1 + 24), (uint64_t **)a3, 1, &__t);
  *(void *)(a1 + 976) = a1 + 24;
  if (!(*(void *)(a1 + 112)
       + *(void *)(a1 + 64)
       + *(void *)(a1 + 160)
       + *(void *)(a1 + 208)
       + *(void *)(a1 + 256)
       + *(void *)(a1 + 304)
       + *(void *)(a1 + 352)
       + *(void *)(a1 + 400)
       + *(void *)(a1 + 448)
       + *(void *)(a1 + 496)
       + *(void *)(a1 + 544)
       + *(void *)(a1 + 592)
       + *(void *)(a1 + 640)
       + *(void *)(a1 + 688)
       + *(void *)(a1 + 736)
       + *(void *)(a1 + 784)))
    goto LABEL_20;
  sub_F73C2C(a1);
  __t.__d_.__rep_ = 0;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = 0;
  uint64_t v24 = 0;
  sub_F742A8(a1, &__t);
  if (__t.__d_.__rep_)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = __t.__d_.__rep_;
    operator delete((void *)__t.__d_.__rep_);
  }
  sub_F7481C(a1);
  sub_F74BDC((uint64_t **)a1, &v27, a9);
  unint64_t v17 = *(void *)(*(void *)(a1 + 928) + 8) & 0xFFFFFFFF00000000;
  uint64_t v18 = *(void *)(*(void *)(a1 + 928) + 8);
  return v17 | v18;
}

void sub_F73800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_F73878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_F73894(uint64_t a1)
{
  for (uint64_t i = 0; i != 768; i += 48)
  {
    uint64_t v4 = a1 + i;
    if (*(void *)(a1 + i + 2096))
    {
      unint64_t v5 = *(void *)(v4 + 2104);
      if (v5 >= 0x80)
      {
        uint64_t v3 = (void *)(a1 + i);
        operator delete(*(void **)(v4 + 2080));
        *(void *)(v4 + 2080) = &unk_20E1710;
        v3[265] = 0;
        v3[261] = 0;
        v3[263] = 0;
        v3[262] = 0;
      }
      else if (v5)
      {
        *(void *)(v4 + 2096) = 0;
        memset(*(void **)(v4 + 2080), 128, v5 + 8);
        *(unsigned char *)(*(void *)(v4 + 2080) + v5) = -1;
        unint64_t v6 = *(void *)(v4 + 2104);
        if (v6 == 7) {
          uint64_t v7 = 6;
        }
        else {
          uint64_t v7 = v6 - (v6 >> 3);
        }
        *(void *)(a1 + i + 2120) = v7 - *(void *)(v4 + 2096);
      }
    }
  }
  uint64_t v8 = 0;
  *(void *)(a1 + 2056) = *(void *)(a1 + 2048);
  *(void *)(a1 + 2032) = *(void *)(a1 + 2024);
  *(_DWORD *)(a1 + 2072) = 0;
  *(void *)(a1 + 1976) = *(void *)(a1 + 1968);
  do
  {
    uint64_t v10 = a1 + v8;
    if (*(void *)(a1 + v8 + 1216))
    {
      unint64_t v11 = *(void *)(v10 + 1224);
      if (v11 >= 0x80)
      {
        unsigned int v9 = (void *)(a1 + v8);
        operator delete(*(void **)(v10 + 1200));
        *(void *)(v10 + 1200) = &unk_20E1710;
        v9[155] = 0;
        v9[151] = 0;
        v9[153] = 0;
        v9[152] = 0;
      }
      else if (v11)
      {
        *(void *)(v10 + 1216) = 0;
        memset(*(void **)(v10 + 1200), 128, v11 + 8);
        *(unsigned char *)(*(void *)(v10 + 1200) + v11) = -1;
        unint64_t v12 = *(void *)(v10 + 1224);
        if (v12 == 7) {
          uint64_t v13 = 6;
        }
        else {
          uint64_t v13 = v12 - (v12 >> 3);
        }
        *(void *)(a1 + v8 + 1240) = v13 - *(void *)(v10 + 1216);
      }
    }
    v8 += 48;
  }
  while (v8 != 768);
  *(void *)(a1 + 2000) = *(void *)(a1 + 1992);
  *(_DWORD *)(a1 + 2016) = 0;
  *(void *)(a1 + 1016) = *(void *)(a1 + 1008);
  *(void *)(a1 + 992) = *(void *)(a1 + 984);
  *(_DWORD *)(a1 + 1032) = 0;
  *(void *)(a1 + 1040) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 20) = -1;
  *(_DWORD *)(a1 + 1048) = 0;
  sub_F935F4(a1 + 1064);
  sub_F935F4(a1 + 2856);
  *(void *)(a1 + 1176) = *(void *)(a1 + 1168);
  unsigned int v14 = *(uint64_t **)(a1 + 952);
  uint64_t v15 = *(uint64_t **)(a1 + 960);
  if (v14 != v15)
  {
    do
    {
      uint64_t v16 = *v14++;
      uint64_t v17 = *(void *)(a1 + 928) + 24 * v16;
      *(void *)uint64_t v17 = 0;
      *(_OWORD *)(v17 + 8) = xmmword_20E7B70;
    }
    while (v14 != v15);
    unsigned int v14 = *(uint64_t **)(a1 + 952);
  }
  *(void *)(a1 + 960) = v14;
  uint64_t v19 = *(void *)(a1 + 24);
  uint64_t v18 = *(void *)(a1 + 32);
  if (v18 != v19)
  {
    uint64_t v20 = *(void *)(a1 + 32);
    do
    {
      int v22 = *(void **)(v20 - 32);
      v20 -= 32;
      char v21 = v22;
      if (v22)
      {
        *(void *)(v18 - 24) = v21;
        operator delete(v21);
      }
      uint64_t v18 = v20;
    }
    while (v20 != v19);
  }
  *(void *)(a1 + 32) = v19;
  sub_2D49A4(a1 + 48);
  sub_F935F4(a1 + 824);
  uint64_t v23 = 0;
  *(_DWORD *)(a1 + 2960) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 3048) = 0;
  do
  {
    uint64_t v25 = a1 + v23;
    if (*(void *)(a1 + v23 + 3104))
    {
      unint64_t v26 = *(void *)(v25 + 3112);
      if (v26 >= 0x80)
      {
        uint64_t v24 = (void *)(a1 + v23);
        operator delete(*(void **)(v25 + 3088));
        *(void *)(v25 + 3088) = &unk_20E1710;
        v24[391] = 0;
        v24[387] = 0;
        v24[389] = 0;
        v24[388] = 0;
      }
      else if (v26)
      {
        *(void *)(v25 + 3104) = 0;
        memset(*(void **)(v25 + 3088), 128, v26 + 8);
        *(unsigned char *)(*(void *)(v25 + 3088) + v26) = -1;
        unint64_t v27 = *(void *)(v25 + 3112);
        if (v27 == 7) {
          uint64_t v28 = 6;
        }
        else {
          uint64_t v28 = v27 - (v27 >> 3);
        }
        *(void *)(a1 + v23 + 3128) = v28 - *(void *)(v25 + 3104);
      }
    }
    v23 += 48;
  }
  while (v23 != 768);
  *(void *)(a1 + 3864) = *(void *)(a1 + 3856);
  uint64_t v29 = *(void *)(a1 + 3888);
  for (uint64_t j = *(void *)(a1 + 3880); v29 != j; v29 -= 40)
  {
    if (!*(_DWORD *)(v29 - 8))
    {
      uint64_t v31 = *(std::__shared_weak_count **)(v29 - 32);
      if (v31)
      {
        if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
    }
  }
  *(void *)(a1 + 3888) = j;
  *(void *)(a1 + 3912) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 3928) = 0u;
  return result;
}

void sub_F73C2C(uint64_t a1)
{
  unsigned int v39 = 0;
  long long __p = 0;
  __n128 v37 = 0;
  uint64_t v38 = 0;
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = (unsigned __int16 *)(*(void *)a1 + 9628);
  uint64_t v4 = *(void *)(*(void *)a1 + 9648);
  if (v4)
  {
    uint64_t v5 = 8 * v4;
    unint64_t v6 = *(unint64_t **)(*(void *)a1 + 9664);
    while (1)
    {
      unint64_t v7 = HIDWORD(*v6);
      if ((*(_DWORD *)(v2 + 9656) != *v6
         || *(unsigned __int16 *)(*(void *)a1 + 9660) != (unsigned __int16)v7
         || (HIWORD(*v6) & 1) == (*(unsigned char *)(*(void *)a1 + 9662) == 0))
        && (!*(void *)(v2 + 9632)
         || *(_DWORD *)(v2 + 9624) != *v6
         || *v3 != (unsigned __int16)v7
         || (HIWORD(*v6) & 1) == (*(unsigned char *)(*(void *)a1 + 9630) == 0)))
      {
        break;
      }
      ++v6;
      v5 -= 8;
      if (!v5) {
        goto LABEL_40;
      }
    }
  }
  else
  {
    unint64_t v6 = *(unint64_t **)(*(void *)a1 + 9664);
  }
  uint64_t v8 = *(void *)(*(void *)a1 + 9664) + 8 * v4;
  if (v6 != (unint64_t *)v8)
  {
    uint64_t v31 = a1 + 2960;
    do
    {
      unint64_t v32 = (*v6 >> 16) & 0xFFFF0000 | (*v6 << 32) | (2 * ((*v6 & 0xFF000000000000) == 0));
      if (v39
        && ((uint64_t v9 = *(void *)a1,
             uint64_t v10 = *(void *)(a1 + 2968),
             sub_ED7040(*(void *)a1 + 8, *v6, (uint64_t)&v40),
             unint64_t v11 = sub_F17510((uint64_t *)(v9 + 4232), &v40, 0x3B9ACA00u, v10),
             v11 == -1)
         || (v11 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000
         || v12 == 0x7FFFFFFFFFFFFFFFLL))
      {
        int v13 = sub_F78BBC(*(uint64_t **)(a1 + 8));
        if (v13 - 1 <= v39
          || sub_F78CF8(*(void *)a1, &v32, v13 - 1, *(int **)(a1 + 2968), v31, *(unsigned char *)(a1 + 2964)))
        {
          sub_F936B4(a1 + 1056, &v32, (int *)&v39);
          sub_F948C0((int32x2_t *)(a1 + 1056));
          LODWORD(v40) = v39 - 1;
          sub_F936B4(a1 + 2848, &v32, (int *)&v40);
          sub_F948C0((int32x2_t *)(a1 + 2848));
          unsigned int v14 = (int *)sub_F968AC(**(void **)(a1 + 8), HIDWORD(v32) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v32) << 32), (v32 & 2) == 0, &v39);
          uint64_t v40 = v14;
          if (__p == v37 || (int *)v37[-1].i64[1] != v14) {
            sub_29603C(&__p, &v40);
          }
          unint64_t v35 = sub_F968AC(**(void **)(a1 + 8), HIDWORD(v32) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v32) << 32), (v32 >> 1) & 1, &v39);
          if (v37[-1].i64[1] != v35) {
            sub_29603C(&__p, &v35);
          }
        }
        else
        {
          LODWORD(v40) = v13 - 2;
          sub_F936B4(a1 + 2848, &v32, (int *)&v40);
          sub_F948C0((int32x2_t *)(a1 + 2848));
        }
      }
      else
      {
        LODWORD(v40) = 0;
        sub_F936B4(a1 + 1056, &v32, (int *)&v40);
        sub_F948C0((int32x2_t *)(a1 + 1056));
      }
      if (++v6 == (unint64_t *)v8) {
        break;
      }
      while (1)
      {
        unint64_t v15 = HIDWORD(*v6);
        if ((*(_DWORD *)(v2 + 9656) != *v6
           || v3[16] != (unsigned __int16)v15
           || (HIWORD(*v6) & 1) == (*((unsigned char *)v3 + 34) == 0))
          && (!*(void *)(v2 + 9632)
           || *(_DWORD *)(v2 + 9624) != *v6
           || *v3 != (unsigned __int16)v15
           || (HIWORD(*v6) & 1) == (*((unsigned char *)v3 + 2) == 0)))
        {
          break;
        }
        if (++v6 == (unint64_t *)v8) {
          goto LABEL_39;
        }
      }
    }
    while (v6 != (unint64_t *)v8);
LABEL_39:
    uint64_t v2 = *(void *)a1;
  }
LABEL_40:
  uint64_t v16 = *(void *)(v2 + 9904);
  uint64_t v17 = v16 + 88 * *(void *)(v2 + 9808);
  uint64_t v40 = (int *)(v2 + 9672);
  uint64_t v41 = v16;
  uint64_t v42 = v17;
  sub_F53EB8(&v40);
  uint64_t v18 = *(void *)(v2 + 9904) + 88 * *(void *)(v2 + 9808);
  unint64_t v32 = v2 + 9672;
  uint64_t v33 = v18;
  uint64_t v34 = v18;
  sub_F53EB8(&v32);
  while (1)
  {
    uint64_t v19 = v41;
    if (v41 == v33) {
      break;
    }
    unint64_t v35 = (((*(void *)(v41 + 32) >> 16) & 0xFFFF0000 | (*(void *)(v41 + 32) << 32) | (2
                                                                                          * ((*(void *)(v41 + 32) & 0xFF000000000000) == 0)))
         + 4 * (unsigned __int16)*(_DWORD *)(v41 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v41 + 84) & 1;
    int v43 = 0;
    sub_F936B4(a1 + 1056, &v35, &v43);
    sub_F948C0((int32x2_t *)(a1 + 1056));
    unint64_t v35 = (((*(void *)(v19 + 72) >> 16) & 0xFFFF0000 | (*(void *)(v19 + 72) << 32) | (2
                                                                                          * ((*(void *)(v19 + 72) & 0xFF000000000000) == 0)))
         + (((unint64_t)*(unsigned int *)(v19 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v19 + 84) >> 1) & 1;
    int v43 = 0;
    sub_F936B4(a1 + 1056, &v35, &v43);
    sub_F948C0((int32x2_t *)(a1 + 1056));
    v41 += 88;
    sub_F53EB8(&v40);
  }
  for (uint64_t i = *(void **)(sub_ED7C48(*(void *)a1 + 8) + 16); i; uint64_t i = (void *)*i)
  {
    uint64_t v40 = (int *)((i[2] >> 16) & 0xFFFF0000 | (i[2] << 32) | (2 * ((i[2] & 0xFF000000000000) == 0)));
    LODWORD(v32) = 0;
    sub_F936B4(a1 + 1056, &v40, (int *)&v32);
    sub_F948C0((int32x2_t *)(a1 + 1056));
  }
  unint64_t v21 = 126 - 2 * __clz(((char *)v37 - (unsigned char *)__p) >> 3);
  if (v37 == __p) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = v21;
  }
  sub_F98280((int8x16_t *)__p, v37, (uint64_t)&v40, v22, 1);
  uint64_t v23 = v37;
  if (__p != v37)
  {
    uint64_t v24 = (char *)__p - 8;
    do
    {
      if (v24 + 16 == (char *)v37) {
        goto LABEL_67;
      }
      int v25 = *((_DWORD *)v24 + 2);
      v24 += 8;
      LODWORD(v26) = *((_DWORD *)v24 + 2);
    }
    while (v25 != v26 || *((_DWORD *)v24 + 1) != *((_DWORD *)v24 + 3));
    uint64_t v28 = (int8x16_t *)(v24 + 16);
    if (v24 + 16 == (char *)v37)
    {
      uint64_t v29 = (int8x16_t *)(v24 + 8);
      if (v24 + 8 == (char *)v37) {
        goto LABEL_67;
      }
      goto LABEL_66;
    }
    do
    {
      if (v26 != v28->i32[0] || *((_DWORD *)v24 + 1) != v28->i32[1])
      {
        uint64_t v26 = v28->i64[0];
        *((void *)v24 + 1) = v28->i64[0];
        v24 += 8;
      }
      uint64_t v28 = (int8x16_t *)((char *)v28 + 8);
    }
    while (v28 != v23);
    uint64_t v29 = (int8x16_t *)(v24 + 8);
    if (v24 + 8 != (char *)v37) {
LABEL_66:
    }
      __n128 v37 = v29;
  }
LABEL_67:
  sub_FA3368((void **)(*(void *)a1 + 4296), (unsigned int **)&__p, *(int **)(a1 + 2968), a1 + 2960, *(unsigned char *)(a1 + 2964), 4u);
  if (__p)
  {
    __n128 v37 = (int8x16_t *)__p;
    operator delete(__p);
  }
}

void sub_F74254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_F742A8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 1176);
  uint64_t v3 = *(void *)(a1 + 1168);
  unint64_t v45 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - v3) >> 4);
  if (v45 >> 30)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v51, "The source terminal of a query cannot have more than (2^30 - 1) nodes.");
    uint64_t v40 = (void *)sub_2F404((uint64_t)exception, &v51);
  }
  if (v2 != v3)
  {
    uint64_t v5 = 0;
    uint64_t v43 = a1 + 1200;
    uint64_t v41 = (void *)(a1 + 2976);
    uint64_t v42 = (uint64_t **)(a1 + 1056);
    do
    {
      uint64_t v6 = *(void *)(a1 + 1168);
      unint64_t v7 = (unint64_t *)(v6 + 80 * v5);
      uint64_t v8 = *(uint64_t **)a1;
      uint64_t v9 = **(void **)a1;
      if (*(unsigned char *)(v9 + 7774))
      {
        unint64_t v10 = *v7;
        unint64_t v11 = HIDWORD(*v7);
        uint64_t v12 = sub_290DEC(v9 + 3896, HIDWORD(*v7), 1);
        if (!v12) {
          goto LABEL_4;
        }
        int v13 = &v12[-*(int *)v12];
        if (*(unsigned __int16 *)v13 < 5u) {
          goto LABEL_4;
        }
        uint64_t v14 = *((unsigned __int16 *)v13 + 2);
        if (!v14
          || *(_DWORD *)&v12[v14 + *(unsigned int *)&v12[v14]] <= (unsigned __int16)WORD1(v10)
          || !sub_295DB4(v9, v11 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v10) << 32)))
        {
          goto LABEL_4;
        }
        uint64_t v8 = *(uint64_t **)a1;
      }
      unint64_t v15 = sub_F17140(v8 + 529, (uint64_t *)(v6 + 80 * v5), v6 + 80 * v5 + 8, *(void *)(a1 + 2968));
      unint64_t v46 = v15 & 0xFFFFFFFF00000000;
      int v47 = v15;
      if (v15 != -1 && (v15 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
      {
        int v17 = *(_DWORD *)(v6 + 80 * v5 + 8);
        sub_ED75C0(*(void *)a1 + 8, *v7, 0, v41, 0);
        unsigned int v18 = -1171354717 * ((*(void *)(a1 + 2984) - *(void *)(a1 + 2976)) >> 3);
        if (v18)
        {
          uint64_t v19 = 0;
          int v20 = 0;
          unsigned int v48 = 1000000000 - v17;
          uint64_t v49 = 88 * v18;
          while (2)
          {
            uint64_t v22 = *(void *)(a1 + 2976);
            int v23 = *(_DWORD *)(a1 + 2960);
            uint64_t v24 = *(uint64_t **)a1;
            uint64_t v25 = *(void *)(a1 + 2968);
            if (*(unsigned char *)(*(void *)a1 + 9586))
            {
              if (sub_F54008((uint64_t)(v24 + 1209), v22 + v19) != -1) {
                goto LABEL_21;
              }
              unint64_t v26 = *(void *)(v22 + v19 + 32);
              uint64_t v27 = 4 * (unsigned __int16)*(_DWORD *)(v22 + v19 + 80);
              *(void *)&long long v51 = (((((v26 >> 16) & 0xFFFF0000 | (v26 << 32) | (2 * ((v26 & 0xFF000000000000) == 0)))
                                 + v27) << 16) & 0xFFFF00000000 | ((((v26 >> 16) & 0xFFFF0000 | (v26 << 32) | (2 * ((v26 & 0xFF000000000000) == 0)))
                                                                    + v27) >> 32) | ((unint64_t)((v26 & 0xFF000000000000) == 0) << 48)) ^ 0x1000000000000;
              if (sub_F57414((uint64_t)(v24 + 1199), &v51) != -1) {
                goto LABEL_21;
              }
            }
            unint64_t v28 = sub_F178C0(v24 + 529, (int **)(v22 + v19), v48, v25);
            unint64_t v29 = v28 & 0xFFFFFFFF00000000;
            if (v28 == -1 || v29 == 0x7FFFFFFF00000000) {
              goto LABEL_21;
            }
            uint64_t v31 = v22 + v19;
            unint64_t v32 = v29 + v46;
            char v33 = *(unsigned char *)(a1 + 2964);
            *(void *)&long long v51 = v32 | (v28 + v47);
            DWORD2(v51) = v23;
            BYTE12(v51) = v33;
            unint64_t v52 = (((*(void *)(v22 + v19 + 32) >> 16) & 0xFFFF0000 | (*(void *)(v22 + v19 + 32) << 32) | (2 * ((*(void *)(v22 + v19 + 32) & 0xFF000000000000) == 0)))
                 + 4 * (unsigned __int16)*(_DWORD *)(v22 + v19 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v22 + v19 + 84) & 1;
            unint64_t v53 = (((*(void *)(v22 + v19 + 72) >> 16) & 0xFFFF0000 | (*(void *)(v22 + v19 + 72) << 32) | (2 * ((*(void *)(v22 + v19 + 72) & 0xFF000000000000) == 0)))
                 + (((unint64_t)*(unsigned int *)(v31 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v31 + 84) >> 1) & 1;
            int v54 = *(_DWORD *)(v22 + v19 + 84);
            int v55 = v20;
            int v56 = 0;
            int v57 = v5 | 0x80000000;
            unint64_t v50 = ((((unint64_t)*(unsigned int *)(v31 + 80) >> 14) & 0x3FFFC | (*(void *)(v22 + v19 + 72) << 32))
                 + ((*(void *)(v22 + v19 + 72) >> 16) & 0xFFFF0000)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v31 + 84) >> 1) & 1 | (2 * ((*(void *)(v22 + v19 + 72) & 0xFF000000000000) == 0));
            int v34 = *(_DWORD *)(a1 + 1044);
            if (v34 != 0x7FFFFFFF)
            {
              unint64_t v35 = HIDWORD(v32);
              sub_EE03E4(v43, (uint64_t *)&v50, v58);
              if (!v58[0]) {
                goto LABEL_37;
              }
              sub_EE03E4(v43, (uint64_t *)&v50, v58);
              uint64_t v36 = *(void *)(*(void *)(a1 + 1968) + 80 * *(unsigned int *)(v59 + 8) + 8);
              if (v51 < v36
                || v51 <= v36 && SDWORD1(v51) < SHIDWORD(v36))
              {
                sub_EE03E4(v43, (uint64_t *)&v50, v58);
                int v37 = *(_DWORD *)(*(void *)(a1 + 1968) + 80 * *(unsigned int *)(v59 + 8) + 12);
                int v38 = *(_DWORD *)(a1 + 1044);
                if (v38 >= v37 && v34 < (int)v35)
                {
                  int v21 = -1;
                  goto LABEL_19;
                }
                if (v38 < v37)
                {
LABEL_37:
                  if (v34 >= (int)v35)
                  {
                    int v21 = 1;
LABEL_19:
                    *(_DWORD *)(a1 + 1048) += v21;
                  }
                }
              }
            }
            sub_F788FC(v43, (uint64_t *)&v50, (uint64_t)&v51);
            v58[0] = ((((unint64_t)*(unsigned int *)(v31 + 80) >> 14) & 0x3FFFC | (*(void *)(v31 + 72) << 32))
                    + ((*(void *)(v31 + 72) >> 16) & 0xFFFF0000)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v31 + 84) >> 1) & 1 | (2 * ((*(void *)(v31 + 72) & 0xFF000000000000) == 0));
            LODWORD(v50) = 0;
            sub_F936B4((uint64_t)v42, v58, (int *)&v50);
            sub_F938DC(v42, a2);
            sub_F948C0((int32x2_t *)v42);
LABEL_21:
            ++v20;
            v19 += 88;
            if (v49 == v19) {
              break;
            }
            continue;
          }
        }
      }
LABEL_4:
      ++v5;
    }
    while (v5 != v45);
  }
}

void sub_F747EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_F7481C(uint64_t a1)
{
  uint64_t v31 = -858993459 * ((*(void *)(a1 + 1176) - *(void *)(a1 + 1168)) >> 4);
  if (v31)
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(a1 + 1168);
      uint64_t v34 = v2;
      uint64_t v4 = (uint64_t *)(v3 + 80 * v2);
      if (*(unsigned char *)(a1 + 3048)) {
        sub_F78AB8((int32x2_t *)a1, (_DWORD *)(v3 + 80 * v2));
      }
      sub_F97D2C(*(void *)(a1 + 976) + 24, v4, v38);
      if (v38[0])
      {
        uint64_t v5 = v3 + 80 * v34;
        unsigned int v37 = *(_DWORD *)(v5 + 8);
        unint64_t v6 = sub_F17140((uint64_t *)(*(void *)a1 + 4232), v4, v5 + 8, *(void *)(a1 + 2968));
        unint64_t v33 = v6;
        if (v6 != -1 && (v6 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
        {
          sub_F97D2C(*(void *)(a1 + 976) + 24, v4, v38);
          uint64_t v8 = *(uint64_t **)(v39 + 8);
          unint64_t v32 = *(uint64_t **)(v39 + 16);
          if (v8 != v32)
          {
            uint64_t v36 = v4;
            do
            {
              unint64_t v35 = v8;
              uint64_t v9 = (void *)(**(void **)(a1 + 976) + 32 * *v8);
              uint64_t v10 = -858993459 * ((v9[1] - *v9) >> 4);
              if (v10)
              {
                for (uint64_t i = 0; i != v10; ++i)
                {
                  uint64_t v12 = (uint64_t *)(*v9 + 80 * i);
                  if (*v12 == *v4)
                  {
                    uint64_t v13 = *v9 + 80 * i;
                    unsigned int v14 = *(_DWORD *)(v13 + 8);
                    unint64_t v15 = sub_F17140((uint64_t *)(*(void *)a1 + 4232), v12, v13 + 8, *(void *)(a1 + 2968));
                    int v16 = v15;
                    unint64_t v17 = HIDWORD(v15);
                    BOOL v18 = v15 == -1 || HIDWORD(v15) == 0x7FFFFFFF;
                    if (!v18 && v14 >= v37)
                    {
                      int32x2_t v20 = *(int32x2_t *)a1;
                      uint64_t v21 = *(void *)(a1 + 2968);
                      unint64_t v22 = HIDWORD(*v4);
                      uint64_t v23 = (*v4 << 47) & 0x1000000000000;
                      if (*(unsigned char *)(*(void *)a1 + 9586))
                      {
                        uint64_t v24 = 0;
                        unint64_t v25 = 0x2127599BF4325C37
                            * ((*v4 & 0xFFFFFFFFFFFF0000 | HIWORD(v23)) ^ ((unint64_t)*v4 >> 23));
                        for (unint64_t j = v25 ^ (v25 >> 47); ; unint64_t j = v24 + v27)
                        {
                          uint64_t v27 = j & (*(void *)(*(void *)&v20 + 9648) - 1);
                          unint64_t v28 = *(void *)(*(void *)(*(void *)&v20 + 9664) + 8 * v27);
                          if (*(_DWORD *)(*(void *)&v20 + 9656) == v28
                            && *(unsigned __int16 *)(*(void *)a1 + 9660) == WORD2(v28)
                            && (HIWORD(v28) & 1) != (*(unsigned char *)(*(void *)a1 + 9662) == 0))
                          {
                            break;
                          }
                          if ((!*(void *)(*(void *)&v20 + 9632)
                             || *(_DWORD *)(*(void *)&v20 + 9624) != v28
                             || *(unsigned __int16 *)(*(void *)a1 + 9628) != WORD2(v28)
                             || (HIWORD(v28) & 1) == (*(unsigned char *)(*(void *)a1 + 9630) == 0))
                            && v22 == v28
                            && WORD1(*v4) == WORD2(v28)
                            && (v23 != 0) != (HIWORD(v28) & 1))
                          {
                            if (v27 != -1) {
                              goto LABEL_16;
                            }
                            break;
                          }
                          ++v24;
                        }
                      }
                      unint64_t v29 = (uint64_t *)(*(void *)&v20 + 4232);
                      sub_ED7040(*(void *)&v20 + 8, (v22 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*v4) << 32) | v23) ^ 0x1000000000000, (uint64_t)v38);
                      unint64_t v30 = sub_F17510(v29, v38, v14 - v37, v21);
                      if (v30 != -1 && HIDWORD(v30) != 0x7FFFFFFF)
                      {
                        LODWORD(v38[0]) = v30 + v16 + v33;
                        HIDWORD(v38[0]) = v17 + HIDWORD(v33) + HIDWORD(v30);
                        sub_F785AC(a1, v36, (unsigned int *)v38, *v35, v34, i, 1, 0);
                      }
LABEL_16:
                      uint64_t v4 = v36;
                    }
                  }
                }
              }
              uint64_t v8 = v35 + 1;
            }
            while (v35 + 1 != v32);
          }
        }
      }
      uint64_t v2 = v34 + 1;
    }
    while (v34 + 1 != v31);
  }
}

void sub_F74BDC(uint64_t **a1, unsigned int *a2, unsigned int a3)
{
  if (*((unsigned char *)*a1 + 9584) && sub_51D60((unsigned __int8 *)*a1 + 8)) {
    unsigned int v6 = sub_F78BBC(a1[1]) - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  unsigned int v7 = -1;
  if (*a2 < v6 && *a2 != -1) {
    unsigned int v6 = *a2;
  }
  unsigned int v86 = v6;
  uint64_t v9 = (unsigned int *)v84 + 2;
  uint64_t v10 = a1 + 378;
  unsigned int v70 = a1 + 375;
  int64x2_t v69 = vdupq_n_s64(0xFFFF0002uLL);
  while (*((_DWORD *)a1 + 518) && ((unint64_t)((char *)a1[250] - (char *)a1[249]) >> 2) < a3)
  {
    unint64_t v11 = &a1[246][10 * *(unsigned int *)a1[253]];
    v84[0] = *(_OWORD *)v11;
    long long v12 = *((_OWORD *)v11 + 3);
    long long v13 = *((_OWORD *)v11 + 4);
    long long v14 = *((_OWORD *)v11 + 2);
    v84[1] = *((_OWORD *)v11 + 1);
    v84[3] = v12;
    long long v85 = v13;
    _DWORD v84[2] = v14;
    sub_F773C4((uint64_t)(a1 + 150));
    uint64_t v15 = **a1;
    if (!*(unsigned char *)(v15 + 7774)
      || (unsigned __int16 v16 = WORD1(v84[0]),
          uint64_t v17 = HIDWORD(*(void *)&v84[0]),
          (BOOL v18 = sub_290DEC(v15 + 3896, DWORD1(v84[0]), 1)) != 0)
      && (uint64_t v19 = &v18[-*(int *)v18], *(unsigned __int16 *)v19 >= 5u)
      && (uint64_t v20 = *((unsigned __int16 *)v19 + 2)) != 0
      && *(_DWORD *)&v18[v20 + *(unsigned int *)&v18[v20]] > v16
      && sub_295DB4(v15, v17 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)v16 << 32)))
    {
      if (!*((unsigned char *)a1 + 1052)
        || sub_2961B8((void ***)**a1, HIDWORD(*(void *)&v84[0]) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v84[0]) << 32)))
      {
        int v21 = DWORD2(v85);
        unsigned int v22 = *((_DWORD *)a1 + 260);
        if (v22 != -1 && DWORD2(v84[0]) > v22 || *((unsigned char *)a1 + 3048) && sub_F77544((uint64_t)a1, v9)) {
          return;
        }
        int v23 = *((_DWORD *)a1 + 261);
        if (v23 != 0x7FFFFFFF && SHIDWORD(v84[0]) <= v23) {
          --*((_DWORD *)a1 + 262);
        }
        if (*v10 == -1
          || !sub_F963A0(*a1[1], HIDWORD(*(void *)&v84[0]) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v84[0]) << 32), v10))
        {
          int v24 = v21 & 0x7FFFFFFF;
          unsigned int v25 = sub_F77698((uint64_t)a1, (uint64_t *)v84, (uint64_t)v9, v21 & 0x7FFFFFFF);
          unsigned int v83 = v25;
          int v26 = *((_DWORD *)a1 + 740);
          unsigned int v27 = 0x7FFFFFFF;
          if (v26 != 0x7FFFFFFF)
          {
            if (v84[0] < 0) {
              char v28 = -5;
            }
            else {
              char v28 = 5;
            }
            unsigned int v27 = SHIDWORD(v84[0]) / 10
                + v26
                + (((103 * (char)(v28 + SHIDWORD(v84[0]) % 10)) >> 15) & 1)
                + ((103 * (char)(v28 + SHIDWORD(v84[0]) % 10)) >> 10);
          }
          unsigned int v82 = v27;
          unint64_t v29 = v86 >= v25 ? &v83 : &v86;
          int v30 = sub_F77AB8((uint64_t)a1, v84, (int *)a1[371], (uint64_t)&v82, *((unsigned char *)a1 + 2964), v29);
          int v81 = v30;
          if (v30 != -1)
          {
            if (!v30)
            {
              double v68 = v10;
              if (!*((unsigned char *)a1 + 3048)) {
                sub_F77C3C((uint64_t)a1, (uint64_t *)v84, (uint64_t *)v9, v21 & 0x7FFFFFFF);
              }
              double v67 = v9;
              sub_ED75C0((uint64_t)(*a1 + 1), *(unint64_t *)&v84[0], 0, a1 + 372, 0);
              unsigned int v31 = -1171354717 * ((unint64_t)((char *)a1[373] - (char *)a1[372]) >> 3);
              if (v31)
              {
                unint64_t v32 = 0;
                int v33 = 0;
                uint64_t v34 = 88 * v31;
                do
                {
                  uint64_t v35 = (uint64_t)&a1[372][v32 / 8];
                  unint64_t v36 = sub_F77FE0((uint64_t)*a1, v35, (uint64_t)a1[371]);
                  unint64_t v37 = v36 & 0xFFFFFFFF00000000;
                  if (v36 != -1 && v37 != 0x7FFFFFFF00000000)
                  {
                    unint64_t v80 = ((((unint64_t)*(unsigned int *)(v35 + 80) >> 14) & 0x3FFFC | (*(void *)(v35 + 72) << 32))
                         + ((*(void *)(v35 + 72) >> 16) & 0xFFFF0000)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v35 + 84) >> 1) & 1 | (2 * ((*(void *)(v35 + 72) & 0xFF000000000000) == 0));
                    char v39 = *((unsigned char *)a1 + 2964);
                    unint64_t v72 = (*((void *)&v84[0] + 1) + v37) & 0xFFFFFFFF00000000 | (DWORD2(v84[0]) + v36);
                    LODWORD(v73) = v82;
                    BYTE4(v73) = v39;
                    v74.i64[0] = (((*(void *)(v35 + 32) >> 16) & 0xFFFF0000 | (*(void *)(v35 + 32) << 32) | (2 * ((*(void *)(v35 + 32) & 0xFF000000000000) == 0)))
                                + 4 * (unsigned __int16)*(_DWORD *)(v35 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v35 + 84) & 1;
                    v74.i64[1] = (((*(void *)(v35 + 72) >> 16) & 0xFFFF0000 | (*(void *)(v35 + 72) << 32) | (2 * ((*(void *)(v35 + 72) & 0xFF000000000000) == 0)))
                                + (((unint64_t)*(unsigned int *)(v35 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v35 + 84) >> 1) & 1;
                    LODWORD(v75) = *(_DWORD *)(v35 + 84);
                    int v77 = v33;
                    int v78 = 0;
                    int v79 = v24;
                    sub_F77294((uint64_t)a1, (uint64_t *)&v80, &v72);
                  }
                  ++v33;
                  v32 += 88;
                }
                while (v34 != v32);
              }
LABEL_69:
              int v59 = *((_DWORD *)a1 + 261);
              if (v59 == 0x7FFFFFFF)
              {
                int v52 = 0;
                uint64_t v9 = v67;
                uint64_t v10 = v68;
              }
              else
              {
                int v52 = 0;
                uint64_t v10 = v68;
                if (*((_DWORD *)a1 + 262))
                {
                  uint64_t v9 = v67;
                }
                else
                {
                  uint64_t v9 = v67;
                  if (v7 == -1)
                  {
                    uint64_t v60 = a1[119];
                    uint64_t v61 = a1[120];
                    if (v60 == v61)
                    {
                      int v52 = 3;
                      unsigned int v7 = -1;
                    }
                    else
                    {
                      unsigned int v7 = 0;
                      unsigned int v62 = a1[116];
                      do
                      {
                        if (0xAAAAAAAAAAAAAAABLL * (a1[117] - v62) > *v60) {
                          unint64_t v63 = v62[3 * *v60 + 1];
                        }
                        else {
                          unint64_t v63 = 0x7FFFFFFFFFFFFFFFLL;
                        }
                        unint64_t v64 = HIDWORD(v63);
                        if (v7 > v63) {
                          LODWORD(v63) = v7;
                        }
                        if (v59 >= (int)v64) {
                          unsigned int v7 = v63;
                        }
                        ++v60;
                      }
                      while (v60 != v61);
                      unsigned int v65 = *((_DWORD *)a1 + 260);
                      BOOL v66 = v65 != -1 && v7 >= v65;
                      int v52 = 0;
                      if (!v66) {
                        *((_DWORD *)a1 + 260) = v7;
                      }
                    }
                  }
                }
              }
              goto LABEL_61;
            }
            unint64_t v40 = sub_F968AC(*a1[1], HIDWORD(*(void *)&v84[0]) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v84[0]) << 32), (v84[0] & 2) == 0, &v81);
            unint64_t v80 = v40;
            if (v40)
            {
              if (v40 <= 0xFFFFFFFEFFFFFFFFLL)
              {
                char v41 = *((unsigned char *)a1 + 2964);
                sub_FA2A1C((void **)*a1 + 537, *(unint64_t *)&v84[0], &v81, 0, (int *)a1[371], (uint64_t)&v82, v41, (uint64_t)v70);
                if (a1[375] != a1[376])
                {
                  sub_5217C8((uint64_t)(a1 + 260), &v80, (uint64_t)&v72);
                  unint64_t v42 = v72;
                  if (v74.i8[0])
                  {
                    uint64_t v43 = *(void *)(v72 + 8) + 12 * v73;
                    *(void *)uint64_t v43 = v80;
                    *(_DWORD *)(v43 + 8) = 0x7FFFFFFF;
                  }
                  double v68 = v10;
                  uint64_t v44 = *(void *)(v42 + 8) + 12 * v73;
                  int v47 = *(_DWORD *)(v44 + 8);
                  unint64_t v45 = (_DWORD *)(v44 + 8);
                  int v46 = v47;
                  if (v47 == 0x7FFFFFFF || SHIDWORD(v84[0]) < v46) {
                    *unint64_t v45 = HIDWORD(v84[0]);
                  }
                  double v67 = v9;
                  uint64_t v48 = -858993459 * ((unint64_t)((char *)a1[376] - (char *)a1[375]) >> 3);
                  if (v48)
                  {
                    uint64_t v49 = 0;
                    int v50 = 0;
                    uint64_t v51 = 40 * v48;
                    do
                    {
                      uint64_t v53 = *v70 + v49;
                      uint64_t v54 = *(void *)(v53 + 28);
                      unint64_t v55 = v54 & 0xFFFFFFFF00000000;
                      if (v54 != -1 && v55 != 0x7FFFFFFF00000000)
                      {
                        unint64_t v72 = (v55 + *((void *)&v84[0] + 1)) & 0xFFFFFFFF00000000 | (v54 + DWORD2(v84[0]));
                        LODWORD(v73) = v82;
                        BYTE4(v73) = v41;
                        int64x2_t v74 = v69;
                        LODWORD(v75) = 0;
                        int v77 = v50;
                        int v78 = v81;
                        int v79 = v24;
                        int v57 = *(_DWORD *)(v53 + 32);
                        long long v58 = *(_OWORD *)(v53 + 16);
                        int64x2_t v74 = *(int64x2_t *)v53;
                        long long v75 = v58;
                        int v76 = v57;
                        uint64_t v71 = *(void *)(v53 + 8);
                        sub_F77294((uint64_t)a1, &v71, &v72);
                      }
                      ++v50;
                      v49 += 40;
                    }
                    while (v51 != v49);
                  }
                  goto LABEL_69;
                }
              }
            }
          }
        }
      }
    }
    int v52 = 2;
LABEL_61:
    if (v52 == 3) {
      return;
    }
  }
}

void sub_F75358(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, char a5, _DWORD *a6, int a7, unsigned int *a8, uint64_t *a9, void *a10, unsigned int a11, int a12, int a13)
{
  sub_F73894(a1);
  *(_DWORD *)(a1 + 2960) = *a4;
  *(unsigned char *)(a1 + 2964) = a5;
  *(void *)(a1 + 2968) = a3;
  if (a1 + 1168 != a2) {
    sub_BFF628((void *)(a1 + 1168), *(char **)a2, *(char **)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
  }
  *(void *)(a1 + 1192) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 1040) = *a6;
  *(_DWORD *)(a1 + 1044) = a7;
  *(_DWORD *)(a1 + 20) = a13;
  *(void *)(a1 + 976) = a1 + 24;
  sub_F73C2C(a1);
  sub_F742A8(a1, a10);
  uint64_t v21 = *a9;
  uint64_t v20 = a9[1];
  if (*a9 != v20)
  {
    do
    {
      int v23 = *(_DWORD *)(v21 + 8);
      sub_F936B4(a1 + 1056, (void *)v21, &v23);
      sub_F938DC((uint64_t **)(a1 + 1056), a10);
      sub_F948C0((int32x2_t *)(a1 + 1056));
      v21 += 16;
    }
    while (v21 != v20);
  }
  sub_F74BDC((uint64_t **)a1, a8, a11);
}

void sub_F75494(int32x2_t *a1, uint64_t a2, uint64_t ***a3, uint64_t a4, int a5, char a6, int a7, int a8, unsigned int a9, int a10, unsigned int a11)
{
  sub_F73894((uint64_t)a1);
  uint64_t v19 = *a3;
  BOOL v18 = a3[1];
  if (*a3 == v18)
  {
    uint64_t v20 = *a3;
  }
  else
  {
    do
    {
      int v24 = a1;
      sub_F770A8(a1 + 3, v19, 1, (void **)&v24);
      v19 += 4;
    }
    while (v19 != v18);
    uint64_t v19 = *a3;
    uint64_t v20 = a3[1];
  }
  unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&a1[117] - *(void *)&a1[116]) >> 3);
  unint64_t v22 = ((char *)v20 - (char *)v19) >> 5;
  if (v22 > v21) {
    sub_F92E44((void **)&a1[116], v22 - v21);
  }
  a1[122] = (int32x2_t)&a1[3];
  sub_F755A8((uint64_t)a1, a2, a4, a5, a6, a7, a8, a9, a11);
}

void sub_F755A8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, int a6, int a7, unsigned int a8, unsigned int a9)
{
  unsigned int v18 = a8;
  *(_DWORD *)(a1 + 2960) = a4;
  *(unsigned char *)(a1 + 2964) = a5;
  *(void *)(a1 + 2968) = a3;
  long long v13 = (void *)(a1 + 1168);
  if (v13 != (void *)a2) {
    sub_BFF628(v13, *(char **)a2, *(char **)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
  }
  *(void *)(a1 + 1192) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 1040) = a6;
  *(_DWORD *)(a1 + 1044) = a7;
  long long v14 = *(void **)(a1 + 976);
  if (v14[11]
     + v14[5]
     + v14[17]
     + v14[23]
     + v14[29]
     + v14[35]
     + v14[41]
     + v14[47]
     + v14[53]
     + v14[59]
     + v14[65]
     + v14[71]
     + v14[77]
     + v14[83]
     + v14[89]
     + v14[95]
    || *(unsigned char *)(a1 + 3048))
  {
    sub_F73C2C(a1);
    long long __p = 0;
    unsigned __int16 v16 = 0;
    uint64_t v17 = 0;
    sub_F742A8(a1, &__p);
    if (__p)
    {
      unsigned __int16 v16 = __p;
      operator delete(__p);
    }
    sub_F7481C(a1);
    sub_F74BDC((uint64_t **)a1, &v18, a9);
  }
}

void sub_F75700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F7571C(uint64_t a1)
{
  return a1 + 952;
}

uint64_t sub_F75724(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 928);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 936) - v2) >> 3) <= a2) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    return *(void *)(v2 + 24 * a2 + 8);
  }
}

uint64_t sub_F75760(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 928);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 936) - v3) >> 3) <= a2 || !*(void *)(v3 + 24 * a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v9, a2);
    unsigned int v6 = std::string::insert(&v9, 0, "No valid data for target id ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v6->__r_.__value_.__r.__words[2];
    long long v10 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  return *(_DWORD *)(v3 + 24 * a2 + 20) & 0x3FFFFFFF;
}

void sub_F7583C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F75894@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_EAD400((uint64_t)a2);
  unsigned int v6 = 0;
  sub_F75AB8(a1, 0, (uint64_t)v5, a2);
  uint64_t result = (uint64_t)v6;
  if (v6 == v5) {
    return (*(uint64_t (**)(void *))(v5[0] + 32))(v5);
  }
  if (v6) {
    return (*(uint64_t (**)(void))(*v6 + 40))();
  }
  return result;
}

void sub_F7597C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13 == v14) {
    sub_20B17F8();
  }
  else {
    sub_20B182C(a13);
  }
  sub_405F44(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_F759B0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  sub_EAD400((uint64_t)a3);
  uint64_t v8 = 0;
  sub_F75AB8(a1, a2, (uint64_t)v7, a3);
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

void sub_F75A9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_F75CDC((uint64_t *)va);
  sub_405F44(v2);
  _Unwind_Resume(a1);
}

unint64_t sub_F75AB8(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  sub_EAD268((uint64_t)a4);
  uint64_t v8 = *(void *)(a1 + 928);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 936) - v8) >> 3) <= a2) {
    return 0;
  }
  unint64_t v9 = *(void *)(v8 + 24 * a2);
  if (v9)
  {
    if (!*(unsigned char *)(a1 + 3048) || *(unsigned char *)(a1 + 3049))
    {
      uint64_t v10 = v8 + 24 * a2;
      std::string::size_type v11 = (_DWORD *)(v10 + 20);
      if ((*(unsigned char *)(v10 + 23) & 0x40) != 0)
      {
        sub_ED7040(*(void *)a1 + 8, (HIDWORD(v9) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(v9) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((v9 >> 1) & 1) << 48)) ^ 0x1000000000000, (uint64_t)v14);
        sub_EADAD8((uint64_t)a4, v9, v14);
        sub_EAD920((uint64_t)a4, *(void *)(a1 + 1168) + 80 * (*v11 & 0x3FFFFFFF) + 8);
        unint64_t v9 = 0;
        uint64_t v12 = 32 * a2;
        if ((*v11 & 0x80000000) != 0)
        {
LABEL_10:
          sub_F76398((uint64_t *)a1, (void **)(v8 + 24 * a2), *(void *)(a1 + 3880) + 40 * a2, (unint64_t *)(*(void *)(**(void **)(a1 + 976) + v12) + 80* *(unsigned int *)(v8 + 24 * a2 + 16)), (uint64_t)v14);
          sub_EAEFD8((uint64_t)a4, (uint64_t)v14);
          sub_405F44((uint64_t)v14);
        }
      }
      else
      {
        unint64_t v9 = sub_F75E74(a1, (uint64_t *)(v8 + 24 * a2), a3, a4);
        uint64_t v12 = 32 * a2;
        if ((*v11 & 0x80000000) != 0) {
          goto LABEL_10;
        }
      }
      sub_EADAA8((uint64_t)a4, *(void *)(**(void **)(a1 + 976) + v12) + 80 * *(unsigned int *)(v8 + 24 * a2 + 16) + 8);
      return v9;
    }
    return 0;
  }
  return v9;
}

void sub_F75CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_F75CDC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t sub_F75D6C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  sub_EAD400((uint64_t)a3);
  uint64_t v8 = 0;
  sub_F75E74(a1, a2, (uint64_t)v7, a3);
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

void sub_F75E58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_F75CDC((uint64_t *)va);
  sub_405F44(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_F75E74(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  sub_EAD268((uint64_t)a4);
  uint64_t v8 = *a2;
  if (!*a2) {
    return 0;
  }
  char v41 = a2;
  int v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v46 = v8;
  do
  {
    sub_EE03E4(a1 + 1200, &v46, &v54);
    unsigned int v9 = *(_DWORD *)(*((void *)&v55 + 1) + 8);
    uint64_t v10 = *(void *)(a1 + 1968);
    sub_F7668C((char **)&v47, v10 + 80 * v9 + 8);
    if ((*(_DWORD *)(v10 + 80 * v9 + 72) & 0x80000000) != 0)
    {
      uint64_t v46 = 0;
      std::string::size_type v11 = v47;
      uint64_t v12 = v48;
      if (v47 != v48) {
        goto LABEL_6;
      }
LABEL_24:
      uint64_t v25 = 0;
      if (v11) {
        goto LABEL_42;
      }
      return v25;
    }
    uint64_t v46 = *(void *)(v10 + 80 * v9 + 24);
  }
  while (v46);
  std::string::size_type v11 = v47;
  uint64_t v12 = v48;
  if (v47 == v48) {
    goto LABEL_24;
  }
LABEL_6:
  if (!*(void *)(a3 + 24))
  {
    uint64_t v13 = v12 - 72;
    if (v12 - 72 > (char *)v11)
    {
      uint64_t v14 = (char *)(v11 + 18);
      do
      {
        long long v55 = *(_OWORD *)(v14 - 56);
        *(_OWORD *)int v56 = *(_OWORD *)(v14 - 40);
        *(_OWORD *)&v56[16] = *(_OWORD *)(v14 - 24);
        *(void *)&v56[32] = *((void *)v14 - 1);
        long long v54 = *(_OWORD *)(v14 - 72);
        *(_OWORD *)(v14 - 72) = *(_OWORD *)v13;
        long long v16 = *((_OWORD *)v13 + 2);
        long long v15 = *((_OWORD *)v13 + 3);
        int v17 = *((_DWORD *)v13 + 16);
        *(_OWORD *)(v14 - 56) = *((_OWORD *)v13 + 1);
        *((_DWORD *)v14 - 2) = v17;
        *(_OWORD *)(v14 - 24) = v15;
        *(_OWORD *)(v14 - 40) = v16;
        *(_OWORD *)uint64_t v13 = v54;
        *((_DWORD *)v13 + 16) = *(_DWORD *)&v56[32];
        *((_OWORD *)v13 + 3) = *(_OWORD *)&v56[16];
        *((_OWORD *)v13 + 2) = *(_OWORD *)v56;
        *((_OWORD *)v13 + 1) = v55;
        v13 -= 72;
        BOOL v18 = v14 >= v13;
        v14 += 72;
      }
      while (!v18);
    }
  }
  v45[0] = a3;
  v45[1] = (uint64_t)a4;
  long long __p = 0;
  uint64_t v43 = 0;
  uint64_t v19 = v11 + 15;
  uint64_t v44 = 0;
  while (!*v19)
  {
    if (*(void *)(a3 + 24) && !sub_EAE144(a4))
    {
      *(void *)&long long v54 = *(void *)(v19 - 9);
      uint64_t v21 = *(void *)(a3 + 24);
      if (!v21) {
        sub_29F82C();
      }
      if ((*(uint64_t (**)(uint64_t, long long *))(*(void *)v21 + 48))(v21, &v54)) {
        goto LABEL_28;
      }
    }
    uint64_t v22 = *(void *)a1 + 8;
    sub_ED7040(v22, (HIDWORD(*(void *)(v19 - 11)) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(*(void *)(v19 - 11)) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((*(void *)(v19 - 11) >> 1) & 1) << 48)) ^ 0x1000000000000, (uint64_t)v52);
    sub_ED7040(v22, (HIDWORD(*(void *)(v19 - 9)) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(*(void *)(v19 - 9)) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((*(void *)(v19 - 9) >> 1) & 1) << 48)) ^ 0x1000000000000, (uint64_t)v50);
    int v23 = *(v19 - 11);
    int v24 = *(v19 - 9);
    long long v54 = v52[0];
    long long v55 = v52[1];
    *(void *)int v56 = v53;
    *(_OWORD *)&v56[8] = v50[0];
    *(_OWORD *)&unsigned char v56[24] = v50[1];
    *(void *)&v56[40] = v51;
    LODWORD(v57) = (v24 << 14) & 0x3FFF0000 | ((unsigned __int16)v23 >> 2);
    HIDWORD(v57) = *(v19 - 7);
    sub_EADC28((uint64_t)a4, (int **)&v54);
LABEL_12:
    uint64_t v20 = (char *)(v19 + 3);
    v19 += 18;
    if (v20 == v12)
    {
      char v26 = 1;
      if (!*(void *)(a3 + 24)) {
        goto LABEL_34;
      }
      goto LABEL_29;
    }
  }
  sub_FB8518((uint64_t **)(*(void *)a1 + 4408), v19 - 11, *(int **)(a1 + 2968), (uint64_t)(v19 - 13), *((unsigned __int8 *)v19 - 48), &__p);
  if (__p == v43)
  {
    sub_EAD268((uint64_t)a4);
    goto LABEL_39;
  }
  if ((sub_F76818(v45, (int ***)&__p) & 1) == 0) {
    goto LABEL_12;
  }
LABEL_28:
  char v26 = 0;
  if (!*(void *)(a3 + 24)) {
    goto LABEL_34;
  }
LABEL_29:
  unint64_t v27 = *(void *)sub_5231C((uint64_t)a4);
  uint64_t v28 = *(void *)(sub_5231C((uint64_t)a4) + 8);
  if (v27 != v28)
  {
    unint64_t v29 = v28 - 88;
    if (v29 > v27)
    {
      unint64_t v30 = v27 + 88;
      do
      {
        *(_OWORD *)int v56 = *(_OWORD *)(v30 - 56);
        *(_OWORD *)&v56[16] = *(_OWORD *)(v30 - 40);
        *(_OWORD *)&v56[32] = *(_OWORD *)(v30 - 24);
        uint64_t v57 = *(void *)(v30 - 8);
        long long v54 = *(_OWORD *)(v30 - 88);
        long long v55 = *(_OWORD *)(v30 - 72);
        long long v31 = *(_OWORD *)(v29 + 16);
        *(_OWORD *)(v30 - 88) = *(_OWORD *)v29;
        *(_OWORD *)(v30 - 72) = v31;
        long long v33 = *(_OWORD *)(v29 + 48);
        long long v32 = *(_OWORD *)(v29 + 64);
        uint64_t v34 = *(void *)(v29 + 80);
        *(_OWORD *)(v30 - 56) = *(_OWORD *)(v29 + 32);
        *(void *)(v30 - 8) = v34;
        *(_OWORD *)(v30 - 24) = v32;
        *(_OWORD *)(v30 - 40) = v33;
        *(_OWORD *)unint64_t v29 = v54;
        *(void *)(v29 + 80) = v57;
        *(_OWORD *)(v29 + 64) = *(_OWORD *)&v56[32];
        *(_OWORD *)(v29 + 48) = *(_OWORD *)&v56[16];
        *(_OWORD *)(v29 + 32) = *(_OWORD *)v56;
        *(_OWORD *)(v29 + 16) = v55;
        v29 -= 88;
        BOOL v18 = v30 >= v29;
        v30 += 88;
      }
      while (!v18);
    }
  }
LABEL_34:
  if ((v26 & 1) == 0)
  {
    uint64_t v35 = sub_69134((uint64_t)a4);
    long long v54 = *(_OWORD *)v35;
    long long v36 = *(_OWORD *)(v35 + 16);
    long long v37 = *(_OWORD *)(v35 + 32);
    long long v38 = *(_OWORD *)(v35 + 48);
    *(void *)&v56[32] = *(void *)(v35 + 64);
    *(_OWORD *)int v56 = v37;
    *(_OWORD *)&v56[16] = v38;
    long long v55 = v36;
    LODWORD(v54) = 0;
    sub_EAD920((uint64_t)a4, (uint64_t)&v54);
    uint64_t v25 = 1;
    char v39 = __p;
    if (!__p) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  sub_EE03E4(a1 + 1200, v41, &v54);
  sub_EAD920((uint64_t)a4, *(void *)(a1 + 1168)+ 80* (*(_DWORD *)(*(void *)(a1 + 1968) + 80 * *(unsigned int *)(*((void *)&v55 + 1) + 8) + 72) & 0x7FFFFFFF)+ 8);
LABEL_39:
  uint64_t v25 = 0;
  char v39 = __p;
  if (!__p) {
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v43 = v39;
  operator delete(v39);
LABEL_41:
  std::string::size_type v11 = v47;
  if (v47)
  {
LABEL_42:
    uint64_t v48 = (char *)v11;
    operator delete(v11);
  }
  return v25;
}

void sub_F76330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    BOOL v18 = a16;
    if (!a16) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    BOOL v18 = a16;
    if (!a16) {
      goto LABEL_3;
    }
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_F76398(uint64_t *a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  sub_EAD400(a5);
  uint64_t v10 = *a2;
  if (!*a2) {
    return;
  }
  long long v32 = 0;
  long long v33 = 0;
  uint64_t v34 = 0;
  long long v31 = v10;
  do
  {
    int v11 = *(_DWORD *)(a3 + 32);
    if (v11 == 1)
    {
      uint64_t v14 = (void *)sub_F9A7EC(a3, (unsigned int *)&v31);
    }
    else
    {
      if (v11)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      uint64_t v12 = *(void **)a3;
      long long __p = v10;
      uint64_t v13 = sub_F9A938(v12, &__p);
      uint64_t v14 = *(void **)v13;
      long long v15 = *(void **)(v13 + 8);
    }
    v30[0] = v14;
    v30[1] = v15;
    sub_3BFF8((char **)&v32, v30);
    uint64_t v10 = v30[0];
    long long v31 = v30[0];
  }
  while (v30[0]);
  memset(v30, 0, sizeof(v30));
  long long __p = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  long long v16 = (unint64_t *)v32;
  int v17 = v33;
  if (v32 == v33) {
    goto LABEL_22;
  }
  while (1)
  {
    if (!*((_DWORD *)v16 + 2))
    {
      if (*v16) {
        unint64_t v24 = *v16;
      }
      else {
        unint64_t v24 = *a4;
      }
      sub_ED75C0(*a1 + 8, v24, 1, v30, 0);
      sub_EADC28(a5, (int **)v30[0] + 11 * *((unsigned int *)v16 + 3));
      goto LABEL_10;
    }
    uint64_t v18 = *a1;
    unint64_t v19 = *v16;
    uint64_t v20 = (int *)a1[371];
    int v26 = 0x7FFFFFFF;
    sub_FA2A1C((void **)(v18 + 4296), v19, (_DWORD *)v16 + 2, 1u, v20, (uint64_t)&v26, 0, (uint64_t)&__p);
    uint64_t v21 = *a1;
    uint64_t v22 = (char *)__p + 40 * *((unsigned int *)v16 + 3);
    int v23 = (int *)a1[371];
    int v26 = 0x7FFFFFFF;
    sub_FB8518((uint64_t **)(v21 + 4408), v22, v23, (uint64_t)&v26, 0, v30);
    if (v30[0] == v30[1]) {
      break;
    }
    sub_EAEE78(a5, (int ***)v30);
LABEL_10:
    v16 += 2;
    if (v16 == v17) {
      goto LABEL_20;
    }
  }
  sub_EAD268(a5);
LABEL_20:
  if (__p)
  {
    uint64_t v28 = __p;
    operator delete(__p);
  }
LABEL_22:
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  if (v32)
  {
    long long v33 = (unint64_t *)v32;
    operator delete(v32);
  }
}

void sub_F765E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v21 = a14;
    if (!a14)
    {
LABEL_3:
      uint64_t v22 = a18;
      if (!a18) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v21 = a14;
    if (!a14) {
      goto LABEL_3;
    }
  }
  operator delete(v21);
  uint64_t v22 = a18;
  if (!a18)
  {
LABEL_4:
    sub_405F44(v19);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v22);
  sub_405F44(v19);
  _Unwind_Resume(a1);
}

char *sub_F7668C(char **a1, uint64_t a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v10 = *a1;
    unint64_t v11 = 0x8E38E38E38E38E39 * ((v5 - *a1) >> 3);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x38E38E38E38E38ELL) {
      sub_2E00();
    }
    unint64_t v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v4 - (void)v10) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x1C71C71C71C71C7) {
      unint64_t v14 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 > 0x38E38E38E38E38ELL) {
        sub_188D718();
      }
      long long v15 = (char *)operator new(72 * v14);
    }
    else
    {
      long long v15 = 0;
    }
    long long v16 = &v15[72 * v11];
    long long v17 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v16 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v16 + 3) = v17;
    *((void *)v16 + 8) = *(void *)(a2 + 64);
    long long v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)long long v16 = *(_OWORD *)a2;
    *((_OWORD *)v16 + 1) = v18;
    unsigned int v9 = v16 + 72;
    if (v5 != v10)
    {
      do
      {
        *(_OWORD *)(v16 - 72) = *(_OWORD *)(v5 - 72);
        long long v19 = *(_OWORD *)(v5 - 56);
        long long v20 = *(_OWORD *)(v5 - 40);
        long long v21 = *(_OWORD *)(v5 - 24);
        *((_DWORD *)v16 - 2) = *((_DWORD *)v5 - 2);
        *(_OWORD *)(v16 - 24) = v21;
        *(_OWORD *)(v16 - 40) = v20;
        *(_OWORD *)(v16 - 56) = v19;
        v16 -= 72;
        v5 -= 72;
      }
      while (v5 != v10);
      uint64_t v5 = *a1;
    }
    *a1 = v16;
    a1[1] = v9;
    a1[2] = &v15[72 * v14];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
    long long v6 = *(_OWORD *)(a2 + 16);
    long long v7 = *(_OWORD *)(a2 + 32);
    long long v8 = *(_OWORD *)(a2 + 48);
    *((void *)v5 + 8) = *(void *)(a2 + 64);
    *((_OWORD *)v5 + 2) = v7;
    *((_OWORD *)v5 + 3) = v8;
    *((_OWORD *)v5 + 1) = v6;
    unsigned int v9 = v5 + 72;
  }
  a1[1] = v9;
  return v9 - 72;
}

uint64_t sub_F76818(uint64_t *a1, int ***a2)
{
  if (*(void *)(*a1 + 24))
  {
    unint64_t v4 = *a2;
    for (uint64_t i = a2[1]; i != v4; sub_EADC28(a1[1], i))
    {
      if (!sub_EAE144((void *)a1[1]))
      {
        uint64_t v5 = *a1;
        unint64_t v12 = ((((unint64_t)*(i - 2) >> 16) & 0xFFFF0000 | ((void)*(i - 2) << 32) | (2
                                                                                            * (((unint64_t)*(i - 2) & 0xFF000000000000) == 0)))
             + (((unint64_t)*((unsigned int *)i - 2) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*((unsigned __int8 *)i - 4) >> 1) & 1;
        uint64_t v6 = *(void *)(v5 + 24);
        if (!v6) {
          goto LABEL_18;
        }
        if ((*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)v6 + 48))(v6, &v12)) {
          return 1;
        }
      }
      i -= 11;
    }
  }
  else
  {
    long long v8 = *a2;
    unsigned int v9 = a2[1];
    while (v8 != v9)
    {
      if (*(void *)(*a1 + 24) && !sub_EAE144((void *)a1[1]))
      {
        uint64_t v10 = *a1;
        unint64_t v12 = ((((unint64_t)v8[9] >> 16) & 0xFFFF0000 | ((void)v8[9] << 32) | (2
                                                                                      * (((unint64_t)v8[9] & 0xFF000000000000) == 0)))
             + (((unint64_t)*((unsigned int *)v8 + 20) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*((unsigned __int8 *)v8 + 84) >> 1) & 1;
        uint64_t v11 = *(void *)(v10 + 24);
        if (!v11) {
LABEL_18:
        }
          sub_29F82C();
        if ((*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)v11 + 48))(v11, &v12)) {
          return 1;
        }
      }
      sub_EADC28(a1[1], v8);
      v8 += 11;
    }
  }
  return 0;
}

BOOL sub_F769D0(uint64_t a1, uint64_t *a2)
{
  sub_EE03E4(a1 + 1200, a2, v3);
  return v3[0] != 0;
}

uint64_t sub_F76A04@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 1992);
  uint64_t v3 = *(void *)(result + 2000);
  *a2 = result + 1968;
  a2[1] = v2;
  a2[2] = result + 1968;
  a2[3] = v3;
  return result;
}

uint64_t sub_F76A1C(uint64_t a1)
{
  return (*(void *)(a1 + 2000) - *(void *)(a1 + 1992)) >> 2;
}

void sub_F76A30(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = xmmword_20B8E30;
  *(void *)(a2 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v4 = *(char **)(a1 + 2080);
  uint64_t v5 = *(unsigned int **)(a1 + 2088);
  if (*v4 > -2)
  {
    uint64_t v6 = *(void **)(a1 + 2080);
    uint64_t v17 = *(void *)(a1 + 2104);
    long long v8 = &v4[v17];
    if (v4 != &v4[v17])
    {
LABEL_5:
      unsigned int v9 = (char **)(a1 + 2080);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v6 = *(void **)(a1 + 2080);
    do
    {
      unint64_t v7 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      uint64_t v6 = (void *)((char *)v6 + v7);
      v5 += 3 * v7;
    }
    while (*(char *)v6 < -1);
    long long v8 = &v4[*(void *)(a1 + 2104)];
    if (v6 != (void *)v8) {
      goto LABEL_5;
    }
  }
  unsigned int v9 = (char **)(a1 + 2128);
  uint64_t v18 = 1;
  uint64_t v19 = a1 + 2080;
  while (1)
  {
    uint64_t v5 = *(unsigned int **)(v19 + 56);
    uint64_t v6 = *v9;
    if (**v9 <= -2)
    {
      do
      {
        unint64_t v20 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        uint64_t v6 = (void *)((char *)v6 + v20);
        v5 += 3 * v20;
      }
      while (*(char *)v6 < -1);
    }
    long long v8 = &(*v9)[*(void *)(v19 + 72)];
    if (v6 != (void *)v8) {
      break;
    }
    uint64_t v19 = a1 + 2080 + 48 * v18++;
    unsigned int v9 = (char **)(v19 + 48);
    if (v18 == 16) {
      goto LABEL_26;
    }
  }
LABEL_6:
  uint64_t v10 = (char **)(a1 + 2848);
  do
  {
    while (1)
    {
      sub_F92FD4(**(void **)(a1 + 8), v5, (uint64_t)&__p);
      sub_33998(a2, (uint64_t)&__p);
      int v11 = *((char *)v6 + 1);
      uint64_t v6 = (void *)((char *)v6 + 1);
      v5 += 3;
      if (v11 <= -2)
      {
        do
        {
          unint64_t v12 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          uint64_t v6 = (void *)((char *)v6 + v12);
          v5 += 3 * v12;
        }
        while (*(char *)v6 < -1);
      }
      if (v6 == (void *)v8) {
        break;
      }
      if (!v9) {
        goto LABEL_26;
      }
    }
    unint64_t v13 = v9 + 6;
    if (v9 + 6 == v10) {
      break;
    }
    while (1)
    {
      unint64_t v14 = v13;
      long long v15 = v9[6];
      uint64_t v5 = (unsigned int *)v9[7];
      uint64_t v6 = v15;
      if (*v15 <= -2)
      {
        do
        {
          unint64_t v16 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          uint64_t v6 = (void *)((char *)v6 + v16);
          v5 += 3 * v16;
        }
        while (*(char *)v6 < -1);
      }
      long long v8 = &v9[9][(void)v15];
      if (v6 != (void *)v8) {
        break;
      }
      unint64_t v13 = v14 + 6;
      unsigned int v9 = v14;
      if (v14 + 6 == v10) {
        goto LABEL_26;
      }
    }
    unsigned int v9 = v14;
  }
  while (v14);
LABEL_26:
  if (!sub_344C4((_DWORD *)a2))
  {
    long long __p = 0;
    long long v31 = 0;
    uint64_t v32 = 0;
    long long v21 = *(unsigned int **)(a1 + 1992);
    uint64_t v22 = *(unsigned int **)(a1 + 2000);
    if (v21 != v22)
    {
      do
      {
        uint64_t v23 = *(void *)(a1 + 1968);
        uint64_t v24 = 80 * *v21;
        v28[0] = 1;
        unint64_t v25 = sub_F968AC(**(void **)(a1 + 8), HIDWORD(*(void *)(v23 + v24)) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*(void *)(v23 + v24)) << 32), (*(void *)(v23 + v24) >> 1) & 1, v28);
        unint64_t v29 = v25;
        if (v25) {
          BOOL v26 = HIDWORD(v25) == -1;
        }
        else {
          BOOL v26 = 1;
        }
        if (!v26)
        {
          unint64_t v27 = __p;
          if (__p != v31)
          {
            while (*v27 != v25)
            {
              if (++v27 == v31) {
                goto LABEL_39;
              }
            }
          }
          if (v27 == v31)
          {
LABEL_39:
            sub_F92FD4(**(void **)(a1 + 8), (unsigned int *)&v29, (uint64_t)v28);
            sub_33998(a2, (uint64_t)v28);
            sub_29603C(&__p, &v29);
          }
        }
        ++v21;
      }
      while (v21 != v22);
      if (__p)
      {
        long long v31 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_F76DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F76DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = a1 + 1200;
  sub_EE03E4(a1 + 1200, &v7, v8);
  if (!v8[0]) {
    return 0;
  }
  sub_EE03E4(v3, &v7, v8);
  unsigned int v4 = *(_DWORD *)(v8[3] + 8);
  uint64_t v5 = *(void *)(a1 + 1968);
  if ((*(_DWORD *)(v5 + 80 * v4 + 72) & 0x80000000) != 0) {
    return 0;
  }
  else {
    return *(void *)(v5 + 80 * v4 + 24);
  }
}

uint64_t sub_F76E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v3 = a1 + 1200;
  sub_EE03E4(a1 + 1200, &v5, v6);
  if (!v6[0]) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  sub_EE03E4(v3, &v5, v6);
  return *(void *)(*(void *)(a1 + 1968) + 80 * *(unsigned int *)(v6[3] + 8) + 8);
}

uint64_t sub_F76F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a3;
  uint64_t v14 = a2;
  uint64_t v4 = a1 + 1200;
  sub_EE03E4(a1 + 1200, &v14, v15);
  if (!v15[0]) {
    return 0;
  }
  sub_EE03E4(v4, &v13, v15);
  if (!v15[0]) {
    return 0;
  }
  uint64_t v11 = v13;
  uint64_t v12 = v14;
  sub_EE03E4(v4, &v12, v15);
  unsigned int v5 = *(_DWORD *)(v16 + 8);
  uint64_t v6 = *(void *)(a1 + 1968);
  sub_EE03E4(v4, &v11, v15);
  uint64_t result = v12;
  if (v12)
  {
    uint64_t v8 = *(void *)(a1 + 1968) + 80 * *(unsigned int *)(v16 + 8) + 8;
    uint64_t v9 = v6 + 80 * v5 + 8;
    while (v11)
    {
      if (result == v11) {
        return result;
      }
      if (*(_DWORD *)v8 < *(_DWORD *)v9
        || (*(_DWORD *)v9 >= *(_DWORD *)v8 ? (BOOL v10 = *(_DWORD *)(v8 + 4) < *(_DWORD *)(v9 + 4)) : (BOOL v10 = 0), v10))
      {
        if ((*(_DWORD *)(v9 + 64) & 0x80000000) != 0) {
          return 0;
        }
        uint64_t v12 = *(void *)(v9 + 16);
        if (!v12) {
          return 0;
        }
        sub_EE03E4(v4, &v12, v15);
        uint64_t v9 = *(void *)(a1 + 1968) + 80 * *(unsigned int *)(v16 + 8) + 8;
      }
      else if ((*(_DWORD *)(v8 + 64) & 0x80000000) != 0)
      {
        uint64_t v11 = 0;
      }
      else
      {
        uint64_t v11 = *(void *)(v8 + 16);
        if (v11)
        {
          sub_EE03E4(v4, &v11, v15);
          uint64_t v8 = *(void *)(a1 + 1968) + 80 * *(unsigned int *)(v16 + 8) + 8;
        }
      }
      uint64_t result = v12;
      if (!v12) {
        return result;
      }
    }
    return 0;
  }
  return result;
}

void *sub_F770A8(int32x2_t *a1, uint64_t **a2, char a3, void **a4)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    uint64_t v9 = (*(void *)&a1[1] - *(void *)a1) >> 5;
    if (a3)
    {
      do
      {
        uint64_t v11 = **a4 + 9592;
        unint64_t v19 = (HIDWORD(*v6) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(*v6) << 32) & 0xFFFEFFFFFFFFFFFFLL | ((((unint64_t)*v6 >> 1) & 1) << 48)) ^ 0x1000000000000;
        if (sub_F57414(v11, &v19) == -1)
        {
          LODWORD(v19) = 0;
          sub_F936B4((uint64_t)&a1[99], v6, (int *)&v19);
          sub_F948C0(a1 + 99);
          sub_F958CC((uint64_t)&a1[3], v6, (uint64_t)&v19);
          unint64_t v12 = v19;
          if (v21)
          {
            uint64_t v13 = (uint64_t *)(*(void *)(v19 + 8) + 32 * v20);
            *uint64_t v13 = *v6;
            v13[1] = 0;
            void v13[2] = 0;
            void v13[3] = 0;
          }
          uint64_t v10 = *(void *)(v12 + 8) + 32 * v20 + 8;
          LODWORD(v19) = v9;
          sub_F95644(v10, (unsigned int *)&v19);
        }
        v6 += 10;
      }
      while (v6 != v7);
    }
    else
    {
      do
      {
        uint64_t v15 = **a4 + 9592;
        unint64_t v19 = (HIDWORD(*v6) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(*v6) << 32) & 0xFFFEFFFFFFFFFFFFLL | ((((unint64_t)*v6 >> 1) & 1) << 48)) ^ 0x1000000000000;
        if (sub_F57414(v15, &v19) == -1)
        {
          sub_F958CC((uint64_t)&a1[3], v6, (uint64_t)&v19);
          unint64_t v16 = v19;
          if (v21)
          {
            uint64_t v17 = (uint64_t *)(*(void *)(v19 + 8) + 32 * v20);
            *uint64_t v17 = *v6;
            v17[1] = 0;
            v17[2] = 0;
            v17[3] = 0;
          }
          uint64_t v14 = *(void *)(v16 + 8) + 32 * v20 + 8;
          LODWORD(v19) = v9;
          sub_F95644(v14, (unsigned int *)&v19);
        }
        v6 += 10;
      }
      while (v6 != v7);
    }
  }
  return sub_F957AC((uint64_t)a1, (const void **)a2);
}

uint64_t sub_F77294(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  int v6 = *(_DWORD *)(a1 + 1044);
  if (v6 == 0x7FFFFFFF) {
    return sub_F788FC(a1 + 1200, a2, (uint64_t)a3);
  }
  int v7 = a3[1];
  sub_EE03E4(a1 + 1200, a2, v16);
  if (!v16[0])
  {
    if (v7 > v6) {
      return sub_F788FC(a1 + 1200, a2, (uint64_t)a3);
    }
    goto LABEL_20;
  }
  sub_EE03E4(a1 + 1200, a2, v16);
  uint64_t v8 = *(void *)(*(void *)(a1 + 1968) + 80 * *(unsigned int *)(v17 + 8) + 8);
  if (*a3 < v8 || (*a3 <= v8 ? (BOOL v9 = a3[1] < SHIDWORD(v8)) : (BOOL v9 = 0), v9))
  {
    sub_EE03E4(a1 + 1200, a2, v16);
    int v10 = *(_DWORD *)(*(void *)(a1 + 1968) + 80 * *(unsigned int *)(v17 + 8) + 12);
    int v11 = *(_DWORD *)(a1 + 1044);
    if (v11 >= v10 && v7 > v6)
    {
      int v14 = -1;
LABEL_21:
      *(_DWORD *)(a1 + 1048) += v14;
      return sub_F788FC(a1 + 1200, a2, (uint64_t)a3);
    }
    if (v11 >= v10 || v7 > v6) {
      return sub_F788FC(a1 + 1200, a2, (uint64_t)a3);
    }
LABEL_20:
    int v14 = 1;
    goto LABEL_21;
  }
  return sub_F788FC(a1 + 1200, a2, (uint64_t)a3);
}

unsigned int **sub_F773C4(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)(a1 + 824);
  uint64_t v3 = *(char **)(a1 + 800);
  uint64_t v4 = v3;
  unint64_t v5 = *(void *)(a1 + 808);
  if ((unint64_t)v3 >= v5)
  {
    int v7 = *(char **)(a1 + 792);
    uint64_t v8 = (v3 - v7) >> 2;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62) {
      sub_2E00();
    }
    uint64_t v10 = v5 - (void)v7;
    if (v10 >> 1 > v9) {
      unint64_t v9 = v10 >> 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 62) {
        sub_188D718();
      }
      unint64_t v12 = operator new(4 * v11);
    }
    else
    {
      unint64_t v12 = 0;
    }
    uint64_t v13 = &v12[4 * v8];
    *uint64_t v13 = *v2;
    int v6 = v13 + 1;
    if (v3 != v7)
    {
      unint64_t v14 = v3 - v7 - 4;
      if (v14 < 0x2C) {
        goto LABEL_29;
      }
      if ((unint64_t)(v7 - v12) < 0x20) {
        goto LABEL_29;
      }
      uint64_t v15 = (v14 >> 2) + 1;
      uint64_t v16 = 4 * (v15 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v4 = &v3[-v16];
      uint64_t v13 = (_DWORD *)((char *)v13 - v16);
      uint64_t v17 = &v12[4 * v8 - 16];
      uint64_t v18 = v3 - 16;
      uint64_t v19 = v15 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v20 = *(_OWORD *)v18;
        *(v17 - 1) = *((_OWORD *)v18 - 1);
        *uint64_t v17 = v20;
        v17 -= 2;
        v18 -= 32;
        v19 -= 8;
      }
      while (v19);
      if (v15 != (v15 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          int v21 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *--uint64_t v13 = v21;
        }
        while (v4 != v7);
      }
    }
    *(void *)(a1 + 792) = v13;
    *(void *)(a1 + 800) = v6;
    *(void *)(a1 + 808) = &v12[4 * v11];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v3 = *v2;
    int v6 = v3 + 4;
  }
  *(void *)(a1 + 800) = v6;

  return sub_F96248((unsigned int **)(a1 + 824));
}

BOOL sub_F77544(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 3056);
  uint64_t v3 = *(unsigned int **)(a1 + 3072);
  uint64_t v4 = *(unsigned int **)(a1 + 3064);
  unint64_t v5 = *(unsigned int *)(a1 + 3052);
  if (v2 + v3 - v4 < v5) {
    return 0;
  }
  uint64_t v20 = 0;
  long long v8 = 0uLL;
  long long v19 = 0u;
  if (v4 == v3)
  {
    uint64_t v15 = 0;
  }
  else
  {
    do
    {
      while (1)
      {
        unsigned int v10 = *v4;
        unsigned int v18 = v10;
        uint64_t v11 = *(void *)(a1 + 928);
        unsigned int v12 = *(_DWORD *)(v11 + 24 * v10 + 8);
        if (*a2 >= v12)
        {
          int v13 = *(_DWORD *)(v11 + 24 * v10 + 12);
          if (v12 < *a2 || (int)a2[1] >= v13) {
            break;
          }
        }
        sub_745A4((uint64_t)&v19, &v18);
        if (++v4 == v3) {
          goto LABEL_12;
        }
      }
      ++*(_DWORD *)(a1 + 3056);
      ++v4;
    }
    while (v4 != v3);
LABEL_12:
    uint64_t v3 = *(unsigned int **)(a1 + 3064);
    long long v8 = v19;
    uint64_t v15 = v20;
    LODWORD(v2) = *(_DWORD *)(a1 + 3056);
    LODWORD(v5) = *(_DWORD *)(a1 + 3052);
  }
  *(_OWORD *)(a1 + 3064) = v8;
  uint64_t v16 = *(void *)(a1 + 3080);
  *(void *)(a1 + 3080) = v15;
  *(void *)&long long v19 = v3;
  uint64_t v20 = v16;
  BOOL v6 = v2 >= v5;
  if (v3)
  {
    *((void *)&v19 + 1) = v3;
    operator delete(v3);
  }
  return v6;
}

void sub_F7767C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F77698(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  if (!*(unsigned char *)(a1 + 3048)) {
    return 4294967294;
  }
  sub_F77C3C(a1, a2, (uint64_t *)a3, a4);
  uint64_t v7 = *(void *)(a1 + 3032);
  uint64_t v8 = *(void *)(v7 + 24);
  int v38 = *(_DWORD *)(v7 + 4224);
  unint64_t v39 = sub_F968AC(v8, HIDWORD(*a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32), (*a2 & 2) == 0, &v38);
  if (v39 > 0xFFFFFFFEFFFFFFFFLL || v39 == 0) {
    return 0;
  }
  LOWORD(v38) = sub_F96A54(v7 + 24, (unint64_t *)a2, &v39);
  if ((_WORD)v38 == 0xFFFF) {
    return 0;
  }
  sub_F96B60(*(void *)(v7 + 8), (unsigned int *)&v39, (unsigned __int16 *)&v38, v7 + 4304);
  uint64_t v10 = *(void *)(v7 + 4304);
  uint64_t v11 = *(void *)(v7 + 4312);
  if (v10 != v11)
  {
    while (1)
    {
      unsigned int v16 = *(_DWORD *)(a1 + 1040);
      if (v16 != -1)
      {
        int v17 = *(_DWORD *)(v10 + 16);
        if (v17 != -1
          && *(_DWORD *)(v10 + 20) != 0x7FFFFFFF
          && *(void *)(v10 + 24) != 0x7FFFFFFFFFFFFFFFLL
          && v17 + *(_DWORD *)a3 > v16)
        {
          goto LABEL_11;
        }
      }
      unint64_t v18 = sub_F780E4((int32x2_t *)a1, (unsigned int *)v10);
      unint64_t v19 = v18;
      int v20 = *(_DWORD *)(v10 + 16);
      if (v20 == -1
        || (int v21 = *(_DWORD *)(v10 + 20), v21 == 0x7FFFFFFF)
        || *(void *)(v10 + 24) == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v12 = *(void *)(a1 + 3904);
        unint64_t v13 = v18 >> 6;
        uint64_t v14 = 1 << v18;
        uint64_t v15 = *(void *)(v12 + 8 * (v18 >> 6));
        if ((v15 & (1 << v18)) == 0)
        {
          uint64_t v25 = *(void *)(a1 + 24) + 32 * v18;
          BOOL v26 = *(void **)v25;
          unint64_t v27 = *(void **)(v25 + 8);
          if (*(void **)v25 != v27)
          {
            do
            {
              LODWORD(v39) = 0;
              sub_F936B4(a1 + 816, v26, (int *)&v39);
              sub_F948C0((int32x2_t *)(a1 + 816));
              v26 += 10;
            }
            while (v26 != v27);
            uint64_t v12 = *(void *)(a1 + 3904);
            uint64_t v15 = *(void *)(v12 + 8 * v13);
          }
          *(void *)(v12 + 8 * v13) = v15 | v14;
        }
        ++*(void *)(a1 + 3936);
        goto LABEL_11;
      }
      if (!*(unsigned char *)(a1 + 3049)) {
        goto LABEL_42;
      }
      int v22 = *(_DWORD *)(a1 + 1044);
      if (v22 != 0x7FFFFFFF && v21 + *(_DWORD *)(a3 + 4) > v22) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(*(void *)(a1 + 3880) + 40 * v18 + 32) != -1) {
        goto LABEL_42;
      }
      v23.n128_f64[0] = sub_F78308(*(void *)(a1 + 3032), (unsigned int *)v10, (uint64_t)&v39);
      int v24 = v41;
      if (v41 != -1) {
        break;
      }
      uint64_t v28 = *(void *)(a1 + 3904);
      unint64_t v29 = v19 >> 6;
      uint64_t v30 = 1 << v19;
      uint64_t v31 = *(void *)(v28 + 8 * (v19 >> 6));
      if ((v31 & (1 << v19)) == 0)
      {
        uint64_t v32 = *(void *)(a1 + 24) + 32 * v19;
        uint64_t v34 = *(void **)v32;
        long long v33 = *(void **)(v32 + 8);
        if (*(void **)v32 != v33)
        {
          do
          {
            int v38 = 0;
            sub_F936B4(a1 + 816, v34, &v38);
            sub_F948C0((int32x2_t *)(a1 + 816));
            v34 += 10;
          }
          while (v34 != v33);
          uint64_t v28 = *(void *)(a1 + 3904);
          uint64_t v30 = 1 << v19;
          unint64_t v29 = v19 >> 6;
          uint64_t v31 = *(void *)(v28 + 8 * (v19 >> 6));
        }
        *(void *)(v28 + 8 * v29) = v31 | v30;
      }
      ++*(void *)(a1 + 3928);
      if (!v41) {
        goto LABEL_37;
      }
LABEL_40:
      if (v24 != -1)
      {
        int v20 = *(_DWORD *)(v10 + 16);
        int v21 = *(_DWORD *)(v10 + 20);
LABEL_42:
        unint64_t v39 = (v20 + *(_DWORD *)a3) | ((unint64_t)(v21 + *(_DWORD *)(a3 + 4)) << 32);
        sub_F785AC(a1, a2, (unsigned int *)&v39, v19, a4, *(_DWORD *)(v10 + 8), 0, 1);
      }
LABEL_11:
      v10 += 32;
      if (v10 == v11) {
        return *(unsigned int *)(*(void *)(a1 + 3032) + 4228);
      }
    }
    __n128 v23 = sub_F91EC0(*(void *)(a1 + 3880) + 40 * v19, (uint64_t *)&v39);
    if (v41) {
      goto LABEL_40;
    }
LABEL_37:
    uint64_t v35 = v40;
    if (v40)
    {
      if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, __n128))v35->__on_zero_shared)(v35, v23);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    goto LABEL_40;
  }
  return *(unsigned int *)(*(void *)(a1 + 3032) + 4228);
}

void sub_F77AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_F78528((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_F77AB8(uint64_t a1, void *a2, int *a3, uint64_t a4, char a5, unsigned int *a6)
{
  unsigned int v17 = *a6;
  if (v17)
  {
    uint64_t v11 = a1 + 1064;
    do
    {
      if (sub_F963A0(**(void **)(a1 + 8), HIDWORD(*a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32), &v17))
      {
        unint64_t v12 = sub_F968AC(**(void **)(a1 + 8), HIDWORD(*a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32), (*a2 & 2) == 0, &v17);
        unint64_t v16 = v12;
        if (v12) {
          BOOL v13 = v12 >= 0xFFFFFFFF00000000;
        }
        else {
          BOOL v13 = 1;
        }
        if (v13)
        {
          int v14 = *(_DWORD *)(a1 + 20);
          if (v14 != -1 && v17 == v14) {
            return 0xFFFFFFFFLL;
          }
        }
        else if (sub_F953E4(v11, &v16) == -1 && sub_F953E4(*(void *)(a1 + 976) + 800, &v16) == -1)
        {
          if (*(unsigned char *)(a1 + 3048) && v17 < *(_DWORD *)(*(void *)(a1 + 3032) + 4224)) {
            return 0;
          }
          if (!*(unsigned char *)(*(void *)a1 + 9585)
            || !sub_FA4908(*(void *)a1 + 4296, (unsigned int *)&v16, a3, a4, a5))
          {
            return v17;
          }
        }
      }
      --v17;
    }
    while (v17);
  }
  return 0;
}

void sub_F77C3C(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  long long v37 = a2;
  if (*(unsigned char *)(a1 + 3048))
  {
    sub_F78AB8((int32x2_t *)a1, a2);
    a2 = v37;
  }
  sub_F97D2C(*(void *)(a1 + 976) + 24, a2, v38);
  if (v38[0])
  {
    sub_F97D2C(*(void *)(a1 + 976) + 24, v37, v38);
    unint64_t v5 = *(uint64_t **)(v39 + 8);
    long long v33 = *(uint64_t **)(v39 + 16);
    BOOL v6 = v37;
    if (v5 != v33)
    {
      do
      {
        long long v36 = v5;
        uint64_t v7 = (void *)(**(void **)(a1 + 976) + 32 * *v5);
        uint64_t v8 = -858993459 * ((v7[1] - *v7) >> 4);
        if (v8)
        {
          for (uint64_t i = 0; i != v8; ++i)
          {
            uint64_t v10 = (uint64_t *)(*v7 + 80 * i);
            unint64_t v11 = *v10;
            if (*v10 == *v6)
            {
              int32x2_t v12 = *(int32x2_t *)a1;
              uint64_t v13 = *v7 + 80 * i;
              unsigned int v16 = *(_DWORD *)(v13 + 8);
              uint64_t v14 = v13 + 8;
              unsigned int v15 = v16;
              uint64_t v17 = *(void *)(a1 + 2968);
              unint64_t v18 = HIDWORD(v11);
              uint64_t v19 = (v11 << 47) & 0x1000000000000;
              unint64_t v20 = v11 >> 16;
              if (*(unsigned char *)(*(void *)a1 + 9586))
              {
                uint64_t v21 = 0;
                unint64_t v22 = 0x2127599BF4325C37 * ((v11 & 0xFFFFFFFFFFFF0000 | HIWORD(v19)) ^ (v11 >> 23));
                for (unint64_t j = v22 ^ (v22 >> 47); ; unint64_t j = v21 + v24)
                {
                  uint64_t v24 = j & (*(void *)(*(void *)&v12 + 9648) - 1);
                  unint64_t v25 = *(void *)(*(void *)(*(void *)&v12 + 9664) + 8 * v24);
                  if (*(_DWORD *)(*(void *)&v12 + 9656) == v25
                    && *(unsigned __int16 *)(*(void *)a1 + 9660) == WORD2(v25)
                    && (HIWORD(v25) & 1) != (*(unsigned char *)(*(void *)a1 + 9662) == 0))
                  {
                    break;
                  }
                  if ((!*(void *)(*(void *)&v12 + 9632)
                     || *(_DWORD *)(*(void *)&v12 + 9624) != v25
                     || *(unsigned __int16 *)(*(void *)a1 + 9628) != WORD2(v25)
                     || (HIWORD(v25) & 1) == (*(unsigned char *)(*(void *)a1 + 9630) == 0))
                    && v18 == v25
                    && (unsigned __int16)v20 == WORD2(v25)
                    && (v19 != 0) != (HIWORD(v25) & 1))
                  {
                    if (v24 != -1) {
                      goto LABEL_9;
                    }
                    break;
                  }
                  ++v21;
                }
              }
              BOOL v26 = (uint64_t *)(*(void *)&v12 + 4232);
              sub_ED7040(*(void *)&v12 + 8, (v18 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)(unsigned __int16)v20 << 32) | v19) ^ 0x1000000000000, (uint64_t)v38);
              unint64_t v27 = sub_F17510(v26, v38, v15, v17);
              BOOL v6 = v37;
              int v28 = v27;
              unint64_t v29 = v27 & 0xFFFFFFFF00000000;
              if (v27 != -1 && v29 != 0x7FFFFFFF00000000)
              {
                uint64_t v31 = *a3;
                unint64_t v32 = sub_F17140((uint64_t *)(*(void *)a1 + 4232), v10, v14, *(void *)(a1 + 2968));
                BOOL v6 = v37;
                if (v32 != -1 && (v32 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
                {
                  v38[0] = (int *)((v31 + v29 + (v32 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (v31 + v32 + v28));
                  sub_F785AC(a1, v37, (unsigned int *)v38, *v36, a4, i, 0, 0);
                  BOOL v6 = v37;
                }
              }
            }
LABEL_9:
            ;
          }
        }
        unint64_t v5 = v36 + 1;
      }
      while (v36 + 1 != v33);
    }
  }
}

unint64_t sub_F77FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 9586)
    || sub_F54008(a1 + 9672, a2) == -1
    && (unint64_t v6 = *(void *)(a2 + 32),
        uint64_t v7 = 4 * (unsigned __int16)*(_DWORD *)(a2 + 80),
        unint64_t v12 = (((((v6 >> 16) & 0xFFFF0000 | (v6 << 32) | (2 * ((v6 & 0xFF000000000000) == 0))) + v7) << 16) & 0xFFFF00000000 | ((((v6 >> 16) & 0xFFFF0000 | (v6 << 32) | (2 * ((v6 & 0xFF000000000000) == 0))) + v7) >> 32) | ((unint64_t)((v6 & 0xFF000000000000) == 0) << 48)) ^ 0x1000000000000,
        sub_F57414(a1 + 9592, &v12) == -1))
  {
    unint64_t v10 = sub_F178C0((uint64_t *)(a1 + 4232), (int **)a2, 0x3B9ACA00u, a3);
    unint64_t v8 = v10 & 0xFFFFFFFF00000000;
    uint64_t v9 = v10;
  }
  else
  {
    unint64_t v8 = 0x7FFFFFFF00000000;
    uint64_t v9 = 0xFFFFFFFFLL;
  }
  return v8 | v9;
}

uint64_t sub_F780E4(int32x2_t *a1, unsigned int *a2)
{
  uint64_t v4 = (uint64_t)&a1[386];
  sub_F78DE8((uint64_t)&a1[386], a2, v21);
  if (v21[0]) {
    return v21[3][1];
  }
  int32x2_t v6 = a1[4];
  int32x2_t v7 = a1[3];
  int32x2_t v8 = a1[379];
  sub_F98E98(*(void *)(*(void *)&v8 + 8), a2, *(void *)&v8 + 4256);
  sub_F9906C(*(void *)&v8 + 40, (uint64_t *)(*(void *)&v8 + 4256), *(_DWORD *)(*(void *)&v8 + 4232), 0, (uint64_t)&__p);
  unint64_t v22 = a1;
  sub_F770A8(a1 + 3, (uint64_t **)&__p, 0, (void **)&v22);
  unint64_t v5 = (uint64_t)(*(void *)&v6 - *(void *)&v7) >> 5;
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }
  sub_F99838(v4, a2, (uint64_t)&__p);
  uint64_t v9 = __p;
  if (v20)
  {
    unint64_t v10 = (void *)(*((void *)__p + 1) + 16 * (void)v19);
    *unint64_t v10 = *(void *)a2;
    v10[1] = -1;
  }
  *(void *)(v9[1] + 16 * (void)v19 + 8) = v5;
  sub_29603C((void **)&a1[482], a2);
  unint64_t v11 = (unint64_t)a1[489];
  int32x2_t v12 = a1[490];
  if (v11 == *(void *)&v12 << 6)
  {
    if ((uint64_t)(v11 + 1) < 0) {
      sub_2E00();
    }
    unint64_t v13 = *(void *)&v12 << 7;
    if (v13 <= (v11 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v11 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v14 = v13;
    }
    else {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_3D110((uint64_t)&a1[488], v14);
    unint64_t v11 = (unint64_t)a1[489];
  }
  a1[489] = (int32x2_t)(v11 + 1);
  *(void *)(*(void *)&a1[488] + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v11);
  int32x2_t v15 = a1[486];
  if (*(void *)&v15 >= *(void *)&a1[487])
  {
    unsigned int v16 = sub_F99F7C((void **)&a1[485]);
  }
  else
  {
    *(void *)(*(void *)&v15 + 32) = 0;
    *(_OWORD *)*(void *)&int32x2_t v15 = 0u;
    *(_OWORD *)(*(void *)&v15 + 16) = 0u;
    *(_DWORD *)(*(void *)&v15 + 32) = -1;
    unsigned int v16 = (char *)(*(void *)&v15 + 40);
  }
  a1[486] = (int32x2_t)v16;
  if (v5 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&a1[117] - *(void *)&a1[116]) >> 3)) {
    sub_F9A14C((char **)&a1[116]);
  }
  return v5;
}

void sub_F782EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_F78308@<D0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(unsigned char *)(a1 + 4249)) {
    goto LABEL_17;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v6 + 3880)) {
    goto LABEL_3;
  }
  unint64_t v18 = sub_3823E0(v6 + 8, *a2, 1);
  if (!v18) {
    goto LABEL_3;
  }
  uint64_t v19 = &v18[-*(int *)v18];
  if (*(unsigned __int16 *)v19 < 7u) {
    goto LABEL_3;
  }
  uint64_t v7 = *((unsigned __int16 *)v19 + 3);
  if (!v7) {
    goto LABEL_4;
  }
  char v20 = &v18[v7 + *(unsigned int *)&v18[v7]];
  uint64_t v21 = a2[1];
  if (*(_DWORD *)v20 <= v21)
  {
LABEL_3:
    uint64_t v7 = 0;
    goto LABEL_4;
  }
  uint64_t v7 = (uint64_t)&v20[4 * v21 + 4 + *(unsigned int *)&v20[4 * v21 + 4]];
LABEL_4:
  int32x2_t v8 = (unsigned __int16 *)(v7 - *(int *)v7);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    unint64_t v10 = (int *)(v7 + v9 + *(unsigned int *)(v7 + v9));
    unint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
    unsigned int v12 = *v11;
    if (v12 < 5) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v10 = 0;
    unint64_t v11 = (_WORD *)(&loc_1120530 + 1);
    unsigned int v12 = *(unsigned __int16 *)((char *)&loc_1120530 + 1);
    if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
      goto LABEL_17;
    }
  }
  uint64_t v13 = v11[2];
  if (v11[2]) {
    v13 += (uint64_t)v10 + *(unsigned int *)((char *)v10 + v13);
  }
  if (v12 >= 9)
  {
    uint64_t v14 = v11[4];
    if (v14 && v13 != 0)
    {
      unint64_t v22 = (unsigned int *)((char *)v10 + v14);
      uint64_t v23 = *v22;
      *(void *)a3 = v13;
      *(void *)(a3 + 8) = (char *)v22 + v23;
      *(void *)&double result = 0xFFFFFFFFLL;
      *(void *)(a3 + 16) = 0xFFFFFFFFLL;
      *(_DWORD *)(a3 + 24) = -1;
      *(_DWORD *)(a3 + 32) = 1;
      return result;
    }
  }
LABEL_17:
  sub_F973F0(a1, a2, &v25);
  if (!v25)
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = -1;
    uint64_t v17 = v26;
    if (!v26) {
      return result;
    }
    goto LABEL_23;
  }
  unsigned int v16 = v26;
  *(void *)a3 = v25;
  *(void *)(a3 + 8) = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a3 + 32) = 0;
  uint64_t v17 = v26;
  if (v26)
  {
LABEL_23:
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return result;
}

uint64_t sub_F78528(uint64_t result)
{
  uint64_t v1 = result;
  if (!*(_DWORD *)(result + 32))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(result + 8);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

void sub_F785AC(uint64_t a1, void *a2, unsigned int *a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  uint64_t v59 = a4;
  unsigned int v8 = *(_DWORD *)(a1 + 1040);
  unsigned int v9 = *a3;
  if (v8 != -1 && v9 > v8) {
    return;
  }
  int v11 = a8;
  int v13 = a6;
  int v14 = a5;
  uint64_t v19 = *(void *)(a1 + 928);
  char v20 = (void *)(v19 + 24 * a4);
  if (!*v20)
  {
    unint64_t v22 = *(char **)(a1 + 960);
    unint64_t v23 = *(void *)(a1 + 968);
    if ((unint64_t)v22 < v23)
    {
      *(void *)unint64_t v22 = a4;
      uint64_t v24 = v22 + 8;
      int v14 = a5;
      *(void *)(a1 + 960) = v24;
      if (!*(unsigned char *)(a1 + 3048))
      {
LABEL_11:
        if (!*v20) {
          goto LABEL_18;
        }
        unsigned int v9 = *a3;
        unsigned int v21 = *(_DWORD *)(v19 + 24 * a4 + 8);
        if (*a3 < v21) {
          goto LABEL_18;
        }
LABEL_13:
        if (v21 < v9 || (int)a3[1] >= *(_DWORD *)(v19 + 24 * a4 + 12)) {
          return;
        }
        goto LABEL_18;
      }
LABEL_10:
      sub_3A998(a1 + 3064, &v59);
      goto LABEL_11;
    }
    uint64_t v34 = *(char **)(a1 + 952);
    int64_t v35 = v22 - v34;
    uint64_t v36 = (v22 - v34) >> 3;
    unint64_t v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v38 = v23 - (void)v34;
    if (v38 >> 2 > v37) {
      unint64_t v37 = v38 >> 2;
    }
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v39 = v37;
    }
    if (v39)
    {
      if (v39 >> 61) {
        sub_188D718();
      }
      unint64_t v40 = operator new(8 * v39);
      int64_t v35 = v22 - v34;
      uint64_t v36 = (v22 - v34) >> 3;
      int v41 = &v40[8 * v36];
      unint64_t v42 = &v40[8 * v39];
      *int v41 = a4;
      uint64_t v43 = (uint64_t)(v41 + 1);
      int64_t v44 = v22 - v34;
      if (v22 != v34)
      {
LABEL_43:
        unint64_t v45 = v44 - 8;
        int v13 = a6;
        if (v45 < 0x58) {
          goto LABEL_60;
        }
        if ((unint64_t)(v22 - v40 - v35) < 0x20) {
          goto LABEL_60;
        }
        uint64_t v46 = (v45 >> 3) + 1;
        uint64_t v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v48 = &v22[-v47];
        int v41 = (void *)((char *)v41 - v47);
        uint64_t v49 = &v40[8 * v36 - 16];
        int v50 = v22 - 16;
        uint64_t v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v52 = *(_OWORD *)v50;
          *(v49 - 1) = *((_OWORD *)v50 - 1);
          *uint64_t v49 = v52;
          v49 -= 2;
          v50 -= 32;
          v51 -= 4;
        }
        while (v51);
        unint64_t v22 = v48;
        if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_60:
          do
          {
            uint64_t v53 = *((void *)v22 - 1);
            v22 -= 8;
            *--int v41 = v53;
          }
          while (v22 != v34);
        }
        *(void *)(a1 + 952) = v41;
        *(void *)(a1 + 960) = v43;
        *(void *)(a1 + 968) = v42;
        if (v34) {
          goto LABEL_50;
        }
        goto LABEL_51;
      }
    }
    else
    {
      unint64_t v40 = 0;
      int v41 = (void *)(8 * v36);
      unint64_t v42 = 0;
      *(void *)(8 * v36) = a4;
      uint64_t v43 = 8 * v36 + 8;
      int64_t v44 = v22 - v34;
      if (v22 != v34) {
        goto LABEL_43;
      }
    }
    int v13 = a6;
    *(void *)(a1 + 952) = v41;
    *(void *)(a1 + 960) = v43;
    *(void *)(a1 + 968) = v42;
    if (v34)
    {
LABEL_50:
      uint64_t v54 = v43;
      operator delete(v34);
      uint64_t v43 = v54;
    }
LABEL_51:
    int v11 = a8;
    int v14 = a5;
    *(void *)(a1 + 960) = v43;
    if (!*(unsigned char *)(a1 + 3048)) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  unsigned int v21 = *(_DWORD *)(v19 + 24 * a4 + 8);
  if (v9 >= v21) {
    goto LABEL_13;
  }
LABEL_18:
  uint64_t v26 = v19 + 24 * a4;
  *(void *)(v26 + 8) = *(void *)a3;
  *char v20 = *a2;
  if (a7) {
    int v27 = 0x40000000;
  }
  else {
    int v27 = 0;
  }
  unsigned int v28 = v27 & 0xC0000000 | v14 & 0x3FFFFFFF;
  if (v11) {
    unsigned int v29 = 0x80000000;
  }
  else {
    unsigned int v29 = 0;
  }
  *(_DWORD *)(v26 + 16) = v13;
  *(_DWORD *)(v26 + 20) = v28 | v29;
  if (!*(unsigned char *)(a1 + 3048))
  {
    uint64_t v30 = (uint64_t *)(a1 + 984);
    unsigned int v58 = *a3;
    uint64_t v31 = *(void *)(a1 + 1008);
    if (v59 >= (unint64_t)((*(void *)(a1 + 1016) - v31) >> 2)
      || *(_DWORD *)(v31 + 4 * v59) == -1)
    {
      sub_F97E70((uint64_t)v30, v59, &v58);
    }
    else
    {
      sub_F98124(v30, v59, &v58);
    }
    if ((uint64_t)(*(void *)(*(void *)(a1 + 976) + 8) - **(void **)(a1 + 976)) >> 5 == (uint64_t)(*(void *)(a1 + 960) - *(void *)(a1 + 952)) >> 3)
    {
      unsigned int v32 = *(_DWORD *)(a1 + 1040);
      unsigned int v33 = *(_DWORD *)(*(void *)(a1 + 984) + 4);
      if (v32 == -1 || v33 < v32) {
        *(_DWORD *)(a1 + 1040) = v33;
      }
    }
  }
}

uint64_t sub_F788FC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_F97750(a1, a2, &v23);
  if (v23)
  {
    uint64_t v6 = v24;
    uint64_t v7 = *(void *)(a1 + 768) + 80 * *(unsigned int *)(v24 + 8);
    unsigned int v10 = *(_DWORD *)(v7 + 8);
    uint64_t v8 = v7 + 8;
    unsigned int v9 = v10;
    if (*(_DWORD *)a3 >= v10 && (v9 < *(_DWORD *)a3 || *(_DWORD *)(a3 + 4) >= *(_DWORD *)(v8 + 4))) {
      return 0;
    }
    ++*(_DWORD *)(a1 + 816);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)a3;
    long long v13 = *(_OWORD *)(a3 + 16);
    long long v14 = *(_OWORD *)(a3 + 32);
    long long v15 = *(_OWORD *)(a3 + 48);
    *(_DWORD *)(v8 + 64) = *(_DWORD *)(a3 + 64);
    *(_OWORD *)(v8 + 32) = v14;
    *(_OWORD *)(v8 + 48) = v15;
    *(_OWORD *)(v8 + 16) = v13;
    unsigned int v16 = (uint64_t *)(a1 + 824);
    unint64_t v17 = *(unsigned int *)(v6 + 8);
    uint64_t v18 = *(void *)(a1 + 848);
    if (v17 < (*(void *)(a1 + 856) - v18) >> 2 && *(_DWORD *)(v18 + 4 * v17) != -1) {
      goto LABEL_16;
    }
LABEL_19:
    sub_F97874((uint64_t)v16, v17, (void *)a3);
    return 1;
  }
  ++*(_DWORD *)(a1 + 816);
  unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 776) - *(void *)(a1 + 768)) >> 4);
  sub_EE1844(a1, a2, (uint64_t)&v25);
  uint64_t v20 = v26;
  uint64_t v21 = *(void *)(v25 + 8);
  if (v27) {
    *(void *)(v21 + 16 * v26) = *a2;
  }
  *(_DWORD *)(v21 + 16 * v20 + 8) = v19;
  sub_BF6964((char **)(a1 + 768), a2, (long long *)a3);
  unsigned int v16 = (uint64_t *)(a1 + 824);
  uint64_t v22 = *(void *)(a1 + 848);
  if (v19 >= (unint64_t)((*(void *)(a1 + 856) - v22) >> 2)
    || *(_DWORD *)(v22 + 4 * v19) == -1)
  {
    LODWORD(v17) = v19;
    goto LABEL_19;
  }
  LODWORD(v17) = v19;
LABEL_16:
  sub_F97B30(v16, v17, a3);
  return 1;
}

void sub_F78AB8(int32x2_t *a1, _DWORD *a2)
{
  uint64_t v3 = (void *)a1[379];
  sub_F9A298(v3[1], a2, v3 + 535);
  uint64_t v4 = (unsigned char *)v3[535];
  unint64_t v5 = (unsigned char *)v3[536];
  int64_t v6 = v5 - v4;
  if (v5 != v4)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    uint64_t v7 = (char *)operator new(v5 - v4);
    memcpy(v7, v4, v6);
    uint64_t v8 = 0;
    uint64_t v9 = 8 * (v6 >> 3);
    do
    {
      sub_F780E4(a1, (unsigned int *)&v7[v8]);
      v8 += 8;
    }
    while (v9 != v8);
    operator delete(v7);
  }
}

void sub_F78B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F78BBC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(unsigned int *)(*a1 + 3872);
  if (v2 != -1) {
    return v2;
  }
  uint64_t v2 = 1;
  uint64_t v4 = sub_F93238(*a1, 1u, 1);
  if (!v4) {
    return v2;
  }
  unint64_t v5 = &v4[-*(int *)v4];
  unsigned int v6 = *(unsigned __int16 *)v5;
  if (v6 < 0xB)
  {
    if (v6 < 9) {
      return 1;
    }
  }
  else if (*((_WORD *)v5 + 5))
  {
    uint64_t v7 = &v4[*((unsigned __int16 *)v5 + 5) + *(unsigned int *)&v4[*((unsigned __int16 *)v5 + 5)]];
    uint64_t v8 = &v7[-*(int *)v7];
    if (*(unsigned __int16 *)v8 >= 5u && (uint64_t v9 = *((unsigned __int16 *)v8 + 2)) != 0) {
      return v7[v9];
    }
    else {
      return 0;
    }
  }
  uint64_t v10 = *((unsigned __int16 *)v5 + 4);
  if (!v10) {
    return 1;
  }
  int v11 = (int *)sub_F930D4((unsigned int *)&v4[v10 + *(unsigned int *)&v4[v10]], 0);
  unsigned int v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 5u && (uint64_t v13 = v12[2]) != 0)
  {
    uint64_t v14 = *((unsigned __int8 *)v11 + v13);
    *(_DWORD *)(v1 + 3872) = v14;
    return v14;
  }
  else
  {
    *(_DWORD *)(v1 + 3872) = 0;
    return 0;
  }
}

BOOL sub_F78CF8(uint64_t a1, void *a2, int a3, int *a4, uint64_t a5, char a6)
{
  int v15 = a3;
  uint64_t v11 = a1 + 4296;
  unint64_t v14 = sub_F968AC(*(void *)(a1 + 4280), HIDWORD(*a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32), (*a2 & 2) == 0, &v15);
  if (sub_FA4908(v11, (unsigned int *)&v14, a4, a5, a6)) {
    return 1;
  }
  unint64_t v13 = sub_F968AC(*(void *)(a1 + 4280), HIDWORD(*a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32), (*a2 >> 1) & 1, &v15);
  return sub_FA4908(v11, (unsigned int *)&v13, a4, a5, a6);
}

uint64_t sub_F78DE8@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v3 = 0;
  uint64_t v4 = *a2;
  unint64_t v5 = __ROR8__(*a2, 32);
  unint64_t v6 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v5 ^ (v5 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v5 ^ (v5 >> 33))) >> 33));
  unint64_t v7 = (v6 ^ ~(v6 >> 33)) + ((v6 ^ (v6 >> 33)) << 21);
  unint64_t v8 = 21 * ((265 * (v7 ^ (v7 >> 24))) ^ ((265 * (v7 ^ (v7 >> 24))) >> 14));
  unint64_t v9 = 2147483649u * (v8 ^ (v8 >> 28));
  uint64_t v10 = (uint64_t *)(result
                  + 48
                  * (((((unsigned __int16)(v8 ^ (v8 >> 28)) >> 8) ^ ((-2147483647
                                                                                     * (v8 ^ (v8 >> 28))) >> 16)) ^ ((-2147483647 * (v8 ^ (v8 >> 28))) >> 24)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  uint64_t v13 = *v10;
  uint64_t v14 = 0x101010101010101 * (v9 & 0x7F);
  uint64_t v15 = HIDWORD(*a2);
  while (1)
  {
    unint64_t v16 = v11 & v12;
    uint64_t v17 = *(void *)(v13 + v16);
    unint64_t v18 = ((v17 ^ v14) - 0x101010101010101) & ~(v17 ^ v14) & 0x8080808080808080;
    if (v18) {
      break;
    }
LABEL_8:
    if ((v17 & (~v17 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_11;
    }
    v3 += 8;
    unint64_t v11 = v3 + v16;
  }
  while (1)
  {
    unint64_t v19 = (v16 + (__clz(__rbit64(v18)) >> 3)) & v12;
    uint64_t v20 = (uint64_t *)(v10[1] + 16 * v19);
    if (*(_DWORD *)v20 == v4 && *((_DWORD *)v20 + 1) == v15) {
      break;
    }
    v18 &= v18 - 1;
    if (!v18) {
      goto LABEL_8;
    }
  }
  if (v12 == v19)
  {
LABEL_11:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    a3[4] = 0;
    return result;
  }
  *a3 = v10;
  a3[1] = (uint64_t *)(result + 768);
  a3[2] = (uint64_t *)(v13 + v19);
  a3[3] = v20;
  a3[4] = (uint64_t *)(v13 + v12);
  return result;
}

uint64_t sub_F78F2C(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a2 + 4280;
  *(void *)(a1 + 16) = -1;
  sub_F92034((void *)(a1 + 24), a2);
  *(void *)(a1 + 944) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  unint64_t v5 = (char *)operator new(0x18uLL);
  *(void *)(a1 + 928) = v5;
  *(void *)(a1 + 944) = v5 + 24;
  *(void *)unint64_t v5 = 0;
  *(_OWORD *)(v5 + 8) = xmmword_20E7B70;
  *(void *)(a1 + 936) = v5 + 24;
  if (a3) {
    uint64_t v6 = 128;
  }
  else {
    uint64_t v6 = 2;
  }
  *(_DWORD *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  unint64_t v7 = (char *)operator new(4 * v6);
  *(void *)(a1 + 1008) = v7;
  *(void *)(a1 + 1016) = v7;
  *(void *)(a1 + 1024) = &v7[4 * v6];
  unint64_t v8 = (char *)operator new(0x3F8uLL);
  *(void *)(a1 + 984) = v8;
  *(void *)(a1 + 992) = v8;
  *(void *)(a1 + 1000) = v8 + 1016;
  *(void *)(a1 + 1040) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 1048) = 0;
  *(unsigned char *)(a1 + 1052) = 0;
  sub_F92190(a1 + 1056, *(uint64_t **)(a1 + 8));
  *(void *)(a1 + 1184) = 0;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(void *)(a1 + 1192) = -1;
  if (a3) {
    unsigned int v9 = 0x10000;
  }
  else {
    unsigned int v9 = 0x2000;
  }
  sub_F9ADB8((void *)(a1 + 1200), v9);
  v14[0] = 256;
  v14[1] = (unint64_t)&v13;
  v14[2] = (unint64_t)&v12;
  v14[3] = (unint64_t)&v11;
  sub_F91654((void *)(a1 + 2080), v14);
  sub_F92190(a1 + 2848, *(uint64_t **)(a1 + 8));
  *(_DWORD *)(a1 + 2960) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 2964) = 0;
  *(void *)(a1 + 3016) = 0;
  *(_OWORD *)(a1 + 2968) = 0u;
  *(_OWORD *)(a1 + 2984) = 0u;
  *(_OWORD *)(a1 + 3000) = 0u;
  *(_DWORD *)(a1 + 3024) = -1;
  *(_WORD *)(a1 + 3048) = 256;
  *(_OWORD *)(a1 + 3032) = 0u;
  *(void *)(a1 + 3052) = 0xFFFFFFFFLL;
  *(void *)(a1 + 3064) = 0;
  *(void *)(a1 + 3080) = 0;
  *(void *)(a1 + 3072) = 0;
  *(void *)(a1 + 3088) = &unk_20E1710;
  *(void *)(a1 + 3128) = 0;
  *(void *)(a1 + 3112) = 0;
  *(void *)(a1 + 3096) = 0;
  *(void *)(a1 + 3104) = 0;
  *(void *)(a1 + 3136) = &unk_20E1710;
  *(void *)(a1 + 3176) = 0;
  *(void *)(a1 + 3160) = 0;
  *(void *)(a1 + 3144) = 0;
  *(void *)(a1 + 3152) = 0;
  *(void *)(a1 + 3184) = &unk_20E1710;
  *(void *)(a1 + 3224) = 0;
  *(void *)(a1 + 3208) = 0;
  *(void *)(a1 + 3192) = 0;
  *(void *)(a1 + 3200) = 0;
  *(void *)(a1 + 3232) = &unk_20E1710;
  *(void *)(a1 + 3272) = 0;
  *(void *)(a1 + 3256) = 0;
  *(void *)(a1 + 3240) = 0;
  *(void *)(a1 + 3248) = 0;
  *(void *)(a1 + 3280) = &unk_20E1710;
  *(void *)(a1 + 3320) = 0;
  *(void *)(a1 + 3304) = 0;
  *(void *)(a1 + 3288) = 0;
  *(void *)(a1 + 3296) = 0;
  *(void *)(a1 + 3328) = &unk_20E1710;
  *(void *)(a1 + 3368) = 0;
  *(void *)(a1 + 3352) = 0;
  *(void *)(a1 + 3336) = 0;
  *(void *)(a1 + 3344) = 0;
  *(void *)(a1 + 3376) = &unk_20E1710;
  *(void *)(a1 + 3416) = 0;
  *(void *)(a1 + 3400) = 0;
  *(void *)(a1 + 3384) = 0;
  *(void *)(a1 + 3392) = 0;
  *(void *)(a1 + 3424) = &unk_20E1710;
  *(void *)(a1 + 3464) = 0;
  *(void *)(a1 + 3448) = 0;
  *(void *)(a1 + 3432) = 0;
  *(void *)(a1 + 3440) = 0;
  *(void *)(a1 + 3472) = &unk_20E1710;
  *(void *)(a1 + 3512) = 0;
  *(void *)(a1 + 3488) = 0;
  *(void *)(a1 + 3480) = 0;
  *(void *)(a1 + 3496) = 0;
  *(void *)(a1 + 3520) = &unk_20E1710;
  *(void *)(a1 + 3560) = 0;
  *(void *)(a1 + 3536) = 0;
  *(void *)(a1 + 3528) = 0;
  *(void *)(a1 + 3544) = 0;
  *(void *)(a1 + 3568) = &unk_20E1710;
  *(void *)(a1 + 3608) = 0;
  *(void *)(a1 + 3584) = 0;
  *(void *)(a1 + 3576) = 0;
  *(void *)(a1 + 3592) = 0;
  *(void *)(a1 + 3616) = &unk_20E1710;
  *(void *)(a1 + 3656) = 0;
  *(void *)(a1 + 3632) = 0;
  *(void *)(a1 + 3624) = 0;
  *(void *)(a1 + 3640) = 0;
  *(void *)(a1 + 3664) = &unk_20E1710;
  *(void *)(a1 + 3704) = 0;
  *(void *)(a1 + 3680) = 0;
  *(void *)(a1 + 3672) = 0;
  *(void *)(a1 + 3688) = 0;
  *(void *)(a1 + 3712) = &unk_20E1710;
  *(void *)(a1 + 3752) = 0;
  *(void *)(a1 + 3728) = 0;
  *(void *)(a1 + 3720) = 0;
  *(void *)(a1 + 3736) = 0;
  *(void *)(a1 + 3760) = &unk_20E1710;
  *(void *)(a1 + 3800) = 0;
  *(void *)(a1 + 3776) = 0;
  *(void *)(a1 + 3768) = 0;
  *(void *)(a1 + 3784) = 0;
  *(void *)(a1 + 3808) = &unk_20E1710;
  *(void *)(a1 + 3824) = 0;
  *(void *)(a1 + 3816) = 0;
  *(void *)(a1 + 3832) = 0;
  *(_OWORD *)(a1 + 3928) = 0u;
  *(_OWORD *)(a1 + 3912) = 0u;
  *(_OWORD *)(a1 + 3896) = 0u;
  *(_OWORD *)(a1 + 3880) = 0u;
  *(_OWORD *)(a1 + 3864) = 0u;
  *(_OWORD *)(a1 + 3848) = 0u;
  return a1;
}

void sub_F7924C(_Unwind_Exception *a1)
{
  uint64_t v7 = v3;
  sub_328138(v7);
  sub_5139D0(v5);
  unsigned int v9 = (void *)v1[146];
  if (v9)
  {
    v1[147] = v9;
    operator delete(v9);
  }
  sub_F7341C(v4);
  sub_3310C((uint64_t)(v1 + 123));
  uint64_t v10 = (void **)(v1 + 116);
  char v11 = *v6;
  if (*v6)
  {
    v1[120] = v11;
    operator delete(v11);
    char v12 = *v10;
    if (!*v10)
    {
LABEL_5:
      sub_BF10E8(v2);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    char v12 = *v10;
    if (!*v10) {
      goto LABEL_5;
    }
  }
  v1[117] = v12;
  operator delete(v12);
  sub_BF10E8(v2);
  _Unwind_Resume(a1);
}

void sub_F7933C(_Unwind_Exception *a1)
{
  sub_BF10E8(v1);
  _Unwind_Resume(a1);
}

void sub_F79354(uint64_t a1)
{
  unsigned int v39 = 0;
  long long __p = 0;
  unint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = (unsigned __int16 *)(*(void *)a1 + 9628);
  uint64_t v4 = *(void *)(*(void *)a1 + 9648);
  if (v4)
  {
    uint64_t v5 = 8 * v4;
    uint64_t v6 = *(unint64_t **)(*(void *)a1 + 9664);
    while (1)
    {
      unint64_t v7 = HIDWORD(*v6);
      if ((*(_DWORD *)(v2 + 9656) != *v6
         || *(unsigned __int16 *)(*(void *)a1 + 9660) != (unsigned __int16)v7
         || (HIWORD(*v6) & 1) == (*(unsigned char *)(*(void *)a1 + 9662) == 0))
        && (!*(void *)(v2 + 9632)
         || *(_DWORD *)(v2 + 9624) != *v6
         || *v3 != (unsigned __int16)v7
         || (HIWORD(*v6) & 1) == (*(unsigned char *)(*(void *)a1 + 9630) == 0)))
      {
        break;
      }
      ++v6;
      v5 -= 8;
      if (!v5) {
        goto LABEL_40;
      }
    }
  }
  else
  {
    uint64_t v6 = *(unint64_t **)(*(void *)a1 + 9664);
  }
  uint64_t v8 = *(void *)(*(void *)a1 + 9664) + 8 * v4;
  if (v6 != (unint64_t *)v8)
  {
    uint64_t v31 = a1 + 2960;
    do
    {
      unint64_t v32 = (*v6 >> 16) & 0xFFFF0000 | (*v6 << 32) | (2 * ((*v6 & 0xFF000000000000) == 0));
      if (v39
        && ((uint64_t v9 = *(void *)a1,
             uint64_t v10 = *(void *)(a1 + 2968),
             sub_ED7040(*(void *)a1 + 8, *v6, (uint64_t)&v40),
             unint64_t v11 = sub_F17510((uint64_t *)(v9 + 4232), &v40, 0x3B9ACA00u, v10),
             v11 == -1)
         || (v11 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000
         || v12 == 0x7FFFFFFFFFFFFFFFLL))
      {
        int v13 = sub_F78BBC(*(uint64_t **)(a1 + 8));
        if (v13 - 1 <= v39
          || sub_F78CF8(*(void *)a1, &v32, v13 - 1, *(int **)(a1 + 2968), v31, *(unsigned char *)(a1 + 2964)))
        {
          sub_F936B4(a1 + 1056, &v32, (int *)&v39);
          sub_F948C0((int32x2_t *)(a1 + 1056));
          LODWORD(v40) = v39 - 1;
          sub_F936B4(a1 + 2848, &v32, (int *)&v40);
          sub_F948C0((int32x2_t *)(a1 + 2848));
          uint64_t v14 = (int *)sub_F968AC(**(void **)(a1 + 8), HIDWORD(v32) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v32) << 32), (v32 & 2) == 0, &v39);
          unint64_t v40 = v14;
          if (__p == v37 || (int *)v37[-1].i64[1] != v14) {
            sub_29603C(&__p, &v40);
          }
          unint64_t v35 = sub_F968AC(**(void **)(a1 + 8), HIDWORD(v32) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v32) << 32), (v32 >> 1) & 1, &v39);
          if (v37[-1].i64[1] != v35) {
            sub_29603C(&__p, &v35);
          }
        }
        else
        {
          LODWORD(v40) = v13 - 2;
          sub_F936B4(a1 + 2848, &v32, (int *)&v40);
          sub_F948C0((int32x2_t *)(a1 + 2848));
        }
      }
      else
      {
        LODWORD(v40) = 0;
        sub_F936B4(a1 + 1056, &v32, (int *)&v40);
        sub_F948C0((int32x2_t *)(a1 + 1056));
      }
      if (++v6 == (unint64_t *)v8) {
        break;
      }
      while (1)
      {
        unint64_t v15 = HIDWORD(*v6);
        if ((*(_DWORD *)(v2 + 9656) != *v6
           || v3[16] != (unsigned __int16)v15
           || (HIWORD(*v6) & 1) == (*((unsigned char *)v3 + 34) == 0))
          && (!*(void *)(v2 + 9632)
           || *(_DWORD *)(v2 + 9624) != *v6
           || *v3 != (unsigned __int16)v15
           || (HIWORD(*v6) & 1) == (*((unsigned char *)v3 + 2) == 0)))
        {
          break;
        }
        if (++v6 == (unint64_t *)v8) {
          goto LABEL_39;
        }
      }
    }
    while (v6 != (unint64_t *)v8);
LABEL_39:
    uint64_t v2 = *(void *)a1;
  }
LABEL_40:
  uint64_t v16 = *(void *)(v2 + 9904);
  uint64_t v17 = v16 + 88 * *(void *)(v2 + 9808);
  unint64_t v40 = (int *)(v2 + 9672);
  uint64_t v41 = v16;
  uint64_t v42 = v17;
  sub_F53EB8(&v40);
  uint64_t v18 = *(void *)(v2 + 9904) + 88 * *(void *)(v2 + 9808);
  unint64_t v32 = v2 + 9672;
  uint64_t v33 = v18;
  uint64_t v34 = v18;
  sub_F53EB8(&v32);
  while (1)
  {
    uint64_t v19 = v41;
    if (v41 == v33) {
      break;
    }
    unint64_t v35 = (((*(void *)(v41 + 32) >> 16) & 0xFFFF0000 | (*(void *)(v41 + 32) << 32) | (2
                                                                                          * ((*(void *)(v41 + 32) & 0xFF000000000000) == 0)))
         + 4 * (unsigned __int16)*(_DWORD *)(v41 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v41 + 84) & 1;
    int v43 = 0;
    sub_F936B4(a1 + 1056, &v35, &v43);
    sub_F948C0((int32x2_t *)(a1 + 1056));
    unint64_t v35 = (((*(void *)(v19 + 72) >> 16) & 0xFFFF0000 | (*(void *)(v19 + 72) << 32) | (2
                                                                                          * ((*(void *)(v19 + 72) & 0xFF000000000000) == 0)))
         + (((unint64_t)*(unsigned int *)(v19 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v19 + 84) >> 1) & 1;
    int v43 = 0;
    sub_F936B4(a1 + 1056, &v35, &v43);
    sub_F948C0((int32x2_t *)(a1 + 1056));
    v41 += 88;
    sub_F53EB8(&v40);
  }
  for (uint64_t i = *(void **)(sub_ED7C48(*(void *)a1 + 8) + 16); i; uint64_t i = (void *)*i)
  {
    unint64_t v40 = (int *)((i[2] >> 16) & 0xFFFF0000 | (i[2] << 32) | (2 * ((i[2] & 0xFF000000000000) == 0)));
    LODWORD(v32) = 0;
    sub_F936B4(a1 + 1056, &v40, (int *)&v32);
    sub_F948C0((int32x2_t *)(a1 + 1056));
  }
  unint64_t v21 = 126 - 2 * __clz(((char *)v37 - (unsigned char *)__p) >> 3);
  if (v37 == __p) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = v21;
  }
  sub_F98280((int8x16_t *)__p, v37, (uint64_t)&v40, v22, 1);
  unint64_t v23 = v37;
  if (__p != v37)
  {
    uint64_t v24 = (char *)__p - 8;
    do
    {
      if (v24 + 16 == (char *)v37) {
        goto LABEL_67;
      }
      int v25 = *((_DWORD *)v24 + 2);
      v24 += 8;
      LODWORD(v26) = *((_DWORD *)v24 + 2);
    }
    while (v25 != v26 || *((_DWORD *)v24 + 1) != *((_DWORD *)v24 + 3));
    unsigned int v28 = (int8x16_t *)(v24 + 16);
    if (v24 + 16 == (char *)v37)
    {
      unsigned int v29 = (int8x16_t *)(v24 + 8);
      if (v24 + 8 == (char *)v37) {
        goto LABEL_67;
      }
      goto LABEL_66;
    }
    do
    {
      if (v26 != v28->i32[0] || *((_DWORD *)v24 + 1) != v28->i32[1])
      {
        uint64_t v26 = v28->i64[0];
        *((void *)v24 + 1) = v28->i64[0];
        v24 += 8;
      }
      unsigned int v28 = (int8x16_t *)((char *)v28 + 8);
    }
    while (v28 != v23);
    unsigned int v29 = (int8x16_t *)(v24 + 8);
    if (v24 + 8 != (char *)v37) {
LABEL_66:
    }
      unint64_t v37 = v29;
  }
LABEL_67:
  sub_FA3368((void **)(*(void *)a1 + 4296), (unsigned int **)&__p, *(int **)(a1 + 2968), a1 + 2960, *(unsigned char *)(a1 + 2964), 4u);
  if (__p)
  {
    unint64_t v37 = (int8x16_t *)__p;
    operator delete(__p);
  }
}

void sub_F7997C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_F799D0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 1176);
  uint64_t v3 = *(void *)(a1 + 1168);
  unint64_t v55 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - v3) >> 4);
  if (v55 >> 30)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v59, "The source terminal of a query cannot have more than (2^30 - 1) nodes.");
    uint64_t v48 = (void *)sub_2F404((uint64_t)exception, &v59);
  }
  if (v2 != v3)
  {
    uint64_t v5 = 0;
    uint64_t v51 = a1 + 1200;
    uint64_t v49 = (void *)(a1 + 2976);
    int v50 = (uint64_t **)(a1 + 1056);
    do
    {
      uint64_t v6 = *(void *)(a1 + 1168);
      unint64_t v7 = (unint64_t *)(v6 + 80 * v5);
      uint64_t v8 = *(uint64_t **)a1;
      uint64_t v9 = **(void **)a1;
      if (*(unsigned char *)(v9 + 7774))
      {
        unint64_t v10 = *v7;
        unint64_t v11 = HIDWORD(*v7);
        uint64_t v12 = sub_290DEC(v9 + 3896, HIDWORD(*v7), 1);
        if (!v12) {
          goto LABEL_4;
        }
        int v13 = &v12[-*(int *)v12];
        if (*(unsigned __int16 *)v13 < 5u) {
          goto LABEL_4;
        }
        uint64_t v14 = *((unsigned __int16 *)v13 + 2);
        if (!v14
          || *(_DWORD *)&v12[v14 + *(unsigned int *)&v12[v14]] <= (unsigned __int16)WORD1(v10)
          || !sub_295DB4(v9, v11 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v10) << 32)))
        {
          goto LABEL_4;
        }
        uint64_t v8 = *(uint64_t **)a1;
      }
      unint64_t v15 = sub_F17140(v8 + 529, (uint64_t *)(v6 + 80 * v5), v6 + 80 * v5 + 8, *(void *)(a1 + 2968));
      if (v15 != -1 && HIDWORD(v15) != 0x7FFFFFFF)
      {
        uint64_t v17 = *(uint64_t **)a1;
        unsigned int v18 = *(_DWORD *)(v6 + 80 * v5 + 8);
        uint64_t v19 = *(void *)(a1 + 2968);
        if (!*(unsigned char *)(*(void *)a1 + 9586)
          || (*(void *)&long long v59 = (HIDWORD(*v7) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(*v7) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((*v7 >> 1) & 1) << 48)) ^ 0x1000000000000,
              sub_F57414((uint64_t)(v17 + 1199), &v59) == -1))
        {
          sub_ED7040((uint64_t)(v17 + 1), (HIDWORD(*v7) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(*v7) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((*v7 >> 1) & 1) << 48)) ^ 0x1000000000000, (uint64_t)&v59);
          unint64_t v20 = sub_F17510(v17 + 529, (int **)&v59, v18, v19);
          uint64_t v21 = v20;
          if (v20 != -1)
          {
            unint64_t v22 = HIDWORD(v20);
            if (HIDWORD(v20) != 0x7FFFFFFF)
            {
              sub_ED75C0(*(void *)a1 + 8, *v7, 1, v49, 0);
              unsigned int v23 = -1171354717 * ((*(void *)(a1 + 2984) - *(void *)(a1 + 2976)) >> 3);
              if (v23)
              {
                uint64_t v24 = 0;
                int v25 = 0;
                if (v21 < 0) {
                  char v26 = -5;
                }
                else {
                  char v26 = 5;
                }
                unsigned int v57 = (int)v22 / 10
                    + (((103 * (char)((int)v22 % 10 + v26)) >> 15) & 1)
                    + ((103 * (char)((int)v22 % 10 + v26)) >> 10);
                int v53 = v21 + v15;
                unint64_t v52 = (unint64_t)(v22 + HIDWORD(v15)) << 32;
                uint64_t v56 = 88 * v23;
                while (2)
                {
                  uint64_t v28 = *(void *)(a1 + 2976);
                  int v29 = *(_DWORD *)(a1 + 2960);
                  if (v29 == 0x7FFFFFFF) {
                    int v30 = 0x7FFFFFFF;
                  }
                  else {
                    int v30 = v57 + v29;
                  }
                  uint64_t v31 = *(uint64_t **)a1;
                  uint64_t v32 = *(void *)(a1 + 2968);
                  if (*(unsigned char *)(*(void *)a1 + 9586))
                  {
                    if (sub_F54008((uint64_t)(v31 + 1209), v28 + v24) != -1) {
                      goto LABEL_28;
                    }
                    unint64_t v33 = *(void *)(v28 + v24 + 32);
                    uint64_t v34 = 4 * (unsigned __int16)*(_DWORD *)(v28 + v24 + 80);
                    *(void *)&long long v59 = (((((v33 >> 16) & 0xFFFF0000 | (v33 << 32) | (2
                                                                                  * ((v33 & 0xFF000000000000) == 0)))
                                       + v34) << 16) & 0xFFFF00000000 | ((((v33 >> 16) & 0xFFFF0000 | (v33 << 32) | (2 * ((v33 & 0xFF000000000000) == 0)))
                                                                          + v34) >> 32) | ((unint64_t)((v33 & 0xFF000000000000) == 0) << 48)) ^ 0x1000000000000;
                    if (sub_F57414((uint64_t)(v31 + 1199), &v59) != -1) {
                      goto LABEL_28;
                    }
                  }
                  unint64_t v35 = sub_F178C0(v31 + 529, (int **)(v28 + v24), 0x3B9ACA00u, v32);
                  unint64_t v36 = v35 & 0xFFFFFFFF00000000;
                  if (v35 == -1 || v36 == 0x7FFFFFFF00000000) {
                    goto LABEL_28;
                  }
                  uint64_t v38 = v28 + v24;
                  uint64_t v39 = (((4 * (unsigned __int16)*(_DWORD *)(v28 + v24 + 80)) | (*(void *)(v28 + v24 + 32) << 32) | *(unsigned char *)(v28 + v24 + 84) & 1)
                       + ((*(void *)(v28 + v24 + 32) >> 16) & 0xFFFF0000)) | (2
                                                                                * ((*(void *)(v28 + v24 + 32) & 0xFF000000000000) == 0));
                  unint64_t v40 = v36 + v52;
                  unint64_t v66 = v40 | (v53 + v35);
                  uint64_t v67 = v39;
                  char v41 = *(unsigned char *)(a1 + 2964);
                  *(void *)&long long v59 = v66;
                  DWORD2(v59) = v30;
                  BYTE12(v59) = v41;
                  unint64_t v60 = (((*(void *)(v28 + v24 + 32) >> 16) & 0xFFFF0000 | (*(void *)(v28 + v24 + 32) << 32) | (2 * ((*(void *)(v28 + v24 + 32) & 0xFF000000000000) == 0)))
                       + 4 * (unsigned __int16)*(_DWORD *)(v28 + v24 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v28 + v24 + 84) & 1;
                  unint64_t v61 = (((*(void *)(v28 + v24 + 72) >> 16) & 0xFFFF0000 | (*(void *)(v28 + v24 + 72) << 32) | (2 * ((*(void *)(v28 + v24 + 72) & 0xFF000000000000) == 0)))
                       + (((unint64_t)*(unsigned int *)(v38 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v38 + 84) >> 1) & 1;
                  int v62 = *(_DWORD *)(v28 + v24 + 84);
                  int v63 = v25;
                  int v64 = 0;
                  int v65 = v5 | 0x80000000;
                  uint64_t v58 = (((4 * (unsigned __int16)*(_DWORD *)(v28 + v24 + 80)) | (*(void *)(v28 + v24 + 32) << 32) | *(unsigned char *)(v28 + v24 + 84) & 1)
                       + ((*(void *)(v28 + v24 + 32) >> 16) & 0xFFFF0000)) | (2
                                                                                * ((*(void *)(v28 + v24 + 32) & 0xFF000000000000) == 0));
                  int v42 = *(_DWORD *)(a1 + 1044);
                  if (v42 != 0x7FFFFFFF)
                  {
                    unint64_t v43 = HIDWORD(v40);
                    sub_EE03E4(v51, &v58, v68);
                    if (!v68[0]) {
                      goto LABEL_47;
                    }
                    sub_EE03E4(v51, &v58, v68);
                    uint64_t v44 = *(void *)(*(void *)(a1 + 1968) + 80 * *(unsigned int *)(v69 + 8) + 8);
                    if (v59 < v44
                      || v59 <= v44 && SDWORD1(v59) < SHIDWORD(v44))
                    {
                      sub_EE03E4(v51, &v58, v68);
                      int v45 = *(_DWORD *)(*(void *)(a1 + 1968) + 80 * *(unsigned int *)(v69 + 8) + 12);
                      int v46 = *(_DWORD *)(a1 + 1044);
                      if (v46 >= v45 && v42 < (int)v43)
                      {
                        int v27 = -1;
                        goto LABEL_26;
                      }
                      if (v46 < v45)
                      {
LABEL_47:
                        if (v42 >= (int)v43)
                        {
                          int v27 = 1;
LABEL_26:
                          *(_DWORD *)(a1 + 1048) += v27;
                        }
                      }
                    }
                  }
                  sub_F788FC(v51, &v58, (uint64_t)&v59);
                  v68[0] = (((4 * (unsigned __int16)*(_DWORD *)(v38 + 80)) | (*(void *)(v38 + 32) << 32) | *(unsigned char *)(v38 + 84) & 1)
                          + ((*(void *)(v38 + 32) >> 16) & 0xFFFF0000)) | (2
                                                                             * ((*(void *)(v38 + 32) & 0xFF000000000000) == 0));
                  LODWORD(v58) = 0;
                  sub_F936B4((uint64_t)v50, v68, (int *)&v58);
                  sub_F938DC(v50, a2);
                  sub_F948C0((int32x2_t *)v50);
                  sub_F7C148(a1, &v67, (unsigned int *)&v66, v5);
LABEL_28:
                  ++v25;
                  v24 += 88;
                  if (v56 == v24) {
                    break;
                  }
                  continue;
                }
              }
            }
          }
        }
      }
LABEL_4:
      ++v5;
    }
    while (v5 != v55);
  }
}

void sub_F7A080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_F7A0B0(uint64_t a1)
{
  uint64_t v31 = -858993459 * ((*(void *)(a1 + 1176) - *(void *)(a1 + 1168)) >> 4);
  if (v31)
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(a1 + 1168);
      uint64_t v34 = v2;
      uint64_t v4 = (uint64_t *)(v3 + 80 * v2);
      if (*(unsigned char *)(a1 + 3048)) {
        sub_F7D200((int32x2_t *)a1, (_DWORD *)(v3 + 80 * v2));
      }
      sub_F97D2C(*(void *)(a1 + 976) + 24, v4, v38);
      if (v38[0])
      {
        uint64_t v5 = v3 + 80 * v34;
        unsigned int v37 = *(_DWORD *)(v5 + 8);
        unint64_t v6 = sub_F17140((uint64_t *)(*(void *)a1 + 4232), v4, v5 + 8, *(void *)(a1 + 2968));
        unint64_t v33 = v6;
        if (v6 != -1 && (v6 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
        {
          sub_F97D2C(*(void *)(a1 + 976) + 24, v4, v38);
          uint64_t v8 = *(uint64_t **)(v39 + 8);
          uint64_t v32 = *(uint64_t **)(v39 + 16);
          if (v8 != v32)
          {
            unint64_t v36 = v4;
            do
            {
              unint64_t v35 = v8;
              uint64_t v9 = (void *)(**(void **)(a1 + 976) + 32 * *v8);
              uint64_t v10 = -858993459 * ((v9[1] - *v9) >> 4);
              if (v10)
              {
                for (uint64_t i = 0; i != v10; ++i)
                {
                  uint64_t v12 = (uint64_t *)(*v9 + 80 * i);
                  if (*v12 == *v4)
                  {
                    uint64_t v13 = *v9 + 80 * i;
                    unsigned int v14 = *(_DWORD *)(v13 + 8);
                    unint64_t v15 = sub_F17140((uint64_t *)(*(void *)a1 + 4232), v12, v13 + 8, *(void *)(a1 + 2968));
                    int v16 = v15;
                    unint64_t v17 = HIDWORD(v15);
                    BOOL v18 = v15 == -1 || HIDWORD(v15) == 0x7FFFFFFF;
                    if (!v18 && v37 >= v14)
                    {
                      int32x2_t v20 = *(int32x2_t *)a1;
                      uint64_t v21 = *(void *)(a1 + 2968);
                      unint64_t v22 = HIDWORD(*v4);
                      uint64_t v23 = (*v4 << 47) & 0x1000000000000;
                      if (*(unsigned char *)(*(void *)a1 + 9586))
                      {
                        uint64_t v24 = 0;
                        unint64_t v25 = 0x2127599BF4325C37
                            * ((*v4 & 0xFFFFFFFFFFFF0000 | HIWORD(v23)) ^ ((unint64_t)*v4 >> 23));
                        for (unint64_t j = v25 ^ (v25 >> 47); ; unint64_t j = v24 + v27)
                        {
                          uint64_t v27 = j & (*(void *)(*(void *)&v20 + 9648) - 1);
                          unint64_t v28 = *(void *)(*(void *)(*(void *)&v20 + 9664) + 8 * v27);
                          if (*(_DWORD *)(*(void *)&v20 + 9656) == v28
                            && *(unsigned __int16 *)(*(void *)a1 + 9660) == WORD2(v28)
                            && (HIWORD(v28) & 1) != (*(unsigned char *)(*(void *)a1 + 9662) == 0))
                          {
                            break;
                          }
                          if ((!*(void *)(*(void *)&v20 + 9632)
                             || *(_DWORD *)(*(void *)&v20 + 9624) != v28
                             || *(unsigned __int16 *)(*(void *)a1 + 9628) != WORD2(v28)
                             || (HIWORD(v28) & 1) == (*(unsigned char *)(*(void *)a1 + 9630) == 0))
                            && v22 == v28
                            && WORD1(*v4) == WORD2(v28)
                            && (v23 != 0) != (HIWORD(v28) & 1))
                          {
                            if (v27 != -1) {
                              goto LABEL_16;
                            }
                            break;
                          }
                          ++v24;
                        }
                      }
                      int v29 = (uint64_t *)(*(void *)&v20 + 4232);
                      sub_ED7040(*(void *)&v20 + 8, (v22 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*v4) << 32) | v23) ^ 0x1000000000000, (uint64_t)v38);
                      unint64_t v30 = sub_F17510(v29, v38, v37 - v14, v21);
                      if (v30 != -1 && HIDWORD(v30) != 0x7FFFFFFF)
                      {
                        LODWORD(v38[0]) = v30 + v16 + v33;
                        HIDWORD(v38[0]) = v17 + HIDWORD(v33) + HIDWORD(v30);
                        sub_F785AC(a1, v36, (unsigned int *)v38, *v35, v34, i, 1, 0);
                      }
LABEL_16:
                      uint64_t v4 = v36;
                    }
                  }
                }
              }
              uint64_t v8 = v35 + 1;
            }
            while (v35 + 1 != v32);
          }
        }
      }
      uint64_t v2 = v34 + 1;
    }
    while (v34 + 1 != v31);
  }
}

void sub_F7A470(uint64_t **a1, unsigned int *a2, unsigned int a3)
{
  if (*((unsigned char *)*a1 + 9584) && sub_51D60((unsigned __int8 *)*a1 + 8)) {
    unsigned int v6 = sub_F78BBC(a1[1]) - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  unsigned int v7 = -1;
  if (*a2 < v6 && *a2 != -1) {
    unsigned int v6 = *a2;
  }
  unsigned int v86 = v6;
  uint64_t v9 = (unsigned int *)v84 + 2;
  uint64_t v10 = a1 + 378;
  unsigned int v70 = a1 + 375;
  int64x2_t v69 = vdupq_n_s64(0xFFFF0002uLL);
  while (*((_DWORD *)a1 + 518) && ((unint64_t)((char *)a1[250] - (char *)a1[249]) >> 2) < a3)
  {
    unint64_t v11 = &a1[246][10 * *(unsigned int *)a1[253]];
    v84[0] = *(_OWORD *)v11;
    long long v12 = *((_OWORD *)v11 + 3);
    long long v13 = *((_OWORD *)v11 + 4);
    long long v14 = *((_OWORD *)v11 + 2);
    v84[1] = *((_OWORD *)v11 + 1);
    v84[3] = v12;
    long long v85 = v13;
    _DWORD v84[2] = v14;
    sub_F773C4((uint64_t)(a1 + 150));
    uint64_t v15 = **a1;
    if (!*(unsigned char *)(v15 + 7774)
      || (unint64_t v16 = *(void *)&v84[0],
          uint64_t v17 = HIDWORD(*(void *)&v84[0]),
          (BOOL v18 = sub_290DEC(v15 + 3896, DWORD1(v84[0]), 1)) != 0)
      && (uint64_t v19 = &v18[-*(int *)v18], *(unsigned __int16 *)v19 >= 5u)
      && (uint64_t v20 = *((unsigned __int16 *)v19 + 2)) != 0
      && *(_DWORD *)&v18[v20 + *(unsigned int *)&v18[v20]] > (unsigned __int16)WORD1(v16)
      && sub_295DB4(v15, v17 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v16) << 32)))
    {
      if (!*((unsigned char *)a1 + 1052)
        || sub_2961B8((void ***)**a1, HIDWORD(*(void *)&v84[0]) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v84[0]) << 32)))
      {
        int v21 = DWORD2(v85);
        unsigned int v22 = *((_DWORD *)a1 + 260);
        if (v22 != -1 && DWORD2(v84[0]) > v22 || *((unsigned char *)a1 + 3048) && sub_F7C6CC((uint64_t)a1, v9)) {
          return;
        }
        int v23 = *((_DWORD *)a1 + 261);
        if (v23 != 0x7FFFFFFF && SHIDWORD(v84[0]) <= v23) {
          --*((_DWORD *)a1 + 262);
        }
        if (*v10 == -1
          || !sub_F963A0(*a1[1], HIDWORD(*(void *)&v84[0]) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v84[0]) << 32), v10))
        {
          int v24 = v21 & 0x7FFFFFFF;
          unsigned int v25 = sub_F7C820((uint64_t)a1, (uint64_t *)v84, v9, v21 & 0x7FFFFFFF);
          unsigned int v83 = v25;
          int v26 = *((_DWORD *)a1 + 740);
          unsigned int v27 = 0x7FFFFFFF;
          if (v26 != 0x7FFFFFFF)
          {
            if (v84[0] < 0) {
              char v28 = -5;
            }
            else {
              char v28 = 5;
            }
            unsigned int v27 = SHIDWORD(v84[0]) / -10
                + v26
                + (((-103 * (char)(v28 + SHIDWORD(v84[0]) % 10)) >> 15) & 1)
                + ((-103 * (char)(v28 + SHIDWORD(v84[0]) % 10)) >> 10);
          }
          unsigned int v82 = v27;
          int v29 = v86 >= v25 ? &v83 : &v86;
          int v30 = sub_F7CC3C((uint64_t)a1, v84, (int *)a1[371], (uint64_t)&v82, *((unsigned char *)a1 + 2964), v29);
          int v81 = v30;
          if (v30 != -1)
          {
            if (!v30)
            {
              double v68 = v10;
              if (!*((unsigned char *)a1 + 3048)) {
                sub_F7C148((uint64_t)a1, (uint64_t *)v84, v9, v21 & 0x7FFFFFFF);
              }
              uint64_t v67 = v9;
              sub_ED75C0((uint64_t)(*a1 + 1), *(unint64_t *)&v84[0], 1, a1 + 372, 0);
              unsigned int v31 = -1171354717 * ((unint64_t)((char *)a1[373] - (char *)a1[372]) >> 3);
              if (v31)
              {
                unint64_t v32 = 0;
                int v33 = 0;
                uint64_t v34 = 88 * v31;
                do
                {
                  uint64_t v35 = (uint64_t)&a1[372][v32 / 8];
                  unint64_t v36 = sub_F77FE0((uint64_t)*a1, v35, (uint64_t)a1[371]);
                  unint64_t v37 = v36 & 0xFFFFFFFF00000000;
                  if (v36 != -1 && v37 != 0x7FFFFFFF00000000)
                  {
                    unint64_t v80 = (((4 * (unsigned __int16)*(_DWORD *)(v35 + 80)) | (*(void *)(v35 + 32) << 32) | *(unsigned char *)(v35 + 84) & 1)
                         + ((*(void *)(v35 + 32) >> 16) & 0xFFFF0000)) | (2
                                                                            * ((*(void *)(v35 + 32) & 0xFF000000000000) == 0));
                    unint64_t v71 = (*((void *)&v84[0] + 1) + v37) & 0xFFFFFFFF00000000 | (DWORD2(v84[0]) + v36);
                    unint64_t v72 = v71;
                    char v39 = *((unsigned char *)a1 + 2964);
                    LODWORD(v73) = v82;
                    BYTE4(v73) = v39;
                    v74.i64[0] = (((*(void *)(v35 + 32) >> 16) & 0xFFFF0000 | (*(void *)(v35 + 32) << 32) | (2 * ((*(void *)(v35 + 32) & 0xFF000000000000) == 0)))
                                + 4 * (unsigned __int16)*(_DWORD *)(v35 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v35 + 84) & 1;
                    v74.i64[1] = (((*(void *)(v35 + 72) >> 16) & 0xFFFF0000 | (*(void *)(v35 + 72) << 32) | (2 * ((*(void *)(v35 + 72) & 0xFF000000000000) == 0)))
                                + (((unint64_t)*(unsigned int *)(v35 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v35 + 84) >> 1) & 1;
                    LODWORD(v75) = *(_DWORD *)(v35 + 84);
                    int v77 = v33;
                    int v78 = 0;
                    int v79 = v24;
                    sub_F77294((uint64_t)a1, (uint64_t *)&v80, &v72);
                    sub_F7C148((uint64_t)a1, (uint64_t *)&v80, (unsigned int *)&v71, v24);
                  }
                  ++v33;
                  v32 += 88;
                }
                while (v34 != v32);
              }
LABEL_69:
              int v59 = *((_DWORD *)a1 + 261);
              if (v59 == 0x7FFFFFFF)
              {
                int v52 = 0;
                uint64_t v9 = v67;
                uint64_t v10 = v68;
              }
              else
              {
                int v52 = 0;
                uint64_t v10 = v68;
                if (*((_DWORD *)a1 + 262))
                {
                  uint64_t v9 = v67;
                }
                else
                {
                  uint64_t v9 = v67;
                  if (v7 == -1)
                  {
                    unint64_t v60 = a1[119];
                    unint64_t v61 = a1[120];
                    if (v60 == v61)
                    {
                      int v52 = 3;
                      unsigned int v7 = -1;
                    }
                    else
                    {
                      unsigned int v7 = 0;
                      int v62 = a1[116];
                      do
                      {
                        if (0xAAAAAAAAAAAAAAABLL * (a1[117] - v62) > *v60) {
                          unint64_t v63 = v62[3 * *v60 + 1];
                        }
                        else {
                          unint64_t v63 = 0x7FFFFFFFFFFFFFFFLL;
                        }
                        unint64_t v64 = HIDWORD(v63);
                        if (v7 > v63) {
                          LODWORD(v63) = v7;
                        }
                        if (v59 >= (int)v64) {
                          unsigned int v7 = v63;
                        }
                        ++v60;
                      }
                      while (v60 != v61);
                      unsigned int v65 = *((_DWORD *)a1 + 260);
                      BOOL v66 = v65 != -1 && v7 >= v65;
                      int v52 = 0;
                      if (!v66) {
                        *((_DWORD *)a1 + 260) = v7;
                      }
                    }
                  }
                }
              }
              goto LABEL_61;
            }
            unint64_t v40 = sub_F968AC(*a1[1], HIDWORD(*(void *)&v84[0]) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v84[0]) << 32), (*(void *)&v84[0] >> 1) & 1, &v81);
            unint64_t v80 = v40;
            if (v40)
            {
              if (v40 <= 0xFFFFFFFEFFFFFFFFLL)
              {
                char v41 = *((unsigned char *)a1 + 2964);
                sub_FA2A1C((void **)*a1 + 537, *(unint64_t *)&v84[0], &v81, 1u, (int *)a1[371], (uint64_t)&v82, v41, (uint64_t)v70);
                if (a1[375] != a1[376])
                {
                  sub_5217C8((uint64_t)(a1 + 260), &v80, (uint64_t)&v72);
                  unint64_t v42 = v72;
                  if (v74.i8[0])
                  {
                    uint64_t v43 = *(void *)(v72 + 8) + 12 * v73;
                    *(void *)uint64_t v43 = v80;
                    *(_DWORD *)(v43 + 8) = 0x7FFFFFFF;
                  }
                  double v68 = v10;
                  uint64_t v44 = *(void *)(v42 + 8) + 12 * v73;
                  int v47 = *(_DWORD *)(v44 + 8);
                  int v45 = (_DWORD *)(v44 + 8);
                  int v46 = v47;
                  if (v47 == 0x7FFFFFFF || SHIDWORD(v84[0]) < v46) {
                    *int v45 = HIDWORD(v84[0]);
                  }
                  uint64_t v67 = v9;
                  uint64_t v48 = -858993459 * ((unint64_t)((char *)a1[376] - (char *)a1[375]) >> 3);
                  if (v48)
                  {
                    uint64_t v49 = 0;
                    int v50 = 0;
                    uint64_t v51 = 40 * v48;
                    do
                    {
                      uint64_t v53 = *v70 + v49;
                      uint64_t v54 = *(void *)(v53 + 28);
                      unint64_t v55 = v54 & 0xFFFFFFFF00000000;
                      if (v54 != -1 && v55 != 0x7FFFFFFF00000000)
                      {
                        unint64_t v72 = (v55 + *((void *)&v84[0] + 1)) & 0xFFFFFFFF00000000 | (v54 + DWORD2(v84[0]));
                        LODWORD(v73) = v82;
                        BYTE4(v73) = v41;
                        int64x2_t v74 = v69;
                        LODWORD(v75) = 0;
                        int v77 = v50;
                        int v78 = v81;
                        int v79 = v24;
                        int v57 = *(_DWORD *)(v53 + 32);
                        long long v58 = *(_OWORD *)(v53 + 16);
                        int64x2_t v74 = *(int64x2_t *)v53;
                        long long v75 = v58;
                        int v76 = v57;
                        unint64_t v71 = *(void *)v53;
                        sub_F77294((uint64_t)a1, (uint64_t *)&v71, &v72);
                      }
                      ++v50;
                      v49 += 40;
                    }
                    while (v51 != v49);
                  }
                  goto LABEL_69;
                }
              }
            }
          }
        }
      }
    }
    int v52 = 2;
LABEL_61:
    if (v52 == 3) {
      return;
    }
  }
}

void sub_F7AC10(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, char a5, _DWORD *a6, int a7, unsigned int *a8, uint64_t *a9, void *a10, unsigned int a11, int a12, int a13)
{
  sub_F73894(a1);
  *(_DWORD *)(a1 + 2960) = *a4;
  *(unsigned char *)(a1 + 2964) = a5;
  *(void *)(a1 + 2968) = a3;
  if (a1 + 1168 != a2) {
    sub_BFF628((void *)(a1 + 1168), *(char **)a2, *(char **)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
  }
  *(void *)(a1 + 1192) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 1040) = *a6;
  *(_DWORD *)(a1 + 1044) = a7;
  *(_DWORD *)(a1 + 20) = a13;
  *(void *)(a1 + 976) = a1 + 24;
  sub_F79354(a1);
  sub_F799D0(a1, a10);
  uint64_t v21 = *a9;
  uint64_t v20 = a9[1];
  if (*a9 != v20)
  {
    do
    {
      int v23 = *(_DWORD *)(v21 + 8);
      sub_F936B4(a1 + 1056, (void *)v21, &v23);
      sub_F938DC((uint64_t **)(a1 + 1056), a10);
      sub_F948C0((int32x2_t *)(a1 + 1056));
      v21 += 16;
    }
    while (v21 != v20);
  }
  sub_F7A470((uint64_t **)a1, a8, a11);
}

void sub_F7AD4C(int32x2_t *a1, uint64_t a2, uint64_t ***a3, uint64_t a4, int a5, char a6, int a7, int a8, unsigned int a9, int a10, unsigned int a11)
{
  sub_F73894((uint64_t)a1);
  uint64_t v19 = *a3;
  BOOL v18 = a3[1];
  if (*a3 == v18)
  {
    uint64_t v20 = *a3;
  }
  else
  {
    do
    {
      int v24 = a1;
      sub_F770A8(a1 + 3, v19, 1, (void **)&v24);
      v19 += 4;
    }
    while (v19 != v18);
    uint64_t v19 = *a3;
    uint64_t v20 = a3[1];
  }
  unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&a1[117] - *(void *)&a1[116]) >> 3);
  unint64_t v22 = ((char *)v20 - (char *)v19) >> 5;
  if (v22 > v21) {
    sub_F92E44((void **)&a1[116], v22 - v21);
  }
  a1[122] = (int32x2_t)&a1[3];
  sub_F7AE60((uint64_t)a1, a2, a4, a5, a6, a7, a8, a9, a11);
}

void sub_F7AE60(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, int a6, int a7, unsigned int a8, unsigned int a9)
{
  unsigned int v18 = a8;
  *(_DWORD *)(a1 + 2960) = a4;
  *(unsigned char *)(a1 + 2964) = a5;
  *(void *)(a1 + 2968) = a3;
  long long v13 = (void *)(a1 + 1168);
  if (v13 != (void *)a2) {
    sub_BFF628(v13, *(char **)a2, *(char **)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
  }
  *(void *)(a1 + 1192) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 1040) = a6;
  *(_DWORD *)(a1 + 1044) = a7;
  long long v14 = *(void **)(a1 + 976);
  if (v14[11]
     + v14[5]
     + v14[17]
     + v14[23]
     + v14[29]
     + v14[35]
     + v14[41]
     + v14[47]
     + v14[53]
     + v14[59]
     + v14[65]
     + v14[71]
     + v14[77]
     + v14[83]
     + v14[89]
     + v14[95]
    || *(unsigned char *)(a1 + 3048))
  {
    sub_F79354(a1);
    long long __p = 0;
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    sub_F799D0(a1, &__p);
    if (__p)
    {
      unint64_t v16 = __p;
      operator delete(__p);
    }
    sub_F7A0B0(a1);
    sub_F7A470((uint64_t **)a1, &v18, a9);
  }
}

void sub_F7AFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F7AFD4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  sub_EAD400((uint64_t)a3);
  uint64_t v8 = 0;
  sub_F7B0DC(a1, a2, (uint64_t)v7, a3);
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

void sub_F7B0C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_F75CDC((uint64_t *)va);
  sub_405F44(v2);
  _Unwind_Resume(a1);
}

unint64_t sub_F7B0DC(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  sub_EAD268((uint64_t)a4);
  uint64_t v8 = *(void *)(a1 + 928);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 936) - v8) >> 3) <= a2) {
    return 0;
  }
  unint64_t v9 = *(void *)(v8 + 24 * a2);
  if (v9)
  {
    if (!*(unsigned char *)(a1 + 3048) || *(unsigned char *)(a1 + 3049))
    {
      uint64_t v10 = v8 + 24 * a2;
      unint64_t v11 = (_DWORD *)(v10 + 20);
      if ((*(unsigned char *)(v10 + 23) & 0x40) != 0)
      {
        sub_ED7040(*(void *)a1 + 8, (HIDWORD(v9) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(v9) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((v9 >> 1) & 1) << 48)) ^ 0x1000000000000, (uint64_t)v14);
        sub_EADAD8((uint64_t)a4, v9, v14);
        sub_EADAA8((uint64_t)a4, *(void *)(a1 + 1168) + 80 * (*v11 & 0x3FFFFFFF) + 8);
        unint64_t v9 = 0;
        uint64_t v12 = 32 * a2;
        if ((*v11 & 0x80000000) != 0)
        {
LABEL_10:
          sub_F7B824((uint64_t *)a1, (void **)(v8 + 24 * a2), *(void *)(a1 + 3880) + 40 * a2, (unint64_t *)(*(void *)(**(void **)(a1 + 976) + v12) + 80* *(unsigned int *)(v8 + 24 * a2 + 16)), (uint64_t)v14);
          sub_EAF3C0((uint64_t)a4, (uint64_t)v14);
          sub_405F44((uint64_t)v14);
        }
      }
      else
      {
        unint64_t v9 = sub_F7B408(a1, (uint64_t *)(v8 + 24 * a2), a3, a4);
        uint64_t v12 = 32 * a2;
        if ((*v11 & 0x80000000) != 0) {
          goto LABEL_10;
        }
      }
      sub_EAD920((uint64_t)a4, *(void *)(**(void **)(a1 + 976) + v12) + 80 * *(unsigned int *)(v8 + 24 * a2 + 16) + 8);
      return v9;
    }
    return 0;
  }
  return v9;
}

void sub_F7B2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_F7B300@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  sub_EAD400((uint64_t)a3);
  uint64_t v8 = 0;
  sub_F7B408(a1, a2, (uint64_t)v7, a3);
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

void sub_F7B3EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_F75CDC((uint64_t *)va);
  sub_405F44(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_F7B408(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  sub_EAD268((uint64_t)a4);
  uint64_t v8 = *a2;
  if (!*a2) {
    return 0;
  }
  unint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v36 = v8;
  do
  {
    sub_EE03E4(a1 + 1200, &v36, &v27);
    unsigned int v9 = *(_DWORD *)(*((void *)&v28 + 1) + 8);
    uint64_t v10 = *(void *)(a1 + 1968);
    sub_F7668C(&v37, v10 + 80 * v9 + 8);
    if ((*(_DWORD *)(v10 + 80 * v9 + 72) & 0x80000000) != 0)
    {
      uint64_t v36 = 0;
      unint64_t v11 = v37;
      uint64_t v12 = v38;
      if (v37 != v38) {
        goto LABEL_6;
      }
LABEL_23:
      uint64_t v20 = 0;
      if (!v11) {
        return v20;
      }
      goto LABEL_28;
    }
    uint64_t v36 = *(void *)(v10 + 80 * v9 + 32);
  }
  while (v36);
  unint64_t v11 = v37;
  uint64_t v12 = v38;
  if (v37 == v38) {
    goto LABEL_23;
  }
LABEL_6:
  long long __p = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  while (!*((_DWORD *)v11 + 15))
  {
    if (*(void *)(a3 + 24) && !sub_EAE144(a4))
    {
      *(void *)&long long v27 = *((void *)v11 + 2);
      uint64_t v16 = *(void *)(a3 + 24);
      if (!v16) {
        sub_29F82C();
      }
      if ((*(uint64_t (**)(uint64_t, long long *))(*(void *)v16 + 48))(v16, &v27)) {
        goto LABEL_25;
      }
    }
    uint64_t v17 = *(void *)a1 + 8;
    sub_ED7040(v17, (HIDWORD(*((void *)v11 + 2)) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(*((void *)v11 + 2)) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((*((void *)v11 + 2) >> 1) & 1) << 48)) ^ 0x1000000000000, (uint64_t)v42);
    sub_ED7040(v17, (HIDWORD(*((void *)v11 + 3)) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(*((void *)v11 + 3)) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((*((void *)v11 + 3) >> 1) & 1) << 48)) ^ 0x1000000000000, (uint64_t)v40);
    int v18 = *((_DWORD *)v11 + 4);
    int v19 = *((_DWORD *)v11 + 6);
    *(void *)int v29 = v43;
    long long v27 = v42[0];
    long long v28 = v42[1];
    *(_OWORD *)&v29[8] = v40[0];
    *(_OWORD *)&v29[24] = v40[1];
    uint64_t v30 = v41;
    int v31 = (v19 << 14) & 0x3FFF0000 | ((unsigned __int16)v18 >> 2);
    int v32 = *((_DWORD *)v11 + 8);
    sub_EADC28((uint64_t)a4, (int **)&v27);
LABEL_7:
    v11 += 72;
    if (v11 == v12)
    {
      sub_EE03E4(a1 + 1200, a2, &v27);
      sub_EADAA8((uint64_t)a4, *(void *)(a1 + 1168)+ 80* (*(_DWORD *)(*(void *)(a1 + 1968) + 80 * *(unsigned int *)(*((void *)&v28 + 1) + 8) + 72) & 0x7FFFFFFF)+ 8);
      goto LABEL_32;
    }
  }
  sub_FB8518((uint64_t **)(*(void *)a1 + 4408), (_OWORD *)v11 + 1, *(int **)(a1 + 2968), (uint64_t)(v11 + 8), v11[12], &__p);
  long long v13 = __p;
  long long v14 = v34;
  if (__p != v34)
  {
    while (1)
    {
      if (*(void *)(a3 + 24) && !sub_EAE144(a4))
      {
        *(void *)&long long v27 = (((v13[4] >> 16) & 0xFFFF0000 | (v13[4] << 32) | (2 * ((v13[4] & 0xFF000000000000) == 0)))
                         + 4 * (unsigned __int16)*((_DWORD *)v13 + 20)) & 0xFFFFFFFFFFFFFFFELL | *((unsigned char *)v13 + 84) & 1;
        uint64_t v15 = *(void *)(a3 + 24);
        if (!v15) {
          sub_29F82C();
        }
        if ((*(uint64_t (**)(uint64_t, long long *))(*(void *)v15 + 48))(v15, &v27)) {
          break;
        }
      }
      sub_EADC28((uint64_t)a4, (int **)v13);
      v13 += 11;
      if (v13 == v14) {
        goto LABEL_7;
      }
    }
LABEL_25:
    uint64_t v21 = sub_EADAD0((uint64_t)a4);
    long long v27 = *(_OWORD *)v21;
    long long v22 = *(_OWORD *)(v21 + 16);
    long long v23 = *(_OWORD *)(v21 + 32);
    long long v24 = *(_OWORD *)(v21 + 48);
    *(void *)&v29[32] = *(void *)(v21 + 64);
    *(_OWORD *)int v29 = v23;
    *(_OWORD *)&v29[16] = v24;
    long long v28 = v22;
    LODWORD(v27) = 1000000000;
    sub_EADAA8((uint64_t)a4, (uint64_t)&v27);
    uint64_t v20 = 1;
    unsigned int v25 = __p;
    if (!__p) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  sub_EAD268((uint64_t)a4);
LABEL_32:
  uint64_t v20 = 0;
  unsigned int v25 = __p;
  if (__p)
  {
LABEL_26:
    uint64_t v34 = v25;
    operator delete(v25);
  }
LABEL_27:
  unint64_t v11 = v37;
  if (v37)
  {
LABEL_28:
    uint64_t v38 = v11;
    operator delete(v11);
  }
  return v20;
}

void sub_F7B7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
  {
    operator delete(__p);
    int v26 = a24;
    if (!a24) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int v26 = a24;
    if (!a24) {
      goto LABEL_3;
    }
  }
  operator delete(v26);
  _Unwind_Resume(exception_object);
}

void sub_F7B824(uint64_t *a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  sub_EAD400(a5);
  uint64_t v10 = *a2;
  if (!*a2) {
    return;
  }
  uint64_t v36 = 0;
  unint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v35 = v10;
  do
  {
    int v11 = *(_DWORD *)(a3 + 32);
    if (v11 == 1)
    {
      long long v14 = (void *)sub_F9A7EC(a3, (unsigned int *)&v35);
    }
    else
    {
      if (v11)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      uint64_t v12 = *(void **)a3;
      long long __p = v10;
      uint64_t v13 = sub_F9A938(v12, &__p);
      long long v14 = *(void **)v13;
      uint64_t v15 = *(void **)(v13 + 8);
    }
    v34[0] = v14;
    v34[1] = v15;
    sub_3BFF8((char **)&v36, v34);
    uint64_t v10 = v34[0];
    uint64_t v35 = v34[0];
  }
  while (v34[0]);
  uint64_t v16 = (unint64_t *)v36;
  uint64_t v17 = (unint64_t *)v37;
  if (v36 != v37)
  {
    int v18 = v37 - 16;
    if (v37 - 16 > v36)
    {
      int v19 = (char *)v36 + 16;
      do
      {
        long long v20 = *((_OWORD *)v19 - 1);
        *((_OWORD *)v19 - 1) = *(_OWORD *)v18;
        *(_OWORD *)int v18 = v20;
        v18 -= 16;
        BOOL v21 = v19 >= v18;
        v19 += 16;
      }
      while (!v21);
      uint64_t v16 = (unint64_t *)v36;
      uint64_t v17 = (unint64_t *)v37;
    }
  }
  memset(v34, 0, sizeof(v34));
  long long __p = 0;
  int v32 = 0;
  uint64_t v33 = 0;
  if (v16 == v17) {
    goto LABEL_28;
  }
  while (1)
  {
    if (!*((_DWORD *)v16 + 2))
    {
      if (*v16) {
        unint64_t v28 = *v16;
      }
      else {
        unint64_t v28 = *a4;
      }
      sub_ED75C0(*a1 + 8, v28, 0, v34, 0);
      sub_EADC28(a5, (int **)v34[0] + 11 * *((unsigned int *)v16 + 3));
      goto LABEL_16;
    }
    uint64_t v22 = *a1;
    unint64_t v23 = *v16;
    long long v24 = (int *)a1[371];
    int v30 = 0x7FFFFFFF;
    sub_FA2A1C((void **)(v22 + 4296), v23, (_DWORD *)v16 + 2, 0, v24, (uint64_t)&v30, 0, (uint64_t)&__p);
    uint64_t v25 = *a1;
    int v26 = (char *)__p + 40 * *((unsigned int *)v16 + 3);
    long long v27 = (int *)a1[371];
    int v30 = 0x7FFFFFFF;
    sub_FB8518((uint64_t **)(v25 + 4408), v26, v27, (uint64_t)&v30, 0, v34);
    if (v34[0] == v34[1]) {
      break;
    }
    sub_EAEE78(a5, (int ***)v34);
LABEL_16:
    v16 += 2;
    if (v16 == v17) {
      goto LABEL_26;
    }
  }
  sub_EAD268(a5);
LABEL_26:
  if (__p)
  {
    int v32 = __p;
    operator delete(__p);
  }
LABEL_28:
  if (v34[0])
  {
    v34[1] = v34[0];
    operator delete(v34[0]);
  }
  if (v36)
  {
    unint64_t v37 = (char *)v36;
    operator delete(v36);
  }
}

void sub_F7BAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
  {
    operator delete(__p);
    BOOL v21 = a14;
    if (!a14)
    {
LABEL_3:
      uint64_t v22 = a18;
      if (!a18) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    BOOL v21 = a14;
    if (!a14) {
      goto LABEL_3;
    }
  }
  operator delete(v21);
  uint64_t v22 = a18;
  if (!a18)
  {
LABEL_4:
    sub_405F44(v19);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v22);
  sub_405F44(v19);
  _Unwind_Resume(a1);
}

void sub_F7BB54(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = xmmword_20B8E30;
  *(void *)(a2 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v4 = *(char **)(a1 + 2080);
  uint64_t v5 = *(unsigned int **)(a1 + 2088);
  if (*v4 > -2)
  {
    unsigned int v6 = *(void **)(a1 + 2080);
    uint64_t v17 = *(void *)(a1 + 2104);
    uint64_t v8 = &v4[v17];
    if (v4 != &v4[v17])
    {
LABEL_5:
      unsigned int v9 = (char **)(a1 + 2080);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v6 = *(void **)(a1 + 2080);
    do
    {
      unint64_t v7 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      unsigned int v6 = (void *)((char *)v6 + v7);
      v5 += 3 * v7;
    }
    while (*(char *)v6 < -1);
    uint64_t v8 = &v4[*(void *)(a1 + 2104)];
    if (v6 != (void *)v8) {
      goto LABEL_5;
    }
  }
  unsigned int v9 = (char **)(a1 + 2128);
  uint64_t v18 = 1;
  uint64_t v19 = a1 + 2080;
  while (1)
  {
    uint64_t v5 = *(unsigned int **)(v19 + 56);
    unsigned int v6 = *v9;
    if (**v9 <= -2)
    {
      do
      {
        unint64_t v20 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        unsigned int v6 = (void *)((char *)v6 + v20);
        v5 += 3 * v20;
      }
      while (*(char *)v6 < -1);
    }
    uint64_t v8 = &(*v9)[*(void *)(v19 + 72)];
    if (v6 != (void *)v8) {
      break;
    }
    uint64_t v19 = a1 + 2080 + 48 * v18++;
    unsigned int v9 = (char **)(v19 + 48);
    if (v18 == 16) {
      goto LABEL_26;
    }
  }
LABEL_6:
  uint64_t v10 = (char **)(a1 + 2848);
  do
  {
    while (1)
    {
      sub_F92FD4(**(void **)(a1 + 8), v5, (uint64_t)&__p);
      sub_33998(a2, (uint64_t)&__p);
      int v11 = *((char *)v6 + 1);
      unsigned int v6 = (void *)((char *)v6 + 1);
      v5 += 3;
      if (v11 <= -2)
      {
        do
        {
          unint64_t v12 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          unsigned int v6 = (void *)((char *)v6 + v12);
          v5 += 3 * v12;
        }
        while (*(char *)v6 < -1);
      }
      if (v6 == (void *)v8) {
        break;
      }
      if (!v9) {
        goto LABEL_26;
      }
    }
    uint64_t v13 = v9 + 6;
    if (v9 + 6 == v10) {
      break;
    }
    while (1)
    {
      long long v14 = v13;
      uint64_t v15 = v9[6];
      uint64_t v5 = (unsigned int *)v9[7];
      unsigned int v6 = v15;
      if (*v15 <= -2)
      {
        do
        {
          unint64_t v16 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          unsigned int v6 = (void *)((char *)v6 + v16);
          v5 += 3 * v16;
        }
        while (*(char *)v6 < -1);
      }
      uint64_t v8 = &v9[9][(void)v15];
      if (v6 != (void *)v8) {
        break;
      }
      uint64_t v13 = v14 + 6;
      unsigned int v9 = v14;
      if (v14 + 6 == v10) {
        goto LABEL_26;
      }
    }
    unsigned int v9 = v14;
  }
  while (v14);
LABEL_26:
  if (!sub_344C4((_DWORD *)a2))
  {
    long long __p = 0;
    int v31 = 0;
    uint64_t v32 = 0;
    BOOL v21 = *(unsigned int **)(a1 + 1992);
    uint64_t v22 = *(unsigned int **)(a1 + 2000);
    if (v21 != v22)
    {
      do
      {
        uint64_t v23 = *(void *)(a1 + 1968);
        uint64_t v24 = 80 * *v21;
        v28[0] = 1;
        unint64_t v25 = sub_F968AC(**(void **)(a1 + 8), HIDWORD(*(void *)(v23 + v24)) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*(void *)(v23 + v24)) << 32), (*(void *)(v23 + v24) >> 1) & 1, v28);
        unint64_t v29 = v25;
        if (v25) {
          BOOL v26 = HIDWORD(v25) == -1;
        }
        else {
          BOOL v26 = 1;
        }
        if (!v26)
        {
          long long v27 = __p;
          if (__p != v31)
          {
            while (*v27 != v25)
            {
              if (++v27 == v31) {
                goto LABEL_39;
              }
            }
          }
          if (v27 == v31)
          {
LABEL_39:
            sub_F92FD4(**(void **)(a1 + 8), (unsigned int *)&v29, (uint64_t)v28);
            sub_33998(a2, (uint64_t)v28);
            sub_29603C(&__p, &v29);
          }
        }
        ++v21;
      }
      while (v21 != v22);
      if (__p)
      {
        int v31 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_F7BEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F7BF0C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = a1 + 1200;
  sub_EE03E4(a1 + 1200, &v7, v8);
  if (!v8[0]) {
    return 0;
  }
  sub_EE03E4(v3, &v7, v8);
  unsigned int v4 = *(_DWORD *)(v8[3] + 8);
  uint64_t v5 = *(void *)(a1 + 1968);
  if ((*(_DWORD *)(v5 + 80 * v4 + 72) & 0x80000000) != 0) {
    return 0;
  }
  else {
    return *(void *)(v5 + 80 * v4 + 32);
  }
}

uint64_t sub_F7BFA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a3;
  uint64_t v14 = a2;
  uint64_t v4 = a1 + 1200;
  sub_EE03E4(a1 + 1200, &v14, v15);
  if (!v15[0]) {
    return 0;
  }
  sub_EE03E4(v4, &v13, v15);
  if (!v15[0]) {
    return 0;
  }
  uint64_t v11 = v13;
  uint64_t v12 = v14;
  sub_EE03E4(v4, &v12, v15);
  unsigned int v5 = *(_DWORD *)(v16 + 8);
  uint64_t v6 = *(void *)(a1 + 1968);
  sub_EE03E4(v4, &v11, v15);
  uint64_t result = v12;
  if (v12)
  {
    uint64_t v8 = *(void *)(a1 + 1968) + 80 * *(unsigned int *)(v16 + 8) + 8;
    uint64_t v9 = v6 + 80 * v5 + 8;
    while (v11)
    {
      if (result == v11) {
        return result;
      }
      if (*(_DWORD *)v8 < *(_DWORD *)v9
        || (*(_DWORD *)v9 >= *(_DWORD *)v8 ? (BOOL v10 = *(_DWORD *)(v8 + 4) < *(_DWORD *)(v9 + 4)) : (BOOL v10 = 0), v10))
      {
        if ((*(_DWORD *)(v9 + 64) & 0x80000000) != 0) {
          return 0;
        }
        uint64_t v12 = *(void *)(v9 + 24);
        if (!v12) {
          return 0;
        }
        sub_EE03E4(v4, &v12, v15);
        uint64_t v9 = *(void *)(a1 + 1968) + 80 * *(unsigned int *)(v16 + 8) + 8;
      }
      else if ((*(_DWORD *)(v8 + 64) & 0x80000000) != 0)
      {
        uint64_t v11 = 0;
      }
      else
      {
        uint64_t v11 = *(void *)(v8 + 24);
        if (v11)
        {
          sub_EE03E4(v4, &v11, v15);
          uint64_t v8 = *(void *)(a1 + 1968) + 80 * *(unsigned int *)(v16 + 8) + 8;
        }
      }
      uint64_t result = v12;
      if (!v12) {
        return result;
      }
    }
    return 0;
  }
  return result;
}

void sub_F7C148(uint64_t a1, uint64_t *a2, unsigned int *a3, int a4)
{
  unint64_t v55 = a2;
  if (*(unsigned char *)(a1 + 3048))
  {
    sub_F7D200((int32x2_t *)a1, a2);
    a2 = v55;
  }
  sub_F97D2C(*(void *)(a1 + 976) + 24, a2, v56);
  if (v56[0])
  {
    sub_F97D2C(*(void *)(a1 + 976) + 24, v55, v56);
    unsigned int v5 = *(uint64_t **)(v57 + 8);
    int v50 = *(uint64_t **)(v57 + 16);
    uint64_t v6 = v55;
    if (v5 != v50)
    {
      do
      {
        uint64_t v51 = v5;
        uint64_t v7 = (uint64_t *)(**(void **)(a1 + 976) + 32 * *v5);
        unint64_t v8 = (unint64_t)(v7[1] - *v7) >> 4;
        uint64_t v9 = (-858993459 * v8);
        if (v9)
        {
          uint64_t v10 = 0;
          uint64_t v52 = **(void **)(a1 + 976) + 32 * *v5;
          uint64_t v53 = (-858993459 * v8);
          do
          {
            uint64_t v11 = *v7;
            uint64_t v12 = (uint64_t *)(*v7 + 80 * v10);
            unint64_t v13 = *v12;
            if (*v12 == *v6)
            {
              int32x2_t v14 = *(int32x2_t *)a1;
              uint64_t v15 = *(void *)(a1 + 2968);
              unint64_t v16 = HIDWORD(v13);
              uint64_t v17 = (v13 << 47) & 0x1000000000000;
              unint64_t v18 = v13 >> 16;
              if (*(unsigned char *)(*(void *)a1 + 9586))
              {
                uint64_t v19 = 0;
                unint64_t v20 = 0x2127599BF4325C37 * ((v13 & 0xFFFFFFFFFFFF0000 | HIWORD(v17)) ^ (v13 >> 23));
                for (unint64_t i = v20 ^ (v20 >> 47); ; unint64_t i = v19 + v22)
                {
                  uint64_t v22 = i & (*(void *)(*(void *)&v14 + 9648) - 1);
                  unint64_t v23 = *(void *)(*(void *)(*(void *)&v14 + 9664) + 8 * v22);
                  if (*(_DWORD *)(*(void *)&v14 + 9656) == v23
                    && *(unsigned __int16 *)(*(void *)a1 + 9660) == WORD2(v23)
                    && (HIWORD(v23) & 1) != (*(unsigned char *)(*(void *)a1 + 9662) == 0))
                  {
                    break;
                  }
                  if ((!*(void *)(*(void *)&v14 + 9632)
                     || *(_DWORD *)(*(void *)&v14 + 9624) != v23
                     || *(unsigned __int16 *)(*(void *)a1 + 9628) != WORD2(v23)
                     || (HIWORD(v23) & 1) == (*(unsigned char *)(*(void *)a1 + 9630) == 0))
                    && v16 == v23
                    && (unsigned __int16)v18 == WORD2(v23)
                    && (v17 != 0) != (HIWORD(v23) & 1))
                  {
                    if (v22 != -1) {
                      goto LABEL_9;
                    }
                    break;
                  }
                  ++v19;
                }
              }
              uint64_t v24 = (uint64_t *)(*(void *)&v14 + 4232);
              sub_ED7040(*(void *)&v14 + 8, (v16 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)(unsigned __int16)v18 << 32) | v17) ^ 0x1000000000000, (uint64_t)v56);
              unint64_t v25 = sub_F17510(v24, v56, 0x3B9ACA00u, v15);
              uint64_t v6 = v55;
              int v26 = v25;
              if (v25 != -1)
              {
                unint64_t v27 = HIDWORD(v25);
                if (HIDWORD(v25) != 0x7FFFFFFF)
                {
                  int32x2_t v28 = *(int32x2_t *)a1;
                  uint64_t v29 = v11 + 80 * v10;
                  int v32 = *(_DWORD *)(v29 + 8);
                  uint64_t v31 = v29 + 8;
                  int v30 = v32;
                  uint64_t v33 = *(void *)(a1 + 2968);
                  unint64_t v34 = HIDWORD(*v55);
                  uint64_t v35 = (*v55 << 47) & 0x1000000000000;
                  if (*(unsigned char *)(*(void *)a1 + 9586))
                  {
                    uint64_t v36 = 0;
                    unint64_t v37 = 0x2127599BF4325C37
                        * ((*v55 & 0xFFFFFFFFFFFF0000 | HIWORD(v35)) ^ ((unint64_t)*v55 >> 23));
                    for (unint64_t j = v37 ^ (v37 >> 47); ; unint64_t j = v36 + v39)
                    {
                      uint64_t v39 = j & (*(void *)(*(void *)&v28 + 9648) - 1);
                      unint64_t v40 = *(void *)(*(void *)(*(void *)&v28 + 9664) + 8 * v39);
                      if (*(_DWORD *)(*(void *)&v28 + 9656) == v40
                        && *(unsigned __int16 *)(*(void *)a1 + 9660) == WORD2(v40)
                        && (HIWORD(v40) & 1) != (*(unsigned char *)(*(void *)a1 + 9662) == 0))
                      {
                        break;
                      }
                      if ((!*(void *)(*(void *)&v28 + 9632)
                         || *(_DWORD *)(*(void *)&v28 + 9624) != v40
                         || *(unsigned __int16 *)(*(void *)a1 + 9628) != WORD2(v40)
                         || (HIWORD(v40) & 1) == (*(unsigned char *)(*(void *)a1 + 9630) == 0))
                        && v34 == v40
                        && WORD1(*v55) == WORD2(v40)
                        && (v35 != 0) != (HIWORD(v40) & 1))
                      {
                        if (v39 == -1) {
                          break;
                        }
                        HIDWORD(v41) = 0x7FFFFFFF;
                        unsigned int v42 = v26 + 1;
                        uint64_t v9 = v53;
                        unsigned int v43 = *a3;
                        uint64_t v7 = (uint64_t *)v52;
                        if (*a3 < v26 + 1) {
                          goto LABEL_9;
                        }
                        goto LABEL_44;
                      }
                      ++v36;
                    }
                  }
                  unsigned int v44 = 1000000000 - v30;
                  int v45 = (uint64_t *)(*(void *)&v28 + 4232);
                  sub_ED7040(*(void *)&v28 + 8, (v34 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*v55) << 32) | v35) ^ 0x1000000000000, (uint64_t)v56);
                  unint64_t v41 = sub_F17510(v45, v56, v44, v33);
                  uint64_t v6 = v55;
                  unsigned int v42 = v26 - v41;
                  uint64_t v9 = v53;
                  unsigned int v43 = *a3;
                  uint64_t v7 = (uint64_t *)v52;
                  if (*a3 >= v26 - (int)v41)
                  {
LABEL_44:
                    int v46 = v27 - HIDWORD(v41);
                    if (v42 < v43 || (int)a3[1] >= v46)
                    {
                      uint64_t v47 = *(void *)a3;
                      unint64_t v48 = sub_F17140((uint64_t *)(*(void *)a1 + 4232), v12, v31, *(void *)(a1 + 2968));
                      uint64_t v6 = v55;
                      if (v48 != -1 && HIDWORD(v48) != 0x7FFFFFFF)
                      {
                        v56[0] = (int *)((v47 - v42 + v48) | ((unint64_t)(HIDWORD(v47) - v46 + HIDWORD(v48)) << 32));
                        sub_F785AC(a1, v55, (unsigned int *)v56, *v51, a4, v10, 0, 0);
                        uint64_t v6 = v55;
                      }
                    }
                  }
                }
              }
            }
LABEL_9:
            ++v10;
          }
          while (v10 != v9);
        }
        unsigned int v5 = v51 + 1;
      }
      while (v51 + 1 != v50);
    }
  }
}

BOOL sub_F7C6CC(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 3056);
  uint64_t v3 = *(unsigned int **)(a1 + 3072);
  uint64_t v4 = *(unsigned int **)(a1 + 3064);
  unint64_t v5 = *(unsigned int *)(a1 + 3052);
  if (v2 + v3 - v4 < v5) {
    return 0;
  }
  uint64_t v20 = 0;
  long long v8 = 0uLL;
  long long v19 = 0u;
  if (v4 == v3)
  {
    uint64_t v15 = 0;
  }
  else
  {
    do
    {
      while (1)
      {
        unsigned int v10 = *v4;
        unsigned int v18 = v10;
        uint64_t v11 = *(void *)(a1 + 928);
        unsigned int v12 = *(_DWORD *)(v11 + 24 * v10 + 8);
        if (*a2 >= v12)
        {
          int v13 = *(_DWORD *)(v11 + 24 * v10 + 12);
          if (v12 < *a2 || (int)a2[1] >= v13) {
            break;
          }
        }
        sub_745A4((uint64_t)&v19, &v18);
        if (++v4 == v3) {
          goto LABEL_12;
        }
      }
      ++*(_DWORD *)(a1 + 3056);
      ++v4;
    }
    while (v4 != v3);
LABEL_12:
    uint64_t v3 = *(unsigned int **)(a1 + 3064);
    long long v8 = v19;
    uint64_t v15 = v20;
    LODWORD(v2) = *(_DWORD *)(a1 + 3056);
    LODWORD(v5) = *(_DWORD *)(a1 + 3052);
  }
  *(_OWORD *)(a1 + 3064) = v8;
  uint64_t v16 = *(void *)(a1 + 3080);
  *(void *)(a1 + 3080) = v15;
  *(void *)&long long v19 = v3;
  uint64_t v20 = v16;
  BOOL v6 = v2 >= v5;
  if (v3)
  {
    *((void *)&v19 + 1) = v3;
    operator delete(v3);
  }
  return v6;
}

void sub_F7C804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F7C820(uint64_t a1, uint64_t *a2, unsigned int *a3, int a4)
{
  if (!*(unsigned char *)(a1 + 3048)) {
    return 4294967294;
  }
  sub_F7C148(a1, a2, a3, a4);
  uint64_t v7 = *(void *)(a1 + 3032);
  uint64_t v8 = *(void *)(v7 + 24);
  int v38 = *(_DWORD *)(v7 + 4224);
  unint64_t v39 = sub_F968AC(v8, HIDWORD(*a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32), ((unint64_t)*a2 >> 1) & 1, &v38);
  if (v39 > 0xFFFFFFFEFFFFFFFFLL || v39 == 0) {
    return 0;
  }
  LOWORD(v38) = sub_F9AF24(v7 + 24, (unint64_t *)a2, &v39);
  if ((_WORD)v38 == 0xFFFF) {
    return 0;
  }
  sub_F9B030(*(void *)(v7 + 8), (unsigned int *)&v39, (unsigned __int16 *)&v38, v7 + 4304);
  uint64_t v10 = *(void *)(v7 + 4304);
  uint64_t v11 = *(void *)(v7 + 4312);
  if (v10 != v11)
  {
    while (1)
    {
      unsigned int v16 = *(_DWORD *)(a1 + 1040);
      if (v16 != -1)
      {
        int v17 = *(_DWORD *)(v10 + 16);
        if (v17 != -1
          && *(_DWORD *)(v10 + 20) != 0x7FFFFFFF
          && *(void *)(v10 + 24) != 0x7FFFFFFFFFFFFFFFLL
          && v17 + *a3 > v16)
        {
          goto LABEL_11;
        }
      }
      unint64_t v18 = sub_F7CDBC((int32x2_t *)a1, (unsigned int *)v10);
      unint64_t v19 = v18;
      int v20 = *(_DWORD *)(v10 + 16);
      if (v20 == -1
        || (int v21 = *(_DWORD *)(v10 + 20), v21 == 0x7FFFFFFF)
        || *(void *)(v10 + 24) == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v12 = *(void *)(a1 + 3904);
        unint64_t v13 = v18 >> 6;
        uint64_t v14 = 1 << v18;
        uint64_t v15 = *(void *)(v12 + 8 * (v18 >> 6));
        if ((v15 & (1 << v18)) == 0)
        {
          uint64_t v25 = *(void *)(a1 + 24) + 32 * v18;
          int v26 = *(void **)v25;
          unint64_t v27 = *(void **)(v25 + 8);
          if (*(void **)v25 != v27)
          {
            do
            {
              LODWORD(v39) = 0;
              sub_F936B4(a1 + 816, v26, (int *)&v39);
              sub_F948C0((int32x2_t *)(a1 + 816));
              v26 += 10;
            }
            while (v26 != v27);
            uint64_t v12 = *(void *)(a1 + 3904);
            uint64_t v15 = *(void *)(v12 + 8 * v13);
          }
          *(void *)(v12 + 8 * v13) = v15 | v14;
        }
        ++*(void *)(a1 + 3936);
        goto LABEL_11;
      }
      if (!*(unsigned char *)(a1 + 3049)) {
        goto LABEL_42;
      }
      signed int v22 = *(_DWORD *)(a1 + 1044);
      if (v22 != 0x7FFFFFFF && (int)(v21 + a3[1]) > v22) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(*(void *)(a1 + 3880) + 40 * v18 + 32) != -1) {
        goto LABEL_42;
      }
      v23.n128_f64[0] = sub_F7CFE0(*(void *)(a1 + 3032), (unsigned int *)v10, (uint64_t)&v39);
      int v24 = v41;
      if (v41 != -1) {
        break;
      }
      uint64_t v28 = *(void *)(a1 + 3904);
      unint64_t v29 = v19 >> 6;
      uint64_t v30 = 1 << v19;
      uint64_t v31 = *(void *)(v28 + 8 * (v19 >> 6));
      if ((v31 & (1 << v19)) == 0)
      {
        uint64_t v32 = *(void *)(a1 + 24) + 32 * v19;
        unint64_t v34 = *(void **)v32;
        uint64_t v33 = *(void **)(v32 + 8);
        if (*(void **)v32 != v33)
        {
          do
          {
            int v38 = 0;
            sub_F936B4(a1 + 816, v34, &v38);
            sub_F948C0((int32x2_t *)(a1 + 816));
            v34 += 10;
          }
          while (v34 != v33);
          uint64_t v28 = *(void *)(a1 + 3904);
          uint64_t v30 = 1 << v19;
          unint64_t v29 = v19 >> 6;
          uint64_t v31 = *(void *)(v28 + 8 * (v19 >> 6));
        }
        *(void *)(v28 + 8 * v29) = v31 | v30;
      }
      ++*(void *)(a1 + 3928);
      if (!v41) {
        goto LABEL_37;
      }
LABEL_40:
      if (v24 != -1)
      {
        int v20 = *(_DWORD *)(v10 + 16);
        int v21 = *(_DWORD *)(v10 + 20);
LABEL_42:
        unint64_t v39 = (v20 + *a3) | ((unint64_t)(v21 + a3[1]) << 32);
        sub_F785AC(a1, a2, (unsigned int *)&v39, v19, a4, *(_DWORD *)(v10 + 8), 0, 1);
      }
LABEL_11:
      v10 += 32;
      if (v10 == v11) {
        return *(unsigned int *)(*(void *)(a1 + 3032) + 4228);
      }
    }
    __n128 v23 = sub_F91EC0(*(void *)(a1 + 3880) + 40 * v19, (uint64_t *)&v39);
    if (v41) {
      goto LABEL_40;
    }
LABEL_37:
    uint64_t v35 = v40;
    if (v40)
    {
      if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, __n128))v35->__on_zero_shared)(v35, v23);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    goto LABEL_40;
  }
  return *(unsigned int *)(*(void *)(a1 + 3032) + 4228);
}

void sub_F7CC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_F78528((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_F7CC3C(uint64_t a1, void *a2, int *a3, uint64_t a4, char a5, unsigned int *a6)
{
  unsigned int v17 = *a6;
  if (v17)
  {
    uint64_t v11 = a1 + 1064;
    do
    {
      if (sub_F963A0(**(void **)(a1 + 8), HIDWORD(*a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32), &v17))
      {
        unint64_t v12 = sub_F968AC(**(void **)(a1 + 8), HIDWORD(*a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32), (*a2 >> 1) & 1, &v17);
        unint64_t v16 = v12;
        if (v12) {
          BOOL v13 = v12 >= 0xFFFFFFFF00000000;
        }
        else {
          BOOL v13 = 1;
        }
        if (v13)
        {
          int v14 = *(_DWORD *)(a1 + 20);
          if (v14 != -1 && v17 == v14) {
            return 0xFFFFFFFFLL;
          }
        }
        else if (sub_F953E4(v11, &v16) == -1 && sub_F953E4(*(void *)(a1 + 976) + 800, &v16) == -1)
        {
          if (*(unsigned char *)(a1 + 3048) && v17 < *(_DWORD *)(*(void *)(a1 + 3032) + 4224)) {
            return 0;
          }
          if (!*(unsigned char *)(*(void *)a1 + 9585)
            || !sub_FA4908(*(void *)a1 + 4296, (unsigned int *)&v16, a3, a4, a5))
          {
            return v17;
          }
        }
      }
      --v17;
    }
    while (v17);
  }
  return 0;
}

uint64_t sub_F7CDBC(int32x2_t *a1, unsigned int *a2)
{
  uint64_t v4 = (uint64_t)&a1[386];
  sub_F78DE8((uint64_t)&a1[386], a2, v21);
  if (v21[0]) {
    return v21[3][1];
  }
  int32x2_t v6 = a1[4];
  int32x2_t v7 = a1[3];
  int32x2_t v8 = a1[379];
  sub_F98E98(*(void *)(*(void *)&v8 + 8), a2, *(void *)&v8 + 4256);
  sub_F9906C(*(void *)&v8 + 40, (uint64_t *)(*(void *)&v8 + 4256), *(_DWORD *)(*(void *)&v8 + 4232), 0, (uint64_t)&__p);
  signed int v22 = a1;
  sub_F770A8(a1 + 3, (uint64_t **)&__p, 0, (void **)&v22);
  unint64_t v5 = (uint64_t)(*(void *)&v6 - *(void *)&v7) >> 5;
  if (__p)
  {
    unint64_t v19 = __p;
    operator delete(__p);
  }
  sub_F99838(v4, a2, (uint64_t)&__p);
  uint64_t v9 = __p;
  if (v20)
  {
    uint64_t v10 = (void *)(*((void *)__p + 1) + 16 * (void)v19);
    *uint64_t v10 = *(void *)a2;
    v10[1] = -1;
  }
  *(void *)(v9[1] + 16 * (void)v19 + 8) = v5;
  sub_29603C((void **)&a1[482], a2);
  unint64_t v11 = (unint64_t)a1[489];
  int32x2_t v12 = a1[490];
  if (v11 == *(void *)&v12 << 6)
  {
    if ((uint64_t)(v11 + 1) < 0) {
      sub_2E00();
    }
    unint64_t v13 = *(void *)&v12 << 7;
    if (v13 <= (v11 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v11 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v14 = v13;
    }
    else {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_3D110((uint64_t)&a1[488], v14);
    unint64_t v11 = (unint64_t)a1[489];
  }
  a1[489] = (int32x2_t)(v11 + 1);
  *(void *)(*(void *)&a1[488] + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v11);
  int32x2_t v15 = a1[486];
  if (*(void *)&v15 >= *(void *)&a1[487])
  {
    unint64_t v16 = sub_F99F7C((void **)&a1[485]);
  }
  else
  {
    *(void *)(*(void *)&v15 + 32) = 0;
    *(_OWORD *)*(void *)&int32x2_t v15 = 0u;
    *(_OWORD *)(*(void *)&v15 + 16) = 0u;
    *(_DWORD *)(*(void *)&v15 + 32) = -1;
    unint64_t v16 = (char *)(*(void *)&v15 + 40);
  }
  a1[486] = (int32x2_t)v16;
  if (v5 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&a1[117] - *(void *)&a1[116]) >> 3)) {
    sub_F9A14C((char **)&a1[116]);
  }
  return v5;
}

void sub_F7CFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_F7CFE0@<D0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(unsigned char *)(a1 + 4249)) {
    goto LABEL_17;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v6 + 3880)) {
    goto LABEL_3;
  }
  unint64_t v18 = sub_3823E0(v6 + 8, *a2, 1);
  if (!v18) {
    goto LABEL_3;
  }
  unint64_t v19 = &v18[-*(int *)v18];
  if (*(unsigned __int16 *)v19 < 7u) {
    goto LABEL_3;
  }
  uint64_t v7 = *((unsigned __int16 *)v19 + 3);
  if (!v7) {
    goto LABEL_4;
  }
  char v20 = &v18[v7 + *(unsigned int *)&v18[v7]];
  uint64_t v21 = a2[1];
  if (*(_DWORD *)v20 <= v21)
  {
LABEL_3:
    uint64_t v7 = 0;
    goto LABEL_4;
  }
  uint64_t v7 = (uint64_t)&v20[4 * v21 + 4 + *(unsigned int *)&v20[4 * v21 + 4]];
LABEL_4:
  int32x2_t v8 = (unsigned __int16 *)(v7 - *(int *)v7);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (int *)(v7 + v9 + *(unsigned int *)(v7 + v9));
    unint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
    unsigned int v12 = *v11;
    if (v12 < 5) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v11 = (_WORD *)(&loc_1120530 + 1);
    unsigned int v12 = *(unsigned __int16 *)((char *)&loc_1120530 + 1);
    if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
      goto LABEL_17;
    }
  }
  uint64_t v13 = v11[2];
  if (v11[2]) {
    v13 += (uint64_t)v10 + *(unsigned int *)((char *)v10 + v13);
  }
  if (v12 >= 7)
  {
    uint64_t v14 = v11[3];
    if (v14 && v13 != 0)
    {
      signed int v22 = (unsigned int *)((char *)v10 + v14);
      uint64_t v23 = *v22;
      *(void *)a3 = v13;
      *(void *)(a3 + 8) = (char *)v22 + v23;
      *(void *)&double result = 0xFFFFFFFFLL;
      *(void *)(a3 + 16) = 0xFFFFFFFFLL;
      *(_DWORD *)(a3 + 24) = -1;
      *(_DWORD *)(a3 + 32) = 1;
      return result;
    }
  }
LABEL_17:
  sub_F9B2B8(a1, a2, &v25);
  if (!v25)
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = -1;
    unsigned int v17 = v26;
    if (!v26) {
      return result;
    }
    goto LABEL_23;
  }
  unint64_t v16 = v26;
  *(void *)a3 = v25;
  *(void *)(a3 + 8) = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a3 + 32) = 0;
  unsigned int v17 = v26;
  if (v26)
  {
LABEL_23:
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return result;
}

void sub_F7D200(int32x2_t *a1, _DWORD *a2)
{
  uint64_t v3 = (void *)a1[379];
  sub_F9A298(v3[1], a2, v3 + 535);
  uint64_t v4 = (unsigned char *)v3[535];
  unint64_t v5 = (unsigned char *)v3[536];
  int64_t v6 = v5 - v4;
  if (v5 != v4)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    uint64_t v7 = (char *)operator new(v5 - v4);
    memcpy(v7, v4, v6);
    uint64_t v8 = 0;
    uint64_t v9 = 8 * (v6 >> 3);
    do
    {
      sub_F7CDBC(a1, (unsigned int *)&v7[v8]);
      v8 += 8;
    }
    while (v9 != v8);
    operator delete(v7);
  }
}

void sub_F7D2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F7D304(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a2 + 14664;
  *(void *)(a1 + 16) = -1;
  sub_F9B438((void *)(a1 + 24), a2);
  *(void *)(a1 + 944) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  unint64_t v5 = (char *)operator new(0x18uLL);
  *(void *)(a1 + 928) = v5;
  *(void *)(a1 + 944) = v5 + 24;
  *(void *)unint64_t v5 = 0;
  *(_OWORD *)(v5 + 8) = xmmword_20E7B70;
  *(void *)(a1 + 936) = v5 + 24;
  if (a3) {
    uint64_t v6 = 128;
  }
  else {
    uint64_t v6 = 2;
  }
  *(_DWORD *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  uint64_t v7 = (char *)operator new(4 * v6);
  *(void *)(a1 + 1008) = v7;
  *(void *)(a1 + 1016) = v7;
  *(void *)(a1 + 1024) = &v7[4 * v6];
  uint64_t v8 = (char *)operator new(0x3F8uLL);
  *(void *)(a1 + 984) = v8;
  *(void *)(a1 + 992) = v8;
  *(void *)(a1 + 1000) = v8 + 1016;
  *(void *)(a1 + 1040) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 1048) = 0;
  *(unsigned char *)(a1 + 1052) = 0;
  sub_F9B594(a1 + 1056, *(uint64_t **)(a1 + 8));
  *(void *)(a1 + 1184) = 0;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(void *)(a1 + 1192) = -1;
  if (a3) {
    unsigned int v9 = 0x10000;
  }
  else {
    unsigned int v9 = 0x2000;
  }
  sub_F9B75C((void *)(a1 + 1200), v9);
  v14[0] = 256;
  v14[1] = (unint64_t)&v13;
  v14[2] = (unint64_t)&v12;
  v14[3] = (unint64_t)&v11;
  sub_F91654((void *)(a1 + 2080), v14);
  sub_F9B594(a1 + 2848, *(uint64_t **)(a1 + 8));
  *(_DWORD *)(a1 + 2960) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 2964) = 0;
  *(void *)(a1 + 3016) = 0;
  *(_OWORD *)(a1 + 2968) = 0u;
  *(_OWORD *)(a1 + 2984) = 0u;
  *(_OWORD *)(a1 + 3000) = 0u;
  *(_DWORD *)(a1 + 3024) = -1;
  *(_WORD *)(a1 + 3048) = 256;
  *(_OWORD *)(a1 + 3032) = 0u;
  *(void *)(a1 + 3052) = 0xFFFFFFFFLL;
  *(void *)(a1 + 3064) = 0;
  *(void *)(a1 + 3080) = 0;
  *(void *)(a1 + 3072) = 0;
  *(void *)(a1 + 3088) = &unk_20E1710;
  *(void *)(a1 + 3128) = 0;
  *(void *)(a1 + 3112) = 0;
  *(void *)(a1 + 3096) = 0;
  *(void *)(a1 + 3104) = 0;
  *(void *)(a1 + 3136) = &unk_20E1710;
  *(void *)(a1 + 3176) = 0;
  *(void *)(a1 + 3160) = 0;
  *(void *)(a1 + 3144) = 0;
  *(void *)(a1 + 3152) = 0;
  *(void *)(a1 + 3184) = &unk_20E1710;
  *(void *)(a1 + 3224) = 0;
  *(void *)(a1 + 3208) = 0;
  *(void *)(a1 + 3192) = 0;
  *(void *)(a1 + 3200) = 0;
  *(void *)(a1 + 3232) = &unk_20E1710;
  *(void *)(a1 + 3272) = 0;
  *(void *)(a1 + 3256) = 0;
  *(void *)(a1 + 3240) = 0;
  *(void *)(a1 + 3248) = 0;
  *(void *)(a1 + 3280) = &unk_20E1710;
  *(void *)(a1 + 3320) = 0;
  *(void *)(a1 + 3304) = 0;
  *(void *)(a1 + 3288) = 0;
  *(void *)(a1 + 3296) = 0;
  *(void *)(a1 + 3328) = &unk_20E1710;
  *(void *)(a1 + 3368) = 0;
  *(void *)(a1 + 3352) = 0;
  *(void *)(a1 + 3336) = 0;
  *(void *)(a1 + 3344) = 0;
  *(void *)(a1 + 3376) = &unk_20E1710;
  *(void *)(a1 + 3416) = 0;
  *(void *)(a1 + 3400) = 0;
  *(void *)(a1 + 3384) = 0;
  *(void *)(a1 + 3392) = 0;
  *(void *)(a1 + 3424) = &unk_20E1710;
  *(void *)(a1 + 3464) = 0;
  *(void *)(a1 + 3448) = 0;
  *(void *)(a1 + 3432) = 0;
  *(void *)(a1 + 3440) = 0;
  *(void *)(a1 + 3472) = &unk_20E1710;
  *(void *)(a1 + 3512) = 0;
  *(void *)(a1 + 3488) = 0;
  *(void *)(a1 + 3480) = 0;
  *(void *)(a1 + 3496) = 0;
  *(void *)(a1 + 3520) = &unk_20E1710;
  *(void *)(a1 + 3560) = 0;
  *(void *)(a1 + 3536) = 0;
  *(void *)(a1 + 3528) = 0;
  *(void *)(a1 + 3544) = 0;
  *(void *)(a1 + 3568) = &unk_20E1710;
  *(void *)(a1 + 3608) = 0;
  *(void *)(a1 + 3584) = 0;
  *(void *)(a1 + 3576) = 0;
  *(void *)(a1 + 3592) = 0;
  *(void *)(a1 + 3616) = &unk_20E1710;
  *(void *)(a1 + 3656) = 0;
  *(void *)(a1 + 3632) = 0;
  *(void *)(a1 + 3624) = 0;
  *(void *)(a1 + 3640) = 0;
  *(void *)(a1 + 3664) = &unk_20E1710;
  *(void *)(a1 + 3704) = 0;
  *(void *)(a1 + 3680) = 0;
  *(void *)(a1 + 3672) = 0;
  *(void *)(a1 + 3688) = 0;
  *(void *)(a1 + 3712) = &unk_20E1710;
  *(void *)(a1 + 3752) = 0;
  *(void *)(a1 + 3728) = 0;
  *(void *)(a1 + 3720) = 0;
  *(void *)(a1 + 3736) = 0;
  *(void *)(a1 + 3760) = &unk_20E1710;
  *(void *)(a1 + 3800) = 0;
  *(void *)(a1 + 3776) = 0;
  *(void *)(a1 + 3768) = 0;
  *(void *)(a1 + 3784) = 0;
  *(void *)(a1 + 3808) = &unk_20E1710;
  *(void *)(a1 + 3824) = 0;
  *(void *)(a1 + 3816) = 0;
  *(void *)(a1 + 3832) = 0;
  *(_OWORD *)(a1 + 3928) = 0u;
  *(_OWORD *)(a1 + 3912) = 0u;
  *(_OWORD *)(a1 + 3896) = 0u;
  *(_OWORD *)(a1 + 3880) = 0u;
  *(_OWORD *)(a1 + 3864) = 0u;
  *(_OWORD *)(a1 + 3848) = 0u;
  return a1;
}

void sub_F7D624(_Unwind_Exception *a1)
{
  uint64_t v7 = v3;
  sub_328138(v7);
  sub_5139D0(v5);
  unsigned int v9 = (void *)v1[146];
  if (v9)
  {
    v1[147] = v9;
    operator delete(v9);
  }
  sub_F7341C(v4);
  sub_3310C((uint64_t)(v1 + 123));
  uint64_t v10 = (void **)(v1 + 116);
  char v11 = *v6;
  if (*v6)
  {
    v1[120] = v11;
    operator delete(v11);
    char v12 = *v10;
    if (!*v10)
    {
LABEL_5:
      sub_BF10E8(v2);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    char v12 = *v10;
    if (!*v10) {
      goto LABEL_5;
    }
  }
  v1[117] = v12;
  operator delete(v12);
  sub_BF10E8(v2);
  _Unwind_Resume(a1);
}

void sub_F7D714(_Unwind_Exception *a1)
{
  sub_BF10E8(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_F7D72C(int32x2_t *a1, int32x2_t *a2, uint64_t a3, uint64_t a4, __int32 *a5, __int8 a6, __int32 a7, unsigned int a8, unsigned int a9)
{
  unsigned int v29 = a8;
  sub_F73894((uint64_t)a1);
  if (*a2 == *(void *)&a2[1])
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&__t);
      sub_188FC78(&__t, (uint64_t)"p2p_query called with empty origin terminal", 43);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
LABEL_15:
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (v28 < 0) {
        operator delete(v27);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
LABEL_20:
    unint64_t v19 = 0x7FFFFFFF00000000;
    uint64_t v20 = 0xFFFFFFFFLL;
    return v19 | v20;
  }
  if (*(void *)a3 == *(void *)(a3 + 8))
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&__t);
      sub_188FC78(&__t, (uint64_t)"p2p_query called with empty destination terminal", 48);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  __int32 v16 = *a5;
  if (*a5 == 0x7FFFFFFF)
  {
    __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    __int32 v16 = std::chrono::system_clock::to_time_t(&__t);
  }
  a1[370].i32[0] = v16;
  a1[370].i8[4] = a6;
  a1[371] = (int32x2_t)a4;
  a1[130].i32[0] = a7;
  if (&a1[146] != a2) {
    sub_BFF628(&a1[146], *(char **)a2, *(char **)&a2[1], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&a2[1] - *(void *)a2) >> 4));
  }
  a1[149] = a2[3];
  __t.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)a1;
  sub_F80DAC(a1 + 3, (uint64_t **)a3, 1, &__t);
  a1[122] = (int32x2_t)&a1[3];
  if (!(*(void *)&a1[14]
       + *(void *)&a1[8]
       + *(void *)&a1[20]
       + *(void *)&a1[26]
       + *(void *)&a1[32]
       + *(void *)&a1[38]
       + *(void *)&a1[44]
       + *(void *)&a1[50]
       + *(void *)&a1[56]
       + *(void *)&a1[62]
       + *(void *)&a1[68]
       + *(void *)&a1[74]
       + *(void *)&a1[80]
       + *(void *)&a1[86]
       + *(void *)&a1[92]
       + *(void *)&a1[98]))
    goto LABEL_20;
  sub_F7DB1C(a1);
  __t.__d_.__rep_ = 0;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = 0;
  uint64_t v26 = 0;
  sub_F7E23C((uint64_t)a1, &__t, v17, v18);
  if (__t.__d_.__rep_)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = __t.__d_.__rep_;
    operator delete((void *)__t.__d_.__rep_);
  }
  sub_F7E7F0((uint64_t)a1);
  sub_F7EBC8(a1, &v29, a9);
  unint64_t v19 = *(void *)(*(void *)&a1[116] + 8) & 0xFFFFFFFF00000000;
  uint64_t v20 = *(void *)(*(void *)&a1[116] + 8);
  return v19 | v20;
}

void sub_F7DA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_F7DB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_F7DB1C(int32x2_t *a1)
{
  if (a1[370].i8[4] != 2) {
    goto LABEL_9;
  }
  int32x2_t v2 = a1[371];
  if (!*(unsigned char *)(*(void *)&v2 + 204)) {
    goto LABEL_9;
  }
  unsigned int v3 = *(unsigned __int8 *)(*(void *)&v2 + 177);
  if (!v3) {
    goto LABEL_10;
  }
  if (*(unsigned char *)(*(void *)a1 + 30352)
    && sub_51D60((unsigned __int8 *)(*(void *)a1 + 8))
    && (unsigned int v4 = *(_DWORD *)(*(void *)&a1[371] + 200), v4 != -1))
  {
    unsigned int v3 = sub_F78BBC(*(uint64_t **)&a1[1]) - 1;
    if (v3 >= v4) {
      unsigned int v3 = v4;
    }
  }
  else
  {
LABEL_9:
    unsigned int v3 = 0;
  }
LABEL_10:
  unsigned int v48 = v3;
  long long __p = 0;
  int v46 = 0;
  uint64_t v47 = 0;
  uint64_t v5 = (uint64_t)*a1;
  uint64_t v6 = *(void *)a1 + 30392;
  uint64_t v7 = *(void *)(*(void *)a1 + 30416);
  if (v7)
  {
    uint64_t v8 = 8 * v7;
    unsigned int v9 = *(unint64_t **)(*(void *)a1 + 30432);
    while (1)
    {
      unint64_t v10 = HIDWORD(*v9);
      if ((*(_DWORD *)(*(void *)a1 + 30424) != *v9
         || *(unsigned __int16 *)(*(void *)a1 + 30428) != (unsigned __int16)v10
         || (HIWORD(*v9) & 1) == (*(unsigned char *)(*(void *)a1 + 30430) == 0))
        && (!*(void *)(v5 + 30400)
         || *(_DWORD *)v6 != *v9
         || *(unsigned __int16 *)(*(void *)a1 + 30396) != (unsigned __int16)v10
         || (HIWORD(*v9) & 1) == (*(unsigned char *)(*(void *)a1 + 30398) == 0)))
      {
        break;
      }
      ++v9;
      v8 -= 8;
      if (!v8) {
        goto LABEL_52;
      }
    }
  }
  else
  {
    unsigned int v9 = *(unint64_t **)(*(void *)a1 + 30432);
  }
  uint64_t v11 = *(void *)(*(void *)a1 + 30432) + 8 * v7;
  if (v9 != (unint64_t *)v11)
  {
    unint64_t v39 = (signed int *)&a1[370];
    unint64_t v40 = a1 + 132;
    do
    {
      unint64_t v41 = (*v9 >> 16) & 0xFFFF0000 | (*v9 << 32) | (2 * ((*v9 & 0xFF000000000000) == 0));
      if (!v48) {
        goto LABEL_31;
      }
      uint64_t v12 = (uint64_t)*a1;
      uint64_t v13 = (uint64_t)a1[371];
      int v14 = a1[370].u8[4];
      sub_ED7040(*(void *)a1 + 8, *v9, (uint64_t)&v49);
      v12 += 9424;
      int v15 = *v39;
      double v16 = sub_ECA6AC(v12, &v49, v13, *v39, v14);
      unint64_t v17 = sub_ECA410(v12, &v49, 0x3B9ACA00u, v13, v15, v14, v16);
      if (v17 == -1 || (v17 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000 || v18 == 0x7FFFFFFFFFFFFFFFLL)
      {
        int32x2_t v19 = a1[371];
        if (*(unsigned char *)(*(void *)&v19 + 177)) {
          unsigned int v20 = *(_DWORD *)(*(void *)&v19 + 196);
        }
        else {
          unsigned int v20 = -1;
        }
        unsigned int v21 = sub_F78BBC(*(uint64_t **)&a1[1]) - 1;
        if (v21 < v20) {
          unsigned int v20 = v21;
        }
        if (v20 <= v48 || sub_F821F0((uint64_t)*a1, &v41, v20, *(int **)&a1[371], v39, a1[370].u8[4]))
        {
          sub_F936B4((uint64_t)v40, &v41, (int *)&v48);
          sub_F9C8AC(v40);
          LODWORD(v49) = v48 - 1;
          sub_F936B4((uint64_t)&a1[356], &v41, (int *)&v49);
          sub_F9C8AC(a1 + 356);
          signed int v22 = (int *)sub_F968AC(**(void **)&a1[1], HIDWORD(v41) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v41) << 32), (v41 & 2) == 0, &v48);
          uint64_t v49 = v22;
          if (__p == v46 || (int *)v46[-1].i64[1] != v22) {
            sub_29603C(&__p, &v49);
          }
          unint64_t v44 = sub_F968AC(**(void **)&a1[1], HIDWORD(v41) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v41) << 32), (v41 >> 1) & 1, &v48);
          if (v46[-1].i64[1] != v44) {
            sub_29603C(&__p, &v44);
          }
        }
        else
        {
          LODWORD(v49) = v20 - 1;
          sub_F936B4((uint64_t)&a1[356], &v41, (int *)&v49);
          sub_F9C8AC(a1 + 356);
        }
      }
      else
      {
LABEL_31:
        LODWORD(v49) = 0;
        sub_F936B4((uint64_t)v40, &v41, (int *)&v49);
        sub_F9C8AC(v40);
      }
      if (++v9 == (unint64_t *)v11) {
        break;
      }
      while (1)
      {
        unint64_t v23 = HIDWORD(*v9);
        if ((*(_DWORD *)(v6 + 32) != *v9
           || *(unsigned __int16 *)(v6 + 36) != (unsigned __int16)v23
           || (HIWORD(*v9) & 1) == (*(unsigned char *)(v6 + 38) == 0))
          && (!*(void *)(v5 + 30400)
           || __PAIR64__(*(unsigned __int16 *)(v6 + 4), *(_DWORD *)v6) != __PAIR64__((unsigned __int16)v23, *v9)
           || (HIWORD(*v9) & 1) == (*(unsigned char *)(v6 + 6) == 0)))
        {
          break;
        }
        if (++v9 == (unint64_t *)v11) {
          goto LABEL_51;
        }
      }
    }
    while (v9 != (unint64_t *)v11);
LABEL_51:
    uint64_t v5 = (uint64_t)*a1;
  }
LABEL_52:
  uint64_t v24 = *(void *)(v5 + 30688);
  uint64_t v25 = v24 + 96 * *(void *)(v5 + 30584);
  uint64_t v49 = (int *)(v5 + 30440);
  uint64_t v50 = v24;
  uint64_t v51 = v25;
  sub_F556A4((uint64_t)&v49);
  uint64_t v26 = *(void *)(v5 + 30688) + 96 * *(void *)(v5 + 30584);
  unint64_t v41 = v5 + 30440;
  uint64_t v42 = v26;
  uint64_t v43 = v26;
  sub_F556A4((uint64_t)&v41);
  while (1)
  {
    uint64_t v27 = v50;
    if (v50 == v42) {
      break;
    }
    unint64_t v44 = (((*(void *)(v50 + 32) >> 16) & 0xFFFF0000 | (*(void *)(v50 + 32) << 32) | (2
                                                                                          * ((*(void *)(v50 + 32) & 0xFF000000000000) == 0)))
         + 4 * (unsigned __int16)*(_DWORD *)(v50 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v50 + 88) & 1;
    int v52 = 0;
    sub_F936B4((uint64_t)&a1[132], &v44, &v52);
    sub_F9C8AC(a1 + 132);
    unint64_t v44 = (((*(void *)(v27 + 72) >> 16) & 0xFFFF0000 | (*(void *)(v27 + 72) << 32) | (2
                                                                                          * ((*(void *)(v27 + 72) & 0xFF000000000000) == 0)))
         + (((unint64_t)*(unsigned int *)(v27 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v27 + 88) >> 1) & 1;
    int v52 = 0;
    sub_F936B4((uint64_t)&a1[132], &v44, &v52);
    sub_F9C8AC(a1 + 132);
    v50 += 96;
    sub_F556A4((uint64_t)&v49);
  }
  for (unint64_t i = *(void **)(sub_ED7C48(*(void *)a1 + 8) + 16); i; unint64_t i = (void *)*i)
  {
    uint64_t v49 = (int *)((i[2] >> 16) & 0xFFFF0000 | (i[2] << 32) | (2 * ((i[2] & 0xFF000000000000) == 0)));
    LODWORD(v41) = 0;
    sub_F936B4((uint64_t)&a1[132], &v49, (int *)&v41);
    sub_F9C8AC(a1 + 132);
  }
  unint64_t v29 = 126 - 2 * __clz(((char *)v46 - (unsigned char *)__p) >> 3);
  if (v46 == __p) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = v29;
  }
  sub_F98280((int8x16_t *)__p, v46, (uint64_t)&v49, v30, 1);
  uint64_t v31 = v46;
  if (__p != v46)
  {
    uint64_t v32 = (char *)__p - 8;
    do
    {
      if (v32 + 16 == (char *)v46) {
        goto LABEL_79;
      }
      int v33 = *((_DWORD *)v32 + 2);
      v32 += 8;
      LODWORD(v34) = *((_DWORD *)v32 + 2);
    }
    while (v33 != v34 || *((_DWORD *)v32 + 1) != *((_DWORD *)v32 + 3));
    uint64_t v36 = (int8x16_t *)(v32 + 16);
    if (v32 + 16 == (char *)v46)
    {
      unint64_t v37 = (int8x16_t *)(v32 + 8);
      if (v32 + 8 == (char *)v46) {
        goto LABEL_79;
      }
      goto LABEL_78;
    }
    do
    {
      if (v34 != v36->i32[0] || *((_DWORD *)v32 + 1) != v36->i32[1])
      {
        uint64_t v34 = v36->i64[0];
        *((void *)v32 + 1) = v36->i64[0];
        v32 += 8;
      }
      uint64_t v36 = (int8x16_t *)((char *)v36 + 8);
    }
    while (v36 != v31);
    unint64_t v37 = (int8x16_t *)(v32 + 8);
    if (v32 + 8 != (char *)v46) {
LABEL_78:
    }
      int v46 = v37;
  }
LABEL_79:
  sub_FA59A4((void **)(*(void *)a1 + 14680), (uint64_t *)&__p, *(int **)&a1[371], (signed int *)&a1[370], a1[370].u8[4], 4u);
  if (__p)
  {
    int v46 = (int8x16_t *)__p;
    operator delete(__p);
  }
}

void sub_F7E1E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_F7E23C(uint64_t a1, void *a2, double a3, double a4)
{
  uint64_t v4 = *(void *)(a1 + 1176);
  uint64_t v5 = *(void *)(a1 + 1168);
  unint64_t v45 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 4);
  if (v45 >> 30)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v55, "The source terminal of a query cannot have more than (2^30 - 1) nodes.");
    uint64_t v42 = (void *)sub_2F404((uint64_t)exception, &v55);
  }
  if (v4 != v5)
  {
    uint64_t v7 = 0;
    uint64_t v43 = (void *)(a1 + 2976);
    uint64_t v48 = a1 + 1200;
    uint64_t v50 = (uint64_t **)(a1 + 1056);
    do
    {
      uint64_t v8 = *(void *)(a1 + 1168);
      unsigned int v9 = (unint64_t *)(v8 + 80 * v7);
      unint64_t v10 = *(uint64_t **)a1;
      uint64_t v11 = **(void **)a1;
      if (*(unsigned char *)(v11 + 7774))
      {
        unint64_t v12 = *v9;
        unint64_t v13 = HIDWORD(*v9);
        int v14 = sub_290DEC(v11 + 3896, HIDWORD(*v9), 1);
        if (!v14) {
          goto LABEL_4;
        }
        int v15 = &v14[-*(int *)v14];
        if (*(unsigned __int16 *)v15 < 5u) {
          goto LABEL_4;
        }
        uint64_t v16 = *((unsigned __int16 *)v15 + 2);
        if (!v16
          || *(_DWORD *)&v14[v16 + *(unsigned int *)&v14[v16]] <= WORD1(v12)
          || !sub_295DB4(v11, v13 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v12) << 32)))
        {
          goto LABEL_4;
        }
        unint64_t v10 = *(uint64_t **)a1;
      }
      uint64_t v47 = sub_EC98F8(a3, a4, (uint64_t)(v10 + 1178), v8 + 80 * v7, v8 + 80 * v7 + 8, *(void *)(a1 + 2968), 1);
      unint64_t v46 = v47 & 0xFFFFFFFF00000000;
      if (v47 != -1 && (v47 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
      {
        int v18 = *(_DWORD *)(v8 + 80 * v7 + 8);
        a3 = sub_ED8808(*(void *)a1 + 8, *v9, 0, v43, 0);
        uint64_t v19 = -1431655765 * ((*(void *)(a1 + 2984) - *(void *)(a1 + 2976)) >> 5);
        if (v19)
        {
          uint64_t v20 = 0;
          int v21 = 0;
          unsigned int v49 = 1000000000 - v18;
          uint64_t v51 = 96 * v19;
          while (2)
          {
            uint64_t v22 = *(void *)(a1 + 2976);
            signed int v23 = *(_DWORD *)(a1 + 2960);
            uint64_t v24 = *(uint64_t **)a1;
            uint64_t v25 = *(void *)(a1 + 2968);
            int v26 = *(unsigned __int8 *)(a1 + 2964);
            if (*(unsigned char *)(*(void *)a1 + 30354))
            {
              if (sub_F558C4((uint64_t)(v24 + 3805), v22 + v20) != -1) {
                goto LABEL_18;
              }
              unint64_t v27 = *(void *)(v22 + v20 + 32);
              uint64_t v28 = 4 * (unsigned __int16)*(_DWORD *)(v22 + v20 + 80);
              *(void *)&long long v55 = (((((v27 >> 16) & 0xFFFF0000 | (v27 << 32) | (2 * ((v27 & 0xFF000000000000) == 0)))
                                 + v28) << 16) & 0xFFFF00000000 | ((((v27 >> 16) & 0xFFFF0000 | (v27 << 32) | (2 * ((v27 & 0xFF000000000000) == 0)))
                                                                    + v28) >> 32) | ((unint64_t)((v27 & 0xFF000000000000) == 0) << 48)) ^ 0x1000000000000;
              if (sub_F57414((uint64_t)(v24 + 3795), &v55) != -1) {
                goto LABEL_18;
              }
            }
            unint64_t v29 = sub_F5C6E0((uint64_t)(v24 + 1178), (int **)(v22 + v20), v49, v25, v23, v26);
            unint64_t v30 = v29 & 0xFFFFFFFF00000000;
            if (v29 == -1 || v30 == 0x7FFFFFFF00000000) {
              goto LABEL_18;
            }
            uint64_t v32 = v22 + v20;
            unint64_t v33 = v30 + v46;
            char v34 = *(unsigned char *)(a1 + 2964);
            *(void *)&long long v55 = (v30 + v46) | (v29 + v47);
            DWORD2(v55) = v23;
            BYTE12(v55) = v34;
            unint64_t v56 = (((*(void *)(v22 + v20 + 32) >> 16) & 0xFFFF0000 | (*(void *)(v22 + v20 + 32) << 32) | (2 * ((*(void *)(v22 + v20 + 32) & 0xFF000000000000) == 0)))
                 + 4 * (unsigned __int16)*(_DWORD *)(v22 + v20 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v22 + v20 + 88) & 1;
            unint64_t v57 = (((*(void *)(v22 + v20 + 72) >> 16) & 0xFFFF0000 | (*(void *)(v22 + v20 + 72) << 32) | (2 * ((*(void *)(v22 + v20 + 72) & 0xFF000000000000) == 0)))
                 + (((unint64_t)*(unsigned int *)(v32 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v32 + 88) >> 1) & 1;
            uint64_t v58 = *(void *)(v22 + v20 + 84);
            int v59 = v21;
            int v60 = 0;
            int v61 = v7 | 0x80000000;
            unint64_t v52 = ((((unint64_t)*(unsigned int *)(v32 + 80) >> 14) & 0x3FFFC | (*(void *)(v22 + v20 + 72) << 32))
                 + ((*(void *)(v22 + v20 + 72) >> 16) & 0xFFFF0000)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v32 + 88) >> 1) & 1 | (2 * ((*(void *)(v22 + v20 + 72) & 0xFF000000000000) == 0));
            int v35 = *(_DWORD *)(a1 + 1044);
            if (v35 != 0x7FFFFFFF)
            {
              sub_EE03E4(v48, (uint64_t *)&v52, v53);
              if (!v53[0]) {
                goto LABEL_37;
              }
              sub_EE03E4(v48, (uint64_t *)&v52, v53);
              uint64_t v36 = *(void *)(*(void *)(a1 + 1968) + 80 * *(unsigned int *)(v54 + 8) + 8);
              if (v55 < v36
                || v55 <= v36 && SDWORD1(v55) < SHIDWORD(v36))
              {
                sub_EE03E4(v48, (uint64_t *)&v52, v53);
                int v37 = *(_DWORD *)(*(void *)(a1 + 1968) + 80 * *(unsigned int *)(v54 + 8) + 12);
                int v38 = *(_DWORD *)(a1 + 1044);
                if (v38 >= v37 && v35 < SHIDWORD(v33))
                {
                  int v40 = -1;
                  goto LABEL_39;
                }
                if (v38 < v37)
                {
LABEL_37:
                  if (v35 >= SHIDWORD(v33))
                  {
                    int v40 = 1;
LABEL_39:
                    *(_DWORD *)(a1 + 1048) += v40;
                  }
                }
              }
            }
            sub_F788FC(v48, (uint64_t *)&v52, (uint64_t)&v55);
            v53[0] = ((((unint64_t)*(unsigned int *)(v32 + 80) >> 14) & 0x3FFFC | (*(void *)(v32 + 72) << 32))
                    + ((*(void *)(v32 + 72) >> 16) & 0xFFFF0000)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v32 + 88) >> 1) & 1 | (2 * ((*(void *)(v32 + 72) & 0xFF000000000000) == 0));
            LODWORD(v52) = 0;
            sub_F936B4((uint64_t)v50, v53, (int *)&v52);
            sub_F9B8C8(v50, a2);
            sub_F9C8AC((int32x2_t *)v50);
LABEL_18:
            ++v21;
            v20 += 96;
            if (v51 == v20) {
              break;
            }
            continue;
          }
        }
      }
LABEL_4:
      ++v7;
    }
    while (v7 != v45);
  }
}

void sub_F7E7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_F7E7F0(uint64_t a1)
{
  uint64_t v43 = -858993459 * ((*(void *)(a1 + 1176) - *(void *)(a1 + 1168)) >> 4);
  if (v43)
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(a1 + 1168);
      uint64_t v46 = v2;
      uint64_t v4 = (uint64_t *)(v3 + 80 * v2);
      if (*(unsigned char *)(a1 + 3048)) {
        sub_F820EC((int32x2_t *)a1, (_DWORD *)(v3 + 80 * v2));
      }
      sub_F97D2C(*(void *)(a1 + 976) + 24, v4, v51);
      if (v51[0])
      {
        uint64_t v7 = v3 + 80 * v46;
        unsigned int v50 = *(_DWORD *)(v7 + 8);
        uint64_t v8 = sub_EC98F8(v5, v6, *(void *)a1 + 9424, (uint64_t)v4, v7 + 8, *(void *)(a1 + 2968), 1);
        uint64_t v45 = v8;
        if (v8 != -1 && (v8 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
        {
          sub_F97D2C(*(void *)(a1 + 976) + 24, v4, v51);
          unint64_t v12 = *(uint64_t **)(v52 + 8);
          unint64_t v44 = *(uint64_t **)(v52 + 16);
          if (v12 != v44)
          {
            unsigned int v49 = v4;
            do
            {
              uint64_t v47 = v12;
              unint64_t v13 = (void *)(**(void **)(a1 + 976) + 32 * *v12);
              uint64_t v14 = (v13[1] - *v13) >> 4;
              uint64_t v15 = (-858993459 * v14);
              if (v15)
              {
                uint64_t v16 = 0;
                uint64_t v48 = (-858993459 * v14);
                do
                {
                  unint64_t v17 = (void *)(*v13 + 80 * v16);
                  if (*v17 == *v4)
                  {
                    uint64_t v18 = *v13 + 80 * v16;
                    unsigned int v19 = *(_DWORD *)(v18 + 8);
                    unint64_t v20 = sub_EC98F8(v10, v11, *(void *)a1 + 9424, (uint64_t)v17, v18 + 8, *(void *)(a1 + 2968), 1);
                    int v21 = v20;
                    unint64_t v22 = HIDWORD(v20);
                    BOOL v23 = v20 == -1 || HIDWORD(v20) == 0x7FFFFFFF;
                    if (!v23 && v19 >= v50)
                    {
                      uint64_t v25 = *(void **)a1;
                      uint64_t v26 = *(void *)(a1 + 2968);
                      unint64_t v27 = v4;
                      int v28 = *(unsigned __int8 *)(a1 + 2964);
                      unint64_t v29 = *v27;
                      unint64_t v30 = HIDWORD(*v27);
                      uint64_t v31 = (v29 << 47) & 0x1000000000000;
                      unint64_t v32 = v29 >> 16;
                      if (*(unsigned char *)(*(void *)a1 + 30354))
                      {
                        uint64_t v33 = 0;
                        unint64_t v34 = 0x2127599BF4325C37 * ((v29 & 0xFFFFFFFFFFFF0000 | HIWORD(v31)) ^ (v29 >> 23));
                        for (unint64_t i = v34 ^ (v34 >> 47); ; unint64_t i = v33 + v36)
                        {
                          uint64_t v36 = i & (v25[3802] - 1);
                          unint64_t v37 = *(void *)(v25[3804] + 8 * v36);
                          if (__PAIR64__(*(unsigned __int16 *)(*(void *)a1 + 30428), *(_DWORD *)(*(void *)a1 + 30424)) == __PAIR64__(WORD2(v37), v37)&& (HIWORD(v37) & 1) != (*(unsigned char *)(*(void *)a1 + 30430) == 0))
                          {
                            break;
                          }
                          if ((!v25[3800]
                             || __PAIR64__(*(unsigned __int16 *)(*(void *)a1 + 30396), *(_DWORD *)(*(void *)a1 + 30392)) != __PAIR64__(WORD2(v37), v37)|| (HIWORD(v37) & 1) == (*(unsigned char *)(*(void *)a1 + 30398) == 0))&& v30 == v37&& (unsigned __int16)v32 == WORD2(v37)&& (v31 != 0) != (HIWORD(v37) & 1))
                          {
                            if (v36 != -1) {
                              goto LABEL_16;
                            }
                            break;
                          }
                          ++v33;
                        }
                      }
                      unsigned int v38 = v19 - v50;
                      uint64_t v39 = (uint64_t)(v25 + 1178);
                      sub_ED7040((uint64_t)(v25 + 1), (v30 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)(unsigned __int16)v32 << 32) | v31) ^ 0x1000000000000, (uint64_t)v51);
                      signed int v40 = *(_DWORD *)(a1 + 2960);
                      double v41 = sub_ECA6AC(v39, v51, v26, v40, v28);
                      unint64_t v42 = sub_ECA410(v39, v51, v38, v26, v40, v28, v41);
                      if (v42 != -1 && HIDWORD(v42) != 0x7FFFFFFF)
                      {
                        LODWORD(v51[0]) = v42 + v21 + v45;
                        HIDWORD(v51[0]) = v22 + HIDWORD(v45) + HIDWORD(v42);
                        sub_F785AC(a1, v49, (unsigned int *)v51, *v47, v46, v16, 1, 0);
                      }
LABEL_16:
                      uint64_t v15 = v48;
                      uint64_t v4 = v49;
                    }
                  }
                  ++v16;
                }
                while (v16 != v15);
              }
              unint64_t v12 = v47 + 1;
            }
            while (v47 + 1 != v44);
          }
        }
      }
      uint64_t v2 = v46 + 1;
    }
    while (v46 + 1 != v43);
  }
}

void sub_F7EBC8(void *****a1, unsigned int *a2, unsigned int a3)
{
  if (*((unsigned char *)a1 + 2964) == 2 && (double v5 = a1[371], *((unsigned char *)v5 + 204)))
  {
    BOOL v86 = *((unsigned __int8 *)v5 + 177) != 0;
    double v6 = *a1;
    if (!*((unsigned char *)*a1 + 30352)) {
      goto LABEL_8;
    }
  }
  else
  {
    BOOL v86 = 0;
    double v6 = *a1;
    if (!*((unsigned char *)*a1 + 30352))
    {
LABEL_8:
      unsigned int v7 = 0;
      goto LABEL_9;
    }
  }
  if (!sub_51D60(v6 + 8)) {
    goto LABEL_8;
  }
  unsigned int v7 = sub_F78BBC((uint64_t *)a1[1]) - 1;
LABEL_9:
  BOOL v8 = *a2 >= v7 || *a2 == -1;
  if (!v8) {
    unsigned int v7 = *a2;
  }
  unsigned int v9 = a1[371];
  if (*((unsigned char *)v9 + 177))
  {
    unsigned int v10 = *((_DWORD *)v9 + 49);
    BOOL v11 = v10 >= v7 || v10 == -1;
    if (!v11 && *((unsigned char *)a1 + 2964) == 2) {
      unsigned int v7 = *((_DWORD *)v9 + 49);
    }
  }
  unsigned int v98 = v7;
  if (*((unsigned char *)v9 + 176))
  {
    unsigned int v13 = *((_DWORD *)v9 + 48);
    if (v13 != -1)
    {
      if (v7 >= v13) {
        unsigned int v7 = v13;
      }
      else {
        unsigned int v7 = v98;
      }
    }
  }
  unsigned int v97 = v7;
  uint64_t v89 = a1 + 378;
  double v88 = a1 + 375;
  unsigned int v14 = -1;
  int64x2_t v87 = vdupq_n_s64(0xFFFF0002uLL);
  while (*((_DWORD *)a1 + 518) && ((unint64_t)((char *)a1[250] - (char *)a1[249]) >> 2) < a3)
  {
    uint64_t v15 = &a1[246][10 * *(unsigned int *)a1[253]];
    v107[0] = *v15;
    long long v16 = v15[4];
    long long v18 = v15[1];
    long long v17 = v15[2];
    v107[3] = v15[3];
    long long v108 = v16;
    v107[1] = v18;
    v107[2] = v17;
    sub_F773C4((uint64_t)(a1 + 150));
    uint64_t v19 = (uint64_t)**a1;
    if (*(unsigned char *)(v19 + 7774))
    {
      unint64_t v20 = *(void *)&v107[0];
      int v21 = sub_290DEC(v19 + 3896, DWORD1(v107[0]), 1);
      if (!v21) {
        goto LABEL_100;
      }
      unint64_t v22 = &v21[-*(int *)v21];
      if (*(unsigned __int16 *)v22 < 5u) {
        goto LABEL_100;
      }
      uint64_t v23 = *((unsigned __int16 *)v22 + 2);
      if (!v23
        || *(_DWORD *)&v21[v23 + *(unsigned int *)&v21[v23]] <= WORD1(v20)
        || !sub_295DB4(v19, HIDWORD(v20) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v20) << 32)))
      {
        goto LABEL_100;
      }
    }
    if (*((unsigned char *)a1 + 1052)
      && !sub_2961B8(**a1, HIDWORD(*(void *)&v107[0]) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v107[0]) << 32)))
    {
      goto LABEL_100;
    }
    int v24 = DWORD2(v108);
    unsigned int v25 = *((_DWORD *)a1 + 260);
    if (v25 != -1 && DWORD2(v107[0]) > v25
      || *((unsigned char *)a1 + 3048) && sub_F810A8((uint64_t)a1, (unsigned int *)v107 + 2))
    {
      return;
    }
    int v26 = *((_DWORD *)a1 + 261);
    if (v26 != 0x7FFFFFFF && SHIDWORD(v107[0]) <= v26) {
      --*((_DWORD *)a1 + 262);
    }
    if (*v89 != -1
      && sub_F963A0((uint64_t)*a1[1], HIDWORD(*(void *)&v107[0]) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v107[0]) << 32), v89))
    {
      goto LABEL_100;
    }
    int v90 = v24 & 0x7FFFFFFF;
    unsigned int v27 = sub_F811FC((uint64_t)a1, (uint64_t *)v107, (uint64_t)v107 + 8, v24 & 0x7FFFFFFF);
    unsigned int v96 = v27;
    int v28 = *((_DWORD *)a1 + 740);
    signed int v29 = 0x7FFFFFFF;
    if (v28 != 0x7FFFFFFF)
    {
      if (v107[0] < 0) {
        char v30 = -5;
      }
      else {
        char v30 = 5;
      }
      signed int v29 = SHIDWORD(v107[0]) / 10
          + v28
          + (((103 * (char)(v30 + SHIDWORD(v107[0]) % 10)) >> 15) & 1)
          + ((103 * (char)(v30 + SHIDWORD(v107[0]) % 10)) >> 10);
    }
    signed int v95 = v29;
    uint64_t v31 = a1[371];
    int v32 = *((unsigned __int8 *)a1 + 2964);
    if (v32 != 2) {
      goto LABEL_61;
    }
    if (v29 == 0x7FFFFFFF) {
      goto LABEL_61;
    }
    if (!*((unsigned char *)v31 + 176)) {
      goto LABEL_61;
    }
    int v33 = *((_DWORD *)*a1 + 2368);
    if (v33 == 0x7FFFFFFF) {
      goto LABEL_61;
    }
    int v34 = *((_DWORD *)v31 + 43);
    int v35 = v34 / -10;
    int v36 = v34 % 10;
    char v37 = v34 < 0 ? -5 : 5;
    if ((int)(v35 + v33 + (((-103 * (char)(v37 + v36)) >> 15) & 1) + ((-103 * (char)(v37 + v36)) >> 10)) <= v29)
    {
      int v57 = *((_DWORD *)v31 + 42);
      int v58 = v57 / 10;
      int v59 = v57 % 10;
      if (v57 < 0) {
        char v60 = -5;
      }
      else {
        char v60 = 5;
      }
      BOOL v8 = (int)(v58 + v33 + (((103 * (char)(v60 + v59)) >> 15) & 1) + ((103 * (char)(v60 + v59)) >> 10)) < v29;
      unsigned int v38 = &v98;
      if (!v8) {
        unsigned int v38 = &v97;
      }
    }
    else
    {
LABEL_61:
      unsigned int v38 = &v98;
    }
    uint64_t v39 = *v38 >= v27 ? &v96 : v38;
    int v40 = sub_F8161C((uint64_t)a1, v107, (int *)v31, &v95, v32, v39);
    int v94 = v40;
    if (v40 == -1)
    {
LABEL_100:
      int v71 = 2;
      goto LABEL_101;
    }
    if (v40)
    {
      unint64_t v55 = sub_F968AC((uint64_t)*a1[1], HIDWORD(*(void *)&v107[0]) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v107[0]) << 32), (v107[0] & 2) == 0, &v94);
      unint64_t v93 = v55;
      if (!v55 || v55 > 0xFFFFFFFEFFFFFFFFLL) {
        goto LABEL_100;
      }
      int v56 = v86 && !sub_F817D8((uint64_t **)a1 + 356, &v93) ? 0 : *((unsigned __int8 *)a1 + 2964);
      sub_FA4E90(*a1 + 1835, *(unint64_t *)&v107[0], &v94, 0, (int *)a1[371], &v95, v56, (uint64_t)v88);
      if (a1[375] == a1[376]) {
        goto LABEL_100;
      }
      sub_5217C8((uint64_t)(a1 + 260), &v93, (uint64_t)&v99);
      unint64_t v61 = v99;
      if (v101.i8[0])
      {
        uint64_t v62 = *(void *)(v99 + 8) + 12 * v100;
        *(void *)uint64_t v62 = v93;
        *(_DWORD *)(v62 + 8) = 0x7FFFFFFF;
      }
      uint64_t v63 = *(void *)(v61 + 8) + 12 * v100;
      int v66 = *(_DWORD *)(v63 + 8);
      unint64_t v64 = (_DWORD *)(v63 + 8);
      int v65 = v66;
      if (v66 == 0x7FFFFFFF || SHIDWORD(v107[0]) < v65) {
        _DWORD *v64 = HIDWORD(v107[0]);
      }
      uint64_t v67 = -858993459 * ((unint64_t)((char *)a1[376] - (char *)a1[375]) >> 3);
      if (v67)
      {
        uint64_t v68 = 0;
        int v69 = 0;
        uint64_t v70 = 40 * v67;
        do
        {
          uint64_t v72 = *v88 + v68;
          uint64_t v73 = *(void *)(v72 + 28);
          unint64_t v74 = v73 & 0xFFFFFFFF00000000;
          if (v73 != -1 && v74 != 0x7FFFFFFF00000000)
          {
            unint64_t v99 = (v74 + *((void *)&v107[0] + 1)) & 0xFFFFFFFF00000000 | (v73 + DWORD2(v107[0]));
            LODWORD(v100) = v95;
            BYTE4(v100) = v56;
            int64x2_t v101 = v87;
            *(void *)&long long v102 = 640;
            int v104 = v69;
            int v105 = v94;
            int v106 = v90;
            int v76 = *(_DWORD *)(v72 + 32);
            long long v77 = *(_OWORD *)(v72 + 16);
            int64x2_t v101 = *(int64x2_t *)v72;
            long long v102 = v77;
            int v103 = v76;
            uint64_t v92 = *(void *)(v72 + 8);
            sub_F77294((uint64_t)a1, &v92, &v99);
          }
          ++v69;
          v68 += 40;
        }
        while (v70 != v68);
      }
    }
    else
    {
      if (!*((unsigned char *)a1 + 3048)) {
        sub_F818E8((uint64_t)a1, (uint64_t *)v107, (uint64_t *)v107 + 1, v90);
      }
      sub_ED8808((uint64_t)(*a1 + 1), *(unint64_t *)&v107[0], 0, a1 + 372, 0);
      uint64_t v41 = -1431655765 * ((unint64_t)((char *)a1[373] - (char *)a1[372]) >> 5);
      if (v41)
      {
        unint64_t v42 = 0;
        int v43 = 0;
        uint64_t v44 = 96 * v41;
        do
        {
          uint64_t v45 = a1[372];
          uint64_t v46 = (uint64_t *)*a1;
          uint64_t v47 = (uint64_t)a1[371];
          int v48 = *((unsigned __int8 *)a1 + 2964);
          if (!*((unsigned char *)*a1 + 30354)
            || sub_F558C4((uint64_t)(v46 + 3805), (uint64_t)&v45[v42 / 8]) == -1
            && (unint64_t v49 = (unint64_t)v45[v42 / 8 + 4],
                uint64_t v50 = 4 * (unsigned __int16)LODWORD(v45[v42 / 8 + 10]),
                unint64_t v99 = (((((v49 >> 16) & 0xFFFF0000 | (v49 << 32) | (2 * ((v49 & 0xFF000000000000) == 0))) + v50) << 16) & 0xFFFF00000000 | ((((v49 >> 16) & 0xFFFF0000 | (v49 << 32) | (2 * ((v49 & 0xFF000000000000) == 0))) + v50) >> 32) | ((unint64_t)((v49 & 0xFF000000000000) == 0) << 48)) ^ 0x1000000000000,
                sub_F57414((uint64_t)(v46 + 3795), &v99) == -1))
          {
            unint64_t v51 = sub_F5C6E0((uint64_t)(v46 + 1178), (int **)&v45[v42 / 8], 0x3B9ACA00u, v47, v95, v48);
            unint64_t v52 = v51 & 0xFFFFFFFF00000000;
            if (v51 != -1 && v52 != 0x7FFFFFFF00000000)
            {
              unint64_t v93 = ((((unint64_t)LODWORD(v45[v42 / 8 + 10]) >> 14) & 0x3FFFC | ((void)v45[v42 / 8 + 9] << 32))
                   + (((unint64_t)v45[v42 / 8 + 9] >> 16) & 0xFFFF0000)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)LOBYTE(v45[v42 / 8 + 11]) >> 1) & 1 | (2 * (((unint64_t)v45[v42 / 8 + 9] & 0xFF000000000000) == 0));
              char v54 = *((unsigned char *)a1 + 2964);
              unint64_t v99 = (*((void *)&v107[0] + 1) + v52) & 0xFFFFFFFF00000000 | (DWORD2(v107[0]) + v51);
              LODWORD(v100) = v95;
              BYTE4(v100) = v54;
              v101.i64[0] = ((((unint64_t)v45[v42 / 8 + 4] >> 16) & 0xFFFF0000 | ((void)v45[v42 / 8 + 4] << 32) | (2 * (((unint64_t)v45[v42 / 8 + 4] & 0xFF000000000000) == 0)))
                           + 4 * (unsigned __int16)LODWORD(v45[v42 / 8 + 10])) & 0xFFFFFFFFFFFFFFFELL | (uint64_t)v45[v42 / 8 + 11] & 1;
              v101.i64[1] = ((((unint64_t)v45[v42 / 8 + 9] >> 16) & 0xFFFF0000 | ((void)v45[v42 / 8 + 9] << 32) | (2 * (((unint64_t)v45[v42 / 8 + 9] & 0xFF000000000000) == 0)))
                           + (((unint64_t)LODWORD(v45[v42 / 8 + 10]) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)LOBYTE(v45[v42 / 8 + 11]) >> 1) & 1;
              *(void *)&long long v102 = *(void ****)((char *)&v45[v42 / 8 + 10] + 4);
              int v104 = v43;
              int v105 = 0;
              int v106 = v90;
              sub_F77294((uint64_t)a1, (uint64_t *)&v93, &v99);
            }
          }
          ++v43;
          v42 += 96;
        }
        while (v44 != v42);
      }
    }
    int v78 = *((_DWORD *)a1 + 261);
    if (v78 == 0x7FFFFFFF) {
      goto LABEL_110;
    }
    int v71 = 0;
    if (*((_DWORD *)a1 + 262) || v14 != -1) {
      goto LABEL_101;
    }
    int v79 = a1[119];
    unint64_t v80 = a1[120];
    if (v79 == v80)
    {
      int v71 = 3;
      unsigned int v14 = -1;
      goto LABEL_101;
    }
    unsigned int v14 = 0;
    int v81 = a1[116];
    do
    {
      if (0xAAAAAAAAAAAAAAABLL * (a1[117] - v81) > *v79) {
        unint64_t v82 = (unint64_t)v81[3 * *v79 + 1];
      }
      else {
        unint64_t v82 = 0x7FFFFFFFFFFFFFFFLL;
      }
      unint64_t v83 = HIDWORD(v82);
      if (v14 > v82) {
        LODWORD(v82) = v14;
      }
      if (v78 >= (int)v83) {
        unsigned int v14 = v82;
      }
      ++v79;
    }
    while (v79 != v80);
    unsigned int v84 = *((_DWORD *)a1 + 260);
    if (v84 != -1 && v14 >= v84)
    {
LABEL_110:
      int v71 = 0;
    }
    else
    {
      int v71 = 0;
      *((_DWORD *)a1 + 260) = v14;
    }
LABEL_101:
    if (v71 == 3) {
      return;
    }
  }
}

void sub_F7F5BC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, char a5, _DWORD *a6, int a7, unsigned int *a8, uint64_t *a9, void *a10, unsigned int a11, int a12, int a13)
{
  sub_F73894(a1);
  *(_DWORD *)(a1 + 2960) = *a4;
  *(unsigned char *)(a1 + 2964) = a5;
  *(void *)(a1 + 2968) = a3;
  if (a1 + 1168 != a2) {
    sub_BFF628((void *)(a1 + 1168), *(char **)a2, *(char **)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
  }
  *(void *)(a1 + 1192) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 1040) = *a6;
  *(_DWORD *)(a1 + 1044) = a7;
  *(_DWORD *)(a1 + 20) = a13;
  *(void *)(a1 + 976) = a1 + 24;
  sub_F7DB1C((int32x2_t *)a1);
  sub_F7E23C(a1, a10, v20, v21);
  uint64_t v23 = *a9;
  uint64_t v22 = a9[1];
  if (*a9 != v22)
  {
    do
    {
      int v25 = *(_DWORD *)(v23 + 8);
      sub_F936B4(a1 + 1056, (void *)v23, &v25);
      sub_F9B8C8((uint64_t **)(a1 + 1056), a10);
      sub_F9C8AC((int32x2_t *)(a1 + 1056));
      v23 += 16;
    }
    while (v23 != v22);
  }
  sub_F7EBC8((void *****)a1, a8, a11);
}

void sub_F7F6F8(int32x2_t *a1, int32x2_t *a2, uint64_t ***a3, uint64_t a4, __int32 a5, __int8 a6, __int32 a7, __int32 a8, unsigned int a9, int a10, unsigned int a11)
{
  sub_F73894((uint64_t)a1);
  uint64_t v19 = *a3;
  long long v18 = a3[1];
  if (*a3 == v18)
  {
    double v20 = *a3;
  }
  else
  {
    do
    {
      int v24 = a1;
      sub_F80DAC(a1 + 3, v19, 1, (void **)&v24);
      v19 += 4;
    }
    while (v19 != v18);
    uint64_t v19 = *a3;
    double v20 = a3[1];
  }
  unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&a1[117] - *(void *)&a1[116]) >> 3);
  unint64_t v22 = ((char *)v20 - (char *)v19) >> 5;
  if (v22 > v21) {
    sub_F92E44((void **)&a1[116], v22 - v21);
  }
  a1[122] = (int32x2_t)&a1[3];
  sub_F7F80C(a1, a2, a4, a5, a6, a7, a8, a9, a11);
}

void sub_F7F80C(int32x2_t *a1, int32x2_t *a2, uint64_t a3, __int32 a4, __int8 a5, __int32 a6, __int32 a7, unsigned int a8, unsigned int a9)
{
  unsigned int v20 = a8;
  a1[370].i32[0] = a4;
  a1[370].i8[4] = a5;
  a1[371] = (int32x2_t)a3;
  unsigned int v13 = a1 + 146;
  if (v13 != a2) {
    sub_BFF628(v13, *(char **)a2, *(char **)&a2[1], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&a2[1] - *(void *)a2) >> 4));
  }
  a1[149] = a2[3];
  a1[130].i32[0] = a6;
  a1[130].i32[1] = a7;
  unsigned int v14 = (void *)a1[122];
  if (v14[11]
     + v14[5]
     + v14[17]
     + v14[23]
     + v14[29]
     + v14[35]
     + v14[41]
     + v14[47]
     + v14[53]
     + v14[59]
     + v14[65]
     + v14[71]
     + v14[77]
     + v14[83]
     + v14[89]
     + v14[95]
    || a1[381].i8[0])
  {
    sub_F7DB1C(a1);
    long long __p = 0;
    long long v18 = 0;
    uint64_t v19 = 0;
    sub_F7E23C((uint64_t)a1, &__p, v15, v16);
    if (__p)
    {
      long long v18 = __p;
      operator delete(__p);
    }
    sub_F7E7F0((uint64_t)a1);
    sub_F7EBC8(a1, &v20, a9);
  }
}

void sub_F7F964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F7F980(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 928);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 936) - v3) >> 3) <= a2 || !*(void *)(v3 + 24 * a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v9, a2);
    double v6 = std::string::insert(&v9, 0, "No valid data for target id ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v6->__r_.__value_.__r.__words[2];
    long long v10 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    BOOL v8 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  return *(_DWORD *)(v3 + 24 * a2 + 20) & 0x3FFFFFFF;
}

void sub_F7FA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F7FAB4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_EAFC08((uint64_t)a2);
  double v6 = 0;
  sub_F7FCD8(a1, 0, (uint64_t)v5, a2);
  uint64_t result = (uint64_t)v6;
  if (v6 == v5) {
    return (*(uint64_t (**)(void *))(v5[0] + 32))(v5);
  }
  if (v6) {
    return (*(uint64_t (**)(void))(*v6 + 40))();
  }
  return result;
}

void sub_F7FB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13 == v14) {
    sub_20B17F8();
  }
  else {
    sub_20B182C(a13);
  }
  sub_405F44(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_F7FBD0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  sub_EAFC08((uint64_t)a3);
  BOOL v8 = 0;
  sub_F7FCD8(a1, a2, (uint64_t)v7, a3);
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

void sub_F7FCBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_F75CDC((uint64_t *)va);
  sub_405F44(v2);
  _Unwind_Resume(a1);
}

unint64_t sub_F7FCD8(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  sub_EAD268((uint64_t)a4);
  uint64_t v8 = *(void *)(a1 + 928);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 936) - v8) >> 3) <= a2) {
    return 0;
  }
  unint64_t v9 = *(void *)(v8 + 24 * a2);
  if (v9)
  {
    if (!*(unsigned char *)(a1 + 3048) || *(unsigned char *)(a1 + 3049))
    {
      uint64_t v10 = v8 + 24 * a2;
      std::string::size_type v11 = (_DWORD *)(v10 + 20);
      if ((*(unsigned char *)(v10 + 23) & 0x40) != 0)
      {
        sub_ED7040(*(void *)a1 + 8, (HIDWORD(v9) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(v9) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((v9 >> 1) & 1) << 48)) ^ 0x1000000000000, (uint64_t)v14);
        sub_EAFC44((uint64_t)a4, v9, v14);
        sub_EAD920((uint64_t)a4, *(void *)(a1 + 1168) + 80 * (*v11 & 0x3FFFFFFF) + 8);
        unint64_t v9 = 0;
        uint64_t v12 = 32 * a2;
        if ((*v11 & 0x80000000) != 0)
        {
LABEL_10:
          sub_F80548((uint64_t *)a1, (void **)(v8 + 24 * a2), *(void *)(a1 + 3880) + 40 * a2, (unint64_t *)(*(void *)(**(void **)(a1 + 976) + v12) + 80* *(unsigned int *)(v8 + 24 * a2 + 16)), (uint64_t)v14);
          sub_EB10BC((uint64_t)a4, (uint64_t)v14);
          sub_405F44((uint64_t)v14);
        }
      }
      else
      {
        unint64_t v9 = sub_F80004(a1, (uint64_t *)(v8 + 24 * a2), a3, a4);
        uint64_t v12 = 32 * a2;
        if ((*v11 & 0x80000000) != 0) {
          goto LABEL_10;
        }
      }
      sub_EADAA8((uint64_t)a4, *(void *)(**(void **)(a1 + 976) + v12) + 80 * *(unsigned int *)(v8 + 24 * a2 + 16) + 8);
      return v9;
    }
    return 0;
  }
  return v9;
}

void sub_F7FEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_F7FEFC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  sub_EAFC08((uint64_t)a3);
  uint64_t v8 = 0;
  sub_F80004(a1, a2, (uint64_t)v7, a3);
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

void sub_F7FFE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_F75CDC((uint64_t *)va);
  sub_405F44(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_F80004(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  sub_EAD268((uint64_t)a4);
  uint64_t v8 = *a2;
  if (!*a2) {
    return 0;
  }
  uint64_t v39 = a2;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v44 = v8;
  do
  {
    sub_EE03E4(a1 + 1200, &v44, &v52);
    unsigned int v9 = *(_DWORD *)(*((void *)&v53 + 1) + 8);
    uint64_t v10 = *(void *)(a1 + 1968);
    sub_F7668C(&v45, v10 + 80 * v9 + 8);
    if ((*(_DWORD *)(v10 + 80 * v9 + 72) & 0x80000000) != 0)
    {
      uint64_t v44 = 0;
      std::string::size_type v11 = v45;
      uint64_t v12 = v46;
      if (v45 != v46) {
        goto LABEL_6;
      }
LABEL_24:
      uint64_t v23 = 0;
      if (v11) {
        goto LABEL_42;
      }
      return v23;
    }
    uint64_t v44 = *(void *)(v10 + 80 * v9 + 24);
  }
  while (v44);
  std::string::size_type v11 = v45;
  uint64_t v12 = v46;
  if (v45 == v46) {
    goto LABEL_24;
  }
LABEL_6:
  if (!*(void *)(a3 + 24))
  {
    uint64_t v13 = v12 - 72;
    if (v12 - 72 > v11)
    {
      uint64_t v14 = v11 + 72;
      do
      {
        long long v53 = *(_OWORD *)(v14 - 56);
        *(_OWORD *)char v54 = *(_OWORD *)(v14 - 40);
        *(_OWORD *)&v54[16] = *(_OWORD *)(v14 - 24);
        *(void *)&unsigned char v54[32] = *((void *)v14 - 1);
        long long v52 = *(_OWORD *)(v14 - 72);
        *(_OWORD *)(v14 - 72) = *(_OWORD *)v13;
        long long v16 = *((_OWORD *)v13 + 2);
        long long v15 = *((_OWORD *)v13 + 3);
        int v17 = *((_DWORD *)v13 + 16);
        *(_OWORD *)(v14 - 56) = *((_OWORD *)v13 + 1);
        *((_DWORD *)v14 - 2) = v17;
        *(_OWORD *)(v14 - 24) = v15;
        *(_OWORD *)(v14 - 40) = v16;
        *(_OWORD *)uint64_t v13 = v52;
        *((_DWORD *)v13 + 16) = *(_DWORD *)&v54[32];
        *((_OWORD *)v13 + 3) = *(_OWORD *)&v54[16];
        *((_OWORD *)v13 + 2) = *(_OWORD *)v54;
        *((_OWORD *)v13 + 1) = v53;
        v13 -= 72;
        BOOL v18 = v14 >= v13;
        v14 += 72;
      }
      while (!v18);
    }
  }
  v43[0] = a3;
  v43[1] = (uint64_t)a4;
  long long __p = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  while (!*((_DWORD *)v11 + 15))
  {
    if (*(void *)(a3 + 24) && !sub_EAE144(a4))
    {
      *(void *)&long long v52 = *((void *)v11 + 3);
      uint64_t v19 = *(void *)(a3 + 24);
      if (!v19) {
        sub_29F82C();
      }
      if ((*(uint64_t (**)(uint64_t, long long *))(*(void *)v19 + 48))(v19, &v52)) {
        goto LABEL_28;
      }
    }
    uint64_t v20 = *(void *)a1 + 8;
    sub_ED7040(v20, (HIDWORD(*((void *)v11 + 2)) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(*((void *)v11 + 2)) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((*((void *)v11 + 2) >> 1) & 1) << 48)) ^ 0x1000000000000, (uint64_t)v50);
    sub_ED7040(v20, (HIDWORD(*((void *)v11 + 3)) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(*((void *)v11 + 3)) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((*((void *)v11 + 3) >> 1) & 1) << 48)) ^ 0x1000000000000, (uint64_t)v48);
    int v21 = *((_DWORD *)v11 + 4);
    int v22 = *((_DWORD *)v11 + 6);
    long long v52 = v50[0];
    long long v53 = v50[1];
    *(void *)char v54 = v51;
    *(_OWORD *)&v54[8] = v48[0];
    *(_OWORD *)&v54[24] = v48[1];
    *(void *)&v54[40] = v49;
    *(_DWORD *)&unsigned char v54[48] = (v22 << 14) & 0x3FFF0000 | ((unsigned __int16)v21 >> 2);
    *(void *)&v54[52] = *((void *)v11 + 4);
    sub_EAFD8C((uint64_t)a4, (int **)&v52);
LABEL_12:
    v11 += 72;
    if (v11 == v12)
    {
      char v24 = 1;
      if (!*(void *)(a3 + 24)) {
        goto LABEL_34;
      }
      goto LABEL_29;
    }
  }
  sub_FBBF58((void **)(*(void *)a1 + 19984), (uint64_t)(v11 + 16), *(int **)(a1 + 2968), (signed int *)v11 + 2, v11[12], &__p);
  if (__p == v41)
  {
    sub_EAD268((uint64_t)a4);
    goto LABEL_39;
  }
  if ((sub_F8083C(v43, (int ***)&__p) & 1) == 0) {
    goto LABEL_12;
  }
LABEL_28:
  char v24 = 0;
  if (!*(void *)(a3 + 24)) {
    goto LABEL_34;
  }
LABEL_29:
  unint64_t v25 = *(void *)sub_5231C((uint64_t)a4);
  uint64_t v26 = *(void *)(sub_5231C((uint64_t)a4) + 8);
  if (v25 != v26)
  {
    unsigned int v27 = (_OWORD *)(v26 - 96);
    if ((unint64_t)v27 > v25)
    {
      unint64_t v28 = v25 + 96;
      do
      {
        *(_OWORD *)char v54 = *(_OWORD *)(v28 - 64);
        *(_OWORD *)&v54[16] = *(_OWORD *)(v28 - 48);
        *(_OWORD *)&unsigned char v54[32] = *(_OWORD *)(v28 - 32);
        *(_OWORD *)&unsigned char v54[48] = *(_OWORD *)(v28 - 16);
        long long v52 = *(_OWORD *)(v28 - 96);
        long long v53 = *(_OWORD *)(v28 - 80);
        long long v29 = v27[1];
        *(_OWORD *)(v28 - 96) = *v27;
        *(_OWORD *)(v28 - 80) = v29;
        long long v31 = v27[3];
        long long v30 = v27[4];
        long long v32 = v27[2];
        *(_OWORD *)(v28 - 20) = *(_OWORD *)((char *)v27 + 76);
        *(_OWORD *)(v28 - 48) = v31;
        *(_OWORD *)(v28 - 32) = v30;
        *(_OWORD *)(v28 - 64) = v32;
        v27[4] = *(_OWORD *)&v54[32];
        *(_OWORD *)((char *)v27 + 76) = *(_OWORD *)&v54[44];
        *unsigned int v27 = v52;
        v27[3] = *(_OWORD *)&v54[16];
        v27[2] = *(_OWORD *)v54;
        v27[1] = v53;
        v27 -= 6;
        BOOL v18 = v28 >= (unint64_t)v27;
        v28 += 96;
      }
      while (!v18);
    }
  }
LABEL_34:
  if ((v24 & 1) == 0)
  {
    uint64_t v33 = sub_69134((uint64_t)a4);
    long long v52 = *(_OWORD *)v33;
    long long v34 = *(_OWORD *)(v33 + 16);
    long long v35 = *(_OWORD *)(v33 + 32);
    long long v36 = *(_OWORD *)(v33 + 48);
    *(void *)&unsigned char v54[32] = *(void *)(v33 + 64);
    *(_OWORD *)char v54 = v35;
    *(_OWORD *)&v54[16] = v36;
    long long v53 = v34;
    LODWORD(v52) = 0;
    sub_EAD920((uint64_t)a4, (uint64_t)&v52);
    uint64_t v23 = 1;
    char v37 = __p;
    if (!__p) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  sub_EE03E4(a1 + 1200, v39, &v52);
  sub_EAD920((uint64_t)a4, *(void *)(a1 + 1168)+ 80* (*(_DWORD *)(*(void *)(a1 + 1968) + 80 * *(unsigned int *)(*((void *)&v53 + 1) + 8) + 72) & 0x7FFFFFFF)+ 8);
LABEL_39:
  uint64_t v23 = 0;
  char v37 = __p;
  if (!__p) {
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v41 = v37;
  operator delete(v37);
LABEL_41:
  std::string::size_type v11 = v45;
  if (v45)
  {
LABEL_42:
    uint64_t v46 = v11;
    operator delete(v11);
  }
  return v23;
}

void sub_F804E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    BOOL v18 = a16;
    if (!a16) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    BOOL v18 = a16;
    if (!a16) {
      goto LABEL_3;
    }
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_F80548(uint64_t *a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  sub_EAFC08(a5);
  uint64_t v10 = *a2;
  if (!*a2) {
    return;
  }
  long long v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  long long v31 = v10;
  do
  {
    int v11 = *(_DWORD *)(a3 + 32);
    if (v11 == 1)
    {
      uint64_t v14 = (void *)sub_F9A7EC(a3, (unsigned int *)&v31);
    }
    else
    {
      if (v11)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      uint64_t v12 = *(void **)a3;
      long long __p = v10;
      uint64_t v13 = sub_F9A938(v12, &__p);
      uint64_t v14 = *(void **)v13;
      long long v15 = *(void **)(v13 + 8);
    }
    v30[0] = v14;
    v30[1] = v15;
    sub_3BFF8((char **)&v32, v30);
    uint64_t v10 = v30[0];
    long long v31 = v30[0];
  }
  while (v30[0]);
  memset(v30, 0, sizeof(v30));
  long long __p = 0;
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  long long v16 = (unint64_t *)v32;
  int v17 = v33;
  if (v32 == v33) {
    goto LABEL_22;
  }
  while (1)
  {
    if (!*((_DWORD *)v16 + 2))
    {
      if (*v16) {
        unint64_t v24 = *v16;
      }
      else {
        unint64_t v24 = *a4;
      }
      sub_ED8808(*a1 + 8, v24, 1, v30, 0);
      sub_EAFD8C(a5, (int **)v30[0] + 12 * *((unsigned int *)v16 + 3));
      goto LABEL_10;
    }
    uint64_t v18 = *a1;
    unint64_t v19 = *v16;
    uint64_t v20 = (int *)a1[371];
    signed int v26 = 0x7FFFFFFF;
    sub_FA4E90((void **)(v18 + 14680), v19, (_DWORD *)v16 + 2, 1u, v20, &v26, 0, (uint64_t)&__p);
    uint64_t v21 = *a1;
    int v22 = (char *)__p + 40 * *((unsigned int *)v16 + 3);
    uint64_t v23 = (int *)a1[371];
    signed int v26 = 0x7FFFFFFF;
    sub_FBBF58((void **)(v21 + 19984), (uint64_t)v22, v23, &v26, 0, v30);
    if (v30[0] == v30[1]) {
      break;
    }
    sub_EB0F78(a5, (int ***)v30);
LABEL_10:
    v16 += 2;
    if (v16 == v17) {
      goto LABEL_20;
    }
  }
  sub_EAD268(a5);
LABEL_20:
  if (__p)
  {
    unint64_t v28 = __p;
    operator delete(__p);
  }
LABEL_22:
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  if (v32)
  {
    uint64_t v33 = (unint64_t *)v32;
    operator delete(v32);
  }
}

void sub_F80798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v21 = a14;
    if (!a14)
    {
LABEL_3:
      int v22 = a18;
      if (!a18) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v21 = a14;
    if (!a14) {
      goto LABEL_3;
    }
  }
  operator delete(v21);
  int v22 = a18;
  if (!a18)
  {
LABEL_4:
    sub_405F44(v19);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v22);
  sub_405F44(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_F8083C(uint64_t *a1, int ***a2)
{
  if (*(void *)(*a1 + 24))
  {
    uint64_t v4 = *a2;
    for (unint64_t i = a2[1]; i != v4; sub_EAFD8C(a1[1], i))
    {
      if (!sub_EAE144((void *)a1[1]))
      {
        uint64_t v5 = *a1;
        unint64_t v12 = ((((unint64_t)*(i - 3) >> 16) & 0xFFFF0000 | ((void)*(i - 3) << 32) | (2
                                                                                            * (((unint64_t)*(i - 3) & 0xFF000000000000) == 0)))
             + (((unint64_t)*((unsigned int *)i - 4) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*((unsigned __int8 *)i - 8) >> 1) & 1;
        uint64_t v6 = *(void *)(v5 + 24);
        if (!v6) {
          goto LABEL_18;
        }
        if ((*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)v6 + 48))(v6, &v12)) {
          return 1;
        }
      }
      i -= 12;
    }
  }
  else
  {
    uint64_t v8 = *a2;
    unsigned int v9 = a2[1];
    while (v8 != v9)
    {
      if (*(void *)(*a1 + 24) && !sub_EAE144((void *)a1[1]))
      {
        uint64_t v10 = *a1;
        unint64_t v12 = ((((unint64_t)v8[9] >> 16) & 0xFFFF0000 | ((void)v8[9] << 32) | (2
                                                                                      * (((unint64_t)v8[9] & 0xFF000000000000) == 0)))
             + (((unint64_t)*((unsigned int *)v8 + 20) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*((unsigned __int8 *)v8 + 88) >> 1) & 1;
        uint64_t v11 = *(void *)(v10 + 24);
        if (!v11) {
LABEL_18:
        }
          sub_29F82C();
        if ((*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)v11 + 48))(v11, &v12)) {
          return 1;
        }
      }
      sub_EAFD8C(a1[1], v8);
      v8 += 12;
    }
  }
  return 0;
}

void sub_F809F4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = xmmword_20B8E30;
  *(void *)(a2 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v4 = *(char **)(a1 + 2080);
  uint64_t v5 = *(unsigned int **)(a1 + 2088);
  if (*v4 > -2)
  {
    uint64_t v6 = *(void **)(a1 + 2080);
    uint64_t v17 = *(void *)(a1 + 2104);
    uint64_t v8 = &v4[v17];
    if (v4 != &v4[v17])
    {
LABEL_5:
      unsigned int v9 = (char **)(a1 + 2080);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v6 = *(void **)(a1 + 2080);
    do
    {
      unint64_t v7 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      uint64_t v6 = (void *)((char *)v6 + v7);
      v5 += 3 * v7;
    }
    while (*(char *)v6 < -1);
    uint64_t v8 = &v4[*(void *)(a1 + 2104)];
    if (v6 != (void *)v8) {
      goto LABEL_5;
    }
  }
  unsigned int v9 = (char **)(a1 + 2128);
  uint64_t v18 = 1;
  uint64_t v19 = a1 + 2080;
  while (1)
  {
    uint64_t v5 = *(unsigned int **)(v19 + 56);
    uint64_t v6 = *v9;
    if (**v9 <= -2)
    {
      do
      {
        unint64_t v20 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        uint64_t v6 = (void *)((char *)v6 + v20);
        v5 += 3 * v20;
      }
      while (*(char *)v6 < -1);
    }
    uint64_t v8 = &(*v9)[*(void *)(v19 + 72)];
    if (v6 != (void *)v8) {
      break;
    }
    uint64_t v19 = a1 + 2080 + 48 * v18++;
    unsigned int v9 = (char **)(v19 + 48);
    if (v18 == 16) {
      goto LABEL_26;
    }
  }
LABEL_6:
  uint64_t v10 = (char **)(a1 + 2848);
  do
  {
    while (1)
    {
      sub_F92FD4(**(void **)(a1 + 8), v5, (uint64_t)&__p);
      sub_33998(a2, (uint64_t)&__p);
      int v11 = *((char *)v6 + 1);
      uint64_t v6 = (void *)((char *)v6 + 1);
      v5 += 3;
      if (v11 <= -2)
      {
        do
        {
          unint64_t v12 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          uint64_t v6 = (void *)((char *)v6 + v12);
          v5 += 3 * v12;
        }
        while (*(char *)v6 < -1);
      }
      if (v6 == (void *)v8) {
        break;
      }
      if (!v9) {
        goto LABEL_26;
      }
    }
    uint64_t v13 = v9 + 6;
    if (v9 + 6 == v10) {
      break;
    }
    while (1)
    {
      uint64_t v14 = v13;
      long long v15 = v9[6];
      uint64_t v5 = (unsigned int *)v9[7];
      uint64_t v6 = v15;
      if (*v15 <= -2)
      {
        do
        {
          unint64_t v16 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          uint64_t v6 = (void *)((char *)v6 + v16);
          v5 += 3 * v16;
        }
        while (*(char *)v6 < -1);
      }
      uint64_t v8 = &v9[9][(void)v15];
      if (v6 != (void *)v8) {
        break;
      }
      uint64_t v13 = v14 + 6;
      unsigned int v9 = v14;
      if (v14 + 6 == v10) {
        goto LABEL_26;
      }
    }
    unsigned int v9 = v14;
  }
  while (v14);
LABEL_26:
  if (!sub_344C4((_DWORD *)a2))
  {
    long long __p = 0;
    long long v31 = 0;
    uint64_t v32 = 0;
    uint64_t v21 = *(unsigned int **)(a1 + 1992);
    int v22 = *(unsigned int **)(a1 + 2000);
    if (v21 != v22)
    {
      do
      {
        uint64_t v23 = *(void *)(a1 + 1968);
        uint64_t v24 = 80 * *v21;
        v28[0] = 1;
        unint64_t v25 = sub_F968AC(**(void **)(a1 + 8), HIDWORD(*(void *)(v23 + v24)) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*(void *)(v23 + v24)) << 32), (*(void *)(v23 + v24) >> 1) & 1, v28);
        unint64_t v29 = v25;
        if (v25) {
          BOOL v26 = HIDWORD(v25) == -1;
        }
        else {
          BOOL v26 = 1;
        }
        if (!v26)
        {
          unsigned int v27 = __p;
          if (__p != v31)
          {
            while (*v27 != v25)
            {
              if (++v27 == v31) {
                goto LABEL_39;
              }
            }
          }
          if (v27 == v31)
          {
LABEL_39:
            sub_F92FD4(**(void **)(a1 + 8), (unsigned int *)&v29, (uint64_t)v28);
            sub_33998(a2, (uint64_t)v28);
            sub_29603C(&__p, &v29);
          }
        }
        ++v21;
      }
      while (v21 != v22);
      if (__p)
      {
        long long v31 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_F80D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_F80DAC(int32x2_t *a1, uint64_t **a2, char a3, void **a4)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    uint64_t v9 = (*(void *)&a1[1] - *(void *)a1) >> 5;
    if (a3)
    {
      do
      {
        uint64_t v11 = **a4 + 30360;
        unint64_t v19 = (HIDWORD(*v6) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(*v6) << 32) & 0xFFFEFFFFFFFFFFFFLL | ((((unint64_t)*v6 >> 1) & 1) << 48)) ^ 0x1000000000000;
        if (sub_F57414(v11, &v19) == -1)
        {
          LODWORD(v19) = 0;
          sub_F936B4((uint64_t)&a1[99], v6, (int *)&v19);
          sub_F9C8AC(a1 + 99);
          sub_F958CC((uint64_t)&a1[3], v6, (uint64_t)&v19);
          unint64_t v12 = v19;
          if (v21)
          {
            uint64_t v13 = (uint64_t *)(*(void *)(v19 + 8) + 32 * v20);
            *uint64_t v13 = *v6;
            v13[1] = 0;
            void v13[2] = 0;
            void v13[3] = 0;
          }
          uint64_t v10 = *(void *)(v12 + 8) + 32 * v20 + 8;
          LODWORD(v19) = v9;
          sub_F95644(v10, (unsigned int *)&v19);
        }
        v6 += 10;
      }
      while (v6 != v7);
    }
    else
    {
      do
      {
        uint64_t v15 = **a4 + 30360;
        unint64_t v19 = (HIDWORD(*v6) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(*v6) << 32) & 0xFFFEFFFFFFFFFFFFLL | ((((unint64_t)*v6 >> 1) & 1) << 48)) ^ 0x1000000000000;
        if (sub_F57414(v15, &v19) == -1)
        {
          sub_F958CC((uint64_t)&a1[3], v6, (uint64_t)&v19);
          unint64_t v16 = v19;
          if (v21)
          {
            uint64_t v17 = (uint64_t *)(*(void *)(v19 + 8) + 32 * v20);
            *uint64_t v17 = *v6;
            v17[1] = 0;
            v17[2] = 0;
            v17[3] = 0;
          }
          uint64_t v14 = *(void *)(v16 + 8) + 32 * v20 + 8;
          LODWORD(v19) = v9;
          sub_F95644(v14, (unsigned int *)&v19);
        }
        v6 += 10;
      }
      while (v6 != v7);
    }
  }
  return sub_F957AC((uint64_t)a1, (const void **)a2);
}

unint64_t sub_F80F98(uint64_t a1, void *a2, unsigned int a3, uint64_t a4, signed int *a5, int a6)
{
  if (*(unsigned char *)(a1 + 30354))
  {
    v15[0] = (int *)((HIDWORD(*a2) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((*a2 >> 1) & 1) << 48)) ^ 0x1000000000000);
    if (sub_F57414(a1 + 30360, v15) != -1) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  sub_ED7040(a1 + 8, (HIDWORD(*a2) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((*a2 >> 1) & 1) << 48)) ^ 0x1000000000000, (uint64_t)v15);
  signed int v13 = *a5;
  double v14 = sub_ECA6AC(a1 + 9424, v15, a4, v13, a6);
  return sub_ECA410(a1 + 9424, v15, a3, a4, v13, a6, v14);
}

BOOL sub_F810A8(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 3056);
  uint64_t v3 = *(unsigned int **)(a1 + 3072);
  uint64_t v4 = *(unsigned int **)(a1 + 3064);
  unint64_t v5 = *(unsigned int *)(a1 + 3052);
  if (v2 + v3 - v4 < v5) {
    return 0;
  }
  uint64_t v20 = 0;
  long long v8 = 0uLL;
  long long v19 = 0u;
  if (v4 == v3)
  {
    uint64_t v15 = 0;
  }
  else
  {
    do
    {
      while (1)
      {
        unsigned int v10 = *v4;
        unsigned int v18 = v10;
        uint64_t v11 = *(void *)(a1 + 928);
        unsigned int v12 = *(_DWORD *)(v11 + 24 * v10 + 8);
        if (*a2 >= v12)
        {
          int v13 = *(_DWORD *)(v11 + 24 * v10 + 12);
          if (v12 < *a2 || (int)a2[1] >= v13) {
            break;
          }
        }
        sub_745A4((uint64_t)&v19, &v18);
        if (++v4 == v3) {
          goto LABEL_12;
        }
      }
      ++*(_DWORD *)(a1 + 3056);
      ++v4;
    }
    while (v4 != v3);
LABEL_12:
    uint64_t v3 = *(unsigned int **)(a1 + 3064);
    long long v8 = v19;
    uint64_t v15 = v20;
    LODWORD(v2) = *(_DWORD *)(a1 + 3056);
    LODWORD(v5) = *(_DWORD *)(a1 + 3052);
  }
  *(_OWORD *)(a1 + 3064) = v8;
  uint64_t v16 = *(void *)(a1 + 3080);
  *(void *)(a1 + 3080) = v15;
  *(void *)&long long v19 = v3;
  uint64_t v20 = v16;
  BOOL v6 = v2 >= v5;
  if (v3)
  {
    *((void *)&v19 + 1) = v3;
    operator delete(v3);
  }
  return v6;
}

void sub_F811E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F811FC(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  if (!*(unsigned char *)(a1 + 3048)) {
    return 4294967294;
  }
  sub_F818E8(a1, a2, (uint64_t *)a3, a4);
  uint64_t v7 = *(void *)(a1 + 3032);
  uint64_t v8 = *(void *)(v7 + 24);
  int v38 = *(_DWORD *)(v7 + 4224);
  unint64_t v39 = sub_F968AC(v8, HIDWORD(*a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32), (*a2 & 2) == 0, &v38);
  if (v39 > 0xFFFFFFFEFFFFFFFFLL || v39 == 0) {
    return 0;
  }
  LOWORD(v38) = sub_F9CB08(v7 + 24, (unint64_t *)a2, &v39);
  if ((_WORD)v38 == 0xFFFF) {
    return 0;
  }
  sub_F96B60(*(void *)(v7 + 8), (unsigned int *)&v39, (unsigned __int16 *)&v38, v7 + 4304);
  uint64_t v10 = *(void *)(v7 + 4304);
  uint64_t v11 = *(void *)(v7 + 4312);
  if (v10 != v11)
  {
    while (1)
    {
      unsigned int v16 = *(_DWORD *)(a1 + 1040);
      if (v16 != -1)
      {
        int v17 = *(_DWORD *)(v10 + 16);
        if (v17 != -1
          && *(_DWORD *)(v10 + 20) != 0x7FFFFFFF
          && *(void *)(v10 + 24) != 0x7FFFFFFFFFFFFFFFLL
          && v17 + *(_DWORD *)a3 > v16)
        {
          goto LABEL_11;
        }
      }
      unint64_t v18 = sub_F81CA8((int32x2_t *)a1, (unsigned int *)v10);
      unint64_t v19 = v18;
      int v20 = *(_DWORD *)(v10 + 16);
      if (v20 == -1
        || (int v21 = *(_DWORD *)(v10 + 20), v21 == 0x7FFFFFFF)
        || *(void *)(v10 + 24) == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v12 = *(void *)(a1 + 3904);
        unint64_t v13 = v18 >> 6;
        uint64_t v14 = 1 << v18;
        uint64_t v15 = *(void *)(v12 + 8 * (v18 >> 6));
        if ((v15 & (1 << v18)) == 0)
        {
          uint64_t v25 = *(void *)(a1 + 24) + 32 * v18;
          BOOL v26 = *(void **)v25;
          unsigned int v27 = *(void **)(v25 + 8);
          if (*(void **)v25 != v27)
          {
            do
            {
              LODWORD(v39) = 0;
              sub_F936B4(a1 + 816, v26, (int *)&v39);
              sub_F9C8AC((int32x2_t *)(a1 + 816));
              v26 += 10;
            }
            while (v26 != v27);
            uint64_t v12 = *(void *)(a1 + 3904);
            uint64_t v15 = *(void *)(v12 + 8 * v13);
          }
          *(void *)(v12 + 8 * v13) = v15 | v14;
        }
        ++*(void *)(a1 + 3936);
        goto LABEL_11;
      }
      if (!*(unsigned char *)(a1 + 3049)) {
        goto LABEL_42;
      }
      int v22 = *(_DWORD *)(a1 + 1044);
      if (v22 != 0x7FFFFFFF && v21 + *(_DWORD *)(a3 + 4) > v22) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(*(void *)(a1 + 3880) + 40 * v18 + 32) != -1) {
        goto LABEL_42;
      }
      v23.n128_f64[0] = sub_F81ECC(*(void *)(a1 + 3032), (unsigned int *)v10, (uint64_t)&v39);
      int v24 = v41;
      if (v41 != -1) {
        break;
      }
      uint64_t v28 = *(void *)(a1 + 3904);
      unint64_t v29 = v19 >> 6;
      uint64_t v30 = 1 << v19;
      uint64_t v31 = *(void *)(v28 + 8 * (v19 >> 6));
      if ((v31 & (1 << v19)) == 0)
      {
        uint64_t v32 = *(void *)(a1 + 24) + 32 * v19;
        uint64_t v34 = *(void **)v32;
        uint64_t v33 = *(void **)(v32 + 8);
        if (*(void **)v32 != v33)
        {
          do
          {
            int v38 = 0;
            sub_F936B4(a1 + 816, v34, &v38);
            sub_F9C8AC((int32x2_t *)(a1 + 816));
            v34 += 10;
          }
          while (v34 != v33);
          uint64_t v28 = *(void *)(a1 + 3904);
          uint64_t v30 = 1 << v19;
          unint64_t v29 = v19 >> 6;
          uint64_t v31 = *(void *)(v28 + 8 * (v19 >> 6));
        }
        *(void *)(v28 + 8 * v29) = v31 | v30;
      }
      ++*(void *)(a1 + 3928);
      if (!v41) {
        goto LABEL_37;
      }
LABEL_40:
      if (v24 != -1)
      {
        int v20 = *(_DWORD *)(v10 + 16);
        int v21 = *(_DWORD *)(v10 + 20);
LABEL_42:
        unint64_t v39 = (v20 + *(_DWORD *)a3) | ((unint64_t)(v21 + *(_DWORD *)(a3 + 4)) << 32);
        sub_F785AC(a1, a2, (unsigned int *)&v39, v19, a4, *(_DWORD *)(v10 + 8), 0, 1);
      }
LABEL_11:
      v10 += 32;
      if (v10 == v11) {
        return *(unsigned int *)(*(void *)(a1 + 3032) + 4228);
      }
    }
    __n128 v23 = sub_F91EC0(*(void *)(a1 + 3880) + 40 * v19, (uint64_t *)&v39);
    if (v41) {
      goto LABEL_40;
    }
LABEL_37:
    long long v35 = v40;
    if (v40)
    {
      if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, __n128))v35->__on_zero_shared)(v35, v23);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    goto LABEL_40;
  }
  return *(unsigned int *)(*(void *)(a1 + 3032) + 4228);
}

void sub_F81604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_F78528((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_F8161C(uint64_t a1, void *a2, int *a3, signed int *a4, int a5, unsigned int *a6)
{
  unsigned int v6 = a3[50];
  unsigned int v18 = *a6;
  if (v18)
  {
    uint64_t v12 = a1 + 1064;
    do
    {
      if (sub_F963A0(**(void **)(a1 + 8), HIDWORD(*a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32), &v18))
      {
        unint64_t v13 = sub_F968AC(**(void **)(a1 + 8), HIDWORD(*a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32), (*a2 & 2) == 0, &v18);
        unint64_t v17 = v13;
        if (v13) {
          BOOL v14 = v13 >= 0xFFFFFFFF00000000;
        }
        else {
          BOOL v14 = 1;
        }
        if (v14)
        {
          int v15 = *(_DWORD *)(a1 + 20);
          if (v15 != -1 && v18 == v15) {
            return 0xFFFFFFFFLL;
          }
        }
        else if (sub_F953E4(v12, &v17) == -1 {
               && sub_F953E4(*(void *)(a1 + 976) + 800, &v17) == -1
        }
               && (v6 == -1 || v18 <= v6 || !sub_FA6D54(*(void *)a1 + 14680, (unsigned int *)&v17, a3, a4, a5)))
        {
          if (*(unsigned char *)(a1 + 3048) && v18 < *(_DWORD *)(*(void *)(a1 + 3032) + 4224)) {
            return 0;
          }
          if (!*(unsigned char *)(*(void *)a1 + 30353)
            || !sub_FA6D54(*(void *)a1 + 14680, (unsigned int *)&v17, a3, a4, a5))
          {
            return v18;
          }
        }
      }
      --v18;
    }
    while (v18);
  }
  return 0;
}

uint64_t sub_F817D8(uint64_t **a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  unint64_t v9 = v2;
  if (v2) {
    BOOL v3 = v2 > 0xFFFFFFFEFFFFFFFFLL;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t v6 = (uint64_t)(a1 + 1);
    do
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6898, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F6898))
      {
        qword_24F6890 = 1;
        __cxa_guard_release(&qword_24F6898);
      }
      if (v9 == qword_24F6890) {
        break;
      }
      if (sub_F953E4(v6, &v9) != -1) {
        return 1;
      }
      unint64_t v7 = sub_F95510(**a1, (unsigned int *)&v9);
      unint64_t v9 = v7;
      if (v7) {
        BOOL v8 = v7 >= 0xFFFFFFFF00000000;
      }
      else {
        BOOL v8 = 1;
      }
    }
    while (!v8);
  }
  return 0;
}

void sub_F818E8(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v46 = a2;
  if (*(unsigned char *)(a1 + 3048))
  {
    sub_F820EC((int32x2_t *)a1, a2);
    a2 = v46;
  }
  sub_F97D2C(*(void *)(a1 + 976) + 24, a2, v48);
  if (v48[0])
  {
    sub_F97D2C(*(void *)(a1 + 976) + 24, v46, v48);
    int v5 = *(_DWORD *)(a1 + 2960);
    signed int v45 = 0x7FFFFFFF;
    if (v5 != 0x7FFFFFFF)
    {
      int v6 = *((_DWORD *)a3 + 1);
      int v7 = v6 / 10;
      int v8 = v6 % 10;
      if (v6 < 0) {
        char v9 = -5;
      }
      else {
        char v9 = 5;
      }
      signed int v45 = v7 + v5 + (((103 * (char)(v9 + v8)) >> 15) & 1) + ((103 * (char)(v9 + v8)) >> 10);
    }
    uint64_t v10 = *(uint64_t **)(v49 + 8);
    int v41 = *(uint64_t **)(v49 + 16);
    uint64_t v11 = v46;
    if (v10 != v41)
    {
      do
      {
        uint64_t v44 = v10;
        uint64_t v12 = (void *)(**(void **)(a1 + 976) + 32 * *v10);
        uint64_t v47 = -858993459 * ((v12[1] - *v12) >> 4);
        if (v47)
        {
          for (uint64_t i = 0; i != v47; ++i)
          {
            BOOL v14 = (unint64_t *)(*v12 + 80 * i);
            unint64_t v15 = *v14;
            if (*v14 == *v11)
            {
              unsigned int v16 = *(void **)a1;
              uint64_t v17 = *v12 + 80 * i;
              unsigned int v20 = *(_DWORD *)(v17 + 8);
              uint64_t v18 = v17 + 8;
              unsigned int v19 = v20;
              uint64_t v21 = *(void *)(a1 + 2968);
              int v22 = *(unsigned __int8 *)(a1 + 2964);
              unint64_t v23 = HIDWORD(v15);
              uint64_t v24 = (v15 << 47) & 0x1000000000000;
              unint64_t v25 = v15 >> 16;
              if (*(unsigned char *)(*(void *)a1 + 30354))
              {
                uint64_t v26 = 0;
                unint64_t v27 = 0x2127599BF4325C37 * ((v15 & 0xFFFFFFFFFFFF0000 | HIWORD(v24)) ^ (v15 >> 23));
                for (unint64_t j = v27 ^ (v27 >> 47); ; unint64_t j = v26 + v29)
                {
                  uint64_t v29 = j & (v16[3802] - 1);
                  unint64_t v30 = *(void *)(v16[3804] + 8 * v29);
                  if (__PAIR64__(*(unsigned __int16 *)(*(void *)a1 + 30428), *(_DWORD *)(*(void *)a1 + 30424)) == __PAIR64__(WORD2(v30), v30)
                    && (HIWORD(v30) & 1) != (*(unsigned char *)(*(void *)a1 + 30430) == 0))
                  {
                    break;
                  }
                  if ((!v16[3800]
                     || __PAIR64__(*(unsigned __int16 *)(*(void *)a1 + 30396), *(_DWORD *)(*(void *)a1 + 30392)) != __PAIR64__(WORD2(v30), v30)
                     || (HIWORD(v30) & 1) == (*(unsigned char *)(*(void *)a1 + 30398) == 0))
                    && v23 == v30
                    && (unsigned __int16)v25 == WORD2(v30)
                    && (v24 != 0) != (HIWORD(v30) & 1))
                  {
                    if (v29 != -1) {
                      goto LABEL_14;
                    }
                    break;
                  }
                  ++v26;
                }
              }
              uint64_t v31 = (uint64_t)(v16 + 1178);
              sub_ED7040((uint64_t)(v16 + 1), (v23 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)(unsigned __int16)v25 << 32) | v24) ^ 0x1000000000000, (uint64_t)v48);
              double v32 = sub_ECA6AC(v31, v48, v21, v45, v22);
              unint64_t v33 = sub_ECA410(v31, v48, v19, v21, v45, v22, v32);
              uint64_t v11 = v46;
              int v36 = v33;
              unint64_t v37 = v33 & 0xFFFFFFFF00000000;
              if (v33 != -1 && v37 != 0x7FFFFFFF00000000)
              {
                uint64_t v39 = *a3;
                uint64_t v40 = sub_EC98F8(v34, v35, *(void *)a1 + 9424, (uint64_t)v14, v18, *(void *)(a1 + 2968), 1);
                uint64_t v11 = v46;
                if (v40 != -1 && (v40 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
                {
                  v48[0] = (int *)((v39 + v37 + (v40 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (v39 + v40 + v36));
                  sub_F785AC(a1, v46, (unsigned int *)v48, *v44, a4, i, 0, 0);
                  uint64_t v11 = v46;
                }
              }
            }
LABEL_14:
            ;
          }
        }
        uint64_t v10 = v44 + 1;
      }
      while (v44 + 1 != v41);
    }
  }
}

uint64_t sub_F81CA8(int32x2_t *a1, unsigned int *a2)
{
  uint64_t v4 = (uint64_t)&a1[386];
  sub_F78DE8((uint64_t)&a1[386], a2, v21);
  if (v21[0]) {
    return v21[3][1];
  }
  int32x2_t v6 = a1[4];
  int32x2_t v7 = a1[3];
  int32x2_t v8 = a1[379];
  sub_F98E98(*(void *)(*(void *)&v8 + 8), a2, *(void *)&v8 + 4256);
  sub_F9D150(*(void *)&v8 + 40, (uint64_t *)(*(void *)&v8 + 4256), *(_DWORD *)(*(void *)&v8 + 4232), 0, (uint64_t)&__p);
  int v22 = a1;
  sub_F80DAC(a1 + 3, (uint64_t **)&__p, 0, (void **)&v22);
  unint64_t v5 = (uint64_t)(*(void *)&v6 - *(void *)&v7) >> 5;
  if (__p)
  {
    unsigned int v19 = __p;
    operator delete(__p);
  }
  sub_F99838(v4, a2, (uint64_t)&__p);
  char v9 = __p;
  if (v20)
  {
    uint64_t v10 = (void *)(*((void *)__p + 1) + 16 * (void)v19);
    *uint64_t v10 = *(void *)a2;
    v10[1] = -1;
  }
  *(void *)(v9[1] + 16 * (void)v19 + 8) = v5;
  sub_29603C((void **)&a1[482], a2);
  unint64_t v11 = (unint64_t)a1[489];
  int32x2_t v12 = a1[490];
  if (v11 == *(void *)&v12 << 6)
  {
    if ((uint64_t)(v11 + 1) < 0) {
      sub_2E00();
    }
    unint64_t v13 = *(void *)&v12 << 7;
    if (v13 <= (v11 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v11 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v14 = v13;
    }
    else {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_3D110((uint64_t)&a1[488], v14);
    unint64_t v11 = (unint64_t)a1[489];
  }
  a1[489] = (int32x2_t)(v11 + 1);
  *(void *)(*(void *)&a1[488] + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v11);
  int32x2_t v15 = a1[486];
  if (*(void *)&v15 >= *(void *)&a1[487])
  {
    unsigned int v16 = sub_F99F7C((void **)&a1[485]);
  }
  else
  {
    *(void *)(*(void *)&v15 + 32) = 0;
    *(_OWORD *)*(void *)&int32x2_t v15 = 0u;
    *(_OWORD *)(*(void *)&v15 + 16) = 0u;
    *(_DWORD *)(*(void *)&v15 + 32) = -1;
    unsigned int v16 = (char *)(*(void *)&v15 + 40);
  }
  a1[486] = (int32x2_t)v16;
  if (v5 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&a1[117] - *(void *)&a1[116]) >> 3)) {
    sub_F9A14C((char **)&a1[116]);
  }
  return v5;
}

void sub_F81EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_F81ECC@<D0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(unsigned char *)(a1 + 4249)) {
    goto LABEL_17;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v6 + 3880)) {
    goto LABEL_3;
  }
  uint64_t v18 = sub_3823E0(v6 + 8, *a2, 1);
  if (!v18) {
    goto LABEL_3;
  }
  unsigned int v19 = &v18[-*(int *)v18];
  if (*(unsigned __int16 *)v19 < 7u) {
    goto LABEL_3;
  }
  uint64_t v7 = *((unsigned __int16 *)v19 + 3);
  if (!v7) {
    goto LABEL_4;
  }
  char v20 = &v18[v7 + *(unsigned int *)&v18[v7]];
  uint64_t v21 = a2[1];
  if (*(_DWORD *)v20 <= v21)
  {
LABEL_3:
    uint64_t v7 = 0;
    goto LABEL_4;
  }
  uint64_t v7 = (uint64_t)&v20[4 * v21 + 4 + *(unsigned int *)&v20[4 * v21 + 4]];
LABEL_4:
  int32x2_t v8 = (unsigned __int16 *)(v7 - *(int *)v7);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (int *)(v7 + v9 + *(unsigned int *)(v7 + v9));
    unint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
    unsigned int v12 = *v11;
    if (v12 < 5) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v11 = (_WORD *)(&loc_1120530 + 1);
    unsigned int v12 = *(unsigned __int16 *)((char *)&loc_1120530 + 1);
    if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
      goto LABEL_17;
    }
  }
  uint64_t v13 = v11[2];
  if (v11[2]) {
    v13 += (uint64_t)v10 + *(unsigned int *)((char *)v10 + v13);
  }
  if (v12 >= 9)
  {
    uint64_t v14 = v11[4];
    if (v14 && v13 != 0)
    {
      int v22 = (unsigned int *)((char *)v10 + v14);
      uint64_t v23 = *v22;
      *(void *)a3 = v13;
      *(void *)(a3 + 8) = (char *)v22 + v23;
      *(void *)&double result = 0xFFFFFFFFLL;
      *(void *)(a3 + 16) = 0xFFFFFFFFLL;
      *(_DWORD *)(a3 + 24) = -1;
      *(_DWORD *)(a3 + 32) = 1;
      return result;
    }
  }
LABEL_17:
  sub_F9CFD0(a1, a2, &v25);
  if (!v25)
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = -1;
    uint64_t v17 = v26;
    if (!v26) {
      return result;
    }
    goto LABEL_23;
  }
  unsigned int v16 = v26;
  *(void *)a3 = v25;
  *(void *)(a3 + 8) = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a3 + 32) = 0;
  uint64_t v17 = v26;
  if (v26)
  {
LABEL_23:
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return result;
}

void sub_F820EC(int32x2_t *a1, _DWORD *a2)
{
  BOOL v3 = (void *)a1[379];
  sub_F9A298(v3[1], a2, v3 + 535);
  uint64_t v4 = (unsigned char *)v3[535];
  unint64_t v5 = (unsigned char *)v3[536];
  int64_t v6 = v5 - v4;
  if (v5 != v4)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    uint64_t v7 = (char *)operator new(v5 - v4);
    memcpy(v7, v4, v6);
    uint64_t v8 = 0;
    uint64_t v9 = 8 * (v6 >> 3);
    do
    {
      sub_F81CA8(a1, (unsigned int *)&v7[v8]);
      v8 += 8;
    }
    while (v9 != v8);
    operator delete(v7);
  }
}

void sub_F821C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_F821F0(uint64_t a1, void *a2, int a3, int *a4, signed int *a5, int a6)
{
  int v15 = a3;
  uint64_t v11 = a1 + 14680;
  unint64_t v14 = sub_F968AC(*(void *)(a1 + 14664), HIDWORD(*a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32), (*a2 & 2) == 0, &v15);
  if (sub_FA6D54(v11, (unsigned int *)&v14, a4, a5, a6)) {
    return 1;
  }
  unint64_t v13 = sub_F968AC(*(void *)(a1 + 14664), HIDWORD(*a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32), (*a2 >> 1) & 1, &v15);
  return sub_FA6D54(v11, (unsigned int *)&v13, a4, a5, a6);
}

uint64_t sub_F822E0(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a2 + 14664;
  *(void *)(a1 + 16) = -1;
  sub_F9B438((void *)(a1 + 24), a2);
  *(void *)(a1 + 944) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  unint64_t v5 = (char *)operator new(0x18uLL);
  *(void *)(a1 + 928) = v5;
  *(void *)(a1 + 944) = v5 + 24;
  *(void *)unint64_t v5 = 0;
  *(_OWORD *)(v5 + 8) = xmmword_20E7B70;
  *(void *)(a1 + 936) = v5 + 24;
  if (a3) {
    uint64_t v6 = 128;
  }
  else {
    uint64_t v6 = 2;
  }
  *(_DWORD *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  uint64_t v7 = (char *)operator new(4 * v6);
  *(void *)(a1 + 1008) = v7;
  *(void *)(a1 + 1016) = v7;
  *(void *)(a1 + 1024) = &v7[4 * v6];
  uint64_t v8 = (char *)operator new(0x3F8uLL);
  *(void *)(a1 + 984) = v8;
  *(void *)(a1 + 992) = v8;
  *(void *)(a1 + 1000) = v8 + 1016;
  *(void *)(a1 + 1040) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 1048) = 0;
  *(unsigned char *)(a1 + 1052) = 0;
  sub_F9B594(a1 + 1056, *(uint64_t **)(a1 + 8));
  *(void *)(a1 + 1184) = 0;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(void *)(a1 + 1192) = -1;
  if (a3) {
    unsigned int v9 = 0x10000;
  }
  else {
    unsigned int v9 = 0x2000;
  }
  sub_F9D358((void *)(a1 + 1200), v9);
  v14[0] = 256;
  v14[1] = (unint64_t)&v13;
  v14[2] = (unint64_t)&v12;
  v14[3] = (unint64_t)&v11;
  sub_F91654((void *)(a1 + 2080), v14);
  sub_F9B594(a1 + 2848, *(uint64_t **)(a1 + 8));
  *(_DWORD *)(a1 + 2960) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 2964) = 0;
  *(void *)(a1 + 3016) = 0;
  *(_OWORD *)(a1 + 2968) = 0u;
  *(_OWORD *)(a1 + 2984) = 0u;
  *(_OWORD *)(a1 + 3000) = 0u;
  *(_DWORD *)(a1 + 3024) = -1;
  *(_WORD *)(a1 + 3048) = 256;
  *(_OWORD *)(a1 + 3032) = 0u;
  *(void *)(a1 + 3052) = 0xFFFFFFFFLL;
  *(void *)(a1 + 3064) = 0;
  *(void *)(a1 + 3080) = 0;
  *(void *)(a1 + 3072) = 0;
  *(void *)(a1 + 3088) = &unk_20E1710;
  *(void *)(a1 + 3128) = 0;
  *(void *)(a1 + 3112) = 0;
  *(void *)(a1 + 3096) = 0;
  *(void *)(a1 + 3104) = 0;
  *(void *)(a1 + 3136) = &unk_20E1710;
  *(void *)(a1 + 3176) = 0;
  *(void *)(a1 + 3160) = 0;
  *(void *)(a1 + 3144) = 0;
  *(void *)(a1 + 3152) = 0;
  *(void *)(a1 + 3184) = &unk_20E1710;
  *(void *)(a1 + 3224) = 0;
  *(void *)(a1 + 3208) = 0;
  *(void *)(a1 + 3192) = 0;
  *(void *)(a1 + 3200) = 0;
  *(void *)(a1 + 3232) = &unk_20E1710;
  *(void *)(a1 + 3272) = 0;
  *(void *)(a1 + 3256) = 0;
  *(void *)(a1 + 3240) = 0;
  *(void *)(a1 + 3248) = 0;
  *(void *)(a1 + 3280) = &unk_20E1710;
  *(void *)(a1 + 3320) = 0;
  *(void *)(a1 + 3304) = 0;
  *(void *)(a1 + 3288) = 0;
  *(void *)(a1 + 3296) = 0;
  *(void *)(a1 + 3328) = &unk_20E1710;
  *(void *)(a1 + 3368) = 0;
  *(void *)(a1 + 3352) = 0;
  *(void *)(a1 + 3336) = 0;
  *(void *)(a1 + 3344) = 0;
  *(void *)(a1 + 3376) = &unk_20E1710;
  *(void *)(a1 + 3416) = 0;
  *(void *)(a1 + 3400) = 0;
  *(void *)(a1 + 3384) = 0;
  *(void *)(a1 + 3392) = 0;
  *(void *)(a1 + 3424) = &unk_20E1710;
  *(void *)(a1 + 3464) = 0;
  *(void *)(a1 + 3448) = 0;
  *(void *)(a1 + 3432) = 0;
  *(void *)(a1 + 3440) = 0;
  *(void *)(a1 + 3472) = &unk_20E1710;
  *(void *)(a1 + 3512) = 0;
  *(void *)(a1 + 3488) = 0;
  *(void *)(a1 + 3480) = 0;
  *(void *)(a1 + 3496) = 0;
  *(void *)(a1 + 3520) = &unk_20E1710;
  *(void *)(a1 + 3560) = 0;
  *(void *)(a1 + 3536) = 0;
  *(void *)(a1 + 3528) = 0;
  *(void *)(a1 + 3544) = 0;
  *(void *)(a1 + 3568) = &unk_20E1710;
  *(void *)(a1 + 3608) = 0;
  *(void *)(a1 + 3584) = 0;
  *(void *)(a1 + 3576) = 0;
  *(void *)(a1 + 3592) = 0;
  *(void *)(a1 + 3616) = &unk_20E1710;
  *(void *)(a1 + 3656) = 0;
  *(void *)(a1 + 3632) = 0;
  *(void *)(a1 + 3624) = 0;
  *(void *)(a1 + 3640) = 0;
  *(void *)(a1 + 3664) = &unk_20E1710;
  *(void *)(a1 + 3704) = 0;
  *(void *)(a1 + 3680) = 0;
  *(void *)(a1 + 3672) = 0;
  *(void *)(a1 + 3688) = 0;
  *(void *)(a1 + 3712) = &unk_20E1710;
  *(void *)(a1 + 3752) = 0;
  *(void *)(a1 + 3728) = 0;
  *(void *)(a1 + 3720) = 0;
  *(void *)(a1 + 3736) = 0;
  *(void *)(a1 + 3760) = &unk_20E1710;
  *(void *)(a1 + 3800) = 0;
  *(void *)(a1 + 3776) = 0;
  *(void *)(a1 + 3768) = 0;
  *(void *)(a1 + 3784) = 0;
  *(void *)(a1 + 3808) = &unk_20E1710;
  *(void *)(a1 + 3824) = 0;
  *(void *)(a1 + 3816) = 0;
  *(void *)(a1 + 3832) = 0;
  *(_OWORD *)(a1 + 3928) = 0u;
  *(_OWORD *)(a1 + 3912) = 0u;
  *(_OWORD *)(a1 + 3896) = 0u;
  *(_OWORD *)(a1 + 3880) = 0u;
  *(_OWORD *)(a1 + 3864) = 0u;
  *(_OWORD *)(a1 + 3848) = 0u;
  return a1;
}

void sub_F82600(_Unwind_Exception *a1)
{
  uint64_t v7 = v3;
  sub_328138(v7);
  sub_5139D0(v5);
  unsigned int v9 = (void *)v1[146];
  if (v9)
  {
    v1[147] = v9;
    operator delete(v9);
  }
  sub_F7341C(v4);
  sub_3310C((uint64_t)(v1 + 123));
  uint64_t v10 = (void **)(v1 + 116);
  char v11 = *v6;
  if (*v6)
  {
    v1[120] = v11;
    operator delete(v11);
    char v12 = *v10;
    if (!*v10)
    {
LABEL_5:
      sub_BF10E8(v2);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    char v12 = *v10;
    if (!*v10) {
      goto LABEL_5;
    }
  }
  v1[117] = v12;
  operator delete(v12);
  sub_BF10E8(v2);
  _Unwind_Resume(a1);
}

void sub_F826F0(_Unwind_Exception *a1)
{
  sub_BF10E8(v1);
  _Unwind_Resume(a1);
}

void sub_F82708(int32x2_t *a1)
{
  if (a1[370].i8[4] != 2) {
    goto LABEL_9;
  }
  int32x2_t v2 = a1[371];
  if (!*(unsigned char *)(*(void *)&v2 + 204)) {
    goto LABEL_9;
  }
  unsigned int v3 = *(unsigned __int8 *)(*(void *)&v2 + 177);
  if (!v3) {
    goto LABEL_10;
  }
  if (*(unsigned char *)(*(void *)a1 + 30352)
    && sub_51D60((unsigned __int8 *)(*(void *)a1 + 8))
    && (unsigned int v4 = *(_DWORD *)(*(void *)&a1[371] + 200), v4 != -1))
  {
    unsigned int v3 = sub_F78BBC(*(uint64_t **)&a1[1]) - 1;
    if (v3 >= v4) {
      unsigned int v3 = v4;
    }
  }
  else
  {
LABEL_9:
    unsigned int v3 = 0;
  }
LABEL_10:
  unsigned int v48 = v3;
  long long __p = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v5 = (uint64_t)*a1;
  uint64_t v6 = *(void *)a1 + 30392;
  uint64_t v7 = *(void *)(*(void *)a1 + 30416);
  if (v7)
  {
    uint64_t v8 = 8 * v7;
    unsigned int v9 = *(unint64_t **)(*(void *)a1 + 30432);
    while (1)
    {
      unint64_t v10 = HIDWORD(*v9);
      if ((*(_DWORD *)(*(void *)a1 + 30424) != *v9
         || *(unsigned __int16 *)(*(void *)a1 + 30428) != (unsigned __int16)v10
         || (HIWORD(*v9) & 1) == (*(unsigned char *)(*(void *)a1 + 30430) == 0))
        && (!*(void *)(v5 + 30400)
         || *(_DWORD *)v6 != *v9
         || *(unsigned __int16 *)(*(void *)a1 + 30396) != (unsigned __int16)v10
         || (HIWORD(*v9) & 1) == (*(unsigned char *)(*(void *)a1 + 30398) == 0)))
      {
        break;
      }
      ++v9;
      v8 -= 8;
      if (!v8) {
        goto LABEL_52;
      }
    }
  }
  else
  {
    unsigned int v9 = *(unint64_t **)(*(void *)a1 + 30432);
  }
  uint64_t v11 = *(void *)(*(void *)a1 + 30432) + 8 * v7;
  if (v9 != (unint64_t *)v11)
  {
    uint64_t v39 = (signed int *)&a1[370];
    uint64_t v40 = a1 + 132;
    do
    {
      unint64_t v41 = (*v9 >> 16) & 0xFFFF0000 | (*v9 << 32) | (2 * ((*v9 & 0xFF000000000000) == 0));
      if (!v48) {
        goto LABEL_31;
      }
      uint64_t v12 = (uint64_t)*a1;
      uint64_t v13 = (uint64_t)a1[371];
      int v14 = a1[370].u8[4];
      sub_ED7040(*(void *)a1 + 8, *v9, (uint64_t)&v49);
      v12 += 9424;
      int v15 = *v39;
      double v16 = sub_ECA6AC(v12, &v49, v13, *v39, v14);
      unint64_t v17 = sub_ECA410(v12, &v49, 0x3B9ACA00u, v13, v15, v14, v16);
      if (v17 == -1 || (v17 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000 || v18 == 0x7FFFFFFFFFFFFFFFLL)
      {
        int32x2_t v19 = a1[371];
        if (*(unsigned char *)(*(void *)&v19 + 177)) {
          unsigned int v20 = *(_DWORD *)(*(void *)&v19 + 196);
        }
        else {
          unsigned int v20 = -1;
        }
        unsigned int v21 = sub_F78BBC(*(uint64_t **)&a1[1]) - 1;
        if (v21 < v20) {
          unsigned int v20 = v21;
        }
        if (v20 <= v48 || sub_F821F0((uint64_t)*a1, &v41, v20, *(int **)&a1[371], v39, a1[370].u8[4]))
        {
          sub_F936B4((uint64_t)v40, &v41, (int *)&v48);
          sub_F9C8AC(v40);
          LODWORD(v49) = v48 - 1;
          sub_F936B4((uint64_t)&a1[356], &v41, (int *)&v49);
          sub_F9C8AC(a1 + 356);
          int v22 = (int *)sub_F968AC(**(void **)&a1[1], HIDWORD(v41) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v41) << 32), (v41 & 2) == 0, &v48);
          uint64_t v49 = v22;
          if (__p == v46 || (int *)v46[-1].i64[1] != v22) {
            sub_29603C(&__p, &v49);
          }
          unint64_t v44 = sub_F968AC(**(void **)&a1[1], HIDWORD(v41) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v41) << 32), (v41 >> 1) & 1, &v48);
          if (v46[-1].i64[1] != v44) {
            sub_29603C(&__p, &v44);
          }
        }
        else
        {
          LODWORD(v49) = v20 - 1;
          sub_F936B4((uint64_t)&a1[356], &v41, (int *)&v49);
          sub_F9C8AC(a1 + 356);
        }
      }
      else
      {
LABEL_31:
        LODWORD(v49) = 0;
        sub_F936B4((uint64_t)v40, &v41, (int *)&v49);
        sub_F9C8AC(v40);
      }
      if (++v9 == (unint64_t *)v11) {
        break;
      }
      while (1)
      {
        unint64_t v23 = HIDWORD(*v9);
        if ((*(_DWORD *)(v6 + 32) != *v9
           || *(unsigned __int16 *)(v6 + 36) != (unsigned __int16)v23
           || (HIWORD(*v9) & 1) == (*(unsigned char *)(v6 + 38) == 0))
          && (!*(void *)(v5 + 30400)
           || __PAIR64__(*(unsigned __int16 *)(v6 + 4), *(_DWORD *)v6) != __PAIR64__((unsigned __int16)v23, *v9)
           || (HIWORD(*v9) & 1) == (*(unsigned char *)(v6 + 6) == 0)))
        {
          break;
        }
        if (++v9 == (unint64_t *)v11) {
          goto LABEL_51;
        }
      }
    }
    while (v9 != (unint64_t *)v11);
LABEL_51:
    uint64_t v5 = (uint64_t)*a1;
  }
LABEL_52:
  uint64_t v24 = *(void *)(v5 + 30688);
  uint64_t v25 = v24 + 96 * *(void *)(v5 + 30584);
  uint64_t v49 = (int *)(v5 + 30440);
  uint64_t v50 = v24;
  uint64_t v51 = v25;
  sub_F556A4((uint64_t)&v49);
  uint64_t v26 = *(void *)(v5 + 30688) + 96 * *(void *)(v5 + 30584);
  unint64_t v41 = v5 + 30440;
  uint64_t v42 = v26;
  uint64_t v43 = v26;
  sub_F556A4((uint64_t)&v41);
  while (1)
  {
    uint64_t v27 = v50;
    if (v50 == v42) {
      break;
    }
    unint64_t v44 = (((*(void *)(v50 + 32) >> 16) & 0xFFFF0000 | (*(void *)(v50 + 32) << 32) | (2
                                                                                          * ((*(void *)(v50 + 32) & 0xFF000000000000) == 0)))
         + 4 * (unsigned __int16)*(_DWORD *)(v50 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v50 + 88) & 1;
    int v52 = 0;
    sub_F936B4((uint64_t)&a1[132], &v44, &v52);
    sub_F9C8AC(a1 + 132);
    unint64_t v44 = (((*(void *)(v27 + 72) >> 16) & 0xFFFF0000 | (*(void *)(v27 + 72) << 32) | (2
                                                                                          * ((*(void *)(v27 + 72) & 0xFF000000000000) == 0)))
         + (((unint64_t)*(unsigned int *)(v27 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v27 + 88) >> 1) & 1;
    int v52 = 0;
    sub_F936B4((uint64_t)&a1[132], &v44, &v52);
    sub_F9C8AC(a1 + 132);
    v50 += 96;
    sub_F556A4((uint64_t)&v49);
  }
  for (uint64_t i = *(void **)(sub_ED7C48(*(void *)a1 + 8) + 16); i; uint64_t i = (void *)*i)
  {
    uint64_t v49 = (int *)((i[2] >> 16) & 0xFFFF0000 | (i[2] << 32) | (2 * ((i[2] & 0xFF000000000000) == 0)));
    LODWORD(v41) = 0;
    sub_F936B4((uint64_t)&a1[132], &v49, (int *)&v41);
    sub_F9C8AC(a1 + 132);
  }
  unint64_t v29 = 126 - 2 * __clz(((char *)v46 - (unsigned char *)__p) >> 3);
  if (v46 == __p) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = v29;
  }
  sub_F98280((int8x16_t *)__p, v46, (uint64_t)&v49, v30, 1);
  uint64_t v31 = v46;
  if (__p != v46)
  {
    double v32 = (char *)__p - 8;
    do
    {
      if (v32 + 16 == (char *)v46) {
        goto LABEL_79;
      }
      int v33 = *((_DWORD *)v32 + 2);
      v32 += 8;
      LODWORD(v34) = *((_DWORD *)v32 + 2);
    }
    while (v33 != v34 || *((_DWORD *)v32 + 1) != *((_DWORD *)v32 + 3));
    int v36 = (int8x16_t *)(v32 + 16);
    if (v32 + 16 == (char *)v46)
    {
      unint64_t v37 = (int8x16_t *)(v32 + 8);
      if (v32 + 8 == (char *)v46) {
        goto LABEL_79;
      }
      goto LABEL_78;
    }
    do
    {
      if (v34 != v36->i32[0] || *((_DWORD *)v32 + 1) != v36->i32[1])
      {
        uint64_t v34 = v36->i64[0];
        *((void *)v32 + 1) = v36->i64[0];
        v32 += 8;
      }
      int v36 = (int8x16_t *)((char *)v36 + 8);
    }
    while (v36 != v31);
    unint64_t v37 = (int8x16_t *)(v32 + 8);
    if (v32 + 8 != (char *)v46) {
LABEL_78:
    }
      uint64_t v46 = v37;
  }
LABEL_79:
  sub_FA59A4((void **)(*(void *)a1 + 14680), (uint64_t *)&__p, *(int **)&a1[371], (signed int *)&a1[370], a1[370].u8[4], 4u);
  if (__p)
  {
    uint64_t v46 = (int8x16_t *)__p;
    operator delete(__p);
  }
}

void sub_F82DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_F82E28(uint64_t a1, void *a2, double a3, double a4)
{
  uint64_t v4 = *(void *)(a1 + 1176);
  uint64_t v5 = *(void *)(a1 + 1168);
  unint64_t v56 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 4);
  if (v56 >> 30)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v65, "The source terminal of a query cannot have more than (2^30 - 1) nodes.");
    uint64_t v49 = (void *)sub_2F404((uint64_t)exception, &v65);
  }
  if (v4 != v5)
  {
    uint64_t v7 = 0;
    uint64_t v50 = (void *)(a1 + 2976);
    uint64_t v51 = (signed int *)(a1 + 2960);
    uint64_t v55 = a1 + 1200;
    int v57 = (uint64_t **)(a1 + 1056);
    do
    {
      uint64_t v8 = *(void *)(a1 + 1168);
      unsigned int v9 = (unint64_t *)(v8 + 80 * v7);
      unint64_t v10 = *(uint64_t **)a1;
      uint64_t v11 = **(void **)a1;
      if (*(unsigned char *)(v11 + 7774))
      {
        unint64_t v12 = *v9;
        unint64_t v13 = HIDWORD(*v9);
        int v14 = sub_290DEC(v11 + 3896, HIDWORD(*v9), 1);
        if (!v14) {
          goto LABEL_4;
        }
        int v15 = &v14[-*(int *)v14];
        if (*(unsigned __int16 *)v15 < 5u) {
          goto LABEL_4;
        }
        uint64_t v16 = *((unsigned __int16 *)v15 + 2);
        if (!v16
          || *(_DWORD *)&v14[v16 + *(unsigned int *)&v14[v16]] <= WORD1(v12)
          || !sub_295DB4(v11, v13 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v12) << 32)))
        {
          goto LABEL_4;
        }
        unint64_t v10 = *(uint64_t **)a1;
      }
      unint64_t v17 = (unsigned int *)(v8 + 80 * v7 + 8);
      unint64_t v18 = sub_EC98F8(a3, a4, (uint64_t)(v10 + 1178), v8 + 80 * v7, (uint64_t)v17, *(void *)(a1 + 2968), 1);
      if (v18 != -1 && HIDWORD(v18) != 0x7FFFFFFF)
      {
        int64_t v20 = sub_F80F98(*(void *)a1, v9, *v17, *(void *)(a1 + 2968), v51, *(unsigned __int8 *)(a1 + 2964));
        if (v20 != -1 && HIDWORD(v20) != 0x7FFFFFFF)
        {
          a3 = sub_ED8808(*(void *)a1 + 8, *v9, 1, v50, 0);
          uint64_t v22 = -1431655765 * ((*(void *)(a1 + 2984) - *(void *)(a1 + 2976)) >> 5);
          if (v22)
          {
            uint64_t v23 = 0;
            int v24 = 0;
            if (v20 < 0) {
              char v25 = -5;
            }
            else {
              char v25 = 5;
            }
            unsigned int v59 = SHIDWORD(v20) / 10
                + (((103 * (char)(SHIDWORD(v20) % 10 + v25)) >> 15) & 1)
                + ((103 * (char)(SHIDWORD(v20) % 10 + v25)) >> 10);
            int v54 = v20 + v18;
            unint64_t v53 = (unint64_t)(HIDWORD(v20) + HIDWORD(v18)) << 32;
            uint64_t v58 = 96 * v22;
            while (2)
            {
              uint64_t v26 = *(void *)(a1 + 2976);
              int v27 = *(_DWORD *)(a1 + 2960);
              if (v27 == 0x7FFFFFFF) {
                signed int v28 = 0x7FFFFFFF;
              }
              else {
                signed int v28 = v59 + v27;
              }
              uint64_t v29 = *(void *)a1;
              uint64_t v30 = *(void *)(a1 + 2968);
              int v31 = *(unsigned __int8 *)(a1 + 2964);
              if (*(unsigned char *)(*(void *)a1 + 30354))
              {
                if (sub_F558C4(v29 + 30440, v26 + v23) != -1) {
                  goto LABEL_25;
                }
                unint64_t v32 = *(void *)(v26 + v23 + 32);
                uint64_t v33 = 4 * (unsigned __int16)*(_DWORD *)(v26 + v23 + 80);
                *(void *)&long long v65 = (((((v32 >> 16) & 0xFFFF0000 | (v32 << 32) | (2 * ((v32 & 0xFF000000000000) == 0)))
                                   + v33) << 16) & 0xFFFF00000000 | ((((v32 >> 16) & 0xFFFF0000 | (v32 << 32) | (2 * ((v32 & 0xFF000000000000) == 0)))
                                                                      + v33) >> 32) | ((unint64_t)((v32 & 0xFF000000000000) == 0) << 48)) ^ 0x1000000000000;
                if (sub_F57414(v29 + 30360, &v65) != -1) {
                  goto LABEL_25;
                }
              }
              unint64_t v34 = sub_F5C6E0(v29 + 9424, (int **)(v26 + v23), 0x3B9ACA00u, v30, v28, v31);
              unint64_t v35 = v34 & 0xFFFFFFFF00000000;
              if (v34 == -1 || v35 == 0x7FFFFFFF00000000) {
                goto LABEL_25;
              }
              uint64_t v37 = v26 + v23;
              char v38 = *(unsigned char *)(v26 + v23 + 88);
              unint64_t v39 = *(void *)(v26 + v23 + 32);
              uint64_t v40 = 4 * (unsigned __int16)*(_DWORD *)(v26 + v23 + 80);
              unint64_t v41 = v35 + v53;
              unint64_t v61 = (v35 + v53) | (v54 + v34);
              unint64_t v62 = ((v40 & 0xFFFFFFFFFFFFFFFELL | (v39 << 32) | v38 & 1) + ((v39 >> 16) & 0xFFFF0000)) | (2 * ((v39 & 0xFF000000000000) == 0));
              LOBYTE(v40) = *(unsigned char *)(a1 + 2964);
              *(void *)&long long v65 = v61;
              DWORD2(v65) = v28;
              BYTE12(v65) = v40;
              unint64_t v66 = (((*(void *)(v26 + v23 + 32) >> 16) & 0xFFFF0000 | (*(void *)(v26 + v23 + 32) << 32) | (2 * ((*(void *)(v26 + v23 + 32) & 0xFF000000000000) == 0)))
                   + 4 * (unsigned __int16)*(_DWORD *)(v26 + v23 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v26 + v23 + 88) & 1;
              unint64_t v67 = (((*(void *)(v26 + v23 + 72) >> 16) & 0xFFFF0000 | (*(void *)(v26 + v23 + 72) << 32) | (2 * ((*(void *)(v26 + v23 + 72) & 0xFF000000000000) == 0)))
                   + (((unint64_t)*(unsigned int *)(v37 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v37 + 88) >> 1) & 1;
              uint64_t v68 = *(void *)(v26 + v23 + 84);
              int v69 = v24;
              int v70 = 0;
              int v71 = v7 | 0x80000000;
              uint64_t v60 = (((4 * (unsigned __int16)*(_DWORD *)(v26 + v23 + 80)) | (*(void *)(v26 + v23 + 32) << 32) | *(unsigned char *)(v26 + v23 + 88) & 1)
                   + ((*(void *)(v26 + v23 + 32) >> 16) & 0xFFFF0000)) | (2
                                                                            * ((*(void *)(v26 + v23 + 32) & 0xFF000000000000) == 0));
              int v42 = *(_DWORD *)(a1 + 1044);
              if (v42 != 0x7FFFFFFF)
              {
                sub_EE03E4(v55, &v60, v63);
                if (!v63[0]) {
                  goto LABEL_47;
                }
                sub_EE03E4(v55, &v60, v63);
                uint64_t v43 = *(void *)(*(void *)(a1 + 1968) + 80 * *(unsigned int *)(v64 + 8) + 8);
                if (v65 < v43
                  || v65 <= v43 && SDWORD1(v65) < SHIDWORD(v43))
                {
                  sub_EE03E4(v55, &v60, v63);
                  int v44 = *(_DWORD *)(*(void *)(a1 + 1968) + 80 * *(unsigned int *)(v64 + 8) + 12);
                  int v45 = *(_DWORD *)(a1 + 1044);
                  if (v45 >= v44 && v42 < SHIDWORD(v41))
                  {
                    int v47 = -1;
                    goto LABEL_49;
                  }
                  if (v45 < v44)
                  {
LABEL_47:
                    if (v42 >= SHIDWORD(v41))
                    {
                      int v47 = 1;
LABEL_49:
                      *(_DWORD *)(a1 + 1048) += v47;
                    }
                  }
                }
              }
              sub_F788FC(v55, &v60, (uint64_t)&v65);
              v63[0] = (((4 * (unsigned __int16)*(_DWORD *)(v37 + 80)) | (*(void *)(v37 + 32) << 32) | *(unsigned char *)(v37 + 88) & 1)
                      + ((*(void *)(v37 + 32) >> 16) & 0xFFFF0000)) | (2
                                                                         * ((*(void *)(v37 + 32) & 0xFF000000000000) == 0));
              LODWORD(v60) = 0;
              sub_F936B4((uint64_t)v57, v63, (int *)&v60);
              sub_F9B8C8(v57, a2);
              sub_F9C8AC((int32x2_t *)v57);
              sub_F855A8(a1, (uint64_t *)&v62, (unsigned int *)&v61, v7);
LABEL_25:
              ++v24;
              v23 += 96;
              if (v58 == v23) {
                break;
              }
              continue;
            }
          }
        }
      }
LABEL_4:
      ++v7;
    }
    while (v7 != v56);
  }
}

void sub_F8347C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_F834B8(uint64_t a1)
{
  uint64_t v43 = -858993459 * ((*(void *)(a1 + 1176) - *(void *)(a1 + 1168)) >> 4);
  if (v43)
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(a1 + 1168);
      uint64_t v46 = v2;
      uint64_t v4 = (uint64_t *)(v3 + 80 * v2);
      if (*(unsigned char *)(a1 + 3048)) {
        sub_F866DC((int32x2_t *)a1, (_DWORD *)(v3 + 80 * v2));
      }
      sub_F97D2C(*(void *)(a1 + 976) + 24, v4, v51);
      if (v51[0])
      {
        uint64_t v7 = v3 + 80 * v46;
        unsigned int v50 = *(_DWORD *)(v7 + 8);
        uint64_t v8 = sub_EC98F8(v5, v6, *(void *)a1 + 9424, (uint64_t)v4, v7 + 8, *(void *)(a1 + 2968), 1);
        uint64_t v45 = v8;
        if (v8 != -1 && (v8 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
        {
          sub_F97D2C(*(void *)(a1 + 976) + 24, v4, v51);
          unint64_t v12 = *(uint64_t **)(v52 + 8);
          int v44 = *(uint64_t **)(v52 + 16);
          if (v12 != v44)
          {
            uint64_t v49 = v4;
            do
            {
              int v47 = v12;
              unint64_t v13 = (void *)(**(void **)(a1 + 976) + 32 * *v12);
              uint64_t v14 = (v13[1] - *v13) >> 4;
              uint64_t v15 = (-858993459 * v14);
              if (v15)
              {
                uint64_t v16 = 0;
                uint64_t v48 = (-858993459 * v14);
                do
                {
                  unint64_t v17 = (void *)(*v13 + 80 * v16);
                  if (*v17 == *v4)
                  {
                    uint64_t v18 = *v13 + 80 * v16;
                    unsigned int v19 = *(_DWORD *)(v18 + 8);
                    unint64_t v20 = sub_EC98F8(v10, v11, *(void *)a1 + 9424, (uint64_t)v17, v18 + 8, *(void *)(a1 + 2968), 1);
                    int v21 = v20;
                    unint64_t v22 = HIDWORD(v20);
                    BOOL v23 = v20 == -1 || HIDWORD(v20) == 0x7FFFFFFF;
                    if (!v23 && v50 >= v19)
                    {
                      char v25 = *(void **)a1;
                      uint64_t v26 = *(void *)(a1 + 2968);
                      int v27 = v4;
                      int v28 = *(unsigned __int8 *)(a1 + 2964);
                      unint64_t v29 = *v27;
                      unint64_t v30 = HIDWORD(*v27);
                      uint64_t v31 = (v29 << 47) & 0x1000000000000;
                      unint64_t v32 = v29 >> 16;
                      if (*(unsigned char *)(*(void *)a1 + 30354))
                      {
                        uint64_t v33 = 0;
                        unint64_t v34 = 0x2127599BF4325C37 * ((v29 & 0xFFFFFFFFFFFF0000 | HIWORD(v31)) ^ (v29 >> 23));
                        for (unint64_t i = v34 ^ (v34 >> 47); ; unint64_t i = v33 + v36)
                        {
                          uint64_t v36 = i & (v25[3802] - 1);
                          unint64_t v37 = *(void *)(v25[3804] + 8 * v36);
                          if (__PAIR64__(*(unsigned __int16 *)(*(void *)a1 + 30428), *(_DWORD *)(*(void *)a1 + 30424)) == __PAIR64__(WORD2(v37), v37)&& (HIWORD(v37) & 1) != (*(unsigned char *)(*(void *)a1 + 30430) == 0))
                          {
                            break;
                          }
                          if ((!v25[3800]
                             || __PAIR64__(*(unsigned __int16 *)(*(void *)a1 + 30396), *(_DWORD *)(*(void *)a1 + 30392)) != __PAIR64__(WORD2(v37), v37)|| (HIWORD(v37) & 1) == (*(unsigned char *)(*(void *)a1 + 30398) == 0))&& v30 == v37&& (unsigned __int16)v32 == WORD2(v37)&& (v31 != 0) != (HIWORD(v37) & 1))
                          {
                            if (v36 != -1) {
                              goto LABEL_16;
                            }
                            break;
                          }
                          ++v33;
                        }
                      }
                      unsigned int v38 = v50 - v19;
                      uint64_t v39 = (uint64_t)(v25 + 1178);
                      sub_ED7040((uint64_t)(v25 + 1), (v30 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)(unsigned __int16)v32 << 32) | v31) ^ 0x1000000000000, (uint64_t)v51);
                      signed int v40 = *(_DWORD *)(a1 + 2960);
                      double v41 = sub_ECA6AC(v39, v51, v26, v40, v28);
                      unint64_t v42 = sub_ECA410(v39, v51, v38, v26, v40, v28, v41);
                      if (v42 != -1 && HIDWORD(v42) != 0x7FFFFFFF)
                      {
                        LODWORD(v51[0]) = v42 + v21 + v45;
                        HIDWORD(v51[0]) = v22 + HIDWORD(v45) + HIDWORD(v42);
                        sub_F785AC(a1, v49, (unsigned int *)v51, *v47, v46, v16, 1, 0);
                      }
LABEL_16:
                      uint64_t v15 = v48;
                      uint64_t v4 = v49;
                    }
                  }
                  ++v16;
                }
                while (v16 != v15);
              }
              unint64_t v12 = v47 + 1;
            }
            while (v47 + 1 != v44);
          }
        }
      }
      uint64_t v2 = v46 + 1;
    }
    while (v46 + 1 != v43);
  }
}

void sub_F83890(void *****a1, unsigned int *a2, unsigned int a3)
{
  if (*((unsigned char *)a1 + 2964) == 2 && (double v5 = a1[371], *((unsigned char *)v5 + 204)))
  {
    BOOL v86 = *((unsigned __int8 *)v5 + 177) != 0;
    double v6 = *a1;
    if (!*((unsigned char *)*a1 + 30352)) {
      goto LABEL_8;
    }
  }
  else
  {
    BOOL v86 = 0;
    double v6 = *a1;
    if (!*((unsigned char *)*a1 + 30352))
    {
LABEL_8:
      unsigned int v7 = 0;
      goto LABEL_9;
    }
  }
  if (!sub_51D60(v6 + 8)) {
    goto LABEL_8;
  }
  unsigned int v7 = sub_F78BBC((uint64_t *)a1[1]) - 1;
LABEL_9:
  BOOL v8 = *a2 >= v7 || *a2 == -1;
  if (!v8) {
    unsigned int v7 = *a2;
  }
  unsigned int v9 = a1[371];
  if (*((unsigned char *)v9 + 177))
  {
    unsigned int v10 = *((_DWORD *)v9 + 49);
    BOOL v11 = v10 >= v7 || v10 == -1;
    if (!v11 && *((unsigned char *)a1 + 2964) == 2) {
      unsigned int v7 = *((_DWORD *)v9 + 49);
    }
  }
  unsigned int v98 = v7;
  if (*((unsigned char *)v9 + 176))
  {
    unsigned int v13 = *((_DWORD *)v9 + 48);
    if (v13 != -1)
    {
      if (v7 >= v13) {
        unsigned int v7 = v13;
      }
      else {
        unsigned int v7 = v98;
      }
    }
  }
  unsigned int v97 = v7;
  uint64_t v89 = a1 + 378;
  double v88 = a1 + 375;
  unsigned int v14 = -1;
  int64x2_t v87 = vdupq_n_s64(0xFFFF0002uLL);
  while (*((_DWORD *)a1 + 518) && ((unint64_t)((char *)a1[250] - (char *)a1[249]) >> 2) < a3)
  {
    uint64_t v15 = &a1[246][10 * *(unsigned int *)a1[253]];
    v107[0] = *v15;
    long long v16 = v15[4];
    long long v18 = v15[1];
    long long v17 = v15[2];
    v107[3] = v15[3];
    long long v108 = v16;
    v107[1] = v18;
    v107[2] = v17;
    sub_F773C4((uint64_t)(a1 + 150));
    uint64_t v19 = (uint64_t)**a1;
    if (*(unsigned char *)(v19 + 7774))
    {
      unint64_t v20 = *(void *)&v107[0];
      int v21 = sub_290DEC(v19 + 3896, DWORD1(v107[0]), 1);
      if (!v21) {
        goto LABEL_100;
      }
      unint64_t v22 = &v21[-*(int *)v21];
      if (*(unsigned __int16 *)v22 < 5u) {
        goto LABEL_100;
      }
      uint64_t v23 = *((unsigned __int16 *)v22 + 2);
      if (!v23
        || *(_DWORD *)&v21[v23 + *(unsigned int *)&v21[v23]] <= (unsigned __int16)WORD1(v20)
        || !sub_295DB4(v19, HIDWORD(v20) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v20) << 32)))
      {
        goto LABEL_100;
      }
    }
    if (*((unsigned char *)a1 + 1052)
      && !sub_2961B8(**a1, HIDWORD(*(void *)&v107[0]) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v107[0]) << 32)))
    {
      goto LABEL_100;
    }
    int v24 = DWORD2(v108);
    unsigned int v25 = *((_DWORD *)a1 + 260);
    if (v25 != -1 && DWORD2(v107[0]) > v25
      || *((unsigned char *)a1 + 3048) && sub_F85B70((uint64_t)a1, (unsigned int *)v107 + 2))
    {
      return;
    }
    int v26 = *((_DWORD *)a1 + 261);
    if (v26 != 0x7FFFFFFF && SHIDWORD(v107[0]) <= v26) {
      --*((_DWORD *)a1 + 262);
    }
    if (*v89 != -1
      && sub_F963A0((uint64_t)*a1[1], HIDWORD(*(void *)&v107[0]) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v107[0]) << 32), v89))
    {
      goto LABEL_100;
    }
    int v90 = v24 & 0x7FFFFFFF;
    unsigned int v27 = sub_F85CC4((uint64_t)a1, (uint64_t *)v107, (unsigned int *)v107 + 2, v24 & 0x7FFFFFFF);
    unsigned int v96 = v27;
    int v28 = *((_DWORD *)a1 + 740);
    signed int v29 = 0x7FFFFFFF;
    if (v28 != 0x7FFFFFFF)
    {
      if (v107[0] < 0) {
        char v30 = -5;
      }
      else {
        char v30 = 5;
      }
      signed int v29 = SHIDWORD(v107[0]) / -10
          + v28
          + (((-103 * (char)(v30 + SHIDWORD(v107[0]) % 10)) >> 15) & 1)
          + ((-103 * (char)(v30 + SHIDWORD(v107[0]) % 10)) >> 10);
    }
    signed int v95 = v29;
    uint64_t v31 = a1[371];
    int v32 = *((unsigned __int8 *)a1 + 2964);
    if (v32 != 2) {
      goto LABEL_61;
    }
    if (v29 == 0x7FFFFFFF) {
      goto LABEL_61;
    }
    if (!*((unsigned char *)v31 + 176)) {
      goto LABEL_61;
    }
    int v33 = *((_DWORD *)*a1 + 2368);
    if (v33 == 0x7FFFFFFF) {
      goto LABEL_61;
    }
    int v34 = *((_DWORD *)v31 + 43);
    int v35 = v34 / -10;
    int v36 = v34 % 10;
    char v37 = v34 < 0 ? -5 : 5;
    if ((int)(v35 + v33 + (((-103 * (char)(v37 + v36)) >> 15) & 1) + ((-103 * (char)(v37 + v36)) >> 10)) <= v29)
    {
      int v57 = *((_DWORD *)v31 + 42);
      int v58 = v57 / 10;
      int v59 = v57 % 10;
      if (v57 < 0) {
        char v60 = -5;
      }
      else {
        char v60 = 5;
      }
      BOOL v8 = (int)(v58 + v33 + (((103 * (char)(v60 + v59)) >> 15) & 1) + ((103 * (char)(v60 + v59)) >> 10)) < v29;
      unsigned int v38 = &v98;
      if (!v8) {
        unsigned int v38 = &v97;
      }
    }
    else
    {
LABEL_61:
      unsigned int v38 = &v98;
    }
    uint64_t v39 = *v38 >= v27 ? &v96 : v38;
    int v40 = sub_F860E0((uint64_t)a1, v107, (int *)v31, &v95, v32, v39);
    int v94 = v40;
    if (v40 == -1)
    {
LABEL_100:
      int v71 = 2;
      goto LABEL_101;
    }
    if (v40)
    {
      unint64_t v55 = sub_F968AC((uint64_t)*a1[1], HIDWORD(*(void *)&v107[0]) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v107[0]) << 32), (*(void *)&v107[0] >> 1) & 1, &v94);
      unint64_t v93 = v55;
      if (!v55 || v55 > 0xFFFFFFFEFFFFFFFFLL) {
        goto LABEL_100;
      }
      int v56 = v86 && !sub_F817D8((uint64_t **)a1 + 356, &v93) ? 0 : *((unsigned __int8 *)a1 + 2964);
      sub_FA4E90(*a1 + 1835, *(unint64_t *)&v107[0], &v94, 1u, (int *)a1[371], &v95, v56, (uint64_t)v88);
      if (a1[375] == a1[376]) {
        goto LABEL_100;
      }
      sub_5217C8((uint64_t)(a1 + 260), &v93, (uint64_t)&v99);
      unint64_t v61 = v99;
      if (v101.i8[0])
      {
        uint64_t v62 = *(void *)(v99 + 8) + 12 * v100;
        *(void *)uint64_t v62 = v93;
        *(_DWORD *)(v62 + 8) = 0x7FFFFFFF;
      }
      uint64_t v63 = *(void *)(v61 + 8) + 12 * v100;
      int v66 = *(_DWORD *)(v63 + 8);
      uint64_t v64 = (_DWORD *)(v63 + 8);
      int v65 = v66;
      if (v66 == 0x7FFFFFFF || SHIDWORD(v107[0]) < v65) {
        _DWORD *v64 = HIDWORD(v107[0]);
      }
      uint64_t v67 = -858993459 * ((unint64_t)((char *)a1[376] - (char *)a1[375]) >> 3);
      if (v67)
      {
        uint64_t v68 = 0;
        int v69 = 0;
        uint64_t v70 = 40 * v67;
        do
        {
          uint64_t v72 = *v88 + v68;
          uint64_t v73 = *(void *)(v72 + 28);
          unint64_t v74 = v73 & 0xFFFFFFFF00000000;
          if (v73 != -1 && v74 != 0x7FFFFFFF00000000)
          {
            unint64_t v99 = (v74 + *((void *)&v107[0] + 1)) & 0xFFFFFFFF00000000 | (v73 + DWORD2(v107[0]));
            LODWORD(v100) = v95;
            BYTE4(v100) = v56;
            int64x2_t v101 = v87;
            *(void *)&long long v102 = 640;
            int v104 = v69;
            int v105 = v94;
            int v106 = v90;
            int v76 = *(_DWORD *)(v72 + 32);
            long long v77 = *(_OWORD *)(v72 + 16);
            int64x2_t v101 = *(int64x2_t *)v72;
            long long v102 = v77;
            int v103 = v76;
            unint64_t v92 = *(void *)v72;
            sub_F77294((uint64_t)a1, (uint64_t *)&v92, &v99);
          }
          ++v69;
          v68 += 40;
        }
        while (v70 != v68);
      }
    }
    else
    {
      if (!*((unsigned char *)a1 + 3048)) {
        sub_F855A8((uint64_t)a1, (uint64_t *)v107, (unsigned int *)v107 + 2, v90);
      }
      sub_ED8808((uint64_t)(*a1 + 1), *(unint64_t *)&v107[0], 1, a1 + 372, 0);
      uint64_t v41 = -1431655765 * ((unint64_t)((char *)a1[373] - (char *)a1[372]) >> 5);
      if (v41)
      {
        unint64_t v42 = 0;
        int v43 = 0;
        uint64_t v44 = 96 * v41;
        do
        {
          uint64_t v45 = a1[372];
          uint64_t v46 = (uint64_t *)*a1;
          uint64_t v47 = (uint64_t)a1[371];
          int v48 = *((unsigned __int8 *)a1 + 2964);
          if (!*((unsigned char *)*a1 + 30354)
            || sub_F558C4((uint64_t)(v46 + 3805), (uint64_t)&v45[v42 / 8]) == -1
            && (unint64_t v49 = (unint64_t)v45[v42 / 8 + 4],
                uint64_t v50 = 4 * (unsigned __int16)LODWORD(v45[v42 / 8 + 10]),
                unint64_t v99 = (((((v49 >> 16) & 0xFFFF0000 | (v49 << 32) | (2 * ((v49 & 0xFF000000000000) == 0))) + v50) << 16) & 0xFFFF00000000 | ((((v49 >> 16) & 0xFFFF0000 | (v49 << 32) | (2 * ((v49 & 0xFF000000000000) == 0))) + v50) >> 32) | ((unint64_t)((v49 & 0xFF000000000000) == 0) << 48)) ^ 0x1000000000000,
                sub_F57414((uint64_t)(v46 + 3795), &v99) == -1))
          {
            unint64_t v51 = sub_F5C6E0((uint64_t)(v46 + 1178), (int **)&v45[v42 / 8], 0x3B9ACA00u, v47, v95, v48);
            unint64_t v52 = v51 & 0xFFFFFFFF00000000;
            if (v51 != -1 && v52 != 0x7FFFFFFF00000000)
            {
              unint64_t v93 = (((4 * (unsigned __int16)LODWORD(v45[v42 / 8 + 10])) | ((void)v45[v42 / 8 + 4] << 32) | (uint64_t)v45[v42 / 8 + 11] & 1)
                   + (((unint64_t)v45[v42 / 8 + 4] >> 16) & 0xFFFF0000)) | (2
                                                                                 * (((unint64_t)v45[v42 / 8 + 4] & 0xFF000000000000) == 0));
              unint64_t v92 = (*((void *)&v107[0] + 1) + v52) & 0xFFFFFFFF00000000 | (DWORD2(v107[0]) + v51);
              char v54 = *((unsigned char *)a1 + 2964);
              unint64_t v99 = v92;
              LODWORD(v100) = v95;
              BYTE4(v100) = v54;
              v101.i64[0] = ((((unint64_t)v45[v42 / 8 + 4] >> 16) & 0xFFFF0000 | ((void)v45[v42 / 8 + 4] << 32) | (2 * (((unint64_t)v45[v42 / 8 + 4] & 0xFF000000000000) == 0)))
                           + 4 * (unsigned __int16)LODWORD(v45[v42 / 8 + 10])) & 0xFFFFFFFFFFFFFFFELL | (uint64_t)v45[v42 / 8 + 11] & 1;
              v101.i64[1] = ((((unint64_t)v45[v42 / 8 + 9] >> 16) & 0xFFFF0000 | ((void)v45[v42 / 8 + 9] << 32) | (2 * (((unint64_t)v45[v42 / 8 + 9] & 0xFF000000000000) == 0)))
                           + (((unint64_t)LODWORD(v45[v42 / 8 + 10]) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)LOBYTE(v45[v42 / 8 + 11]) >> 1) & 1;
              *(void *)&long long v102 = *(void ****)((char *)&v45[v42 / 8 + 10] + 4);
              int v104 = v43;
              int v105 = 0;
              int v106 = v90;
              sub_F77294((uint64_t)a1, (uint64_t *)&v93, &v99);
              sub_F855A8((uint64_t)a1, (uint64_t *)&v93, (unsigned int *)&v92, v90);
            }
          }
          ++v43;
          v42 += 96;
        }
        while (v44 != v42);
      }
    }
    int v78 = *((_DWORD *)a1 + 261);
    if (v78 == 0x7FFFFFFF) {
      goto LABEL_110;
    }
    int v71 = 0;
    if (*((_DWORD *)a1 + 262) || v14 != -1) {
      goto LABEL_101;
    }
    int v79 = a1[119];
    unint64_t v80 = a1[120];
    if (v79 == v80)
    {
      int v71 = 3;
      unsigned int v14 = -1;
      goto LABEL_101;
    }
    unsigned int v14 = 0;
    int v81 = a1[116];
    do
    {
      if (0xAAAAAAAAAAAAAAABLL * (a1[117] - v81) > *v79) {
        unint64_t v82 = (unint64_t)v81[3 * *v79 + 1];
      }
      else {
        unint64_t v82 = 0x7FFFFFFFFFFFFFFFLL;
      }
      unint64_t v83 = HIDWORD(v82);
      if (v14 > v82) {
        LODWORD(v82) = v14;
      }
      if (v78 >= (int)v83) {
        unsigned int v14 = v82;
      }
      ++v79;
    }
    while (v79 != v80);
    unsigned int v84 = *((_DWORD *)a1 + 260);
    if (v84 != -1 && v14 >= v84)
    {
LABEL_110:
      int v71 = 0;
    }
    else
    {
      int v71 = 0;
      *((_DWORD *)a1 + 260) = v14;
    }
LABEL_101:
    if (v71 == 3) {
      return;
    }
  }
}

void sub_F842AC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, char a5, _DWORD *a6, int a7, unsigned int *a8, uint64_t *a9, void *a10, unsigned int a11, int a12, int a13)
{
  sub_F73894(a1);
  *(_DWORD *)(a1 + 2960) = *a4;
  *(unsigned char *)(a1 + 2964) = a5;
  *(void *)(a1 + 2968) = a3;
  if (a1 + 1168 != a2) {
    sub_BFF628((void *)(a1 + 1168), *(char **)a2, *(char **)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
  }
  *(void *)(a1 + 1192) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 1040) = *a6;
  *(_DWORD *)(a1 + 1044) = a7;
  *(_DWORD *)(a1 + 20) = a13;
  *(void *)(a1 + 976) = a1 + 24;
  sub_F82708((int32x2_t *)a1);
  sub_F82E28(a1, a10, v20, v21);
  uint64_t v23 = *a9;
  uint64_t v22 = a9[1];
  if (*a9 != v22)
  {
    do
    {
      int v25 = *(_DWORD *)(v23 + 8);
      sub_F936B4(a1 + 1056, (void *)v23, &v25);
      sub_F9B8C8((uint64_t **)(a1 + 1056), a10);
      sub_F9C8AC((int32x2_t *)(a1 + 1056));
      v23 += 16;
    }
    while (v23 != v22);
  }
  sub_F83890((void *****)a1, a8, a11);
}

void sub_F843E8(int32x2_t *a1, int32x2_t *a2, uint64_t ***a3, uint64_t a4, __int32 a5, __int8 a6, __int32 a7, __int32 a8, unsigned int a9, int a10, unsigned int a11)
{
  sub_F73894((uint64_t)a1);
  uint64_t v19 = *a3;
  long long v18 = a3[1];
  if (*a3 == v18)
  {
    double v20 = *a3;
  }
  else
  {
    do
    {
      int v24 = a1;
      sub_F80DAC(a1 + 3, v19, 1, (void **)&v24);
      v19 += 4;
    }
    while (v19 != v18);
    uint64_t v19 = *a3;
    double v20 = a3[1];
  }
  unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&a1[117] - *(void *)&a1[116]) >> 3);
  unint64_t v22 = ((char *)v20 - (char *)v19) >> 5;
  if (v22 > v21) {
    sub_F92E44((void **)&a1[116], v22 - v21);
  }
  a1[122] = (int32x2_t)&a1[3];
  sub_F844FC(a1, a2, a4, a5, a6, a7, a8, a9, a11);
}

void sub_F844FC(int32x2_t *a1, int32x2_t *a2, uint64_t a3, __int32 a4, __int8 a5, __int32 a6, __int32 a7, unsigned int a8, unsigned int a9)
{
  unsigned int v20 = a8;
  a1[370].i32[0] = a4;
  a1[370].i8[4] = a5;
  a1[371] = (int32x2_t)a3;
  unsigned int v13 = a1 + 146;
  if (v13 != a2) {
    sub_BFF628(v13, *(char **)a2, *(char **)&a2[1], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&a2[1] - *(void *)a2) >> 4));
  }
  a1[149] = a2[3];
  a1[130].i32[0] = a6;
  a1[130].i32[1] = a7;
  unsigned int v14 = (void *)a1[122];
  if (v14[11]
     + v14[5]
     + v14[17]
     + v14[23]
     + v14[29]
     + v14[35]
     + v14[41]
     + v14[47]
     + v14[53]
     + v14[59]
     + v14[65]
     + v14[71]
     + v14[77]
     + v14[83]
     + v14[89]
     + v14[95]
    || a1[381].i8[0])
  {
    sub_F82708(a1);
    long long __p = 0;
    long long v18 = 0;
    uint64_t v19 = 0;
    sub_F82E28((uint64_t)a1, &__p, v15, v16);
    if (__p)
    {
      long long v18 = __p;
      operator delete(__p);
    }
    sub_F834B8((uint64_t)a1);
    sub_F83890(a1, &v20, a9);
  }
}

void sub_F84654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F84670@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  sub_EAFC08((uint64_t)a3);
  BOOL v8 = 0;
  sub_F84778(a1, a2, (uint64_t)v7, a3);
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

void sub_F8475C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_F75CDC((uint64_t *)va);
  sub_405F44(v2);
  _Unwind_Resume(a1);
}

unint64_t sub_F84778(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  sub_EAD268((uint64_t)a4);
  uint64_t v8 = *(void *)(a1 + 928);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 936) - v8) >> 3) <= a2) {
    return 0;
  }
  unint64_t v9 = *(void *)(v8 + 24 * a2);
  if (v9)
  {
    if (!*(unsigned char *)(a1 + 3048) || *(unsigned char *)(a1 + 3049))
    {
      uint64_t v10 = v8 + 24 * a2;
      BOOL v11 = (_DWORD *)(v10 + 20);
      if ((*(unsigned char *)(v10 + 23) & 0x40) != 0)
      {
        sub_ED7040(*(void *)a1 + 8, (HIDWORD(v9) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(v9) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((v9 >> 1) & 1) << 48)) ^ 0x1000000000000, (uint64_t)v14);
        sub_EAFC44((uint64_t)a4, v9, v14);
        sub_EADAA8((uint64_t)a4, *(void *)(a1 + 1168) + 80 * (*v11 & 0x3FFFFFFF) + 8);
        unint64_t v9 = 0;
        uint64_t v12 = 32 * a2;
        if ((*v11 & 0x80000000) != 0)
        {
LABEL_10:
          sub_F84EC0((uint64_t *)a1, (void **)(v8 + 24 * a2), *(void *)(a1 + 3880) + 40 * a2, (unint64_t *)(*(void *)(**(void **)(a1 + 976) + v12) + 80* *(unsigned int *)(v8 + 24 * a2 + 16)), (uint64_t)v14);
          sub_EB144C((uint64_t)a4, (uint64_t)v14);
          sub_405F44((uint64_t)v14);
        }
      }
      else
      {
        unint64_t v9 = sub_F84AA4(a1, (uint64_t *)(v8 + 24 * a2), a3, a4);
        uint64_t v12 = 32 * a2;
        if ((*v11 & 0x80000000) != 0) {
          goto LABEL_10;
        }
      }
      sub_EAD920((uint64_t)a4, *(void *)(**(void **)(a1 + 976) + v12) + 80 * *(unsigned int *)(v8 + 24 * a2 + 16) + 8);
      return v9;
    }
    return 0;
  }
  return v9;
}

void sub_F84984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_F8499C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  sub_EAFC08((uint64_t)a3);
  uint64_t v8 = 0;
  sub_F84AA4(a1, a2, (uint64_t)v7, a3);
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

void sub_F84A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_F75CDC((uint64_t *)va);
  sub_405F44(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_F84AA4(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  sub_EAD268((uint64_t)a4);
  uint64_t v8 = *a2;
  if (!*a2) {
    return 0;
  }
  char v37 = 0;
  unsigned int v38 = 0;
  uint64_t v39 = 0;
  uint64_t v36 = v8;
  do
  {
    sub_EE03E4(a1 + 1200, &v36, &v27);
    unsigned int v9 = *(_DWORD *)(*((void *)&v28 + 1) + 8);
    uint64_t v10 = *(void *)(a1 + 1968);
    sub_F7668C(&v37, v10 + 80 * v9 + 8);
    if ((*(_DWORD *)(v10 + 80 * v9 + 72) & 0x80000000) != 0)
    {
      uint64_t v36 = 0;
      BOOL v11 = v37;
      uint64_t v12 = v38;
      if (v37 != v38) {
        goto LABEL_6;
      }
LABEL_23:
      uint64_t v20 = 0;
      if (!v11) {
        return v20;
      }
      goto LABEL_28;
    }
    uint64_t v36 = *(void *)(v10 + 80 * v9 + 32);
  }
  while (v36);
  BOOL v11 = v37;
  uint64_t v12 = v38;
  if (v37 == v38) {
    goto LABEL_23;
  }
LABEL_6:
  long long __p = 0;
  int v34 = 0;
  uint64_t v35 = 0;
  while (!*((_DWORD *)v11 + 15))
  {
    if (*(void *)(a3 + 24) && !sub_EAE144(a4))
    {
      *(void *)&long long v27 = *((void *)v11 + 2);
      uint64_t v16 = *(void *)(a3 + 24);
      if (!v16) {
        sub_29F82C();
      }
      if ((*(uint64_t (**)(uint64_t, long long *))(*(void *)v16 + 48))(v16, &v27)) {
        goto LABEL_25;
      }
    }
    uint64_t v17 = *(void *)a1 + 8;
    sub_ED7040(v17, (HIDWORD(*((void *)v11 + 2)) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(*((void *)v11 + 2)) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((*((void *)v11 + 2) >> 1) & 1) << 48)) ^ 0x1000000000000, (uint64_t)v42);
    sub_ED7040(v17, (HIDWORD(*((void *)v11 + 3)) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(*((void *)v11 + 3)) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((*((void *)v11 + 3) >> 1) & 1) << 48)) ^ 0x1000000000000, (uint64_t)v40);
    int v18 = *((_DWORD *)v11 + 4);
    int v19 = *((_DWORD *)v11 + 6);
    *(void *)signed int v29 = v43;
    long long v27 = v42[0];
    long long v28 = v42[1];
    *(_OWORD *)&v29[8] = v40[0];
    *(_OWORD *)&v29[24] = v40[1];
    uint64_t v30 = v41;
    int v31 = (v19 << 14) & 0x3FFF0000 | ((unsigned __int16)v18 >> 2);
    uint64_t v32 = *((void *)v11 + 4);
    sub_EAFD8C((uint64_t)a4, (int **)&v27);
LABEL_7:
    v11 += 72;
    if (v11 == v12)
    {
      sub_EE03E4(a1 + 1200, a2, &v27);
      sub_EADAA8((uint64_t)a4, *(void *)(a1 + 1168)+ 80* (*(_DWORD *)(*(void *)(a1 + 1968) + 80 * *(unsigned int *)(*((void *)&v28 + 1) + 8) + 72) & 0x7FFFFFFF)+ 8);
      goto LABEL_32;
    }
  }
  sub_FBBF58((void **)(*(void *)a1 + 19984), (uint64_t)(v11 + 16), *(int **)(a1 + 2968), (signed int *)v11 + 2, v11[12], &__p);
  unsigned int v13 = __p;
  unsigned int v14 = v34;
  if (__p != v34)
  {
    while (1)
    {
      if (*(void *)(a3 + 24) && !sub_EAE144(a4))
      {
        *(void *)&long long v27 = (((v13[4] >> 16) & 0xFFFF0000 | (v13[4] << 32) | (2 * ((v13[4] & 0xFF000000000000) == 0)))
                         + 4 * (unsigned __int16)*((_DWORD *)v13 + 20)) & 0xFFFFFFFFFFFFFFFELL | v13[11] & 1;
        uint64_t v15 = *(void *)(a3 + 24);
        if (!v15) {
          sub_29F82C();
        }
        if ((*(uint64_t (**)(uint64_t, long long *))(*(void *)v15 + 48))(v15, &v27)) {
          break;
        }
      }
      sub_EAFD8C((uint64_t)a4, (int **)v13);
      v13 += 12;
      if (v13 == v14) {
        goto LABEL_7;
      }
    }
LABEL_25:
    uint64_t v21 = sub_EADAD0((uint64_t)a4);
    long long v27 = *(_OWORD *)v21;
    long long v22 = *(_OWORD *)(v21 + 16);
    long long v23 = *(_OWORD *)(v21 + 32);
    long long v24 = *(_OWORD *)(v21 + 48);
    *(void *)&v29[32] = *(void *)(v21 + 64);
    *(_OWORD *)signed int v29 = v23;
    *(_OWORD *)&v29[16] = v24;
    long long v28 = v22;
    LODWORD(v27) = 1000000000;
    sub_EADAA8((uint64_t)a4, (uint64_t)&v27);
    uint64_t v20 = 1;
    int v25 = __p;
    if (!__p) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  sub_EAD268((uint64_t)a4);
LABEL_32:
  uint64_t v20 = 0;
  int v25 = __p;
  if (__p)
  {
LABEL_26:
    int v34 = v25;
    operator delete(v25);
  }
LABEL_27:
  BOOL v11 = v37;
  if (v37)
  {
LABEL_28:
    unsigned int v38 = v11;
    operator delete(v11);
  }
  return v20;
}

void sub_F84E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p)
  {
    operator delete(__p);
    long long v28 = a26;
    if (!a26) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    long long v28 = a26;
    if (!a26) {
      goto LABEL_3;
    }
  }
  operator delete(v28);
  _Unwind_Resume(exception_object);
}

void sub_F84EC0(uint64_t *a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  sub_EAFC08(a5);
  uint64_t v10 = *a2;
  if (!*a2) {
    return;
  }
  uint64_t v36 = 0;
  char v37 = 0;
  uint64_t v38 = 0;
  uint64_t v35 = v10;
  do
  {
    int v11 = *(_DWORD *)(a3 + 32);
    if (v11 == 1)
    {
      unsigned int v14 = (void *)sub_F9A7EC(a3, (unsigned int *)&v35);
    }
    else
    {
      if (v11)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      uint64_t v12 = *(void **)a3;
      long long __p = v10;
      uint64_t v13 = sub_F9A938(v12, &__p);
      unsigned int v14 = *(void **)v13;
      uint64_t v15 = *(void **)(v13 + 8);
    }
    v34[0] = v14;
    v34[1] = v15;
    sub_3BFF8((char **)&v36, v34);
    uint64_t v10 = v34[0];
    uint64_t v35 = v34[0];
  }
  while (v34[0]);
  uint64_t v16 = (unint64_t *)v36;
  uint64_t v17 = (unint64_t *)v37;
  if (v36 != v37)
  {
    int v18 = v37 - 16;
    if (v37 - 16 > v36)
    {
      int v19 = (char *)v36 + 16;
      do
      {
        long long v20 = *((_OWORD *)v19 - 1);
        *((_OWORD *)v19 - 1) = *(_OWORD *)v18;
        *(_OWORD *)int v18 = v20;
        v18 -= 16;
        BOOL v21 = v19 >= v18;
        v19 += 16;
      }
      while (!v21);
      uint64_t v16 = (unint64_t *)v36;
      uint64_t v17 = (unint64_t *)v37;
    }
  }
  memset(v34, 0, sizeof(v34));
  long long __p = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  if (v16 == v17) {
    goto LABEL_28;
  }
  while (1)
  {
    if (!*((_DWORD *)v16 + 2))
    {
      if (*v16) {
        unint64_t v28 = *v16;
      }
      else {
        unint64_t v28 = *a4;
      }
      sub_ED8808(*a1 + 8, v28, 0, v34, 0);
      sub_EAFD8C(a5, (int **)v34[0] + 12 * *((unsigned int *)v16 + 3));
      goto LABEL_16;
    }
    uint64_t v22 = *a1;
    unint64_t v23 = *v16;
    long long v24 = (int *)a1[371];
    signed int v30 = 0x7FFFFFFF;
    sub_FA4E90((void **)(v22 + 14680), v23, (_DWORD *)v16 + 2, 0, v24, &v30, 0, (uint64_t)&__p);
    uint64_t v25 = *a1;
    int v26 = (char *)__p + 40 * *((unsigned int *)v16 + 3);
    long long v27 = (int *)a1[371];
    signed int v30 = 0x7FFFFFFF;
    sub_FBBF58((void **)(v25 + 19984), (uint64_t)v26, v27, &v30, 0, v34);
    if (v34[0] == v34[1]) {
      break;
    }
    sub_EB0F78(a5, (int ***)v34);
LABEL_16:
    v16 += 2;
    if (v16 == v17) {
      goto LABEL_26;
    }
  }
  sub_EAD268(a5);
LABEL_26:
  if (__p)
  {
    uint64_t v32 = __p;
    operator delete(__p);
  }
LABEL_28:
  if (v34[0])
  {
    v34[1] = v34[0];
    operator delete(v34[0]);
  }
  if (v36)
  {
    char v37 = (char *)v36;
    operator delete(v36);
  }
}

void sub_F8514C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
  {
    operator delete(__p);
    BOOL v21 = a14;
    if (!a14)
    {
LABEL_3:
      uint64_t v22 = a18;
      if (!a18) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    BOOL v21 = a14;
    if (!a14) {
      goto LABEL_3;
    }
  }
  operator delete(v21);
  uint64_t v22 = a18;
  if (!a18)
  {
LABEL_4:
    sub_405F44(v19);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v22);
  sub_405F44(v19);
  _Unwind_Resume(a1);
}

void sub_F851F0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = xmmword_20B8E30;
  *(void *)(a2 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v4 = *(char **)(a1 + 2080);
  double v5 = *(unsigned int **)(a1 + 2088);
  if (*v4 > -2)
  {
    double v6 = *(void **)(a1 + 2080);
    uint64_t v17 = *(void *)(a1 + 2104);
    uint64_t v8 = &v4[v17];
    if (v4 != &v4[v17])
    {
LABEL_5:
      unsigned int v9 = (char **)(a1 + 2080);
      goto LABEL_6;
    }
  }
  else
  {
    double v6 = *(void **)(a1 + 2080);
    do
    {
      unint64_t v7 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      double v6 = (void *)((char *)v6 + v7);
      v5 += 3 * v7;
    }
    while (*(char *)v6 < -1);
    uint64_t v8 = &v4[*(void *)(a1 + 2104)];
    if (v6 != (void *)v8) {
      goto LABEL_5;
    }
  }
  unsigned int v9 = (char **)(a1 + 2128);
  uint64_t v18 = 1;
  uint64_t v19 = a1 + 2080;
  while (1)
  {
    double v5 = *(unsigned int **)(v19 + 56);
    double v6 = *v9;
    if (**v9 <= -2)
    {
      do
      {
        unint64_t v20 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        double v6 = (void *)((char *)v6 + v20);
        v5 += 3 * v20;
      }
      while (*(char *)v6 < -1);
    }
    uint64_t v8 = &(*v9)[*(void *)(v19 + 72)];
    if (v6 != (void *)v8) {
      break;
    }
    uint64_t v19 = a1 + 2080 + 48 * v18++;
    unsigned int v9 = (char **)(v19 + 48);
    if (v18 == 16) {
      goto LABEL_26;
    }
  }
LABEL_6:
  uint64_t v10 = (char **)(a1 + 2848);
  do
  {
    while (1)
    {
      sub_F92FD4(**(void **)(a1 + 8), v5, (uint64_t)&__p);
      sub_33998(a2, (uint64_t)&__p);
      int v11 = *((char *)v6 + 1);
      double v6 = (void *)((char *)v6 + 1);
      v5 += 3;
      if (v11 <= -2)
      {
        do
        {
          unint64_t v12 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          double v6 = (void *)((char *)v6 + v12);
          v5 += 3 * v12;
        }
        while (*(char *)v6 < -1);
      }
      if (v6 == (void *)v8) {
        break;
      }
      if (!v9) {
        goto LABEL_26;
      }
    }
    uint64_t v13 = v9 + 6;
    if (v9 + 6 == v10) {
      break;
    }
    while (1)
    {
      unsigned int v14 = v13;
      uint64_t v15 = v9[6];
      double v5 = (unsigned int *)v9[7];
      double v6 = v15;
      if (*v15 <= -2)
      {
        do
        {
          unint64_t v16 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          double v6 = (void *)((char *)v6 + v16);
          v5 += 3 * v16;
        }
        while (*(char *)v6 < -1);
      }
      uint64_t v8 = &v9[9][(void)v15];
      if (v6 != (void *)v8) {
        break;
      }
      uint64_t v13 = v14 + 6;
      unsigned int v9 = v14;
      if (v14 + 6 == v10) {
        goto LABEL_26;
      }
    }
    unsigned int v9 = v14;
  }
  while (v14);
LABEL_26:
  if (!sub_344C4((_DWORD *)a2))
  {
    long long __p = 0;
    int v31 = 0;
    uint64_t v32 = 0;
    BOOL v21 = *(unsigned int **)(a1 + 1992);
    uint64_t v22 = *(unsigned int **)(a1 + 2000);
    if (v21 != v22)
    {
      do
      {
        uint64_t v23 = *(void *)(a1 + 1968);
        uint64_t v24 = 80 * *v21;
        v28[0] = 1;
        unint64_t v25 = sub_F968AC(**(void **)(a1 + 8), HIDWORD(*(void *)(v23 + v24)) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*(void *)(v23 + v24)) << 32), (*(void *)(v23 + v24) >> 1) & 1, v28);
        unint64_t v29 = v25;
        if (v25) {
          BOOL v26 = HIDWORD(v25) == -1;
        }
        else {
          BOOL v26 = 1;
        }
        if (!v26)
        {
          long long v27 = __p;
          if (__p != v31)
          {
            while (*v27 != v25)
            {
              if (++v27 == v31) {
                goto LABEL_39;
              }
            }
          }
          if (v27 == v31)
          {
LABEL_39:
            sub_F92FD4(**(void **)(a1 + 8), (unsigned int *)&v29, (uint64_t)v28);
            sub_33998(a2, (uint64_t)v28);
            sub_29603C(&__p, &v29);
          }
        }
        ++v21;
      }
      while (v21 != v22);
      if (__p)
      {
        int v31 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_F85584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_F855A8(uint64_t a1, uint64_t *a2, unsigned int *a3, int a4)
{
  double v5 = a2;
  if (*(unsigned char *)(a1 + 3048)) {
    sub_F866DC((int32x2_t *)a1, a2);
  }
  sub_F97D2C(*(void *)(a1 + 976) + 24, v5, v67);
  if (v67[0])
  {
    sub_F97D2C(*(void *)(a1 + 976) + 24, v5, v67);
    int v7 = *(_DWORD *)(a1 + 2960);
    signed int v64 = 0x7FFFFFFF;
    if (v7 != 0x7FFFFFFF)
    {
      int v8 = a3[1];
      int v9 = v8 / -10;
      int v10 = v8 % 10;
      if (v8 < 0) {
        char v11 = -5;
      }
      else {
        char v11 = 5;
      }
      signed int v64 = v9 + v7 + (((-103 * (char)(v11 + v10)) >> 15) & 1) + ((-103 * (char)(v11 + v10)) >> 10);
    }
    unint64_t v12 = *(uint64_t **)(v68 + 8);
    int v59 = *(uint64_t **)(v68 + 16);
    if (v12 != v59)
    {
      unint64_t v61 = v5;
      do
      {
        char v60 = v12;
        int v66 = (uint64_t *)(**(void **)(a1 + 976) + 32 * *v12);
        uint64_t v65 = -858993459 * ((unint64_t)(v66[1] - *v66) >> 4);
        if (v65)
        {
          for (uint64_t i = 0; i != v65; ++i)
          {
            uint64_t v14 = *v66;
            uint64_t v15 = (unint64_t *)(*v66 + 80 * i);
            unint64_t v16 = *v15;
            if (*v15 == *v5)
            {
              uint64_t v17 = *(void **)a1;
              uint64_t v18 = *(void *)(a1 + 2968);
              int v19 = *(unsigned __int8 *)(a1 + 2964);
              unint64_t v20 = HIDWORD(v16);
              uint64_t v21 = (v16 << 47) & 0x1000000000000;
              unint64_t v22 = v16 >> 16;
              if (*(unsigned char *)(*(void *)a1 + 30354))
              {
                uint64_t v23 = 0;
                unint64_t v24 = 0x2127599BF4325C37 * ((v16 & 0xFFFFFFFFFFFF0000 | HIWORD(v21)) ^ (v16 >> 23));
                for (unint64_t j = v24 ^ (v24 >> 47); ; unint64_t j = v23 + v26)
                {
                  uint64_t v26 = j & (v17[3802] - 1);
                  unint64_t v27 = *(void *)(v17[3804] + 8 * v26);
                  if (__PAIR64__(*(unsigned __int16 *)(*(void *)a1 + 30428), *(_DWORD *)(*(void *)a1 + 30424)) == __PAIR64__(WORD2(v27), v27)
                    && (HIWORD(v27) & 1) != (*(unsigned char *)(*(void *)a1 + 30430) == 0))
                  {
                    break;
                  }
                  if ((!v17[3800]
                     || __PAIR64__(*(unsigned __int16 *)(*(void *)a1 + 30396), *(_DWORD *)(*(void *)a1 + 30392)) != __PAIR64__(WORD2(v27), v27)
                     || (HIWORD(v27) & 1) == (*(unsigned char *)(*(void *)a1 + 30398) == 0))
                    && v20 == v27
                    && (unsigned __int16)v22 == WORD2(v27)
                    && (v21 != 0) != (HIWORD(v27) & 1))
                  {
                    if (v26 != -1) {
                      goto LABEL_14;
                    }
                    break;
                  }
                  ++v23;
                }
              }
              uint64_t v28 = (uint64_t)(v17 + 1178);
              sub_ED7040((uint64_t)(v17 + 1), (v20 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)(unsigned __int16)v22 << 32) | v21) ^ 0x1000000000000, (uint64_t)v67);
              double v29 = sub_ECA6AC(v28, v67, v18, v64, v19);
              unint64_t v30 = sub_ECA410(v28, v67, 0x3B9ACA00u, v18, v64, v19, v29);
              unint64_t v33 = v30;
              if (v30 != -1)
              {
                unint64_t v34 = HIDWORD(v30);
                if (HIDWORD(v30) != 0x7FFFFFFF)
                {
                  uint64_t v35 = *(void **)a1;
                  uint64_t v36 = v14 + 80 * i;
                  int v37 = *(_DWORD *)(v36 + 8);
                  uint64_t v62 = v36 + 8;
                  uint64_t v38 = *(void *)(a1 + 2968);
                  int v39 = *(unsigned __int8 *)(a1 + 2964);
                  unint64_t v40 = HIDWORD(*v5);
                  uint64_t v41 = (*v5 << 47) & 0x1000000000000;
                  unint64_t v42 = (unint64_t)*v5 >> 16;
                  if (*(unsigned char *)(*(void *)a1 + 30354))
                  {
                    uint64_t v43 = 0;
                    unint64_t v44 = 0x2127599BF4325C37
                        * ((*v5 & 0xFFFFFFFFFFFF0000 | HIWORD(v41)) ^ ((unint64_t)*v5 >> 23));
                    for (unint64_t k = v44 ^ (v44 >> 47); ; unint64_t k = v43 + v46)
                    {
                      uint64_t v46 = k & (v35[3802] - 1);
                      unint64_t v47 = *(void *)(v35[3804] + 8 * v46);
                      if (__PAIR64__(*(unsigned __int16 *)(*(void *)a1 + 30428), *(_DWORD *)(*(void *)a1 + 30424)) == __PAIR64__(WORD2(v47), v47)&& (HIWORD(v47) & 1) != (*(unsigned char *)(*(void *)a1 + 30430) == 0))
                      {
                        break;
                      }
                      if ((!v35[3800]
                         || __PAIR64__(*(unsigned __int16 *)(*(void *)a1 + 30396), *(_DWORD *)(*(void *)a1 + 30392)) != __PAIR64__(WORD2(v47), v47)|| (HIWORD(v47) & 1) == (*(unsigned char *)(*(void *)a1 + 30398) == 0))&& v40 == v47&& WORD1(*v5) == WORD2(v47)&& (v41 != 0) != (HIWORD(v47) & 1))
                      {
                        if (v46 == -1) {
                          break;
                        }
                        HIDWORD(v48) = 0x7FFFFFFF;
                        unsigned int v49 = v33 + 1;
                        unsigned int v50 = *a3;
                        if (*a3 < (int)v33 + 1) {
                          goto LABEL_14;
                        }
                        goto LABEL_45;
                      }
                      ++v43;
                    }
                  }
                  unsigned int v63 = 1000000000 - v37;
                  unint64_t v51 = a3;
                  uint64_t v52 = (uint64_t)(v35 + 1178);
                  sub_ED7040((uint64_t)(v35 + 1), (v40 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)(unsigned __int16)v42 << 32) | v41) ^ 0x1000000000000, (uint64_t)v67);
                  double v53 = sub_ECA6AC(v52, v67, v38, v64, v39);
                  uint64_t v54 = v52;
                  a3 = v51;
                  double v5 = v61;
                  unint64_t v48 = sub_ECA410(v54, v67, v63, v38, v64, v39, v53);
                  unint64_t v34 = HIDWORD(v33);
                  unsigned int v49 = v33 - v48;
                  unsigned int v50 = *a3;
                  if (*a3 >= (int)v33 - (int)v48)
                  {
LABEL_45:
                    int v55 = v34 - HIDWORD(v48);
                    if (v49 < v50 || (int)a3[1] >= v55)
                    {
                      uint64_t v56 = *(void *)a3;
                      uint64_t v57 = sub_EC98F8(v31, v32, *(void *)a1 + 9424, (uint64_t)v15, v62, *(void *)(a1 + 2968), 1);
                      if (v57 != -1 && HIDWORD(v57) != 0x7FFFFFFF)
                      {
                        v67[0] = (int *)((v56 - v49 + v57) | ((unint64_t)(HIDWORD(v56) - v55 + HIDWORD(v57)) << 32));
                        sub_F785AC(a1, v5, (unsigned int *)v67, *v60, a4, i, 0, 0);
                      }
                    }
                  }
                }
              }
            }
LABEL_14:
            ;
          }
        }
        unint64_t v12 = v60 + 1;
      }
      while (v60 + 1 != v59);
    }
  }
}

BOOL sub_F85B70(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 3056);
  uint64_t v3 = *(unsigned int **)(a1 + 3072);
  uint64_t v4 = *(unsigned int **)(a1 + 3064);
  unint64_t v5 = *(unsigned int *)(a1 + 3052);
  if (v2 + v3 - v4 < v5) {
    return 0;
  }
  uint64_t v20 = 0;
  long long v8 = 0uLL;
  long long v19 = 0u;
  if (v4 == v3)
  {
    uint64_t v15 = 0;
  }
  else
  {
    do
    {
      while (1)
      {
        unsigned int v10 = *v4;
        unsigned int v18 = v10;
        uint64_t v11 = *(void *)(a1 + 928);
        unsigned int v12 = *(_DWORD *)(v11 + 24 * v10 + 8);
        if (*a2 >= v12)
        {
          int v13 = *(_DWORD *)(v11 + 24 * v10 + 12);
          if (v12 < *a2 || (int)a2[1] >= v13) {
            break;
          }
        }
        sub_745A4((uint64_t)&v19, &v18);
        if (++v4 == v3) {
          goto LABEL_12;
        }
      }
      ++*(_DWORD *)(a1 + 3056);
      ++v4;
    }
    while (v4 != v3);
LABEL_12:
    uint64_t v3 = *(unsigned int **)(a1 + 3064);
    long long v8 = v19;
    uint64_t v15 = v20;
    LODWORD(v2) = *(_DWORD *)(a1 + 3056);
    LODWORD(v5) = *(_DWORD *)(a1 + 3052);
  }
  *(_OWORD *)(a1 + 3064) = v8;
  uint64_t v16 = *(void *)(a1 + 3080);
  *(void *)(a1 + 3080) = v15;
  *(void *)&long long v19 = v3;
  uint64_t v20 = v16;
  BOOL v6 = v2 >= v5;
  if (v3)
  {
    *((void *)&v19 + 1) = v3;
    operator delete(v3);
  }
  return v6;
}

void sub_F85CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F85CC4(uint64_t a1, uint64_t *a2, unsigned int *a3, int a4)
{
  if (!*(unsigned char *)(a1 + 3048)) {
    return 4294967294;
  }
  sub_F855A8(a1, a2, a3, a4);
  uint64_t v7 = *(void *)(a1 + 3032);
  uint64_t v8 = *(void *)(v7 + 24);
  int v38 = *(_DWORD *)(v7 + 4224);
  unint64_t v39 = sub_F968AC(v8, HIDWORD(*a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32), ((unint64_t)*a2 >> 1) & 1, &v38);
  if (v39 > 0xFFFFFFFEFFFFFFFFLL || v39 == 0) {
    return 0;
  }
  LOWORD(v38) = sub_F9D4C4(v7 + 24, (unint64_t *)a2, &v39);
  if ((_WORD)v38 == 0xFFFF) {
    return 0;
  }
  sub_F9B030(*(void *)(v7 + 8), (unsigned int *)&v39, (unsigned __int16 *)&v38, v7 + 4304);
  uint64_t v10 = *(void *)(v7 + 4304);
  uint64_t v11 = *(void *)(v7 + 4312);
  if (v10 != v11)
  {
    while (1)
    {
      unsigned int v16 = *(_DWORD *)(a1 + 1040);
      if (v16 != -1)
      {
        int v17 = *(_DWORD *)(v10 + 16);
        if (v17 != -1
          && *(_DWORD *)(v10 + 20) != 0x7FFFFFFF
          && *(void *)(v10 + 24) != 0x7FFFFFFFFFFFFFFFLL
          && v17 + *a3 > v16)
        {
          goto LABEL_11;
        }
      }
      unint64_t v18 = sub_F86298((int32x2_t *)a1, (unsigned int *)v10);
      unint64_t v19 = v18;
      int v20 = *(_DWORD *)(v10 + 16);
      if (v20 == -1
        || (int v21 = *(_DWORD *)(v10 + 20), v21 == 0x7FFFFFFF)
        || *(void *)(v10 + 24) == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v12 = *(void *)(a1 + 3904);
        unint64_t v13 = v18 >> 6;
        uint64_t v14 = 1 << v18;
        uint64_t v15 = *(void *)(v12 + 8 * (v18 >> 6));
        if ((v15 & (1 << v18)) == 0)
        {
          uint64_t v25 = *(void *)(a1 + 24) + 32 * v18;
          uint64_t v26 = *(void **)v25;
          unint64_t v27 = *(void **)(v25 + 8);
          if (*(void **)v25 != v27)
          {
            do
            {
              LODWORD(v39) = 0;
              sub_F936B4(a1 + 816, v26, (int *)&v39);
              sub_F9C8AC((int32x2_t *)(a1 + 816));
              v26 += 10;
            }
            while (v26 != v27);
            uint64_t v12 = *(void *)(a1 + 3904);
            uint64_t v15 = *(void *)(v12 + 8 * v13);
          }
          *(void *)(v12 + 8 * v13) = v15 | v14;
        }
        ++*(void *)(a1 + 3936);
        goto LABEL_11;
      }
      if (!*(unsigned char *)(a1 + 3049)) {
        goto LABEL_42;
      }
      signed int v22 = *(_DWORD *)(a1 + 1044);
      if (v22 != 0x7FFFFFFF && (int)(v21 + a3[1]) > v22) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(*(void *)(a1 + 3880) + 40 * v18 + 32) != -1) {
        goto LABEL_42;
      }
      v23.n128_f64[0] = sub_F864BC(*(void *)(a1 + 3032), (unsigned int *)v10, (uint64_t)&v39);
      int v24 = v41;
      if (v41 != -1) {
        break;
      }
      uint64_t v28 = *(void *)(a1 + 3904);
      unint64_t v29 = v19 >> 6;
      uint64_t v30 = 1 << v19;
      uint64_t v31 = *(void *)(v28 + 8 * (v19 >> 6));
      if ((v31 & (1 << v19)) == 0)
      {
        uint64_t v32 = *(void *)(a1 + 24) + 32 * v19;
        unint64_t v34 = *(void **)v32;
        unint64_t v33 = *(void **)(v32 + 8);
        if (*(void **)v32 != v33)
        {
          do
          {
            int v38 = 0;
            sub_F936B4(a1 + 816, v34, &v38);
            sub_F9C8AC((int32x2_t *)(a1 + 816));
            v34 += 10;
          }
          while (v34 != v33);
          uint64_t v28 = *(void *)(a1 + 3904);
          uint64_t v30 = 1 << v19;
          unint64_t v29 = v19 >> 6;
          uint64_t v31 = *(void *)(v28 + 8 * (v19 >> 6));
        }
        *(void *)(v28 + 8 * v29) = v31 | v30;
      }
      ++*(void *)(a1 + 3928);
      if (!v41) {
        goto LABEL_37;
      }
LABEL_40:
      if (v24 != -1)
      {
        int v20 = *(_DWORD *)(v10 + 16);
        int v21 = *(_DWORD *)(v10 + 20);
LABEL_42:
        unint64_t v39 = (v20 + *a3) | ((unint64_t)(v21 + a3[1]) << 32);
        sub_F785AC(a1, a2, (unsigned int *)&v39, v19, a4, *(_DWORD *)(v10 + 8), 0, 1);
      }
LABEL_11:
      v10 += 32;
      if (v10 == v11) {
        return *(unsigned int *)(*(void *)(a1 + 3032) + 4228);
      }
    }
    __n128 v23 = sub_F91EC0(*(void *)(a1 + 3880) + 40 * v19, (uint64_t *)&v39);
    if (v41) {
      goto LABEL_40;
    }
LABEL_37:
    uint64_t v35 = v40;
    if (v40)
    {
      if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, __n128))v35->__on_zero_shared)(v35, v23);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    goto LABEL_40;
  }
  return *(unsigned int *)(*(void *)(a1 + 3032) + 4228);
}

void sub_F860C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_F78528((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_F860E0(uint64_t a1, void *a2, int *a3, signed int *a4, int a5, unsigned int *a6)
{
  unsigned int v6 = a3[50];
  unsigned int v18 = *a6;
  if (v18)
  {
    uint64_t v12 = a1 + 1064;
    do
    {
      if (sub_F963A0(**(void **)(a1 + 8), HIDWORD(*a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32), &v18))
      {
        unint64_t v13 = sub_F968AC(**(void **)(a1 + 8), HIDWORD(*a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32), (*a2 >> 1) & 1, &v18);
        unint64_t v17 = v13;
        if (v13) {
          BOOL v14 = v13 >= 0xFFFFFFFF00000000;
        }
        else {
          BOOL v14 = 1;
        }
        if (v14)
        {
          int v15 = *(_DWORD *)(a1 + 20);
          if (v15 != -1 && v18 == v15) {
            return 0xFFFFFFFFLL;
          }
        }
        else if (sub_F953E4(v12, &v17) == -1 {
               && sub_F953E4(*(void *)(a1 + 976) + 800, &v17) == -1
        }
               && (v6 == -1 || v18 <= v6 || !sub_FA6D54(*(void *)a1 + 14680, (unsigned int *)&v17, a3, a4, a5)))
        {
          if (*(unsigned char *)(a1 + 3048) && v18 < *(_DWORD *)(*(void *)(a1 + 3032) + 4224)) {
            return 0;
          }
          if (!*(unsigned char *)(*(void *)a1 + 30353)
            || !sub_FA6D54(*(void *)a1 + 14680, (unsigned int *)&v17, a3, a4, a5))
          {
            return v18;
          }
        }
      }
      --v18;
    }
    while (v18);
  }
  return 0;
}

uint64_t sub_F86298(int32x2_t *a1, unsigned int *a2)
{
  uint64_t v4 = (uint64_t)&a1[386];
  sub_F78DE8((uint64_t)&a1[386], a2, v21);
  if (v21[0]) {
    return v21[3][1];
  }
  int32x2_t v6 = a1[4];
  int32x2_t v7 = a1[3];
  int32x2_t v8 = a1[379];
  sub_F98E98(*(void *)(*(void *)&v8 + 8), a2, *(void *)&v8 + 4256);
  sub_F9D150(*(void *)&v8 + 40, (uint64_t *)(*(void *)&v8 + 4256), *(_DWORD *)(*(void *)&v8 + 4232), 0, (uint64_t)&__p);
  signed int v22 = a1;
  sub_F80DAC(a1 + 3, (uint64_t **)&__p, 0, (void **)&v22);
  unint64_t v5 = (uint64_t)(*(void *)&v6 - *(void *)&v7) >> 5;
  if (__p)
  {
    unint64_t v19 = __p;
    operator delete(__p);
  }
  sub_F99838(v4, a2, (uint64_t)&__p);
  int v9 = __p;
  if (v20)
  {
    uint64_t v10 = (void *)(*((void *)__p + 1) + 16 * (void)v19);
    *uint64_t v10 = *(void *)a2;
    v10[1] = -1;
  }
  *(void *)(v9[1] + 16 * (void)v19 + 8) = v5;
  sub_29603C((void **)&a1[482], a2);
  unint64_t v11 = (unint64_t)a1[489];
  int32x2_t v12 = a1[490];
  if (v11 == *(void *)&v12 << 6)
  {
    if ((uint64_t)(v11 + 1) < 0) {
      sub_2E00();
    }
    unint64_t v13 = *(void *)&v12 << 7;
    if (v13 <= (v11 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v11 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v14 = v13;
    }
    else {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_3D110((uint64_t)&a1[488], v14);
    unint64_t v11 = (unint64_t)a1[489];
  }
  a1[489] = (int32x2_t)(v11 + 1);
  *(void *)(*(void *)&a1[488] + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v11);
  int32x2_t v15 = a1[486];
  if (*(void *)&v15 >= *(void *)&a1[487])
  {
    unsigned int v16 = sub_F99F7C((void **)&a1[485]);
  }
  else
  {
    *(void *)(*(void *)&v15 + 32) = 0;
    *(_OWORD *)*(void *)&int32x2_t v15 = 0u;
    *(_OWORD *)(*(void *)&v15 + 16) = 0u;
    *(_DWORD *)(*(void *)&v15 + 32) = -1;
    unsigned int v16 = (char *)(*(void *)&v15 + 40);
  }
  a1[486] = (int32x2_t)v16;
  if (v5 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&a1[117] - *(void *)&a1[116]) >> 3)) {
    sub_F9A14C((char **)&a1[116]);
  }
  return v5;
}

void sub_F864A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_F864BC@<D0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(unsigned char *)(a1 + 4249)) {
    goto LABEL_17;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v6 + 3880)) {
    goto LABEL_3;
  }
  unsigned int v18 = sub_3823E0(v6 + 8, *a2, 1);
  if (!v18) {
    goto LABEL_3;
  }
  unint64_t v19 = &v18[-*(int *)v18];
  if (*(unsigned __int16 *)v19 < 7u) {
    goto LABEL_3;
  }
  uint64_t v7 = *((unsigned __int16 *)v19 + 3);
  if (!v7) {
    goto LABEL_4;
  }
  char v20 = &v18[v7 + *(unsigned int *)&v18[v7]];
  uint64_t v21 = a2[1];
  if (*(_DWORD *)v20 <= v21)
  {
LABEL_3:
    uint64_t v7 = 0;
    goto LABEL_4;
  }
  uint64_t v7 = (uint64_t)&v20[4 * v21 + 4 + *(unsigned int *)&v20[4 * v21 + 4]];
LABEL_4:
  int32x2_t v8 = (unsigned __int16 *)(v7 - *(int *)v7);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (int *)(v7 + v9 + *(unsigned int *)(v7 + v9));
    unint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
    unsigned int v12 = *v11;
    if (v12 < 5) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v11 = (_WORD *)(&loc_1120530 + 1);
    unsigned int v12 = *(unsigned __int16 *)((char *)&loc_1120530 + 1);
    if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
      goto LABEL_17;
    }
  }
  uint64_t v13 = v11[2];
  if (v11[2]) {
    v13 += (uint64_t)v10 + *(unsigned int *)((char *)v10 + v13);
  }
  if (v12 >= 7)
  {
    uint64_t v14 = v11[3];
    if (v14 && v13 != 0)
    {
      signed int v22 = (unsigned int *)((char *)v10 + v14);
      uint64_t v23 = *v22;
      *(void *)a3 = v13;
      *(void *)(a3 + 8) = (char *)v22 + v23;
      *(void *)&double result = 0xFFFFFFFFLL;
      *(void *)(a3 + 16) = 0xFFFFFFFFLL;
      *(_DWORD *)(a3 + 24) = -1;
      *(_DWORD *)(a3 + 32) = 1;
      return result;
    }
  }
LABEL_17:
  sub_F9D5D0(a1, a2, &v25);
  if (!v25)
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = -1;
    unint64_t v17 = v26;
    if (!v26) {
      return result;
    }
    goto LABEL_23;
  }
  unsigned int v16 = v26;
  *(void *)a3 = v25;
  *(void *)(a3 + 8) = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a3 + 32) = 0;
  unint64_t v17 = v26;
  if (v26)
  {
LABEL_23:
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return result;
}

void sub_F866DC(int32x2_t *a1, _DWORD *a2)
{
  uint64_t v3 = (void *)a1[379];
  sub_F9A298(v3[1], a2, v3 + 535);
  uint64_t v4 = (unsigned char *)v3[535];
  unint64_t v5 = (unsigned char *)v3[536];
  int64_t v6 = v5 - v4;
  if (v5 != v4)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    uint64_t v7 = (char *)operator new(v5 - v4);
    memcpy(v7, v4, v6);
    uint64_t v8 = 0;
    uint64_t v9 = 8 * (v6 >> 3);
    do
    {
      sub_F86298(a1, (unsigned int *)&v7[v8]);
      v8 += 8;
    }
    while (v9 != v8);
    operator delete(v7);
  }
}

void sub_F867B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F867E0(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a2 + 184;
  *(void *)(a1 + 16) = -1;
  sub_F9D750((void *)(a1 + 24), a2);
  *(void *)(a1 + 944) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  unint64_t v5 = operator new(0x18uLL);
  *(void *)(a1 + 928) = v5;
  *(void *)(a1 + 944) = v5 + 3;
  *(_OWORD *)unint64_t v5 = xmmword_20E8160;
  v5[2] = 0;
  *(void *)(a1 + 936) = v5 + 3;
  if (a3) {
    uint64_t v6 = 128;
  }
  else {
    uint64_t v6 = 2;
  }
  *(_DWORD *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  uint64_t v7 = (char *)operator new(4 * v6);
  *(void *)(a1 + 1008) = v7;
  *(void *)(a1 + 1016) = v7;
  *(void *)(a1 + 1024) = &v7[4 * v6];
  uint64_t v8 = (char *)operator new(0x3F8uLL);
  *(void *)(a1 + 984) = v8;
  *(void *)(a1 + 992) = v8;
  *(void *)(a1 + 1000) = v8 + 1016;
  *(void *)(a1 + 1040) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 1048) = 0;
  *(unsigned char *)(a1 + 1052) = 0;
  sub_F9D8A8(a1 + 1056, *(uint64_t **)(a1 + 8));
  *(void *)(a1 + 1184) = 0;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(void *)(a1 + 1192) = -1;
  if (a3) {
    unsigned int v9 = 0x10000;
  }
  else {
    unsigned int v9 = 0x2000;
  }
  sub_F9DA70((void *)(a1 + 1200), v9);
  v14[0] = 256;
  v14[1] = (unint64_t)&v13;
  v14[2] = (unint64_t)&v12;
  v14[3] = (unint64_t)&v11;
  sub_F91654((void *)(a1 + 2080), v14);
  sub_F9D8A8(a1 + 2848, *(uint64_t **)(a1 + 8));
  *(_DWORD *)(a1 + 2960) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 2964) = 0;
  *(void *)(a1 + 3016) = 0;
  *(_OWORD *)(a1 + 2968) = 0u;
  *(_OWORD *)(a1 + 2984) = 0u;
  *(_OWORD *)(a1 + 3000) = 0u;
  *(_DWORD *)(a1 + 3024) = -1;
  *(_WORD *)(a1 + 3048) = 256;
  *(_OWORD *)(a1 + 3032) = 0u;
  *(void *)(a1 + 3052) = 0xFFFFFFFFLL;
  *(void *)(a1 + 3064) = 0;
  *(void *)(a1 + 3080) = 0;
  *(void *)(a1 + 3072) = 0;
  *(void *)(a1 + 3088) = &unk_20E1710;
  *(void *)(a1 + 3128) = 0;
  *(void *)(a1 + 3112) = 0;
  *(void *)(a1 + 3096) = 0;
  *(void *)(a1 + 3104) = 0;
  *(void *)(a1 + 3136) = &unk_20E1710;
  *(void *)(a1 + 3176) = 0;
  *(void *)(a1 + 3160) = 0;
  *(void *)(a1 + 3144) = 0;
  *(void *)(a1 + 3152) = 0;
  *(void *)(a1 + 3184) = &unk_20E1710;
  *(void *)(a1 + 3224) = 0;
  *(void *)(a1 + 3208) = 0;
  *(void *)(a1 + 3192) = 0;
  *(void *)(a1 + 3200) = 0;
  *(void *)(a1 + 3232) = &unk_20E1710;
  *(void *)(a1 + 3272) = 0;
  *(void *)(a1 + 3256) = 0;
  *(void *)(a1 + 3240) = 0;
  *(void *)(a1 + 3248) = 0;
  *(void *)(a1 + 3280) = &unk_20E1710;
  *(void *)(a1 + 3320) = 0;
  *(void *)(a1 + 3304) = 0;
  *(void *)(a1 + 3288) = 0;
  *(void *)(a1 + 3296) = 0;
  *(void *)(a1 + 3328) = &unk_20E1710;
  *(void *)(a1 + 3368) = 0;
  *(void *)(a1 + 3352) = 0;
  *(void *)(a1 + 3336) = 0;
  *(void *)(a1 + 3344) = 0;
  *(void *)(a1 + 3376) = &unk_20E1710;
  *(void *)(a1 + 3416) = 0;
  *(void *)(a1 + 3400) = 0;
  *(void *)(a1 + 3384) = 0;
  *(void *)(a1 + 3392) = 0;
  *(void *)(a1 + 3424) = &unk_20E1710;
  *(void *)(a1 + 3464) = 0;
  *(void *)(a1 + 3448) = 0;
  *(void *)(a1 + 3432) = 0;
  *(void *)(a1 + 3440) = 0;
  *(void *)(a1 + 3472) = &unk_20E1710;
  *(void *)(a1 + 3512) = 0;
  *(void *)(a1 + 3488) = 0;
  *(void *)(a1 + 3480) = 0;
  *(void *)(a1 + 3496) = 0;
  *(void *)(a1 + 3520) = &unk_20E1710;
  *(void *)(a1 + 3560) = 0;
  *(void *)(a1 + 3536) = 0;
  *(void *)(a1 + 3528) = 0;
  *(void *)(a1 + 3544) = 0;
  *(void *)(a1 + 3568) = &unk_20E1710;
  *(void *)(a1 + 3608) = 0;
  *(void *)(a1 + 3584) = 0;
  *(void *)(a1 + 3576) = 0;
  *(void *)(a1 + 3592) = 0;
  *(void *)(a1 + 3616) = &unk_20E1710;
  *(void *)(a1 + 3656) = 0;
  *(void *)(a1 + 3632) = 0;
  *(void *)(a1 + 3624) = 0;
  *(void *)(a1 + 3640) = 0;
  *(void *)(a1 + 3664) = &unk_20E1710;
  *(void *)(a1 + 3704) = 0;
  *(void *)(a1 + 3680) = 0;
  *(void *)(a1 + 3672) = 0;
  *(void *)(a1 + 3688) = 0;
  *(void *)(a1 + 3712) = &unk_20E1710;
  *(void *)(a1 + 3752) = 0;
  *(void *)(a1 + 3728) = 0;
  *(void *)(a1 + 3720) = 0;
  *(void *)(a1 + 3736) = 0;
  *(void *)(a1 + 3760) = &unk_20E1710;
  *(void *)(a1 + 3800) = 0;
  *(void *)(a1 + 3776) = 0;
  *(void *)(a1 + 3768) = 0;
  *(void *)(a1 + 3784) = 0;
  *(void *)(a1 + 3808) = &unk_20E1710;
  *(void *)(a1 + 3824) = 0;
  *(void *)(a1 + 3816) = 0;
  *(void *)(a1 + 3832) = 0;
  *(_OWORD *)(a1 + 3928) = 0u;
  *(_OWORD *)(a1 + 3912) = 0u;
  *(_OWORD *)(a1 + 3896) = 0u;
  *(_OWORD *)(a1 + 3880) = 0u;
  *(_OWORD *)(a1 + 3864) = 0u;
  *(_OWORD *)(a1 + 3848) = 0u;
  return a1;
}

void sub_F86AFC(_Unwind_Exception *a1)
{
  uint64_t v7 = v3;
  sub_328138(v7);
  sub_5139D0(v5);
  unsigned int v9 = (void *)v1[146];
  if (v9)
  {
    v1[147] = v9;
    operator delete(v9);
  }
  sub_F7341C(v4);
  sub_3310C((uint64_t)(v1 + 123));
  uint64_t v10 = (void **)(v1 + 116);
  char v11 = *v6;
  if (*v6)
  {
    v1[120] = v11;
    operator delete(v11);
    char v12 = *v10;
    if (!*v10)
    {
LABEL_5:
      sub_BF10E8(v2);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    char v12 = *v10;
    if (!*v10) {
      goto LABEL_5;
    }
  }
  v1[117] = v12;
  operator delete(v12);
  sub_BF10E8(v2);
  _Unwind_Resume(a1);
}

void sub_F86BEC(_Unwind_Exception *a1)
{
  sub_BF10E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F86C04(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_F867E0(a1, a2, 0);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 3032) = v6;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 3040);
  *(void *)(a1 + 3040) = v5;
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return a1;
}

unint64_t sub_F86CA8(int32x2_t *a1, int32x2_t *a2, uint64_t a3, uint64_t a4, __int32 *a5, __int8 a6, __int32 a7, unsigned int a8, unsigned int a9)
{
  unsigned int v27 = a8;
  sub_F87098((uint64_t)a1);
  if (*a2 == *(void *)&a2[1])
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&__t);
      sub_188FC78(&__t, (uint64_t)"p2p_query called with empty origin terminal", 43);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
LABEL_15:
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v26 < 0) {
        operator delete(v25);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
LABEL_20:
    unint64_t v17 = 0x7FFFFFFF00000000;
    uint64_t v18 = 0xFFFFFFFFLL;
    return v17 | v18;
  }
  if (*(void *)a3 == *(void *)(a3 + 8))
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&__t);
      sub_188FC78(&__t, (uint64_t)"p2p_query called with empty destination terminal", 48);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  __int32 v16 = *a5;
  if (*a5 == 0x7FFFFFFF)
  {
    __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    __int32 v16 = std::chrono::system_clock::to_time_t(&__t);
  }
  a1[370].i32[0] = v16;
  a1[370].i8[4] = a6;
  a1[371] = (int32x2_t)a4;
  a1[130].i32[0] = a7;
  if (&a1[146] != a2) {
    sub_BFF628(&a1[146], *(char **)a2, *(char **)&a2[1], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&a2[1] - *(void *)a2) >> 4));
  }
  a1[149] = a2[3];
  __t.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)a1;
  sub_F8AFE4(a1 + 3, (unsigned int **)a3, 1, &__t);
  a1[122] = (int32x2_t)&a1[3];
  if (!(*(void *)&a1[14]
       + *(void *)&a1[8]
       + *(void *)&a1[20]
       + *(void *)&a1[26]
       + *(void *)&a1[32]
       + *(void *)&a1[38]
       + *(void *)&a1[44]
       + *(void *)&a1[50]
       + *(void *)&a1[56]
       + *(void *)&a1[62]
       + *(void *)&a1[68]
       + *(void *)&a1[74]
       + *(void *)&a1[80]
       + *(void *)&a1[86]
       + *(void *)&a1[92]
       + *(void *)&a1[98]))
    goto LABEL_20;
  sub_F87430(a1);
  __t.__d_.__rep_ = 0;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = 0;
  uint64_t v24 = 0;
  sub_F87C44((uint64_t)a1, &__t);
  if (__t.__d_.__rep_)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = __t.__d_.__rep_;
    operator delete((void *)__t.__d_.__rep_);
  }
  sub_F881CC((uint64_t)a1);
  sub_F885D8(a1, &v27, a9);
  unint64_t v17 = *(void *)(*(void *)&a1[116] + 8) & 0xFFFFFFFF00000000;
  uint64_t v18 = *(void *)(*(void *)&a1[116] + 8);
  return v17 | v18;
}

void sub_F87004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_F8707C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_F87098(uint64_t a1)
{
  for (uint64_t i = 0; i != 768; i += 48)
  {
    uint64_t v4 = a1 + i;
    if (*(void *)(a1 + i + 2096))
    {
      unint64_t v5 = *(void *)(v4 + 2104);
      if (v5 >= 0x80)
      {
        uint64_t v3 = (void *)(a1 + i);
        operator delete(*(void **)(v4 + 2080));
        *(void *)(v4 + 2080) = &unk_20E1710;
        v3[265] = 0;
        v3[261] = 0;
        v3[263] = 0;
        v3[262] = 0;
      }
      else if (v5)
      {
        *(void *)(v4 + 2096) = 0;
        memset(*(void **)(v4 + 2080), 128, v5 + 8);
        *(unsigned char *)(*(void *)(v4 + 2080) + v5) = -1;
        unint64_t v6 = *(void *)(v4 + 2104);
        if (v6 == 7) {
          uint64_t v7 = 6;
        }
        else {
          uint64_t v7 = v6 - (v6 >> 3);
        }
        *(void *)(a1 + i + 2120) = v7 - *(void *)(v4 + 2096);
      }
    }
  }
  uint64_t v8 = 0;
  *(void *)(a1 + 2056) = *(void *)(a1 + 2048);
  *(void *)(a1 + 2032) = *(void *)(a1 + 2024);
  *(_DWORD *)(a1 + 2072) = 0;
  *(void *)(a1 + 1976) = *(void *)(a1 + 1968);
  do
  {
    uint64_t v10 = a1 + v8;
    if (*(void *)(a1 + v8 + 1216))
    {
      unint64_t v11 = *(void *)(v10 + 1224);
      if (v11 >= 0x80)
      {
        unsigned int v9 = (void *)(a1 + v8);
        operator delete(*(void **)(v10 + 1200));
        *(void *)(v10 + 1200) = &unk_20E1710;
        v9[155] = 0;
        v9[151] = 0;
        v9[153] = 0;
        v9[152] = 0;
      }
      else if (v11)
      {
        *(void *)(v10 + 1216) = 0;
        memset(*(void **)(v10 + 1200), 128, v11 + 8);
        *(unsigned char *)(*(void *)(v10 + 1200) + v11) = -1;
        unint64_t v12 = *(void *)(v10 + 1224);
        if (v12 == 7) {
          uint64_t v13 = 6;
        }
        else {
          uint64_t v13 = v12 - (v12 >> 3);
        }
        *(void *)(a1 + v8 + 1240) = v13 - *(void *)(v10 + 1216);
      }
    }
    v8 += 48;
  }
  while (v8 != 768);
  *(void *)(a1 + 2000) = *(void *)(a1 + 1992);
  *(_DWORD *)(a1 + 2016) = 0;
  *(void *)(a1 + 1016) = *(void *)(a1 + 1008);
  *(void *)(a1 + 992) = *(void *)(a1 + 984);
  *(_DWORD *)(a1 + 1032) = 0;
  *(void *)(a1 + 1040) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 20) = -1;
  *(_DWORD *)(a1 + 1048) = 0;
  sub_F935F4(a1 + 1064);
  sub_F935F4(a1 + 2856);
  *(void *)(a1 + 1176) = *(void *)(a1 + 1168);
  uint64_t v14 = *(uint64_t **)(a1 + 952);
  int32x2_t v15 = *(uint64_t **)(a1 + 960);
  if (v14 != v15)
  {
    do
    {
      uint64_t v16 = *v14++;
      uint64_t v17 = *(void *)(a1 + 928) + 24 * v16;
      *(_DWORD *)uint64_t v17 = 0;
      *(_OWORD *)(v17 + 8) = xmmword_20E7B70;
    }
    while (v14 != v15);
    uint64_t v14 = *(uint64_t **)(a1 + 952);
  }
  *(void *)(a1 + 960) = v14;
  uint64_t v19 = *(void *)(a1 + 24);
  uint64_t v18 = *(void *)(a1 + 32);
  if (v18 != v19)
  {
    uint64_t v20 = *(void *)(a1 + 32);
    do
    {
      signed int v22 = *(void **)(v20 - 32);
      v20 -= 32;
      char v21 = v22;
      if (v22)
      {
        *(void *)(v18 - 24) = v21;
        operator delete(v21);
      }
      uint64_t v18 = v20;
    }
    while (v20 != v19);
  }
  *(void *)(a1 + 32) = v19;
  sub_2D49A4(a1 + 48);
  sub_F935F4(a1 + 824);
  uint64_t v23 = 0;
  *(_DWORD *)(a1 + 2960) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 3048) = 0;
  do
  {
    uint64_t v25 = a1 + v23;
    if (*(void *)(a1 + v23 + 3104))
    {
      unint64_t v26 = *(void *)(v25 + 3112);
      if (v26 >= 0x80)
      {
        uint64_t v24 = (void *)(a1 + v23);
        operator delete(*(void **)(v25 + 3088));
        *(void *)(v25 + 3088) = &unk_20E1710;
        v24[391] = 0;
        v24[387] = 0;
        v24[389] = 0;
        v24[388] = 0;
      }
      else if (v26)
      {
        *(void *)(v25 + 3104) = 0;
        memset(*(void **)(v25 + 3088), 128, v26 + 8);
        *(unsigned char *)(*(void *)(v25 + 3088) + v26) = -1;
        unint64_t v27 = *(void *)(v25 + 3112);
        if (v27 == 7) {
          uint64_t v28 = 6;
        }
        else {
          uint64_t v28 = v27 - (v27 >> 3);
        }
        *(void *)(a1 + v23 + 3128) = v28 - *(void *)(v25 + 3104);
      }
    }
    v23 += 48;
  }
  while (v23 != 768);
  *(void *)(a1 + 3864) = *(void *)(a1 + 3856);
  uint64_t v29 = *(void *)(a1 + 3888);
  for (uint64_t j = *(void *)(a1 + 3880); v29 != j; v29 -= 40)
  {
    if (!*(_DWORD *)(v29 - 8))
    {
      uint64_t v31 = *(std::__shared_weak_count **)(v29 - 32);
      if (v31)
      {
        if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
    }
  }
  *(void *)(a1 + 3888) = j;
  *(void *)(a1 + 3912) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 3928) = 0u;
  return result;
}

void sub_F87430(int32x2_t *a1)
{
  unsigned int v62 = 0;
  long long __p = 0;
  char v60 = 0;
  uint64_t v61 = 0;
  int32x2_t v2 = *a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 1456);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    uint64_t v5 = *(void *)(*(void *)a1 + 1472);
    while (1)
    {
      int v6 = *(_DWORD *)(v5 + 4);
      if (*(_DWORD *)(*(void *)&v2 + 1464) != *(_DWORD *)v5 || *(_DWORD *)(*(void *)&v2 + 1468) != v6)
      {
        if (!*(void *)(*(void *)&v2 + 1440)) {
          break;
        }
        if (*(_DWORD *)(*(void *)&v2 + 1432) != *(_DWORD *)v5 || *(_DWORD *)(*(void *)&v2 + 1436) != v6) {
          break;
        }
      }
      v5 += 8;
      v4 -= 8;
      if (!v4) {
        goto LABEL_14;
      }
    }
    uint64_t v9 = *(void *)(*(void *)a1 + 1472) + 8 * v3;
    if (v5 != v9)
    {
      uint64_t v56 = (int *)&a1[370];
      uint64_t v14 = a1 + 132;
      while (1)
      {
        unsigned int v15 = HIDWORD(*(void *)v5) & 0x40000000;
        BOOL v16 = *(uint64_t *)v5 < 0 && v15 == 0;
        int v17 = (*(void *)v5 >> 33) & 0x10000000 | HIDWORD(*(void *)v5) & 0xFFFFFFF;
        if (v16) {
          int v18 = 0x40000000;
        }
        else {
          int v18 = 0;
        }
        unsigned int v57 = *(void *)v5;
        unsigned int v58 = v17 | (v15 >> 1) | v18;
        if (!v62
          || (int32x2_t v19 = *a1,
              uint64_t v20 = (uint64_t)a1[371],
              sub_ED9E74((unsigned __int8 *)(*(void *)a1 + 8), *(void *)v5, (uint64_t)v63),
              unint64_t v21 = sub_F6DA14((uint64_t *)(*(void *)&v19 + 152), v63, v20),
              v21 != -1)
          && (v21 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000
          && v22 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v63[0] = 0;
          sub_F9E7F0((uint64_t)v14, &v57, (int *)v63);
          sub_F9F9EC(v14);
          goto LABEL_47;
        }
        int v23 = sub_F78BBC(*(uint64_t **)&a1[1]);
        if (v23 - 1 <= v62) {
          break;
        }
        int v55 = v14;
        int32x2_t v24 = *a1;
        uint64_t v25 = (unsigned int *)a1[371];
        char v26 = a1[370].i8[4];
        int v65 = v23 - 1;
        *(void *)unsigned int v63 = sub_F968AC(*(void *)(*(void *)&v24 + 184), v57 | ((unint64_t)(v58 & 0xFFFFFFF) << 32), (v58 & 0x10000000) == 0, &v65);
        if (sub_FA8F9C(*(void *)&v24 + 200, v63, v25, v56, v26))
        {
          uint64_t v14 = v55;
          break;
        }
        unint64_t v64 = sub_F968AC(*(void *)(*(void *)&v24 + 184), v57 | ((unint64_t)(v58 & 0xFFFFFFF) << 32), (v58 >> 28) & 1, &v65);
        BOOL v27 = sub_FA8F9C(*(void *)&v24 + 200, (unsigned int *)&v64, v25, v56, v26);
        uint64_t v14 = v55;
        if (v27) {
          break;
        }
        v63[0] = v23 - 2;
        sub_F9E7F0((uint64_t)&a1[356], &v57, (int *)v63);
        sub_F9F9EC(a1 + 356);
        v5 += 8;
        if (v5 == v9) {
          goto LABEL_62;
        }
LABEL_50:
        while (1)
        {
          int v29 = *(_DWORD *)(v5 + 4);
          if (*(_DWORD *)(*(void *)&v2 + 1464) != *(_DWORD *)v5 || *(_DWORD *)(*(void *)&v2 + 1468) != v29)
          {
            if (!*(void *)(*(void *)&v2 + 1440)) {
              break;
            }
            if (*(_DWORD *)(*(void *)&v2 + 1432) != *(_DWORD *)v5 || *(_DWORD *)(*(void *)&v2 + 1436) != v29) {
              break;
            }
          }
          v5 += 8;
          if (v5 == v9) {
            goto LABEL_62;
          }
        }
        if (v5 == v9) {
          goto LABEL_62;
        }
      }
      sub_F9E7F0((uint64_t)v14, &v57, (int *)&v62);
      sub_F9F9EC(v14);
      v63[0] = v62 - 1;
      sub_F9E7F0((uint64_t)&a1[356], &v57, (int *)v63);
      sub_F9F9EC(a1 + 356);
      unint64_t v28 = sub_F968AC(**(void **)&a1[1], v57 | ((unint64_t)(v58 & 0xFFFFFFF) << 32), (v58 & 0x10000000) == 0, &v62);
      *(void *)unsigned int v63 = v28;
      if (__p == v60 || v60[-1].i64[1] != v28) {
        sub_29603C(&__p, v63);
      }
      unint64_t v64 = sub_F968AC(**(void **)&a1[1], v57 | ((unint64_t)(v58 & 0xFFFFFFF) << 32), (v58 >> 28) & 1, &v62);
      if (v60[-1].i64[1] != v64) {
        sub_29603C(&__p, &v64);
      }
LABEL_47:
      v5 += 8;
      if (v5 != v9) {
        goto LABEL_50;
      }
LABEL_62:
      int32x2_t v2 = *a1;
      uint64_t v10 = *(void *)(*(void *)a1 + 1744);
      uint64_t v11 = *(void *)(*(void *)a1 + 1632);
      if (v11) {
        goto LABEL_15;
      }
LABEL_63:
      uint64_t v13 = v10;
      goto LABEL_64;
    }
  }
LABEL_14:
  uint64_t v10 = *(void *)(*(void *)&v2 + 1744);
  uint64_t v11 = *(void *)(*(void *)&v2 + 1632);
  if (!v11) {
    goto LABEL_63;
  }
LABEL_15:
  uint64_t v12 = 104 * v11;
  uint64_t v13 = v10;
  while (*(void *)(*(void *)&v2 + 1640) == *(void *)v13
       && *(void *)(*(void *)&v2 + 1688) == *(void *)(v13 + 48)
       && *(_DWORD *)(*(void *)&v2 + 1736) == *(_DWORD *)(v13 + 96)
       || *(void *)(*(void *)&v2 + 1616)
       && *(void *)(*(void *)&v2 + 1512) == *(void *)v13
       && *(void *)(*(void *)&v2 + 1560) == *(void *)(v13 + 48)
       && *(_DWORD *)(*(void *)&v2 + 1608) == *(_DWORD *)(v13 + 96))
  {
    v13 += 104;
    v12 -= 104;
    if (!v12) {
      goto LABEL_89;
    }
  }
LABEL_64:
  uint64_t v32 = v10 + 104 * v11;
  if (v13 != v32)
  {
    do
    {
      unsigned int v33 = HIDWORD(*(void *)v13) & 0x40000000;
      if (*(uint64_t *)v13 < 0 && v33 == 0) {
        int v35 = 0x40000000;
      }
      else {
        int v35 = 0;
      }
      *(void *)unsigned int v63 = *(void *)v13 | ((HIDWORD(*(void *)v13) & 0xFFFFFFF | ((*(_DWORD *)(v13 + 96) >> 27) << 31) | (*(void *)v13 >> 33) & 0x10000000 | (v33 >> 1) | v35) << 32);
      LODWORD(v64) = 0;
      sub_F9E7F0((uint64_t)&a1[132], v63, (int *)&v64);
      sub_F9F9EC(a1 + 132);
      uint64_t v36 = *(void *)(v13 + 48);
      unsigned int v37 = HIDWORD(v36) & 0x40000000;
      if (v36 < 0 && v37 == 0) {
        int v39 = 0x40000000;
      }
      else {
        int v39 = 0;
      }
      *(void *)unsigned int v63 = *(void *)(v13 + 48) | ((HIDWORD(v36) & 0xFFFFFFF | (*(_DWORD *)(v13 + 96) >> 28 << 31) | ((unint64_t)v36 >> 33) & 0x10000000 | (v37 >> 1) | v39) << 32);
      LODWORD(v64) = 0;
      sub_F9E7F0((uint64_t)&a1[132], v63, (int *)&v64);
      sub_F9F9EC(a1 + 132);
      v13 += 104;
      if (v13 == v32) {
        break;
      }
      while (*(void *)(*(void *)&v2 + 1640) == *(void *)v13
           && *(void *)(*(void *)&v2 + 1688) == *(void *)(v13 + 48)
           && *(_DWORD *)(*(void *)&v2 + 1736) == *(_DWORD *)(v13 + 96)
           || *(void *)(*(void *)&v2 + 1616)
           && *(void *)(*(void *)&v2 + 1512) == *(void *)v13
           && *(void *)(*(void *)&v2 + 1560) == *(void *)(v13 + 48)
           && *(_DWORD *)(*(void *)&v2 + 1608) == *(_DWORD *)(v13 + 96))
      {
        v13 += 104;
        if (v13 == v32) {
          goto LABEL_88;
        }
      }
    }
    while (v13 != v32);
LABEL_88:
    int32x2_t v2 = *a1;
  }
LABEL_89:
  for (uint64_t i = *(void **)(sub_2ABCB4(*(void *)&v2 + 8) + 16); i; uint64_t i = (void *)*i)
  {
    uint64_t v41 = i[2];
    unsigned int v42 = HIDWORD(v41) & 0x40000000;
    if (v41 < 0 && v42 == 0) {
      int v44 = 0x40000000;
    }
    else {
      int v44 = 0;
    }
    v63[0] = i[2];
    v63[1] = ((unint64_t)v41 >> 33) & 0x10000000 | HIDWORD(v41) & 0xFFFFFFF | (v42 >> 1) | v44;
    LODWORD(v64) = 0;
    sub_F9E7F0((uint64_t)&a1[132], v63, (int *)&v64);
    sub_F9F9EC(a1 + 132);
  }
  unint64_t v45 = 126 - 2 * __clz(((char *)v60 - (unsigned char *)__p) >> 3);
  if (v60 == __p) {
    uint64_t v46 = 0;
  }
  else {
    uint64_t v46 = v45;
  }
  sub_F98280((int8x16_t *)__p, v60, (uint64_t)v63, v46, 1);
  unint64_t v47 = v60;
  if (__p != v60)
  {
    unint64_t v48 = (char *)__p - 8;
    do
    {
      if (v48 + 16 == (char *)v60) {
        goto LABEL_119;
      }
      int v49 = *((_DWORD *)v48 + 2);
      v48 += 8;
      LODWORD(v50) = *((_DWORD *)v48 + 2);
    }
    while (v49 != v50 || *((_DWORD *)v48 + 1) != *((_DWORD *)v48 + 3));
    uint64_t v52 = (int8x16_t *)(v48 + 16);
    if (v48 + 16 == (char *)v60)
    {
      double v53 = (int8x16_t *)(v48 + 8);
      if (v48 + 8 == (char *)v60) {
        goto LABEL_119;
      }
      goto LABEL_118;
    }
    do
    {
      if (v50 != v52->i32[0] || *((_DWORD *)v48 + 1) != v52->i32[1])
      {
        uint64_t v50 = v52->i64[0];
        *((void *)v48 + 1) = v52->i64[0];
        v48 += 8;
      }
      uint64_t v52 = (int8x16_t *)((char *)v52 + 8);
    }
    while (v52 != v47);
    double v53 = (int8x16_t *)(v48 + 8);
    if (v48 + 8 != (char *)v60) {
LABEL_118:
    }
      char v60 = v53;
  }
LABEL_119:
  sub_FA7B98((void **)(*(void *)a1 + 200), (void ***)&__p, *(unsigned int **)&a1[371], (int *)&a1[370], a1[370].i8[4], 4u);
  if (__p)
  {
    char v60 = (int8x16_t *)__p;
    operator delete(__p);
  }
}

void sub_F87BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_F87C44(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 1176);
  uint64_t v3 = *(void *)(a1 + 1168);
  unint64_t v64 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - v3) >> 4);
  if (v64 >> 30)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v70, "The source terminal of a query cannot have more than (2^30 - 1) nodes.");
    int v59 = (void *)sub_2F404((uint64_t)exception, &v70);
  }
  if (v2 != v3)
  {
    uint64_t v5 = 0;
    uint64_t v62 = a1 + 1200;
    uint64_t v60 = a1 + 2976;
    uint64_t v61 = (uint64_t **)(a1 + 1056);
    do
    {
      uint64_t v6 = *(void *)(a1 + 1168);
      uint64_t v7 = (unsigned int *)(v6 + 80 * v5);
      uint64_t v8 = *(uint64_t **)a1;
      uint64_t v9 = **(void **)a1;
      if (*(unsigned char *)(v9 + 7774))
      {
        uint64_t v11 = *v7;
        unsigned int v10 = v7[1];
        uint64_t v12 = sub_290DEC(v9 + 3896, *v7, 1);
        if (!v12) {
          goto LABEL_4;
        }
        uint64_t v13 = &v12[-*(int *)v12];
        if (*(unsigned __int16 *)v13 < 5u) {
          goto LABEL_4;
        }
        uint64_t v14 = *((unsigned __int16 *)v13 + 2);
        if (!v14
          || *(_DWORD *)&v12[v14 + *(unsigned int *)&v12[v14]] <= (v10 & 0xFFFFFFF)
          || !sub_295DB4(v9, v11 & 0xF0000000FFFFFFFFLL | ((unint64_t)(v10 & 0xFFFFFFF) << 32)))
        {
          goto LABEL_4;
        }
        uint64_t v8 = *(uint64_t **)a1;
      }
      unint64_t v15 = sub_F6DA8C(v8 + 19, (unsigned int *)(v6 + 80 * v5), v6 + 80 * v5 + 8, *(void *)(a1 + 2968), 1, 1);
      unint64_t v65 = v15 & 0xFFFFFFFF00000000;
      int v66 = v15;
      if (v15 != -1 && (v15 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
      {
        int v17 = *(_DWORD *)(v6 + 80 * v5 + 8);
        sub_EDA198((unsigned __int8 *)(*(void *)a1 + 8), *(void *)v7, 0, v60);
        unsigned int v18 = -991146299 * ((*(void *)(a1 + 2984) - *(void *)(a1 + 2976)) >> 3);
        if (v18)
        {
          uint64_t v19 = 0;
          int v20 = 0;
          unsigned int v67 = 1000000000 - v17;
          uint64_t v68 = 104 * v18;
          while (2)
          {
            uint64_t v26 = *(void *)(a1 + 2976);
            BOOL v27 = (uint64_t *)(v26 + v19);
            int v28 = *(_DWORD *)(a1 + 2960);
            int v29 = *(uint64_t **)a1;
            uint64_t v30 = *(void *)(a1 + 2968);
            if (*(unsigned char *)(*(void *)a1 + 1394))
            {
              if (sub_F56CA0((uint64_t)(v29 + 185), v26 + v19) != -1) {
                goto LABEL_27;
              }
              unint64_t v31 = HIDWORD(*v27);
              unsigned int v32 = v31 & 0x40000000;
              BOOL v33 = *v27 < 0 && v32 == 0;
              int v34 = v33 ? 0x40000000 : 0;
              *(void *)&long long v70 = *v27 | ((v31 & 0x6FFFFFFF | (((v34 | (v32 >> 1)) == 0x40000000) << 31)) << 32);
              if (sub_F58474((uint64_t)(v29 + 175), (uint64_t *)&v70) != -1) {
                goto LABEL_27;
              }
            }
            unint64_t v35 = sub_F6D3B4(v29 + 19, v26 + v19, v67, v30);
            unint64_t v36 = v35 & 0xFFFFFFFF00000000;
            if (v35 == -1 || v36 == 0x7FFFFFFF00000000) {
              goto LABEL_27;
            }
            uint64_t v38 = v26 + v19;
            unint64_t v39 = v36 + v65;
            char v40 = *(unsigned char *)(a1 + 2964);
            *(void *)&long long v70 = v39 | (v35 + v66);
            DWORD2(v70) = v28;
            BYTE12(v70) = v40;
            uint64_t v41 = *(void *)(v26 + v19);
            unsigned int v42 = HIDWORD(v41) & 0x40000000;
            if (v41 < 0 && v42 == 0) {
              int v44 = 0x40000000;
            }
            else {
              int v44 = 0;
            }
            unint64_t v71 = *(void *)(v26 + v19) | ((HIDWORD(v41) & 0xFFFFFFF | (*(_DWORD *)(v26 + v19 + 96) >> 27 << 31) | ((unint64_t)v41 >> 33) & 0x10000000 | (v42 >> 1) | v44) << 32);
            uint64_t v45 = *(void *)(v38 + 48);
            unsigned int v46 = HIDWORD(v45) & 0x40000000;
            if (v45 < 0 && v46 == 0) {
              int v48 = 0x40000000;
            }
            else {
              int v48 = 0;
            }
            unint64_t v72 = *(void *)(v38 + 48) | ((HIDWORD(v45) & 0xFFFFFFF | (*(_DWORD *)(v38 + 96) >> 28 << 31) | ((unint64_t)v45 >> 33) & 0x10000000 | (v46 >> 1) | v48) << 32);
            int v73 = *(_DWORD *)(v38 + 96);
            int v74 = v20;
            int v75 = 0;
            int v76 = v5 | 0x80000000;
            uint64_t v49 = *(void *)(v38 + 48);
            unsigned int v50 = HIDWORD(v49) & 0x40000000;
            if (v49 < 0 && v50 == 0) {
              int v52 = 0x40000000;
            }
            else {
              int v52 = 0;
            }
            uint64_t v69 = *(void *)(v38 + 48) | ((HIDWORD(*(void *)(v38 + 48)) & 0xFFFFFFF | ((*(_DWORD *)(v38 + 96) >> 28) << 31) | (*(void *)(v38 + 48) >> 33) & 0x10000000 | (v50 >> 1) | v52) << 32);
            int v53 = *(_DWORD *)(a1 + 1044);
            if (v53 != 0x7FFFFFFF)
            {
              unint64_t v54 = HIDWORD(v39);
              sub_F9E678(v62, (unsigned int *)&v69, v77);
              if (!*(void *)v77) {
                goto LABEL_67;
              }
              sub_F9E678(v62, (unsigned int *)&v69, v77);
              uint64_t v55 = *(void *)(*(void *)(a1 + 1968) + 80 * *(unsigned int *)(v78 + 8) + 8);
              if (v70 < v55
                || v70 <= v55 && SDWORD1(v70) < SHIDWORD(v55))
              {
                sub_F9E678(v62, (unsigned int *)&v69, v77);
                int v56 = *(_DWORD *)(*(void *)(a1 + 1968) + 80 * *(unsigned int *)(v78 + 8) + 12);
                int v57 = *(_DWORD *)(a1 + 1044);
                if (v57 >= v56 && v53 < (int)v54)
                {
                  int v21 = -1;
                  goto LABEL_19;
                }
                if (v57 < v56)
                {
LABEL_67:
                  if (v53 >= (int)v54)
                  {
                    int v21 = 1;
LABEL_19:
                    *(_DWORD *)(a1 + 1048) += v21;
                  }
                }
              }
            }
            sub_F8C688(v62, (unsigned int *)&v69, (uint64_t)&v70);
            uint64_t v22 = *(void *)(v38 + 48);
            unsigned int v23 = HIDWORD(v22) & 0x40000000;
            if (v22 < 0 && v23 == 0) {
              int v25 = 0x40000000;
            }
            else {
              int v25 = 0;
            }
            *(void *)long long v77 = *(void *)(v38 + 48) | ((HIDWORD(*(void *)(v38 + 48)) & 0xFFFFFFF | ((*(_DWORD *)(v38 + 96) >> 28) << 31) | (*(void *)(v38 + 48) >> 33) & 0x10000000 | (v23 >> 1) | v25) << 32);
            LODWORD(v69) = 0;
            sub_F9E7F0((uint64_t)v61, v77, (int *)&v69);
            sub_F9EA08(v61, a2);
            sub_F9F9EC((int32x2_t *)v61);
LABEL_27:
            ++v20;
            v19 += 104;
            if (v68 == v19) {
              break;
            }
            continue;
          }
        }
      }
LABEL_4:
      ++v5;
    }
    while (v5 != v64);
  }
}

void sub_F8819C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_F881CC(uint64_t a1)
{
  uint64_t v39 = -858993459 * ((*(void *)(a1 + 1176) - *(void *)(a1 + 1168)) >> 4);
  if (v39)
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(a1 + 1168);
      uint64_t v42 = v2;
      uint64_t v4 = (unsigned int *)(v3 + 80 * v2);
      if (*(unsigned char *)(a1 + 3048)) {
        sub_F8C854((int32x2_t *)a1, (unsigned int *)(v3 + 80 * v2));
      }
      sub_FA18AC(*(void *)(a1 + 976) + 24, v4, v46);
      if (*(void *)v46)
      {
        uint64_t v5 = v3 + 80 * v42;
        unsigned int v45 = *(_DWORD *)(v5 + 8);
        unint64_t v6 = sub_F6DA8C((uint64_t *)(*(void *)a1 + 152), v4, v5 + 8, *(void *)(a1 + 2968), 1, 1);
        unint64_t v41 = v6;
        if (v6 != -1 && (v6 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
        {
          sub_FA18AC(*(void *)(a1 + 976) + 24, v4, v46);
          uint64_t v8 = *(uint64_t **)(v47 + 8);
          char v40 = *(uint64_t **)(v47 + 16);
          if (v8 != v40)
          {
            do
            {
              uint64_t v43 = v8;
              uint64_t v9 = (void *)(**(void **)(a1 + 976) + 32 * *v8);
              uint64_t v10 = -858993459 * ((v9[1] - *v9) >> 4);
              if (v10)
              {
                for (uint64_t i = 0; i != v10; ++i)
                {
                  uint64_t v12 = (unsigned int *)(*v9 + 80 * i);
                  if (*v12 == *v4 && v12[1] == v4[1])
                  {
                    uint64_t v13 = *v9 + 80 * i;
                    unsigned int v14 = *(_DWORD *)(v13 + 8);
                    unint64_t v15 = sub_F6DA8C((uint64_t *)(*(void *)a1 + 152), v12, v13 + 8, *(void *)(a1 + 2968), 1, 1);
                    int v16 = v15;
                    BOOL v17 = v15 == -1 || HIDWORD(v15) == 0x7FFFFFFF;
                    if (!v17 && v14 >= v45)
                    {
                      unint64_t v44 = HIDWORD(v15);
                      int32x2_t v19 = *(int32x2_t *)a1;
                      uint64_t v20 = *(void *)(a1 + 2968);
                      if (!*(unsigned char *)(*(void *)a1 + 1394)) {
                        goto LABEL_51;
                      }
                      uint64_t v21 = *v4;
                      unsigned int v22 = v4[1];
                      unint64_t v23 = v22 & 0xFFFFFFF | (((v22 >> 28) & 3) << 29) | (((v22 & 0x60000000) == 0x40000000) << 31);
                      uint64_t v24 = *(void *)(*(void *)&v19 + 1456) - 1;
                      unint64_t v25 = 0x2127599BF4325C37
                          * (((v23 >> 29) & 2 | (v23 >> 31) | (v23 >> 27) & 4 | (v21 << 32) | (8 * (v22 & 0xFFFFFFF))) ^ (((v21 << 32) | (8 * (unint64_t)(v22 & 0xFFFFFFF))) >> 23));
                      uint64_t v26 = *(void *)(*(void *)&v19 + 1472);
                      int v27 = *(_DWORD *)(*(void *)&v19 + 1464);
                      int v28 = *(_DWORD *)(*(void *)&v19 + 1468);
                      unint64_t v29 = (v25 ^ (v25 >> 47)) & v24;
                      int v30 = *(_DWORD *)(v26 + 8 * v29);
                      int v31 = *(_DWORD *)(v26 + 8 * v29 + 4);
                      if (v27 == v30 && v28 == v31) {
                        goto LABEL_51;
                      }
                      if (*(void *)(*(void *)&v19 + 1440))
                      {
                        uint64_t v33 = 1;
                        while (*(_DWORD *)(*(void *)&v19 + 1432) == v30
                             && *(_DWORD *)(*(void *)&v19 + 1436) == v31
                             || v31 != v23
                             || v30 != v21)
                        {
                          unint64_t v29 = (v29 + v33) & v24;
                          int v30 = *(_DWORD *)(v26 + 8 * v29);
                          int v31 = *(_DWORD *)(v26 + 8 * v29 + 4);
                          ++v33;
                          if (v27 == v30 && v28 == v31) {
                            goto LABEL_51;
                          }
                        }
                      }
                      else
                      {
                        uint64_t v35 = 1;
                        while (v31 != v23 || v30 != v21)
                        {
                          unint64_t v29 = (v29 + v35) & v24;
                          int v30 = *(_DWORD *)(v26 + 8 * v29);
                          int v31 = *(_DWORD *)(v26 + 8 * v29 + 4);
                          ++v35;
                          if (v27 == v30 && v28 == v31) {
                            goto LABEL_51;
                          }
                        }
                      }
                      if (v29 == -1)
                      {
LABEL_51:
                        unsigned int v37 = (uint64_t *)(*(void *)&v19 + 152);
                        sub_ED9E74((unsigned __int8 *)(*(void *)&v19 + 8), *(void *)v4 | ((HIDWORD(*(void *)v4) & 0xFFFFFFF | (*(void *)v4 >> 31) & 0x60000000 | (((*(void *)v4 & 0x6000000000000000) == 0x4000000000000000) << 31)) << 32), (uint64_t)v46);
                        unint64_t v38 = sub_F6D9F4(v37, v46, v14 - v45, v20);
                        if (v38 != -1 && HIDWORD(v38) != 0x7FFFFFFF)
                        {
                          v46[0] = v38 + v16 + v41;
                          v46[1] = v44 + HIDWORD(v41) + HIDWORD(v38);
                          sub_F8C338(a1, v4, v46, *v43, v42, i, 1, 0);
                        }
                      }
                    }
                  }
                }
              }
              uint64_t v8 = v43 + 1;
            }
            while (v43 + 1 != v40);
          }
        }
      }
      uint64_t v2 = v42 + 1;
    }
    while (v42 + 1 != v39);
  }
}

void sub_F885D8(void *****a1, unsigned int *a2, unsigned int a3)
{
  if (*((unsigned char *)*a1 + 1392) && sub_65BD8()) {
    unsigned int v6 = sub_F78BBC((uint64_t *)a1[1]) - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  unsigned int v7 = -1;
  if (*a2 < v6 && *a2 != -1) {
    unsigned int v6 = *a2;
  }
  unsigned int v109 = v6;
  unsigned int v110 = v6;
  uint64_t v9 = (uint64_t)(a1 + 150);
  uint64_t v10 = (unsigned int *)v107 + 2;
  uint64_t v11 = a1 + 378;
  double v88 = a1 + 375;
  int64x2_t v92 = vdupq_n_s64(0x5000FFFF00000000uLL);
  while (*((_DWORD *)a1 + 518) && ((unint64_t)((char *)a1[250] - (char *)a1[249]) >> 2) < a3)
  {
    uint64_t v12 = &a1[246][10 * *(unsigned int *)a1[253]];
    v107[0] = *v12;
    long long v13 = v12[3];
    long long v14 = v12[4];
    long long v15 = v12[2];
    v107[1] = v12[1];
    v107[3] = v13;
    long long v108 = v14;
    v107[2] = v15;
    sub_F773C4(v9);
    uint64_t v16 = (uint64_t)**a1;
    if (*(unsigned char *)(v16 + 7774))
    {
      uint64_t v18 = LODWORD(v107[0]);
      int v17 = DWORD1(v107[0]);
      int32x2_t v19 = sub_290DEC(v16 + 3896, v107[0], 1);
      if (!v19) {
        goto LABEL_79;
      }
      uint64_t v20 = &v19[-*(int *)v19];
      if (*(unsigned __int16 *)v20 < 5u) {
        goto LABEL_79;
      }
      uint64_t v21 = *((unsigned __int16 *)v20 + 2);
      if (!v21
        || *(_DWORD *)&v19[v21 + *(unsigned int *)&v19[v21]] <= (v17 & 0xFFFFFFFu)
        || !sub_295DB4(v16, v18 & 0xF0000000FFFFFFFFLL | ((unint64_t)(v17 & 0xFFFFFFF) << 32)))
      {
        goto LABEL_79;
      }
    }
    if (*((unsigned char *)a1 + 1052)
      && !sub_2961B8(**a1, LODWORD(v107[0]) | ((unint64_t)(DWORD1(v107[0]) & 0xFFFFFFF) << 32)))
    {
      goto LABEL_79;
    }
    int v22 = DWORD2(v108);
    unsigned int v23 = *((_DWORD *)a1 + 260);
    if (v23 != -1 && DWORD2(v107[0]) > v23 || *((unsigned char *)a1 + 3048) && sub_F8B420((uint64_t)a1, v10)) {
      return;
    }
    int v24 = *((_DWORD *)a1 + 261);
    if (v24 != 0x7FFFFFFF && SHIDWORD(v107[0]) <= v24) {
      --*((_DWORD *)a1 + 262);
    }
    if (*v11 != -1
      && sub_F963A0((uint64_t)*a1[1], LODWORD(v107[0]) | ((unint64_t)(DWORD1(v107[0]) & 0xFFFFFFF) << 32), v11))
    {
      goto LABEL_79;
    }
    int v25 = v22 & 0x7FFFFFFF;
    unsigned int v106 = sub_F8B574((uint64_t)a1, (unsigned int *)v107, (uint64_t)v10, v22 & 0x7FFFFFFF);
    int v26 = *((_DWORD *)a1 + 740);
    unsigned int v27 = 0x7FFFFFFF;
    if (v26 != 0x7FFFFFFF)
    {
      if (v107[0] < 0) {
        char v28 = -5;
      }
      else {
        char v28 = 5;
      }
      unsigned int v27 = SHIDWORD(v107[0]) / 10
          + v26
          + (((103 * (char)(v28 + SHIDWORD(v107[0]) % 10)) >> 15) & 1)
          + ((103 * (char)(v28 + SHIDWORD(v107[0]) % 10)) >> 10);
    }
    unsigned int v105 = v27;
    int v29 = sub_35E640();
    int v30 = (int *)&v110;
    if (v29) {
      int v30 = (int *)&v109;
    }
    int v31 = *v30 >= v106 ? &v106 : (unsigned int *)v30;
    int v32 = sub_F8B988((uint64_t)a1, (unsigned int *)v107, (unsigned int *)a1[371], (int *)&v105, *((unsigned char *)a1 + 2964), v31);
    int v104 = v32;
    if (v32 != -1)
    {
      if (!v32)
      {
        uint64_t v90 = v9;
        unsigned int v91 = a3;
        if (!*((unsigned char *)a1 + 3048)) {
          sub_F8BAF4((int32x2_t *)a1, (unsigned int *)v107, (uint64_t *)v10, v22 & 0x7FFFFFFF);
        }
        int v93 = v22 & 0x7FFFFFFF;
        uint64_t v89 = v10;
        sub_EDA198((unsigned __int8 *)*a1 + 8, *(unint64_t *)&v107[0], 0, (uint64_t)(a1 + 372));
        unsigned int v33 = -991146299 * ((unint64_t)((char *)a1[373] - (char *)a1[372]) >> 3);
        if (v33)
        {
          unint64_t v34 = 0;
          int v35 = 0;
          uint64_t v36 = 104 * v33;
          do
          {
            unsigned int v37 = a1[372];
            unint64_t v38 = (uint64_t *)&v37[v34 / 8];
            int32x2_t v39 = (int32x2_t)*a1;
            uint64_t v40 = (uint64_t)a1[371];
            if (!*((unsigned char *)*a1 + 1394)
              || sub_F56CA0(*(void *)&v39 + 1480, (uint64_t)&v37[v34 / 8]) == -1
              && ((unint64_t v41 = HIDWORD(*v38), v42 = v41 & 0x40000000, *v38 < 0) ? (v43 = v42 == 0) : (v43 = 0),
                  !v43 ? (int v44 = 0) : (int v44 = 0x40000000),
                  unint64_t v95 = *v38 | ((v41 & 0x6FFFFFFF | (((v44 | (v42 >> 1)) == 0x40000000) << 31)) << 32),
                  sub_F58474(*(void *)&v39 + 1400, (uint64_t *)&v95) == -1))
            {
              unint64_t v45 = sub_F6DA00((uint64_t *)(*(void *)&v39 + 152), (uint64_t)&v37[v34 / 8], v40);
              unint64_t v46 = v45 & 0xFFFFFFFF00000000;
              if (v45 != -1 && v46 != 0x7FFFFFFF00000000)
              {
                int v48 = &v37[v34 / 8];
                uint64_t v49 = (uint64_t)v37[v34 / 8 + 6];
                unsigned int v50 = HIDWORD(v49) & 0x40000000;
                if (v49 < 0 && v50 == 0) {
                  int v52 = 0x40000000;
                }
                else {
                  int v52 = 0;
                }
                unint64_t v103 = v37[v34 / 8 + 6] | ((HIDWORD(v49) & 0xFFFFFFF | (LODWORD(v37[v34 / 8 + 12]) >> 28 << 31) | ((unint64_t)v49 >> 33) & 0x10000000 | (v50 >> 1) | v52) << 32);
                char v53 = *((unsigned char *)a1 + 2964);
                unint64_t v95 = (*((void *)&v107[0] + 1) + v46) & 0xFFFFFFFF00000000 | (DWORD2(v107[0]) + v45);
                LODWORD(v96) = v105;
                BYTE4(v96) = v53;
                unsigned int v54 = ((unint64_t)*v48 >> 32) & 0x40000000;
                if ((uint64_t)*v48 < 0 && v54 == 0) {
                  int v56 = 0x40000000;
                }
                else {
                  int v56 = 0;
                }
                v97.i64[0] = *v48 | ((((unint64_t)*v48 >> 32) & 0xFFFFFFF | ((*((_DWORD *)v48 + 24) >> 27) << 31) | ((unint64_t)*v48 >> 33) & 0x10000000 | (v54 >> 1) | v56) << 32);
                uint64_t v57 = (uint64_t)v48[6];
                unsigned int v58 = HIDWORD(v57) & 0x40000000;
                if (v57 < 0 && v58 == 0) {
                  int v60 = 0x40000000;
                }
                else {
                  int v60 = 0;
                }
                v97.i64[1] = v48[6] | ((HIDWORD(v57) & 0xFFFFFFF | (*((_DWORD *)v48 + 24) >> 28 << 31) | ((unint64_t)v57 >> 33) & 0x10000000 | (v58 >> 1) | v60) << 32);
                LODWORD(v98) = *((_DWORD *)v48 + 24);
                int v100 = v35;
                int v101 = 0;
                int v102 = v93;
                sub_F8B2F0((uint64_t)a1, (unsigned int *)&v103, &v95);
              }
            }
            ++v35;
            v34 += 104;
          }
          while (v36 != v34);
        }
LABEL_100:
        int v80 = *((_DWORD *)a1 + 261);
        if (v80 == 0x7FFFFFFF)
        {
          int v61 = 0;
          a3 = v91;
          uint64_t v10 = v89;
          uint64_t v9 = v90;
          uint64_t v11 = a1 + 378;
        }
        else
        {
          int v61 = 0;
          a3 = v91;
          uint64_t v10 = v89;
          uint64_t v9 = v90;
          uint64_t v11 = a1 + 378;
          if (!*((_DWORD *)a1 + 262) && v7 == -1)
          {
            int v81 = a1[119];
            unint64_t v82 = a1[120];
            if (v81 == v82)
            {
              int v61 = 3;
              unsigned int v7 = -1;
            }
            else
            {
              unsigned int v7 = 0;
              unint64_t v83 = a1[116];
              do
              {
                if (0xAAAAAAAAAAAAAAABLL * (a1[117] - v83) > *v81) {
                  unint64_t v84 = (unint64_t)v83[3 * *v81 + 1];
                }
                else {
                  unint64_t v84 = 0x7FFFFFFFFFFFFFFFLL;
                }
                unint64_t v85 = HIDWORD(v84);
                if (v7 > v84) {
                  LODWORD(v84) = v7;
                }
                if (v80 >= (int)v85) {
                  unsigned int v7 = v84;
                }
                ++v81;
              }
              while (v81 != v82);
              unsigned int v86 = *((_DWORD *)a1 + 260);
              BOOL v87 = v86 != -1 && v7 >= v86;
              int v61 = 0;
              if (!v87) {
                *((_DWORD *)a1 + 260) = v7;
              }
            }
          }
        }
        goto LABEL_80;
      }
      unint64_t v62 = sub_F968AC((uint64_t)*a1[1], LODWORD(v107[0]) | ((unint64_t)(DWORD1(v107[0]) & 0xFFFFFFF) << 32), (DWORD1(v107[0]) & 0x10000000) == 0, &v104);
      unint64_t v103 = v62;
      if (v62)
      {
        if (v62 <= 0xFFFFFFFEFFFFFFFFLL)
        {
          char v63 = *((unsigned char *)a1 + 2964);
          sub_FA7290(*a1 + 25, *(unint64_t *)&v107[0], &v104, 0, (unsigned int *)a1[371], (int *)&v105, v63, (uint64_t)v88);
          if (a1[375] != a1[376])
          {
            sub_5217C8((uint64_t)(a1 + 260), &v103, (uint64_t)&v95);
            unint64_t v64 = v95;
            if (v97.i8[0])
            {
              uint64_t v65 = *(void *)(v95 + 8) + 12 * v96;
              *(void *)uint64_t v65 = v103;
              *(_DWORD *)(v65 + 8) = 0x7FFFFFFF;
            }
            uint64_t v90 = v9;
            unsigned int v91 = a3;
            uint64_t v66 = *(void *)(v64 + 8) + 12 * v96;
            int v69 = *(_DWORD *)(v66 + 8);
            unsigned int v67 = (_DWORD *)(v66 + 8);
            int v68 = v69;
            if (v69 == 0x7FFFFFFF || SHIDWORD(v107[0]) < v68) {
              _DWORD *v67 = HIDWORD(v107[0]);
            }
            uint64_t v70 = -858993459 * ((unint64_t)((char *)a1[376] - (char *)a1[375]) >> 3);
            if (v70)
            {
              uint64_t v71 = 0;
              int v72 = 0;
              uint64_t v73 = 40 * v70;
              do
              {
                uint64_t v74 = *v88 + v71;
                uint64_t v75 = *(void *)(v74 + 28);
                unint64_t v76 = v75 & 0xFFFFFFFF00000000;
                if (v75 != -1 && v76 != 0x7FFFFFFF00000000)
                {
                  unint64_t v95 = (v76 + *((void *)&v107[0] + 1)) & 0xFFFFFFFF00000000 | (v75 + DWORD2(v107[0]));
                  LODWORD(v96) = v105;
                  BYTE4(v96) = v63;
                  int64x2_t v97 = v92;
                  LODWORD(v98) = 0;
                  int v100 = v72;
                  int v101 = v104;
                  int v102 = v25;
                  int v78 = *(_DWORD *)(v74 + 32);
                  long long v79 = *(_OWORD *)(v74 + 16);
                  int64x2_t v97 = *(int64x2_t *)v74;
                  long long v98 = v79;
                  int v99 = v78;
                  uint64_t v94 = *(void *)(v74 + 8);
                  sub_F8B2F0((uint64_t)a1, (unsigned int *)&v94, &v95);
                }
                ++v72;
                v71 += 40;
              }
              while (v73 != v71);
            }
            uint64_t v89 = v10;
            goto LABEL_100;
          }
        }
      }
      int v61 = 2;
      uint64_t v11 = a1 + 378;
    }
    else
    {
LABEL_79:
      int v61 = 2;
    }
LABEL_80:
    if (v61 == 3) {
      return;
    }
  }
}

void sub_F88E34(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, char a5, _DWORD *a6, int a7, unsigned int *a8, unsigned int **a9, void *a10, unsigned int a11, int a12, int a13)
{
  sub_F87098(a1);
  *(_DWORD *)(a1 + 2960) = *a4;
  *(unsigned char *)(a1 + 2964) = a5;
  *(void *)(a1 + 2968) = a3;
  if (a1 + 1168 != a2) {
    sub_BFF628((void *)(a1 + 1168), *(char **)a2, *(char **)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
  }
  *(void *)(a1 + 1192) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 1040) = *a6;
  *(_DWORD *)(a1 + 1044) = a7;
  *(_DWORD *)(a1 + 20) = a13;
  *(void *)(a1 + 976) = a1 + 24;
  sub_F87430((int32x2_t *)a1);
  sub_F87C44(a1, a10);
  uint64_t v21 = *a9;
  uint64_t v20 = a9[1];
  if (*a9 != v20)
  {
    do
    {
      unsigned int v23 = v21[2];
      sub_F9E7F0(a1 + 1056, v21, (int *)&v23);
      sub_F9EA08((uint64_t **)(a1 + 1056), a10);
      sub_F9F9EC((int32x2_t *)(a1 + 1056));
      v21 += 4;
    }
    while (v21 != v20);
  }
  sub_F885D8((void *****)a1, a8, a11);
}

void sub_F88F70(int32x2_t *a1, int32x2_t *a2, unsigned int ***a3, uint64_t a4, __int32 a5, __int8 a6, __int32 a7, __int32 a8, unsigned int a9, int a10, unsigned int a11)
{
  sub_F87098((uint64_t)a1);
  int32x2_t v19 = *a3;
  uint64_t v18 = a3[1];
  if (*a3 == v18)
  {
    uint64_t v20 = *a3;
  }
  else
  {
    do
    {
      int v24 = a1;
      sub_F8AFE4(a1 + 3, v19, 1, (void **)&v24);
      v19 += 4;
    }
    while (v19 != v18);
    int32x2_t v19 = *a3;
    uint64_t v20 = a3[1];
  }
  unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&a1[117] - *(void *)&a1[116]) >> 3);
  unint64_t v22 = ((char *)v20 - (char *)v19) >> 5;
  if (v22 > v21) {
    sub_F9E408((void **)&a1[116], v22 - v21);
  }
  a1[122] = (int32x2_t)&a1[3];
  sub_F89084(a1, a2, a4, a5, a6, a7, a8, a9, a11);
}

void sub_F89084(int32x2_t *a1, int32x2_t *a2, uint64_t a3, __int32 a4, __int8 a5, __int32 a6, __int32 a7, unsigned int a8, unsigned int a9)
{
  unsigned int v18 = a8;
  a1[370].i32[0] = a4;
  a1[370].i8[4] = a5;
  a1[371] = (int32x2_t)a3;
  long long v13 = a1 + 146;
  if (v13 != a2) {
    sub_BFF628(v13, *(char **)a2, *(char **)&a2[1], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&a2[1] - *(void *)a2) >> 4));
  }
  a1[149] = a2[3];
  a1[130].i32[0] = a6;
  a1[130].i32[1] = a7;
  long long v14 = (void *)a1[122];
  if (v14[11]
     + v14[5]
     + v14[17]
     + v14[23]
     + v14[29]
     + v14[35]
     + v14[41]
     + v14[47]
     + v14[53]
     + v14[59]
     + v14[65]
     + v14[71]
     + v14[77]
     + v14[83]
     + v14[89]
     + v14[95]
    || a1[381].i8[0])
  {
    sub_F87430(a1);
    long long __p = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    sub_F87C44((uint64_t)a1, &__p);
    if (__p)
    {
      uint64_t v16 = __p;
      operator delete(__p);
    }
    sub_F881CC((uint64_t)a1);
    sub_F885D8(a1, &v18, a9);
  }
}

void sub_F891DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_F891F8(int32x2_t *a1, int32x2_t *a2, __int32 a3, __int8 a4, __int32 a5, __int32 a6, unsigned int a7, unsigned int a8, __int32 a9, __int8 a10)
{
  if (!*(void *)&a1[379])
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v25, "A BucketSearchDataProvider is required for the bucket search query");
    int v24 = (void *)sub_2F404((uint64_t)exception, &v25);
  }
  sub_F87098((uint64_t)a1);
  a1[122] = (int32x2_t)&a1[3];
  a1[381].i8[0] = 1;
  a1[381].i8[1] = a10;
  a1[381].i32[1] = a9;
  a1[384] = a1[383];
  a1[382].i32[0] = 0;
  uint64_t v18 = (uint64_t)a1[379];
  unsigned int v19 = *(_DWORD *)(v18 + 164);
  uint64_t v20 = sub_F89358(v18);
  if (v19 < a7 || a7 == -1) {
    unsigned int v22 = v19;
  }
  else {
    unsigned int v22 = a7;
  }

  sub_F89084(a1, a2, v20, a3, a4, a5, a6, v22, a8);
}

void sub_F89328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F89358(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 184))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "The bucket search cost function has to be preprocessed.");
    uint64_t v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return *(void *)(a1 + 176);
}

void sub_F893D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F89400(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 928);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 936) - v3) >> 3) <= a2 || !*(_DWORD *)(v3 + 24 * a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v9, a2);
    unsigned int v6 = std::string::insert(&v9, 0, "No valid data for target id ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v6->__r_.__value_.__r.__words[2];
    long long v10 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  return *(_DWORD *)(v3 + 24 * a2 + 20) & 0x3FFFFFFF;
}

void sub_F894DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F89534(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 928);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 936) - v3) >> 3) <= a2 || !*(_DWORD *)(v3 + 24 * a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v9, a2);
    unsigned int v6 = std::string::insert(&v9, 0, "No valid data for target id ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v6->__r_.__value_.__r.__words[2];
    long long v10 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  return *(unsigned int *)(v3 + 24 * a2 + 16);
}

void sub_F8960C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F89664(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[116];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[117] - v3) >> 3) <= a2 || !*(_DWORD *)(v3 + 24 * a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v9, a2);
    unsigned int v6 = std::string::insert(&v9, 0, "No valid data for target id ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v6->__r_.__value_.__r.__words[2];
    long long v10 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  return *(void *)(a1[482] + 8 * a2);
}

void sub_F89738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F89790@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_EB1D94(a2);
  unsigned int v6 = 0;
  sub_F899B4(a1, 0, (uint64_t)v5, a2);
  uint64_t result = (uint64_t)v6;
  if (v6 == v5) {
    return (*(uint64_t (**)(void *))(v5[0] + 32))(v5);
  }
  if (v6) {
    return (*(uint64_t (**)(void))(*v6 + 40))();
  }
  return result;
}

void sub_F89878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13 == v14) {
    sub_20B1868();
  }
  else {
    sub_20B189C(a13);
  }
  sub_4451C0(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_F898AC@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_EB1D94(a3);
  uint64_t v8 = 0;
  sub_F899B4(a1, a2, (uint64_t)v7, a3);
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

void sub_F89998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_F89BE8((uint64_t *)va);
  sub_4451C0(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_F899B4(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_EB1BF8(a4);
  uint64_t v8 = a1[116];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[117] - v8) >> 3) > a2)
  {
    std::string v9 = (uint64_t *)(v8 + 24 * a2);
    if (*(_DWORD *)v9)
    {
      if (!*((unsigned char *)a1 + 3048) || *((unsigned char *)a1 + 3049))
      {
        uint64_t v10 = v8 + 24 * a2;
        std::string::size_type v11 = (int *)(v10 + 20);
        if ((*(unsigned char *)(v10 + 23) & 0x40) != 0)
        {
          uint64_t v15 = *v9;
          sub_ED9E74((unsigned __int8 *)(*a1 + 8), *v9 | ((HIDWORD(*v9) & 0xFFFFFFF | ((unint64_t)*v9 >> 31) & 0x60000000 | (((*v9 & 0x6000000000000000) == 0x4000000000000000) << 31)) << 32), (uint64_t)v18);
          sub_EB2444(a4, v15, v18);
          sub_EB22B4(a4, a1[146] + 80 * (*v11 & 0x3FFFFFFF) + 8);
          uint64_t v12 = 0;
          int v16 = *v11;
          uint64_t v14 = 32 * a2;
          if (v16 < 0)
          {
LABEL_10:
            sub_F8A2CC(a1, (_DWORD *)(v8 + 24 * a2), a1[485] + 40 * a2, (unint64_t *)(*(void *)(*(void *)a1[122] + v14) + 80 * *(unsigned int *)(v8 + 24 * a2 + 16)), (uint64_t)v18);
            sub_EB3B28(a4, (uint64_t)v18);
            sub_4451C0((uint64_t)v18);
          }
        }
        else
        {
          uint64_t v12 = sub_F89D80((uint64_t)a1, (unsigned int *)(v8 + 24 * a2), a3, a4);
          int v13 = *v11;
          uint64_t v14 = 32 * a2;
          if (v13 < 0) {
            goto LABEL_10;
          }
        }
        sub_EB241C(a4, *(void *)(*(void *)a1[122] + v14) + 80 * *(unsigned int *)(v8 + 24 * a2 + 16) + 8);
        return v12;
      }
    }
  }
  return 0;
}

void sub_F89BD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4451C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_F89BE8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t sub_F89C78@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  sub_EB1D94(a3);
  uint64_t v8 = 0;
  sub_F89D80(a1, a2, (uint64_t)v7, a3);
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

void sub_F89D64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_F89BE8((uint64_t *)va);
  sub_4451C0(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_F89D80(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  sub_EB1BF8(a4);
  if (!*a2) {
    return 0;
  }
  unint64_t v45 = 0;
  unint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v44 = *(void *)a2;
  if (!v44) {
    return 0;
  }
  int32x2_t v39 = a2;
  do
  {
    sub_F9E678(a1 + 1200, (unsigned int *)&v44, &v50);
    unsigned int v8 = *(_DWORD *)(*((void *)&v51 + 1) + 8);
    uint64_t v9 = *(void *)(a1 + 1968);
    sub_F7668C(&v45, v9 + 80 * v8 + 8);
    if ((*(_DWORD *)(v9 + 80 * v8 + 72) & 0x80000000) != 0)
    {
      uint64_t v44 = 0;
      uint64_t v10 = v45;
      std::string::size_type v11 = v46;
      if (v45 != v46) {
        goto LABEL_7;
      }
LABEL_25:
      uint64_t v22 = 0;
      if (v11) {
        goto LABEL_43;
      }
      return v22;
    }
    uint64_t v44 = *(void *)(v9 + 80 * v8 + 24);
  }
  while (v44);
  uint64_t v10 = v45;
  std::string::size_type v11 = v46;
  if (v45 == v46) {
    goto LABEL_25;
  }
LABEL_7:
  if (!*(void *)(a3 + 24))
  {
    uint64_t v12 = v11 - 72;
    if (v11 - 72 > v10)
    {
      int v13 = v10 + 72;
      do
      {
        long long v51 = *(_OWORD *)(v13 - 56);
        long long v52 = *(_OWORD *)(v13 - 40);
        long long v53 = *(_OWORD *)(v13 - 24);
        *(void *)&long long v54 = *((void *)v13 - 1);
        long long v50 = *(_OWORD *)(v13 - 72);
        *(_OWORD *)(v13 - 72) = *(_OWORD *)v12;
        long long v15 = *((_OWORD *)v12 + 2);
        long long v14 = *((_OWORD *)v12 + 3);
        int v16 = *((_DWORD *)v12 + 16);
        *(_OWORD *)(v13 - 56) = *((_OWORD *)v12 + 1);
        *((_DWORD *)v13 - 2) = v16;
        *(_OWORD *)(v13 - 24) = v14;
        *(_OWORD *)(v13 - 40) = v15;
        *(_OWORD *)uint64_t v12 = v50;
        *((_DWORD *)v12 + 16) = v54;
        *((_OWORD *)v12 + 3) = v53;
        *((_OWORD *)v12 + 2) = v52;
        *((_OWORD *)v12 + 1) = v51;
        v12 -= 72;
        BOOL v17 = v13 >= v12;
        v13 += 72;
      }
      while (!v17);
    }
  }
  v43[0] = a3;
  v43[1] = a4;
  long long __p = 0;
  unint64_t v41 = 0;
  uint64_t v18 = v10 + 60;
  uint64_t v42 = 0;
  while (!*v18)
  {
    if (*(void *)(a3 + 24) && !sub_EB2EC4(a4))
    {
      *(void *)&long long v50 = *(void *)(v18 - 9);
      uint64_t v20 = *(void *)(a3 + 24);
      if (!v20) {
        sub_29F82C();
      }
      if ((*(uint64_t (**)(uint64_t, long long *))(*(void *)v20 + 48))(v20, &v50)) {
        goto LABEL_29;
      }
    }
    unint64_t v21 = (unsigned __int8 *)(*(void *)a1 + 8);
    sub_ED9E74(v21, *(void *)(v18 - 11) | ((HIDWORD(*(void *)(v18 - 11)) & 0xFFFFFFF | (*(void *)(v18 - 11) >> 31) & 0x60000000 | (((*(void *)(v18 - 11) & 0x6000000000000000) == 0x4000000000000000) << 31)) << 32), (uint64_t)v49);
    sub_ED9E74(v21, *(void *)(v18 - 9) | ((HIDWORD(*(void *)(v18 - 9)) & 0xFFFFFFF | (*(void *)(v18 - 9) >> 31) & 0x60000000 | (((*(void *)(v18 - 9) & 0x6000000000000000) == 0x4000000000000000) << 31)) << 32), (uint64_t)v48);
    long long v50 = v49[0];
    long long v51 = v49[1];
    long long v52 = v49[2];
    long long v53 = v48[0];
    long long v54 = v48[1];
    long long v55 = v48[2];
    LODWORD(v56) = *(v18 - 7);
    sub_EB258C(a4, &v50);
LABEL_13:
    unsigned int v19 = (char *)(v18 + 3);
    v18 += 18;
    if (v19 == v11)
    {
      char v23 = 1;
      if (!*(void *)(a3 + 24)) {
        goto LABEL_35;
      }
      goto LABEL_30;
    }
  }
  sub_FBF950((uint64_t **)(*(void *)a1 + 296), v18 - 11, *(unsigned int **)(a1 + 2968), v18 - 13, *((unsigned char *)v18 - 48), &__p);
  if (__p == v41)
  {
    sub_EB1BF8(a4);
    goto LABEL_40;
  }
  if ((sub_F8A548(v43, (long long **)&__p) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_29:
  char v23 = 0;
  if (!*(void *)(a3 + 24)) {
    goto LABEL_35;
  }
LABEL_30:
  unint64_t v24 = *(void *)sub_5231C(a4);
  uint64_t v25 = *(void *)(sub_5231C(a4) + 8);
  if (v24 != v25)
  {
    unint64_t v26 = v25 - 104;
    if (v26 > v24)
    {
      unint64_t v27 = v24 + 104;
      do
      {
        long long v53 = *(_OWORD *)(v27 - 56);
        long long v54 = *(_OWORD *)(v27 - 40);
        long long v55 = *(_OWORD *)(v27 - 24);
        uint64_t v56 = *(void *)(v27 - 8);
        long long v50 = *(_OWORD *)(v27 - 104);
        long long v51 = *(_OWORD *)(v27 - 88);
        long long v52 = *(_OWORD *)(v27 - 72);
        long long v29 = *(_OWORD *)(v26 + 16);
        long long v28 = *(_OWORD *)(v26 + 32);
        *(_OWORD *)(v27 - 104) = *(_OWORD *)v26;
        *(_OWORD *)(v27 - 88) = v29;
        *(_OWORD *)(v27 - 72) = v28;
        long long v31 = *(_OWORD *)(v26 + 64);
        long long v30 = *(_OWORD *)(v26 + 80);
        int v32 = *(_DWORD *)(v26 + 96);
        *(_OWORD *)(v27 - 56) = *(_OWORD *)(v26 + 48);
        *(_DWORD *)(v27 - 8) = v32;
        *(_OWORD *)(v27 - 24) = v30;
        *(_OWORD *)(v27 - 40) = v31;
        *(_OWORD *)(v26 + 32) = v52;
        *(_OWORD *)(v26 + 16) = v51;
        *(_OWORD *)unint64_t v26 = v50;
        *(_DWORD *)(v26 + 96) = v56;
        *(_OWORD *)(v26 + 80) = v55;
        *(_OWORD *)(v26 + 64) = v54;
        *(_OWORD *)(v26 + 48) = v53;
        v26 -= 104;
        BOOL v17 = v27 >= v26;
        v27 += 104;
      }
      while (!v17);
    }
  }
LABEL_35:
  if ((v23 & 1) == 0)
  {
    uint64_t v33 = sub_EB22DC(a4);
    long long v50 = *(_OWORD *)v33;
    long long v34 = *(_OWORD *)(v33 + 16);
    long long v35 = *(_OWORD *)(v33 + 32);
    long long v36 = *(_OWORD *)(v33 + 48);
    *(void *)&long long v54 = *(void *)(v33 + 64);
    long long v52 = v35;
    long long v53 = v36;
    long long v51 = v34;
    LODWORD(v50) = 0;
    sub_EB22B4(a4, (uint64_t)&v50);
    uint64_t v22 = 1;
    unsigned int v37 = __p;
    if (!__p) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  sub_F9E678(a1 + 1200, v39, &v50);
  sub_EB22B4(a4, *(void *)(a1 + 1168)+ 80* (*(_DWORD *)(*(void *)(a1 + 1968) + 80 * *(unsigned int *)(*((void *)&v51 + 1) + 8) + 72) & 0x7FFFFFFF)+ 8);
LABEL_40:
  uint64_t v22 = 0;
  unsigned int v37 = __p;
  if (!__p) {
    goto LABEL_42;
  }
LABEL_41:
  unint64_t v41 = v37;
  operator delete(v37);
LABEL_42:
  std::string::size_type v11 = v45;
  if (v45)
  {
LABEL_43:
    unint64_t v46 = v11;
    operator delete(v11);
  }
  return v22;
}

void sub_F8A264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v18 = a16;
    if (!a16) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v18 = a16;
    if (!a16) {
      goto LABEL_3;
    }
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_F8A2CC(void *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  sub_EB1D94(a5);
  if (!*a2) {
    return;
  }
  long long v28 = 0;
  long long v29 = 0;
  uint64_t v30 = 0;
  uint64_t v27 = *(void *)a2;
  if (!v27)
  {
    uint64_t v20 = 0;
    long long v25 = 0uLL;
    uint64_t v26 = 0;
    long long __p = 0;
    char v23 = 0;
    uint64_t v24 = 0;
    goto LABEL_18;
  }
  do
  {
    *(void *)&long long v25 = sub_F8C950(a3, (unsigned int *)&v27);
    *((void *)&v25 + 1) = v10;
    sub_3BFF8((char **)&v28, &v25);
    uint64_t v27 = v25;
  }
  while (v25);
  std::string::size_type v11 = (unint64_t *)v28;
  uint64_t v12 = v29;
  long long v25 = 0uLL;
  uint64_t v26 = 0;
  long long __p = 0;
  char v23 = 0;
  uint64_t v24 = 0;
  if (v28 == v29)
  {
    uint64_t v20 = 0;
    goto LABEL_18;
  }
  while (1)
  {
    if (!*((_DWORD *)v11 + 2))
    {
      if (*(_DWORD *)v11) {
        unsigned int v19 = v11;
      }
      else {
        unsigned int v19 = a4;
      }
      sub_EDA198((unsigned __int8 *)(*a1 + 8), *v19, 1, (uint64_t)&v25);
      sub_EB258C(a5, (long long *)(v25 + 104 * *((unsigned int *)v11 + 3)));
      goto LABEL_6;
    }
    uint64_t v13 = *a1;
    unint64_t v14 = *v11;
    long long v15 = (unsigned int *)a1[371];
    int v21 = 0x7FFFFFFF;
    sub_FA7290((void **)(v13 + 200), v14, (_DWORD *)v11 + 2, 1u, v15, &v21, 0, (uint64_t)&__p);
    uint64_t v16 = *a1;
    BOOL v17 = (char *)__p + 40 * *((unsigned int *)v11 + 3);
    uint64_t v18 = (unsigned int *)a1[371];
    int v21 = 0x7FFFFFFF;
    sub_FBF950((uint64_t **)(v16 + 296), v17, v18, &v21, 0, &v25);
    if ((void)v25 == *((void *)&v25 + 1)) {
      break;
    }
    sub_EB39C0(a5, (long long **)&v25);
LABEL_6:
    v11 += 2;
    if (v11 == v12) {
      goto LABEL_17;
    }
  }
  sub_EB1BF8(a5);
LABEL_17:
  uint64_t v20 = __p;
LABEL_18:
  if (v20)
  {
    char v23 = v20;
    operator delete(v20);
  }
  if ((void)v25)
  {
    *((void *)&v25 + 1) = v25;
    operator delete((void *)v25);
  }
  if (v28)
  {
    long long v29 = (unint64_t *)v28;
    operator delete(v28);
  }
}

void sub_F8A4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
  {
    operator delete(__p);
    int v21 = a14;
    if (!a14)
    {
LABEL_3:
      uint64_t v22 = a18;
      if (!a18) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int v21 = a14;
    if (!a14) {
      goto LABEL_3;
    }
  }
  operator delete(v21);
  uint64_t v22 = a18;
  if (!a18)
  {
LABEL_4:
    sub_4451C0(v19);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v22);
  sub_4451C0(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_F8A548(uint64_t *a1, long long **a2)
{
  if (*(void *)(*a1 + 24))
  {
    long long v4 = *a2;
    uint64_t v3 = a2[1];
    if (v3 != *a2)
    {
      while (1)
      {
        if (!sub_EB2EC4(a1[1]))
        {
          uint64_t v5 = *a1;
          uint64_t v6 = *((void *)v3 - 7);
          unsigned int v7 = HIDWORD(v6) & 0x40000000;
          if (v6 < 0 && v7 == 0) {
            int v9 = 0x40000000;
          }
          else {
            int v9 = 0;
          }
          unint64_t v20 = *((void *)v3 - 7) | ((HIDWORD(v6) & 0xFFFFFFF | (*((_DWORD *)v3 - 2) >> 28 << 31) | ((unint64_t)v6 >> 33) & 0x10000000 | (v7 >> 1) | v9) << 32);
          uint64_t v10 = *(void *)(v5 + 24);
          if (!v10) {
            goto LABEL_30;
          }
          if ((*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)v10 + 48))(v10, &v20)) {
            return 1;
          }
        }
        uint64_t v3 = (long long *)((char *)v3 - 104);
        sub_EB258C(a1[1], v3);
        if (v3 == v4) {
          return 0;
        }
      }
    }
    return 0;
  }
  uint64_t v12 = *a2;
  uint64_t v13 = a2[1];
  if (*a2 == v13) {
    return 0;
  }
  while (1)
  {
    if (*(void *)(*a1 + 24) && !sub_EB2EC4(a1[1]))
    {
      uint64_t v14 = *a1;
      uint64_t v15 = *((void *)v12 + 6);
      unsigned int v16 = HIDWORD(v15) & 0x40000000;
      if (v15 < 0 && v16 == 0) {
        int v18 = 0x40000000;
      }
      else {
        int v18 = 0;
      }
      unint64_t v20 = *((void *)v12 + 6) | ((HIDWORD(v15) & 0xFFFFFFF | (*((_DWORD *)v12 + 24) >> 28 << 31) | ((unint64_t)v15 >> 33) & 0x10000000 | (v16 >> 1) | v18) << 32);
      uint64_t v19 = *(void *)(v14 + 24);
      if (!v19) {
LABEL_30:
      }
        sub_29F82C();
      if ((*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)v19 + 48))(v19, &v20)) {
        break;
      }
    }
    sub_EB258C(a1[1], v12);
    uint64_t v12 = (long long *)((char *)v12 + 104);
    if (v12 == v13) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_F8A730(uint64_t a1, unsigned int *a2)
{
  sub_F9E678(a1 + 1200, a2, v3);
  return v3[0] != 0;
}

unint64_t sub_F8A764(uint64_t a1)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 1976) - *(void *)(a1 + 1968)) >> 4);
}

uint64_t sub_F8A784(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 960) - *(void *)(a1 + 952)) >> 3;
}

uint64_t sub_F8A798(uint64_t a1)
{
  return *(void *)(a1 + 3928);
}

uint64_t sub_F8A7A0(uint64_t a1)
{
  return *(void *)(a1 + 3936);
}

void sub_F8A7A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = xmmword_20B8E30;
  *(void *)(a2 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  long long v4 = *(char **)(a1 + 2080);
  uint64_t v5 = *(unsigned int **)(a1 + 2088);
  if (*v4 > -2)
  {
    uint64_t v6 = *(void **)(a1 + 2080);
    uint64_t v17 = *(void *)(a1 + 2104);
    unsigned int v8 = &v4[v17];
    if (v4 != &v4[v17])
    {
LABEL_5:
      int v9 = (char **)(a1 + 2080);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v6 = *(void **)(a1 + 2080);
    do
    {
      unint64_t v7 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      uint64_t v6 = (void *)((char *)v6 + v7);
      v5 += 3 * v7;
    }
    while (*(char *)v6 < -1);
    unsigned int v8 = &v4[*(void *)(a1 + 2104)];
    if (v6 != (void *)v8) {
      goto LABEL_5;
    }
  }
  int v9 = (char **)(a1 + 2128);
  uint64_t v18 = 1;
  uint64_t v19 = a1 + 2080;
  while (1)
  {
    uint64_t v5 = *(unsigned int **)(v19 + 56);
    uint64_t v6 = *v9;
    if (**v9 <= -2)
    {
      do
      {
        unint64_t v20 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        uint64_t v6 = (void *)((char *)v6 + v20);
        v5 += 3 * v20;
      }
      while (*(char *)v6 < -1);
    }
    unsigned int v8 = &(*v9)[*(void *)(v19 + 72)];
    if (v6 != (void *)v8) {
      break;
    }
    uint64_t v19 = a1 + 2080 + 48 * v18++;
    int v9 = (char **)(v19 + 48);
    if (v18 == 16) {
      goto LABEL_26;
    }
  }
LABEL_6:
  uint64_t v10 = (char **)(a1 + 2848);
  do
  {
    while (1)
    {
      sub_F92FD4(**(void **)(a1 + 8), v5, (uint64_t)&__p);
      sub_33998(a2, (uint64_t)&__p);
      int v11 = *((char *)v6 + 1);
      uint64_t v6 = (void *)((char *)v6 + 1);
      v5 += 3;
      if (v11 <= -2)
      {
        do
        {
          unint64_t v12 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          uint64_t v6 = (void *)((char *)v6 + v12);
          v5 += 3 * v12;
        }
        while (*(char *)v6 < -1);
      }
      if (v6 == (void *)v8) {
        break;
      }
      if (!v9) {
        goto LABEL_26;
      }
    }
    uint64_t v13 = v9 + 6;
    if (v9 + 6 == v10) {
      break;
    }
    while (1)
    {
      uint64_t v14 = v13;
      uint64_t v15 = v9[6];
      uint64_t v5 = (unsigned int *)v9[7];
      uint64_t v6 = v15;
      if (*v15 <= -2)
      {
        do
        {
          unint64_t v16 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          uint64_t v6 = (void *)((char *)v6 + v16);
          v5 += 3 * v16;
        }
        while (*(char *)v6 < -1);
      }
      unsigned int v8 = &v9[9][(void)v15];
      if (v6 != (void *)v8) {
        break;
      }
      uint64_t v13 = v14 + 6;
      int v9 = v14;
      if (v14 + 6 == v10) {
        goto LABEL_26;
      }
    }
    int v9 = v14;
  }
  while (v14);
LABEL_26:
  if (!sub_344C4((_DWORD *)a2))
  {
    long long __p = 0;
    long long v31 = 0;
    uint64_t v32 = 0;
    int v21 = *(unsigned int **)(a1 + 1992);
    uint64_t v22 = *(unsigned int **)(a1 + 2000);
    if (v21 != v22)
    {
      do
      {
        char v23 = (unsigned int *)(*(void *)(a1 + 1968) + 80 * *v21);
        uint64_t v24 = *(uint64_t **)(a1 + 8);
        v28[0] = 1;
        unint64_t v25 = sub_F968AC(*v24, *v23 | ((unint64_t)(v23[1] & 0xFFFFFFF) << 32), (v23[1] >> 28) & 1, v28);
        unint64_t v29 = v25;
        if (v25) {
          BOOL v26 = HIDWORD(v25) == -1;
        }
        else {
          BOOL v26 = 1;
        }
        if (!v26)
        {
          uint64_t v27 = __p;
          if (__p != v31)
          {
            while (*v27 != v25)
            {
              if (++v27 == v31) {
                goto LABEL_39;
              }
            }
          }
          if (v27 == v31)
          {
LABEL_39:
            sub_F92FD4(**(void **)(a1 + 8), (unsigned int *)&v29, (uint64_t)v28);
            sub_33998(a2, (uint64_t)v28);
            sub_29603C(&__p, &v29);
          }
        }
        ++v21;
      }
      while (v21 != v22);
      if (__p)
      {
        long long v31 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_F8AB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F8AB5C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = a1 + 1200;
  sub_F9E678(a1 + 1200, (unsigned int *)&v7, v8);
  if (!v8[0]) {
    return 0;
  }
  sub_F9E678(v3, (unsigned int *)&v7, v8);
  unsigned int v4 = *(_DWORD *)(v8[3] + 8);
  uint64_t v5 = *(void *)(a1 + 1968);
  if ((*(_DWORD *)(v5 + 80 * v4 + 72) & 0x80000000) != 0) {
    return 0;
  }
  else {
    return *(void *)(v5 + 80 * v4 + 24);
  }
}

unint64_t sub_F8ABF0(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a2;
  uint64_t v3 = a1 + 1200;
  sub_F9E678(a1 + 1200, (unsigned int *)&v12, v13);
  if (!v13[0]) {
    return 0;
  }
  sub_F9E678(v3, (unsigned int *)&v12, v13);
  unsigned int v4 = *(_DWORD *)(v13[3] + 8);
  uint64_t v5 = *(void *)(a1 + 1968);
  if (*(_DWORD *)(v5 + 80 * v4 + 68))
  {
    sub_FBF950((uint64_t **)(*(void *)a1 + 296), (_OWORD *)(v5 + 80 * v4 + 24), *(unsigned int **)(a1 + 2968), (int *)(v5 + 80 * v4 + 16), *(unsigned char *)(v5 + 80 * v4 + 20), (void *)(a1 + 2976));
    uint64_t v6 = *(void *)(*(void *)(a1 + 2984) - 104);
    unsigned int v7 = HIDWORD(v6) & 0x40000000;
    if (v6 < 0 && v7 == 0) {
      int v9 = 0x40000000;
    }
    else {
      int v9 = 0;
    }
    return *(void *)(*(void *)(a1 + 2984) - 104) | ((HIDWORD(v6) & 0x6FFFFFFF | ((unint64_t)((v9 | (v7 >> 1)) == 0x40000000) << 31)) << 32);
  }
  else
  {
    unint64_t v11 = *(void *)(v5 + 80 * v4 + 24);
    return v11 | (((v11 >> 31) & 0x60000000 | HIDWORD(v11) & 0xFFFFFFF | ((unint64_t)((v11 & 0x6000000000000000) == 0x4000000000000000) << 31)) << 32);
  }
}

unint64_t sub_F8AD28(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 928);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 936) - v2) >> 3) <= a2 || (*(unsigned char *)(v2 + 24 * a2 + 23) & 0x40) != 0) {
    return 0;
  }
  else {
    return sub_F8ABF0(a1, *(void *)(v2 + 24 * a2));
  }
}

uint64_t sub_F8ADA0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v3 = a1 + 1200;
  sub_F9E678(a1 + 1200, (unsigned int *)&v5, v6);
  if (!v6[0]) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  sub_F9E678(v3, (unsigned int *)&v5, v6);
  return *(void *)(*(void *)(a1 + 1968) + 80 * *(unsigned int *)(v6[3] + 8) + 8);
}

unint64_t sub_F8AE24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = a3;
  uint64_t v17 = a2;
  uint64_t v4 = a1 + 1200;
  sub_F9E678(a1 + 1200, (unsigned int *)&v17, v18);
  unsigned int v5 = v18[0];
  if (v18[0] && (sub_F9E678(v4, (unsigned int *)&v16, v18), unsigned int v5 = v18[0], v18[0]))
  {
    uint64_t v14 = v16;
    uint64_t v15 = v17;
    sub_F9E678(v4, (unsigned int *)&v15, v18);
    unsigned int v6 = *(_DWORD *)(v19 + 8);
    uint64_t v7 = *(void *)(a1 + 1968);
    sub_F9E678(v4, (unsigned int *)&v14, v18);
    unsigned int v8 = v15;
    if (v15)
    {
      uint64_t v9 = *(void *)(a1 + 1968) + 80 * *(unsigned int *)(v19 + 8) + 8;
      uint64_t v10 = v7 + 80 * v6 + 8;
      while (v14)
      {
        if (__PAIR64__(HIDWORD(v15), v8) == v14)
        {
          unsigned int v5 = v15;
          unint64_t v11 = v15 & 0xFFFFFFFF00000000;
          return v11 & 0xFFFFFFFF00000000 | v5;
        }
        if (*(_DWORD *)v9 < *(_DWORD *)v10
          || (*(_DWORD *)v10 >= *(_DWORD *)v9 ? (BOOL v12 = *(_DWORD *)(v9 + 4) < *(_DWORD *)(v10 + 4)) : (BOOL v12 = 0), v12))
        {
          if ((*(_DWORD *)(v10 + 64) & 0x80000000) != 0) {
            break;
          }
          uint64_t v15 = *(void *)(v10 + 16);
          if (v15)
          {
            sub_F9E678(v4, (unsigned int *)&v15, v18);
            uint64_t v10 = *(void *)(a1 + 1968) + 80 * *(unsigned int *)(v19 + 8) + 8;
          }
        }
        else if ((*(_DWORD *)(v9 + 64) & 0x80000000) != 0)
        {
          uint64_t v14 = 0;
        }
        else
        {
          uint64_t v14 = *(void *)(v9 + 16);
          if (v14)
          {
            sub_F9E678(v4, (unsigned int *)&v14, v18);
            uint64_t v9 = *(void *)(a1 + 1968) + 80 * *(unsigned int *)(v19 + 8) + 8;
          }
        }
        unsigned int v8 = v15;
        if (!v15) {
          break;
        }
      }
    }
    unint64_t v11 = 0;
    unsigned int v5 = 0;
  }
  else
  {
    unint64_t v11 = 0;
  }
  return v11 & 0xFFFFFFFF00000000 | v5;
}