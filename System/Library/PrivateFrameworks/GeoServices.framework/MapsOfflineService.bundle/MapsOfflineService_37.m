void sub_FF1890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_FF18D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a2 + 132;
  __n128 result = *(__n128 *)a4;
  long long v5 = *(_OWORD *)(a4 + 16);
  *(void *)(a1 + 80) = *(void *)(a4 + 32);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

char *sub_FF18F8(char *result, int a2, char a3, void *a4)
{
  int v5 = a2;
  char v4 = a3;
  if (*a4 != a4[1]) {
    return sub_FF1934((char **)result, &v5, &v4, (uint64_t)a4);
  }
  return result;
}

char *sub_FF1934(char **a1, _DWORD *a2, char *a3, uint64_t a4)
{
  v9 = a1[1];
  unint64_t v8 = (unint64_t)a1[2];
  if ((unint64_t)v9 < v8)
  {
    char v10 = *a3;
    *(_DWORD *)v9 = *a2;
    v9[4] = v10;
    *((void *)v9 + 1) = a4;
    v11 = v9 + 16;
    goto LABEL_13;
  }
  v12 = *a1;
  uint64_t v13 = (v9 - *a1) >> 4;
  unint64_t v14 = v13 + 1;
  if ((unint64_t)(v13 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v15 = v8 - (void)v12;
  if (v15 >> 3 > v14) {
    unint64_t v14 = v15 >> 3;
  }
  BOOL v16 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
  if (!v16) {
    unint64_t v17 = v14;
  }
  if (v17 >> 60) {
    sub_188D718();
  }
  uint64_t v18 = 16 * v17;
  v19 = (char *)operator new(16 * v17);
  v20 = &v19[16 * v13];
  char v21 = *a3;
  v22 = &v19[v18];
  *(_DWORD *)v20 = *a2;
  v20[4] = v21;
  *((void *)v20 + 1) = a4;
  v11 = v20 + 16;
  if (v9 == v12)
  {
    *a1 = v20;
    a1[1] = v11;
    a1[2] = v22;
    if (!v12) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  do
  {
    v23 = v20 - 16;
    *((_OWORD *)v20 - 1) = *((_OWORD *)v9 - 1);
    v9 -= 16;
    v20 -= 16;
  }
  while (v9 != v12);
  *a1 = v23;
  a1[1] = v11;
  a1[2] = v22;
  if (v12) {
LABEL_12:
  }
    operator delete(v12);
LABEL_13:
  a1[1] = v11;
  return v11 - 16;
}

uint64_t sub_FF1A70(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 0;
  }
  unint64_t v3 = v1 - v2 - 16;
  if (v3 >= 0x10)
  {
    int v7 = 0;
    int v8 = 0;
    uint64_t v9 = (v3 >> 4) + 1;
    uint64_t v5 = v2 + 16 * (v9 & 0x1FFFFFFFFFFFFFFELL);
    char v10 = (void **)(v2 + 24);
    uint64_t v11 = v9 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v12 = *(v10 - 2);
      uint64_t v13 = *v10;
      v10 += 4;
      v7 -= 1227133513 * ((v12[1] - *v12) >> 3);
      v8 -= 1227133513 * ((v13[1] - *v13) >> 3);
      v11 -= 2;
    }
    while (v11);
    unsigned int v4 = v8 + v7;
    if (v9 == (v9 & 0x1FFFFFFFFFFFFFFELL)) {
      return v4;
    }
  }
  else
  {
    unsigned int v4 = 0;
    uint64_t v5 = *a1;
  }
  do
  {
    v4 -= 1227133513 * ((*(void *)(*(void *)(v5 + 8) + 8) - **(void **)(v5 + 8)) >> 3);
    v5 += 16;
  }
  while (v5 != v1);
  return v4;
}

void sub_FF1B34(uint64_t *a1@<X0>, char **a2@<X8>)
{
  if (*a1 == a1[1])
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  uint64_t v4 = nullsub_1(a1[4]);
  uint64_t v117 = sub_40A454(v4);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v113 = a2;
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    char v10 = 0;
    uint64_t v11 = 0;
    goto LABEL_84;
  }
  unint64_t v7 = v5 - v6 - 16;
  if (v7 >= 0x10)
  {
    int v12 = 0;
    int v13 = 0;
    uint64_t v14 = (v7 >> 4) + 1;
    uint64_t v9 = v6 + 16 * (v14 & 0x1FFFFFFFFFFFFFFELL);
    uint64_t v15 = (void **)(v6 + 24);
    uint64_t v16 = v14 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      unint64_t v17 = *(v15 - 2);
      uint64_t v18 = *v15;
      v15 += 4;
      v12 -= 1227133513 * ((v17[1] - *v17) >> 3);
      v13 -= 1227133513 * ((v18[1] - *v18) >> 3);
      v16 -= 2;
    }
    while (v16);
    unsigned int v8 = v13 + v12;
    if (v14 == (v14 & 0x1FFFFFFFFFFFFFFELL)) {
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v8 = 0;
    uint64_t v9 = *a1;
  }
  do
  {
    v8 -= 1227133513 * ((*(void *)(*(void *)(v9 + 8) + 8) - **(void **)(v9 + 8)) >> 3);
    v9 += 16;
  }
  while (v9 != v5);
LABEL_11:
  if (v8)
  {
    unsigned int v19 = v8;
    v20 = (char *)operator new(80 * v8);
    *v113 = v20;
    v113[1] = v20;
    v113[2] = &v20[80 * v19];
  }
  uint64_t v106 = v5;
  do
  {
    int v21 = *((_DWORD *)a1 + 12);
    if (*(unsigned char *)(v6 + 4))
    {
      int v107 = 0x7FFFFFFF;
      int v109 = 2;
    }
    else
    {
      int v109 = 3;
      int v107 = *((_DWORD *)a1 + 12);
    }
    if (v21 >= *(_DWORD *)(a1[5] + 4)) {
      int v21 = *(_DWORD *)(a1[5] + 4);
    }
    int v108 = v21;
    __p = 0;
    v115 = 0;
    uint64_t v116 = 0;
    int v22 = *((_DWORD *)a1 + 15);
    if (v22 != 0x7FFFFFFF)
    {
      LODWORD(v118[0]) = -v22;
      unint64_t v23 = sub_40A680((int *)v118, &v117);
      v25 = *(int ***)(v6 + 8);
      v26 = *v25;
      v111 = v25[1];
      if (*v25 != v111)
      {
        v27 = (void *)v23;
        int v28 = v24;
        v29 = v115;
        do
        {
          v123 = v27;
          int v124 = v28;
          if (sub_40A820(&v123))
          {
            int v30 = *v26;
            v31 = (void *)*((void *)v26 + 1);
            int v32 = v26[4];
            v121 = v27;
            int v122 = v28;
            v123 = (void *)sub_40AAA0(v26 + 5, (signed int *)&v121);
            int v124 = v33;
            int v34 = v26[8];
            if (sub_40A820(&v123) && (int v35 = sub_3F88E0((uint64_t)v31), v35 >= (int)v123))
            {
              LODWORD(v118[0]) = v30;
              v118[1] = v31;
              LODWORD(v119[0]) = v32;
              *(void **)((char *)v119 + 4) = v123;
              HIDWORD(v119[1]) = v124;
            }
            else
            {
              uint64_t v120 = 0;
              *(_OWORD *)v118 = 0u;
              LODWORD(v118[0]) = 0x7FFFFFFF;
              int v34 = -1;
              *(void *)&long long v36 = 0x8000000080000000;
              *((void *)&v36 + 1) = 0x8000000080000000;
              *(_OWORD *)v119 = v36;
            }
            LODWORD(v120) = v34;
          }
          else
          {
            *(_OWORD *)v118 = 0u;
            LODWORD(v118[0]) = 0x7FFFFFFF;
            *(void *)&long long v37 = 0x8000000080000000;
            *((void *)&v37 + 1) = 0x8000000080000000;
            *(_OWORD *)v119 = v37;
            uint64_t v120 = 0xFFFFFFFFLL;
          }
          v29 = (__n128 *)((char *)sub_FF25C4((char **)&__p, v29, (__n128 *)v118) + 40);
          v26 += 14;
        }
        while (v26 != v111);
      }
    }
    uint64_t v110 = -1227133513 * ((*(void *)(*(void *)(v6 + 8) + 8) - **(void **)(v6 + 8)) >> 3);
    if (v110)
    {
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v112 = v6;
      do
      {
        uint64_t v44 = **(void **)(v6 + 8);
        uint64_t v45 = v44 + 56 * v39;
        if (*((unsigned char *)a1 + 80) && *(_DWORD *)(v45 + 32) == -1) {
          goto LABEL_35;
        }
        if (__p != v115 && *(_DWORD *)(v45 + 32) != -1)
        {
          unsigned int v46 = 0;
          uint64_t v47 = a1[3];
          uint64_t v48 = *(unsigned int *)(v44 + 56 * v39 + 36);
          uint64_t v49 = v44 + 56 * v39;
          while (v48 != 0xFFFFFFFFLL)
          {
            uint64_t v49 = *(void *)(*(void *)(v47 + 72) + 32 * v48) + 56 * *(unsigned int *)(v49 + 40);
            uint64_t v50 = *(unsigned int *)(v49 + 36);
            if (v50 == v48) {
              ++v46;
            }
            uint64_t v48 = *(unsigned int *)(v49 + 36);
            if (v50 == -1)
            {
              if (*(void *)(v49 + 8) != v47 + 104) {
                ++v46;
              }
              break;
            }
          }
          if (v39 && v46 >= *((_DWORD *)a1 + 16))
          {
            uint64_t v51 = 0;
            while ((sub_FECC4C((unsigned int *)((char *)__p + v51), (unsigned int *)__p + 10 * v39, (int *)a1[5]) & 1) == 0)
            {
              v51 += 40;
              if (v38 == v51) {
                goto LABEL_52;
              }
            }
            goto LABEL_35;
          }
        }
LABEL_52:
        if (*(_DWORD *)(v45 + 32) == -1)
        {
          if (*(void *)(v45 + 8) == a1[3] + 104) {
            char v52 = 3;
          }
          else {
            char v52 = 2;
          }
        }
        else
        {
          char v52 = 0;
        }
        unint64_t v53 = sub_FE5E64(a1[5], v45, v108, v107, 0x7FFFFFFF, v52, v109, &v117);
        unint64_t v54 = v53;
        int v56 = v55;
        uint64_t v6 = v112;
        if (*(unsigned char *)(v112 + 4))
        {
          v57 = v113;
          v59 = v113[1];
          unint64_t v58 = (unint64_t)v113[2];
          if ((unint64_t)v59 >= v58) {
            goto LABEL_69;
          }
          goto LABEL_33;
        }
        double v60 = *((double *)a1 + 9);
        double v61 = v60 * (double)(int)sub_FE5CFC(a1[5], SHIDWORD(v53), v109);
        if (v61 >= 0.0)
        {
          if (v61 >= 4.50359963e15) {
            goto LABEL_68;
          }
          uint64_t v62 = (uint64_t)(v61 + v61) + 1;
        }
        else
        {
          if (v61 <= -4.50359963e15) {
            goto LABEL_68;
          }
          uint64_t v62 = (uint64_t)(v61 + v61);
          if (v62 >= 1) {
            --v62;
          }
        }
        double v61 = (double)(v62 >> 1);
LABEL_68:
        v56 += (int)v61;
        v57 = v113;
        v59 = v113[1];
        unint64_t v58 = (unint64_t)v113[2];
        if ((unint64_t)v59 >= v58)
        {
LABEL_69:
          v63 = *v57;
          unint64_t v64 = 0xCCCCCCCCCCCCCCCDLL * ((v59 - *v57) >> 4);
          unint64_t v65 = v64 + 1;
          if (v64 + 1 > 0x333333333333333) {
            sub_2E00();
          }
          unint64_t v66 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v58 - (void)v63) >> 4);
          if (2 * v66 > v65) {
            unint64_t v65 = 2 * v66;
          }
          if (v66 >= 0x199999999999999) {
            unint64_t v67 = 0x333333333333333;
          }
          else {
            unint64_t v67 = v65;
          }
          if (v67 > 0x333333333333333) {
            sub_188D718();
          }
          v68 = (char *)operator new(80 * v67);
          v69 = &v68[80 * v64];
          uint64_t v6 = v112;
          *(_DWORD *)v69 = *(_DWORD *)v112;
          long long v70 = *(_OWORD *)v45;
          long long v71 = *(_OWORD *)(v45 + 16);
          uint64_t v72 = *(void *)(v45 + 48);
          *(_OWORD *)(v69 + 40) = *(_OWORD *)(v45 + 32);
          *(_OWORD *)(v69 + 24) = v71;
          *(_OWORD *)(v69 + 8) = v70;
          *((void *)v69 + 7) = v72;
          *((void *)v69 + 8) = v54;
          *((_DWORD *)v69 + 18) = v56;
          v73 = v69;
          if (v59 != v63)
          {
            do
            {
              *((_OWORD *)v73 - 5) = *((_OWORD *)v59 - 5);
              long long v74 = *((_OWORD *)v59 - 4);
              long long v75 = *((_OWORD *)v59 - 3);
              long long v76 = *((_OWORD *)v59 - 2);
              *(_OWORD *)(v73 - 20) = *(_OWORD *)(v59 - 20);
              *((_OWORD *)v73 - 3) = v75;
              *((_OWORD *)v73 - 2) = v76;
              *((_OWORD *)v73 - 4) = v74;
              v73 -= 80;
              v59 -= 80;
            }
            while (v59 != v63);
            v59 = v63;
          }
          v77 = &v68[80 * v67];
          v43 = v69 + 80;
          *v113 = v73;
          v113[1] = v69 + 80;
          v113[2] = v77;
          if (v59) {
            operator delete(v59);
          }
          goto LABEL_34;
        }
LABEL_33:
        *(_DWORD *)v59 = *(_DWORD *)v112;
        long long v40 = *(_OWORD *)v45;
        long long v41 = *(_OWORD *)(v45 + 16);
        uint64_t v42 = *(void *)(v45 + 48);
        *(_OWORD *)(v59 + 40) = *(_OWORD *)(v45 + 32);
        *(_OWORD *)(v59 + 24) = v41;
        *(_OWORD *)(v59 + 8) = v40;
        *((void *)v59 + 7) = v42;
        *((void *)v59 + 8) = v54;
        *((_DWORD *)v59 + 18) = v56;
        v43 = v59 + 80;
LABEL_34:
        v113[1] = v43;
LABEL_35:
        ++v39;
        v38 += 40;
      }
      while (v39 != v110);
    }
    if (__p)
    {
      v115 = (__n128 *)__p;
      operator delete(__p);
    }
    v6 += 16;
  }
  while (v6 != v106);
  uint64_t v11 = (uint64_t)*v113;
  char v10 = v113[1];
LABEL_84:
  if ((uint64_t)&v10[-v11] < 10241)
  {
    v79 = 0;
LABEL_90:
    unint64_t v78 = 0;
  }
  else
  {
    unint64_t v78 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v10[-v11] >> 4);
    while (1)
    {
      v79 = operator new(80 * v78, &std::nothrow);
      if (v79) {
        break;
      }
      BOOL v80 = v78 > 1;
      v78 >>= 1;
      if (!v80) {
        goto LABEL_90;
      }
    }
  }
  sub_FF2A18(v11, v10, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v10[-v11] >> 4), v79, v78);
  if (v79) {
    operator delete(v79);
  }
  unint64_t v81 = *((unsigned int *)a1 + 13);
  if (v81)
  {
    v82 = *v113;
    v83 = v113[1];
    if (0xCCCCCCCCCCCCCCCDLL * ((v83 - *v113) >> 4) > v81)
    {
      unsigned int v84 = *((_DWORD *)a1 + 14);
      if (v81 >= v84) {
        unint64_t v85 = v84;
      }
      else {
        unint64_t v85 = v81;
      }
      uint64_t v86 = (uint64_t)&v82[80 * v81 + -80 * v85];
      *(_OWORD *)v118 = 0u;
      *(_OWORD *)v119 = 0u;
      LODWORD(v120) = 1065353216;
      if (v82 != (char *)v86)
      {
        uint64_t v87 = 80 * v81 - 80 * v85;
        v88 = (int *)(v82 + 40);
        do
        {
          int v89 = *v88;
          v88 += 20;
          LODWORD(__p) = v89;
          if (v89 != -1) {
            sub_FF3878((uint64_t)v118, (unsigned int *)&__p, &__p);
          }
          v87 -= 80;
        }
        while (v87);
        v83 = v113[1];
      }
      if ((char *)v86 == v83)
      {
        v98 = (char *)v86;
      }
      else
      {
        uint64_t v90 = v86;
        do
        {
          unint64_t v91 = *(unsigned int *)(v90 + 40);
          LODWORD(__p) = v91;
          if (v91 == -1) {
            goto LABEL_106;
          }
          if (v118[1])
          {
            uint8x8_t v92 = (uint8x8_t)vcnt_s8((int8x8_t)v118[1]);
            v92.i16[0] = vaddlv_u8(v92);
            if (v92.u32[0] > 1uLL)
            {
              unint64_t v93 = v91;
              if (v118[1] <= (void *)v91) {
                unint64_t v93 = v91 % (unint64_t)v118[1];
              }
            }
            else
            {
              unint64_t v93 = (LODWORD(v118[1]) - 1) & v91;
            }
            v94 = (uint64_t **)*((void *)v118[0] + v93);
            if (v94)
            {
              v95 = *v94;
              if (v95)
              {
                if (v92.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    unint64_t v97 = v95[1];
                    if (v97 == v91)
                    {
                      if (*((_DWORD *)v95 + 4) == v91) {
                        goto LABEL_106;
                      }
                    }
                    else if ((v97 & ((unint64_t)v118[1] - 1)) != v93)
                    {
                      goto LABEL_129;
                    }
                    v95 = (uint64_t *)*v95;
                    if (!v95) {
                      goto LABEL_129;
                    }
                  }
                }
                do
                {
                  unint64_t v96 = v95[1];
                  if (v96 == v91)
                  {
                    if (*((_DWORD *)v95 + 4) == v91) {
                      goto LABEL_106;
                    }
                  }
                  else
                  {
                    if ((void *)v96 >= v118[1]) {
                      v96 %= (unint64_t)v118[1];
                    }
                    if (v96 != v93) {
                      break;
                    }
                  }
                  v95 = (uint64_t *)*v95;
                }
                while (v95);
              }
            }
          }
LABEL_129:
          if (v119[1] >= (void *)v85) {
LABEL_106:
          }
            *(_DWORD *)(v90 + 72) += 864000;
          else {
            sub_FF3878((uint64_t)v118, (unsigned int *)&__p, &__p);
          }
          v90 += 80;
        }
        while ((char *)v90 != v83);
        v98 = v113[1];
      }
      if ((uint64_t)&v98[-v86] < 10241)
      {
        v100 = 0;
LABEL_139:
        unint64_t v99 = 0;
      }
      else
      {
        unint64_t v99 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v98[-v86] >> 4);
        while (1)
        {
          v100 = operator new(80 * v99, &std::nothrow);
          if (v100) {
            break;
          }
          BOOL v80 = v99 > 1;
          v99 >>= 1;
          if (!v80) {
            goto LABEL_139;
          }
        }
      }
      sub_FF3B7C(v86, v98, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v98[-v86] >> 4), v100, v99);
      if (v100) {
        operator delete(v100);
      }
      unint64_t v101 = *((unsigned int *)a1 + 13);
      unint64_t v102 = 0xCCCCCCCCCCCCCCCDLL * ((v113[1] - *v113) >> 4);
      if (v101 <= v102)
      {
        if (v101 < v102) {
          v113[1] = &(*v113)[80 * v101];
        }
      }
      else
      {
        sub_FF4248((void **)v113, v101 - v102);
      }
      v103 = v119[0];
      if (v119[0])
      {
        do
        {
          v104 = (void *)*v103;
          operator delete(v103);
          v103 = v104;
        }
        while (v104);
      }
      v105 = v118[0];
      v118[0] = 0;
      if (v105) {
        operator delete(v105);
      }
    }
  }
}

void sub_FF253C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_12168((uint64_t)va);
  uint64_t v14 = *(void **)a9;
  if (*(void *)a9)
  {
    *(void *)(a9 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

__n128 *sub_FF25C4(char **a1, __n128 *__src, __n128 *a3)
{
  uint64_t v4 = __src;
  uint64_t v6 = (__n128 *)a1[1];
  unint64_t v7 = (unint64_t)a1[2];
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v15 = (__n128 *)*a1;
    unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v6 - *a1) >> 3) + 1;
    if (v16 > 0x666666666666666) {
      sub_2E00();
    }
    unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (void)v15) >> 3);
    if (2 * v17 > v16) {
      unint64_t v16 = 2 * v17;
    }
    if (v17 >= 0x333333333333333) {
      unint64_t v18 = 0x666666666666666;
    }
    else {
      unint64_t v18 = v16;
    }
    uint64_t v39 = a1 + 2;
    if (v18)
    {
      if (v18 > 0x666666666666666) {
        sub_188D718();
      }
      unsigned int v19 = (__n128 *)operator new(40 * v18);
    }
    else
    {
      unsigned int v19 = 0;
    }
    int v35 = v19;
    long long v36 = &v19->n128_i8[8 * (((char *)v4 - (char *)v15) >> 3)];
    __dst = v36;
    uint64_t v38 = (char *)v19 + 40 * v18;
    sub_FF2890((uint64_t)&v35, a3);
    int v22 = v36;
    unint64_t v23 = (__n128 *)*a1;
    int v24 = v36;
    if (*a1 != (char *)v4)
    {
      v25 = v4;
      v26 = v36;
      do
      {
        long long v27 = *(long long *)((char *)&v25[-3] + 8);
        long long v28 = *(long long *)((char *)&v25[-2] + 8);
        int v24 = v26 - 40;
        *((_DWORD *)v26 - 2) = v25[-1].n128_u32[2];
        *(_OWORD *)(v26 - 24) = v28;
        *(_OWORD *)(v26 - 40) = v27;
        v25 = (__n128 *)((char *)v25 - 40);
        v26 -= 40;
      }
      while (v25 != v23);
    }
    long long v36 = v24;
    v29 = (__n128 *)a1[1];
    int v30 = (char *)__dst;
    int64_t v31 = (char *)v29 - (char *)v4;
    if (v29 != v4)
    {
      memmove(__dst, v4, v31 - 4);
      int v24 = v36;
      uint64_t v4 = (__n128 *)a1[1];
    }
    int v32 = (__n128 *)*a1;
    *a1 = v24;
    a1[1] = &v30[v31];
    int v33 = a1[2];
    a1[2] = v38;
    __dst = v4;
    uint64_t v38 = v33;
    int v35 = v32;
    long long v36 = (char *)v32;
    if (v4 != v32) {
      __dst = (char *)v32 + ((char *)v4 - (char *)v32 - 40) % 0x28uLL;
    }
    if (v32) {
      operator delete(v32);
    }
    return (__n128 *)v22;
  }
  else if (__src == v6)
  {
    __n128 v20 = *a3;
    __n128 v21 = a3[1];
    __src[2].n128_u64[0] = a3[2].n128_u64[0];
    *__src = v20;
    __src[1] = v21;
    a1[1] = &__src[2].n128_i8[8];
  }
  else
  {
    unsigned int v8 = (__n128 *)((char *)__src + 40);
    uint64_t v9 = &v6[-3].n128_i8[8];
    char v10 = a1[1];
    if ((unint64_t)v6 >= 0x28)
    {
      do
      {
        long long v11 = *(_OWORD *)v9;
        long long v12 = *((_OWORD *)v9 + 1);
        *((void *)v10 + 4) = *((void *)v9 + 4);
        *(_OWORD *)char v10 = v11;
        *((_OWORD *)v10 + 1) = v12;
        v9 += 40;
        v10 += 40;
      }
      while (v9 < (char *)v6);
    }
    a1[1] = v10;
    if (v6 != v8) {
      memmove(v8, __src, (char *)v6 - (char *)v8 - 4);
    }
    __n128 v13 = *a3;
    __n128 v14 = a3[1];
    v4[2].n128_u32[0] = a3[2].n128_u32[0];
    *uint64_t v4 = v13;
    v4[1] = v14;
  }
  return v4;
}

void sub_FF2834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    __n128 v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    __n128 v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

__n128 sub_FF2890(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    uint64_t v6 = *(__n128 **)a1;
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 <= *(void *)a1)
    {
      unint64_t v15 = 0x999999999999999ALL * (((char *)v4 - (char *)v6) >> 3);
      if (v4 == v6) {
        unint64_t v15 = 1;
      }
      if (v15 >= 0x666666666666667) {
        sub_188D718();
      }
      unint64_t v16 = v15 >> 2;
      uint64_t v17 = 40 * v15;
      unint64_t v18 = (char *)operator new(40 * v15);
      unsigned int v19 = (__n128 *)&v18[40 * v16];
      uint64_t v21 = (uint64_t)v4 - v5;
      BOOL v20 = v4 == (__n128 *)v5;
      uint64_t v4 = v19;
      if (!v20)
      {
        uint64_t v22 = v21 / 40;
        uint64_t v4 = (__n128 *)((char *)v19 + 40 * v22);
        uint64_t v23 = 40 * v22;
        int v24 = &v18[40 * v16];
        do
        {
          __n128 v25 = *(__n128 *)v5;
          long long v26 = *(_OWORD *)(v5 + 16);
          *((void *)v24 + 4) = *(void *)(v5 + 32);
          *(__n128 *)int v24 = v25;
          *((_OWORD *)v24 + 1) = v26;
          v24 += 40;
          v5 += 40;
          v23 -= 40;
        }
        while (v23);
      }
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v19;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v18[v17];
      if (v6)
      {
        operator delete(v6);
        uint64_t v4 = *(__n128 **)(a1 + 16);
      }
    }
    else
    {
      int64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *(void *)a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      uint64_t v11 = -40 * v9;
      unint64_t v12 = v5 + v11;
      __n128 v13 = (char *)v4 - v5;
      if (v4 != (__n128 *)v5)
      {
        memmove((void *)(v5 + v11), *(const void **)(a1 + 8), (size_t)(v13 - 4));
        uint64_t v4 = *(__n128 **)(a1 + 8);
      }
      __n128 v14 = (char *)v4 + 40 * v10;
      uint64_t v4 = (__n128 *)&v13[v12];
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = &v13[v12];
    }
  }
  __n128 result = *a2;
  __n128 v28 = a2[1];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  *uint64_t v4 = result;
  v4[1] = v28;
  *(void *)(a1 + 16) += 40;
  return result;
}

__n128 sub_FF2A18(uint64_t a1, char *a2, unint64_t a3, _OWORD *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = (_OWORD *)a1;
    if (a3 == 2)
    {
      if (sub_FE5CB8((_DWORD *)a2 - 4, (_DWORD *)(a1 + 64)))
      {
        long long v45 = v6[1];
        long long v47 = v6[2];
        *(_OWORD *)uint64_t v49 = v6[3];
        *(_OWORD *)&v49[16] = v6[4];
        __n128 v43 = *(__n128 *)v6;
        *uint64_t v6 = *((_OWORD *)a2 - 5);
        long long v8 = *((_OWORD *)a2 - 3);
        __n128 result = *((__n128 *)a2 - 2);
        long long v9 = *((_OWORD *)a2 - 4);
        *(_OWORD *)((char *)v6 + 60) = *(_OWORD *)(a2 - 20);
        v6[2] = v8;
        v6[3] = result;
        v6[1] = v9;
        *((__n128 *)a2 - 5) = v43;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v49[12];
        *((_OWORD *)a2 - 2) = *(_OWORD *)v49;
        *((_OWORD *)a2 - 3) = v47;
        result.n128_u64[0] = v45;
        *((_OWORD *)a2 - 4) = v45;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      int v24 = a4;
      unint64_t v25 = a3 >> 1;
      uint64_t v26 = a1 + 80 * (a3 >> 1);
      unint64_t v27 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_FF2D94(a1, v26, v27, a4);
        __n128 v28 = &v24[5 * v25];
        sub_FF2D94((uint64_t)&v6[5 * (a3 >> 1)], (uint64_t)a2, a3 - (a3 >> 1), v28);
        v29 = &v24[5 * a3];
        int v30 = v28;
        while (v30 != v29)
        {
          if (sub_FE5CB8((_DWORD *)v30 + 16, (_DWORD *)v24 + 16))
          {
            *uint64_t v6 = *v30;
            __n128 result = *((__n128 *)v30 + 1);
            long long v33 = v30[2];
            long long v34 = v30[3];
            *(_OWORD *)((char *)v6 + 60) = *(_OWORD *)((char *)v30 + 60);
            v6[2] = v33;
            v6[3] = v34;
            v6[1] = result;
            v30 += 5;
            v6 += 5;
            if (v24 == v28)
            {
LABEL_26:
              if (v30 != v29)
              {
                uint64_t v35 = 0;
                do
                {
                  long long v36 = &v6[v35];
                  *long long v36 = v30[v35];
                  __n128 result = (__n128)v30[v35 + 1];
                  long long v37 = v30[v35 + 2];
                  long long v38 = v30[v35 + 3];
                  *(_OWORD *)((char *)v36 + 60) = *(_OWORD *)((char *)&v30[v35 + 3] + 12);
                  v36[2] = v37;
                  v36[3] = v38;
                  v36[1] = result;
                  v35 += 5;
                }
                while (&v30[v35] != v29);
              }
              return result;
            }
          }
          else
          {
            *uint64_t v6 = *v24;
            __n128 result = *((__n128 *)v24 + 1);
            long long v31 = v24[2];
            long long v32 = v24[3];
            *(_OWORD *)((char *)v6 + 60) = *(_OWORD *)((char *)v24 + 60);
            v6[2] = v31;
            v6[3] = v32;
            v6[1] = result;
            v24 += 5;
            v6 += 5;
            if (v24 == v28) {
              goto LABEL_26;
            }
          }
        }
        if (v24 != v28)
        {
          uint64_t v39 = 0;
          do
          {
            long long v40 = &v6[v39];
            *long long v40 = v24[v39];
            __n128 result = (__n128)v24[v39 + 1];
            long long v41 = v24[v39 + 2];
            long long v42 = v24[v39 + 3];
            *(_OWORD *)((char *)v40 + 60) = *(_OWORD *)((char *)&v24[v39 + 3] + 12);
            v40[2] = v41;
            v40[3] = v42;
            v40[1] = result;
            v39 += 5;
          }
          while (&v24[v39] != v28);
        }
      }
      else
      {
        sub_FF2A18(a1, v26, v27, a4, a5);
        sub_FF2A18(&v6[5 * (a3 >> 1)], a2, a3 - (a3 >> 1), v24, a5);
        sub_FF30E4((uint64_t)v6, (char *)&v6[5 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), (char *)v24, a5);
      }
    }
    else if ((char *)a1 != a2)
    {
      uint64_t v11 = (_OWORD *)(a1 + 80);
      if ((char *)(a1 + 80) != a2)
      {
        uint64_t v12 = 0;
        __n128 v13 = (_OWORD *)a1;
        do
        {
          unint64_t v15 = v13 + 9;
          unint64_t v16 = v13 + 4;
          __n128 v13 = v11;
          if (sub_FE5CB8(v15, v16))
          {
            __n128 v44 = *(__n128 *)v13;
            __n128 v17 = *((__n128 *)v13 + 1);
            __n128 v18 = *((__n128 *)v13 + 2);
            *(_OWORD *)uint64_t v49 = v13[3];
            *(_OWORD *)&v49[16] = v13[4];
            __n128 v46 = v17;
            __n128 v48 = v18;
            uint64_t v19 = v12;
            do
            {
              BOOL v20 = (_OWORD *)((char *)v6 + v19);
              long long v21 = *(_OWORD *)((char *)v6 + v19 + 48);
              v20[7] = *(_OWORD *)((char *)v6 + v19 + 32);
              v20[8] = v21;
              *(_OWORD *)((char *)v20 + 140) = *(_OWORD *)((char *)v6 + v19 + 60);
              long long v22 = *(_OWORD *)((char *)v6 + v19 + 16);
              v20[5] = *(_OWORD *)((char *)v6 + v19);
              v20[6] = v22;
              if (!v19)
              {
                __n128 v14 = (__n128 *)v6;
                goto LABEL_10;
              }
              v19 -= 80;
            }
            while ((sub_FE5CB8(&v49[16], (_DWORD *)v20 - 4) & 1) != 0);
            __n128 v14 = (__n128 *)((char *)v6 + v19 + 80);
LABEL_10:
            *__n128 v14 = v44;
            __n128 result = v46;
            *(__n128 *)((char *)v14 + 60) = *(__n128 *)&v49[12];
            v14[2] = v48;
            v14[3] = *(__n128 *)v49;
            v14[1] = v46;
          }
          uint64_t v11 = v13 + 5;
          v12 += 80;
        }
        while (v13 + 5 != (_OWORD *)a2);
      }
    }
  }
  return result;
}

uint64_t sub_FF2D94(uint64_t result, uint64_t a2, unint64_t a3, _OWORD *a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v7 = result;
    if (a3 == 2)
    {
      uint64_t v11 = (_OWORD *)(a2 - 80);
      __n128 result = sub_FE5CB8((_DWORD *)(a2 - 16), (_DWORD *)(result + 64));
      if (result)
      {
        *uint64_t v4 = *v11;
        long long v12 = *(_OWORD *)(a2 - 64);
        long long v13 = *(_OWORD *)(a2 - 48);
        long long v14 = *(_OWORD *)(a2 - 16);
        v4[3] = *(_OWORD *)(a2 - 32);
        v4[4] = v14;
        v4[1] = v12;
        v4[2] = v13;
        long long v15 = *(_OWORD *)(v7 + 64);
        long long v17 = *(_OWORD *)(v7 + 16);
        long long v16 = *(_OWORD *)(v7 + 32);
        v4[8] = *(_OWORD *)(v7 + 48);
        v4[9] = v15;
        v4[6] = v17;
        v4[7] = v16;
        long long v18 = *(_OWORD *)v7;
      }
      else
      {
        *uint64_t v4 = *(_OWORD *)v7;
        long long v39 = *(_OWORD *)(v7 + 16);
        long long v40 = *(_OWORD *)(v7 + 32);
        long long v41 = *(_OWORD *)(v7 + 64);
        v4[3] = *(_OWORD *)(v7 + 48);
        v4[4] = v41;
        v4[1] = v39;
        v4[2] = v40;
        long long v42 = *(_OWORD *)(a2 - 16);
        long long v44 = *(_OWORD *)(a2 - 64);
        long long v43 = *(_OWORD *)(a2 - 48);
        v4[8] = *(_OWORD *)(a2 - 32);
        v4[9] = v42;
        v4[6] = v44;
        v4[7] = v43;
        long long v18 = *v11;
      }
      v4[5] = v18;
    }
    else if (a3 == 1)
    {
      *a4 = *(_OWORD *)result;
      long long v8 = *(_OWORD *)(result + 16);
      long long v9 = *(_OWORD *)(result + 32);
      long long v10 = *(_OWORD *)(result + 64);
      a4[3] = *(_OWORD *)(result + 48);
      a4[4] = v10;
      a4[1] = v8;
      a4[2] = v9;
    }
    else if ((uint64_t)a3 > 8)
    {
      unint64_t v45 = a3 >> 1;
      uint64_t v46 = 80 * (a3 >> 1);
      uint64_t v47 = result + v46;
      sub_FF2A18(result, result + v46, a3 >> 1, a4, a3 >> 1);
      __n128 result = sub_FF2A18(v7 + v46, a2, a3 - v45, &v4[(unint64_t)v46 / 0x10], a3 - v45);
      uint64_t v48 = v7 + v46;
      while (v48 != a2)
      {
        __n128 result = sub_FE5CB8((_DWORD *)(v48 + 64), (_DWORD *)(v7 + 64));
        if (result)
        {
          *uint64_t v4 = *(_OWORD *)v48;
          long long v52 = *(_OWORD *)(v48 + 16);
          long long v53 = *(_OWORD *)(v48 + 32);
          long long v54 = *(_OWORD *)(v48 + 64);
          v4[3] = *(_OWORD *)(v48 + 48);
          v4[4] = v54;
          v4[1] = v52;
          v4[2] = v53;
          v48 += 80;
          v4 += 5;
          if (v7 == v47)
          {
LABEL_28:
            if (v48 != a2)
            {
              unint64_t v55 = 0;
              do
              {
                int v56 = &v4[v55 / 0x10];
                *int v56 = *(_OWORD *)(v48 + v55);
                long long v57 = *(_OWORD *)(v48 + v55 + 16);
                long long v58 = *(_OWORD *)(v48 + v55 + 32);
                long long v59 = *(_OWORD *)(v48 + v55 + 64);
                v56[3] = *(_OWORD *)(v48 + v55 + 48);
                v56[4] = v59;
                v56[1] = v57;
                v56[2] = v58;
                v55 += 80;
              }
              while (v48 + v55 != a2);
            }
            return result;
          }
        }
        else
        {
          *uint64_t v4 = *(_OWORD *)v7;
          long long v49 = *(_OWORD *)(v7 + 16);
          long long v50 = *(_OWORD *)(v7 + 32);
          long long v51 = *(_OWORD *)(v7 + 64);
          v4[3] = *(_OWORD *)(v7 + 48);
          v4[4] = v51;
          v4[1] = v49;
          v4[2] = v50;
          v7 += 80;
          v4 += 5;
          if (v7 == v47) {
            goto LABEL_28;
          }
        }
      }
      if (v7 != v47)
      {
        unint64_t v60 = 0;
        do
        {
          double v61 = &v4[v60 / 0x10];
          *double v61 = *(_OWORD *)(v7 + v60);
          long long v62 = *(_OWORD *)(v7 + v60 + 16);
          long long v63 = *(_OWORD *)(v7 + v60 + 32);
          long long v64 = *(_OWORD *)(v7 + v60 + 64);
          v61[3] = *(_OWORD *)(v7 + v60 + 48);
          v61[4] = v64;
          v61[1] = v62;
          v61[2] = v63;
          v60 += 80;
        }
        while (v7 + v60 != v47);
      }
    }
    else if (result != a2)
    {
      *a4 = *(_OWORD *)result;
      long long v19 = *(_OWORD *)(result + 16);
      long long v20 = *(_OWORD *)(result + 32);
      long long v21 = *(_OWORD *)(result + 64);
      a4[3] = *(_OWORD *)(result + 48);
      a4[4] = v21;
      a4[1] = v19;
      a4[2] = v20;
      uint64_t v22 = result + 80;
      if (result + 80 != a2)
      {
        uint64_t v23 = 0;
        int v24 = a4;
        do
        {
          while (1)
          {
            __n128 v28 = (_DWORD *)(v7 + 144);
            uint64_t v7 = v22;
            v29 = v24 + 5;
            __n128 result = sub_FE5CB8(v28, (_DWORD *)v24 + 16);
            if (result) {
              break;
            }
            _OWORD *v29 = *(_OWORD *)v7;
            long long v25 = *(_OWORD *)(v7 + 16);
            long long v26 = *(_OWORD *)(v7 + 32);
            long long v27 = *(_OWORD *)(v7 + 64);
            v24[8] = *(_OWORD *)(v7 + 48);
            v24[9] = v27;
            v24[6] = v25;
            v24[7] = v26;
            uint64_t v22 = v7 + 80;
            v23 += 80;
            v24 += 5;
            if (v7 + 80 == a2) {
              return result;
            }
          }
          long long v30 = v24[3];
          v24[7] = v24[2];
          v24[8] = v30;
          v24[9] = v24[4];
          long long v31 = v24[1];
          _OWORD *v29 = *v24;
          v24[6] = v31;
          long long v32 = v4;
          if (v24 != v4)
          {
            uint64_t v33 = v23;
            while (1)
            {
              long long v32 = (_OWORD *)((char *)v4 + v33);
              __n128 result = sub_FE5CB8(v28, (_OWORD *)((char *)v4 + v33 - 16));
              if (!result) {
                break;
              }
              long long v34 = *(v32 - 2);
              v32[2] = *(v32 - 3);
              v32[3] = v34;
              *(_OWORD *)((char *)v32 + 60) = *(_OWORD *)((char *)v32 - 20);
              long long v35 = *(v32 - 4);
              *long long v32 = *(v32 - 5);
              v32[1] = v35;
              v33 -= 80;
              if (!v33)
              {
                long long v32 = v4;
                break;
              }
            }
          }
          *long long v32 = *(_OWORD *)v7;
          long long v36 = *(_OWORD *)(v7 + 16);
          long long v37 = *(_OWORD *)(v7 + 32);
          long long v38 = *(_OWORD *)(v7 + 48);
          *(_OWORD *)((char *)v32 + 60) = *(_OWORD *)(v7 + 60);
          v32[2] = v37;
          v32[3] = v38;
          v32[1] = v36;
          uint64_t v22 = v7 + 80;
          v23 += 80;
          int v24 = v29;
        }
        while (v7 + 80 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_FF30E4(uint64_t result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v8 = a5;
    uint64_t v11 = (char *)result;
    while (v8 > a7 && a4 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v12 = 0;
      uint64_t v13 = -a4;
      while (1)
      {
        long long v14 = &v11[v12];
        __n128 result = sub_FE5CB8((_DWORD *)a2 + 16, &v11[v12 + 64]);
        if (result) {
          break;
        }
        v12 += 80;
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      uint64_t v16 = -v13;
      __src = a6;
      if (-v13 >= v8)
      {
        if (v13 == -1)
        {
          unint64_t v60 = &v11[v12];
          long long v77 = *(_OWORD *)&v11[v12];
          *(_OWORD *)BOOL v80 = *(_OWORD *)&v11[v12 + 48];
          *(_OWORD *)&v80[16] = *(_OWORD *)&v11[v12 + 64];
          long long v78 = *(_OWORD *)&v11[v12 + 16];
          long long v79 = *(_OWORD *)&v11[v12 + 32];
          long long v62 = *((_OWORD *)a2 + 2);
          long long v61 = *((_OWORD *)a2 + 3);
          long long v63 = *((_OWORD *)a2 + 1);
          *(_OWORD *)(v60 + 60) = *(_OWORD *)(a2 + 60);
          *((_OWORD *)v60 + 2) = v62;
          *((_OWORD *)v60 + 3) = v61;
          *((_OWORD *)v60 + 1) = v63;
          *(_OWORD *)unint64_t v60 = *(_OWORD *)a2;
          *((_OWORD *)a2 + 2) = v79;
          *((_OWORD *)a2 + 3) = *(_OWORD *)v80;
          *(_OWORD *)(a2 + 60) = *(_OWORD *)&v80[12];
          *(_OWORD *)a2 = v77;
          *((_OWORD *)a2 + 1) = v78;
          return result;
        }
        if (v13 > 0) {
          uint64_t v16 = 1 - v13;
        }
        uint64_t v24 = v16 >> 1;
        uint64_t v23 = a2;
        long long v19 = a2;
        if (a2 != a3)
        {
          unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((a3 - a2) >> 4);
          uint64_t v70 = v16 >> 1;
          uint64_t v72 = a2;
          long long v26 = &v11[80 * v24 + 64 + v12];
          uint64_t v23 = a2;
          do
          {
            long long v27 = &v23[80 * (v25 >> 1)];
            int v28 = sub_FE5CB8((_DWORD *)v27 + 16, v26);
            if (v28) {
              v25 += ~(v25 >> 1);
            }
            else {
              v25 >>= 1;
            }
            if (v28) {
              uint64_t v23 = v27 + 80;
            }
          }
          while (v25);
          uint64_t v24 = v70;
          long long v19 = v72;
        }
        a2 = &v11[80 * v24 + v12];
        uint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((v23 - v19) >> 4);
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v17 = v8;
        }
        else {
          uint64_t v17 = v8 + 1;
        }
        uint64_t v18 = v17 >> 1;
        long long v19 = a2;
        if (a2 - v11 != v12)
        {
          unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v11 - v12) >> 4);
          uint64_t v69 = v17 >> 1;
          long long v71 = a2;
          long long v21 = &a2[80 * v18 + 64];
          a2 = &v11[v12];
          do
          {
            uint64_t v22 = &a2[80 * (v20 >> 1)];
            if (sub_FE5CB8(v21, (_DWORD *)v22 + 16))
            {
              v20 >>= 1;
            }
            else
            {
              a2 = v22 + 80;
              v20 += ~(v20 >> 1);
            }
          }
          while (v20);
          uint64_t v18 = v69;
          long long v19 = v71;
        }
        uint64_t v23 = &v19[80 * v18];
        uint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v11 - v12) >> 4);
      }
      a4 = -v24 - v13;
      uint64_t v73 = v8 - v18;
      uint64_t v29 = v24;
      uint64_t v30 = v18;
      long long v31 = sub_FF35F8(a2, v19, v23);
      uint64_t v32 = v29;
      uint64_t v33 = v31;
      if (v32 + v30 >= v8 - (v32 + v30) - v13)
      {
        long long v34 = v23;
        a6 = __src;
        uint64_t v35 = v32;
        __n128 result = sub_FF30E4(v31, v34, a3, a4, v73, __src, a7);
        a4 = v35;
        a3 = v33;
        uint64_t v8 = v30;
        uint64_t v11 = v14;
        if (!v30) {
          return result;
        }
      }
      else
      {
        __n128 result = sub_FF30E4(&v11[v12], a2, v31, v32, v30, __src, a7);
        a2 = v23;
        a6 = __src;
        uint64_t v8 = v73;
        uint64_t v11 = v33;
        if (!v73) {
          return result;
        }
      }
    }
    if (a4 <= v8)
    {
      if (v11 != a2)
      {
        uint64_t v47 = 0;
        do
        {
          uint64_t v48 = &a6[v47];
          *(_OWORD *)uint64_t v48 = *(_OWORD *)&v11[v47];
          long long v49 = *(_OWORD *)&v11[v47 + 16];
          long long v50 = *(_OWORD *)&v11[v47 + 32];
          long long v51 = *(_OWORD *)&v11[v47 + 64];
          *((_OWORD *)v48 + 3) = *(_OWORD *)&v11[v47 + 48];
          *((_OWORD *)v48 + 4) = v51;
          *((_OWORD *)v48 + 1) = v49;
          *((_OWORD *)v48 + 2) = v50;
          v47 += 80;
        }
        while (&v11[v47] != a2);
        if (v47)
        {
          long long v52 = &a6[v47];
          long long v53 = a6;
          while (a2 != a3)
          {
            __n128 result = sub_FE5CB8((_DWORD *)a2 + 16, (_DWORD *)v53 + 16);
            if (result)
            {
              *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
              long long v57 = *((_OWORD *)a2 + 1);
              long long v58 = *((_OWORD *)a2 + 2);
              long long v59 = *((_OWORD *)a2 + 3);
              *(_OWORD *)(v11 + 60) = *(_OWORD *)(a2 + 60);
              *((_OWORD *)v11 + 2) = v58;
              *((_OWORD *)v11 + 3) = v59;
              *((_OWORD *)v11 + 1) = v57;
              a2 += 80;
              v11 += 80;
              if (v52 == v53) {
                return result;
              }
            }
            else
            {
              *(_OWORD *)uint64_t v11 = *(_OWORD *)v53;
              long long v54 = *((_OWORD *)v53 + 1);
              long long v55 = *((_OWORD *)v53 + 2);
              long long v56 = *((_OWORD *)v53 + 3);
              *(_OWORD *)(v11 + 60) = *(_OWORD *)(v53 + 60);
              *((_OWORD *)v11 + 2) = v55;
              *((_OWORD *)v11 + 3) = v56;
              *((_OWORD *)v11 + 1) = v54;
              v53 += 80;
              v11 += 80;
              if (v52 == v53) {
                return result;
              }
            }
          }
          return (uint64_t)memmove(v11, v53, a6 - v53 + v47 - 4);
        }
      }
    }
    else if (a3 != a2)
    {
      uint64_t v36 = 0;
      do
      {
        long long v37 = &a6[v36];
        *(_OWORD *)long long v37 = *(_OWORD *)&a2[v36];
        long long v38 = *(_OWORD *)&a2[v36 + 16];
        long long v39 = *(_OWORD *)&a2[v36 + 32];
        long long v40 = *(_OWORD *)&a2[v36 + 64];
        *((_OWORD *)v37 + 3) = *(_OWORD *)&a2[v36 + 48];
        *((_OWORD *)v37 + 4) = v40;
        *((_OWORD *)v37 + 1) = v38;
        *((_OWORD *)v37 + 2) = v39;
        v36 += 80;
      }
      while (&a2[v36] != a3);
      if (v36)
      {
        long long v41 = &a6[v36];
        long long v42 = a3 - 80;
        while (a2 != v11)
        {
          __n128 result = sub_FE5CB8((_DWORD *)v41 - 4, (_DWORD *)a2 - 4);
          if (result) {
            long long v43 = a2 - 80;
          }
          else {
            long long v43 = v41 - 80;
          }
          if (result) {
            a2 -= 80;
          }
          else {
            v41 -= 80;
          }
          *(_OWORD *)long long v42 = *(_OWORD *)v43;
          long long v45 = *((_OWORD *)v43 + 2);
          long long v44 = *((_OWORD *)v43 + 3);
          long long v46 = *((_OWORD *)v43 + 1);
          *(_OWORD *)(v42 + 60) = *(_OWORD *)(v43 + 60);
          *((_OWORD *)v42 + 2) = v45;
          *((_OWORD *)v42 + 3) = v44;
          *((_OWORD *)v42 + 1) = v46;
          v42 -= 80;
          if (v41 == a6) {
            return result;
          }
        }
        unint64_t v64 = 0;
        do
        {
          unint64_t v65 = &v42[v64];
          *(_OWORD *)unint64_t v65 = *(_OWORD *)&v41[v64 - 80];
          long long v66 = *(_OWORD *)&v41[v64 - 64];
          long long v67 = *(_OWORD *)&v41[v64 - 48];
          long long v68 = *(_OWORD *)&v41[v64 - 32];
          *(_OWORD *)(v65 + 60) = *(_OWORD *)&v41[v64 - 20];
          *((_OWORD *)v65 + 2) = v67;
          *((_OWORD *)v65 + 3) = v68;
          *((_OWORD *)v65 + 1) = v66;
          v64 -= 80;
        }
        while (&v41[v64] != a6);
      }
    }
  }
  return result;
}

char *sub_FF35F8(char *__src, char *a2, char *a3)
{
  unint64_t v3 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 80 == a2)
    {
      long long v41 = *((_OWORD *)__src + 2);
      *(_OWORD *)long long v45 = *((_OWORD *)__src + 3);
      *(_OWORD *)&v45[16] = *((_OWORD *)__src + 4);
      long long v35 = *(_OWORD *)__src;
      long long v38 = *((_OWORD *)__src + 1);
      int64_t v12 = a3 - a2;
      memmove(__src, a2, a3 - a2 - 4);
      unint64_t v3 = &__src[v12];
      *((_OWORD *)v3 + 2) = v41;
      *((_OWORD *)v3 + 3) = *(_OWORD *)v45;
      *(_OWORD *)(v3 + 60) = *(_OWORD *)&v45[12];
      *(_OWORD *)unint64_t v3 = v35;
      *((_OWORD *)v3 + 1) = v38;
    }
    else if (a2 + 80 == a3)
    {
      unint64_t v3 = __src + 80;
      long long v42 = *((_OWORD *)a3 - 3);
      *(_OWORD *)long long v46 = *((_OWORD *)a3 - 2);
      *(_OWORD *)&v46[16] = *((_OWORD *)a3 - 1);
      long long v36 = *((_OWORD *)a3 - 5);
      long long v39 = *((_OWORD *)a3 - 4);
      if (a3 - 80 != __src) {
        memmove(__src + 80, __src, a3 - 80 - __src - 4);
      }
      *((_OWORD *)__src + 2) = v42;
      *((_OWORD *)__src + 3) = *(_OWORD *)v46;
      *(_OWORD *)(__src + 60) = *(_OWORD *)&v46[12];
      *(_OWORD *)__src = v36;
      *((_OWORD *)__src + 1) = v39;
    }
    else
    {
      unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - __src) >> 4);
      if (v5 == 0xCCCCCCCCCCCCCCCDLL * ((a3 - a2) >> 4))
      {
        uint64_t v6 = __src + 80;
        uint64_t v7 = a2 + 80;
        do
        {
          long long v40 = *((_OWORD *)v6 - 3);
          *(_OWORD *)long long v44 = *((_OWORD *)v6 - 2);
          *(_OWORD *)&v44[16] = *((_OWORD *)v6 - 1);
          long long v34 = *((_OWORD *)v6 - 5);
          long long v37 = *((_OWORD *)v6 - 4);
          *((_OWORD *)v6 - 5) = *((_OWORD *)v7 - 5);
          long long v9 = *((_OWORD *)v7 - 3);
          long long v8 = *((_OWORD *)v7 - 2);
          long long v10 = *((_OWORD *)v7 - 4);
          *(_OWORD *)(v6 - 20) = *(_OWORD *)(v7 - 20);
          *((_OWORD *)v6 - 3) = v9;
          *((_OWORD *)v6 - 2) = v8;
          *((_OWORD *)v6 - 4) = v10;
          *(_OWORD *)(v7 - 20) = *(_OWORD *)&v44[12];
          *((_OWORD *)v7 - 3) = v40;
          *((_OWORD *)v7 - 2) = *(_OWORD *)v44;
          *((_OWORD *)v7 - 5) = v34;
          *((_OWORD *)v7 - 4) = v37;
          if (v6 == a2) {
            break;
          }
          v6 += 80;
          BOOL v11 = v7 == a3;
          v7 += 80;
        }
        while (!v11);
        return a2;
      }
      else
      {
        uint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((a3 - a2) >> 4);
        unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - __src) >> 4);
        do
        {
          uint64_t v15 = v14;
          unint64_t v14 = v13;
          uint64_t v13 = v15 % v13;
        }
        while (v13);
        if (v14)
        {
          uint64_t v16 = &__src[80 * v14];
          do
          {
            long long v17 = *((_OWORD *)v16 - 3);
            long long v18 = *((_OWORD *)v16 - 2);
            long long v19 = *((_OWORD *)v16 - 1);
            long long v21 = *((_OWORD *)v16 - 5);
            long long v20 = *((_OWORD *)v16 - 4);
            v16 -= 80;
            long long v43 = v17;
            *(_OWORD *)uint64_t v47 = v18;
            *(_OWORD *)&v47[16] = v19;
            uint64_t v22 = &v16[16 * ((a2 - __src) >> 4)];
            uint64_t v23 = v16;
            do
            {
              uint64_t v24 = v22;
              _OWORD *v23 = *(_OWORD *)v22;
              long long v25 = *((_OWORD *)v22 + 1);
              long long v26 = *((_OWORD *)v22 + 2);
              long long v27 = *((_OWORD *)v22 + 3);
              *(_OWORD *)((char *)v23 + 60) = *(_OWORD *)(v22 + 60);
              v23[2] = v26;
              v23[3] = v27;
              v23[1] = v25;
              unint64_t v28 = 0xCCCCCCCCCCCCCCCDLL * ((a3 - v22) >> 4);
              v22 += 16 * ((a2 - __src) >> 4);
              BOOL v29 = __OFSUB__(v5, v28);
              uint64_t v31 = v5 - v28;
              char v30 = (v31 < 0) ^ v29;
              uint64_t v32 = &__src[80 * v31];
              if (!v30) {
                uint64_t v22 = v32;
              }
              uint64_t v23 = v24;
            }
            while (v22 != v16);
            *uint64_t v24 = v21;
            *(_OWORD *)((char *)v24 + 60) = *(_OWORD *)&v47[12];
            v24[2] = v43;
            v24[3] = *(_OWORD *)v47;
            v24[1] = v20;
          }
          while (v16 != __src);
        }
        return &__src[16 * ((a3 - a2) >> 4)];
      }
    }
  }
  return v3;
}

uint64_t *sub_FF3878(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    long long v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      long long v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            long long v10 = (uint64_t *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          long long v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  unint64_t v14 = operator new(0x18uLL);
  *unint64_t v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    unint64_t v6 = v3;
  }
  else
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_36;
    }
    if (prime < v7)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v7) {
LABEL_36:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        v6 %= v7;
      }
    }
    else
    {
      unint64_t v6 = (v7 - 1) & v6;
    }
  }
  uint64_t v24 = *(void *)a1;
  long long v25 = *(void **)(*(void *)a1 + 8 * v6);
  if (v25)
  {
    *unint64_t v14 = *v25;
LABEL_59:
    void *v25 = v14;
    goto LABEL_60;
  }
  *unint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    unint64_t v26 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }
    else
    {
      v26 &= v7 - 1;
    }
    long long v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_FF3B68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_FF3B7C(uint64_t a1, char *a2, unint64_t a3, _OWORD *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    unint64_t v6 = (_OWORD *)a1;
    if (a3 == 2)
    {
      if (sub_FE5CB8((_DWORD *)a2 - 4, (_DWORD *)(a1 + 64)))
      {
        long long v45 = v6[1];
        long long v47 = v6[2];
        *(_OWORD *)long long v49 = v6[3];
        *(_OWORD *)&v49[16] = v6[4];
        __n128 v43 = *(__n128 *)v6;
        *unint64_t v6 = *((_OWORD *)a2 - 5);
        long long v8 = *((_OWORD *)a2 - 3);
        __n128 result = *((__n128 *)a2 - 2);
        long long v9 = *((_OWORD *)a2 - 4);
        *(_OWORD *)((char *)v6 + 60) = *(_OWORD *)(a2 - 20);
        v6[2] = v8;
        v6[3] = result;
        v6[1] = v9;
        *((__n128 *)a2 - 5) = v43;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v49[12];
        *((_OWORD *)a2 - 2) = *(_OWORD *)v49;
        *((_OWORD *)a2 - 3) = v47;
        result.n128_u64[0] = v45;
        *((_OWORD *)a2 - 4) = v45;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      uint64_t v24 = a4;
      unint64_t v25 = a3 >> 1;
      uint64_t v26 = a1 + 80 * (a3 >> 1);
      unint64_t v27 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_FF3EF8(a1, v26, v27, a4);
        unint64_t v28 = &v24[5 * v25];
        sub_FF3EF8((uint64_t)&v6[5 * (a3 >> 1)], (uint64_t)a2, a3 - (a3 >> 1), v28);
        BOOL v29 = &v24[5 * a3];
        char v30 = v28;
        while (v30 != v29)
        {
          if (sub_FE5CB8((_DWORD *)v30 + 16, (_DWORD *)v24 + 16))
          {
            *unint64_t v6 = *v30;
            __n128 result = *((__n128 *)v30 + 1);
            long long v33 = v30[2];
            long long v34 = v30[3];
            *(_OWORD *)((char *)v6 + 60) = *(_OWORD *)((char *)v30 + 60);
            v6[2] = v33;
            v6[3] = v34;
            v6[1] = result;
            v30 += 5;
            v6 += 5;
            if (v24 == v28)
            {
LABEL_26:
              if (v30 != v29)
              {
                uint64_t v35 = 0;
                do
                {
                  long long v36 = &v6[v35];
                  *long long v36 = v30[v35];
                  __n128 result = (__n128)v30[v35 + 1];
                  long long v37 = v30[v35 + 2];
                  long long v38 = v30[v35 + 3];
                  *(_OWORD *)((char *)v36 + 60) = *(_OWORD *)((char *)&v30[v35 + 3] + 12);
                  v36[2] = v37;
                  v36[3] = v38;
                  v36[1] = result;
                  v35 += 5;
                }
                while (&v30[v35] != v29);
              }
              return result;
            }
          }
          else
          {
            *unint64_t v6 = *v24;
            __n128 result = *((__n128 *)v24 + 1);
            long long v31 = v24[2];
            long long v32 = v24[3];
            *(_OWORD *)((char *)v6 + 60) = *(_OWORD *)((char *)v24 + 60);
            v6[2] = v31;
            v6[3] = v32;
            v6[1] = result;
            v24 += 5;
            v6 += 5;
            if (v24 == v28) {
              goto LABEL_26;
            }
          }
        }
        if (v24 != v28)
        {
          uint64_t v39 = 0;
          do
          {
            long long v40 = &v6[v39];
            *long long v40 = v24[v39];
            __n128 result = (__n128)v24[v39 + 1];
            long long v41 = v24[v39 + 2];
            long long v42 = v24[v39 + 3];
            *(_OWORD *)((char *)v40 + 60) = *(_OWORD *)((char *)&v24[v39 + 3] + 12);
            v40[2] = v41;
            v40[3] = v42;
            v40[1] = result;
            v39 += 5;
          }
          while (&v24[v39] != v28);
        }
      }
      else
      {
        sub_FF3B7C(a1, v26, v27, a4, a5);
        sub_FF3B7C(&v6[5 * (a3 >> 1)], a2, a3 - (a3 >> 1), v24, a5);
        sub_FF30E4((uint64_t)v6, (char *)&v6[5 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), (char *)v24, a5);
      }
    }
    else if ((char *)a1 != a2)
    {
      unint64_t v11 = (_OWORD *)(a1 + 80);
      if ((char *)(a1 + 80) != a2)
      {
        uint64_t v12 = 0;
        uint64_t v13 = (_OWORD *)a1;
        do
        {
          float v15 = v13 + 9;
          float v16 = v13 + 4;
          uint64_t v13 = v11;
          if (sub_FE5CB8(v15, v16))
          {
            __n128 v44 = *(__n128 *)v13;
            __n128 v17 = *((__n128 *)v13 + 1);
            __n128 v18 = *((__n128 *)v13 + 2);
            *(_OWORD *)long long v49 = v13[3];
            *(_OWORD *)&v49[16] = v13[4];
            __n128 v46 = v17;
            __n128 v48 = v18;
            uint64_t v19 = v12;
            do
            {
              long long v20 = (_OWORD *)((char *)v6 + v19);
              long long v21 = *(_OWORD *)((char *)v6 + v19 + 48);
              v20[7] = *(_OWORD *)((char *)v6 + v19 + 32);
              v20[8] = v21;
              *(_OWORD *)((char *)v20 + 140) = *(_OWORD *)((char *)v6 + v19 + 60);
              long long v22 = *(_OWORD *)((char *)v6 + v19 + 16);
              v20[5] = *(_OWORD *)((char *)v6 + v19);
              v20[6] = v22;
              if (!v19)
              {
                unint64_t v14 = (__n128 *)v6;
                goto LABEL_10;
              }
              v19 -= 80;
            }
            while ((sub_FE5CB8(&v49[16], (_DWORD *)v20 - 4) & 1) != 0);
            unint64_t v14 = (__n128 *)((char *)v6 + v19 + 80);
LABEL_10:
            *unint64_t v14 = v44;
            __n128 result = v46;
            *(__n128 *)((char *)v14 + 60) = *(__n128 *)&v49[12];
            v14[2] = v48;
            v14[3] = *(__n128 *)v49;
            v14[1] = v46;
          }
          unint64_t v11 = v13 + 5;
          v12 += 80;
        }
        while (v13 + 5 != (_OWORD *)a2);
      }
    }
  }
  return result;
}

uint64_t sub_FF3EF8(uint64_t result, uint64_t a2, unint64_t a3, _OWORD *a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v7 = result;
    if (a3 == 2)
    {
      unint64_t v11 = (_OWORD *)(a2 - 80);
      __n128 result = sub_FE5CB8((_DWORD *)(a2 - 16), (_DWORD *)(result + 64));
      if (result)
      {
        *uint64_t v4 = *v11;
        long long v12 = *(_OWORD *)(a2 - 64);
        long long v13 = *(_OWORD *)(a2 - 48);
        long long v14 = *(_OWORD *)(a2 - 16);
        v4[3] = *(_OWORD *)(a2 - 32);
        v4[4] = v14;
        v4[1] = v12;
        v4[2] = v13;
        long long v15 = *(_OWORD *)(v7 + 64);
        long long v17 = *(_OWORD *)(v7 + 16);
        long long v16 = *(_OWORD *)(v7 + 32);
        v4[8] = *(_OWORD *)(v7 + 48);
        v4[9] = v15;
        v4[6] = v17;
        v4[7] = v16;
        long long v18 = *(_OWORD *)v7;
      }
      else
      {
        *uint64_t v4 = *(_OWORD *)v7;
        long long v39 = *(_OWORD *)(v7 + 16);
        long long v40 = *(_OWORD *)(v7 + 32);
        long long v41 = *(_OWORD *)(v7 + 64);
        v4[3] = *(_OWORD *)(v7 + 48);
        v4[4] = v41;
        v4[1] = v39;
        v4[2] = v40;
        long long v42 = *(_OWORD *)(a2 - 16);
        long long v44 = *(_OWORD *)(a2 - 64);
        long long v43 = *(_OWORD *)(a2 - 48);
        v4[8] = *(_OWORD *)(a2 - 32);
        v4[9] = v42;
        v4[6] = v44;
        v4[7] = v43;
        long long v18 = *v11;
      }
      v4[5] = v18;
    }
    else if (a3 == 1)
    {
      *a4 = *(_OWORD *)result;
      long long v8 = *(_OWORD *)(result + 16);
      long long v9 = *(_OWORD *)(result + 32);
      long long v10 = *(_OWORD *)(result + 64);
      a4[3] = *(_OWORD *)(result + 48);
      a4[4] = v10;
      a4[1] = v8;
      a4[2] = v9;
    }
    else if ((uint64_t)a3 > 8)
    {
      unint64_t v45 = a3 >> 1;
      uint64_t v46 = 80 * (a3 >> 1);
      uint64_t v47 = result + v46;
      sub_FF3B7C(result, result + v46, a3 >> 1, a4, a3 >> 1);
      __n128 result = sub_FF3B7C(v7 + v46, a2, a3 - v45, &v4[(unint64_t)v46 / 0x10], a3 - v45);
      uint64_t v48 = v7 + v46;
      while (v48 != a2)
      {
        __n128 result = sub_FE5CB8((_DWORD *)(v48 + 64), (_DWORD *)(v7 + 64));
        if (result)
        {
          *uint64_t v4 = *(_OWORD *)v48;
          long long v52 = *(_OWORD *)(v48 + 16);
          long long v53 = *(_OWORD *)(v48 + 32);
          long long v54 = *(_OWORD *)(v48 + 64);
          v4[3] = *(_OWORD *)(v48 + 48);
          v4[4] = v54;
          v4[1] = v52;
          v4[2] = v53;
          v48 += 80;
          v4 += 5;
          if (v7 == v47)
          {
LABEL_28:
            if (v48 != a2)
            {
              unint64_t v55 = 0;
              do
              {
                long long v56 = &v4[v55 / 0x10];
                *long long v56 = *(_OWORD *)(v48 + v55);
                long long v57 = *(_OWORD *)(v48 + v55 + 16);
                long long v58 = *(_OWORD *)(v48 + v55 + 32);
                long long v59 = *(_OWORD *)(v48 + v55 + 64);
                v56[3] = *(_OWORD *)(v48 + v55 + 48);
                v56[4] = v59;
                v56[1] = v57;
                v56[2] = v58;
                v55 += 80;
              }
              while (v48 + v55 != a2);
            }
            return result;
          }
        }
        else
        {
          *uint64_t v4 = *(_OWORD *)v7;
          long long v49 = *(_OWORD *)(v7 + 16);
          long long v50 = *(_OWORD *)(v7 + 32);
          long long v51 = *(_OWORD *)(v7 + 64);
          v4[3] = *(_OWORD *)(v7 + 48);
          v4[4] = v51;
          v4[1] = v49;
          v4[2] = v50;
          v7 += 80;
          v4 += 5;
          if (v7 == v47) {
            goto LABEL_28;
          }
        }
      }
      if (v7 != v47)
      {
        unint64_t v60 = 0;
        do
        {
          long long v61 = &v4[v60 / 0x10];
          *long long v61 = *(_OWORD *)(v7 + v60);
          long long v62 = *(_OWORD *)(v7 + v60 + 16);
          long long v63 = *(_OWORD *)(v7 + v60 + 32);
          long long v64 = *(_OWORD *)(v7 + v60 + 64);
          v61[3] = *(_OWORD *)(v7 + v60 + 48);
          v61[4] = v64;
          v61[1] = v62;
          v61[2] = v63;
          v60 += 80;
        }
        while (v7 + v60 != v47);
      }
    }
    else if (result != a2)
    {
      *a4 = *(_OWORD *)result;
      long long v19 = *(_OWORD *)(result + 16);
      long long v20 = *(_OWORD *)(result + 32);
      long long v21 = *(_OWORD *)(result + 64);
      a4[3] = *(_OWORD *)(result + 48);
      a4[4] = v21;
      a4[1] = v19;
      a4[2] = v20;
      uint64_t v22 = result + 80;
      if (result + 80 != a2)
      {
        uint64_t v23 = 0;
        uint64_t v24 = a4;
        do
        {
          while (1)
          {
            unint64_t v28 = (_DWORD *)(v7 + 144);
            uint64_t v7 = v22;
            BOOL v29 = v24 + 5;
            __n128 result = sub_FE5CB8(v28, (_DWORD *)v24 + 16);
            if (result) {
              break;
            }
            _OWORD *v29 = *(_OWORD *)v7;
            long long v25 = *(_OWORD *)(v7 + 16);
            long long v26 = *(_OWORD *)(v7 + 32);
            long long v27 = *(_OWORD *)(v7 + 64);
            v24[8] = *(_OWORD *)(v7 + 48);
            v24[9] = v27;
            v24[6] = v25;
            v24[7] = v26;
            uint64_t v22 = v7 + 80;
            v23 += 80;
            v24 += 5;
            if (v7 + 80 == a2) {
              return result;
            }
          }
          long long v30 = v24[3];
          v24[7] = v24[2];
          v24[8] = v30;
          v24[9] = v24[4];
          long long v31 = v24[1];
          _OWORD *v29 = *v24;
          v24[6] = v31;
          long long v32 = v4;
          if (v24 != v4)
          {
            uint64_t v33 = v23;
            while (1)
            {
              long long v32 = (_OWORD *)((char *)v4 + v33);
              __n128 result = sub_FE5CB8(v28, (_OWORD *)((char *)v4 + v33 - 16));
              if (!result) {
                break;
              }
              long long v34 = *(v32 - 2);
              v32[2] = *(v32 - 3);
              v32[3] = v34;
              *(_OWORD *)((char *)v32 + 60) = *(_OWORD *)((char *)v32 - 20);
              long long v35 = *(v32 - 4);
              *long long v32 = *(v32 - 5);
              v32[1] = v35;
              v33 -= 80;
              if (!v33)
              {
                long long v32 = v4;
                break;
              }
            }
          }
          *long long v32 = *(_OWORD *)v7;
          long long v36 = *(_OWORD *)(v7 + 16);
          long long v37 = *(_OWORD *)(v7 + 32);
          long long v38 = *(_OWORD *)(v7 + 48);
          *(_OWORD *)((char *)v32 + 60) = *(_OWORD *)(v7 + 60);
          v32[2] = v37;
          v32[3] = v38;
          v32[1] = v36;
          uint64_t v22 = v7 + 80;
          v23 += 80;
          uint64_t v24 = v29;
        }
        while (v7 + 80 != a2);
      }
    }
  }
  return result;
}

void sub_FF4248(void **a1, unint64_t a2)
{
  unint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)v5) >> 4) >= a2)
  {
    if (a2)
    {
      unint64_t v11 = &v5[5 * a2];
      uint64_t v12 = 80 * a2;
      do
      {
        *unint64_t v5 = 0u;
        v5[1] = 0u;
        v5[2] = 0u;
        v5[3] = 0u;
        v5[4] = 0u;
        *(_DWORD *)unint64_t v5 = -1;
        *(_OWORD *)((char *)v5 + 8) = 0u;
        *(_OWORD *)((char *)v5 + 40) = 0u;
        *((_DWORD *)v5 + 2) = 0x7FFFFFFF;
        *(void *)&long long v13 = 0x8000000080000000;
        *((void *)&v13 + 1) = 0x8000000080000000;
        *(_OWORD *)((char *)v5 + 24) = v13;
        *((void *)v5 + 5) = -1;
        sub_FE5C64((uint64_t)(v5 + 4));
        v5 += 5;
        v12 -= 80;
      }
      while (v12);
      unint64_t v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v5 - (unsigned char *)*a1) >> 4);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x333333333333333) {
      sub_2E00();
    }
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 4);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x199999999999999) {
      unint64_t v9 = 0x333333333333333;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x333333333333333) {
        sub_188D718();
      }
      long long v10 = (char *)operator new(80 * v9);
    }
    else
    {
      long long v10 = 0;
    }
    long long v14 = &v10[80 * v6];
    long long v15 = &v14[80 * a2];
    long long v16 = v14 + 64;
    do
    {
      *(v16 - 4) = 0u;
      long long v17 = v16 - 4;
      *(v16 - 2) = 0u;
      *(v16 - 1) = 0u;
      *(v16 - 3) = 0u;
      *long long v16 = 0u;
      *((_DWORD *)v16 - 16) = -1;
      *(_OWORD *)((char *)v16 - 56) = 0u;
      *(_OWORD *)((char *)v16 - 24) = 0u;
      *((_DWORD *)v16 - 14) = 0x7FFFFFFF;
      *(void *)&long long v18 = 0x8000000080000000;
      *((void *)&v18 + 1) = 0x8000000080000000;
      *(_OWORD *)((char *)v16 - 40) = v18;
      *((void *)v16 - 3) = -1;
      sub_FE5C64((uint64_t)v16);
      long long v16 = (_OWORD *)(v19 + 80);
    }
    while (v17 + 5 != (_OWORD *)v15);
    long long v21 = (char *)*a1;
    long long v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 5) = *((_OWORD *)v20 - 5);
        long long v22 = *((_OWORD *)v20 - 4);
        long long v23 = *((_OWORD *)v20 - 3);
        long long v24 = *((_OWORD *)v20 - 2);
        *(_OWORD *)(v14 - 20) = *(_OWORD *)(v20 - 20);
        *((_OWORD *)v14 - 3) = v23;
        *((_OWORD *)v14 - 2) = v24;
        *((_OWORD *)v14 - 4) = v22;
        v14 -= 80;
        v20 -= 80;
      }
      while (v20 != v21);
      long long v20 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = &v10[80 * v9];
    if (v20)
    {
      operator delete(v20);
    }
  }
}

void sub_FF4474(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_FF447C(_Unwind_Exception *exception_object)
{
  if (!v1) {
    _Unwind_Resume(exception_object);
  }
  operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_FF449C()
{
  unk_25FD33F = 16641;
  word_25FD328 = 65;
  byte_25FD357 = 1;
  byte_25FD341 = 0;
}

double sub_FF44C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = xmmword_20B8E30;
  double result = NAN;
  *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  return result;
}

void sub_FF44E4(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  sub_725D0((uint64_t)v157);
  uint64_t v128 = a1;
  uint64_t v12 = sub_3750CC(*(void **)(a1 + 32));
  uint64_t v14 = *a5;
  uint64_t v13 = a5[1];
  v129 = a5;
  v154 = 0;
  v155 = 0;
  v156 = 0;
  if (v13 == v14)
  {
    v151 = 0;
    v152 = 0;
    v153 = 0;
    v148 = 0;
    v149 = 0;
    v150 = 0;
    uint64_t v113 = a7;
LABEL_33:
    int64_t v42 = 100;
    uint64_t v38 = a1;
    goto LABEL_42;
  }
  if ((unint64_t)(0x7E3F1F8FC7E3F1F9 * ((v13 - v14) >> 5)) >= 0x1555555555555556) {
    sub_2E00();
  }
  v154 = (char *)operator new(0xEAF57ABD5EAF57ACLL * ((v13 - v14) >> 5));
  v155 = v154;
  v156 = &v154[0xEAF57ABD5EAF57ACLL * ((v13 - v14) >> 5)];
  v151 = (char *)operator new(0xEAF57ABD5EAF57ACLL * ((v13 - v14) >> 5));
  v152 = v151;
  v153 = &v151[0xEAF57ABD5EAF57ACLL * ((v13 - v14) >> 5)];
  v148 = (char *)operator new(0xF1F8FC7E3F1F8FC8 * ((v13 - v14) >> 5));
  v149 = v148;
  v150 = &v148[0xF1F8FC7E3F1F8FC8 * ((v13 - v14) >> 5)];
  uint64_t v113 = a7;
  if (v13 == v14) {
    goto LABEL_33;
  }
  float64x2_t v121 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
  float64x2_t v123 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
  float64x2_t v118 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
  float64x2_t v120 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
  unint64_t v7 = 0x4330000000000000;
  do
  {
    uint64_t v15 = sub_100596C(v14);
    v140 = (void *)sub_3FD4E4(v12, (void *)(*(void *)v15 + 88), 0);
    LODWORD(v141) = v16;
    uint64_t v17 = sub_1005974(v14);
    *(void *)&long long __p = sub_3FD4E4(v12, (void *)(*(void *)v17 + 8), 0);
    DWORD2(__p) = v18;
    sub_30C0C(&v154, (uint64_t *)&v140);
    sub_30C0C(&v151, (uint64_t *)&__p);
    unsigned int v19 = v140;
    if (v140 == (void *)-1 || (v20 = __p, unsigned int v21 = DWORD1(__p), (void)__p == -1))
    {
      uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_8;
    }
    long double v23 = exp(3.14159265 - (double)HIDWORD(v140) * 6.28318531 / 4294967300.0);
    long double v24 = atan((v23 - 1.0 / v23) * 0.5) * 57.2957795 * 0.0174532925;
    v25.i64[0] = v19;
    v25.i64[1] = v20;
    long double v26 = exp(3.14159265 - (double)v21 * 6.28318531 / 4294967300.0);
    long double v27 = atan((v26 - 1.0 / v26) * 0.5) * 57.2957795 * 0.0174532925;
    int64x2_t v28 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v25), v123), v121), v120), v118);
    double v126 = vsubq_f64((float64x2_t)v28, (float64x2_t)vdupq_laneq_s64(v28, 1)).f64[0];
    long double v29 = sin((v24 - v27) * 0.5);
    long double v30 = v29 * v29;
    double v31 = cos(v24);
    double v8 = v31 * cos(v27);
    long double v32 = sin(0.5 * v126);
    long double v33 = atan2(sqrt(v32 * v32 * v8 + v30), sqrt(1.0 - (v32 * v32 * v8 + v30)));
    double v34 = (v33 + v33) * 6372797.56 * 100.0;
    if (v34 >= 0.0)
    {
      double v35 = v34;
      if (v34 >= 4.50359963e15) {
        goto LABEL_18;
      }
      uint64_t v36 = (uint64_t)(v34 + v34) + 1;
    }
    else
    {
      double v35 = v34;
      if (v34 <= -4.50359963e15) {
        goto LABEL_18;
      }
      uint64_t v36 = (uint64_t)(v34 + v34);
      if (v36 >= 1) {
        --v36;
      }
    }
    double v35 = (double)(v36 >> 1);
LABEL_18:
    if (v35 >= 9.22337204e18)
    {
      uint64_t v22 = 0x7FFFFFFFFFFFFFFELL;
      goto LABEL_8;
    }
    if (v34 >= 0.0)
    {
      if (v34 < 4.50359963e15)
      {
        uint64_t v37 = (uint64_t)(v34 + v34) + 1;
LABEL_27:
        double v34 = (double)(v37 >> 1);
      }
    }
    else if (v34 > -4.50359963e15)
    {
      uint64_t v37 = (uint64_t)(v34 + v34);
      if (v37 >= 1) {
        --v37;
      }
      goto LABEL_27;
    }
    uint64_t v22 = (uint64_t)v34;
LABEL_8:
    v131.n128_u64[0] = v22;
    sub_29603C((void **)&v148, &v131);
    v14 += 2336;
  }
  while (v14 != v13);
  uint64_t v38 = a1;
  if (v148 == v149)
  {
    int64_t v42 = 100;
  }
  else
  {
    unint64_t v39 = v149 - v148 - 8;
    if (v39 < 8)
    {
      uint64_t v40 = 0;
      long long v41 = v148;
      goto LABEL_38;
    }
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = (v39 >> 3) + 1;
    long long v41 = &v148[8 * (v45 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v46 = v148 + 8;
    uint64_t v47 = v45 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      v43 += *(v46 - 1);
      v44 += *v46;
      v46 += 2;
      v47 -= 2;
    }
    while (v47);
    uint64_t v40 = v44 + v43;
    if (v45 != (v45 & 0x3FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_38:
        uint64_t v48 = *(void *)v41;
        v41 += 8;
        v40 += v48;
      }
      while (v41 != v149);
    }
    if (v40 <= 100) {
      int64_t v42 = 100;
    }
    else {
      int64_t v42 = v40;
    }
  }
LABEL_42:
  uint64_t v49 = *(void *)(v38 + 32);
  v140 = operator new(0x20uLL);
  long long v141 = xmmword_20B8890;
  strcpy((char *)v140, "VicinityChargingStationSearch");
  long long __p = 0uLL;
  uint64_t v143 = 0;
  long long v50 = sub_374CDC(v49, (uint64_t)&v140, (uint64_t *)&__p);
  sub_54214((uint64_t)v146, (uint64_t)v50);
  uint64_t v51 = __p;
  if ((void)__p)
  {
    uint64_t v52 = *((void *)&__p + 1);
    long long v53 = (void *)__p;
    if (*((void *)&__p + 1) != (void)__p)
    {
      do
      {
        if (*(char *)(v52 - 1) < 0) {
          operator delete(*(void **)(v52 - 24));
        }
        v52 -= 24;
      }
      while (v52 != v51);
      long long v53 = (void *)__p;
    }
    *((void *)&__p + 1) = v51;
    operator delete(v53);
  }
  if (SHIBYTE(v141) < 0) {
    operator delete(v140);
  }
  sub_FF912C((uint64_t)&__p, v146, *(void *)(v38 + 24));
  sub_FF95DC((uint64_t)&v140, *(void *)(v38 + 24), *(void *)(v38 + 32), &__p);
  LODWORD(v8) = HIDWORD(v143);
  int64x2_t v138 = 0uLL;
  uint64_t v139 = 0;
  long long v54 = operator new(2uLL);
  v135 = v54;
  *long long v54 = 0;
  v136 = v54 + 1;
  v137 = v54 + 1;
  uint64_t v55 = -941362695 * ((unint64_t)(v129[1] - *v129) >> 5);
  if (v55)
  {
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    double v58 = (double)*(unint64_t *)&v8 / ((double)v42 / 100.0);
    do
    {
      v131.n128_u64[0] = sub_3FA038(*(void *)(v128 + 24) + 160);
      v131.n128_u64[1] = v59;
      unint64_t v60 = (void *)sub_40F020(&v131, v56);
      uint64_t v62 = v61;
      uint64_t v63 = *(void *)&v148[8 * v56];
      double v64 = v58 * ((double)v63 / 100.0);
      if (v64 >= 0.0)
      {
        if (v64 < 4.50359963e15)
        {
          uint64_t v65 = (uint64_t)(v64 + v64) + 1;
LABEL_61:
          double v64 = (double)(v65 >> 1);
        }
      }
      else if (v64 > -4.50359963e15)
      {
        uint64_t v65 = (uint64_t)(v64 + v64);
        if (v65 >= 1) {
          --v65;
        }
        goto LABEL_61;
      }
      long long v66 = &v154[12 * v56];
      long long v67 = &v151[12 * v56];
      unint64_t v7 = v7 & 0xFFFFFFFF00000000 | *((unsigned int *)v66 + 2);
      int64_t v42 = v42 & 0xFFFFFFFF00000000 | *((unsigned int *)v67 + 2);
      sub_FF9130((uint64_t)&v131, *(void *)v66, v7, *(void *)v67, v42, v63, v57, fmax(v64, 1.0));
      uint64_t v68 = *(void *)&v148[8 * v56];
      sub_FF95E0((uint64_t)&v140, *v129 + 2336 * v56, (long long *)&v131, v60, v62, &v138);
      v130[0] = -21845 * ((v138.i32[2] - v138.i32[0]) >> 5);
      sub_32B600((uint64_t)&v135, v130);
      v57 += v68;
      ++v56;
    }
    while (v56 != v55);
  }
  uint64_t v69 = v128;
  uint64_t v70 = v113;
  sub_40B394(v113, (uint64_t)&v138, *(void *)(v128 + 24), *(void *)(v128 + 32));
  *(void *)(a6 + 16) = (unint64_t)sub_72688((uint64_t)v157);
  *(_DWORD *)(a6 + 24) = (unsigned __int16)sub_40B968(v113);
  sub_725A0((uint64_t)v157);
  uint64_t v71 = *v129;
  uint64_t v72 = v129[1];
  if (*v129 == v72)
  {
    int v73 = 0;
LABEL_71:
    LODWORD(v119) = 0;
    goto LABEL_72;
  }
  int v73 = 0;
  do
  {
    uint64_t v74 = sub_1005964(v71);
    v73 += (*(void *)(v74 + 104) - *(void *)(v74 + 96)) >> 2;
    v71 += 2336;
  }
  while (v71 != v72);
  uint64_t v75 = *v129;
  uint64_t v76 = v129[1];
  if (*v129 == v76) {
    goto LABEL_71;
  }
  LODWORD(v119) = 0;
  do
  {
    long long v77 = (void *)sub_1005964(v75);
    unint64_t v119 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v77[4] - v77[3]) >> 3)
         + v119
         - 0x79435E50D79435E5 * ((uint64_t)(v77[16] - v77[15]) >> 3);
    v75 += 2336;
  }
  while (v75 != v76);
LABEL_72:
  sub_FF5364((uint64_t)v130, *(void *)(v128 + 32));
  uint64_t v78 = v129[1] - *v129;
  if (!v78)
  {
    int v102 = 0;
    int v81 = 0;
LABEL_90:
    LODWORD(v106) = 0;
    goto LABEL_91;
  }
  int v111 = v73;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  int v81 = 0;
  uint64_t v82 = 0;
  uint64_t v114 = v78 / 2336;
  do
  {
    uint64_t v125 = v80;
    int v127 = v81;
    uint64_t v83 = *v129;
    v131.n128_u64[0] = sub_3FA038(*(void *)(v69 + 24) + 160);
    v131.n128_u64[1] = v84;
    uint64_t v85 = sub_40F020(&v131, v82);
    uint64_t v88 = v87;
    int v124 = (int *)v85;
    uint64_t v122 = v79;
    int v89 = (void *)(*a2 + v79);
    uint64_t v90 = (unsigned __int16 *)((char *)v135 + 2 * v82);
    uint64_t v91 = *v90;
    unsigned int v92 = v90[1];
    if (v92 <= v91) {
      uint64_t v93 = v91;
    }
    else {
      uint64_t v93 = v92;
    }
    __n128 v131 = 0uLL;
    v132 = 0;
    v95 = (unsigned char *)v89[4];
    v94 = (unsigned char *)v89[5];
    int64_t v96 = v94 - v95;
    if (v94 != v95)
    {
      if (0xCCCCCCCCCCCCCCCDLL * (v96 >> 4) >= 0x333333333333334) {
        sub_2E00();
      }
      unint64_t v97 = (char *)operator new(v96);
      v131.n128_u64[0] = (unint64_t)v97;
      v131.n128_u64[1] = (unint64_t)v97;
      v132 = &v97[16 * (v96 >> 4)];
      size_t v98 = 80 * ((v96 - 80) / 0x50uLL) + 80;
      memcpy(v97, v95, v98);
      v131.n128_u64[1] = (unint64_t)&v97[v98];
      uint64_t v70 = v113;
    }
    uint64_t v133 = v89[7];
    uint64_t v134 = 0;
    uint64_t v69 = v128;
    *(void *)&v120.f64[0] = v91 | (v93 << 16) | *(void *)&v120.f64[0] & 0xFFFFFFFF00000000;
    int v99 = sub_FF5384((uint64_t)v130, v83 + v125, (uint64_t)v89, (uint64_t)&v131, a3, *(unsigned __int8 *)(a4 + 16), *(void *)(v128 + 24), v86, v124, v88, v70, LODWORD(v120.f64[0]));
    if (v131.n128_u64[0])
    {
      v131.n128_u64[1] = v131.n128_u64[0];
      operator delete((void *)v131.n128_u64[0]);
    }
    ++v82;
    int v81 = v99 + v127;
    uint64_t v80 = v125 + 2336;
    uint64_t v79 = v122 + 64;
  }
  while (v114 != v82);
  uint64_t v100 = *v129;
  uint64_t v101 = v129[1];
  int v73 = v111;
  int v102 = 0;
  if (*v129 == v101) {
    goto LABEL_90;
  }
  do
  {
    uint64_t v103 = sub_1005964(v100);
    v102 += (*(void *)(v103 + 104) - *(void *)(v103 + 96)) >> 2;
    v100 += 2336;
  }
  while (v100 != v101);
  uint64_t v104 = *v129;
  uint64_t v105 = v129[1];
  if (*v129 == v105) {
    goto LABEL_90;
  }
  LODWORD(v106) = 0;
  do
  {
    int v107 = (void *)sub_1005964(v104);
    unint64_t v106 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v107[4] - v107[3]) >> 3)
         + v106
         - 0x79435E50D79435E5 * ((uint64_t)(v107[16] - v107[15]) >> 3);
    v104 += 2336;
  }
  while (v104 != v105);
LABEL_91:
  sub_FF68F8((uint64_t)v130, &v131);
  sub_33998(v69, (uint64_t)&v131);
  *(_DWORD *)(a6 + 40) = v81;
  *(_DWORD *)(a6 + 80) = v102 - v73;
  *(_DWORD *)(a6 + 84) = v106 - v119;
  *(void *)(a6 + 32) = (unint64_t)sub_72688((uint64_t)v157);
  if (v135)
  {
    v136 = v135;
    operator delete(v135);
  }
  if (v138.i64[0])
  {
    sub_40CAE4((uint64_t)&v138, (void **)v138.i64[0]);
    operator delete((void *)v138.i64[0]);
  }
  sub_FF5298(&v140);
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  int v108 = v147;
  if (v147)
  {
    do
    {
      uint64_t v110 = (void **)*v108;
      sub_55198((uint64_t)(v108 + 5));
      if (*((char *)v108 + 39) < 0) {
        operator delete(v108[2]);
      }
      operator delete(v108);
      int v108 = v110;
    }
    while (v110);
  }
  int v109 = v146[0];
  v146[0] = 0;
  if (v109) {
    operator delete(v109);
  }
  if (v148)
  {
    v149 = v148;
    operator delete(v148);
  }
  if (v151)
  {
    v152 = v151;
    operator delete(v151);
  }
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
}

void sub_FF50DC(_Unwind_Exception *a1)
{
  unint64_t v3 = *(void **)(v1 - 248);
  if (v3)
  {
    *(void *)(v1 - 240) = v3;
    operator delete(v3);
    uint64_t v4 = *(void **)(v1 - 224);
    if (!v4)
    {
LABEL_3:
      unint64_t v5 = *(void **)(v1 - 200);
      if (!v5) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v4 = *(void **)(v1 - 224);
    if (!v4) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 - 216) = v4;
  operator delete(v4);
  unint64_t v5 = *(void **)(v1 - 200);
  if (!v5) {
LABEL_4:
  }
    _Unwind_Resume(a1);
LABEL_7:
  *(void *)(v1 - 192) = v5;
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_FF5264()
{
  if (*(void *)(v0 - 248)) {
    JUMPOUT(0xFF5234);
  }
  JUMPOUT(0xFF5174);
}

void sub_FF5274()
{
  if (*(void *)(v0 - 248)) {
    JUMPOUT(0xFF5234);
  }
  JUMPOUT(0xFF5174);
}

__n128 sub_FF5284@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  return result;
}

void *sub_FF5298(void *a1)
{
  uint64_t v2 = (void *)a1[40];
  if (v2)
  {
    a1[41] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[37];
  if (v3)
  {
    a1[38] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[34];
  if (v4)
  {
    a1[35] = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)a1[31];
  if (v5)
  {
    a1[32] = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)a1[28];
  if (v6)
  {
    a1[29] = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)a1[24];
  if (v7)
  {
    a1[25] = v7;
    operator delete(v7);
  }
  double v8 = (void *)a1[21];
  if (v8)
  {
    a1[22] = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)a1[7];
  if (v9)
  {
    a1[8] = v9;
    operator delete(v9);
  }
  return a1;
}

void sub_FF533C()
{
  unk_25FD36F = 16641;
  word_25FD358 = 65;
  byte_25FD387 = 1;
  byte_25FD371 = 0;
}

double sub_FF5364(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = xmmword_20B8E30;
  double result = NAN;
  *(void *)(a1 + 24) = 0x7FFFFFFFFFFFFFFFLL;
  return result;
}

uint64_t sub_FF5384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9, uint64_t a10, uint64_t a11, unsigned int a12)
{
  uint64_t v12 = (uint64_t **)__chkstk_darwin();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  __n128 v131 = v20;
  uint64_t v133 = v19;
  uint64_t v22 = v21;
  long double v23 = v12;
  int v24 = *a9;
  int v138 = a9[1];
  int v136 = a9[2];
  int v135 = a9[3];
  sub_F3848C(&v166, *v12);
  v164 = 0;
  v163 = 0;
  unint64_t v165 = 0;
  unsigned __int16 v25 = sub_40B968(a11);
  sub_BF92CC((uint64_t)&v163, v25);
  uint64_t v129 = v14;
  v161 = 0;
  v160 = 0;
  unint64_t v162 = 0;
  unsigned __int16 v26 = sub_40B968(a11);
  sub_BF92CC((uint64_t)&v160, v26);
  if ((unsigned __int16)a12 == HIWORD(a12))
  {
    LOWORD(v137) = -1;
  }
  else
  {
    int v33 = a12;
    int v137 = 0xFFFF;
    do
    {
      uint64_t v34 = sub_40B954(a11, v33);
      uint64_t v35 = v34;
      if (*(_DWORD *)(v34 + 56) == v138 && *(_DWORD *)(v34 + 52) == v24) {
        int v37 = v33;
      }
      else {
        int v37 = v137;
      }
      int v137 = v37;
      uint64_t v38 = *(void *)v34;
      uint64_t v39 = *(void *)(v34 + 8);
      if (*(void *)v34 != v39)
      {
        while (*(unsigned char *)(v38 + 16) != 1)
        {
          v38 += 48;
          if (v38 == v39)
          {
            uint64_t v38 = *(void *)(v34 + 8);
            break;
          }
        }
      }
      sub_F38518((uint64_t)&v166, *(void *)v38, 1, *(void *)(v38 + 8), (uint64_t)&v302);
      if ((void)v302 != *((void *)&v302 + 1))
      {
        uint64_t v40 = -1;
        if (*(_DWORD *)(v35 + 52) && *(_DWORD *)(v35 + 56) != -1) {
          uint64_t v40 = sub_28CE70(v170, *(void *)(v35 + 52));
        }
        uint64_t v304 = v40;
      }
      long long v41 = v164;
      if ((unint64_t)v164 >= v165)
      {
        v164 = sub_D128A0((void **)&v163, (uint64_t)&v302);
        if ((void)v302)
        {
          *((void *)&v302 + 1) = v302;
          operator delete((void *)v302);
        }
      }
      else
      {
        *(void *)v164 = 0;
        *((void *)v41 + 1) = 0;
        *((void *)v41 + 2) = 0;
        *(_OWORD *)long long v41 = v302;
        *((void *)v41 + 2) = v303;
        long long v302 = 0uLL;
        uint64_t v303 = 0;
        *((void *)v41 + 3) = v304;
        v164 = v41 + 32;
      }
      uint64_t v42 = *(void *)v35;
      uint64_t v43 = *(void *)(v35 + 8);
      if (*(void *)v35 != v43)
      {
        while (*(unsigned char *)(v42 + 16))
        {
          v42 += 48;
          if (v42 == v43)
          {
            uint64_t v42 = *(void *)(v35 + 8);
            break;
          }
        }
      }
      sub_F38518((uint64_t)&v166, *(void *)v42, 0, *(void *)(v42 + 8), (uint64_t)&v302);
      if ((void)v302 != *((void *)&v302 + 1))
      {
        uint64_t v44 = -1;
        if (*(_DWORD *)(v35 + 52) && *(_DWORD *)(v35 + 56) != -1) {
          uint64_t v44 = sub_28CE70(v170, *(void *)(v35 + 52));
        }
        uint64_t v304 = v44;
      }
      uint64_t v45 = v161;
      if ((unint64_t)v161 < v162)
      {
        *(void *)v161 = 0;
        *((void *)v45 + 1) = 0;
        *((void *)v45 + 2) = 0;
        *(_OWORD *)uint64_t v45 = v302;
        *((void *)v45 + 2) = v303;
        long long v302 = 0uLL;
        uint64_t v303 = 0;
        *((void *)v45 + 3) = v304;
        v161 = v45 + 32;
      }
      else
      {
        v161 = sub_D128A0((void **)&v160, (uint64_t)&v302);
        if ((void)v302)
        {
          *((void *)&v302 + 1) = v302;
          operator delete((void *)v302);
        }
      }
      ++v33;
    }
    while ((unsigned __int16)v33 != HIWORD(a12));
  }
  sub_F30E44((uint64_t)&v302, *v23);
  sub_F7D728((uint64_t)v159, (uint64_t)&v302, 0);
  sub_F7F6F8(v159, v133, (uint64_t ***)&v163, v18, 0x7FFFFFFF, v16, -1, 0x7FFFFFFF, 0xFFFFFFFF, 0, 0xFFFFFFFF);
  sub_F809F4((uint64_t)v159, (uint64_t)v158);
  sub_33998((uint64_t)(v23 + 1), (uint64_t)v158);
  sub_F82704((uint64_t)v158, (uint64_t)&v302, 0);
  sub_F843E8(v158, v131, (uint64_t ***)&v160, v18, 0x7FFFFFFF, v16, -1, 0x7FFFFFFF, 0xFFFFFFFF, 0, 0xFFFFFFFF);
  sub_F851F0((uint64_t)v158, (uint64_t)v171);
  sub_33998((uint64_t)(v23 + 1), (uint64_t)v171);
  long double v27 = *v23;
  v171[23] = 19;
  strcpy(v171, "DrivingPathAnalyzer");
  long long v269 = 0uLL;
  uint64_t v270 = 0;
  int64x2_t v28 = sub_374CDC((uint64_t)v27, (uint64_t)v171, (uint64_t *)&v269);
  HIBYTE(v237) = 7;
  strcpy((char *)&v236, "default");
  long double v29 = (void *)sub_560F4(v28, (uint64_t)&v236);
  sub_1068CE4(v156, v27, v29, v16);
  int v132 = v24;
  if (SHIBYTE(v237) < 0) {
    operator delete((void *)v236);
  }
  uint64_t v30 = v269;
  if ((void)v269)
  {
    uint64_t v31 = *((void *)&v269 + 1);
    long double v32 = (void *)v269;
    if (*((void *)&v269 + 1) != (void)v269)
    {
      do
      {
        if (*(char *)(v31 - 1) < 0) {
          operator delete(*(void **)(v31 - 24));
        }
        v31 -= 24;
      }
      while (v31 != v30);
      long double v32 = (void *)v269;
    }
    *((void *)&v269 + 1) = v30;
    operator delete(v32);
  }
  if ((v171[23] & 0x80000000) != 0) {
    operator delete(*(void **)v171);
  }
  uint64_t v46 = (uint64_t)*v23;
  HIBYTE(v270) = 9;
  strcpy((char *)&v269, "EVRouting");
  long long v236 = 0uLL;
  uint64_t v237 = 0;
  uint64_t v47 = sub_374CDC(v46, (uint64_t)&v269, (uint64_t *)&v236);
  uint64_t v48 = (uint64_t)*v23;
  *(void *)v146 = operator new(0x20uLL);
  *(_OWORD *)&v146[8] = xmmword_20B8890;
  strcpy(*(char **)v146, "ChargingOverheadTimeEstimator");
  long long __p = 0;
  v142 = 0;
  uint64_t v143 = 0;
  uint64_t v49 = sub_374CDC(v48, (uint64_t)v146, (uint64_t *)&__p);
  sub_3F8E98((uint64_t)v171, v49);
  sub_3F9014((uint64_t)v155, v129, (uint64_t)v47, (long long *)v171);
  long long v50 = (void **)__p;
  if (__p)
  {
    uint64_t v51 = v142;
    uint64_t v52 = __p;
    if (v142 != __p)
    {
      do
      {
        if (*((char *)v51 - 1) < 0) {
          operator delete(*(v51 - 3));
        }
        v51 -= 3;
      }
      while (v51 != v50);
      uint64_t v52 = __p;
    }
    v142 = v50;
    operator delete(v52);
  }
  if ((v146[23] & 0x80000000) != 0) {
    operator delete(*(void **)v146);
  }
  uint64_t v53 = v236;
  if ((void)v236)
  {
    uint64_t v54 = *((void *)&v236 + 1);
    uint64_t v55 = (void *)v236;
    if (*((void *)&v236 + 1) != (void)v236)
    {
      do
      {
        if (*(char *)(v54 - 1) < 0) {
          operator delete(*(void **)(v54 - 24));
        }
        v54 -= 24;
      }
      while (v54 != v53);
      uint64_t v55 = (void *)v236;
    }
    *((void *)&v236 + 1) = v53;
    operator delete(v55);
  }
  if (SHIBYTE(v270) < 0) {
    operator delete((void *)v269);
  }
  char v148 = 0;
  int v149 = 0;
  *(void *)&v146[16] = 0x3E4CCCCD3F000000;
  uint64_t v151 = 0;
  uint64_t v152 = 0;
  uint64_t v150 = 0;
  v154 = 0;
  *(_OWORD *)v146 = xmmword_20B98A0;
  __int16 v147 = 256;
  long long v153 = xmmword_20F00F0;
  uint64_t v56 = (int64x2_t *)malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  int v57 = v132;
  v154 = v56;
  uint64_t v58 = v153;
  if ((void)v153)
  {
    uint64_t v59 = *((void *)&v153 + 1);
    unint64_t v60 = (v153 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v61 = (uint64_t *)v56;
    if (v60 < 3) {
      goto LABEL_74;
    }
    unint64_t v62 = v60 + 1;
    uint64_t v61 = &v56->i64[v62 & 0x3FFFFFFFFFFFFFFCLL];
    int64x2_t v63 = vdupq_n_s64(*((unint64_t *)&v153 + 1));
    double v64 = v56 + 1;
    uint64_t v65 = v62 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v64[-1] = v63;
      *double v64 = v63;
      v64 += 2;
      v65 -= 4;
    }
    while (v65);
    if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_74:
      long long v66 = &v56->i64[v58];
      do
        *v61++ = v59;
      while (v61 != v66);
    }
  }
  uint64_t v67 = sub_1005964((uint64_t)v22);
  uint64_t v68 = (*(void *)(v67 + 104) - *(void *)(v67 + 96)) >> 2;
  if (v68)
  {
    int v69 = 0;
    do
    {
      LODWORD(v269) = v69;
      *(void *)v171 = sub_1005B14((uint64_t)v22, (unsigned int *)&v269);
      if (sub_100597C(v22, (uint64_t *)v171, 0, 0))
      {
        *(_DWORD *)v171 = v69;
        *(void *)&long long v269 = sub_1005B14((uint64_t)v22, (unsigned int *)v171);
        sub_C744A4((uint64_t)v146, 1);
        sub_C74778(v146, (uint64_t *)&v269, (uint64_t)v171);
      }
      ++v69;
    }
    while (v68 != v69);
  }
  sub_EAFC08((uint64_t)&v269);
  sub_EAFC08((uint64_t)&v236);
  uint64_t v70 = (void *)a11;
  uint64_t v71 = sub_F7571C((uint64_t)v159);
  uint64_t v72 = *(unint64_t **)v71;
  int v73 = *(unint64_t **)(v71 + 8);
  if (*(unint64_t **)v71 != v73)
  {
    unsigned int v130 = 0;
    while (1)
    {
      unint64_t v74 = *v72;
      __int16 v75 = *v72 + a12;
      uint64_t v76 = sub_40B954((uint64_t)v70, v75);
      int v77 = *(_DWORD *)(v76 + 52);
      int v78 = *(_DWORD *)(v76 + 56);
      if (v77 == v57 && v78 == v138) {
        goto LABEL_84;
      }
      if (v77 == v136 && v78 == v135) {
        goto LABEL_84;
      }
      *(void *)v171 = off_243F3E0;
      *(void *)&v171[8] = v146;
      *(void *)&long long v172 = v171;
      int v134 = sub_F84778((uint64_t)v158, v74, (uint64_t)v171, &v236);
      if ((unsigned char *)v172 == v171)
      {
        (*(void (**)(unsigned char *))(*(void *)v171 + 32))(v171);
      }
      else if ((void)v172)
      {
        (*(void (**)(void))(*(void *)v172 + 40))();
      }
      if (sub_EAE144(&v236)) {
        goto LABEL_84;
      }
      *(void *)v171 = off_243F3E0;
      *(void *)&v171[8] = v146;
      *(void *)&long long v172 = v171;
      int v81 = sub_F7FCD8((uint64_t)v159, v74, (uint64_t)v171, &v269);
      if ((unsigned char *)v172 == v171)
      {
        (*(void (**)(unsigned char *))(*(void *)v171 + 32))(v171);
      }
      else if ((void)v172)
      {
        (*(void (**)(void))(*(void *)v172 + 40))();
      }
      sub_1069AF8((uint64_t)v156, &v269, v171);
      uint64_t v82 = *(char **)v171;
      if (*(void *)v171 == *(void *)&v171[8])
      {
        sub_1069AF8((uint64_t)v156, &v236, &__p);
        uint64_t v90 = (void **)__p;
        int v89 = v142;
        BOOL v83 = __p != v142;
        if (__p)
        {
          uint64_t v91 = __p;
          if (v142 != __p)
          {
            unsigned int v92 = v142;
            do
            {
              v94 = *(v92 - 3);
              v92 -= 3;
              uint64_t v93 = v94;
              if (v94)
              {
                *(v89 - 2) = v93;
                operator delete(v93);
              }
              int v89 = v92;
            }
            while (v92 != v90);
            uint64_t v91 = __p;
            uint64_t v70 = (void *)a11;
          }
          v142 = v90;
          operator delete(v91);
        }
        uint64_t v82 = *(char **)v171;
        if (!*(void *)v171)
        {
LABEL_121:
          if (!v83) {
            goto LABEL_122;
          }
          goto LABEL_83;
        }
      }
      else
      {
        BOOL v83 = 1;
        if (!*(void *)v171) {
          goto LABEL_121;
        }
      }
      unint64_t v84 = *(char **)&v171[8];
      uint64_t v85 = v82;
      if (*(char **)&v171[8] != v82)
      {
        uint64_t v86 = *(char **)&v171[8];
        do
        {
          uint64_t v88 = (void *)*((void *)v86 - 3);
          v86 -= 24;
          uint64_t v87 = v88;
          if (v88)
          {
            *((void *)v84 - 2) = v87;
            operator delete(v87);
          }
          unint64_t v84 = v86;
        }
        while (v86 != v82);
        uint64_t v85 = *(char **)v171;
        uint64_t v70 = (void *)a11;
      }
      *(void *)&v171[8] = v82;
      operator delete(v85);
      if (!v83)
      {
LABEL_122:
        *(_OWORD *)v171 = v269;
        *(void *)&v171[16] = v270;
        long long v269 = 0uLL;
        uint64_t v270 = 0;
        long long v172 = v271;
        uint64_t v173 = v272;
        uint64_t v272 = 0;
        long long v271 = 0uLL;
        *(_OWORD *)((char *)v176 + 14) = *(_OWORD *)((char *)v275 + 14);
        long long v175 = v274;
        v176[0] = v275[0];
        long long v174 = v273;
        long long v177 = v276;
        uint64_t v178 = v277;
        long long v276 = 0uLL;
        uint64_t v277 = 0;
        long long v179 = v278;
        uint64_t v180 = v279;
        long long v278 = 0uLL;
        uint64_t v279 = 0;
        long long v181 = v280;
        uint64_t v182 = v281;
        long long v280 = 0uLL;
        uint64_t v281 = 0;
        uint64_t v185 = v284;
        long long v183 = v282;
        long long v184 = v283;
        long long v186 = v285;
        uint64_t v187 = v286;
        long long v285 = 0uLL;
        uint64_t v286 = 0;
        long long v188 = v287;
        uint64_t v189 = v288;
        long long v287 = 0uLL;
        uint64_t v288 = 0;
        long long v190 = v289;
        unsigned int v192 = v291;
        if (v291 <= 1) {
          uint64_t v191 = v290;
        }
        long long v193 = v292;
        long long v200 = v299;
        long long v201 = v300;
        *(_OWORD *)v202 = *(_OWORD *)v301;
        *(void *)&v202[15] = *(void *)&v301[15];
        long long v196 = v295;
        long long v197 = v296;
        long long v198 = v297;
        long long v199 = v298;
        long long v194 = v293;
        long long v195 = v294;
        long long v203 = v236;
        uint64_t v204 = v237;
        uint64_t v237 = 0;
        long long v236 = 0uLL;
        long long v205 = v238;
        uint64_t v206 = v239;
        uint64_t v239 = 0;
        long long v238 = 0uLL;
        *(_OWORD *)((char *)v209 + 14) = *(_OWORD *)((char *)v242 + 14);
        long long v208 = v241;
        v209[0] = v242[0];
        long long v207 = v240;
        long long v210 = v243;
        uint64_t v211 = v244;
        long long v243 = 0uLL;
        uint64_t v244 = 0;
        long long v212 = v245;
        uint64_t v213 = v246;
        long long v245 = 0uLL;
        uint64_t v246 = 0;
        long long v214 = v247;
        uint64_t v215 = v248;
        long long v247 = 0uLL;
        uint64_t v248 = 0;
        uint64_t v218 = v251;
        long long v216 = v249;
        long long v217 = v250;
        long long v219 = v252;
        uint64_t v220 = v253;
        long long v252 = 0uLL;
        uint64_t v253 = 0;
        long long v221 = v254;
        uint64_t v222 = v255;
        long long v254 = 0uLL;
        uint64_t v255 = 0;
        long long v223 = v256;
        unsigned int v225 = v258;
        if (v258 <= 1) {
          uint64_t v224 = v257;
        }
        long long v226 = v259;
        long long v233 = v266;
        long long v234 = v267;
        *(_OWORD *)v235 = *(_OWORD *)v268;
        *(void *)&v235[15] = *(void *)&v268[15];
        long long v229 = v262;
        long long v230 = v263;
        long long v231 = v264;
        long long v232 = v265;
        long long v227 = v260;
        long long v228 = v261;
        sub_EA9DBC((char **)&v139, (uint64_t)v171, 2uLL);
        sub_EA77C0((uint64_t)&__p, (uint64_t)&v139);
        v95 = v139;
        if (v139)
        {
          uint64_t v96 = (uint64_t)v140;
          unint64_t v97 = v139;
          if (v140 != v139)
          {
            do
              uint64_t v96 = sub_405F44(v96 - 472);
            while ((void *)v96 != v95);
            unint64_t v97 = v139;
          }
          v140 = v95;
          operator delete(v97);
        }
        if ((void)v221)
        {
          *((void *)&v221 + 1) = v221;
          operator delete((void *)v221);
        }
        if ((void)v219)
        {
          *((void *)&v219 + 1) = v219;
          operator delete((void *)v219);
        }
        if ((void)v214)
        {
          *((void *)&v214 + 1) = v214;
          operator delete((void *)v214);
        }
        if ((void)v212)
        {
          *((void *)&v212 + 1) = v212;
          operator delete((void *)v212);
        }
        uint64_t v98 = v210;
        if ((void)v210)
        {
          uint64_t v99 = *((void *)&v210 + 1);
          uint64_t v100 = (void *)v210;
          if (*((void *)&v210 + 1) != (void)v210)
          {
            do
            {
              uint64_t v101 = *(void **)(v99 - 24);
              if (v101)
              {
                *(void *)(v99 - 16) = v101;
                operator delete(v101);
              }
              v99 -= 56;
            }
            while (v99 != v98);
            uint64_t v100 = (void *)v210;
          }
          *((void *)&v210 + 1) = v98;
          operator delete(v100);
        }
        if ((void)v205)
        {
          *((void *)&v205 + 1) = v205;
          operator delete((void *)v205);
        }
        if (SHIBYTE(v204) < 0) {
          operator delete((void *)v203);
        }
        if ((void)v188)
        {
          *((void *)&v188 + 1) = v188;
          operator delete((void *)v188);
        }
        if ((void)v186)
        {
          *((void *)&v186 + 1) = v186;
          operator delete((void *)v186);
        }
        if ((void)v181)
        {
          *((void *)&v181 + 1) = v181;
          operator delete((void *)v181);
        }
        if ((void)v179)
        {
          *((void *)&v179 + 1) = v179;
          operator delete((void *)v179);
        }
        uint64_t v102 = v177;
        if ((void)v177)
        {
          uint64_t v103 = *((void *)&v177 + 1);
          uint64_t v104 = (void *)v177;
          if (*((void *)&v177 + 1) != (void)v177)
          {
            do
            {
              uint64_t v105 = *(void **)(v103 - 24);
              if (v105)
              {
                *(void *)(v103 - 16) = v105;
                operator delete(v105);
              }
              v103 -= 56;
            }
            while (v103 != v102);
            uint64_t v104 = (void *)v177;
          }
          *((void *)&v177 + 1) = v102;
          operator delete(v104);
        }
        if ((void)v172)
        {
          *((void *)&v172 + 1) = v172;
          operator delete((void *)v172);
        }
        if ((v171[23] & 0x80000000) != 0) {
          operator delete(*(void **)v171);
        }
        sub_1002D84(v22, (uint64_t)&__p, v81 ^ 1, v134 ^ 1, (unint64_t **)v171);
        unint64_t v106 = *(unsigned int **)v171;
        if (v145 < 0) {
          operator delete(v144);
        }
        int v107 = (void **)__p;
        if (__p)
        {
          uint64_t v108 = (uint64_t)v142;
          int v109 = __p;
          if (v142 != __p)
          {
            do
              uint64_t v108 = sub_405F44(v108 - 472);
            while ((void **)v108 != v107);
            int v109 = __p;
          }
          v142 = v107;
          operator delete(v109);
        }
        uint64_t v110 = sub_40B984(v70, v75);
        sub_10024FC((uint64_t)v171, v75, v110);
        int v57 = v132;
        sub_10052A4((uint64_t)v22, v106 + 1, (__n128 *)v171);
        ++v130;
        if (v106) {
          operator delete(v106);
        }
        goto LABEL_84;
      }
LABEL_83:
      int v57 = v132;
LABEL_84:
      if (++v72 == v73) {
        goto LABEL_181;
      }
    }
  }
  unsigned int v130 = 0;
LABEL_181:
  if ((_WORD)v137 == 0xFFFF)
  {
    uint64_t v115 = v130;
  }
  else
  {
    uint64_t v111 = sub_40B984(v70, v137);
    uint64_t v112 = sub_100596C((uint64_t)v22);
    uint64_t v114 = *(unsigned int **)v112;
    uint64_t v113 = *(unsigned int **)(v112 + 8);
    if (*(unsigned int **)v112 != v113)
    {
      do
      {
        sub_10024FC((uint64_t)v171, v137, v111);
        sub_10052A4((uint64_t)v22, v114, (__n128 *)v171);
        v114 += 42;
      }
      while (v114 != v113);
    }
    uint64_t v115 = v130 + 1;
  }
  sub_405F44((uint64_t)&v236);
  sub_405F44((uint64_t)&v269);
  if (v154) {
    free(v154);
  }
  if (v157 < 0) {
    operator delete(v156[12]);
  }
  sub_BF0DE8(v158);
  sub_BF0DE8(v159);
  sub_C77084(&v302);
  uint64_t v116 = v160;
  if (v160)
  {
    uint64_t v117 = v161;
    float64x2_t v118 = v160;
    if (v161 != v160)
    {
      unint64_t v119 = v161;
      do
      {
        float64x2_t v121 = (void *)*((void *)v119 - 4);
        v119 -= 32;
        float64x2_t v120 = v121;
        if (v121)
        {
          *((void *)v117 - 3) = v120;
          operator delete(v120);
        }
        uint64_t v117 = v119;
      }
      while (v119 != v116);
      float64x2_t v118 = v160;
    }
    v161 = v116;
    operator delete(v118);
  }
  uint64_t v122 = v163;
  if (v163)
  {
    float64x2_t v123 = v164;
    int v124 = v163;
    if (v164 != v163)
    {
      uint64_t v125 = v164;
      do
      {
        int v127 = (void *)*((void *)v125 - 4);
        v125 -= 32;
        double v126 = v127;
        if (v127)
        {
          *((void *)v123 - 3) = v126;
          operator delete(v126);
        }
        float64x2_t v123 = v125;
      }
      while (v125 != v122);
      int v124 = v163;
    }
    v164 = v122;
    operator delete(v124);
  }
  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }
  sub_3A6318(v167);
  return v115;
}

void sub_FF6680(_Unwind_Exception *a1)
{
  sub_405F44((uint64_t)&STACK[0x3600]);
  sub_405F44((uint64_t)&STACK[0x37D8]);
  unint64_t v3 = *(void **)(v1 + 72);
  if (v3) {
    free(v3);
  }
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete(*(void **)(v1 + 240));
  }
  sub_BF0DE8(&STACK[0x2F8]);
  sub_BF0DE8(&STACK[0x1260]);
  sub_C77084(&STACK[0x39B0]);
  sub_C64510((void **)&STACK[0x21C8]);
  sub_C64510((void **)&STACK[0x21E0]);
  sub_C62E9C(&STACK[0x21F8]);
  _Unwind_Resume(a1);
}

__n128 sub_FF68F8@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 8);
  *a2 = result;
  a2[1].n128_u64[0] = *(void *)(a1 + 24);
  return result;
}

void sub_FF6910()
{
}

void *sub_FF6924(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_243F3E0;
  result[1] = v3;
  return result;
}

uint64_t sub_FF696C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_243F3E0;
  a2[1] = v2;
  return result;
}

BOOL sub_FF6998(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = v2[8];
  uint64_t v5 = v2[7] - 1;
  unint64_t v6 = 0x2127599BF4325C37 * (*a2 ^ ((unint64_t)*a2 >> 23));
  uint64_t v7 = v2[9];
  uint64_t v8 = (v6 ^ (v6 >> 47)) & v5;
  uint64_t v9 = *(void *)(v7 + 8 * v8);
  if (v4 == v9)
  {
LABEL_2:
    uint64_t v8 = -1;
  }
  else if (v2[5])
  {
    uint64_t v11 = v2[4];
    uint64_t v12 = 1;
    while (v11 == v9 || v9 != v3)
    {
      uint64_t v8 = (v8 + v12) & v5;
      uint64_t v9 = *(void *)(v7 + 8 * v8);
      ++v12;
      if (v4 == v9) {
        goto LABEL_2;
      }
    }
  }
  else
  {
    uint64_t v13 = 1;
    while (v9 != v3)
    {
      uint64_t v8 = (v8 + v13) & v5;
      uint64_t v9 = *(void *)(v7 + 8 * v8);
      ++v13;
      if (v4 == v9) {
        goto LABEL_2;
      }
    }
  }
  return v8 != -1;
}

uint64_t sub_FF6A50(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3msl7routing36PathGraphChargingStationAugmentation3runERNS0_9PathGraphINS0_11DrivingModeEEERKNS0_"
                     "13QueryTerminalINS0_20DrivingRoutingNodeIdEEERKNS0_16GeoQueryTerminalIS7_EERKNS0_19DrivingCostFunct"
                     "ionENS0_18RequestTrafficTypeERKNS0_20RequestEVInformationENS0_41UserLegChargingStationPreferencesIt"
                     "eratorERKNS0_26SuggestedChargingFunctionsENS_6common6detail12IntegerRangeINSQ_16TypeSafeIntegralINS"
                     "0_27ChargingFunctionMapIdStructEtLt65535EEELb0ELm1EEEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3msl7routing36PathGraphChargingStationAugmentation3runERNS0_9PathGraphINS0_11DrivingMo"
                                "deEEERKNS0_13QueryTerminalINS0_20DrivingRoutingNodeIdEEERKNS0_16GeoQueryTerminalIS7_EERK"
                                "NS0_19DrivingCostFunctionENS0_18RequestTrafficTypeERKNS0_20RequestEVInformationENS0_41Us"
                                "erLegChargingStationPreferencesIteratorERKNS0_26SuggestedChargingFunctionsENS_6common6de"
                                "tail12IntegerRangeINSQ_16TypeSafeIntegralINS0_27ChargingFunctionMapIdStructEtLt65535EEELb0ELm1EEEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3msl7routing36PathGraphChargingStationAugmentation3runERNS0_9PathGraphINS0_11DrivingModeEEERKNS0_13QueryTerminalINS0_20DrivingRoutingNodeIdEEERKNS0_16GeoQueryTerminalIS7_EERKNS0_19DrivingCostFunctionENS0_18RequestTrafficTypeERKNS0_20RequestEVInformationENS0_41UserLegChargingStationPreferencesIteratorERKNS0_26SuggestedChargingFunctionsENS_6common6detail12IntegerRangeINSQ_16TypeSafeIntegralINS0_27ChargingFunctionMapIdStructEtLt65535EEELb0ELm1EEEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3msl7routing36PathGraphChargingStationAugmentation3runERNS0_9PathGraphINS0_11DrivingModeEEERKNS0_13QueryTerminalINS0_20DrivingRoutingNodeIdEEERKNS0_16GeoQueryTerminalIS7_EERKNS0_19DrivingCostFunctionENS0_18RequestTrafficTypeERKNS0_20RequestEVInformationENS0_41UserLegChargingStationPreferencesIteratorERKNS0_26SuggestedChargingFunctionsENS_6common6detail12IntegerRangeINSQ_16TypeSafeIntegralINS0_27ChargingFunctionMapIdStructEtLt65535EEELb0ELm1EEEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_FF6AC0()
{
}

void sub_FF6ACC()
{
  unk_25FD39F = 16641;
  word_25FD388 = 65;
  byte_25FD3B7 = 1;
  byte_25FD3A1 = 0;
}

__n128 sub_FF6AF4(uint64_t a1, uint64_t *a2, __n128 *a3)
{
  uint64_t v3 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v3;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  __n128 result = *a3;
  *(__n128 *)(a1 + 16) = *a3;
  *(void *)(a1 + 32) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_FF6B28(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v21 = 0;
  *(void *)uint64_t v22 = operator new(0x28uLL);
  *(_OWORD *)&v22[8] = xmmword_20B9390;
  strcpy(*(char **)v22, "VicinityChargingStationExtractor");
  long long __p = 0;
  unsigned int v20 = 0;
  unint64_t v6 = sub_374CDC((uint64_t)a2, (uint64_t)v22, (uint64_t *)&__p);
  sub_FF7020((void *)a1, (uint64_t)v6);
  uint64_t v7 = (void **)__p;
  if (__p)
  {
    uint64_t v8 = v20;
    uint64_t v9 = __p;
    if (v20 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = __p;
    }
    unsigned int v20 = v7;
    operator delete(v9);
  }
  if ((v22[23] & 0x80000000) != 0) {
    operator delete(*(void **)v22);
  }
  *(void *)(a1 + 16) = sub_376F8C(a2);
  uint64_t v10 = sub_3750CC(a2);
  *(void *)(a1 + 32) = &unk_20E1710;
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = &unk_20E1710;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = &unk_20E1710;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = &unk_20E1710;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = &unk_20E1710;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = &unk_20E1710;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = &unk_20E1710;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = &unk_20E1710;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = &unk_20E1710;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = &unk_20E1710;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = &unk_20E1710;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 560) = &unk_20E1710;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 608) = &unk_20E1710;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 616) = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 656) = &unk_20E1710;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 680) = 0;
  *(void *)(a1 + 704) = &unk_20E1710;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 752) = &unk_20E1710;
  *(void *)(a1 + 792) = 0;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  *(void *)(a1 + 776) = 0;
  v22[23] = 9;
  uint64_t v21 = 0;
  strcpy(v22, "EVRouting");
  long long __p = 0;
  unsigned int v20 = 0;
  uint64_t v11 = sub_374CDC((uint64_t)a2, (uint64_t)v22, (uint64_t *)&__p);
  uint64_t v17 = operator new(0x28uLL);
  long long v18 = xmmword_20B8FD0;
  strcpy((char *)v17, "charging_station_poi_quad_node_level");
  *(_DWORD *)(a1 + 800) = sub_FF6E8C(v11, (uint64_t)&v17);
  if (SHIBYTE(v18) < 0) {
    operator delete(v17);
  }
  uint64_t v12 = (void **)__p;
  if (__p)
  {
    uint64_t v13 = v20;
    uint64_t v14 = __p;
    if (v20 != __p)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      uint64_t v14 = __p;
    }
    unsigned int v20 = v12;
    operator delete(v14);
  }
  if ((v22[23] & 0x80000000) != 0) {
    operator delete(*(void **)v22);
  }
  uint64_t v15 = (char **)sub_37D0C0(a3);
  *(_DWORD *)(a1 + 804) = sub_89DD4(v15);
  return a1;
}

void sub_FF6E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1A668(&a16);
  if (a24 < 0) {
    operator delete(a19);
  }
  sub_328138(v24);
  _Unwind_Resume(a1);
}

void sub_FF6E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xFF6E60);
}

uint64_t sub_FF6E8C(void *a1, uint64_t a2)
{
  uint64_t v2 = sub_58070(a1, a2);
  if (!v2 || *((_DWORD *)v2 + 12) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return *((double *)v2 + 5);
}

void sub_FF6F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_FF6F50(uint64_t a1, uint64_t a2)
{
  long long v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_295BE0(*(void *)(a1 + 24), a2, (unint64_t *)&v6);
  uint64_t v3 = v6;
  uint64_t v4 = v7;
  if (v6 != v7)
  {
    do
    {
      int v5 = *(_DWORD *)(a1 + 800);
      unsigned int v9 = *v3 >> ((sub_511FC(*v3) - 2 * v5) & 0xFE);
      sub_FF8208(a1 + 32, &v9, &v9, (uint64_t)v10);
      ++v3;
    }
    while (v3 != v4);
    uint64_t v3 = v6;
  }
  if (v3)
  {
    uint64_t v7 = v3;
    operator delete(v3);
  }
}

void sub_FF7000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_FF7020(void *a1, uint64_t a2)
{
  long long __p = operator new(0x38uLL);
  long long v6 = xmmword_20B9A20;
  strcpy((char *)__p, "extra_search_radius_after_first_ac_charging_poi_km");
  *a1 = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x38uLL);
  long long v6 = xmmword_20B9A20;
  strcpy((char *)__p, "extra_search_radius_after_first_dc_charging_poi_km");
  a1[1] = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_FF711C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_FF713C@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = &unk_20E1710;
  a4[1] = 0;
  a4[2] = 0;
  a4[3] = 0;
  a4[5] = 0;
  a4[6] = &unk_20E1710;
  a4[8] = 0;
  a4[9] = 0;
  a4[7] = 0;
  a4[11] = 0;
  a4[12] = &unk_20E1710;
  a4[14] = 0;
  a4[15] = 0;
  a4[13] = 0;
  a4[17] = 0;
  a4[18] = &unk_20E1710;
  a4[19] = 0;
  a4[20] = 0;
  a4[21] = 0;
  a4[23] = 0;
  a4[24] = &unk_20E1710;
  a4[26] = 0;
  a4[27] = 0;
  a4[25] = 0;
  a4[29] = 0;
  a4[30] = &unk_20E1710;
  a4[32] = 0;
  a4[33] = 0;
  a4[31] = 0;
  a4[35] = 0;
  a4[36] = &unk_20E1710;
  a4[38] = 0;
  a4[39] = 0;
  a4[37] = 0;
  a4[41] = 0;
  a4[42] = &unk_20E1710;
  a4[43] = 0;
  a4[44] = 0;
  a4[45] = 0;
  a4[47] = 0;
  a4[48] = &unk_20E1710;
  a4[49] = 0;
  a4[50] = 0;
  a4[51] = 0;
  a4[53] = 0;
  a4[54] = &unk_20E1710;
  a4[55] = 0;
  a4[56] = 0;
  a4[57] = 0;
  a4[59] = 0;
  a4[60] = &unk_20E1710;
  a4[65] = 0;
  a4[61] = 0;
  a4[62] = 0;
  a4[63] = 0;
  a4[66] = &unk_20E1710;
  a4[71] = 0;
  a4[68] = 0;
  a4[67] = 0;
  a4[69] = 0;
  a4[72] = &unk_20E1710;
  a4[77] = 0;
  a4[74] = 0;
  a4[73] = 0;
  a4[75] = 0;
  a4[78] = &unk_20E1710;
  a4[83] = 0;
  a4[80] = 0;
  a4[79] = 0;
  a4[81] = 0;
  a4[84] = &unk_20E1710;
  a4[89] = 0;
  a4[86] = 0;
  a4[85] = 0;
  a4[87] = 0;
  a4[90] = &unk_20E1710;
  a4[95] = 0;
  a4[92] = 0;
  a4[91] = 0;
  a4[93] = 0;
  if (!(result[96]
       + result[90]
       + result[84]
       + result[78]
       + result[72]
       + result[66]
       + result[60]
       + result[54]
       + result[48]
       + result[42]
       + result[36]
       + result[30]
       + result[24]
       + result[18]
       + result[6]
       + result[12]))
    return result;
  uint64_t v7 = (uint64_t)result;
  unsigned int v9 = (char *)result[4];
  uint64_t v8 = (unsigned int *)result[5];
  if (*v9 > -2)
  {
    if ((char *)result[4] != &v9[result[7]]) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v10 = (char *)result[4];
    do
    {
      unint64_t v11 = (__clz(__rbit64(((*(void *)v10 >> 7) & ~*(void *)v10 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v10 += v11;
      v8 += v11;
    }
    while (*v10 < -1);
    if (v10 != &v9[result[7]]) {
      goto LABEL_8;
    }
  }
  uint64_t v18 = 1;
  unsigned int v19 = (char **)(result + 4);
  do
  {
    uint64_t v22 = (char **)&result[6 * v18 + 4];
    uint64_t v8 = (unsigned int *)v19[7];
    if (**v22 > -2)
    {
      unsigned int v20 = *v22;
    }
    else
    {
      unsigned int v20 = *v22;
      do
      {
        unint64_t v23 = (__clz(__rbit64(((*(void *)v20 >> 7) & ~*(void *)v20 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v20 += v23;
        v8 += v23;
      }
      while (*v20 < -1);
    }
    BOOL v21 = v20 != &v19[9][(void)*v22] || ++v18 == 16;
    unsigned int v19 = v22;
  }
  while (!v21);
LABEL_8:
  unsigned int v27 = *v8;
  sub_383CC(&v27, (uint64_t)v26);
  double v13 = sub_35C98((uint64_t)v26, v12) * 100.0;
  if (v13 >= 0.0)
  {
    double v14 = v13;
    if (v13 >= 4.50359963e15) {
      goto LABEL_16;
    }
    uint64_t v15 = (uint64_t)(v13 + v13) + 1;
  }
  else
  {
    double v14 = v13;
    if (v13 <= -4.50359963e15) {
      goto LABEL_16;
    }
    uint64_t v15 = (uint64_t)(v13 + v13);
    if (v15 >= 1) {
      --v15;
    }
  }
  double v14 = (double)(v15 >> 1);
LABEL_16:
  double v16 = 9.22337204e18;
  if (v14 < 9.22337204e18)
  {
    if (v13 >= 0.0)
    {
      if (v13 < 4.50359963e15)
      {
        uint64_t v17 = (uint64_t)(v13 + v13) + 1;
LABEL_34:
        double v13 = (double)(v17 >> 1);
      }
    }
    else if (v13 > -4.50359963e15)
    {
      uint64_t v17 = (uint64_t)(v13 + v13);
      if (v17 >= 1) {
        --v17;
      }
      goto LABEL_34;
    }
    double v16 = (double)(uint64_t)v13;
  }
  if (*(_DWORD *)(v7 + 800))
  {
    unsigned int v24 = ((double)a2 / v16 + 1.0);
    uint64_t v25 = ((double)a3 / v16 + 1.0);
  }
  else
  {
    unsigned int v24 = 0;
    uint64_t v25 = 0;
  }
  return (void *)sub_FF7568(v7, v24, v25, vcvtpd_u64_f64((double)*(uint64_t *)v7 / v16), vcvtpd_u64_f64((double)*(uint64_t *)(v7 + 8) / v16), (uint64_t)a4);
}

void sub_FF7540(_Unwind_Exception *a1)
{
  sub_328138(v1);
  _Unwind_Resume(a1);
}

void sub_FF7554(_Unwind_Exception *a1)
{
  sub_328138(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_FF7568(uint64_t a1, unsigned int a2, uint64_t a3, __int16 a4, __int16 a5, uint64_t a6)
{
  v138[0] = &unk_20E1710;
  memset(&v138[1], 0, 24);
  v138[5] = 0;
  v138[6] = &unk_20E1710;
  v138[11] = 0;
  memset(&v138[7], 0, 24);
  v138[12] = &unk_20E1710;
  memset(&v138[13], 0, 24);
  v138[17] = 0;
  v138[18] = &unk_20E1710;
  memset(&v138[19], 0, 24);
  v138[23] = 0;
  v138[24] = &unk_20E1710;
  memset(&v138[25], 0, 24);
  v138[29] = 0;
  v138[30] = &unk_20E1710;
  v138[35] = 0;
  memset(&v138[31], 0, 24);
  v138[36] = &unk_20E1710;
  memset(&v138[37], 0, 24);
  v138[41] = 0;
  v138[42] = &unk_20E1710;
  v138[47] = 0;
  memset(&v138[43], 0, 24);
  v138[48] = &unk_20E1710;
  memset(&v138[49], 0, 24);
  v138[53] = 0;
  v138[54] = &unk_20E1710;
  v138[59] = 0;
  memset(&v138[55], 0, 24);
  v138[65] = 0;
  v138[60] = &unk_20E1710;
  memset(&v138[61], 0, 24);
  v138[66] = &unk_20E1710;
  v138[71] = 0;
  memset(&v138[67], 0, 24);
  v138[72] = &unk_20E1710;
  v138[77] = 0;
  memset(&v138[73], 0, 24);
  v138[78] = &unk_20E1710;
  v138[83] = 0;
  memset(&v138[79], 0, 24);
  v138[84] = &unk_20E1710;
  v138[89] = 0;
  memset(&v138[85], 0, 24);
  v138[90] = &unk_20E1710;
  v138[95] = 0;
  memset(&v138[91], 0, 24);
  v137[0] = &unk_20E1710;
  memset(&v137[1], 0, 24);
  v137[5] = 0;
  v137[6] = &unk_20E1710;
  v137[11] = 0;
  v137[12] = &unk_20E1710;
  memset(&v137[7], 0, 24);
  memset(&v137[13], 0, 24);
  v137[17] = 0;
  v137[18] = &unk_20E1710;
  memset(&v137[19], 0, 24);
  v137[23] = 0;
  v137[24] = &unk_20E1710;
  memset(&v137[25], 0, 24);
  v137[29] = 0;
  v137[30] = &unk_20E1710;
  v137[35] = 0;
  v137[36] = &unk_20E1710;
  memset(&v137[31], 0, 24);
  memset(&v137[37], 0, 24);
  v137[41] = 0;
  v137[42] = &unk_20E1710;
  v137[47] = 0;
  memset(&v137[43], 0, 24);
  v137[48] = &unk_20E1710;
  memset(&v137[49], 0, 24);
  v137[53] = 0;
  v137[54] = &unk_20E1710;
  v137[59] = 0;
  memset(&v137[55], 0, 24);
  v137[65] = 0;
  v137[60] = &unk_20E1710;
  memset(&v137[61], 0, 24);
  v137[66] = &unk_20E1710;
  v137[71] = 0;
  memset(&v137[67], 0, 24);
  v137[72] = &unk_20E1710;
  v137[77] = 0;
  memset(&v137[73], 0, 24);
  v137[78] = &unk_20E1710;
  v137[83] = 0;
  memset(&v137[79], 0, 24);
  v137[84] = &unk_20E1710;
  v137[89] = 0;
  memset(&v137[85], 0, 24);
  v137[90] = &unk_20E1710;
  v137[95] = 0;
  memset(&v137[91], 0, 24);
  long long v135 = 0u;
  long long v136 = 0u;
  long long v6 = *(char **)(a1 + 32);
  uint64_t v7 = *(unsigned int **)(a1 + 40);
  uint64_t v8 = v6;
  if (*v6 <= -2)
  {
    do
    {
      unint64_t v9 = (__clz(__rbit64(((*v8 >> 7) & ~*v8 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      uint64_t v8 = (void *)((char *)v8 + v9);
      v7 += v9;
    }
    while (*(char *)v8 < -1);
  }
  uint64_t v10 = &v6[*(void *)(a1 + 56)];
  if (v8 == (void *)v10)
  {
    double v12 = (char **)(a1 + 80);
    uint64_t v13 = 1;
    uint64_t v14 = a1 + 32;
    while (1)
    {
      uint64_t v7 = *(unsigned int **)(v14 + 56);
      uint64_t v8 = *v12;
      if (**v12 <= -2)
      {
        do
        {
          unint64_t v15 = (__clz(__rbit64(((*v8 >> 7) & ~*v8 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          uint64_t v8 = (void *)((char *)v8 + v15);
          v7 += v15;
        }
        while (*(char *)v8 < -1);
      }
      uint64_t v10 = &(*v12)[*(void *)(v14 + 72)];
      if (v8 != (void *)v10) {
        break;
      }
      uint64_t v14 = a1 + 32 + 48 * v13++;
      double v12 = (char **)(v14 + 48);
      if (v13 == 16)
      {
        double v16 = 0;
        goto LABEL_29;
      }
    }
    uint64_t v11 = a3;
  }
  else
  {
    uint64_t v11 = a3;
    double v12 = (char **)(a1 + 32);
  }
  uint64_t v17 = (char **)(a1 + 800);
  do
  {
    while (1)
    {
      LODWORD(v131) = 0;
      sub_FF887C((uint64_t)&v135, v7, (int *)&v131);
      sub_ED2D48((uint64_t)v137, v7, (uint64_t)&v131);
      uint64_t v18 = v132;
      uint64_t v19 = *(void *)(v131 + 8);
      if (v133) {
        *(void *)(v19 + 8 * v132) = *v7;
      }
      *(_DWORD *)(v19 + 8 * v18 + 4) = *v7;
      sub_ED2D48((uint64_t)v138, v7, (uint64_t)&v131);
      unint64_t v20 = v131;
      if (v133) {
        *(void *)(*(void *)(v131 + 8) + 8 * v132) = *v7;
      }
      *(_WORD *)(*(void *)(v20 + 8) + 8 * v132 + 6) = v11;
      int v21 = *((char *)v8 + 1);
      uint64_t v8 = (void *)((char *)v8 + 1);
      ++v7;
      if (v21 <= -2)
      {
        do
        {
          unint64_t v22 = (__clz(__rbit64(((*v8 >> 7) & ~*v8 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          uint64_t v8 = (void *)((char *)v8 + v22);
          v7 += v22;
        }
        while (*(char *)v8 < -1);
      }
      if (v8 == (void *)v10) {
        break;
      }
      if (!v12) {
        goto LABEL_28;
      }
    }
    unint64_t v23 = v12 + 6;
    if (v12 + 6 == v17) {
      break;
    }
    while (1)
    {
      unsigned int v24 = v23;
      uint64_t v25 = v12[6];
      uint64_t v7 = (unsigned int *)v12[7];
      uint64_t v8 = v25;
      if (*v25 <= -2)
      {
        do
        {
          unint64_t v26 = (__clz(__rbit64(((*v8 >> 7) & ~*v8 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          uint64_t v8 = (void *)((char *)v8 + v26);
          v7 += v26;
        }
        while (*(char *)v8 < -1);
      }
      uint64_t v10 = &v12[9][(void)v25];
      if (v8 != (void *)v10) {
        break;
      }
      unint64_t v23 = v24 + 6;
      double v12 = v24;
      if (v24 + 6 == v17) {
        goto LABEL_28;
      }
    }
    double v12 = v24;
  }
  while (v24);
LABEL_28:
  double v16 = (char *)v135;
  uint64_t v27 = *((void *)&v136 + 1);
  for (i = v11; *((void *)&v136 + 1) != (uint64_t)(*((void *)&v135 + 1) - v135) >> 3; uint64_t v27 = *((void *)&v136 + 1))
  {
    uint64_t v30 = &v16[8 * v27];
    unsigned int v31 = *((unsigned __int16 *)v30 + 2);
    unsigned int v134 = *(_DWORD *)v30;
    sub_ED2D48((uint64_t)v137, &v134, (uint64_t)&v131);
    uint64_t v32 = v132;
    uint64_t v33 = *(void *)(v131 + 8);
    if (v133) {
      *(void *)(v33 + 8 * v132) = v134;
    }
    uint64_t v34 = 0;
    uint64_t v35 = *(unsigned int *)(v33 + 8 * v32 + 4);
    unint64_t v36 = 265 * ((~v35 + (v35 << 21)) ^ ((unint64_t)(~v35 + (v35 << 21)) >> 24));
    unint64_t v37 = 2147483649u * ((21 * (v36 ^ (v36 >> 14))) ^ ((21 * (v36 ^ (v36 >> 14))) >> 28));
    uint64_t v38 = &v138[6 * (((BYTE1(v37) ^ BYTE2(v37)) ^ BYTE3(v37)) & 0xF)];
    unint64_t v39 = v37 >> 7;
    uint64_t v40 = v38[3];
    uint64_t v41 = 0x101010101010101 * (v37 & 0x7F);
    while (1)
    {
      unint64_t v42 = v39 & v40;
      uint64_t v43 = *(void *)(*v38 + v42);
      unint64_t v44 = ((v43 ^ v41) - 0x101010101010101) & ~(v43 ^ v41) & 0x8080808080808080;
      if (v44) {
        break;
      }
LABEL_41:
      if ((v43 & (~v43 << 6) & 0x8080808080808080) != 0) {
        goto LABEL_46;
      }
      v34 += 8;
      unint64_t v39 = v34 + v42;
    }
    uint64_t v45 = v38[1];
    while (1)
    {
      unint64_t v46 = (v42 + (__clz(__rbit64(v44)) >> 3)) & v40;
      if (*(_DWORD *)(v45 + 8 * v46) == v35) {
        break;
      }
      v44 &= v44 - 1;
      if (!v44) {
        goto LABEL_41;
      }
    }
    uint64_t v47 = v129;
    if (v40 != v46) {
      uint64_t v47 = v45 + 8 * v46;
    }
    uint64_t v129 = v47;
LABEL_46:
    ++*((void *)&v136 + 1);
    int v48 = sub_28DE6C(*(void *)(a1 + 16), v134, *(_DWORD *)(a1 + 804));
    if (v48)
    {
      sub_FF8208(a6, &v134, &v134, (uint64_t)&v131);
      __int16 v49 = a5;
      if (v48 != 2) {
        __int16 v49 = a4;
      }
      unsigned int v50 = (unsigned __int16)(v31 + v49);
      if (v50 >= *(unsigned __int16 *)(v129 + 6)) {
        LOWORD(v50) = *(_WORD *)(v129 + 6);
      }
      *(_WORD *)(v129 + 6) = v50;
    }
    if (v31 < a2 || v31 < *(unsigned __int16 *)(v129 + 6))
    {
      if (*(unsigned __int16 *)(v129 + 4) != v31)
      {
        *(_WORD *)(v129 + 4) = v31;
        unint64_t v106 = sub_53678(v35);
        uint64_t v107 = sub_5378C(v35);
        unint64_t v131 = v106;
        LODWORD(v132) = 0;
        while (sub_53FAC((unsigned __int8 *)&v131, v107))
        {
          unsigned int v116 = sub_53FA4((uint64_t)&v131);
          uint64_t v113 = 0;
          LODWORD(v132) = v116;
          unint64_t v117 = ~(unint64_t)v116 + ((unint64_t)v116 << 21);
          unint64_t v118 = 21 * ((265 * (v117 ^ (v117 >> 24))) ^ ((265 * (v117 ^ (v117 >> 24))) >> 14));
          unint64_t v119 = 2147483649u * (v118 ^ (v118 >> 28));
          float64x2_t v120 = &v138[6
                     * (((((unsigned __int16)(v118 ^ (v118 >> 28)) >> 8) ^ ((-2147483647
                                                                                            * (v118 ^ (v118 >> 28))) >> 16)) ^ ((-2147483647 * (v118 ^ (v118 >> 28))) >> 24)) & 0xF)];
          unint64_t v114 = v119 >> 7;
          uint64_t v121 = v120[3];
          uint64_t v122 = 0x101010101010101 * (v119 & 0x7F);
          while (1)
          {
            unint64_t v108 = v114 & v121;
            uint64_t v109 = *(void *)(*v120 + v108);
            unint64_t v110 = ((v109 ^ v122) - 0x101010101010101) & ~(v109 ^ v122) & 0x8080808080808080;
            if (v110) {
              break;
            }
LABEL_107:
            if ((v109 & (~v109 << 6) & 0x8080808080808080) != 0) {
              goto LABEL_113;
            }
            v113 += 8;
            unint64_t v114 = v113 + v108;
          }
          uint64_t v111 = v120[1];
          while (1)
          {
            unint64_t v112 = (v108 + (__clz(__rbit64(v110)) >> 3)) & v121;
            if (*(_DWORD *)(v111 + 8 * v112) == v116) {
              break;
            }
            v110 &= v110 - 1;
            if (!v110) {
              goto LABEL_107;
            }
          }
          if (v121 != v112)
          {
            unsigned int v115 = (unsigned __int16)(*(_WORD *)(v111 + 8 * v112 + 6) + 1);
            if (v115 >= *(unsigned __int16 *)(v129 + 6)) {
              LOWORD(v115) = *(_WORD *)(v129 + 6);
            }
            *(_WORD *)(v129 + 6) = v115;
          }
LABEL_113:
          sub_53794((uint64_t)&v131);
        }
      }
      uint64_t v51 = v134;
      unint64_t v52 = sub_53678(v134);
      uint64_t v53 = sub_5378C(v51);
      unint64_t v131 = v52;
      LODWORD(v132) = 0;
      __int16 v130 = v31 + 1;
      while (sub_53FAC((unsigned __int8 *)&v131, v53))
      {
        unsigned int v55 = sub_53FA4((uint64_t)&v131);
        uint64_t v56 = 0;
        LODWORD(v132) = v55;
        unint64_t v57 = ~(unint64_t)v55 + ((unint64_t)v55 << 21);
        unint64_t v58 = 21 * ((265 * (v57 ^ (v57 >> 24))) ^ ((265 * (v57 ^ (v57 >> 24))) >> 14));
        unint64_t v59 = 2147483649u * (v58 ^ (v58 >> 28));
        unint64_t v60 = &v137[6
                  * (((((unsigned __int16)(v58 ^ (v58 >> 28)) >> 8) ^ ((-2147483647
                                                                                       * (v58 ^ (v58 >> 28))) >> 16)) ^ ((-2147483647 * (v58 ^ (v58 >> 28))) >> 24)) & 0xF)];
        unint64_t v61 = v59 >> 7;
        uint64_t v62 = v60[3];
        uint64_t v63 = *v60;
        uint64_t v64 = 0x101010101010101 * (v59 & 0x7F);
        for (unint64_t j = v59 >> 7; ; unint64_t j = v56 + v66)
        {
          unint64_t v66 = j & v62;
          uint64_t v67 = *(void *)(v63 + v66);
          unint64_t v68 = ((v67 ^ v64) - 0x101010101010101) & ~(v67 ^ v64) & 0x8080808080808080;
          if (v68) {
            break;
          }
LABEL_65:
          if ((v67 & (~v67 << 6) & 0x8080808080808080) != 0) {
            goto LABEL_68;
          }
          v56 += 8;
        }
        uint64_t v69 = v60[1];
        while (1)
        {
          unint64_t v70 = (v66 + (__clz(__rbit64(v68)) >> 3)) & v62;
          if (*(_DWORD *)(v69 + 8 * v70) == v55) {
            break;
          }
          v68 &= v68 - 1;
          if (!v68) {
            goto LABEL_65;
          }
        }
        if (v62 == v70)
        {
LABEL_68:
          for (k = 0; ; unint64_t v61 = k + v72)
          {
            unint64_t v72 = v61 & v62;
            uint64_t v73 = *(void *)(v63 + v72);
            unint64_t v74 = ((v73 ^ v64) - 0x101010101010101) & ~(v73 ^ v64) & 0x8080808080808080;
            if (v74) {
              break;
            }
LABEL_73:
            if ((v73 & (~v73 << 6) & 0x8080808080808080) != 0)
            {
              unint64_t v76 = sub_ED2E64(v60, v59);
              uint64_t v75 = v60[1];
              int v77 = (unsigned int *)(v75 + 8 * v76);
              unsigned int *v77 = v55;
              v77[1] = 0;
              goto LABEL_76;
            }
            k += 8;
          }
          uint64_t v75 = v60[1];
          while (1)
          {
            unint64_t v76 = (v72 + (__clz(__rbit64(v74)) >> 3)) & v62;
            if (*(_DWORD *)(v75 + 8 * v76) == v55) {
              break;
            }
            v74 &= v74 - 1;
            if (!v74) {
              goto LABEL_73;
            }
          }
LABEL_76:
          *(_DWORD *)(v75 + 8 * v76 + 4) = v35;
          if (v31 < i)
          {
            int v78 = (_WORD *)*((void *)&v135 + 1);
            if (*((void *)&v135 + 1) < (unint64_t)v136)
            {
              **((_DWORD **)&v135 + 1) = v55;
              v78[2] = v130;
              uint64_t v54 = (char *)(v78 + 4);
            }
            else
            {
              uint64_t v79 = i;
              uint64_t v80 = (_WORD *)v135;
              uint64_t v81 = (uint64_t)(*((void *)&v135 + 1) - v135) >> 3;
              unint64_t v82 = v81 + 1;
              if ((unint64_t)(v81 + 1) >> 61) {
                sub_2E00();
              }
              uint64_t v83 = v136 - v135;
              if ((uint64_t)(v136 - v135) >> 2 > v82) {
                unint64_t v82 = v83 >> 2;
              }
              if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v84 = v82;
              }
              if (v84 >> 61) {
                sub_188D718();
              }
              uint64_t v85 = (char *)operator new(8 * v84);
              uint64_t v86 = &v85[8 * v81];
              *(_DWORD *)uint64_t v86 = v55;
              *((_WORD *)v86 + 2) = v130;
              uint64_t v87 = v86;
              for (uint64_t i = v79; v78 != v80; *((_WORD *)v87 + 2) = v89)
              {
                int v88 = *((_DWORD *)v78 - 2);
                v78 -= 4;
                __int16 v89 = v78[2];
                *((_DWORD *)v87 - 2) = v88;
                v87 -= 8;
              }
              uint64_t v90 = &v85[8 * v84];
              uint64_t v54 = v86 + 8;
              *(void *)&long long v135 = v87;
              *((void *)&v135 + 1) = v86 + 8;
              *(void *)&long long v136 = v90;
              if (v80) {
                operator delete(v80);
              }
            }
            *((void *)&v135 + 1) = v54;
          }
          goto LABEL_58;
        }
        uint64_t v91 = 0;
        uint64_t v92 = *(unsigned int *)(v69 + 8 * v70 + 4);
        unint64_t v93 = 265 * ((~v92 + (v92 << 21)) ^ ((unint64_t)(~v92 + (v92 << 21)) >> 24));
        unint64_t v94 = 2147483649u * ((21 * (v93 ^ (v93 >> 14))) ^ ((21 * (v93 ^ (v93 >> 14))) >> 28));
        v95 = &v138[6 * (((BYTE1(v94) ^ BYTE2(v94)) ^ BYTE3(v94)) & 0xF)];
        unint64_t v96 = v94 >> 7;
        uint64_t v97 = v95[3];
        uint64_t v98 = 0x101010101010101 * (v94 & 0x7F);
        while (1)
        {
          unint64_t v99 = v96 & v97;
          uint64_t v100 = *(void *)(*v95 + v99);
          unint64_t v101 = ((v100 ^ v98) - 0x101010101010101) & ~(v100 ^ v98) & 0x8080808080808080;
          if (v101) {
            break;
          }
LABEL_94:
          if ((v100 & (~v100 << 6) & 0x8080808080808080) != 0) {
            goto LABEL_99;
          }
          v91 += 8;
          unint64_t v96 = v91 + v99;
        }
        uint64_t v102 = v95[1];
        while (1)
        {
          unint64_t v103 = (v99 + (__clz(__rbit64(v101)) >> 3)) & v97;
          if (*(_DWORD *)(v102 + 8 * v103) == v92) {
            break;
          }
          v101 &= v101 - 1;
          if (!v101) {
            goto LABEL_94;
          }
        }
        uint64_t v104 = v128;
        if (v97 != v103) {
          uint64_t v104 = v102 + 8 * v103;
        }
        uint64_t v128 = v104;
LABEL_99:
        unsigned int v105 = (unsigned __int16)(*(_WORD *)(v128 + 6) + 2 * v31);
        if (v105 >= *(unsigned __int16 *)(v129 + 6)) {
          LOWORD(v105) = *(_WORD *)(v129 + 6);
        }
        *(_WORD *)(v129 + 6) = v105;
LABEL_58:
        sub_53794((uint64_t)&v131);
      }
    }
    double v16 = (char *)v135;
  }
LABEL_29:
  if (v16)
  {
    *((void *)&v135 + 1) = v16;
    operator delete(v16);
  }
  sub_328138((uint64_t)v137);
  return sub_328138((uint64_t)v138);
}

void sub_FF81A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (__p) {
    operator delete(__p);
  }
  sub_328138((uint64_t)&a29);
  sub_328138((uint64_t)&STACK[0x3A0]);
  _Unwind_Resume(a1);
}

unint64_t sub_FF8208@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = 0;
  uint64_t v8 = *a2;
  unint64_t v9 = 265 * ((~v8 + (v8 << 21)) ^ ((unint64_t)(~v8 + (v8 << 21)) >> 24));
  unint64_t v10 = 2147483649u * ((21 * (v9 ^ (v9 >> 14))) ^ ((21 * (v9 ^ (v9 >> 14))) >> 28));
  uint64_t v11 = (uint64_t *)(a1 + 48 * (((BYTE1(v10) ^ BYTE2(v10)) ^ BYTE3(v10)) & 0xF));
  unint64_t v12 = v10 >> 7;
  uint64_t v13 = v11[3];
  uint64_t v14 = *v11;
  while (1)
  {
    unint64_t v15 = v12 & v13;
    uint64_t v16 = *(void *)(v14 + (v12 & v13));
    unint64_t v17 = ((v16 ^ (0x101010101010101 * (v10 & 0x7F))) - 0x101010101010101) & ~(v16 ^ (0x101010101010101
                                                                                        * (v10 & 0x7F))) & 0x8080808080808080;
    if (v17) {
      break;
    }
LABEL_6:
    if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = sub_FF8348(v11, v10);
      uint64_t v14 = *v11;
      uint64_t v18 = v11[1];
      *(_DWORD *)(v18 + 4 * result) = *a3;
      uint64_t v13 = v11[3];
      char v20 = 1;
      goto LABEL_10;
    }
    v7 += 8;
    unint64_t v12 = v7 + v15;
  }
  uint64_t v18 = v11[1];
  while (1)
  {
    unint64_t result = (v15 + (__clz(__rbit64(v17)) >> 3)) & v13;
    if (*(_DWORD *)(v18 + 4 * result) == v8) {
      break;
    }
    v17 &= v17 - 1;
    if (!v17) {
      goto LABEL_6;
    }
  }
  char v20 = 0;
LABEL_10:
  *(void *)a4 = v11;
  *(void *)(a4 + 8) = a1 + 768;
  *(void *)(a4 + 16) = v14 + result;
  *(void *)(a4 + 24) = v18 + 4 * result;
  *(void *)(a4 + 32) = v14 + v13;
  *(unsigned char *)(a4 + 48) = v20;
  return result;
}

unint64_t sub_FF8348(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = *a1;
  unint64_t v6 = v4 & (a2 >> 7);
  unint64_t v7 = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    uint64_t v8 = 8;
    do
    {
      unint64_t v6 = (v6 + v8) & v4;
      v8 += 8;
      unint64_t v7 = *(void *)(v5 + v6) & (~*(void *)(v5 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  unint64_t result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v4;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v5 + result) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      sub_FF8440((uint64_t)a1);
      unint64_t result = sub_2D7FC4(a1, a2);
      uint64_t v5 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v5 + result) == 128);
  *(unsigned char *)(v5 + result) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (result - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  return result;
}

void sub_FF8440(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = (unsigned char *)(&def_332C + 1);
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (char *)((2 * v1) | 1);
LABEL_4:
    sub_FF8470((char **)a1, v2);
    return;
  }
  sub_FF860C(a1);
}

void sub_FF8470(char **a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  unint64_t v7 = ((unint64_t)a2 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  uint64_t v8 = (char *)operator new(v7 + 4 * (void)a2);
  *a1 = v8;
  a1[1] = &v8[v7];
  memset(v8, 128, (size_t)(a2 + 8));
  a2[(void)v8] = -1;
  uint64_t v9 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (unsigned char *)dword_4 + 3) {
    uint64_t v9 = 6;
  }
  a1[5] = (char *)(v9 - (void)a1[2]);
  a1[3] = a2;
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if ((i[(void)v4] & 0x80000000) == 0)
      {
        unint64_t v13 = ~(unint64_t)*(unsigned int *)&v5[4 * (void)i]
            + ((unint64_t)*(unsigned int *)&v5[4 * (void)i] << 21);
        unint64_t v14 = 21 * ((265 * (v13 ^ (v13 >> 24))) ^ ((265 * (v13 ^ (v13 >> 24))) >> 14));
        unint64_t v15 = 2147483649u * (v14 ^ (v14 >> 28));
        uint64_t v16 = a1[3];
        unint64_t v17 = *a1;
        unint64_t v18 = (unint64_t)v16 & (v15 >> 7);
        unint64_t v19 = *(void *)&(*a1)[v18] & (~*(void *)&(*a1)[v18] << 7) & 0x8080808080808080;
        if (!v19)
        {
          uint64_t v20 = 8;
          do
          {
            unint64_t v18 = (v18 + v20) & (unint64_t)v16;
            v20 += 8;
            unint64_t v19 = *(void *)&v17[v18] & (~*(void *)&v17[v18] << 7) & 0x8080808080808080;
          }
          while (!v19);
        }
        unint64_t v11 = (v18 + (__clz(__rbit64(v19)) >> 3)) & (unint64_t)v16;
        char v12 = v15 & 0x7F;
        v17[v11] = v12;
        (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v11 - 8) & (unint64_t)a1[3])] = v12;
        *(_DWORD *)&a1[1][4 * v11] = *(_DWORD *)&v5[4 * (void)i];
      }
    }
    operator delete(v4);
  }
}

uint64_t sub_FF860C(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_27;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *unint64_t v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (v13)
  {
    for (unint64_t i = 0; i != v13; ++i)
    {
      unint64_t v17 = *(int8x16_t **)result;
      if (*(unsigned __int8 *)(*(void *)result + i) == 254)
      {
        uint64_t v18 = *(unsigned int *)(*(void *)(result + 8) + 4 * i);
        unint64_t v19 = 265 * ((~v18 + (v18 << 21)) ^ ((unint64_t)(~v18 + (v18 << 21)) >> 24));
        unint64_t v20 = 2147483649u * ((21 * (v19 ^ (v19 >> 14))) ^ ((21 * (v19 ^ (v19 >> 14))) >> 28));
        unint64_t v21 = v13 & (v20 >> 7);
        unint64_t v22 = *(uint64_t *)((unsigned char *)v17->i64 + v21) & (~*(uint64_t *)((char *)v17->i64 + v21) << 7) & 0x8080808080808080;
        if (v22)
        {
          unint64_t v15 = v13 & (v20 >> 7);
        }
        else
        {
          uint64_t v23 = 8;
          unint64_t v15 = v13 & (v20 >> 7);
          do
          {
            unint64_t v15 = (v15 + v23) & v13;
            v23 += 8;
            unint64_t v22 = *(uint64_t *)((unsigned char *)v17->i64 + v15) & (~*(uint64_t *)((char *)v17->i64 + v15) << 7) & 0x8080808080808080;
          }
          while (!v22);
        }
        unint64_t v16 = (v15 + (__clz(__rbit64(v22)) >> 3)) & v13;
        if ((((v16 - v21) ^ (i - v21)) & v13) > 7)
        {
          int v24 = v17->u8[v16];
          v17->i8[v16] = v20 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (v16 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v20 & 0x7F;
          uint64_t v25 = *(void *)(result + 8);
          if (v24 == 128)
          {
            *(_DWORD *)(v25 + 4 * v16) = *(_DWORD *)(v25 + 4 * i);
            *(unsigned char *)(*(void *)result + i) = 0x80;
            *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
          }
          else
          {
            int v26 = *(_DWORD *)(v25 + 4 * i);
            *(_DWORD *)(v25 + 4 * i) = *(_DWORD *)(v25 + 4 * v16);
            *(_DWORD *)(v25 + 4 * v16) = v26;
            --i;
          }
        }
        else
        {
          v17->i8[i] = v20 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v20 & 0x7F;
        }
      }
      uint64_t v13 = *(void *)(result + 24);
    }
    uint64_t v27 = i - (i >> 3);
    BOOL v28 = i == 7;
    uint64_t v29 = 6;
    if (!v28) {
      uint64_t v29 = v27;
    }
    *(void *)(result + 40) = v29 - *(void *)(result + 16);
  }
  else
  {
    *(void *)(result + 40) = -*(void *)(result + 16);
  }
  return result;
}

char *sub_FF887C(uint64_t a1, _DWORD *a2, int *a3)
{
  unint64_t v7 = *(_WORD **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = *(_WORD **)a1;
    uint64_t v11 = ((uint64_t)v7 - *(void *)a1) >> 3;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v13 = v6 - (void)v10;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v15 = v12;
    }
    if (v15 >> 61) {
      sub_188D718();
    }
    uint64_t v16 = 8 * v15;
    unint64_t v17 = (char *)operator new(8 * v15);
    int v18 = *a3;
    unint64_t v19 = &v17[8 * v11];
    *(_DWORD *)unint64_t v19 = *a2;
    *((_WORD *)v19 + 2) = v18;
    for (unint64_t i = v19 + 8; v7 != v10; *((_WORD *)v19 + 2) = v21)
    {
      int v20 = *((_DWORD *)v7 - 2);
      v7 -= 4;
      __int16 v21 = v7[2];
      *((_DWORD *)v19 - 2) = v20;
      v19 -= 8;
    }
    *(void *)a1 = v19;
    *(void *)(a1 + 8) = i;
    *(void *)(a1 + 16) = &v17[v16];
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    int v8 = *a3;
    *(_DWORD *)unint64_t v7 = *a2;
    v7[2] = v8;
    unint64_t i = (char *)(v7 + 4);
  }
  *(void *)(a1 + 8) = i;
  return i - 8;
}

void sub_FF8990()
{
  unk_25FD3CF = 16641;
  word_25FD3B8 = 65;
  byte_25FD3E7 = 1;
  byte_25FD3D1 = 0;
}

uint64_t sub_FF89B8(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B8FD0;
  strcpy(*(char **)__p, "min_charging_station_search_radius_m");
  *(void *)a1 = sub_5CDE0(a2, __p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B8FD0;
  strcpy(*(char **)__p, "max_charging_station_search_radius_m");
  *(void *)(a1 + 8) = sub_5CDE0(a2, __p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)long long __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B91B0;
  strcpy(*(char **)__p, "min_charging_station_density");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(_DWORD *)(a1 + 16) = v6;
  *(void *)long long __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B8870;
  strcpy(*(char **)__p, "max_num_charging_stations");
  int v7 = sub_31AC04(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(_DWORD *)(a1 + 20) = v7;
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B93A0;
  strcpy(*(char **)__p, "charging_station_cluster_quad_level");
  *(_DWORD *)(a1 + 24) = sub_31AC04(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9260;
  strcpy(*(char **)__p, "min_charging_station_cluster_size");
  int v8 = sub_31AC04(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(_DWORD *)(a1 + 28) = v8;
  *(void *)long long __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B8890;
  strcpy(*(char **)__p, "max_penalized_charging_time_s");
  int v9 = sub_31AC04(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(_DWORD *)(a1 + 32) = v9;
  uint64_t v25 = operator new(0x28uLL);
  long long v26 = xmmword_20B9280;
  strcpy((char *)v25, "nearby_charging_station_thresholds");
  uint64_t v10 = (uint64_t *)sub_5C4AC(a2, (uint64_t)&v25);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v13 = v12 - v11;
  if (v12 != v11)
  {
    if (v13 < 0) {
      sub_2E00();
    }
    BOOL v14 = (__n128 *)operator new(v12 - v11);
    *(void *)(a1 + 40) = v14;
    *(void *)(a1 + 48) = v14;
    *(void *)(a1 + 56) = &v14[v13 >> 4];
    do
    {
      if (*(_DWORD *)(v11 + 8) != 2)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      unint64_t v15 = *(void **)v11;
      __p[23] = 14;
      strcpy(__p, "route_length_m");
      double v16 = sub_5C7E8(v15, (uint64_t)__p);
      HIBYTE(v27[2]) = 18;
      strcpy((char *)v27, "nearby_threshold_m");
      uint64_t v17 = sub_5CDE0(v15, v27);
      if (SHIBYTE(v27[2]) < 0)
      {
        operator delete(v27[0]);
        if ((__p[23] & 0x80000000) != 0) {
LABEL_24:
        }
          operator delete(*(void **)__p);
      }
      else if ((__p[23] & 0x80000000) != 0)
      {
        goto LABEL_24;
      }
      *(double *)long long __p = v16;
      *(void *)&__p[8] = v17;
      BOOL v14 = sub_FFC408((__n128 **)(a1 + 40), (uint64_t)v14, (__n128 *)__p) + 1;
      v11 += 16;
    }
    while (v11 != v12);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(v25);
  }
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20E12D0;
  strcpy(*(char **)__p, "nearby_charging_station_penalty_factor");
  double v18 = sub_5C7E8(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(double *)(a1 + 64) = v18;
  *(void *)long long __p = operator new(0x40uLL);
  *(_OWORD *)&__p[8] = xmmword_20B99C0;
  strcpy(*(char **)__p, "origin_nearby_charging_station_inverse_penalty_soc_threshold");
  unsigned int v19 = sub_31AC04(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  int v20 = (_DWORD *)nullsub_1(a3);
  double v21 = 0.0;
  if (sub_40A4FC(v20) <= v19)
  {
    *(void *)long long __p = operator new(0x38uLL);
    *(_OWORD *)&__p[8] = xmmword_20B99E0;
    strcpy(*(char **)__p, "origin_nearby_charging_station_inverse_penalty_factor");
    double v21 = sub_5C7E8(a2, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  *(double *)(a1 + 72) = v21;
  *(void *)long long __p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9A80;
  strcpy(*(char **)__p, "ignore_charging_stations_without_access_points");
  BOOL v22 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 80) = v22;
  *(void *)long long __p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_20E1380;
  strcpy(*(char **)__p, "backup_charging_station_distance_threshold_m");
  *(void *)(a1 + 88) = sub_5CDE0(a2, __p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  return a1;
}

void sub_FF9010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  uint64_t v33 = *v31;
  if (*v31)
  {
    *(void *)(a11 + 48) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_FF9130(uint64_t result, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  *(void *)unint64_t result = a2;
  *(_DWORD *)(result + 8) = a3;
  *(void *)(result + 12) = a4;
  *(_DWORD *)(result + 20) = a5;
  *(void *)(result + 24) = a6;
  *(void *)(result + 32) = a7;
  *(_DWORD *)(result + 40) = a8;
  return result;
}

uint64_t sub_FF914C(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  long long v8 = *a4;
  long long v9 = a4[1];
  int v10 = *((_DWORD *)a4 + 8);
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 48) = v10;
  *(_OWORD *)(a1 + 32) = v9;
  *(_OWORD *)(a1 + 16) = v8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v12 = (unsigned char *)*((void *)a4 + 5);
  uint64_t v11 = (unsigned char *)*((void *)a4 + 6);
  uint64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      sub_2E00();
    }
    BOOL v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    size_t v15 = v13 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v14, v12, v15);
    *(void *)(a1 + 64) = &v14[v15];
  }
  long long v16 = a4[4];
  long long v17 = a4[5];
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 96) = v17;
  *(_OWORD *)(a1 + 80) = v16;
  *(_OWORD *)(a1 + 112) = xmmword_20B8E30;
  *(void *)(a1 + 128) = 0x7FFFFFFFFFFFFFFFLL;
  *(int64x2_t *)(a1 + 136) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(_DWORD *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 0;
  double v18 = (char *)operator new(0x1000uLL);
  *(void *)(a1 + 192) = v18;
  *(void *)(a1 + 200) = v18;
  *(void *)(a1 + 208) = v18 + 4096;
  unsigned int v19 = (char *)operator new(0x3F8uLL);
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 168) = v19;
  *(void *)(a1 + 176) = v19;
  *(void *)(a1 + 184) = v19 + 1016;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(void *)(a1 + 288) = 0;
  int v20 = operator new(4uLL);
  *(void *)(a1 + 272) = v20;
  *v20++ = 0;
  *(void *)(a1 + 280) = v20;
  *(void *)(a1 + 288) = v20;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  HIBYTE(v32[2]) = 21;
  strcpy((char *)v32, "ChargingStationRanker");
  long long __p = 0;
  long long v31 = 0uLL;
  double v21 = sub_374CDC(a3, (uint64_t)v32, (uint64_t *)&__p);
  sub_FE4DCC(v33, v21);
  sub_FE4DD0(a1 + 344, a2, a3, (uint64_t)v33);
  BOOL v22 = (void **)__p;
  if (__p)
  {
    uint64_t v23 = (void **)v31;
    int v24 = __p;
    if ((void *)v31 != __p)
    {
      do
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete(*(v23 - 3));
        }
        v23 -= 3;
      }
      while (v23 != v22);
      int v24 = __p;
    }
    *(void *)&long long v31 = v22;
    operator delete(v24);
  }
  if (SHIBYTE(v32[2]) < 0) {
    operator delete((void *)v32[0]);
  }
  char v34 = 9;
  strcpy((char *)v33, "EVRouting");
  memset(v32, 0, 24);
  uint64_t v25 = sub_374CDC(a3, (uint64_t)v33, v32);
  long long __p = operator new(0x28uLL);
  long long v31 = xmmword_20B8FD0;
  strcpy((char *)__p, "charging_station_poi_quad_node_level");
  *(_DWORD *)(a1 + 528) = sub_FF951C(v25, (uint64_t)&__p);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p);
  }
  uint64_t v26 = v32[0];
  if (v32[0])
  {
    uint64_t v27 = v32[1];
    BOOL v28 = (void *)v32[0];
    if (v32[1] != v32[0])
    {
      do
      {
        if (*(char *)(v27 - 1) < 0) {
          operator delete(*(void **)(v27 - 24));
        }
        v27 -= 24;
      }
      while (v27 != v26);
      BOOL v28 = (void *)v32[0];
    }
    v32[1] = v26;
    operator delete(v28);
  }
  if (v34 < 0) {
    operator delete(*(void **)&v33[0]);
  }
  return a1;
}

void sub_FF9468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1A668((void **)&a16);
  if (a28 < 0) {
    operator delete(a23);
  }
  sub_4E798(v31);
  sub_3310C(v30);
  uint64_t v33 = *v29;
  if (*v29)
  {
    *(void *)(v28 + 64) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_FF951C(void *a1, uint64_t a2)
{
  uint64_t v2 = sub_58070(a1, a2);
  if (!v2 || *((_DWORD *)v2 + 12) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return *((double *)v2 + 5);
}

void sub_FF95AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_FF95E0(uint64_t a1, uint64_t a2, long long *a3, void *a4, uint64_t a5, int64x2_t *a6)
{
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = (unsigned int *)(a1 + 112);
  long long v13 = *a3;
  long long v14 = a3[1];
  *(_OWORD *)(a1 + 140) = *(long long *)((char *)a3 + 28);
  *(_OWORD *)(a1 + 128) = v14;
  *(_OWORD *)(a1 + 112) = v13;
  double v15 = (double)*(uint64_t *)(a1 + 136);
  unint64_t v16 = 1.0;
  LODWORD(v16) = *(_DWORD *)(a1 + 32);
  unsigned int v17 = (fmax(v15 / 10000000.0, 1.0) * (double)v16);
  if (*(_DWORD *)(a1 + 152) >= *(_DWORD *)(a1 + 36)) {
    unsigned int v18 = *(_DWORD *)(a1 + 36);
  }
  else {
    unsigned int v18 = *(_DWORD *)(a1 + 152);
  }
  if (v18 >= v17) {
    unsigned int v19 = v17;
  }
  else {
    unsigned int v19 = v18;
  }
  if (v11 == *(void *)(a1 + 64))
  {
    uint64_t v20 = 0;
  }
  else
  {
    *(double *)&uint64_t v31 = v15 / 100.0;
    uint64_t v20 = sub_FCCE50((double *)&v31, (double **)(a1 + 56));
  }
  *(void *)(a1 + 160) = v20;
  sub_FE4E7C(a1 + 344, v12, (unsigned int *)(a1 + 124));
  sub_FF97D8(a1, a2, (uint64_t *)&v31);
  sub_FF9A24(a1, (uint64_t *)&v31, (uint64_t)&__p);
  sub_FFA498(a1, &__p, a4, a5, v19, v18, a6, v21);
  BOOL v22 = (void ***)__p;
  if (__p)
  {
    for (unint64_t i = v30; i != v22; sub_FFC6F0(v24, i))
    {
      int v24 = *((_DWORD *)i - 6);
      i -= 15;
    }
    uint64_t v30 = v22;
    operator delete(__p);
  }
  uint64_t v25 = (void ***)v31;
  if (*(double *)&v31 != 0.0)
  {
    uint64_t v26 = v31;
    if (v32 != v31)
    {
      uint64_t v27 = v32 - 3;
      do
      {
        if (*v27)
        {
          sub_28F794((uint64_t)v27, *v27);
          operator delete(*v27);
        }
        uint64_t v28 = v27 - 2;
        v27 -= 5;
      }
      while (v28 != v25);
      uint64_t v26 = v31;
    }
    uint64_t v32 = v25;
    operator delete(v26);
  }
}

void sub_FF97A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void ***a9, uint64_t a10, uint64_t a11, void ***a12)
{
}

void sub_FF97C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_FFAFB4((void ****)va);
  _Unwind_Resume(a1);
}

uint64_t sub_FF97D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_FF6F4C((uint64_t)v34, *(void **)(a1 + 8), *(void *)a1);
  uint64_t v5 = sub_1005964(a2);
  uint64_t v6 = (*(void *)(v5 + 104) - *(void *)(v5 + 96)) >> 2;
  if (v6)
  {
    unsigned int v7 = 0;
    do
    {
      unsigned int v33 = v7;
      sub_10056A4(a2, &v33, (uint64_t)&v29);
      uint64_t v8 = v31;
      uint64_t v9 = v32;
      if (v31 != (unint64_t)v32)
      {
        uint64_t v11 = v29;
        int v10 = v30;
        do
        {
          uint64_t v12 = *v11 + 152 * v8;
          if (sub_10022FC(v12))
          {
            uint64_t v13 = sub_100231C(v12);
            unint64_t v14 = *(void *)(v13 + 32);
            uint64_t v15 = (v14 >> 16) & 0xFFFF0000 | (v14 << 32);
            uint64_t v16 = (v14 & 0xFF000000000000) == 0;
            uint64_t v17 = (v15 | (2 * v16)) + 4 * (unsigned __int16)*(_DWORD *)(v13 + 80);
            uint64_t v18 = ((v17 << 16) & 0xFFFF00000000 | HIDWORD(v17) | (v16 << 48)) ^ 0x1000000000000;
          }
          else
          {
            uint64_t v18 = *(void *)(sub_10023E0(v12) + 32);
          }
          sub_FF6F50((uint64_t)v34, v18);
          uint64_t v8 = *(unsigned int *)(*v10 + 4 * v8);
        }
        while (v8 != v9);
      }
      ++v7;
    }
    while (v7 != v6);
  }
  unsigned int v19 = (char **)sub_37D0C0(*(void *)a1);
  int v20 = *(unsigned __int8 *)(a1 + 96);
  int v21 = *(unsigned __int8 *)(*(void *)a1 + 408);
  int v22 = sub_89DD4(v19);
  if (v20) {
    char v23 = 1;
  }
  else {
    char v23 = 2;
  }
  LODWORD(v29) = v22;
  BYTE4(v29) = 0;
  BYTE5(v29) = v23;
  uint64_t v24 = 1 << v21;
  if (v21 == 255) {
    uint64_t v24 = 0;
  }
  uint64_t v30 = (void *)v24;
  uint64_t v25 = *(void *)(a1 + 16);
  if (v25 <= *(void *)(a1 + 24)) {
    uint64_t v26 = *(void *)(a1 + 24);
  }
  else {
    uint64_t v26 = *(void *)(a1 + 16);
  }
  sub_FFB038((uint64_t)v34, v25, v26, *(_DWORD *)(a1 + 40), (uint64_t)&v29, a3);
  return sub_328138((uint64_t)&v35);
}

void sub_FF997C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_328138((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_FF9994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_328138((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_FF99AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_328138((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_FF99C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_328138((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_FF99DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_328138((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_FF99F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_328138((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_FF9A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_328138((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_FF9A24(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v81 = sub_376F8C(*(void **)(a1 + 8));
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  uint64_t v78 = a2[1];
  if (*a2 != v78)
  {
    uint64_t v5 = *a2;
    uint64_t v83 = a3;
    while (1)
    {
      uint64_t v8 = *(void *)(v5 + 16);
      uint64_t v7 = *(void *)(v5 + 24);
      uint64_t v80 = v5;
      unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - v8) >> 4);
      if (v9 < *(unsigned int *)(a1 + 44)) {
        break;
      }
      v85[0] = 0;
      v85[1] = 0;
      uint64_t v86 = 0;
      sub_FFD1F8((unint64_t *)v85, v9);
      uint64_t v10 = *(void *)(v80 + 16);
      uint64_t v82 = *(void *)(v80 + 24);
      if (v10 != v82)
      {
        uint64_t v11 = v85[1];
        do
        {
          long long v87 = xmmword_20E8160;
          sub_40ABE4((uint64_t)v88, v10, (__n128 *)&v87);
          long long v98 = 0uLL;
          *(void *)&long long v99 = 0;
          uint64_t v13 = (char *)v88[0];
          unint64_t v14 = (char *)v88[1];
          int64_t v15 = (char *)v88[1] - (char *)v88[0];
          if (v88[1] != v88[0])
          {
            unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 4);
            if (v16 > 0x555555555555555) {
              sub_2E00();
            }
            uint64_t v84 = v10;
            uint64_t v17 = (char *)operator new(v15);
            uint64_t v18 = 0;
            *(void *)&long long v98 = v17;
            *((void *)&v98 + 1) = v17;
            *(void *)&long long v99 = &v17[48 * v16];
            unint64_t v96 = v17;
            uint64_t v97 = v17;
            *(void *)&long long v93 = &v99;
            *((void *)&v93 + 1) = &v96;
            unint64_t v94 = &v97;
            char v95 = 0;
            do
            {
              unsigned int v19 = &v13[v18];
              int v20 = &v17[v18];
              long long v21 = *(_OWORD *)&v13[v18];
              *((_WORD *)v20 + 8) = *(_WORD *)&v13[v18 + 16];
              *(_OWORD *)int v20 = v21;
              *((void *)v20 + 4) = 0;
              *((void *)v20 + 5) = 0;
              *((void *)v20 + 3) = 0;
              char v23 = *(unsigned char **)&v13[v18 + 24];
              int v22 = *(unsigned char **)&v13[v18 + 32];
              size_t v24 = v22 - v23;
              if (v22 != v23)
              {
                if ((v24 & 0x8000000000000000) != 0) {
                  sub_2E00();
                }
                uint64_t v25 = (char *)operator new(v22 - v23);
                *((void *)v20 + 3) = v25;
                *((void *)v20 + 4) = v25;
                uint64_t v26 = &v25[v24];
                *((void *)v20 + 5) = &v25[v24];
                memcpy(v25, v23, v24);
                *((void *)v20 + 4) = v26;
              }
              uint64_t v97 = v20 + 48;
              v18 += 48;
            }
            while (v19 + 48 != v14);
            *((void *)&v98 + 1) = &v17[v18];
            uint64_t v10 = v84;
          }
          *((void *)&v99 + 1) = 0;
          long long v100 = 0uLL;
          uint64_t v28 = (char *)*((void *)&v89 + 1);
          uint64_t v27 = (char *)v90;
          *(void *)&long long v93 = (char *)&v99 + 8;
          BYTE8(v93) = 0;
          int64_t v29 = v90 - *((void *)&v89 + 1);
          if ((void)v90 != *((void *)&v89 + 1))
          {
            unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (v29 >> 4);
            if (v30 > 0x555555555555555) {
              sub_2E00();
            }
            unsigned int v31 = (char *)operator new(v29);
            uint64_t v32 = 0;
            *((void *)&v99 + 1) = v31;
            *(void *)&long long v100 = v31;
            *((void *)&v100 + 1) = &v31[48 * v30];
            do
            {
              char v34 = &v31[v32];
              uint64_t v35 = &v28[v32];
              long long v36 = *(_OWORD *)&v28[v32];
              *((void *)v34 + 2) = *(void *)&v28[v32 + 16];
              *(_OWORD *)char v34 = v36;
              unint64_t v37 = &v31[v32 + 24];
              uint64_t v38 = (void **)&v28[v32 + 24];
              if (v28[v32 + 47] < 0)
              {
                sub_4200(v37, *v38, *((void *)v35 + 4));
              }
              else
              {
                long long v33 = *(_OWORD *)v38;
                *(void *)&v31[v32 + 40] = *(void *)&v28[v32 + 40];
                *(_OWORD *)unint64_t v37 = v33;
              }
              v32 += 48;
            }
            while (v35 + 48 != v27);
            uint64_t v28 = (char *)*((void *)&v89 + 1);
            *(void *)&long long v100 = &v31[v32];
          }
          v101[0] = v91[0];
          *(_OWORD *)((char *)v101 + 13) = *(_OWORD *)((char *)v91 + 13);
          long long v102 = v92;
          int v103 = 0x7FFFFFFF;
          a3 = v83;
          if (v28)
          {
            unint64_t v39 = (void **)v90;
            uint64_t v40 = v28;
            if ((char *)v90 != v28)
            {
              do
              {
                if (*((char *)v39 - 1) < 0) {
                  operator delete(*(v39 - 3));
                }
                v39 -= 6;
              }
              while (v39 != (void **)v28);
              uint64_t v40 = (char *)*((void *)&v89 + 1);
            }
            *(void *)&long long v90 = v28;
            operator delete(v40);
          }
          uint64_t v41 = (char *)v88[0];
          if (v88[0])
          {
            unint64_t v42 = (char *)v88[1];
            uint64_t v43 = v88[0];
            if (v88[1] != v88[0])
            {
              do
              {
                unint64_t v44 = (void *)*((void *)v42 - 3);
                if (v44)
                {
                  *((void *)v42 - 2) = v44;
                  operator delete(v44);
                }
                v42 -= 48;
              }
              while (v42 != v41);
              uint64_t v43 = v88[0];
            }
            v88[1] = v41;
            operator delete(v43);
          }
          uint64_t v45 = sub_FFD478((char **)v85, (uint64_t)v11, (uint64_t)&v98);
          uint64_t v46 = *((void *)&v99 + 1);
          if (*((void *)&v99 + 1))
          {
            uint64_t v47 = v100;
            int v48 = (void *)*((void *)&v99 + 1);
            if ((void)v100 != *((void *)&v99 + 1))
            {
              do
              {
                if (*(char *)(v47 - 1) < 0) {
                  operator delete(*(void **)(v47 - 24));
                }
                v47 -= 48;
              }
              while (v47 != v46);
              int v48 = (void *)*((void *)&v99 + 1);
            }
            *(void *)&long long v100 = v46;
            operator delete(v48);
          }
          uint64_t v49 = v98;
          if ((void)v98)
          {
            uint64_t v50 = *((void *)&v98 + 1);
            uint64_t v12 = (void *)v98;
            if (*((void *)&v98 + 1) != (void)v98)
            {
              do
              {
                uint64_t v51 = *(void **)(v50 - 24);
                if (v51)
                {
                  *(void *)(v50 - 16) = v51;
                  operator delete(v51);
                }
                v50 -= 48;
              }
              while (v50 != v49);
              uint64_t v12 = (void *)v98;
            }
            *((void *)&v98 + 1) = v49;
            operator delete(v12);
          }
          uint64_t v11 = (void *)(v45 + 104);
          v10 += 80;
        }
        while (v10 != v82);
      }
      unint64_t v75 = *(void *)(a3 + 8);
      if (v75 < *(void *)(a3 + 16))
      {
        *(void *)unint64_t v75 = 0;
        *(void *)(v75 + 8) = 0;
        *(void *)(v75 + 16) = 0;
        *(_OWORD *)unint64_t v75 = *(_OWORD *)v85;
        *(void *)(v75 + 16) = v86;
        *(_DWORD *)(v75 + 96) = 1;
        uint64_t v6 = *(void *)v80;
        *(_DWORD *)(v75 + 112) = *(_DWORD *)(v80 + 8);
        *(void *)(v75 + 104) = v6;
        *(void *)(a3 + 8) = v75 + 120;
      }
      else
      {
        unint64_t v76 = sub_FFDB64((void ****)a3, (uint64_t)v85, v80);
        int v77 = (void **)v85[0];
        *(void *)(a3 + 8) = v76;
        if (v77)
        {
          sub_FFC824((uint64_t)v85, v77);
          operator delete(v85[0]);
        }
      }
LABEL_4:
      uint64_t v5 = v80 + 40;
      if (v80 + 40 == v78) {
        return;
      }
    }
    while (1)
    {
      if (v8 == v7) {
        goto LABEL_4;
      }
      unint64_t v53 = sub_28E018(v81, *(void *)(v8 + 52));
      int v55 = v54;
      long long v93 = xmmword_20E8160;
      sub_40ABE4((uint64_t)v88, v8, (__n128 *)&v93);
      long long v98 = *(_OWORD *)v88;
      long long v99 = v89;
      long long v100 = v90;
      v101[0] = v91[0];
      *(_OWORD *)((char *)v101 + 13) = *(_OWORD *)((char *)v91 + 13);
      long long v102 = v92;
      int v103 = 0;
      unint64_t v104 = v53;
      int v105 = v55;
      unint64_t v56 = *(void *)(a3 + 8);
      if (v56 >= *(void *)(a3 + 16))
      {
        *(void *)(a3 + 8) = sub_FFCC64((void ****)a3, (uint64_t)&v98);
        int v58 = v103;
        if (v103 == 1) {
          goto LABEL_75;
        }
      }
      else
      {
        *(_DWORD *)(v56 + 96) = 0;
        if (v103 == 1)
        {
          *(void *)unint64_t v56 = 0;
          *(void *)(v56 + 8) = 0;
          *(void *)(v56 + 16) = 0;
          sub_FFCEFC((void *)v56, v98, *((uint64_t *)&v98 + 1), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((void *)&v98 + 1) - v98) >> 3));
        }
        else if (!v103)
        {
          sub_28FD54((void *)v56, (long long **)&v98);
          *(void *)(v56 + 24) = 0;
          *(void *)(v56 + 32) = 0;
          *(void *)(v56 + 40) = 0;
          sub_28FF98((unsigned char *)(v56 + 24), *((uint64_t *)&v99 + 1), v100, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 4));
          long long v57 = v101[0];
          *(_OWORD *)(v56 + 61) = *(_OWORD *)((char *)v101 + 13);
          *(_OWORD *)(v56 + 48) = v57;
          *(_OWORD *)(v56 + 80) = v102;
        }
        unint64_t v62 = v104;
        *(_DWORD *)(v56 + 112) = v105;
        *(void *)(v56 + 104) = v62;
        *(void *)(a3 + 8) = v56 + 120;
        int v58 = v103;
        if (v103 == 1)
        {
LABEL_75:
          uint64_t v63 = (void **)v98;
          if ((void)v98)
          {
            uint64_t v64 = *((void *)&v98 + 1);
            if (*((void *)&v98 + 1) == (void)v98)
            {
LABEL_99:
              unint64_t v52 = v63;
            }
            else
            {
              do
              {
                uint64_t v66 = *(void *)(v64 - 80);
                if (v66)
                {
                  uint64_t v67 = *(void *)(v64 - 72);
                  unint64_t v68 = *(void **)(v64 - 80);
                  if (v67 != v66)
                  {
                    do
                    {
                      if (*(char *)(v67 - 1) < 0) {
                        operator delete(*(void **)(v67 - 24));
                      }
                      v67 -= 48;
                    }
                    while (v67 != v66);
                    unint64_t v68 = *(void **)(v64 - 80);
                  }
                  *(void *)(v64 - 72) = v66;
                  operator delete(v68);
                }
                uint64_t v69 = (void **)(v64 - 104);
                uint64_t v70 = *(void *)(v64 - 104);
                if (v70)
                {
                  uint64_t v71 = *(void *)(v64 - 96);
                  uint64_t v65 = *(void **)(v64 - 104);
                  if (v71 != v70)
                  {
                    do
                    {
                      unint64_t v72 = *(void **)(v71 - 24);
                      if (v72)
                      {
                        *(void *)(v71 - 16) = v72;
                        operator delete(v72);
                      }
                      v71 -= 48;
                    }
                    while (v71 != v70);
                    uint64_t v65 = *v69;
                  }
                  *(void *)(v64 - 96) = v70;
                  operator delete(v65);
                }
                v64 -= 104;
              }
              while (v69 != v63);
              unint64_t v52 = (void **)v98;
              a3 = v83;
            }
            goto LABEL_58;
          }
          goto LABEL_59;
        }
      }
      if (!v58)
      {
        uint64_t v59 = *((void *)&v99 + 1);
        if (*((void *)&v99 + 1))
        {
          uint64_t v60 = v100;
          unint64_t v61 = (void *)*((void *)&v99 + 1);
          if ((void)v100 != *((void *)&v99 + 1))
          {
            do
            {
              if (*(char *)(v60 - 1) < 0) {
                operator delete(*(void **)(v60 - 24));
              }
              v60 -= 48;
            }
            while (v60 != v59);
            unint64_t v61 = (void *)*((void *)&v99 + 1);
          }
          *(void *)&long long v100 = v59;
          operator delete(v61);
        }
        uint64_t v63 = (void **)v98;
        if ((void)v98)
        {
          uint64_t v73 = (void **)*((void *)&v98 + 1);
          if (*((void *)&v98 + 1) == (void)v98) {
            goto LABEL_99;
          }
          do
          {
            unint64_t v74 = *(v73 - 3);
            if (v74)
            {
              *(v73 - 2) = v74;
              operator delete(v74);
            }
            v73 -= 6;
          }
          while (v73 != v63);
          unint64_t v52 = (void **)v98;
LABEL_58:
          *((void *)&v98 + 1) = v63;
          operator delete(v52);
        }
      }
LABEL_59:
      v8 += 80;
    }
  }
}

void sub_FFA22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_FFB88C((void ***)va);
  sub_FFAF50(v17);
  _Unwind_Resume(a1);
}

void sub_FFA248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (__p)
  {
    sub_FFC824((uint64_t)&__p, __p);
    operator delete(__p);
  }
  sub_FFAF50(v43);
  _Unwind_Resume(a1);
}

void sub_FFA498(uint64_t a1, void *a2, void *a3, uint64_t a4, unsigned int a5, unsigned int a6, int64x2_t *a7, double a8)
{
  uint64_t v11 = a2;
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  char v133 = 0;
  unsigned int v134 = 0;
  uint64_t v132 = 0;
  if (v14 != v13)
  {
    if (0xEEEEEEEEEEEEEEEFLL * ((v14 - v13) >> 3) >= 0x1555555555555556) {
      sub_2E00();
    }
    int64_t v15 = (char *)operator new(0x3333333333333334 * ((v14 - v13) >> 3));
    uint64_t v132 = v15;
    char v133 = v15;
    unsigned int v134 = &v15[0x3333333333333334 * ((v14 - v13) >> 3)];
    uint64_t v11 = a2;
    do
    {
      int v16 = *(_DWORD *)(v13 + 112);
      uint64_t v122 = *(void **)(v13 + 104);
      LODWORD(v123) = v16;
      int64_t v15 = sub_32ACC(&v132, (uint64_t)v15, (uint64_t)&v122) + 12;
      v13 += 120;
    }
    while (v13 != v14);
  }
  sub_4E344((uint64_t *)&v132, *(void *)(a1 + 160), 0, (uint64_t)&v122, *(unint64_t *)&a8);
  sub_2F5428(a1 + 224, (uint64_t)&v122);
  if (__p)
  {
    unint64_t v131 = __p;
    operator delete(__p);
  }
  if (v128)
  {
    uint64_t v129 = v128;
    operator delete(v128);
  }
  if (v126)
  {
    int v127 = v126;
    operator delete(v126);
  }
  if (v124)
  {
    uint64_t v125 = v124;
    operator delete(v124);
  }
  if (v122)
  {
    float64x2_t v123 = v122;
    operator delete(v122);
  }
  uint64_t v17 = *(void *)(a1 + 168);
  *(void *)(a1 + 200) = *(void *)(a1 + 192);
  *(void *)(a1 + 176) = v17;
  unint64_t v119 = (uint64_t *)(a1 + 168);
  *(_DWORD *)(a1 + 216) = 0;
  uint64_t v18 = (v11[1] - *v11) >> 3;
  uint64_t v19 = (-286331153 * v18);
  if (v19)
  {
    unint64_t v20 = 0;
    long long v21 = a2;
    unsigned int v115 = a7;
    uint64_t v116 = (-286331153 * v18);
    do
    {
      uint64_t v22 = *v21 + 120 * v20;
      int v23 = *(_DWORD *)(v22 + 96);
      if (v23 == 1)
      {
        uint64_t v121 = (unint64_t *)(*v21 + 120 * v20);
        uint64_t v27 = *(void *)v22;
        uint64_t v26 = *(void *)(v22 + 8);
        if (v27 != v26)
        {
          do
          {
            *(void *)(v27 + 80) = sub_FFB8C8(a1, v21, v20);
            *(void *)(v27 + 88) = v28;
            *(_DWORD *)(v27 + 96) = sub_FFBA80(a1, (void *)v27, a3, a4);
            v27 += 104;
          }
          while (v27 != v26);
          unint64_t v29 = *v121;
          unint64_t v30 = v121[1];
          if (*v121 != v30)
          {
            uint64_t v31 = v29 + 104;
            while (*(_DWORD *)(v31 - 8) != 0x7FFFFFFF)
            {
              BOOL v32 = v31 == v30;
              v31 += 104;
              if (v32)
              {
                uint64_t v19 = v116;
                if (v29 == v30) {
                  goto LABEL_18;
                }
                goto LABEL_63;
              }
            }
            uint64_t v33 = v31 - 104;
            if (v31 - 104 != v30 && v31 != v30)
            {
              do
              {
                if (*(_DWORD *)(v31 + 96) != 0x7FFFFFFF)
                {
                  sub_40D678((char **)v33, v31);
                  *(_OWORD *)(v33 + 80) = *(_OWORD *)(v31 + 80);
                  *(_DWORD *)(v33 + 96) = *(_DWORD *)(v31 + 96);
                  v33 += 104;
                }
                v31 += 104;
              }
              while (v31 != v30);
              unint64_t v29 = *v121;
              unint64_t v30 = v121[1];
            }
            if (v33 != v30)
            {
              for (unint64_t i = v30; i != v30; i += 104)
              {
                unint64_t v37 = *(char **)v33;
                if (*(void *)v33)
                {
                  uint64_t v38 = *(char **)(v33 + 8);
                  unint64_t v39 = *(char **)v33;
                  if (v38 != v37)
                  {
                    do
                    {
                      uint64_t v40 = (void *)*((void *)v38 - 3);
                      if (v40)
                      {
                        *((void *)v38 - 2) = v40;
                        operator delete(v40);
                      }
                      v38 -= 48;
                    }
                    while (v38 != v37);
                    unint64_t v39 = *(char **)v33;
                  }
                  *(void *)(v33 + 8) = v37;
                  operator delete(v39);
                  *(void *)uint64_t v33 = 0;
                  *(void *)(v33 + 8) = 0;
                  *(void *)(v33 + 16) = 0;
                }
                *(_OWORD *)uint64_t v33 = *(_OWORD *)i;
                *(void *)(v33 + 16) = *(void *)(i + 16);
                *(void *)unint64_t i = 0;
                *(void *)(i + 8) = 0;
                *(void *)(i + 16) = 0;
                uint64_t v41 = (void **)(v33 + 24);
                uint64_t v42 = *(void *)(v33 + 24);
                if (v42)
                {
                  uint64_t v43 = *(void *)(v33 + 32);
                  uint64_t v35 = *(void **)(v33 + 24);
                  if (v43 != v42)
                  {
                    do
                    {
                      if (*(char *)(v43 - 1) < 0) {
                        operator delete(*(void **)(v43 - 24));
                      }
                      v43 -= 48;
                    }
                    while (v43 != v42);
                    uint64_t v35 = *v41;
                  }
                  *(void *)(v33 + 32) = v42;
                  operator delete(v35);
                  *uint64_t v41 = 0;
                  *(void *)(v33 + 32) = 0;
                  *(void *)(v33 + 40) = 0;
                }
                *(_OWORD *)(v33 + 24) = *(_OWORD *)(i + 24);
                *(void *)(v33 + 40) = *(void *)(i + 40);
                *(void *)(i + 24) = 0;
                *(void *)(i + 32) = 0;
                *(void *)(i + 40) = 0;
                long long v36 = *(_OWORD *)(i + 48);
                *(_OWORD *)(v33 + 61) = *(_OWORD *)(i + 61);
                *(_OWORD *)(v33 + 48) = v36;
                *(_OWORD *)(v33 + 80) = *(_OWORD *)(i + 80);
                *(_DWORD *)(v33 + 96) = *(_DWORD *)(i + 96);
                v33 += 104;
              }
              sub_FFC824((uint64_t)v121, (void **)v33);
              unint64_t v29 = *v121;
              unint64_t v30 = v121[1];
              a7 = v115;
            }
            long long v21 = a2;
            uint64_t v19 = v116;
            if (v29 != v30)
            {
LABEL_63:
              sub_FFE120(v29, v30, 126 - 2 * __clz(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v30 - v29) >> 3)), 1);
              unint64_t v44 = (unsigned int *)(v121[1] - 8);
              uint64_t v45 = *(void *)(a1 + 192);
              if (v20 >= (*(void *)(a1 + 200) - v45) >> 2 || *(_DWORD *)(v45 + 4 * v20) == -1) {
                sub_FFDD10((uint64_t)v119, v20, v44);
              }
              else {
                sub_FFDFC4(v119, v20, v44);
              }
            }
          }
        }
      }
      else
      {
        if (v23)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_23FDF58;
        }
        *(void *)(v22 + 80) = sub_FFB8C8(a1, v21, v20);
        *(void *)(v22 + 88) = v24;
        LODWORD(v122) = sub_FFBA80(a1, (void *)v22, a3, a4);
        if (v122 != 0x7FFFFFFF)
        {
          uint64_t v25 = *(void *)(a1 + 192);
          if (v20 >= (*(void *)(a1 + 200) - v25) >> 2 || *(_DWORD *)(v25 + 4 * v20) == -1) {
            sub_FFDD10((uint64_t)v119, v20, (unsigned int *)&v122);
          }
          else {
            sub_FFDFC4(v119, v20, &v122);
          }
        }
      }
LABEL_18:
      ++v20;
    }
    while (v20 != v19);
    if (*(_DWORD *)(a1 + 216))
    {
      unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((a7->i64[1] - a7->i64[0]) >> 5);
      do
      {
        uint64_t v47 = *(unsigned int **)(a1 + 168);
        if ((signed int)v47[1] <= *(_DWORD *)(a1 + 48)) {
          uint64_t v48 = a6;
        }
        else {
          uint64_t v48 = a5;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((a7->i64[1] - a7->i64[0]) >> 5) >= v46 + v48) {
          break;
        }
        unint64_t v49 = *v47;
        uint64_t v50 = *a2 + 120 * v49;
        int v51 = *(_DWORD *)(v50 + 96);
        if (v51)
        {
          if (v51 != 1)
          {
            uint64_t v113 = __cxa_allocate_exception(8uLL);
            *uint64_t v113 = &off_23FDF58;
          }
          uint64_t v50 = *(void *)(v50 + 8) - 104;
        }
        *(void *)(v50 + 80) = sub_FFBD0C(a1, v50, a2, v49);
        *(void *)(v50 + 88) = v52;
        unint64_t v53 = a7->u64[1];
        if (v53 >= a7[1].i64[0])
        {
          int v55 = sub_FFFFB8(a7, v50);
        }
        else
        {
          *(void *)unint64_t v53 = 0;
          *(void *)(v53 + 8) = 0;
          *(void *)(v53 + 16) = 0;
          *(_OWORD *)unint64_t v53 = *(_OWORD *)v50;
          *(void *)(v53 + 16) = *(void *)(v50 + 16);
          *(void *)uint64_t v50 = 0;
          *(void *)(v50 + 8) = 0;
          *(void *)(v50 + 16) = 0;
          *(void *)(v53 + 24) = 0;
          *(void *)(v53 + 32) = 0;
          *(void *)(v53 + 40) = 0;
          *(_OWORD *)(v53 + 24) = *(_OWORD *)(v50 + 24);
          *(void *)(v53 + 40) = *(void *)(v50 + 40);
          *(void *)(v50 + 24) = 0;
          *(void *)(v50 + 32) = 0;
          *(void *)(v50 + 40) = 0;
          long long v54 = *(_OWORD *)(v50 + 48);
          *(_OWORD *)(v53 + 61) = *(_OWORD *)(v50 + 61);
          *(_OWORD *)(v53 + 48) = v54;
          *(_OWORD *)(v53 + 80) = *(_OWORD *)(v50 + 80);
          int v55 = (char *)(v53 + 96);
        }
        a7->i64[1] = (uint64_t)v55;
        uint64_t v56 = *a2 + 120 * v49;
        int v57 = *(_DWORD *)(v56 + 96);
        if (v57 != 1)
        {
          if (v57)
          {
            unint64_t v114 = __cxa_allocate_exception(8uLL);
            *unint64_t v114 = &off_23FDF58;
          }
          int v58 = *(void **)(a1 + 168);
          uint64_t v59 = *(void *)(a1 + 192);
          *(_DWORD *)(v59 + 4 * *(unsigned int *)v58) = -1;
          unsigned int v60 = *(_DWORD *)(a1 + 216) - 1;
          *(_DWORD *)(a1 + 216) = v60;
          if (v60)
          {
            uint64_t v61 = v58[v60];
            *int v58 = v61;
            *(_DWORD *)(v59 + 4 * v61) = 0;
            unsigned int v62 = *(_DWORD *)(a1 + 216);
            if (v62 >= 2)
            {
              int v63 = 0;
              unsigned int v64 = 0;
              unsigned int v65 = 1;
              do
              {
                unsigned int v66 = v63 + 5;
                if (v66 >= v62) {
                  unsigned int v67 = v62;
                }
                else {
                  unsigned int v67 = v66;
                }
                if (v65 >= v67) {
                  break;
                }
                uint64_t v68 = v64;
                unsigned int v69 = HIDWORD(v58[v64]);
                uint64_t v70 = (signed int *)&v58[v65] + 1;
                unsigned int v64 = -1;
                signed int v71 = v69;
                do
                {
                  signed int v73 = *v70;
                  v70 += 2;
                  signed int v72 = v73;
                  if (v73 < v71)
                  {
                    signed int v71 = v72;
                    unsigned int v64 = v65;
                  }
                  ++v65;
                }
                while (v67 != v65);
                if (v64 >= v62) {
                  break;
                }
                uint64_t v74 = v68;
                unsigned int v75 = v58[v68];
                unint64_t v76 = (unsigned int *)&v58[v64];
                uint64_t v77 = *(void *)v76;
                *unint64_t v76 = v75;
                v76[1] = v69;
                v58[v74] = v77;
                uint64_t v78 = 4 * *v76;
                uint64_t v79 = 4 * v77;
                int v80 = *(_DWORD *)(v59 + v78);
                *(_DWORD *)(v59 + v78) = *(_DWORD *)(v59 + v79);
                *(_DWORD *)(v59 + v79) = v80;
                int v63 = 4 * v64;
                unsigned int v65 = (4 * v64) | 1;
                unsigned int v62 = *(_DWORD *)(a1 + 216);
              }
              while (v65 < v62);
            }
          }
          *(void *)(a1 + 176) -= 8;
          sub_FFBE5C(a1, v49);
          continue;
        }
        uint64_t v81 = *(void *)(v56 + 8);
        int v82 = *(_DWORD *)(v81 - 8);
        sub_FFC824(*a2 + 120 * v49, (void **)(v81 - 104));
        uint64_t v83 = *(void *)(v56 + 8);
        if (*(void *)v56 == v83)
        {
          uint64_t v86 = *(void **)(a1 + 168);
          uint64_t v87 = *(void *)(a1 + 192);
          *(_DWORD *)(v87 + 4 * *(unsigned int *)v86) = -1;
          unsigned int v88 = *(_DWORD *)(a1 + 216) - 1;
          *(_DWORD *)(a1 + 216) = v88;
          if (v88)
          {
            uint64_t v89 = v86[v88];
            *uint64_t v86 = v89;
            *(_DWORD *)(v87 + 4 * v89) = 0;
            unsigned int v90 = *(_DWORD *)(a1 + 216);
            if (v90 >= 2)
            {
              int v91 = 0;
              unsigned int v92 = 0;
              unsigned int v93 = 1;
              do
              {
                unsigned int v94 = v91 + 5;
                if (v94 >= v90) {
                  unsigned int v95 = v90;
                }
                else {
                  unsigned int v95 = v94;
                }
                if (v93 >= v95) {
                  break;
                }
                uint64_t v96 = v92;
                unsigned int v97 = HIDWORD(v86[v92]);
                long long v98 = (signed int *)&v86[v93] + 1;
                unsigned int v92 = -1;
                signed int v99 = v97;
                do
                {
                  signed int v101 = *v98;
                  v98 += 2;
                  signed int v100 = v101;
                  if (v101 < v99)
                  {
                    signed int v99 = v100;
                    unsigned int v92 = v93;
                  }
                  ++v93;
                }
                while (v95 != v93);
                if (v92 >= v90) {
                  break;
                }
                uint64_t v102 = v96;
                unsigned int v103 = v86[v96];
                unint64_t v104 = (unsigned int *)&v86[v92];
                uint64_t v105 = *(void *)v104;
                unsigned int *v104 = v103;
                v104[1] = v97;
                v86[v102] = v105;
                uint64_t v106 = 4 * *v104;
                uint64_t v107 = 4 * v105;
                int v108 = *(_DWORD *)(v87 + v106);
                *(_DWORD *)(v87 + v106) = *(_DWORD *)(v87 + v107);
                *(_DWORD *)(v87 + v107) = v108;
                int v91 = 4 * v92;
                unsigned int v93 = (4 * v92) | 1;
                unsigned int v90 = *(_DWORD *)(a1 + 216);
              }
              while (v93 < v90);
            }
          }
          *(void *)(a1 + 176) -= 8;
          goto LABEL_127;
        }
        double v84 = *(double *)(a1 + 80) * (double)*(uint64_t *)(a1 + 160);
        if (v84 >= 0.0)
        {
          if (v84 < 4.50359963e15)
          {
            uint64_t v85 = (uint64_t)(v84 + v84) + 1;
LABEL_119:
            double v84 = (double)(v85 >> 1);
          }
        }
        else if (v84 > -4.50359963e15)
        {
          uint64_t v85 = (uint64_t)(v84 + v84);
          if (v85 >= 1) {
            --v85;
          }
          goto LABEL_119;
        }
        uint64_t v109 = *(void *)(a1 + 192);
        uint64_t v110 = *(void *)(a1 + 200);
        if ((uint64_t)v84 < 0) {
          __int16 v111 = -50;
        }
        else {
          __int16 v111 = 50;
        }
        LODWORD(v122) = *(_DWORD *)(v83 - 8)
                      - v82
                      + *(_DWORD *)(*(void *)(a1 + 168) + 8 * *(unsigned int *)(v109 + 4 * v49) + 4)
                      + (int)(uint64_t)v84 / 100
                      + ((5243 * (__int16)(v111 + (int)(uint64_t)v84 % 100)) >> 19)
                      + ((5243 * (__int16)(v111 + (int)(uint64_t)v84 % 100)) >> 31);
        if (v49 >= (v110 - v109) >> 2 || *(_DWORD *)(v109 + 4 * v49) == -1) {
          sub_FFDD10((uint64_t)v119, v49, (unsigned int *)&v122);
        }
        else {
          sub_FFDFC4(v119, v49, &v122);
        }
LABEL_127:
        sub_FFBE5C(a1, v49);
      }
      while (*(_DWORD *)(a1 + 216));
    }
  }
  if (v132)
  {
    char v133 = v132;
    operator delete(v132);
  }
}

void sub_FFAEFC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(void *)(v1 - 104) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ****sub_FFAF50(void ****a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    for (unint64_t i = a1[1]; i != v2; sub_FFC6F0(v4, i))
    {
      int v4 = *((_DWORD *)i - 6);
      i -= 15;
    }
    a1[1] = v2;
    operator delete(*a1);
  }
  return a1;
}

void ****sub_FFAFB4(void ****a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    int v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 3;
      do
      {
        if (*v5)
        {
          sub_28F794((uint64_t)v5, *v5);
          operator delete(*v5);
        }
        uint64_t v6 = v5 - 2;
        v5 -= 5;
      }
      while (v6 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_FFB038@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  sub_FF713C((void *)a1, a2, a3, v151);
  if (v167 + v166 + v165 + v164 + v163 + v162 + v161 + v160 + v159 + v158 + v157 + v156 + v155 + v154 + v151[2] + v153)
  {
    signed int v71 = (char *)&unk_20E1710;
    signed int v72 = 0;
    uint64_t v73 = 0;
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    unint64_t v76 = &unk_20E1710;
    uint64_t v80 = 0;
    uint64_t v81 = &unk_20E1710;
    uint64_t v78 = 0;
    uint64_t v79 = 0;
    uint64_t v77 = 0;
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    uint64_t v86 = &unk_20E1710;
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    uint64_t v90 = 0;
    int v91 = &unk_20E1710;
    uint64_t v89 = 0;
    uint64_t v92 = 0;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    uint64_t v95 = 0;
    uint64_t v96 = &unk_20E1710;
    uint64_t v100 = 0;
    signed int v101 = &unk_20E1710;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    uint64_t v97 = 0;
    uint64_t v102 = 0;
    uint64_t v103 = 0;
    uint64_t v104 = 0;
    uint64_t v105 = 0;
    uint64_t v106 = &unk_20E1710;
    uint64_t v110 = 0;
    __int16 v111 = &unk_20E1710;
    uint64_t v108 = 0;
    uint64_t v109 = 0;
    uint64_t v107 = 0;
    uint64_t v112 = 0;
    uint64_t v113 = 0;
    uint64_t v114 = 0;
    uint64_t v115 = 0;
    uint64_t v116 = &unk_20E1710;
    uint64_t v120 = 0;
    uint64_t v118 = 0;
    uint64_t v119 = 0;
    uint64_t v117 = 0;
    uint64_t v125 = 0;
    uint64_t v121 = &unk_20E1710;
    uint64_t v122 = 0;
    uint64_t v124 = 0;
    uint64_t v123 = 0;
    double v126 = &unk_20E1710;
    uint64_t v130 = 0;
    uint64_t v128 = 0;
    uint64_t v127 = 0;
    uint64_t v129 = 0;
    unint64_t v131 = &unk_20E1710;
    uint64_t v135 = 0;
    uint64_t v133 = 0;
    uint64_t v132 = 0;
    uint64_t v134 = 0;
    long long v136 = &unk_20E1710;
    uint64_t v140 = 0;
    uint64_t v138 = 0;
    uint64_t v137 = 0;
    uint64_t v139 = 0;
    long long v141 = &unk_20E1710;
    uint64_t v145 = 0;
    uint64_t v143 = 0;
    uint64_t v142 = 0;
    uint64_t v144 = 0;
    v146 = &unk_20E1710;
    uint64_t v150 = 0;
    uint64_t v148 = 0;
    uint64_t v147 = 0;
    uint64_t v149 = 0;
    unsigned int v11 = *(_DWORD *)(a1 + 800);
    if (v11 >= a4) {
      LOBYTE(v11) = a4;
    }
    uint64_t v12 = (unsigned int *)v151[1];
    unsigned int v66 = a6;
    uint64_t v13 = (void *)v151[0];
    if (*(char *)v151[0] <= -2)
    {
      do
      {
        unint64_t v14 = (__clz(__rbit64(((*v13 >> 7) & ~*v13 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        uint64_t v13 = (void *)((char *)v13 + v14);
        v12 += v14;
      }
      while (*(char *)v13 < -1);
    }
    int64_t v15 = (void *)(v151[0] + v152);
    if (v13 == (void *)(v151[0] + v152))
    {
      uint64_t v16 = 1;
      unsigned int v60 = v151;
      while (1)
      {
        uint64_t v61 = &v151[6 * v16];
        uint64_t v12 = (unsigned int *)v60[7];
        uint64_t v13 = (void *)*v61;
        if (*(char *)*v61 <= -2)
        {
          do
          {
            unint64_t v62 = (__clz(__rbit64(((*v13 >> 7) & ~*v13 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            uint64_t v13 = (void *)((char *)v13 + v62);
            v12 += v62;
          }
          while (*(char *)v13 < -1);
        }
        int64_t v15 = (void *)(*v61 + v60[9]);
        if (v13 != v15) {
          break;
        }
        ++v16;
        unsigned int v60 = v61;
        if (v16 == 16) {
          goto LABEL_23;
        }
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    char v17 = 2 * v11;
    while (1)
    {
      do
      {
        LODWORD(v69) = *v12 >> ((sub_511FC(*v12) - v17) & 0xFE);
        sub_EE2264((uint64_t)&v71, (unsigned int *)&v69, (uint64_t)&v168);
        unint64_t v18 = v168.n128_u64[0];
        if ((_BYTE)v169)
        {
          unint64_t v19 = *(void *)(v168.n128_u64[0] + 8) + 32 * v168.n128_u64[1];
          *(_DWORD *)unint64_t v19 = v69;
          *(void *)(v19 + 16) = 0;
          *(void *)(v19 + 24) = 0;
          *(void *)(v19 + 8) = 0;
        }
        sub_745A4(*(void *)(v18 + 8) + 32 * v168.n128_u64[1] + 8, v12);
        int v20 = *((char *)v13 + 1);
        uint64_t v13 = (void *)((char *)v13 + 1);
        ++v12;
        if (v20 <= -2)
        {
          do
          {
            unint64_t v21 = (__clz(__rbit64(((*v13 >> 7) & ~*v13 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            uint64_t v13 = (void *)((char *)v13 + v21);
            v12 += v21;
          }
          while (*(char *)v13 < -1);
        }
      }
      while (v13 != v15);
      if (v16 == 15) {
        break;
      }
      uint64_t v22 = &v151[6 * v16++];
      while (1)
      {
        int v23 = &v151[6 * v16];
        uint64_t v12 = (unsigned int *)v22[7];
        uint64_t v13 = (void *)*v23;
        if (*(char *)*v23 <= -2)
        {
          do
          {
            unint64_t v24 = (__clz(__rbit64(((*v13 >> 7) & ~*v13 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            uint64_t v13 = (void *)((char *)v13 + v24);
            v12 += v24;
          }
          while (*(char *)v13 < -1);
        }
        int64_t v15 = (void *)(*v23 + v22[9]);
        if (v13 != v15) {
          break;
        }
        ++v16;
        uint64_t v22 = v23;
        if (v16 == 16) {
          goto LABEL_23;
        }
      }
    }
LABEL_23:
    uint64_t v67 = a1;
    *unsigned int v66 = 0;
    v66[1] = 0;
    v66[2] = 0;
    uint64_t v25 = v151;
    uint64_t v26 = v72;
    uint64_t v27 = v71;
    if (*v71 <= -2)
    {
      do
      {
        unint64_t v28 = (__clz(__rbit64(((*(void *)v27 >> 7) & ~*(void *)v27 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v27 += v28;
        v26 += 32 * v28;
      }
      while (*v27 < -1);
    }
    unint64_t v29 = &v71[v74];
    if (v27 == &v71[v74])
    {
      uint64_t v30 = 1;
      int v63 = &v71;
      while (1)
      {
        unsigned int v64 = &(&v71)[6 * v30];
        uint64_t v26 = v63[7];
        uint64_t v27 = (char *)*v64;
        if (*(char *)*v64 <= -2)
        {
          do
          {
            unint64_t v65 = (__clz(__rbit64(((*(void *)v27 >> 7) & ~*(void *)v27 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v27 += v65;
            v26 += 32 * v65;
          }
          while (*v27 < -1);
        }
        unint64_t v29 = &v63[9][*v64];
        if (v27 != v29) {
          break;
        }
        ++v30;
        int v63 = (char **)v64;
        if (v30 == 16) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      uint64_t v30 = 0;
    }
    while (1)
    {
      uint64_t v68 = v29;
      do
      {
        BOOL v32 = (unsigned int *)*((void *)v26 + 1);
        uint64_t v33 = (unsigned int *)*((void *)v26 + 2);
        char v34 = *(uint64_t **)(v67 + 16);
        uint64_t v169 = 0;
        __n128 v168 = 0uLL;
        if (v32 != v33)
        {
          do
            sub_28D8C4(v34, *v32++, a5, (int64x2_t *)&v168);
          while (v32 != v33);
          uint64_t v35 = (void **)v168.n128_u64[1];
          if (v168.n128_u64[0] != v168.n128_u64[1])
          {
            unsigned int v36 = sub_511FC(*(_DWORD *)v26);
            unsigned int v37 = sub_511FC(*(_DWORD *)v26);
            unsigned int v38 = *(_DWORD *)v26 & ~(-1 << (v37 & 0xFE));
            int v39 = sub_51938(v38);
            int v40 = sub_51938(v38 >> 1);
            unsigned int v41 = 0x7FFFFFFFu >> (v36 >> 1);
            int v42 = 1 << -(v37 >> 1);
            if (v37 < 2) {
              int v42 = -2;
            }
            uint64_t v43 = v41 + v39 * v42;
            LODWORD(v44) = v41 + v40 * v42;
            if (v44 >= 0xFFFFFFFE) {
              uint64_t v44 = 4294967294;
            }
            else {
              uint64_t v44 = v44;
            }
            uint64_t v69 = v43 | (v44 << 32);
            int v70 = 0x7FFFFFFF;
            uint64_t v45 = v66;
            unint64_t v46 = v66[1];
            if (v46 >= v66[2])
            {
              uint64_t v47 = sub_FFCA1C(v66, &v69, &v168);
              uint64_t v45 = v66;
            }
            else
            {
              sub_FF6AF4(v66[1], &v69, &v168);
              uint64_t v47 = v46 + 40;
              v66[1] = v46 + 40;
            }
            v45[1] = v47;
            uint64_t v35 = (void **)v168.n128_u64[0];
          }
          if (v35)
          {
            sub_28F794((uint64_t)&v168, v35);
            operator delete((void *)v168.n128_u64[0]);
          }
        }
        int v48 = *++v27;
        v26 += 32;
        if (v48 > -2)
        {
          uint64_t v31 = v68;
        }
        else
        {
          uint64_t v31 = v68;
          do
          {
            unint64_t v49 = (__clz(__rbit64(((*(void *)v27 >> 7) & ~*(void *)v27 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v27 += v49;
            v26 += 32 * v49;
          }
          while (*v27 < -1);
        }
      }
      while (v27 != v31);
      if (v30 == 15) {
        break;
      }
      uint64_t v50 = &(&v71)[6 * v30++];
      while (1)
      {
        int v51 = &(&v71)[6 * v30];
        uint64_t v26 = v50[7];
        uint64_t v27 = *v51;
        if (**v51 <= -2)
        {
          do
          {
            unint64_t v52 = (__clz(__rbit64(((*(void *)v27 >> 7) & ~*(void *)v27 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v27 += v52;
            v26 += 32 * v52;
          }
          while (*v27 < -1);
        }
        unint64_t v29 = &v50[9][(void)*v51];
        if (v27 != v29) {
          break;
        }
        ++v30;
        uint64_t v50 = v51;
        if (v30 == 16) {
          goto LABEL_57;
        }
      }
    }
    do
    {
LABEL_57:
      unint64_t v53 = (char **)(v25 - 6);
      uint64_t v54 = *(v25 - 3);
      if (v54)
      {
        uint64_t v55 = 0;
        uint64_t v56 = 0;
        int v57 = v25 - 5;
        do
        {
          if (((*v53)[v56] & 0x80000000) == 0)
          {
            uint64_t v58 = *v57 + v55;
            uint64_t v59 = *(void **)(v58 + 8);
            if (v59)
            {
              *(void *)(v58 + 16) = v59;
              operator delete(v59);
              uint64_t v54 = *(v25 - 3);
            }
          }
          ++v56;
          v55 += 32;
        }
        while (v56 != v54);
        operator delete((void *)*(v25 - 6));
        *(v25 - 6) = &unk_20E1710;
        *(v25 - 1) = 0;
        *(v25 - 4) = 0;
        *(v25 - 3) = 0;
        *int v57 = 0;
      }
      v25 -= 6;
    }
    while (v53 != &v71);
  }
  else
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
  return sub_328138((uint64_t)v151);
}

void sub_FFB82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  *(void *)(v7 + 8) = v6;
  sub_28DCA0((void ***)(v8 - 120));
  sub_FFAFB4((void ****)v7);
  sub_42CB30(va);
  sub_328138((uint64_t)&STACK[0x328]);
  _Unwind_Resume(a1);
}

void ***sub_FFB88C(void ***a1)
{
  if (*a1)
  {
    sub_FFC824((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_FFB8C8(uint64_t a1, void *a2, unsigned int a3)
{
  uint64_t v6 = a1 + 224;
  sub_10004BC(a1 + 224, a3);
  uint64_t v8 = *(void *)(a1 + 296);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 272) + 4 * a3);
  sub_10004BC(v6, a3);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 272) + 4 * (a3 + 1));
  uint64_t v11 = *(void *)(a1 + 296);
  uint64_t v12 = *(void *)(a1 + 160);
  uint64_t v13 = *a2 + 120 * a3;
  unsigned int v14 = *(_DWORD *)(v13 + 96);
  if (!v14) {
    goto LABEL_4;
  }
  if (v14 != 1)
  {
LABEL_17:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  unsigned int v15 = -991146299 * ((*(void *)(v13 + 8) - *(void *)v13) >> 3);
  unsigned int v14 = v15 - 1;
  int v16 = *(_DWORD *)(a1 + 40);
  if (v16)
  {
    unint64_t v25 = sub_5120C(v16);
    uint64_t v22 = sub_FFC1B0((uint64_t *)&v25, (double)(v15 >> 1));
    if (v22 < v12) {
      uint64_t v12 = v22;
    }
    char v17 = (unsigned int *)(v8 + 16 * v9);
    for (unint64_t i = (unsigned int *)(v11 + 16 * v10); v17 != i; v17 += 4)
    {
LABEL_10:
      uint64_t v20 = *a2 + 120 * *v17;
      int v21 = *(_DWORD *)(v20 + 96);
      if (v21)
      {
        if (v21 != 1) {
          goto LABEL_17;
        }
        int v19 = -991146299 * ((*(void *)(v20 + 8) - *(void *)v20) >> 3);
      }
      else
      {
        int v19 = 1;
      }
      v14 += v19;
      if (*((void *)v17 + 1) < v12) {
        uint64_t v12 = *((void *)v17 + 1);
      }
    }
  }
  else
  {
LABEL_4:
    char v17 = (unsigned int *)(v8 + 16 * v9);
    unint64_t i = (unsigned int *)(v11 + 16 * v10);
    if (v17 != i) {
      goto LABEL_10;
    }
  }
  return v14;
}

uint64_t sub_FFBA80(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  v23[0] = (uint64_t)a3;
  v23[1] = a4;
  unint64_t v6 = *(void *)((char *)a2 + 52);
  if (a3[1] == v6) {
    return 0x7FFFFFFFLL;
  }
  if (*a3 == v6) {
    return 0x80000000;
  }
  uint64_t v8 = sub_40EFF0((uint64_t)v23);
  if (v6 == v8 && HIDWORD(v6) == HIDWORD(v8)) {
    return 0x80000000;
  }
  uint64_t v7 = sub_FE5038((void *)(a1 + 344), a2, (uint64_t)(a2 + 10), v23);
  if (*(double *)(a1 + 88) > 0.0)
  {
    uint64_t v10 = sub_376F8C(*(void **)(a1 + 8));
    unint64_t v11 = sub_28E018(v10, v6);
    uint64_t v12 = *(unsigned int *)(a1 + 116);
    long double v13 = exp((double)((v11 >> 33) + (v12 >> 1)) * -6.28318531 / 4294967300.0 + 3.14159265);
    long double v14 = atan((v13 + -1.0 / v13) * 0.5);
    long double v15 = cos(v14 * 57.2957795 / 180.0 * 3.14159265);
    unint64_t v16 = *(unsigned int *)(a1 + 112) - (unint64_t)v11;
    double v17 = v15
        * 0.00932288077
        * (sqrt((double)((v12 - HIDWORD(v11)) * (v12 - HIDWORD(v11)) + v16 * v16))
         / 100.0
         * 100.0)
        * 100.0;
    if (v17 >= 0.0)
    {
      double v18 = v17;
      if (v17 >= 4.50359963e15) {
        goto LABEL_18;
      }
      uint64_t v19 = (uint64_t)(v17 + v17) + 1;
    }
    else
    {
      double v18 = v17;
      if (v17 <= -4.50359963e15) {
        goto LABEL_18;
      }
      uint64_t v19 = (uint64_t)(v17 + v17);
      if (v19 >= 1) {
        --v19;
      }
    }
    double v18 = (double)(v19 >> 1);
LABEL_18:
    if (v18 >= 9.22337204e18)
    {
      uint64_t v21 = 0x7FFFFFFFFFFFFFFELL;
      return (v7
                          + (int)((double)((*(void *)(a1 + 160) - (*(void *)(a1 + 144) + v21)) & ~((*(void *)(a1 + 160) - (*(void *)(a1 + 144) + v21)) >> 63))
                                / -100.0
                                * *(double *)(a1 + 88)));
    }
    if (v17 >= 0.0)
    {
      if (v17 < 4.50359963e15)
      {
        uint64_t v20 = (uint64_t)(v17 + v17) + 1;
LABEL_27:
        double v17 = (double)(v20 >> 1);
      }
    }
    else if (v17 > -4.50359963e15)
    {
      uint64_t v20 = (uint64_t)(v17 + v17);
      if (v20 >= 1) {
        --v20;
      }
      goto LABEL_27;
    }
    uint64_t v21 = (uint64_t)v17;
    return (v7
                        + (int)((double)((*(void *)(a1 + 160) - (*(void *)(a1 + 144) + v21)) & ~((*(void *)(a1 + 160) - (*(void *)(a1 + 144) + v21)) >> 63))
                              / -100.0
                              * *(double *)(a1 + 88)));
  }
  return v7;
}

uint64_t sub_FFBD0C(uint64_t a1, uint64_t a2, void *a3, unsigned int a4)
{
  uint64_t v8 = sub_376F8C(*(void **)(a1 + 8));
  unint64_t v9 = sub_28E018(v8, *(void *)(a2 + 52));
  int v22 = v10;
  uint64_t v20 = *(void *)(a1 + 160);
  unint64_t v21 = v9;
  unsigned int v19 = 0;
  v18[0] = a2;
  v18[1] = v8;
  v18[2] = &v21;
  v18[3] = &v20;
  v18[4] = a1;
  v18[5] = &v19;
  uint64_t v11 = *a3 + 120 * a4;
  if (*(_DWORD *)(v11 + 96)) {
    sub_FFC214((unint64_t)v18, (uint64_t *)v11);
  }
  sub_10004BC(a1 + 224, a4);
  uint64_t v12 = (unsigned int *)(*(void *)(a1 + 296) + 16 * *(unsigned int *)(*(void *)(a1 + 272) + 4 * a4));
  sub_10004BC(a1 + 224, a4);
  for (uint64_t i = *(void *)(a1 + 296) + 16 * *(unsigned int *)(*(void *)(a1 + 272) + 4 * (a4 + 1));
        v12 != (unsigned int *)i;
        v12 += 4)
  {
    uint64_t v14 = *a3 + 120 * *v12;
    if (*(_DWORD *)(v14 + 96))
    {
      sub_FFC214((unint64_t)v18, (uint64_t *)v14);
    }
    else
    {
      uint64_t v15 = *((void *)v12 + 1);
      uint64_t v16 = v20;
      if (v15 < v20) {
        uint64_t v16 = *((void *)v12 + 1);
      }
      uint64_t v20 = v16;
      if (v15 < *(void *)(a1 + 104)) {
        ++v19;
      }
    }
  }
  return v19;
}

void sub_FFBE5C(uint64_t a1, unsigned int a2)
{
  if (*(double *)(a1 + 80) <= 0.0) {
    return;
  }
  uint64_t v4 = a1 + 224;
  sub_10004BC(a1 + 224, a2);
  unint64_t v6 = (unsigned int *)(*(void *)(a1 + 296) + 16 * *(unsigned int *)(*(void *)(a1 + 272) + 4 * a2));
  sub_10004BC(v4, a2);
  uint64_t v7 = *(void *)(a1 + 296) + 16 * *(unsigned int *)(*(void *)(a1 + 272) + 4 * (a2 + 1));
  uint64_t v27 = v6;
  unint64_t v28 = v7;
  sub_1000180((uint64_t *)&v27, (uint64_t)&v33);
  sub_FFC908((uint64_t)&v27, &v33);
  sub_FFC908((uint64_t)v22, &v38);
  unint64_t v9 = (unsigned int **)v31;
  uint64_t v8 = v32;
  while (1)
  {
    if (v9 == v8 || v25 == v26)
    {
      if ((v9 == v8) == (v25 == v26)) {
        break;
      }
      int v10 = v27;
      unint64_t v12 = *v27;
      uint64_t v13 = *(void *)(a1 + 192);
      if (v12 >= (*(void *)(a1 + 200) - v13) >> 2) {
        goto LABEL_29;
      }
      goto LABEL_13;
    }
    int v10 = v27;
    if (v28 == v22[1] && v27 == (unsigned int *)v22[0]) {
      break;
    }
    unint64_t v12 = *v27;
    uint64_t v13 = *(void *)(a1 + 192);
    if (v12 >= (*(void *)(a1 + 200) - v13) >> 2) {
      goto LABEL_29;
    }
LABEL_13:
    uint64_t v14 = *(unsigned int *)(v13 + 4 * v12);
    if (v14 != -1)
    {
      double v15 = *(double *)(a1 + 80) * (double)(uint64_t)(*(void *)(a1 + 160) - *((void *)v10 + 1));
      if (v15 >= 0.0)
      {
        if (v15 < 4.50359963e15)
        {
          uint64_t v16 = (uint64_t)(v15 + v15) + 1;
LABEL_21:
          double v15 = (double)(v16 >> 1);
        }
      }
      else if (v15 > -4.50359963e15)
      {
        uint64_t v16 = (uint64_t)(v15 + v15);
        if (v16 >= 1) {
          --v16;
        }
        goto LABEL_21;
      }
      if ((uint64_t)v15 < 0) {
        __int16 v17 = -50;
      }
      else {
        __int16 v17 = 50;
      }
      unsigned int v21 = *(_DWORD *)(*(void *)(a1 + 168) + 8 * v14 + 4)
          + (int)(uint64_t)v15 / 100
          + ((5243 * (__int16)(v17 + (int)(uint64_t)v15 % 100)) >> 19)
          + ((5243 * (__int16)(v17 + (int)(uint64_t)v15 % 100)) >> 31);
      if (*(_DWORD *)(v13 + 4 * v12) == -1) {
        sub_FFDD10(a1 + 168, v12, &v21);
      }
      else {
        sub_FFDFC4((uint64_t *)(a1 + 168), v12, &v21);
      }
      unint64_t v9 = (unsigned int **)v31;
      uint64_t v8 = v32;
      int v10 = v27;
    }
LABEL_29:
    double v18 = v10 + 4;
    unint64_t v19 = v8 - v9 - 1;
    unint64_t v20 = v28;
    uint64_t v27 = v18;
    if (v28 < v19)
    {
      do
      {
        if (v18 != v9[v20]) {
          break;
        }
        unint64_t v28 = v20 + 1;
        double v18 = (unsigned int *)*((void *)v29 + v20 + 1);
        uint64_t v27 = v18;
        ++v20;
      }
      while (v19 != v28);
    }
  }
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
  if (__p)
  {
    unint64_t v24 = __p;
    operator delete(__p);
  }
  if (v31)
  {
    BOOL v32 = (unsigned int **)v31;
    operator delete(v31);
  }
  if (v29)
  {
    uint64_t v30 = v29;
    operator delete(v29);
  }
  if (v41)
  {
    int v42 = v41;
    operator delete(v41);
  }
  if (v39)
  {
    int v40 = v39;
    operator delete(v39);
  }
  if (v36)
  {
    unsigned int v37 = v36;
    operator delete(v36);
  }
  if (v34)
  {
    uint64_t v35 = v34;
    operator delete(v34);
  }
}

void sub_FFC18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

uint64_t sub_FFC1B0(uint64_t *a1, double a2)
{
  double v2 = (double)*a1 / a2;
  if (v2 >= 0.0)
  {
    if (v2 < 4.50359963e15)
    {
      uint64_t v3 = (uint64_t)(v2 + v2) + 1;
      return (uint64_t)(double)(v3 >> 1);
    }
  }
  else if (v2 > -4.50359963e15)
  {
    uint64_t v3 = (uint64_t)(v2 + v2);
    if (v3 >= 1) {
      --v3;
    }
    return (uint64_t)(double)(v3 >> 1);
  }
  return (uint64_t)v2;
}

unint64_t sub_FFC214(unint64_t result, uint64_t *a2)
{
  if (*((_DWORD *)a2 + 24) != 1)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    unint64_t v4 = result;
    uint64_t v5 = *(void *)(result + 32);
    while (*(_DWORD *)(v2 + 52) == *(_DWORD *)(*(void *)v4 + 52)
         && *(_DWORD *)(v2 + 56) == *(_DWORD *)(*(void *)v4 + 56))
    {
LABEL_4:
      v2 += 104;
      if (v2 == v3) {
        return result;
      }
    }
    unint64_t result = sub_28E018(*(void *)(v4 + 8), *(void *)(v2 + 52));
    unint64_t v6 = *(unsigned int **)(v4 + 16);
    uint64_t v7 = *v6;
    unint64_t v8 = v6[1] - HIDWORD(result);
    double v9 = sqrt((double)((v7 - result) * (v7 - result) + v8 * v8)) / 100.0 * 100.0;
    if (v9 >= 0.0)
    {
      double v10 = v9;
      if (v9 >= 4.50359963e15) {
        goto LABEL_15;
      }
      uint64_t v11 = (uint64_t)(v9 + v9) + 1;
    }
    else
    {
      double v10 = v9;
      if (v9 <= -4.50359963e15) {
        goto LABEL_15;
      }
      uint64_t v11 = (uint64_t)(v9 + v9);
      if (v11 >= 1) {
        --v11;
      }
    }
    double v10 = (double)(v11 >> 1);
LABEL_15:
    if (v10 >= 9.22337204e18)
    {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFELL;
LABEL_26:
      uint64_t v14 = *(uint64_t **)(v4 + 24);
      uint64_t v15 = *v14;
      if (v13 < *v14) {
        uint64_t v15 = v13;
      }
      *uint64_t v14 = v15;
      if (v13 < *(void *)(v5 + 104)) {
        ++**(_DWORD **)(v4 + 40);
      }
      goto LABEL_4;
    }
    if (v9 >= 0.0)
    {
      if (v9 < 4.50359963e15)
      {
        uint64_t v12 = (uint64_t)(v9 + v9) + 1;
LABEL_24:
        double v9 = (double)(v12 >> 1);
      }
    }
    else if (v9 > -4.50359963e15)
    {
      uint64_t v12 = (uint64_t)(v9 + v9);
      if (v12 >= 1) {
        --v12;
      }
      goto LABEL_24;
    }
    uint64_t v13 = (uint64_t)v9;
    goto LABEL_26;
  }
  return result;
}

__n128 *sub_FFC408(__n128 **a1, uint64_t a2, __n128 *a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (void)*a1;
  uint64_t v8 = v7 >> 4;
  double v9 = (__n128 *)((char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF0));
  unint64_t v10 = (unint64_t)a1[2];
  if (v6 >= v10)
  {
    unint64_t v30 = ((uint64_t)(v6 - (void)v5) >> 4) + 1;
    if (v30 >> 60) {
      sub_2E00();
    }
    uint64_t v31 = v10 - (void)v5;
    if (v31 >> 3 > v30) {
      unint64_t v30 = v31 >> 3;
    }
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v32 = v30;
    }
    unint64_t v49 = a1 + 2;
    if (v32)
    {
      if (v32 >> 60) {
        sub_188D718();
      }
      long long v33 = (__n128 *)operator new(16 * v32);
    }
    else
    {
      long long v33 = 0;
    }
    uint64_t v45 = v33;
    unint64_t v46 = &v33[v8];
    uint64_t v47 = v46;
    int v48 = (char *)&v33[v32];
    sub_EF8694((uint64_t)&v45, a3);
    char v34 = v46;
    uint64_t v35 = *a1;
    unsigned int v36 = v46;
    if (*a1 != v9)
    {
      unsigned int v37 = v9;
      long long v38 = v46;
      do
      {
        unsigned int v36 = v38 - 1;
        v38[-1] = v37[-1];
        --v37;
        --v38;
      }
      while (v37 != v35);
    }
    unint64_t v46 = v36;
    int v39 = a1[1];
    int v40 = v47;
    if (v39 != v9)
    {
      do
      {
        __n128 v41 = *v9++;
        *v40++ = v41;
      }
      while (v9 != v39);
      unsigned int v36 = v46;
      double v9 = a1[1];
    }
    int v42 = *a1;
    *a1 = v36;
    a1[1] = v40;
    uint64_t v43 = (char *)a1[2];
    a1[2] = (__n128 *)v48;
    uint64_t v47 = v9;
    int v48 = v43;
    uint64_t v45 = v42;
    unint64_t v46 = v42;
    if (v9 != v42) {
      uint64_t v47 = (__n128 *)((char *)v9 + (((char *)v42 - (char *)v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    }
    if (v42) {
      operator delete(v42);
    }
    return v34;
  }
  else if (v9 == (__n128 *)v6)
  {
    __n128 *v9 = *a3;
    a1[1] = v9 + 1;
  }
  else
  {
    uint64_t v11 = v9 + 1;
    unint64_t v12 = v6 - 16;
    uint64_t v13 = a1[1];
    if (v6 >= 0x10)
    {
      uint64_t v14 = (long long *)(v6 - 16);
      uint64_t v13 = a1[1];
      do
      {
        __n128 v15 = (__n128)*v14++;
        *v13++ = v15;
      }
      while ((unint64_t)v14 < v6);
    }
    a1[1] = v13;
    if ((__n128 *)v6 != v11)
    {
      unint64_t v16 = v6 - (void)v11;
      unint64_t v17 = v6 - (void)v11 - 16;
      if (v17 < 0xD0
        || v6 - (v16 & 0xFFFFFFFFFFFFFFF0) < v12
        && (unint64_t)v5->n128_u64 + v16 + (v7 & 0xFFFFFFFFFFFFFFF0) - (v16 & 0xFFFFFFFFFFFFFFF0) < v6)
      {
        goto LABEL_13;
      }
      uint64_t v18 = (v17 >> 4) + 1;
      uint64_t v19 = 16 * (v18 & 0x1FFFFFFFFFFFFFFCLL);
      unint64_t v20 = v6 - v19;
      unint64_t v21 = v12 - v19;
      int v22 = (_OWORD *)(v6 - 48);
      int v23 = (_OWORD *)(v6 - 32);
      uint64_t v24 = v18 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        long long v25 = v22[1];
        long long v27 = *(v22 - 2);
        long long v26 = *(v22 - 1);
        _OWORD *v23 = *v22;
        v23[1] = v25;
        *(v23 - 2) = v27;
        *(v23 - 1) = v26;
        v23 -= 4;
        v22 -= 4;
        v24 -= 4;
      }
      while (v24);
      unint64_t v6 = v20;
      unint64_t v12 = v21;
      if (v18 != (v18 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_13:
        unint64_t v28 = (void *)(v6 - 8);
        do
        {
          uint64_t v29 = *(void *)(v12 - 16);
          v12 -= 16;
          *(v28 - 1) = v29;
          *unint64_t v28 = *(void *)(v12 + 8);
          v28 -= 2;
        }
        while ((__n128 *)v12 != v9);
      }
    }
    v9->n128_u64[0] = a3->n128_u64[0];
    v5[v8].n128_u64[1] = a3->n128_u64[1];
  }
  return v9;
}

void sub_FFC6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    uint64_t v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_FFC6F0(int a1, void ***a2)
{
  if (a1 == 1)
  {
    unint64_t v6 = *a2;
    if (*a2)
    {
      sub_FFC824((uint64_t)a2, v6);
      uint64_t v7 = *a2;
      goto LABEL_12;
    }
  }
  else if (!a1)
  {
    uint64_t v3 = a2[3];
    if (v3)
    {
      unint64_t v4 = a2[4];
      uint64_t v5 = a2[3];
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 6;
        }
        while (v4 != v3);
        uint64_t v5 = a2[3];
      }
      a2[4] = v3;
      operator delete(v5);
    }
    uint64_t v8 = *a2;
    if (*a2)
    {
      double v9 = a2[1];
      uint64_t v7 = *a2;
      if (v9 == v8)
      {
        a2[1] = v8;
      }
      else
      {
        do
        {
          unint64_t v10 = *(v9 - 3);
          if (v10)
          {
            *(v9 - 2) = v10;
            operator delete(v10);
          }
          v9 -= 6;
        }
        while (v9 != v8);
        uint64_t v7 = *a2;
        a2[1] = v8;
      }
LABEL_12:
      operator delete(v7);
    }
  }
}

void sub_FFC824(uint64_t a1, void **a2)
{
  unint64_t v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      unint64_t v6 = (void **)*(v4 - 10);
      if (v6)
      {
        uint64_t v7 = (void **)*(v4 - 9);
        uint64_t v8 = *(v4 - 10);
        if (v7 != v6)
        {
          do
          {
            if (*((char *)v7 - 1) < 0) {
              operator delete(*(v7 - 3));
            }
            v7 -= 6;
          }
          while (v7 != v6);
          uint64_t v8 = *(v4 - 10);
        }
        *(v4 - 9) = v6;
        operator delete(v8);
      }
      double v9 = v4 - 13;
      unint64_t v10 = (char *)*(v4 - 13);
      if (v10)
      {
        uint64_t v11 = (char *)*(v4 - 12);
        uint64_t v5 = *(v4 - 13);
        if (v11 != v10)
        {
          do
          {
            unint64_t v12 = (void *)*((void *)v11 - 3);
            if (v12)
            {
              *((void *)v11 - 2) = v12;
              operator delete(v12);
            }
            v11 -= 48;
          }
          while (v11 != v10);
          uint64_t v5 = *v9;
        }
        *(v4 - 12) = v10;
        operator delete(v5);
      }
      v4 -= 13;
    }
    while (v9 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_FFC908(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  unint64_t v6 = (unsigned char *)*((void *)a2 + 2);
  uint64_t v5 = (unsigned char *)*((void *)a2 + 3);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v8;
    double v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 32) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 24) = v9;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v11 = (unsigned char *)*((void *)a2 + 5);
  unint64_t v10 = (unsigned char *)*((void *)a2 + 6);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    uint64_t v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 56) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 48) = v14;
  }
  return a1;
}

void sub_FFC9E8(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_FFCA1C(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    sub_2E00();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v5) {
    unint64_t v5 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v8 = 0x666666666666666;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x666666666666666) {
      sub_188D718();
    }
    double v9 = (char *)operator new(40 * v8);
  }
  else
  {
    double v9 = 0;
  }
  uint64_t v20 = (uint64_t)&v9[40 * v4];
  unint64_t v21 = &v9[40 * v8];
  sub_FF6AF4(v20, a2, a3);
  uint64_t v10 = v20;
  uint64_t v11 = v20 + 40;
  uint64_t v13 = *a1;
  uint64_t v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v20;
    a1[1] = v11;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      uint64_t v14 = *(void *)(v12 - 40);
      v12 -= 40;
      int v15 = *(_DWORD *)(v12 + 8);
      *(void *)(v10 - 40) = v14;
      v10 -= 40;
      *(_DWORD *)(v10 + 8) = v15;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0;
      *(void *)(v10 + 16) = 0;
      *(_OWORD *)(v10 + 16) = *(_OWORD *)(v12 + 16);
      *(void *)(v10 + 32) = *(void *)(v12 + 32);
      *(void *)(v12 + 16) = 0;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0;
    }
    while (v12 != v13);
    unint64_t v16 = (void ***)*a1;
    uint64_t v12 = a1[1];
    *a1 = v10;
    a1[1] = v11;
    a1[2] = (uint64_t)v21;
    if ((void ***)v12 != v16)
    {
      unint64_t v17 = (void ***)(v12 - 24);
      do
      {
        if (*v17)
        {
          sub_28F794((uint64_t)v17, *v17);
          operator delete(*v17);
        }
        uint64_t v18 = v17 - 2;
        v17 -= 5;
      }
      while (v18 != v16);
      uint64_t v12 = (uint64_t)v16;
    }
  }
  if (v12) {
    operator delete((void *)v12);
  }
  return v20 + 40;
}

void sub_FFCBD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_FFCBE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_FFCBE4(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        unint64_t v6 = (void **)*(v2 - 3);
        unint64_t v5 = v2 - 3;
        unint64_t v4 = v6;
        int64_t v7 = v5 - 2;
        *(void *)(a1 + 16) = v5 - 2;
        if (!v6) {
          break;
        }
        sub_28F794((uint64_t)v5, v4);
        operator delete(*v5);
        uint64_t v2 = *(void ***)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      uint64_t v2 = v5 - 2;
    }
    while (v7 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_FFCC64(void ****a1, uint64_t a2)
{
  unint64_t v3 = 0xEEEEEEEEEEEEEEEFLL * (a1[1] - *a1);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x222222222222222) {
    sub_2E00();
  }
  if (0xDDDDDDDDDDDDDDDELL * (a1[2] - *a1) > v4) {
    unint64_t v4 = 0xDDDDDDDDDDDDDDDELL * (a1[2] - *a1);
  }
  if (0xEEEEEEEEEEEEEEEFLL * (a1[2] - *a1) >= 0x111111111111111) {
    unint64_t v6 = 0x222222222222222;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x222222222222222) {
      sub_188D718();
    }
    int64_t v7 = (char *)operator new(120 * v6);
  }
  else
  {
    int64_t v7 = 0;
  }
  uint64_t v8 = (uint64_t)&v7[120 * v3];
  int v9 = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(v8 + 96) = v9;
  sub_FFCE10(v9, a2, v8);
  *(void *)(v8 + 104) = *(void *)(a2 + 104);
  *(_DWORD *)(v8 + 112) = *(_DWORD *)(a2 + 112);
  uint64_t v11 = *a1;
  uint64_t v10 = a1[1];
  if (v10 == *a1)
  {
    int v15 = a1[1];
    uint64_t v16 = v8;
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = v8 + v12 * 8;
      *(_DWORD *)(v8 + v12 * 8 - 24) = v10[v12 - 3];
      sub_FFCE10((int)v10[v12 - 3], (uint64_t)&v10[v12 - 15], v8 + v12 * 8 - 120);
      uint64_t v14 = v10[v12 - 2];
      *(_DWORD *)(v13 - 8) = v10[v12 - 1];
      *(void *)(v13 - 16) = v14;
      v12 -= 15;
    }
    while (&v10[v12] != v11);
    int v15 = *a1;
    uint64_t v10 = a1[1];
    uint64_t v16 = v8 + v12 * 8;
  }
  *a1 = (void ***)v16;
  a1[1] = (void ***)(v8 + 120);
  a1[2] = (void ***)&v7[120 * v6];
  while (v10 != v15)
  {
    int v17 = *((_DWORD *)v10 - 6);
    v10 -= 15;
    sub_FFC6F0(v17, v10);
  }
  if (v15) {
    operator delete(v15);
  }
  return v8 + 120;
}

void sub_FFCE10(int a1, uint64_t a2, uint64_t a3)
{
  if (a1 == 1)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    int64_t v7 = *(long long **)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    unint64_t v9 = 0x4EC4EC4EC4EC4EC5 * ((v8 - *(void *)a2) >> 3);
    sub_FFCEFC((void *)a3, (uint64_t)v7, v8, v9);
  }
  else if (!a1)
  {
    unint64_t v5 = sub_28FD54((void *)a3, (long long **)a2);
    v5[3] = 0;
    v5[4] = 0;
    v5 += 3;
    v5[2] = 0;
    sub_28FF98(v5, *(void *)(a2 + 24), *(void *)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4));
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a3 + 61) = *(_OWORD *)(a2 + 61);
    *(_OWORD *)(a3 + 48) = v6;
    *(_OWORD *)(a3 + 80) = *(_OWORD *)(a2 + 80);
  }
}

void sub_FFCEE0(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20B19D8((uint64_t)v1, *v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_FFCEFC(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x276276276276277) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(104 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[104 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        sub_FFD074((uint64_t)(a1 + 2), (uint64_t)&v8[v9], a2 + v9);
        v9 += 104;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_FFCFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_FFCFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_FFD114(v11, (uint64_t)v12, v12, (uint64_t)v10, v10);
  *(void *)(v9 + 8) = v10;
  sub_FFD01C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_FFD01C(void ***a1)
{
  if (*((unsigned char *)a1 + 8)) {
    return a1;
  }
  unint64_t v3 = *a1;
  unint64_t v4 = (void **)**a1;
  if (!v4) {
    return a1;
  }
  sub_FFC824((uint64_t)v3, v4);
  operator delete(**a1);
  return a1;
}

__n128 sub_FFD074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_28FD54((void *)a2, (long long **)a3);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  sub_28FF98((unsigned char *)(a2 + 24), *(void *)(a3 + 24), *(void *)(a3 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 4));
  long long v5 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 61) = *(_OWORD *)(a3 + 61);
  *(_OWORD *)(a2 + 48) = v5;
  __n128 result = *(__n128 *)(a3 + 80);
  *(__n128 *)(a2 + 80) = result;
  *(_DWORD *)(a2 + 96) = *(_DWORD *)(a3 + 96);
  return result;
}

void sub_FFD0F8(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20B19D8((uint64_t)v1, *v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_FFD114(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, void **a5)
{
  if (a3 != a5)
  {
    long long v6 = a3;
    do
    {
      uint64_t v8 = (void **)*(v6 - 10);
      if (v8)
      {
        uint64_t v9 = (void **)*(v6 - 9);
        uint64_t v10 = *(v6 - 10);
        if (v9 != v8)
        {
          do
          {
            if (*((char *)v9 - 1) < 0) {
              operator delete(*(v9 - 3));
            }
            v9 -= 6;
          }
          while (v9 != v8);
          uint64_t v10 = *(v6 - 10);
        }
        *(v6 - 9) = v8;
        operator delete(v10);
      }
      uint64_t v11 = v6 - 13;
      uint64_t v12 = (char *)*(v6 - 13);
      if (v12)
      {
        uint64_t v13 = (char *)*(v6 - 12);
        int64_t v7 = *(v6 - 13);
        if (v13 != v12)
        {
          do
          {
            uint64_t v14 = (void *)*((void *)v13 - 3);
            if (v14)
            {
              *((void *)v13 - 2) = v14;
              operator delete(v14);
            }
            v13 -= 48;
          }
          while (v13 != v12);
          int64_t v7 = *v11;
        }
        *(v6 - 12) = v12;
        operator delete(v7);
      }
      v6 -= 13;
    }
    while (v11 != a5);
  }
}

void sub_FFD1F8(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = *a1;
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v2 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x276276276276277) {
      sub_2E00();
    }
    unint64_t v5 = a1[1];
    unint64_t v17 = 0;
    uint64_t v18 = a1 + 2;
    uint64_t v6 = 104 * a2;
    int64_t v7 = (char *)operator new(104 * a2);
    uint64_t v8 = &v7[v5 - v3];
    if (v5 == v3)
    {
      int64x2_t v13 = vdupq_n_s64(v3);
      uint64_t v14 = &v7[v5 - v3];
    }
    else
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = v5 + v9;
        uint64_t v11 = &v8[v9];
        *(_OWORD *)(v11 - 104) = *(_OWORD *)(v5 + v9 - 104);
        *((void *)v11 - 11) = *(void *)(v5 + v9 - 88);
        *(void *)(v10 - 104) = 0;
        *(void *)(v10 - 96) = 0;
        *(void *)(v10 - 88) = 0;
        *((_OWORD *)v11 - 5) = *(_OWORD *)(v5 + v9 - 80);
        *((void *)v11 - 8) = *(void *)(v5 + v9 - 64);
        *(void *)(v10 - 80) = 0;
        *(void *)(v10 - 72) = 0;
        *(void *)(v10 - 64) = 0;
        long long v12 = *(_OWORD *)(v5 + v9 - 56);
        *(_OWORD *)(v11 - 43) = *(_OWORD *)(v5 + v9 - 43);
        *(_OWORD *)(v11 - 56) = v12;
        *(_OWORD *)(v11 - 24) = *(_OWORD *)(v5 + v9 - 24);
        *((_DWORD *)v11 - 2) = *(_DWORD *)(v5 + v9 - 8);
        v9 -= 104;
      }
      while (v5 + v9 != v3);
      int64x2_t v13 = *(int64x2_t *)a1;
      unint64_t v2 = a1[2];
      uint64_t v14 = &v8[v9];
    }
    *a1 = (unint64_t)v14;
    a1[1] = (unint64_t)v8;
    int64x2_t v16 = v13;
    a1[2] = (unint64_t)&v7[v6];
    unint64_t v17 = v2;
    long long __p = (void *)v13.i64[0];
    sub_FFD390((uint64_t)&__p, v13.i64[0]);
    if (__p) {
      operator delete(__p);
    }
  }
}

uint64_t sub_FFD358(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_FFD390(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v6 = (void **)(i - 104);
    *(void *)(a1 + 16) = i - 104;
    uint64_t v7 = *(void *)(i - 80);
    if (v7)
    {
      uint64_t v8 = *(void *)(i - 72);
      uint64_t v9 = *(void **)(i - 80);
      if (v8 != v7)
      {
        do
        {
          if (*(char *)(v8 - 1) < 0) {
            operator delete(*(void **)(v8 - 24));
          }
          v8 -= 48;
        }
        while (v8 != v7);
        uint64_t v9 = *(void **)(i - 80);
      }
      *(void *)(i - 72) = v7;
      operator delete(v9);
    }
    uint64_t v10 = (char *)*v6;
    if (*v6)
    {
      uint64_t v11 = *(char **)(i - 96);
      unint64_t v5 = *v6;
      if (v11 != v10)
      {
        do
        {
          long long v12 = (void *)*((void *)v11 - 3);
          if (v12)
          {
            *((void *)v11 - 2) = v12;
            operator delete(v12);
          }
          v11 -= 48;
        }
        while (v11 != v10);
        unint64_t v5 = *v6;
      }
      *(void *)(i - 96) = v10;
      operator delete(v5);
    }
  }
}

uint64_t sub_FFD478(char **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 104;
  uint64_t v8 = (uint64_t)&(*a1)[104 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v14 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v6 - (void)v5) >> 3) + 1;
    if (v14 > 0x276276276276276) {
      sub_2E00();
    }
    unint64_t v15 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v9 - (void)v5) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x13B13B13B13B13BLL) {
      unint64_t v16 = 0x276276276276276;
    }
    else {
      unint64_t v16 = v14;
    }
    int v42 = a1 + 2;
    if (v16)
    {
      if (v16 > 0x276276276276276) {
        sub_188D718();
      }
      unint64_t v17 = (char *)operator new(104 * v16);
    }
    else
    {
      unint64_t v17 = 0;
    }
    long long __p = v17;
    int v39 = &v17[104 * v7];
    uint64_t v40 = (uint64_t)v39;
    __n128 v41 = &v17[104 * v16];
    sub_FFD8EC((uint64_t)&__p, a3);
    uint64_t v19 = v39;
    uint64_t v20 = *a1;
    unint64_t v21 = v39;
    if (*a1 != (char *)v8)
    {
      uint64_t v22 = 0;
      do
      {
        int v23 = &v19[v22];
        uint64_t v24 = v8 + v22;
        *((void *)v23 - 13) = 0;
        *((void *)v23 - 12) = 0;
        *((void *)v23 - 11) = 0;
        *(_OWORD *)(v23 - 104) = *(_OWORD *)(v8 + v22 - 104);
        *((void *)v23 - 11) = *(void *)(v8 + v22 - 88);
        *(void *)(v24 - 104) = 0;
        *(void *)(v24 - 96) = 0;
        *(void *)(v24 - 88) = 0;
        *((void *)v23 - 10) = 0;
        *((void *)v23 - 9) = 0;
        *((void *)v23 - 8) = 0;
        *((_OWORD *)v23 - 5) = *(_OWORD *)(v8 + v22 - 80);
        *((void *)v23 - 8) = *(void *)(v8 + v22 - 64);
        *(void *)(v24 - 80) = 0;
        *(void *)(v24 - 72) = 0;
        *(void *)(v24 - 64) = 0;
        long long v25 = *(_OWORD *)(v8 + v22 - 56);
        *(_OWORD *)(v23 - 43) = *(_OWORD *)(v8 + v22 - 43);
        *(_OWORD *)(v23 - 56) = v25;
        *(_OWORD *)(v23 - 24) = *(_OWORD *)(v8 + v22 - 24);
        *((_DWORD *)v23 - 2) = *(_DWORD *)(v8 + v22 - 8);
        v22 -= 104;
      }
      while ((char *)(v8 + v22) != v20);
      unint64_t v21 = &v19[v22];
    }
    int v39 = v21;
    long long v26 = a1[1];
    uint64_t v27 = v40;
    if (v26 != (char *)v8)
    {
      do
      {
        *(void *)uint64_t v27 = 0;
        *(void *)(v27 + 8) = 0;
        *(void *)(v27 + 16) = 0;
        *(_OWORD *)uint64_t v27 = *(_OWORD *)v8;
        *(void *)(v27 + 16) = *(void *)(v8 + 16);
        *(void *)uint64_t v8 = 0;
        *(void *)(v8 + 8) = 0;
        *(void *)(v8 + 16) = 0;
        *(void *)(v27 + 24) = 0;
        *(void *)(v27 + 32) = 0;
        *(void *)(v27 + 40) = 0;
        *(_OWORD *)(v27 + 24) = *(_OWORD *)(v8 + 24);
        *(void *)(v27 + 40) = *(void *)(v8 + 40);
        *(void *)(v8 + 24) = 0;
        *(void *)(v8 + 32) = 0;
        *(void *)(v8 + 40) = 0;
        long long v28 = *(_OWORD *)(v8 + 48);
        *(_OWORD *)(v27 + 61) = *(_OWORD *)(v8 + 61);
        *(_OWORD *)(v27 + 48) = v28;
        *(_OWORD *)(v27 + 80) = *(_OWORD *)(v8 + 80);
        *(_DWORD *)(v27 + 96) = *(_DWORD *)(v8 + 96);
        v27 += 104;
        v8 += 104;
      }
      while ((char *)v8 != v26);
      unint64_t v21 = v39;
      uint64_t v8 = (uint64_t)a1[1];
    }
    uint64_t v29 = *a1;
    *a1 = v21;
    a1[1] = (char *)v27;
    unint64_t v30 = a1[2];
    a1[2] = v41;
    uint64_t v40 = v8;
    __n128 v41 = v30;
    long long __p = v29;
    int v39 = v29;
    sub_FFD390((uint64_t)&__p, (uint64_t)v29);
    if (__p) {
      operator delete(__p);
    }
    return (uint64_t)v19;
  }
  else
  {
    if (v8 != v6)
    {
      uint64_t v10 = v8 + 104;
      uint64_t v37 = (a2 - (uint64_t)*a1) / 104;
      if (v6 < 0x68)
      {
        a1[1] = (char *)v6;
        if (v6 == v10)
        {
LABEL_32:
          sub_40D678((char **)v8, a3);
          *(_OWORD *)(v8 + 80) = *(_OWORD *)(a3 + 80);
          *(_DWORD *)&v5[104 * v37 + 96] = *(_DWORD *)(a3 + 96);
          return v8;
        }
      }
      else
      {
        unint64_t v11 = v6 - 104;
        long long v12 = a1[1];
        do
        {
          *(void *)long long v12 = 0;
          *((void *)v12 + 1) = 0;
          *((void *)v12 + 2) = 0;
          *(_OWORD *)long long v12 = *(_OWORD *)v11;
          *((void *)v12 + 2) = *(void *)(v11 + 16);
          *(void *)unint64_t v11 = 0;
          *(void *)(v11 + 8) = 0;
          *(void *)(v11 + 16) = 0;
          *((void *)v12 + 3) = 0;
          *((void *)v12 + 4) = 0;
          *((void *)v12 + 5) = 0;
          *(_OWORD *)(v12 + 24) = *(_OWORD *)(v11 + 24);
          *((void *)v12 + 5) = *(void *)(v11 + 40);
          *(void *)(v11 + 24) = 0;
          *(void *)(v11 + 32) = 0;
          *(void *)(v11 + 40) = 0;
          long long v13 = *(_OWORD *)(v11 + 48);
          *(_OWORD *)(v12 + 61) = *(_OWORD *)(v11 + 61);
          *((_OWORD *)v12 + 3) = v13;
          *((_OWORD *)v12 + 5) = *(_OWORD *)(v11 + 80);
          *((_DWORD *)v12 + 24) = *(_DWORD *)(v11 + 96);
          v12 += 104;
          v11 += 104;
        }
        while (v11 < v6);
        a1[1] = v12;
        if (v6 == v10) {
          goto LABEL_32;
        }
      }
      uint64_t v31 = 0;
      uint64_t v32 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v6 - v10) >> 3);
      long long v33 = &v5[104 * v37 + 104 * v32];
      uint64_t v34 = -104 * v32;
      do
      {
        uint64_t v35 = v6 + v31;
        sub_40D678((char **)(v6 + v31 - 104), v31 - 104 + v6 - 104);
        *(_OWORD *)(v35 - 24) = *(_OWORD *)&v33[v31 - 24];
        *(_DWORD *)(v35 - 8) = *(_DWORD *)&v33[v31 - 8];
        v31 -= 104;
      }
      while (v34 != v31);
      goto LABEL_32;
    }
    *(void *)uint64_t v8 = 0;
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
    *(_OWORD *)uint64_t v8 = *(_OWORD *)a3;
    *(void *)(v8 + 16) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(v8 + 24) = 0;
    *(void *)(v8 + 32) = 0;
    *(void *)(v8 + 40) = 0;
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(a3 + 24);
    *(void *)(v8 + 40) = *(void *)(a3 + 40);
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    long long v18 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(v8 + 61) = *(_OWORD *)(a3 + 61);
    *(_OWORD *)(v8 + 48) = v18;
    *(_OWORD *)(v8 + 80) = *(_OWORD *)(a3 + 80);
    *(_DWORD *)&v5[104 * v7 + 96] = *(_DWORD *)(a3 + 96);
    a1[1] = (char *)(v8 + 104);
  }
  return v8;
}

void sub_FFD8D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_FFD358((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_FFD8EC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 == *(void *)(a1 + 24))
  {
    unint64_t v6 = *(void **)a1;
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 <= *(void *)a1)
    {
      unint64_t v14 = 0x9D89D89D89D89D8ALL * ((uint64_t)(v4 - (void)v6) >> 3);
      if ((void *)v4 == v6) {
        unint64_t v14 = 1;
      }
      uint64_t v15 = *(void *)(a1 + 32);
      unint64_t v28 = 0;
      uint64_t v29 = v15;
      if (v14 >= 0x276276276276277) {
        sub_188D718();
      }
      unint64_t v16 = v14 >> 2;
      uint64_t v17 = 104 * v14;
      long long v18 = (char *)operator new(104 * v14);
      uint64_t v19 = &v18[104 * v16];
      if (v4 == v5)
      {
        int64x2_t v23 = vdupq_n_s64(v4);
        uint64_t v20 = &v18[104 * v16];
      }
      else
      {
        uint64_t v20 = &v19[v4 - v5];
        unint64_t v21 = &v18[104 * v16];
        do
        {
          *(_OWORD *)unint64_t v21 = *(_OWORD *)v5;
          *((void *)v21 + 2) = *(void *)(v5 + 16);
          *(void *)unint64_t v5 = 0;
          *(void *)(v5 + 8) = 0;
          *(void *)(v5 + 16) = 0;
          *(_OWORD *)(v21 + 24) = *(_OWORD *)(v5 + 24);
          *((void *)v21 + 5) = *(void *)(v5 + 40);
          *(void *)(v5 + 24) = 0;
          *(void *)(v5 + 32) = 0;
          *(void *)(v5 + 40) = 0;
          long long v22 = *(_OWORD *)(v5 + 48);
          *(_OWORD *)(v21 + 61) = *(_OWORD *)(v5 + 61);
          *((_OWORD *)v21 + 3) = v22;
          *((_OWORD *)v21 + 5) = *(_OWORD *)(v5 + 80);
          *((_DWORD *)v21 + 24) = *(_DWORD *)(v5 + 96);
          v21 += 104;
          v5 += 104;
        }
        while (v21 != v20);
        unint64_t v6 = *(void **)a1;
        int64x2_t v23 = *(int64x2_t *)(a1 + 8);
        unint64_t v4 = *(void *)(a1 + 24);
      }
      long long __p = v6;
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v19;
      int64x2_t v27 = v23;
      *(void *)(a1 + 16) = v20;
      *(void *)(a1 + 24) = &v18[v17];
      unint64_t v28 = v4;
      sub_FFD390((uint64_t)&__p, v23.i64[0]);
      if (__p) {
        operator delete(__p);
      }
      unint64_t v4 = *(void *)(a1 + 16);
    }
    else
    {
      uint64_t v7 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v5 - *(void *)a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      if (v5 == v4)
      {
        unint64_t v13 = v5 - 104 * v9;
      }
      else
      {
        uint64_t v11 = -104 * v9;
        do
        {
          unint64_t v12 = v5 + v11;
          sub_40D678((char **)(v5 + v11), v5);
          *(_OWORD *)(v12 + 80) = *(_OWORD *)(v5 + 80);
          *(_DWORD *)(v12 + 96) = *(_DWORD *)(v5 + 96);
          v5 += 104;
        }
        while (v5 != v4);
        unint64_t v4 = *(void *)(a1 + 8);
        unint64_t v13 = v5 + 104 * v10;
      }
      *(void *)(a1 + 8) = v4 + 104 * v10;
      *(void *)(a1 + 16) = v13;
      unint64_t v4 = v13;
    }
  }
  *(void *)unint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
  *(void *)(v4 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(v4 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  long long v24 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 61) = *(_OWORD *)(a2 + 61);
  *(_OWORD *)(v4 + 48) = v24;
  __n128 result = *(__n128 *)(a2 + 80);
  *(__n128 *)(v4 + 80) = result;
  *(_DWORD *)(v4 + 96) = *(_DWORD *)(a2 + 96);
  *(void *)(a1 + 16) += 104;
  return result;
}

char *sub_FFDB64(void ****a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = 0xEEEEEEEEEEEEEEEFLL * (a1[1] - *a1);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x222222222222222) {
    sub_2E00();
  }
  if (0xDDDDDDDDDDDDDDDELL * (a1[2] - *a1) > v5) {
    unint64_t v5 = 0xDDDDDDDDDDDDDDDELL * (a1[2] - *a1);
  }
  if (0xEEEEEEEEEEEEEEEFLL * (a1[2] - *a1) >= 0x111111111111111) {
    unint64_t v8 = 0x222222222222222;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x222222222222222) {
      sub_188D718();
    }
    uint64_t v9 = (char *)operator new(120 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[120 * v4];
  *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
  *((void *)v10 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *((_DWORD *)v10 + 24) = 1;
  *((void *)v10 + 13) = *(void *)a3;
  *((_DWORD *)v10 + 28) = *(_DWORD *)(a3 + 8);
  unint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  if (v11 == *a1)
  {
    uint64_t v17 = a1[1];
    long long v18 = (void ***)v10;
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      unint64_t v14 = &v10[v13 * 8];
      int v15 = (int)v11[v13 - 3];
      *(_DWORD *)&v10[v13 * 8 - 24] = v15;
      sub_FFCE10(v15, (uint64_t)&v11[v13 - 15], (uint64_t)&v10[v13 * 8 - 120]);
      unint64_t v16 = v11[v13 - 2];
      *((_DWORD *)v14 - 2) = v11[v13 - 1];
      *((void *)v14 - 2) = v16;
      v13 -= 15;
    }
    while (&v11[v13] != v12);
    uint64_t v17 = *a1;
    uint64_t v11 = a1[1];
    long long v18 = (void ***)&v10[v13 * 8];
  }
  *a1 = v18;
  a1[1] = (void ***)(v10 + 120);
  a1[2] = (void ***)&v9[120 * v8];
  while (v11 != v17)
  {
    int v19 = *((_DWORD *)v11 - 6);
    v11 -= 15;
    sub_FFC6F0(v19, v11);
  }
  if (v17) {
    operator delete(v17);
  }
  return v10 + 120;
}

void sub_FFDD10(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  unint64_t v5 = a2;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v6 = a1 + 24;
  uint64_t v9 = v8 - v7;
  unint64_t v10 = (v8 - v7) >> 2;
  if (v10 <= a2)
  {
    do
    {
      unint64_t v15 = (v9 >> 1) | 1;
      if (v15 <= v10)
      {
        if (v15 < v10)
        {
          uint64_t v8 = v7 + 4 * v15;
          *(void *)(a1 + 32) = v8;
          uint64_t v9 = 4 * v15;
          unint64_t v16 = (uint64_t)(4 * v15) >> 2;
          if (v10 < v16) {
LABEL_12:
          }
            memset((void *)(v7 + 4 * v10), 255, v9 - 4 * v10);
        }
        else
        {
          uint64_t v9 = v8 - v7;
          unint64_t v16 = (v8 - v7) >> 2;
          if (v10 < v16) {
            goto LABEL_12;
          }
        }
      }
      else
      {
        sub_4394C(v6, v15 - v10);
        uint64_t v7 = *(void *)(a1 + 24);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v9 = v8 - v7;
        unint64_t v16 = (v8 - v7) >> 2;
        if (v10 < v16) {
          goto LABEL_12;
        }
      }
      unint64_t v10 = v16;
    }
    while (v16 <= v5);
  }
  unint64_t v11 = v5 | ((unint64_t)*a3 << 32);
  uint64_t v13 = *(char **)(a1 + 8);
  unint64_t v12 = *(void *)(a1 + 16);
  if ((unint64_t)v13 < v12)
  {
    *(void *)uint64_t v13 = v11;
    uint64_t v14 = (uint64_t)(v13 + 8);
    goto LABEL_33;
  }
  uint64_t v17 = *(char **)a1;
  uint64_t v18 = (uint64_t)&v13[-*(void *)a1];
  uint64_t v19 = v18 >> 3;
  unint64_t v20 = (v18 >> 3) + 1;
  if (v20 >> 61) {
    sub_2E00();
  }
  uint64_t v21 = v12 - (void)v17;
  if (v21 >> 2 > v20) {
    unint64_t v20 = v21 >> 2;
  }
  if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v22 = v20;
  }
  if (v22)
  {
    if (v22 >> 61) {
      sub_188D718();
    }
    int64x2_t v23 = operator new(8 * v22);
    long long v24 = (unint64_t *)&v23[8 * v19];
    long long v25 = &v23[8 * v22];
    *long long v24 = v11;
    uint64_t v14 = (uint64_t)(v24 + 1);
    long long v26 = (char *)(v13 - v17);
    if (v13 == v17) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  int64x2_t v23 = 0;
  long long v24 = (unint64_t *)(8 * v19);
  long long v25 = 0;
  *(void *)(8 * v19) = v11;
  uint64_t v14 = 8 * v19 + 8;
  long long v26 = (char *)(v13 - v17);
  if (v13 != v17)
  {
LABEL_24:
    unint64_t v27 = (unint64_t)(v26 - 8);
    if (v27 < 0x58) {
      goto LABEL_42;
    }
    if ((unint64_t)(v13 - v23 - v18) < 0x20) {
      goto LABEL_42;
    }
    uint64_t v28 = (v27 >> 3) + 1;
    uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v30 = &v13[-v29];
    long long v24 = (unint64_t *)((char *)v24 - v29);
    uint64_t v31 = &v23[8 * v19 - 16];
    uint64_t v32 = v13 - 16;
    uint64_t v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      _OWORD *v31 = v34;
      v31 -= 2;
      v32 -= 32;
      v33 -= 4;
    }
    while (v33);
    uint64_t v13 = v30;
    if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        unint64_t v35 = *((void *)v13 - 1);
        v13 -= 8;
        *--long long v24 = v35;
      }
      while (v13 != v17);
    }
    uint64_t v13 = *(char **)a1;
  }
LABEL_31:
  *(void *)a1 = v24;
  *(void *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = v25;
  if (v13) {
    operator delete(v13);
  }
LABEL_33:
  *(void *)(a1 + 8) = v14;
  uint64_t v36 = *(void *)(a1 + 24);
  *(_DWORD *)(v36 + 4 * v5) = *(_DWORD *)(a1 + 48);
  unsigned int v37 = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = v37 + 1;
  if (v37)
  {
    long long v38 = *(char **)a1;
    do
    {
      unsigned int v39 = v37 - 1;
      uint64_t v40 = (v37 - 1) >> 2;
      __n128 v41 = &v38[8 * v40];
      int v44 = *((_DWORD *)v41 + 1);
      int v42 = v41 + 4;
      int v43 = v44;
      uint64_t v45 = &v38[8 * v37];
      int v48 = *((_DWORD *)v45 + 1);
      unint64_t v46 = v45 + 4;
      int v47 = v48;
      if (v43 < v48) {
        break;
      }
      uint64_t v49 = 8 * v37;
      uint64_t v50 = *(unsigned int *)&v38[v49];
      *(_DWORD *)&v38[v49] = *(_DWORD *)&v38[8 * v40];
      *(_DWORD *)&v38[8 * v40] = v50;
      *unint64_t v46 = v43;
      *int v42 = v47;
      uint64_t v51 = 4 * *(unsigned int *)&v38[v49];
      int v52 = *(_DWORD *)(v36 + v51);
      *(_DWORD *)(v36 + v51) = *(_DWORD *)(v36 + 4 * v50);
      *(_DWORD *)(v36 + 4 * v50) = v52;
      unsigned int v37 = v39 >> 2;
    }
    while (v39 > 3);
  }
}

double sub_FFDFC4(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = *(unsigned int *)(v3 + 4 * a2);
  uint64_t v5 = *a1;
  uint64_t v6 = *a1 + 8 * v4;
  int v7 = *(_DWORD *)(v6 + 4);
  *(_DWORD *)(v6 + 4) = *a3;
  if (*a3 >= v7)
  {
    unsigned int v21 = (4 * v4) | 1;
    unsigned int v22 = *((_DWORD *)a1 + 12);
    if (v21 < v22)
    {
      int v23 = 4 * v4;
      do
      {
        unsigned int v24 = v23 + 5;
        if (v24 >= v22) {
          unsigned int v25 = v22;
        }
        else {
          unsigned int v25 = v24;
        }
        if (v21 >= v25) {
          break;
        }
        uint64_t v26 = v4;
        unsigned int v27 = *(_DWORD *)(v5 + 8 * v4 + 4);
        uint64_t v28 = (signed int *)(v5 + 4 + 8 * v21);
        LODWORD(v4) = -1;
        signed int v29 = v27;
        do
        {
          signed int v31 = *v28;
          v28 += 2;
          signed int v30 = v31;
          if (v31 < v29)
          {
            signed int v29 = v30;
            LODWORD(v4) = v21;
          }
          ++v21;
        }
        while (v25 != v21);
        if (v4 >= v22) {
          break;
        }
        uint64_t v32 = 8 * v26;
        int v33 = *(_DWORD *)(v5 + 8 * v26);
        long long v34 = (double *)(v5 + 8 * v4);
        double result = *v34;
        *(_DWORD *)long long v34 = v33;
        *((_DWORD *)v34 + 1) = v27;
        *(double *)(v5 + v32) = result;
        uint64_t v36 = 4 * *(unsigned int *)v34;
        uint64_t v37 = 4 * LODWORD(result);
        int v38 = *(_DWORD *)(v3 + v36);
        *(_DWORD *)(v3 + v36) = *(_DWORD *)(v3 + v37);
        *(_DWORD *)(v3 + v37) = v38;
        int v23 = 4 * v4;
        unsigned int v21 = (4 * v4) | 1;
        unsigned int v22 = *((_DWORD *)a1 + 12);
      }
      while (v21 < v22);
    }
  }
  else if (v4)
  {
    do
    {
      unsigned int v8 = v4 - 1;
      uint64_t v9 = (v4 - 1) >> 2;
      uint64_t v10 = v5 + 8 * v9;
      int v13 = *(_DWORD *)(v10 + 4);
      unint64_t v11 = (_DWORD *)(v10 + 4);
      int v12 = v13;
      uint64_t v14 = v5 + 8 * v4;
      int v17 = *(_DWORD *)(v14 + 4);
      unint64_t v15 = (_DWORD *)(v14 + 4);
      int v16 = v17;
      if (v12 < v17) {
        break;
      }
      uint64_t v18 = 8 * v4;
      uint64_t v19 = *(unsigned int *)(v5 + v18);
      *(_DWORD *)(v5 + v18) = *(_DWORD *)(v5 + 8 * v9);
      *(_DWORD *)(v5 + 8 * v9) = v19;
      *unint64_t v15 = v12;
      _DWORD *v11 = v16;
      uint64_t v4 = 4 * *(unsigned int *)(v5 + v18);
      int v20 = *(_DWORD *)(v3 + v4);
      *(_DWORD *)(v3 + v4) = *(_DWORD *)(v3 + 4 * v19);
      *(_DWORD *)(v3 + 4 * v19) = v20;
      LODWORD(v4) = v8 >> 2;
    }
    while (v8 >= 4);
  }
  return result;
}

double sub_FFE120(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
BOOL sub_FFF8AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x4EC4EC4EC4EC4EC5 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 96))
      {
        uint64_t v6 = a2 - 104;
        int v7 = (long long *)a1;
        goto LABEL_53;
      }
      return result;
    case 3:
      uint64_t v13 = (long long *)(a1 + 104);
      uint64_t v14 = a2 - 104;
      int v15 = *(_DWORD *)(a1 + 200);
      int v16 = *(_DWORD *)(a2 - 8);
      if (v15 > *(_DWORD *)(a1 + 96))
      {
        if (v16 <= v15)
        {
          sub_FFFD10((long long *)a1, a1 + 104);
          if (*(_DWORD *)(v2 - 8) <= *(_DWORD *)(a1 + 200)) {
            return 1;
          }
          int v7 = (long long *)(a1 + 104);
        }
        else
        {
          int v7 = (long long *)a1;
        }
        uint64_t v6 = v2 - 104;
        goto LABEL_53;
      }
      if (v16 > v15) {
        goto LABEL_48;
      }
      return result;
    case 4:
      sub_FFFEA0(a1, a1 + 104, a1 + 208, a2 - 104);
      return 1;
    case 5:
      uint64_t v13 = (long long *)(a1 + 104);
      uint64_t v14 = a1 + 208;
      sub_FFFEA0(a1, a1 + 104, a1 + 208, a1 + 312);
      if (*(_DWORD *)(v2 - 8) > *(_DWORD *)(a1 + 408))
      {
        sub_FFFD10((long long *)(a1 + 312), v2 - 104);
        if (*(_DWORD *)(a1 + 408) > *(_DWORD *)(a1 + 304))
        {
          sub_FFFD10((long long *)(a1 + 208), a1 + 312);
          if (*(_DWORD *)(a1 + 304) > *(_DWORD *)(a1 + 200))
          {
LABEL_48:
            sub_FFFD10(v13, v14);
            if (*(_DWORD *)(a1 + 200) > *(_DWORD *)(a1 + 96))
            {
              int v7 = (long long *)a1;
              uint64_t v6 = (uint64_t)v13;
LABEL_53:
              sub_FFFD10(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = a1 + 208;
      int v9 = *(_DWORD *)(a1 + 200);
      int v10 = *(_DWORD *)(a1 + 304);
      if (v9 > *(_DWORD *)(a1 + 96))
      {
        uint64_t v11 = (long long *)a1;
        if (v10 <= v9)
        {
          sub_FFFD10((long long *)a1, a1 + 104);
          if (*(_DWORD *)(a1 + 304) <= *(_DWORD *)(a1 + 200)) {
            goto LABEL_21;
          }
          uint64_t v11 = (long long *)(a1 + 104);
        }
        uint64_t v12 = a1 + 208;
        goto LABEL_20;
      }
      if (v10 > v9)
      {
        sub_FFFD10((long long *)(a1 + 104), a1 + 208);
        if (*(_DWORD *)(a1 + 200) > *(_DWORD *)(a1 + 96))
        {
          uint64_t v11 = (long long *)a1;
          uint64_t v12 = a1 + 104;
LABEL_20:
          sub_FFFD10(v11, v12);
        }
      }
LABEL_21:
      uint64_t v17 = a1 + 312;
      if (a1 + 312 == v2) {
        return 1;
      }
      uint64_t v18 = 0;
      int v19 = 0;
      uint64_t v33 = v2;
      while (1)
      {
        if (*(_DWORD *)(v17 + 96) > *(_DWORD *)(v8 + 96))
        {
          long long v34 = *(_OWORD *)v17;
          uint64_t v21 = *(void *)(v17 + 16);
          *(void *)uint64_t v17 = 0;
          *(void *)(v17 + 8) = 0;
          long long v22 = *(_OWORD *)(v17 + 24);
          *(void *)(v17 + 16) = 0;
          *(void *)(v17 + 24) = 0;
          uint64_t v35 = *(void *)(v17 + 40);
          *(void *)(v17 + 32) = 0;
          *(void *)(v17 + 40) = 0;
          long long v36 = v22;
          *(_OWORD *)int v37 = *(_OWORD *)(v17 + 48);
          *(_OWORD *)&v37[13] = *(_OWORD *)(v17 + 61);
          long long v38 = *(_OWORD *)(v17 + 80);
          uint64_t v23 = v18;
          int v24 = *(_DWORD *)(v17 + 96);
          while (1)
          {
            uint64_t v25 = a1 + v23;
            sub_40D678((char **)(a1 + v23 + 312), a1 + v23 + 208);
            *(_OWORD *)(v25 + 392) = *(_OWORD *)(v25 + 288);
            *(_DWORD *)(v25 + 408) = *(_DWORD *)(v25 + 304);
            if (v23 == -208) {
              break;
            }
            v23 -= 104;
            if (v24 <= *(_DWORD *)(v25 + 200))
            {
              uint64_t v26 = a1 + v23 + 312;
              unint64_t v27 = *(char **)v26;
              if (!*(void *)v26) {
                goto LABEL_41;
              }
              goto LABEL_34;
            }
          }
          uint64_t v26 = a1;
          unint64_t v27 = *(char **)a1;
          if (!*(void *)a1) {
            goto LABEL_41;
          }
LABEL_34:
          uint64_t v28 = *(char **)(v26 + 8);
          int v29 = v27;
          if (v28 != v27)
          {
            do
            {
              int v30 = (void *)*((void *)v28 - 3);
              if (v30)
              {
                *((void *)v28 - 2) = v30;
                operator delete(v30);
              }
              v28 -= 48;
            }
            while (v28 != v27);
            int v29 = *(char **)v26;
          }
          *(void *)(v26 + 8) = v27;
          operator delete(v29);
LABEL_41:
          *(_OWORD *)uint64_t v26 = v34;
          *(void *)(v26 + 16) = v21;
          uint64_t v31 = *(void *)(v26 + 24);
          uint64_t v2 = v33;
          if (v31)
          {
            uint64_t v32 = *(void *)(v26 + 32);
            uint64_t v20 = *(void **)(v26 + 24);
            if (v32 != v31)
            {
              do
              {
                if (*(char *)(v32 - 1) < 0) {
                  operator delete(*(void **)(v32 - 24));
                }
                v32 -= 48;
              }
              while (v32 != v31);
              uint64_t v20 = *(void **)(v26 + 24);
            }
            *(void *)(v26 + 32) = v31;
            operator delete(v20);
          }
          *(_OWORD *)(v26 + 24) = v36;
          *(void *)(v26 + 40) = v35;
          *(_OWORD *)(v26 + 48) = *(_OWORD *)v37;
          *(_OWORD *)(v26 + 61) = *(_OWORD *)&v37[13];
          *(_OWORD *)(v25 + 288) = v38;
          *(_DWORD *)(v26 + 96) = v24;
          if (++v19 == 8) {
            return v17 + 104 == v33;
          }
        }
        uint64_t v8 = v17;
        v18 += 104;
        v17 += 104;
        if (v17 == v2) {
          return 1;
        }
      }
  }
}

__n128 sub_FFFD10(long long *a1, uint64_t a2)
{
  long long v4 = *a1;
  uint64_t v5 = *((void *)a1 + 2);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  long long v16 = v4;
  long long v17 = *(long long *)((char *)a1 + 24);
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;
  uint64_t v6 = *((void *)a1 + 5);
  *((void *)a1 + 4) = 0;
  *((void *)a1 + 5) = 0;
  *(_OWORD *)uint64_t v18 = a1[3];
  *(_OWORD *)&v18[13] = *(long long *)((char *)a1 + 61);
  __n128 v19 = (__n128)a1[5];
  int v7 = *((_DWORD *)a1 + 24);
  sub_40D678((char **)a1, a2);
  a1[5] = *(_OWORD *)(a2 + 80);
  *((_DWORD *)a1 + 24) = *(_DWORD *)(a2 + 96);
  uint64_t v8 = *(char **)a2;
  if (*(void *)a2)
  {
    int v9 = *(char **)(a2 + 8);
    int v10 = *(char **)a2;
    if (v9 != v8)
    {
      do
      {
        uint64_t v11 = (void *)*((void *)v9 - 3);
        if (v11)
        {
          *((void *)v9 - 2) = v11;
          operator delete(v11);
        }
        v9 -= 48;
      }
      while (v9 != v8);
      int v10 = *(char **)a2;
    }
    *(void *)(a2 + 8) = v8;
    operator delete(v10);
  }
  *(_OWORD *)a2 = v16;
  *(void *)(a2 + 16) = v5;
  uint64_t v12 = *(void *)(a2 + 24);
  if (v12)
  {
    uint64_t v13 = *(void *)(a2 + 32);
    uint64_t v14 = *(void **)(a2 + 24);
    if (v13 != v12)
    {
      do
      {
        if (*(char *)(v13 - 1) < 0) {
          operator delete(*(void **)(v13 - 24));
        }
        v13 -= 48;
      }
      while (v13 != v12);
      uint64_t v14 = *(void **)(a2 + 24);
    }
    *(void *)(a2 + 32) = v12;
    operator delete(v14);
  }
  *(_OWORD *)(a2 + 24) = v17;
  *(void *)(a2 + 40) = v6;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)v18;
  *(_OWORD *)(a2 + 61) = *(_OWORD *)&v18[13];
  __n128 result = v19;
  *(__n128 *)(a2 + 80) = v19;
  *(_DWORD *)(a2 + 96) = v7;
  return result;
}

double sub_FFFEA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  int v8 = *(_DWORD *)(a2 + 96);
  int v9 = *(_DWORD *)(a3 + 96);
  if (v8 <= *(_DWORD *)(a1 + 96))
  {
    if (v9 > v8)
    {
      *(void *)&double result = sub_FFFD10((long long *)a2, a3).n128_u64[0];
      if (*(_DWORD *)(a2 + 96) > *(_DWORD *)(v7 + 96))
      {
        a1 = v7;
        uint64_t v11 = a2;
        goto LABEL_9;
      }
    }
  }
  else
  {
    if (v9 > v8)
    {
LABEL_5:
      uint64_t v11 = a3;
LABEL_9:
      *(void *)&double result = sub_FFFD10((long long *)a1, v11).n128_u64[0];
      goto LABEL_10;
    }
    *(void *)&double result = sub_FFFD10((long long *)a1, a2).n128_u64[0];
    if (*(_DWORD *)(a3 + 96) > *(_DWORD *)(a2 + 96))
    {
      a1 = a2;
      goto LABEL_5;
    }
  }
LABEL_10:
  if (*(_DWORD *)(a4 + 96) > *(_DWORD *)(a3 + 96))
  {
    *(void *)&double result = sub_FFFD10((long long *)a3, a4).n128_u64[0];
    if (*(_DWORD *)(a3 + 96) > *(_DWORD *)(a2 + 96))
    {
      *(void *)&double result = sub_FFFD10((long long *)a2, a3).n128_u64[0];
      if (*(_DWORD *)(a2 + 96) > *(_DWORD *)(v7 + 96))
      {
        *(void *)&double result = sub_FFFD10((long long *)v7, a2).n128_u64[0];
      }
    }
  }
  return result;
}

char *sub_FFFFB8(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 5) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v21 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(96 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  int v8 = &v7[96 * v3];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)int v8 = *(_OWORD *)a2;
  int v9 = &v7[96 * v6];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *((_OWORD *)v8 + 3) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 61) = *(_OWORD *)(a2 + 61);
  *((_OWORD *)v8 + 5) = *(_OWORD *)(a2 + 80);
  int v10 = v8 + 96;
  v19.i64[1] = (uint64_t)(v8 + 96);
  uint64_t v20 = v9;
  uint64_t v12 = a1->i64[0];
  unint64_t v11 = a1->u64[1];
  if (v11 == a1->i64[0])
  {
    int64x2_t v15 = vdupq_n_s64(v11);
  }
  else
  {
    do
    {
      *((void *)v8 - 12) = 0;
      *((void *)v8 - 11) = 0;
      v8 -= 96;
      *((void *)v8 + 2) = 0;
      long long v13 = *(_OWORD *)(v11 - 96);
      v11 -= 96;
      *(_OWORD *)int v8 = v13;
      *((void *)v8 + 2) = *(void *)(v11 + 16);
      *(void *)unint64_t v11 = 0;
      *(void *)(v11 + 8) = 0;
      *(void *)(v11 + 16) = 0;
      *((void *)v8 + 3) = 0;
      *((void *)v8 + 4) = 0;
      *((void *)v8 + 5) = 0;
      *(_OWORD *)(v8 + 24) = *(_OWORD *)(v11 + 24);
      *((void *)v8 + 5) = *(void *)(v11 + 40);
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0;
      *(void *)(v11 + 40) = 0;
      long long v14 = *(_OWORD *)(v11 + 48);
      *(_OWORD *)(v8 + 61) = *(_OWORD *)(v11 + 61);
      *((_OWORD *)v8 + 3) = v14;
      *((_OWORD *)v8 + 5) = *(_OWORD *)(v11 + 80);
    }
    while (v11 != v12);
    int64x2_t v15 = *a1;
    int v10 = (char *)v19.i64[1];
    int v9 = v20;
  }
  a1->i64[0] = (uint64_t)v8;
  a1->i64[1] = (uint64_t)v10;
  int64x2_t v19 = v15;
  long long v16 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v9;
  uint64_t v20 = v16;
  long long __p = (void *)v15.i64[0];
  sub_40CF74((uint64_t)&__p, v15.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v10;
}

void sub_1000180(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = operator new(8uLL);
  uint64_t v21 = v5;
  *uint64_t v5 = v4;
  long long v22 = v5 + 1;
  uint64_t v23 = v5 + 1;
  uint64_t v6 = a1[1];
  uint64_t v7 = operator new(8uLL);
  uint64_t v18 = v7;
  *uint64_t v7 = v6;
  int64x2_t v19 = v7 + 1;
  uint64_t v20 = v7 + 1;
  sub_10002E4((uint64_t)&v13, (uint64_t)&v21, (uint64_t)&v18, 0);
  sub_10002E4((uint64_t)&v8, (uint64_t)&v21, (uint64_t)&v18, 1);
  sub_FFC908(a2, &v13);
  sub_FFC908(a2 + 64, &v8);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    int v10 = v9;
    operator delete(v9);
  }
  if (v16)
  {
    long long v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    int64x2_t v15 = v14;
    operator delete(v14);
  }
  if (v18)
  {
    int64x2_t v19 = v18;
    operator delete(v18);
  }
  if (v21)
  {
    long long v22 = v21;
    operator delete(v21);
  }
}

void sub_1000284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2FC938((uint64_t *)va);
  unint64_t v11 = *(void **)(v9 - 80);
  if (v11)
  {
    *(void *)(v9 - 72) = v11;
    operator delete(v11);
    uint64_t v12 = *(void **)(v9 - 56);
    if (!v12) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v12 = *(void **)(v9 - 56);
    if (!v12) {
      goto LABEL_3;
    }
  }
  *(void *)(v9 - 48) = v12;
  operator delete(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_10002E4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  long long v8 = *(const void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  int64_t v9 = v7 - *(void *)a2;
  if (v7 == *(void *)a2)
  {
    unint64_t v11 = 0;
    int v10 = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    long long v13 = *(const void **)a3;
    uint64_t v17 = *(void *)(a3 + 8);
    int64_t v14 = v17 - *(void *)a3;
    if (v17 != *(void *)a3) {
      goto LABEL_4;
    }
  }
  else
  {
    if (v9 < 0) {
      sub_2E00();
    }
    int v10 = (char *)operator new(v7 - *(void *)a2);
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v10;
    unint64_t v11 = &v10[8 * (v9 >> 3)];
    *(void *)(a1 + 32) = v11;
    memcpy(v10, v8, v9);
    *(void *)(a1 + 24) = v11;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    long long v13 = *(const void **)a3;
    uint64_t v12 = *(void *)(a3 + 8);
    int64_t v14 = v12 - *(void *)a3;
    if (v12 != *(void *)a3)
    {
LABEL_4:
      if (v14 < 0) {
        sub_2E00();
      }
      int64x2_t v15 = (char *)operator new(v14);
      *(void *)(a1 + 40) = v15;
      *(void *)(a1 + 48) = v15;
      long long v16 = &v15[8 * (v14 >> 3)];
      *(void *)(a1 + 56) = v16;
      memcpy(v15, v13, v14);
      *(void *)(a1 + 48) = v16;
      if (v10 == v11) {
        return a1;
      }
      goto LABEL_9;
    }
  }
  long long v16 = 0;
  int64x2_t v15 = 0;
  if (v10 == v11) {
    return a1;
  }
LABEL_9:
  if (a4)
  {
    uint64_t v18 = ((v16 - v15) >> 3) - 1;
    *(void *)(a1 + 8) = v18;
    int64x2_t v19 = &v15[8 * v18];
  }
  else
  {
    uint64_t v20 = (v11 - v10) >> 3;
    uint64_t v21 = v20 - 1;
    if (v20 == 1)
    {
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v22 = 0;
      while (*(void *)&v10[8 * v22] == *(void *)&v15[8 * v22])
      {
        *(void *)(a1 + 8) = ++v22;
        if (v21 == v22)
        {
          uint64_t v22 = v21;
          break;
        }
      }
    }
    int64x2_t v19 = &v10[8 * v22];
  }
  *(void *)a1 = *(void *)v19;
  return a1;
}

void sub_1000488(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004BC(uint64_t result, int a2)
{
  if ((a2 + 1) >= (unint64_t)((uint64_t)(*(void *)(result + 56) - *(void *)(result + 48)) >> 2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "vertex id out of range");
    unint64_t v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return result;
}

void sub_100053C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000578()
{
  unk_25FD3FF = 16641;
  word_25FD3E8 = 65;
  byte_25FD417 = 1;
  byte_25FD401 = 0;
}

uint64_t sub_10005A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  HIBYTE(v32[2]) = 11;
  uint64_t v31 = 0;
  strcpy((char *)v32, "PathFinding");
  int v29 = 0;
  int v30 = 0;
  uint64_t v6 = sub_374CDC((uint64_t)a3, (uint64_t)v32, (uint64_t *)&v29);
  HIBYTE(v28[2]) = 18;
  strcpy((char *)v28, "DrivingPathFinding");
  long long __p = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v7 = sub_374CDC((uint64_t)a3, (uint64_t)v28, (uint64_t *)&__p);
  sub_1001A00(a1, v6, v7);
  long long v8 = (void **)__p;
  if (__p)
  {
    int64_t v9 = v26;
    int v10 = __p;
    if (v26 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      int v10 = __p;
    }
    uint64_t v26 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  unint64_t v11 = (void **)v29;
  if (v29)
  {
    uint64_t v12 = v30;
    long long v13 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      long long v13 = v29;
    }
    int v30 = v11;
    operator delete(v13);
  }
  if (SHIBYTE(v32[2]) < 0) {
    operator delete(v32[0]);
  }
  uint64_t v14 = *(void *)(a2 + 17);
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 24) = v14;
  *(void *)(a1 + 40) = a3;
  sub_F30E44(a1 + 48, a3);
  sub_F5B750((void *)(a1 + 30744), (uint64_t)a3);
  HIBYTE(v32[2]) = 19;
  strcpy((char *)v32, "DrivingPathAnalyzer");
  int v29 = 0;
  int v30 = 0;
  uint64_t v31 = 0;
  int64x2_t v15 = sub_374CDC((uint64_t)a3, (uint64_t)v32, (uint64_t *)&v29);
  HIBYTE(v28[2]) = 7;
  strcpy((char *)v28, "default");
  long long v16 = (void *)sub_560F4(v15, (uint64_t)v28);
  sub_1068CE4((uint64_t **)(a1 + 35992), a3, v16, *(unsigned __int8 *)(a2 + 16));
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  uint64_t v17 = (void **)v29;
  if (v29)
  {
    uint64_t v18 = v30;
    int64x2_t v19 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 3;
      }
      while (v18 != v17);
      int64x2_t v19 = v29;
    }
    int v30 = v17;
    operator delete(v19);
  }
  if (SHIBYTE(v32[2]) < 0) {
    operator delete(v32[0]);
  }
  v32[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v32[1] = xmmword_20B91A0;
  strcpy(v32[0], "driving_no_walking_clipping");
  sub_1070DBC(a1 + 36176, a3, v32, *(unsigned __int8 *)(a2 + 16));
  if (SHIBYTE(v32[2]) < 0) {
    operator delete(v32[0]);
  }
  HIBYTE(v32[2]) = 11;
  uint64_t v31 = 0;
  strcpy((char *)v32, "PathFinding");
  int v29 = 0;
  int v30 = 0;
  uint64_t v20 = sub_374CDC((uint64_t)a3, (uint64_t)v32, (uint64_t *)&v29);
  sub_F40DCC(a1 + 44288, v20, *(void *)(a1 + 40), a1 + 35992, a1 + 36176, a1 + 48);
  uint64_t v21 = (void **)v29;
  if (v29)
  {
    uint64_t v22 = v30;
    uint64_t v23 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v22 - 1) < 0) {
          operator delete(*(v22 - 3));
        }
        v22 -= 3;
      }
      while (v22 != v21);
      uint64_t v23 = v29;
    }
    int v30 = v21;
    operator delete(v23);
  }
  if (SHIBYTE(v32[2]) < 0) {
    operator delete(v32[0]);
  }
  *(_OWORD *)(a1 + 44448) = xmmword_20B8E30;
  *(void *)(a1 + 44464) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 44520) = 0;
  *(void *)(a1 + 44528) = 0;
  *(void *)(a1 + 44536) = 0;
  *(_DWORD *)(a1 + 44544) = 0;
  *(void *)(a1 + 44552) = 0;
  *(void *)(a1 + 44560) = 0;
  *(_DWORD *)(a1 + 44568) = 0;
  *(void *)(a1 + 44744) = 0;
  *(_DWORD *)(a1 + 44752) = 0;
  *(void *)(a1 + 44720) = 0;
  *(void *)(a1 + 44728) = 0;
  *(_DWORD *)(a1 + 44736) = 0;
  *(_OWORD *)(a1 + 44760) = 0u;
  *(_OWORD *)(a1 + 44776) = 0u;
  *(_OWORD *)(a1 + 44792) = 0u;
  *(_OWORD *)(a1 + 44805) = 0u;
  *(_OWORD *)(a1 + 44576) = 0u;
  *(_OWORD *)(a1 + 44592) = 0u;
  *(_OWORD *)(a1 + 44608) = 0u;
  *(_OWORD *)(a1 + 44624) = 0u;
  *(_OWORD *)(a1 + 44640) = 0u;
  *(_DWORD *)(a1 + 44656) = 0;
  *(_DWORD *)(a1 + 44712) = 0;
  *(_OWORD *)(a1 + 44696) = 0u;
  *(_OWORD *)(a1 + 44680) = 0u;
  *(_OWORD *)(a1 + 44664) = 0u;
  *(_OWORD *)(a1 + 44503) = 0u;
  *(_OWORD *)(a1 + 44472) = 0u;
  *(_OWORD *)(a1 + 44488) = 0u;
  return a1;
}

void sub_10009F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v29 + 127) < 0) {
    operator delete(*(void **)(v29 + 104));
  }
  if (*(unsigned char *)v29)
  {
    sub_3A6230((void *)(v27 + 30808));
    *(unsigned char *)uint64_t v29 = 0;
  }
  sub_C77084(v28);
  _Unwind_Resume(a1);
}

void sub_1000AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_1A668(&a19);
  if (a27 < 0)
  {
    operator delete(a22);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1000AB0);
}

void sub_1000AF8(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W6>, uint64_t a4@<X8>, long long **a5)
{
  sub_1002AD8(a4, a3);
  long long v8 = *a5;
  int64_t v9 = a5[1];
  if (*a5 != v9)
  {
    do
    {
      sub_1002ADC(a4, v8, 1);
      long long v8 = (long long *)((char *)v8 + 472);
    }
    while (v8 != v9);
  }
  char v15 = 5;
  strcpy((char *)__p, "modes");
  int v10 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_F396B0((unsigned char *)(a1 + 24), (uint64_t)v12);
  unint64_t v11 = (void *)sub_560F4(v10, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((v15 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p[0]);
LABEL_5:
  char v15 = 10;
  strcpy((char *)__p, "algorithms");
  sub_5C4AC(v11, (uint64_t)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  sub_F40E9C((void *)(a1 + 44288));
  sub_1000D20();
}

void sub_1000C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
  {
    sub_F2CA5C(v20);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_F2CA5C(v20);
  _Unwind_Resume(a1);
}

void sub_1000CF8(_Unwind_Exception *a1)
{
  sub_F2CA5C(v1);
  _Unwind_Resume(a1);
}

void sub_1000D0C(_Unwind_Exception *a1)
{
  sub_F2CA5C(v1);
  _Unwind_Resume(a1);
}

void sub_1000D20()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  int v113 = v3;
  unsigned int v112 = v4;
  v110.n128_u64[1] = v5;
  uint64_t v111 = v6;
  v110.n128_u64[0] = v7;
  int64_t v9 = v8;
  uint64_t v10 = v0;
  uint64_t v11 = sub_374E5C(*(uint64_t **)(v0 + 40));
  if (*(unsigned char *)(v10 + 1)) {
    unsigned int v12 = *(_DWORD *)(v10 + 4);
  }
  else {
    unsigned int v12 = -1;
  }
  sub_725D0((uint64_t)v134);
  uint64_t v13 = v10 + 44496;
  uint64_t v14 = v9[1] - *v9;
  if (v14)
  {
    unint64_t v15 = 0;
    uint64_t v107 = v10 + 44448;
    uint64_t v108 = v10 + 48;
    uint64_t v109 = v10 + 44288;
    uint64_t v114 = v14 >> 4;
    while (1)
    {
      if (sub_72688((uint64_t)v134) / 100.0 > (double)*(int *)(v10 + 20))
      {
        *(unsigned char *)(v10 + 44518) = 1;
        goto LABEL_168;
      }
      if (*(unsigned char *)(v10 + 3) && *(_DWORD *)v13 >= *(_DWORD *)(v10 + 12)) {
        goto LABEL_168;
      }
      uint64_t v16 = sub_319D38(v9, v15);
      if (*(_DWORD *)(v16 + 8) != 2)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      uint64_t v17 = *(void **)v16;
      __p[1].n128_u8[7] = 9;
      strcpy((char *)__p, "algorithm");
      uint64_t v18 = sub_561B0(v17, (uint64_t)__p);
      if (__p[1].n128_i8[7] < 0) {
        operator delete((void *)__p[0].n128_u64[0]);
      }
      __p[1].n128_u8[7] = 13;
      strcpy((char *)__p, "cost_function");
      uint64_t v19 = sub_561B0(v17, (uint64_t)__p);
      if (__p[1].n128_i8[7] < 0) {
        operator delete((void *)__p[0].n128_u64[0]);
      }
      uint64_t v20 = sub_374E14(*(uint64_t **)(v10 + 40), v19);
      sub_F2CD30((uint64_t)v121, v20);
      int v21 = sub_F397F4(v11, (uint64_t)v121, v12);
      if (v21)
      {
        *(unsigned char *)(v10 + 44516) |= v21 == 1;
        int v22 = 3;
        goto LABEL_91;
      }
      uint64_t v23 = sub_638A44((uint64_t)v2);
      if (!sub_F38B50(v17, v23, v10 + 24, *(void *)(v10 + 40)))
      {
LABEL_90:
        int v22 = 3;
        goto LABEL_91;
      }
      __p[1].n128_u8[7] = 6;
      strcpy((char *)__p, "config");
      uint64_t v24 = sub_561B0(v17, (uint64_t)__p);
      if (__p[1].n128_i8[7] < 0)
      {
        operator delete((void *)__p[0].n128_u64[0]);
        int v25 = *(unsigned __int8 *)(v18 + 23);
        if (!*(unsigned char *)v10) {
          break;
        }
      }
      else
      {
        int v25 = *(unsigned __int8 *)(v18 + 23);
        if (!*(unsigned char *)v10) {
          break;
        }
      }
      if ((v25 & 0x80) != 0)
      {
        if (*(void *)(v18 + 8) != 33) {
          goto LABEL_46;
        }
        uint64_t v26 = *(void *)v18;
      }
      else
      {
        if (v25 == 18) {
          goto LABEL_48;
        }
        if (v25 == 20) {
          goto LABEL_60;
        }
        uint64_t v26 = v18;
        if (v25 != 33) {
          goto LABEL_67;
        }
      }
      uint64_t v27 = *(void *)v26;
      uint64_t v28 = *(void *)(v26 + 8);
      uint64_t v29 = *(void *)(v26 + 16);
      uint64_t v30 = *(void *)(v26 + 24);
      int v31 = *(unsigned __int8 *)(v26 + 32);
      BOOL v32 = v27 == 0x6172675F68746170 && v28 == 0x656D6775615F6870;
      BOOL v33 = v32 && v29 == 0x5F6E6F697461746ELL;
      BOOL v34 = v33 && v30 == 0x687469726F676C61;
      if (!v34 || v31 != 109) {
        break;
      }
      BOOL v58 = 1;
      if (!v125 && !v126 && !v127 && !v128) {
        BOOL v58 = v129 != 0;
      }
      if (v112 != 2 && v58) {
        goto LABEL_90;
      }
      uint64_t v70 = *(void *)(v10 + 40);
      __p[0].n128_u64[0] = (unint64_t)operator new(0x20uLL);
      *(__n128 *)((char *)__p + 8) = (__n128)xmmword_20B91B0;
      strcpy((char *)__p[0].n128_u64[0], "DrivingPathGraphAugmentation");
      __n128 v115 = 0uLL;
      int64_t v116 = 0;
      int v71 = sub_374CDC(v70, (uint64_t)__p, (uint64_t *)&v115);
      int v72 = (void *)sub_560F4(v71, v24);
      unint64_t v73 = v115.n128_u64[0];
      if (v115.n128_u64[0])
      {
        unint64_t v74 = v115.n128_u64[1];
        uint64_t v75 = (void *)v115.n128_u64[0];
        if (v115.n128_u64[1] != v115.n128_u64[0])
        {
          do
          {
            if (*(char *)(v74 - 1) < 0) {
              operator delete(*(void **)(v74 - 24));
            }
            v74 -= 24;
          }
          while (v74 != v73);
          uint64_t v75 = (void *)v115.n128_u64[0];
        }
        v115.n128_u64[1] = v73;
        operator delete(v75);
      }
      if (__p[1].n128_i8[7] < 0) {
        operator delete((void *)__p[0].n128_u64[0]);
      }
      sub_1008F98((uint64_t)__p, v72, *(void **)(v10 + 40), (uint64_t)v2, v10 + 35992, v108);
      sub_1008F9C();
      unint64_t v76 = (uint64_t *)sub_100AABC((uint64_t)__p);
      uint64_t v78 = *v76;
      uint64_t v77 = v76[1];
      if (*v76 != v77)
      {
        do
        {
          sub_1002140((uint64_t *)(v10 + 44472), v78);
          v78 += 32;
        }
        while (v78 != v77);
      }
      if (v125) {
        BOOL v79 = 0;
      }
      else {
        BOOL v79 = v126 == 0;
      }
      BOOL v82 = v79 && v127 == 0 && v128 == 0 && v129 == 0;
      if (!v82 || (int v83 = (void *)sub_100AABC((uint64_t)__p), *v83 != v83[1]))
      {
        sub_100AAC8(__p, &v115);
        sub_33998(v107, (uint64_t)&v115);
      }
      uint64_t v84 = (int32x2_t *)sub_100AADC((uint64_t)__p);
      *(void *)(v10 + 44528) += *(void *)v84;
      *(int32x2_t *)(v10 + 44536) = vadd_s32(*(int32x2_t *)(v10 + 44536), v84[1]);
      *(_DWORD *)(v10 + 44544) += v84[2].i32[0];
      *(void *)(v10 + 44552) += *(void *)&v84[3];
      *(int32x2_t *)(v10 + 44560) = vadd_s32(*(int32x2_t *)(v10 + 44560), v84[4]);
      *(_DWORD *)(v10 + 44568) += v84[5].i32[0];
      uint64_t v85 = *(void *)(v10 + 44584);
      *(void *)(v10 + 44576) += *(void *)&v84[6];
      *(void *)(v10 + 44584) = v85 + *(void *)&v84[7];
      sub_1001F88(__p);
      if (!*(unsigned char *)(v10 + 2))
      {
LABEL_69:
        int v22 = 0;
        goto LABEL_91;
      }
LABEL_68:
      if (sub_1005690((uint64_t)v2)) {
        goto LABEL_69;
      }
      *(unsigned char *)(v10 + 44517) = 1;
      int v22 = 2;
LABEL_91:
      if (v132)
      {
        uint64_t v133 = v132;
        operator delete(v132);
      }
      if (v130)
      {
        unint64_t v131 = v130;
        operator delete(v130);
      }
      sub_3817F8(v124);
      if (v123 < 0)
      {
        operator delete(v122);
        if (v22 == 3) {
          goto LABEL_6;
        }
      }
      else if (v22 == 3)
      {
        goto LABEL_6;
      }
      if (v22) {
        goto LABEL_168;
      }
LABEL_6:
      if (++v15 == v114) {
        goto LABEL_168;
      }
    }
    if ((v25 & 0x80) != 0)
    {
LABEL_46:
      uint64_t v36 = *(void *)(v18 + 8);
      if (v36 != 18)
      {
LABEL_58:
        if (v36 != 20) {
          goto LABEL_67;
        }
        uint64_t v18 = *(void *)v18;
        goto LABEL_60;
      }
      uint64_t v37 = *(void *)v18;
      int v38 = 1;
    }
    else
    {
      if (v25 != 18)
      {
        if (v25 != 20)
        {
LABEL_67:
          if (!*(unsigned char *)(v10 + 2)) {
            goto LABEL_69;
          }
          goto LABEL_68;
        }
LABEL_60:
        if (*(void *)v18 == 0x6172675F68746170
          && *(void *)(v18 + 8) == 0x656E6E6F635F6870
          && *(_DWORD *)(v18 + 16) == 1919906915)
        {
          uint64_t v52 = *(void *)(v10 + 40);
          __p[0].n128_u64[0] = (unint64_t)operator new(0x20uLL);
          *(__n128 *)((char *)__p + 8) = (__n128)xmmword_20B8870;
          strcpy((char *)__p[0].n128_u64[0], "DrivingPathGraphConnector");
          __n128 v115 = 0uLL;
          int64_t v116 = 0;
          unint64_t v53 = sub_374CDC(v52, (uint64_t)__p, (uint64_t *)&v115);
          uint64_t v54 = (void *)sub_560F4(v53, v24);
          unint64_t v55 = v115.n128_u64[0];
          if (v115.n128_u64[0])
          {
            unint64_t v56 = v115.n128_u64[1];
            uint64_t v57 = (void *)v115.n128_u64[0];
            if (v115.n128_u64[1] != v115.n128_u64[0])
            {
              do
              {
                if (*(char *)(v56 - 1) < 0) {
                  operator delete(*(void **)(v56 - 24));
                }
                v56 -= 24;
              }
              while (v56 != v55);
              uint64_t v57 = (void *)v115.n128_u64[0];
            }
            v115.n128_u64[1] = v55;
            operator delete(v57);
          }
          if (__p[1].n128_i8[7] < 0) {
            operator delete((void *)__p[0].n128_u64[0]);
          }
          sub_100C134((uint64_t)__p, v54, *(uint64_t **)(v10 + 40), (uint64_t)v121, v112);
          sub_100C138((uint64_t)__p, v2);
          uint64_t v69 = sub_100F670((uint64_t)__p);
          *(int64x2_t *)(v10 + 44664) = vaddq_s64(*(int64x2_t *)(v10 + 44664), *(int64x2_t *)v69);
          *(void *)(v10 + 44680) += *(void *)(v69 + 16);
          *(int32x4_t *)(v10 + 44688) = vaddq_s32(*(int32x4_t *)(v10 + 44688), *(int32x4_t *)(v69 + 24));
          *(int32x2_t *)(v10 + 44704) = vadd_s32(*(int32x2_t *)(v10 + 44704), *(int32x2_t *)(v69 + 40));
          sub_100206C((uint64_t)__p);
          if (!*(unsigned char *)(v10 + 2)) {
            goto LABEL_69;
          }
          goto LABEL_68;
        }
        goto LABEL_67;
      }
LABEL_48:
      int v38 = 0;
      uint64_t v37 = v18;
    }
    uint64_t v39 = *(void *)v37;
    uint64_t v40 = *(void *)(v37 + 8);
    int v41 = *(unsigned __int16 *)(v37 + 16);
    if (v39 == 0x74736F635F6E696DLL && v40 == 0x7469726F676C615FLL && v41 == 28008)
    {
      uint64_t v46 = *(void *)(v10 + 40);
      strcpy((char *)__p, "MinCostPathComputation");
      __p[1].n128_u8[7] = 22;
      __n128 v115 = 0uLL;
      int64_t v116 = 0;
      int v47 = sub_374CDC(v46, (uint64_t)__p, (uint64_t *)&v115);
      uint64_t v48 = sub_560F4(v47, v24);
      unint64_t v49 = v115.n128_u64[0];
      if (v115.n128_u64[0])
      {
        unint64_t v50 = v115.n128_u64[1];
        uint64_t v51 = (void *)v115.n128_u64[0];
        if (v115.n128_u64[1] != v115.n128_u64[0])
        {
          do
          {
            if (*(char *)(v50 - 1) < 0) {
              operator delete(*(void **)(v50 - 24));
            }
            v50 -= 24;
          }
          while (v50 != v49);
          uint64_t v51 = (void *)v115.n128_u64[0];
        }
        v115.n128_u64[1] = v49;
        operator delete(v51);
      }
      if (__p[1].n128_i8[7] < 0) {
        operator delete((void *)__p[0].n128_u64[0]);
      }
      sub_F58E2C((uint64_t)__p, v48, *(void *)(v10 + 40), v108, *(_DWORD *)(v10 + 16), *(_DWORD *)(v10 + 8));
      __n128 v115 = v110;
      int64_t v116 = v121;
      uint64_t v117 = v111;
      char v118 = v112;
      sub_F464D8();
      long long v60 = v119;
      BOOL v59 = v120;
      if (v119 != v120)
      {
        do
        {
          sub_1002ADC((uint64_t)v2, v60, v113);
          long long v60 = (long long *)((char *)v60 + 472);
        }
        while (v60 != v59);
        long long v60 = v119;
      }
      if (v60)
      {
        uint64_t v61 = (uint64_t)v120;
        uint64_t v62 = v60;
        if (v120 != v60)
        {
          do
            uint64_t v61 = sub_405F44(v61 - 472);
          while ((long long *)v61 != v60);
          uint64_t v62 = v119;
        }
        uint64_t v120 = v60;
        operator delete(v62);
      }
      if (v125) {
        BOOL v63 = 0;
      }
      else {
        BOOL v63 = v126 == 0;
      }
      if (!v63 || v127 != 0 || v128 != 0 || v129 != 0)
      {
        sub_F0480C(__p, &v115);
        sub_33998(v107, (uint64_t)&v115);
      }
      *(_DWORD *)v13 += *(_DWORD *)sub_68EB4(v109);
      int v67 = (unsigned int *)sub_68EB4(v109);
      unsigned int v68 = *(_DWORD *)(v10 + 44504);
      if (v68 <= *v67) {
        unsigned int v68 = *v67;
      }
      *(_DWORD *)(v10 + 44504) = v68;
      if (!*(unsigned char *)(v10 + 2)) {
        goto LABEL_69;
      }
      goto LABEL_68;
    }
    if (!v38) {
      goto LABEL_67;
    }
    uint64_t v36 = *(void *)(v18 + 8);
    goto LABEL_58;
  }
LABEL_168:
  uint64_t v86 = sub_68EB4(v10 + 44288);
  uint64_t v88 = *(void *)(v86 + 8);
  uint64_t v87 = *(int **)(v86 + 16);
  if ((int *)v88 != v87)
  {
    int v89 = *(_DWORD *)(v10 + 44500);
    unint64_t v90 = (unint64_t)v87 - v88 - 8;
    if (v90 >= 0x40)
    {
      uint64_t v92 = (v90 >> 3) + 1;
      uint64_t v93 = v92 & 7;
      if ((v92 & 7) == 0) {
        uint64_t v93 = 8;
      }
      uint64_t v94 = v92 - v93;
      int v91 = (int *)(v88 + 8 * v94);
      int32x4_t v95 = 0uLL;
      int32x4_t v96 = (int32x4_t)*(unsigned int *)(v10 + 44500);
      int v97 = (const float *)(v88 + 32);
      do
      {
        unint64_t v98 = v97 - 8;
        unsigned long long v99 = (unsigned __int128)vld2q_f32(v98);
        unsigned long long v100 = (unsigned __int128)vld2q_f32(v97);
        int32x4_t v96 = vaddq_s32(v96, (int32x4_t)v99);
        int32x4_t v95 = vaddq_s32(v95, (int32x4_t)v100);
        v97 += 16;
        v94 -= 8;
      }
      while (v94);
      int v89 = vaddvq_s32(vaddq_s32(v95, v96));
    }
    else
    {
      int v91 = *(int **)(v86 + 8);
    }
    do
    {
      int v101 = *v91;
      v91 += 2;
      v89 += v101;
    }
    while (v91 != v87);
    *(_DWORD *)(v10 + 44500) = v89;
  }
  sub_F40DD0((void *)(v10 + 44288), __p);
  unint64_t v103 = __p[0].n128_u64[1];
  uint64_t v102 = __p[0].n128_u64[0];
  if (__p[0].n128_u64[0] != __p[0].n128_u64[1])
  {
    uint64_t v104 = (uint64_t *)(v10 + 44472);
    do
    {
      sub_1002140(v104, v102);
      v102 += 32;
    }
    while (v102 != v103);
  }
  if (*(unsigned char *)(v13 + 20) || *(unsigned char *)(v13 + 22))
  {
    uint64_t v105 = sub_69510();
    nullsub_1(v105);
  }
  if (__p[0].n128_u64[0])
  {
    __p[0].n128_u64[1] = __p[0].n128_u64[0];
    operator delete((void *)__p[0].n128_u64[0]);
  }
}

void sub_10018CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

__n128 sub_10019E4@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = a1[2778];
  *a2 = result;
  a2[1].n128_u64[0] = a1[2779].n128_u64[0];
  return result;
}

uint64_t sub_1001A00(uint64_t a1, void *a2, void *a3)
{
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93C0;
  strcpy((char *)__p[0], "enable_path_graph_augmentation_algorithm");
  BOOL v6 = sub_29D62C(a3, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v6;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "apply_ondemand_queries_threshold");
  BOOL v7 = sub_29D62C(a3, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v7;
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "stop_if_no_routes");
  BOOL v8 = sub_29D62C(a3, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 2) = v8;
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "path_finding_iterations");
  int64_t v9 = (void *)sub_560F4(a2, (uint64_t)__p);
  uint64_t v17 = operator new(0x20uLL);
  long long v18 = xmmword_20B8890;
  strcpy((char *)v17, "enable_total_iterations_limit");
  BOOL v10 = sub_29D62C(v9, (uint64_t)&v17);
  if (SHIBYTE(v18) < 0)
  {
    operator delete(v17);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[0]);
LABEL_9:
  *(unsigned char *)(a1 + 3) = v10;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "max_ondemand_threads_factor");
  double v11 = sub_5C7E8(a3, (uint64_t)__p);
  unsigned int v12 = vcvtpd_u64_f64(v11 * (double)std::thread::hardware_concurrency() * 0.25);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 4) = v12;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "max_num_scanned_nodes");
  int v13 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 8) = v13;
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "path_finding_iterations");
  uint64_t v14 = (void *)sub_560F4(a2, (uint64_t)__p);
  uint64_t v17 = operator new(0x20uLL);
  long long v18 = xmmword_20B8890;
  strcpy((char *)v17, "total_path_finding_iterations");
  int v15 = sub_31AC04(v14, (uint64_t)&v17);
  if (SHIBYTE(v18) < 0)
  {
    operator delete(v17);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
  }
  else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(__p[0]);
LABEL_15:
  *(_DWORD *)(a1 + 12) = v15;
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "use_dijkstra");
  *(_DWORD *)(a1 + 16) = sub_29D62C(a2, (uint64_t)__p) - 1;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "max_computation_time_ds");
  *(_DWORD *)(a1 + 20) = sub_5D2EC(a3, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1001DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001E6C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  int v3 = (uint64_t *)(a1 + 44472);
  uint64_t v4 = *(void *)(a1 + 44472);
  unint64_t v5 = (uint64_t *)v3[1];
  unint64_t v6 = 126 - 2 * __clz(((uint64_t)v5 - v4) >> 5);
  if (v5 == (uint64_t *)v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  sub_F35D00(v4, v5, (uint64_t)&v16, v7, 1);
  uint64_t result = sub_F35B58(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v9 = *v3;
  uint64_t v10 = v3[1];
  int64_t v11 = v10 - *v3;
  if (v11)
  {
    if (v11 < 0) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(v11);
    uint64_t v12 = 0;
    *a2 = result;
    a2[1] = result;
    a2[2] = result + 32 * (v11 >> 5);
    do
    {
      uint64_t v13 = v9 + v12;
      uint64_t v14 = result + v12;
      unsigned int v15 = *(_DWORD *)(v9 + v12 + 16);
      *(_DWORD *)(result + v12 + 16) = v15;
      if (v15 <= 1) {
        *(_OWORD *)uint64_t v14 = *(_OWORD *)v13;
      }
      *(unsigned char *)(v14 + 24) = *(unsigned char *)(v13 + 24);
      v12 += 32;
    }
    while (v9 + v12 != v10);
    a2[1] = result + v12;
  }
  return result;
}

void sub_1001F60(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001F7C(uint64_t a1)
{
  return a1 + 44496;
}

void *sub_1001F88(void *a1)
{
  uint64_t v2 = a1[551];
  if (v2)
  {
    uint64_t v3 = a1[552];
    uint64_t v4 = (void *)a1[551];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[551];
    }
    a1[552] = v2;
    operator delete(v4);
  }
  uint64_t v5 = a1[548];
  if (v5)
  {
    uint64_t v6 = a1[549];
    uint64_t v7 = (void *)a1[548];
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      uint64_t v7 = (void *)a1[548];
    }
    a1[549] = v5;
    operator delete(v7);
  }
  BOOL v8 = (void *)a1[535];
  if (v8)
  {
    a1[536] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[522];
  if (v9)
  {
    a1[523] = v9;
    operator delete(v9);
  }
  sub_3A6318(a1 + 6);
  return a1;
}

uint64_t sub_100206C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 10800);
  if (v2)
  {
    *(void *)(a1 + 10808) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 10776);
  if (v3)
  {
    *(void *)(a1 + 10784) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (unsigned char *)(a1 + 9680);
  uint64_t v5 = *(void **)(a1 + 10744);
  if (v5)
  {
    *(void *)(a1 + 10752) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 10720);
  if (v6)
  {
    *(void *)(a1 + 10728) = v6;
    operator delete(v6);
  }
  sub_328138(a1 + 9952);
  if (*(char *)(a1 + 9887) < 0) {
    operator delete(*(void **)(a1 + 9864));
  }
  if (*v4)
  {
    sub_3A6230((void *)(a1 + 4504));
    *uint64_t v4 = 0;
  }
  uint64_t v7 = *(void **)(a1 + 4416);
  if (v7)
  {
    *(void *)(a1 + 4424) = v7;
    operator delete(v7);
  }
  sub_3A6318((void *)(a1 + 288));
  BOOL v8 = *(void **)(a1 + 56);
  if (v8)
  {
    *(void *)(a1 + 64) = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_1002140(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = (_DWORD *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 < v4)
  {
    v5[4] = *(_DWORD *)(a2 + 16);
    if (*(_DWORD *)(a2 + 16) <= 1u) {
      *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
    }
    *((unsigned char *)v5 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v6 = (char *)(v5 + 8);
LABEL_5:
    a1[1] = (uint64_t)v6;
    return;
  }
  uint64_t v7 = (_DWORD *)*a1;
  uint64_t v8 = ((uint64_t)v5 - *a1) >> 5;
  unint64_t v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v10 = v4 - (void)v7;
  if (v10 >> 4 > v9) {
    unint64_t v9 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v9;
  }
  if (v11)
  {
    if (v11 >> 59) {
      sub_188D718();
    }
    uint64_t v12 = (char *)operator new(32 * v11);
    uint64_t v13 = (uint64_t)&v12[32 * v8];
    unsigned int v14 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(v13 + 16) = v14;
    if (v14 <= 1) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = 32 * v8;
    unsigned int v19 = *(_DWORD *)(a2 + 16);
    dword_10[8 * v8] = v19;
    if (v19 <= 1) {
LABEL_15:
    }
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a2;
  }
  *(unsigned char *)(v13 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = (char *)(v13 + 32);
  if (v5 != v7)
  {
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = v13 + v15 * 4;
      uint64_t v17 = (char *)&v5[v15];
      unsigned int v18 = v5[v15 - 4];
      *(_DWORD *)(v13 + v15 * 4 - 16) = v18;
      if (v18 <= 1) {
        *(_OWORD *)(v16 - 32) = *((_OWORD *)v17 - 2);
      }
      *(unsigned char *)(v16 - 8) = *(v17 - 8);
      v15 -= 8;
    }
    while (&v5[v15] != v7);
    uint64_t v5 = (_DWORD *)*a1;
    v13 += v15 * 4;
  }
  *a1 = v13;
  a1[1] = (uint64_t)v6;
  a1[2] = (uint64_t)&v12[32 * v11];
  if (!v5) {
    goto LABEL_5;
  }
  operator delete(v5);
  a1[1] = (uint64_t)v6;
}

void sub_10022D4()
{
  unk_25FD42F = 16641;
  word_25FD418 = 65;
  byte_25FD447 = 1;
  byte_25FD431 = 0;
}

BOOL sub_10022FC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 104) != 1;
}

BOOL sub_100230C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 104) == 1;
}

uint64_t sub_100231C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 104))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  return a1 + 8;
}

uint64_t sub_100237C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 104) != 1)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  return a1 + 8;
}

uint64_t sub_10023E0(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 104) != 1)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  return a1 + 16;
}

uint64_t sub_1002444(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 104);
  if (v1)
  {
    if (v1 != 1)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    uint64_t v2 = *(int **)(a1 + 16);
    uint64_t v3 = (unsigned __int16 *)((char *)v2 - *v2);
    if (*v3 < 9u) {
      return 0;
    }
    unsigned int v4 = v3[4];
    if (!v4) {
      return 0;
    }
    return *(unsigned int *)((char *)v2 + v4);
  }
  uint64_t v2 = *(int **)(a1 + 8);
  uint64_t v5 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v5 >= 9u)
  {
    unsigned int v4 = v5[4];
    if (v4) {
      return *(unsigned int *)((char *)v2 + v4);
    }
  }
  return 0;
}

uint64_t sub_10024FC(uint64_t result, __int16 a2, uint64_t a3)
{
  *(_WORD *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  return result;
}

uint64_t sub_1002508(uint64_t a1, char a2)
{
  *(unsigned char *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = &unk_20E1710;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = &unk_20E1710;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = &unk_20E1710;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = &unk_20E1710;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = &unk_20E1710;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = &unk_20E1710;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = &unk_20E1710;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = &unk_20E1710;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = &unk_20E1710;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = &unk_20E1710;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = &unk_20E1710;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 560) = &unk_20E1710;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 608) = &unk_20E1710;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 616) = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 656) = &unk_20E1710;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 680) = 0;
  *(void *)(a1 + 704) = &unk_20E1710;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 752) = &unk_20E1710;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  *(void *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(void *)(a1 + 824) = &unk_20E1710;
  *(void *)(a1 + 864) = 0;
  *(void *)(a1 + 840) = 0;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 848) = 0;
  *(void *)(a1 + 872) = &unk_20E1710;
  *(void *)(a1 + 912) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 920) = &unk_20E1710;
  *(void *)(a1 + 960) = 0;
  *(void *)(a1 + 936) = 0;
  *(void *)(a1 + 928) = 0;
  *(void *)(a1 + 944) = 0;
  *(void *)(a1 + 968) = &unk_20E1710;
  *(void *)(a1 + 1008) = 0;
  *(void *)(a1 + 984) = 0;
  *(void *)(a1 + 976) = 0;
  *(void *)(a1 + 992) = 0;
  *(void *)(a1 + 1016) = &unk_20E1710;
  *(void *)(a1 + 1056) = 0;
  *(void *)(a1 + 1032) = 0;
  *(void *)(a1 + 1024) = 0;
  *(void *)(a1 + 1040) = 0;
  *(void *)(a1 + 1064) = &unk_20E1710;
  *(void *)(a1 + 1104) = 0;
  *(void *)(a1 + 1080) = 0;
  *(void *)(a1 + 1072) = 0;
  *(void *)(a1 + 1088) = 0;
  *(void *)(a1 + 1112) = &unk_20E1710;
  *(void *)(a1 + 1152) = 0;
  *(void *)(a1 + 1128) = 0;
  *(void *)(a1 + 1120) = 0;
  *(void *)(a1 + 1136) = 0;
  *(void *)(a1 + 1160) = &unk_20E1710;
  *(void *)(a1 + 1200) = 0;
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1184) = 0;
  *(void *)(a1 + 1208) = &unk_20E1710;
  *(void *)(a1 + 1248) = 0;
  *(void *)(a1 + 1224) = 0;
  *(void *)(a1 + 1216) = 0;
  *(void *)(a1 + 1232) = 0;
  *(void *)(a1 + 1256) = &unk_20E1710;
  *(void *)(a1 + 1296) = 0;
  *(void *)(a1 + 1272) = 0;
  *(void *)(a1 + 1264) = 0;
  *(void *)(a1 + 1280) = 0;
  *(void *)(a1 + 1304) = &unk_20E1710;
  *(void *)(a1 + 1344) = 0;
  *(void *)(a1 + 1320) = 0;
  *(void *)(a1 + 1312) = 0;
  *(void *)(a1 + 1328) = 0;
  *(void *)(a1 + 1352) = &unk_20E1710;
  *(void *)(a1 + 1392) = 0;
  *(void *)(a1 + 1368) = 0;
  *(void *)(a1 + 1360) = 0;
  *(void *)(a1 + 1376) = 0;
  *(void *)(a1 + 1400) = &unk_20E1710;
  *(void *)(a1 + 1440) = 0;
  *(void *)(a1 + 1416) = 0;
  *(void *)(a1 + 1408) = 0;
  *(void *)(a1 + 1424) = 0;
  *(void *)(a1 + 1448) = &unk_20E1710;
  *(void *)(a1 + 1488) = 0;
  *(void *)(a1 + 1464) = 0;
  *(void *)(a1 + 1456) = 0;
  *(void *)(a1 + 1472) = 0;
  *(void *)(a1 + 1496) = &unk_20E1710;
  *(void *)(a1 + 1536) = 0;
  *(void *)(a1 + 1512) = 0;
  *(void *)(a1 + 1504) = 0;
  *(void *)(a1 + 1520) = 0;
  *(void *)(a1 + 1544) = &unk_20E1710;
  *(void *)(a1 + 1560) = 0;
  *(void *)(a1 + 1552) = 0;
  *(void *)(a1 + 1568) = 0;
  *(_WORD *)(a1 + 1617) = 0;
  *(_DWORD *)(a1 + 1620) = 0;
  *(void *)(a1 + 1608) = 0x3E4CCCCD3F000000;
  *(_DWORD *)(a1 + 1624) = 0;
  *(_WORD *)(a1 + 1628) = 0;
  *(unsigned char *)(a1 + 1630) = 1;
  *(void *)(a1 + 1640) = 0;
  *(void *)(a1 + 1632) = 0;
  *(void *)(a1 + 1648) = 32;
  *(_DWORD *)(a1 + 1656) = 0;
  *(_WORD *)(a1 + 1660) = 0;
  *(unsigned char *)(a1 + 1662) = 1;
  *(void *)(a1 + 1664) = 0;
  *(_OWORD *)(a1 + 1584) = xmmword_20F00E0;
  *(void *)(a1 + 1600) = 6;
  *(unsigned char *)(a1 + 1616) = 0;
  *(_WORD *)(a1 + 1744) = 0;
  *(unsigned char *)(a1 + 1746) = 0;
  *(_DWORD *)(a1 + 1748) = 0;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(void *)(a1 + 1736) = 0x3E4CCCCD3F000000;
  sub_1024750(a1 + 1752);
  *(void *)(a1 + 1928) = 0;
  *(void *)(a1 + 1920) = 0;
  *(void *)(a1 + 1936) = 32;
  uint64_t v3 = (long long *)(a1 + 1944);
  sub_1024750(a1 + 1944);
  *(void *)(a1 + 2112) = 0;
  *(uint64x2_t *)(a1 + 1720) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 1736), (float)*(unint64_t *)(a1 + 1936))));
  *(unsigned char *)(a1 + 1744) = 0;
  *(void *)(a1 + 2328) = 0;
  *(_OWORD *)(a1 + 2120) = 0u;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(_OWORD *)(a1 + 2216) = 0u;
  *(_OWORD *)(a1 + 2232) = 0u;
  *(_OWORD *)(a1 + 2248) = 0u;
  *(_OWORD *)(a1 + 2264) = 0u;
  *(_OWORD *)(a1 + 2280) = 0u;
  *(_OWORD *)(a1 + 2296) = 0u;
  *(_OWORD *)(a1 + 2312) = 0u;
  *(unsigned char *)(a1 + 1617) = 1;
  *(void *)(a1 + 1656) = 0x1000000000000;
  unsigned int v4 = (char *)malloc_type_malloc(8 * *(void *)(a1 + 1648), 0x100004087442A64uLL);
  *(void *)(a1 + 1664) = v4;
  uint64_t v5 = *(void *)(a1 + 1648);
  if (v5)
  {
    uint64_t v6 = (const double *)(a1 + 1656);
    unint64_t v7 = (v5 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v7 >= 0xF)
    {
      if ((unint64_t)v4 >= a1 + 1664 || (uint64_t v8 = v4, v6 >= (const double *)&v4[8 * v5]))
      {
        unint64_t v9 = v7 + 1;
        uint64_t v8 = &v4[8 * (v9 & 0x3FFFFFFFFFFFFFFCLL)];
        float64x2_t v10 = vld1q_dup_f64(v6);
        unint64_t v11 = (float64x2_t *)(v4 + 16);
        uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v11[-1] = v10;
          float64x2_t *v11 = v10;
          v11 += 2;
          v12 -= 4;
        }
        while (v12);
        if (v9 == (v9 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_11;
        }
      }
    }
    else
    {
      uint64_t v8 = v4;
    }
    uint64_t v13 = &v4[8 * v5];
    do
    {
      *(double *)uint64_t v8 = *v6;
      v8 += 8;
    }
    while (v8 != v13);
  }
LABEL_11:
  sub_1024750((uint64_t)v32);
  *(unsigned char *)(a1 + 1745) = 1;
  long long v14 = v32[9];
  *(_OWORD *)(a1 + 2072) = v32[8];
  *(_OWORD *)(a1 + 2088) = v14;
  *(void *)(a1 + 2104) = v33;
  long long v15 = v32[5];
  *(_OWORD *)(a1 + 2008) = v32[4];
  *(_OWORD *)(a1 + 2024) = v15;
  long long v16 = v32[7];
  *(_OWORD *)(a1 + 2040) = v32[6];
  *(_OWORD *)(a1 + 2056) = v16;
  long long v17 = v32[1];
  *uint64_t v3 = v32[0];
  *(_OWORD *)(a1 + 1960) = v17;
  long long v18 = v32[3];
  size_t v19 = 168 * *(void *)(a1 + 1936);
  *(_OWORD *)(a1 + 1976) = v32[2];
  *(_OWORD *)(a1 + 1992) = v18;
  uint64_t v20 = malloc_type_malloc(v19, 0x1000040287579A1uLL);
  *(void *)(a1 + 2112) = v20;
  uint64_t v21 = *(void *)(a1 + 1936);
  if (v21)
  {
    uint64_t v22 = 168 * v21;
    do
    {
      long long v23 = *v3;
      long long v24 = *(_OWORD *)(a1 + 1976);
      v20[1] = *(_OWORD *)(a1 + 1960);
      v20[2] = v24;
      _OWORD *v20 = v23;
      long long v25 = *(_OWORD *)(a1 + 1992);
      long long v26 = *(_OWORD *)(a1 + 2008);
      long long v27 = *(_OWORD *)(a1 + 2040);
      v20[5] = *(_OWORD *)(a1 + 2024);
      v20[6] = v27;
      v20[3] = v25;
      v20[4] = v26;
      long long v28 = *(_OWORD *)(a1 + 2056);
      long long v29 = *(_OWORD *)(a1 + 2072);
      long long v30 = *(_OWORD *)(a1 + 2088);
      *((void *)v20 + 20) = *(void *)(a1 + 2104);
      v20[8] = v29;
      v20[9] = v30;
      v20[7] = v28;
      uint64_t v20 = (_OWORD *)((char *)v20 + 168);
      v22 -= 168;
    }
    while (v22);
  }
  return a1;
}

void sub_1002A08(_Unwind_Exception *a1)
{
  sub_F2CAFC(v4);
  unint64_t v7 = (void *)v1[264];
  if (v7)
  {
    free(v7);
    uint64_t v8 = (void *)v1[212];
    if (!v8)
    {
LABEL_3:
      uint64_t v9 = (uint64_t)(v1 + 103);
      float64x2_t v10 = *v5;
      if (!*v5) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v8 = (void *)v1[212];
    if (!v8) {
      goto LABEL_3;
    }
  }
  v1[213] = v8;
  operator delete(v8);
  uint64_t v9 = (uint64_t)(v1 + 103);
  float64x2_t v10 = *v5;
  if (!*v5)
  {
LABEL_4:
    unint64_t v11 = (void *)v1[208];
    if (!v11) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  v1[210] = v10;
  operator delete(v10);
  unint64_t v11 = (void *)v1[208];
  if (!v11)
  {
LABEL_5:
    sub_328138(v9);
    uint64_t v12 = (void *)v1[100];
    if (!v12) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  free(v11);
  sub_328138(v9);
  uint64_t v12 = (void *)v1[100];
  if (!v12)
  {
LABEL_6:
    sub_328138(v3);
    sub_C63044(v2);
    _Unwind_Resume(a1);
  }
LABEL_11:
  v1[101] = v12;
  operator delete(v12);
  sub_328138(v3);
  sub_C63044(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1002ADC(uint64_t a1, long long *a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  if (v6 == v7) {
    goto LABEL_7;
  }
  while (1)
  {
    uint64_t v8 = (uint64_t *)nullsub_1(v6);
    if (sub_EB1870(*v8, a2)) {
      break;
    }
    v6 += 48;
    if (v6 == v7)
    {
      uint64_t v6 = v7;
      break;
    }
  }
  if (v6 != *(void *)(a1 + 16)) {
    return 0;
  }
LABEL_7:
  v11[0] = 0;
  v11[1] = sub_EB04A8((uint64_t)a2);
  uint64_t v9 = 1;
  sub_1002B90(a1, a2, v11, a3, 1);
  return v9;
}

void sub_1002B90(uint64_t a1, long long *a2, unint64_t *a3, int a4, int a5)
{
  if (sub_EADC78((uint64_t)a2) && !*(unsigned char *)a1)
  {
    if (a4 && a5)
    {
      unint64_t v16 = *(void *)(a1 + 16);
      if (v16 >= *(void *)(a1 + 24))
      {
        *(void *)(a1 + 16) = sub_F577B4((int64x2_t *)(a1 + 8), a2);
      }
      else
      {
        sub_EA7B04(*(void *)(a1 + 16), a2);
        *(void *)(a1 + 16) = v16 + 48;
        *(void *)(a1 + 16) = v16 + 48;
      }
    }
  }
  else
  {
    BOOL v10 = sub_EADC78((uint64_t)a2);
    unint64_t v11 = *a3;
    if (v10 || v11 != a3[1])
    {
      if (v11)
      {
        unsigned int v12 = -1;
        unint64_t v13 = a3[1];
        unint64_t v14 = sub_EB04A8((uint64_t)a2);
        unsigned int v15 = -1;
        if (v13 != v14) {
          goto LABEL_15;
        }
      }
      else
      {
        unint64_t v33 = 0;
        int v22 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        char v25 = 0;
        uint64_t v26 = 0x3FF0000000000000;
        char v27 = 1;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        char v30 = 0;
        int v31 = 36000;
        char v32 = 0;
        unint64_t v21 = sub_EAFECC((uint64_t)a2);
        uint64_t v17 = sub_69134((uint64_t)a2);
        unsigned int v12 = sub_10031E0((uint64_t *)a1, &v33, (uint64_t)&v22, &v21, v17, (uint64_t *)(a1 + 1672));
        unint64_t v18 = a3[1];
        unint64_t v19 = sub_EB04A8((uint64_t)a2);
        unsigned int v15 = -1;
        if (v18 != v19)
        {
LABEL_15:
          sub_10033A0((uint64_t *)a1, a2, a3, a4, v12, v15);
          return;
        }
      }
      if (a5)
      {
        unint64_t v33 = sub_EAFF14((uint64_t)a2);
        uint64_t v20 = sub_EADAD0((uint64_t)a2);
        unint64_t v21 = 0;
        int v22 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        char v25 = 0;
        uint64_t v26 = 0x3FF0000000000000;
        char v27 = 1;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        char v30 = 0;
        int v31 = 36000;
        char v32 = 0;
        unsigned int v15 = sub_10031E0((uint64_t *)a1, &v33, v20, &v21, (uint64_t)&v22, (uint64_t *)(a1 + 1696));
      }
      goto LABEL_15;
    }
  }
}

void sub_1002D7C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void sub_1002D84(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, unint64_t **a5@<X8>)
{
  uint64_t v9 = (uint64_t *)nullsub_1(a2);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  if (*v9 == v10)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  unsigned int v12 = v9;
  if (v10 - v11 == 472)
  {
    unint64_t v13 = (unsigned int *)a1[209];
    unint64_t v14 = (unsigned int *)a1[210];
    if (v13 == v14) {
      goto LABEL_15;
    }
    uint64_t v15 = (uint64_t)(v13 + 24);
    while (1)
    {
      if (*(void *)(v15 - 8) == sub_EAFECC(v11))
      {
        uint64_t v17 = sub_69134(v11);
        if (sub_EB45A4(v15, v17)) {
          break;
        }
      }
      unint64_t v16 = (unsigned int *)(v15 + 72);
      v15 += 168;
      if (v16 == v14) {
        goto LABEL_9;
      }
    }
    unint64_t v14 = (unsigned int *)(v15 - 96);
LABEL_9:
    if (v14 == (unsigned int *)a1[210])
    {
LABEL_15:
      uint64_t v18 = 0xFFFFFFFFLL;
      unint64_t v19 = (unsigned int *)a1[212];
      uint64_t v20 = (unsigned int *)a1[213];
      if (v19 == v20) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v18 = *v14;
      unint64_t v19 = (unsigned int *)a1[212];
      uint64_t v20 = (unsigned int *)a1[213];
      if (v19 == v20) {
        goto LABEL_24;
      }
    }
    uint64_t v23 = *v12;
    uint64_t v24 = (uint64_t)(v19 + 4);
    while (1)
    {
      if (*(void *)(v24 - 8) == sub_EAFF14(v23))
      {
        uint64_t v26 = sub_EADAD0(v23);
        if (sub_EB45A4(v24, v26)) {
          break;
        }
      }
      char v25 = (unsigned int *)(v24 + 152);
      v24 += 168;
      if (v25 == v20) {
        goto LABEL_21;
      }
    }
    uint64_t v20 = (unsigned int *)(v24 - 16);
LABEL_21:
    if (v20 != (unsigned int *)a1[213])
    {
      unint64_t v27 = (unint64_t)*v20 << 32;
      uint64_t v28 = (long long *)*v12;
      uint64_t v29 = a1[1];
      uint64_t v30 = a1[2];
      if (v29 != v30) {
        goto LABEL_25;
      }
      goto LABEL_29;
    }
LABEL_24:
    unint64_t v27 = 0xFFFFFFFF00000000;
    uint64_t v28 = (long long *)*v12;
    uint64_t v29 = a1[1];
    uint64_t v30 = a1[2];
    if (v29 != v30)
    {
LABEL_25:
      while (1)
      {
        int v31 = (uint64_t *)nullsub_1(v29);
        if (sub_EB1870(*v31, v28)) {
          break;
        }
        v29 += 48;
        if (v29 == v30)
        {
          uint64_t v29 = v30;
          break;
        }
      }
      if (v29 != a1[2]) {
        goto LABEL_30;
      }
    }
LABEL_29:
    unint64_t v48 = 0;
    unint64_t v49 = sub_EB04A8((uint64_t)v28);
    sub_1002B90((uint64_t)a1, v28, &v48, 1, 1);
LABEL_30:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    char v32 = (unint64_t *)operator new(8uLL);
    *a5 = v32;
    *v32++ = v27 | v18;
    a5[1] = v32;
    a5[2] = v32;
    return;
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  unint64_t v60 = sub_EAFECC(v11);
  if (a3)
  {
    v47[0] = 0;
    LODWORD(v48) = 0;
    unint64_t v49 = 0;
    uint64_t v50 = 0;
    char v51 = 0;
    uint64_t v52 = 0x3FF0000000000000;
    char v53 = 1;
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    char v56 = 0;
    int v57 = 36000;
    char v58 = 0;
    uint64_t v21 = sub_69134(*v12);
    int v22 = sub_10031E0(a1, v47, (uint64_t)&v48, &v60, v21, a1 + 209);
  }
  else
  {
    sub_EE03E4((uint64_t)(a1 + 4), (uint64_t *)&v60, v61);
    if (v61[0]) {
      int v22 = *(_DWORD *)(v62 + 8);
    }
    else {
      int v22 = -1;
    }
  }
  int v59 = v22;
  sub_745A4((uint64_t)a5, &v59);
  v47[0] = a1;
  v47[1] = a5;
  uint64_t v33 = *v12;
  uint64_t v34 = v12[1];
  if (*v12 != v34 && v33 + 472 != v34)
  {
    do
    {
      sub_10064DC(v47, v33, v33 + 472);
      uint64_t v35 = v33 + 944;
      v33 += 472;
    }
    while (v35 != v34);
    uint64_t v34 = v12[1];
  }
  unint64_t v46 = sub_EAFF14(v34 - 472);
  if (a4)
  {
    uint64_t v36 = sub_EADAD0(v12[1] - 472);
    uint64_t v44 = 0;
    LODWORD(v48) = 0;
    unint64_t v49 = 0;
    uint64_t v50 = 0;
    char v51 = 0;
    uint64_t v52 = 0x3FF0000000000000;
    char v53 = 1;
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    char v56 = 0;
    int v57 = 36000;
    char v58 = 0;
    int v37 = sub_10031E0(a1, &v46, v36, &v44, (uint64_t)&v48, a1 + 212);
  }
  else
  {
    sub_EE03E4((uint64_t)(a1 + 4), (uint64_t *)&v46, v61);
    if (v61[0]) {
      int v37 = *(_DWORD *)(v62 + 8);
    }
    else {
      int v37 = -1;
    }
  }
  int v45 = v37;
  sub_745A4((uint64_t)a5, &v45);
  uint64_t v38 = v12[1] - *v12;
  if (v38)
  {
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = v38 / 472;
    do
    {
      unint64_t v42 = sub_EB04A8(*v12 + v39);
      uint64_t v43 = (long long *)(*v12 + v39);
      unint64_t v48 = 0;
      unint64_t v49 = v42;
      sub_10033A0(a1, v43, &v48, 0, *((_DWORD *)*a5 + v40), *((_DWORD *)*a5 + v40 + 1));
      ++v40;
      v39 += 472;
    }
    while (v41 != v40);
  }
}

void sub_10031A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10031E0(uint64_t *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t *a6)
{
  unsigned int v12 = (unsigned int *)a6[1];
  if ((unsigned int *)*a6 == v12) {
    goto LABEL_11;
  }
  uint64_t v13 = *a6 + 96;
  while (*(void *)(v13 - 88) != *a2
       || !sub_EB45A4(v13 - 80, a3)
       || *(void *)(v13 - 8) != *a4
       || !sub_EB45A4(v13, a5))
  {
    unint64_t v14 = (unsigned int *)(v13 + 72);
    v13 += 168;
    if (v14 == v12) {
      goto LABEL_9;
    }
  }
  unsigned int v12 = (unsigned int *)(v13 - 96);
LABEL_9:
  if (v12 != (unsigned int *)a6[1]) {
    return *v12;
  }
LABEL_11:
  unint64_t v16 = a1[278] - a1[277];
  unint64_t v15 = v16 >> 2;
  unsigned int v22 = v16 >> 2;
  if (*a2) {
    uint64_t v17 = a2;
  }
  else {
    uint64_t v17 = a4;
  }
  sub_A4710((uint64_t)(a1 + 100), v17);
  unsigned int v18 = v16 >> 2;
  sub_EE01BC(a1 + 265, v18);
  unint64_t v19 = a6[1];
  if (v19 >= a6[2])
  {
    uint64_t v20 = sub_1007944(a6, (int *)&v22, a2, a3, a4, a5);
    unint64_t v15 = v22;
  }
  else
  {
    sub_10247B8(a6[1], v18, a2, a3, a4, a5);
    uint64_t v20 = v19 + 168;
    a6[1] = v19 + 168;
  }
  a6[1] = v20;
  return v15;
}

void sub_1003350(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1003358(uint64_t a1, uint64_t *a2)
{
  sub_EE03E4(a1 + 32, a2, v3);
  if (v3[0]) {
    return *(unsigned int *)(v3[3] + 8);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void sub_10033A0(uint64_t *a1, long long *a2, unint64_t *a3, int a4, unsigned int a5, unsigned int a6)
{
  uint64_t v43 = (int64x2_t *)(a1 + 1);
  BOOL v47 = 0;
  __int16 v53 = sub_1005D60(0xAAAAAAAAAAAAAAABLL * ((a1[2] - a1[1]) >> 4));
  if (a4 && !*a3)
  {
    unint64_t v11 = a3[1];
    BOOL v47 = v11 == sub_EB04A8((uint64_t)a2);
  }
  if (sub_EADC78((uint64_t)a2))
  {
    unint64_t v12 = sub_EAFECC((uint64_t)a2);
    uint64_t v13 = sub_EADD1C((uint64_t)a2);
    long long v48 = *(_OWORD *)v13;
    long long v49 = *(_OWORD *)(v13 + 16);
    uint64_t v50 = *(void *)(v13 + 32);
    *(void *)uint64_t v54 = v12;
    *(_OWORD *)&v54[8] = v48;
    *(void *)&v54[40] = v50;
    *(_OWORD *)&v54[24] = v49;
    int v58 = 1;
    sub_10050B4(a1, a5, a6, (long long *)v54, 1, (uint64_t)v51);
    uint64_t v14 = sub_EAD918((uint64_t)a2);
    uint64_t v15 = *v51[0] + 152 * v52;
    uint64_t v16 = *(void *)v14;
    *(_WORD *)(v15 + 144) = *(_WORD *)(v14 + 8);
    *(void *)(v15 + 136) = v16;
    if (!v47) {
      return;
    }
    unint64_t v17 = a1[2];
    if (v17 < a1[3])
    {
      sub_EA7B04(a1[2], a2);
      a1[2] = v17 + 48;
      a1[2] = v17 + 48;
      return;
    }
    uint64_t v42 = sub_F577B4(v43, a2);
    goto LABEL_37;
  }
  sub_1005EB4(a1 + 265, a3[1] - *a3 + ((unint64_t)(a1[278] - a1[277]) >> 2), 678152731 * ((unint64_t)(a1[281] - a1[280]) >> 3) + a3[1] - *a3, 1, 0);
  v51[0] = a1;
  unint64_t v19 = *a3;
  unint64_t v18 = a3[1];
  BOOL v20 = *a3 >= v18;
  if (*a3 > v18) {
    unint64_t v18 = *a3;
  }
  unint64_t v45 = v18;
  if (!v20)
  {
    uint64_t v44 = a1 + 277;
    do
    {
      uint64_t v21 = *(void *)sub_5231C((uint64_t)a2);
      uint64_t v22 = v21 + 96 * v19;
      unsigned int v23 = a5;
      if (v19)
      {
        *(void *)uint64_t v54 = (((*(void *)(v22 + 32) >> 16) & 0xFFFF0000 | (*(void *)(v22 + 32) << 32) | (2 * ((*(void *)(v22 + 32) & 0xFF000000000000) == 0)))
                        + 4 * (unsigned __int16)*(_DWORD *)(v21 + 96 * v19 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v21 + 96 * v19 + 88) & 1;
        unsigned int v23 = sub_1006200(v51, (uint64_t *)v54);
      }
      BOOL v24 = v19 == sub_EB04A8((uint64_t)a2) - 1 && a6 != -1;
      unsigned int v25 = a6;
      if (!v24)
      {
        uint64_t v26 = v21 + 96 * v19;
        *(void *)uint64_t v54 = (((*(void *)(v26 + 72) >> 16) & 0xFFFF0000 | (*(void *)(v26 + 72) << 32) | (2 * ((*(void *)(v26 + 72) & 0xFF000000000000) == 0)))
                        + (((unint64_t)*(unsigned int *)(v26 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v26 + 88) >> 1) & 1;
        unsigned int v25 = sub_1006200(v51, (uint64_t *)v54);
      }
      sub_1007480((uint64_t)(a1 + 265), v23);
      uint64_t v27 = a1[277];
      unint64_t v28 = (a1[278] - v27) >> 2;
      if (v28 <= v23)
      {
        unint64_t v29 = v23 + 1;
        *(_DWORD *)uint64_t v54 = -1;
        if (v29 <= v28)
        {
          if (v29 < v28) {
            a1[278] = v27 + 4 * v29;
          }
        }
        else
        {
          sub_500DC((uint64_t)v44, v29 - v28, (const float *)v54);
          uint64_t v27 = *v44;
        }
      }
      uint64_t v30 = *(unsigned int *)(v27 + 4 * v23);
      sub_1007480((uint64_t)(a1 + 265), v23);
      if (v30 == 0xFFFFFFFFLL)
      {
LABEL_28:
        sub_1007480((uint64_t)(a1 + 265), v23);
        int v58 = -1;
        long long v31 = *(_OWORD *)(v22 + 16);
        *(_OWORD *)uint64_t v54 = *(_OWORD *)v22;
        *(_OWORD *)&v54[16] = v31;
        long long v32 = *(_OWORD *)(v22 + 32);
        long long v33 = *(_OWORD *)(v22 + 48);
        long long v34 = *(_OWORD *)(v22 + 80);
        long long v56 = *(_OWORD *)(v22 + 64);
        long long v57 = v34;
        *(_OWORD *)&v54[32] = v32;
        long long v55 = v33;
        int v58 = 0;
        sub_10050B4(a1, v23, v25, (long long *)v54, 0, (uint64_t)&v48);
        uint64_t v35 = sub_EAD918((uint64_t)a2);
        uint64_t v36 = *(void *)v48 + 152 * v49;
        uint64_t v37 = *(void *)v35;
        *(_WORD *)(v36 + 144) = *(_WORD *)(v35 + 8);
        *(void *)(v36 + 136) = v37;
        if (v47) {
          sub_32B600(*(void *)v48 + 152 * v49 + 112, &v53);
        }
      }
      else
      {
        while (*(_DWORD *)(a1[280] + 152 * v30) != v25)
        {
          uint64_t v30 = *(unsigned int *)(a1[283] + 4 * v30);
          if (v30 == -1) {
            goto LABEL_28;
          }
        }
        sub_1007480((uint64_t)(a1 + 265), v23);
        uint64_t v38 = (int8x8_t *)sub_EAD918((uint64_t)a2);
        uint64_t v39 = a1[280];
        uint64_t v40 = (int8x8_t *)(v39 + 152 * v30);
        v40[17] = vand_s8(v40[17], *v38);
        v40[18].i8[0] &= v38[1].u8[0];
        v40[18].i8[1] &= v38[1].u8[1];
        if (v47) {
          sub_32B600(v39 + 152 * v30 + 112, &v53);
        }
      }
      ++v19;
    }
    while (v19 != v45);
  }
  if (v47)
  {
    unint64_t v41 = a1[2];
    if (v41 >= a1[3])
    {
      uint64_t v42 = sub_F577B4(v43, a2);
    }
    else
    {
      sub_EA7B04(a1[2], a2);
      uint64_t v42 = v41 + 48;
      a1[2] = v41 + 48;
    }
LABEL_37:
    a1[2] = v42;
  }
}

void sub_10038A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void sub_10038A8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void sub_10038BC(uint64_t a1, long long **a2)
{
  uint64_t v287 = a1;
  uint64_t v2 = *a2;
  v268 = a2[1];
  if (*a2 != v268)
  {
    uint64_t v4 = (char **)(a1 + 2264);
    uint64_t v275 = a1 + 2120;
    long long v276 = (void **)(a1 + 2240);
    long long v278 = (char **)(a1 + 2264);
    while (1)
    {
      unint64_t v294 = (((*((void *)v2 + 4) >> 16) & 0xFFFF0000 | (*((void *)v2 + 4) << 32) | (2
                                                                                         * ((v2[2] & 0xFF000000000000) == 0)))
            + 4 * (unsigned __int16)*((_DWORD *)v2 + 20)) & 0xFFFFFFFFFFFFFFFELL | *((unsigned char *)v2 + 88) & 1;
      sub_1004E9C(&v287, (uint64_t *)&v294, 1, 0, (uint64_t)&v285);
      unint64_t v294 = (((*((void *)v2 + 9) >> 16) & 0xFFFF0000 | (*((void *)v2 + 9) << 32) | (2
                                                                                         * ((*((void *)v2 + 9) & 0xFF000000000000) == 0)))
            + (((unint64_t)*((unsigned int *)v2 + 20) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*((unsigned __int8 *)v2 + 88) >> 1) & 1;
      sub_1004E9C(&v287, (uint64_t *)&v294, 0, 1, (uint64_t)&__p);
      uint64_t v5 = (unsigned int *)__p;
      long long v269 = v286;
      uint64_t v270 = (unsigned int *)v285;
      if (v285 != v286)
      {
        uint64_t v279 = v2;
        if (__p != v284) {
          break;
        }
      }
LABEL_278:
      if (v5)
      {
        uint64_t v284 = v5;
        operator delete(v5);
      }
      if (v285)
      {
        uint64_t v286 = (unsigned int *)v285;
        operator delete(v285);
      }
      v2 += 6;
      if (v2 == v268) {
        return;
      }
    }
    while (1)
    {
      uint64_t v6 = (unsigned int *)__p;
      long long v280 = v284;
      if (__p != v284) {
        break;
      }
LABEL_7:
      if (++v270 == v269)
      {
        uint64_t v5 = (unsigned int *)__p;
        goto LABEL_278;
      }
    }
    unint64_t v7 = *v270;
    unint64_t v277 = (v7 + 1);
    uint64_t v274 = 4 * v277 - 4;
    unint64_t v282 = v7;
    while (1)
    {
      unint64_t v11 = *v6;
      if (v7 != -1 && v11 != -1)
      {
        uint64_t v12 = *(void *)(a1 + 2216);
        if (v7 >= (*(void *)(a1 + 2224) - v12) >> 2)
        {
          exception = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(&v294, "vertex id out of range");
          long long v267 = (void *)sub_2F404((uint64_t)exception, (long long *)&v294);
        }
        uint64_t v13 = *(unsigned int *)(v12 + 4 * v7);
        sub_1007480(v275, v7);
        if (v13 != 0xFFFFFFFFLL)
        {
          while (*((_DWORD *)*v276 + 38 * v13) != v11)
          {
            uint64_t v13 = *(unsigned int *)&(*v4)[4 * v13];
            if (v13 == -1) {
              goto LABEL_20;
            }
          }
          goto LABEL_13;
        }
      }
LABEL_20:
      uint64_t v281 = v6;
      long long v14 = v2[3];
      long long v290 = v2[2];
      long long v291 = v14;
      long long v15 = v2[5];
      long long v292 = v2[4];
      long long v293 = v15;
      long long v16 = v2[1];
      unint64_t v17 = *(_WORD **)(a1 + 2312);
      unint64_t v18 = (uint64_t)(*(void *)(a1 + 2320) - (void)v17) >> 1;
      unint64_t v19 = *(unsigned char **)(a1 + 2224);
      BOOL v20 = *(char **)(a1 + 2216);
      uint64_t v21 = v19 - v20;
      unint64_t v22 = (unint64_t)(v19 - v20) >> 2;
      unint64_t v23 = (v19 - v20) >> 2;
      long long v288 = *v2;
      long long v289 = v16;
      if (v18 < v22 || v23 <= v11) {
        break;
      }
LABEL_81:
      ++v17[v11];
      unint64_t v7 = v282;
      if (v11 <= v282) {
        unint64_t v79 = v282;
      }
      else {
        unint64_t v79 = v11;
      }
      if (v79 < ((unint64_t)v21 >> 2)) {
        goto LABEL_85;
      }
      unint64_t v87 = v21 >> 2;
      unint64_t v88 = (v79 + 1);
      if (v21 >> 2 <= v79)
      {
        unint64_t v126 = v88 - v87;
        if (v88 > v87)
        {
          uint64_t v127 = *(void *)(a1 + 2232);
          if (v126 <= (v127 - (uint64_t)v19) >> 2)
          {
            uint64_t v166 = &v19[4 * v126];
            memset(v19, 255, ((4 * v88 - v21 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            *(void *)(a1 + 2224) = v166;
            goto LABEL_89;
          }
          unint64_t v128 = v127 - (void)v20;
          unint64_t v129 = (v127 - (uint64_t)v20) >> 1;
          if (v129 <= v88) {
            unint64_t v129 = (v79 + 1);
          }
          if (v128 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v130 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v130 = v129;
          }
          if (v130 >> 62) {
            goto LABEL_283;
          }
          unint64_t v131 = (char *)operator new(4 * v130);
          uint64_t v132 = &v131[4 * v87];
          long long v273 = v131;
          memset(v132, 255, ((4 * v88 - v21 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
          if (v19 == v20)
          {
            uint64_t v136 = 4 * v88;
            uint64_t v135 = v273;
          }
          else
          {
            unint64_t v133 = v19 - 4 - v20;
            if (v133 < 0x2C)
            {
              uint64_t v134 = v19;
              uint64_t v136 = 4 * v88;
              uint64_t v135 = v273;
              goto LABEL_274;
            }
            uint64_t v135 = v273;
            if ((unint64_t)(&v19[-v21] - v273) < 0x20)
            {
              uint64_t v134 = v19;
              uint64_t v136 = 4 * v88;
              goto LABEL_274;
            }
            uint64_t v259 = (v133 >> 2) + 1;
            uint64_t v260 = 4 * (v259 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v134 = &v19[-v260];
            v132 -= v260;
            long long v261 = &v273[4 * v87 - 16];
            long long v262 = (long long *)(v19 - 16);
            uint64_t v263 = v259 & 0x7FFFFFFFFFFFFFF8;
            uint64_t v136 = 4 * v88;
            do
            {
              long long v264 = *v262;
              *((_OWORD *)v261 - 1) = *(v262 - 1);
              *(_OWORD *)long long v261 = v264;
              v261 -= 32;
              v262 -= 2;
              v263 -= 8;
            }
            while (v263);
            if (v259 != (v259 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_274:
                int v265 = *((_DWORD *)v134 - 1);
                v134 -= 4;
                *((_DWORD *)v132 - 1) = v265;
                v132 -= 4;
              }
              while (v134 != v20);
            }
          }
          *(void *)(a1 + 2216) = v132;
          *(void *)(a1 + 2224) = &v135[v136];
          *(void *)(a1 + 2232) = &v135[4 * v130];
          uint64_t v4 = v278;
          if (v20) {
            operator delete(v20);
          }
          goto LABEL_89;
        }
        if (v88 < v87) {
          *(void *)(a1 + 2224) = &v20[4 * v88];
        }
      }
LABEL_89:
      int v89 = *(unsigned char **)(a1 + 2296);
      unint64_t v90 = *(unsigned char **)(a1 + 2288);
      uint64_t v91 = v89 - v90;
      unint64_t v92 = (v89 - v90) >> 2;
      unint64_t v93 = v88 - v92;
      if (v88 > v92)
      {
        uint64_t v94 = *(void *)(a1 + 2304);
        if (v93 <= (v94 - (uint64_t)v89) >> 2)
        {
          uint64_t v154 = &v89[4 * v93];
          bzero(*(void **)(a1 + 2296), ((4 * v88 - v91 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
          *(void *)(a1 + 2296) = v154;
          unint64_t v7 = v282;
          goto LABEL_187;
        }
        unint64_t v95 = v94 - (void)v90;
        unint64_t v96 = (v94 - (uint64_t)v90) >> 1;
        if (v96 <= v88) {
          unint64_t v96 = (v79 + 1);
        }
        if (v95 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v97 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v97 = v96;
        }
        if (v97 >> 62) {
          goto LABEL_283;
        }
        unint64_t v98 = operator new(4 * v97);
        unint64_t v272 = v97;
        unsigned long long v99 = &v98[4 * v92];
        bzero(v99, ((4 * v88 - v91 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
        if (v89 == v90)
        {
          uint64_t v101 = 4 * v88;
        }
        else
        {
          unint64_t v100 = v89 - 4 - v90;
          if (v100 < 0x2C)
          {
            uint64_t v101 = 4 * v88;
            goto LABEL_184;
          }
          uint64_t v101 = 4 * v88;
          if ((unint64_t)(v90 - v98) < 0x20) {
            goto LABEL_290;
          }
          uint64_t v167 = (v100 >> 2) + 1;
          uint64_t v168 = 4 * (v167 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v169 = &v89[-v168];
          v99 -= v168;
          uint64_t v170 = &v98[4 * v92 - 16];
          v171 = (long long *)(v89 - 16);
          uint64_t v172 = v167 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v173 = *v171;
            *(v170 - 1) = *(v171 - 1);
            *uint64_t v170 = v173;
            v170 -= 2;
            v171 -= 2;
            v172 -= 8;
          }
          while (v172);
          int v89 = v169;
          if (v167 != (v167 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_290:
            do
            {
LABEL_184:
              int v174 = *((_DWORD *)v89 - 1);
              v89 -= 4;
              *((_DWORD *)v99 - 1) = v174;
              v99 -= 4;
            }
            while (v89 != v90);
          }
        }
        *(void *)(a1 + 2288) = v99;
        *(void *)(a1 + 2296) = &v98[v101];
        *(void *)(a1 + 2304) = &v98[4 * v272];
        uint64_t v4 = v278;
        unint64_t v7 = v282;
        if (v90) {
          operator delete(v90);
        }
        goto LABEL_187;
      }
      unint64_t v7 = v282;
      if (v88 < v92) {
        *(void *)(a1 + 2296) = &v90[4 * v88];
      }
LABEL_187:
      int v175 = *(unsigned char **)(a1 + 2128);
      uint64_t v176 = *(unsigned char **)(a1 + 2120);
      uint64_t v177 = v175 - v176;
      unint64_t v178 = (v175 - v176) >> 2;
      if (v178 > v79) {
        goto LABEL_188;
      }
      unint64_t v200 = v88 - v178;
      if (v88 > v178)
      {
        uint64_t v201 = *(void *)(a1 + 2136);
        if (v200 <= (v201 - (uint64_t)v175) >> 2)
        {
          uint64_t v210 = &v175[4 * v200];
          memset(*(void **)(a1 + 2128), 255, ((4 * v88 - v177 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
          *(void *)(a1 + 2128) = v210;
          goto LABEL_188;
        }
        unint64_t v202 = v201 - (void)v176;
        unint64_t v203 = (v201 - (uint64_t)v176) >> 1;
        if (v203 <= v88) {
          unint64_t v203 = (v79 + 1);
        }
        if (v202 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v204 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v204 = v203;
        }
        if (v204 >> 62) {
          goto LABEL_283;
        }
        long long v205 = operator new(4 * v204);
        uint64_t v206 = &v205[4 * v178];
        memset(v206, 255, ((4 * v88 - v177 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
        if (v175 == v176)
        {
          uint64_t v208 = 4 * v88;
        }
        else
        {
          unint64_t v207 = v175 - 4 - v176;
          if (v207 < 0x2C)
          {
            uint64_t v208 = 4 * v88;
            goto LABEL_232;
          }
          uint64_t v208 = 4 * v88;
          if ((unint64_t)(v176 - v205) < 0x20) {
            goto LABEL_291;
          }
          uint64_t v213 = (v207 >> 2) + 1;
          uint64_t v214 = 4 * (v213 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v215 = &v175[-v214];
          v206 -= v214;
          long long v216 = &v205[4 * v178 - 16];
          uint64_t v217 = (long long *)(v175 - 16);
          uint64_t v218 = v213 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v219 = *v217;
            *(v216 - 1) = *(v217 - 1);
            *long long v216 = v219;
            v216 -= 2;
            v217 -= 2;
            v218 -= 8;
          }
          while (v218);
          int v175 = v215;
          if (v213 != (v213 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_291:
            do
            {
LABEL_232:
              int v220 = *((_DWORD *)v175 - 1);
              v175 -= 4;
              *((_DWORD *)v206 - 1) = v220;
              v206 -= 4;
            }
            while (v175 != v176);
          }
        }
        *(void *)(a1 + 2120) = v206;
        *(void *)(a1 + 2128) = &v205[v208];
        *(void *)(a1 + 2136) = &v205[4 * v204];
        uint64_t v4 = v278;
        unint64_t v7 = v282;
        if (v176) {
          operator delete(v176);
        }
        goto LABEL_188;
      }
      if (v88 < v178) {
        *(void *)(a1 + 2128) = &v176[4 * v88];
      }
LABEL_188:
      long long v179 = *(unsigned char **)(a1 + 2200);
      uint64_t v180 = *(unsigned char **)(a1 + 2192);
      uint64_t v181 = v179 - v180;
      unint64_t v182 = (v179 - v180) >> 2;
      unint64_t v183 = v88 - v182;
      if (v88 <= v182)
      {
        if (v88 < v182) {
          *(void *)(a1 + 2200) = &v180[4 * v88];
        }
      }
      else
      {
        uint64_t v184 = *(void *)(a1 + 2208);
        if (v183 <= (v184 - (uint64_t)v179) >> 2)
        {
          v209 = &v179[4 * v183];
          bzero(*(void **)(a1 + 2200), ((4 * v88 - v181 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
          *(void *)(a1 + 2200) = v209;
        }
        else
        {
          unint64_t v185 = v184 - (void)v180;
          unint64_t v186 = (v184 - (uint64_t)v180) >> 1;
          if (v186 <= v88) {
            unint64_t v186 = v88;
          }
          if (v185 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v187 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v187 = v186;
          }
          if (v187 >> 62) {
            goto LABEL_283;
          }
          long long v188 = operator new(4 * v187);
          uint64_t v189 = &v188[4 * v182];
          uint64_t v190 = 4 * v88;
          bzero(v189, ((v190 - v181 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
          if (v179 != v180)
          {
            unint64_t v191 = v179 - 4 - v180;
            if (v191 < 0x2C) {
              goto LABEL_292;
            }
            if ((unint64_t)(v180 - v188) < 0x20) {
              goto LABEL_292;
            }
            uint64_t v192 = (v191 >> 2) + 1;
            uint64_t v193 = 4 * (v192 & 0x7FFFFFFFFFFFFFF8);
            long long v194 = &v179[-v193];
            v189 -= v193;
            unint64_t v195 = &v188[4 * v182 - 16];
            long long v196 = (long long *)(v179 - 16);
            uint64_t v197 = v192 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v198 = *v196;
              *(v195 - 1) = *(v196 - 1);
              *unint64_t v195 = v198;
              v195 -= 2;
              v196 -= 2;
              v197 -= 8;
            }
            while (v197);
            long long v179 = v194;
            if (v192 != (v192 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_292:
              do
              {
                int v199 = *((_DWORD *)v179 - 1);
                v179 -= 4;
                *((_DWORD *)v189 - 1) = v199;
                v189 -= 4;
              }
              while (v179 != v180);
            }
          }
          *(void *)(a1 + 2192) = v189;
          *(void *)(a1 + 2200) = &v188[v190];
          *(void *)(a1 + 2208) = &v188[4 * v187];
          uint64_t v4 = v278;
          unint64_t v7 = v282;
          if (v180) {
            operator delete(v180);
          }
        }
      }
LABEL_85:
      LODWORD(v294) = v11;
      int v301 = 0;
      long long v297 = v290;
      long long v298 = v291;
      long long v299 = v292;
      long long v300 = v293;
      long long v295 = v288;
      long long v296 = v289;
      uint64_t v303 = 0;
      long long v302 = 0uLL;
      uint64_t v304 = 256;
      uint64_t v80 = *(unsigned char **)(a1 + 2224);
      uint64_t v81 = *(unsigned char **)(a1 + 2216);
      int64_t v82 = v80 - v81;
      unint64_t v83 = (v80 - v81) >> 2;
      __int16 v305 = 0;
      if (v83 <= v7)
      {
        unint64_t v102 = v277 - v83;
        if (v277 <= v83)
        {
          if (v277 < v83) {
            *(void *)(a1 + 2224) = &v81[4 * v277];
          }
        }
        else
        {
          uint64_t v103 = *(void *)(a1 + 2232);
          if (v102 <= (v103 - (uint64_t)v80) >> 2)
          {
            uint64_t v155 = &v80[4 * v102];
            memset(v80, 255, ((v274 - v82) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            *(void *)(a1 + 2224) = v155;
            uint64_t v81 = *(unsigned char **)(a1 + 2216);
          }
          else
          {
            unint64_t v104 = v103 - (void)v81;
            unint64_t v105 = (v103 - (uint64_t)v81) >> 1;
            if (v105 <= v277) {
              unint64_t v105 = v277;
            }
            if (v104 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v106 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v106 = v105;
            }
            if (v106 >> 62) {
LABEL_286:
            }
              sub_188D718();
            uint64_t v107 = operator new(4 * v106);
            uint64_t v108 = &v107[4 * v83];
            memset(v108, 255, ((v274 - v82) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            if (v80 != v81)
            {
              unint64_t v109 = v80 - 4 - v81;
              if (v109 < 0x2C) {
                goto LABEL_293;
              }
              if ((unint64_t)(v81 - v107) < 0x20) {
                goto LABEL_293;
              }
              uint64_t v110 = (v109 >> 2) + 1;
              uint64_t v111 = 4 * (v110 & 0x7FFFFFFFFFFFFFF8);
              unsigned int v112 = &v80[-v111];
              v108 -= v111;
              int v113 = &v107[4 * v83 - 16];
              uint64_t v114 = (long long *)(v80 - 16);
              uint64_t v115 = v110 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v116 = *v114;
                *(v113 - 1) = *(v114 - 1);
                *int v113 = v116;
                v113 -= 2;
                v114 -= 2;
                v115 -= 8;
              }
              while (v115);
              uint64_t v80 = v112;
              if (v110 != (v110 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_293:
                do
                {
                  int v117 = *((_DWORD *)v80 - 1);
                  v80 -= 4;
                  *((_DWORD *)v108 - 1) = v117;
                  v108 -= 4;
                }
                while (v80 != v81);
              }
            }
            *(void *)(a1 + 2216) = v108;
            *(void *)(a1 + 2224) = &v107[4 * v277];
            *(void *)(a1 + 2232) = &v107[4 * v106];
            uint64_t v4 = v278;
            unint64_t v7 = v282;
            if (v81) {
              operator delete(v81);
            }
            uint64_t v81 = *(unsigned char **)(a1 + 2216);
          }
        }
      }
      uint64_t v84 = *(char **)(a1 + 2272);
      unint64_t v85 = *(void *)(a1 + 2280);
      if ((unint64_t)v84 >= v85)
      {
        char v118 = *v4;
        uint64_t v119 = v84 - *v4;
        uint64_t v120 = v119 >> 2;
        unint64_t v121 = (v119 >> 2) + 1;
        if (v121 >> 62) {
          sub_2E00();
        }
        uint64_t v122 = v85 - (void)v118;
        if (v122 >> 1 > v121) {
          unint64_t v121 = v122 >> 1;
        }
        if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v123 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v123 = v121;
        }
        if (v123)
        {
          if (v123 >> 62) {
            goto LABEL_286;
          }
          int v124 = operator new(4 * v123);
          unint64_t v7 = v282;
          char v125 = &v124[4 * v120];
          *char v125 = *(_DWORD *)&v81[4 * v282];
          uint64_t v86 = (uint64_t)(v125 + 1);
          if (v84 == v118) {
            goto LABEL_150;
          }
LABEL_144:
          unint64_t v137 = v84 - 4 - v118;
          if (v137 < 0x2C) {
            goto LABEL_294;
          }
          if ((unint64_t)(v84 - &v124[v119]) < 0x20) {
            goto LABEL_294;
          }
          uint64_t v138 = (v137 >> 2) + 1;
          uint64_t v139 = 4 * (v138 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v140 = &v84[-v139];
          char v125 = (_DWORD *)((char *)v125 - v139);
          uint64_t v141 = &v124[4 * v120 - 16];
          unint64_t v142 = v84 - 16;
          uint64_t v143 = v138 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v144 = *(_OWORD *)v142;
            *(v141 - 1) = *((_OWORD *)v142 - 1);
            *uint64_t v141 = v144;
            v141 -= 2;
            v142 -= 32;
            v143 -= 8;
          }
          while (v143);
          uint64_t v84 = v140;
          if (v138 != (v138 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_294:
            do
            {
              int v145 = *((_DWORD *)v84 - 1);
              v84 -= 4;
              *--char v125 = v145;
            }
            while (v84 != v118);
          }
        }
        else
        {
          int v124 = 0;
          char v125 = (_DWORD *)(4 * v120);
          *(_DWORD *)(4 * v120) = *(_DWORD *)&v81[4 * v7];
          uint64_t v86 = 4 * v120 + 4;
          if (v84 != v118) {
            goto LABEL_144;
          }
        }
LABEL_150:
        *(void *)(a1 + 2264) = v125;
        *(void *)(a1 + 2272) = v86;
        *(void *)(a1 + 2280) = &v124[4 * v123];
        if (v118) {
          operator delete(v118);
        }
        goto LABEL_152;
      }
      *(_DWORD *)uint64_t v84 = *(_DWORD *)&v81[4 * v7];
      uint64_t v86 = (uint64_t)(v84 + 4);
LABEL_152:
      *(void *)(a1 + 2272) = v86;
      unint64_t v146 = *(void *)(a1 + 2248);
      *(_DWORD *)&v81[4 * v7] = 678152731 * ((v146 - *(void *)(a1 + 2240)) >> 3);
      if (v146 >= *(void *)(a1 + 2256))
      {
        uint64_t v152 = sub_100832C(v276, (uint64_t)&v294);
        uint64_t v153 = (void *)v302;
        *(void *)(a1 + 2248) = v152;
        uint64_t v2 = v279;
        uint64_t v6 = v281;
        unint64_t v7 = v282;
        if (v153)
        {
          *((void *)&v302 + 1) = v153;
          operator delete(v153);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v146 = v294;
        uint64_t v147 = (_OWORD *)(v146 + 8);
        *(_DWORD *)(v146 + 104) = v301;
        if (v301 == 1)
        {
          long long v8 = v295;
          long long v9 = v297;
          *(_OWORD *)(v146 + 24) = v296;
          *(_OWORD *)(v146 + 40) = v9;
          *uint64_t v147 = v8;
          uint64_t v2 = v279;
          uint64_t v6 = v281;
        }
        else
        {
          uint64_t v2 = v279;
          uint64_t v6 = v281;
          if (!v301)
          {
            long long v148 = v296;
            *uint64_t v147 = v295;
            *(_OWORD *)(v146 + 24) = v148;
            long long v149 = v297;
            long long v150 = v298;
            long long v151 = v300;
            *(_OWORD *)(v146 + 72) = v299;
            *(_OWORD *)(v146 + 88) = v151;
            *(_OWORD *)(v146 + 40) = v149;
            *(_OWORD *)(v146 + 56) = v150;
          }
        }
        *(void *)(v146 + 112) = 0;
        *(void *)(v146 + 120) = 0;
        *(void *)(v146 + 128) = 0;
        *(_OWORD *)(v146 + 112) = v302;
        *(void *)(v146 + 128) = v303;
        long long v302 = 0uLL;
        uint64_t v303 = 0;
        __int16 v10 = v305;
        *(void *)(v146 + 136) = v304;
        *(_WORD *)(v146 + 144) = v10;
        *(void *)(a1 + 2248) = v146 + 152;
      }
      ++*(_DWORD *)(*(void *)(a1 + 2288) + 4 * v7);
LABEL_13:
      if (++v6 == v280) {
        goto LABEL_7;
      }
    }
    if (v11 < v22)
    {
LABEL_23:
      unint64_t v19 = *(unsigned char **)(a1 + 2224);
      BOOL v20 = *(char **)(a1 + 2216);
      uint64_t v21 = v19 - v20;
      unint64_t v24 = (v19 - v20) >> 2;
      unsigned int v25 = *(unsigned char **)(a1 + 2320);
      unint64_t v17 = *(_WORD **)(a1 + 2312);
      int64_t v26 = v25 - (unsigned char *)v17;
      unint64_t v27 = (v25 - (unsigned char *)v17) >> 1;
      unint64_t v28 = v24 - v27;
      if (v24 <= v27)
      {
        if (v24 < v27) {
          *(void *)(a1 + 2320) = &v17[v24];
        }
      }
      else
      {
        uint64_t v29 = *(void *)(a1 + 2328);
        if (v28 <= (v29 - (uint64_t)v25) >> 1)
        {
          uint64_t v78 = &v25[2 * v28];
          bzero(*(void **)(a1 + 2320), (((v21 >> 1) - v26 - 2) & 0xFFFFFFFFFFFFFFFELL) + 2);
          *(void *)(a1 + 2320) = v78;
        }
        else
        {
          if (v21 < 0) {
            sub_2E00();
          }
          unint64_t v30 = v29 - (void)v17;
          if (v29 - (uint64_t)v17 <= v24) {
            uint64_t v31 = (v19 - v20) >> 2;
          }
          else {
            uint64_t v31 = v29 - (void)v17;
          }
          if (v30 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v32 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v32 = v31;
          }
          if (v32 < 0) {
            goto LABEL_283;
          }
          long long v33 = operator new(2 * v32);
          uint64_t v271 = v32;
          long long v34 = &v33[2 * v27];
          bzero(v34, ((((unint64_t)v21 >> 1) - v26 - 2) & 0xFFFFFFFFFFFFFFFELL) + 2);
          if (v25 != (unsigned char *)v17)
          {
            unint64_t v35 = v25 - 2 - (unsigned char *)v17;
            if (v35 < 0x1E) {
              goto LABEL_295;
            }
            if ((unint64_t)((char *)v17 - v33) < 0x20) {
              goto LABEL_295;
            }
            uint64_t v36 = (v35 >> 1) + 1;
            unint64_t v37 = 2 * (v36 & 0xFFFFFFFFFFFFFFF0);
            uint64_t v38 = &v25[-v37];
            v34 -= v37;
            uint64_t v39 = &v33[2 * v27 - 16];
            uint64_t v40 = (long long *)(v25 - 16);
            unint64_t v41 = v36 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              long long v42 = *v40;
              *(v39 - 1) = *(v40 - 1);
              *uint64_t v39 = v42;
              v39 -= 2;
              v40 -= 2;
              v41 -= 16;
            }
            while (v41);
            unsigned int v25 = v38;
            if (v36 != (v36 & 0xFFFFFFFFFFFFFFF0))
            {
LABEL_295:
              do
              {
                __int16 v43 = *((_WORD *)v25 - 1);
                v25 -= 2;
                *((_WORD *)v34 - 1) = v43;
                v34 -= 2;
              }
              while (v25 != (unsigned char *)v17);
            }
          }
          *(void *)(a1 + 2312) = v34;
          *(void *)(a1 + 2320) = &v33[2 * v24];
          *(void *)(a1 + 2328) = &v33[2 * v271];
          if (v17) {
            operator delete(v17);
          }
        }
        unint64_t v17 = *(_WORD **)(a1 + 2312);
        unint64_t v19 = *(unsigned char **)(a1 + 2224);
        BOOL v20 = *(char **)(a1 + 2216);
        uint64_t v21 = v19 - v20;
      }
      uint64_t v4 = v278;
      goto LABEL_81;
    }
    unint64_t v44 = (v11 + 1);
    if (v23 > v11)
    {
LABEL_43:
      unint64_t v45 = *(unsigned char **)(a1 + 2296);
      unint64_t v46 = *(unsigned char **)(a1 + 2288);
      uint64_t v47 = v45 - v46;
      unint64_t v48 = (v45 - v46) >> 2;
      unint64_t v49 = v44 - v48;
      if (v44 <= v48)
      {
        if (v44 < v48) {
          *(void *)(a1 + 2296) = &v46[4 * v44];
        }
      }
      else
      {
        uint64_t v50 = *(void *)(a1 + 2304);
        if (v49 <= (v50 - (uint64_t)v45) >> 2)
        {
          uint64_t v156 = &v45[4 * v49];
          bzero(*(void **)(a1 + 2296), ((4 * v44 - v47 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
          *(void *)(a1 + 2296) = v156;
          int v65 = *(unsigned char **)(a1 + 2128);
          unint64_t v66 = *(unsigned char **)(a1 + 2120);
          int64_t v67 = v65 - v66;
          unint64_t v68 = (v65 - v66) >> 2;
          if (v68 > v11) {
            goto LABEL_251;
          }
          goto LABEL_165;
        }
        unint64_t v51 = v50 - (void)v46;
        unint64_t v52 = (v50 - (uint64_t)v46) >> 1;
        if (v52 <= v44) {
          unint64_t v52 = (v11 + 1);
        }
        if (v51 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v53 = v52;
        }
        if (v53 >> 62) {
          goto LABEL_283;
        }
        uint64_t v54 = operator new(4 * v53);
        long long v55 = &v54[4 * v48];
        bzero(v55, ((4 * v44 - v47 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
        if (v45 != v46)
        {
          unint64_t v56 = v45 - 4 - v46;
          if (v56 < 0x2C) {
            goto LABEL_296;
          }
          if ((unint64_t)(v46 - v54) < 0x20) {
            goto LABEL_296;
          }
          uint64_t v57 = (v56 >> 2) + 1;
          uint64_t v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
          int v59 = &v45[-v58];
          v55 -= v58;
          unint64_t v60 = &v54[4 * v48 - 16];
          uint64_t v61 = (long long *)(v45 - 16);
          uint64_t v62 = v57 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v63 = *v61;
            *(v60 - 1) = *(v61 - 1);
            *unint64_t v60 = v63;
            v60 -= 2;
            v61 -= 2;
            v62 -= 8;
          }
          while (v62);
          unint64_t v45 = v59;
          if (v57 != (v57 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_296:
            do
            {
              int v64 = *((_DWORD *)v45 - 1);
              v45 -= 4;
              *((_DWORD *)v55 - 1) = v64;
              v55 -= 4;
            }
            while (v45 != v46);
          }
        }
        *(void *)(a1 + 2288) = v55;
        *(void *)(a1 + 2296) = &v54[4 * v44];
        *(void *)(a1 + 2304) = &v54[4 * v53];
        if (v46)
        {
          operator delete(v46);
          int v65 = *(unsigned char **)(a1 + 2128);
          unint64_t v66 = *(unsigned char **)(a1 + 2120);
          int64_t v67 = v65 - v66;
          unint64_t v68 = (v65 - v66) >> 2;
          if (v68 > v11) {
            goto LABEL_251;
          }
          goto LABEL_165;
        }
      }
      int v65 = *(unsigned char **)(a1 + 2128);
      unint64_t v66 = *(unsigned char **)(a1 + 2120);
      int64_t v67 = v65 - v66;
      unint64_t v68 = (v65 - v66) >> 2;
      if (v68 > v11) {
        goto LABEL_251;
      }
LABEL_165:
      unint64_t v157 = v44 - v68;
      if (v44 <= v68)
      {
        if (v44 < v68) {
          *(void *)(a1 + 2128) = &v66[4 * v44];
        }
LABEL_251:
        uint64_t v237 = *(unsigned char **)(a1 + 2200);
        uint64_t v238 = *(unsigned char **)(a1 + 2192);
        uint64_t v239 = v237 - v238;
        unint64_t v240 = (v237 - v238) >> 2;
        unint64_t v241 = v44 - v240;
        if (v44 <= v240)
        {
          if (v44 < v240) {
            *(void *)(a1 + 2200) = &v238[4 * v44];
          }
        }
        else
        {
          uint64_t v242 = *(void *)(a1 + 2208);
          if (v241 <= (v242 - (uint64_t)v237) >> 2)
          {
            unsigned int v258 = &v237[4 * v241];
            bzero(*(void **)(a1 + 2200), ((4 * v44 - v239 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            *(void *)(a1 + 2200) = v258;
          }
          else
          {
            unint64_t v243 = v242 - (void)v238;
            unint64_t v244 = (v242 - (uint64_t)v238) >> 1;
            if (v244 <= v44) {
              unint64_t v244 = (v11 + 1);
            }
            if (v243 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v245 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v245 = v244;
            }
            if (v245 >> 62) {
              goto LABEL_283;
            }
            long long v246 = operator new(4 * v245);
            long long v247 = &v246[4 * v240];
            uint64_t v248 = 4 * v44;
            bzero(v247, ((v248 - v239 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            if (v237 != v238)
            {
              unint64_t v249 = v237 - 4 - v238;
              if (v249 < 0x2C) {
                goto LABEL_297;
              }
              if ((unint64_t)(v238 - v246) < 0x20) {
                goto LABEL_297;
              }
              uint64_t v250 = (v249 >> 2) + 1;
              uint64_t v251 = 4 * (v250 & 0x7FFFFFFFFFFFFFF8);
              long long v252 = &v237[-v251];
              v247 -= v251;
              uint64_t v253 = &v246[4 * v240 - 16];
              long long v254 = (long long *)(v237 - 16);
              uint64_t v255 = v250 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v256 = *v254;
                *(v253 - 1) = *(v254 - 1);
                *uint64_t v253 = v256;
                v253 -= 2;
                v254 -= 2;
                v255 -= 8;
              }
              while (v255);
              uint64_t v237 = v252;
              if (v250 != (v250 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_297:
                do
                {
                  int v257 = *((_DWORD *)v237 - 1);
                  v237 -= 4;
                  *((_DWORD *)v247 - 1) = v257;
                  v247 -= 4;
                }
                while (v237 != v238);
              }
            }
            *(void *)(a1 + 2192) = v247;
            *(void *)(a1 + 2200) = &v246[v248];
            *(void *)(a1 + 2208) = &v246[4 * v245];
            if (v238) {
              operator delete(v238);
            }
          }
        }
        goto LABEL_23;
      }
      uint64_t v158 = *(void *)(a1 + 2136);
      if (v157 <= (v158 - (uint64_t)v65) >> 2)
      {
        uint64_t v212 = &v65[4 * v157];
        memset(v65, 255, ((4 * v44 - v67 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
        *(void *)(a1 + 2128) = v212;
        goto LABEL_251;
      }
      unint64_t v159 = v158 - (void)v66;
      unint64_t v160 = (v158 - (uint64_t)v66) >> 1;
      if (v160 <= v44) {
        unint64_t v160 = (v11 + 1);
      }
      if (v159 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v161 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v161 = v160;
      }
      if (v161 >> 62) {
        goto LABEL_283;
      }
      uint64_t v162 = operator new(4 * v161);
      uint64_t v163 = &v162[4 * v68];
      memset(v163, 255, ((4 * v44 - v67 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      if (v65 == v66)
      {
        uint64_t v165 = 4 * v44;
        goto LABEL_249;
      }
      unint64_t v164 = v65 - 4 - v66;
      if (v164 >= 0x2C)
      {
        uint64_t v165 = 4 * v44;
        if ((unint64_t)(&v65[-v67] - v162) >= 0x20)
        {
          uint64_t v229 = (v164 >> 2) + 1;
          uint64_t v230 = 4 * (v229 & 0x7FFFFFFFFFFFFFF8);
          long long v231 = &v65[-v230];
          v163 -= v230;
          uint64_t v232 = &v162[4 * v68 - 16];
          long long v233 = (long long *)(v65 - 16);
          uint64_t v234 = v229 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v235 = *v233;
            *(v232 - 1) = *(v233 - 1);
            *uint64_t v232 = v235;
            v232 -= 2;
            v233 -= 2;
            v234 -= 8;
          }
          while (v234);
          int v65 = v231;
          if (v229 == (v229 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_249:
            *(void *)(a1 + 2120) = v163;
            *(void *)(a1 + 2128) = &v162[v165];
            *(void *)(a1 + 2136) = &v162[4 * v161];
            if (v66) {
              operator delete(v66);
            }
            goto LABEL_251;
          }
        }
      }
      else
      {
        uint64_t v165 = 4 * v44;
      }
      do
      {
        int v236 = *((_DWORD *)v65 - 1);
        v65 -= 4;
        *((_DWORD *)v163 - 1) = v236;
        v163 -= 4;
      }
      while (v65 != v66);
      goto LABEL_249;
    }
    unint64_t v69 = v44 - v23;
    if (v44 <= v23)
    {
      if (v44 < v23) {
        *(void *)(a1 + 2224) = &v20[4 * v44];
      }
      goto LABEL_43;
    }
    uint64_t v70 = *(void *)(a1 + 2232);
    if (v69 <= (v70 - (uint64_t)v19) >> 2)
    {
      uint64_t v211 = &v19[4 * v69];
      memset(v19, 255, ((4 * v44 - v21 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      *(void *)(a1 + 2224) = v211;
      goto LABEL_43;
    }
    unint64_t v71 = v70 - (void)v20;
    unint64_t v72 = (v70 - (uint64_t)v20) >> 1;
    if (v72 <= v44) {
      unint64_t v72 = (v11 + 1);
    }
    if (v71 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v73 = v72;
    }
    if (v73 >> 62) {
LABEL_283:
    }
      sub_188D718();
    unint64_t v74 = operator new(4 * v73);
    uint64_t v75 = &v74[4 * v23];
    memset(v75, 255, ((4 * v44 - v21 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    if (v19 == v20)
    {
      uint64_t v77 = 4 * v44;
      goto LABEL_242;
    }
    unint64_t v76 = v19 - 4 - v20;
    if (v76 >= 0x2C)
    {
      uint64_t v77 = 4 * v44;
      if ((unint64_t)(v19 - &v74[v21 & 0xFFFFFFFFFFFFFFFCLL]) >= 0x20)
      {
        uint64_t v221 = (v76 >> 2) + 1;
        uint64_t v222 = 4 * (v221 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v223 = &v19[-v222];
        v75 -= v222;
        uint64_t v224 = &v74[4 * v23 - 16];
        uint64_t v225 = (long long *)(v19 - 16);
        uint64_t v226 = v221 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v227 = *v225;
          *(v224 - 1) = *(v225 - 1);
          *uint64_t v224 = v227;
          v224 -= 2;
          v225 -= 2;
          v226 -= 8;
        }
        while (v226);
        unint64_t v19 = v223;
        if (v221 == (v221 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_242:
          *(void *)(a1 + 2216) = v75;
          *(void *)(a1 + 2224) = &v74[v77];
          *(void *)(a1 + 2232) = &v74[4 * v73];
          if (v20) {
            operator delete(v20);
          }
          goto LABEL_43;
        }
      }
    }
    else
    {
      uint64_t v77 = 4 * v44;
    }
    do
    {
      int v228 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *((_DWORD *)v75 - 1) = v228;
      v75 -= 4;
    }
    while (v19 != v20);
    goto LABEL_242;
  }
}

void sub_1004E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004E9C@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  long long v8 = (void *)*a1;
  long long v22 = 0uLL;
  uint64_t v23 = 0;
  if (a3)
  {
    uint64_t v9 = v8[209];
    uint64_t v10 = v8[210];
    while (v9 != v10)
    {
      if (*(void *)(v9 + 88) == *a2) {
        sub_745A4((uint64_t)&v22, (_DWORD *)v9);
      }
      v9 += 168;
    }
  }
  if (a4)
  {
    uint64_t v11 = v8[212];
    uint64_t v12 = v8[213];
    while (v11 != v12)
    {
      if (*(void *)(v11 + 8) == *a2) {
        sub_745A4((uint64_t)&v22, (_DWORD *)v11);
      }
      v11 += 168;
    }
  }
  uint64_t result = sub_F97750((uint64_t)(v8 + 4), a2, v21);
  if (v21[0]) {
    uint64_t result = (uint64_t)sub_745A4((uint64_t)&v22, (_DWORD *)v21[3] + 2);
  }
  if ((void)v22 == *((void *)&v22 + 1))
  {
    uint64_t v14 = (v8[278] - v8[277]) >> 2;
    int v20 = v14;
    sub_EE01BC(v8 + 265, v14);
    sub_EE1844((uint64_t)(v8 + 4), a2, (uint64_t)&v24);
    uint64_t v15 = v25;
    uint64_t v16 = *(void *)(v24 + 8);
    if (v26)
    {
      uint64_t v17 = v16 + 16 * v25;
      *(void *)uint64_t v17 = *a2;
      *(_DWORD *)(v17 + 8) = -1;
    }
    *(_DWORD *)(v16 + 16 * v15 + 8) = v14;
    sub_A4710((uint64_t)(v8 + 100), a2);
    if ((*a2 & 0xFFFC) != 0)
    {
      unint64_t v19 = (HIDWORD(*a2) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32) & 0xFFFEFFFFFFFFFFFFLL | ((((unint64_t)*a2 >> 1) & 1) << 48)) ^ 0x1000000000000;
      sub_F57008((uint64_t)(v8 + 199), 1);
      if (sub_F57414((uint64_t)(v8 + 199), &v19) == -1) {
        sub_F57530((uint64_t)(v8 + 199), &v19, v18, &v24);
      }
    }
    uint64_t result = (uint64_t)sub_745A4((uint64_t)&v22, &v20);
    *(_OWORD *)a5 = v22;
  }
  else
  {
    *(_OWORD *)a5 = v22;
  }
  *(void *)(a5 + 16) = v23;
  return result;
}

void sub_1005088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10050B4(uint64_t *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, long long *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v10 = *((_DWORD *)a4 + 24);
  if (v10 == 1)
  {
    unsigned int v23 = a3;
    int v30 = 1;
    long long v14 = a4[1];
    long long v24 = *a4;
    long long v25 = v14;
    long long v26 = a4[2];
  }
  else
  {
    unsigned int v23 = a3;
    if (v10)
    {
      int v30 = v10;
    }
    else
    {
      int v30 = 0;
      long long v11 = a4[3];
      long long v26 = a4[2];
      long long v27 = v11;
      long long v12 = a4[5];
      long long v28 = a4[4];
      long long v29 = v12;
      long long v13 = a4[1];
      long long v24 = *a4;
      long long v25 = v13;
    }
  }
  uint64_t v15 = a3;
  long long __p = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 256;
  __int16 v35 = 0;
  uint64_t v16 = a1 + 265;
  uint64_t v17 = a1[289];
  uint64_t v18 = a1[278] - a1[277];
  if ((a1[290] - v17) >> 1 < (unint64_t)((unint64_t)v18 >> 2)
    || v18 >> 2 <= (unint64_t)a3)
  {
    sub_EE01BC(a1 + 265, a3);
    unint64_t v19 = (a1[278] - a1[277]) >> 2;
    __int16 v22 = 0;
    uint64_t v17 = a1[289];
    unint64_t v20 = (a1[290] - v17) >> 1;
    if (v19 <= v20)
    {
      if (v19 < v20) {
        a1[290] = v17 + 2 * v19;
      }
    }
    else
    {
      uint64_t v21 = a1 + 289;
      sub_1007B0C((uint64_t)v21, v19 - v20, &v22);
      uint64_t v17 = *v21;
    }
  }
  ++*(_WORD *)(v17 + 2 * v15);
  if (a5) {
    sub_1007D74(v16, a2, (int *)&v23, a6);
  }
  else {
    sub_1006330(v16, a2, (uint64_t)&v23, a6);
  }
  if (__p)
  {
    uint64_t v32 = __p;
    operator delete(__p);
  }
}

void sub_1005288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10052A4(uint64_t a1, unsigned int *a2, __n128 *a3)
{
  sub_1006F50(a1 + 824, a2, (uint64_t)&v8);
  uint64_t v5 = v8;
  if (v10)
  {
    uint64_t v6 = *(void *)(v8 + 8) + 24 * v9;
    *(_DWORD *)uint64_t v6 = *a2;
    *(void *)(v6 + 8) = 0xFFFFLL;
    *(void *)(v6 + 16) = 0;
  }
  __n128 result = *a3;
  *(__n128 *)(*(void *)(v5 + 8) + 24 * v9 + 8) = *a3;
  return result;
}

unint64_t sub_1005324@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unint64_t result = sub_EB04A8(a2);
  unint64_t v6 = result;
  if (result)
  {
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v25 = (uint64_t)(a1 + 265);
    do
    {
      uint64_t v9 = *(void *)sub_5231C(a2);
      if (v8)
      {
        uint64_t v10 = v9 + 96 * v8;
        unint64_t v27 = (((*(void *)(v10 + 32) >> 16) & 0xFFFF0000 | (*(void *)(v10 + 32) << 32) | (2
                                                                                              * ((*(void *)(v10 + 32) & 0xFF000000000000) == 0)))
             + 4 * (unsigned __int16)*(_DWORD *)(v10 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v10 + 88) & 1;
        sub_EE03E4((uint64_t)(a1 + 4), (uint64_t *)&v27, &v28);
        if ((void)v28)
        {
          uint64_t v11 = *(unsigned int *)(v29 + 8);
          goto LABEL_19;
        }
      }
      else
      {
        long long v12 = (unsigned int *)a1[209];
        long long v13 = (unsigned int *)a1[210];
        if (v12 != v13)
        {
          uint64_t v14 = (uint64_t)(v12 + 24);
          while (1)
          {
            if (*(void *)(v14 - 8) == sub_EAFECC(a2))
            {
              uint64_t v16 = sub_69134(a2);
              if (sub_EB45A4(v14, v16)) {
                break;
              }
            }
            uint64_t v15 = (unsigned int *)(v14 + 72);
            v14 += 168;
            if (v15 == v13) {
              goto LABEL_16;
            }
          }
          long long v13 = (unsigned int *)(v14 - 96);
LABEL_16:
          if (v13 != (unsigned int *)a1[210])
          {
            uint64_t v11 = *v13;
            goto LABEL_19;
          }
        }
      }
      uint64_t v11 = 0xFFFFFFFFLL;
LABEL_19:
      if (v8 == sub_EB04A8(a2) - 1)
      {
        uint64_t v17 = (int *)a1[212];
        uint64_t v18 = (int *)a1[213];
        if (v17 != v18)
        {
          uint64_t v19 = (uint64_t)(v17 + 4);
          while (1)
          {
            if (*(void *)(v19 - 8) == sub_EAFF14(a2))
            {
              uint64_t v21 = sub_EADAD0(a2);
              if (sub_EB45A4(v19, v21)) {
                break;
              }
            }
            unint64_t v20 = (int *)(v19 + 152);
            v19 += 168;
            if (v20 == v18) {
              goto LABEL_26;
            }
          }
          uint64_t v18 = (int *)(v19 - 16);
LABEL_26:
          if (v18 != (int *)a1[213])
          {
            int v22 = *v18;
            if (v11 == 0xFFFFFFFFLL) {
              goto LABEL_3;
            }
            goto LABEL_33;
          }
        }
      }
      else
      {
        uint64_t v23 = v9 + 96 * v8;
        unint64_t v27 = (((*(void *)(v23 + 72) >> 16) & 0xFFFF0000 | (*(void *)(v23 + 72) << 32) | (2
                                                                                              * ((*(void *)(v23 + 72) & 0xFF000000000000) == 0)))
             + (((unint64_t)*(unsigned int *)(v23 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v23 + 88) >> 1) & 1;
        sub_EE03E4((uint64_t)(a1 + 4), (uint64_t *)&v27, &v28);
        if ((void)v28)
        {
          int v22 = *(_DWORD *)(v29 + 8);
          if (v11 == 0xFFFFFFFFLL) {
            goto LABEL_3;
          }
          goto LABEL_33;
        }
      }
      int v22 = -1;
      if (v11 == 0xFFFFFFFFLL)
      {
LABEL_3:
        if (v22 != -1 || v8 == sub_EB04A8(a2) - 1)
        {
          *(void *)&long long v28 = v7;
          *((void *)&v28 + 1) = v8 + 1;
          sub_3BFF8((char **)a3, &v28);
        }
        goto LABEL_5;
      }
LABEL_33:
      unint64_t result = v8;
      if (v22 == -1) {
        goto LABEL_6;
      }
      sub_1007480(v25, v11);
      uint64_t v24 = *(unsigned int *)(a1[277] + 4 * v11);
      sub_1007480(v25, v11);
      if (v24 == 0xFFFFFFFFLL)
      {
LABEL_37:
        *(void *)&long long v28 = v8;
        *((void *)&v28 + 1) = v8 + 1;
        sub_3BFF8((char **)a3, &v28);
      }
      else
      {
        while (*(_DWORD *)(a1[280] + 152 * v24) != v22)
        {
          uint64_t v24 = *(unsigned int *)(a1[283] + 4 * v24);
          if (v24 == -1) {
            goto LABEL_37;
          }
        }
      }
LABEL_5:
      unint64_t result = v7;
LABEL_6:
      ++v8;
      unint64_t v7 = result;
    }
    while (v8 != v6);
  }
  return result;
}

void sub_1005650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  long long v12 = *(void **)a11;
  if (*(void *)a11)
  {
    *(void *)(a11 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005690(uint64_t a1)
{
  return ((*(void *)(a1 + 2224) - *(void *)(a1 + 2216)) >> 2);
}

uint64_t sub_10056A4@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a1;
  uint64_t v5 = a1 + 2120;
  uint64_t v6 = *a2;
  sub_1007480(a1 + 2120, *a2);
  uint64_t v7 = v3 + 2240;
  uint64_t v8 = v3 + 2264;
  LODWORD(v3) = *(_DWORD *)(*(void *)(v3 + 2216) + 4 * v6);
  uint64_t result = sub_1007480(v5, v6);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v8;
  *(_DWORD *)(a3 + 16) = v3;
  *(void *)(a3 + 24) = v7;
  *(void *)(a3 + 32) = v8;
  *(_DWORD *)(a3 + 40) = -1;
  return result;
}

uint64_t sub_100571C(void *a1, unsigned int *a2)
{
  uint64_t v2 = *a2;
  if (v2 >= ((a1[278] - a1[277]) >> 2)) {
    return 0;
  }
  else {
    return *(unsigned int *)(a1[286] + 4 * v2);
  }
}

uint64_t sub_100574C(void *a1, unsigned int *a2)
{
  unsigned int v2 = *a2;
  if (v2 >= ((a1[278] - a1[277]) >> 2)) {
    return 0;
  }
  else {
    return *(unsigned __int16 *)sub_1005794(a1 + 265, v2);
  }
}

uint64_t sub_1005794(void *a1, unsigned int a2)
{
  uint64_t v3 = a2;
  sub_1007480((uint64_t)a1, a2);
  uint64_t v4 = a1[24];
  if ((a1[25] - v4) >> 1 < (unint64_t)((a1[13] - a1[12]) >> 2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v8, "no or incomplete vertex data stored");
    uint64_t v7 = (void *)sub_2F404((uint64_t)exception, &v8);
  }
  return v4 + 2 * v3;
}

void sub_1005834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005864(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  unint64_t v4 = 265 * ((~v3 + (v3 << 21)) ^ ((unint64_t)(~v3 + (v3 << 21)) >> 24));
  unint64_t v5 = 2147483649u * ((21 * (v4 ^ (v4 >> 14))) ^ ((21 * (v4 ^ (v4 >> 14))) >> 28));
  uint64_t v6 = a1 + 48 * (((BYTE1(v5) ^ BYTE2(v5)) ^ BYTE3(v5)) & 0xF);
  uint64_t v7 = v6 + 824;
  unint64_t v8 = v5 >> 7;
  uint64_t v9 = *(void *)(v6 + 848);
  uint64_t v10 = *(void *)(v6 + 824);
  uint64_t v11 = 0x101010101010101 * (v5 & 0x7F);
  uint64_t result = 0xFFFFLL;
  while (1)
  {
    unint64_t v13 = v8 & v9;
    uint64_t v14 = *(void *)(v10 + v13);
    unint64_t v15 = ((v14 ^ v11) - 0x101010101010101) & ~(v14 ^ v11) & 0x8080808080808080;
    if (v15) {
      break;
    }
LABEL_5:
    if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0) {
      return result;
    }
    v2 += 8;
    unint64_t v8 = v2 + v13;
  }
  while (1)
  {
    unint64_t v16 = (v13 + (__clz(__rbit64(v15)) >> 3)) & v9;
    uint64_t v17 = *(void *)(v7 + 8) + 24 * v16;
    if (*(_DWORD *)v17 == v3) {
      break;
    }
    v15 &= v15 - 1;
    if (!v15) {
      goto LABEL_5;
    }
  }
  if (v9 == v16) {
    return 0xFFFFLL;
  }
  else {
    return *(void *)(v17 + 8);
  }
}

uint64_t sub_1005964(uint64_t a1)
{
  return a1 + 2120;
}

uint64_t sub_100596C(uint64_t a1)
{
  return a1 + 1672;
}

uint64_t sub_1005974(uint64_t a1)
{
  return a1 + 1696;
}

BOOL sub_100597C(void *a1, uint64_t *a2, int a3, int a4)
{
  sub_EE03E4((uint64_t)(a1 + 4), a2, v17);
  if (v17[0] && *(_DWORD *)(v17[3] + 8) != -1) {
    return 1;
  }
  if (!a3 || (v9 = a1[209], uint64_t v10 = a1[210], v9 == v10))
  {
LABEL_8:
    if (!a4) {
      return 0;
    }
    uint64_t v11 = a1[212];
    uint64_t v12 = a1[213];
    if (v11 == v12)
    {
      return 0;
    }
    else
    {
      uint64_t v13 = *a2;
      uint64_t v14 = v11 + 168;
      do
      {
        uint64_t v15 = *(void *)(v14 - 160);
        BOOL result = v15 == v13;
        BOOL v16 = v15 == v13 || v14 == v12;
        v14 += 168;
      }
      while (!v16);
    }
  }
  else
  {
    while (*(void *)(v9 + 88) != *a2)
    {
      v9 += 168;
      if (v9 == v10) {
        goto LABEL_8;
      }
    }
    return 1;
  }
  return result;
}

BOOL sub_1005A88(uint64_t a1, void *a2)
{
  uint64_t v5 = (*a2 >> 16) & 0xFFFF0000 | (*a2 << 32) | (2 * ((*a2 & 0xFF000000000000) == 0));
  sub_EE03E4(a1 + 32, &v5, v6);
  return v6[0] || sub_F57414(a1 + 1592, a2) != -1;
}

uint64_t sub_1005B14(uint64_t a1, unsigned int *a2)
{
  return *(void *)sub_1005B38((void *)(a1 + 800), *a2);
}

uint64_t sub_1005B38(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 3);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 8 * a2;
}

void sub_1005C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

BOOL sub_1005D48(uint64_t a1)
{
  return ((*(void *)(a1 + 2224) - *(void *)(a1 + 2216)) & 0x3FFFFFFFCLL) == 0;
}

unint64_t sub_1005D60(unint64_t result)
{
  unint64_t v1 = result;
  if (result >= 0x10000)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v8, v1);
    uint64_t v3 = std::string::insert(&v8, 0, "narrowing ");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    uint64_t v5 = std::string::append(&v9, " failed");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v5->__r_.__value_.__r.__words[2];
    long long v10 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    long long v7 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  return (unsigned __int16)result;
}

void sub_1005E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_1005EB4(void *a1, unint64_t a2, unint64_t a3, int a4, int a5)
{
  if (!a5) {
    goto LABEL_14;
  }
  sub_1007530((uint64_t)a1, a2, a3);
  std::string v9 = (unsigned char *)a1[9];
  if (a2 <= (uint64_t)(a1[11] - (void)v9) >> 2) {
    goto LABEL_14;
  }
  if (a2 >> 62) {
    goto LABEL_42;
  }
  long long v10 = (unsigned char *)a1[10];
  std::string::size_type v11 = (char *)operator new(4 * a2);
  uint64_t v12 = v10 - v9;
  long long v13 = &v11[(v10 - v9) & 0xFFFFFFFFFFFFFFFCLL];
  uint64_t v14 = v13;
  if (v10 != v9)
  {
    if ((unint64_t)(v12 - 4) < 0x2C)
    {
      uint64_t v14 = &v11[(v10 - v9) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_11:
        int v23 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v14 - 1) = v23;
        v14 -= 4;
      }
      while (v10 != v9);
      goto LABEL_12;
    }
    uint64_t v14 = &v11[(v10 - v9) & 0xFFFFFFFFFFFFFFFCLL];
    if (v10 - v11 - (v12 & 0xFFFFFFFFFFFFFFFCLL) < 0x20) {
      goto LABEL_11;
    }
    uint64_t v15 = v12 >> 2;
    unint64_t v16 = ((unint64_t)(v12 - 4) >> 2) + 1;
    uint64_t v17 = 4 * (v16 & 0x7FFFFFFFFFFFFFF8);
    std::string v18 = &v10[-v17];
    uint64_t v14 = &v13[-v17];
    long long v19 = &v11[4 * v15 - 16];
    std::string::size_type v20 = (long long *)(v10 - 16);
    uint64_t v21 = v16 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v22 = *v20;
      *((_OWORD *)v19 - 1) = *(v20 - 1);
      *(_OWORD *)long long v19 = v22;
      v19 -= 32;
      v20 -= 2;
      v21 -= 8;
    }
    while (v21);
    long long v10 = v18;
    if (v16 != (v16 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_11;
    }
  }
LABEL_12:
  a1[9] = v14;
  a1[10] = v13;
  a1[11] = &v11[4 * a2];
  if (v9) {
    operator delete(v9);
  }
LABEL_14:
  sub_1007530((uint64_t)(a1 + 12), a2, a3);
  uint64_t v24 = (unsigned char *)a1[21];
  if (a2 <= (uint64_t)(a1[23] - (void)v24) >> 2) {
    goto LABEL_26;
  }
  if (a2 >> 62) {
LABEL_42:
  }
    sub_2E00();
  uint64_t v25 = (unsigned char *)a1[22];
  long long v26 = (char *)operator new(4 * a2);
  uint64_t v27 = v25 - v24;
  long long v28 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFFCLL];
  uint64_t v29 = v28;
  if (v25 == v24) {
    goto LABEL_24;
  }
  if ((unint64_t)(v27 - 4) < 0x2C)
  {
    uint64_t v29 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFFCLL];
    do
    {
LABEL_23:
      int v38 = *((_DWORD *)v25 - 1);
      v25 -= 4;
      *((_DWORD *)v29 - 1) = v38;
      v29 -= 4;
    }
    while (v25 != v24);
    goto LABEL_24;
  }
  uint64_t v29 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFFCLL];
  if (v25 - v26 - (v27 & 0xFFFFFFFFFFFFFFFCLL) < 0x20) {
    goto LABEL_23;
  }
  uint64_t v30 = v27 >> 2;
  unint64_t v31 = ((unint64_t)(v27 - 4) >> 2) + 1;
  uint64_t v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
  uint64_t v33 = &v25[-v32];
  uint64_t v29 = &v28[-v32];
  uint64_t v34 = &v26[4 * v30 - 16];
  __int16 v35 = (long long *)(v25 - 16);
  uint64_t v36 = v31 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v37 = *v35;
    *((_OWORD *)v34 - 1) = *(v35 - 1);
    *(_OWORD *)uint64_t v34 = v37;
    v34 -= 32;
    v35 -= 2;
    v36 -= 8;
  }
  while (v36);
  uint64_t v25 = v33;
  if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_23;
  }
LABEL_24:
  a1[21] = v29;
  a1[22] = v28;
  a1[23] = &v26[4 * a2];
  if (v24) {
    operator delete(v24);
  }
LABEL_26:
  if (!a4) {
    return;
  }
  uint64_t v39 = (unsigned char *)a1[24];
  if (a2 <= (uint64_t)(a1[26] - (void)v39) >> 1) {
    return;
  }
  if ((a2 & 0x8000000000000000) != 0) {
    sub_2E00();
  }
  uint64_t v40 = (unsigned char *)a1[25];
  size_t v41 = 2 * a2;
  long long v42 = (char *)operator new(v41);
  uint64_t v43 = v40 - v39;
  unint64_t v44 = &v42[(v40 - v39) & 0xFFFFFFFFFFFFFFFELL];
  unint64_t v45 = v44;
  if (v40 != v39)
  {
    if ((unint64_t)(v43 - 2) < 0x1E)
    {
      unint64_t v45 = &v42[(v40 - v39) & 0xFFFFFFFFFFFFFFFELL];
      do
      {
LABEL_36:
        __int16 v54 = *((_WORD *)v40 - 1);
        v40 -= 2;
        *((_WORD *)v45 - 1) = v54;
        v45 -= 2;
      }
      while (v40 != v39);
      goto LABEL_37;
    }
    unint64_t v45 = &v42[(v40 - v39) & 0xFFFFFFFFFFFFFFFELL];
    if (v40 - v42 - (v43 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
      goto LABEL_36;
    }
    uint64_t v46 = v43 >> 1;
    unint64_t v47 = ((unint64_t)(v43 - 2) >> 1) + 1;
    unint64_t v48 = 2 * (v47 & 0xFFFFFFFFFFFFFFF0);
    unint64_t v49 = &v40[-v48];
    unint64_t v45 = &v44[-v48];
    uint64_t v50 = &v42[2 * v46 - 16];
    unint64_t v51 = (long long *)(v40 - 16);
    unint64_t v52 = v47 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v53 = *v51;
      *((_OWORD *)v50 - 1) = *(v51 - 1);
      *(_OWORD *)uint64_t v50 = v53;
      v50 -= 32;
      v51 -= 2;
      v52 -= 16;
    }
    while (v52);
    uint64_t v40 = v49;
    if (v47 != (v47 & 0xFFFFFFFFFFFFFFF0)) {
      goto LABEL_36;
    }
  }
LABEL_37:
  a1[24] = v45;
  a1[25] = v44;
  a1[26] = &v42[v41];
  if (v39)
  {
    operator delete(v39);
  }
}

unint64_t sub_1006200(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (uint64_t)(*a1 + 4);
  sub_F97750(v4, a2, v11);
  if (v11[0]) {
    return *((unsigned int *)v11[3] + 2);
  }
  unint64_t v5 = (unint64_t)(v3[278] - v3[277]) >> 2;
  sub_EE01BC(v3 + 265, v5);
  sub_EE1844(v4, a2, (uint64_t)&v12);
  uint64_t v7 = v13;
  uint64_t v8 = *(void *)(v12 + 8);
  if (v14) {
    *(void *)(v8 + 16 * v13) = *a2;
  }
  *(_DWORD *)(v8 + 16 * v7 + 8) = v5;
  sub_A4710((uint64_t)(v3 + 100), a2);
  if ((*a2 & 0xFFFC) == 0) {
    return v5;
  }
  unint64_t v10 = (HIDWORD(*a2) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32) & 0xFFFEFFFFFFFFFFFFLL | ((((unint64_t)*a2 >> 1) & 1) << 48)) ^ 0x1000000000000;
  sub_F57008((uint64_t)(v3 + 199), 1);
  if (sub_F57414((uint64_t)(v3 + 199), &v10) != -1) {
    return v5;
  }
  sub_F57530((uint64_t)(v3 + 199), &v10, v9, &v12);
  return v5;
}

void sub_1006330(uint64_t *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v5 = a2;
  if (*(_DWORD *)a3 > a2) {
    a2 = *(_DWORD *)a3;
  }
  sub_EE01BC(a1, a2);
  uint64_t v8 = (long long *)(a3 + 8);
  int v9 = *(_DWORD *)(a3 + 104);
  unsigned int v20 = *(_DWORD *)a3;
  int v27 = v9;
  if (v9 == 1)
  {
    long long v16 = *(_OWORD *)(a3 + 24);
    long long v21 = *v8;
    long long v22 = v16;
    long long v23 = *(_OWORD *)(a3 + 40);
    long long __p = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    char v14 = *(unsigned char **)(a3 + 112);
    uint64_t v17 = *(unsigned char **)(a3 + 120);
    int64_t v15 = v17 - v14;
    if (v17 == v14) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (!v9)
  {
    long long v10 = *(_OWORD *)(a3 + 56);
    long long v23 = *(_OWORD *)(a3 + 40);
    long long v24 = v10;
    long long v11 = *(_OWORD *)(a3 + 88);
    long long v25 = *(_OWORD *)(a3 + 72);
    long long v26 = v11;
    long long v12 = *(_OWORD *)(a3 + 24);
    long long v21 = *v8;
    long long v22 = v12;
  }
  long long __p = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  char v14 = *(unsigned char **)(a3 + 112);
  uint64_t v13 = *(unsigned char **)(a3 + 120);
  int64_t v15 = v13 - v14;
  if (v13 != v14)
  {
LABEL_9:
    if (v15 < 0) {
      sub_2E00();
    }
    std::string v18 = (char *)operator new(v15);
    long long v19 = &v18[2 * (v15 >> 1)];
    long long __p = v18;
    uint64_t v30 = v19;
    memcpy(v18, v14, v15);
    uint64_t v29 = v19;
  }
LABEL_11:
  uint64_t v31 = *(void *)(a3 + 136);
  __int16 v32 = *(_WORD *)(a3 + 144);
  sub_10081A0((uint64_t)(a1 + 12), v5, (uint64_t)&v20, a4);
  if (__p)
  {
    uint64_t v29 = __p;
    operator delete(__p);
  }
  ++*(_DWORD *)(a1[21] + 4 * v5);
}

void sub_10064BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_10064DC(void *a1, uint64_t a2, uint64_t a3)
{
  long long v6 = (void *)*a1;
  v16[0] = sub_EAFF14(a2);
  uint64_t v7 = sub_EADAD0(a2);
  unint64_t v14 = sub_EAFECC(a3);
  uint64_t v8 = sub_69134(a3);
  sub_10247B8((uint64_t)v15, -1, v16, v7, &v14, v8);
  if (v6[241] == v6[240]
    || (v9 = sub_1006680(v6 + 215, (uint64_t)v15), uint64_t v10 = v6[264], v9 == -1)
    || (long long v11 = (_DWORD *)(v10 + 168 * v9), v11 == (_DWORD *)(v10 + 168 * v6[242])))
  {
    LODWORD(v15[0]) = (v6[278] - v6[277]) >> 2;
    sub_A4710((uint64_t)(v6 + 100), (void *)v15 + 1);
    sub_745A4(a1[1], v15);
    sub_EE01BC(v6 + 265, v15[0]);
    sub_1006780((uint64_t)(v6 + 215), 1);
    if (sub_1006680(v6 + 215, (uint64_t)v15) == -1) {
      *(void *)&double result = sub_1006DE8(v6 + 215, v15, v12, v16).n128_u64[0];
    }
  }
  else
  {
    sub_745A4(a1[1], v11);
  }
  return result;
}

uint64_t sub_1006680(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[27] - 1;
  unint64_t v5 = sub_102488C((uint64_t)a1, a2) & v4;
  if (!sub_1024810((uint64_t)(a1 + 28), a1[49] + 168 * v5))
  {
    uint64_t v6 = -1;
    uint64_t v7 = 1;
    do
    {
      if (a1[25] && sub_1024810((uint64_t)(a1 + 4), a1[49] + 168 * v5))
      {
        if (v6 == -1) {
          uint64_t v6 = v5;
        }
      }
      else if (sub_1024810(a2, a1[49] + 168 * v5))
      {
        return v5;
      }
      unint64_t v5 = (v5 + v7++) & v4;
    }
    while (!sub_1024810((uint64_t)(a1 + 28), a1[49] + 168 * v5));
  }
  return -1;
}

uint64_t sub_1006780(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t result = sub_1006B80(a1);
    unint64_t v5 = *(void *)(a1 + 208);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v5 = *(void *)(a1 + 208);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  unint64_t v6 = *(void *)(a1 + 216);
  unint64_t v7 = v5 + a2;
  if (v6 < 4 || v7 > *(void *)a1)
  {
    float v8 = *(float *)(a1 + 16);
    unint64_t v9 = vcvts_n_u32_f32(v8, 2uLL);
    unint64_t v10 = 4;
    if (v7 >= v9)
    {
      while ((v10 & 0x8000000000000000) == 0)
      {
        v10 *= 2;
        if (v7 < (unint64_t)(float)(v8 * (float)v10)) {
          goto LABEL_8;
        }
      }
LABEL_27:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
LABEL_8:
    if (v10 > v6)
    {
      unint64_t v11 = *(void *)(a1 + 200);
      unint64_t v12 = v5 - v11 + a2;
      unint64_t v13 = 4;
      if (v6 > 4) {
        goto LABEL_11;
      }
LABEL_10:
      if (v12 >= (unint64_t)(float)(v8 * (float)v13))
      {
LABEL_11:
        while ((v13 & 0x8000000000000000) == 0)
        {
          v13 *= 2;
          if (v13 >= v6) {
            goto LABEL_10;
          }
        }
        goto LABEL_27;
      }
      unint64_t v14 = v7 - (v11 >> 2);
      unint64_t v15 = 4;
      if (v14 >= v9)
      {
        while ((v15 & 0x8000000000000000) == 0)
        {
          v15 *= 2;
          if (v14 < (unint64_t)(float)(v8 * (float)v15)) {
            goto LABEL_19;
          }
        }
        goto LABEL_27;
      }
LABEL_19:
      if (v13 <= 0x7FFFFFFFFFFFFFFELL
        && v13 < v15
        && v12 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v13)))
      {
        v13 *= 2;
      }
      sub_F2E638((uint64_t)&v46, a1, v13);
      uint64_t v83 = *(void *)(a1 + 192);
      unint64_t v16 = v60;
      *(void *)(a1 + 192) = v58;
      uint64x2_t v18 = *(uint64x2_t *)a1;
      long long v17 = *(_OWORD *)(a1 + 16);
      long long v19 = v47;
      *(uint64x2_t *)a1 = v46;
      *(_OWORD *)(a1 + 16) = v19;
      uint64x2_t v46 = v18;
      long long v47 = v17;
      long long v20 = *(_OWORD *)(a1 + 176);
      long long v81 = *(_OWORD *)(a1 + 160);
      long long v82 = v20;
      long long v21 = *(_OWORD *)(a1 + 112);
      long long v77 = *(_OWORD *)(a1 + 96);
      long long v78 = v21;
      long long v22 = *(_OWORD *)(a1 + 144);
      long long v79 = *(_OWORD *)(a1 + 128);
      long long v80 = v22;
      long long v23 = *(_OWORD *)(a1 + 48);
      long long v73 = *(_OWORD *)(a1 + 32);
      long long v74 = v23;
      long long v24 = *(_OWORD *)(a1 + 80);
      long long v75 = *(_OWORD *)(a1 + 64);
      long long v76 = v24;
      long long v25 = v57;
      *(_OWORD *)(a1 + 160) = v56;
      *(_OWORD *)(a1 + 176) = v25;
      long long v26 = v53;
      *(_OWORD *)(a1 + 96) = v52;
      *(_OWORD *)(a1 + 112) = v26;
      long long v27 = v55;
      *(_OWORD *)(a1 + 128) = v54;
      *(_OWORD *)(a1 + 144) = v27;
      long long v28 = v49;
      *(_OWORD *)(a1 + 32) = v48;
      *(_OWORD *)(a1 + 48) = v28;
      long long v29 = v51;
      *(_OWORD *)(a1 + 64) = v50;
      *(_OWORD *)(a1 + 80) = v29;
      long long v56 = v81;
      long long v57 = v82;
      long long v30 = v59;
      long long v59 = *(_OWORD *)(a1 + 200);
      unint64_t v31 = *(void *)(a1 + 216);
      *(void *)(a1 + 216) = v16;
      uint64_t v32 = v83;
      long long v52 = v77;
      long long v53 = v78;
      long long v54 = v79;
      long long v55 = v80;
      long long v48 = v73;
      long long v49 = v74;
      long long v50 = v75;
      long long v51 = v76;
      *(_OWORD *)(a1 + 200) = v30;
      uint64_t v58 = v32;
      unint64_t v60 = v31;
      sub_1024750((uint64_t)&v73);
      long long v33 = *(_OWORD *)(a1 + 368);
      long long v81 = *(_OWORD *)(a1 + 352);
      long long v82 = v33;
      uint64_t v34 = *(void **)(a1 + 392);
      uint64_t v83 = *(void *)(a1 + 384);
      long long v35 = *(_OWORD *)(a1 + 304);
      long long v77 = *(_OWORD *)(a1 + 288);
      long long v78 = v35;
      long long v36 = *(_OWORD *)(a1 + 336);
      long long v79 = *(_OWORD *)(a1 + 320);
      long long v80 = v36;
      long long v37 = *(_OWORD *)(a1 + 240);
      long long v73 = *(_OWORD *)(a1 + 224);
      long long v74 = v37;
      long long v38 = *(_OWORD *)(a1 + 272);
      long long v75 = *(_OWORD *)(a1 + 256);
      long long v76 = v38;
      long long v39 = v70;
      *(_OWORD *)(a1 + 352) = v69;
      *(_OWORD *)(a1 + 368) = v39;
      long long v40 = v66;
      *(_OWORD *)(a1 + 288) = v65;
      *(_OWORD *)(a1 + 304) = v40;
      long long v41 = v68;
      *(_OWORD *)(a1 + 320) = v67;
      *(_OWORD *)(a1 + 336) = v41;
      long long v42 = v62;
      *(_OWORD *)(a1 + 224) = v61;
      *(_OWORD *)(a1 + 240) = v42;
      long long v43 = v64;
      *(_OWORD *)(a1 + 256) = v63;
      *(_OWORD *)(a1 + 272) = v43;
      long long v69 = v81;
      long long v70 = v82;
      unint64_t v44 = v72;
      *(void *)(a1 + 384) = v71;
      *(void *)(a1 + 392) = v44;
      long long v65 = v77;
      long long v66 = v78;
      long long v67 = v79;
      long long v68 = v80;
      long long v61 = v73;
      long long v62 = v74;
      long long v63 = v75;
      long long v64 = v76;
      uint64_t v71 = v83;
      unint64_t v72 = v34;
      *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 216))));
      *(unsigned char *)(a1 + 24) = 0;
      uint64x2_t v46 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v47, (float)v60)));
      BYTE8(v47) = 0;
      if (v34) {
        free(v34);
      }
      return 1;
    }
  }
  return result;
}

void sub_1006B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  if (a58) {
    free(a58);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006B30(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1006B44(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1006B58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1006B6C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B80(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 208) - *(void *)(a1 + 200);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 216), v5 < 0x21))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    float v6 = (float)v2;
    do
    {
      unint64_t v7 = v5;
      v5 >>= 1;
    }
    while (v7 >= 0x42 && (float)(*(float *)(a1 + 20) * (float)v5) > v6);
    sub_F2E638((uint64_t)&v38, a1, v5);
    uint64_t v75 = *(void *)(a1 + 192);
    unint64_t v8 = v52;
    *(void *)(a1 + 192) = v50;
    uint64x2_t v10 = *(uint64x2_t *)a1;
    long long v9 = *(_OWORD *)(a1 + 16);
    long long v11 = v39;
    *(uint64x2_t *)a1 = v38;
    *(_OWORD *)(a1 + 16) = v11;
    uint64x2_t v38 = v10;
    long long v39 = v9;
    long long v12 = *(_OWORD *)(a1 + 176);
    long long v73 = *(_OWORD *)(a1 + 160);
    long long v74 = v12;
    long long v13 = *(_OWORD *)(a1 + 112);
    long long v69 = *(_OWORD *)(a1 + 96);
    long long v70 = v13;
    long long v14 = *(_OWORD *)(a1 + 144);
    long long v71 = *(_OWORD *)(a1 + 128);
    long long v72 = v14;
    long long v15 = *(_OWORD *)(a1 + 48);
    long long v65 = *(_OWORD *)(a1 + 32);
    long long v66 = v15;
    long long v16 = *(_OWORD *)(a1 + 80);
    long long v67 = *(_OWORD *)(a1 + 64);
    long long v68 = v16;
    long long v17 = v49;
    *(_OWORD *)(a1 + 160) = v48;
    *(_OWORD *)(a1 + 176) = v17;
    long long v18 = v45;
    *(_OWORD *)(a1 + 96) = v44;
    *(_OWORD *)(a1 + 112) = v18;
    long long v19 = v47;
    *(_OWORD *)(a1 + 128) = v46;
    *(_OWORD *)(a1 + 144) = v19;
    long long v20 = v41;
    *(_OWORD *)(a1 + 32) = v40;
    *(_OWORD *)(a1 + 48) = v20;
    long long v21 = v43;
    *(_OWORD *)(a1 + 64) = v42;
    *(_OWORD *)(a1 + 80) = v21;
    long long v48 = v73;
    long long v49 = v74;
    long long v22 = v51;
    long long v51 = *(_OWORD *)(a1 + 200);
    unint64_t v23 = *(void *)(a1 + 216);
    *(void *)(a1 + 216) = v8;
    uint64_t v24 = v75;
    long long v44 = v69;
    long long v45 = v70;
    long long v46 = v71;
    long long v47 = v72;
    long long v40 = v65;
    long long v41 = v66;
    long long v42 = v67;
    long long v43 = v68;
    *(_OWORD *)(a1 + 200) = v22;
    uint64_t v50 = v24;
    unint64_t v52 = v23;
    sub_1024750((uint64_t)&v65);
    long long v25 = *(_OWORD *)(a1 + 368);
    long long v73 = *(_OWORD *)(a1 + 352);
    long long v74 = v25;
    long long v26 = *(void **)(a1 + 392);
    uint64_t v75 = *(void *)(a1 + 384);
    long long v27 = *(_OWORD *)(a1 + 304);
    long long v69 = *(_OWORD *)(a1 + 288);
    long long v70 = v27;
    long long v28 = *(_OWORD *)(a1 + 336);
    long long v71 = *(_OWORD *)(a1 + 320);
    long long v72 = v28;
    long long v29 = *(_OWORD *)(a1 + 240);
    long long v65 = *(_OWORD *)(a1 + 224);
    long long v66 = v29;
    long long v30 = *(_OWORD *)(a1 + 272);
    long long v67 = *(_OWORD *)(a1 + 256);
    long long v68 = v30;
    long long v31 = v62;
    *(_OWORD *)(a1 + 352) = v61;
    *(_OWORD *)(a1 + 368) = v31;
    long long v32 = v58;
    *(_OWORD *)(a1 + 288) = v57;
    *(_OWORD *)(a1 + 304) = v32;
    long long v33 = v60;
    *(_OWORD *)(a1 + 320) = v59;
    *(_OWORD *)(a1 + 336) = v33;
    long long v34 = v54;
    *(_OWORD *)(a1 + 224) = v53;
    *(_OWORD *)(a1 + 240) = v34;
    long long v35 = v56;
    *(_OWORD *)(a1 + 256) = v55;
    *(_OWORD *)(a1 + 272) = v35;
    long long v61 = v73;
    long long v62 = v74;
    long long v36 = v64;
    *(void *)(a1 + 384) = v63;
    *(void *)(a1 + 392) = v36;
    long long v57 = v69;
    long long v58 = v70;
    long long v59 = v71;
    long long v60 = v72;
    long long v53 = v65;
    long long v54 = v66;
    long long v55 = v67;
    long long v56 = v68;
    uint64_t v63 = v75;
    long long v64 = v26;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 216))));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v38 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v39, (float)v52)));
    BYTE8(v39) = 0;
    if (v26) {
      free(v26);
    }
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_1006DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  if (a58) {
    free(a58);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1006DE8@<Q0>(void *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = a1[25];
  uint64_t v5 = a1[26];
  if ((unint64_t)(v5 - v6) >= 0x186186186186186)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2E18(exception, "insert overflow");
  }
  if (!v6) {
    goto LABEL_7;
  }
  if (!sub_1024810((uint64_t)(a1 + 4), a1[49] + 168 * a3))
  {
    uint64_t v5 = a1[26];
LABEL_7:
    a1[26] = v5 + 1;
    goto LABEL_10;
  }
  if (a1[25])
  {
    sub_1024810((uint64_t)(a1 + 4), a1[49] + 168 * a3);
    uint64_t v10 = a1[25] - 1;
  }
  else
  {
    uint64_t v10 = -1;
  }
  a1[25] = v10;
LABEL_10:
  uint64_t v11 = a1[49] + 168 * a3;
  long long v12 = *a2;
  long long v13 = a2[2];
  *(_OWORD *)(v11 + 16) = a2[1];
  *(_OWORD *)(v11 + 32) = v13;
  *(_OWORD *)uint64_t v11 = v12;
  long long v14 = a2[3];
  long long v15 = a2[4];
  long long v16 = a2[6];
  *(_OWORD *)(v11 + 80) = a2[5];
  *(_OWORD *)(v11 + 96) = v16;
  *(_OWORD *)(v11 + 48) = v14;
  *(_OWORD *)(v11 + 64) = v15;
  __n128 result = (__n128)a2[7];
  long long v18 = a2[8];
  long long v19 = a2[9];
  *(void *)(v11 + 160) = *((void *)a2 + 20);
  *(_OWORD *)(v11 + 128) = v18;
  *(_OWORD *)(v11 + 144) = v19;
  *(__n128 *)(v11 + 112) = result;
  uint64_t v20 = a1[49];
  uint64_t v21 = v20 + 168 * a3;
  uint64_t v22 = v20 + 168 * a1[27];
  *a4 = a1;
  a4[1] = v21;
  a4[2] = v22;
  return result;
}

void sub_1006F3C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_1006F50@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = 0;
  uint64_t v5 = *a2;
  unint64_t v6 = 265 * ((~v5 + (v5 << 21)) ^ ((unint64_t)(~v5 + (v5 << 21)) >> 24));
  unint64_t v7 = 2147483649u * ((21 * (v6 ^ (v6 >> 14))) ^ ((21 * (v6 ^ (v6 >> 14))) >> 28));
  unint64_t v8 = (uint64_t *)(a1 + 48 * (((BYTE1(v7) ^ BYTE2(v7)) ^ BYTE3(v7)) & 0xF));
  unint64_t v9 = v7 >> 7;
  uint64_t v10 = v8[3];
  while (1)
  {
    unint64_t v11 = v9 & v10;
    uint64_t v12 = *(void *)(*v8 + v11);
    unint64_t v13 = ((v12 ^ (0x101010101010101 * (v7 & 0x7F))) - 0x101010101010101) & ~(v12 ^ (0x101010101010101
                                                                                       * (v7 & 0x7F))) & 0x8080808080808080;
    if (v13) {
      break;
    }
LABEL_5:
    if ((v12 & (~v12 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = sub_1007070(v8, v7);
      *(void *)a3 = v8;
      *(void *)(a3 + 8) = result;
      *(unsigned char *)(a3 + 16) = 1;
      return result;
    }
    v4 += 8;
    unint64_t v9 = v4 + v11;
  }
  while (1)
  {
    unint64_t result = (v11 + (__clz(__rbit64(v13)) >> 3)) & v10;
    if (*(_DWORD *)(v8[1] + 24 * result) == v5) {
      break;
    }
    v13 &= v13 - 1;
    if (!v13) {
      goto LABEL_5;
    }
  }
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = result;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

unint64_t sub_1007070(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = *a1;
  unint64_t v6 = v4 & (a2 >> 7);
  unint64_t v7 = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    uint64_t v8 = 8;
    do
    {
      unint64_t v6 = (v6 + v8) & v4;
      v8 += 8;
      unint64_t v7 = *(void *)(v5 + v6) & (~*(void *)(v5 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  unint64_t result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v4;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v5 + result) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      sub_1007168((uint64_t)a1);
      unint64_t result = sub_2D7FC4(a1, a2);
      uint64_t v5 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v5 + result) == 128);
  *(unsigned char *)(v5 + result) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (result - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  return result;
}

void sub_1007168(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    unint64_t v2 = (unsigned char *)(&def_332C + 1);
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    unint64_t v2 = (char *)((2 * v1) | 1);
LABEL_4:
    sub_F2E030((char **)a1, v2);
    return;
  }
  sub_1007198(a1);
}

uint64_t sub_1007198(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_28;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *unint64_t v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (v13)
  {
    for (unint64_t i = 0; i != v13; ++i)
    {
      long long v17 = *(int8x16_t **)result;
      if (*(unsigned __int8 *)(*(void *)result + i) == 254)
      {
        uint64_t v18 = *(unsigned int *)(*(void *)(result + 8) + 24 * i);
        unint64_t v19 = 265 * ((~v18 + (v18 << 21)) ^ ((unint64_t)(~v18 + (v18 << 21)) >> 24));
        unint64_t v20 = 2147483649u * ((21 * (v19 ^ (v19 >> 14))) ^ ((21 * (v19 ^ (v19 >> 14))) >> 28));
        unint64_t v21 = v13 & (v20 >> 7);
        unint64_t v22 = *(uint64_t *)((unsigned char *)v17->i64 + v21) & (~*(uint64_t *)((char *)v17->i64 + v21) << 7) & 0x8080808080808080;
        if (v22)
        {
          unint64_t v15 = v13 & (v20 >> 7);
        }
        else
        {
          uint64_t v23 = 8;
          unint64_t v15 = v13 & (v20 >> 7);
          do
          {
            unint64_t v15 = (v15 + v23) & v13;
            v23 += 8;
            unint64_t v22 = *(uint64_t *)((unsigned char *)v17->i64 + v15) & (~*(uint64_t *)((char *)v17->i64 + v15) << 7) & 0x8080808080808080;
          }
          while (!v22);
        }
        unint64_t v16 = (v15 + (__clz(__rbit64(v22)) >> 3)) & v13;
        if ((((v16 - v21) ^ (i - v21)) & v13) > 7)
        {
          int v24 = v17->u8[v16];
          v17->i8[v16] = v20 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (v16 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v20 & 0x7F;
          uint64_t v25 = *(void *)(result + 8);
          if (v24 == 128)
          {
            uint64_t v26 = v25 + 24 * v16;
            long long v27 = (long long *)(v25 + 24 * i);
            long long v28 = *v27;
            *(void *)(v26 + 16) = *((void *)v27 + 2);
            *(_OWORD *)uint64_t v26 = v28;
            *(unsigned char *)(*(void *)result + i) = 0x80;
            *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
          }
          else
          {
            long long v29 = (long long *)(v25 + 24 * i);
            long long v30 = *v29;
            uint64_t v31 = *((void *)v29 + 2);
            uint64_t v32 = 24 * v16;
            long long v33 = (long long *)(v25 + 24 * v16);
            uint64_t v34 = *((void *)v33 + 2);
            long long *v29 = *v33;
            *((void *)v29 + 2) = v34;
            uint64_t v35 = *(void *)(result + 8) + v32;
            *(_OWORD *)uint64_t v35 = v30;
            *(void *)(v35 + 16) = v31;
            --i;
          }
        }
        else
        {
          v17->i8[i] = v20 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v20 & 0x7F;
        }
      }
      uint64_t v13 = *(void *)(result + 24);
    }
    uint64_t v36 = i - (i >> 3);
    BOOL v37 = i == 7;
    uint64_t v38 = 6;
    if (!v37) {
      uint64_t v38 = v36;
    }
  }
  else
  {
    uint64_t v38 = 0;
  }
  *(void *)(result + 40) = v38 - *(void *)(result + 16);
  return result;
}

uint64_t sub_1007480(uint64_t result, unsigned int a2)
{
  if ((uint64_t)(*(void *)(result + 104) - *(void *)(result + 96)) >> 2 <= (unint64_t)a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "vertex id out of range");
    uint64_t v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return result;
}

void sub_1007500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007530(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(unsigned char **)a1;
  uint64_t v6 = *(unsigned char **)(a1 + 8);
  uint64_t v7 = (uint64_t)&v6[-*(void *)a1];
  uint64_t v8 = v7 >> 2;
  if (v7 >> 2 >= a2 || a2 <= (uint64_t)(*(void *)(a1 + 16) - (void)v5) >> 2) {
    goto LABEL_14;
  }
  if (a2 >> 62) {
    goto LABEL_30;
  }
  uint64_t v9 = 4 * a2;
  uint64_t v10 = (char *)operator new(4 * a2);
  int8x16_t v11 = &v10[4 * v8];
  int8x16_t v12 = v11;
  if (v6 != v5)
  {
    unint64_t v13 = v6 - v5 - 4;
    if (v13 < 0x2C)
    {
      int8x16_t v12 = &v10[4 * v8];
      do
      {
LABEL_11:
        int v21 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *((_DWORD *)v12 - 1) = v21;
        v12 -= 4;
      }
      while (v6 != v5);
      goto LABEL_12;
    }
    int8x16_t v12 = &v10[4 * v8];
    if ((unint64_t)(v6 - v10 - v7) < 0x20) {
      goto LABEL_11;
    }
    uint64_t v14 = (v13 >> 2) + 1;
    uint64_t v15 = 4 * (v14 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v16 = &v6[-v15];
    int8x16_t v12 = &v11[-v15];
    long long v17 = &v10[4 * v8 - 16];
    uint64_t v18 = (long long *)(v6 - 16);
    uint64_t v19 = v14 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v20 = *v18;
      *((_OWORD *)v17 - 1) = *(v18 - 1);
      *(_OWORD *)long long v17 = v20;
      v17 -= 32;
      v18 -= 2;
      v19 -= 8;
    }
    while (v19);
    uint64_t v6 = v16;
    if (v14 != (v14 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_11;
    }
  }
LABEL_12:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v11;
  *(void *)(a1 + 16) = &v10[v9];
  if (v5) {
    operator delete(v5);
  }
LABEL_14:
  if (0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3) >= a3) {
    return;
  }
  sub_1007798((char **)(a1 + 24), a3);
  unint64_t v22 = *(unsigned char **)(a1 + 48);
  if (a3 <= (uint64_t)(*(void *)(a1 + 64) - (void)v22) >> 2) {
    return;
  }
  if (a3 >> 62) {
LABEL_30:
  }
    sub_2E00();
  uint64_t v23 = *(unsigned char **)(a1 + 56);
  size_t v24 = 4 * a3;
  uint64_t v25 = (char *)operator new(v24);
  uint64_t v26 = v23 - v22;
  long long v27 = &v25[(v23 - v22) & 0xFFFFFFFFFFFFFFFCLL];
  long long v28 = v27;
  if (v23 == v22) {
    goto LABEL_25;
  }
  if ((unint64_t)(v26 - 4) < 0x2C)
  {
    long long v28 = &v25[(v23 - v22) & 0xFFFFFFFFFFFFFFFCLL];
    do
    {
LABEL_24:
      int v37 = *((_DWORD *)v23 - 1);
      v23 -= 4;
      *((_DWORD *)v28 - 1) = v37;
      v28 -= 4;
    }
    while (v23 != v22);
    goto LABEL_25;
  }
  long long v28 = &v25[(v23 - v22) & 0xFFFFFFFFFFFFFFFCLL];
  if ((unint64_t)(v23 - &v25[v26 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20) {
    goto LABEL_24;
  }
  uint64_t v29 = v26 >> 2;
  unint64_t v30 = ((unint64_t)(v26 - 4) >> 2) + 1;
  uint64_t v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
  uint64_t v32 = &v23[-v31];
  long long v28 = &v27[-v31];
  long long v33 = &v25[4 * v29 - 16];
  uint64_t v34 = (long long *)(v23 - 16);
  uint64_t v35 = v30 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v36 = *v34;
    *((_OWORD *)v33 - 1) = *(v34 - 1);
    *(_OWORD *)long long v33 = v36;
    v33 -= 32;
    v34 -= 2;
    v35 -= 8;
  }
  while (v35);
  uint64_t v23 = v32;
  if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_24;
  }
LABEL_25:
  *(void *)(a1 + 48) = v28;
  *(void *)(a1 + 56) = v27;
  *(void *)(a1 + 64) = &v25[v24];
  if (v22)
  {
    operator delete(v22);
  }
}

void sub_1007798(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0x86BCA1AF286BCA1BLL * ((a1[2] - *a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x1AF286BCA1AF287) {
    sub_2E00();
  }
  long long v4 = a1[1];
  uint64_t v5 = 152 * a2;
  uint64_t v6 = (char *)operator new(152 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_17;
  }
  uint64_t v9 = 0;
  do
  {
    uint64_t v15 = &v8[v9];
    *((_DWORD *)v15 - 38) = *(_DWORD *)&v4[v9 - 152];
    unint64_t v16 = &v8[v9 - 144];
    long long v17 = (long long *)&v4[v9 - 144];
    int v18 = *(_DWORD *)&v4[v9 - 48];
    *((_DWORD *)v15 - 12) = v18;
    if (v18 == 1)
    {
      long long v10 = *v17;
      long long v11 = *(_OWORD *)&v4[v9 - 112];
      *(_OWORD *)&v8[v9 - 128] = *(_OWORD *)&v4[v9 - 128];
      *(_OWORD *)&v8[v9 - 112] = v11;
      *(_OWORD *)unint64_t v16 = v10;
    }
    else if (!v18)
    {
      long long v19 = *(_OWORD *)&v4[v9 - 128];
      *(_OWORD *)unint64_t v16 = *v17;
      *(_OWORD *)&v8[v9 - 128] = v19;
      long long v20 = *(_OWORD *)&v4[v9 - 112];
      long long v21 = *(_OWORD *)&v4[v9 - 96];
      long long v22 = *(_OWORD *)&v4[v9 - 64];
      *(_OWORD *)&v8[v9 - 80] = *(_OWORD *)&v4[v9 - 80];
      *(_OWORD *)&v8[v9 - 64] = v22;
      *(_OWORD *)&v8[v9 - 112] = v20;
      *(_OWORD *)&v8[v9 - 96] = v21;
    }
    int8x16_t v12 = &v8[v9];
    unint64_t v13 = &v4[v9];
    *(_OWORD *)(v12 - 40) = *(_OWORD *)&v4[v9 - 40];
    *((void *)v12 - 3) = *(void *)&v4[v9 - 24];
    *((void *)v13 - 5) = 0;
    *((void *)v13 - 4) = 0;
    *((void *)v13 - 3) = 0;
    uint64_t v14 = *(void *)&v4[v9 - 16];
    *((_WORD *)v12 - 4) = *(_WORD *)&v4[v9 - 8];
    *((void *)v12 - 2) = v14;
    v9 -= 152;
  }
  while (&v4[v9] != v2);
  uint64_t v23 = *a1;
  uint64_t v2 = a1[1];
  *a1 = &v8[v9];
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v23)
  {
    do
    {
      size_t v24 = (void *)*((void *)v2 - 5);
      if (v24)
      {
        *((void *)v2 - 4) = v24;
        operator delete(v24);
      }
      v2 -= 152;
    }
    while (v2 != v23);
    uint64_t v2 = v23;
  }
  if (v2)
  {
LABEL_17:
    operator delete(v2);
  }
}

uint64_t sub_1007944(uint64_t *a1, int *a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  unint64_t v7 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x186186186186186) {
    sub_2E00();
  }
  if (0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3) > v8) {
    unint64_t v8 = 0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[2] - *a1) >> 3) >= 0xC30C30C30C30C3) {
    unint64_t v14 = 0x186186186186186;
  }
  else {
    unint64_t v14 = v8;
  }
  if (v14)
  {
    if (v14 > 0x186186186186186) {
      sub_188D718();
    }
    uint64_t v15 = (char *)operator new(168 * v14);
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v16 = (uint64_t)&v15[168 * v7];
  sub_10247B8(v16, *a2, a3, a4, a5, a6);
  uint64_t v17 = v16 + 168;
  long long v19 = (char *)*a1;
  int v18 = (char *)a1[1];
  if (v18 != (char *)*a1)
  {
    do
    {
      long long v20 = *(_OWORD *)(v18 - 168);
      long long v21 = *(_OWORD *)(v18 - 152);
      *(_OWORD *)(v16 - 136) = *(_OWORD *)(v18 - 136);
      *(_OWORD *)(v16 - 152) = v21;
      *(_OWORD *)(v16 - 168) = v20;
      long long v22 = *(_OWORD *)(v18 - 120);
      long long v23 = *(_OWORD *)(v18 - 104);
      long long v24 = *(_OWORD *)(v18 - 88);
      *(_OWORD *)(v16 - 72) = *(_OWORD *)(v18 - 72);
      *(_OWORD *)(v16 - 88) = v24;
      *(_OWORD *)(v16 - 104) = v23;
      *(_OWORD *)(v16 - 120) = v22;
      long long v25 = *(_OWORD *)(v18 - 56);
      long long v26 = *(_OWORD *)(v18 - 40);
      long long v27 = *(_OWORD *)(v18 - 24);
      *(void *)(v16 - 8) = *((void *)v18 - 1);
      *(_OWORD *)(v16 - 24) = v27;
      *(_OWORD *)(v16 - 40) = v26;
      *(_OWORD *)(v16 - 56) = v25;
      v16 -= 168;
      v18 -= 168;
    }
    while (v18 != v19);
    int v18 = (char *)*a1;
  }
  *a1 = v16;
  a1[1] = v17;
  a1[2] = (uint64_t)&v15[168 * v14];
  if (v18) {
    operator delete(v18);
  }
  return v17;
}

void sub_1007AF4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007B0C(uint64_t a1, unint64_t a2, const __int16 *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v8 = (__int16 *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 1)
  {
    if (a2)
    {
      unint64_t v16 = (a2 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 2 * a2 > (unint64_t)a3) {
        goto LABEL_45;
      }
      unint64_t v17 = v16 + 1;
      unint64_t v8 = (__int16 *)(v7 + 2 * (v17 & 0xFFFFFFFFFFFFFFF0));
      int16x8_t v18 = vld1q_dup_s16(a3);
      long long v19 = (int16x8_t *)(v7 + 16);
      unint64_t v20 = v17 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v19[-1] = v18;
        int16x8_t *v19 = v18;
        v19 += 2;
        v20 -= 16;
      }
      while (v20);
      if (v17 != (v17 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_45:
        do
          *v8++ = *a3;
        while (v8 != (__int16 *)(v7 + 2 * a2));
      }
      unint64_t v8 = (__int16 *)(v7 + 2 * a2);
    }
    *(void *)(a1 + 8) = v8;
  }
  else
  {
    uint64_t v9 = *(__int16 **)a1;
    uint64_t v10 = v7 - *(void *)a1;
    uint64_t v11 = v10 >> 1;
    uint64_t v12 = (v10 >> 1) + a2;
    if (v12 < 0) {
      sub_2E00();
    }
    unint64_t v13 = v6 - (void)v9;
    if (v13 > v12) {
      uint64_t v12 = v13;
    }
    if (v13 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 < 0) {
        sub_188D718();
      }
      uint64_t v15 = (char *)operator new(2 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v21 = (unint64_t)&v15[2 * v11];
    long long v22 = (__int16 *)(v21 + 2 * a2);
    unint64_t v23 = (a2 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    long long v24 = (__int16 *)v21;
    if (v23 < 0x17) {
      goto LABEL_46;
    }
    if (v21 < (unint64_t)(a3 + 1))
    {
      long long v24 = (__int16 *)&v15[2 * v11];
      if (&v15[2 * a2 + v10] > (char *)a3) {
        goto LABEL_46;
      }
    }
    unint64_t v25 = v23 + 1;
    long long v24 = (__int16 *)(v21 + 2 * (v25 & 0xFFFFFFFFFFFFFFF0));
    int16x8_t v26 = vld1q_dup_s16(a3);
    long long v27 = (int16x8_t *)&v15[2 * v11 + 16];
    unint64_t v28 = v25 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v27[-1] = v26;
      int16x8_t *v27 = v26;
      v27 += 2;
      v28 -= 16;
    }
    while (v28);
    if (v25 != (v25 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_46:
      do
        *v24++ = *a3;
      while (v24 != v22);
    }
    if ((__int16 *)v7 != v9)
    {
      unint64_t v29 = v7 - (void)v9 - 2;
      if (v29 < 0x1E) {
        goto LABEL_47;
      }
      if (v7 - (unint64_t)&v15[v10] < 0x20) {
        goto LABEL_47;
      }
      uint64_t v30 = (v29 >> 1) + 1;
      unint64_t v31 = 2 * (v30 & 0xFFFFFFFFFFFFFFF0);
      unint64_t v8 = (__int16 *)(v7 - v31);
      v21 -= v31;
      uint64_t v32 = &v15[2 * v11 - 16];
      long long v33 = (long long *)(v7 - 16);
      unint64_t v34 = v30 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        long long v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)uint64_t v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 16;
      }
      while (v34);
      if (v30 != (v30 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_47:
        do
        {
          __int16 v36 = *--v8;
          *(_WORD *)(v21 - 2) = v36;
          v21 -= 2;
        }
        while (v8 != v9);
      }
    }
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = v22;
    *(void *)(a1 + 16) = &v15[2 * v14];
    if (v9)
    {
      operator delete(v9);
    }
  }
}

void sub_1007D74(uint64_t *a1@<X0>, unsigned int a2@<W1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8 = a2;
  uint64_t v9 = a1 + 12;
  if (a2 < ((unint64_t)(a1[13] - a1[12]) >> 2))
  {
    int v10 = *a3;
    sub_1007480((uint64_t)a1, a2);
    uint64_t v11 = a1[12];
    unint64_t v12 = (a1[13] - v11) >> 2;
    if (v12 <= v8)
    {
      unint64_t v13 = a2 + 1;
      int v56 = -1;
      if (v13 <= v12)
      {
        if (v13 < v12) {
          a1[13] = v11 + 4 * v13;
        }
      }
      else
      {
        sub_500DC((uint64_t)v9, v13 - v12, (const float *)&v56);
        uint64_t v11 = *v9;
      }
    }
    uint64_t v14 = *(unsigned int *)(v11 + 4 * v8);
    sub_1007480((uint64_t)a1, v8);
    long long v55 = a1 + 15;
    uint64_t v15 = a1 + 18;
    uint64_t v16 = 0xFFFFFFFFLL;
    if (v14 != 0xFFFFFFFFLL)
    {
      uint64_t v16 = 0xFFFFFFFFLL;
      while (*(_DWORD *)(*v55 + 152 * v14) != v10)
      {
        uint64_t v14 = *(unsigned int *)(*v15 + 4 * v14);
        if (v14 == -1) {
          goto LABEL_16;
        }
      }
      uint64_t v16 = v14;
    }
LABEL_16:
    sub_1007480((uint64_t)a1, v8);
    uint64_t v17 = a1[12];
    unint64_t v18 = (a1[13] - v17) >> 2;
    if (v18 <= v8)
    {
      unint64_t v19 = a2 + 1;
      int v56 = -1;
      if (v19 <= v18)
      {
        if (v19 < v18) {
          a1[13] = v17 + 4 * v19;
        }
      }
      else
      {
        sub_500DC((uint64_t)v9, v19 - v18, (const float *)&v56);
      }
    }
    sub_1007480((uint64_t)a1, v8);
    if (v16 == 0xFFFFFFFFLL)
    {
      sub_1006330(a1, v8, (uint64_t)a3, a4);
      return;
    }
    uint64_t v53 = a4;
    uint64_t v20 = *v55;
    uint64_t v21 = *v55 + 152 * v16;
    int v56 = *(_DWORD *)v21;
    long long v22 = (long long *)(v21 + 8);
    int v23 = *(_DWORD *)(v21 + 104);
    int v60 = v23;
    int v52 = v56;
    if (v23 == 1)
    {
      long long v28 = *v22;
      long long v29 = *(_OWORD *)(v21 + 40);
      *(_OWORD *)&v57[16] = *(_OWORD *)(v21 + 24);
      *(_OWORD *)&v57[32] = v29;
      *(_OWORD *)long long v57 = v28;
    }
    else if (!v23)
    {
      long long v24 = *(_OWORD *)(v21 + 24);
      *(_OWORD *)long long v57 = *v22;
      *(_OWORD *)&v57[16] = v24;
      long long v25 = *(_OWORD *)(v21 + 40);
      long long v26 = *(_OWORD *)(v21 + 56);
      long long v27 = *(_OWORD *)(v21 + 88);
      v59[0] = *(_OWORD *)(v21 + 72);
      v59[1] = v27;
      *(_OWORD *)&v57[32] = v25;
      long long v58 = v26;
    }
    uint64_t v54 = v20;
    uint64_t v30 = v20 + 152 * v16;
    long long v61 = 0;
    int64x2_t v62 = 0uLL;
    long long v33 = *(unsigned char **)(v30 + 112);
    uint64_t v32 = (void *)(v30 + 112);
    unint64_t v31 = v33;
    unint64_t v34 = (unsigned char *)v32[1];
    int64_t v35 = v34 - v33;
    if (v34 == v33)
    {
      unint64_t v37 = 0;
      __int16 v36 = 0;
    }
    else
    {
      if (v35 < 0) {
        sub_2E00();
      }
      int v51 = v23;
      __int16 v36 = operator new(v35);
      unint64_t v37 = (unint64_t)v36 + 2 * (v35 >> 1);
      long long v61 = v36;
      v62.i64[1] = v37;
      memcpy(v36, v31, v35);
      v62.i64[0] = v37;
      int v23 = v51;
    }
    uint64_t v38 = v54 + 152 * v16;
    uint64_t v40 = *(void *)(v38 + 136);
    uint64_t v39 = v38 + 136;
    __int16 v64 = *(_WORD *)(v39 + 8);
    uint64_t v63 = v40;
    *(_DWORD *)uint64_t v21 = v52;
    if ((int *)v21 != &v56)
    {
      if (v23 == 1)
      {
        *(void *)long long v22 = *(void *)v57;
        uint64_t v47 = v54 + 152 * v16;
        long long v48 = *(_OWORD *)&v57[8];
        long long v49 = *(_OWORD *)&v57[24];
        *(void *)(v47 + 48) = *(void *)&v57[40];
        *(_OWORD *)(v47 + 16) = v48;
        *(_OWORD *)(v47 + 32) = v49;
        if (v31) {
          goto LABEL_36;
        }
        goto LABEL_38;
      }
      if (!v23)
      {
        long long v41 = *(_OWORD *)&v57[16];
        long long *v22 = *(_OWORD *)v57;
        *(_OWORD *)(v21 + 24) = v41;
        long long v42 = *(_OWORD *)&v57[32];
        long long v43 = v58;
        long long v44 = v59[0];
        *(_OWORD *)(v21 + 84) = *(_OWORD *)((char *)v59 + 12);
        *(_OWORD *)(v21 + 56) = v43;
        *(_OWORD *)(v21 + 72) = v44;
        *(_OWORD *)(v21 + 40) = v42;
      }
    }
    if (v31)
    {
LABEL_36:
      long long v45 = (int64x2_t *)(v32 + 1);
      v32[1] = v31;
      operator delete(v31);
      *uint64_t v32 = 0;
      v32[1] = 0;
      v32[2] = 0;
      __int16 v36 = v61;
      int64x2_t v46 = v62;
LABEL_39:
      *uint64_t v32 = v36;
      *long long v45 = v46;
      uint64_t v50 = v63;
      *(_WORD *)(v39 + 8) = v64;
      *(void *)uint64_t v39 = v50;
      *(void *)uint64_t v53 = v55;
      *(void *)(v53 + 8) = v15;
      *(_DWORD *)(v53 + 16) = v16;
      return;
    }
LABEL_38:
    int64x2_t v46 = vdupq_n_s64(v37);
    long long v45 = (int64x2_t *)(v32 + 1);
    goto LABEL_39;
  }

  sub_1006330(a1, a2, (uint64_t)a3, a4);
}

void sub_1008178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10081A0@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a2;
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (v9 <= a2)
  {
    unint64_t v10 = a2 + 1;
    int v26 = -1;
    if (v10 <= v9)
    {
      if (v10 < v9) {
        *(void *)(a1 + 8) = v8 + 4 * v10;
      }
    }
    else
    {
      sub_500DC(a1, v10 - v9, (const float *)&v26);
      uint64_t v8 = *(void *)a1;
    }
  }
  uint64_t v11 = (_DWORD *)(v8 + 4 * v7);
  sub_745A4(a1 + 48, v11);
  unint64_t v12 = *(void *)(a1 + 32);
  unint64_t v13 = *(void *)(a1 + 40);
  _DWORD *v11 = 678152731 * ((v12 - *(void *)(a1 + 24)) >> 3);
  if (v12 >= v13)
  {
    unint64_t result = sub_100832C((void **)(a1 + 24), a3);
  }
  else
  {
    *(_DWORD *)unint64_t v12 = *(_DWORD *)a3;
    uint64_t v14 = (long long *)(v12 + 8);
    uint64_t v15 = (long long *)(a3 + 8);
    *(_DWORD *)(v12 + 104) = *(_DWORD *)(a3 + 104);
    int v16 = *(_DWORD *)(a3 + 104);
    if (v16 == 1)
    {
      long long v22 = *v15;
      long long v23 = *(_OWORD *)(a3 + 40);
      *(_OWORD *)(v12 + 24) = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(v12 + 40) = v23;
      *uint64_t v14 = v22;
    }
    else if (!v16)
    {
      long long v17 = *(_OWORD *)(a3 + 24);
      *uint64_t v14 = *v15;
      *(_OWORD *)(v12 + 24) = v17;
      long long v18 = *(_OWORD *)(a3 + 40);
      long long v19 = *(_OWORD *)(a3 + 56);
      long long v20 = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(v12 + 72) = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(v12 + 88) = v20;
      *(_OWORD *)(v12 + 40) = v18;
      *(_OWORD *)(v12 + 56) = v19;
    }
    *(void *)(v12 + 112) = 0;
    *(void *)(v12 + 120) = 0;
    *(void *)(v12 + 128) = 0;
    *(_OWORD *)(v12 + 112) = *(_OWORD *)(a3 + 112);
    *(void *)(v12 + 128) = *(void *)(a3 + 128);
    *(void *)(a3 + 112) = 0;
    *(void *)(a3 + 120) = 0;
    *(void *)(a3 + 128) = 0;
    uint64_t v24 = *(void *)(a3 + 136);
    *(_WORD *)(v12 + 144) = *(_WORD *)(a3 + 144);
    *(void *)(v12 + 136) = v24;
    unint64_t result = (char *)(v12 + 152);
  }
  *(void *)(a1 + 32) = result;
  int v25 = 678152731 * ((unint64_t)&result[-*(void *)(a1 + 24)] >> 3) - 1;
  *(void *)a4 = a1 + 24;
  *(void *)(a4 + 8) = a1 + 48;
  *(_DWORD *)(a4 + 16) = v25;
  return result;
}

char *sub_100832C(void **a1, uint64_t a2)
{
  unint64_t v3 = 0x86BCA1AF286BCA1BLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1AF286BCA1AF286) {
    sub_2E00();
  }
  if (0xD79435E50D79436 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0xD79435E50D79436 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0x86BCA1AF286BCA1BLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0xD79435E50D7943) {
    unint64_t v6 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1AF286BCA1AF286) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(152 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[152 * v3];
  *(_DWORD *)uint64_t v8 = *(_DWORD *)a2;
  unint64_t v9 = v8 + 8;
  unint64_t v10 = (_OWORD *)(a2 + 8);
  int v11 = *(_DWORD *)(a2 + 104);
  *((_DWORD *)v8 + 26) = v11;
  if (v11 == 1)
  {
    long long v15 = *(_OWORD *)(a2 + 24);
    _OWORD *v9 = *v10;
    *(_OWORD *)(v8 + 24) = v15;
    *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 40);
  }
  else if (!v11)
  {
    long long v12 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(v8 + 56) = v12;
    long long v13 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(v8 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(v8 + 88) = v13;
    long long v14 = *(_OWORD *)(a2 + 24);
    _OWORD *v9 = *v10;
    *(_OWORD *)(v8 + 24) = v14;
  }
  int v16 = &v7[152 * v6];
  long long v17 = &v7[152 * v3];
  *((_OWORD *)v17 + 7) = *(_OWORD *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  uint64_t v18 = *(void *)(a2 + 128);
  uint64_t v19 = *(void *)(a2 + 136);
  *(void *)(a2 + 128) = 0;
  *((void *)v17 + 16) = v18;
  *((void *)v17 + 17) = v19;
  *((_WORD *)v17 + 72) = *(_WORD *)(a2 + 144);
  long long v20 = v8 + 152;
  uint64_t v21 = (char *)*a1;
  long long v22 = (char *)a1[1];
  if (v22 == *a1)
  {
    *a1 = v8;
    a1[1] = v20;
    a1[2] = v16;
    if (!v22) {
      return v20;
    }
    goto LABEL_29;
  }
  uint64_t v23 = 0;
  do
  {
    long long v29 = &v8[v23];
    *((_DWORD *)v29 - 38) = *(_DWORD *)&v22[v23 - 152];
    uint64_t v30 = &v8[v23 - 144];
    unint64_t v31 = &v22[v23 - 144];
    int v32 = *(_DWORD *)&v22[v23 - 48];
    *((_DWORD *)v29 - 12) = v32;
    if (v32 == 1)
    {
      long long v24 = *(_OWORD *)v31;
      long long v25 = *(_OWORD *)&v22[v23 - 112];
      *(_OWORD *)&v8[v23 - 128] = *(_OWORD *)&v22[v23 - 128];
      *(_OWORD *)&v8[v23 - 112] = v25;
      *(_OWORD *)uint64_t v30 = v24;
    }
    else if (!v32)
    {
      long long v33 = *(_OWORD *)&v22[v23 - 128];
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
      *(_OWORD *)&v8[v23 - 128] = v33;
      long long v34 = *(_OWORD *)&v22[v23 - 112];
      long long v35 = *(_OWORD *)&v22[v23 - 96];
      long long v36 = *(_OWORD *)&v22[v23 - 64];
      *(_OWORD *)&v8[v23 - 80] = *(_OWORD *)&v22[v23 - 80];
      *(_OWORD *)&v8[v23 - 64] = v36;
      *(_OWORD *)&v8[v23 - 112] = v34;
      *(_OWORD *)&v8[v23 - 96] = v35;
    }
    int v26 = &v8[v23];
    long long v27 = &v22[v23];
    *((void *)v26 - 4) = 0;
    *((void *)v26 - 3) = 0;
    *(_OWORD *)(v26 - 40) = *(_OWORD *)&v22[v23 - 40];
    *((void *)v26 - 3) = *(void *)&v22[v23 - 24];
    *((void *)v27 - 5) = 0;
    *((void *)v27 - 4) = 0;
    *((void *)v27 - 3) = 0;
    uint64_t v28 = *(void *)&v22[v23 - 16];
    *((_WORD *)v26 - 4) = *(_WORD *)&v22[v23 - 8];
    *((void *)v26 - 2) = v28;
    v23 -= 152;
  }
  while (&v22[v23] != v21);
  unint64_t v37 = (char *)*a1;
  long long v22 = (char *)a1[1];
  *a1 = &v8[v23];
  a1[1] = v20;
  a1[2] = v16;
  if (v22 != v37)
  {
    do
    {
      uint64_t v38 = (void *)*((void *)v22 - 5);
      if (v38)
      {
        *((void *)v22 - 4) = v38;
        operator delete(v38);
      }
      v22 -= 152;
    }
    while (v22 != v37);
    long long v22 = v37;
  }
  if (v22) {
LABEL_29:
  }
    operator delete(v22);
  return v20;
}

void sub_100858C()
{
  unk_25FD45F = 16641;
  word_25FD448 = 65;
  byte_25FD477 = 1;
  byte_25FD461 = 0;
}

uint64_t sub_10085B4(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a6;
  *(void *)(a1 + 32) = a5;
  sub_ED82AC(a1 + 40, a3);
  *(void *)(a1 + 4200) = sub_3750CC(a3);
  *(_OWORD *)(a1 + 4208) = 0u;
  *(_DWORD *)(a1 + 4224) = 0;
  *(void *)(a1 + 4240) = 0;
  *(void *)(a1 + 4232) = 0;
  *(_DWORD *)(a1 + 4248) = 0;
  *(void *)(a1 + 4264) = 0;
  *(void *)(a1 + 4256) = 0;
  *(void *)(a1 + 4272) = sub_3750CC(a3);
  *(void *)(a1 + 4280) = 0;
  *(void *)(a1 + 4296) = 0;
  *(void *)(a1 + 4288) = 0;
  *(_OWORD *)(a1 + 4304) = xmmword_20B8E30;
  *(void *)(a1 + 4320) = 0x7FFFFFFFFFFFFFFFLL;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "clear_existing_blockages");
  BOOL v9 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4328) = v9;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9A40;
  strcpy((char *)__p[0], "clear_blockages_after_min_cost_computation");
  BOOL v10 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4329) = v10;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "check_min_cost_path");
  BOOL v11 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4330) = v11;
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "add_min_cost_path");
  BOOL v12 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4331) = v12;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "add_alternate_paths");
  BOOL v13 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4332) = v13;
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "add_full_paths");
  BOOL v14 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4333) = v14;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "check_blocking_incidents");
  BOOL v15 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4334) = v15;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9240;
  strcpy((char *)__p[0], "add_sub_paths_with_blocking_incidents");
  BOOL v16 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4335) = v16;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "check_soft_closure_incidents");
  BOOL v17 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4336) = v17;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "compute_static_avoided_incident");
  BOOL v18 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4337) = v18;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20E12D0;
  strcpy((char *)__p[0], "store_avoided_incidents_min_cost_paths");
  BOOL v19 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4338) = v19;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20E12D0;
  strcpy((char *)__p[0], "store_avoided_incidents_via_node_paths");
  BOOL v20 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4339) = v20;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20E12D0;
  strcpy((char *)__p[0], "min_sub_path_off_ramp_on_ramp_length_m");
  *(void *)(a1 + 4344) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "sub_path_extension_m");
  *(void *)(a1 + 4352) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "path_graph_targets");
  uint64_t v21 = (void *)sub_560F4(a2, (uint64_t)__p);
  char v30 = 7;
  strcpy((char *)v29, "max_num");
  int v22 = sub_31AC04(v21, (uint64_t)v29);
  if (v30 < 0)
  {
    operator delete(v29[0]);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
  }
  else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(__p[0]);
LABEL_31:
  *(_DWORD *)(a1 + 4360) = v22;
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "path_graph_targets");
  uint64_t v23 = sub_560F4(a2, (uint64_t)__p);
  char v30 = 14;
  strcpy((char *)v29, "max_distance_m");
  *(void *)(a1 + 4368) = sub_5CDE0(v23, v29);
  if (v30 < 0)
  {
    operator delete(v29[0]);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
  }
  else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(__p[0]);
LABEL_33:
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9A40;
  strcpy((char *)__p[0], "max_blocked_sequence_avoiding_search_space");
  int v24 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 4376) = v24;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93E0;
  strcpy((char *)__p[0], "max_intersection_loop_avoiding_search_space");
  int v25 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 4380) = v25;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "closure_cross_checks");
  int v26 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_100AAE8(a1 + 4384, v26);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "iterations");
  long long v27 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_100AC68((_DWORD *)(a1 + 4440), v27);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1008D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
  {
    operator delete(__p);
    uint64_t v28 = *(void **)(v25 + 4280);
    if (!v28)
    {
LABEL_3:
      sub_C62E9C(v26);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v28 = *(void **)(v25 + 4280);
    if (!v28) {
      goto LABEL_3;
    }
  }
  *(void *)(v25 + 4288) = v28;
  operator delete(v28);
  sub_C62E9C(v26);
  _Unwind_Resume(a1);
}

void *sub_1008F9C()
{
  uint64_t v0 = __chkstk_darwin();
  unsigned int v2 = v1;
  uint64_t v4 = v3;
  unsigned int v48 = v5;
  int64x2_t v46 = v6;
  uint64_t v47 = v7;
  uint64_t v9 = v8;
  long long v45 = v10;
  uint64_t v11 = v0;
  sub_725D0((uint64_t)v63);
  uint64_t v12 = v11 + 4328;
  if (*(unsigned char *)(v11 + 4328))
  {
    uint64_t v13 = *(void *)(v11 + 24);
    *(unsigned char *)(v13 + 30354) = 0;
    sub_ED7C40(v13 + 8);
    sub_C63080(v13 + 30360);
    sub_F54484(v13 + 30440);
  }
  sub_1075F74((uint64_t)&v59, *(void **)v11);
  sub_F5B750(v65, *(void *)v11);
  unint64_t v58 = 0x7FFFFFFFFFFFFFFFLL;
  sub_EAFC08((uint64_t)v64);
  unsigned int v44 = v2;
  sub_10096C0(v11, (uint64_t)v45, (uint64_t)v46, v9, (uint64_t)v47, v48, v4, v2, (uint64_t)&v59, (uint64_t)v65, &v58, (uint64_t)v64);
  if (!*(_DWORD *)v9 && sub_EAE43C(v64) && *(void *)(v11 + 4384) != *(void *)(v11 + 4392))
  {
    sub_725D0((uint64_t)&v51);
    sub_106D294(*(void ***)(v11 + 32), v64, (uint64_t *)(v11 + 4408));
    *(void *)(v11 + 4264) = (unint64_t)(sub_72688((uint64_t)&v51) + (double)*(unint64_t *)(v11 + 4264));
  }
  if (!*(unsigned char *)(v11 + 4332) || v58 == -1 || HIDWORD(v58) == 0x7FFFFFFF)
  {
    *(void *)(v11 + 4208) = (unint64_t)sub_72688((uint64_t)v63);
  }
  else
  {
    if (*(unsigned char *)(v11 + 4329))
    {
      uint64_t v14 = *(void *)(v11 + 24);
      *(unsigned char *)(v14 + 30354) = 0;
      sub_ED7C40(v14 + 8);
      sub_C63080(v14 + 30360);
      sub_F54484(v14 + 30440);
    }
    uint64_t v15 = *(void *)v11;
    int v51 = operator new(0x20uLL);
    long long v52 = xmmword_20B91C0;
    strcpy((char *)v51, "DrivingViaNodeAlternates");
    int v56 = 0;
    long long v55 = 0;
    uint64_t v57 = 0;
    BOOL v16 = sub_374CDC(v15, (uint64_t)&v51, (uint64_t *)&v55);
    BOOL v17 = *(void **)(v11 + 8);
    char v54 = 15;
    strcpy((char *)&__p, "via_node_config");
    uint64_t v18 = sub_561B0(v17, (uint64_t)&__p);
    BOOL v19 = (void *)sub_560F4(v16, v18);
    if (v54 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    BOOL v20 = (long long *)v55;
    if (v55)
    {
      uint64_t v21 = v56;
      int v22 = v55;
      if (v56 != v55)
      {
        do
        {
          if (*((char *)v21 - 1) < 0) {
            operator delete(*((void **)v21 - 3));
          }
          uint64_t v21 = (long long *)((char *)v21 - 24);
        }
        while (v21 != v20);
        int v22 = v55;
      }
      int v56 = v20;
      operator delete(v22);
    }
    if (SHIBYTE(v52) < 0) {
      operator delete(v51);
    }
    sub_FCEAF4((uint64_t)&v51, *(void *)(v11 + 24), v19);
    int v43 = *(_DWORD *)(v11 + 4444);
    if (v43)
    {
      int v49 = 0;
      uint64_t v42 = v11 + 4304;
      uint64_t v50 = v11;
      while (1)
      {
        sub_FCEAF8((uint64_t)&v51, v45, v46, v9, v47, v48, v64, v44, (uint64_t *)&v55);
        sub_FCC418((uint64_t)&v51, &__p);
        sub_33998(v42, (uint64_t)&__p);
        *(_DWORD *)(v11 + 4216) += sub_FCC3E0((uint64_t)&v51);
        uint64_t v23 = (long long *)v55;
        int v24 = v56;
        if (v55 == v56)
        {
          int v25 = 0;
          if (v55) {
            goto LABEL_36;
          }
        }
        else
        {
          int v25 = 0;
          do
          {
            ++*(_DWORD *)(v11 + 4220);
            sub_1075FE4((uint64_t)&v59, (uint64_t)v23);
            char v26 = *(unsigned char *)(v9 + 176);
            *(unsigned char *)sub_EAD918((uint64_t)v23) = v26;
            char v27 = *(unsigned char *)(v9 + 32);
            *(unsigned char *)(sub_EAD918((uint64_t)v23) + 1) = v27;
            if (*(unsigned char *)(v12 + 8)) {
              BOOL v28 = (v49 + 1) < *(_DWORD *)(v11 + 4440);
            }
            else {
              BOOL v28 = 0;
            }
            v25 += sub_1009F58(v11, v23, (uint64_t)v65, 1, *(unsigned char *)(v12 + 11) != 0, v28, v4);
            uint64_t v23 = (long long *)((char *)v23 + 472);
          }
          while (v23 != v24);
          uint64_t v23 = (long long *)v55;
          if (v55)
          {
LABEL_36:
            long long v29 = v56;
            char v30 = v23;
            if (v56 != v23)
            {
              do
              {
                unint64_t v31 = (void *)*((void *)v29 - 28);
                if (v31)
                {
                  *((void *)v29 - 27) = v31;
                  operator delete(v31);
                }
                int v32 = (void *)*((void *)v29 - 31);
                if (v32)
                {
                  *((void *)v29 - 30) = v32;
                  operator delete(v32);
                }
                long long v33 = (void *)*((void *)v29 - 39);
                if (v33)
                {
                  *((void *)v29 - 38) = v33;
                  operator delete(v33);
                }
                long long v34 = (void *)*((void *)v29 - 42);
                if (v34)
                {
                  *((void *)v29 - 41) = v34;
                  operator delete(v34);
                }
                uint64_t v35 = *((void *)v29 - 45);
                if (v35)
                {
                  uint64_t v36 = *((void *)v29 - 44);
                  unint64_t v37 = (void *)*((void *)v29 - 45);
                  if (v36 != v35)
                  {
                    do
                    {
                      uint64_t v38 = *(void **)(v36 - 24);
                      if (v38)
                      {
                        *(void *)(v36 - 16) = v38;
                        operator delete(v38);
                      }
                      v36 -= 56;
                    }
                    while (v36 != v35);
                    unint64_t v37 = (void *)*((void *)v29 - 45);
                  }
                  *((void *)v29 - 44) = v35;
                  operator delete(v37);
                  uint64_t v11 = v50;
                }
                uint64_t v39 = (void *)*((void *)v29 - 56);
                if (v39)
                {
                  *((void *)v29 - 55) = v39;
                  operator delete(v39);
                }
                uint64_t v40 = (void **)v29 - 59;
                if (*((char *)v29 - 449) < 0) {
                  operator delete(*v40);
                }
                long long v29 = (long long *)((char *)v29 - 472);
              }
              while (v40 != (void **)v23);
              char v30 = v55;
            }
            int v56 = v23;
            operator delete(v30);
          }
        }
        if (v25)
        {
          if (++v49 != v43) {
            continue;
          }
        }
        break;
      }
    }
    *(void *)(v11 + 4208) = (unint64_t)sub_72688((uint64_t)v63);
    sub_F6AB58(&v51);
  }
  sub_405F44((uint64_t)v64);
  if (v67) {
    sub_3A6230(v66);
  }
  if (v61)
  {
    int64x2_t v62 = v61;
    operator delete(v61);
  }
  return sub_3A6318(v60);
}

void sub_10095EC(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x4A08])) {
    sub_3A6230(&STACK[0x35D0]);
  }
  sub_C62E9C(&STACK[0x2350]);
  _Unwind_Resume(a1);
}

void *sub_10096C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t *a11, uint64_t a12)
{
  uint64_t v12 = __chkstk_darwin();
  unsigned int v14 = v13;
  int v16 = v15;
  __int8 v58 = v17;
  uint64_t v57 = v18;
  uint64_t v20 = v19;
  uint64_t v59 = v21;
  uint64_t v23 = v22;
  int v24 = (void **)v12;
  sub_725D0((uint64_t)v62);
  *a11 = 0x7FFFFFFFFFFFFFFFLL;
  sub_EAD268(a12);
  sub_F7D728((uint64_t)v61, (uint64_t)v24[3], 0);
  if (*((unsigned char *)v24 + 4337))
  {
    LODWORD(v63[0]) = 0x7FFFFFFF;
    unint64_t v25 = sub_F7D72C(v61, v23, v59, v20, (__int32 *)v63, 0, -1, v14, 0xFFFFFFFF);
    sub_F809F4((uint64_t)v61, (uint64_t)v63);
    sub_33998((uint64_t)(v24 + 538), (uint64_t)v63);
    if (v25 == -1 || (v25 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000)
    {
      v24[526] = (void *)sub_72688((uint64_t)v62);
      *a11 = 0x7FFFFFFFFFFFFFFFLL;
      sub_EAD268(a12);
      return sub_BF0DE8(v61);
    }
    sub_F7FAB4((uint64_t)v61, v63);
    if (sub_EAE144(v63) && (sub_37D0C8(*v24) & 1) == 0)
    {
      v24[526] = (void *)sub_72688((uint64_t)v62);
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(__p, "Unpacking of path with valid cost failed");
      char v54 = (void *)sub_2F404((uint64_t)exception, (long long *)__p);
    }
    sub_1075FE4(a9, (uint64_t)v63);
    sub_1009F58((uint64_t)v24, v63, a10, 1, 1, 0, v16);
    sub_405F44((uint64_t)v63);
  }
  unsigned int v56 = v14;
  int v26 = *((_DWORD *)v24 + 1110);
  if (v26)
  {
    unsigned int v55 = v14;
    unint64_t v27 = sub_F7D72C(v61, v23, v59, v20, v57, v58, -1, v14, 0xFFFFFFFF);
    sub_F809F4((uint64_t)v61, (uint64_t)v63);
    sub_33998((uint64_t)(v24 + 538), (uint64_t)v63);
    *((_DWORD *)v24 + 1054) += sub_F76A1C((uint64_t)v61);
    if (v27 == -1 || (v27 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000)
    {
LABEL_71:
      v24[526] = (void *)sub_72688((uint64_t)v62);
      *a11 = 0x7FFFFFFFFFFFFFFFLL;
      sub_EAD268(a12);
      return sub_BF0DE8(&v61[0]);
    }
    sub_F7FAB4((uint64_t)v61, v63);
    if (sub_EAE144(v63))
    {
      if ((sub_37D0C8(*v24) & 1) == 0)
      {
        BOOL v28 = sub_69510();
        nullsub_1(v28);
      }
      sub_405F44((uint64_t)v63);
LABEL_31:
      if (v26 == 1) {
        goto LABEL_32;
      }
      int v45 = 1;
      while (1)
      {
        unint64_t v46 = sub_F7D72C(v61, v23, v59, v20, v57, v58, -1, v55, 0xFFFFFFFF);
        sub_F809F4((uint64_t)v61, (uint64_t)v63);
        sub_33998((uint64_t)(v24 + 538), (uint64_t)v63);
        *((_DWORD *)v24 + 1054) += sub_F76A1C((uint64_t)v61);
        if (v46 == -1 || (v46 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000) {
          goto LABEL_71;
        }
        sub_F7FAB4((uint64_t)v61, v63);
        if (sub_EAE144(v63))
        {
          if ((sub_37D0C8(*v24) & 1) == 0)
          {
            uint64_t v47 = sub_69510();
            nullsub_1(v47);
          }
          sub_405F44((uint64_t)v63);
          goto LABEL_47;
        }
        sub_1075FE4(a9, (uint64_t)v63);
        if (*((unsigned char *)v24 + 4332) && !*((unsigned char *)v24 + 4329))
        {
          *a11 = v46;
          sub_D5C500(a12, (uint64_t)v63);
        }
        sub_1005324(v24[2], (uint64_t)v63, (uint64_t)__p);
        if (*((unsigned char *)v24 + 4330) && __p[0] == __p[1])
        {
          v24[526] = (void *)sub_72688((uint64_t)v62);
          *a11 = 0x7FFFFFFFFFFFFFFFLL;
          sub_EAD268(a12);
          int v32 = 1;
          int v51 = __p[0];
          if (__p[0]) {
            goto LABEL_66;
          }
        }
        else
        {
          ++*((_DWORD *)v24 + 1055);
          if (!*((unsigned char *)v24 + 4331)
            || ((char v48 = *(unsigned char *)(v20 + 176),
                 *(unsigned char *)sub_EAD918((uint64_t)v63) = v48,
                 char v49 = *(unsigned char *)(v20 + 32),
                 *(unsigned char *)(sub_EAD918((uint64_t)v63) + 1) = v49,
                 !*((unsigned char *)v24 + 4336))
              ? (BOOL v50 = 0)
              : (BOOL v50 = (v45 + 1) < *((_DWORD *)v24 + 1110)),
                sub_1009F58((uint64_t)v24, v63, a10, 1, *((unsigned char *)v24 + 4338) != 0, v50, v16)))
          {
            int v32 = 0;
            int v51 = __p[0];
            if (!__p[0]) {
              goto LABEL_67;
            }
LABEL_66:
            __p[1] = v51;
            operator delete(v51);
            goto LABEL_67;
          }
          int v32 = 2;
          int v51 = __p[0];
          if (__p[0]) {
            goto LABEL_66;
          }
        }
LABEL_67:
        sub_405F44((uint64_t)v63);
        if (v32) {
          goto LABEL_29;
        }
LABEL_47:
        if (v26 == ++v45) {
          goto LABEL_32;
        }
      }
    }
    sub_1075FE4(a9, (uint64_t)v63);
    if (*((unsigned char *)v24 + 4332))
    {
      *a11 = v27;
      sub_D5C500(a12, (uint64_t)v63);
    }
    sub_1005324(v24[2], (uint64_t)v63, (uint64_t)__p);
    if (*((unsigned char *)v24 + 4330) && __p[0] == __p[1])
    {
      v24[526] = (void *)sub_72688((uint64_t)v62);
      *a11 = 0x7FFFFFFFFFFFFFFFLL;
      sub_EAD268(a12);
      int v32 = 1;
      long long v33 = __p[0];
      if (!__p[0]) {
        goto LABEL_28;
      }
    }
    else
    {
      ++*((_DWORD *)v24 + 1055);
      if (!*((unsigned char *)v24 + 4331)
        || ((char v29 = *(unsigned char *)(v20 + 176),
             *(unsigned char *)sub_EAD918((uint64_t)v63) = v29,
             char v30 = *(unsigned char *)(v20 + 32),
             *(unsigned char *)(sub_EAD918((uint64_t)v63) + 1) = v30,
             !*((unsigned char *)v24 + 4336))
          ? (BOOL v31 = 0)
          : (BOOL v31 = *((_DWORD *)v24 + 1110) > 1u),
            sub_1009F58((uint64_t)v24, v63, a10, 1, *((unsigned __int8 *)v24 + 4338) != 0, v31, v16)))
      {
        int v32 = 0;
        long long v33 = __p[0];
        if (!__p[0]) {
          goto LABEL_28;
        }
        goto LABEL_27;
      }
      int v32 = 2;
      long long v33 = __p[0];
      if (!__p[0])
      {
LABEL_28:
        sub_405F44((uint64_t)v63);
        if (v32)
        {
LABEL_29:
          if (v32 != 2) {
            return sub_BF0DE8(&v61[0]);
          }
          goto LABEL_32;
        }
        goto LABEL_31;
      }
    }
LABEL_27:
    __p[1] = v33;
    operator delete(v33);
    goto LABEL_28;
  }
LABEL_32:
  if (*((_DWORD *)v24 + 1090))
  {
    sub_100AD70((unint64_t)v24, __p);
    long long v34 = (char *)__p[0];
    if (__p[0] != __p[1])
    {
      sub_F7F6F8(v61, v23, (uint64_t ***)__p, v20, *v57, v58, -1, 0x7FFFFFFF, v56, 0, 0xFFFFFFFF);
      sub_F809F4((uint64_t)v61, (uint64_t)v63);
      sub_33998((uint64_t)(v24 + 538), (uint64_t)v63);
      uint64_t v35 = sub_F7571C((uint64_t)v61);
      uint64_t v36 = *(unint64_t **)v35;
      unint64_t v37 = *(unint64_t **)(v35 + 8);
      if (*(unint64_t **)v35 != v37)
      {
        do
        {
          sub_F7FBD0((uint64_t)v61, *v36, v63);
          sub_1075FE4(a9, (uint64_t)v63);
          char v38 = *(unsigned char *)(v20 + 176);
          *(unsigned char *)sub_EAD918((uint64_t)v63) = v38;
          char v39 = *(unsigned char *)(v20 + 32);
          *(unsigned char *)(sub_EAD918((uint64_t)v63) + 1) = v39;
          sub_1009F58((uint64_t)v24, v63, a10, 0, 0, 0, v16);
          sub_405F44((uint64_t)v63);
          ++v36;
        }
        while (v36 != v37);
      }
      long long v34 = (char *)__p[0];
    }
    if (v34)
    {
      uint64_t v40 = __p[1];
      long long v41 = v34;
      if (__p[1] != v34)
      {
        uint64_t v42 = (char *)__p[1];
        do
        {
          unsigned int v44 = (void *)*((void *)v42 - 4);
          v42 -= 32;
          int v43 = v44;
          if (v44)
          {
            *(v40 - 3) = v43;
            operator delete(v43);
          }
          uint64_t v40 = v42;
        }
        while (v42 != v34);
        long long v41 = (char *)__p[0];
      }
      __p[1] = v34;
      operator delete(v41);
    }
  }
  return sub_BF0DE8(&v61[0]);
}

void sub_1009E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  if (__p) {
    operator delete(__p);
  }
  sub_405F44((uint64_t)&STACK[0xFE8]);
  sub_BF0DE8(va);
  _Unwind_Resume(a1);
}

void sub_1009F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void *);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  sub_405F44((uint64_t)&STACK[0xFE8]);
  sub_C64510((void **)va);
  sub_BF0DE8(va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1009F58(uint64_t a1, long long *a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  uint64_t v9 = a2;
  if (sub_EAE144(a2)) {
    return 0;
  }
  sub_1005324(*(void **)(a1 + 16), (uint64_t)v9, (uint64_t)&v120);
  int v107 = a7;
  uint64_t v115 = (unsigned char *)(a1 + 4333);
  unsigned int v13 = (unint64_t *)v120;
  uint64_t v12 = v121;
  if (v120 == v121)
  {
    uint64_t v11 = 0;
    if (*v115) {
      goto LABEL_128;
    }
    goto LABEL_141;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (void **)(a1 + 4280);
  uint64_t v110 = v9;
  char v114 = 1;
  int v113 = v121;
  int v112 = a5;
  do
  {
    if (*v13 < v13[1])
    {
      ++*(_DWORD *)(a1 + 4224);
      uint64_t v16 = *(void *)sub_5231C((uint64_t)v9);
      unint64_t v17 = *v13;
      uint64_t v18 = (void *)sub_5231C((uint64_t)v9);
      uint64_t v19 = (void *)(v16 + 96 * v17 + 96);
      unint64_t v20 = v13[1];
      uint64_t v21 = *v18 + 96 * v20;
      if (v19 == (void *)v21)
      {
        uint64_t v22 = 0;
        if (*(uint64_t *)(a1 + 4344) <= 0) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v22 = 0;
        do
        {
          while (1)
          {
            uint64_t v23 = (unsigned __int16 *)(*v19 - *(int *)*v19);
            if (*v23 >= 9u)
            {
              uint64_t v24 = v23[4];
              if (v24) {
                break;
              }
            }
            v19 += 12;
            if (v19 == (void *)v21) {
              goto LABEL_17;
            }
          }
          v22 += *(unsigned int *)(*v19 + v24);
          v19 += 12;
        }
        while (v19 != (void *)v21);
LABEL_17:
        if (v22 >= *(void *)(a1 + 4344)) {
          goto LABEL_29;
        }
      }
      BOOL v25 = v20 >= *v13;
      unint64_t v26 = v20 - *v13;
      if (!v25) {
        unint64_t v26 = 0;
      }
      if (v26 >= 2)
      {
        unint64_t v27 = *(int **)(*(void *)sub_5231C((uint64_t)v9) + 96 * *v13);
        BOOL v28 = (unsigned __int16 *)((char *)v27 - *v27);
        if (*v28 >= 0x2Fu)
        {
          uint64_t v29 = v28[23];
          if (v29)
          {
            if (!*((unsigned char *)v27 + v29))
            {
              char v30 = *(int **)(*(void *)sub_5231C((uint64_t)v9) + 96 * v13[1] - 56);
              BOOL v31 = (unsigned __int16 *)((char *)v30 - *v30);
              if (*v31 >= 0x2Fu)
              {
                uint64_t v32 = v31[23];
                if (v32)
                {
                  if (!*((unsigned char *)v30 + v32))
                  {
                    uint64_t v91 = *(void *)sub_5231C((uint64_t)v9);
                    unint64_t v92 = *v13;
                    unint64_t v93 = (void *)sub_5231C((uint64_t)v9);
                    uint64_t v94 = (void *)(v91 + 96 * v92 + 96);
                    uint64_t v95 = *v93 + 96 * v13[1] - 96;
                    uint64_t v14 = (void **)(a1 + 4280);
                    if (v94 != (void *)v95)
                    {
                      while (1)
                      {
                        unint64_t v96 = (unsigned __int16 *)(*v94 - *(int *)*v94);
                        if (*v96 < 0x2Fu) {
                          break;
                        }
                        uint64_t v97 = v96[23];
                        if (!v97 || *(unsigned char *)(*v94 + v97)) {
                          break;
                        }
                        v94 += 12;
                        if (v94 == (void *)v95) {
                          goto LABEL_29;
                        }
                      }
                      char v114 = 0;
                      goto LABEL_8;
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_29:
      sub_100B070(a1, (uint64_t)v9, v13, (uint64_t)&v129);
      if (!*(unsigned char *)(a1 + 4334)) {
        goto LABEL_78;
      }
      sub_1068D6C(*(void *)(a1 + 32), &v129, (char **)&v118);
      long long v33 = v118;
      long long v34 = v119;
      if (v118 != v119)
      {
        do
        {
          if (a5)
          {
            uint64_t v35 = (__n128 *)(v33 + 1);
            unint64_t v36 = *(void *)(a1 + 4288);
            if (v36 >= *(void *)(a1 + 4296))
            {
              unint64_t v37 = sub_100BCBC(v14, v35);
            }
            else
            {
              sub_45E5B0(*(__n128 **)(a1 + 4288), v35);
              unint64_t v37 = (void *)(v36 + 32);
              *(void *)(a1 + 4288) = v36 + 32;
            }
            *(void *)(a1 + 4288) = v37;
          }
          uint64_t v38 = *(void *)(a1 + 24);
          *(unsigned char *)(v38 + 30354) = 1;
          uint64_t v39 = v38 + 30360;
          sub_F57008(v38 + 30360, 1);
          if (sub_F57414(v39, v33) == -1)
          {
            sub_F57530(v39, v33, v40, __dst);
            uint64_t v11 = (v11 + 1);
          }
          else
          {
            uint64_t v11 = v11;
          }
          v33 += 3;
        }
        while (v33 != v34);
        char v114 = 0;
        if (!*(unsigned char *)(a1 + 4335))
        {
          int v49 = 3;
          uint64_t v9 = v110;
          goto LABEL_75;
        }
      }
      sub_106C7DC(*(void *)(a1 + 32), &v129, (uint64_t)__dst);
      uint64_t v42 = (char *)v125;
      long long v41 = v126;
      if (__dst[0] != __dst[1] || v125 != v126 || v127 != v128)
      {
        uint64_t v43 = *(void *)(a1 + 24);
        unsigned int v44 = (unsigned char *)(v43 + 30354);
        *(unsigned char *)(v43 + 30354) = 1;
        if (v42 == v41)
        {
          char v45 = 0;
        }
        else
        {
          char v45 = 0;
          unint64_t v46 = (void *)(v43 + 30440);
          do
          {
            *unsigned int v44 = 1;
            sub_F54A34((uint64_t)v46, 1);
            uint64_t v48 = sub_F558C4((uint64_t)v46, (uint64_t)v42);
            if (v48 == -1) {
              sub_F55B28(v46, (uint64_t)v42, v47, &__p);
            }
            v45 |= v48 == -1;
            v42 += 96;
          }
          while (v42 != v41);
          uint64_t v43 = *(void *)(a1 + 24);
        }
        a5 = v112;
        char v114 = 0;
        uint64_t v11 = v11 + (v45 & 1) + sub_ED7C38(v43 + 8, (uint64_t *)&v127);
        if (!*(unsigned char *)(a1 + 4335))
        {
          int v49 = 3;
          uint64_t v9 = v110;
          __int8 v58 = (char *)v127;
          if (v127)
          {
LABEL_62:
            uint64_t v59 = v128;
            int v60 = v58;
            if (v128 != v58)
            {
              long long v61 = v128;
              do
              {
                uint64_t v63 = (void *)*((void *)v61 - 3);
                v61 -= 24;
                int64x2_t v62 = v63;
                if (v63)
                {
                  *((void *)v59 - 2) = v62;
                  operator delete(v62);
                }
                uint64_t v59 = v61;
              }
              while (v61 != v58);
              int v60 = v127;
              a5 = v112;
            }
            unint64_t v128 = v58;
            operator delete(v60);
            __int16 v64 = (char *)v125;
            if (!v125) {
              goto LABEL_73;
            }
LABEL_72:
            unint64_t v126 = v64;
            operator delete(v64);
LABEL_73:
            uint64_t v14 = (void **)(a1 + 4280);
            if (__dst[0])
            {
              __dst[1] = __dst[0];
              operator delete(__dst[0]);
            }
LABEL_75:
            if (v118)
            {
              uint64_t v119 = v118;
              operator delete(v118);
            }
            if (v49) {
              goto LABEL_7;
            }
LABEL_78:
            if (!a6)
            {
LABEL_83:
              sub_1069AF8(*(void *)(a1 + 32), &v129, &__p);
              if (__p == v123)
              {
                sub_106A7A0(*(char ***)(a1 + 32), (uint64_t)&v118);
                long long v70 = v118;
                long long v71 = v119;
                *(unsigned char *)(sub_EAD918((uint64_t)&v129) + 7) = v70 != v71;
                *(void *)(a1 + 4232) += v22;
                long long v72 = (int *)sub_37B3A8(*(void *)a1);
                uint64_t v14 = (void **)(a1 + 4280);
                sub_1069724(*(void *)(a1 + 32), &v129, a3, v72, __dst);
                BOOL v73 = __dst[0] == __dst[1] && v125 == v126 && v127 == v128;
                sub_EADC70((uint64_t)&v129, !v73);
                long long v74 = (char *)v127;
                if (v127)
                {
                  uint64_t v75 = v128;
                  long long v76 = v127;
                  if (v128 != v127)
                  {
                    long long v77 = v128;
                    do
                    {
                      long long v79 = (void *)*((void *)v77 - 3);
                      v77 -= 24;
                      long long v78 = v79;
                      if (v79)
                      {
                        *((void *)v75 - 2) = v78;
                        operator delete(v78);
                      }
                      uint64_t v75 = v77;
                    }
                    while (v77 != v74);
                    long long v76 = v127;
                  }
                  unint64_t v128 = v74;
                  operator delete(v76);
                }
                if (v125)
                {
                  unint64_t v126 = (char *)v125;
                  operator delete(v125);
                }
                if (__dst[0])
                {
                  __dst[1] = __dst[0];
                  operator delete(__dst[0]);
                }
                char v80 = *(unsigned char *)sub_EAD918((uint64_t)v9);
                *(unsigned char *)sub_EAD918((uint64_t)&v129) = v80;
                char v81 = *(unsigned char *)(sub_EAD918((uint64_t)v9) + 1);
                *(unsigned char *)(sub_EAD918((uint64_t)&v129) + 1) = v81;
                uint64_t v82 = sub_EAD918((uint64_t)&v129);
                uint64_t v83 = sub_EAD918((uint64_t)v9);
                uint64_t v84 = *(void *)v82;
                *(_WORD *)(v83 + 8) = *(_WORD *)(v82 + 8);
                *(void *)uint64_t v83 = v84;
                uint64_t v85 = *(void *)(a1 + 16);
                sub_444D20((char *)__dst, v9);
                sub_1002B90(v85, (long long *)__dst, v13, 0, a4);
                sub_405F44((uint64_t)__dst);
                if (v118)
                {
                  uint64_t v119 = v118;
                  operator delete(v118);
                }
              }
              else
              {
                char v114 = 0;
                uint64_t v11 = (v11 + sub_ED7C38(*(void *)(a1 + 24) + 8, (uint64_t *)&__p));
              }
              uint64_t v86 = (char *)__p;
              if (__p)
              {
                unint64_t v87 = v123;
                uint64_t v15 = __p;
                if (v123 != __p)
                {
                  unint64_t v88 = v123;
                  do
                  {
                    unint64_t v90 = (void *)*((void *)v88 - 3);
                    v88 -= 24;
                    int v89 = v90;
                    if (v90)
                    {
                      *((void *)v87 - 2) = v89;
                      operator delete(v89);
                    }
                    unint64_t v87 = v88;
                  }
                  while (v88 != v86);
                  uint64_t v15 = __p;
                }
                unint64_t v123 = v86;
                operator delete(v15);
              }
LABEL_7:
              sub_405F44((uint64_t)&v129);
LABEL_8:
              uint64_t v12 = v113;
              goto LABEL_9;
            }
            sub_1069090(*(void *)(a1 + 32), &v129, &__p);
            long long v66 = (char *)__p;
            long long v65 = v123;
            if (__p == v123)
            {
              if (!__p)
              {
LABEL_82:
                uint64_t v14 = (void **)(a1 + 4280);
                goto LABEL_83;
              }
            }
            else
            {
              do
              {
                uint64_t v67 = *(void *)(a1 + 24);
                *(unsigned char *)(v67 + 30354) = 1;
                uint64_t v68 = v67 + 30360;
                sub_F57008(v67 + 30360, 1);
                if (sub_F57414(v68, v66) == -1)
                {
                  sub_F57530(v68, v66, v69, __dst);
                  uint64_t v11 = (v11 + 1);
                }
                else
                {
                  uint64_t v11 = v11;
                }
                v66 += 24;
              }
              while (v66 != v65);
              long long v66 = (char *)__p;
              if (!__p) {
                goto LABEL_82;
              }
            }
            unint64_t v123 = v66;
            operator delete(v66);
            goto LABEL_82;
          }
LABEL_71:
          __int16 v64 = (char *)v125;
          if (!v125) {
            goto LABEL_73;
          }
          goto LABEL_72;
        }
      }
      uint64_t v50 = *(void *)(a1 + 24);
      sub_106BCAC(*(void *)(a1 + 32), &v129, (uint64_t)&v116);
      int v51 = (unsigned char *)(v50 + 30354);
      *(unsigned char *)(v50 + 30354) = 1;
      uint64_t v53 = v116;
      long long v52 = v117;
      if (v116 == v117)
      {
        char v54 = 0;
        uint64_t v9 = v110;
        if (v116)
        {
LABEL_60:
          int v117 = v53;
          operator delete(v53);
        }
      }
      else
      {
        char v54 = 0;
        uint64_t v55 = v50 + 30360;
        do
        {
          *int v51 = 1;
          sub_F57008(v55, 1);
          uint64_t v57 = sub_F57414(v55, v53);
          if (v57 == -1) {
            sub_F57530(v55, v53, v56, &__p);
          }
          v54 |= v57 == -1;
          ++v53;
        }
        while (v53 != v52);
        uint64_t v53 = v116;
        uint64_t v9 = v110;
        if (v116) {
          goto LABEL_60;
        }
      }
      int v49 = 0;
      uint64_t v11 = v11 + (v54 & 1);
      a5 = v112;
      __int8 v58 = (char *)v127;
      if (v127) {
        goto LABEL_62;
      }
      goto LABEL_71;
    }
LABEL_9:
    v13 += 2;
  }
  while (v13 != v12);
  if ((v114 & 1) == 0 || !*v115) {
    goto LABEL_141;
  }
LABEL_128:
  sub_106A7A0(*(char ***)(a1 + 32), (uint64_t)&v129);
  unint64_t v98 = (char *)v129;
  unsigned long long v99 = v130;
  *(unsigned char *)(sub_EAD918((uint64_t)v9) + 7) = v98 != v99;
  if (v129)
  {
    unint64_t v130 = (char *)v129;
    operator delete(v129);
  }
  sub_1069090(*(void *)(a1 + 32), v9, &v129);
  unint64_t v100 = (char *)v129;
  uint64_t v101 = v130;
  *(unsigned char *)(sub_EAD918((uint64_t)v9) + 8) = v100 != v101;
  if (v129 == v130)
  {
    BOOL v104 = 0;
  }
  else
  {
    unint64_t v102 = (char *)v129 + 24;
    do
    {
      uint64_t v103 = *((void *)v102 - 1);
      BOOL v104 = *(unsigned char *)(**((void **)v102 - 2) + 424 * v103 + 312) != 0;
      if (*(unsigned char *)(**((void **)v102 - 2) + 424 * v103 + 312)) {
        BOOL v105 = 1;
      }
      else {
        BOOL v105 = v102 == v130;
      }
      v102 += 24;
    }
    while (!v105);
  }
  *(unsigned char *)(sub_EAD918((uint64_t)v9) + 9) = v104;
  sub_1002ADC(*(void *)(a1 + 16), v9, v107);
  if (v129)
  {
    unint64_t v130 = (char *)v129;
    operator delete(v129);
  }
LABEL_141:
  if (v120)
  {
    unint64_t v121 = (unint64_t *)v120;
    operator delete(v120);
  }
  return v11;
}

void sub_100A970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p)
{
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100AABC(uint64_t a1)
{
  return a1 + 4280;
}

__n128 sub_100AAC8@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = a1[269];
  *a2 = result;
  a2[1].n128_u64[0] = a1[270].n128_u64[0];
  return result;
}

uint64_t sub_100AADC(uint64_t a1)
{
  return a1 + 4208;
}

uint64_t sub_100AAE8(uint64_t a1, void *a2)
{
  char v7 = 8;
  strcpy(__p, "branches");
  sub_5C308(a2, (uint64_t)__p, a1);
  if (v7 < 0) {
    operator delete(*(void **)__p);
  }
  char v7 = 14;
  strcpy(__p, "country_filter");
  sub_5C308(a2, (uint64_t)__p, a1 + 24);
  if (v7 < 0) {
    operator delete(*(void **)__p);
  }
  char v7 = 18;
  strcpy(__p, "max_checked_length");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  *(void *)(a1 + 48) = sub_A2D5F4(v4);
  if (v7 < 0) {
    operator delete(*(void **)__p);
  }
  return a1;
}

void sub_100AC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1A668(v14);
  _Unwind_Resume(a1);
}

_DWORD *sub_100AC68(_DWORD *a1, void *a2)
{
  __n128 __p = operator new(0x19uLL);
  long long v8 = xmmword_20B9250;
  strcpy((char *)__p, "num_min_cost_iterations");
  int v4 = sub_31AC04(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  *a1 = v4;
  __n128 __p = operator new(0x20uLL);
  long long v8 = xmmword_20B91C0;
  strcpy((char *)__p, "num_alternate_iterations");
  int v5 = sub_31AC04(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  a1[1] = v5;
  return a1;
}

void sub_100AD50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AD70@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v11 = sub_1005964(*(void *)(a1 + 16));
  sub_100B404(v12, 0x400u);
  int v4 = (int **)sub_100596C(*(void *)(a1 + 16));
  int v5 = *v4;
  unint64_t v6 = v4[1];
  if (*v4 != v6)
  {
    do
    {
      int v7 = *v5;
      v10[0] = 0;
      LODWORD(v9[0]) = v7;
      sub_100B568((uint64_t)v12, (unsigned int *)v9, v10);
      v5 += 42;
    }
    while (v5 != v6);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v10[0] = (unint64_t)a2;
  v10[1] = a1;
  v9[0] = a1;
  v9[1] = a2;
  sub_100AEC4((uint64_t)&v11, v10, v9);
  if (v19)
  {
    unint64_t v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
  if (v13)
  {
    uint64_t v14 = v13;
    operator delete(v13);
  }
  return sub_328138((uint64_t)v12);
}

void sub_100AE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_C64510(v6);
  sub_ECFCF0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100AE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_ECFCF0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100AEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_ECFCF0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100AEC4(uint64_t a1, void *a2, void *a3)
{
  if (*(_DWORD *)(a1 + 880))
  {
    uint64_t v6 = a1 + 8;
    while (1)
    {
      int v7 = (unsigned int *)(*(void *)(a1 + 776) + 16 * **(unsigned int **)(a1 + 832));
      uint64_t v8 = *v7;
      uint64_t v23 = *((void *)v7 + 1);
      sub_51325C(v6);
      uint64_t v9 = a2[1];
      if (*(unsigned int *)(v9 + 4360) <= (unint64_t)((uint64_t)(*(void *)(*a2 + 8) - *(void *)*a2) >> 5)
        || v23 > *(void *)(v9 + 4368))
      {
        return;
      }
      if ((sub_100B7D8(a3, v8) & 1) == 0) {
        break;
      }
LABEL_3:
      if (!*(_DWORD *)(a1 + 880)) {
        return;
      }
    }
    BOOL v10 = *(void **)a1;
    sub_1007480(*(void *)a1, v8);
    uint64_t v11 = *(unsigned int *)(v10[12] + 4 * v8);
    sub_1007480((uint64_t)v10, v8);
    while (1)
    {
      if (v11 == -1) {
        goto LABEL_3;
      }
      unsigned int v13 = (unsigned int *)(v10[15] + 152 * v11);
      if (sub_1002444((uint64_t)v13) != 0x7FFFFFFFFFFFFFFFLL) {
        break;
      }
LABEL_10:
      uint64_t v11 = *(unsigned int *)(v10[18] + 4 * v11);
    }
    unsigned int v22 = sub_4F44(v13);
    BOOL v14 = sub_10022FC((uint64_t)v13);
    uint64_t v15 = v23;
    if (v14)
    {
      uint64_t v16 = (char **)sub_100231C((uint64_t)v13);
      unint64_t v17 = *v16;
      uint64_t v18 = &(*v16)[-*(int *)*v16];
      if (*(unsigned __int16 *)v18 < 9u) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v19 = (char **)sub_10023E0((uint64_t)v13);
      unint64_t v17 = *v19;
      uint64_t v18 = &(*v19)[-*(int *)*v19];
      if (*(unsigned __int16 *)v18 < 9u) {
        goto LABEL_8;
      }
    }
    unsigned int v20 = *((unsigned __int16 *)v18 + 4);
    if (v20)
    {
      uint64_t v12 = *(unsigned int *)&v17[v20];
      goto LABEL_9;
    }
LABEL_8:
    uint64_t v12 = 0;
LABEL_9:
    unint64_t v21 = v12 + v15;
    sub_100BA74(v6, &v22, &v21);
    goto LABEL_10;
  }
}

double sub_100B070@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8 = *a3;
  uint64_t v9 = *(void *)(a1 + 4352);
  if ((v9 & 0x8000000000000000) == 0 && v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 96 * v8 - 96;
    do
    {
      unint64_t v14 = v8;
      uint64_t v15 = *(int **)(*(void *)sub_5231C(a2) + v11);
      uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
      if (*v16 >= 9u && (uint64_t v17 = v16[4]) != 0) {
        uint64_t v12 = *(unsigned int *)((char *)v15 + v17);
      }
      else {
        uint64_t v12 = 0;
      }
      v10 += v12;
      uint64_t v9 = *(void *)(a1 + 4352);
      v11 -= 96;
      --v8;
    }
    while (v10 <= v9 && v14 != 1);
  }
  unint64_t v18 = a3[1];
  if ((v9 & 0x8000000000000000) == 0)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 96 * v18;
    while (v18 < sub_EB04A8(a2))
    {
      unint64_t v21 = *(int **)(*(void *)sub_5231C(a2) + v20);
      unsigned int v22 = (unsigned __int16 *)((char *)v21 - *v21);
      if (*v22 >= 9u && (uint64_t v23 = v22[4]) != 0)
      {
        v19 += *(unsigned int *)((char *)v21 + v23);
        ++v18;
        v20 += 96;
        if (v19 > *(void *)(a1 + 4352)) {
          break;
        }
      }
      else
      {
        ++v18;
        v20 += 96;
        if (v19 > *(void *)(a1 + 4352)) {
          break;
        }
      }
    }
  }
  uint64_t v24 = sub_EAFC08(a4);
  uint64_t v25 = sub_5231C(v24);
  unint64_t v26 = (void *)v25;
  unint64_t v27 = v18 - v8;
  BOOL v28 = *(unsigned char **)v25;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v25 + 16) - *(void *)v25) >> 5) < v18 - v8)
  {
    if (v27 >= 0x2AAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v29 = *(unsigned char **)(v25 + 8);
    char v30 = (char *)operator new(96 * v27);
    BOOL v31 = &v30[v29 - v28];
    uint64_t v32 = v31;
    if (v29 != v28)
    {
      long long v33 = &v30[v29 - v28];
      do
      {
        long long v34 = *((_OWORD *)v29 - 5);
        *((_OWORD *)v33 - 6) = *((_OWORD *)v29 - 6);
        *((_OWORD *)v33 - 5) = v34;
        long long v35 = *((_OWORD *)v29 - 4);
        long long v36 = *((_OWORD *)v29 - 3);
        long long v37 = *((_OWORD *)v29 - 2);
        uint64_t v32 = v33 - 96;
        *(_OWORD *)(v33 - 20) = *(_OWORD *)(v29 - 20);
        *((_OWORD *)v33 - 3) = v36;
        *((_OWORD *)v33 - 2) = v37;
        *((_OWORD *)v33 - 4) = v35;
        v29 -= 96;
        v33 -= 96;
      }
      while (v29 != v28);
    }
    void *v26 = v32;
    v26[1] = v31;
    v26[2] = &v30[96 * v27];
    if (v28) {
      operator delete(v28);
    }
  }
  if (v8 <= v18) {
    unint64_t v38 = v18;
  }
  else {
    unint64_t v38 = v8;
  }
  if (v18 > v8)
  {
    uint64_t v39 = 96 * v8;
    unint64_t v40 = v38 - v8;
    do
    {
      long long v41 = (void *)sub_5231C(a2);
      sub_EAFD8C(a4, (int **)(*v41 + v39));
      v39 += 96;
      --v40;
    }
    while (v40);
  }
  int v42 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  char v59 = 0;
  uint64_t v60 = 0x3FF0000000000000;
  char v61 = 1;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  char v64 = 0;
  int v65 = 36000;
  char v66 = 0;
  if (!v8) {
    int v42 = *(_DWORD *)sub_69134(a2);
  }
  int v56 = v42;
  sub_EAD920(a4, (uint64_t)&v56);
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  char v48 = 0;
  uint64_t v49 = 0x3FF0000000000000;
  char v50 = 1;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  char v53 = 0;
  int v54 = 36000;
  char v55 = 0;
  if (v18 == sub_EB04A8(a2) - 1) {
    int v43 = *(_DWORD *)sub_EADAD0(a2);
  }
  else {
    int v43 = 1000000000;
  }
  int v45 = v43;
  *(void *)&double result = sub_EADAA8(a4, (uint64_t)&v45).n128_u64[0];
  return result;
}

void sub_100B38C(_Unwind_Exception *a1)
{
  sub_405F44(v1);
  _Unwind_Resume(a1);
}

void sub_100B3A0(_Unwind_Exception *a1)
{
  sub_405F44(v1);
  _Unwind_Resume(a1);
}

void sub_100B3B4(_Unwind_Exception *a1)
{
  sub_405F44(v1);
  _Unwind_Resume(a1);
}

void sub_100B3C8(_Unwind_Exception *a1)
{
  sub_405F44(v1);
  _Unwind_Resume(a1);
}

void sub_100B3DC(_Unwind_Exception *a1)
{
  sub_405F44(v1);
  _Unwind_Resume(a1);
}

void sub_100B3F0(_Unwind_Exception *a1)
{
  sub_405F44(v1);
  _Unwind_Resume(a1);
}

void *sub_100B404(void *a1, unsigned int a2)
{
  uint64_t v4 = a2;
  v13[0] = a2;
  v13[1] = (unint64_t)&v12;
  v13[2] = (unint64_t)&v11;
  v13[3] = (unint64_t)&v10;
  int v5 = sub_ED2164(a1, v13);
  *((_DWORD *)v5 + 218) = 0;
  *(_OWORD *)(v5 + 105) = 0u;
  *(_OWORD *)(v5 + 107) = 0u;
  *(_OWORD *)(v5 + 103) = 0u;
  *((_OWORD *)v5 + 48) = 0u;
  *((_OWORD *)v5 + 49) = 0u;
  *((_OWORD *)v5 + 50) = 0u;
  *((_DWORD *)v5 + 204) = 0;
  if (a2)
  {
    uint64_t v6 = (char *)operator new(4 * v4);
    a1[106] = v6;
    a1[107] = v6;
    a1[108] = &v6[4 * v4];
  }
  int v7 = (char *)operator new(0x7F0uLL);
  a1[103] = v7;
  a1[104] = v7;
  a1[105] = v7 + 2032;
  if (a2)
  {
    unint64_t v8 = (char *)operator new(16 * v4);
    a1[96] = v8;
    a1[97] = v8;
    a1[98] = &v8[16 * v4];
  }
  return a1;
}

void sub_100B4E0(_Unwind_Exception *a1)
{
  sub_3310C(v2);
  uint64_t v4 = (void **)(v1 + 96);
  int v5 = (void *)v1[99];
  if (v5)
  {
    v1[100] = v5;
    operator delete(v5);
    uint64_t v6 = *v4;
    if (!*v4)
    {
LABEL_3:
      sub_328138((uint64_t)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v6 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[97] = v6;
  operator delete(v6);
  sub_328138((uint64_t)v1);
  _Unwind_Resume(a1);
}

void sub_100B568(uint64_t a1, unsigned int *a2, unint64_t *a3)
{
  uint64_t v6 = 0;
  ++*(_DWORD *)(a1 + 816);
  uint64_t v7 = *a2;
  unint64_t v8 = 265 * ((~v7 + (v7 << 21)) ^ ((unint64_t)(~v7 + (v7 << 21)) >> 24));
  unint64_t v9 = 2147483649u * ((21 * (v8 ^ (v8 >> 14))) ^ ((21 * (v8 ^ (v8 >> 14))) >> 28));
  char v10 = (void *)(a1 + 48 * (((BYTE1(v9) ^ BYTE2(v9)) ^ BYTE3(v9)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  uint64_t v13 = 0x101010101010101 * (v9 & 0x7F);
  while (1)
  {
    unint64_t v14 = v11 & v12;
    uint64_t v15 = *(void *)(*v10 + v14);
    unint64_t v16 = ((v15 ^ v13) - 0x101010101010101) & ~(v15 ^ v13) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_6:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v6 += 8;
    unint64_t v11 = v6 + v14;
  }
  uint64_t v17 = v10[1];
  while (1)
  {
    unint64_t v18 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v12;
    if (*(_DWORD *)(v17 + 8 * v18) == v7) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_6;
    }
  }
  if (v12 == v18)
  {
LABEL_9:
    unint64_t v19 = *(void *)(a1 + 776) - *(void *)(a1 + 768);
    sub_ED2D48(a1, a2, (uint64_t)&v29);
    uint64_t v20 = v30;
    uint64_t v21 = *(void *)(v29 + 8);
    if (v31) {
      *(_DWORD *)(v21 + 8 * v30) = *a2;
    }
    *(_DWORD *)(v21 + 8 * v20 + 4) = v19 >> 4;
    sub_B717DC((char **)(a1 + 768), a2, a3);
    unsigned int v22 = (uint64_t *)(a1 + 824);
    unint64_t v23 = (v19 >> 4);
    uint64_t v24 = *(void *)(a1 + 848);
    if (v23 >= (*(void *)(a1 + 856) - v24) >> 2 || *(_DWORD *)(v24 + 4 * v23) == -1) {
      sub_521F5C((uint64_t)v22, v19 >> 4, a3);
    }
    else {
      sub_5221BC(v22, v19 >> 4, a3);
    }
    return;
  }
  uint64_t v25 = v17 + 8 * v18;
  *(void *)(*(void *)(a1 + 768) + 16 * *(unsigned int *)(v25 + 4) + 8) = *a3;
  unint64_t v26 = (uint64_t *)(a1 + 824);
  unint64_t v27 = *(unsigned int *)(v25 + 4);
  uint64_t v28 = *(void *)(a1 + 848);
  if (v27 >= (*(void *)(a1 + 856) - v28) >> 2 || *(_DWORD *)(v28 + 4 * v27) == -1)
  {
    sub_521F5C((uint64_t)v26, v27, a3);
  }
  else
  {
    sub_5221BC(v26, v27, a3);
  }
}

uint64_t sub_100B7D8(void *a1, unsigned int a2)
{
  unsigned int v45 = a2;
  uint64_t v3 = *a1;
  uint64_t v4 = sub_1005B14(*(void *)(*a1 + 16), &v45);
  if (v4)
  {
    unint64_t v5 = v4;
    uint64_t v6 = (int *)sub_2D5D58(*(void *)(v3 + 4272), HIDWORD(v5) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v5) << 32));
    uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
    if (*v7 >= 0x2Fu)
    {
      uint64_t v8 = v7[23];
      if (v8)
      {
        if (!*((unsigned char *)v6 + v8))
        {
          uint64_t v9 = *(void *)(v3 + 4272);
          char v10 = (unsigned int *)sub_2D5EC4(v9, HIDWORD(v5) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v5) << 32), (v5 & 2) == 0);
          sub_2D5904(v9, v10, 0, (char **)(v9 + 7800));
          uint64_t v43 = 0;
          uint64_t v44 = 0;
          uint64_t v42 = 0;
          unint64_t v11 = *(unsigned char **)(v9 + 7800);
          uint64_t v12 = *(unsigned char **)(v9 + 7808);
          uint64_t v13 = v12 - v11;
          if (v12 != v11)
          {
            if (v13 < 0) {
              sub_2E00();
            }
            unint64_t v14 = (char *)operator new(v12 - v11);
            memcpy(v14, v11, v13 - 1);
            if ((unint64_t)v13 >= 0x18)
            {
              uint64_t v15 = 0;
              uint64_t v16 = 0;
              uint64_t v17 = 8 * (v13 >> 3);
              while (1)
              {
                uint64_t v19 = *(void *)&v14[v15];
                uint64_t v20 = (int *)sub_2D5D58(*(void *)(v3 + 4272), v19 & 0xFFFFFFFFFFFFLL);
                uint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
                unsigned int v22 = *v21;
                if ((v19 & 0xFF000000000000) != 0)
                {
                  if (v22 >= 0xB)
                  {
                    unsigned int v23 = v21[5];
                    if (v23)
                    {
                      int v18 = 1;
                      goto LABEL_10;
                    }
                  }
                }
                else if (v22 >= 0xB)
                {
                  unsigned int v23 = v21[5];
                  if (v23)
                  {
                    int v18 = 2;
LABEL_10:
                    if ((*(int *)((char *)v20 + v23) & v18) != 0) {
                      ++v16;
                    }
                  }
                }
                v15 += 8;
                if (v17 == v15)
                {
                  if (v16 >= 2)
                  {
                    __p[0] = 0;
                    __p[1] = 0;
                    uint64_t v40 = 0;
                    uint64_t v41 = -1;
                    LODWORD(v29) = 0;
                    *((void *)&v29 + 1) = 0;
                    uint64_t v30 = 0;
                    char v31 = 0;
                    uint64_t v32 = 0x3FF0000000000000;
                    char v33 = 1;
                    uint64_t v34 = 0;
                    uint64_t v35 = 0;
                    char v36 = 0;
                    int v37 = 36000;
                    char v38 = 0;
                    unint64_t v46 = v5;
                    sub_BF6964((char **)__p, &v46, &v29);
                    uint64_t v24 = a1[1];
                    uint64_t v25 = *(void **)(v24 + 8);
                    if ((unint64_t)v25 >= *(void *)(v24 + 16))
                    {
                      unint64_t v26 = sub_D128A0((void **)v24, (uint64_t)__p);
                      unint64_t v27 = __p[0];
                      *(void *)(v24 + 8) = v26;
                      if (v27)
                      {
                        __p[1] = v27;
                        operator delete(v27);
                      }
                    }
                    else
                    {
                      void *v25 = 0;
                      v25[1] = 0;
                      v25[2] = 0;
                      *(_OWORD *)uint64_t v25 = *(_OWORD *)__p;
                      v25[2] = v40;
                      __p[1] = 0;
                      uint64_t v40 = 0;
                      __p[0] = 0;
                      v25[3] = v41;
                      *(void *)(v24 + 8) = v25 + 4;
                    }
                  }
                  break;
                }
              }
            }
            operator delete(v14);
          }
        }
      }
    }
  }
  return 0;
}

void sub_100BA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_100BA74(uint64_t a1, unsigned int *a2, unint64_t *a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = *a2;
  unint64_t v8 = 265 * ((~v7 + (v7 << 21)) ^ ((unint64_t)(~v7 + (v7 << 21)) >> 24));
  unint64_t v9 = 2147483649u * ((21 * (v8 ^ (v8 >> 14))) ^ ((21 * (v8 ^ (v8 >> 14))) >> 28));
  char v10 = (void *)(a1 + 48 * (((BYTE1(v9) ^ BYTE2(v9)) ^ BYTE3(v9)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  uint64_t v13 = 0x101010101010101 * (v9 & 0x7F);
  while (1)
  {
    unint64_t v14 = v11 & v12;
    uint64_t v15 = *(void *)(*v10 + v14);
    unint64_t v16 = ((v15 ^ v13) - 0x101010101010101) & ~(v15 ^ v13) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_6:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v6 += 8;
    unint64_t v11 = v6 + v14;
  }
  uint64_t v17 = v10[1];
  while (1)
  {
    unint64_t v18 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v12;
    if (*(_DWORD *)(v17 + 8 * v18) == v7) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_6;
    }
  }
  if (v12 == v18)
  {
LABEL_9:
    ++*(_DWORD *)(a1 + 816);
    unint64_t v19 = *(void *)(a1 + 776) - *(void *)(a1 + 768);
    sub_ED2D48(a1, a2, (uint64_t)&v34);
    uint64_t v20 = v35;
    uint64_t v21 = *(void *)(v34 + 8);
    if (v36) {
      *(_DWORD *)(v21 + 8 * v35) = *a2;
    }
    *(_DWORD *)(v21 + 8 * v20 + 4) = v19 >> 4;
    sub_B717DC((char **)(a1 + 768), a2, a3);
    unsigned int v22 = (uint64_t *)(a1 + 824);
    unint64_t v23 = (v19 >> 4);
    uint64_t v24 = *(void *)(a1 + 848);
    if (v23 < (*(void *)(a1 + 856) - v24) >> 2 && *(_DWORD *)(v24 + 4 * v23) != -1)
    {
      unint64_t v25 = v19 >> 4;
LABEL_14:
      sub_5221BC(v22, v25, a3);
      return 1;
    }
    unint64_t v25 = v19 >> 4;
LABEL_16:
    sub_521F5C((uint64_t)v22, v25, a3);
    return 1;
  }
  uint64_t v27 = v17 + 8 * v18;
  unsigned int v29 = *(_DWORD *)(v27 + 4);
  uint64_t v28 = (unsigned int *)(v27 + 4);
  uint64_t v30 = *(void *)(a1 + 768) + 16 * v29;
  int64_t v32 = *(void *)(v30 + 8);
  char v31 = (unint64_t *)(v30 + 8);
  if ((uint64_t)*a3 < v32)
  {
    ++*(_DWORD *)(a1 + 816);
    unint64_t *v31 = *a3;
    unsigned int v22 = (uint64_t *)(a1 + 824);
    unint64_t v25 = *v28;
    uint64_t v33 = *(void *)(a1 + 848);
    if (v25 < (*(void *)(a1 + 856) - v33) >> 2 && *(_DWORD *)(v33 + 4 * v25) != -1) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  return 0;
}

void *sub_100BCBC(void **a1, __n128 *a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v6 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 59) {
      sub_188D718();
    }
    unint64_t v8 = (__n128 *)operator new(32 * v7);
  }
  else
  {
    unint64_t v8 = 0;
  }
  sub_45E5B0(&v8[2 * v3], a2);
  char v10 = v9 + 32;
  uint64_t v12 = (char *)*a1;
  unint64_t v11 = (char *)a1[1];
  if (v11 != *a1)
  {
    uint64_t v13 = 0;
    do
    {
      unint64_t v14 = &v9[v13];
      uint64_t v15 = &v11[v13];
      *(_DWORD *)&v9[v13 - 16] = *(_DWORD *)&v11[v13 - 16];
      if (*(_DWORD *)&v11[v13 - 16] <= 1u) {
        *((_OWORD *)v14 - 2) = *((_OWORD *)v15 - 2);
      }
      *(v14 - 8) = *(v15 - 8);
      v13 -= 32;
    }
    while (&v11[v13] != v12);
    unint64_t v11 = (char *)*a1;
    v9 += v13;
  }
  *a1 = v9;
  a1[1] = v10;
  a1[2] = &v8[2 * v7];
  if (v11) {
    operator delete(v11);
  }
  return v10;
}

void sub_100BDE8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BE00()
{
  unk_25FD48F = 16641;
  word_25FD478 = 65;
  byte_25FD4A7 = 1;
  byte_25FD491 = 0;
}

uint64_t sub_100BE28(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = sub_101034C(a1, a4, a2);
  *(_OWORD *)(v8 + 232) = 0u;
  uint64_t v9 = v8 + 232;
  *(_OWORD *)(v8 + 248) = 0u;
  *(_OWORD *)(v8 + 264) = 0u;
  sub_ED82AC(v8 + 280, a3);
  *(void *)(a1 + 4440) = sub_3750CC(a3);
  sub_F2CEBC();
  *(void *)(a1 + 9688) = sub_3750CC(a3);
  *(void *)(a1 + 9696) = sub_3766F8(a3);
  *(void *)(a1 + 9704) = sub_374D14(a3);
  *(void *)(a1 + 9712) = sub_376B90(a3);
  sub_3EAFD4(a1 + 9720, a3, a5);
  *(unsigned char *)(v9 + 9528) = a5;
  char v10 = (void *)sub_100BFB4((uint64_t)a3);
  sub_1068CE4((uint64_t **)(a1 + 9768), a3, v10, a5);
  sub_1011784(a1 + 9952);
  return a1;
}

void sub_100BF30(_Unwind_Exception *a1)
{
  if ((char)v3[207] < 0) {
    operator delete(*(void **)(v1 + 9864));
  }
  if (*v3)
  {
    sub_3A6230((void *)(v1 + 4504));
    *uint64_t v3 = 0;
  }
  sub_C62E9C(v2);
  unint64_t v5 = *(void **)(v1 + 56);
  if (v5)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BFB4(uint64_t a1)
{
  HIBYTE(v12[2]) = 19;
  strcpy((char *)v12, "DrivingPathAnalyzer");
  uint64_t v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  uint64_t v1 = sub_374CDC(a1, (uint64_t)v12, (uint64_t *)&v9);
  char v8 = 7;
  strcpy((char *)__p, "default");
  uint64_t v2 = sub_560F4(v1, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v3 = (void **)v9;
  if (v9)
  {
    unint64_t v4 = v10;
    unint64_t v5 = v9;
    if (v10 != v9)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v3);
      unint64_t v5 = v9;
    }
    char v10 = v3;
    operator delete(v5);
  }
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  return v2;
}

void sub_100C0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_1A668(&a15);
    if ((a23 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668(&a15);
    if ((a23 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a18);
  _Unwind_Resume(a1);
}

void sub_100C138(uint64_t a1, void *a2)
{
  sub_725D0((uint64_t)v115);
  sub_100CB14(a1, (uint64_t)a2, &v113);
  *(void *)(a1 + 240) = (unint64_t)sub_72688((uint64_t)v115);
  sub_100D308(a1, (uint64_t)a2, &v111);
  unsigned int v4 = *(_DWORD *)(a1 + 80);
  if (!v4)
  {
    uint64_t v6 = sub_1005690((uint64_t)a2);
    goto LABEL_13;
  }
  if (v111 == v112)
  {
    uint64_t v6 = 0;
    goto LABEL_13;
  }
  unint64_t v5 = v112 - (unsigned char *)v111 - 4;
  if (v5 >= 0x1C)
  {
    uint64_t v8 = (v5 >> 2) + 1;
    unint64_t v7 = (char *)v111 + 4 * (v8 & 0x7FFFFFFFFFFFFFF8);
    int32x4_t v9 = vdupq_n_s32(v4);
    char v10 = (int32x4_t *)((char *)v111 + 16);
    int64x2_t v11 = 0uLL;
    int8x16_t v12 = (int8x16_t)vdupq_n_s64(1uLL);
    uint64_t v13 = v8 & 0x7FFFFFFFFFFFFFF8;
    int64x2_t v14 = 0uLL;
    int64x2_t v15 = 0uLL;
    int64x2_t v16 = 0uLL;
    do
    {
      int32x4_t v17 = vtstq_s32(v10[-1], v9);
      v18.i64[0] = v17.u32[0];
      v18.i64[1] = v17.u32[1];
      int64x2_t v19 = (int64x2_t)vandq_s8(v18, v12);
      v18.i64[0] = v17.u32[2];
      v18.i64[1] = v17.u32[3];
      int64x2_t v20 = (int64x2_t)vandq_s8(v18, v12);
      int32x4_t v21 = vtstq_s32(*v10, v9);
      v18.i64[0] = v21.u32[0];
      v18.i64[1] = v21.u32[1];
      int64x2_t v22 = (int64x2_t)vandq_s8(v18, v12);
      v18.i64[0] = v21.u32[2];
      v18.i64[1] = v21.u32[3];
      int64x2_t v14 = vaddq_s64(v14, v20);
      int64x2_t v11 = vaddq_s64(v11, v19);
      int64x2_t v16 = vaddq_s64(v16, (int64x2_t)vandq_s8(v18, v12));
      int64x2_t v15 = vaddq_s64(v15, v22);
      v10 += 2;
      v13 -= 8;
    }
    while (v13);
    uint64_t v6 = vaddvq_s64(vaddq_s64(vaddq_s64(v15, v11), vaddq_s64(v16, v14)));
    if (v8 == (v8 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = (char *)v111;
  }
  do
  {
    int v23 = *(_DWORD *)v7;
    v7 += 4;
    if ((v23 & v4) != 0) {
      ++v6;
    }
  }
  while (v7 != v112);
LABEL_13:
  *(void *)(a1 + 248) = (unint64_t)(sub_72688((uint64_t)v115) - (double)*(unint64_t *)(a1 + 240));
  if (v6)
  {
    sub_100DE8C((uint64_t)a2, &v109);
    __n128 __p = 0;
    int v107 = 0;
    uint64_t v108 = 0;
    unsigned int v24 = sub_1005690((uint64_t)a2);
    uint64_t v25 = sub_1005690((uint64_t)a2);
    double v26 = *(double *)a1;
    unsigned int v105 = 0;
    if (v24)
    {
      uint64_t v95 = 0;
      uint64_t v89 = a1 + 280;
      unint64_t v90 = (v26 * (double)(unint64_t)v25 + 0.5);
      uint64_t v92 = (uint64_t)a2;
      unsigned int v93 = v24;
      uint64_t v97 = a1;
      unsigned int v91 = v24;
      while (sub_1005690((uint64_t)a2) < v90 && *(_DWORD *)(a1 + 276) < *(_DWORD *)(a1 + 88))
      {
        sub_10056A4((uint64_t)a2, &v105, (uint64_t)&v101);
        uint64_t v27 = v104;
        uint64_t v28 = v102;
        if (v104 == (unint64_t)v102) {
          goto LABEL_16;
        }
        long long v29 = v101;
        while (!sub_10022FC(*(void *)v29 + 152 * v28))
        {
          uint64_t v28 = *(unsigned int *)(**((void **)&v29 + 1) + 4 * v28);
          if (v28 == v27)
          {
            uint64_t v28 = v27;
            break;
          }
        }
        if (v28 == v104) {
          goto LABEL_16;
        }
        uint64_t v100 = *(void *)sub_5D0188(&v109, v105);
        uint64_t v30 = sub_100231C(*(void *)v29 + 152 * v28);
        sub_ED8808(v89, (((*(void *)(v30 + 32) >> 16) & 0xFFFF0000 | (*(void *)(v30 + 32) << 32) | (2* ((*(void *)(v30 + 32) & 0xFF000000000000) == 0)))+ 4 * (unsigned __int16)*(_DWORD *)(v30 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v30 + 88) & 1, 0, &__p, 0);
        int64_t v32 = (int **)__p;
        char v31 = v107;
        unint64_t v96 = v107;
        while (2)
        {
          if (v32 != v31)
          {
            long long v118 = v101;
            uint64_t v119 = v102;
            long long v116 = v103;
            uint64_t v117 = v104;
            if ((sub_1011974((uint64_t)&v118, (uint64_t)&v116, (uint64_t)v32) & 1) != 0 || ((_BYTE)v32[11] & 3) == 1) {
              goto LABEL_27;
            }
            uint64_t v33 = (unsigned __int16 *)((char *)*v32 - **v32);
            if (*v33 < 0xBu || (uint64_t v34 = v33[5]) == 0 || (*((unsigned char *)*v32 + v34 + 1) & 0x10) == 0)
            {
              uint64_t v35 = v32[5];
              char v36 = (unsigned __int16 *)((char *)v35 - *v35);
              if (*v36 >= 0xBu)
              {
                uint64_t v37 = v36[5];
                if (v37)
                {
                  if ((*((unsigned char *)v35 + v37 + 1) & 0x10) != 0) {
                    goto LABEL_27;
                  }
                }
              }
            }
            double v99 = 0.0;
            double v38 = *(double *)sub_7BB804(&v113, v105);
            double v99 = v38;
            ++*(_DWORD *)(a1 + 260);
            if (v105 >= v24) {
              ++*(_DWORD *)(a1 + 264);
            }
            sub_100E0B8(a1, (uint64_t)v32, a2, v100, &v111, &v118, v38);
            long long v94 = v118;
            sub_10038BC((uint64_t)a2, (long long **)&v118);
            uint64_t v39 = (int **)*((void *)&v118 + 1);
            unint64_t v98 = (int **)*((void *)&v118 + 1);
            uint64_t v40 = (int **)v118;
LABEL_46:
            if (v40 == v39)
            {
              a2 = (void *)v92;
              unint64_t v82 = sub_1005690(v92);
              unsigned int v24 = v91;
              uint64_t v83 = v113;
              unint64_t v84 = (v114 - v113) >> 3;
              if (v82 <= v84)
              {
                if (v82 < v84) {
                  char v114 = &v113[8 * v82];
                }
              }
              else
              {
                sub_96D18((uint64_t)&v113, v82 - v84, (uint64_t *)&v99);
                uint64_t v83 = v113;
              }
              *(double *)&v83[8 * v105] = v99;
              unint64_t v85 = sub_1005690(v92);
              unint64_t v86 = (v112 - (unsigned char *)v111) >> 2;
              if (v85 <= v86)
              {
                if (v85 < v86) {
                  int v112 = (char *)v111 + 4 * v85;
                }
              }
              else
              {
                sub_500DC((uint64_t)&v111, v85 - v86, (const float *)v111 + v105);
              }
              unint64_t v87 = sub_1005690(v92);
              unint64_t v88 = (v110 - (unsigned char *)v109) >> 3;
              if (v87 <= v88)
              {
                if (v87 < v88) {
                  uint64_t v110 = (char *)v109 + 8 * v87;
                }
              }
              else
              {
                sub_2F898C((unint64_t *)&v109, v87 - v88, &v100);
              }
              if ((void)v118)
              {
                *((void *)&v118 + 1) = v118;
                operator delete((void *)v118);
              }
              v95 -= 0x5555555555555555 * ((uint64_t)(*((void *)&v94 + 1) - v94) >> 5);
LABEL_27:
              v32 += 12;
              char v31 = v96;
              continue;
            }
            if (*(unsigned char *)(a1 + 48))
            {
              uint64_t v43 = (unsigned __int16 *)((char *)*v40 - **v40);
              if (*v43 >= 0x2Fu)
              {
                uint64_t v44 = v43[23];
                if (v44)
                {
                  if (*((unsigned char *)*v40 + v44) != 32) {
                    goto LABEL_45;
                  }
                }
              }
            }
            uint64_t v45 = *(void *)(a1 + 9696);
            unint64_t v46 = (unint64_t)v40[4];
            int v120 = 1;
            int v121 = v46;
            *(void *)&long long v116 = &v120;
            *((void *)&v116 + 1) = &v121;
            unint64_t v47 = *(void *)(v45 + 3856) + 1;
            *(void *)(v45 + 3856) = v47;
            if (*(void *)v45)
            {
              uint64_t v48 = v45 + 16;
              if (*(_DWORD *)(v45 + 2128) == v46)
              {
                unsigned int v49 = 88;
                goto LABEL_60;
              }
              if (*(_DWORD *)(v45 + 2152) == v46)
              {
                unsigned int v49 = 89;
                goto LABEL_60;
              }
              if (*(_DWORD *)(v45 + 2176) == v46)
              {
                unsigned int v49 = 90;
                goto LABEL_60;
              }
              if (*(_DWORD *)(v45 + 2200) == v46)
              {
                unsigned int v49 = 91;
LABEL_60:
                ++*(void *)(v45 + 3864);
                uint64_t v50 = v48 + 24 * v49;
                *(void *)(v50 + 8) = v47;
                uint64_t v51 = *(unsigned int **)(v50 + 16);
                if (v51)
                {
LABEL_61:
                  uint64_t v52 = (int *)((char *)v51 + *v51);
                  char v53 = (unsigned __int16 *)((char *)v52 - *v52);
                  double v41 = 0.0;
                  if (*v53 < 0xBu) {
                    goto LABEL_42;
                  }
                  if (!v53[5]) {
                    goto LABEL_42;
                  }
                  int v54 = (int *)((char *)v52 + v53[5] + *(unsigned int *)((char *)v52 + v53[5]));
                  if (*v54 <= WORD2(v46)) {
                    goto LABEL_42;
                  }
                  uint64_t v55 = 2 * WORD2(v46);
                  uint64_t v56 = (uint64_t)&v54[v55 + 1];
                  if (!*(_DWORD *)v56) {
                    goto LABEL_42;
                  }
                  char v57 = BYTE2(v54[v55 + 2]);
                  uint64_t v58 = sub_2E5F98(v45, *(_DWORD *)v56, 1);
                  if (v58)
                  {
                    char v59 = &v58[-*(int *)v58];
                    unsigned int v60 = *(unsigned __int16 *)v59;
                    if (((v46 & 0xFF000000000000) != 0) == (v57 & 2) >> 1)
                    {
                      a1 = v97;
                      if (v60 < 7) {
                        goto LABEL_42;
                      }
                      int v61 = *((unsigned __int16 *)v59 + 3);
                      if (!v61) {
                        goto LABEL_42;
                      }
                    }
                    else
                    {
                      a1 = v97;
                      if (v60 < 5) {
                        goto LABEL_42;
                      }
                      int v61 = *((unsigned __int16 *)v59 + 2);
                      if (!v61) {
                        goto LABEL_42;
                      }
                    }
                    long long v71 = &v58[v61 + *(unsigned int *)&v58[v61]];
                    uint64_t v72 = *(unsigned __int16 *)(v56 + 4);
                    if (*(_DWORD *)v71 > v72)
                    {
                      BOOL v73 = &v71[4 * v72 + 4 + *(unsigned int *)&v71[4 * v72 + 4]];
                      long long v74 = &v73[-*(int *)v73];
                      unsigned int v75 = *(unsigned __int16 *)v74;
                      if (v75 >= 0xB && *((_WORD *)v74 + 5))
                      {
                        unsigned int v76 = *(unsigned __int16 *)&v73[*((unsigned __int16 *)v74 + 5)];
                        unsigned int v77 = *(unsigned __int16 *)(v45 + 3880);
                        if (!*(_WORD *)(v45 + 3880)) {
                          goto LABEL_96;
                        }
                      }
                      else
                      {
                        unsigned int v76 = 0xFFFF;
                        unsigned int v77 = *(unsigned __int16 *)(v45 + 3880);
                        if (!*(_WORD *)(v45 + 3880)) {
                          goto LABEL_96;
                        }
                      }
                      if (v75 >= 0x11
                        && (uint64_t v78 = *((unsigned __int16 *)v74 + 8)) != 0
                        && (long long v79 = &v73[v78 + *(unsigned int *)&v73[v78]], *(_DWORD *)v79 >= v77)
                        && (unsigned int v80 = *(unsigned __int16 *)&v79[2 * v77 + 2], (unsigned __int16)(v80 + 1) > 1u))
                      {
                        double v81 = (double)v80;
LABEL_98:
                        double v41 = v81 / 1000.0;
                      }
                      else
                      {
LABEL_96:
                        if (v76 != 0xFFFF)
                        {
                          double v81 = (double)v76;
                          goto LABEL_98;
                        }
                        double v41 = 0.3;
                      }
                    }
LABEL_42:
                    double v42 = v99;
                    if (v99 >= v41) {
                      double v42 = v41;
                    }
                    double v99 = v42;
LABEL_45:
                    v40 += 12;
                    uint64_t v39 = v98;
                    goto LABEL_46;
                  }
LABEL_41:
                  a1 = v97;
                  goto LABEL_42;
                }
              }
              else
              {
                unint64_t v62 = *(void *)(v45 + 2184);
                unint64_t v63 = *(void *)(v45 + 2160);
                unint64_t v64 = *(void *)(v45 + 2136);
                unint64_t v65 = *(void *)(v45 + 2208);
                uint64_t v51 = (unsigned int *)sub_2AB884(*(void *)v45, 22, v46, 1);
                if (v64 >= v47) {
                  unint64_t v66 = v47;
                }
                else {
                  unint64_t v66 = v64;
                }
                int v67 = 88;
                if (v64 >= v47) {
                  int v67 = 0;
                }
                if (v63 < v66)
                {
                  unint64_t v66 = v63;
                  int v67 = 89;
                }
                if (v62 < v66)
                {
                  int v67 = 90;
                  unint64_t v66 = v62;
                }
                BOOL v68 = v65 >= v66;
                unsigned int v69 = 91;
                if (v68) {
                  unsigned int v69 = v67;
                }
                uint64_t v70 = v48 + 24 * v69;
                *(_DWORD *)uint64_t v70 = v121;
                *(void *)(v70 + 8) = *(void *)(v45 + 3856);
                *(void *)(v70 + 16) = v51;
                a1 = v97;
                if (v51) {
                  goto LABEL_61;
                }
              }
            }
            sub_2E6128((int **)&v116);
            double v41 = 0.0;
            goto LABEL_41;
          }
          break;
        }
        if (*(unsigned char *)(a1 + 13)) {
          unsigned int v93 = sub_1005690((uint64_t)a2);
        }
LABEL_16:
        if (++v105 >= v93) {
          goto LABEL_119;
        }
      }
      ++*(_DWORD *)(a1 + 272);
    }
    else
    {
      LODWORD(v95) = 0;
    }
LABEL_119:
    *(_DWORD *)(a1 + 268) += v95;
    ++*(_DWORD *)(a1 + 256);
    *(void *)(a1 + 232) = (unint64_t)sub_72688((uint64_t)v115);
    if (__p)
    {
      int v107 = (int **)__p;
      operator delete(__p);
    }
    if (v109)
    {
      uint64_t v110 = (char *)v109;
      operator delete(v109);
    }
  }
  if (v111)
  {
    int v112 = (char *)v111;
    operator delete(v111);
  }
  if (v113)
  {
    char v114 = v113;
    operator delete(v113);
  }
}

void sub_100CA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v39 = *(void **)(v37 - 224);
    if (v39) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v39 = *(void **)(v37 - 224);
    if (v39)
    {
LABEL_3:
      *(void *)(v37 - 216) = v39;
      operator delete(v39);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_100CB14(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = sub_1005690(a2);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  double v81 = a3;
  if (!v5)
  {
    unint64_t v82 = 0;
    if (!*(unsigned char *)(a1 + 24)) {
      return;
    }
    goto LABEL_6;
  }
  if (v5 >> 61) {
    sub_2E00();
  }
  size_t v6 = 8 * v5;
  unint64_t v7 = (char *)operator new(8 * v5);
  *a3 = v7;
  uint64_t v8 = &v7[v6];
  v81[2] = &v7[v6];
  unint64_t v82 = v7;
  memset_pattern16(v7, &unk_20B8FA0, v6);
  v81[1] = v8;
  if (*(unsigned char *)(a1 + 24))
  {
LABEL_6:
    sub_1011AF0((uint64_t)v98);
    uint64_t v9 = sub_1005690(a2);
    unint64_t v10 = v9;
    __n128 __p = 0;
    uint64_t v96 = 0;
    unint64_t v97 = 0;
    if (v9)
    {
      if (v9 < 0) {
        sub_2E00();
      }
      unint64_t v11 = ((unint64_t)(v9 - 1) >> 6) + 1;
      __n128 __p = operator new(8 * v11);
      uint64_t v96 = 0;
      unint64_t v97 = v11;
      sub_43284(&__p, v10, 0);
    }
    uint64_t v12 = sub_1005964(a2);
    unint64_t v13 = *(void *)(v12 + 104) - *(void *)(v12 + 96);
    if ((v13 & 0x3FFFFFFFCLL) == 0)
    {
LABEL_102:
      if (__p) {
        operator delete(__p);
      }
      if (v106)
      {
        int v107 = v106;
        operator delete(v106);
      }
      if (v104)
      {
        unsigned int v105 = v104;
        operator delete(v104);
      }
      if (v101)
      {
        uint64_t v102 = (unsigned int *)v101;
        operator delete(v101);
      }
      if (v99)
      {
        uint64_t v100 = v99;
        operator delete(v99);
      }
      sub_328138((uint64_t)v98);
      return;
    }
    uint64_t v83 = (v13 >> 2);
    unint64_t v14 = 0;
    uint64_t v89 = a1;
    while (1)
    {
      unsigned int v94 = v14;
      unint64_t v84 = v14;
      if (((*(void *)((char *)__p + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        uint64_t v15 = 0;
        int v107 = v106;
        unsigned int v105 = v104;
        int v108 = 0;
        uint64_t v100 = v99;
        do
        {
          int32x4_t v17 = &v98[v15];
          if (*(void *)&v98[v15 + 16])
          {
            unint64_t v18 = *((void *)v17 + 3);
            if (v18 >= 0x80)
            {
              int64x2_t v16 = &v98[v15];
              operator delete(*(void **)&v98[v15]);
              v16[5] = 0;
              *int64x2_t v16 = &unk_20E1710;
              v16[1] = 0;
              v16[2] = 0;
              void v16[3] = 0;
            }
            else if (v18)
            {
              *((void *)v17 + 2) = 0;
              memset(*(void **)&v98[v15], 128, v18 + 8);
              *(unsigned char *)(*(void *)&v98[v15] + v18) = -1;
              unint64_t v19 = *((void *)v17 + 3);
              uint64_t v20 = v19 - (v19 >> 3);
              BOOL v21 = v19 == 7;
              uint64_t v22 = 6;
              if (!v21) {
                uint64_t v22 = v20;
              }
              *(void *)&v98[v15 + 40] = v22 - *((void *)v17 + 2);
            }
          }
          v15 += 48;
        }
        while (v15 != 768);
        uint64_t v102 = (unsigned int *)v101;
        int v103 = 0;
        v90[0] = 0;
        sub_100BA74((uint64_t)v98, &v94, v90);
        uint64_t v23 = v89;
        if (v108)
        {
          double v24 = 1.79769313e308;
          do
          {
            uint64_t v25 = (char *)v99 + 16 * *(unsigned int *)v104;
            unsigned int v93 = *(_DWORD *)v25;
            uint64_t v26 = *((void *)v25 + 1);
            sub_51325C((uint64_t)v98);
            if (v26 > *(void *)(v23 + 32)) {
              break;
            }
            if (v26 <= *(void *)(v23 + 40)) {
              *(void *)((char *)__p + (((unint64_t)v93 >> 3) & 0x1FFFFFF8)) |= 1 << v93;
            }
            sub_10056A4(a2, &v93, (uint64_t)v90);
            uint64_t v27 = v91;
            uint64_t v28 = v92;
            if (v91 != (unint64_t)v92)
            {
              long long v29 = (void *)v90[0];
              uint64_t v30 = (void *)v90[1];
              while (1)
              {
                char v31 = (unsigned int *)(*v29 + 152 * v27);
                if (sub_10022FC((uint64_t)v31))
                {
                  int64_t v32 = (int **)sub_100231C((uint64_t)v31);
                  v111[0] = sub_4F44(v31);
                  uint64_t v33 = (unsigned __int16 *)((char *)*v32 - **v32);
                  if (*v33 >= 9u && (uint64_t v34 = v33[4]) != 0) {
                    uint64_t v35 = *(unsigned int *)((char *)*v32 + v34);
                  }
                  else {
                    uint64_t v35 = 0;
                  }
                  v109[0] = (int *)(v35 + v26);
                  sub_100BA74((uint64_t)v98, v111, (unint64_t *)v109);
                  if (!*(unsigned char *)(v23 + 48)) {
                    break;
                  }
                  char v36 = (unsigned __int16 *)((char *)*v32 - **v32);
                  if (*v36 < 0x2Fu) {
                    break;
                  }
                  uint64_t v37 = v36[23];
                  if (!v37 || *((unsigned char *)*v32 + v37) == 32) {
                    break;
                  }
                }
LABEL_34:
                uint64_t v27 = *(unsigned int *)(*v30 + 4 * v27);
                if (v27 == v28) {
                  goto LABEL_25;
                }
              }
              uint64_t v38 = v23;
              uint64_t v39 = *(void *)(v23 + 9696);
              unint64_t v40 = (unint64_t)v32[4];
              int v110 = 1;
              v111[0] = v40;
              v109[0] = &v110;
              v109[1] = (int *)v111;
              unint64_t v41 = *(void *)(v39 + 3856) + 1;
              *(void *)(v39 + 3856) = v41;
              if (*(void *)v39)
              {
                uint64_t v42 = v39 + 16;
                if (*(_DWORD *)(v39 + 2128) == v40)
                {
                  unsigned int v43 = 88;
                  goto LABEL_53;
                }
                if (*(_DWORD *)(v39 + 2152) == v40)
                {
                  unsigned int v43 = 89;
                  goto LABEL_53;
                }
                if (*(_DWORD *)(v39 + 2176) == v40)
                {
                  unsigned int v43 = 90;
                  goto LABEL_53;
                }
                if (*(_DWORD *)(v39 + 2200) == v40)
                {
                  unsigned int v43 = 91;
LABEL_53:
                  ++*(void *)(v39 + 3864);
                  uint64_t v44 = v42 + 24 * v43;
                  *(void *)(v44 + 8) = v41;
                  uint64_t v45 = *(unsigned int **)(v44 + 16);
                  if (v45)
                  {
LABEL_54:
                    unint64_t v46 = (int *)((char *)v45 + *v45);
                    unint64_t v47 = (unsigned __int16 *)((char *)v46 - *v46);
                    double v48 = 0.0;
                    if (*v47 < 0xBu)
                    {
                      uint64_t v23 = v38;
                      goto LABEL_32;
                    }
                    uint64_t v23 = v38;
                    if (!v47[5]) {
                      goto LABEL_32;
                    }
                    unsigned int v49 = (int *)((char *)v46 + v47[5] + *(unsigned int *)((char *)v46 + v47[5]));
                    if (*v49 <= WORD2(v40)) {
                      goto LABEL_32;
                    }
                    uint64_t v50 = 2 * WORD2(v40);
                    uint64_t v51 = (uint64_t)&v49[v50 + 1];
                    if (!*(_DWORD *)v51) {
                      goto LABEL_32;
                    }
                    char v52 = BYTE2(v49[v50 + 2]);
                    char v53 = sub_2E5F98(v39, *(_DWORD *)v51, 1);
                    if (v53)
                    {
                      int v54 = &v53[-*(int *)v53];
                      unsigned int v55 = *(unsigned __int16 *)v54;
                      if (((v40 & 0xFF000000000000) != 0) != (v52 & 2) >> 1)
                      {
                        uint64_t v23 = v89;
                        if (v55 < 5) {
                          goto LABEL_32;
                        }
                        int v56 = *((unsigned __int16 *)v54 + 2);
                        if (!v56) {
                          goto LABEL_32;
                        }
LABEL_80:
                        unint64_t v63 = &v53[v56 + *(unsigned int *)&v53[v56]];
                        uint64_t v64 = *(unsigned __int16 *)(v51 + 4);
                        if (*(_DWORD *)v63 <= v64) {
                          goto LABEL_32;
                        }
                        unint64_t v65 = &v63[4 * v64 + 4 + *(unsigned int *)&v63[4 * v64 + 4]];
                        unint64_t v66 = &v65[-*(int *)v65];
                        unsigned int v67 = *(unsigned __int16 *)v66;
                        if (v67 >= 0xB && *((_WORD *)v66 + 5))
                        {
                          unsigned int v68 = *(unsigned __int16 *)&v65[*((unsigned __int16 *)v66 + 5)];
                          unsigned int v69 = *(unsigned __int16 *)(v39 + 3880);
                          if (!*(_WORD *)(v39 + 3880)) {
                            goto LABEL_90;
                          }
                        }
                        else
                        {
                          unsigned int v68 = 0xFFFF;
                          unsigned int v69 = *(unsigned __int16 *)(v39 + 3880);
                          if (!*(_WORD *)(v39 + 3880)) {
                            goto LABEL_90;
                          }
                        }
                        if (v67 >= 0x11
                          && (uint64_t v70 = *((unsigned __int16 *)v66 + 8)) != 0
                          && (long long v71 = &v65[v70 + *(unsigned int *)&v65[v70]], *(_DWORD *)v71 >= v69)
                          && (unsigned int v72 = *(unsigned __int16 *)&v71[2 * v69 + 2], (unsigned __int16)(v72 + 1) > 1u))
                        {
                          double v73 = (double)v72;
                        }
                        else
                        {
LABEL_90:
                          if (v68 == 0xFFFF)
                          {
                            double v48 = 0.3;
                            goto LABEL_32;
                          }
                          double v73 = (double)v68;
                        }
                        double v48 = v73 / 1000.0;
                        goto LABEL_32;
                      }
                      uint64_t v23 = v89;
                      if (v55 >= 7)
                      {
                        int v56 = *((unsigned __int16 *)v54 + 3);
                        if (v56) {
                          goto LABEL_80;
                        }
                      }
LABEL_32:
                      if (v48 < v24) {
                        double v24 = v48;
                      }
                      goto LABEL_34;
                    }
LABEL_77:
                    uint64_t v23 = v89;
                    goto LABEL_32;
                  }
                }
                else
                {
                  unint64_t v85 = *(void *)(v39 + 2160);
                  unint64_t v57 = *(void *)(v39 + 2136);
                  unint64_t v86 = *(void *)(v39 + 2208);
                  unint64_t v87 = *(void *)(v39 + 2184);
                  uint64_t v45 = (unsigned int *)sub_2AB884(*(void *)v39, 22, v40, 1);
                  if (v57 >= v41) {
                    unint64_t v58 = v41;
                  }
                  else {
                    unint64_t v58 = v57;
                  }
                  int v59 = 88;
                  if (v57 >= v41) {
                    int v59 = 0;
                  }
                  if (v85 < v58)
                  {
                    unint64_t v58 = v85;
                    int v59 = 89;
                  }
                  if (v87 < v58)
                  {
                    int v59 = 90;
                    unint64_t v58 = v87;
                  }
                  BOOL v60 = v86 >= v58;
                  unsigned int v61 = 91;
                  if (v60) {
                    unsigned int v61 = v59;
                  }
                  uint64_t v62 = v42 + 24 * v61;
                  *(_DWORD *)uint64_t v62 = v111[0];
                  *(void *)(v62 + 8) = *(void *)(v39 + 3856);
                  *(void *)(v62 + 16) = v45;
                  uint64_t v38 = v89;
                  if (v45) {
                    goto LABEL_54;
                  }
                }
              }
              sub_2E6128(v109);
              double v48 = 0.0;
              goto LABEL_77;
            }
LABEL_25:
            ;
          }
          while (v108);
          if (v24 != 1.79769313e308)
          {
            long long v74 = (unsigned int *)v101;
            unsigned int v75 = v102;
            if (v101 != v102)
            {
              unsigned int v76 = v99;
              uint64_t v77 = *(void *)(v23 + 40);
              do
              {
                uint64_t v78 = *v74;
                if (v76[2 * v78 + 1] > v77) {
                  break;
                }
                uint64_t v79 = 8 * LODWORD(v76[2 * v78]);
                double v80 = *(double *)&v82[v79];
                if (v24 < v80) {
                  double v80 = v24;
                }
                *(double *)&v82[v79] = v80;
                ++v74;
              }
              while (v74 != v75);
            }
          }
        }
      }
      unint64_t v14 = v84 + 1;
      if (v84 + 1 == v83) {
        goto LABEL_102;
      }
    }
  }
}

void sub_100D29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  sub_5139D0(&a29);
  if (a11)
  {
    *(void *)(a10 + 8) = a11;
    operator delete(a11);
  }
  _Unwind_Resume(a1);
}

void sub_100D308(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = sub_1005690(a2);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v5)
  {
    if (v5 >> 62) {
      sub_2E00();
    }
    size_t v6 = 4 * v5;
    unint64_t v7 = (char *)operator new(4 * v5);
    *a3 = v7;
    uint64_t v8 = &v7[v6];
    a3[2] = &v7[v6];
    bzero(v7, v6);
    a3[1] = v8;
  }
  uint64_t v112 = a1 + 168;
  if (!*(unsigned char *)(a1 + 168)) {
    return;
  }
  uint64_t v121 = a1;
  if (*(uint64_t *)(a1 + 208) < 1)
  {
    uint64_t v120 = 0;
  }
  else
  {
    LODWORD(v120) = (*(_DWORD *)(a1 + 196) >> 1) & 1;
    HIDWORD(v120) = *(_DWORD *)(a1 + 196) & 1;
  }
  uint64_t v159 = 0;
  long long v157 = 0u;
  long long v158 = 0u;
  long long v155 = 0u;
  long long v156 = 0u;
  long long v153 = 0u;
  long long v154 = 0u;
  long long v152 = 0u;
  memset(v151, 0, sizeof(v151));
  unint64_t v9 = sub_1005690(a2);
  uint64_t v10 = sub_1005690(a2);
  sub_1011CE0((uint64_t)&v152, v9, 2 * v10);
  unint64_t v11 = (unsigned char *)*((void *)&v156 + 1);
  if (v9 > (uint64_t)(*((void *)&v157 + 1) - *((void *)&v156 + 1)) >> 2)
  {
    if (v9 >> 62) {
      sub_2E00();
    }
    uint64_t v12 = (unsigned char *)v157;
    unint64_t v13 = (char *)operator new(4 * v9);
    uint64_t v14 = v12 - v11;
    uint64_t v15 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFFCLL];
    int64x2_t v16 = v15;
    if (v12 == v11) {
      goto LABEL_18;
    }
    if ((unint64_t)(v14 - 4) >= 0x2C)
    {
      int64x2_t v16 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFFCLL];
      if (v12 - v13 - (v14 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
      {
        uint64_t v17 = v14 >> 2;
        unint64_t v18 = ((unint64_t)(v14 - 4) >> 2) + 1;
        uint64_t v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v20 = &v12[-v19];
        int64x2_t v16 = &v15[-v19];
        BOOL v21 = &v13[4 * v17 - 16];
        uint64_t v22 = (long long *)(v12 - 16);
        uint64_t v23 = v18 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v24 = *v22;
          *((_OWORD *)v21 - 1) = *(v22 - 1);
          *(_OWORD *)BOOL v21 = v24;
          v21 -= 32;
          v22 -= 2;
          v23 -= 8;
        }
        while (v23);
        uint64_t v12 = v20;
        if (v18 == (v18 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_18:
          *((void *)&v156 + 1) = v16;
          *(void *)&long long v157 = v15;
          *((void *)&v157 + 1) = &v13[4 * v9];
          if (v11) {
            operator delete(v11);
          }
          goto LABEL_20;
        }
      }
    }
    else
    {
      int64x2_t v16 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      int v25 = *((_DWORD *)v12 - 1);
      v12 -= 4;
      *((_DWORD *)v16 - 1) = v25;
      v16 -= 4;
    }
    while (v12 != v11);
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v141 = v151;
  sub_1011FA4(v142, 0x400u);
  uint64_t v26 = sub_1005964(a2);
  uint64_t v27 = v121;
  unint64_t v28 = *(void *)(v26 + 104) - *(void *)(v26 + 96);
  uint64_t v119 = a3;
  if ((v28 & 0x3FFFFFFFCLL) != 0)
  {
    unint64_t v29 = 0;
    uint64_t v113 = (v28 >> 2);
    while (1)
    {
      LODWORD(__p) = v29;
      if (v29 >= ((*((void *)&v152 + 1) - (void)v152) >> 2))
      {
        unint64_t v30 = (uint64_t)(*((void *)&v152 + 1) - v152) >> 2;
        unint64_t v31 = v29 + 1;
        if (v30 <= v29)
        {
          LODWORD(v135) = -1;
          sub_500DC((uint64_t)&v152, v31 - v30, (const float *)&v135);
        }
        LODWORD(v135) = 0;
        unint64_t v32 = (uint64_t)(v157 - *((void *)&v156 + 1)) >> 2;
        if (v32 <= v29)
        {
          sub_500DC((uint64_t)&v156 + 8, v31 - v32, (const float *)&v135);
        }
        else if (v31 < v32)
        {
          *(void *)&long long v157 = *((void *)&v156 + 1) + 4 * v31;
        }
      }
      unint64_t v115 = v29;
      sub_10056A4(a2, (unsigned int *)&__p, (uint64_t)&v135);
      uint64_t v33 = v137;
      uint64_t v34 = p_p;
      if (v137 != (unint64_t)p_p) {
        break;
      }
LABEL_22:
      unint64_t v29 = v115 + 1;
      if (v115 + 1 == v113) {
        goto LABEL_133;
      }
    }
    uint64_t v35 = v135;
    uint64_t v123 = p_p;
    int v124 = v136;
    uint64_t v122 = (uint64_t)v135;
    while (1)
    {
      char v36 = (unsigned int *)(*v35 + 152 * v33);
      if (sub_10022FC((uint64_t)v36)) {
        break;
      }
LABEL_32:
      uint64_t v33 = *(unsigned int *)(*v124 + 4 * v33);
      if (v33 == v34) {
        goto LABEL_22;
      }
    }
    uint64_t v37 = (void *)sub_100231C((uint64_t)v36);
    if (!HIDWORD(v120))
    {
LABEL_80:
      if (!v120) {
        goto LABEL_126;
      }
      unint64_t v72 = __p;
      unsigned int v73 = sub_4F44(v36);
      unsigned int v74 = v73;
      unsigned int v75 = (unsigned __int16 *)(*v37 - *(int *)*v37);
      if (*v75 >= 9u && (uint64_t v76 = v75[4]) != 0) {
        uint64_t v77 = *(unsigned int *)(*v37 + v76);
      }
      else {
        uint64_t v77 = 0;
      }
      if (v73 <= v72) {
        unsigned int v78 = v72;
      }
      else {
        unsigned int v78 = v73;
      }
      uint64_t v79 = v152;
      uint64_t v80 = *((void *)&v152 + 1) - v152;
      if (v78 >= ((*((void *)&v152 + 1) - (void)v152) >> 2))
      {
        unint64_t v81 = v80 >> 2;
        unint64_t v82 = v78 + 1;
        if (v81 <= v78)
        {
          LODWORD(v126) = -1;
          if (v82 <= v81)
          {
            if (v82 < v81) {
              *((void *)&v152 + 1) = v152 + 4 * v82;
            }
          }
          else
          {
            sub_500DC((uint64_t)&v152, v82 - v81, (const float *)&v126);
          }
        }
        LODWORD(v126) = 0;
        unint64_t v83 = (uint64_t)(v157 - *((void *)&v156 + 1)) >> 2;
        if (v82 <= v83)
        {
          if (v82 < v83) {
            *(void *)&long long v157 = *((void *)&v156 + 1) + 4 * v82;
          }
        }
        else
        {
          sub_500DC((uint64_t)&v156 + 8, v82 - v83, (const float *)&v126);
        }
        uint64_t v79 = v152;
        uint64_t v80 = *((void *)&v152 + 1) - v152;
      }
      unint64_t v116 = v116 & 0xFFFFFFFF00000000 | v74;
      *(void *)&long long v126 = v116;
      *((void *)&v126 + 1) = v77;
      unint64_t v84 = v80 >> 2;
      if (v80 >> 2 <= v72)
      {
        unint64_t v85 = (v72 + 1);
        LODWORD(v132) = -1;
        if (v85 <= v84)
        {
          if (v85 < v84) {
            *((void *)&v152 + 1) = v79 + 4 * v85;
          }
        }
        else
        {
          sub_500DC((uint64_t)&v152, v85 - v84, (const float *)&v132);
          uint64_t v79 = v152;
        }
      }
      unint64_t v86 = (char *)*((void *)&v155 + 1);
      if (*((void *)&v155 + 1) < (unint64_t)v156)
      {
        **((_DWORD **)&v155 + 1) = *(_DWORD *)(v79 + 4 * v72);
        uint64_t v87 = (uint64_t)(v86 + 4);
LABEL_125:
        *((void *)&v155 + 1) = v87;
        *(_DWORD *)(v79 + 4 * v72) = ((void)v154 - *((void *)&v153 + 1)) >> 4;
        sub_3BFF8((char **)&v153 + 1, &v126);
        ++*(_DWORD *)(*((void *)&v156 + 1) + 4 * v72);
        a3 = v119;
        uint64_t v27 = v121;
        uint64_t v35 = (void *)v122;
        uint64_t v34 = v123;
LABEL_126:
        int v104 = sub_100EEC0(v27, (uint64_t)v36);
        char v105 = v104;
        if (v104)
        {
          int v106 = *(_DWORD *)(v27 + 196);
          if (v106 & 1) != 0 && (v104)
          {
            *(void *)&long long v126 = 0;
            DWORD2(v126) = 1;
            LODWORD(v132) = __p;
            sub_1012110((uint64_t)v142, (unsigned int *)&v132, (uint64_t)&v126);
            int v106 = *(_DWORD *)(v27 + 196);
          }
          if ((v106 & 2) != 0 && (v105 & 2) != 0)
          {
            int v107 = sub_4F44(v36);
            *(void *)&long long v126 = 0;
            DWORD2(v126) = 2;
            LODWORD(v132) = v107;
            sub_1012110((uint64_t)v142, (unsigned int *)&v132, (uint64_t)&v126);
          }
        }
        goto LABEL_32;
      }
      unint64_t v88 = (char *)v155;
      uint64_t v89 = (uint64_t)(*((void *)&v155 + 1) - v155) >> 2;
      unint64_t v90 = v89 + 1;
      if ((unint64_t)(v89 + 1) >> 62) {
        sub_2E00();
      }
      uint64_t v91 = v156 - v155;
      if ((uint64_t)(v156 - v155) >> 1 > v90) {
        unint64_t v90 = v91 >> 1;
      }
      if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v92 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v92 = v90;
      }
      if (v92)
      {
        if (v92 >> 62) {
          sub_188D718();
        }
        unsigned int v93 = operator new(4 * v92);
        unsigned int v94 = &v93[4 * v89];
        _DWORD *v94 = *(_DWORD *)(v79 + 4 * v72);
        uint64_t v87 = (uint64_t)(v94 + 1);
        if (v86 == v88) {
          goto LABEL_123;
        }
      }
      else
      {
        unsigned int v93 = 0;
        unsigned int v94 = (_DWORD *)(4 * v89);
        *(_DWORD *)(4 * v89) = *(_DWORD *)(v79 + 4 * v72);
        uint64_t v87 = 4 * v89 + 4;
        if (v86 == v88)
        {
LABEL_123:
          *(void *)&long long v155 = v94;
          *((void *)&v155 + 1) = v87;
          *(void *)&long long v156 = &v93[4 * v92];
          if (v88) {
            operator delete(v88);
          }
          goto LABEL_125;
        }
      }
      unint64_t v95 = v86 - 4 - v88;
      if (v95 < 0x2C) {
        goto LABEL_159;
      }
      if ((unint64_t)(v88 - v93) < 0x20) {
        goto LABEL_159;
      }
      uint64_t v96 = (v95 >> 2) + 1;
      uint64_t v97 = 4 * (v96 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v98 = &v86[-v97];
      unsigned int v94 = (_DWORD *)((char *)v94 - v97);
      double v99 = &v93[4 * v89 - 16];
      uint64_t v100 = v86 - 16;
      uint64_t v101 = v96 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v102 = *(_OWORD *)v100;
        *(v99 - 1) = *((_OWORD *)v100 - 1);
        *double v99 = v102;
        v99 -= 2;
        v100 -= 32;
        v101 -= 8;
      }
      while (v101);
      unint64_t v86 = v98;
      if (v96 != (v96 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_159:
        do
        {
          int v103 = *((_DWORD *)v86 - 1);
          v86 -= 4;
          *--unsigned int v94 = v103;
        }
        while (v86 != v88);
      }
      goto LABEL_123;
    }
    unsigned int v38 = sub_4F44(v36);
    unsigned int v39 = v38;
    unint64_t v40 = (unsigned __int16 *)(*v37 - *(int *)*v37);
    if (*v40 >= 9u && (uint64_t v41 = v40[4]) != 0) {
      uint64_t v42 = *(unsigned int *)(*v37 + v41);
    }
    else {
      uint64_t v42 = 0;
    }
    uint64_t v43 = __p;
    if (__p <= v38) {
      unsigned int v44 = v38;
    }
    else {
      unsigned int v44 = __p;
    }
    uint64_t v45 = v152;
    uint64_t v46 = *((void *)&v152 + 1) - v152;
    uint64_t v117 = v37;
    if (v44 >= ((*((void *)&v152 + 1) - (void)v152) >> 2))
    {
      unint64_t v47 = v46 >> 2;
      unint64_t v48 = v44 + 1;
      if (v47 <= v44)
      {
        LODWORD(v126) = -1;
        if (v48 <= v47)
        {
          if (v48 < v47) {
            *((void *)&v152 + 1) = v152 + 4 * v48;
          }
        }
        else
        {
          sub_500DC((uint64_t)&v152, v48 - v47, (const float *)&v126);
        }
      }
      LODWORD(v126) = 0;
      unint64_t v49 = (uint64_t)(v157 - *((void *)&v156 + 1)) >> 2;
      if (v48 <= v49)
      {
        if (v48 < v49) {
          *(void *)&long long v157 = *((void *)&v156 + 1) + 4 * v48;
        }
      }
      else
      {
        sub_500DC((uint64_t)&v156 + 8, v48 - v49, (const float *)&v126);
      }
      uint64_t v45 = v152;
      uint64_t v46 = *((void *)&v152 + 1) - v152;
    }
    uint64_t v50 = v39;
    unint64_t v118 = v118 & 0xFFFFFFFF00000000 | v43;
    *(void *)&long long v126 = v118;
    *((void *)&v126 + 1) = v42;
    unint64_t v51 = v46 >> 2;
    if (v46 >> 2 <= (unint64_t)v39)
    {
      unint64_t v52 = v39 + 1;
      LODWORD(v132) = -1;
      if (v52 <= v51)
      {
        if (v52 < v51) {
          *((void *)&v152 + 1) = v45 + 4 * v52;
        }
      }
      else
      {
        sub_500DC((uint64_t)&v152, v52 - v51, (const float *)&v132);
        uint64_t v45 = v152;
      }
    }
    char v53 = (char *)*((void *)&v155 + 1);
    if (*((void *)&v155 + 1) < (unint64_t)v156)
    {
      **((_DWORD **)&v155 + 1) = *(_DWORD *)(v45 + 4 * v39);
      uint64_t v54 = (uint64_t)(v53 + 4);
LABEL_79:
      *((void *)&v155 + 1) = v54;
      *(_DWORD *)(v45 + 4 * v50) = ((void)v154 - *((void *)&v153 + 1)) >> 4;
      a3 = v119;
      sub_3BFF8((char **)&v153 + 1, &v126);
      ++*(_DWORD *)(*((void *)&v156 + 1) + 4 * v50);
      uint64_t v27 = v121;
      uint64_t v35 = (void *)v122;
      uint64_t v34 = v123;
      uint64_t v37 = v117;
      goto LABEL_80;
    }
    unsigned int v55 = (char *)v155;
    uint64_t v56 = (uint64_t)(*((void *)&v155 + 1) - v155) >> 2;
    unint64_t v57 = v56 + 1;
    if ((unint64_t)(v56 + 1) >> 62) {
      sub_2E00();
    }
    uint64_t v58 = v156 - v155;
    if ((uint64_t)(v156 - v155) >> 1 > v57) {
      unint64_t v57 = v58 >> 1;
    }
    if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v59 = v57;
    }
    if (v59)
    {
      if (v59 >> 62) {
        sub_188D718();
      }
      unint64_t v60 = v59;
      unsigned int v61 = operator new(4 * v59);
      unint64_t v59 = v60;
      uint64_t v62 = &v61[4 * v56];
      *uint64_t v62 = *(_DWORD *)(v45 + 4 * v50);
      uint64_t v54 = (uint64_t)(v62 + 1);
      if (v53 == v55) {
        goto LABEL_77;
      }
    }
    else
    {
      unsigned int v61 = 0;
      uint64_t v62 = (_DWORD *)(4 * v56);
      *(_DWORD *)(4 * v56) = *(_DWORD *)(v45 + 4 * v50);
      uint64_t v54 = 4 * v56 + 4;
      if (v53 == v55)
      {
LABEL_77:
        *(void *)&long long v155 = v62;
        *((void *)&v155 + 1) = v54;
        *(void *)&long long v156 = &v61[4 * v59];
        if (v55) {
          operator delete(v55);
        }
        goto LABEL_79;
      }
    }
    unint64_t v63 = v53 - 4 - v55;
    if (v63 < 0x2C) {
      goto LABEL_160;
    }
    if ((unint64_t)(v55 - v61) < 0x20) {
      goto LABEL_160;
    }
    uint64_t v64 = (v63 >> 2) + 1;
    uint64_t v65 = 4 * (v64 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v66 = &v53[-v65];
    uint64_t v62 = (_DWORD *)((char *)v62 - v65);
    unsigned int v67 = &v61[4 * v56 - 16];
    unsigned int v68 = v53 - 16;
    uint64_t v69 = v64 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v70 = *(_OWORD *)v68;
      *(v67 - 1) = *((_OWORD *)v68 - 1);
      *unsigned int v67 = v70;
      v67 -= 2;
      v68 -= 32;
      v69 -= 8;
    }
    while (v69);
    char v53 = v66;
    if (v64 != (v64 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_160:
      do
      {
        int v71 = *((_DWORD *)v53 - 1);
        v53 -= 4;
        *--uint64_t v62 = v71;
      }
      while (v53 != v55);
    }
    goto LABEL_77;
  }
LABEL_133:
  size_t v108 = sub_1005690(a2);
  size_t v109 = v108;
  uint64_t v132 = 0;
  unint64_t v133 = 0;
  uint64_t v134 = 0;
  if (v108)
  {
    if ((v108 & 0x8000000000000000) != 0) {
      sub_2E00();
    }
    int v110 = (char *)operator new(v108);
    uint64_t v111 = &v110[v109];
    uint64_t v132 = v110;
    uint64_t v134 = &v110[v109];
    bzero(v110, v109);
    unint64_t v133 = v111;
  }
  __n128 __p = 0;
  unint64_t v130 = 0;
  uint64_t v131 = 0;
  uint64_t v135 = (void *)v112;
  uint64_t v136 = a3;
  unint64_t v137 = &v132;
  uint64_t v138 = a2;
  uint64_t v139 = v27;
  p_p = &__p;
  *(void *)&long long v126 = a2;
  *((void *)&v126 + 1) = v27;
  uint64_t v127 = &v132;
  uint64_t v128 = v112;
  sub_100F1FC((uint64_t)&v141, (uint64_t)&v125, (uint64_t *)&v135, (uint64_t)&v126);
  if (__p)
  {
    unint64_t v130 = __p;
    operator delete(__p);
  }
  if (v132)
  {
    unint64_t v133 = v132;
    operator delete(v132);
  }
  if (v149)
  {
    long long v150 = v149;
    operator delete(v149);
  }
  if (v147)
  {
    long long v148 = v147;
    operator delete(v147);
  }
  if (v145)
  {
    unint64_t v146 = v145;
    operator delete(v145);
  }
  if (v143)
  {
    long long v144 = v143;
    operator delete(v143);
  }
  sub_328138((uint64_t)v142);
  sub_EDD2E4((uint64_t)v151);
}

void sub_100DDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (__p) {
    operator delete(__p);
  }
  if (a35) {
    operator delete(a35);
  }
  sub_ECFCF0(&a44);
  sub_EDD2E4((uint64_t)&STACK[0x490]);
  uint64_t v45 = *(void **)a21;
  if (*(void *)a21)
  {
    *(void *)(a21 + 8) = v45;
    operator delete(v45);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100DE8C@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v19 = sub_1005964(a1);
  sub_100B404(v20, 0x400u);
  unsigned int v4 = (unsigned int **)sub_100596C(a1);
  unint64_t v5 = *v4;
  size_t v6 = v4[1];
  if (*v4 != v6)
  {
    do
    {
      unsigned int v7 = *v5;
      unint64_t v18 = 0;
      unsigned int v29 = v7;
      sub_100B568((uint64_t)v20, &v29, &v18);
      v5 += 42;
    }
    while (v5 != v6);
  }
  sub_100F3C0((uint64_t)&v19);
  unint64_t v8 = sub_1005690(a1);
  unint64_t v9 = v8;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (v8)
  {
    if (v8 >> 61) {
      sub_2E00();
    }
    size_t v10 = 8 * v8;
    unint64_t v11 = (char *)operator new(8 * v8);
    *a2 = v11;
    uint64_t v12 = &v11[8 * v9];
    a2[2] = v12;
    memset_pattern16(v11, &xmmword_20B8FC0, v10);
    a2[1] = v12;
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v13 = sub_1005964(a1);
  unint64_t v14 = *(void *)(v13 + 104) - *(void *)(v13 + 96);
  if ((v14 & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v15 = 0;
    uint64_t v16 = (v14 >> 2);
    do
    {
      *(void *)&v11[8 * v15] = sub_100F518((uint64_t)&v19, v15);
      ++v15;
    }
    while (v16 != v15);
  }
  if (v27)
  {
    unint64_t v28 = v27;
    operator delete(v27);
  }
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
  if (v23)
  {
    long long v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
  return sub_328138((uint64_t)v20);
}

void sub_100E02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (v12)
  {
    *(void *)(v11 + 8) = v12;
    operator delete(v12);
    sub_ECFCF0(&a11);
    _Unwind_Resume(a1);
  }
  sub_ECFCF0(&a11);
  _Unwind_Resume(a1);
}

void sub_100E0B8(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X8>, double a7@<D0>)
{
  long long v151 = (void *)((((*(void *)(a2 + 72) >> 16) & 0xFFFF0000 | (*(void *)(a2 + 72) << 32) | (2
                                                                                                * ((*(void *)(a2 + 72) & 0xFF000000000000) == 0)))
                 + (((unint64_t)*(unsigned int *)(a2 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(a2 + 88) >> 1) & 1);
  if (sub_100597C(a3, (uint64_t *)&v151, 0, 1))
  {
    if (*(unsigned char *)(a1 + 12))
    {
      unint64_t v14 = sub_F5C6E0(a1 + 4448, (int **)a2, 0x3B9ACA00u, *(void *)(a1 + 16), 0x7FFFFFFF, *(unsigned __int8 *)(a1 + 9760));
      if (v14 != -1 && (v14 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000 && v15 != 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v16 = a1 + 9720;
        sub_3EB6C8(v16, *(void *)(a2 + 32), (uint64_t)&v151);
        uint64_t v17 = v151;
        if (v151 == v152)
        {
          sub_3EB6C8(v16, *(void *)(a2 + 72), (uint64_t)&v146);
          BOOL v18 = (void)v146 == *((void *)&v146 + 1);
          if ((void)v146)
          {
            *((void *)&v146 + 1) = v146;
            operator delete((void *)v146);
          }
          uint64_t v17 = v151;
          if (!v151)
          {
LABEL_9:
            if (v18)
            {
              *a6 = 0;
              a6[1] = 0;
              a6[2] = 0;
              uint64_t v19 = operator new(0x60uLL);
              a6[1] = v19 + 6;
              a6[2] = v19 + 6;
              long long v20 = *(_OWORD *)(a2 + 48);
              v19[2] = *(_OWORD *)(a2 + 32);
              v19[3] = v20;
              v19[4] = *(_OWORD *)(a2 + 64);
              *(_OWORD *)((char *)v19 + 76) = *(_OWORD *)(a2 + 76);
              long long v21 = *(_OWORD *)(a2 + 16);
              _OWORD *v19 = *(_OWORD *)a2;
              v19[1] = v21;
              *a6 = v19;
              return;
            }
            goto LABEL_18;
          }
        }
        else
        {
          BOOL v18 = 0;
          if (!v151) {
            goto LABEL_9;
          }
        }
        long long v152 = v17;
        operator delete(v17);
        goto LABEL_9;
      }
    }
LABEL_18:
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    return;
  }
  unint64_t v22 = sub_F5C6E0(a1 + 4448, (int **)a2, 0x3B9ACA00u, *(void *)(a1 + 16), 0x7FFFFFFF, *(unsigned __int8 *)(a1 + 9760));
  if (v22 == -1 || (v22 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000 || v23 == 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_18;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v145 = 0;
  long long v24 = *(int **)(a2 + 8);
  int v25 = (unsigned __int16 *)((char *)v24 - *v24);
  unsigned int v26 = *v25;
  if (*(unsigned char *)(a2 + 38))
  {
    if (v26 < 5) {
      goto LABEL_26;
    }
    unsigned int v27 = v25[2];
    if (!v25[2]) {
      goto LABEL_26;
    }
LABEL_22:
    __int16 v28 = *(_WORD *)((char *)v24 + v27);
    unsigned int v29 = *(int **)(a2 + 48);
    unint64_t v30 = (unsigned __int16 *)((char *)v29 - *v29);
    unsigned int v31 = *v30;
    if (*(unsigned char *)(a2 + 78)) {
      goto LABEL_27;
    }
    goto LABEL_23;
  }
  if (v26 >= 9)
  {
    unsigned int v27 = v25[4];
    if (v25[4]) {
      goto LABEL_22;
    }
  }
LABEL_26:
  __int16 v28 = 0;
  unsigned int v29 = *(int **)(a2 + 48);
  unint64_t v30 = (unsigned __int16 *)((char *)v29 - *v29);
  unsigned int v31 = *v30;
  if (*(unsigned char *)(a2 + 78))
  {
LABEL_27:
    if (v31 >= 9)
    {
      unsigned int v32 = v30[4];
      if (!v30[4]) {
        goto LABEL_31;
      }
      goto LABEL_29;
    }
    goto LABEL_30;
  }
LABEL_23:
  if (v31 < 5)
  {
LABEL_30:
    unsigned int v32 = 0;
    goto LABEL_31;
  }
  unsigned int v32 = v30[2];
  if (v30[2]) {
LABEL_29:
  }
    unsigned int v32 = *(unsigned __int16 *)((char *)v29 + v32);
LABEL_31:
  unsigned __int16 v33 = v28 + 18000;
  unsigned int v34 = (unsigned __int16)(v28 + 18000) >> 5;
  unsigned __int16 v35 = v28 - 18000;
  if (v34 < 0x465) {
    unsigned __int16 v35 = v33;
  }
  int v36 = v32 - v35;
  if (v36 > 18000) {
    v36 -= 36000;
  }
  if (v36 < -17999) {
    v36 += 36000;
  }
  double v37 = fabs((double)v36 / 100.0);
  if (v26 >= 0x11 && (uint64_t v38 = v25[8]) != 0 && (*(_WORD *)((unsigned char *)v24 + v38) & 4) != 0
    || (double v39 = 0.0, v31 >= 0x11) && v30[8] && (*(_WORD *)((unsigned char *)v29 + v30[8]) & 4) != 0)
  {
    double v39 = v37;
  }
  if (a4 != 0x7FFFFFFFFFFFFFFFLL && *(void *)(a1 + 96) >= a4)
  {
    long long v151 = (void *)((((*(void *)(a2 + 32) >> 16) & 0xFFFF0000 | (*(void *)(a2 + 32) << 32) | (2
                                                                                                  * ((*(void *)(a2 + 32) & 0xFF000000000000) == 0)))
                   + 4 * (unsigned __int16)*(_DWORD *)(a2 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(a2 + 88) & 1);
    unsigned int v40 = sub_1003358((uint64_t)a3, (uint64_t *)&v151);
    if ((v40 == -1 || (int v41 = *(_DWORD *)(a1 + 80)) == 0 || (*(_DWORD *)(*a5 + 4 * v40) & v41) != 0)
      && sub_1010B20(a1, a2, a1 + 56, a7))
    {
      unint64_t v130 = a5;
      unint64_t v143 = (((*(void *)(a2 + 72) >> 16) & 0xFFFF0000 | (*(void *)(a2 + 72) << 32) | (2
                                                                                           * ((*(void *)(a2 + 72) & 0xFF000000000000) == 0)))
            + (((unint64_t)*(unsigned int *)(a2 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(a2 + 88) >> 1) & 1;
      uint64_t v134 = a1 + 9952;
      *(void *)(a1 + 10808) = *(void *)(a1 + 10800);
      *(void *)(a1 + 10784) = *(void *)(a1 + 10776);
      *(_DWORD *)(a1 + 10824) = 0;
      *(void *)(a1 + 10728) = *(void *)(a1 + 10720);
      uint64_t v42 = -768;
      do
      {
        uint64_t v44 = a1 + v42;
        if (*(void *)(a1 + v42 + 10736))
        {
          unint64_t v45 = *(void *)(v44 + 10744);
          if (v45 >= 0x80)
          {
            uint64_t v43 = (void *)(a1 + v42);
            operator delete(*(void **)(v44 + 10720));
            *(void *)(v44 + 10720) = &unk_20E1710;
            v43[1345] = 0;
            v43[1341] = 0;
            v43[1343] = 0;
            v43[1342] = 0;
          }
          else if (v45)
          {
            *(void *)(v44 + 10736) = 0;
            memset(*(void **)(v44 + 10720), 128, v45 + 8);
            *(unsigned char *)(*(void *)(v44 + 10720) + v45) = -1;
            unint64_t v46 = *(void *)(v44 + 10744);
            if (v46 == 7) {
              uint64_t v47 = 6;
            }
            else {
              uint64_t v47 = v46 - (v46 >> 3);
            }
            *(void *)(a1 + v42 + 10760) = v47 - *(void *)(v44 + 10736);
          }
        }
        v42 += 48;
      }
      while (v42);
      *(void *)(a1 + 10752) = *(void *)(a1 + 10744);
      *(_DWORD *)(a1 + 10768) = 0;
      long long v151 = 0;
      long long v152 = 0;
      long long v48 = *(_OWORD *)(a2 + 48);
      long long v155 = *(_OWORD *)(a2 + 32);
      long long v156 = v48;
      v157[0] = *(_OWORD *)(a2 + 64);
      *(_OWORD *)((char *)v157 + 12) = *(_OWORD *)(a2 + 76);
      long long v49 = *(_OWORD *)(a2 + 16);
      long long v153 = *(_OWORD *)a2;
      long long v154 = v49;
      uint64_t v158 = 0x7FFFFFFFFFFFFFFFLL;
      double v159 = v37;
      double v160 = v39;
      sub_1010FB8(v134, (uint64_t *)&v143, (uint64_t)&v151);
      uint64_t v140 = 0;
      uint64_t v141 = 0;
      uint64_t v142 = 0;
      unint64_t v137 = 0;
      uint64_t v138 = 0;
      uint64_t v139 = 0;
      if (!*(_DWORD *)(a1 + 10824))
      {
        unint64_t v129 = 0;
        goto LABEL_166;
      }
      uint64_t v131 = a3;
      uint64_t v133 = a1 + 9720;
      while (1)
      {
        unsigned int v50 = **(_DWORD **)(a1 + 10776);
        uint64_t v51 = *(void *)(a1 + 10720);
        uint64_t v52 = v51 + 144 * v50;
        unint64_t v136 = *(void *)v52;
        int v53 = *(_DWORD *)(v52 + 12);
        int v132 = *(_DWORD *)(v52 + 8);
        uint64_t v54 = *(void *)(v52 + 16);
        unsigned int v55 = (unsigned int *)sub_2E4738((int **)(v52 + 24));
        uint64_t v56 = v51 + 144 * v50;
        unint64_t v57 = *(void *)(v56 + 96);
        if (sub_3EB32C(v133, (int **)(v56 + 64)))
        {
          BOOL v58 = 1;
        }
        else
        {
          sub_3EB6C8(v133, v57, (uint64_t)&v151);
          BOOL v58 = v151 != v152;
          if (v151)
          {
            long long v152 = v151;
            operator delete(v151);
          }
        }
        uint64_t v59 = v51 + 144 * v50;
        uint64_t v60 = *(void *)(v59 + 120);
        double v61 = *(double *)(v59 + 128);
        double v62 = *(double *)(v59 + 136);
        sub_101115C(v134);
        uint64_t v63 = (*(void *)(a1 + 10752) - *(void *)(a1 + 10744)) >> 2;
        unsigned int v64 = *(_DWORD *)(a1 + 92);
        BOOL v65 = v64 > v63;
        char v66 = v64 <= v63 || v58;
        if (v66)
        {
          if (!v65) {
            goto LABEL_164;
          }
          goto LABEL_71;
        }
        if (v61 < *(double *)(a1 + 120)
          && v62 < *(double *)(a1 + 112)
          && v54 < *(void *)(a1 + 104)
          && (v60 == 0x7FFFFFFFFFFFFFFFLL || v60 <= *(void *)(a1 + 152)))
        {
          if (!sub_100597C(v131, (uint64_t *)&v136, 0, 1)
            || (unsigned int v67 = sub_1003358((uint64_t)v131, (uint64_t *)&v136), v67 != -1)
            && (int v68 = *(_DWORD *)(a1 + 84)) != 0
            && (*(_DWORD *)(*v130 + 4 * v67) & v68) == 0)
          {
            if (v60 == 0x7FFFFFFFFFFFFFFFLL && v54 >= *(void *)(a1 + 160))
            {
              sub_2E45D4(*(void *)(a1 + 9688), v55, (uint64_t)&v137, 0, 1, 1);
              unint64_t v85 = v137;
              if (v137 == v138)
              {
LABEL_109:
                uint64_t v60 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else
              {
                while (1)
                {
                  unint64_t v86 = (unsigned __int16 *)(*v85 - *(int *)*v85);
                  if (*v86 < 0x2Fu) {
                    break;
                  }
                  uint64_t v87 = v86[23];
                  if (!v87 || *(unsigned char *)(*v85 + v87) == 32) {
                    break;
                  }
                  v85 += 5;
                  if (v85 == v138) {
                    goto LABEL_109;
                  }
                }
                uint64_t v60 = 0;
              }
            }
            sub_ED8808(a1 + 280, v136, 0, &v140, 0);
            uint64_t v89 = (int **)v140;
            unint64_t v88 = v141;
            if (v140 == v141) {
              goto LABEL_71;
            }
            while (2)
            {
              unint64_t v91 = (unint64_t)v89[9];
              uint64_t v92 = (v91 >> 16) & 0xFFFF0000 | (v91 << 32);
              uint64_t v93 = (v91 & 0xFF000000000000) == 0;
              unint64_t v94 = (v92 | (2 * v93)) + (((unint64_t)*((unsigned int *)v89 + 20) >> 14) & 0x3FFFC);
              *(void *)&long long v146 = v94 & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*((unsigned __int8 *)v89 + 88) >> 1) & 1;
              long long v151 = (void *)(((v94 << 16) & 0xFFFF00000000 | HIDWORD(v94) | (v93 << 48)) ^ 0x1000000000000);
              if (!sub_1005A88((uint64_t)v131, &v151) && !sub_1010B20(a1, (uint64_t)v89, a1 + 56, a7)) {
                goto LABEL_115;
              }
              if (((_BYTE)v89[11] & 3) == 1) {
                goto LABEL_115;
              }
              unint64_t v95 = (unsigned __int16 *)((char *)*v89 - **v89);
              if (*v95 < 0xBu || (uint64_t v96 = v95[5]) == 0 || (*((unsigned char *)*v89 + v96 + 1) & 0x10) == 0)
              {
                uint64_t v97 = v89[5];
                unint64_t v98 = (unsigned __int16 *)((char *)v97 - *v97);
                if (*v98 >= 0xBu)
                {
                  uint64_t v99 = v98[5];
                  if (v99)
                  {
                    if ((*((unsigned char *)v97 + v99 + 1) & 0x10) != 0) {
                      goto LABEL_115;
                    }
                  }
                }
              }
              unint64_t v100 = sub_F5C6E0(a1 + 4448, v89, 0x3B9ACA00u, *(void *)(a1 + 16), 0x7FFFFFFF, *(unsigned __int8 *)(a1 + 9760));
              if (v100 == -1
                || (v100 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000
                || v101 == 0x7FFFFFFFFFFFFFFFLL)
              {
                goto LABEL_115;
              }
              uint64_t v102 = v101 + v60;
              if (v60 == 0x7FFFFFFFFFFFFFFFLL) {
                uint64_t v102 = 0x7FFFFFFFFFFFFFFFLL;
              }
              int v103 = v89[1];
              int v104 = (unsigned __int16 *)((char *)v103 - *v103);
              unsigned int v105 = *v104;
              if (*((unsigned char *)v89 + 38))
              {
                if (v105 >= 5)
                {
                  unsigned int v106 = v104[2];
                  if (!v104[2])
                  {
LABEL_138:
                    int v107 = v89[6];
                    size_t v108 = (unsigned __int16 *)((char *)v107 - *v107);
                    unsigned int v109 = *v108;
                    if (*((unsigned char *)v89 + 78))
                    {
                      if (v109 < 9) {
                        goto LABEL_145;
                      }
                      unsigned int v110 = v108[4];
                      if (!v110) {
                        goto LABEL_145;
                      }
LABEL_144:
                      int v111 = *(unsigned __int16 *)((char *)v107 + v110);
                    }
                    else
                    {
                      if (v109 >= 5)
                      {
                        unsigned int v110 = v108[2];
                        if (v110) {
                          goto LABEL_144;
                        }
                      }
LABEL_145:
                      int v111 = 0;
                    }
                    unsigned __int16 v112 = v106 + 18000;
                    unsigned int v113 = (unsigned __int16)(v106 + 18000) >> 5;
                    unsigned __int16 v114 = v106 - 18000;
                    if (v113 < 0x465) {
                      unsigned __int16 v114 = v112;
                    }
                    int v115 = v111 - v114;
                    if (v115 > 18000) {
                      v115 -= 36000;
                    }
                    if (v115 < -17999) {
                      v115 += 36000;
                    }
                    double v116 = 0.0;
                    if (v105 >= 0x13)
                    {
                      uint64_t v117 = v104[9];
                      if (v117)
                      {
                        LOWORD(v116) = *(_WORD *)((char *)v103 + v117);
                        double v116 = (double)*(unint64_t *)&v116;
                      }
                    }
                    double v118 = fabs((double)v115 / 100.0) + v116;
                    long long v151 = (void *)((v132 + v100) | ((unint64_t)(v53 + HIDWORD(v100)) << 32));
                    long long v152 = (void *)(v101 + v54);
                    long long v119 = *((_OWORD *)v89 + 1);
                    long long v153 = *(_OWORD *)v89;
                    long long v154 = v119;
                    long long v120 = *((_OWORD *)v89 + 2);
                    long long v121 = *((_OWORD *)v89 + 3);
                    long long v122 = *((_OWORD *)v89 + 4);
                    *(_OWORD *)((char *)v157 + 12) = *(_OWORD *)((char *)v89 + 76);
                    long long v156 = v121;
                    v157[0] = v122;
                    long long v155 = v120;
                    uint64_t v158 = v102;
                    double v159 = v61 + v118;
                    uint64_t v123 = v89[1];
                    if (v123
                      && (int v124 = (unsigned __int16 *)((char *)v123 - *v123), *v124 >= 0x11u)
                      && (uint64_t v125 = v124[8]) != 0
                      && (*(_WORD *)((unsigned char *)v123 + v125) & 4) != 0
                      || (v126 = v89[6], double v90 = 0.0, v126)
                      && (uint64_t v127 = (unsigned __int16 *)((char *)v126 - *v126), *v127 >= 0x11u)
                      && (uint64_t v128 = v127[8]) != 0
                      && (*(_WORD *)((unsigned char *)v126 + v128) & 4) != 0)
                    {
                      double v90 = v62 + v118;
                    }
                    double v160 = v90;
                    sub_10112DC(v134, (uint64_t *)&v146, (uint64_t)&v151);
LABEL_115:
                    v89 += 12;
                    if (v89 == v88) {
                      goto LABEL_71;
                    }
                    continue;
                  }
LABEL_136:
                  LOWORD(v106) = *(_WORD *)((char *)v103 + v106);
                  goto LABEL_138;
                }
              }
              else if (v105 >= 9)
              {
                unsigned int v106 = v104[4];
                if (!v104[4]) {
                  goto LABEL_138;
                }
                goto LABEL_136;
              }
              break;
            }
            LOWORD(v106) = 0;
            goto LABEL_138;
          }
          sub_EAFC08((uint64_t)&v151);
          for (unint64_t i = v136;
                i != v143;
                unint64_t i = (((v71 >> 16) & 0xFFFF0000 | (v71 << 32) | (2 * ((v71 & 0xFF000000000000) == 0)))
                   + 4 * (unsigned __int16)*(_DWORD *)(v70 + 144 * v69 + 104)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v70 + 144 * v69 + 112) & 1)
          {
            sub_EE03E4(v134, (uint64_t *)&i, &v146);
            unsigned int v69 = *(_DWORD *)(*((void *)&v147 + 1) + 8);
            uint64_t v70 = *(void *)(a1 + 10720);
            sub_EAFD8C((uint64_t)&v151, (int **)(v70 + 144 * v69 + 24));
            unint64_t v71 = *(void *)(v70 + 144 * v69 + 56);
          }
          sub_EE03E4(v134, (uint64_t *)&v143, &v146);
          sub_EAFD8C((uint64_t)&v151, (int **)(*(void *)(a1 + 10720) + 144 * *(unsigned int *)(*((void *)&v147 + 1) + 8) + 24));
          unint64_t v72 = *(void *)sub_5231C((uint64_t)&v151);
          uint64_t v73 = *(void *)(sub_5231C((uint64_t)&v151) + 8);
          if (v72 != v73)
          {
            unsigned int v74 = (_OWORD *)(v73 - 96);
            if ((unint64_t)v74 > v72)
            {
              unint64_t v75 = v72 + 96;
              do
              {
                long long v148 = *(_OWORD *)(v75 - 64);
                long long v149 = *(_OWORD *)(v75 - 48);
                v150[0] = *(_OWORD *)(v75 - 32);
                v150[1] = *(_OWORD *)(v75 - 16);
                long long v146 = *(_OWORD *)(v75 - 96);
                long long v147 = *(_OWORD *)(v75 - 80);
                long long v76 = v74[1];
                *(_OWORD *)(v75 - 96) = *v74;
                *(_OWORD *)(v75 - 80) = v76;
                long long v78 = v74[3];
                long long v77 = v74[4];
                long long v79 = v74[2];
                *(_OWORD *)(v75 - 20) = *(_OWORD *)((char *)v74 + 76);
                *(_OWORD *)(v75 - 48) = v78;
                *(_OWORD *)(v75 - 32) = v77;
                *(_OWORD *)(v75 - 64) = v79;
                v74[4] = v150[0];
                *(_OWORD *)((char *)v74 + 76) = *(_OWORD *)((char *)v150 + 12);
                *unsigned int v74 = v146;
                v74[3] = v149;
                v74[2] = v148;
                v74[1] = v147;
                v74 -= 6;
                BOOL v80 = v75 >= (unint64_t)v74;
                v75 += 96;
              }
              while (!v80);
            }
          }
          sub_1069AF8(a1 + 9768, &v151, &v146);
          long long v81 = v146;
          sub_36094((void **)&v146);
          if ((void)v81 == *((void *)&v81 + 1))
          {
            unint64_t v82 = *(_OWORD **)sub_5231C((uint64_t)&v151);
            unint64_t v83 = *(_OWORD **)(sub_5231C((uint64_t)&v151) + 8);
            for (*(void *)&long long v146 = __p; v82 != v83; v82 += 6)
              sub_10132DC((char ***)&v146, v82);
          }
          sub_405F44((uint64_t)&v151);
        }
LABEL_71:
        if (!*(_DWORD *)(a1 + 10824))
        {
LABEL_164:
          unint64_t v129 = v137;
LABEL_166:
          *(_DWORD *)(a1 + 276) += (*(void *)(a1 + 10752) - *(void *)(a1 + 10744)) >> 2;
          *(_OWORD *)a6 = *(_OWORD *)__p;
          a6[2] = v145;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v145 = 0;
          if (v129)
          {
            uint64_t v138 = v129;
            operator delete(v129);
          }
          if (v140)
          {
            uint64_t v141 = (int **)v140;
            operator delete(v140);
          }
          goto LABEL_61;
        }
      }
    }
  }
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
LABEL_61:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_100EDF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46)
{
  sub_405F44((uint64_t)&a45);
  if (__p)
  {
    operator delete(__p);
    uint64_t v47 = a25;
    if (!a25)
    {
LABEL_3:
      long long v48 = a29;
      if (!a29) {
LABEL_8:
      }
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(v48);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v47 = a25;
    if (!a25) {
      goto LABEL_3;
    }
  }
  operator delete(v47);
  long long v48 = a29;
  if (!a29) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t sub_100EEC0(uint64_t a1, uint64_t a2)
{
  v43[0] = a1 + 168;
  v43[1] = a1;
  v43[2] = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    uint64_t v4 = sub_100231C(a2);
    double v5 = sub_45A4DC(*(void *)(a1 + 9696), v4);
    double v6 = v5;
    BOOL v7 = *(uint64_t *)&v5 <= -1 || ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
    BOOL v8 = v7 && (unint64_t)(*(void *)&v5 - 1) >= 0xFFFFFFFFFFFFFLL;
    BOOL v9 = !v8 || (*(void *)&v5 & 0x7FFFFFFFFFFFFFFFLL) == 0;
    if (v9 && v5 > 0.0)
    {
      uint64_t v10 = *(void *)(a1 + 9704);
      unint64_t v11 = sub_3A5DDC(*(void *)(a1 + 9712), *(void *)(v4 + 32));
      uint64_t v44 = 0;
      unint64_t v45 = 0;
      double v12 = sub_299F0C(v10, v11, (uint64_t)&v44, 0);
      BOOL v13 = *(uint64_t *)&v12 <= -1 || ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
      BOOL v14 = v13 && (unint64_t)(*(void *)&v12 - 1) >= 0xFFFFFFFFFFFFFLL;
      BOOL v15 = !v14 || (*(void *)&v12 & 0x7FFFFFFFFFFFFFFFLL) == 0;
      if (v15 && v12 > 0.0 && v12 <= *(double *)(a1 + 184) && v6 / v12 > *(double *)(a1 + 176)) {
        goto LABEL_36;
      }
    }
  }
  if (sub_10114C8(v43, 0)) {
    goto LABEL_36;
  }
  if (!*(unsigned char *)(a1 + 192)) {
    goto LABEL_38;
  }
  uint64_t v16 = sub_100231C(a2);
  sub_3F4E6C(a1 + 9720, v16, (uint64_t)&v44);
  uint64_t v17 = v44;
  BOOL v18 = v45;
  if (v44)
  {
    unint64_t v45 = v44;
    operator delete(v44);
  }
  uint64_t v19 = sub_100231C(a2);
  sub_3F4E6C(a1 + 9720, v19 + 40, (uint64_t)&v44);
  long long v20 = v44;
  long long v21 = v45;
  if (v44)
  {
    unint64_t v45 = v44;
    operator delete(v44);
  }
  if (v17 == v18 && v20 != v21)
  {
LABEL_36:
    uint64_t v22 = 1;
    if (!*(unsigned char *)(a1 + 169)) {
      goto LABEL_65;
    }
  }
  else
  {
LABEL_38:
    uint64_t v22 = 0;
    if (!*(unsigned char *)(a1 + 169)) {
      goto LABEL_65;
    }
  }
  uint64_t v23 = sub_100231C(a2);
  double v24 = sub_45A4DC(*(void *)(a1 + 9696), v23);
  double v25 = v24;
  BOOL v28 = *(uint64_t *)&v24 > -1 && ((*(void *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
     || (unint64_t)(*(void *)&v24 - 1) < 0xFFFFFFFFFFFFFLL
     || (*(void *)&v24 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v28 && v24 > 0.0)
  {
    uint64_t v29 = *(void *)(a1 + 9704);
    unint64_t v30 = sub_3A5DDC(*(void *)(a1 + 9712), *(void *)(v23 + 32));
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    double v31 = sub_299F0C(v29, v30, (uint64_t)&v44, 0);
    BOOL v32 = *(uint64_t *)&v31 <= -1 || ((*(void *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
    BOOL v33 = v32 && (unint64_t)(*(void *)&v31 - 1) >= 0xFFFFFFFFFFFFFLL;
    BOOL v34 = !v33 || (*(void *)&v31 & 0x7FFFFFFFFFFFFFFFLL) == 0;
    if (v34 && v31 > 0.0 && v31 <= *(double *)(a1 + 184) && v25 / v31 > *(double *)(a1 + 176)) {
      return v22 | 2;
    }
  }
LABEL_65:
  if (sub_10114C8(v43, 1)) {
    return v22 | 2;
  }
  if (*(unsigned char *)(a1 + 192))
  {
    uint64_t v35 = sub_100231C(a2);
    uint64_t v36 = a1 + 9720;
    sub_3F4E6C(a1 + 9720, v35, (uint64_t)&v44);
    double v37 = v44;
    uint64_t v38 = v45;
    if (v44)
    {
      unint64_t v45 = v44;
      operator delete(v44);
    }
    uint64_t v39 = sub_100231C(a2);
    sub_3F4E6C(v36, v39 + 40, (uint64_t)&v44);
    unsigned int v40 = v44;
    int v41 = v45;
    if (v44)
    {
      unint64_t v45 = v44;
      operator delete(v44);
    }
    if (v37 != v38 && v40 == v41) {
      return v22 | 2;
    }
  }
  return v22;
}

void sub_100F1FC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (*(_DWORD *)(a1 + 880))
  {
    uint64_t v7 = a1 + 8;
    while (1)
    {
      BOOL v8 = (unsigned int *)(*(void *)(a1 + 776) + 24 * **(unsigned int **)(a1 + 832));
      uint64_t v9 = *v8;
      long long v16 = *(_OWORD *)(v8 + 2);
      sub_51325C(v7);
      unsigned int v20 = v9;
      if (!*(unsigned char *)(*a3 + 32)) {
        break;
      }
      if (*(_DWORD *)(*a3 + 48) > *(unsigned __int8 *)(*(void *)a3[2] + v9))
      {
        uint64_t v10 = a3[4];
        unint64_t v11 = sub_1005B14(a3[3], &v20);
        sub_ED8808(v10 + 280, v11, 0, (void *)a3[5], 0);
        double v12 = (uint64_t *)a3[5];
        uint64_t v17 = a3[3];
        uint64_t v18 = v10;
        uint64_t v19 = *a3;
        if (sub_10127DC(v12, &v17))
        {
          *(_DWORD *)(*(void *)a3[1] + 4 * v20) = DWORD2(v16);
          ++*(unsigned char *)(*(void *)a3[2] + v20);
        }
        goto LABEL_9;
      }
LABEL_3:
      if (!*(_DWORD *)(a1 + 880)) {
        return;
      }
    }
    *(_DWORD *)(*(void *)a3[1] + 4 * v9) = DWORD2(v16);
LABEL_9:
    BOOL v13 = *(void **)a1;
    sub_101294C(*(void *)a1, v9);
    uint64_t v14 = *(unsigned int *)(v13[12] + 4 * v9);
    sub_101294C((uint64_t)v13, v9);
    while (v14 != -1)
    {
      uint64_t v15 = v13[15] + 16 * v14;
      if (!sub_10123A0(a4, v9, &v16, v15))
      {
        unsigned int v20 = *(_DWORD *)v15;
        uint64_t v17 = v16 + *(void *)(v15 + 8);
        uint64_t v18 = DWORD2(v16);
        sub_101256C(v7, &v20, (uint64_t)&v17);
      }
      uint64_t v14 = *(unsigned int *)(v13[18] + 4 * v14);
    }
    goto LABEL_3;
  }
}

uint64_t sub_100F3C0(uint64_t result)
{
  if (*(_DWORD *)(result + 880))
  {
    uint64_t v1 = result;
    uint64_t v2 = result + 8;
    do
    {
      uint64_t v3 = (unsigned int *)(*(void *)(v1 + 776) + 16 * **(unsigned int **)(v1 + 832));
      uint64_t v4 = *v3;
      uint64_t v5 = *((void *)v3 + 1);
      sub_51325C(v2);
      double v6 = *(void **)v1;
      sub_1007480(*(void *)v1, v4);
      uint64_t v7 = *(unsigned int *)(v6[12] + 4 * v4);
      double result = sub_1007480((uint64_t)v6, v4);
      while (v7 != -1)
      {
        uint64_t v9 = (unsigned int *)(v6[15] + 152 * v7);
        double result = sub_1002444((uint64_t)v9);
        if (result != 0x7FFFFFFFFFFFFFFFLL)
        {
          unsigned int v16 = sub_4F44(v9);
          if (sub_10022FC((uint64_t)v9))
          {
            uint64_t v10 = (char **)sub_100231C((uint64_t)v9);
            unint64_t v11 = *v10;
            double v12 = &(*v10)[-*(int *)*v10];
            if (*(unsigned __int16 *)v12 < 9u)
            {
LABEL_5:
              uint64_t v8 = 0;
              goto LABEL_6;
            }
          }
          else
          {
            BOOL v13 = (char **)sub_10023E0((uint64_t)v9);
            unint64_t v11 = *v13;
            double v12 = &(*v13)[-*(int *)*v13];
            if (*(unsigned __int16 *)v12 < 9u) {
              goto LABEL_5;
            }
          }
          unsigned int v14 = *((unsigned __int16 *)v12 + 4);
          if (!v14) {
            goto LABEL_5;
          }
          uint64_t v8 = *(unsigned int *)&v11[v14];
LABEL_6:
          unint64_t v15 = v8 + v5;
          double result = sub_100BA74(v2, &v16, &v15);
        }
        uint64_t v7 = *(unsigned int *)(v6[18] + 4 * v7);
      }
    }
    while (*(_DWORD *)(v1 + 880));
  }
  return result;
}

uint64_t sub_100F518(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = ~(unint64_t)a2 + ((unint64_t)a2 << 21);
  unint64_t v4 = 21 * ((265 * (v3 ^ (v3 >> 24))) ^ ((265 * (v3 ^ (v3 >> 24))) >> 14));
  unint64_t v5 = 2147483649u * (v4 ^ (v4 >> 28));
  uint64_t v6 = a1
     + 48
     * (((((unsigned __int16)(v4 ^ (v4 >> 28)) >> 8) ^ ((-2147483647
                                                                        * (v4 ^ (v4 >> 28))) >> 16)) ^ ((-2147483647 * (v4 ^ (v4 >> 28))) >> 24)) & 0xF);
  uint64_t v9 = *(void *)(v6 + 8);
  uint64_t v8 = v6 + 8;
  uint64_t v7 = v9;
  unint64_t v10 = v5 >> 7;
  uint64_t v11 = *(void *)(v8 + 24);
  uint64_t v12 = 0x101010101010101 * (v5 & 0x7F);
  for (unint64_t i = v10; ; unint64_t i = v2 + v14)
  {
    unint64_t v14 = i & v11;
    uint64_t v15 = *(void *)(v7 + (i & v11));
    unint64_t v16 = ((v15 ^ v12) - 0x101010101010101) & ~(v15 ^ v12) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_6:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
    v2 += 8;
  }
  uint64_t v17 = *(void *)(v8 + 8);
  while (1)
  {
    unint64_t v18 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v11;
    if (*(_DWORD *)(v17 + 8 * v18) == a2) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_6;
    }
  }
  if (v11 == v18) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  for (j = 0; ; unint64_t v10 = j + v21)
  {
    unint64_t v21 = v10 & v11;
    unint64_t v22 = ((*(void *)(v7 + v21) ^ v12) - 0x101010101010101) & ~(*(void *)(v7 + v21) ^ v12) & 0x8080808080808080;
    if (v22) {
      break;
    }
LABEL_11:
    j += 8;
  }
  while (1)
  {
    unint64_t v23 = (v21 + (__clz(__rbit64(v22)) >> 3)) & v11;
    if (*(_DWORD *)(v17 + 8 * v23) == a2) {
      return *(void *)(*(void *)(a1 + 776) + 16 * *(unsigned int *)(v17 + 8 * v23 + 4) + 8);
    }
    v22 &= v22 - 1;
    if (!v22) {
      goto LABEL_11;
    }
  }
}

uint64_t sub_100F670(uint64_t a1)
{
  return a1 + 232;
}

uint64_t sub_100F678(uint64_t a1, void *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "exploration_from");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  *(_DWORD *)(a1 + 24) = sub_100FDC4(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "exploration_to");
  uint64_t v5 = sub_561B0(a2, (uint64_t)__p);
  *(_DWORD *)(a1 + 28) = sub_100FDC4(v5);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "max_total_scanned_nodes");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 32) = v6;
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "max_scanned_nodes");
  int v7 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 36) = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "max_distance_from_origin_m");
  *(void *)(a1 + 40) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "max_search_distance_m");
  *(void *)(a1 + 48) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "max_deviation_from_straight");
  double v8 = (double)sub_376928(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 56) = v8;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "max_sum_deviation_from_straight");
  double v9 = (double)sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 64) = v9;
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "min_normalized_capacity");
  double v10 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 72) = v10;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "min_number_of_hsp_observation");
  __int16 v11 = sub_376928(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_WORD *)(a1 + 80) = v11;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "min_number_of_live_observation");
  __int16 v12 = sub_376928(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_WORD *)(a1 + 82) = v12;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "require_all_probe_thresholds");
  BOOL v13 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 84) = v13;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20E1380;
  strcpy((char *)__p[0], "apply_probe_thresholds_only_to_regular_roads");
  BOOL v14 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 85) = v14;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "use_adaptive_capacity_threshold");
  BOOL v15 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 86) = v15;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "adaptive_capacity_factor");
  double v16 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 88) = v16;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9A40;
  strcpy((char *)__p[0], "max_search_distance_beyond_regular_roads_m");
  *(void *)(a1 + 96) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93C0;
  strcpy((char *)__p[0], "max_prefix_distance_with_regular_roads_m");
  *(void *)(a1 + 104) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "allowed_connectors");
  uint64_t v17 = (uint64_t *)sub_5C4AC(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v19 = *v17;
  for (uint64_t i = v17[1]; v19 != i; v19 += 16)
  {
    if (*(_DWORD *)(v19 + 8))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    LODWORD(__p[0]) = sub_1010050(*(uint64_t **)v19);
    sub_745A4(a1, __p);
  }
  return a1;
}

void sub_100FCFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    unsigned int v20 = *(void **)v18;
    if (!*(void *)v18) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unsigned int v20 = *(void **)v18;
    if (!*(void *)v18) {
      goto LABEL_3;
    }
  }
  *(void *)(v18 + 8) = v20;
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FDC4(uint64_t a1)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    uint64_t v1 = (uint64_t *)a1;
    switch(*(unsigned char *)(a1 + 23))
    {
      case 3:
        if (*(_WORD *)a1 != 28257 || *(unsigned char *)(a1 + 2) != 121) {
          goto LABEL_39;
        }
        return 0;
      case 8:
        if (*(void *)a1 == 0x6D61657274737075) {
          return 1;
        }
        goto LABEL_39;
      case 0xA:
        if (*(void *)a1 != 0x657274736E776F64 || *(_WORD *)(a1 + 8) != 28001) {
          goto LABEL_39;
        }
        return 2;
      case 0x10:
        goto LABEL_24;
      default:
        goto LABEL_39;
    }
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 == 3 && **(_WORD **)a1 == 28257 && *(unsigned char *)(*(void *)a1 + 2) == 121) {
    return 0;
  }
  if (v3 == 8)
  {
    if (**(void **)a1 == 0x6D61657274737075) {
      return 1;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 == 10)
  {
    if (**(void **)a1 == 0x657274736E776F64 && *(_WORD *)(*(void *)a1 + 8) == 28001) {
      return 2;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 != 16) {
    goto LABEL_39;
  }
  uint64_t v1 = *(uint64_t **)a1;
LABEL_24:
  uint64_t v7 = *v1;
  uint64_t v6 = v1[1];
  if (v7 != 0x6F645F726F5F7075 || v6 != 0x6D61657274736E77)
  {
LABEL_39:
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    __int16 v12 = (void *)sub_2F404((uint64_t)exception, &v13);
  }
  return 0xFFFFFFFFLL;
}

void sub_100FFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010050(uint64_t *a1)
{
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    int v1 = *((unsigned __int8 *)a1 + 23);
    uint64_t v2 = a1;
    switch(*((unsigned char *)a1 + 23))
    {
      case 4:
        if (*(_DWORD *)a1 != 1347240274) {
          goto LABEL_52;
        }
        return 1;
      case 5:
        goto LABEL_26;
      case 7:
        if (*(_DWORD *)a1 != 1212631368 || *(_DWORD *)((char *)a1 + 3) != 1497454408) {
          goto LABEL_52;
        }
        return 0;
      case 0xC:
        if (*a1 == 0x4148435F4E525554 && *((_DWORD *)a1 + 2) == 1279610446) {
          return 2;
        }
        uint64_t v2 = a1;
        if (v1 == 5) {
          goto LABEL_26;
        }
        if (v1 != 12) {
          goto LABEL_52;
        }
        if (*a1 != 0x5F52414C55474552 || *((_DWORD *)a1 + 2) != 1145130834) {
          goto LABEL_52;
        }
        return 3;
      default:
        goto LABEL_52;
    }
  }
  uint64_t v3 = a1[1];
  if (v3 == 4)
  {
    if (*(_DWORD *)*a1 == 1347240274) {
      return 1;
    }
    uint64_t v3 = a1[1];
  }
  else if (v3 == 7 && *(_DWORD *)*a1 == 1212631368 && *(_DWORD *)(*a1 + 3) == 1497454408)
  {
    return 0;
  }
  if (v3 == 12)
  {
    uint64_t v5 = (uint64_t *)*a1;
    if (*(void *)*a1 == 0x4148435F4E525554 && *(_DWORD *)(*a1 + 8) == 1279610446) {
      return 2;
    }
    uint64_t v3 = a1[1];
    if (v3 == 12)
    {
      uint64_t v7 = *v5;
      int v8 = *((_DWORD *)v5 + 2);
      if (v7 == 0x5F52414C55474552 && v8 == 1145130834) {
        return 3;
      }
    }
  }
  if (v3 != 5) {
    goto LABEL_52;
  }
  uint64_t v2 = (uint64_t *)*a1;
LABEL_26:
  int v10 = *(_DWORD *)v2;
  int v11 = *((unsigned __int8 *)v2 + 4);
  if (v10 != 1162368079 || v11 != 82)
  {
LABEL_52:
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v18 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return 4;
}

void sub_10102F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101034C(uint64_t a1, uint64_t a2, void *a3)
{
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "max_growth");
  double v6 = sub_5C7E8(a3, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)a1 = v6;
  *(_DWORD *)(a1 + 8) = 0;
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "use_single_arcs");
  BOOL v7 = sub_29D62C(a3, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 12) = v7;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "start_at_added_nodes");
  BOOL v8 = sub_29D62C(a3, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 13) = v8;
  *(void *)(a1 + 16) = a2;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "connector_exploration");
  double v9 = (void *)sub_560F4(a3, (uint64_t)__p);
  sub_100F678(a1 + 56, v9);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 176) = 0;
  *(_WORD *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 170) = 0;
  *(_DWORD *)(a1 + 196) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "minimum_capacities");
  int v10 = (void *)sub_560F4(a3, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 6;
  strcpy((char *)__p, "enable");
  BOOL v11 = sub_29D62C(v10, (uint64_t)__p);
  *(unsigned char *)(a1 + 24) = v11;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (!*(unsigned char *)(a1 + 24)) {
      goto LABEL_21;
    }
  }
  else if (!v11)
  {
    goto LABEL_21;
  }
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "search_radius_m");
  *(void *)(a1 + 32) = sub_5CDE0(v10, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "collection_radius_m");
  *(void *)(a1 + 40) = sub_5CDE0(v10, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "only_regular_roads");
  *(unsigned char *)(a1 + 48) = sub_29D62C(v10, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
LABEL_21:
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "node_marking");
  __int16 v12 = (void *)sub_560F4(a3, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 6;
  strcpy((char *)__p, "enable");
  BOOL v13 = sub_29D62C(v12, (uint64_t)__p);
  *(unsigned char *)(a1 + 168) = v13;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (!*(unsigned char *)(a1 + 168)) {
      return a1;
    }
  }
  else if (!v13)
  {
    return a1;
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "heavy_traffic");
  *(unsigned char *)(a1 + 169) = sub_29D62C(v12, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "heavy_traffic_terminals");
  *(unsigned char *)(a1 + 170) = sub_29D62C(v12, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "heavy_traffic_factor");
  *(double *)(a1 + 176) = sub_5C7E8(v12, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "heavy_traffic_max_speed_kph");
  *(double *)(a1 + 184) = sub_5D138(v12, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "soft_closures");
  *(unsigned char *)(a1 + 192) = sub_29D62C(v12, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "collect_upstream");
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a1 + 196) & 0xFFFFFFFE | sub_29D62C(v12, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "collect_downstream");
  if (sub_29D62C(v12, (uint64_t)__p)) {
    int v14 = 2;
  }
  else {
    int v14 = 0;
  }
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a1 + 196) & 0xFFFFFFFD | v14;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "collect_only_decision_points");
  *(unsigned char *)(a1 + 200) = sub_29D62C(v12, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "collection_radius_m");
  *(void *)(a1 + 208) = sub_5CDE0(v12, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "decision_point_min_capacity");
  *(double *)(a1 + 224) = sub_5C7E8(v12, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "number_collected_decision_points");
  *(_DWORD *)(a1 + 216) = sub_31AC04(v12, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1010A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  long long v19 = *v17;
  if (*v17)
  {
    *(void *)(v16 + 64) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1010B20(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  BOOL v8 = *(int **)(a2 + 8);
  double v9 = (unsigned __int16 *)((char *)v8 - *v8);
  unsigned int v10 = *v9;
  if (*(unsigned char *)(a2 + 38))
  {
    if (v10 < 5) {
      goto LABEL_11;
    }
    unsigned int v11 = v9[2];
    if (!v11) {
      goto LABEL_11;
    }
  }
  else if (v10 < 9 || (unsigned int v11 = v9[4]) == 0)
  {
LABEL_11:
    __int16 v12 = 0;
    BOOL v13 = *(int **)(a2 + 48);
    int v14 = (unsigned __int16 *)((char *)v13 - *v13);
    unsigned int v15 = *v14;
    if (*(unsigned char *)(a2 + 78)) {
      goto LABEL_12;
    }
LABEL_8:
    if (v15 >= 5)
    {
      unsigned int v16 = v14[2];
      if (v16) {
        goto LABEL_14;
      }
    }
    goto LABEL_15;
  }
  __int16 v12 = *(_WORD *)((char *)v8 + v11);
  BOOL v13 = *(int **)(a2 + 48);
  int v14 = (unsigned __int16 *)((char *)v13 - *v13);
  unsigned int v15 = *v14;
  if (!*(unsigned char *)(a2 + 78)) {
    goto LABEL_8;
  }
LABEL_12:
  if (v15 >= 9)
  {
    unsigned int v16 = v14[4];
    if (v16)
    {
LABEL_14:
      int v17 = *(unsigned __int16 *)((char *)v13 + v16);
      goto LABEL_16;
    }
  }
LABEL_15:
  int v17 = 0;
LABEL_16:
  unsigned __int16 v18 = v12 + 18000;
  unsigned int v19 = (unsigned __int16)(v12 + 18000) >> 5;
  unsigned __int16 v20 = v12 - 18000;
  if (v19 < 0x465) {
    unsigned __int16 v20 = v18;
  }
  int v21 = v17 - v20;
  if (v21 > 18000) {
    v21 -= 36000;
  }
  if (v21 < -17999) {
    v21 += 36000;
  }
  if (fabs((double)v21 / 100.0) > *(double *)(a3 + 56)) {
    return 0;
  }
  unint64_t v23 = *(int **)(a2 + 40);
  double v24 = (unsigned __int16 *)((char *)v23 - *v23);
  if (*v24 >= 0x2Fu && (uint64_t v25 = v24[23]) != 0)
  {
    int v26 = *((unsigned __int8 *)v23 + v25);
    int v27 = 2;
    char v28 = 1;
    switch(v26)
    {
      case 0:
        int v27 = 0;
        break;
      case 2:
      case 16:
      case 23:
      case 26:
      case 29:
        int v27 = 1;
        break;
      case 32:
        goto LABEL_29;
      case 34:
      case 40:
      case 42:
        break;
      default:
        int v27 = 4;
        char v28 = 1;
        break;
    }
  }
  else
  {
LABEL_29:
    char v28 = 0;
    int v27 = 3;
  }
  uint64_t v29 = *(_DWORD **)a3;
  unint64_t v30 = *(_DWORD **)(a3 + 8);
  if (*(_DWORD **)a3 != v30)
  {
    while (*v29 != v27)
    {
      if (++v29 == v30)
      {
        uint64_t v29 = *(_DWORD **)(a3 + 8);
        break;
      }
    }
  }
  if (v29 == v30) {
    return 0;
  }
  if (!*(unsigned char *)(a3 + 85)) {
    char v28 = 0;
  }
  if (v28) {
    return 1;
  }
  unsigned __int16 v31 = (unsigned __int16)sub_3AC808(*(void *)(a1 + 9696), *(void *)(a2 + 72));
  unint64_t v32 = sub_3A5DDC(*(void *)(a1 + 9712), *(void *)(a2 + 72));
  if (*(unsigned char *)(a1 + 9760) != 2)
  {
    unsigned __int16 v33 = 0;
    uint64_t v34 = *(void *)(a1 + 9696);
    uint64_t v35 = sub_32A458(v34, *(void *)(a2 + 72));
    if (v35) {
      goto LABEL_40;
    }
LABEL_46:
    double v40 = 0.0;
    if (!*(unsigned char *)(a3 + 86)) {
      goto LABEL_60;
    }
    goto LABEL_58;
  }
  unsigned __int16 v33 = sub_29A160(*(void *)(a1 + 9704), v32);
  uint64_t v34 = *(void *)(a1 + 9696);
  uint64_t v35 = sub_32A458(v34, *(void *)(a2 + 72));
  if (!v35) {
    goto LABEL_46;
  }
LABEL_40:
  uint64_t v36 = &v35[-*(int *)v35];
  unsigned int v37 = *(unsigned __int16 *)v36;
  if (v37 >= 0xB && *((_WORD *)v36 + 5))
  {
    unsigned int v38 = *(unsigned __int16 *)&v35[*((unsigned __int16 *)v36 + 5)];
    unsigned int v39 = *(unsigned __int16 *)(v34 + 3880);
    if (!*(_WORD *)(v34 + 3880)) {
      goto LABEL_53;
    }
  }
  else
  {
    unsigned int v38 = 0xFFFF;
    unsigned int v39 = *(unsigned __int16 *)(v34 + 3880);
    if (!*(_WORD *)(v34 + 3880)) {
      goto LABEL_53;
    }
  }
  if (v37 >= 0x11)
  {
    uint64_t v41 = *((unsigned __int16 *)v36 + 8);
    if (v41)
    {
      uint64_t v42 = &v35[v41 + *(unsigned int *)&v35[v41]];
      if (*(_DWORD *)v42 >= v39)
      {
        unsigned int v43 = *(unsigned __int16 *)&v42[2 * v39 + 2];
        if ((unsigned __int16)(v43 + 1) > 1u)
        {
          double v44 = (double)v43;
          goto LABEL_55;
        }
      }
    }
  }
LABEL_53:
  if (v38 == 0xFFFF)
  {
    double v40 = 0.3;
    if (!*(unsigned char *)(a3 + 86)) {
      goto LABEL_60;
    }
LABEL_58:
    if (v40 * *(double *)(a3 + 88) <= a4) {
      goto LABEL_60;
    }
    return 1;
  }
  double v44 = (double)v38;
LABEL_55:
  double v40 = v44 / 1000.0;
  if (*(unsigned char *)(a3 + 86)) {
    goto LABEL_58;
  }
LABEL_60:
  unsigned int v45 = *(unsigned __int16 *)(a3 + 80);
  unsigned int v46 = *(unsigned __int16 *)(a3 + 82);
  if (*(unsigned char *)(a3 + 84))
  {
    BOOL result = 0;
    if (v45 > v31 || v46 > v33) {
      return result;
    }
    return v40 >= *(double *)(a3 + 72);
  }
  BOOL result = 1;
  if (v45 > v31 && v46 > v33) {
    return v40 >= *(double *)(a3 + 72);
  }
  return result;
}

void sub_1010FB8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  ++*(_DWORD *)(a1 + 816);
  sub_F97750(a1, a2, &v21);
  if (v21)
  {
    uint64_t v6 = v22;
    uint64_t v7 = *(void *)(a1 + 768) + 144 * *(unsigned int *)(v22 + 8);
    long long v8 = *(_OWORD *)(a3 + 48);
    long long v9 = *(_OWORD *)(a3 + 64);
    long long v10 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(v7 + 24) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v7 + 72) = v9;
    *(_OWORD *)(v7 + 56) = v8;
    *(_OWORD *)(v7 + 40) = v10;
    long long v12 = *(_OWORD *)(a3 + 96);
    long long v11 = *(_OWORD *)(a3 + 112);
    uint64_t v13 = *(void *)(a3 + 128);
    *(_OWORD *)(v7 + 88) = *(_OWORD *)(a3 + 80);
    *(void *)(v7 + 136) = v13;
    *(_OWORD *)(v7 + 120) = v11;
    *(_OWORD *)(v7 + 104) = v12;
    *(_OWORD *)(v7 + 8) = *(_OWORD *)a3;
    int v14 = (uint64_t *)(a1 + 824);
    unint64_t v15 = *(unsigned int *)(v6 + 8);
    uint64_t v16 = *(void *)(a1 + 848);
    if (v15 >= (*(void *)(a1 + 856) - v16) >> 2 || *(_DWORD *)(v16 + 4 * v15) == -1) {
      goto LABEL_12;
    }
LABEL_10:
    sub_1012EFC(v14, v15, (__n128 *)a3);
    return;
  }
  unint64_t v17 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 776) - *(void *)(a1 + 768)) >> 4);
  sub_EE1844(a1, a2, (uint64_t)&v23);
  uint64_t v18 = v24;
  uint64_t v19 = *(void *)(v23 + 8);
  if (v25) {
    *(void *)(v19 + 16 * v24) = *a2;
  }
  *(_DWORD *)(v19 + 16 * v18 + 8) = v17;
  sub_10129FC((char **)(a1 + 768), a2, (long long *)a3);
  int v14 = (uint64_t *)(a1 + 824);
  uint64_t v20 = *(void *)(a1 + 848);
  if (v17 < (unint64_t)((*(void *)(a1 + 856) - v20) >> 2)
    && *(_DWORD *)(v20 + 4 * v17) != -1)
  {
    LODWORD(v15) = v17;
    goto LABEL_10;
  }
  LODWORD(v15) = v17;
LABEL_12:
  sub_1012BE0((uint64_t)v14, v15, (_OWORD *)a3);
}

unsigned int **sub_101115C(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)(a1 + 824);
  uint64_t v3 = *(char **)(a1 + 800);
  uint64_t v4 = v3;
  unint64_t v5 = *(void *)(a1 + 808);
  if ((unint64_t)v3 >= v5)
  {
    uint64_t v7 = *(char **)(a1 + 792);
    uint64_t v8 = (v3 - v7) >> 2;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62) {
      sub_2E00();
    }
    uint64_t v10 = v5 - (void)v7;
    if (v10 >> 1 > v9) {
      unint64_t v9 = v10 >> 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 62) {
        sub_188D718();
      }
      long long v12 = operator new(4 * v11);
    }
    else
    {
      long long v12 = 0;
    }
    uint64_t v13 = &v12[4 * v8];
    *uint64_t v13 = *v2;
    uint64_t v6 = v13 + 1;
    if (v3 != v7)
    {
      unint64_t v14 = v3 - v7 - 4;
      if (v14 < 0x2C) {
        goto LABEL_29;
      }
      if ((unint64_t)(v7 - v12) < 0x20) {
        goto LABEL_29;
      }
      uint64_t v15 = (v14 >> 2) + 1;
      uint64_t v16 = 4 * (v15 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v4 = &v3[-v16];
      uint64_t v13 = (_DWORD *)((char *)v13 - v16);
      unint64_t v17 = &v12[4 * v8 - 16];
      uint64_t v18 = v3 - 16;
      uint64_t v19 = v15 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v20 = *(_OWORD *)v18;
        *(v17 - 1) = *((_OWORD *)v18 - 1);
        *unint64_t v17 = v20;
        v17 -= 2;
        v18 -= 32;
        v19 -= 8;
      }
      while (v19);
      if (v15 != (v15 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          int v21 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *--uint64_t v13 = v21;
        }
        while (v4 != v7);
      }
    }
    *(void *)(a1 + 792) = v13;
    *(void *)(a1 + 800) = v6;
    *(void *)(a1 + 808) = &v12[4 * v11];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v3 = *v2;
    uint64_t v6 = v3 + 4;
  }
  *(void *)(a1 + 800) = v6;

  return sub_1013154((unsigned int **)(a1 + 824));
}

uint64_t sub_10112DC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_F97750(a1, a2, &v27);
  if (v27)
  {
    uint64_t v6 = v28;
    uint64_t v7 = *(void *)(a1 + 768) + 144 * *(unsigned int *)(v28 + 8);
    unsigned int v9 = *(_DWORD *)(v7 + 8);
    uint64_t v8 = v7 + 8;
    BOOL v10 = *(_DWORD *)a3 >= v9;
    if (*(_DWORD *)a3 == v9)
    {
      int v11 = *(_DWORD *)(a3 + 4);
      int v12 = *(_DWORD *)(v8 + 4);
      if (v11 == v12)
      {
        if (*(void *)(a3 + 8) >= *(void *)(v8 + 8)) {
          return 0;
        }
      }
      else if (v11 >= v12)
      {
        return 0;
      }
    }
    else if (v10)
    {
      return 0;
    }
    ++*(_DWORD *)(a1 + 816);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)a3;
    long long v20 = *(_OWORD *)(a3 + 16);
    long long v21 = *(_OWORD *)(a3 + 32);
    long long v22 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(v8 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(v8 + 64) = v22;
    *(_OWORD *)(v8 + 16) = v20;
    *(_OWORD *)(v8 + 32) = v21;
    long long v23 = *(_OWORD *)(a3 + 80);
    long long v24 = *(_OWORD *)(a3 + 96);
    long long v25 = *(_OWORD *)(a3 + 112);
    *(void *)(v8 + 128) = *(void *)(a3 + 128);
    *(_OWORD *)(v8 + 96) = v24;
    *(_OWORD *)(v8 + 112) = v25;
    *(_OWORD *)(v8 + 80) = v23;
    unint64_t v17 = (uint64_t *)(a1 + 824);
    unint64_t v19 = *(unsigned int *)(v6 + 8);
    uint64_t v26 = *(void *)(a1 + 848);
    if (v19 < (*(void *)(a1 + 856) - v26) >> 2 && *(_DWORD *)(v26 + 4 * v19) != -1) {
      goto LABEL_14;
    }
LABEL_16:
    sub_1012BE0((uint64_t)v17, v19, (_OWORD *)a3);
    return 1;
  }
  ++*(_DWORD *)(a1 + 816);
  unint64_t v14 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 776) - *(void *)(a1 + 768)) >> 4);
  sub_EE1844(a1, a2, (uint64_t)&v29);
  uint64_t v15 = v30;
  uint64_t v16 = *(void *)(v29 + 8);
  if (v31) {
    *(void *)(v16 + 16 * v30) = *a2;
  }
  *(_DWORD *)(v16 + 16 * v15 + 8) = v14;
  sub_10129FC((char **)(a1 + 768), a2, (long long *)a3);
  unint64_t v17 = (uint64_t *)(a1 + 824);
  uint64_t v18 = *(void *)(a1 + 848);
  if (v14 >= (unint64_t)((*(void *)(a1 + 856) - v18) >> 2)
    || *(_DWORD *)(v18 + 4 * v14) == -1)
  {
    LODWORD(v19) = v14;
    goto LABEL_16;
  }
  LODWORD(v19) = v14;
LABEL_14:
  sub_1012EFC(v17, v19, (__n128 *)a3);
  return 1;
}

BOOL sub_10114C8(void *a1, int a2)
{
  if (!*(unsigned char *)(*a1 + 2)) {
    return 0;
  }
  uint64_t v4 = (uint64_t *)a1[1];
  uint64_t v5 = sub_100231C(a1[2]);
  double v6 = sub_45A4DC(v4[1212], v5);
  uint64_t v7 = v4[1213];
  unint64_t v8 = sub_3A5DDC(v4[1214], *(void *)(v5 + 32));
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  double v9 = sub_299F0C(v7, v8, (uint64_t)&v39, 0);
  uint64_t v10 = sub_100231C(a1[2]);
  double v11 = sub_45A4DC(v4[1212], v10 + 40);
  uint64_t v12 = v4[1213];
  unint64_t v13 = sub_3A5DDC(v4[1214], *(void *)(v10 + 72));
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  double v14 = sub_299F0C(v12, v13, (uint64_t)&v39, 0);
  BOOL result = 0;
  BOOL v18 = *(uint64_t *)&v6 > -1 && ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
     || (unint64_t)(*(void *)&v6 - 1) < 0xFFFFFFFFFFFFFLL
     || (*(void *)&v6 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v18 && v6 > 0.0)
  {
    BOOL result = 0;
    BOOL v19 = *(uint64_t *)&v11 <= -1 || ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
    BOOL v20 = v19 && (unint64_t)(*(void *)&v11 - 1) >= 0xFFFFFFFFFFFFFLL;
    BOOL v21 = !v20 || (*(void *)&v11 & 0x7FFFFFFFFFFFFFFFLL) == 0;
    if (v21 && v11 > 0.0)
    {
      if (a2)
      {
        if (a2 != 1) {
          goto LABEL_55;
        }
        BOOL result = 0;
        BOOL v24 = *(uint64_t *)&v9 > -1 && ((*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
           || (unint64_t)(*(void *)&v9 - 1) < 0xFFFFFFFFFFFFFLL
           || (*(void *)&v9 & 0x7FFFFFFFFFFFFFFFLL) == 0;
        if (v24 && v9 > 0.0)
        {
          if (v9 > *(double *)(*a1 + 16)) {
            return 0;
          }
          goto LABEL_55;
        }
      }
      else
      {
        BOOL result = 0;
        BOOL v27 = *(uint64_t *)&v14 > -1 && ((*(void *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
           || (unint64_t)(*(void *)&v14 - 1) < 0xFFFFFFFFFFFFFLL
           || (*(void *)&v14 & 0x7FFFFFFFFFFFFFFFLL) == 0;
        if (v27 && v14 > 0.0)
        {
          if (v14 > *(double *)(*a1 + 16)) {
            return 0;
          }
LABEL_55:
          BOOL v31 = (*(uint64_t *)&v9 <= -1 || ((*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
             && (unint64_t)(*(void *)&v9 - 1) >= 0xFFFFFFFFFFFFFLL
             && (*(void *)&v9 & 0x7FFFFFFFFFFFFFFFLL) != 0
             || v9 <= 0.0;
          double v32 = v6 / v9;
          if (v31) {
            double v32 = 1.0;
          }
          BOOL v36 = (*(uint64_t *)&v14 <= -1
              || ((*(void *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
             && (unint64_t)(*(void *)&v14 - 1) >= 0xFFFFFFFFFFFFFLL
             && (*(void *)&v14 & 0x7FFFFFFFFFFFFFFFLL) != 0
             || v14 <= 0.0;
          double v37 = v11 / v14;
          if (v36) {
            double v37 = 1.0;
          }
          double v38 = *(double *)(*a1 + 8);
          if (a2)
          {
            if (v32 > v38) {
              return v37 <= v38;
            }
          }
          else if (v32 > v38)
          {
            return v37 > v38;
          }
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1011784(uint64_t a1)
{
  *(void *)a1 = &unk_20E1710;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = &unk_20E1710;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = &unk_20E1710;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = &unk_20E1710;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = &unk_20E1710;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = &unk_20E1710;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = &unk_20E1710;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = &unk_20E1710;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = &unk_20E1710;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = &unk_20E1710;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = &unk_20E1710;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 528) = &unk_20E1710;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 576) = &unk_20E1710;
  *(void *)(a1 + 616) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 624) = &unk_20E1710;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 672) = &unk_20E1710;
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 680) = 0;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 720) = &unk_20E1710;
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 744) = 0;
  *(_DWORD *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 804) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  uint64_t v2 = (char *)operator new(8uLL);
  *(void *)(a1 + 848) = v2;
  *(void *)(a1 + 856) = v2;
  *(void *)(a1 + 864) = v2 + 8;
  uint64_t v3 = (char *)operator new(0xBE8uLL);
  *(void *)(a1 + 824) = v3;
  *(void *)(a1 + 832) = v3;
  *(void *)(a1 + 840) = v3 + 3048;
  return a1;
}

void sub_10118F0(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  v1[107] = v3;
  operator delete(v3);
  uint64_t v5 = (void *)v1[103];
  if (v5)
  {
    v1[104] = v5;
    operator delete(v5);
    double v6 = (void *)v1[99];
    if (!v6)
    {
LABEL_3:
      uint64_t v7 = (void *)v1[96];
      if (!v7) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    double v6 = (void *)v1[99];
    if (!v6) {
      goto LABEL_3;
    }
  }
  v1[100] = v6;
  operator delete(v6);
  uint64_t v7 = (void *)v1[96];
  if (!v7)
  {
LABEL_4:
    sub_328138((uint64_t)v1);
    _Unwind_Resume(a1);
  }
LABEL_7:
  v1[97] = v7;
  operator delete(v7);
  sub_328138((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  if (v3 == *(_DWORD *)(a2 + 16)) {
    return 0;
  }
  while (1)
  {
    uint64_t v8 = **(void **)a1 + 152 * v3;
    if (sub_10022FC(v8))
    {
      uint64_t v9 = sub_100231C(v8);
      unint64_t v10 = *(void *)(a3 + 32);
      if (__PAIR64__(*(unsigned __int16 *)(v9 + 36), *(_DWORD *)(v9 + 32)) == __PAIR64__(WORD2(v10), v10)
        && (HIWORD(v10) & 1) != (*(unsigned char *)(v9 + 38) == 0))
      {
        unint64_t v11 = *(void *)(a3 + 72);
        if (__PAIR64__(*(unsigned __int16 *)(v9 + 76), *(_DWORD *)(v9 + 72)) == __PAIR64__(WORD2(v11), v11)
          && (HIWORD(v11) & 1) != (*(unsigned char *)(v9 + 78) == 0))
        {
          unsigned int v12 = *(_DWORD *)(v9 + 80);
          BOOL v14 = (unsigned __int16)*(_DWORD *)(a3 + 80) == (unsigned __int16)v12;
          unsigned int v13 = (*(_DWORD *)(a3 + 80) ^ v12) >> 16;
          BOOL v14 = v14 && v13 == 0;
          if (v14
            && ((*(unsigned char *)(a3 + 88) ^ *(unsigned char *)(v9 + 88)) & 3) == 0
            && ((*(_WORD *)(a3 + 84) ^ *(_WORD *)(v9 + 84)) & 0x7FFF) == 0
            && ((*(unsigned char *)(a3 + 88) ^ *(unsigned char *)(v9 + 88)) & 0x1C) == 0
            && *(unsigned __int16 *)(a3 + 86) == *(unsigned __int16 *)(v9 + 86))
          {
            break;
          }
        }
      }
    }
    uint64_t v3 = *(unsigned int *)(**(void **)(a1 + 8) + 4 * *(unsigned int *)(a1 + 16));
    *(_DWORD *)(a1 + 16) = v3;
    if (v3 == *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_1011AF0(uint64_t a1)
{
  *(void *)a1 = &unk_20E1710;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = &unk_20E1710;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = &unk_20E1710;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = &unk_20E1710;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = &unk_20E1710;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = &unk_20E1710;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = &unk_20E1710;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = &unk_20E1710;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = &unk_20E1710;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = &unk_20E1710;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = &unk_20E1710;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 528) = &unk_20E1710;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 576) = &unk_20E1710;
  *(void *)(a1 + 616) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 624) = &unk_20E1710;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 672) = &unk_20E1710;
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 680) = 0;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 720) = &unk_20E1710;
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 744) = 0;
  *(_DWORD *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 804) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  uint64_t v2 = (char *)operator new(8uLL);
  *(void *)(a1 + 848) = v2;
  *(void *)(a1 + 856) = v2;
  *(void *)(a1 + 864) = v2 + 8;
  uint64_t v3 = (char *)operator new(0x7F0uLL);
  *(void *)(a1 + 824) = v3;
  *(void *)(a1 + 832) = v3;
  *(void *)(a1 + 840) = v3 + 2032;
  return a1;
}

void sub_1011C5C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  v1[107] = v3;
  operator delete(v3);
  uint64_t v5 = (void *)v1[103];
  if (v5)
  {
    v1[104] = v5;
    operator delete(v5);
    double v6 = (void *)v1[99];
    if (!v6)
    {
LABEL_3:
      uint64_t v7 = (void *)v1[96];
      if (!v7) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    double v6 = (void *)v1[99];
    if (!v6) {
      goto LABEL_3;
    }
  }
  v1[100] = v6;
  operator delete(v6);
  uint64_t v7 = (void *)v1[96];
  if (!v7)
  {
LABEL_4:
    sub_328138((uint64_t)v1);
    _Unwind_Resume(a1);
  }
LABEL_7:
  v1[97] = v7;
  operator delete(v7);
  sub_328138((uint64_t)v1);
  _Unwind_Resume(a1);
}

void sub_1011CE0(uint64_t a1, unint64_t a2, size_t __sz)
{
  uint64_t v5 = *(unsigned char **)a1;
  double v6 = *(unsigned char **)(a1 + 8);
  uint64_t v7 = (uint64_t)&v6[-*(void *)a1];
  uint64_t v8 = v7 >> 2;
  if (v7 >> 2 >= a2 || a2 <= (uint64_t)(*(void *)(a1 + 16) - (void)v5) >> 2) {
    goto LABEL_14;
  }
  if (a2 >> 62) {
    sub_2E00();
  }
  uint64_t v9 = 4 * a2;
  unint64_t v10 = (char *)operator new(4 * a2);
  unint64_t v11 = &v10[4 * v8];
  unsigned int v12 = v11;
  if (v6 != v5)
  {
    unint64_t v13 = v6 - v5 - 4;
    if (v13 < 0x2C)
    {
      unsigned int v12 = &v10[4 * v8];
      do
      {
LABEL_11:
        int v21 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *((_DWORD *)v12 - 1) = v21;
        v12 -= 4;
      }
      while (v6 != v5);
      goto LABEL_12;
    }
    unsigned int v12 = &v10[4 * v8];
    if ((unint64_t)(v6 - v10 - v7) < 0x20) {
      goto LABEL_11;
    }
    uint64_t v14 = (v13 >> 2) + 1;
    uint64_t v15 = 4 * (v14 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v16 = &v6[-v15];
    unsigned int v12 = &v11[-v15];
    unint64_t v17 = &v10[4 * v8 - 16];
    BOOL v18 = (long long *)(v6 - 16);
    uint64_t v19 = v14 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v20 = *v18;
      *((_OWORD *)v17 - 1) = *(v18 - 1);
      *(_OWORD *)unint64_t v17 = v20;
      v17 -= 32;
      v18 -= 2;
      v19 -= 8;
    }
    while (v19);
    double v6 = v16;
    if (v14 != (v14 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_11;
    }
  }
LABEL_12:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v11;
  *(void *)(a1 + 16) = &v10[v9];
  if (v5) {
    operator delete(v5);
  }
LABEL_14:
  long long v22 = *(unsigned char **)(a1 + 24);
  long long v23 = *(unsigned char **)(a1 + 32);
  unint64_t v24 = (v23 - v22) >> 4;
  if (v24 < __sz)
  {
    if (__sz > (uint64_t)(*(void *)(a1 + 40) - (void)v22) >> 4)
    {
      if (__sz >> 60) {
        sub_2E00();
      }
      long long v25 = (char *)operator new(16 * __sz);
      uint64_t v26 = &v25[16 * v24];
      if (v23 != v22)
      {
        BOOL v27 = &v25[16 * v24];
        do
        {
          uint64_t v26 = v27 - 16;
          *((_OWORD *)v27 - 1) = *((_OWORD *)v23 - 1);
          v23 -= 16;
          v27 -= 16;
        }
        while (v23 != v22);
      }
      *(void *)(a1 + 24) = v26;
      *(void *)(a1 + 32) = &v25[16 * v24];
      *(void *)(a1 + 40) = &v25[16 * __sz];
      if (v22) {
        operator delete(v22);
      }
    }
    uint64_t v28 = *(unsigned char **)(a1 + 48);
    if (__sz > (uint64_t)(*(void *)(a1 + 64) - (void)v28) >> 2)
    {
      if (__sz >> 62) {
        sub_2E00();
      }
      uint64_t v29 = *(unsigned char **)(a1 + 56);
      size_t v30 = 4 * __sz;
      BOOL v31 = (char *)operator new(v30);
      uint64_t v32 = v29 - v28;
      unsigned __int16 v33 = &v31[(v29 - v28) & 0xFFFFFFFFFFFFFFFCLL];
      uint64_t v34 = v33;
      if (v29 == v28) {
        goto LABEL_32;
      }
      if ((unint64_t)(v32 - 4) >= 0x2C)
      {
        uint64_t v34 = &v31[(v29 - v28) & 0xFFFFFFFFFFFFFFFCLL];
        if (v29 - v31 - (v32 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
        {
          uint64_t v35 = v32 >> 2;
          unint64_t v36 = ((unint64_t)(v32 - 4) >> 2) + 1;
          uint64_t v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
          double v38 = &v29[-v37];
          uint64_t v34 = &v33[-v37];
          uint64_t v39 = &v31[4 * v35 - 16];
          uint64_t v40 = (long long *)(v29 - 16);
          uint64_t v41 = v36 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v42 = *v40;
            *((_OWORD *)v39 - 1) = *(v40 - 1);
            *(_OWORD *)uint64_t v39 = v42;
            v39 -= 32;
            v40 -= 2;
            v41 -= 8;
          }
          while (v41);
          uint64_t v29 = v38;
          if (v36 == (v36 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_32:
            *(void *)(a1 + 48) = v34;
            *(void *)(a1 + 56) = v33;
            *(void *)(a1 + 64) = &v31[v30];
            if (v28)
            {
              operator delete(v28);
            }
            return;
          }
        }
      }
      else
      {
        uint64_t v34 = &v31[(v29 - v28) & 0xFFFFFFFFFFFFFFFCLL];
      }
      do
      {
        int v43 = *((_DWORD *)v29 - 1);
        v29 -= 4;
        *((_DWORD *)v34 - 1) = v43;
        v34 -= 4;
      }
      while (v29 != v28);
      goto LABEL_32;
    }
  }
}

void *sub_1011FA4(void *a1, unsigned int a2)
{
  uint64_t v4 = a2;
  v13[0] = a2;
  v13[1] = (unint64_t)&v12;
  v13[2] = (unint64_t)&v11;
  v13[3] = (unint64_t)&v10;
  uint64_t v5 = sub_ED2164(a1, v13);
  *((_DWORD *)v5 + 218) = 0;
  *(_OWORD *)(v5 + 105) = 0u;
  *(_OWORD *)(v5 + 107) = 0u;
  *(_OWORD *)(v5 + 103) = 0u;
  *((_OWORD *)v5 + 48) = 0u;
  *((_OWORD *)v5 + 49) = 0u;
  *((_OWORD *)v5 + 50) = 0u;
  *((_DWORD *)v5 + 204) = 0;
  if (a2)
  {
    double v6 = (char *)operator new(4 * v4);
    a1[106] = v6;
    a1[107] = v6;
    a1[108] = &v6[4 * v4];
  }
  uint64_t v7 = (char *)operator new(0x7F0uLL);
  a1[103] = v7;
  a1[104] = v7;
  a1[105] = v7 + 2032;
  if (a2)
  {
    uint64_t v8 = (char *)operator new(24 * v4);
    a1[96] = v8;
    a1[97] = v8;
    a1[98] = &v8[24 * v4];
  }
  return a1;
}

void sub_1012088(_Unwind_Exception *a1)
{
  sub_3310C(v2);
  uint64_t v4 = (void **)(v1 + 96);
  uint64_t v5 = (void *)v1[99];
  if (v5)
  {
    v1[100] = v5;
    operator delete(v5);
    double v6 = *v4;
    if (!*v4)
    {
LABEL_3:
      sub_328138((uint64_t)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    double v6 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[97] = v6;
  operator delete(v6);
  sub_328138((uint64_t)v1);
  _Unwind_Resume(a1);
}

void sub_1012110(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  ++*(_DWORD *)(a1 + 816);
  uint64_t v7 = *a2;
  unint64_t v8 = 265 * ((~v7 + (v7 << 21)) ^ ((unint64_t)(~v7 + (v7 << 21)) >> 24));
  unint64_t v9 = 2147483649u * ((21 * (v8 ^ (v8 >> 14))) ^ ((21 * (v8 ^ (v8 >> 14))) >> 28));
  char v10 = (void *)(a1 + 48 * (((BYTE1(v9) ^ BYTE2(v9)) ^ BYTE3(v9)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  uint64_t v13 = 0x101010101010101 * (v9 & 0x7F);
  while (1)
  {
    unint64_t v14 = v11 & v12;
    uint64_t v15 = *(void *)(*v10 + v14);
    unint64_t v16 = ((v15 ^ v13) - 0x101010101010101) & ~(v15 ^ v13) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_6:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v6 += 8;
    unint64_t v11 = v6 + v14;
  }
  uint64_t v17 = v10[1];
  while (1)
  {
    unint64_t v18 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v12;
    if (*(_DWORD *)(v17 + 8 * v18) == v7) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_6;
    }
  }
  if (v12 == v18)
  {
LABEL_9:
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 776) - *(void *)(a1 + 768)) >> 3);
    sub_ED2D48(a1, a2, (uint64_t)&v29);
    uint64_t v20 = v30;
    uint64_t v21 = *(void *)(v29 + 8);
    if (v31) {
      *(_DWORD *)(v21 + 8 * v30) = *a2;
    }
    *(_DWORD *)(v21 + 8 * v20 + 4) = v19;
    sub_F168AC((char **)(a1 + 768), a2, (_OWORD *)a3);
    long long v22 = (uint64_t *)(a1 + 824);
    uint64_t v23 = *(void *)(a1 + 848);
    if (v19 >= (unint64_t)((*(void *)(a1 + 856) - v23) >> 2)
      || *(_DWORD *)(v23 + 4 * v19) == -1)
    {
      sub_521F5C((uint64_t)v22, v19, (unint64_t *)a3);
    }
    else
    {
      sub_5221BC(v22, v19, (void *)a3);
    }
    return;
  }
  uint64_t v24 = v17 + 8 * v18;
  uint64_t v25 = *(void *)(a1 + 768) + 24 * *(unsigned int *)(v24 + 4);
  *(void *)(v25 + 8) = *(void *)a3;
  *(_DWORD *)(v25 + 16) |= *(_DWORD *)(a3 + 8);
  uint64_t v26 = (uint64_t *)(a1 + 824);
  unint64_t v27 = *(unsigned int *)(v24 + 4);
  uint64_t v28 = *(void *)(a1 + 848);
  if (v27 >= (*(void *)(a1 + 856) - v28) >> 2 || *(_DWORD *)(v28 + 4 * v27) == -1)
  {
    sub_521F5C((uint64_t)v26, v27, (unint64_t *)a3);
  }
  else
  {
    sub_5221BC(v26, v27, (void *)a3);
  }
}

BOOL sub_10123A0(uint64_t a1, unsigned int a2, void *a3, uint64_t a4)
{
  unsigned int v35 = *(_DWORD *)a4;
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = sub_1005B14(*(void *)a1, &v35);
  if (v9)
  {
    unint64_t v10 = HIDWORD(v9);
    if (HIDWORD(v9) && *(unsigned char *)(v8 + 192) != 0)
    {
      uint64_t v12 = v8 + 9720;
      uint64_t v13 = *(void *)(v8 + 9688);
      unint64_t v14 = ((v9 << 47) & 0x1000000000000 | HIDWORD(v9) | ((unint64_t)WORD1(v9) << 32)) ^ 0x1000000000000;
      unint64_t v15 = v10 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v9) << 32);
      uint64_t v27 = sub_2D5D58(v13, v15);
      uint64_t v28 = v12;
      if (*(unsigned char *)(v13 + 7772))
      {
        unint64_t v16 = sub_2DB8E0(v13 + 3896, v10, 0);
        uint64_t v17 = &v16[-*(int *)v16];
        if (*(unsigned __int16 *)v17 < 5u)
        {
          uint64_t v18 = 0;
        }
        else
        {
          uint64_t v18 = *((unsigned __int16 *)v17 + 2);
          if (v18) {
            v18 += (uint64_t)&v16[*(unsigned int *)&v16[v18]];
          }
        }
        __int16 v19 = WORD2(v14);
        uint64_t v20 = v18 + 4 * WORD2(v14) + 4 + *(unsigned int *)(v18 + 4 * WORD2(v14) + 4);
      }
      else
      {
        __int16 v19 = WORD2(v14);
        uint64_t v20 = 0;
      }
      v29[0] = v27;
      v29[1] = v20;
      v29[2] = sub_2E5C38(v13, v15, 1);
      v29[3] = v21;
      int v30 = v10;
      __int16 v31 = v19;
      char v32 = BYTE6(v14);
      sub_3F4E6C(v28, (uint64_t)v29, (uint64_t)&v33);
      long long v22 = v33;
      uint64_t v23 = v34;
      if (v33)
      {
        uint64_t v34 = v33;
        operator delete(v33);
      }
      if (v22 != v23) {
        return 1;
      }
    }
  }
  uint64_t v25 = **(void **)(a1 + 16);
  unsigned int v26 = *(unsigned __int8 *)(v25 + a2);
  if (v26 <= *(unsigned __int8 *)(v25 + v35)) {
    LOBYTE(v26) = *(unsigned char *)(v25 + v35);
  }
  *(unsigned char *)(v25 + v35) = v26;
  return *(void *)(a4 + 8) + *a3 > *(void *)(*(void *)(a1 + 24) + 40);
}

uint64_t sub_101256C(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = *a2;
  unint64_t v8 = 265 * ((~v7 + (v7 << 21)) ^ ((unint64_t)(~v7 + (v7 << 21)) >> 24));
  unint64_t v9 = 2147483649u * ((21 * (v8 ^ (v8 >> 14))) ^ ((21 * (v8 ^ (v8 >> 14))) >> 28));
  unint64_t v10 = (void *)(a1 + 48 * (((BYTE1(v9) ^ BYTE2(v9)) ^ BYTE3(v9)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  uint64_t v13 = 0x101010101010101 * (v9 & 0x7F);
  while (1)
  {
    unint64_t v14 = v11 & v12;
    uint64_t v15 = *(void *)(*v10 + v14);
    unint64_t v16 = ((v15 ^ v13) - 0x101010101010101) & ~(v15 ^ v13) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_6:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v6 += 8;
    unint64_t v11 = v6 + v14;
  }
  uint64_t v17 = v10[1];
  while (1)
  {
    unint64_t v18 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v12;
    if (*(_DWORD *)(v17 + 8 * v18) == v7) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_6;
    }
  }
  if (v12 == v18)
  {
LABEL_9:
    ++*(_DWORD *)(a1 + 816);
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 776) - *(void *)(a1 + 768)) >> 3);
    sub_ED2D48(a1, a2, (uint64_t)&v35);
    uint64_t v20 = v36;
    uint64_t v21 = *(void *)(v35 + 8);
    if (v37) {
      *(_DWORD *)(v21 + 8 * v36) = *a2;
    }
    *(_DWORD *)(v21 + 8 * v20 + 4) = v19;
    sub_F168AC((char **)(a1 + 768), a2, (_OWORD *)a3);
    long long v22 = (uint64_t *)(a1 + 824);
    uint64_t v23 = *(void *)(a1 + 848);
    if (v19 < (unint64_t)((*(void *)(a1 + 856) - v23) >> 2)
      && *(_DWORD *)(v23 + 4 * v19) != -1)
    {
      LODWORD(v24) = v19;
LABEL_14:
      sub_5221BC(v22, v24, (void *)a3);
      return 1;
    }
    LODWORD(v24) = v19;
LABEL_16:
    sub_521F5C((uint64_t)v22, v24, (unint64_t *)a3);
    return 1;
  }
  uint64_t v26 = v17 + 8 * v18;
  unsigned int v29 = *(_DWORD *)(v26 + 4);
  uint64_t v27 = (unsigned int *)(v26 + 4);
  unsigned int v28 = v29;
  uint64_t v30 = *(void *)(a1 + 768);
  uint64_t v31 = v30 + 24 * v29;
  uint64_t v33 = *(void *)(v31 + 8);
  char v32 = (void *)(v31 + 8);
  if (*(void *)a3 < v33)
  {
    ++*(_DWORD *)(a1 + 816);
    *char v32 = *(void *)a3;
    *(_DWORD *)(v30 + 24 * v28 + 16) |= *(_DWORD *)(a3 + 8);
    long long v22 = (uint64_t *)(a1 + 824);
    unint64_t v24 = *v27;
    uint64_t v34 = *(void *)(a1 + 848);
    if (v24 < (*(void *)(a1 + 856) - v34) >> 2 && *(_DWORD *)(v34 + 4 * v24) != -1) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  return 0;
}

uint64_t sub_10127DC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 == v3) {
    return 0;
  }
  uint64_t v5 = a2[1];
  uint64_t v4 = a2[2];
  uint64_t v6 = *a2;
  while (1)
  {
    uint64_t v19 = *(void *)(v2 + 72);
    if (sub_1005A88(v6, &v19)) {
      goto LABEL_5;
    }
    if (*(unsigned char *)(v2 + 78)) {
      unint64_t v8 = (int **)(v2 + 64);
    }
    else {
      unint64_t v8 = (int **)(v2 + 56);
    }
    unint64_t v9 = *v8;
    if (!*v8)
    {
      double v7 = 0.0;
      goto LABEL_4;
    }
    unint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
    unsigned int v11 = *v10;
    if (v11 >= 0xB && v10[5])
    {
      unsigned int v12 = *(unsigned __int16 *)((char *)v9 + v10[5]);
      unsigned int v13 = *(unsigned __int16 *)(*(void *)(v5 + 9696) + 3880);
      if (!*(_WORD *)(*(void *)(v5 + 9696) + 3880)) {
        goto LABEL_20;
      }
    }
    else
    {
      unsigned int v12 = 0xFFFF;
      unsigned int v13 = *(unsigned __int16 *)(*(void *)(v5 + 9696) + 3880);
      if (!*(_WORD *)(*(void *)(v5 + 9696) + 3880)) {
        goto LABEL_20;
      }
    }
    if (v11 >= 0x11)
    {
      uint64_t v14 = v10[8];
      if (v14)
      {
        uint64_t v15 = (unsigned int *)((char *)v9 + v14 + *(unsigned int *)((char *)v9 + v14));
        if (*v15 >= v13)
        {
          unsigned int v16 = *((unsigned __int16 *)v15 + v13 + 1);
          if ((unsigned __int16)(v16 + 1) > 1u)
          {
            double v17 = (double)v16;
            goto LABEL_22;
          }
        }
      }
    }
LABEL_20:
    if (v12 != 0xFFFF)
    {
      double v17 = (double)v12;
LABEL_22:
      double v7 = v17 / 1000.0;
      goto LABEL_4;
    }
    double v7 = 0.3;
LABEL_4:
    if (v7 > *(double *)(v4 + 56)) {
      return 1;
    }
LABEL_5:
    v2 += 96;
    if (v2 == v3) {
      return 0;
    }
  }
}

uint64_t sub_101294C(uint64_t result, unsigned int a2)
{
  if ((uint64_t)(*(void *)(result + 104) - *(void *)(result + 96)) >> 2 <= (unint64_t)a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "vertex id out of range");
    uint64_t v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return result;
}

void sub_10129CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10129FC(char **a1, void *a2, long long *a3)
{
  double v7 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v15 = *a1;
    unint64_t v16 = 0x8E38E38E38E38E39 * ((v7 - *a1) >> 4);
    unint64_t v17 = v16 + 1;
    if (v16 + 1 > 0x1C71C71C71C71C7) {
      sub_2E00();
    }
    unint64_t v18 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - (void)v15) >> 4);
    if (2 * v18 > v17) {
      unint64_t v17 = 2 * v18;
    }
    if (v18 >= 0xE38E38E38E38E3) {
      unint64_t v19 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 > 0x1C71C71C71C71C7) {
        sub_188D718();
      }
      uint64_t v20 = (char *)operator new(144 * v19);
    }
    else
    {
      uint64_t v20 = 0;
    }
    long long v21 = a3[4];
    long long v22 = &v20[144 * v16];
    *(_OWORD *)(v22 + 88) = a3[5];
    long long v23 = a3[7];
    *(_OWORD *)(v22 + 104) = a3[6];
    *(_OWORD *)(v22 + 120) = v23;
    long long v24 = *a3;
    *(_OWORD *)(v22 + 24) = a3[1];
    long long v25 = a3[3];
    *(_OWORD *)(v22 + 40) = a3[2];
    *(_OWORD *)(v22 + 56) = v25;
    *(_OWORD *)(v22 + 72) = v21;
    *(void *)long long v22 = *a2;
    *((void *)v22 + 17) = *((void *)a3 + 16);
    uint64_t v14 = v22 + 144;
    *(_OWORD *)(v22 + 8) = v24;
    if (v7 != v15)
    {
      do
      {
        *((_OWORD *)v22 - 9) = *((_OWORD *)v7 - 9);
        long long v26 = *((_OWORD *)v7 - 8);
        long long v27 = *((_OWORD *)v7 - 7);
        long long v28 = *((_OWORD *)v7 - 5);
        *((_OWORD *)v22 - 6) = *((_OWORD *)v7 - 6);
        *((_OWORD *)v22 - 5) = v28;
        *((_OWORD *)v22 - 8) = v26;
        *((_OWORD *)v22 - 7) = v27;
        long long v29 = *((_OWORD *)v7 - 4);
        long long v30 = *((_OWORD *)v7 - 3);
        long long v31 = *((_OWORD *)v7 - 1);
        *((_OWORD *)v22 - 2) = *((_OWORD *)v7 - 2);
        *((_OWORD *)v22 - 1) = v31;
        *((_OWORD *)v22 - 4) = v29;
        *((_OWORD *)v22 - 3) = v30;
        v22 -= 144;
        v7 -= 144;
      }
      while (v7 != v15);
      double v7 = *a1;
    }
    *a1 = v22;
    a1[1] = v14;
    a1[2] = &v20[144 * v19];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(void *)double v7 = *a2;
    *(_OWORD *)(v7 + 8) = *a3;
    long long v8 = a3[1];
    long long v9 = a3[2];
    long long v10 = a3[3];
    *(_OWORD *)(v7 + 72) = a3[4];
    *(_OWORD *)(v7 + 56) = v10;
    *(_OWORD *)(v7 + 40) = v9;
    *(_OWORD *)(v7 + 24) = v8;
    long long v11 = a3[5];
    long long v12 = a3[6];
    long long v13 = a3[7];
    *((void *)v7 + 17) = *((void *)a3 + 16);
    *(_OWORD *)(v7 + 120) = v13;
    *(_OWORD *)(v7 + 104) = v12;
    *(_OWORD *)(v7 + 88) = v11;
    uint64_t v14 = v7 + 144;
  }
  a1[1] = v14;
  return v14 - 144;
}

void sub_1012BE0(uint64_t a1, unsigned int a2, _OWORD *a3)
{
  unint64_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v7 = a1 + 24;
  uint64_t v10 = v9 - v8;
  unint64_t v11 = (v9 - v8) >> 2;
  if (v11 <= a2)
  {
    do
    {
      unint64_t v15 = (v10 >> 1) | 1;
      if (v15 <= v11)
      {
        if (v15 >= v11)
        {
          uint64_t v10 = v9 - v8;
          unint64_t v16 = (v9 - v8) >> 2;
          if (v11 < v16) {
LABEL_12:
          }
            memset((void *)(v8 + 4 * v11), 255, v10 - 4 * v11);
        }
        else
        {
          uint64_t v9 = v8 + 4 * v15;
          *(void *)(a1 + 32) = v9;
          uint64_t v10 = 4 * v15;
          unint64_t v16 = (uint64_t)(4 * v15) >> 2;
          if (v11 < v16) {
            goto LABEL_12;
          }
        }
      }
      else
      {
        sub_4394C(v7, v15 - v11);
        uint64_t v8 = *(void *)(a1 + 24);
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = v9 - v8;
        unint64_t v16 = (v9 - v8) >> 2;
        if (v11 < v16) {
          goto LABEL_12;
        }
      }
      unint64_t v11 = v16;
    }
    while (v16 <= v6);
  }
  *(_OWORD *)&v45[4] = *a3;
  long long v13 = *(unsigned int **)(a1 + 8);
  unint64_t v12 = *(void *)(a1 + 16);
  if ((unint64_t)v13 >= v12)
  {
    unint64_t v17 = *(unsigned int **)a1;
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - *(void *)a1) >> 3);
    unint64_t v19 = v18 + 1;
    if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v17) >> 3);
    if (2 * v20 > v19) {
      unint64_t v19 = 2 * v20;
    }
    if (v20 >= 0x555555555555555) {
      unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      if (v21 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      long long v22 = (char *)operator new(24 * v21);
    }
    else
    {
      long long v22 = 0;
    }
    long long v23 = &v22[24 * v18];
    *(_DWORD *)long long v23 = a2;
    *(_OWORD *)(v23 + 4) = *(_OWORD *)v45;
    *((_DWORD *)v23 + 5) = *(_DWORD *)&v45[16];
    uint64_t v14 = v23 + 24;
    if (v13 != v17)
    {
      do
      {
        long long v24 = *(_OWORD *)(v13 - 6);
        *((void *)v23 - 1) = *((void *)v13 - 1);
        *(_OWORD *)(v23 - 24) = v24;
        v23 -= 24;
        v13 -= 6;
      }
      while (v13 != v17);
      long long v13 = *(unsigned int **)a1;
    }
    *(void *)a1 = v23;
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = &v22[24 * v21];
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *long long v13 = a2;
    *(_OWORD *)(v13 + 1) = *(_OWORD *)v45;
    v13[5] = *(_DWORD *)&v45[16];
    uint64_t v14 = v13 + 6;
  }
  *(void *)(a1 + 8) = v14;
  *(_DWORD *)(*(void *)(a1 + 24) + 4 * v6) = *(_DWORD *)(a1 + 48);
  unsigned int v25 = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = v25 + 1;
  if (v25)
  {
    long long v26 = *(unsigned int **)a1;
    do
    {
      unsigned int v33 = v25 - 1;
      unsigned int v34 = v25;
      uint64_t v35 = &v26[6 * v25];
      unsigned int v25 = (v25 - 1) >> 2;
      uint64_t v36 = &v26[6 * v25];
      unsigned int v38 = v36[2];
      char v37 = (long long *)(v36 + 2);
      uint64_t v40 = (long long *)(v35 + 2);
      unsigned int v39 = v35[2];
      BOOL v41 = v38 >= v39;
      if (v38 == v39)
      {
        int v42 = v26[6 * v25 + 3];
        int v43 = v26[6 * v34 + 3];
        BOOL v44 = v42 < v43;
        if (v42 == v43) {
          BOOL v44 = *(void *)&v26[6 * v25 + 4] < *(void *)&v26[6 * v34 + 4];
        }
        if (v44) {
          return;
        }
      }
      else if (!v41)
      {
        return;
      }
      unsigned int v27 = *v35;
      *uint64_t v35 = *v36;
      *uint64_t v36 = v27;
      long long v28 = *v40;
      *uint64_t v40 = *v37;
      *char v37 = v28;
      long long v26 = *(unsigned int **)a1;
      uint64_t v29 = *(void *)(a1 + 24);
      uint64_t v30 = 4 * *(unsigned int *)(*(void *)a1 + 24 * v34);
      uint64_t v31 = 4 * *(unsigned int *)(*(void *)a1 + 24 * v25);
      int v32 = *(_DWORD *)(v29 + v30);
      *(_DWORD *)(v29 + v30) = *(_DWORD *)(v29 + v31);
      *(_DWORD *)(v29 + v31) = v32;
    }
    while (v33 > 3);
  }
}

__n128 sub_1012EFC(uint64_t *a1, unsigned int a2, __n128 *a3)
{
  unsigned int v3 = *(_DWORD *)(a1[3] + 4 * a2);
  uint64_t v4 = *a1 + 24 * v3;
  unsigned __int32 v6 = *(_DWORD *)(v4 + 8);
  signed __int32 v5 = *(_DWORD *)(v4 + 12);
  int64_t v7 = *(void *)(v4 + 16);
  __n128 result = *a3;
  *(__n128 *)(v4 + 8) = *a3;
  if (a3->n128_u32[0] == v6)
  {
    signed __int32 v9 = a3->n128_i32[1];
    if (v9 == v5)
    {
      if ((int64_t)a3->n128_u64[1] >= v7) {
        goto LABEL_18;
      }
      goto LABEL_6;
    }
    if (v9 >= v5)
    {
LABEL_18:
      unsigned int v28 = (4 * v3) | 1;
      unsigned int v29 = *((_DWORD *)a1 + 12);
      if (v28 >= v29) {
        return result;
      }
      int v30 = 4 * v3;
      while (1)
      {
        unsigned int v31 = v30 + 5;
        if (v31 >= v29) {
          unsigned int v32 = v29;
        }
        else {
          unsigned int v32 = v31;
        }
        if (v28 >= v32) {
          return result;
        }
        uint64_t v33 = *a1;
        uint64_t v34 = *a1 + 24 * v3;
        unsigned int v37 = *(_DWORD *)(v34 + 8);
        uint64_t v35 = *(unsigned int *)(v34 + 12);
        uint64_t v36 = v34 + 8;
        uint64_t v38 = v3;
        uint64_t v39 = *(void *)(v36 + 8);
        uint64_t v40 = (void *)(*a1 + 24 * v28 + 16);
        unsigned int v3 = -1;
        do
        {
          unsigned int v41 = *((_DWORD *)v40 - 2);
          if (v41 == v37)
          {
            uint64_t v42 = *((unsigned int *)v40 - 1);
            if (v42 == v35)
            {
              uint64_t v42 = v35;
              if (*v40 < v39) {
                goto LABEL_25;
              }
            }
            else if ((int)v42 < (int)v35)
            {
              goto LABEL_25;
            }
          }
          else if (v41 < v37)
          {
            uint64_t v42 = *((unsigned int *)v40 - 1);
LABEL_25:
            uint64_t v39 = *v40;
            uint64_t v35 = v42;
            unsigned int v37 = *((_DWORD *)v40 - 2);
            unsigned int v3 = v28;
          }
          ++v28;
          v40 += 3;
        }
        while (v32 != v28);
        if (v3 < v29)
        {
          int v43 = (int *)(v33 + 24 * v3);
          int v44 = *v43;
          int *v43 = *(_DWORD *)(v33 + 24 * v38);
          *(_DWORD *)(v33 + 24 * v38) = v44;
          __n128 result = *(__n128 *)(v43 + 2);
          *(_OWORD *)(v43 + 2) = *(_OWORD *)v36;
          *(__n128 *)uint64_t v36 = result;
          uint64_t v45 = a1[3];
          uint64_t v46 = 4 * *(unsigned int *)(*a1 + 24 * v3);
          uint64_t v47 = 4 * *(unsigned int *)(*a1 + 24 * v38);
          int v48 = *(_DWORD *)(v45 + v46);
          *(_DWORD *)(v45 + v46) = *(_DWORD *)(v45 + v47);
          *(_DWORD *)(v45 + v47) = v48;
          int v30 = 4 * v3;
          unsigned int v28 = (4 * v3) | 1;
          unsigned int v29 = *((_DWORD *)a1 + 12);
          if (v28 < v29) {
            continue;
          }
        }
        return result;
      }
    }
  }
  else if (a3->n128_u32[0] >= v6)
  {
    goto LABEL_18;
  }
LABEL_6:
  if (!v3) {
    return result;
  }
  uint64_t v10 = *a1;
  while (1)
  {
    unsigned int v16 = v3 - 1;
    unsigned int v17 = v3;
    unint64_t v18 = (_DWORD *)(v10 + 24 * v3);
    unsigned int v3 = (v3 - 1) >> 2;
    unint64_t v19 = (_DWORD *)(v10 + 24 * v3);
    unsigned int v21 = v19[2];
    unint64_t v20 = (__n128 *)(v19 + 2);
    long long v23 = (__n128 *)(v18 + 2);
    unsigned int v22 = v18[2];
    BOOL v24 = v21 >= v22;
    if (v21 == v22) {
      break;
    }
    if (!v24) {
      return result;
    }
LABEL_10:
    int v11 = *v18;
    *unint64_t v18 = *v19;
    _DWORD *v19 = v11;
    __n128 result = *v23;
    __n128 *v23 = *v20;
    __n128 *v20 = result;
    uint64_t v10 = *a1;
    uint64_t v12 = a1[3];
    uint64_t v13 = 4 * *(unsigned int *)(*a1 + 24 * v17);
    uint64_t v14 = 4 * *(unsigned int *)(*a1 + 24 * v3);
    int v15 = *(_DWORD *)(v12 + v13);
    *(_DWORD *)(v12 + v13) = *(_DWORD *)(v12 + v14);
    *(_DWORD *)(v12 + v14) = v15;
    if (v16 < 4) {
      return result;
    }
  }
  int v25 = *(_DWORD *)(v10 + 24 * v3 + 12);
  int v26 = *(_DWORD *)(v10 + 24 * v17 + 12);
  BOOL v27 = v25 < v26;
  if (v25 == v26) {
    BOOL v27 = *(void *)(v10 + 24 * v3 + 16) < *(void *)(v10 + 24 * v17 + 16);
  }
  if (!v27) {
    goto LABEL_10;
  }
  return result;
}

unsigned int **sub_1013154(unsigned int **result)
{
  uint64_t v1 = (uint64_t)*result;
  result[3][**result] = -1;
  int v2 = *((_DWORD *)result + 12);
  *((_DWORD *)result + 12) = v2 - 1;
  if (v2 != 1)
  {
    uint64_t v3 = v1 + 24 * (v2 - 1);
    *(_DWORD *)uint64_t v1 = *(_DWORD *)v3;
    *(_OWORD *)(v1 + 8) = *(_OWORD *)(v3 + 8);
    uint64_t v4 = (uint64_t)*result;
    result[3][**result] = 0;
    unsigned int v5 = *((_DWORD *)result + 12);
    if (v5 >= 2)
    {
      int v6 = 0;
      unsigned int v7 = 0;
      unsigned int v8 = 1;
      while (1)
      {
        unsigned int v9 = v6 + 5;
        if (v9 >= v5) {
          unsigned int v10 = v5;
        }
        else {
          unsigned int v10 = v9;
        }
        if (v8 >= v10) {
          break;
        }
        uint64_t v11 = v4 + 24 * v7;
        unsigned int v14 = *(_DWORD *)(v11 + 8);
        uint64_t v12 = *(unsigned int *)(v11 + 12);
        uint64_t v13 = v11 + 8;
        uint64_t v15 = v7;
        uint64_t v16 = *(void *)(v13 + 8);
        unsigned int v17 = (void *)(v4 + 24 * v8 + 16);
        unsigned int v7 = -1;
        do
        {
          unsigned int v18 = *((_DWORD *)v17 - 2);
          if (v18 == v14)
          {
            uint64_t v19 = *((unsigned int *)v17 - 1);
            if (v19 == v12)
            {
              uint64_t v19 = v12;
              if (*v17 < v16) {
                goto LABEL_9;
              }
            }
            else if ((int)v19 < (int)v12)
            {
              goto LABEL_9;
            }
          }
          else if (v18 < v14)
          {
            uint64_t v19 = *((unsigned int *)v17 - 1);
LABEL_9:
            uint64_t v16 = *v17;
            uint64_t v12 = v19;
            unsigned int v14 = *((_DWORD *)v17 - 2);
            unsigned int v7 = v8;
          }
          ++v8;
          v17 += 3;
        }
        while (v10 != v8);
        if (v7 < v5)
        {
          unint64_t v20 = (int *)(v4 + 24 * v7);
          int v21 = *v20;
          int *v20 = *(_DWORD *)(v4 + 24 * v15);
          *(_DWORD *)(v4 + 24 * v15) = v21;
          long long v22 = *(_OWORD *)(v20 + 2);
          *(_OWORD *)(v20 + 2) = *(_OWORD *)v13;
          *(_OWORD *)uint64_t v13 = v22;
          uint64_t v4 = (uint64_t)*result;
          long long v23 = result[3];
          uint64_t v24 = (*result)[6 * v7];
          uint64_t v25 = (*result)[6 * v15];
          unsigned int v26 = v23[v24];
          v23[v24] = v23[v25];
          v23[v25] = v26;
          int v6 = 4 * v7;
          unsigned int v8 = (4 * v7) | 1;
          unsigned int v5 = *((_DWORD *)result + 12);
          if (v8 < v5) {
            continue;
          }
        }
        break;
      }
    }
  }
  result[1] -= 6;
  return result;
}

char ***sub_10132DC(char ***a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  int v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v12 = *v4;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *v4) >> 5);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0x2AAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)v12) >> 5);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x155555555555555) {
      unint64_t v16 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 > 0x2AAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      unsigned int v17 = (char *)operator new(96 * v16);
    }
    else
    {
      unsigned int v17 = 0;
    }
    long long v18 = a2[3];
    uint64_t v19 = &v17[96 * v13];
    *((_OWORD *)v19 + 2) = a2[2];
    *((_OWORD *)v19 + 3) = v18;
    long long v20 = a2[5];
    *((_OWORD *)v19 + 4) = a2[4];
    *((_OWORD *)v19 + 5) = v20;
    long long v21 = a2[1];
    *(_OWORD *)uint64_t v19 = *a2;
    *((_OWORD *)v19 + 1) = v21;
    uint64_t v11 = v19 + 96;
    if (v6 != v12)
    {
      do
      {
        long long v22 = *((_OWORD *)v6 - 5);
        *((_OWORD *)v19 - 6) = *((_OWORD *)v6 - 6);
        *((_OWORD *)v19 - 5) = v22;
        long long v23 = *((_OWORD *)v6 - 4);
        long long v24 = *((_OWORD *)v6 - 3);
        long long v25 = *((_OWORD *)v6 - 2);
        *(_OWORD *)(v19 - 20) = *(_OWORD *)(v6 - 20);
        *((_OWORD *)v19 - 3) = v24;
        *((_OWORD *)v19 - 2) = v25;
        *((_OWORD *)v19 - 4) = v23;
        v19 -= 96;
        v6 -= 96;
      }
      while (v6 != v12);
      int v6 = *v4;
    }
    *uint64_t v4 = v19;
    v4[1] = v11;
    v4[2] = &v17[96 * v16];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    long long v7 = a2[1];
    *(_OWORD *)int v6 = *a2;
    *((_OWORD *)v6 + 1) = v7;
    long long v8 = a2[2];
    long long v9 = a2[3];
    long long v10 = a2[5];
    *((_OWORD *)v6 + 4) = a2[4];
    *((_OWORD *)v6 + 5) = v10;
    *((_OWORD *)v6 + 2) = v8;
    *((_OWORD *)v6 + 3) = v9;
    uint64_t v11 = v6 + 96;
  }
  v4[1] = v11;
  return a1;
}

void sub_101344C()
{
  unk_25FD4BF = 16641;
  word_25FD4A8 = 65;
  byte_25FD4D7 = 1;
  byte_25FD4C1 = 0;
}

uint64_t sub_1013474@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v28 = a7;
  uint64_t v29 = a7;
  uint64_t v27 = sub_EE02F4(a6, *(_DWORD *)(a1 + 60));
  if (a2)
  {
    unint64_t v16 = (uint64_t *)sub_100596C(a7);
    uint64_t v32 = v27;
    char v31 = 0;
    v30[0] = &v31;
    v30[1] = &v32;
    v30[2] = a3;
    unsigned int v17 = (unsigned int *)sub_1013C20(v16, (uint64_t)v30);
    if ((unsigned int *)v16[1] == v17 || (unsigned int v18 = *v17, *v17 == -1))
    {
      uint64_t v19 = (void *)sub_BED898(a7);
      unsigned int v18 = sub_10136D4(v19, v27, a3, 0);
    }
  }
  else
  {
    unsigned int v18 = sub_1003358(a7, &v27);
    if (v18 == -1) {
      goto LABEL_24;
    }
  }
  long long v20 = (void *)sub_1005964(a7);
  sub_1007480((uint64_t)v20, v18);
  uint64_t v21 = *(unsigned int *)(v20[12] + 4 * v18);
  sub_1007480((uint64_t)v20, v18);
  if (!*(void *)(a1 + 72))
  {
    v26[0] = &v29;
    v26[1] = a5;
    v26[2] = &v28;
    if (v21 != 0xFFFFFFFFLL)
    {
      while (!sub_1013F7C((uint64_t)v26, (unsigned int *)(v20[15] + 152 * v21)))
      {
        uint64_t v21 = *(unsigned int *)(v20[18] + 4 * v21);
        if (v21 == -1) {
          goto LABEL_24;
        }
      }
      if (a4)
      {
        uint64_t result = sub_1005964(a7);
        uint64_t v22 = v20[15] + 152 * v21;
        goto LABEL_25;
      }
    }
LABEL_24:
    uint64_t result = sub_1005964(a7);
    uint64_t v22 = 0;
    goto LABEL_25;
  }
  if (a4)
  {
    v25[0] = a1;
    v25[1] = a6;
    v25[2] = &v29;
    v25[3] = a5;
    v25[4] = &v28;
    if (v21 != 0xFFFFFFFFLL)
    {
      while (!sub_10144AC(v25, (unsigned int *)(v20[15] + 152 * v21)))
      {
        uint64_t v21 = *(unsigned int *)(v20[18] + 4 * v21);
        if (v21 == -1) {
          goto LABEL_19;
        }
      }
LABEL_20:
      uint64_t v22 = v20[15] + 152 * v21;
      goto LABEL_21;
    }
  }
  else
  {
    v24[0] = a1;
    v24[1] = a6;
    v24[2] = &v29;
    if (v21 != 0xFFFFFFFFLL)
    {
      while (!sub_1014768(v24, (unsigned int *)(v20[15] + 152 * v21)))
      {
        uint64_t v21 = *(unsigned int *)(v20[18] + 4 * v21);
        if (v21 == -1) {
          goto LABEL_19;
        }
      }
      goto LABEL_20;
    }
  }
LABEL_19:
  uint64_t v22 = 0;
LABEL_21:
  uint64_t result = sub_1005964(a7);
LABEL_25:
  *(void *)a8 = result;
  *(_DWORD *)(a8 + 8) = v18;
  *(void *)(a8 + 16) = v22;
  *(unsigned char *)(a8 + 24) = 0;
  return result;
}

uint64_t sub_10136D4(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v14 = a2;
  char v13 = a4;
  uint64_t v6 = a1[49];
  uint64_t v7 = a1[27];
  uint64_t v8 = v6 + 168 * v7;
  uint64_t v19 = a1;
  uint64_t v20 = v6;
  uint64_t v21 = v8;
  if (v7)
  {
    uint64_t v9 = 168 * v7;
    while (sub_1024810((uint64_t)(a1 + 28), v6) || a1[25] && sub_1024810((uint64_t)(a1 + 4), v6))
    {
      v6 += 168;
      v9 -= 168;
      if (!v9)
      {
        uint64_t v6 = v8;
        break;
      }
    }
    uint64_t v20 = v6;
    uint64_t v6 = a1[49];
    uint64_t v7 = a1[27];
  }
  unint64_t v16 = a1;
  uint64_t v17 = v6 + 168 * v7;
  uint64_t v18 = v17;
  v15[0] = &v13;
  v15[1] = &v14;
  v15[2] = a3;
  sub_1013D78(&v19, (uint64_t)&v16, (uint64_t)v15, (uint64_t)&v11);
  if (v12 == (unsigned int *)(a1[49] + 168 * a1[27])) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *v12;
  }
}

uint64_t sub_10137F0@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v28 = a7;
  uint64_t v29 = a7;
  uint64_t v27 = sub_EDBFB0(a6, *(_DWORD *)(a1 + 60));
  if (a2)
  {
    unint64_t v16 = (uint64_t *)sub_100596C(a7);
    uint64_t v32 = v27;
    char v31 = 0;
    v30[0] = &v31;
    v30[1] = &v32;
    v30[2] = a3;
    uint64_t v17 = (unsigned int *)sub_1013C20(v16, (uint64_t)v30);
    if ((unsigned int *)v16[1] == v17 || (unsigned int v18 = *v17, *v17 == -1))
    {
      uint64_t v19 = (void *)sub_BED898(a7);
      unsigned int v18 = sub_10136D4(v19, v27, a3, 0);
    }
  }
  else
  {
    unsigned int v18 = sub_1003358(a7, &v27);
    if (v18 == -1) {
      goto LABEL_24;
    }
  }
  uint64_t v20 = (void *)sub_1005964(a7);
  sub_1007480((uint64_t)v20, v18);
  uint64_t v21 = *(unsigned int *)(v20[12] + 4 * v18);
  sub_1007480((uint64_t)v20, v18);
  if (!*(void *)(a1 + 72))
  {
    v26[0] = &v29;
    v26[1] = a5;
    v26[2] = &v28;
    if (v21 != 0xFFFFFFFFLL)
    {
      while (!sub_1013F7C((uint64_t)v26, (unsigned int *)(v20[15] + 152 * v21)))
      {
        uint64_t v21 = *(unsigned int *)(v20[18] + 4 * v21);
        if (v21 == -1) {
          goto LABEL_24;
        }
      }
      if (a4)
      {
        uint64_t result = sub_1005964(a7);
        uint64_t v22 = v20[15] + 152 * v21;
        goto LABEL_25;
      }
    }
LABEL_24:
    uint64_t result = sub_1005964(a7);
    uint64_t v22 = 0;
    goto LABEL_25;
  }
  if (a4)
  {
    v25[0] = a1;
    v25[1] = a6;
    v25[2] = &v29;
    v25[3] = a5;
    v25[4] = &v28;
    if (v21 != 0xFFFFFFFFLL)
    {
      while (!sub_10144AC(v25, (unsigned int *)(v20[15] + 152 * v21)))
      {
        uint64_t v21 = *(unsigned int *)(v20[18] + 4 * v21);
        if (v21 == -1) {
          goto LABEL_19;
        }
      }
LABEL_20:
      uint64_t v22 = v20[15] + 152 * v21;
      goto LABEL_21;
    }
  }
  else
  {
    v24[0] = a1;
    v24[1] = a6;
    v24[2] = &v29;
    if (v21 != 0xFFFFFFFFLL)
    {
      while (!sub_1014768(v24, (unsigned int *)(v20[15] + 152 * v21)))
      {
        uint64_t v21 = *(unsigned int *)(v20[18] + 4 * v21);
        if (v21 == -1) {
          goto LABEL_19;
        }
      }
      goto LABEL_20;
    }
  }
LABEL_19:
  uint64_t v22 = 0;
LABEL_21:
  uint64_t result = sub_1005964(a7);
LABEL_25:
  *(void *)a8 = result;
  *(_DWORD *)(a8 + 8) = v18;
  *(void *)(a8 + 16) = v22;
  *(unsigned char *)(a8 + 24) = 0;
  return result;
}

uint64_t sub_1013A50@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v15 = sub_EE02F4(a4, *(_DWORD *)(a1 + 64));
  if (a2)
  {
    long long v10 = (uint64_t *)sub_1005974(a5);
    uint64_t v18 = v15;
    char v17 = 1;
    v16[0] = &v17;
    v16[1] = &v18;
    v16[2] = a3;
    uint64_t v11 = (int *)sub_1013C20(v10, (uint64_t)v16);
    if ((int *)v10[1] == v11 || (int v12 = *v11, *v11 == -1))
    {
      char v13 = (void *)sub_BED898(a5);
      int v12 = sub_10136D4(v13, v15, a3, 1);
    }
  }
  else
  {
    int v12 = sub_1003358(a5, &v15);
  }
  uint64_t result = sub_1005964(a5);
  *(void *)a6 = result;
  *(_DWORD *)(a6 + 8) = v12;
  *(void *)(a6 + 16) = 0;
  *(unsigned char *)(a6 + 24) = 0;
  return result;
}

uint64_t sub_1013B38@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v15 = sub_EDBFB0(a4, *(_DWORD *)(a1 + 64));
  if (a2)
  {
    long long v10 = (uint64_t *)sub_1005974(a5);
    uint64_t v18 = v15;
    char v17 = 1;
    v16[0] = &v17;
    v16[1] = &v18;
    v16[2] = a3;
    uint64_t v11 = (int *)sub_1013C20(v10, (uint64_t)v16);
    if ((int *)v10[1] == v11 || (int v12 = *v11, *v11 == -1))
    {
      char v13 = (void *)sub_BED898(a5);
      int v12 = sub_10136D4(v13, v15, a3, 1);
    }
  }
  else
  {
    int v12 = sub_1003358(a5, &v15);
  }
  uint64_t result = sub_1005964(a5);
  *(void *)a6 = result;
  *(_DWORD *)(a6 + 8) = v12;
  *(void *)(a6 + 16) = 0;
  *(unsigned char *)(a6 + 24) = 0;
  return result;
}

uint64_t sub_1013C20(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t result = a1[1];
  if (v3 == result) {
    return v3;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  for (uint64_t i = v3 + 96; ; i += 168)
  {
    uint64_t v7 = (uint64_t *)(i - 88);
    if (!**(unsigned char **)a2) {
      uint64_t v7 = (uint64_t *)(i - 8);
    }
    uint64_t v8 = *v7;
    uint64_t v9 = **(unsigned char **)a2 ? i - 80 : i;
    if (v8 == **(void **)(a2 + 8) && *(_DWORD *)v9 == *(_DWORD *)v4 && *(void *)(v9 + 8) == *(void *)(v4 + 8))
    {
      double v10 = *(double *)(v9 + 16);
      double v11 = *(double *)(v4 + 16);
      double v12 = vabdd_f64(v10, v11);
      BOOL v13 = v10 == v11 || v12 < 2.22044605e-16;
      if (v13
        && *(unsigned __int8 *)(v9 + 24) == *(unsigned __int8 *)(v4 + 24)
        && *(double *)(v9 + 32) == *(double *)(v4 + 32)
        && *(unsigned __int8 *)(v9 + 40) == *(unsigned __int8 *)(v4 + 40)
        && *(_DWORD *)(v9 + 48) == *(_DWORD *)(v4 + 48)
        && *(_DWORD *)(v9 + 52) == *(_DWORD *)(v4 + 52)
        && *(void *)(v9 + 56) == *(void *)(v4 + 56)
        && *(unsigned __int8 *)(v9 + 64) == *(unsigned __int8 *)(v4 + 64)
        && *(unsigned __int16 *)(v9 + 66) == *(unsigned __int16 *)(v4 + 66)
        && *(unsigned __int8 *)(v9 + 68) == *(unsigned __int8 *)(v4 + 68)
        && *(unsigned __int8 *)(v9 + 69) == *(unsigned __int8 *)(v4 + 69)
        && *(unsigned __int8 *)(v9 + 70) == *(unsigned __int8 *)(v4 + 70))
      {
        break;
      }
    }
    uint64_t v6 = i + 72;
    if (v6 == result) {
      return result;
    }
  }
  return i - 96;
}

__n128 sub_1013D78@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1[1];
  while (v7 != *(void *)(a2 + 8))
  {
    if (**(unsigned char **)a3) {
      uint64_t v9 = (uint64_t *)(v7 + 8);
    }
    else {
      uint64_t v9 = (uint64_t *)(v7 + 88);
    }
    uint64_t v10 = *v9;
    uint64_t v11 = v7 + 16;
    if (**(unsigned char **)a3) {
      uint64_t v12 = 16;
    }
    else {
      uint64_t v12 = 96;
    }
    if (!**(unsigned char **)a3) {
      uint64_t v11 = v7 + 96;
    }
    if (v10 == **(void **)(a3 + 8))
    {
      int v13 = *(_DWORD *)(v7 + v12);
      uint64_t v14 = *(void *)(a3 + 16);
      if (v13 == *(_DWORD *)v14 && *(void *)(v11 + 8) == *(void *)(v14 + 8))
      {
        double v15 = *(double *)(v11 + 16);
        double v16 = *(double *)(v14 + 16);
        double v17 = vabdd_f64(v15, v16);
        BOOL v18 = v15 == v16 || v17 < 2.22044605e-16;
        if (v18
          && *(unsigned __int8 *)(v11 + 24) == *(unsigned __int8 *)(v14 + 24)
          && *(double *)(v11 + 32) == *(double *)(v14 + 32)
          && *(unsigned __int8 *)(v11 + 40) == *(unsigned __int8 *)(v14 + 40)
          && *(_DWORD *)(v11 + 48) == *(_DWORD *)(v14 + 48)
          && *(_DWORD *)(v11 + 52) == *(_DWORD *)(v14 + 52)
          && *(void *)(v11 + 56) == *(void *)(v14 + 56)
          && *(unsigned __int8 *)(v11 + 64) == *(unsigned __int8 *)(v14 + 64)
          && *(unsigned __int16 *)(v11 + 66) == *(unsigned __int16 *)(v14 + 66)
          && *(unsigned __int8 *)(v11 + 68) == *(unsigned __int8 *)(v14 + 68)
          && *(unsigned __int8 *)(v11 + 69) == *(unsigned __int8 *)(v14 + 69)
          && *(unsigned __int8 *)(v11 + 70) == *(unsigned __int8 *)(v14 + 70))
        {
          break;
        }
      }
    }
    v7 += 168;
    a1[1] = v7;
    if (v7 != a1[2])
    {
      while (1)
      {
        if (!sub_1024810(*a1 + 224, v7))
        {
          uint64_t v7 = a1[1];
          if (!*(void *)(*a1 + 200)) {
            goto LABEL_3;
          }
          if (!sub_1024810(*a1 + 32, v7)) {
            break;
          }
        }
        uint64_t v19 = a1[2];
        uint64_t v7 = a1[1] + 168;
        a1[1] = v7;
        if (v7 == v19) {
          goto LABEL_3;
        }
      }
      uint64_t v7 = a1[1];
    }
LABEL_3:
    ;
  }
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(void *)(a4 + 16) = a1[2];
  return result;
}

BOOL sub_1013F7C(uint64_t a1, unsigned int *a2)
{
  if (sub_10022FC((uint64_t)a2)) {
    return 0;
  }
  uint64_t v4 = *(uint64_t **)a1;
  int v29 = sub_4F44(a2);
  v16[0] = &v29;
  unint64_t v5 = (void *)sub_BED898(*v4);
  if (!sub_1014354(v5, v16))
  {
    uint64_t v13 = sub_1005974(*v4);
    uint64_t v14 = *(_DWORD **)v13;
    double v15 = *(_DWORD **)(v13 + 8);
    if (*(_DWORD **)v13 == v15) {
      return 0;
    }
    while (*v14 != *v16[0])
    {
      v14 += 42;
      if (v14 == v15) {
        return 0;
      }
    }
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(uint64_t **)(a1 + 16);
  int v8 = sub_4F44(a2);
  sub_1014140(v6, v8, (uint64_t)v16);
  if (*(_DWORD *)v7 == LODWORD(v16[0]) && *(_DWORD **)(v7 + 8) == v16[1])
  {
    double v9 = *(double *)(v7 + 16);
    double v10 = vabdd_f64(v9, v17);
    BOOL v11 = v9 == v17 || v10 < 2.22044605e-16;
    if (v11
      && *(unsigned __int8 *)(v7 + 24) == v18
      && *(double *)(v7 + 32) == v19
      && *(unsigned __int8 *)(v7 + 40) == v20
      && *(_DWORD *)(v7 + 48) == v21
      && *(_DWORD *)(v7 + 52) == v22
      && *(void *)(v7 + 56) == v23
      && *(unsigned __int8 *)(v7 + 64) == v24
      && *(unsigned __int16 *)(v7 + 66) == v25
      && *(unsigned __int8 *)(v7 + 68) == v26
      && *(unsigned __int8 *)(v7 + 69) == v27)
    {
      return *(unsigned __int8 *)(v7 + 70) == v28;
    }
  }
  return 0;
}

void *sub_1014140@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (void *)sub_BED898(*a1);
  uint64_t v7 = v6[49];
  uint64_t v8 = v6[27];
  uint64_t v9 = v7 + 168 * v8;
  if (v8)
  {
    uint64_t v10 = 168 * v8;
    while (sub_1024810((uint64_t)(v6 + 28), v7) || v6[25] && sub_1024810((uint64_t)(v6 + 4), v7))
    {
      v7 += 168;
      v10 -= 168;
      if (!v10)
      {
        uint64_t v7 = v9;
        break;
      }
    }
  }
  uint64_t v11 = sub_BED898(*a1);
  uint64_t v12 = *(void *)(v11 + 392) + 168 * *(void *)(v11 + 216);
  if (v7 != v12)
  {
    while (*(_DWORD *)v7 != a2)
    {
      uint64_t v13 = v7 + 168;
      uint64_t v7 = v9;
      if (v13 != v9)
      {
        uint64_t v7 = v13;
        while (sub_1024810((uint64_t)(v6 + 28), v7) || v6[25] && sub_1024810((uint64_t)(v6 + 4), v7))
        {
          v7 += 168;
          if (v7 == v9)
          {
            uint64_t v7 = v9;
            break;
          }
        }
      }
      if (v7 == v12)
      {
        uint64_t v7 = v12;
        break;
      }
    }
  }
  __n128 result = (void *)sub_BED898(*a1);
  if (v7 != result[49] + 168 * result[27]) {
    goto LABEL_28;
  }
  uint64_t v7 = *(void *)sub_1005974(*a1);
  uint64_t v15 = sub_1005974(*a1);
  uint64_t v16 = *(void *)(v15 + 8);
  if (v7 != v16)
  {
    while (*(_DWORD *)v7 != a2)
    {
      v7 += 168;
      if (v7 == v16)
      {
        uint64_t v7 = *(void *)(v15 + 8);
        break;
      }
    }
  }
  __n128 result = (void *)sub_1005974(*a1);
  if (v7 == result[1])
  {
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0x3FF0000000000000;
    *(unsigned char *)(a3 + 40) = 1;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    *(unsigned char *)(a3 + 64) = 0;
    *(_DWORD *)(a3 + 66) = 36000;
    *(unsigned char *)(a3 + 70) = 0;
  }
  else
  {
LABEL_28:
    *(_OWORD *)a3 = *(_OWORD *)(v7 + 16);
    long long v17 = *(_OWORD *)(v7 + 32);
    long long v18 = *(_OWORD *)(v7 + 48);
    long long v19 = *(_OWORD *)(v7 + 64);
    *(void *)(a3 + 64) = *(void *)(v7 + 80);
    *(_OWORD *)(a3 + 32) = v18;
    *(_OWORD *)(a3 + 48) = v19;
    *(_OWORD *)(a3 + 16) = v17;
  }
  return result;
}

BOOL sub_1014354(void *a1, _DWORD **a2)
{
  uint64_t v4 = a1[49];
  uint64_t v5 = a1[27];
  uint64_t v6 = (_DWORD *)(v4 + 168 * v5);
  if (!v5) {
    return 0;
  }
  uint64_t v7 = 168 * v5;
  while (sub_1024810((uint64_t)(a1 + 28), v4) || a1[25] && sub_1024810((uint64_t)(a1 + 4), v4))
  {
    v4 += 168;
    v7 -= 168;
    if (!v7)
    {
      uint64_t v4 = (uint64_t)v6;
      break;
    }
  }
  uint64_t v8 = (_DWORD *)v4;
  uint64_t v9 = a1[49] + 168 * a1[27];
  if (v4 == v9) {
    return 0;
  }
  uint64_t v10 = *a2;
  while (1)
  {
    BOOL result = *v8 == *v10;
    if (*v8 == *v10) {
      return result;
    }
    uint64_t v12 = v8 + 42;
    uint64_t v8 = v6;
    if (v12 != v6)
    {
      uint64_t v8 = v12;
      while (sub_1024810((uint64_t)(a1 + 28), (uint64_t)v8) || a1[25] && sub_1024810((uint64_t)(a1 + 4), (uint64_t)v8))
      {
        v8 += 42;
        if (v8 == v6)
        {
          uint64_t v8 = v6;
          break;
        }
      }
    }
    if (v8 == (_DWORD *)v9) {
      return 0;
    }
  }
}

BOOL sub_10144AC(void *a1, unsigned int *a2)
{
  BOOL result = sub_10022FC((uint64_t)a2);
  if (result)
  {
    uint64_t v5 = sub_100231C((uint64_t)a2);
    uint64_t v6 = *(void *)(*a1 + 72);
    unint64_t v7 = *(void *)(v6 + 40);
    if (*(_DWORD *)(v5 + 32) == v7)
    {
      if (*(unsigned __int16 *)(v5 + 36) != WORD2(v7)) {
        return 0;
      }
      if ((HIWORD(v7) & 1) == (*(unsigned char *)(v5 + 38) == 0)) {
        return 0;
      }
      unint64_t v8 = *(void *)(v6 + 80);
      if (__PAIR64__(*(unsigned __int16 *)(v5 + 76), *(_DWORD *)(v5 + 72)) != __PAIR64__(WORD2(v8), v8)
        || (HIWORD(v8) & 1) == (*(unsigned char *)(v5 + 78) == 0))
      {
        return 0;
      }
      unsigned int v9 = *(_DWORD *)(v5 + 80);
      BOOL v11 = (unsigned __int16)*(_DWORD *)(v6 + 88) == (unsigned __int16)v9;
      unsigned int v10 = (*(_DWORD *)(v6 + 88) ^ v9) >> 16;
      BOOL v11 = v11 && v10 == 0;
      if (!v11) {
        return 0;
      }
      char v12 = *(unsigned char *)(v6 + 96) ^ *(unsigned char *)(v5 + 88);
      if ((v12 & 3) != 0 || ((*(_WORD *)(v6 + 92) ^ *(_WORD *)(v5 + 84)) & 0x7FFF) != 0) {
        return 0;
      }
      int v13 = *(unsigned __int16 *)(v6 + 94);
      if ((v12 & 0x1C) != 0 || v13 != *(unsigned __int16 *)(v5 + 86)) {
        return 0;
      }
      uint64_t v15 = (uint64_t *)a1[2];
      int v39 = sub_4F44(a2);
      v26[0] = &v39;
      uint64_t v16 = (void *)sub_BED898(*v15);
      if (!sub_1014354(v16, v26))
      {
        uint64_t v23 = sub_1005974(*v15);
        unsigned __int8 v24 = *(_DWORD **)v23;
        unsigned __int16 v25 = *(_DWORD **)(v23 + 8);
        if (*(_DWORD **)v23 == v25) {
          return 0;
        }
        while (*v24 != *v26[0])
        {
          v24 += 42;
          if (v24 == v25) {
            return 0;
          }
        }
      }
      uint64_t v18 = a1[3];
      long long v17 = (uint64_t *)a1[4];
      int v19 = sub_4F44(a2);
      sub_1014140(v17, v19, (uint64_t)v26);
      if (*(_DWORD *)v18 == LODWORD(v26[0]) && *(_DWORD **)(v18 + 8) == v26[1])
      {
        double v20 = *(double *)(v18 + 16);
        double v21 = vabdd_f64(v20, v27);
        BOOL v22 = v20 == v27 || v21 < 2.22044605e-16;
        if (v22
          && *(unsigned __int8 *)(v18 + 24) == v28
          && *(double *)(v18 + 32) == v29
          && *(unsigned __int8 *)(v18 + 40) == v30
          && *(_DWORD *)(v18 + 48) == v31
          && *(_DWORD *)(v18 + 52) == v32
          && *(void *)(v18 + 56) == v33
          && *(unsigned __int8 *)(v18 + 64) == v34
          && *(unsigned __int16 *)(v18 + 66) == v35
          && *(unsigned __int8 *)(v18 + 68) == v36
          && *(unsigned __int8 *)(v18 + 69) == v37)
        {
          return *(unsigned __int8 *)(v18 + 70) == v38;
        }
      }
      return 0;
    }
    return 0;
  }
  return result;
}

BOOL sub_1014768(void *a1, unsigned int *a2)
{
  BOOL result = sub_10022FC((uint64_t)a2);
  if (result)
  {
    uint64_t v5 = sub_100231C((uint64_t)a2);
    uint64_t v6 = *(void *)(*a1 + 72);
    unint64_t v7 = *(void *)(v6 + 40);
    if (*(_DWORD *)(v5 + 32) == v7)
    {
      if (*(unsigned __int16 *)(v5 + 36) != WORD2(v7)) {
        return 0;
      }
      if ((HIWORD(v7) & 1) == (*(unsigned char *)(v5 + 38) == 0)) {
        return 0;
      }
      unint64_t v8 = *(void *)(v6 + 80);
      if (__PAIR64__(*(unsigned __int16 *)(v5 + 76), *(_DWORD *)(v5 + 72)) != __PAIR64__(WORD2(v8), v8)
        || (HIWORD(v8) & 1) == (*(unsigned char *)(v5 + 78) == 0))
      {
        return 0;
      }
      unsigned int v9 = *(_DWORD *)(v5 + 80);
      BOOL v11 = (unsigned __int16)*(_DWORD *)(v6 + 88) == (unsigned __int16)v9;
      unsigned int v10 = (*(_DWORD *)(v6 + 88) ^ v9) >> 16;
      BOOL v11 = v11 && v10 == 0;
      if (!v11) {
        return 0;
      }
      char v12 = *(unsigned char *)(v6 + 96) ^ *(unsigned char *)(v5 + 88);
      if ((v12 & 3) != 0 || ((*(_WORD *)(v6 + 92) ^ *(_WORD *)(v5 + 84)) & 0x7FFF) != 0) {
        return 0;
      }
      int v13 = *(unsigned __int16 *)(v6 + 94);
      if ((v12 & 0x1C) != 0 || v13 != *(unsigned __int16 *)(v5 + 86)) {
        return 0;
      }
      uint64_t v15 = (uint64_t *)a1[2];
      int v24 = sub_4F44(a2);
      uint64_t v23 = &v24;
      uint64_t v16 = (void *)sub_BED898(*v15);
      if (sub_1014354(v16, &v23))
      {
        return 0;
      }
      else
      {
        long long v17 = (void *)sub_1005974(*v15);
        uint64_t v18 = v17[1];
        if (*v17 == v18)
        {
          return 1;
        }
        else
        {
          int v19 = *v23;
          uint64_t v20 = *v17 + 168;
          do
          {
            int v21 = *(_DWORD *)(v20 - 168);
            BOOL result = v21 != v19;
            BOOL v22 = v21 == v19 || v20 == v18;
            v20 += 168;
          }
          while (!v22);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1014914()
{
  unk_25FD4EF = 16641;
  word_25FD4D8 = 65;
  byte_25FD507 = 1;
  byte_25FD4F1 = 0;
}

uint64_t sub_101493C(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 7;
  strcpy((char *)__p, "enabled");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  *(int64x2_t *)(a1 + 8) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 24) = 0x7FFFFFFFFFFFFFFFLL;
  *(_WORD *)(a1 + 32) = 257;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  if (!v4) {
    return a1;
  }
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "search_radius_m");
  *(void *)(a1 + 8) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "plateau_length_m");
  *(void *)(a1 + 16) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "advance_length_m");
  *(void *)(a1 + 24) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "ignore_slip_roads");
  *(unsigned char *)(a1 + 32) = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9280;
  strcpy((char *)__p[0], "ignore_internal_intersection_roads");
  *(unsigned char *)(a1 + 33) = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_plateau_capacity");
  *(double *)(a1 + 40) = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "min_before_after_capacity");
  *(double *)(a1 + 48) = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 5;
  strcpy((char *)__p, "ratio");
  *(double *)(a1 + 56) = sub_5C7E8(a2, (uint64_t)__p);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    return a1;
  }
  operator delete(__p[0]);
  return a1;
}

void sub_1014C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014C60(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "check_local_reference_detours");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "allow_dangerous_sequence_witness");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v5;
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "check_off_ramp_on_ramps");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 2) = v6;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "max_local_detour_stretch");
  double v7 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 8) = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "average_capacity_threshold");
  double v8 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 16) = v8;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9A40;
  strcpy((char *)__p[0], "min_local_detour_relative_average_capacity");
  double v9 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 24) = v9;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "capacity_drop_begin_end_threshold");
  double v10 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 32) = v10;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "max_highway_stretch");
  double v11 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 40) = v11;
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "min_highway_ratio");
  double v12 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 48) = v12;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "local_witness_max_time_s");
  *(_DWORD *)(a1 + 56) = sub_5D2EC(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_highway_length_m");
  *(void *)(a1 + 64) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1015028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL *sub_101506C(BOOL *a1, void *a2)
{
  __p[23] = 13;
  strcpy(__p, "add_all_paths");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  BOOL v5 = v4;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    *a1 = v5;
    if (v5) {
      goto LABEL_3;
    }
LABEL_5:
    *(void *)__n128 __p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_20B5EB0;
    strcpy(*(char **)__p, "max_relative_time_increase");
    double v6 = sub_5C7E8(a2, (uint64_t)__p);
    double v7 = v6;
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      BOOL v11 = *a1;
      *((double *)a1 + 1) = v7;
      if (v11) {
        goto LABEL_7;
      }
    }
    else
    {
      BOOL v8 = *a1;
      *((double *)a1 + 1) = v6;
      if (v8) {
        goto LABEL_7;
      }
    }
    *(void *)__n128 __p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_20B91B0;
    strcpy(*(char **)__p, "max_absolute_time_increase_s");
    *((_DWORD *)a1 + 4) = sub_5D2EC(a2, __p);
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      uint64_t v9 = (uint64_t)(a1 + 24);
      if (*a1) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v9 = (uint64_t)(a1 + 24);
      if (*a1) {
        goto LABEL_8;
      }
    }
    sub_1014C60(v9, a2);
    return a1;
  }
  *a1 = v4;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_3:
  *((void *)a1 + 1) = 0x3FF0000000000000;
LABEL_7:
  *((_DWORD *)a1 + 4) = 0;
  uint64_t v9 = (uint64_t)(a1 + 24);
LABEL_8:
  *(void *)(v9 + 64) = 0;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *((_WORD *)a1 + 12) = 257;
  a1[26] = 1;
  *((_OWORD *)a1 + 2) = xmmword_20F1C70;
  *((void *)a1 + 6) = 0;
  *((void *)a1 + 7) = 0;
  *((_OWORD *)a1 + 4) = xmmword_20F1C80;
  *((_DWORD *)a1 + 20) = 0x7FFFFFFF;
  *((void *)a1 + 11) = 0x7FFFFFFFFFFFFFFFLL;
  return a1;
}

void sub_1015248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101526C(uint64_t a1, void *a2)
{
  *(_DWORD *)a1 = 0;
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "check_path_set");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4) = v4;
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "conservative");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 5) = v5;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "use_reference_cost_function");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 6) = v6;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "avoid_soft_closures");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 7) = v7;
  HIBYTE(__p[2]) = 11;
  strcpy((char *)__p, "avoid_fords");
  if (sub_29D62C(a2, (uint64_t)__p)) {
    int v8 = 0x400000;
  }
  else {
    int v8 = 0;
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFBFFFFF | v8;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "avoid_ferries");
  if (sub_29D62C(a2, (uint64_t)__p)) {
    int v9 = 4;
  }
  else {
    int v9 = 0;
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFFFFFB | v9;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "avoid_highways");
  if (sub_29D62C(a2, (uint64_t)__p)) {
    int v10 = 2;
  }
  else {
    int v10 = 0;
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFFFFFD | v10;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "avoid_toll");
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFFFFFE | sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "avoid_environmental_congestion_zones");
  if (sub_29D62C(a2, (uint64_t)__p)) {
    int v11 = 0x10000;
  }
  else {
    int v11 = 0;
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFEFFFF | v11;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "avoid_toll_congestion_zone");
  if (sub_29D62C(a2, (uint64_t)__p)) {
    int v12 = 0x20000;
  }
  else {
    int v12 = 0;
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFDFFFF | v12;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "avoid_area_incidents");
  if (sub_29D62C(a2, (uint64_t)__p)) {
    int v13 = 0x200000;
  }
  else {
    int v13 = 0;
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFDFFFFF | v13;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_101569C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10156E0(uint64_t a1, void *a2)
{
  char v16 = 6;
  strcpy((char *)__p, "enable");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  BOOL v5 = v4;
  if (v16 < 0)
  {
    operator delete(__p[0]);
    *(unsigned char *)a1 = v5;
    *(void *)(a1 + 8) = 0;
    BOOL v6 = (uint64_t *)(a1 + 8);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    if (!v5) {
      return a1;
    }
  }
  else
  {
    *(unsigned char *)a1 = v4;
    *(void *)(a1 + 8) = 0;
    BOOL v6 = (uint64_t *)(a1 + 8);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    if (!v4) {
      return a1;
    }
  }
  char v16 = 5;
  strcpy((char *)__p, "modes");
  BOOL v7 = (uint64_t *)sub_5C4AC(a2, (uint64_t)__p);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  while (v9 != v8)
  {
    if (*(_DWORD *)(v9 + 8) != 2)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    int v11 = *(void **)v9;
    unint64_t v12 = *(void *)(a1 + 16);
    if (v12 >= *(void *)(a1 + 24))
    {
      uint64_t v10 = sub_102085C(v6, v11);
    }
    else
    {
      sub_101526C(*(void *)(a1 + 16), v11);
      uint64_t v10 = v12 + 8;
      *(void *)(a1 + 16) = v12 + 8;
    }
    *(void *)(a1 + 16) = v10;
    v9 += 16;
  }
  return a1;
}

void sub_101585C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = *v16;
  if (*v16)
  {
    *(void *)(v15 + 16) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10158B4(uint64_t a1, void *a2)
{
  __p[23] = 6;
  strcpy(__p, "enable");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)a1 = v4;
  *(void *)(a1 + 4) = 0x1400000032;
  *(_DWORD *)(a1 + 12) = 30;
  *(_OWORD *)(a1 + 16) = xmmword_20F1C90;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = xmmword_20F1CA0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 56) = _Q0;
  *(_OWORD *)(a1 + 72) = _Q0;
  *(void *)(a1 + 88) = 0x3FF0000000000000;
  *(_WORD *)(a1 + 96) = 257;
  *(unsigned char *)(a1 + 98) = 1;
  *(_OWORD *)(a1 + 104) = xmmword_20F1C70;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = xmmword_20F1C80;
  *(_DWORD *)(a1 + 152) = 0x7FFFFFFF;
  *(void *)(a1 + 160) = 0x7FFFFFFFFFFFFFFFLL;
  if (v4)
  {
    __p[23] = 10;
    strcpy(__p, "num_rounds");
    *(_DWORD *)(a1 + 4) = sub_31AC04(a2, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    *(void *)__n128 __p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_20B91A0;
    strcpy(*(char **)__p, "num_rounds_without_new_path");
    *(_DWORD *)(a1 + 8) = sub_31AC04(a2, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    __p[23] = 19;
    strcpy(__p, "max_num_added_paths");
    *(_DWORD *)(a1 + 12) = sub_31AC04(a2, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    *(void *)__n128 __p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_20B91B0;
    strcpy(*(char **)__p, "max_relative_scans_per_round");
    *(double *)(a1 + 16) = sub_5C7E8(a2, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    *(void *)__n128 __p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_20B5EB0;
    strcpy(*(char **)__p, "max_relative_time_increase");
    *(double *)(a1 + 24) = sub_5C7E8(a2, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    *(void *)__n128 __p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_20B91B0;
    strcpy(*(char **)__p, "max_absolute_time_increase_s");
    *(_DWORD *)(a1 + 32) = sub_5D2EC(a2, __p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    __p[23] = 11;
    strcpy(__p, "max_sharing");
    *(double *)(a1 + 40) = sub_5C7E8(a2, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    __p[23] = 16;
    strcpy(__p, "arc_count_factor");
    *(double *)(a1 + 48) = sub_5C7E8(a2, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    __p[23] = 18;
    strcpy(__p, "arc_count_exponent");
    *(double *)(a1 + 56) = sub_5C7E8(a2, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    *(void *)__n128 __p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_20B8890;
    strcpy(*(char **)__p, "arc_count_soft_closure_factor");
    *(double *)(a1 + 64) = sub_5C7E8(a2, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    *(void *)__n128 __p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_20B8E90;
    strcpy(*(char **)__p, "arc_count_soft_closure_exponent");
    *(double *)(a1 + 72) = sub_5C7E8(a2, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    *(void *)__n128 __p = operator new(0x28uLL);
    *(_OWORD *)&__p[8] = xmmword_20B93A0;
    strcpy(*(char **)__p, "arc_count_dangerous_sequence_factor");
    *(double *)(a1 + 80) = sub_5C7E8(a2, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    *(void *)__n128 __p = operator new(0x28uLL);
    *(_OWORD *)&__p[8] = xmmword_20B9240;
    strcpy(*(char **)__p, "arc_count_dangerous_sequence_exponent");
    *(double *)(a1 + 88) = sub_5C7E8(a2, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    sub_1014C60((uint64_t)__p, a2);
    long long v10 = v15;
    *(_OWORD *)(a1 + 128) = v14;
    *(_OWORD *)(a1 + 144) = v10;
    *(void *)(a1 + 160) = v16;
    long long v11 = *(_OWORD *)&__p[16];
    *(_OWORD *)(a1 + 96) = *(_OWORD *)__p;
    *(_OWORD *)(a1 + 112) = v11;
  }
  return a1;
}

void sub_1015DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1015E24(uint64_t a1, void *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(int64x2_t *)(a1 + 8) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 24) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 32) = 257;
  *(_OWORD *)(a1 + 56) = 0u;
  *(unsigned char *)(a1 + 64) = 1;
  BOOL v4 = (_OWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 72) = 0x3FF0000000000000;
  *(_WORD *)(a1 + 88) = 257;
  *(unsigned char *)(a1 + 90) = 1;
  *(_OWORD *)(a1 + 96) = xmmword_20F1C70;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = xmmword_20F1C80;
  *(_DWORD *)(a1 + 144) = 0x7FFFFFFF;
  *(void *)(a1 + 152) = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 192) = 0u;
  uint64_t v5 = a1 + 192;
  *(_OWORD *)(a1 + 160) = 0u;
  BOOL v6 = (unsigned char *)(a1 + 160);
  uint64_t v7 = a1 + 168;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 196) = 0x1400000032;
  *(_DWORD *)(a1 + 204) = 30;
  *(_OWORD *)(a1 + 208) = xmmword_20F1C90;
  *(_OWORD *)(a1 + 232) = xmmword_20F1CA0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 248) = _Q0;
  *(void *)(a1 + 264) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 272) = _Q0;
  *(_WORD *)(a1 + 288) = 257;
  *(unsigned char *)(a1 + 290) = 1;
  *(void *)(a1 + 296) = 0x3FF8000000000000;
  *(void *)(a1 + 304) = 0x3FE0000000000000;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0x3FF0000000000000;
  *(void *)(a1 + 336) = 0x3FE0000000000000;
  *(_DWORD *)(a1 + 344) = 0x7FFFFFFF;
  *(void *)(a1 + 352) = 0x7FFFFFFFFFFFFFFFLL;
  __p[23] = 6;
  strcpy(__p, "enable");
  BOOL v13 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 360) = v13;
  *(_WORD *)(a1 + 361) = 0;
  *(unsigned char *)(a1 + 363) = 0;
  *(unsigned char *)(a1 + 391) = 8;
  strcpy((char *)(a1 + 368), "standard");
  *(unsigned char *)(a1 + 415) = 8;
  strcpy((char *)(a1 + 392), "standard");
  *(void *)(a1 + 416) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 424) = -1;
  if (v13)
  {
    *(void *)unsigned int v50 = operator new(0x20uLL);
    long long v39 = xmmword_20B5EB0;
    *(_OWORD *)&v50[8] = xmmword_20B5EB0;
    strcpy(*(char **)v50, "capacity_bottleneck_filter");
    qmemcpy(v38, "ottleneck_filtercapacity_bottlen", sizeof(v38));
    long long v14 = (void *)sub_560F4(a2, (uint64_t)v50);
    sub_101493C((uint64_t)__p, v14);
    long long v15 = *(_OWORD *)&__p[16];
    *(_OWORD *)a1 = *(_OWORD *)__p;
    *(_OWORD *)(a1 + 16) = v15;
    long long v16 = v42;
    *(_OWORD *)(a1 + 32) = v41;
    *(_OWORD *)(a1 + 48) = v16;
    if ((v50[23] & 0x80000000) != 0) {
      operator delete(*(void **)v50);
    }
    v50[23] = 11;
    strcpy(v50, "input_paths");
    long long v17 = (void *)sub_560F4(a2, (uint64_t)v50);
    sub_101506C(__p, v17);
    long long v18 = v42;
    v4[2] = v41;
    v4[3] = v18;
    long long v19 = v44;
    v4[4] = v43;
    v4[5] = v19;
    long long v20 = *(_OWORD *)&__p[16];
    *BOOL v4 = *(_OWORD *)__p;
    v4[1] = v20;
    if ((v50[23] & 0x80000000) != 0) {
      operator delete(*(void **)v50);
    }
    *(void *)unsigned int v50 = operator new(0x20uLL);
    *(_OWORD *)&v50[8] = xmmword_20B8870;
    strcpy(*(char **)v50, "fastest_avoid_path_search");
    int v21 = (void *)sub_560F4(a2, (uint64_t)v50);
    sub_10156E0((uint64_t)__p, v21);
    *BOOL v6 = __p[0];
    BOOL v22 = *(void **)v7;
    if (*(void *)v7)
    {
      *(void *)(a1 + 176) = v22;
      operator delete(v22);
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
    }
    *(_OWORD *)(a1 + 168) = *(_OWORD *)&__p[8];
    *(void *)(a1 + 184) = *(void *)&__p[24];
    memset(&__p[8], 0, 24);
    if ((v50[23] & 0x80000000) != 0) {
      operator delete(*(void **)v50);
    }
    v50[23] = 14;
    strcpy(v50, "penalty_search");
    uint64_t v23 = (void *)sub_560F4(a2, (uint64_t)v50);
    sub_10158B4((uint64_t)__p, v23);
    long long v24 = v48;
    *(_OWORD *)(v5 + 128) = v47;
    *(_OWORD *)(v5 + 144) = v24;
    *(void *)(v5 + 160) = v49;
    long long v25 = v44;
    *(_OWORD *)(v5 + 64) = v43;
    *(_OWORD *)(v5 + 80) = v25;
    long long v26 = v46;
    *(_OWORD *)(v5 + 96) = v45;
    *(_OWORD *)(v5 + 112) = v26;
    long long v27 = *(_OWORD *)&__p[16];
    *(_OWORD *)uint64_t v5 = *(_OWORD *)__p;
    *(_OWORD *)(v5 + 16) = v27;
    long long v28 = v42;
    *(_OWORD *)(v5 + 32) = v41;
    *(_OWORD *)(v5 + 48) = v28;
    if ((v50[23] & 0x80000000) != 0) {
      operator delete(*(void **)v50);
    }
    __p[23] = 14;
    strcpy(__p, "add_debug_info");
    *(unsigned char *)(a1 + 361) = sub_29D62C(a2, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    __p[23] = 15;
    strcpy(__p, "show_path_graph");
    *(unsigned char *)(a1 + 362) = sub_29D62C(a2, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    *(void *)__n128 __p = operator new(0x28uLL);
    *(_OWORD *)&__p[8] = xmmword_20B93A0;
    strcpy(*(char **)__p, "run_decision_point_graph_conversion");
    *(unsigned char *)(a1 + 363) = sub_29D62C(a2, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    __p[23] = 13;
    strcpy(__p, "cost_function");
    double v29 = (const std::string *)sub_561B0(a2, (uint64_t)__p);
    std::string::operator=((std::string *)(a1 + 368), v29);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    *(void *)__n128 __p = operator new(0x19uLL);
    *(_OWORD *)&__p[8] = xmmword_20B9250;
    strcpy(*(char **)__p, "reference_cost_function");
    unsigned __int8 v30 = (const std::string *)sub_561B0(a2, (uint64_t)__p);
    std::string::operator=((std::string *)(a1 + 392), v30);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    int v31 = (char *)operator new(0x20uLL);
    *(void *)__n128 __p = v31;
    *(_OWORD *)&__p[8] = v39;
    *(_OWORD *)int v31 = v38[1];
    *(_OWORD *)(v31 + 10) = v38[0];
    v31[26] = 0;
    int v32 = (void *)sub_560F4(a2, (uint64_t)__p);
    *(void *)unsigned int v50 = operator new(0x20uLL);
    *(_OWORD *)&v50[8] = xmmword_20B8870;
    strcpy(*(char **)v50, "sub_path_extension_length");
    double v33 = sub_5C7E8(v32, (uint64_t)v50) * 100.0;
    if (v33 >= 0.0)
    {
      double v34 = v33;
      if (v33 >= 4.50359963e15) {
        goto LABEL_32;
      }
      uint64_t v35 = (uint64_t)(v33 + v33) + 1;
    }
    else
    {
      double v34 = v33;
      if (v33 <= -4.50359963e15) {
        goto LABEL_32;
      }
      uint64_t v35 = (uint64_t)(v33 + v33);
      if (v35 >= 1) {
        --v35;
      }
    }
    double v34 = (double)(v35 >> 1);
LABEL_32:
    if (v34 >= 9.22337204e18)
    {
      *(void *)(a1 + 416) = 0x7FFFFFFFFFFFFFFELL;
      if ((v50[23] & 0x80000000) != 0) {
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    if (v33 >= 0.0)
    {
      if (v33 >= 4.50359963e15) {
        goto LABEL_43;
      }
      uint64_t v36 = (uint64_t)(v33 + v33) + 1;
    }
    else
    {
      if (v33 <= -4.50359963e15) {
        goto LABEL_43;
      }
      uint64_t v36 = (uint64_t)(v33 + v33);
      if (v36 >= 1) {
        --v36;
      }
    }
    double v33 = (double)(v36 >> 1);
LABEL_43:
    *(void *)(a1 + 416) = (uint64_t)v33;
    if ((v50[23] & 0x80000000) != 0) {
LABEL_44:
    }
      operator delete(*(void **)v50);
LABEL_45:
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    *(void *)__n128 __p = operator new(0x19uLL);
    *(_OWORD *)&__p[8] = xmmword_20B9250;
    strcpy(*(char **)__p, "max_witness_search_cost");
    *(_DWORD *)(a1 + 424) = sub_31AC04(a2, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    *(void *)__n128 __p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_20B8E90;
    strcpy(*(char **)__p, "max_highway_witness_search_cost");
    *(_DWORD *)(a1 + 428) = sub_31AC04(a2, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  return a1;
}

void sub_10165B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v24 + 415) < 0) {
    operator delete(*v26);
  }
  if (*(char *)(v24 + 391) < 0) {
    operator delete(*v25);
  }
  double v29 = *v27;
  if (*v27)
  {
    *(void *)(v24 + 176) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void sub_1016690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    JUMPOUT(0x1016674);
  }
  JUMPOUT(0x1016678);
}

uint64_t sub_10166A8(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  *(void *)a1 = a2;
  sub_ED82AC(a1 + 8, a2);
  *(void *)(a1 + 4168) = sub_3750CC(a2);
  *(_OWORD *)(a1 + 4176) = 0u;
  *(_OWORD *)(a1 + 4192) = 0u;
  *(_OWORD *)(a1 + 4208) = 0u;
  *(_OWORD *)(a1 + 4224) = 0u;
  *(_DWORD *)(a1 + 4240) = 0;
  sub_3EAFD4(a1 + 4248, *(void *)a1, a6);
  HIBYTE(v27[2]) = 19;
  strcpy((char *)v27, "DrivingPathAnalyzer");
  uint64_t v24 = 0;
  long long v25 = 0;
  uint64_t v26 = 0;
  unint64_t v12 = sub_374CDC((uint64_t)a2, (uint64_t)v27, (uint64_t *)&v24);
  char v23 = 7;
  strcpy((char *)__p, "default");
  BOOL v13 = (void *)sub_560F4(v12, (uint64_t)__p);
  sub_1068CE4((uint64_t **)(a1 + 4288), a2, v13, a6);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  long long v14 = (void **)v24;
  if (v24)
  {
    long long v15 = v25;
    long long v16 = v24;
    if (v25 != v24)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      long long v16 = v24;
    }
    long long v25 = v14;
    operator delete(v16);
  }
  if (SHIBYTE(v27[2]) < 0) {
    operator delete(v27[0]);
  }
  sub_1020588(a1 + 4472, a3);
  *(void *)(a1 + 4904) = sub_374E14(a2, a3 + 368);
  *(void *)(a1 + 4912) = sub_374E14(a2, a3 + 392);
  *(_DWORD *)(a1 + 4920) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 4928) = 0u;
  *(_OWORD *)(a1 + 4944) = 0u;
  *(_OWORD *)(a1 + 4960) = 0u;
  *(_OWORD *)(a1 + 4976) = 0u;
  *(_OWORD *)(a1 + 4992) = 0u;
  *(_OWORD *)(a1 + 5008) = 0u;
  *(_OWORD *)(a1 + 5024) = 0u;
  *(_OWORD *)(a1 + 5040) = 0u;
  *(_OWORD *)(a1 + 5056) = 0u;
  *(_DWORD *)(a1 + 5072) = 0;
  long long v17 = (char *)operator new(0x400uLL);
  *(void *)(a1 + 5048) = v17;
  *(void *)(a1 + 5056) = v17;
  *(void *)(a1 + 5064) = v17 + 1024;
  long long v18 = (char *)operator new(0x3F8uLL);
  *(void *)(a1 + 5024) = v18;
  *(void *)(a1 + 5032) = v18;
  *(void *)(a1 + 5040) = v18 + 1016;
  *(_OWORD *)(a1 + 5080) = 0u;
  *(_OWORD *)(a1 + 5096) = 0u;
  *(_OWORD *)(a1 + 5112) = 0u;
  *(_OWORD *)(a1 + 5128) = 0u;
  *(_OWORD *)(a1 + 5144) = 0u;
  *(_OWORD *)(a1 + 5160) = 0u;
  *(_OWORD *)(a1 + 5176) = 0u;
  *(_OWORD *)(a1 + 5188) = 0u;
  long long v19 = (char *)operator new(0x400uLL);
  *(void *)(a1 + 5176) = v19;
  *(void *)(a1 + 5184) = v19;
  *(void *)(a1 + 5192) = v19 + 1024;
  long long v20 = (char *)operator new(0x17D0uLL);
  *(void *)(a1 + 5152) = v20;
  *(void *)(a1 + 5160) = v20;
  *(void *)(a1 + 5168) = v20 + 6096;
  *(_OWORD *)(a1 + 5208) = 0u;
  *(_OWORD *)(a1 + 5224) = 0u;
  *(_OWORD *)(a1 + 5240) = 0u;
  *(void *)(a1 + 5256) = &unk_20E1710;
  *(void *)(a1 + 5296) = 0;
  *(void *)(a1 + 5264) = 0;
  *(void *)(a1 + 5280) = 0;
  *(void *)(a1 + 5272) = 0;
  *(void *)(a1 + 5304) = &unk_20E1710;
  *(void *)(a1 + 5344) = 0;
  *(void *)(a1 + 5312) = 0;
  *(void *)(a1 + 5328) = 0;
  *(void *)(a1 + 5320) = 0;
  *(void *)(a1 + 5352) = &unk_20E1710;
  *(void *)(a1 + 5392) = 0;
  *(void *)(a1 + 5368) = 0;
  *(void *)(a1 + 5360) = 0;
  *(void *)(a1 + 5376) = 0;
  *(void *)(a1 + 5400) = &unk_20E1710;
  *(void *)(a1 + 5440) = 0;
  *(void *)(a1 + 5424) = 0;
  *(void *)(a1 + 5408) = 0;
  *(void *)(a1 + 5416) = 0;
  *(void *)(a1 + 5448) = &unk_20E1710;
  *(void *)(a1 + 5488) = 0;
  *(void *)(a1 + 5472) = 0;
  *(void *)(a1 + 5456) = 0;
  *(void *)(a1 + 5464) = 0;
  *(void *)(a1 + 5496) = &unk_20E1710;
  *(void *)(a1 + 5536) = 0;
  *(void *)(a1 + 5512) = 0;
  *(void *)(a1 + 5504) = 0;
  *(void *)(a1 + 5520) = 0;
  *(void *)(a1 + 5544) = &unk_20E1710;
  *(void *)(a1 + 5584) = 0;
  *(void *)(a1 + 5568) = 0;
  *(void *)(a1 + 5552) = 0;
  *(void *)(a1 + 5560) = 0;
  *(void *)(a1 + 5592) = &unk_20E1710;
  *(void *)(a1 + 5632) = 0;
  *(void *)(a1 + 5616) = 0;
  *(void *)(a1 + 5600) = 0;
  *(void *)(a1 + 5608) = 0;
  *(void *)(a1 + 5640) = &unk_20E1710;
  *(void *)(a1 + 5680) = 0;
  *(void *)(a1 + 5664) = 0;
  *(void *)(a1 + 5648) = 0;
  *(void *)(a1 + 5656) = 0;
  *(void *)(a1 + 5688) = &unk_20E1710;
  *(void *)(a1 + 5728) = 0;
  *(void *)(a1 + 5704) = 0;
  *(void *)(a1 + 5696) = 0;
  *(void *)(a1 + 5712) = 0;
  *(void *)(a1 + 5736) = &unk_20E1710;
  *(void *)(a1 + 5776) = 0;
  *(void *)(a1 + 5752) = 0;
  *(void *)(a1 + 5744) = 0;
  *(void *)(a1 + 5760) = 0;
  *(void *)(a1 + 5784) = &unk_20E1710;
  *(void *)(a1 + 5824) = 0;
  *(void *)(a1 + 5800) = 0;
  *(void *)(a1 + 5792) = 0;
  *(void *)(a1 + 5808) = 0;
  *(void *)(a1 + 5832) = &unk_20E1710;
  *(void *)(a1 + 5872) = 0;
  *(void *)(a1 + 5848) = 0;
  *(void *)(a1 + 5840) = 0;
  *(void *)(a1 + 5856) = 0;
  *(void *)(a1 + 5880) = &unk_20E1710;
  *(void *)(a1 + 5920) = 0;
  *(void *)(a1 + 5896) = 0;
  *(void *)(a1 + 5888) = 0;
  *(void *)(a1 + 5904) = 0;
  *(void *)(a1 + 5928) = &unk_20E1710;
  *(void *)(a1 + 5968) = 0;
  *(void *)(a1 + 5944) = 0;
  *(void *)(a1 + 5936) = 0;
  *(void *)(a1 + 5952) = 0;
  *(void *)(a1 + 5976) = &unk_20E1710;
  *(void *)(a1 + 6016) = 0;
  *(void *)(a1 + 5992) = 0;
  *(void *)(a1 + 5984) = 0;
  *(void *)(a1 + 6000) = 0;
  *(void *)(a1 + 6024) = &unk_20E1710;
  *(void *)(a1 + 6064) = 0;
  *(void *)(a1 + 6040) = 0;
  *(void *)(a1 + 6032) = 0;
  *(void *)(a1 + 6048) = 0;
  *(void *)(a1 + 6072) = &unk_20E1710;
  *(void *)(a1 + 6112) = 0;
  *(void *)(a1 + 6088) = 0;
  *(void *)(a1 + 6080) = 0;
  *(void *)(a1 + 6096) = 0;
  *(void *)(a1 + 6120) = &unk_20E1710;
  *(void *)(a1 + 6160) = 0;
  *(void *)(a1 + 6136) = 0;
  *(void *)(a1 + 6128) = 0;
  *(void *)(a1 + 6144) = 0;
  *(void *)(a1 + 6168) = &unk_20E1710;
  *(void *)(a1 + 6208) = 0;
  *(void *)(a1 + 6184) = 0;
  *(void *)(a1 + 6176) = 0;
  *(void *)(a1 + 6192) = 0;
  *(void *)(a1 + 6216) = &unk_20E1710;
  *(void *)(a1 + 6256) = 0;
  *(void *)(a1 + 6232) = 0;
  *(void *)(a1 + 6224) = 0;
  *(void *)(a1 + 6240) = 0;
  *(void *)(a1 + 6264) = &unk_20E1710;
  *(void *)(a1 + 6304) = 0;
  *(void *)(a1 + 6280) = 0;
  *(void *)(a1 + 6272) = 0;
  *(void *)(a1 + 6288) = 0;
  *(void *)(a1 + 6312) = &unk_20E1710;
  *(void *)(a1 + 6352) = 0;
  *(void *)(a1 + 6328) = 0;
  *(void *)(a1 + 6320) = 0;
  *(void *)(a1 + 6336) = 0;
  *(void *)(a1 + 6360) = &unk_20E1710;
  *(void *)(a1 + 6400) = 0;
  *(void *)(a1 + 6376) = 0;
  *(void *)(a1 + 6368) = 0;
  *(void *)(a1 + 6384) = 0;
  *(void *)(a1 + 6408) = &unk_20E1710;
  *(void *)(a1 + 6448) = 0;
  *(void *)(a1 + 6424) = 0;
  *(void *)(a1 + 6416) = 0;
  *(void *)(a1 + 6432) = 0;
  *(void *)(a1 + 6456) = &unk_20E1710;
  *(void *)(a1 + 6496) = 0;
  *(void *)(a1 + 6472) = 0;
  *(void *)(a1 + 6464) = 0;
  *(void *)(a1 + 6480) = 0;
  *(void *)(a1 + 6504) = &unk_20E1710;
  *(void *)(a1 + 6544) = 0;
  *(void *)(a1 + 6520) = 0;
  *(void *)(a1 + 6512) = 0;
  *(void *)(a1 + 6528) = 0;
  *(void *)(a1 + 6552) = &unk_20E1710;
  *(void *)(a1 + 6592) = 0;
  *(void *)(a1 + 6568) = 0;
  *(void *)(a1 + 6560) = 0;
  *(void *)(a1 + 6576) = 0;
  *(void *)(a1 + 6600) = &unk_20E1710;
  *(void *)(a1 + 6640) = 0;
  *(void *)(a1 + 6616) = 0;
  *(void *)(a1 + 6608) = 0;
  *(void *)(a1 + 6624) = 0;
  *(void *)(a1 + 6648) = &unk_20E1710;
  *(void *)(a1 + 6688) = 0;
  *(void *)(a1 + 6664) = 0;
  *(void *)(a1 + 6656) = 0;
  *(void *)(a1 + 6672) = 0;
  *(void *)(a1 + 6696) = &unk_20E1710;
  *(void *)(a1 + 6736) = 0;
  *(void *)(a1 + 6712) = 0;
  *(void *)(a1 + 6704) = 0;
  *(void *)(a1 + 6720) = 0;
  *(void *)(a1 + 6744) = &unk_20E1710;
  *(void *)(a1 + 6760) = 0;
  *(void *)(a1 + 6752) = 0;
  *(void *)(a1 + 6768) = 0;
  *(_OWORD *)(a1 + 6880) = 0u;
  *(_OWORD *)(a1 + 6864) = 0u;
  *(_OWORD *)(a1 + 6848) = 0u;
  *(_OWORD *)(a1 + 6832) = 0u;
  *(_OWORD *)(a1 + 6816) = 0u;
  *(_OWORD *)(a1 + 6800) = 0u;
  *(_OWORD *)(a1 + 6784) = 0u;
  *(_DWORD *)(a1 + 6896) = 1065353216;
  if (*(unsigned char *)(a3 + 360) && !a5) {
    *(_DWORD *)(a1 + 4920) = a4;
  }
  return a1;
}

void sub_1016BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  *(void *)(v23 + 5184) = v26;
  operator delete(v26);
  double v29 = *(void **)(v23 + 5152);
  if (v29)
  {
    *(void *)(v23 + 5160) = v29;
    operator delete(v29);
  }
  sub_36094((void **)(v23 + 5128));
  unsigned __int8 v30 = *(void **)(v23 + 5104);
  if (v30) {
    operator delete(v30);
  }
  if (*v27) {
    operator delete(*v27);
  }
  sub_3310C(v23 + 5024);
  sub_A387FC(v23 + 4952);
  sub_1016D48((void **)(v23 + 4928));
  sub_F2C4A8(v25);
  if (*(char *)(v23 + 4407) < 0) {
    operator delete(*(void **)(v23 + 4384));
  }
  sub_C62E9C(v24);
  _Unwind_Resume(a1);
}

void **sub_1016D48(void **a1)
{
  int v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    BOOL v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 9);
        if (v5)
        {
          *((void *)v3 - 8) = v5;
          operator delete(v5);
        }
        v3 -= 80;
      }
      while (v3 != v2);
      BOOL v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1016DBC(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  return sub_10166A8(a1, a2, a3, a4, a5, a6);
}

void sub_1016DC4(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, int64x2_t *a4@<X8>)
{
  uint64_t v8 = (unsigned char *)(a1 + 4632);
  sub_725D0((uint64_t)v120);
  sub_10177A0(a1);
  a4->i64[0] = 0;
  a4->i64[1] = 0;
  a4[1].i64[0] = 0;
  if (v8[200])
  {
    uint64_t v9 = (void *)sub_68EB4((uint64_t)a2);
    long long v10 = (void *)sub_374DF4((uint64_t)a2);
    unint64_t v100 = (void *)a1;
    if (sub_1026098((uint64_t)a2) != 0x7FFFFFFF && *v9 != v9[1] && *v10 != v10[1])
    {
      unint64_t v11 = sub_1026194((uint64_t)a2);
      *(_DWORD *)(a1 + 4188) = sub_2D0F10(v11);
      unint64_t v12 = sub_10261A8(a2);
      *(_DWORD *)(a1 + 4192) = sub_2D0F10(v12);
      uint64_t v98 = *(void *)(sub_638A44((uint64_t)a2) + 72);
      unint64_t v13 = sub_1026194((uint64_t)a2);
      uint64_t v96 = a1 + 4928;
      sub_10179D8((char **)(a1 + 4928), v13);
      unint64_t v14 = sub_10261A8(a2);
      uint64_t v15 = *(void *)(a1 + 5136);
      uint64_t v16 = *(void *)(a1 + 5128);
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 3);
      if (v14 <= v17)
      {
        if (v14 < v17)
        {
          uint64_t v50 = v16 + 24 * v14;
          if (v15 != v50)
          {
            uint64_t v51 = *(void *)(a1 + 5136);
            do
            {
              int v53 = *(void **)(v51 - 24);
              v51 -= 24;
              uint64_t v52 = v53;
              if (v53)
              {
                *(void *)(v15 - 16) = v52;
                operator delete(v52);
              }
              uint64_t v15 = v51;
            }
            while (v51 != v50);
          }
          *(void *)(a1 + 5136) = v50;
        }
      }
      else
      {
        sub_4467FC(a1 + 5128, v14 - v17);
      }
      unint64_t v54 = sub_10261A8(a2);
      uint64_t v55 = *(void *)(a1 + 6792);
      unint64_t v56 = (*(void *)(a1 + 6800) - v55) >> 1;
      if (v54 <= v56)
      {
        if (v54 < v56) {
          *(void *)(a1 + 6800) = v55 + 2 * v54;
        }
      }
      else
      {
        sub_1020AD0((void **)(a1 + 6792), v54 - v56);
      }
      unint64_t v57 = sub_10261A8(a2);
      BOOL v58 = (void *)(a1 + 6816);
      LOBYTE(v102) = 0;
      uint64_t v59 = *(void *)(a1 + 6816);
      unint64_t v60 = *(void *)(a1 + 6824) - v59;
      if (v57 <= v60)
      {
        if (v57 < v60) {
          *(void *)(a1 + 6824) = v59 + v57;
        }
      }
      else
      {
        sub_1020C78((unint64_t *)(a1 + 6816), v57 - v60, (const char *)&v102);
      }
      unint64_t v61 = sub_10261A8(a2);
      double v62 = (void *)(a1 + 6840);
      LOBYTE(v102) = 0;
      uint64_t v63 = *(void *)(a1 + 6840);
      unint64_t v64 = *(void *)(a1 + 6848) - v63;
      if (v61 <= v64)
      {
        if (v61 < v64) {
          *(void *)(a1 + 6848) = v63 + v61;
        }
      }
      else
      {
        sub_1020C78((unint64_t *)(a1 + 6840), v61 - v64, (const char *)&v102);
      }
      unint64_t v94 = (uint64_t **)a3;
      unint64_t v95 = v8;
      int v65 = sub_1026194((uint64_t)a2);
      uint64_t v99 = a4;
      if (v65)
      {
        int v66 = 0;
        int v97 = v65;
        uint64_t v67 = a1 + 4248;
        do
        {
          uint64_t v102 = (void *)-1;
          v103[1] = 0;
          uint64_t v104 = 0;
          v103[0] = 0;
          *(void *)&long long v105 = v98;
          DWORD2(v105) = 0;
          memset(v106, 0, 25);
          unint64_t v68 = v100[617];
          if (v68 >= v100[618])
          {
            unint64_t v71 = sub_1020F40((void **)v96, (uint64_t)&v102);
            unint64_t v72 = v103[0];
            v100[617] = v71;
            if (v72)
            {
              v103[1] = v72;
              operator delete(v72);
            }
          }
          else
          {
            *(void *)unint64_t v68 = v102;
            *(void *)(v68 + 8) = 0;
            *(void *)(v68 + 16) = 0;
            *(void *)(v68 + 24) = 0;
            *(_OWORD *)(v68 + 8) = *(_OWORD *)v103;
            *(void *)(v68 + 24) = v104;
            v103[0] = 0;
            v103[1] = 0;
            uint64_t v104 = 0;
            long long v69 = *(_OWORD *)((char *)v106 + 9);
            long long v70 = v106[0];
            *(_OWORD *)(v68 + 32) = v105;
            *(_OWORD *)(v68 + 48) = v70;
            *(_OWORD *)(v68 + 57) = v69;
            v100[617] = v68 + 80;
          }
          LODWORD(v102) = v66;
          uint64_t v73 = a2;
          sub_10261DC((uint64_t)a2, (int *)&v102, v101);
          unsigned int v74 = (unsigned int *)v101[0];
          uint64_t v75 = v101[1];
          while (v74 != (unsigned int *)v75)
          {
            long long v76 = (uint64_t *)*((void *)v74 + 2);
            long long v77 = (uint64_t *)*((void *)v74 + 3);
            while (v76 != v77)
            {
              sub_3F4E6C(v67, *v76, (uint64_t)&v102);
              *(unsigned char *)(*v58 + *v74) |= v102 != v103[0];
              long long v78 = v102;
              if (v102 == v103[0])
              {
                BOOL v81 = 0;
              }
              else
              {
                do
                {
                  long long v79 = (void *)*v78;
                  uint64_t v80 = v78[1];
                  v78 += 2;
                  LODWORD(v79) = *(unsigned __int8 *)(*v79 + 424 * v80 + 312);
                  BOOL v21 = v79 == 0;
                  BOOL v81 = v79 != 0;
                }
                while (v21 && v78 != v103[0]);
              }
              *(unsigned char *)(*v62 + *v74) |= v81;
              if (v102)
              {
                v103[0] = v102;
                operator delete(v102);
              }
              ++v76;
            }
            v74 += 46;
          }
          ++v66;
          a4 = v99;
          a2 = v73;
        }
        while (v66 != v97);
      }
      unint64_t v83 = sub_1026194((uint64_t)a2);
      sub_A3E96C((uint64_t)(v100 + 635), v83, 0);
      unint64_t v84 = sub_1026194((uint64_t)a2);
      sub_A3E96C((uint64_t)(v100 + 638), v84, 0);
      sub_1017B24((uint64_t)v100, a2, v94, a4);
      unint64_t v85 = (void *)v100[616];
      unint64_t v86 = (void *)v100[617];
      uint64_t v102 = v85;
      v103[0] = v86;
      uint64_t v87 = (void *)v100[618];
      v103[1] = v87;
      *(void *)(v96 + 8) = 0;
      *(void *)(v96 + 16) = 0;
      *(void *)uint64_t v96 = 0;
      sub_1018C18((uint64_t)v100, (uint64_t)a2, a4);
      unint64_t v88 = *(char **)v96;
      if (*(void *)v96)
      {
        uint64_t v89 = (char *)v100[617];
        double v90 = *(char **)v96;
        if (v89 != v88)
        {
          do
          {
            unint64_t v91 = (void *)*((void *)v89 - 9);
            if (v91)
            {
              *((void *)v89 - 8) = v91;
              operator delete(v91);
            }
            v89 -= 80;
          }
          while (v89 != v88);
          double v90 = *(char **)v96;
        }
        v100[617] = v88;
        operator delete(v90);
        *(void *)uint64_t v96 = 0;
        *(void *)(v96 + 8) = 0;
        *(void *)(v96 + 16) = 0;
      }
      v100[616] = v85;
      v100[617] = v86;
      v100[618] = v87;
      v103[0] = 0;
      v103[1] = 0;
      uint64_t v102 = 0;
      if (*v95)
      {
        uint64_t v92 = v100[580];
        for (uint64_t i = v100[581]; v92 != i; v92 += 8)
          sub_1019F28((uint64_t)v100, a2, v92, (uint64_t)a4);
      }
      if (v95[202]) {
        sub_101A4B4();
      }
      v100[522] = (unint64_t)sub_72688((uint64_t)v120);
      return;
    }
    long long v18 = *(std::string **)a3;
    long long v19 = *(std::string **)(a3 + 8);
    if (*(std::string **)a3 == v19)
    {
LABEL_61:
      v100[522] = (unint64_t)sub_72688((uint64_t)v120);
      return;
    }
    uint64_t v20 = a1 + 4248;
    while (1)
    {
      sub_EA7B08((char *)v18, (uint64_t)&v114);
      sub_EA7C00((char *)v18, (uint64_t)&v107);
      BOOL v21 = v118 == v119 || __p == v113;
      if (v21)
      {
        if ((v118 == v119) != (__p == v113)) {
          goto LABEL_31;
        }
        goto LABEL_16;
      }
      if (v115 != v109) {
        goto LABEL_31;
      }
      if ((void)v114)
      {
        unint64_t v24 = *((void *)&v114 + 1);
        unint64_t v25 = sub_EB04C4((void *)v114);
        BOOL v26 = v24 < v25;
        long long v27 = v107;
        if (!v107)
        {
          if (v24 < v25) {
            goto LABEL_31;
          }
          goto LABEL_16;
        }
      }
      else
      {
        BOOL v26 = 0;
        BOOL v22 = 0;
        long long v27 = v107;
        if (!v107) {
          goto LABEL_48;
        }
      }
      unint64_t v28 = v108;
      unint64_t v29 = sub_EB04C4(v27);
      if (v28 < v29 && v26)
      {
        uint64_t v31 = sub_EB0624((void *)v114, *((unint64_t *)&v114 + 1));
        if (v31 != sub_EB0624(v107, v108)) {
          goto LABEL_31;
        }
LABEL_16:
        BOOL v22 = 0;
        uint64_t v23 = __p;
        if (__p) {
          goto LABEL_49;
        }
        goto LABEL_50;
      }
      if (v26 == v28 < v29) {
        goto LABEL_16;
      }
LABEL_31:
      int v32 = (int **)sub_EB0624((void *)v114, *((unint64_t *)&v114 + 1));
      BOOL v22 = sub_3EB32C(v20, v32);
      if (!v22) {
        break;
      }
      BOOL v22 = 1;
      uint64_t v23 = __p;
      if (__p)
      {
LABEL_49:
        unsigned int v113 = v23;
        operator delete(v23);
      }
LABEL_50:
      if (v110)
      {
        int v111 = v110;
        operator delete(v110);
      }
      if (v118)
      {
        long long v119 = v118;
        operator delete(v118);
      }
      if (v116)
      {
        uint64_t v117 = v116;
        operator delete(v116);
      }
      if (!v22)
      {
        long long v47 = (void **)nullsub_1(v18);
        if (!sub_101F308(*v47, v47[1], (uint64_t)v100)) {
          sub_EB6F70(a4, v18, 0);
        }
      }
      v18 += 2;
      if (v18 == v19) {
        goto LABEL_61;
      }
    }
    unint64_t v33 = v115;
    ++*((void *)&v114 + 1);
    while (1)
    {
      double v34 = v118;
      if (v33 >= ((v119 - v118) >> 4) - 1)
      {
LABEL_47:
        if (sub_10209C4((uint64_t)&v114, (uint64_t)&v107))
        {
LABEL_48:
          uint64_t v23 = __p;
          if (__p) {
            goto LABEL_49;
          }
          goto LABEL_50;
        }
        goto LABEL_31;
      }
      uint64_t v35 = &v118[16 * v33];
      if ((void)v114)
      {
        unint64_t v36 = *((void *)&v114 + 1);
        unint64_t v37 = sub_EB04C4((void *)v114);
        BOOL v38 = v36 < v37;
        long long v39 = *(void **)v35;
        if (!*(void *)v35)
        {
          if (v36 < v37) {
            goto LABEL_47;
          }
          goto LABEL_34;
        }
      }
      else
      {
        long long v39 = *(void **)v35;
        if (!*(void *)v35) {
          goto LABEL_34;
        }
        BOOL v38 = 0;
      }
      uint64_t v40 = &v34[16 * v33];
      unint64_t v43 = *((void *)v40 + 1);
      long long v41 = (unint64_t *)(v40 + 8);
      unint64_t v42 = v43;
      unint64_t v44 = sub_EB04C4(v39);
      if (v43 < v44 && v38)
      {
        uint64_t v46 = sub_EB0624((void *)v114, *((unint64_t *)&v114 + 1));
        if (v46 != sub_EB0624(*(void **)v35, *v41)) {
          goto LABEL_47;
        }
      }
      else if ((v38 ^ (v42 < v44)))
      {
        goto LABEL_47;
      }
LABEL_34:
      unint64_t v33 = v115 + 1;
      unint64_t v115 = v33;
      long long v114 = *((_OWORD *)v116 + v33);
    }
  }
  uint64_t v49 = *(std::string **)a3;
  long long v48 = *(std::string **)(a3 + 8);
  if (*(std::string **)a3 != v48)
  {
    do
    {
      sub_EB6F70(a4, v49, 0);
      v49 += 2;
    }
    while (v49 != v48);
  }
  *(void *)(a1 + 4176) = (unint64_t)sub_72688((uint64_t)v120);
}

void sub_1017614(_Unwind_Exception *a1)
{
  sub_C63044(v1);
  _Unwind_Resume(a1);
}

void sub_1017628(_Unwind_Exception *a1)
{
  sub_C63044(v1);
  _Unwind_Resume(a1);
}

void sub_101763C(_Unwind_Exception *a1)
{
  sub_C63044(v1);
  _Unwind_Resume(a1);
}

void sub_1017650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void ***a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *__p,uint64_t a24)
{
}

void sub_10176D8(_Unwind_Exception *a1)
{
  sub_C63044(v1);
  _Unwind_Resume(a1);
}

void sub_10176EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void ***a18)
{
}

void sub_1017704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_39EB70(&a32);
  sub_39EB70((void *)(v33 - 192));
  sub_C63044(v32);
  _Unwind_Resume(a1);
}

void sub_10177A0(uint64_t a1)
{
  *(_DWORD *)(a1 + 4240) = 0;
  *(_OWORD *)(a1 + 4224) = 0u;
  *(_OWORD *)(a1 + 4208) = 0u;
  *(_OWORD *)(a1 + 4192) = 0u;
  *(_OWORD *)(a1 + 4176) = 0u;
  uint64_t v2 = *(void *)(a1 + 4936);
  uint64_t v3 = *(void *)(a1 + 4928);
  while (v2 != v3)
  {
    BOOL v4 = *(void **)(v2 - 72);
    if (v4)
    {
      *(void *)(v2 - 64) = v4;
      operator delete(v4);
    }
    v2 -= 80;
  }
  *(void *)(a1 + 4936) = v3;
  uint64_t v5 = *(unsigned __int16 **)(a1 + 5000);
  BOOL v6 = *(unsigned __int16 **)(a1 + 5008);
  if (v5 != v6)
  {
    do
    {
      unsigned int v7 = *v5++;
      *(void *)(*(void *)(a1 + 4976) + (((unint64_t)v7 >> 3) & 0x1FF8)) &= ~(1 << v7);
      *(_DWORD *)(*(void *)(a1 + 4952) + 4 * v7) = 0x7FFFFFFF;
    }
    while (v5 != v6);
    uint64_t v5 = *(unsigned __int16 **)(a1 + 5000);
  }
  *(void *)(a1 + 5008) = v5;
  *(void *)(a1 + 5088) = 0;
  *(void *)(a1 + 5112) = 0;
  *(void *)(a1 + 5056) = *(void *)(a1 + 5048);
  *(void *)(a1 + 5032) = *(void *)(a1 + 5024);
  *(_DWORD *)(a1 + 5072) = 0;
  *(void *)(a1 + 5184) = *(void *)(a1 + 5176);
  *(void *)(a1 + 5160) = *(void *)(a1 + 5152);
  uint64_t v8 = -768;
  *(void *)(a1 + 5240) = *(void *)(a1 + 5232);
  *(_DWORD *)(a1 + 5200) = 0;
  do
  {
    uint64_t v10 = a1 + v8;
    if (*(void *)(a1 + v8 + 6040))
    {
      unint64_t v11 = *(void *)(v10 + 6048);
      if (v11 >= 0x80)
      {
        uint64_t v9 = (void *)(a1 + v8);
        operator delete(*(void **)(v10 + 6024));
        *(void *)(v10 + 6024) = &unk_20E1710;
        v9[758] = 0;
        v9[754] = 0;
        v9[756] = 0;
        v9[755] = 0;
      }
      else if (v11)
      {
        *(void *)(v10 + 6040) = 0;
        memset(*(void **)(v10 + 6024), 128, v11 + 8);
        *(unsigned char *)(*(void *)(v10 + 6024) + v11) = -1;
        unint64_t v12 = *(void *)(v10 + 6048);
        if (v12 == 7) {
          uint64_t v13 = 6;
        }
        else {
          uint64_t v13 = v12 - (v12 >> 3);
        }
        *(void *)(a1 + v8 + 6064) = v13 - *(void *)(v10 + 6040);
      }
    }
    v8 += 48;
  }
  while (v8);
  uint64_t v14 = -768;
  do
  {
    uint64_t v16 = a1 + v14;
    if (*(void *)(a1 + v14 + 6808))
    {
      unint64_t v17 = *(void *)(v16 + 6816);
      if (v17 >= 0x80)
      {
        uint64_t v15 = (void *)(a1 + v14);
        operator delete(*(void **)(v16 + 6792));
        *(void *)(v16 + 6792) = &unk_20E1710;
        v15[854] = 0;
        v15[850] = 0;
        v15[852] = 0;
        v15[851] = 0;
      }
      else if (v17)
      {
        *(void *)(v16 + 6808) = 0;
        memset(*(void **)(v16 + 6792), 128, v17 + 8);
        *(unsigned char *)(*(void *)(v16 + 6792) + v17) = -1;
        unint64_t v18 = *(void *)(v16 + 6816);
        if (v18 == 7) {
          uint64_t v19 = 6;
        }
        else {
          uint64_t v19 = v18 - (v18 >> 3);
        }
        *(void *)(a1 + v14 + 6832) = v19 - *(void *)(v16 + 6808);
      }
    }
    v14 += 48;
  }
  while (v14);
}

void sub_10179D8(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= a2) {
    return;
  }
  if (a2 >= 0x333333333333334) {
    sub_2E00();
  }
  BOOL v4 = a1[1];
  uint64_t v5 = 80 * a2;
  BOOL v6 = (char *)operator new(80 * a2);
  unsigned int v7 = &v6[v5];
  uint64_t v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_13;
  }
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = &v8[v9];
    unint64_t v11 = &v4[v9];
    *((void *)v10 - 10) = *(void *)&v4[v9 - 80];
    *(_OWORD *)(v10 - 72) = *(_OWORD *)&v4[v9 - 72];
    *((void *)v10 - 7) = *(void *)&v4[v9 - 56];
    *((void *)v11 - 9) = 0;
    *((void *)v11 - 8) = 0;
    *((void *)v11 - 7) = 0;
    long long v12 = *(_OWORD *)&v4[v9 - 48];
    long long v13 = *(_OWORD *)&v4[v9 - 32];
    *(_OWORD *)(v10 - 23) = *(_OWORD *)&v4[v9 - 23];
    *((_OWORD *)v10 - 3) = v12;
    *((_OWORD *)v10 - 2) = v13;
    v9 -= 80;
  }
  while (&v4[v9] != v2);
  uint64_t v14 = *a1;
  uint64_t v2 = a1[1];
  *a1 = &v8[v9];
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v14)
  {
    do
    {
      uint64_t v15 = (void *)*((void *)v2 - 9);
      if (v15)
      {
        *((void *)v2 - 8) = v15;
        operator delete(v15);
      }
      v2 -= 80;
    }
    while (v2 != v14);
    uint64_t v2 = v14;
  }
  if (v2)
  {
LABEL_13:
    operator delete(v2);
  }
}

void sub_1017B24(uint64_t a1, unsigned int *a2, uint64_t **a3, int64x2_t *a4)
{
  BOOL v4 = (unsigned char *)(a1 + 4536);
  BOOL v6 = *a3;
  uint64_t v5 = a3[1];
  if (*a3 != v5)
  {
    while ((sub_EA82B8(v6) & 0x10000000000) == 0)
    {
      v6 += 6;
      if (v6 == v5) {
        goto LABEL_4;
      }
    }
    goto LABEL_5;
  }
LABEL_4:
  if (!*v4)
  {
    int v199 = 0;
    unint64_t v200 = 0;
    uint64_t v201 = 0;
    uint64_t v46 = (uint64_t)a2;
    uint64_t v47 = sub_1026194((uint64_t)a2);
    uint64_t v48 = a1;
    if (v47)
    {
      uint64_t v49 = 0;
      uint64_t v50 = *(void *)(a1 + 4928);
      do
      {
        *(void *)(v50 + 16) = *(void *)(v50 + 8);
        *(_DWORD *)(v50 + 40) = 0x7FFFFFFF;
        *(void *)(v50 + 48) = 0x7FFFFFFFFFFFFFFFLL;
        *(void *)(v50 + 56) = 0x7FFFFFFFFFFFFFFFLL;
        *(unsigned char *)(v50 + 72) = 0;
        *(_DWORD *)uint64_t v50 = v49;
        *(_DWORD *)(v50 + 4) = -1;
        v50 += 80;
        ++v49;
      }
      while (v47 != v49);
    }
    double v51 = *(double *)(a1 + 4544) * (double)(int)sub_1026098((uint64_t)a2);
    if (v51 >= 0.0)
    {
      if (v51 >= 4.50359963e15) {
        goto LABEL_77;
      }
      uint64_t v52 = (uint64_t)(v51 + v51) + 1;
    }
    else
    {
      if (v51 <= -4.50359963e15) {
        goto LABEL_77;
      }
      uint64_t v52 = (uint64_t)(v51 + v51);
      if (v52 >= 1) {
        --v52;
      }
    }
    double v51 = (double)(v52 >> 1);
LABEL_77:
    int v53 = sub_1026098((uint64_t)a2);
    int v54 = (int)v51;
    if (*(_DWORD *)(a1 + 4552) + v53 > (int)v51) {
      int v54 = *(_DWORD *)(a1 + 4552) + v53;
    }
    int v175 = v54;
    long long v196 = 0;
    uint64_t v197 = 0;
    long long v198 = 0;
    unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 4);
    int v56 = (unsigned __int16)(-21845 * (((char *)a3[1] - (char *)*a3) >> 4));
    uint64_t v177 = (unsigned __int16)(-21845 * (((char *)a3[1] - (char *)*a3) >> 4));
    if (!(-21845 * (unsigned __int16)(((char *)a3[1] - (char *)*a3) >> 4))) {
      goto LABEL_226;
    }
    uint64_t v57 = 0;
    int v176 = 0;
    while (sub_EA8440(&(*a3)[6 * v57]) == 1)
    {
      BOOL v58 = (uint64_t *)nullsub_1(&(*a3)[6 * v57]);
      if (!sub_EADC78(*v58)) {
        break;
      }
      uint64_t v59 = (int **)sub_EA8438(&(*a3)[6 * v57]);
      if (sub_3EB32C(a1 + 4248, v59)) {
        break;
      }
      sub_EB6F70(a4, (std::string *)&(*a3)[6 * v57], 0);
LABEL_82:
      if (++v57 == v177)
      {
        unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 4);
        int v56 = v176;
LABEL_226:
        if (v55 != v56) {
          *(_DWORD *)(v48 + 4196) += v55 - v56;
        }
        uint64_t v164 = sub_1026194(v46);
        if (v164)
        {
          uint64_t v165 = *(void *)(v48 + 4928);
          unint64_t v166 = 0;
          unint64_t v167 = v164 - 1;
          if (v164 == 1) {
            goto LABEL_230;
          }
          BOOL v170 = !is_mul_ok(v167, 0x50uLL);
          uint64_t v171 = 80 * v167;
          if (v165 + 40 + v171 < (unint64_t)(v165 + 40)) {
            goto LABEL_230;
          }
          if (v165 + 52 + v171 < (unint64_t)(v165 + 52)) {
            goto LABEL_230;
          }
          if (v170) {
            goto LABEL_230;
          }
          unint64_t v166 = v164 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v172 = v165 + 84;
          unint64_t v173 = v164 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            *(_DWORD *)(v172 - 80) = -1;
            *(_DWORD *)uint64_t v172 = -1;
            uint64_t v174 = *(void *)(v172 + 4);
            *(void *)(v172 - 68) = *(void *)(v172 - 76);
            *(void *)(v172 + 12) = v174;
            *(_DWORD *)(v172 - 44) = 0x7FFFFFFF;
            *(_DWORD *)(v172 + 36) = 0x7FFFFFFF;
            *(void *)(v172 - 36) = 0x7FFFFFFFFFFFFFFFLL;
            *(void *)(v172 + 44) = 0x7FFFFFFFFFFFFFFFLL;
            *(void *)(v172 - 28) = 0x7FFFFFFFFFFFFFFFLL;
            *(void *)(v172 + 52) = 0x7FFFFFFFFFFFFFFFLL;
            *(unsigned char *)(v172 - 12) = 0;
            *(unsigned char *)(v172 + 68) = 0;
            v172 += 160;
            v173 -= 2;
          }
          while (v173);
          if (v164 != v166)
          {
LABEL_230:
            unint64_t v168 = v164 - v166;
            uint64_t v169 = v165 + 80 * v166 + 40;
            do
            {
              *(_DWORD *)(v169 - 36) = -1;
              *(void *)(v169 - 24) = *(void *)(v169 - 32);
              *(_DWORD *)uint64_t v169 = 0x7FFFFFFF;
              *(void *)(v169 + 8) = 0x7FFFFFFFFFFFFFFFLL;
              *(void *)(v169 + 16) = 0x7FFFFFFFFFFFFFFFLL;
              *(unsigned char *)(v169 + 32) = 0;
              v169 += 80;
              --v168;
            }
            while (v168);
          }
        }
        if (v196)
        {
          uint64_t v197 = (char *)v196;
          operator delete(v196);
        }
        if (v199)
        {
          unint64_t v200 = (char *)v199;
          operator delete(v199);
        }
        return;
      }
    }
    unint64_t v60 = (char *)v196;
    unint64_t v61 = (unsigned int *)v197;
    if (v196 != v197)
    {
      uint64_t v62 = *(void *)(v48 + 4928);
      uint64_t v63 = (unsigned int *)v196;
      do
      {
        uint64_t v64 = v62 + 80 * *v63;
        *(_DWORD *)(v64 + 4) = -1;
        *(void *)(v64 + 16) = *(void *)(v64 + 8);
        *(_DWORD *)(v64 + 40) = 0x7FFFFFFF;
        *(void *)(v64 + 48) = 0x7FFFFFFFFFFFFFFFLL;
        *(void *)(v64 + 56) = 0x7FFFFFFFFFFFFFFFLL;
        *(unsigned char *)(v64 + 72) = 0;
        unsigned int v65 = *v63++;
        *(_DWORD *)(v62 + 80 * v65) = v65;
      }
      while (v63 != v61);
    }
    uint64_t v197 = v60;
    long long v194 = 0u;
    long long v195 = 0u;
    *(_OWORD *)uint64_t v193 = 0u;
    uint64_t v66 = sub_68EB4(v46);
    uint64_t v67 = *(unsigned int **)v66;
    unint64_t v68 = *(unsigned int **)(v66 + 8);
    while (v67 != v68)
    {
      uint64_t v70 = *v67;
      *(_DWORD *)(*(void *)(v48 + 4928) + 80 * v70 + 40) = 0;
      uint64_t v71 = *(void *)(v48 + 4928) + 80 * v70;
      *(void *)(v71 + 48) = 0;
      *(void *)(v71 + 56) = 0;
      unint64_t v72 = (char *)v193[1];
      if ((void *)v194 == v193[1]) {
        unint64_t v73 = 0;
      }
      else {
        unint64_t v73 = (((void)v194 - (unint64_t)v193[1]) << 7) - 1;
      }
      uint64_t v74 = *((void *)&v195 + 1);
      unint64_t v75 = *((void *)&v195 + 1) + v195;
      if (v73 == *((void *)&v195 + 1) + (void)v195)
      {
        sub_102315C((uint64_t)v193);
        uint64_t v74 = *((void *)&v195 + 1);
        unint64_t v72 = (char *)v193[1];
        unint64_t v75 = v195 + *((void *)&v195 + 1);
      }
      *(_DWORD *)(*(void *)&v72[(v75 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v75 & 0x3FF)) = v70;
      *((void *)&v195 + 1) = v74 + 1;
      long long v76 = v197;
      if (v197 < v198)
      {
        *(_DWORD *)uint64_t v197 = v70;
        uint64_t v69 = (uint64_t)(v76 + 4);
        goto LABEL_91;
      }
      long long v77 = (char *)v196;
      int64_t v78 = v197 - (unsigned char *)v196;
      uint64_t v79 = (v197 - (unsigned char *)v196) >> 2;
      unint64_t v80 = v79 + 1;
      if ((unint64_t)(v79 + 1) >> 62) {
        sub_2E00();
      }
      uint64_t v81 = v198 - (unsigned char *)v196;
      if ((v198 - (unsigned char *)v196) >> 1 > v80) {
        unint64_t v80 = v81 >> 1;
      }
      if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v82 = v80;
      }
      if (v82)
      {
        if (v82 >> 62) {
          sub_188D718();
        }
        unint64_t v83 = (char *)operator new(4 * v82);
        unint64_t v84 = &v83[4 * v79];
        *(_DWORD *)unint64_t v84 = v70;
        uint64_t v69 = (uint64_t)(v84 + 4);
        if (v76 == v77) {
          goto LABEL_116;
        }
LABEL_110:
        unint64_t v85 = v76 - 4 - v77;
        if (v85 < 0x2C) {
          goto LABEL_251;
        }
        if ((unint64_t)(v76 - &v83[v78]) < 0x20) {
          goto LABEL_251;
        }
        uint64_t v86 = (v85 >> 2) + 1;
        uint64_t v87 = 4 * (v86 & 0x7FFFFFFFFFFFFFF8);
        unint64_t v88 = &v76[-v87];
        v84 -= v87;
        uint64_t v89 = &v83[4 * v79 - 16];
        double v90 = v76 - 16;
        uint64_t v91 = v86 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v92 = *(_OWORD *)v90;
          *((_OWORD *)v89 - 1) = *((_OWORD *)v90 - 1);
          *(_OWORD *)uint64_t v89 = v92;
          v89 -= 32;
          v90 -= 32;
          v91 -= 8;
        }
        while (v91);
        long long v76 = v88;
        if (v86 != (v86 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_251:
          do
          {
            int v93 = *((_DWORD *)v76 - 1);
            v76 -= 4;
            *((_DWORD *)v84 - 1) = v93;
            v84 -= 4;
          }
          while (v76 != v77);
        }
        goto LABEL_116;
      }
      unint64_t v83 = 0;
      unint64_t v84 = (char *)(4 * v79);
      *(_DWORD *)(4 * v79) = v70;
      uint64_t v69 = 4 * v79 + 4;
      if (v76 != v77) {
        goto LABEL_110;
      }
LABEL_116:
      long long v196 = v84;
      uint64_t v197 = (char *)v69;
      long long v198 = &v83[4 * v82];
      if (v77) {
        operator delete(v77);
      }
LABEL_91:
      uint64_t v48 = a1;
      uint64_t v197 = (char *)v69;
      v67 += 42;
    }
    while (1)
    {
      uint64_t v95 = *((void *)&v195 + 1);
      if (!*((void *)&v195 + 1)) {
        goto LABEL_212;
      }
      unint64_t v96 = (((void)v194 - (unint64_t)v193[1]) << 7) - 1;
      if ((void *)v194 == v193[1]) {
        unint64_t v96 = 0;
      }
      unsigned int v191 = *(_DWORD *)(*(void *)((char *)v193[1]
                                   + (((unint64_t)(v195 + *((void *)&v195 + 1) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                       + 4 * ((v195 + *((void *)&v195 + 1) - 1) & 0x3FF));
      unsigned int v192 = v191;
      uint64_t v97 = *(void *)(v48 + 4928) + 80 * v191;
      int v181 = *(_DWORD *)(v97 + 40);
      int v183 = *(_DWORD *)(v97 + 52);
      int v184 = *(_DWORD *)(v97 + 48);
      uint64_t v182 = *(void *)(v97 + 56);
      double v98 = *(double *)(v97 + 64);
      --*((void *)&v195 + 1);
      if (v96 - (v95 + (void)v195) + 1 >= 0x800)
      {
        operator delete(*(void **)(v194 - 8));
        *(void *)&long long v194 = v194 - 8;
      }
      BOOL v99 = v184 == -1 || v183 == 0x7FFFFFFF;
      BOOL v100 = v99 || v182 == 0x7FFFFFFFFFFFFFFFLL;
      BOOL v101 = !v100;
      if (!v100 && sub_101F954(v48, a2, v191, a1 + 4560) != -1) {
        goto LABEL_212;
      }
      if (sub_1026380(a2, v192)) {
        break;
      }
      sub_10262C4((uint64_t)a2, (int *)&v192, (uint64_t)&v199);
      int v103 = (char *)v199;
      uint64_t v102 = v200;
      if (v199 != v200)
      {
        uint64_t v104 = (char *)v199;
        while (!*(unsigned char *)(*(void *)v104 + 40))
        {
          v104 += 8;
          if (v104 == v200)
          {
            while (1)
            {
              long long v105 = *(unsigned __int16 **)(*(void *)v103 + 96);
              unsigned int v106 = *(unsigned __int16 **)(*(void *)v103 + 104);
              if (v105 != v106)
              {
                while (v57 != *v105)
                {
                  if (++v105 == v106)
                  {
                    long long v105 = *(unsigned __int16 **)(*(void *)v103 + 104);
                    break;
                  }
                }
              }
              if (v105 != v106) {
                goto LABEL_175;
              }
              v103 += 8;
              if (v103 == v200) {
                goto LABEL_118;
              }
            }
          }
        }
        while (1)
        {
LABEL_149:
          unsigned int v107 = *(_DWORD *)(*(void *)v103 + 8);
          uint64_t v108 = *(void *)(v48 + 4928) + 80 * v107;
          *(_DWORD *)(v108 + 40) = v181;
          *(_DWORD *)(v108 + 48) = v184;
          *(_DWORD *)(v108 + 52) = v183;
          *(void *)(v108 + 56) = v182;
          *(_DWORD *)(v108 + 4) = v191;
          *(void *)(v108 + 32) = *(void *)v103;
          uint64_t v109 = (char *)v193[1];
          unint64_t v110 = (((void)v194 - (unint64_t)v193[1]) << 7) - 1;
          BOOL v9 = (void *)v194 == v193[1];
          *(_DWORD *)uint64_t v108 = v107;
          if (v9) {
            unint64_t v110 = 0;
          }
          uint64_t v111 = *((void *)&v195 + 1);
          unint64_t v112 = *((void *)&v195 + 1) + v195;
          if (v110 == *((void *)&v195 + 1) + (void)v195)
          {
            sub_102315C((uint64_t)v193);
            uint64_t v111 = *((void *)&v195 + 1);
            uint64_t v109 = (char *)v193[1];
            unint64_t v112 = v195 + *((void *)&v195 + 1);
            uint64_t v48 = a1;
          }
          *(_DWORD *)(*(void *)&v109[(v112 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v112 & 0x3FF)) = v107;
          *((void *)&v195 + 1) = v111 + 1;
          unsigned int v113 = v197;
          if (v197 >= v198) {
            break;
          }
          *(_DWORD *)uint64_t v197 = v107;
          uint64_t v197 = v113 + 4;
          v103 += 8;
          if (v103 == v102) {
            goto LABEL_118;
          }
        }
        long long v114 = (char *)v196;
        int64_t v115 = v197 - (unsigned char *)v196;
        uint64_t v116 = (v197 - (unsigned char *)v196) >> 2;
        unint64_t v117 = v116 + 1;
        if ((unint64_t)(v116 + 1) >> 62) {
          sub_2E00();
        }
        uint64_t v118 = v198 - (unsigned char *)v196;
        if ((v198 - (unsigned char *)v196) >> 1 > v117) {
          unint64_t v117 = v118 >> 1;
        }
        if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v119 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v119 = v117;
        }
        if (v119)
        {
          if (v119 >> 62) {
            sub_188D718();
          }
          long long v120 = (char *)operator new(4 * v119);
          long long v121 = &v120[4 * v116];
          *(_DWORD *)long long v121 = v107;
          uint64_t v122 = (uint64_t)(v121 + 4);
          if (v113 == v114)
          {
LABEL_171:
            long long v196 = v121;
            uint64_t v197 = (char *)v122;
            long long v198 = &v120[4 * v119];
            if (v114) {
              operator delete(v114);
            }
            uint64_t v48 = a1;
            uint64_t v197 = (char *)v122;
            v103 += 8;
            if (v103 == v102) {
              goto LABEL_118;
            }
            goto LABEL_149;
          }
        }
        else
        {
          long long v120 = 0;
          long long v121 = (char *)(4 * v116);
          *(_DWORD *)(4 * v116) = v107;
          uint64_t v122 = 4 * v116 + 4;
          if (v113 == v114) {
            goto LABEL_171;
          }
        }
        unint64_t v123 = v113 - 4 - v114;
        if (v123 < 0x2C) {
          goto LABEL_252;
        }
        if ((unint64_t)(v113 - &v120[v115]) < 0x20) {
          goto LABEL_252;
        }
        uint64_t v124 = (v123 >> 2) + 1;
        uint64_t v125 = 4 * (v124 & 0x7FFFFFFFFFFFFFF8);
        long long v126 = &v113[-v125];
        v121 -= v125;
        uint64_t v127 = &v120[4 * v116 - 16];
        uint64_t v128 = v113 - 16;
        uint64_t v129 = v124 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v130 = *(_OWORD *)v128;
          *((_OWORD *)v127 - 1) = *((_OWORD *)v128 - 1);
          *(_OWORD *)uint64_t v127 = v130;
          v127 -= 32;
          v128 -= 32;
          v129 -= 8;
        }
        while (v129);
        unsigned int v113 = v126;
        if (v124 != (v124 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_252:
          do
          {
            int v131 = *((_DWORD *)v113 - 1);
            v113 -= 4;
            *((_DWORD *)v121 - 1) = v131;
            v121 -= 4;
          }
          while (v113 != v114);
        }
        goto LABEL_171;
      }
LABEL_175:
      if (v103 == v200 || (v132 = *(void *)v103, int v133 = *(_DWORD *)(*(void *)v103 + 156), v133 == 0x7FFFFFFF))
      {
LABEL_118:
        int v94 = 16;
      }
      else
      {
        unsigned int v134 = *(_DWORD *)(v132 + 8);
        LODWORD(__p[0]) = v134;
        uint64_t v135 = *(void *)(v48 + 4928);
        unint64_t v136 = (_DWORD *)(v135 + 80 * v134);
        if (v136[10] == 0x7FFFFFFF)
        {
          v136[10] = v133 + v181;
          if (v101)
          {
            int v137 = *(_DWORD *)(v132 + 120);
            if (v137 != -1)
            {
              int v138 = *(_DWORD *)(v132 + 124);
              if (v138 != 0x7FFFFFFF)
              {
                uint64_t v139 = *(void *)(v132 + 128);
                if (v139 != 0x7FFFFFFFFFFFFFFFLL)
                {
                  unint64_t v140 = (v137 + v184) | ((unint64_t)(v138 + v183) << 32);
                  uint64_t v141 = v135 + 80 * v134;
                  *(void *)(v141 + 48) = v140;
                  *(void *)(v141 + 56) = v139 + v182;
                }
              }
            }
          }
          uint64_t v142 = v135 + 80 * v134;
          *(_DWORD *)(v142 + 4) = v191;
          *(void *)(v142 + 32) = *(void *)v103;
          unint64_t v143 = (char *)v193[1];
          unint64_t v144 = (((void)v194 - (unint64_t)v193[1]) << 7) - 1;
          BOOL v9 = (void *)v194 == v193[1];
          _DWORD *v136 = __p[0];
          *(double *)(v142 + 64) = v98 + *(double *)(v132 + 160);
          if (v9) {
            unint64_t v145 = 0;
          }
          else {
            unint64_t v145 = v144;
          }
          uint64_t v146 = *((void *)&v195 + 1);
          unint64_t v147 = *((void *)&v195 + 1) + v195;
          if (v145 == *((void *)&v195 + 1) + (void)v195)
          {
            sub_102315C((uint64_t)v193);
            uint64_t v146 = *((void *)&v195 + 1);
            unint64_t v143 = (char *)v193[1];
            unint64_t v147 = v195 + *((void *)&v195 + 1);
          }
          *(_DWORD *)(*(void *)&v143[(v147 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v147 & 0x3FF)) = __p[0];
          *((void *)&v195 + 1) = v146 + 1;
          sub_745A4((uint64_t)&v196, __p);
          int v94 = 0;
        }
        else
        {
          int v94 = 17;
        }
      }
      if (v94 == 17)
      {
LABEL_212:
        uint64_t v158 = (void **)v193[1];
        double v159 = (void **)v194;
        *((void *)&v195 + 1) = 0;
        unint64_t v160 = v194 - (unint64_t)v193[1];
        if ((unint64_t)v194 - (unint64_t)v193[1] >= 0x11)
        {
          do
          {
            operator delete(*v158);
            double v159 = (void **)v194;
            uint64_t v158 = (void **)((char *)v193[1] + 8);
            v193[1] = v158;
            unint64_t v160 = v194 - (void)v158;
          }
          while ((void)v194 - (void)v158 > 0x10uLL);
        }
        unint64_t v161 = v160 >> 3;
        if (v161 == 1)
        {
          uint64_t v162 = 512;
        }
        else
        {
          if (v161 != 2) {
            goto LABEL_219;
          }
          uint64_t v162 = 1024;
        }
        *(void *)&long long v195 = v162;
LABEL_219:
        if (v158 != v159)
        {
          do
          {
            uint64_t v163 = *v158++;
            operator delete(v163);
          }
          while (v158 != v159);
          if ((void *)v194 != v193[1]) {
            *(void *)&long long v194 = v194 + (((unint64_t)v193[1] - v194 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
        }
        if (v193[0]) {
          operator delete(v193[0]);
        }
        uint64_t v46 = (uint64_t)a2;
        goto LABEL_82;
      }
    }
    sub_101D984(v48, &v191, (uint64_t)__p);
    if (v190 > v175)
    {
LABEL_210:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_212;
    }
    uint64_t v148 = sub_5231C((uint64_t)&(*a3)[6 * v57]);
    long long v149 = (const void **)v148;
    int v150 = *(char *)(v148 + 23);
    if (v150 >= 0) {
      size_t v151 = *(unsigned __int8 *)(v148 + 23);
    }
    else {
      size_t v151 = *(void *)(v148 + 8);
    }
    unint64_t v152 = v151 + 17;
    if (v151 + 17 >= 0x7FFFFFFFFFFFFFF8) {
      sub_188D690();
    }
    if (v152 >= 0x17)
    {
      uint64_t v154 = (v152 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v152 | 7) != 0x17) {
        uint64_t v154 = v152 | 7;
      }
      uint64_t v155 = v154 + 1;
      p_dst = (void **)operator new(v154 + 1);
      size_t v187 = v151 + 17;
      unint64_t v188 = v155 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      size_t v187 = 0;
      unint64_t v188 = 0;
      __dst = 0;
      p_dst = (void **)&__dst;
      HIBYTE(v188) = v151 + 17;
      if (!v151)
      {
LABEL_207:
        strcpy((char *)p_dst + v151, " PathGraph: Input");
        int v157 = sub_101E990(v48, (int8x8_t ***)__p, a2, a4, 0, (uint64_t)&__dst);
        if (SHIBYTE(v188) < 0) {
          operator delete(__dst);
        }
        v176 += v157;
        goto LABEL_210;
      }
    }
    if (v150 >= 0) {
      long long v156 = v149;
    }
    else {
      long long v156 = *v149;
    }
    memmove(p_dst, v156, v151);
    goto LABEL_207;
  }
LABEL_5:
  uint64_t v8 = (std::string *)*a3;
  unsigned int v7 = (std::string *)a3[1];
  if (*a3 != (uint64_t *)v7)
  {
    do
    {
      sub_EA7B08((char *)v8, (uint64_t)&v209);
      sub_EA7C00((char *)v8, (uint64_t)&v202);
      BOOL v9 = v213 == v214 || v207 == v208;
      if (v9)
      {
        if ((v213 == v214) != (v207 == v208)) {
          goto LABEL_29;
        }
        goto LABEL_14;
      }
      if (v210 != v204) {
        goto LABEL_29;
      }
      if ((void)v209)
      {
        unint64_t v12 = *((void *)&v209 + 1);
        unint64_t v13 = sub_EB04C4((void *)v209);
        BOOL v14 = v12 < v13;
        uint64_t v15 = v202;
        if (!v202)
        {
          if (v12 < v13) {
            goto LABEL_29;
          }
          goto LABEL_14;
        }
      }
      else
      {
        BOOL v14 = 0;
        BOOL v10 = 0;
        uint64_t v15 = v202;
        if (!v202) {
          goto LABEL_46;
        }
      }
      unint64_t v16 = v203;
      unint64_t v17 = sub_EB04C4(v15);
      if (v16 < v17 && v14)
      {
        uint64_t v19 = sub_EB0624((void *)v209, *((unint64_t *)&v209 + 1));
        if (v19 != sub_EB0624(v202, v203)) {
          goto LABEL_29;
        }
LABEL_14:
        BOOL v10 = 0;
        unint64_t v11 = v207;
        if (v207) {
          goto LABEL_47;
        }
        goto LABEL_48;
      }
      if (v14 == v16 < v17) {
        goto LABEL_14;
      }
      do
      {
LABEL_29:
        uint64_t v20 = (int **)sub_EB0624((void *)v209, *((unint64_t *)&v209 + 1));
        BOOL v10 = sub_3EB32C(a1 + 4248, v20);
        if (v10) {
          break;
        }
        unint64_t v21 = v210;
        ++*((void *)&v209 + 1);
        while (1)
        {
          BOOL v22 = v213;
          if (v21 >= ((v214 - v213) >> 4) - 1) {
            break;
          }
          uint64_t v23 = &v213[16 * v21];
          if ((void)v209)
          {
            unint64_t v24 = *((void *)&v209 + 1);
            unint64_t v25 = sub_EB04C4((void *)v209);
            BOOL v26 = v24 < v25;
            long long v27 = *(void **)v23;
            if (!*(void *)v23)
            {
              if (v24 < v25) {
                break;
              }
              goto LABEL_32;
            }
          }
          else
          {
            long long v27 = *(void **)v23;
            if (!*(void *)v23) {
              goto LABEL_32;
            }
            BOOL v26 = 0;
          }
          unint64_t v28 = &v22[16 * v21];
          unint64_t v31 = *((void *)v28 + 1);
          unint64_t v29 = (unint64_t *)(v28 + 8);
          unint64_t v30 = v31;
          unint64_t v32 = sub_EB04C4(v27);
          if (v31 < v32 && v26)
          {
            uint64_t v34 = sub_EB0624((void *)v209, *((unint64_t *)&v209 + 1));
            if (v34 != sub_EB0624(*(void **)v23, *v29)) {
              break;
            }
          }
          else if ((v26 ^ (v30 < v32)))
          {
            break;
          }
LABEL_32:
          unint64_t v21 = v210 + 1;
          unint64_t v210 = v21;
          long long v209 = v211[v21];
        }
      }
      while (!sub_10209C4((uint64_t)&v209, (uint64_t)&v202));
LABEL_46:
      unint64_t v11 = v207;
      if (v207)
      {
LABEL_47:
        uint64_t v208 = v11;
        operator delete(v11);
      }
LABEL_48:
      if (v205)
      {
        uint64_t v206 = v205;
        operator delete(v205);
      }
      if (v213)
      {
        uint64_t v214 = v213;
        operator delete(v213);
      }
      if (v211)
      {
        uint64_t v212 = v211;
        operator delete(v211);
      }
      if (!v10)
      {
        uint64_t v35 = (void **)nullsub_1(v8);
        if (!sub_101F308(*v35, v35[1], a1)) {
          sub_EB6F70(a4, v8, 0);
        }
      }
      v8 += 2;
    }
    while (v8 != v7);
  }
  if (v4[297])
  {
    uint64_t v36 = sub_40EFE8((uint64_t)a4);
    uint64_t v37 = sub_52058((uint64_t)a4);
    if (v36 != v37)
    {
      uint64_t v38 = v37;
      do
      {
        long long v39 = (std::string *)sub_5231C(v36);
        std::string::append(v39, " PathGraph: Input Passthrough");
        v36 += 48;
      }
      while (v36 != v38);
    }
  }
  uint64_t v40 = sub_638A44((uint64_t)a2);
  long long v41 = *(char ***)(v40 + 72);
  unint64_t v42 = *(char ***)(v40 + 80);
  if (v41 != v42)
  {
    unint64_t v43 = v41 + 12;
    do
    {
      long long v45 = (char **)(*(void *)(a1 + 5128) + 24 * *((unsigned int *)v43 - 24));
      if (v43 != v45) {
        sub_BDDEDC(v45, *v43, v43[1], (v43[1] - *v43) >> 1);
      }
      unint64_t v44 = v43 + 11;
      v43 += 23;
    }
    while (v44 != v42);
  }
}

void sub_1018B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,void *a46,uint64_t a47)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v48 = a46;
    if (!a46) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v48 = a46;
    if (!a46) {
      goto LABEL_3;
    }
  }
  operator delete(v48);
  _Unwind_Resume(exception_object);
}

void sub_1018BF8(_Unwind_Exception *a1)
{
  sub_39EB70(v1 - 248);
  sub_39EB70(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_1018C18(uint64_t a1, uint64_t a2, int64x2_t *a3)
{
  unsigned int v192 = (unsigned char *)(a1 + 4472);
  if (!*(unsigned char *)(a1 + 4664)) {
    return;
  }
  BOOL v4 = (unsigned int *)a2;
  uint64_t v223 = 0;
  uint64_t v224 = 0;
  uint64_t v225 = 0;
  unint64_t v6 = sub_1026194(a2);
  unint64_t v7 = sub_10261A8(v4);
  unint64_t v8 = v7;
  int v220 = 0;
  uint64_t v221 = 0;
  uint64_t v222 = 0;
  if (v7)
  {
    if (v7 >> 62) {
      sub_2E00();
    }
    BOOL v9 = operator new(4 * v7);
    BOOL v10 = (char *)&v9[v8];
    int v220 = v9;
    uint64_t v222 = v10;
    bzero(v9, 4 * v8);
    uint64_t v221 = v10;
  }
  uint64_t v217 = 0;
  uint64_t v218 = 0;
  long long v219 = 0;
  if (v6)
  {
    if (v6 >> 62) {
      sub_2E00();
    }
    unint64_t v11 = (char *)operator new(4 * v6);
    unint64_t v12 = &v11[4 * v6];
    uint64_t v217 = v11;
    long long v219 = v12;
    memset_pattern16(v11, &unk_20F1CB0, 4 * v6);
    uint64_t v218 = v12;
  }
  uint64_t v214 = 0;
  unint64_t v215 = 0;
  unint64_t v216 = 0;
  sub_3D110((uint64_t)&v214, v6);
  unint64_t v13 = (void *)(a1 + 4928);
  sub_10179D8((char **)(a1 + 4928), v6);
  __n128 __p = 0;
  v203[0] = 0;
  v203[1] = 0;
  sub_1021288(&v212, v6, (uint64_t)&__p);
  if (__p)
  {
    v203[0] = __p;
    operator delete(__p);
  }
  double v14 = *(double *)(a1 + 4688) * (double)(int)sub_1026098((uint64_t)v4);
  if (v14 >= 0.0)
  {
    if (v14 < 4.50359963e15)
    {
      uint64_t v15 = (uint64_t)(v14 + v14) + 1;
LABEL_17:
      double v14 = (double)(v15 >> 1);
    }
  }
  else if (v14 > -4.50359963e15)
  {
    uint64_t v15 = (uint64_t)(v14 + v14);
    if (v15 >= 1) {
      --v15;
    }
    goto LABEL_17;
  }
  int v190 = a3;
  int v16 = sub_1026098((uint64_t)v4);
  int v17 = (int)v14;
  if (*(_DWORD *)(a1 + 4696) + v16 > (int)v14) {
    int v17 = *(_DWORD *)(a1 + 4696) + v16;
  }
  int v191 = v17;
  int v193 = *(_DWORD *)(a1 + 4668);
  if (v193)
  {
    unsigned int v18 = 0;
    unsigned int v198 = 0;
    unsigned int __val = 0;
    uint64_t v19 = (uint64_t *)(a1 + 5024);
    int v199 = v4;
    unsigned int v200 = (*(double *)(a1 + 4680) * (double)v6 + 0.5);
    do
    {
      ++*(_DWORD *)(a1 + 4208);
      if (v198 > *(_DWORD *)(a1 + 4672)) {
        break;
      }
      unsigned int v201 = v18;
      uint64_t v20 = *(void *)(a1 + 4936);
      uint64_t v21 = *(void *)(a1 + 4928);
      while (v20 != v21)
      {
        BOOL v22 = *(void **)(v20 - 72);
        if (v22)
        {
          *(void *)(v20 - 64) = v22;
          operator delete(v22);
        }
        v20 -= 80;
      }
      *(void *)(a1 + 4936) = v21;
      *(void *)(a1 + 5056) = *(void *)(a1 + 5048);
      *(void *)(a1 + 5032) = *(void *)(a1 + 5024);
      *(_DWORD *)(a1 + 5072) = 0;
      uint64_t v23 = v213;
      unsigned int v18 = v201;
      if (v212 != v213)
      {
        unint64_t v24 = v213 - (unsigned char *)v212 - 24;
        unint64_t v25 = v212;
        if (v24 < 0x18) {
          goto LABEL_245;
        }
        unint64_t v26 = v24 / 0x18 + 1;
        unint64_t v25 = (char *)v212 + 24 * (v26 & 0x1FFFFFFFFFFFFFFELL);
        long long v27 = (uint64_t *)((char *)v212 + 24);
        uint64_t v28 = v26 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          uint64_t v29 = *v27;
          *(v27 - 2) = *(v27 - 3);
          v27[1] = v29;
          v27 += 6;
          v28 -= 2;
        }
        while (v28);
        if (v26 != (v26 & 0x1FFFFFFFFFFFFFFELL))
        {
LABEL_245:
          do
          {
            v25[1] = *v25;
            v25 += 3;
          }
          while (v25 != v23);
        }
      }
      if (v218 - (unsigned char *)v217 >= 1) {
        memset_pattern16(v217, &unk_20F1CB0, 4 * (((unint64_t)(v218 - (unsigned char *)v217) >> 2) - ((unint64_t)(v218 - (unsigned char *)v217) > 3)) + 4);
      }
      unint64_t v215 = 0;
      unint64_t v30 = (int **)sub_68EB4((uint64_t)v4);
      unint64_t v31 = *v30;
      unint64_t v32 = v30[1];
      while (v31 != v32)
      {
        int v33 = *v31;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7600, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7600))
        {
          qword_24F75F8 = 0;
          xmmword_24F75D8 = 0u;
          unk_24F75E8 = 0u;
          xmmword_24F75B8 = 0u;
          unk_24F75C8 = 0u;
          xmmword_24F7598 = 0u;
          unk_24F75A8 = 0u;
          xmmword_24F7578 = 0u;
          unk_24F7588 = 0u;
          xmmword_24F7558 = 0u;
          unk_24F7568 = 0u;
          xmmword_24F7548 = 0u;
          sub_101F8E0((uint64_t)&xmmword_24F7548);
          __cxa_guard_release(&qword_24F7600);
        }
        uint64_t v34 = *(unint64_t **)(a1 + 4936);
        uint64_t v35 = *(unint64_t **)(a1 + 4928);
        unint64_t v36 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v34 - (char *)v35) >> 4);
        unint64_t v37 = *(void *)&v33 | 0xFFFFFFFF00000000;
        unint64_t v38 = *(void *)(a1 + 4944);
        if ((unint64_t)v34 >= v38)
        {
          unint64_t v40 = v36 + 1;
          if (v36 + 1 > 0x333333333333333) {
            sub_2E00();
          }
          unint64_t v41 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v38 - (void)v35) >> 4);
          if (2 * v41 > v40) {
            unint64_t v40 = 2 * v41;
          }
          if (v41 >= 0x199999999999999) {
            unint64_t v42 = 0x333333333333333;
          }
          else {
            unint64_t v42 = v40;
          }
          if (v42)
          {
            if (v42 > 0x333333333333333) {
              sub_188D718();
            }
            unint64_t v43 = (char *)operator new(80 * v42);
          }
          else
          {
            unint64_t v43 = 0;
          }
          unint64_t v44 = &v43[16 * (((char *)v34 - (char *)v35) >> 4)];
          *(void *)unint64_t v44 = v37;
          *((void *)v44 + 1) = 0;
          *((void *)v44 + 2) = 0;
          *((void *)v44 + 3) = 0;
          long long v45 = &v43[80 * v42];
          *((void *)v44 + 4) = &xmmword_24F7548;
          *((_DWORD *)v44 + 10) = 0;
          long long v39 = v44 + 80;
          *((void *)v44 + 7) = 0;
          *((void *)v44 + 8) = 0;
          *((void *)v44 + 6) = 0;
          v44[72] = 0;
          if (v34 == v35)
          {
            *(void *)(a1 + 4928) = v44;
            *(void *)(a1 + 4936) = v39;
            *(void *)(a1 + 4944) = v45;
            unint64_t v13 = (void *)(a1 + 4928);
          }
          else
          {
            uint64_t v46 = 0;
            unint64_t v13 = (void *)(a1 + 4928);
            do
            {
              uint64_t v47 = &v44[v46 * 8];
              uint64_t v48 = &v34[v46];
              *((void *)v47 - 10) = v34[v46 - 10];
              *((void *)v47 - 8) = 0;
              *((void *)v47 - 7) = 0;
              *(_OWORD *)(v47 - 72) = *(_OWORD *)&v34[v46 - 9];
              *((void *)v47 - 7) = v34[v46 - 7];
              *(v48 - 9) = 0;
              *(v48 - 8) = 0;
              *(v48 - 7) = 0;
              long long v49 = *(_OWORD *)&v34[v46 - 6];
              long long v50 = *(_OWORD *)&v34[v46 - 4];
              *(_OWORD *)(v47 - 23) = *(_OWORD *)((char *)&v34[v46 - 2] - 7);
              *((_OWORD *)v47 - 3) = v49;
              *((_OWORD *)v47 - 2) = v50;
              v46 -= 10;
            }
            while (&v34[v46] != v35);
            uint64_t v34 = *(unint64_t **)(a1 + 4928);
            double v51 = *(unint64_t **)(a1 + 4936);
            *(void *)(a1 + 4928) = &v44[v46 * 8];
            *(void *)(a1 + 4936) = v39;
            *(void *)(a1 + 4944) = v45;
            while (v51 != v34)
            {
              uint64_t v52 = (void *)*(v51 - 9);
              if (v52)
              {
                *(v51 - 8) = (unint64_t)v52;
                operator delete(v52);
              }
              v51 -= 10;
            }
          }
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          *uint64_t v34 = v37;
          v34[1] = 0;
          v34[2] = 0;
          v34[3] = 0;
          v34[4] = (unint64_t)&xmmword_24F7548;
          *((_DWORD *)v34 + 10) = 0;
          long long v39 = v34 + 10;
          v34[7] = 0;
          v34[8] = 0;
          v34[6] = 0;
          *((unsigned char *)v34 + 72) = 0;
        }
        *(void *)(a1 + 4936) = v39;
        unint64_t v53 = v215;
        if (v215 == v216 << 6)
        {
          if ((uint64_t)(v215 + 1) < 0) {
            goto LABEL_237;
          }
          if (v215 >= 0x3FFFFFFFFFFFFFFFLL)
          {
            uint64_t v54 = 0x7FFFFFFFFFFFFFFFLL;
            if (v215 >= 0x7FFFFFFFFFFFFFFFLL)
            {
              unint64_t v53 = -1;
              goto LABEL_93;
            }
          }
          else
          {
            uint64_t v54 = v216 << 7;
            if (v216 << 7 <= v215 + 64) {
              uint64_t v54 = v215 + 64;
            }
            if (v54 < 0) {
LABEL_237:
            }
              sub_2E00();
          }
          unint64_t v55 = ((unint64_t)(v54 - 1) >> 6) + 1;
          int v56 = (uint64_t *)operator new(8 * v55);
          uint64_t v57 = v214;
          unint64_t v58 = (v53 - 1) >> 6;
          if (v53 < 0x41) {
            unint64_t v58 = 0;
          }
          v56[v58] = 0;
          if (v53 > 0x3F || (v53 & 0x3F) != 0)
          {
            int v59 = 0;
            int v60 = 0;
            unint64_t v61 = v56;
            uint64_t v62 = v57;
            do
            {
              uint64_t v63 = 1 << v59;
              if ((*v62 >> v60)) {
                uint64_t v64 = *v61 | v63;
              }
              else {
                uint64_t v64 = *v61 & ~v63;
              }
              *unint64_t v61 = v64;
              v62 += v60 == 63;
              if (v60 == 63) {
                int v60 = 0;
              }
              else {
                ++v60;
              }
              v61 += v59 == 63;
              if (v59 == 63) {
                int v59 = 0;
              }
              else {
                ++v59;
              }
            }
            while (v60 != (v53 & 0x3F) || v62 != &v57[v53 >> 6]);
          }
          uint64_t v214 = (char *)v56;
          unint64_t v216 = v55;
          if (v57)
          {
            operator delete(v57);
            unint64_t v53 = v215;
          }
        }
LABEL_93:
        unint64_t v215 = v53 + 1;
        *(void *)&v214[(v53 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v53);
        LODWORD(__p) = 0;
        uint64_t v65 = *(void *)(a1 + 5048);
        if (v36 >= (unint64_t)((*(void *)(a1 + 5056) - v65) >> 2)
          || *(_DWORD *)(v65 + 4 * v36) == -1)
        {
          sub_ED33A0(a1 + 5024, v36, (unsigned int *)&__p);
          unsigned int v18 = v201;
        }
        else
        {
          sub_ED3660((uint64_t *)(a1 + 5024), v36, &__p);
          unsigned int v18 = v201;
        }
        v31 += 42;
      }
      ++v198;
      if (*(_DWORD *)(a1 + 5072))
      {
        unsigned int v66 = 0;
        BOOL v4 = v199;
        while (1)
        {
          uint64_t v67 = *(unsigned int **)(a1 + 5024);
          unsigned int v68 = v67[1];
          unsigned int v211 = *v67;
          unsigned int v210 = *(_DWORD *)(*(void *)(a1 + 4928) + 80 * v211);
          *(_DWORD *)(*(void *)(a1 + 5048) + 4 * *v67) = -1;
          unsigned int v69 = *(_DWORD *)(a1 + 5072) - 1;
          *(_DWORD *)(a1 + 5072) = v69;
          if (v69)
          {
            *(void *)uint64_t v67 = *(void *)&v67[2 * v69];
            uint64_t v70 = *(unsigned int **)(a1 + 5024);
            *(_DWORD *)(*(void *)(a1 + 5048) + 4 * *v70) = 0;
            unsigned int v71 = *(_DWORD *)(a1 + 5072);
            if (v71 >= 2)
            {
              int v72 = 0;
              unsigned int v73 = 0;
              unsigned int v74 = 1;
              do
              {
                unsigned int v75 = v72 + 5;
                if (v75 >= v71) {
                  unsigned int v76 = v71;
                }
                else {
                  unsigned int v76 = v75;
                }
                if (v74 >= v76) {
                  break;
                }
                uint64_t v77 = v73;
                unsigned int v78 = v70[2 * v73 + 1];
                uint64_t v79 = &v70[2 * v74 + 1];
                unsigned int v73 = -1;
                signed int v80 = v78;
                do
                {
                  signed int v82 = *v79;
                  v79 += 2;
                  signed int v81 = v82;
                  if (v82 < v80)
                  {
                    signed int v80 = v81;
                    unsigned int v73 = v74;
                  }
                  ++v74;
                }
                while (v76 != v74);
                if (v73 >= v71) {
                  break;
                }
                uint64_t v83 = 2 * v73;
                unint64_t v84 = &v70[v83];
                uint64_t v85 = 8 * v77;
                uint64_t v86 = *(void *)&v70[v83];
                *unint64_t v84 = *(unsigned int *)((char *)v70 + v85);
                v84[1] = v78;
                *(void *)((char *)v70 + v85) = v86;
                uint64_t v70 = *(unsigned int **)(a1 + 5024);
                uint64_t v87 = *(void *)(a1 + 5048);
                uint64_t v88 = 4 * v70[v83];
                uint64_t v89 = 4 * *(unsigned int *)((char *)v70 + v85);
                LODWORD(v85) = *(_DWORD *)(v87 + v88);
                *(_DWORD *)(v87 + v88) = *(_DWORD *)(v87 + v89);
                *(_DWORD *)(v87 + v89) = v85;
                int v72 = 4 * v73;
                unsigned int v74 = (4 * v73) | 1;
                unsigned int v71 = *(_DWORD *)(a1 + 5072);
              }
              while (v74 < v71);
            }
          }
          *(void *)(a1 + 5032) -= 8;
          *(void *)&v214[((unint64_t)v211 >> 3) & 0x1FFFFFF8] |= 1 << v211;
          double v90 = v217;
          int v91 = *((_DWORD *)v217 + v210);
          if (!v91) {
            goto LABEL_102;
          }
          *((_DWORD *)v217 + v210) = v91 - 1;
          ++v66;
          ++*(_DWORD *)(a1 + 4216);
          if (v66 > v200)
          {
            ++*(_DWORD *)(a1 + 4212);
            goto LABEL_23;
          }
          int v92 = sub_101F954(a1, v4, v211, a1 + 4760);
          if (v92 != -1)
          {
            unsigned int v93 = v211;
            while (v93 != v92)
            {
              int v94 = (unsigned int *)(*v13 + 80 * v93);
              uint64_t v95 = *v94;
              unsigned int v93 = v94[1];
              ++*((_DWORD *)v217 + v95);
              unint64_t v96 = (char *)v212 + 24 * v95;
              uint64_t v97 = *(unsigned int **)v96;
              double v98 = (unsigned int *)*((void *)v96 + 1);
              while (v97 != v98)
              {
                unint64_t v99 = *v97;
                if (((*(void *)&v214[(v99 >> 3) & 0x1FFFFFF8] >> v99) & 1) == 0)
                {
                  BOOL v100 = v97 + 1;
                  uint64_t v101 = *(void *)(a1 + 5048);
                  if (v99 >= (*(void *)(a1 + 5056) - v101) >> 2
                    || (uint64_t v102 = *(unsigned int *)(v101 + 4 * v99), v102 == -1))
                  {
                    sub_ED33A0(a1 + 5024, v99, v100);
                  }
                  else
                  {
                    uint64_t v103 = *v19 + 8 * v102;
                    signed int v104 = *(_DWORD *)(v103 + 4);
                    *(_DWORD *)(v103 + 4) = *v100;
                    if ((int)*v100 >= v104)
                    {
                      unsigned int v121 = (4 * v102) | 1;
                      unsigned int v122 = *(_DWORD *)(a1 + 5072);
                      if (v121 < v122)
                      {
                        int v123 = 4 * v102;
                        do
                        {
                          unsigned int v124 = v123 + 5;
                          if (v124 >= v122) {
                            unsigned int v125 = v122;
                          }
                          else {
                            unsigned int v125 = v124;
                          }
                          if (v121 >= v125) {
                            break;
                          }
                          uint64_t v126 = *v19;
                          uint64_t v127 = v102;
                          int v128 = *(_DWORD *)(*v19 + 8 * v102 + 4);
                          uint64_t v129 = (int *)(*v19 + 8 * v121 + 4);
                          LODWORD(v102) = -1;
                          int v130 = v128;
                          do
                          {
                            int v132 = *v129;
                            v129 += 2;
                            int v131 = v132;
                            if (v132 < v130)
                            {
                              int v130 = v131;
                              LODWORD(v102) = v121;
                            }
                            ++v121;
                          }
                          while (v125 != v121);
                          if (v102 >= v122) {
                            break;
                          }
                          uint64_t v133 = 8 * v102;
                          unsigned int v134 = (_DWORD *)(v126 + v133);
                          uint64_t v135 = 8 * v127;
                          uint64_t v136 = *(void *)(v126 + v133);
                          *unsigned int v134 = *(_DWORD *)(v126 + v135);
                          v134[1] = v128;
                          *(void *)(v126 + v135) = v136;
                          uint64_t v137 = *(void *)(a1 + 5024);
                          uint64_t v138 = *(void *)(a1 + 5048);
                          uint64_t v139 = 4 * *(unsigned int *)(v137 + v133);
                          uint64_t v140 = 4 * *(unsigned int *)(v137 + v135);
                          int v141 = *(_DWORD *)(v138 + v139);
                          *(_DWORD *)(v138 + v139) = *(_DWORD *)(v138 + v140);
                          *(_DWORD *)(v138 + v140) = v141;
                          int v123 = 4 * v102;
                          unsigned int v121 = (4 * v102) | 1;
                          unsigned int v122 = *(_DWORD *)(a1 + 5072);
                        }
                        while (v121 < v122);
                      }
                    }
                    else if (v102)
                    {
                      uint64_t v105 = *v19;
                      do
                      {
                        unsigned int v106 = v102 - 1;
                        uint64_t v107 = (v102 - 1) >> 2;
                        uint64_t v108 = v105 + 8 * v107;
                        int v111 = *(_DWORD *)(v108 + 4);
                        uint64_t v109 = (_DWORD *)(v108 + 4);
                        int v110 = v111;
                        uint64_t v112 = v105 + 8 * v102;
                        int v115 = *(_DWORD *)(v112 + 4);
                        unsigned int v113 = (_DWORD *)(v112 + 4);
                        int v114 = v115;
                        if (v110 < v115) {
                          break;
                        }
                        uint64_t v116 = 8 * v102;
                        int v117 = *(_DWORD *)(v105 + v116);
                        *(_DWORD *)(v105 + v116) = *(_DWORD *)(v105 + 8 * v107);
                        *(_DWORD *)(v105 + 8 * v107) = v117;
                        *unsigned int v113 = v110;
                        *uint64_t v109 = v114;
                        uint64_t v105 = *(void *)(a1 + 5024);
                        uint64_t v118 = *(void *)(a1 + 5048);
                        uint64_t v102 = 4 * *(unsigned int *)(v105 + v116);
                        uint64_t v119 = 4 * *(unsigned int *)(v105 + 8 * v107);
                        int v120 = *(_DWORD *)(v118 + v102);
                        *(_DWORD *)(v118 + v102) = *(_DWORD *)(v118 + v119);
                        *(_DWORD *)(v118 + v119) = v120;
                        LODWORD(v102) = v106 >> 2;
                      }
                      while (v106 >= 4);
                    }
                  }
                }
                v97 += 2;
              }
            }
            BOOL v4 = v199;
            goto LABEL_101;
          }
          if (sub_1026380(v4, v210)) {
            break;
          }
          sub_10262C4((uint64_t)v4, (int *)&v210, (uint64_t)&v223);
          uint64_t v142 = v223;
          unint64_t v143 = v224;
          if (v223 != (uint64_t *)v224)
          {
            while (1)
            {
              uint64_t v144 = *v142;
              if (*(_DWORD *)(*v142 + 156) != 0x7FFFFFFF
                && *(_DWORD *)(v144 + 120) != -1
                && *(_DWORD *)(v144 + 124) != 0x7FFFFFFF
                && *(void *)(v144 + 128) != 0x7FFFFFFFFFFFFFFFLL
                && !sub_101F584(a1, v144, v211))
              {
                uint64_t v146 = *v142;
                uint64_t v147 = *(unsigned int *)*v142;
                uint64_t v148 = (unsigned char *)(*(void *)(a1 + 6792) + 2 * v147);
                if (!v148[1] || *v148) {
                  break;
                }
              }
LABEL_151:
              if (++v142 == (uint64_t *)v143)
              {
                BOOL v4 = v199;
                unint64_t v13 = (void *)(a1 + 4928);
                goto LABEL_101;
              }
            }
            int v149 = *(_DWORD *)(v146 + 156);
            uint64_t v196 = *(void *)(a1 + 4928);
            unsigned int v197 = v211;
            int v195 = *(_DWORD *)(v196 + 80 * v211 + 40);
            LODWORD(v145) = v220[v147];
            double v150 = (double)v145;
            *(double *)&unint64_t v151 = pow(*(double *)(a1 + 4712) * (double)v145, *(long double *)(a1 + 4720));
            double v152 = *(double *)&v151;
            LOBYTE(v151) = *(unsigned char *)(*(void *)(a1 + 6816) + v147);
            double v153 = pow(*(double *)(a1 + 4728) * v150, *(long double *)(a1 + 4736)) * (double)v151;
            if ((*(unsigned char *)(v146 + 150) & 0x10) != 0) {
              double v154 = 1.0;
            }
            else {
              double v154 = 0.0;
            }
            double v155 = (v152 + 1.0 + v153 + pow(*(double *)(a1 + 4744) * v150, *(long double *)(a1 + 4752)) * v154)
                 * (double)v149;
            if (v155 >= 0.0)
            {
              long long v156 = (void **)(a1 + 4928);
              if (v155 < 4.50359963e15)
              {
                uint64_t v157 = (uint64_t)(v155 + v155) + 1;
                goto LABEL_169;
              }
            }
            else
            {
              long long v156 = (void **)(a1 + 4928);
              if (v155 > -4.50359963e15)
              {
                uint64_t v157 = (uint64_t)(v155 + v155);
                if (v157 >= 1) {
                  --v157;
                }
LABEL_169:
                double v155 = (double)(v157 >> 1);
              }
            }
            LODWORD(v208[0]) = v68 + (int)v155;
            uint64_t v158 = v196 + 80 * v197;
            uint64_t v159 = *(void *)(v146 + 128) + *(void *)(v158 + 56);
            unint64_t v160 = (*(_DWORD *)(v158 + 48) + *(_DWORD *)(v146 + 120)) | ((unint64_t)(*(_DWORD *)(v146 + 124) + *(_DWORD *)(v158 + 52)) << 32);
            double v161 = *(double *)(v158 + 64);
            double v162 = *(double *)(v146 + 160);
            uint64_t v163 = *(unsigned int *)(v146 + 8);
            unint64_t v164 = *(void *)(a1 + 4936);
            LODWORD(v207.__r_.__value_.__l.__data_) = -858993459 * ((v164 - v196) >> 4);
            __n128 __p = (void *)__PAIR64__(v197, v163);
            v203[1] = 0;
            uint64_t v204 = 0;
            v203[0] = 0;
            *(void *)&long long v205 = *v142;
            DWORD2(v205) = v195 + v149;
            *(void *)uint64_t v206 = v160;
            *(void *)&v206[8] = v159;
            *(double *)&v206[16] = v161 + v162;
            v206[24] = 0;
            if (v164 >= *(void *)(a1 + 4944))
            {
              unint64_t v167 = sub_1020F40(v156, (uint64_t)&__p);
              unint64_t v168 = v203[0];
              *(void *)(a1 + 4936) = v167;
              if (v168)
              {
                v203[1] = v168;
                operator delete(v168);
              }
            }
            else
            {
              *(void *)unint64_t v164 = __p;
              *(void *)(v164 + 8) = 0;
              *(void *)(v164 + 16) = 0;
              *(void *)(v164 + 24) = 0;
              *(_OWORD *)(v164 + 8) = *(_OWORD *)v203;
              *(void *)(v164 + 24) = v204;
              v203[0] = 0;
              v203[1] = 0;
              uint64_t v204 = 0;
              long long v165 = *(_OWORD *)&v206[9];
              long long v166 = *(_OWORD *)v206;
              *(_OWORD *)(v164 + 32) = v205;
              *(_OWORD *)(v164 + 48) = v166;
              *(_OWORD *)(v164 + 57) = v165;
              *(void *)(a1 + 4936) = v164 + 80;
            }
            sub_3EC418((uint64_t)v212 + 24 * v163, &v207, (int *)v208);
            unint64_t v169 = v215;
            if (v215 == v216 << 6)
            {
              if ((uint64_t)(v215 + 1) < 0) {
                sub_2E00();
              }
              if (v215 > 0x3FFFFFFFFFFFFFFELL)
              {
                unint64_t v170 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else if (v216 << 7 <= (v215 & 0xFFFFFFFFFFFFFFC0) + 64)
              {
                unint64_t v170 = (v215 & 0xFFFFFFFFFFFFFFC0) + 64;
              }
              else
              {
                unint64_t v170 = v216 << 7;
              }
              sub_3D110((uint64_t)&v214, v170);
              unint64_t v169 = v215;
            }
            unint64_t v215 = v169 + 1;
            *(void *)&v214[(v169 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v169);
            if (v90[v163])
            {
              uint64_t v171 = *(void *)(a1 + 5048);
              if (LODWORD(v207.__r_.__value_.__l.__data_) >= (unint64_t)((*(void *)(a1 + 5056) - v171) >> 2)
                || *(_DWORD *)(v171 + 4 * LODWORD(v207.__r_.__value_.__l.__data_)) == -1)
              {
                sub_ED33A0(a1 + 5024, v207.__r_.__value_.__l.__data_, (unsigned int *)v208);
              }
              else
              {
                sub_ED3660((uint64_t *)(a1 + 5024), v207.__r_.__value_.__l.__data_, v208);
              }
            }
            goto LABEL_151;
          }
LABEL_101:
          unsigned int v18 = v201;
LABEL_102:
          if (!*(_DWORD *)(a1 + 5072)) {
            goto LABEL_23;
          }
        }
        sub_101D984(a1, &v211, (uint64_t)&__p);
        if (!*v192 || (sub_101E0FC(a1, &__p) & 1) != 0)
        {
          uint64_t v172 = (unsigned int **)__p;
          unint64_t v173 = (unsigned int **)v203[0];
          if (__p != v203[0])
          {
            uint64_t v174 = v220;
            do
            {
              int v175 = *v172++;
              ++v174[*v175];
            }
            while (v172 != v173);
          }
          if (*(_DWORD *)&v206[4] != *(_DWORD *)v206)
          {
            double v176 = *(double *)(a1 + 4704) * (double)*(int *)v206;
            if (v176 >= 0.0)
            {
              if (v176 < 4.50359963e15)
              {
                uint64_t v177 = (uint64_t)(v176 + v176) + 1;
                goto LABEL_201;
              }
            }
            else if (v176 > -4.50359963e15)
            {
              uint64_t v177 = (uint64_t)(v176 + v176);
              if (v177 >= 1) {
                --v177;
              }
LABEL_201:
              double v176 = (double)(v177 >> 1);
            }
            if (*(int *)&v206[4] <= (int)v176 && *(_DWORD *)v206 <= v191)
            {
              std::to_string(&v207, __val);
              long long v179 = std::string::insert(&v207, 0, " PathGraph: Pen-");
              long long v180 = *(_OWORD *)&v179->__r_.__value_.__l.__data_;
              std::string::size_type v209 = v179->__r_.__value_.__r.__words[2];
              *(_OWORD *)uint64_t v208 = v180;
              v179->__r_.__value_.__l.__size_ = 0;
              v179->__r_.__value_.__r.__words[2] = 0;
              v179->__r_.__value_.__r.__words[0] = 0;
              BOOL v181 = sub_101E990(a1, (int8x8_t ***)&__p, v4, v190, 0, (uint64_t)v208);
              if (SHIBYTE(v209) < 0)
              {
                operator delete(v208[0]);
                if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
                  goto LABEL_216;
                }
LABEL_209:
                if (!v181) {
                  goto LABEL_210;
                }
LABEL_217:
                ++v18;
                *(int32x2_t *)(a1 + 4200) = vadd_s32(*(int32x2_t *)(a1 + 4200), (int32x2_t)0x100000001);
                unsigned int v198 = 0;
                char v182 = 0;
                if (v18 < *(_DWORD *)(a1 + 4676)) {
                  goto LABEL_218;
                }
              }
              else
              {
                if ((SHIBYTE(v207.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_209;
                }
LABEL_216:
                operator delete(v207.__r_.__value_.__l.__data_);
                if (v181) {
                  goto LABEL_217;
                }
LABEL_210:
                unsigned int v198 = 0;
                char v182 = 0;
                if (v18 < *(_DWORD *)(a1 + 4676)) {
                  goto LABEL_218;
                }
              }
              int v183 = __p;
              if (!__p) {
                goto LABEL_213;
              }
LABEL_212:
              v203[0] = v183;
              operator delete(v183);
              goto LABEL_213;
            }
          }
        }
LABEL_218:
        char v182 = 1;
        int v183 = __p;
        if (__p) {
          goto LABEL_212;
        }
LABEL_213:
        if ((v182 & 1) == 0) {
          break;
        }
      }
      else
      {
        BOOL v4 = v199;
      }
LABEL_23:
      ++__val;
    }
    while (__val != v193);
  }
  int v184 = v212;
  if (v212)
  {
    unint64_t v185 = v213;
    unint64_t v186 = v212;
    if (v213 != v212)
    {
      size_t v187 = v213;
      do
      {
        uint64_t v189 = (void *)*((void *)v187 - 3);
        v187 -= 24;
        unint64_t v188 = v189;
        if (v189)
        {
          *((void *)v185 - 2) = v188;
          operator delete(v188);
        }
        unint64_t v185 = v187;
      }
      while (v187 != v184);
      unint64_t v186 = v212;
    }
    uint64_t v213 = v184;
    operator delete(v186);
  }
  if (v214) {
    operator delete(v214);
  }
  if (v217) {
    operator delete(v217);
  }
  if (v220) {
    operator delete(v220);
  }
  if (v223)
  {
    uint64_t v224 = (unsigned int **)v223;
    operator delete(v223);
  }
}

void sub_1019D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47)
{
  __cxa_guard_abort(&qword_24F7600);
  sub_36094(&a47);
  uint64_t v52 = *(void **)(v47 - 248);
  if (v52)
  {
    operator delete(v52);
    long long v49 = *(void **)(v47 - 224);
    if (v49)
    {
LABEL_8:
      operator delete(v49);
      long long v50 = *(void **)(v47 - 200);
      if (v50)
      {
LABEL_9:
        operator delete(v50);
        double v51 = *(void **)(v47 - 176);
        if (v51)
        {
LABEL_10:
          *(void *)(v47 - 168) = v51;
          operator delete(v51);
          _Unwind_Resume(a1);
        }
LABEL_5:
        _Unwind_Resume(a1);
      }
LABEL_4:
      double v51 = *(void **)(v47 - 176);
      if (v51) {
        goto LABEL_10;
      }
      goto LABEL_5;
    }
  }
  else
  {
    long long v49 = *(void **)(v47 - 224);
    if (v49) {
      goto LABEL_8;
    }
  }
  long long v50 = *(void **)(v47 - 200);
  if (v50) {
    goto LABEL_9;
  }
  goto LABEL_4;
}

void sub_1019F28(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4 = (int64x2_t *)a4;
  if (*(unsigned char *)(a3 + 4))
  {
    unint64_t v8 = (__n128 *)sub_40EFE8(a4);
    BOOL v9 = (__n128 *)sub_52058((uint64_t)v4);
    if (sub_102071C(v8, v9, a3)) {
      return;
    }
  }
  *(void *)(a1 + 5056) = *(void *)(a1 + 5048);
  *(void *)(a1 + 5032) = *(void *)(a1 + 5024);
  *(_DWORD *)(a1 + 5072) = 0;
  uint64_t v10 = sub_1026194((uint64_t)a2);
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)(a1 + 4928);
    do
    {
      *(void *)(v12 + 16) = *(void *)(v12 + 8);
      *(_DWORD *)(v12 + 40) = 0x7FFFFFFF;
      *(void *)(v12 + 48) = 0x7FFFFFFFFFFFFFFFLL;
      *(void *)(v12 + 56) = 0x7FFFFFFFFFFFFFFFLL;
      *(unsigned char *)(v12 + 72) = 0;
      *(_DWORD *)uint64_t v12 = v11;
      *(_DWORD *)(v12 + 4) = -1;
      v12 += 80;
      ++v11;
    }
    while (v10 != v11);
  }
  uint64_t v13 = sub_68EB4((uint64_t)a2);
  double v14 = *(unsigned int **)v13;
  uint64_t v15 = *(unsigned int **)(v13 + 8);
  if (*(unsigned int **)v13 != v15)
  {
    do
    {
      while (1)
      {
        unint64_t v16 = *v14;
        *(_DWORD *)(*(void *)(a1 + 4928) + 80 * v16 + 40) = 0;
        uint64_t v17 = *(void *)(a1 + 4928) + 80 * v16;
        *(void *)(v17 + 48) = 0;
        *(void *)(v17 + 56) = 0;
        LODWORD(v68[0]) = 0;
        uint64_t v18 = *(void *)(a1 + 5048);
        if (v16 < (*(void *)(a1 + 5056) - v18) >> 2 && *(_DWORD *)(v18 + 4 * v16) != -1) {
          break;
        }
        sub_ED33A0(a1 + 5024, v16, (unsigned int *)v68);
        v14 += 42;
        if (v14 == v15) {
          goto LABEL_12;
        }
      }
      sub_ED3660((uint64_t *)(a1 + 5024), v16, v68);
      v14 += 42;
    }
    while (v14 != v15);
  }
LABEL_12:
  unsigned int v71 = 0;
  int v72 = 0;
  uint64_t v73 = 0;
  if (!*(_DWORD *)(a1 + 5072)) {
    goto LABEL_67;
  }
  uint64_t v64 = v4;
  while (2)
  {
    uint64_t v19 = *(unsigned int **)(a1 + 5024);
    unsigned int v20 = *v19;
    unsigned int v65 = v19[1];
    unsigned int v69 = v20;
    unsigned int v70 = v20;
    *(_DWORD *)(*(void *)(a1 + 5048) + 4 * v20) = -1;
    unsigned int v21 = *(_DWORD *)(a1 + 5072) - 1;
    *(_DWORD *)(a1 + 5072) = v21;
    if (v21)
    {
      *(void *)uint64_t v19 = *(void *)&v19[2 * v21];
      BOOL v22 = *(unsigned int **)(a1 + 5024);
      *(_DWORD *)(*(void *)(a1 + 5048) + 4 * *v22) = 0;
      unsigned int v23 = *(_DWORD *)(a1 + 5072);
      if (v23 >= 2)
      {
        int v24 = 0;
        unsigned int v25 = 0;
        unsigned int v26 = 1;
        do
        {
          unsigned int v27 = v24 + 5;
          if (v27 >= v23) {
            unsigned int v28 = v23;
          }
          else {
            unsigned int v28 = v27;
          }
          if (v26 >= v28) {
            break;
          }
          uint64_t v29 = v25;
          unsigned int v30 = v22[2 * v25 + 1];
          unint64_t v31 = &v22[2 * v26 + 1];
          unsigned int v25 = -1;
          signed int v32 = v30;
          do
          {
            signed int v34 = *v31;
            v31 += 2;
            signed int v33 = v34;
            if (v34 < v32)
            {
              signed int v32 = v33;
              unsigned int v25 = v26;
            }
            ++v26;
          }
          while (v28 != v26);
          if (v25 >= v23) {
            break;
          }
          uint64_t v35 = 2 * v25;
          unint64_t v36 = &v22[v35];
          uint64_t v37 = 8 * v29;
          uint64_t v38 = *(void *)&v22[v35];
          *unint64_t v36 = *(unsigned int *)((char *)v22 + v37);
          v36[1] = v30;
          *(void *)((char *)v22 + v37) = v38;
          BOOL v22 = *(unsigned int **)(a1 + 5024);
          uint64_t v39 = *(void *)(a1 + 5048);
          uint64_t v40 = 4 * v22[v35];
          uint64_t v41 = 4 * *(unsigned int *)((char *)v22 + v37);
          LODWORD(v37) = *(_DWORD *)(v39 + v40);
          *(_DWORD *)(v39 + v40) = *(_DWORD *)(v39 + v41);
          *(_DWORD *)(v39 + v41) = v37;
          int v24 = 4 * v25;
          unsigned int v26 = (4 * v25) | 1;
          unsigned int v23 = *(_DWORD *)(a1 + 5072);
        }
        while (v26 < v23);
      }
    }
    *(void *)(a1 + 5032) -= 8;
    if (sub_1026380(a2, v70))
    {
      sub_101D984(a1, &v69, (uint64_t)v68);
      char v67 = 20;
      strcpy(__p, "PathGraph: AvoidPath");
      BOOL v60 = sub_101E990(a1, (int8x8_t ***)v68, a2, v4, 1, (uint64_t)__p);
      if (v67 < 0) {
        operator delete(*(void **)__p);
      }
      if (v68[0])
      {
        v68[1] = v68[0];
        operator delete(v68[0]);
      }
      if (v60)
      {
        ++*(_DWORD *)(a1 + 4220);
        ++*(_DWORD *)(a1 + 4200);
      }
      break;
    }
    sub_10262C4((uint64_t)a2, (int *)&v70, (uint64_t)&v71);
    unint64_t v43 = v71;
    unint64_t v42 = v72;
    while (v43 != v42)
    {
      uint64_t v50 = *v43;
      if (*(_DWORD *)(*v43 + 156) == 0x7FFFFFFF) {
        goto LABEL_33;
      }
      if (*(_DWORD *)(v50 + 120) == -1) {
        goto LABEL_33;
      }
      if (*(_DWORD *)(v50 + 124) == 0x7FFFFFFF) {
        goto LABEL_33;
      }
      if (*(void *)(v50 + 128) == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_33;
      }
      int v51 = *(_DWORD *)(v50 + 148);
      if ((*(_DWORD *)a3 & (v51 & 0xFFDFFFFF | (*(unsigned __int8 *)(v50 + 143) << 21))) != 0) {
        goto LABEL_33;
      }
      if (*(unsigned char *)(a3 + 5))
      {
        if (*(unsigned char *)(v50 + 136)) {
          BOOL v52 = 0;
        }
        else {
          BOOL v52 = (*(_DWORD *)(v50 + 148) & 0x8000) == 0;
        }
        if (!v52) {
          goto LABEL_33;
        }
      }
      else if ((v51 & 0x8000) != 0)
      {
        goto LABEL_33;
      }
      if (!sub_101F584(a1, v50, v20))
      {
        unint64_t v53 = (unsigned int *)*v43;
        if (!*(unsigned char *)(a3 + 7) || !*(unsigned char *)(*(void *)(a1 + 6816) + *v53))
        {
          unint64_t v54 = v53[2];
          uint64_t v55 = 31;
          if (!*(unsigned char *)(a3 + 6)) {
            uint64_t v55 = 39;
          }
          signed int v56 = v53[v55] + v65;
          LODWORD(v68[0]) = v56;
          uint64_t v62 = *(void *)(a1 + 4928);
          uint64_t v63 = (unsigned int *)(v62 + 80 * v54);
          signed int v57 = v63[10];
          if (v57 == 0x7FFFFFFF || v56 < v57)
          {
            uint64_t v59 = *(void *)(a1 + 5048);
            unsigned int v61 = v54;
            if (v54 >= (*(void *)(a1 + 5056) - v59) >> 2 || *(_DWORD *)(v59 + 4 * v54) == -1) {
              sub_ED33A0(a1 + 5024, v54, (unsigned int *)v68);
            }
            else {
              sub_ED3660((uint64_t *)(a1 + 5024), v54, v68);
            }
            v63[10] = v68[0];
            uint64_t v44 = *(void *)(a1 + 4928) + 80 * v20;
            uint64_t v45 = (*(_DWORD *)(v44 + 48) + *(_DWORD *)(*v43 + 120));
            uint64_t v46 = (*(_DWORD *)(*v43 + 124) + *(_DWORD *)(v44 + 52));
            uint64_t v47 = *(void *)(*v43 + 128) + *(void *)(v44 + 56);
            uint64_t v48 = v45 | (v46 << 32);
            uint64_t v49 = v62 + 80 * v61;
            *(void *)(v49 + 48) = v48;
            *(void *)(v49 + 56) = v47;
            *(_DWORD *)(v49 + 4) = v20;
            *(void *)(v49 + 32) = *v43;
            unsigned int *v63 = v61;
          }
          BOOL v4 = v64;
        }
      }
LABEL_33:
      ++v43;
    }
    if (*(_DWORD *)(a1 + 5072)) {
      continue;
    }
    break;
  }
LABEL_67:
  if (v71)
  {
    int v72 = v71;
    operator delete(v71);
  }
}

void sub_101A444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22)
{
  if (a20 < 0)
  {
    operator delete(__p);
    int v24 = a21;
    if (!a21)
    {
LABEL_3:
      unsigned int v25 = *(void **)(v22 - 112);
      if (!v25) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int v24 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  operator delete(v24);
  unsigned int v25 = *(void **)(v22 - 112);
  if (!v25) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  *(void *)(v22 - 104) = v25;
  operator delete(v25);
  _Unwind_Resume(exception_object);
}

void sub_101A4B4()
{
  long long v1 = 0u;
  long long v2 = 0u;
  int v3 = 1065353216;
  sub_557BC((uint64_t)v0);
}

void sub_101D704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,void *a59)
{
  sub_5450C((uint64_t)&a51);
  sub_5450C((uint64_t)&a46);
  BOOL v60 = a59;
  if (a59)
  {
    do
    {
      uint64_t v62 = (void *)*v60;
      uint64_t v63 = (void *)v60[6];
      if (v63)
      {
        v60[7] = v63;
        operator delete(v63);
      }
      uint64_t v64 = (void *)v60[3];
      if (v64)
      {
        v60[4] = v64;
        operator delete(v64);
      }
      operator delete(v60);
      BOOL v60 = v62;
    }
    while (v62);
  }
  unsigned int v61 = __p;
  __n128 __p = 0;
  if (v61) {
    operator delete(v61);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101D96C(uint64_t a1)
{
  return a1 + 4176;
}

uint64_t sub_101D978(uint64_t a1)
{
  return a1 + 6864;
}

void sub_101D984(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v4 = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = -1;
  *(_DWORD *)(a3 + 52) = 0x7FFFFFFF;
  *(void *)(a3 + 56) = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 4928);
  uint64_t v7 = v6 + 80 * v5;
  *(_DWORD *)(a3 + 48) = *(_DWORD *)(v7 + 40);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v7 + 48);
  uint64_t v33 = a1;
  do
  {
    uint64_t v8 = *(void *)(v6 + 80 * v5 + 32);
    unint64_t v9 = *(void *)(a3 + 16);
    if ((unint64_t)v4 < v9)
    {
      *(void *)BOOL v4 = v8;
      v4 += 8;
      goto LABEL_3;
    }
    uint64_t v10 = *(char **)a3;
    uint64_t v11 = (uint64_t)&v4[-*(void *)a3];
    uint64_t v12 = v11 >> 3;
    unint64_t v13 = (v11 >> 3) + 1;
    if (v13 >> 61) {
      sub_2E00();
    }
    uint64_t v14 = v9 - (void)v10;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 61) {
        sub_188D718();
      }
      unint64_t v16 = operator new(8 * v15);
      uint64_t v17 = &v16[8 * v12];
      *uint64_t v17 = v8;
      uint64_t v18 = (uint64_t)(v17 + 1);
      if (v4 == v10) {
        goto LABEL_14;
      }
LABEL_18:
      unint64_t v19 = v4 - 8 - v10;
      if (v19 >= 0x168)
      {
        if (&v16[v11 - 8 - (v19 & 0xFFFFFFFFFFFFFFF8)] > &v16[v11 - 8])
        {
          unsigned int v20 = v4;
        }
        else if (&v4[-(v19 & 0xFFFFFFFFFFFFFFF8) - 8] > v4 - 8)
        {
          unsigned int v20 = v4;
        }
        else if ((unint64_t)(v4 - v16 - v11) >= 0x20)
        {
          uint64_t v22 = (v19 >> 3) + 1;
          uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
          unsigned int v20 = &v4[-v23];
          uint64_t v17 = (void *)((char *)v17 - v23);
          int v24 = &v16[8 * v12 - 16];
          unsigned int v25 = (long long *)(v4 - 16);
          uint64_t v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v27 = *v25;
            *(v24 - 1) = *(v25 - 1);
            *int v24 = v27;
            v24 -= 2;
            v25 -= 2;
            v26 -= 4;
          }
          while (v26);
          if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_21:
            BOOL v4 = *(char **)a3;
            *(void *)a3 = v17;
            *(void *)(a3 + 8) = v18;
            *(void *)(a3 + 16) = &v16[8 * v15];
            if (!v4) {
              goto LABEL_16;
            }
LABEL_15:
            operator delete(v4);
            goto LABEL_16;
          }
        }
        else
        {
          unsigned int v20 = v4;
        }
      }
      else
      {
        unsigned int v20 = v4;
      }
      do
      {
        uint64_t v21 = *((void *)v20 - 1);
        v20 -= 8;
        *--uint64_t v17 = v21;
      }
      while (v20 != v10);
      goto LABEL_21;
    }
    unint64_t v16 = 0;
    uint64_t v17 = (void *)(8 * v12);
    *(void *)(8 * v12) = v8;
    uint64_t v18 = 8 * v12 + 8;
    if (v4 != v10) {
      goto LABEL_18;
    }
LABEL_14:
    *(void *)a3 = v17;
    *(void *)(a3 + 8) = v18;
    *(void *)(a3 + 16) = &v16[8 * v15];
    if (v4) {
      goto LABEL_15;
    }
LABEL_16:
    BOOL v4 = (char *)v18;
    a1 = v33;
LABEL_3:
    *(void *)(a3 + 8) = v4;
    uint64_t v6 = *(void *)(a1 + 4928);
    uint64_t v5 = *(unsigned int *)(v6 + 80 * v5 + 4);
  }
  while (*(_DWORD *)(v6 + 80 * v5 + 4) != -1);
  unint64_t v28 = *(void *)a3;
  if (*(char **)a3 != v4)
  {
    uint64_t v29 = v4 - 8;
    if ((unint64_t)(v4 - 8) > v28)
    {
      unint64_t v30 = v28 + 8;
      do
      {
        uint64_t v31 = *(void *)(v30 - 8);
        *(void *)(v30 - 8) = *(void *)v29;
        *(void *)uint64_t v29 = v31;
        v29 -= 8;
        BOOL v32 = v30 >= (unint64_t)v29;
        v30 += 8;
      }
      while (!v32);
      unint64_t v28 = *(void *)a3;
      BOOL v4 = *(char **)(a3 + 8);
    }
  }
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(*(void *)v28 + 4);
  *(_DWORD *)(a3 + 28) = *(_DWORD *)(*((void *)v4 - 1) + 8);
  sub_101DC58(a1, (unsigned int ***)a3);
}

void sub_101DC34(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_101DC58(uint64_t a1, unsigned int ***a2)
{
  uint64_t v62 = (char **)(a1 + 5000);
  int v3 = *(unsigned __int16 **)(a1 + 5000);
  BOOL v4 = *(unsigned __int16 **)(a1 + 5008);
  if (v3 != v4)
  {
    do
    {
      unsigned int v5 = *v3++;
      *(void *)(*(void *)(a1 + 4976) + (((unint64_t)v5 >> 3) & 0x1FF8)) &= ~(1 << v5);
      *(_DWORD *)(*(void *)(a1 + 4952) + 4 * v5) = 0x7FFFFFFF;
    }
    while (v3 != v4);
    int v3 = (unsigned __int16 *)*v62;
  }
  *(void *)(a1 + 5008) = v3;
  uint64_t v6 = *a2;
  unsigned int v61 = a2[1];
  if (*a2 != v61)
  {
    uint64_t v7 = (void *)(a1 + 4976);
    uint64_t v64 = (void *)(a1 + 4976);
    while (1)
    {
      uint64_t v8 = *(void *)(a1 + 5128) + 24 * **v6;
      unint64_t v9 = *(unsigned __int16 **)v8;
      unsigned int v65 = *(unsigned __int16 **)(v8 + 8);
      uint64_t v63 = v6;
      if (*(unsigned __int16 **)v8 != v65) {
        break;
      }
LABEL_6:
      if (++v6 == v61) {
        goto LABEL_59;
      }
    }
    while (1)
    {
      unint64_t v10 = *v9;
      uint64_t v14 = *(char **)(a1 + 4960);
      unint64_t v15 = *(char **)(a1 + 4952);
      unint64_t v16 = (v14 - v15) >> 2;
      if (v16 <= v10) {
        break;
      }
LABEL_11:
      uint64_t v11 = *(void *)(*v7 + 8 * (v10 >> 6));
      if ((v11 & (1 << v10)) == 0)
      {
        *(void *)(*v7 + 8 * (v10 >> 6)) = v11 | (1 << v10);
        long long v27 = *(char **)(a1 + 5008);
        unint64_t v28 = *(void *)(a1 + 5016);
        if ((unint64_t)v27 < v28)
        {
          *(_WORD *)long long v27 = v10;
          uint64_t v29 = (uint64_t)(v27 + 2);
LABEL_58:
          uint64_t v7 = v64;
          *(void *)(a1 + 5008) = v29;
          unint64_t v10 = *v9;
          goto LABEL_12;
        }
        unint64_t v30 = *v62;
        uint64_t v31 = v27 - *v62;
        if (v31 <= -3) {
          sub_2E00();
        }
        uint64_t v32 = v31 >> 1;
        unint64_t v33 = v28 - (void)v30;
        if (v33 <= (v31 >> 1) + 1) {
          unint64_t v34 = v32 + 1;
        }
        else {
          unint64_t v34 = v33;
        }
        if (v33 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v35 = v34;
        }
        if (v35)
        {
          if (v35 < 0) {
            goto LABEL_68;
          }
          unint64_t v36 = operator new(2 * v35);
          uint64_t v37 = &v36[2 * v32];
          *uint64_t v37 = v10;
          uint64_t v29 = (uint64_t)(v37 + 1);
          if (v27 == v30) {
            goto LABEL_56;
          }
LABEL_50:
          unint64_t v46 = v27 - 2 - v30;
          if (v46 < 0x1E) {
            goto LABEL_72;
          }
          if (v27 - v36 - (v31 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
            goto LABEL_72;
          }
          uint64_t v47 = (v46 >> 1) + 1;
          unint64_t v48 = 2 * (v47 & 0xFFFFFFFFFFFFFFF0);
          uint64_t v49 = &v27[-v48];
          uint64_t v37 = (_WORD *)((char *)v37 - v48);
          uint64_t v50 = &v36[2 * v32 - 16];
          int v51 = v27 - 16;
          unint64_t v52 = v47 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            long long v53 = *(_OWORD *)v51;
            *(v50 - 1) = *((_OWORD *)v51 - 1);
            *uint64_t v50 = v53;
            v50 -= 2;
            v51 -= 32;
            v52 -= 16;
          }
          while (v52);
          long long v27 = v49;
          if (v47 != (v47 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_72:
            do
            {
              __int16 v54 = *((_WORD *)v27 - 1);
              v27 -= 2;
              *--uint64_t v37 = v54;
            }
            while (v27 != v30);
          }
        }
        else
        {
          unint64_t v36 = 0;
          uint64_t v37 = (_WORD *)(2 * v32);
          *(_WORD *)(2 * v32) = v10;
          uint64_t v29 = 2 * v32 + 2;
          if (v27 != v30) {
            goto LABEL_50;
          }
        }
LABEL_56:
        *(void *)(a1 + 5000) = v37;
        *(void *)(a1 + 5008) = v29;
        *(void *)(a1 + 5016) = &v36[2 * v35];
        if (v30) {
          operator delete(v30);
        }
        goto LABEL_58;
      }
LABEL_12:
      uint64_t v12 = *(void *)(a1 + 4952);
      int v13 = *(_DWORD *)(v12 + 4 * v10);
      if (v13 == 0x7FFFFFFF) {
        int v13 = 0;
      }
      *(_DWORD *)(v12 + 4 * v10) = v13 + (*v6)[39];
      if (++v9 == v65) {
        goto LABEL_6;
      }
    }
    unint64_t v17 = v10 + 1;
    unint64_t v18 = v10 + 1 - v16;
    uint64_t v19 = *(void *)(a1 + 4968);
    if (v18 <= (v19 - (uint64_t)v14) >> 2)
    {
      if (v17 != v16)
      {
        memset_pattern16(*(void **)(a1 + 4960), &unk_20B8FB0, 4 * v18);
        v14 += 4 * v18;
      }
      uint64_t v6 = v63;
      *(void *)(a1 + 4960) = v14;
      goto LABEL_10;
    }
    uint64_t v20 = v19 - (void)v15;
    if (v20 >> 1 > v17) {
      unint64_t v17 = v20 >> 1;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    if (v17 >> 62) {
LABEL_68:
    }
      sub_188D718();
    uint64_t v21 = 4 * v17;
    uint64_t v22 = (char *)operator new(4 * v17);
    uint64_t v23 = &v22[4 * v16];
    size_t v24 = 4 * v18;
    memset_pattern16(v23, &unk_20B8FB0, v24);
    if (v14 == v15)
    {
      uint64_t v26 = &v22[4 * v16];
      goto LABEL_47;
    }
    unint64_t v25 = v14 - 4 - v15;
    if (v25 >= 0x2C)
    {
      uint64_t v26 = &v22[4 * v16];
      if ((unint64_t)(v15 - v22) >= 0x20)
      {
        uint64_t v38 = (v25 >> 2) + 1;
        uint64_t v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v40 = &v14[-v39];
        uint64_t v26 = &v23[-v39];
        uint64_t v41 = &v22[4 * v16 - 16];
        unint64_t v42 = v14 - 16;
        uint64_t v43 = v38 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v44 = *(_OWORD *)v42;
          *((_OWORD *)v41 - 1) = *((_OWORD *)v42 - 1);
          *(_OWORD *)uint64_t v41 = v44;
          v41 -= 32;
          v42 -= 32;
          v43 -= 8;
        }
        while (v43);
        uint64_t v14 = v40;
        if (v38 == (v38 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_46;
        }
      }
    }
    else
    {
      uint64_t v26 = &v22[4 * v16];
    }
    do
    {
      int v45 = *((_DWORD *)v14 - 1);
      v14 -= 4;
      *((_DWORD *)v26 - 1) = v45;
      v26 -= 4;
    }
    while (v14 != v15);
LABEL_46:
    uint64_t v14 = v15;
LABEL_47:
    *(void *)(a1 + 4952) = v26;
    *(void *)(a1 + 4960) = &v23[v24];
    *(void *)(a1 + 4968) = &v22[v21];
    uint64_t v6 = v63;
    uint64_t v7 = v64;
    if (v14) {
      operator delete(v14);
    }
LABEL_10:
    sub_A3E96C((uint64_t)v7, *v9 + 1, 0);
    unint64_t v10 = *v9;
    goto LABEL_11;
  }
LABEL_59:
  *((_DWORD *)a2 + 13) = 0;
  uint64_t v55 = *(unsigned __int16 **)(a1 + 5000);
  signed int v56 = *(unsigned __int16 **)(a1 + 5008);
  if (v55 != v56)
  {
    int v57 = 0;
    do
    {
      int v58 = *(_DWORD *)(*(void *)(a1 + 4952) + 4 * *v55);
      if (v58 != 0x7FFFFFFF)
      {
        if (v57 >= v58) {
          uint64_t v59 = (int *)a2 + 13;
        }
        else {
          uint64_t v59 = (int *)(*(void *)(a1 + 4952) + 4 * *v55);
        }
        int v57 = *v59;
        *((_DWORD *)a2 + 13) = v57;
      }
      ++v55;
    }
    while (v55 != v56);
  }
}

uint64_t sub_101E0FC(uint64_t a1, void *a2)
{
  uint64_t v12 = a1;
  uint64_t v2 = 1;
  uint64_t v3 = a2[1] - *a2;
  if (v3)
  {
    uint64_t v6 = 0;
    uint64_t v7 = v3 >> 3;
    do
    {
      uint64_t v8 = *(unsigned int **)(*a2 + 8 * v6);
      uint64_t v9 = *(void *)(a1 + 6792) + 2 * *v8;
      if (*((unsigned char *)v8 + 40))
      {
        *(_WORD *)uint64_t v9 = 257;
      }
      else if (*(unsigned char *)(v9 + 1))
      {
        if (!*(unsigned char *)v9) {
          return 0;
        }
      }
      else
      {
        ++*(_DWORD *)(a1 + 4228);
        *(void *)(a1 + 4232) += *((void *)v8 + 16);
        sub_101E25C(&v12, a2, v6, (uint64_t)v13);
        int v10 = sub_101E818(a1, v13);
        *(unsigned char *)uint64_t v9 = v10 ^ 1;
        *(unsigned char *)(v9 + 1) = 1;
        *(_DWORD *)(a1 + 4240) += v10;
        sub_405F44((uint64_t)v13);
        if (!*(unsigned char *)v9) {
          return 0;
        }
      }
      ++v6;
    }
    while (v7 != v6);
    return 1;
  }
  return v2;
}

void sub_101E244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_405F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101E25C@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *a1;
  sub_EAFC08((uint64_t)&v72);
  uint64_t v6 = 0;
  __n128 __p = 0;
  unsigned int v71 = 0;
  uint64_t v67 = a3;
  if (!a3)
  {
    uint64_t v8 = 0;
    goto LABEL_53;
  }
  uint64_t v7 = *(void *)(v5 + 4888);
  uint64_t v8 = 0;
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = a3;
    while (1)
    {
      uint64_t v11 = v10 - 1;
      uint64_t v12 = *(void *)(*a2 + 8 * v11);
      if (*(unsigned char *)(v12 + 40))
      {
LABEL_51:
        uint64_t v6 = __p;
        goto LABEL_53;
      }
      uint64_t v68 = v11;
      int v13 = *(int ****)(v12 + 16);
      uint64_t v14 = *(int ****)(v12 + 24);
      if (v14 != v13) {
        break;
      }
LABEL_6:
      uint64_t v10 = v68;
      if (!v68 || v9 > v7) {
        goto LABEL_51;
      }
    }
    while (1)
    {
      --v14;
      if (v8 < v71)
      {
        *(void *)uint64_t v8 = *v14;
        v8 += 8;
        goto LABEL_33;
      }
      uint64_t v16 = (v8 - __p) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v18 = v71 - __p;
      if ((v71 - __p) >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          sub_188D718();
        }
        uint64_t v20 = operator new(8 * v19);
        uint64_t v21 = &v20[8 * v16];
        *(void *)uint64_t v21 = *v14;
        uint64_t v22 = (uint64_t)(v21 + 8);
        if (v8 != __p)
        {
LABEL_24:
          unint64_t v23 = v8 - 8 - __p;
          if (v23 < 0x168)
          {
            size_t v24 = v8;
            goto LABEL_26;
          }
          if (&v20[v8 - __p - 8 - (v23 & 0xFFFFFFFFFFFFFFF8)] > &v20[v8 - __p - 8])
          {
            size_t v24 = v8;
            goto LABEL_26;
          }
          if (&v8[-(v23 & 0xFFFFFFFFFFFFFFF8) - 8] > v8 - 8)
          {
            size_t v24 = v8;
            goto LABEL_26;
          }
          if ((unint64_t)(__p - v20) < 0x20)
          {
            size_t v24 = v8;
            goto LABEL_26;
          }
          uint64_t v30 = (v23 >> 3) + 1;
          uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
          size_t v24 = &v8[-v31];
          v21 -= v31;
          uint64_t v32 = &v20[8 * v16 - 16];
          unint64_t v33 = v8 - 16;
          uint64_t v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v35 = *(_OWORD *)v33;
            *(v32 - 1) = *((_OWORD *)v33 - 1);
            *uint64_t v32 = v35;
            v32 -= 2;
            v33 -= 32;
            v34 -= 4;
          }
          while (v34);
          if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_26:
              uint64_t v25 = *((void *)v24 - 1);
              v24 -= 8;
              *((void *)v21 - 1) = v25;
              v21 -= 8;
            }
            while (v24 != __p);
          }
          uint64_t v8 = __p;
          __n128 __p = v21;
          unsigned int v71 = &v20[8 * v19];
          if (!v8) {
            goto LABEL_32;
          }
LABEL_31:
          operator delete(v8);
          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v20 = 0;
        uint64_t v21 = (char *)(8 * v16);
        *(void *)(8 * v16) = *v14;
        uint64_t v22 = 8 * v16 + 8;
        if (v8 != __p) {
          goto LABEL_24;
        }
      }
      __n128 __p = v21;
      unsigned int v71 = &v20[8 * v19];
      if (v8) {
        goto LABEL_31;
      }
LABEL_32:
      uint64_t v8 = (char *)v22;
LABEL_33:
      uint64_t v26 = **v14;
      long long v27 = (unsigned __int16 *)((char *)v26 - *v26);
      if (*v27 >= 9u && (uint64_t v28 = v27[4]) != 0)
      {
        v9 += *(unsigned int *)((char *)v26 + v28);
        uint64_t v7 = *(void *)(v5 + 4888);
        if (v9 > v7 || v14 == v13) {
          goto LABEL_6;
        }
      }
      else
      {
        uint64_t v7 = *(void *)(v5 + 4888);
        if (v9 > v7 || v14 == v13) {
          goto LABEL_6;
        }
      }
    }
  }
LABEL_53:
  sub_EAFDD4(&v72, ((uint64_t)(*(void *)(*(void *)(*a2 + 8 * v67) + 24) - *(void *)(*(void *)(*a2 + 8 * v67) + 16)) >> 3)+ ((v8 - v6) >> 3));
  while (v8 != v6)
  {
    unint64_t v36 = (int **)*((void *)v8 - 1);
    v8 -= 8;
    sub_EAFD8C((uint64_t)&v72, v36);
  }
  uint64_t v37 = v67;
  uint64_t v38 = *(void *)(*a2 + 8 * v67);
  uint64_t v39 = *(int ****)(v38 + 16);
  for (uint64_t i = *(int ****)(v38 + 24); v39 != i; ++v39)
    sub_EAFD8C((uint64_t)&v72, *v39);
  uint64_t v41 = *(void *)(v5 + 4888);
  if ((v41 & 0x8000000000000000) == 0)
  {
    uint64_t v42 = 0;
    do
    {
      if (++v37 >= (unint64_t)((uint64_t)(a2[1] - *a2) >> 3)) {
        break;
      }
      uint64_t v43 = *(void *)(*a2 + 8 * v37);
      if (*(unsigned char *)(v43 + 40)) {
        break;
      }
      uint64_t v44 = *(void *)(v43 + 16);
      uint64_t v45 = *(void *)(v43 + 24);
      if (v44 != v45)
      {
        uint64_t v46 = v44 + 8;
        do
        {
          while (1)
          {
            sub_EAFD8C((uint64_t)&v72, *(int ***)(v46 - 8));
            unint64_t v48 = **(int ***)(v46 - 8);
            uint64_t v49 = (unsigned __int16 *)((char *)v48 - *v48);
            if (*v49 < 9u) {
              break;
            }
            uint64_t v50 = v49[4];
            if (!v50) {
              break;
            }
            v42 += *(unsigned int *)((char *)v48 + v50);
            uint64_t v41 = *(void *)(v5 + 4888);
            BOOL v51 = v42 > v41 || v46 == v45;
            v46 += 8;
            if (v51) {
              goto LABEL_60;
            }
          }
          uint64_t v41 = *(void *)(v5 + 4888);
          BOOL v47 = v42 > v41 || v46 == v45;
          v46 += 8;
        }
        while (!v47);
      }
LABEL_60:
      ;
    }
    while (v42 <= v41);
  }
  *(void *)(a4 + 16) = v73;
  *(void *)(a4 + 40) = v75;
  uint64_t v52 = v82;
  *(void *)(a4 + 128) = v80;
  *(void *)(a4 + 152) = v52;
  uint64_t v53 = v87;
  *(void *)(a4 + 176) = v84;
  *(void *)(a4 + 216) = v53;
  uint64_t v54 = v91;
  *(void *)(a4 + 240) = v89;
  *(_OWORD *)a4 = v72;
  long long v72 = 0uLL;
  *(_OWORD *)(a4 + 24) = v74;
  uint64_t v73 = 0;
  long long v74 = 0uLL;
  uint64_t v75 = 0;
  long long v55 = v76;
  long long v56 = v77;
  long long v57 = v78[0];
  *(_OWORD *)(a4 + 94) = *(_OWORD *)((char *)v78 + 14);
  *(_OWORD *)(a4 + 64) = v56;
  *(_OWORD *)(a4 + 80) = v57;
  *(_OWORD *)(a4 + 48) = v55;
  *(_OWORD *)(a4 + 112) = v79;
  long long v79 = 0uLL;
  *(_OWORD *)(a4 + 136) = v81;
  uint64_t v80 = 0;
  long long v81 = 0uLL;
  uint64_t v82 = 0;
  *(_OWORD *)(a4 + 160) = v83;
  long long v83 = 0uLL;
  long long v58 = v85;
  *(_OWORD *)(a4 + 200) = v86;
  *(_OWORD *)(a4 + 184) = v58;
  *(_OWORD *)(a4 + 224) = v88;
  uint64_t v84 = 0;
  long long v88 = 0uLL;
  *(_OWORD *)(a4 + 248) = v90;
  *(void *)(a4 + 264) = v54;
  uint64_t v91 = 0;
  uint64_t v89 = 0;
  long long v90 = 0uLL;
  *(_OWORD *)(a4 + 272) = v92;
  unsigned int v59 = v94;
  *(_DWORD *)(a4 + 296) = v94;
  if (v59 <= 1) {
    *(void *)(a4 + 288) = v93;
  }
  long long v60 = *(_OWORD *)v104;
  *(_OWORD *)(a4 + 432) = v103;
  *(_OWORD *)(a4 + 448) = v60;
  long long v61 = v100;
  *(_OWORD *)(a4 + 368) = v99;
  *(_OWORD *)(a4 + 384) = v61;
  long long v62 = v102;
  *(_OWORD *)(a4 + 400) = v101;
  *(_OWORD *)(a4 + 416) = v62;
  long long v63 = v96;
  *(_OWORD *)(a4 + 304) = v95;
  *(_OWORD *)(a4 + 320) = v63;
  long long v64 = v98;
  *(_OWORD *)(a4 + 336) = v97;
  *(_OWORD *)(a4 + 352) = v64;
  *(void *)(a4 + 463) = *(void *)&v104[15];
  if (__p) {
    operator delete(__p);
  }
  return sub_405F44((uint64_t)&v72);
}

void sub_101E7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (v16) {
    operator delete(v16);
  }
  sub_405F44((uint64_t)&a16);
  _Unwind_Resume(a1);
}

unint64_t sub_101E818(uint64_t a1, void *a2)
{
  unint64_t result = sub_EB04C4(a2);
  if (result)
  {
    unint64_t v5 = result;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = (int **)sub_EB0624(a2, v7);
      if (!*(unsigned char *)(a1 + 4505)
        || (uint64_t v9 = v8[1]) == 0
        || (uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9), *v10 < 0x11u)
        || (uint64_t v11 = v10[8]) == 0
        || (*(_WORD *)((unsigned char *)v9 + v11) & 4) == 0)
      {
        if (!*(unsigned char *)(a1 + 4504)
          || (uint64_t v12 = (unsigned __int16 *)((char *)*v8 - **v8), *v12 < 0x2Fu)
          || (uint64_t v13 = v12[23]) == 0
          || ((unsigned int v14 = *((unsigned __int8 *)*v8 + v13), v15 = v14 > 0x2A, v16 = (1 << v14) & 0x50426810004, !v15)
            ? (BOOL v17 = v16 == 0)
            : (BOOL v17 = 1),
              v17))
        {
          if (v6 >= *(void *)(a1 + 4496))
          {
            if (sub_102007C(a1, a2, v7)) {
              return 1;
            }
            uint64_t v6 = 0;
          }
          else
          {
            uint64_t v18 = (unsigned __int16 *)((char *)*v8 - **v8);
            if (*v18 >= 9u)
            {
              uint64_t v19 = v18[4];
              if (v19) {
                v6 += *(unsigned int *)((char *)*v8 + v19);
              }
            }
          }
        }
      }
      if (v5 == ++v7) {
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_101E990(uint64_t a1, int8x8_t ***a2, void *a3, int64x2_t *a4, int a5, uint64_t a6)
{
  int v42 = sub_EB6EB0(a4);
  uint64_t v12 = *a2;
  uint64_t v13 = a2[1];
  if (*a2 != v13)
  {
    do
    {
      unsigned int v14 = (unsigned int *)*v12++;
      sub_101ED40(*(void *)(a1 + 5128) + 24 * *v14, &v42);
    }
    while (v12 != v13);
  }
  sub_101EEA4(a1, a2, a3, (uint64_t)&v38);
  if (*(unsigned char *)(a1 + 4833))
  {
    sub_E1B4((uint64_t)v35);
    int v15 = *(char *)(a6 + 23);
    if (v15 >= 0) {
      uint64_t v16 = a6;
    }
    else {
      uint64_t v16 = *(void *)a6;
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(a6 + 23);
    }
    else {
      uint64_t v17 = *(void *)(a6 + 8);
    }
    uint64_t v18 = sub_188FC78(v36, v16, v17);
    uint64_t v19 = sub_188FC78(v18, (uint64_t)" reference_cost=", 16);
    uint64_t v20 = (void *)std::ostream::operator<<();
    uint64_t v21 = sub_188FC78(v20, (uint64_t)",", 1);
    std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)",", 1);
    std::ostream::operator<<();
    sub_188FC78(v19, (uint64_t)" time=", 6);
    std::ostream::operator<<();
    std::stringbuf::str();
    uint64_t v22 = (std::string *)sub_5231C((uint64_t)&v38);
    if ((v34 & 0x80u) == 0) {
      unint64_t v23 = __p;
    }
    else {
      unint64_t v23 = (void **)__p[0];
    }
    if ((v34 & 0x80u) == 0) {
      std::string::size_type v24 = v34;
    }
    else {
      std::string::size_type v24 = (std::string::size_type)__p[1];
    }
    std::string::append(v22, (const std::string::value_type *)v23, v24);
    if ((char)v34 < 0) {
      operator delete(__p[0]);
    }
    *(void *)((char *)v35
    v36[0] = v25;
    if (v37 < 0) {
      operator delete((void *)v36[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
  uint64_t v26 = (void *)sub_40EFE8((uint64_t)&v38);
  long long v27 = (void *)sub_52058((uint64_t)&v38);
  BOOL v28 = sub_101F308(v26, v27, a1);
  if (!v28) {
    sub_EB7138(a4, (uint64_t)&v38, a5);
  }
  if (v41 < 0) {
    operator delete(v40);
  }
  uint64_t v29 = v38;
  if (v38)
  {
    uint64_t v30 = v39;
    uint64_t v31 = v38;
    if ((void *)v39 != v38)
    {
      do
        uint64_t v30 = sub_405F44(v30 - 472);
      while ((void *)v30 != v29);
      uint64_t v31 = v38;
    }
    uint64_t v39 = (uint64_t)v29;
    operator delete(v31);
  }
  return !v28;
}

void sub_101ECC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1C02990((uint64_t)va);
  sub_405E28(v5 - 136);
  _Unwind_Resume(a1);
}

void sub_101ECE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_405E28(v16 - 136);
  _Unwind_Resume(a1);
}

_WORD *sub_101ED40(uint64_t a1, _DWORD *a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = *(char **)a1;
    uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
    if (v9 <= -3) {
      sub_2E00();
    }
    uint64_t v10 = v9 >> 1;
    unint64_t v11 = v4 - (void)v8;
    if (v11 <= (v9 >> 1) + 1) {
      unint64_t v12 = v10 + 1;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v12;
    }
    if (v13)
    {
      if (v13 < 0) {
        sub_188D718();
      }
      unsigned int v14 = operator new(2 * v13);
    }
    else
    {
      unsigned int v14 = 0;
    }
    int v15 = &v14[2 * v10];
    *int v15 = *a2;
    unint64_t v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 2;
      if (v16 < 0x1E) {
        goto LABEL_28;
      }
      if (v5 - v14 - (v9 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
        goto LABEL_28;
      }
      uint64_t v17 = (v16 >> 1) + 1;
      unint64_t v18 = 2 * (v17 & 0xFFFFFFFFFFFFFFF0);
      uint64_t v6 = &v5[-v18];
      int v15 = (_WORD *)((char *)v15 - v18);
      uint64_t v19 = &v14[2 * v10 - 16];
      uint64_t v20 = v5 - 16;
      unint64_t v21 = v17 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        long long v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        _OWORD *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 16;
      }
      while (v21);
      if (v17 != (v17 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_28:
        do
        {
          __int16 v23 = *((_WORD *)v6 - 1);
          v6 -= 2;
          *--int v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v14[2 * v13];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_WORD *)uint64_t v5 = *a2;
    unint64_t v7 = v5 + 2;
  }
  *(void *)(a1 + 8) = v7;
  return v7 - 1;
}

void sub_101EEA4(uint64_t a1@<X0>, int8x8_t ***a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  __int16 v58 = 0;
  v57[0] = (char *)&v58 + 1;
  v57[1] = (char *)&v58;
  v57[2] = (char *)a1;
  uint64_t v54 = 0;
  unint64_t v55 = 0;
  unint64_t v56 = 0;
  uint64_t v8 = sub_10210EC((uint64_t *)&v54);
  unsigned int v9 = *((_DWORD *)a2 + 6);
  unint64_t v55 = v8;
  uint64_t v10 = sub_10263D8((uint64_t)a3, v9);
  sub_EAD920(v8 - 472, v10);
  unint64_t v12 = (char *)*a2;
  unint64_t v11 = (char *)a2[1];
  if (*a2 != (int8x8_t **)v11)
  {
    unint64_t v13 = v11 - v12 - 8;
    if (v13 >= 8)
    {
      int v17 = 0;
      int v18 = 0;
      uint64_t v19 = (v13 >> 3) + 1;
      int v15 = &v12[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v20 = v12 + 8;
      uint64_t v21 = v19 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v17 += (*(void *)(*(v20 - 1) + 24) - *(void *)(*(v20 - 1) + 16)) >> 3;
        v18 += (*(void *)(*v20 + 24) - *(void *)(*v20 + 16)) >> 3;
        v20 += 2;
        v21 -= 2;
      }
      while (v21);
      unsigned int v14 = v18 + v17;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_9;
      }
    }
    else
    {
      unsigned int v14 = 0;
      int v15 = (char *)*a2;
    }
    do
    {
      uint64_t v22 = *(void *)v15;
      v15 += 8;
      v14 += (*(void *)(v22 + 24) - *(void *)(v22 + 16)) >> 3;
    }
    while (v15 != v11);
LABEL_9:
    unint64_t v16 = v14;
    goto LABEL_10;
  }
  unint64_t v16 = 0;
LABEL_10:
  sub_EAFDD4((void *)(v55 - 472), v16);
  __int16 v23 = *a2;
  std::string::size_type v24 = (unsigned int **)a2[1];
  while (v23 != (int8x8_t **)v24)
  {
    uint64_t v25 = *v23;
    unsigned int v26 = (*v23)[1].u32[0];
    if ((*v23)[5].i8[0])
    {
      unsigned int v27 = v25->u32[1];
      sub_101F434(v57, v55 - 472);
      uint64_t v28 = sub_1026428(a3, v27);
      v52[0] = *(_OWORD *)v28;
      long long v29 = *(_OWORD *)(v28 + 16);
      long long v30 = *(_OWORD *)(v28 + 32);
      long long v31 = *(_OWORD *)(v28 + 48);
      uint64_t v53 = *(void *)(v28 + 64);
      v52[2] = v30;
      v52[3] = v31;
      v52[1] = v29;
      sub_EADAA8(v55 - 472, (uint64_t)v52);
      unint64_t v32 = v55;
      if (v55 >= v56)
      {
        uint64_t v33 = sub_10210EC((uint64_t *)&v54);
      }
      else
      {
        sub_EAFC08(v55);
        uint64_t v33 = v32 + 472;
      }
      unint64_t v55 = v33;
      uint64_t v37 = sub_1026470(a3, v26);
      v50[0] = *(_OWORD *)v37;
      long long v38 = *(_OWORD *)(v37 + 16);
      long long v39 = *(_OWORD *)(v37 + 32);
      long long v40 = *(_OWORD *)(v37 + 48);
      uint64_t v51 = *(void *)(v37 + 64);
      v50[2] = v39;
      v50[3] = v40;
      v50[1] = v38;
      sub_EAD920(v55 - 472, (uint64_t)v50);
      __int16 v58 = 0;
    }
    else
    {
      unsigned __int8 v34 = (int8x8_t *)sub_EAD918(v55 - 472);
      *unsigned __int8 v34 = vorr_s8(*v34, v25[17]);
      v34[1].i8[0] |= v25[18].u8[0];
      v34[1].i8[1] |= v25[18].u8[1];
      long long v35 = *v23;
      uint64_t v36 = (*v23)->u32[0];
      HIBYTE(v58) = (HIBYTE(v58) | *(unsigned __int8 *)(*(void *)(a1 + 6816) + v36)) != 0;
      LOBYTE(v58) = (v58 | *(unsigned __int8 *)(*(void *)(a1 + 6840) + v36)) != 0;
      if (v35[10].i32[0] && *(void *)&v35[6] && *(void *)&v35[7])
      {
        sub_EAFC44(v55 - 472, *(void *)&v35[11], (long long *)&v35[6]);
        sub_101F434(v57, v55 - 472);
        if (sub_1026380(a3, v26))
        {
          unint64_t v48 = v55;
          uint64_t v49 = sub_10263F0(a3, v26);
          sub_EADAA8(v48 - 472, v49);
          sub_EA77C0(a4, (uint64_t)&v54);
          goto LABEL_27;
        }
      }
      else
      {
        char v41 = (int ***)v35[2];
        for (uint64_t i = (int ***)v35[3]; v41 != i; ++v41)
          sub_EAFD8C(v55 - 472, *v41);
      }
    }
    ++v23;
  }
  sub_101F434(v57, v55 - 472);
  unint64_t v43 = v55;
  uint64_t v44 = sub_10263F0(a3, *((_DWORD *)a2 + 7));
  sub_EADAA8(v43 - 472, v44);
  sub_EA77C0(a4, (uint64_t)&v54);
LABEL_27:
  unint64_t v45 = (unint64_t)v54;
  if (v54)
  {
    uint64_t v46 = v55;
    BOOL v47 = v54;
    if ((void *)v55 != v54)
    {
      do
        uint64_t v46 = sub_405F44(v46 - 472);
      while (v46 != v45);
      BOOL v47 = v54;
    }
    unint64_t v55 = v45;
    operator delete(v47);
  }
}

void sub_101F264(_Unwind_Exception *a1)
{
  sub_4323C0((void **)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_101F278(_Unwind_Exception *a1)
{
  sub_4323C0((void **)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_101F28C(_Unwind_Exception *a1)
{
  sub_4323C0((void **)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_101F2A0(_Unwind_Exception *a1)
{
  *(void *)(v2 - 128) = v1;
  sub_4323C0((void **)(v2 - 136));
  _Unwind_Resume(a1);
}

void sub_101F2B8(_Unwind_Exception *a1)
{
  sub_4323C0((void **)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_101F2CC(_Unwind_Exception *a1)
{
  sub_4323C0((void **)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_101F2E0(_Unwind_Exception *a1)
{
  sub_4323C0((void **)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_101F2F4(_Unwind_Exception *a1)
{
  sub_4323C0((void **)(v1 - 136));
  _Unwind_Resume(a1);
}

BOOL sub_101F308(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unint64_t v4 = a1;
    uint64_t v5 = a3 + 4288;
    while (1)
    {
      sub_106C7DC(v5, v4, (uint64_t)&v15);
      if (v15 == v16)
      {
        uint64_t v8 = (char *)__p;
        if (v17 == v18)
        {
          BOOL v7 = __p != v20;
          if (__p)
          {
LABEL_14:
            unsigned int v9 = v20;
            uint64_t v10 = v8;
            if (v20 != v8)
            {
              unint64_t v11 = v20;
              do
              {
                unint64_t v13 = (void *)*((void *)v11 - 3);
                v11 -= 24;
                unint64_t v12 = v13;
                if (v13)
                {
                  *((void *)v9 - 2) = v12;
                  operator delete(v12);
                }
                unsigned int v9 = v11;
              }
              while (v11 != v8);
              uint64_t v10 = __p;
            }
            uint64_t v20 = v8;
            operator delete(v10);
          }
        }
        else
        {
          BOOL v7 = 1;
          if (__p) {
            goto LABEL_14;
          }
        }
      }
      else
      {
        BOOL v7 = 1;
        uint64_t v8 = (char *)__p;
        if (__p) {
          goto LABEL_14;
        }
      }
      if (v17)
      {
        int v18 = v17;
        operator delete(v17);
      }
      if (v15)
      {
        unint64_t v16 = v15;
        operator delete(v15);
      }
      v4 += 59;
      int v6 = v4 == a2 || v7;
      if (v6 == 1) {
        return v7;
      }
    }
  }
  return 0;
}

void sub_101F434(char **a1, uint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = a1[2];
  char v5 = **a1;
  *(unsigned char *)(sub_EAD918(a2) + 8) = v5;
  LOBYTE(v3) = *v3[1];
  *(unsigned char *)(sub_EAD918(a2) + 9) = (_BYTE)v3;
  if (!*(unsigned char *)(sub_EAD918(a2) + 8) || !*(unsigned char *)(sub_EAD918(a2) + 9))
  {
    uint64_t v6 = sub_EAFF60(a2);
    sub_3F4E6C((uint64_t)(v4 + 4248), v6, (uint64_t)&__p);
    BOOL v7 = __p;
    uint64_t v8 = v17;
    uint64_t v9 = sub_EAD918(a2);
    *(unsigned char *)(v9 + 8) |= v7 != v8;
    uint64_t v10 = __p;
    if (__p == v17)
    {
      BOOL v13 = 0;
    }
    else
    {
      do
      {
        unint64_t v11 = (void *)*v10;
        uint64_t v12 = v10[1];
        v10 += 2;
        LODWORD(v11) = *(unsigned __int8 *)(*v11 + 424 * v12 + 312);
        BOOL v13 = v11 != 0;
        if (v11) {
          BOOL v14 = 1;
        }
        else {
          BOOL v14 = v10 == v17;
        }
      }
      while (!v14);
    }
    uint64_t v15 = sub_EAD918(a2);
    *(unsigned char *)(v15 + 9) |= v13;
    if (__p)
    {
      int v17 = __p;
      operator delete(__p);
    }
  }
}

void sub_101F564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_101F584(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(int ****)(a2 + 16);
  if (v3 == *(int ****)(a2 + 24)) {
    return 0;
  }
  char v5 = *v3;
  uint64_t v6 = (*v3)[1];
  if (!v6) {
    return 0;
  }
  BOOL v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 < 0x11u) {
    return 0;
  }
  uint64_t v8 = v7[8];
  if (!v8 || (*(_WORD *)((unsigned char *)v6 + v8) & 4) == 0) {
    return 0;
  }
  LODWORD(v11) = a3;
  BOOL v13 = (unsigned __int16 *)((char *)*v5 - **v5);
  if (*v13 >= 0x2Fu)
  {
    uint64_t v14 = v13[23];
    if (v14)
    {
      unsigned int v15 = *((unsigned __int8 *)*v5 + v14);
      BOOL v16 = v15 > 0x36;
      uint64_t v17 = (1 << v15) & 0x44000000000008;
      if (!v16 && v17 != 0) {
        return 0;
      }
    }
  }
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  unint64_t v48 = sub_2E48C4(v5);
  sub_29603C((void **)&v49, &v48);
  uint64_t v20 = *(int ****)(a2 + 16);
  for (uint64_t i = *(int ****)(a2 + 24); v20 != i; ++v20)
  {
    unint64_t v48 = sub_2E4738(*v20);
    sub_29603C((void **)&v49, &v48);
    uint64_t v21 = (*v20)[6];
    if (!v21) {
      break;
    }
    uint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
    if (*v22 < 0x11u) {
      break;
    }
    uint64_t v23 = v22[8];
    if (!v23 || (*(_WORD *)((unsigned char *)v21 + v23) & 4) == 0) {
      break;
    }
    std::string::size_type v24 = (*v20)[5];
    uint64_t v25 = (unsigned __int16 *)((char *)v24 - *v24);
    if (*v25 >= 0x2Fu)
    {
      uint64_t v26 = v25[23];
      if (v26)
      {
        unsigned int v27 = *((unsigned __int8 *)v24 + v26);
        BOOL v16 = v27 > 0x36;
        uint64_t v28 = (1 << v27) & 0x44000000000008;
        if (!v16 && v28 != 0) {
          break;
        }
      }
    }
  }
  uint64_t v11 = v11;
  uint64_t v30 = *(void *)(a1 + 4928);
  if (*(_DWORD *)(v30 + 80 * v11 + 4) != -1)
  {
    do
    {
      uint64_t v31 = *(void *)(v30 + 80 * v11 + 32);
      if (*(unsigned char *)(v31 + 40)) {
        break;
      }
      uint64_t v32 = *(void *)(v31 + 24);
      if (v32 == *(void *)(v31 + 16))
      {
        LOBYTE(v37) = 1;
        uint64_t v11 = *(unsigned int *)(v30 + 80 * v11 + 4);
        if (*(_DWORD *)(v30 + 80 * v11 + 4) == -1) {
          break;
        }
      }
      else
      {
        while (1)
        {
          uint64_t v34 = *(void *)(v32 - 8);
          v32 -= 8;
          uint64_t v33 = (int **)v34;
          long long v35 = *(int **)(v34 + 8);
          if (!v35) {
            break;
          }
          uint64_t v36 = (unsigned __int16 *)((char *)v35 - *v35);
          if (*v36 < 0x11u) {
            break;
          }
          uint64_t v37 = v36[8];
          if (!v37) {
            goto LABEL_45;
          }
          if ((*(_WORD *)((unsigned char *)v35 + v37) & 4) == 0) {
            break;
          }
          long long v38 = (unsigned __int16 *)((char *)*v33 - **v33);
          if (*v38 >= 0x2Fu)
          {
            uint64_t v39 = v38[23];
            if (v39)
            {
              unsigned int v40 = *((unsigned __int8 *)*v33 + v39);
              BOOL v16 = v40 > 0x36;
              uint64_t v41 = (1 << v40) & 0x44000000000008;
              if (!v16 && v41 != 0) {
                break;
              }
            }
          }
          unint64_t v48 = sub_2E48C4(v33);
          sub_29603C((void **)&v49, &v48);
          if (v32 == *(void *)(v31 + 16))
          {
            LOBYTE(v37) = 1;
            goto LABEL_45;
          }
        }
        LOBYTE(v37) = 0;
LABEL_45:
        uint64_t v30 = *(void *)(a1 + 4928);
        uint64_t v11 = *(unsigned int *)(v30 + 80 * v11 + 4);
        if (*(_DWORD *)(v30 + 80 * v11 + 4) == -1) {
          break;
        }
      }
    }
    while ((v37 & 1) != 0);
  }
  unint64_t v43 = 126 - 2 * __clz(((char *)v50 - (char *)v49) >> 3);
  if (v50 == v49) {
    uint64_t v44 = 0;
  }
  else {
    uint64_t v44 = v43;
  }
  sub_102372C(v49, v50, (uint64_t)&v48, v44, 1);
  unint64_t v45 = v49;
  if (v49 != v50)
  {
    unint64_t v45 = (int8x16_t *)((char *)v49 - 8);
    while (&v45[1] != v50)
    {
      __int32 v46 = v45->i32[2];
      unint64_t v45 = (int8x16_t *)((char *)v45 + 8);
      if (v46 == v45->i32[2] && v45->i32[1] == v45->i32[3]) {
        goto LABEL_62;
      }
    }
    unint64_t v45 = v50;
  }
LABEL_62:
  BOOL v9 = v45 != v50;
  if (v49)
  {
    uint64_t v50 = v49;
    operator delete(v49);
  }
  return v9;
}

void sub_101F8B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_101F8E0(uint64_t a1)
{
  *(void *)a1 = -1;
  *(_DWORD *)(a1 + 8) = -1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 84) = -1;
  *(unsigned char *)(a1 + 86) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  double result = NAN;
  *(void *)(a1 + 120) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 128) = 0x7FFFFFFFFFFFFFFFLL;
  *(_WORD *)(a1 + 136) = 256;
  *(void *)(a1 + 138) = 0;
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 156) = 0x7FFFFFFF;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  return result;
}

uint64_t sub_101F954(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4)
{
  if (*(unsigned char *)a4)
  {
    uint64_t v7 = a3;
    unsigned int v44 = *(_DWORD *)(*(void *)(a1 + 4928) + 80 * a3);
    if ((unint64_t)sub_10262A0((uint64_t)a2, &v44) >= 2)
    {
      uint64_t v8 = *(void *)(a1 + 4928) + 80 * v7;
      int v38 = *(_DWORD *)(v8 + 52);
      int v39 = *(_DWORD *)(v8 + 48);
      uint64_t v9 = *(void *)(v8 + 56);
      double v10 = *(double *)(v8 + 64);
      double v11 = sub_10260A0((uint64_t)a2, &v44);
      uint64_t v12 = *(void *)(a1 + 4928);
      uint64_t v13 = *(unsigned int *)(v12 + 80 * v7 + 4);
      if (v13 != -1)
      {
        double v15 = v11;
        char v16 = *(unsigned char *)(*(void *)(v12 + 80 * v7 + 32) + 152) != 0;
        while (1)
        {
          uint64_t v17 = v12 + 80 * v13;
          unsigned int v43 = *(_DWORD *)v17;
          uint64_t v18 = *(void *)(v17 + 32);
          if (*(unsigned char *)(v18 + 40)) {
            return 0xFFFFFFFFLL;
          }
          v16 &= *(unsigned char *)(v18 + 152) != 0;
          if ((unint64_t)sub_102625C((uint64_t)a2, (int *)&v43) > 1) {
            break;
          }
LABEL_7:
          uint64_t v12 = *(void *)(a1 + 4928);
          uint64_t v13 = *(unsigned int *)(v12 + 80 * v13 + 4);
          if (v13 == -1) {
            return 0xFFFFFFFFLL;
          }
        }
        uint64_t v19 = *(void *)(a1 + 4928) + 80 * v13;
        unsigned int v20 = v39 - *(_DWORD *)(v19 + 48);
        int v21 = v38 - *(_DWORD *)(v19 + 52);
        uint64_t v22 = v9 - *(void *)(v19 + 56);
        if (*(unsigned char *)(a4 + 2)) {
          char v23 = v16;
        }
        else {
          char v23 = 1;
        }
        if ((v23 & 1) == 0)
        {
          sub_101FD48(a1, a2, v43, 1, *(unsigned char *)(a4 + 1));
          unint64_t v40 = v43 | ((unint64_t)v44 << 32);
          sub_101FF30(a1 + 6024, (unsigned int *)&v40, v41);
          if (v41[0])
          {
            uint64_t v24 = *(void *)(v42 + 16);
            if (v24 < *(void *)(a4 + 64))
            {
              unsigned int v25 = *(_DWORD *)(v42 + 8);
              if (v25 == v20)
              {
                int v26 = *(_DWORD *)(v42 + 12);
                if (v26 == v21)
                {
                  if (v24 >= v22) {
                    goto LABEL_41;
                  }
                }
                else if (v26 >= v21)
                {
                  goto LABEL_41;
                }
LABEL_23:
                double v27 = *(double *)(a4 + 48) * (double)v24;
                if (v27 >= 0.0)
                {
                  if (v27 >= 4.50359963e15) {
                    goto LABEL_31;
                  }
                  uint64_t v28 = (uint64_t)(v27 + v27) + 1;
                }
                else
                {
                  if (v27 <= -4.50359963e15) {
                    goto LABEL_31;
                  }
                  uint64_t v28 = (uint64_t)(v27 + v27);
                  if (v28 >= 1) {
                    --v28;
                  }
                }
                double v27 = (double)(v28 >> 1);
LABEL_31:
                if (*(void *)(v42 + 32) <= (uint64_t)v27) {
                  goto LABEL_41;
                }
                double v29 = *(double *)(a4 + 40) * (double)v22;
                if (v29 >= 0.0)
                {
                  if (v29 >= 4.50359963e15) {
                    goto LABEL_40;
                  }
                  uint64_t v30 = (uint64_t)(v29 + v29) + 1;
                }
                else
                {
                  if (v29 <= -4.50359963e15) {
                    goto LABEL_40;
                  }
                  uint64_t v30 = (uint64_t)(v29 + v29);
                  if (v30 >= 1) {
                    --v30;
                  }
                }
                double v29 = (double)(v30 >> 1);
LABEL_40:
                if (v24 < (uint64_t)v29) {
                  return v13;
                }
                goto LABEL_41;
              }
              if (v25 < v20) {
                goto LABEL_23;
              }
            }
          }
        }
LABEL_41:
        sub_101FD48(a1, a2, v43, 0, *(unsigned char *)(a4 + 1));
        unint64_t v40 = v43 | ((unint64_t)v44 << 32);
        sub_101FF30(a1 + 5256, (unsigned int *)&v40, v41);
        if (v41[0] && *(_DWORD *)(v42 + 12) < *(_DWORD *)(a4 + 56))
        {
          unint64_t v32 = sub_ECE090((_DWORD *)(v42 + 8), *(double *)(a4 + 8), v31);
          if (v20 == v32)
          {
            if (v21 == HIDWORD(v32))
            {
              if (v33 < v22) {
                return v13;
              }
            }
            else if (v21 > SHIDWORD(v32))
            {
              return v13;
            }
          }
          else if (v20 > v32)
          {
            return v13;
          }
          uint64_t v34 = v22 <= 1 ? 1 : v22;
          double v35 = (v10 - *(double *)(*(void *)(a1 + 4928) + 80 * v13 + 64)) / (double)v34;
          if (v35 < *(double *)(a4 + 16))
          {
            double v36 = sub_10260A0((uint64_t)a2, &v43);
            if (v15 < v36) {
              double v36 = v15;
            }
            if (v35 < *(double *)(a4 + 32) * v36)
            {
              uint64_t v37 = *(void *)(v42 + 16);
              if (v37 <= 1) {
                uint64_t v37 = 1;
              }
              if (*(double *)(a4 + 24) * (*(double *)(v42 + 24) / (double)v37) > v35) {
                return v13;
              }
            }
          }
        }
        goto LABEL_7;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_101FD48(uint64_t result, unsigned int *a2, unsigned int a3, int a4, char a5)
{
  uint64_t v7 = result;
  unsigned int v33 = a3;
  char v32 = a4;
  char v31 = a5;
  uint64_t v8 = a3 >> 6;
  uint64_t v9 = 1 << a3;
  if (a4)
  {
    double v10 = (uint64_t *)(*(void *)(result + 5104) + 8 * v8);
    uint64_t v11 = *v10;
    if ((*v10 & v9) != 0) {
      return result;
    }
  }
  else
  {
    double v10 = (uint64_t *)(*(void *)(result + 5080) + 8 * v8);
    uint64_t v11 = *v10;
    if ((*v10 & v9) != 0) {
      return result;
    }
  }
  *double v10 = v11 | v9;
  ++*(_DWORD *)(result + 4224);
  if (a4) {
    uint64_t v12 = (unsigned int *)(result + 6024);
  }
  else {
    uint64_t v12 = (unsigned int *)(result + 5256);
  }
  uint64_t v13 = 4896;
  if (a4) {
    uint64_t v13 = 4900;
  }
  int v30 = *(_DWORD *)(result + v13);
  uint64_t v20 = sub_638A44((uint64_t)a2);
  sub_10213F4(v21, 0x400u);
  v18[2] = v12;
  uint64_t v19 = (unsigned int *)&v30;
  v18[0] = &v33;
  v18[1] = a2;
  v17[0] = &v32;
  v17[1] = &v31;
  v17[2] = v7;
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  uint64_t v14 = (unsigned int *)operator new(4uLL);
  uint64_t v34 = v14;
  *uint64_t v14 = a3;
  double v36 = v14 + 1;
  double v35 = v14 + 1;
  sub_1021564((uint64_t)&v20, &v34, &v19, v18, (uint64_t)v17, (uint64_t)v15);
  if (v34)
  {
    double v35 = v34;
    operator delete(v34);
  }
  if (v28)
  {
    double v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    double v27 = v26;
    operator delete(v26);
  }
  if (v24)
  {
    unsigned int v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    char v23 = v22;
    operator delete(v22);
  }
  return sub_328138((uint64_t)v21);
}

void sub_101FEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  uint64_t v17 = *(void **)(v15 + 904);
  if (v17)
  {
    *(void *)(v15 + 912) = v17;
    operator delete(v17);
    sub_ECFCF0((uint64_t *)va);
    _Unwind_Resume(a1);
  }
  sub_ECFCF0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101FF30@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v3 = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v6 = (v4 + 0x388152A534) ^ 0xDEADBEEFLL;
  uint64_t v7 = v5 + (v6 << 6) + (v6 >> 2) + 2654435769u;
  unint64_t v8 = (v7 ^ ~v6) + ((v7 ^ v6) << 21);
  unint64_t v9 = 21 * ((265 * (v8 ^ (v8 >> 24))) ^ ((265 * (v8 ^ (v8 >> 24))) >> 14));
  unint64_t v10 = 2147483649u * (v9 ^ (v9 >> 28));
  uint64_t v11 = (uint64_t *)(result
                  + 48
                  * (((((unsigned __int16)(v9 ^ (v9 >> 28)) >> 8) ^ ((-2147483647
                                                                                     * (v9 ^ (v9 >> 28))) >> 16)) ^ ((-2147483647 * (v9 ^ (v9 >> 28))) >> 24)) & 0xF));
  unint64_t v12 = v10 >> 7;
  uint64_t v13 = v11[3];
  uint64_t v14 = *v11;
  uint64_t v15 = 0x101010101010101 * (v10 & 0x7F);
  while (1)
  {
    unint64_t v16 = v12 & v13;
    uint64_t v17 = *(void *)(v14 + v16);
    unint64_t v18 = ((v17 ^ v15) - 0x101010101010101) & ~(v17 ^ v15) & 0x8080808080808080;
    if (v18) {
      break;
    }
LABEL_8:
    if ((v17 & (~v17 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_11;
    }
    v3 += 8;
    unint64_t v12 = v3 + v16;
  }
  while (1)
  {
    unint64_t v19 = (v16 + (__clz(__rbit64(v18)) >> 3)) & v13;
    uint64_t v20 = (uint64_t *)(v11[1] + 48 * v19);
    if (*(_DWORD *)v20 == v4 && *((_DWORD *)v20 + 1) == v5) {
      break;
    }
    v18 &= v18 - 1;
    if (!v18) {
      goto LABEL_8;
    }
  }
  if (v13 == v19)
  {
LABEL_11:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    a3[4] = 0;
    return result;
  }
  *a3 = v11;
  a3[1] = (uint64_t *)(result + 768);
  a3[2] = (uint64_t *)(v14 + v19);
  a3[3] = v20;
  a3[4] = (uint64_t *)(v14 + v13);
  return result;
}

BOOL sub_102007C(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v6 = sub_3766F8(*(void **)a1);
  if (sub_EB04C4(a2) <= a3) {
    return 0;
  }
  uint64_t v7 = 0;
  double v8 = 0.0;
  unint64_t v9 = a3;
  while (v7 < *(void *)(a1 + 4488))
  {
    uint64_t v11 = (char **)sub_EB0624(a2, v9);
    unint64_t v12 = v11;
    if (*(unsigned char *)(a1 + 4505))
    {
      uint64_t v13 = (int *)v11[1];
      if (v13)
      {
        uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
        if (*v14 >= 0x11u)
        {
          uint64_t v15 = v14[8];
          if (v15)
          {
            if ((*(_WORD *)((unsigned char *)v13 + v15) & 4) != 0) {
              goto LABEL_5;
            }
          }
        }
      }
    }
    if (*(unsigned char *)(a1 + 4504))
    {
      unint64_t v16 = &(*v11)[-*(int *)*v11];
      if (*(unsigned __int16 *)v16 >= 0x2Fu)
      {
        uint64_t v17 = *((unsigned __int16 *)v16 + 23);
        if (v17)
        {
          unsigned int v18 = (*v11)[v17];
          BOOL v19 = v18 > 0x2A;
          uint64_t v20 = (1 << v18) & 0x50426810004;
          if (!v19 && v20 != 0) {
            goto LABEL_5;
          }
        }
      }
    }
    uint64_t v22 = sub_32A458(v6, (uint64_t)v11[4]);
    double v23 = 0.0;
    double v24 = 0.0;
    if (!v22) {
      goto LABEL_33;
    }
    unsigned int v25 = &v22[-*(int *)v22];
    unsigned int v26 = *(unsigned __int16 *)v25;
    if (v26 >= 0xB && *((_WORD *)v25 + 5))
    {
      unsigned int v27 = *(unsigned __int16 *)&v22[*((unsigned __int16 *)v25 + 5)];
      unsigned int v28 = *(unsigned __int16 *)(v6 + 3880);
      if (!*(_WORD *)(v6 + 3880)) {
        goto LABEL_30;
      }
    }
    else
    {
      unsigned int v27 = 0xFFFF;
      unsigned int v28 = *(unsigned __int16 *)(v6 + 3880);
      if (!*(_WORD *)(v6 + 3880)) {
        goto LABEL_30;
      }
    }
    if (v26 >= 0x11)
    {
      uint64_t v29 = *((unsigned __int16 *)v25 + 8);
      if (v29)
      {
        int v30 = &v22[v29 + *(unsigned int *)&v22[v29]];
        if (*(_DWORD *)v30 >= v28)
        {
          unsigned int v31 = *(unsigned __int16 *)&v30[2 * v28 + 2];
          if ((unsigned __int16)(v31 + 1) > 1u)
          {
            double v32 = (double)v31;
            goto LABEL_32;
          }
        }
      }
    }
LABEL_30:
    if (v27 != 0xFFFF)
    {
      double v32 = (double)v27;
LABEL_32:
      double v24 = v32 / 1000.0;
LABEL_33:
      unsigned int v33 = *v12;
      uint64_t v34 = &(*v12)[-*(int *)*v12];
      if (*(unsigned __int16 *)v34 < 9u) {
        goto LABEL_3;
      }
      goto LABEL_34;
    }
    double v24 = 0.3;
    unsigned int v33 = *v12;
    uint64_t v34 = &(*v12)[-*(int *)*v12];
    if (*(unsigned __int16 *)v34 < 9u) {
      goto LABEL_3;
    }
LABEL_34:
    uint64_t v35 = *((unsigned __int16 *)v34 + 4);
    if (v35)
    {
      uint64_t v10 = *(unsigned int *)&v33[v35];
      double v23 = (double)v10;
      goto LABEL_4;
    }
LABEL_3:
    uint64_t v10 = 0;
LABEL_4:
    double v8 = v8 + v24 * v23;
    v7 += v10;
LABEL_5:
    if (++v9 >= sub_EB04C4(a2)) {
      break;
    }
  }
  if (!v7) {
    return 0;
  }
  double v36 = v8 / (double)v7;
  if (v36 > *(double *)(a1 + 4512)) {
    return 0;
  }
  unint64_t v37 = sub_EB04C4(a2);
  double v38 = v36;
  if (v9 <= v37) {
    unint64_t v39 = v37;
  }
  else {
    unint64_t v39 = v9;
  }
  if (v9 < v37)
  {
    uint64_t v40 = 0;
    unint64_t v41 = v39 - 1;
    double v38 = v36;
    while (1)
    {
      uint64_t v44 = sub_EB0624(a2, v9);
      unint64_t v45 = sub_32A458(v6, *(void *)(v44 + 32));
      if (v45) {
        break;
      }
      double v42 = 0.0;
LABEL_47:
      if (v38 < v42) {
        double v38 = v42;
      }
      v40 += sub_EB0698((uint64_t)a2, v9);
      if (v40 > *(void *)(a1 + 4480) || v41 == v9++) {
        goto LABEL_68;
      }
    }
    __int32 v46 = &v45[-*(int *)v45];
    unsigned int v47 = *(unsigned __int16 *)v46;
    if (v47 >= 0xB && *((_WORD *)v46 + 5))
    {
      unsigned int v48 = *(unsigned __int16 *)&v45[*((unsigned __int16 *)v46 + 5)];
      unsigned int v49 = *(unsigned __int16 *)(v6 + 3880);
      if (!*(_WORD *)(v6 + 3880)) {
        goto LABEL_63;
      }
    }
    else
    {
      unsigned int v48 = 0xFFFF;
      unsigned int v49 = *(unsigned __int16 *)(v6 + 3880);
      if (!*(_WORD *)(v6 + 3880)) {
        goto LABEL_63;
      }
    }
    if (v47 >= 0x11)
    {
      uint64_t v50 = *((unsigned __int16 *)v46 + 8);
      if (v50)
      {
        uint64_t v51 = &v45[v50 + *(unsigned int *)&v45[v50]];
        if (*(_DWORD *)v51 >= v49)
        {
          unsigned int v52 = *(unsigned __int16 *)&v51[2 * v49 + 2];
          if ((unsigned __int16)(v52 + 1) > 1u)
          {
            double v53 = (double)v52;
LABEL_65:
            double v42 = v53 / 1000.0;
            goto LABEL_47;
          }
        }
      }
    }
LABEL_63:
    if (v48 == 0xFFFF)
    {
      double v42 = 0.3;
      goto LABEL_47;
    }
    double v53 = (double)v48;
    goto LABEL_65;
  }
LABEL_68:
  double v54 = *(double *)(a1 + 4520);
  if (v38 < v54) {
    return 0;
  }
  if ((int)a3 >= -1) {
    int v55 = -1;
  }
  else {
    int v55 = a3;
  }
  double v56 = v36;
  if ((a3 & 0x80000000) == 0)
  {
    uint64_t v57 = 0;
    unint64_t v58 = (int)a3;
    int v59 = v55 - a3 + 1;
    double v56 = v36;
    while (1)
    {
      uint64_t v62 = sub_EB0624(a2, v58);
      long long v63 = sub_32A458(v6, *(void *)(v62 + 32));
      if (v63) {
        break;
      }
      double v60 = 0.0;
LABEL_75:
      if (v56 < v60) {
        double v56 = v60;
      }
      v57 += sub_EB0698((uint64_t)a2, v58--);
      if (v57 > *(void *)(a1 + 4480) || v59++ == 0)
      {
        double v54 = *(double *)(a1 + 4520);
        goto LABEL_97;
      }
    }
    long long v64 = &v63[-*(int *)v63];
    unsigned int v65 = *(unsigned __int16 *)v64;
    if (v65 >= 0xB && *((_WORD *)v64 + 5))
    {
      unsigned int v66 = *(unsigned __int16 *)&v63[*((unsigned __int16 *)v64 + 5)];
      unsigned int v67 = *(unsigned __int16 *)(v6 + 3880);
      if (!*(_WORD *)(v6 + 3880)) {
        goto LABEL_91;
      }
    }
    else
    {
      unsigned int v66 = 0xFFFF;
      unsigned int v67 = *(unsigned __int16 *)(v6 + 3880);
      if (!*(_WORD *)(v6 + 3880)) {
        goto LABEL_91;
      }
    }
    if (v65 >= 0x11)
    {
      uint64_t v68 = *((unsigned __int16 *)v64 + 8);
      if (v68)
      {
        unsigned int v69 = &v63[v68 + *(unsigned int *)&v63[v68]];
        if (*(_DWORD *)v69 >= v67)
        {
          unsigned int v70 = *(unsigned __int16 *)&v69[2 * v67 + 2];
          if ((unsigned __int16)(v70 + 1) > 1u)
          {
            double v71 = (double)v70;
LABEL_93:
            double v60 = v71 / 1000.0;
            goto LABEL_75;
          }
        }
      }
    }
LABEL_91:
    if (v66 == 0xFFFF)
    {
      double v60 = 0.3;
      goto LABEL_75;
    }
    double v71 = (double)v66;
    goto LABEL_93;
  }
LABEL_97:
  if (v56 < v54) {
    return 0;
  }
  if (v38 >= v56) {
    double v73 = v56;
  }
  else {
    double v73 = v38;
  }
  return v36 < v73 * *(double *)(a1 + 4528);
}

uint64_t sub_1020588(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  long long v8 = *(_OWORD *)(a2 + 96);
  long long v9 = *(_OWORD *)(a2 + 112);
  long long v10 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  char v11 = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 160) = v11;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  uint64_t v13 = *(unsigned char **)(a2 + 168);
  unint64_t v12 = *(unsigned char **)(a2 + 176);
  int64_t v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0) {
      sub_2E00();
    }
    uint64_t v15 = (char *)operator new(v12 - v13);
    *(void *)(a1 + 168) = v15;
    *(void *)(a1 + 176) = v15;
    unint64_t v16 = &v15[8 * (v14 >> 3)];
    *(void *)(a1 + 184) = v16;
    memcpy(v15, v13, v14);
    *(void *)(a1 + 176) = v16;
  }
  long long v17 = *(_OWORD *)(a2 + 192);
  long long v18 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v18;
  *(_OWORD *)(a1 + 192) = v17;
  long long v19 = *(_OWORD *)(a2 + 240);
  long long v20 = *(_OWORD *)(a2 + 256);
  long long v21 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v21;
  *(_OWORD *)(a1 + 240) = v19;
  *(_OWORD *)(a1 + 256) = v20;
  long long v22 = *(_OWORD *)(a2 + 304);
  long long v23 = *(_OWORD *)(a2 + 320);
  long long v24 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 348) = *(_OWORD *)(a2 + 348);
  *(_OWORD *)(a1 + 320) = v23;
  *(_OWORD *)(a1 + 336) = v24;
  *(_OWORD *)(a1 + 304) = v22;
  if (*(char *)(a2 + 391) < 0)
  {
    sub_4200((unsigned char *)(a1 + 368), *(void **)(a2 + 368), *(void *)(a2 + 376));
  }
  else
  {
    long long v25 = *(_OWORD *)(a2 + 368);
    *(void *)(a1 + 384) = *(void *)(a2 + 384);
    *(_OWORD *)(a1 + 368) = v25;
  }
  unsigned int v26 = (unsigned char *)(a1 + 392);
  if (*(char *)(a2 + 415) < 0)
  {
    sub_4200(v26, *(void **)(a2 + 392), *(void *)(a2 + 400));
  }
  else
  {
    long long v27 = *(_OWORD *)(a2 + 392);
    *(void *)(a1 + 408) = *(void *)(a2 + 408);
    *(_OWORD *)unsigned int v26 = v27;
  }
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  return a1;
}

void sub_10206E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 391) < 0) {
    operator delete(*v3);
  }
  long long v5 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 176) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_102071C(__n128 *a1, __n128 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v20 = v3;
    uint64_t v21 = v4;
    long long v7 = a1;
    while (1)
    {
      sub_45E958(v7, &v19);
      unint64_t v9 = v19.n128_u64[1];
      uint64_t v8 = v19.n128_u64[0];
      if (v19.n128_u64[0] == v19.n128_u64[1])
      {
        int v10 = 0;
      }
      else
      {
        int v10 = 0;
        do
        {
          v10 |= *(_DWORD *)sub_45FE5C(v8);
          if (*(unsigned char *)(sub_EAD918(v8) + 7)) {
            v10 |= 0x200000u;
          }
          v8 += 472;
        }
        while (v8 != v9);
      }
      uint64_t v11 = sub_40EFE8((uint64_t)v7);
      uint64_t v12 = sub_52058((uint64_t)v7);
      if (v11 == v12)
      {
        BOOL v15 = 0;
        if ((*(_DWORD *)a3 & v10) == 0) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v13 = v12;
        do
        {
          uint64_t v14 = sub_EAD918(v11);
          BOOL v15 = *(unsigned char *)(v14 + 8) != 0;
          v11 += 472;
          if (*(unsigned char *)(v14 + 8)) {
            BOOL v16 = 1;
          }
          else {
            BOOL v16 = v11 == v13;
          }
        }
        while (!v16);
        if ((*(_DWORD *)a3 & v10) == 0)
        {
LABEL_21:
          char v17 = !v15;
          if (!*(unsigned char *)(a3 + 7)) {
            char v17 = 1;
          }
          if (v17) {
            return 1;
          }
        }
      }
      v7 += 3;
      if (v7 == a2) {
        return 0;
      }
    }
  }
  return 0;
}

uint64_t sub_102085C(uint64_t *a1, void *a2)
{
  uint64_t v3 = a1[1] - *a1;
  uint64_t v4 = v3 >> 3;
  unint64_t v5 = (v3 >> 3) + 1;
  if (v5 >> 61) {
    sub_2E00();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v5) {
    unint64_t v5 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 >> 61) {
      sub_188D718();
    }
    unint64_t v9 = operator new(8 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v10 = sub_101526C((uint64_t)&v9[8 * v4], a2);
  uint64_t v11 = v10 + 8;
  uint64_t v13 = (unsigned char *)*a1;
  uint64_t v12 = (unsigned char *)a1[1];
  if (v12 != (unsigned char *)*a1)
  {
    unint64_t v14 = (unint64_t)&v12[-*a1 - 8];
    if (v14 < 0x58) {
      goto LABEL_26;
    }
    if ((unint64_t)(v12 - &v9[v3]) < 0x20) {
      goto LABEL_26;
    }
    uint64_t v15 = (v14 >> 3) + 1;
    uint64_t v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
    char v17 = &v12[-v16];
    v10 -= v16;
    long long v18 = &v9[8 * v4 - 16];
    __n128 v19 = (long long *)(v12 - 16);
    uint64_t v20 = v15 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v21 = *v19;
      *(v18 - 1) = *(v19 - 1);
      *long long v18 = v21;
      v18 -= 2;
      v19 -= 2;
      v20 -= 4;
    }
    while (v20);
    uint64_t v12 = v17;
    if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_26:
      do
      {
        uint64_t v22 = *((void *)v12 - 1);
        v12 -= 8;
        *(void *)(v10 - 8) = v22;
        v10 -= 8;
      }
      while (v12 != v13);
    }
    uint64_t v12 = (unsigned char *)*a1;
  }
  *a1 = v10;
  a1[1] = v11;
  a1[2] = (uint64_t)&v9[8 * v8];
  if (v12) {
    operator delete(v12);
  }
  return v11;
}

void sub_10209AC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10209C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 56);
  if (v2 == v3 || v4 == v5) {
    return (v2 == v3) == (v4 == v5);
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v10 = *(void **)a1;
  if (*(void *)a1)
  {
    unint64_t v11 = *(void *)(a1 + 8);
    BOOL v12 = v11 < sub_EB04C4(v10);
    uint64_t v13 = *(void **)a2;
    if (*(void *)a2) {
      goto LABEL_10;
    }
  }
  else
  {
    BOOL v12 = 0;
    uint64_t v13 = *(void **)a2;
    if (*(void *)a2)
    {
LABEL_10:
      unint64_t v14 = *(void *)(a2 + 8);
      unint64_t v15 = sub_EB04C4(v13);
      BOOL v16 = v14 < v15;
      if (v14 < v15 && v12)
      {
        uint64_t v18 = sub_EB0624(*(void **)a1, *(void *)(a1 + 8));
        return v18 == sub_EB0624(*(void **)a2, *(void *)(a2 + 8));
      }
      return v12 ^ v16 ^ 1;
    }
  }
  BOOL v16 = 0;
  return v12 ^ v16 ^ 1;
}

void sub_1020AD0(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  long long v6 = v5;
  if (a2 <= (v4 - v5) >> 1)
  {
    if (a2)
    {
      bzero(v5, 2 * a2);
      long long v6 = &v5[2 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    uint64_t v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = (v8 >> 1) + a2;
    if (v10 < 0) {
      sub_2E00();
    }
    unint64_t v11 = v4 - v7;
    if (v11 > v10) {
      uint64_t v10 = v11;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 < 0) {
        sub_188D718();
      }
      uint64_t v13 = operator new(2 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    unint64_t v14 = &v13[2 * v9];
    size_t v15 = 2 * a2;
    BOOL v16 = &v13[2 * v12];
    bzero(v14, v15);
    char v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 2;
      if (v18 < 0x1E) {
        goto LABEL_32;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v19 = (v18 >> 1) + 1;
      unint64_t v20 = 2 * (v19 & 0xFFFFFFFFFFFFFFF0);
      long long v6 = &v5[-v20];
      v14 -= v20;
      long long v21 = &v13[2 * v9 - 16];
      uint64_t v22 = v5 - 16;
      unint64_t v23 = v19 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *long long v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 16;
      }
      while (v23);
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_32:
        do
        {
          __int16 v25 = *((_WORD *)v6 - 1);
          v6 -= 2;
          *((_WORD *)v14 - 1) = v25;
          v14 -= 2;
        }
        while (v6 != v7);
      }
      long long v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

void sub_1020C78(unint64_t *a1, unint64_t a2, const char *a3)
{
  unint64_t v7 = a1[1];
  unint64_t v6 = a1[2];
  uint64_t v8 = (char *)v7;
  if (v6 - v7 >= a2)
  {
    if (!a2)
    {
LABEL_57:
      a1[1] = (unint64_t)v8;
      return;
    }
    unint64_t v18 = (char *)(v7 + a2);
    if (a2 >= 8 && (v7 >= (unint64_t)(a3 + 1) || v18 <= a3))
    {
      if (a2 < 0x20)
      {
        unint64_t v20 = 0;
        goto LABEL_36;
      }
      unint64_t v20 = a2 & 0xFFFFFFFFFFFFFFE0;
      int8x16_t v28 = vld1q_dup_s8(a3);
      uint64_t v29 = (int8x16_t *)(v7 + 16);
      unint64_t v30 = a2 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v29[-1] = v28;
        int8x16_t *v29 = v28;
        v29 += 2;
        v30 -= 32;
      }
      while (v30);
      if (v20 == a2) {
        goto LABEL_56;
      }
      if ((a2 & 0x18) != 0)
      {
LABEL_36:
        uint64_t v8 = (char *)(v7 + (a2 & 0xFFFFFFFFFFFFFFF8));
        int8x8_t v31 = vld1_dup_s8(a3);
        double v32 = (int8x8_t *)(v7 + v20);
        unint64_t v33 = v20 - (a2 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          *v32++ = v31;
          v33 += 8;
        }
        while (v33);
        if ((a2 & 0xFFFFFFFFFFFFFFF8) == a2) {
          goto LABEL_56;
        }
        goto LABEL_55;
      }
      uint64_t v8 = (char *)(v7 + v20);
    }
    do
LABEL_55:
      *v8++ = *a3;
    while (v8 != v18);
LABEL_56:
    uint64_t v8 = (char *)(v7 + a2);
    goto LABEL_57;
  }
  uint64_t v9 = (char *)*a1;
  unint64_t v10 = v7 - *a1;
  unint64_t v11 = v10 + a2;
  if ((uint64_t)(v10 + a2) < 0) {
    sub_2E00();
  }
  unint64_t v12 = v6 - (void)v9;
  if (2 * v12 > v11) {
    unint64_t v11 = 2 * v12;
  }
  if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v13 = v11;
  }
  if (v13)
  {
    unint64_t v14 = (char *)operator new(v13);
    unint64_t v15 = (unint64_t)&v14[v10];
    BOOL v16 = &v14[v10 + a2];
    char v17 = &v14[v10];
    if (a2 < 8) {
      goto LABEL_41;
    }
  }
  else
  {
    unint64_t v14 = 0;
    unint64_t v15 = v7 - *a1;
    BOOL v16 = (char *)(v10 + a2);
    char v17 = (char *)v15;
    if (a2 < 8) {
      goto LABEL_41;
    }
  }
  if (v15 >= (unint64_t)(a3 + 1) || (char v17 = (char *)v15, v16 <= a3))
  {
    if (a2 < 0x20)
    {
      unint64_t v21 = 0;
      goto LABEL_28;
    }
    unint64_t v21 = a2 & 0xFFFFFFFFFFFFFFE0;
    int8x16_t v22 = vld1q_dup_s8(a3);
    unint64_t v23 = (int8x16_t *)&v14[v10 + 16];
    unint64_t v24 = a2 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v23[-1] = v22;
      int8x16_t *v23 = v22;
      v23 += 2;
      v24 -= 32;
    }
    while (v24);
    if (v21 == a2) {
      goto LABEL_42;
    }
    if ((a2 & 0x18) != 0)
    {
LABEL_28:
      char v17 = (char *)(v15 + (a2 & 0xFFFFFFFFFFFFFFF8));
      int8x8_t v25 = vld1_dup_s8(a3);
      unsigned int v26 = (int8x8_t *)&v14[v21 + v7 - (void)v9];
      unint64_t v27 = v21 - (a2 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        *v26++ = v25;
        v27 += 8;
      }
      while (v27);
      if ((a2 & 0xFFFFFFFFFFFFFFF8) == a2) {
        goto LABEL_42;
      }
      goto LABEL_41;
    }
    char v17 = (char *)(v15 + v21);
  }
  do
LABEL_41:
    *v17++ = *a3;
  while (v17 != v16);
LABEL_42:
  uint64_t v34 = (char *)*a1;
  unint64_t v35 = v7 - *a1;
  if (v7 != *a1)
  {
    if (v35 < 0x20) {
      goto LABEL_62;
    }
    if ((unint64_t)(v9 - v14) < 0x20) {
      goto LABEL_62;
    }
    uint64_t v8 = (char *)(v7 - (v35 & 0xFFFFFFFFFFFFFFE0));
    v15 -= v35 & 0xFFFFFFFFFFFFFFE0;
    double v36 = (long long *)(v7 - 16);
    unint64_t v37 = &v14[v7 - 16 - (void)v9];
    unint64_t v38 = v35 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v39 = *v36;
      *((_OWORD *)v37 - 1) = *(v36 - 1);
      *(_OWORD *)unint64_t v37 = v39;
      v37 -= 32;
      v36 -= 2;
      v38 -= 32;
    }
    while (v38);
    if (v35 != (v35 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_62:
      do
      {
        char v40 = *--v8;
        *(unsigned char *)--unint64_t v15 = v40;
      }
      while (v8 != v34);
    }
    uint64_t v8 = (char *)*a1;
  }
  *a1 = v15;
  a1[1] = (unint64_t)v16;
  a1[2] = (unint64_t)&v14[v13];
  if (v8)
  {
    operator delete(v8);
  }
}

char *sub_1020F40(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    sub_2E00();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x333333333333333) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(80 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = &v7[80 * v3];
  *(void *)uint64_t v8 = *(void *)a2;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v9 = &v7[80 * v6];
  *((void *)v8 + 3) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  long long v10 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v8 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v8 + 3) = v10;
  *(_OWORD *)(v8 + 57) = *(_OWORD *)(a2 + 57);
  unint64_t v11 = v8 + 80;
  unint64_t v12 = (char *)*a1;
  size_t v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    if (!v13) {
      return v11;
    }
    goto LABEL_21;
  }
  uint64_t v14 = 0;
  do
  {
    unint64_t v15 = &v8[v14];
    BOOL v16 = &v13[v14];
    *((void *)v15 - 10) = *(void *)&v13[v14 - 80];
    *((void *)v15 - 8) = 0;
    *((void *)v15 - 7) = 0;
    *(_OWORD *)(v15 - 72) = *(_OWORD *)&v13[v14 - 72];
    *((void *)v15 - 7) = *(void *)&v13[v14 - 56];
    *((void *)v16 - 9) = 0;
    *((void *)v16 - 8) = 0;
    *((void *)v16 - 7) = 0;
    long long v17 = *(_OWORD *)&v13[v14 - 48];
    long long v18 = *(_OWORD *)&v13[v14 - 32];
    *(_OWORD *)(v15 - 23) = *(_OWORD *)&v13[v14 - 23];
    *((_OWORD *)v15 - 3) = v17;
    *((_OWORD *)v15 - 2) = v18;
    v14 -= 80;
  }
  while (&v13[v14] != v12);
  uint64_t v19 = (char *)*a1;
  size_t v13 = (char *)a1[1];
  *a1 = &v8[v14];
  a1[1] = v11;
  a1[2] = v9;
  if (v13 != v19)
  {
    do
    {
      unint64_t v20 = (void *)*((void *)v13 - 9);
      if (v20)
      {
        *((void *)v13 - 8) = v20;
        operator delete(v20);
      }
      v13 -= 80;
    }
    while (v13 != v19);
    size_t v13 = v19;
  }
  if (v13) {
LABEL_21:
  }
    operator delete(v13);
  return v11;
}

uint64_t sub_10210EC(uint64_t *a1)
{
  unint64_t v2 = 0xCBEEA4E1A08AD8F3 * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x8AD8F2FBA93868) {
    sub_2E00();
  }
  if (0x97DD49C34115B1E6 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x97DD49C34115B1E6 * ((a1[2] - *a1) >> 3);
  }
  if (0xCBEEA4E1A08AD8F3 * ((a1[2] - *a1) >> 3) >= 0x456C797DD49C34) {
    unint64_t v4 = 0x8AD8F2FBA93868;
  }
  else {
    unint64_t v4 = v3;
  }
  if (v4)
  {
    if (v4 > 0x8AD8F2FBA93868) {
      sub_188D718();
    }
    uint64_t v5 = (char *)operator new(472 * v4);
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v12 = (uint64_t)&v5[472 * v2];
  size_t v13 = &v5[472 * v4];
  sub_EAFC08(v12);
  uint64_t v6 = v12;
  uint64_t v7 = v12 + 472;
  uint64_t v9 = (long long *)*a1;
  uint64_t v8 = (long long *)a1[1];
  if (v8 == (long long *)*a1)
  {
    *a1 = v12;
    a1[1] = v7;
    a1[2] = (uint64_t)v13;
  }
  else
  {
    do
    {
      v6 -= 472;
      uint64_t v8 = (long long *)((char *)v8 - 472);
      sub_446D30((uint64_t)(a1 + 2), v6, v8);
    }
    while (v8 != v9);
    long long v10 = (long long *)*a1;
    uint64_t v8 = (long long *)a1[1];
    *a1 = v6;
    a1[1] = v7;
    a1[2] = (uint64_t)v13;
    if (v8 != v10)
    {
      do
      {
        uint64_t v8 = (long long *)((char *)v8 - 472);
        sub_405F44((uint64_t)v8);
      }
      while (v8 != v10);
      uint64_t v8 = v10;
    }
  }
  if (v8) {
    operator delete(v8);
  }
  return v12 + 472;
}

void sub_1021274(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_446EA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1021288(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v6 = 3 * a2;
    uint64_t v7 = operator new(24 * a2);
    uint64_t v8 = v7;
    *a1 = v7;
    a1[1] = v7;
    uint64_t v9 = &v7[v6];
    a1[2] = &v7[v6];
    long long v10 = *(const void **)a3;
    int64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
    if (v11)
    {
      if (v11 < 0)
      {
        *uint64_t v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        sub_2E00();
      }
      uint64_t v12 = 24 * a2;
      do
      {
        *uint64_t v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
        size_t v13 = (char *)operator new(v11);
        *uint64_t v8 = v13;
        v8[1] = v13;
        v8[2] = &v13[8 * (v11 >> 3)];
        memcpy(v13, v10, v11 & 0xFFFFFFFFFFFFFFF8);
        v8[1] = &v13[8 * ((unint64_t)v11 >> 3)];
        v8 += 3;
        v12 -= 24;
      }
      while (v12);
    }
    else
    {
      bzero(v7, 24 * ((v6 * 8 - 24) / 0x18uLL) + 24);
    }
    a1[1] = v9;
  }
  return a1;
}

void sub_10213C4(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void *sub_10213F4(void *a1, unsigned int a2)
{
  uint64_t v4 = a2;
  v13[0] = a2;
  v13[1] = (unint64_t)&v12;
  v13[2] = (unint64_t)&v11;
  v13[3] = (unint64_t)&v10;
  uint64_t v5 = sub_ED2164(a1, v13);
  *((_DWORD *)v5 + 218) = 0;
  *(_OWORD *)(v5 + 105) = 0u;
  *(_OWORD *)(v5 + 107) = 0u;
  *(_OWORD *)(v5 + 103) = 0u;
  *((_OWORD *)v5 + 48) = 0u;
  *((_OWORD *)v5 + 49) = 0u;
  *((_OWORD *)v5 + 50) = 0u;
  *((_DWORD *)v5 + 204) = 0;
  if (a2)
  {
    uint64_t v6 = (char *)operator new(4 * v4);
    a1[106] = v6;
    a1[107] = v6;
    a1[108] = &v6[4 * v4];
  }
  uint64_t v7 = (char *)operator new(0x17D0uLL);
  a1[103] = v7;
  a1[104] = v7;
  a1[105] = v7 + 6096;
  if (a2)
  {
    uint64_t v8 = (char *)operator new(48 * v4);
    a1[96] = v8;
    a1[97] = v8;
    a1[98] = &v8[48 * v4];
  }
  return a1;
}

void sub_10214DC(_Unwind_Exception *a1)
{
  sub_3310C(v2);
  uint64_t v4 = (void **)(v1 + 96);
  uint64_t v5 = (void *)v1[99];
  if (v5)
  {
    v1[100] = v5;
    operator delete(v5);
    uint64_t v6 = *v4;
    if (!*v4)
    {
LABEL_3:
      sub_328138((uint64_t)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v6 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[97] = v6;
  operator delete(v6);
  sub_328138((uint64_t)v1);
  _Unwind_Resume(a1);
}

void sub_1021564(uint64_t a1, unsigned int **a2, unsigned int **a3, unsigned int **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  uint64_t v10 = a1 + 8;
  *(void *)(a1 + 864) = *(void *)(a1 + 856);
  *(void *)(a1 + 840) = *(void *)(a1 + 832);
  *(_DWORD *)(a1 + 880) = 0;
  *(void *)(a1 + 784) = *(void *)(a1 + 776);
  do
  {
    uint64_t v12 = a1 + v9;
    if (*(void *)(a1 + v9 + 24))
    {
      unint64_t v13 = *(void *)(v12 + 32);
      if (v13 >= 0x80)
      {
        char v11 = (void *)(a1 + v9);
        operator delete(*(void **)(v12 + 8));
        *(void *)(v12 + 8) = &unk_20E1710;
        v11[6] = 0;
        v11[3] = 0;
        v11[4] = 0;
        unint64_t v11[2] = 0;
      }
      else if (v13)
      {
        *(void *)(v12 + 24) = 0;
        memset(*(void **)(v12 + 8), 128, v13 + 8);
        *(unsigned char *)(*(void *)(v12 + 8) + v13) = -1;
        unint64_t v14 = *(void *)(v12 + 32);
        if (v14 == 7) {
          uint64_t v15 = 6;
        }
        else {
          uint64_t v15 = v14 - (v14 >> 3);
        }
        *(void *)(a1 + v9 + 48) = v15 - *(void *)(v12 + 24);
      }
    }
    v9 += 48;
  }
  while (v9 != 768);
  *(void *)(a1 + 808) = *(void *)(a1 + 800);
  *(_DWORD *)(a1 + 824) = 0;
  BOOL v16 = *a2;
  long long v17 = a2[1];
  if (*a2 != v17)
  {
    do
    {
      unsigned int v18 = *v16++;
      long long v19 = *(_OWORD *)(a6 + 16);
      v23[0] = *(_OWORD *)a6;
      v23[1] = v19;
      uint64_t v24 = *(void *)(a6 + 32);
      unsigned int v25 = v18;
      sub_10219A8(v10, &v25, (uint64_t)v23);
    }
    while (v16 != v17);
  }
  sub_10216CC(a1, a3, a4, a5);
}

void sub_10216CC(uint64_t a1, unsigned int **a2, unsigned int **a3, uint64_t a4)
{
  if (*(_DWORD *)(a1 + 880))
  {
    uint64_t v5 = a1;
    uint64_t v36 = a1 + 8;
    do
    {
      uint64_t v6 = (double *)(*(void *)(v5 + 776) + 48 * **(unsigned int **)(v5 + 832));
      uint64_t v7 = *(unsigned int *)v6;
      unsigned int v8 = *((_DWORD *)v6 + 2);
      unsigned int v39 = *((_DWORD *)v6 + 3);
      double v9 = v6[3];
      uint64_t v10 = *((void *)v6 + 5);
      uint64_t v37 = *((void *)v6 + 4);
      uint64_t v38 = *((void *)v6 + 2);
      sub_1022484(v36);
      if (v8 > **a2) {
        break;
      }
      unsigned int v46 = v7;
      if (**a3 != v7 && (unint64_t)sub_10262A0((uint64_t)a3[1], &v46) >= 2)
      {
        uint64_t v11 = (uint64_t)a3[2];
        unint64_t v45 = **a3 | ((unint64_t)v46 << 32);
        sub_102292C(v11, (unsigned int *)&v45, (uint64_t)&v40);
        uint64_t v12 = v40;
        if (LOBYTE(v42))
        {
          unint64_t v13 = (unint64_t *)(v40[1] + 48 * (void)v41);
          *unint64_t v13 = v45;
          v13[1] = 0x7FFFFFFFFFFFFFFFLL;
          v13[2] = 0x7FFFFFFFFFFFFFFFLL;
          v13[3] = 0;
          unint64_t v13[4] = 0;
          v13[5] = 0;
        }
        uint64_t v14 = v12[1] + 48 * (void)v41;
        *(_DWORD *)(v14 + 8) = v8;
        *(_DWORD *)(v14 + 12) = v39;
        *(void *)(v14 + 16) = v38;
        *(double *)(v14 + 24) = v9;
        *(void *)(v14 + 32) = v37;
        *(void *)(v14 + 40) = v10;
      }
      uint64_t v15 = *(void *)v5;
      sub_10230AC(*(void *)v5, v7);
      uint64_t v16 = *(void *)(v15 + 72) + 184 * *(unsigned int *)(*(void *)(v15 + 48) + 4 * v7);
      sub_10230AC(v15, v7);
      uint64_t v17 = *(void *)(v15 + 72) + 184 * *(unsigned int *)(*(void *)(v15 + 48) + 4 * (v7 + 1));
      while (v16 != v17)
      {
        if (**(unsigned char **)a4) {
          BOOL v22 = *(unsigned char *)(v16 + 153) == 0;
        }
        else {
          BOOL v22 = 0;
        }
        if (!v22)
        {
          int v23 = *(_DWORD *)(v16 + 120);
          int v24 = *(_DWORD *)(v16 + 124);
          uint64_t v25 = *(void *)(v16 + 128);
          BOOL v26 = v23 == -1 || v24 == 0x7FFFFFFF;
          BOOL v27 = v26 || v25 == 0x7FFFFFFFFFFFFFFFLL;
          if (!v27 && (**(unsigned char **)(a4 + 8) || (*(unsigned char *)(v16 + 150) & 0x10) == 0) && !*(unsigned char *)(v16 + 40))
          {
            uint64_t v29 = *(void *)(v16 + 16);
            uint64_t v28 = *(void *)(v16 + 24);
            if (v29 == v28)
            {
LABEL_11:
              LODWORD(v45) = *(_DWORD *)(v16 + 8);
              unsigned int v18 = (void *)((v23 + v8) | ((unint64_t)(v24 + v39) << 32));
              double v19 = v9 + *(double *)(v16 + 160);
              uint64_t v20 = *(void *)(v16 + 168) + v37;
              uint64_t v21 = *(void *)(v16 + 176) + v10;
              char v40 = v18;
              unint64_t v41 = (void *)(v25 + v38);
              double v42 = v19;
              uint64_t v43 = v20;
              uint64_t v44 = v21;
              sub_1022670(v36, (unsigned int *)&v45, (uint64_t)&v40);
            }
            else
            {
              uint64_t v30 = *(void *)(a4 + 16) + 4248;
              while (1)
              {
                sub_3EB6C8(v30, *(void *)(*(void *)v29 + 32), (uint64_t)&v40);
                double v32 = v40;
                int8x8_t v31 = v41;
                if (v40)
                {
                  unint64_t v41 = v40;
                  operator delete(v40);
                }
                if (v32 != v31) {
                  break;
                }
                v29 += 8;
                if (v29 == v28)
                {
                  int v23 = *(_DWORD *)(v16 + 120);
                  int v24 = *(_DWORD *)(v16 + 124);
                  uint64_t v25 = *(void *)(v16 + 128);
                  goto LABEL_11;
                }
              }
            }
          }
        }
        v16 += 184;
      }
      uint64_t v5 = a1;
    }
    while (*(_DWORD *)(a1 + 880));
  }
}

void sub_10219A8(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  ++*(_DWORD *)(a1 + 816);
  uint64_t v7 = *a2;
  unint64_t v8 = 265 * ((~v7 + (v7 << 21)) ^ ((unint64_t)(~v7 + (v7 << 21)) >> 24));
  unint64_t v9 = 2147483649u * ((21 * (v8 ^ (v8 >> 14))) ^ ((21 * (v8 ^ (v8 >> 14))) >> 28));
  uint64_t v10 = (void *)(a1 + 48 * (((BYTE1(v9) ^ BYTE2(v9)) ^ BYTE3(v9)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  uint64_t v13 = 0x101010101010101 * (v9 & 0x7F);
  while (1)
  {
    unint64_t v14 = v11 & v12;
    uint64_t v15 = *(void *)(*v10 + v14);
    unint64_t v16 = ((v15 ^ v13) - 0x101010101010101) & ~(v15 ^ v13) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_6:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v6 += 8;
    unint64_t v11 = v6 + v14;
  }
  uint64_t v17 = v10[1];
  while (1)
  {
    unint64_t v18 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v12;
    if (*(_DWORD *)(v17 + 8 * v18) == v7) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_6;
    }
  }
  if (v12 == v18)
  {
LABEL_9:
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 776) - *(void *)(a1 + 768)) >> 4);
    sub_ED2D48(a1, a2, (uint64_t)&v31);
    uint64_t v20 = v32;
    uint64_t v21 = *(void *)(v31 + 8);
    if (v33) {
      *(_DWORD *)(v21 + 8 * v32) = *a2;
    }
    *(_DWORD *)(v21 + 8 * v20 + 4) = v19;
    sub_1021C34((char **)(a1 + 768), a2, (long long *)a3);
    BOOL v22 = (uint64_t *)(a1 + 824);
    uint64_t v23 = *(void *)(a1 + 848);
    if (v19 >= (unint64_t)((*(void *)(a1 + 856) - v23) >> 2)
      || *(_DWORD *)(v23 + 4 * v19) == -1)
    {
      sub_1021D9C((uint64_t)v22, v19, a3);
    }
    else
    {
      sub_102211C(v22, v19, a3);
    }
    return;
  }
  uint64_t v24 = v17 + 8 * v18;
  uint64_t v25 = *(void *)(a1 + 768) + 48 * *(unsigned int *)(v24 + 4);
  long long v26 = *(_OWORD *)a3;
  long long v27 = *(_OWORD *)(a3 + 16);
  *(void *)(v25 + 40) = *(void *)(a3 + 32);
  *(_OWORD *)(v25 + 24) = v27;
  *(_OWORD *)(v25 + 8) = v26;
  uint64_t v28 = (uint64_t *)(a1 + 824);
  unint64_t v29 = *(unsigned int *)(v24 + 4);
  uint64_t v30 = *(void *)(a1 + 848);
  if (v29 >= (*(void *)(a1 + 856) - v30) >> 2 || *(_DWORD *)(v30 + 4 * v29) == -1)
  {
    sub_1021D9C((uint64_t)v28, v29, a3);
  }
  else
  {
    sub_102211C(v28, v29, a3);
  }
}

char *sub_1021C34(char **a1, _DWORD *a2, long long *a3)
{
  uint64_t v7 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v11 = *a1;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x555555555555555) {
      sub_2E00();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v11) >> 4);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v15 = 0x555555555555555;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 > 0x555555555555555) {
        sub_188D718();
      }
      unint64_t v16 = (char *)operator new(48 * v15);
    }
    else
    {
      unint64_t v16 = 0;
    }
    uint64_t v17 = &v16[48 * v12];
    *(_DWORD *)uint64_t v17 = *a2;
    long long v18 = a3[1];
    *(_OWORD *)(v17 + 8) = *a3;
    *(_OWORD *)(v17 + 24) = v18;
    *((void *)v17 + 5) = *((void *)a3 + 4);
    uint64_t v10 = v17 + 48;
    if (v7 != v11)
    {
      do
      {
        long long v19 = *((_OWORD *)v7 - 3);
        long long v20 = *((_OWORD *)v7 - 1);
        *((_OWORD *)v17 - 2) = *((_OWORD *)v7 - 2);
        *((_OWORD *)v17 - 1) = v20;
        *((_OWORD *)v17 - 3) = v19;
        v17 -= 48;
        v7 -= 48;
      }
      while (v7 != v11);
      uint64_t v7 = *a1;
    }
    *a1 = v17;
    a1[1] = v10;
    a1[2] = &v16[48 * v15];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v7 = *a2;
    long long v8 = *a3;
    long long v9 = a3[1];
    *((void *)v7 + 5) = *((void *)a3 + 4);
    *(_OWORD *)(v7 + 24) = v9;
    *(_OWORD *)(v7 + 8) = v8;
    uint64_t v10 = v7 + 48;
  }
  a1[1] = v10;
  return v10 - 48;
}

void sub_1021D9C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v7 = a1 + 24;
  uint64_t v10 = v9 - v8;
  unint64_t v11 = (v9 - v8) >> 2;
  if (v11 <= a2)
  {
    do
    {
      unint64_t v15 = (v10 >> 1) | 1;
      if (v15 <= v11)
      {
        if (v15 >= v11)
        {
          uint64_t v10 = v9 - v8;
          unint64_t v16 = (v9 - v8) >> 2;
          if (v11 < v16) {
LABEL_12:
          }
            memset((void *)(v8 + 4 * v11), 255, v10 - 4 * v11);
        }
        else
        {
          uint64_t v9 = v8 + 4 * v15;
          *(void *)(a1 + 32) = v9;
          uint64_t v10 = 4 * v15;
          unint64_t v16 = (uint64_t)(4 * v15) >> 2;
          if (v11 < v16) {
            goto LABEL_12;
          }
        }
      }
      else
      {
        sub_4394C(v7, v15 - v11);
        uint64_t v8 = *(void *)(a1 + 24);
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = v9 - v8;
        unint64_t v16 = (v9 - v8) >> 2;
        if (v11 < v16) {
          goto LABEL_12;
        }
      }
      unint64_t v11 = v16;
    }
    while (v16 <= v6);
  }
  *(_OWORD *)&v55[4] = *(_OWORD *)a3;
  *(_OWORD *)&v55[20] = *(_OWORD *)(a3 + 16);
  *(void *)&v55[36] = *(void *)(a3 + 32);
  unint64_t v13 = *(_OWORD **)(a1 + 8);
  unint64_t v12 = *(void *)(a1 + 16);
  if ((unint64_t)v13 >= v12)
  {
    uint64_t v17 = *(_OWORD **)a1;
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - *(void *)a1) >> 4);
    unint64_t v19 = v18 + 1;
    if (v18 + 1 > 0x555555555555555) {
      sub_2E00();
    }
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v17) >> 4);
    if (2 * v20 > v19) {
      unint64_t v19 = 2 * v20;
    }
    if (v20 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v21 = 0x555555555555555;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      if (v21 > 0x555555555555555) {
        sub_188D718();
      }
      BOOL v22 = (char *)operator new(48 * v21);
    }
    else
    {
      BOOL v22 = 0;
    }
    uint64_t v23 = &v22[48 * v18];
    *(_DWORD *)uint64_t v23 = a2;
    *(_OWORD *)(v23 + 4) = *(_OWORD *)v55;
    *(_OWORD *)(v23 + 20) = *(_OWORD *)&v55[16];
    *((_OWORD *)v23 + 2) = *(_OWORD *)&v55[28];
    unint64_t v14 = v23 + 48;
    if (v13 != v17)
    {
      do
      {
        long long v24 = *(v13 - 3);
        long long v25 = *(v13 - 1);
        *((_OWORD *)v23 - 2) = *(v13 - 2);
        *((_OWORD *)v23 - 1) = v25;
        *((_OWORD *)v23 - 3) = v24;
        v23 -= 48;
        v13 -= 3;
      }
      while (v13 != v17);
      unint64_t v13 = *(_OWORD **)a1;
    }
    *(void *)a1 = v23;
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = &v22[48 * v21];
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v13 = a2;
    *(_OWORD *)((char *)v13 + 4) = *(_OWORD *)v55;
    *(_OWORD *)((char *)v13 + 20) = *(_OWORD *)&v55[16];
    v13[2] = *(_OWORD *)&v55[28];
    unint64_t v14 = v13 + 3;
  }
  *(void *)(a1 + 8) = v14;
  *(_DWORD *)(*(void *)(a1 + 24) + 4 * v6) = *(_DWORD *)(a1 + 48);
  unsigned int v26 = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = v26 + 1;
  if (v26)
  {
    long long v27 = *(_OWORD **)a1;
    do
    {
      unsigned int v37 = v26 - 1;
      unsigned int v38 = v26;
      unsigned int v39 = (int *)&v27[3 * v26];
      unsigned int v26 = (v26 - 1) >> 2;
      char v40 = &v27[3 * v26];
      unsigned int v42 = *((_DWORD *)v40 + 2);
      uint64_t v41 = (uint64_t)v40 + 8;
      uint64_t v44 = (long long *)(v39 + 2);
      unsigned int v43 = v39[2];
      BOOL v45 = v42 >= v43;
      if (v42 != v43)
      {
        if (!v45) {
          return;
        }
        goto LABEL_32;
      }
      int v46 = *((_DWORD *)v40 + 3);
      int v47 = v39[3];
      BOOL v48 = v46 < v47;
      if (v46 == v47)
      {
        uint64_t v49 = *((void *)v40 + 2);
        uint64_t v50 = *((void *)v39 + 2);
        BOOL v48 = v49 < v50;
        if (v49 == v50)
        {
          double v51 = *((double *)&v27[3 * v26 + 1] + 1);
          double v52 = *((double *)&v27[3 * v38 + 1] + 1);
          if (v51 != v52)
          {
            if (v51 < v52) {
              return;
            }
            goto LABEL_32;
          }
          uint64_t v53 = *(void *)&v27[3 * v26 + 2];
          uint64_t v54 = *(void *)&v27[3 * v38 + 2];
          BOOL v48 = v53 < v54;
          if (v53 == v54) {
            BOOL v48 = *((void *)&v27[3 * v26 + 2] + 1) < *((void *)&v27[3 * v38 + 2] + 1);
          }
        }
      }
      if (v48) {
        return;
      }
LABEL_32:
      int v28 = *v39;
      *unsigned int v39 = *(_DWORD *)v40;
      *(_DWORD *)char v40 = v28;
      long long v29 = *v44;
      long long v30 = *(_OWORD *)(v39 + 6);
      uint64_t v31 = *((void *)v39 + 5);
      uint64_t v32 = *((void *)v40 + 5);
      long long v33 = *(_OWORD *)(v41 + 16);
      *uint64_t v44 = *(_OWORD *)v41;
      *(_OWORD *)(v39 + 6) = v33;
      *((void *)v39 + 5) = v32;
      *(void *)(v41 + 32) = v31;
      *(_OWORD *)uint64_t v41 = v29;
      *(_OWORD *)(v41 + 16) = v30;
      long long v27 = *(_OWORD **)a1;
      uint64_t v34 = *(void *)(a1 + 24);
      uint64_t v35 = 4 * *(unsigned int *)(*(void *)a1 + 48 * v38);
      uint64_t v36 = 4 * *(unsigned int *)(*(void *)a1 + 48 * v26);
      LODWORD(v32) = *(_DWORD *)(v34 + v35);
      *(_DWORD *)(v34 + v35) = *(_DWORD *)(v34 + v36);
      *(_DWORD *)(v34 + v36) = v32;
    }
    while (v37 > 3);
  }
}

uint64_t *sub_102211C(uint64_t *result, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(result[3] + 4 * a2);
  uint64_t v4 = *result + 48 * v3;
  unsigned int v6 = *(_DWORD *)(v4 + 8);
  int v5 = *(_DWORD *)(v4 + 12);
  uint64_t v7 = *(void *)(v4 + 16);
  double v8 = *(double *)(v4 + 24);
  uint64_t v10 = *(void *)(v4 + 32);
  uint64_t v9 = *(void *)(v4 + 40);
  uint64_t v11 = *(void *)(a3 + 32);
  long long v12 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 24) = v12;
  *(void *)(v4 + 40) = v11;
  if (*(_DWORD *)a3 != v6)
  {
    if (*(_DWORD *)a3 < v6) {
      goto LABEL_8;
    }
    return (uint64_t *)sub_10222D8(result, v3);
  }
  int v13 = *(_DWORD *)(a3 + 4);
  BOOL v14 = v13 < v5;
  if (v13 != v5 || (v15 = *(void *)(a3 + 8), BOOL v14 = v15 < v7, v15 != v7))
  {
LABEL_26:
    if (v14) {
      goto LABEL_8;
    }
    return (uint64_t *)sub_10222D8(result, v3);
  }
  double v16 = *(double *)(a3 + 16);
  if (v16 == v8)
  {
    uint64_t v45 = *(void *)(a3 + 24);
    BOOL v14 = v45 < v10;
    if (v45 == v10) {
      BOOL v14 = *(void *)(a3 + 32) < v9;
    }
    goto LABEL_26;
  }
  if (v16 >= v8) {
    return (uint64_t *)sub_10222D8(result, v3);
  }
LABEL_8:
  if (v3)
  {
    uint64_t v17 = *result;
    do
    {
      unsigned int v27 = v3 - 1;
      unsigned int v28 = v3;
      uint64_t v29 = v17 + 48 * v3;
      LODWORD(v3) = (v3 - 1) >> 2;
      uint64_t v30 = v17 + 48 * v3;
      unsigned int v32 = *(_DWORD *)(v30 + 8);
      uint64_t v31 = v30 + 8;
      long long v33 = (long long *)(v29 + 8);
      unsigned int v34 = *(_DWORD *)(v29 + 8);
      BOOL v35 = v32 >= v34;
      if (v32 != v34)
      {
        if (!v35) {
          return result;
        }
        goto LABEL_12;
      }
      int v36 = *(_DWORD *)(v30 + 12);
      int v37 = *(_DWORD *)(v29 + 12);
      BOOL v38 = v36 < v37;
      if (v36 == v37)
      {
        uint64_t v39 = *(void *)(v30 + 16);
        uint64_t v40 = *(void *)(v29 + 16);
        BOOL v38 = v39 < v40;
        if (v39 == v40)
        {
          double v41 = *(double *)(v17 + 48 * v3 + 24);
          double v42 = *(double *)(v17 + 48 * v28 + 24);
          if (v41 != v42)
          {
            if (v41 < v42) {
              return result;
            }
            goto LABEL_12;
          }
          uint64_t v43 = *(void *)(v17 + 48 * v3 + 32);
          uint64_t v44 = *(void *)(v17 + 48 * v28 + 32);
          BOOL v38 = v43 < v44;
          if (v43 == v44) {
            BOOL v38 = *(void *)(v17 + 48 * v3 + 40) < *(void *)(v17 + 48 * v28 + 40);
          }
        }
      }
      if (v38) {
        return result;
      }
LABEL_12:
      int v18 = *(_DWORD *)v29;
      *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
      *(_DWORD *)uint64_t v30 = v18;
      long long v19 = *v33;
      long long v20 = *(_OWORD *)(v29 + 24);
      uint64_t v21 = *(void *)(v29 + 40);
      uint64_t v22 = *(void *)(v30 + 40);
      long long v23 = *(_OWORD *)(v31 + 16);
      *long long v33 = *(_OWORD *)v31;
      *(_OWORD *)(v29 + 24) = v23;
      *(void *)(v29 + 40) = v22;
      *(void *)(v31 + 32) = v21;
      *(_OWORD *)uint64_t v31 = v19;
      *(_OWORD *)(v31 + 16) = v20;
      uint64_t v17 = *result;
      uint64_t v24 = result[3];
      uint64_t v25 = 4 * *(unsigned int *)(*result + 48 * v28);
      uint64_t v26 = 4 * *(unsigned int *)(*result + 48 * v3);
      LODWORD(v22) = *(_DWORD *)(v24 + v25);
      *(_DWORD *)(v24 + v25) = *(_DWORD *)(v24 + v26);
      *(_DWORD *)(v24 + v26) = v22;
    }
    while (v27 >= 4);
  }
  return result;
}

uint64_t sub_10222D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = (4 * a2) | 1u;
  unsigned int v3 = *((_DWORD *)a1 + 12);
  if (v2 < v3)
  {
    int v4 = 4 * a2;
    while (1)
    {
      unsigned int v5 = v4 + 5;
      if (v5 >= v3) {
        unsigned int v6 = v3;
      }
      else {
        unsigned int v6 = v5;
      }
      if (v2 >= v6) {
        return a2;
      }
      uint64_t v7 = *a1;
      uint64_t v8 = *a1 + 48 * a2;
      unsigned int v9 = *(_DWORD *)(v8 + 8);
      uint64_t v10 = *(unsigned int *)(v8 + 12);
      uint64_t v11 = v8 + 8;
      uint64_t v12 = *(void *)(v11 + 8);
      double v13 = *(double *)(v11 + 16);
      uint64_t v14 = *(void *)(v11 + 24);
      uint64_t v15 = *(void *)(v11 + 32);
      double v16 = (void *)(*a1 + 48 * v2 + 40);
      uint64_t v17 = 0xFFFFFFFFLL;
      do
      {
        unsigned int v18 = *((_DWORD *)v16 - 8);
        if (v18 == v9)
        {
          uint64_t v19 = *((unsigned int *)v16 - 7);
          if (v19 == v10)
          {
            uint64_t v20 = *(v16 - 3);
            BOOL v21 = v20 < v12;
            if (v20 != v12) {
              goto LABEL_23;
            }
            double v22 = *((double *)v16 - 2);
            if (v22 != v13)
            {
              uint64_t v19 = v10;
              if (v22 < v13) {
                goto LABEL_8;
              }
              goto LABEL_9;
            }
            uint64_t v23 = *(v16 - 1);
            BOOL v21 = v23 < v14;
            if (v23 == v14)
            {
              uint64_t v19 = v10;
              if (*v16 < v15) {
                goto LABEL_8;
              }
            }
            else
            {
LABEL_23:
              uint64_t v19 = v10;
              if (v21) {
                goto LABEL_8;
              }
            }
          }
          else if ((int)v19 < (int)v10)
          {
            goto LABEL_8;
          }
        }
        else if (v18 < v9)
        {
          uint64_t v19 = *((unsigned int *)v16 - 7);
LABEL_8:
          uint64_t v12 = *(v16 - 3);
          double v13 = *((double *)v16 - 2);
          uint64_t v14 = *(v16 - 1);
          uint64_t v15 = *v16;
          uint64_t v10 = v19;
          unsigned int v9 = *((_DWORD *)v16 - 8);
          uint64_t v17 = v2;
        }
LABEL_9:
        uint64_t v2 = (v2 + 1);
        v16 += 6;
      }
      while (v6 != v2);
      if (v17 < v3)
      {
        uint64_t v24 = (int *)(v7 + 48 * v17);
        uint64_t v25 = 48 * a2;
        int v26 = *v24;
        *uint64_t v24 = *(_DWORD *)(v7 + v25);
        *(_DWORD *)(v7 + v25) = v26;
        long long v27 = *(_OWORD *)(v24 + 2);
        long long v28 = *(_OWORD *)(v24 + 6);
        uint64_t v29 = *((void *)v24 + 5);
        uint64_t v30 = *(void *)(v11 + 32);
        long long v31 = *(_OWORD *)(v11 + 16);
        *(_OWORD *)(v24 + 2) = *(_OWORD *)v11;
        *(_OWORD *)(v24 + 6) = v31;
        *((void *)v24 + 5) = v30;
        *(void *)(v11 + 32) = v29;
        *(_OWORD *)uint64_t v11 = v27;
        *(_OWORD *)(v11 + 16) = v28;
        uint64_t v32 = a1[3];
        uint64_t v33 = 4 * *(unsigned int *)(*a1 + 48 * v17);
        uint64_t v34 = 4 * *(unsigned int *)(*a1 + v25);
        LODWORD(v29) = *(_DWORD *)(v32 + v33);
        *(_DWORD *)(v32 + v33) = *(_DWORD *)(v32 + v34);
        *(_DWORD *)(v32 + v34) = v29;
        int v4 = 4 * v17;
        uint64_t v2 = (4 * v17) | 1u;
        unsigned int v3 = *((_DWORD *)a1 + 12);
        a2 = v17;
        if (v2 < v3) {
          continue;
        }
      }
      return a2;
    }
  }
  return a2;
}

void sub_1022484(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 824);
  unsigned int v3 = *(unsigned int **)(a1 + 824);
  int v4 = *(char **)(a1 + 800);
  unsigned int v5 = v4;
  unint64_t v6 = *(void *)(a1 + 808);
  if ((unint64_t)v4 >= v6)
  {
    uint64_t v8 = *(char **)(a1 + 792);
    uint64_t v9 = (v4 - v8) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      sub_2E00();
    }
    uint64_t v11 = v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 62) {
        sub_188D718();
      }
      double v13 = operator new(4 * v12);
    }
    else
    {
      double v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    uint64_t v15 = &v13[4 * v12];
    *uint64_t v14 = *v3;
    uint64_t v7 = v14 + 1;
    if (v4 != v8)
    {
      unint64_t v16 = v4 - v8 - 4;
      if (v16 < 0x2C) {
        goto LABEL_29;
      }
      if ((unint64_t)(v8 - v13) < 0x20) {
        goto LABEL_29;
      }
      uint64_t v17 = (v16 >> 2) + 1;
      uint64_t v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
      unsigned int v5 = &v4[-v18];
      uint64_t v14 = (_DWORD *)((char *)v14 - v18);
      uint64_t v19 = &v13[4 * v9 - 16];
      uint64_t v20 = v4 - 16;
      uint64_t v21 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        _OWORD *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 8;
      }
      while (v21);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          int v23 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--uint64_t v14 = v23;
        }
        while (v5 != v8);
      }
    }
    *(void *)(a1 + 792) = v14;
    *(void *)(a1 + 800) = v7;
    *(void *)(a1 + 808) = v15;
    if (v8)
    {
      operator delete(v8);
      unsigned int v3 = (unsigned int *)*v2;
    }
  }
  else
  {
    *(_DWORD *)int v4 = *v3;
    uint64_t v7 = v4 + 4;
  }
  *(void *)(a1 + 800) = v7;
  *(_DWORD *)(*(void *)(a1 + 848) + 4 * *v3) = -1;
  unsigned int v24 = *(_DWORD *)(a1 + 872) - 1;
  *(_DWORD *)(a1 + 872) = v24;
  if (v24)
  {
    uint64_t v25 = &v3[12 * v24];
    *unsigned int v3 = *v25;
    *(_OWORD *)(v3 + 2) = *(_OWORD *)(v25 + 2);
    *(_OWORD *)(v3 + 6) = *(_OWORD *)(v25 + 6);
    *((void *)v3 + 5) = *((void *)v25 + 5);
    *(_DWORD *)(*(void *)(a1 + 848) + 4 * **(unsigned int **)(a1 + 824)) = 0;
    sub_10222D8(v2, 0);
  }
  *(void *)(a1 + 832) -= 48;
}

uint64_t sub_1022670(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = *a2;
  unint64_t v8 = 265 * ((~v7 + (v7 << 21)) ^ ((unint64_t)(~v7 + (v7 << 21)) >> 24));
  unint64_t v9 = 2147483649u * ((21 * (v8 ^ (v8 >> 14))) ^ ((21 * (v8 ^ (v8 >> 14))) >> 28));
  unint64_t v10 = (void *)(a1 + 48 * (((BYTE1(v9) ^ BYTE2(v9)) ^ BYTE3(v9)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  uint64_t v13 = 0x101010101010101 * (v9 & 0x7F);
  while (1)
  {
    unint64_t v14 = v11 & v12;
    uint64_t v15 = *(void *)(*v10 + v14);
    unint64_t v16 = ((v15 ^ v13) - 0x101010101010101) & ~(v15 ^ v13) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_6:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v6 += 8;
    unint64_t v11 = v6 + v14;
  }
  uint64_t v17 = v10[1];
  while (1)
  {
    unint64_t v18 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v12;
    if (*(_DWORD *)(v17 + 8 * v18) == v7) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_6;
    }
  }
  if (v12 == v18)
  {
LABEL_9:
    ++*(_DWORD *)(a1 + 816);
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 776) - *(void *)(a1 + 768)) >> 4);
    sub_ED2D48(a1, a2, (uint64_t)&v45);
    uint64_t v20 = v46;
    uint64_t v21 = *(void *)(v45 + 8);
    if (v47) {
      *(_DWORD *)(v21 + 8 * v46) = *a2;
    }
    *(_DWORD *)(v21 + 8 * v20 + 4) = v19;
    sub_1021C34((char **)(a1 + 768), a2, (long long *)a3);
    long long v22 = (uint64_t *)(a1 + 824);
    uint64_t v23 = *(void *)(a1 + 848);
    if (v19 < (unint64_t)((*(void *)(a1 + 856) - v23) >> 2)
      && *(_DWORD *)(v23 + 4 * v19) != -1)
    {
      LODWORD(v24) = v19;
LABEL_14:
      sub_102211C(v22, v24, a3);
      return 1;
    }
    LODWORD(v24) = v19;
LABEL_16:
    sub_1021D9C((uint64_t)v22, v24, a3);
    return 1;
  }
  uint64_t v26 = v17 + 8 * v18;
  unsigned int v28 = *(_DWORD *)(v26 + 4);
  long long v27 = (unsigned int *)(v26 + 4);
  uint64_t v29 = *(void *)(a1 + 768) + 48 * v28;
  unsigned int v31 = *(_DWORD *)(v29 + 8);
  uint64_t v30 = v29 + 8;
  BOOL v32 = *(_DWORD *)a3 >= v31;
  if (*(_DWORD *)a3 == v31)
  {
    int v33 = *(_DWORD *)(a3 + 4);
    int v34 = *(_DWORD *)(v30 + 4);
    BOOL v35 = v33 < v34;
    if (v33 == v34)
    {
      uint64_t v36 = *(void *)(a3 + 8);
      uint64_t v37 = *(void *)(v30 + 8);
      BOOL v35 = v36 < v37;
      if (v36 == v37)
      {
        double v38 = *(double *)(a3 + 16);
        double v39 = *(double *)(v30 + 16);
        if (v38 != v39)
        {
          if (v38 >= v39) {
            return 0;
          }
LABEL_25:
          ++*(_DWORD *)(a1 + 816);
          long long v40 = *(_OWORD *)a3;
          long long v41 = *(_OWORD *)(a3 + 16);
          *(void *)(v30 + 32) = *(void *)(a3 + 32);
          *(_OWORD *)uint64_t v30 = v40;
          *(_OWORD *)(v30 + 16) = v41;
          long long v22 = (uint64_t *)(a1 + 824);
          unint64_t v24 = *v27;
          uint64_t v42 = *(void *)(a1 + 848);
          if (v24 < (*(void *)(a1 + 856) - v42) >> 2 && *(_DWORD *)(v42 + 4 * v24) != -1) {
            goto LABEL_14;
          }
          goto LABEL_16;
        }
        uint64_t v43 = *(void *)(a3 + 24);
        uint64_t v44 = *(void *)(v30 + 24);
        BOOL v35 = v43 < v44;
        if (v43 == v44) {
          BOOL v35 = *(void *)(a3 + 32) < *(void *)(v30 + 32);
        }
      }
    }
    if (v35) {
      goto LABEL_25;
    }
  }
  else if (!v32)
  {
    goto LABEL_25;
  }
  return 0;
}

unint64_t sub_102292C@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  unint64_t v7 = (v5 + 0x388152A534) ^ 0xDEADBEEFLL;
  uint64_t v8 = v6 + (v7 << 6) + (v7 >> 2) + 2654435769u;
  unint64_t v9 = (v8 ^ ~v7) + ((v8 ^ v7) << 21);
  unint64_t v10 = 21 * ((265 * (v9 ^ (v9 >> 24))) ^ ((265 * (v9 ^ (v9 >> 24))) >> 14));
  unint64_t v11 = 2147483649u * (v10 ^ (v10 >> 28));
  uint64_t v12 = (uint64_t *)(a1
                  + 48
                  * (((((unsigned __int16)(v10 ^ (v10 >> 28)) >> 8) ^ ((-2147483647
                                                                                       * (v10 ^ (v10 >> 28))) >> 16)) ^ ((-2147483647 * (v10 ^ (v10 >> 28))) >> 24)) & 0xF));
  unint64_t v13 = v11 >> 7;
  uint64_t v14 = v12[3];
  while (1)
  {
    unint64_t v15 = v13 & v14;
    uint64_t v16 = *(void *)(*v12 + v15);
    unint64_t v17 = ((v16 ^ (0x101010101010101 * ((v10 ^ (v10 >> 28)) & 0x7F)))
         - 0x101010101010101) & ~(v16 ^ (0x101010101010101
                                         * ((v10 ^ (v10 >> 28)) & 0x7F))) & 0x8080808080808080;
    if (v17) {
      break;
    }
LABEL_8:
    if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = sub_1022A80(v12, v11);
      *(void *)a3 = v12;
      *(void *)(a3 + 8) = result;
      *(unsigned char *)(a3 + 16) = 1;
      return result;
    }
    v4 += 8;
    unint64_t v13 = v4 + v15;
  }
  while (1)
  {
    unint64_t result = (v15 + (__clz(__rbit64(v17)) >> 3)) & v14;
    unint64_t v19 = (int *)(v12[1] + 48 * result);
    int v21 = *v19;
    int v20 = v19[1];
    if (v21 == v5 && v20 == v6) {
      break;
    }
    v17 &= v17 - 1;
    if (!v17) {
      goto LABEL_8;
    }
  }
  *(void *)a3 = v12;
  *(void *)(a3 + 8) = result;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

unint64_t sub_1022A80(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = *a1;
  unint64_t v6 = v4 & (a2 >> 7);
  unint64_t v7 = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    uint64_t v8 = 8;
    do
    {
      unint64_t v6 = (v6 + v8) & v4;
      v8 += 8;
      unint64_t v7 = *(void *)(v5 + v6) & (~*(void *)(v5 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  unint64_t result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v4;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v5 + result) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      sub_1022B78((uint64_t)a1);
      unint64_t result = sub_2D7FC4(a1, a2);
      uint64_t v5 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v5 + result) == 128);
  *(unsigned char *)(v5 + result) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (result - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  return result;
}

void sub_1022B78(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = (unsigned char *)(&def_332C + 1);
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (char *)((2 * v1) | 1);
LABEL_4:
    sub_1022BA8((char **)a1, v2);
    return;
  }
  sub_1022D90(a1);
}

void sub_1022BA8(char **a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  unint64_t v7 = ((unint64_t)a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v8 = (char *)operator new(v7 + 48 * (void)a2);
  *a1 = v8;
  a1[1] = &v8[v7];
  memset(v8, 128, (size_t)(a2 + 8));
  a2[(void)v8] = -1;
  uint64_t v9 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (unsigned char *)dword_4 + 3) {
    uint64_t v9 = 6;
  }
  a1[5] = (char *)(v9 - (void)a1[2]);
  a1[3] = a2;
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if ((i[(void)v4] & 0x80000000) == 0)
      {
        uint64_t v16 = &v5[48 * (void)i];
        unint64_t v17 = (*(unsigned int *)v16 + 0x388152A534) ^ 0xDEADBEEFLL;
        uint64_t v18 = *((unsigned int *)v16 + 1) + (v17 << 6) + (v17 >> 2) + 2654435769u;
        unint64_t v19 = (v18 ^ ~v17) + ((v18 ^ v17) << 21);
        unint64_t v20 = 21 * ((265 * (v19 ^ (v19 >> 24))) ^ ((265 * (v19 ^ (v19 >> 24))) >> 14));
        unint64_t v21 = 2147483649u * (v20 ^ (v20 >> 28));
        long long v22 = a1[3];
        uint64_t v23 = *a1;
        unint64_t v24 = (unint64_t)v22 & (v21 >> 7);
        unint64_t v25 = *(void *)&(*a1)[v24] & (~*(void *)&(*a1)[v24] << 7) & 0x8080808080808080;
        if (!v25)
        {
          uint64_t v26 = 8;
          do
          {
            unint64_t v24 = (v24 + v26) & (unint64_t)v22;
            v26 += 8;
            unint64_t v25 = *(void *)&v23[v24] & (~*(void *)&v23[v24] << 7) & 0x8080808080808080;
          }
          while (!v25);
        }
        unint64_t v11 = (v24 + (__clz(__rbit64(v25)) >> 3)) & (unint64_t)v22;
        char v12 = v21 & 0x7F;
        v23[v11] = v12;
        (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v11 - 8) & (unint64_t)a1[3])] = v12;
        unint64_t v13 = &a1[1][48 * v11];
        long long v14 = *(_OWORD *)v16;
        long long v15 = *((_OWORD *)v16 + 2);
        *((_OWORD *)v13 + 1) = *((_OWORD *)v16 + 1);
        *((_OWORD *)v13 + 2) = v15;
        *(_OWORD *)unint64_t v13 = v14;
      }
    }
    operator delete(v4);
  }
}

uint64_t sub_1022D90(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_28;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *unint64_t v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (v13)
  {
    for (unint64_t i = 0; i != v13; ++i)
    {
      unint64_t v17 = *(int8x16_t **)result;
      if (*(unsigned __int8 *)(*(void *)result + i) == 254)
      {
        uint64_t v18 = (unsigned int *)(*(void *)(result + 8) + 48 * i);
        unint64_t v19 = (*v18 + 0x388152A534) ^ 0xDEADBEEFLL;
        uint64_t v20 = v18[1] + (v19 << 6) + (v19 >> 2) + 2654435769u;
        unint64_t v21 = (v20 ^ ~v19) + ((v20 ^ v19) << 21);
        unint64_t v22 = 21 * ((265 * (v21 ^ (v21 >> 24))) ^ ((265 * (v21 ^ (v21 >> 24))) >> 14));
        unint64_t v23 = 2147483649u * (v22 ^ (v22 >> 28));
        unint64_t v24 = v13 & (v23 >> 7);
        unint64_t v25 = *(uint64_t *)((unsigned char *)v17->i64 + v24) & (~*(uint64_t *)((char *)v17->i64 + v24) << 7) & 0x8080808080808080;
        if (v25)
        {
          unint64_t v15 = v13 & (v23 >> 7);
        }
        else
        {
          uint64_t v26 = 8;
          unint64_t v15 = v13 & (v23 >> 7);
          do
          {
            unint64_t v15 = (v15 + v26) & v13;
            v26 += 8;
            unint64_t v25 = *(uint64_t *)((unsigned char *)v17->i64 + v15) & (~*(uint64_t *)((char *)v17->i64 + v15) << 7) & 0x8080808080808080;
          }
          while (!v25);
        }
        unint64_t v16 = (v15 + (__clz(__rbit64(v25)) >> 3)) & v13;
        if ((((v16 - v24) ^ (i - v24)) & v13) > 7)
        {
          int v27 = v17->u8[v16];
          v17->i8[v16] = v23 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (v16 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v23 & 0x7F;
          uint64_t v28 = *(void *)(result + 8);
          if (v27 == 128)
          {
            uint64_t v29 = (_OWORD *)(v28 + 48 * v16);
            uint64_t v30 = (long long *)(v28 + 48 * i);
            long long v31 = *v30;
            long long v32 = v30[2];
            v29[1] = v30[1];
            v29[2] = v32;
            _OWORD *v29 = v31;
            *(unsigned char *)(*(void *)result + i) = 0x80;
            *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
          }
          else
          {
            int v33 = (long long *)(v28 + 48 * i);
            long long v34 = *v33;
            long long v43 = v33[1];
            long long v35 = v33[2];
            uint64_t v36 = (long long *)(v28 + 48 * v16);
            long long v38 = v36[1];
            long long v37 = v36[2];
            *int v33 = *v36;
            v33[1] = v38;
            double v33[2] = v37;
            double v39 = (_OWORD *)(*(void *)(result + 8) + 48 * v16);
            *double v39 = v34;
            v39[1] = v43;
            v39[2] = v35;
            --i;
          }
        }
        else
        {
          v17->i8[i] = v23 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v23 & 0x7F;
        }
      }
      uint64_t v13 = *(void *)(result + 24);
    }
    uint64_t v40 = i - (i >> 3);
    BOOL v41 = i == 7;
    uint64_t v42 = 6;
    if (!v41) {
      uint64_t v42 = v40;
    }
  }
  else
  {
    uint64_t v42 = 0;
  }
  *(void *)(result + 40) = v42 - *(void *)(result + 16);
  return result;
}

uint64_t sub_10230AC(uint64_t result, int a2)
{
  if ((a2 + 1) >= (unint64_t)((uint64_t)(*(void *)(result + 56) - *(void *)(result + 48)) >> 2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "vertex id out of range");
    uint64_t v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return result;
}

void sub_102312C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_102315C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    int8x16_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        long long v34 = (char *)operator new(8 * v31);
        long long v35 = &v34[8 * v32];
        uint64_t v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            long long v74 = &v34[8 * v32];
            uint64_t v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v40 = &v35[v76];
              v7 += v76;
              long long v77 = (long long *)(v6 + 3);
              unsigned int v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *unsigned int v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            uint64_t v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_188D718();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    unint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unint64_t v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      uint64_t v91 = operator new(0x1000uLL);
      sub_22368((char **)a1, &v91);
      return;
    }
    uint64_t v91 = operator new(0x1000uLL);
    sub_224F8((void **)a1, &v91);
    BOOL v41 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    int8x16_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        long long v34 = (char *)operator new(8 * v42);
        long long v35 = &v34[8 * v43];
        uint64_t v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            uint64_t v82 = &v34[8 * v43];
            char v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              char v47 = &v35[v84];
              v7 += v84;
              long long v85 = (long long *)(v41 + 3);
              long long v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *long long v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            char v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)char v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  unint64_t v25 = (char *)operator new(8 * v24);
  uint64_t v26 = operator new(0x1000uLL);
  int v27 = &v25[8 * v21];
  uint64_t v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    long long v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_188D718();
      }
      uint64_t v49 = (char *)operator new(8 * v48);
      int v27 = &v49[8 * (v48 >> 2)];
      uint64_t v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      unint64_t v25 = v49;
      *(void *)int v27 = v90;
      uint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)int v27 = v26;
      uint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_188D718();
          }
          double v60 = (char *)operator new(8 * v59);
          unint64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          uint64_t v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v53;
          if (!v37)
          {
            uint64_t v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            long long v64 = &v60[8 * v61];
            unsigned int v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            long long v64 = &v60[8 * v61];
            unsigned int v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            long long v64 = &v53[v68];
            unsigned int v65 = &v27[v68];
            unsigned int v69 = (long long *)(v27 + 16);
            unsigned int v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)unsigned int v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)long long v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          uint64_t v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          uint64_t v57 = &v29[8 * (v56 >> 1)];
          uint64_t v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          unint64_t v25 = v27;
        }
      }
      else
      {
        uint64_t v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      double v51 = v53 - 8;
      int v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)int v27 = v26;
  uint64_t v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  double v51 = v27;
LABEL_46:
  double v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_10236CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_10236E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10236FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1023714(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

int8x16_t sub_102372C(int8x16_t *a1, int8x16_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    uint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        a1 = v12;
        uint64_t v13 = (char *)a2 - (char *)v12;
        unint64_t v14 = ((char *)a2 - (char *)v12) >> 3;
        if (v6 || !v5)
        {
          switch(v14)
          {
            case 0uLL:
            case 1uLL:
              return result;
            case 2uLL:
              if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32))) {
                return result;
              }
              uint64_t v89 = v12->i64[0];
              goto LABEL_106;
            case 3uLL:
              unint64_t v87 = v12->u32[3] | ((unint64_t)v12->u32[2] << 32);
              unint64_t v88 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
              if (v87 >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
              {
                if (v88 < v87)
                {
                  uint64_t v104 = v12->i64[1];
                  v12->i64[1] = a2[-1].i64[1];
                  a2[-1].i64[1] = v104;
                  if ((v12->u32[3] | ((unint64_t)v12->u32[2] << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
                  {
                    int8x16_t result = vextq_s8(*v12, *v12, 8uLL);
                    int8x16_t *v12 = result;
                  }
                }
              }
              else
              {
                uint64_t v89 = v12->i64[0];
                if (v88 < v87)
                {
LABEL_106:
                  v12->i64[0] = a2[-1].i64[1];
                }
                else
                {
                  v12->i64[0] = v12->i64[1];
                  v12->i64[1] = v89;
                  if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v89, 32)) {
                    return result;
                  }
                  v12->i64[1] = a2[-1].i64[1];
                }
                a2[-1].i64[1] = v89;
              }
              break;
            case 4uLL:
              sub_2A9374((unsigned int *)v12, &v12->u32[2], (unsigned int *)&v12[1], &a2[-1].u32[2]);
              return result;
            case 5uLL:
              sub_2A94B0((unsigned int *)v12, &v12->u32[2], (unsigned int *)&v12[1], &v12[1].u32[2], &a2[-1].u32[2]);
              return result;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v13 <= 191)
        {
          long long v90 = (int8x16_t *)&v12->u64[1];
          BOOL v92 = v12 == a2 || v90 == a2;
          if (a5)
          {
            if (!v92)
            {
              uint64_t v93 = 0;
              unsigned int v94 = v12;
              do
              {
                uint64_t v96 = v94->u32[2];
                uint64_t v97 = v94->u32[3];
                uint64_t v98 = v94->u32[0];
                uint64_t v99 = v94->u32[1];
                unsigned int v94 = v90;
                if ((v97 | (unint64_t)(v96 << 32)) < (v99 | (unint64_t)(v98 << 32)))
                {
                  uint64_t v100 = v90->i64[0];
                  unint64_t v101 = __ROR8__(v94->i64[0], 32);
                  uint64_t v102 = v93;
                  do
                  {
                    long long v103 = &v12->i8[v102];
                    *(uint64_t *)((char *)&v12->i64[1] + v102) = *(uint64_t *)((char *)v12->i64 + v102);
                    if (!v102)
                    {
                      long long v95 = (uint64_t *)v12;
                      goto LABEL_124;
                    }
                    v102 -= 8;
                  }
                  while (v101 < (*((unsigned int *)v103 - 1) | ((unint64_t)*((unsigned int *)v103 - 2) << 32)));
                  long long v95 = (uint64_t *)((char *)&v12->i64[1] + v102);
LABEL_124:
                  uint64_t *v95 = v100;
                }
                long long v90 = (int8x16_t *)&v94->u64[1];
                v93 += 8;
              }
              while (&v94->u64[1] != (unint64_t *)a2);
            }
          }
          else if (!v92)
          {
            do
            {
              uint64_t v105 = a1->u32[2];
              uint64_t v106 = a1->u32[3];
              uint64_t v107 = a1->u32[0];
              uint64_t v108 = a1->u32[1];
              a1 = v90;
              if ((v106 | (unint64_t)(v105 << 32)) < (v108 | (unint64_t)(v107 << 32)))
              {
                uint64_t v109 = v90->i64[0];
                unint64_t v110 = __ROR8__(v90->i64[0], 32);
                do
                {
                  int v111 = (uint64_t *)v90;
                  uint64_t v112 = v90[-1].i64[1];
                  long long v90 = (int8x16_t *)((char *)v90 - 8);
                  uint64_t *v111 = v112;
                }
                while (v110 < (*((unsigned int *)v111 - 3) | ((unint64_t)*((unsigned int *)v111 - 4) << 32)));
                v90->i64[0] = v109;
              }
              long long v90 = (int8x16_t *)&a1->u64[1];
            }
            while (&a1->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v12 != a2)
          {
            sub_2A9598((unsigned int *)v12, (unsigned int *)a2, (unsigned int *)a2, a3);
          }
          return result;
        }
        unint64_t v15 = v14 >> 1;
        int64_t v16 = (unsigned int *)v12 + 2 * (v14 >> 1);
        unint64_t v17 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
        if ((unint64_t)v13 >= 0x401) {
          break;
        }
        unint64_t v21 = v12->u32[1] | ((unint64_t)v12->u32[0] << 32);
        uint64_t v22 = &v12->u32[2 * v15 + 1];
        if (v21 < (*v22 | ((unint64_t)*v16 << 32)))
        {
          uint64_t v23 = *(void *)v16;
          if (v17 >= v21)
          {
            *(void *)int64_t v16 = v12->i64[0];
            v12->i64[0] = v23;
            if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v23, 32)) {
              goto LABEL_32;
            }
            v12->i64[0] = a2[-1].i64[1];
          }
          else
          {
            *(void *)int64_t v16 = a2[-1].i64[1];
          }
          a2[-1].i64[1] = v23;
LABEL_32:
          --a4;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_33;
        }
        if (v17 >= v21) {
          goto LABEL_32;
        }
        uint64_t v26 = v12->i64[0];
        v12->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v26;
        if ((v12->u32[1] | ((unint64_t)v12->u32[0] << 32)) >= (*v22 | ((unint64_t)*v16 << 32))) {
          goto LABEL_32;
        }
        uint64_t v27 = *(void *)v16;
        *(void *)int64_t v16 = v12->i64[0];
        v12->i64[0] = v27;
        --a4;
        if (a5) {
          goto LABEL_33;
        }
LABEL_56:
        uint64_t v37 = v12->i64[0];
        if ((v12[-1].u32[3] | ((unint64_t)v12[-1].u32[2] << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32))) {
          goto LABEL_57;
        }
        unint64_t v73 = __ROR8__(v37, 32);
        if (v73 < (a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)))
        {
          do
          {
            uint64_t v74 = v12->u32[2];
            uint64_t v75 = v12->u32[3];
            uint64_t v12 = (int8x16_t *)((char *)v12 + 8);
          }
          while (v73 >= (v75 | (unint64_t)(v74 << 32)));
        }
        else
        {
          uint64_t v76 = (int8x16_t *)&v12->u64[1];
          do
          {
            uint64_t v12 = v76;
            if (v76 >= a2) {
              break;
            }
            unint64_t v77 = v76->u32[1] | ((unint64_t)v76->u32[0] << 32);
            uint64_t v76 = (int8x16_t *)((char *)v76 + 8);
          }
          while (v73 >= v77);
        }
        unsigned int v78 = a2;
        if (v12 < a2)
        {
          unsigned int v78 = a2;
          do
          {
            uint64_t v79 = v78[-1].u32[2];
            uint64_t v80 = v78[-1].u32[3];
            unsigned int v78 = (int8x16_t *)((char *)v78 - 8);
          }
          while (v73 < (v80 | (unint64_t)(v79 << 32)));
        }
        while (v12 < v78)
        {
          uint64_t v81 = v12->i64[0];
          v12->i64[0] = v78->i64[0];
          v78->i64[0] = v81;
          do
          {
            uint64_t v82 = v12->u32[2];
            uint64_t v83 = v12->u32[3];
            uint64_t v12 = (int8x16_t *)((char *)v12 + 8);
          }
          while (v73 >= (v83 | (unint64_t)(v82 << 32)));
          do
          {
            uint64_t v84 = v78[-1].u32[2];
            uint64_t v85 = v78[-1].u32[3];
            unsigned int v78 = (int8x16_t *)((char *)v78 - 8);
          }
          while (v73 < (v85 | (unint64_t)(v84 << 32)));
        }
        long long v86 = &v12[-1].i64[1];
        BOOL v5 = &v12[-1].u64[1] >= (unint64_t *)a1;
        BOOL v6 = &v12[-1].u64[1] == (unint64_t *)a1;
        if (&v12[-1].u64[1] != (unint64_t *)a1) {
          a1->i64[0] = *v86;
        }
        a5 = 0;
        *long long v86 = v37;
      }
      uint64_t v18 = &v12->u32[2 * v15 + 1];
      unint64_t v19 = *v18 | ((unint64_t)*v16 << 32);
      if (v19 >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
      {
        if (v17 < v19)
        {
          uint64_t v24 = *(void *)v16;
          *(void *)int64_t v16 = a2[-1].i64[1];
          a2[-1].i64[1] = v24;
          if ((*v18 | ((unint64_t)*v16 << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
          {
            uint64_t v25 = v12->i64[0];
            v12->i64[0] = *(void *)v16;
            *(void *)int64_t v16 = v25;
          }
        }
      }
      else
      {
        uint64_t v20 = v12->i64[0];
        if (v17 >= v19)
        {
          v12->i64[0] = *(void *)v16;
          *(void *)int64_t v16 = v20;
          if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v20, 32)) {
            goto LABEL_23;
          }
          *(void *)int64_t v16 = a2[-1].i64[1];
        }
        else
        {
          v12->i64[0] = a2[-1].i64[1];
        }
        a2[-1].i64[1] = v20;
      }
LABEL_23:
      uint64_t v28 = &v12->i8[8 * v15];
      unsigned int v30 = *((_DWORD *)v28 - 2);
      uint64_t v29 = v28 - 8;
      unint64_t v31 = (unsigned int *)(v29 + 4);
      unint64_t v32 = *((unsigned int *)v29 + 1) | ((unint64_t)v30 << 32);
      unint64_t v33 = a2[-1].u32[1] | ((unint64_t)a2[-1].u32[0] << 32);
      if (v32 >= (v12->u32[3] | ((unint64_t)v12->u32[2] << 32)))
      {
        if (v33 < v32)
        {
          uint64_t v35 = *(void *)v29;
          *(void *)uint64_t v29 = a2[-1].i64[0];
          a2[-1].i64[0] = v35;
          if ((*v31 | ((unint64_t)*(unsigned int *)v29 << 32)) < (v12->u32[3] | ((unint64_t)v12->u32[2] << 32)))
          {
            uint64_t v36 = v12->i64[1];
            v12->i64[1] = *(void *)v29;
            *(void *)uint64_t v29 = v36;
          }
        }
      }
      else
      {
        uint64_t v34 = v12->i64[1];
        if (v33 >= v32)
        {
          v12->i64[1] = *(void *)v29;
          *(void *)uint64_t v29 = v34;
          if ((a2[-1].u32[1] | ((unint64_t)a2[-1].u32[0] << 32)) >= __ROR8__(v34, 32)) {
            goto LABEL_37;
          }
          *(void *)uint64_t v29 = a2[-1].i64[0];
        }
        else
        {
          v12->i64[1] = a2[-1].i64[0];
        }
        a2[-1].i64[0] = v34;
      }
LABEL_37:
      int64_t v38 = &v12->i8[8 * v15];
      unsigned int v40 = *((_DWORD *)v38 + 2);
      unint64_t v39 = (unsigned int *)(v38 + 8);
      BOOL v41 = v39 + 1;
      unint64_t v42 = v39[1] | ((unint64_t)v40 << 32);
      unint64_t v43 = a2[-2].u32[3] | ((unint64_t)a2[-2].u32[2] << 32);
      if (v42 >= (v12[1].u32[1] | ((unint64_t)v12[1].u32[0] << 32)))
      {
        if (v43 < v42)
        {
          uint64_t v45 = *(void *)v39;
          *(void *)unint64_t v39 = a2[-2].i64[1];
          a2[-2].i64[1] = v45;
          if ((*v41 | ((unint64_t)*v39 << 32)) < (v12[1].u32[1] | ((unint64_t)v12[1].u32[0] << 32)))
          {
            uint64_t v46 = v12[1].i64[0];
            v12[1].i64[0] = *(void *)v39;
            *(void *)unint64_t v39 = v46;
          }
        }
      }
      else
      {
        uint64_t v44 = v12[1].i64[0];
        if (v43 >= v42)
        {
          v12[1].i64[0] = *(void *)v39;
          *(void *)unint64_t v39 = v44;
          if ((a2[-2].u32[3] | ((unint64_t)a2[-2].u32[2] << 32)) >= __ROR8__(v44, 32)) {
            goto LABEL_46;
          }
          *(void *)unint64_t v39 = a2[-2].i64[1];
        }
        else
        {
          v12[1].i64[0] = a2[-2].i64[1];
        }
        a2[-2].i64[1] = v44;
      }
LABEL_46:
      unint64_t v47 = *v18 | ((unint64_t)*v16 << 32);
      unint64_t v48 = *v31 | ((unint64_t)*(unsigned int *)v29 << 32);
      unint64_t v49 = *v41 | ((unint64_t)*v39 << 32);
      if (v47 >= v48)
      {
        uint64_t v50 = *(void *)v16;
        if (v49 < v47)
        {
          uint64_t v51 = *(void *)v39;
          *(void *)int64_t v16 = *(void *)v39;
          *(void *)unint64_t v39 = v50;
          uint64_t v50 = v51;
          if ((*v18 | (unint64_t)(v51 << 32)) < v48)
          {
            uint64_t v52 = *(void *)v29;
            *(void *)uint64_t v29 = v51;
            *(void *)int64_t v16 = v52;
LABEL_54:
            uint64_t v50 = v52;
          }
        }
      }
      else
      {
        uint64_t v50 = *(void *)v29;
        if (v49 < v47)
        {
          *(void *)uint64_t v29 = *(void *)v39;
          *(void *)unint64_t v39 = v50;
          uint64_t v50 = *(void *)v16;
          goto LABEL_55;
        }
        *(void *)uint64_t v29 = *(void *)v16;
        *(void *)int64_t v16 = v50;
        if (v49 < __ROR8__(v50, 32))
        {
          uint64_t v52 = *(void *)v39;
          *(void *)int64_t v16 = *(void *)v39;
          *(void *)unint64_t v39 = v50;
          goto LABEL_54;
        }
      }
LABEL_55:
      uint64_t v53 = v12->i64[0];
      v12->i64[0] = v50;
      *(void *)int64_t v16 = v53;
      --a4;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_33:
      uint64_t v37 = v12->i64[0];
LABEL_57:
      uint64_t v54 = 0;
      unint64_t v55 = __ROR8__(v37, 32);
      do
      {
        unint64_t v56 = v12->u32[v54 + 3] | ((unint64_t)v12->u32[v54 + 2] << 32);
        v54 += 2;
      }
      while (v56 < v55);
      uint64_t v57 = &v12->i8[v54 * 4];
      size_t v58 = a2;
      if (v54 == 2)
      {
        size_t v58 = a2;
        do
        {
          if (v57 >= (char *)v58) {
            break;
          }
          uint64_t v61 = v58[-1].u32[2];
          uint64_t v62 = v58[-1].u32[3];
          size_t v58 = (int8x16_t *)((char *)v58 - 8);
        }
        while ((v62 | (unint64_t)(v61 << 32)) >= v55);
      }
      else
      {
        do
        {
          uint64_t v59 = v58[-1].u32[2];
          uint64_t v60 = v58[-1].u32[3];
          size_t v58 = (int8x16_t *)((char *)v58 - 8);
        }
        while ((v60 | (unint64_t)(v59 << 32)) >= v55);
      }
      if (v57 >= (char *)v58)
      {
        unsigned int v70 = v57 - 8;
        if (v57 - 8 == (char *)v12) {
          goto LABEL_75;
        }
LABEL_74:
        v12->i64[0] = *(void *)v70;
        goto LABEL_75;
      }
      unint64_t v63 = (unint64_t)v57;
      long long v64 = (uint64_t *)v58;
      do
      {
        uint64_t v65 = *(void *)v63;
        *(void *)unint64_t v63 = *v64;
        *long long v64 = v65;
        do
        {
          uint64_t v66 = *(unsigned int *)(v63 + 8);
          uint64_t v67 = *(unsigned int *)(v63 + 12);
          v63 += 8;
        }
        while ((v67 | (unint64_t)(v66 << 32)) < v55);
        do
        {
          uint64_t v68 = *((unsigned int *)v64 - 2);
          uint64_t v69 = *((unsigned int *)v64-- - 1);
        }
        while ((v69 | (unint64_t)(v68 << 32)) >= v55);
      }
      while (v63 < (unint64_t)v64);
      unsigned int v70 = (char *)(v63 - 8);
      if ((int8x16_t *)(v63 - 8) != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *(void *)unsigned int v70 = v37;
      if (v57 < (char *)v58) {
        goto LABEL_78;
      }
      BOOL v71 = sub_1024054(v12, (int8x16_t *)v70);
      uint64_t v12 = (int8x16_t *)(v70 + 8);
      if (sub_1024054((int8x16_t *)(v70 + 8), a2)) {
        break;
      }
      if (!v71)
      {
LABEL_78:
        sub_102372C(a1, v70, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = (int8x16_t *)(v70 + 8);
      }
    }
    a2 = (int8x16_t *)v70;
    if (!v71) {
      continue;
    }
    return result;
  }
}

BOOL sub_1024054(int8x16_t *a1, int8x16_t *a2)
{
  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= (a1->u32[1] | ((unint64_t)a1->u32[0] << 32))) {
        return 1;
      }
      uint64_t v3 = a1->i64[0];
      goto LABEL_7;
    case 3:
      unint64_t v4 = a1->u32[3] | ((unint64_t)a1->u32[2] << 32);
      unint64_t v5 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
      if (v4 >= (a1->u32[1] | ((unint64_t)a1->u32[0] << 32)))
      {
        if (v5 < v4)
        {
          uint64_t v11 = a1->i64[1];
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v11;
          if ((a1->u32[3] | ((unint64_t)a1->u32[2] << 32)) < (a1->u32[1] | ((unint64_t)a1->u32[0] << 32)))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
            return 1;
          }
        }
      }
      else
      {
        uint64_t v3 = a1->i64[0];
        if (v5 < v4)
        {
LABEL_7:
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v3;
          return 1;
        }
        a1->i64[0] = a1->i64[1];
        a1->i64[1] = v3;
        if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) < __ROR8__(v3, 32))
        {
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v3;
          return 1;
        }
      }
      return 1;
    case 4:
      sub_2A9374((unsigned int *)a1, &a1->u32[2], (unsigned int *)&a1[1], &a2[-1].u32[2]);
      return 1;
    case 5:
      sub_2A94B0((unsigned int *)a1, &a1->u32[2], (unsigned int *)&a1[1], &a1[1].u32[2], &a2[-1].u32[2]);
      return 1;
    default:
      BOOL v6 = a1 + 1;
      unint64_t v7 = a1->u32[3] | ((unint64_t)a1->u32[2] << 32);
      unint64_t v8 = a1->u32[1] | ((unint64_t)a1->u32[0] << 32);
      unint64_t v9 = a1[1].u32[1] | ((unint64_t)a1[1].u32[0] << 32);
      if (v7 >= v8)
      {
        if (v9 < v7)
        {
          uint64_t v13 = a1->i64[1];
          uint64_t v12 = a1[1].i64[0];
          a1->i64[1] = v12;
          a1[1].i64[0] = v13;
          if (__ROR8__(v12, 32) < v8)
          {
            uint64_t v14 = a1->i64[0];
            a1->i64[0] = v12;
            a1->i64[1] = v14;
          }
        }
      }
      else
      {
        uint64_t v10 = a1->i64[0];
        if (v9 >= v7)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v10;
          if (v9 >= __ROR8__(v10, 32)) {
            goto LABEL_25;
          }
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v10;
      }
LABEL_25:
      unint64_t v15 = &a1[1].u32[2];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while ((v15[1] | ((unint64_t)*v15 << 32)) >= (v6->u32[1] | ((unint64_t)v6->u32[0] << 32)))
  {
LABEL_34:
    BOOL v6 = (int8x16_t *)v15;
    v16 += 8;
    v15 += 2;
    if (v15 == (unsigned int *)a2) {
      return 1;
    }
  }
  uint64_t v18 = *(void *)v15;
  unint64_t v19 = __ROR8__(*(void *)v15, 32);
  uint64_t v20 = v16;
  do
  {
    *(uint64_t *)((char *)&a1[1].i64[1] + v20) = *(uint64_t *)((char *)a1[1].i64 + v20);
    if (v20 == -16)
    {
      a1->i64[0] = v18;
      if (++v17 != 8) {
        goto LABEL_34;
      }
      return v15 + 2 == (unsigned int *)a2;
    }
    unint64_t v21 = *(unsigned int *)((char *)&a1->u32[3] + v20) | ((unint64_t)*(unsigned int *)((char *)&a1->u32[2] + v20) << 32);
    v20 -= 8;
  }
  while (v19 < v21);
  *(uint64_t *)((char *)&a1[1].i64[1] + v20) = v18;
  if (++v17 != 8) {
    goto LABEL_34;
  }
  return v15 + 2 == (unsigned int *)a2;
}

char *sub_1024344(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = __ROR8__(*a2, 32);
  unint64_t v9 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
  unint64_t v10 = v9 ^ (v9 >> 33);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9 ^ (v9 >> 33);
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = (char *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = *((void *)v14 + 1);
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v14 = *(char **)v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  unint64_t v19 = (void *)(a1 + 16);
  uint64_t v14 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = v10;
  *((void *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v11 && (float)(v21 * (float)v11) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_34:
      *(void *)uint64_t v14 = *v23;
LABEL_69:
      void *v23 = v14;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_45;
    }
    if (prime < v11)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v11) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v31 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * v10);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v31 & v10;
      uint64_t v22 = *(void *)a1;
      uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v10));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  *(void *)uint64_t v14 = *v19;
  void *v19 = v14;
  *(void *)(v22 + 8 * v4) = v19;
  if (*(void *)v14)
  {
    unint64_t v32 = *(void *)(*(void *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v32 >= v11) {
        v32 %= v11;
      }
    }
    else
    {
      v32 &= v11 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_10246B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10246C8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10246C8(uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void *)v2[6];
      if (v3)
      {
        v2[7] = v3;
        operator delete(v3);
      }
      unint64_t v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void sub_1024728()
{
  unk_25FD51F = 16641;
  word_25FD508 = 65;
  byte_25FD537 = 1;
  byte_25FD521 = 0;
}

uint64_t sub_1024750(uint64_t result)
{
  *(_DWORD *)int8x16_t result = -1;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(unsigned char *)(result + 40) = 0;
  *(void *)(result + 48) = 0x3FF0000000000000;
  *(unsigned char *)(result + 56) = 1;
  *(void *)(result + 64) = 0;
  *(void *)(result + 72) = 0;
  *(unsigned char *)(result + 80) = 0;
  *(_DWORD *)(result + 82) = 36000;
  *(unsigned char *)(result + 86) = 0;
  *(void *)(result + 88) = 0;
  *(_DWORD *)(result + 96) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 104) = 0;
  *(void *)(result + 112) = 0;
  *(void *)(result + 128) = 0x3FF0000000000000;
  *(unsigned char *)(result + 136) = 1;
  *(void *)(result + 144) = 0;
  *(void *)(result + 152) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(_DWORD *)(result + 162) = 36000;
  *(unsigned char *)(result + 166) = 0;
  return result;
}

__n128 sub_10247B8(uint64_t a1, int a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = *a3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a4;
  long long v6 = *(_OWORD *)(a4 + 16);
  long long v7 = *(_OWORD *)(a4 + 32);
  long long v8 = *(_OWORD *)(a4 + 48);
  *(void *)(a1 + 80) = *(void *)(a4 + 64);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)(a1 + 88) = *a5;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)a6;
  __n128 result = *(__n128 *)(a6 + 16);
  long long v10 = *(_OWORD *)(a6 + 32);
  long long v11 = *(_OWORD *)(a6 + 48);
  *(void *)(a1 + 160) = *(void *)(a6 + 64);
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

BOOL sub_1024810(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) != *(void *)(a2 + 8)
    || !sub_EB45A4(a1 + 16, a2 + 16)
    || *(void *)(a1 + 88) != *(void *)(a2 + 88))
  {
    return 0;
  }

  return sub_EB45A4(a1 + 96, a2 + 96);
}

unint64_t sub_102488C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x2127599BF4325C37 * (*(void *)(a2 + 8) ^ (*(void *)(a2 + 8) >> 23));
  unint64_t v3 = 0x2127599BF4325C37 * (*(void *)(a2 + 88) ^ (*(void *)(a2 + 88) >> 23));
  return ((v3 ^ (v3 >> 47))
        + ((((v2 ^ (v2 >> 47)) + 0x388152A534) ^ 0xDEADBEEF) << 6)
        + ((((v2 ^ (v2 >> 47)) + 0x388152A534) ^ 0xDEADBEEF) >> 2)
        + 2654435769u) ^ ((v2 ^ (v2 >> 47)) + 0x388152A534) ^ 0xDEADBEEF;
}

void sub_10248F4()
{
  unk_25FD54F = 16641;
  word_25FD538 = 65;
  byte_25FD567 = 1;
  byte_25FD551 = 0;
}

void **sub_102491C(void *a1, void *a2, uint64_t a3)
{
  unint64_t v4 = (void **)a1;
  *a1 = a3;
  a1[1] = 0;
  unint64_t v5 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  long long v6 = operator new(4uLL);
  uint64_t v112 = v5;
  *unint64_t v5 = v6;
  *long long v6 = 0;
  v4[2] = v6 + 1;
  v4[3] = v6 + 1;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  long long v7 = operator new(4uLL);
  *((_OWORD *)v4 + 8) = 0u;
  v4[7] = v7;
  uint64_t v106 = (uint64_t)(v4 + 7);
  *v7++ = 0;
  v4[8] = v7;
  v4[9] = v7;
  *((_OWORD *)v4 + 11) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  v4[24] = 0;
  *((_DWORD *)v4 + 50) = 0x7FFFFFFF;
  unint64_t v8 = sub_1005690((uint64_t)a2);
  unint64_t v9 = v8;
  uint64_t v136 = 0;
  uint64_t v137 = 0;
  uint64_t v138 = 0;
  int v114 = v4;
  if (v8)
  {
    if (v8 >> 62) {
      sub_2E00();
    }
    long long v10 = operator new(4 * v8);
    long long v11 = &v10[v9];
    uint64_t v136 = v10;
    uint64_t v138 = v11;
    memset(v10, 255, 4 * v9);
    uint64_t v137 = v11;
  }
  unsigned int v135 = 0;
  int v132 = 0;
  unint64_t v133 = 0;
  unsigned int v134 = 0;
  unint64_t v12 = sub_1005690((uint64_t)a2);
  unint64_t v13 = v12;
  if (v12)
  {
    if (v12 >> 62) {
      sub_2E00();
    }
    uint64_t v14 = (char *)operator new(4 * v12);
    int v132 = &v14[v133 & 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v133 = (unint64_t)v132;
    unsigned int v134 = &v14[4 * v13];
  }
  uint64_t v15 = sub_100596C((uint64_t)a2);
  uint64_t v17 = *(_DWORD **)v15;
  uint64_t v16 = *(_DWORD **)(v15 + 8);
  if (*(_DWORD **)v15 != v16)
  {
    do
    {
      sub_745A4((uint64_t)&v132, v17);
      uint64_t v127 = 0;
      LODWORD(v115) = 0;
      *((void *)&v115 + 1) = 0;
      uint64_t v116 = 0;
      LOBYTE(v117) = 0;
      uint64_t v118 = 0x3FF0000000000000;
      char v119 = 1;
      uint64_t v120 = 0;
      uint64_t v121 = 0;
      char v122 = 0;
      int v123 = 36000;
      char v124 = 0;
      float v21 = v17 + 22;
      uint64_t v22 = (uint64_t)(v17 + 24);
      uint64_t v23 = v4[17];
      if (v23 >= v4[18])
      {
        uint64_t v18 = sub_1027A98((uint64_t *)v4 + 16, (int *)&v135, &v127, (uint64_t)&v115, v21, v22);
        unint64_t v19 = v4;
      }
      else
      {
        sub_10247B8((uint64_t)v4[17], v135, &v127, (uint64_t)&v115, v21, v22);
        uint64_t v18 = (uint64_t)(v23 + 21);
        unint64_t v19 = v4;
        v4[17] = v23 + 21;
      }
      v19[17] = (void *)v18;
      int v20 = *v17;
      v17 += 42;
      v136[v20] = v135++;
    }
    while (v17 != v16);
  }
  uint64_t v24 = sub_1005974((uint64_t)a2);
  unint64_t v26 = *(_DWORD **)v24;
  unint64_t v25 = *(_DWORD **)(v24 + 8);
  if (*(_DWORD **)v24 != v25)
  {
    do
    {
      sub_745A4((uint64_t)&v132, v26);
      uint64_t v30 = v26 + 2;
      uint64_t v127 = 0;
      uint64_t v31 = (uint64_t)(v26 + 4);
      LODWORD(v115) = 0;
      *((void *)&v115 + 1) = 0;
      uint64_t v116 = 0;
      LOBYTE(v117) = 0;
      uint64_t v118 = 0x3FF0000000000000;
      char v119 = 1;
      uint64_t v120 = 0;
      uint64_t v121 = 0;
      char v122 = 0;
      int v123 = 36000;
      char v124 = 0;
      unint64_t v32 = v4[20];
      if (v32 >= v4[21])
      {
        uint64_t v27 = sub_1027C60((uint64_t *)v4 + 19, (int *)&v135, v30, v31, &v127, (uint64_t)&v115);
        unint64_t v28 = v4;
      }
      else
      {
        sub_10247B8((uint64_t)v4[20], v135, v30, v31, &v127, (uint64_t)&v115);
        uint64_t v27 = (uint64_t)(v32 + 21);
        unint64_t v28 = v4;
        v4[20] = v32 + 21;
      }
      v28[20] = (void *)v27;
      int v29 = *v26;
      v26 += 42;
      v136[v29] = v135++;
    }
    while (v26 != v25);
  }
  unint64_t v33 = (void *)sub_BED898((uint64_t)a2);
  uint64_t v34 = v33[49];
  uint64_t v35 = v33[27];
  uint64_t v36 = v34 + 168 * v35;
  if (v35)
  {
    uint64_t v37 = 168 * v35;
    while (sub_1024810((uint64_t)(v33 + 28), v34) || v33[25] && sub_1024810((uint64_t)(v33 + 4), v34))
    {
      v34 += 168;
      v37 -= 168;
      if (!v37)
      {
        uint64_t v34 = v36;
        break;
      }
    }
    int64_t v38 = (_DWORD *)v34;
    uint64_t v39 = v33[49] + 168 * v33[27];
    if (v34 != v39)
    {
      do
      {
        sub_745A4((uint64_t)&v132, v38);
        BOOL v41 = v38 + 2;
        uint64_t v42 = (uint64_t)(v38 + 4);
        unint64_t v43 = v38 + 22;
        uint64_t v44 = (uint64_t)(v38 + 24);
        uint64_t v45 = v4[23];
        if (v45 >= v4[24])
        {
          uint64_t v46 = sub_1027E28((uint64_t *)v4 + 22, (int *)&v135, v41, v42, v43, v44);
        }
        else
        {
          sub_10247B8((uint64_t)v4[23], v135, v41, v42, v43, v44);
          uint64_t v46 = (uint64_t)(v45 + 21);
          v4[23] = v45 + 21;
        }
        v4[23] = (void *)v46;
        int v48 = *v38;
        unint64_t v47 = v38 + 42;
        v136[v48] = v135++;
        uint64_t v40 = v36;
        if (v47 != (_DWORD *)v36)
        {
          uint64_t v40 = (uint64_t)v47;
          while (sub_1024810((uint64_t)(v33 + 28), v40) || v33[25] && sub_1024810((uint64_t)(v33 + 4), v40))
          {
            v40 += 168;
            if (v40 == v36)
            {
              uint64_t v40 = v36;
              break;
            }
          }
        }
        int64_t v38 = (_DWORD *)v40;
      }
      while (v40 != v39);
    }
  }
  uint64_t v49 = sub_1005690((uint64_t)a2);
  if (v49)
  {
    for (uint64_t i = 0; i != v49; ++i)
    {
      *(void *)&long long v115 = i;
      LODWORD(v127) = i;
      if (v136[i] == -1 && (sub_100571C(a2, (unsigned int *)&v127) != 1 || sub_100574C(a2, (unsigned int *)&v127) != 1))
      {
        sub_3A998((uint64_t)&v132, &v115);
        v136[(void)v115] = v135++;
      }
    }
  }
  uint64_t v108 = sub_3766F8(*v4);
  sub_10255D8((uint64_t)v112, v135, v135, 1, 0);
  uint64_t v51 = (unsigned int *)v132;
  unint64_t v107 = v133;
  if (v132 != (char *)v133)
  {
    int v52 = 0;
    int v111 = (char **)(v4 + 13);
    do
    {
      unsigned int v131 = *v51;
      unint64_t v53 = v136[v131];
      uint64_t v54 = (char *)v4[7];
      unint64_t v55 = (char *)v4[8];
      uint64_t v56 = v55 - v54;
      if (((unint64_t)(v55 - v54) >> 2) - 1 <= v53)
      {
        unint64_t v57 = (v53 + 2);
        size_t v58 = (char *)v4[1];
        uint64_t v59 = (char *)v4[2];
        unint64_t v60 = (v59 - v58) >> 2;
        if (v57 <= v60)
        {
          if (v57 < v60) {
            v4[2] = &v58[4 * v57];
          }
        }
        else
        {
          sub_500DC((uint64_t)v112, v57 - v60, (const float *)v59 - 1);
          uint64_t v54 = (char *)v4[7];
          unint64_t v55 = (char *)v4[8];
          uint64_t v56 = v55 - v54;
        }
        unint64_t v61 = v56 >> 2;
        if (v57 <= v61)
        {
          if (v57 < v61) {
            v4[8] = &v54[4 * v57];
          }
        }
        else
        {
          sub_500DC(v106, v57 - v61, (const float *)v55 - 1);
        }
      }
      sub_1005864((uint64_t)a2, &v131);
      uint64_t v62 = (char *)v4[13];
      unint64_t v63 = ((char *)v4[14] - v62) >> 4;
      if (v63 <= v53)
      {
        unint64_t v64 = (v53 + 1);
        LOWORD(v115) = 0;
        *((void *)&v115 + 1) = 0;
        if (v64 <= v63)
        {
          if (v64 < v63) {
            v4[14] = &v62[16 * v64];
          }
        }
        else
        {
          sub_F169FC(v111, v64 - v63, &v115);
        }
      }
      unint64_t v65 = sub_1005B14((uint64_t)a2, &v131);
      uint64_t v66 = sub_32A458(v108, (HIDWORD(v65) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(v65) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((v65 >> 1) & 1) << 48)) ^ 0x1000000000000);
      if (!v66)
      {
        double v75 = 0.0;
        uint64_t v76 = (char *)v4[13];
        unint64_t v77 = ((char *)v4[14] - v76) >> 4;
        if (v77 > v53) {
          goto LABEL_87;
        }
        goto LABEL_83;
      }
      uint64_t v67 = &v66[-*(int *)v66];
      unsigned int v68 = *(unsigned __int16 *)v67;
      if (v68 >= 0xB && *((_WORD *)v67 + 5))
      {
        unsigned int v69 = *(unsigned __int16 *)&v66[*((unsigned __int16 *)v67 + 5)];
        unsigned int v70 = *(unsigned __int16 *)(v108 + 3880);
        if (!*(_WORD *)(v108 + 3880)) {
          goto LABEL_76;
        }
      }
      else
      {
        unsigned int v69 = 0xFFFF;
        unsigned int v70 = *(unsigned __int16 *)(v108 + 3880);
        if (!*(_WORD *)(v108 + 3880)) {
          goto LABEL_76;
        }
      }
      if (v68 >= 0x11)
      {
        uint64_t v71 = *((unsigned __int16 *)v67 + 8);
        if (v71)
        {
          long long v72 = &v66[v71 + *(unsigned int *)&v66[v71]];
          if (*(_DWORD *)v72 >= v70)
          {
            unsigned int v73 = *(unsigned __int16 *)&v72[2 * v70 + 2];
            if ((unsigned __int16)(v73 + 1) > 1u)
            {
              double v74 = (double)v73;
LABEL_78:
              double v75 = v74 / 1000.0;
              uint64_t v76 = (char *)v4[13];
              unint64_t v77 = ((char *)v4[14] - v76) >> 4;
              if (v77 > v53) {
                goto LABEL_87;
              }
              goto LABEL_83;
            }
          }
        }
      }
LABEL_76:
      if (v69 != 0xFFFF)
      {
        double v74 = (double)v69;
        goto LABEL_78;
      }
      double v75 = 0.3;
      uint64_t v76 = (char *)v4[13];
      unint64_t v77 = ((char *)v4[14] - v76) >> 4;
      if (v77 > v53) {
        goto LABEL_87;
      }
LABEL_83:
      unint64_t v78 = (v53 + 1);
      LOWORD(v115) = 0;
      *((void *)&v115 + 1) = 0;
      if (v78 <= v77)
      {
        if (v78 < v77) {
          v4[14] = &v76[16 * v78];
        }
      }
      else
      {
        sub_F169FC(v111, v78 - v77, &v115);
        uint64_t v76 = *v111;
      }
LABEL_87:
      uint64_t v79 = (uint64_t)v4;
      *(double *)&v76[16 * v53 + 8] = v75;
      sub_10056A4((uint64_t)a2, &v131, (uint64_t)&v127);
      uint64_t v109 = v51;
      uint64_t v80 = v129;
      uint64_t v81 = v130;
      if (v129 != (unint64_t)v130)
      {
        uint64_t v82 = v127;
        uint64_t v83 = v128;
        unsigned int v113 = v128;
        while (2)
        {
          sub_1025954(v79, (uint64_t)a2, v53, *v82 + 152 * v80, (void **)&v136, (uint64_t)&v115);
          unint64_t v84 = DWORD2(v115);
          if (DWORD1(v115) == -1 || DWORD2(v115) == -1) {
            goto LABEL_114;
          }
          int v86 = v52;
          LODWORD(v115) = v52;
          unint64_t v87 = v53;
          sub_1025EBC(v112, v53, (uint64_t *)&v115);
          unint64_t v88 = (char *)v114[13];
          uint64_t v89 = (char *)v114[14];
          unint64_t v90 = (v89 - v88) >> 4;
          if (v90 <= v84)
          {
            unint64_t v91 = v84 + 1;
            unint64_t v92 = v84 + 1 - v90;
            uint64_t v93 = v114[15];
            if (v92 <= (v93 - (uint64_t)v89) >> 4)
            {
              unint64_t v101 = &v89[16 * v92];
              do
              {
                *(_WORD *)uint64_t v89 = 0;
                *((void *)v89 + 1) = 0;
                v89 += 16;
              }
              while (v89 != v101);
              v114[14] = v101;
              goto LABEL_112;
            }
            uint64_t v94 = v93 - (void)v88;
            unint64_t v95 = v94 >> 3;
            if (v94 >> 3 <= v91) {
              unint64_t v95 = v84 + 1;
            }
            if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v95 = 0xFFFFFFFFFFFFFFFLL;
            }
            if (v95 >> 60) {
              sub_188D718();
            }
            unint64_t v110 = v95;
            uint64_t v96 = (char *)operator new(16 * v95);
            uint64_t v97 = &v96[16 * v90];
            uint64_t v98 = &v96[16 * v91];
            uint64_t v99 = v97;
            do
            {
              *(_WORD *)uint64_t v99 = 0;
              *((void *)v99 + 1) = 0;
              v99 += 16;
            }
            while (v99 != v98);
            uint64_t v100 = *v111;
            if (v89 == *v111)
            {
              v114[13] = v97;
              v114[14] = v98;
              v114[15] = &v96[16 * v110];
              if (!v89) {
                goto LABEL_112;
              }
            }
            else
            {
              do
              {
                *((_OWORD *)v97 - 1) = *((_OWORD *)v89 - 1);
                v97 -= 16;
                v89 -= 16;
              }
              while (v89 != v100);
              uint64_t v89 = *v111;
              v114[13] = v97;
              v114[14] = v98;
              v114[15] = &v96[16 * v110];
              if (!v89)
              {
LABEL_112:
                unint64_t v88 = *v111;
                goto LABEL_113;
              }
            }
            operator delete(v89);
            goto LABEL_112;
          }
LABEL_113:
          int v52 = v86 + 1;
          ++*(_WORD *)&v88[16 * v84];
          unint64_t v53 = v87;
          uint64_t v83 = v113;
          uint64_t v79 = (uint64_t)v114;
LABEL_114:
          if (__p)
          {
            uint64_t v126 = __p;
            operator delete(__p);
          }
          if (v116)
          {
            int v117 = v116;
            operator delete(v116);
          }
          uint64_t v80 = *(unsigned int *)(*v83 + 4 * v80);
          if (v80 == v81) {
            break;
          }
          continue;
        }
      }
      uint64_t v51 = v109 + 1;
      unint64_t v4 = (void **)v79;
    }
    while (v109 + 1 != (unsigned int *)v107);
  }
  uint64_t v102 = (char *)v4[13];
  unint64_t v103 = ((unint64_t)((char *)v4[8] - (char *)v4[7]) >> 2) - 1;
  unint64_t v104 = ((char *)v4[14] - v102) >> 4;
  if (v103 <= v104)
  {
    if (v103 < v104) {
      v4[14] = &v102[16 * v103];
    }
  }
  else
  {
    sub_C2F094((char **)v4 + 13, v103 - v104);
  }
  if (v132)
  {
    unint64_t v133 = (unint64_t)v132;
    operator delete(v132);
  }
  if (v136)
  {
    uint64_t v137 = v136;
    operator delete(v136);
  }
  return v4;
}

void sub_1025444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  float v21 = *(void **)(v19 - 160);
  if (v21)
  {
    *(void *)(v19 - 152) = v21;
    operator delete(v21);
    uint64_t v22 = *(void **)(v19 - 128);
    if (!v22)
    {
LABEL_3:
      uint64_t v23 = *a10;
      if (!*a10) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v22 = *(void **)(v19 - 128);
    if (!v22) {
      goto LABEL_3;
    }
  }
  *(void *)(v19 - 120) = v22;
  operator delete(v22);
  uint64_t v23 = *a10;
  if (!*a10)
  {
LABEL_4:
    uint64_t v24 = *a11;
    if (!*a11) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  v18[23] = v23;
  operator delete(v23);
  uint64_t v24 = *a11;
  if (!*a11)
  {
LABEL_5:
    unint64_t v25 = *a12;
    if (!*a12) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  v18[20] = v24;
  operator delete(v24);
  unint64_t v25 = *a12;
  if (!*a12)
  {
LABEL_6:
    sub_F2DA34(a18);
    _Unwind_Resume(a1);
  }
LABEL_11:
  v18[17] = v25;
  operator delete(v25);
  sub_F2DA34(a18);
  _Unwind_Resume(a1);
}

void sub_10255D8(uint64_t a1, size_t __sz, unint64_t a3, int a4, int a5)
{
  int v6 = a4;
  unint64_t v10 = __sz + 1;
  if (!a5) {
    goto LABEL_15;
  }
  long long v11 = *(unsigned char **)a1;
  unint64_t v12 = *(unsigned char **)(a1 + 8);
  uint64_t v13 = (uint64_t)&v12[-*(void *)a1];
  uint64_t v14 = v13 >> 2;
  if (v10 <= v13 >> 2 || v10 <= (uint64_t)(*(void *)(a1 + 16) - (void)v11) >> 2) {
    goto LABEL_15;
  }
  if (v10 >> 62) {
    goto LABEL_45;
  }
  uint64_t v15 = (char *)operator new(4 * v10);
  uint64_t v16 = &v15[4 * v14];
  uint64_t v17 = v16;
  int v6 = a4;
  if (v12 != v11)
  {
    unint64_t v18 = v12 - v11 - 4;
    if (v18 < 0x2C)
    {
      uint64_t v17 = &v15[4 * v14];
      do
      {
LABEL_12:
        int v26 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v17 - 1) = v26;
        v17 -= 4;
      }
      while (v12 != v11);
      goto LABEL_13;
    }
    uint64_t v17 = &v15[4 * v14];
    if ((unint64_t)(v12 - v15 - v13) < 0x20) {
      goto LABEL_12;
    }
    uint64_t v19 = (v18 >> 2) + 1;
    uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
    float v21 = &v12[-v20];
    uint64_t v17 = &v16[-v20];
    uint64_t v22 = &v15[4 * v14 - 16];
    uint64_t v23 = (long long *)(v12 - 16);
    uint64_t v24 = v19 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v25 = *v23;
      *((_OWORD *)v22 - 1) = *(v23 - 1);
      *(_OWORD *)uint64_t v22 = v25;
      v22 -= 32;
      v23 -= 2;
      v24 -= 8;
    }
    while (v24);
    unint64_t v12 = v21;
    if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_12;
    }
  }
LABEL_13:
  *(void *)a1 = v17;
  *(void *)(a1 + 8) = v16;
  *(void *)(a1 + 16) = &v15[4 * v10];
  if (v11) {
    operator delete(v11);
  }
LABEL_15:
  uint64_t v27 = *(unsigned char **)(a1 + 48);
  unint64_t v28 = *(unsigned char **)(a1 + 56);
  unint64_t v29 = (v28 - v27) >> 2;
  if (v10 <= v29 || v10 <= (uint64_t)(*(void *)(a1 + 64) - (void)v27) >> 2) {
    goto LABEL_28;
  }
  if (v10 >> 62) {
LABEL_45:
  }
    sub_2E00();
  uint64_t v30 = operator new(4 * v10);
  uint64_t v31 = &v30[4 * v29];
  unint64_t v32 = v31;
  if (v28 == v27) {
    goto LABEL_26;
  }
  unint64_t v33 = v28 - v27 - 4;
  if (v33 < 0x2C)
  {
    unint64_t v32 = &v30[4 * v29];
    do
    {
LABEL_25:
      int v41 = *((_DWORD *)v28 - 1);
      v28 -= 4;
      *((_DWORD *)v32 - 1) = v41;
      v32 -= 4;
    }
    while (v28 != v27);
    goto LABEL_26;
  }
  unint64_t v32 = &v30[4 * v29];
  if ((unint64_t)(v27 - v30) < 0x20) {
    goto LABEL_25;
  }
  uint64_t v34 = (v33 >> 2) + 1;
  uint64_t v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
  uint64_t v36 = &v28[-v35];
  unint64_t v32 = &v31[-v35];
  uint64_t v37 = &v30[4 * v29 - 16];
  int64_t v38 = (long long *)(v28 - 16);
  uint64_t v39 = v34 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v40 = *v38;
    *(v37 - 1) = *(v38 - 1);
    *uint64_t v37 = v40;
    v37 -= 2;
    v38 -= 2;
    v39 -= 8;
  }
  while (v39);
  unint64_t v28 = v36;
  if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_25;
  }
LABEL_26:
  *(void *)(a1 + 48) = v32;
  *(void *)(a1 + 56) = v31;
  *(void *)(a1 + 64) = &v30[4 * v10];
  if (v27) {
    operator delete(v27);
  }
LABEL_28:
  if (a5 && 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3) < a3) {
    sub_1027FF0((char **)(a1 + 24), a3);
  }
  if (0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3) < a3) {
    sub_1027FF0((char **)(a1 + 72), a3);
  }
  if (v6)
  {
    uint64_t v42 = *(unsigned char **)(a1 + 96);
    if (__sz > (uint64_t)(*(void *)(a1 + 112) - (void)v42) >> 4)
    {
      if (__sz >> 60) {
        sub_2E00();
      }
      unint64_t v43 = *(unsigned char **)(a1 + 104);
      size_t v44 = 16 * __sz;
      uint64_t v45 = (char *)operator new(v44);
      uint64_t v46 = &v45[(v43 - v42) & 0xFFFFFFFFFFFFFFF0];
      unint64_t v47 = v46;
      if (v43 != v42)
      {
        int v48 = &v45[(v43 - v42) & 0xFFFFFFFFFFFFFFF0];
        do
        {
          unint64_t v47 = v48 - 16;
          *((_OWORD *)v48 - 1) = *((_OWORD *)v43 - 1);
          v43 -= 16;
          v48 -= 16;
        }
        while (v43 != v42);
      }
      *(void *)(a1 + 96) = v47;
      *(void *)(a1 + 104) = v46;
      *(void *)(a1 + 112) = &v45[v44];
      if (v42)
      {
        operator delete(v42);
      }
    }
  }
}

void sub_1025954(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, void **a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v12 = 1000000000;
  uint64_t v13 = sub_3766F8(*(void **)a1);
  unsigned int v63 = -1;
  unsigned int v64 = -1;
  uint64_t v61 = 0;
  double v62 = 0.0;
  uint64_t v60 = 0;
  int v59 = 0;
  char v58 = 1;
  char v57 = 1;
  long long v55 = 0uLL;
  uint64_t v56 = 0;
  char v54 = 1;
  v53[0] = (void **)&v55;
  v53[1] = (void **)&v54;
  v53[2] = (void **)&v63;
  v53[3] = (void **)&v64;
  v53[4] = a5;
  v53[5] = (void **)&v62;
  v53[6] = (void **)v13;
  v53[7] = (void **)&v59;
  v53[8] = (void **)&v58;
  v53[9] = (void **)&v57;
  v53[10] = (void **)&v61;
  v53[11] = (void **)&v60;
  if (a3 != 0xFFFFFFFFLL)
  {
    uint64_t v14 = *(void *)(a1 + 128);
    unint64_t v15 = 0xCF3CF3CF3CF3CF3DLL * ((*(void *)(a1 + 136) - v14) >> 3);
    if (v15 > a3)
    {
      uint64_t v16 = v14 + 168 * a3;
LABEL_7:
      unsigned int v12 = 1000000000 - *(_DWORD *)(v16 + 96);
      goto LABEL_8;
    }
    unint64_t v17 = v15 - 0x30C30C30C30C30C3 * ((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 3);
    if (a3 >= v17)
    {
      uint64_t v18 = *(void *)(a1 + 176);
      if (v17 - 0x30C30C30C30C30C3 * ((*(void *)(a1 + 184) - v18) >> 3) > a3)
      {
        uint64_t v16 = v18 + 168 * (a3 - v17);
        goto LABEL_7;
      }
    }
  }
LABEL_8:
  sub_1027224(v53, (_DWORD *)a4, v12);
  for (unsigned int i = v64; v64 == -1; unsigned int i = v64)
  {
    sub_10056A4(a2, &v63, (uint64_t)&__p);
    sub_1027224(v53, (_DWORD *)(*(void *)__p + 152 * v52), 0x3B9ACA00u);
  }
  unint64_t v20 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 3);
  unint64_t v21 = v20 - 0x30C30C30C30C30C3 * ((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 3);
  BOOL v22 = v21 <= i && v21 - 0x30C30C30C30C30C3 * ((uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 3) > i;
  if (v22 || (v20 <= i ? (BOOL v23 = v21 > i) : (BOOL v23 = 0), v23))
  {
    uint64_t v24 = *(void *)(*((void *)&v55 + 1) - 8);
    long long v25 = sub_32A458(v13, *(void *)(v24 + 72));
    double v26 = 0.0;
    double v27 = 0.0;
    if (!v25) {
      goto LABEL_32;
    }
    unint64_t v28 = &v25[-*(int *)v25];
    unsigned int v29 = *(unsigned __int16 *)v28;
    if (v29 >= 0xB && *((_WORD *)v28 + 5))
    {
      unsigned int v30 = *(unsigned __int16 *)&v25[*((unsigned __int16 *)v28 + 5)];
      unsigned int v31 = *(unsigned __int16 *)(v13 + 3880);
      if (!*(_WORD *)(v13 + 3880)) {
        goto LABEL_29;
      }
    }
    else
    {
      unsigned int v30 = 0xFFFF;
      unsigned int v31 = *(unsigned __int16 *)(v13 + 3880);
      if (!*(_WORD *)(v13 + 3880)) {
        goto LABEL_29;
      }
    }
    if (v29 >= 0x11)
    {
      uint64_t v32 = *((unsigned __int16 *)v28 + 8);
      if (v32)
      {
        unint64_t v33 = &v25[v32 + *(unsigned int *)&v25[v32]];
        if (*(_DWORD *)v33 >= v31)
        {
          unsigned int v34 = *(unsigned __int16 *)&v33[2 * v31 + 2];
          if ((unsigned __int16)(v34 + 1) > 1u)
          {
            double v35 = (double)v34;
LABEL_31:
            double v27 = v35 / 1000.0;
LABEL_32:
            uint64_t v36 = *(int **)(v24 + 40);
            uint64_t v37 = (unsigned __int16 *)((char *)v36 - *v36);
            if (*v37 >= 9u) {
              goto LABEL_33;
            }
            goto LABEL_36;
          }
        }
      }
    }
LABEL_29:
    if (v30 == 0xFFFF)
    {
      double v27 = 0.3;
      uint64_t v36 = *(int **)(v24 + 40);
      uint64_t v37 = (unsigned __int16 *)((char *)v36 - *v36);
      if (*v37 >= 9u)
      {
LABEL_33:
        uint64_t v38 = v37[4];
        if (v38)
        {
          LODWORD(v26) = *(int *)((char *)v36 + v38);
          double v26 = (double)*(unint64_t *)&v26;
        }
      }
LABEL_36:
      unsigned int i = v64;
      uint64_t v39 = *(void *)(a1 + 128);
      unint64_t v40 = 0xCF3CF3CF3CF3CF3DLL * ((*(void *)(a1 + 136) - v39) >> 3);
      if (v64 >= v40)
      {
        uint64_t v42 = *(void *)(a1 + 152);
        unint64_t v43 = v40 - 0x30C30C30C30C30C3 * ((*(void *)(a1 + 160) - v42) >> 3);
        BOOL v44 = v64 >= v43;
        unint64_t v45 = v64 - v43;
        if (v44) {
          uint64_t v41 = *(void *)(a1 + 176) + 168 * v45;
        }
        else {
          uint64_t v41 = v42 + 168 * (v64 - v40);
        }
      }
      else
      {
        uint64_t v41 = v39 + 168 * v64;
      }
      double v46 = v27 * v26;
      LODWORD(v27) = *(_DWORD *)(v41 + 16);
      double v62 = v62 + v46 * ((double)*(unint64_t *)&v27 / 1000000000.0);
      goto LABEL_42;
    }
    double v35 = (double)v30;
    goto LABEL_31;
  }
LABEL_42:
  if (v54)
  {
    __n128 __p = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    *(void *)&long long v49 = 0x7FFFFFFFFFFFFFFFLL;
    *((void *)&v49 + 1) = 0x7FFFFFFFFFFFFFFFLL;
    sub_10277C8(a6, -1, a3, i, (uint64_t)&__p, a4 + 112, &v49, (uint64_t *)(a4 + 136), v62, &v59, v58, v57, v48, 0x7FFFFFFF, v61, v60);
    if (__p)
    {
      uint64_t v51 = __p;
      operator delete(__p);
    }
    unint64_t v47 = *(void **)(a6 + 16);
    if (v47)
    {
      *(void *)(a6 + 24) = v47;
      operator delete(v47);
      *(void *)(a6 + 16) = 0;
      *(void *)(a6 + 24) = 0;
      *(void *)(a6 + 32) = 0;
    }
    *(_OWORD *)(a6 + 16) = v55;
    *(void *)(a6 + 32) = v56;
  }
  else
  {
    *(_OWORD *)(a6 + 8) = 0u;
    *(_OWORD *)(a6 + 56) = 0u;
    *(_OWORD *)(a6 + 40) = 0u;
    *(_OWORD *)(a6 + 72) = 0u;
    *(_OWORD *)(a6 + 24) = 0u;
    *(_OWORD *)(a6 + 136) = 0u;
    *(_OWORD *)(a6 + 120) = 0u;
    *(_OWORD *)(a6 + 104) = 0u;
    *(_OWORD *)(a6 + 88) = 0u;
    *(void *)a6 = -1;
    *(_DWORD *)(a6 + 8) = -1;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_DWORD *)(a6 + 80) = 0;
    *(void *)(a6 + 16) = 0;
    *(void *)(a6 + 24) = 0;
    *(void *)(a6 + 32) = 0;
    *(unsigned char *)(a6 + 40) = 0;
    *(_WORD *)(a6 + 84) = -1;
    *(_OWORD *)(a6 + 104) = 0u;
    *(_OWORD *)(a6 + 88) = 0u;
    *(void *)(a6 + 120) = 0x7FFFFFFFFFFFFFFFLL;
    *(void *)(a6 + 128) = 0x7FFFFFFFFFFFFFFFLL;
    *(unsigned char *)(a6 + 137) = 1;
    *(_DWORD *)(a6 + 148) = 0;
    *(void *)(a6 + 152) = 0;
    *(void *)(a6 + 160) = 0;
    *(_DWORD *)(a6 + 156) = 0x7FFFFFFF;
    *(void *)(a6 + 168) = 0;
    *(void *)(a6 + 176) = 0;
    if ((void)v55)
    {
      *((void *)&v55 + 1) = v55;
      operator delete((void *)v55);
    }
  }
}

void sub_1025E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v19 = *(void **)(v17 - 144);
    if (!v19) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v19 = *(void **)(v17 - 144);
    if (!v19) {
      goto LABEL_3;
    }
  }
  *(void *)(v17 - 136) = v19;
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1025EBC(void *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[7];
  uint64_t v5 = (uint64_t)(a1 + 6);
  unsigned int v6 = a2 + 1;
  uint64_t v7 = v4 - v3;
  unsigned int v8 = ((unint64_t)(v4 - v3) >> 2) - 1;
  if (a2 + 1 < v8)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v20, "outgoing arc cannot be inserted because vertices with higher index are already present in the graph");
    uint64_t v19 = (void *)sub_2F404((uint64_t)exception, &v20);
  }
  if (v8 <= a2)
  {
    unint64_t v11 = a2 + 2;
    uint64_t v12 = a1[1];
    unint64_t v13 = (v12 - *a1) >> 2;
    if (v11 <= v13)
    {
      if (v11 < v13) {
        a1[1] = *a1 + 4 * v11;
      }
    }
    else
    {
      sub_500DC((uint64_t)a1, v11 - v13, (const float *)(v12 - 4));
      uint64_t v3 = a1[6];
      uint64_t v4 = a1[7];
      uint64_t v7 = v4 - v3;
    }
    unint64_t v14 = v7 >> 2;
    if (v11 <= v14)
    {
      if (v11 < v14) {
        a1[7] = v3 + 4 * v11;
      }
    }
    else
    {
      sub_500DC(v5, v11 - v14, (const float *)(v4 - 4));
    }
  }
  unint64_t v15 = a1[10];
  if (v15 >= a1[11])
  {
    uint64_t v16 = sub_102820C(a1 + 9, a3);
  }
  else
  {
    sub_102843C(a1[10], a3);
    uint64_t v16 = v15 + 184;
    a1[10] = v15 + 184;
  }
  a1[10] = v16;
  ++*(_DWORD *)(a1[6] + 4 * v6);
  return v16 - 184;
}

void sub_1026018(_Unwind_Exception *a1)
{
  *(void *)(v1 + 80) = v2;
  _Unwind_Resume(a1);
}

void sub_1026020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1026050(void *a1)
{
  uint64_t v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_1026098(uint64_t a1)
{
  return *(unsigned int *)(a1 + 200);
}

double sub_10260A0(uint64_t a1, unsigned int *a2)
{
  return *(double *)(sub_10260C4((void *)(a1 + 8), *a2) + 8);
}

uint64_t sub_10260C4(void *a1, unsigned int a2)
{
  uint64_t v3 = a2;
  sub_10230AC((uint64_t)a1, a2);
  uint64_t v4 = a1[12];
  if (((a1[7] - a1[6]) >> 2) - 1 > (unint64_t)((a1[13] - v4) >> 4))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v8, "no or incomplete vertex data stored");
    uint64_t v7 = (void *)sub_2F404((uint64_t)exception, &v8);
  }
  return v4 + 16 * v3;
}

void sub_1026164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1026194(uint64_t a1)
{
  return ((*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 2) - 1;
}

unint64_t sub_10261A8(void *a1)
{
  return 0xD37A6F4DE9BD37A7 * ((uint64_t)(a1[5] - a1[4]) >> 3)
       - 0x2C8590B21642C859 * ((uint64_t)(a1[11] - a1[10]) >> 3);
}

uint64_t sub_10261DC@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = *a2;
  sub_10230AC(a1 + 8, *a2);
  uint64_t v7 = *(void *)(a1 + 80) + 184 * *(unsigned int *)(*(void *)(a1 + 56) + 4 * v6);
  uint64_t result = sub_10230AC(v5, v6);
  uint64_t v9 = *(void *)(a1 + 80) + 184 * *(unsigned int *)(*(void *)(a1 + 56) + 4 * (v6 + 1));
  *a3 = v7;
  a3[1] = v9;
  return result;
}

uint64_t sub_102625C(uint64_t a1, int *a2)
{
  uint64_t v3 = *a2;
  sub_10230AC(a1 + 8, *a2);
  return (*(_DWORD *)(*(void *)(a1 + 56) + 4 * (v3 + 1))
                      - *(_DWORD *)(*(void *)(a1 + 56) + 4 * v3));
}

uint64_t sub_10262A0(uint64_t a1, unsigned int *a2)
{
  return *(unsigned __int16 *)sub_10260C4((void *)(a1 + 8), *a2);
}

uint64_t sub_10262C4(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  *(void *)(a3 + 8) = *(void *)a3;
  uint64_t v6 = a1 + 8;
  uint64_t v7 = *a2;
  sub_10230AC(a1 + 8, *a2);
  uint64_t v8 = *(void *)(a1 + 80) + 184 * *(unsigned int *)(*(void *)(a1 + 56) + 4 * v7);
  LODWORD(v4) = *v4;
  uint64_t result = sub_10230AC(v6, (int)v4);
  uint64_t v10 = *(void *)(a1 + 80) + 184 * *(unsigned int *)(*(void *)(a1 + 56) + 4 * (v4 + 1));
  for (unsigned int i = (void **)a3; v8 != v10; v8 += 184)
  {
    uint64_t v11 = v8;
    uint64_t result = (uint64_t)sub_2A98DC(&i, &v11);
  }
  return result;
}

BOOL sub_1026380(void *a1, unsigned int a2)
{
  if (a2 == 0xFFFFFFFFLL) {
    return 0;
  }
  unint64_t v3 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a1[17] - a1[16]) >> 3);
  return v3 <= a2 && v3 - 0x30C30C30C30C30C3 * ((uint64_t)(a1[20] - a1[19]) >> 3) > a2;
}

uint64_t sub_10263D8(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 128) + 168 * a2 + 96;
}

uint64_t sub_10263F0(void *a1, unsigned int a2)
{
  return a1[19] + 168 * (0x30C30C30C30C30C3 * ((uint64_t)(a1[17] - a1[16]) >> 3) + a2) + 16;
}

uint64_t sub_1026428(void *a1, unsigned int a2)
{
  return a1[22]
       + 168
       * (0x30C30C30C30C30C3 * ((uint64_t)(a1[17] - a1[16]) >> 3)
        + a2
        + 0x30C30C30C30C30C3 * ((uint64_t)(a1[20] - a1[19]) >> 3))
       + 16;
}

uint64_t sub_1026470(void *a1, unsigned int a2)
{
  return a1[22]
       + 168
       * (0x30C30C30C30C30C3 * ((uint64_t)(a1[17] - a1[16]) >> 3)
        + a2
        + 0x30C30C30C30C30C3 * ((uint64_t)(a1[20] - a1[19]) >> 3))
       + 96;
}

unint64_t sub_10264B8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, char a6, uint64_t a7, double a8, double a9)
{
  char v24 = a6;
  *(_DWORD *)(a1 + 200) = 0x7FFFFFFF;
  int v23 = 0x7FFFFFFF;
  v22[0] = (_DWORD *)a1;
  v22[1] = &v23;
  void v22[2] = a5;
  v21[0] = a1;
  v21[1] = a3;
  v21[2] = a4;
  v21[3] = &v23;
  v21[4] = &v24;
  v21[5] = a7;
  uint64_t v10 = *(unsigned int **)(a1 + 128);
  for (unsigned int i = *(unsigned int **)(a1 + 136); v10 != i; v10 += 42)
  {
    uint64_t v14 = sub_EC98F8(a8, a9, a3, (uint64_t)(v10 + 22), (uint64_t)(v10 + 24), a4, 0);
    if (v14 != -1 && (v14 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000 && v15 != 0x7FFFFFFFFFFFFFFFLL)
    {
      unsigned int v18 = *v10;
      int v20 = HIDWORD(v14);
      unsigned int v25 = v18;
      sub_1028598(a2 + 8, &v25, &v20);
    }
  }
  return sub_10265BC(a2, v22, (uint64_t)&v25, (uint64_t)v21);
}

unint64_t sub_10265BC(unint64_t result, _DWORD **a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(result + 880))
  {
    uint64_t v5 = a2;
    unint64_t v6 = result;
    uint64_t v7 = result + 8;
    unint64_t v29 = result;
    do
    {
      uint64_t v8 = (unsigned int *)(*(void *)(v6 + 776) + 8 * **(unsigned int **)(v6 + 832));
      unint64_t v10 = *v8;
      int v9 = v8[1];
      sub_ED37DC(v7);
      if (v10 != -1)
      {
        uint64_t v11 = *v5;
        unint64_t v12 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((void *)*v5 + 17) - *((void *)*v5 + 16)) >> 3);
        if (v12 <= v10
          && v12 - 0x30C30C30C30C30C3 * ((uint64_t)(*((void *)*v5 + 20) - *((void *)*v5 + 19)) >> 3) > v10)
        {
          int v14 = *((_DWORD *)v11 + 50);
          if (v14 == 0x7FFFFFFF || v9 < v14) {
            *((_DWORD *)v11 + 50) = v9;
          }
        }
      }
      int v16 = *v5[2];
      unsigned int v17 = 0x7FFFFFFF;
      if (v16 != 0x7FFFFFFF)
      {
        if (v9 < 0) {
          char v18 = -5;
        }
        else {
          char v18 = 5;
        }
        unsigned int v17 = v9 / 10
            + v16
            + (((103 * (char)(v18 + v9 % 10)) >> 15) & 1)
            + ((103 * (char)(v18 + v9 % 10)) >> 10);
      }
      *v5[1] = v17;
      uint64_t v19 = *(void *)v6;
      sub_10230AC(*(void *)v6, v10);
      uint64_t v20 = *(void *)(v19 + 72);
      unsigned int v21 = *(_DWORD *)(*(void *)(v19 + 48) + 4 * v10);
      uint64_t result = sub_10230AC(v19, v10);
      uint64_t v22 = *(void *)(v19 + 72) + 184 * *(unsigned int *)(*(void *)(v19 + 48) + 4 * (v10 + 1));
      if (v20 + 184 * v21 != v22)
      {
        int v23 = (unsigned int *)(v20 + 184 * v21 + 8);
        do
        {
          char v24 = v23 - 2;
          uint64_t result = sub_10267E0(*(void *)a4, *(void *)(*(void *)a4 + 80) + 184 * *(v23 - 2), *(void *)(a4 + 8), *(void *)(a4 + 16), *(int **)(a4 + 24), **(unsigned __int8 **)(a4 + 32), v9, *(void *)(a4 + 40));
          v23[37] = HIDWORD(result);
          if (result != -1 && HIDWORD(result) != 0x7FFFFFFF && v25 != 0x7FFFFFFFFFFFFFFFLL)
          {
            unsigned int v28 = *v23;
            int v31 = v9 + HIDWORD(result);
            unsigned int v32 = v28;
            uint64_t result = sub_1028808(v7, &v32, &v31);
          }
          v23 += 46;
        }
        while (v24 + 46 != (unsigned int *)v22);
      }
      unint64_t v6 = v29;
      uint64_t v5 = a2;
    }
    while (*(_DWORD *)(v29 + 880));
  }
  return result;
}

unint64_t sub_10267E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, int a6, int a7, uint64_t a8)
{
  unint64_t v12 = *(unsigned int *)(a2 + 4);
  if (v12 == -1)
  {
    BOOL v14 = 0;
    unint64_t v15 = *(unsigned int *)(a2 + 8);
    if (v15 == -1) {
      goto LABEL_31;
    }
    goto LABEL_6;
  }
  unint64_t v13 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 3);
  if (v13 > v12)
  {
    BOOL v14 = 1;
    unint64_t v15 = *(unsigned int *)(a2 + 8);
    if (v15 == -1) {
      goto LABEL_31;
    }
LABEL_6:
    unint64_t v16 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 3);
    unint64_t v17 = v16 - 0x30C30C30C30C30C3 * ((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 3);
    if (v17 <= v15
      && v17 - 0x30C30C30C30C30C3 * ((uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 3) > v15)
    {
      BOOL v20 = 1;
      if (*(_DWORD *)(a2 + 80)) {
        BOOL v31 = *(void *)(a2 + 48) == 0;
      }
      else {
        BOOL v31 = 1;
      }
      if (v31 || *(void *)(a2 + 56) == 0) {
        goto LABEL_39;
      }
    }
    else
    {
      BOOL v20 = v16 <= v15 && v17 > v15;
      if (*(_DWORD *)(a2 + 80)) {
        BOOL v21 = *(void *)(a2 + 48) == 0;
      }
      else {
        BOOL v21 = 1;
      }
      if (v21 || *(void *)(a2 + 56) == 0) {
        goto LABEL_39;
      }
    }
LABEL_49:
    uint64_t v33 = *(void *)(a1 + 128);
    unint64_t v34 = 0xCF3CF3CF3CF3CF3DLL * ((*(void *)(a1 + 136) - v33) >> 3);
    unint64_t v35 = v15 - v34;
    if (v15 < v34)
    {
      uint64_t v36 = (int *)(v33 + 168 * v15 + 16);
      unint64_t v37 = v12 - v34;
      if (v12 < v34) {
        goto LABEL_61;
      }
LABEL_56:
      uint64_t v44 = *(void *)(a1 + 152);
      unint64_t v45 = v34 - 0x30C30C30C30C30C3 * ((*(void *)(a1 + 160) - v44) >> 3);
      BOOL v42 = v12 >= v45;
      unint64_t v46 = v12 - v45;
      if (v42) {
        uint64_t v47 = *(void *)(a1 + 176) + 168 * v46;
      }
      else {
        uint64_t v47 = v44 + 168 * v37;
      }
      goto LABEL_63;
    }
    uint64_t v40 = *(void *)(a1 + 152);
    unint64_t v41 = v34 - 0x30C30C30C30C30C3 * ((*(void *)(a1 + 160) - v40) >> 3);
    BOOL v42 = v15 >= v41;
    unint64_t v43 = v15 - v41;
    if (v42)
    {
      uint64_t v36 = (int *)(*(void *)(a1 + 176) + 168 * v43 + 16);
      unint64_t v37 = v12 - v34;
      if (v12 >= v34) {
        goto LABEL_56;
      }
    }
    else
    {
      uint64_t v36 = (int *)(v40 + 168 * v35 + 16);
      unint64_t v37 = v12 - v34;
      if (v12 >= v34) {
        goto LABEL_56;
      }
    }
LABEL_61:
    uint64_t v47 = v33 + 168 * v12;
LABEL_63:
    int v51 = *(_DWORD *)(v47 + 96);
    int v52 = *v36;
    sub_456C((uint64_t)v66, *a5);
    unint64_t v53 = (int **)(*(void *)(*(void *)(a2 + 24) - 8) + 40);
    sub_ECBC00(a3, v53, a4, v66, a6);
    double v55 = v54;
    int v56 = sub_4F44(v66);
    unint64_t v57 = sub_ECA410(a3, v53, v52 - v51, a4, v56, a6, v55);
    sub_4814((uint64_t)v66);
    return v57;
  }
  unint64_t v23 = v13 - 0x30C30C30C30C30C3 * ((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 3);
  BOOL v14 = v23 <= v12 && v23 - 0x30C30C30C30C30C3 * ((uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 3) > v12;
  unint64_t v15 = *(unsigned int *)(a2 + 8);
  if (v15 != -1) {
    goto LABEL_6;
  }
LABEL_31:
  BOOL v20 = 0;
  if (*(_DWORD *)(a2 + 80)) {
    BOOL v25 = *(void *)(a2 + 48) == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (!v25 && *(void *)(a2 + 56) != 0) {
    goto LABEL_49;
  }
LABEL_39:
  if (v14)
  {
    uint64_t v27 = *(void *)(a1 + 128);
    unint64_t v28 = 0xCF3CF3CF3CF3CF3DLL * ((*(void *)(a1 + 136) - v27) >> 3);
    unint64_t v29 = v12 - v28;
    if (v12 >= v28)
    {
      uint64_t v48 = *(void *)(a1 + 152);
      unint64_t v49 = v28 - 0x30C30C30C30C30C3 * ((*(void *)(a1 + 160) - v48) >> 3);
      BOOL v42 = v12 >= v49;
      unint64_t v50 = v12 - v49;
      if (v42) {
        uint64_t v30 = *(void *)(a1 + 176) + 168 * v50;
      }
      else {
        uint64_t v30 = v48 + 168 * v29;
      }
    }
    else
    {
      uint64_t v30 = v27 + 168 * v12;
    }
    uint64_t v38 = (1000000000 - *(_DWORD *)(v30 + 96));
    if (v20) {
      goto LABEL_66;
    }
  }
  else
  {
    uint64_t v38 = 1000000000;
    if (v20)
    {
LABEL_66:
      uint64_t v59 = *(void *)(a1 + 128);
      unint64_t v60 = 0xCF3CF3CF3CF3CF3DLL * ((*(void *)(a1 + 136) - v59) >> 3);
      unint64_t v61 = v15 - v60;
      if (v15 >= v60)
      {
        uint64_t v63 = *(void *)(a1 + 152);
        unint64_t v64 = v60 - 0x30C30C30C30C30C3 * ((*(void *)(a1 + 160) - v63) >> 3);
        BOOL v42 = v15 >= v64;
        unint64_t v65 = v15 - v64;
        if (v42) {
          uint64_t v62 = *(void *)(a1 + 176) + 168 * v65;
        }
        else {
          uint64_t v62 = v63 + 168 * v61;
        }
      }
      else
      {
        uint64_t v62 = v59 + 168 * v15;
      }
      unsigned int v39 = *(_DWORD *)(v62 + 16);
      return sub_107F3C0(*(uint64_t **)(a2 + 16), *(uint64_t **)(a2 + 24), 0, 0, a3, a4, a6, *a5, a7, 0, v38, SHIDWORD(v38), v39, a8, *(void **)a1);
    }
  }
  unsigned int v39 = 0;
  return sub_107F3C0(*(uint64_t **)(a2 + 16), *(uint64_t **)(a2 + 24), 0, 0, a3, a4, a6, *a5, a7, 0, v38, SHIDWORD(v38), v39, a8, *(void **)a1);
}

void sub_1026BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1026C10()
{
  uint64_t v0 = __chkstk_darwin();
  int v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  int v9 = (void *)v0;
  sub_F2CEBC();
  unsigned int v10 = ((v9[8] - v9[7]) >> 2) - 1;
  uint64_t v63 = v9 + 1;
  unint64_t v57 = sub_1027934(v64, v10);
  uint64_t v58 = (uint64_t)(v9 + 1);
  sub_10264B8((uint64_t)v9, (unint64_t)&v63, (uint64_t)v75, v8, v4, v2, (uint64_t)&v73, v11, v12);
  unint64_t v59 = (unint64_t)(((v9[8] - v9[7]) << 30) - 0x100000000) >> 32;
  if (v59)
  {
    for (unint64_t i = 0; i != v59; ++i)
    {
      while (1)
      {
        uint64_t v17 = v9[16];
        if (0xCF3CF3CF3CF3CF3DLL * ((v9[17] - v17) >> 3) > i) {
          break;
        }
        uint64_t v61 = 0;
        uint64_t v19 = 0;
LABEL_27:
        sub_10230AC(v58, i);
        uint64_t v22 = v9[10];
        unsigned int v23 = *(_DWORD *)(v9[7] + 4 * i);
        sub_10230AC(v58, i);
        uint64_t v24 = v22 + 184 * v23;
        unint64_t v60 = i + 1;
        uint64_t v25 = v9[10] + 184 * *(unsigned int *)(v9[7] + 4 * (i + 1));
        while (v24 != v25)
        {
          unint64_t v26 = *(unsigned int *)(v24 + 8);
          if (v26 == -1
            || ((v27 = (uint64_t)(v9[17] - v9[16]) >> 3, uint64_t v28 = v9[19], 0xCF3CF3CF3CF3CF3DLL * v27 <= v26)
              ? (BOOL v29 = 0xCF3CF3CF3CF3CF3DLL * v27 - 0x30C30C30C30C30C3 * ((v9[20] - v28) >> 3) > v26)
              : (BOOL v29 = 0),
                !v29))
          {
            unint64_t v30 = 0;
            uint64_t v31 = 0;
LABEL_36:
            LODWORD(v73) = 0x7FFFFFFF;
            unint64_t v32 = sub_10267E0((uint64_t)v9, v24, (uint64_t)v75, v6, (int *)&v73, v2, 0, (uint64_t)&v62);
            if (v32 != -1
              && (v32 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000
              && v33 != 0x7FFFFFFFFFFFFFFFLL)
            {
              *(void *)(v24 + 120) = (((v32 + (v19 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000) + v30) & 0xFFFFFFFF00000000 | (v30 + v19 + v32);
              *(void *)(v24 + 128) = v31 + v61 + v33;
            }
            goto LABEL_29;
          }
          unint64_t v34 = v26 + 0x30C30C30C30C30C3 * v27;
          uint64_t v35 = v28 + 168 * v34;
          unsigned int v36 = *(unsigned __int16 *)(v35 + 82);
          if (v36 >> 5 > 0x464)
          {
            BOOL v39 = 0;
          }
          else
          {
            unsigned int v37 = *(unsigned __int16 *)(v6 + 1180);
            BOOL v39 = v37 >> 5 < 0x465 && v36 < v37;
          }
          LODWORD(v14) = *(_DWORD *)(v6 + 1176);
          if (*(double *)(v35 + 32) > (double)*(unint64_t *)&v14) {
            BOOL v39 = 1;
          }
          if (*(unsigned char *)(v28 + 168 * v34 + 80)) {
            BOOL v40 = !v39;
          }
          else {
            BOOL v40 = 1;
          }
          if (v40 || *(void *)(v28 + 168 * v34 + 24) > *(void *)(v6 + 1184))
          {
            int v41 = 0;
            int v42 = 0;
            uint64_t v43 = 0;
          }
          else
          {
            int v41 = *(_DWORD *)(v6 + 1160);
            int v42 = *(_DWORD *)(v6 + 1164);
            uint64_t v43 = *(void *)(v6 + 1168);
          }
          uint64_t v44 = v28 + 168 * v34;
          int v45 = *(unsigned __int8 *)(v44 + 40);
          uint64_t v46 = *(void *)(v44 + 24);
          if (v45) {
            BOOL v47 = v46 < *(void *)(v6 + 1152);
          }
          else {
            BOOL v47 = 1;
          }
          if (!v47)
          {
            v41 += *(_DWORD *)(v6 + 1136);
            v42 += *(_DWORD *)(v6 + 1140);
            v43 += *(void *)(v6 + 1144);
          }
          double v48 = 0.1 / (*(double *)(v6 + 56) / 3.6) * (double)v46;
          if (*(double *)(v28 + 168 * v34 + 48) <= 0.95)
          {
            if (v48 >= 0.0)
            {
              if (v48 < 4.50359963e15)
              {
                uint64_t v50 = (uint64_t)(v48 + v48) + 1;
                goto LABEL_80;
              }
            }
            else if (v48 > -4.50359963e15)
            {
              uint64_t v50 = (uint64_t)(v48 + v48);
              if (v50 >= 1) {
                --v50;
              }
LABEL_80:
              double v48 = (double)(v50 >> 1);
            }
            uint64_t v73 = v48;
            uint64_t v74 = 0;
            unint64_t v54 = sub_ECA2D8(&v73, (double *)(v6 + 1208), v48);
            uint64_t v52 = *(void *)(v6 + 1200) + v55;
            uint64_t v56 = (v41 + v54 + *(_DWORD *)(v6 + 1192));
            unint64_t v30 = v56 | ((unint64_t)(v42 + HIDWORD(v54) + *(_DWORD *)(v6 + 1196)) << 32);
            if (v56 == -1) {
              goto LABEL_29;
            }
            goto LABEL_82;
          }
          if (v48 >= 0.0)
          {
            if (v48 >= 4.50359963e15) {
              goto LABEL_76;
            }
            uint64_t v49 = (uint64_t)(v48 + v48) + 1;
          }
          else
          {
            if (v48 <= -4.50359963e15) {
              goto LABEL_76;
            }
            uint64_t v49 = (uint64_t)(v48 + v48);
            if (v49 >= 1) {
              --v49;
            }
          }
          double v48 = (double)(v49 >> 1);
LABEL_76:
          uint64_t v73 = v48;
          uint64_t v74 = 0;
          unint64_t v51 = sub_ECA2D8(&v73, (double *)(v6 + 1232), v48);
          uint64_t v53 = (v41 + v51);
          unint64_t v30 = v53 | ((unint64_t)(v42 + HIDWORD(v51)) << 32);
          if (v53 == -1) {
            goto LABEL_29;
          }
LABEL_82:
          if ((v30 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
          {
            uint64_t v31 = v52 + v43;
            if (v31 != 0x7FFFFFFFFFFFFFFFLL) {
              goto LABEL_36;
            }
          }
LABEL_29:
          v24 += 184;
        }
        unint64_t i = v60;
        if (v60 == v59) {
          goto LABEL_2;
        }
      }
      uint64_t v19 = sub_EC98F8(v13, v14, (uint64_t)v75, v17 + 168 * i + 88, v17 + 168 * i + 96, v6, 0);
      if (v19 != -1 && (v19 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000 && v18 != 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v61 = v18;
        goto LABEL_27;
      }
    }
  }
LABEL_2:
  if (v71)
  {
    long long v72 = v71;
    operator delete(v71);
  }
  if (v69)
  {
    unsigned int v70 = v69;
    operator delete(v69);
  }
  if (v67)
  {
    unsigned int v68 = v67;
    operator delete(v67);
  }
  if (v65)
  {
    uint64_t v66 = v65;
    operator delete(v65);
  }
  uint64_t result = (void *)sub_328138((uint64_t)v57);
  if (v77) {
    return sub_3A6230(v76);
  }
  return result;
}

void sub_10271D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_ECFCF0(va);
  if (LOBYTE(STACK[0x1848]))
  {
    sub_3A6230(&STACK[0x410]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_1027224(void ***a1, _DWORD *a2, unsigned int a3)
{
  uint64_t v7 = (char *)**a1;
  uint64_t v6 = (char *)(*a1)[1];
  while (v6 != v7)
  {
    uint64_t v8 = *((void *)v6 - 1);
    v6 -= 8;
    unint64_t v9 = (((*(void *)(v8 + 72) >> 16) & 0xFFFF0000 | (*(void *)(v8 + 72) << 32) | (2
                                                                                       * ((*(void *)(v8 + 72) & 0xFF000000000000) == 0)))
        + (((unint64_t)*(unsigned int *)(v8 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v8 + 88) >> 1) & 1;
    uint64_t v10 = sub_100231C((uint64_t)a2);
    if (v9 == ((((*(void *)(v10 + 72) >> 16) & 0xFFFF0000 | (*(void *)(v10 + 72) << 32) | (2
                                                                                                * ((*(void *)(v10 + 72) & 0xFF000000000000) == 0)))
               + (((unint64_t)*(unsigned int *)(v10 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v10 + 88) >> 1) & 1))
    {
      *(unsigned char *)a1[1] = 0;
      break;
    }
  }
  double v11 = a1[3];
  *(_DWORD *)a1[2] = *a2;
  _DWORD *v11 = *((_DWORD *)*a1[4] + *a2);
  double v12 = (int **)sub_100231C((uint64_t)a2);
  double v13 = v12;
  if (*((unsigned char *)v12 + 38)) {
    double v14 = v12 + 3;
  }
  else {
    double v14 = v12 + 2;
  }
  unint64_t v15 = *v14;
  if (*v14)
  {
    unint64_t v16 = a1[6];
    uint64_t v17 = (unsigned __int16 *)((char *)v15 - *v15);
    unsigned int v18 = *v17;
    if (v18 >= 0xB && v17[5])
    {
      unsigned int v19 = *(unsigned __int16 *)((char *)v15 + v17[5]);
      unsigned int v20 = *((unsigned __int16 *)v16 + 1940);
      if (!v20) {
        goto LABEL_18;
      }
    }
    else
    {
      unsigned int v19 = 0xFFFF;
      unsigned int v20 = *((unsigned __int16 *)v16 + 1940);
      if (!v20) {
        goto LABEL_18;
      }
    }
    if (v18 >= 0x11)
    {
      uint64_t v21 = v17[8];
      if (v21)
      {
        uint64_t v22 = (unsigned int *)((char *)v15 + v21 + *(unsigned int *)((char *)v15 + v21));
        if (*v22 >= v20)
        {
          unsigned int v23 = *((unsigned __int16 *)v22 + v20 + 1);
          if ((unsigned __int16)(v23 + 1) > 1u)
          {
            double v24 = (double)v23;
            goto LABEL_20;
          }
        }
      }
    }
LABEL_18:
    if (v19 == 0xFFFF)
    {
      double v25 = 0.3;
      unint64_t v26 = *v12;
      uint64_t v27 = (unsigned __int16 *)((char *)*v12 - **v12);
      if (*v27 >= 9u) {
        goto LABEL_25;
      }
      goto LABEL_27;
    }
    double v24 = (double)v19;
LABEL_20:
    double v25 = v24 / 1000.0;
    unint64_t v26 = *v12;
    uint64_t v27 = (unsigned __int16 *)((char *)*v12 - **v12);
    if (*v27 >= 9u) {
      goto LABEL_25;
    }
LABEL_27:
    uint64_t v29 = 0;
    goto LABEL_28;
  }
  double v25 = 0.0;
  unint64_t v26 = *v12;
  uint64_t v27 = (unsigned __int16 *)((char *)*v12 - **v12);
  if (*v27 < 9u) {
    goto LABEL_27;
  }
LABEL_25:
  uint64_t v28 = v27[4];
  if (!v28) {
    goto LABEL_27;
  }
  uint64_t v29 = *(unsigned int *)((char *)v26 + v28);
LABEL_28:
  double v30 = (double)a3 / 1000000000.0;
  *(double *)a1[5] = *(double *)a1[5] + v30 * (v25 * (double)v29);
  *(_DWORD *)a1[7] |= sub_EB0B40(v12);
  unint64_t v32 = (char *)*v13;
  uint64_t v33 = **v13;
  uint64_t v34 = -v33;
  uint64_t v35 = (unsigned __int16 *)((char *)*v13 - v33);
  if (*v35 >= 0x2Fu)
  {
    uint64_t v36 = v35[23];
    if (v35[23])
    {
      BOOL v40 = !v32[v36]
         && (unsigned int v37 = v13[5], v38 = (unsigned __int16 *)((char *)v37 - *v37), *v38 >= 0x2Fu)
         && (uint64_t v39 = v38[23]) != 0
         && *((unsigned char *)v37 + v39) == 0;
      *(unsigned char *)a1[8] &= v40;
      unsigned int v43 = v32[v36];
      BOOL v44 = v43 > 0x1A;
      int v45 = (1 << v43) & 0x4810001;
      if (!v44 && v45 != 0)
      {
        BOOL v47 = v13[5];
        double v48 = (unsigned __int16 *)((char *)v47 - *v47);
        if (*v48 >= 0x2Fu)
        {
          uint64_t v49 = v48[23];
          if (v49)
          {
            switch(*((unsigned char *)v47 + v49))
            {
              case 0:
              case 0x10:
              case 0x17:
              case 0x1A:
                *(unsigned char *)a1[9] &= 1u;
                if (v32[v36]) {
                  goto LABEL_45;
                }
                goto LABEL_58;
              default:
                break;
            }
          }
        }
      }
      *(unsigned char *)a1[9] = 0;
      if (v32[v36])
      {
LABEL_45:
        int v42 = &v32[v34];
        if (*(unsigned __int16 *)v42 < 0x2Fu) {
          goto LABEL_69;
        }
        goto LABEL_46;
      }
LABEL_58:
      if (v35[4])
      {
        LODWORD(v31) = *(_DWORD *)&v32[v35[4]];
        double v31 = v30 * (double)*(unint64_t *)&v31;
        if (v31 < 0.0)
        {
LABEL_60:
          if (v31 <= -4.50359963e15) {
            goto LABEL_74;
          }
          uint64_t v56 = (uint64_t)(v31 + v31);
          if (v56 >= 1) {
            --v56;
          }
          goto LABEL_73;
        }
      }
      else
      {
        double v31 = v30 * 0.0;
        if (v30 * 0.0 < 0.0) {
          goto LABEL_60;
        }
      }
      if (v31 >= 4.50359963e15) {
        goto LABEL_74;
      }
      uint64_t v56 = (uint64_t)(v31 + v31) + 1;
LABEL_73:
      double v31 = (double)(v56 >> 1);
LABEL_74:
      *a1[10] = (char *)*a1[10] + (uint64_t)v31;
      unint64_t v32 = (char *)*v13;
      int v42 = (char *)*v13 - **v13;
      if (*(unsigned __int16 *)v42 < 0x2Fu) {
        goto LABEL_69;
      }
      goto LABEL_46;
    }
  }
  int v41 = a1[9];
  *(unsigned char *)a1[8] = 0;
  *(unsigned char *)int v41 = 0;
  int v42 = &v32[v34];
  if (*(unsigned __int16 *)v42 < 0x2Fu) {
    goto LABEL_69;
  }
LABEL_46:
  if (*((_WORD *)v42 + 23))
  {
    unsigned int v50 = v32[*((unsigned __int16 *)v42 + 23)];
    BOOL v44 = v50 > 0x1A;
    int v51 = (1 << v50) & 0x4810000;
    if (!v44 && v51 != 0)
    {
      uint64_t v53 = *((unsigned __int16 *)v42 + 4);
      if (v53)
      {
        LODWORD(v31) = *(_DWORD *)&v32[v53];
        double v54 = v30 * (double)*(unint64_t *)&v31;
        if (v54 < 0.0) {
          goto LABEL_53;
        }
      }
      else
      {
        double v54 = v30 * 0.0;
        if (v30 * 0.0 < 0.0)
        {
LABEL_53:
          if (v54 > -4.50359963e15)
          {
            uint64_t v55 = (uint64_t)(v54 + v54);
            if (v55 >= 1) {
              --v55;
            }
            goto LABEL_67;
          }
          goto LABEL_68;
        }
      }
      if (v54 < 4.50359963e15)
      {
        uint64_t v55 = (uint64_t)(v54 + v54) + 1;
LABEL_67:
        double v54 = (double)(v55 >> 1);
      }
LABEL_68:
      *a1[11] = (char *)*a1[11] + (uint64_t)v54;
    }
  }
LABEL_69:
  unint64_t v57 = *a1;
  unint64_t v59 = v13;
  return sub_29603C(v57, &v59);
}

uint64_t sub_10277C8(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, _OWORD *a7, uint64_t *a8, double a9, _DWORD *a10, char a11, char a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a5;
  *(void *)(a1 + 32) = *(void *)(a5 + 16);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_WORD *)(a1 + 84) = -1;
  *(unsigned char *)(a1 + 86) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v21 = *(const void **)a6;
  uint64_t v20 = *(void *)(a6 + 8);
  int64_t v22 = v20 - *(void *)a6;
  if (v20 != *(void *)a6)
  {
    if (v22 < 0) {
      sub_2E00();
    }
    unsigned int v23 = (char *)operator new(v20 - *(void *)a6);
    *(void *)(a1 + 96) = v23;
    *(void *)(a1 + 104) = v23;
    double v24 = &v23[2 * (v22 >> 1)];
    *(void *)(a1 + 112) = v24;
    memcpy(v23, v21, v22);
    *(void *)(a1 + 104) = v24;
  }
  *(_OWORD *)(a1 + 120) = *a7;
  uint64_t v25 = *a8;
  *(_WORD *)(a1 + 144) = *((_WORD *)a8 + 4);
  *(void *)(a1 + 136) = v25;
  *(_DWORD *)(a1 + 148) = *a10;
  *(unsigned char *)(a1 + 152) = a11;
  *(unsigned char *)(a1 + 153) = a12;
  *(_DWORD *)(a1 + 156) = a14;
  *(double *)(a1 + 160) = a9;
  *(void *)(a1 + 168) = a15;
  *(void *)(a1 + 176) = a16;
  return a1;
}

void sub_10278F8(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 104) = v5;
    operator delete(v5);
    uint64_t v6 = *v3;
    if (!*v3) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v6 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 24) = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

void *sub_1027934(void *a1, unsigned int a2)
{
  uint64_t v4 = a2;
  v13[0] = a2;
  v13[1] = (unint64_t)&v12;
  v13[2] = (unint64_t)&v11;
  v13[3] = (unint64_t)&v10;
  uint64_t v5 = sub_ED2164(a1, v13);
  *((_DWORD *)v5 + 218) = 0;
  *(_OWORD *)(v5 + 105) = 0u;
  *(_OWORD *)(v5 + 107) = 0u;
  *(_OWORD *)(v5 + 103) = 0u;
  *((_OWORD *)v5 + 48) = 0u;
  *((_OWORD *)v5 + 49) = 0u;
  *((_OWORD *)v5 + 50) = 0u;
  *((_DWORD *)v5 + 204) = 0;
  if (a2)
  {
    uint64_t v6 = (char *)operator new(4 * v4);
    a1[106] = v6;
    a1[107] = v6;
    a1[108] = &v6[4 * v4];
  }
  uint64_t v7 = (char *)operator new(0x3F8uLL);
  a1[103] = v7;
  a1[104] = v7;
  a1[105] = v7 + 1016;
  if (a2)
  {
    uint64_t v8 = (char *)operator new(8 * v4);
    a1[96] = v8;
    a1[97] = v8;
    a1[98] = &v8[8 * v4];
  }
  return a1;
}

void sub_1027A10(_Unwind_Exception *a1)
{
  sub_3310C(v2);
  uint64_t v4 = (void **)(v1 + 96);
  uint64_t v5 = (void *)v1[99];
  if (v5)
  {
    v1[100] = v5;
    operator delete(v5);
    uint64_t v6 = *v4;
    if (!*v4)
    {
LABEL_3:
      sub_328138((uint64_t)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v6 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[97] = v6;
  operator delete(v6);
  sub_328138((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1027A98(uint64_t *a1, int *a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  unint64_t v7 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x186186186186186) {
    sub_2E00();
  }
  if (0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3) > v8) {
    unint64_t v8 = 0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[2] - *a1) >> 3) >= 0xC30C30C30C30C3) {
    unint64_t v14 = 0x186186186186186;
  }
  else {
    unint64_t v14 = v8;
  }
  if (v14)
  {
    if (v14 > 0x186186186186186) {
      sub_188D718();
    }
    unint64_t v15 = (char *)operator new(168 * v14);
  }
  else
  {
    unint64_t v15 = 0;
  }
  uint64_t v16 = (uint64_t)&v15[168 * v7];
  sub_10247B8(v16, *a2, a3, a4, a5, a6);
  uint64_t v17 = v16 + 168;
  unsigned int v19 = (char *)*a1;
  unsigned int v18 = (char *)a1[1];
  if (v18 != (char *)*a1)
  {
    do
    {
      long long v20 = *(_OWORD *)(v18 - 168);
      long long v21 = *(_OWORD *)(v18 - 152);
      *(_OWORD *)(v16 - 136) = *(_OWORD *)(v18 - 136);
      *(_OWORD *)(v16 - 152) = v21;
      *(_OWORD *)(v16 - 168) = v20;
      long long v22 = *(_OWORD *)(v18 - 120);
      long long v23 = *(_OWORD *)(v18 - 104);
      long long v24 = *(_OWORD *)(v18 - 88);
      *(_OWORD *)(v16 - 72) = *(_OWORD *)(v18 - 72);
      *(_OWORD *)(v16 - 88) = v24;
      *(_OWORD *)(v16 - 104) = v23;
      *(_OWORD *)(v16 - 120) = v22;
      long long v25 = *(_OWORD *)(v18 - 56);
      long long v26 = *(_OWORD *)(v18 - 40);
      long long v27 = *(_OWORD *)(v18 - 24);
      *(void *)(v16 - 8) = *((void *)v18 - 1);
      *(_OWORD *)(v16 - 24) = v27;
      *(_OWORD *)(v16 - 40) = v26;
      *(_OWORD *)(v16 - 56) = v25;
      v16 -= 168;
      v18 -= 168;
    }
    while (v18 != v19);
    unsigned int v18 = (char *)*a1;
  }
  *a1 = v16;
  a1[1] = v17;
  a1[2] = (uint64_t)&v15[168 * v14];
  if (v18) {
    operator delete(v18);
  }
  return v17;
}

void sub_1027C48(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1027C60(uint64_t *a1, int *a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  unint64_t v7 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x186186186186186) {
    sub_2E00();
  }
  if (0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3) > v8) {
    unint64_t v8 = 0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[2] - *a1) >> 3) >= 0xC30C30C30C30C3) {
    unint64_t v14 = 0x186186186186186;
  }
  else {
    unint64_t v14 = v8;
  }
  if (v14)
  {
    if (v14 > 0x186186186186186) {
      sub_188D718();
    }
    unint64_t v15 = (char *)operator new(168 * v14);
  }
  else
  {
    unint64_t v15 = 0;
  }
  uint64_t v16 = (uint64_t)&v15[168 * v7];
  sub_10247B8(v16, *a2, a3, a4, a5, a6);
  uint64_t v17 = v16 + 168;
  unsigned int v19 = (char *)*a1;
  unsigned int v18 = (char *)a1[1];
  if (v18 != (char *)*a1)
  {
    do
    {
      long long v20 = *(_OWORD *)(v18 - 168);
      long long v21 = *(_OWORD *)(v18 - 152);
      *(_OWORD *)(v16 - 136) = *(_OWORD *)(v18 - 136);
      *(_OWORD *)(v16 - 152) = v21;
      *(_OWORD *)(v16 - 168) = v20;
      long long v22 = *(_OWORD *)(v18 - 120);
      long long v23 = *(_OWORD *)(v18 - 104);
      long long v24 = *(_OWORD *)(v18 - 88);
      *(_OWORD *)(v16 - 72) = *(_OWORD *)(v18 - 72);
      *(_OWORD *)(v16 - 88) = v24;
      *(_OWORD *)(v16 - 104) = v23;
      *(_OWORD *)(v16 - 120) = v22;
      long long v25 = *(_OWORD *)(v18 - 56);
      long long v26 = *(_OWORD *)(v18 - 40);
      long long v27 = *(_OWORD *)(v18 - 24);
      *(void *)(v16 - 8) = *((void *)v18 - 1);
      *(_OWORD *)(v16 - 24) = v27;
      *(_OWORD *)(v16 - 40) = v26;
      *(_OWORD *)(v16 - 56) = v25;
      v16 -= 168;
      v18 -= 168;
    }
    while (v18 != v19);
    unsigned int v18 = (char *)*a1;
  }
  *a1 = v16;
  a1[1] = v17;
  a1[2] = (uint64_t)&v15[168 * v14];
  if (v18) {
    operator delete(v18);
  }
  return v17;
}

void sub_1027E10(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1027E28(uint64_t *a1, int *a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  unint64_t v7 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x186186186186186) {
    sub_2E00();
  }
  if (0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3) > v8) {
    unint64_t v8 = 0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[2] - *a1) >> 3) >= 0xC30C30C30C30C3) {
    unint64_t v14 = 0x186186186186186;
  }
  else {
    unint64_t v14 = v8;
  }
  if (v14)
  {
    if (v14 > 0x186186186186186) {
      sub_188D718();
    }
    unint64_t v15 = (char *)operator new(168 * v14);
  }
  else
  {
    unint64_t v15 = 0;
  }
  uint64_t v16 = (uint64_t)&v15[168 * v7];
  sub_10247B8(v16, *a2, a3, a4, a5, a6);
  uint64_t v17 = v16 + 168;
  unsigned int v19 = (char *)*a1;
  unsigned int v18 = (char *)a1[1];
  if (v18 != (char *)*a1)
  {
    do
    {
      long long v20 = *(_OWORD *)(v18 - 168);
      long long v21 = *(_OWORD *)(v18 - 152);
      *(_OWORD *)(v16 - 136) = *(_OWORD *)(v18 - 136);
      *(_OWORD *)(v16 - 152) = v21;
      *(_OWORD *)(v16 - 168) = v20;
      long long v22 = *(_OWORD *)(v18 - 120);
      long long v23 = *(_OWORD *)(v18 - 104);
      long long v24 = *(_OWORD *)(v18 - 88);
      *(_OWORD *)(v16 - 72) = *(_OWORD *)(v18 - 72);
      *(_OWORD *)(v16 - 88) = v24;
      *(_OWORD *)(v16 - 104) = v23;
      *(_OWORD *)(v16 - 120) = v22;
      long long v25 = *(_OWORD *)(v18 - 56);
      long long v26 = *(_OWORD *)(v18 - 40);
      long long v27 = *(_OWORD *)(v18 - 24);
      *(void *)(v16 - 8) = *((void *)v18 - 1);
      *(_OWORD *)(v16 - 24) = v27;
      *(_OWORD *)(v16 - 40) = v26;
      *(_OWORD *)(v16 - 56) = v25;
      v16 -= 168;
      v18 -= 168;
    }
    while (v18 != v19);
    unsigned int v18 = (char *)*a1;
  }
  *a1 = v16;
  a1[1] = v17;
  a1[2] = (uint64_t)&v15[168 * v14];
  if (v18) {
    operator delete(v18);
  }
  return v17;
}

void sub_1027FD8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1027FF0(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0xD37A6F4DE9BD37A7 * ((a1[2] - *a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x1642C8590B21643) {
    sub_2E00();
  }
  uint64_t v4 = a1[1];
  uint64_t v5 = 184 * a2;
  uint64_t v6 = (char *)operator new(184 * a2);
  unint64_t v7 = &v6[v5];
  unint64_t v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_15;
  }
  unint64_t v9 = &v6[v4 - v2];
  do
  {
    uint64_t v10 = *((void *)v4 - 23);
    v4 -= 184;
    int v11 = *((_DWORD *)v4 + 2);
    *((void *)v9 - 23) = v10;
    v9 -= 184;
    *((_DWORD *)v9 + 2) = v11;
    *((_OWORD *)v9 + 1) = *((_OWORD *)v4 + 1);
    *((void *)v9 + 4) = *((void *)v4 + 4);
    *((void *)v4 + 2) = 0;
    *((void *)v4 + 3) = 0;
    *((void *)v4 + 4) = 0;
    long long v12 = *(_OWORD *)(v4 + 40);
    long long v13 = *(_OWORD *)(v4 + 56);
    long long v14 = *(_OWORD *)(v4 + 72);
    *((void *)v9 + 11) = *((void *)v4 + 11);
    *(_OWORD *)(v9 + 72) = v14;
    *(_OWORD *)(v9 + 56) = v13;
    *(_OWORD *)(v9 + 40) = v12;
    *((_OWORD *)v9 + 6) = *((_OWORD *)v4 + 6);
    *((void *)v9 + 14) = *((void *)v4 + 14);
    *((void *)v4 + 12) = 0;
    *((void *)v4 + 13) = 0;
    *((void *)v4 + 14) = 0;
    long long v15 = *(_OWORD *)(v4 + 120);
    long long v16 = *(_OWORD *)(v4 + 136);
    long long v17 = *(_OWORD *)(v4 + 152);
    *(_OWORD *)(v9 + 168) = *(_OWORD *)(v4 + 168);
    *(_OWORD *)(v9 + 152) = v17;
    *(_OWORD *)(v9 + 136) = v16;
    *(_OWORD *)(v9 + 120) = v15;
  }
  while (v4 != v2);
  unsigned int v18 = *a1;
  uint64_t v2 = a1[1];
  *a1 = v9;
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v18)
  {
    do
    {
      unsigned int v19 = (void *)*((void *)v2 - 11);
      if (v19)
      {
        *((void *)v2 - 10) = v19;
        operator delete(v19);
      }
      long long v20 = (void *)*((void *)v2 - 21);
      if (v20)
      {
        *((void *)v2 - 20) = v20;
        operator delete(v20);
      }
      v2 -= 184;
    }
    while (v2 != v18);
    uint64_t v2 = v18;
  }
  if (v2)
  {
LABEL_15:
    operator delete(v2);
  }
}

uint64_t sub_1028194(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 184;
    uint64_t v4 = *(void **)(i - 88);
    if (v4)
    {
      *(void *)(i - 80) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(void **)(i - 168);
    if (v5)
    {
      *(void *)(i - 160) = v5;
      operator delete(v5);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_102820C(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1642C8590B21642) {
    sub_2E00();
  }
  if (0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3);
  }
  if (0xD37A6F4DE9BD37A7 * ((a1[2] - *a1) >> 3) >= 0xB21642C8590B21) {
    unint64_t v6 = 0x1642C8590B21642;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1642C8590B21642) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(184 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v24 = (uint64_t)&v7[184 * v3];
  long long v25 = &v7[184 * v6];
  sub_102843C(v24, a2);
  uint64_t v8 = v24;
  uint64_t v9 = v24 + 184;
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  if (v11 == *a1)
  {
    *a1 = v24;
    a1[1] = v9;
    a1[2] = (uint64_t)v25;
  }
  else
  {
    do
    {
      uint64_t v12 = *(void *)(v11 - 184);
      v11 -= 184;
      int v13 = *(_DWORD *)(v11 + 8);
      *(void *)(v8 - 184) = v12;
      v8 -= 184;
      *(_DWORD *)(v8 + 8) = v13;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0;
      *(void *)(v8 + 16) = 0;
      *(_OWORD *)(v8 + 16) = *(_OWORD *)(v11 + 16);
      *(void *)(v8 + 32) = *(void *)(v11 + 32);
      *(void *)(v11 + 16) = 0;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0;
      long long v14 = *(_OWORD *)(v11 + 40);
      long long v15 = *(_OWORD *)(v11 + 56);
      uint64_t v16 = *(void *)(v11 + 88);
      *(_OWORD *)(v8 + 72) = *(_OWORD *)(v11 + 72);
      *(_OWORD *)(v8 + 56) = v15;
      *(_OWORD *)(v8 + 40) = v14;
      *(void *)(v8 + 88) = v16;
      *(void *)(v8 + 96) = 0;
      *(void *)(v8 + 104) = 0;
      *(void *)(v8 + 112) = 0;
      *(_OWORD *)(v8 + 96) = *(_OWORD *)(v11 + 96);
      *(void *)(v8 + 112) = *(void *)(v11 + 112);
      *(void *)(v11 + 96) = 0;
      *(void *)(v11 + 104) = 0;
      *(void *)(v11 + 112) = 0;
      long long v17 = *(_OWORD *)(v11 + 120);
      long long v18 = *(_OWORD *)(v11 + 136);
      long long v19 = *(_OWORD *)(v11 + 152);
      *(_OWORD *)(v8 + 168) = *(_OWORD *)(v11 + 168);
      *(_OWORD *)(v8 + 152) = v19;
      *(_OWORD *)(v8 + 136) = v18;
      *(_OWORD *)(v8 + 120) = v17;
    }
    while (v11 != v10);
    uint64_t v20 = *a1;
    uint64_t v11 = a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v25;
    if (v11 != v20)
    {
      do
      {
        long long v21 = *(void **)(v11 - 88);
        if (v21)
        {
          *(void *)(v11 - 80) = v21;
          operator delete(v21);
        }
        long long v22 = *(void **)(v11 - 168);
        if (v22)
        {
          *(void *)(v11 - 160) = v22;
          operator delete(v22);
        }
        v11 -= 184;
      }
      while (v11 != v20);
      uint64_t v11 = v20;
    }
  }
  if (v11) {
    operator delete((void *)v11);
  }
  return v24 + 184;
}

void sub_1028428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1028194((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_102843C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  unint64_t v6 = (unsigned char *)a2[2];
  uint64_t v5 = (unsigned char *)a2[3];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 32) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 24) = v9;
  }
  long long v10 = *(_OWORD *)(a2 + 5);
  long long v11 = *(_OWORD *)(a2 + 7);
  long long v12 = *(_OWORD *)(a2 + 9);
  uint64_t v13 = a2[11];
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 88) = v13;
  *(_OWORD *)(a1 + 72) = v12;
  *(_OWORD *)(a1 + 56) = v11;
  *(_OWORD *)(a1 + 40) = v10;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  long long v15 = (unsigned char *)a2[12];
  long long v14 = (unsigned char *)a2[13];
  int64_t v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0) {
      sub_2E00();
    }
    long long v17 = (char *)operator new(v14 - v15);
    *(void *)(a1 + 96) = v17;
    *(void *)(a1 + 104) = v17;
    long long v18 = &v17[2 * (v16 >> 1)];
    *(void *)(a1 + 112) = v18;
    memcpy(v17, v15, v16);
    *(void *)(a1 + 104) = v18;
  }
  long long v19 = *(_OWORD *)(a2 + 15);
  long long v20 = *(_OWORD *)(a2 + 17);
  long long v21 = *(_OWORD *)(a2 + 19);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
  *(_OWORD *)(a1 + 152) = v21;
  *(_OWORD *)(a1 + 136) = v20;
  *(_OWORD *)(a1 + 120) = v19;
  return a1;
}

void sub_1028564(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 104) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_1028598(uint64_t a1, unsigned int *a2, int *a3)
{
  uint64_t v6 = 0;
  ++*(_DWORD *)(a1 + 816);
  uint64_t v7 = *a2;
  unint64_t v8 = 265 * ((~v7 + (v7 << 21)) ^ ((unint64_t)(~v7 + (v7 << 21)) >> 24));
  unint64_t v9 = 2147483649u * ((21 * (v8 ^ (v8 >> 14))) ^ ((21 * (v8 ^ (v8 >> 14))) >> 28));
  long long v10 = (void *)(a1 + 48 * (((BYTE1(v9) ^ BYTE2(v9)) ^ BYTE3(v9)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  uint64_t v13 = 0x101010101010101 * (v9 & 0x7F);
  while (1)
  {
    unint64_t v14 = v11 & v12;
    uint64_t v15 = *(void *)(*v10 + v14);
    unint64_t v16 = ((v15 ^ v13) - 0x101010101010101) & ~(v15 ^ v13) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_6:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v6 += 8;
    unint64_t v11 = v6 + v14;
  }
  uint64_t v17 = v10[1];
  while (1)
  {
    unint64_t v18 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v12;
    if (*(_DWORD *)(v17 + 8 * v18) == v7) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_6;
    }
  }
  if (v12 == v18)
  {
LABEL_9:
    unint64_t v19 = *(void *)(a1 + 776) - *(void *)(a1 + 768);
    sub_ED2D48(a1, a2, (uint64_t)&v29);
    uint64_t v20 = v30;
    uint64_t v21 = *(void *)(v29 + 8);
    if (v31) {
      *(_DWORD *)(v21 + 8 * v30) = *a2;
    }
    *(_DWORD *)(v21 + 8 * v20 + 4) = v19 >> 3;
    sub_3EC418(a1 + 768, a2, a3);
    long long v22 = (uint64_t *)(a1 + 824);
    unint64_t v23 = (v19 >> 3);
    uint64_t v24 = *(void *)(a1 + 848);
    if (v23 >= (*(void *)(a1 + 856) - v24) >> 2 || *(_DWORD *)(v24 + 4 * v23) == -1) {
      sub_ED33A0((uint64_t)v22, v19 >> 3, (unsigned int *)a3);
    }
    else {
      sub_ED3660(v22, v19 >> 3, a3);
    }
    return;
  }
  uint64_t v25 = v17 + 8 * v18;
  *(_DWORD *)(*(void *)(a1 + 768) + 8 * *(unsigned int *)(v25 + 4) + 4) = *a3;
  long long v26 = (uint64_t *)(a1 + 824);
  unint64_t v27 = *(unsigned int *)(v25 + 4);
  uint64_t v28 = *(void *)(a1 + 848);
  if (v27 >= (*(void *)(a1 + 856) - v28) >> 2 || *(_DWORD *)(v28 + 4 * v27) == -1)
  {
    sub_ED33A0((uint64_t)v26, v27, (unsigned int *)a3);
  }
  else
  {
    sub_ED3660(v26, v27, a3);
  }
}

uint64_t sub_1028808(uint64_t a1, unsigned int *a2, int *a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = *a2;
  unint64_t v8 = 265 * ((~v7 + (v7 << 21)) ^ ((unint64_t)(~v7 + (v7 << 21)) >> 24));
  unint64_t v9 = 2147483649u * ((21 * (v8 ^ (v8 >> 14))) ^ ((21 * (v8 ^ (v8 >> 14))) >> 28));
  long long v10 = (void *)(a1 + 48 * (((BYTE1(v9) ^ BYTE2(v9)) ^ BYTE3(v9)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  uint64_t v13 = 0x101010101010101 * (v9 & 0x7F);
  while (1)
  {
    unint64_t v14 = v11 & v12;
    uint64_t v15 = *(void *)(*v10 + v14);
    unint64_t v16 = ((v15 ^ v13) - 0x101010101010101) & ~(v15 ^ v13) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_6:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v6 += 8;
    unint64_t v11 = v6 + v14;
  }
  uint64_t v17 = v10[1];
  while (1)
  {
    unint64_t v18 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v12;
    if (*(_DWORD *)(v17 + 8 * v18) == v7) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_6;
    }
  }
  if (v12 == v18)
  {
LABEL_9:
    ++*(_DWORD *)(a1 + 816);
    unint64_t v19 = *(void *)(a1 + 776) - *(void *)(a1 + 768);
    sub_ED2D48(a1, a2, (uint64_t)&v34);
    uint64_t v20 = v35;
    uint64_t v21 = *(void *)(v34 + 8);
    if (v36) {
      *(_DWORD *)(v21 + 8 * v35) = *a2;
    }
    *(_DWORD *)(v21 + 8 * v20 + 4) = v19 >> 3;
    sub_3EC418(a1 + 768, a2, a3);
    long long v22 = (uint64_t *)(a1 + 824);
    unint64_t v23 = (v19 >> 3);
    uint64_t v24 = *(void *)(a1 + 848);
    if (v23 < (*(void *)(a1 + 856) - v24) >> 2 && *(_DWORD *)(v24 + 4 * v23) != -1)
    {
      unint64_t v25 = v19 >> 3;
LABEL_14:
      sub_ED3660(v22, v25, a3);
      return 1;
    }
    unint64_t v25 = v19 >> 3;
LABEL_16:
    sub_ED33A0((uint64_t)v22, v25, (unsigned int *)a3);
    return 1;
  }
  uint64_t v27 = v17 + 8 * v18;
  unsigned int v29 = *(_DWORD *)(v27 + 4);
  uint64_t v28 = (unsigned int *)(v27 + 4);
  uint64_t v30 = *(void *)(a1 + 768) + 8 * v29;
  int v32 = *(_DWORD *)(v30 + 4);
  char v31 = (int *)(v30 + 4);
  if (*a3 < v32)
  {
    ++*(_DWORD *)(a1 + 816);
    int *v31 = *a3;
    long long v22 = (uint64_t *)(a1 + 824);
    unint64_t v25 = *v28;
    uint64_t v33 = *(void *)(a1 + 848);
    if (v25 < (*(void *)(a1 + 856) - v33) >> 2 && *(_DWORD *)(v33 + 4 * v25) != -1) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  return 0;
}

void sub_1028A50()
{
  unk_25FD57F = 16641;
  word_25FD568 = 65;
  byte_25FD597 = 1;
  byte_25FD581 = 0;
}

double sub_1028A78(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = -1;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  return result;
}

uint64_t sub_1028A94@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  *(_DWORD *)(a1 + 8) = 0;
  unint64_t v95 = (unint64_t)(((a2[7] - a2[6]) << 30) - 0x100000000) >> 32;
  if (v95)
  {
    uint64_t v32 = 0;
    uint64_t v97 = (void **)(a1 + 16);
    uint64_t v96 = (uint64_t *)(a1 + 40);
    while (1)
    {
      uint64_t v101 = v32;
      BOOL v99 = sub_EB9330((uint64_t)a2, v32) && *(unsigned char *)sub_EB935C((uint64_t)a2, v101) == 3;
      if (sub_EB9330((uint64_t)a2, v101))
      {
        uint64_t v33 = sub_EB935C((uint64_t)a2, v101);
        long long v34 = *(_OWORD *)(v33 + 96);
        long long v126 = *(_OWORD *)(v33 + 112);
        long long v35 = *(_OWORD *)(v33 + 144);
        long long v127 = *(_OWORD *)(v33 + 128);
        long long v128 = v35;
        uint64_t v129 = *(void *)(v33 + 160);
        long long v125 = v34;
      }
      else
      {
        LODWORD(v125) = 0;
        *((void *)&v125 + 1) = 0;
        *(void *)&long long v126 = 0;
        BYTE8(v126) = 0;
        *(void *)&long long v127 = 0x3FF0000000000000;
        BYTE8(v127) = 1;
        long long v128 = 0uLL;
        LOBYTE(v129) = 0;
        *(_DWORD *)((char *)&v129 + 2) = 36000;
        BYTE6(v129) = 0;
      }
      sub_EC079C((uint64_t)a2, v101);
      uint64_t v36 = a2[9];
      unsigned int v37 = *(_DWORD *)(a2[6] + 4 * v101);
      sub_EC079C((uint64_t)a2, v101);
      uint64_t v38 = (unsigned int *)(v36 + 80 * v37);
      uint64_t v39 = a2[9];
      uint64_t v40 = a2[6];
      int v41 = (unsigned int *)(v39 + 80 * *(unsigned int *)(v40 + 4 * (v101 + 1)));
      if (v38 != v41) {
        break;
      }
LABEL_38:
      uint64_t v32 = v101 + 1;
      if (v101 + 1 == v95) {
        goto LABEL_2;
      }
    }
    uint64_t v100 = (unsigned int *)(v39 + 80 * *(unsigned int *)(v40 + 4 * (v101 + 1)));
    while (1)
    {
      unsigned int v42 = *v38;
      uint64_t v43 = sub_EE08A0();
      BOOL v44 = sub_EB9330((uint64_t)a2, v42) && *(unsigned char *)sub_EB935C((uint64_t)a2, v42) == 4;
      if (sub_EB9330((uint64_t)a2, v42))
      {
        uint64_t v45 = sub_EB935C((uint64_t)a2, v42);
        long long v46 = *(_OWORD *)(v45 + 16);
        long long v121 = *(_OWORD *)(v45 + 32);
        long long v47 = *(_OWORD *)(v45 + 64);
        long long v122 = *(_OWORD *)(v45 + 48);
        long long v123 = v47;
        uint64_t v124 = *(void *)(v45 + 80);
        long long v120 = v46;
      }
      else
      {
        LODWORD(v120) = 0;
        *((void *)&v120 + 1) = 0;
        *(void *)&long long v121 = 0;
        BYTE8(v121) = 0;
        *(void *)&long long v122 = 0x3FF0000000000000;
        BYTE8(v122) = 1;
        long long v123 = 0uLL;
        LOBYTE(v124) = 0;
        *(_DWORD *)((char *)&v124 + 2) = 36000;
        BYTE6(v124) = 0;
      }
      if (sub_EC97AC((uint64_t)(v38 + 2)) && sub_488C(v38 + 14)) {
        break;
      }
LABEL_47:
      v38 += 20;
      if (v38 == v41) {
        goto LABEL_38;
      }
    }
    if (v99 && v44)
    {
      int v48 = *v38;
      int v49 = *(_DWORD *)(a1 + 8);
      memset(&v130, 0, 96);
      uint64_t v135 = 0;
      long long v134 = 0u;
      long long v131 = 0u;
      v130.n128_u32[0] = -1;
      DWORD2(v131) = -1;
      int v132 = 0;
      unint64_t v133 = 0;
      *(void *)&long long v134 = 0;
      WORD4(v134) = 256;
      int v117 = 0;
      uint64_t v118 = 0;
      uint64_t v119 = 0;
      sub_1037A90((uint64_t)(v38 + 2), (int *)v38 + 14, v101, v48, v49, (uint64_t)&v130, (uint64_t)&v117, (uint64_t)&v103);
      if (v117)
      {
        uint64_t v118 = v117;
        operator delete(v117);
      }
      if (v132)
      {
        unint64_t v133 = v132;
        operator delete(v132);
      }
      LOBYTE(v107) = 1;
    }
    else
    {
      uint64_t v50 = *a4;
      int v51 = *v38;
      char v52 = sub_EB9330((uint64_t)a2, v101);
      unsigned __int8 v53 = sub_EB9330((uint64_t)a2, v42);
      sub_1036C30((uint64_t)v38, v50 + 2336 * v43, a3, v101, v51, v52, (uint64_t)&v125, (uint64_t)&v103, v53, (uint64_t)&v120, *(_DWORD *)(a1 + 8));
    }
    if (HIDWORD(v103) == -1 || v104 == -1)
    {
      sub_1029680(a1, a2, a3, v101, (uint64_t)v38, *a4 + 2336 * v43);
      int v41 = v100;
      unint64_t v57 = __p;
      if (!__p) {
        goto LABEL_69;
      }
      goto LABEL_68;
    }
    uint64_t v55 = *(char **)(a1 + 24);
    unint64_t v54 = *(void *)(a1 + 32);
    int v41 = v100;
    if ((unint64_t)v55 < v54)
    {
      *(_DWORD *)uint64_t v55 = v101;
      uint64_t v56 = (uint64_t)(v55 + 4);
      goto LABEL_90;
    }
    uint64_t v58 = (char *)*v97;
    uint64_t v59 = v55 - (unsigned char *)*v97;
    uint64_t v60 = v59 >> 2;
    unint64_t v61 = (v59 >> 2) + 1;
    if (v61 >> 62) {
      sub_2E00();
    }
    uint64_t v62 = v54 - (void)v58;
    if (v62 >> 1 > v61) {
      unint64_t v61 = v62 >> 1;
    }
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v63 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v63 = v61;
    }
    if (v63)
    {
      if (v63 >> 62) {
        sub_188D718();
      }
      unint64_t v64 = v63;
      unint64_t v65 = operator new(4 * v63);
      unint64_t v63 = v64;
      uint64_t v66 = &v65[4 * v60];
      *uint64_t v66 = v101;
      uint64_t v56 = (uint64_t)(v66 + 1);
      if (v55 == v58) {
        goto LABEL_88;
      }
    }
    else
    {
      unint64_t v65 = 0;
      uint64_t v66 = (_DWORD *)(4 * v60);
      *(_DWORD *)(4 * v60) = v101;
      uint64_t v56 = 4 * v60 + 4;
      if (v55 == v58)
      {
LABEL_88:
        *(void *)(a1 + 16) = v66;
        *(void *)(a1 + 24) = v56;
        *(void *)(a1 + 32) = &v65[4 * v63];
        if (v58) {
          operator delete(v58);
        }
LABEL_90:
        *(void *)(a1 + 24) = v56;
        unint64_t v76 = *(void *)(a1 + 48);
        if (v76 >= *(void *)(a1 + 56))
        {
          uint64_t v93 = sub_102BF28(v96, &v103);
        }
        else
        {
          uint64_t v77 = v103;
          *(_DWORD *)(v76 + 8) = v104;
          *(void *)(v76 + 16) = 0;
          *(void *)unint64_t v76 = v77;
          *(void *)(v76 + 24) = 0;
          *(void *)(v76 + 32) = 0;
          unint64_t v78 = v105;
          int64_t v79 = v106 - (unsigned char *)v105;
          if (v106 != v105)
          {
            if (v79 < 0) {
              sub_2E00();
            }
            uint64_t v80 = (char *)operator new(v106 - (unsigned char *)v105);
            *(void *)(v76 + 16) = v80;
            *(void *)(v76 + 24) = v80;
            uint64_t v81 = &v80[8 * (v79 >> 3)];
            *(void *)(v76 + 32) = v81;
            memcpy(v80, v78, v79);
            *(void *)(v76 + 24) = v81;
            int v41 = v100;
          }
          long long v82 = v107;
          long long v83 = v108;
          long long v84 = v109;
          uint64_t v85 = v110;
          *(void *)(v76 + 96) = 0;
          *(void *)(v76 + 88) = v85;
          *(_OWORD *)(v76 + 72) = v84;
          *(_OWORD *)(v76 + 56) = v83;
          *(_OWORD *)(v76 + 40) = v82;
          *(void *)(v76 + 104) = 0;
          *(void *)(v76 + 112) = 0;
          int v86 = __p;
          int64_t v87 = v112 - (unsigned char *)__p;
          if (v112 != __p)
          {
            if (v87 < 0) {
              sub_2E00();
            }
            unint64_t v88 = (char *)operator new(v112 - (unsigned char *)__p);
            *(void *)(v76 + 96) = v88;
            *(void *)(v76 + 104) = v88;
            uint64_t v89 = &v88[2 * (v87 >> 1)];
            *(void *)(v76 + 112) = v89;
            memcpy(v88, v86, v87);
            *(void *)(v76 + 104) = v89;
          }
          long long v90 = v113;
          long long v91 = v114;
          long long v92 = v115;
          *(_OWORD *)(v76 + 168) = v116;
          *(_OWORD *)(v76 + 152) = v92;
          *(_OWORD *)(v76 + 136) = v91;
          *(_OWORD *)(v76 + 120) = v90;
          uint64_t v93 = v76 + 184;
          *(void *)(a1 + 48) = v76 + 184;
        }
        *(void *)(a1 + 48) = v93;
        ++*(_DWORD *)(a1 + 8);
        unint64_t v57 = __p;
        if (!__p) {
          goto LABEL_69;
        }
LABEL_68:
        uint64_t v112 = v57;
        operator delete(v57);
LABEL_69:
        if (v105)
        {
          uint64_t v106 = v105;
          operator delete(v105);
        }
        goto LABEL_47;
      }
    }
    unint64_t v67 = v55 - 4 - v58;
    if (v67 < 0x2C) {
      goto LABEL_107;
    }
    if ((unint64_t)(v55 - &v65[v59]) < 0x20) {
      goto LABEL_107;
    }
    uint64_t v68 = (v67 >> 2) + 1;
    uint64_t v69 = 4 * (v68 & 0x7FFFFFFFFFFFFFF8);
    unsigned int v70 = &v55[-v69];
    uint64_t v66 = (_DWORD *)((char *)v66 - v69);
    uint64_t v71 = &v65[4 * v60 - 16];
    long long v72 = v55 - 16;
    uint64_t v73 = v68 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v74 = *(_OWORD *)v72;
      *(v71 - 1) = *((_OWORD *)v72 - 1);
      *uint64_t v71 = v74;
      v71 -= 2;
      v72 -= 32;
      v73 -= 8;
    }
    while (v73);
    uint64_t v55 = v70;
    if (v68 != (v68 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_107:
      do
      {
        int v75 = *((_DWORD *)v55 - 1);
        v55 -= 4;
        *--uint64_t v66 = v75;
      }
      while (v55 != v58);
    }
    goto LABEL_88;
  }
LABEL_2:
  sub_1002AD8((uint64_t)&v103, 0);
  sub_1026094((void *)a5, &v103, **(void **)a1);
  sub_1029D34((void *)a1, a2, (uint64_t)&v130);
  sub_102A004(a5 + 8, (uint64_t)&v130);
  sub_F2DA34((uint64_t)&v130);
  sub_EB9510((uint64_t)a2, &v120);
  uint64_t v8 = *((void *)&v120 + 1);
  uint64_t v7 = v120;
  *(void *)&long long v126 = 0;
  long long v125 = 0uLL;
  if ((void)v120 != *((void *)&v120 + 1))
  {
    unint64_t v9 = 0;
    uint64_t v10 = v120;
    do
    {
      sub_EB9370((uint64_t)a2, &v130);
      sub_1037B18(1022611261 * ((v7 - v130.n128_u64[0]) >> 3), v10, (uint64_t)&v130);
      unint64_t v9 = (char *)sub_102C158((char **)&v125, (uint64_t)v9, (uint64_t)&v130) + 168;
      v10 += 168;
      v7 += 168;
    }
    while (v10 != v8);
  }
  unint64_t v11 = *(void **)(a5 + 128);
  if (v11)
  {
    *(void *)(a5 + 136) = v11;
    operator delete(v11);
    *(void *)(a5 + 128) = 0;
    *(void *)(a5 + 136) = 0;
    *(void *)(a5 + 144) = 0;
  }
  *(_OWORD *)(a5 + 128) = v125;
  *(void *)(a5 + 144) = v126;
  sub_EB9534((uint64_t)a2, &v120);
  uint64_t v13 = *((void *)&v120 + 1);
  uint64_t v12 = v120;
  *(void *)&long long v126 = 0;
  long long v125 = 0uLL;
  if ((void)v120 != *((void *)&v120 + 1))
  {
    unint64_t v14 = 0;
    uint64_t v15 = v120;
    do
    {
      sub_EB9370((uint64_t)a2, &v130);
      sub_1037B18(1022611261 * ((v12 - v130.n128_u64[0]) >> 3), v15, (uint64_t)&v130);
      unint64_t v14 = (char *)sub_102C158((char **)&v125, (uint64_t)v14, (uint64_t)&v130) + 168;
      v15 += 168;
      v12 += 168;
    }
    while (v15 != v13);
  }
  unint64_t v16 = *(void **)(a5 + 152);
  if (v16)
  {
    *(void *)(a5 + 160) = v16;
    operator delete(v16);
    *(void *)(a5 + 152) = 0;
    *(void *)(a5 + 160) = 0;
    *(void *)(a5 + 168) = 0;
  }
  *(_OWORD *)(a5 + 152) = v125;
  *(void *)(a5 + 168) = v126;
  sub_EB9564((uint64_t)a2, &v120);
  uint64_t v18 = *((void *)&v120 + 1);
  uint64_t v17 = v120;
  *(void *)&long long v126 = 0;
  long long v125 = 0uLL;
  if ((void)v120 != *((void *)&v120 + 1))
  {
    unint64_t v19 = 0;
    uint64_t v20 = v120;
    do
    {
      sub_EB9370((uint64_t)a2, &v130);
      sub_1037B18(1022611261 * ((v17 - v130.n128_u64[0]) >> 3), v20, (uint64_t)&v130);
      unint64_t v19 = (char *)sub_102C158((char **)&v125, (uint64_t)v19, (uint64_t)&v130) + 168;
      v20 += 168;
      v17 += 168;
    }
    while (v20 != v18);
  }
  uint64_t v21 = *(void **)(a5 + 176);
  if (v21)
  {
    *(void *)(a5 + 184) = v21;
    operator delete(v21);
    *(void *)(a5 + 176) = 0;
    *(void *)(a5 + 184) = 0;
    *(void *)(a5 + 192) = 0;
  }
  *(_OWORD *)(a5 + 176) = v125;
  *(void *)(a5 + 192) = v126;
  v130.n128_u64[0] = (unint64_t)a2;
  sub_102C704(&v130.n128_u64[1], 0x400u);
  unint64_t v22 = sub_EB9528((uint64_t)a2);
  int v23 = v22;
  unint64_t v24 = HIDWORD(v22);
  if (v22 != HIDWORD(v22))
  {
    do
    {
      LODWORD(v120) = 0;
      LODWORD(v125) = v23;
      sub_1028598((uint64_t)&v130.n128_i64[1], (unsigned int *)&v125, (int *)&v120);
      ++v23;
    }
    while (v24 != v23);
  }
  sub_102A1D8((uint64_t)&v130);
  LODWORD(v125) = 0x7FFFFFFF;
  unint64_t v25 = sub_EB9550((uint64_t)a2);
  unsigned int v26 = v25;
  unint64_t v27 = HIDWORD(v25);
  int v28 = 0x7FFFFFFF;
  if (v25 != HIDWORD(v25))
  {
    do
    {
      int v29 = sub_102A2D0((uint64_t)&v130, v26);
      LODWORD(v120) = v29;
      if (v28 >= v29) {
        uint64_t v30 = (int *)&v120;
      }
      else {
        uint64_t v30 = (int *)&v125;
      }
      if (v29 == 0x7FFFFFFF) {
        uint64_t v30 = (int *)&v125;
      }
      if (v28 == 0x7FFFFFFF) {
        uint64_t v30 = (int *)&v120;
      }
      int v28 = *v30;
      LODWORD(v125) = *v30;
      ++v26;
    }
    while (v27 != v26);
  }
  *(_DWORD *)(a5 + 200) = v28;
  if (v142)
  {
    unint64_t v143 = v142;
    operator delete(v142);
  }
  if (v140)
  {
    int v141 = v140;
    operator delete(v140);
  }
  if (v138)
  {
    uint64_t v139 = v138;
    operator delete(v138);
  }
  if (v136)
  {
    uint64_t v137 = v136;
    operator delete(v136);
  }
  sub_328138((uint64_t)&v130.n128_i64[1]);
  return sub_F2CA5C((uint64_t)&v103);
}

void sub_102952C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_102965C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
}

void sub_1029670()
{
}

uint64_t sub_1029680(uint64_t a1, void *a2, void *a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = a4;
  if (sub_EB9330((uint64_t)a2, a4))
  {
    BOOL v13 = *(unsigned char *)sub_EB935C((uint64_t)a2, v12) == 4;
    uint64_t result = sub_EB9330((uint64_t)a2, v12);
    if (!result) {
      goto LABEL_3;
    }
  }
  else
  {
    BOOL v13 = 0;
    uint64_t result = sub_EB9330((uint64_t)a2, v12);
    if (!result)
    {
LABEL_3:
      if (v13) {
        return result;
      }
      goto LABEL_7;
    }
  }
  uint64_t result = sub_EB935C((uint64_t)a2, v12);
  if (v13 || *(unsigned char *)result == 5) {
    return result;
  }
LABEL_7:
  uint64_t v59 = a3;
  uint64_t v95 = sub_1005964(a6);
  sub_102C868(v96, 0x400u);
  unsigned int v15 = *(_DWORD *)a5;
  BOOL v16 = sub_EB9330((uint64_t)a2, *(_DWORD *)a5);
  BOOL v17 = v16;
  if (v16)
  {
    uint64_t v18 = sub_EB935C((uint64_t)a2, v15);
    long long v19 = *(_OWORD *)(v18 + 64);
    long long v92 = *(_OWORD *)(v18 + 48);
    long long v93 = v19;
    uint64_t v94 = *(void *)(v18 + 80);
    long long v20 = *(_OWORD *)(v18 + 32);
    long long v90 = *(_OWORD *)(v18 + 16);
    long long v91 = v20;
  }
  else
  {
    LODWORD(v90) = 0;
    *(void *)&long long v91 = 0;
    *((void *)&v90 + 1) = 0;
    BYTE8(v91) = 0;
    *(void *)&long long v92 = 0x3FF0000000000000;
    BYTE8(v92) = 1;
    long long v93 = 0uLL;
    LOBYTE(v94) = 0;
    *(_DWORD *)((char *)&v94 + 2) = 36000;
    BYTE6(v94) = 0;
  }
  int v54 = v15;
  char v21 = v17;
  unint64_t v22 = v59;
  sub_1013A50(a5, v21, (uint64_t)&v90, v59, a6, (uint64_t)v88);
  if (v89 != -1)
  {
    unsigned int v58 = v89;
    sub_EC079C((uint64_t)a2, v12);
    uint64_t v23 = a2[3];
    unsigned int v24 = *(_DWORD *)(*a2 + 4 * v12);
    sub_EC079C((uint64_t)a2, v12);
    uint64_t v25 = v23 + 80 * v24;
    uint64_t v26 = a2[3] + 80 * *(unsigned int *)(*a2 + 4 * (a4 + 1));
    unsigned int v27 = v58;
    if (v25 != v26)
    {
      char v52 = (_DWORD *)(a5 + 56);
      uint64_t v53 = a5 + 8;
      uint64_t v56 = a5;
      uint64_t v57 = a6;
      uint64_t v55 = a2[3] + 80 * *(unsigned int *)(*a2 + 4 * (a4 + 1));
      do
      {
        unsigned int v87 = *(_DWORD *)v25;
        BOOL v28 = sub_EB9330((uint64_t)a2, v87);
        char v29 = v28;
        if (v28)
        {
          uint64_t v30 = sub_EB935C((uint64_t)a2, v87);
          long long v31 = *(_OWORD *)(v30 + 144);
          long long v84 = *(_OWORD *)(v30 + 128);
          long long v85 = v31;
          uint64_t v86 = *(void *)(v30 + 160);
          long long v32 = *(_OWORD *)(v30 + 112);
          long long v82 = *(_OWORD *)(v30 + 96);
          long long v83 = v32;
        }
        else
        {
          LODWORD(v82) = 0;
          *((void *)&v82 + 1) = 0;
          *(void *)&long long v83 = 0;
          BYTE8(v83) = 0;
          *(void *)&long long v84 = 0x3FF0000000000000;
          BYTE8(v84) = 1;
          long long v85 = 0uLL;
          LOBYTE(v86) = 0;
          *(_DWORD *)((char *)&v86 + 2) = 36000;
          BYTE6(v86) = 0;
        }
        sub_1013474(v25, v29, (uint64_t)&v82, 0, (uint64_t)&v90, v22, a6, (uint64_t)v80);
        if (v81 != -1)
        {
          sub_102A428((uint64_t)&v95, v81, v27);
          sub_102A638((uint64_t)&v95, v27, (uint64_t)&v78);
          if ((void)v78 != 0x7FFFFFFFFFFFFFFFLL)
          {
            int v75 = 0;
            unint64_t v76 = 0;
            uint64_t v77 = 0;
            if (DWORD2(v78) != -1)
            {
              do
              {
                uint64_t v33 = v79;
                if (!sub_10022FC(v79)) {
                  break;
                }
                *(void *)&long long v60 = sub_100231C(v33);
                sub_29603C((void **)&v75, &v60);
                sub_102A638((uint64_t)&v95, DWORD2(v78), (uint64_t)&v60);
                long long v78 = v60;
                uint64_t v79 = v61;
              }
              while (DWORD2(v60) != -1);
              long long v34 = v75;
              long long v35 = v76;
              if (v75 != v76)
              {
                uint64_t v36 = v76 - 1;
                if (v76 - 1 > v75)
                {
                  unsigned int v37 = (char *)(v75 + 1);
                  do
                  {
                    uint64_t v38 = *((void *)v37 - 1);
                    *((void *)v37 - 1) = *v36;
                    *v36-- = v38;
                    BOOL v39 = v37 >= (char *)v36;
                    v37 += 8;
                  }
                  while (!v39);
                  long long v34 = v75;
                  long long v35 = v76;
                }
                int v40 = *(_DWORD *)(v25 + 60);
                int v41 = *(_DWORD *)(v25 + 64);
                uint64_t v42 = *(void *)(v25 + 72);
                BOOL v43 = v40 != v41 || v42 == 0;
                char v44 = !v43;
                int v45 = *(_DWORD *)(a5 + 60);
                int v46 = *(_DWORD *)(a5 + 64);
                uint64_t v47 = *(void *)(a5 + 72);
                BOOL v49 = v45 == v46 && v47 != 0;
                *(void *)&long long v60 = v59;
                DWORD2(v60) = v40;
                uint64_t v61 = v42;
                char v62 = v44;
                *(void *)&long long v64 = v59;
                DWORD2(v64) = v41;
                *(void *)&long long v65 = 0;
                BYTE8(v65) = 0;
                sub_102D11C((uint64_t)&v60, (uint64_t)&v64, v34, v35, (uint64_t)v71);
                BOOL v43 = v72 == v41;
                unint64_t v22 = v59;
                if (v43 && !v73)
                {
                  *(void *)&long long v60 = v59;
                  DWORD2(v60) = v45;
                  uint64_t v61 = v47;
                  char v62 = v49;
                  *(void *)&long long v64 = v59;
                  DWORD2(v64) = v46;
                  *(void *)&long long v65 = 0;
                  BYTE8(v65) = 0;
                  sub_102D11C((uint64_t)&v60, (uint64_t)&v64, v74, v76, (uint64_t)v67);
                  if (v68 == v46 && !v69 && v70 == v76)
                  {
                    long long v50 = *(_OWORD *)(v25 + 8);
                    long long v51 = *(_OWORD *)(v25 + 40);
                    long long v65 = *(_OWORD *)(v25 + 24);
                    long long v66 = v51;
                    long long v64 = v50;
                    int v63 = *(_DWORD *)(v25 + 56);
                    if (sub_EC97AC((uint64_t)&v64) && sub_EC97AC(v53) && sub_488C(&v63) && sub_488C(v52))
                    {
                      sub_EC9FB0((uint64_t)&v64, v53);
                      sub_ECA2C4(&v63, v52);
                      sub_1037A90((uint64_t)&v64, &v63, v87, v54, *(_DWORD *)(a1 + 8), v33, (uint64_t)&v75, (uint64_t)&v60);
                      sub_745A4(a1 + 16, &v87);
                      sub_102A7B0((uint64_t *)(a1 + 40), (uint64_t *)&v60);
                      ++*(_DWORD *)(a1 + 8);
                      sub_1026050(&v60);
                    }
                  }
                }
                long long v35 = v75;
                a5 = v56;
                a6 = v57;
                unsigned int v27 = v58;
                uint64_t v26 = v55;
              }
              if (v35)
              {
                unint64_t v76 = v35;
                operator delete(v35);
              }
            }
          }
        }
        v25 += 80;
      }
      while (v25 != v26);
    }
  }
  if (__p)
  {
    int v104 = __p;
    operator delete(__p);
  }
  if (v101)
  {
    uint64_t v102 = v101;
    operator delete(v101);
  }
  if (v99)
  {
    uint64_t v100 = v99;
    operator delete(v99);
  }
  if (v97)
  {
    uint64_t v98 = v97;
    operator delete(v97);
  }
  return sub_328138((uint64_t)v96);
}

void sub_1029C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  sub_ECFCF0(&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

void sub_1029D34(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (a2[7] - a2[6]) >> 2;
  uint64_t v38 = 0;
  BOOL v39 = 0;
  __n128 __p = 0;
  unsigned int v7 = v6 - 1;
  if (!v7)
  {
    unint64_t v9 = 0;
    uint64_t v10 = (unsigned int *)a1[2];
    unint64_t v11 = (int *)a1[3];
    if (v10 == (unsigned int *)v11) {
      goto LABEL_7;
    }
LABEL_5:
    uint64_t v12 = (int *)v10;
    do
    {
      int v13 = *v12++;
      ++v9[v13];
    }
    while (v12 != v11);
    goto LABEL_7;
  }
  size_t v8 = v7;
  unint64_t v9 = operator new(v8 * 4);
  __n128 __p = v9;
  BOOL v39 = (char *)&v9[v8];
  bzero(v9, v8 * 4);
  uint64_t v38 = (char *)&v9[v8];
  uint64_t v10 = (unsigned int *)a1[2];
  unint64_t v11 = (int *)a1[3];
  if (v10 != (unsigned int *)v11) {
    goto LABEL_5;
  }
LABEL_7:
  unint64_t v14 = 126 - 2 * __clz(((char *)v11 - (char *)v10) >> 2);
  unsigned int v15 = (uint64_t *)a1[5];
  BOOL v16 = (uint64_t *)a1[6];
  uint64_t v17 = (uint64_t)(a1 + 5);
  if (v11 == (int *)v10) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = v14;
  }
  sub_102D2D0(v10, v15, v11, v16, (uint64_t)&v40, v18, 1);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  long long v19 = operator new(4uLL);
  _DWORD *v19 = 0;
  *(void *)(a3 + 8) = v19 + 1;
  *(void *)(a3 + 16) = v19 + 1;
  *(void *)a3 = v19;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  long long v20 = operator new(4uLL);
  *(void *)(a3 + 48) = v20;
  *v20++ = 0;
  *(void *)(a3 + 56) = v20;
  *(void *)(a3 + 64) = v20;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  unint64_t v21 = (unint64_t)(((a2[7] - a2[6]) << 30) - 0x100000000) >> 32;
  if (v21)
  {
    uint64_t v22 = 0;
    unint64_t v23 = 0;
    do
    {
      uint64_t v25 = *(void *)(a3 + 48);
      uint64_t v26 = *(void *)(a3 + 56);
      uint64_t v27 = v26 - v25;
      if (((unint64_t)(v26 - v25) >> 2) - 1 <= v23)
      {
        unint64_t v28 = (v23 + 2);
        uint64_t v29 = *(void *)(a3 + 8);
        unint64_t v30 = (v29 - *(void *)a3) >> 2;
        if (v28 <= v30)
        {
          if (v28 < v30) {
            *(void *)(a3 + 8) = *(void *)a3 + 4 * v28;
          }
        }
        else
        {
          sub_500DC(a3, v28 - v30, (const float *)(v29 - 4));
          uint64_t v25 = *(void *)(a3 + 48);
          uint64_t v26 = *(void *)(a3 + 56);
          uint64_t v27 = v26 - v25;
        }
        unint64_t v31 = v27 >> 2;
        if (v28 <= v31)
        {
          if (v28 < v31) {
            *(void *)(a3 + 56) = v25 + 4 * v28;
          }
        }
        else
        {
          sub_500DC(a3 + 48, v28 - v31, (const float *)(v26 - 4));
        }
      }
      uint64_t v32 = sub_1037958(v23, a2);
      uint64_t v34 = v33;
      uint64_t v35 = *(void *)(a3 + 96);
      unint64_t v36 = (*(void *)(a3 + 104) - v35) >> 4;
      if (v36 <= v23)
      {
        LOWORD(v40) = 0;
        *((void *)&v40 + 1) = 0;
        sub_F169FC((char **)(a3 + 96), v23 - v36 + 1, &v40);
        uint64_t v35 = *(void *)(a3 + 96);
      }
      ++v23;
      unsigned int v24 = (uint64_t *)(v35 + v22);
      *unsigned int v24 = v32;
      v24[1] = v34;
      v22 += 16;
    }
    while (v21 != v23);
  }
  sub_102A818((void *)a3, (int **)&__p, v17);
  if (__p)
  {
    uint64_t v38 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1029FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  sub_F2DA34(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_102A004(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v5 = (void **)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    size_t v8 = *(void **)(a1 + 24);
    if (v7 != v6)
    {
      do
      {
        unint64_t v9 = *(void **)(v7 - 88);
        if (v9)
        {
          *(void *)(v7 - 80) = v9;
          operator delete(v9);
        }
        uint64_t v10 = *(void **)(v7 - 168);
        if (v10)
        {
          *(void *)(v7 - 160) = v10;
          operator delete(v10);
        }
        v7 -= 184;
      }
      while (v7 != v6);
      size_t v8 = *v5;
    }
    *(void *)(a1 + 32) = v6;
    operator delete(v8);
    *uint64_t v5 = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v11 = *(void **)(a1 + 48);
  if (v11)
  {
    *(void *)(a1 + 56) = v11;
    operator delete(v11);
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  uint64_t v12 = (void **)(a1 + 72);
  uint64_t v13 = *(void *)(a1 + 72);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 80);
    unsigned int v15 = *(void **)(a1 + 72);
    if (v14 != v13)
    {
      do
      {
        BOOL v16 = *(void **)(v14 - 88);
        if (v16)
        {
          *(void *)(v14 - 80) = v16;
          operator delete(v16);
        }
        uint64_t v17 = *(void **)(v14 - 168);
        if (v17)
        {
          *(void *)(v14 - 160) = v17;
          operator delete(v17);
        }
        v14 -= 184;
      }
      while (v14 != v13);
      unsigned int v15 = *v12;
    }
    *(void *)(a1 + 80) = v13;
    operator delete(v15);
    int *v12 = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  uint64_t v18 = *(void **)(a1 + 96);
  if (v18)
  {
    *(void *)(a1 + 104) = v18;
    operator delete(v18);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  return a1;
}

uint64_t sub_102A1D8(uint64_t result)
{
  if (*(_DWORD *)(result + 880))
  {
    uint64_t v1 = result;
    uint64_t v2 = result + 8;
    do
    {
      unint64_t v3 = (unsigned int *)(*(void *)(v1 + 776) + 8 * **(unsigned int **)(v1 + 832));
      uint64_t v4 = *v3;
      unsigned int v5 = v3[1];
      sub_ED37DC(v2);
      uint64_t v6 = *(void *)v1;
      sub_EC079C(*(void *)v1, v4);
      uint64_t v7 = (unsigned int *)(*(void *)(v6 + 72) + 80 * *(unsigned int *)(*(void *)(v6 + 48) + 4 * v4));
      uint64_t result = sub_EC079C(v6, v4);
      uint64_t v8 = *(void *)(v6 + 72) + 80 * *(unsigned int *)(*(void *)(v6 + 48) + 4 * (v4 + 1));
      while (v7 != (unsigned int *)v8)
      {
        unsigned int v9 = v7[14];
        if (v9 != 0x7FFFFFFF)
        {
          unsigned int v10 = *v7;
          unsigned int v11 = v9 + v5;
          unsigned int v12 = v10;
          uint64_t result = sub_1028808(v2, &v12, (int *)&v11);
        }
        v7 += 20;
      }
    }
    while (*(_DWORD *)(v1 + 880));
  }
  return result;
}

uint64_t sub_102A2D0(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = ~(unint64_t)a2 + ((unint64_t)a2 << 21);
  unint64_t v4 = 21 * ((265 * (v3 ^ (v3 >> 24))) ^ ((265 * (v3 ^ (v3 >> 24))) >> 14));
  unint64_t v5 = 2147483649u * (v4 ^ (v4 >> 28));
  uint64_t v6 = a1
     + 48
     * (((((unsigned __int16)(v4 ^ (v4 >> 28)) >> 8) ^ ((-2147483647
                                                                        * (v4 ^ (v4 >> 28))) >> 16)) ^ ((-2147483647 * (v4 ^ (v4 >> 28))) >> 24)) & 0xF);
  uint64_t v9 = *(void *)(v6 + 8);
  uint64_t v8 = v6 + 8;
  uint64_t v7 = v9;
  unint64_t v10 = v5 >> 7;
  uint64_t v11 = *(void *)(v8 + 24);
  uint64_t v12 = 0x101010101010101 * (v5 & 0x7F);
  for (unint64_t i = v10; ; unint64_t i = v2 + v14)
  {
    unint64_t v14 = i & v11;
    uint64_t v15 = *(void *)(v7 + (i & v11));
    unint64_t v16 = ((v15 ^ v12) - 0x101010101010101) & ~(v15 ^ v12) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_6:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0) {
      return 0x7FFFFFFFLL;
    }
    v2 += 8;
  }
  uint64_t v17 = *(void *)(v8 + 8);
  while (1)
  {
    unint64_t v18 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v11;
    if (*(_DWORD *)(v17 + 8 * v18) == a2) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_6;
    }
  }
  if (v11 == v18) {
    return 0x7FFFFFFFLL;
  }
  for (j = 0; ; unint64_t v10 = j + v21)
  {
    unint64_t v21 = v10 & v11;
    unint64_t v22 = ((*(void *)(v7 + v21) ^ v12) - 0x101010101010101) & ~(*(void *)(v7 + v21) ^ v12) & 0x8080808080808080;
    if (v22) {
      break;
    }
LABEL_11:
    j += 8;
  }
  while (1)
  {
    unint64_t v23 = (v21 + (__clz(__rbit64(v22)) >> 3)) & v11;
    if (*(_DWORD *)(v17 + 8 * v23) == a2) {
      return *(unsigned int *)(*(void *)(a1 + 776) + 8 * *(unsigned int *)(v17 + 8 * v23 + 4) + 4);
    }
    v22 &= v22 - 1;
    if (!v22) {
      goto LABEL_11;
    }
  }
}

uint64_t sub_102A428(uint64_t a1, int a2, unsigned int a3)
{
  unsigned int v33 = a3;
  *(void *)&long long v29 = 0;
  DWORD2(v29) = -1;
  uint64_t v30 = 0;
  uint64_t v6 = operator new(4uLL);
  __n128 __p = v6;
  *uint64_t v6 = a2;
  uint64_t v35 = v6 + 1;
  unint64_t v36 = v6 + 1;
  sub_102C9CC(a1, (unsigned int **)&__p, &v33, (uint64_t)&v32, (uint64_t)&v31, &v29);
  if (__p)
  {
    uint64_t v35 = __p;
    operator delete(__p);
  }
  uint64_t v7 = 0;
  unint64_t v8 = ~(unint64_t)a3 + ((unint64_t)a3 << 21);
  unint64_t v9 = 21 * ((265 * (v8 ^ (v8 >> 24))) ^ ((265 * (v8 ^ (v8 >> 24))) >> 14));
  unint64_t v10 = 2147483649u * (v9 ^ (v9 >> 28));
  uint64_t v11 = a1
      + 48
      * (((((unsigned __int16)(v9 ^ (v9 >> 28)) >> 8) ^ ((-2147483647
                                                                         * (v9 ^ (v9 >> 28))) >> 16)) ^ ((-2147483647 * (v9 ^ (v9 >> 28))) >> 24)) & 0xF);
  uint64_t v14 = *(void *)(v11 + 8);
  uint64_t v13 = v11 + 8;
  uint64_t v12 = v14;
  unint64_t v15 = v10 >> 7;
  uint64_t v16 = *(void *)(v13 + 24);
  uint64_t v17 = 0x101010101010101 * (v10 & 0x7F);
  for (unint64_t i = v15; ; unint64_t i = v7 + v19)
  {
    unint64_t v19 = i & v16;
    uint64_t v20 = *(void *)(v12 + (i & v16));
    unint64_t v21 = ((v20 ^ v17) - 0x101010101010101) & ~(v20 ^ v17) & 0x8080808080808080;
    if (v21) {
      break;
    }
LABEL_8:
    if ((v20 & (~v20 << 6) & 0x8080808080808080) != 0) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
    v7 += 8;
  }
  uint64_t v22 = *(void *)(v13 + 8);
  while (1)
  {
    unint64_t v23 = (v19 + (__clz(__rbit64(v21)) >> 3)) & v16;
    if (*(_DWORD *)(v22 + 8 * v23) == a3) {
      break;
    }
    v21 &= v21 - 1;
    if (!v21) {
      goto LABEL_8;
    }
  }
  if (v16 == v23) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  for (j = 0; ; unint64_t v15 = j + v26)
  {
    unint64_t v26 = v15 & v16;
    unint64_t v27 = ((*(void *)(v12 + v26) ^ v17) - 0x101010101010101) & ~(*(void *)(v12 + v26) ^ v17) & 0x8080808080808080;
    if (v27) {
      break;
    }
LABEL_13:
    j += 8;
  }
  while (1)
  {
    unint64_t v28 = (v26 + (__clz(__rbit64(v27)) >> 3)) & v16;
    if (*(_DWORD *)(v22 + 8 * v28) == a3) {
      return *(void *)(*(void *)(a1 + 776) + 32 * *(unsigned int *)(v22 + 8 * v28 + 4) + 8);
    }
    v27 &= v27 - 1;
    if (!v27) {
      goto LABEL_13;
    }
  }
}

void sub_102A61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_102A638@<Q0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = 0;
  unint64_t v4 = ~(unint64_t)a2 + ((unint64_t)a2 << 21);
  unint64_t v5 = 21 * ((265 * (v4 ^ (v4 >> 24))) ^ ((265 * (v4 ^ (v4 >> 24))) >> 14));
  unint64_t v6 = 2147483649u * (v5 ^ (v5 >> 28));
  uint64_t v7 = a1
     + 48
     * (((((unsigned __int16)(v5 ^ (v5 >> 28)) >> 8) ^ ((-2147483647
                                                                        * (v5 ^ (v5 >> 28))) >> 16)) ^ ((-2147483647 * (v5 ^ (v5 >> 28))) >> 24)) & 0xF);
  uint64_t v10 = *(void *)(v7 + 8);
  uint64_t v9 = v7 + 8;
  uint64_t v8 = v10;
  unint64_t v11 = v6 >> 7;
  uint64_t v12 = *(void *)(v9 + 24);
  uint64_t v13 = 0x101010101010101 * (v6 & 0x7F);
  for (unint64_t i = v11; ; unint64_t i = v3 + v15)
  {
    unint64_t v15 = i & v12;
    uint64_t v16 = *(void *)(v8 + (i & v12));
    unint64_t v17 = ((v16 ^ v13) - 0x101010101010101) & ~(v16 ^ v13) & 0x8080808080808080;
    if (v17) {
      break;
    }
LABEL_6:
    if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v3 += 8;
  }
  uint64_t v18 = *(void *)(v9 + 8);
  while (1)
  {
    unint64_t v19 = (v15 + (__clz(__rbit64(v17)) >> 3)) & v12;
    if (*(_DWORD *)(v18 + 8 * v19) == a2) {
      break;
    }
    v17 &= v17 - 1;
    if (!v17) {
      goto LABEL_6;
    }
  }
  if (v12 == v19)
  {
LABEL_9:
    result.n128_u64[0] = 0x7FFFFFFFFFFFFFFFLL;
    *(_OWORD *)a3 = xmmword_20E7B70;
    *(_DWORD *)(a3 + 8) = -1;
    *(void *)(a3 + 16) = 0;
    return result;
  }
  for (j = 0; ; unint64_t v11 = j + v22)
  {
    unint64_t v22 = v11 & v12;
    unint64_t v23 = ((*(void *)(v8 + v22) ^ v13) - 0x101010101010101) & ~(*(void *)(v8 + v22) ^ v13) & 0x8080808080808080;
    if (v23) {
      break;
    }
LABEL_11:
    j += 8;
  }
  while (1)
  {
    unint64_t v24 = (v22 + (__clz(__rbit64(v23)) >> 3)) & v12;
    if (*(_DWORD *)(v18 + 8 * v24) == a2) {
      break;
    }
    v23 &= v23 - 1;
    if (!v23) {
      goto LABEL_11;
    }
  }
  uint64_t v25 = *(void *)(a1 + 776) + 32 * *(unsigned int *)(v18 + 8 * v24 + 4);
  __n128 result = *(__n128 *)(v25 + 8);
  *(__n128 *)a3 = result;
  *(void *)(a3 + 16) = *(void *)(v25 + 24);
  return result;
}

uint64_t sub_102A7B0(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t v5 = sub_102820C(a1, a2);
    a1[1] = v5;
    return v5 - 184;
  }
  else
  {
    sub_102843C(a1[1], a2);
    a1[1] = v3 + 184;
    a1[1] = v3 + 184;
    return v3;
  }
}

void sub_102A810(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_102A818(void *a1, int **a2, uint64_t a3)
{
  unint64_t v6 = (void **)(a1 + 9);
  uint64_t v7 = a1[9];
  if (v7)
  {
    uint64_t v8 = a1[10];
    uint64_t v9 = (void *)a1[9];
    if (v8 != v7)
    {
      do
      {
        uint64_t v10 = *(void **)(v8 - 88);
        if (v10)
        {
          *(void *)(v8 - 80) = v10;
          operator delete(v10);
        }
        unint64_t v11 = *(void **)(v8 - 168);
        if (v11)
        {
          *(void *)(v8 - 160) = v11;
          operator delete(v11);
        }
        v8 -= 184;
      }
      while (v8 != v7);
      uint64_t v9 = *v6;
    }
    a1[10] = v7;
    operator delete(v9);
    *unint64_t v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  *(_OWORD *)(a1 + 9) = *(_OWORD *)a3;
  a1[11] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v12 = a1 + 6;
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  int v15 = 0;
  uint64_t v16 = (char *)v14 - (char *)v13;
  if (v16)
  {
    uint64_t v17 = v16 >> 2;
    uint64_t v18 = (_DWORD *)*v12;
    do
    {
      *v18++ = v15;
      int v19 = *v13++;
      v15 += v19;
      --v17;
    }
    while (v17);
  }
  *(_DWORD *)(a1[7] - 4) = v15;
  sub_EBF034((uint64_t)v12);
  if (0xD37A6F4DE9BD37A7 * ((uint64_t)(a1[10] - a1[9]) >> 3) != v15)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v22, "sum of out-degrees does not match the size of the outgoing arc vector");
    unint64_t v21 = (void *)sub_2F404((uint64_t)exception, &v22);
  }
}

void sub_102A980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_102A9B0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  *(_DWORD *)(a1 + 8) = 0;
  unint64_t v95 = (unint64_t)(((a2[7] - a2[6]) << 30) - 0x100000000) >> 32;
  if (v95)
  {
    uint64_t v32 = 0;
    uint64_t v97 = (void **)(a1 + 16);
    uint64_t v96 = (uint64_t *)(a1 + 40);
    while (1)
    {
      uint64_t v101 = v32;
      BOOL v99 = sub_EB9330((uint64_t)a2, v32) && *(unsigned char *)sub_EB935C((uint64_t)a2, v101) == 3;
      if (sub_EB9330((uint64_t)a2, v101))
      {
        uint64_t v33 = sub_EB935C((uint64_t)a2, v101);
        long long v34 = *(_OWORD *)(v33 + 96);
        long long v126 = *(_OWORD *)(v33 + 112);
        long long v35 = *(_OWORD *)(v33 + 144);
        long long v127 = *(_OWORD *)(v33 + 128);
        long long v128 = v35;
        uint64_t v129 = *(void *)(v33 + 160);
        long long v125 = v34;
      }
      else
      {
        LODWORD(v125) = 0;
        *((void *)&v125 + 1) = 0;
        *(void *)&long long v126 = 0;
        BYTE8(v126) = 0;
        *(void *)&long long v127 = 0x3FF0000000000000;
        BYTE8(v127) = 1;
        long long v128 = 0uLL;
        LOBYTE(v129) = 0;
        *(_DWORD *)((char *)&v129 + 2) = 36000;
        BYTE6(v129) = 0;
      }
      sub_EC079C((uint64_t)a2, v101);
      uint64_t v36 = a2[9];
      unsigned int v37 = *(_DWORD *)(a2[6] + 4 * v101);
      sub_EC079C((uint64_t)a2, v101);
      uint64_t v38 = (unsigned int *)(v36 + 80 * v37);
      uint64_t v39 = a2[9];
      uint64_t v40 = a2[6];
      int v41 = (unsigned int *)(v39 + 80 * *(unsigned int *)(v40 + 4 * (v101 + 1)));
      if (v38 != v41) {
        break;
      }
LABEL_38:
      uint64_t v32 = v101 + 1;
      if (v101 + 1 == v95) {
        goto LABEL_2;
      }
    }
    uint64_t v100 = (unsigned int *)(v39 + 80 * *(unsigned int *)(v40 + 4 * (v101 + 1)));
    while (1)
    {
      unsigned int v42 = *v38;
      unsigned __int16 v43 = sub_EDBE88((uint64_t)a3, v38[15]);
      BOOL v44 = sub_EB9330((uint64_t)a2, v42) && *(unsigned char *)sub_EB935C((uint64_t)a2, v42) == 4;
      if (sub_EB9330((uint64_t)a2, v42))
      {
        uint64_t v45 = sub_EB935C((uint64_t)a2, v42);
        long long v46 = *(_OWORD *)(v45 + 16);
        long long v121 = *(_OWORD *)(v45 + 32);
        long long v47 = *(_OWORD *)(v45 + 64);
        long long v122 = *(_OWORD *)(v45 + 48);
        long long v123 = v47;
        uint64_t v124 = *(void *)(v45 + 80);
        long long v120 = v46;
      }
      else
      {
        LODWORD(v120) = 0;
        *((void *)&v120 + 1) = 0;
        *(void *)&long long v121 = 0;
        BYTE8(v121) = 0;
        *(void *)&long long v122 = 0x3FF0000000000000;
        BYTE8(v122) = 1;
        long long v123 = 0uLL;
        LOBYTE(v124) = 0;
        *(_DWORD *)((char *)&v124 + 2) = 36000;
        BYTE6(v124) = 0;
      }
      if (sub_EC97AC((uint64_t)(v38 + 2)) && sub_488C(v38 + 14)) {
        break;
      }
LABEL_47:
      v38 += 20;
      if (v38 == v41) {
        goto LABEL_38;
      }
    }
    if (v99 && v44)
    {
      int v48 = *v38;
      int v49 = *(_DWORD *)(a1 + 8);
      memset(&v130, 0, 96);
      uint64_t v135 = 0;
      long long v134 = 0u;
      long long v131 = 0u;
      v130.n128_u32[0] = -1;
      DWORD2(v131) = -1;
      int v132 = 0;
      unint64_t v133 = 0;
      *(void *)&long long v134 = 0;
      WORD4(v134) = 256;
      int v117 = 0;
      uint64_t v118 = 0;
      uint64_t v119 = 0;
      sub_1037A90((uint64_t)(v38 + 2), (int *)v38 + 14, v101, v48, v49, (uint64_t)&v130, (uint64_t)&v117, (uint64_t)&v103);
      if (v117)
      {
        uint64_t v118 = v117;
        operator delete(v117);
      }
      if (v132)
      {
        unint64_t v133 = v132;
        operator delete(v132);
      }
      LOBYTE(v107) = 1;
    }
    else
    {
      uint64_t v50 = *a4;
      int v51 = *v38;
      char v52 = sub_EB9330((uint64_t)a2, v101);
      unsigned __int8 v53 = sub_EB9330((uint64_t)a2, v42);
      sub_10372C0((uint64_t)v38, v50 + 2336 * v43, a3, v101, v51, v52, (uint64_t)&v125, (uint64_t)&v103, v53, (uint64_t)&v120, *(_DWORD *)(a1 + 8));
    }
    if (HIDWORD(v103) == -1 || v104 == -1)
    {
      sub_102B5A4(a1, a2, a3, v101, (uint64_t)v38, *a4 + 2336 * v43);
      int v41 = v100;
      uint64_t v57 = __p;
      if (!__p) {
        goto LABEL_69;
      }
      goto LABEL_68;
    }
    uint64_t v55 = *(char **)(a1 + 24);
    unint64_t v54 = *(void *)(a1 + 32);
    int v41 = v100;
    if ((unint64_t)v55 < v54)
    {
      *(_DWORD *)uint64_t v55 = v101;
      uint64_t v56 = (uint64_t)(v55 + 4);
      goto LABEL_90;
    }
    unsigned int v58 = (char *)*v97;
    uint64_t v59 = v55 - (unsigned char *)*v97;
    uint64_t v60 = v59 >> 2;
    unint64_t v61 = (v59 >> 2) + 1;
    if (v61 >> 62) {
      sub_2E00();
    }
    uint64_t v62 = v54 - (void)v58;
    if (v62 >> 1 > v61) {
      unint64_t v61 = v62 >> 1;
    }
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v63 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v63 = v61;
    }
    if (v63)
    {
      if (v63 >> 62) {
        sub_188D718();
      }
      unint64_t v64 = v63;
      long long v65 = operator new(4 * v63);
      unint64_t v63 = v64;
      long long v66 = &v65[4 * v60];
      *long long v66 = v101;
      uint64_t v56 = (uint64_t)(v66 + 1);
      if (v55 == v58) {
        goto LABEL_88;
      }
    }
    else
    {
      long long v65 = 0;
      long long v66 = (_DWORD *)(4 * v60);
      *(_DWORD *)(4 * v60) = v101;
      uint64_t v56 = 4 * v60 + 4;
      if (v55 == v58)
      {
LABEL_88:
        *(void *)(a1 + 16) = v66;
        *(void *)(a1 + 24) = v56;
        *(void *)(a1 + 32) = &v65[4 * v63];
        if (v58) {
          operator delete(v58);
        }
LABEL_90:
        *(void *)(a1 + 24) = v56;
        unint64_t v76 = *(void *)(a1 + 48);
        if (v76 >= *(void *)(a1 + 56))
        {
          uint64_t v93 = sub_102BF28(v96, &v103);
        }
        else
        {
          uint64_t v77 = v103;
          *(_DWORD *)(v76 + 8) = v104;
          *(void *)(v76 + 16) = 0;
          *(void *)unint64_t v76 = v77;
          *(void *)(v76 + 24) = 0;
          *(void *)(v76 + 32) = 0;
          long long v78 = v105;
          int64_t v79 = v106 - (unsigned char *)v105;
          if (v106 != v105)
          {
            if (v79 < 0) {
              sub_2E00();
            }
            uint64_t v80 = (char *)operator new(v106 - (unsigned char *)v105);
            *(void *)(v76 + 16) = v80;
            *(void *)(v76 + 24) = v80;
            int v81 = &v80[8 * (v79 >> 3)];
            *(void *)(v76 + 32) = v81;
            memcpy(v80, v78, v79);
            *(void *)(v76 + 24) = v81;
            int v41 = v100;
          }
          long long v82 = v107;
          long long v83 = v108;
          long long v84 = v109;
          uint64_t v85 = v110;
          *(void *)(v76 + 96) = 0;
          *(void *)(v76 + 88) = v85;
          *(_OWORD *)(v76 + 72) = v84;
          *(_OWORD *)(v76 + 56) = v83;
          *(_OWORD *)(v76 + 40) = v82;
          *(void *)(v76 + 104) = 0;
          *(void *)(v76 + 112) = 0;
          uint64_t v86 = __p;
          int64_t v87 = v112 - (unsigned char *)__p;
          if (v112 != __p)
          {
            if (v87 < 0) {
              sub_2E00();
            }
            unint64_t v88 = (char *)operator new(v112 - (unsigned char *)__p);
            *(void *)(v76 + 96) = v88;
            *(void *)(v76 + 104) = v88;
            unsigned int v89 = &v88[2 * (v87 >> 1)];
            *(void *)(v76 + 112) = v89;
            memcpy(v88, v86, v87);
            *(void *)(v76 + 104) = v89;
          }
          long long v90 = v113;
          long long v91 = v114;
          long long v92 = v115;
          *(_OWORD *)(v76 + 168) = v116;
          *(_OWORD *)(v76 + 152) = v92;
          *(_OWORD *)(v76 + 136) = v91;
          *(_OWORD *)(v76 + 120) = v90;
          uint64_t v93 = v76 + 184;
          *(void *)(a1 + 48) = v76 + 184;
        }
        *(void *)(a1 + 48) = v93;
        ++*(_DWORD *)(a1 + 8);
        uint64_t v57 = __p;
        if (!__p) {
          goto LABEL_69;
        }
LABEL_68:
        uint64_t v112 = v57;
        operator delete(v57);
LABEL_69:
        if (v105)
        {
          uint64_t v106 = v105;
          operator delete(v105);
        }
        goto LABEL_47;
      }
    }
    unint64_t v67 = v55 - 4 - v58;
    if (v67 < 0x2C) {
      goto LABEL_107;
    }
    if ((unint64_t)(v55 - &v65[v59]) < 0x20) {
      goto LABEL_107;
    }
    uint64_t v68 = (v67 >> 2) + 1;
    uint64_t v69 = 4 * (v68 & 0x7FFFFFFFFFFFFFF8);
    unsigned int v70 = &v55[-v69];
    long long v66 = (_DWORD *)((char *)v66 - v69);
    uint64_t v71 = &v65[4 * v60 - 16];
    int v72 = v55 - 16;
    uint64_t v73 = v68 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v74 = *(_OWORD *)v72;
      *(v71 - 1) = *((_OWORD *)v72 - 1);
      *uint64_t v71 = v74;
      v71 -= 2;
      v72 -= 32;
      v73 -= 8;
    }
    while (v73);
    uint64_t v55 = v70;
    if (v68 != (v68 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_107:
      do
      {
        int v75 = *((_DWORD *)v55 - 1);
        v55 -= 4;
        *--long long v66 = v75;
      }
      while (v55 != v58);
    }
    goto LABEL_88;
  }
LABEL_2:
  sub_1002AD8((uint64_t)&v103, 0);
  sub_1026094((void *)a5, &v103, **(void **)a1);
  sub_102BC58((void *)a1, a2, (uint64_t)&v130);
  sub_102A004(a5 + 8, (uint64_t)&v130);
  sub_F2DA34((uint64_t)&v130);
  sub_EB9510((uint64_t)a2, &v120);
  uint64_t v8 = *((void *)&v120 + 1);
  uint64_t v7 = v120;
  *(void *)&long long v126 = 0;
  long long v125 = 0uLL;
  if ((void)v120 != *((void *)&v120 + 1))
  {
    uint64_t v9 = 0;
    uint64_t v10 = v120;
    do
    {
      sub_EB9370((uint64_t)a2, &v130);
      sub_1037B18(1022611261 * ((v7 - v130.n128_u64[0]) >> 3), v10, (uint64_t)&v130);
      uint64_t v9 = (char *)sub_102C158((char **)&v125, (uint64_t)v9, (uint64_t)&v130) + 168;
      v10 += 168;
      v7 += 168;
    }
    while (v10 != v8);
  }
  unint64_t v11 = *(void **)(a5 + 128);
  if (v11)
  {
    *(void *)(a5 + 136) = v11;
    operator delete(v11);
    *(void *)(a5 + 128) = 0;
    *(void *)(a5 + 136) = 0;
    *(void *)(a5 + 144) = 0;
  }
  *(_OWORD *)(a5 + 128) = v125;
  *(void *)(a5 + 144) = v126;
  sub_EB9534((uint64_t)a2, &v120);
  uint64_t v13 = *((void *)&v120 + 1);
  uint64_t v12 = v120;
  *(void *)&long long v126 = 0;
  long long v125 = 0uLL;
  if ((void)v120 != *((void *)&v120 + 1))
  {
    uint64_t v14 = 0;
    uint64_t v15 = v120;
    do
    {
      sub_EB9370((uint64_t)a2, &v130);
      sub_1037B18(1022611261 * ((v12 - v130.n128_u64[0]) >> 3), v15, (uint64_t)&v130);
      uint64_t v14 = (char *)sub_102C158((char **)&v125, (uint64_t)v14, (uint64_t)&v130) + 168;
      v15 += 168;
      v12 += 168;
    }
    while (v15 != v13);
  }
  uint64_t v16 = *(void **)(a5 + 152);
  if (v16)
  {
    *(void *)(a5 + 160) = v16;
    operator delete(v16);
    *(void *)(a5 + 152) = 0;
    *(void *)(a5 + 160) = 0;
    *(void *)(a5 + 168) = 0;
  }
  *(_OWORD *)(a5 + 152) = v125;
  *(void *)(a5 + 168) = v126;
  sub_EB9564((uint64_t)a2, &v120);
  uint64_t v18 = *((void *)&v120 + 1);
  uint64_t v17 = v120;
  *(void *)&long long v126 = 0;
  long long v125 = 0uLL;
  if ((void)v120 != *((void *)&v120 + 1))
  {
    int v19 = 0;
    uint64_t v20 = v120;
    do
    {
      sub_EB9370((uint64_t)a2, &v130);
      sub_1037B18(1022611261 * ((v17 - v130.n128_u64[0]) >> 3), v20, (uint64_t)&v130);
      int v19 = (char *)sub_102C158((char **)&v125, (uint64_t)v19, (uint64_t)&v130) + 168;
      v20 += 168;
      v17 += 168;
    }
    while (v20 != v18);
  }
  unint64_t v21 = *(void **)(a5 + 176);
  if (v21)
  {
    *(void *)(a5 + 184) = v21;
    operator delete(v21);
    *(void *)(a5 + 176) = 0;
    *(void *)(a5 + 184) = 0;
    *(void *)(a5 + 192) = 0;
  }
  *(_OWORD *)(a5 + 176) = v125;
  *(void *)(a5 + 192) = v126;
  v130.n128_u64[0] = (unint64_t)a2;
  sub_1031458(&v130.n128_u64[1], 0x400u);
  unint64_t v22 = sub_EB9528((uint64_t)a2);
  int v23 = v22;
  unint64_t v24 = HIDWORD(v22);
  if (v22 != HIDWORD(v22))
  {
    do
    {
      LODWORD(v120) = 0;
      LODWORD(v125) = v23;
      sub_1028598((uint64_t)&v130.n128_i64[1], (unsigned int *)&v125, (int *)&v120);
      ++v23;
    }
    while (v24 != v23);
  }
  sub_102A1D8((uint64_t)&v130);
  LODWORD(v125) = 0x7FFFFFFF;
  unint64_t v25 = sub_EB9550((uint64_t)a2);
  unsigned int v26 = v25;
  unint64_t v27 = HIDWORD(v25);
  int v28 = 0x7FFFFFFF;
  if (v25 != HIDWORD(v25))
  {
    do
    {
      int v29 = sub_102A2D0((uint64_t)&v130, v26);
      LODWORD(v120) = v29;
      if (v28 >= v29) {
        uint64_t v30 = (int *)&v120;
      }
      else {
        uint64_t v30 = (int *)&v125;
      }
      if (v29 == 0x7FFFFFFF) {
        uint64_t v30 = (int *)&v125;
      }
      if (v28 == 0x7FFFFFFF) {
        uint64_t v30 = (int *)&v120;
      }
      int v28 = *v30;
      LODWORD(v125) = *v30;
      ++v26;
    }
    while (v27 != v26);
  }
  *(_DWORD *)(a5 + 200) = v28;
  if (v142)
  {
    unint64_t v143 = v142;
    operator delete(v142);
  }
  if (v140)
  {
    int v141 = v140;
    operator delete(v140);
  }
  if (v138)
  {
    uint64_t v139 = v138;
    operator delete(v138);
  }
  if (v136)
  {
    uint64_t v137 = v136;
    operator delete(v136);
  }
  sub_328138((uint64_t)&v130.n128_i64[1]);
  return sub_F2CA5C((uint64_t)&v103);
}

void sub_102B450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_102B580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
}

void sub_102B594()
{
}

uint64_t sub_102B5A4(uint64_t a1, void *a2, void *a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = a4;
  if (sub_EB9330((uint64_t)a2, a4))
  {
    BOOL v13 = *(unsigned char *)sub_EB935C((uint64_t)a2, v12) == 4;
    uint64_t result = sub_EB9330((uint64_t)a2, v12);
    if (!result) {
      goto LABEL_3;
    }
  }
  else
  {
    BOOL v13 = 0;
    uint64_t result = sub_EB9330((uint64_t)a2, v12);
    if (!result)
    {
LABEL_3:
      if (v13) {
        return result;
      }
      goto LABEL_7;
    }
  }
  uint64_t result = sub_EB935C((uint64_t)a2, v12);
  if (v13 || *(unsigned char *)result == 5) {
    return result;
  }
LABEL_7:
  uint64_t v59 = a3;
  uint64_t v95 = sub_1005964(a6);
  sub_102C868(v96, 0x400u);
  unsigned int v15 = *(_DWORD *)a5;
  BOOL v16 = sub_EB9330((uint64_t)a2, *(_DWORD *)a5);
  BOOL v17 = v16;
  if (v16)
  {
    uint64_t v18 = sub_EB935C((uint64_t)a2, v15);
    long long v19 = *(_OWORD *)(v18 + 64);
    long long v92 = *(_OWORD *)(v18 + 48);
    long long v93 = v19;
    uint64_t v94 = *(void *)(v18 + 80);
    long long v20 = *(_OWORD *)(v18 + 32);
    long long v90 = *(_OWORD *)(v18 + 16);
    long long v91 = v20;
  }
  else
  {
    LODWORD(v90) = 0;
    *(void *)&long long v91 = 0;
    *((void *)&v90 + 1) = 0;
    BYTE8(v91) = 0;
    *(void *)&long long v92 = 0x3FF0000000000000;
    BYTE8(v92) = 1;
    long long v93 = 0uLL;
    LOBYTE(v94) = 0;
    *(_DWORD *)((char *)&v94 + 2) = 36000;
    BYTE6(v94) = 0;
  }
  int v54 = v15;
  char v21 = v17;
  unint64_t v22 = v59;
  sub_1013B38(a5, v21, (uint64_t)&v90, v59, a6, (uint64_t)v88);
  if (v89 != -1)
  {
    unsigned int v58 = v89;
    sub_EC079C((uint64_t)a2, v12);
    uint64_t v23 = a2[3];
    unsigned int v24 = *(_DWORD *)(*a2 + 4 * v12);
    sub_EC079C((uint64_t)a2, v12);
    uint64_t v25 = v23 + 80 * v24;
    uint64_t v26 = a2[3] + 80 * *(unsigned int *)(*a2 + 4 * (a4 + 1));
    unsigned int v27 = v58;
    if (v25 != v26)
    {
      char v52 = (_DWORD *)(a5 + 56);
      uint64_t v53 = a5 + 8;
      uint64_t v56 = a5;
      uint64_t v57 = a6;
      uint64_t v55 = a2[3] + 80 * *(unsigned int *)(*a2 + 4 * (a4 + 1));
      do
      {
        unsigned int v87 = *(_DWORD *)v25;
        BOOL v28 = sub_EB9330((uint64_t)a2, v87);
        char v29 = v28;
        if (v28)
        {
          uint64_t v30 = sub_EB935C((uint64_t)a2, v87);
          long long v31 = *(_OWORD *)(v30 + 144);
          long long v84 = *(_OWORD *)(v30 + 128);
          long long v85 = v31;
          uint64_t v86 = *(void *)(v30 + 160);
          long long v32 = *(_OWORD *)(v30 + 112);
          long long v82 = *(_OWORD *)(v30 + 96);
          long long v83 = v32;
        }
        else
        {
          LODWORD(v82) = 0;
          *((void *)&v82 + 1) = 0;
          *(void *)&long long v83 = 0;
          BYTE8(v83) = 0;
          *(void *)&long long v84 = 0x3FF0000000000000;
          BYTE8(v84) = 1;
          long long v85 = 0uLL;
          LOBYTE(v86) = 0;
          *(_DWORD *)((char *)&v86 + 2) = 36000;
          BYTE6(v86) = 0;
        }
        sub_10137F0(v25, v29, (uint64_t)&v82, 0, (uint64_t)&v90, v22, a6, (uint64_t)v80);
        if (v81 != -1)
        {
          sub_102A428((uint64_t)&v95, v81, v27);
          sub_102A638((uint64_t)&v95, v27, (uint64_t)&v78);
          if ((void)v78 != 0x7FFFFFFFFFFFFFFFLL)
          {
            int v75 = 0;
            unint64_t v76 = 0;
            uint64_t v77 = 0;
            if (DWORD2(v78) != -1)
            {
              do
              {
                uint64_t v33 = v79;
                if (!sub_10022FC(v79)) {
                  break;
                }
                *(void *)&long long v60 = sub_100231C(v33);
                sub_29603C((void **)&v75, &v60);
                sub_102A638((uint64_t)&v95, DWORD2(v78), (uint64_t)&v60);
                long long v78 = v60;
                uint64_t v79 = v61;
              }
              while (DWORD2(v60) != -1);
              long long v34 = v75;
              long long v35 = v76;
              if (v75 != v76)
              {
                uint64_t v36 = v76 - 1;
                if (v76 - 1 > v75)
                {
                  unsigned int v37 = (char *)(v75 + 1);
                  do
                  {
                    uint64_t v38 = *((void *)v37 - 1);
                    *((void *)v37 - 1) = *v36;
                    *v36-- = v38;
                    BOOL v39 = v37 >= (char *)v36;
                    v37 += 8;
                  }
                  while (!v39);
                  long long v34 = v75;
                  long long v35 = v76;
                }
                int v40 = *(_DWORD *)(v25 + 60);
                int v41 = *(_DWORD *)(v25 + 64);
                uint64_t v42 = *(void *)(v25 + 72);
                BOOL v43 = v40 != v41 || v42 == 0;
                char v44 = !v43;
                int v45 = *(_DWORD *)(a5 + 60);
                int v46 = *(_DWORD *)(a5 + 64);
                uint64_t v47 = *(void *)(a5 + 72);
                BOOL v49 = v45 == v46 && v47 != 0;
                *(void *)&long long v60 = v59;
                DWORD2(v60) = v40;
                uint64_t v61 = v42;
                char v62 = v44;
                *(void *)&long long v64 = v59;
                DWORD2(v64) = v41;
                *(void *)&long long v65 = 0;
                BYTE8(v65) = 0;
                sub_10315BC((uint64_t)&v60, (uint64_t)&v64, v34, v35, (uint64_t)v71);
                BOOL v43 = v72 == v41;
                unint64_t v22 = v59;
                if (v43 && !v73)
                {
                  *(void *)&long long v60 = v59;
                  DWORD2(v60) = v45;
                  uint64_t v61 = v47;
                  char v62 = v49;
                  *(void *)&long long v64 = v59;
                  DWORD2(v64) = v46;
                  *(void *)&long long v65 = 0;
                  BYTE8(v65) = 0;
                  sub_10315BC((uint64_t)&v60, (uint64_t)&v64, v74, v76, (uint64_t)v67);
                  if (v68 == v46 && !v69 && v70 == v76)
                  {
                    long long v50 = *(_OWORD *)(v25 + 8);
                    long long v51 = *(_OWORD *)(v25 + 40);
                    long long v65 = *(_OWORD *)(v25 + 24);
                    long long v66 = v51;
                    long long v64 = v50;
                    int v63 = *(_DWORD *)(v25 + 56);
                    if (sub_EC97AC((uint64_t)&v64) && sub_EC97AC(v53) && sub_488C(&v63) && sub_488C(v52))
                    {
                      sub_EC9FB0((uint64_t)&v64, v53);
                      sub_ECA2C4(&v63, v52);
                      sub_1037A90((uint64_t)&v64, &v63, v87, v54, *(_DWORD *)(a1 + 8), v33, (uint64_t)&v75, (uint64_t)&v60);
                      sub_745A4(a1 + 16, &v87);
                      sub_102A7B0((uint64_t *)(a1 + 40), (uint64_t *)&v60);
                      ++*(_DWORD *)(a1 + 8);
                      sub_1026050(&v60);
                    }
                  }
                }
                long long v35 = v75;
                a5 = v56;
                a6 = v57;
                unsigned int v27 = v58;
                uint64_t v26 = v55;
              }
              if (v35)
              {
                unint64_t v76 = v35;
                operator delete(v35);
              }
            }
          }
        }
        v25 += 80;
      }
      while (v25 != v26);
    }
  }
  if (__p)
  {
    int v104 = __p;
    operator delete(__p);
  }
  if (v101)
  {
    uint64_t v102 = v101;
    operator delete(v101);
  }
  if (v99)
  {
    uint64_t v100 = v99;
    operator delete(v99);
  }
  if (v97)
  {
    uint64_t v98 = v97;
    operator delete(v97);
  }
  return sub_328138((uint64_t)v96);
}

void sub_102BB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  sub_ECFCF0(&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

void sub_102BC58(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (a2[7] - a2[6]) >> 2;
  uint64_t v38 = 0;
  BOOL v39 = 0;
  __n128 __p = 0;
  unsigned int v7 = v6 - 1;
  if (!v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = (unsigned int *)a1[2];
    unint64_t v11 = (int *)a1[3];
    if (v10 == (unsigned int *)v11) {
      goto LABEL_7;
    }
LABEL_5:
    uint64_t v12 = (int *)v10;
    do
    {
      int v13 = *v12++;
      ++v9[v13];
    }
    while (v12 != v11);
    goto LABEL_7;
  }
  size_t v8 = v7;
  uint64_t v9 = operator new(v8 * 4);
  __n128 __p = v9;
  BOOL v39 = (char *)&v9[v8];
  bzero(v9, v8 * 4);
  uint64_t v38 = (char *)&v9[v8];
  uint64_t v10 = (unsigned int *)a1[2];
  unint64_t v11 = (int *)a1[3];
  if (v10 != (unsigned int *)v11) {
    goto LABEL_5;
  }
LABEL_7:
  unint64_t v14 = 126 - 2 * __clz(((char *)v11 - (char *)v10) >> 2);
  unsigned int v15 = (uint64_t *)a1[5];
  BOOL v16 = (uint64_t *)a1[6];
  uint64_t v17 = (uint64_t)(a1 + 5);
  if (v11 == (int *)v10) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = v14;
  }
  sub_1031770(v10, v15, v11, v16, (uint64_t)&v40, v18, 1);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  long long v19 = operator new(4uLL);
  _DWORD *v19 = 0;
  *(void *)(a3 + 8) = v19 + 1;
  *(void *)(a3 + 16) = v19 + 1;
  *(void *)a3 = v19;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  long long v20 = operator new(4uLL);
  *(void *)(a3 + 48) = v20;
  *v20++ = 0;
  *(void *)(a3 + 56) = v20;
  *(void *)(a3 + 64) = v20;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  unint64_t v21 = (unint64_t)(((a2[7] - a2[6]) << 30) - 0x100000000) >> 32;
  if (v21)
  {
    uint64_t v22 = 0;
    unint64_t v23 = 0;
    do
    {
      uint64_t v25 = *(void *)(a3 + 48);
      uint64_t v26 = *(void *)(a3 + 56);
      uint64_t v27 = v26 - v25;
      if (((unint64_t)(v26 - v25) >> 2) - 1 <= v23)
      {
        unint64_t v28 = (v23 + 2);
        uint64_t v29 = *(void *)(a3 + 8);
        unint64_t v30 = (v29 - *(void *)a3) >> 2;
        if (v28 <= v30)
        {
          if (v28 < v30) {
            *(void *)(a3 + 8) = *(void *)a3 + 4 * v28;
          }
        }
        else
        {
          sub_500DC(a3, v28 - v30, (const float *)(v29 - 4));
          uint64_t v25 = *(void *)(a3 + 48);
          uint64_t v26 = *(void *)(a3 + 56);
          uint64_t v27 = v26 - v25;
        }
        unint64_t v31 = v27 >> 2;
        if (v28 <= v31)
        {
          if (v28 < v31) {
            *(void *)(a3 + 56) = v25 + 4 * v28;
          }
        }
        else
        {
          sub_500DC(a3 + 48, v28 - v31, (const float *)(v26 - 4));
        }
      }
      uint64_t v32 = sub_1037958(v23, a2);
      uint64_t v34 = v33;
      uint64_t v35 = *(void *)(a3 + 96);
      unint64_t v36 = (*(void *)(a3 + 104) - v35) >> 4;
      if (v36 <= v23)
      {
        LOWORD(v40) = 0;
        *((void *)&v40 + 1) = 0;
        sub_F169FC((char **)(a3 + 96), v23 - v36 + 1, &v40);
        uint64_t v35 = *(void *)(a3 + 96);
      }
      ++v23;
      unsigned int v24 = (uint64_t *)(v35 + v22);
      *unsigned int v24 = v32;
      v24[1] = v34;
      v22 += 16;
    }
    while (v21 != v23);
  }
  sub_102A818((void *)a3, (int **)&__p, v17);
  if (__p)
  {
    uint64_t v38 = (char *)__p;
    operator delete(__p);
  }
}

void sub_102BEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  sub_F2DA34(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_102BF28(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1642C8590B21642) {
    sub_2E00();
  }
  if (0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3);
  }
  if (0xD37A6F4DE9BD37A7 * ((a1[2] - *a1) >> 3) >= 0xB21642C8590B21) {
    unint64_t v6 = 0x1642C8590B21642;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1642C8590B21642) {
      sub_188D718();
    }
    unsigned int v7 = (char *)operator new(184 * v6);
  }
  else
  {
    unsigned int v7 = 0;
  }
  uint64_t v24 = (uint64_t)&v7[184 * v3];
  uint64_t v25 = &v7[184 * v6];
  sub_102843C(v24, a2);
  uint64_t v8 = v24;
  uint64_t v9 = v24 + 184;
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  if (v11 == *a1)
  {
    *a1 = v24;
    a1[1] = v9;
    a1[2] = (uint64_t)v25;
  }
  else
  {
    do
    {
      uint64_t v12 = *(void *)(v11 - 184);
      v11 -= 184;
      int v13 = *(_DWORD *)(v11 + 8);
      *(void *)(v8 - 184) = v12;
      v8 -= 184;
      *(_DWORD *)(v8 + 8) = v13;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0;
      *(void *)(v8 + 16) = 0;
      *(_OWORD *)(v8 + 16) = *(_OWORD *)(v11 + 16);
      *(void *)(v8 + 32) = *(void *)(v11 + 32);
      *(void *)(v11 + 16) = 0;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0;
      long long v14 = *(_OWORD *)(v11 + 40);
      long long v15 = *(_OWORD *)(v11 + 56);
      uint64_t v16 = *(void *)(v11 + 88);
      *(_OWORD *)(v8 + 72) = *(_OWORD *)(v11 + 72);
      *(_OWORD *)(v8 + 56) = v15;
      *(_OWORD *)(v8 + 40) = v14;
      *(void *)(v8 + 88) = v16;
      *(void *)(v8 + 96) = 0;
      *(void *)(v8 + 104) = 0;
      *(void *)(v8 + 112) = 0;
      *(_OWORD *)(v8 + 96) = *(_OWORD *)(v11 + 96);
      *(void *)(v8 + 112) = *(void *)(v11 + 112);
      *(void *)(v11 + 96) = 0;
      *(void *)(v11 + 104) = 0;
      *(void *)(v11 + 112) = 0;
      long long v17 = *(_OWORD *)(v11 + 120);
      long long v18 = *(_OWORD *)(v11 + 136);
      long long v19 = *(_OWORD *)(v11 + 152);
      *(_OWORD *)(v8 + 168) = *(_OWORD *)(v11 + 168);
      *(_OWORD *)(v8 + 152) = v19;
      *(_OWORD *)(v8 + 136) = v18;
      *(_OWORD *)(v8 + 120) = v17;
    }
    while (v11 != v10);
    uint64_t v20 = *a1;
    uint64_t v11 = a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v25;
    if (v11 != v20)
    {
      do
      {
        unint64_t v21 = *(void **)(v11 - 88);
        if (v21)
        {
          *(void *)(v11 - 80) = v21;
          operator delete(v21);
        }
        uint64_t v22 = *(void **)(v11 - 168);
        if (v22)
        {
          *(void *)(v11 - 160) = v22;
          operator delete(v22);
        }
        v11 -= 184;
      }
      while (v11 != v20);
      uint64_t v11 = v20;
    }
  }
  if (v11) {
    operator delete((void *)v11);
  }
  return v24 + 184;
}

void sub_102C144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1028194((uint64_t)va);
  _Unwind_Resume(a1);
}

long long *sub_102C158(char **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 168;
  uint64_t v8 = (long long *)&(*a1)[168 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    unint64_t v29 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v5 - (void)v6) >> 3) + 1;
    if (v29 > 0x186186186186186) {
      sub_2E00();
    }
    unint64_t v30 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v9 - (void)v6) >> 3);
    if (2 * v30 > v29) {
      unint64_t v29 = 2 * v30;
    }
    if (v30 >= 0xC30C30C30C30C3) {
      unint64_t v31 = 0x186186186186186;
    }
    else {
      unint64_t v31 = v29;
    }
    long long v64 = a1 + 2;
    if (v31)
    {
      if (v31 > 0x186186186186186) {
        sub_188D718();
      }
      uint64_t v32 = (char *)operator new(168 * v31);
    }
    else
    {
      uint64_t v32 = 0;
    }
    long long v60 = v32;
    uint64_t v61 = &v32[168 * v7];
    __dst = v61;
    int v63 = &v32[168 * v31];
    sub_102C510((uint64_t)&v60, (long long *)a3);
    int v41 = v61;
    uint64_t v42 = (long long *)*a1;
    BOOL v43 = v61;
    if (*a1 != (char *)v8)
    {
      char v44 = v8;
      int v45 = v61;
      do
      {
        long long v46 = *(long long *)((char *)v44 - 168);
        long long v47 = *(long long *)((char *)v44 - 152);
        *(_OWORD *)(v45 - 136) = *(long long *)((char *)v44 - 136);
        *(_OWORD *)(v45 - 152) = v47;
        *(_OWORD *)(v45 - 168) = v46;
        long long v48 = *(long long *)((char *)v44 - 120);
        long long v49 = *(long long *)((char *)v44 - 104);
        long long v50 = *(long long *)((char *)v44 - 88);
        *(_OWORD *)(v45 - 72) = *(long long *)((char *)v44 - 72);
        *(_OWORD *)(v45 - 88) = v50;
        *(_OWORD *)(v45 - 104) = v49;
        *(_OWORD *)(v45 - 120) = v48;
        long long v51 = *(long long *)((char *)v44 - 56);
        long long v52 = *(long long *)((char *)v44 - 40);
        long long v53 = *(long long *)((char *)v44 - 24);
        BOOL v43 = v45 - 168;
        *((void *)v45 - 1) = *((void *)v44 - 1);
        *(_OWORD *)(v45 - 24) = v53;
        *(_OWORD *)(v45 - 40) = v52;
        *(_OWORD *)(v45 - 56) = v51;
        char v44 = (long long *)((char *)v44 - 168);
        v45 -= 168;
      }
      while (v44 != v42);
    }
    uint64_t v61 = v43;
    int v54 = (long long *)a1[1];
    uint64_t v55 = (char *)__dst;
    int64_t v56 = (char *)v54 - (char *)v8;
    if (v54 != v8)
    {
      memmove(__dst, v8, (char *)v54 - (char *)v8);
      BOOL v43 = v61;
      uint64_t v8 = (long long *)a1[1];
    }
    uint64_t v57 = (long long *)*a1;
    *a1 = v43;
    a1[1] = &v55[v56];
    unsigned int v58 = a1[2];
    a1[2] = v63;
    __dst = v8;
    int v63 = v58;
    long long v60 = (char *)v57;
    uint64_t v61 = (char *)v57;
    if (v8 != v57) {
      __dst = (char *)v57 + ((char *)v8 - (char *)v57 - 168) % 0xA8uLL;
    }
    if (v57) {
      operator delete(v57);
    }
    return (long long *)v41;
  }
  else if (v8 == (long long *)v5)
  {
    long long v33 = *(_OWORD *)a3;
    long long v34 = *(_OWORD *)(a3 + 32);
    v8[1] = *(_OWORD *)(a3 + 16);
    v8[2] = v34;
    *uint64_t v8 = v33;
    long long v35 = *(_OWORD *)(a3 + 48);
    long long v36 = *(_OWORD *)(a3 + 64);
    long long v37 = *(_OWORD *)(a3 + 96);
    v8[5] = *(_OWORD *)(a3 + 80);
    v8[6] = v37;
    v8[3] = v35;
    v8[4] = v36;
    long long v38 = *(_OWORD *)(a3 + 112);
    long long v39 = *(_OWORD *)(a3 + 128);
    long long v40 = *(_OWORD *)(a3 + 144);
    *((void *)v8 + 20) = *(void *)(a3 + 160);
    v8[8] = v39;
    v8[9] = v40;
    v8[7] = v38;
    a1[1] = (char *)v8 + 168;
  }
  else
  {
    uint64_t v10 = (char *)v8 + 168;
    unint64_t v11 = v5 - 168;
    uint64_t v12 = a1[1];
    if (v5 >= 0xA8)
    {
      do
      {
        long long v13 = *(_OWORD *)v11;
        long long v14 = *(_OWORD *)(v11 + 32);
        *((_OWORD *)v12 + 1) = *(_OWORD *)(v11 + 16);
        *((_OWORD *)v12 + 2) = v14;
        *(_OWORD *)uint64_t v12 = v13;
        long long v15 = *(_OWORD *)(v11 + 48);
        long long v16 = *(_OWORD *)(v11 + 64);
        long long v17 = *(_OWORD *)(v11 + 96);
        *((_OWORD *)v12 + 5) = *(_OWORD *)(v11 + 80);
        *((_OWORD *)v12 + 6) = v17;
        *((_OWORD *)v12 + 3) = v15;
        *((_OWORD *)v12 + 4) = v16;
        long long v18 = *(_OWORD *)(v11 + 112);
        long long v19 = *(_OWORD *)(v11 + 128);
        long long v20 = *(_OWORD *)(v11 + 144);
        *((void *)v12 + 20) = *(void *)(v11 + 160);
        *((_OWORD *)v12 + 8) = v19;
        *((_OWORD *)v12 + 9) = v20;
        *((_OWORD *)v12 + 7) = v18;
        v11 += 168;
        v12 += 168;
      }
      while (v11 < v5);
    }
    a1[1] = v12;
    if ((char *)v5 != v10) {
      memmove((char *)v8 + 168, v8, v5 - (void)v10);
    }
    long long v21 = *(_OWORD *)a3;
    long long v22 = *(_OWORD *)(a3 + 32);
    v8[1] = *(_OWORD *)(a3 + 16);
    v8[2] = v22;
    *uint64_t v8 = v21;
    long long v23 = *(_OWORD *)(a3 + 48);
    long long v24 = *(_OWORD *)(a3 + 64);
    long long v25 = *(_OWORD *)(a3 + 96);
    v8[5] = *(_OWORD *)(a3 + 80);
    v8[6] = v25;
    v8[3] = v23;
    v8[4] = v24;
    long long v26 = *(_OWORD *)(a3 + 112);
    long long v27 = *(_OWORD *)(a3 + 128);
    long long v28 = *(_OWORD *)(a3 + 144);
    *((void *)v8 + 20) = *(void *)(a3 + 160);
    v8[8] = v27;
    v8[9] = v28;
    v8[7] = v26;
  }
  return v8;
}

void sub_102C4AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    long long v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

__n128 sub_102C510(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    unint64_t v6 = *(char **)a1;
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 <= *(void *)a1)
    {
      unint64_t v15 = 0x9E79E79E79E79E7ALL * ((v4 - v6) >> 3);
      if (v4 == v6) {
        unint64_t v15 = 1;
      }
      if (v15 >= 0x186186186186187) {
        sub_188D718();
      }
      unint64_t v16 = v15 >> 2;
      uint64_t v17 = 168 * v15;
      long long v18 = (char *)operator new(168 * v15);
      long long v19 = &v18[168 * v16];
      uint64_t v21 = (uint64_t)&v4[-v5];
      BOOL v20 = v4 == (char *)v5;
      unint64_t v4 = v19;
      if (!v20)
      {
        unint64_t v4 = &v19[168 * (v21 / 168)];
        uint64_t v22 = 168 * (v21 / 168);
        long long v23 = &v18[168 * v16];
        do
        {
          long long v24 = *(_OWORD *)v5;
          long long v25 = *(_OWORD *)(v5 + 32);
          *((_OWORD *)v23 + 1) = *(_OWORD *)(v5 + 16);
          *((_OWORD *)v23 + 2) = v25;
          *(_OWORD *)long long v23 = v24;
          long long v26 = *(_OWORD *)(v5 + 48);
          long long v27 = *(_OWORD *)(v5 + 64);
          long long v28 = *(_OWORD *)(v5 + 96);
          *((_OWORD *)v23 + 5) = *(_OWORD *)(v5 + 80);
          *((_OWORD *)v23 + 6) = v28;
          *((_OWORD *)v23 + 3) = v26;
          *((_OWORD *)v23 + 4) = v27;
          long long v29 = *(_OWORD *)(v5 + 112);
          long long v30 = *(_OWORD *)(v5 + 128);
          long long v31 = *(_OWORD *)(v5 + 144);
          *((void *)v23 + 20) = *(void *)(v5 + 160);
          *((_OWORD *)v23 + 8) = v30;
          *((_OWORD *)v23 + 9) = v31;
          *((_OWORD *)v23 + 7) = v29;
          v23 += 168;
          v5 += 168;
          v22 -= 168;
        }
        while (v22);
      }
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v19;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v18[v17];
      if (v6)
      {
        operator delete(v6);
        unint64_t v4 = *(char **)(a1 + 16);
      }
    }
    else
    {
      int64_t v7 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v5 - *(void *)a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      uint64_t v11 = -168 * v9;
      unint64_t v12 = v5 + v11;
      long long v13 = &v4[-v5];
      if (v4 != (char *)v5)
      {
        memmove((void *)(v5 + v11), *(const void **)(a1 + 8), (size_t)&v4[-v5]);
        unint64_t v4 = *(char **)(a1 + 8);
      }
      long long v14 = &v4[168 * v10];
      unint64_t v4 = &v13[v12];
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = &v13[v12];
    }
  }
  long long v32 = *a2;
  long long v33 = a2[2];
  *((_OWORD *)v4 + 1) = a2[1];
  *((_OWORD *)v4 + 2) = v33;
  *(_OWORD *)unint64_t v4 = v32;
  long long v34 = a2[3];
  long long v35 = a2[4];
  long long v36 = a2[6];
  *((_OWORD *)v4 + 5) = a2[5];
  *((_OWORD *)v4 + 6) = v36;
  *((_OWORD *)v4 + 3) = v34;
  *((_OWORD *)v4 + 4) = v35;
  __n128 result = (__n128)a2[7];
  long long v38 = a2[8];
  long long v39 = a2[9];
  *((void *)v4 + 20) = *((void *)a2 + 20);
  *((_OWORD *)v4 + 8) = v38;
  *((_OWORD *)v4 + 9) = v39;
  *((__n128 *)v4 + 7) = result;
  *(void *)(a1 + 16) += 168;
  return result;
}

void *sub_102C704(void *a1, unsigned int a2)
{
  uint64_t v4 = a2;
  v13[0] = a2;
  v13[1] = (unint64_t)&v12;
  v13[2] = (unint64_t)&v11;
  v13[3] = (unint64_t)&v10;
  unint64_t v5 = sub_ED2164(a1, v13);
  *((_DWORD *)v5 + 218) = 0;
  *(_OWORD *)(v5 + 105) = 0u;
  *(_OWORD *)(v5 + 107) = 0u;
  *(_OWORD *)(v5 + 103) = 0u;
  *((_OWORD *)v5 + 48) = 0u;
  *((_OWORD *)v5 + 49) = 0u;
  *((_OWORD *)v5 + 50) = 0u;
  *((_DWORD *)v5 + 204) = 0;
  if (a2)
  {
    unint64_t v6 = (char *)operator new(4 * v4);
    a1[106] = v6;
    a1[107] = v6;
    a1[108] = &v6[4 * v4];
  }
  int64_t v7 = (char *)operator new(0x3F8uLL);
  a1[103] = v7;
  a1[104] = v7;
  a1[105] = v7 + 1016;
  if (a2)
  {
    uint64_t v8 = (char *)operator new(8 * v4);
    a1[96] = v8;
    a1[97] = v8;
    a1[98] = &v8[8 * v4];
  }
  return a1;
}

void sub_102C7E0(_Unwind_Exception *a1)
{
  sub_3310C(v2);
  uint64_t v4 = (void **)(v1 + 96);
  unint64_t v5 = (void *)v1[99];
  if (v5)
  {
    v1[100] = v5;
    operator delete(v5);
    unint64_t v6 = *v4;
    if (!*v4)
    {
LABEL_3:
      sub_328138((uint64_t)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    unint64_t v6 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[97] = v6;
  operator delete(v6);
  sub_328138((uint64_t)v1);
  _Unwind_Resume(a1);
}

void *sub_102C868(void *a1, unsigned int a2)
{
  uint64_t v4 = a2;
  v13[0] = a2;
  v13[1] = (unint64_t)&v12;
  v13[2] = (unint64_t)&v11;
  v13[3] = (unint64_t)&v10;
  unint64_t v5 = sub_ED2164(a1, v13);
  *((_DWORD *)v5 + 218) = 0;
  *(_OWORD *)(v5 + 105) = 0u;
  *(_OWORD *)(v5 + 107) = 0u;
  *(_OWORD *)(v5 + 103) = 0u;
  *((_OWORD *)v5 + 48) = 0u;
  *((_OWORD *)v5 + 49) = 0u;
  *((_OWORD *)v5 + 50) = 0u;
  *((_DWORD *)v5 + 204) = 0;
  if (a2)
  {
    unint64_t v6 = (char *)operator new(4 * v4);
    a1[106] = v6;
    a1[107] = v6;
    a1[108] = &v6[4 * v4];
  }
  int64_t v7 = (char *)operator new(0x7F0uLL);
  a1[103] = v7;
  a1[104] = v7;
  a1[105] = v7 + 2032;
  if (a2)
  {
    uint64_t v8 = (char *)operator new(32 * v4);
    a1[96] = v8;
    a1[97] = v8;
    a1[98] = &v8[32 * v4];
  }
  return a1;
}

void sub_102C944(_Unwind_Exception *a1)
{
  sub_3310C(v2);
  uint64_t v4 = (void **)(v1 + 96);
  unint64_t v5 = (void *)v1[99];
  if (v5)
  {
    v1[100] = v5;
    operator delete(v5);
    unint64_t v6 = *v4;
    if (!*v4)
    {
LABEL_3:
      sub_328138((uint64_t)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    unint64_t v6 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[97] = v6;
  operator delete(v6);
  sub_328138((uint64_t)v1);
  _Unwind_Resume(a1);
}

void sub_102C9CC(uint64_t a1, unsigned int **a2, _DWORD *a3, uint64_t a4, uint64_t a5, long long *a6)
{
  uint64_t v9 = 0;
  uint64_t v10 = a1 + 8;
  *(void *)(a1 + 864) = *(void *)(a1 + 856);
  *(void *)(a1 + 840) = *(void *)(a1 + 832);
  *(_DWORD *)(a1 + 880) = 0;
  *(void *)(a1 + 784) = *(void *)(a1 + 776);
  do
  {
    uint64_t v12 = a1 + v9;
    if (*(void *)(a1 + v9 + 24))
    {
      unint64_t v13 = *(void *)(v12 + 32);
      if (v13 >= 0x80)
      {
        char v11 = (void *)(a1 + v9);
        operator delete(*(void **)(v12 + 8));
        *(void *)(v12 + 8) = &unk_20E1710;
        v11[6] = 0;
        v11[3] = 0;
        v11[4] = 0;
        unint64_t v11[2] = 0;
      }
      else if (v13)
      {
        *(void *)(v12 + 24) = 0;
        memset(*(void **)(v12 + 8), 128, v13 + 8);
        *(unsigned char *)(*(void *)(v12 + 8) + v13) = -1;
        unint64_t v14 = *(void *)(v12 + 32);
        if (v14 == 7) {
          uint64_t v15 = 6;
        }
        else {
          uint64_t v15 = v14 - (v14 >> 3);
        }
        *(void *)(a1 + v9 + 48) = v15 - *(void *)(v12 + 24);
      }
    }
    v9 += 48;
  }
  while (v9 != 768);
  *(void *)(a1 + 808) = *(void *)(a1 + 800);
  *(_DWORD *)(a1 + 824) = 0;
  unint64_t v16 = *a2;
  uint64_t v17 = a2[1];
  if (*a2 != v17)
  {
    do
    {
      unsigned int v18 = *v16++;
      long long v20 = *a6;
      uint64_t v21 = *((void *)a6 + 2);
      unsigned int v22 = v18;
      sub_102CC54(v10, &v22, (uint64_t)&v20);
    }
    while (v16 != v17);
  }
  sub_102CB34(a1, a3);
}

void sub_102CB34(uint64_t a1, _DWORD *a2)
{
  if (*(_DWORD *)(a1 + 880))
  {
    uint64_t v4 = a1 + 8;
    do
    {
      unint64_t v5 = (unsigned int *)(*(void *)(a1 + 776) + 32 * **(unsigned int **)(a1 + 832));
      uint64_t v6 = *v5;
      uint64_t v7 = *((void *)v5 + 1);
      sub_51325C(v4);
      if (*a2 == v6) {
        break;
      }
      uint64_t v8 = *(void **)a1;
      sub_1007480(*(void *)a1, v6);
      uint64_t v9 = *(unsigned int *)(v8[12] + 4 * v6);
      sub_1007480((uint64_t)v8, v6);
      while (v9 != -1)
      {
        uint64_t v10 = (unsigned int *)(v8[15] + 152 * v9);
        if (sub_1002444((uint64_t)v10) != 0x7FFFFFFFFFFFFFFFLL)
        {
          unsigned int v14 = sub_4F44(v10);
          uint64_t v11 = sub_1002444((uint64_t)v10) + v7;
          int v12 = v6;
          unint64_t v13 = v10;
          sub_102CECC(v4, &v14, (uint64_t)&v11);
        }
        uint64_t v9 = *(unsigned int *)(v8[18] + 4 * v9);
      }
    }
    while (*(_DWORD *)(a1 + 880));
  }
}

void sub_102CC54(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  ++*(_DWORD *)(a1 + 816);
  uint64_t v7 = *a2;
  unint64_t v8 = 265 * ((~v7 + (v7 << 21)) ^ ((unint64_t)(~v7 + (v7 << 21)) >> 24));
  unint64_t v9 = 2147483649u * ((21 * (v8 ^ (v8 >> 14))) ^ ((21 * (v8 ^ (v8 >> 14))) >> 28));
  uint64_t v10 = (void *)(a1 + 48 * (((BYTE1(v9) ^ BYTE2(v9)) ^ BYTE3(v9)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  uint64_t v13 = 0x101010101010101 * (v9 & 0x7F);
  while (1)
  {
    unint64_t v14 = v11 & v12;
    uint64_t v15 = *(void *)(*v10 + v14);
    unint64_t v16 = ((v15 ^ v13) - 0x101010101010101) & ~(v15 ^ v13) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_6:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v6 += 8;
    unint64_t v11 = v6 + v14;
  }
  uint64_t v17 = v10[1];
  while (1)
  {
    unint64_t v18 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v12;
    if (*(_DWORD *)(v17 + 8 * v18) == v7) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_6;
    }
  }
  if (v12 == v18)
  {
LABEL_9:
    unint64_t v19 = *(void *)(a1 + 776) - *(void *)(a1 + 768);
    sub_ED2D48(a1, a2, (uint64_t)&v31);
    uint64_t v20 = v32;
    uint64_t v21 = *(void *)(v31 + 8);
    if (v33) {
      *(_DWORD *)(v21 + 8 * v32) = *a2;
    }
    *(_DWORD *)(v21 + 8 * v20 + 4) = v19 >> 5;
    sub_F161F4((char **)(a1 + 768), a2, (long long *)a3);
    unsigned int v22 = (uint64_t *)(a1 + 824);
    unint64_t v23 = (v19 >> 5);
    uint64_t v24 = *(void *)(a1 + 848);
    if (v23 >= (*(void *)(a1 + 856) - v24) >> 2 || *(_DWORD *)(v24 + 4 * v23) == -1) {
      sub_521F5C((uint64_t)v22, v19 >> 5, (unint64_t *)a3);
    }
    else {
      sub_5221BC(v22, v19 >> 5, (void *)a3);
    }
    return;
  }
  uint64_t v25 = v17 + 8 * v18;
  uint64_t v26 = *(void *)(a1 + 768) + 32 * *(unsigned int *)(v25 + 4);
  long long v27 = *(_OWORD *)a3;
  *(void *)(v26 + 24) = *(void *)(a3 + 16);
  *(_OWORD *)(v26 + 8) = v27;
  long long v28 = (uint64_t *)(a1 + 824);
  unint64_t v29 = *(unsigned int *)(v25 + 4);
  uint64_t v30 = *(void *)(a1 + 848);
  if (v29 >= (*(void *)(a1 + 856) - v30) >> 2 || *(_DWORD *)(v30 + 4 * v29) == -1)
  {
    sub_521F5C((uint64_t)v28, v29, (unint64_t *)a3);
  }
  else
  {
    sub_5221BC(v28, v29, (void *)a3);
  }
}

uint64_t sub_102CECC(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = *a2;
  unint64_t v8 = 265 * ((~v7 + (v7 << 21)) ^ ((unint64_t)(~v7 + (v7 << 21)) >> 24));
  unint64_t v9 = 2147483649u * ((21 * (v8 ^ (v8 >> 14))) ^ ((21 * (v8 ^ (v8 >> 14))) >> 28));
  uint64_t v10 = (void *)(a1 + 48 * (((BYTE1(v9) ^ BYTE2(v9)) ^ BYTE3(v9)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  uint64_t v13 = 0x101010101010101 * (v9 & 0x7F);
  while (1)
  {
    unint64_t v14 = v11 & v12;
    uint64_t v15 = *(void *)(*v10 + v14);
    unint64_t v16 = ((v15 ^ v13) - 0x101010101010101) & ~(v15 ^ v13) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_6:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v6 += 8;
    unint64_t v11 = v6 + v14;
  }
  uint64_t v17 = v10[1];
  while (1)
  {
    unint64_t v18 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v12;
    if (*(_DWORD *)(v17 + 8 * v18) == v7) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_6;
    }
  }
  if (v12 == v18)
  {
LABEL_9:
    ++*(_DWORD *)(a1 + 816);
    unint64_t v19 = *(void *)(a1 + 776) - *(void *)(a1 + 768);
    sub_ED2D48(a1, a2, (uint64_t)&v35);
    uint64_t v20 = v36;
    uint64_t v21 = *(void *)(v35 + 8);
    if (v37) {
      *(_DWORD *)(v21 + 8 * v36) = *a2;
    }
    *(_DWORD *)(v21 + 8 * v20 + 4) = v19 >> 5;
    sub_F161F4((char **)(a1 + 768), a2, (long long *)a3);
    unsigned int v22 = (uint64_t *)(a1 + 824);
    unint64_t v23 = (v19 >> 5);
    uint64_t v24 = *(void *)(a1 + 848);
    if (v23 < (*(void *)(a1 + 856) - v24) >> 2 && *(_DWORD *)(v24 + 4 * v23) != -1)
    {
      unint64_t v25 = v19 >> 5;
LABEL_14:
      sub_5221BC(v22, v25, (void *)a3);
      return 1;
    }
    unint64_t v25 = v19 >> 5;
LABEL_16:
    sub_521F5C((uint64_t)v22, v25, (unint64_t *)a3);
    return 1;
  }
  uint64_t v27 = v17 + 8 * v18;
  unsigned int v29 = *(_DWORD *)(v27 + 4);
  long long v28 = (unsigned int *)(v27 + 4);
  uint64_t v30 = *(void *)(a1 + 768) + 32 * v29;
  uint64_t v32 = *(void *)(v30 + 8);
  uint64_t v31 = v30 + 8;
  if (*(void *)a3 < v32)
  {
    ++*(_DWORD *)(a1 + 816);
    long long v33 = *(_OWORD *)a3;
    *(void *)(v31 + 16) = *(void *)(a3 + 16);
    *(_OWORD *)uint64_t v31 = v33;
    unsigned int v22 = (uint64_t *)(a1 + 824);
    unint64_t v25 = *v28;
    uint64_t v34 = *(void *)(a1 + 848);
    if (v25 < (*(void *)(a1 + 856) - v34) >> 2 && *(_DWORD *)(v34 + 4 * v25) != -1) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  return 0;
}

__n128 sub_102D11C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  while (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8))
  {
    if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24) || a3 == a4) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v12 = *(unsigned int **)(a1 + 16);
    uint64_t v13 = *a3;
    unint64_t v14 = *(void *)(*a3 + 32);
    if (__PAIR64__(*((unsigned __int16 *)v12 + 22), v12[10]) != __PAIR64__(WORD2(v14), v14)) {
      goto LABEL_25;
    }
    if ((HIWORD(v14) & 1) == (*((unsigned char *)v12 + 46) == 0)) {
      goto LABEL_25;
    }
    unint64_t v15 = *(void *)(v13 + 72);
    if (__PAIR64__(*((unsigned __int16 *)v12 + 42), v12[20]) != __PAIR64__(WORD2(v15), v15)) {
      goto LABEL_25;
    }
    if ((HIWORD(v15) & 1) == (*((unsigned char *)v12 + 86) == 0)) {
      goto LABEL_25;
    }
    unsigned int v16 = v12[22];
    if ((unsigned __int16)*(_DWORD *)(v13 + 80) != (unsigned __int16)v16
      || (*(_DWORD *)(v13 + 80) ^ v16) >> 16
      || ((*(unsigned char *)(v13 + 88) ^ *((unsigned char *)v12 + 96)) & 3) != 0
      || ((*(_WORD *)(v13 + 84) ^ *((_WORD *)v12 + 46)) & 0x7FFF) != 0
      || ((*(unsigned char *)(v13 + 88) ^ *((unsigned char *)v12 + 96)) & 0x1C) != 0
      || *(unsigned __int16 *)(v13 + 86) != *((unsigned __int16 *)v12 + 47))
    {
      goto LABEL_25;
    }
    uint64_t v17 = *v12;
    *(_DWORD *)(a1 + 8) = v17;
    *(unsigned char *)(a1 + 24) = 0;
    uint64_t v18 = *(void *)a1;
    if (*(_DWORD *)(*(void *)(*(void *)a1 + 168) + 4 * v17) == 1)
    {
      sub_EC06EC(*(void *)a1, v17);
      uint64_t v10 = *(void *)(v18 + 120) + 104 * *(unsigned int *)(*(void *)(v18 + 96) + 4 * v17);
    }
    else
    {
      uint64_t v10 = 0;
    }
    *(void *)(a1 + 16) = v10;
    ++a3;
  }
  if (a3 != a4) {
    goto LABEL_12;
  }
  a3 = a4;
LABEL_25:
  __n128 result = *(__n128 *)a1;
  long long v20 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a5 = *(_OWORD *)a1;
  *(_OWORD *)(a5 + 16) = v20;
  *(void *)(a5 + 32) = a3;
  return result;
}

void sub_102D2D0(unsigned int *a1, uint64_t *a2, int *a3, uint64_t *a4, uint64_t a5, uint64_t a6, int a7)
{
  while (1)
  {
    uint64_t v15 = (char *)a3 - (char *)a1;
    unint64_t v16 = ((char *)a3 - (char *)a1) >> 2;
    if (!(!v8 & v7))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          goto LABEL_45;
        case 3uLL:
          goto LABEL_55;
        case 4uLL:
          goto LABEL_56;
        case 5uLL:
          goto LABEL_57;
        default:
          JUMPOUT(0);
      }
    }
    if (v15 < 96) {
      goto LABEL_61;
    }
    if (!a6) {
      goto LABEL_58;
    }
    uint64_t v60 = a6;
    unint64_t v17 = v16 >> 1;
    uint64_t v18 = &a2[23 * (v16 >> 1)];
    unint64_t v19 = (unsigned int *)(a3 - 1);
    long long v20 = a4 - 23;
    int v62 = a7;
    uint64_t v59 = a4 - 23;
    if ((unint64_t)v15 > 0x200)
    {
      uint64_t v56 = v17;
      uint64_t v21 = &a1[v17];
      sub_102E608(a1, a2, v21, &a2[23 * (v16 >> 1)], (unsigned int *)a3 - 1, v20);
      uint64_t v57 = a2;
      unsigned int v22 = a2 + 23;
      uint64_t v23 = 23 * v17;
      uint64_t v24 = &a2[v23 - 23];
      sub_102E608(a1 + 1, v22, v21 - 1, v24, (unsigned int *)a3 - 2, a4 - 46);
      unint64_t v25 = &v22[v23];
      sub_102E608(a1 + 2, v57 + 46, &a1[v56 + 1], v25, (unsigned int *)a3 - 3, a4 - 69);
      uint64_t v26 = v24;
      uint64_t v27 = v25;
      a2 = v57;
      unint64_t v19 = (unsigned int *)(a3 - 1);
      sub_102E608(v21 - 1, v26, v21, v18, &a1[v56 + 1], v27);
      unsigned int v28 = *a1;
      *a1 = *v21;
      *uint64_t v21 = v28;
      sub_102FD18(v57, v18);
      a6 = v60 - 1;
      if (a7) {
        goto LABEL_19;
      }
    }
    else
    {
      sub_102E608(&a1[v17], &a2[23 * (v16 >> 1)], a1, a2, (unsigned int *)a3 - 1, v20);
      a6 = v60 - 1;
      if (a7) {
        goto LABEL_19;
      }
    }
    LODWORD(v73) = *(a1 - 1);
    sub_102843C((uint64_t)&v74, a2 - 23);
    unsigned int v65 = *a1;
    sub_102843C((uint64_t)v68, a2);
    unsigned int v29 = v73;
    if (__p)
    {
      int v72 = __p;
      operator delete(__p);
    }
    if (v69)
    {
      unsigned int v70 = v69;
      operator delete(v69);
    }
    if (v78)
    {
      uint64_t v79 = v78;
      operator delete(v78);
    }
    if (v76)
    {
      uint64_t v77 = v76;
      operator delete(v76);
    }
    if (v29 >= v65) {
      break;
    }
LABEL_19:
    sub_102F0D8(a1, a2, a3, a4, (uint64_t)&v73);
    uint64_t v31 = v73;
    uint64_t v30 = v74;
    if (!v75) {
      goto LABEL_41;
    }
    BOOL v32 = sub_102F798(a1, a2, v73, v74);
    if (sub_102F798(v31 + 1, (uint64_t *)(v30 + 184), (unsigned int *)a3, (uint64_t)a4))
    {
      if (v32) {
        return;
      }
      a3 = (int *)v31;
      a4 = (uint64_t *)v30;
      a7 = v62;
    }
    else if (v32)
    {
      a1 = v31 + 1;
      a2 = (uint64_t *)(v30 + 184);
      a7 = v62;
    }
    else
    {
LABEL_41:
      sub_102D2D0(a1, a2, v31, v30, a5, a6, v62 & 1);
      a7 = 0;
      a1 = v31 + 1;
      a2 = (uint64_t *)(v30 + 184);
    }
  }
  a1 = (unsigned int *)sub_102E9E8(a1, a2, a3, a4);
  a2 = v33;
  uint64_t v55 = a4 - 46;
  long long v53 = a4 - 69;
  uint64_t v34 = 2 - v60;
  int v54 = a4;
  unsigned int v58 = v19;
  uint64_t v35 = (char *)a3 - (char *)a1;
  unint64_t v36 = ((char *)a3 - (char *)a1) >> 2;
  if (v36 <= 5) {
    goto LABEL_44;
  }
  while (2)
  {
    if (v35 <= 95)
    {
      LOBYTE(a7) = 0;
LABEL_61:
      if (a7) {
        sub_102DAC8(a1, a2, (unsigned int *)a3);
      }
      else {
        sub_102E0A4(a1, (uint64_t)a2, (unsigned int *)a3);
      }
      return;
    }
    if (v34 != 1)
    {
      unint64_t v37 = v36 >> 1;
      long long v38 = &a2[23 * (v36 >> 1)];
      long long v39 = &a1[v36 >> 1];
      if ((unint64_t)v35 < 0x201)
      {
        sub_102E608(&a1[v36 >> 1], v38, a1, a2, v19, v59);
      }
      else
      {
        sub_102E608(a1, a2, &a1[v36 >> 1], v38, v19, v59);
        uint64_t v40 = v37;
        uint64_t v61 = &a1[v37];
        uint64_t v63 = v34;
        uint64_t v41 = a5;
        uint64_t v42 = 23 * v37;
        BOOL v43 = &a2[23 * v37 - 23];
        sub_102E608(a1 + 1, a2 + 23, v61 - 1, v43, (unsigned int *)a3 - 2, v55);
        char v44 = &a1[v40 + 1];
        a4 = v54;
        int v45 = &a2[v42 + 23];
        a5 = v41;
        uint64_t v34 = v63;
        sub_102E608(a1 + 2, a2 + 46, v44, v45, (unsigned int *)a3 - 3, v53);
        long long v46 = v45;
        unint64_t v19 = v58;
        sub_102E608(v61 - 1, v43, v39, v38, v44, v46);
        unsigned int v47 = *a1;
        *a1 = *v61;
        *uint64_t v61 = v47;
        sub_102FD18(a2, v38);
      }
      LODWORD(v73) = *(a1 - 1);
      sub_102843C((uint64_t)&v74, a2 - 23);
      unsigned int v66 = *a1;
      sub_102843C((uint64_t)v68, a2);
      unsigned int v48 = v73;
      if (__p)
      {
        int v72 = __p;
        operator delete(__p);
      }
      if (v69)
      {
        unsigned int v70 = v69;
        operator delete(v69);
      }
      if (v78)
      {
        uint64_t v79 = v78;
        operator delete(v78);
      }
      if (v76)
      {
        uint64_t v77 = v76;
        operator delete(v76);
      }
      if (v48 >= v66)
      {
        a1 = (unsigned int *)sub_102E9E8(a1, a2, a3, a4);
        a2 = v49;
        ++v34;
        uint64_t v35 = (char *)a3 - (char *)a1;
        unint64_t v36 = ((char *)a3 - (char *)a1) >> 2;
LABEL_44:
        switch(v36)
        {
          case 0uLL:
          case 1uLL:
            return;
          case 2uLL:
LABEL_45:
            long long v50 = a4 - 23;
            LODWORD(v73) = *(a3 - 1);
            sub_102843C((uint64_t)&v74, v50);
            unsigned int v67 = *a1;
            sub_102843C((uint64_t)v68, a2);
            unsigned int v51 = v73;
            if (__p)
            {
              int v72 = __p;
              operator delete(__p);
            }
            if (v69)
            {
              unsigned int v70 = v69;
              operator delete(v69);
            }
            if (v78)
            {
              uint64_t v79 = v78;
              operator delete(v78);
            }
            if (v76)
            {
              uint64_t v77 = v76;
              operator delete(v76);
            }
            if (v51 < v67)
            {
              unsigned int v52 = *a1;
              *a1 = *(a3 - 1);
              *(a3 - 1) = v52;
              sub_102FD18(a2, v50);
            }
            return;
          case 3uLL:
LABEL_55:
            sub_102E608(a1, a2, a1 + 1, a2 + 23, (unsigned int *)a3 - 1, a4 - 23);
            return;
          case 4uLL:
LABEL_56:
            sub_102FEF8(a1, a2, a1 + 1, a2 + 23, a1 + 2, a2 + 46, (unsigned int *)a3 - 1, a4 - 23);
            return;
          case 5uLL:
LABEL_57:
            sub_1030174(a1, a2, a1 + 1, a2 + 23, a1 + 2, a2 + 46, a1 + 3, a2 + 69, (unsigned int *)a3 - 1, a4 - 23);
            return;
          default:
            continue;
        }
      }
      int v62 = 0;
      a6 = -v34;
      goto LABEL_19;
    }
    break;
  }
LABEL_58:
  if (a1 != (unsigned int *)a3) {
    sub_10304A4(a1, a2, (unsigned int *)a3, (uint64_t)a4, (unsigned int *)a3, (uint64_t)a4, a5);
  }
}

void sub_102DA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
}

void sub_102DA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
}

void sub_102DA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
}

void *sub_102DA84(void *a1)
{
  uint64_t v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_102DAC8(unsigned int *a1, uint64_t *a2, unsigned int *a3)
{
  if (a1 == a3) {
    return;
  }
  unint64_t v3 = a3;
  uint64_t v4 = a1;
  unint64_t v5 = a1 + 1;
  if (a1 + 1 == a3) {
    return;
  }
  uint64_t v6 = a2;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = a2;
  uint64_t v10 = a1;
  while (2)
  {
    uint64_t v71 = v9 + 23;
    int v72 = v5;
    unsigned int v93 = *v5;
    sub_102843C((uint64_t)&v94, v9 + 23);
    unsigned int v76 = *v10;
    sub_102843C((uint64_t)&v77, v9);
    unsigned int v11 = v93;
    if (__p)
    {
      unsigned int v87 = __p;
      operator delete(__p);
    }
    uint64_t v10 = v72;
    if (v79)
    {
      uint64_t v80 = (char *)v79;
      operator delete(v79);
    }
    if (v102)
    {
      uint64_t v103 = (char *)v102;
      operator delete(v102);
    }
    if (v96)
    {
      uint64_t v97 = (char *)v96;
      operator delete(v96);
    }
    if (v11 >= v76) {
      goto LABEL_4;
    }
    unsigned int v93 = *v72;
    sub_102843C((uint64_t)&v94, v71);
    uint64_t v69 = v8;
    uint64_t v70 = v7;
    uint64_t v12 = v7;
    uint64_t v13 = v8;
    unint64_t v14 = v9 + 23;
    do
    {
      char v75 = v9;
      uint64_t v19 = v12;
      long long v20 = (unsigned int *)((char *)v4 + v13);
      uint64_t v21 = (uint64_t)v6 + v19;
      v20[1] = *v20;
      *(void *)(v21 + 184) = *(uint64_t *)((char *)v6 + v19);
      *(_DWORD *)(v21 + 192) = *(_DWORD *)((char *)v6 + v19 + 8);
      unsigned int v22 = (void **)((char *)v6 + v19 + 200);
      uint64_t v23 = (char *)*v22;
      uint64_t v24 = *(char **)((char *)v6 + v19 + 16);
      unint64_t v25 = *(unsigned char **)((char *)v6 + v19 + 24);
      size_t v26 = v25 - v24;
      unint64_t v27 = (v25 - v24) >> 3;
      uint64_t v28 = *(uint64_t *)((char *)v6 + v19 + 216);
      if (v27 <= (v28 - (uint64_t)*v22) >> 3)
      {
        BOOL v32 = v14 + 3;
        long long v33 = *(unsigned char **)(v21 + 208);
        unint64_t v34 = (v33 - v23) >> 3;
        if (v34 >= v27)
        {
          if (v25 == v24)
          {
LABEL_38:
            uint64_t v6 = a2;
            goto LABEL_39;
          }
          unint64_t v36 = v23;
          uint64_t v35 = v24;
        }
        else
        {
          if (v33 != v23)
          {
            memmove(v23, v24, v33 - v23);
            uint64_t v23 = *(char **)(v21 + 208);
          }
          uint64_t v35 = &v24[8 * v34];
          size_t v26 = v25 - v35;
          if (v25 == v35) {
            goto LABEL_38;
          }
          unint64_t v36 = v23;
        }
        memmove(v36, v35, v26);
        goto LABEL_38;
      }
      if (v23)
      {
        *(uint64_t *)((char *)v6 + v19 + 208) = (uint64_t)v23;
        operator delete(v23);
        uint64_t v28 = 0;
        uint64_t *v22 = 0;
        *(uint64_t *)((char *)v6 + v19 + 208) = 0;
        *(uint64_t *)((char *)v6 + v19 + 216) = 0;
      }
      if ((v26 & 0x8000000000000000) != 0) {
        goto LABEL_57;
      }
      uint64_t v29 = v28 >> 2;
      if (v28 >> 2 <= v27) {
        uint64_t v29 = (v25 - v24) >> 3;
      }
      unint64_t v30 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v29;
      if (v30 >> 61) {
LABEL_57:
      }
        sub_2E00();
      uint64_t v31 = (char *)operator new(8 * v30);
      uint64_t v23 = v31;
      uint64_t *v22 = v31;
      *(uint64_t *)((char *)v6 + v19 + 208) = (uint64_t)v31;
      BOOL v32 = (uint64_t *)((char *)v6 + v19 + 208);
      *(void *)(v21 + 216) = &v31[8 * v30];
      if (v25 != v24) {
        memcpy(v31, v24, v25 - v24);
      }
LABEL_39:
      *BOOL v32 = &v23[v26];
      uint64_t v37 = (uint64_t)v6 + v19;
      long long v38 = *(_OWORD *)((char *)v6 + v19 + 56);
      *(_OWORD *)(v37 + 224) = *(_OWORD *)((char *)v6 + v19 + 40);
      *(_OWORD *)(v37 + 240) = v38;
      *(_OWORD *)(v37 + 256) = *(_OWORD *)((char *)v6 + v19 + 72);
      long long v39 = *(char **)((char *)v6 + v19 + 96);
      *(void *)(v37 + 272) = *(uint64_t *)((char *)v6 + v19 + 88);
      sub_BDDEDC((uint64_t *)((char *)v6 + v19 + 280), v39, *(char **)((char *)v6 + v19 + 104), (*(uint64_t *)((char *)v6 + v19 + 104) - (uint64_t)v39) >> 1);
      long long v40 = *(_OWORD *)((char *)v6 + v19 + 136);
      *(_OWORD *)(v37 + 304) = *(_OWORD *)(v37 + 120);
      *(_OWORD *)(v37 + 320) = v40;
      *(_WORD *)(v37 + 336) = *(_WORD *)(v37 + 152);
      *(_DWORD *)(v37 + 340) = *(_DWORD *)(v37 + 156);
      *(_OWORD *)(v37 + 344) = *(_OWORD *)(v37 + 160);
      *(void *)(v37 + 360) = *(void *)(v37 + 176);
      if (!v13)
      {
        uint64_t v4 = a1;
        uint64_t v57 = a1;
        unsigned int v58 = v6;
        goto LABEL_50;
      }
      uint64_t v4 = a1;
      uint64_t v41 = (uint64_t)v6 + v19;
      unsigned int v42 = *(unsigned int *)((char *)a1 + v13 - 4);
      uint64_t v43 = *(uint64_t *)((char *)v6 + v19 - 184);
      int v78 = *(_DWORD *)((char *)v6 + v19 - 176);
      uint64_t v77 = v43;
      uint64_t v80 = 0;
      int v81 = 0;
      uint64_t v79 = 0;
      int v45 = *(unsigned char **)((char *)v6 + v19 - 168);
      char v44 = *(unsigned char **)((char *)v6 + v19 - 160);
      int64_t v46 = v44 - v45;
      if (v44 == v45)
      {
        unsigned int v47 = 0;
      }
      else
      {
        if (v46 < 0) {
          sub_2E00();
        }
        unsigned int v47 = (char *)operator new(v44 - v45);
        uint64_t v79 = v47;
        uint64_t v80 = v47;
        int v81 = &v47[8 * (v46 >> 3)];
        memcpy(v47, v45, v46);
        uint64_t v80 = &v47[8 * (v46 >> 3)];
      }
      long long v48 = *(_OWORD *)(v41 - 144);
      long long v49 = *(_OWORD *)(v41 - 128);
      long long v50 = *(_OWORD *)(v41 - 112);
      uint64_t v85 = *(void *)(v41 - 96);
      long long v83 = v49;
      long long v84 = v50;
      long long v82 = v48;
      unsigned int v87 = 0;
      unint64_t v88 = 0;
      __n128 __p = 0;
      uint64_t v51 = *(void *)(v41 - 88);
      uint64_t v52 = *(void *)(v41 - 80);
      uint64_t v53 = v52 - v51;
      if (v52 == v51)
      {
        long long v15 = *(_OWORD *)((char *)v6 + v19 - 64);
        long long v16 = *(_OWORD *)((char *)v6 + v19 - 48);
        long long v17 = *(_OWORD *)((char *)v6 + v19 - 16);
        long long v91 = *(_OWORD *)((char *)v6 + v19 - 32);
        long long v92 = v17;
        long long v89 = v15;
        long long v90 = v16;
        unsigned int v18 = v93;
        if (!v47) {
          goto LABEL_17;
        }
LABEL_16:
        uint64_t v80 = v47;
        operator delete(v47);
        goto LABEL_17;
      }
      if (v53 < 0) {
        sub_2E00();
      }
      __n128 __p = operator new(v52 - v51);
      unsigned int v87 = __p;
      unint64_t v88 = (char *)__p + 2 * (v53 >> 1);
      long long v54 = *(_OWORD *)((char *)v6 + v19 - 64);
      long long v55 = *(_OWORD *)((char *)v6 + v19 - 48);
      long long v56 = *(_OWORD *)((char *)v6 + v19 - 16);
      long long v91 = *(_OWORD *)((char *)v6 + v19 - 32);
      long long v92 = v56;
      long long v89 = v54;
      long long v90 = v55;
      unsigned int v18 = v93;
      unsigned int v87 = __p;
      operator delete(__p);
      unsigned int v47 = (char *)v79;
      if (v79) {
        goto LABEL_16;
      }
LABEL_17:
      unint64_t v14 = v75;
      unint64_t v9 = v75 - 23;
      v13 -= 4;
      uint64_t v12 = v19 - 184;
    }
    while (v18 < v42);
    uint64_t v57 = (unsigned int *)((char *)a1 + v13 + 4);
    unsigned int v58 = (uint64_t *)((char *)v6 + v19);
LABEL_50:
    *uint64_t v57 = v93;
    uint64_t v59 = v94;
    *((_DWORD *)v58 + 2) = v95;
    *unsigned int v58 = v59;
    if (v58 != &v94)
    {
      sub_326C0(v58 + 2, (char *)v96, v97, (v97 - (unsigned char *)v96) >> 3);
      long long v60 = v98;
      long long v61 = v99;
      long long v62 = v100;
      v58[11] = v101;
      *(_OWORD *)(v58 + 9) = v62;
      *(_OWORD *)(v58 + 7) = v61;
      *(_OWORD *)(v58 + 5) = v60;
      sub_BDDEDC(v58 + 12, (char *)v102, v103, (v103 - (unsigned char *)v102) >> 1);
    }
    uint64_t v63 = (uint64_t)v6 + v19 + 160;
    uint64_t v64 = (uint64_t)v6 + v19 + 120;
    unint64_t v3 = a3;
    long long v65 = v104;
    long long v66 = v105;
    *(_WORD *)(v64 + 32) = v106;
    *(_OWORD *)uint64_t v64 = v65;
    *(_OWORD *)(v64 + 16) = v66;
    *((_DWORD *)v58 + 39) = v107;
    long long v67 = v108;
    *(void *)(v63 + 16) = v109;
    *(_OWORD *)uint64_t v63 = v67;
    if (v102)
    {
      uint64_t v103 = (char *)v102;
      operator delete(v102);
    }
    uint64_t v8 = v69;
    uint64_t v7 = v70;
    uint64_t v10 = v72;
    if (v96)
    {
      uint64_t v97 = (char *)v96;
      operator delete(v96);
    }
LABEL_4:
    unint64_t v5 = v10 + 1;
    v8 += 4;
    v7 += 184;
    unint64_t v9 = v71;
    if (v10 + 1 != v3) {
      continue;
    }
    break;
  }
}

void sub_102E040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
}

void sub_102E0A4(unsigned int *a1, uint64_t a2, unsigned int *a3)
{
  if (a1 != a3)
  {
    unint64_t v3 = a3;
    uint64_t v4 = a1;
    unint64_t v5 = a1 + 1;
    if (a1 + 1 != a3)
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v4 = v5;
        uint64_t v8 = a2 + 184;
        unsigned int v78 = *v5;
        sub_102843C((uint64_t)&v79, (uint64_t *)(a2 + 184));
        unsigned int v61 = *v7;
        sub_102843C((uint64_t)&v62, (uint64_t *)a2);
        unsigned int v9 = v78;
        if (__p)
        {
          int v72 = __p;
          operator delete(__p);
        }
        if (v64)
        {
          long long v65 = (char *)v64;
          operator delete(v64);
        }
        if (v87)
        {
          unint64_t v88 = (char *)v87;
          operator delete(v87);
        }
        if (v81)
        {
          long long v82 = (char *)v81;
          operator delete(v81);
        }
        if (v9 < v61) {
          break;
        }
LABEL_4:
        unint64_t v5 = v4 + 1;
        a2 = v8;
        if (v4 + 1 == v3) {
          return;
        }
      }
      unsigned int v78 = *v4;
      sub_102843C((uint64_t)&v79, (uint64_t *)(a2 + 184));
      uint64_t v59 = a2 + 184;
      long long v60 = v4;
      uint64_t v10 = v4;
      uint64_t v11 = a2 + 184;
      while (1)
      {
        uint64_t v12 = a2;
        *uint64_t v10 = *(v10 - 1);
        *(void *)(a2 + 184) = *(void *)a2;
        *(_DWORD *)(a2 + 192) = *(_DWORD *)(a2 + 8);
        long long v15 = *(char **)(a2 + 200);
        uint64_t v13 = (void *)(a2 + 200);
        unint64_t v14 = v15;
        long long v17 = *(char **)(v12 + 16);
        long long v16 = *(unsigned char **)(v12 + 24);
        size_t v18 = v16 - v17;
        unint64_t v19 = (v16 - v17) >> 3;
        uint64_t v20 = *(void *)(v12 + 216);
        if (v19 <= (v20 - (uint64_t)v15) >> 3)
        {
          uint64_t v24 = (void *)(v11 + 24);
          unint64_t v25 = *(unsigned char **)(v12 + 208);
          unint64_t v26 = (v25 - v14) >> 3;
          if (v26 >= v19)
          {
            if (v16 == v17) {
              goto LABEL_36;
            }
            uint64_t v28 = v14;
            unint64_t v27 = *(char **)(v12 + 16);
            goto LABEL_35;
          }
          if (v25 != v14)
          {
            memmove(v14, *(const void **)(v12 + 16), v25 - v14);
            unint64_t v14 = *(char **)(v12 + 208);
          }
          unint64_t v27 = &v17[8 * v26];
          size_t v18 = v16 - v27;
          if (v16 != v27)
          {
            uint64_t v28 = v14;
LABEL_35:
            memmove(v28, v27, v18);
          }
        }
        else
        {
          if (v14)
          {
            *(void *)(v12 + 208) = v14;
            operator delete(v14);
            uint64_t v20 = 0;
            *uint64_t v13 = 0;
            v13[1] = 0;
            v13[2] = 0;
          }
          if ((v18 & 0x8000000000000000) != 0) {
            goto LABEL_53;
          }
          uint64_t v21 = v20 >> 2;
          if (v20 >> 2 <= v19) {
            uint64_t v21 = (v16 - v17) >> 3;
          }
          unint64_t v22 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v21;
          if (v22 >> 61) {
LABEL_53:
          }
            sub_2E00();
          uint64_t v23 = (char *)operator new(8 * v22);
          unint64_t v14 = v23;
          *(void *)(v12 + 208) = v23;
          uint64_t v24 = (void *)(v12 + 208);
          *(void *)(v12 + 200) = v23;
          *(void *)(v12 + 216) = &v23[8 * v22];
          if (v16 != v17) {
            memcpy(v23, v17, v16 - v17);
          }
        }
LABEL_36:
        *uint64_t v24 = &v14[v18];
        long long v29 = *(_OWORD *)(v12 + 56);
        *(_OWORD *)(v12 + 224) = *(_OWORD *)(v12 + 40);
        *(_OWORD *)(v12 + 240) = v29;
        *(_OWORD *)(v12 + 256) = *(_OWORD *)(v12 + 72);
        unint64_t v30 = *(char **)(v12 + 96);
        *(void *)(v12 + 272) = *(void *)(v12 + 88);
        sub_BDDEDC((void *)(v12 + 280), v30, *(char **)(v12 + 104), (uint64_t)(*(void *)(v12 + 104) - (void)v30) >> 1);
        long long v31 = *(_OWORD *)(v12 + 136);
        *(_OWORD *)(v12 + 304) = *(_OWORD *)(v12 + 120);
        *(_OWORD *)(v12 + 320) = v31;
        *(_WORD *)(v12 + 336) = *(_WORD *)(v12 + 152);
        *(_DWORD *)(v12 + 340) = *(_DWORD *)(v12 + 156);
        *(_OWORD *)(v12 + 344) = *(_OWORD *)(v12 + 160);
        *(void *)(v12 + 360) = *(void *)(v12 + 176);
        unsigned int v32 = *(v10 - 2);
        a2 = v12 - 184;
        uint64_t v33 = *(void *)(v12 - 184);
        int v63 = *(_DWORD *)(v12 - 176);
        uint64_t v62 = v33;
        long long v65 = 0;
        long long v66 = 0;
        uint64_t v64 = 0;
        uint64_t v35 = *(unsigned char **)(v12 - 168);
        unint64_t v34 = *(unsigned char **)(v12 - 160);
        int64_t v36 = v34 - v35;
        if (v34 == v35)
        {
          uint64_t v37 = 0;
        }
        else
        {
          if (v36 < 0) {
            sub_2E00();
          }
          uint64_t v37 = (char *)operator new(v34 - v35);
          uint64_t v64 = v37;
          long long v65 = v37;
          long long v66 = &v37[8 * (v36 >> 3)];
          memcpy(v37, v35, v36);
          long long v65 = &v37[8 * (v36 >> 3)];
        }
        long long v38 = *(_OWORD *)(v12 - 144);
        long long v39 = *(_OWORD *)(v12 - 128);
        long long v40 = *(_OWORD *)(v12 - 112);
        uint64_t v70 = *(void *)(v12 - 96);
        long long v68 = v39;
        long long v69 = v40;
        long long v67 = v38;
        int v72 = 0;
        char v73 = 0;
        __n128 __p = 0;
        uint64_t v41 = *(void *)(v12 - 88);
        uint64_t v42 = *(void *)(v12 - 80);
        uint64_t v43 = v42 - v41;
        if (v42 != v41)
        {
          if (v43 < 0) {
            sub_2E00();
          }
          __n128 __p = operator new(v42 - v41);
          int v72 = __p;
          char v73 = (char *)__p + 2 * (v43 >> 1);
          long long v44 = *(_OWORD *)(v12 - 64);
          long long v45 = *(_OWORD *)(v12 - 48);
          long long v46 = *(_OWORD *)(v12 - 16);
          long long v76 = *(_OWORD *)(v12 - 32);
          long long v77 = v46;
          long long v74 = v44;
          long long v75 = v45;
          unsigned int v47 = v78;
          int v72 = __p;
          operator delete(__p);
          uint64_t v37 = (char *)v64;
          if (!v64) {
            goto LABEL_15;
          }
LABEL_45:
          long long v65 = v37;
          operator delete(v37);
          goto LABEL_15;
        }
        long long v48 = *(_OWORD *)(v12 - 64);
        long long v49 = *(_OWORD *)(v12 - 48);
        long long v50 = *(_OWORD *)(v12 - 16);
        long long v76 = *(_OWORD *)(v12 - 32);
        long long v77 = v50;
        long long v74 = v48;
        long long v75 = v49;
        unsigned int v47 = v78;
        if (v37) {
          goto LABEL_45;
        }
LABEL_15:
        --v10;
        uint64_t v11 = v12;
        if (v47 >= v32)
        {
          *uint64_t v10 = v78;
          int v51 = v80;
          *(void *)uint64_t v12 = v79;
          *(_DWORD *)(v12 + 8) = v51;
          if ((uint64_t *)v12 != &v79)
          {
            sub_326C0((void *)(v12 + 16), (char *)v81, v82, (v82 - (unsigned char *)v81) >> 3);
            long long v52 = v83;
            long long v53 = v84;
            long long v54 = v85;
            *(void *)(v12 + 88) = v86;
            *(_OWORD *)(v12 + 56) = v53;
            *(_OWORD *)(v12 + 72) = v54;
            *(_OWORD *)(v12 + 40) = v52;
            sub_BDDEDC((void *)(v12 + 96), (char *)v87, v88, (v88 - (unsigned char *)v87) >> 1);
          }
          long long v55 = v89;
          long long v56 = v90;
          *(_WORD *)(v12 + 152) = v91;
          *(_OWORD *)(v12 + 120) = v55;
          *(_OWORD *)(v12 + 136) = v56;
          *(_DWORD *)(v12 + 156) = v92;
          long long v57 = v93;
          *(void *)(v12 + 176) = v94;
          *(_OWORD *)(v12 + 160) = v57;
          if (v87)
          {
            unint64_t v88 = (char *)v87;
            operator delete(v87);
          }
          unint64_t v3 = a3;
          uint64_t v8 = v59;
          uint64_t v4 = v60;
          if (v81)
          {
            long long v82 = (char *)v81;
            operator delete(v81);
          }
          goto LABEL_4;
        }
      }
    }
  }
}

void sub_102E5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
}

uint64_t sub_102E608(unsigned int *a1, uint64_t *a2, unsigned int *a3, uint64_t *a4, unsigned int *a5, uint64_t *a6)
{
  unsigned int v34 = *a3;
  sub_102843C((uint64_t)v35, a4);
  unsigned int v24 = *a1;
  sub_102843C((uint64_t)v29, a2);
  unsigned int v12 = v34;
  if (__p)
  {
    uint64_t v33 = __p;
    operator delete(__p);
  }
  if (v30)
  {
    long long v31 = v30;
    operator delete(v30);
  }
  if (v38)
  {
    long long v39 = v38;
    operator delete(v38);
  }
  if (v36)
  {
    uint64_t v37 = v36;
    operator delete(v36);
  }
  if (v12 < v24)
  {
    unsigned int v34 = *a5;
    sub_102843C((uint64_t)v35, a6);
    unsigned int v25 = *a3;
    sub_102843C((uint64_t)v29, a4);
    unsigned int v13 = v34;
    if (__p)
    {
      uint64_t v33 = __p;
      operator delete(__p);
    }
    if (v30)
    {
      long long v31 = v30;
      operator delete(v30);
    }
    if (v38)
    {
      long long v39 = v38;
      operator delete(v38);
    }
    if (v36)
    {
      uint64_t v37 = v36;
      operator delete(v36);
    }
    unsigned int v14 = *a1;
    if (v13 < v25)
    {
      *a1 = *a5;
      *a5 = v14;
      sub_102FD18(a2, a6);
      return 1;
    }
    *a1 = *a3;
    *a3 = v14;
    sub_102FD18(a2, a4);
    unsigned int v34 = *a5;
    sub_102843C((uint64_t)v35, a6);
    unsigned int v28 = *a3;
    sub_102843C((uint64_t)v29, a4);
    unsigned int v21 = v34;
    if (__p)
    {
      uint64_t v33 = __p;
      operator delete(__p);
    }
    if (v30)
    {
      long long v31 = v30;
      operator delete(v30);
    }
    if (v38)
    {
      long long v39 = v38;
      operator delete(v38);
    }
    if (v36)
    {
      uint64_t v37 = v36;
      operator delete(v36);
    }
    if (v21 >= v28) {
      return 1;
    }
    unsigned int v22 = *a3;
    *a3 = *a5;
    *a5 = v22;
    unint64_t v19 = a4;
    uint64_t v20 = a6;
LABEL_49:
    sub_102FD18(v19, v20);
    return 2;
  }
  unsigned int v34 = *a5;
  sub_102843C((uint64_t)v35, a6);
  unsigned int v26 = *a3;
  sub_102843C((uint64_t)v29, a4);
  unsigned int v15 = v34;
  if (__p)
  {
    uint64_t v33 = __p;
    operator delete(__p);
  }
  if (v30)
  {
    long long v31 = v30;
    operator delete(v30);
  }
  if (v38)
  {
    long long v39 = v38;
    operator delete(v38);
  }
  if (v36)
  {
    uint64_t v37 = v36;
    operator delete(v36);
  }
  if (v15 < v26)
  {
    unsigned int v16 = *a3;
    *a3 = *a5;
    *a5 = v16;
    sub_102FD18(a4, a6);
    unsigned int v34 = *a3;
    sub_102843C((uint64_t)v35, a4);
    unsigned int v27 = *a1;
    sub_102843C((uint64_t)v29, a2);
    unsigned int v17 = v34;
    if (__p)
    {
      uint64_t v33 = __p;
      operator delete(__p);
    }
    if (v30)
    {
      long long v31 = v30;
      operator delete(v30);
    }
    if (v38)
    {
      long long v39 = v38;
      operator delete(v38);
    }
    if (v36)
    {
      uint64_t v37 = v36;
      operator delete(v36);
    }
    if (v17 >= v27) {
      return 1;
    }
    unsigned int v18 = *a1;
    *a1 = *a3;
    *a3 = v18;
    unint64_t v19 = a2;
    uint64_t v20 = a4;
    goto LABEL_49;
  }
  return 0;
}

void sub_102E984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
}

void sub_102E998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
}

void sub_102E9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
}

void sub_102E9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
}

void sub_102E9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
}

int *sub_102E9E8(unsigned int *a1, uint64_t *a2, int *a3, uint64_t *a4)
{
  unsigned int v106 = *a1;
  sub_102843C((uint64_t)&v107, a2);
  unsigned int v88 = *(a3 - 1);
  sub_102843C((uint64_t)&v90, a4 - 23);
  unsigned int v8 = v106;
  if (__p)
  {
    long long v100 = (char *)__p;
    operator delete(__p);
  }
  if (v92)
  {
    long long v93 = (char *)v92;
    operator delete(v92);
  }
  unsigned int v87 = a4;
  if (v8 >= v88)
  {
    unsigned int v14 = (int *)(a1 + 1);
    unsigned int v15 = a2 + 23;
    do
    {
      unsigned int v9 = v14;
      uint64_t v10 = v15;
      if (v14 >= a3) {
        break;
      }
      unsigned int v89 = *v14;
      sub_102843C((uint64_t)&v90, v15);
      unsigned int v16 = v106;
      if (__p)
      {
        long long v100 = (char *)__p;
        operator delete(__p);
      }
      if (v92)
      {
        long long v93 = (char *)v92;
        operator delete(v92);
      }
      unsigned int v14 = v9 + 1;
      unsigned int v15 = v10 + 23;
    }
    while (v16 >= v89);
  }
  else
  {
    unsigned int v9 = (int *)a1;
    uint64_t v10 = a2;
    do
    {
      unsigned int v11 = v9[1];
      ++v9;
      v10 += 23;
      sub_102843C((uint64_t)&v90, v10);
      unsigned int v12 = v11;
      unsigned int v13 = v106;
      if (__p)
      {
        long long v100 = (char *)__p;
        operator delete(__p);
      }
      if (v92)
      {
        long long v93 = (char *)v92;
        operator delete(v92);
      }
    }
    while (v13 >= v12);
  }
  if (v9 < a3)
  {
    do
    {
      unsigned int v17 = *--a3;
      v87 -= 23;
      sub_102843C((uint64_t)&v90, v87);
      unsigned int v18 = v17;
      unsigned int v19 = v106;
      if (__p)
      {
        long long v100 = (char *)__p;
        operator delete(__p);
      }
      if (v92)
      {
        long long v93 = (char *)v92;
        operator delete(v92);
      }
    }
    while (v19 < v18);
  }
  long long v83 = a2;
  if (v9 < a3)
  {
    uint64_t v20 = a3;
    do
    {
      int v21 = *v9;
      int *v9 = *v20;
      uint64_t v86 = v20;
      int *v20 = v21;
      sub_102FD18(v10, v87);
      unsigned int v22 = v10;
      do
      {
        unsigned int v24 = v9[1];
        long long v85 = v9 + 1;
        uint64_t v25 = v10[23];
        v10 += 23;
        int v91 = *((_DWORD *)v10 + 2);
        uint64_t v90 = v25;
        long long v93 = 0;
        uint64_t v94 = 0;
        int v92 = 0;
        unsigned int v27 = (unsigned char *)v10[2];
        unsigned int v26 = (unsigned char *)v10[3];
        long long v84 = v10;
        int64_t v28 = v26 - v27;
        if (v26 == v27)
        {
          long long v29 = 0;
        }
        else
        {
          if (v28 < 0) {
            sub_2E00();
          }
          long long v29 = (char *)operator new(v26 - v27);
          int v92 = v29;
          long long v93 = v29;
          uint64_t v94 = &v29[8 * (v28 >> 3)];
          memcpy(v29, v27, v28);
          long long v93 = &v29[8 * (v28 >> 3)];
        }
        long long v30 = *((_OWORD *)v22 + 14);
        long long v31 = *((_OWORD *)v22 + 15);
        long long v32 = *((_OWORD *)v22 + 16);
        uint64_t v98 = v22[34];
        long long v96 = v31;
        long long v97 = v32;
        long long v95 = v30;
        long long v100 = 0;
        uint64_t v101 = 0;
        __n128 __p = 0;
        unsigned int v34 = (unsigned char *)v22[35];
        uint64_t v33 = (unsigned char *)v22[36];
        int64_t v35 = v33 - v34;
        if (v33 == v34)
        {
          long long v41 = *((_OWORD *)v22 + 19);
          long long v42 = *((_OWORD *)v22 + 20);
          long long v43 = *((_OWORD *)v22 + 22);
          long long v104 = *((_OWORD *)v22 + 21);
          long long v105 = v43;
          long long v102 = v41;
          long long v103 = v42;
          unsigned int v40 = v106;
          if (!v29) {
            goto LABEL_30;
          }
LABEL_41:
          long long v93 = v29;
          operator delete(v29);
          goto LABEL_30;
        }
        if (v35 < 0) {
          sub_2E00();
        }
        int64_t v36 = (char *)operator new(v33 - v34);
        __n128 __p = v36;
        long long v100 = v36;
        uint64_t v101 = &v36[2 * (v35 >> 1)];
        memcpy(v36, v34, v35);
        long long v37 = *((_OWORD *)v22 + 22);
        long long v39 = *((_OWORD *)v22 + 19);
        long long v38 = *((_OWORD *)v22 + 20);
        long long v104 = *((_OWORD *)v22 + 21);
        long long v105 = v37;
        long long v102 = v39;
        long long v103 = v38;
        unsigned int v40 = v106;
        long long v100 = v36;
        operator delete(v36);
        long long v29 = (char *)v92;
        if (v92) {
          goto LABEL_41;
        }
LABEL_30:
        unsigned int v22 = v10;
        BOOL v23 = v40 >= v24;
        unsigned int v9 = v85;
      }
      while (v23);
      long long v44 = v87;
      long long v45 = v87;
      do
      {
        unsigned int v46 = *--v86;
        uint64_t v47 = *(v44 - 23);
        v44 -= 23;
        int v91 = *((_DWORD *)v44 + 2);
        uint64_t v90 = v47;
        long long v93 = 0;
        uint64_t v94 = 0;
        int v92 = 0;
        long long v49 = (unsigned char *)v44[2];
        long long v48 = (unsigned char *)v44[3];
        int64_t v50 = v48 - v49;
        unsigned int v87 = v44;
        if (v48 == v49)
        {
          int v51 = 0;
        }
        else
        {
          if (v50 < 0) {
            sub_2E00();
          }
          int v51 = (char *)operator new(v48 - v49);
          int v92 = v51;
          long long v93 = v51;
          uint64_t v94 = &v51[8 * (v50 >> 3)];
          memcpy(v51, v49, v50);
          long long v93 = &v51[8 * (v50 >> 3)];
        }
        long long v52 = *((_OWORD *)v45 - 9);
        long long v53 = *((_OWORD *)v45 - 8);
        long long v54 = *((_OWORD *)v45 - 7);
        uint64_t v98 = *(v45 - 12);
        long long v96 = v53;
        long long v97 = v54;
        long long v95 = v52;
        long long v100 = 0;
        uint64_t v101 = 0;
        __n128 __p = 0;
        long long v56 = (unsigned char *)*(v45 - 11);
        long long v55 = (unsigned char *)*(v45 - 10);
        int64_t v57 = v55 - v56;
        if (v55 == v56)
        {
          long long v63 = *((_OWORD *)v45 - 4);
          long long v64 = *((_OWORD *)v45 - 3);
          long long v65 = *((_OWORD *)v45 - 1);
          long long v104 = *((_OWORD *)v45 - 2);
          long long v105 = v65;
          long long v102 = v63;
          long long v103 = v64;
          unsigned int v62 = v106;
          if (!v51) {
            goto LABEL_42;
          }
LABEL_52:
          long long v93 = v51;
          operator delete(v51);
          goto LABEL_42;
        }
        if (v57 < 0) {
          sub_2E00();
        }
        unsigned int v58 = (char *)operator new(v55 - v56);
        __n128 __p = v58;
        long long v100 = v58;
        uint64_t v101 = &v58[2 * (v57 >> 1)];
        memcpy(v58, v56, v57);
        long long v100 = &v58[2 * (v57 >> 1)];
        long long v59 = *((_OWORD *)v45 - 1);
        long long v61 = *((_OWORD *)v45 - 4);
        long long v60 = *((_OWORD *)v45 - 3);
        long long v104 = *((_OWORD *)v45 - 2);
        long long v105 = v59;
        long long v102 = v61;
        long long v103 = v60;
        unsigned int v62 = v106;
        long long v100 = v58;
        operator delete(v58);
        int v51 = (char *)v92;
        if (v92) {
          goto LABEL_52;
        }
LABEL_42:
        long long v45 = v44;
      }
      while (v62 < v46);
      unsigned int v9 = v85;
      uint64_t v20 = v86;
      uint64_t v10 = v84;
    }
    while (v85 < v86);
  }
  long long v66 = (unsigned int *)(v9 - 1);
  long long v67 = v10 - 23;
  if (v9 - 1 != (int *)a1)
  {
    *a1 = *v66;
    uint64_t v68 = *v67;
    *((_DWORD *)v83 + 2) = *((_DWORD *)v10 - 44);
    uint64_t *v83 = v68;
    if (v67 != v83)
    {
      sub_326C0(v83 + 2, (char *)*(v10 - 21), (char *)*(v10 - 20), (*(v10 - 20) - *(v10 - 21)) >> 3);
      long long v69 = *((_OWORD *)v10 - 9);
      long long v70 = *((_OWORD *)v10 - 8);
      long long v71 = *((_OWORD *)v10 - 7);
      v83[11] = *(v10 - 12);
      *(_OWORD *)(v83 + 9) = v71;
      *(_OWORD *)(v83 + 7) = v70;
      *(_OWORD *)(v83 + 5) = v69;
      sub_BDDEDC(v83 + 12, (char *)*(v10 - 11), (char *)*(v10 - 10), (*(v10 - 10) - *(v10 - 11)) >> 1);
    }
    long long v72 = *((_OWORD *)v10 - 4);
    long long v73 = *((_OWORD *)v10 - 3);
    *((_WORD *)v83 + 76) = *((_WORD *)v10 - 16);
    *(_OWORD *)(v83 + 17) = v73;
    *(_OWORD *)(v83 + 15) = v72;
    *((_DWORD *)v83 + 39) = *((_DWORD *)v10 - 7);
    long long v74 = *(_OWORD *)(v10 - 3);
    v83[22] = *(v10 - 1);
    *((_OWORD *)v83 + 10) = v74;
  }
  *long long v66 = v106;
  uint64_t v75 = v107;
  *((_DWORD *)v10 - 44) = v108;
  *long long v67 = v75;
  if (v67 != &v107)
  {
    sub_326C0(v10 - 21, (char *)v109, v110, (v110 - (unsigned char *)v109) >> 3);
    long long v76 = v111;
    long long v77 = v112;
    long long v78 = v113;
    *(v10 - 12) = v114;
    *((_OWORD *)v10 - 8) = v77;
    *((_OWORD *)v10 - 7) = v78;
    *((_OWORD *)v10 - 9) = v76;
    sub_BDDEDC(v10 - 11, (char *)v115, v116, (v116 - (unsigned char *)v115) >> 1);
  }
  long long v79 = v117;
  long long v80 = v118;
  *((_WORD *)v10 - 16) = v119;
  *((_OWORD *)v10 - 4) = v79;
  *((_OWORD *)v10 - 3) = v80;
  *((_DWORD *)v10 - 7) = v120;
  long long v81 = v121;
  *(v10 - 1) = v122;
  *(_OWORD *)(v10 - 3) = v81;
  if (v115)
  {
    long long v116 = (char *)v115;
    operator delete(v115);
  }
  if (v109)
  {
    uint64_t v110 = (char *)v109;
    operator delete(v109);
  }
  return v9;
}

void sub_102F05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
}

void sub_102F0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (a21) {
    operator delete(a21);
  }
  sub_102DA84(&a42);
  _Unwind_Resume(a1);
}

void sub_102F0D8(unsigned int *a1@<X0>, uint64_t *a2@<X1>, int *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = a2;
  unsigned int v105 = *a1;
  sub_102843C((uint64_t)&v106, a2);
  uint64_t v9 = 0;
  uint64_t v10 = v6;
  do
  {
    v10 += 23;
    unsigned int v88 = a1[v9 + 1];
    sub_102843C((uint64_t)&v89, v10);
    unsigned int v11 = v105;
    if (__p)
    {
      long long v99 = (char *)__p;
      operator delete(__p);
    }
    if (v91)
    {
      int v92 = (char *)v91;
      operator delete(v91);
    }
    ++v9;
  }
  while (v88 < v11);
  unsigned int v12 = (int *)&a1[v9];
  if (v9 == 1)
  {
    do
    {
      if (v12 >= a3) {
        break;
      }
      unsigned int v16 = *--a3;
      a4 -= 23;
      sub_102843C((uint64_t)&v89, a4);
      unsigned int v17 = v105;
      unsigned int v18 = v16;
      if (__p)
      {
        long long v99 = (char *)__p;
        operator delete(__p);
      }
      if (v91)
      {
        int v92 = (char *)v91;
        operator delete(v91);
      }
    }
    while (v18 >= v17);
  }
  else
  {
    do
    {
      unsigned int v13 = *--a3;
      a4 -= 23;
      sub_102843C((uint64_t)&v89, a4);
      unsigned int v14 = v105;
      unsigned int v15 = v13;
      if (__p)
      {
        long long v99 = (char *)__p;
        operator delete(__p);
      }
      if (v91)
      {
        int v92 = (char *)v91;
        operator delete(v91);
      }
    }
    while (v15 >= v14);
  }
  unsigned int v19 = v12;
  BOOL v20 = v12 >= a3;
  if (v20)
  {
    long long v66 = (unsigned int *)(v19 - 1);
    long long v67 = v10 - 23;
    if (v66 != a1) {
      goto LABEL_50;
    }
    goto LABEL_53;
  }
  long long v82 = v6;
  uint64_t v83 = a5;
  while (2)
  {
    int v21 = *v19;
    int *v19 = *a3;
    uint64_t v86 = a3;
    *a3 = v21;
    sub_102FD18(v10, a4);
    unsigned int v22 = v10;
    do
    {
      unsigned int v24 = v19[1];
      long long v84 = v19 + 1;
      uint64_t v25 = v10[23];
      v10 += 23;
      int v90 = *((_DWORD *)v10 + 2);
      uint64_t v89 = v25;
      int v92 = 0;
      long long v93 = 0;
      int v91 = 0;
      unsigned int v27 = (unsigned char *)v10[2];
      unsigned int v26 = (unsigned char *)v10[3];
      long long v85 = v10;
      int64_t v28 = v26 - v27;
      if (v26 == v27)
      {
        long long v29 = 0;
      }
      else
      {
        if (v28 < 0) {
          sub_2E00();
        }
        long long v29 = (char *)operator new(v26 - v27);
        int v91 = v29;
        int v92 = v29;
        long long v93 = &v29[8 * (v28 >> 3)];
        memcpy(v29, v27, v28);
        int v92 = &v29[8 * (v28 >> 3)];
      }
      long long v30 = *((_OWORD *)v22 + 14);
      long long v31 = *((_OWORD *)v22 + 15);
      long long v32 = *((_OWORD *)v22 + 16);
      uint64_t v97 = v22[34];
      long long v95 = v31;
      long long v96 = v32;
      long long v94 = v30;
      long long v99 = 0;
      long long v100 = 0;
      __n128 __p = 0;
      unsigned int v34 = (unsigned char *)v22[35];
      uint64_t v33 = (unsigned char *)v22[36];
      int64_t v35 = v33 - v34;
      if (v33 == v34)
      {
        long long v41 = *((_OWORD *)v22 + 19);
        long long v42 = *((_OWORD *)v22 + 20);
        long long v43 = *((_OWORD *)v22 + 22);
        long long v103 = *((_OWORD *)v22 + 21);
        long long v104 = v43;
        long long v101 = v41;
        long long v102 = v42;
        unsigned int v40 = v105;
        if (!v29) {
          goto LABEL_24;
        }
LABEL_34:
        int v92 = v29;
        operator delete(v29);
        goto LABEL_24;
      }
      if (v35 < 0) {
        sub_2E00();
      }
      int64_t v36 = (char *)operator new(v33 - v34);
      __n128 __p = v36;
      long long v99 = v36;
      long long v100 = &v36[2 * (v35 >> 1)];
      memcpy(v36, v34, v35);
      long long v37 = *((_OWORD *)v22 + 22);
      long long v39 = *((_OWORD *)v22 + 19);
      long long v38 = *((_OWORD *)v22 + 20);
      long long v103 = *((_OWORD *)v22 + 21);
      long long v104 = v37;
      long long v101 = v39;
      long long v102 = v38;
      unsigned int v40 = v105;
      long long v99 = v36;
      operator delete(v36);
      long long v29 = (char *)v91;
      if (v91) {
        goto LABEL_34;
      }
LABEL_24:
      unsigned int v22 = v10;
      BOOL v23 = v24 >= v40;
      unsigned int v19 = v84;
    }
    while (!v23);
    long long v44 = a4;
    long long v45 = a4;
    do
    {
      unsigned int v46 = *--v86;
      uint64_t v47 = *(v44 - 23);
      v44 -= 23;
      int v90 = *((_DWORD *)v44 + 2);
      uint64_t v89 = v47;
      int v92 = 0;
      long long v93 = 0;
      int v91 = 0;
      long long v49 = (unsigned char *)v44[2];
      long long v48 = (unsigned char *)v44[3];
      int64_t v50 = v48 - v49;
      a4 = v44;
      if (v48 == v49)
      {
        int v51 = 0;
      }
      else
      {
        if (v50 < 0) {
          sub_2E00();
        }
        int v51 = (char *)operator new(v48 - v49);
        int v91 = v51;
        int v92 = v51;
        long long v93 = &v51[8 * (v50 >> 3)];
        memcpy(v51, v49, v50);
        int v92 = &v51[8 * (v50 >> 3)];
      }
      long long v52 = *((_OWORD *)v45 - 9);
      long long v53 = *((_OWORD *)v45 - 8);
      long long v54 = *((_OWORD *)v45 - 7);
      uint64_t v97 = *(v45 - 12);
      long long v95 = v53;
      long long v96 = v54;
      long long v94 = v52;
      long long v99 = 0;
      long long v100 = 0;
      __n128 __p = 0;
      long long v56 = (unsigned char *)*(v45 - 11);
      long long v55 = (unsigned char *)*(v45 - 10);
      int64_t v57 = v55 - v56;
      if (v55 == v56)
      {
        long long v63 = *((_OWORD *)v45 - 4);
        long long v64 = *((_OWORD *)v45 - 3);
        long long v65 = *((_OWORD *)v45 - 1);
        long long v103 = *((_OWORD *)v45 - 2);
        long long v104 = v65;
        long long v101 = v63;
        long long v102 = v64;
        unsigned int v62 = v105;
        if (!v51) {
          goto LABEL_36;
        }
LABEL_46:
        int v92 = v51;
        operator delete(v51);
        goto LABEL_36;
      }
      if (v57 < 0) {
        sub_2E00();
      }
      unsigned int v58 = (char *)operator new(v55 - v56);
      __n128 __p = v58;
      long long v99 = v58;
      long long v100 = &v58[2 * (v57 >> 1)];
      memcpy(v58, v56, v57);
      long long v99 = &v58[2 * (v57 >> 1)];
      long long v59 = *((_OWORD *)v45 - 1);
      long long v61 = *((_OWORD *)v45 - 4);
      long long v60 = *((_OWORD *)v45 - 3);
      long long v103 = *((_OWORD *)v45 - 2);
      long long v104 = v59;
      long long v101 = v61;
      long long v102 = v60;
      unsigned int v62 = v105;
      long long v99 = v58;
      operator delete(v58);
      int v51 = (char *)v91;
      if (v91) {
        goto LABEL_46;
      }
LABEL_36:
      long long v45 = v44;
    }
    while (v46 >= v62);
    uint64_t v10 = v85;
    a3 = v86;
    unsigned int v19 = v84;
    if (v84 < v86) {
      continue;
    }
    break;
  }
  long long v66 = (unsigned int *)(v84 - 1);
  uint64_t v6 = v82;
  a5 = v83;
  long long v67 = v85 - 23;
  if (v84 - 1 != (int *)a1)
  {
LABEL_50:
    *a1 = *v66;
    uint64_t v68 = *v67;
    *((_DWORD *)v6 + 2) = *((_DWORD *)v67 + 2);
    *uint64_t v6 = v68;
    if (v67 != v6)
    {
      sub_326C0(v6 + 2, (char *)*(v10 - 21), (char *)*(v10 - 20), (*(v10 - 20) - *(v10 - 21)) >> 3);
      long long v69 = *((_OWORD *)v10 - 9);
      long long v70 = *((_OWORD *)v10 - 8);
      long long v71 = *((_OWORD *)v10 - 7);
      v6[11] = *(v10 - 12);
      *(_OWORD *)(v6 + 9) = v71;
      *(_OWORD *)(v6 + 7) = v70;
      *(_OWORD *)(v6 + 5) = v69;
      sub_BDDEDC(v6 + 12, (char *)*(v10 - 11), (char *)*(v10 - 10), (*(v10 - 10) - *(v10 - 11)) >> 1);
    }
    long long v72 = *((_OWORD *)v10 - 4);
    long long v73 = *((_OWORD *)v10 - 3);
    *((_WORD *)v6 + 76) = *((_WORD *)v10 - 16);
    *(_OWORD *)(v6 + 17) = v73;
    *(_OWORD *)(v6 + 15) = v72;
    *((_DWORD *)v6 + 39) = *((_DWORD *)v10 - 7);
    long long v74 = *(_OWORD *)(v10 - 3);
    v6[22] = *(v10 - 1);
    *((_OWORD *)v6 + 10) = v74;
  }
LABEL_53:
  *long long v66 = v105;
  uint64_t v75 = v106;
  *((_DWORD *)v67 + 2) = v107;
  *long long v67 = v75;
  if (v67 != &v106)
  {
    sub_326C0(v10 - 21, (char *)v108, v109, (v109 - (unsigned char *)v108) >> 3);
    long long v76 = v110;
    long long v77 = v111;
    long long v78 = v112;
    *(v10 - 12) = v113;
    *((_OWORD *)v10 - 8) = v77;
    *((_OWORD *)v10 - 7) = v78;
    *((_OWORD *)v10 - 9) = v76;
    sub_BDDEDC(v10 - 11, (char *)v114, v115, (v115 - (unsigned char *)v114) >> 1);
  }
  long long v79 = v116;
  long long v80 = v117;
  *((_WORD *)v10 - 16) = v118;
  *((_OWORD *)v10 - 4) = v79;
  *((_OWORD *)v10 - 3) = v80;
  *((_DWORD *)v10 - 7) = v119;
  long long v81 = v120;
  *(v10 - 1) = v121;
  *(_OWORD *)(v10 - 3) = v81;
  *(void *)a5 = v66;
  *(void *)(a5 + 8) = v67;
  *(unsigned char *)(a5 + 16) = v20;
  if (v114)
  {
    long long v115 = (char *)v114;
    operator delete(v114);
  }
  if (v108)
  {
    uint64_t v109 = (char *)v108;
    operator delete(v108);
  }
}

void sub_102F720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
}

void sub_102F770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (a23) {
    operator delete(a23);
  }
  sub_102DA84(&a44);
  _Unwind_Resume(a1);
}

BOOL sub_102F798(unsigned int *a1, uint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v4 = a3;
  uint64_t v7 = a3 - a1;
  BOOL result = 1;
  switch(v7)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v9 = (uint64_t *)(a4 - 184);
      unsigned int v48 = *(a3 - 1);
      sub_102843C((uint64_t)&v49, (uint64_t *)(a4 - 184));
      unsigned int v40 = *a1;
      sub_102843C((uint64_t)v43, a2);
      unsigned int v10 = v48;
      if (__p)
      {
        uint64_t v47 = __p;
        operator delete(__p);
      }
      if (v44)
      {
        long long v45 = v44;
        operator delete(v44);
      }
      if (v57)
      {
        unsigned int v58 = (char *)v57;
        operator delete(v57);
      }
      if (v51)
      {
        long long v52 = (char *)v51;
        operator delete(v51);
      }
      if (v10 >= v40) {
        return 1;
      }
      unsigned int v11 = *a1;
      *a1 = *(v4 - 1);
      *(v4 - 1) = v11;
      sub_102FD18(a2, v9);
      return 1;
    case 3:
      sub_102E608(a1, a2, a1 + 1, a2 + 23, a3 - 1, (uint64_t *)(a4 - 184));
      return 1;
    case 4:
      sub_102FEF8(a1, a2, a1 + 1, a2 + 23, a1 + 2, a2 + 46, a3 - 1, (uint64_t *)(a4 - 184));
      return 1;
    case 5:
      sub_1030174(a1, a2, a1 + 1, a2 + 23, a1 + 2, a2 + 46, a1 + 3, a2 + 69, a3 - 1, (uint64_t *)(a4 - 184));
      return 1;
    default:
      unsigned int v12 = a1 + 2;
      unsigned int v13 = a2 + 46;
      sub_102E608(a1, a2, a1 + 1, a2 + 23, a1 + 2, a2 + 46);
      unsigned int v14 = a1 + 3;
      if (a1 + 3 == v4) {
        return 1;
      }
      int v38 = 0;
      unsigned int v15 = a2 + 69;
      uint64_t v39 = 0;
      long long v37 = v4;
      break;
  }
  while (1)
  {
    unsigned int v48 = *v14;
    sub_102843C((uint64_t)&v49, v15);
    unsigned int v41 = *v12;
    sub_102843C((uint64_t)v43, v13);
    unsigned int v16 = v48;
    if (__p)
    {
      uint64_t v47 = __p;
      operator delete(__p);
    }
    if (v44)
    {
      long long v45 = v44;
      operator delete(v44);
    }
    if (v57)
    {
      unsigned int v58 = (char *)v57;
      operator delete(v57);
    }
    if (v51)
    {
      long long v52 = (char *)v51;
      operator delete(v51);
    }
    if (v16 >= v41) {
      goto LABEL_17;
    }
    unsigned int v48 = *v14;
    sub_102843C((uint64_t)&v49, v15);
    uint64_t v17 = v39;
    unsigned int v18 = v15;
    do
    {
      unsigned int v19 = v13;
      *(unsigned int *)((char *)a1 + v17 + 12) = *(unsigned int *)((char *)a1 + v17 + 8);
      uint64_t v20 = *v13;
      *((_DWORD *)v18 + 2) = *((_DWORD *)v13 + 2);
      *unsigned int v18 = v20;
      if (v13 != v18)
      {
        sub_326C0(v18 + 2, (char *)v13[2], (char *)v13[3], (v13[3] - v13[2]) >> 3);
        long long v21 = *(_OWORD *)(v13 + 5);
        long long v22 = *(_OWORD *)(v13 + 7);
        long long v23 = *(_OWORD *)(v13 + 9);
        v18[11] = v13[11];
        *(_OWORD *)(v18 + 9) = v23;
        *(_OWORD *)(v18 + 7) = v22;
        *(_OWORD *)(v18 + 5) = v21;
        sub_BDDEDC(v18 + 12, (char *)v13[12], (char *)v13[13], (v13[13] - v13[12]) >> 1);
      }
      long long v24 = *(_OWORD *)(v13 + 15);
      long long v25 = *(_OWORD *)(v13 + 17);
      *((_WORD *)v18 + 76) = *((_WORD *)v13 + 76);
      *(_OWORD *)(v18 + 17) = v25;
      *(_OWORD *)(v18 + 15) = v24;
      *((_DWORD *)v18 + 39) = *((_DWORD *)v13 + 39);
      long long v26 = *((_OWORD *)v13 + 10);
      v18[22] = v13[22];
      *((_OWORD *)v18 + 10) = v26;
      if (v17 == -8)
      {
        int64_t v28 = a1;
        goto LABEL_38;
      }
      v13 -= 23;
      unsigned int v42 = *(unsigned int *)((char *)a1 + v17 + 4);
      sub_102843C((uint64_t)v43, v19 - 23);
      unsigned int v27 = v48;
      if (__p)
      {
        uint64_t v47 = __p;
        operator delete(__p);
      }
      if (v44)
      {
        long long v45 = v44;
        operator delete(v44);
      }
      v17 -= 4;
      unsigned int v18 = v19;
    }
    while (v27 < v42);
    int64_t v28 = (unsigned int *)((char *)a1 + v17 + 12);
LABEL_38:
    *int64_t v28 = v48;
    uint64_t v29 = v49;
    *((_DWORD *)v19 + 2) = v50;
    uint64_t *v19 = v29;
    uint64_t v4 = v37;
    if (v19 != &v49)
    {
      sub_326C0(v19 + 2, (char *)v51, v52, (v52 - (unsigned char *)v51) >> 3);
      long long v30 = v53;
      long long v31 = v54;
      long long v32 = v55;
      v19[11] = v56;
      *(_OWORD *)(v19 + 9) = v32;
      *(_OWORD *)(v19 + 7) = v31;
      *(_OWORD *)(v19 + 5) = v30;
      sub_BDDEDC(v19 + 12, (char *)v57, v58, (v58 - (unsigned char *)v57) >> 1);
    }
    long long v33 = v59;
    long long v34 = v60;
    *((_WORD *)v19 + 76) = v61;
    *(_OWORD *)(v19 + 15) = v33;
    *(_OWORD *)(v19 + 17) = v34;
    *((_DWORD *)v19 + 39) = v62;
    long long v35 = v63;
    v19[22] = v64;
    *((_OWORD *)v19 + 10) = v35;
    BOOL v36 = v38 == 7;
    if (v57)
    {
      unsigned int v58 = (char *)v57;
      operator delete(v57);
    }
    if (v51)
    {
      long long v52 = (char *)v51;
      operator delete(v51);
    }
    if (v38 == 7) {
      return v14 + 1 == v37;
    }
    ++v38;
    v15 += 23 * v36;
LABEL_17:
    unsigned int v12 = v14;
    unsigned int v13 = v15;
    v15 += 23;
    v39 += 4;
    if (++v14 == v4) {
      return 1;
    }
  }
}

void sub_102FC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
}

void sub_102FCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
}

void sub_102FCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
}

void sub_102FCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
}

void sub_102FCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
}

__n128 sub_102FD18(uint64_t *a1, uint64_t *a2)
{
  uint64_t v30 = *a1;
  int v31 = *((_DWORD *)a1 + 2);
  long long v4 = *((_OWORD *)a1 + 1);
  uint64_t v5 = a1[4];
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  long long v26 = *(_OWORD *)(a1 + 5);
  long long v27 = *(_OWORD *)(a1 + 7);
  long long v28 = *(_OWORD *)(a1 + 9);
  uint64_t v29 = a1[11];
  uint64_t v6 = a1 + 12;
  long long v20 = v4;
  long long v21 = *((_OWORD *)a1 + 6);
  uint64_t v7 = a1[14];
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  unsigned int v8 = a1 + 15;
  long long v22 = *(_OWORD *)(a1 + 15);
  long long v23 = *(_OWORD *)(a1 + 17);
  __n128 v24 = *(__n128 *)(a1 + 19);
  long long v25 = *(_OWORD *)(a1 + 21);
  int v9 = *((_DWORD *)a2 + 2);
  *a1 = *a2;
  *((_DWORD *)a1 + 2) = v9;
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  a1[4] = a2[4];
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  long long v10 = *(_OWORD *)(a2 + 5);
  uint64_t v11 = a2[11];
  long long v12 = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 9) = v12;
  a1[11] = v11;
  *(_OWORD *)(a1 + 5) = v10;
  unsigned int v13 = (void *)a1[12];
  if (v13)
  {
    a1[13] = (uint64_t)v13;
    operator delete(v13);
    *uint64_t v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
  a1[14] = a2[14];
  a2[12] = 0;
  a2[13] = 0;
  a2[14] = 0;
  long long v14 = *(_OWORD *)(a2 + 15);
  long long v15 = *(_OWORD *)(a2 + 17);
  long long v16 = *(_OWORD *)(a2 + 21);
  v8[2] = *(_OWORD *)(a2 + 19);
  v8[3] = v16;
  *unsigned int v8 = v14;
  v8[1] = v15;
  *a2 = v30;
  *((_DWORD *)a2 + 2) = v31;
  uint64_t v17 = (void *)a2[2];
  if (v17)
  {
    a2[3] = (uint64_t)v17;
    operator delete(v17);
  }
  *((_OWORD *)a2 + 1) = v20;
  a2[4] = v5;
  *(_OWORD *)(a2 + 5) = v26;
  *(_OWORD *)(a2 + 7) = v27;
  *(_OWORD *)(a2 + 9) = v28;
  a2[11] = v29;
  unsigned int v18 = (void *)a2[12];
  if (v18)
  {
    a2[13] = (uint64_t)v18;
    operator delete(v18);
  }
  *((_OWORD *)a2 + 6) = v21;
  a2[14] = v7;
  *(_OWORD *)(a2 + 15) = v22;
  *(_OWORD *)(a2 + 17) = v23;
  __n128 result = v24;
  *(__n128 *)(a2 + 19) = v24;
  *(_OWORD *)(a2 + 21) = v25;
  return result;
}

double sub_102FEF8(unsigned int *a1, uint64_t *a2, unsigned int *a3, uint64_t *a4, unsigned int *a5, uint64_t *a6, unsigned int *a7, uint64_t *a8)
{
  sub_102E608(a1, a2, a3, a4, a5, a6);
  unsigned int v31 = *a7;
  sub_102843C((uint64_t)v32, a8);
  unsigned int v23 = *a5;
  sub_102843C((uint64_t)v26, a6);
  unsigned int v17 = v31;
  if (__p)
  {
    uint64_t v30 = __p;
    operator delete(__p);
  }
  if (v27)
  {
    long long v28 = v27;
    operator delete(v27);
  }
  if (v35)
  {
    BOOL v36 = v35;
    operator delete(v35);
  }
  if (v33)
  {
    long long v34 = v33;
    operator delete(v33);
  }
  if (v17 < v23)
  {
    unsigned int v18 = *a5;
    *a5 = *a7;
    *a7 = v18;
    sub_102FD18(a6, a8);
    unsigned int v31 = *a5;
    sub_102843C((uint64_t)v32, a6);
    unsigned int v24 = *a3;
    sub_102843C((uint64_t)v26, a4);
    unsigned int v19 = v31;
    if (__p)
    {
      uint64_t v30 = __p;
      operator delete(__p);
    }
    if (v27)
    {
      long long v28 = v27;
      operator delete(v27);
    }
    if (v35)
    {
      BOOL v36 = v35;
      operator delete(v35);
    }
    if (v33)
    {
      long long v34 = v33;
      operator delete(v33);
    }
    if (v19 < v24)
    {
      unsigned int v20 = *a3;
      *a3 = *a5;
      *a5 = v20;
      sub_102FD18(a4, a6);
      unsigned int v31 = *a3;
      sub_102843C((uint64_t)v32, a4);
      unsigned int v25 = *a1;
      sub_102843C((uint64_t)v26, a2);
      unsigned int v21 = v31;
      if (__p)
      {
        uint64_t v30 = __p;
        operator delete(__p);
      }
      if (v27)
      {
        long long v28 = v27;
        operator delete(v27);
      }
      if (v35)
      {
        BOOL v36 = v35;
        operator delete(v35);
      }
      if (v33)
      {
        long long v34 = v33;
        operator delete(v33);
      }
      if (v21 < v25)
      {
        unsigned int v22 = *a1;
        *a1 = *a3;
        *a3 = v22;
        *(void *)&double result = sub_102FD18(a2, a4).n128_u64[0];
      }
    }
  }
  return result;
}

void sub_1030138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
}

void sub_103014C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
}

void sub_1030160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
}

double sub_1030174(unsigned int *a1, uint64_t *a2, unsigned int *a3, uint64_t *a4, unsigned int *a5, uint64_t *a6, unsigned int *a7, uint64_t *a8, unsigned int *a9, uint64_t *a10)
{
  sub_102FEF8(a1, a2, a3, a4, a5, a6, a7, a8);
  unsigned int v36 = *a9;
  sub_102843C((uint64_t)v37, a10);
  unsigned int v27 = *a7;
  sub_102843C((uint64_t)v31, a8);
  unsigned int v17 = v36;
  if (__p)
  {
    long long v35 = __p;
    operator delete(__p);
  }
  if (v32)
  {
    long long v33 = v32;
    operator delete(v32);
  }
  if (v40)
  {
    unsigned int v41 = v40;
    operator delete(v40);
  }
  if (v38)
  {
    uint64_t v39 = v38;
    operator delete(v38);
  }
  if (v17 < v27)
  {
    unsigned int v18 = *a7;
    *a7 = *a9;
    *a9 = v18;
    sub_102FD18(a8, a10);
    unsigned int v36 = *a7;
    sub_102843C((uint64_t)v37, a8);
    unsigned int v28 = *a5;
    sub_102843C((uint64_t)v31, a6);
    unsigned int v19 = v36;
    if (__p)
    {
      long long v35 = __p;
      operator delete(__p);
    }
    if (v32)
    {
      long long v33 = v32;
      operator delete(v32);
    }
    if (v40)
    {
      unsigned int v41 = v40;
      operator delete(v40);
    }
    if (v38)
    {
      uint64_t v39 = v38;
      operator delete(v38);
    }
    if (v19 < v28)
    {
      unsigned int v20 = *a5;
      *a5 = *a7;
      *a7 = v20;
      sub_102FD18(a6, a8);
      unsigned int v36 = *a5;
      sub_102843C((uint64_t)v37, a6);
      unsigned int v29 = *a3;
      sub_102843C((uint64_t)v31, a4);
      unsigned int v21 = v36;
      if (__p)
      {
        long long v35 = __p;
        operator delete(__p);
      }
      if (v32)
      {
        long long v33 = v32;
        operator delete(v32);
      }
      if (v40)
      {
        unsigned int v41 = v40;
        operator delete(v40);
      }
      if (v38)
      {
        uint64_t v39 = v38;
        operator delete(v38);
      }
      if (v21 < v29)
      {
        unsigned int v22 = *a3;
        *a3 = *a5;
        *a5 = v22;
        sub_102FD18(a4, a6);
        unsigned int v36 = *a3;
        sub_102843C((uint64_t)v37, a4);
        unsigned int v30 = *a1;
        sub_102843C((uint64_t)v31, a2);
        unsigned int v23 = v36;
        if (__p)
        {
          long long v35 = __p;
          operator delete(__p);
        }
        if (v32)
        {
          long long v33 = v32;
          operator delete(v32);
        }
        if (v40)
        {
          unsigned int v41 = v40;
          operator delete(v40);
        }
        if (v38)
        {
          uint64_t v39 = v38;
          operator delete(v38);
        }
        if (v23 < v30)
        {
          unsigned int v24 = *a1;
          *a1 = *a3;
          *a3 = v24;
          *(void *)&double result = sub_102FD18(a2, a4).n128_u64[0];
        }
      }
    }
  }
  return result;
}

void sub_1030454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

void sub_1030468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

void sub_103047C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

void sub_1030490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

unsigned int *sub_10304A4(unsigned int *a1, uint64_t *a2, unsigned int *a3, uint64_t a4, unsigned int *a5, uint64_t a6, uint64_t a7)
{
  if (a1 == a3) {
    return a5;
  }
  uint64_t v9 = (uint64_t)a3;
  uint64_t v12 = (char *)a3 - (char *)a1;
  uint64_t v13 = a3 - a1;
  if ((char *)a3 - (char *)a1 >= 5)
  {
    unint64_t v14 = (unint64_t)(v13 - 2) >> 1;
    unint64_t v15 = v14 + 1;
    uint64_t v16 = (uint64_t)&a2[23 * v14];
    unsigned int v17 = &a1[v14];
    do
    {
      sub_10306D0((uint64_t)a1, (uint64_t)a2, a7, v13, v17, v16);
      v16 -= 184;
      --v17;
      --v15;
    }
    while (v15);
  }
  if ((unsigned int *)v9 == a5)
  {
    a5 = (unsigned int *)v9;
    if (v12 < 5) {
      return a5;
    }
    goto LABEL_22;
  }
  unsigned int v18 = (uint64_t *)a4;
  unsigned int v19 = (unsigned int *)v9;
  do
  {
    unsigned int v32 = *v19;
    sub_102843C((uint64_t)&v33, v18);
    unsigned int v26 = *a1;
    sub_102843C((uint64_t)&v27, a2);
    unsigned int v20 = v32;
    if (__p)
    {
      unsigned int v31 = __p;
      operator delete(__p);
    }
    if (v28)
    {
      unsigned int v29 = v28;
      operator delete(v28);
    }
    if (v36)
    {
      long long v37 = v36;
      operator delete(v36);
    }
    if (v34)
    {
      long long v35 = v34;
      operator delete(v34);
    }
    if (v20 < v26)
    {
      unsigned int v21 = *v19;
      unsigned int *v19 = *a1;
      *a1 = v21;
      sub_102FD18(v18, a2);
      sub_10306D0((uint64_t)a1, (uint64_t)a2, a7, v13, a1, (uint64_t)a2);
    }
    ++v19;
    v18 += 23;
  }
  while (v19 != a5);
  if (v12 >= 5)
  {
LABEL_22:
    unint64_t v22 = (unint64_t)v12 >> 2;
    do
    {
      sub_1030C00(a1, a2, v9, a4, a7, v22);
      v9 -= 4;
      a4 -= 184;
    }
    while (v22-- > 2);
  }
  return a5;
}

void sub_10306BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
}

void sub_10306D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v7 = a5;
    uint64_t v8 = a1;
    uint64_t v41 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a5 - a1) >> 2)
    {
      uint64_t v10 = ((uint64_t)a5 - a1) >> 1;
      uint64_t v11 = v10 | 1;
      uint64_t v12 = (unsigned int *)(a1 + 4 * (v10 | 1));
      uint64_t v13 = a2 + 184 * (v10 | 1);
      uint64_t v14 = v10 + 2;
      if (v10 + 2 < a4)
      {
        unsigned int v57 = *v12;
        sub_102843C((uint64_t)&v58, (uint64_t *)v13);
        unsigned int v51 = v12[1];
        sub_102843C((uint64_t)v52, (uint64_t *)(v13 + 184));
        unsigned int v15 = v57;
        if (__p)
        {
          uint64_t v56 = __p;
          operator delete(__p);
        }
        if (v53)
        {
          long long v54 = v53;
          operator delete(v53);
        }
        if (__src)
        {
          *(void *)long long v67 = __src;
          operator delete(__src);
        }
        if (v60)
        {
          __int16 v61 = (char *)v60;
          operator delete(v60);
        }
        if (v15 < v51)
        {
          ++v12;
          v13 += 184;
          uint64_t v11 = v14;
        }
        uint64_t v7 = a5;
      }
      unsigned int v57 = *v12;
      sub_102843C((uint64_t)&v58, (uint64_t *)v13);
      unsigned int v51 = *v7;
      sub_102843C((uint64_t)v52, (uint64_t *)a6);
      unsigned int v16 = v57;
      if (__p)
      {
        uint64_t v56 = __p;
        operator delete(__p);
      }
      if (v53)
      {
        long long v54 = v53;
        operator delete(v53);
      }
      if (__src)
      {
        *(void *)long long v67 = __src;
        operator delete(__src);
      }
      if (v60)
      {
        __int16 v61 = (char *)v60;
        operator delete(v60);
      }
      if (v16 >= v51)
      {
        unsigned int v57 = *v7;
        sub_102843C((uint64_t)&v58, (uint64_t *)a6);
        uint64_t v17 = v11;
        do
        {
          unsigned int v18 = v7;
          uint64_t v19 = v13;
          uint64_t v7 = v12;
          *unsigned int v18 = *v12;
          uint64_t v20 = *(void *)v13;
          *(_DWORD *)(a6 + 8) = *(_DWORD *)(v13 + 8);
          *(void *)a6 = v20;
          if (a6 != v13)
          {
            sub_326C0((void *)(a6 + 16), *(char **)(v13 + 16), *(char **)(v13 + 24), (uint64_t)(*(void *)(v13 + 24) - *(void *)(v13 + 16)) >> 3);
            long long v21 = *(_OWORD *)(v13 + 40);
            long long v22 = *(_OWORD *)(v13 + 56);
            long long v23 = *(_OWORD *)(v13 + 72);
            *(void *)(a6 + 88) = *(void *)(v13 + 88);
            *(_OWORD *)(a6 + 72) = v23;
            *(_OWORD *)(a6 + 56) = v22;
            *(_OWORD *)(a6 + 40) = v21;
            sub_BDDEDC((void *)(a6 + 96), *(char **)(v13 + 96), *(char **)(v13 + 104), (uint64_t)(*(void *)(v13 + 104) - *(void *)(v13 + 96)) >> 1);
          }
          long long v24 = *(_OWORD *)(v13 + 120);
          long long v25 = *(_OWORD *)(v13 + 136);
          *(_WORD *)(a6 + 152) = *(_WORD *)(v13 + 152);
          *(_OWORD *)(a6 + 136) = v25;
          *(_OWORD *)(a6 + 120) = v24;
          *(_DWORD *)(a6 + 156) = *(_DWORD *)(v13 + 156);
          long long v26 = *(_OWORD *)(v13 + 160);
          *(void *)(a6 + 176) = *(void *)(v13 + 176);
          *(_OWORD *)(a6 + 160) = v26;
          if (v41 < v17) {
            break;
          }
          long long v44 = v12;
          uint64_t v27 = 2 * v17;
          uint64_t v17 = (2 * v17) | 1;
          uint64_t v28 = v8;
          uint64_t v12 = (unsigned int *)(v8 + 4 * v17);
          uint64_t v13 = a2 + 184 * v17;
          uint64_t v29 = v27 + 2;
          if (v27 + 2 < a4)
          {
            unsigned int v51 = *v12;
            sub_102843C((uint64_t)v52, (uint64_t *)(a2 + 184 * v17));
            unsigned int v45 = v12[1];
            sub_102843C((uint64_t)&v46, (uint64_t *)(v13 + 184));
            unsigned int v30 = v51;
            if (v49)
            {
              int v50 = v49;
              operator delete(v49);
            }
            if (v47)
            {
              unsigned int v48 = v47;
              operator delete(v47);
            }
            if (__p)
            {
              uint64_t v56 = __p;
              operator delete(__p);
            }
            if (v53)
            {
              long long v54 = v53;
              operator delete(v53);
            }
            if (v30 < v45)
            {
              ++v12;
              v13 += 184;
              uint64_t v17 = v29;
            }
          }
          unsigned int v51 = *v12;
          sub_102843C((uint64_t)v52, (uint64_t *)v13);
          unsigned int v31 = v57;
          unsigned int v32 = v51;
          uint64_t v8 = v28;
          if (__p)
          {
            uint64_t v56 = __p;
            operator delete(__p);
          }
          uint64_t v7 = v44;
          if (v53)
          {
            long long v54 = v53;
            operator delete(v53);
          }
          a6 = v19;
        }
        while (v32 >= v31);
        *uint64_t v7 = v57;
        uint64_t v33 = v58;
        *(_DWORD *)(v19 + 8) = v59;
        *(void *)uint64_t v19 = v33;
        if ((uint64_t *)v19 != &v58)
        {
          sub_326C0((void *)(v19 + 16), (char *)v60, v61, (v61 - (unsigned char *)v60) >> 3);
          long long v34 = v62;
          long long v35 = v63;
          long long v36 = v64;
          *(void *)(v19 + 88) = v65;
          *(_OWORD *)(v19 + 72) = v36;
          *(_OWORD *)(v19 + 56) = v35;
          *(_OWORD *)(v19 + 40) = v34;
          sub_BDDEDC((void *)(v19 + 96), (char *)__src, *(char **)v67, (uint64_t)(*(void *)v67 - (void)__src) >> 1);
        }
        long long v37 = v68;
        long long v38 = v69;
        *(_WORD *)(v19 + 152) = v70;
        *(_OWORD *)(v19 + 120) = v37;
        *(_OWORD *)(v19 + 136) = v38;
        *(_DWORD *)(v19 + 156) = v71;
        long long v39 = v72;
        *(void *)(v19 + 176) = v73;
        *(_OWORD *)(v19 + 160) = v39;
        if (__src)
        {
          *(void *)long long v67 = __src;
          operator delete(__src);
        }
        if (v60)
        {
          __int16 v61 = (char *)v60;
          operator delete(v60);
        }
      }
    }
  }
}

void sub_1030B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_102DA84(&a64);
  _Unwind_Resume(a1);
}

void sub_1030B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_102DA84(&a64);
  _Unwind_Resume(a1);
}

void sub_1030B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_102DA84(&a64);
  _Unwind_Resume(a1);
}

void sub_1030BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_102DA84(&a40);
  sub_102DA84(&a64);
  _Unwind_Resume(a1);
}

void sub_1030BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_102DA84(&a64);
  _Unwind_Resume(a1);
}

void sub_1030BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_102DA84(&a64);
  _Unwind_Resume(a1);
}

void sub_1030BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_102DA84(&a64);
  _Unwind_Resume(a1);
}

void sub_1030C00(unsigned int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6 >= 2)
  {
    unsigned int v42 = *a1;
    sub_102843C((uint64_t)&v43, a2);
    uint64_t v12 = sub_1030F04(a1, (uint64_t)a2, a5, a6);
    uint64_t v14 = v12;
    uint64_t v15 = v13;
    unsigned int v16 = (unsigned int *)(a3 - 4);
    if (v16 == v12)
    {
      unsigned int *v12 = v42;
      uint64_t v35 = v43;
      *(_DWORD *)(v13 + 8) = v44;
      *(void *)uint64_t v13 = v35;
      if (&v43 != (uint64_t *)v13)
      {
        sub_326C0((void *)(v13 + 16), (char *)v45, v46, (v46 - (unsigned char *)v45) >> 3);
        long long v36 = v47;
        long long v37 = v48;
        long long v38 = v49;
        *(void *)(v15 + 88) = v50;
        *(_OWORD *)(v15 + 72) = v38;
        *(_OWORD *)(v15 + 56) = v37;
        *(_OWORD *)(v15 + 40) = v36;
        sub_BDDEDC((void *)(v15 + 96), (char *)__p, v52, (v52 - (unsigned char *)__p) >> 1);
      }
      long long v39 = v53;
      long long v40 = v54;
      *(_WORD *)(v15 + 152) = v55;
      *(_OWORD *)(v15 + 136) = v40;
      *(_OWORD *)(v15 + 120) = v39;
      *(_DWORD *)(v15 + 156) = v56;
      long long v41 = v57;
      *(void *)(v15 + 176) = v58;
      *(_OWORD *)(v15 + 160) = v41;
      long long v34 = (char *)__p;
      if (!__p) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v17 = (uint64_t *)(a4 - 184);
      unsigned int *v12 = *v16;
      uint64_t v18 = *(void *)(a4 - 184);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(a4 - 176);
      *(void *)uint64_t v13 = v18;
      if (a4 - 184 != v13)
      {
        sub_326C0((void *)(v13 + 16), *(char **)(a4 - 168), *(char **)(a4 - 160), (uint64_t)(*(void *)(a4 - 160) - *(void *)(a4 - 168)) >> 3);
        long long v19 = *(_OWORD *)(a4 - 144);
        long long v20 = *(_OWORD *)(a4 - 128);
        long long v21 = *(_OWORD *)(a4 - 112);
        *(void *)(v15 + 88) = *(void *)(a4 - 96);
        *(_OWORD *)(v15 + 72) = v21;
        *(_OWORD *)(v15 + 56) = v20;
        *(_OWORD *)(v15 + 40) = v19;
        sub_BDDEDC((void *)(v15 + 96), *(char **)(a4 - 88), *(char **)(a4 - 80), (uint64_t)(*(void *)(a4 - 80) - *(void *)(a4 - 88)) >> 1);
      }
      long long v22 = *(_OWORD *)(a4 - 64);
      long long v23 = *(_OWORD *)(a4 - 48);
      *(_WORD *)(v15 + 152) = *(_WORD *)(a4 - 32);
      *(_OWORD *)(v15 + 136) = v23;
      *(_OWORD *)(v15 + 120) = v22;
      *(_DWORD *)(v15 + 156) = *(_DWORD *)(a4 - 28);
      long long v24 = *(_OWORD *)(a4 - 24);
      *(void *)(v15 + 176) = *(void *)(a4 - 8);
      *(_OWORD *)(v15 + 160) = v24;
      *unsigned int v16 = v42;
      uint64_t v25 = v43;
      *(_DWORD *)(a4 - 176) = v44;
      *uint64_t v17 = v25;
      if (v17 != &v43)
      {
        sub_326C0((void *)(a4 - 168), (char *)v45, v46, (v46 - (unsigned char *)v45) >> 3);
        long long v26 = v47;
        long long v27 = v48;
        long long v28 = v49;
        *(void *)(a4 - 96) = v50;
        *(_OWORD *)(a4 - 128) = v27;
        *(_OWORD *)(a4 - 112) = v28;
        *(_OWORD *)(a4 - 144) = v26;
        sub_BDDEDC((void *)(a4 - 88), (char *)__p, v52, (v52 - (unsigned char *)__p) >> 1);
      }
      uint64_t v29 = a4 - 64;
      uint64_t v30 = a4 - 24;
      long long v31 = v53;
      long long v32 = v54;
      *(_WORD *)(v29 + 32) = v55;
      *(_OWORD *)uint64_t v29 = v31;
      *(_OWORD *)(v29 + 16) = v32;
      *(_DWORD *)(a4 - 28) = v56;
      long long v33 = v57;
      *(void *)(v30 + 16) = v58;
      *(_OWORD *)uint64_t v30 = v33;
      sub_1031108((uint64_t)a1, (uint64_t)a2, (uint64_t)(v14 + 1), v15 + 184, a5, v14 + 1 - a1);
      long long v34 = (char *)__p;
      if (!__p) {
        goto LABEL_9;
      }
    }
    long long v52 = v34;
    operator delete(v34);
LABEL_9:
    if (v45)
    {
      uint64_t v46 = (char *)v45;
      operator delete(v45);
    }
  }
}

void sub_1030EB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_102DA84((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1030EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_102DA84((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1030EDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_102DA84((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1030EF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_102DA84((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned int *sub_1030F04(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0;
  uint64_t v8 = a4 - 2;
  if (a4 < 2) {
    uint64_t v8 = a4 - 1;
  }
  uint64_t v9 = v8 >> 1;
  do
  {
    uint64_t v13 = &a1[v7 + 1];
    uint64_t v14 = a2 + 184 * (v7 + 1);
    uint64_t v15 = 2 * v7;
    uint64_t v7 = (2 * v7) | 1;
    uint64_t v16 = v15 + 2;
    if (v15 + 2 < a4)
    {
      unsigned int v29 = *v13;
      sub_102843C((uint64_t)&v30, (uint64_t *)v14);
      unsigned int v23 = v13[1];
      sub_102843C((uint64_t)&v24, (uint64_t *)(v14 + 184));
      unsigned int v22 = v29;
      if (__p)
      {
        long long v28 = __p;
        operator delete(__p);
      }
      if (v25)
      {
        long long v26 = v25;
        operator delete(v25);
      }
      if (v33)
      {
        long long v34 = v33;
        operator delete(v33);
      }
      if (v31)
      {
        long long v32 = v31;
        operator delete(v31);
      }
      if (v22 < v23)
      {
        ++v13;
        v14 += 184;
        uint64_t v7 = v16;
      }
    }
    *a1 = *v13;
    uint64_t v17 = *(void *)v14;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(v14 + 8);
    *(void *)a2 = v17;
    if (a2 != v14)
    {
      sub_326C0((void *)(a2 + 16), *(char **)(v14 + 16), *(char **)(v14 + 24), (uint64_t)(*(void *)(v14 + 24) - *(void *)(v14 + 16)) >> 3);
      long long v18 = *(_OWORD *)(v14 + 40);
      long long v19 = *(_OWORD *)(v14 + 56);
      long long v20 = *(_OWORD *)(v14 + 72);
      *(void *)(a2 + 88) = *(void *)(v14 + 88);
      *(_OWORD *)(a2 + 72) = v20;
      *(_OWORD *)(a2 + 56) = v19;
      *(_OWORD *)(a2 + 40) = v18;
      sub_BDDEDC((void *)(a2 + 96), *(char **)(v14 + 96), *(char **)(v14 + 104), (uint64_t)(*(void *)(v14 + 104) - *(void *)(v14 + 96)) >> 1);
    }
    long long v10 = *(_OWORD *)(v14 + 120);
    long long v11 = *(_OWORD *)(v14 + 136);
    *(_WORD *)(a2 + 152) = *(_WORD *)(v14 + 152);
    *(_OWORD *)(a2 + 136) = v11;
    *(_OWORD *)(a2 + 120) = v10;
    *(_DWORD *)(a2 + 156) = *(_DWORD *)(v14 + 156);
    long long v12 = *(_OWORD *)(v14 + 160);
    *(void *)(a2 + 176) = *(void *)(v14 + 176);
    *(_OWORD *)(a2 + 160) = v12;
    a1 = v13;
    a2 = v14;
  }
  while (v7 <= v9);
  return v13;
}

void sub_10310F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

void sub_1031108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = a6 - 2;
  if (a6 >= 2)
  {
    unint64_t v10 = v6 >> 1;
    long long v11 = (unsigned int *)(a1 + 4 * (v6 >> 1));
    uint64_t v12 = a2 + 184 * (v6 >> 1);
    unsigned int v42 = *v11;
    sub_102843C((uint64_t)&v43, (uint64_t *)v12);
    unsigned int v14 = *(_DWORD *)(a3 - 4);
    uint64_t v13 = (unsigned int *)(a3 - 4);
    uint64_t v15 = a4 - 184;
    sub_102843C((uint64_t)v37, (uint64_t *)v15);
    unsigned int v16 = v14;
    unsigned int v17 = v42;
    if (__p)
    {
      long long v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      long long v39 = v38;
      operator delete(v38);
    }
    if (v51)
    {
      long long v52 = (char *)v51;
      operator delete(v51);
    }
    if (v45)
    {
      uint64_t v46 = (char *)v45;
      operator delete(v45);
    }
    if (v17 < v16)
    {
      unsigned int v42 = *v13;
      sub_102843C((uint64_t)&v43, (uint64_t *)v15);
      do
      {
        long long v18 = v13;
        uint64_t v19 = v12;
        uint64_t v13 = v11;
        *long long v18 = *v11;
        uint64_t v20 = *(void *)v12;
        *(_DWORD *)(v15 + 8) = *(_DWORD *)(v12 + 8);
        *(void *)uint64_t v15 = v20;
        if (v15 != v12)
        {
          sub_326C0((void *)(v15 + 16), *(char **)(v12 + 16), *(char **)(v12 + 24), (uint64_t)(*(void *)(v12 + 24) - *(void *)(v12 + 16)) >> 3);
          long long v21 = *(_OWORD *)(v12 + 40);
          long long v22 = *(_OWORD *)(v12 + 56);
          long long v23 = *(_OWORD *)(v12 + 72);
          *(void *)(v15 + 88) = *(void *)(v12 + 88);
          *(_OWORD *)(v15 + 72) = v23;
          *(_OWORD *)(v15 + 56) = v22;
          *(_OWORD *)(v15 + 40) = v21;
          sub_BDDEDC((void *)(v15 + 96), *(char **)(v12 + 96), *(char **)(v12 + 104), (uint64_t)(*(void *)(v12 + 104) - *(void *)(v12 + 96)) >> 1);
        }
        long long v24 = *(_OWORD *)(v12 + 120);
        long long v25 = *(_OWORD *)(v12 + 136);
        *(_WORD *)(v15 + 152) = *(_WORD *)(v12 + 152);
        *(_OWORD *)(v15 + 136) = v25;
        *(_OWORD *)(v15 + 120) = v24;
        *(_DWORD *)(v15 + 156) = *(_DWORD *)(v12 + 156);
        long long v26 = *(_OWORD *)(v12 + 160);
        *(void *)(v15 + 176) = *(void *)(v12 + 176);
        *(_OWORD *)(v15 + 160) = v26;
        if (!v10) {
          break;
        }
        unint64_t v10 = (v10 - 1) >> 1;
        long long v11 = (unsigned int *)(a1 + 4 * v10);
        uint64_t v12 = a2 + 184 * v10;
        unsigned int v36 = *v11;
        sub_102843C((uint64_t)v37, (uint64_t *)v12);
        unsigned int v27 = v42;
        if (__p)
        {
          long long v41 = __p;
          operator delete(__p);
        }
        if (v38)
        {
          long long v39 = v38;
          operator delete(v38);
        }
        uint64_t v15 = v19;
      }
      while (v36 < v27);
      *uint64_t v13 = v42;
      uint64_t v28 = v43;
      *(_DWORD *)(v19 + 8) = v44;
      *(void *)uint64_t v19 = v28;
      if ((uint64_t *)v19 != &v43)
      {
        sub_326C0((void *)(v19 + 16), (char *)v45, v46, (v46 - (unsigned char *)v45) >> 3);
        long long v29 = v47;
        long long v30 = v48;
        long long v31 = v49;
        *(void *)(v19 + 88) = v50;
        *(_OWORD *)(v19 + 72) = v31;
        *(_OWORD *)(v19 + 56) = v30;
        *(_OWORD *)(v19 + 40) = v29;
        sub_BDDEDC((void *)(v19 + 96), (char *)v51, v52, (v52 - (unsigned char *)v51) >> 1);
      }
      long long v32 = v53;
      long long v33 = v54;
      *(_WORD *)(v19 + 152) = v55;
      *(_OWORD *)(v19 + 120) = v32;
      *(_OWORD *)(v19 + 136) = v33;
      *(_DWORD *)(v19 + 156) = v56;
      long long v34 = v57;
      *(void *)(v19 + 176) = v58;
      *(_OWORD *)(v19 + 160) = v34;
      if (v51)
      {
        long long v52 = (char *)v51;
        operator delete(v51);
      }
      if (v45)
      {
        uint64_t v46 = (char *)v45;
        operator delete(v45);
      }
    }
  }
}

void sub_1031408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

void sub_103141C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

void sub_1031430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

void sub_1031444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

void *sub_1031458(void *a1, unsigned int a2)
{
  uint64_t v4 = a2;
  v13[0] = a2;
  v13[1] = (unint64_t)&v12;
  v13[2] = (unint64_t)&v11;
  v13[3] = (unint64_t)&v10;
  uint64_t v5 = sub_ED2164(a1, v13);
  *((_DWORD *)v5 + 218) = 0;
  *(_OWORD *)(v5 + 105) = 0u;
  *(_OWORD *)(v5 + 107) = 0u;
  *(_OWORD *)(v5 + 103) = 0u;
  *((_OWORD *)v5 + 48) = 0u;
  *((_OWORD *)v5 + 49) = 0u;
  *((_OWORD *)v5 + 50) = 0u;
  *((_DWORD *)v5 + 204) = 0;
  if (a2)
  {
    unint64_t v6 = (char *)operator new(4 * v4);
    a1[106] = v6;
    a1[107] = v6;
    a1[108] = &v6[4 * v4];
  }
  uint64_t v7 = (char *)operator new(0x3F8uLL);
  a1[103] = v7;
  a1[104] = v7;
  a1[105] = v7 + 1016;
  if (a2)
  {
    uint64_t v8 = (char *)operator new(8 * v4);
    a1[96] = v8;
    a1[97] = v8;
    a1[98] = &v8[8 * v4];
  }
  return a1;
}

void sub_1031534(_Unwind_Exception *a1)
{
  sub_3310C(v2);
  uint64_t v4 = (void **)(v1 + 96);
  uint64_t v5 = (void *)v1[99];
  if (v5)
  {
    v1[100] = v5;
    operator delete(v5);
    unint64_t v6 = *v4;
    if (!*v4)
    {
LABEL_3:
      sub_328138((uint64_t)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    unint64_t v6 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[97] = v6;
  operator delete(v6);
  sub_328138((uint64_t)v1);
  _Unwind_Resume(a1);
}

__n128 sub_10315BC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  while (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8))
  {
    if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24) || a3 == a4) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v12 = *(void *)(a1 + 16);
    uint64_t v13 = *a3;
    unint64_t v14 = *(void *)(*a3 + 32);
    if (__PAIR64__(*(unsigned __int16 *)(v12 + 44), *(_DWORD *)(v12 + 40)) != __PAIR64__(WORD2(v14), v14)) {
      goto LABEL_25;
    }
    if ((HIWORD(v14) & 1) == (*(unsigned char *)(v12 + 46) == 0)) {
      goto LABEL_25;
    }
    unint64_t v15 = *(void *)(v13 + 72);
    if (__PAIR64__(*(unsigned __int16 *)(v12 + 84), *(_DWORD *)(v12 + 80)) != __PAIR64__(WORD2(v15), v15)) {
      goto LABEL_25;
    }
    if ((HIWORD(v15) & 1) == (*(unsigned char *)(v12 + 86) == 0)) {
      goto LABEL_25;
    }
    unsigned int v16 = *(_DWORD *)(v12 + 88);
    if ((unsigned __int16)*(_DWORD *)(v13 + 80) != (unsigned __int16)v16
      || (*(_DWORD *)(v13 + 80) ^ v16) >> 16
      || ((*(unsigned char *)(v13 + 88) ^ *(unsigned char *)(v12 + 96)) & 3) != 0
      || ((*(_WORD *)(v13 + 84) ^ *(_WORD *)(v12 + 92)) & 0x7FFF) != 0
      || ((*(unsigned char *)(v13 + 88) ^ *(unsigned char *)(v12 + 96)) & 0x1C) != 0
      || *(unsigned __int16 *)(v13 + 86) != *(unsigned __int16 *)(v12 + 94))
    {
      goto LABEL_25;
    }
    unsigned int v17 = *(_DWORD *)v12;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)v12;
    *(unsigned char *)(a1 + 24) = 0;
    if (sub_EDBF4C(*(void **)a1, v17) == 1)
    {
      sub_EDBDF0(*(void **)a1, *(_DWORD *)(a1 + 8), (uint64_t)&v20);
      uint64_t v10 = *v20 + 104 * v21;
    }
    else
    {
      uint64_t v10 = 0;
    }
    *(void *)(a1 + 16) = v10;
    ++a3;
  }
  if (a3 != a4) {
    goto LABEL_12;
  }
  a3 = a4;
LABEL_25:
  __n128 result = *(__n128 *)a1;
  long long v19 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a5 = *(_OWORD *)a1;
  *(_OWORD *)(a5 + 16) = v19;
  *(void *)(a5 + 32) = a3;
  return result;
}

void sub_1031770(unsigned int *a1, uint64_t *a2, int *a3, uint64_t *a4, uint64_t a5, uint64_t a6, int a7)
{
  while (1)
  {
    uint64_t v15 = (char *)a3 - (char *)a1;
    unint64_t v16 = ((char *)a3 - (char *)a1) >> 2;
    if (!(!v8 & v7))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          goto LABEL_45;
        case 3uLL:
          goto LABEL_55;
        case 4uLL:
          goto LABEL_56;
        case 5uLL:
          goto LABEL_57;
        default:
          JUMPOUT(0);
      }
    }
    if (v15 < 96) {
      goto LABEL_61;
    }
    if (!a6) {
      goto LABEL_58;
    }
    uint64_t v60 = a6;
    unint64_t v17 = v16 >> 1;
    long long v18 = &a2[23 * (v16 >> 1)];
    long long v19 = (unsigned int *)(a3 - 1);
    uint64_t v20 = a4 - 23;
    int v62 = a7;
    int v59 = a4 - 23;
    if ((unint64_t)v15 > 0x200)
    {
      uint64_t v56 = v17;
      unsigned int v21 = &a1[v17];
      sub_1032A64(a1, a2, v21, &a2[23 * (v16 >> 1)], (unsigned int *)a3 - 1, v20);
      long long v57 = a2;
      long long v22 = a2 + 23;
      uint64_t v23 = 23 * v17;
      long long v24 = &a2[v23 - 23];
      sub_1032A64(a1 + 1, v22, v21 - 1, v24, (unsigned int *)a3 - 2, a4 - 46);
      long long v25 = &v22[v23];
      sub_1032A64(a1 + 2, v57 + 46, &a1[v56 + 1], v25, (unsigned int *)a3 - 3, a4 - 69);
      long long v26 = v24;
      unsigned int v27 = v25;
      a2 = v57;
      long long v19 = (unsigned int *)(a3 - 1);
      sub_1032A64(v21 - 1, v26, v21, v18, &a1[v56 + 1], v27);
      unsigned int v28 = *a1;
      *a1 = *v21;
      *unsigned int v21 = v28;
      sub_102FD18(v57, v18);
      a6 = v60 - 1;
      if (a7) {
        goto LABEL_19;
      }
    }
    else
    {
      sub_1032A64(&a1[v17], &a2[23 * (v16 >> 1)], a1, a2, (unsigned int *)a3 - 1, v20);
      a6 = v60 - 1;
      if (a7) {
        goto LABEL_19;
      }
    }
    LODWORD(v73) = *(a1 - 1);
    sub_102843C((uint64_t)&v74, a2 - 23);
    unsigned int v65 = *a1;
    sub_102843C((uint64_t)v68, a2);
    unsigned int v29 = v73;
    if (__p)
    {
      long long v72 = __p;
      operator delete(__p);
    }
    if (v69)
    {
      __int16 v70 = v69;
      operator delete(v69);
    }
    if (v78)
    {
      long long v79 = v78;
      operator delete(v78);
    }
    if (v76)
    {
      long long v77 = v76;
      operator delete(v76);
    }
    if (v29 >= v65) {
      break;
    }
LABEL_19:
    sub_1033534(a1, a2, a3, a4, (uint64_t)&v73);
    long long v31 = v73;
    uint64_t v30 = v74;
    if (!v75) {
      goto LABEL_41;
    }
    BOOL v32 = sub_1033BF4(a1, a2, v73, v74);
    if (sub_1033BF4(v31 + 1, (uint64_t *)(v30 + 184), (unsigned int *)a3, (uint64_t)a4))
    {
      if (v32) {
        return;
      }
      a3 = (int *)v31;
      a4 = (uint64_t *)v30;
      a7 = v62;
    }
    else if (v32)
    {
      a1 = v31 + 1;
      a2 = (uint64_t *)(v30 + 184);
      a7 = v62;
    }
    else
    {
LABEL_41:
      sub_1031770(a1, a2, v31, v30, a5, a6, v62 & 1);
      a7 = 0;
      a1 = v31 + 1;
      a2 = (uint64_t *)(v30 + 184);
    }
  }
  a1 = (unsigned int *)sub_1032E44(a1, a2, a3, a4);
  a2 = v33;
  __int16 v55 = a4 - 46;
  long long v53 = a4 - 69;
  uint64_t v34 = 2 - v60;
  long long v54 = a4;
  uint64_t v58 = v19;
  uint64_t v35 = (char *)a3 - (char *)a1;
  unint64_t v36 = ((char *)a3 - (char *)a1) >> 2;
  if (v36 <= 5) {
    goto LABEL_44;
  }
  while (2)
  {
    if (v35 <= 95)
    {
      LOBYTE(a7) = 0;
LABEL_61:
      if (a7) {
        sub_1031F24(a1, a2, (unsigned int *)a3);
      }
      else {
        sub_1032500(a1, (uint64_t)a2, (unsigned int *)a3);
      }
      return;
    }
    if (v34 != 1)
    {
      unint64_t v37 = v36 >> 1;
      long long v38 = &a2[23 * (v36 >> 1)];
      long long v39 = &a1[v36 >> 1];
      if ((unint64_t)v35 < 0x201)
      {
        sub_1032A64(&a1[v36 >> 1], v38, a1, a2, v19, v59);
      }
      else
      {
        sub_1032A64(a1, a2, &a1[v36 >> 1], v38, v19, v59);
        uint64_t v40 = v37;
        __int16 v61 = &a1[v37];
        uint64_t v63 = v34;
        uint64_t v41 = a5;
        uint64_t v42 = 23 * v37;
        uint64_t v43 = &a2[23 * v37 - 23];
        sub_1032A64(a1 + 1, a2 + 23, v61 - 1, v43, (unsigned int *)a3 - 2, v55);
        int v44 = &a1[v40 + 1];
        a4 = v54;
        unsigned int v45 = &a2[v42 + 23];
        a5 = v41;
        uint64_t v34 = v63;
        sub_1032A64(a1 + 2, a2 + 46, v44, v45, (unsigned int *)a3 - 3, v53);
        uint64_t v46 = v45;
        long long v19 = v58;
        sub_1032A64(v61 - 1, v43, v39, v38, v44, v46);
        unsigned int v47 = *a1;
        *a1 = *v61;
        *__int16 v61 = v47;
        sub_102FD18(a2, v38);
      }
      LODWORD(v73) = *(a1 - 1);
      sub_102843C((uint64_t)&v74, a2 - 23);
      unsigned int v66 = *a1;
      sub_102843C((uint64_t)v68, a2);
      unsigned int v48 = v73;
      if (__p)
      {
        long long v72 = __p;
        operator delete(__p);
      }
      if (v69)
      {
        __int16 v70 = v69;
        operator delete(v69);
      }
      if (v78)
      {
        long long v79 = v78;
        operator delete(v78);
      }
      if (v76)
      {
        long long v77 = v76;
        operator delete(v76);
      }
      if (v48 >= v66)
      {
        a1 = (unsigned int *)sub_1032E44(a1, a2, a3, a4);
        a2 = v49;
        ++v34;
        uint64_t v35 = (char *)a3 - (char *)a1;
        unint64_t v36 = ((char *)a3 - (char *)a1) >> 2;
LABEL_44:
        switch(v36)
        {
          case 0uLL:
          case 1uLL:
            return;
          case 2uLL:
LABEL_45:
            uint64_t v50 = a4 - 23;
            LODWORD(v73) = *(a3 - 1);
            sub_102843C((uint64_t)&v74, v50);
            unsigned int v67 = *a1;
            sub_102843C((uint64_t)v68, a2);
            unsigned int v51 = v73;
            if (__p)
            {
              long long v72 = __p;
              operator delete(__p);
            }
            if (v69)
            {
              __int16 v70 = v69;
              operator delete(v69);
            }
            if (v78)
            {
              long long v79 = v78;
              operator delete(v78);
            }
            if (v76)
            {
              long long v77 = v76;
              operator delete(v76);
            }
            if (v51 < v67)
            {
              unsigned int v52 = *a1;
              *a1 = *(a3 - 1);
              *(a3 - 1) = v52;
              sub_102FD18(a2, v50);
            }
            return;
          case 3uLL:
LABEL_55:
            sub_1032A64(a1, a2, a1 + 1, a2 + 23, (unsigned int *)a3 - 1, a4 - 23);
            return;
          case 4uLL:
LABEL_56:
            sub_1034174(a1, a2, a1 + 1, a2 + 23, a1 + 2, a2 + 46, (unsigned int *)a3 - 1, a4 - 23);
            return;
          case 5uLL:
LABEL_57:
            sub_10343F0(a1, a2, a1 + 1, a2 + 23, a1 + 2, a2 + 46, a1 + 3, a2 + 69, (unsigned int *)a3 - 1, a4 - 23);
            return;
          default:
            continue;
        }
      }
      int v62 = 0;
      a6 = -v34;
      goto LABEL_19;
    }
    break;
  }
LABEL_58:
  if (a1 != (unsigned int *)a3) {
    sub_1034720(a1, a2, (unsigned int *)a3, (uint64_t)a4, (unsigned int *)a3, (uint64_t)a4, a5);
  }
}

void sub_1031EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
}

void sub_1031ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
}

void sub_1031EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
}

void sub_1031F24(unsigned int *a1, uint64_t *a2, unsigned int *a3)
{
  if (a1 == a3) {
    return;
  }
  unint64_t v3 = a3;
  uint64_t v4 = a1;
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a3) {
    return;
  }
  unint64_t v6 = a2;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = a2;
  uint64_t v10 = a1;
  while (2)
  {
    int v71 = v9 + 23;
    long long v72 = v5;
    unsigned int v93 = *v5;
    sub_102843C((uint64_t)&v94, v9 + 23);
    unsigned int v76 = *v10;
    sub_102843C((uint64_t)&v77, v9);
    unsigned int v11 = v93;
    if (__p)
    {
      unsigned int v87 = __p;
      operator delete(__p);
    }
    uint64_t v10 = v72;
    if (v79)
    {
      long long v80 = (char *)v79;
      operator delete(v79);
    }
    if (v102)
    {
      long long v103 = (char *)v102;
      operator delete(v102);
    }
    if (v96)
    {
      uint64_t v97 = (char *)v96;
      operator delete(v96);
    }
    if (v11 >= v76) {
      goto LABEL_4;
    }
    unsigned int v93 = *v72;
    sub_102843C((uint64_t)&v94, v71);
    uint64_t v69 = v8;
    uint64_t v70 = v7;
    uint64_t v12 = v7;
    uint64_t v13 = v8;
    unint64_t v14 = v9 + 23;
    do
    {
      char v75 = v9;
      uint64_t v19 = v12;
      uint64_t v20 = (unsigned int *)((char *)v4 + v13);
      uint64_t v21 = (uint64_t)v6 + v19;
      v20[1] = *v20;
      *(void *)(v21 + 184) = *(uint64_t *)((char *)v6 + v19);
      *(_DWORD *)(v21 + 192) = *(_DWORD *)((char *)v6 + v19 + 8);
      long long v22 = (void **)((char *)v6 + v19 + 200);
      uint64_t v23 = (char *)*v22;
      long long v24 = *(char **)((char *)v6 + v19 + 16);
      long long v25 = *(unsigned char **)((char *)v6 + v19 + 24);
      size_t v26 = v25 - v24;
      unint64_t v27 = (v25 - v24) >> 3;
      uint64_t v28 = *(uint64_t *)((char *)v6 + v19 + 216);
      if (v27 <= (v28 - (uint64_t)*v22) >> 3)
      {
        BOOL v32 = v14 + 3;
        long long v33 = *(unsigned char **)(v21 + 208);
        unint64_t v34 = (v33 - v23) >> 3;
        if (v34 >= v27)
        {
          if (v25 == v24)
          {
LABEL_38:
            unint64_t v6 = a2;
            goto LABEL_39;
          }
          unint64_t v36 = v23;
          uint64_t v35 = v24;
        }
        else
        {
          if (v33 != v23)
          {
            memmove(v23, v24, v33 - v23);
            uint64_t v23 = *(char **)(v21 + 208);
          }
          uint64_t v35 = &v24[8 * v34];
          size_t v26 = v25 - v35;
          if (v25 == v35) {
            goto LABEL_38;
          }
          unint64_t v36 = v23;
        }
        memmove(v36, v35, v26);
        goto LABEL_38;
      }
      if (v23)
      {
        *(uint64_t *)((char *)v6 + v19 + 208) = (uint64_t)v23;
        operator delete(v23);
        uint64_t v28 = 0;
        uint64_t *v22 = 0;
        *(uint64_t *)((char *)v6 + v19 + 208) = 0;
        *(uint64_t *)((char *)v6 + v19 + 216) = 0;
      }
      if ((v26 & 0x8000000000000000) != 0) {
        goto LABEL_57;
      }
      uint64_t v29 = v28 >> 2;
      if (v28 >> 2 <= v27) {
        uint64_t v29 = (v25 - v24) >> 3;
      }
      unint64_t v30 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v29;
      if (v30 >> 61) {
LABEL_57:
      }
        sub_2E00();
      long long v31 = (char *)operator new(8 * v30);
      uint64_t v23 = v31;
      uint64_t *v22 = v31;
      *(uint64_t *)((char *)v6 + v19 + 208) = (uint64_t)v31;
      BOOL v32 = (uint64_t *)((char *)v6 + v19 + 208);
      *(void *)(v21 + 216) = &v31[8 * v30];
      if (v25 != v24) {
        memcpy(v31, v24, v25 - v24);
      }
LABEL_39:
      *BOOL v32 = &v23[v26];
      uint64_t v37 = (uint64_t)v6 + v19;
      long long v38 = *(_OWORD *)((char *)v6 + v19 + 56);
      *(_OWORD *)(v37 + 224) = *(_OWORD *)((char *)v6 + v19 + 40);
      *(_OWORD *)(v37 + 240) = v38;
      *(_OWORD *)(v37 + 256) = *(_OWORD *)((char *)v6 + v19 + 72);
      long long v39 = *(char **)((char *)v6 + v19 + 96);
      *(void *)(v37 + 272) = *(uint64_t *)((char *)v6 + v19 + 88);
      sub_BDDEDC((uint64_t *)((char *)v6 + v19 + 280), v39, *(char **)((char *)v6 + v19 + 104), (*(uint64_t *)((char *)v6 + v19 + 104) - (uint64_t)v39) >> 1);
      long long v40 = *(_OWORD *)((char *)v6 + v19 + 136);
      *(_OWORD *)(v37 + 304) = *(_OWORD *)(v37 + 120);
      *(_OWORD *)(v37 + 320) = v40;
      *(_WORD *)(v37 + 336) = *(_WORD *)(v37 + 152);
      *(_DWORD *)(v37 + 340) = *(_DWORD *)(v37 + 156);
      *(_OWORD *)(v37 + 344) = *(_OWORD *)(v37 + 160);
      *(void *)(v37 + 360) = *(void *)(v37 + 176);
      if (!v13)
      {
        uint64_t v4 = a1;
        long long v57 = a1;
        uint64_t v58 = v6;
        goto LABEL_50;
      }
      uint64_t v4 = a1;
      uint64_t v41 = (uint64_t)v6 + v19;
      unsigned int v42 = *(unsigned int *)((char *)a1 + v13 - 4);
      uint64_t v43 = *(uint64_t *)((char *)v6 + v19 - 184);
      int v78 = *(_DWORD *)((char *)v6 + v19 - 176);
      uint64_t v77 = v43;
      long long v80 = 0;
      long long v81 = 0;
      long long v79 = 0;
      unsigned int v45 = *(unsigned char **)((char *)v6 + v19 - 168);
      int v44 = *(unsigned char **)((char *)v6 + v19 - 160);
      int64_t v46 = v44 - v45;
      if (v44 == v45)
      {
        unsigned int v47 = 0;
      }
      else
      {
        if (v46 < 0) {
          sub_2E00();
        }
        unsigned int v47 = (char *)operator new(v44 - v45);
        long long v79 = v47;
        long long v80 = v47;
        long long v81 = &v47[8 * (v46 >> 3)];
        memcpy(v47, v45, v46);
        long long v80 = &v47[8 * (v46 >> 3)];
      }
      long long v48 = *(_OWORD *)(v41 - 144);
      long long v49 = *(_OWORD *)(v41 - 128);
      long long v50 = *(_OWORD *)(v41 - 112);
      uint64_t v85 = *(void *)(v41 - 96);
      long long v83 = v49;
      long long v84 = v50;
      long long v82 = v48;
      unsigned int v87 = 0;
      unsigned int v88 = 0;
      __n128 __p = 0;
      uint64_t v51 = *(void *)(v41 - 88);
      uint64_t v52 = *(void *)(v41 - 80);
      uint64_t v53 = v52 - v51;
      if (v52 == v51)
      {
        long long v15 = *(_OWORD *)((char *)v6 + v19 - 64);
        long long v16 = *(_OWORD *)((char *)v6 + v19 - 48);
        long long v17 = *(_OWORD *)((char *)v6 + v19 - 16);
        long long v91 = *(_OWORD *)((char *)v6 + v19 - 32);
        long long v92 = v17;
        long long v89 = v15;
        long long v90 = v16;
        unsigned int v18 = v93;
        if (!v47) {
          goto LABEL_17;
        }
LABEL_16:
        long long v80 = v47;
        operator delete(v47);
        goto LABEL_17;
      }
      if (v53 < 0) {
        sub_2E00();
      }
      __n128 __p = operator new(v52 - v51);
      unsigned int v87 = __p;
      unsigned int v88 = (char *)__p + 2 * (v53 >> 1);
      long long v54 = *(_OWORD *)((char *)v6 + v19 - 64);
      long long v55 = *(_OWORD *)((char *)v6 + v19 - 48);
      long long v56 = *(_OWORD *)((char *)v6 + v19 - 16);
      long long v91 = *(_OWORD *)((char *)v6 + v19 - 32);
      long long v92 = v56;
      long long v89 = v54;
      long long v90 = v55;
      unsigned int v18 = v93;
      unsigned int v87 = __p;
      operator delete(__p);
      unsigned int v47 = (char *)v79;
      if (v79) {
        goto LABEL_16;
      }
LABEL_17:
      unint64_t v14 = v75;
      uint64_t v9 = v75 - 23;
      v13 -= 4;
      uint64_t v12 = v19 - 184;
    }
    while (v18 < v42);
    long long v57 = (unsigned int *)((char *)a1 + v13 + 4);
    uint64_t v58 = (uint64_t *)((char *)v6 + v19);
LABEL_50:
    *long long v57 = v93;
    uint64_t v59 = v94;
    *((_DWORD *)v58 + 2) = v95;
    *uint64_t v58 = v59;
    if (v58 != &v94)
    {
      sub_326C0(v58 + 2, (char *)v96, v97, (v97 - (unsigned char *)v96) >> 3);
      long long v60 = v98;
      long long v61 = v99;
      long long v62 = v100;
      v58[11] = v101;
      *(_OWORD *)(v58 + 9) = v62;
      *(_OWORD *)(v58 + 7) = v61;
      *(_OWORD *)(v58 + 5) = v60;
      sub_BDDEDC(v58 + 12, (char *)v102, v103, (v103 - (unsigned char *)v102) >> 1);
    }
    uint64_t v63 = (uint64_t)v6 + v19 + 160;
    uint64_t v64 = (uint64_t)v6 + v19 + 120;
    unint64_t v3 = a3;
    long long v65 = v104;
    long long v66 = v105;
    *(_WORD *)(v64 + 32) = v106;
    *(_OWORD *)uint64_t v64 = v65;
    *(_OWORD *)(v64 + 16) = v66;
    *((_DWORD *)v58 + 39) = v107;
    long long v67 = v108;
    *(void *)(v63 + 16) = v109;
    *(_OWORD *)uint64_t v63 = v67;
    if (v102)
    {
      long long v103 = (char *)v102;
      operator delete(v102);
    }
    uint64_t v8 = v69;
    uint64_t v7 = v70;
    uint64_t v10 = v72;
    if (v96)
    {
      uint64_t v97 = (char *)v96;
      operator delete(v96);
    }
LABEL_4:
    uint64_t v5 = v10 + 1;
    v8 += 4;
    v7 += 184;
    uint64_t v9 = v71;
    if (v10 + 1 != v3) {
      continue;
    }
    break;
  }
}

void sub_103249C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
}

void sub_1032500(unsigned int *a1, uint64_t a2, unsigned int *a3)
{
  if (a1 != a3)
  {
    unint64_t v3 = a3;
    uint64_t v4 = a1;
    uint64_t v5 = a1 + 1;
    if (a1 + 1 != a3)
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v4 = v5;
        uint64_t v8 = a2 + 184;
        unsigned int v78 = *v5;
        sub_102843C((uint64_t)&v79, (uint64_t *)(a2 + 184));
        unsigned int v61 = *v7;
        sub_102843C((uint64_t)&v62, (uint64_t *)a2);
        unsigned int v9 = v78;
        if (__p)
        {
          long long v72 = __p;
          operator delete(__p);
        }
        if (v64)
        {
          long long v65 = (char *)v64;
          operator delete(v64);
        }
        if (v87)
        {
          unsigned int v88 = (char *)v87;
          operator delete(v87);
        }
        if (v81)
        {
          long long v82 = (char *)v81;
          operator delete(v81);
        }
        if (v9 < v61) {
          break;
        }
LABEL_4:
        uint64_t v5 = v4 + 1;
        a2 = v8;
        if (v4 + 1 == v3) {
          return;
        }
      }
      unsigned int v78 = *v4;
      sub_102843C((uint64_t)&v79, (uint64_t *)(a2 + 184));
      uint64_t v59 = a2 + 184;
      long long v60 = v4;
      uint64_t v10 = v4;
      uint64_t v11 = a2 + 184;
      while (1)
      {
        uint64_t v12 = a2;
        *uint64_t v10 = *(v10 - 1);
        *(void *)(a2 + 184) = *(void *)a2;
        *(_DWORD *)(a2 + 192) = *(_DWORD *)(a2 + 8);
        long long v15 = *(char **)(a2 + 200);
        uint64_t v13 = (void *)(a2 + 200);
        unint64_t v14 = v15;
        long long v17 = *(char **)(v12 + 16);
        long long v16 = *(unsigned char **)(v12 + 24);
        size_t v18 = v16 - v17;
        unint64_t v19 = (v16 - v17) >> 3;
        uint64_t v20 = *(void *)(v12 + 216);
        if (v19 <= (v20 - (uint64_t)v15) >> 3)
        {
          long long v24 = (void *)(v11 + 24);
          long long v25 = *(unsigned char **)(v12 + 208);
          unint64_t v26 = (v25 - v14) >> 3;
          if (v26 >= v19)
          {
            if (v16 == v17) {
              goto LABEL_36;
            }
            uint64_t v28 = v14;
            unint64_t v27 = *(char **)(v12 + 16);
            goto LABEL_35;
          }
          if (v25 != v14)
          {
            memmove(v14, *(const void **)(v12 + 16), v25 - v14);
            unint64_t v14 = *(char **)(v12 + 208);
          }
          unint64_t v27 = &v17[8 * v26];
          size_t v18 = v16 - v27;
          if (v16 != v27)
          {
            uint64_t v28 = v14;
LABEL_35:
            memmove(v28, v27, v18);
          }
        }
        else
        {
          if (v14)
          {
            *(void *)(v12 + 208) = v14;
            operator delete(v14);
            uint64_t v20 = 0;
            *uint64_t v13 = 0;
            v13[1] = 0;
            v13[2] = 0;
          }
          if ((v18 & 0x8000000000000000) != 0) {
            goto LABEL_53;
          }
          uint64_t v21 = v20 >> 2;
          if (v20 >> 2 <= v19) {
            uint64_t v21 = (v16 - v17) >> 3;
          }
          unint64_t v22 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v21;
          if (v22 >> 61) {
LABEL_53:
          }
            sub_2E00();
          uint64_t v23 = (char *)operator new(8 * v22);
          unint64_t v14 = v23;
          *(void *)(v12 + 208) = v23;
          long long v24 = (void *)(v12 + 208);
          *(void *)(v12 + 200) = v23;
          *(void *)(v12 + 216) = &v23[8 * v22];
          if (v16 != v17) {
            memcpy(v23, v17, v16 - v17);
          }
        }
LABEL_36:
        *long long v24 = &v14[v18];
        long long v29 = *(_OWORD *)(v12 + 56);
        *(_OWORD *)(v12 + 224) = *(_OWORD *)(v12 + 40);
        *(_OWORD *)(v12 + 240) = v29;
        *(_OWORD *)(v12 + 256) = *(_OWORD *)(v12 + 72);
        unint64_t v30 = *(char **)(v12 + 96);
        *(void *)(v12 + 272) = *(void *)(v12 + 88);
        sub_BDDEDC((void *)(v12 + 280), v30, *(char **)(v12 + 104), (uint64_t)(*(void *)(v12 + 104) - (void)v30) >> 1);
        long long v31 = *(_OWORD *)(v12 + 136);
        *(_OWORD *)(v12 + 304) = *(_OWORD *)(v12 + 120);
        *(_OWORD *)(v12 + 320) = v31;
        *(_WORD *)(v12 + 336) = *(_WORD *)(v12 + 152);
        *(_DWORD *)(v12 + 340) = *(_DWORD *)(v12 + 156);
        *(_OWORD *)(v12 + 344) = *(_OWORD *)(v12 + 160);
        *(void *)(v12 + 360) = *(void *)(v12 + 176);
        unsigned int v32 = *(v10 - 2);
        a2 = v12 - 184;
        uint64_t v33 = *(void *)(v12 - 184);
        int v63 = *(_DWORD *)(v12 - 176);
        uint64_t v62 = v33;
        long long v65 = 0;
        long long v66 = 0;
        uint64_t v64 = 0;
        uint64_t v35 = *(unsigned char **)(v12 - 168);
        unint64_t v34 = *(unsigned char **)(v12 - 160);
        int64_t v36 = v34 - v35;
        if (v34 == v35)
        {
          uint64_t v37 = 0;
        }
        else
        {
          if (v36 < 0) {
            sub_2E00();
          }
          uint64_t v37 = (char *)operator new(v34 - v35);
          uint64_t v64 = v37;
          long long v65 = v37;
          long long v66 = &v37[8 * (v36 >> 3)];
          memcpy(v37, v35, v36);
          long long v65 = &v37[8 * (v36 >> 3)];
        }
        long long v38 = *(_OWORD *)(v12 - 144);
        long long v39 = *(_OWORD *)(v12 - 128);
        long long v40 = *(_OWORD *)(v12 - 112);
        uint64_t v70 = *(void *)(v12 - 96);
        long long v68 = v39;
        long long v69 = v40;
        long long v67 = v38;
        long long v72 = 0;
        uint64_t v73 = 0;
        __n128 __p = 0;
        uint64_t v41 = *(void *)(v12 - 88);
        uint64_t v42 = *(void *)(v12 - 80);
        uint64_t v43 = v42 - v41;
        if (v42 != v41)
        {
          if (v43 < 0) {
            sub_2E00();
          }
          __n128 __p = operator new(v42 - v41);
          long long v72 = __p;
          uint64_t v73 = (char *)__p + 2 * (v43 >> 1);
          long long v44 = *(_OWORD *)(v12 - 64);
          long long v45 = *(_OWORD *)(v12 - 48);
          long long v46 = *(_OWORD *)(v12 - 16);
          long long v76 = *(_OWORD *)(v12 - 32);
          long long v77 = v46;
          long long v74 = v44;
          long long v75 = v45;
          unsigned int v47 = v78;
          long long v72 = __p;
          operator delete(__p);
          uint64_t v37 = (char *)v64;
          if (!v64) {
            goto LABEL_15;
          }
LABEL_45:
          long long v65 = v37;
          operator delete(v37);
          goto LABEL_15;
        }
        long long v48 = *(_OWORD *)(v12 - 64);
        long long v49 = *(_OWORD *)(v12 - 48);
        long long v50 = *(_OWORD *)(v12 - 16);
        long long v76 = *(_OWORD *)(v12 - 32);
        long long v77 = v50;
        long long v74 = v48;
        long long v75 = v49;
        unsigned int v47 = v78;
        if (v37) {
          goto LABEL_45;
        }
LABEL_15:
        --v10;
        uint64_t v11 = v12;
        if (v47 >= v32)
        {
          *uint64_t v10 = v78;
          int v51 = v80;
          *(void *)uint64_t v12 = v79;
          *(_DWORD *)(v12 + 8) = v51;
          if ((uint64_t *)v12 != &v79)
          {
            sub_326C0((void *)(v12 + 16), (char *)v81, v82, (v82 - (unsigned char *)v81) >> 3);
            long long v52 = v83;
            long long v53 = v84;
            long long v54 = v85;
            *(void *)(v12 + 88) = v86;
            *(_OWORD *)(v12 + 56) = v53;
            *(_OWORD *)(v12 + 72) = v54;
            *(_OWORD *)(v12 + 40) = v52;
            sub_BDDEDC((void *)(v12 + 96), (char *)v87, v88, (v88 - (unsigned char *)v87) >> 1);
          }
          long long v55 = v89;
          long long v56 = v90;
          *(_WORD *)(v12 + 152) = v91;
          *(_OWORD *)(v12 + 120) = v55;
          *(_OWORD *)(v12 + 136) = v56;
          *(_DWORD *)(v12 + 156) = v92;
          long long v57 = v93;
          *(void *)(v12 + 176) = v94;
          *(_OWORD *)(v12 + 160) = v57;
          if (v87)
          {
            unsigned int v88 = (char *)v87;
            operator delete(v87);
          }
          unint64_t v3 = a3;
          uint64_t v8 = v59;
          uint64_t v4 = v60;
          if (v81)
          {
            long long v82 = (char *)v81;
            operator delete(v81);
          }
          goto LABEL_4;
        }
      }
    }
  }
}

void sub_1032A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
}

uint64_t sub_1032A64(unsigned int *a1, uint64_t *a2, unsigned int *a3, uint64_t *a4, unsigned int *a5, uint64_t *a6)
{
  unsigned int v34 = *a3;
  sub_102843C((uint64_t)v35, a4);
  unsigned int v24 = *a1;
  sub_102843C((uint64_t)v29, a2);
  unsigned int v12 = v34;
  if (__p)
  {
    uint64_t v33 = __p;
    operator delete(__p);
  }
  if (v30)
  {
    long long v31 = v30;
    operator delete(v30);
  }
  if (v38)
  {
    long long v39 = v38;
    operator delete(v38);
  }
  if (v36)
  {
    uint64_t v37 = v36;
    operator delete(v36);
  }
  if (v12 < v24)
  {
    unsigned int v34 = *a5;
    sub_102843C((uint64_t)v35, a6);
    unsigned int v25 = *a3;
    sub_102843C((uint64_t)v29, a4);
    unsigned int v13 = v34;
    if (__p)
    {
      uint64_t v33 = __p;
      operator delete(__p);
    }
    if (v30)
    {
      long long v31 = v30;
      operator delete(v30);
    }
    if (v38)
    {
      long long v39 = v38;
      operator delete(v38);
    }
    if (v36)
    {
      uint64_t v37 = v36;
      operator delete(v36);
    }
    unsigned int v14 = *a1;
    if (v13 < v25)
    {
      *a1 = *a5;
      *a5 = v14;
      sub_102FD18(a2, a6);
      return 1;
    }
    *a1 = *a3;
    *a3 = v14;
    sub_102FD18(a2, a4);
    unsigned int v34 = *a5;
    sub_102843C((uint64_t)v35, a6);
    unsigned int v28 = *a3;
    sub_102843C((uint64_t)v29, a4);
    unsigned int v21 = v34;
    if (__p)
    {
      uint64_t v33 = __p;
      operator delete(__p);
    }
    if (v30)
    {
      long long v31 = v30;
      operator delete(v30);
    }
    if (v38)
    {
      long long v39 = v38;
      operator delete(v38);
    }
    if (v36)
    {
      uint64_t v37 = v36;
      operator delete(v36);
    }
    if (v21 >= v28) {
      return 1;
    }
    unsigned int v22 = *a3;
    *a3 = *a5;
    *a5 = v22;
    unint64_t v19 = a4;
    uint64_t v20 = a6;
LABEL_49:
    sub_102FD18(v19, v20);
    return 2;
  }
  unsigned int v34 = *a5;
  sub_102843C((uint64_t)v35, a6);
  unsigned int v26 = *a3;
  sub_102843C((uint64_t)v29, a4);
  unsigned int v15 = v34;
  if (__p)
  {
    uint64_t v33 = __p;
    operator delete(__p);
  }
  if (v30)
  {
    long long v31 = v30;
    operator delete(v30);
  }
  if (v38)
  {
    long long v39 = v38;
    operator delete(v38);
  }
  if (v36)
  {
    uint64_t v37 = v36;
    operator delete(v36);
  }
  if (v15 < v26)
  {
    unsigned int v16 = *a3;
    *a3 = *a5;
    *a5 = v16;
    sub_102FD18(a4, a6);
    unsigned int v34 = *a3;
    sub_102843C((uint64_t)v35, a4);
    unsigned int v27 = *a1;
    sub_102843C((uint64_t)v29, a2);
    unsigned int v17 = v34;
    if (__p)
    {
      uint64_t v33 = __p;
      operator delete(__p);
    }
    if (v30)
    {
      long long v31 = v30;
      operator delete(v30);
    }
    if (v38)
    {
      long long v39 = v38;
      operator delete(v38);
    }
    if (v36)
    {
      uint64_t v37 = v36;
      operator delete(v36);
    }
    if (v17 >= v27) {
      return 1;
    }
    unsigned int v18 = *a1;
    *a1 = *a3;
    *a3 = v18;
    unint64_t v19 = a2;
    uint64_t v20 = a4;
    goto LABEL_49;
  }
  return 0;
}

void sub_1032DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
}

void sub_1032DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
}

void sub_1032E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
}

void sub_1032E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
}

void sub_1032E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
}

int *sub_1032E44(unsigned int *a1, uint64_t *a2, int *a3, uint64_t *a4)
{
  unsigned int v106 = *a1;
  sub_102843C((uint64_t)&v107, a2);
  unsigned int v88 = *(a3 - 1);
  sub_102843C((uint64_t)&v90, a4 - 23);
  unsigned int v8 = v106;
  if (__p)
  {
    long long v100 = (char *)__p;
    operator delete(__p);
  }
  if (v92)
  {
    long long v93 = (char *)v92;
    operator delete(v92);
  }
  unsigned int v87 = a4;
  if (v8 >= v88)
  {
    unsigned int v14 = (int *)(a1 + 1);
    unsigned int v15 = a2 + 23;
    do
    {
      unsigned int v9 = v14;
      uint64_t v10 = v15;
      if (v14 >= a3) {
        break;
      }
      unsigned int v89 = *v14;
      sub_102843C((uint64_t)&v90, v15);
      unsigned int v16 = v106;
      if (__p)
      {
        long long v100 = (char *)__p;
        operator delete(__p);
      }
      if (v92)
      {
        long long v93 = (char *)v92;
        operator delete(v92);
      }
      unsigned int v14 = v9 + 1;
      unsigned int v15 = v10 + 23;
    }
    while (v16 >= v89);
  }
  else
  {
    unsigned int v9 = (int *)a1;
    uint64_t v10 = a2;
    do
    {
      unsigned int v11 = v9[1];
      ++v9;
      v10 += 23;
      sub_102843C((uint64_t)&v90, v10);
      unsigned int v12 = v11;
      unsigned int v13 = v106;
      if (__p)
      {
        long long v100 = (char *)__p;
        operator delete(__p);
      }
      if (v92)
      {
        long long v93 = (char *)v92;
        operator delete(v92);
      }
    }
    while (v13 >= v12);
  }
  if (v9 < a3)
  {
    do
    {
      unsigned int v17 = *--a3;
      v87 -= 23;
      sub_102843C((uint64_t)&v90, v87);
      unsigned int v18 = v17;
      unsigned int v19 = v106;
      if (__p)
      {
        long long v100 = (char *)__p;
        operator delete(__p);
      }
      if (v92)
      {
        long long v93 = (char *)v92;
        operator delete(v92);
      }
    }
    while (v19 < v18);
  }
  long long v83 = a2;
  if (v9 < a3)
  {
    uint64_t v20 = a3;
    do
    {
      int v21 = *v9;
      int *v9 = *v20;
      uint64_t v86 = v20;
      int *v20 = v21;
      sub_102FD18(v10, v87);
      unsigned int v22 = v10;
      do
      {
        unsigned int v24 = v9[1];
        long long v85 = v9 + 1;
        uint64_t v25 = v10[23];
        v10 += 23;
        int v91 = *((_DWORD *)v10 + 2);
        uint64_t v90 = v25;
        long long v93 = 0;
        uint64_t v94 = 0;
        int v92 = 0;
        unsigned int v27 = (unsigned char *)v10[2];
        unsigned int v26 = (unsigned char *)v10[3];
        long long v84 = v10;
        int64_t v28 = v26 - v27;
        if (v26 == v27)
        {
          long long v29 = 0;
        }
        else
        {
          if (v28 < 0) {
            sub_2E00();
          }
          long long v29 = (char *)operator new(v26 - v27);
          int v92 = v29;
          long long v93 = v29;
          uint64_t v94 = &v29[8 * (v28 >> 3)];
          memcpy(v29, v27, v28);
          long long v93 = &v29[8 * (v28 >> 3)];
        }
        long long v30 = *((_OWORD *)v22 + 14);
        long long v31 = *((_OWORD *)v22 + 15);
        long long v32 = *((_OWORD *)v22 + 16);
        uint64_t v98 = v22[34];
        long long v96 = v31;
        long long v97 = v32;
        long long v95 = v30;
        long long v100 = 0;
        uint64_t v101 = 0;
        __n128 __p = 0;
        unsigned int v34 = (unsigned char *)v22[35];
        uint64_t v33 = (unsigned char *)v22[36];
        int64_t v35 = v33 - v34;
        if (v33 == v34)
        {
          long long v41 = *((_OWORD *)v22 + 19);
          long long v42 = *((_OWORD *)v22 + 20);
          long long v43 = *((_OWORD *)v22 + 22);
          long long v104 = *((_OWORD *)v22 + 21);
          long long v105 = v43;
          long long v102 = v41;
          long long v103 = v42;
          unsigned int v40 = v106;
          if (!v29) {
            goto LABEL_30;
          }
LABEL_41:
          long long v93 = v29;
          operator delete(v29);
          goto LABEL_30;
        }
        if (v35 < 0) {
          sub_2E00();
        }
        int64_t v36 = (char *)operator new(v33 - v34);
        __n128 __p = v36;
        long long v100 = v36;
        uint64_t v101 = &v36[2 * (v35 >> 1)];
        memcpy(v36, v34, v35);
        long long v37 = *((_OWORD *)v22 + 22);
        long long v39 = *((_OWORD *)v22 + 19);
        long long v38 = *((_OWORD *)v22 + 20);
        long long v104 = *((_OWORD *)v22 + 21);
        long long v105 = v37;
        long long v102 = v39;
        long long v103 = v38;
        unsigned int v40 = v106;
        long long v100 = v36;
        operator delete(v36);
        long long v29 = (char *)v92;
        if (v92) {
          goto LABEL_41;
        }
LABEL_30:
        unsigned int v22 = v10;
        BOOL v23 = v40 >= v24;
        unsigned int v9 = v85;
      }
      while (v23);
      long long v44 = v87;
      long long v45 = v87;
      do
      {
        unsigned int v46 = *--v86;
        uint64_t v47 = *(v44 - 23);
        v44 -= 23;
        int v91 = *((_DWORD *)v44 + 2);
        uint64_t v90 = v47;
        long long v93 = 0;
        uint64_t v94 = 0;
        int v92 = 0;
        long long v49 = (unsigned char *)v44[2];
        long long v48 = (unsigned char *)v44[3];
        int64_t v50 = v48 - v49;
        unsigned int v87 = v44;
        if (v48 == v49)
        {
          int v51 = 0;
        }
        else
        {
          if (v50 < 0) {
            sub_2E00();
          }
          int v51 = (char *)operator new(v48 - v49);
          int v92 = v51;
          long long v93 = v51;
          uint64_t v94 = &v51[8 * (v50 >> 3)];
          memcpy(v51, v49, v50);
          long long v93 = &v51[8 * (v50 >> 3)];
        }
        long long v52 = *((_OWORD *)v45 - 9);
        long long v53 = *((_OWORD *)v45 - 8);
        long long v54 = *((_OWORD *)v45 - 7);
        uint64_t v98 = *(v45 - 12);
        long long v96 = v53;
        long long v97 = v54;
        long long v95 = v52;
        long long v100 = 0;
        uint64_t v101 = 0;
        __n128 __p = 0;
        long long v56 = (unsigned char *)*(v45 - 11);
        long long v55 = (unsigned char *)*(v45 - 10);
        int64_t v57 = v55 - v56;
        if (v55 == v56)
        {
          long long v63 = *((_OWORD *)v45 - 4);
          long long v64 = *((_OWORD *)v45 - 3);
          long long v65 = *((_OWORD *)v45 - 1);
          long long v104 = *((_OWORD *)v45 - 2);
          long long v105 = v65;
          long long v102 = v63;
          long long v103 = v64;
          unsigned int v62 = v106;
          if (!v51) {
            goto LABEL_42;
          }
LABEL_52:
          long long v93 = v51;
          operator delete(v51);
          goto LABEL_42;
        }
        if (v57 < 0) {
          sub_2E00();
        }
        uint64_t v58 = (char *)operator new(v55 - v56);
        __n128 __p = v58;
        long long v100 = v58;
        uint64_t v101 = &v58[2 * (v57 >> 1)];
        memcpy(v58, v56, v57);
        long long v100 = &v58[2 * (v57 >> 1)];
        long long v59 = *((_OWORD *)v45 - 1);
        long long v61 = *((_OWORD *)v45 - 4);
        long long v60 = *((_OWORD *)v45 - 3);
        long long v104 = *((_OWORD *)v45 - 2);
        long long v105 = v59;
        long long v102 = v61;
        long long v103 = v60;
        unsigned int v62 = v106;
        long long v100 = v58;
        operator delete(v58);
        int v51 = (char *)v92;
        if (v92) {
          goto LABEL_52;
        }
LABEL_42:
        long long v45 = v44;
      }
      while (v62 < v46);
      unsigned int v9 = v85;
      uint64_t v20 = v86;
      uint64_t v10 = v84;
    }
    while (v85 < v86);
  }
  long long v66 = (unsigned int *)(v9 - 1);
  long long v67 = v10 - 23;
  if (v9 - 1 != (int *)a1)
  {
    *a1 = *v66;
    uint64_t v68 = *v67;
    *((_DWORD *)v83 + 2) = *((_DWORD *)v10 - 44);
    uint64_t *v83 = v68;
    if (v67 != v83)
    {
      sub_326C0(v83 + 2, (char *)*(v10 - 21), (char *)*(v10 - 20), (*(v10 - 20) - *(v10 - 21)) >> 3);
      long long v69 = *((_OWORD *)v10 - 9);
      long long v70 = *((_OWORD *)v10 - 8);
      long long v71 = *((_OWORD *)v10 - 7);
      v83[11] = *(v10 - 12);
      *(_OWORD *)(v83 + 9) = v71;
      *(_OWORD *)(v83 + 7) = v70;
      *(_OWORD *)(v83 + 5) = v69;
      sub_BDDEDC(v83 + 12, (char *)*(v10 - 11), (char *)*(v10 - 10), (*(v10 - 10) - *(v10 - 11)) >> 1);
    }
    long long v72 = *((_OWORD *)v10 - 4);
    long long v73 = *((_OWORD *)v10 - 3);
    *((_WORD *)v83 + 76) = *((_WORD *)v10 - 16);
    *(_OWORD *)(v83 + 17) = v73;
    *(_OWORD *)(v83 + 15) = v72;
    *((_DWORD *)v83 + 39) = *((_DWORD *)v10 - 7);
    long long v74 = *(_OWORD *)(v10 - 3);
    v83[22] = *(v10 - 1);
    *((_OWORD *)v83 + 10) = v74;
  }
  *long long v66 = v106;
  uint64_t v75 = v107;
  *((_DWORD *)v10 - 44) = v108;
  *long long v67 = v75;
  if (v67 != &v107)
  {
    sub_326C0(v10 - 21, (char *)v109, v110, (v110 - (unsigned char *)v109) >> 3);
    long long v76 = v111;
    long long v77 = v112;
    long long v78 = v113;
    *(v10 - 12) = v114;
    *((_OWORD *)v10 - 8) = v77;
    *((_OWORD *)v10 - 7) = v78;
    *((_OWORD *)v10 - 9) = v76;
    sub_BDDEDC(v10 - 11, (char *)v115, v116, (v116 - (unsigned char *)v115) >> 1);
  }
  long long v79 = v117;
  long long v80 = v118;
  *((_WORD *)v10 - 16) = v119;
  *((_OWORD *)v10 - 4) = v79;
  *((_OWORD *)v10 - 3) = v80;
  *((_DWORD *)v10 - 7) = v120;
  long long v81 = v121;
  *(v10 - 1) = v122;
  *(_OWORD *)(v10 - 3) = v81;
  if (v115)
  {
    long long v116 = (char *)v115;
    operator delete(v115);
  }
  if (v109)
  {
    long long v110 = (char *)v109;
    operator delete(v109);
  }
  return v9;
}

void sub_10334B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
}

void sub_103350C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (a21) {
    operator delete(a21);
  }
  sub_102DA84(&a42);
  _Unwind_Resume(a1);
}

void sub_1033534(unsigned int *a1@<X0>, uint64_t *a2@<X1>, int *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6 = a2;
  unsigned int v105 = *a1;
  sub_102843C((uint64_t)&v106, a2);
  uint64_t v9 = 0;
  uint64_t v10 = v6;
  do
  {
    v10 += 23;
    unsigned int v88 = a1[v9 + 1];
    sub_102843C((uint64_t)&v89, v10);
    unsigned int v11 = v105;
    if (__p)
    {
      long long v99 = (char *)__p;
      operator delete(__p);
    }
    if (v91)
    {
      int v92 = (char *)v91;
      operator delete(v91);
    }
    ++v9;
  }
  while (v88 < v11);
  unsigned int v12 = (int *)&a1[v9];
  if (v9 == 1)
  {
    do
    {
      if (v12 >= a3) {
        break;
      }
      unsigned int v16 = *--a3;
      a4 -= 23;
      sub_102843C((uint64_t)&v89, a4);
      unsigned int v17 = v105;
      unsigned int v18 = v16;
      if (__p)
      {
        long long v99 = (char *)__p;
        operator delete(__p);
      }
      if (v91)
      {
        int v92 = (char *)v91;
        operator delete(v91);
      }
    }
    while (v18 >= v17);
  }
  else
  {
    do
    {
      unsigned int v13 = *--a3;
      a4 -= 23;
      sub_102843C((uint64_t)&v89, a4);
      unsigned int v14 = v105;
      unsigned int v15 = v13;
      if (__p)
      {
        long long v99 = (char *)__p;
        operator delete(__p);
      }
      if (v91)
      {
        int v92 = (char *)v91;
        operator delete(v91);
      }
    }
    while (v15 >= v14);
  }
  unsigned int v19 = v12;
  BOOL v20 = v12 >= a3;
  if (v20)
  {
    long long v66 = (unsigned int *)(v19 - 1);
    long long v67 = v10 - 23;
    if (v66 != a1) {
      goto LABEL_50;
    }
    goto LABEL_53;
  }
  long long v82 = v6;
  uint64_t v83 = a5;
  while (2)
  {
    int v21 = *v19;
    int *v19 = *a3;
    uint64_t v86 = a3;
    *a3 = v21;
    sub_102FD18(v10, a4);
    unsigned int v22 = v10;
    do
    {
      unsigned int v24 = v19[1];
      long long v84 = v19 + 1;
      uint64_t v25 = v10[23];
      v10 += 23;
      int v90 = *((_DWORD *)v10 + 2);
      uint64_t v89 = v25;
      int v92 = 0;
      long long v93 = 0;
      int v91 = 0;
      unsigned int v27 = (unsigned char *)v10[2];
      unsigned int v26 = (unsigned char *)v10[3];
      long long v85 = v10;
      int64_t v28 = v26 - v27;
      if (v26 == v27)
      {
        long long v29 = 0;
      }
      else
      {
        if (v28 < 0) {
          sub_2E00();
        }
        long long v29 = (char *)operator new(v26 - v27);
        int v91 = v29;
        int v92 = v29;
        long long v93 = &v29[8 * (v28 >> 3)];
        memcpy(v29, v27, v28);
        int v92 = &v29[8 * (v28 >> 3)];
      }
      long long v30 = *((_OWORD *)v22 + 14);
      long long v31 = *((_OWORD *)v22 + 15);
      long long v32 = *((_OWORD *)v22 + 16);
      uint64_t v97 = v22[34];
      long long v95 = v31;
      long long v96 = v32;
      long long v94 = v30;
      long long v99 = 0;
      long long v100 = 0;
      __n128 __p = 0;
      unsigned int v34 = (unsigned char *)v22[35];
      uint64_t v33 = (unsigned char *)v22[36];
      int64_t v35 = v33 - v34;
      if (v33 == v34)
      {
        long long v41 = *((_OWORD *)v22 + 19);
        long long v42 = *((_OWORD *)v22 + 20);
        long long v43 = *((_OWORD *)v22 + 22);
        long long v103 = *((_OWORD *)v22 + 21);
        long long v104 = v43;
        long long v101 = v41;
        long long v102 = v42;
        unsigned int v40 = v105;
        if (!v29) {
          goto LABEL_24;
        }
LABEL_34:
        int v92 = v29;
        operator delete(v29);
        goto LABEL_24;
      }
      if (v35 < 0) {
        sub_2E00();
      }
      int64_t v36 = (char *)operator new(v33 - v34);
      __n128 __p = v36;
      long long v99 = v36;
      long long v100 = &v36[2 * (v35 >> 1)];
      memcpy(v36, v34, v35);
      long long v37 = *((_OWORD *)v22 + 22);
      long long v39 = *((_OWORD *)v22 + 19);
      long long v38 = *((_OWORD *)v22 + 20);
      long long v103 = *((_OWORD *)v22 + 21);
      long long v104 = v37;
      long long v101 = v39;
      long long v102 = v38;
      unsigned int v40 = v105;
      long long v99 = v36;
      operator delete(v36);
      long long v29 = (char *)v91;
      if (v91) {
        goto LABEL_34;
      }
LABEL_24:
      unsigned int v22 = v10;
      BOOL v23 = v24 >= v40;
      unsigned int v19 = v84;
    }
    while (!v23);
    long long v44 = a4;
    long long v45 = a4;
    do
    {
      unsigned int v46 = *--v86;
      uint64_t v47 = *(v44 - 23);
      v44 -= 23;
      int v90 = *((_DWORD *)v44 + 2);
      uint64_t v89 = v47;
      int v92 = 0;
      long long v93 = 0;
      int v91 = 0;
      long long v49 = (unsigned char *)v44[2];
      long long v48 = (unsigned char *)v44[3];
      int64_t v50 = v48 - v49;
      a4 = v44;
      if (v48 == v49)
      {
        int v51 = 0;
      }
      else
      {
        if (v50 < 0) {
          sub_2E00();
        }
        int v51 = (char *)operator new(v48 - v49);
        int v91 = v51;
        int v92 = v51;
        long long v93 = &v51[8 * (v50 >> 3)];
        memcpy(v51, v49, v50);
        int v92 = &v51[8 * (v50 >> 3)];
      }
      long long v52 = *((_OWORD *)v45 - 9);
      long long v53 = *((_OWORD *)v45 - 8);
      long long v54 = *((_OWORD *)v45 - 7);
      uint64_t v97 = *(v45 - 12);
      long long v95 = v53;
      long long v96 = v54;
      long long v94 = v52;
      long long v99 = 0;
      long long v100 = 0;
      __n128 __p = 0;
      long long v56 = (unsigned char *)*(v45 - 11);
      long long v55 = (unsigned char *)*(v45 - 10);
      int64_t v57 = v55 - v56;
      if (v55 == v56)
      {
        long long v63 = *((_OWORD *)v45 - 4);
        long long v64 = *((_OWORD *)v45 - 3);
        long long v65 = *((_OWORD *)v45 - 1);
        long long v103 = *((_OWORD *)v45 - 2);
        long long v104 = v65;
        long long v101 = v63;
        long long v102 = v64;
        unsigned int v62 = v105;
        if (!v51) {
          goto LABEL_36;
        }
LABEL_46:
        int v92 = v51;
        operator delete(v51);
        goto LABEL_36;
      }
      if (v57 < 0) {
        sub_2E00();
      }
      uint64_t v58 = (char *)operator new(v55 - v56);
      __n128 __p = v58;
      long long v99 = v58;
      long long v100 = &v58[2 * (v57 >> 1)];
      memcpy(v58, v56, v57);
      long long v99 = &v58[2 * (v57 >> 1)];
      long long v59 = *((_OWORD *)v45 - 1);
      long long v61 = *((_OWORD *)v45 - 4);
      long long v60 = *((_OWORD *)v45 - 3);
      long long v103 = *((_OWORD *)v45 - 2);
      long long v104 = v59;
      long long v101 = v61;
      long long v102 = v60;
      unsigned int v62 = v105;
      long long v99 = v58;
      operator delete(v58);
      int v51 = (char *)v91;
      if (v91) {
        goto LABEL_46;
      }
LABEL_36:
      long long v45 = v44;
    }
    while (v46 >= v62);
    uint64_t v10 = v85;
    a3 = v86;
    unsigned int v19 = v84;
    if (v84 < v86) {
      continue;
    }
    break;
  }
  long long v66 = (unsigned int *)(v84 - 1);
  unint64_t v6 = v82;
  a5 = v83;
  long long v67 = v85 - 23;
  if (v84 - 1 != (int *)a1)
  {
LABEL_50:
    *a1 = *v66;
    uint64_t v68 = *v67;
    *((_DWORD *)v6 + 2) = *((_DWORD *)v67 + 2);
    *unint64_t v6 = v68;
    if (v67 != v6)
    {
      sub_326C0(v6 + 2, (char *)*(v10 - 21), (char *)*(v10 - 20), (*(v10 - 20) - *(v10 - 21)) >> 3);
      long long v69 = *((_OWORD *)v10 - 9);
      long long v70 = *((_OWORD *)v10 - 8);
      long long v71 = *((_OWORD *)v10 - 7);
      v6[11] = *(v10 - 12);
      *(_OWORD *)(v6 + 9) = v71;
      *(_OWORD *)(v6 + 7) = v70;
      *(_OWORD *)(v6 + 5) = v69;
      sub_BDDEDC(v6 + 12, (char *)*(v10 - 11), (char *)*(v10 - 10), (*(v10 - 10) - *(v10 - 11)) >> 1);
    }
    long long v72 = *((_OWORD *)v10 - 4);
    long long v73 = *((_OWORD *)v10 - 3);
    *((_WORD *)v6 + 76) = *((_WORD *)v10 - 16);
    *(_OWORD *)(v6 + 17) = v73;
    *(_OWORD *)(v6 + 15) = v72;
    *((_DWORD *)v6 + 39) = *((_DWORD *)v10 - 7);
    long long v74 = *(_OWORD *)(v10 - 3);
    v6[22] = *(v10 - 1);
    *((_OWORD *)v6 + 10) = v74;
  }
LABEL_53:
  *long long v66 = v105;
  uint64_t v75 = v106;
  *((_DWORD *)v67 + 2) = v107;
  *long long v67 = v75;
  if (v67 != &v106)
  {
    sub_326C0(v10 - 21, (char *)v108, v109, (v109 - (unsigned char *)v108) >> 3);
    long long v76 = v110;
    long long v77 = v111;
    long long v78 = v112;
    *(v10 - 12) = v113;
    *((_OWORD *)v10 - 8) = v77;
    *((_OWORD *)v10 - 7) = v78;
    *((_OWORD *)v10 - 9) = v76;
    sub_BDDEDC(v10 - 11, (char *)v114, v115, (v115 - (unsigned char *)v114) >> 1);
  }
  long long v79 = v116;
  long long v80 = v117;
  *((_WORD *)v10 - 16) = v118;
  *((_OWORD *)v10 - 4) = v79;
  *((_OWORD *)v10 - 3) = v80;
  *((_DWORD *)v10 - 7) = v119;
  long long v81 = v120;
  *(v10 - 1) = v121;
  *(_OWORD *)(v10 - 3) = v81;
  *(void *)a5 = v66;
  *(void *)(a5 + 8) = v67;
  *(unsigned char *)(a5 + 16) = v20;
  if (v114)
  {
    long long v115 = (char *)v114;
    operator delete(v114);
  }
  if (v108)
  {
    uint64_t v109 = (char *)v108;
    operator delete(v108);
  }
}

void sub_1033B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
}

void sub_1033BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (a23) {
    operator delete(a23);
  }
  sub_102DA84(&a44);
  _Unwind_Resume(a1);
}

BOOL sub_1033BF4(unsigned int *a1, uint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v4 = a3;
  uint64_t v7 = a3 - a1;
  BOOL result = 1;
  switch(v7)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v9 = (uint64_t *)(a4 - 184);
      unsigned int v48 = *(a3 - 1);
      sub_102843C((uint64_t)&v49, (uint64_t *)(a4 - 184));
      unsigned int v40 = *a1;
      sub_102843C((uint64_t)v43, a2);
      unsigned int v10 = v48;
      if (__p)
      {
        uint64_t v47 = __p;
        operator delete(__p);
      }
      if (v44)
      {
        long long v45 = v44;
        operator delete(v44);
      }
      if (v57)
      {
        uint64_t v58 = (char *)v57;
        operator delete(v57);
      }
      if (v51)
      {
        long long v52 = (char *)v51;
        operator delete(v51);
      }
      if (v10 >= v40) {
        return 1;
      }
      unsigned int v11 = *a1;
      *a1 = *(v4 - 1);
      *(v4 - 1) = v11;
      sub_102FD18(a2, v9);
      return 1;
    case 3:
      sub_1032A64(a1, a2, a1 + 1, a2 + 23, a3 - 1, (uint64_t *)(a4 - 184));
      return 1;
    case 4:
      sub_1034174(a1, a2, a1 + 1, a2 + 23, a1 + 2, a2 + 46, a3 - 1, (uint64_t *)(a4 - 184));
      return 1;
    case 5:
      sub_10343F0(a1, a2, a1 + 1, a2 + 23, a1 + 2, a2 + 46, a1 + 3, a2 + 69, a3 - 1, (uint64_t *)(a4 - 184));
      return 1;
    default:
      unsigned int v12 = a1 + 2;
      unsigned int v13 = a2 + 46;
      sub_1032A64(a1, a2, a1 + 1, a2 + 23, a1 + 2, a2 + 46);
      unsigned int v14 = a1 + 3;
      if (a1 + 3 == v4) {
        return 1;
      }
      int v38 = 0;
      unsigned int v15 = a2 + 69;
      uint64_t v39 = 0;
      long long v37 = v4;
      break;
  }
  while (1)
  {
    unsigned int v48 = *v14;
    sub_102843C((uint64_t)&v49, v15);
    unsigned int v41 = *v12;
    sub_102843C((uint64_t)v43, v13);
    unsigned int v16 = v48;
    if (__p)
    {
      uint64_t v47 = __p;
      operator delete(__p);
    }
    if (v44)
    {
      long long v45 = v44;
      operator delete(v44);
    }
    if (v57)
    {
      uint64_t v58 = (char *)v57;
      operator delete(v57);
    }
    if (v51)
    {
      long long v52 = (char *)v51;
      operator delete(v51);
    }
    if (v16 >= v41) {
      goto LABEL_17;
    }
    unsigned int v48 = *v14;
    sub_102843C((uint64_t)&v49, v15);
    uint64_t v17 = v39;
    unsigned int v18 = v15;
    do
    {
      unsigned int v19 = v13;
      *(unsigned int *)((char *)a1 + v17 + 12) = *(unsigned int *)((char *)a1 + v17 + 8);
      uint64_t v20 = *v13;
      *((_DWORD *)v18 + 2) = *((_DWORD *)v13 + 2);
      *unsigned int v18 = v20;
      if (v13 != v18)
      {
        sub_326C0(v18 + 2, (char *)v13[2], (char *)v13[3], (v13[3] - v13[2]) >> 3);
        long long v21 = *(_OWORD *)(v13 + 5);
        long long v22 = *(_OWORD *)(v13 + 7);
        long long v23 = *(_OWORD *)(v13 + 9);
        v18[11] = v13[11];
        *(_OWORD *)(v18 + 9) = v23;
        *(_OWORD *)(v18 + 7) = v22;
        *(_OWORD *)(v18 + 5) = v21;
        sub_BDDEDC(v18 + 12, (char *)v13[12], (char *)v13[13], (v13[13] - v13[12]) >> 1);
      }
      long long v24 = *(_OWORD *)(v13 + 15);
      long long v25 = *(_OWORD *)(v13 + 17);
      *((_WORD *)v18 + 76) = *((_WORD *)v13 + 76);
      *(_OWORD *)(v18 + 17) = v25;
      *(_OWORD *)(v18 + 15) = v24;
      *((_DWORD *)v18 + 39) = *((_DWORD *)v13 + 39);
      long long v26 = *((_OWORD *)v13 + 10);
      v18[22] = v13[22];
      *((_OWORD *)v18 + 10) = v26;
      if (v17 == -8)
      {
        int64_t v28 = a1;
        goto LABEL_38;
      }
      v13 -= 23;
      unsigned int v42 = *(unsigned int *)((char *)a1 + v17 + 4);
      sub_102843C((uint64_t)v43, v19 - 23);
      unsigned int v27 = v48;
      if (__p)
      {
        uint64_t v47 = __p;
        operator delete(__p);
      }
      if (v44)
      {
        long long v45 = v44;
        operator delete(v44);
      }
      v17 -= 4;
      unsigned int v18 = v19;
    }
    while (v27 < v42);
    int64_t v28 = (unsigned int *)((char *)a1 + v17 + 12);
LABEL_38:
    *int64_t v28 = v48;
    uint64_t v29 = v49;
    *((_DWORD *)v19 + 2) = v50;
    uint64_t *v19 = v29;
    uint64_t v4 = v37;
    if (v19 != &v49)
    {
      sub_326C0(v19 + 2, (char *)v51, v52, (v52 - (unsigned char *)v51) >> 3);
      long long v30 = v53;
      long long v31 = v54;
      long long v32 = v55;
      v19[11] = v56;
      *(_OWORD *)(v19 + 9) = v32;
      *(_OWORD *)(v19 + 7) = v31;
      *(_OWORD *)(v19 + 5) = v30;
      sub_BDDEDC(v19 + 12, (char *)v57, v58, (v58 - (unsigned char *)v57) >> 1);
    }
    long long v33 = v59;
    long long v34 = v60;
    *((_WORD *)v19 + 76) = v61;
    *(_OWORD *)(v19 + 15) = v33;
    *(_OWORD *)(v19 + 17) = v34;
    *((_DWORD *)v19 + 39) = v62;
    long long v35 = v63;
    v19[22] = v64;
    *((_OWORD *)v19 + 10) = v35;
    BOOL v36 = v38 == 7;
    if (v57)
    {
      uint64_t v58 = (char *)v57;
      operator delete(v57);
    }
    if (v51)
    {
      long long v52 = (char *)v51;
      operator delete(v51);
    }
    if (v38 == 7) {
      return v14 + 1 == v37;
    }
    ++v38;
    v15 += 23 * v36;
LABEL_17:
    unsigned int v12 = v14;
    unsigned int v13 = v15;
    v15 += 23;
    v39 += 4;
    if (++v14 == v4) {
      return 1;
    }
  }
}

void sub_10340F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
}

void sub_103410C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
}

void sub_1034120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
}

void sub_1034134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
}

void sub_1034148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
}

double sub_1034174(unsigned int *a1, uint64_t *a2, unsigned int *a3, uint64_t *a4, unsigned int *a5, uint64_t *a6, unsigned int *a7, uint64_t *a8)
{
  sub_1032A64(a1, a2, a3, a4, a5, a6);
  unsigned int v31 = *a7;
  sub_102843C((uint64_t)v32, a8);
  unsigned int v23 = *a5;
  sub_102843C((uint64_t)v26, a6);
  unsigned int v17 = v31;
  if (__p)
  {
    long long v30 = __p;
    operator delete(__p);
  }
  if (v27)
  {
    int64_t v28 = v27;
    operator delete(v27);
  }
  if (v35)
  {
    BOOL v36 = v35;
    operator delete(v35);
  }
  if (v33)
  {
    long long v34 = v33;
    operator delete(v33);
  }
  if (v17 < v23)
  {
    unsigned int v18 = *a5;
    *a5 = *a7;
    *a7 = v18;
    sub_102FD18(a6, a8);
    unsigned int v31 = *a5;
    sub_102843C((uint64_t)v32, a6);
    unsigned int v24 = *a3;
    sub_102843C((uint64_t)v26, a4);
    unsigned int v19 = v31;
    if (__p)
    {
      long long v30 = __p;
      operator delete(__p);
    }
    if (v27)
    {
      int64_t v28 = v27;
      operator delete(v27);
    }
    if (v35)
    {
      BOOL v36 = v35;
      operator delete(v35);
    }
    if (v33)
    {
      long long v34 = v33;
      operator delete(v33);
    }
    if (v19 < v24)
    {
      unsigned int v20 = *a3;
      *a3 = *a5;
      *a5 = v20;
      sub_102FD18(a4, a6);
      unsigned int v31 = *a3;
      sub_102843C((uint64_t)v32, a4);
      unsigned int v25 = *a1;
      sub_102843C((uint64_t)v26, a2);
      unsigned int v21 = v31;
      if (__p)
      {
        long long v30 = __p;
        operator delete(__p);
      }
      if (v27)
      {
        int64_t v28 = v27;
        operator delete(v27);
      }
      if (v35)
      {
        BOOL v36 = v35;
        operator delete(v35);
      }
      if (v33)
      {
        long long v34 = v33;
        operator delete(v33);
      }
      if (v21 < v25)
      {
        unsigned int v22 = *a1;
        *a1 = *a3;
        *a3 = v22;
        *(void *)&double result = sub_102FD18(a2, a4).n128_u64[0];
      }
    }
  }
  return result;
}

void sub_10343B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
}

void sub_10343C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
}

void sub_10343DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
}

double sub_10343F0(unsigned int *a1, uint64_t *a2, unsigned int *a3, uint64_t *a4, unsigned int *a5, uint64_t *a6, unsigned int *a7, uint64_t *a8, unsigned int *a9, uint64_t *a10)
{
  sub_1034174(a1, a2, a3, a4, a5, a6, a7, a8);
  unsigned int v36 = *a9;
  sub_102843C((uint64_t)v37, a10);
  unsigned int v27 = *a7;
  sub_102843C((uint64_t)v31, a8);
  unsigned int v17 = v36;
  if (__p)
  {
    long long v35 = __p;
    operator delete(__p);
  }
  if (v32)
  {
    long long v33 = v32;
    operator delete(v32);
  }
  if (v40)
  {
    unsigned int v41 = v40;
    operator delete(v40);
  }
  if (v38)
  {
    uint64_t v39 = v38;
    operator delete(v38);
  }
  if (v17 < v27)
  {
    unsigned int v18 = *a7;
    *a7 = *a9;
    *a9 = v18;
    sub_102FD18(a8, a10);
    unsigned int v36 = *a7;
    sub_102843C((uint64_t)v37, a8);
    unsigned int v28 = *a5;
    sub_102843C((uint64_t)v31, a6);
    unsigned int v19 = v36;
    if (__p)
    {
      long long v35 = __p;
      operator delete(__p);
    }
    if (v32)
    {
      long long v33 = v32;
      operator delete(v32);
    }
    if (v40)
    {
      unsigned int v41 = v40;
      operator delete(v40);
    }
    if (v38)
    {
      uint64_t v39 = v38;
      operator delete(v38);
    }
    if (v19 < v28)
    {
      unsigned int v20 = *a5;
      *a5 = *a7;
      *a7 = v20;
      sub_102FD18(a6, a8);
      unsigned int v36 = *a5;
      sub_102843C((uint64_t)v37, a6);
      unsigned int v29 = *a3;
      sub_102843C((uint64_t)v31, a4);
      unsigned int v21 = v36;
      if (__p)
      {
        long long v35 = __p;
        operator delete(__p);
      }
      if (v32)
      {
        long long v33 = v32;
        operator delete(v32);
      }
      if (v40)
      {
        unsigned int v41 = v40;
        operator delete(v40);
      }
      if (v38)
      {
        uint64_t v39 = v38;
        operator delete(v38);
      }
      if (v21 < v29)
      {
        unsigned int v22 = *a3;
        *a3 = *a5;
        *a5 = v22;
        sub_102FD18(a4, a6);
        unsigned int v36 = *a3;
        sub_102843C((uint64_t)v37, a4);
        unsigned int v30 = *a1;
        sub_102843C((uint64_t)v31, a2);
        unsigned int v23 = v36;
        if (__p)
        {
          long long v35 = __p;
          operator delete(__p);
        }
        if (v32)
        {
          long long v33 = v32;
          operator delete(v32);
        }
        if (v40)
        {
          unsigned int v41 = v40;
          operator delete(v40);
        }
        if (v38)
        {
          uint64_t v39 = v38;
          operator delete(v38);
        }
        if (v23 < v30)
        {
          unsigned int v24 = *a1;
          *a1 = *a3;
          *a3 = v24;
          *(void *)&double result = sub_102FD18(a2, a4).n128_u64[0];
        }
      }
    }
  }
  return result;
}

void sub_10346D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

void sub_10346E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

void sub_10346F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

void sub_103470C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

unsigned int *sub_1034720(unsigned int *a1, uint64_t *a2, unsigned int *a3, uint64_t a4, unsigned int *a5, uint64_t a6, uint64_t a7)
{
  if (a1 == a3) {
    return a5;
  }
  uint64_t v9 = (uint64_t)a3;
  uint64_t v12 = (char *)a3 - (char *)a1;
  uint64_t v13 = a3 - a1;
  if ((char *)a3 - (char *)a1 >= 5)
  {
    unint64_t v14 = (unint64_t)(v13 - 2) >> 1;
    unint64_t v15 = v14 + 1;
    uint64_t v16 = (uint64_t)&a2[23 * v14];
    unsigned int v17 = &a1[v14];
    do
    {
      sub_103494C((uint64_t)a1, (uint64_t)a2, a7, v13, v17, v16);
      v16 -= 184;
      --v17;
      --v15;
    }
    while (v15);
  }
  if ((unsigned int *)v9 == a5)
  {
    a5 = (unsigned int *)v9;
    if (v12 < 5) {
      return a5;
    }
    goto LABEL_22;
  }
  unsigned int v18 = (uint64_t *)a4;
  unsigned int v19 = (unsigned int *)v9;
  do
  {
    unsigned int v32 = *v19;
    sub_102843C((uint64_t)&v33, v18);
    unsigned int v26 = *a1;
    sub_102843C((uint64_t)&v27, a2);
    unsigned int v20 = v32;
    if (__p)
    {
      unsigned int v31 = __p;
      operator delete(__p);
    }
    if (v28)
    {
      unsigned int v29 = v28;
      operator delete(v28);
    }
    if (v36)
    {
      long long v37 = v36;
      operator delete(v36);
    }
    if (v34)
    {
      long long v35 = v34;
      operator delete(v34);
    }
    if (v20 < v26)
    {
      unsigned int v21 = *v19;
      unsigned int *v19 = *a1;
      *a1 = v21;
      sub_102FD18(v18, a2);
      sub_103494C((uint64_t)a1, (uint64_t)a2, a7, v13, a1, (uint64_t)a2);
    }
    ++v19;
    v18 += 23;
  }
  while (v19 != a5);
  if (v12 >= 5)
  {
LABEL_22:
    unint64_t v22 = (unint64_t)v12 >> 2;
    do
    {
      sub_1034E7C(a1, a2, v9, a4, a7, v22);
      v9 -= 4;
      a4 -= 184;
    }
    while (v22-- > 2);
  }
  return a5;
}

void sub_1034938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
}

void sub_103494C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v7 = a5;
    uint64_t v8 = a1;
    uint64_t v41 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a5 - a1) >> 2)
    {
      uint64_t v10 = ((uint64_t)a5 - a1) >> 1;
      uint64_t v11 = v10 | 1;
      uint64_t v12 = (unsigned int *)(a1 + 4 * (v10 | 1));
      uint64_t v13 = a2 + 184 * (v10 | 1);
      uint64_t v14 = v10 + 2;
      if (v10 + 2 < a4)
      {
        unsigned int v57 = *v12;
        sub_102843C((uint64_t)&v58, (uint64_t *)v13);
        unsigned int v51 = v12[1];
        sub_102843C((uint64_t)v52, (uint64_t *)(v13 + 184));
        unsigned int v15 = v57;
        if (__p)
        {
          uint64_t v56 = __p;
          operator delete(__p);
        }
        if (v53)
        {
          long long v54 = v53;
          operator delete(v53);
        }
        if (__src)
        {
          *(void *)long long v67 = __src;
          operator delete(__src);
        }
        if (v60)
        {
          __int16 v61 = (char *)v60;
          operator delete(v60);
        }
        if (v15 < v51)
        {
          ++v12;
          v13 += 184;
          uint64_t v11 = v14;
        }
        uint64_t v7 = a5;
      }
      unsigned int v57 = *v12;
      sub_102843C((uint64_t)&v58, (uint64_t *)v13);
      unsigned int v51 = *v7;
      sub_102843C((uint64_t)v52, (uint64_t *)a6);
      unsigned int v16 = v57;
      if (__p)
      {
        uint64_t v56 = __p;
        operator delete(__p);
      }
      if (v53)
      {
        long long v54 = v53;
        operator delete(v53);
      }
      if (__src)
      {
        *(void *)long long v67 = __src;
        operator delete(__src);
      }
      if (v60)
      {
        __int16 v61 = (char *)v60;
        operator delete(v60);
      }
      if (v16 >= v51)
      {
        unsigned int v57 = *v7;
        sub_102843C((uint64_t)&v58, (uint64_t *)a6);
        uint64_t v17 = v11;
        do
        {
          unsigned int v18 = v7;
          uint64_t v19 = v13;
          uint64_t v7 = v12;
          *unsigned int v18 = *v12;
          uint64_t v20 = *(void *)v13;
          *(_DWORD *)(a6 + 8) = *(_DWORD *)(v13 + 8);
          *(void *)a6 = v20;
          if (a6 != v13)
          {
            sub_326C0((void *)(a6 + 16), *(char **)(v13 + 16), *(char **)(v13 + 24), (uint64_t)(*(void *)(v13 + 24) - *(void *)(v13 + 16)) >> 3);
            long long v21 = *(_OWORD *)(v13 + 40);
            long long v22 = *(_OWORD *)(v13 + 56);
            long long v23 = *(_OWORD *)(v13 + 72);
            *(void *)(a6 + 88) = *(void *)(v13 + 88);
            *(_OWORD *)(a6 + 72) = v23;
            *(_OWORD *)(a6 + 56) = v22;
            *(_OWORD *)(a6 + 40) = v21;
            sub_BDDEDC((void *)(a6 + 96), *(char **)(v13 + 96), *(char **)(v13 + 104), (uint64_t)(*(void *)(v13 + 104) - *(void *)(v13 + 96)) >> 1);
          }
          long long v24 = *(_OWORD *)(v13 + 120);
          long long v25 = *(_OWORD *)(v13 + 136);
          *(_WORD *)(a6 + 152) = *(_WORD *)(v13 + 152);
          *(_OWORD *)(a6 + 136) = v25;
          *(_OWORD *)(a6 + 120) = v24;
          *(_DWORD *)(a6 + 156) = *(_DWORD *)(v13 + 156);
          long long v26 = *(_OWORD *)(v13 + 160);
          *(void *)(a6 + 176) = *(void *)(v13 + 176);
          *(_OWORD *)(a6 + 160) = v26;
          if (v41 < v17) {
            break;
          }
          long long v44 = v12;
          uint64_t v27 = 2 * v17;
          uint64_t v17 = (2 * v17) | 1;
          uint64_t v28 = v8;
          uint64_t v12 = (unsigned int *)(v8 + 4 * v17);
          uint64_t v13 = a2 + 184 * v17;
          uint64_t v29 = v27 + 2;
          if (v27 + 2 < a4)
          {
            unsigned int v51 = *v12;
            sub_102843C((uint64_t)v52, (uint64_t *)(a2 + 184 * v17));
            unsigned int v45 = v12[1];
            sub_102843C((uint64_t)&v46, (uint64_t *)(v13 + 184));
            unsigned int v30 = v51;
            if (v49)
            {
              int v50 = v49;
              operator delete(v49);
            }
            if (v47)
            {
              unsigned int v48 = v47;
              operator delete(v47);
            }
            if (__p)
            {
              uint64_t v56 = __p;
              operator delete(__p);
            }
            if (v53)
            {
              long long v54 = v53;
              operator delete(v53);
            }
            if (v30 < v45)
            {
              ++v12;
              v13 += 184;
              uint64_t v17 = v29;
            }
          }
          unsigned int v51 = *v12;
          sub_102843C((uint64_t)v52, (uint64_t *)v13);
          unsigned int v31 = v57;
          unsigned int v32 = v51;
          uint64_t v8 = v28;
          if (__p)
          {
            uint64_t v56 = __p;
            operator delete(__p);
          }
          uint64_t v7 = v44;
          if (v53)
          {
            long long v54 = v53;
            operator delete(v53);
          }
          a6 = v19;
        }
        while (v32 >= v31);
        *uint64_t v7 = v57;
        uint64_t v33 = v58;
        *(_DWORD *)(v19 + 8) = v59;
        *(void *)uint64_t v19 = v33;
        if ((uint64_t *)v19 != &v58)
        {
          sub_326C0((void *)(v19 + 16), (char *)v60, v61, (v61 - (unsigned char *)v60) >> 3);
          long long v34 = v62;
          long long v35 = v63;
          long long v36 = v64;
          *(void *)(v19 + 88) = v65;
          *(_OWORD *)(v19 + 72) = v36;
          *(_OWORD *)(v19 + 56) = v35;
          *(_OWORD *)(v19 + 40) = v34;
          sub_BDDEDC((void *)(v19 + 96), (char *)__src, *(char **)v67, (uint64_t)(*(void *)v67 - (void)__src) >> 1);
        }
        long long v37 = v68;
        long long v38 = v69;
        *(_WORD *)(v19 + 152) = v70;
        *(_OWORD *)(v19 + 120) = v37;
        *(_OWORD *)(v19 + 136) = v38;
        *(_DWORD *)(v19 + 156) = v71;
        long long v39 = v72;
        *(void *)(v19 + 176) = v73;
        *(_OWORD *)(v19 + 160) = v39;
        if (__src)
        {
          *(void *)long long v67 = __src;
          operator delete(__src);
        }
        if (v60)
        {
          __int16 v61 = (char *)v60;
          operator delete(v60);
        }
      }
    }
  }
}

void sub_1034DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_102DA84(&a64);
  _Unwind_Resume(a1);
}

void sub_1034DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_102DA84(&a64);
  _Unwind_Resume(a1);
}

void sub_1034E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_102DA84(&a64);
  _Unwind_Resume(a1);
}

void sub_1034E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_102DA84(&a40);
  sub_102DA84(&a64);
  _Unwind_Resume(a1);
}

void sub_1034E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_102DA84(&a64);
  _Unwind_Resume(a1);
}

void sub_1034E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_102DA84(&a64);
  _Unwind_Resume(a1);
}

void sub_1034E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_102DA84(&a64);
  _Unwind_Resume(a1);
}

void sub_1034E7C(unsigned int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6 >= 2)
  {
    unsigned int v42 = *a1;
    sub_102843C((uint64_t)&v43, a2);
    uint64_t v12 = sub_1035180(a1, (uint64_t)a2, a5, a6);
    uint64_t v14 = v12;
    uint64_t v15 = v13;
    unsigned int v16 = (unsigned int *)(a3 - 4);
    if (v16 == v12)
    {
      unsigned int *v12 = v42;
      uint64_t v35 = v43;
      *(_DWORD *)(v13 + 8) = v44;
      *(void *)uint64_t v13 = v35;
      if (&v43 != (uint64_t *)v13)
      {
        sub_326C0((void *)(v13 + 16), (char *)v45, v46, (v46 - (unsigned char *)v45) >> 3);
        long long v36 = v47;
        long long v37 = v48;
        long long v38 = v49;
        *(void *)(v15 + 88) = v50;
        *(_OWORD *)(v15 + 72) = v38;
        *(_OWORD *)(v15 + 56) = v37;
        *(_OWORD *)(v15 + 40) = v36;
        sub_BDDEDC((void *)(v15 + 96), (char *)__p, v52, (v52 - (unsigned char *)__p) >> 1);
      }
      long long v39 = v53;
      long long v40 = v54;
      *(_WORD *)(v15 + 152) = v55;
      *(_OWORD *)(v15 + 136) = v40;
      *(_OWORD *)(v15 + 120) = v39;
      *(_DWORD *)(v15 + 156) = v56;
      long long v41 = v57;
      *(void *)(v15 + 176) = v58;
      *(_OWORD *)(v15 + 160) = v41;
      long long v34 = (char *)__p;
      if (!__p) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v17 = (uint64_t *)(a4 - 184);
      unsigned int *v12 = *v16;
      uint64_t v18 = *(void *)(a4 - 184);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(a4 - 176);
      *(void *)uint64_t v13 = v18;
      if (a4 - 184 != v13)
      {
        sub_326C0((void *)(v13 + 16), *(char **)(a4 - 168), *(char **)(a4 - 160), (uint64_t)(*(void *)(a4 - 160) - *(void *)(a4 - 168)) >> 3);
        long long v19 = *(_OWORD *)(a4 - 144);
        long long v20 = *(_OWORD *)(a4 - 128);
        long long v21 = *(_OWORD *)(a4 - 112);
        *(void *)(v15 + 88) = *(void *)(a4 - 96);
        *(_OWORD *)(v15 + 72) = v21;
        *(_OWORD *)(v15 + 56) = v20;
        *(_OWORD *)(v15 + 40) = v19;
        sub_BDDEDC((void *)(v15 + 96), *(char **)(a4 - 88), *(char **)(a4 - 80), (uint64_t)(*(void *)(a4 - 80) - *(void *)(a4 - 88)) >> 1);
      }
      long long v22 = *(_OWORD *)(a4 - 64);
      long long v23 = *(_OWORD *)(a4 - 48);
      *(_WORD *)(v15 + 152) = *(_WORD *)(a4 - 32);
      *(_OWORD *)(v15 + 136) = v23;
      *(_OWORD *)(v15 + 120) = v22;
      *(_DWORD *)(v15 + 156) = *(_DWORD *)(a4 - 28);
      long long v24 = *(_OWORD *)(a4 - 24);
      *(void *)(v15 + 176) = *(void *)(a4 - 8);
      *(_OWORD *)(v15 + 160) = v24;
      *unsigned int v16 = v42;
      uint64_t v25 = v43;
      *(_DWORD *)(a4 - 176) = v44;
      *uint64_t v17 = v25;
      if (v17 != &v43)
      {
        sub_326C0((void *)(a4 - 168), (char *)v45, v46, (v46 - (unsigned char *)v45) >> 3);
        long long v26 = v47;
        long long v27 = v48;
        long long v28 = v49;
        *(void *)(a4 - 96) = v50;
        *(_OWORD *)(a4 - 128) = v27;
        *(_OWORD *)(a4 - 112) = v28;
        *(_OWORD *)(a4 - 144) = v26;
        sub_BDDEDC((void *)(a4 - 88), (char *)__p, v52, (v52 - (unsigned char *)__p) >> 1);
      }
      uint64_t v29 = a4 - 64;
      uint64_t v30 = a4 - 24;
      long long v31 = v53;
      long long v32 = v54;
      *(_WORD *)(v29 + 32) = v55;
      *(_OWORD *)uint64_t v29 = v31;
      *(_OWORD *)(v29 + 16) = v32;
      *(_DWORD *)(a4 - 28) = v56;
      long long v33 = v57;
      *(void *)(v30 + 16) = v58;
      *(_OWORD *)uint64_t v30 = v33;
      sub_1035384((uint64_t)a1, (uint64_t)a2, (uint64_t)(v14 + 1), v15 + 184, a5, v14 + 1 - a1);
      long long v34 = (char *)__p;
      if (!__p) {
        goto LABEL_9;
      }
    }
    long long v52 = v34;
    operator delete(v34);
LABEL_9:
    if (v45)
    {
      uint64_t v46 = (char *)v45;
      operator delete(v45);
    }
  }
}

void sub_1035130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_102DA84((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1035144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_102DA84((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1035158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_102DA84((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_103516C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_102DA84((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned int *sub_1035180(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0;
  uint64_t v8 = a4 - 2;
  if (a4 < 2) {
    uint64_t v8 = a4 - 1;
  }
  uint64_t v9 = v8 >> 1;
  do
  {
    uint64_t v13 = &a1[v7 + 1];
    uint64_t v14 = a2 + 184 * (v7 + 1);
    uint64_t v15 = 2 * v7;
    uint64_t v7 = (2 * v7) | 1;
    uint64_t v16 = v15 + 2;
    if (v15 + 2 < a4)
    {
      unsigned int v29 = *v13;
      sub_102843C((uint64_t)&v30, (uint64_t *)v14);
      unsigned int v23 = v13[1];
      sub_102843C((uint64_t)&v24, (uint64_t *)(v14 + 184));
      unsigned int v22 = v29;
      if (__p)
      {
        long long v28 = __p;
        operator delete(__p);
      }
      if (v25)
      {
        long long v26 = v25;
        operator delete(v25);
      }
      if (v33)
      {
        long long v34 = v33;
        operator delete(v33);
      }
      if (v31)
      {
        long long v32 = v31;
        operator delete(v31);
      }
      if (v22 < v23)
      {
        ++v13;
        v14 += 184;
        uint64_t v7 = v16;
      }
    }
    *a1 = *v13;
    uint64_t v17 = *(void *)v14;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(v14 + 8);
    *(void *)a2 = v17;
    if (a2 != v14)
    {
      sub_326C0((void *)(a2 + 16), *(char **)(v14 + 16), *(char **)(v14 + 24), (uint64_t)(*(void *)(v14 + 24) - *(void *)(v14 + 16)) >> 3);
      long long v18 = *(_OWORD *)(v14 + 40);
      long long v19 = *(_OWORD *)(v14 + 56);
      long long v20 = *(_OWORD *)(v14 + 72);
      *(void *)(a2 + 88) = *(void *)(v14 + 88);
      *(_OWORD *)(a2 + 72) = v20;
      *(_OWORD *)(a2 + 56) = v19;
      *(_OWORD *)(a2 + 40) = v18;
      sub_BDDEDC((void *)(a2 + 96), *(char **)(v14 + 96), *(char **)(v14 + 104), (uint64_t)(*(void *)(v14 + 104) - *(void *)(v14 + 96)) >> 1);
    }
    long long v10 = *(_OWORD *)(v14 + 120);
    long long v11 = *(_OWORD *)(v14 + 136);
    *(_WORD *)(a2 + 152) = *(_WORD *)(v14 + 152);
    *(_OWORD *)(a2 + 136) = v11;
    *(_OWORD *)(a2 + 120) = v10;
    *(_DWORD *)(a2 + 156) = *(_DWORD *)(v14 + 156);
    long long v12 = *(_OWORD *)(v14 + 160);
    *(void *)(a2 + 176) = *(void *)(v14 + 176);
    *(_OWORD *)(a2 + 160) = v12;
    a1 = v13;
    a2 = v14;
  }
  while (v7 <= v9);
  return v13;
}

void sub_1035370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

void sub_1035384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = a6 - 2;
  if (a6 >= 2)
  {
    unint64_t v10 = v6 >> 1;
    long long v11 = (unsigned int *)(a1 + 4 * (v6 >> 1));
    uint64_t v12 = a2 + 184 * (v6 >> 1);
    unsigned int v42 = *v11;
    sub_102843C((uint64_t)&v43, (uint64_t *)v12);
    unsigned int v14 = *(_DWORD *)(a3 - 4);
    uint64_t v13 = (unsigned int *)(a3 - 4);
    uint64_t v15 = a4 - 184;
    sub_102843C((uint64_t)v37, (uint64_t *)v15);
    unsigned int v16 = v14;
    unsigned int v17 = v42;
    if (__p)
    {
      long long v41 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      long long v39 = v38;
      operator delete(v38);
    }
    if (v51)
    {
      long long v52 = (char *)v51;
      operator delete(v51);
    }
    if (v45)
    {
      uint64_t v46 = (char *)v45;
      operator delete(v45);
    }
    if (v17 < v16)
    {
      unsigned int v42 = *v13;
      sub_102843C((uint64_t)&v43, (uint64_t *)v15);
      do
      {
        long long v18 = v13;
        uint64_t v19 = v12;
        uint64_t v13 = v11;
        *long long v18 = *v11;
        uint64_t v20 = *(void *)v12;
        *(_DWORD *)(v15 + 8) = *(_DWORD *)(v12 + 8);
        *(void *)uint64_t v15 = v20;
        if (v15 != v12)
        {
          sub_326C0((void *)(v15 + 16), *(char **)(v12 + 16), *(char **)(v12 + 24), (uint64_t)(*(void *)(v12 + 24) - *(void *)(v12 + 16)) >> 3);
          long long v21 = *(_OWORD *)(v12 + 40);
          long long v22 = *(_OWORD *)(v12 + 56);
          long long v23 = *(_OWORD *)(v12 + 72);
          *(void *)(v15 + 88) = *(void *)(v12 + 88);
          *(_OWORD *)(v15 + 72) = v23;
          *(_OWORD *)(v15 + 56) = v22;
          *(_OWORD *)(v15 + 40) = v21;
          sub_BDDEDC((void *)(v15 + 96), *(char **)(v12 + 96), *(char **)(v12 + 104), (uint64_t)(*(void *)(v12 + 104) - *(void *)(v12 + 96)) >> 1);
        }
        long long v24 = *(_OWORD *)(v12 + 120);
        long long v25 = *(_OWORD *)(v12 + 136);
        *(_WORD *)(v15 + 152) = *(_WORD *)(v12 + 152);
        *(_OWORD *)(v15 + 136) = v25;
        *(_OWORD *)(v15 + 120) = v24;
        *(_DWORD *)(v15 + 156) = *(_DWORD *)(v12 + 156);
        long long v26 = *(_OWORD *)(v12 + 160);
        *(void *)(v15 + 176) = *(void *)(v12 + 176);
        *(_OWORD *)(v15 + 160) = v26;
        if (!v10) {
          break;
        }
        unint64_t v10 = (v10 - 1) >> 1;
        long long v11 = (unsigned int *)(a1 + 4 * v10);
        uint64_t v12 = a2 + 184 * v10;
        unsigned int v36 = *v11;
        sub_102843C((uint64_t)v37, (uint64_t *)v12);
        unsigned int v27 = v42;
        if (__p)
        {
          long long v41 = __p;
          operator delete(__p);
        }
        if (v38)
        {
          long long v39 = v38;
          operator delete(v38);
        }
        uint64_t v15 = v19;
      }
      while (v36 < v27);
      *uint64_t v13 = v42;
      uint64_t v28 = v43;
      *(_DWORD *)(v19 + 8) = v44;
      *(void *)uint64_t v19 = v28;
      if ((uint64_t *)v19 != &v43)
      {
        sub_326C0((void *)(v19 + 16), (char *)v45, v46, (v46 - (unsigned char *)v45) >> 3);
        long long v29 = v47;
        long long v30 = v48;
        long long v31 = v49;
        *(void *)(v19 + 88) = v50;
        *(_OWORD *)(v19 + 72) = v31;
        *(_OWORD *)(v19 + 56) = v30;
        *(_OWORD *)(v19 + 40) = v29;
        sub_BDDEDC((void *)(v19 + 96), (char *)v51, v52, (v52 - (unsigned char *)v51) >> 1);
      }
      long long v32 = v53;
      long long v33 = v54;
      *(_WORD *)(v19 + 152) = v55;
      *(_OWORD *)(v19 + 120) = v32;
      *(_OWORD *)(v19 + 136) = v33;
      *(_DWORD *)(v19 + 156) = v56;
      long long v34 = v57;
      *(void *)(v19 + 176) = v58;
      *(_OWORD *)(v19 + 160) = v34;
      if (v51)
      {
        long long v52 = (char *)v51;
        operator delete(v51);
      }
      if (v45)
      {
        uint64_t v46 = (char *)v45;
        operator delete(v45);
      }
    }
  }
}

void sub_1035684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

void sub_1035698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

void sub_10356AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

void sub_10356C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

void sub_10356D4()
{
  unk_25FD5AF = 16641;
  word_25FD598 = 65;
  byte_25FD5C7 = 1;
  byte_25FD5B1 = 0;
}

void sub_10356FC()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  char v4 = v3;
  int v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  long long v11 = (void *)v0;
  uint64_t v13 = v12;
  uint64_t v14 = sub_374E14(v1, v9 + 368);
  uint64_t v15 = sub_374E14(v2, v10 + 392);
  long long v33 = 0;
  long long v34 = 0;
  uint64_t v35 = 0;
  if (*(unsigned char *)(v10 + 363))
  {
    long long v34 = (void *)sub_10362BC(&v33, (uint64_t)v11);
    sub_EDEF5C((uint64_t)v33, (uint64_t)v67);
    v66[1] = 0;
    v66[0] = v2;
    sub_EBA1EC((uint64_t)v63, v8, v6, v4, v15, v14);
    __int16 v64 = 257;
    char v65 = 1;
    sub_EBA204((uint64_t)v52, (uint64_t)v63, (uint64_t)v66);
    sub_F2CEBC();
    sub_EBA268((uint64_t)v52, (uint64_t)v67, (uint64_t)v72, (uint64_t)v41);
    sub_1028A78((uint64_t)v36, (uint64_t)v66);
    sub_1028A94((uint64_t)v36, v41, v67, (uint64_t *)&v33, (uint64_t)v13);
    unsigned int v16 = (char *)__p;
    if (__p)
    {
      unsigned int v17 = v40;
      long long v18 = __p;
      if (v40 != __p)
      {
        do
        {
          uint64_t v19 = (void *)*((void *)v17 - 11);
          if (v19)
          {
            *((void *)v17 - 10) = v19;
            operator delete(v19);
          }
          uint64_t v20 = (void *)*((void *)v17 - 21);
          if (v20)
          {
            *((void *)v17 - 20) = v20;
            operator delete(v20);
          }
          v17 -= 184;
        }
        while (v17 != v16);
        long long v18 = __p;
      }
      long long v40 = v16;
      operator delete(v18);
    }
    if (v37)
    {
      long long v38 = v37;
      operator delete(v37);
    }
    if (v50)
    {
      unsigned int v51 = v50;
      operator delete(v50);
    }
    if (v48)
    {
      long long v49 = v48;
      operator delete(v48);
    }
    if (v46)
    {
      long long v47 = v46;
      operator delete(v46);
    }
    if (v44)
    {
      unsigned int v45 = v44;
      operator delete(v44);
    }
    if (v42)
    {
      uint64_t v43 = v42;
      operator delete(v42);
    }
    if (v41[0])
    {
      v41[1] = v41[0];
      operator delete(v41[0]);
    }
    if (v73) {
      sub_3A6230(&v72[7]);
    }
    if (v61)
    {
      long long v62 = v61;
      operator delete(v61);
    }
    if (v59)
    {
      long long v60 = v59;
      operator delete(v59);
    }
    if (v57)
    {
      uint64_t v58 = v57;
      operator delete(v57);
    }
    if (v55)
    {
      int v56 = v55;
      operator delete(v55);
    }
    if (v53)
    {
      long long v54 = v53;
      operator delete(v53);
    }
    long long v22 = v71;
    sub_328138((uint64_t)v71);
    do
    {
      long long v23 = (uint64_t *)(v22 - 48);
      uint64_t v24 = *((void *)v22 - 3);
      if (v24)
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        unsigned int v27 = v22 - 40;
        do
        {
          if ((*(char *)(*v23 + v26) & 0x80000000) == 0)
          {
            uint64_t v28 = *v27 + v25;
            long long v29 = *(void **)(v28 + 8);
            if (v29)
            {
              *(void *)(v28 + 16) = v29;
              operator delete(v29);
              uint64_t v24 = *((void *)v22 - 3);
            }
          }
          ++v26;
          v25 += 32;
        }
        while (v26 != v24);
        operator delete(*((void **)v22 - 6));
        *((void *)v22 - 6) = &unk_20E1710;
        *((void *)v22 - 1) = 0;
        *((void *)v22 - 4) = 0;
        *((void *)v22 - 3) = 0;
        void *v27 = 0;
      }
      v22 -= 48;
    }
    while (v23 != &v70);
    if (v68)
    {
      long long v69 = v68;
      operator delete(v68);
    }
    sub_EDD2E4((uint64_t)v67);
    if (!*(unsigned char *)(v10 + 363))
    {
LABEL_53:
      if (v6) {
        int v30 = 0x7FFFFFFF;
      }
      else {
        int v30 = v8;
      }
      LODWORD(v67[0]) = v30;
      memset(v72, 0, 488);
      sub_737844((uint64_t)v72);
    }
  }
  else
  {
    sub_1026094(v13, v11, (uint64_t)v2);
    if (!*(unsigned char *)(v10 + 363)) {
      goto LABEL_53;
    }
  }
  long long v21 = v33;
  if (v33)
  {
    uint64_t v31 = (uint64_t)v34;
    long long v32 = v33;
    if (v34 != v33)
    {
      do
        uint64_t v31 = sub_F2CA5C(v31 - 2336);
      while ((void *)v31 != v21);
      long long v32 = v33;
    }
    long long v34 = v21;
    operator delete(v32);
  }
}

void sub_1035B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_D0FB2C((uint64_t)&STACK[0x930]);
  sub_F2C44C(v6);
  sub_F28078((void **)va);
  _Unwind_Resume(a1);
}

void sub_1035BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_F2C44C(v6);
  sub_F28078((void **)va);
  _Unwind_Resume(a1);
}

void sub_1035BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (LOBYTE(STACK[0x1DA0])) {
    sub_3A6230(&STACK[0x968]);
  }
  sub_FEA5B4(&a44);
  sub_EE00C8((uint64_t)&STACK[0x240]);
  sub_F28078(&a14);
  _Unwind_Resume(a1);
}

void sub_1035C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_EE00C8((uint64_t)&STACK[0x240]);
  sub_F28078((void **)va);
  _Unwind_Resume(a1);
}

void sub_1035C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_F28078((void **)va);
  _Unwind_Resume(a1);
}

void sub_1035C54()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  char v35 = v3;
  int v33 = v5;
  uint64_t v34 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = (uint64_t *)v0;
  uint64_t v29 = v9;
  uint64_t v32 = sub_374E14(v1, v6 + 368);
  unsigned int v36 = v2;
  uint64_t v31 = sub_374E14(v2, v7 + 392);
  int v71 = 0;
  uint64_t v70 = 0;
  uint64_t v72 = 0;
  sub_1036478((char **)&v70, 0x7E3F1F8FC7E3F1F9 * ((v8[1] - *v8) >> 5));
  uint64_t v10 = *v8;
  int v30 = v8;
  uint64_t v37 = v8[1];
  if (*v8 != v37)
  {
    uint64_t v11 = (uint64_t)v71;
    do
    {
      sub_EDEF5C(v10, (uint64_t)v73);
      uint64_t v12 = sub_1036730((char **)&v70, v11, (uint64_t)v73);
      sub_328138((uint64_t)v78);
      uint64_t v13 = v78;
      do
      {
        uint64_t v14 = (uint64_t *)(v13 - 48);
        uint64_t v15 = *((void *)v13 - 3);
        if (v15)
        {
          uint64_t v16 = 0;
          uint64_t v17 = 0;
          long long v18 = v13 - 40;
          do
          {
            if ((*(char *)(*v14 + v17) & 0x80000000) == 0)
            {
              uint64_t v19 = *v18 + v16;
              uint64_t v20 = *(void **)(v19 + 8);
              if (v20)
              {
                *(void *)(v19 + 16) = v20;
                operator delete(v20);
                uint64_t v15 = *((void *)v13 - 3);
              }
            }
            ++v17;
            v16 += 32;
          }
          while (v17 != v15);
          operator delete(*((void **)v13 - 6));
          *((void *)v13 - 6) = &unk_20E1710;
          *((void *)v13 - 1) = 0;
          *((void *)v13 - 4) = 0;
          *((void *)v13 - 3) = 0;
          *long long v18 = 0;
        }
        v13 -= 48;
      }
      while (v14 != &v77);
      if (__p)
      {
        long long v76 = __p;
        operator delete(__p);
      }
      uint64_t v11 = (uint64_t)(v12 + 1776);
      sub_EDD2E4((uint64_t)v73);
      v10 += 2336;
    }
    while (v10 != v37);
  }
  sub_EDB9B0((uint64_t)v69, (uint64_t)&v70);
  v68[1] = 0;
  v68[0] = v36;
  sub_EBA1EC((uint64_t)v65, v34, v33, v35, v31, v32);
  __int16 v66 = 257;
  char v67 = 1;
  sub_EBA204((uint64_t)v54, (uint64_t)v65, (uint64_t)v68);
  sub_F2CEBC();
  sub_EBBEA4((uint64_t)v54, (uint64_t *)v69, (uint64_t)v73, (uint64_t)v43);
  sub_1028A78((uint64_t)v38, (uint64_t)v68);
  sub_102A9B0((uint64_t)v38, v43, v69, v30, v29);
  long long v21 = (char *)v41;
  if (v41)
  {
    long long v22 = v42;
    long long v23 = v41;
    if (v42 != v41)
    {
      do
      {
        uint64_t v24 = (void *)*((void *)v22 - 11);
        if (v24)
        {
          *((void *)v22 - 10) = v24;
          operator delete(v24);
        }
        uint64_t v25 = (void *)*((void *)v22 - 21);
        if (v25)
        {
          *((void *)v22 - 20) = v25;
          operator delete(v25);
        }
        v22 -= 184;
      }
      while (v22 != v21);
      long long v23 = v41;
    }
    unsigned int v42 = v21;
    operator delete(v23);
  }
  if (v39)
  {
    long long v40 = v39;
    operator delete(v39);
  }
  if (v52)
  {
    long long v53 = v52;
    operator delete(v52);
  }
  if (v50)
  {
    unsigned int v51 = v50;
    operator delete(v50);
  }
  if (v48)
  {
    long long v49 = v48;
    operator delete(v48);
  }
  if (v46)
  {
    long long v47 = v46;
    operator delete(v46);
  }
  if (v44)
  {
    unsigned int v45 = v44;
    operator delete(v44);
  }
  if (v43[0])
  {
    v43[1] = v43[0];
    operator delete(v43[0]);
  }
  if (v78[4224]) {
    sub_3A6230(v74);
  }
  if (v63)
  {
    __int16 v64 = v63;
    operator delete(v63);
  }
  if (v61)
  {
    long long v62 = v61;
    operator delete(v61);
  }
  if (v59)
  {
    long long v60 = v59;
    operator delete(v59);
  }
  if (v57)
  {
    uint64_t v58 = v57;
    operator delete(v57);
  }
  if (v55)
  {
    int v56 = v55;
    operator delete(v55);
  }
  sub_FEAA50(v69);
  uint64_t v26 = v70;
  if (v70)
  {
    uint64_t v27 = (uint64_t)v71;
    uint64_t v28 = v70;
    if (v71 != v70)
    {
      do
      {
        v27 -= 1776;
        sub_EDD1F0((uint64_t)&v72, v27);
      }
      while ((void *)v27 != v26);
      uint64_t v28 = v70;
    }
    int v71 = v26;
    operator delete(v28);
  }
}

void sub_1036074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (LOBYTE(STACK[0x1788])) {
    sub_3A6230(&STACK[0x350]);
  }
  sub_FEA5B4(&a46);
  sub_FEAA50((void **)&STACK[0x250]);
  sub_FEA628((void **)&STACK[0x300]);
  _Unwind_Resume(a1);
}

void sub_10360D8(_Unwind_Exception *a1)
{
}

void sub_10360F8(_Unwind_Exception *a1)
{
}

void sub_103610C(_Unwind_Exception *a1)
{
  unint64_t v2 = STACK[0x300];
  if (STACK[0x300])
  {
    uint64_t v3 = STACK[0x308];
    uint64_t v4 = (void *)STACK[0x300];
    if (STACK[0x308] != v2)
    {
      do
      {
        v3 -= 1776;
        sub_EDD1F0((uint64_t)&STACK[0x310], v3);
      }
      while (v3 != v2);
      uint64_t v4 = (void *)STACK[0x300];
    }
    STACK[0x308] = v2;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void *sub_1036208(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v3 = a1[6];
    uint64_t v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        int v5 = *(void **)(v3 - 88);
        if (v5)
        {
          *(void *)(v3 - 80) = v5;
          operator delete(v5);
        }
        uint64_t v6 = *(void **)(v3 - 168);
        if (v6)
        {
          *(void *)(v3 - 160) = v6;
          operator delete(v6);
        }
        v3 -= 184;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  uint64_t v7 = (void *)a1[2];
  if (v7)
  {
    a1[3] = v7;
    operator delete(v7);
  }
  return a1;
}

void sub_103629C(void *a1)
{
  if (a1[1] - *a1 == 2336) {
    sub_10356FC();
  }
  else {
    sub_1035C54();
  }
}

uint64_t sub_10362BC(void *a1, uint64_t a2)
{
  uint64_t v3 = 0x7E3F1F8FC7E3F1F9 * ((uint64_t)(a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x1C0E070381C0E0) {
    sub_2E00();
  }
  if (0xFC7E3F1F8FC7E3F2 * ((uint64_t)(a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0xFC7E3F1F8FC7E3F2 * ((uint64_t)(a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x7E3F1F8FC7E3F1F9 * ((uint64_t)(a1[2] - *a1) >> 5)) >= 0xE070381C0E070) {
    unint64_t v6 = 0x1C0E070381C0E0;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1C0E070381C0E0) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(2336 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v14 = (uint64_t)&v7[2336 * v3];
  *((void *)&v15 + 1) = &v7[2336 * v6];
  sub_F2EDB4(v14, a2);
  uint64_t v8 = 0;
  uint64_t v10 = (void *)*a1;
  for (uint64_t i = a1[1]; (void *)(i + v8) != v10; sub_F2EDB4(v8 + v14, v8 + i))
    v8 -= 2336;
  uint64_t v12 = (void *)*a1;
  uint64_t v11 = a1[1];
  *a1 = v14 + v8;
  *(void *)&long long v15 = v14 + 2336;
  for (*(_OWORD *)(a1 + 1) = v15; (void *)v11 != v12; uint64_t v11 = sub_F2CA5C(v11 - 2336))
    ;
  if (v12) {
    operator delete(v12);
  }
  return v14 + 2336;
}

void sub_1036434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_F2ED60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1036478(char **a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  uint64_t v3 = *a1;
  if (0xB195E8EFDB195E8FLL * ((a1[2] - *a1) >> 4) >= a2) {
    return;
  }
  if (a2 >= 0x24E6A171024E6BLL) {
    sub_2E00();
  }
  uint64_t v5 = (uint64_t)a1[1];
  uint64_t v6 = 1776 * a2;
  uint64_t v7 = (char *)operator new(1776 * a2);
  uint64_t v8 = &v7[v6];
  uint64_t v9 = &v7[v5 - (void)v3];
  if ((char *)v5 == v3)
  {
    *a1 = v9;
    a1[1] = v9;
    a1[2] = v8;
    if (!v3) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v10 = &v7[v5 - (void)v3];
  do
  {
    v5 -= 1776;
    uint64_t v10 = (char *)sub_10365A0((void *)v10 - 222, v5);
  }
  while ((char *)v5 != v3);
  uint64_t v11 = *a1;
  uint64_t v3 = a1[1];
  *a1 = v10;
  a1[1] = v9;
  a1[2] = v8;
  if (v3 != v11)
  {
    do
    {
      v3 -= 1776;
      sub_EDD1F0(v2, (uint64_t)v3);
    }
    while (v3 != v11);
    uint64_t v3 = v11;
  }
  if (v3)
  {
LABEL_10:
    operator delete(v3);
  }
}

void *sub_10365A0(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  a1[8] = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
  a1[11] = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  a1[14] = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  *(_OWORD *)(a1 + 15) = *(_OWORD *)(a2 + 120);
  a1[17] = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  a1[18] = 0;
  a1[19] = 0;
  a1[20] = 0;
  *((_OWORD *)a1 + 9) = *(_OWORD *)(a2 + 144);
  a1[20] = *(void *)(a2 + 160);
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  a1[21] = 0;
  a1[22] = 0;
  a1[23] = 0;
  *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 168);
  a1[23] = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  a1[24] = 0;
  a1[25] = 0;
  a1[26] = 0;
  *((_OWORD *)a1 + 12) = *(_OWORD *)(a2 + 192);
  a1[26] = *(void *)(a2 + 208);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  a1[27] = 0;
  a1[28] = 0;
  a1[29] = 0;
  *(_OWORD *)(a1 + 27) = *(_OWORD *)(a2 + 216);
  a1[29] = *(void *)(a2 + 232);
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  sub_F2D450(a1 + 30, a2 + 240);
  sub_F2DEC0(a1 + 126, a2 + 1008);
  return a1;
}

char *sub_1036730(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 1776;
  uint64_t v8 = &(*a1)[1776 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v15 = 0xB195E8EFDB195E8FLL * ((uint64_t)(v6 - (void)v5) >> 4) + 1;
    if (v15 > 0x24E6A171024E6ALL) {
      sub_2E00();
    }
    unint64_t v16 = 0xB195E8EFDB195E8FLL * ((uint64_t)(v9 - (void)v5) >> 4);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x127350B8812735) {
      unint64_t v17 = 0x24E6A171024E6ALL;
    }
    else {
      unint64_t v17 = v15;
    }
    int v33 = a1 + 2;
    if (v17)
    {
      if (v17 > 0x24E6A171024E6ALL) {
        sub_188D718();
      }
      long long v18 = (char *)operator new(1776 * v17);
    }
    else
    {
      long long v18 = 0;
    }
    uint64_t v29 = v18;
    int v30 = &v18[1776 * v7];
    uint64_t v31 = v30;
    uint64_t v32 = &v18[1776 * v17];
    sub_1036A10((uint64_t)&v29, a3);
    uint64_t v19 = v30;
    uint64_t v20 = *a1;
    long long v21 = v30;
    if (*a1 != v8)
    {
      long long v21 = v30;
      uint64_t v22 = (uint64_t)v8;
      do
      {
        v22 -= 1776;
        long long v21 = (char *)sub_10365A0((void *)v21 - 222, v22);
      }
      while ((char *)v22 != v20);
    }
    int v30 = v21;
    long long v23 = a1[1];
    uint64_t v24 = v31;
    if (v23 != v8)
    {
      do
      {
        sub_10365A0(v24, (uint64_t)v8);
        v8 += 1776;
        v24 += 1776;
      }
      while (v8 != v23);
      long long v21 = v30;
      uint64_t v8 = a1[1];
    }
    uint64_t v25 = *a1;
    *a1 = v21;
    a1[1] = v24;
    uint64_t v26 = a1[2];
    a1[2] = v32;
    uint64_t v31 = v8;
    uint64_t v32 = v26;
    uint64_t v29 = v25;
    int v30 = v25;
    if (v8 != v25)
    {
      do
      {
        uint64_t v31 = v8 - 1776;
        sub_EDD1F0((uint64_t)v33, (uint64_t)(v8 - 1776));
        uint64_t v8 = v31;
      }
      while (v31 != v25);
      uint64_t v8 = v29;
    }
    if (v8) {
      operator delete(v8);
    }
    return v19;
  }
  else
  {
    if (v8 != (char *)v6)
    {
      uint64_t v10 = v8 + 1776;
      uint64_t v11 = (void *)(v6 - 1776);
      if (v6 < 0x6F0)
      {
        a1[1] = (char *)v6;
        if ((char *)v6 == v10)
        {
LABEL_34:
          sub_FEB124(v8, a3);
          return v8;
        }
      }
      else
      {
        unint64_t v12 = v6 - 1776;
        uint64_t v13 = a1[1];
        do
        {
          uint64_t v14 = sub_10365A0(v13, v12);
          v12 += 1776;
          uint64_t v13 = (char *)(v14 + 222);
        }
        while (v12 < v6);
        a1[1] = v13;
        if ((char *)v6 == v10) {
          goto LABEL_34;
        }
      }
      uint64_t v27 = 16 * ((uint64_t)(v6 - (void)v10) >> 4);
      do
      {
        sub_FEB124(v11, (uint64_t)&v5[1776 * v7 - 1776 + v27]);
        v11 -= 222;
        v27 -= 1776;
      }
      while (v27);
      goto LABEL_34;
    }
    sub_10365A0(&(*a1)[1776 * v7], a3);
    a1[1] = v8 + 1776;
  }
  return v8;
}

void sub_10369FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_FEAC5C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1036A10(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(char **)(a1 + 16);
  if (v4 != *(char **)(a1 + 24)) {
    goto LABEL_22;
  }
  unint64_t v6 = *(char **)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 <= *(void *)a1)
  {
    unint64_t v12 = 0x632BD1DFB632BD1ELL * ((v4 - v6) >> 4);
    if (v4 == v6) {
      unint64_t v12 = 1;
    }
    if (v12 >= 0x24E6A171024E6BLL) {
      sub_188D718();
    }
    uint64_t v13 = *(void *)(a1 + 32);
    unint64_t v14 = v12 >> 2;
    uint64_t v15 = 1776 * v12;
    unint64_t v16 = (char *)operator new(1776 * v12);
    unint64_t v17 = v16;
    long long v18 = &v16[1776 * v14];
    uint64_t v19 = &v16[v15];
    if (v4 == (char *)v5)
    {
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v18;
      *(void *)(a1 + 16) = v18;
      *(void *)(a1 + 24) = v19;
      if (!v6) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v20 = (uint64_t)&v4[-v5] / 1776;
      long long v21 = &v18[1776 * v20];
      uint64_t v22 = 1776 * v20;
      long long v23 = v18;
      do
      {
        long long v23 = (char *)(sub_10365A0(v23, v5) + 222);
        v5 += 1776;
        v22 -= 1776;
      }
      while (v22);
      unint64_t v6 = *(char **)a1;
      uint64_t v24 = *(void *)(a1 + 8);
      uint64_t v25 = *(void *)(a1 + 16);
      *(void *)a1 = v17;
      *(void *)(a1 + 8) = v18;
      *(void *)(a1 + 16) = v21;
      *(void *)(a1 + 24) = v19;
      while (v25 != v24)
      {
        v25 -= 1776;
        sub_EDD1F0(v13, v25);
      }
      if (!v6) {
        goto LABEL_19;
      }
    }
    operator delete(v6);
LABEL_19:
    unint64_t v4 = *(char **)(a1 + 16);
    goto LABEL_22;
  }
  int64_t v7 = 0xB195E8EFDB195E8FLL * ((uint64_t)(v5 - *(void *)a1) >> 4);
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -v9;
  if ((char *)v5 == v4)
  {
    uint64_t v11 = (char *)(v5 - 1776 * v9);
  }
  else
  {
    do
    {
      sub_FEB124((void *)(v5 + 1776 * v10), v5);
      v5 += 1776;
    }
    while ((char *)v5 != v4);
    unint64_t v4 = *(char **)(a1 + 8);
    uint64_t v11 = (char *)(v5 + 1776 * v10);
  }
  *(void *)(a1 + 8) = &v4[1776 * v10];
  *(void *)(a1 + 16) = v11;
  unint64_t v4 = v11;
LABEL_22:
  double result = sub_10365A0(v4, a2);
  *(void *)(a1 + 16) += 1776;
  return result;
}

void sub_1036C08()
{
  unk_25FD5DF = 16641;
  word_25FD5C8 = 65;
  byte_25FD5F7 = 1;
  byte_25FD5E1 = 0;
}

void sub_1036C30(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W4>, int a5@<W5>, char a6@<W6>, uint64_t a7@<X7>, uint64_t a8@<X8>, unsigned __int8 a9, uint64_t a10, int a11)
{
}

void sub_1036C50(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W4>, int a5@<W5>, char a6@<W6>, uint64_t a7@<X7>, uint64_t a8@<X8>, unsigned __int8 a9, uint64_t a10, int a11)
{
  unsigned int v16 = *(_DWORD *)(a1 + 60);
  unsigned int v17 = *(_DWORD *)(a1 + 64);
  long long v18 = *(unsigned int **)(a1 + 72);
  char v53 = 1;
  __n128 __p = &v53;
  uint64_t v58 = a3;
  BOOL v19 = v16 == v17;
  unsigned int v59 = v16;
  if (!v18) {
    BOOL v19 = 0;
  }
  long long v60 = v18;
  BOOL v61 = v19;
  long long v54 = a3;
  unsigned int v55 = v17;
  uint64_t v56 = 0;
  unsigned __int8 v57 = 0;
  sub_1037B88((uint64_t)&v58, (uint64_t)&v54, (char **)&__p);
  if (v16 != v17 || (unsigned int v20 = v17, v18))
  {
    unsigned int v20 = *v18;
    if (*(_DWORD *)(a3[21] + 4 * *v18) == 1) {
      sub_EC06EC((uint64_t)a3, *v18);
    }
  }
  if (v20 == v17) {
    int v21 = a9;
  }
  else {
    int v21 = 0;
  }
  sub_1013474(a1, a6, a7, v21, a10, a3, a2, (uint64_t)&v58);
  sub_1013A50(a1, a9, a10, a3, a2, (uint64_t)&v54);
  if (!v60 || v59 == v55 && v61 == v57)
  {
    *(_OWORD *)(a8 + 8) = 0u;
    *(_OWORD *)(a8 + 56) = 0u;
    *(_OWORD *)(a8 + 40) = 0u;
    *(_OWORD *)(a8 + 72) = 0u;
    *(_OWORD *)(a8 + 24) = 0u;
    *(_OWORD *)(a8 + 136) = 0u;
    *(_OWORD *)(a8 + 120) = 0u;
    *(_OWORD *)(a8 + 104) = 0u;
    *(_OWORD *)(a8 + 88) = 0u;
    *(void *)a8 = -1;
    *(_DWORD *)(a8 + 8) = -1;
    *(_OWORD *)(a8 + 48) = 0u;
    *(_OWORD *)(a8 + 64) = 0u;
    *(_DWORD *)(a8 + 80) = 0;
    *(void *)(a8 + 16) = 0;
    *(void *)(a8 + 24) = 0;
    *(void *)(a8 + 32) = 0;
    *(unsigned char *)(a8 + 40) = 0;
    *(_WORD *)(a8 + 84) = -1;
    *(_OWORD *)(a8 + 104) = 0u;
    *(_OWORD *)(a8 + 88) = 0u;
    *(void *)(a8 + 120) = 0x7FFFFFFFFFFFFFFFLL;
    *(void *)(a8 + 128) = 0x7FFFFFFFFFFFFFFFLL;
    *(unsigned char *)(a8 + 137) = 1;
    *(_DWORD *)(a8 + 148) = 0;
    *(void *)(a8 + 152) = 0;
    *(void *)(a8 + 160) = 0;
    *(_DWORD *)(a8 + 156) = 0x7FFFFFFF;
    *(void *)(a8 + 168) = 0;
    *(void *)(a8 + 176) = 0;
    return;
  }
  if (!sub_100230C((uint64_t)v60))
  {
    __n128 __p = 0;
    unsigned int v51 = 0;
    uint64_t v52 = 0;
    uint64_t v25 = v58;
    unsigned int v26 = v59;
    unsigned int v27 = v55;
    int v28 = v57;
    if (v59 == v55 && v61 == v57) {
      goto LABEL_20;
    }
    int v30 = v60;
    if (!v60)
    {
LABEL_24:
      uint64_t v31 = (void *)sub_1005964(a2);
      sub_1007480((uint64_t)v31, v26);
      uint64_t v32 = *(unsigned int *)(v31[12] + 4 * v26);
      sub_1007480((uint64_t)v31, v26);
      if (v32 == 0xFFFFFFFFLL) {
        goto LABEL_40;
      }
      while (1)
      {
        int v33 = sub_4F44((unsigned int *)(v31[15] + 152 * v32));
        if (v33 == v55) {
          break;
        }
        uint64_t v32 = *(unsigned int *)(v31[18] + 4 * v32);
        if (v32 == -1) {
          goto LABEL_40;
        }
      }
      if (__p != v51)
      {
        uint64_t v40 = *(v51 - 1);
        unint64_t v41 = *(void *)(v40 + 72);
        unint64_t v42 = *(unsigned int *)(v40 + 80);
        unint64_t v43 = *(unsigned __int8 *)(v40 + 88);
        uint64_t v44 = sub_100231C(v31[15] + 152 * v32);
        if (((((v41 >> 16) & 0xFFFF0000 | (v41 << 32) | (2 * ((v41 & 0xFF000000000000) == 0)))
             + ((v42 >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | (v43 >> 1) & 1) != ((((*(void *)(v44 + 32) >> 16) & 0xFFFF0000 | (*(void *)(v44 + 32) << 32) | (2 * ((*(void *)(v44 + 32) & 0xFF000000000000) == 0)))
                                                                                    + 4
                                                                                    * (unsigned __int16)*(_DWORD *)(v44 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v44 + 88) & 1))
        {
LABEL_40:
          *(_OWORD *)(a8 + 8) = 0u;
          *(_OWORD *)(a8 + 56) = 0u;
          *(_OWORD *)(a8 + 40) = 0u;
          *(_OWORD *)(a8 + 72) = 0u;
          *(_OWORD *)(a8 + 24) = 0u;
          *(_OWORD *)(a8 + 136) = 0u;
          *(_OWORD *)(a8 + 120) = 0u;
          *(_OWORD *)(a8 + 104) = 0u;
          *(_OWORD *)(a8 + 88) = 0u;
          *(void *)a8 = -1;
          *(_DWORD *)(a8 + 8) = -1;
          *(_OWORD *)(a8 + 48) = 0u;
          *(_OWORD *)(a8 + 64) = 0u;
          *(_DWORD *)(a8 + 80) = 0;
          *(void *)(a8 + 16) = 0;
          *(void *)(a8 + 24) = 0;
          *(void *)(a8 + 32) = 0;
          *(unsigned char *)(a8 + 40) = 0;
          *(_WORD *)(a8 + 84) = -1;
          *(_OWORD *)(a8 + 104) = 0u;
          *(_OWORD *)(a8 + 88) = 0u;
          *(void *)(a8 + 120) = 0x7FFFFFFFFFFFFFFFLL;
          *(void *)(a8 + 128) = 0x7FFFFFFFFFFFFFFFLL;
          *(unsigned char *)(a8 + 137) = 1;
          *(_DWORD *)(a8 + 148) = 0;
          *(void *)(a8 + 152) = 0;
          *(void *)(a8 + 160) = 0;
          *(_DWORD *)(a8 + 156) = 0x7FFFFFFF;
          *(void *)(a8 + 168) = 0;
          *(void *)(a8 + 176) = 0;
          uint64_t v29 = __p;
          if (!__p) {
            return;
          }
LABEL_21:
          unsigned int v51 = v29;
          operator delete(v29);
          return;
        }
      }
      uint64_t v49 = sub_100231C(v31[15] + 152 * v32);
      sub_29603C(&__p, &v49);
LABEL_20:
      sub_10277C8(a8, a11, a4, a5, (uint64_t)&__p, (uint64_t)(v60 + 28), (_OWORD *)(a1 + 8), (uint64_t *)v60 + 17, *(double *)(a1 + 32), (_DWORD *)(a1 + 24), *(void *)(a1 + 40) >= *(void *)(a1 + 16), *(void *)(a1 + 48) + *(void *)(a1 + 40) >= *(void *)(a1 + 16), v45, *(_DWORD *)(a1 + 56), *(void *)(a1 + 40), *(void *)(a1 + 48));
      uint64_t v29 = __p;
      if (!__p) {
        return;
      }
      goto LABEL_21;
    }
    while (1)
    {
      if (__p != v51)
      {
        uint64_t v34 = *(v51 - 1);
        unint64_t v35 = *(void *)(v34 + 72);
        unint64_t v36 = *(unsigned int *)(v34 + 80);
        unint64_t v37 = *(unsigned __int8 *)(v34 + 88);
        uint64_t v38 = sub_100231C((uint64_t)v30);
        if (((((v35 >> 16) & 0xFFFF0000 | (v35 << 32) | (2 * ((v35 & 0xFF000000000000) == 0)))
             + ((v36 >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | (v37 >> 1) & 1) != ((((*(void *)(v38 + 32) >> 16) & 0xFFFF0000 | (*(void *)(v38 + 32) << 32) | (2 * ((*(void *)(v38 + 32) & 0xFF000000000000) == 0)))
                                                                                    + 4
                                                                                    * (unsigned __int16)*(_DWORD *)(v38 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v38 + 88) & 1))
          goto LABEL_40;
      }
      uint64_t v49 = sub_100231C((uint64_t)v30);
      sub_29603C(&__p, &v49);
      unsigned int v39 = sub_4F44(v30);
      unsigned int v26 = v39;
      if (*(_DWORD *)(v25[21] + 4 * v39) == 1)
      {
        sub_1007480((uint64_t)v25, v39);
        int v30 = (unsigned int *)(v25[15] + 152 * *(unsigned int *)(v25[12] + 4 * v26));
        if (v26 != v27) {
          goto LABEL_28;
        }
      }
      else
      {
        int v30 = 0;
        if (v39 != v27) {
          goto LABEL_28;
        }
      }
      if (!v28) {
        goto LABEL_20;
      }
LABEL_28:
      if (!v30) {
        goto LABEL_24;
      }
    }
  }
  __n128 __p = 0;
  unsigned int v51 = 0;
  uint64_t v52 = 0;
  sub_10277C8(a8, a11, a4, a5, (uint64_t)&__p, (uint64_t)(v60 + 28), (_OWORD *)(a1 + 8), (uint64_t *)v60 + 17, *(double *)(a1 + 32), (_DWORD *)(a1 + 24), *(void *)(a1 + 40) >= *(void *)(a1 + 16), *(void *)(a1 + 48) + *(void *)(a1 + 40) >= *(void *)(a1 + 16), v45, *(_DWORD *)(a1 + 56), *(void *)(a1 + 40), *(void *)(a1 + 48));
  if (__p)
  {
    unsigned int v51 = __p;
    operator delete(__p);
  }
  uint64_t v22 = sub_10023E0((uint64_t)v60);
  long long v23 = *(_OWORD *)v22;
  long long v24 = *(_OWORD *)(v22 + 16);
  *(void *)(a8 + 80) = *(void *)(v22 + 32);
  *(_OWORD *)(a8 + 48) = v23;
  *(_OWORD *)(a8 + 64) = v24;
  *(void *)(a8 + 88) = *(void *)sub_100237C((uint64_t)v60);
}

void sub_1037268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10372C0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W4>, int a5@<W5>, char a6@<W6>, uint64_t a7@<X7>, uint64_t a8@<X8>, unsigned __int8 a9, uint64_t a10, int a11)
{
}

void sub_10372E0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W4>, int a5@<W5>, char a6@<W6>, uint64_t a7@<X7>, uint64_t a8@<X8>, unsigned __int8 a9, uint64_t a10, int a11)
{
  unsigned int v16 = *(_DWORD *)(a1 + 60);
  unsigned int v17 = *(_DWORD *)(a1 + 64);
  long long v18 = *(unsigned int **)(a1 + 72);
  char v53 = 1;
  __n128 __p = &v53;
  uint64_t v58 = a3;
  BOOL v19 = v16 == v17;
  unsigned int v59 = v16;
  if (!v18) {
    BOOL v19 = 0;
  }
  long long v60 = v18;
  BOOL v61 = v19;
  long long v54 = a3;
  unsigned int v55 = v17;
  uint64_t v56 = 0;
  unsigned __int8 v57 = 0;
  sub_1037D5C((uint64_t)&v58, (uint64_t)&v54, (BOOL **)&__p);
  if (v16 != v17 || (unsigned int v20 = v17, v18))
  {
    unsigned int v20 = *v18;
    if (sub_EDBF4C(a3, *v18) == 1) {
      sub_EDBDF0(a3, v20, (uint64_t)&v58);
    }
  }
  if (v20 == v17) {
    int v21 = a9;
  }
  else {
    int v21 = 0;
  }
  sub_10137F0(a1, a6, a7, v21, a10, a3, a2, (uint64_t)&v58);
  sub_1013B38(a1, a9, a10, a3, a2, (uint64_t)&v54);
  if (!v60 || v59 == v55 && v61 == v57)
  {
    *(_OWORD *)(a8 + 8) = 0u;
    *(_OWORD *)(a8 + 56) = 0u;
    *(_OWORD *)(a8 + 40) = 0u;
    *(_OWORD *)(a8 + 72) = 0u;
    *(_OWORD *)(a8 + 24) = 0u;
    *(_OWORD *)(a8 + 136) = 0u;
    *(_OWORD *)(a8 + 120) = 0u;
    *(_OWORD *)(a8 + 104) = 0u;
    *(_OWORD *)(a8 + 88) = 0u;
    *(void *)a8 = -1;
    *(_DWORD *)(a8 + 8) = -1;
    *(_OWORD *)(a8 + 48) = 0u;
    *(_OWORD *)(a8 + 64) = 0u;
    *(_DWORD *)(a8 + 80) = 0;
    *(void *)(a8 + 16) = 0;
    *(void *)(a8 + 24) = 0;
    *(void *)(a8 + 32) = 0;
    *(unsigned char *)(a8 + 40) = 0;
    *(_WORD *)(a8 + 84) = -1;
    *(_OWORD *)(a8 + 104) = 0u;
    *(_OWORD *)(a8 + 88) = 0u;
    *(void *)(a8 + 120) = 0x7FFFFFFFFFFFFFFFLL;
    *(void *)(a8 + 128) = 0x7FFFFFFFFFFFFFFFLL;
    *(unsigned char *)(a8 + 137) = 1;
    *(_DWORD *)(a8 + 148) = 0;
    *(void *)(a8 + 152) = 0;
    *(void *)(a8 + 160) = 0;
    *(_DWORD *)(a8 + 156) = 0x7FFFFFFF;
    *(void *)(a8 + 168) = 0;
    *(void *)(a8 + 176) = 0;
    return;
  }
  if (!sub_100230C((uint64_t)v60))
  {
    __n128 __p = 0;
    unsigned int v51 = 0;
    uint64_t v52 = 0;
    uint64_t v25 = v58;
    unsigned int v26 = v59;
    unsigned int v27 = v55;
    int v28 = v57;
    if (v59 == v55 && v61 == v57) {
      goto LABEL_20;
    }
    int v30 = v60;
    if (!v60)
    {
LABEL_24:
      uint64_t v31 = (void *)sub_1005964(a2);
      sub_1007480((uint64_t)v31, v26);
      uint64_t v32 = *(unsigned int *)(v31[12] + 4 * v26);
      sub_1007480((uint64_t)v31, v26);
      if (v32 == 0xFFFFFFFFLL) {
        goto LABEL_40;
      }
      while (1)
      {
        int v33 = sub_4F44((unsigned int *)(v31[15] + 152 * v32));
        if (v33 == v55) {
          break;
        }
        uint64_t v32 = *(unsigned int *)(v31[18] + 4 * v32);
        if (v32 == -1) {
          goto LABEL_40;
        }
      }
      if (__p != v51)
      {
        uint64_t v40 = *(v51 - 1);
        unint64_t v41 = *(void *)(v40 + 72);
        unint64_t v42 = *(unsigned int *)(v40 + 80);
        unint64_t v43 = *(unsigned __int8 *)(v40 + 88);
        uint64_t v44 = sub_100231C(v31[15] + 152 * v32);
        if (((((v41 >> 16) & 0xFFFF0000 | (v41 << 32) | (2 * ((v41 & 0xFF000000000000) == 0)))
             + ((v42 >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | (v43 >> 1) & 1) != ((((*(void *)(v44 + 32) >> 16) & 0xFFFF0000 | (*(void *)(v44 + 32) << 32) | (2 * ((*(void *)(v44 + 32) & 0xFF000000000000) == 0)))
                                                                                    + 4
                                                                                    * (unsigned __int16)*(_DWORD *)(v44 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v44 + 88) & 1))
        {
LABEL_40:
          *(_OWORD *)(a8 + 8) = 0u;
          *(_OWORD *)(a8 + 56) = 0u;
          *(_OWORD *)(a8 + 40) = 0u;
          *(_OWORD *)(a8 + 72) = 0u;
          *(_OWORD *)(a8 + 24) = 0u;
          *(_OWORD *)(a8 + 136) = 0u;
          *(_OWORD *)(a8 + 120) = 0u;
          *(_OWORD *)(a8 + 104) = 0u;
          *(_OWORD *)(a8 + 88) = 0u;
          *(void *)a8 = -1;
          *(_DWORD *)(a8 + 8) = -1;
          *(_OWORD *)(a8 + 48) = 0u;
          *(_OWORD *)(a8 + 64) = 0u;
          *(_DWORD *)(a8 + 80) = 0;
          *(void *)(a8 + 16) = 0;
          *(void *)(a8 + 24) = 0;
          *(void *)(a8 + 32) = 0;
          *(unsigned char *)(a8 + 40) = 0;
          *(_WORD *)(a8 + 84) = -1;
          *(_OWORD *)(a8 + 104) = 0u;
          *(_OWORD *)(a8 + 88) = 0u;
          *(void *)(a8 + 120) = 0x7FFFFFFFFFFFFFFFLL;
          *(void *)(a8 + 128) = 0x7FFFFFFFFFFFFFFFLL;
          *(unsigned char *)(a8 + 137) = 1;
          *(_DWORD *)(a8 + 148) = 0;
          *(void *)(a8 + 152) = 0;
          *(void *)(a8 + 160) = 0;
          *(_DWORD *)(a8 + 156) = 0x7FFFFFFF;
          *(void *)(a8 + 168) = 0;
          *(void *)(a8 + 176) = 0;
          uint64_t v29 = __p;
          if (!__p) {
            return;
          }
LABEL_21:
          unsigned int v51 = v29;
          operator delete(v29);
          return;
        }
      }
      uint64_t v49 = sub_100231C(v31[15] + 152 * v32);
      sub_29603C(&__p, &v49);
LABEL_20:
      sub_10277C8(a8, a11, a4, a5, (uint64_t)&__p, (uint64_t)(v60 + 28), (_OWORD *)(a1 + 8), (uint64_t *)v60 + 17, *(double *)(a1 + 32), (_DWORD *)(a1 + 24), *(void *)(a1 + 40) >= *(void *)(a1 + 16), *(void *)(a1 + 48) + *(void *)(a1 + 40) >= *(void *)(a1 + 16), v45, *(_DWORD *)(a1 + 56), *(void *)(a1 + 40), *(void *)(a1 + 48));
      uint64_t v29 = __p;
      if (!__p) {
        return;
      }
      goto LABEL_21;
    }
    while (1)
    {
      if (__p != v51)
      {
        uint64_t v34 = *(v51 - 1);
        unint64_t v35 = *(void *)(v34 + 72);
        unint64_t v36 = *(unsigned int *)(v34 + 80);
        unint64_t v37 = *(unsigned __int8 *)(v34 + 88);
        uint64_t v38 = sub_100231C((uint64_t)v30);
        if (((((v35 >> 16) & 0xFFFF0000 | (v35 << 32) | (2 * ((v35 & 0xFF000000000000) == 0)))
             + ((v36 >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | (v37 >> 1) & 1) != ((((*(void *)(v38 + 32) >> 16) & 0xFFFF0000 | (*(void *)(v38 + 32) << 32) | (2 * ((*(void *)(v38 + 32) & 0xFF000000000000) == 0)))
                                                                                    + 4
                                                                                    * (unsigned __int16)*(_DWORD *)(v38 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v38 + 88) & 1))
          goto LABEL_40;
      }
      uint64_t v49 = sub_100231C((uint64_t)v30);
      sub_29603C(&__p, &v49);
      unsigned int v39 = sub_4F44(v30);
      unsigned int v26 = v39;
      if (*(_DWORD *)(v25[21] + 4 * v39) == 1)
      {
        sub_1007480((uint64_t)v25, v39);
        int v30 = (unsigned int *)(v25[15] + 152 * *(unsigned int *)(v25[12] + 4 * v26));
        if (v26 != v27) {
          goto LABEL_28;
        }
      }
      else
      {
        int v30 = 0;
        if (v39 != v27) {
          goto LABEL_28;
        }
      }
      if (!v28) {
        goto LABEL_20;
      }
LABEL_28:
      if (!v30) {
        goto LABEL_24;
      }
    }
  }
  __n128 __p = 0;
  unsigned int v51 = 0;
  uint64_t v52 = 0;
  sub_10277C8(a8, a11, a4, a5, (uint64_t)&__p, (uint64_t)(v60 + 28), (_OWORD *)(a1 + 8), (uint64_t *)v60 + 17, *(double *)(a1 + 32), (_DWORD *)(a1 + 24), *(void *)(a1 + 40) >= *(void *)(a1 + 16), *(void *)(a1 + 48) + *(void *)(a1 + 40) >= *(void *)(a1 + 16), v45, *(_DWORD *)(a1 + 56), *(void *)(a1 + 40), *(void *)(a1 + 48));
  if (__p)
  {
    unsigned int v51 = __p;
    operator delete(__p);
  }
  uint64_t v22 = sub_10023E0((uint64_t)v60);
  long long v23 = *(_OWORD *)v22;
  long long v24 = *(_OWORD *)(v22 + 16);
  *(void *)(a8 + 80) = *(void *)(v22 + 32);
  *(_OWORD *)(a8 + 48) = v23;
  *(_OWORD *)(a8 + 64) = v24;
  *(void *)(a8 + 88) = *(void *)sub_100237C((uint64_t)v60);
}

void sub_1037900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1037958(unsigned int a1, void *a2)
{
  return (unsigned __int16)(*(_WORD *)(*a2 + 4 * (a1 + 1)) - *(_DWORD *)(*a2 + 4 * a1));
}

uint64_t sub_10379C0(void *a1, unsigned int a2)
{
  uint64_t v3 = a2;
  sub_EC079C((uint64_t)a1, a2);
  uint64_t v4 = a1[12];
  if (((a1[7] - a1[6]) >> 2) - 1 > (unint64_t)((a1[13] - v4) >> 3))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v8, "no or incomplete vertex data stored");
    int64_t v7 = (void *)sub_2F404((uint64_t)exception, &v8);
  }
  return v4 + 8 * v3;
}

void sub_1037A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1037A90@<X0>(uint64_t a1@<X0>, int *a2@<X1>, int a3@<W3>, int a4@<W4>, int a5@<W5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  return sub_10277C8(a8, a5, a3, a4, a7, a6 + 112, (_OWORD *)a1, (uint64_t *)(a6 + 136), *(double *)(a1 + 24), (_DWORD *)(a1 + 16), *(void *)(a1 + 32) >= *(void *)(a1 + 8), *(void *)(a1 + 40) + *(void *)(a1 + 32) >= *(void *)(a1 + 8), v9, *a2, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

__n128 sub_1037B18@<Q0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = sub_1024750(a3);
  *(_DWORD *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = *(void *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v5 + 64) = v6;
  *(void *)(v5 + 79) = *(void *)(a2 + 79);
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 32) = v7;
  *(void *)(v5 + 88) = *(void *)(a2 + 88);
  __n128 result = *(__n128 *)(a2 + 96);
  long long v9 = *(_OWORD *)(a2 + 112);
  long long v10 = *(_OWORD *)(a2 + 128);
  long long v11 = *(_OWORD *)(a2 + 144);
  *(void *)(v5 + 159) = *(void *)(a2 + 159);
  *(_OWORD *)(v5 + 128) = v10;
  *(_OWORD *)(v5 + 144) = v11;
  *(__n128 *)(v5 + 96) = result;
  *(_OWORD *)(v5 + 112) = v9;
  return result;
}

uint64_t sub_1037B88(uint64_t result, uint64_t a2, char **a3)
{
  uint64_t v5 = result;
  if (*(_DWORD *)(result + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int8 *)(result + 24) != *(unsigned __int8 *)(a2 + 24))
  {
    long long v6 = *(void **)result;
    long long v7 = *(unsigned int **)(result + 16);
    uint64_t v8 = *v7;
    *(_DWORD *)(result + 8) = v8;
    *(unsigned char *)(result + 24) = 0;
    if (*(_DWORD *)(v6[21] + 4 * v8) == 1)
    {
      __n128 result = sub_EC06EC((uint64_t)v6, v8);
      uint64_t v9 = v6[15] + 104 * *(unsigned int *)(v6[12] + 4 * v8);
    }
    else
    {
      uint64_t v9 = 0;
    }
    *(void *)(v5 + 16) = v9;
    while (*(_DWORD *)(v5 + 8) != *(_DWORD *)(a2 + 8) || *(unsigned __int8 *)(v5 + 24) != *(unsigned __int8 *)(a2 + 24))
    {
      long long v10 = *(unsigned int **)(v5 + 16);
      if (**a3) {
        BOOL v11 = ((((*((void *)v7 + 10) >> 16) & 0xFFFF0000 | (*((void *)v7 + 10) << 32) | (2
      }
                                                                                             * ((*((void *)v7 + 10) & 0xFF000000000000) == 0)))
              + (((unint64_t)v7[22] >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*((unsigned __int8 *)v7 + 96) >> 1) & 1) == ((((*((void *)v10 + 5) >> 16) & 0xFFFF0000 | (*((void *)v10 + 5) << 32) | (2 * ((*((void *)v10 + 5) & 0xFF000000000000) == 0))) + 4 * (unsigned __int16)v10[22]) & 0xFFFFFFFFFFFFFFFELL | v10[24] & 1);
      else {
        BOOL v11 = 0;
      }
      char v12 = v11;
      **a3 = v12;
      uint64_t v13 = *v10;
      *(_DWORD *)(v5 + 8) = v13;
      *(unsigned char *)(v5 + 24) = 0;
      uint64_t v14 = *(void *)v5;
      if (*(_DWORD *)(*(void *)(*(void *)v5 + 168) + 4 * v13) == 1)
      {
        __n128 result = sub_EC06EC(*(void *)v5, v13);
        uint64_t v15 = *(void *)(v14 + 120) + 104 * *(unsigned int *)(*(void *)(v14 + 96) + 4 * v13);
      }
      else
      {
        uint64_t v15 = 0;
      }
      *(void *)(v5 + 16) = v15;
      uint64_t v16 = *v7;
      long long v7 = 0;
      if (*(_DWORD *)(v6[21] + 4 * v16) == 1)
      {
        __n128 result = sub_EC06EC((uint64_t)v6, v16);
        long long v7 = (unsigned int *)(v6[15] + 104 * *(unsigned int *)(v6[12] + 4 * v16));
      }
    }
  }
  return result;
}

uint64_t sub_1037D5C(uint64_t result, uint64_t a2, BOOL **a3)
{
  uint64_t v5 = (void **)result;
  if (*(_DWORD *)(result + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int8 *)(result + 24) != *(unsigned __int8 *)(a2 + 24))
  {
    long long v6 = *(void **)result;
    uint64_t v7 = *(void *)(result + 16);
    unsigned int v8 = *(_DWORD *)v7;
    *(_DWORD *)(result + 8) = *(_DWORD *)v7;
    *(unsigned char *)(result + 24) = 0;
    __n128 result = sub_EDBF4C(v6, v8);
    if (result == 1)
    {
      __n128 result = sub_EDBDF0(*v5, *((_DWORD *)v5 + 2), (uint64_t)v16);
      uint64_t v9 = *(void *)v16[0] + 104 * v17;
    }
    else
    {
      uint64_t v9 = 0;
    }
    for (v5[2] = (void *)v9; *((_DWORD *)v5 + 2) != *(_DWORD *)(a2 + 8); uint64_t v7 = 0)
    {
LABEL_11:
      while (1)
      {
        long long v10 = v5[2];
        BOOL v11 = **a3
           && ((((*(void *)(v7 + 80) >> 16) & 0xFFFF0000 | (*(void *)(v7 + 80) << 32) | (2
                                                                                             * ((*(void *)(v7 + 80) & 0xFF000000000000) == 0)))
              + (((unint64_t)*(unsigned int *)(v7 + 88) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v7 + 96) >> 1) & 1) == ((((v10[5] >> 16) & 0xFFFF0000 | (v10[5] << 32) | (2 * ((v10[5] & 0xFF000000000000) == 0))) + 4 * (unsigned __int16)*((_DWORD *)v10 + 22)) & 0xFFFFFFFFFFFFFFFELL | v10[12] & 1);
        BOOL v12 = v11;
        **a3 = v12;
        unsigned int v13 = *(_DWORD *)v10;
        *((_DWORD *)v5 + 2) = *(_DWORD *)v10;
        *((unsigned char *)v5 + 24) = 0;
        if (sub_EDBF4C(*v5, v13) == 1)
        {
          sub_EDBDF0(*v5, *((_DWORD *)v5 + 2), (uint64_t)v16);
          uint64_t v14 = *(void *)v16[0] + 104 * v17;
        }
        else
        {
          uint64_t v14 = 0;
        }
        v5[2] = (void *)v14;
        unsigned int v15 = *(_DWORD *)v7;
        __n128 result = sub_EDBF4C(v6, v15);
        if (result != 1) {
          break;
        }
        __n128 result = sub_EDBDF0(v6, v15, (uint64_t)v16);
        uint64_t v7 = *(void *)v16[0] + 104 * v17;
        if (*((_DWORD *)v5 + 2) == *(_DWORD *)(a2 + 8)) {
          goto LABEL_10;
        }
      }
    }
LABEL_10:
    if (*((unsigned __int8 *)v5 + 24) != *(unsigned __int8 *)(a2 + 24)) {
      goto LABEL_11;
    }
  }
  return result;
}

void sub_1037F60()
{
  unk_25FD60F = 16641;
  word_25FD5F8 = 65;
  byte_25FD627 = 1;
  byte_25FD611 = 0;
}

uint64_t **sub_1037F88(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  *a1 = a2;
  a1[1] = (uint64_t *)sub_3750CC(a2);
  sub_3D9344((uint64_t *)a1 + 2, a2);
  sub_F170F0((uint64_t *)a1 + 13, a2);
  __p[23] = 8;
  strcpy(__p, "standard");
  uint64_t v6 = sub_374DFC(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  a1[19] = (uint64_t *)v6;
  a1[20] = a3;
  uint64_t v14 = 0;
  *(void *)__n128 __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B8E90;
  strcpy(*(char **)__p, "CyclingRouteCriteriaComputation");
  BOOL v12 = 0;
  unsigned int v13 = 0;
  uint64_t v7 = sub_374CDC((uint64_t)a2, (uint64_t)__p, (uint64_t *)&v12);
  sub_1038180((uint64_t)(a1 + 21), v7);
  unsigned int v8 = (void **)v12;
  if (v12)
  {
    uint64_t v9 = v13;
    long long v10 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      long long v10 = v12;
    }
    unsigned int v13 = v8;
    operator delete(v10);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  return a1;
}

void sub_10380F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  BOOL v19 = *(void **)(v17 + 128);
  if (v19)
  {
    *(void *)(v17 + 136) = v19;
    operator delete(v19);
    if ((*(char *)(v17 + 79) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v17 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v17 + 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1038180(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "baseline_speed");
  *(double *)a1 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  strcpy((char *)__p, "baseline_num_car_trips");
  HIBYTE(__p[2]) = 22;
  __int16 v4 = sub_376928(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_WORD *)(a1 + 8) = v4;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "min_sharp_turn_angle");
  __int16 v5 = sub_376928(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_WORD *)(a1 + 10) = v5;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "min_sharp_turn_angle_against_traffic");
  __int16 v6 = sub_376928(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_WORD *)(a1 + 12) = v6;
  return a1;
}

void sub_10382E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1038310(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = result;
    do
    {
      __n128 result = sub_103835C(v4, v2);
      v2 += 280;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_103835C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  uint64_t v3 = *(void *)(v2 + 504);
  if (v3)
  {
    uint64_t v5 = result;
    uint64_t v171 = (double *)(a2 + 160);
    double v6 = (double)v3;
    *(double *)(a2 + 64) = (double)v3;
    *(double *)(a2 + 40) = (double)*(int *)(v2 + 516);
    int v7 = *(_DWORD *)(v2 + 516);
    int v8 = v7 / 10;
    int v9 = v7 % 10;
    if (v7 < 0) {
      char v10 = -5;
    }
    else {
      char v10 = 5;
    }
    double v11 = ceil((double)(int)(v8 + (((103 * (char)(v10 + v9)) >> 15) & 1) + ((103 * (char)(v10 + v9)) >> 10))/ 60.0)* 60.0* 10.0;
    if (v11 >= 0.0)
    {
      if (v11 >= 4.50359963e15) {
        goto LABEL_13;
      }
      uint64_t v12 = (uint64_t)(v11 + v11) + 1;
    }
    else
    {
      if (v11 <= -4.50359963e15) {
        goto LABEL_13;
      }
      uint64_t v12 = (uint64_t)(v11 + v11);
      if (v12 >= 1) {
        --v12;
      }
    }
    double v11 = (double)(v12 >> 1);
LABEL_13:
    double v173 = v6;
    uint64_t v172 = (double *)(a2 + 152);
    *(double *)(a2 + 16) = (double)(int)v11;
    uint64_t v13 = sub_3AEFFC(v2);
    double v14 = 1.0;
    double v15 = 1.0;
    if (*(unsigned char *)(v13 + 12))
    {
      uint64_t v16 = sub_46CAA4(v2);
      double v15 = 0.0;
      if (!*(unsigned char *)(v16 + 12)) {
        double v15 = 1.0;
      }
    }
    *(double *)(a2 + 104) = v15;
    sub_46C77C((void *)v2, &v184);
    double v17 = 0.0;
    unint64_t v19 = *((void *)&v184 + 1);
    long long v18 = (void *)v184;
    unint64_t v178 = (uint64_t *)(v5 + 104);
    double v20 = 0.0;
    double v174 = 0.0;
    double v175 = 0.0;
    double v176 = 0.0;
    double v177 = 0.0;
    long long v21 = v185;
    double v22 = 0.0;
    double v23 = 0.0;
    double v182 = 0.0;
    double v183 = 0.0;
    double v180 = 0.0;
    double v181 = 0.0;
    double v179 = 0.0;
    while (v18)
    {
      unint64_t v24 = sub_46C760(v18);
      unint64_t v25 = v24;
      if ((void)v21)
      {
        unint64_t v26 = sub_46C760((void *)v21);
        if (v19 >= v25 || *((void *)&v21 + 1) >= v26)
        {
          if (v19 < v25 == *((void *)&v21 + 1) < v26) {
            goto LABEL_184;
          }
        }
        else
        {
          uint64_t v27 = sub_46C8EC(v18, v19);
          if (v27 == sub_46C8EC((void *)v21, *((uint64_t *)&v21 + 1))) {
            goto LABEL_184;
          }
        }
      }
      else if (v19 >= v24)
      {
        goto LABEL_184;
      }
LABEL_30:
      int v28 = (int **)sub_46C8EC(v18, v19);
      uint64_t v30 = sub_46CCC8(v18, v19, v29);
      uint64_t v31 = *v28;
      uint64_t v32 = **v28;
      int v33 = (unsigned __int16 *)((char *)*v28 - v32);
      unsigned int v34 = *v33;
      if (v34 >= 0xB && v33[5])
      {
        double v35 = (double)v30;
        if ((*(int *)((char *)v31 + v33[5]) & 8) != 0) {
          double v36 = (double)v30;
        }
        else {
          double v36 = 0.0;
        }
        int v37 = *((unsigned __int8 *)v28 + 38);
        if (!*((unsigned char *)v28 + 38))
        {
LABEL_36:
          double v38 = v35;
          if (v34 >= 0x47)
          {
            unsigned int v39 = v33[35];
            double v38 = v35;
            if (v33[35])
            {
              int v40 = 1;
              goto LABEL_43;
            }
          }
          goto LABEL_46;
        }
      }
      else
      {
        double v35 = (double)v30;
        double v36 = 0.0;
        int v37 = *((unsigned __int8 *)v28 + 38);
        if (!*((unsigned char *)v28 + 38)) {
          goto LABEL_36;
        }
      }
      double v38 = v35;
      if (v34 >= 0x47)
      {
        unsigned int v39 = v33[35];
        double v38 = v35;
        if (v33[35])
        {
          int v40 = 2;
LABEL_43:
          if ((*(int *)((char *)v31 + v39) & v40) != 0) {
            double v38 = 0.0;
          }
          else {
            double v38 = v35;
          }
        }
      }
LABEL_46:
      unint64_t v41 = v28[1];
      unint64_t v42 = (unsigned __int16 *)((char *)v41 - *v41);
      double v43 = 0.0;
      if (*v42 >= 0x13u)
      {
        uint64_t v44 = v42[9];
        if (v44)
        {
          LOWORD(v43) = *(_WORD *)((char *)v41 + v44);
          double v43 = (double)*(unint64_t *)&v43;
        }
      }
      double v45 = v43 + *(double *)(a2 + 48);
      *(double *)(a2 + 48) = v45;
      if (!v37)
      {
        if (v34 < 0x4D)
        {
          double v20 = v20 + v35 * 0.0;
          double v17 = v17 + v35 * 0.0;
          if (v34 < 0x47) {
            goto LABEL_119;
          }
          uint64_t v59 = v33[35];
          if (!v33[35]) {
            goto LABEL_119;
          }
          goto LABEL_104;
        }
        if (!v33[38])
        {
          if (v34 <= 0x56) {
            goto LABEL_90;
          }
LABEL_82:
          uint64_t v60 = v33[43];
          if (v33[43])
          {
            BOOL v61 = (unsigned int *)((char *)v31 + v60);
            long long v62 = (int *)((char *)v31 + v60 + *(unsigned int *)((char *)v31 + v60));
            long long v63 = (unsigned __int16 *)((char *)v62 - *v62);
            double v64 = 0.0;
            if (*v63 >= 5u)
            {
              uint64_t v65 = v63[2];
              if (v65)
              {
                LOWORD(v64) = *(_WORD *)((char *)v62 + v65);
                double v64 = ((double)*(unint64_t *)&v64 + (double)*(unint64_t *)&v64) / 65535.0;
              }
            }
            double v66 = v35 * v64;
            double v20 = v20 + v66;
            char v67 = (int *)((char *)v61 + *v61);
            long long v68 = (unsigned __int16 *)((char *)v67 - *v67);
            if (*v68 < 7u) {
              goto LABEL_103;
            }
            unsigned int v69 = v68[3];
            if (!v69) {
              goto LABEL_103;
            }
          }
          else
          {
            double v70 = 0.0;
            if (v34 >= 0x7B && v33[61])
            {
              LOWORD(v70) = *(_WORD *)((char *)v31 + v33[61]);
              double v70 = ((double)*(unint64_t *)&v70 + (double)*(unint64_t *)&v70) / 65535.0;
            }
            double v66 = v35 * v70;
            double v20 = v20 + v66;
            if (v34 < 0x7D || (v69 = v33[62], char v67 = v31, !v33[62]))
            {
LABEL_103:
              double v17 = v17 + v35 * 0.0;
              uint64_t v59 = v33[35];
              if (!v33[35]) {
                goto LABEL_119;
              }
              goto LABEL_104;
            }
          }
          LOWORD(v66) = *(_WORD *)((char *)v67 + v69);
          double v17 = v17 + v35 * (((double)*(unint64_t *)&v66 + (double)*(unint64_t *)&v66) / 65535.0);
          uint64_t v59 = v33[35];
          if (!v33[35]) {
            goto LABEL_119;
          }
          goto LABEL_104;
        }
        uint64_t v46 = v33[38];
        if ((*(int *)((char *)v31 + v46) & 4) != 0)
        {
LABEL_53:
          double v45 = *(double *)(a2 + 120) + v14;
          *(double *)(a2 + 120) = v45;
        }
LABEL_54:
        if (v37) {
          int v47 = 2;
        }
        else {
          int v47 = 1;
        }
        if ((*(int *)((char *)v31 + v46) & v47) != 0)
        {
          double v45 = *(double *)(a2 + 128) + v14;
          *(double *)(a2 + 128) = v45;
        }
        if (!v37)
        {
          if (v34 > 0x56) {
            goto LABEL_82;
          }
LABEL_90:
          double v20 = v20 + v35 * 0.0;
          double v17 = v17 + v35 * 0.0;
          uint64_t v59 = v33[35];
          if (!v33[35]) {
            goto LABEL_119;
          }
LABEL_104:
          int v71 = *(int *)((char *)v31 + v59);
          double v72 = -0.0;
          if ((v71 & 0x200) != 0) {
            double v73 = v35;
          }
          else {
            double v73 = -0.0;
          }
          double v74 = v179 + v73;
          if ((v71 & 0x800) != 0) {
            double v75 = v35;
          }
          else {
            double v75 = -0.0;
          }
          double v179 = v74;
          double v180 = v180 + v75;
          if ((v71 & 0x80) != 0) {
            double v76 = v35;
          }
          else {
            double v76 = -0.0;
          }
          double v77 = v181 + v76;
          if ((v71 & 0x20) != 0) {
            double v78 = v35;
          }
          else {
            double v78 = -0.0;
          }
          double v183 = v183 + v78;
          if ((v71 & 8) != 0) {
            double v72 = v35;
          }
          double v181 = v77;
          double v182 = v182 + v72;
          if ((v71 & 0xA0AA8) != 0)
          {
LABEL_119:
            if (*v33 <= 0xAu) {
              goto LABEL_156;
            }
            goto LABEL_120;
          }
          if (*(int *)((char *)v31 + v59)) {
            goto LABEL_161;
          }
          goto LABEL_125;
        }
        if (v34 <= 0x56)
        {
LABEL_79:
          double v20 = v20 + v35 * 0.0;
          double v17 = v17 + v35 * 0.0;
          uint64_t v58 = v33[35];
          if (!v33[35]) {
            goto LABEL_149;
          }
          goto LABEL_134;
        }
        goto LABEL_61;
      }
      if (v34 < 0x4D)
      {
        double v20 = v20 + v35 * 0.0;
        double v17 = v17 + v35 * 0.0;
        if (v34 < 0x47) {
          goto LABEL_149;
        }
        uint64_t v58 = v33[35];
        if (!v33[35]) {
          goto LABEL_149;
        }
        goto LABEL_134;
      }
      if (v33[38])
      {
        uint64_t v46 = v33[38];
        if ((*(int *)((char *)v31 + v46) & 8) != 0) {
          goto LABEL_53;
        }
        goto LABEL_54;
      }
      if (v34 <= 0x56) {
        goto LABEL_79;
      }
LABEL_61:
      uint64_t v48 = v33[43];
      if (v33[43])
      {
        uint64_t v49 = (unsigned int *)((char *)v31 + v48);
        uint64_t v50 = (int *)((char *)v31 + v48 + *(unsigned int *)((char *)v31 + v48));
        unsigned int v51 = (unsigned __int16 *)((char *)v50 - *v50);
        double v52 = 0.0;
        if (*v51 >= 7u)
        {
          uint64_t v53 = v51[3];
          if (v53)
          {
            LOWORD(v52) = *(_WORD *)((char *)v50 + v53);
            double v52 = ((double)*(unint64_t *)&v52 + (double)*(unint64_t *)&v52) / 65535.0;
          }
        }
        double v54 = v35 * v52;
        double v20 = v20 + v54;
        unsigned int v55 = (int *)((char *)v49 + *v49);
        uint64_t v56 = (unsigned __int16 *)((char *)v55 - *v55);
        if (*v56 >= 5u)
        {
          unsigned int v57 = v56[2];
          if (v57)
          {
LABEL_130:
            LOWORD(v54) = *(_WORD *)((char *)v55 + v57);
            double v17 = v17 + v35 * (((double)*(unint64_t *)&v54 + (double)*(unint64_t *)&v54) / 65535.0);
            uint64_t v58 = v33[35];
            if (!v33[35]) {
              goto LABEL_149;
            }
            goto LABEL_134;
          }
        }
      }
      else if (v34 < 0x7D)
      {
        double v54 = v35 * 0.0;
        double v20 = v20 + v35 * 0.0;
        if (v34 >= 0x7B)
        {
          unsigned int v57 = v33[61];
          unsigned int v55 = v31;
          if (v33[61]) {
            goto LABEL_130;
          }
        }
      }
      else if (v33[62])
      {
        LOWORD(v45) = *(_WORD *)((char *)v31 + v33[62]);
        double v54 = v35 * (((double)*(unint64_t *)&v45 + (double)*(unint64_t *)&v45) / 65535.0);
        double v20 = v20 + v54;
        unsigned int v57 = v33[61];
        unsigned int v55 = v31;
        if (v33[61]) {
          goto LABEL_130;
        }
      }
      else
      {
        double v54 = v35 * 0.0;
        double v20 = v20 + v35 * 0.0;
        unsigned int v57 = v33[61];
        unsigned int v55 = v31;
        if (v33[61]) {
          goto LABEL_130;
        }
      }
      double v17 = v17 + v35 * 0.0;
      uint64_t v58 = v33[35];
      if (!v33[35]) {
        goto LABEL_149;
      }
LABEL_134:
      int v80 = *(int *)((char *)v31 + v58);
      double v81 = -0.0;
      if ((v80 & 0x400) != 0) {
        double v82 = v35;
      }
      else {
        double v82 = -0.0;
      }
      double v83 = v179 + v82;
      if ((v80 & 0x1000) != 0) {
        double v84 = v35;
      }
      else {
        double v84 = -0.0;
      }
      double v179 = v83;
      double v180 = v180 + v84;
      if ((v80 & 0x100) != 0) {
        double v85 = v35;
      }
      else {
        double v85 = -0.0;
      }
      double v86 = v181 + v85;
      if ((v80 & 0x40) != 0) {
        double v87 = v35;
      }
      else {
        double v87 = -0.0;
      }
      double v183 = v183 + v87;
      if ((v80 & 0x10) != 0) {
        double v81 = v35;
      }
      double v181 = v86;
      double v182 = v182 + v81;
      if ((v80 & 0x141550) != 0)
      {
LABEL_149:
        if (*v33 <= 0xAu) {
          goto LABEL_156;
        }
        goto LABEL_150;
      }
      if ((*(int *)((char *)v31 + v58) & 2) != 0)
      {
LABEL_161:
        sub_657AC4(*(void *)(v5 + 8), (uint64_t)v28, (uint64_t)&v184);
        if (v186 && (void)v184 && *((void *)&v184 + 1))
        {
          int v92 = (unsigned __int16 *)(v184 - *(int *)v184);
          unsigned int v93 = *v92;
          if (v93 < 9)
          {
            LODWORD(v94) = 0;
            if (BYTE6(v186)) {
              goto LABEL_168;
            }
          }
          else
          {
            uint64_t v94 = v92[4];
            if (v92[4]) {
              LODWORD(v94) = *(_DWORD *)(v184 + v94);
            }
            if (BYTE6(v186))
            {
LABEL_168:
              if (v93 < 0x47) {
                goto LABEL_179;
              }
              uint64_t v95 = v92[35];
              if (!v95) {
                goto LABEL_179;
              }
              int v96 = *(_DWORD *)(v184 + v95);
              if ((v96 & 0x141510) == 0 && (v96 & 0x40) == 0) {
                goto LABEL_179;
              }
LABEL_178:
              double v174 = v174 + (double)v94;
              long long v99 = v171;
              goto LABEL_180;
            }
          }
          if (v93 >= 0x47)
          {
            uint64_t v97 = v92[35];
            if (v97)
            {
              int v98 = *(_DWORD *)(v184 + v97);
              if ((v98 & 0xA0A88) != 0 || (v98 & 0x20) != 0) {
                goto LABEL_178;
              }
            }
          }
LABEL_179:
          double v175 = v175 + (double)v94;
          long long v99 = v172;
LABEL_180:
          *long long v99 = *v99 + v14;
        }
        double v176 = v176 + v35;
        uint64_t v31 = *v28;
        int v33 = (unsigned __int16 *)((char *)*v28 - **v28);
        BOOL v79 = *v33 >= 0xBu;
        if (!*((unsigned char *)v28 + 38))
        {
LABEL_126:
          if (!v79) {
            goto LABEL_156;
          }
LABEL_120:
          if (!v33[5] || (*((unsigned char *)v31 + v33[5]) & 1) == 0 && (*(int *)((char *)v31 + v33[5]) & 2) == 0) {
            goto LABEL_156;
          }
          goto LABEL_153;
        }
        goto LABEL_182;
      }
LABEL_125:
      int v33 = (unsigned __int16 *)((char *)v31 - v32);
      BOOL v79 = *(unsigned __int16 *)((char *)v31 - v32) >= 0xBu;
      if (!v37) {
        goto LABEL_126;
      }
LABEL_182:
      if (!v79) {
        goto LABEL_156;
      }
LABEL_150:
      if (!v33[5] || (*((unsigned char *)v31 + v33[5]) & 2) == 0 && (*(int *)((char *)v31 + v33[5]) & 1) == 0) {
        goto LABEL_156;
      }
LABEL_153:
      double v88 = sub_F1C098(v5 + 104, v28, (void *)(*(void *)(v5 + 152) + 1336));
      long long v89 = *(_OWORD *)v28;
      long long v90 = *((_OWORD *)v28 + 1);
      unint64_t v186 = v28[4];
      long long v184 = v89;
      long long v185 = v90;
      BYTE6(v186) ^= 1u;
      double v91 = sub_F1C098(v5 + 104, (int **)&v184, (void *)(*(void *)(v5 + 152) + 1336));
      if (v88 >= v91) {
        double v91 = v88;
      }
      double v14 = 1.0;
      double v177 = v177 + v91;
LABEL_156:
      if ((sub_1039540(v5, v28) & 1) == 0) {
        *(double *)(a2 + 264) = v35 + *(double *)(a2 + 264);
      }
      if (sub_1039984(v5, (void *)v2, v18, v19)) {
        *(double *)(a2 + 176) = *(double *)(a2 + 176) + v14;
      }
      double v23 = v23 + v36;
      double v22 = v22 + v38;
      ++v19;
    }
    if ((void)v21 && *((void *)&v21 + 1) < sub_46C760((void *)v21)) {
      goto LABEL_30;
    }
LABEL_184:
    if (v17 >= v20) {
      double v100 = v20;
    }
    else {
      double v100 = v17;
    }
    *(double *)(a2 + 240) = v100;
    *(double *)(a2 + 184) = v179 / v173;
    *(double *)(a2 + 192) = v180 / v173;
    *(double *)(a2 + 200) = v181 / v173;
    *(double *)(a2 + 208) = v182 / v173;
    *(double *)(a2 + 216) = v183 / v173;
    *(double *)(a2 + 224) = v176 / v173;
    *(double *)(a2 + 72) = v23 / v173;
    *(double *)(a2 + 80) = v22 / v173;
    *(double *)(a2 + 152) = v175 / v173;
    *(double *)(a2 + 160) = v174 / v173;
    *(double *)(a2 + 144) = v177 / v173;
    sub_46B058();
    long long v102 = v101;
    unint64_t v104 = v103;
    sub_46B060();
    int v107 = v105;
    unint64_t v108 = v106;
    if (v102)
    {
      unint64_t v109 = sub_46C760(v102);
      unint64_t v110 = v109;
      if (v107)
      {
        unint64_t v111 = sub_46C760(v107);
        if (v104 >= v110 || v108 >= v111)
        {
          if (v104 < v110 == v108 < v111) {
            goto LABEL_317;
          }
        }
        else
        {
          uint64_t v112 = sub_46C8EC(v102, v104);
          if (v112 == sub_46C8EC(v107, v108)) {
            goto LABEL_317;
          }
        }
LABEL_199:
        char v113 = 0;
        while (1)
        {
LABEL_200:
          uint64_t v114 = v104++;
          if (v102)
          {
            unint64_t v115 = sub_46C760(v102);
            unint64_t v116 = v115;
            if (v113)
            {
              if (v104 >= v115) {
                goto LABEL_317;
              }
            }
            else
            {
              unint64_t v117 = sub_46C760(v107);
              if (v104 >= v116 || v108 >= v117)
              {
                if (v104 < v116 == v108 < v117) {
                  goto LABEL_317;
                }
              }
              else
              {
                uint64_t v118 = sub_46C8EC(v102, v104);
                if (v118 == sub_46C8EC(v107, v108)) {
                  goto LABEL_317;
                }
              }
            }
          }
          else if ((v113 & 1) != 0 || v108 >= sub_46C760(v107))
          {
            goto LABEL_317;
          }
          int v119 = (int **)sub_46C8EC(v102, v114);
          long long v120 = (int **)sub_46C8EC(v102, v104);
          uint64_t v121 = v120;
          uint64_t v122 = (unsigned __int16 *)((char *)*v119 - **v119);
          unsigned int v123 = *v122;
          if (*((unsigned char *)v119 + 38))
          {
            if (v123 >= 0x49)
            {
              unsigned int v124 = v122[36];
              if (v124) {
                goto LABEL_218;
              }
            }
          }
          else if (v123 >= 0x4B)
          {
            unsigned int v124 = v122[37];
            if (v124)
            {
LABEL_218:
              __int16 v125 = *(_WORD *)((char *)*v119 + v124);
              goto LABEL_220;
            }
          }
          __int16 v125 = -1;
LABEL_220:
          unsigned __int16 v126 = v125 + 18000;
          unsigned __int16 v127 = v125 - 18000;
          if ((unsigned __int16)(v126 >> 5) < 0x465u) {
            unsigned __int16 v127 = v126;
          }
          long long v128 = (unsigned __int16 *)((char *)*v120 - **v120);
          unsigned int v129 = *v128;
          if (*((unsigned char *)v120 + 38))
          {
            if (v129 >= 0x4B)
            {
              unsigned int v130 = v128[37];
              if (v130) {
                goto LABEL_228;
              }
            }
          }
          else if (v129 >= 0x49)
          {
            unsigned int v130 = v128[36];
            if (v130)
            {
LABEL_228:
              int v131 = *(unsigned __int16 *)((char *)*v120 + v130);
              goto LABEL_230;
            }
          }
          int v131 = 0xFFFF;
LABEL_230:
          int v132 = v131 - v127;
          if (v132 > 18000) {
            v132 -= 36000;
          }
          if (v132 < -17999) {
            v132 += 36000;
          }
          double v133 = (double)v132 / 100.0;
          double v134 = fabs(v133);
          *(double *)(a2 + 56) = *(double *)(a2 + 56) + v134;
          *(double *)(a2 + 24) = *(double *)(a2 + 24)
                               + (double)(sub_2E79EC(*(void *)(v5 + 8), (uint64_t)v119[4], (uint64_t)v120[4]) ^ 1);
          int v135 = *((unsigned __int8 *)v119 + 38);
          uint64_t v136 = (uint64_t)*v119;
          uint64_t v137 = (unsigned __int16 *)((char *)*v119 - **v119);
          unsigned int v138 = *v137;
          if (*((unsigned char *)v119 + 38))
          {
            if (v138 >= 0x51 && v137[40] && (*(_WORD *)(v136 + v137[40]) & 8) != 0) {
              goto LABEL_250;
            }
          }
          else if (v138 >= 0x51 && v137[40] && (*(_WORD *)(v136 + v137[40]) & 0x80) != 0)
          {
LABEL_250:
            *(double *)(a2 + 96) = *(double *)(a2 + 96) + 1.0;
            goto LABEL_251;
          }
          uint64_t v139 = *v121;
          uint64_t v140 = (unsigned __int16 *)((char *)*v121 - **v121);
          unsigned int v141 = *v140;
          if (*((unsigned char *)v121 + 38))
          {
            if (v141 >= 0x51)
            {
              unsigned int v142 = v140[40];
              if (v142)
              {
                if ((*(_WORD *)((unsigned char *)v139 + v142) & 0x20) != 0) {
                  goto LABEL_250;
                }
              }
            }
          }
          else if (v141 >= 0x51)
          {
            unsigned int v143 = v140[40];
            if (v143)
            {
              if ((*(_WORD *)((unsigned char *)v139 + v143) & 2) != 0) {
                goto LABEL_250;
              }
            }
          }
LABEL_251:
          if (v135)
          {
            if (v138 < 0x47) {
              goto LABEL_268;
            }
            unsigned int v144 = v137[35];
            if (!v144 || (*(_DWORD *)(v136 + v144) & 2) == 0) {
              goto LABEL_268;
            }
          }
          else
          {
            if (v138 < 0x47) {
              goto LABEL_268;
            }
            unsigned int v145 = v137[35];
            if (!v145 || (*(_DWORD *)(v136 + v145) & 1) == 0) {
              goto LABEL_268;
            }
          }
          uint64_t v146 = *v121;
          uint64_t v147 = (unsigned __int16 *)((char *)*v121 - **v121);
          unsigned int v148 = *v147;
          if (*((unsigned char *)v121 + 38))
          {
            if (v148 < 0x47) {
              goto LABEL_267;
            }
            unsigned int v149 = v147[35];
            if (!v149 || (*(int *)((char *)v146 + v149) & 2) == 0) {
              goto LABEL_267;
            }
          }
          else if (v148 < 0x47 || (unsigned int v150 = v147[35]) == 0 || (*(int *)((char *)v146 + v150) & 1) == 0)
          {
LABEL_267:
            *(double *)(a2 + 112) = *(double *)(a2 + 112) + 1.0;
          }
LABEL_268:
          if (sub_F1A898(v178, v119, v121, *(unsigned char **)(v5 + 152)))
          {
            sub_F1ABB4(v178, v119, (uint64_t)v121, *(void *)(v5 + 152), 1);
            double v151 = v152 + *(double *)(a2 + 136);
            *(double *)(a2 + 136) = v151;
          }
          double v153 = *v119;
          double v154 = (unsigned __int16 *)((char *)*v119 - **v119);
          unsigned int v155 = *v154;
          if (v155 < 0xB)
          {
            LODWORD(v156) = 0;
            int v157 = v133 < 0.0;
            int v158 = *((unsigned __int8 *)v119 + 38);
            if (*((unsigned char *)v119 + 38)) {
              goto LABEL_274;
            }
          }
          else
          {
            uint64_t v156 = v154[5];
            if (v154[5]) {
              LODWORD(v156) = *((unsigned __int8 *)v153 + v156 + 1) >> 7;
            }
            int v157 = v133 < 0.0;
            int v158 = *((unsigned __int8 *)v119 + 38);
            if (*((unsigned char *)v119 + 38))
            {
LABEL_274:
              if (v155 < 0x47) {
                goto LABEL_295;
              }
              uint64_t v159 = (int *)v154[35];
              if (!v154[35]) {
                goto LABEL_298;
              }
              int v160 = *(int *)((char *)v159 + (void)v153);
              if ((v160 & 0x1100) == 0 && (v160 & 0x400) == 0) {
                goto LABEL_295;
              }
              goto LABEL_284;
            }
          }
          if (v155 < 0x47) {
            goto LABEL_295;
          }
          uint64_t v159 = (int *)v154[35];
          if (!v154[35]) {
            goto LABEL_298;
          }
          int v161 = *(int *)((char *)v159 + (void)v153);
          if ((v161 & 0x880) == 0 && (v161 & 0x200) == 0)
          {
LABEL_295:
            LOBYTE(v159) = 0;
            if (v157 == v156) {
              continue;
            }
            goto LABEL_299;
          }
LABEL_284:
          uint64_t v159 = *v121;
          double v162 = (unsigned __int16 *)((char *)*v121 - **v121);
          unsigned int v163 = *v162;
          if (!*((unsigned char *)v121 + 38))
          {
            if (v163 < 0x47) {
              goto LABEL_295;
            }
            uint64_t v165 = v162[35];
            if (!v165)
            {
              LOBYTE(v159) = 0;
LABEL_298:
              if (v157 == v156) {
                continue;
              }
              goto LABEL_299;
            }
            LODWORD(v159) = *(int *)((char *)v159 + v165);
            if (((unsigned __int16)v159 & 0x880) == 0)
            {
              LOBYTE(v159) = ((unsigned __int16)v159 & 0x200) != 0;
              if (v157 == v156) {
                continue;
              }
              goto LABEL_299;
            }
LABEL_293:
            LOBYTE(v159) = 1;
            if (v157 == v156) {
              continue;
            }
            goto LABEL_299;
          }
          if (v163 < 0x47) {
            goto LABEL_295;
          }
          uint64_t v164 = v162[35];
          if (!v164) {
            goto LABEL_295;
          }
          LODWORD(v159) = *(int *)((char *)v159 + v164);
          if (((unsigned __int16)v159 & 0x1100) != 0) {
            goto LABEL_293;
          }
          LOBYTE(v159) = ((unsigned __int16)v159 & 0x400) != 0;
          if (v157 == v156) {
            continue;
          }
LABEL_299:
          if (v158)
          {
            if (v155 >= 0xB)
            {
              unsigned int v166 = v154[5];
              if (v166)
              {
                char v167 = (*(int *)((char *)v153 + v166) & 2) != 0 ? (char)v159 : 1;
                if ((v167 & 1) == 0) {
                  goto LABEL_313;
                }
              }
            }
          }
          else if (v155 >= 0xB)
          {
            unsigned int v168 = v154[5];
            if (v168)
            {
              char v169 = (*(int *)((char *)v153 + v168) & 1) != 0 ? (char)v159 : 1;
              if ((v169 & 1) == 0)
              {
LABEL_313:
                LOWORD(v151) = *(_WORD *)(v5 + 180);
                if (v134 > (double)*(unint64_t *)&v151) {
                  *(double *)(a2 + 168) = *(double *)(a2 + 168) + 1.0;
                }
                continue;
              }
            }
          }
        }
      }
      if (v104 < v109)
      {
        char v113 = 1;
        goto LABEL_200;
      }
    }
    else if (v105 && v106 < sub_46C760(v105))
    {
      goto LABEL_199;
    }
LABEL_317:
    double v170 = *(double *)(a2 + 112) / v173;
    *(double *)(a2 + 112) = v170;
    LOWORD(v170) = *(_WORD *)(v5 + 176);
    *(double *)(a2 + 144) = *(double *)(a2 + 144)
                          + *(double *)(a2 + 136) / (round(*(double *)(v5 + 168)) * (double)*(unint64_t *)&v170);
    sub_3D9348((uint64_t *)(v5 + 16), v2, &v184);
  }
  return result;
}

uint64_t sub_1039540(uint64_t a1, int **a2)
{
  if (!**(unsigned char **)(a1 + 160)) {
    return 1;
  }
  uint64_t v4 = (unsigned __int16 *)((char *)*a2 - **a2);
  if (*v4 >= 0xBu)
  {
    uint64_t v5 = v4[5];
    if (v5)
    {
      if ((*((unsigned char *)*a2 + v5) & 8) != 0) {
        return 1;
      }
    }
  }
  sub_2954EC(*(void *)(a1 + 8), (uint64_t)a2[4], (uint64_t)&v48);
  double v6 = __p;
  if (__p != v50)
  {
    unint64_t v7 = sub_2E1AA4((uint64_t)&v48);
    unsigned int v8 = v7;
    unint64_t v9 = v7 & 0xFFFFFFFF00000000;
    double v6 = __p;
    uint64_t v10 = v8;
    int v12 = v11;
    if (!__p) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  unint64_t v9 = 0xFFFFFFFF00000000;
  int v12 = 0x7FFFFFFF;
  uint64_t v10 = 0xFFFFFFFFLL;
  if (__p)
  {
LABEL_7:
    uint64_t v50 = v6;
    operator delete(v6);
  }
LABEL_8:
  unint64_t v46 = v9 | v10;
  int v47 = v12;
  unint64_t v13 = *((unsigned int *)a2 + 8) | ((unint64_t)*((unsigned __int16 *)a2 + 18) << 32);
  double v14 = (unsigned __int8 *)&v43;
  sub_3D63DC(*(void *)(a1 + 8), v13, &v43);
  uint64_t v15 = *(void *)(a1 + 160);
  uint64_t v16 = *(void *)(v15 + 8);
  uint64_t v17 = *(void *)(v15 + 16);
  if (v16 != v17)
  {
    if ((v45 & 0x80u) == 0) {
      uint64_t v18 = v45;
    }
    else {
      uint64_t v18 = v44;
    }
    if ((v45 & 0x80u) != 0) {
      double v14 = (unsigned __int8 *)v43;
    }
    do
    {
      uint64_t v20 = *(unsigned __int8 *)(v16 + 23);
      if ((v20 & 0x80u) == 0) {
        uint64_t v21 = *(unsigned __int8 *)(v16 + 23);
      }
      else {
        uint64_t v21 = *(void *)(v16 + 8);
      }
      if (v21 == v18)
      {
        if ((v20 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v16, v14, *(void *)(v16 + 8))) {
            goto LABEL_27;
          }
        }
        else
        {
          if (!*(unsigned char *)(v16 + 23)) {
            goto LABEL_27;
          }
          uint64_t v22 = 0;
          while (*(unsigned __int8 *)(v16 + v22) == v14[v22])
          {
            if (v20 == ++v22) {
              goto LABEL_27;
            }
          }
        }
      }
      v16 += 24;
    }
    while (v16 != v17);
    uint64_t v16 = v17;
    char v23 = *(unsigned char *)(v15 + 1);
    if (!v23) {
      goto LABEL_47;
    }
    goto LABEL_28;
  }
LABEL_27:
  char v23 = *(unsigned char *)(v15 + 1);
  if (v23)
  {
LABEL_28:
    uint64_t v25 = *(void *)(v15 + 56);
    uint64_t v24 = *(void *)(v15 + 64);
    if (v25 != v24)
    {
      if ((v45 & 0x80u) == 0) {
        uint64_t v26 = v45;
      }
      else {
        uint64_t v26 = v44;
      }
      if ((v45 & 0x80u) == 0) {
        uint64_t v27 = (unsigned __int8 *)&v43;
      }
      else {
        uint64_t v27 = (unsigned __int8 *)v43;
      }
      do
      {
        uint64_t v28 = *(unsigned __int8 *)(v25 + 23);
        if ((v28 & 0x80u) == 0) {
          uint64_t v29 = *(unsigned __int8 *)(v25 + 23);
        }
        else {
          uint64_t v29 = *(void *)(v25 + 8);
        }
        if (v29 == v26)
        {
          if ((v28 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v25, v27, *(void *)(v25 + 8))) {
              goto LABEL_46;
            }
          }
          else
          {
            if (!*(unsigned char *)(v25 + 23)) {
              goto LABEL_46;
            }
            uint64_t v30 = 0;
            while (*(unsigned __int8 *)(v25 + v30) == v27[v30])
            {
              if (v28 == ++v30) {
                goto LABEL_46;
              }
            }
          }
        }
        v25 += 24;
      }
      while (v25 != v24);
      uint64_t v25 = v24;
    }
LABEL_46:
    char v23 = v25 != v24;
  }
LABEL_47:
  uint64_t v19 = 1;
  if (v16 != v17 || (v23 & 1) != 0)
  {
LABEL_72:
    if ((char)v45 < 0) {
      goto LABEL_73;
    }
    return v19;
  }
  uint64_t v31 = sub_3775DC(*(void **)a1);
  sub_518C8(v46 >> 17, HIDWORD(v46) >> 17);
  unsigned int v33 = v32 | 0x40000000;
  while (1)
  {
    unsigned int v34 = v33;
    double v35 = sub_C5DB54(v31, v33, 1);
    if (v35)
    {
      double v36 = &v35[-*(int *)v35];
      if (*(unsigned __int16 *)v36 >= 5u)
      {
        if (*((_WORD *)v36 + 2)) {
          break;
        }
      }
    }
LABEL_51:
    unsigned int v33 = v34 >> 2;
    if (v34 <= 3)
    {
      uint64_t v19 = 0;
      goto LABEL_72;
    }
  }
  sub_C5D8F4(v31, v34, (uint64_t)&v48);
  int v37 = (unint64_t *)v48;
  double v38 = (unint64_t *)__p;
  if (v48 == __p)
  {
LABEL_58:
    sub_C5DA24(v31, v34, (uint64_t)&v51);
    unsigned int v39 = v51;
    int v40 = v52;
    if (v51 == v52)
    {
      int v41 = 0;
      if (!v51) {
        goto LABEL_69;
      }
    }
    else
    {
      do
      {
        unint64_t v53 = *v39;
        if (sub_1039C28(a1, v53) && (sub_C5E3FC(v31, &v53, &v46) & 1) != 0)
        {
          int v41 = 1;
          unsigned int v39 = v51;
          if (v51) {
            goto LABEL_68;
          }
          goto LABEL_69;
        }
        ++v39;
      }
      while (v39 != v40);
      int v41 = 0;
      unsigned int v39 = v51;
      if (!v51) {
        goto LABEL_69;
      }
    }
LABEL_68:
    double v52 = v39;
    operator delete(v39);
    goto LABEL_69;
  }
  while (!sub_1039C28(a1, *v37))
  {
    if (++v37 == v38) {
      goto LABEL_58;
    }
  }
  int v41 = 1;
LABEL_69:
  if (v48)
  {
    __n128 __p = v48;
    operator delete(v48);
  }
  if (!v41) {
    goto LABEL_51;
  }
  uint64_t v19 = 1;
  if ((char)v45 < 0) {
LABEL_73:
  }
    operator delete(v43);
  return v19;
}

void sub_10398F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1039984(uint64_t a1, void *a2, void *a3, unint64_t a4)
{
  if (a4 >= sub_46C760(a2) - 1) {
    return 0;
  }
  unsigned int v8 = (int **)sub_46C8EC(a3, a4);
  unint64_t v9 = (char *)*v8;
  uint64_t v10 = (unsigned __int16 *)((char *)*v8 - **v8);
  unsigned int v11 = *v10;
  if (*((unsigned char *)v8 + 38))
  {
    if (v11 < 0xB) {
      return 0;
    }
    unsigned int v12 = v10[5];
    if (!v12 || (*(_DWORD *)&v9[v12] & 2) == 0) {
      return 0;
    }
  }
  else
  {
    if (v11 < 0xB) {
      return 0;
    }
    unsigned int v14 = v10[5];
    if (!v14 || (*(_DWORD *)&v9[v14] & 1) == 0) {
      return 0;
    }
  }
  uint64_t v15 = (void *)sub_46C8EC(a3, a4 + 1);
  uint64_t v16 = (unsigned __int16 *)(*v15 - *(int *)*v15);
  if (*v16 < 0x2Fu) {
    return 0;
  }
  uint64_t v17 = v16[23];
  if (!v17 || *(unsigned char *)(*v15 + v17) != 14) {
    return 0;
  }
  unint64_t v18 = a4 + 2;
  unint64_t v19 = sub_46C760(a2);
  unint64_t v20 = v18 <= v19 ? v19 : v18;
  if (v18 >= v19) {
    return 0;
  }
  while (1)
  {
    uint64_t v21 = (int **)sub_46C8EC(a2, v18);
    uint64_t v22 = (unsigned __int16 *)((char *)*v21 - **v21);
    if (*v22 < 0x2Fu || (uint64_t v23 = v22[23]) == 0 || *((unsigned char *)*v21 + v23) != 14)
    {
      uint64_t v24 = v21[1];
      if (!v24) {
        break;
      }
      uint64_t v25 = (unsigned __int16 *)((char *)v24 - *v24);
      if (*v25 < 0x11u) {
        break;
      }
      uint64_t v26 = v25[8];
      if (!v26 || (*(_WORD *)((unsigned char *)v24 + v26) & 4) == 0) {
        break;
      }
    }
    BOOL result = 0;
    if (v20 == ++v18) {
      return result;
    }
  }
  uint64_t v27 = v8[1];
  uint64_t v28 = (unsigned __int16 *)((char *)v27 - *v27);
  unsigned int v29 = *v28;
  if (!*((unsigned char *)v8 + 38))
  {
    if (v29 < 9) {
      goto LABEL_35;
    }
    unsigned int v30 = v28[4];
    if (!v30) {
      goto LABEL_35;
    }
LABEL_34:
    __int16 v31 = *(_WORD *)((char *)v27 + v30);
    goto LABEL_36;
  }
  if (v29 >= 5)
  {
    unsigned int v30 = v28[2];
    if (v30) {
      goto LABEL_34;
    }
  }
LABEL_35:
  __int16 v31 = 0;
LABEL_36:
  int v32 = (unsigned __int16 *)((char *)v24 - *v24);
  unsigned int v33 = *v32;
  if (*((unsigned char *)v21 + 38))
  {
    if (v33 < 9 || (unsigned int v34 = v32[4]) == 0)
    {
LABEL_43:
      int v35 = 0;
      goto LABEL_44;
    }
  }
  else
  {
    if (v33 < 5) {
      goto LABEL_43;
    }
    unsigned int v34 = v32[2];
    if (!v34) {
      goto LABEL_43;
    }
  }
  int v35 = *(unsigned __int16 *)((char *)v24 + v34);
LABEL_44:
  unsigned __int16 v36 = v31 + 18000;
  unsigned __int16 v37 = v31 - 18000;
  if ((unsigned __int16)(v36 >> 5) < 0x465u) {
    unsigned __int16 v37 = v36;
  }
  int v38 = v35 - v37;
  if (v38 > 18000) {
    v38 -= 36000;
  }
  if (v38 < -17999) {
    v38 += 36000;
  }
  unint64_t v39 = 0x4059000000000000;
  LOWORD(v39) = *(_WORD *)(a1 + 178);
  return fabs((double)v38 / 100.0) > (double)v39;
}

BOOL sub_1039C28(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_3775DC(*(void **)a1);
  uint64_t v5 = sub_C5E178(v4, a2);
  double v6 = &v5[*(unsigned __int16 *)&v5[-*(int *)v5 + 4]];
  uint64_t v7 = *(unsigned int *)v6;
  unint64_t v9 = &v6[v7 + 4];
  size_t v8 = *(unsigned int *)&v6[v7];
  if (v8 >= 0x17)
  {
    if ((v8 | 7) == 0x17) {
      uint64_t v14 = (v8 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v14 = v8 | 7;
    }
    uint64_t v10 = (void **)operator new(v14 + 1);
    size_t v30 = v8;
    uint64_t v31 = v14 - 0x7FFFFFFFFFFFFFFFLL;
    __dst = v10;
LABEL_9:
    memcpy(v10, v9, v8);
    *((unsigned char *)v10 + v8) = 0;
    uint64_t v11 = *(void *)(a1 + 160);
    uint64_t v12 = *(void *)(v11 + 32);
    uint64_t v13 = *(void *)(v11 + 40);
    if (v12 == v13) {
      goto LABEL_27;
    }
LABEL_10:
    if (v31 >= 0) {
      size_t v15 = HIBYTE(v31);
    }
    else {
      size_t v15 = v30;
    }
    if (v31 >= 0) {
      p_dst = (void **)&__dst;
    }
    else {
      p_dst = __dst;
    }
    while (1)
    {
      uint64_t v17 = *(unsigned __int8 *)(v12 + 23);
      if ((v17 & 0x80u) == 0) {
        uint64_t v18 = *(unsigned __int8 *)(v12 + 23);
      }
      else {
        uint64_t v18 = *(void *)(v12 + 8);
      }
      if (v18 == v15)
      {
        if ((v17 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v12, p_dst, *(void *)(v12 + 8))) {
            goto LABEL_27;
          }
        }
        else
        {
          if (!*(unsigned char *)(v12 + 23)) {
            goto LABEL_27;
          }
          uint64_t v19 = 0;
          while (*(unsigned __int8 *)(v12 + v19) == *((unsigned __int8 *)p_dst + v19))
          {
            if (v17 == ++v19) {
              goto LABEL_27;
            }
          }
        }
      }
      v12 += 24;
      if (v12 == v13) {
        goto LABEL_30;
      }
    }
  }
  HIBYTE(v31) = *(_DWORD *)&v6[v7];
  uint64_t v10 = (void **)&__dst;
  if (v8) {
    goto LABEL_9;
  }
  *((unsigned char *)&__dst + v8) = 0;
  uint64_t v11 = *(void *)(a1 + 160);
  uint64_t v12 = *(void *)(v11 + 32);
  uint64_t v13 = *(void *)(v11 + 40);
  if (v12 != v13) {
    goto LABEL_10;
  }
LABEL_27:
  if (v12 == v13)
  {
LABEL_30:
    if (!*(unsigned char *)(v11 + 1))
    {
      BOOL v20 = 0;
      if ((SHIBYTE(v31) & 0x80000000) == 0) {
        return v20;
      }
      goto LABEL_50;
    }
    uint64_t v22 = *(void *)(v11 + 80);
    uint64_t v21 = *(void *)(v11 + 88);
    if (v22 == v21)
    {
LABEL_49:
      BOOL v20 = v22 != v21;
      if (SHIBYTE(v31) < 0) {
LABEL_50:
      }
        operator delete(__dst);
    }
    else
    {
      if (v31 >= 0) {
        size_t v23 = HIBYTE(v31);
      }
      else {
        size_t v23 = v30;
      }
      if (v31 >= 0) {
        uint64_t v24 = (void **)&__dst;
      }
      else {
        uint64_t v24 = __dst;
      }
      do
      {
        uint64_t v25 = *(unsigned __int8 *)(v22 + 23);
        if ((v25 & 0x80u) == 0) {
          uint64_t v26 = *(unsigned __int8 *)(v22 + 23);
        }
        else {
          uint64_t v26 = *(void *)(v22 + 8);
        }
        if (v26 == v23)
        {
          if ((v25 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v22, v24, *(void *)(v22 + 8))) {
              goto LABEL_49;
            }
          }
          else
          {
            if (!*(unsigned char *)(v22 + 23)) {
              goto LABEL_49;
            }
            uint64_t v27 = 0;
            while (*(unsigned __int8 *)(v22 + v27) == *((unsigned __int8 *)v24 + v27))
            {
              if (v25 == ++v27) {
                goto LABEL_49;
              }
            }
          }
        }
        v22 += 24;
      }
      while (v22 != v21);
      BOOL v20 = 0;
      if (SHIBYTE(v31) < 0) {
        goto LABEL_50;
      }
    }
  }
  else
  {
    BOOL v20 = 1;
    if (SHIBYTE(v31) < 0) {
      goto LABEL_50;
    }
  }
  return v20;
}

void sub_1039E8C()
{
  byte_25FD63F = 1;
  word_25FD628 = 65;
  byte_25FD657 = 1;
  word_25FD640 = 65;
  byte_25FD66F = 21;
  strcpy((char *)&xmmword_25FD658, "enable_coverage_check");
  byte_25FD687 = 14;
  strcpy((char *)&qword_25FD670, "default_region");
  byte_25FD69F = 17;
  strcpy((char *)&xmmword_25FD688, "supported_regions");
  byte_25FD6B7 = 17;
  strcpy(byte_25FD6A0, "preflight_regions");
  qword_25FD6B8 = (uint64_t)operator new(0x19uLL);
  unk_25FD6C0 = xmmword_20B9250;
  strcpy((char *)qword_25FD6B8, "supported_country_codes");
  qword_25FD6D0 = (uint64_t)operator new(0x19uLL);
  xmmword_25FD6D8 = xmmword_20B9250;
  strcpy((char *)qword_25FD6D0, "preflight_country_codes");
  strcpy((char *)v1, "display_traversal_time");
  HIBYTE(v1[2]) = 22;
  char v2 = 0;
  __int16 v4 = 272;
  strcpy(v3, "num_name_changes");
  uint64_t v5 = operator new(0x28uLL);
  long long v6 = xmmword_20B9240;
  strcpy((char *)v5, "num_time_based_restriction_violations");
  char v7 = 2;
  __int16 v9 = 782;
  strcpy((char *)v8, "traversal_time");
  HIBYTE(v10[2]) = 17;
  strcpy((char *)v10, "segment_curviness");
  char v11 = 4;
  *(_WORD *)((char *)&v12[2] + 7) = 1296;
  strcpy((char *)v12, "route_jaggedness");
  uint64_t v13 = operator new(0x20uLL);
  long long v14 = xmmword_20B8870;
  strcpy((char *)v13, "extra_elevation_change_cm");
  char v15 = 28;
  __int16 v17 = 1542;
  strcpy((char *)v16, "length");
  *(_WORD *)((char *)&v18[2] + 7) = 1809;
  strcpy((char *)v18, "length_on_ferries");
  HIBYTE(v19[2]) = 17;
  strcpy((char *)v19, "length_on_walking");
  char v20 = 8;
  v21[0] = operator new(0x20uLL);
  v21[1] = &dword_1C;
  unint64_t v22 = 0x8000000000000020;
  strcpy((char *)v21[0], "normalized_length_on_walking");
  char v23 = 9;
  *(_WORD *)((char *)&v24[2] + 7) = 2581;
  strcpy((char *)v24, "num_impeding_barriers");
  char v26 = 13;
  strcpy((char *)v25, "num_dismounts");
  char v27 = 12;
  *(_WORD *)((char *)&v28[2] + 7) = 3346;
  strcpy((char *)v28, "num_traffic_lights");
  __int16 v30 = 3598;
  strcpy((char *)v29, "num_stop_signs");
  uint64_t v0 = operator new(0x20uLL);
  unint64_t v32 = 0x8000000000000020;
  v31[0] = v0;
  v31[1] = &dword_18 + 1;
  strcpy((char *)v0, "uses_contingency_terminal");
  char v33 = 11;
  strcpy((char *)v34, "unprotected_turn_score");
  HIBYTE(v34[2]) = 22;
  char v35 = 15;
  HIBYTE(v36[2]) = 18;
  strcpy((char *)v36, "avg_busyness_score");
  char v37 = 16;
  v38[0] = operator new(0x19uLL);
  unint64_t v39 = 0x8000000000000019;
  v38[1] = &dword_14 + 3;
  strcpy((char *)v38[0], "bike_nav_sidewalk_buddy");
  char v40 = 17;
  v41[0] = operator new(0x20uLL);
  unint64_t v42 = 0x8000000000000020;
  v41[1] = &dword_1C;
  strcpy((char *)v41[0], "bike_friendly_sidewalk_buddy");
  char v43 = 18;
  v44[0] = operator new(0x20uLL);
  unint64_t v45 = 0x8000000000000020;
  v44[1] = &dword_1C + 3;
  strcpy((char *)v44[0], "sharp_turn_cost_against_traffic");
  char v46 = 19;
  *(_WORD *)((char *)&v47[2] + 7) = 5137;
  strcpy((char *)v47, "crosswalk_u_turns");
  *(_WORD *)((char *)&v48[2] + 7) = 5392;
  strcpy((char *)v48, "designated_route");
  char v50 = 14;
  strcpy((char *)v49, "protected_lane");
  char v51 = 22;
  __int16 v53 = 5902;
  strcpy((char *)v52, "dedicated_lane");
  __int16 v55 = 6155;
  strcpy((char *)v54, "shared_lane");
  char v57 = 14;
  strcpy((char *)v56, "legal_priority");
  char v58 = 25;
  v59[0] = operator new(0x20uLL);
  unint64_t v60 = 0x8000000000000020;
  v59[1] = &dword_18 + 1;
  strcpy((char *)v59[0], "no_cycling_infrastructure");
  char v61 = 26;
  strcpy((char *)v62, "cycling_infrastructure");
  HIBYTE(v62[2]) = 22;
  char v63 = 27;
  char v65 = 7;
  strcpy((char *)v64, "changes");
  char v66 = 29;
  *(_WORD *)((char *)&v67[2] + 7) = 7700;
  strcpy((char *)v67, "normalized_time_diff");
  __p[0] = operator new(0x20uLL);
  unint64_t v69 = 0x8000000000000020;
  __p[1] = &dword_1C + 1;
  strcpy((char *)__p[0], "length_in_unsupported_regions");
  char v70 = 31;
  xmmword_25FD6E8 = 0u;
  *(_OWORD *)&qword_25FD6F8 = 0u;
  dword_25FD708 = 1065353216;
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v1, (uint64_t)v1);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v3, (uint64_t)v3);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)&v5, (uint64_t)&v5);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v8, (uint64_t)v8);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v10, (uint64_t)v10);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v12, (uint64_t)v12);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)&v13, (uint64_t)&v13);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v16, (uint64_t)v16);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v18, (uint64_t)v18);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v19, (uint64_t)v19);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v21, (uint64_t)v21);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v24, (uint64_t)v24);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v25, (uint64_t)v25);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v28, (uint64_t)v28);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v29, (uint64_t)v29);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v31, (uint64_t)v31);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v34, (uint64_t)v34);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v36, (uint64_t)v36);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v38, (uint64_t)v38);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v41, (uint64_t)v41);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v44, (uint64_t)v44);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v47, (uint64_t)v47);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v48, (uint64_t)v48);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v49, (uint64_t)v49);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v52, (uint64_t)v52);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v54, (uint64_t)v54);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v56, (uint64_t)v56);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v59, (uint64_t)v59);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v62, (uint64_t)v62);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v64, (uint64_t)v64);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)v67, (uint64_t)v67);
  sub_C687EC((uint64_t)&xmmword_25FD6E8, (uint64_t)__p, (uint64_t)__p);
  if (SHIBYTE(v69) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v67[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((v65 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_36;
    }
  }
  else if ((SHIBYTE(v67[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v67[0]);
  if ((v65 & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v62[2]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v64[0]);
  if ((SHIBYTE(v62[2]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SHIBYTE(v60) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v62[0]);
  if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
LABEL_6:
    if ((v57 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v59[0]);
  if ((v57 & 0x80000000) == 0)
  {
LABEL_7:
    if (((char)v55 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v56[0]);
  if (((char)v55 & 0x80000000) == 0)
  {
LABEL_8:
    if (((char)v53 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v54[0]);
  if (((char)v53 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v50 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v52[0]);
  if ((v50 & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v48[2]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v49[0]);
  if ((SHIBYTE(v48[2]) & 0x80000000) == 0)
  {
LABEL_11:
    if ((SHIBYTE(v47[2]) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v48[0]);
  if ((SHIBYTE(v47[2]) & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v45) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_45;
  }
LABEL_44:
  operator delete(v47[0]);
  if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v42) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v44[0]);
  if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
LABEL_14:
    if ((SHIBYTE(v39) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }
LABEL_46:
  operator delete(v41[0]);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v36[2]) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_48;
  }
LABEL_47:
  operator delete(v38[0]);
  if ((SHIBYTE(v36[2]) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v34[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_49;
  }
LABEL_48:
  operator delete(v36[0]);
  if ((SHIBYTE(v34[2]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v32) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_50;
  }
LABEL_49:
  operator delete(v34[0]);
  if ((SHIBYTE(v32) & 0x80000000) == 0)
  {
LABEL_18:
    if (((char)v30 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }
LABEL_50:
  operator delete(v31[0]);
  if (((char)v30 & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v28[2]) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }
LABEL_51:
  operator delete(v29[0]);
  if ((SHIBYTE(v28[2]) & 0x80000000) == 0)
  {
LABEL_20:
    if ((v26 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }
LABEL_52:
  operator delete(v28[0]);
  if ((v26 & 0x80000000) == 0)
  {
LABEL_21:
    if ((SHIBYTE(v24[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }
LABEL_53:
  operator delete(v25[0]);
  if ((SHIBYTE(v24[2]) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v22) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_55;
  }
LABEL_54:
  operator delete(v24[0]);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
LABEL_23:
    if ((SHIBYTE(v19[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }
LABEL_55:
  operator delete(v21[0]);
  if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
  {
LABEL_24:
    if ((SHIBYTE(v18[2]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }
LABEL_56:
  operator delete(v19[0]);
  if ((SHIBYTE(v18[2]) & 0x80000000) == 0)
  {
LABEL_25:
    if (((char)v17 & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }
LABEL_57:
  operator delete(v18[0]);
  if (((char)v17 & 0x80000000) == 0)
  {
LABEL_26:
    if ((SHIBYTE(v14) & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }
LABEL_58:
  operator delete(v16[0]);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v12[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }
LABEL_59:
  operator delete(v13);
  if ((SHIBYTE(v12[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if ((SHIBYTE(v10[2]) & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }
LABEL_60:
  operator delete(v12[0]);
  if ((SHIBYTE(v10[2]) & 0x80000000) == 0)
  {
LABEL_29:
    if (((char)v9 & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_62;
  }
LABEL_61:
  operator delete(v10[0]);
  if (((char)v9 & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v6) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_63;
  }
LABEL_62:
  operator delete(v8[0]);
  if ((SHIBYTE(v6) & 0x80000000) == 0)
  {
LABEL_31:
    if (((char)v4 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_64;
  }
LABEL_63:
  operator delete(v5);
  if (((char)v4 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v1[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_65:
    operator delete(v1[0]);
    return;
  }
LABEL_64:
  operator delete(*(void **)v3);
  if (SHIBYTE(v1[2]) < 0) {
    goto LABEL_65;
  }
}

void sub_103ABD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  while (1)
  {
    if (*((char *)a10 - 9) < 0) {
      operator delete(*(a10 - 4));
    }
    a10 -= 4;
    if (a10 == &a23) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_103AF98(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  *(unsigned char *)(a1 + 568) = 0;
  *(void *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(void *)(a1 + 576) = 0;
  *(unsigned char *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(void *)(a1 + 608) = 0;
  *(unsigned char *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(void *)(a1 + 640) = 0;
  *(unsigned char *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(void *)(a1 + 688) = 0;
  *(unsigned char *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(unsigned char *)(a1 + 728) = 0;
  *(void *)(a1 + 720) = 0;
  *(unsigned char *)(a1 + 760) = 0;
  *(void *)(a1 + 752) = 0;
  *(_OWORD *)(a1 + 736) = 0u;
  *(void *)(a1 + 784) = 0;
  *(_OWORD *)(a1 + 768) = 0u;
  *(unsigned char *)(a1 + 792) = 0;
  *(void *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  *(unsigned char *)(a1 + 824) = 0;
  *(void *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(unsigned char *)(a1 + 856) = 0;
  *(void *)(a1 + 880) = 0;
  *(_OWORD *)(a1 + 864) = 0u;
  *(unsigned char *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 896) = 0u;
  *(void *)(a1 + 912) = 0;
  *(unsigned char *)(a1 + 920) = 0;
  *(unsigned char *)(a1 + 952) = 0;
  *(void *)(a1 + 944) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  *(unsigned char *)(a1 + 984) = 0;
  *(void *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 960) = 0u;
  *(unsigned char *)(a1 + 1016) = 0;
  *(void *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  *(unsigned char *)(a1 + 1048) = 0;
  *(void *)(a1 + 1040) = 0;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(unsigned char *)(a1 + 1080) = 0;
  *(void *)(a1 + 1072) = 0;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(void *)(a1 + 1104) = 0;
  *(unsigned char *)(a1 + 1112) = 0;
  *(unsigned char *)(a1 + 1144) = 0;
  *(void *)(a1 + 1136) = 0;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(unsigned char *)(a1 + 1176) = 0;
  *(void *)(a1 + 1168) = 0;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(unsigned char *)(a1 + 1208) = 0;
  *(void *)(a1 + 1200) = 0;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(unsigned char *)(a1 + 1240) = 0;
  *(void *)(a1 + 1232) = 0;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(unsigned char *)(a1 + 1272) = 0;
  *(void *)(a1 + 1264) = 0;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(unsigned char *)(a1 + 1304) = 0;
  *(void *)(a1 + 1296) = 0;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(unsigned char *)(a1 + 1336) = 0;
  *(void *)(a1 + 1328) = 0;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(unsigned char *)(a1 + 1368) = 0;
  *(void *)(a1 + 1360) = 0;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(unsigned char *)(a1 + 1400) = 0;
  *(void *)(a1 + 1392) = 0;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(unsigned char *)(a1 + 1432) = 0;
  *(void *)(a1 + 1424) = 0;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(unsigned char *)(a1 + 1464) = 0;
  *(void *)(a1 + 1456) = 0;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(unsigned char *)(a1 + 1496) = 0;
  *(void *)(a1 + 1488) = 0;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(unsigned char *)(a1 + 1528) = 0;
  *(void *)(a1 + 1520) = 0;
  *(_OWORD *)(a1 + 1504) = 0u;
  bzero((void *)a1, 0x219uLL);
  *(unsigned char *)(a1 + 1536) = a4;
  __p[23] = 14;
  strcpy(__p, "add_debug_info");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 1537) = v8;
  *(void *)__n128 __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B91B0;
  strcpy(*(char **)__p, "changes_normalization_factor");
  int v9 = sub_31AC04(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(_DWORD *)(a1 + 1540) = v9;
  uint64_t v13 = a1;
  *(void *)__n128 __p = a2;
  *(void *)&__p[8] = a3;
  *(void *)&__p[16] = &v13;
  char v12 = 6;
  strcpy((char *)v11, "linear");
  sub_103B2D0((uint64_t)__p, (uint64_t)v11);
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  char v12 = 5;
  strcpy((char *)v11, "fuzzy");
  sub_103B2D0((uint64_t)__p, (uint64_t)v11);
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  return a1;
}

void sub_103B298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_103B2D0(uint64_t a1, uint64_t a2)
{
  __int16 v4 = (void *)sub_560F4(*(void **)a1, a2);
  uint64_t v5 = (void *)sub_560F4(v4, *(void *)(a1 + 8));
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "criteria_properties");
  uint64_t v6 = sub_560F4(v5, (uint64_t)__p);
  uint64_t v7 = v6;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    BOOL v8 = *(uint64_t **)(v7 + 16);
    if (!v8) {
      return;
    }
    while (1)
    {
LABEL_12:
      if (!sub_103BFB8(&xmmword_25FD740, (uint64_t)(v8 + 2)))
      {
        exception = __cxa_allocate_exception(0x40uLL);
        std::operator+<char>();
        uint64_t v24 = std::string::append(&v27, "' supplied in CyclingRouteScoring config.");
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        __p[2] = (void *)v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)__n128 __p = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        char v26 = (void *)sub_2F404((uint64_t)exception, (long long *)__p);
      }
      uint64_t v13 = sub_103BFB8(&xmmword_25FD740, (uint64_t)(v8 + 2));
      if (!v13) {
        sub_5AE8("unordered_map::at: key not found");
      }
      if (*((_DWORD *)v8 + 12) != 2)
      {
        unint64_t v22 = __cxa_allocate_exception(8uLL);
        void *v22 = &off_23FDF58;
      }
      uint64_t v14 = *((unsigned __int8 *)v13 + 40);
      char v15 = (void *)v8[5];
      uint64_t v16 = **(void **)(a1 + 16);
      if (*(char *)(a2 + 23) < 0)
      {
        uint64_t v19 = *(void *)(a2 + 8);
        if (v19 != 5)
        {
          if (v19 != 6) {
            goto LABEL_11;
          }
          if (**(_DWORD **)a2 != 1701734764 || *(_WORD *)(*(void *)a2 + 4) != 29281) {
            goto LABEL_11;
          }
          goto LABEL_31;
        }
        uint64_t v9 = *(void *)a2;
      }
      else
      {
        int v17 = *(unsigned __int8 *)(a2 + 23);
        uint64_t v9 = a2;
        if (v17 != 5)
        {
          if (v17 != 6) {
            goto LABEL_11;
          }
          if (*(_DWORD *)a2 != 1701734764 || *(_WORD *)(a2 + 4) != 29281) {
            goto LABEL_11;
          }
LABEL_31:
          HIBYTE(__p[2]) = 6;
          strcpy((char *)__p, "weight");
          *(double *)(v16 + 16 * v14) = sub_5C7E8(v15, (uint64_t)__p);
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
          HIBYTE(__p[2]) = 16;
          strcpy((char *)__p, "non_zero_penalty");
          *(double *)(v16 + 16 * v14 + 8) = sub_5C7E8(v15, (uint64_t)__p);
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
            goto LABEL_11;
          }
          goto LABEL_42;
        }
      }
      int v10 = *(_DWORD *)v9;
      int v11 = *(unsigned __int8 *)(v9 + 4);
      if (v10 != 2054845798 || v11 != 121) {
        goto LABEL_11;
      }
      HIBYTE(__p[2]) = 6;
      strcpy((char *)__p, "weight");
      uint64_t v21 = v16 + 512;
      *(double *)(v21 + 32 * v14) = sub_5C7E8(v15, (uint64_t)__p);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      HIBYTE(__p[2]) = 7;
      strcpy((char *)__p, "epsilon");
      *(double *)(v21 + 32 * v14 + 8) = sub_5C7E8(v15, (uint64_t)__p);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      HIBYTE(__p[2]) = 3;
      LODWORD(__p[0]) = 6908003;
      *(double *)(v21 + 32 * v14 + 16) = sub_5C7E8(v15, (uint64_t)__p);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      HIBYTE(__p[2]) = 7;
      strcpy((char *)__p, "enabled");
      *(unsigned char *)(v21 + 32 * v14 + 24) = sub_29D62C(v15, (uint64_t)__p);
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
        goto LABEL_11;
      }
LABEL_42:
      operator delete(__p[0]);
LABEL_11:
      BOOL v8 = (uint64_t *)*v8;
      if (!v8) {
        return;
      }
    }
  }
  BOOL v8 = *(uint64_t **)(v6 + 16);
  if (v8) {
    goto LABEL_12;
  }
}

void sub_103B6C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_103B720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v15);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void *sub_103B75C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x608uLL);
}

void sub_103B764(uint64_t a1, double **a2, double a3)
{
  int v5 = *(unsigned __int8 *)(a1 + 1536);
  if (v5 == 1)
  {
    sub_103B944(a1, a2, a3);
    sub_103BDD0(a1, (unint64_t *)a2);
  }
  else if (v5 == 2)
  {
    sub_103B944(a1, a2, a3);
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    if (*a2 != v7)
    {
      do
      {
        uint64_t v8 = 0;
        v6[34] = 0.0;
        uint64_t v9 = v6 + 2;
        double v10 = 0.0;
        do
        {
          uint64_t v11 = byte_20F1CC8[v8];
          double v10 = v10 + v9[v11] * *(double *)(a1 + 16 * v11);
          v6[34] = v10;
          if (v9[v11] > 0.0)
          {
            double v10 = v10 + *(double *)(a1 + 16 * v11 + 8);
            v6[34] = v10;
          }
          ++v8;
        }
        while (v8 != 32);
        v6 += 35;
      }
      while (v6 != v7);
    }
  }
  if (*(unsigned char *)(a1 + 1537))
  {
    char v12 = *a2;
    uint64_t v13 = a2[1];
    if (*a2 != v13)
    {
      do
      {
        uint64_t v14 = (std::string *)*((void *)v12 + 1);
        sub_59E50((uint64_t)(v12 + 34), 2);
        char v15 = std::string::insert(&v17, 0, " score: ");
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        std::string::size_type v19 = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)__n128 __p = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        sub_45FE3C(v14, (const std::string::value_type *)__p);
        if (SHIBYTE(v19) < 0)
        {
          operator delete(__p[0]);
          if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
LABEL_19:
          }
            operator delete(v17.__r_.__value_.__l.__data_);
        }
        else if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        {
          goto LABEL_19;
        }
        v12 += 35;
      }
      while (v12 != v13);
    }
  }
}

void sub_103B8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a15 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_103B944(uint64_t a1, double **a2, double a3)
{
  __int16 v4 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    double v6 = v4[2];
    LODWORD(a3) = *(_DWORD *)(a1 + 1540);
    double v7 = (double)*(unint64_t *)&a3;
    double v8 = 0.0;
    uint64_t v9 = *a2;
    do
    {
      double v10 = v9[8];
      v9[29] = *(double *)(a1 + 352) * v9[24]
             + *(double *)(a1 + 384) * v9[26]
             + *(double *)(a1 + 368) * v9[25]
             + *(double *)(a1 + 400) * v9[27]
             + *(double *)(a1 + 336) * v9[23]
             + *(double *)(a1 + 128) * v9[10]
             + *(double *)(a1 + 112) * v9[9]
             + *(double *)(a1 + 416) * v9[28];
      double v11 = v9[2];
      v9[31] = (*(double *)(a1 + 16) * v9[3]
              + *(double *)(a1 + 64) * v9[6]
              + *(double *)(a1 + 80) * v9[7]
              + *(double *)(a1 + 176) * v9[13]
              + *(double *)(a1 + 32) * v9[4]
              + *(double *)(a1 + 224) * v9[16]
              + *(double *)(a1 + 208) * v9[15]
              + *(double *)(a1 + 192) * v9[14])
             * v7
             / v10;
      if (v11 < v6) {
        double v6 = v11;
      }
      if (v10 >= v8) {
        double v8 = v10;
      }
      v9 += 35;
    }
    while (v9 != v3);
    if (*(unsigned char *)(a1 + 1537))
    {
      uint64_t v12 = a1 + 512;
      char v26 = v3;
      while (1)
      {
        double v13 = v4[2];
        v4[11] = v4[10] * (v4[8] / v8);
        v4[32] = (v13 - v6) / v6;
        if (*(unsigned char *)(a1 + 1537)) {
          break;
        }
LABEL_10:
        v4 += 35;
        if (v4 == v26) {
          return;
        }
      }
      uint64_t v14 = &byte_20F1CC8;
      while (1)
      {
        uint64_t v15 = *v14;
        if (!*(unsigned char *)(v12 + 32 * v15 + 24)) {
          goto LABEL_13;
        }
        long long v16 = (std::string *)*((void *)v4 + 1);
        std::string v17 = &qword_25FD750;
        do
        {
          std::string v17 = (uint64_t *)*v17;
          if (!v17)
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
            strcpy((char *)&__dst, "Unknown");
            goto LABEL_22;
          }
        }
        while (*((unsigned __int8 *)v17 + 40) != v15);
        if (*((char *)v17 + 39) < 0) {
          sub_4200(&__dst, (void *)v17[2], v17[3]);
        }
        else {
          std::string __dst = *(std::string *)(v17 + 2);
        }
LABEL_22:
        uint64_t v18 = std::string::insert(&__dst, 0, " ");
        long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        char v20 = std::string::append(&v30, ":");
        long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v31.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        sub_59E50((uint64_t)&v4[v15 + 2], 2);
        if ((v28 & 0x80u) == 0) {
          unint64_t v22 = v27;
        }
        else {
          unint64_t v22 = (void **)v27[0];
        }
        if ((v28 & 0x80u) == 0) {
          std::string::size_type v23 = v28;
        }
        else {
          std::string::size_type v23 = (std::string::size_type)v27[1];
        }
        uint64_t v24 = std::string::append(&v31, (const std::string::value_type *)v22, v23);
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        std::string::size_type v33 = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)__n128 __p = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        sub_45FE3C(v16, (const std::string::value_type *)__p);
        if (SHIBYTE(v33) < 0)
        {
          operator delete(__p[0]);
          if (((char)v28 & 0x80000000) == 0)
          {
LABEL_30:
            if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_31;
            }
            goto LABEL_36;
          }
        }
        else if (((char)v28 & 0x80000000) == 0)
        {
          goto LABEL_30;
        }
        operator delete(v27[0]);
        if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_31:
          if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_32;
          }
          goto LABEL_37;
        }
LABEL_36:
        operator delete(v31.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_32:
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_38;
          }
          goto LABEL_13;
        }
LABEL_37:
        operator delete(v30.__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_38:
        }
          operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_13:
        if (++v14 == (char *)&unk_20F1CE8) {
          goto LABEL_10;
        }
      }
    }
    do
    {
      v4[11] = v4[10] * (v4[8] / v8);
      v4[32] = (v4[2] - v6) / v6;
      v4 += 35;
    }
    while (v4 != v3);
  }
}

void sub_103BD0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a35 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a30);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a23);
  if ((a21 & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_103BDD0(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  unint64_t v3 = a2[1];
  if (*a2 < v3)
  {
    uint64_t v4 = a1 + 512;
    unint64_t v5 = *a2;
    do
    {
      double v6 = 0.0;
      unint64_t v7 = v2;
      do
      {
        if (v5 != v7)
        {
          double v25 = v6;
          uint64_t v9 = 0;
          double v10 = 0.0;
          double v11 = 0.0;
          double v12 = 0.0;
          do
          {
            uint64_t v15 = byte_20F1CC8[v9];
            uint64_t v16 = v4 + 32 * v15;
            if (*(unsigned char *)(v16 + 24))
            {
              uint64_t v17 = 8 * v15;
              double v18 = *(double *)(v7 + 16 + v17);
              double v19 = *(double *)(v5 + 16 + v17);
              double v20 = *(double *)(v16 + 8) * *(double *)(v16 + 8);
              double v21 = log(*(long double *)(v16 + 16));
              double v22 = *(double *)v16;
              if (*(double *)v16 >= 0.0)
              {
                double v13 = v18 - v19;
                double v23 = 0.0;
                if (v13 < 0.0) {
                  double v23 = 1.0 - exp(v13 * v13 * (v21 / v20));
                }
              }
              else
              {
                double v23 = 0.0;
                if (v19 - v18 < 0.0) {
                  double v23 = 1.0 - exp((v19 - v18) * (v19 - v18) * (v21 / v20));
                }
                double v13 = v18 - v19;
              }
              double v14 = fabs(v22);
              double v10 = v10 + v14 * v23;
              double v11 = v11 + v14 * exp(v21 / v20 * (v13 * v13));
              double v12 = v12 + v14;
            }
            ++v9;
          }
          while (v9 != 32);
          double v24 = v12 - v11 - v10;
          double v8 = 0.0;
          if (v24 < 0.0) {
            double v24 = 0.0;
          }
          if (v10 > v24) {
            double v8 = (v10 - v24) / v10;
          }
          if (v8 < 0.0) {
            double v8 = 0.0;
          }
          if (v8 > 1.0) {
            double v8 = 1.0;
          }
          double v6 = v25;
          if (v25 < v8) {
            double v6 = v8;
          }
        }
        v7 += 280;
      }
      while (v7 < v3);
      *(double *)(v5 + 272) = v6;
      v5 += 280;
    }
    while (v5 < v3);
  }
}

uint64_t *sub_103BFB8(void *a1, uint64_t a2)
{
  unint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  double v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    double v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        unint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          BOOL result = 0;
          double v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        BOOL result = 0;
        double v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void sub_103C1E8()
{
  strcpy((char *)v1, "display_traversal_time");
  HIBYTE(v1[2]) = 22;
  char v2 = 0;
  __int16 v4 = 272;
  strcpy(v3, "num_name_changes");
  unint64_t v5 = operator new(0x28uLL);
  long long v6 = xmmword_20B9240;
  strcpy((char *)v5, "num_time_based_restriction_violations");
  char v7 = 2;
  __int16 v9 = 782;
  strcpy((char *)v8, "traversal_time");
  HIBYTE(v10[2]) = 17;
  strcpy((char *)v10, "segment_curviness");
  char v11 = 4;
  *(_WORD *)((char *)&v12[2] + 7) = 1296;
  strcpy((char *)v12, "route_jaggedness");
  double v13 = operator new(0x20uLL);
  long long v14 = xmmword_20B8870;
  strcpy((char *)v13, "extra_elevation_change_cm");
  char v15 = 28;
  __int16 v17 = 1542;
  strcpy((char *)v16, "length");
  *(_WORD *)((char *)&v18[2] + 7) = 1809;
  strcpy((char *)v18, "length_on_ferries");
  HIBYTE(v19[2]) = 17;
  strcpy((char *)v19, "length_on_walking");
  char v20 = 8;
  v21[0] = operator new(0x20uLL);
  v21[1] = &dword_1C;
  unint64_t v22 = 0x8000000000000020;
  strcpy((char *)v21[0], "normalized_length_on_walking");
  char v23 = 9;
  *(_WORD *)((char *)&v24[2] + 7) = 2581;
  strcpy((char *)v24, "num_impeding_barriers");
  char v26 = 13;
  strcpy((char *)v25, "num_dismounts");
  char v27 = 12;
  *(_WORD *)((char *)&v28[2] + 7) = 3346;
  strcpy((char *)v28, "num_traffic_lights");
  __int16 v30 = 3598;
  strcpy((char *)v29, "num_stop_signs");
  uint64_t v0 = operator new(0x20uLL);
  unint64_t v32 = 0x8000000000000020;
  v31[0] = v0;
  v31[1] = &dword_18 + 1;
  strcpy((char *)v0, "uses_contingency_terminal");
  char v33 = 11;
  strcpy((char *)v34, "unprotected_turn_score");
  HIBYTE(v34[2]) = 22;
  char v35 = 15;
  HIBYTE(v36[2]) = 18;
  strcpy((char *)v36, "avg_busyness_score");
  char v37 = 16;
  v38[0] = operator new(0x19uLL);
  unint64_t v39 = 0x8000000000000019;
  v38[1] = &dword_14 + 3;
  strcpy((char *)v38[0], "bike_nav_sidewalk_buddy");
  char v40 = 17;
  v41[0] = operator new(0x20uLL);
  unint64_t v42 = 0x8000000000000020;
  v41[1] = &dword_1C;
  strcpy((char *)v41[0], "bike_friendly_sidewalk_buddy");
  char v43 = 18;
  v44[0] = operator new(0x20uLL);
  unint64_t v45 = 0x8000000000000020;
  v44[1] = &dword_1C + 3;
  strcpy((char *)v44[0], "sharp_turn_cost_against_traffic");
  char v46 = 19;
  *(_WORD *)((char *)&v47[2] + 7) = 5137;
  strcpy((char *)v47, "crosswalk_u_turns");
  *(_WORD *)((char *)&v48[2] + 7) = 5392;
  strcpy((char *)v48, "designated_route");
  char v50 = 14;
  strcpy((char *)v49, "protected_lane");
  char v51 = 22;
  __int16 v53 = 5902;
  strcpy((char *)v52, "dedicated_lane");
  __int16 v55 = 6155;
  strcpy((char *)v54, "shared_lane");
  char v57 = 14;
  strcpy((char *)v56, "legal_priority");
  char v58 = 25;
  v59[0] = operator new(0x20uLL);
  unint64_t v60 = 0x8000000000000020;
  v59[1] = &dword_18 + 1;
  strcpy((char *)v59[0], "no_cycling_infrastructure");
  char v61 = 26;
  strcpy((char *)v62, "cycling_infrastructure");
  HIBYTE(v62[2]) = 22;
  char v63 = 27;
  char v65 = 7;
  strcpy((char *)v64, "changes");
  char v66 = 29;
  *(_WORD *)((char *)&v67[2] + 7) = 7700;
  strcpy((char *)v67, "normalized_time_diff");
  __p[0] = operator new(0x20uLL);
  unint64_t v69 = 0x8000000000000020;
  __p[1] = &dword_1C + 1;
  strcpy((char *)__p[0], "length_in_unsupported_regions");
  char v70 = 31;
  xmmword_25FD740 = 0u;
  *(_OWORD *)&qword_25FD750 = 0u;
  dword_25FD760 = 1065353216;
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v1, (uint64_t)v1);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v3, (uint64_t)v3);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)&v5, (uint64_t)&v5);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v8, (uint64_t)v8);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v10, (uint64_t)v10);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v12, (uint64_t)v12);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)&v13, (uint64_t)&v13);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v16, (uint64_t)v16);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v18, (uint64_t)v18);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v19, (uint64_t)v19);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v21, (uint64_t)v21);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v24, (uint64_t)v24);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v25, (uint64_t)v25);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v28, (uint64_t)v28);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v29, (uint64_t)v29);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v31, (uint64_t)v31);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v34, (uint64_t)v34);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v36, (uint64_t)v36);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v38, (uint64_t)v38);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v41, (uint64_t)v41);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v44, (uint64_t)v44);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v47, (uint64_t)v47);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v48, (uint64_t)v48);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v49, (uint64_t)v49);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v52, (uint64_t)v52);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v54, (uint64_t)v54);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v56, (uint64_t)v56);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v59, (uint64_t)v59);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v62, (uint64_t)v62);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v64, (uint64_t)v64);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)v67, (uint64_t)v67);
  sub_C687EC((uint64_t)&xmmword_25FD740, (uint64_t)__p, (uint64_t)__p);
  if (SHIBYTE(v69) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v67[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((v65 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_36;
    }
  }
  else if ((SHIBYTE(v67[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v67[0]);
  if ((v65 & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v62[2]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v64[0]);
  if ((SHIBYTE(v62[2]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SHIBYTE(v60) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v62[0]);
  if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
LABEL_6:
    if ((v57 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v59[0]);
  if ((v57 & 0x80000000) == 0)
  {
LABEL_7:
    if (((char)v55 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v56[0]);
  if (((char)v55 & 0x80000000) == 0)
  {
LABEL_8:
    if (((char)v53 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v54[0]);
  if (((char)v53 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v50 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v52[0]);
  if ((v50 & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v48[2]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v49[0]);
  if ((SHIBYTE(v48[2]) & 0x80000000) == 0)
  {
LABEL_11:
    if ((SHIBYTE(v47[2]) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v48[0]);
  if ((SHIBYTE(v47[2]) & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v45) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_45;
  }
LABEL_44:
  operator delete(v47[0]);
  if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v42) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v44[0]);
  if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
LABEL_14:
    if ((SHIBYTE(v39) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }
LABEL_46:
  operator delete(v41[0]);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v36[2]) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_48;
  }
LABEL_47:
  operator delete(v38[0]);
  if ((SHIBYTE(v36[2]) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v34[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_49;
  }
LABEL_48:
  operator delete(v36[0]);
  if ((SHIBYTE(v34[2]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v32) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_50;
  }
LABEL_49:
  operator delete(v34[0]);
  if ((SHIBYTE(v32) & 0x80000000) == 0)
  {
LABEL_18:
    if (((char)v30 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }
LABEL_50:
  operator delete(v31[0]);
  if (((char)v30 & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v28[2]) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }
LABEL_51:
  operator delete(v29[0]);
  if ((SHIBYTE(v28[2]) & 0x80000000) == 0)
  {
LABEL_20:
    if ((v26 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }
LABEL_52:
  operator delete(v28[0]);
  if ((v26 & 0x80000000) == 0)
  {
LABEL_21:
    if ((SHIBYTE(v24[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }
LABEL_53:
  operator delete(v25[0]);
  if ((SHIBYTE(v24[2]) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v22) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_55;
  }
LABEL_54:
  operator delete(v24[0]);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
LABEL_23:
    if ((SHIBYTE(v19[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }
LABEL_55:
  operator delete(v21[0]);
  if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
  {
LABEL_24:
    if ((SHIBYTE(v18[2]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }
LABEL_56:
  operator delete(v19[0]);
  if ((SHIBYTE(v18[2]) & 0x80000000) == 0)
  {
LABEL_25:
    if (((char)v17 & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }
LABEL_57:
  operator delete(v18[0]);
  if (((char)v17 & 0x80000000) == 0)
  {
LABEL_26:
    if ((SHIBYTE(v14) & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }
LABEL_58:
  operator delete(v16[0]);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v12[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }
LABEL_59:
  operator delete(v13);
  if ((SHIBYTE(v12[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if ((SHIBYTE(v10[2]) & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }
LABEL_60:
  operator delete(v12[0]);
  if ((SHIBYTE(v10[2]) & 0x80000000) == 0)
  {
LABEL_29:
    if (((char)v9 & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_62;
  }
LABEL_61:
  operator delete(v10[0]);
  if (((char)v9 & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v6) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_63;
  }
LABEL_62:
  operator delete(v8[0]);
  if ((SHIBYTE(v6) & 0x80000000) == 0)
  {
LABEL_31:
    if (((char)v4 & 0x80000000) == 0) {
      goto LABEL_32;
    }
LABEL_64:
    operator delete(*(void **)v3);
    if ((SHIBYTE(v1[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
LABEL_65:
    operator delete(v1[0]);
    goto LABEL_33;
  }
LABEL_63:
  operator delete(v5);
  if ((char)v4 < 0) {
    goto LABEL_64;
  }
LABEL_32:
  if (SHIBYTE(v1[2]) < 0) {
    goto LABEL_65;
  }
LABEL_33:
  byte_25FD727 = 1;
  word_25FD710 = 65;
  byte_25FD73F = 1;
  word_25FD728 = 65;
}

void sub_103CE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  while (1)
  {
    if (*((char *)a9 - 9) < 0) {
      operator delete(*(a9 - 4));
    }
    a9 -= 4;
    if (a9 == &a21) {
      _Unwind_Resume(a1);
    }
  }
}

void sub_103D208(void *a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  HIBYTE(v11) = 15;
  strcpy((char *)__p, "reroute_biasing");
  long long v6 = (void *)sub_560F4(a1, (uint64_t)__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  switch(a2)
  {
    case 1:
    case 2:
    case 9:
    case 11:
      sub_103D870((uint64_t)__p, v6);
      sub_103DB14(a3, v6, (long long *)__p);
      break;
    case 5:
    case 6:
      HIBYTE(v9[2]) = 18;
      strcpy((char *)v9, "legacy_sar_biasing");
      char v7 = (void *)sub_560F4(a1, (uint64_t)v9);
      __p[0] = 0;
      __p[1] = (void *)0x7FFFFFFF;
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
      sub_103DB14(a3, v7, (long long *)__p);
      goto LABEL_9;
    case 7:
      v9[0] = (char *)operator new(0x19uLL);
      *(_OWORD *)&v9[1] = xmmword_20B9250;
      strcpy(v9[0], "waypoint_change_biasing");
      unint64_t v8 = (void *)sub_560F4(a1, (uint64_t)v9);
      __p[0] = 0;
      __p[1] = (void *)0x7FFFFFFF;
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
      sub_103DB14(a3, v8, (long long *)__p);
LABEL_9:
      if (SHIBYTE(v9[2]) < 0) {
        operator delete(v9[0]);
      }
      break;
    default:
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 4) = 0x7FFFFFFF;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(_DWORD *)(a3 + 24) = 0x7FFFFFFF;
      *(void *)(a3 + 32) = 0x7FFFFFFFFFFFFFFFLL;
      break;
  }
}

void sub_103D3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_103D448(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)(a1 + 40) = a3;
  return a1;
}

uint64_t sub_103D480(uint64_t a1, uint64_t *a2)
{
  if (!sub_45FB48(**(void **)(a1 + 40))) {
    return 0;
  }
  unsigned int v4 = *(unsigned __int8 *)(*(void *)(a1 + 40) + 17);
  if (v4 <= 0xB)
  {
    int v5 = 1 << v4;
    if ((v5 & 0xA06) != 0)
    {
      sub_103D664(a1, a2);
      goto LABEL_19;
    }
    if ((v5 & 0xE0) != 0)
    {
      if (*(unsigned char *)a1)
      {
        uint64_t v7 = *a2;
        uint64_t v8 = a2[1];
        if (*a2 != v8)
        {
          do
          {
            if (!*(unsigned char *)(sub_5231C(*(void *)v7) + 34))
            {
              double v9 = *(double *)(v7 + 16) - *(double *)(v7 + 760);
              double v10 = *(double *)(v7 + 184);
              if (v9 <= 0.0)
              {
                unsigned int v11 = 0;
                if (v10 >= (double)*(int *)(a1 + 4))
                {
LABEL_17:
                  if (v11 >= *(_DWORD *)(a1 + 8)) {
                    *(unsigned char *)(v7 + 930) = 1;
                  }
                }
              }
              else
              {
                unsigned int v11 = vcvtad_u64_f64(v10 / v9 * 1000000000.0);
                if (v10 >= (double)*(int *)(a1 + 4)) {
                  goto LABEL_17;
                }
              }
            }
            v7 += 936;
          }
          while (v7 != v8);
        }
      }
    }
  }
LABEL_19:
  uint64_t v13 = *a2;
  uint64_t v12 = a2[1];
  if (*a2 == v12) {
    return 0;
  }
  unint64_t v14 = v12 - v13 - 936;
  if (v14 < 0x3A8)
  {
    uint64_t result = 0;
    uint64_t v15 = *a2;
    do
    {
LABEL_26:
      result += *(unsigned __int8 *)(v15 + 930);
      v15 += 936;
    }
    while (v15 != v12);
    return result;
  }
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  unint64_t v18 = v14 / 0x3A8 + 1;
  uint64_t v15 = v13 + 936 * (v18 & 0xFFFFFFFFFFFFFELL);
  uint64_t v19 = v18 & 0xFFFFFFFFFFFFFELL;
  do
  {
    v16 += *(unsigned __int8 *)(v13 + 930);
    v17 += *(unsigned __int8 *)(v13 + 1866);
    v13 += 1872;
    v19 -= 2;
  }
  while (v19);
  uint64_t result = v17 + v16;
  if (v18 != (v18 & 0xFFFFFFFFFFFFFELL)) {
    goto LABEL_26;
  }
  return result;
}

uint64_t sub_103D664(uint64_t result, uint64_t *a2)
{
  if (*(unsigned char *)result)
  {
    uint64_t v3 = result;
    if (*(unsigned char *)(result + 16))
    {
      BOOL v4 = 1;
      int v5 = *(unsigned __int8 *)(result + 18);
      if (!*(unsigned char *)(result + 18)) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t result = sub_45FE1C(**(void **)(result + 40));
      BOOL v4 = result == 2;
      int v5 = *(unsigned __int8 *)(v3 + 18);
      if (!*(unsigned char *)(v3 + 18))
      {
LABEL_5:
        if ((v4 | v5) != 1) {
          return result;
        }
        uint64_t result = sub_103DC6C(v3);
        if (result) {
          return result;
        }
        uint64_t result = sub_401FE4(*(void *)(*(void *)(v3 + 40) + 8));
        uint64_t v7 = *a2;
        uint64_t v6 = a2[1];
        if (result)
        {
          if (v7 == v6) {
            return result;
          }
          int v8 = *(unsigned __int8 *)(v3 + 17);
          double v9 = (int *)(v3 + 4);
          double v10 = (unsigned int *)(v3 + 8);
          if (!v8) {
            goto LABEL_27;
          }
          while (1)
          {
            uint64_t result = sub_5231C(*(void *)v7);
            if (*(unsigned char *)(result + 34) || *(double *)(v7 + 872) == 0.0) {
              goto LABEL_14;
            }
            double v11 = *(double *)(v7 + 16) - *(double *)(v7 + 760);
            double v12 = *(double *)(v7 + 184);
            if (v11 <= 0.0)
            {
              unsigned int v13 = 0;
              if (v12 >= (double)*v9)
              {
LABEL_21:
                if (v13 >= *v10) {
                  *(unsigned char *)(v7 + 930) = 1;
                }
              }
            }
            else
            {
              unsigned int v13 = vcvtad_u64_f64(v12 / v11 * 1000000000.0);
              if (v12 >= (double)*v9) {
                goto LABEL_21;
              }
            }
LABEL_14:
            v7 += 936;
            if (v7 == v6) {
              return result;
            }
          }
        }
        if (v7 == v6) {
          return result;
        }
        double v9 = (int *)(v3 + 4);
        double v10 = (unsigned int *)(v3 + 8);
        while (1)
        {
LABEL_27:
          uint64_t result = sub_5231C(*(void *)v7);
          if (!*(unsigned char *)(result + 34))
          {
            double v14 = *(double *)(v7 + 16) - *(double *)(v7 + 760);
            double v15 = *(double *)(v7 + 184);
            if (v14 <= 0.0)
            {
              unsigned int v16 = 0;
              if (v15 >= (double)*v9)
              {
LABEL_32:
                if (v16 >= *v10) {
                  *(unsigned char *)(v7 + 930) = 1;
                }
              }
            }
            else
            {
              unsigned int v16 = vcvtad_u64_f64(v15 / v14 * 1000000000.0);
              if (v15 >= (double)*v9) {
                goto LABEL_32;
              }
            }
          }
          v7 += 936;
          if (v7 == v6) {
            return result;
          }
        }
      }
    }
    int v5 = *(unsigned __int8 *)(*(void *)(v3 + 40) + 18) == 1;
    goto LABEL_5;
  }
  return result;
}

uint64_t sub_103D870(uint64_t a1, void *a2)
{
  strcpy((char *)__p, "bias_to_any_user_route");
  HIBYTE(__p[2]) = 22;
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "bias_to_ev_charging_stop");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v5;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "bias_to_online_user_route");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 2) = v6;
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "max_num_recent_reroutes");
  int v7 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 4) = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "max_recent_reroutes_age_s");
  *(_DWORD *)(a1 + 8) = sub_5D2EC(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "min_recent_reroutes_distance_m");
  *(void *)(a1 + 16) = sub_5CDE0(a2, __p);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 8)) {
      goto LABEL_13;
    }
LABEL_16:
    *(_DWORD *)(a1 + 8) = 0x7FFFFFFF;
    if (*(void *)(a1 + 16)) {
      return a1;
    }
    goto LABEL_17;
  }
  operator delete(__p[0]);
  if (!*(_DWORD *)(a1 + 8)) {
    goto LABEL_16;
  }
LABEL_13:
  if (*(void *)(a1 + 16)) {
    return a1;
  }
LABEL_17:
  *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  return a1;
}

void sub_103DAE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_103DB14(uint64_t a1, void *a2, long long *a3)
{
  char v10 = 7;
  strcpy(__p, "enabled");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (v10 < 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)a1 = v6;
  char v10 = 13;
  strcpy(__p, "min_overlap_s");
  *(_DWORD *)(a1 + 4) = sub_5D2EC(a2, __p);
  if (v10 < 0) {
    operator delete(*(void **)__p);
  }
  char v10 = 20;
  strcpy(__p, "min_relative_overlap");
  *(_DWORD *)(a1 + 8) = vcvtad_u64_f64(sub_5C7E8(a2, (uint64_t)__p) * 1000000000.0);
  if (v10 < 0) {
    operator delete(*(void **)__p);
  }
  long long v7 = *a3;
  *(void *)(a1 + 32) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 16) = v7;
  return a1;
}

void sub_103DC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_103DC6C(uint64_t a1)
{
  char v2 = (void *)(*(void *)(a1 + 40) + 32);
  if (sub_45FB38(v2)) {
    return 0;
  }
  int v3 = *(_DWORD *)(a1 + 24);
  if (v3 == 0x7FFFFFFF)
  {
    uint64_t v4 = sub_52058((uint64_t)v2);
LABEL_7:
    BOOL v5 = (_DWORD *)v4;
  }
  else
  {
    BOOL v5 = (_DWORD *)sub_40EFE8((uint64_t)v2);
    uint64_t v4 = sub_52058((uint64_t)v2);
    if (v5 != (_DWORD *)v4)
    {
      while (*v5 <= v3)
      {
        v5 += 4;
        if (v5 == (_DWORD *)v4) {
          goto LABEL_7;
        }
      }
    }
  }
  unint64_t v6 = ((unint64_t)v5 - sub_40EFE8((uint64_t)v2)) >> 4;
  unsigned int v7 = *(_DWORD *)(a1 + 20);
  if (!v7 || v7 >= v6) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = sub_40EFE8((uint64_t)v2);
  uint64_t v12 = 0;
  if ((_DWORD *)v11 != v5)
  {
    unsigned int v13 = (_DWORD *)(v11 + 16);
    if ((_DWORD *)(v11 + 16) != v5)
    {
      uint64_t v12 = 0;
      float64x2_t v39 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
      float64x2_t v40 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
      float64x2_t v37 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
      float64x2_t v38 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
      do
      {
        unsigned int v16 = *(v13 - 3);
        unsigned int v15 = *(v13 - 2);
        BOOL v17 = v16 == -1 && v15 == -1;
        if (v17 || ((v19 = v13[1], unsigned int v18 = v13[2], v19 == -1) ? (v20 = v18 == -1) : (v20 = 0), v20))
        {
          uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_18;
        }
        long double v21 = exp(3.14159265 - (double)v15 * 6.28318531 / 4294967300.0);
        long double v22 = atan((v21 - 1.0 / v21) * 0.5) * 57.2957795 * 0.0174532925;
        v23.i64[0] = v16;
        v23.i64[1] = v19;
        long double v24 = exp(3.14159265 - (double)v18 * 6.28318531 / 4294967300.0);
        long double v25 = atan((v24 - 1.0 / v24) * 0.5) * 57.2957795 * 0.0174532925;
        int64x2_t v26 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v23), v40), v39), v38), v37);
        double v41 = vsubq_f64((float64x2_t)v26, (float64x2_t)vdupq_laneq_s64(v26, 1)).f64[0];
        long double v27 = sin((v22 - v25) * 0.5);
        long double v28 = v27 * v27;
        double v29 = cos(v22);
        long double v30 = v29 * cos(v25);
        long double v31 = sin(0.5 * v41);
        long double v32 = atan2(sqrt(v31 * v31 * v30 + v28), sqrt(1.0 - (v31 * v31 * v30 + v28)));
        double v33 = (v32 + v32) * 6372797.56 * 100.0;
        if (v33 >= 0.0)
        {
          double v34 = v33;
          if (v33 < 4.50359963e15)
          {
            uint64_t v35 = (uint64_t)(v33 + v33) + 1;
LABEL_34:
            double v34 = (double)(v35 >> 1);
          }
        }
        else
        {
          double v34 = v33;
          if (v33 > -4.50359963e15)
          {
            uint64_t v35 = (uint64_t)(v33 + v33);
            if (v35 >= 1) {
              --v35;
            }
            goto LABEL_34;
          }
        }
        if (v34 < 9.22337204e18)
        {
          if (v33 >= 0.0)
          {
            if (v33 < 4.50359963e15)
            {
              uint64_t v36 = (uint64_t)(v33 + v33) + 1;
              goto LABEL_44;
            }
          }
          else if (v33 > -4.50359963e15)
          {
            uint64_t v36 = (uint64_t)(v33 + v33);
            if (v36 >= 1) {
              --v36;
            }
LABEL_44:
            double v33 = (double)(v36 >> 1);
          }
          uint64_t v14 = (uint64_t)v33;
          goto LABEL_18;
        }
        uint64_t v14 = 0x7FFFFFFFFFFFFFFELL;
LABEL_18:
        v12 += v14;
        v13 += 4;
      }
      while (v13 != v5);
    }
  }
  return v10 == 0x7FFFFFFFFFFFFFFFLL || v12 > v10;
}

void sub_103E024()
{
  unk_25FD77F = 16641;
  word_25FD768 = 65;
  byte_25FD797 = 1;
  byte_25FD781 = 0;
}

uint64_t sub_103E04C(uint64_t a1, uint64_t a2, void *a3)
{
  HIBYTE(v18[2]) = 21;
  strcpy((char *)v18, "DrivingClosureScoring");
  __n128 __p = 0;
  unsigned int v16 = 0;
  uint64_t v17 = 0;
  unint64_t v6 = sub_374CDC((uint64_t)a3, (uint64_t)v18, (uint64_t *)&__p);
  sub_10435DC(a1, v6);
  unsigned int v7 = (void **)__p;
  if (__p)
  {
    int v8 = v16;
    double v9 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      double v9 = __p;
    }
    unsigned int v16 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v18[2]) < 0) {
    operator delete(v18[0]);
  }
  *(_DWORD *)(a1 + 196) = 0;
  *(_WORD *)(a1 + 200) = 0;
  *(void *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  sub_3EAFD4(a1 + 208, a3, a2);
  HIBYTE(v18[2]) = 20;
  strcpy((char *)v18, "DrivingRouteAnalyzer");
  __n128 __p = 0;
  unsigned int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v10 = sub_374CDC((uint64_t)a3, (uint64_t)v18, (uint64_t *)&__p);
  sub_108A150((void *)(a1 + 248), a3, v10, a2);
  uint64_t v11 = (void **)__p;
  if (__p)
  {
    uint64_t v12 = v16;
    unsigned int v13 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      unsigned int v13 = __p;
    }
    unsigned int v16 = v11;
    operator delete(v13);
  }
  if (SHIBYTE(v18[2]) < 0) {
    operator delete(v18[0]);
  }
  *(void *)(a1 + 904) = sub_3750CC(a3);
  sub_ED82AC(a1 + 912, a3);
  *(void *)(a1 + 5072) = sub_3750CC(a3);
  sub_1091FB4(a1 + 5080, a3);
  *(_OWORD *)(a1 + 5152) = 0u;
  *(_OWORD *)(a1 + 5136) = 0u;
  *(_DWORD *)(a1 + 5168) = 1065353216;
  return a1;
}

void sub_103E24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_C62E9C(v19);
  long double v21 = *(void **)(v18 + 344);
  if (v21)
  {
    *(void *)(v18 + 352) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(a1);
}

void sub_103E2BC(uint64_t a1, char ***a2, uint64_t a3)
{
  if (*(unsigned char *)a1)
  {
    *(unsigned char *)(a1 + 192) = 0;
    *(void *)(a1 + 184) = 0;
    *(_DWORD *)(a1 + 196) = 0;
    *(_WORD *)(a1 + 200) = 0;
    __n128 __p = 0;
    unsigned int v19 = 0;
    uint64_t v20 = 0;
    sub_1044738((char **)&__p, 0xCFDCFDCFDCFDCFDDLL * (a2[1] - *a2));
    BOOL v5 = *a2;
    uint64_t v4 = a2[1];
    if (*a2 != v4)
    {
      unint64_t v6 = v19;
      do
      {
        unsigned int v7 = *v5;
        sub_108C92C(a1 + 248, *v5, &v26);
        if (sub_45FB48((uint64_t)v7)) {
          int v8 = sub_47EE94((uint64_t)v7, 0, 0);
        }
        else {
          int v8 = 0x7FFFFFFF;
        }
        long double v21 = v5;
        uint64x2_t v23 = 0;
        long double v24 = 0;
        long double v22 = 0;
        int64x2_t v9 = v26;
        long double v27 = (int64x2_t *)&v22;
        char v28 = 0;
        int64_t v10 = v26.i64[1] - v26.i64[0];
        if (v26.i64[1] != v26.i64[0])
        {
          unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * (v10 >> 5);
          if (v11 >= 0x19999999999999ALL) {
            sub_2E00();
          }
          long double v22 = operator new(v10);
          uint64x2_t v23 = v22;
          long double v24 = &v22[10 * v11];
          uint64x2_t v23 = sub_10448D0((uint64_t)&v24, v9.i64[0], (_OWORD *)v9.i64[1], v22);
        }
        int v25 = v8;
        long double v27 = &v26;
        sub_3A6AB0((void ***)&v27);
        unint64_t v6 = sub_1044A58((char **)&__p, (uint64_t)v6, (uint64_t)&v21) + 40;
        v26.i64[0] = (uint64_t)&v22;
        sub_3A6AB0((void ***)&v26);
        v5 += 117;
      }
      while (v5 != v4);
    }
    sub_103E584(a1, (uint64_t ****)&__p, a3);
    sub_103F8EC(a1, (char ****)&__p);
    uint64_t v12 = (char *)__p;
    if (__p)
    {
      unsigned int v13 = v19;
      uint64_t v14 = __p;
      if (v19 != __p)
      {
        do
        {
          unsigned int v15 = v13 - 40;
          long double v21 = (char **)(v13 - 32);
          sub_3A6AB0((void ***)&v21);
          unsigned int v13 = v15;
        }
        while (v15 != v12);
        uint64_t v14 = __p;
      }
      unsigned int v19 = v12;
      operator delete(v14);
    }
  }
}

void sub_103E4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *__p, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (__p)
  {
    long double v22 = a13;
    uint64x2_t v23 = __p;
    if (a13 != __p)
    {
      do
      {
        long double v24 = v22 - 40;
        *(void *)(v20 - 96) = v22 - 32;
        sub_3A6AB0((void ***)(v20 - 96));
        long double v22 = v24;
      }
      while (v24 != __p);
      uint64x2_t v23 = __p;
    }
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void sub_103E584(uint64_t a1, uint64_t ****a2, uint64_t a3)
{
  sub_103FB7C(a1, a2, a3, (char **)&v174);
  int v160 = (double *)v174;
  unsigned int v163 = v175;
  if (v174 != v175)
  {
    for (uint64_t i = (double *)v174; i != v163; i += 7)
    {
      if (i[3] > 0.0)
      {
        uint64_t v4 = *(void **)i;
        unint64_t v6 = *(unsigned char **)(*(void *)i + 40);
        unint64_t v5 = *(void *)(*(void *)i + 48);
        if ((unint64_t)v6 >= v5)
        {
          int v8 = (char *)v4[4];
          uint64_t v9 = v6 - v8;
          uint64_t v10 = v6 - v8 + 1;
          if (v10 < 0) {
            sub_2E00();
          }
          unint64_t v11 = v5 - (void)v8;
          if (2 * v11 > v10) {
            uint64_t v10 = 2 * v11;
          }
          if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v12 = v10;
          }
          if (v12) {
            unsigned int v13 = (char *)operator new(v12);
          }
          else {
            unsigned int v13 = 0;
          }
          uint64_t v14 = &v13[v9];
          uint64_t v7 = (uint64_t)&v13[v9 + 1];
          unsigned int v15 = (char *)(v8 - v6);
          if (v8 == v6) {
            unsigned int v15 = 0;
          }
          v4[4] = &v15[(void)v14];
          v4[5] = v7;
          v4[6] = &v13[v12];
          if (v8) {
            operator delete(v8);
          }
        }
        else
        {
          uint64_t v7 = (uint64_t)(v6 + 1);
        }
        v4[5] = v7;
      }
      int v16 = sub_104011C(a1, **((void **)i + 1) + 424 * *((void *)i + 2));
      double v17 = *i;
      if (v16 < 0) {
        char v18 = -5;
      }
      else {
        char v18 = 5;
      }
      unsigned int v19 = v16 / 10
          + (((103 * (char)(v18 + v16 % 10)) >> 15) & 1)
          + ((103 * (char)(v18 + v16 % 10)) >> 10);
      if (*(_DWORD *)(*(void *)&v17 + 24) > v19) {
        unsigned int v19 = *(_DWORD *)(*(void *)&v17 + 24);
      }
      *(_DWORD *)(*(void *)&v17 + 24) = v19;
      double v20 = i[3];
      *(double *)(*(void *)&v17 + 56) = v20;
      unsigned int v21 = *(_DWORD *)(*(void *)&v17 + 40) - *(_DWORD *)(*(void *)&v17 + 32);
      if (*(_DWORD *)(a1 + 184) > v21) {
        unsigned int v21 = *(_DWORD *)(a1 + 184);
      }
      *(_DWORD *)(a1 + 184) = v21;
      if (v20 <= 0.0) {
        continue;
      }
      long double v22 = sub_69510();
      sub_6879C((uint64_t)v22, &v173);
      uint64_t v23 = *(void *)sub_68F1C((uint64_t)v22);
      uint64_t v24 = *(void *)(sub_68F1C((uint64_t)v22) + 8);
      sub_6BAC((uint64_t)&v179);
      if (v23 != v24)
      {
        sub_3ABADC("\"", v23, "\"");
        if ((v178 & 0x80u) == 0) {
          int v25 = &v176;
        }
        else {
          int v25 = v176;
        }
        if ((v178 & 0x80u) == 0) {
          uint64_t v26 = v178;
        }
        else {
          uint64_t v26 = v177;
        }
        sub_188FC78(&v179, (uint64_t)v25, v26);
        if ((char)v178 < 0)
        {
          operator delete(v176);
          if (v23 + 24 == v24) {
            goto LABEL_53;
          }
        }
        else if (v23 + 24 == v24)
        {
          goto LABEL_53;
        }
        uint64_t v27 = 24;
        do
        {
          if (v27) {
            sub_188FC78(&v179, (uint64_t)",", 1);
          }
          sub_3ABADC("\"", v23 + v27, "\"");
          if ((v178 & 0x80u) == 0) {
            char v28 = &v176;
          }
          else {
            char v28 = v176;
          }
          if ((v178 & 0x80u) == 0) {
            uint64_t v29 = v178;
          }
          else {
            uint64_t v29 = v177;
          }
          sub_188FC78(&v179, (uint64_t)v28, v29);
          if ((char)v178 < 0) {
            operator delete(v176);
          }
          v27 += 24;
        }
        while (v23 + v27 != v24);
      }
LABEL_53:
      std::stringbuf::str();
      double v179 = v164;
      *(void **)((char *)&v179 + *((void *)v164 - 3)) = v161;
      if (v187 < 0) {
        operator delete(v186);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      sub_45FC68(*(uint64_t **)a3);
      sub_6912C((uint64_t)v22);
      if (SHIBYTE(v172) < 0)
      {
        operator delete(__p);
        if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_57;
        }
      }
      else if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_57:
        operator delete(v173.__r_.__value_.__l.__data_);
      }
    }
  }
  memset(&v173, 0, sizeof(v173));
  __n128 __p = 0;
  uint64_t v171 = 0;
  unint64_t v172 = 0;
  long double v30 = *a2;
  long double v31 = a2[1];
  if (*a2 == v31)
  {
    int v135 = 0;
    uint64_t v134 = 0;
  }
  else
  {
    long double v32 = v163;
    double v154 = a2[1];
    do
    {
      int v158 = (char **)*v30;
      double v33 = (char *)**v30;
      if (sub_45FB48((uint64_t)v33))
      {
        unsigned int v155 = v30;
        double v34 = (char *)__p;
        for (uint64_t j = (void **)v171; j != (void **)v34; j -= 3)
        {
          if (*((char *)j - 1) < 0) {
            operator delete(*(j - 3));
          }
        }
        uint64_t v171 = v34;
        uint64_t v36 = v155[1];
        double v162 = v155[2];
        if (v36 != v162)
        {
          uint64_t v156 = v33;
          while (1)
          {
            float64x2_t v38 = v36[1];
            uint64_t v39 = **v36;
            uint64_t v165 = v39 + 424 * (void)v38;
            float64x2_t v40 = (const void **)(v165 + 40);
            double v179 = (void *)(v165 + 40);
            double v41 = sub_3A92D0(a1 + 5136, v165 + 40, (uint64_t)&unk_20F06E0, (long long **)&v179);
            *(_OWORD *)(v41 + 5) = *(_OWORD *)v36;
            *((unsigned char *)v41 + 56) = *(unsigned char *)(v165 + 272);
            if (sub_45FB48(*(void *)a3)) {
              break;
            }
LABEL_110:
            double v73 = *(unsigned __int8 **)(a3 + 192);
            double v72 = *(unsigned __int8 **)(a3 + 200);
            if (v73 != v72)
            {
              size_t v74 = *(void *)(v165 + 48);
              if (*(char *)(v165 + 63) >= 0) {
                uint64_t v75 = *(unsigned __int8 *)(v165 + 63);
              }
              else {
                uint64_t v75 = *(void *)(v165 + 48);
              }
              if ((*(unsigned char *)(v165 + 63) & 0x80) != 0)
              {
                double v84 = *v40;
                while (1)
                {
                  uint64_t v85 = v73[23];
                  int v86 = (char)v85;
                  if ((v85 & 0x80u) != 0) {
                    uint64_t v85 = *((void *)v73 + 1);
                  }
                  if (v75 == v85)
                  {
                    double v87 = v86 >= 0 ? v73 : *(unsigned __int8 **)v73;
                    if (!memcmp(v84, v87, v74)) {
                      break;
                    }
                  }
                  v73 += 80;
                  if (v73 == v72) {
                    goto LABEL_146;
                  }
                }
LABEL_145:
                double v33 = v156;
                v158[94] = *(char **)(a1 + 8);
                *((unsigned char *)v41 + 57) = 1;
                long double v32 = v163;
                goto LABEL_73;
              }
              if (*(unsigned char *)(v165 + 63))
              {
                do
                {
                  uint64_t v79 = v73[23];
                  int v80 = (char)v79;
                  if ((v79 & 0x80u) != 0) {
                    uint64_t v79 = *((void *)v73 + 1);
                  }
                  if (v75 == v79)
                  {
                    if (v80 >= 0) {
                      double v81 = v73;
                    }
                    else {
                      double v81 = *(unsigned __int8 **)v73;
                    }
                    double v82 = (unsigned __int8 *)(v165 + 40);
                    uint64_t v83 = *(unsigned __int8 *)(v165 + 63);
                    while (*v82 == *v81)
                    {
                      ++v82;
                      ++v81;
                      if (!--v83) {
                        goto LABEL_145;
                      }
                    }
                  }
                  v73 += 80;
                }
                while (v73 != v72);
              }
              else
              {
                uint64_t v76 = v73[23];
                if ((v76 & 0x80u) != 0) {
                  uint64_t v76 = *((void *)v73 + 1);
                }
                if (v76 == *(unsigned __int8 *)(v165 + 63)) {
                  goto LABEL_145;
                }
                double v77 = v73 + 80;
                while (v77 != v72)
                {
                  uint64_t v78 = v77[23];
                  if ((v78 & 0x80u) != 0) {
                    uint64_t v78 = *((void *)v77 + 1);
                  }
                  v77 += 80;
                  if (v75 == v78) {
                    goto LABEL_145;
                  }
                }
              }
            }
LABEL_146:
            long double v32 = v163;
            double v33 = v156;
            if (v160 == v163) {
              goto LABEL_70;
            }
            if (*(char *)(v165 + 63) >= 0) {
              uint64_t v88 = *(unsigned __int8 *)(v165 + 63);
            }
            else {
              uint64_t v88 = *(void *)(v39 + 424 * (void)v38 + 48);
            }
            long long v89 = v160;
            if ((*(unsigned char *)(v165 + 63) & 0x80) != 0)
            {
              long long v89 = v160;
              while (1)
              {
                uint64_t v94 = *(const void ***)v89;
                uint64_t v95 = *(unsigned __int8 *)(*(void *)v89 + 23);
                if ((v95 & 0x80u) == 0) {
                  uint64_t v96 = *(unsigned __int8 *)(*(void *)v89 + 23);
                }
                else {
                  uint64_t v96 = *(void *)(*(void *)v89 + 8);
                }
                if (v96 == v88)
                {
                  uint64_t v97 = (unsigned __int8 *)*v40;
                  if ((v95 & 0x80) != 0)
                  {
                    if (!memcmp(*v94, v97, *(void *)(*(void *)v89 + 8))) {
                      goto LABEL_178;
                    }
                  }
                  else
                  {
                    if (!*(unsigned char *)(*(void *)v89 + 23)) {
                      goto LABEL_178;
                    }
                    while (*(unsigned __int8 *)v94 == *v97)
                    {
                      uint64_t v94 = (const void **)((char *)v94 + 1);
                      ++v97;
                      if (!--v95) {
                        goto LABEL_178;
                      }
                    }
                  }
                }
                v89 += 7;
                if (v89 == v163) {
                  goto LABEL_70;
                }
              }
            }
            while (1)
            {
              long long v90 = *(const void ***)v89;
              uint64_t v91 = *(unsigned __int8 *)(*(void *)v89 + 23);
              if ((v91 & 0x80u) == 0) {
                uint64_t v92 = *(unsigned __int8 *)(*(void *)v89 + 23);
              }
              else {
                uint64_t v92 = *(void *)(*(void *)v89 + 8);
              }
              if (v92 != v88) {
                goto LABEL_153;
              }
              if ((v91 & 0x80) == 0) {
                break;
              }
              if (!memcmp(*v90, v40, *(void *)(*(void *)v89 + 8))) {
                goto LABEL_178;
              }
LABEL_153:
              v89 += 7;
              if (v89 == v163) {
                goto LABEL_70;
              }
            }
            if (*(unsigned char *)(*(void *)v89 + 23))
            {
              unsigned int v93 = (unsigned __int8 *)(v165 + 40);
              while (*(unsigned __int8 *)v90 == *v93)
              {
                long long v90 = (const void **)((char *)v90 + 1);
                ++v93;
                if (!--v91) {
                  goto LABEL_178;
                }
              }
              goto LABEL_153;
            }
LABEL_178:
            if (v89 != v163)
            {
              double v98 = v89[3];
              if (v98 != 0.0)
              {
                double v99 = (double)(10 * *(_DWORD *)(*(void *)v89 + 24));
                double v100 = (double)(unint64_t)(*(void *)(*(void *)v89 + 40) - *(void *)(*(void *)v89 + 32));
                long double v101 = *((double *)v158 + 94)
                     + v98 * (pow(*(double *)(a1 + 56) * v100, *(long double *)(a1 + 64)) * v99);
                *((long double *)v158 + 94) = v101;
                *((long double *)v158 + 94) = *(double *)(a1 + 72) * v100 + v101;
                v41[8] = *((void *)v89 + 3);
                long long v102 = (void **)(**((void **)v89 + 1) + 424 * *((void *)v89 + 2) + 40);
                unint64_t v103 = v171;
                if ((unint64_t)v171 >= v172)
                {
                  unsigned int v105 = sub_6E6EC((char **)&__p, (uint64_t)v102);
                }
                else
                {
                  if (*(char *)(**((void **)v89 + 1) + 424 * *((void *)v89 + 2) + 63) < 0)
                  {
                    sub_4200(v171, *v102, *(void *)(**((void **)v89 + 1) + 424 * *((void *)v89 + 2) + 48));
                  }
                  else
                  {
                    long long v104 = *(_OWORD *)v102;
                    *((void *)v171 + 2) = *(void *)(**((void **)v89 + 1) + 424 * *((void *)v89 + 2) + 56);
                    _OWORD *v103 = v104;
                  }
                  unsigned int v105 = (char *)v103 + 24;
                }
                uint64_t v171 = v105;
                goto LABEL_73;
              }
            }
LABEL_70:
            double v37 = 0.0;
            if (!*(unsigned char *)(a1 + 25)) {
              double v37 = (double)(int)sub_104011C(a1, v165);
            }
            *((double *)v158 + 94) = v37 + *((double *)v158 + 94);
            *((double *)v41 + 9) = v37;
LABEL_73:
            v36 += 20;
            if (v36 == v162) {
              goto LABEL_195;
            }
          }
          sub_45E97C(v33, (uint64_t)&v179);
          unint64_t v42 = v36[8];
          char v43 = v36[9];
          if (v42 == v43 || v184 == v185)
          {
            int v53 = (v42 == v43) == (v184 == v185);
            double v54 = v184;
            if (!v184) {
              goto LABEL_88;
            }
            goto LABEL_87;
          }
          if (v36[4] == v181)
          {
            uint64_t v44 = v36[2];
            if (v44)
            {
              unint64_t v45 = (unint64_t)v36[3];
              BOOL v46 = v45 < sub_46C760(v44);
              int v47 = v179;
              if (v179) {
                goto LABEL_80;
              }
LABEL_184:
              BOOL v50 = 0;
              goto LABEL_185;
            }
            BOOL v46 = 0;
            int v47 = v179;
            if (!v179) {
              goto LABEL_184;
            }
LABEL_80:
            uint64_t v48 = v180;
            unint64_t v49 = sub_46C760(v47);
            BOOL v50 = (unint64_t)v48 < v49;
            if ((unint64_t)v48 < v49 && v46)
            {
              uint64_t v52 = sub_46C8EC(v36[2], (uint64_t)v36[3]);
              int v53 = v52 == sub_46C8EC(v179, (uint64_t)v180);
              double v54 = v184;
              if (!v184) {
                goto LABEL_88;
              }
LABEL_87:
              long long v185 = v54;
              operator delete(v54);
              goto LABEL_88;
            }
LABEL_185:
            int v53 = v46 ^ v50 ^ 1;
            double v54 = v184;
            if (v184) {
              goto LABEL_87;
            }
          }
          else
          {
            int v53 = 0;
            double v54 = v184;
            if (v184) {
              goto LABEL_87;
            }
          }
LABEL_88:
          if (v182)
          {
            double v183 = v182;
            operator delete(v182);
          }
          if (v53)
          {
            __int16 v55 = (int **)sub_45FC68((uint64_t *)v33);
            uint64_t v56 = (unsigned __int16 *)((char *)*v55 - **v55);
            if (*v56 < 0x1Du)
            {
              long double v32 = v163;
              uint64_t v58 = 0;
              std::string::size_type v59 = v173.__r_.__value_.__r.__words[2];
              std::string::size_type size = v173.__r_.__value_.__l.__size_;
              if (v173.__r_.__value_.__l.__size_ >= v173.__r_.__value_.__r.__words[2]) {
                goto LABEL_97;
              }
            }
            else
            {
              uint64_t v57 = v56[14];
              long double v32 = v163;
              if (v57)
              {
                if (*((unsigned char *)v55 + 38)) {
                  uint64_t v58 = -*(void *)((char *)*v55 + v57);
                }
                else {
                  uint64_t v58 = *(void *)((char *)*v55 + v57);
                }
                std::string::size_type v59 = v173.__r_.__value_.__r.__words[2];
                std::string::size_type size = v173.__r_.__value_.__l.__size_;
                if (v173.__r_.__value_.__l.__size_ >= v173.__r_.__value_.__r.__words[2])
                {
LABEL_97:
                  char v61 = (void *)v173.__r_.__value_.__r.__words[0];
                  unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(size - v173.__r_.__value_.__r.__words[0]) >> 3);
                  unint64_t v63 = v62 + 1;
                  if (v62 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    sub_2E00();
                  }
                  unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v59 - v173.__r_.__value_.__r.__words[0]) >> 3);
                  if (2 * v64 > v63) {
                    unint64_t v63 = 2 * v64;
                  }
                  if (v64 >= 0x555555555555555) {
                    unint64_t v65 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v65 = v63;
                  }
                  if (v65 > 0xAAAAAAAAAAAAAAALL) {
                    sub_188D718();
                  }
                  char v66 = (char *)operator new(24 * v65);
                  char v67 = &v66[24 * v62];
                  *(_OWORD *)char v67 = *(_OWORD *)v36;
                  *((void *)v67 + 2) = v58;
                  if ((void *)size == v61)
                  {
                    long double v32 = v163;
                    std::string::size_type v71 = (std::string::size_type)(v67 + 24);
                    v173.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66[24 * v62];
                    v173.__r_.__value_.__l.__size_ = (std::string::size_type)(v67 + 24);
                    v173.__r_.__value_.__r.__words[2] = (std::string::size_type)&v66[24 * v65];
                    if (v61) {
                      goto LABEL_108;
                    }
                  }
                  else
                  {
                    long long v68 = &v66[24 * v62];
                    long double v32 = v163;
                    do
                    {
                      std::string::size_type v69 = (std::string::size_type)(v68 - 24);
                      long long v70 = *(_OWORD *)(size - 24);
                      *((void *)v68 - 1) = *(void *)(size - 8);
                      *(_OWORD *)(v68 - 24) = v70;
                      size -= 24;
                      v68 -= 24;
                    }
                    while ((void *)size != v61);
                    std::string::size_type v71 = (std::string::size_type)(v67 + 24);
                    v173.__r_.__value_.__r.__words[0] = v69;
                    v173.__r_.__value_.__l.__size_ = (std::string::size_type)(v67 + 24);
                    v173.__r_.__value_.__r.__words[2] = (std::string::size_type)&v66[24 * v65];
                    if (v61) {
LABEL_108:
                    }
                      operator delete(v61);
                  }
                  v173.__r_.__value_.__l.__size_ = v71;
                  goto LABEL_73;
                }
              }
              else
              {
                uint64_t v58 = 0;
                std::string::size_type v59 = v173.__r_.__value_.__r.__words[2];
                std::string::size_type size = v173.__r_.__value_.__l.__size_;
                if (v173.__r_.__value_.__l.__size_ >= v173.__r_.__value_.__r.__words[2]) {
                  goto LABEL_97;
                }
              }
            }
            *(_OWORD *)std::string::size_type size = *(_OWORD *)v36;
            *(void *)(size + 16) = v58;
            v173.__r_.__value_.__l.__size_ = size + 24;
            goto LABEL_73;
          }
          goto LABEL_110;
        }
LABEL_195:
        int v106 = sub_47EE94((uint64_t)v33, 0, 0);
        LODWORD(v176) = v106;
        int v107 = (void *)sub_45FD6C((uint64_t *)v33);
        double v179 = v107;
        if (v160 != v32)
        {
          unint64_t v108 = (char *)__p;
          unint64_t v109 = v171;
          unint64_t v110 = v160;
          do
          {
            while (1)
            {
              unint64_t v111 = v108;
              if (v108 != v109)
              {
                uint64_t v112 = **((void **)v110 + 1) + 424 * *((void *)v110 + 2);
                unint64_t v115 = *(unsigned __int8 **)(v112 + 40);
                uint64_t v113 = v112 + 40;
                uint64_t v114 = v115;
                int v116 = *(char *)(v113 + 23);
                if (v116 >= 0) {
                  uint64_t v117 = *(unsigned __int8 *)(v113 + 23);
                }
                else {
                  uint64_t v117 = *(void *)(v113 + 8);
                }
                if (v116 >= 0) {
                  uint64_t v118 = (unsigned __int8 *)v113;
                }
                else {
                  uint64_t v118 = v114;
                }
                unint64_t v111 = v108;
                while (1)
                {
                  uint64_t v119 = v111[23];
                  if ((v119 & 0x80u) == 0) {
                    uint64_t v120 = v111[23];
                  }
                  else {
                    uint64_t v120 = *((void *)v111 + 1);
                  }
                  if (v120 == v117)
                  {
                    if ((v119 & 0x80) != 0)
                    {
                      if (!memcmp(*(const void **)v111, v118, *((void *)v111 + 1))) {
                        break;
                      }
                    }
                    else
                    {
                      if (!v111[23]) {
                        break;
                      }
                      uint64_t v121 = 0;
                      while (v111[v121] == v118[v121])
                      {
                        if (v119 == ++v121) {
                          goto LABEL_218;
                        }
                      }
                    }
                  }
                  v111 += 24;
                  if (v111 == v109) {
                    goto LABEL_219;
                  }
                }
              }
LABEL_218:
              if (v111 == v109) {
                break;
              }
              v110 += 7;
              if (v110 == v32) {
                goto LABEL_60;
              }
            }
LABEL_219:
            uint64_t v122 = *(void **)v110;
            v110 += 7;
            unsigned int v123 = (void **)(v122 + 8);
            int v124 = *((_DWORD *)v122 + 16);
            if (v124 < v106 || v106 == 0x7FFFFFFF) {
              unsigned __int16 v126 = v123;
            }
            else {
              unsigned __int16 v126 = &v176;
            }
            if (v124 == 0x7FFFFFFF) {
              unsigned __int16 v127 = &v176;
            }
            else {
              unsigned __int16 v127 = v126;
            }
            *(_DWORD *)unsigned int v123 = *(_DWORD *)v127;
            uint64_t v130 = (uint64_t)v123[1];
            long long v128 = v123 + 1;
            uint64_t v129 = v130;
            if (v130 < (uint64_t)v107 || v107 == (void *)0x7FFFFFFFFFFFFFFFLL) {
              int v132 = v128;
            }
            else {
              int v132 = &v179;
            }
            if (v129 == 0x7FFFFFFFFFFFFFFFLL) {
              double v133 = &v179;
            }
            else {
              double v133 = v132;
            }
            *long long v128 = *v133;
          }
          while (v110 != v32);
        }
LABEL_60:
        long double v31 = v154;
        long double v30 = v155;
      }
      v30 += 5;
    }
    while (v30 != v31);
    int v135 = (unint64_t *)v173.__r_.__value_.__l.__size_;
    uint64_t v134 = v173.__r_.__value_.__r.__words[0];
  }
  unint64_t v136 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v135 - v134) >> 3));
  if (v135 == (unint64_t *)v134) {
    uint64_t v137 = 0;
  }
  else {
    uint64_t v137 = v136;
  }
  sub_1045220(v134, v135, (uint64_t)&v179, v137, 1);
  sub_10450DC((uint64_t **)&v173);
  unsigned int v138 = sub_69510();
  sub_6879C((uint64_t)v138, &v169);
  uint64_t v139 = *(void *)sub_68F1C((uint64_t)v138);
  uint64_t v140 = *(void *)(sub_68F1C((uint64_t)v138) + 8);
  sub_6BAC((uint64_t)&v179);
  if (v139 != v140)
  {
    sub_3ABADC("\"", v139, "\"");
    if ((v178 & 0x80u) == 0) {
      unsigned int v141 = &v176;
    }
    else {
      unsigned int v141 = v176;
    }
    if ((v178 & 0x80u) == 0) {
      uint64_t v142 = v178;
    }
    else {
      uint64_t v142 = v177;
    }
    sub_188FC78(&v179, (uint64_t)v141, v142);
    if ((char)v178 < 0)
    {
      operator delete(v176);
      if (v139 + 24 == v140) {
        goto LABEL_267;
      }
    }
    else if (v139 + 24 == v140)
    {
      goto LABEL_267;
    }
    uint64_t v143 = 24;
    do
    {
      if (v143) {
        sub_188FC78(&v179, (uint64_t)",", 1);
      }
      sub_3ABADC("\"", v139 + v143, "\"");
      if ((v178 & 0x80u) == 0) {
        unsigned int v144 = &v176;
      }
      else {
        unsigned int v144 = v176;
      }
      if ((v178 & 0x80u) == 0) {
        uint64_t v145 = v178;
      }
      else {
        uint64_t v145 = v177;
      }
      sub_188FC78(&v179, (uint64_t)v144, v145);
      if ((char)v178 < 0) {
        operator delete(v176);
      }
      v143 += 24;
    }
    while (v139 + v143 != v140);
  }
LABEL_267:
  std::stringbuf::str();
  if (v187 < 0) {
    operator delete(v186);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  std::string::size_type v147 = v173.__r_.__value_.__l.__size_;
  for (std::string::size_type k = v173.__r_.__value_.__r.__words[0]; k != v147; k += 24)
  {
    sub_6912C((uint64_t)v138);
    LODWORD(v176) = sub_69124((uint64_t)v138);
    sub_677F0((unsigned int *)&v176, (uint64_t)&v179);
    if (SHIBYTE(v181) < 0) {
      operator delete(v179);
    }
  }
  if (v168 < 0)
  {
    operator delete(v167);
    if ((SHIBYTE(v169.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_276:
      unsigned int v148 = (char *)__p;
      if (__p) {
        goto LABEL_277;
      }
LABEL_287:
      unsigned int v150 = (void *)v173.__r_.__value_.__r.__words[0];
      if (!v173.__r_.__value_.__r.__words[0]) {
        goto LABEL_289;
      }
      goto LABEL_288;
    }
  }
  else if ((SHIBYTE(v169.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_276;
  }
  operator delete(v169.__r_.__value_.__l.__data_);
  unsigned int v148 = (char *)__p;
  if (!__p) {
    goto LABEL_287;
  }
LABEL_277:
  unsigned int v149 = (void **)v171;
  if (v171 == v148)
  {
    uint64_t v171 = v148;
    operator delete(v148);
    unsigned int v150 = (void *)v173.__r_.__value_.__r.__words[0];
    if (!v173.__r_.__value_.__r.__words[0]) {
      goto LABEL_289;
    }
LABEL_288:
    v173.__r_.__value_.__l.__size_ = (std::string::size_type)v150;
    operator delete(v150);
    goto LABEL_289;
  }
  do
  {
    if (*((char *)v149 - 1) < 0) {
      operator delete(*(v149 - 3));
    }
    v149 -= 3;
  }
  while (v149 != (void **)v148);
  uint64_t v171 = v148;
  operator delete(__p);
  unsigned int v150 = (void *)v173.__r_.__value_.__r.__words[0];
  if (v173.__r_.__value_.__r.__words[0]) {
    goto LABEL_288;
  }
LABEL_289:
  double v151 = (char *)v174;
  if (v174)
  {
    for (m = v175; m != (double *)v151; m -= 7)
    {
      double v153 = (void *)*((void *)m - 3);
      if (v153)
      {
        *((void *)m - 2) = v153;
        operator delete(v153);
      }
    }
    operator delete(v151);
  }
}

void sub_103F5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54)
{
  if (a53 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a54);
  if (a32 < 0)
  {
    operator delete(a27);
    sub_1A668(&a33);
    __int16 v55 = a39;
    if (!a39) {
      goto LABEL_8;
    }
  }
  else
  {
    sub_1A668(&a33);
    __int16 v55 = a39;
    if (!a39)
    {
LABEL_8:
      sub_4439BC(&a45);
      _Unwind_Resume(a1);
    }
  }
  a40 = (uint64_t)v55;
  operator delete(v55);
  goto LABEL_8;
}

void sub_103F8EC(uint64_t a1, char ****a2)
{
  if (*(unsigned char *)(a1 + 161))
  {
    unint64_t v5 = *a2;
    uint64_t v4 = (uint64_t)a2[1];
    if (*a2 != (char ***)v4)
    {
LABEL_3:
      while (1)
      {
        unint64_t v6 = v5[1];
        uint64_t v7 = v5[2];
        if (v6 != v7) {
          break;
        }
        v5 += 5;
        if (v5 == (char ***)v4) {
          goto LABEL_12;
        }
      }
      int v8 = (void **)(v5 + 1);
      uint64_t v9 = v4;
      while (1)
      {
        uint64_t v4 = v9 - 40;
        if ((char ***)(v9 - 40) == v5) {
          break;
        }
        uint64_t v10 = *(void *)(v9 - 32);
        uint64_t v11 = *(void *)(v9 - 24);
        v9 -= 40;
        if (v10 == v11)
        {
          uint64_t v24 = (char ***)*v5;
          size_t v12 = v24;
          uint64_t v23 = v5[3];
          *int v8 = 0;
          v5[2] = 0;
          v5[3] = 0;
          int v26 = *((_DWORD *)v5 + 8);
          int v13 = v26;
          *unint64_t v5 = *(char ***)v4;
          sub_1045034(v8);
          *(_OWORD *)(v5 + 1) = *(_OWORD *)(v4 + 8);
          v5[3] = *(char ***)(v4 + 24);
          *(void *)(v4 + 8) = 0;
          *(void *)(v4 + 16) = 0;
          *(void *)(v4 + 24) = 0;
          *((_DWORD *)v5 + 8) = *(_DWORD *)(v4 + 32);
          *(void *)uint64_t v4 = v12;
          sub_1045034((void **)(v4 + 8));
          *(void *)(v4 + 8) = v6;
          *(void *)(v4 + 16) = v7;
          *(void *)(v4 + 24) = v23;
          memset(v25, 0, sizeof(v25));
          *(_DWORD *)(v4 + 32) = v13;
          uint64_t v27 = (long long *)v25;
          sub_3A6AB0((void ***)&v27);
          v5 += 5;
          if ((char ***)v4 != v5) {
            goto LABEL_3;
          }
          goto LABEL_12;
        }
      }
      uint64_t v4 = (uint64_t)v5;
      uint64_t v14 = *a2;
      unint64_t v15 = (char *)v5 - (char *)*a2;
      if (v5 != *a2) {
        goto LABEL_13;
      }
      goto LABEL_23;
    }
    uint64_t v4 = (uint64_t)*a2;
LABEL_12:
    uint64_t v14 = *a2;
    unint64_t v15 = v4 - (void)*a2;
    if ((char ***)v4 == *a2)
    {
LABEL_23:
      *(unsigned char *)(a1 + 192) = 1;
      return;
    }
LABEL_13:
    uint64_t v24 = v14;
    v25[0] = v4;
    *(_DWORD *)(a1 + 196) = -858993459 * (v15 >> 3);
    for (uint64_t i = a2[1]; (char ***)v4 != i; v4 += 40)
    {
      sub_10403E0(a1, v4, &v24);
      if (*(unsigned char *)(a1 + 160))
      {
        uint64_t v17 = *(void *)(v4 + 8);
        for (uint64_t j = *(void *)(v4 + 16); v17 != j; *((double *)v21 + 10) = v22)
        {
          unsigned int v19 = *(void **)v17;
          uint64_t v20 = *(void *)(v17 + 8);
          v17 += 160;
          uint64_t v27 = (long long *)(*v19 + 424 * v20 + 40);
          unsigned int v21 = sub_3A92D0(a1 + 5136, (uint64_t)v27, (uint64_t)&unk_20F06E0, &v27);
          double v22 = *(double *)(*(void *)v4 + 752);
          if (v22 >= *((double *)v21 + 10)) {
            double v22 = *((double *)v21 + 10);
          }
        }
      }
    }
  }
}

void **sub_103FB04(void **a1)
{
  char v2 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = v3 - 40;
        uint64_t v7 = (void **)(v3 - 32);
        sub_3A6AB0(&v7);
        int v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_103FB7C(uint64_t a1@<X0>, uint64_t ****a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  if (*(unsigned char *)(a1 + 24) && *(unsigned char *)(a3 + 17) == 1 && *(_DWORD *)(a3 + 160) != -1 && sub_45FB48(*(void *)a3))
  {
    sub_10416AC((char **)a3, *(void *)(a1 + 32), *(_DWORD *)(a1 + 40), a1 + 208, *(void *)(a1 + 904), &v63);
    uint64_t v9 = v63;
    int v8 = v64;
    *(_DWORD *)(a1 + 188) = -1227133513 * ((unint64_t)(v64 - v63) >> 3);
    if (v8 == v9)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      if (v8)
      {
        operator delete(v8);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v60 = 0u;
      *(_OWORD *)char v61 = 0u;
      int v62 = 1065353216;
      long long v58 = 0u;
      long long v59 = 0u;
      *(_OWORD *)__n128 __p = 0u;
      uint64_t v11 = *a2;
      uint64_t v10 = a2[1];
      if (v11 == v10)
      {
        unint64_t v42 = 0;
        uint64_t v54 = 0;
        __int16 v55 = 0;
        uint64_t v56 = 0;
      }
      else
      {
        do
        {
          unint64_t v12 = *(void *)(sub_45FC68(**v11) + 32);
          uint64_t v54 = (v12 >> 16) & 0xFFFF0000 | (v12 << 32) | (2 * ((v12 & 0xFF000000000000) == 0));
          *(void *)&long long v53 = 0;
          sub_1042CAC((uint64_t)__p, &v54, (uint64_t *)&v53);
          uint64_t v13 = *((void *)&v59 + 1);
          uint64_t v14 = (uint64_t *)(*(void *)((char *)__p[1]
                                      + (((unint64_t)(*((void *)&v59 + 1) + v59 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                          + 16 * (BYTE8(v59) + v59 - 1));
          sub_EC912C((uint64_t)v60, v14, v14);
          v11 += 5;
        }
        while (v11 != v10);
        uint64_t v54 = 0;
        __int16 v55 = 0;
        uint64_t v56 = 0;
        if (v13)
        {
          do
          {
            uint64_t v15 = v58;
            uint64_t v16 = v13 + v59;
            --v13;
            if ((void *)v58 == __p[1]) {
              unint64_t v17 = 0;
            }
            else {
              unint64_t v17 = 32 * (v58 - (unint64_t)__p[1]) - 1;
            }
            long long v53 = *(_OWORD *)(*(void *)((char *)__p[1] + (((unint64_t)(v59 + v13) >> 5) & 0x7FFFFFFFFFFFFF8))
                            + 16 * (v59 + v13));
            *((void *)&v59 + 1) = v13;
            if (v17 - v16 - 511 <= 0xFFFFFFFFFFFFFDFFLL)
            {
              operator delete(*(void **)(v58 - 8));
              *(void *)&long long v58 = v15 - 8;
            }
            sub_EC912C((uint64_t)v60, (uint64_t *)&v53, &v53);
            unint64_t v18 = sub_2D5EC4(*(void *)(a1 + 904), DWORD1(v53) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v53) << 32), (v53 & 2) == 0);
            char v19 = 0;
            uint64_t v20 = v9;
            do
            {
              while (1)
              {
                uint64_t v21 = *((void *)v20 + 4);
                uint64_t v22 = *((void *)v20 + 5) - v21;
                if (!v22) {
                  break;
                }
                uint64_t v23 = v22 >> 3;
                uint64_t v24 = v21 + 4;
                unint64_t v25 = v23;
                while (*(void *)(v24 - 4) != v18)
                {
                  v24 += 8;
                  if (!--v25) {
                    goto LABEL_19;
                  }
                }
                double v26 = 1.0;
                if (*(void *)(*(void *)v20 + 32) == *(void *)(*(void *)v20 + 40)) {
                  double v26 = (double)v25 / (double)(unint64_t)v23;
                }
                if (*((double *)v20 + 3) >= v26) {
                  double v26 = *((double *)v20 + 3);
                }
                *((double *)v20 + 3) = v26;
                v20 += 56;
                char v19 = 1;
                if (v20 == v8) {
                  goto LABEL_12;
                }
              }
LABEL_19:
              v20 += 56;
            }
            while (v20 != v8);
            if ((v19 & 1) == 0 && *((uint64_t *)&v53 + 1) < *(void *)(a1 + 48))
            {
              sub_ED8808(a1 + 912, v53, 1, &v54, 0);
              uint64_t v27 = v54;
              char v28 = v55;
              if ((void *)v54 != v55)
              {
                do
                {
                  unint64_t v29 = ((*(void *)(v27 + 32) >> 16) & 0xFFFF0000 | (*(void *)(v27 + 32) << 32) | (2 * ((*(void *)(v27 + 32) & 0xFF000000000000) == 0)))
                      + 4 * (unsigned __int16)*(_DWORD *)(v27 + 80);
                  unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v27 + 88) & 1;
                  if (v60[1])
                  {
                    unint64_t v31 = (0x2127599BF4325C37 * (v30 ^ (v29 >> 23))) ^ ((0x2127599BF4325C37 * (v30 ^ (v29 >> 23))) >> 47);
                    uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v60[1]);
                    v32.i16[0] = vaddlv_u8(v32);
                    if (v32.u32[0] > 1uLL)
                    {
                      unint64_t v33 = v31;
                      if ((void *)v31 >= v60[1]) {
                        unint64_t v33 = v31 % (unint64_t)v60[1];
                      }
                    }
                    else
                    {
                      unint64_t v33 = v31 & ((unint64_t)v60[1] - 1);
                    }
                    double v34 = (void *)*((void *)v60[0] + v33);
                    if (v34)
                    {
                      uint64_t v35 = (void *)*v34;
                      if (v35)
                      {
                        if (v32.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            uint64_t v37 = v35[1];
                            if (v31 == v37)
                            {
                              if (v35[2] == v30) {
                                goto LABEL_58;
                              }
                            }
                            else if ((v37 & ((uint64_t)v60[1] - 1)) != v33)
                            {
                              goto LABEL_53;
                            }
                            uint64_t v35 = (void *)*v35;
                            if (!v35) {
                              goto LABEL_53;
                            }
                          }
                        }
                        do
                        {
                          unint64_t v36 = v35[1];
                          if (v31 == v36)
                          {
                            if (v35[2] == v30) {
                              goto LABEL_58;
                            }
                          }
                          else
                          {
                            if ((void *)v36 >= v60[1]) {
                              v36 %= (unint64_t)v60[1];
                            }
                            if (v36 != v33) {
                              break;
                            }
                          }
                          uint64_t v35 = (void *)*v35;
                        }
                        while (v35);
                      }
                    }
                  }
LABEL_53:
                  unint64_t v52 = v30;
                  float64x2_t v38 = *(int **)(v27 + 40);
                  uint64_t v39 = (unsigned __int16 *)((char *)v38 - *v38);
                  if (*v39 >= 9u && (uint64_t v40 = v39[4]) != 0) {
                    uint64_t v41 = *(unsigned int *)((char *)v38 + v40);
                  }
                  else {
                    uint64_t v41 = 0;
                  }
                  uint64_t v51 = *((void *)&v53 + 1) + v41;
                  sub_1042CAC((uint64_t)__p, &v52, &v51);
LABEL_58:
                  v27 += 96;
                }
                while ((void *)v27 != v28);
                uint64_t v13 = *((void *)&v59 + 1);
              }
            }
LABEL_12:
            ;
          }
          while (v13);
          unint64_t v42 = (void *)v54;
        }
        else
        {
          unint64_t v42 = 0;
        }
      }
      *a4 = v9;
      a4[1] = v8;
      a4[2] = v65;
      unint64_t v64 = 0;
      unint64_t v65 = 0;
      unint64_t v63 = 0;
      if (v42)
      {
        __int16 v55 = v42;
        operator delete(v42);
      }
      char v43 = (void **)__p[1];
      uint64_t v44 = (void **)v58;
      *((void *)&v59 + 1) = 0;
      unint64_t v45 = v58 - (unint64_t)__p[1];
      if ((unint64_t)v58 - (unint64_t)__p[1] >= 0x11)
      {
        do
        {
          BOOL v46 = *v43++;
          operator delete(v46);
          v45 -= 8;
        }
        while (v45 > 0x10);
      }
      while (v43 != v44)
      {
        int v47 = *v43++;
        operator delete(v47);
      }
      if (__p[0]) {
        operator delete(__p[0]);
      }
      uint64_t v48 = v61[0];
      if (v61[0])
      {
        do
        {
          unint64_t v49 = (void *)*v48;
          operator delete(v48);
          uint64_t v48 = v49;
        }
        while (v49);
      }
      BOOL v50 = v60[0];
      v60[0] = 0;
      if (v50) {
        operator delete(v50);
      }
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_10400C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  sub_431BC((uint64_t)&a17);
  sub_12168((uint64_t)&a23);
  sub_4439BC((void **)(v23 - 104));
  _Unwind_Resume(a1);
}

uint64_t sub_104011C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_358820(a2);
  if (result)
  {
    if (!*(unsigned char *)(a2 + 312))
    {
      if (!*(unsigned char *)(a1 + 96)) {
        return 0;
      }
      uint64_t v11 = *(unsigned __int8 *)(a2 + 348);
      unint64_t v12 = (char *)&unk_20F1CFB;
      switch(*(unsigned char *)(a2 + 348))
      {
        case 0:
          goto LABEL_31;
        case 2:
          uint64_t v11 = &def_332C + 1;
          goto LABEL_31;
        case 8:
          uint64_t v11 = &def_332C + 2;
          goto LABEL_31;
        case 0x10:
          uint64_t v11 = &def_332C + 3;
          goto LABEL_31;
        case 0x17:
          uint64_t v11 = &dword_4;
          goto LABEL_31;
        case 0x19:
          uint64_t v11 = &dword_4 + 1;
          goto LABEL_31;
        case 0x1A:
          uint64_t v11 = &dword_4 + 2;
          goto LABEL_31;
        case 0x1D:
          uint64_t v11 = &dword_4 + 3;
          goto LABEL_31;
        case 0x22:
          uint64_t v11 = &dword_8;
          goto LABEL_31;
        case 0x28:
          uint64_t v11 = &dword_8 + 1;
          goto LABEL_31;
        case 0x2A:
          uint64_t v11 = &dword_8 + 2;
LABEL_31:
          unint64_t v12 = (char *)&unk_20F1CF0 + v11;
          break;
        default:
          break;
      }
      uint64_t v13 = v12 - (char *)&unk_20F1CF0;
      double v14 = *(double *)(a1 + 104);
      double v15 = pow((double)*(int *)(a2 + 316), *(long double *)(a1 + 112)) * *(double *)(a1 + 120);
      if (*(double *)(a1 + 128) < v15) {
        double v15 = *(double *)(a1 + 128);
      }
      double v9 = v14 + v15;
      if (v13 == 11) {
        double v9 = v9 * *(double *)(a1 + 152);
      }
      if (*(double *)(a1 + 8) < v9) {
        double v9 = *(double *)(a1 + 8);
      }
      if (v9 < 0.0)
      {
LABEL_12:
        if (v9 > -4.50359963e15)
        {
          uint64_t v10 = (uint64_t)(v9 + v9);
          if (v10 >= 1) {
            --v10;
          }
          goto LABEL_41;
        }
        return (int)v9;
      }
LABEL_39:
      if (v9 < 4.50359963e15)
      {
        uint64_t v10 = (uint64_t)(v9 + v9) + 1;
LABEL_41:
        double v9 = (double)(v10 >> 1);
      }
      return (int)v9;
    }
    if (!*(unsigned char *)(a1 + 88)) {
      goto LABEL_9;
    }
    uint64_t v6 = *(void *)(a2 + 408);
    double v7 = 0.0;
    if (v6 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v8 = *(void *)(a2 + 296);
      if (v8 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (v8)
        {
          HIDWORD(v5) = 1079574528;
          double v7 = (double)v6 / (double)v8 * 100.0;
        }
      }
    }
    LODWORD(v5) = *(_DWORD *)(a1 + 92);
    if (v7 < (double)v5)
    {
LABEL_9:
      double v9 = *(double *)(a1 + 8);
      if (v9 >= *(double *)(a1 + 80)) {
        double v9 = *(double *)(a1 + 80);
      }
      if (v9 < 0.0) {
        goto LABEL_12;
      }
      goto LABEL_39;
    }
    return 0;
  }
  return result;
}

void sub_10403E0(uint64_t a1, uint64_t a2, char ****a3)
{
  unint64_t v5 = **(char ***)a2;
  sub_39ECCC((uint64_t)&v222, (long long *)(*(void *)(a2 + 8) + 16));
  unsigned int v163 = v5;
  sub_45E97C(v5, (uint64_t)v196);
  if (v226 == v227 || __p == v199)
  {
    char v7 = (v226 == v227) == (__p == v199);
    uint64_t v8 = __p;
    if (!__p) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (*((void *)&v223 + 1) == *(void *)&v196[16])
  {
    if (v222)
    {
      unint64_t v14 = v223;
      BOOL v15 = v14 < sub_46C760(v222);
      uint64_t v16 = *(void **)v196;
      if (*(void *)v196) {
        goto LABEL_21;
      }
    }
    else
    {
      BOOL v15 = 0;
      uint64_t v16 = *(void **)v196;
      if (*(void *)v196)
      {
LABEL_21:
        unint64_t v17 = *(void *)&v196[8];
        unint64_t v18 = sub_46C760(v16);
        BOOL v19 = v17 < v18;
        if (v17 < v18 && v15)
        {
          uint64_t v21 = sub_46C8EC(v222, v223);
          char v7 = v21 == sub_46C8EC(*(void **)v196, *(uint64_t *)&v196[8]);
          uint64_t v8 = __p;
          if (!__p) {
            goto LABEL_8;
          }
LABEL_7:
          int v199 = v8;
          operator delete(v8);
          goto LABEL_8;
        }
        goto LABEL_262;
      }
    }
    BOOL v19 = 0;
LABEL_262:
    char v7 = v15 ^ v19 ^ 1;
    uint64_t v8 = __p;
    if (__p) {
      goto LABEL_7;
    }
    goto LABEL_8;
  }
  char v7 = 0;
  uint64_t v8 = __p;
  if (__p) {
    goto LABEL_7;
  }
LABEL_8:
  if (*(void *)&v196[24])
  {
    uint64_t v197 = *(void *)&v196[24];
    operator delete(*(void **)&v196[24]);
  }
  if (v7) {
    goto LABEL_267;
  }
  sub_45E97C(v163, (uint64_t)v196);
  sub_39ECCC((uint64_t)&v215, (long long *)v196);
  sub_39ECCC((uint64_t)&v208, (long long *)&v222);
  if (v220 == v221 || v213 == v214)
  {
    if ((v220 == v221) == (v213 == v214)) {
      goto LABEL_283;
    }
    goto LABEL_30;
  }
  if (v217 != v210) {
    goto LABEL_30;
  }
  if (!v215)
  {
    uint64_t v13 = v208;
    if (!v208) {
      goto LABEL_279;
    }
    BOOL v12 = 0;
LABEL_274:
    unint64_t v143 = v209;
    unint64_t v144 = sub_46C760(v13);
    if (v143 >= v144 || !v12)
    {
      if (v12 == v143 < v144) {
        goto LABEL_283;
      }
      goto LABEL_30;
    }
    uint64_t v146 = sub_46C8EC(v215, v216);
    if (v146 != sub_46C8EC(v208, v209)) {
      goto LABEL_30;
    }
LABEL_279:
    uint64_t v22 = 0;
    uint64_t v24 = v213;
    if (!v213) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  unint64_t v10 = v216;
  unint64_t v11 = sub_46C760(v215);
  BOOL v12 = v10 < v11;
  uint64_t v13 = v208;
  if (v208) {
    goto LABEL_274;
  }
  if (v10 >= v11)
  {
LABEL_283:
    uint64_t v22 = 0;
    uint64_t v24 = v213;
    if (!v213) {
      goto LABEL_34;
    }
LABEL_33:
    uint64_t v214 = v24;
    operator delete(v24);
    goto LABEL_34;
  }
LABEL_30:
  uint64_t v22 = 0;
  do
  {
    uint64_t v23 = sub_46CCC8(v215, v216, v9);
    sub_39EBB4(&v215);
    v22 += v23;
  }
  while (!sub_3AA3AC((uint64_t)&v215, (uint64_t)&v208));
  uint64_t v24 = v213;
  if (v213) {
    goto LABEL_33;
  }
LABEL_34:
  if (v211)
  {
    uint64_t v212 = v211;
    operator delete(v211);
  }
  if (v220)
  {
    uint64_t v221 = v220;
    operator delete(v220);
  }
  if (v218)
  {
    long long v219 = v218;
    operator delete(v218);
  }
  if (__p)
  {
    int v199 = __p;
    operator delete(__p);
  }
  if (*(void *)&v196[24])
  {
    uint64_t v197 = *(void *)&v196[24];
    operator delete(*(void **)&v196[24]);
  }
  sub_10928EC((void *)(a1 + 5080));
  sub_1092944(a1 + 5080, v163);
  int64x2_t v206 = 0uLL;
  unint64_t v207 = 0;
  double v26 = *a3;
  unint64_t v25 = a3[1];
  if (*a3 == v25) {
    goto LABEL_264;
  }
  uint64_t v157 = a1;
  while (2)
  {
    sub_109374C((void *)(a1 + 5080), **v26, 0, (uint64_t *)v174);
    char v28 = (char *)v174[1] + 184;
    do
    {
      if (v28 - 184 == v174[0])
      {
        if (!sub_723EC(1u)) {
          goto LABEL_75;
        }
        sub_6BAC((uint64_t)v196);
        unint64_t v30 = sub_188FC78(v196, (uint64_t)"Got a detour that does not avoid the soft-closure incident ", 59);
        uint64_t v31 = ***(void ***)(a2 + 8) + 424 * *(void *)(*(void *)(a2 + 8) + 8);
        uint64_t v34 = *(void *)(v31 + 40);
        uint64_t v32 = v31 + 40;
        uint64_t v33 = v34;
        int v35 = *(char *)(v32 + 23);
        if (v35 >= 0) {
          uint64_t v36 = v32;
        }
        else {
          uint64_t v36 = v33;
        }
        if (v35 >= 0) {
          uint64_t v37 = *(unsigned __int8 *)(v32 + 23);
        }
        else {
          uint64_t v37 = *(void *)(v32 + 8);
        }
        float64x2_t v38 = sub_188FC78(v30, v36, v37);
        uint64_t v39 = sub_188FC78(v38, (uint64_t)". Request: ", 11);
        uint64_t v40 = sub_69510();
        uint64_t v41 = sub_68EE4((uint64_t)v40);
        int v42 = *(char *)(v41 + 23);
        if (v42 >= 0) {
          uint64_t v43 = v41;
        }
        else {
          uint64_t v43 = *(void *)v41;
        }
        if (v42 >= 0) {
          uint64_t v44 = *(unsigned __int8 *)(v41 + 23);
        }
        else {
          uint64_t v44 = *(void *)(v41 + 8);
        }
        sub_188FC78(v39, v43, v44);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v167, 1u);
LABEL_70:
        if (SHIBYTE(v169) < 0) {
          operator delete(v167);
        }
        *(void *)uint64_t v196 = v164;
        *(void *)&v196[*(void *)(v164 - 24)] = v161;
        if (v201 < 0) {
          operator delete((void *)v200);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
LABEL_75:
        unint64_t v45 = (char *)v174[0];
        if (!v174[0]) {
          goto LABEL_48;
        }
        goto LABEL_100;
      }
      uint64_t v29 = *((void *)v28 - 28);
      v28 -= 368;
    }
    while (v29 > v22);
    if (v226 != v227 && (*((void *)v28 + 6) == *((void *)v28 + 7) || v223 < *(_OWORD *)(v28 + 8)))
    {
      if (!sub_723EC(1u)) {
        goto LABEL_75;
      }
      sub_6BAC((uint64_t)v196);
      sub_188FC78(v196, (uint64_t)"Closure starts before the computed detour divergence point.", 59);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v167, 1u);
      goto LABEL_70;
    }
    sub_39ECCC((uint64_t)&v189, (long long *)v28);
    sub_39ECCC((uint64_t)&v182, (long long *)&v222);
    if (v194 == v195 || v187 == v188)
    {
      if ((v194 == v195) == (v187 == v188)) {
        goto LABEL_129;
      }
      goto LABEL_86;
    }
    if (v191 != v184) {
      goto LABEL_86;
    }
    if (!v189)
    {
      unint64_t v49 = v182;
      if (v182)
      {
        BOOL v48 = 0;
LABEL_121:
        unint64_t v71 = v183;
        unint64_t v72 = sub_46C760(v49);
        if (v71 >= v72 || !v48)
        {
          if (v48 == v71 < v72) {
            goto LABEL_129;
          }
          goto LABEL_86;
        }
        uint64_t v74 = sub_46C8EC(v189, v190);
        if (v74 != sub_46C8EC(v182, v183)) {
          goto LABEL_86;
        }
      }
      *(_DWORD *)uint64_t v196 = 0;
      unint64_t v52 = v187;
      if (!v187) {
        goto LABEL_90;
      }
      goto LABEL_89;
    }
    unint64_t v46 = v190;
    unint64_t v47 = sub_46C760(v189);
    BOOL v48 = v46 < v47;
    unint64_t v49 = v182;
    if (v182) {
      goto LABEL_121;
    }
    if (v46 >= v47)
    {
LABEL_129:
      *(_DWORD *)uint64_t v196 = 0;
      unint64_t v52 = v187;
      if (!v187) {
        goto LABEL_90;
      }
LABEL_89:
      unint64_t v188 = v52;
      operator delete(v52);
      goto LABEL_90;
    }
LABEL_86:
    int v50 = 0;
    do
    {
      int v51 = sub_46E19C(v189, v190, 0);
      sub_39EBB4(&v189);
      v50 += v51;
    }
    while (!sub_3AA3AC((uint64_t)&v189, (uint64_t)&v182));
    *(_DWORD *)uint64_t v196 = v50;
    unint64_t v52 = v187;
    if (v187) {
      goto LABEL_89;
    }
LABEL_90:
    if (v185)
    {
      unint64_t v186 = v185;
      operator delete(v185);
    }
    if (v194)
    {
      int v195 = v194;
      operator delete(v194);
    }
    if (v192)
    {
      int v193 = v192;
      operator delete(v192);
    }
    uint64_t v54 = (int *)(v26 + 4);
    long long v53 = *v26;
    uint64_t v55 = v206.i64[1];
    if (v206.i64[1] >= v207)
    {
      unint64_t v60 = sub_10476D4(&v206, v53, v54, (int *)v28 + 42, (uint64_t *)v28 + 18, (int *)v196, (uint64_t)v174);
    }
    else
    {
      int v56 = *v54;
      int v57 = *((_DWORD *)v28 + 42);
      uint64_t v58 = *((void *)v28 + 18);
      int v59 = *(_DWORD *)v196;
      *(void *)v206.i64[1] = *v53;
      *(_DWORD *)(v55 + 8) = v56;
      *(_DWORD *)(v55 + 12) = v57;
      *(void *)(v55 + 16) = v58;
      *(_DWORD *)(v55 + 24) = v59;
      *(_OWORD *)(v55 + 32) = *(_OWORD *)v174;
      *(void *)(v55 + 48) = v175;
      v174[1] = 0;
      unint64_t v175 = 0;
      v174[0] = 0;
      unint64_t v60 = (char *)(v55 + 56);
    }
    v206.i64[1] = (uint64_t)v60;
    unint64_t v45 = (char *)v174[0];
    if (v174[0])
    {
LABEL_100:
      uint64_t v27 = v45;
      if (v174[1] != v45)
      {
        char v61 = (char *)v174[1] - 160;
        do
        {
          unint64_t v63 = (void *)*((void *)v61 + 12);
          if (v63)
          {
            *((void *)v61 + 13) = v63;
            operator delete(v63);
          }
          unint64_t v64 = (void *)*((void *)v61 + 9);
          if (v64)
          {
            *((void *)v61 + 10) = v64;
            operator delete(v64);
          }
          unint64_t v65 = (void *)*((void *)v61 + 3);
          if (v65)
          {
            *((void *)v61 + 4) = v65;
            operator delete(v65);
          }
          char v66 = *(void **)v61;
          if (*(void *)v61)
          {
            *((void *)v61 + 1) = v66;
            operator delete(v66);
          }
          char v67 = (void *)*((void *)v61 - 11);
          if (v67)
          {
            *((void *)v61 - 10) = v67;
            operator delete(v67);
          }
          long long v68 = (void *)*((void *)v61 - 14);
          if (v68)
          {
            *((void *)v61 - 13) = v68;
            operator delete(v68);
          }
          std::string::size_type v69 = (void *)*((void *)v61 - 20);
          if (v69)
          {
            *((void *)v61 - 19) = v69;
            operator delete(v69);
          }
          long long v70 = (void *)*((void *)v61 - 23);
          if (v70)
          {
            *((void *)v61 - 22) = v70;
            operator delete(v70);
          }
          int v62 = v61 - 208;
          v61 -= 368;
        }
        while (v62 != v45);
        uint64_t v27 = (char *)v174[0];
      }
      v174[1] = v45;
      operator delete(v27);
    }
LABEL_48:
    v26 += 5;
    if (v26 != v25) {
      continue;
    }
    break;
  }
  uint64_t v75 = v206.i64[0];
  if (v206.i64[0] == v206.i64[1]) {
    goto LABEL_264;
  }
  for (uint64_t i = v206.i64[0] + 56; i != v206.i64[1]; i += 56)
  {
    int v130 = *(_DWORD *)(i + 8);
    int v131 = *(_DWORD *)(v75 + 8);
    if (v130 < v131 || v130 == v131 && *(_DWORD *)(i + 12) > *(_DWORD *)(v75 + 12)) {
      uint64_t v75 = i;
    }
  }
  if (v75 == v206.i64[1])
  {
LABEL_264:
    *(_DWORD *)(a1 + 196) = 0;
    goto LABEL_265;
  }
  uint64_t v77 = *(void *)(a2 + 8);
  uint64_t v162 = *(void *)(a2 + 16);
  if (v77 != v162)
  {
    uint64_t v78 = (int *)(v75 + 8);
    int v158 = (int *)(v75 + 8);
    uint64_t v159 = v75;
    int v160 = (_DWORD *)(a2 + 32);
    do
    {
      *(void *)uint64_t v196 = **(void **)v77 + 424 * *(void *)(v77 + 8) + 40;
      uint64_t v79 = sub_3A92D0(v157 + 5136, *(uint64_t *)v196, (uint64_t)&unk_20F06E0, (long long **)v196);
      int v80 = v79;
      int v81 = *((_DWORD *)v79 + 22);
      double v82 = v78;
      if (v81 != 0x7FFFFFFF)
      {
        double v82 = (int *)(v79 + 11);
        if (*v78 != 0x7FFFFFFF)
        {
          if (v81 >= *v78) {
            double v82 = v78;
          }
          else {
            double v82 = (int *)(v79 + 11);
          }
        }
      }
      int v83 = *v82;
      *((_DWORD *)v79 + 22) = *v82;
      if (*v78 == v83)
      {
        v79[12] = sub_45FD6C(*(uint64_t **)v75);
        *((_DWORD *)v80 + 26) = *(_DWORD *)(v75 + 12);
        v80[14] = *(void *)(v75 + 16);
      }
      int v181 = 0;
      uint64_t v180 = 0;
      sub_45E97C(v163, (uint64_t)v174);
      sub_3ABA28((long long *)v174, (long long *)(v77 + 16), (uint64_t)v196);
      if (v178)
      {
        double v179 = v178;
        operator delete(v178);
      }
      if (v176)
      {
        uint64_t v177 = v176;
        operator delete(v176);
      }
      sub_39ECCC((uint64_t)v174, (long long *)v196);
      uint64_t v165 = v77;
      sub_39ECCC((uint64_t)&v167, &v200);
      int v84 = v181;
      uint64_t v85 = v180;
LABEL_149:
      if (v178 == v179 || v172 == v173)
      {
        if ((v178 == v179) != (v172 == v173)) {
          goto LABEL_168;
        }
        goto LABEL_184;
      }
      if (v175 != v169) {
        goto LABEL_168;
      }
      if (v174[0])
      {
        double v87 = v174[1];
        int v88 = (unint64_t)v87 < sub_46C760((void *)v174[0]);
        long long v89 = v167;
        if (!v167) {
          goto LABEL_166;
        }
      }
      else
      {
        int v88 = 0;
        long long v89 = v167;
        if (!v167)
        {
LABEL_166:
          int v92 = 0;
          goto LABEL_167;
        }
      }
      unint64_t v90 = v168;
      unint64_t v91 = sub_46C760(v89);
      int v92 = v90 < v91;
      if (v90 < v91) {
        int v93 = v88;
      }
      else {
        int v93 = 0;
      }
      if (v93 == 1)
      {
        uint64_t v94 = sub_46C8EC((void *)v174[0], (uint64_t)v174[1]);
        if (v94 != sub_46C8EC(v167, v168)) {
          goto LABEL_168;
        }
        goto LABEL_184;
      }
LABEL_167:
      if (v88 != v92)
      {
LABEL_168:
        v84 += sub_46E19C((void *)v174[0], (uint64_t)v174[1], 0);
        v85 += sub_46CCC8((void *)v174[0], (unint64_t)v174[1], v95);
        unint64_t v96 = v175;
        ++v174[1];
        while (1)
        {
          uint64_t v97 = (char *)v178;
          if (v96 >= ((v179 - (unsigned char *)v178) >> 4) - 1) {
            goto LABEL_149;
          }
          double v98 = (void **)((char *)v178 + 16 * v96);
          if (v174[0])
          {
            double v99 = v174[1];
            unint64_t v100 = sub_46C760((void *)v174[0]);
            BOOL v101 = (unint64_t)v99 < v100;
            long long v102 = *v98;
            if (!*v98)
            {
              if ((unint64_t)v99 < v100) {
                goto LABEL_149;
              }
              goto LABEL_170;
            }
          }
          else
          {
            long long v102 = *v98;
            if (!*v98) {
              goto LABEL_170;
            }
            BOOL v101 = 0;
          }
          unint64_t v103 = &v97[16 * v96];
          unint64_t v106 = *((void *)v103 + 1);
          unsigned int v105 = (uint64_t *)(v103 + 8);
          unint64_t v104 = v106;
          unint64_t v107 = sub_46C760(v102);
          if (v106 < v107 && v101)
          {
            uint64_t v109 = sub_46C8EC((void *)v174[0], (uint64_t)v174[1]);
            if (v109 != sub_46C8EC(*v98, *v105)) {
              goto LABEL_149;
            }
          }
          else if ((v101 ^ (v104 < v107)))
          {
            goto LABEL_149;
          }
LABEL_170:
          unint64_t v96 = v175 + 1;
          unint64_t v175 = v96;
          *(_OWORD *)double v174 = *((_OWORD *)v176 + v96);
        }
      }
LABEL_184:
      int v181 = v84;
      uint64_t v180 = v85;
      if (v172)
      {
        std::string v173 = v172;
        operator delete(v172);
      }
      if (v170)
      {
        uint64_t v171 = v170;
        operator delete(v170);
      }
      if (v178)
      {
        double v179 = v178;
        operator delete(v178);
      }
      if (v176)
      {
        uint64_t v177 = v176;
        operator delete(v176);
      }
      if (v204)
      {
        long long v205 = v204;
        operator delete(v204);
      }
      if (v202)
      {
        unint64_t v203 = v202;
        operator delete(v202);
      }
      if (__p)
      {
        int v199 = __p;
        operator delete(__p);
      }
      if (*(void *)&v196[24])
      {
        uint64_t v197 = *(void *)&v196[24];
        operator delete(*(void **)&v196[24]);
      }
      unint64_t v110 = (int *)(v80 + 15);
      int v111 = *((_DWORD *)v80 + 30);
      if (v111 == 0x7FFFFFFF)
      {
        unint64_t v110 = &v181;
      }
      else if (v84 != 0x7FFFFFFF && v111 >= v84)
      {
        unint64_t v110 = &v181;
      }
      int v112 = *v110;
      uint64_t v113 = v80 + 16;
      uint64_t v114 = v80[16];
      *((_DWORD *)v80 + 30) = v112;
      if (v114 == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v113 = &v180;
      }
      else if (v85 != 0x7FFFFFFFFFFFFFFFLL && v114 >= v85)
      {
        uint64_t v113 = &v180;
      }
      int v115 = *((_DWORD *)v80 + 34);
      v80[16] = *v113;
      int v116 = (_DWORD *)(a2 + 32);
      if (v115 != 0x7FFFFFFF)
      {
        int v116 = v80 + 17;
        if (*v160 != 0x7FFFFFFF)
        {
          if (v115 >= *v160) {
            int v116 = (_DWORD *)(a2 + 32);
          }
          else {
            int v116 = v80 + 17;
          }
        }
      }
      *((_DWORD *)v80 + 34) = *v116;
      uint64_t v117 = sub_45FD6C(**(uint64_t ***)a2);
      *(void *)uint64_t v196 = v117;
      uint64_t v118 = v80[18];
      if (v118 == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v119 = (uint64_t *)v196;
      }
      else
      {
        uint64_t v119 = v80 + 18;
        if (v117 != 0x7FFFFFFFFFFFFFFFLL)
        {
          if (v118 >= v117) {
            uint64_t v119 = (uint64_t *)v196;
          }
          else {
            uint64_t v119 = v80 + 18;
          }
        }
      }
      v80[18] = *v119;
      uint64_t v121 = v206.i64[1];
      uint64_t v120 = v206.i64[0];
      if (v206.i64[0] != v206.i64[1])
      {
        uint64_t v122 = v80 + 21;
        do
        {
          uint64_t v124 = *(void *)(v120 + 32);
          uint64_t v123 = *(void *)(v120 + 40);
          while (v123 != v124)
          {
            uint64_t v125 = *(void *)(v123 - 40);
            v123 -= 368;
            if (v125 <= v85) {
              goto LABEL_229;
            }
          }
          uint64_t v125 = *(void *)(v124 - 40);
LABEL_229:
          uint64_t v126 = v85 - v125;
          *(void *)uint64_t v196 = v85 - v125;
          if (*v122 >= v85 - v125) {
            unsigned __int16 v127 = (uint64_t *)v196;
          }
          else {
            unsigned __int16 v127 = v80 + 21;
          }
          if (v126 == 0x7FFFFFFFFFFFFFFFLL) {
            unsigned __int16 v127 = v80 + 21;
          }
          if (*v122 == 0x7FFFFFFFFFFFFFFFLL) {
            long long v128 = (uint64_t *)v196;
          }
          else {
            long long v128 = v127;
          }
          uint64_t v129 = *v128;
          *uint64_t v122 = v129;
          if (v129 == v126)
          {
            *((_DWORD *)v80 + 38) = *(_DWORD *)(v120 + 8);
            v80[20] = sub_45FD6C(*(uint64_t **)v120);
          }
          v120 += 56;
        }
        while (v120 != v121);
      }
      uint64_t v77 = v165 + 160;
      uint64_t v78 = v158;
      uint64_t v75 = v159;
    }
    while (v165 + 160 != v162);
  }
  if (*(unsigned char *)(v157 + 160))
  {
    int v132 = *(uint64_t ***)a2;
    if (!*(unsigned char *)(v157 + 176) || *((double *)v132 + 94) < *(double *)(v157 + 8))
    {
      if (*(_DWORD *)(v75 + 12) >= *(_DWORD *)(v157 + 164))
      {
        v132[94] = 0;
      }
      else
      {
        if (*(_DWORD *)(v75 + 8) <= *(_DWORD *)(a2 + 32))
        {
          double v147 = *(double *)(v157 + 8);
          goto LABEL_300;
        }
        uint64_t v134 = v206.i64[1];
        uint64_t v133 = v206.i64[0];
        if (v206.i64[0] != v206.i64[1])
        {
LABEL_251:
          int v135 = *(_DWORD *)(v75 + 24);
          while (*(_DWORD *)(v133 + 24) >= v135)
          {
            v133 += 56;
            if (v133 == v134)
            {
              uint64_t v133 = v134;
              goto LABEL_286;
            }
          }
          uint64_t v136 = v134;
          while (1)
          {
            uint64_t v134 = v136 - 56;
            if (v136 - 56 == v133) {
              break;
            }
            int v137 = *(_DWORD *)(v136 - 32);
            v136 -= 56;
            if (v137 >= v135)
            {
              long long v138 = *(_OWORD *)v133;
              *(_OWORD *)&v196[12] = *(_OWORD *)(v133 + 12);
              *(_OWORD *)uint64_t v196 = v138;
              uint64_t v139 = *(void *)(v133 + 48);
              long long v140 = *(_OWORD *)(v133 + 32);
              *(void *)(v133 + 32) = 0;
              *(void *)(v133 + 40) = 0;
              *(void *)(v133 + 48) = 0;
              long long v141 = *(_OWORD *)v134;
              *(_OWORD *)(v133 + 12) = *(_OWORD *)(v134 + 12);
              *(_OWORD *)uint64_t v133 = v141;
              *(_OWORD *)(v133 + 32) = *(_OWORD *)(v134 + 32);
              *(void *)(v133 + 48) = *(void *)(v134 + 48);
              long long v142 = *(_OWORD *)v196;
              *(_OWORD *)(v134 + 12) = *(_OWORD *)&v196[12];
              *(_OWORD *)uint64_t v134 = v142;
              *(_OWORD *)(v134 + 32) = v140;
              *(void *)(v134 + 48) = v139;
              v133 += 56;
              if (v134 != v133) {
                goto LABEL_251;
              }
              break;
            }
          }
        }
LABEL_286:
        uint64_t v148 = v133 + 56;
        if (v133 != v206.i64[1] && v148 != v206.i64[1])
        {
          do
          {
            int v155 = *(_DWORD *)(v148 + 8);
            int v156 = *(_DWORD *)(v133 + 8);
            if (v155 < v156 || v155 == v156 && *(_DWORD *)(v148 + 12) > *(_DWORD *)(v133 + 12)) {
              uint64_t v133 = v148;
            }
            v148 += 56;
          }
          while (v148 != v206.i64[1]);
        }
        if (v133 == v206.i64[1])
        {
          if (*(_DWORD *)(v75 + 24)) {
            *(unsigned char *)(v157 + 200) = 1;
          }
        }
        else
        {
          double v150 = (double)*(int *)(***(void ***)(a2 + 8) + 424 * *(void *)(*(void *)(a2 + 8) + 8) + 316);
          double v147 = *(double *)(v157 + 8);
          if (v147 < v150) {
            double v150 = *(double *)(v157 + 8);
          }
          double v151 = *((double *)v132 + 94);
          if (v151 < 1.0) {
            double v151 = 1.0;
          }
          double v152 = v150 / v151;
          double v153 = (double)*(int *)(v133 + 12);
          if (*(_DWORD *)(v133 + 8) - *(_DWORD *)(v75 + 8) <= 1) {
            int v154 = 1;
          }
          else {
            int v154 = *(_DWORD *)(v133 + 8) - *(_DWORD *)(v75 + 8);
          }
          if (v153 / (double)v154 >= *(double *)(v157 + 168) / v152)
          {
            v132[94] = 0;
            *(unsigned char *)(v157 + 201) = 1;
          }
          else
          {
LABEL_300:
            *((double *)v132 + 94) = v147;
          }
        }
      }
    }
  }
LABEL_265:
  if (v206.i64[0])
  {
    sub_1044628((uint64_t)&v206, v206.i64[0]);
    operator delete((void *)v206.i64[0]);
  }
LABEL_267:
  if (v226)
  {
    long long v227 = v226;
    operator delete(v226);
  }
  if (v224)
  {
    uint64_t v225 = v224;
    operator delete(v224);
  }
}

void sub_1041428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  sub_39EB70(&STACK[0x2B8]);
  sub_39EB70((void *)(v59 - 240));
  sub_39EB70(&a59);
  sub_39EB70((void *)(v59 - 168));
  _Unwind_Resume(a1);
}

void sub_10415DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  sub_39EB70(&a20);
  sub_39EB70(&a29);
  sub_39EB0C(&a59);
  sub_1044548((uint64_t *)&STACK[0x2A0]);
  sub_39EB70((void *)(v59 - 168));
  _Unwind_Resume(a1);
}

BOOL sub_1041610(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 16)) {
    return 0;
  }
  int v3 = sub_104011C(a1, a2);
  double v4 = *(double *)(a1 + 8);
  if (v4 >= 0.0)
  {
    if (v4 < 4.50359963e15)
    {
      uint64_t v5 = (uint64_t)(v4 + v4) + 1;
LABEL_10:
      double v4 = (double)(v5 >> 1);
    }
  }
  else if (v4 > -4.50359963e15)
  {
    uint64_t v5 = (uint64_t)(v4 + v4);
    if (v5 >= 1) {
      --v5;
    }
    goto LABEL_10;
  }
  return v3 >= (int)v4;
}

void sub_10416AC(char **a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char **a6@<X8>)
{
  if (sub_45FB38(*a1))
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    return;
  }
  uint64_t v213 = 0;
  uint64_t v214 = 0;
  unint64_t v215 = 0;
  double v9 = a1[21];
  unint64_t v10 = a1[22];
  if (v9 == v10)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    return;
  }
  uint64_t v134 = a6;
  do
  {
    sub_104409C(&v213, 0x6DB6DB6DB6DB6DB7 * ((v214 - v213) >> 3)- 0x3333333333333333 * ((uint64_t)(*((void *)v9 + 1) - *(void *)v9) >> 4));
    uint64_t v12 = *(void *)v9;
    uint64_t v11 = *((void *)v9 + 1);
    if (*(void *)v9 != v11)
    {
      uint64_t v13 = v214;
      do
      {
        uint64_t v142 = v12;
        long long v143 = 0u;
        long long v144 = 0u;
        long long v145 = 0u;
        unint64_t v14 = sub_10470C4(&v213, v13, (uint64_t)&v142);
        if (*((void *)&v144 + 1))
        {
          *(void *)&long long v145 = *((void *)&v144 + 1);
          operator delete(*((void **)&v144 + 1));
        }
        uint64_t v13 = v14 + 56;
        v12 += 80;
      }
      while (v12 != v11);
    }
    v9 += 72;
  }
  while (v9 != v10);
  BOOL v15 = v214;
  if (v213 == v214)
  {
    *uint64_t v134 = 0;
    v134[1] = 0;
    v134[2] = 0;
    if (!v15) {
      return;
    }
    goto LABEL_312;
  }
  uint64_t v16 = sub_45FC7C(*a1);
  uint64_t v210 = 0;
  unsigned int v211 = 0;
  uint64_t v212 = 0;
  sub_45EC9C(*a1, (uint64_t)&v142);
  uint64_t v137 = v16 - 1;
  unint64_t v135 = a3;
  do
  {
    sub_45EE00(*a1, (uint64_t)&v198);
    char v17 = sub_10441E4((uint64_t)&v142, (uint64_t)&v198);
    if ((void)v208)
    {
      *((void *)&v208 + 1) = v208;
      operator delete((void *)v208);
    }
    if ((void)v206)
    {
      *((void *)&v206 + 1) = v206;
      operator delete((void *)v206);
    }
    if ((void)v202)
    {
      *((void *)&v202 + 1) = v202;
      operator delete((void *)v202);
    }
    if ((void)v200)
    {
      *((void *)&v200 + 1) = v200;
      operator delete((void *)v200);
    }
    if ((v17 & 1) == 0) {
      break;
    }
    uint64_t v18 = sub_480830((uint64_t)&v142);
    sub_3F4E6C(a4, v18, (uint64_t)&v196);
    BOOL v19 = v196;
    if (v196 != v197)
    {
      while (1)
      {
        sub_45EE00(*a1, (uint64_t)&v198);
        if (sub_10441E4((uint64_t)&v142, (uint64_t)&v198))
        {
          uint64_t v22 = sub_480830((uint64_t)&v142);
          sub_3F4E6C(a4, v22, (uint64_t)&v189);
          BOOL v23 = v189 != v190;
          if (v189)
          {
            unint64_t v190 = v189;
            operator delete(v189);
          }
        }
        else
        {
          BOOL v23 = 0;
        }
        if ((void)v208)
        {
          *((void *)&v208 + 1) = v208;
          operator delete((void *)v208);
        }
        if ((void)v206)
        {
          *((void *)&v206 + 1) = v206;
          operator delete((void *)v206);
        }
        if ((void)v202)
        {
          *((void *)&v202 + 1) = v202;
          operator delete((void *)v202);
        }
        if ((void)v200)
        {
          *((void *)&v200 + 1) = v200;
          operator delete((void *)v200);
        }
        if (!v23) {
          break;
        }
        uint64_t v24 = v148;
        if (v148)
        {
          do
          {
            double v26 = (char *)v149;
            uint64_t v27 = (void **)((char *)v149 + 16 * v24);
            if ((void)v147)
            {
              unint64_t v28 = *((void *)&v147 + 1);
              unint64_t v29 = sub_46C760((void *)v147);
              BOOL v30 = v28 < v29;
              uint64_t v31 = *v27;
              if (!*v27)
              {
                if (v28 < v29) {
                  break;
                }
                goto LABEL_42;
              }
            }
            else
            {
              uint64_t v31 = *v27;
              if (!*v27) {
                goto LABEL_42;
              }
              BOOL v30 = 0;
            }
            uint64_t v32 = &v26[16 * v24];
            unint64_t v35 = *((void *)v32 + 1);
            uint64_t v34 = (uint64_t *)(v32 + 8);
            unint64_t v33 = v35;
            unint64_t v36 = sub_46C760(v31);
            if (v35 < v36 && v30)
            {
              uint64_t v38 = sub_46C8EC((void *)v147, *((uint64_t *)&v147 + 1));
              if (v38 != sub_46C8EC(*v27, *v34)) {
                break;
              }
            }
            else if ((v30 ^ (v33 < v36)))
            {
              break;
            }
LABEL_42:
            uint64_t v24 = v148 - 1;
            BOOL v25 = v148 == 1;
            uint64_t v148 = v24;
            long long v147 = *((_OWORD *)v151 + v24);
          }
          while (!v25);
        }
        --*((void *)&v147 + 1);
      }
      sub_45EE00(*a1, (uint64_t)&v198);
      int v39 = sub_1044364((uint64_t)&v142, (uint64_t)&v198);
      if ((void)v208)
      {
        *((void *)&v208 + 1) = v208;
        operator delete((void *)v208);
      }
      if ((void)v206)
      {
        *((void *)&v206 + 1) = v206;
        operator delete((void *)v206);
      }
      if ((void)v202)
      {
        *((void *)&v202 + 1) = v202;
        operator delete((void *)v202);
      }
      if ((void)v200)
      {
        *((void *)&v200 + 1) = v200;
        operator delete((void *)v200);
      }
      if (v39)
      {
        int v20 = 4;
        uint64_t v21 = v196;
        if (!v196) {
          continue;
        }
        goto LABEL_214;
      }
      uint64_t v40 = v213;
      uint64_t v41 = v214;
      if (v213 != v214)
      {
        uint64_t v42 = *(void *)*v19 + 424 * v19[1];
        uint64_t v43 = (unsigned __int8 **)(v42 + 40);
        unsigned __int8 v44 = *(unsigned char *)(v42 + 63);
        uint64_t v45 = *(void *)(v42 + 48);
        if ((v44 & 0x80u) == 0) {
          uint64_t v46 = v44;
        }
        else {
          uint64_t v46 = v45;
        }
        if ((v44 & 0x80) != 0)
        {
          while (1)
          {
            int v51 = *(const void ***)v40;
            uint64_t v52 = *(unsigned __int8 *)(*(void *)v40 + 23);
            if ((v52 & 0x80u) == 0) {
              uint64_t v53 = *(unsigned __int8 *)(*(void *)v40 + 23);
            }
            else {
              uint64_t v53 = *(void *)(*(void *)v40 + 8);
            }
            if (v53 == v46)
            {
              uint64_t v54 = *v43;
              if ((v52 & 0x80) != 0)
              {
                if (!memcmp(*v51, v54, *(void *)(*(void *)v40 + 8))) {
                  goto LABEL_94;
                }
              }
              else
              {
                if (!*(unsigned char *)(*(void *)v40 + 23)) {
                  goto LABEL_94;
                }
                while (*(unsigned __int8 *)v51 == *v54)
                {
                  int v51 = (const void **)((char *)v51 + 1);
                  ++v54;
                  if (!--v52) {
                    goto LABEL_94;
                  }
                }
              }
            }
            v40 += 56;
            if (v40 == v41) {
              goto LABEL_212;
            }
          }
        }
        while (1)
        {
          unint64_t v47 = *(const void ***)v40;
          uint64_t v48 = *(unsigned __int8 *)(*(void *)v40 + 23);
          if ((v48 & 0x80u) == 0) {
            uint64_t v49 = *(unsigned __int8 *)(*(void *)v40 + 23);
          }
          else {
            uint64_t v49 = *(void *)(*(void *)v40 + 8);
          }
          if (v49 == v46)
          {
            if ((v48 & 0x80) != 0)
            {
              if (!memcmp(*v47, v43, *(void *)(*(void *)v40 + 8))) {
                break;
              }
            }
            else
            {
              if (!*(unsigned char *)(*(void *)v40 + 23)) {
                break;
              }
              int v50 = (unsigned __int8 *)v43;
              while (*(unsigned __int8 *)v47 == *v50)
              {
                unint64_t v47 = (const void **)((char *)v47 + 1);
                ++v50;
                if (!--v48) {
                  goto LABEL_94;
                }
              }
            }
          }
          v40 += 56;
          if (v40 == v41) {
            goto LABEL_212;
          }
        }
      }
LABEL_94:
      if (v40 == v41)
      {
LABEL_212:
        sub_480720((void **)&v147);
        int v20 = 5;
      }
      else
      {
        uint64_t v55 = 0;
        *(_OWORD *)(v40 + 8) = *(_OWORD *)v19;
        uint64_t v136 = (void **)(v40 + 32);
        long long v138 = v40;
        while (1)
        {
          sub_45EE00(*a1, (uint64_t)&v198);
          int v20 = sub_10441E4((uint64_t)&v142, (uint64_t)&v198);
          if ((void)v208)
          {
            *((void *)&v208 + 1) = v208;
            operator delete((void *)v208);
          }
          if ((void)v206)
          {
            *((void *)&v206 + 1) = v206;
            operator delete((void *)v206);
          }
          if ((void)v202)
          {
            *((void *)&v202 + 1) = v202;
            operator delete((void *)v202);
          }
          if ((void)v200)
          {
            *((void *)&v200 + 1) = v200;
            operator delete((void *)v200);
          }
          if (!v20) {
            break;
          }
          if (v55 >= a2 && v135 <= (uint64_t)(*((void *)v40 + 5) - *((void *)v40 + 4)) >> 3) {
            goto LABEL_238;
          }
          uint64_t v56 = sub_480830((uint64_t)&v142);
          sub_3F4E6C(a4, v56, (uint64_t)&v198);
          long long v57 = v198;
          if ((void)v198)
          {
            *((void *)&v198 + 1) = v198;
            operator delete((void *)v198);
          }
          if ((void)v57 != *((void *)&v57 + 1))
          {
LABEL_238:
            int v20 = 0;
            uint64_t v21 = v196;
            if (!v196) {
              goto LABEL_215;
            }
LABEL_214:
            uint64_t v197 = v21;
            operator delete(v21);
            goto LABEL_215;
          }
          sub_39ECCC((uint64_t)&v177, (long long *)&v142);
          sub_39ECCC((uint64_t)&v183, &v147);
          uint64_t v58 = v184;
          if (v184)
          {
            do
            {
              uint64_t v59 = v185;
              unint64_t v60 = (void **)(v185 + 16 * v58);
              if ((void)v183)
              {
                unint64_t v61 = *((void *)&v183 + 1);
                unint64_t v62 = sub_46C760((void *)v183);
                BOOL v63 = v61 < v62;
                unint64_t v64 = *v60;
                if (!*v60)
                {
                  if (v61 < v62) {
                    break;
                  }
                  goto LABEL_114;
                }
              }
              else
              {
                unint64_t v64 = *v60;
                if (!*v60) {
                  goto LABEL_114;
                }
                BOOL v63 = 0;
              }
              uint64_t v65 = v59 + 16 * v58;
              unint64_t v68 = *(void *)(v65 + 8);
              char v67 = (uint64_t *)(v65 + 8);
              unint64_t v66 = v68;
              unint64_t v69 = sub_46C760(v64);
              if (v68 < v69 && v63)
              {
                uint64_t v71 = sub_46C8EC((void *)v183, *((uint64_t *)&v183 + 1));
                if (v71 != sub_46C8EC(*v60, *v67)) {
                  break;
                }
              }
              else if ((v63 ^ (v66 < v69)))
              {
                break;
              }
LABEL_114:
              uint64_t v58 = v184 - 1;
              BOOL v25 = v184 == 1;
              uint64_t v184 = v58;
              long long v183 = *(_OWORD *)(v187 + 16 * v58);
            }
            while (!v25);
          }
          --*((void *)&v183 + 1);
          uint64_t v199 = v178;
          uint64_t v201 = v180;
          uint64_t v205 = v184;
          uint64_t v203 = v182;
          uint64_t v207 = v186;
          long long v198 = v177;
          long long v200 = v179;
          uint64_t v180 = 0;
          long long v179 = 0uLL;
          long long v202 = v181;
          uint64_t v182 = 0;
          long long v181 = 0uLL;
          long long v204 = v183;
          long long v206 = v185;
          long long v185 = 0uLL;
          uint64_t v186 = 0;
          long long v208 = v187;
          uint64_t v209 = v188;
          long long v187 = 0uLL;
          uint64_t v188 = 0;
          sub_39ECCC((uint64_t)&v189, &v204);
          uint64_t v72 = v191;
          if (v194)
          {
            int v195 = v194;
            operator delete(v194);
          }
          if (v192)
          {
            int v193 = v192;
            operator delete(v192);
          }
          if ((void)v208)
          {
            *((void *)&v208 + 1) = v208;
            operator delete((void *)v208);
          }
          if ((void)v206)
          {
            *((void *)&v206 + 1) = v206;
            operator delete((void *)v206);
          }
          if ((void)v202)
          {
            *((void *)&v202 + 1) = v202;
            operator delete((void *)v202);
          }
          if ((void)v200)
          {
            *((void *)&v200 + 1) = v200;
            operator delete((void *)v200);
          }
          if ((void)v187)
          {
            *((void *)&v187 + 1) = v187;
            operator delete((void *)v187);
          }
          if ((void)v185)
          {
            *((void *)&v185 + 1) = v185;
            operator delete((void *)v185);
          }
          if ((void)v181)
          {
            *((void *)&v181 + 1) = v181;
            operator delete((void *)v181);
          }
          if ((void)v179)
          {
            *((void *)&v179 + 1) = v179;
            operator delete((void *)v179);
          }
          if (v72 != v137)
          {
            sub_39ECCC((uint64_t)&v165, (long long *)&v142);
            sub_39ECCC((uint64_t)&v171, &v147);
            sub_480720((void **)&v171);
            long long v198 = v165;
            long long v200 = v167;
            uint64_t v199 = v166;
            uint64_t v201 = v168;
            uint64_t v168 = 0;
            long long v167 = 0uLL;
            long long v202 = v169;
            uint64_t v205 = v172;
            uint64_t v108 = v170;
            uint64_t v170 = 0;
            long long v169 = 0uLL;
            long long v204 = v171;
            long long v206 = v173;
            uint64_t v203 = v108;
            uint64_t v207 = v174;
            long long v173 = 0uLL;
            uint64_t v174 = 0;
            long long v208 = v175;
            uint64_t v209 = v176;
            long long v175 = 0uLL;
            uint64_t v176 = 0;
            sub_39ECCC((uint64_t)&v189, &v204);
            uint64_t v137 = v191;
            if (v194)
            {
              int v195 = v194;
              operator delete(v194);
            }
            if (v192)
            {
              int v193 = v192;
              operator delete(v192);
            }
            if ((void)v208)
            {
              *((void *)&v208 + 1) = v208;
              operator delete((void *)v208);
            }
            if ((void)v206)
            {
              *((void *)&v206 + 1) = v206;
              operator delete((void *)v206);
            }
            if ((void)v202)
            {
              *((void *)&v202 + 1) = v202;
              operator delete((void *)v202);
            }
            if ((void)v200)
            {
              *((void *)&v200 + 1) = v200;
              operator delete((void *)v200);
            }
            if ((void)v175)
            {
              *((void *)&v175 + 1) = v175;
              operator delete((void *)v175);
            }
            if ((void)v173)
            {
              *((void *)&v173 + 1) = v173;
              operator delete((void *)v173);
            }
            if ((void)v169)
            {
              *((void *)&v169 + 1) = v169;
              operator delete((void *)v169);
            }
            if ((void)v167)
            {
              *((void *)&v167 + 1) = v167;
              operator delete((void *)v167);
            }
            goto LABEL_238;
          }
          double v73 = (int **)sub_480830((uint64_t)&v142);
          uint64_t v74 = (unsigned int *)sub_2E4738(v73);
          sub_2E45D4(a5, v74, (uint64_t)&v210, 0, 0, 0);
          uint64_t v75 = v210;
          uint64_t v76 = (char *)v211;
          if (v210 == v211)
          {
            uint64_t v76 = (char *)v210;
          }
          else
          {
            uint64_t v77 = v210;
            while (1)
            {
              uint64_t v78 = (char *)*v77;
              uint64_t v79 = (unsigned __int16 *)((char *)*v77 - **v77);
              unsigned int v80 = *v79;
              if (!*((unsigned char *)v77 + 38)) {
                break;
              }
              if (v80 < 0xB) {
                goto LABEL_158;
              }
              unsigned int v81 = v79[5];
              if (!v81 || (*(_DWORD *)&v78[v81] & 2) == 0) {
                goto LABEL_158;
              }
LABEL_149:
              v77 += 5;
              if (v77 == v211) {
                goto LABEL_175;
              }
            }
            if (v80 >= 0xB)
            {
              unsigned int v82 = v79[5];
              if (v82)
              {
                if (*(_DWORD *)&v78[v82]) {
                  goto LABEL_149;
                }
              }
            }
LABEL_158:
            if (v77 != v211)
            {
              for (uint64_t i = v77 + 5; i != (int **)v76; i += 5)
              {
                int v86 = (char *)*i;
                double v87 = (unsigned __int16 *)((char *)*i - **i);
                unsigned int v88 = *v87;
                if (*((unsigned char *)i + 38))
                {
                  if (v88 >= 0xB)
                  {
                    unsigned int v89 = v87[5];
                    if (v89)
                    {
                      if ((*(_DWORD *)&v86[v89] & 2) != 0) {
                        goto LABEL_160;
                      }
                    }
                  }
                }
                else if (v88 >= 0xB)
                {
                  unsigned int v90 = v87[5];
                  if (v90)
                  {
                    if (*(_DWORD *)&v86[v90])
                    {
LABEL_160:
                      long long v84 = *(_OWORD *)i;
                      long long v85 = *((_OWORD *)i + 1);
                      v77[4] = i[4];
                      *(_OWORD *)uint64_t v77 = v84;
                      *((_OWORD *)v77 + 1) = v85;
                      v77 += 5;
                      continue;
                    }
                  }
                }
              }
            }
            if (v77 != (int **)v76)
            {
              uint64_t v76 = (char *)v77;
              unsigned int v211 = v77;
            }
          }
LABEL_175:
          if (0xCCCCCCCCCCCCCCCDLL * ((v76 - v75) >> 3) >= 2)
          {
            unint64_t v91 = (int **)sub_480830((uint64_t)&v142);
            *(void *)&long long v198 = sub_2E4738(v91);
            sub_29603C(v136, &v198);
          }
          sub_39ECCC((uint64_t)&v153, (long long *)&v142);
          sub_39ECCC((uint64_t)&v159, &v147);
          uint64_t v92 = v160;
          if (v160)
          {
            do
            {
              uint64_t v93 = v161;
              uint64_t v94 = (void **)(v161 + 16 * v92);
              if ((void)v159)
              {
                unint64_t v95 = *((void *)&v159 + 1);
                unint64_t v96 = sub_46C760((void *)v159);
                BOOL v97 = v95 < v96;
                double v98 = *v94;
                if (!*v94)
                {
                  if (v95 < v96) {
                    break;
                  }
                  goto LABEL_180;
                }
              }
              else
              {
                double v98 = *v94;
                if (!*v94) {
                  goto LABEL_180;
                }
                BOOL v97 = 0;
              }
              uint64_t v99 = v93 + 16 * v92;
              unint64_t v102 = *(void *)(v99 + 8);
              BOOL v101 = (uint64_t *)(v99 + 8);
              unint64_t v100 = v102;
              unint64_t v103 = sub_46C760(v98);
              if (v102 < v103 && v97)
              {
                uint64_t v105 = sub_46C8EC((void *)v159, *((uint64_t *)&v159 + 1));
                if (v105 != sub_46C8EC(*v94, *v101)) {
                  break;
                }
              }
              else if ((v97 ^ (v100 < v103)))
              {
                break;
              }
LABEL_180:
              uint64_t v92 = v160 - 1;
              BOOL v25 = v160 == 1;
              uint64_t v160 = v92;
              long long v159 = *(_OWORD *)(v163 + 16 * v92);
            }
            while (!v25);
          }
          --*((void *)&v159 + 1);
          uint64_t v199 = v154;
          uint64_t v201 = v156;
          uint64_t v205 = v160;
          uint64_t v203 = v158;
          uint64_t v207 = v162;
          long long v198 = v153;
          long long v200 = v155;
          uint64_t v156 = 0;
          long long v155 = 0uLL;
          long long v202 = v157;
          uint64_t v158 = 0;
          long long v157 = 0uLL;
          long long v204 = v159;
          long long v206 = v161;
          long long v161 = 0uLL;
          uint64_t v162 = 0;
          long long v208 = v163;
          uint64_t v209 = v164;
          long long v163 = 0uLL;
          uint64_t v164 = 0;
          sub_39ECCC((uint64_t)&v189, &v204);
          uint64_t v107 = sub_46CCC8(v189, (unint64_t)v190, v106);
          if (v194)
          {
            int v195 = v194;
            operator delete(v194);
          }
          uint64_t v40 = v138;
          if (v192)
          {
            int v193 = v192;
            operator delete(v192);
          }
          if ((void)v208)
          {
            *((void *)&v208 + 1) = v208;
            operator delete((void *)v208);
          }
          if ((void)v206)
          {
            *((void *)&v206 + 1) = v206;
            operator delete((void *)v206);
          }
          if ((void)v202)
          {
            *((void *)&v202 + 1) = v202;
            operator delete((void *)v202);
          }
          if ((void)v200)
          {
            *((void *)&v200 + 1) = v200;
            operator delete((void *)v200);
          }
          if ((void)v163)
          {
            *((void *)&v163 + 1) = v163;
            operator delete((void *)v163);
          }
          if ((void)v161)
          {
            *((void *)&v161 + 1) = v161;
            operator delete((void *)v161);
          }
          if ((void)v157)
          {
            *((void *)&v157 + 1) = v157;
            operator delete((void *)v157);
          }
          if ((void)v155)
          {
            *((void *)&v155 + 1) = v155;
            operator delete((void *)v155);
          }
          v55 += v107;
          sub_480720((void **)&v147);
        }
      }
      uint64_t v21 = v196;
      if (!v196) {
        continue;
      }
      goto LABEL_214;
    }
    sub_480720((void **)&v147);
    int v20 = 5;
    uint64_t v21 = v196;
    if (v196) {
      goto LABEL_214;
    }
LABEL_215:
    ;
  }
  while (!v20 || v20 == 5);
  if (v151)
  {
    double v152 = v151;
    operator delete(v151);
  }
  if (v149)
  {
    double v150 = v149;
    operator delete(v149);
  }
  if (*((void *)&v145 + 1))
  {
    uint64_t v146 = *((void *)&v145 + 1);
    operator delete(*((void **)&v145 + 1));
  }
  if ((void)v144)
  {
    *((void *)&v144 + 1) = v144;
    operator delete((void *)v144);
  }
  uint64_t v109 = v213;
  unint64_t v110 = v214;
  if (v213 == v214)
  {
    uint64_t v124 = v213;
  }
  else
  {
    do
    {
      uint64_t v113 = (void *)*((void *)v109 + 1);
      if ((!v113
         || *((void *)v109 + 2) >= (unint64_t)(0x21CFB2B78C13521DLL * ((uint64_t)(v113[1] - *v113) >> 3)))
        && sub_723EC(1u))
      {
        sub_6BAC((uint64_t)&v142);
        uint64_t v114 = sub_188FC78(&v142, (uint64_t)"The original user route references a no longer known soft-closure with id ", 74);
        int v115 = *(char *)(*(void *)v109 + 23);
        if (v115 >= 0) {
          uint64_t v116 = *(void *)v109;
        }
        else {
          uint64_t v116 = **(void **)v109;
        }
        if (v115 >= 0) {
          uint64_t v117 = *(unsigned __int8 *)(*(void *)v109 + 23);
        }
        else {
          uint64_t v117 = *(void *)(*(void *)v109 + 8);
        }
        sub_188FC78(v114, v116, v117);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v198, 1u);
        if (SHIBYTE(v199) < 0) {
          operator delete((void *)v198);
        }
        uint64_t v142 = v111;
        *(uint64_t *)((char *)&v142 + *(void *)(v111 - 24)) = v112;
        if (SHIBYTE(v148) < 0) {
          operator delete((void *)v147);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      if (*((void *)v109 + 4) == *((void *)v109 + 5) && sub_723EC(1u))
      {
        sub_6BAC((uint64_t)&v142);
        uint64_t v118 = sub_188FC78(&v142, (uint64_t)"Could not locate the incident ", 30);
        int v119 = *(char *)(*(void *)v109 + 23);
        if (v119 >= 0) {
          uint64_t v120 = *(void **)v109;
        }
        else {
          uint64_t v120 = **(void ***)v109;
        }
        if (v119 >= 0) {
          uint64_t v121 = *(unsigned __int8 *)(*(void *)v109 + 23);
        }
        else {
          uint64_t v121 = *(void *)(*(void *)v109 + 8);
        }
        uint64_t v122 = sub_188FC78(v118, (uint64_t)v120, v121);
        sub_188FC78(v122, (uint64_t)" on the user route or it started at the origin.", 47);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v198, 1u);
        if (SHIBYTE(v199) < 0) {
          operator delete((void *)v198);
        }
        uint64_t v142 = v111;
        *(uint64_t *)((char *)&v142 + *(void *)(v111 - 24)) = v112;
        if (SHIBYTE(v148) < 0) {
          operator delete((void *)v147);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      v109 += 56;
    }
    while (v109 != v110);
    uint64_t v123 = v213;
    uint64_t v124 = v214;
    if (v213 == v214)
    {
      uint64_t v109 = v214;
    }
    else
    {
      uint64_t v109 = v213;
      while (*((void *)v109 + 4) != *((void *)v109 + 5))
      {
        uint64_t v125 = (void *)*((void *)v109 + 1);
        if (!v125
          || *((void *)v109 + 2) >= (unint64_t)(0x21CFB2B78C13521DLL * ((uint64_t)(v125[1] - *v125) >> 3)))
        {
          break;
        }
        v109 += 56;
        if (v109 == v214) {
          goto LABEL_302;
        }
      }
      if (v109 != v214)
      {
        uint64_t v126 = v109 + 56;
        if (v109 + 56 != v214)
        {
          do
          {
            if (*((void *)v126 + 4) != *((void *)v126 + 5))
            {
              unsigned __int16 v127 = (void *)*((void *)v126 + 1);
              if (v127)
              {
                if (*((void *)v126 + 2) < (unint64_t)(0x21CFB2B78C13521DLL * ((uint64_t)(v127[1] - *v127) >> 3)))
                {
                  long long v128 = *((_OWORD *)v126 + 1);
                  *(_OWORD *)uint64_t v109 = *(_OWORD *)v126;
                  *((_OWORD *)v109 + 1) = v128;
                  uint64_t v129 = (void *)*((void *)v109 + 4);
                  if (v129)
                  {
                    *((void *)v109 + 5) = v129;
                    operator delete(v129);
                    *((void *)v109 + 4) = 0;
                    *((void *)v109 + 5) = 0;
                    *((void *)v109 + 6) = 0;
                  }
                  *((_OWORD *)v109 + 2) = *((_OWORD *)v126 + 2);
                  *((void *)v109 + 6) = *((void *)v126 + 6);
                  *((void *)v126 + 4) = 0;
                  *((void *)v126 + 5) = 0;
                  *((void *)v126 + 6) = 0;
                  v109 += 56;
                }
              }
            }
            v126 += 56;
          }
          while (v126 != v124);
          uint64_t v123 = v213;
          uint64_t v124 = v214;
        }
      }
      if (v109 == v124)
      {
LABEL_302:
        uint64_t v109 = v124;
        uint64_t v124 = v123;
        goto LABEL_308;
      }
      while (v124 != v109)
      {
        int v130 = (void *)*((void *)v124 - 3);
        if (v130)
        {
          *((void *)v124 - 2) = v130;
          operator delete(v130);
        }
        v124 -= 56;
      }
      uint64_t v214 = v109;
      uint64_t v124 = v213;
    }
  }
LABEL_308:
  *uint64_t v134 = v124;
  v134[1] = v109;
  v134[2] = v215;
  uint64_t v214 = 0;
  unint64_t v215 = 0;
  uint64_t v213 = 0;
  if (v210)
  {
    unsigned int v211 = v210;
    operator delete(v210);
    BOOL v15 = v213;
    if (v213)
    {
LABEL_312:
      int v131 = v214;
      int v132 = v15;
      if (v214 != v15)
      {
        do
        {
          uint64_t v133 = (void *)*((void *)v131 - 3);
          if (v133)
          {
            *((void *)v131 - 2) = v133;
            operator delete(v133);
          }
          v131 -= 56;
        }
        while (v131 != v15);
        int v132 = v213;
      }
      uint64_t v214 = v15;
      operator delete(v132);
    }
  }
}

void sub_1042A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_39EB0C(&STACK[0x3D0]);
  sub_39EB0C(&STACK[0x250]);
  uint64_t v34 = (void *)STACK[0x3B8];
  if (STACK[0x3B8])
  {
    STACK[0x3C0] = (unint64_t)v34;
    operator delete(v34);
  }
  sub_39EB0C(&a32);
  unint64_t v35 = *(void **)(v32 - 144);
  if (v35)
  {
    *(void *)(v32 - 136) = v35;
    operator delete(v35);
  }
  sub_4439BC((void **)(v32 - 120));
  _Unwind_Resume(a1);
}

void sub_1042CAC(uint64_t a1, void *a2, uint64_t *a3)
{
  int v3 = a3;
  double v4 = a2;
  uint64_t v6 = *(char **)(a1 + 16);
  char v7 = *(char **)(a1 + 8);
  uint64_t v8 = v6 - v7;
  if (v6 == v7) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = 32 * (v6 - v7) - 1;
  }
  unint64_t v10 = *(void *)(a1 + 32);
  if (v9 != *(void *)(a1 + 40) + v10) {
    goto LABEL_98;
  }
  BOOL v11 = v10 >= 0x100;
  unint64_t v12 = v10 - 256;
  if (v11)
  {
    *(void *)(a1 + 32) = v12;
    uint64_t v13 = v7 + 8;
    uint64_t v14 = *(void *)v7;
    *(void *)(a1 + 8) = v7 + 8;
    if (v6 != *(char **)(a1 + 24))
    {
LABEL_96:
      *(void *)uint64_t v6 = v14;
      goto LABEL_97;
    }
    BOOL v15 = *(char **)a1;
    if ((unint64_t)v13 > *(void *)a1)
    {
      uint64_t v16 = (uint64_t)&v13[-*(void *)a1] >> 3;
      if (v16 >= -1) {
        uint64_t v17 = v16 + 1;
      }
      else {
        uint64_t v17 = v16 + 2;
      }
      uint64_t v18 = v17 >> 1;
      uint64_t v19 = -v18;
      int v20 = &v13[-8 * v18];
      int64_t v21 = v6 - v13;
      if (v6 != v13)
      {
        memmove(&v13[-8 * v18], v13, v6 - v13);
        uint64_t v6 = *(char **)(a1 + 8);
      }
      uint64_t v22 = &v6[8 * v19];
      uint64_t v6 = &v20[v21];
      *(void *)(a1 + 8) = v22;
      *(void *)(a1 + 16) = &v20[v21];
      goto LABEL_96;
    }
    unint64_t v37 = (v6 - v15) >> 2;
    if (v6 == v15) {
      unint64_t v37 = 1;
    }
    if (v37 >> 61) {
      goto LABEL_113;
    }
    unint64_t v38 = v37 >> 2;
    uint64_t v39 = 8 * v37;
    uint64_t v40 = (char *)operator new(8 * v37);
    uint64_t v41 = &v40[8 * v38];
    int64_t v43 = v6 - v13;
    BOOL v42 = v6 == v13;
    uint64_t v6 = v41;
    if (!v42)
    {
      uint64_t v6 = &v41[v43 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v44 = v43 - 8;
      if ((unint64_t)(v43 - 8) < 0x38)
      {
        uint64_t v45 = &v40[8 * v38];
        do
        {
LABEL_93:
          uint64_t v103 = *(void *)v13;
          v13 += 8;
          *(void *)uint64_t v45 = v103;
          v45 += 8;
        }
        while (v45 != v6);
        goto LABEL_94;
      }
      unint64_t v96 = &v40[8 * v38];
      uint64_t v45 = v96;
      if ((unint64_t)(v96 - v13) < 0x20) {
        goto LABEL_93;
      }
      uint64_t v97 = (v44 >> 3) + 1;
      uint64_t v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v45 = &v41[v98];
      v13 += v98;
      uint64_t v99 = (long long *)(v7 + 24);
      unint64_t v100 = v96 + 16;
      uint64_t v101 = v97 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v102 = *v99;
        *(v100 - 1) = *(v99 - 1);
        _OWORD *v100 = v102;
        v99 += 2;
        v100 += 2;
        v101 -= 4;
      }
      while (v101);
      if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_93;
      }
    }
LABEL_94:
    *(void *)a1 = v40;
    *(void *)(a1 + 8) = v41;
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = &v40[v39];
    if (v15)
    {
      operator delete(v15);
      uint64_t v6 = *(char **)(a1 + 16);
    }
    goto LABEL_96;
  }
  uint64_t v23 = v8 >> 3;
  uint64_t v24 = *(char **)a1;
  BOOL v25 = *(char **)(a1 + 24);
  uint64_t v26 = (uint64_t)&v25[-*(void *)a1];
  if (v8 >> 3 < (unint64_t)(v26 >> 3))
  {
    uint64_t v27 = operator new(0x1000uLL);
    unint64_t v28 = v27;
    if (v25 != v6)
    {
      *(void *)uint64_t v6 = v27;
      *(void *)(a1 + 16) += 8;
      double v4 = a2;
      goto LABEL_98;
    }
    if (v7 == v24)
    {
      unint64_t v71 = (v25 - v7) >> 2;
      if (v6 == v7) {
        unint64_t v71 = 1;
      }
      if (v71 >> 61) {
        goto LABEL_113;
      }
      unint64_t v72 = (v71 + 3) >> 2;
      uint64_t v73 = 8 * v71;
      uint64_t v74 = (char *)operator new(8 * v71);
      uint64_t v46 = &v74[8 * v72];
      uint64_t v75 = v46;
      if (v6 != v7)
      {
        uint64_t v75 = &v46[8 * v23];
        uint64_t v76 = &v74[8 * v72];
        uint64_t v77 = v7;
        if ((unint64_t)(v8 - 8) < 0x38) {
          goto LABEL_117;
        }
        uint64_t v78 = &v74[8 * v72];
        uint64_t v76 = v78;
        uint64_t v77 = v7;
        if ((unint64_t)(v78 - v7) < 0x20) {
          goto LABEL_117;
        }
        unint64_t v79 = ((unint64_t)(v8 - 8) >> 3) + 1;
        uint64_t v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v76 = &v46[v80];
        uint64_t v77 = &v7[v80];
        unsigned int v81 = (long long *)(v7 + 16);
        unsigned int v82 = v78 + 16;
        uint64_t v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v84 = *v81;
          *(v82 - 1) = *(v81 - 1);
          _OWORD *v82 = v84;
          v81 += 2;
          v82 += 2;
          v83 -= 4;
        }
        while (v83);
        if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_117:
          do
          {
            uint64_t v85 = *(void *)v77;
            v77 += 8;
            *(void *)uint64_t v76 = v85;
            v76 += 8;
          }
          while (v76 != v75);
        }
      }
      *(void *)a1 = v74;
      *(void *)(a1 + 8) = v46;
      *(void *)(a1 + 16) = v75;
      *(void *)(a1 + 24) = &v74[v73];
      if (v7)
      {
        operator delete(v7);
        uint64_t v46 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v46 = v7;
    }
    *((void *)v46 - 1) = v28;
    int v86 = *(char **)(a1 + 8);
    double v87 = *(char **)(a1 + 16);
    *(void *)(a1 + 8) = v86 - 8;
    uint64_t v88 = *((void *)v86 - 1);
    *(void *)(a1 + 8) = v86;
    double v4 = a2;
    if (v87 != *(char **)(a1 + 24))
    {
LABEL_81:
      *(void *)double v87 = v88;
LABEL_97:
      *(void *)(a1 + 16) += 8;
      goto LABEL_98;
    }
    unsigned int v89 = *(char **)a1;
    if ((unint64_t)v86 > *(void *)a1)
    {
      uint64_t v90 = (uint64_t)&v86[-*(void *)a1] >> 3;
      if (v90 >= -1) {
        uint64_t v91 = v90 + 1;
      }
      else {
        uint64_t v91 = v90 + 2;
      }
      uint64_t v92 = v91 >> 1;
      uint64_t v93 = -v92;
      uint64_t v94 = &v86[-8 * v92];
      int64_t v95 = v87 - v86;
      if (v87 != v86)
      {
        memmove(&v86[-8 * v92], v86, v87 - v86);
        int v86 = *(char **)(a1 + 8);
      }
      *(void *)(a1 + 8) = &v86[8 * v93];
      *(void *)(a1 + 16) = &v94[v95];
      *(void *)&v94[v95] = v88;
      goto LABEL_97;
    }
    unint64_t v107 = (v87 - v89) >> 2;
    if (v87 == v89) {
      unint64_t v107 = 1;
    }
    if (!(v107 >> 61))
    {
      unint64_t v108 = v107 >> 2;
      uint64_t v109 = 8 * v107;
      unint64_t v110 = (char *)operator new(8 * v107);
      uint64_t v111 = &v110[8 * v108];
      int64_t v112 = v87 - v86;
      BOOL v42 = v87 == v86;
      double v87 = v111;
      if (v42) {
        goto LABEL_110;
      }
      double v87 = &v111[v112 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v113 = v112 - 8;
      if ((unint64_t)(v112 - 8) >= 0x38)
      {
        int v115 = &v110[8 * v108];
        uint64_t v114 = v115;
        if ((unint64_t)(v115 - v86) >= 0x20)
        {
          uint64_t v116 = (v113 >> 3) + 1;
          uint64_t v117 = 8 * (v116 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v114 = &v111[v117];
          uint64_t v118 = &v86[v117];
          int v119 = (long long *)(v86 + 16);
          uint64_t v120 = v115 + 16;
          uint64_t v121 = v116 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v122 = *v119;
            *(v120 - 1) = *(v119 - 1);
            *uint64_t v120 = v122;
            v119 += 2;
            v120 += 2;
            v121 -= 4;
          }
          while (v121);
          int v86 = v118;
          if (v116 == (v116 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_110:
            *(void *)a1 = v110;
            *(void *)(a1 + 8) = v111;
            *(void *)(a1 + 16) = v87;
            *(void *)(a1 + 24) = &v110[v109];
            if (v89)
            {
              operator delete(v89);
              double v87 = *(char **)(a1 + 16);
            }
            goto LABEL_81;
          }
        }
      }
      else
      {
        uint64_t v114 = &v110[8 * v108];
      }
      do
      {
        uint64_t v123 = *(void *)v86;
        v86 += 8;
        *(void *)uint64_t v114 = v123;
        v114 += 8;
      }
      while (v114 != v87);
      goto LABEL_110;
    }
LABEL_113:
    sub_188D718();
  }
  uint64_t v29 = v26 >> 2;
  if (v25 == v24) {
    unint64_t v30 = 1;
  }
  else {
    unint64_t v30 = v29;
  }
  if (v30 >> 61) {
    goto LABEL_113;
  }
  uint64_t v31 = (char *)operator new(8 * v30);
  uint64_t v32 = operator new(0x1000uLL);
  unint64_t v33 = &v31[8 * v23];
  uint64_t v34 = &v31[8 * v30];
  if (v23 == v30)
  {
    uint64_t v124 = v32;
    double v4 = a2;
    if (v8 < 1)
    {
      if (v6 == v7) {
        unint64_t v47 = 1;
      }
      else {
        unint64_t v47 = v8 >> 2;
      }
      if (v47 >> 61) {
        sub_188D718();
      }
      uint64_t v48 = (char *)operator new(8 * v47);
      unint64_t v33 = &v48[8 * (v47 >> 2)];
      uint64_t v34 = &v48[8 * v47];
      operator delete(v31);
      char v7 = *(char **)(a1 + 8);
      uint64_t v6 = *(char **)(a1 + 16);
      uint64_t v31 = v48;
    }
    else
    {
      unint64_t v35 = v23 + 2;
      if (v23 >= -1) {
        unint64_t v35 = v23 + 1;
      }
      v33 -= 8 * (v35 >> 1);
    }
    *(void *)unint64_t v33 = v124;
    unint64_t v36 = v33 + 8;
    if (v6 == v7) {
      goto LABEL_43;
    }
    do
    {
LABEL_48:
      if (v33 == v31)
      {
        if (v36 >= v34)
        {
          if (v34 == v33) {
            unint64_t v56 = 1;
          }
          else {
            unint64_t v56 = (v34 - v33) >> 2;
          }
          if (v56 >> 61) {
            sub_188D718();
          }
          long long v57 = (char *)operator new(8 * v56);
          uint64_t v31 = v57;
          unint64_t v58 = (v56 + 3) >> 2;
          uint64_t v52 = &v57[8 * v58];
          int v50 = v52;
          int64_t v59 = v36 - v33;
          if (v36 != v33)
          {
            int v50 = &v52[v59 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v60 = v59 - 8;
            unint64_t v61 = &v57[8 * v58];
            unint64_t v62 = v33;
            if (v60 < 0x38) {
              goto LABEL_118;
            }
            uint64_t v63 = 8 * v58;
            unint64_t v61 = &v57[8 * v58];
            unint64_t v62 = v33;
            if ((unint64_t)(v61 - v33) < 0x20) {
              goto LABEL_118;
            }
            uint64_t v64 = (v60 >> 3) + 1;
            uint64_t v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v61 = &v52[v65];
            unint64_t v62 = &v33[v65];
            unint64_t v66 = (long long *)(v33 + 16);
            char v67 = &v57[v63 + 16];
            uint64_t v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v69 = *v66;
              *((_OWORD *)v67 - 1) = *(v66 - 1);
              *(_OWORD *)char v67 = v69;
              v66 += 2;
              v67 += 32;
              v68 -= 4;
            }
            while (v68);
            if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_118:
              do
              {
                uint64_t v70 = *(void *)v62;
                v62 += 8;
                *(void *)unint64_t v61 = v70;
                v61 += 8;
              }
              while (v61 != v50);
            }
          }
          uint64_t v34 = &v57[8 * v56];
          operator delete(v33);
        }
        else
        {
          uint64_t v54 = (v34 - v36) >> 3;
          if (v54 >= -1) {
            unint64_t v55 = v54 + 1;
          }
          else {
            unint64_t v55 = v54 + 2;
          }
          int v50 = &v36[8 * (v55 >> 1)];
          uint64_t v52 = &v33[8 * (v55 >> 1)];
          if (v36 == v33)
          {
            uint64_t v31 = v36;
          }
          else
          {
            memmove(&v33[8 * (v55 >> 1)], v33, v36 - v33);
            uint64_t v31 = v33;
          }
        }
      }
      else
      {
        uint64_t v52 = v33;
        int v50 = v36;
      }
      uint64_t v53 = *((void *)v6 - 1);
      v6 -= 8;
      *((void *)v52 - 1) = v53;
      uint64_t v49 = v52 - 8;
      unint64_t v36 = v50;
      unint64_t v33 = v49;
    }
    while (v6 != *(char **)(a1 + 8));
    goto LABEL_44;
  }
  double v4 = a2;
  *(void *)unint64_t v33 = v32;
  unint64_t v36 = v33 + 8;
  if (v6 != v7) {
    goto LABEL_48;
  }
LABEL_43:
  uint64_t v49 = v33;
  int v50 = v36;
LABEL_44:
  int v51 = *(char **)a1;
  *(void *)a1 = v31;
  *(void *)(a1 + 8) = v49;
  *(void *)(a1 + 16) = v50;
  *(void *)(a1 + 24) = v34;
  int v3 = a3;
  if (v51) {
    operator delete(v51);
  }
LABEL_98:
  unint64_t v104 = *(void *)(a1 + 40) + *(void *)(a1 + 32);
  uint64_t v105 = (void *)(*(void *)(*(void *)(a1 + 8) + ((v104 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16
                                                                                           * v104);
  uint64_t v106 = *v3;
  void *v105 = *v4;
  v105[1] = v106;
  ++*(void *)(a1 + 40);
}

void sub_10433BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  operator delete(__p);
  operator delete(v10);
  _Unwind_Resume(a1);
}

void sub_10433D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10433EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1043404(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_104341C@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 184);
  *a2 = result;
  a2[1].n128_u32[0] = *(_DWORD *)(a1 + 200);
  return result;
}

void sub_1043430(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *(uint64_t **)(a1 + 5152);
  unint64_t v4 = *(void *)(a1 + 5160);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  if (!v4)
  {
    uint64_t v5 = 0;
    if (!v3) {
      return;
    }
    goto LABEL_8;
  }
  if (v4 >= 0x1AF286BCA1AF287) {
    sub_2E00();
  }
  uint64_t v5 = (char *)operator new(152 * v4);
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v5;
  for (*(void *)(a2 + 16) = &v5[152 * v4]; v3; int v3 = (uint64_t *)*v3)
  {
LABEL_8:
    if (*((char *)v3 + 39) < 0)
    {
      sub_4200(__p, (void *)v3[2], v3[3]);
    }
    else
    {
      *(_OWORD *)__n128 __p = *((_OWORD *)v3 + 1);
      uint64_t v12 = v3[4];
    }
    long long v6 = *(_OWORD *)(v3 + 19);
    long long v19 = *(_OWORD *)(v3 + 17);
    long long v20 = v6;
    long long v21 = *(_OWORD *)(v3 + 21);
    uint64_t v22 = v3[23];
    long long v7 = *(_OWORD *)(v3 + 11);
    long long v15 = *(_OWORD *)(v3 + 9);
    long long v16 = v7;
    long long v8 = *(_OWORD *)(v3 + 15);
    long long v17 = *(_OWORD *)(v3 + 13);
    long long v18 = v8;
    long long v9 = *(_OWORD *)(v3 + 7);
    long long v13 = *(_OWORD *)(v3 + 5);
    long long v14 = v9;
    memmove(__dst, v3 + 5, 0x98uLL);
    unint64_t v10 = sub_1046AE0((char **)a2, (uint64_t)v5, (uint64_t)__dst);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v5 = v10 + 152;
  }
}

void sub_104358C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  long long v16 = *(void **)v14;
  if (!*(void *)v14) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v14 + 8) = v16;
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10435DC(uint64_t a1, void *a2)
{
  __p[23] = 6;
  strcpy(__p, "enable");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)a1 = v4;
  __p[23] = 11;
  strcpy(__p, "max_penalty");
  double v5 = sub_5C7E8(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(double *)(a1 + 8) = v5;
  *(void *)__n128 __p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_20B93C0;
  strcpy(*(char **)__p, "consider_max_penalty_incidents_as_closed");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 16) = v6;
  __p[23] = 8;
  strcpy(__p, "reroutes");
  long long v7 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_1043864(a1 + 24, v7);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  __p[23] = 13;
  strcpy(__p, "hard_closures");
  long long v8 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_1043B2C(a1 + 80, v8);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  __p[23] = 13;
  strcpy(__p, "soft_closures");
  long long v9 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_1043C80(a1 + 96, v9);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  __p[23] = 7;
  strcpy(__p, "detours");
  unint64_t v10 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_1043EB8(a1 + 160, v10);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  return a1;
}

void sub_1043830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1043864(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 6;
  strcpy((char *)__p, "enable");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "use_exclusively");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v5;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "max_closure_lookback_distance_m");
  *(void *)(a1 + 8) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9280;
  strcpy((char *)__p[0], "min_decision_points_before_closure");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 16) = v6;
  strcpy((char *)__p, "max_reroute_distance_m");
  HIBYTE(__p[2]) = 22;
  *(void *)(a1 + 24) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 6;
  strcpy((char *)__p, "factor");
  double v7 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 32) = v7;
  HIBYTE(__p[2]) = 8;
  strcpy((char *)__p, "exponent");
  double v8 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 40) = v8;
  HIBYTE(__p[2]) = 11;
  strcpy((char *)__p, "penalty_min");
  int v9 = sub_5D2EC(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 48) = (double)v9;
  return a1;
}

void sub_1043AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1043B2C(uint64_t a1, void *a2)
{
  __p[23] = 15;
  strcpy(__p, "general_penalty");
  double v4 = sub_5C7E8(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(double *)a1 = v4;
  *(void *)__n128 __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9390;
  strcpy(*(char **)__p, "treat_dedicated_closures_as_open");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 8) = v5;
  *(void *)__n128 __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B91B0;
  strcpy(*(char **)__p, "min_dedicated_length_percent");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(_DWORD *)(a1 + 12) = v6;
  return a1;
}

void sub_1043C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1043C80(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 6;
  strcpy((char *)__p, "enable");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "general_penalty");
  double v5 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 8) = v5;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "incident_age_exponent");
  double v6 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 16) = v6;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "incident_age_factor");
  double v7 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 24) = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "max_incident_age_penalty_min");
  double v8 = (double)(int)sub_5D2EC(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 32) = v8;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 40) = _Q0;
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "local_roads_factor");
  double v14 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 56) = v14;
  return a1;
}

void sub_1043E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1043EB8(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 6;
  strcpy((char *)__p, "enable");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "enable_computation");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v5;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20E12D0;
  strcpy((char *)__p[0], "max_time_to_best_detour_divergence_min");
  *(_DWORD *)(a1 + 4) = sub_5D2EC(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "detour_threshold");
  double v6 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 8) = v6;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "avoid_hard_closures_immediately");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 16) = v7;
  return a1;
}

void sub_1044070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_104409C(char **a1, unint64_t a2)
{
  char v2 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x492492492492493) {
    sub_2E00();
  }
  BOOL v4 = a1[1];
  uint64_t v5 = 56 * a2;
  double v6 = (char *)operator new(56 * a2);
  BOOL v7 = &v6[v5];
  double v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_13;
  }
  int v9 = &v6[v4 - v2];
  do
  {
    long long v10 = *(_OWORD *)(v4 - 56);
    *(_OWORD *)(v9 - 40) = *(_OWORD *)(v4 - 40);
    *(_OWORD *)(v9 - 56) = v10;
    *(_OWORD *)(v9 - 24) = *(_OWORD *)(v4 - 24);
    *((void *)v9 - 1) = *((void *)v4 - 1);
    v9 -= 56;
    *((void *)v4 - 3) = 0;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    v4 -= 56;
  }
  while (v4 != v2);
  BOOL v11 = *a1;
  char v2 = a1[1];
  *a1 = v9;
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v11)
  {
    do
    {
      uint64_t v12 = (void *)*((void *)v2 - 3);
      if (v12)
      {
        *((void *)v2 - 2) = v12;
        operator delete(v12);
      }
      v2 -= 56;
    }
    while (v2 != v11);
    char v2 = v11;
  }
  if (v2)
  {
LABEL_13:
    operator delete(v2);
  }
}

uint64_t sub_10441E4(uint64_t a1, uint64_t a2)
{
  sub_39ECCC((uint64_t)&v22, (long long *)(a1 + 72));
  sub_39ECCC((uint64_t)&v15, (long long *)(a2 + 72));
  if (v27 == v28 || __p == v21)
  {
    uint64_t v4 = (v27 == v28) ^ (__p == v21);
    uint64_t v5 = __p;
    if (!__p) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v24 != v17)
  {
    uint64_t v4 = 1;
    uint64_t v5 = __p;
    if (!__p) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v22)
  {
    unint64_t v6 = v23;
    BOOL v7 = v6 < sub_46C760(v22);
    double v8 = v15;
    if (v15) {
      goto LABEL_11;
    }
LABEL_27:
    BOOL v11 = 0;
    goto LABEL_28;
  }
  BOOL v7 = 0;
  double v8 = v15;
  if (!v15) {
    goto LABEL_27;
  }
LABEL_11:
  unint64_t v9 = v16;
  unint64_t v10 = sub_46C760(v8);
  BOOL v11 = v9 < v10;
  if (v9 < v10 && v7)
  {
    uint64_t v13 = sub_46C8EC(v22, v23);
    uint64_t v4 = v13 != sub_46C8EC(v15, v16);
    uint64_t v5 = __p;
    if (!__p) {
      goto LABEL_19;
    }
LABEL_18:
    long long v21 = v5;
    operator delete(v5);
    goto LABEL_19;
  }
LABEL_28:
  uint64_t v4 = v7 ^ v11;
  uint64_t v5 = __p;
  if (__p) {
    goto LABEL_18;
  }
LABEL_19:
  if (v18)
  {
    long long v19 = v18;
    operator delete(v18);
  }
  if (v27)
  {
    unint64_t v28 = v27;
    operator delete(v27);
  }
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
  return v4;
}

void sub_1044334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

void sub_1044350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_39EB70((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1044364(uint64_t a1, uint64_t a2)
{
  sub_39ECCC((uint64_t)&v22, (long long *)(a1 + 72));
  sub_39ECCC((uint64_t)&v15, (long long *)(a2 + 72));
  if (v27 == v28 || __p == v21)
  {
    uint64_t v4 = (v27 == v28) == (__p == v21);
    uint64_t v5 = __p;
    if (!__p) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v24 != v17)
  {
    uint64_t v4 = 0;
    uint64_t v5 = __p;
    if (!__p) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v22)
  {
    unint64_t v6 = v23;
    BOOL v7 = v6 < sub_46C760(v22);
    double v8 = v15;
    if (v15) {
      goto LABEL_11;
    }
LABEL_27:
    BOOL v11 = 0;
    goto LABEL_28;
  }
  BOOL v7 = 0;
  double v8 = v15;
  if (!v15) {
    goto LABEL_27;
  }
LABEL_11:
  unint64_t v9 = v16;
  unint64_t v10 = sub_46C760(v8);
  BOOL v11 = v9 < v10;
  if (v9 < v10 && v7)
  {
    uint64_t v13 = sub_46C8EC(v22, v23);
    uint64_t v4 = v13 == sub_46C8EC(v15, v16);
    uint64_t v5 = __p;
    if (!__p) {
      goto LABEL_19;
    }
LABEL_18:
    long long v21 = v5;
    operator delete(v5);
    goto LABEL_19;
  }
LABEL_28:
  uint64_t v4 = v7 ^ v11 ^ 1u;
  uint64_t v5 = __p;
  if (__p) {
    goto LABEL_18;
  }
LABEL_19:
  if (v18)
  {
    long long v19 = v18;
    operator delete(v18);
  }
  if (v27)
  {
    unint64_t v28 = v27;
    operator delete(v27);
  }
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
  return v4;
}

void sub_10444BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

void sub_10444D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_39EB70((uint64_t *)va);
  _Unwind_Resume(a1);
}

void **sub_10444EC(void **a1)
{
  char v2 = *a1;
  if (*a1)
  {
    int v3 = a1[1];
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        int v3 = sub_1044584(v3 - 46);
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_1044548(uint64_t *a1)
{
  if (*a1)
  {
    sub_1044628((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

void *sub_1044584(void *a1)
{
  char v2 = (void *)a1[38];
  if (v2)
  {
    a1[39] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[35];
  if (v3)
  {
    a1[36] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[29];
  if (v4)
  {
    a1[30] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[26];
  if (v5)
  {
    a1[27] = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)a1[15];
  if (v6)
  {
    a1[16] = v6;
    operator delete(v6);
  }
  BOOL v7 = (void *)a1[12];
  if (v7)
  {
    a1[13] = v7;
    operator delete(v7);
  }
  double v8 = (void *)a1[6];
  if (v8)
  {
    a1[7] = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)a1[3];
  if (v9)
  {
    a1[4] = v9;
    operator delete(v9);
  }
  return a1;
}

void sub_1044628(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 56)
  {
    uint64_t v6 = *(void *)(i - 24);
    if (v6)
    {
      uint64_t v7 = *(void *)(i - 16);
      uint64_t v5 = *(void **)(i - 24);
      if (v7 != v6)
      {
        uint64_t v8 = v7 - 160;
        do
        {
          unint64_t v10 = *(void **)(v8 + 96);
          if (v10)
          {
            *(void *)(v8 + 104) = v10;
            operator delete(v10);
          }
          BOOL v11 = *(void **)(v8 + 72);
          if (v11)
          {
            *(void *)(v8 + 80) = v11;
            operator delete(v11);
          }
          uint64_t v12 = *(void **)(v8 + 24);
          if (v12)
          {
            *(void *)(v8 + 32) = v12;
            operator delete(v12);
          }
          uint64_t v13 = *(void **)v8;
          if (*(void *)v8)
          {
            *(void *)(v8 + 8) = v13;
            operator delete(v13);
          }
          double v14 = *(void **)(v8 - 88);
          if (v14)
          {
            *(void *)(v8 - 80) = v14;
            operator delete(v14);
          }
          long long v15 = *(void **)(v8 - 112);
          if (v15)
          {
            *(void *)(v8 - 104) = v15;
            operator delete(v15);
          }
          unint64_t v16 = *(void **)(v8 - 160);
          if (v16)
          {
            *(void *)(v8 - 152) = v16;
            operator delete(v16);
          }
          uint64_t v17 = *(void **)(v8 - 184);
          if (v17)
          {
            *(void *)(v8 - 176) = v17;
            operator delete(v17);
          }
          uint64_t v9 = v8 - 208;
          v8 -= 368;
        }
        while (v9 != v6);
        uint64_t v5 = *(void **)(i - 24);
      }
      *(void *)(i - 16) = v6;
      operator delete(v5);
    }
  }
  *(void *)(a1 + 8) = a2;
}

void sub_1044738(char **a1, unint64_t a2)
{
  char v2 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667) {
      sub_2E00();
    }
    uint64_t v4 = a1[1];
    uint64_t v5 = 40 * a2;
    uint64_t v6 = (char *)operator new(40 * a2);
    uint64_t v7 = &v6[v5];
    uint64_t v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
      if (v2) {
LABEL_10:
      }
        operator delete(v2);
    }
    else
    {
      uint64_t v9 = 0;
      do
      {
        unint64_t v10 = &v8[v9];
        BOOL v11 = &v4[v9];
        *(_OWORD *)(v10 - 40) = *(_OWORD *)&v4[v9 - 40];
        *((void *)v10 - 3) = *(void *)&v4[v9 - 24];
        *((void *)v10 - 2) = *(void *)&v4[v9 - 16];
        *((void *)v11 - 4) = 0;
        *((void *)v11 - 3) = 0;
        *((void *)v11 - 2) = 0;
        *((_DWORD *)v10 - 2) = *(_DWORD *)&v4[v9 - 8];
        v9 -= 40;
      }
      while (&v4[v9] != v2);
      uint64_t v12 = *a1;
      char v2 = a1[1];
      *a1 = &v8[v9];
      a1[1] = v8;
      a1[2] = v7;
      if (v2 != v12)
      {
        do
        {
          uint64_t v13 = (void **)(v2 - 32);
          sub_3A6AB0(&v13);
          v2 -= 40;
        }
        while (v2 != v12);
        char v2 = v12;
      }
      if (v2) {
        goto LABEL_10;
      }
    }
  }
}

uint64_t sub_1044868(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    uint64_t v5 = (void **)(i - 32);
    sub_3A6AB0(&v5);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

_OWORD *sub_10448D0(uint64_t a1, _OWORD *a2, _OWORD *a3, _OWORD *a4)
{
  uint64_t v4 = a4;
  uint64_t v8 = a4;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = *v6;
      sub_39ECCC((uint64_t)(v4 + 1), v6 + 1);
      sub_39ECCC((uint64_t)v4 + 88, (_OWORD *)((char *)v6 + 88));
      v6 += 10;
      uint64_t v4 = v8 + 10;
      v8 += 10;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_1044964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  BOOL v11 = (void *)v9[8];
  if (v11)
  {
    v9[9] = v11;
    operator delete(v11);
    uint64_t v12 = (void *)v9[5];
    if (!v12)
    {
LABEL_3:
      sub_10449C4((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v12 = (void *)v9[5];
    if (!v12) {
      goto LABEL_3;
    }
  }
  v9[6] = v12;
  operator delete(v12);
  sub_10449C4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10449B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10449C4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(void *)(v3 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v6 = *(void **)(v3 - 48);
      if (v6)
      {
        *(void *)(v3 - 40) = v6;
        operator delete(v6);
      }
      uint64_t v7 = *(void **)(v3 - 96);
      if (v7)
      {
        *(void *)(v3 - 88) = v7;
        operator delete(v7);
      }
      uint64_t v8 = *(void **)(v3 - 120);
      if (v8)
      {
        *(void *)(v3 - 112) = v8;
        operator delete(v8);
      }
      v3 -= 160;
    }
  }
  return a1;
}

char *sub_1044A58(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 40;
  uint64_t v8 = &(*a1)[40 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (void)v5) >> 3) + 1;
    if (v20 > 0x666666666666666) {
      sub_2E00();
    }
    unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (void)v5) >> 3);
    if (2 * v21 > v20) {
      unint64_t v20 = 2 * v21;
    }
    if (v21 >= 0x333333333333333) {
      unint64_t v22 = 0x666666666666666;
    }
    else {
      unint64_t v22 = v20;
    }
    uint64_t v40 = a1 + 2;
    if (v22)
    {
      if (v22 > 0x666666666666666) {
        sub_188D718();
      }
      unint64_t v23 = (char *)operator new(40 * v22);
    }
    else
    {
      unint64_t v23 = 0;
    }
    unint64_t v36 = v23;
    unint64_t v37 = &v23[40 * v7];
    unint64_t v38 = v37;
    uint64_t v39 = &v23[40 * v22];
    sub_1044E00((uint64_t)&v36, a3);
    BOOL v25 = v37;
    uint64_t v26 = *a1;
    uint64_t v27 = v37;
    if (*a1 != v8)
    {
      uint64_t v28 = 0;
      do
      {
        uint64_t v29 = &v25[v28];
        unint64_t v30 = &v8[v28];
        *((void *)v29 - 5) = *(void *)&v8[v28 - 40];
        *((void *)v29 - 4) = 0;
        *((void *)v29 - 3) = 0;
        *((void *)v29 - 2) = 0;
        *((_OWORD *)v29 - 2) = *(_OWORD *)&v8[v28 - 32];
        *((void *)v29 - 2) = *(void *)&v8[v28 - 16];
        *((void *)v30 - 4) = 0;
        *((void *)v30 - 3) = 0;
        *((void *)v30 - 2) = 0;
        *((_DWORD *)v29 - 2) = *(_DWORD *)&v8[v28 - 8];
        v28 -= 40;
      }
      while (&v8[v28] != v26);
      uint64_t v27 = &v25[v28];
    }
    unint64_t v37 = v27;
    uint64_t v31 = a1[1];
    uint64_t v32 = v38;
    if (v31 != v8)
    {
      do
      {
        *(void *)uint64_t v32 = *(void *)v8;
        *((void *)v32 + 1) = 0;
        *((void *)v32 + 2) = 0;
        *((void *)v32 + 3) = 0;
        *(_OWORD *)(v32 + 8) = *(_OWORD *)(v8 + 8);
        *((void *)v32 + 3) = *((void *)v8 + 3);
        *((void *)v8 + 1) = 0;
        *((void *)v8 + 2) = 0;
        *((void *)v8 + 3) = 0;
        *((_DWORD *)v32 + 8) = *((_DWORD *)v8 + 8);
        v32 += 40;
        v8 += 40;
      }
      while (v8 != v31);
      uint64_t v27 = v37;
      uint64_t v8 = a1[1];
    }
    unint64_t v33 = *a1;
    *a1 = v27;
    a1[1] = v32;
    uint64_t v34 = a1[2];
    a1[2] = v39;
    unint64_t v38 = v8;
    uint64_t v39 = v34;
    unint64_t v36 = v33;
    unint64_t v37 = v33;
    if (v8 != v33)
    {
      do
      {
        unint64_t v38 = v8 - 40;
        uint64_t v41 = (void **)(v8 - 32);
        sub_3A6AB0(&v41);
        uint64_t v8 = v38;
      }
      while (v38 != v33);
      uint64_t v8 = v36;
    }
    if (v8) {
      operator delete(v8);
    }
    return v25;
  }
  else if (v8 == (char *)v6)
  {
    *(void *)uint64_t v8 = *(void *)a3;
    uint64_t v24 = &v5[40 * v7];
    *((void *)v24 + 2) = 0;
    *((void *)v24 + 3) = 0;
    *((void *)v24 + 1) = 0;
    *(_OWORD *)(v24 + 8) = *(_OWORD *)(a3 + 8);
    *((void *)v24 + 3) = *(void *)(a3 + 24);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *((_DWORD *)v24 + 8) = *(_DWORD *)(a3 + 32);
    a1[1] = v8 + 40;
  }
  else
  {
    unint64_t v10 = v8 + 40;
    unint64_t v11 = v6 - 40;
    uint64_t v12 = a1[1];
    if (v6 >= 0x28)
    {
      do
      {
        *(void *)uint64_t v12 = *(void *)v11;
        *((void *)v12 + 1) = 0;
        *((void *)v12 + 2) = 0;
        *((void *)v12 + 3) = 0;
        *(_OWORD *)(v12 + 8) = *(_OWORD *)(v11 + 8);
        *((void *)v12 + 3) = *(void *)(v11 + 24);
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        *(void *)(v11 + 24) = 0;
        *((_DWORD *)v12 + 8) = *(_DWORD *)(v11 + 32);
        v12 += 40;
        v11 += 40;
      }
      while (v11 < v6);
    }
    a1[1] = v12;
    if ((char *)v6 != v10)
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (void)v10) >> 3);
      uint64_t v15 = -40 * v14;
      unint64_t v16 = &v5[40 * v7 + 40 * v14];
      do
      {
        uint64_t v17 = &v16[v13];
        uint64_t v18 = v6 + v13;
        *(void *)(v6 + v13 - 40) = *(void *)&v16[v13 - 40];
        sub_1045034((void **)(v6 + v13 - 32));
        *(_OWORD *)(v18 - 32) = *(_OWORD *)&v16[v13 - 32];
        *(void *)(v18 - 16) = *(void *)&v16[v13 - 16];
        *((void *)v17 - 4) = 0;
        *((void *)v17 - 3) = 0;
        *((void *)v17 - 2) = 0;
        *(_DWORD *)(v18 - 8) = *(_DWORD *)&v16[v13 - 8];
        v13 -= 40;
      }
      while (v15 != v13);
    }
    *(void *)uint64_t v8 = *(void *)a3;
    long long v19 = (void **)&v5[40 * v7];
    sub_1045034(v19 + 1);
    *(_OWORD *)(v19 + 1) = *(_OWORD *)(a3 + 8);
    v19[3] = *(void **)(a3 + 24);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *((_DWORD *)v19 + 8) = *(_DWORD *)(a3 + 32);
  }
  return v8;
}

void sub_1044DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_1044E00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 16);
  if (v4 != *(void **)(a1 + 24)) {
    goto LABEL_23;
  }
  uint64_t v5 = *(unsigned char **)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 <= *(void *)a1)
  {
    unint64_t v14 = 0x999999999999999ALL * (((char *)v4 - v5) >> 3);
    if (v4 == (void *)v5) {
      unint64_t v14 = 1;
    }
    if (v14 >= 0x666666666666667) {
      sub_188D718();
    }
    unint64_t v15 = v14 >> 2;
    uint64_t v16 = 40 * v14;
    uint64_t v17 = (char *)operator new(40 * v14);
    uint64_t v18 = &v17[40 * v15];
    long long v19 = &v17[v16];
    if (v4 == (void *)v6)
    {
      *(void *)a1 = v17;
      *(void *)(a1 + 8) = v18;
      *(void *)(a1 + 16) = v18;
      *(void *)(a1 + 24) = v19;
      if (!v5) {
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v20 = (char *)v4 + (void)v18 - v6;
      uint64_t v21 = 40 * v15;
      do
      {
        unint64_t v22 = &v17[v21];
        *(_OWORD *)unint64_t v22 = *(_OWORD *)v6;
        *((void *)v22 + 2) = *(void *)(v6 + 16);
        *((void *)v22 + 3) = *(void *)(v6 + 24);
        *(void *)(v6 + 8) = 0;
        *(void *)(v6 + 16) = 0;
        *(void *)(v6 + 24) = 0;
        *((_DWORD *)v22 + 8) = *(_DWORD *)(v6 + 32);
        v21 += 40;
        v6 += 40;
      }
      while (v22 + 40 != v20);
      uint64_t v5 = *(unsigned char **)a1;
      uint64_t v23 = *(void *)(a1 + 8);
      uint64_t v24 = *(void *)(a1 + 16);
      *(void *)a1 = v17;
      *(void *)(a1 + 8) = v18;
      *(void *)(a1 + 16) = v20;
      *(void *)(a1 + 24) = v19;
      if (v24 != v23)
      {
        do
        {
          uint64_t v25 = v24 - 40;
          uint64_t v27 = (void **)(v24 - 32);
          sub_3A6AB0(&v27);
          uint64_t v24 = v25;
        }
        while (v25 != v23);
      }
      if (!v5) {
        goto LABEL_20;
      }
    }
    operator delete(v5);
LABEL_20:
    uint64_t v4 = *(void **)(a1 + 16);
    goto LABEL_23;
  }
  int64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *(void *)a1) >> 3);
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -v9;
  if ((void *)v6 == v4)
  {
    uint64_t v13 = (void *)(v6 - 40 * v9);
  }
  else
  {
    uint64_t v11 = -40 * v9;
    do
    {
      unint64_t v12 = v6 + v11;
      *(void *)(v6 + 40 * v10) = *(void *)v6;
      sub_1045034((void **)(v6 + v11 + 8));
      *(_OWORD *)(v12 + 8) = *(_OWORD *)(v6 + 8);
      *(void *)(v12 + 24) = *(void *)(v6 + 24);
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
      *(void *)(v6 + 24) = 0;
      *(_DWORD *)(v12 + 32) = *(_DWORD *)(v6 + 32);
      v6 += 40;
    }
    while ((void *)v6 != v4);
    uint64_t v4 = *(void **)(a1 + 8);
    uint64_t v13 = (void *)(v6 + 40 * v10);
  }
  *(void *)(a1 + 8) = &v4[5 * v10];
  *(void *)(a1 + 16) = v13;
  uint64_t v4 = v13;
LABEL_23:
  *uint64_t v4 = *(void *)a2;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = 0;
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(v4 + 1) = result;
  v4[3] = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *((_DWORD *)v4 + 8) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 16) += 40;
  return result;
}

void sub_1045034(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 3);
        if (v5)
        {
          *((void *)v3 - 2) = v5;
          operator delete(v5);
        }
        unint64_t v6 = (void *)*((void *)v3 - 6);
        if (v6)
        {
          *((void *)v3 - 5) = v6;
          operator delete(v6);
        }
        int64_t v7 = (void *)*((void *)v3 - 12);
        if (v7)
        {
          *((void *)v3 - 11) = v7;
          operator delete(v7);
        }
        uint64_t v8 = (void *)*((void *)v3 - 15);
        if (v8)
        {
          *((void *)v3 - 14) = v8;
          operator delete(v8);
        }
        v3 -= 160;
      }
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t **sub_10450DC(uint64_t **result)
{
  char v2 = *result;
  uint64_t v1 = result[1];
  if (*result != v1 && *result + 3 != v1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *v2;
    while (1)
    {
      uint64_t v6 = v5;
      uint64_t v5 = v2[v4 + 3];
      if (v6 == v5 && v2[v4 + 1] == v2[v4 + 4])
      {
        int64_t v7 = &v2[v4];
        if (v2[v4 + 2] == v2[v4 + 5]) {
          break;
        }
      }
      v4 += 3;
      if (&v2[v4 + 3] == v1) {
        return result;
      }
    }
    if (v7 != v1)
    {
      uint64_t v8 = (uint64_t)&v2[v4 + 6];
      if ((uint64_t *)v8 != v1)
      {
        do
        {
          if (*v7 != *(void *)v8 || v7[1] != *(void *)(v8 + 8) || v7[2] != *(void *)(v8 + 16))
          {
            *(_OWORD *)(v7 + 3) = *(_OWORD *)v8;
            v7[5] = *(void *)(v8 + 16);
            v7 += 3;
          }
          v8 += 24;
        }
        while ((uint64_t *)v8 != v1);
        uint64_t v1 = result[1];
      }
      uint64_t v9 = v7 + 3;
      if (v9 != v1) {
        result[1] = v9;
      }
    }
  }
  return result;
}

uint64_t sub_1045220(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = (unint64_t *)result;
LABEL_2:
  uint64_t v10 = a2 - 3;
  uint64_t v11 = v9;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v9 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (a2 - v11);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v25 = a2 - 3;
          unint64_t v26 = *(a2 - 3);
          unint64_t v27 = *v11;
          if (v26 < *v11
            || v26 == *v11 && (v26 = *(a2 - 2), unint64_t v27 = v11[1], v26 < v27)
            || v27 >= v26 && (uint64_t)*(a2 - 1) < (uint64_t)v11[2])
          {
            long long v58 = *(_OWORD *)v11;
            *(_OWORD *)uint64_t v11 = *(_OWORD *)v25;
            *(_OWORD *)uint64_t v25 = v58;
            unint64_t v28 = v11[2];
            unint64_t v11[2] = *(a2 - 1);
            *(a2 - 1) = v28;
          }
          break;
        case 3uLL:
          __n128 result = sub_1045834(v11, v11 + 3, v10);
          break;
        case 4uLL:
          __n128 result = sub_10461D4(v11, v11 + 3, v11 + 6, v10);
          break;
        case 5uLL:
          __n128 result = sub_1046348(v11, v11 + 3, v11 + 6, v11 + 9, v10);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 575)
    {
      uint64_t v29 = v11 + 3;
      BOOL v31 = v11 == a2 || v29 == a2;
      if (a5)
      {
        if (v31) {
          return result;
        }
        uint64_t v32 = 0;
        unint64_t v33 = v11;
        while (2)
        {
          unint64_t v35 = v33;
          unint64_t v33 = v29;
          unint64_t v36 = v35[3];
          if (v36 >= *v35)
          {
            if (v36 == *v35)
            {
              unint64_t v43 = v35[4];
              unint64_t v44 = v35[1];
              if (v43 < v44) {
                goto LABEL_51;
              }
              if (v44 < v43) {
                goto LABEL_49;
              }
            }
            else if (*v35 < v36)
            {
              goto LABEL_49;
            }
            if ((uint64_t)v35[5] >= (uint64_t)v35[2]) {
              goto LABEL_49;
            }
          }
LABEL_51:
          unint64_t v37 = v35[4];
          int64_t v38 = v35[5];
          *(_OWORD *)unint64_t v33 = *(_OWORD *)v35;
          double v33[2] = v35[2];
          uint64_t v34 = v11;
          if (v35 == v11) {
            goto LABEL_48;
          }
          uint64_t v39 = v32;
LABEL_56:
          uint64_t v40 = (char *)v11 + v39;
          unint64_t v41 = *(unint64_t *)((char *)v11 + v39 - 24);
          if (v36 >= v41)
          {
            if (v36 == v41)
            {
              unint64_t v42 = *(unint64_t *)((char *)v11 + v39 - 16);
              if (v37 >= v42)
              {
                if (v42 < v37)
                {
LABEL_60:
                  uint64_t v34 = v35;
                  goto LABEL_48;
                }
                goto LABEL_54;
              }
            }
            else
            {
              if (v41 < v36)
              {
                uint64_t v34 = (unint64_t *)((char *)v11 + v39);
LABEL_48:
                *uint64_t v34 = v36;
                v34[1] = v37;
                v34[2] = v38;
LABEL_49:
                uint64_t v29 = v33 + 3;
                v32 += 24;
                if (v33 + 3 == a2) {
                  return result;
                }
                continue;
              }
LABEL_54:
              if (v38 >= *(uint64_t *)((char *)v11 + v39 - 8)) {
                goto LABEL_60;
              }
            }
          }
          break;
        }
        v35 -= 3;
        *(_OWORD *)uint64_t v40 = *(_OWORD *)((char *)v11 + v39 - 24);
        *((void *)v40 + 2) = *((void *)v40 - 1);
        v39 -= 24;
        if (!v39)
        {
          uint64_t v34 = v11;
          goto LABEL_48;
        }
        goto LABEL_56;
      }
      if (v31) {
        return result;
      }
      while (2)
      {
        uint64_t v45 = v9;
        uint64_t v9 = v29;
        unint64_t v46 = v45[3];
        if (v46 < *v45)
        {
LABEL_83:
          unint64_t v47 = v45[4];
          int64_t v48 = v45[5];
          while (1)
          {
            do
            {
              uint64_t v49 = v45;
              *(_OWORD *)(v45 + 3) = *(_OWORD *)v45;
              v45[5] = v45[2];
              unint64_t v51 = *(v45 - 3);
              v45 -= 3;
              unint64_t v50 = v51;
              BOOL v52 = v46 == v51;
            }
            while (v46 < v51);
            if (!v52) {
              break;
            }
            unint64_t v53 = *(v49 - 2);
            if (v47 >= v53)
            {
              if (v53 < v47)
              {
LABEL_80:
                *uint64_t v49 = v46;
                v49[1] = v47;
                v49[2] = v48;
                goto LABEL_81;
              }
LABEL_85:
              if (v48 >= (uint64_t)*(v49 - 1)) {
                goto LABEL_80;
              }
            }
          }
          if (v50 < v46) {
            goto LABEL_80;
          }
          goto LABEL_85;
        }
        if (v46 == *v45)
        {
          unint64_t v54 = v45[4];
          unint64_t v55 = v45[1];
          if (v54 < v55) {
            goto LABEL_83;
          }
          if (v55 >= v54) {
            goto LABEL_97;
          }
        }
        else if (*v45 >= v46)
        {
LABEL_97:
          if ((uint64_t)v45[5] < (uint64_t)v45[2]) {
            goto LABEL_83;
          }
        }
LABEL_81:
        uint64_t v29 = v9 + 3;
        if (v9 + 3 == a2) {
          return result;
        }
        continue;
      }
    }
    if (v13 == 1) {
      break;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[3 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0xC01)
    {
      sub_1045834(v11, &v11[3 * (v15 >> 1)], v10);
      uint64_t v18 = &v11[3 * v16];
      sub_1045834(v11 + 3, v18 - 3, a2 - 6);
      sub_1045834(v11 + 6, &v11[3 * v16 + 3], a2 - 9);
      sub_1045834(v18 - 3, v17, &v11[3 * v16 + 3]);
      long long v57 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)uint64_t v17 = v57;
      unint64_t v19 = v11[2];
      unint64_t v11[2] = v18[2];
      v18[2] = v19;
      if (a5) {
        goto LABEL_18;
      }
    }
    else
    {
      sub_1045834(&v11[3 * (v15 >> 1)], v11, v10);
      if (a5) {
        goto LABEL_18;
      }
    }
    unint64_t v20 = *(v11 - 3);
    unint64_t v21 = *v11;
    if (v20 >= *v11)
    {
      if (v20 != *v11 || (v20 = *(v11 - 2), unint64_t v21 = v11[1], v20 >= v21))
      {
        if (v21 < v20 || (uint64_t)*(v11 - 1) >= (uint64_t)v11[2])
        {
          __n128 result = (uint64_t)sub_1045AB8(v11, (unint64_t)a2);
          uint64_t v11 = (unint64_t *)result;
LABEL_22:
          a5 = 0;
          a4 = -v13;
          goto LABEL_3;
        }
      }
    }
LABEL_18:
    unint64_t v22 = (unint64_t *)sub_1045CD0(v11, (unint64_t)a2);
    if ((v23 & 1) == 0) {
      goto LABEL_21;
    }
    BOOL v24 = sub_1045ED0(v11, v22);
    uint64_t v11 = v22 + 3;
    __n128 result = sub_1045ED0(v22 + 3, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v22;
      if (v24) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_21:
      __n128 result = sub_1045220(v9, v22, a3, -v13, a5 & 1);
      uint64_t v11 = v22 + 3;
      goto LABEL_22;
    }
  }
  if (v11 != a2)
  {
    return (uint64_t)sub_104652C(v11, a2, a2, a3);
  }
  return result;
}

uint64_t sub_1045834(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  if (*a2 >= *a1)
  {
    if (*a2 == *a1)
    {
      unint64_t v8 = a2[1];
      unint64_t v9 = a1[1];
      if (v8 < v9) {
        goto LABEL_2;
      }
      if (v9 < v8) {
        goto LABEL_13;
      }
    }
    else if (*a1 < v3)
    {
      goto LABEL_13;
    }
    if ((uint64_t)a2[2] < (uint64_t)a1[2]) {
      goto LABEL_2;
    }
LABEL_13:
    if (*a3 < v3) {
      goto LABEL_14;
    }
    if (*a3 == v3)
    {
      unint64_t v21 = a3[1];
      unint64_t v22 = a2[1];
      if (v21 < v22) {
        goto LABEL_14;
      }
      if (v22 < v21) {
        return 0;
      }
    }
    else if (v3 < *a3)
    {
      return 0;
    }
    if ((uint64_t)a3[2] >= (uint64_t)a2[2]) {
      return 0;
    }
LABEL_14:
    long long v10 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v10;
    uint64_t v12 = (uint64_t *)(a2 + 2);
    unint64_t v11 = a2[2];
    a2[2] = a3[2];
    a3[2] = v11;
    if (*a2 >= *a1)
    {
      if (*a2 == *a1)
      {
        unint64_t v23 = a2[1];
        unint64_t v24 = a1[1];
        if (v23 < v24) {
          goto LABEL_15;
        }
        if (v24 < v23) {
          return 1;
        }
      }
      else if (*a1 < *a2)
      {
        return 1;
      }
      if (*v12 >= (uint64_t)a1[2]) {
        return 1;
      }
    }
LABEL_15:
    long long v13 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    uint64_t v14 = (uint64_t *)(a1 + 2);
LABEL_24:
    uint64_t result = 2;
    uint64_t v20 = *v14;
    *uint64_t v14 = *v12;
    uint64_t *v12 = v20;
    return result;
  }
LABEL_2:
  if (*a3 < v3)
  {
LABEL_3:
    long long v4 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v4;
    char v5 = (uint64_t *)(a1 + 2);
    uint64_t result = 1;
    uint64_t v7 = *v5;
    *char v5 = a3[2];
    a3[2] = v7;
    return result;
  }
  if (*a3 != v3)
  {
    if (v3 < *a3) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  unint64_t v15 = a3[1];
  unint64_t v16 = a2[1];
  if (v15 < v16) {
    goto LABEL_3;
  }
  if (v16 >= v15)
  {
LABEL_21:
    if ((uint64_t)a3[2] < (uint64_t)a2[2]) {
      goto LABEL_3;
    }
  }
LABEL_22:
  long long v17 = *(_OWORD *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)a2 = v17;
  uint64_t v14 = (uint64_t *)(a2 + 2);
  uint64_t v18 = a1[2];
  a1[2] = a2[2];
  a2[2] = v18;
  if (*a3 < *a2)
  {
LABEL_23:
    long long v19 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v19;
    uint64_t v12 = (uint64_t *)(a3 + 2);
    goto LABEL_24;
  }
  if (*a3 == *a2)
  {
    unint64_t v25 = a3[1];
    unint64_t v26 = a2[1];
    if (v25 < v26) {
      goto LABEL_23;
    }
    if (v26 < v25) {
      return 1;
    }
  }
  else if (*a2 < *a3)
  {
    return 1;
  }
  if ((uint64_t)a3[2] < v18) {
    goto LABEL_23;
  }
  return 1;
}

unint64_t *sub_1045AB8(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  unint64_t v5 = *(void *)(a2 - 24);
  if (*a1 < v5) {
    goto LABEL_2;
  }
  if (*a1 != v5)
  {
    if (v5 < v2) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  unint64_t v10 = *(void *)(a2 - 16);
  if (v3 < v10) {
    goto LABEL_2;
  }
  if (v10 >= v3)
  {
LABEL_16:
    if (v4 >= *(void *)(a2 - 8)) {
      goto LABEL_17;
    }
LABEL_2:
    uint64_t i = a1;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = i[3];
        i += 3;
        unint64_t v7 = v8;
        if (v2 < v8) {
          goto LABEL_28;
        }
        if (v2 == v7) {
          break;
        }
        if (v7 >= v2) {
          goto LABEL_3;
        }
      }
      unint64_t v9 = i[1];
      if (v3 < v9) {
        goto LABEL_28;
      }
      if (v9 >= v3)
      {
LABEL_3:
        if (v4 < (uint64_t)i[2]) {
          goto LABEL_28;
        }
      }
    }
  }
LABEL_17:
  for (uint64_t i = a1 + 3; (unint64_t)i < a2 && v2 >= *i; i += 3)
  {
    if (v2 != *i)
    {
      if (*i < v2) {
        continue;
      }
LABEL_18:
      if (v4 < (uint64_t)i[2]) {
        break;
      }
      continue;
    }
    unint64_t v11 = i[1];
    if (v3 < v11) {
      break;
    }
    if (v11 >= v3) {
      goto LABEL_18;
    }
  }
LABEL_28:
  if ((unint64_t)i < a2)
  {
    for (a2 -= 24; ; a2 -= 24)
    {
      if (v2 < v5) {
        goto LABEL_32;
      }
      if (v2 == v5)
      {
        unint64_t v13 = *(void *)(a2 + 8);
        if (v3 < v13) {
          goto LABEL_32;
        }
        if (v13 < v3) {
          break;
        }
      }
      else if (v5 < v2)
      {
        break;
      }
      if (v4 >= *(void *)(a2 + 16)) {
        break;
      }
LABEL_32:
      unint64_t v12 = *(void *)(a2 - 24);
      unint64_t v5 = v12;
    }
  }
LABEL_55:
  while (2)
  {
    if ((unint64_t)i < a2)
    {
      long long v24 = *(_OWORD *)i;
      *(_OWORD *)uint64_t i = *(_OWORD *)a2;
      *(_OWORD *)a2 = v24;
      unint64_t v15 = i[3];
      i += 3;
      unint64_t v14 = v15;
      uint64_t v16 = *(i - 1);
      *(i - 1) = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = v16;
      while (1)
      {
        if (v2 < v14) {
          goto LABEL_50;
        }
        if (v2 == v14) {
          break;
        }
        if (v14 < v2) {
          goto LABEL_40;
        }
LABEL_39:
        if (v4 < (uint64_t)i[2]) {
          goto LABEL_50;
        }
LABEL_40:
        unint64_t v17 = i[3];
        i += 3;
        unint64_t v14 = v17;
      }
      unint64_t v18 = i[1];
      if (v3 >= v18)
      {
        if (v18 < v3) {
          goto LABEL_40;
        }
        goto LABEL_39;
      }
      while (1)
      {
        do
        {
LABEL_50:
          unint64_t v20 = *(void *)(a2 - 24);
          a2 -= 24;
          unint64_t v19 = v20;
          BOOL v21 = v2 == v20;
        }
        while (v2 < v20);
        if (!v21) {
          break;
        }
        unint64_t v22 = *(void *)(a2 + 8);
        if (v3 >= v22)
        {
          if (v22 < v3) {
            goto LABEL_55;
          }
LABEL_49:
          if (v4 >= *(void *)(a2 + 16)) {
            goto LABEL_55;
          }
        }
      }
      if (v19 < v2) {
        continue;
      }
      goto LABEL_49;
    }
    break;
  }
  if (i - 3 != a1)
  {
    *(_OWORD *)a1 = *(_OWORD *)(i - 3);
    a1[2] = *(i - 1);
  }
  *(i - 3) = v2;
  *(i - 2) = v3;
  *(i - 1) = v4;
  return i;
}

unint64_t sub_1045CD0(unint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  while (1)
  {
    unint64_t v6 = a1[v2 + 3];
    if (v6 < v3) {
      goto LABEL_4;
    }
    if (v6 != v3)
    {
      if (v3 < v6) {
        break;
      }
      goto LABEL_3;
    }
    unint64_t v7 = a1[v2 + 4];
    if (v7 < v4) {
      goto LABEL_4;
    }
    if (v4 < v7) {
      break;
    }
LABEL_3:
    if ((uint64_t)a1[v2 + 5] >= v5) {
      break;
    }
LABEL_4:
    v2 += 3;
  }
  unint64_t v8 = (unint64_t)&a1[v2 + 3];
  if (v2 * 8)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v10 = *(void *)(a2 - 24);
        a2 -= 24;
        unint64_t v9 = v10;
        if (v10 < v3) {
          goto LABEL_32;
        }
        if (v9 == v3) {
          break;
        }
        if (v3 >= v9) {
          goto LABEL_11;
        }
      }
      unint64_t v11 = *(void *)(a2 + 8);
      if (v11 < v4) {
        goto LABEL_32;
      }
      if (v4 >= v11)
      {
LABEL_11:
        if (*(void *)(a2 + 16) < v5) {
          goto LABEL_32;
        }
      }
    }
  }
LABEL_31:
  if (v8 < a2)
  {
    do
    {
      unint64_t v13 = *(void *)(a2 - 24);
      a2 -= 24;
      unint64_t v12 = v13;
      if (v13 < v3) {
        break;
      }
      if (v12 == v3)
      {
        unint64_t v14 = *(void *)(a2 + 8);
        if (v14 < v4) {
          break;
        }
        if (v4 < v14) {
          goto LABEL_31;
        }
      }
      else if (v3 < v12)
      {
        goto LABEL_31;
      }
    }
    while (*(void *)(a2 + 16) >= v5 && v8 < a2);
  }
LABEL_32:
  unint64_t v16 = v8;
  if (v8 < a2)
  {
    unint64_t v17 = a2;
LABEL_35:
    long long v27 = *(_OWORD *)v16;
    *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
    *(_OWORD *)unint64_t v17 = v27;
    uint64_t v18 = *(void *)(v16 + 16);
    *(void *)(v16 + 16) = *(void *)(v17 + 16);
    *(void *)(v17 + 16) = v18;
    while (1)
    {
      do
      {
        do
        {
          unint64_t v20 = *(void *)(v16 + 24);
          v16 += 24;
          unint64_t v19 = v20;
          BOOL v21 = v20 == v3;
        }
        while (v20 < v3);
        if (!v21)
        {
          if (v3 < v19) {
            goto LABEL_45;
          }
          goto LABEL_37;
        }
        unint64_t v22 = *(void *)(v16 + 8);
      }
      while (v22 < v4);
      if (v4 < v22) {
        break;
      }
LABEL_37:
      if (*(void *)(v16 + 16) >= v5) {
        goto LABEL_45;
      }
    }
    while (1)
    {
      while (1)
      {
LABEL_45:
        unint64_t v24 = *(void *)(v17 - 24);
        v17 -= 24;
        unint64_t v23 = v24;
        if (v24 < v3)
        {
LABEL_34:
          if (v16 >= v17) {
            goto LABEL_52;
          }
          goto LABEL_35;
        }
        if (v23 == v3) {
          break;
        }
        if (v3 >= v23) {
          goto LABEL_44;
        }
      }
      unint64_t v25 = *(void *)(v17 + 8);
      if (v25 < v4) {
        goto LABEL_34;
      }
      if (v4 >= v25)
      {
LABEL_44:
        if (*(void *)(v17 + 16) < v5) {
          goto LABEL_34;
        }
      }
    }
  }
LABEL_52:
  if ((unint64_t *)(v16 - 24) != a1)
  {
    *(_OWORD *)a1 = *(_OWORD *)(v16 - 24);
    a1[2] = *(void *)(v16 - 8);
  }
  *(void *)(v16 - 24) = v3;
  *(void *)(v16 - 16) = v4;
  *(void *)(v16 - 8) = v5;
  return v16 - 24;
}

BOOL sub_1045ED0(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v19 = a2 - 3;
      unint64_t v20 = *(a2 - 3);
      unint64_t v21 = *a1;
      if (v20 < *a1
        || v20 == *a1 && (v20 = *(a2 - 2), unint64_t v21 = a1[1], v20 < v21)
        || v21 >= v20 && (uint64_t)*(a2 - 1) < (uint64_t)a1[2])
      {
        long long v22 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v19;
        *(_OWORD *)unint64_t v19 = v22;
        unint64_t v23 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v23;
      }
      return result;
    case 3uLL:
      sub_1045834(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      sub_10461D4(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_1046348(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      unint64_t v6 = a1 + 6;
      sub_1045834(a1, a1 + 3, a1 + 6);
      unint64_t v7 = a1 + 9;
      if (a1 + 9 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (2)
  {
    unint64_t v11 = *v7;
    if (*v7 < *v6) {
      goto LABEL_9;
    }
    if (*v7 != *v6)
    {
      if (*v6 < v11) {
        goto LABEL_7;
      }
      goto LABEL_24;
    }
    unint64_t v17 = v7[1];
    unint64_t v18 = v6[1];
    if (v17 >= v18)
    {
      if (v18 < v17) {
        goto LABEL_7;
      }
LABEL_24:
      if ((uint64_t)v7[2] >= (uint64_t)v6[2]) {
        goto LABEL_7;
      }
    }
LABEL_9:
    unint64_t v12 = v7[1];
    int64_t v13 = v7[2];
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v6;
    v7[2] = v6[2];
    unint64_t v10 = a1;
    if (v6 == a1) {
      goto LABEL_6;
    }
    uint64_t v14 = v8;
    while (1)
    {
      unint64_t v15 = *(unint64_t *)((char *)a1 + v14 + 24);
      if (v11 >= v15)
      {
        if (v11 == v15)
        {
          unint64_t v16 = *(unint64_t *)((char *)a1 + v14 + 32);
          if (v12 < v16) {
            goto LABEL_13;
          }
          if (v16 < v12)
          {
LABEL_18:
            unint64_t v10 = v6;
            goto LABEL_6;
          }
        }
        else if (v15 < v11)
        {
          goto LABEL_18;
        }
        if (v13 >= *(uint64_t *)((char *)a1 + v14 + 40)) {
          break;
        }
      }
LABEL_13:
      v6 -= 3;
      *(_OWORD *)((char *)a1 + v14 + 48) = *(_OWORD *)((char *)a1 + v14 + 24);
      *(unint64_t *)((char *)a1 + v14 + 64) = *(unint64_t *)((char *)a1 + v14 + 40);
      v14 -= 24;
      if (v14 == -48)
      {
        unint64_t v10 = a1;
        goto LABEL_6;
      }
    }
    unint64_t v10 = (unint64_t *)((char *)a1 + v14 + 48);
LABEL_6:
    *unint64_t v10 = v11;
    v10[1] = v12;
    unint64_t v10[2] = v13;
    if (++v9 == 8) {
      return v7 + 3 == a2;
    }
LABEL_7:
    unint64_t v6 = v7;
    v8 += 24;
    v7 += 3;
    if (v7 != a2) {
      continue;
    }
    return 1;
  }
}

uint64_t sub_10461D4(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result = sub_1045834(a1, a2, a3);
  unint64_t v9 = *a4;
  unint64_t v10 = *a3;
  if (*a4 < *a3 || *a4 == *a3 && (v9 = a4[1], unint64_t v10 = a3[1], v9 < v10) || v10 >= v9 && (uint64_t)a4[2] < (uint64_t)a3[2])
  {
    long long v11 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v11;
    unint64_t v12 = a3[2];
    a3[2] = a4[2];
    a4[2] = v12;
    unint64_t v13 = *a3;
    unint64_t v14 = *a2;
    if (*a3 < *a2) {
      goto LABEL_3;
    }
    if (*a3 == *a2)
    {
      unint64_t v13 = a3[1];
      unint64_t v14 = a2[1];
      if (v13 < v14) {
        goto LABEL_3;
      }
    }
    if (v14 >= v13 && (uint64_t)a3[2] < (uint64_t)a2[2])
    {
LABEL_3:
      long long v15 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v15;
      unint64_t v16 = a2[2];
      a2[2] = a3[2];
      a3[2] = v16;
      unint64_t v17 = *a2;
      unint64_t v18 = *a1;
      if (*a2 < *a1
        || *a2 == *a1 && (unint64_t v17 = a2[1], v18 = a1[1], v17 < v18)
        || v18 >= v17 && (uint64_t)a2[2] < (uint64_t)a1[2])
      {
        long long v19 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)a2 = v19;
        unint64_t v20 = a1[2];
        a1[2] = a2[2];
        a2[2] = v20;
      }
    }
  }
  return result;
}

uint64_t sub_1046348(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result = sub_10461D4(a1, a2, a3, a4);
  unint64_t v11 = *a5;
  unint64_t v12 = *a4;
  if (*a5 < *a4 || *a5 == *a4 && (unint64_t v11 = a5[1], v12 = a4[1], v11 < v12) || v12 >= v11 && (uint64_t)a5[2] < (uint64_t)a4[2])
  {
    long long v13 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v13;
    unint64_t v14 = a4[2];
    a4[2] = a5[2];
    a5[2] = v14;
    unint64_t v15 = *a4;
    unint64_t v16 = *a3;
    if (*a4 < *a3) {
      goto LABEL_19;
    }
    if (*a4 == *a3)
    {
      unint64_t v15 = a4[1];
      unint64_t v16 = a3[1];
      if (v15 < v16) {
        goto LABEL_19;
      }
    }
    if (v16 >= v15 && (uint64_t)a4[2] < (uint64_t)a3[2])
    {
LABEL_19:
      long long v17 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v17;
      unint64_t v18 = a3[2];
      a3[2] = a4[2];
      a4[2] = v18;
      unint64_t v19 = *a3;
      unint64_t v20 = *a2;
      if (*a3 < *a2) {
        goto LABEL_4;
      }
      if (*a3 == *a2)
      {
        unint64_t v19 = a3[1];
        unint64_t v20 = a2[1];
        if (v19 < v20) {
          goto LABEL_4;
        }
      }
      if (v20 >= v19 && (uint64_t)a3[2] < (uint64_t)a2[2])
      {
LABEL_4:
        long long v21 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v21;
        unint64_t v22 = a2[2];
        a2[2] = a3[2];
        a3[2] = v22;
        unint64_t v23 = *a2;
        unint64_t v24 = *a1;
        if (*a2 < *a1
          || *a2 == *a1 && (unint64_t v23 = a2[1], v24 = a1[1], v23 < v24)
          || v24 >= v23 && (uint64_t)a2[2] < (uint64_t)a1[2])
        {
          long long v25 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)a2 = v25;
          unint64_t v26 = a1[2];
          a1[2] = a2[2];
          a2[2] = v26;
        }
      }
    }
  }
  return result;
}

unint64_t *sub_104652C(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    unint64_t v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = &a1[3 * v10];
      do
      {
        sub_10467CC((uint64_t)a1, a4, v9, v12);
        v12 -= 3;
        --v11;
      }
      while (v11);
    }
    long long v13 = v6;
    if (v6 != a3)
    {
      unint64_t v14 = v6;
      do
      {
        unint64_t v17 = *v14;
        unint64_t v18 = *a1;
        if (*v14 < *a1
          || *v14 == *a1 && (unint64_t v17 = v14[1], v18 = a1[1], v17 < v18)
          || v18 >= v17 && (uint64_t)v14[2] < (uint64_t)a1[2])
        {
          long long v15 = *(_OWORD *)v14;
          *(_OWORD *)unint64_t v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          unint64_t v16 = v14[2];
          v14[2] = a1[2];
          a1[2] = v16;
          sub_10467CC((uint64_t)a1, a4, v9, a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      long long v13 = a3;
    }
    if (v8 >= 25)
    {
      int64_t v19 = v8 / 0x18uLL;
      do
      {
        while (2)
        {
          uint64_t v21 = 0;
          unint64_t v22 = v6;
          long long v33 = *(_OWORD *)a1;
          unint64_t v23 = a1[2];
          unint64_t v24 = a1;
          do
          {
            long long v25 = v24;
            uint64_t v26 = v21 + 1;
            v24 += 3 * v21 + 3;
            uint64_t v27 = 2 * v21;
            uint64_t v21 = (2 * v21) | 1;
            int64_t v28 = v27 + 2;
            if (v28 >= v19) {
              goto LABEL_25;
            }
            unint64_t v29 = v24[3];
            if (*v24 < v29) {
              goto LABEL_24;
            }
            if (*v24 != v29)
            {
              if (v29 < *v24) {
                goto LABEL_25;
              }
LABEL_33:
              if ((uint64_t)v25[3 * v26 + 2] < (uint64_t)v24[5])
              {
LABEL_24:
                v24 += 3;
                uint64_t v21 = v28;
                goto LABEL_25;
              }
              goto LABEL_25;
            }
            unint64_t v30 = v24[1];
            unint64_t v31 = v24[4];
            if (v30 < v31) {
              goto LABEL_24;
            }
            if (v31 >= v30) {
              goto LABEL_33;
            }
LABEL_25:
            *(_OWORD *)long long v25 = *(_OWORD *)v24;
            v25[2] = v24[2];
          }
          while (v21 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
          v6 -= 3;
          if (v24 != v22 - 3)
          {
            *(_OWORD *)unint64_t v24 = *(_OWORD *)v6;
            v24[2] = *(v22 - 1);
            *(_OWORD *)unint64_t v6 = v33;
            *(v22 - 1) = v23;
            sub_10469C8((uint64_t)a1, (uint64_t)(v24 + 3), a4, 0xAAAAAAAAAAAAAAABLL * (v24 + 3 - a1));
            BOOL v20 = v19-- <= 2;
            if (v20) {
              return v13;
            }
            continue;
          }
          break;
        }
        *(_OWORD *)unint64_t v24 = v33;
        v24[2] = v23;
        BOOL v20 = v19-- <= 2;
      }
      while (!v20);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_10467CC(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 < 2) {
    return result;
  }
  int64_t v4 = (unint64_t)(a3 - 2) >> 1;
  if (v4 < (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 3))) {
    return result;
  }
  uint64_t v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 3)) | 1;
  unint64_t v6 = (unint64_t *)(result + 24 * v5);
  if (0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2 >= a3) {
    goto LABEL_6;
  }
  unint64_t v7 = v6[3];
  if (*v6 < v7)
  {
LABEL_5:
    v6 += 3;
    uint64_t v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2;
    goto LABEL_6;
  }
  if (*v6 != v7)
  {
    if (v7 < *v6) {
      goto LABEL_6;
    }
    goto LABEL_42;
  }
  unint64_t v20 = v6[1];
  unint64_t v21 = v6[4];
  if (v20 < v21) {
    goto LABEL_5;
  }
  if (v21 >= v20)
  {
LABEL_42:
    if (*(void *)(result + 24 * v5 + 16) < (int64_t)v6[5]) {
      goto LABEL_5;
    }
  }
LABEL_6:
  unint64_t v8 = *a4;
  if (*v6 < *a4) {
    return result;
  }
  if (*v6 == *a4)
  {
    unint64_t v9 = v6[1];
    unint64_t v10 = a4[1];
    if (v9 < v10) {
      return result;
    }
    if (v10 < v9) {
      goto LABEL_16;
    }
LABEL_15:
    if ((uint64_t)v6[2] < (uint64_t)a4[2]) {
      return result;
    }
    goto LABEL_16;
  }
  if (v8 >= *v6) {
    goto LABEL_15;
  }
LABEL_16:
  unint64_t v11 = a4[1];
  uint64_t v12 = a4[2];
  *(_OWORD *)a4 = *(_OWORD *)v6;
  a4[2] = v6[2];
  if (v4 < v5) {
    goto LABEL_38;
  }
  while (1)
  {
    long long v13 = v6;
    uint64_t v14 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    unint64_t v6 = (unint64_t *)(result + 24 * v5);
    uint64_t v15 = v14 + 2;
    if (v15 >= a3) {
      goto LABEL_23;
    }
    unint64_t v16 = v6[3];
    if (*v6 < v16)
    {
LABEL_22:
      v6 += 3;
      uint64_t v5 = v15;
      goto LABEL_23;
    }
    if (*v6 == v16)
    {
      unint64_t v18 = v6[1];
      unint64_t v19 = v6[4];
      if (v18 < v19) {
        goto LABEL_22;
      }
      if (v19 < v18) {
        goto LABEL_23;
      }
    }
    else if (v16 < *v6)
    {
      goto LABEL_23;
    }
    if (*(void *)(result + 24 * v5 + 16) < (int64_t)v6[5]) {
      goto LABEL_22;
    }
LABEL_23:
    if (*v6 < v8) {
      break;
    }
    if (*v6 != v8)
    {
      if (v8 < *v6) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    unint64_t v17 = v6[1];
    if (v17 < v11) {
      break;
    }
    if (v11 < v17) {
      goto LABEL_19;
    }
LABEL_18:
    if ((uint64_t)v6[2] < v12) {
      break;
    }
LABEL_19:
    *(_OWORD *)long long v13 = *(_OWORD *)v6;
    v13[2] = v6[2];
    if (v4 < v5) {
      goto LABEL_38;
    }
  }
  unint64_t v6 = v13;
LABEL_38:
  *unint64_t v6 = v8;
  v6[1] = v11;
  v6[2] = v12;
  return result;
}

uint64_t sub_10469C8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    unint64_t v6 = (unint64_t *)(result + 24 * (v4 >> 1));
    unint64_t v7 = *(void *)(a2 - 24);
    if (*v6 < v7) {
      goto LABEL_3;
    }
    if (*v6 == v7)
    {
      unint64_t v13 = v6[1];
      unint64_t v14 = *(void *)(a2 - 16);
      if (v13 < v14) {
        goto LABEL_3;
      }
      if (v14 < v13) {
        return result;
      }
    }
    else if (v7 < *v6)
    {
      return result;
    }
    if (*(void *)(result + 24 * v5 + 16) >= *(void *)(a2 - 8)) {
      return result;
    }
LABEL_3:
    unint64_t v8 = *(void *)(a2 - 16);
    uint64_t v9 = *(void *)(a2 - 8);
    *(_OWORD *)(a2 - 24) = *(_OWORD *)v6;
    *(void *)(a2 - 8) = *(void *)(result + 24 * v5 + 16);
    if (v4 < 2)
    {
LABEL_4:
      *unint64_t v6 = v7;
      v6[1] = v8;
      v6[2] = v9;
      return result;
    }
    while (1)
    {
      unint64_t v10 = v6;
      unint64_t v11 = v5 - 1;
      unint64_t v5 = (v5 - 1) >> 1;
      unint64_t v6 = (unint64_t *)(result + 24 * v5);
      if (*v6 >= v7)
      {
        if (*v6 == v7)
        {
          unint64_t v12 = v6[1];
          if (v12 < v8) {
            goto LABEL_11;
          }
          if (v8 < v12)
          {
LABEL_16:
            *unint64_t v10 = v7;
            v10[1] = v8;
            unint64_t v10[2] = v9;
            return result;
          }
        }
        else if (v7 < *v6)
        {
          goto LABEL_16;
        }
        if (*(void *)(result + 24 * v5 + 16) >= v9) {
          goto LABEL_16;
        }
      }
LABEL_11:
      *(_OWORD *)unint64_t v10 = *(_OWORD *)v6;
      unint64_t v10[2] = *(void *)(result + 24 * v5 + 16);
      if (v11 <= 1) {
        goto LABEL_4;
      }
    }
  }
  return result;
}

char *sub_1046AE0(char **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 152;
  unint64_t v8 = &(*a1)[152 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    unint64_t v27 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v5 - (void)v6) >> 3) + 1;
    if (v27 > 0x1AF286BCA1AF286) {
      sub_2E00();
    }
    unint64_t v28 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v9 - (void)v6) >> 3);
    if (2 * v28 > v27) {
      unint64_t v27 = 2 * v28;
    }
    if (v28 >= 0xD79435E50D7943) {
      unint64_t v29 = 0x1AF286BCA1AF286;
    }
    else {
      unint64_t v29 = v27;
    }
    unint64_t v60 = a1 + 2;
    if (v29)
    {
      if (v29 > 0x1AF286BCA1AF286) {
        sub_188D718();
      }
      unint64_t v30 = (char *)operator new(152 * v29);
    }
    else
    {
      unint64_t v30 = 0;
    }
    unint64_t v56 = v30;
    long long v57 = &v30[152 * v7];
    std::string __dst = v57;
    int64_t v59 = &v30[152 * v29];
    sub_1046E74((uint64_t)&v56, a3);
    int64_t v38 = v57;
    uint64_t v39 = *a1;
    uint64_t v40 = v57;
    if (*a1 != v8)
    {
      unint64_t v41 = v8;
      unint64_t v42 = v57;
      do
      {
        long long v43 = *(_OWORD *)((char *)v41 - 152);
        *(_OWORD *)(v42 - 136) = *(_OWORD *)((char *)v41 - 136);
        *(_OWORD *)(v42 - 152) = v43;
        long long v44 = *(_OWORD *)((char *)v41 - 120);
        long long v45 = *(_OWORD *)((char *)v41 - 104);
        long long v46 = *(_OWORD *)((char *)v41 - 88);
        *(_OWORD *)(v42 - 72) = *(_OWORD *)((char *)v41 - 72);
        *(_OWORD *)(v42 - 88) = v46;
        *(_OWORD *)(v42 - 104) = v45;
        *(_OWORD *)(v42 - 120) = v44;
        long long v47 = *(_OWORD *)((char *)v41 - 56);
        long long v48 = *(_OWORD *)((char *)v41 - 40);
        long long v49 = *(_OWORD *)((char *)v41 - 24);
        uint64_t v40 = v42 - 152;
        *((void *)v42 - 1) = *((void *)v41 - 1);
        *(_OWORD *)(v42 - 24) = v49;
        *(_OWORD *)(v42 - 40) = v48;
        *(_OWORD *)(v42 - 56) = v47;
        unint64_t v41 = (_OWORD *)((char *)v41 - 152);
        v42 -= 152;
      }
      while (v41 != (_OWORD *)v39);
    }
    long long v57 = v40;
    unint64_t v50 = a1[1];
    unint64_t v51 = (char *)__dst;
    int64_t v52 = v50 - v8;
    if (v50 != v8)
    {
      memmove(__dst, v8, v50 - v8);
      uint64_t v40 = v57;
      unint64_t v8 = a1[1];
    }
    unint64_t v53 = *a1;
    *a1 = v40;
    a1[1] = &v51[v52];
    unint64_t v54 = a1[2];
    a1[2] = v59;
    std::string __dst = v8;
    int64_t v59 = v54;
    unint64_t v56 = v53;
    long long v57 = v53;
    if (v8 != v53) {
      std::string __dst = &v53[(v8 - v53 - 152) % 0x98uLL];
    }
    if (v53) {
      operator delete(v53);
    }
    return v38;
  }
  else if (v8 == (char *)v5)
  {
    long long v31 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)unint64_t v8 = *(_OWORD *)a3;
    *((_OWORD *)v8 + 1) = v31;
    long long v32 = *(_OWORD *)(a3 + 32);
    long long v33 = *(_OWORD *)(a3 + 48);
    long long v34 = *(_OWORD *)(a3 + 80);
    *((_OWORD *)v8 + 4) = *(_OWORD *)(a3 + 64);
    *((_OWORD *)v8 + 5) = v34;
    *((_OWORD *)v8 + 2) = v32;
    *((_OWORD *)v8 + 3) = v33;
    long long v35 = *(_OWORD *)(a3 + 96);
    long long v36 = *(_OWORD *)(a3 + 112);
    long long v37 = *(_OWORD *)(a3 + 128);
    *((void *)v8 + 18) = *(void *)(a3 + 144);
    *((_OWORD *)v8 + 7) = v36;
    *((_OWORD *)v8 + 8) = v37;
    *((_OWORD *)v8 + 6) = v35;
    a1[1] = v8 + 152;
  }
  else
  {
    unint64_t v10 = v8 + 152;
    unint64_t v11 = v5 - 152;
    unint64_t v12 = a1[1];
    if (v5 >= 0x98)
    {
      do
      {
        long long v13 = *(_OWORD *)(v11 + 16);
        *(_OWORD *)unint64_t v12 = *(_OWORD *)v11;
        *((_OWORD *)v12 + 1) = v13;
        long long v14 = *(_OWORD *)(v11 + 32);
        long long v15 = *(_OWORD *)(v11 + 48);
        long long v16 = *(_OWORD *)(v11 + 80);
        *((_OWORD *)v12 + 4) = *(_OWORD *)(v11 + 64);
        *((_OWORD *)v12 + 5) = v16;
        *((_OWORD *)v12 + 2) = v14;
        *((_OWORD *)v12 + 3) = v15;
        long long v17 = *(_OWORD *)(v11 + 96);
        long long v18 = *(_OWORD *)(v11 + 112);
        long long v19 = *(_OWORD *)(v11 + 128);
        *((void *)v12 + 18) = *(void *)(v11 + 144);
        *((_OWORD *)v12 + 7) = v18;
        *((_OWORD *)v12 + 8) = v19;
        *((_OWORD *)v12 + 6) = v17;
        v11 += 152;
        v12 += 152;
      }
      while (v11 < v5);
    }
    a1[1] = v12;
    if ((char *)v5 != v10) {
      memmove(v8 + 152, v8, v5 - (void)v10);
    }
    long long v20 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)unint64_t v8 = *(_OWORD *)a3;
    *((_OWORD *)v8 + 1) = v20;
    long long v21 = *(_OWORD *)(a3 + 32);
    long long v22 = *(_OWORD *)(a3 + 48);
    long long v23 = *(_OWORD *)(a3 + 80);
    *((_OWORD *)v8 + 4) = *(_OWORD *)(a3 + 64);
    *((_OWORD *)v8 + 5) = v23;
    *((_OWORD *)v8 + 2) = v21;
    *((_OWORD *)v8 + 3) = v22;
    long long v24 = *(_OWORD *)(a3 + 96);
    long long v25 = *(_OWORD *)(a3 + 112);
    long long v26 = *(_OWORD *)(a3 + 128);
    *((void *)v8 + 18) = *(void *)(a3 + 144);
    *((_OWORD *)v8 + 7) = v25;
    *((_OWORD *)v8 + 8) = v26;
    *((_OWORD *)v8 + 6) = v24;
  }
  return v8;
}

void sub_1046E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    long long v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

__n128 sub_1046E74(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    unint64_t v6 = *(char **)a1;
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 <= *(void *)a1)
    {
      unint64_t v15 = 0xD79435E50D79436 * ((v4 - v6) >> 3);
      if (v4 == v6) {
        unint64_t v15 = 1;
      }
      if (v15 >= 0x1AF286BCA1AF287) {
        sub_188D718();
      }
      unint64_t v16 = v15 >> 2;
      uint64_t v17 = 152 * v15;
      long long v18 = (char *)operator new(152 * v15);
      long long v19 = &v18[152 * v16];
      uint64_t v21 = (uint64_t)&v4[-v5];
      BOOL v20 = v4 == (char *)v5;
      unint64_t v4 = v19;
      if (!v20)
      {
        uint64_t v22 = v21 / 152;
        unint64_t v4 = &v19[152 * v22];
        uint64_t v23 = 152 * v22;
        long long v24 = &v18[152 * v16];
        do
        {
          long long v25 = *(_OWORD *)(v5 + 16);
          *(_OWORD *)long long v24 = *(_OWORD *)v5;
          *((_OWORD *)v24 + 1) = v25;
          long long v26 = *(_OWORD *)(v5 + 32);
          long long v27 = *(_OWORD *)(v5 + 48);
          long long v28 = *(_OWORD *)(v5 + 80);
          *((_OWORD *)v24 + 4) = *(_OWORD *)(v5 + 64);
          *((_OWORD *)v24 + 5) = v28;
          *((_OWORD *)v24 + 2) = v26;
          *((_OWORD *)v24 + 3) = v27;
          long long v29 = *(_OWORD *)(v5 + 96);
          long long v30 = *(_OWORD *)(v5 + 112);
          long long v31 = *(_OWORD *)(v5 + 128);
          *((void *)v24 + 18) = *(void *)(v5 + 144);
          *((_OWORD *)v24 + 7) = v30;
          *((_OWORD *)v24 + 8) = v31;
          *((_OWORD *)v24 + 6) = v29;
          v24 += 152;
          v5 += 152;
          v23 -= 152;
        }
        while (v23);
      }
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v19;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v18[v17];
      if (v6)
      {
        operator delete(v6);
        unint64_t v4 = *(char **)(a1 + 16);
      }
    }
    else
    {
      int64_t v7 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v5 - *(void *)a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      uint64_t v11 = -152 * v9;
      unint64_t v12 = v5 + v11;
      long long v13 = &v4[-v5];
      if (v4 != (char *)v5)
      {
        memmove((void *)(v5 + v11), *(const void **)(a1 + 8), (size_t)&v4[-v5]);
        unint64_t v4 = *(char **)(a1 + 8);
      }
      long long v14 = &v4[152 * v10];
      unint64_t v4 = &v13[v12];
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = &v13[v12];
    }
  }
  long long v32 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
  *((_OWORD *)v4 + 1) = v32;
  long long v33 = *(_OWORD *)(a2 + 32);
  long long v34 = *(_OWORD *)(a2 + 48);
  long long v35 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v4 + 5) = v35;
  *((_OWORD *)v4 + 2) = v33;
  *((_OWORD *)v4 + 3) = v34;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v37 = *(_OWORD *)(a2 + 112);
  long long v38 = *(_OWORD *)(a2 + 128);
  *((void *)v4 + 18) = *(void *)(a2 + 144);
  *((_OWORD *)v4 + 7) = v37;
  *((_OWORD *)v4 + 8) = v38;
  *((__n128 *)v4 + 6) = result;
  *(void *)(a1 + 16) += 152;
  return result;
}

uint64_t sub_1047054(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v4 = v2 - 56;
        *(void *)(a1 + 16) = v2 - 56;
        unint64_t v5 = *(void **)(v2 - 24);
        if (!v5) {
          break;
        }
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 56;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_10470C4(char **a1, char *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  int64_t v7 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a2 - *a1) >> 3);
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v19 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - (void)v7) >> 3) + 1;
    if (v19 > 0x492492492492492) {
      sub_2E00();
    }
    unint64_t v20 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9 - (void)v7) >> 3);
    if (2 * v20 > v19) {
      unint64_t v19 = 2 * v20;
    }
    if (v20 >= 0x249249249249249) {
      unint64_t v21 = 0x492492492492492;
    }
    else {
      unint64_t v21 = v19;
    }
    long long v48 = a1 + 2;
    if (v21)
    {
      if (v21 > 0x492492492492492) {
        sub_188D718();
      }
      uint64_t v22 = (char *)operator new(56 * v21);
    }
    else
    {
      uint64_t v22 = 0;
    }
    long long v44 = v22;
    long long v45 = &v22[56 * v8];
    long long v46 = v45;
    long long v47 = &v22[56 * v21];
    sub_1047498((uint64_t)&v44, a3);
    long long v30 = v45;
    long long v31 = *a1;
    long long v32 = v45;
    if (*a1 != v4)
    {
      long long v33 = v45;
      long long v34 = v4;
      do
      {
        long long v32 = v33 - 56;
        long long v35 = *(_OWORD *)((char *)v34 - 56);
        *(_OWORD *)(v33 - 40) = *(_OWORD *)((char *)v34 - 40);
        *(_OWORD *)(v33 - 56) = v35;
        *((void *)v33 - 2) = 0;
        *((void *)v33 - 1) = 0;
        *((void *)v33 - 3) = 0;
        *(_OWORD *)(v33 - 24) = *(_OWORD *)((char *)v34 - 24);
        *((void *)v33 - 1) = *((void *)v34 - 1);
        *((void *)v34 - 3) = 0;
        *((void *)v34 - 2) = 0;
        *((void *)v34 - 1) = 0;
        v33 -= 56;
        long long v34 = (_OWORD *)((char *)v34 - 56);
      }
      while (v34 != (_OWORD *)v31);
    }
    long long v45 = v32;
    long long v36 = a1[1];
    long long v37 = v46;
    if (v36 != v4)
    {
      do
      {
        long long v38 = *((_OWORD *)v4 + 1);
        *long long v37 = *(_OWORD *)v4;
        v37[1] = v38;
        *((void *)v37 + 5) = 0;
        *((void *)v37 + 6) = 0;
        *((void *)v37 + 4) = 0;
        v37[2] = *((_OWORD *)v4 + 2);
        *((void *)v37 + 6) = *((void *)v4 + 6);
        *((void *)v4 + 4) = 0;
        *((void *)v4 + 5) = 0;
        *((void *)v4 + 6) = 0;
        long long v37 = (_OWORD *)((char *)v37 + 56);
        v4 += 56;
      }
      while (v4 != v36);
      long long v32 = v45;
      uint64_t v4 = a1[1];
    }
    uint64_t v39 = *a1;
    *a1 = v32;
    a1[1] = (char *)v37;
    uint64_t v40 = a1[2];
    a1[2] = v47;
    long long v46 = v4;
    long long v47 = v40;
    long long v44 = v39;
    long long v45 = v39;
    if (v4 == v39)
    {
      if (!v4) {
        return v30;
      }
    }
    else
    {
      do
      {
        while (1)
        {
          unint64_t v42 = v4 - 56;
          long long v46 = v4 - 56;
          long long v43 = (void *)*((void *)v4 - 3);
          if (!v43) {
            break;
          }
          *((void *)v4 - 2) = v43;
          operator delete(v43);
          uint64_t v4 = v46;
          if (v46 == v39) {
            goto LABEL_38;
          }
        }
        v4 -= 56;
      }
      while (v42 != v39);
LABEL_38:
      uint64_t v4 = v44;
      if (!v44) {
        return v30;
      }
    }
    operator delete(v4);
    return v30;
  }
  if (a2 == (char *)v6)
  {
    long long v28 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_OWORD *)a2 + 1) = v28;
    long long v29 = &v7[56 * v8];
    *((void *)v29 + 5) = 0;
    *((void *)v29 + 6) = 0;
    *((void *)v29 + 4) = 0;
    *((_OWORD *)v29 + 2) = *(_OWORD *)(a3 + 32);
    *((void *)v29 + 6) = *(void *)(a3 + 48);
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    a1[1] = a2 + 56;
  }
  else
  {
    uint64_t v10 = a2 + 56;
    unint64_t v11 = v6 - 56;
    unint64_t v12 = a1[1];
    if (v6 >= 0x38)
    {
      do
      {
        long long v13 = *(_OWORD *)(v11 + 16);
        *(_OWORD *)unint64_t v12 = *(_OWORD *)v11;
        *((_OWORD *)v12 + 1) = v13;
        *((void *)v12 + 5) = 0;
        *((void *)v12 + 6) = 0;
        *((void *)v12 + 4) = 0;
        *((_OWORD *)v12 + 2) = *(_OWORD *)(v11 + 32);
        *((void *)v12 + 6) = *(void *)(v11 + 48);
        *(void *)(v11 + 32) = 0;
        *(void *)(v11 + 40) = 0;
        *(void *)(v11 + 48) = 0;
        v12 += 56;
        v11 += 56;
      }
      while (v11 < v6);
    }
    a1[1] = v12;
    if ((char *)v6 != v10)
    {
      uint64_t v14 = 8 * ((uint64_t)(v6 - (void)v10) >> 3);
      unint64_t v15 = v6 - 24;
      do
      {
        unint64_t v16 = &v4[v14];
        long long v17 = *(_OWORD *)&v4[v14 - 40];
        *(_OWORD *)(v15 - 32) = *(_OWORD *)&v4[v14 - 56];
        *(_OWORD *)(v15 - 16) = v17;
        long long v18 = *(void **)v15;
        if (*(void *)v15)
        {
          *(void *)(v15 + 8) = v18;
          operator delete(v18);
          *(void *)unint64_t v15 = 0;
          *(void *)(v15 + 8) = 0;
          *(void *)(v15 + 16) = 0;
        }
        *(_OWORD *)unint64_t v15 = *(_OWORD *)(v16 - 24);
        *(void *)(v15 + 16) = *((void *)v16 - 1);
        *((void *)v16 - 3) = 0;
        *((void *)v16 - 2) = 0;
        *((void *)v16 - 1) = 0;
        v15 -= 56;
        v14 -= 56;
      }
      while (v14);
    }
    long long v23 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)a3;
    *((_OWORD *)v4 + 1) = v23;
    long long v24 = &v7[56 * v8];
    long long v27 = (void *)*((void *)v24 + 4);
    long long v26 = v24 + 32;
    long long v25 = v27;
    if (v27)
    {
      *(void *)&v7[56 * v8 + 40] = v25;
      operator delete(v25);
      void *v26 = 0;
      v26[1] = 0;
      v26[2] = 0;
    }
    *(_OWORD *)long long v26 = *(_OWORD *)(a3 + 32);
    *(void *)&v7[56 * v8 + 48] = *(void *)(a3 + 48);
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
  }
  return v4;
}

void sub_1047484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1047054((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1047498(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    unint64_t v5 = *(char **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    if (v6 <= *(void *)a1)
    {
      unint64_t v16 = 0xDB6DB6DB6DB6DB6ELL * ((v4 - v5) >> 3);
      if (v4 == v5) {
        unint64_t v16 = 1;
      }
      if (v16 >= 0x492492492492493) {
        sub_188D718();
      }
      unint64_t v17 = v16 >> 2;
      uint64_t v18 = 56 * v16;
      unint64_t v19 = (char *)operator new(56 * v16);
      unint64_t v20 = &v19[56 * v17];
      unint64_t v21 = &v19[v18];
      if (v4 == (char *)v6)
      {
        *(void *)a1 = v19;
        *(void *)(a1 + 8) = v20;
        *(void *)(a1 + 16) = v20;
        *(void *)(a1 + 24) = v21;
      }
      else
      {
        uint64_t v22 = &v4[(void)v20 - v6];
        uint64_t v23 = 56 * v17;
        do
        {
          long long v24 = &v19[v23];
          long long v25 = *(_OWORD *)(v6 + 16);
          *(_OWORD *)long long v24 = *(_OWORD *)v6;
          *((_OWORD *)v24 + 1) = v25;
          *((_OWORD *)v24 + 2) = *(_OWORD *)(v6 + 32);
          *((void *)v24 + 6) = *(void *)(v6 + 48);
          *(void *)(v6 + 32) = 0;
          *(void *)(v6 + 40) = 0;
          *(void *)(v6 + 48) = 0;
          v23 += 56;
          v6 += 56;
        }
        while (v24 + 56 != v22);
        unint64_t v5 = *(char **)a1;
        uint64_t v26 = *(void *)(a1 + 8);
        uint64_t v27 = *(void *)(a1 + 16);
        *(void *)a1 = v19;
        *(void *)(a1 + 8) = v20;
        *(void *)(a1 + 16) = v22;
        *(void *)(a1 + 24) = v21;
        while (v27 != v26)
        {
          long long v28 = *(void **)(v27 - 24);
          if (v28)
          {
            *(void *)(v27 - 16) = v28;
            operator delete(v28);
          }
          v27 -= 56;
        }
      }
      if (v5) {
        operator delete(v5);
      }
      uint64_t v4 = *(char **)(a1 + 16);
    }
    else
    {
      uint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - *(void *)a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      if ((char *)v6 == v4)
      {
        long long v29 = (char *)(v6 - 56 * v9);
      }
      else
      {
        uint64_t v11 = -56 * v9;
        do
        {
          unint64_t v12 = v6 + v11;
          long long v13 = *(_OWORD *)(v6 + 16);
          *(_OWORD *)unint64_t v12 = *(_OWORD *)v6;
          *(_OWORD *)(v12 + 16) = v13;
          unint64_t v15 = (void **)(v6 + v11 + 32);
          uint64_t v14 = *v15;
          if (*v15)
          {
            *(void *)(v12 + 40) = v14;
            operator delete(v14);
            *unint64_t v15 = 0;
            *(void *)(v6 + v11 + 40) = 0;
            *(void *)(v6 + v11 + 48) = 0;
          }
          *(_OWORD *)unint64_t v15 = *(_OWORD *)(v6 + 32);
          *(void *)(v12 + 48) = *(void *)(v6 + 48);
          *(void *)(v6 + 32) = 0;
          *(void *)(v6 + 40) = 0;
          *(void *)(v6 + 48) = 0;
          v6 += 56;
        }
        while ((char *)v6 != v4);
        uint64_t v4 = *(char **)(a1 + 8);
        long long v29 = (char *)(v6 + 56 * v10);
      }
      *(void *)(a1 + 8) = &v4[56 * v10];
      *(void *)(a1 + 16) = v29;
      uint64_t v4 = v29;
    }
  }
  long long v30 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *((_OWORD *)v4 + 1) = v30;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 6) = 0;
  *((void *)v4 + 4) = 0;
  __n128 result = *(__n128 *)(a2 + 32);
  *((__n128 *)v4 + 2) = result;
  *((void *)v4 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a1 + 16) += 56;
  return result;
}

char *sub_10476D4(int64x2_t *a1, void *a2, int *a3, int *a4, uint64_t *a5, int *a6, uint64_t a7)
{
  uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0x492492492492492) {
    sub_2E00();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v9) {
    unint64_t v9 = 0xDB6DB6DB6DB6DB6ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[1].i64[0] - a1->i64[0]) >> 3)) >= 0x249249249249249) {
    unint64_t v10 = 0x492492492492492;
  }
  else {
    unint64_t v10 = v9;
  }
  uint64_t v33 = 0;
  long long v34 = a1 + 1;
  if (v10 > 0x492492492492492) {
    sub_188D718();
  }
  uint64_t v17 = 56 * v10;
  uint64_t v18 = (char *)operator new(56 * v10);
  unint64_t v19 = &v18[56 * v8];
  v32.i64[1] = (uint64_t)v19;
  int v20 = *a3;
  int v21 = *a4;
  uint64_t v22 = *a5;
  int v23 = *a6;
  *(void *)unint64_t v19 = *a2;
  *((_DWORD *)v19 + 2) = v20;
  *((_DWORD *)v19 + 3) = v21;
  *((void *)v19 + 2) = v22;
  *((_DWORD *)v19 + 6) = v23;
  *((void *)v19 + 5) = 0;
  *((void *)v19 + 6) = 0;
  *((_OWORD *)v19 + 2) = *(_OWORD *)a7;
  *((void *)v19 + 6) = *(void *)(a7 + 16);
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  long long v24 = v19 + 56;
  uint64_t v25 = a1->i64[0];
  unint64_t v26 = a1->u64[1];
  if (v26 == a1->i64[0])
  {
    int64x2_t v28 = vdupq_n_s64(v26);
  }
  else
  {
    do
    {
      long long v27 = *(_OWORD *)(v26 - 56);
      *(_OWORD *)(v19 - 44) = *(_OWORD *)(v26 - 44);
      *(_OWORD *)(v19 - 56) = v27;
      *((void *)v19 - 2) = 0;
      *((void *)v19 - 1) = 0;
      *((void *)v19 - 3) = 0;
      *(_OWORD *)(v19 - 24) = *(_OWORD *)(v26 - 24);
      *((void *)v19 - 1) = *(void *)(v26 - 8);
      v19 -= 56;
      *(void *)(v26 - 24) = 0;
      *(void *)(v26 - 16) = 0;
      *(void *)(v26 - 8) = 0;
      v26 -= 56;
    }
    while (v26 != v25);
    int64x2_t v28 = *a1;
  }
  a1->i64[0] = (uint64_t)v19;
  a1->i64[1] = (uint64_t)v24;
  int64x2_t v32 = v28;
  uint64_t v29 = a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v18[v17];
  uint64_t v33 = v29;
  __n128 __p = (void *)v28.i64[0];
  sub_10478B4((uint64_t)&__p, v28.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v24;
}

void sub_10478B4(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    while (1)
    {
      uint64_t v5 = i - 56;
      *(void *)(a1 + 16) = i - 56;
      uint64_t v6 = *(void *)(i - 24);
      if (v6) {
        break;
      }
      i -= 56;
      if (v5 == a2) {
        return;
      }
    }
    uint64_t v7 = *(void *)(i - 16);
    uint64_t v8 = *(void **)(i - 24);
    if (v7 != v6)
    {
      uint64_t v9 = v7 - 160;
      do
      {
        uint64_t v11 = *(void **)(v9 + 96);
        if (v11)
        {
          *(void *)(v9 + 104) = v11;
          operator delete(v11);
        }
        unint64_t v12 = *(void **)(v9 + 72);
        if (v12)
        {
          *(void *)(v9 + 80) = v12;
          operator delete(v12);
        }
        long long v13 = *(void **)(v9 + 24);
        if (v13)
        {
          *(void *)(v9 + 32) = v13;
          operator delete(v13);
        }
        uint64_t v14 = *(void **)v9;
        if (*(void *)v9)
        {
          *(void *)(v9 + 8) = v14;
          operator delete(v14);
        }
        unint64_t v15 = *(void **)(v9 - 88);
        if (v15)
        {
          *(void *)(v9 - 80) = v15;
          operator delete(v15);
        }
        unint64_t v16 = *(void **)(v9 - 112);
        if (v16)
        {
          *(void *)(v9 - 104) = v16;
          operator delete(v16);
        }
        uint64_t v17 = *(void **)(v9 - 160);
        if (v17)
        {
          *(void *)(v9 - 152) = v17;
          operator delete(v17);
        }
        uint64_t v18 = *(void **)(v9 - 184);
        if (v18)
        {
          *(void *)(v9 - 176) = v18;
          operator delete(v18);
        }
        uint64_t v10 = v9 - 208;
        v9 -= 368;
      }
      while (v10 != v6);
      uint64_t v8 = *(void **)(i - 24);
    }
    *(void *)(i - 16) = v6;
    operator delete(v8);
  }
}

void sub_10479D8()
{
  unk_25FD7AF = 16641;
  word_25FD798 = 65;
  byte_25FD7C7 = 1;
  byte_25FD7B1 = 0;
}

uint64_t sub_1047A00(uint64_t a1, void *a2, uint64_t a3)
{
  __p[1].n128_u8[7] = 7;
  strcpy((char *)__p, "enabled");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (__p[1].n128_i8[7] < 0) {
    operator delete((void *)__p[0].n128_u64[0]);
  }
  *(unsigned char *)a1 = v6;
  __p[0].n128_u64[0] = (unint64_t)operator new(0x20uLL);
  *(__n128 *)((char *)__p + 8) = (__n128)xmmword_20B5EB0;
  strcpy((char *)__p[0].n128_u64[0], "use_rounded_traversal_time");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (__p[1].n128_i8[7] < 0) {
    operator delete((void *)__p[0].n128_u64[0]);
  }
  *(unsigned char *)(a1 + 1) = v7;
  __p[1].n128_u8[7] = 17;
  strcpy((char *)__p, "use_freeflow_time");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (__p[1].n128_i8[7] < 0) {
    operator delete((void *)__p[0].n128_u64[0]);
  }
  *(unsigned char *)(a1 + 2) = v8;
  __p[0].n128_u64[0] = (unint64_t)operator new(0x20uLL);
  *(__n128 *)((char *)__p + 8) = (__n128)xmmword_20B91B0;
  strcpy((char *)__p[0].n128_u64[0], "use_penalized_traversal_time");
  BOOL v9 = sub_29D62C(a2, (uint64_t)__p);
  if (__p[1].n128_i8[7] < 0) {
    operator delete((void *)__p[0].n128_u64[0]);
  }
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 3) = v9;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a3 + 17);
  *(unsigned char *)(a1 + 33) = sub_401FE4(*(void *)(a3 + 8));
  __p[1].n128_u8[7] = 9;
  strcpy((char *)__p, "ev_filter");
  uint64_t v10 = sub_560F4(a2, (uint64_t)__p);
  sub_105EBD4(a1 + 40, v10, *(void *)(a3 + 8));
  if (__p[1].n128_i8[7] < 0) {
    operator delete((void *)__p[0].n128_u64[0]);
  }
  *(_OWORD *)(a1 + 112) = 0u;
  uint64_t v11 = (void **)(a1 + 112);
  *(_OWORD *)(a1 + 160) = 0u;
  unint64_t v12 = (void **)(a1 + 160);
  *(_OWORD *)(a1 + 208) = 0u;
  long long v13 = (void **)(a1 + 208);
  *(void *)(a1 + 224) = 0;
  uint64_t v14 = (void **)(a1 + 136);
  unint64_t v15 = (void **)(a1 + 184);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  __p[0].n128_u64[0] = (unint64_t)operator new(0x20uLL);
  *(__n128 *)((char *)__p + 8) = (__n128)xmmword_20B8E90;
  strcpy((char *)__p[0].n128_u64[0], "allow_non_conventional_baseline");
  BOOL v16 = sub_29D62C(a2, (uint64_t)__p);
  if (__p[1].n128_i8[7] < 0) {
    operator delete((void *)__p[0].n128_u64[0]);
  }
  *(unsigned char *)(a1 + 232) = v16;
  __p[0].n128_u64[0] = (unint64_t)operator new(0x30uLL);
  *(__n128 *)((char *)__p + 8) = (__n128)xmmword_20B93C0;
  strcpy((char *)__p[0].n128_u64[0], "non_conventional_baseline_min_savings_ds");
  *(_DWORD *)(a1 + 236) = sub_5D2EC(a2, __p);
  if (__p[1].n128_i8[7] < 0) {
    operator delete((void *)__p[0].n128_u64[0]);
  }
  __p[0].n128_u64[0] = (unint64_t)operator new(0x30uLL);
  *(__n128 *)((char *)__p + 8) = (__n128)xmmword_20B9A80;
  strcpy((char *)__p[0].n128_u64[0], "non_conventional_baseline_min_relative_savings");
  double v17 = sub_5C7E8(a2, (uint64_t)__p);
  if (__p[1].n128_i8[7] < 0) {
    operator delete((void *)__p[0].n128_u64[0]);
  }
  *(double *)(a1 + 240) = v17;
  __p[1].n128_u8[7] = 14;
  strcpy((char *)__p, "add_debug_info");
  BOOL v18 = sub_29D62C(a2, (uint64_t)__p);
  if (__p[1].n128_i8[7] < 0) {
    operator delete((void *)__p[0].n128_u64[0]);
  }
  *(unsigned char *)(a1 + 248) = v18;
  HIBYTE(v43[2]) = 18;
  strcpy((char *)v43, "main_route_filters");
  unint64_t v19 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v43);
  sub_10483D8(v19, (uint64_t *)__p);
  int v20 = *v11;
  if (*v11)
  {
    *(void *)(a1 + 120) = v20;
    operator delete(v20);
    void *v11 = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
  }
  *(__n128 *)(a1 + 112) = __p[0];
  *(void *)(a1 + 128) = __p[1].n128_u64[0];
  memset(__p, 0, 24);
  if (SHIBYTE(v43[2]) < 0) {
    operator delete(v43[0]);
  }
  HIBYTE(v43[2]) = 21;
  strcpy((char *)v43, "ev_main_route_filters");
  int v21 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v43);
  sub_10483D8(v21, (uint64_t *)__p);
  uint64_t v22 = *v14;
  if (*v14)
  {
    *(void *)(a1 + 144) = v22;
    operator delete(v22);
    *uint64_t v14 = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(__n128 *)(a1 + 136) = __p[0];
  *(void *)(a1 + 152) = __p[1].n128_u64[0];
  memset(__p, 0, 24);
  if (SHIBYTE(v43[2]) < 0) {
    operator delete(v43[0]);
  }
  HIBYTE(v43[2]) = 16;
  strcpy((char *)v43, "baseline_filters");
  int v23 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v43);
  sub_10483D8(v23, (uint64_t *)__p);
  long long v24 = *v12;
  if (*v12)
  {
    *(void *)(a1 + 168) = v24;
    operator delete(v24);
    void *v12 = 0;
    *(void *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
  }
  *(__n128 *)(a1 + 160) = __p[0];
  *(void *)(a1 + 176) = __p[1].n128_u64[0];
  memset(__p, 0, 24);
  if (SHIBYTE(v43[2]) < 0) {
    operator delete(v43[0]);
  }
  HIBYTE(v43[2]) = 19;
  strcpy((char *)v43, "ev_baseline_filters");
  uint64_t v25 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v43);
  sub_10483D8(v25, (uint64_t *)__p);
  unint64_t v26 = *v15;
  if (*v15)
  {
    *(void *)(a1 + 192) = v26;
    operator delete(v26);
    *unint64_t v15 = 0;
    *(void *)(a1 + 192) = 0;
    *(void *)(a1 + 200) = 0;
  }
  *(__n128 *)(a1 + 184) = __p[0];
  *(void *)(a1 + 200) = __p[1].n128_u64[0];
  memset(__p, 0, 24);
  if (SHIBYTE(v43[2]) < 0) {
    operator delete(v43[0]);
  }
  v43[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v43[1] = xmmword_20B5EB0;
  strcpy(v43[0], "conventional_route_filters");
  long long v27 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v43);
  sub_10483D8(v27, (uint64_t *)__p);
  int64x2_t v28 = *v13;
  if (*v13)
  {
    *(void *)(a1 + 216) = v28;
    operator delete(v28);
    *long long v13 = 0;
    *(void *)(a1 + 216) = 0;
    *(void *)(a1 + 224) = 0;
  }
  *(__n128 *)(a1 + 208) = __p[0];
  *(void *)(a1 + 224) = __p[1].n128_u64[0];
  memset(__p, 0, 24);
  if (SHIBYTE(v43[2]) < 0) {
    operator delete(v43[0]);
  }
  __p[1].n128_u8[7] = 10;
  strcpy((char *)__p, "max_delays");
  uint64_t v29 = (uint64_t *)sub_5C4AC(a2, (uint64_t)__p);
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  sub_54DE8(&v40, *v29, v29[1], (v29[1] - *v29) >> 4);
  if (__p[1].n128_i8[7] < 0)
  {
    operator delete((void *)__p[0].n128_u64[0]);
    long long v30 = v40;
    long long v31 = (_DWORD *)v41;
    if (v40 == (_DWORD *)v41)
    {
LABEL_41:
      if (v30) {
        goto LABEL_53;
      }
      return a1;
    }
  }
  else
  {
    long long v30 = v40;
    long long v31 = (_DWORD *)v41;
    if (v40 == (_DWORD *)v41) {
      goto LABEL_41;
    }
  }
  int64x2_t v32 = *(__n128 **)(a1 + 16);
  do
  {
    if (v30[2] != 2)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    uint64_t v33 = *(void **)v30;
    __p[1].n128_u8[7] = 9;
    strcpy((char *)__p, "threshold");
    double v34 = sub_5C7E8(v33, (uint64_t)__p);
    HIBYTE(v43[2]) = 12;
    strcpy((char *)v43, "max_delay_ds");
    unsigned int v35 = sub_5D2EC(v33, v43);
    if (SHIBYTE(v43[2]) < 0)
    {
      operator delete(v43[0]);
      if ((__p[1].n128_i8[7] & 0x80000000) == 0) {
        goto LABEL_48;
      }
    }
    else if ((__p[1].n128_i8[7] & 0x80000000) == 0)
    {
      goto LABEL_48;
    }
    operator delete((void *)__p[0].n128_u64[0]);
LABEL_48:
    __p[0].n128_f64[0] = v34;
    __p[0].n128_u64[1] = v35;
    int64x2_t v32 = sub_1049B20((__n128 **)(a1 + 8), (uint64_t)v32, __p) + 1;
    v30 += 4;
  }
  while (v30 != v31);
  long long v30 = v40;
  if (v40)
  {
LABEL_53:
    uint64_t v36 = v41;
    long long v37 = v30;
    if ((_DWORD *)v41 != v30)
    {
      do
        uint64_t v36 = sub_55198(v36 - 16);
      while ((_DWORD *)v36 != v30);
      long long v37 = v40;
    }
    uint64_t v41 = (uint64_t)v30;
    operator delete(v37);
  }
  return a1;
}

void sub_10481E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, void **a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v40 = *a14;
  if (*a14)
  {
    v33[27] = v40;
    operator delete(v40);
    uint64_t v41 = *v38;
    if (!*v38)
    {
LABEL_3:
      uint64_t v42 = *v37;
      if (!*v37) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v41 = *v38;
    if (!*v38) {
      goto LABEL_3;
    }
  }
  v33[24] = v41;
  operator delete(v41);
  uint64_t v42 = *v37;
  if (!*v37)
  {
LABEL_4:
    long long v43 = *v36;
    if (!*v36) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  v33[21] = v42;
  operator delete(v42);
  long long v43 = *v36;
  if (!*v36)
  {
LABEL_5:
    long long v44 = *v35;
    if (!*v35) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  v33[18] = v43;
  operator delete(v43);
  long long v44 = *v35;
  if (!*v35)
  {
LABEL_7:
    sub_39EB70(v34);
    long long v45 = *a17;
    if (*a17)
    {
      double v33[2] = v45;
      operator delete(v45);
    }
    _Unwind_Resume(a1);
  }
LABEL_6:
  v33[15] = v44;
  operator delete(v44);
  goto LABEL_7;
}

void sub_10483D8(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = v2 - *a1;
  if (v2 != *a1)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF1) {
      sub_2E00();
    }
    BOOL v6 = operator new(2 * v4);
    *a2 = (uint64_t)v6;
    a2[1] = (uint64_t)v6;
    a2[2] = (uint64_t)v6 + 32 * (v4 >> 4);
    do
    {
      if (*(_DWORD *)(v3 + 8) != 2)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      BOOL v8 = *(void **)v3;
      char v15 = 8;
      strcpy((char *)__p, "criteria");
      uint64_t v9 = sub_561B0(v8, (uint64_t)__p);
      int v10 = sub_104A030(v9);
      int v11 = v10;
      if (v15 < 0)
      {
        operator delete(__p[0]);
        if (v11 != 115)
        {
LABEL_12:
          unint64_t v12 = a2[1];
          if (v12 >= a2[2])
          {
            uint64_t v7 = sub_1049EC8(a2, v8);
          }
          else
          {
            sub_1049498(a2[1], v8);
            uint64_t v7 = v12 + 32;
            a2[1] = v12 + 32;
          }
          a2[1] = v7;
        }
      }
      else if (v10 != 115)
      {
        goto LABEL_12;
      }
      v3 += 16;
    }
    while (v3 != v2);
  }
}

void sub_1048550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  double v17 = *(void **)v15;
  if (!*(void *)v15) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v15 + 8) = v17;
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

unint64_t sub_10485BC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 == v4) {
    return 0xCFDCFDCFDCFDCFDDLL * ((v4 - v3) >> 3);
  }
  unint64_t v8 = v4 - v3 - 936;
  if (v8 < 0x3A8)
  {
    uint64_t v9 = *a2;
    do
    {
LABEL_7:
      *(_WORD *)(v9 + 928) = 257;
      v9 += 936;
    }
    while (v9 != v4);
    goto LABEL_8;
  }
  unint64_t v10 = v8 / 0x3A8 + 1;
  uint64_t v9 = v3 + 936 * (v10 & 0xFFFFFFFFFFFFFELL);
  uint64_t v11 = v10 & 0xFFFFFFFFFFFFFELL;
  uint64_t v12 = *a2;
  do
  {
    *(_WORD *)(v12 + 928) = 257;
    *(_WORD *)(v12 + 1864) = 257;
    v12 += 1872;
    v11 -= 2;
  }
  while (v11);
  if (v10 != (v10 & 0xFFFFFFFFFFFFFELL)) {
    goto LABEL_7;
  }
LABEL_8:
  if (!*(unsigned char *)a1) {
    return 0xCFDCFDCFDCFDCFDDLL * ((v4 - v3) >> 3);
  }
  *(double *)&__n128 __p = 0.0;
  unint64_t v56 = 0;
  uint64_t v57 = 0;
  sub_10491EC(a1, a2, a3, (double **)(a1 + 112), &__p);
  long long v13 = __p;
  uint64_t v14 = a2[1] - *a2;
  if (v14)
  {
    uint64_t v15 = v14 / 936;
    BOOL v16 = (char *)(*a2 + 929);
    double v17 = __p;
    do
    {
      *(v16 - 1) = *v17 != 0;
      if (*v17++) {
        BOOL v19 = *v16 == 0;
      }
      else {
        BOOL v19 = 1;
      }
      char v20 = !v19;
      *BOOL v16 = v20;
      v16 += 936;
      --v15;
    }
    while (v15);
  }
  else if (*(double *)&__p == 0.0)
  {
    goto LABEL_23;
  }
  unint64_t v56 = v13;
  operator delete(v13);
LABEL_23:
  if (*(unsigned char *)(a1 + 33))
  {
    *(double *)&__n128 __p = 0.0;
    unint64_t v56 = 0;
    uint64_t v57 = 0;
    sub_10491EC(a1, a2, a3, (double **)(a1 + 136), &__p);
    int v23 = __p;
    uint64_t v24 = a2[1] - *a2;
    if (v24)
    {
      uint64_t v25 = v24 / 936;
      unint64_t v26 = (BOOL *)(*a2 + 928);
      long long v27 = (unsigned __int8 *)__p;
      do
      {
        int v28 = *v27++;
        BOOL *v26 = v28 != 0;
        v26 += 936;
        --v25;
      }
      while (v25);
      goto LABEL_29;
    }
    if (*(double *)&__p != 0.0)
    {
LABEL_29:
      unint64_t v56 = v23;
      operator delete(v23);
    }
  }
  int v29 = sub_1048A98(a1, a2, a3);
  *(double *)&__n128 __p = (double)v29;
  int v54 = sub_EFB0C8((double *)&__p, (double **)(a1 + 8)) + v29;
  uint64_t v30 = *a2;
  uint64_t v31 = a2[1];
  uint64_t v32 = *a2;
  if (*a2 != v31)
  {
    uint64_t v33 = v30 + 936;
    uint64_t v32 = *a2;
    if (v30 + 936 != v31)
    {
      uint64_t v32 = *a2;
      do
      {
        if (*(double *)(v33 + 776) < *(double *)(v32 + 776)) {
          uint64_t v32 = v33;
        }
        v33 += 936;
      }
      while (v33 != v31);
    }
  }
  double v34 = *(double *)(v32 + 776);
  if (v30 == v31) {
    goto LABEL_46;
  }
  do
  {
    if (!*(unsigned char *)(a1 + 33) || *(double *)(v30 + 776) <= v34) {
      sub_1049018(a1, &v54, v30);
    }
    v30 += 936;
  }
  while (v30 != v31);
  uint64_t v36 = *a2;
  uint64_t v35 = a2[1];
  if (*a2 == v35)
  {
LABEL_46:
    unint64_t v21 = 0;
    goto LABEL_51;
  }
  unint64_t v37 = v35 - v36 - 936;
  if (v37 < 0x3A8)
  {
    unint64_t v21 = 0;
    uint64_t v38 = *a2;
    do
    {
LABEL_50:
      v21 += *(unsigned __int8 *)(v38 + 928);
      v38 += 936;
    }
    while (v38 != v35);
    goto LABEL_51;
  }
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  unint64_t v41 = v37 / 0x3A8 + 1;
  uint64_t v38 = v36 + 936 * (v41 & 0xFFFFFFFFFFFFFELL);
  uint64_t v42 = v41 & 0xFFFFFFFFFFFFFELL;
  do
  {
    v39 += *(unsigned __int8 *)(v36 + 928);
    v40 += *(unsigned __int8 *)(v36 + 1864);
    v36 += 1872;
    v42 -= 2;
  }
  while (v42);
  unint64_t v21 = v40 + v39;
  if (v41 != (v41 & 0xFFFFFFFFFFFFFELL)) {
    goto LABEL_50;
  }
LABEL_51:
  if (!*(unsigned char *)(a1 + 33)) {
    return v21;
  }
  if (sub_105EBD8(a1 + 40, (uint64_t)a2) >= v21)
  {
    uint64_t v44 = *a2;
    uint64_t v45 = a2[1];
    if (*a2 == v45) {
      return 0;
    }
  }
  else
  {
    int v43 = sub_1048A98(a1, a2, a3);
    *(double *)&__n128 __p = (double)v43;
    int v54 = sub_EFB0C8((double *)&__p, (double **)(a1 + 8)) + v43;
    uint64_t v44 = *a2;
    uint64_t v45 = a2[1];
    if (*a2 == v45) {
      return 0;
    }
  }
  do
  {
    if (*(double *)(v44 + 776) != v34) {
      sub_1049018(a1, &v54, v44);
    }
    v44 += 936;
  }
  while (v44 != v45);
  uint64_t v47 = *a2;
  uint64_t v46 = a2[1];
  if (*a2 == v46) {
    return 0;
  }
  unint64_t v48 = v46 - v47 - 936;
  if (v48 < 0x3A8)
  {
    unint64_t v21 = 0;
    uint64_t v49 = *a2;
    do
    {
LABEL_67:
      v21 += *(unsigned __int8 *)(v49 + 928);
      v49 += 936;
    }
    while (v49 != v46);
    return v21;
  }
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  unint64_t v52 = v48 / 0x3A8 + 1;
  uint64_t v49 = v47 + 936 * (v52 & 0xFFFFFFFFFFFFFELL);
  uint64_t v53 = v52 & 0xFFFFFFFFFFFFFELL;
  do
  {
    v50 += *(unsigned __int8 *)(v47 + 928);
    v51 += *(unsigned __int8 *)(v47 + 1864);
    v47 += 1872;
    v53 -= 2;
  }
  while (v53);
  unint64_t v21 = v51 + v50;
  if (v52 != (v52 & 0xFFFFFFFFFFFFFELL)) {
    goto LABEL_67;
  }
  return v21;
}

void sub_1048A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1048A98(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  sub_10491EC(a1, a2, a3, (double **)(a1 + 160), &v48);
  if (*(unsigned char *)(a1 + 33)) {
    sub_10491EC(a1, a2, a3, (double **)(a1 + 184), &v48);
  }
  uint64_t v6 = a2[1] - *a2;
  if (!v6)
  {
    uint64_t v9 = 0x7FFFFFFFLL;
    goto LABEL_103;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0xCFDCFDCFDCFDCFDDLL * (v6 >> 3);
  uint64_t v9 = 0x7FFFFFFFLL;
  uint64_t v10 = 0x7FFFFFFFLL;
  int v11 = 0x7FFFFFFF;
  do
  {
    if (!*((unsigned char *)v48 + v7)) {
      goto LABEL_11;
    }
    uint64_t v13 = *a2;
    uint64_t v14 = (std::string **)(*a2 + 936 * v7);
    if (*(unsigned char *)(a1 + 248))
    {
      uint64_t v15 = *v14;
      char v47 = 9;
      strcpy((char *)__p, " baseline");
      sub_45FE3C(v15, (const std::string::value_type *)__p);
      if (v47 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v16 = 8;
    if (*(unsigned char *)(a1 + 3)) {
      uint64_t v16 = 760;
    }
    uint64_t v17 = v13 + 936 * v7 + 8;
    double v18 = *(double *)(v17 + v16);
    if (v18 >= 0.0)
    {
      if (v18 >= 4.50359963e15) {
        goto LABEL_26;
      }
      uint64_t v19 = (uint64_t)(v18 + v18) + 1;
    }
    else
    {
      if (v18 <= -4.50359963e15) {
        goto LABEL_26;
      }
      uint64_t v19 = (uint64_t)(v18 + v18);
      if (v19 >= 1) {
        --v19;
      }
    }
    double v18 = (double)(v19 >> 1);
LABEL_26:
    uint64_t v20 = (int)v18;
    if (!*(unsigned char *)(a1 + 1)) {
      goto LABEL_39;
    }
    int v21 = (int)v20 / 10;
    int v22 = (int)v20 % 10;
    if ((int)v20 < 0) {
      char v23 = -5;
    }
    else {
      char v23 = 5;
    }
    double v24 = ceil((double)(int)(v21 + (((103 * (char)(v23 + v22)) >> 15) & 1)+ ((103 * (char)(v23 + v22)) >> 10))/ 60.0)* 60.0* 10.0;
    if (v24 >= 0.0)
    {
      if (v24 < 4.50359963e15)
      {
        uint64_t v25 = (uint64_t)(v24 + v24) + 1;
LABEL_37:
        double v24 = (double)(v25 >> 1);
      }
    }
    else if (v24 > -4.50359963e15)
    {
      uint64_t v25 = (uint64_t)(v24 + v24);
      if (v25 >= 1) {
        --v25;
      }
      goto LABEL_37;
    }
    uint64_t v20 = (int)v24;
LABEL_39:
    double v26 = *(double *)(v13 + 936 * v7 + 32);
    if (v26 >= 0.0)
    {
      if (v26 >= 4.50359963e15) {
        goto LABEL_47;
      }
      uint64_t v27 = (uint64_t)(v26 + v26) + 1;
    }
    else
    {
      if (v26 <= -4.50359963e15) {
        goto LABEL_47;
      }
      uint64_t v27 = (uint64_t)(v26 + v26);
      if (v27 >= 1) {
        --v27;
      }
    }
    double v26 = (double)(v27 >> 1);
LABEL_47:
    int v28 = (int)v26;
    if (!*(unsigned char *)(a1 + 1)) {
      goto LABEL_60;
    }
    int v29 = v28 / 10;
    int v30 = v28 % 10;
    if (v28 < 0) {
      char v31 = -5;
    }
    else {
      char v31 = 5;
    }
    double v32 = ceil((double)(int)(v29 + (((103 * (char)(v31 + v30)) >> 15) & 1)+ ((103 * (char)(v31 + v30)) >> 10))/ 60.0)* 60.0* 10.0;
    if (v32 >= 0.0)
    {
      if (v32 < 4.50359963e15)
      {
        uint64_t v33 = (uint64_t)(v32 + v32) + 1;
LABEL_58:
        double v32 = (double)(v33 >> 1);
      }
    }
    else if (v32 > -4.50359963e15)
    {
      uint64_t v33 = (uint64_t)(v32 + v32);
      if (v33 >= 1) {
        --v33;
      }
      goto LABEL_58;
    }
    int v28 = (int)v32;
LABEL_60:
    if (*(unsigned char *)(a1 + 2))
    {
      if (v28 != 0x7FFFFFFF && (v11 == 0x7FFFFFFF || v28 < v11)
        || (v28 == v11 ? (BOOL v34 = (int)v20 < (int)v9) : (BOOL v34 = 0), v34))
      {
        int v11 = v28;
        uint64_t v9 = v20;
      }
    }
    else
    {
      if ((int)v20 < (int)v9 || v9 == 0x7FFFFFFF) {
        unsigned int v36 = v20;
      }
      else {
        unsigned int v36 = v9;
      }
      if (v20 == 0x7FFFFFFF) {
        uint64_t v9 = v9;
      }
      else {
        uint64_t v9 = v36;
      }
      unint64_t v37 = *(double **)(a1 + 208);
      uint64_t v38 = *(unsigned __int8 **)(a1 + 216);
      if (v37 == (double *)v38)
      {
LABEL_5:
        if ((int)v20 < (int)v10 || v10 == 0x7FFFFFFF) {
          uint64_t v10 = v20;
        }
        else {
          uint64_t v10 = v10;
        }
      }
      else
      {
        while (1)
        {
          double v39 = *(double *)(v17 + 8 * *(unsigned __int8 *)v37);
          double v40 = v37[1];
          if (*((unsigned char *)v37 + 16) == 1 ? v39 > v40 : v39 < v40) {
            break;
          }
          v37 += 4;
          if (v37 == (double *)v38) {
            goto LABEL_5;
          }
        }
        if (*(unsigned char *)(a1 + 248))
        {
          uint64_t v42 = *v14;
          char v47 = 15;
          strcpy((char *)__p, " unconventional");
          sub_45FE3C(v42, (const std::string::value_type *)__p);
          if (v47 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
LABEL_11:
    ++v7;
  }
  while (v7 != v8);
  if (v10 != 0x7FFFFFFF)
  {
    if (!*(unsigned char *)(a1 + 232) || (int)v10 - (int)v9 < *(_DWORD *)(a1 + 236)) {
      goto LABEL_102;
    }
    double v43 = (*(double *)(a1 + 240) + 1.0) * (double)(int)v9;
    if (v43 >= 0.0)
    {
      if (v43 < 4.50359963e15)
      {
        uint64_t v44 = (uint64_t)(v43 + v43) + 1;
        goto LABEL_100;
      }
    }
    else if (v43 > -4.50359963e15)
    {
      uint64_t v44 = (uint64_t)(v43 + v43);
      if (v44 >= 1) {
        --v44;
      }
LABEL_100:
      double v43 = (double)(v44 >> 1);
    }
    if ((int)v10 < (int)v43) {
LABEL_102:
    }
      uint64_t v9 = v10;
  }
LABEL_103:
  if (v48)
  {
    uint64_t v49 = v48;
    operator delete(v48);
  }
  return v9;
}

void sub_1048FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0)
  {
    operator delete(__p);
    uint64_t v17 = a15;
    if (!a15) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v17 = a15;
    if (!a15) {
      goto LABEL_3;
    }
  }
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

void sub_1049018(uint64_t a1, int *a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 929)) {
    return;
  }
  double v3 = *(double *)(a3 + 16);
  if (v3 >= 0.0)
  {
    if (v3 >= 4.50359963e15) {
      goto LABEL_10;
    }
    uint64_t v4 = (uint64_t)(v3 + v3) + 1;
  }
  else
  {
    if (v3 <= -4.50359963e15) {
      goto LABEL_10;
    }
    uint64_t v4 = (uint64_t)(v3 + v3);
    if (v4 >= 1) {
      --v4;
    }
  }
  double v3 = (double)(v4 >> 1);
LABEL_10:
  int v5 = (int)v3;
  if (!*(unsigned char *)(a1 + 1)) {
    goto LABEL_23;
  }
  int v6 = v5 / 10;
  int v7 = v5 % 10;
  if (v5 < 0) {
    char v8 = -5;
  }
  else {
    char v8 = 5;
  }
  double v9 = ceil((double)(int)(v6 + (((103 * (char)(v8 + v7)) >> 15) & 1) + ((103 * (char)(v8 + v7)) >> 10))/ 60.0)* 60.0* 10.0;
  if (v9 >= 0.0)
  {
    if (v9 < 4.50359963e15)
    {
      uint64_t v10 = (uint64_t)(v9 + v9) + 1;
LABEL_21:
      double v9 = (double)(v10 >> 1);
    }
  }
  else if (v9 > -4.50359963e15)
  {
    uint64_t v10 = (uint64_t)(v9 + v9);
    if (v10 >= 1) {
      --v10;
    }
    goto LABEL_21;
  }
  int v5 = (int)v9;
LABEL_23:
  if (v5 <= *a2)
  {
    if (*(unsigned char *)(a1 + 248))
    {
      int v11 = *(std::string **)a3;
      char v13 = 19;
      strcpy(__p, " MainRouteCandidate");
      sub_45FE3C(v11, __p);
      if (v13 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }
  else
  {
    *(_WORD *)(a3 + 928) = 0;
  }
}

void sub_10491D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10491EC(uint64_t a1, uint64_t *a2, uint64_t a3, double **a4, void **a5)
{
  uint64_t v10 = *a5;
  if (*a5 == a5[1])
  {
    uint64_t v11 = a2[1] - *a2;
    unint64_t v12 = 0xCFDCFDCFDCFDCFDDLL * (v11 >> 3);
    if ((unsigned char *)a5[2] - (unsigned char *)v10 < v12)
    {
      if (v11 < 0) {
        sub_2E00();
      }
      char v13 = (char *)operator new(0xCFDCFDCFDCFDCFDDLL * (v11 >> 3));
      *a5 = v13;
      a5[1] = v13;
      a5[2] = &v13[v12];
      if (v10) {
        operator delete(v10);
      }
    }
    uint64_t v14 = *a2;
    uint64_t v15 = a2[1];
    if (*a2 != v15)
    {
      uint64_t v16 = (char *)a5[1];
      do
      {
        char v49 = *(unsigned char *)(v14 + 928);
        uint64_t v16 = sub_39D5B4(a5, v16, &v49) + 1;
        v14 += 936;
      }
      while (v14 != v15);
    }
  }
  uint64_t v17 = *a4;
  double v18 = (unsigned __int8 *)a4[1];
  if (*a4 != (double *)v18)
  {
    do
    {
      if (((*((_DWORD *)v17 + 5) >> *(unsigned char *)(a1 + 32)) & 1) == 0)
      {
        uint64_t v19 = *a2;
        uint64_t v20 = a2[1] - *a2;
        if (v20)
        {
          uint64_t v21 = v20 / 936;
          int v22 = (unsigned __int8 *)*a5;
          int v23 = *(unsigned __int8 *)(a3 + 912);
          if (*(unsigned char *)(a3 + 912))
          {
            int v23 = 0;
            uint64_t v24 = v19 + 8;
            uint64_t v25 = v21;
            do
            {
              if (*v22++)
              {
                int v27 = *((unsigned __int8 *)v17 + 16);
                uint64_t v28 = *(unsigned __int8 *)v17;
                double v29 = *(double *)(v24 + 8 * v28);
                double v30 = v17[1];
                BOOL v31 = v27 == 1 ? v29 <= v30 : v29 >= v30;
                if (v31
                  || *((unsigned char *)v17 + 24)
                  && ((double v32 = *(double *)(a3 + 8 * v28), v27 != 1) ? (v33 = v32 < v30) : (v33 = v32 > v30), v33))
                {
                  ++v23;
                }
              }
              v24 += 936;
              --v25;
            }
            while (v25);
          }
          else
          {
            uint64_t v34 = v19 + 8;
            uint64_t v35 = v21;
            do
            {
              if (*v22++)
              {
                double v37 = *(double *)(v34 + 8 * *(unsigned __int8 *)v17);
                double v38 = v17[1];
                if (*((unsigned char *)v17 + 16) == 1) {
                  int v39 = v37 <= v38;
                }
                else {
                  int v39 = v37 >= v38;
                }
                v23 += v39;
              }
              v34 += 936;
              --v35;
            }
            while (v35);
          }
          if (v23)
          {
            uint64_t v40 = 0;
            uint64_t v41 = 8;
            do
            {
              if (*((unsigned char *)*a5 + v40))
              {
                int v43 = *((unsigned __int8 *)v17 + 16);
                uint64_t v44 = *(unsigned __int8 *)v17;
                double v45 = *(double *)(*a2 + 8 * v44 + v41);
                double v46 = v17[1];
                BOOL v47 = v45 <= v46;
                if (v43 != 1) {
                  BOOL v47 = v45 >= v46;
                }
                if (v47)
                {
                  BOOL v42 = 1;
                }
                else
                {
                  BOOL v42 = 0;
                  if (*(unsigned char *)(a3 + 912) && *((unsigned char *)v17 + 24))
                  {
                    double v48 = *(double *)(a3 + 8 * v44);
                    BOOL v42 = v48 > v46;
                    if (v43 != 1) {
                      BOOL v42 = v48 < v46;
                    }
                  }
                }
                *((unsigned char *)*a5 + v40) = v42;
              }
              ++v40;
              v41 += 936;
            }
            while (v21 != v40);
          }
        }
      }
      v17 += 4;
    }
    while (v17 != (double *)v18);
  }
}

uint64_t sub_1049498(uint64_t a1, void *a2)
{
  __p[23] = 8;
  strcpy(__p, "criteria");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  char v5 = sub_104A030(v4);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)a1 = v5;
  __p[23] = 9;
  strcpy(__p, "threshold");
  double v6 = sub_5C7E8(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(double *)(a1 + 8) = v6;
  __p[23] = 4;
  strcpy(__p, "type");
  uint64_t v7 = sub_561B0(a2, (uint64_t)__p);
  int v8 = *(char *)(v7 + 23);
  if (v8 < 0)
  {
    if (*(void *)(v7 + 8) != 3) {
      goto LABEL_27;
    }
    uint64_t v7 = *(void *)v7;
  }
  else if (v8 != 3)
  {
LABEL_27:
    BOOL v10 = 1;
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  BOOL v10 = *(_WORD *)v7 != 18765 || *(unsigned char *)(v7 + 2) != 78;
  if ((__p[23] & 0x80000000) == 0) {
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)__p);
LABEL_18:
  *(unsigned char *)(a1 + 16) = v10;
  HIBYTE(v17[2]) = 17;
  strcpy((char *)v17, "skip_for_purposes");
  uint64_t v11 = sub_58070(a2, (uint64_t)v17);
  if (v11 && !*((_DWORD *)v11 + 12))
  {
    uint64_t v15 = v11[5];
    if (*(char *)(v15 + 23) < 0)
    {
      sub_4200(__p, *(void **)v15, *(void *)(v15 + 8));
    }
    else
    {
      long long v16 = *(_OWORD *)v15;
      *(void *)&__p[16] = *(void *)(v15 + 16);
      *(_OWORD *)__n128 __p = v16;
    }
  }
  else
  {
    *(void *)__n128 __p = 0;
    __p[23] = 0;
  }
  *(_DWORD *)(a1 + 20) = sub_104975C((uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((SHIBYTE(v17[2]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(v17[2]) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(v17[0]);
LABEL_23:
  *(void *)__n128 __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B91A0;
  strcpy(*(char **)__p, "skip_if_user_route_violates");
  unint64_t v12 = sub_58070(a2, (uint64_t)__p);
  if (!v12)
  {
    BOOL v13 = 0;
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  BOOL v13 = *((_DWORD *)v12 + 12) == 4;
  if ((__p[23] & 0x80000000) != 0) {
LABEL_25:
  }
    operator delete(*(void **)__p);
LABEL_26:
  *(unsigned char *)(a1 + 24) = v13;
  return a1;
}

void sub_1049708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_104975C(uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  BOOL v2 = v1 < 0;
  double v3 = *(unsigned __int8 **)a1;
  if (v1 >= 0) {
    double v3 = (unsigned __int8 *)a1;
  }
  uint64_t v4 = (void (__cdecl **)(std::stringbuf *__hidden))*(unsigned __int8 *)(a1 + 23);
  if (v2) {
    uint64_t v4 = *(void (__cdecl ***)(std::stringbuf *__hidden))(a1 + 8);
  }
  uint64_t v35 = v3;
  unsigned int v36 = v4;
  sub_230E8(&v35, 0x2Cu, (uint64_t)&v39);
  uint64_t v6 = (uint64_t)v39;
  char v5 = v40;
  if (v39 == v40)
  {
    uint64_t v7 = 0;
    if (v39) {
      goto LABEL_43;
    }
    return v7;
  }
  uint64_t v7 = 0;
  do
  {
    int v8 = (void (__cdecl **)(std::stringbuf *__hidden))*(unsigned __int8 *)(v6 + 23);
    char v9 = (char)v8;
    BOOL v10 = *(void (__cdecl ***)(std::stringbuf *__hidden))(v6 + 8);
    if ((char)v8 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      uint64_t v11 = *(void *)(v6 + 8);
    }
    if (v11 == 4)
    {
      if ((char)v8 >= 0) {
        unint64_t v12 = (char *)v6;
      }
      else {
        unint64_t v12 = *(char **)v6;
      }
      __darwin_ct_rune_t v13 = *v12;
      __darwin_ct_rune_t v14 = __toupper(78);
      if (v14 == __toupper(v13))
      {
        __darwin_ct_rune_t v15 = v12[1];
        __darwin_ct_rune_t v16 = __toupper(79);
        if (v16 == __toupper(v15))
        {
          __darwin_ct_rune_t v17 = v12[2];
          __darwin_ct_rune_t v18 = __toupper(78);
          if (v18 == __toupper(v17))
          {
            __darwin_ct_rune_t v19 = v12[3];
            __darwin_ct_rune_t v20 = __toupper(69);
            if (v20 == __toupper(v19))
            {
              uint64_t v7 = v7 | 1;
              goto LABEL_8;
            }
          }
        }
      }
      int v8 = (void (__cdecl **)(std::stringbuf *__hidden))*(unsigned __int8 *)(v6 + 23);
      BOOL v10 = *(void (__cdecl ***)(std::stringbuf *__hidden))(v6 + 8);
      char v9 = *(unsigned char *)(v6 + 23);
    }
    BOOL v21 = v9 < 0;
    if (v9 >= 0) {
      int v22 = (unsigned __int8 *)v6;
    }
    else {
      int v22 = *(unsigned __int8 **)v6;
    }
    if (v21) {
      int v8 = v10;
    }
    uint64_t v35 = v22;
    unsigned int v36 = v8;
    int v23 = sub_DE7060((char **)&v35);
    if (v23)
    {
      uint64_t v7 = (1 << v23) | v7;
    }
    else if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v35);
      uint64_t v24 = sub_188FC78(&v35, (uint64_t)"Invalid string for indicating skipped route purposes in main route filter: ", 75);
      int v25 = *(char *)(v6 + 23);
      if (v25 >= 0) {
        uint64_t v26 = v6;
      }
      else {
        uint64_t v26 = *(void *)v6;
      }
      if (v25 >= 0) {
        uint64_t v27 = *(unsigned __int8 *)(v6 + 23);
      }
      else {
        uint64_t v27 = *(void *)(v6 + 8);
      }
      sub_188FC78(v24, v26, v27);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (v34 < 0) {
        operator delete(__p);
      }
      uint64_t v35 = v32;
      *(unsigned __int8 **)((char *)&v35 + *((void *)v32 - 3)) = v31;
      if (v38 < 0) {
        operator delete(v37);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
LABEL_8:
    v6 += 24;
  }
  while ((void *)v6 != v5);
  uint64_t v6 = (uint64_t)v39;
  if (!v39) {
    return v7;
  }
LABEL_43:
  uint64_t v28 = (void **)v40;
  double v29 = (void *)v6;
  if (v40 != (void *)v6)
  {
    do
    {
      if (*((char *)v28 - 1) < 0) {
        operator delete(*(v28 - 3));
      }
      v28 -= 3;
    }
    while (v28 != (void **)v6);
    double v29 = v39;
  }
  uint64_t v40 = (void *)v6;
  operator delete(v29);
  return v7;
}

void sub_1049A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a17);
    sub_1A668((void **)(v17 - 112));
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a17);
  sub_1A668((void **)(v17 - 112));
  _Unwind_Resume(a1);
}

void sub_1049B08(_Unwind_Exception *a1)
{
  sub_1A668((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

__n128 *sub_1049B20(__n128 **a1, uint64_t a2, __n128 *a3)
{
  char v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (void)*a1;
  uint64_t v8 = v7 >> 4;
  char v9 = (__n128 *)((char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF0));
  unint64_t v10 = (unint64_t)a1[2];
  if (v6 >= v10)
  {
    unint64_t v18 = ((uint64_t)(v6 - (void)v5) >> 4) + 1;
    if (v18 >> 60) {
      sub_2E00();
    }
    uint64_t v19 = v10 - (void)v5;
    if (v19 >> 3 > v18) {
      unint64_t v18 = v19 >> 3;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    double v37 = a1 + 2;
    if (v20)
    {
      if (v20 >> 60) {
        sub_188D718();
      }
      BOOL v21 = (__n128 *)operator new(16 * v20);
    }
    else
    {
      BOOL v21 = 0;
    }
    BOOL v33 = v21;
    char v34 = &v21[v8];
    uint64_t v35 = v34;
    unsigned int v36 = (char *)&v21[v20];
    sub_1049D84((uint64_t)&v33, a3);
    int v22 = v34;
    int v23 = *a1;
    uint64_t v24 = v34;
    if (*a1 != v9)
    {
      int v25 = v9;
      uint64_t v26 = v34;
      do
      {
        uint64_t v24 = v26 - 1;
        v26[-1] = v25[-1];
        --v25;
        --v26;
      }
      while (v25 != v23);
    }
    char v34 = v24;
    uint64_t v27 = a1[1];
    uint64_t v28 = v35;
    if (v27 != v9)
    {
      do
      {
        __n128 v29 = *v9++;
        *v28++ = v29;
      }
      while (v9 != v27);
      uint64_t v24 = v34;
      char v9 = a1[1];
    }
    double v30 = *a1;
    *a1 = v24;
    a1[1] = v28;
    BOOL v31 = (char *)a1[2];
    a1[2] = (__n128 *)v36;
    uint64_t v35 = v9;
    unsigned int v36 = v31;
    BOOL v33 = v30;
    char v34 = v30;
    if (v9 != v30) {
      uint64_t v35 = (__n128 *)((char *)v9 + (((char *)v30 - (char *)v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    }
    if (v30) {
      operator delete(v30);
    }
    return v22;
  }
  else if (v9 == (__n128 *)v6)
  {
    __n128 *v9 = *a3;
    a1[1] = v9 + 1;
  }
  else
  {
    uint64_t v11 = v9 + 1;
    unint64_t v12 = (long long *)(v6 - 16);
    __darwin_ct_rune_t v13 = a1[1];
    if (v6 >= 0x10)
    {
      do
      {
        __n128 v14 = (__n128)*v12++;
        *v13++ = v14;
      }
      while ((unint64_t)v12 < v6);
    }
    a1[1] = v13;
    if ((__n128 *)v6 != v11)
    {
      uint64_t v15 = (uint64_t)(v6 - (void)v11) >> 4;
      __darwin_ct_rune_t v16 = (_DWORD *)(v6 - 8);
      uint64_t v17 = v15;
      do
      {
        *((void *)v16 - 1) = v9[v17 - 1].n128_u64[0];
        *__darwin_ct_rune_t v16 = v9[v17 - 1].n128_u32[2];
        v16 -= 4;
        --v17;
      }
      while (v17 * 16);
    }
    v9->n128_u64[0] = a3->n128_u64[0];
    v5[v8].n128_u32[2] = a3->n128_u32[2];
  }
  return v9;
}

void sub_1049D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    __darwin_ct_rune_t v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    __darwin_ct_rune_t v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

__n128 sub_1049D84(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    char v5 = *(__n128 **)a1;
    unint64_t v6 = *(__n128 **)(a1 + 8);
    if ((unint64_t)v6 <= *(void *)a1)
    {
      if (v4 == v5) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = ((char *)v4 - (char *)v5) >> 3;
      }
      if (v13 >> 60) {
        sub_188D718();
      }
      __n128 v14 = (char *)operator new(16 * v13);
      uint64_t v15 = (__n128 *)&v14[16 * (v13 >> 2)];
      uint64_t v17 = (char *)v4 - (char *)v6;
      BOOL v16 = v4 == v6;
      uint64_t v4 = v15;
      if (!v16)
      {
        uint64_t v4 = (__n128 *)((char *)v15 + (v17 & 0xFFFFFFFFFFFFFFF0));
        uint64_t v18 = 16 * (v17 >> 4);
        uint64_t v19 = &v14[16 * (v13 >> 2)];
        do
        {
          __n128 v20 = *v6++;
          *(__n128 *)uint64_t v19 = v20;
          v19 += 16;
          v18 -= 16;
        }
        while (v18);
      }
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v15;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v14[16 * v13];
      if (v5)
      {
        operator delete(v5);
        uint64_t v4 = *(__n128 **)(a1 + 16);
      }
    }
    else
    {
      uint64_t v7 = ((uint64_t)v6 - *(void *)a1) >> 4;
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -(v8 >> 1);
      if (v6 == v4)
      {
        unint64_t v12 = &v6[-v9];
      }
      else
      {
        do
        {
          uint64_t v11 = &v6[v10];
          v11->n128_u64[0] = v6->n128_u64[0];
          v11->n128_u32[2] = v6->n128_u32[2];
          ++v6;
        }
        while (v6 != v4);
        uint64_t v4 = *(__n128 **)(a1 + 8);
        unint64_t v12 = &v6[v10];
      }
      *(void *)(a1 + 8) = &v4[v10];
      *(void *)(a1 + 16) = v12;
      uint64_t v4 = v12;
    }
  }
  __n128 result = *a2;
  *uint64_t v4 = *a2;
  *(void *)(a1 + 16) += 16;
  return result;
}

uint64_t sub_1049EC8(uint64_t *a1, void *a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 59) {
      sub_188D718();
    }
    uint64_t v8 = (char *)operator new(32 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = sub_1049498((uint64_t)&v8[32 * v3], a2);
  uint64_t v10 = v9 + 32;
  unint64_t v12 = (char *)*a1;
  uint64_t v11 = (char *)a1[1];
  if (v11 != (char *)*a1)
  {
    do
    {
      long long v13 = *((_OWORD *)v11 - 2);
      *(_OWORD *)(v9 - 23) = *(_OWORD *)(v11 - 23);
      *(_OWORD *)(v9 - 32) = v13;
      v9 -= 32;
      v11 -= 32;
    }
    while (v11 != v12);
    uint64_t v11 = (char *)*a1;
  }
  *a1 = v9;
  a1[1] = v10;
  a1[2] = (uint64_t)&v8[32 * v7];
  if (v11) {
    operator delete(v11);
  }
  return v10;
}

void sub_1049FC4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1049FDC()
{
  unk_25FD7DF = 16641;
  word_25FD7C8 = 65;
  byte_25FD7F7 = 1;
  byte_25FD7E1 = 0;
}

BOOL sub_104A004(uint64_t a1)
{
  return sub_104A994(&xmmword_25FD7F8, a1) != 0;
}

uint64_t sub_104A030(uint64_t a1)
{
  BOOL v2 = sub_104A994(&xmmword_25FD7F8, a1);
  if (v2) {
    return *((unsigned __int8 *)v2 + 40);
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v29);
    int v4 = *(char *)(a1 + 23);
    if (v4 >= 0) {
      uint64_t v5 = a1;
    }
    else {
      uint64_t v5 = *(void *)a1;
    }
    if (v4 >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v6 = *(void *)(a1 + 8);
    }
    unint64_t v7 = sub_188FC78(v29, v5, v6);
    sub_188FC78(v7, (uint64_t)" is not defined in DrivingRouteCriteria", 39);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    if (SBYTE7(v20) < 0) {
      operator delete(__p[0]);
    }
    if (v30 < 0) {
      operator delete((void *)v29[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t v8 = operator new(0x30uLL);
  uint64_t v26 = 0;
  uint64_t v27 = v8;
  long long v28 = xmmword_20B9A80;
  strcpy((char *)v8, "DrivingRouteCriteria.InvalidCriterionRequested");
  uint64_t v24 = 0;
  int v25 = 0;
  uint64_t v23 = 0;
  long long v21 = 0u;
  *(_OWORD *)int v22 = 0u;
  *(_OWORD *)__n128 __p = 0u;
  long long v20 = 0u;
  char v18 = 0;
  LOBYTE(v17) = 0;
  uint64_t v15 = 0;
  BOOL v16 = 0;
  uint64_t v13 = 0;
  __n128 v14 = 0;
  sub_29DC44((uint64_t)v29, (long long **)&v24, (long long *)__p, &v17, &v15, 0, (uint64_t)&v13, 1);
  nullsub_1(1);
  sub_29E11C((uint64_t)v29);
  uint64_t v9 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v10 = v16;
    if (!v16)
    {
LABEL_19:
      if ((v18 & 0x80000000) == 0) {
        goto LABEL_20;
      }
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v10 = v16;
    if (!v16) {
      goto LABEL_19;
    }
  }
  if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if ((v18 & 0x80000000) == 0)
  {
LABEL_20:
    if ((SHIBYTE(v23) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete((void *)v17);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
LABEL_21:
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v22[0]);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SBYTE7(v20) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(*((void **)&v20 + 1));
  if ((SBYTE7(v20) & 0x80000000) == 0)
  {
LABEL_23:
    uint64_t v11 = (void **)v24;
    if (v24) {
      goto LABEL_24;
    }
LABEL_41:
    if (SHIBYTE(v28) < 0) {
      goto LABEL_26;
    }
    return 115;
  }
LABEL_40:
  operator delete(__p[0]);
  uint64_t v11 = (void **)v24;
  if (!v24) {
    goto LABEL_41;
  }
LABEL_24:
  unint64_t v12 = v25;
  if (v25 == v11)
  {
    int v25 = v11;
    operator delete(v11);
    if (SHIBYTE(v28) < 0) {
      goto LABEL_26;
    }
    return 115;
  }
  do
  {
    while (*((char *)v12 - 1) < 0)
    {
      operator delete(*(v12 - 3));
      if (*((char *)v12 - 25) < 0) {
        goto LABEL_31;
      }
LABEL_28:
      v12 -= 6;
      if (v12 == v11) {
        goto LABEL_32;
      }
    }
    if ((*((char *)v12 - 25) & 0x80000000) == 0) {
      goto LABEL_28;
    }
LABEL_31:
    operator delete(*(v12 - 6));
    v12 -= 6;
  }
  while (v12 != v11);
LABEL_32:
  int v25 = v11;
  operator delete(v24);
  if (SHIBYTE(v28) < 0)
  {
LABEL_26:
    operator delete(v27);
    return 115;
  }
  return 115;
}

void sub_104A420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void *sub_104A4AC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  if (result != 115)
  {
    BOOL v2 = &qword_25FD808;
    while (1)
    {
      BOOL v2 = (uint64_t *)*v2;
      if (!v2) {
        break;
      }
      if (*((unsigned __int8 *)v2 + 40) == result)
      {
        if (*((char *)v2 + 39) < 0) {
          return sub_4200((unsigned char *)a2, (void *)v2[2], v2[3]);
        }
        long long v3 = *((_OWORD *)v2 + 1);
        *(void *)(a2 + 16) = v2[4];
        *(_OWORD *)a2 = v3;
        return result;
      }
    }
  }
  *(unsigned char *)(a2 + 23) = 7;
  strcpy((char *)a2, "Unknown");
  return result;
}

uint64_t *sub_104A520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      __n128 v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          uint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            __n128 v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          __n128 v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  int v25 = (char *)operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)int v25 = 0;
  *((void *)v25 + 1) = v10;
  uint64_t v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  v25[40] = *(unsigned char *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        __n128 v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        char v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        __n128 v29 = *(void **)(*(void *)a1 + 8 * v10);
        char v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      __n128 v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      char v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *char v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  __n128 v29 = *(void **)(*(void *)a1 + 8 * v3);
  char v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *char v30 = *v29;
  void *v29 = v42[0];
LABEL_92:
  __n128 v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_104A968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_104A97C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_104A994(void *a1, uint64_t a2)
{
  BOOL v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        BOOL v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          __n128 result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        __n128 result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void sub_104ABC4()
{
  __int16 v3 = 6;
  strcpy(v2, "length");
  __int16 v5 = 270;
  strcpy(v4, "traversal_time");
  __int16 v7 = 534;
  strcpy(v6, "rounded_traversal_time");
  unint64_t v8 = (char *)operator new(0x19uLL);
  long long v9 = xmmword_20B9250;
  strcpy(v8, "freeflow_traversal_time");
  char v10 = 3;
  *(_WORD *)&v11[23] = 1042;
  strcpy(v11, "hsp_traversal_time");
  *(_WORD *)&v12[23] = 1296;
  strcpy(v12, "time_on_highways");
  v13[23] = 18;
  strcpy(v13, "time_on_toll_roads");
  v13[24] = 6;
  char v14 = (char *)operator new(0x20uLL);
  long long v15 = xmmword_20B91A0;
  strcpy(v14, "time_on_relevant_toll_roads");
  char v16 = 7;
  unint64_t v17 = (char *)operator new(0x20uLL);
  uint64_t v18 = 30;
  unint64_t v19 = 0x8000000000000020;
  strcpy(v17, "time_on_highways_or_toll_roads");
  char v20 = 8;
  __int16 v22 = 2319;
  strcpy(v21, "time_on_ferries");
  v23[23] = 13;
  strcpy(v23, "time_on_fords");
  v23[24] = 10;
  *(_WORD *)&v24[23] = 2836;
  strcpy(v24, "time_on_parking_lots");
  __int16 v26 = 3349;
  strcpy(v25, "distance_on_bad_roads");
  float v27 = (char *)operator new(0x30uLL);
  uint64_t v28 = 41;
  unint64_t v29 = 0x8000000000000030;
  strcpy(v27, "distance_longest_doubly_traversed_stretch");
  char v30 = 14;
  BOOL v31 = (char *)operator new(0x20uLL);
  uint64_t v32 = 27;
  unint64_t v33 = 0x8000000000000020;
  strcpy(v31, "starts_or_ends_on_bad_roads");
  char v34 = 15;
  int8x8_t v35 = (char *)operator new(0x20uLL);
  uint64_t v36 = 25;
  unint64_t v37 = 0x8000000000000020;
  strcpy(v35, "uses_contingency_terminal");
  char v38 = 16;
  unint64_t v39 = (char *)operator new(0x28uLL);
  unint64_t v41 = 0x8000000000000028;
  uint64_t v40 = 35;
  strcpy(v39, "num_toll_congestion_zone_violations");
  char v42 = 17;
  unint64_t v45 = 0x8000000000000030;
  uint64_t v44 = 44;
  char v43 = (char *)operator new(0x30uLL);
  strcpy(v43, "num_environmental_congestion_zone_violations");
  char v46 = 18;
  BOOL v47 = (char *)operator new(0x20uLL);
  unint64_t v49 = 0x8000000000000020;
  uint64_t v48 = 30;
  strcpy(v47, "num_user_preference_violations");
  char v50 = 12;
  unint64_t v53 = 0x8000000000000028;
  uint64_t v52 = 37;
  uint64_t v51 = (char *)operator new(0x28uLL);
  strcpy(v51, "num_time_based_restriction_violations");
  char v54 = 19;
  unint64_t v55 = (char *)operator new(0x38uLL);
  unint64_t v57 = 0x8000000000000038;
  uint64_t v56 = 48;
  strcpy(v55, "num_time_based_snow_chain_restriction_violations");
  char v58 = 20;
  int64_t v59 = (char *)operator new(0x20uLL);
  unint64_t v61 = 0x8000000000000020;
  uint64_t v60 = 31;
  strcpy(v59, "num_zone_restriction_violations");
  char v62 = 21;
  *(_WORD *)&v63[23] = 5650;
  strcpy(v63, "time_on_user_route");
  v64[23] = 13;
  strcpy(v64, "shared_length");
  v64[24] = 23;
  *(_WORD *)&v65[23] = 6161;
  strcpy(v65, "max_local_stretch");
  unint64_t v66 = (char *)operator new(0x20uLL);
  unint64_t v68 = 0x8000000000000020;
  uint64_t v67 = 27;
  strcpy(v66, "is_close_to_selected_routes");
  char v69 = 25;
  __int16 v71 = 6677;
  strcpy(v70, "num_undesired_detours");
  unint64_t v72 = (char *)operator new(0x20uLL);
  unint64_t v74 = 0x8000000000000020;
  uint64_t v73 = 29;
  strcpy(v72, "time_to_first_deviation_point");
  char v75 = 27;
  *(_WORD *)&v76[23] = 7184;
  strcpy(v76, "num_lane_changes");
  uint64_t v77 = (char *)operator new(0x28uLL);
  unint64_t v79 = 0x8000000000000028;
  uint64_t v78 = 35;
  strcpy(v77, "non_trivial_lane_changes_per_second");
  char v80 = 29;
  unsigned int v81 = (char *)operator new(0x38uLL);
  unint64_t v83 = 0x8000000000000038;
  uint64_t v82 = 52;
  strcpy(v81, "traffic_weighted_non_trivial_lane_changes_per_second");
  char v84 = 30;
  __int16 v86 = 7947;
  strcpy(v85, "num_u_turns");
  double v87 = (char *)operator new(0x20uLL);
  unint64_t v89 = 0x8000000000000020;
  uint64_t v88 = 25;
  strcpy(v87, "num_turns_against_traffic");
  char v90 = 32;
  uint64_t v91 = (char *)operator new(0x28uLL);
  unint64_t v93 = 0x8000000000000028;
  uint64_t v92 = 37;
  strcpy(v91, "num_unprotected_turns_against_traffic");
  char v94 = 33;
  *(_WORD *)&v95[23] = 8723;
  strcpy(v95, "num_initial_u_turns");
  v96[23] = 16;
  strcpy(v96, "num_name_changes");
  v96[24] = 35;
  *(_WORD *)&v97[23] = 9235;
  strcpy(v97, "num_highway_entries");
  uint64_t v98 = (char *)operator new(0x20uLL);
  unint64_t v100 = 0x8000000000000020;
  uint64_t v99 = 27;
  strcpy(v98, "num_highway_network_entries");
  char v101 = 41;
  long long v102 = (char *)operator new(0x30uLL);
  unint64_t v104 = 0x8000000000000030;
  uint64_t v103 = 40;
  strcpy(v102, "num_intermediate_highway_network_entries");
  char v105 = 42;
  *(_WORD *)&v106[23] = 9488;
  strcpy(v106, "num_toll_entries");
  unint64_t v107 = (char *)operator new(0x20uLL);
  unint64_t v109 = 0x8000000000000020;
  uint64_t v108 = 25;
  strcpy(v107, "num_relevant_toll_entries");
  char v110 = 38;
  *(_WORD *)&v111[23] = 10001;
  strcpy(v111, "num_ferry_entries");
  *(_WORD *)&v112[23] = 10256;
  strcpy(v112, "num_ford_entries");
  v113[23] = 19;
  strcpy(v113, "num_geometric_loops");
  v113[24] = 50;
  uint64_t v114 = (char *)operator new(0x20uLL);
  unint64_t v116 = 0x8000000000000020;
  uint64_t v115 = 27;
  strcpy(v114, "num_quick_highway_maneuvers");
  char v117 = 51;
  uint64_t v118 = (char *)operator new(0x20uLL);
  unint64_t v120 = 0x8000000000000020;
  uint64_t v119 = 25;
  strcpy(v118, "num_dangerous_transitions");
  char v121 = 43;
  long long v122 = (char *)operator new(0x30uLL);
  uint64_t v123 = 41;
  unint64_t v124 = 0x8000000000000030;
  strcpy(v122, "num_missing_lane_connectivity_transitions");
  char v125 = 44;
  uint64_t v126 = (char *)operator new(0x30uLL);
  unint64_t v128 = 0x8000000000000030;
  uint64_t v127 = 42;
  strcpy(v126, "num_crossed_uncontrolled_live_observations");
  char v129 = 45;
  int v130 = (char *)operator new(0x20uLL);
  unint64_t v132 = 0x8000000000000020;
  uint64_t v131 = 29;
  strcpy(v130, "num_crossed_live_observations");
  char v133 = 46;
  uint64_t v134 = (char *)operator new(0x38uLL);
  unint64_t v136 = 0x8000000000000038;
  uint64_t v135 = 51;
  strcpy(v134, "num_crossed_live_observations_turns_against_traffic");
  char v137 = 47;
  long long v138 = (char *)operator new(0x48uLL);
  unint64_t v140 = 0x8000000000000048;
  uint64_t v139 = 67;
  strcpy(v138, "num_crossed_live_observations_missing_lane_connectivity_transitions");
  char v141 = 48;
  uint64_t v142 = (char *)operator new(0x40uLL);
  unint64_t v144 = 0x8000000000000040;
  uint64_t v143 = 63;
  strcpy(v142, "num_crossed_live_observations_unprotected_turns_against_traffic");
  char v145 = 49;
  __int16 v147 = 13321;
  strcpy(v146, "curviness");
  v148[23] = 22;
  strcpy(v148, "extra_elevation_change");
  v148[24] = 53;
  __int16 v150 = 13837;
  strcpy(v149, "traffic_level");
  *(_WORD *)&v151[23] = 14098;
  strcpy(v151, "num_traffic_lights");
  v152[23] = 14;
  strcpy(v152, "num_stop_signs");
  v152[24] = 56;
  long long v153 = (char *)operator new(0x20uLL);
  unint64_t v155 = 0x8000000000000020;
  uint64_t v154 = 25;
  strcpy(v153, "distance_with_live_speeds");
  char v156 = 57;
  long long v157 = (char *)operator new(0x20uLL);
  unint64_t v159 = 0x8000000000000020;
  uint64_t v158 = 29;
  strcpy(v157, "initial_distance_on_hov_roads");
  char v160 = 58;
  long long v161 = (char *)operator new(0x20uLL);
  unint64_t v163 = 0x8000000000000020;
  uint64_t v162 = 30;
  strcpy(v161, "upcoming_distance_on_hov_roads");
  char v164 = 59;
  long long v165 = (char *)operator new(0x38uLL);
  unint64_t v167 = 0x8000000000000038;
  uint64_t v166 = 48;
  strcpy(v165, "initial_distance_on_dynamic_directionality_roads");
  char v168 = 60;
  long long v169 = (char *)operator new(0x38uLL);
  unint64_t v171 = 0x8000000000000038;
  uint64_t v170 = 49;
  strcpy(v169, "upcoming_distance_on_dynamic_directionality_roads");
  char v172 = 61;
  long long v173 = (char *)operator new(0x20uLL);
  unint64_t v175 = 0x8000000000000020;
  uint64_t v174 = 30;
  strcpy(v173, "distance_with_no_cell_coverage");
  char v176 = 62;
  long long v177 = (char *)operator new(0x19uLL);
  unint64_t v179 = 0x8000000000000019;
  uint64_t v178 = 23;
  strcpy(v177, "distance_yellow_traffic");
  char v180 = 63;
  *(_WORD *)&v181[23] = 16404;
  strcpy(v181, "distance_red_traffic");
  uint64_t v182 = (char *)operator new(0x30uLL);
  unint64_t v184 = 0x8000000000000030;
  uint64_t v183 = 40;
  strcpy(v182, "distance_low_num_historical_observations");
  char v185 = 65;
  uint64_t v186 = (char *)operator new(0x19uLL);
  unint64_t v188 = 0x8000000000000019;
  uint64_t v187 = 23;
  strcpy(v186, "distance_on_parking_lot");
  char v189 = 67;
  unint64_t v190 = (char *)operator new(0x20uLL);
  unint64_t v192 = 0x8000000000000020;
  uint64_t v191 = 27;
  strcpy(v190, "distance_hsp_recovery_flank");
  char v193 = 68;
  long long v194 = (char *)operator new(0x20uLL);
  unint64_t v196 = 0x8000000000000020;
  uint64_t v195 = 27;
  strcpy(v194, "distance_hsp_collapse_flank");
  char v197 = 69;
  *(_WORD *)&v198[23] = 17937;
  strcpy(v198, "bottleneck_factor");
  uint64_t v199 = (char *)operator new(0x20uLL);
  unint64_t v201 = 0x8000000000000020;
  uint64_t v200 = 26;
  strcpy(v199, "capacity_bottleneck_factor");
  char v202 = 71;
  unint64_t v205 = 0x8000000000000028;
  uint64_t v204 = 39;
  uint64_t v203 = (char *)operator new(0x28uLL);
  strcpy(v203, "lowest_intermediate_normalized_capacity");
  char v206 = 72;
  uint64_t v207 = (char *)operator new(0x30uLL);
  unint64_t v209 = 0x8000000000000030;
  uint64_t v208 = 40;
  strcpy(v207, "highest_intermediate_normalized_capacity");
  char v210 = 73;
  unsigned int v211 = (char *)operator new(0x28uLL);
  unint64_t v213 = 0x8000000000000028;
  uint64_t v212 = 32;
  strcpy(v211, "distance_low_normalized_capacity");
  char v214 = 66;
  unint64_t v215 = (char *)operator new(0x20uLL);
  unint64_t v217 = 0x8000000000000020;
  uint64_t v216 = 27;
  strcpy(v215, "average_normalized_capacity");
  char v218 = 76;
  long long v219 = (char *)operator new(0x28uLL);
  uint64_t v220 = 37;
  unint64_t v221 = 0x8000000000000028;
  strcpy(v219, "average_remaining_normalized_capacity");
  char v222 = 77;
  unsigned long long v223 = (char *)operator new(0x28uLL);
  unint64_t v225 = 0x8000000000000028;
  uint64_t v224 = 35;
  strcpy(v223, "average_num_historical_observations");
  char v226 = 75;
  long long v227 = (char *)operator new(0x20uLL);
  unint64_t v229 = 0x8000000000000020;
  uint64_t v228 = 29;
  strcpy(v227, "average_num_live_observations");
  char v230 = 74;
  long long v231 = (char *)operator new(0x20uLL);
  unint64_t v233 = 0x8000000000000020;
  uint64_t v232 = 30;
  strcpy(v231, "average_historical_load_factor");
  char v234 = 83;
  long long v235 = (char *)operator new(0x20uLL);
  unint64_t v237 = 0x8000000000000020;
  uint64_t v236 = 24;
  strcpy(v235, "average_live_load_factor");
  char v238 = 84;
  uint64_t v239 = (char *)operator new(0x20uLL);
  unint64_t v241 = 0x8000000000000020;
  uint64_t v240 = 24;
  strcpy(v239, "normalized_capacity_drop");
  char v242 = 80;
  unint64_t v243 = (char *)operator new(0x28uLL);
  unint64_t v245 = 0x8000000000000028;
  uint64_t v244 = 32;
  strcpy(v243, "num_historical_observations_drop");
  char v246 = 78;
  long long v247 = (char *)operator new(0x30uLL);
  unint64_t v249 = 0x8000000000000030;
  uint64_t v248 = 41;
  strcpy(v247, "relative_num_historical_observations_drop");
  char v250 = 79;
  uint64_t v251 = (char *)operator new(0x28uLL);
  unint64_t v253 = 0x8000000000000028;
  uint64_t v252 = 35;
  strcpy(v251, "num_bottlenecks_normalized_capacity");
  char v254 = 81;
  uint64_t v255 = (char *)operator new(0x30uLL);
  unint64_t v257 = 0x8000000000000030;
  uint64_t v256 = 45;
  strcpy(v255, "num_bottlenecks_remaining_normalized_capacity");
  char v258 = 82;
  uint64_t v259 = (char *)operator new(0x20uLL);
  unint64_t v261 = 0x8000000000000020;
  uint64_t v260 = 30;
  strcpy(v259, "num_penalized_border_crossings");
  char v262 = 85;
  __int16 v264 = 22037;
  strcpy(v263, "num_impeding_barriers");
  v265[23] = 22;
  strcpy(v265, "immediate_reroute_bias");
  v265[24] = 87;
  long long v266 = (char *)operator new(0x28uLL);
  unint64_t v268 = 0x8000000000000028;
  uint64_t v267 = 34;
  strcpy(v266, "has_immediate_u_turn_while_driving");
  char v269 = 88;
  __int16 v271 = 22805;
  strcpy(v270, "supports_turn_by_turn");
  v272[23] = 19;
  strcpy(v272, "supports_directions");
  v272[24] = 90;
  *(_WORD *)&v273[23] = 23314;
  strcpy(v273, "num_area_incidents");
  __int16 v275 = 23573;
  strcpy(v274, "arrives_opposite_side");
  v276[23] = 20;
  strcpy(v276, "soft_closure_penalty");
  v276[24] = 93;
  __int16 v278 = 24077;
  strcpy(v277, "charging_time");
  uint64_t v279 = (char *)operator new(0x20uLL);
  unint64_t v281 = 0x8000000000000020;
  uint64_t v280 = 24;
  strcpy(v279, "penalized_traversal_time");
  char v282 = 95;
  long long v283 = (char *)operator new(0x20uLL);
  unint64_t v285 = 0x8000000000000020;
  uint64_t v284 = 31;
  strcpy(v283, "num_intermediate_charging_stops");
  char v286 = 96;
  uint64_t v287 = (char *)operator new(0x28uLL);
  unint64_t v289 = 0x8000000000000028;
  uint64_t v288 = 32;
  strcpy(v287, "estimated_charging_overhead_time");
  char v290 = 97;
  __int16 v292 = 25099;
  strcpy(v291, "arrival_soc");
  v293[23] = 17;
  strcpy(v293, "min_remaining_soc");
  v293[24] = 99;
  *(_WORD *)&v294[23] = 25620;
  strcpy(v294, "min_remaining_energy");
  long long v295 = (char *)operator new(0x28uLL);
  unint64_t v297 = 0x8000000000000028;
  uint64_t v296 = 36;
  strcpy(v295, "min_remaining_relative_energy_buffer");
  char v298 = 101;
  long long v299 = (char *)operator new(0x28uLL);
  unint64_t v301 = 0x8000000000000028;
  uint64_t v300 = 34;
  strcpy(v299, "max_soc_points_below_low_threshold");
  char v302 = 102;
  uint64_t v303 = (char *)operator new(0x28uLL);
  unint64_t v305 = 0x8000000000000028;
  uint64_t v304 = 39;
  strcpy(v303, "max_soc_points_below_critical_threshold");
  char v306 = 103;
  v307 = (char *)operator new(0x28uLL);
  unint64_t v309 = 0x8000000000000028;
  uint64_t v308 = 34;
  strcpy(v307, "arrival_soc_points_below_threshold");
  char v310 = 104;
  v311 = (char *)operator new(0x30uLL);
  unint64_t v313 = 0x8000000000000030;
  uint64_t v312 = 40;
  strcpy(v311, "soc_points_charged_beyond_high_threshold");
  char v314 = 105;
  v315 = (char *)operator new(0x20uLL);
  unint64_t v317 = 0x8000000000000020;
  uint64_t v316 = 31;
  strcpy(v315, "extra_arrival_soc_charging_time");
  char v318 = 106;
  v319 = (char *)operator new(0x28uLL);
  unint64_t v321 = 0x8000000000000028;
  uint64_t v320 = 33;
  strcpy(v319, "has_different_first_charging_stop");
  char v322 = 107;
  v323 = (char *)operator new(0x28uLL);
  unint64_t v325 = 0x8000000000000028;
  uint64_t v324 = 34;
  strcpy(v323, "has_user_route_first_charging_stop");
  char v326 = 108;
  v327 = (char *)operator new(0x20uLL);
  unint64_t v329 = 0x8000000000000020;
  uint64_t v328 = 31;
  strcpy(v327, "distance_to_first_charging_stop");
  char v330 = 109;
  v331 = (char *)operator new(0x28uLL);
  unint64_t v333 = 0x8000000000000028;
  uint64_t v332 = 32;
  strcpy(v331, "distance_from_last_charging_stop");
  char v334 = 110;
  v335 = (char *)operator new(0x30uLL);
  unint64_t v337 = 0x8000000000000030;
  uint64_t v336 = 40;
  strcpy(v335, "num_non_preferred_network_charging_stops");
  char v338 = 111;
  v339 = (char *)operator new(0x20uLL);
  unint64_t v341 = 0x8000000000000020;
  uint64_t v340 = 30;
  strcpy(v339, "min_raw_charging_station_power");
  char v342 = 112;
  uint64_t v0 = 0;
  v343 = (char *)operator new(0x20uLL);
  unint64_t v345 = 0x8000000000000020;
  uint64_t v344 = 25;
  strcpy(v343, "max_charging_station_tier");
  char v346 = 113;
  dword_25FD818 = 1065353216;
  xmmword_25FD7F8 = 0u;
  *(_OWORD *)&qword_25FD808 = 0u;
  do
  {
    sub_104A520((uint64_t)&xmmword_25FD7F8, (uint64_t)&v2[v0], (uint64_t)&v2[v0]);
    v0 += 32;
  }
  while (v0 != 3648);
  uint64_t v1 = 3648;
  do
  {
    if (v2[v1 - 9] < 0) {
      operator delete(*(void **)&v2[v1 - 32]);
    }
    v1 -= 32;
  }
  while (v1);
}

void sub_104C6FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  while (1)
  {
    if (*(v10 - 9) < 0) {
      operator delete(*((void **)v10 - 4));
    }
    v10 -= 32;
    if (v10 == &a10) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t sub_104C87C(uint64_t a1, void *a2, void **a3, uint64_t a4, char a5)
{
  *(void *)a1 = a3;
  uint64_t v10 = a1 + 64;
  uint64_t v51 = a1 + 8;
  sub_1091FB4(a1 + 8, a2);
  sub_1091FB4(v10, a2);
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "DrivingRouteAnalyzer");
  v61[0] = 0;
  v61[1] = 0;
  uint64_t v62 = 0;
  unint64_t v11 = sub_374CDC((uint64_t)a2, (uint64_t)__p, v61);
  sub_108A150((void *)(a1 + 120), a2, v11, a4);
  uint64_t v12 = v61[0];
  if (v61[0])
  {
    uint64_t v13 = v61[1];
    char v14 = (void *)v61[0];
    if (v61[1] != v61[0])
    {
      do
      {
        if (*(char *)(v13 - 1) < 0) {
          operator delete(*(void **)(v13 - 24));
        }
        v13 -= 24;
      }
      while (v13 != v12);
      char v14 = (void *)v61[0];
    }
    v61[1] = v12;
    operator delete(v14);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "LaneChangeAnalyzer");
  v61[0] = 0;
  v61[1] = 0;
  uint64_t v62 = 0;
  long long v15 = sub_374CDC((uint64_t)a2, (uint64_t)__p, v61);
  sub_45C2F0(a1 + 776, a2, v15);
  uint64_t v16 = v61[0];
  if (v61[0])
  {
    uint64_t v17 = v61[1];
    uint64_t v18 = (void *)v61[0];
    if (v61[1] != v61[0])
    {
      do
      {
        if (*(char *)(v17 - 1) < 0) {
          operator delete(*(void **)(v17 - 24));
        }
        v17 -= 24;
      }
      while (v17 != v16);
      uint64_t v18 = (void *)v61[0];
    }
    v61[1] = v16;
    operator delete(v18);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x48uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9AA0;
  strcpy((char *)__p[0], "routing/route-planning/path-finding/DrivingTransitionAnalyzer.json");
  v61[0] = 0;
  v61[1] = 0;
  uint64_t v62 = 0;
  unint64_t v19 = sub_374CDC((uint64_t)a2, (uint64_t)__p, v61);
  sub_F66510(a1 + 1752, a2, v19);
  uint64_t v20 = v61[0];
  if (v61[0])
  {
    uint64_t v21 = v61[1];
    __int16 v22 = (void *)v61[0];
    if (v61[1] != v61[0])
    {
      do
      {
        if (*(char *)(v21 - 1) < 0) {
          operator delete(*(void **)(v21 - 24));
        }
        v21 -= 24;
      }
      while (v21 != v20);
      __int16 v22 = (void *)v61[0];
    }
    v61[1] = v20;
    operator delete(v22);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_3EA088((uint64_t *)(a1 + 2024), a2);
  uint64_t v23 = (uint64_t)a3[1];
  HIBYTE(v62) = 9;
  uint64_t v60 = 0;
  strcpy((char *)v61, "EVRouting");
  v59[0] = 0;
  v59[1] = 0;
  uint64_t v24 = sub_374CDC((uint64_t)a2, (uint64_t)v61, v59);
  uint64_t v56 = 0;
  *(void *)unint64_t v57 = operator new(0x20uLL);
  *(_OWORD *)&v57[8] = xmmword_20B8890;
  strcpy(*(char **)v57, "ChargingOverheadTimeEstimator");
  char v54 = 0;
  unint64_t v55 = 0;
  char v25 = sub_374CDC((uint64_t)a2, (uint64_t)v57, (uint64_t *)&v54);
  sub_3F8E98((uint64_t)__p, v25);
  sub_3F9014(a1 + 2056, v23, (uint64_t)v24, (long long *)__p);
  __int16 v26 = (void **)v54;
  if (v54)
  {
    float v27 = v55;
    uint64_t v28 = v54;
    if (v55 != v54)
    {
      do
      {
        if (*((char *)v27 - 1) < 0) {
          operator delete(*(v27 - 3));
        }
        v27 -= 3;
      }
      while (v27 != v26);
      uint64_t v28 = v54;
    }
    unint64_t v55 = v26;
    operator delete(v28);
  }
  if ((v57[23] & 0x80000000) != 0) {
    operator delete(*(void **)v57);
  }
  uint64_t v29 = v59[0];
  if (v59[0])
  {
    uint64_t v30 = v59[1];
    BOOL v31 = (void *)v59[0];
    if (v59[1] != v59[0])
    {
      do
      {
        if (*(char *)(v30 - 1) < 0) {
          operator delete(*(void **)(v30 - 24));
        }
        v30 -= 24;
      }
      while (v30 != v29);
      BOOL v31 = (void *)v59[0];
    }
    v59[1] = v29;
    operator delete(v31);
  }
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61[0]);
  }
  *(void *)(a1 + 2120) = sub_3750CC(a2);
  *(void *)(a1 + 2128) = sub_3766F8(a2);
  *(void *)(a1 + 2136) = sub_376594(a2);
  *(void *)(a1 + 2144) = sub_376B90(a2);
  *(void *)(a1 + 2152) = sub_374D14(a2);
  *(void *)(a1 + 2160) = sub_376F8C(a2);
  *(void *)(a1 + 2168) = sub_376408(a2);
  *(void *)(a1 + 2176) = sub_3777C0(a2);
  sub_103E2B8(a1 + 2184, a4, a2);
  *(unsigned char *)(a1 + 7360) = a4;
  *(unsigned char *)(a1 + 7361) = a5;
  __p[0] = operator new(0x20uLL);
  long long v53 = xmmword_20B8E90;
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "DrivingRouteCriteriaComputation");
  qmemcpy(v52, "teriaComputationDrivingRouteCrit", sizeof(v52));
  v61[0] = 0;
  v61[1] = 0;
  uint64_t v62 = 0;
  uint64_t v32 = sub_374CDC((uint64_t)a2, (uint64_t)__p, v61);
  *(_WORD *)(a1 + 7372) = 0;
  *(_DWORD *)(a1 + 7368) = 0;
  *(void *)(a1 + 7384) = 0;
  *(void *)(a1 + 7376) = 0;
  *(int64x2_t *)(a1 + 7392) = vdupq_n_s64(0xC3E0000000000000);
  *(_DWORD *)(a1 + 7408) = 0x7FFFFFFF;
  *(void *)(a1 + 7416) = 0;
  *(void *)(a1 + 7424) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 7432) = 0;
  *(unsigned char *)(a1 + 7436) = -76;
  *(_WORD *)(a1 + 7438) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 7440) = _Q0;
  *(_OWORD *)(a1 + 7456) = _Q0;
  *(void *)(a1 + 7472) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 7480) = 0u;
  *(_OWORD *)(a1 + 7496) = 0u;
  *(_OWORD *)(a1 + 7508) = 0u;
  *(void *)(a1 + 7528) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 7536) = 0;
  *(_OWORD *)(a1 + 7544) = 0u;
  *(_OWORD *)(a1 + 7560) = 0u;
  *(_OWORD *)(a1 + 7576) = 0u;
  *(_DWORD *)(a1 + 7592) = 0;
  *(void *)(a1 + 7600) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 7608) = 0;
  *(void *)(a1 + 7616) = 0;
  *(unsigned char *)(a1 + 7624) = 0;
  sub_105209C(a1 + 7368, v32);
  uint64_t v38 = v61[0];
  if (v61[0])
  {
    uint64_t v39 = v61[1];
    uint64_t v40 = (void *)v61[0];
    if (v61[1] != v61[0])
    {
      do
      {
        if (*(char *)(v39 - 1) < 0) {
          operator delete(*(void **)(v39 - 24));
        }
        v39 -= 24;
      }
      while (v39 != v38);
      uint64_t v40 = (void *)v61[0];
    }
    v61[1] = v38;
    operator delete(v40);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v41 = operator new(0x20uLL);
  __p[0] = v41;
  *(_OWORD *)&__p[1] = v53;
  *unint64_t v41 = v52[1];
  *(_OWORD *)((char *)v41 + 15) = v52[0];
  *((unsigned char *)v41 + 31) = 0;
  v61[0] = 0;
  v61[1] = 0;
  uint64_t v62 = 0;
  char v42 = sub_374CDC((uint64_t)a2, (uint64_t)__p, v61);
  HIBYTE(v60) = 10;
  strcpy((char *)v59, "ev_routing");
  char v43 = (void *)sub_560F4(v42, (uint64_t)v59);
  v57[23] = 9;
  uint64_t v56 = 0;
  strcpy(v57, "EVRouting");
  char v54 = 0;
  unint64_t v55 = 0;
  uint64_t v44 = sub_374CDC((uint64_t)a2, (uint64_t)v57, (uint64_t *)&v54);
  sub_105317C(a1 + 7632, v43, v44, (uint64_t)a3[1]);
  unint64_t v45 = (void **)v54;
  if (v54)
  {
    char v46 = v55;
    BOOL v47 = v54;
    if (v55 != v54)
    {
      do
      {
        if (*((char *)v46 - 1) < 0) {
          operator delete(*(v46 - 3));
        }
        v46 -= 3;
      }
      while (v46 != v45);
      BOOL v47 = v54;
    }
    unint64_t v55 = v45;
    operator delete(v47);
  }
  if ((v57[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v57);
    if ((SHIBYTE(v60) & 0x80000000) == 0)
    {
LABEL_71:
      uint64_t v48 = (void *)v61[0];
      if (!v61[0]) {
        goto LABEL_72;
      }
      goto LABEL_78;
    }
  }
  else if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
    goto LABEL_71;
  }
  operator delete((void *)v59[0]);
  uint64_t v48 = (void *)v61[0];
  if (!v61[0])
  {
LABEL_72:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_80;
  }
LABEL_78:
  uint64_t v50 = v61[1];
  if ((void *)v61[1] == v48)
  {
    v61[1] = (uint64_t)v48;
    operator delete(v48);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_80;
  }
  do
  {
    if (*(char *)(v50 - 1) < 0) {
      operator delete(*(void **)(v50 - 24));
    }
    v50 -= 24;
  }
  while ((void *)v50 != v48);
  v61[1] = (uint64_t)v48;
  operator delete((void *)v61[0]);
  if (SHIBYTE(__p[2]) < 0) {
LABEL_80:
  }
    operator delete(__p[0]);
LABEL_73:
  *(_DWORD *)(a1 + 7676) = 0;
  *(_WORD *)(a1 + 7680) = 0;
  *(void *)(a1 + 7664) = 0;
  *(unsigned char *)(a1 + 7672) = 0;
  if (!sub_45FB38(*a3)) {
    sub_1092944(v51, (char *)*a3);
  }
  return a1;
}

void sub_104D00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v36 - 113) < 0)
  {
    operator delete(*(void **)(v36 - 136));
    sub_1A668((void **)(v36 - 112));
    if ((a33 & 0x80000000) == 0)
    {
LABEL_4:
      sub_3A6230(v35);
      uint64_t v38 = (void *)v34[254];
      if (v38) {
        operator delete(v38);
      }
      sub_EFAAF4(a10);
      sub_104D210(a11);
      uint64_t v39 = (void *)v34[27];
      if (v39)
      {
        v34[28] = v39;
        operator delete(v39);
      }
      sub_C68678(v33);
      sub_C68678(a12);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    sub_1A668((void **)(v36 - 112));
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_4;
    }
  }
  operator delete(__p);
  goto LABEL_4;
}

void sub_104D200()
{
  if (!*(void *)(v0 + 2032)) {
    JUMPOUT(0x104D19CLL);
  }
  JUMPOUT(0x104D198);
}

void *sub_104D210(void *a1)
{
  BOOL v2 = a1 + 13;
  __int16 v3 = a1 + 109;
  do
  {
    unint64_t v4 = v3 - 6;
    uint64_t v5 = *(v3 - 3);
    if (v5)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      unint64_t v8 = v3 - 5;
      do
      {
        if ((*(char *)(*v4 + v7) & 0x80000000) == 0)
        {
          uint64_t v9 = *v8 + v6;
          uint64_t v10 = *(void **)(v9 + 16);
          if (v10)
          {
            *(void *)(v9 + 24) = v10;
            operator delete(v10);
            uint64_t v5 = *(v3 - 3);
          }
        }
        ++v7;
        v6 += 40;
      }
      while (v7 != v5);
      operator delete((void *)*(v3 - 6));
      *(v3 - 6) = &unk_20E1710;
      *(v3 - 1) = 0;
      *(v3 - 4) = 0;
      *(v3 - 3) = 0;
      *unint64_t v8 = 0;
    }
    v3 -= 6;
  }
  while (v4 != v2);
  unint64_t v11 = (void *)a1[10];
  if (v11)
  {
    a1[11] = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)a1[7];
  if (v12)
  {
    a1[8] = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)a1[4];
  if (v13)
  {
    a1[5] = v13;
    operator delete(v13);
  }
  return a1;
}

void sub_104D310(uint64_t a1, char ***a2)
{
  *(void *)(a1 + 7664) = 0;
  *(unsigned char *)(a1 + 7672) = 0;
  *(_DWORD *)(a1 + 7676) = 0;
  *(_WORD *)(a1 + 7680) = 0;
  uint64_t v4 = a1 + 2184;
  sub_103E2BC(a1 + 2184, a2, *(void *)a1);
  sub_104341C(v4, &v25);
  *(__n128 *)(a1 + 7664) = v25;
  *(_WORD *)(a1 + 7680) = v26;
  uint64_t v5 = *a2;
  unint64_t v19 = a2[1];
  if (*a2 != v19)
  {
    for (uint64_t i = (double *)(v5 + 1); ; i += 117)
    {
      sub_104D628(a1, (uint64_t *)*v5, (uint64_t)(v5 + 1));
      if (*(unsigned char *)(a1 + 7624)) {
        break;
      }
LABEL_3:
      v5 += 117;
      if (v5 == v19) {
        return;
      }
    }
    uint64_t v7 = 0;
    unint64_t v8 = i;
    while (1)
    {
      if (*v8 == 0.0 || *v8 == 1.79769313e308) {
        goto LABEL_6;
      }
      uint64_t v10 = (std::string *)*v5;
      sub_104A4AC((void *)v7, (uint64_t)&v22);
      unint64_t v11 = std::string::insert(&v22, 0, " ");
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      uint64_t v13 = std::string::append(&v23, ":");
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v24.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      sub_59E50((uint64_t)v8, 4);
      if ((v21 & 0x80u) == 0) {
        long long v15 = __p;
      }
      else {
        long long v15 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        std::string::size_type v16 = v21;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)__p[1];
      }
      uint64_t v17 = std::string::append(&v24, (const std::string::value_type *)v15, v16);
      __n128 v18 = *(__n128 *)&v17->__r_.__value_.__l.__data_;
      std::string::size_type v26 = v17->__r_.__value_.__r.__words[2];
      __n128 v25 = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      sub_45FE3C(v10, (const std::string::value_type *)&v25);
      if (SHIBYTE(v26) < 0)
      {
        operator delete((void *)v25.n128_u64[0]);
        if (((char)v21 & 0x80000000) == 0)
        {
LABEL_19:
          if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_20;
          }
          goto LABEL_25;
        }
      }
      else if (((char)v21 & 0x80000000) == 0)
      {
        goto LABEL_19;
      }
      operator delete(__p[0]);
      if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_20:
        if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_21;
        }
        goto LABEL_26;
      }
LABEL_25:
      operator delete(v24.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_21:
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_27;
        }
        goto LABEL_6;
      }
LABEL_26:
      operator delete(v23.__r_.__value_.__l.__data_);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
LABEL_27:
      }
        operator delete(v22.__r_.__value_.__l.__data_);
LABEL_6:
      ++v7;
      ++v8;
      if (v7 == 114) {
        goto LABEL_3;
      }
    }
  }
}

void sub_104D564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((a35 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a28 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a35 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a30);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a23);
  if ((a22 & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a17);
  _Unwind_Resume(exception_object);
}

BOOL sub_104D628(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  BOOL result = sub_45FB48((uint64_t)a2);
  if (result)
  {
    unsigned int v91 = *(unsigned __int16 *)(a1 + 7438);
    int v7 = sub_47EE94((uint64_t)a2, 0, 4);
    int v8 = sub_47EE94((uint64_t)a2, 1, 4);
    int v9 = sub_47EE94((uint64_t)a2, 2, 4);
    unint64_t v93 = (char *)a2;
    double v10 = (double)v7;
    *(double *)a3 = (double)sub_45FD6C(a2);
    *(double *)(a3 + 8) = (double)v7;
    if (v7 < 0) {
      char v11 = -5;
    }
    else {
      char v11 = 5;
    }
    double v12 = ceil((double)(int)(v7 / 10+ (((103 * (char)(v11 + v7 % 10)) >> 15) & 1)+ ((103 * (char)(v11 + v7 % 10)) >> 10))/ 60.0)* 60.0* 10.0;
    if (v12 >= 0.0)
    {
      if (v12 >= 4.50359963e15) {
        goto LABEL_13;
      }
      uint64_t v13 = (uint64_t)(v12 + v12) + 1;
    }
    else
    {
      if (v12 <= -4.50359963e15) {
        goto LABEL_13;
      }
      uint64_t v13 = (uint64_t)(v12 + v12);
      if (v13 >= 1) {
        --v13;
      }
    }
    double v12 = (double)(v13 >> 1);
LABEL_13:
    *(double *)(a3 + 16) = (double)(int)v12;
    *(double *)(a3 + 24) = (double)v8;
    *(double *)(a3 + 32) = (double)v9;
    if (*(unsigned char *)(sub_45FC54(a2) + 12)) {
      BOOL v14 = *(unsigned char *)(sub_45FC5C((uint64_t)a2) + 12) == 0;
    }
    else {
      BOOL v14 = 1;
    }
    uint64_t v15 = a1 + 7360;
    *(double *)(a3 + 128) = (double)v14;
    *(double *)(a3 + 176) = (double)(int)sub_1092C9C(a1 + 8, (char *)a2);
    std::string::size_type v16 = (uint64_t *)nullsub_1(a2);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v97 = (unsigned char *)(a1 + 7360);
    if (*v16 == v18)
    {
LABEL_17:
      double v19 = 0.0;
LABEL_18:
      *(double *)(a3 + 120) = v19;
      uint64_t v20 = sub_5231C((uint64_t)v93);
      uint64_t v21 = v20;
      int v22 = 0;
      if (*(unsigned char *)(v20 + 36) && !*(unsigned char *)(v20 + 3))
      {
        uint64_t v23 = *(void *)(v20 + 8);
        BOOL v24 = (v23 & 0x7FFFFFFFFFFFFFFFLL) == 0;
        if ((unint64_t)(v23 - 1) < 0xFFFFFFFFFFFFFLL) {
          BOOL v24 = 1;
        }
        int v22 = ((v23 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF && v23 >= 0 || v24;
        if (*(double *)(v20 + 8) <= 0.0) {
          int v22 = 0;
        }
      }
      *(double *)(a3 + 152) = (double)(*(_DWORD *)(v20 + 40) - v22);
      uint64_t v26 = *(void *)(v20 + 44);
      v27.i64[0] = v26;
      v27.i64[1] = HIDWORD(v26);
      *(float64x2_t *)(a3 + 160) = vcvtq_f64_u64(v27);
      uint64_t v28 = *(void *)(v20 + 52);
      v27.i64[0] = v28;
      v27.i64[1] = HIDWORD(v28);
      *(float64x2_t *)(a3 + 136) = vcvtq_f64_u64(v27);
      *(double *)(a3 + 248) = (double)sub_108A438(a1 + 120, (uint64_t)v93);
      double v29 = v10 / (double)v8;
      if (v8 <= 0) {
        double v29 = 1.0;
      }
      *(double *)(a3 + 432) = v29;
      *(double *)(a3 + 112) = (double)sub_108A908(a1 + 120, (uint64_t)v93);
      if (*(unsigned char *)(v15 + 9)) {
        unsigned int v30 = sub_108B438(a1 + 120, v93);
      }
      else {
        unsigned int v30 = 0;
      }
      *(double *)&unint64_t v51 = (double)v30;
      *(double *)(a3 + 280) = (double)v30;
      LODWORD(v51) = *(_DWORD *)(v21 + 60);
      *(double *)(a3 + 728) = (double)v51;
      uint64_t v92 = v21;
      double v52 = 0.0;
      if (*(unsigned char *)(v21 + 4)) {
        double v52 = 1.0;
      }
      *(double *)(a3 + 736) = v52;
      long long v53 = (uint64_t *)(a1 + 776);
      sub_45C2F4(a1 + 776, (uint64_t)v93, (uint64_t)&v103);
      unint64_t v55 = v103;
      uint64_t v56 = v104;
      uint64_t v96 = a1;
      uint64_t v94 = a1 + 120;
      if (v103 == v104)
      {
        *(void *)(a3 + 224) = 0;
        *(void *)(a3 + 232) = 0;
        *(void *)(a3 + 240) = 0;
      }
      else
      {
        unsigned int v57 = 0;
        char v58 = v103;
        do
        {
          while (1)
          {
            uint64_t v59 = *((void *)v58 + 1);
            if (*(void *)v58 != v59) {
              break;
            }
            double v54 = (double)v57 + 0.0;
            unsigned int v57 = v54;
            v58 += 24;
            if (v58 == v104) {
              goto LABEL_72;
            }
          }
          LODWORD(v54) = *(_DWORD *)(v59 - 20);
          double v54 = (double)*(unint64_t *)&v54 + (double)v57;
          unsigned int v57 = v54;
          v58 += 24;
        }
        while (v58 != v104);
LABEL_72:
        *(void *)(a3 + 232) = 0;
        *(double *)(a3 + 224) = (double)v57;
        *(void *)(a3 + 240) = 0;
        uint64_t v60 = v56 - v55;
        if (v60)
        {
          uint64_t v61 = 0;
          unint64_t v95 = 0xAAAAAAAAAAAAAAABLL * (v60 >> 3);
          do
          {
            uint64_t v62 = sub_45FB28(v93, v61);
            uint64_t v63 = (uint64_t *)&v103[24 * v61];
            uint64_t v65 = *v63;
            uint64_t v64 = v63[1];
            if (*v63 != v64)
            {
              unint64_t v66 = (void *)v62;
              do
              {
                unsigned int v67 = *(_DWORD *)(v65 + 16);
                if (v67 >= *(_DWORD *)(v96 + 7432))
                {
                  if (*(int *)(v65 + 32) <= 10) {
                    int v68 = 10;
                  }
                  else {
                    int v68 = *(_DWORD *)(v65 + 32);
                  }
                  double v69 = 1.0;
                  if (*(double *)(v96 + 7424) != 1.0 && sub_45BED4(v53, v66, (void *)v65)) {
                    double v69 = *(double *)(v96 + 7424);
                  }
                  double v70 = (double)v67 / ((double)v68 / 10.0);
                  *(double *)(a3 + 232) = *(double *)(a3 + 232) + v70 * v69;
                  if (*v97 == 2)
                  {
                    sub_45BC40((uint64_t)v53, v66, (uint64_t *)v65);
                    *(double *)(a3 + 240) = v70 * v71 + *(double *)(a3 + 240);
                  }
                }
                v65 += 40;
              }
              while (v65 != v64);
            }
            ++v61;
          }
          while (v61 != v95);
        }
      }
      *(double *)(a3 + 576) = sub_108C570(v94, v93, 4u, 1);
      *(double *)(a3 + 584) = sub_108C570(v94, v93, 4u, 0);
      *(double *)(a3 + 520) = (double)sub_108BE68(v94, v93, 0);
      *(double *)(a3 + 560) = sub_108B920(v94, v93, 0);
      *(double *)(a3 + 568) = sub_108B920(v94, v93, 4u);
      *(double *)(a3 + 528) = (double)sub_108BE68(v94, v93, 4u);
      *(double *)(a3 + 600) = sub_108C438(v94, v93, 0, 0, 0);
      *(double *)(a3 + 616) = sub_108C438(v94, v93, 5, 0, 0);
      *(double *)(a3 + 608) = sub_108C438(v94, v93, 4, 0, 0);
      double v72 = 0.0;
      if (*v97 == 2) {
        double v72 = sub_108C438(v94, v93, 1, 0, 0);
      }
      *(double *)(a3 + 592) = v72;
      *(double *)(a3 + 664) = sub_108C438(v94, v93, 2, 0, 0);
      double v73 = 0.0;
      if (*v97 == 2) {
        double v73 = sub_108C438(v94, v93, 3, 0, 0);
      }
      *(double *)(a3 + 672) = v73;
      *(double *)(a3 + 624) = sub_108C82C(v94, (uint64_t)v93, 0);
      *(double *)(a3 + 640) = sub_108C82C(v94, (uint64_t)v93, 4u);
      *(double *)(a3 + 648) = (double)sub_108BDCC(v94, (uint64_t)v93, 4u);
      *(double *)(a3 + 656) = (double)sub_108BDCC(v94, (uint64_t)v93, 5u);
      double v74 = *(double *)(a3 + 600);
      double v75 = 0.0;
      if (v74 != 0.0) {
        double v75 = *(double *)(a3 + 624) / v74;
      }
      *(double *)(a3 + 632) = v75;
      *(long double *)(a3 + 696) = sub_10500DC(v96, (uint64_t *)v93);
      *(double *)(a3 + 496) = (double)sub_108A1DC(v94, v93);
      if (v97[10]) {
        *(double *)(a3 + 400) = (double)sub_108AD20(v94, (uint64_t)v93);
      }
      int v76 = sub_108A4C4(v94, (uint64_t)v93, *(void *)(v96 + 7480));
      int v77 = sub_108ADAC(v94, (uint64_t)v93, *(void *)(v96 + 7488));
      int v78 = *(unsigned __int8 *)(v92 + 3);
      *(double *)(a3 + 272) = (double)(v77 + v76 + v78);
      BOOL v79 = 0;
      if (v78)
      {
        double v80 = *(double *)(v92 + 8);
        BOOL v81 = *(uint64_t *)&v80 <= -1 || ((*(void *)&v80 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
        BOOL v82 = v81 && (unint64_t)(*(void *)&v80 - 1) >= 0xFFFFFFFFFFFFFLL;
        BOOL v83 = !v82 || (*(void *)&v80 & 0x7FFFFFFFFFFFFFFFLL) == 0;
        if (v83 && v80 > 0.0) {
          BOOL v79 = v80 > *(double *)(v96 + 7544);
        }
      }
      *(double *)(a3 + 704) = (double)v79;
      if (v97[11])
      {
        int v84 = sub_3D4008(*(void *)(v96 + 2176), v93, v97[1]);
        double v85 = 0.0;
        if (v84 == 2) {
          double v86 = 1.0;
        }
        else {
          double v86 = 0.0;
        }
        *(double *)(a3 + 712) = v86;
        if ((v84 - 1) < 2) {
          double v85 = 1.0;
        }
        *(double *)(a3 + 720) = v85;
      }
      else
      {
        *(_OWORD *)(a3 + 712) = 0u;
      }
      *(void *)(a3 + 256) = 0;
      *(void *)(a3 + 456) = 0;
      *(_OWORD *)(a3 + 40) = 0u;
      *(_OWORD *)(a3 + 56) = 0u;
      *(_OWORD *)(a3 + 72) = 0u;
      *(_OWORD *)(a3 + 88) = 0u;
      *(void *)(a3 + 104) = 0;
      *(_OWORD *)(a3 + 192) = 0u;
      *(_OWORD *)(a3 + 208) = 0u;
      *(_OWORD *)(a3 + 288) = 0u;
      *(_OWORD *)(a3 + 304) = 0u;
      *(_OWORD *)(a3 + 320) = 0u;
      *(void *)(a3 + 336) = 0;
      *(void *)(a3 + 408) = 0;
      *(_OWORD *)(a3 + 416) = 0u;
      *(_OWORD *)(a3 + 504) = 0u;
      *(void *)(a3 + 552) = 0;
      *(_OWORD *)(a3 + 536) = 0u;
      *(_OWORD *)(a3 + 680) = 0u;
      int v87 = sub_45FE10((uint64_t)v93);
      uint64_t v88 = *(void *)(v96 + 2120);
      sub_45E97C(v93, (uint64_t)v98);
      uint64_t v89 = sub_46C8EC(v98[0], (uint64_t)v98[1]);
      sub_3BDCD8(v88, *(unsigned int *)(v89 + 32) | ((unint64_t)*(unsigned __int16 *)(v89 + 36) << 32), __p);
      unint64_t v90 = v100;
      if ((v100 & 0x80u) != 0) {
        unint64_t v90 = (unint64_t)__p[1];
      }
      if (v90) {
        sub_26A18((uint64_t)&v101, (const char *)__p);
      }
      else {
        sub_26908((uint64_t)&v101);
      }
      if ((char)v100 < 0) {
        operator delete(__p[0]);
      }
      sub_480C((uint64_t)v102, v87);
    }
    while (1)
    {
      BOOL v31 = (int **)sub_40EFE8(v17);
      uint64_t v32 = *(void *)(a1 + 2128);
      uint64_t v33 = sub_40EFE8(v17);
      unsigned __int16 v34 = (unsigned __int16)sub_3AC808(v32, *(void *)(v33 + 32));
      int8x8_t v35 = (char *)*v31;
      uint64_t v36 = (unsigned __int16 *)((char *)*v31 - **v31);
      unsigned int v37 = *v36;
      if (*((unsigned char *)v31 + 38))
      {
        uint64_t v15 = a1 + 7360;
        if (v37 < 0xB) {
          goto LABEL_50;
        }
        if (!v36[5]) {
          goto LABEL_50;
        }
        int v38 = *(_DWORD *)&v35[v36[5]];
        if ((v38 & 2) == 0) {
          goto LABEL_50;
        }
      }
      else
      {
        uint64_t v15 = a1 + 7360;
        if (v37 < 0xB) {
          goto LABEL_50;
        }
        if (!v36[5]) {
          goto LABEL_50;
        }
        int v38 = *(_DWORD *)&v35[v36[5]];
        if ((v38 & 1) == 0) {
          goto LABEL_50;
        }
      }
      double v19 = 1.0;
      if ((v38 & 0xE00000) != 0) {
        goto LABEL_18;
      }
      if (v37 < 0x2F) {
        goto LABEL_49;
      }
      uint64_t v39 = v36[23];
      if (!v39) {
        goto LABEL_49;
      }
      int v40 = v35[v39];
      if (v40 == 15) {
        goto LABEL_18;
      }
      if (v40 == 32)
      {
LABEL_49:
        if (v91 >= v34) {
          goto LABEL_18;
        }
      }
LABEL_50:
      unint64_t v41 = (int **)sub_46C8FC(v17);
      uint64_t v42 = *(void *)(a1 + 2128);
      uint64_t v43 = sub_46C8FC(v17);
      unsigned __int16 v44 = (unsigned __int16)sub_3AC808(v42, *(void *)(v43 + 32));
      unint64_t v45 = (char *)*v41;
      char v46 = (unsigned __int16 *)((char *)*v41 - **v41);
      unsigned int v47 = *v46;
      if (*((unsigned char *)v41 + 38))
      {
        uint64_t v15 = a1 + 7360;
        if (v47 < 0xB) {
          goto LABEL_35;
        }
        if (!v46[5]) {
          goto LABEL_35;
        }
        int v48 = *(_DWORD *)&v45[v46[5]];
        if ((v48 & 2) == 0) {
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v15 = a1 + 7360;
        if (v47 < 0xB) {
          goto LABEL_35;
        }
        if (!v46[5]) {
          goto LABEL_35;
        }
        int v48 = *(_DWORD *)&v45[v46[5]];
        if ((v48 & 1) == 0) {
          goto LABEL_35;
        }
      }
      double v19 = 1.0;
      if ((v48 & 0xE00000) != 0) {
        goto LABEL_18;
      }
      if (v47 < 0x2F) {
        goto LABEL_34;
      }
      uint64_t v49 = v46[23];
      if (!v49) {
        goto LABEL_34;
      }
      int v50 = v45[v49];
      if (v50 == 15) {
        goto LABEL_18;
      }
      if (v50 == 32)
      {
LABEL_34:
        if (v91 >= v44) {
          goto LABEL_18;
        }
      }
LABEL_35:
      v17 += 1056;
      if (v17 == v18) {
        goto LABEL_17;
      }
    }
  }
  return result;
}

void sub_104F8C4(_Unwind_Exception *a1)
{
  sub_36094((void **)(v1 - 192));
  _Unwind_Resume(a1);
}

void sub_104F8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  sub_2FC938(&a54);
  sub_4814(v54 - 240);
  sub_36094((void **)(v54 - 192));
  _Unwind_Resume(a1);
}

void sub_104FB0C(uint64_t a1, uint64_t *a2, char ***a3)
{
  uint64_t v6 = a1 + 64;
  sub_10928EC((void *)(a1 + 64));
  int v7 = *a3;
  int v8 = a3[1];
  if (*a3 != v8)
  {
    do
    {
      sub_1092944(v6, *v7);
      v7 += 117;
    }
    while (v7 != v8);
  }
  uint64_t v10 = *a2;
  for (uint64_t i = a2[1]; v10 != i; v10 += 936)
    sub_104FB9C(a1, v10, (uint64_t)a3);
}

void sub_104FB9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (unsigned char *)(a1 + 7372);
  int v7 = (uint64_t *)(a1 + 64);
  int v8 = *(char **)a2;
  uint64_t v39 = 0x7FFFFFFFFFFFFFFELL;
  *(double *)(a2 + 192) = (double)sub_1093268(a1 + 64, v8, &v39);
  *(double *)(a2 + 864) = (double)sub_1098DA8((uint64_t)v7, *(void *)a2);
  if (*v6) {
    *(double *)(a2 + 200) = fmax(sub_1093528(v7, *(char **)a2, 1, 1), 0.0);
  }
  if (v6[1] && *(void *)a3 != *(void *)(a3 + 8))
  {
    double v9 = *(double *)(a1 + 7416) * (double)sub_45FD6C(**(uint64_t ***)a3);
    if (v9 >= 0.0)
    {
      if (v9 < 4.50359963e15)
      {
        uint64_t v10 = (uint64_t)(v9 + v9) + 1;
LABEL_12:
        double v9 = (double)(v10 >> 1);
      }
    }
    else if (v9 > -4.50359963e15)
    {
      uint64_t v10 = (uint64_t)(v9 + v9);
      if (v10 >= 1) {
        --v10;
      }
      goto LABEL_12;
    }
    uint64_t v11 = (uint64_t)v9;
    if (*(void *)(a1 + 7376) > (uint64_t)v9) {
      uint64_t v11 = *(void *)(a1 + 7376);
    }
    uint64_t v39 = v11;
    uint64_t v12 = sub_109488C(v7, *(char **)a2, &v39);
    double v13 = 0.0;
    if (v12 < v39) {
      double v13 = 1.0;
    }
    *(double *)(a2 + 208) = v13;
  }
  sub_109374C(v7, *(char **)a2, 0, &v39);
  uint64_t v14 = v39;
  if ((void *)v39 == v40) {
    goto LABEL_42;
  }
  *(double *)(a2 + 216) = (double)(0xD37A6F4DE9BD37A7 * (((uint64_t)v40 - v39) >> 4) - 1);
  *(double *)(a2 + 224) = (double)*(int *)(v14 + 352);
  if (!v6[252])
  {
LABEL_43:
    double v29 = v40;
    unsigned int v30 = (void *)v14;
    if (v40 != (void *)v14)
    {
      do
        double v29 = sub_1044584(v29 - 46);
      while (v29 != (void *)v14);
      unsigned int v30 = (void *)v39;
    }
    int v40 = (void *)v14;
    operator delete(v30);
    return;
  }
  uint64_t v15 = *(std::string **)a2;
  std::to_string(&v36, 0xCFDCFDCFDCFDCFDDLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v16 = std::string::insert(&v36, 0, " ALT");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  std::string::size_type v38 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)__n128 __p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_45FE3C(v15, (const std::string::value_type *)__p);
  if (SHIBYTE(v38) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_49:
    operator delete(v36.__r_.__value_.__l.__data_);
    goto LABEL_22;
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_49;
  }
LABEL_22:
  uint64_t v18 = 0;
  int v34 = 404167450;
  char v35 = 25;
  do
  {
    unint64_t v19 = *((unsigned __int8 *)&v34 + v18);
    uint64_t v20 = *(std::string **)a2;
    sub_104A4AC((void *)v19, (uint64_t)&v32);
    uint64_t v21 = std::string::insert(&v32, 0, " ");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    uint64_t v23 = std::string::append(&v33, ":");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v31, *(double *)(a2 + 8 + 8 * v19));
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __n128 v25 = &v31;
    }
    else {
      __n128 v25 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v31.__r_.__value_.__l.__size_;
    }
    uint64x2_t v27 = std::string::append(&v36, (const std::string::value_type *)v25, size);
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    std::string::size_type v38 = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)__n128 __p = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    sub_45FE3C(v20, (const std::string::value_type *)__p);
    if (SHIBYTE(v38) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_32:
        if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_33;
        }
        goto LABEL_38;
      }
    }
    else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_32;
    }
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_33:
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_39;
      }
      goto LABEL_34;
    }
LABEL_38:
    operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_39:
      operator delete(v33.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_23;
      }
      goto LABEL_40;
    }
LABEL_34:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_40:
    operator delete(v32.__r_.__value_.__l.__data_);
LABEL_23:
    ++v18;
  }
  while (v18 != 5);
  uint64_t v14 = v39;
LABEL_42:
  if (v14) {
    goto LABEL_43;
  }
}

void sub_104FF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a33 < 0)
  {
    operator delete(a28);
    sub_10444EC((void **)(v40 - 104));
    _Unwind_Resume(a1);
  }
  sub_10444EC((void **)(v40 - 104));
  _Unwind_Resume(a1);
}

BOOL sub_10500B8@<W0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_104D628(a1, a2, a3);
}

__n128 sub_10500C0@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = a1[479];
  *a2 = result;
  a2[1].n128_u32[0] = a1[480].n128_u32[0];
  return result;
}

void sub_10500D4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

long double sub_10500DC(uint64_t a1, uint64_t *a2)
{
  double v4 = 0.0;
  if (!sub_45FB48((uint64_t)a2) || !sub_45FB48(**(void **)a1)) {
    return v4;
  }
  uint64_t v5 = (int **)sub_45FC68(a2);
  uint64_t v6 = *(void *)nullsub_1(a2);
  int v7 = (unsigned __int16 *)((char *)*v5 - **v5);
  if (*v7 >= 0x2Fu && (uint64_t v8 = v7[23]) != 0)
  {
    if (*((unsigned char *)*v5 + v8)) {
      uint64_t v9 = a1 + 7480;
    }
    else {
      uint64_t v9 = a1 + 7552;
    }
    if (*(void *)(v6 + 504) <= *(void *)(v9 + 32)) {
      return v4;
    }
  }
  else
  {
    uint64_t v9 = a1 + 7480;
    if (*(void *)(v6 + 504) <= *(void *)(a1 + 7512)) {
      return v4;
    }
  }
  if (*(double *)(sub_5231C((uint64_t)a2) + 8) < *(double *)(v9 + 64)) {
    return v4;
  }
  if (*(unsigned char *)(v9 + 56)) {
    goto LABEL_13;
  }
  long long v17 = *v5;
  uint64_t v18 = (unsigned __int16 *)((char *)*v5 - **v5);
  unsigned int v19 = *v18;
  if (*((unsigned char *)v5 + 38))
  {
    if (v19 < 0xB) {
      return v4;
    }
    int v20 = v18[5];
    if (!v18[5]) {
      return v4;
    }
    int v21 = 2;
  }
  else
  {
    if (v19 < 0xB) {
      return v4;
    }
    int v20 = v18[5];
    if (!v18[5]) {
      return v4;
    }
    int v21 = 1;
  }
  if ((*(_DWORD *)&v17[v20] & v21) != 0)
  {
    if (v19 < 0x2F
      || (uint64_t v50 = v18[23]) == 0
      || ((unsigned int v51 = v17[v50], v52 = v51 > 0x2F, v53 = (1 << v51) & 0xE2E040048000, !v52)
        ? (BOOL v54 = v53 == 0)
        : (BOOL v54 = 1),
          v54))
    {
LABEL_13:
      signed int v10 = *(_DWORD *)(v9 + 40);
      uint64_t v11 = *(void *)a1 + 32;
      uint64_t v12 = sub_40EFE8(v11);
      uint64_t v13 = sub_52058(v11);
      if (v12 != v13)
      {
        unint64_t v14 = v13 - v12 - 16;
        if (v14 >= 0x80)
        {
          uint64_t v22 = (v14 >> 4) + 1;
          uint64_t v23 = v22 & 7;
          if ((v22 & 7) == 0) {
            uint64_t v23 = 8;
          }
          uint64_t v24 = v22 - v23;
          std::string::size_type v16 = (signed int *)(v12 + 16 * v24);
          int32x4_t v25 = vdupq_n_s32(v10);
          uint64_t v26 = (const float *)(v12 + 64);
          int64x2_t v27 = 0uLL;
          int8x16_t v28 = (int8x16_t)vdupq_n_s64(1uLL);
          int64x2_t v29 = 0uLL;
          int64x2_t v30 = 0uLL;
          int64x2_t v31 = 0uLL;
          do
          {
            std::string v32 = v26 - 16;
            unsigned long long v33 = (unsigned __int128)vld4q_f32(v32);
            unsigned long long v34 = (unsigned __int128)vld4q_f32(v26);
            int8x16_t v35 = vbicq_s8((int8x16_t)vcgeq_s32(v25, (int32x4_t)v33), (int8x16_t)vceqzq_s32((int32x4_t)v33));
            int8x16_t v36 = vbicq_s8((int8x16_t)vcgeq_s32(v25, (int32x4_t)v34), (int8x16_t)vceqzq_s32((int32x4_t)v34));
            v37.i64[0] = v35.u32[0];
            v37.i64[1] = v35.u32[1];
            int64x2_t v38 = (int64x2_t)vandq_s8(v37, v28);
            v37.i64[0] = v35.u32[2];
            v37.i64[1] = v35.u32[3];
            int64x2_t v39 = (int64x2_t)vandq_s8(v37, v28);
            v37.i64[0] = v36.u32[0];
            v37.i64[1] = v36.u32[1];
            int64x2_t v40 = (int64x2_t)vandq_s8(v37, v28);
            v37.i64[0] = v36.u32[2];
            v37.i64[1] = v36.u32[3];
            int64x2_t v29 = vaddq_s64(v29, v39);
            int64x2_t v27 = vaddq_s64(v27, v38);
            int64x2_t v31 = vaddq_s64(v31, (int64x2_t)vandq_s8(v37, v28));
            int64x2_t v30 = vaddq_s64(v30, v40);
            v26 += 32;
            v24 -= 8;
          }
          while (v24);
          uint64_t v15 = vaddvq_s64(vaddq_s64(vaddq_s64(v30, v27), vaddq_s64(v31, v29)));
        }
        else
        {
          uint64_t v15 = 0;
          std::string::size_type v16 = (signed int *)v12;
        }
        do
        {
          signed int v41 = *v16;
          v16 += 4;
          v15 += (v41 != 0) & (v10 >= v41);
        }
        while (v16 != (signed int *)v13);
        if (v15)
        {
          int v42 = sub_108A4C4(a1 + 120, (uint64_t)a2, *(void *)v9);
          int v43 = sub_108ADAC(a1 + 120, (uint64_t)a2, *(void *)(v9 + 8)) + v42;
          unsigned int v44 = v43 + *(unsigned __int8 *)(sub_5231C((uint64_t)a2) + 3);
          uint64_t v45 = *(void *)v9;
          if (*(void *)v9 >= *(void *)(v6 + 504)) {
            uint64_t v45 = *(void *)(v6 + 504);
          }
          uint64_t v56 = v45;
          uint64_t v46 = sub_1093268(a1 + 8, (char *)a2, &v56);
          double v47 = 0.0;
          if (v46 != 0x7FFFFFFFFFFFFFFFLL)
          {
            uint64_t v48 = *(void *)v9;
            if (*(void *)v9 != 0x7FFFFFFFFFFFFFFFLL)
            {
              if (v48) {
                double v47 = (double)v46 / (double)v48;
              }
            }
          }
          double v49 = *(double *)(v9 + 16) * (double)v44 + v47 * *(double *)(v9 + 24);
          return pow((double)v15, *(long double *)(v9 + 48)) * v49;
        }
      }
    }
  }
  return v4;
}

void sub_1050440(uint64_t a1, __n128 *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)a1 + 8);
  *(void *)(a3 + 760) = *(void *)(a3 + 8);
  *(void *)(a3 + 848) = 0;
  int64x2_t v219 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a3 + 872) = v219;
  *(_OWORD *)(a3 + 888) = xmmword_20F1D00;
  uint64_t v214 = a3 + 872;
  if (!sub_401FE4(v6))
  {
    *(void *)(a3 + 752) = 0;
    *(_OWORD *)(a3 + 768) = 0u;
    *(int64x2_t *)(a3 + 784) = vdupq_n_s64(0x4059000000000000uLL);
    *(void *)(a3 + 904) = 0;
    *(int64x2_t *)(a3 + 800) = v219;
    *(_OWORD *)(a3 + 816) = 0u;
    *(_OWORD *)(a3 + 832) = 0u;
    *(_OWORD *)(a3 + 856) = 0u;
    return;
  }
  uint64_t v220 = a3;
  int v7 = (uint64_t *)nullsub_1(v6);
  char v218 = (__n128 *)v6;
  uint64_t v8 = (uint64_t *)(v6 + 288);
  sub_3FB118((uint64_t)&v228, v7, (uint64_t *)(v6 + 288));
  if (*(unsigned char *)(sub_5231C((uint64_t)a2) + 30)) {
    char v9 = 2;
  }
  else {
    char v9 = 3;
  }
  unsigned __int8 v216 = v9;
  *(double *)(a3 + 752) = (double)(int)sub_47E704((uint64_t)a2, 0, 6);
  int v10 = sub_4F44((unsigned int *)&v228);
  uint64_t v11 = (void *)nullsub_1(a2);
  uint64_t v12 = v11[1] - *v11;
  if (v12)
  {
    unint64_t v13 = 0;
    uint64_t v215 = v12 / 1056;
    double v14 = 0.0;
    uint64_t v15 = 1056;
    double v16 = 0.0;
    while (1)
    {
      uint64_t v18 = *(void *)nullsub_1(a2) + v15;
      __p.n128_u64[0] = sub_474FB0(v18 - 608);
      __p.n128_u32[2] = v19;
      if (sub_40A4AC((int *)&__p)) {
        goto LABEL_72;
      }
      uint64_t v20 = v18 - 1056;
      int v21 = (_DWORD *)sub_374DF4(v20);
      uint64_t v22 = v21;
      if (*v21 != 0x7FFFFFFF && v21[9] != 0x7FFFFFFF && sub_40A45C(v21 + 2))
      {
        int v24 = v22[28];
        if (v24 != -1)
        {
          if (v24 == 1)
          {
            if (*((void *)v22 + 13) <= 0xFFFFFFFEFFFFFFFFLL && *((void *)v22 + 13) != 0) {
              goto LABEL_25;
            }
          }
          else
          {
            if (v24)
            {
              exception = __cxa_allocate_exception(8uLL);
              void *exception = &off_23FDF58;
            }
            if (*((void *)v22 + 13) != -1)
            {
LABEL_25:
              uint64_t v26 = sub_374DF4(v20);
              int v10 = sub_4F44((unsigned int *)(v26 + 8));
            }
          }
        }
      }
      sub_40545C(v20, v8, (uint64_t)&__p);
      if (!sub_40A45C((int *)&__p))
      {
        uint64_t v27 = sub_52060((uint64_t)&__p);
        sub_3FB134(v27, (uint64_t)&v241);
        __n128 __p = v241;
        long long v231 = (void *)v242;
      }
      unsigned __int8 v28 = v216;
      if (v13 < sub_45FC7C(a2) - 1)
      {
        int64x2_t v29 = (void *)nullsub_1(a2);
        int64x2_t v30 = (_DWORD *)sub_374DF4(*v29 + v15);
        int64x2_t v31 = v30;
        char v32 = 0;
        if (*v30 != 0x7FFFFFFF && v30[9] != 0x7FFFFFFF)
        {
          if (!sub_40A45C(v30 + 2) || (int v33 = v31[28], v33 == -1))
          {
            char v32 = 0;
          }
          else
          {
            if (v33 == 1)
            {
              unint64_t v35 = *((void *)v31 + 13);
              BOOL v34 = v35 >= 0xFFFFFFFF00000000 || v35 == 0;
            }
            else
            {
              if (v33)
              {
                uint64_t v212 = __cxa_allocate_exception(8uLL);
                *uint64_t v212 = &off_23FDF58;
              }
              BOOL v34 = *((void *)v31 + 13) == -1;
            }
            char v32 = !v34;
          }
        }
        unsigned __int8 v28 = v32 ^ 1;
      }
      sub_3FDD64(v28, (uint64_t)v218, (uint64_t)&v226);
      sub_3FB0A4((uint64_t)&v225, v10, v8);
      BOOL v36 = sub_40A52C(&v225, &v226);
      int8x16_t v37 = &v226;
      if (v36) {
        int8x16_t v37 = &v225;
      }
      __n128 v241 = *v37;
      unint64_t v242 = v37[1].n128_u64[0];
      sub_3FDE4C(v28, v218, (uint64_t)&v225);
      sub_3FB0A4((uint64_t)&v223, v10, v8);
      BOOL v38 = sub_40A52C(&v223, &v225);
      int64x2_t v39 = &v225;
      if (v38) {
        int64x2_t v39 = &v223;
      }
      __n128 v226 = *v39;
      unint64_t v227 = v39[1].n128_u64[0];
      if (sub_40A52C(&__p, &v241))
      {
        double v40 = sub_3FB32C((uint64_t)&v241);
        double v41 = (v40 - sub_3FB32C((uint64_t)&__p)) * 100.0;
        if (v14 < v41) {
          double v14 = v41;
        }
        int v42 = sub_40A440(&__p);
        double v43 = (1.0 - (double)v42 / (double)(int)sub_40A440(&v241)) * (double)*(int *)(a1 + 7632);
        if (v43 >= 0.0)
        {
          if (v43 < 4.50359963e15)
          {
            uint64_t v44 = (uint64_t)(v43 + v43) + 1;
            goto LABEL_58;
          }
        }
        else if (v43 > -4.50359963e15)
        {
          uint64_t v44 = (uint64_t)(v43 + v43);
          if (v44 >= 1) {
            --v44;
          }
LABEL_58:
          double v43 = (double)(v44 >> 1);
        }
        *(double *)(a3 + 760) = *(double *)(a3 + 760) + (double)(int)v43;
      }
      if (!sub_40A52C(&__p, &v226)) {
        goto LABEL_9;
      }
      double v45 = sub_3FB32C((uint64_t)&v226);
      double v46 = (v45 - sub_3FB32C((uint64_t)&__p)) * 100.0;
      if (v16 < v46) {
        double v16 = v46;
      }
      int v47 = sub_40A440(&__p);
      double v17 = (1.0 - (double)v47 / (double)(int)sub_40A440(&v226)) * (double)*(int *)(a1 + 7636);
      if (v17 >= 0.0)
      {
        if (v17 >= 4.50359963e15) {
          goto LABEL_8;
        }
        uint64_t v48 = (uint64_t)(v17 + v17) + 1;
      }
      else
      {
        if (v17 <= -4.50359963e15) {
          goto LABEL_8;
        }
        uint64_t v48 = (uint64_t)(v17 + v17);
        if (v48 >= 1) {
          --v48;
        }
      }
      double v17 = (double)(v48 >> 1);
LABEL_8:
      *(double *)(a3 + 760) = *(double *)(a3 + 760) + (double)(int)v17;
LABEL_9:
      ++v13;
      v15 += 1056;
      if (v215 == v13) {
        goto LABEL_72;
      }
    }
  }
  double v16 = 0.0;
  double v14 = 0.0;
LABEL_72:
  *(double *)(a3 + 816) = v14;
  *(double *)(a3 + 824) = v16;
  uint64_t v49 = sub_40EFE8((uint64_t)a2);
  uint64_t v50 = sub_52058((uint64_t)a2);
  uint64_t v51 = v49 + 1056;
  if (v51 == v50)
  {
    unsigned int v52 = 0;
  }
  else
  {
    unsigned int v52 = 0;
    do
    {
      while (1)
      {
        while (1)
        {
          uint64_t v53 = (_DWORD *)sub_374DF4(v51);
          BOOL v54 = v53;
          if (*v53 != 0x7FFFFFFF && v53[9] != 0x7FFFFFFF && sub_40A45C(v53 + 2))
          {
            int v56 = v54[28];
            if (v56 != -1) {
              break;
            }
          }
          v51 += 1056;
          if (v51 == v50) {
            goto LABEL_94;
          }
        }
        if (v56 != 1) {
          break;
        }
        unint64_t v57 = *((void *)v54 + 13);
        int v59 = v57 < 0xFFFFFFFF00000000 && v57 != 0;
        v52 += v59;
        v51 += 1056;
        if (v51 == v50) {
          goto LABEL_94;
        }
      }
      if (v56)
      {
        char v206 = __cxa_allocate_exception(8uLL);
        *char v206 = &off_23FDF58;
      }
      v52 += *((void *)v54 + 13) != -1;
      v51 += 1056;
    }
    while (v51 != v50);
  }
LABEL_94:
  *(double *)(a3 + 768) = (double)v52;
  uint64_t v60 = sub_40EFE8((uint64_t)a2);
  uint64_t v61 = sub_52058((uint64_t)a2);
  uint64_t v62 = v60 + 1056;
  if (v62 != v61)
  {
    int v63 = 0;
    while (1)
    {
      uint64_t v65 = (_DWORD *)sub_374DF4(v62);
      unint64_t v66 = v65;
      if (*v65 != 0x7FFFFFFF && v65[9] != 0x7FFFFFFF && sub_40A45C(v65 + 2))
      {
        int v68 = v66[28];
        if (v68 != -1)
        {
          if (v68 != 1)
          {
            if (v68)
            {
              uint64_t v207 = __cxa_allocate_exception(8uLL);
              *uint64_t v207 = &off_23FDF58;
            }
            unint64_t v69 = *((void *)v66 + 13);
            if (v69 == -1) {
              goto LABEL_99;
            }
LABEL_112:
            double v70 = *(uint64_t **)(a1 + 2160);
            v241.n128_u32[2] = v66[28];
            v241.n128_u64[0] = v69;
            sub_28D048(v70, (uint64_t)&v241, (unint64_t)&__p);
            int v71 = sub_3F9018(a1 + 2056, (uint64_t)&__p, (uint64_t)(v66 + 30));
            double v72 = (char *)v232;
            if (v232)
            {
              double v73 = v233;
              double v74 = v232;
              if (v233 != v232)
              {
                do
                {
                  if (*((char *)v73 - 1) < 0) {
                    operator delete(*(v73 - 3));
                  }
                  v73 -= 6;
                }
                while (v73 != (void **)v72);
                double v74 = v232;
              }
              unint64_t v233 = (void **)v72;
              operator delete(v74);
            }
            unint64_t v75 = __p.n128_u64[0];
            if (__p.n128_u64[0])
            {
              uint64_t v76 = __p.n128_i64[1];
              uint64_t v64 = (void *)__p.n128_u64[0];
              if (__p.n128_u64[1] != __p.n128_u64[0])
              {
                do
                {
                  int v77 = *(void **)(v76 - 24);
                  if (v77)
                  {
                    *(void *)(v76 - 16) = v77;
                    operator delete(v77);
                  }
                  v76 -= 48;
                }
                while (v76 != v75);
                uint64_t v64 = (void *)__p.n128_u64[0];
              }
              __p.n128_u64[1] = v75;
              operator delete(v64);
            }
            v63 += v71;
            goto LABEL_99;
          }
          unint64_t v69 = *((void *)v66 + 13);
          if (v69 <= 0xFFFFFFFEFFFFFFFFLL && *((void *)v66 + 13)) {
            goto LABEL_112;
          }
        }
      }
LABEL_99:
      v62 += 1056;
      if (v62 == v61) {
        goto LABEL_127;
      }
    }
  }
  int v63 = 0;
LABEL_127:
  *(double *)(v220 + 776) = (double)v63;
  uint64_t v78 = nullsub_1(a2);
  __p.n128_u64[0] = sub_475024(*(void *)(v78 + 8) - 608);
  __p.n128_u32[2] = v79;
  uint64_t v80 = sub_3FB118((uint64_t)&v241, (uint64_t *)&__p, v8);
  *(double *)(v220 + 784) = sub_3FB32C(v80) * 100.0;
  sub_405674((uint64_t)a2, v8, (uint64_t)&v226);
  if (!sub_40A45C((int *)&v226))
  {
    uint64_t v81 = sub_52060((uint64_t)&v226);
    sub_3FB134(v81, (uint64_t)&__p);
    __n128 v226 = __p;
    unint64_t v227 = (unint64_t)v231;
  }
  *(double *)(v220 + 792) = sub_3FB32C((uint64_t)&v226) * 100.0;
  *(double *)(v220 + 800) = (double)(int)sub_40A440(&v226) / 1000.0;
  *(double *)(v220 + 808) = sub_4056D4((uint64_t)a2);
  sub_3FDF30(v216, v218, &v225);
  double v82 = sub_3FB32C((uint64_t)&v225);
  double v83 = (v82 - sub_3FB32C((uint64_t)&v241)) * 100.0;
  if (v83 < 0.0) {
    double v83 = 0.0;
  }
  *(double *)(v220 + 832) = v83;
  *(void *)(v220 + 840) = 0;
  double v84 = sub_3FB32C((uint64_t)&v218[22].n128_i64[1]);
  double v85 = (void *)nullsub_1(a2);
  uint64_t v86 = v85[1];
  uint64_t v87 = v86 - *v85;
  if (v86 != *v85)
  {
    uint64_t v88 = (uint64_t *)nullsub_1(a2);
    uint64_t v89 = (_DWORD *)sub_374DF4(*v88);
    unint64_t v90 = v89;
    double v91 = v84 * 100.0;
    if (*v89 != 0x7FFFFFFF && v89[9] != 0x7FFFFFFF && sub_40A45C(v89 + 2))
    {
      int v92 = v90[28];
      if (v92 != -1)
      {
        if (v92)
        {
          if (v92 != 1)
          {
LABEL_313:
            char v210 = __cxa_allocate_exception(8uLL);
            *char v210 = &off_23FDF58;
          }
          if (*((void *)v90 + 13) > 0xFFFFFFFEFFFFFFFFLL || !*((void *)v90 + 13)) {
            goto LABEL_145;
          }
          goto LABEL_142;
        }
        if (*((void *)v90 + 13) != -1)
        {
LABEL_142:
          __n128 __p = v228;
          long long v231 = v229;
          double v93 = sub_3FB32C((uint64_t)&__p);
          uint64_t v94 = (uint64_t *)nullsub_1(a2);
          uint64_t v95 = sub_374DF4(*v94);
          sub_3FB118((uint64_t)&v223, (uint64_t *)(v95 + 8), v8);
          double v96 = sub_3FB32C((uint64_t)&v223);
          double v97 = v93 * 100.0;
          double v98 = v96 * 100.0;
          if (v91 >= v93 * 100.0) {
            double v97 = v91;
          }
          *(double *)(v220 + 840) = *(double *)(v220 + 840) + fmax(v98 - v97, 0.0);
        }
      }
    }
LABEL_145:
    if (v87 == 1056) {
      goto LABEL_146;
    }
    uint64_t v109 = v87 / 1056 - 1;
    uint64_t v62 = 1056;
    while (1)
    {
      int64_t v112 = (void *)nullsub_1(a2);
      unint64_t v113 = (_DWORD *)sub_374DF4(*v112 + v62);
      uint64_t v114 = v113;
      if (*v113 == 0x7FFFFFFF || v113[9] == 0x7FFFFFFF) {
        goto LABEL_163;
      }
      if (!sub_40A45C(v113 + 2)) {
        goto LABEL_163;
      }
      int v116 = v114[28];
      if (v116 == -1) {
        goto LABEL_163;
      }
      if (v116 == 1) {
        break;
      }
      if (v116) {
        goto LABEL_313;
      }
      if (*((void *)v114 + 13) != -1) {
        goto LABEL_178;
      }
LABEL_163:
      v62 += 1056;
      if (!--v109) {
        goto LABEL_146;
      }
    }
    if (*((void *)v114 + 13) > 0xFFFFFFFEFFFFFFFFLL || *((void *)v114 + 13) == 0) {
      goto LABEL_163;
    }
LABEL_178:
    uint64_t v118 = (void *)nullsub_1(a2);
    v223.n128_u64[0] = sub_475024(*v118 + v62 - 608);
    v223.n128_u32[2] = v119;
    sub_3FB118((uint64_t)&__p, (uint64_t *)&v223, v8);
    double v120 = sub_3FB32C((uint64_t)&__p);
    char v121 = (void *)nullsub_1(a2);
    uint64_t v122 = sub_374DF4(*v121 + v62);
    sub_3FB118((uint64_t)&v223, (uint64_t *)(v122 + 8), v8);
    double v110 = sub_3FB32C((uint64_t)&v223) * 100.0;
    if (v91 >= v120 * 100.0) {
      double v111 = v91;
    }
    else {
      double v111 = v120 * 100.0;
    }
    *(double *)(v220 + 840) = *(double *)(v220 + 840) + fmax(v110 - v111, 0.0);
    goto LABEL_163;
  }
LABEL_146:
  uint64_t v99 = sub_4049D8(a2);
  if (v99 != sub_52058((uint64_t)a2)) {
    goto LABEL_147;
  }
  uint64_t v105 = sub_40EFE8((uint64_t)a2);
  uint64_t v106 = (_DWORD *)sub_374DF4(v105);
  unint64_t v107 = v106;
  if (*v106 == 0x7FFFFFFF) {
    goto LABEL_147;
  }
  if (v106[9] == 0x7FFFFFFF) {
    goto LABEL_147;
  }
  if (!sub_40A45C(v106 + 2)) {
    goto LABEL_147;
  }
  int v108 = v107[28];
  if (v108 == -1) {
    goto LABEL_147;
  }
  if (v108 == 1)
  {
    if (*((void *)v107 + 13) > 0xFFFFFFFEFFFFFFFFLL || !*((void *)v107 + 13)) {
      goto LABEL_147;
    }
LABEL_308:
    uint64_t v99 = sub_40EFE8((uint64_t)a2);
    goto LABEL_147;
  }
  if (v108)
  {
    unint64_t v213 = __cxa_allocate_exception(8uLL);
    *unint64_t v213 = &off_23FDF58;
  }
  if (*((void *)v107 + 13) != -1) {
    goto LABEL_308;
  }
LABEL_147:
  if (v99 == sub_52058((uint64_t)a2)) {
    goto LABEL_193;
  }
  long long v222 = *(_OWORD *)(sub_374DF4(v99) + 88);
  __p.n128_u32[0] = 0x7FFFFFFF;
  *(unint64_t *)((char *)__p.n128_u64 + 4) = 0xFFFFFFFF7FFFFFFFLL;
  long long v231 = 0;
  uint64_t v100 = sub_40EFE8(v99);
  int v101 = *(_DWORD *)(v99 + 512);
  unsigned int v102 = sub_2AACDC(*(uint64_t **)(a1 + 2168), *(void *)(v100 + 32), v101);
  __p.n128_u64[0] = (10 * (v101 - *(_DWORD *)(sub_40EFE8((uint64_t)a2) + 512)));
  __p.n128_u32[2] = v102;
  long long v231 = *(void **)(a1 + 7648);
  if (v99 == sub_40EFE8((uint64_t)a2))
  {
    unint64_t v104 = &v228;
  }
  else
  {
    v223.n128_u64[0] = sub_475024(v99 - 608);
    v223.n128_u32[2] = v103;
    unint64_t v104 = &v223;
  }
  uint64_t v62 = sub_4F44((unsigned int *)v104);
  if (v62 == 0x7FFFFFFF) {
    uint64_t v62 = sub_53FA4((uint64_t)&v228);
  }
  uint64_t v123 = sub_374DF4(v99);
  __n128 v223 = *(__n128 *)(v123 + 8);
  uint64_t v224 = *(void *)(v123 + 24);
  sub_3FB448((uint64_t)&v223, (_DWORD *)(a1 + 7640), (uint64_t)v221);
  int v124 = sub_4F44((unsigned int *)&v223);
  int v125 = sub_4F44(v221);
  uint64_t v126 = sub_40514C(v62, v124, v125, (int *)&v222, (uint64_t)&__p, (uint64_t)v218);
  if ((int)(*(_DWORD *)(a1 + 7640) + sub_4F44((unsigned int *)&v223)) > SHIDWORD(v126))
  {
    double v127 = (1.0 - (double)(int)(HIDWORD(v126) - sub_4F44((unsigned int *)&v223)) / (double)*(int *)(a1 + 7640))
         * (double)*(int *)(a1 + 7644);
    if (v127 >= 0.0)
    {
      if (v127 < 4.50359963e15)
      {
        uint64_t v128 = (uint64_t)(v127 + v127) + 1;
LABEL_190:
        double v127 = (double)(v128 >> 1);
      }
    }
    else if (v127 > -4.50359963e15)
    {
      uint64_t v128 = (uint64_t)(v127 + v127);
      if (v128 >= 1) {
        --v128;
      }
      goto LABEL_190;
    }
    LODWORD(v126) = (int)v127 + v126;
  }
  *(double *)(v220 + 848) = (double)(int)v126;
LABEL_193:
  uint64_t v129 = sub_404874(a2);
  uint64_t v130 = sub_4049D8(a2);
  if (v129 == sub_52058((uint64_t)a2))
  {
    unint64_t v217 = (uint64_t **)(a1 + 2160);
    char v133 = *(uint64_t **)(a1 + 2160);
    uint64_t v132 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v131 = sub_374DF4(v129);
    uint64_t v132 = *(unsigned int *)(v131 + 112);
    if (v132 == 1)
    {
      uint64_t v62 = *(void *)(v131 + 104);
      unint64_t v217 = (uint64_t **)(a1 + 2160);
      char v133 = *(uint64_t **)(a1 + 2160);
      int v240 = 1;
      uint64_t v239 = v62;
      goto LABEL_201;
    }
    if (!v132)
    {
      uint64_t v62 = *(void *)(v131 + 104);
      unint64_t v217 = (uint64_t **)(a1 + 2160);
      char v133 = *(uint64_t **)(a1 + 2160);
      int v240 = 0;
      uint64_t v239 = v62;
      goto LABEL_201;
    }
    unint64_t v217 = (uint64_t **)(a1 + 2160);
    char v133 = *(uint64_t **)(a1 + 2160);
  }
  int v240 = v132;
LABEL_201:
  unint64_t v134 = sub_28CDA4(v133, (uint64_t)&v239);
  uint64_t v135 = sub_3FA3A8(*(void *)(*(void *)a1 + 8) + 160);
  BOOL v136 = sub_45FB48(**(void **)a1);
  unsigned int v137 = v134 == v135 && v136;
  if (HIDWORD(v134) == HIDWORD(v135)) {
    unsigned int v138 = v137;
  }
  else {
    unsigned int v138 = 0;
  }
  *(double *)(v220 + 864) = (double)v138;
  if (v129 != sub_52058((uint64_t)a2))
  {
    uint64_t v139 = *(void *)(a1 + 2120);
    uint64_t v140 = sub_45FC68((uint64_t *)a2);
    sub_2954EC(v139, *(void *)(v140 + 32), (uint64_t)&__p);
    char v141 = (void *)__p.n128_u64[1];
    if ((void *)__p.n128_u64[1] == v231)
    {
      unint64_t v144 = 0xFFFFFFFF00000000;
      unsigned __int32 v147 = 0x7FFFFFFF;
      uint64_t v145 = 0xFFFFFFFFLL;
      if (!__p.n128_u64[1]) {
        goto LABEL_211;
      }
    }
    else
    {
      unint64_t v142 = sub_2E1AA4((uint64_t)&__p);
      unsigned int v143 = v142;
      unint64_t v144 = v142 & 0xFFFFFFFF00000000;
      char v141 = (void *)__p.n128_u64[1];
      uint64_t v145 = v143;
      unsigned __int32 v147 = v146;
      if (!__p.n128_u64[1])
      {
LABEL_211:
        v223.n128_u64[0] = v144 | v145;
        v223.n128_u32[2] = v147;
        sub_1051BCC(a1, (unsigned int *)&v223, v62, v132);
        *(void *)uint64_t v214 = v148;
        goto LABEL_212;
      }
    }
    long long v231 = v141;
    operator delete(v141);
    goto LABEL_211;
  }
LABEL_212:
  if (v130 != sub_52058((uint64_t)a2))
  {
    uint64_t v149 = sub_374DF4(v130);
    unsigned int v150 = *(_DWORD *)(v149 + 112);
    if (v150 <= 1) {
      uint64_t v132 = *(void *)(v149 + 104);
    }
    uint64_t v151 = *(void *)(a1 + 2120);
    uint64_t v152 = sub_45FC70((uint64_t)a2);
    sub_2954EC(v151, *(void *)(v152 + 32), (uint64_t)&__p);
    long long v153 = (void *)__p.n128_u64[1];
    if ((void *)__p.n128_u64[1] == v231)
    {
      unint64_t v156 = 0xFFFFFFFF00000000;
      unsigned __int32 v159 = 0x7FFFFFFF;
      uint64_t v157 = 0xFFFFFFFFLL;
      if (!__p.n128_u64[1]) {
        goto LABEL_218;
      }
    }
    else
    {
      unint64_t v154 = sub_2E40A4((uint64_t)&__p);
      unsigned int v155 = v154;
      unint64_t v156 = v154 & 0xFFFFFFFF00000000;
      long long v153 = (void *)__p.n128_u64[1];
      uint64_t v157 = v155;
      unsigned __int32 v159 = v158;
      if (!__p.n128_u64[1])
      {
LABEL_218:
        v223.n128_u64[0] = v156 | v157;
        v223.n128_u32[2] = v159;
        sub_1051BCC(a1, (unsigned int *)&v223, v132, v150);
        *(void *)(v220 + 880) = v160;
        goto LABEL_219;
      }
    }
    long long v231 = v153;
    operator delete(v153);
    goto LABEL_218;
  }
LABEL_219:
  sub_45E958(a2, &v223);
  unint64_t v162 = v223.n128_u64[1];
  for (uint64_t i = v223.n128_u64[0]; i != v162; i += 1056)
  {
    char v164 = (_DWORD *)sub_46CAAC(i);
    long long v165 = v164;
    if (*v164 != 0x7FFFFFFF && v164[9] != 0x7FFFFFFF && sub_40A45C(v164 + 2))
    {
      int v167 = v165[28];
      if (v167 != -1)
      {
        if (v167 != 1)
        {
          if (v167)
          {
            uint64_t v208 = __cxa_allocate_exception(8uLL);
            *uint64_t v208 = &off_23FDF58;
          }
          unint64_t v168 = *((void *)v165 + 13);
          if (v168 == -1) {
            continue;
          }
LABEL_236:
          long long v169 = *v217;
          int v238 = v165[28];
          unint64_t v237 = v168;
          sub_28D048(v169, (uint64_t)&v237, (unint64_t)&__p);
          if ((sub_3FA0B8((__n128 *)v218[10].n128_u64, v234) & 1) == 0) {
            *(double *)(v214 + 16) = *(double *)(v214 + 16) + 1.0;
          }
          uint64_t v170 = (char *)v232;
          if (v232)
          {
            unint64_t v171 = v233;
            char v172 = v232;
            if (v233 != v232)
            {
              do
              {
                if (*((char *)v171 - 1) < 0) {
                  operator delete(*(v171 - 3));
                }
                v171 -= 6;
              }
              while (v171 != (void **)v170);
              char v172 = v232;
            }
            unint64_t v233 = (void **)v170;
            operator delete(v172);
          }
          unint64_t v173 = __p.n128_u64[0];
          if (__p.n128_u64[0])
          {
            uint64_t v174 = __p.n128_i64[1];
            unint64_t v163 = (void *)__p.n128_u64[0];
            if (__p.n128_u64[1] != __p.n128_u64[0])
            {
              do
              {
                unint64_t v175 = *(void **)(v174 - 24);
                if (v175)
                {
                  *(void *)(v174 - 16) = v175;
                  operator delete(v175);
                }
                v174 -= 48;
              }
              while (v174 != v173);
              unint64_t v163 = (void *)__p.n128_u64[0];
            }
            __p.n128_u64[1] = v173;
            operator delete(v163);
          }
          continue;
        }
        unint64_t v168 = *((void *)v165 + 13);
        if (v168 <= 0xFFFFFFFEFFFFFFFFLL && *((void *)v165 + 13)) {
          goto LABEL_236;
        }
      }
    }
  }
  uint64_t v176 = sub_40EFE8((uint64_t)a2);
  uint64_t v177 = sub_52058((uint64_t)a2);
  for (uint64_t j = v176 + 1056; j != v177; j += 1056)
  {
    char v180 = (_DWORD *)sub_374DF4(j);
    long long v181 = v180;
    if (*v180 != 0x7FFFFFFF && v180[9] != 0x7FFFFFFF && sub_40A45C(v180 + 2))
    {
      int v183 = v181[28];
      if (v183 != -1)
      {
        if (v183 != 1)
        {
          if (v183)
          {
            unint64_t v209 = __cxa_allocate_exception(8uLL);
            void *v209 = &off_23FDF58;
          }
          if (*((void *)v181 + 13) == -1) {
            continue;
          }
LABEL_269:
          unint64_t v184 = *v217;
          uint64_t v185 = sub_374DF4(j);
          unsigned int v236 = *(_DWORD *)(v185 + 112);
          if (v236 <= 1) {
            uint64_t v235 = *(void *)(v185 + 104);
          }
          sub_28D048(v184, (uint64_t)&v235, (unint64_t)&__p);
          uint64_t v186 = (void **)v232;
          uint64_t v187 = v233;
          unint64_t v188 = (int *)v232;
          if (v232 != v233)
          {
            char v189 = (char *)v232 + 48;
            unint64_t v188 = (int *)v232;
            if ((char *)v232 + 48 != (char *)v233)
            {
              char v190 = *(unsigned char *)v232;
              unint64_t v188 = (int *)v232;
              do
              {
                if ((((int)(*(_DWORD *)(a1 + 7656) >> v190 << 31) >> 31) & v188[1]) < (((int)(*(_DWORD *)(a1 + 7656) >> *v189 << 31) >> 31) & *((_DWORD *)v189 + 1)))
                {
                  char v190 = *v189;
                  unint64_t v188 = (int *)v189;
                }
                v189 += 48;
              }
              while (v189 != (char *)v233);
            }
          }
          double v191 = (double)v188[1] / 1000.0;
          if (v191 >= *(double *)(v220 + 896)) {
            double v191 = *(double *)(v220 + 896);
          }
          *(double *)(v220 + 896) = v191;
          if (v186)
          {
            unint64_t v192 = v186;
            if (v186 != v187)
            {
              do
              {
                if (*((char *)v187 - 1) < 0) {
                  operator delete(*(v187 - 3));
                }
                v187 -= 6;
              }
              while (v187 != v186);
              unint64_t v192 = v232;
            }
            unint64_t v233 = v186;
            operator delete(v192);
          }
          unint64_t v193 = __p.n128_u64[0];
          if (__p.n128_u64[0])
          {
            uint64_t v194 = __p.n128_i64[1];
            unint64_t v179 = (void *)__p.n128_u64[0];
            if (__p.n128_u64[1] != __p.n128_u64[0])
            {
              do
              {
                uint64_t v195 = *(void **)(v194 - 24);
                if (v195)
                {
                  *(void *)(v194 - 16) = v195;
                  operator delete(v195);
                }
                v194 -= 48;
              }
              while (v194 != v193);
              unint64_t v179 = (void *)__p.n128_u64[0];
            }
            __p.n128_u64[1] = v193;
            operator delete(v179);
          }
          continue;
        }
        if (*((void *)v181 + 13) <= 0xFFFFFFFEFFFFFFFFLL && *((void *)v181 + 13)) {
          goto LABEL_269;
        }
      }
    }
  }
  uint64_t v196 = sub_40EFE8((uint64_t)a2);
  uint64_t v197 = sub_52058((uint64_t)a2);
  uint64_t v198 = v197;
  uint64_t v199 = v196 + 1056;
  if (v196 + 1056 != v197)
  {
    uint64_t v200 = v196 + 2112;
    if (v200 != v197)
    {
      do
      {
        uint64_t v201 = sub_374DF4(v199);
        double v202 = sub_1051ECC(a1, v201);
        uint64_t v203 = sub_374DF4(v200);
        if (v202 < sub_1051ECC(a1, v203)) {
          uint64_t v199 = v200;
        }
        v200 += 1056;
      }
      while (v200 != v198);
    }
  }
  if (v199 == sub_52058((uint64_t)a2))
  {
    double v205 = 0.0;
  }
  else
  {
    uint64_t v204 = sub_374DF4(v199);
    double v205 = sub_1051ECC(a1, v204);
  }
  *(double *)(v220 + 904) = v205;
}

void sub_1051B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,void *__p,uint64_t a35,uint64_t a36)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1051BCC(uint64_t a1, unsigned int *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6 = *(uint64_t **)(a1 + 2160);
  unsigned int v26 = a4;
  if (a4 <= 1) {
    uint64_t v25 = a3;
  }
  unint64_t v7 = sub_28CDA4(v6, (uint64_t)&v25);
  unint64_t v8 = sub_28E018(*(void *)(a1 + 2160), v7);
  unsigned int v9 = v8;
  unsigned int v11 = *a2;
  unsigned int v10 = a2[1];
  if (*a2 != -1 || v10 != -1)
  {
    unint64_t v12 = HIDWORD(v8);
    if ((HIDWORD(v8) & v8) != 0xFFFFFFFF)
    {
      long double v13 = exp(3.14159265 - (double)v10 * 6.28318531 / 4294967300.0);
      long double v14 = atan((v13 - 1.0 / v13) * 0.5) * 57.2957795 * 0.0174532925;
      v15.i64[0] = v11;
      v15.i64[1] = v9;
      long double v16 = exp(3.14159265 - (double)v12 * 6.28318531 / 4294967300.0);
      long double v17 = atan((v16 - 1.0 / v16) * 0.5) * 57.2957795 * 0.0174532925;
      int64x2_t v18 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v15), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
      double v24 = vsubq_f64((float64x2_t)v18, (float64x2_t)vdupq_laneq_s64(v18, 1)).f64[0];
      long double v19 = sin((v14 - v17) * 0.5);
      long double v20 = v19 * v19;
      double v21 = cos(v14);
      long double v22 = v21 * cos(v17);
      long double v23 = sin(0.5 * v24);
      atan2(sqrt(v23 * v23 * v22 + v20), sqrt(1.0 - (v23 * v23 * v22 + v20)));
    }
  }
}

double sub_1051ECC(uint64_t a1, uint64_t a2)
{
  double v2 = 0.0;
  if (*(_DWORD *)a2 == 0x7FFFFFFF || *(_DWORD *)(a2 + 36) == 0x7FFFFFFF) {
    return v2;
  }
  if (!sub_40A45C((int *)(a2 + 8))) {
    return v2;
  }
  int v6 = *(_DWORD *)(a2 + 112);
  if (v6 == -1) {
    return v2;
  }
  if (v6 == 1)
  {
    unint64_t v7 = *(void *)(a2 + 104);
    if (v7 > 0xFFFFFFFEFFFFFFFFLL || !*(void *)(a2 + 104)) {
      return v2;
    }
    int v6 = 1;
    goto LABEL_14;
  }
  if (v6)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  unint64_t v7 = *(void *)(a2 + 104);
  if (v7 != -1)
  {
LABEL_14:
    unint64_t v8 = *(uint64_t **)(a1 + 2160);
    int v24 = v6;
    unint64_t v23 = v7;
    sub_28D048(v8, (uint64_t)&v23, (unint64_t)&v18);
    if (v22) {
      double v2 = (double)v22;
    }
    else {
      double v2 = 4.0;
    }
    unsigned int v9 = (void **)__p;
    if (__p)
    {
      unsigned int v10 = v21;
      unsigned int v11 = __p;
      if (v21 != __p)
      {
        do
        {
          if (*((char *)v10 - 1) < 0) {
            operator delete(*(v10 - 3));
          }
          v10 -= 6;
        }
        while (v10 != v9);
        unsigned int v11 = __p;
      }
      double v21 = v9;
      operator delete(v11);
    }
    unint64_t v12 = (char *)v18;
    if (v18)
    {
      long double v13 = v19;
      long double v14 = v18;
      if (v19 != v18)
      {
        do
        {
          uint64x2_t v15 = (void *)*((void *)v13 - 3);
          if (v15)
          {
            *((void *)v13 - 2) = v15;
            operator delete(v15);
          }
          v13 -= 48;
        }
        while (v13 != v12);
        long double v14 = v18;
      }
      long double v19 = v12;
      operator delete(v14);
    }
  }
  return v2;
}

void sub_105209C(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "treat_ferries_as_tolled");
  *(unsigned char *)a1 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "compute_number_of_name_changes");
  *(unsigned char *)(a1 + 1) = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "compute_geometric_loops");
  *(unsigned char *)(a1 + 2) = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "compute_supported_regions");
  *(unsigned char *)(a1 + 3) = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "compute_max_local_stretch");
  *(unsigned char *)(a1 + 4) = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "min_distance_on_same_highway");
  double v4 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v4 >= 0.0)
  {
    double v5 = v4;
    if (v4 >= 4.50359963e15) {
      goto LABEL_19;
    }
    uint64_t v6 = (uint64_t)(v4 + v4) + 1;
  }
  else
  {
    double v5 = v4;
    if (v4 <= -4.50359963e15) {
      goto LABEL_19;
    }
    uint64_t v6 = (uint64_t)(v4 + v4);
    if (v6 >= 1) {
      --v6;
    }
  }
  double v5 = (double)(v6 >> 1);
LABEL_19:
  if (v5 < 9.22337204e18)
  {
    if (v4 >= 0.0)
    {
      if (v4 >= 4.50359963e15) {
        goto LABEL_30;
      }
      uint64_t v7 = (uint64_t)(v4 + v4) + 1;
    }
    else
    {
      if (v4 <= -4.50359963e15) {
        goto LABEL_30;
      }
      uint64_t v7 = (uint64_t)(v4 + v4);
      if (v7 >= 1) {
        --v7;
      }
    }
    double v4 = (double)(v7 >> 1);
LABEL_30:
    *(void *)(a1 + 16) = (uint64_t)v4;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_32;
  }
LABEL_31:
  operator delete(__p[0]);
LABEL_32:
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "hsp_collapse_flank_max_acceleration");
  *(double *)(a1 + 24) = sub_5C7E8(a2, (uint64_t)__p) * 60.0;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "hsp_recovery_flank_min_acceleration");
  *(double *)(a1 + 32) = sub_5C7E8(a2, (uint64_t)__p) * 60.0;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93D0;
  strcpy((char *)__p[0], "hsp_rush_hour_flank_identification_window");
  *(_DWORD *)(a1 + 40) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  strcpy((char *)__p, "check_frechet_distance");
  HIBYTE(__p[2]) = 22;
  *(unsigned char *)(a1 + 5) = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "min_frechet_distance_absolute");
  double v8 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v8 >= 0.0)
  {
    double v9 = v8;
    if (v8 >= 4.50359963e15) {
      goto LABEL_48;
    }
    uint64_t v10 = (uint64_t)(v8 + v8) + 1;
  }
  else
  {
    double v9 = v8;
    if (v8 <= -4.50359963e15) {
      goto LABEL_48;
    }
    uint64_t v10 = (uint64_t)(v8 + v8);
    if (v10 >= 1) {
      --v10;
    }
  }
  double v9 = (double)(v10 >> 1);
LABEL_48:
  if (v9 < 9.22337204e18)
  {
    if (v8 >= 0.0)
    {
      if (v8 >= 4.50359963e15) {
        goto LABEL_59;
      }
      uint64_t v11 = (uint64_t)(v8 + v8) + 1;
    }
    else
    {
      if (v8 <= -4.50359963e15) {
        goto LABEL_59;
      }
      uint64_t v11 = (uint64_t)(v8 + v8);
      if (v11 >= 1) {
        --v11;
      }
    }
    double v8 = (double)(v11 >> 1);
LABEL_59:
    *(void *)(a1 + 8) = (uint64_t)v8;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  *(void *)(a1 + 8) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_61;
  }
LABEL_60:
  operator delete(__p[0]);
LABEL_61:
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "min_frechet_distance_relative");
  *(double *)(a1 + 48) = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "controlled_lane_changes_factor");
  *(double *)(a1 + 56) = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "min_non_trivial_num_lane_changes");
  *(_DWORD *)(a1 + 64) = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "min_turn_against_traffic_degree");
  *(unsigned char *)(a1 + 68) = sub_31AB44(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "max_num_trips_as_bad_road");
  *(_WORD *)(a1 + 70) = sub_376928(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9380;
  strcpy((char *)__p[0], "crossed_uncontrolled_live_observations_exponent");
  *(double *)(a1 + 72) = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9280;
  strcpy((char *)__p[0], "crossed_live_observations_exponent");
  *(double *)(a1 + 80) = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x40uLL);
  *(_OWORD *)&__p[1] = xmmword_20B98C0;
  strcpy((char *)__p[0], "crossed_live_observations_turns_against_traffic_exponent");
  *(double *)(a1 + 88) = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x50uLL);
  *(_OWORD *)&__p[1] = xmmword_20B99B0;
  strcpy((char *)__p[0], "crossed_live_observations_missing_lane_connectivity_transitions_exponent");
  *(double *)(a1 + 96) = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x48uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9270;
  strcpy((char *)__p[0], "crossed_live_observations_unprotected_turns_against_traffic_exponent");
  *(double *)(a1 + 104) = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  strcpy((char *)__p, "immediate_reroute_bias");
  HIBYTE(__p[2]) = 22;
  unint64_t v12 = (void *)sub_560F4(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_1052BE0(a1 + 112, v12);
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "freeway_overrides");
  long double v13 = sub_58070(v12, (uint64_t)__p);
  long double v14 = v13;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (v14) {
      goto LABEL_85;
    }
LABEL_94:
    sub_1052BE0(a1 + 184, v12);
    goto LABEL_95;
  }
  if (!v13) {
    goto LABEL_94;
  }
LABEL_85:
  sub_54214((uint64_t)__p, (uint64_t)v12);
  HIBYTE(v19[2]) = 17;
  strcpy((char *)v19, "freeway_overrides");
  uint64_t v15 = sub_560F4(v12, (uint64_t)v19);
  sub_59234(__p, v15);
  if (SHIBYTE(v19[2]) < 0) {
    operator delete(v19[0]);
  }
  sub_1052BE0(a1 + 184, __p);
  long double v16 = (void **)__p[2];
  if (__p[2])
  {
    do
    {
      int64x2_t v18 = (void **)*v16;
      sub_55198((uint64_t)(v16 + 5));
      if (*((char *)v16 + 39) < 0) {
        operator delete(v16[2]);
      }
      operator delete(v16);
      long double v16 = v18;
    }
    while (v18);
  }
  long double v17 = __p[0];
  __p[0] = 0;
  if (v17) {
    operator delete(v17);
  }
LABEL_95:
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "add_debug_info");
  *(unsigned char *)(a1 + 256) = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1052B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_5450C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1052B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1052BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_5450C((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_1052BE0(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "max_prefix_length");
  double v4 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v4 >= 0.0)
  {
    double v5 = v4;
    if (v4 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v6 = (uint64_t)(v4 + v4) + 1;
  }
  else
  {
    double v5 = v4;
    if (v4 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v6 = (uint64_t)(v4 + v4);
    if (v6 >= 1) {
      --v6;
    }
  }
  double v5 = (double)(v6 >> 1);
LABEL_9:
  if (v5 < 9.22337204e18)
  {
    if (v4 >= 0.0)
    {
      if (v4 >= 4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v7 = (uint64_t)(v4 + v4) + 1;
    }
    else
    {
      if (v4 <= -4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v7 = (uint64_t)(v4 + v4);
      if (v7 >= 1) {
        --v7;
      }
    }
    double v4 = (double)(v7 >> 1);
LABEL_20:
    *(void *)a1 = (uint64_t)v4;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  *(void *)a1 = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_22;
  }
LABEL_21:
  operator delete(__p[0]);
LABEL_22:
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "max_prefix_length_for_loops");
  double v8 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v8 >= 0.0)
  {
    double v9 = v8;
    if (v8 >= 4.50359963e15) {
      goto LABEL_30;
    }
    uint64_t v10 = (uint64_t)(v8 + v8) + 1;
  }
  else
  {
    double v9 = v8;
    if (v8 <= -4.50359963e15) {
      goto LABEL_30;
    }
    uint64_t v10 = (uint64_t)(v8 + v8);
    if (v10 >= 1) {
      --v10;
    }
  }
  double v9 = (double)(v10 >> 1);
LABEL_30:
  if (v9 < 9.22337204e18)
  {
    if (v8 >= 0.0)
    {
      if (v8 >= 4.50359963e15) {
        goto LABEL_41;
      }
      uint64_t v11 = (uint64_t)(v8 + v8) + 1;
    }
    else
    {
      if (v8 <= -4.50359963e15) {
        goto LABEL_41;
      }
      uint64_t v11 = (uint64_t)(v8 + v8);
      if (v11 >= 1) {
        --v11;
      }
    }
    double v8 = (double)(v11 >> 1);
LABEL_41:
    *(void *)(a1 + 8) = (uint64_t)v8;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  *(void *)(a1 + 8) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_43;
  }
LABEL_42:
  operator delete(__p[0]);
LABEL_43:
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "u_turn_penalty");
  *(double *)(a1 + 16) = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "sharing_penalty");
  *(double *)(a1 + 24) = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "min_distance_from_next_waypoint");
  double v12 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v12 >= 0.0)
  {
    double v13 = v12;
    if (v12 >= 4.50359963e15) {
      goto LABEL_55;
    }
    uint64_t v14 = (uint64_t)(v12 + v12) + 1;
  }
  else
  {
    double v13 = v12;
    if (v12 <= -4.50359963e15) {
      goto LABEL_55;
    }
    uint64_t v14 = (uint64_t)(v12 + v12);
    if (v14 >= 1) {
      --v14;
    }
  }
  double v13 = (double)(v14 >> 1);
LABEL_55:
  if (v13 < 9.22337204e18)
  {
    if (v12 >= 0.0)
    {
      if (v12 >= 4.50359963e15) {
        goto LABEL_66;
      }
      uint64_t v15 = (uint64_t)(v12 + v12) + 1;
    }
    else
    {
      if (v12 <= -4.50359963e15) {
        goto LABEL_66;
      }
      uint64_t v15 = (uint64_t)(v12 + v12);
      if (v15 >= 1) {
        --v15;
      }
    }
    double v12 = (double)(v15 >> 1);
LABEL_66:
    *(void *)(a1 + 32) = (uint64_t)v12;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
  *(void *)(a1 + 32) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_68;
  }
LABEL_67:
  operator delete(__p[0]);
LABEL_68:
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "num_reroutes_exponent");
  *(double *)(a1 + 48) = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "enable_origin_terminal_fow");
  *(unsigned char *)(a1 + 56) = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "max_reroute_age");
  *(_DWORD *)(a1 + 40) = sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "min_user_speed");
  *(double *)(a1 + 64) = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1053140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_105317C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "max_low_soc_penalty_s");
  *(_DWORD *)a1 = sub_5D2EC(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "max_critical_soc_penalty_s");
  *(_DWORD *)(a1 + 4) = sub_5D2EC(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 8) = 0x7FFFFFFF;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93C0;
  strcpy((char *)__p[0], "last_charging_stop_full_charge_penalty_s");
  *(_DWORD *)(a1 + 12) = sub_5D2EC(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "charging_power_scaling_factor");
  double v8 = sub_5C7E8(a3, (uint64_t)__p);
  double v9 = v8;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    *(double *)(a1 + 16) = v9;
    *(_DWORD *)(a1 + 24) = 0;
    if (!sub_401FE4(a4)) {
      return a1;
    }
  }
  else
  {
    *(double *)(a1 + 16) = v8;
    *(_DWORD *)(a1 + 24) = 0;
    if (!sub_401FE4(a4)) {
      return a1;
    }
  }
  __p[0] = operator new(0x38uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8DF0;
  strcpy((char *)__p[0], "last_charging_stop_potential_extra_charged_soc_percent");
  unsigned int v10 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_3FB2AC(v10, *(void *)(a4 + 288), (uint64_t)__p);
  *(_DWORD *)(a1 + 8) = sub_4F44((unsigned int *)__p);
  uint64_t v11 = sub_37D0C0(a4);
  double v13 = *(char **)v11;
  double v12 = *(char **)(v11 + 8);
  if (*(char **)v11 != v12)
  {
    int v14 = *(_DWORD *)(a1 + 24);
    unint64_t v15 = v12 - v13 - 12;
    if (v15 >= 0xC)
    {
      int v17 = 0;
      unint64_t v18 = v15 / 0xC + 1;
      long double v16 = &v13[12 * (v18 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v19 = v18 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v14 |= 1 << *v13;
        v17 |= 1 << v13[12];
        v13 += 24;
        v19 -= 2;
      }
      while (v19);
      v14 |= v17;
      if (v18 == (v18 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_20;
      }
    }
    else
    {
      long double v16 = *(char **)v11;
    }
    do
    {
      char v20 = *v16;
      v16 += 12;
      v14 |= 1 << v20;
    }
    while (v16 != v12);
LABEL_20:
    *(_DWORD *)(a1 + 24) = v14;
  }
  return a1;
}

void sub_1053458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1053484(uint64_t a1, int *a2, _DWORD *a3, int a4, int a5, uint64_t **a6)
{
  if (a2)
  {
    double v9 = (unsigned int *)sub_3AF78C(a1, a2, a5, a6);
    if (v9)
    {
      double v13 = v9;
      int v21 = (*a3 - a4) % 6048000 + ((*a3 - a4) % 6048000 < 0 ? 0x5C4900 : 0);
      double v16 = sub_105363C(a1, v9, &v21, v10, v11, v12);
      if ((*(uint64_t *)&v16 > -1 && ((*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
         || (unint64_t)(*(void *)&v16 - 1) < 0xFFFFFFFFFFFFFLL
         || (*(void *)&v16 & 0x7FFFFFFFFFFFFFFFLL) == 0)
        && v16 > 0.0)
      {
        int v20 = (*a3 + a4) % 6048000 + ((*a3 + a4) % 6048000 < 0 ? 0x5C4900 : 0);
        sub_105363C(a1, v13, &v20, -9.22337204e18, v14, v15);
      }
    }
  }
}

double sub_105363C(uint64_t a1, unsigned int *a2, _DWORD *a3, double a4, double a5, double a6)
{
  double result = -1.0;
  if (!a2) {
    return result;
  }
  uint64_t v7 = *a2;
  if (!v7) {
    return result;
  }
  if (v7 == 1)
  {
    if (!*(unsigned char *)(a1 + 3874))
    {
      LOWORD(result) = *((_WORD *)a2 + 3);
      return (double)*(unint64_t *)&result / 100.0;
    }
    return result;
  }
  int v8 = (*a3 / 864000) + 6;
  int v9 = *a3 % 864000 / 600 + (unsigned __int16)(1440 * (v8 - 7 * ((9363 * v8) >> 16)));
  double v10 = (unsigned __int16 *)(a2 + 1);
  double v11 = (unsigned __int16 *)(a2 + 1);
  unint64_t v12 = *a2;
  do
  {
    double v13 = (unsigned __int16 *)((char *)v11 + ((2 * v12) & 0x3FFFFFFFCLL));
    unsigned int v15 = *v13;
    double v14 = v13 + 2;
    unint64_t v16 = v12 >> 1;
    v12 += ~(v12 >> 1);
    if (v9 < v15) {
      unint64_t v12 = v16;
    }
    else {
      double v11 = v14;
    }
  }
  while (v12);
  int v17 = &v10[2 * v7];
  if (v11 == v17)
  {
    unint64_t v18 = v11 - 2;
  }
  else
  {
    if (v11 != v10) {
      int v17 = v11;
    }
    unint64_t v18 = v17 - 2;
    if (v11 != v10) {
      goto LABEL_19;
    }
  }
  double v11 = (unsigned __int16 *)(a2 + 1);
LABEL_19:
  int v19 = *v18;
  if (v9 < v19) {
    v19 -= 10080;
  }
  int v20 = *v11;
  if (v9 > v20) {
    v20 += 10080;
  }
  LOWORD(result) = v18[1];
  LOWORD(a6) = v11[1];
  return (double)*(unint64_t *)&result / 100.0
       + ((double)*(unint64_t *)&a6 / 100.0 - (double)*(unint64_t *)&result / 100.0)
       * (double)(v9 - v19)
       / (double)(v20 - v19);
}

void sub_10537B8()
{
  unk_25FD837 = 16641;
  word_25FD820 = 65;
  byte_25FD84F = 1;
  byte_25FD839 = 0;
}

uint64_t sub_10537E0(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "filter_for_toll_roads");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  __p[0] = operator new(0x38uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9A20;
  strcpy((char *)__p[0], "only_filter_for_toll_roads_without_congestion_zone");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v5;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9280;
  strcpy((char *)__p[0], "filter_for_time_based_restrictions");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 2) = v6;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "filter_for_contingency_terminals");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 3) = v7;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "filter_for_bad_roads");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4) = v8;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9240;
  strcpy((char *)__p[0], "filter_for_restricted_zone_violations");
  BOOL v9 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 5) = v9;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "filter_for_hov_routes");
  BOOL v10 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 6) = v10;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93C0;
  strcpy((char *)__p[0], "filter_for_dynamic_directionality_routes");
  BOOL v11 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 7) = v11;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93D0;
  strcpy((char *)__p[0], "filter_routes_through_unsupported_regions");
  BOOL v12 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 8) = v12;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "filter_for_geometric_loops");
  BOOL v13 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 9) = v13;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "filter_for_soft_closures");
  BOOL v14 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 10) = v14;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "filter_for_area_incidents");
  BOOL v15 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 11) = v15;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20E12D0;
  strcpy((char *)__p[0], "area_incident_route_max_stretch_factor");
  double v16 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 16) = v16;
  return a1;
}

void sub_1053C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double *sub_1053CBC(double *result, double **a2, double **a3)
{
  __int16 v3 = *a3;
  if (*a3 == a3[1]) {
    return result;
  }
  BOOL v5 = result;
  double v6 = v3[2];
  double v7 = v3[14];
  double v8 = v3[16];
  double v9 = v3[17];
  double v10 = v3[22];
  double v11 = v3[51];
  double v47 = v3[91];
  double v48 = v3[90];
  double v49 = v3[92];
  double v12 = v3[94];
  BOOL v13 = a2[1];
  if (*(unsigned char *)result
    && v3[7] == 0.0
    && v3[18] == 0.0
    && (!*((unsigned char *)result + 1) || v3[19] == 0.0)
    && (BOOL v14 = *a2, *a2 != v13))
  {
    double v15 = v6 - v3[95];
    while (v14[7] <= 0.0 && v14[18] <= 0.0 || v15 > v14[2] - v14[95])
    {
      v14 += 117;
      if (v14 == v13) {
        goto LABEL_14;
      }
    }
    double v16 = a2[1];
    if (v14 != v13)
    {
      if (v14 + 117 == v13)
      {
        double v16 = v14;
      }
      else
      {
        double v16 = v14;
        do
        {
          if (v14[124] <= 0.0 && v14[135] <= 0.0 || v15 > v14[119] - v14[212])
          {
            double result = (double *)memcpy(v16, v14 + 117, 0x3A3uLL);
            v16 += 117;
          }
          double v46 = v14 + 234;
          v14 += 117;
        }
        while (v46 != v13);
      }
    }
  }
  else
  {
LABEL_14:
    double v16 = a2[1];
  }
  int v17 = *a2;
  if (*((unsigned char *)v5 + 2))
  {
    if (v17 == v16)
    {
      unint64_t v18 = v16;
    }
    else
    {
      unint64_t v18 = *a2;
      while (v18[20] == 0.0)
      {
        v18 += 117;
        if (v18 == v16) {
          goto LABEL_20;
        }
      }
      if (v18 != v16)
      {
        int v19 = v18 + 117;
        if (v18 + 117 != v16)
        {
          do
          {
            if (v19[20] == 0.0)
            {
              double result = (double *)memcpy(v18, v19, 0x3A3uLL);
              v18 += 117;
            }
            v19 += 117;
          }
          while (v19 != v16);
          int v17 = *a2;
          if (!*((unsigned char *)v5 + 5)) {
            goto LABEL_35;
          }
          goto LABEL_30;
        }
      }
    }
    if (!*((unsigned char *)v5 + 5)) {
      goto LABEL_35;
    }
  }
  else
  {
LABEL_20:
    unint64_t v18 = v16;
    if (!*((unsigned char *)v5 + 5)) {
      goto LABEL_35;
    }
  }
LABEL_30:
  if (v10 == 0.0 && v17 != v18)
  {
    int v20 = v17;
    while (v20[22] == 0.0)
    {
      v20 += 117;
      if (v20 == v18) {
        goto LABEL_35;
      }
    }
    if (v20 != v18)
    {
      unsigned __int8 v22 = v20 + 117;
      if (v20 + 117 != v18)
      {
        do
        {
          if (v22[22] == 0.0)
          {
            double result = (double *)memcpy(v20, v22, 0x3A3uLL);
            v20 += 117;
          }
          v22 += 117;
        }
        while (v22 != v18);
        int v17 = *a2;
      }
    }
    if (*((unsigned char *)v5 + 9)) {
      goto LABEL_47;
    }
LABEL_36:
    int v21 = v20;
    goto LABEL_55;
  }
LABEL_35:
  int v20 = v18;
  if (!*((unsigned char *)v5 + 9)) {
    goto LABEL_36;
  }
LABEL_47:
  if (v11 != 0.0 || v17 == v20)
  {
LABEL_65:
    int v21 = v20;
    if (*((unsigned char *)v5 + 6)) {
      BOOL v25 = v17 == v20;
    }
    else {
      BOOL v25 = 1;
    }
    if (!v25) {
      goto LABEL_69;
    }
    goto LABEL_91;
  }
  int v21 = v17;
  while (v21[51] == 0.0 || v21[35] != 0.0)
  {
    v21 += 117;
    if (v21 == v20) {
      goto LABEL_65;
    }
  }
  if (v21 != v20)
  {
    unint64_t v23 = v21 + 117;
    if (v21 + 117 != v20)
    {
      do
      {
        if (v23[51] == 0.0 || v23[35] != 0.0)
        {
          double result = (double *)memcpy(v21, v23, 0x3A3uLL);
          v21 += 117;
        }
        v23 += 117;
      }
      while (v23 != v20);
      int v17 = *a2;
      if (*((unsigned char *)v5 + 6)) {
        BOOL v29 = v17 == v21;
      }
      else {
        BOOL v29 = 1;
      }
      if (!v29) {
        goto LABEL_69;
      }
      goto LABEL_91;
    }
  }
LABEL_55:
  if (*((unsigned char *)v5 + 6)) {
    BOOL v24 = v17 == v21;
  }
  else {
    BOOL v24 = 1;
  }
  if (!v24)
  {
LABEL_69:
    unsigned int v26 = v17;
    while (v26[59] == 0.0 && v26[60] == 0.0)
    {
      v26 += 117;
      if (v26 == v21) {
        goto LABEL_91;
      }
    }
    if (v26 == v21 || (uint64_t v27 = v26 + 117, v26 + 117 == v21))
    {
      if (*((unsigned char *)v5 + 7)) {
        BOOL v28 = v17 == v26;
      }
      else {
        BOOL v28 = 1;
      }
      if (!v28) {
        goto LABEL_95;
      }
    }
    else
    {
      do
      {
        if (v27[59] == 0.0 && v27[60] == 0.0)
        {
          double result = (double *)memcpy(v26, v27, 0x3A3uLL);
          v26 += 117;
        }
        v27 += 117;
      }
      while (v27 != v21);
      int v17 = *a2;
      if (*((unsigned char *)v5 + 7)) {
        BOOL v33 = v17 == v26;
      }
      else {
        BOOL v33 = 1;
      }
      if (!v33) {
        goto LABEL_95;
      }
    }
LABEL_112:
    int64x2_t v31 = v26;
    goto LABEL_113;
  }
LABEL_91:
  unsigned int v26 = v21;
  if (*((unsigned char *)v5 + 7)) {
    BOOL v30 = v17 == v21;
  }
  else {
    BOOL v30 = 1;
  }
  if (v30) {
    goto LABEL_112;
  }
LABEL_95:
  int64x2_t v31 = v17;
  while (v31[61] == 0.0 && v31[62] == 0.0)
  {
    v31 += 117;
    if (v31 == v26) {
      goto LABEL_112;
    }
  }
  if (v31 != v26)
  {
    char v32 = v31 + 117;
    if (v31 + 117 != v26)
    {
      do
      {
        if (v32[61] == 0.0 && v32[62] == 0.0)
        {
          double result = (double *)memcpy(v31, v32, 0x3A3uLL);
          v31 += 117;
        }
        v32 += 117;
      }
      while (v32 != v26);
      int v17 = *a2;
      if (*((unsigned char *)v5 + 3)) {
        goto LABEL_114;
      }
LABEL_128:
      BOOL v34 = v31;
      goto LABEL_129;
    }
  }
LABEL_113:
  if (!*((unsigned char *)v5 + 3)) {
    goto LABEL_128;
  }
LABEL_114:
  if (v9 != 0.0 || v17 == v31)
  {
LABEL_119:
    BOOL v34 = v31;
    if (!*((unsigned char *)v5 + 4)) {
      goto LABEL_142;
    }
    goto LABEL_130;
  }
  BOOL v34 = v17;
  while (v34[17] == 0.0)
  {
    v34 += 117;
    if (v34 == v31) {
      goto LABEL_119;
    }
  }
  if (v34 != v31)
  {
    unint64_t v35 = v34 + 117;
    if (v34 + 117 != v31)
    {
      do
      {
        if (v35[17] == 0.0)
        {
          double result = (double *)memcpy(v34, v35, 0x3A3uLL);
          v34 += 117;
        }
        v35 += 117;
      }
      while (v35 != v31);
      int v17 = *a2;
      if (!*((unsigned char *)v5 + 4)) {
        goto LABEL_142;
      }
      goto LABEL_130;
    }
  }
LABEL_129:
  if (!*((unsigned char *)v5 + 4)) {
    goto LABEL_142;
  }
LABEL_130:
  if (v8 == 0.0)
  {
    BOOL v36 = v17;
    if (v17 == v34) {
      goto LABEL_145;
    }
    while (v36[14] <= v7)
    {
      v36 += 117;
      if (v36 == v34) {
        goto LABEL_142;
      }
    }
    if (v36 != v34)
    {
      int8x16_t v37 = v36 + 117;
      if (v36 + 117 != v34)
      {
        do
        {
          if (v37[14] <= v7)
          {
            double result = (double *)memcpy(v36, v37, 0x3A3uLL);
            v36 += 117;
          }
          v37 += 117;
        }
        while (v37 != v34);
        int v17 = *a2;
      }
LABEL_145:
      if (!*((unsigned char *)v5 + 8)) {
        goto LABEL_167;
      }
      goto LABEL_146;
    }
  }
LABEL_142:
  BOOL v36 = v34;
  if (!*((unsigned char *)v5 + 8)) {
    goto LABEL_167;
  }
LABEL_146:
  if (v48 == 0.0 || v17 == v36) {
    goto LABEL_161;
  }
  BOOL v38 = v17 + 117;
  while (*(v38 - 27) != 0.0)
  {
    BOOL v24 = v38 == v36;
    v38 += 117;
    if (v24) {
      goto LABEL_161;
    }
  }
  BOOL v39 = 0;
  double v40 = v38 - 117;
  if (v38 - 117 != v36 && v38 != v36)
  {
    do
    {
      if (v38[90] != 0.0)
      {
        double result = (double *)memcpy(v40, v38, 0x3A3uLL);
        v40 += 117;
      }
      v38 += 117;
    }
    while (v38 != v36);
    int v17 = *a2;
    BOOL v39 = *((unsigned char *)v5 + 8) == 0;
  }
  BOOL v36 = v40;
  if (!v39)
  {
LABEL_161:
    if (v47 != 0.0 && v17 != v36)
    {
      double v41 = v17 + 117;
      while (*(v41 - 26) != 0.0)
      {
        BOOL v24 = v41 == v36;
        v41 += 117;
        if (v24) {
          goto LABEL_167;
        }
      }
      int v42 = v41 - 117;
      if (v41 - 117 != v36 && v41 != v36)
      {
        do
        {
          if (v41[91] != 0.0)
          {
            double result = (double *)memcpy(v42, v41, 0x3A3uLL);
            v42 += 117;
          }
          v41 += 117;
        }
        while (v41 != v36);
        int v17 = *a2;
      }
      goto LABEL_168;
    }
  }
LABEL_167:
  int v42 = v36;
LABEL_168:
  if (*((unsigned char *)v5 + 10))
  {
    if (v17 == v42)
    {
      uint64_t v44 = v17;
    }
    else
    {
      double v43 = v17 + 117;
      while (*(v43 - 23) <= v12)
      {
        BOOL v24 = v43 == v42;
        v43 += 117;
        if (v24) {
          goto LABEL_174;
        }
      }
      uint64_t v44 = v43 - 117;
      if (v43 - 117 != v42 && v43 != v42)
      {
        do
        {
          if (v43[94] <= v12)
          {
            double result = (double *)memcpy(v44, v43, 0x3A3uLL);
            v44 += 117;
          }
          v43 += 117;
        }
        while (v43 != v42);
        int v17 = *a2;
      }
    }
  }
  else
  {
LABEL_174:
    uint64_t v44 = v42;
  }
  if (!*((unsigned char *)v5 + 11) || v49 != 0.0) {
    goto LABEL_204;
  }
  if (v17 != v44)
  {
    while (v17[92] <= 0.0 || v6 * v5[2] > v17[2])
    {
      v17 += 117;
      if (v17 == v44) {
        goto LABEL_204;
      }
    }
  }
  if (v17 != v44)
  {
    for (uint64_t i = v17 + 117; i != v44; i += 117)
    {
      if (i[92] <= 0.0 || v6 * v5[2] > i[2])
      {
        double result = (double *)memcpy(v17, i, 0x3A3uLL);
        v17 += 117;
      }
    }
  }
  else
  {
LABEL_204:
    int v17 = v44;
  }
  if (v17 != a2[1]) {
    a2[1] = v17;
  }
  return result;
}

void sub_105456C()
{
  unk_25FD867 = 16641;
  word_25FD850 = 65;
  byte_25FD87F = 1;
  byte_25FD869 = 0;
}

uint64_t sub_1054594(unsigned char *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  sub_10546EC(a1, v7);
  uint64_t v4 = v2 + 936;
  if (v2 != v3 && v4 != v3)
  {
    do
    {
      if (!v8) {
        sub_29F82C();
      }
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*v8 + 48))(v8, v4, v2)) {
        uint64_t v2 = v4;
      }
      v4 += 936;
    }
    while (v4 != v3);
  }
  if (v8 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v8)
  {
    (*(void (**)(void))(*v8 + 40))();
  }
  return v2;
}

void sub_10546C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10547B0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10546D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10547B0((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_10546EC@<X0>(unsigned char *result@<X0>, void *a2@<X8>)
{
  if (*result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "Unknown policy supplied in driving route picker component");
    uint64_t v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  *a2 = off_243F470;
  a2[3] = a2;
  return result;
}

void sub_1054780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10547B0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_1054844()
{
}

void *sub_1054858()
{
  double result = operator new(0x10uLL);
  *double result = off_243F470;
  return result;
}

void sub_1054890(uint64_t a1, void *a2)
{
  *a2 = off_243F470;
}

BOOL sub_10548B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a2 + 920) < *(double *)(a3 + 920);
}

uint64_t sub_10548CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3msl7routing18DrivingRoutePicker23get_comparator_functionERKNS1_8policy_tEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3msl7routing18DrivingRoutePicker23get_comparator_functionERKNS1_8policy_tEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3msl7routing18DrivingRoutePicker23get_comparator_functionERKNS1_8policy_tEE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3msl7routing18DrivingRoutePicker23get_comparator_functionERKNS1_8policy_tEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_105493C()
{
}

void sub_1054948()
{
  unk_25FD897 = 16641;
  word_25FD880 = 65;
  byte_25FD8AF = 1;
  byte_25FD899 = 0;
}

void sub_1054970()
{
  uint64_t v0 = (void **)__chkstk_darwin();
  uint64_t v2 = v1;
  sub_105553C((uint64_t)v23, *v0, v3);
  uint64_t v5 = *v2;
  uint64_t v4 = v2[1];
  if (v5 != v4)
  {
    int v6 = v24[6334];
    do
    {
      if (v6 == 1)
      {
        if (*(unsigned char *)(v5 + 928)) {
          goto LABEL_13;
        }
      }
      else if (v6 == 3)
      {
        if (*(unsigned char *)(v5 + 930)) {
          goto LABEL_13;
        }
      }
      else if (v6 != 2 || *(unsigned char *)(v5 + 929))
      {
LABEL_13:
        *(void *)(v5 + 920) = 0;
        double v7 = 0.0;
        uint64_t v8 = 8;
        double v9 = v24;
        do
        {
          if (!*(v9 - 2)
            || ((double v10 = *(double *)(v5 + 8 + 8 * *v9), v11 = fabs(v10), v10 != 0.0)
              ? (BOOL v12 = v11 < 2.22044605e-16)
              : (BOOL v12 = 1),
                v12))
          {
            BOOL v13 = (double *)(v5 + v8);
            if (*(v9 - 1)) {
              BOOL v14 = (double *)(v5 + v8);
            }
            else {
              BOOL v14 = (double *)(v9 - 34);
            }
            if (*(v9 - 1)) {
              BOOL v13 = (double *)(v9 - 34);
            }
            double v15 = fmax(*v13 - *v14, 0.0);
            double v16 = *(double *)(v9 - 50);
            double v7 = v7 + v16 * pow(v15, *(long double *)(v9 - 42));
            *(double *)(v5 + 920) = v7;
            double v17 = fabs(v15);
            if (v15 != 0.0 && v17 >= 2.22044605e-16)
            {
              double v7 = v7 + *(double *)(v9 - 26);
              *(double *)(v5 + 920) = v7;
            }
            double v19 = *(double *)(v9 - 18);
            double v20 = fabs(v19);
            if (v19 != 0.0 && v20 >= 2.22044605e-16)
            {
              double v22 = v19 * *(double *)(v5 + 16);
              double v7 = v7 + v22 * pow(v15, *(long double *)(v9 - 10));
              *(double *)(v5 + 920) = v7;
            }
          }
          v9 += 56;
          v8 += 8;
        }
        while (v8 != 920);
        goto LABEL_4;
      }
      *(void *)(v5 + 920) = 0x7FEFFFFFFFFFFFFFLL;
LABEL_4:
      v5 += 936;
    }
    while (v5 != v4);
  }
}

void sub_1054B50()
{
  unk_25FD8C7 = 16641;
  word_25FD8B0 = 65;
  byte_25FD8DF = 1;
  byte_25FD8C9 = 0;
}

uint64_t sub_1054B78(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = -6384;
  do
  {
    uint64_t v7 = a1 + v6;
    *(_OWORD *)(v7 + 6384) = xmmword_20B8F70;
    *(_OWORD *)(v7 + 6400) = 0uLL;
    *(_OWORD *)(v7 + 6416) = 0uLL;
    *(_WORD *)(v7 + 6432) = 0;
    v6 += 56;
  }
  while (v6);
  uint64_t v8 = (unsigned char *)(a1 + 6384);
  *(unsigned char *)(a1 + 6384) = 0;
  HIBYTE(__p[2]) = 8;
  strcpy((char *)__p, "standard");
  uint64_t v9 = sub_560F4(a2, (uint64_t)__p);
  double v10 = (void *)v9;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    double v11 = (uint64_t *)v10[2];
    if (!v11) {
      goto LABEL_7;
    }
  }
  else
  {
    double v11 = *(uint64_t **)(v9 + 16);
    if (!v11) {
      goto LABEL_7;
    }
  }
  do
  {
    if (sub_104A004((uint64_t)(v11 + 2)))
    {
      unsigned int v13 = sub_104A030((uint64_t)(v11 + 2));
      if (*((_DWORD *)v11 + 12) != 2)
      {
LABEL_37:
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      sub_1054EF4(a1, v13, (void *)v11[5]);
    }
    double v11 = (uint64_t *)*v11;
  }
  while (v11);
LABEL_7:
  int v12 = *(char *)(a3 + 23);
  if (v12 < 0)
  {
    if (*(void *)(a3 + 8) == 8 && **(void **)a3 == 0x647261646E617473)
    {
LABEL_38:
      HIBYTE(__p[2]) = 16;
      strcpy((char *)__p, "route_candidates");
      uint64_t v21 = sub_561B0(v10, (uint64_t)__p);
      *uint64_t v8 = sub_1055334(v21);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      return a1;
    }
  }
  else if (v12 == 8 && *(void *)a3 == 0x647261646E617473)
  {
    goto LABEL_38;
  }
  BOOL v14 = (void *)sub_560F4(a2, a3);
  HIBYTE(v24[2]) = 16;
  strcpy((char *)v24, "route_candidates");
  HIBYTE(v23[2]) = 16;
  strcpy((char *)v23, "route_candidates");
  uint64_t v15 = sub_561B0(v10, (uint64_t)v23);
  double v16 = sub_58070(v14, (uint64_t)v24);
  if (v16 && !*((_DWORD *)v16 + 12))
  {
    uint64_t v15 = v16[5];
    if ((*(char *)(v15 + 23) & 0x80000000) == 0) {
      goto LABEL_21;
    }
  }
  else if ((*(char *)(v15 + 23) & 0x80000000) == 0)
  {
LABEL_21:
    long long v17 = *(_OWORD *)v15;
    __n128 __p[2] = *(void **)(v15 + 16);
    *(_OWORD *)__n128 __p = v17;
    goto LABEL_24;
  }
  sub_4200(__p, *(void **)v15, *(void *)(v15 + 8));
LABEL_24:
  *uint64_t v8 = sub_1055334((uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v23[2]) & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v24[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_31;
    }
  }
  else if ((SHIBYTE(v23[2]) & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(v23[0]);
  if ((SHIBYTE(v24[2]) & 0x80000000) == 0)
  {
LABEL_27:
    uint64_t i = (uint64_t *)v14[2];
    if (i) {
      goto LABEL_35;
    }
    return a1;
  }
LABEL_31:
  operator delete(v24[0]);
  for (uint64_t i = (uint64_t *)v14[2]; i; uint64_t i = (uint64_t *)*i)
  {
LABEL_35:
    if (sub_104A004((uint64_t)(i + 2)))
    {
      unsigned int v19 = sub_104A030((uint64_t)(i + 2));
      if (*((_DWORD *)i + 12) != 2) {
        goto LABEL_37;
      }
      sub_1054EF4(a1, v19, (void *)i[5]);
    }
  }
  return a1;
}

void sub_1054E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1054EF4(uint64_t a1, unsigned int a2, void *a3)
{
  if (a2 == 115) {
    return;
  }
  BYTE7(v25[2]) = 6;
  strcpy((char *)&v25[1], "factor");
  uint64_t v6 = sub_58070(a3, (uint64_t)&v25[1]);
  uint64_t v7 = (void *)(a1 + 56 * a2);
  if (v6)
  {
    uint64_t v7 = v6 + 5;
    if (*((_DWORD *)v6 + 12) != 1) {
      uint64_t v7 = (void *)(a1 + 56 * a2);
    }
  }
  *(void *)(a1 + 56 * a2) = *v7;
  if (SBYTE7(v25[2]) < 0) {
    operator delete(*(void **)&v25[1]);
  }
  BYTE7(v25[2]) = 8;
  strcpy((char *)&v25[1], "exponent");
  uint64_t v8 = sub_58070(a3, (uint64_t)&v25[1]);
  unsigned int v9 = a2;
  double v10 = (void *)(a1 + 56 * a2 + 8);
  if (v8)
  {
    double v10 = v8 + 5;
    if (*((_DWORD *)v8 + 12) != 1) {
      double v10 = (void *)(a1 + 56 * a2 + 8);
    }
  }
  *(void *)(a1 + 56 * a2 + 8) = *v10;
  if (SBYTE7(v25[2]) < 0) {
    operator delete(*(void **)&v25[1]);
  }
  BYTE7(v25[2]) = 9;
  strcpy((char *)&v25[1], "threshold");
  double v11 = sub_58070(a3, (uint64_t)&v25[1]);
  int v12 = (void *)(a1 + 56 * a2 + 16);
  if (v11)
  {
    int v12 = v11 + 5;
    if (*((_DWORD *)v11 + 12) != 1) {
      int v12 = (void *)(a1 + 56 * a2 + 16);
    }
  }
  *(void *)(a1 + 56 * a2 + 16) = *v12;
  if (SBYTE7(v25[2]) < 0) {
    operator delete(*(void **)&v25[1]);
  }
  *(void *)&v25[1] = operator new(0x20uLL);
  *(_OWORD *)((char *)&v25[1] + 8) = xmmword_20B91C0;
  strcpy(*(char **)&v25[1], "apply_if_below_threshold");
  unsigned int v13 = sub_58070(a3, (uint64_t)&v25[1]);
  BOOL v14 = (BOOL *)(a1 + 56 * a2 + 49);
  if (v13 && (int v15 = *((_DWORD *)v13 + 12), (v15 & 0xFFFFFFFE) == 4))
  {
    *BOOL v14 = v15 == 4;
    if ((SBYTE7(v25[2]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
  }
  else
  {
    *BOOL v14 = *v14;
    if ((SBYTE7(v25[2]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
  }
  operator delete(*(void **)&v25[1]);
LABEL_23:
  BYTE7(v25[2]) = 16;
  strcpy((char *)&v25[1], "non_zero_penalty");
  double v16 = sub_58070(a3, (uint64_t)&v25[1]);
  long long v17 = (void *)(a1 + 56 * a2 + 24);
  if (v16)
  {
    long long v17 = v16 + 5;
    if (*((_DWORD *)v16 + 12) != 1) {
      long long v17 = (void *)(a1 + 56 * a2 + 24);
    }
  }
  *(void *)(a1 + 56 * a2 + 24) = *v17;
  if (SBYTE7(v25[2]) < 0) {
    operator delete(*(void **)&v25[1]);
  }
  BYTE7(v25[2]) = 20;
  strcpy((char *)&v25[1], "relative_time_factor");
  unint64_t v18 = sub_58070(a3, (uint64_t)&v25[1]);
  unsigned int v19 = (void *)(a1 + 56 * a2 + 32);
  if (v18)
  {
    unsigned int v19 = v18 + 5;
    if (*((_DWORD *)v18 + 12) != 1) {
      unsigned int v19 = (void *)(a1 + 56 * a2 + 32);
    }
  }
  *(void *)(a1 + 56 * a2 + 32) = *v19;
  if (SBYTE7(v25[2]) < 0) {
    operator delete(*(void **)&v25[1]);
  }
  strcpy((char *)&v25[1], "relative_time_exponent");
  BYTE7(v25[2]) = 22;
  double v20 = sub_58070(a3, (uint64_t)&v25[1]);
  uint64_t v21 = (void *)(a1 + 56 * a2 + 40);
  if (v20)
  {
    uint64_t v21 = v20 + 5;
    if (*((_DWORD *)v20 + 12) != 1) {
      uint64_t v21 = (void *)(a1 + 56 * a2 + 40);
    }
  }
  *(void *)(a1 + 56 * a2 + 40) = *v21;
  if (SBYTE7(v25[2]) < 0) {
    operator delete(*(void **)&v25[1]);
  }
  BYTE7(v25[2]) = 18;
  strcpy((char *)v25, "only_apply_if_zeonly_apply_if_zero");
  double v22 = sub_58070(a3, (uint64_t)&v25[1]);
  unint64_t v23 = v22;
  if (SBYTE7(v25[2]) < 0)
  {
    operator delete(*(void **)&v25[1]);
    if (!v23) {
      return;
    }
  }
  else if (!v22)
  {
    return;
  }
  *(unsigned char *)(a1 + 56 * v9 + 48) = 1;
  BYTE7(v25[2]) = 18;
  strcpy((char *)&v25[2], "ro");
  v25[1] = v25[0];
  uint64_t v24 = sub_561B0(a3, (uint64_t)&v25[1]);
  *(unsigned char *)(a1 + 56 * v9 + 50) = sub_104A030(v24);
  if (SBYTE7(v25[2]) < 0) {
    operator delete(*(void **)&v25[1]);
  }
}

void sub_10552F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1055334(uint64_t a1)
{
  uint64_t v2 = sub_1055540(&xmmword_25FD8E0, a1);
  if (v2) {
    return *((unsigned __int8 *)v2 + 40);
  }
  uint64_t result = sub_723EC(3u);
  if (result)
  {
    sub_6BAC((uint64_t)v11);
    uint64_t v4 = sub_188FC78(v11, (uint64_t)"Value ", 6);
    int v5 = *(char *)(a1 + 23);
    if (v5 >= 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = *(void *)a1;
    }
    if (v5 >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v7 = *(void *)(a1 + 8);
    }
    uint64_t v8 = sub_188FC78(v4, v6, v7);
    sub_188FC78(v8, (uint64_t)" is not defined in route candidate categories.", 46);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v10 < 0) {
      operator delete(__p);
    }
    if (v12 < 0) {
      operator delete((void *)v11[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    return 0;
  }
  return result;
}

void sub_10554F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *sub_1055540(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  char v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    unsigned int v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          unsigned int v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        unsigned int v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_1055770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    unsigned int v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      char v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          unint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            char v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          char v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  char v25 = (char *)operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)char v25 = 0;
  *((void *)v25 + 1) = v10;
  unsigned int v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)unsigned int v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  v25[40] = *(unsigned char *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        BOOL v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        BOOL v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        BOOL v29 = *(void **)(*(void *)a1 + 8 * v10);
        BOOL v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      BOOL v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      BOOL v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *BOOL v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  BOOL v29 = *(void **)(*(void *)a1 + 8 * v3);
  BOOL v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *BOOL v30 = *v29;
  void *v29 = v42[0];
LABEL_92:
  char v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1055BB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1055BCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1055BE4()
{
  __int16 v1 = 3;
  LODWORD(v0[0]) = 7105633;
  __int16 v3 = 260;
  strcpy((char *)v2, "main");
  __int16 v5 = 524;
  strcpy((char *)v4, "default_main");
  __int16 v7 = 774;
  strcpy((char *)__p, "biased");
  xmmword_25FD8E0 = 0u;
  *(_OWORD *)&qword_25FD8F0 = 0u;
  dword_25FD900 = 1065353216;
  sub_1055770((uint64_t)&xmmword_25FD8E0, (uint64_t)v0, (uint64_t)v0);
  sub_1055770((uint64_t)&xmmword_25FD8E0, (uint64_t)v2, (uint64_t)v2);
  sub_1055770((uint64_t)&xmmword_25FD8E0, (uint64_t)v4, (uint64_t)v4);
  sub_1055770((uint64_t)&xmmword_25FD8E0, (uint64_t)__p, (uint64_t)__p);
  if ((char)v7 < 0)
  {
    operator delete(__p[0]);
    if (((char)v5 & 0x80000000) == 0)
    {
LABEL_3:
      if (((char)v3 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if (((char)v5 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v4[0]);
  if (((char)v3 & 0x80000000) == 0)
  {
LABEL_4:
    if (((char)v1 & 0x80000000) == 0) {
      return;
    }
LABEL_9:
    operator delete(v0[0]);
    return;
  }
LABEL_8:
  operator delete(v2[0]);
  if ((char)v1 < 0) {
    goto LABEL_9;
  }
}

void sub_1055D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25FD8F0) {
    sub_20B1BB0((void **)qword_25FD8F0);
  }
  uint8x8_t v37 = (void *)xmmword_25FD8E0;
  *(void *)&xmmword_25FD8E0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_1055E14(uint64_t *a1, void *a2)
{
  char v22 = 19;
  strcpy(__p, "is_metrics_relevant");
  __int16 v3 = (uint64_t *)sub_5C4AC(a2, (uint64_t)__p);
  unint64_t v4 = v3;
  if ((v22 & 0x80000000) == 0)
  {
    uint64_t v5 = *v3;
    uint64_t v6 = v3[1];
    if (*v3 != v6) {
      goto LABEL_7;
    }
    return 0;
  }
  operator delete(*(void **)__p);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (*v4 == v6) {
    return 0;
  }
  while (1)
  {
LABEL_7:
    if (*(_DWORD *)(v5 + 8) != 2)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    __int16 v7 = *(void **)v5;
    char v22 = 8;
    strcpy(__p, "criteria");
    uint64_t v8 = sub_561B0(v7, (uint64_t)__p);
    unsigned int v9 = sub_104A030(v8);
    unsigned int v10 = v9;
    if (v22 < 0) {
      break;
    }
    if (v9 != 115) {
      goto LABEL_12;
    }
LABEL_6:
    v5 += 16;
    if (v5 == v6) {
      return 0;
    }
  }
  operator delete(*(void **)__p);
  if (v10 == 115) {
    goto LABEL_6;
  }
LABEL_12:
  char v22 = 9;
  strcpy(__p, "threshold");
  double v11 = sub_5C7E8(v7, (uint64_t)__p);
  if (v22 < 0) {
    operator delete(*(void **)__p);
  }
  char v22 = 4;
  strcpy(__p, "type");
  uint64_t v12 = sub_561B0(v7, (uint64_t)__p);
  int v13 = *(char *)(v12 + 23);
  if (v13 < 0)
  {
    if (*(void *)(v12 + 8) != 3) {
      goto LABEL_38;
    }
    uint64_t v12 = *(void *)v12;
  }
  else if (v13 != 3)
  {
LABEL_38:
    BOOL v15 = 0;
    if (v22 < 0) {
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  BOOL v15 = *(_WORD *)v12 == 16717 && *(unsigned char *)(v12 + 2) == 88;
  if (v22 < 0) {
LABEL_26:
  }
    operator delete(*(void **)__p);
LABEL_27:
  uint64_t v16 = *a1;
  uint64_t v17 = a1[1];
  if (*a1 == v17) {
    goto LABEL_6;
  }
  uint64_t v18 = 8 * v10 + 8;
  if (v15)
  {
    while (!*(unsigned char *)(v16 + 928) || *(double *)(v16 + v18) > v11)
    {
      v16 += 936;
      if (v16 == v17) {
        goto LABEL_6;
      }
    }
  }
  else
  {
    while (!*(unsigned char *)(v16 + 928) || *(double *)(v16 + v18) < v11)
    {
      v16 += 936;
      if (v16 == v17) {
        goto LABEL_6;
      }
    }
  }
  return 1;
}

void sub_10560BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10560E4(uint64_t result, uint64_t a2, char a3)
{
  *(void *)uint64_t result = a2;
  *(unsigned char *)(result + 8) = a3;
  *(unsigned char *)(result + 9) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_WORD *)(result + 28) = 0;
  *(void *)(result + 12) = 0;
  *(unsigned char *)(result + 20) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 32) = 0;
  return result;
}

void *sub_105610C()
{
  uint64_t result = (void *)__chkstk_darwin();
  uint64_t v5 = v4;
  *(void *)((char *)result + 12) = 0;
  uint64_t v6 = (__n128 *)((char *)result + 12);
  *((unsigned char *)result + 20) = 0;
  *((_DWORD *)result + 6) = 0;
  *((_WORD *)result + 14) = 0;
  __int16 v7 = (void **)(result + 4);
  result[5] = result[4];
  *((unsigned char *)result + 9) = 0;
  if (!v2 || (uint64_t v8 = v1, *v1 == v1[1]))
  {
    *unint64_t v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    return result;
  }
  uint64_t v9 = v3;
  int v10 = v2;
  uint64_t v114 = (__n128 *)result;
  double v11 = (void *)*result;
  v129[1].n128_u8[7] = 21;
  strcpy((char *)v129, "DrivingRouteSelection");
  memset(__p, 0, 24);
  unint64_t v113 = sub_374CDC((uint64_t)v11, (uint64_t)v129, (uint64_t *)__p);
  unint64_t v12 = __p[0].n128_u64[0];
  double v111 = v5;
  if (__p[0].n128_u64[0])
  {
    unint64_t v13 = __p[0].n128_u64[1];
    char v14 = (void *)__p[0].n128_u64[0];
    if (__p[0].n128_u64[1] != __p[0].n128_u64[0])
    {
      do
      {
        if (*(char *)(v13 - 1) < 0) {
          operator delete(*(void **)(v13 - 24));
        }
        v13 -= 24;
      }
      while (v13 != v12);
      char v14 = (void *)__p[0].n128_u64[0];
    }
    __p[0].n128_u64[1] = v12;
    operator delete(v14);
    uint64_t v5 = v111;
  }
  if (v129[1].n128_i8[7] < 0) {
    operator delete((void *)v129[0].n128_u64[0]);
  }
  v129[1].n128_u8[7] = 17;
  strcpy((char *)v129, "return_all_routes");
  LODWORD(v115) = sub_29D62C(v113, (uint64_t)v129);
  if (v129[1].n128_i8[7] < 0) {
    operator delete((void *)v129[0].n128_u64[0]);
  }
  v129[0].n128_u64[0] = (unint64_t)operator new(0x28uLL);
  *(__n128 *)((char *)v129 + 8) = (__n128)xmmword_20B9390;
  strcpy((char *)v129[0].n128_u64[0], "return_all_main_route_candidates");
  LODWORD(v109[1]) = sub_29D62C(v113, (uint64_t)v129);
  if (v129[1].n128_i8[7] < 0) {
    operator delete((void *)v129[0].n128_u64[0]);
  }
  v129[1].n128_u8[7] = 14;
  strcpy((char *)v129, "add_debug_info");
  BOOL v112 = sub_29D62C(v113, (uint64_t)v129);
  if (v129[1].n128_i8[7] < 0) {
    operator delete((void *)v129[0].n128_u64[0]);
  }
  v129[1].n128_u8[7] = 20;
  strcpy((char *)v129, "debug_scoring_policy");
  uint64_t v110 = sub_561B0(v113, (uint64_t)v129);
  if (v129[1].n128_i8[7] < 0) {
    operator delete((void *)v129[0].n128_u64[0]);
  }
  v129[1].n128_u8[7] = 19;
  strcpy((char *)v129, "is_metrics_relevant");
  BOOL v15 = (uint64_t *)sub_5C4AC(v113, (uint64_t)v129);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  if (v129[1].n128_i8[7] < 0) {
    operator delete((void *)v129[0].n128_u64[0]);
  }
  sub_104D30C((uint64_t)v129, v114->n128_u64[0], (void **)v9, v114->n128_u8[8], 0);
  sub_5F3038(&v128, 0);
  uint64_t v18 = v114->n128_u64[0];
  __p[1].n128_u8[7] = 18;
  strcpy((char *)__p, "DrivingRouteFilter");
  memset(v130, 0, 24);
  uint64_t v19 = sub_374CDC(v18, (uint64_t)__p, (uint64_t *)v130);
  sub_1053CB8((uint64_t)v127, v19);
  uint64_t v20 = (void **)v130[0];
  if (v130[0])
  {
    uint64_t v21 = (void **)v130[1];
    char v22 = v130[0];
    if (v130[1] != v130[0])
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 3;
      }
      while (v21 != v20);
      char v22 = v130[0];
    }
    v130[1] = v20;
    operator delete(v22);
  }
  if (__p[1].n128_i8[7] < 0) {
    operator delete((void *)__p[0].n128_u64[0]);
  }
  uint64_t v23 = v114->n128_u64[0];
  __p[1].n128_u8[7] = 19;
  strcpy((char *)__p, "DrivingRouteScoring");
  memset(v130, 0, 24);
  uint64_t v24 = sub_374CDC(v23, (uint64_t)__p, (uint64_t *)v130);
  sub_497CC0(&v126, (uint64_t)v24);
  char v25 = (void **)v130[0];
  if (v130[0])
  {
    unsigned int v26 = (void **)v130[1];
    float v27 = v130[0];
    if (v130[1] != v130[0])
    {
      do
      {
        if (*((char *)v26 - 1) < 0) {
          operator delete(*(v26 - 3));
        }
        v26 -= 3;
      }
      while (v26 != v25);
      float v27 = v130[0];
    }
    v130[1] = v25;
    operator delete(v27);
  }
  if (__p[1].n128_i8[7] < 0) {
    operator delete((void *)__p[0].n128_u64[0]);
  }
  uint64_t v28 = v114->n128_u64[0];
  strcpy((char *)__p, "DrivingMainRouteMarker");
  __p[1].n128_u8[7] = 22;
  memset(v130, 0, 24);
  BOOL v29 = sub_374CDC(v28, (uint64_t)__p, (uint64_t *)v130);
  sub_10485B8((uint64_t)v125, v29, v9);
  BOOL v30 = (void **)v130[0];
  if (v130[0])
  {
    BOOL v31 = (void **)v130[1];
    unint64_t v32 = v130[0];
    if (v130[1] != v130[0])
    {
      do
      {
        if (*((char *)v31 - 1) < 0) {
          operator delete(*(v31 - 3));
        }
        v31 -= 3;
      }
      while (v31 != v30);
      unint64_t v32 = v130[0];
    }
    v130[1] = v30;
    operator delete(v32);
  }
  LODWORD(v109[0]) = v10;
  if (__p[1].n128_i8[7] < 0) {
    operator delete((void *)__p[0].n128_u64[0]);
  }
  uint64_t v33 = v114->n128_u64[0];
  __p[0].n128_u64[0] = (unint64_t)operator new(0x20uLL);
  *(__n128 *)((char *)__p + 8) = (__n128)xmmword_20B91C0;
  strcpy((char *)__p[0].n128_u64[0], "DrivingBiasedRouteMarker");
  memset(v130, 0, 24);
  BOOL v34 = sub_374CDC(v33, (uint64_t)__p, (uint64_t *)v130);
  sub_103D448((uint64_t)v124, v34, v9);
  int8x8_t v35 = (void **)v130[0];
  if (v130[0])
  {
    unint64_t v36 = (void **)v130[1];
    uint8x8_t v37 = v130[0];
    if (v130[1] != v130[0])
    {
      do
      {
        if (*((char *)v36 - 1) < 0) {
          operator delete(*(v36 - 3));
        }
        v36 -= 3;
      }
      while (v36 != v35);
      uint8x8_t v37 = v130[0];
    }
    v130[1] = v35;
    operator delete(v37);
  }
  if (__p[1].n128_i8[7] < 0)
  {
    operator delete((void *)__p[0].n128_u64[0]);
    char v39 = v112;
    if (v17 != v16) {
      char v39 = 1;
    }
    if (v39)
    {
LABEL_72:
      char v131 = 0;
      unsigned int v40 = *(unsigned __int8 *)(v9 + 17);
      if (v40 <= 0xD && ((1 << v40) & 0x2082) != 0 && sub_45FB48(*(void *)v9))
      {
        sub_10500B8((uint64_t)v129, *(uint64_t **)v9, (uint64_t)__p);
        memcpy(v130, __p, sizeof(v130));
        if (!v131) {
          char v131 = 1;
        }
      }
      double v41 = *v8;
      int v42 = v8[1];
      uint64_t v123 = 0;
      char v121 = 0;
      uint64_t v122 = 0;
      if (v42 != v41)
      {
        if (0xEEEEEEEEEEEEEEEFLL * (((char *)v42 - (char *)v41) >> 3) > 0x46046046046046) {
          sub_2E00();
        }
        char v43 = (char *)operator new(0x99999999999999D8 * (((char *)v42 - (char *)v41) >> 3));
        uint64_t v44 = 0;
        char v121 = v43;
        uint64_t v123 = &v43[0x99999999999999D8 * (((char *)v42 - (char *)v41) >> 3)];
        do
        {
          *(void *)&v43[v44] = v41;
          bzero(&v43[v44 + 8], 0x39BuLL);
          double v41 = (long long *)((char *)v41 + 120);
          v44 += 936;
        }
        while (v41 != v42);
        uint64_t v122 = (double *)&v43[v44];
        uint64_t v5 = v111;
      }
      sub_104D310((uint64_t)v129, (char ***)&v121);
      sub_10500C0(v129, __p);
      double v45 = v114;
      *uint64_t v6 = __p[0];
      v6[1].n128_u32[0] = __p[1].n128_u32[0];
      sub_10500D4((uint64_t)v129, (uint64_t)__p);
      double v46 = *v7;
      if (*v7)
      {
        v45[2].n128_u64[1] = (unint64_t)v46;
        operator delete(v46);
        *__int16 v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
      }
      v45[2] = __p[0];
      v45[3].n128_u64[0] = __p[1].n128_u64[0];
      std::string __dst = 0;
      __src = 0;
      unint64_t v120 = 0;
      sub_10485BC((uint64_t)v125, (uint64_t *)&v121, (uint64_t)v130);
      sub_103D480((uint64_t)v124, (uint64_t *)&v121);
      if (v112)
      {
        uint64_t v47 = *(unsigned __int8 *)(v110 + 23);
        if ((v47 & 0x80u) != 0) {
          uint64_t v47 = *(void *)(v110 + 8);
        }
        if (v47)
        {
          sub_1054970();
          double v48 = (double *)v121;
          double v49 = v122;
          if (v121 != v122)
          {
            while (1)
            {
              uint64_t v50 = *(std::string **)v48;
              std::to_string(&v117, v48[115]);
              uint64_t v51 = std::string::insert(&v117, 0, " score=");
              __n128 v52 = *(__n128 *)&v51->__r_.__value_.__l.__data_;
              __p[1].n128_u64[0] = v51->__r_.__value_.__r.__words[2];
              __p[0] = v52;
              v51->__r_.__value_.__l.__size_ = 0;
              v51->__r_.__value_.__r.__words[2] = 0;
              v51->__r_.__value_.__r.__words[0] = 0;
              sub_45FE3C(v50, (const std::string::value_type *)__p);
              if (__p[1].n128_i8[7] < 0)
              {
                operator delete((void *)__p[0].n128_u64[0]);
                if ((SHIBYTE(v117.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_91;
                }
LABEL_94:
                operator delete(v117.__r_.__value_.__l.__data_);
                v48 += 117;
                if (v48 == v49) {
                  break;
                }
              }
              else
              {
                if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
                  goto LABEL_94;
                }
LABEL_91:
                v48 += 117;
                if (v48 == v49) {
                  break;
                }
              }
            }
          }
        }
      }
      if (v115)
      {
        *uint64_t v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
        uint64_t v53 = (uint64_t *)v121;
        BOOL v54 = (uint64_t *)v122;
        if (v121 != v122)
        {
          do
          {
            uint64_t v55 = *v53;
            unint64_t v56 = v5[1];
            if (v56 >= v5[2])
            {
              unint64_t v57 = sub_5ABFF4(v5, v55);
            }
            else
            {
              sub_5ABEF0((uint64_t)v5, v55);
              unint64_t v57 = (char *)(v56 + 120);
            }
            v5[1] = (uint64_t)v57;
            sub_45FE2C((uint64_t)(v57 - 120), 2);
            v53 += 117;
          }
          while (v53 != v54);
          if (*v5 != v5[1]) {
            sub_45FE2C(*v5, *((unsigned char *)v121 + 930));
          }
        }
        goto LABEL_192;
      }
      if (LODWORD(v109[1]))
      {
        char v58 = (double *)v121;
        int v59 = v122;
        while (v58 != v59)
        {
          if (*((unsigned char *)v58 + 928)) {
            sub_1057430((char **)&__src, v58);
          }
          v58 += 117;
        }
        *uint64_t v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
        unint64_t v66 = (uint64_t *)__src;
        unsigned int v67 = (uint64_t *)__dst;
        if (__src == __dst) {
          goto LABEL_193;
        }
        do
        {
          uint64_t v68 = *v66;
          unint64_t v69 = v5[1];
          if (v69 >= v5[2])
          {
            double v70 = sub_5ABFF4(v5, v68);
          }
          else
          {
            sub_5ABEF0((uint64_t)v5, v68);
            double v70 = (char *)(v69 + 120);
          }
          v5[1] = (uint64_t)v70;
          sub_45FE2C((uint64_t)(v70 - 120), 2);
          v66 += 117;
        }
        while (v66 != v67);
        uint64_t v71 = *v5;
        if (*v5 == v5[1]) {
          goto LABEL_192;
        }
        goto LABEL_191;
      }
      __p[0].n128_u64[0] = (unint64_t)operator new(0x28uLL);
      *(__n128 *)((char *)__p + 8) = (__n128)xmmword_20B93A0;
      strcpy((char *)__p[0].n128_u64[0], "is_metrics_relevant_main_route_only");
      BOOL v60 = sub_29D62C(v113, (uint64_t)__p);
      BOOL v61 = v60;
      if (__p[1].n128_i8[7] < 0)
      {
        operator delete((void *)__p[0].n128_u64[0]);
        if (v61)
        {
LABEL_111:
          if (*(unsigned char *)(v9 + 16)) {
            goto LABEL_112;
          }
          goto LABEL_200;
        }
      }
      else if (v60)
      {
        goto LABEL_111;
      }
      v45->n128_u8[9] = sub_1055E14((uint64_t *)&v121, v113);
      if (*(unsigned char *)(v9 + 16))
      {
LABEL_112:
        uint64_t v62 = "mpr_route_selection";
        size_t v63 = strlen("mpr_route_selection");
        if (v63 < 0x7FFFFFFFFFFFFFF8) {
          goto LABEL_113;
        }
        goto LABEL_204;
      }
LABEL_200:
      if (sub_401FE4(*(void *)(v9 + 8))) {
        uint64_t v62 = "ev_route_selection";
      }
      else {
        uint64_t v62 = "default_route_selection";
      }
      size_t v63 = strlen(v62);
      if (v63 < 0x7FFFFFFFFFFFFFF8)
      {
LABEL_113:
        size_t v64 = v63;
        if (v63 >= 0x17)
        {
          uint64_t v72 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v63 | 7) != 0x17) {
            uint64_t v72 = v63 | 7;
          }
          uint64_t v73 = v72 + 1;
          uint64_t v65 = operator new(v72 + 1);
          __p[0].n128_u64[1] = v64;
          __p[1].n128_u64[0] = v73 | 0x8000000000000000;
          __p[0].n128_u64[0] = (unint64_t)v65;
        }
        else
        {
          __p[1].n128_u8[7] = v63;
          uint64_t v65 = __p;
          if (!v63) {
            goto LABEL_127;
          }
        }
        memcpy(v65, v62, v64);
LABEL_127:
        *((unsigned char *)v65 + v64) = 0;
        double v74 = (uint64_t *)sub_5C4AC(v113, (uint64_t)__p);
        BOOL v108 = v61;
        if (__p[1].n128_i8[7] < 0) {
          operator delete((void *)__p[0].n128_u64[0]);
        }
        uint64_t v75 = *v74;
        uint64_t v110 = v74[1];
        if (*v74 != v110)
        {
          unint64_t v115 = LODWORD(v109[0]);
          qmemcpy(v109, "on_rulesselectio", sizeof(v109));
          while (1)
          {
            __p[1].n128_u8[7] = 15;
            __p[0].n128_u64[0] = v109[1];
            *(unint64_t *)((char *)__p[0].n128_u64 + 7) = v109[0];
            __p[0].n128_u8[15] = 0;
            uint64_t v76 = (void *)sub_560F4(v113, (uint64_t)__p);
            if (*(_DWORD *)(v75 + 8))
            {
              exception = __cxa_allocate_exception(8uLL);
              void *exception = &off_23FDF58;
            }
            int v77 = (uint64_t *)sub_5C4AC(v76, *(void *)v75);
            uint64_t v78 = v77;
            if (__p[1].n128_i8[7] < 0)
            {
              operator delete((void *)__p[0].n128_u64[0]);
              uint64_t v79 = *v78;
              uint64_t v80 = v78[1];
              if (*v78 != v80)
              {
                do
                {
LABEL_144:
                  if (*(_DWORD *)(v79 + 8) != 2)
                  {
                    uint64_t v106 = __cxa_allocate_exception(8uLL);
                    *uint64_t v106 = &off_23FDF58;
                  }
                  if (v121 == v122 || 0xCFDCFDCFDCFDCFDDLL * (((unsigned char *)__dst - (unsigned char *)__src) >> 3) >= v115) {
                    break;
                  }
                  double v82 = *(void **)v79;
                  __p[1].n128_u8[7] = 10;
                  strcpy((char *)__p, "conditions");
                  uint64_t v83 = sub_561B0(v82, (uint64_t)__p);
                  if (__p[1].n128_i8[7] < 0) {
                    operator delete((void *)__p[0].n128_u64[0]);
                  }
                  if (sub_1057588((uint64_t *)&v121, (uint64_t *)&__src, v83))
                  {
                    __p[1].n128_u8[7] = 14;
                    strcpy((char *)__p, "scoring_policy");
                    sub_561B0(v82, (uint64_t)__p);
                    if (__p[1].n128_i8[7] < 0) {
                      operator delete((void *)__p[0].n128_u64[0]);
                    }
                    double v84 = sub_1057F84(v114, (uint64_t *)&v121, (char ***)&__src, (uint64_t)&v126, &v128, v82);
                    if (v122 != v84)
                    {
                      double v85 = (char *)__dst;
                      if ((unint64_t)__dst >= v120)
                      {
                        uint64_t v87 = (char *)__src;
                        unint64_t v88 = 0xCFDCFDCFDCFDCFDDLL * (((unsigned char *)__dst - (unsigned char *)__src) >> 3);
                        unint64_t v89 = v88 + 1;
                        if (v88 + 1 > 0x46046046046046) {
                          sub_2E00();
                        }
                        if (0x9FB9FB9FB9FB9FBALL * ((uint64_t)(v120 - (void)__src) >> 3) > v89) {
                          unint64_t v89 = 0x9FB9FB9FB9FB9FBALL * ((uint64_t)(v120 - (void)__src) >> 3);
                        }
                        if (0xCFDCFDCFDCFDCFDDLL * ((uint64_t)(v120 - (void)__src) >> 3) >= 0x23023023023023) {
                          unint64_t v90 = 0x46046046046046;
                        }
                        else {
                          unint64_t v90 = v89;
                        }
                        if (v90)
                        {
                          if (v90 > 0x46046046046046) {
                            sub_188D718();
                          }
                          double v91 = (char *)operator new(936 * v90);
                        }
                        else
                        {
                          double v91 = 0;
                        }
                        int v92 = &v91[936 * v88];
                        memcpy(v92, v84, 0x3A8uLL);
                        double v93 = v92;
                        if (v85 != v87)
                        {
                          do
                          {
                            v85 -= 936;
                            v93 -= 936;
                            memcpy(v93, v85, 0x3A3uLL);
                          }
                          while (v85 != v87);
                          double v85 = v87;
                        }
                        uint64_t v86 = v92 + 936;
                        __src = v93;
                        std::string __dst = v92 + 936;
                        unint64_t v120 = (unint64_t)&v91[936 * v90];
                        if (v85) {
                          operator delete(v85);
                        }
                      }
                      else
                      {
                        memcpy(__dst, v84, 0x3A8uLL);
                        uint64_t v86 = v85 + 936;
                      }
                      std::string __dst = v86;
                      if (v112)
                      {
                        uint64_t v94 = (std::string *)*((void *)v86 - 117);
                        std::operator+<char>();
                        sub_45FE3C(v94, (const std::string::value_type *)__p);
                        if (__p[1].n128_i8[7] < 0) {
                          operator delete((void *)__p[0].n128_u64[0]);
                        }
                      }
                      sub_104FB0C((uint64_t)v129, (uint64_t *)&v121, (char ***)&__src);
                      sub_1053CBC(v127, (double **)&v121, (double **)&__src);
                    }
                  }
                  v79 += 16;
                }
                while (v79 != v80);
              }
            }
            else
            {
              uint64_t v79 = *v77;
              uint64_t v80 = v77[1];
              if (*v77 != v80) {
                goto LABEL_144;
              }
            }
            if (v121 != v122)
            {
              v75 += 16;
              if (0xCFDCFDCFDCFDCFDDLL * (((unsigned char *)__dst - (unsigned char *)__src) >> 3) < v115 && v75 != v110) {
                continue;
              }
            }
            break;
          }
        }
        if (v108 && __src != __dst)
        {
          memcpy(__p, __src, 0x3A3uLL);
          uint64_t v95 = operator new(0x3A8uLL);
          v117.__r_.__value_.__r.__words[0] = (std::string::size_type)v95;
          v117.__r_.__value_.__r.__words[2] = (std::string::size_type)v95 + 936;
          memcpy(v95, __p, 0x3A3uLL);
          v117.__r_.__value_.__l.__size_ = (std::string::size_type)v95 + 936;
          v114->n128_u8[9] = sub_1055E14((uint64_t *)&v117, v113);
          operator delete(v95);
        }
        if (!v112 || (double v96 = (std::string **)v121, v97 = v122, v121 == v122))
        {
LABEL_185:
          int v101 = v111;
          uint64_t *v111 = 0;
          v111[1] = 0;
          v111[2] = 0;
          unint64_t v66 = (uint64_t *)__src;
          unsigned int v102 = (uint64_t *)__dst;
          if (__src == __dst)
          {
LABEL_193:
            if (v66)
            {
              std::string __dst = v66;
              operator delete(v66);
            }
            if (v121)
            {
              uint64_t v122 = (double *)v121;
              operator delete(v121);
            }
            goto LABEL_197;
          }
          do
          {
            uint64_t v103 = *v66;
            unint64_t v104 = v101[1];
            if (v104 >= v101[2])
            {
              uint64_t v105 = sub_5ABFF4(v101, v103);
            }
            else
            {
              sub_5ABEF0((uint64_t)v101, v103);
              uint64_t v105 = (char *)(v104 + 120);
            }
            v101[1] = (uint64_t)v105;
            sub_45FE2C((uint64_t)(v105 - 120), 2);
            v66 += 117;
          }
          while (v66 != v102);
          uint64_t v71 = *v101;
          if (*v101 == v101[1])
          {
LABEL_192:
            unint64_t v66 = (uint64_t *)__src;
            goto LABEL_193;
          }
LABEL_191:
          sub_45FE2C(v71, *((unsigned char *)__src + 930));
          goto LABEL_192;
        }
        while (1)
        {
          double v98 = *v96;
          std::to_string(&v117, *((unsigned __int8 *)v96 + 930));
          uint64_t v99 = std::string::insert(&v117, 0, " biased_candidate=");
          __n128 v100 = *(__n128 *)&v99->__r_.__value_.__l.__data_;
          __p[1].n128_u64[0] = v99->__r_.__value_.__r.__words[2];
          __p[0] = v100;
          v99->__r_.__value_.__l.__size_ = 0;
          v99->__r_.__value_.__r.__words[2] = 0;
          v99->__r_.__value_.__r.__words[0] = 0;
          sub_45FE3C(v98, (const std::string::value_type *)__p);
          if (__p[1].n128_i8[7] < 0)
          {
            operator delete((void *)__p[0].n128_u64[0]);
            if ((SHIBYTE(v117.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_181;
            }
LABEL_184:
            operator delete(v117.__r_.__value_.__l.__data_);
            v96 += 117;
            if (v96 == (std::string **)v97) {
              goto LABEL_185;
            }
          }
          else
          {
            if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_184;
            }
LABEL_181:
            v96 += 117;
            if (v96 == (std::string **)v97) {
              goto LABEL_185;
            }
          }
        }
      }
LABEL_204:
      sub_188D690();
    }
  }
  else
  {
    char v38 = v112;
    if (v17 != v16) {
      char v38 = 1;
    }
    if (v38) {
      goto LABEL_72;
    }
  }
  if ((char *)v8[1] - (char *)*v8 != 120) {
    goto LABEL_72;
  }
  sub_D2DB88(v5, v8);
LABEL_197:
  sub_1058D00(v125);
  return sub_1058DA4(v129);
}

void sub_1057228(_Unwind_Exception *a1)
{
  operator delete(v1);
  uint64_t v3 = (void *)STACK[0x418];
  if (STACK[0x418])
  {
    STACK[0x420] = (unint64_t)v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)STACK[0x430];
  if (STACK[0x430])
  {
    STACK[0x438] = (unint64_t)v4;
    operator delete(v4);
  }
  sub_1058D00(&STACK[0x478]);
  sub_1058DA4(&STACK[0x5A0]);
  _Unwind_Resume(a1);
}

char *sub_1057430(char **a1, void *__src)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    __int16 v7 = *a1;
    unint64_t v8 = 0xCFDCFDCFDCFDCFDDLL * ((v5 - *a1) >> 3);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0x46046046046046) {
      sub_2E00();
    }
    unint64_t v10 = 0xCFDCFDCFDCFDCFDDLL * ((uint64_t)(v4 - (void)v7) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x23023023023023) {
      unint64_t v11 = 0x46046046046046;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0x46046046046046) {
        sub_188D718();
      }
      unint64_t v12 = (char *)operator new(936 * v11);
    }
    else
    {
      unint64_t v12 = 0;
    }
    unint64_t v13 = &v12[936 * v8];
    char v14 = &v12[936 * v11];
    memcpy(v13, __src, 0x3A8uLL);
    uint64_t v6 = v13 + 936;
    if (v5 != v7)
    {
      do
      {
        v5 -= 936;
        v13 -= 936;
        memcpy(v13, v5, 0x3A3uLL);
      }
      while (v5 != v7);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = v14;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    memcpy(a1[1], __src, 0x3A8uLL);
    uint64_t v6 = v5 + 936;
  }
  a1[1] = v6;
  return v6 - 936;
}

uint64_t sub_1057588(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(char *)(a3 + 23);
  BOOL v6 = v5 < 0;
  __int16 v7 = *(unsigned __int8 **)a3;
  if (v5 >= 0) {
    __int16 v7 = (unsigned __int8 *)a3;
  }
  unint64_t v8 = (unsigned __int8 *)*(unsigned __int8 *)(a3 + 23);
  if (v6) {
    unint64_t v8 = *(unsigned __int8 **)(a3 + 8);
  }
  v79[0] = v7;
  v79[1] = v8;
  sub_230E8(v79, 0x2Cu, (uint64_t)&__p);
  unint64_t v9 = __p;
  unint64_t v10 = v81;
  if (__p != v81)
  {
    while (1)
    {
      if ((*((char *)v9 + 23) & 0x80000000) == 0)
      {
        int v12 = *((unsigned __int8 *)v9 + 23);
        unint64_t v13 = v9;
        switch(*((unsigned char *)v9 + 23))
        {
          case 4:
            if (*(_DWORD *)v9 == 1701736302) {
              goto LABEL_7;
            }
            goto LABEL_198;
          case 9:
            goto LABEL_137;
          case 0xB:
            goto LABEL_132;
          case 0xC:
            goto LABEL_148;
          case 0xE:
            if (*v9 == 0x726573755F736168 && *(void *)((char *)v9 + 6) == 0x6574756F725F7265) {
              goto LABEL_99;
            }
            switch(v12)
            {
              case 9:
                goto LABEL_137;
              case 11:
LABEL_132:
                if (*v9 == 0x727265665F6C6C61 && *(void *)((char *)v9 + 3) == 0x736569727265665FLL) {
                  goto LABEL_203;
                }
                if (v12 != 9) {
                  goto LABEL_198;
                }
LABEL_137:
                if (*v9 == 0x6C6C6F745F6C6C61 && *((unsigned char *)v9 + 8) == 115) {
                  goto LABEL_142;
                }
                break;
              case 12:
LABEL_148:
                if (*v9 == 0x686769685F6C6C61 && *((_DWORD *)v9 + 2) == 1937334647) {
                  goto LABEL_153;
                }
                break;
              default:
                goto LABEL_198;
            }
            break;
          case 0x12:
            goto LABEL_176;
          case 0x1C:
            goto LABEL_188;
          case 0x1E:
            if (*v9 != 0x726573755F736168
              || v9[1] != 0x657265666572705FLL
              || v9[2] != 0x6C6F69765F65636ELL
              || *(void *)((char *)v9 + 22) != 0x736E6F6974616C6FLL)
            {
              unint64_t v13 = v9;
              switch(*((unsigned char *)v9 + 23))
              {
                case 9:
                  goto LABEL_137;
                case 0xB:
                  goto LABEL_132;
                case 0xC:
                  goto LABEL_148;
                case 0x12:
                  goto LABEL_176;
                case 0x1C:
                  goto LABEL_188;
                default:
                  goto LABEL_198;
              }
            }
            goto LABEL_114;
          case 0x22:
LABEL_161:
            if (*v9 == 0x69766E655F6C6C61
              && v9[1] == 0x61746E656D6E6F72
              && v9[2] == 0x7365676E6F635F6CLL
              && v9[3] == 0x6E6F7A5F6E6F6974
              && *((_WORD *)v9 + 16) == 29541)
            {
              goto LABEL_207;
            }
            unint64_t v13 = v9;
            if (v12 == 28) {
              goto LABEL_188;
            }
            if (v12 != 18) {
              goto LABEL_198;
            }
LABEL_176:
            if (*v9 != 0x616572615F6C6C61 || v9[1] != 0x6E656469636E695FLL || *((_WORD *)v9 + 8) != 29556) {
              goto LABEL_198;
            }
            goto LABEL_184;
          case 0x28:
            if (*v9 != 0x666572705F736168
              || v9[1] != 0x68635F6465727265
              || v9[2] != 0x6E5F676E69677261
              || v9[3] != 0x765F6B726F777465
              || v9[4] != 0x6E6F6974616C6F69)
            {
              unint64_t v13 = v9;
              switch(*((unsigned char *)v9 + 23))
              {
                case 9:
                  goto LABEL_137;
                case 0xB:
                  goto LABEL_132;
                case 0xC:
                  goto LABEL_148;
                case 0x12:
                  goto LABEL_176;
                case 0x1C:
                  goto LABEL_188;
                case 0x22:
                  goto LABEL_161;
                default:
                  goto LABEL_198;
              }
            }
            goto LABEL_157;
          default:
            goto LABEL_198;
        }
        goto LABEL_198;
      }
      uint64_t v14 = v9[1];
      if (v14 != 4 || *(_DWORD *)*v9 != 1701736302)
      {
        if (v14 == 14)
        {
          if (*(void *)*v9 == 0x726573755F736168 && *(void *)(*v9 + 6) == 0x6574756F725F7265)
          {
LABEL_99:
            uint64_t v33 = *a1;
            uint64_t v34 = a1[1];
            if (*a1 == v34) {
              goto LABEL_215;
            }
            while (!*(unsigned char *)(v33 + 930))
            {
              v33 += 936;
              if (v33 == v34) {
                goto LABEL_215;
              }
            }
            goto LABEL_7;
          }
          uint64_t v14 = v9[1];
        }
        if (v14 == 30)
        {
          if (*(void *)*v9 == 0x726573755F736168
            && *(void *)(*v9 + 8) == 0x657265666572705FLL
            && *(void *)(*v9 + 16) == 0x6C6F69765F65636ELL
            && *(void *)(*v9 + 22) == 0x736E6F6974616C6FLL)
          {
LABEL_114:
            uint64_t v38 = *a1;
            uint64_t v39 = a1[1];
            if (*a1 == v39) {
              goto LABEL_215;
            }
            while (*(double *)(v38 + 104) <= 0.0)
            {
              v38 += 936;
              if (v38 == v39) {
                goto LABEL_215;
              }
            }
            goto LABEL_7;
          }
          uint64_t v14 = v9[1];
        }
        if (v14 == 40)
        {
          if (*(void *)*v9 == 0x666572705F736168
            && *(void *)(*v9 + 8) == 0x68635F6465727265
            && *(void *)(*v9 + 16) == 0x6E5F676E69677261
            && *(void *)(*v9 + 24) == 0x765F6B726F777465
            && *(void *)(*v9 + 32) == 0x6E6F6974616C6F69)
          {
LABEL_157:
            uint64_t v50 = *a1;
            uint64_t v51 = a1[1];
            if (*a1 != v51)
            {
              while (*(double *)(v50 + 896) > 0.0)
              {
                v50 += 936;
                if (v50 == v51) {
                  goto LABEL_7;
                }
              }
LABEL_215:
              int v75 = 0;
              BOOL v11 = v9 + 3 == v10;
              unint64_t v9 = __p;
              if (__p) {
                goto LABEL_218;
              }
              return v11 & v75;
            }
            goto LABEL_7;
          }
          uint64_t v14 = v9[1];
        }
        if (v14 == 11)
        {
          if (*(void *)*v9 == 0x727265665F6C6C61 && *(void *)(*v9 + 3) == 0x736569727265665FLL)
          {
LABEL_203:
            uint64_t v69 = *a2;
            uint64_t v70 = a2[1];
            if (*a2 != v70)
            {
              while (*(double *)(v69 + 80) > 0.0)
              {
                v69 += 936;
                if (v69 == v70) {
                  goto LABEL_7;
                }
              }
              goto LABEL_215;
            }
            goto LABEL_7;
          }
          uint64_t v14 = v9[1];
        }
        if (v14 != 9) {
          goto LABEL_59;
        }
        if (*(void *)*v9 != 0x6C6C6F745F6C6C61 || *(unsigned char *)(*v9 + 8) != 115)
        {
          uint64_t v14 = v9[1];
LABEL_59:
          if (v14 == 12)
          {
            if (*(void *)*v9 == 0x686769685F6C6C61 && *(_DWORD *)(*v9 + 8) == 1937334647)
            {
LABEL_153:
              uint64_t v48 = *a2;
              uint64_t v49 = a2[1];
              if (*a2 != v49)
              {
                while (*(double *)(v48 + 48) > 0.0)
                {
                  v48 += 936;
                  if (v48 == v49) {
                    goto LABEL_7;
                  }
                }
                goto LABEL_215;
              }
              goto LABEL_7;
            }
            uint64_t v14 = v9[1];
          }
          if (v14 == 34)
          {
            if (*(void *)*v9 == 0x69766E655F6C6C61
              && *(void *)(*v9 + 8) == 0x61746E656D6E6F72
              && *(void *)(*v9 + 16) == 0x7365676E6F635F6CLL
              && *(void *)(*v9 + 24) == 0x6E6F7A5F6E6F6974
              && *(_WORD *)(*v9 + 32) == 29541)
            {
LABEL_207:
              uint64_t v71 = *a2;
              uint64_t v72 = a2[1];
              if (*a2 != v72)
              {
                while (*(double *)(v71 + 152) > 0.0)
                {
                  v71 += 936;
                  if (v71 == v72) {
                    goto LABEL_7;
                  }
                }
                goto LABEL_215;
              }
              goto LABEL_7;
            }
            uint64_t v14 = v9[1];
          }
          if (v14 == 18)
          {
            if (*(void *)*v9 == 0x616572615F6C6C61
              && *(void *)(*v9 + 8) == 0x6E656469636E695FLL
              && *(_WORD *)(*v9 + 16) == 29556)
            {
LABEL_184:
              uint64_t v58 = *a2;
              uint64_t v59 = a2[1];
              if (*a2 != v59)
              {
                while (*(double *)(v58 + 736) > 0.0)
                {
                  v58 += 936;
                  if (v58 == v59) {
                    goto LABEL_7;
                  }
                }
                goto LABEL_215;
              }
              goto LABEL_7;
            }
            uint64_t v14 = v9[1];
          }
          if (v14 == 28)
          {
            unint64_t v13 = (void *)*v9;
LABEL_188:
            uint64_t v60 = *v13;
            uint64_t v61 = v13[1];
            uint64_t v62 = v13[2];
            int v63 = *((_DWORD *)v13 + 6);
            BOOL v64 = v60 == 0x6C6F69765F6C6C61 && v61 == 0x726573755F657461;
            BOOL v65 = v64 && v62 == 0x657265666572705FLL;
            if (v65 && v63 == 1936024430)
            {
              uint64_t v73 = *a2;
              uint64_t v74 = a2[1];
              if (*a2 != v74)
              {
                while (*(double *)(v73 + 104) > 0.0)
                {
                  v73 += 936;
                  if (v73 == v74) {
                    goto LABEL_7;
                  }
                }
                goto LABEL_215;
              }
              goto LABEL_7;
            }
          }
LABEL_198:
          if (sub_A2328C(v9, "any_has_charging_stop"))
          {
            uint64_t v67 = *a2;
            uint64_t v68 = a2[1];
            if (*a2 == v68) {
              goto LABEL_215;
            }
            while (*(double *)(v67 + 776) <= 0.0)
            {
              v67 += 936;
              if (v67 == v68) {
                goto LABEL_215;
              }
            }
          }
          goto LABEL_7;
        }
LABEL_142:
        for (uint64_t i = *a2; i != a2[1]; i += 936)
        {
          if (*(double *)(i + 56) <= 0.0 && *(double *)(i + 144) <= 0.0) {
            goto LABEL_215;
          }
        }
      }
LABEL_7:
      v9 += 3;
      BOOL v11 = v9 == v10;
      if (v9 == v10)
      {
        int v75 = 1;
        unint64_t v9 = __p;
        if (__p) {
          goto LABEL_218;
        }
        return v11 & v75;
      }
    }
  }
  int v75 = 1;
  BOOL v11 = 1;
  if (__p)
  {
LABEL_218:
    uint64_t v76 = v81;
    int v77 = v9;
    if (v81 != v9)
    {
      do
      {
        if (*((char *)v76 - 1) < 0) {
          operator delete((void *)*(v76 - 3));
        }
        v76 -= 3;
      }
      while (v76 != v9);
      int v77 = __p;
    }
    uint64_t v81 = v9;
    operator delete(v77);
  }
  return v11 & v75;
}

double *sub_1057F84(void **a1, uint64_t *a2, char ***a3, uint64_t a4, unsigned char *a5, void *a6)
{
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "scoring_policy");
  sub_561B0(a6, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_1054970();
  BOOL v11 = (double *)sub_1054594(a5, a2);
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "requirements");
  if (!sub_58070(a6, (uint64_t)__p))
  {
    int v13 = 0;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_11;
    }
LABEL_6:
    if (v13) {
      return (double *)a2[1];
    }
    goto LABEL_12;
  }
  char v44 = 12;
  strcpy((char *)v43, "requirements");
  uint64_t v12 = sub_561B0(a6, (uint64_t)v43);
  int v13 = sub_105864C(v11, v12) ^ 1;
  if (v44 < 0)
  {
    operator delete(v43[0]);
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_11;
    }
    goto LABEL_6;
  }
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_6;
  }
LABEL_11:
  operator delete(__p[0]);
  if (v13) {
    return (double *)a2[1];
  }
LABEL_12:
  HIBYTE(__p[2]) = 11;
  strcpy((char *)__p, "max_stretch");
  v43[0] = (void *)0x4059000000000000;
  uint64_t v14 = sub_58070(a6, (uint64_t)__p);
  if (!v14)
  {
    double v16 = 100.0;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_16;
    }
LABEL_19:
    operator delete(__p[0]);
    uint64_t v17 = *a3;
    if (*a3 == a3[1]) {
      goto LABEL_21;
    }
LABEL_20:
    if (v11[2] <= v16 * *((double *)v17 + 2)) {
      goto LABEL_21;
    }
    return (double *)a2[1];
  }
  BOOL v15 = (double *)(v14 + 5);
  if (*((_DWORD *)v14 + 12) != 1) {
    BOOL v15 = (double *)v43;
  }
  double v16 = *v15;
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_19;
  }
LABEL_16:
  uint64_t v17 = *a3;
  if (*a3 != a3[1]) {
    goto LABEL_20;
  }
LABEL_21:
  HIBYTE(__p[2]) = 11;
  strcpy((char *)__p, "min_savings");
  v43[0] = 0;
  uint64_t v18 = sub_58070(a6, (uint64_t)__p);
  if (!v18)
  {
    double v20 = 0.0;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v19 = (double *)(v18 + 5);
  if (*((_DWORD *)v18 + 12) != 1) {
    uint64_t v19 = (double *)v43;
  }
  double v20 = *v19;
  if (SHIBYTE(__p[2]) < 0) {
LABEL_25:
  }
    operator delete(__p[0]);
LABEL_26:
  if (*a3 != a3[1] && v20 > 0.0 && v20 + v11[2] > *((double *)*a3 + 2)) {
    return (double *)a2[1];
  }
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "min_soc_savings");
  v43[0] = 0;
  uint64_t v21 = sub_58070(a6, (uint64_t)__p);
  if (!v21)
  {
    double v23 = 0.0;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  char v22 = (double *)(v21 + 5);
  if (*((_DWORD *)v21 + 12) != 1) {
    char v22 = (double *)v43;
  }
  double v23 = *v22;
  if (SHIBYTE(__p[2]) < 0) {
LABEL_33:
  }
    operator delete(__p[0]);
LABEL_34:
  if (*a3 != a3[1] && v23 > 0.0 && v11[99] < v23 + *((double *)*a3 + 99)) {
    return (double *)a2[1];
  }
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "max_local_stretch");
  v43[0] = (void *)0x4059000000000000;
  uint64_t v24 = sub_58070(a6, (uint64_t)__p);
  if (!v24)
  {
    double v26 = 100.0;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  char v25 = (double *)(v24 + 5);
  if (*((_DWORD *)v24 + 12) != 1) {
    char v25 = (double *)v43;
  }
  double v26 = *v25;
  if (SHIBYTE(__p[2]) < 0) {
LABEL_41:
  }
    operator delete(__p[0]);
LABEL_42:
  if (*a3 != a3[1] && v11[25] > v26) {
    return (double *)a2[1];
  }
  sub_1091FB4((uint64_t)__p, *a1);
  char v44 = 11;
  strcpy((char *)v43, "max_overlap");
  uint64_t v28 = sub_58070(a6, (uint64_t)v43);
  double v29 = 1.0;
  if (v28 && *((_DWORD *)v28 + 12) == 1) {
    double v29 = *((double *)v28 + 5);
  }
  if (v44 < 0)
  {
    operator delete(v43[0]);
    if (v29 >= 1.0) {
      goto LABEL_72;
    }
LABEL_59:
    BOOL v30 = *a3;
    BOOL v31 = a3[1];
    if (*a3 == v31) {
      goto LABEL_72;
    }
    while (1)
    {
      sub_10928EC(__p);
      sub_1092944((uint64_t)__p, *v30);
      unint64_t v32 = *(char **)v11;
      v43[0] = (void *)0x7FFFFFFFFFFFFFFELL;
      uint64_t v33 = sub_1093268((uint64_t)__p, v32, v43);
      double v34 = v29 * (double)sub_45FD6C((uint64_t *)*v30);
      if (v34 >= 0.0)
      {
        if (v34 >= 4.50359963e15) {
          goto LABEL_68;
        }
        uint64_t v35 = (uint64_t)(v34 + v34) + 1;
      }
      else
      {
        if (v34 <= -4.50359963e15) {
          goto LABEL_68;
        }
        uint64_t v35 = (uint64_t)(v34 + v34);
        if (v35 >= 1) {
          --v35;
        }
      }
      double v34 = (double)(v35 >> 1);
LABEL_68:
      if (v33 > (uint64_t)v34)
      {
        BOOL v11 = (double *)a2[1];
        goto LABEL_72;
      }
      v30 += 117;
      if (v30 == v31) {
        goto LABEL_72;
      }
    }
  }
  if (v29 < 1.0) {
    goto LABEL_59;
  }
LABEL_72:
  if (v41)
  {
    int v42 = v41;
    operator delete(v41);
  }
  unint64_t v36 = (char *)__p[1];
  if (__p[1])
  {
    uint8x8_t v37 = (char *)__p[2];
    uint64_t v38 = __p[1];
    if (__p[2] != __p[1])
    {
      do
      {
        uint64_t v39 = (void *)*((void *)v37 - 1);
        if (v39) {
          free(v39);
        }
        v37 -= 80;
      }
      while (v37 != v36);
      uint64_t v38 = __p[1];
    }
    __n128 __p[2] = v36;
    operator delete(v38);
  }
  return v11;
}

void sub_1058500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_C68678(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1058574(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9);
}

__n128 sub_105857C@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 12);
  *a2 = result;
  a2[1].n128_u32[0] = *(_DWORD *)(a1 + 28);
  return result;
}

void *sub_1058590@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v4 = (unsigned char *)result[4];
  uint64_t v3 = (unsigned char *)result[5];
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (0x86BCA1AF286BCA1BLL * (v5 >> 3) >= 0x1AF286BCA1AF287) {
      sub_2E00();
    }
    BOOL v6 = (char *)operator new(v5);
    *a2 = v6;
    __int16 v7 = &v6[8 * (v5 >> 3)];
    a2[2] = v7;
    __n128 result = memcpy(v6, v4, v5);
    a2[1] = v7;
  }
  return result;
}

void sub_1058630(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_105864C(double *a1, uint64_t a2)
{
  int v2 = (unsigned __int8 *)*(unsigned __int8 *)(a2 + 23);
  int v3 = (char)v2;
  if ((char)v2 < 0) {
    int v2 = *(unsigned __int8 **)(a2 + 8);
  }
  if (!v2) {
    return 1;
  }
  if (v3 >= 0) {
    int64_t v5 = (unsigned __int8 *)a2;
  }
  else {
    int64_t v5 = *(unsigned __int8 **)a2;
  }
  v61[0] = v5;
  v61[1] = v2;
  sub_230E8(v61, 0x2Cu, (uint64_t)&__p);
  __int16 v7 = __p;
  BOOL v6 = v63;
  if (__p == v63)
  {
    uint64_t v17 = 1;
    uint64_t v59 = __p;
    if (!__p) {
      return v17;
    }
  }
  else
  {
    double v8 = a1[10];
    double v9 = a1[6];
    double v10 = a1[19];
    BOOL v11 = a1[18] <= 0.0 && a1[7] <= 0.0;
    double v12 = a1[92];
    double v13 = a1[13];
    double v14 = a1[26];
    double v15 = a1[97];
    double v16 = __p;
    do
    {
      if (*((char *)v16 + 23) < 0)
      {
        uint64_t v20 = v16[1];
        if (v20 == 8)
        {
          int v22 = *(void *)*v16 != 0x736C6C6F745F6F6ELL || v11;
          if (v22 != 1) {
            goto LABEL_194;
          }
          uint64_t v20 = v16[1];
        }
        else if (v20 == 10)
        {
          BOOL v21 = *(void *)*v16 == 0x69727265665F6F6ELL && *(_WORD *)(*v16 + 8) == 29541;
          if (v21 && v8 > 0.0) {
            goto LABEL_194;
          }
        }
        if (v20 == 11)
        {
          BOOL v23 = *(void *)*v16 == 0x77686769685F6F6ELL && *(void *)(*v16 + 3) == 0x7379617768676968;
          if (v23 && v9 > 0.0) {
            goto LABEL_194;
          }
          uint64_t v20 = v16[1];
        }
        if (v20 == 33)
        {
          BOOL v27 = *(void *)*v16 == 0x7269766E655F6F6ELL
             && *(void *)(*v16 + 8) == 0x6C61746E656D6E6FLL
             && *(void *)(*v16 + 16) == 0x747365676E6F635FLL
             && *(void *)(*v16 + 24) == 0x656E6F7A5F6E6F69
             && *(unsigned char *)(*v16 + 32) == 115;
          if (v27 && v10 > 0.0) {
            goto LABEL_194;
          }
          uint64_t v20 = v16[1];
        }
        if (v20 == 17)
        {
          BOOL v29 = *(void *)*v16 == 0x5F616572615F6F6ELL
             && *(void *)(*v16 + 8) == 0x746E656469636E69
             && *(unsigned char *)(*v16 + 16) == 115;
          if (v29 && v12 > 0.0) {
            goto LABEL_194;
          }
          uint64_t v20 = v16[1];
        }
        if (v20 == 21)
        {
          BOOL v31 = *(void *)*v16 == 0x6573755F7965626FLL
             && *(void *)(*v16 + 8) == 0x7265666572705F72
             && *(void *)(*v16 + 13) == 0x7365636E65726566;
          if (v31 && v13 > 0.0) {
            goto LABEL_194;
          }
          uint64_t v20 = v16[1];
        }
        if (v20 == 28)
        {
          BOOL v34 = *(void *)*v16 == 0x736F6C635F746F6ELL
             && *(void *)(*v16 + 8) == 0x6C65735F6F745F65
             && *(void *)(*v16 + 16) == 0x6F725F6465746365
             && *(_DWORD *)(*v16 + 24) == 1936028789;
          if (v34 && v14 > 0.0) {
            goto LABEL_194;
          }
          uint64_t v20 = v16[1];
        }
        if (v20 == 17)
        {
          BOOL v36 = *(void *)*v16 == 0x67726168635F6F6ELL
             && *(void *)(*v16 + 8) == 0x706F74735F676E69
             && *(unsigned char *)(*v16 + 16) == 115;
          if (v36 && v15 > 0.0) {
            goto LABEL_194;
          }
          uint64_t v20 = v16[1];
        }
        if (v20 == 30)
        {
          uint8x8_t v37 = (uint64_t *)*v16;
LABEL_182:
          uint64_t v52 = *v37;
          uint64_t v53 = v37[1];
          uint64_t v54 = v37[2];
          uint64_t v55 = *(uint64_t *)((char *)v37 + 22);
          BOOL v56 = v52 == 0x71696E755F736168 && v53 == 0x74737269665F6575;
          BOOL v57 = v56 && v54 == 0x6E6967726168635FLL;
          BOOL v58 = v57 && v55 == 0x706F74735F676E69;
          if (v58 && a1[108] == 0.0)
          {
LABEL_194:
            uint64_t v17 = 0;
            if (!__p) {
              return v17;
            }
            goto LABEL_201;
          }
        }
      }
      else
      {
        switch(*((unsigned char *)v16 + 23))
        {
          case 8:
            char v18 = *v16 != 0x736C6C6F745F6F6ELL || v11;
            if (v18) {
              goto LABEL_17;
            }
            goto LABEL_194;
          case 0xA:
            BOOL v19 = *v16 == 0x69727265665F6F6ELL && *((_WORD *)v16 + 4) == 29541;
            if (v19 && v8 > 0.0) {
              goto LABEL_194;
            }
            goto LABEL_17;
          case 0xB:
            BOOL v38 = *v16 == 0x77686769685F6F6ELL && *(void *)((char *)v16 + 3) == 0x7379617768676968;
            if (v38 && v9 > 0.0) {
              goto LABEL_194;
            }
            goto LABEL_17;
          case 0x11:
LABEL_138:
            BOOL v44 = *v16 == 0x5F616572615F6F6ELL && v16[1] == 0x746E656469636E69 && *((unsigned char *)v16 + 16) == 115;
            if (v44 && v12 > 0.0) {
              goto LABEL_194;
            }
            break;
          case 0x15:
LABEL_148:
            BOOL v46 = *v16 == 0x6573755F7965626FLL
               && v16[1] == 0x7265666572705F72
               && *(void *)((char *)v16 + 13) == 0x7365636E65726566;
            if (v46 && v13 > 0.0) {
              goto LABEL_194;
            }
            break;
          case 0x1C:
LABEL_158:
            BOOL v49 = *v16 == 0x736F6C635F746F6ELL
               && v16[1] == 0x6C65735F6F745F65
               && v16[2] == 0x6F725F6465746365
               && *((_DWORD *)v16 + 6) == 1936028789;
            if (v49 && v14 > 0.0) {
              goto LABEL_194;
            }
            break;
          case 0x1E:
LABEL_181:
            uint8x8_t v37 = v16;
            goto LABEL_182;
          case 0x21:
            BOOL v42 = *v16 == 0x7269766E655F6F6ELL
               && v16[1] == 0x6C61746E656D6E6FLL
               && v16[2] == 0x747365676E6F635FLL
               && v16[3] == 0x656E6F7A5F6E6F69
               && *((unsigned char *)v16 + 32) == 115;
            if (!v42 || v10 <= 0.0)
            {
              switch(*((unsigned char *)v16 + 23))
              {
                case 0x11:
                  goto LABEL_138;
                case 0x15:
                  goto LABEL_148;
                case 0x1C:
                  goto LABEL_158;
                case 0x1E:
                  goto LABEL_181;
                default:
                  goto LABEL_17;
              }
            }
            goto LABEL_194;
          default:
            goto LABEL_17;
        }
        if (*((unsigned char *)v16 + 23) == 17)
        {
          BOOL v50 = *v16 == 0x67726168635F6F6ELL && v16[1] == 0x706F74735F676E69;
          BOOL v51 = v50 && *((unsigned char *)v16 + 16) == 115;
          if (v51 && v15 > 0.0) {
            goto LABEL_194;
          }
        }
      }
LABEL_17:
      v16 += 3;
    }
    while (v16 != v63);
    uint64_t v17 = 1;
    if (!__p) {
      return v17;
    }
    do
    {
LABEL_201:
      if (*((char *)v6 - 1) < 0) {
        operator delete((void *)*(v6 - 3));
      }
      v6 -= 3;
    }
    while (v6 != v7);
    uint64_t v59 = __p;
  }
  int v63 = v7;
  operator delete(v59);
  return v17;
}

void *sub_1058D00(void *a1)
{
  int v2 = (void *)a1[26];
  if (v2)
  {
    a1[27] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[23];
  if (v3)
  {
    a1[24] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[20];
  if (v4)
  {
    a1[21] = v4;
    operator delete(v4);
  }
  int64_t v5 = (void *)a1[17];
  if (v5)
  {
    a1[18] = v5;
    operator delete(v5);
  }
  BOOL v6 = (void *)a1[14];
  if (v6)
  {
    a1[15] = v6;
    operator delete(v6);
  }
  __int16 v7 = (void *)a1[11];
  if (v7)
  {
    a1[12] = v7;
    operator delete(v7);
  }
  double v8 = (void *)a1[8];
  if (v8)
  {
    a1[9] = v8;
    operator delete(v8);
  }
  double v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void *sub_1058DA4(void *a1)
{
  sub_3A6230(a1 + 273);
  int v2 = (void *)a1[254];
  if (v2) {
    operator delete(v2);
  }
  sub_3C7A68((uint64_t)(a1 + 247));
  int v3 = (void *)a1[244];
  if (v3)
  {
    a1[245] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[241];
  if (v4)
  {
    a1[242] = v4;
    operator delete(v4);
  }
  int64_t v5 = (void *)a1[238];
  if (v5)
  {
    a1[239] = v5;
    operator delete(v5);
  }
  BOOL v6 = (void *)a1[235];
  if (v6)
  {
    a1[236] = v6;
    operator delete(v6);
  }
  __int16 v7 = a1 + 206;
  do
  {
    double v8 = v7 - 6;
    uint64_t v9 = *(v7 - 3);
    if (v9)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      double v12 = v7 - 5;
      do
      {
        if ((*(char *)(*v8 + v11) & 0x80000000) == 0)
        {
          uint64_t v13 = *v12 + v10;
          double v14 = *(void **)(v13 + 16);
          if (v14)
          {
            *(void *)(v13 + 24) = v14;
            operator delete(v14);
            uint64_t v9 = *(v7 - 3);
          }
        }
        ++v11;
        v10 += 40;
      }
      while (v11 != v9);
      operator delete((void *)*(v7 - 6));
      *(v7 - 6) = &unk_20E1710;
      *(v7 - 1) = 0;
      *(v7 - 4) = 0;
      *(v7 - 3) = 0;
      void *v12 = 0;
    }
    v7 -= 6;
  }
  while (v8 != a1 + 110);
  double v15 = (void *)a1[107];
  if (v15)
  {
    a1[108] = v15;
    operator delete(v15);
  }
  double v16 = (void *)a1[104];
  if (v16)
  {
    a1[105] = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)a1[101];
  if (v17)
  {
    a1[102] = v17;
    operator delete(v17);
  }
  char v18 = (void *)a1[27];
  if (v18)
  {
    a1[28] = v18;
    operator delete(v18);
  }
  BOOL v19 = (void *)a1[12];
  if (v19)
  {
    a1[13] = v19;
    operator delete(v19);
  }
  uint64_t v20 = a1[9];
  if (v20)
  {
    uint64_t v21 = a1[10];
    int v22 = (void *)a1[9];
    if (v21 != v20)
    {
      do
      {
        BOOL v23 = *(void **)(v21 - 8);
        if (v23) {
          free(v23);
        }
        v21 -= 80;
      }
      while (v21 != v20);
      int v22 = (void *)a1[9];
    }
    a1[10] = v20;
    operator delete(v22);
  }
  uint64_t v24 = (void *)a1[5];
  if (v24)
  {
    a1[6] = v24;
    operator delete(v24);
  }
  uint64_t v25 = a1[2];
  if (v25)
  {
    uint64_t v26 = a1[3];
    BOOL v27 = (void *)a1[2];
    if (v26 != v25)
    {
      do
      {
        uint64_t v28 = *(void **)(v26 - 8);
        if (v28) {
          free(v28);
        }
        v26 -= 80;
      }
      while (v26 != v25);
      BOOL v27 = (void *)a1[2];
    }
    a1[3] = v25;
    operator delete(v27);
  }
  return a1;
}

void sub_1058FB4()
{
  unk_25FD91F = 16641;
  word_25FD908 = 65;
  byte_25FD937 = 1;
  byte_25FD921 = 0;
}

uint64_t sub_1058FDC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_486A4C(a3);
  if (!sub_401FE4(a4))
  {
    if (sub_DB8C44(a3)) {
      return 0;
    }
    else {
      return v8;
    }
  }
  if (sub_45FC7C(a1) == 1)
  {
    uint64_t v10 = *(void **)a2;
    uint64_t v9 = *(void **)(a2 + 8);
    if (v10 != v9)
    {
      while (sub_45FC7C(v10) == 1)
      {
        v10 += 15;
        if (v10 == v9) {
          return v8;
        }
      }
      return 0;
    }
    return v8;
  }
  return 0;
}

void sub_10590B0()
{
  unk_25FD94F = 16641;
  word_25FD938 = 65;
  byte_25FD967 = 1;
  byte_25FD951 = 0;
}

uint64_t sub_10590D8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  HIBYTE(v18[2]) = 20;
  strcpy((char *)v18, "DrivingRouteAnalyzer");
  __n128 __p = 0;
  double v16 = 0;
  uint64_t v17 = 0;
  uint64_t v10 = sub_374CDC((uint64_t)a3, (uint64_t)v18, (uint64_t *)&__p);
  sub_108A150((void *)(a1 + 24), a3, v10, a5);
  uint64_t v11 = (void **)__p;
  if (__p)
  {
    double v12 = v16;
    uint64_t v13 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      uint64_t v13 = __p;
    }
    double v16 = v11;
    operator delete(v13);
  }
  if (SHIBYTE(v18[2]) < 0) {
    operator delete(v18[0]);
  }
  sub_103E2B8(a1 + 680, a5, a3);
  *(_DWORD *)(a1 + 5856) = 0;
  *(unsigned char *)(a1 + 5860) = 0;
  *(unsigned char *)(a1 + 5864) = a6;
  return a1;
}

void sub_10591F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v20 = *(void **)(v18 + 120);
  if (v20)
  {
    *(void *)(v18 + 128) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_1059234(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  memset(__src, 0, sizeof(__src));
  sub_3B168C((uint64_t)__src, *(void *)a2, *(void *)(a2 + 8), 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5));
  long long v31 = *(_OWORD *)(a2 + 40);
  long long v32 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)uint64_t v33 = *(_OWORD *)(a2 + 72);
  *(void *)&v33[13] = *(void *)(a2 + 85);
  long long v30 = *(_OWORD *)(a2 + 24);
  if (*(char *)(a2 + 119) < 0)
  {
    sub_4200(&__p, *(void **)(a2 + 96), *(void *)(a2 + 104));
  }
  else
  {
    long long __p = *(_OWORD *)(a2 + 96);
    uint64_t v35 = *(void *)(a2 + 112);
  }
  sub_D6ADB4(a4, (long long *)__src, 1uLL);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v8 = __src[0];
  if (__src[0])
  {
    uint64_t v9 = __src[1];
    uint64_t v10 = __src[0];
    if (__src[1] != __src[0])
    {
      do
        uint64_t v9 = (void *)sub_3AFFFC((uint64_t)v9 - 1056);
      while (v9 != v8);
      uint64_t v10 = __src[0];
    }
    __src[1] = v8;
    operator delete(v10);
  }
  sub_45FE2C(*a4, 4);
  if (*(unsigned char *)(nullsub_1(*(void *)a1) + 128))
  {
    sub_1059CD4(a1, (void *)a2, a3, (uint64_t *)&v27);
    uint64_t v11 = (void **)v27;
    double v12 = v28;
    if (v27 != v28)
    {
      uint64_t v13 = (void **)((char *)v27 + 144);
      double v14 = v27;
      if ((char *)v27 + 144 != (char *)v28)
      {
        double v14 = v27;
        do
        {
          if (v14[30] < *((_DWORD *)v13 + 30)) {
            double v14 = v13;
          }
          v13 += 18;
        }
        while (v13 != v28);
      }
      double v15 = 0;
      *(_DWORD *)(a1 + 5856) = v14[30];
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      unint64_t v16 = 0x8E38E38E38E38E39 * (((char *)v12 - (char *)v11) >> 4);
      unint64_t v17 = v16 + 1;
      if (v16 != -1)
      {
        if (v17 >= 0x46046046046047) {
          sub_2E00();
        }
        double v15 = (char *)operator new(936 * v17);
        uint64_t v24 = v15;
        uint64_t v25 = v15;
        uint64_t v26 = &v15[936 * v17];
      }
      do
      {
        __src[0] = v11;
        bzero(&__src[1], 0x39BuLL);
        double v15 = sub_105D3B0(&v24, v15, __src) + 936;
        v11 += 18;
      }
      while (v11 != v12);
      __src[0] = (void *)a2;
      bzero(&__src[1], 0x39BuLL);
      sub_1057430((char **)&v24, __src);
      sub_737844((uint64_t)__src);
    }
    if (v27)
    {
      uint64_t v18 = v28;
      BOOL v19 = v27;
      if (v28 == v27)
      {
LABEL_36:
        uint64_t v28 = v11;
        operator delete(v19);
        return;
      }
      while (1)
      {
        if (*((char *)v18 - 25) < 0)
        {
          operator delete(*(v18 - 6));
          uint64_t v20 = v18 - 18;
          uint64_t v21 = *(v18 - 18);
          if (v21)
          {
LABEL_32:
            uint64_t v22 = (uint64_t)*(v18 - 17);
            BOOL v23 = v21;
            if ((void *)v22 != v21)
            {
              do
                uint64_t v22 = sub_3AFFFC(v22 - 1056);
              while ((void *)v22 != v21);
              BOOL v23 = *v20;
            }
            *(v18 - 17) = v21;
            operator delete(v23);
          }
        }
        else
        {
          uint64_t v20 = v18 - 18;
          uint64_t v21 = *(v18 - 18);
          if (v21) {
            goto LABEL_32;
          }
        }
        uint64_t v18 = v20;
        if (v20 == v11)
        {
          BOOL v19 = v27;
          goto LABEL_36;
        }
      }
    }
  }
}

void sub_1059B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_105B65C(&a68);
  sub_5AB1B0(v68);
  _Unwind_Resume(a1);
}

void sub_1059CD4(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  unint64_t v4 = *(void **)a3;
  int64_t v5 = *(void **)(a3 + 8);
  if (*(void **)a3 != v5)
  {
    while (1)
    {
      sub_105D2CC((uint64_t)&v70, (uint64_t)v4);
      uint64_t v7 = *(void *)nullsub_1(a2);
      uint64_t v8 = (__n128 *)sub_45FB28(&v70, 0);
      if (!v8[50].n128_u8[7])
      {
        uint64_t v9 = sub_40EFE8(v7);
        int v10 = *(unsigned __int16 *)(v9 + 36);
        int v11 = *(_DWORD *)(v9 + 32);
        uint64_t v12 = sub_40EFE8((uint64_t)v8);
        if (v11 != *(_DWORD *)(v12 + 32) || v10 != *(unsigned __int16 *)(v12 + 36)) {
          sub_46E308(v8, v7, *(void **)(a1 + 8), v13);
        }
      }
      if (sub_45FB48((uint64_t)&v70) && sub_45FB98(&v70)) {
        break;
      }
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)&v64);
        sub_188FC78(&v64, (uint64_t)"Candidate route invalid/inconsistent, dropping it.", 50);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
        if (v63 < 0) {
          operator delete(__p);
        }
        BOOL v64 = v61;
        *(void **)((char *)&v64 + *(v61 - 3)) = v60;
        if (v69 < 0) {
          operator delete(v68);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
LABEL_28:
      if (SHIBYTE(v77) < 0)
      {
        operator delete((void *)v76);
        long long v30 = v70;
        if (v70)
        {
LABEL_32:
          uint64_t v31 = (uint64_t)v71;
          long long v32 = v30;
          if (v71 != v30)
          {
            do
              uint64_t v31 = sub_3AFFFC(v31 - 1056);
            while ((int ***)v31 != v30);
            long long v32 = v70;
          }
          uint64_t v71 = v30;
          operator delete(v32);
        }
      }
      else
      {
        long long v30 = v70;
        if (v70) {
          goto LABEL_32;
        }
      }
      v4 += 15;
      if (v4 == v5) {
        return;
      }
    }
    double v15 = *(void **)nullsub_1(a2);
    unint64_t v16 = *(void **)nullsub_1(&v70);
    uint64_t v17 = sub_40EFE8((uint64_t)v15);
    uint64_t v18 = *(void *)(sub_40EFE8((uint64_t)v16) + 32);
    if (__PAIR64__(*(unsigned __int16 *)(v17 + 36), *(_DWORD *)(v17 + 32)) != __PAIR64__(WORD2(v18), v18)
      || ((v18 & 0x1000000000000) == 0) != (*(unsigned char *)(v17 + 38) == 0))
    {
      goto LABEL_28;
    }
    sub_47E65C(&v64);
    sub_46B060();
    uint64_t v20 = v19;
    unint64_t v22 = v21;
    if (v64)
    {
      BOOL v23 = v65;
      BOOL v24 = (unint64_t)v23 < sub_46C760(v64);
      if (v20) {
        goto LABEL_17;
      }
    }
    else
    {
      BOOL v24 = 0;
      if (v19)
      {
LABEL_17:
        unint64_t v25 = sub_46C760(v20);
        BOOL v26 = v22 < v25;
        if (v22 < v25 && v24)
        {
          uint64_t v28 = sub_46C8EC(v64, (uint64_t)v65);
          int v29 = v28 != sub_46C8EC(v20, v22);
          goto LABEL_38;
        }
LABEL_37:
        int v29 = v24 ^ v26;
LABEL_38:
        int v57 = v29;
        sub_46B060();
        BOOL v34 = v33;
        unint64_t v36 = v35;
        if (v66)
        {
          unint64_t v37 = v67;
          BOOL v38 = v37 < sub_46C760(v66);
          if (v34) {
            goto LABEL_40;
          }
        }
        else
        {
          BOOL v38 = 0;
          if (v33)
          {
LABEL_40:
            unint64_t v39 = sub_46C760(v34);
            BOOL v40 = v36 < v39;
            if (v36 < v39 && v38)
            {
              uint64_t v42 = sub_46C8EC(v66, v67);
              int v43 = v42 != sub_46C8EC(v34, v36);
LABEL_48:
              if ((unint64_t)sub_45FC7C(a2) <= 1 && (unint64_t)sub_45FC7C(v4) < 2) {
                int v44 = v57 & v43;
              }
              else {
                int v44 = v57 | v43;
              }
              BOOL v45 = sub_46E0C0(v15);
              if ((v44 | v45 ^ sub_46E0C0(v16)) == 1)
              {
                int v46 = sub_47EE94((uint64_t)&v70, 0, 4);
                int v47 = sub_47EE94((uint64_t)a2, 0, 4);
                if (v47 > v46) {
                  LODWORD(v78) = v47 - v46;
                }
                unint64_t v48 = a4[1];
                if (v48 >= a4[2])
                {
                  uint64_t v54 = sub_105D854(a4, (uint64_t)&v70);
                  uint64_t v55 = a4;
                }
                else
                {
                  *(void *)unint64_t v48 = 0;
                  *(void *)(v48 + 8) = 0;
                  *(void *)(v48 + 16) = 0;
                  sub_3B168C(v48, (uint64_t)v70, (uint64_t)v71, 0xF83E0F83E0F83E1 * (((char *)v71 - (char *)v70) >> 5));
                  *(_OWORD *)(v48 + 24) = v72;
                  long long v49 = v73;
                  long long v50 = v74;
                  long long v51 = *(_OWORD *)v75;
                  *(void *)(v48 + 85) = *(void *)&v75[13];
                  *(_OWORD *)(v48 + 72) = v51;
                  *(_OWORD *)(v48 + 56) = v50;
                  *(_OWORD *)(v48 + 40) = v49;
                  uint64_t v52 = (unsigned char *)(v48 + 96);
                  if (SHIBYTE(v77) < 0)
                  {
                    sub_4200(v52, (void *)v76, *((unint64_t *)&v76 + 1));
                  }
                  else
                  {
                    long long v53 = v76;
                    *(void *)(v48 + 112) = v77;
                    *(_OWORD *)uint64_t v52 = v53;
                  }
                  long long v56 = v78;
                  *(_DWORD *)(v48 + 136) = v79;
                  *(_OWORD *)(v48 + 120) = v56;
                  uint64_t v54 = (char *)(v48 + 144);
                  uint64_t v55 = a4;
                  a4[1] = v48 + 144;
                }
                v55[1] = (uint64_t)v54;
              }
              goto LABEL_28;
            }
LABEL_47:
            int v43 = v38 ^ v40;
            goto LABEL_48;
          }
        }
        BOOL v40 = 0;
        goto LABEL_47;
      }
    }
    BOOL v26 = 0;
    goto LABEL_37;
  }
}

void sub_105A24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (*v24) {
    sub_20AEE38((uint64_t)v24);
  }
  *(void *)(a13 + 8) = v24;
  sub_3C77C4(v25 - 232);
  sub_105B65C((void ***)a13);
  _Unwind_Resume(a1);
}

BOOL sub_105A300()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  int v4 = v3;
  BOOL v6 = v5;
  uint64_t v7 = (uint64_t *)v0;
  if (!sub_45FBE8(v1)) {
    return 0;
  }
  if (sub_45FC04((uint64_t)v6))
  {
    uint64_t v8 = v7[1];
    __p[0] = operator new(0x19uLL);
    *(_OWORD *)&__p[1] = xmmword_20B9250;
    strcpy((char *)__p[0], "DrivingDirectionsUpdate");
    BOOL v108 = 0;
    uint64_t v109 = 0;
    uint64_t v110 = 0;
    uint64_t v9 = sub_374CDC(v8, (uint64_t)__p, (uint64_t *)&v108);
    int v10 = v108;
    if (v108)
    {
      int v11 = v109;
      uint64_t v12 = v108;
      if (v109 != v108)
      {
        do
        {
          if (*((char *)v11 - 1) < 0) {
            operator delete(*(v11 - 3));
          }
          v11 -= 3;
        }
        while (v11 != v10);
        uint64_t v12 = v108;
      }
      uint64_t v109 = v10;
      operator delete(v12);
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v14 = nullsub_1(*v7);
    if (!*(unsigned char *)(v14 + 128))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    uint64_t v15 = v14;
    uint64_t v16 = sub_40A44C(v14);
    if ((v16 & 8) != 0)
    {
      uint64_t v16 = sub_5231C((uint64_t)v6);
      if (*(_DWORD *)(v16 + 60)) {
        return *(_DWORD *)(sub_5231C(v2) + 60) == 0;
      }
    }
    if (sub_105B788(v16, (uint64_t)v6, v2)) {
      return 0;
    }
    HIBYTE(__p[2]) = 19;
    strcpy((char *)__p, "consider_alternates");
    if (sub_29D62C(v9, (uint64_t)__p))
    {
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      int v18 = sub_45FE1C(v2);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      if (v18) {
        return 0;
      }
    }
    int v100 = sub_47EE94((uint64_t)v6, 0, 4);
    int v19 = sub_47EE94(v2, 0, 4);
    int v20 = *(_DWORD *)(v2 + 136);
    unint64_t v21 = *(void **)nullsub_1(v6);
    BOOL v17 = 0;
    if (sub_105B834(v7, (uint64_t)v21)) {
      return v17;
    }
    BOOL v22 = sub_45FBF0(v2);
    if (v22 != sub_45FBF0((uint64_t)v6)) {
      return 1;
    }
    BOOL v23 = (void **)nullsub_1(v2);
    int v24 = sub_105BBA0((uint64_t)v23, v21, *v23);
    if (v24 == 0x7FFFFFFF) {
      return 0;
    }
    int v25 = v24;
    if (sub_105BE14((uint64_t)v7, v24)) {
      return 0;
    }
    uint64_t v96 = (uint64_t)(v7 + 3);
    if (sub_105BF74((char *)v2, *v7, (uint64_t)(v7 + 3))) {
      return 0;
    }
    int v97 = v25;
    sub_5E5C(__p, "ev_efficient_route_updates");
    BOOL v26 = (void *)sub_560F4(v9, (uint64_t)__p);
    sub_5E5C(&v108, "enabled_for_low_soc");
    BOOL v27 = sub_29D62C(v26, (uint64_t)&v108);
    if (SHIBYTE(v110) < 0) {
      operator delete(v108);
    }
    BOOL v28 = v27;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    sub_5E5C(__p, "ev_efficient_route_updates");
    int v29 = (void *)sub_560F4(v9, (uint64_t)__p);
    sub_5E5C(&v108, "enabled_for_critical_soc");
    BOOL v30 = sub_29D62C(v29, (uint64_t)&v108);
    if (SHIBYTE(v110) < 0)
    {
      operator delete(v108);
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      {
LABEL_41:
        if (!sub_401FE4(v7[2])) {
          goto LABEL_63;
        }
        goto LABEL_45;
      }
    }
    else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
      goto LABEL_41;
    }
    operator delete(__p[0]);
    if (!sub_401FE4(v7[2])) {
      goto LABEL_63;
    }
LABEL_45:
    if (v28 || v30)
    {
      sub_5E5C(__p, "ev_efficient_route_updates.min_drop_below_threshold_wh");
      int v31 = sub_5CC34(v9, __p);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      sub_5E5C(__p, "ev_efficient_route_updates.min_energy_improvement_wh");
      int v91 = sub_5CC34(v9, __p);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      sub_5E5C(__p, "ev_efficient_route_updates.max_eta_increase_s");
      int v90 = sub_5D2EC(v9, __p);
      int v94 = v31;
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      long long v32 = (uint64_t *)(v7[2] + 288);
      sub_405674((uint64_t)v6, v32, (uint64_t)__p);
      sub_405674(v2, v32, (uint64_t)&v108);
      int v89 = sub_47EE94((uint64_t)v6, 0, 0);
      int v33 = sub_47EE94(v2, 0, 0);
      int v87 = *(_DWORD *)(v2 + 136);
      int v88 = v33;
      uint64_t v34 = 336;
      if (v28) {
        uint64_t v34 = 312;
      }
      uint64_t v35 = v7[2] + v34;
      long long v106 = *(_OWORD *)v35;
      uint64_t v107 = *(void *)(v35 + 16);
      uint64_t v36 = sub_105B72C(v15);
      signed __int32 v37 = sub_491B28(v36);
      LODWORD(v102[0]) = v37;
      signed __int32 v38 = sub_40A440(&v106);
      v104.n128_u32[0] = v38;
      if (v38 == 0x7FFFFFFF)
      {
        unint64_t v39 = v102;
      }
      else
      {
        unint64_t v39 = (void **)&v104;
        if (v37 != 0x7FFFFFFF && v38 >= v37) {
          unint64_t v39 = v102;
        }
      }
      int v92 = *(_DWORD *)v39;
      int v40 = sub_40A440(__p) + v94;
      int v41 = sub_40A440(&v108);
      int v42 = sub_40A440(__p);
      if (v40 < v92 && v41 > v42 + v91 && v88 - (v89 + v4) + v87 < v90)
      {
        *(_DWORD *)(v2 + 124) = sub_40A440(__p);
        return 1;
      }
    }
LABEL_63:
    int v43 = v100 + v4;
    int v44 = v20 + v19;
    int v101 = v43 - (v20 + v19);
    if (v43 <= v20 + v19) {
      int v45 = 0;
    }
    else {
      int v45 = v43 - (v20 + v19);
    }
    BOOL v17 = 0;
    if (sub_105C224((uint64_t)v7, v97, v45) || v43 <= v44) {
      return v17;
    }
    int v46 = (uint64_t *)sub_374CE4((void *)v7[1]);
    sub_327DC8((uint64_t *)__p, v46, 255);
    sub_5E5C(&v108, "declined_detour_required_extra_savings");
    int v47 = sub_319F48(v9, (uint64_t)&v108);
    if (SHIBYTE(v110) < 0) {
      operator delete(v108);
    }
    uint64_t v48 = sub_45FB28((void *)v2, 0);
    int v93 = v44;
    int v95 = v43;
    uint64_t v49 = sub_105B72C(v15);
    sub_46DD68(v49, &v104);
    unint64_t v50 = v104.n128_u64[1];
    unint64_t v51 = v104.n128_u64[0];
    if (v104.n128_u64[0] != v104.n128_u64[1])
    {
      int v98 = 10 * v47;
      while (1)
      {
        unint64_t v52 = sub_DB09D8((uint64_t *)__p, *(void *)v51);
        if (v52)
        {
          long long v53 = (unsigned int *)sub_3C80F8(v48);
          uint64_t v54 = (unsigned int *)sub_3FA3A8(v48);
          uint64_t v55 = sub_105C658(v53, v54, v52);
          if (v55 != (unsigned int *)sub_3FA3A8(v48) && *(_DWORD *)(v51 + 8) + v98 > v101) {
            break;
          }
        }
        v51 += 16;
        if (v51 == v50) {
          goto LABEL_77;
        }
      }
      BOOL v17 = 0;
      *((unsigned char *)v7 + 5860) = 1;
      goto LABEL_133;
    }
LABEL_77:
    sub_5E5C(&v108, "capacity_based_updates");
    long long v56 = (void *)sub_560F4(v9, (uint64_t)&v108);
    if (SHIBYTE(v110) < 0) {
      operator delete(v108);
    }
    double v57 = sub_105C6B4((uint64_t)v7, v2, v6);
    double v58 = sub_108C82C(v96, (uint64_t)v6, 4u);
    double v59 = sub_108C82C(v96, v2, 4u);
    double v60 = v59 / v58;
    if (v59 == 0.0) {
      double v59 = 1.0;
    }
    if (v58 == 0.0) {
      double v61 = v59;
    }
    else {
      double v61 = v60;
    }
    sub_5E5C(&v108, "min_capacity_ratio");
    double v62 = sub_5C7E8(v56, (uint64_t)&v108);
    if (v57 >= v62 && (sub_5E5C(&v106, "max_capacity_ratio"), v57 <= sub_5C7E8(v56, (uint64_t)&v106)))
    {
      sub_5E5C(v102, "drop_thresholds");
      BOOL v65 = (uint64_t *)sub_5C4AC(v56, (uint64_t)v102);
      int v64 = sub_105C910(v65, v95, v61);
      if (v103 < 0) {
        operator delete(v102[0]);
      }
    }
    else
    {
      sub_5E5C(v102, "thresholds");
      char v63 = (uint64_t *)sub_5C4AC(v56, (uint64_t)v102);
      int v64 = sub_105C910(v63, v95, v57);
      if (v103 < 0) {
        operator delete(v102[0]);
      }
      if (v57 < v62) {
        goto LABEL_94;
      }
    }
    if (SHIBYTE(v107) < 0) {
      operator delete((void *)v106);
    }
LABEL_94:
    if (SHIBYTE(v110) < 0) {
      operator delete(v108);
    }
    if (v64 == 0x7FFFFFFF)
    {
      BOOL v17 = 0;
    }
    else
    {
      sub_5E5C(&v108, "cell_coverage");
      unint64_t v66 = (void *)sub_560F4(v9, (uint64_t)&v108);
      if (SHIBYTE(v110) < 0) {
        operator delete(v108);
      }
      sub_5E5C(&v108, "enabled");
      BOOL v67 = sub_29D62C(v66, (uint64_t)&v108);
      if (SHIBYTE(v110) < 0) {
        operator delete(v108);
      }
      if (v67)
      {
        uint64_t v68 = sub_108A1DC(v96, v6);
        __int16 v69 = v68 < 0 ? -50 : 50;
        __int16 v99 = v69;
        uint64_t v70 = sub_108A1DC(v96, (char *)v2);
        __int16 v71 = v70 < 0 ? -50 : 50;
        sub_5E5C(&v108, "distance_thresholds");
        long long v72 = (uint64_t *)sub_5C4AC(v66, (uint64_t)&v108);
        int v73 = 5243 * (__int16)(v99 + v68 % 100);
        int v74 = 5243 * (__int16)(v71 + v70 % 100);
        v64 += sub_105C910(v72, v95, (double)(v70 / 100 + (int)((v74 >> 19) + (v74 >> 31)))- (double)(v68 / 100 + (int)((v73 >> 19) + (v73 >> 31))));
        if (SHIBYTE(v110) < 0) {
          operator delete(v108);
        }
      }
      uint64_t v75 = sub_5231C((uint64_t)v6);
      if (!*(unsigned char *)v75 && !*(_DWORD *)(v75 + 52) && ((uint64_t v76 = sub_5231C(v2), *(unsigned char *)v76) || *(_DWORD *)(v76 + 52)))
      {
        sub_5E5C(&v108, "switch_from_non_tolled_to_tolled_thresholds");
        int v79 = (uint64_t *)sub_5C4AC(v9, (uint64_t)&v108);
        int v77 = v95;
        int v80 = sub_105C910(v79, v95, 1.0);
        if (SHIBYTE(v110) < 0) {
          operator delete(v108);
        }
        if (v80 == 0x7FFFFFFF) {
          int v81 = 0;
        }
        else {
          int v81 = v80;
        }
        v64 += v81;
      }
      else
      {
        int v77 = v95;
      }
      int v82 = v93;
      sub_5E5C(&v108, "consider_declined_initial_savings");
      BOOL v83 = sub_29D62C(v9, (uint64_t)&v108);
      if (SHIBYTE(v110) < 0) {
        operator delete(v108);
      }
      if (v83)
      {
        uint64_t v84 = sub_105B72C(v15);
        int v85 = sub_40AB24(v84);
        if (v85)
        {
          sub_5E5C(&v108, "add_to_initial_declined_savings");
          int v86 = v85 + 10 * sub_319F48(v56, (uint64_t)&v108);
          if (v64 <= v86) {
            int v64 = v86;
          }
          if (SHIBYTE(v110) < 0) {
            operator delete(v108);
          }
          int v77 = v95;
          int v82 = v93;
        }
      }
      BOOL v17 = v77 >= v64 + v82;
    }
LABEL_133:
    sub_31B7D8((uint64_t)__p);
    return v17;
  }

  return sub_45FC04(v2);
}

void sub_105AEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
}

void sub_105B028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void sub_105B030()
{
  sub_1A668((void **)(v0 - 152));
  JUMPOUT(0x105B03CLL);
}

__n128 sub_105B054(long long *a1, uint64_t *a2)
{
  long long v17 = *a1;
  uint64_t v3 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  long long v23 = *(long long *)((char *)a1 + 56);
  *(_OWORD *)int v24 = *(long long *)((char *)a1 + 72);
  *(void *)&v24[13] = *(void *)((char *)a1 + 85);
  long long v21 = *(long long *)((char *)a1 + 24);
  long long v22 = *(long long *)((char *)a1 + 40);
  int64_t v5 = a1 + 6;
  uint64_t v4 = *((void *)a1 + 12);
  *(void *)&v20[7] = *(void *)((char *)a1 + 111);
  *(void *)int v20 = *((void *)a1 + 13);
  char v6 = *((unsigned char *)a1 + 119);
  *((void *)a1 + 12) = 0;
  *((void *)a1 + 13) = 0;
  *((void *)a1 + 14) = 0;
  uint64_t v7 = (uint64_t)a1 + 120;
  int v19 = *((_DWORD *)a1 + 34);
  __n128 v18 = *(__n128 *)((char *)a1 + 120);
  *a1 = *(_OWORD *)a2;
  *((void *)a1 + 2) = a2[2];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  long long v8 = *(_OWORD *)(a2 + 7);
  long long v9 = *(_OWORD *)(a2 + 9);
  uint64_t v10 = *(uint64_t *)((char *)a2 + 85);
  *(long long *)((char *)a1 + 40) = *(_OWORD *)(a2 + 5);
  *(void *)((char *)a1 + 85) = v10;
  *(long long *)((char *)a1 + 72) = v9;
  *(long long *)((char *)a1 + 56) = v8;
  *(long long *)((char *)a1 + 24) = *(_OWORD *)(a2 + 3);
  if (*((char *)a1 + 119) < 0) {
    operator delete(*(void **)v5);
  }
  long long v11 = *((_OWORD *)a2 + 6);
  *((void *)v5 + 2) = a2[14];
  *int64_t v5 = v11;
  *((unsigned char *)a2 + 119) = 0;
  *((unsigned char *)a2 + 96) = 0;
  long long v12 = *(_OWORD *)(a2 + 15);
  *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 34);
  *(_OWORD *)uint64_t v7 = v12;
  uint64_t v13 = *a2;
  if (*a2)
  {
    uint64_t v14 = a2[1];
    uint64_t v15 = (void *)*a2;
    if (v14 != v13)
    {
      do
        uint64_t v14 = sub_3AFFFC(v14 - 1056);
      while (v14 != v13);
      uint64_t v15 = (void *)*a2;
    }
    a2[1] = v13;
    operator delete(v15);
  }
  *(_OWORD *)a2 = v17;
  a2[2] = v3;
  *(_OWORD *)(a2 + 7) = v23;
  *(_OWORD *)(a2 + 9) = *(_OWORD *)v24;
  *(uint64_t *)((char *)a2 + 85) = *(void *)&v24[13];
  *(_OWORD *)(a2 + 3) = v21;
  *(_OWORD *)(a2 + 5) = v22;
  if (*((char *)a2 + 119) < 0) {
    operator delete((void *)a2[12]);
  }
  a2[12] = v4;
  a2[13] = *(void *)v20;
  *(uint64_t *)((char *)a2 + 111) = *(void *)&v20[7];
  *((unsigned char *)a2 + 119) = v6;
  __n128 result = v18;
  *(__n128 *)(a2 + 15) = v18;
  *((_DWORD *)a2 + 34) = v19;
  return result;
}

void sub_105B240(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)uint64_t v35 = 0u;
  *(_OWORD *)uint64_t v36 = 0u;
  int v37 = 1065353216;
  sub_108C92C(a3, a1, &v34);
  uint64_t v8 = v34.i64[1];
  for (uint64_t i = v34.i64[0]; i != v8; i += 160)
  {
    uint64_t v9 = **(void **)i + 424 * *(void *)(i + 8);
    if (*(char *)(v9 + 63) < 0)
    {
      sub_4200(__p, *(void **)(v9 + 40), *(void *)(v9 + 48));
    }
    else
    {
      long long v10 = *(_OWORD *)(v9 + 40);
      uint64_t v29 = *(void *)(v9 + 56);
      *(_OWORD *)long long __p = v10;
    }
    *(_OWORD *)BOOL v30 = *(_OWORD *)i;
    sub_105DF30((uint64_t)v35, (uint64_t)__p, (uint64_t)__p);
    if (SHIBYTE(v29) < 0) {
      operator delete(__p[0]);
    }
  }
  __p[0] = &v34;
  sub_3A6AB0((void ***)__p);
  if (v36[1])
  {
    sub_108C92C(a3, a2, (int64x2_t *)__p);
    long long v11 = __p[0];
    for (uint64_t j = __p[1]; v11 != j; v11 += 20)
    {
      uint64_t v13 = sub_105E3A4(v35, *(void *)*v11 + 424 * v11[1] + 40);
      uint64_t v14 = v13;
      if (v13)
      {
        unint64_t v15 = (unint64_t)v35[1];
        unint64_t v16 = v13[1];
        uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v35[1]);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          if ((void *)v16 >= v35[1]) {
            v16 %= (unint64_t)v35[1];
          }
        }
        else
        {
          v16 &= (unint64_t)v35[1] - 1;
        }
        __n128 v18 = (uint64_t *)*((void *)v35[0] + v16);
        do
        {
          int v19 = v18;
          __n128 v18 = (uint64_t *)*v18;
        }
        while (v18 != v13);
        if (v19 == (uint64_t *)v36) {
          goto LABEL_34;
        }
        unint64_t v20 = v19[1];
        if (v17.u32[0] > 1uLL)
        {
          if ((void *)v20 >= v35[1]) {
            v20 %= (unint64_t)v35[1];
          }
        }
        else
        {
          v20 &= (unint64_t)v35[1] - 1;
        }
        if (v20 != v16)
        {
LABEL_34:
          if (!*v13) {
            goto LABEL_35;
          }
          unint64_t v21 = *(void *)(*v13 + 8);
          if (v17.u32[0] > 1uLL)
          {
            if ((void *)v21 >= v35[1]) {
              v21 %= (unint64_t)v35[1];
            }
          }
          else
          {
            v21 &= (unint64_t)v35[1] - 1;
          }
          if (v21 != v16) {
LABEL_35:
          }
            *((void *)v35[0] + v16) = 0;
        }
        uint64_t v22 = *v13;
        if (*v13)
        {
          unint64_t v23 = *(void *)(v22 + 8);
          if (v17.u32[0] > 1uLL)
          {
            if (v23 >= v15) {
              v23 %= v15;
            }
          }
          else
          {
            v23 &= v15 - 1;
          }
          if (v23 != v16)
          {
            *((void *)v35[0] + v23) = v19;
            uint64_t v22 = *v13;
          }
        }
        uint64_t *v19 = v22;
        *uint64_t v13 = 0;
        --v36[1];
        if (*((char *)v13 + 39) < 0) {
          operator delete((void *)v13[2]);
        }
        operator delete(v14);
      }
    }
    v34.i64[0] = (uint64_t)__p;
    sub_3A6AB0((void ***)&v34);
    int v24 = (char *)v36[0];
    if (v36[0])
    {
      do
      {
        if (v24[39] < 0)
        {
          sub_4200(__p, *((void **)v24 + 2), *((void *)v24 + 3));
        }
        else
        {
          *(_OWORD *)long long __p = *((_OWORD *)v24 + 1);
          uint64_t v29 = *((void *)v24 + 4);
        }
        *(_OWORD *)&v30[8] = 0u;
        long long v31 = 0u;
        uint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
        int v32 = 0x7FFFFFFF;
        *(_DWORD *)BOOL v30 = 0;
        sub_4879EC(a4, (long long *)__p);
        if (*(void *)&v30[8])
        {
          *(void *)&v30[16] = *(void *)&v30[8];
          operator delete(*(void **)&v30[8]);
        }
        if (SHIBYTE(v29) < 0) {
          operator delete(__p[0]);
        }
        int v24 = *(char **)v24;
      }
      while (v24);
    }
  }
  int v25 = (void **)v36[0];
  if (v36[0])
  {
    do
    {
      BOOL v27 = (void **)*v25;
      if (*((char *)v25 + 39) < 0) {
        operator delete(v25[2]);
      }
      operator delete(v25);
      int v25 = v27;
    }
    while (v27);
  }
  BOOL v26 = v35[0];
  v35[0] = 0;
  if (v26) {
    operator delete(v26);
  }
}