uint64_t sub_C641BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  long long v7;
  void **v8;
  void **v9;
  void **v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;
  void *v19;
  void **v20;
  void **v21;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      v8 = *(void ***)a4;
      if (*(void *)a4)
      {
        v9 = *(void ***)(a4 + 8);
        v10 = *(void ***)a4;
        if (v9 != v8)
        {
          do
          {
            v11 = *(v9 - 28);
            if (v11)
            {
              *(v9 - 27) = v11;
              operator delete(v11);
            }
            v12 = *(v9 - 31);
            if (v12)
            {
              *(v9 - 30) = v12;
              operator delete(v12);
            }
            v13 = *(v9 - 39);
            if (v13)
            {
              *(v9 - 38) = v13;
              operator delete(v13);
            }
            v14 = *(v9 - 42);
            if (v14)
            {
              *(v9 - 41) = v14;
              operator delete(v14);
            }
            v15 = (char *)*(v9 - 45);
            if (v15)
            {
              v16 = (char *)*(v9 - 44);
              v17 = *(v9 - 45);
              if (v16 != v15)
              {
                do
                {
                  v18 = (void *)*((void *)v16 - 3);
                  if (v18)
                  {
                    *((void *)v16 - 2) = v18;
                    operator delete(v18);
                  }
                  v16 -= 56;
                }
                while (v16 != v15);
                v17 = *(v9 - 45);
              }
              *(v9 - 44) = v15;
              operator delete(v17);
            }
            v19 = *(v9 - 56);
            if (v19)
            {
              *(v9 - 55) = v19;
              operator delete(v19);
            }
            v20 = v9 - 59;
            if (*((char *)v9 - 449) < 0) {
              operator delete(*v20);
            }
            v9 -= 59;
          }
          while (v20 != v8);
          v10 = *(void ***)a4;
        }
        *(void *)(a4 + 8) = v8;
        operator delete(v10);
        *(void *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
      }
      *(_OWORD *)a4 = *(_OWORD *)v5;
      *(void *)(a4 + 16) = *(void *)(v5 + 16);
      *(void *)v5 = 0;
      *(void *)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
      v21 = (void **)(a4 + 24);
      if (*(char *)(a4 + 47) < 0) {
        operator delete(*v21);
      }
      v7 = *(_OWORD *)(v5 + 24);
      *(void *)(a4 + 40) = *(void *)(v5 + 40);
      *(_OWORD *)v21 = v7;
      *(unsigned char *)(v5 + 47) = 0;
      *(unsigned char *)(v5 + 24) = 0;
      v5 += 48;
      a4 += 48;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_C64384(uint64_t a1, void **a2)
{
  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      if (*((char *)v4 - 1) < 0)
      {
        operator delete(*(v4 - 3));
        v6 = v4 - 6;
        v7 = (void **)*(v4 - 6);
        if (v7)
        {
LABEL_10:
          v8 = (void **)*(v4 - 5);
          v5 = v7;
          if (v8 != v7)
          {
            do
            {
              v9 = *(v8 - 28);
              if (v9)
              {
                *(v8 - 27) = v9;
                operator delete(v9);
              }
              v10 = *(v8 - 31);
              if (v10)
              {
                *(v8 - 30) = v10;
                operator delete(v10);
              }
              v11 = *(v8 - 39);
              if (v11)
              {
                *(v8 - 38) = v11;
                operator delete(v11);
              }
              v12 = *(v8 - 42);
              if (v12)
              {
                *(v8 - 41) = v12;
                operator delete(v12);
              }
              v13 = (char *)*(v8 - 45);
              if (v13)
              {
                v14 = (char *)*(v8 - 44);
                v15 = *(v8 - 45);
                if (v14 != v13)
                {
                  do
                  {
                    v16 = (void *)*((void *)v14 - 3);
                    if (v16)
                    {
                      *((void *)v14 - 2) = v16;
                      operator delete(v16);
                    }
                    v14 -= 56;
                  }
                  while (v14 != v13);
                  v15 = *(v8 - 45);
                }
                *(v8 - 44) = v13;
                operator delete(v15);
              }
              v17 = *(v8 - 56);
              if (v17)
              {
                *(v8 - 55) = v17;
                operator delete(v17);
              }
              v18 = v8 - 59;
              if (*((char *)v8 - 449) < 0) {
                operator delete(*v18);
              }
              v8 -= 59;
            }
            while (v18 != v7);
            v5 = *v6;
          }
          *(v4 - 5) = v7;
          operator delete(v5);
        }
      }
      else
      {
        v6 = v4 - 6;
        v7 = (void **)*(v4 - 6);
        if (v7) {
          goto LABEL_10;
        }
      }
      v4 = v6;
    }
    while (v6 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void **sub_C64510(void **a1)
{
  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((void *)v5 - 4);
        v5 -= 32;
        v6 = v7;
        if (v7)
        {
          *((void *)v3 - 3) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_C64588(void *a1, uint64_t a2, uint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3 != a2)
  {
    unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a3 - a2) >> 3);
    if (v5 >> 59) {
      sub_2E00();
    }
    v8 = operator new(0x99999999999999A0 * ((a3 - a2) >> 3));
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[4 * v5];
    a1[1] = sub_C64658(v4, a2, a3, v8);
  }
  return a1;
}

void sub_C6462C(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20AE8FC((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_C64658(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v10 = *(const void **)v6;
      uint64_t v9 = *(void *)(v6 + 8);
      int64_t v11 = v9 - *(void *)v6;
      if (v9 != *(void *)v6)
      {
        if (0xCCCCCCCCCCCCCCCDLL * (v11 >> 4) >= 0x333333333333334) {
          sub_2E00();
        }
        v7 = (char *)operator new(v11);
        *a4 = v7;
        a4[1] = v7;
        a4[2] = &v7[16 * (v11 >> 4)];
        size_t v8 = 80 * ((v11 - 80) / 0x50uLL) + 80;
        memcpy(v7, v10, v8);
        a4[1] = &v7[v8];
      }
      a4[3] = *(void *)(v6 + 24);
      a4 += 4;
      v6 += 40;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_C64778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_C6478C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_BEF7C0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_C647B0(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = *(void ****)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) < a2)
  {
    uint64_t v6 = *(void ****)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      int64_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      int64_t v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
    }
    else
    {
      do
      {
        v17 = v13;
        *((void *)v13 - 2) = 0;
        *((void *)v13 - 1) = 0;
        long long v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((void *)v17 - 1) = v5[2];
        char *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      unint64_t v5 = *(void ****)a1;
      v19 = *(void ****)(a1 + 8);
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (v19 == v5)
      {
        unint64_t v5 = v19;
        if (!v19) {
          return;
        }
        goto LABEL_24;
      }
      v20 = v19 - 3;
      do
      {
        if (*v20)
        {
          sub_C64384((uint64_t)v20, *v20);
          operator delete(*v20);
        }
        BOOL v21 = v20 == v5;
        v20 -= 3;
      }
      while (!v21);
    }
    if (!v5) {
      return;
    }
LABEL_24:
    operator delete(v5);
    return;
  }
  if (a2)
  {
    size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(*(void **)(a1 + 8), v12);
    unint64_t v5 = (void ***)((char *)v5 + v12);
  }
  *(void *)(a1 + 8) = v5;
}

void sub_C649C4(uint64_t a1@<X0>, uint64_t ***a2@<X1>, int64x2_t *a3@<X8>)
{
  a3->i64[0] = 0;
  a3->i64[1] = 0;
  a3[1].i64[0] = 0;
  uint64_t v5 = sub_40EFE8(a1);
  for (uint64_t i = sub_52058(a1); v5 != i; v5 += 472)
  {
    sub_107B7E0(v5, a2, &__p, 0.95);
    if (sub_EA80FC(&__p.__r_.__value_.__l.__data_))
    {
      sub_107B7E0(v5, a2, &v47, 0.0);
      std::string::size_type v8 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
        unint64_t v10 = (void *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            int64_t v11 = *(void **)(size - 224);
            if (v11)
            {
              *(void *)(size - 216) = v11;
              operator delete(v11);
            }
            size_t v12 = *(void **)(size - 248);
            if (v12)
            {
              *(void *)(size - 240) = v12;
              operator delete(v12);
            }
            v13 = *(void **)(size - 312);
            if (v13)
            {
              *(void *)(size - 304) = v13;
              operator delete(v13);
            }
            v14 = *(void **)(size - 336);
            if (v14)
            {
              *(void *)(size - 328) = v14;
              operator delete(v14);
            }
            uint64_t v15 = *(void *)(size - 360);
            if (v15)
            {
              uint64_t v16 = *(void *)(size - 352);
              v17 = *(void **)(size - 360);
              if (v16 != v15)
              {
                do
                {
                  long long v18 = *(void **)(v16 - 24);
                  if (v18)
                  {
                    *(void *)(v16 - 16) = v18;
                    operator delete(v18);
                  }
                  v16 -= 56;
                }
                while (v16 != v15);
                v17 = *(void **)(size - 360);
              }
              *(void *)(size - 352) = v15;
              operator delete(v17);
            }
            v19 = *(void **)(size - 448);
            if (v19)
            {
              *(void *)(size - 440) = v19;
              operator delete(v19);
            }
            v20 = (void **)(size - 472);
            if (*(char *)(size - 449) < 0) {
              operator delete(*v20);
            }
            size -= 472;
          }
          while (v20 != (void **)v8);
          unint64_t v10 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v8;
        operator delete(v10);
      }
      std::string __p = v47;
      memset(&v47, 0, sizeof(v47));
      if (SHIBYTE(v52) < 0)
      {
        operator delete((void *)v51);
        std::string::size_type v21 = v47.__r_.__value_.__r.__words[0];
        long long v51 = v48;
        uint64_t v52 = v49;
        HIBYTE(v49) = 0;
        LOBYTE(v48) = 0;
        if (v47.__r_.__value_.__r.__words[0])
        {
          std::string::size_type v22 = v47.__r_.__value_.__l.__size_;
          v23 = (void *)v47.__r_.__value_.__r.__words[0];
          if (v47.__r_.__value_.__l.__size_ != v47.__r_.__value_.__r.__words[0])
          {
            do
            {
              v24 = *(void **)(v22 - 224);
              if (v24)
              {
                *(void *)(v22 - 216) = v24;
                operator delete(v24);
              }
              v25 = *(void **)(v22 - 248);
              if (v25)
              {
                *(void *)(v22 - 240) = v25;
                operator delete(v25);
              }
              v26 = *(void **)(v22 - 312);
              if (v26)
              {
                *(void *)(v22 - 304) = v26;
                operator delete(v26);
              }
              v27 = *(void **)(v22 - 336);
              if (v27)
              {
                *(void *)(v22 - 328) = v27;
                operator delete(v27);
              }
              uint64_t v28 = *(void *)(v22 - 360);
              if (v28)
              {
                uint64_t v29 = *(void *)(v22 - 352);
                v30 = *(void **)(v22 - 360);
                if (v29 != v28)
                {
                  do
                  {
                    v31 = *(void **)(v29 - 24);
                    if (v31)
                    {
                      *(void *)(v29 - 16) = v31;
                      operator delete(v31);
                    }
                    v29 -= 56;
                  }
                  while (v29 != v28);
                  v30 = *(void **)(v22 - 360);
                }
                *(void *)(v22 - 352) = v28;
                operator delete(v30);
              }
              v32 = *(void **)(v22 - 448);
              if (v32)
              {
                *(void *)(v22 - 440) = v32;
                operator delete(v32);
              }
              v33 = (void **)(v22 - 472);
              if (*(char *)(v22 - 449) < 0) {
                operator delete(*v33);
              }
              v22 -= 472;
            }
            while (v33 != (void **)v21);
            v23 = (void *)v47.__r_.__value_.__r.__words[0];
          }
          v47.__r_.__value_.__l.__size_ = v21;
          operator delete(v23);
        }
      }
      else
      {
        long long v51 = v48;
        uint64_t v52 = v49;
      }
    }
    if (!sub_EA80FC(&__p.__r_.__value_.__l.__data_)) {
      sub_EB6AE4(a3, &__p, 0);
    }
    if (SHIBYTE(v52) < 0)
    {
      operator delete((void *)v51);
      std::string::size_type v34 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
LABEL_67:
        std::string::size_type v35 = __p.__r_.__value_.__l.__size_;
        unint64_t v7 = (void *)v34;
        if (__p.__r_.__value_.__l.__size_ != v34)
        {
          do
          {
            v36 = *(void **)(v35 - 224);
            if (v36)
            {
              *(void *)(v35 - 216) = v36;
              operator delete(v36);
            }
            v37 = *(void **)(v35 - 248);
            if (v37)
            {
              *(void *)(v35 - 240) = v37;
              operator delete(v37);
            }
            v38 = *(void **)(v35 - 312);
            if (v38)
            {
              *(void *)(v35 - 304) = v38;
              operator delete(v38);
            }
            v39 = *(void **)(v35 - 336);
            if (v39)
            {
              *(void *)(v35 - 328) = v39;
              operator delete(v39);
            }
            uint64_t v40 = *(void *)(v35 - 360);
            if (v40)
            {
              uint64_t v41 = *(void *)(v35 - 352);
              v42 = *(void **)(v35 - 360);
              if (v41 != v40)
              {
                do
                {
                  v43 = *(void **)(v41 - 24);
                  if (v43)
                  {
                    *(void *)(v41 - 16) = v43;
                    operator delete(v43);
                  }
                  v41 -= 56;
                }
                while (v41 != v40);
                v42 = *(void **)(v35 - 360);
              }
              *(void *)(v35 - 352) = v40;
              operator delete(v42);
            }
            v44 = *(void **)(v35 - 448);
            if (v44)
            {
              *(void *)(v35 - 440) = v44;
              operator delete(v44);
            }
            v45 = (void **)(v35 - 472);
            if (*(char *)(v35 - 449) < 0) {
              operator delete(*v45);
            }
            v35 -= 472;
          }
          while (v45 != (void **)v34);
          unint64_t v7 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v34;
        operator delete(v7);
      }
    }
    else
    {
      std::string::size_type v34 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]) {
        goto LABEL_67;
      }
    }
  }
}

void sub_C64E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void ***a10)
{
}

void sub_C64E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void ***a10)
{
}

void sub_C64E6C(_Unwind_Exception *a1, uint64_t a2, void ***a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_405E28((uint64_t)va);
  sub_C63044(a3);
  _Unwind_Resume(a1);
}

uint64_t sub_C64EA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 96);
    uint64_t v4 = *(void **)(a1 + 88);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 32;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 88);
    }
    *(void *)(a1 + 96) = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_C64F14(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    unint64_t v7 = operator new(v5 - *a2);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[4 * (v6 >> 5)];
    a1[1] = sub_C64FD0(v3, v4, v5, v7);
  }
  return a1;
}

void sub_C64FA4(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20AE8FC((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_C64FD0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      unint64_t v10 = *(const void **)v6;
      uint64_t v9 = *(void *)(v6 + 8);
      int64_t v11 = v9 - *(void *)v6;
      if (v9 != *(void *)v6)
      {
        if (0xCCCCCCCCCCCCCCCDLL * (v11 >> 4) >= 0x333333333333334) {
          sub_2E00();
        }
        unint64_t v7 = (char *)operator new(v11);
        *a4 = v7;
        a4[1] = v7;
        a4[2] = &v7[16 * (v11 >> 4)];
        size_t v8 = 80 * ((v11 - 80) / 0x50uLL) + 80;
        memcpy(v7, v10, v8);
        a4[1] = &v7[v8];
      }
      a4[3] = *(void *)(v6 + 24);
      a4 += 4;
      v6 += 32;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_C650F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_C65104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_BEF7C0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_C65128(uint64_t a1)
{
  *(void *)(a1 + 120) = v3;
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*(void **)(a1 + 192));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  uint64_t v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(void *)(a1 + 88) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 32);
  if (v5)
  {
    *(void *)(a1 + 40) = v5;
    operator delete(v5);
  }
  return a1;
}

void *sub_C65284(void *a1)
{
  uint64_t v2 = (void *)a1[1238];
  if (v2) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[1208];
  if (v3) {
    free(v3);
  }
  sub_C62ED8(a1 + 551);
  uint64_t v4 = (void *)a1[545];
  if (v4)
  {
    a1[546] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[532];
  if (v5)
  {
    a1[533] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[526];
  if (v6)
  {
    a1[527] = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)a1[518];
  if (v7)
  {
    a1[519] = v7;
    operator delete(v7);
  }
  sub_3A6318(a1 + 2);
  return a1;
}

double sub_C65314()
{
  unk_25E0567 = 16641;
  word_25E0550 = 65;
  byte_25E057F = 1;
  byte_25E0569 = 0;
  qword_25E0580 = (uint64_t)operator new(0x38uLL);
  unk_25E0588 = xmmword_20B9A20;
  strcpy((char *)qword_25E0580, "routing/route-planning/eta/CyclingBaselineETA.json");
  return *(double *)"ngBaselineETA.json";
}

void sub_C65390(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v143);
  *(_OWORD *)v141 = 0u;
  memset(v142, 0, sizeof(v142));
  int v4 = sub_486180(*(void *)(a1 + 16));
  v138 = 0;
  v139 = 0;
  uint64_t v140 = 0;
  uint64_t v5 = **(long long ****)a1;
  uint64_t v6 = *(long long ***)(*(void *)a1 + 8);
  if (v5 == v6)
  {
LABEL_190:
    v146.n128_u64[0] = 16;
    v146.n128_u64[1] = (unint64_t)&off_2439090;
    sub_3E7814(__dst, &v146);
    *(unsigned char *)a2 = 0;
    __n128 v97 = __dst[1];
    *(__n128 *)(a2 + 8) = __dst[0];
    *(__n128 *)(a2 + 24) = v97;
    *(void *)(a2 + 40) = __dst[2].n128_u64[0];
    *(_DWORD *)(a2 + 48) = __dst[2].n128_u32[2];
    v98 = (void **)v138;
    if (v138) {
      goto LABEL_191;
    }
LABEL_217:
    v100 = (void **)v141[0];
    if (!v141[0]) {
      return;
    }
    goto LABEL_218;
  }
  int v7 = v4;
  v136 = *(long long ***)(*(void *)a1 + 8);
  uint64_t v134 = a2;
  char v137 = 1;
  do
  {
    while (1)
    {
      size_t v8 = v5[1];
      BOOL v9 = *v5 != v8 && *(unsigned char *)(a1 + 24) == 0;
      if (!v9)
      {
        v157[0] = 1;
        sub_C6669C(&v158, v5);
        goto LABEL_30;
      }
      unint64_t v10 = *(uint64_t **)(a1 + 8);
      sub_C669BC(v144, *v5, v8);
      sub_103817C((uint64_t **)__dst, v10, (uint64_t *)(a1 + 96));
      sub_1038310((uint64_t)__dst, (uint64_t *)v144);
      if (__dst[8].n128_u64[0])
      {
        __dst[8].n128_u64[1] = __dst[8].n128_u64[0];
        operator delete((void *)__dst[8].n128_u64[0]);
      }
      if (__dst[4].n128_i8[15] < 0)
      {
        operator delete((void *)__dst[3].n128_u64[1]);
        v13 = (double *)v144[0];
        size_t v12 = (double *)v144[1];
        if (v144[0] == v144[1]) {
          goto LABEL_28;
        }
      }
      else
      {
        v13 = (double *)v144[0];
        size_t v12 = (double *)v144[1];
        if (v144[0] == v144[1]) {
          goto LABEL_28;
        }
      }
      LODWORD(v11) = *(_DWORD *)(a1 + 92);
      double v14 = (double)v11;
      uint64_t v15 = v13 + 35;
      while (1)
      {
        double v16 = *(v15 - 2);
        if (v16 > v14) {
          break;
        }
        BOOL v9 = v15 == v12;
        v15 += 35;
        if (v9) {
          goto LABEL_39;
        }
      }
      v17 = v15 - 35;
      if (v15 - 35 == v12) {
        goto LABEL_39;
      }
      while (v15 != v12)
      {
        LODWORD(v16) = *(_DWORD *)(a1 + 92);
        double v16 = (double)*(unint64_t *)&v16;
        if (v15[33] <= v16)
        {
          memcpy(v17, v15, 0x118uLL);
          v17 += 35;
        }
        v15 += 35;
      }
      if (v17 == v12)
      {
LABEL_39:
        uint64_t v6 = v136;
        if (v13 == v12)
        {
LABEL_28:
          v146.n128_u64[0] = 16;
          v146.n128_u64[1] = (unint64_t)&off_2439090;
          sub_3E7814(__dst, &v146);
          v157[0] = 0;
          __n128 v158 = __dst[0];
          __n128 v159 = __dst[1];
          unint64_t v160 = __dst[2].n128_u64[0];
          memset(&__dst[1], 0, 24);
          unsigned __int32 v161 = __dst[2].n128_u32[2];
          long long v18 = v144[0];
          if (!v144[0]) {
            goto LABEL_30;
          }
LABEL_29:
          v144[1] = v18;
          operator delete(v18);
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v6 = v136;
        size_t v12 = v17;
        v144[1] = v17;
        if (v13 == v17) {
          goto LABEL_28;
        }
      }
      if ((char *)v12 - (char *)v13 != 280)
      {
        if (*(unsigned char *)(a1 + 88))
        {
          while (!*(unsigned char *)(sub_5231C(*((void *)v13 + 1)) + 2))
          {
            v13 += 35;
            if (v13 == v12)
            {
              BYTE7(v156[1]) = 19;
              strcpy((char *)v156, "CyclingRouteScoring");
              v153 = 0;
              v154 = 0;
              uint64_t v155 = 0;
              v24 = sub_374CDC((uint64_t)v10, (uint64_t)v156, (uint64_t *)&v153);
              HIBYTE(v152) = 8;
              strcpy((char *)v151, "standard");
              sub_103B758((uint64_t)&v146, v24, (uint64_t)v151, *(unsigned char *)(a1 + 88));
              sub_103B75C(__dst, &v146);
              if (SHIBYTE(v152) < 0) {
                operator delete(v151[0]);
              }
              v26 = v153;
              if (v153)
              {
                v27 = v154;
                uint64_t v28 = v153;
                if (v154 != v153)
                {
                  do
                  {
                    if (*((char *)v27 - 1) < 0) {
                      operator delete(*(v27 - 3));
                    }
                    v27 -= 3;
                  }
                  while (v27 != v26);
                  uint64_t v28 = v153;
                }
                v154 = v26;
                operator delete(v28);
              }
              if (SBYTE7(v156[1]) < 0) {
                operator delete(*(void **)&v156[0]);
              }
              sub_103B764((uint64_t)__dst, (double **)v144, v25);
              break;
            }
          }
          int v29 = *(unsigned __int8 *)(a1 + 88);
          if (*(unsigned char *)(a1 + 88))
          {
            v30 = (double *)v144[0];
            v31 = (double *)v144[1];
            double v32 = *((double *)v144[0] + 34);
            if (v29 != 2)
            {
              if (v29 == 1 && v32 <= *(double *)(a1 + 80))
              {
                v37 = (double *)((char *)v144[0] + 280);
                if ((char *)v144[1] - ((char *)v144[0] + 280) < 35841)
                {
                  v39 = 0;
LABEL_88:
                  unint64_t v38 = 0;
                }
                else
                {
                  unint64_t v38 = 0xAF8AF8AF8AF8AF8BLL * (((char *)v144[1] - (char *)v37) >> 3);
                  while (1)
                  {
                    v39 = (double *)operator new(280 * v38, &std::nothrow);
                    if (v39) {
                      break;
                    }
                    BOOL v40 = v38 > 1;
                    v38 >>= 1;
                    if (!v40) {
                      goto LABEL_88;
                    }
                  }
                }
                sub_C66F10(v37, v31, 0xAF8AF8AF8AF8AF8BLL * (v31 - v37), v39, v38);
                goto LABEL_90;
              }
LABEL_79:
              if ((char *)v144[1] - (char *)v144[0] < 35841)
              {
                v39 = 0;
LABEL_85:
                unint64_t v41 = 0;
              }
              else
              {
                unint64_t v41 = 0xAF8AF8AF8AF8AF8BLL * (((char *)v144[1] - (char *)v144[0]) >> 3);
                while (1)
                {
                  v39 = (double *)operator new(280 * v41, &std::nothrow);
                  if (v39) {
                    break;
                  }
                  BOOL v40 = v41 > 1;
                  v41 >>= 1;
                  if (!v40) {
                    goto LABEL_85;
                  }
                }
              }
              sub_C67ADC(v30, v31, 0xAF8AF8AF8AF8AF8BLL * (v31 - v30), v39, v41);
LABEL_90:
              if (v39) {
                operator delete(v39);
              }
              goto LABEL_92;
            }
            double v33 = *((double *)v144[0] + 34);
            if (v144[0] != v144[1])
            {
              std::string::size_type v34 = (double *)((char *)v144[0] + 280);
              double v33 = *((double *)v144[0] + 34);
              if ((char *)v144[0] + 280 != v144[1])
              {
                std::string::size_type v35 = (double *)v144[0];
                do
                {
                  if (v34[34] < v35[34]) {
                    std::string::size_type v35 = v34;
                  }
                  v34 += 35;
                }
                while (v34 != v144[1]);
                double v33 = v35[34];
              }
            }
            double v36 = v32 - v33;
            LODWORD(v33) = *(_DWORD *)(a1 + 56);
            if (v36 >= (double)*(unint64_t *)&v33) {
              goto LABEL_79;
            }
          }
        }
LABEL_92:
        v43 = (double *)v144[0];
        v42 = (double *)v144[1];
        v44 = (double *)v144[0];
        if (v144[0] == v144[1])
        {
          v42 = (double *)v144[0];
          uint64_t v6 = v136;
        }
        else
        {
          while (v44[4] > 0.0)
          {
            v44 += 35;
            if (v44 == v144[1])
            {
              uint64_t v6 = v136;
              goto LABEL_109;
            }
          }
          v45 = (double *)v144[0];
          uint64_t v6 = v136;
          while (v45[4] <= 0.0)
          {
            v45 += 35;
            if (v45 == v144[1]) {
              goto LABEL_109;
            }
          }
          if (v45 != v144[1])
          {
            for (uint64_t i = v45 + 35; i != v42; i += 35)
            {
              if (i[4] <= 0.0)
              {
                memcpy(v45, i, 0x118uLL);
                v45 += 35;
              }
            }
          }
          if (v45 != v42)
          {
            v42 = v45;
            v144[1] = v45;
          }
        }
LABEL_109:
        unint64_t v47 = 0xAF8AF8AF8AF8AF8BLL * (v42 - v43);
        if (v47 < 2) {
          goto LABEL_187;
        }
        if (v43 == v42 || !*(unsigned char *)(a1 + 88)) {
          goto LABEL_123;
        }
        if (*(unsigned char *)(a1 + 88) == 1) {
          long long v48 = (double *)(a1 + 72);
        }
        else {
          long long v48 = (double *)(a1 + 64);
        }
        double v49 = v43[34] + *v48;
        v50 = v43 + 35;
        while (v49 >= *(v50 - 1))
        {
          BOOL v9 = v50 == v42;
          v50 += 35;
          if (v9) {
            goto LABEL_129;
          }
        }
        long long v51 = v50 - 35;
        if (v50 - 35 != v42)
        {
          while (v50 != v42)
          {
            if (v49 >= v50[34])
            {
              memcpy(v51, v50, 0x118uLL);
              v51 += 35;
            }
            v50 += 35;
          }
        }
        if (v51 == v42)
        {
LABEL_129:
          uint64_t v6 = v136;
        }
        else
        {
          uint64_t v6 = v136;
          v144[1] = v51;
          unint64_t v47 = 0xAF8AF8AF8AF8AF8BLL * (v51 - v43);
LABEL_123:
          if (v47 < 2) {
            goto LABEL_187;
          }
        }
        memcpy(__dst, v43, 0x118uLL);
        uint64_t v52 = (uint64_t *)operator new(0x118uLL);
        *(void *)&v156[0] = v52;
        *(void *)&v156[1] = v52 + 35;
        memcpy(v52, __dst, 0x118uLL);
        *((void *)&v156[0] + 1) = v52 + 35;
        uint64_t v53 = *v52;
        v54 = (uint64_t *)sub_3AEFFC(v53);
        uint64_t v55 = *(void *)(v53 + 504);
        uint64_t v56 = *v54;
        uint64_t v57 = *(void *)sub_46CAA4(v53);
        sub_C68040((uint64_t)&v153, v10, *((void *)&v156[0] + 1) - 280);
        uint64_t v58 = v57 + v56;
        if (v55 == v58 || v153 == v154)
        {
          uint64_t v64 = v145;
          uint64_t v145 = *(void *)&v156[1];
          long long v65 = *(_OWORD *)v144;
          *(_OWORD *)v144 = v156[0];
          v156[0] = v65;
          *(void *)&v156[1] = v64;
        }
        else
        {
          sub_1091FB4((uint64_t)&v146, v10);
          v151[0] = 0;
          v151[1] = 0;
          uint64_t v152 = 0;
          uint64_t v59 = *(void *)(*((void *)&v156[0] + 1) - 272);
          memset(__dst, 0, 24);
          sub_C668B4((uint64_t)__dst, *(void *)v59, *(void *)(v59 + 8), 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(v59 + 8) - *(void *)v59) >> 5));
          *(__n128 *)((char *)&__dst[1] + 8) = *(__n128 *)(v59 + 24);
          __n128 v60 = *(__n128 *)(v59 + 40);
          __n128 v61 = *(__n128 *)(v59 + 56);
          __n128 v62 = *(__n128 *)(v59 + 72);
          *(unint64_t *)((char *)__dst[5].n128_u64 + 5) = *(void *)(v59 + 85);
          *(__n128 *)((char *)&__dst[3] + 8) = v61;
          *(__n128 *)((char *)&__dst[4] + 8) = v62;
          *(__n128 *)((char *)&__dst[2] + 8) = v60;
          if (*(char *)(v59 + 119) < 0)
          {
            sub_4200(&__dst[6], *(void **)(v59 + 96), *(void *)(v59 + 104));
          }
          else
          {
            __n128 v63 = *(__n128 *)(v59 + 96);
            __dst[7].n128_u64[0] = *(void *)(v59 + 112);
            __dst[6] = v63;
          }
          sub_1091FF4((uint64_t)&v146, (char *)__dst);
          if (__dst[7].n128_i8[7] < 0) {
            operator delete((void *)__dst[6].n128_u64[0]);
          }
          unint64_t v66 = __dst[0].n128_u64[0];
          if (__dst[0].n128_u64[0])
          {
            uint64_t v67 = __dst[0].n128_i64[1];
            v68 = (void *)__dst[0].n128_u64[0];
            if (__dst[0].n128_u64[1] != __dst[0].n128_u64[0])
            {
              do
                uint64_t v67 = sub_3AFFFC(v67 - 1056);
              while (v67 != v66);
              v68 = (void *)__dst[0].n128_u64[0];
            }
            __dst[0].n128_u64[1] = v66;
            operator delete(v68);
          }
          sub_1090EFC((uint64_t)v151, (const void **)&v153);
          v70 = v144[0];
          v69 = v144[1];
          unint64_t v71 = 0xAF8AF8AF8AF8AF8BLL * (((char *)v144[1] - (char *)v144[0]) >> 3);
          if (v71 <= 1) {
            unint64_t v72 = 1;
          }
          else {
            unint64_t v72 = 0xAF8AF8AF8AF8AF8BLL * (((char *)v144[1] - (char *)v144[0]) >> 3);
          }
          unint64_t v135 = v72;
          if (v71 >= 2)
          {
            uint64_t v133 = v55 - v58;
            unint64_t v73 = 1;
            while (1)
            {
              if (0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*((void *)&v156[0] + 1) - *(void *)&v156[0]) >> 3) >= *(unsigned int *)(a1 + 28))
              {
LABEL_164:
                v70 = v144[0];
                v69 = v144[1];
                break;
              }
              v74 = (uint64_t *)sub_C682E0(v144, v73);
              uint64_t v75 = *v74;
              v76 = (uint64_t *)sub_3AEFFC(*v74);
              uint64_t v77 = *(void *)(v75 + 504);
              uint64_t v78 = *v76;
              uint64_t v79 = *(void *)sub_46CAA4(v75) + v78;
              uint64_t v80 = v77 - v79;
              BOOL v9 = v77 == v79;
              uint64_t v6 = v136;
              if (!v9 && v153 != v154)
              {
                v81 = (char *)v74[1];
                __dst[0].n128_u64[0] = 0x7FFFFFFFFFFFFFFELL;
                uint64_t v82 = sub_109234C((uint64_t)&v146, v81, __dst);
                uint64_t v83 = v133;
                if (v133 >= v80) {
                  uint64_t v83 = v80;
                }
                if ((double)v82 / (double)v83 <= *(double *)(a1 + 32))
                {
                  sub_C68040((uint64_t)__dst, v10, (uint64_t)v74);
                  v84 = (void *)__dst[0].n128_u64[0];
                  if (__dst[0].n128_u64[0] == __dst[0].n128_u64[1])
                  {
                    if (!__dst[0].n128_u64[0]) {
                      goto LABEL_148;
                    }
                  }
                  else
                  {
                    uint64_t v85 = sub_1090FF0(v151, (uint64_t)__dst);
                    if (v85 != 0x7FFFFFFFFFFFFFFFLL && v85 >= *(unsigned int *)(a1 + 40))
                    {
                      sub_C68520((char **)v156, v74);
                      sub_1091FF4((uint64_t)&v146, *(char **)(*((void *)&v156[0] + 1) - 272));
                      sub_1090EFC((uint64_t)v151, (const void **)__dst);
                    }
                    v84 = (void *)__dst[0].n128_u64[0];
                    if (!__dst[0].n128_u64[0]) {
                      goto LABEL_148;
                    }
                  }
                  __dst[0].n128_u64[1] = (unint64_t)v84;
                  operator delete(v84);
                }
              }
LABEL_148:
              if (v135 == ++v73) {
                goto LABEL_164;
              }
            }
          }
          uint64_t v86 = v145;
          *(_OWORD *)v144 = v156[0];
          uint64_t v145 = *(void *)&v156[1];
          *(void *)&v156[0] = v70;
          *((void *)&v156[0] + 1) = v69;
          *(void *)&v156[1] = v86;
          v87 = v151[0];
          if (v151[0])
          {
            v88 = v151[1];
            v89 = v151[0];
            if (v151[1] != v151[0])
            {
              v90 = v151[1];
              do
              {
                v92 = (void *)*(v90 - 3);
                v90 -= 3;
                v91 = v92;
                if (v92)
                {
                  *(v88 - 2) = (uint64_t)v91;
                  operator delete(v91);
                }
                v88 = v90;
              }
              while (v90 != v87);
              v89 = v151[0];
            }
            v151[1] = v87;
            operator delete(v89);
          }
          if (v148)
          {
            v149 = v148;
            operator delete(v148);
          }
          unint64_t v93 = v146.n128_u64[1];
          if (v146.n128_u64[1])
          {
            unint64_t v94 = v147;
            v95 = (void *)v146.n128_u64[1];
            if (v147 != v146.n128_u64[1])
            {
              do
              {
                v96 = *(void **)(v94 - 8);
                if (v96) {
                  free(v96);
                }
                v94 -= 80;
              }
              while (v94 != v93);
              v95 = (void *)v146.n128_u64[1];
            }
            unint64_t v147 = v93;
            operator delete(v95);
          }
        }
        if (v153)
        {
          v154 = v153;
          operator delete(v153);
        }
        if (*(void *)&v156[0])
        {
          *((void *)&v156[0] + 1) = *(void *)&v156[0];
          operator delete(*(void **)&v156[0]);
        }
      }
LABEL_187:
      sub_C665A0((uint64_t *)__dst, v144);
      v157[0] = 1;
      __n128 v158 = __dst[0];
      v159.n128_u64[0] = __dst[1].n128_u64[0];
      long long v18 = v144[0];
      if (v144[0]) {
        goto LABEL_29;
      }
LABEL_30:
      v19 = (char *)v141[1];
      if (v157[0]) {
        break;
      }
      if (v141[1] >= (void *)*(void *)v142)
      {
        std::string::size_type v21 = sub_C690DC((void ***)v141, (long long **)&v138);
      }
      else
      {
        sub_C6669C((void *)v141[1], (long long **)&v138);
        std::string::size_type v21 = v19 + 24;
      }
      v141[1] = v21;
      sub_C68C60((uint64_t)v157);
      v5 += 3;
      if (v5 == v6) {
        goto LABEL_189;
      }
    }
    if (v141[1] >= (void *)*(void *)v142)
    {
      v20 = sub_C68D78((void ***)v141, (long long **)&v158);
    }
    else
    {
      sub_C6669C((void *)v141[1], (long long **)&v158);
      v20 = v19 + 24;
    }
    v141[1] = v20;
    uint64_t v22 = *((void *)v20 - 3);
    for (uint64_t j = *((void *)v20 - 2); v22 != j; v22 += 120)
      sub_45FE34(v22, v7++);
    char v137 = 0;
    sub_C68C60((uint64_t)v157);
    v5 += 3;
  }
  while (v5 != v6);
LABEL_189:
  a2 = v134;
  if (v137) {
    goto LABEL_190;
  }
  *(void *)&v142[8] = sub_72688((uint64_t)v143);
  v105 = v141[0];
  v106 = v141[1];
  if (v141[0] == v141[1])
  {
    double v110 = 0.0;
  }
  else
  {
    unint64_t v107 = (char *)v141[1] - (char *)v141[0] - 24;
    if (v107 >= 0xC0)
    {
      unint64_t v111 = v107 / 0x18 + 1;
      uint64_t v112 = v111 & 7;
      if ((v111 & 7) == 0) {
        uint64_t v112 = 8;
      }
      unint64_t v113 = v111 - v112;
      v109 = (uint64_t *)((char *)v141[0] + 24 * v113);
      int32x4_t v114 = 0uLL;
      v115 = (const double *)v141[0];
      int32x4_t v116 = 0uLL;
      do
      {
        v117 = v115;
        float64x2x3_t v162 = vld3q_f64(v117);
        v117 += 6;
        v118 = v115 + 12;
        v119 = v115 + 18;
        float64x2x3_t v163 = vld3q_f64(v118);
        float64x2x3_t v164 = vld3q_f64(v119);
        float64x2x3_t v165 = vld3q_f64(v117);
        v162.val[0] = (float64x2_t)vsubq_s64((int64x2_t)v162.val[1], (int64x2_t)v162.val[0]);
        v162.val[1] = (float64x2_t)vsubq_s64((int64x2_t)v163.val[1], (int64x2_t)v163.val[0]);
        v162.val[0] = (float64x2_t)vshrq_n_u64((uint64x2_t)v162.val[0], 3uLL);
        *(void *)&v162.val[0].f64[0] = (-286331153 * LODWORD(v162.val[0].f64[0]));
        v162.val[2] = (float64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64((int64x2_t)v164.val[1], (int64x2_t)v164.val[0]), 3uLL);
        *(void *)&v162.val[0].f64[1] = (-286331153 * LODWORD(v162.val[0].f64[1]));
        v163.val[0] = (float64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64((int64x2_t)v165.val[1], (int64x2_t)v165.val[0]), 3uLL);
        *(void *)&v162.val[2].f64[0] = (-286331153 * LODWORD(v162.val[2].f64[0]));
        v162.val[1] = (float64x2_t)vshrq_n_u64((uint64x2_t)v162.val[1], 3uLL);
        *(void *)&v162.val[2].f64[1] = (-286331153 * LODWORD(v162.val[2].f64[1]));
        *(void *)&v162.val[1].f64[0] = (-286331153 * LODWORD(v162.val[1].f64[0]));
        *(void *)&v163.val[0].f64[0] = (-286331153 * LODWORD(v163.val[0].f64[0]));
        *(void *)&v162.val[1].f64[1] = (-286331153 * LODWORD(v162.val[1].f64[1]));
        *(void *)&v163.val[0].f64[1] = (-286331153 * LODWORD(v163.val[0].f64[1]));
        int32x4_t v114 = vaddq_s32(v114, vuzp1q_s32((int32x4_t)v162.val[0], (int32x4_t)v163.val[0]));
        int32x4_t v116 = vaddq_s32(v116, vuzp1q_s32((int32x4_t)v162.val[1], (int32x4_t)v162.val[2]));
        v115 += 24;
        v113 -= 8;
      }
      while (v113);
      int v108 = vaddvq_s32(vaddq_s32(v116, v114));
    }
    else
    {
      int v108 = 0;
      v109 = (uint64_t *)v141[0];
    }
    do
    {
      uint64_t v120 = *v109;
      uint64_t v121 = v109[1];
      v109 += 3;
      v108 -= 286331153 * ((unint64_t)(v121 - v120) >> 3);
    }
    while (v109 != v141[1]);
    double v110 = (double)(v108 / (0xAAAAAAAAAAAAAAABLL * (((char *)v141[1] - (char *)v141[0]) >> 3)));
  }
  *(double *)&v142[16] = v110;
  *(unsigned char *)uint64_t v134 = 1;
  *(void *)(v134 + 8) = v105;
  *(void *)(v134 + 16) = v106;
  *(void *)(v134 + 24) = *(void *)v142;
  v141[1] = 0;
  *(void *)v142 = 0;
  v141[0] = 0;
  *(_OWORD *)(v134 + 32) = *(_OWORD *)&v142[8];
  v98 = (void **)v138;
  if (!v138) {
    goto LABEL_217;
  }
LABEL_191:
  v99 = v139;
  if (v139 == v98)
  {
    v139 = v98;
    operator delete(v98);
    v100 = (void **)v141[0];
    if (!v141[0]) {
      return;
    }
LABEL_218:
    v122 = (void **)v141[1];
    v123 = v100;
    if (v141[1] == v100)
    {
LABEL_236:
      v141[1] = v100;
      operator delete(v123);
      return;
    }
    v124 = (void **)v141[1];
    while (1)
    {
      v127 = (void **)*(v124 - 3);
      v124 -= 3;
      v126 = v127;
      if (!v127) {
        goto LABEL_222;
      }
      v128 = (void **)*(v122 - 2);
      v125 = v126;
      if (v128 != v126) {
        break;
      }
LABEL_221:
      *(v122 - 2) = v126;
      operator delete(v125);
LABEL_222:
      v122 = v124;
      if (v124 == v100)
      {
        v123 = (void **)v141[0];
        goto LABEL_236;
      }
    }
    while (1)
    {
      if (*((char *)v128 - 1) < 0)
      {
        operator delete(*(v128 - 3));
        v129 = v128 - 15;
        v130 = *(v128 - 15);
        if (v130)
        {
LABEL_232:
          uint64_t v131 = (uint64_t)*(v128 - 14);
          v132 = v130;
          if ((void *)v131 != v130)
          {
            do
              uint64_t v131 = sub_3AFFFC(v131 - 1056);
            while ((void *)v131 != v130);
            v132 = *v129;
          }
          *(v128 - 14) = v130;
          operator delete(v132);
        }
      }
      else
      {
        v129 = v128 - 15;
        v130 = *(v128 - 15);
        if (v130) {
          goto LABEL_232;
        }
      }
      v128 = v129;
      if (v129 == v126)
      {
        v125 = *v124;
        goto LABEL_221;
      }
    }
  }
  do
  {
    if (*((char *)v99 - 1) < 0)
    {
      operator delete(*(v99 - 3));
      v101 = v99 - 15;
      v102 = *(v99 - 15);
      if (!v102) {
        goto LABEL_195;
      }
    }
    else
    {
      v101 = v99 - 15;
      v102 = *(v99 - 15);
      if (!v102) {
        goto LABEL_195;
      }
    }
    uint64_t v103 = (uint64_t)*(v99 - 14);
    v104 = v102;
    if ((void *)v103 != v102)
    {
      do
        uint64_t v103 = sub_3AFFFC(v103 - 1056);
      while ((void *)v103 != v102);
      v104 = *v101;
    }
    *(v99 - 14) = v102;
    operator delete(v104);
LABEL_195:
    v99 = v101;
  }
  while (v101 != v98);
  v139 = v98;
  operator delete(v138);
  v100 = (void **)v141[0];
  if (v141[0]) {
    goto LABEL_218;
  }
}

void sub_C663AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (STACK[0x6C0]) {
    sub_20AED28();
  }
  sub_36094((void **)(v32 - 256));
  sub_C68678(&a32);
  std::string::size_type v34 = *(void **)(v32 - 232);
  if (v34)
  {
    *(void *)(v32 - 224) = v34;
    operator delete(v34);
  }
  std::string::size_type v35 = *(void **)(v32 - 208);
  if (v35)
  {
    *(void *)(v32 - 200) = v35;
    operator delete(v35);
  }
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
    sub_5AB1B0(&a18);
    sub_C66564(&a21);
    _Unwind_Resume(a1);
  }
  sub_5AB1B0(&a18);
  sub_C66564(&a21);
  _Unwind_Resume(a1);
}

void ***sub_C66564(void ***a1)
{
  if (*a1)
  {
    sub_C686F8((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

uint64_t *sub_C665A0(uint64_t *result, void *a2)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  uint64_t v2 = a2[1];
  uint64_t v3 = v2 - *a2;
  if (v2 != *a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = sub_C66C34(result, (uint64_t *)(*a2 + 8));
    v5[1] = (uint64_t)v6;
    result = (uint64_t *)sub_45FE2C((uint64_t)(v6 - 120), 0);
    if (v3 != 280)
    {
      uint64_t v7 = v3 / 280 - 1;
      uint64_t v8 = 288;
      do
      {
        BOOL v9 = (uint64_t *)(*a2 + v8);
        unint64_t v10 = v5[1];
        if (v10 >= v5[2])
        {
          unint64_t v11 = sub_C66C34(v5, v9);
        }
        else
        {
          sub_C66B34((uint64_t)v5, v9);
          unint64_t v11 = (char *)(v10 + 120);
        }
        v5[1] = (uint64_t)v11;
        result = (uint64_t *)sub_45FE2C((uint64_t)(v11 - 120), 2);
        v8 += 280;
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

void sub_C66674(_Unwind_Exception *a1)
{
  sub_5AB1B0(v1);
  _Unwind_Resume(a1);
}

void sub_C66688(_Unwind_Exception *a1)
{
  sub_5AB1B0(v1);
  _Unwind_Resume(a1);
}

void *sub_C6669C(void *a1, long long **a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  int v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xEEEEEEEEEEEEEEEFLL * (v6 >> 3);
    if (v7 >= 0x222222222222223) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[120 * v7];
    a1[1] = sub_C66774(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_C66748(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20AED84();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C66774(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v14 = a4;
  if (a2 != a3)
  {
    int64_t v6 = a2 + 6;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      uint64_t v8 = v6 - 6;
      sub_C668B4(v4, *((void *)v6 - 12), *((void *)v6 - 11), 0xF83E0F83E0F83E1 * ((uint64_t)(*((void *)v6 - 11) - *((void *)v6 - 12)) >> 5));
      *(_OWORD *)(v4 + 24) = *(long long *)((char *)v6 - 72);
      long long v9 = *(long long *)((char *)v6 - 56);
      long long v10 = *(long long *)((char *)v6 - 40);
      long long v11 = *(long long *)((char *)v6 - 24);
      *(void *)(v4 + 85) = *(void *)((char *)v6 - 11);
      *(_OWORD *)(v4 + 72) = v11;
      *(_OWORD *)(v4 + 56) = v10;
      *(_OWORD *)(v4 + 40) = v9;
      size_t v12 = (unsigned char *)(v4 + 96);
      if (*((char *)v6 + 23) < 0)
      {
        sub_4200(v12, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        *(void *)(v4 + 112) = *((void *)v6 + 2);
        *(_OWORD *)size_t v12 = v7;
      }
      uint64_t v4 = v14 + 120;
      v14 += 120;
      int64_t v6 = (long long *)((char *)v6 + 120);
    }
    while ((long long *)((char *)v8 + 120) != a3);
  }
  return v4;
}

void sub_C6687C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*v9)
  {
    sub_20AEE38((uint64_t)v9);
    sub_97B074((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_97B074((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_C668B4(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0x3E0F83E0F83E10) {
      sub_2E00();
    }
    result = (uint64_t)operator new(1056 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 1056 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        result = sub_7A120C(v8 + v9, a2 + v9);
        v9 += 1056;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_C66978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_C6698C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 1056)
    sub_3AFFFC(v10 - 1056 + v11);
  *(void *)(v9 + 8) = v10;
  sub_3B1794(&a9);
  _Unwind_Resume(a1);
}

void *sub_C669BC(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3 != a2)
  {
    unint64_t v4 = 0xEEEEEEEEEEEEEEEFLL * (a3 - a2);
    if (v4 >= 0xEA0EA0EA0EA0EBLL) {
      sub_2E00();
    }
    int64_t v6 = a2;
    long long v7 = (char *)operator new(0x5555555555555568 * (a3 - a2));
    uint64_t v8 = v7;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[280 * v4];
    if (v6 != a3)
    {
      uint64_t v9 = v7;
      do
      {
        *(void *)uint64_t v9 = sub_45FB28(v6, 0);
        *((void *)v9 + 1) = v6;
        *((_OWORD *)v9 + 1) = 0u;
        *((_OWORD *)v9 + 2) = 0u;
        *((_OWORD *)v9 + 3) = 0u;
        *((_OWORD *)v9 + 4) = 0u;
        *((_OWORD *)v9 + 5) = 0u;
        *((_OWORD *)v9 + 6) = 0u;
        *((_OWORD *)v9 + 7) = 0u;
        *((_OWORD *)v9 + 8) = 0u;
        *((_OWORD *)v9 + 9) = 0u;
        *((_OWORD *)v9 + 10) = 0u;
        *((_OWORD *)v9 + 11) = 0u;
        *((_OWORD *)v9 + 12) = 0u;
        *((_OWORD *)v9 + 13) = 0u;
        *((_OWORD *)v9 + 14) = 0u;
        v6 += 15;
        *((_OWORD *)v9 + 15) = 0u;
        *((_OWORD *)v9 + 16) = 0u;
        *((void *)v9 + 34) = 0;
        v9 += 280;
      }
      while (v6 != a3);
      uint64_t v8 = v9;
    }
    a1[1] = v8;
  }
  return a1;
}

void sub_C66AB8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C66AE0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(void *)(a1 + 136) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  return a1;
}

unsigned char *sub_C66B34(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *a2;
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  sub_C668B4(v3, *(void *)v4, *(void *)(v4 + 8), 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 5));
  *(_OWORD *)(v3 + 24) = *(_OWORD *)(v4 + 24);
  long long v5 = *(_OWORD *)(v4 + 40);
  long long v6 = *(_OWORD *)(v4 + 56);
  long long v7 = *(_OWORD *)(v4 + 72);
  *(void *)(v3 + 85) = *(void *)(v4 + 85);
  *(_OWORD *)(v3 + 72) = v7;
  *(_OWORD *)(v3 + 56) = v6;
  *(_OWORD *)(v3 + 40) = v5;
  result = (unsigned char *)(v3 + 96);
  if (*(char *)(v4 + 119) < 0)
  {
    result = sub_4200(result, *(void **)(v4 + 96), *(void *)(v4 + 104));
  }
  else
  {
    long long v9 = *(_OWORD *)(v4 + 96);
    *(void *)(v3 + 112) = *(void *)(v4 + 112);
    *(_OWORD *)result = v9;
  }
  *(void *)(a1 + 8) = v3 + 120;
  return result;
}

void sub_C66C04(_Unwind_Exception *exception_object)
{
  if (*v2)
  {
    sub_20A9E18((uint64_t)v2);
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

char *sub_C66C34(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x222222222222222) {
    sub_2E00();
  }
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3);
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 3) >= 0x111111111111111) {
    unint64_t v6 = 0x222222222222222;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x222222222222222) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(120 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v29 = (uint64_t)&v7[120 * v3];
  v31 = &v7[120 * v6];
  uint64_t v8 = *a2;
  *(void *)(v29 + 8) = 0;
  *(void *)(v29 + 16) = 0;
  *(void *)uint64_t v29 = 0;
  sub_C668B4(v29, *(void *)v8, *(void *)(v8 + 8), 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 5));
  *(_OWORD *)(v29 + 24) = *(_OWORD *)(v8 + 24);
  long long v9 = *(_OWORD *)(v8 + 40);
  long long v10 = *(_OWORD *)(v8 + 56);
  long long v11 = *(_OWORD *)(v8 + 72);
  *(void *)(v29 + 85) = *(void *)(v8 + 85);
  *(_OWORD *)(v29 + 72) = v11;
  *(_OWORD *)(v29 + 56) = v10;
  *(_OWORD *)(v29 + 40) = v9;
  size_t v12 = (unsigned char *)(v29 + 96);
  if (*(char *)(v8 + 119) < 0)
  {
    sub_4200(v12, *(void **)(v8 + 96), *(void *)(v8 + 104));
  }
  else
  {
    long long v13 = *(_OWORD *)(v8 + 96);
    *(void *)(v29 + 112) = *(void *)(v8 + 112);
    *(_OWORD *)size_t v12 = v13;
  }
  uint64_t v14 = &v7[120 * v3];
  v30 = v14;
  uint64_t v15 = v14 + 120;
  double v16 = (void **)*a1;
  v17 = (void **)a1[1];
  if (v17 == (void **)*a1)
  {
    *a1 = v29;
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v31;
    goto LABEL_29;
  }
  do
  {
    *((void *)v14 - 15) = 0;
    *((void *)v14 - 14) = 0;
    v14 -= 120;
    *((void *)v14 + 2) = 0;
    long long v18 = *(_OWORD *)(v17 - 15);
    v17 -= 15;
    *(_OWORD *)uint64_t v14 = v18;
    *((void *)v14 + 2) = v17[2];
    v17[1] = 0;
    v17[2] = 0;
    double *v17 = 0;
    long long v19 = *(_OWORD *)(v17 + 7);
    long long v20 = *(_OWORD *)(v17 + 9);
    uint64_t v21 = *(uint64_t *)((char *)v17 + 85);
    *(_OWORD *)(v14 + 40) = *(_OWORD *)(v17 + 5);
    *(void *)(v14 + 85) = v21;
    *(_OWORD *)(v14 + 72) = v20;
    *(_OWORD *)(v14 + 56) = v19;
    *(_OWORD *)(v14 + 24) = *(_OWORD *)(v17 + 3);
    long long v22 = *((_OWORD *)v17 + 6);
    *((void *)v14 + 14) = v17[14];
    *((_OWORD *)v14 + 6) = v22;
    v17[13] = 0;
    v17[14] = 0;
    v17[12] = 0;
  }
  while (v17 != v16);
  v23 = (void **)*a1;
  v17 = (void **)a1[1];
  *a1 = (uint64_t)v14;
  a1[1] = (uint64_t)v15;
  a1[2] = (uint64_t)v31;
  if (v17 == v23) {
    goto LABEL_29;
  }
  do
  {
    if (*((char *)v17 - 1) < 0)
    {
      operator delete(*(v17 - 3));
      v24 = v17 - 15;
      double v25 = *(v17 - 15);
      if (!v25) {
        goto LABEL_20;
      }
    }
    else
    {
      v24 = v17 - 15;
      double v25 = *(v17 - 15);
      if (!v25) {
        goto LABEL_20;
      }
    }
    uint64_t v26 = (uint64_t)*(v17 - 14);
    v27 = v25;
    if ((void *)v26 != v25)
    {
      do
        uint64_t v26 = sub_3AFFFC(v26 - 1056);
      while ((void *)v26 != v25);
      v27 = *v24;
    }
    *(v17 - 14) = v25;
    operator delete(v27);
LABEL_20:
    v17 = v24;
  }
  while (v24 != v23);
  v17 = v23;
LABEL_29:
  if (v17) {
    operator delete(v17);
  }
  return v30 + 120;
}

void sub_C66ED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*v2)
  {
    sub_20A9E18((uint64_t)v2);
    sub_5AC2CC((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_5AC2CC((uint64_t)va);
  _Unwind_Resume(a1);
}

double *sub_C66F10(double *result, double *a2, unint64_t a3, double *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    unint64_t v6 = result;
    if (a3 == 2)
    {
      if (*(a2 - 1) < result[34])
      {
        long long v7 = a2 - 35;
        memcpy(__dst, result, sizeof(__dst));
        memcpy(v6, v7, 0x118uLL);
        return (double *)memcpy(v7, __dst, 0x118uLL);
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      long long v18 = a4;
      unint64_t v19 = a3 >> 1;
      long long v20 = &result[35 * (a3 >> 1)];
      unint64_t v21 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_C671E0(result, v20, v21, a4);
        long long v22 = &v18[35 * v19];
        result = sub_C671E0(&v6[35 * (a3 >> 1)], a2, a3 - (a3 >> 1), v22);
        v23 = &v18[35 * a3];
        v24 = v22;
        while (v24 != v23)
        {
          if (v24[34] >= v18[34])
          {
            result = (double *)memcpy(v6, v18, 0x118uLL);
            v18 += 35;
            v6 += 35;
            if (v18 == v22) {
              goto LABEL_26;
            }
          }
          else
          {
            result = (double *)memcpy(v6, v24, 0x118uLL);
            v24 += 35;
            v6 += 35;
            if (v18 == v22)
            {
LABEL_26:
              if (v24 != v23)
              {
                uint64_t v25 = 0;
                do
                {
                  result = (double *)memcpy(&v6[v25], &v24[v25], 0x118uLL);
                  v25 += 35;
                }
                while (&v24[v25] != v23);
              }
              return result;
            }
          }
        }
        if (v18 != v22)
        {
          uint64_t v26 = 0;
          do
          {
            result = (double *)memcpy(&v6[v26], &v18[v26], 0x118uLL);
            v26 += 35;
          }
          while (&v18[v26] != v22);
        }
      }
      else
      {
        sub_C66F10(result, v20, v21, a4, a5);
        sub_C66F10(&v6[35 * (a3 >> 1)], a2, a3 - (a3 >> 1), v18, a5);
        return sub_C67474(v6, &v6[35 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v18, a5);
      }
    }
    else if (result != a2)
    {
      long long v9 = result + 35;
      if (result + 35 != a2)
      {
        uint64_t v10 = 0;
        long long v11 = result;
        do
        {
          double v13 = v11[69];
          double v14 = v11[34];
          long long v11 = v9;
          if (v13 < v14)
          {
            memcpy(__dst, v9, 0x110uLL);
            uint64_t v15 = v10;
            do
            {
              memcpy((char *)v6 + v15 + 280, (char *)v6 + v15, 0x118uLL);
              if (!v15)
              {
                size_t v12 = v6;
                goto LABEL_10;
              }
              double v16 = *(double *)((char *)v6 + v15 - 8);
              v15 -= 280;
            }
            while (v13 < v16);
            size_t v12 = (double *)((char *)v6 + v15 + 280);
LABEL_10:
            result = (double *)memcpy(v12, __dst, 0x110uLL);
            v12[34] = v13;
          }
          long long v9 = v11 + 35;
          v10 += 280;
        }
        while (v11 + 35 != a2);
      }
    }
  }
  return result;
}

double *sub_C671E0(double *__src, double *a2, unint64_t a3, double *__dst)
{
  if (!a3) {
    return __src;
  }
  unint64_t v4 = __dst;
  long long v7 = __src;
  if (a3 == 2)
  {
    long long v9 = a2 - 35;
    if (*(a2 - 1) >= __src[34])
    {
      memcpy(__dst, __src, 0x118uLL);
      uint64_t v8 = v4 + 35;
      uint64_t v10 = v9;
      goto LABEL_20;
    }
    memcpy(__dst, v9, 0x118uLL);
    uint64_t v8 = v4 + 35;
LABEL_7:
    uint64_t v10 = v7;
LABEL_20:
    return (double *)memcpy(v8, v10, 0x118uLL);
  }
  if (a3 == 1)
  {
    uint64_t v8 = __dst;
    goto LABEL_7;
  }
  if ((uint64_t)a3 > 8)
  {
    unint64_t v18 = a3 >> 1;
    uint64_t v19 = 35 * (a3 >> 1);
    long long v20 = &__src[v19];
    sub_C66F10(__src, &__src[v19], a3 >> 1, __dst, a3 >> 1);
    __src = (double *)sub_C66F10(&v7[v19], a2, a3 - v18, &v4[v19], a3 - v18);
    unint64_t v21 = &v7[v19];
    while (v21 != a2)
    {
      if (v21[34] >= v7[34])
      {
        __src = (double *)memcpy(v4, v7, 0x118uLL);
        v7 += 35;
        v4 += 35;
        if (v7 == v20) {
          goto LABEL_28;
        }
      }
      else
      {
        __src = (double *)memcpy(v4, v21, 0x118uLL);
        v21 += 35;
        v4 += 35;
        if (v7 == v20)
        {
LABEL_28:
          if (v21 != a2)
          {
            uint64_t v22 = 0;
            do
            {
              __src = (double *)memcpy(&v4[v22], &v21[v22], 0x118uLL);
              v22 += 35;
            }
            while (&v21[v22] != a2);
          }
          return __src;
        }
      }
    }
    if (v7 != v20)
    {
      uint64_t v23 = 0;
      do
      {
        __src = (double *)memcpy(&v4[v23], &v7[v23], 0x118uLL);
        v23 += 35;
      }
      while (&v7[v23] != v20);
    }
  }
  else if (__src != a2)
  {
    __src = (double *)memcpy(__dst, __src, 0x118uLL);
    long long v11 = v7 + 35;
    if (v7 + 35 != a2)
    {
      uint64_t v12 = 0;
      double v13 = v4;
      do
      {
        double v14 = v7;
        uint64_t v15 = v13;
        long long v7 = v11;
        v13 += 35;
        double v16 = v13;
        if (v14[69] < v15[34])
        {
          memcpy(v13, v15, 0x118uLL);
          double v16 = v4;
          if (v15 != v4)
          {
            uint64_t v17 = v12;
            while (1)
            {
              double v16 = (double *)((char *)v4 + v17);
              if (v14[69] >= *(double *)((char *)v4 + v17 - 8)) {
                break;
              }
              v17 -= 280;
              memcpy(v16, (char *)v4 + v17, 0x118uLL);
              if (!v17)
              {
                double v16 = v4;
                break;
              }
            }
          }
        }
        __src = (double *)memcpy(v16, v7, 0x118uLL);
        long long v11 = v7 + 35;
        v12 += 280;
      }
      while (v7 + 35 != a2);
    }
  }
  return __src;
}

double *sub_C67474(double *result, double *a2, double *a3, uint64_t a4, uint64_t a5, double *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v8 = a5;
    uint64_t v12 = result;
    while (v8 > a7 && a4 > a7)
    {
      if (!a4) {
        return result;
      }
      unint64_t v13 = 0;
      uint64_t v14 = -a4;
      while (1)
      {
        uint64_t v15 = &v12[v13 / 8];
        if (a2[34] < v12[v13 / 8 + 34]) {
          break;
        }
        v13 += 280;
        if (__CFADD__(v14++, 1)) {
          return result;
        }
      }
      uint64_t v17 = -v14;
      v54 = a6;
      uint64_t v55 = a3;
      uint64_t v56 = a7;
      if (-v14 >= v8)
      {
        if (v14 == -1)
        {
          long long v51 = &v12[v13 / 8];
          memcpy(__dst, v51, sizeof(__dst));
          memcpy(v51, a2, 0x118uLL);
          return (double *)memcpy(a2, __dst, 0x118uLL);
        }
        if (v14 > 0) {
          uint64_t v17 = 1 - v14;
        }
        uint64_t v27 = v17 >> 1;
        unint64_t v21 = &v12[35 * (v17 >> 1) + v13 / 8];
        uint64_t v28 = a3;
        long long v20 = a2;
        if (a2 != v28)
        {
          unint64_t v29 = 0xAF8AF8AF8AF8AF8BLL * (v55 - a2);
          long long v20 = a2;
          do
          {
            unint64_t v30 = v29 >> 1;
            v31 = &v20[35 * (v29 >> 1)];
            double v32 = v31[34];
            double v33 = v31 + 35;
            v29 += ~(v29 >> 1);
            if (v32 < v21[34]) {
              long long v20 = v33;
            }
            else {
              unint64_t v29 = v30;
            }
          }
          while (v29);
        }
        uint64_t v19 = 0xAF8AF8AF8AF8AF8BLL * (v20 - a2);
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v18 = v8;
        }
        else {
          uint64_t v18 = v8 + 1;
        }
        uint64_t v19 = v18 >> 1;
        long long v20 = &a2[35 * (v18 >> 1)];
        unint64_t v21 = a2;
        if ((char *)a2 - (char *)v12 != v13)
        {
          unint64_t v22 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)((char *)a2 - (char *)v12 - v13) >> 3);
          unint64_t v21 = &v12[v13 / 8];
          do
          {
            unint64_t v23 = v22 >> 1;
            v24 = &v21[35 * (v22 >> 1)];
            double v25 = v24[34];
            uint64_t v26 = v24 + 35;
            v22 += ~(v22 >> 1);
            if (v25 > v20[34]) {
              unint64_t v22 = v23;
            }
            else {
              unint64_t v21 = v26;
            }
          }
          while (v22);
        }
        uint64_t v27 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)((char *)v21 - (char *)v12 - v13) >> 3);
      }
      a4 = -v27 - v14;
      std::string::size_type v34 = (char *)a2;
      uint64_t v35 = v27;
      double v36 = sub_C678A8((char *)v21, v34, (char *)v20);
      uint64_t v37 = v35;
      unint64_t v38 = v36;
      if (v37 + v19 >= v8 - (v37 + v19) - v14)
      {
        uint64_t v40 = v37;
        result = (double *)sub_C67474(v36, v20, v55, a4, v8 - v19, v54, v56);
        unint64_t v41 = v21;
        a6 = v54;
        a4 = v40;
        a3 = (double *)v38;
        a2 = v41;
      }
      else
      {
        v39 = v21;
        a6 = v54;
        result = (double *)sub_C67474(&v12[v13 / 8], v39, v36, v37, v19, v54, v56);
        uint64_t v15 = (double *)v38;
        a2 = v20;
        a3 = v55;
        uint64_t v19 = v8 - v19;
      }
      uint64_t v8 = v19;
      uint64_t v12 = v15;
      a7 = v56;
      if (!v19) {
        return result;
      }
    }
    if (a4 <= v8)
    {
      if (v12 != a2)
      {
        uint64_t v48 = 0;
        do
        {
          result = (double *)memcpy(&a6[v48], &v12[v48], 0x118uLL);
          v48 += 35;
        }
        while (&v12[v48] != a2);
        if (v48 * 8)
        {
          double v49 = &a6[v48];
          v50 = a6;
          while (a2 != a3)
          {
            if (a2[34] >= v50[34])
            {
              result = (double *)memcpy(v12, v50, 0x118uLL);
              v50 += 35;
              v12 += 35;
              if (v49 == v50) {
                return result;
              }
            }
            else
            {
              result = (double *)memcpy(v12, a2, 0x118uLL);
              a2 += 35;
              v12 += 35;
              if (v49 == v50) {
                return result;
              }
            }
          }
          return (double *)memmove(v12, v50, (char *)a6 - (char *)v50 + v48 * 8);
        }
      }
    }
    else if (a3 != a2)
    {
      uint64_t v42 = 0;
      do
      {
        result = (double *)memcpy(&a6[v42], &a2[v42], 0x118uLL);
        v42 += 35;
      }
      while (&a2[v42] != a3);
      if (v42 * 8)
      {
        v43 = &a6[v42];
        v44 = a3 - 35;
        while (a2 != v12)
        {
          double v45 = *(a2 - 1);
          double v46 = *(v43 - 1);
          if (v46 >= v45) {
            unint64_t v47 = v43 - 35;
          }
          else {
            unint64_t v47 = a2 - 35;
          }
          if (v46 >= v45) {
            v43 -= 35;
          }
          else {
            a2 -= 35;
          }
          result = (double *)memcpy(v44, v47, 0x118uLL);
          v44 -= 35;
          if (v43 == a6) {
            return result;
          }
        }
        uint64_t v52 = 0;
        do
        {
          uint64_t v53 = (char *)&v44[v52];
          v52 -= 35;
          result = (double *)memcpy(v53, &v43[v52], 0x118uLL);
        }
        while (&v43[v52] != a6);
      }
    }
  }
  return result;
}

char *sub_C678A8(char *__src, char *a2, char *a3)
{
  unint64_t v4 = a3;
  if (__src == a2) {
    return v4;
  }
  unint64_t v6 = __src;
  if (a2 == a3) {
    return __src;
  }
  if (__src + 280 == a2)
  {
    memcpy(__dst, __src, sizeof(__dst));
    memmove(v6, a2, a3 - a2);
    unint64_t v4 = &v6[a3 - a2];
    long long v11 = v4;
LABEL_15:
    memcpy(v11, __dst, 0x118uLL);
    return v4;
  }
  if (a2 + 280 == a3)
  {
    uint64_t v12 = a3 - 280;
    memcpy(__dst, a3 - 280, sizeof(__dst));
    unint64_t v4 = v6 + 280;
    if (v12 != v6) {
      memmove(&a3[-(v12 - v6)], v6, v12 - v6);
    }
    long long v11 = v6;
    goto LABEL_15;
  }
  unint64_t v7 = 0xAF8AF8AF8AF8AF8BLL * ((a2 - __src) >> 3);
  uint64_t v8 = (a3 - a2) >> 3;
  unint64_t v9 = 0xAF8AF8AF8AF8AF8BLL * v8;
  if (v7 == 0xAF8AF8AF8AF8AF8BLL * v8)
  {
    uint64_t v10 = a2;
    do
    {
      memcpy(__dst, v6, sizeof(__dst));
      memcpy(v6, v10, 0x118uLL);
      memcpy(v10, __dst, 0x118uLL);
      v6 += 280;
      if (v6 == a2) {
        break;
      }
      v10 += 280;
    }
    while (v10 != a3);
    return a2;
  }
  else
  {
    uint64_t v13 = 0xAF8AF8AF8AF8AF8BLL * v8;
    unint64_t v14 = 0xAF8AF8AF8AF8AF8BLL * ((a2 - __src) >> 3);
    do
    {
      uint64_t v15 = v14;
      unint64_t v14 = v13;
      uint64_t v13 = v15 % v13;
    }
    while (v13);
    if (v14)
    {
      double v16 = &__src[280 * v14];
      do
      {
        v16 -= 280;
        memcpy(__dst, v16, sizeof(__dst));
        uint64_t v17 = &v16[280 * v7];
        uint64_t v18 = v16;
        do
        {
          uint64_t v19 = v17;
          memcpy(v18, v17, 0x118uLL);
          unint64_t v20 = 0xAF8AF8AF8AF8AF8BLL * ((a3 - v19) >> 3);
          BOOL v21 = __OFSUB__(v7, v20);
          uint64_t v23 = v7 - v20;
          char v22 = (v23 < 0) ^ v21;
          uint64_t v17 = &v6[280 * v23];
          if (v22) {
            uint64_t v17 = &v19[280 * v7];
          }
          uint64_t v18 = v19;
        }
        while (v17 != v16);
        memcpy(v19, __dst, 0x118uLL);
      }
      while (v16 != v6);
    }
    return &v6[280 * v9];
  }
}

double *sub_C67ADC(double *result, double *a2, unint64_t a3, double *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    unint64_t v6 = result;
    if (a3 == 2)
    {
      if (*(a2 - 1) < result[34])
      {
        unint64_t v7 = a2 - 35;
        memcpy(__dst, result, sizeof(__dst));
        memcpy(v6, v7, 0x118uLL);
        return (double *)memcpy(v7, __dst, 0x118uLL);
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      uint64_t v18 = a4;
      unint64_t v19 = a3 >> 1;
      unint64_t v20 = &result[35 * (a3 >> 1)];
      unint64_t v21 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_C67DAC(result, v20, v21, a4);
        char v22 = &v18[35 * v19];
        result = sub_C67DAC(&v6[35 * (a3 >> 1)], a2, a3 - (a3 >> 1), v22);
        uint64_t v23 = &v18[35 * a3];
        v24 = v22;
        while (v24 != v23)
        {
          if (v24[34] >= v18[34])
          {
            result = (double *)memcpy(v6, v18, 0x118uLL);
            v18 += 35;
            v6 += 35;
            if (v18 == v22) {
              goto LABEL_26;
            }
          }
          else
          {
            result = (double *)memcpy(v6, v24, 0x118uLL);
            v24 += 35;
            v6 += 35;
            if (v18 == v22)
            {
LABEL_26:
              if (v24 != v23)
              {
                uint64_t v25 = 0;
                do
                {
                  result = (double *)memcpy(&v6[v25], &v24[v25], 0x118uLL);
                  v25 += 35;
                }
                while (&v24[v25] != v23);
              }
              return result;
            }
          }
        }
        if (v18 != v22)
        {
          uint64_t v26 = 0;
          do
          {
            result = (double *)memcpy(&v6[v26], &v18[v26], 0x118uLL);
            v26 += 35;
          }
          while (&v18[v26] != v22);
        }
      }
      else
      {
        sub_C67ADC(result, v20, v21, a4, a5);
        sub_C67ADC(&v6[35 * (a3 >> 1)], a2, a3 - (a3 >> 1), v18, a5);
        return sub_C67474(v6, &v6[35 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v18, a5);
      }
    }
    else if (result != a2)
    {
      unint64_t v9 = result + 35;
      if (result + 35 != a2)
      {
        uint64_t v10 = 0;
        long long v11 = result;
        do
        {
          double v13 = v11[69];
          double v14 = v11[34];
          long long v11 = v9;
          if (v13 < v14)
          {
            memcpy(__dst, v9, 0x110uLL);
            uint64_t v15 = v10;
            do
            {
              memcpy((char *)v6 + v15 + 280, (char *)v6 + v15, 0x118uLL);
              if (!v15)
              {
                uint64_t v12 = v6;
                goto LABEL_10;
              }
              double v16 = *(double *)((char *)v6 + v15 - 8);
              v15 -= 280;
            }
            while (v13 < v16);
            uint64_t v12 = (double *)((char *)v6 + v15 + 280);
LABEL_10:
            result = (double *)memcpy(v12, __dst, 0x110uLL);
            v12[34] = v13;
          }
          unint64_t v9 = v11 + 35;
          v10 += 280;
        }
        while (v11 + 35 != a2);
      }
    }
  }
  return result;
}

double *sub_C67DAC(double *__src, double *a2, unint64_t a3, double *__dst)
{
  if (!a3) {
    return __src;
  }
  unint64_t v4 = __dst;
  unint64_t v7 = __src;
  if (a3 == 2)
  {
    unint64_t v9 = a2 - 35;
    if (*(a2 - 1) >= __src[34])
    {
      memcpy(__dst, __src, 0x118uLL);
      uint64_t v8 = v4 + 35;
      uint64_t v10 = v9;
      goto LABEL_20;
    }
    memcpy(__dst, v9, 0x118uLL);
    uint64_t v8 = v4 + 35;
LABEL_7:
    uint64_t v10 = v7;
LABEL_20:
    return (double *)memcpy(v8, v10, 0x118uLL);
  }
  if (a3 == 1)
  {
    uint64_t v8 = __dst;
    goto LABEL_7;
  }
  if ((uint64_t)a3 > 8)
  {
    unint64_t v18 = a3 >> 1;
    uint64_t v19 = 35 * (a3 >> 1);
    unint64_t v20 = &__src[v19];
    sub_C67ADC(__src, &__src[v19], a3 >> 1, __dst, a3 >> 1);
    __src = (double *)sub_C67ADC(&v7[v19], a2, a3 - v18, &v4[v19], a3 - v18);
    unint64_t v21 = &v7[v19];
    while (v21 != a2)
    {
      if (v21[34] >= v7[34])
      {
        __src = (double *)memcpy(v4, v7, 0x118uLL);
        v7 += 35;
        v4 += 35;
        if (v7 == v20) {
          goto LABEL_28;
        }
      }
      else
      {
        __src = (double *)memcpy(v4, v21, 0x118uLL);
        v21 += 35;
        v4 += 35;
        if (v7 == v20)
        {
LABEL_28:
          if (v21 != a2)
          {
            uint64_t v22 = 0;
            do
            {
              __src = (double *)memcpy(&v4[v22], &v21[v22], 0x118uLL);
              v22 += 35;
            }
            while (&v21[v22] != a2);
          }
          return __src;
        }
      }
    }
    if (v7 != v20)
    {
      uint64_t v23 = 0;
      do
      {
        __src = (double *)memcpy(&v4[v23], &v7[v23], 0x118uLL);
        v23 += 35;
      }
      while (&v7[v23] != v20);
    }
  }
  else if (__src != a2)
  {
    __src = (double *)memcpy(__dst, __src, 0x118uLL);
    long long v11 = v7 + 35;
    if (v7 + 35 != a2)
    {
      uint64_t v12 = 0;
      double v13 = v4;
      do
      {
        double v14 = v7;
        uint64_t v15 = v13;
        unint64_t v7 = v11;
        v13 += 35;
        double v16 = v13;
        if (v14[69] < v15[34])
        {
          memcpy(v13, v15, 0x118uLL);
          double v16 = v4;
          if (v15 != v4)
          {
            uint64_t v17 = v12;
            while (1)
            {
              double v16 = (double *)((char *)v4 + v17);
              if (v14[69] >= *(double *)((char *)v4 + v17 - 8)) {
                break;
              }
              v17 -= 280;
              memcpy(v16, (char *)v4 + v17, 0x118uLL);
              if (!v17)
              {
                double v16 = v4;
                break;
              }
            }
          }
        }
        __src = (double *)memcpy(v16, v7, 0x118uLL);
        long long v11 = v7 + 35;
        v12 += 280;
      }
      while (v7 + 35 != a2);
    }
  }
  return __src;
}

void sub_C68040(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = sub_3750CC(a2);
  sub_460358(*(char **)(a3 + 8), (uint64_t)&v40);
  sub_3BD6C8((uint64_t)&v33, &v40);
  sub_3BD6C8((uint64_t)&v26, &v45);
  while (1)
  {
    if (v38 == v39 || __p == v32)
    {
      if ((v38 == v39) == (__p == v32)) {
        break;
      }
      goto LABEL_21;
    }
    unint64_t v7 = v33;
    if (v35 != v28) {
      goto LABEL_22;
    }
    if (v33)
    {
      unint64_t v8 = v34;
      int v9 = v8 < sub_46C760(v33);
      uint64_t v10 = v26;
      if (!v26) {
        goto LABEL_19;
      }
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = v26;
      if (!v26)
      {
LABEL_19:
        int v13 = 0;
        goto LABEL_20;
      }
    }
    unint64_t v11 = v27;
    unint64_t v12 = sub_46C760(v10);
    int v13 = v11 < v12;
    if (v11 < v12) {
      int v14 = v9;
    }
    else {
      int v14 = 0;
    }
    if (v14 == 1)
    {
      uint64_t v15 = sub_46C8EC(v33, v34);
      if (v15 == sub_46C8EC(v26, v27)) {
        break;
      }
      goto LABEL_21;
    }
LABEL_20:
    if (v9 == v13) {
      break;
    }
LABEL_21:
    unint64_t v7 = v33;
LABEL_22:
    uint64_t v16 = sub_46C8EC(v7, v34);
    sub_2954EC(v5, *(void *)(v16 + 32), (uint64_t)v50);
    uint64_t v17 = v51;
    if (v51 != v52)
    {
      unint64_t v18 = sub_2E40A4((uint64_t)v50);
      unsigned int v19 = v18;
      unint64_t v20 = v18 & 0xFFFFFFFF00000000;
      uint64_t v17 = v51;
      uint64_t v21 = v19;
      int v23 = v22;
      if (!v51) {
        goto LABEL_25;
      }
LABEL_24:
      uint64_t v52 = v17;
      operator delete(v17);
      goto LABEL_25;
    }
    unint64_t v20 = 0xFFFFFFFF00000000;
    uint64_t v21 = 0xFFFFFFFFLL;
    int v23 = 0x7FFFFFFF;
    if (v51) {
      goto LABEL_24;
    }
LABEL_25:
    unint64_t v24 = v20 | v21;
    int v25 = v23;
    sub_30C0C((char **)a1, (uint64_t *)&v24);
    sub_39EBB4(&v33);
  }
  if (__p)
  {
    double v32 = __p;
    operator delete(__p);
  }
  if (v29)
  {
    unint64_t v30 = v29;
    operator delete(v29);
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  if (v36)
  {
    uint64_t v37 = v36;
    operator delete(v36);
  }
  if (v48)
  {
    double v49 = v48;
    operator delete(v48);
  }
  if (v46)
  {
    unint64_t v47 = v46;
    operator delete(v46);
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  if (v41)
  {
    uint64_t v42 = v41;
    operator delete(v41);
  }
}

void sub_C6827C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  double v32 = *(void **)v30;
  if (*(void *)v30)
  {
    *(void *)(v30 + 8) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C682E0(void *a1, unint64_t a2)
{
  if (0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 280 * a2;
}

void sub_C68440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

char *sub_C68520(char **a1, void *__src)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    long long v7 = *a1;
    unint64_t v8 = 0xAF8AF8AF8AF8AF8BLL * ((v5 - *a1) >> 3);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0xEA0EA0EA0EA0EALL) {
      sub_2E00();
    }
    unint64_t v10 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v4 - (void)v7) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x75075075075075) {
      unint64_t v11 = 0xEA0EA0EA0EA0EALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0xEA0EA0EA0EA0EALL) {
        sub_188D718();
      }
      unint64_t v12 = (char *)operator new(280 * v11);
    }
    else
    {
      unint64_t v12 = 0;
    }
    long long v13 = &v12[280 * v8];
    int v14 = &v12[280 * v11];
    memcpy(v13, __src, 0x118uLL);
    unint64_t v6 = v13 + 280;
    if (v5 != v7)
    {
      do
      {
        v5 -= 280;
        v13 -= 280;
        memcpy(v13, v5, 0x118uLL);
      }
      while (v5 != v7);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = v14;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    memcpy(a1[1], __src, 0x118uLL);
    unint64_t v6 = v5 + 280;
  }
  a1[1] = v6;
  return v6 - 280;
}

void *sub_C68678(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[1];
  if (v3)
  {
    uint64_t v4 = a1[2];
    uint64_t v5 = (void *)a1[1];
    if (v4 != v3)
    {
      do
      {
        unint64_t v6 = *(void **)(v4 - 8);
        if (v6) {
          free(v6);
        }
        v4 -= 80;
      }
      while (v4 != v3);
      uint64_t v5 = (void *)a1[1];
    }
    a1[2] = v3;
    operator delete(v5);
  }
  return a1;
}

void sub_C686F8(uint64_t a1, void **a2)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = *(void ***)(a1 + 8);
    while (1)
    {
      unint64_t v8 = (void **)*(v5 - 3);
      v5 -= 3;
      long long v7 = v8;
      if (!v8) {
        goto LABEL_5;
      }
      unint64_t v9 = (void **)*(v4 - 2);
      unint64_t v6 = v7;
      if (v9 != v7) {
        break;
      }
LABEL_4:
      *(v4 - 2) = v7;
      operator delete(v6);
LABEL_5:
      uint64_t v4 = v5;
      if (v5 == a2) {
        goto LABEL_18;
      }
    }
    while (1)
    {
      if (*((char *)v9 - 1) < 0)
      {
        operator delete(*(v9 - 3));
        unint64_t v10 = v9 - 15;
        unint64_t v11 = *(v9 - 15);
        if (v11)
        {
LABEL_15:
          uint64_t v12 = (uint64_t)*(v9 - 14);
          long long v13 = v11;
          if ((void *)v12 != v11)
          {
            do
              uint64_t v12 = sub_3AFFFC(v12 - 1056);
            while ((void *)v12 != v11);
            long long v13 = *v10;
          }
          *(v9 - 14) = v11;
          operator delete(v13);
        }
      }
      else
      {
        unint64_t v10 = v9 - 15;
        unint64_t v11 = *(v9 - 15);
        if (v11) {
          goto LABEL_15;
        }
      }
      unint64_t v9 = v10;
      if (v10 == v7)
      {
        unint64_t v6 = *v5;
        goto LABEL_4;
      }
    }
  }
LABEL_18:
  *(void *)(a1 + 8) = a2;
}

uint64_t *sub_C687EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    long long v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      int v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          uint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            int v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          int v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  int v25 = (char *)operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)int v25 = 0;
  *((void *)v25 + 1) = v10;
  uint64_t v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  v25[40] = *(unsigned char *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        unint64_t v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        uint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        unint64_t v29 = *(void **)(*(void *)a1 + 8 * v10);
        uint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      unint64_t v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      uint64_t v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  unint64_t v29 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  void *v30 = *v29;
  *unint64_t v29 = v42[0];
LABEL_92:
  int v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_C68C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_C68C48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_C68C60(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void ***)(a1 + 8);
    if (v2)
    {
      unint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v4 = *(void **)(a1 + 8);
      if (v3 == v2)
      {
LABEL_21:
        *(void *)(a1 + 16) = v2;
LABEL_24:
        operator delete(v4);
        return a1;
      }
      while (1)
      {
        if (*((char *)v3 - 1) < 0)
        {
          operator delete(*(v3 - 3));
          uint64_t v5 = v3 - 15;
          unint64_t v6 = *(v3 - 15);
          if (v6)
          {
LABEL_11:
            uint64_t v7 = (uint64_t)*(v3 - 14);
            unint64_t v8 = v6;
            if ((void *)v7 != v6)
            {
              do
                uint64_t v7 = sub_3AFFFC(v7 - 1056);
              while ((void *)v7 != v6);
              unint64_t v8 = *v5;
            }
            *(v3 - 14) = v6;
            operator delete(v8);
          }
        }
        else
        {
          uint64_t v5 = v3 - 15;
          unint64_t v6 = *(v3 - 15);
          if (v6) {
            goto LABEL_11;
          }
        }
        unint64_t v3 = v5;
        if (v5 == v2)
        {
          uint64_t v4 = *(void **)(a1 + 8);
          goto LABEL_21;
        }
      }
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 24);
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v4 = *(void **)(a1 + 24);
      if (v10 != v9)
      {
        do
        {
          if (*(char *)(v10 - 1) < 0) {
            operator delete(*(void **)(v10 - 24));
          }
          v10 -= 32;
        }
        while (v10 != v9);
        uint64_t v4 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 32) = v9;
      goto LABEL_24;
    }
  }
  return a1;
}

char *sub_C68D78(void ***a1, long long **a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (a1[2] - *a1) > v4) {
    unint64_t v4 = 0x5555555555555556 * (a1[2] - *a1);
  }
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v23 = &v7[24 * v3];
  uint64_t v24 = &v7[24 * v6];
  sub_C6669C(v23, a2);
  unint64_t v8 = (void **)v23;
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  if (v10 == *a1)
  {
    uint8x8_t v12 = a1[1];
  }
  else
  {
    do
    {
      *(v8 - 3) = 0;
      *(v8 - 2) = 0;
      v8 -= 3;
      v8[2] = 0;
      long long v11 = *(_OWORD *)(v10 - 3);
      v10 -= 3;
      *(_OWORD *)unint64_t v8 = v11;
      v8[2] = v10[2];
      std::string *v10 = 0;
      v10[1] = 0;
      v10[2] = 0;
    }
    while (v10 != v9);
    uint8x8_t v12 = *a1;
    uint64_t v10 = a1[1];
  }
  *a1 = v8;
  a1[1] = (void **)(v23 + 24);
  a1[2] = (void **)v24;
  if (v10 != v12)
  {
    long long v13 = v10;
    while (1)
    {
      uint64_t v16 = (void **)*(v13 - 3);
      v13 -= 3;
      char v15 = v16;
      if (v16) {
        break;
      }
LABEL_19:
      uint64_t v10 = v13;
      if (v13 == v12)
      {
        uint64_t v10 = v12;
        goto LABEL_33;
      }
    }
    unint64_t v17 = (void **)*(v10 - 2);
    if (v17 == v15)
    {
      int v14 = v15;
LABEL_18:
      *(v10 - 2) = v15;
      operator delete(v14);
      goto LABEL_19;
    }
    while (1)
    {
      if (*((char *)v17 - 1) < 0)
      {
        operator delete(*(v17 - 3));
        uint64_t v18 = v17 - 15;
        uint64_t v19 = *(v17 - 15);
        if (v19)
        {
LABEL_29:
          uint64_t v20 = (uint64_t)*(v17 - 14);
          uint64_t v21 = v19;
          if ((void *)v20 != v19)
          {
            do
              uint64_t v20 = sub_3AFFFC(v20 - 1056);
            while ((void *)v20 != v19);
            uint64_t v21 = *v18;
          }
          *(v17 - 14) = v19;
          operator delete(v21);
        }
      }
      else
      {
        uint64_t v18 = v17 - 15;
        uint64_t v19 = *(v17 - 15);
        if (v19) {
          goto LABEL_29;
        }
      }
      unint64_t v17 = v18;
      if (v18 == v15)
      {
        int v14 = *v13;
        goto LABEL_18;
      }
    }
  }
LABEL_33:
  if (v10) {
    operator delete(v10);
  }
  return v23 + 24;
}

void sub_C68F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_C68FAC(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_C68FE4(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    uint64_t v5 = *(void ***)(a1 + 16);
    while (1)
    {
      unint64_t v8 = (void **)*(v5 - 3);
      v5 -= 3;
      uint64_t v7 = v8;
      *(void *)(a1 + 16) = v5;
      if (!v8) {
        goto LABEL_5;
      }
      uint64_t v9 = (void **)*(v2 - 2);
      unint64_t v6 = v7;
      if (v9 != v7) {
        break;
      }
LABEL_4:
      *(v2 - 2) = v7;
      operator delete(v6);
      uint64_t v5 = *(void ***)(a1 + 16);
LABEL_5:
      uint64_t v2 = v5;
      if (v5 == a2) {
        return;
      }
    }
    while (1)
    {
      if (*((char *)v9 - 1) < 0)
      {
        operator delete(*(v9 - 3));
        uint64_t v10 = v9 - 15;
        long long v11 = *(v9 - 15);
        if (v11)
        {
LABEL_15:
          uint64_t v12 = (uint64_t)*(v9 - 14);
          long long v13 = v11;
          if ((void *)v12 != v11)
          {
            do
              uint64_t v12 = sub_3AFFFC(v12 - 1056);
            while ((void *)v12 != v11);
            long long v13 = *v10;
          }
          *(v9 - 14) = v11;
          operator delete(v13);
        }
      }
      else
      {
        uint64_t v10 = v9 - 15;
        long long v11 = *(v9 - 15);
        if (v11) {
          goto LABEL_15;
        }
      }
      uint64_t v9 = v10;
      if (v10 == v7)
      {
        unint64_t v6 = *v5;
        goto LABEL_4;
      }
    }
  }
}

char *sub_C690DC(void ***a1, long long **a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (a1[2] - *a1) > v4) {
    unint64_t v4 = 0x5555555555555556 * (a1[2] - *a1);
  }
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v23 = &v7[24 * v3];
  uint64_t v24 = &v7[24 * v6];
  sub_C6669C(v23, a2);
  unint64_t v8 = (void **)v23;
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  if (v10 == *a1)
  {
    uint64_t v12 = a1[1];
  }
  else
  {
    do
    {
      *(v8 - 3) = 0;
      *(v8 - 2) = 0;
      v8 -= 3;
      v8[2] = 0;
      long long v11 = *(_OWORD *)(v10 - 3);
      v10 -= 3;
      *(_OWORD *)unint64_t v8 = v11;
      v8[2] = v10[2];
      std::string *v10 = 0;
      v10[1] = 0;
      v10[2] = 0;
    }
    while (v10 != v9);
    uint64_t v12 = *a1;
    uint64_t v10 = a1[1];
  }
  *a1 = v8;
  a1[1] = (void **)(v23 + 24);
  a1[2] = (void **)v24;
  if (v10 != v12)
  {
    long long v13 = v10;
    while (1)
    {
      uint64_t v16 = (void **)*(v13 - 3);
      v13 -= 3;
      char v15 = v16;
      if (v16) {
        break;
      }
LABEL_19:
      uint64_t v10 = v13;
      if (v13 == v12)
      {
        uint64_t v10 = v12;
        goto LABEL_33;
      }
    }
    unint64_t v17 = (void **)*(v10 - 2);
    if (v17 == v15)
    {
      int v14 = v15;
LABEL_18:
      *(v10 - 2) = v15;
      operator delete(v14);
      goto LABEL_19;
    }
    while (1)
    {
      if (*((char *)v17 - 1) < 0)
      {
        operator delete(*(v17 - 3));
        uint64_t v18 = v17 - 15;
        uint64_t v19 = *(v17 - 15);
        if (v19)
        {
LABEL_29:
          uint64_t v20 = (uint64_t)*(v17 - 14);
          uint64_t v21 = v19;
          if ((void *)v20 != v19)
          {
            do
              uint64_t v20 = sub_3AFFFC(v20 - 1056);
            while ((void *)v20 != v19);
            uint64_t v21 = *v18;
          }
          *(v17 - 14) = v19;
          operator delete(v21);
        }
      }
      else
      {
        uint64_t v18 = v17 - 15;
        uint64_t v19 = *(v17 - 15);
        if (v19) {
          goto LABEL_29;
        }
      }
      unint64_t v17 = v18;
      if (v18 == v15)
      {
        int v14 = *v13;
        goto LABEL_18;
      }
    }
  }
LABEL_33:
  if (v10) {
    operator delete(v10);
  }
  return v23 + 24;
}

void sub_C692FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_C69310()
{
  byte_25E05AF = 1;
  word_25E0598 = 65;
  byte_25E05C7 = 1;
  word_25E05B0 = 65;
  byte_25E05DF = 21;
  strcpy((char *)&xmmword_25E05C8, "enable_coverage_check");
  byte_25E05F7 = 14;
  strcpy((char *)&qword_25E05E0, "default_region");
  byte_25E060F = 17;
  strcpy((char *)&xmmword_25E05F8, "supported_regions");
  byte_25E0627 = 17;
  strcpy(algn_25E0610, "preflight_regions");
  qword_25E0628 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_25E0630 = xmmword_20B9250;
  strcpy((char *)qword_25E0628, "supported_country_codes");
  qword_25E0640 = (uint64_t)operator new(0x19uLL);
  xmmword_25E0648 = xmmword_20B9250;
  strcpy((char *)qword_25E0640, "preflight_country_codes");
  strcpy((char *)v1, "display_traversal_time");
  HIBYTE(v1[2]) = 22;
  char v2 = 0;
  __int16 v4 = 272;
  strcpy(v3, "num_name_changes");
  uint64_t v5 = operator new(0x28uLL);
  long long v6 = xmmword_20B9240;
  strcpy((char *)v5, "num_time_based_restriction_violations");
  char v7 = 2;
  __int16 v9 = 782;
  strcpy((char *)v8, "traversal_time");
  HIBYTE(v10[2]) = 17;
  strcpy((char *)v10, "segment_curviness");
  char v11 = 4;
  *(_WORD *)((char *)&v12[2] + 7) = 1296;
  strcpy((char *)v12, "route_jaggedness");
  long long v13 = operator new(0x20uLL);
  long long v14 = xmmword_20B8870;
  strcpy((char *)v13, "extra_elevation_change_cm");
  char v15 = 28;
  __int16 v17 = 1542;
  strcpy((char *)v16, "length");
  *(_WORD *)((char *)&v18[2] + 7) = 1809;
  strcpy((char *)v18, "length_on_ferries");
  HIBYTE(v19[2]) = 17;
  strcpy((char *)v19, "length_on_walking");
  char v20 = 8;
  v21[0] = operator new(0x20uLL);
  v21[1] = &dword_1C;
  unint64_t v22 = 0x8000000000000020;
  strcpy((char *)v21[0], "normalized_length_on_walking");
  char v23 = 9;
  *(_WORD *)((char *)&v24[2] + 7) = 2581;
  strcpy((char *)v24, "num_impeding_barriers");
  char v26 = 13;
  strcpy((char *)v25, "num_dismounts");
  char v27 = 12;
  *(_WORD *)((char *)&v28[2] + 7) = 3346;
  strcpy((char *)v28, "num_traffic_lights");
  __int16 v30 = 3598;
  strcpy((char *)v29, "num_stop_signs");
  v0 = operator new(0x20uLL);
  unint64_t v32 = 0x8000000000000020;
  v31[0] = v0;
  v31[1] = &dword_18 + 1;
  strcpy((char *)v0, "uses_contingency_terminal");
  char v33 = 11;
  strcpy((char *)v34, "unprotected_turn_score");
  HIBYTE(v34[2]) = 22;
  char v35 = 15;
  HIBYTE(v36[2]) = 18;
  strcpy((char *)v36, "avg_busyness_score");
  char v37 = 16;
  v38[0] = operator new(0x19uLL);
  unint64_t v39 = 0x8000000000000019;
  v38[1] = &dword_14 + 3;
  strcpy((char *)v38[0], "bike_nav_sidewalk_buddy");
  char v40 = 17;
  v41[0] = operator new(0x20uLL);
  unint64_t v42 = 0x8000000000000020;
  v41[1] = &dword_1C;
  strcpy((char *)v41[0], "bike_friendly_sidewalk_buddy");
  char v43 = 18;
  v44[0] = operator new(0x20uLL);
  unint64_t v45 = 0x8000000000000020;
  v44[1] = &dword_1C + 3;
  strcpy((char *)v44[0], "sharp_turn_cost_against_traffic");
  char v46 = 19;
  *(_WORD *)((char *)&v47[2] + 7) = 5137;
  strcpy((char *)v47, "crosswalk_u_turns");
  *(_WORD *)((char *)&v48[2] + 7) = 5392;
  strcpy((char *)v48, "designated_route");
  char v50 = 14;
  strcpy((char *)v49, "protected_lane");
  char v51 = 22;
  __int16 v53 = 5902;
  strcpy((char *)v52, "dedicated_lane");
  __int16 v55 = 6155;
  strcpy((char *)v54, "shared_lane");
  char v57 = 14;
  strcpy((char *)v56, "legal_priority");
  char v58 = 25;
  v59[0] = operator new(0x20uLL);
  unint64_t v60 = 0x8000000000000020;
  v59[1] = &dword_18 + 1;
  strcpy((char *)v59[0], "no_cycling_infrastructure");
  char v61 = 26;
  strcpy((char *)v62, "cycling_infrastructure");
  HIBYTE(v62[2]) = 22;
  char v63 = 27;
  char v65 = 7;
  strcpy((char *)v64, "changes");
  char v66 = 29;
  *(_WORD *)((char *)&v67[2] + 7) = 7700;
  strcpy((char *)v67, "normalized_time_diff");
  __p[0] = operator new(0x20uLL);
  unint64_t v69 = 0x8000000000000020;
  __p[1] = &dword_1C + 1;
  strcpy((char *)__p[0], "length_in_unsupported_regions");
  char v70 = 31;
  xmmword_25E0658 = 0u;
  *(_OWORD *)&qword_25E0668 = 0u;
  dword_25E0678 = 1065353216;
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v1, (uint64_t)v1);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v3, (uint64_t)v3);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)&v5, (uint64_t)&v5);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v8, (uint64_t)v8);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v10, (uint64_t)v10);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v12, (uint64_t)v12);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)&v13, (uint64_t)&v13);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v16, (uint64_t)v16);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v18, (uint64_t)v18);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v19, (uint64_t)v19);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v21, (uint64_t)v21);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v24, (uint64_t)v24);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v25, (uint64_t)v25);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v28, (uint64_t)v28);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v29, (uint64_t)v29);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v31, (uint64_t)v31);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v34, (uint64_t)v34);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v36, (uint64_t)v36);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v38, (uint64_t)v38);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v41, (uint64_t)v41);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v44, (uint64_t)v44);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v47, (uint64_t)v47);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v48, (uint64_t)v48);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v49, (uint64_t)v49);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v52, (uint64_t)v52);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v54, (uint64_t)v54);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v56, (uint64_t)v56);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v59, (uint64_t)v59);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v62, (uint64_t)v62);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v64, (uint64_t)v64);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)v67, (uint64_t)v67);
  sub_C687EC((uint64_t)&xmmword_25E0658, (uint64_t)__p, (uint64_t)__p);
  if (SHIBYTE(v69) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v67[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((v65 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_36;
    }
  }
  else if ((SHIBYTE(v67[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v67[0]);
  if ((v65 & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v62[2]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v64[0]);
  if ((SHIBYTE(v62[2]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SHIBYTE(v60) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v62[0]);
  if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
LABEL_6:
    if ((v57 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v59[0]);
  if ((v57 & 0x80000000) == 0)
  {
LABEL_7:
    if (((char)v55 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v56[0]);
  if (((char)v55 & 0x80000000) == 0)
  {
LABEL_8:
    if (((char)v53 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v54[0]);
  if (((char)v53 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v50 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v52[0]);
  if ((v50 & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v48[2]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v49[0]);
  if ((SHIBYTE(v48[2]) & 0x80000000) == 0)
  {
LABEL_11:
    if ((SHIBYTE(v47[2]) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v48[0]);
  if ((SHIBYTE(v47[2]) & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v45) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_45;
  }
LABEL_44:
  operator delete(v47[0]);
  if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v42) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v44[0]);
  if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
LABEL_14:
    if ((SHIBYTE(v39) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }
LABEL_46:
  operator delete(v41[0]);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v36[2]) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_48;
  }
LABEL_47:
  operator delete(v38[0]);
  if ((SHIBYTE(v36[2]) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v34[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_49;
  }
LABEL_48:
  operator delete(v36[0]);
  if ((SHIBYTE(v34[2]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v32) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_50;
  }
LABEL_49:
  operator delete(v34[0]);
  if ((SHIBYTE(v32) & 0x80000000) == 0)
  {
LABEL_18:
    if (((char)v30 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }
LABEL_50:
  operator delete(v31[0]);
  if (((char)v30 & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v28[2]) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }
LABEL_51:
  operator delete(v29[0]);
  if ((SHIBYTE(v28[2]) & 0x80000000) == 0)
  {
LABEL_20:
    if ((v26 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }
LABEL_52:
  operator delete(v28[0]);
  if ((v26 & 0x80000000) == 0)
  {
LABEL_21:
    if ((SHIBYTE(v24[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }
LABEL_53:
  operator delete(v25[0]);
  if ((SHIBYTE(v24[2]) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v22) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_55;
  }
LABEL_54:
  operator delete(v24[0]);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
LABEL_23:
    if ((SHIBYTE(v19[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }
LABEL_55:
  operator delete(v21[0]);
  if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
  {
LABEL_24:
    if ((SHIBYTE(v18[2]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }
LABEL_56:
  operator delete(v19[0]);
  if ((SHIBYTE(v18[2]) & 0x80000000) == 0)
  {
LABEL_25:
    if (((char)v17 & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }
LABEL_57:
  operator delete(v18[0]);
  if (((char)v17 & 0x80000000) == 0)
  {
LABEL_26:
    if ((SHIBYTE(v14) & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }
LABEL_58:
  operator delete(v16[0]);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v12[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }
LABEL_59:
  operator delete(v13);
  if ((SHIBYTE(v12[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if ((SHIBYTE(v10[2]) & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }
LABEL_60:
  operator delete(v12[0]);
  if ((SHIBYTE(v10[2]) & 0x80000000) == 0)
  {
LABEL_29:
    if (((char)v9 & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_62;
  }
LABEL_61:
  operator delete(v10[0]);
  if (((char)v9 & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v6) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_63;
  }
LABEL_62:
  operator delete(v8[0]);
  if ((SHIBYTE(v6) & 0x80000000) == 0)
  {
LABEL_31:
    if (((char)v4 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_64;
  }
LABEL_63:
  operator delete(v5);
  if (((char)v4 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v1[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_65:
    operator delete(v1[0]);
    return;
  }
LABEL_64:
  operator delete(*(void **)v3);
  if (SHIBYTE(v1[2]) < 0) {
    goto LABEL_65;
  }
}

void sub_C6A058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  while (1)
  {
    if (*((char *)a10 - 9) < 0) {
      operator delete(*(a10 - 4));
    }
    a10 -= 4;
    if (a10 == &a23) {
      _Unwind_Resume(a1);
    }
  }
}

double sub_C6A41C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10AF640(a1, a2);
}

void sub_C6A424()
{
  unk_25E0697 = 16641;
  word_25E0680 = 65;
  byte_25E06AF = 1;
  byte_25E0699 = 0;
}

void sub_C6A44C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v73);
  uint64_t v4 = a1[1];
  *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = 11;
  strcpy((char *)__dst, "DrivingDooM");
  std::string __p = 0;
  unint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v5 = sub_374CDC(v4, (uint64_t)__dst, (uint64_t *)&__p);
  sub_54214((uint64_t)v71, (uint64_t)v5);
  long long v6 = (void **)__p;
  if (__p)
  {
    uint64_t v7 = a2;
    unint64_t v8 = v69;
    __int16 v9 = __p;
    if (v69 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v6);
      __int16 v9 = __p;
    }
    unint64_t v69 = v6;
    operator delete(v9);
    a2 = v7;
  }
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst[0].__r_.__value_.__l.__data_);
  }
  *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = 19;
  strcpy((char *)__dst, "supported_countries");
  uint64_t v10 = (uint64_t *)sub_5C4AC(v71, (uint64_t)__dst);
  std::string __p = 0;
  unint64_t v69 = 0;
  uint64_t v70 = 0;
  sub_54DE8(&__p, *v10, v10[1], (v10[1] - *v10) >> 4);
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst[0].__r_.__value_.__l.__data_);
  }
  char v65 = 0;
  *(void *)char v66 = 0;
  uint64_t v67 = 0;
  sub_23708((uint64_t)&v65, ((char *)v69 - (unsigned char *)__p) >> 4);
  char v11 = (void **)__p;
  uint64_t v12 = v69;
  if (__p != v69)
  {
    uint64_t v13 = *(void *)v66;
    do
    {
      if (*((_DWORD *)v11 + 2))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      long long v14 = (long long *)*v11;
      if (*((char *)*v11 + 23) < 0)
      {
        sub_4200(__dst, *(void **)v14, *((void *)v14 + 1));
      }
      else
      {
        long long v15 = *v14;
        __dst[0].__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
        *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = v15;
      }
      uint64_t v16 = sub_5D6D4((std::string **)&v65, v13, __dst);
      if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst[0].__r_.__value_.__l.__data_);
      }
      uint64_t v13 = (uint64_t)&v16[1];
      v11 += 2;
    }
    while (v11 != v12);
  }
  uint64_t v17 = sub_3750CC((void *)a1[1]);
  memset(__dst, 0, 24);
  uint64_t v18 = *(void *)*a1;
  uint64_t v19 = *(void *)(*a1 + 8);
  if (v18 == v19)
  {
    BOOL v31 = 1;
    goto LABEL_77;
  }
  uint64_t v20 = v17;
  do
  {
    sub_3D63DC(v20, *(void *)(*(void *)(v18 + 104) + 32), &__str);
    std::string::size_type size = __dst[0].__r_.__value_.__l.__size_;
    char v63 = (const void **)__dst[0].__r_.__value_.__r.__words[0];
    uint64_t v21 = sub_3D8148(&v63, &size, (const void **)&__str.__r_.__value_.__l.__data_);
    uint64_t v22 = (uint64_t)v21;
    if ((const void **)__dst[0].__r_.__value_.__l.__size_ != v21)
    {
      uint64_t v23 = *((unsigned __int8 *)v21 + 23);
      if ((v23 & 0x80u) == 0) {
        uint64_t v24 = (const void *)*((unsigned __int8 *)v21 + 23);
      }
      else {
        uint64_t v24 = v21[1];
      }
      std::string::size_type v25 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      char v26 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v25 = __str.__r_.__value_.__l.__size_;
      }
      if (v24 == (const void *)v25)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((v23 & 0x80) != 0)
        {
          if (!memcmp(*v21, p_str, (size_t)v21[1])) {
            goto LABEL_43;
          }
        }
        else
        {
          if (!*((unsigned char *)v21 + 23)) {
            goto LABEL_43;
          }
          float v28 = v21;
          while (*(unsigned __int8 *)v28 == p_str->__r_.__value_.__s.__data_[0])
          {
            float v28 = (const void **)((char *)v28 + 1);
            p_str = (std::string *)((char *)p_str + 1);
            if (!--v23) {
              goto LABEL_43;
            }
          }
        }
      }
    }
    sub_5D6D4((std::string **)__dst, v22, &__str);
    char v26 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
LABEL_43:
    if (v26 < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    v18 += 160;
  }
  while (v18 != v19);
  std::string::size_type v30 = __dst[0].__r_.__value_.__l.__size_;
  std::string::size_type v29 = __dst[0].__r_.__value_.__r.__words[0];
  BOOL v31 = __dst[0].__r_.__value_.__r.__words[0] == __dst[0].__r_.__value_.__l.__size_;
  if (__dst[0].__r_.__value_.__r.__words[0] != __dst[0].__r_.__value_.__l.__size_)
  {
    unint64_t v32 = (const void **)v65;
    char v33 = *(const void ***)v66;
    if (v65 != *(void **)v66)
    {
      uint64_t v61 = a2;
      while (1)
      {
        int v34 = *((char *)v32 + 23);
        int v35 = *(char *)(v29 + 23);
        if (v35 >= 0) {
          size_t v36 = *(unsigned __int8 *)(v29 + 23);
        }
        else {
          size_t v36 = *(void *)(v29 + 8);
        }
        if (v35 >= 0) {
          char v37 = (const void *)v29;
        }
        else {
          char v37 = *(const void **)v29;
        }
        if (v34 >= 0) {
          size_t v38 = *((unsigned __int8 *)v32 + 23);
        }
        else {
          size_t v38 = (size_t)v32[1];
        }
        if (v34 >= 0) {
          unint64_t v39 = v32;
        }
        else {
          unint64_t v39 = *v32;
        }
        if (v38 >= v36) {
          size_t v40 = v36;
        }
        else {
          size_t v40 = v38;
        }
        int v41 = memcmp(v37, v39, v40);
        BOOL v42 = v36 < v38;
        if (v41) {
          BOOL v42 = v41 < 0;
        }
        if (v42) {
          break;
        }
        int v43 = memcmp(v39, v37, v40);
        BOOL v44 = v38 >= v36;
        if (v43) {
          BOOL v44 = v43 >= 0;
        }
        v29 += 24 * v44;
        v32 += 3;
        BOOL v31 = v29 == v30;
        if (v29 == v30 || v32 == v33) {
          goto LABEL_76;
        }
      }
      BOOL v31 = 0;
LABEL_76:
      a2 = v61;
    }
  }
LABEL_77:
  double v46 = sub_72688((uint64_t)v73);
  *(unsigned char *)a2 = 1;
  *(unsigned char *)(a2 + 8) = v31;
  *(void *)(a2 + 16) = vcvtad_u64_f64(v46);
  *(unsigned char *)(a2 + 24) = !v31;
  std::string::size_type v47 = __dst[0].__r_.__value_.__r.__words[0];
  if (__dst[0].__r_.__value_.__r.__words[0])
  {
    std::string::size_type v48 = __dst[0].__r_.__value_.__l.__size_;
    double v49 = (void *)__dst[0].__r_.__value_.__r.__words[0];
    if (__dst[0].__r_.__value_.__l.__size_ != __dst[0].__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v48 - 1) < 0) {
          operator delete(*(void **)(v48 - 24));
        }
        v48 -= 24;
      }
      while (v48 != v47);
      double v49 = (void *)__dst[0].__r_.__value_.__r.__words[0];
    }
    __dst[0].__r_.__value_.__l.__size_ = v47;
    operator delete(v49);
  }
  char v50 = (void **)v65;
  if (v65)
  {
    char v51 = *(void ***)v66;
    uint64_t v52 = v65;
    if (*(void **)v66 != v65)
    {
      do
      {
        if (*((char *)v51 - 1) < 0) {
          operator delete(*(v51 - 3));
        }
        v51 -= 3;
      }
      while (v51 != v50);
      uint64_t v52 = v65;
    }
    *(void *)char v66 = v50;
    operator delete(v52);
  }
  __int16 v53 = (uint64_t *)__p;
  if (__p)
  {
    v54 = (uint64_t *)v69;
    __int16 v55 = __p;
    if (v69 != __p)
    {
      do
      {
        uint64_t v56 = v54 - 2;
        sub_5521C((uint64_t *)*((unsigned int *)v54 - 2), v54 - 2);
        v54 = v56;
      }
      while (v56 != v53);
      __int16 v55 = __p;
    }
    unint64_t v69 = (void **)v53;
    operator delete(v55);
  }
  char v57 = v72;
  if (v72)
  {
    do
    {
      uint64_t v59 = (void **)*v57;
      sub_55198((uint64_t)(v57 + 5));
      if (*((char *)v57 + 39) < 0) {
        operator delete(v57[2]);
      }
      operator delete(v57);
      char v57 = v59;
    }
    while (v59);
  }
  char v58 = v71[0];
  v71[0] = 0;
  if (v58) {
    operator delete(v58);
  }
}

void sub_C6A9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,uint64_t *a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_C6AA6C()
{
  unk_25E06C7 = 16641;
  word_25E06B0 = 65;
  byte_25E06DF = 1;
  byte_25E06C9 = 0;
}

__n128 sub_C6AA94@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v11 = 0u;
  long long v12 = 0u;
  sub_725D0((uint64_t)v10);
  sub_58E9CC(*(uint64_t **)(a1 + 1544), (int *)(a1 + 968), *(void *)(a1 + 1536), &v8);
  uint64_t v4 = v9;
  __n128 v7 = v8;
  unint64_t v5 = vcvtad_u64_f64(sub_72688((uint64_t)v10));
  *(unsigned char *)a2 = 1;
  __n128 result = v7;
  *(__n128 *)(a2 + 8) = v7;
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = v5;
  return result;
}

void sub_C6AB10(_Unwind_Exception *a1)
{
  sub_58EE6C((void **)(v1 - 48));
  _Unwind_Resume(a1);
}

void sub_C6AB24(_Unwind_Exception *a1)
{
  sub_58EE6C((void **)(v1 - 48));
  _Unwind_Resume(a1);
}

double sub_C6AB38()
{
  byte_25E06F7 = 1;
  word_25E06E0 = 65;
  byte_25E070F = 1;
  word_25E06F8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E07A0 = 0u;
  *(_OWORD *)&qword_25E07B0 = 0u;
  dword_25E07C0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E07A0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E07A0, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E07A0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E07A0, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E0727 = 8;
  strcpy((char *)&qword_25E0710, "any_mode");
  byte_25E073F = 7;
  strcpy((char *)&dword_25E0728, "cycling");
  byte_25E0757 = 7;
  strcpy((char *)&dword_25E0740, "driving");
  byte_25E076F = 7;
  strcpy((char *)&dword_25E0758, "walking");
  qword_25E0778 = 0;
  qword_25E0780 = 0;
  qword_25E0770 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E0770 = (uint64_t)v0;
  qword_25E0778 = (uint64_t)(v0 + 9);
  qword_25E0780 = (uint64_t)(v0 + 9);
  qword_25E0788 = 0;
  qword_25E0790 = 0;
  unk_25E0798 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25E0790 = (uint64_t)(v1 + 9);
  unk_25E0798 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E0788 = (uint64_t)v1;
  return result;
}

void sub_C6AE00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E07B0) {
    sub_20AEEC0((void **)qword_25E07B0);
  }
  char v37 = (void *)xmmword_25E07A0;
  *(void *)&xmmword_25E07A0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_C6AEA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v21);
  sub_162C594(v15, 0, 0);
  sub_162C594(v17, 0, 0);
  LOBYTE(v20) = 0;
  long long v19 = 0u;
  long long v18 = 0u;
  char v23 = 0;
  memset(v22, 0, sizeof(v22));
  sub_E29978(a1, (uint64_t)v22, &v11);
  if (v13 >= 1) {
    sub_DEE43C((uint64_t *)(a1 + 2240), (uint64_t)&v11);
  }
  if (v14 >= 1) {
    sub_DEE800((void *)(a1 + 2240), (uint64_t)&v11);
  }
  if ((v16 & 2) != 0)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = (void *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
    if (v16) {
      char v4 = (void *)*v4;
    }
  }
  if ((v12 & 2) != 0)
  {
    int v5 = 0;
  }
  else
  {
    int v5 = (void *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
    if (v12) {
      int v5 = (void *)*v5;
    }
  }
  if (v4 == v5) {
    sub_16323C4((uint64_t)v15, (uint64_t)&v11);
  }
  else {
    sub_1632068((uint64_t)v15, (uint64_t)&v11);
  }
  sub_162D64C(&v11);
  sub_E2B274((uint64_t)v15);
  char v24 = 0;
  char v25 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  *(void *)((char *)v35 + 5) = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  int v34 = 0;
  v35[0] = 0;
  uint64_t v39 = 0x3FF0000000000000;
  uint64_t v42 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  char v43 = 5;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  int v47 = 0x7FFFFFFF;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  memset(v51, 0, sizeof(v51));
  uint64_t v54 = -1;
  int v55 = 0x7FFFFFFF;
  uint64_t v56 = 0;
  uint64_t v57 = -1;
  int v58 = -1;
  char v59 = 0;
  sub_E2C138(&v11, *(void **)(a1 + 1320), a1 + 1144);
  long long v6 = *(uint64_t **)a1;
  sub_37B34C(*(void **)(a1 + 1320), (uint64_t)&v10);
  memset(__p, 0, sizeof(__p));
  sub_E2CA98(&v11, v6, 0, (uint64_t *)(a1 + 1328), &v10, (int **)__p, (uint64_t)v22);
  if (__p[0])
  {
    sub_C5C1FC((uint64_t)__p, (uint64_t)__p[0]);
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  sub_E2CE94((uint64_t)&v11, (uint64_t)v22);
  sub_E2B424((uint64_t)v22, (uint64_t)v15);
  *(void *)&long long v18 = vcvtad_u64_f64(sub_72688((uint64_t)v21));
  *(unsigned char *)a2 = 1;
  sub_C6B2B4(a2 + 8, (uint64_t)v15);
  sub_C6B2B4(a2 + 568, (uint64_t)v17);
  long long v7 = v19;
  *(_OWORD *)(a2 + 1128) = v18;
  *(_OWORD *)(a2 + 1144) = v7;
  *(void *)(a2 + 1160) = v20;
  sub_C6B354(&v11);
  sub_4BCC2C((uint64_t)v22);
  sub_162D64C(v17);
  return sub_162D64C(v15);
}

void sub_C6B1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  sub_C6B278(&a9);
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_C6B354(&a18);
  sub_4BCC2C((uint64_t)&STACK[0xCA0]);
  sub_162D64C(v18);
  sub_162D64C(&STACK[0x800]);
  _Unwind_Resume(a1);
}

uint64_t *sub_C6B278(uint64_t *a1)
{
  if (*a1)
  {
    sub_C5C1FC((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

uint64_t sub_C6B2B4(uint64_t a1, uint64_t a2)
{
  sub_162C594(a1, 0, 0);
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if ((v4 & 2) != 0)
    {
      int v5 = 0;
    }
    else
    {
      int v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      if (v4) {
        int v5 = (void *)*v5;
      }
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if ((v6 & 2) != 0)
    {
      long long v7 = 0;
    }
    else
    {
      long long v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        long long v7 = (void *)*v7;
      }
    }
    if (v5 == v7) {
      sub_16323C4(a1, a2);
    }
    else {
      sub_1632068(a1, a2);
    }
  }
  return a1;
}

void *sub_C6B354(void *a1)
{
  sub_423E54((uint64_t)(a1 + 231));
  a1[117] = off_2439728;
  char v2 = a1 + 230;
  do
  {
    unint64_t v3 = v2 - 6;
    uint64_t v4 = *(v2 - 3);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      long long v7 = v2 - 5;
      do
      {
        if ((*(char *)(*v3 + v6) & 0x80000000) == 0)
        {
          uint64_t v8 = *v7 + v5;
          uint64_t v9 = *(void **)(v8 + 8);
          if (v9)
          {
            *(void *)(v8 + 16) = v9;
            operator delete(v9);
            uint64_t v4 = *(v2 - 3);
          }
        }
        ++v6;
        v5 += 32;
      }
      while (v6 != v4);
      operator delete((void *)*(v2 - 6));
      *(v2 - 6) = &unk_20E1710;
      *(v2 - 1) = 0;
      *(v2 - 4) = 0;
      *(v2 - 3) = 0;
      void *v7 = 0;
    }
    v2 -= 6;
  }
  while (v3 != a1 + 134);
  a1[1] = off_2439728;
  std::string v10 = a1 + 114;
  do
  {
    uint64_t v11 = v10 - 6;
    uint64_t v12 = *(v10 - 3);
    if (v12)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      long long v15 = v10 - 5;
      do
      {
        if ((*(char *)(*v11 + v14) & 0x80000000) == 0)
        {
          uint64_t v16 = *v15 + v13;
          uint64_t v17 = *(void **)(v16 + 8);
          if (v17)
          {
            *(void *)(v16 + 16) = v17;
            operator delete(v17);
            uint64_t v12 = *(v10 - 3);
          }
        }
        ++v14;
        v13 += 32;
      }
      while (v14 != v12);
      operator delete((void *)*(v10 - 6));
      *(v10 - 6) = &unk_20E1710;
      *(v10 - 1) = 0;
      *(v10 - 4) = 0;
      *(v10 - 3) = 0;
      void *v15 = 0;
    }
    v10 -= 6;
  }
  while (v11 != a1 + 18);
  return a1;
}

unsigned char *sub_C6B4F0()
{
  byte_25E07DF = 1;
  word_25E07C8 = 65;
  byte_25E07F7 = 1;
  word_25E07E0 = 65;
  char v3 = 7;
  strcpy((char *)v2, "UNKNOWN");
  int v4 = 0;
  char v6 = 14;
  strcpy((char *)v5, "ROUTES_THROUGH");
  int v7 = 1;
  char v9 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v10 = 3;
  char v12 = 11;
  strcpy((char *)v11, "ROUTES_FROM");
  int v13 = 2;
  xmmword_25E0888 = 0u;
  *(_OWORD *)&qword_25E0898 = 0u;
  dword_25E08A8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E0888, (uint64_t)v2, (uint64_t)v2);
  sub_3A6EF0((uint64_t)&xmmword_25E0888, (uint64_t)v5, (uint64_t)v5);
  sub_3A6EF0((uint64_t)&xmmword_25E0888, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E0888, (uint64_t)v11, (uint64_t)v11);
  if (v12 < 0)
  {
    operator delete(v11[0]);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v6 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v5[0]);
      if ((v3 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v2[0]);
      goto LABEL_5;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v6 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v3 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_25E0800 = 0;
  qword_25E0808 = 0;
  qword_25E07F8 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E07F8 = (uint64_t)v0;
  qword_25E0800 = (uint64_t)(v0 + 9);
  qword_25E0808 = (uint64_t)(v0 + 9);
  qword_25E0810 = 0;
  qword_25E0818 = 0;
  qword_25E0820 = 0;
  double result = operator new(9uLL);
  *(void *)double result = 0x604020C00010305;
  result[8] = 13;
  qword_25E0810 = (uint64_t)result;
  qword_25E0818 = (uint64_t)(result + 9);
  byte_25E083F = 8;
  qword_25E0820 = (uint64_t)(result + 9);
  strcpy(byte_25E0828, "any_mode");
  byte_25E0857 = 7;
  strcpy((char *)&dword_25E0840, "cycling");
  byte_25E086F = 7;
  strcpy((char *)&dword_25E0858, "driving");
  byte_25E0887 = 7;
  strcpy((char *)&dword_25E0870, "walking");
  return result;
}

void sub_C6B7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E0898) {
    sub_20AEF04((void **)qword_25E0898);
  }
  long long v37 = (void *)xmmword_25E0888;
  *(void *)&xmmword_25E0888 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_C6B84C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)unint64_t v72 = 0u;
  long long v73 = 0u;
  sub_725D0((uint64_t)v71);
  uint64_t v3 = *(void *)(a1 + 8);
  char v75 = 11;
  strcpy((char *)__p, "DrivingDooM");
  long long v92 = 0uLL;
  unint64_t v93 = 0;
  int v4 = sub_374CDC(v3, (uint64_t)__p, (uint64_t *)&v92);
  sub_54214((uint64_t)v69, (uint64_t)v4);
  uint64_t v5 = v92;
  if ((void)v92)
  {
    uint64_t v6 = *((void *)&v92 + 1);
    int v7 = (void *)v92;
    if (*((void *)&v92 + 1) != (void)v92)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      int v7 = (void *)v92;
    }
    *((void *)&v92 + 1) = v5;
    operator delete(v7);
  }
  if (v75 < 0) {
    operator delete(__p[0]);
  }
  char v75 = 7;
  strcpy((char *)__p, "max_frc");
  unsigned int v8 = sub_31AC04(v69, (uint64_t)__p);
  if (v75 < 0) {
    operator delete(__p[0]);
  }
  sub_3EAFD4(v68, *(void *)(a1 + 8), 2);
  char v9 = *(char ***)a1;
  int v10 = **(char ***)a1;
  uint64_t v11 = v9[1];
  while (v10 != v11)
  {
    sub_45EB40(v10, (uint64_t)__p);
    sub_39ECCC((uint64_t)&v92, (long long *)__p);
    sub_39ECCC((uint64_t)&v85, &v80);
    if (v96 != v97 && v90 != v91)
    {
      if (v93 != v87) {
        goto LABEL_40;
      }
      if ((void)v92)
      {
        unint64_t v15 = *((void *)&v92 + 1);
        unint64_t v16 = sub_46C760((void *)v92);
        BOOL v17 = v15 < v16;
        uint64_t v18 = v85;
        if (!v85) {
          goto LABEL_28;
        }
      }
      else
      {
        BOOL v17 = 0;
        int v14 = 0;
        uint64_t v18 = v85;
        if (!v85) {
          goto LABEL_82;
        }
      }
      unint64_t v19 = v86;
      unint64_t v20 = sub_46C760(v18);
      if (v19 < v20 && v17) {
        goto LABEL_37;
      }
      if (v17 != v19 < v20) {
        goto LABEL_40;
      }
      goto LABEL_24;
    }
    if ((v96 == v97) == (v90 == v91)) {
      goto LABEL_24;
    }
    while (1)
    {
LABEL_40:
      char v23 = (int **)sub_46C8EC((void *)v92, *((uint64_t *)&v92 + 1));
      unint64_t v24 = (unint64_t)v23[4];
      char v25 = (unsigned __int16 *)((char *)*v23 - **v23);
      if (*v25 < 0x1Bu || (uint64_t v26 = v25[13]) == 0 || v8 >= *((unsigned __int8 *)*v23 + v26))
      {
        v100[0] = off_243ED00;
        v101 = v100;
        sub_3EAFD8((uint64_t)v68, v24, (uint64_t)v100, &v98);
        long long v27 = v98;
        long long v28 = v99;
        if (v98)
        {
          v99 = v98;
          operator delete(v98);
        }
        if (v101 == v100)
        {
          (*(void (**)(void *))(v100[0] + 32))(v100);
          if (v27 != v28) {
            goto LABEL_81;
          }
        }
        else
        {
          if (v101) {
            (*(void (**)(void))(*v101 + 40))();
          }
          if (v27 != v28)
          {
LABEL_81:
            int v14 = 1;
            goto LABEL_82;
          }
        }
      }
      unint64_t v29 = v93;
      ++*((void *)&v92 + 1);
      long long v31 = v96;
      long long v30 = v97;
      if (v93 >= ((v97 - v96) >> 4) - 1)
      {
        long long v32 = v90;
        long long v33 = v91;
        if (v96 != v97) {
          break;
        }
        goto LABEL_39;
      }
      do
      {
        int v34 = &v31[16 * v29];
        if ((void)v92)
        {
          unint64_t v35 = *((void *)&v92 + 1);
          unint64_t v36 = sub_46C760((void *)v92);
          BOOL v37 = v35 < v36;
          long long v38 = *(void **)v34;
          if (!*(void *)v34)
          {
            if (v35 < v36) {
              break;
            }
            goto LABEL_55;
          }
        }
        else
        {
          long long v38 = *(void **)v34;
          if (!*(void *)v34) {
            goto LABEL_55;
          }
          BOOL v37 = 0;
        }
        uint64_t v39 = &v31[16 * v29];
        unint64_t v42 = *((void *)v39 + 1);
        uint64_t v41 = (uint64_t *)(v39 + 8);
        unint64_t v40 = v42;
        unint64_t v43 = sub_46C760(v38);
        if (v42 >= v43 || !v37)
        {
          if ((v37 ^ (v40 < v43))) {
            break;
          }
          goto LABEL_55;
        }
        uint64_t v45 = sub_46C8EC((void *)v92, *((uint64_t *)&v92 + 1));
        if (v45 != sub_46C8EC(*(void **)v34, *v41)) {
          break;
        }
LABEL_55:
        unint64_t v29 = v93 + 1;
        unint64_t v93 = v29;
        long long v92 = v94[v29];
        long long v31 = v96;
      }
      while (v29 < ((v97 - v96) >> 4) - 1);
      long long v31 = v96;
      long long v30 = v97;
      long long v32 = v90;
      long long v33 = v91;
      if (v96 != v97) {
        break;
      }
LABEL_39:
      if ((v31 == v30) == (v32 == v33)) {
        goto LABEL_24;
      }
    }
    if (v32 == v33) {
      goto LABEL_39;
    }
    if (v93 != v87) {
      goto LABEL_40;
    }
    if ((void)v92)
    {
      unint64_t v15 = *((void *)&v92 + 1);
      unint64_t v16 = sub_46C760((void *)v92);
      BOOL v46 = v15 < v16;
      int v47 = v85;
      if (!v85)
      {
LABEL_28:
        if (v15 >= v16) {
          goto LABEL_24;
        }
        goto LABEL_40;
      }
    }
    else
    {
      BOOL v46 = 0;
      int v14 = 0;
      int v47 = v85;
      if (!v85) {
        goto LABEL_82;
      }
    }
    unint64_t v48 = v86;
    unint64_t v49 = sub_46C760(v47);
    if (v48 >= v49 || !v46)
    {
      if ((v46 ^ (v48 < v49))) {
        goto LABEL_40;
      }
      goto LABEL_24;
    }
LABEL_37:
    uint64_t v22 = sub_46C8EC((void *)v92, *((uint64_t *)&v92 + 1));
    if (v22 != sub_46C8EC(v85, v86)) {
      goto LABEL_40;
    }
LABEL_24:
    int v14 = 0;
LABEL_82:
    if (v90)
    {
      v91 = v90;
      operator delete(v90);
    }
    if (v88)
    {
      v89 = v88;
      operator delete(v88);
    }
    if (v96)
    {
      __n128 v97 = v96;
      operator delete(v96);
    }
    if (v94)
    {
      v95 = v94;
      operator delete(v94);
    }
    if (v83)
    {
      v84 = v83;
      operator delete(v83);
    }
    if (v81)
    {
      uint64_t v82 = v81;
      operator delete(v81);
    }
    if (v78)
    {
      uint64_t v79 = v78;
      operator delete(v78);
    }
    if (v76)
    {
      uint64_t v77 = v76;
      operator delete(v76);
    }
    if (v14)
    {
      char v51 = (char *)v72[1];
      if (v72[1] >= (void *)v73)
      {
        char v12 = sub_5ABFF4((uint64_t *)v72, (uint64_t)v10);
      }
      else
      {
        sub_5ABEF0((uint64_t)v72, (uint64_t)v10);
        char v12 = v51 + 120;
      }
      v72[1] = v12;
    }
    v10 += 120;
  }
  uint64_t v52 = (char *)v72[0];
  for (uint64_t i = (char *)v72[1]; v52 != i; v52 += 120)
  {
    if (sub_45FE1C((uint64_t)v52) == 2) {
      char v54 = 6;
    }
    else {
      char v54 = 5;
    }
    sub_45FE2C((uint64_t)v52, v54);
  }
  unint64_t v55 = vcvtad_u64_f64(sub_72688((uint64_t)v71));
  *(unsigned char *)a2 = 1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v72;
  uint64_t v56 = v73;
  v72[0] = 0;
  v72[1] = 0;
  *(void *)&long long v73 = 0;
  *((void *)&v73 + 1) = v55;
  *(void *)(a2 + 24) = v56;
  *(void *)(a2 + 32) = v55;
  uint64_t v57 = v70;
  if (v70)
  {
    do
    {
      __n128 v62 = (void **)*v57;
      sub_55198((uint64_t)(v57 + 5));
      if (*((char *)v57 + 39) < 0) {
        operator delete(v57[2]);
      }
      operator delete(v57);
      uint64_t v57 = v62;
    }
    while (v62);
  }
  int v58 = v69[0];
  v69[0] = 0;
  if (v58) {
    operator delete(v58);
  }
  char v59 = (void **)v72[0];
  if (v72[0])
  {
    unint64_t v60 = (void **)v72[1];
    uint64_t v61 = v72[0];
    if (v72[1] == v72[0])
    {
LABEL_125:
      v72[1] = v59;
      operator delete(v61);
      return;
    }
    while (1)
    {
      if (*((char *)v60 - 1) < 0)
      {
        operator delete(*(v60 - 3));
        char v63 = v60 - 15;
        uint64_t v64 = *(v60 - 15);
        if (v64)
        {
LABEL_121:
          uint64_t v65 = (uint64_t)*(v60 - 14);
          char v66 = v64;
          if ((void *)v65 != v64)
          {
            do
              uint64_t v65 = sub_3AFFFC(v65 - 1056);
            while ((void *)v65 != v64);
            char v66 = *v63;
          }
          *(v60 - 14) = v64;
          operator delete(v66);
        }
      }
      else
      {
        char v63 = v60 - 15;
        uint64_t v64 = *(v60 - 15);
        if (v64) {
          goto LABEL_121;
        }
      }
      unint64_t v60 = v63;
      if (v63 == v59)
      {
        uint64_t v61 = v72[0];
        goto LABEL_125;
      }
    }
  }
}

void sub_C6BF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58)
{
}

void sub_C6C134()
{
}

void *sub_C6C148()
{
  double result = operator new(0x10uLL);
  void *result = off_243ED00;
  return result;
}

void sub_C6C180(uint64_t a1, void *a2)
{
  *a2 = off_243ED00;
}

uint64_t sub_C6C1A8(uint64_t a1, uint64_t a2)
{
  LODWORD(result) = sub_358690(a2, 0);
  if (*(_DWORD *)(a2 + 88) == 2) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t sub_C6C1E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3msl7routing26DrivingDooMSelectionModule3runERKNS0_31DrivingDooMSelectionModuleInputEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3msl7routing26DrivingDooMSelectionModule3runERKNS0_31DrivingDooMSelectionModuleInputEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3msl7routing26DrivingDooMSelectionModule3runERKNS0_31DrivingDooMSelectionModuleInputEE3$_0"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3msl7routing26DrivingDooMSelectionModule3runERKNS0_31DrivingDooMSelectionModuleInputEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

_UNKNOWN **sub_C6C250()
{
}

void sub_C6C25C()
{
  unk_25E08C7 = 16641;
  word_25E08B0 = 65;
  byte_25E08DF = 1;
  byte_25E08C9 = 0;
}

void sub_C6C284(uint64_t a1)
{
  sub_725D0((uint64_t)v36);
  sub_C6CC54(&v34, (uint64_t *)a1);
  char v2 = v34;
  uint64_t v24 = a1;
  if (v34 != v35)
  {
    int v3 = *(_DWORD *)(a1 + 128);
    uint64_t v4 = (uint64_t)(v35 - 28);
    uint64_t v5 = (char *)v34;
    while (1)
    {
      int v6 = v2[26];
      if (v6 == 0x7FFFFFFF || v3 - v6 >= 900) {
        break;
      }
      v2 += 28;
      v5 += 112;
      if (v2 == v35)
      {
        char v2 = v35;
        goto LABEL_22;
      }
    }
    if (v2 != (_DWORD *)v4)
    {
      uint64_t v7 = v4 - (void)v5;
      unsigned int v8 = v35 - 28;
      while (1)
      {
        int v9 = v8[26];
        if (v9 != 0x7FFFFFFF && v3 - v9 < 900) {
          break;
        }
        v8 -= 28;
        v4 -= 112;
        v7 -= 112;
        if (v2 == v8) {
          goto LABEL_22;
        }
      }
      uint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (v7 >> 4) + 1;
      if (v7 < 225)
      {
LABEL_18:
        int v14 = 0;
        unint64_t v11 = 0;
      }
      else
      {
        if (v10 >= 0x124924924924924) {
          unint64_t v11 = 0x124924924924924;
        }
        else {
          unint64_t v11 = 0x6DB6DB6DB6DB6DB7 * (v7 >> 4) + 1;
        }
        while (1)
        {
          char v12 = (uint64_t *)operator new(112 * v11, &std::nothrow);
          if (v12) {
            break;
          }
          BOOL v13 = v11 > 1;
          v11 >>= 1;
          if (!v13) {
            goto LABEL_18;
          }
        }
        int v14 = v12;
      }
      char v2 = (_DWORD *)sub_C6CED4((uint64_t)v5, v4, (uint64_t)&v24, v10, v14, v11);
      if (v14) {
        operator delete(v14);
      }
    }
  }
LABEL_22:
  unint64_t v15 = v34;
  unint64_t v16 = v35;
  if (v2 != v34) {
    unint64_t v16 = v2;
  }
  uint64_t v22 = v16;
  uint64_t v17 = (char *)v16 - (unsigned char *)v34;
  unint64_t v18 = 0x6DB6DB6DB6DB6DB7 * (v17 >> 4);
  if (v17 < 1)
  {
LABEL_28:
    uint64_t v21 = 0;
    unint64_t v19 = 0;
  }
  else
  {
    unint64_t v19 = 0x6DB6DB6DB6DB6DB7 * (v17 >> 4);
    while (1)
    {
      unint64_t v20 = operator new(112 * v19, &std::nothrow);
      if (v20) {
        break;
      }
      BOOL v13 = v19 > 1;
      v19 >>= 1;
      if (!v13) {
        goto LABEL_28;
      }
    }
    uint64_t v21 = v20;
  }
  sub_C6DC54((uint64_t)v15, v22, v18, (uint64_t)v21, v19);
  if (v21) {
    operator delete(v21);
  }
  uint64_t v24 = -1;
  int v25 = 0x7FFFFFFF;
  uint64_t v26 = -1;
  uint64_t v27 = -1;
  long long v28 = 0x7FFFFFFFFFFFFFFFuLL;
  LODWORD(v29[0]) = -1935635296;
  v29[1] = 0;
  *(_DWORD *)((char *)&v29[1] + 7) = 0;
  memset(&v29[3], 0, 24);
  int v30 = 0;
  char v31 = 100;
  long long v32 = 0u;
  memset(v33, 0, 39);
  v33[5] = 0;
  sub_10A42F0((uint64_t)v23, *(void **)(a1 + 136), 0, 0, 0);
}

void sub_C6CB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
}

void **sub_C6CBE0(void **a1)
{
  char v2 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 5);
        if (v5)
        {
          *((void *)v3 - 4) = v5;
          operator delete(v5);
        }
        v3 -= 112;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_C6CC54(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * (v6 >> 4);
    if (v7 >= 0x24924924924924ALL) {
      sub_2E00();
    }
    unsigned int v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[112 * v7];
    a1[1] = sub_C6CD38(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_C6CD0C(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1) {
    sub_20AEF48((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C6CD38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    uint64_t v6 = a4 + 72;
    do
    {
      *(_OWORD *)(v6 - 72) = *(_OWORD *)v5;
      long long v9 = *(_OWORD *)(v5 + 16);
      long long v10 = *(_OWORD *)(v5 + 32);
      long long v11 = *(_OWORD *)(v5 + 48);
      *(_DWORD *)(v6 - 9) = *(_DWORD *)(v5 + 63);
      *(_OWORD *)(v6 - 24) = v11;
      *(_OWORD *)(v6 - 40) = v10;
      *(_OWORD *)(v6 - 56) = v9;
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
      *(void *)uint64_t v6 = 0;
      BOOL v13 = *(unsigned char **)(v5 + 72);
      char v12 = *(unsigned char **)(v5 + 80);
      int64_t v14 = v12 - v13;
      if (v12 != v13)
      {
        if (v14 < 0) {
          sub_2E00();
        }
        unint64_t v15 = (char *)operator new(v12 - v13);
        *(void *)uint64_t v6 = v15;
        *(void *)(v6 + 8) = v15;
        unint64_t v7 = &v15[4 * (v14 >> 2)];
        *(void *)(v6 + 16) = v7;
        memcpy(v15, v13, v14);
        *(void *)(v6 + 8) = v7;
      }
      int v8 = *(_DWORD *)(v5 + 96);
      *(unsigned char *)(v6 + 28) = *(unsigned char *)(v5 + 100);
      *(_DWORD *)(v6 + 24) = v8;
      *(_DWORD *)(v6 + 32) = *(_DWORD *)(v5 + 104);
      v6 += 112;
      v5 += 112;
    }
    while (v5 != a3);
    return v6 - 72;
  }
  return a4;
}

void sub_C6CE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_C6CE70((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_C6CE70(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)(v3 - 40);
      if (v5)
      {
        *(void *)(v3 - 32) = v5;
        operator delete(v5);
      }
      v3 -= 112;
    }
  }
  return a1;
}

uint64_t sub_C6CED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v8 = a1;
  if (a4 == 3)
  {
    unint64_t v19 = (uint64_t *)(a1 + 112);
    int v20 = *(_DWORD *)(a1 + 216);
    if (v20 == 0x7FFFFFFF || *(_DWORD *)(*(void *)a3 + 128) - v20 > 899)
    {
      long long v125 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)v129 = *(_OWORD *)(a1 + 160);
      *(_DWORD *)&v129[15] = *(_DWORD *)(a1 + 175);
      long long v115 = *(_OWORD *)v19;
      long long v120 = *(_OWORD *)(a1 + 128);
      uint64_t v39 = (_DWORD *)(a1 + 208);
      int v38 = *(_DWORD *)(a1 + 208);
      long long v40 = *(_OWORD *)(a1 + 184);
      uint64_t v41 = *(void *)(a1 + 200);
      *(void *)(a1 + 184) = 0;
      *(void *)(a1 + 192) = 0;
      *(void *)(a1 + 200) = 0;
      char v110 = *(unsigned char *)(a1 + 212);
      int v106 = v38;
      int v42 = *(_DWORD *)(a2 + 8);
      uint64_t *v19 = *(void *)a2;
      *(_DWORD *)(a1 + 120) = v42;
      unint64_t v43 = (long long *)(a1 + 128);
      int v44 = *(_DWORD *)(a2 + 63);
      long long v46 = *(_OWORD *)(a2 + 32);
      long long v45 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 144) = v46;
      *(_OWORD *)(a1 + 160) = v45;
      *(_DWORD *)(a1 + 175) = v44;
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 72);
      *(void *)(a1 + 200) = *(void *)(a2 + 88);
      *(void *)(a2 + 72) = 0;
      *(void *)(a2 + 80) = 0;
      *(void *)(a2 + 88) = 0;
      unint64_t v48 = (_DWORD *)(a2 + 96);
      int v47 = *(_DWORD *)(a2 + 96);
      *(unsigned char *)(a1 + 212) = *(unsigned char *)(a2 + 100);
      *(_DWORD *)(a1 + 208) = v47;
      *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 104);
      *(void *)a2 = v115;
      *(_DWORD *)(a2 + 8) = DWORD2(v115);
      *(_OWORD *)(a2 + 16) = v120;
      *(_OWORD *)(a2 + 32) = v125;
      *(_OWORD *)(a2 + 48) = *(_OWORD *)v129;
      *(_DWORD *)(a2 + 63) = *(_DWORD *)&v129[15];
      unint64_t v49 = *(void **)(a2 + 72);
      if (v49)
      {
        *(void *)(a2 + 80) = v49;
        long long v102 = v40;
        operator delete(v49);
        long long v40 = v102;
      }
      *(_OWORD *)(a2 + 72) = v40;
      *(void *)(a2 + 88) = v41;
      *unint64_t v48 = v106;
      *(unsigned char *)(a2 + 100) = v110;
      *(_DWORD *)(a2 + 104) = v20;
      long long v126 = *(_OWORD *)(v8 + 32);
      *(_OWORD *)v130 = *(_OWORD *)(v8 + 48);
      *(_DWORD *)&v130[15] = *(_DWORD *)(v8 + 63);
      long long v116 = *(_OWORD *)v8;
      long long v121 = *(_OWORD *)(v8 + 16);
      uint64_t v50 = *(void *)(v8 + 88);
      int v107 = *(_DWORD *)(v8 + 96);
      char v111 = *(unsigned char *)(v8 + 100);
      int v51 = *(_DWORD *)(v8 + 104);
      uint64_t v52 = *v19;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(v8 + 120);
      *(void *)uint64_t v8 = v52;
      long long v54 = *(_OWORD *)(v8 + 144);
      long long v53 = *(_OWORD *)(v8 + 160);
      long long v55 = *v43;
      *(_DWORD *)(v8 + 63) = *(_DWORD *)(v8 + 175);
      *(_OWORD *)(v8 + 32) = v54;
      *(_OWORD *)(v8 + 48) = v53;
      *(_OWORD *)(v8 + 16) = v55;
      long long v56 = *(_OWORD *)(v8 + 184);
      *(void *)(v8 + 88) = *(void *)(v8 + 200);
      LODWORD(v52) = *v39;
      *(unsigned char *)(v8 + 100) = *(unsigned char *)(v8 + 212);
      *(_DWORD *)(v8 + 96) = v52;
      *(_DWORD *)(v8 + 104) = *(_DWORD *)(v8 + 216);
      uint64_t *v19 = v116;
      *(_DWORD *)(v8 + 120) = DWORD2(v116);
      long long *v43 = v121;
      *(_OWORD *)(v8 + 144) = v126;
      *(_OWORD *)(v8 + 160) = *(_OWORD *)v130;
      *(_DWORD *)(v8 + 175) = *(_DWORD *)&v130[15];
      long long v57 = *(_OWORD *)(v8 + 72);
      *(_OWORD *)(v8 + 72) = v56;
      *(_OWORD *)(v8 + 184) = v57;
      *(void *)(v8 + 200) = v50;
      _DWORD *v39 = v107;
      *(unsigned char *)(v8 + 212) = v111;
      *(_DWORD *)(v8 + 216) = v51;
    }
    else
    {
      long long v123 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)v128 = *(_OWORD *)(a1 + 48);
      *(_DWORD *)&v128[15] = *(_DWORD *)(a1 + 63);
      long long v113 = *(_OWORD *)a1;
      long long v118 = *(_OWORD *)(a1 + 16);
      long long v21 = *(_OWORD *)(a1 + 72);
      uint64_t v22 = *(void *)(a1 + 88);
      int v104 = *(_DWORD *)(a1 + 96);
      char v109 = *(unsigned char *)(a1 + 100);
      int v23 = *(_DWORD *)(a1 + 104);
      uint64_t v24 = *v19;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 120);
      *(void *)a1 = v24;
      long long v25 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 32) = v25;
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a1 + 160);
      *(_DWORD *)(a1 + 63) = *(_DWORD *)(a1 + 175);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a1 + 184);
      *(void *)(a1 + 88) = *(void *)(a1 + 200);
      LODWORD(v24) = *(_DWORD *)(a1 + 208);
      *(unsigned char *)(a1 + 100) = *(unsigned char *)(a1 + 212);
      *(_DWORD *)(a1 + 96) = v24;
      *(_DWORD *)(a1 + 104) = v20;
      uint64_t *v19 = v113;
      *(_DWORD *)(a1 + 120) = DWORD2(v113);
      *(_DWORD *)(a1 + 175) = *(_DWORD *)&v128[15];
      *(_OWORD *)(a1 + 144) = v123;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)v128;
      *(_OWORD *)(a1 + 128) = v118;
      *(unsigned char *)(a1 + 212) = v109;
      *(_DWORD *)(a1 + 208) = v104;
      *(_DWORD *)(a1 + 216) = v23;
      long long v124 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)v128 = *(_OWORD *)(a1 + 160);
      *(_DWORD *)&v128[15] = *(_DWORD *)(a1 + 175);
      long long v114 = *(_OWORD *)v19;
      long long v119 = *(_OWORD *)(a1 + 128);
      *(void *)(a1 + 192) = 0;
      *(void *)(a1 + 200) = 0;
      *(void *)(a1 + 184) = 0;
      int v105 = *(_DWORD *)(a1 + 208);
      LODWORD(v24) = *(_DWORD *)(a2 + 8);
      uint64_t *v19 = *(void *)a2;
      *(_DWORD *)(a1 + 120) = v24;
      LODWORD(v24) = *(_DWORD *)(a2 + 63);
      long long v27 = *(_OWORD *)(a2 + 32);
      long long v26 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 144) = v27;
      *(_OWORD *)(a1 + 160) = v26;
      *(_DWORD *)(a1 + 175) = v24;
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 72);
      *(void *)(a1 + 200) = *(void *)(a2 + 88);
      *(void *)(a2 + 80) = 0;
      *(void *)(a2 + 88) = 0;
      *(void *)(a2 + 72) = 0;
      long long v28 = (_DWORD *)(a2 + 96);
      LODWORD(v24) = *(_DWORD *)(a2 + 96);
      *(unsigned char *)(a1 + 212) = *(unsigned char *)(a2 + 100);
      *(_DWORD *)(a1 + 208) = v24;
      *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 104);
      *(_DWORD *)(a2 + 8) = DWORD2(v114);
      *(void *)a2 = v114;
      *(_DWORD *)(a2 + 63) = *(_DWORD *)&v128[15];
      *(_OWORD *)(a2 + 32) = v124;
      *(_OWORD *)(a2 + 48) = *(_OWORD *)v128;
      *(_OWORD *)(a2 + 16) = v119;
      unint64_t v29 = *(void **)(a2 + 72);
      if (v29)
      {
        *(void *)(a2 + 80) = v29;
        long long v101 = v21;
        operator delete(v29);
        long long v21 = v101;
      }
      *(_OWORD *)(a2 + 72) = v21;
      *(void *)(a2 + 88) = v22;
      *long long v28 = v105;
      *(unsigned char *)(a2 + 100) = v109;
      *(_DWORD *)(a2 + 104) = v23;
      return a2;
    }
    return (uint64_t)v19;
  }
  if (a4 == 2)
  {
    long long v122 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)v127 = *(_OWORD *)(a1 + 48);
    *(_DWORD *)&v127[15] = *(_DWORD *)(a1 + 63);
    long long v112 = *(_OWORD *)a1;
    long long v117 = *(_OWORD *)(a1 + 16);
    long long v10 = *(_OWORD *)(a1 + 72);
    uint64_t v11 = *(void *)(a1 + 88);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    char v108 = *(unsigned char *)(a1 + 100);
    int v103 = *(_DWORD *)(a1 + 96);
    int v12 = *(_DWORD *)(a1 + 104);
    uint64_t v13 = *(void *)a2;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(void *)a1 = v13;
    long long v14 = *(_OWORD *)(a2 + 16);
    long long v15 = *(_OWORD *)(a2 + 32);
    long long v16 = *(_OWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
    *(_OWORD *)(a1 + 32) = v15;
    *(_OWORD *)(a1 + 48) = v16;
    *(_OWORD *)(a1 + 16) = v14;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    uint64_t v17 = (_DWORD *)(a2 + 96);
    LODWORD(v13) = *(_DWORD *)(a2 + 96);
    *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
    *(_DWORD *)(a1 + 96) = v13;
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
    *(void *)a2 = v112;
    *(_DWORD *)(a2 + 8) = DWORD2(v112);
    *(_OWORD *)(a2 + 16) = v117;
    *(_OWORD *)(a2 + 32) = v122;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)v127;
    *(_DWORD *)(a2 + 63) = *(_DWORD *)&v127[15];
    unint64_t v18 = *(void **)(a2 + 72);
    if (v18)
    {
      *(void *)(a2 + 80) = v18;
      long long v100 = v10;
      operator delete(v18);
      long long v10 = v100;
    }
    *(_OWORD *)(a2 + 72) = v10;
    *(void *)(a2 + 88) = v11;
    _DWORD *v17 = v103;
    *(unsigned char *)(a2 + 100) = v108;
    *(_DWORD *)(a2 + 104) = v12;
    return a2;
  }
  if (a6 < a4)
  {
    if (a4 >= 0) {
      uint64_t v32 = a4;
    }
    else {
      uint64_t v32 = a4 + 1;
    }
    uint64_t v33 = v32 >> 1;
    uint64_t v34 = 112 * (v32 >> 1);
    uint64_t v35 = a1 + v34;
    uint64_t v36 = v33;
    int v37 = *(_DWORD *)(a1 + v34 - 8);
    if (v37 == 0x7FFFFFFF)
    {
LABEL_17:
      while (1)
      {
        v34 -= 112;
        if (!v34) {
          break;
        }
        --v36;
        int v37 = *(_DWORD *)(a1 + v34 - 8);
        if (v37 != 0x7FFFFFFF) {
          goto LABEL_16;
        }
      }
      uint64_t v77 = a1;
      uint64_t v78 = a4 - v33;
      int v79 = *(_DWORD *)(v35 + 104);
      if (v79 != 0x7FFFFFFF) {
        goto LABEL_49;
      }
    }
    else
    {
LABEL_16:
      if (*(_DWORD *)(*(void *)a3 + 128) - v37 >= 900) {
        goto LABEL_17;
      }
      uint64_t v77 = sub_C6CED4(a1, a1 + v34 - 112, a3, v36, a5, a6);
      uint64_t v78 = a4 - v33;
      int v79 = *(_DWORD *)(v35 + 104);
      if (v79 != 0x7FFFFFFF)
      {
LABEL_49:
        unint64_t v19 = (uint64_t *)(a2 + 112);
        uint64_t v98 = v8 + 112 * v33 + 112;
        do
        {
          if (*(_DWORD *)(*(void *)a3 + 128) - v79 > 899) {
            break;
          }
          if (v98 == a2) {
            goto LABEL_55;
          }
          --v78;
          int v79 = *(_DWORD *)(v98 + 104);
          v98 += 112;
        }
        while (v79 != 0x7FFFFFFF);
        uint64_t v80 = v98 - 112;
        goto LABEL_54;
      }
    }
    uint64_t v80 = v35;
LABEL_54:
    unint64_t v19 = (uint64_t *)sub_C6CED4(v80, a2, a3, v78, a5, a6);
LABEL_55:
    if (v77 != v35)
    {
      if ((uint64_t *)v35 == v19) {
        return v77;
      }
      else {
        return sub_C6D874(v77, (uint64_t *)v35, v19);
      }
    }
    return (uint64_t)v19;
  }
  *(_OWORD *)a5 = *(_OWORD *)a1;
  long long v58 = *(_OWORD *)(a1 + 16);
  long long v59 = *(_OWORD *)(a1 + 32);
  long long v60 = *(_OWORD *)(a1 + 48);
  *(_DWORD *)((char *)a5 + 63) = *(_DWORD *)(a1 + 63);
  *((_OWORD *)a5 + 2) = v59;
  *((_OWORD *)a5 + 3) = v60;
  *((_OWORD *)a5 + 1) = v58;
  a5[10] = 0;
  a5[11] = 0;
  a5[9] = 0;
  *(_OWORD *)(a5 + 9) = *(_OWORD *)(a1 + 72);
  a5[11] = *(void *)(a1 + 88);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  int v61 = *(_DWORD *)(a1 + 96);
  *((unsigned char *)a5 + 100) = *(unsigned char *)(a1 + 100);
  *((_DWORD *)a5 + 24) = v61;
  *((_DWORD *)a5 + 26) = *(_DWORD *)(a1 + 104);
  unint64_t v62 = (unint64_t)(a5 + 14);
  uint64_t v63 = a1 + 112;
  unint64_t v64 = 1;
  if (a1 + 112 == a2)
  {
    uint64_t v76 = a1;
  }
  else
  {
    do
    {
      while (1)
      {
        int v69 = *(_DWORD *)(v63 + 104);
        if (v69 != 0x7FFFFFFF && *(_DWORD *)(*(void *)a3 + 128) - v69 <= 899) {
          break;
        }
        *(_OWORD *)unint64_t v62 = *(_OWORD *)v63;
        long long v65 = *(_OWORD *)(v63 + 16);
        long long v66 = *(_OWORD *)(v63 + 32);
        long long v67 = *(_OWORD *)(v63 + 48);
        *(_DWORD *)(v62 + 63) = *(_DWORD *)(v63 + 63);
        *(_OWORD *)(v62 + 32) = v66;
        *(_OWORD *)(v62 + 48) = v67;
        *(_OWORD *)(v62 + 16) = v65;
        *(void *)(v62 + 80) = 0;
        *(void *)(v62 + 88) = 0;
        *(void *)(v62 + 72) = 0;
        *(_OWORD *)(v62 + 72) = *(_OWORD *)(v63 + 72);
        *(void *)(v62 + 88) = *(void *)(v63 + 88);
        *(void *)(v63 + 72) = 0;
        *(void *)(v63 + 80) = 0;
        *(void *)(v63 + 88) = 0;
        int v68 = *(_DWORD *)(v63 + 96);
        *(unsigned char *)(v62 + 100) = *(unsigned char *)(v63 + 100);
        *(_DWORD *)(v62 + 96) = v68;
        *(_DWORD *)(v62 + 104) = *(_DWORD *)(v63 + 104);
        ++v64;
        v62 += 112;
        v63 += 112;
        if (v63 == a2) {
          goto LABEL_31;
        }
      }
      uint64_t v70 = *(void *)v63;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(v63 + 8);
      *(void *)uint64_t v8 = v70;
      long long v71 = *(_OWORD *)(v63 + 16);
      long long v72 = *(_OWORD *)(v63 + 32);
      long long v73 = *(_OWORD *)(v63 + 48);
      *(_DWORD *)(v8 + 63) = *(_DWORD *)(v63 + 63);
      *(_OWORD *)(v8 + 32) = v72;
      *(_OWORD *)(v8 + 48) = v73;
      *(_OWORD *)(v8 + 16) = v71;
      v74 = *(void **)(v8 + 72);
      if (v74)
      {
        *(void *)(v8 + 80) = v74;
        operator delete(v74);
        *(void *)(v8 + 72) = 0;
        *(void *)(v8 + 80) = 0;
        *(void *)(v8 + 88) = 0;
      }
      *(_OWORD *)(v8 + 72) = *(_OWORD *)(v63 + 72);
      *(void *)(v8 + 88) = *(void *)(v63 + 88);
      *(void *)(v63 + 72) = 0;
      *(void *)(v63 + 80) = 0;
      *(void *)(v63 + 88) = 0;
      int v75 = *(_DWORD *)(v63 + 96);
      *(unsigned char *)(v8 + 100) = *(unsigned char *)(v63 + 100);
      *(_DWORD *)(v8 + 96) = v75;
      *(_DWORD *)(v8 + 104) = *(_DWORD *)(v63 + 104);
      v8 += 112;
      v63 += 112;
    }
    while (v63 != a2);
LABEL_31:
    uint64_t v76 = v63 - 112;
  }
  uint64_t v81 = *(void *)a2;
  *(_DWORD *)(v8 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)uint64_t v8 = v81;
  long long v82 = *(_OWORD *)(v76 + 128);
  long long v83 = *(_OWORD *)(v76 + 144);
  long long v84 = *(_OWORD *)(v76 + 160);
  *(_DWORD *)(v8 + 63) = *(_DWORD *)(v76 + 175);
  *(_OWORD *)(v8 + 32) = v83;
  *(_OWORD *)(v8 + 48) = v84;
  *(_OWORD *)(v8 + 16) = v82;
  uint64_t v85 = *(void **)(v8 + 72);
  if (v85)
  {
    *(void *)(v8 + 80) = v85;
    operator delete(v85);
    *(void *)(v8 + 72) = 0;
    *(void *)(v8 + 80) = 0;
    *(void *)(v8 + 88) = 0;
  }
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(v76 + 184);
  *(void *)(v8 + 88) = *(void *)(v76 + 200);
  *(void *)(v76 + 184) = 0;
  *(void *)(v76 + 192) = 0;
  *(void *)(v76 + 200) = 0;
  int v86 = *(_DWORD *)(v76 + 208);
  *(unsigned char *)(v8 + 100) = *(unsigned char *)(v76 + 212);
  *(_DWORD *)(v8 + 96) = v86;
  *(_DWORD *)(v8 + 104) = *(_DWORD *)(v76 + 216);
  unint64_t v19 = (uint64_t *)(v8 + 112);
  if (v62 > (unint64_t)a5)
  {
    uint64_t v87 = (_DWORD *)(v8 + 216);
    v88 = a5;
    do
    {
      uint64_t v90 = *v88;
      v91 = (void *)*((void *)v87 - 4);
      *(v87 - 24) = *((_DWORD *)v88 + 2);
      *((void *)v87 - 13) = v90;
      long long v92 = *((_OWORD *)v88 + 1);
      long long v93 = *((_OWORD *)v88 + 2);
      long long v94 = *((_OWORD *)v88 + 3);
      *(_DWORD *)((char *)v87 - 41) = *(_DWORD *)((char *)v88 + 63);
      *(_OWORD *)(v87 - 14) = v94;
      *(_OWORD *)(v87 - 18) = v93;
      *(_OWORD *)(v87 - 22) = v92;
      if (v91)
      {
        *((void *)v87 - 3) = v91;
        operator delete(v91);
        *((void *)v87 - 4) = 0;
        *((void *)v87 - 3) = 0;
        *((void *)v87 - 2) = 0;
      }
      *((_OWORD *)v87 - 2) = *(_OWORD *)(v88 + 9);
      *((void *)v87 - 2) = v88[11];
      v88[9] = 0;
      v88[10] = 0;
      v88[11] = 0;
      int v89 = *((_DWORD *)v88 + 24);
      *((unsigned char *)v87 - 4) = *((unsigned char *)v88 + 100);
      *(v87 - 2) = v89;
      _DWORD *v87 = *((_DWORD *)v88 + 26);
      v87 += 28;
      v88 += 14;
    }
    while ((unint64_t)v88 < v62);
  }
  if (a5 && v64)
  {
    unint64_t v95 = 0;
    v96 = a5 + 10;
    do
    {
      __n128 v97 = (void *)*(v96 - 1);
      if (v97)
      {
        void *v96 = v97;
        operator delete(v97);
      }
      ++v95;
      v96 += 14;
    }
    while (v95 < v64);
  }
  return (uint64_t)v19;
}

uint64_t *sub_C6D7FC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)a1[1];
    unint64_t v4 = *v3;
    if (*v3)
    {
      unint64_t v5 = 0;
      uint64_t v6 = (void *)(v2 + 80);
      do
      {
        unint64_t v7 = (void *)*(v6 - 1);
        if (v7)
        {
          void *v6 = v7;
          operator delete(v7);
          unint64_t v4 = *v3;
        }
        ++v5;
        v6 += 14;
      }
      while (v5 < v4);
    }
  }
  return a1;
}

uint64_t sub_C6D874(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = a2;
  uint64_t v5 = a1 + 112;
  uint64_t v6 = (long long *)(a1 + 112);
  unint64_t v7 = a2;
  while (1)
  {
    long long v53 = *(v6 - 5);
    *(_OWORD *)long long v56 = *(v6 - 4);
    *(_DWORD *)&v56[15] = *(_DWORD *)((char *)v6 - 49);
    long long v47 = *(v6 - 7);
    long long v50 = *(v6 - 6);
    long long v8 = *(long long *)((char *)v6 - 40);
    uint64_t v9 = *((void *)v6 - 3);
    *((void *)v6 - 5) = 0;
    *((void *)v6 - 4) = 0;
    *((void *)v6 - 3) = 0;
    char v44 = *((unsigned char *)v6 - 12);
    int v41 = *((_DWORD *)v6 - 4);
    int v10 = *((_DWORD *)v6 - 2);
    uint64_t v11 = *v7;
    *((_DWORD *)v6 - 26) = *((_DWORD *)v7 + 2);
    *((void *)v6 - 14) = v11;
    long long v12 = *((_OWORD *)v7 + 1);
    long long v13 = *((_OWORD *)v7 + 2);
    long long v14 = *((_OWORD *)v7 + 3);
    *(_DWORD *)((char *)v6 - 49) = *(_DWORD *)((char *)v7 + 63);
    *(v6 - 5) = v13;
    *(v6 - 4) = v14;
    *(v6 - 6) = v12;
    *(long long *)((char *)v6 - 40) = *(_OWORD *)(v7 + 9);
    *((void *)v6 - 3) = v7[11];
    v7[9] = 0;
    v7[10] = 0;
    v7[11] = 0;
    LODWORD(v11) = *((_DWORD *)v7 + 24);
    *((unsigned char *)v6 - 12) = *((unsigned char *)v7 + 100);
    *((_DWORD *)v6 - 4) = v11;
    *((_DWORD *)v6 - 2) = *((_DWORD *)v7 + 26);
    uint64_t *v7 = v47;
    *((_DWORD *)v7 + 2) = DWORD2(v47);
    *((_OWORD *)v7 + 1) = v50;
    *((_OWORD *)v7 + 2) = v53;
    *((_OWORD *)v7 + 3) = *(_OWORD *)v56;
    *(_DWORD *)((char *)v7 + 63) = *(_DWORD *)&v56[15];
    long long v15 = (void *)v7[9];
    if (v15)
    {
      v7[10] = (uint64_t)v15;
      long long v38 = v8;
      operator delete(v15);
      long long v8 = v38;
    }
    *(_OWORD *)(v7 + 9) = v8;
    v7[11] = v9;
    *((_DWORD *)v7 + 24) = v41;
    *((unsigned char *)v7 + 100) = v44;
    *((_DWORD *)v7 + 26) = v10;
    v7 += 14;
    if (v7 == a3) {
      break;
    }
    if (v6 == (long long *)v4) {
      unint64_t v4 = v7;
    }
    v6 += 7;
    v5 += 112;
  }
  uint64_t v37 = v5;
  if (v6 != (long long *)v4)
  {
    long long v16 = v4;
    while (1)
    {
      long long v48 = *v6;
      *(_DWORD *)&v57[15] = *(_DWORD *)((char *)v6 + 63);
      long long v54 = v6[2];
      *(_OWORD *)long long v57 = v6[3];
      long long v51 = v6[1];
      long long v17 = *(long long *)((char *)v6 + 72);
      uint64_t v18 = *((void *)v6 + 11);
      *((void *)v6 + 9) = 0;
      *((void *)v6 + 10) = 0;
      *((void *)v6 + 11) = 0;
      char v45 = *((unsigned char *)v6 + 100);
      int v42 = *((_DWORD *)v6 + 24);
      int v19 = *((_DWORD *)v6 + 26);
      uint64_t v20 = *v16;
      *((_DWORD *)v6 + 2) = *((_DWORD *)v16 + 2);
      *(void *)uint64_t v6 = v20;
      long long v22 = *((_OWORD *)v16 + 2);
      long long v21 = *((_OWORD *)v16 + 3);
      long long v23 = *((_OWORD *)v16 + 1);
      *(_DWORD *)((char *)v6 + 63) = *(_DWORD *)((char *)v16 + 63);
      v6[2] = v22;
      v6[3] = v21;
      v6[1] = v23;
      *(long long *)((char *)v6 + 72) = *(_OWORD *)(v16 + 9);
      *((void *)v6 + 11) = v16[11];
      v16[9] = 0;
      v16[10] = 0;
      v16[11] = 0;
      LODWORD(v20) = *((_DWORD *)v16 + 24);
      *((unsigned char *)v6 + 100) = *((unsigned char *)v16 + 100);
      *((_DWORD *)v6 + 24) = v20;
      *((_DWORD *)v6 + 26) = *((_DWORD *)v16 + 26);
      *((_DWORD *)v16 + 2) = DWORD2(v48);
      uint64_t *v16 = v48;
      *(_DWORD *)((char *)v16 + 63) = *(_DWORD *)&v57[15];
      *((_OWORD *)v16 + 2) = v54;
      *((_OWORD *)v16 + 3) = *(_OWORD *)v57;
      *((_OWORD *)v16 + 1) = v51;
      uint64_t v24 = (void *)v16[9];
      if (v24)
      {
        v16[10] = (uint64_t)v24;
        long long v39 = v17;
        operator delete(v24);
        long long v17 = v39;
      }
      *(_OWORD *)(v16 + 9) = v17;
      v16[11] = v18;
      *((_DWORD *)v16 + 24) = v42;
      *((unsigned char *)v16 + 100) = v45;
      *((_DWORD *)v16 + 26) = v19;
      v6 += 7;
      v16 += 14;
      BOOL v25 = v6 == (long long *)v4;
      if (v16 == a3)
      {
        if (v6 == (long long *)v4) {
          return v37;
        }
        long long v26 = (long long *)(v4 + 2);
        long long v27 = v4 + 12;
        long long v16 = v4 + 14;
        while (1)
        {
          long long v49 = *v6;
          *(_DWORD *)&v58[15] = *(_DWORD *)((char *)v6 + 63);
          long long v55 = v6[2];
          *(_OWORD *)long long v58 = v6[3];
          long long v52 = v6[1];
          long long v28 = *(long long *)((char *)v6 + 72);
          uint64_t v29 = *((void *)v6 + 11);
          *((void *)v6 + 10) = 0;
          *((void *)v6 + 11) = 0;
          *((void *)v6 + 9) = 0;
          int v43 = *((_DWORD *)v6 + 24);
          char v46 = *((unsigned char *)v6 + 100);
          int v30 = *((_DWORD *)v6 + 26);
          uint64_t v31 = *v4;
          *((_DWORD *)v6 + 2) = *((_DWORD *)v4 + 2);
          *(void *)uint64_t v6 = v31;
          long long v32 = *v26;
          long long v33 = *((_OWORD *)v4 + 2);
          long long v34 = *((_OWORD *)v4 + 3);
          *(_DWORD *)((char *)v6 + 63) = *(_DWORD *)((char *)v4 + 63);
          v6[2] = v33;
          v6[3] = v34;
          v6[1] = v32;
          *(long long *)((char *)v6 + 72) = *(_OWORD *)(v4 + 9);
          *((void *)v6 + 11) = v4[11];
          v4[9] = 0;
          v4[10] = 0;
          v4[11] = 0;
          LODWORD(v31) = *v27;
          *((unsigned char *)v6 + 100) = *((unsigned char *)v4 + 100);
          *((_DWORD *)v6 + 24) = v31;
          *((_DWORD *)v6 + 26) = *((_DWORD *)v4 + 26);
          *((_DWORD *)v4 + 2) = DWORD2(v49);
          uint64_t *v4 = v49;
          *(_DWORD *)((char *)v4 + 63) = *(_DWORD *)&v58[15];
          *((_OWORD *)v4 + 2) = v55;
          *((_OWORD *)v4 + 3) = *(_OWORD *)v58;
          long long *v26 = v52;
          uint64_t v35 = (void *)v4[9];
          if (v35)
          {
            v4[10] = (uint64_t)v35;
            long long v40 = v28;
            operator delete(v35);
            long long v28 = v40;
          }
          *(_OWORD *)(v4 + 9) = v28;
          v4[11] = v29;
          _DWORD *v27 = v43;
          *((unsigned char *)v4 + 100) = v46;
          *((_DWORD *)v4 + 26) = v30;
          v6 += 7;
          BOOL v25 = v6 == (long long *)v4;
          if (v16 != a3) {
            break;
          }
          if (v6 == (long long *)v4) {
            return v37;
          }
        }
      }
      if (v25) {
        unint64_t v4 = v16;
      }
    }
  }
  return v37;
}

void sub_C6DC54(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 < 2) {
    return;
  }
  if (a3 == 2)
  {
    int v7 = *((_DWORD *)a2 - 2);
    int v8 = *(_DWORD *)(a1 + 104);
    if (v7 == 0x7FFFFFFF)
    {
      if (v8 != 0x7FFFFFFF) {
        return;
      }
    }
    else if (v8 != 0x7FFFFFFF && v7 <= v8)
    {
      return;
    }
    long long v16 = a2 - 14;
    long long v99 = *(_OWORD *)(a1 + 16);
    long long v100 = *(_OWORD *)(a1 + 32);
    v101[0] = *(_OWORD *)(a1 + 48);
    *(_DWORD *)((char *)v101 + 15) = *(_DWORD *)(a1 + 63);
    long long v98 = *(_OWORD *)a1;
    long long v17 = *(_OWORD *)(a1 + 72);
    uint64_t v18 = *(void *)(a1 + 88);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    int v19 = *(_DWORD *)(a1 + 96);
    BYTE4(v97) = *(unsigned char *)(a1 + 100);
    LODWORD(v97) = v19;
    uint64_t v20 = *(a2 - 14);
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 - 26);
    *(void *)a1 = v20;
    long long v21 = *((_OWORD *)a2 - 6);
    long long v22 = *((_OWORD *)a2 - 5);
    long long v23 = *((_OWORD *)a2 - 4);
    *(_DWORD *)(a1 + 63) = *(_DWORD *)((char *)a2 - 49);
    *(_OWORD *)(a1 + 32) = v22;
    *(_OWORD *)(a1 + 48) = v23;
    *(_OWORD *)(a1 + 16) = v21;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 - 5);
    *(void *)(a1 + 88) = *(a2 - 3);
    *(a2 - 5) = 0;
    *(a2 - 3) = 0;
    uint64_t v24 = a2 - 2;
    LODWORD(v20) = *((_DWORD *)a2 - 4);
    *(a2 - 4) = 0;
    *(unsigned char *)(a1 + 100) = *((unsigned char *)a2 - 12);
    *(_DWORD *)(a1 + 96) = v20;
    *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 - 2);
    void *v16 = v98;
    *((_DWORD *)v16 + 2) = DWORD2(v98);
    *((_OWORD *)a2 - 6) = v99;
    *((_OWORD *)a2 - 5) = v100;
    *((_OWORD *)a2 - 4) = v101[0];
    *(_DWORD *)((char *)a2 - 49) = *(_DWORD *)((char *)v101 + 15);
    BOOL v25 = (void *)*(a2 - 5);
    if (v25)
    {
      *(a2 - 4) = v25;
      long long v95 = v17;
      operator delete(v25);
      long long v17 = v95;
    }
    *(_OWORD *)(a2 - 5) = v17;
    *(a2 - 3) = v18;
    _DWORD *v24 = v97;
    *((unsigned char *)a2 - 12) = BYTE4(v97);
    *((_DWORD *)a2 - 2) = v8;
    return;
  }
  if ((uint64_t)a3 <= 0)
  {
    if ((void *)a1 == a2) {
      return;
    }
    uint64_t v26 = a1 + 112;
    if ((void *)(a1 + 112) == a2) {
      return;
    }
    uint64_t v27 = 0;
    uint64_t v28 = a1;
    while (1)
    {
      uint64_t v29 = v28;
      uint64_t v28 = v26;
      int v30 = *(_DWORD *)(v29 + 216);
      int v31 = *(_DWORD *)(v29 + 104);
      if (v30 == 0x7FFFFFFF)
      {
        if (v31 != 0x7FFFFFFF) {
          goto LABEL_22;
        }
      }
      else if (v31 != 0x7FFFFFFF && v30 <= v31)
      {
        goto LABEL_22;
      }
      long long v99 = *(_OWORD *)(v28 + 16);
      long long v100 = *(_OWORD *)(v28 + 32);
      v101[0] = *(_OWORD *)(v28 + 48);
      *(_DWORD *)((char *)v101 + 15) = *(_DWORD *)(v28 + 63);
      long long v98 = *(_OWORD *)v28;
      uint64_t v33 = *(void *)(v29 + 184);
      long long v96 = *(_OWORD *)(v29 + 192);
      *(void *)(v29 + 184) = 0;
      *(void *)(v29 + 192) = 0;
      *(void *)(v29 + 200) = 0;
      int v34 = *(_DWORD *)(v29 + 208);
      BYTE4(v97) = *(unsigned char *)(v29 + 212);
      LODWORD(v97) = v34;
      int v35 = *(_DWORD *)(v29 + 216);
      uint64_t v36 = v27;
      if (v35 == 0x7FFFFFFF)
      {
        uint64_t v36 = v27;
        while (1)
        {
          uint64_t v37 = v36;
          uint64_t v38 = a1 + v36;
          *(void *)(v38 + 112) = *(void *)(a1 + v36);
          *(_DWORD *)(v38 + 120) = *(_DWORD *)(a1 + v36 + 8);
          long long v39 = *(_OWORD *)(a1 + v36 + 32);
          *(_OWORD *)(v38 + 128) = *(_OWORD *)(a1 + v36 + 16);
          *(_OWORD *)(v38 + 144) = v39;
          *(_OWORD *)(v38 + 160) = *(_OWORD *)(a1 + v36 + 48);
          *(_DWORD *)(v38 + 175) = *(_DWORD *)(a1 + v36 + 63);
          long long v40 = *(void **)(a1 + v36 + 184);
          if (v40)
          {
            *(void *)(v38 + 192) = v40;
            operator delete(v40);
            *(void *)(v38 + 192) = 0;
            *(void *)(v38 + 200) = 0;
          }
          *(_OWORD *)(v38 + 184) = *(_OWORD *)(v38 + 72);
          *(void *)(v38 + 200) = *(void *)(v38 + 88);
          *(void *)(v38 + 72) = 0;
          *(void *)(v38 + 80) = 0;
          *(void *)(v38 + 88) = 0;
          *(_DWORD *)(v38 + 208) = *(_DWORD *)(v38 + 96);
          *(unsigned char *)(v38 + 212) = *(unsigned char *)(v38 + 100);
          *(_DWORD *)(v38 + 216) = *(_DWORD *)(v38 + 104);
          if (!v37) {
            break;
          }
          uint64_t v36 = v37 - 112;
          if (*(_DWORD *)(a1 + v37 - 8) != 0x7FFFFFFF) {
            goto LABEL_42;
          }
        }
LABEL_43:
        uint64_t v45 = a1;
      }
      else
      {
        do
        {
          uint64_t v37 = v36;
          uint64_t v41 = a1 + v36;
          *(void *)(v41 + 112) = *(void *)(a1 + v36);
          *(_DWORD *)(v41 + 120) = *(_DWORD *)(a1 + v36 + 8);
          long long v42 = *(_OWORD *)(a1 + v36 + 32);
          *(_OWORD *)(v41 + 128) = *(_OWORD *)(a1 + v36 + 16);
          *(_OWORD *)(v41 + 144) = v42;
          *(_OWORD *)(v41 + 160) = *(_OWORD *)(a1 + v36 + 48);
          *(_DWORD *)(v41 + 175) = *(_DWORD *)(a1 + v36 + 63);
          int v43 = *(void **)(a1 + v36 + 184);
          if (v43)
          {
            *(void *)(v41 + 192) = v43;
            operator delete(v43);
            *(void *)(v41 + 192) = 0;
            *(void *)(v41 + 200) = 0;
          }
          *(_OWORD *)(v41 + 184) = *(_OWORD *)(v41 + 72);
          *(void *)(v41 + 200) = *(void *)(v41 + 88);
          *(void *)(v41 + 72) = 0;
          *(void *)(v41 + 80) = 0;
          *(void *)(v41 + 88) = 0;
          *(_DWORD *)(v41 + 208) = *(_DWORD *)(v41 + 96);
          *(unsigned char *)(v41 + 212) = *(unsigned char *)(v41 + 100);
          *(_DWORD *)(v41 + 216) = *(_DWORD *)(v41 + 104);
          if (!v37) {
            goto LABEL_43;
          }
          int v44 = *(_DWORD *)(a1 + v37 - 8);
          uint64_t v36 = v37 - 112;
        }
        while (v44 == 0x7FFFFFFF || v35 > v44);
LABEL_42:
        uint64_t v45 = a1 + v36 + 112;
      }
      uint64_t v46 = a1 + v37 + 16;
      uint64_t v47 = a1 + v37 + 72;
      uint64_t v48 = a1 + v37 + 96;
      uint64_t v49 = v98;
      *(_DWORD *)(v45 + 8) = DWORD2(v98);
      *(void *)uint64_t v45 = v49;
      *(_OWORD *)uint64_t v46 = v99;
      *(_OWORD *)(v46 + 16) = v100;
      *(_OWORD *)(v46 + 32) = v101[0];
      *(_DWORD *)(v46 + 47) = *(_DWORD *)((char *)v101 + 15);
      long long v50 = *(void **)v47;
      if (*(void *)v47)
      {
        *(void *)(v45 + 80) = v50;
        operator delete(v50);
        *(void *)(v47 + 8) = 0;
        *(void *)(v47 + 16) = 0;
      }
      *(void *)uint64_t v47 = v33;
      *(_OWORD *)(v45 + 80) = v96;
      *(_DWORD *)uint64_t v48 = v97;
      *(unsigned char *)(v48 + 4) = BYTE4(v97);
      *(_DWORD *)(v45 + 104) = v35;
LABEL_22:
      uint64_t v26 = v28 + 112;
      v27 += 112;
      if ((void *)(v28 + 112) == a2) {
        return;
      }
    }
  }
  uint64_t v11 = a4;
  uint64_t v12 = a3 >> 1;
  uint64_t v13 = a1 + 112 * (a3 >> 1);
  if ((uint64_t)a3 > a5)
  {
    sub_C6DC54(a1, a1 + 112 * (a3 >> 1), a3 >> 1, a4, a5);
    uint64_t v14 = a3 - v12;
    sub_C6DC54(v13, a2, v14, v11, a5);
    sub_C6EBC0(a1, v13, a2, v12, v14, v11, a5);
    return;
  }
  unint64_t v97 = 0;
  *(void *)&long long v98 = a4;
  *((void *)&v98 + 1) = &v97;
  sub_C6E44C((uint64_t *)a1, (uint64_t *)(a1 + 112 * (a3 >> 1)), a3 >> 1, a4);
  unint64_t v97 = a3 >> 1;
  unint64_t v51 = a3 - v12;
  uint64_t v52 = v11 + 112 * v12;
  sub_C6E44C((uint64_t *)(a1 + 112 * (a3 >> 1)), a2, v51, v52);
  unint64_t v53 = v11 + 112 * a3;
  unint64_t v97 = a3;
  uint64_t v54 = a1 + 72;
  uint64_t v55 = v52;
  uint64_t v56 = v11;
  while (v55 != v53)
  {
    long long v58 = (void *)(v54 - 72);
    int v59 = *(_DWORD *)(v55 + 104);
    int v60 = *(_DWORD *)(v56 + 104);
    if (v59 == 0x7FFFFFFF)
    {
      if (v60 == 0x7FFFFFFF) {
        goto LABEL_59;
      }
LABEL_51:
      uint64_t v61 = *(void *)v56;
      *(_DWORD *)(v54 - 64) = *(_DWORD *)(v56 + 8);
      *long long v58 = v61;
      long long v62 = *(_OWORD *)(v56 + 16);
      long long v63 = *(_OWORD *)(v56 + 32);
      long long v64 = *(_OWORD *)(v56 + 48);
      *(_DWORD *)(v54 - 9) = *(_DWORD *)(v56 + 63);
      *(_OWORD *)(v54 - 24) = v64;
      *(_OWORD *)(v54 - 40) = v63;
      *(_OWORD *)(v54 - 56) = v62;
      long long v65 = *(void **)v54;
      if (*(void *)v54)
      {
        *(void *)(v54 + 8) = v65;
        operator delete(v65);
        *(void *)uint64_t v54 = 0;
        *(void *)(v54 + 8) = 0;
        *(void *)(v54 + 16) = 0;
      }
      *(_OWORD *)uint64_t v54 = *(_OWORD *)(v56 + 72);
      *(void *)(v54 + 16) = *(void *)(v56 + 88);
      *(void *)(v56 + 72) = 0;
      *(void *)(v56 + 80) = 0;
      *(void *)(v56 + 88) = 0;
      int v66 = *(_DWORD *)(v56 + 96);
      *(unsigned char *)(v54 + 28) = *(unsigned char *)(v56 + 100);
      *(_DWORD *)(v54 + 24) = v66;
      *(_DWORD *)(v54 + 32) = *(_DWORD *)(v56 + 104);
      v56 += 112;
      v54 += 112;
      if (v56 == v52) {
        goto LABEL_66;
      }
    }
    else
    {
      if (v60 != 0x7FFFFFFF && v59 <= v60) {
        goto LABEL_51;
      }
LABEL_59:
      uint64_t v68 = *(void *)v55;
      *(_DWORD *)(v54 - 64) = *(_DWORD *)(v55 + 8);
      *long long v58 = v68;
      long long v69 = *(_OWORD *)(v55 + 16);
      long long v70 = *(_OWORD *)(v55 + 32);
      long long v71 = *(_OWORD *)(v55 + 48);
      *(_DWORD *)(v54 - 9) = *(_DWORD *)(v55 + 63);
      *(_OWORD *)(v54 - 24) = v71;
      *(_OWORD *)(v54 - 40) = v70;
      *(_OWORD *)(v54 - 56) = v69;
      long long v72 = *(void **)v54;
      if (*(void *)v54)
      {
        *(void *)(v54 + 8) = v72;
        operator delete(v72);
        *(void *)uint64_t v54 = 0;
        *(void *)(v54 + 8) = 0;
        *(void *)(v54 + 16) = 0;
      }
      *(_OWORD *)uint64_t v54 = *(_OWORD *)(v55 + 72);
      *(void *)(v54 + 16) = *(void *)(v55 + 88);
      *(void *)(v55 + 72) = 0;
      *(void *)(v55 + 80) = 0;
      *(void *)(v55 + 88) = 0;
      int v57 = *(_DWORD *)(v55 + 96);
      *(unsigned char *)(v54 + 28) = *(unsigned char *)(v55 + 100);
      *(_DWORD *)(v54 + 24) = v57;
      *(_DWORD *)(v54 + 32) = *(_DWORD *)(v55 + 104);
      v55 += 112;
      v54 += 112;
      if (v56 == v52)
      {
LABEL_66:
        if (v55 != v53)
        {
          uint64_t v82 = 0;
          do
          {
            uint64_t v84 = v55 + v82;
            uint64_t v85 = v54 + v82;
            uint64_t v86 = *(void *)(v55 + v82);
            *(_DWORD *)(v85 - 64) = *(_DWORD *)(v55 + v82 + 8);
            *(void *)(v85 - 72) = v86;
            long long v87 = *(_OWORD *)(v55 + v82 + 16);
            long long v88 = *(_OWORD *)(v55 + v82 + 32);
            long long v89 = *(_OWORD *)(v55 + v82 + 48);
            *(_DWORD *)(v85 - 9) = *(_DWORD *)(v55 + v82 + 63);
            *(_OWORD *)(v85 - 24) = v89;
            *(_OWORD *)(v85 - 40) = v88;
            *(_OWORD *)(v85 - 56) = v87;
            uint64_t v90 = *(void **)(v54 + v82);
            if (v90)
            {
              *(void *)(v85 + 8) = v90;
              operator delete(v90);
              *(void *)uint64_t v85 = 0;
              *(void *)(v85 + 8) = 0;
              *(void *)(v85 + 16) = 0;
            }
            *(_OWORD *)uint64_t v85 = *(_OWORD *)(v84 + 72);
            *(void *)(v85 + 16) = *(void *)(v84 + 88);
            *(void *)(v84 + 72) = 0;
            *(void *)(v84 + 80) = 0;
            *(void *)(v84 + 88) = 0;
            int v83 = *(_DWORD *)(v84 + 96);
            *(unsigned char *)(v85 + 28) = *(unsigned char *)(v84 + 100);
            *(_DWORD *)(v85 + 24) = v83;
            *(_DWORD *)(v85 + 32) = *(_DWORD *)(v84 + 104);
            v82 += 112;
          }
          while (v84 + 112 != v53);
          uint64_t v11 = v98;
        }
        goto LABEL_72;
      }
    }
  }
  if (v56 != v52)
  {
    uint64_t v73 = 0;
    do
    {
      uint64_t v75 = v56 + v73;
      uint64_t v76 = v54 + v73;
      uint64_t v77 = *(void *)(v56 + v73);
      *(_DWORD *)(v76 - 64) = *(_DWORD *)(v56 + v73 + 8);
      *(void *)(v76 - 72) = v77;
      long long v78 = *(_OWORD *)(v56 + v73 + 16);
      long long v79 = *(_OWORD *)(v56 + v73 + 32);
      long long v80 = *(_OWORD *)(v56 + v73 + 48);
      *(_DWORD *)(v76 - 9) = *(_DWORD *)(v56 + v73 + 63);
      *(_OWORD *)(v76 - 24) = v80;
      *(_OWORD *)(v76 - 40) = v79;
      *(_OWORD *)(v76 - 56) = v78;
      uint64_t v81 = *(void **)(v54 + v73);
      if (v81)
      {
        *(void *)(v76 + 8) = v81;
        operator delete(v81);
        *(void *)uint64_t v76 = 0;
        *(void *)(v76 + 8) = 0;
        *(void *)(v76 + 16) = 0;
      }
      *(_OWORD *)uint64_t v76 = *(_OWORD *)(v75 + 72);
      *(void *)(v76 + 16) = *(void *)(v75 + 88);
      *(void *)(v75 + 72) = 0;
      *(void *)(v75 + 80) = 0;
      *(void *)(v75 + 88) = 0;
      int v74 = *(_DWORD *)(v75 + 96);
      *(unsigned char *)(v76 + 28) = *(unsigned char *)(v75 + 100);
      *(_DWORD *)(v76 + 24) = v74;
      *(_DWORD *)(v76 + 32) = *(_DWORD *)(v75 + 104);
      v73 += 112;
    }
    while (v75 + 112 != v52);
  }
LABEL_72:
  if (v11)
  {
    unint64_t v91 = v97;
    if (v97)
    {
      unint64_t v92 = 0;
      long long v93 = (void *)(v11 + 80);
      do
      {
        long long v94 = (void *)*(v93 - 1);
        if (v94)
        {
          *long long v93 = v94;
          operator delete(v94);
          unint64_t v91 = v97;
        }
        ++v92;
        v93 += 14;
      }
      while (v92 < v91);
    }
  }
}

void sub_C6E438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_C6D7FC((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 sub_C6E44C(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  if (!a3) {
    return result;
  }
  uint64_t v6 = a2;
  int v7 = a1;
  if (a3 == 2)
  {
    int v15 = *((_DWORD *)a2 - 2);
    long long v16 = a2 - 14;
    uint64_t v14 = a1 + 13;
    int v17 = *((_DWORD *)a1 + 26);
    if (v15 == 0x7FFFFFFF)
    {
      if (v17 != 0x7FFFFFFF)
      {
LABEL_7:
        *(_OWORD *)a4 = *(_OWORD *)a1;
        long long v18 = *((_OWORD *)a1 + 1);
        long long v19 = *((_OWORD *)a1 + 2);
        long long v20 = *((_OWORD *)a1 + 3);
        *(_DWORD *)(a4 + 63) = *(_DWORD *)((char *)a1 + 63);
        *(_OWORD *)(a4 + 32) = v19;
        *(_OWORD *)(a4 + 48) = v20;
        *(_OWORD *)(a4 + 16) = v18;
        *(void *)(a4 + 80) = 0;
        *(void *)(a4 + 88) = 0;
        *(void *)(a4 + 72) = 0;
        *(_OWORD *)(a4 + 72) = *(_OWORD *)(a1 + 9);
        *(void *)(a4 + 88) = a1[11];
        a1[9] = 0;
        a1[10] = 0;
        a1[11] = 0;
        int v21 = *((_DWORD *)a1 + 24);
        *(unsigned char *)(a4 + 100) = *((unsigned char *)a1 + 100);
        *(_DWORD *)(a4 + 96) = v21;
        *(_DWORD *)(a4 + 104) = *((_DWORD *)a1 + 26);
        *(_OWORD *)(a4 + 112) = *(_OWORD *)v16;
        long long v22 = *((_OWORD *)a2 - 6);
        long long v23 = *((_OWORD *)a2 - 5);
        long long v24 = *((_OWORD *)a2 - 4);
        *(_DWORD *)(a4 + 175) = *(_DWORD *)((char *)a2 - 49);
        *(_OWORD *)(a4 + 144) = v23;
        *(_OWORD *)(a4 + 160) = v24;
        *(_OWORD *)(a4 + 128) = v22;
        *(void *)(a4 + 192) = 0;
        *(void *)(a4 + 200) = 0;
        *(void *)(a4 + 184) = 0;
        __n128 result = *(__n128 *)(a2 - 5);
        *(__n128 *)(a4 + 184) = result;
        *(void *)(a4 + 200) = *(a2 - 3);
        *(a2 - 5) = 0;
        *(a2 - 4) = 0;
        *(a2 - 3) = 0;
        int v25 = *((_DWORD *)a2 - 4);
        *(unsigned char *)(a4 + 212) = *((unsigned char *)a2 - 12);
        *(_DWORD *)(a4 + 208) = v25;
        uint64_t v13 = (_DWORD *)(a4 + 216);
        uint64_t v14 = a2 - 1;
        goto LABEL_43;
      }
    }
    else if (v17 != 0x7FFFFFFF && v15 <= v17)
    {
      goto LABEL_7;
    }
    *(_OWORD *)a4 = *(_OWORD *)v16;
    long long v62 = *((_OWORD *)a2 - 6);
    long long v63 = *((_OWORD *)a2 - 5);
    long long v64 = *((_OWORD *)a2 - 4);
    *(_DWORD *)(a4 + 63) = *(_DWORD *)((char *)a2 - 49);
    *(_OWORD *)(a4 + 32) = v63;
    *(_OWORD *)(a4 + 48) = v64;
    *(_OWORD *)(a4 + 16) = v62;
    *(void *)(a4 + 80) = 0;
    *(void *)(a4 + 88) = 0;
    *(void *)(a4 + 72) = 0;
    *(_OWORD *)(a4 + 72) = *(_OWORD *)(a2 - 5);
    *(void *)(a4 + 88) = *(a2 - 3);
    *(a2 - 5) = 0;
    *(a2 - 4) = 0;
    *(a2 - 3) = 0;
    int v65 = *((_DWORD *)a2 - 4);
    *(unsigned char *)(a4 + 100) = *((unsigned char *)a2 - 12);
    *(_DWORD *)(a4 + 96) = v65;
    *(_DWORD *)(a4 + 104) = *((_DWORD *)a2 - 2);
    *(_OWORD *)(a4 + 112) = *(_OWORD *)a1;
    long long v66 = *((_OWORD *)a1 + 1);
    long long v67 = *((_OWORD *)a1 + 2);
    long long v68 = *((_OWORD *)a1 + 3);
    *(_DWORD *)(a4 + 175) = *(_DWORD *)((char *)a1 + 63);
    *(_OWORD *)(a4 + 144) = v67;
    *(_OWORD *)(a4 + 160) = v68;
    *(_OWORD *)(a4 + 128) = v66;
    *(void *)(a4 + 192) = 0;
    *(void *)(a4 + 200) = 0;
    *(void *)(a4 + 184) = 0;
    __n128 result = *(__n128 *)(a1 + 9);
    *(__n128 *)(a4 + 184) = result;
    *(void *)(a4 + 200) = a1[11];
    a1[9] = 0;
    a1[10] = 0;
    a1[11] = 0;
    int v69 = *((_DWORD *)a1 + 24);
    *(unsigned char *)(a4 + 212) = *((unsigned char *)a1 + 100);
    *(_DWORD *)(a4 + 208) = v69;
    uint64_t v13 = (_DWORD *)(a4 + 216);
    goto LABEL_43;
  }
  if (a3 == 1)
  {
    *(_OWORD *)a4 = *(_OWORD *)a1;
    long long v8 = *((_OWORD *)a1 + 1);
    long long v9 = *((_OWORD *)a1 + 2);
    long long v10 = *((_OWORD *)a1 + 3);
    *(_DWORD *)(a4 + 63) = *(_DWORD *)((char *)a1 + 63);
    *(_OWORD *)(a4 + 32) = v9;
    *(_OWORD *)(a4 + 48) = v10;
    *(_OWORD *)(a4 + 16) = v8;
    *(void *)(a4 + 80) = 0;
    *(void *)(a4 + 88) = 0;
    *(void *)(a4 + 72) = 0;
    __n128 result = *(__n128 *)(a1 + 9);
    *(__n128 *)(a4 + 72) = result;
    *(void *)(a4 + 88) = a1[11];
    a1[9] = 0;
    a1[10] = 0;
    a1[11] = 0;
    int v12 = *((_DWORD *)a1 + 24);
    *(unsigned char *)(a4 + 100) = *((unsigned char *)a1 + 100);
    *(_DWORD *)(a4 + 96) = v12;
    uint64_t v13 = (_DWORD *)(a4 + 104);
    uint64_t v14 = a1 + 13;
LABEL_43:
    _DWORD *v13 = *(_DWORD *)v14;
    return result;
  }
  if ((uint64_t)a3 <= 8)
  {
    if (a1 == a2) {
      return result;
    }
    *(_OWORD *)a4 = *(_OWORD *)a1;
    long long v26 = *((_OWORD *)a1 + 1);
    long long v27 = *((_OWORD *)a1 + 2);
    long long v28 = *((_OWORD *)a1 + 3);
    *(_DWORD *)(a4 + 63) = *(_DWORD *)((char *)a1 + 63);
    *(_OWORD *)(a4 + 32) = v27;
    *(_OWORD *)(a4 + 48) = v28;
    *(_OWORD *)(a4 + 16) = v26;
    *(void *)(a4 + 80) = 0;
    *(void *)(a4 + 88) = 0;
    *(void *)(a4 + 72) = 0;
    __n128 result = *(__n128 *)(a1 + 9);
    *(__n128 *)(a4 + 72) = result;
    *(void *)(a4 + 88) = a1[11];
    a1[9] = 0;
    a1[10] = 0;
    a1[11] = 0;
    int v29 = *((_DWORD *)a1 + 24);
    *(unsigned char *)(a4 + 100) = *((unsigned char *)a1 + 100);
    *(_DWORD *)(a4 + 96) = v29;
    *(_DWORD *)(a4 + 104) = *((_DWORD *)a1 + 26);
    int v30 = a1 + 14;
    if (a1 + 14 == a2) {
      return result;
    }
    uint64_t v31 = 0;
    long long v32 = (_OWORD *)a4;
LABEL_14:
    uint64_t v38 = v30;
    long long v39 = v32 + 7;
    int v40 = *((_DWORD *)v7 + 54);
    int v41 = *((_DWORD *)v32 + 26);
    if (v40 == 0x7FFFFFFF)
    {
      if (v41 != 0x7FFFFFFF) {
        goto LABEL_12;
      }
    }
    else if (v41 != 0x7FFFFFFF && v40 <= v41)
    {
LABEL_12:
      _OWORD *v39 = *(_OWORD *)v38;
      long long v33 = *((_OWORD *)v38 + 1);
      long long v34 = *((_OWORD *)v38 + 2);
      long long v35 = *((_OWORD *)v38 + 3);
      *(_DWORD *)((char *)v32 + 175) = *(_DWORD *)((char *)v38 + 63);
      v32[9] = v34;
      v32[10] = v35;
      v32[8] = v33;
      *((void *)v32 + 24) = 0;
      *((void *)v32 + 25) = 0;
      *((void *)v32 + 23) = 0;
      __n128 result = *(__n128 *)(v7 + 23);
      *(__n128 *)((char *)v32 + 184) = result;
      *((void *)v32 + 25) = v7[25];
      v7[23] = 0;
      v7[24] = 0;
      v7[25] = 0;
      int v36 = *((_DWORD *)v7 + 52);
      *((unsigned char *)v32 + 212) = *((unsigned char *)v7 + 212);
      *((_DWORD *)v32 + 52) = v36;
      uint64_t v37 = (_DWORD *)v32 + 54;
      goto LABEL_13;
    }
    long long v43 = v32[3];
    v32[9] = v32[2];
    v32[10] = v43;
    *(_DWORD *)((char *)v32 + 175) = *(_DWORD *)((char *)v32 + 63);
    long long v44 = v32[1];
    _OWORD *v39 = *v32;
    v32[8] = v44;
    *(_OWORD *)((char *)v32 + 184) = *(_OWORD *)((char *)v32 + 72);
    *((void *)v32 + 25) = *((void *)v32 + 11);
    *((void *)v32 + 9) = 0;
    *((void *)v32 + 10) = 0;
    *((void *)v32 + 11) = 0;
    int v45 = *((_DWORD *)v32 + 24);
    *((unsigned char *)v32 + 212) = *((unsigned char *)v32 + 100);
    *((_DWORD *)v32 + 52) = v45;
    uint64_t v46 = (_OWORD *)a4;
    *((_DWORD *)v32 + 54) = v41;
    if (v32 == (_OWORD *)a4) {
      goto LABEL_35;
    }
    uint64_t v47 = v31;
    while (1)
    {
      uint64_t v48 = a4 + v47;
      int v49 = *((_DWORD *)v7 + 54);
      int v50 = *(_DWORD *)(a4 + v47 - 8);
      if (v49 == 0x7FFFFFFF)
      {
        if (v50 != 0x7FFFFFFF)
        {
          uint64_t v46 = (_OWORD *)(a4 + v47);
          goto LABEL_35;
        }
      }
      else if (v50 != 0x7FFFFFFF && v49 <= v50)
      {
        uint64_t v46 = v32;
LABEL_35:
        uint64_t v55 = *v38;
        *((_DWORD *)v46 + 2) = *((_DWORD *)v38 + 2);
        *(void *)uint64_t v46 = v55;
        long long v56 = *((_OWORD *)v7 + 8);
        long long v57 = *((_OWORD *)v7 + 9);
        long long v58 = *((_OWORD *)v7 + 10);
        *(_DWORD *)((char *)v46 + 63) = *(_DWORD *)((char *)v7 + 175);
        v46[2] = v57;
        v46[3] = v58;
        v46[1] = v56;
        int v59 = (void *)*((void *)v46 + 9);
        if (v59)
        {
          *((void *)v46 + 10) = v59;
          operator delete(v59);
          *((void *)v46 + 9) = 0;
          *((void *)v46 + 10) = 0;
          *((void *)v46 + 11) = 0;
        }
        __n128 result = *(__n128 *)(v7 + 23);
        *(__n128 *)((char *)v46 + 72) = result;
        *((void *)v46 + 11) = v7[25];
        v7[23] = 0;
        v7[24] = 0;
        v7[25] = 0;
        int v60 = *((_DWORD *)v7 + 52);
        *((unsigned char *)v46 + 100) = *((unsigned char *)v7 + 212);
        *((_DWORD *)v46 + 24) = v60;
        uint64_t v37 = (_DWORD *)v46 + 26;
        uint64_t v6 = a2;
LABEL_13:
        int v30 = v38 + 14;
        _DWORD *v37 = *((_DWORD *)v7 + 54);
        v31 += 112;
        long long v32 = v39;
        int v7 = v38;
        if (v38 + 14 == v6) {
          return result;
        }
        goto LABEL_14;
      }
      *(void *)uint64_t v48 = *(void *)(v48 - 112);
      *(_DWORD *)(v48 + 8) = *(_DWORD *)(v48 - 104);
      uint64_t v52 = a4 + v47;
      long long v53 = *(_OWORD *)(a4 + v47 - 80);
      *(_OWORD *)(v52 + 16) = *(_OWORD *)(a4 + v47 - 96);
      *(_OWORD *)(v52 + 32) = v53;
      *(_OWORD *)(v52 + 48) = *(_OWORD *)(a4 + v47 - 64);
      *(_DWORD *)(v52 + 63) = *(_DWORD *)(a4 + v47 - 49);
      uint64_t v54 = *(void **)(a4 + v47 + 72);
      if (v54)
      {
        *(void *)(v52 + 80) = v54;
        operator delete(v54);
        int v50 = *(_DWORD *)(v48 - 8);
      }
      v32 -= 7;
      *(_OWORD *)(v52 + 72) = *(_OWORD *)(v52 - 40);
      *(void *)(v52 + 88) = *(void *)(v52 - 24);
      *(void *)(v52 - 32) = 0;
      *(void *)(v52 - 24) = 0;
      *(void *)(v52 - 40) = 0;
      *(_DWORD *)(v52 + 96) = *(_DWORD *)(v52 - 16);
      *(unsigned char *)(v52 + 100) = *(unsigned char *)(v52 - 12);
      *(_DWORD *)(v52 + 104) = v50;
      v47 -= 112;
      if (!v47)
      {
        uint64_t v46 = (_OWORD *)a4;
        goto LABEL_35;
      }
    }
  }
  unint64_t v70 = a3 >> 1;
  uint64_t v71 = 14 * (a3 >> 1);
  long long v72 = &a1[v71];
  sub_C6DC54(a1, &a1[v71], a3 >> 1, a4, a3 >> 1);
  sub_C6DC54(&v7[v71], v6, a3 - v70, a4 + v71 * 8, a3 - v70);
  uint64_t v73 = (__n128 *)(a4 + 104);
  int v74 = &v7[v71];
  while (v74 != v6)
  {
    long long v79 = &v73[-7].n128_i8[8];
    int v80 = *((_DWORD *)v74 + 26);
    int v81 = *((_DWORD *)v7 + 26);
    if (v80 == 0x7FFFFFFF)
    {
      if (v81 == 0x7FFFFFFF) {
        goto LABEL_46;
      }
LABEL_56:
      *(_OWORD *)long long v79 = *(_OWORD *)v7;
      __n128 v83 = *((__n128 *)v7 + 1);
      __n128 v84 = *((__n128 *)v7 + 2);
      __n128 v85 = *((__n128 *)v7 + 3);
      *(unsigned __int32 *)((char *)&v73[-3].n128_u32[1] + 3) = *(_DWORD *)((char *)v7 + 63);
      *(__n128 *)((char *)v73 - 72) = v84;
      *(__n128 *)((char *)v73 - 56) = v85;
      *(__n128 *)((char *)v73 - 88) = v83;
      v73[-2].n128_u64[1] = 0;
      v73[-1].n128_u64[0] = 0;
      v73[-2].n128_u64[0] = 0;
      __n128 result = *(__n128 *)(v7 + 9);
      v73[-2] = result;
      v73[-1].n128_u64[0] = v7[11];
      v7[9] = 0;
      v7[10] = 0;
      v7[11] = 0;
      unsigned __int32 v86 = *((_DWORD *)v7 + 24);
      v73[-1].n128_u8[12] = *((unsigned char *)v7 + 100);
      v73[-1].n128_u32[2] = v86;
      v73->n128_u32[0] = *((_DWORD *)v7 + 26);
      v73 += 7;
      v7 += 14;
      if (v7 == v72)
      {
LABEL_57:
        if (v74 != v6)
        {
          unint64_t v87 = 0;
          do
          {
            long long v88 = &v74[v87 / 8];
            long long v89 = &v73[v87 / 0x10];
            *(__n128 *)((char *)v89 - 104) = *(__n128 *)&v74[v87 / 8];
            __n128 v90 = *(__n128 *)&v74[v87 / 8 + 2];
            __n128 v91 = *(__n128 *)&v74[v87 / 8 + 4];
            __n128 v92 = *(__n128 *)&v74[v87 / 8 + 6];
            *(unsigned __int32 *)((char *)&v89[-3].n128_u32[1] + 3) = *(_DWORD *)((char *)&v74[v87 / 8 + 7] + 7);
            *(__n128 *)((char *)v89 - 56) = v92;
            *(__n128 *)((char *)v89 - 72) = v91;
            *(__n128 *)((char *)v89 - 88) = v90;
            v89[-2].n128_u64[1] = 0;
            v89[-1].n128_u64[0] = 0;
            v89[-2].n128_u64[0] = 0;
            __n128 result = *(__n128 *)&v74[v87 / 8 + 9];
            v89[-2] = result;
            v89[-1].n128_u64[0] = v74[v87 / 8 + 11];
            v88[9] = 0;
            v88[10] = 0;
            v88[11] = 0;
            unsigned __int32 v93 = v74[v87 / 8 + 12];
            v89[-1].n128_u8[12] = BYTE4(v74[v87 / 8 + 12]);
            v89[-1].n128_u32[2] = v93;
            v89->n128_u32[0] = v74[v87 / 8 + 13];
            v87 += 112;
          }
          while (v88 + 14 != v6);
        }
        return result;
      }
    }
    else
    {
      if (v81 != 0x7FFFFFFF && v80 <= v81) {
        goto LABEL_56;
      }
LABEL_46:
      *(_OWORD *)long long v79 = *(_OWORD *)v74;
      __n128 v75 = *((__n128 *)v74 + 1);
      __n128 v76 = *((__n128 *)v74 + 2);
      __n128 v77 = *((__n128 *)v74 + 3);
      *(unsigned __int32 *)((char *)&v73[-3].n128_u32[1] + 3) = *(_DWORD *)((char *)v74 + 63);
      *(__n128 *)((char *)v73 - 72) = v76;
      *(__n128 *)((char *)v73 - 56) = v77;
      *(__n128 *)((char *)v73 - 88) = v75;
      v73[-2].n128_u64[1] = 0;
      v73[-1].n128_u64[0] = 0;
      v73[-2].n128_u64[0] = 0;
      __n128 result = *(__n128 *)(v74 + 9);
      v73[-2] = result;
      v73[-1].n128_u64[0] = v74[11];
      v74[9] = 0;
      v74[10] = 0;
      v74[11] = 0;
      unsigned __int32 v78 = *((_DWORD *)v74 + 24);
      v73[-1].n128_u8[12] = *((unsigned char *)v74 + 100);
      v73[-1].n128_u32[2] = v78;
      v73->n128_u32[0] = *((_DWORD *)v74 + 26);
      v73 += 7;
      v74 += 14;
      if (v7 == v72) {
        goto LABEL_57;
      }
    }
  }
  if (v7 != v72)
  {
    unint64_t v94 = 0;
    do
    {
      long long v95 = &v73[v94 / 2];
      long long v96 = &v7[v94];
      *(__n128 *)((char *)v95 - 104) = *(__n128 *)&v7[v94];
      __n128 v97 = *(__n128 *)&v7[v94 + 2];
      __n128 v98 = *(__n128 *)&v7[v94 + 4];
      __n128 v99 = *(__n128 *)&v7[v94 + 6];
      *(unsigned __int32 *)((char *)&v95[-3].n128_u32[1] + 3) = *(_DWORD *)((char *)&v7[v94 + 7] + 7);
      *(__n128 *)((char *)v95 - 56) = v99;
      *(__n128 *)((char *)v95 - 72) = v98;
      *(__n128 *)((char *)v95 - 88) = v97;
      v95[-2].n128_u64[1] = 0;
      v95[-1].n128_u64[0] = 0;
      v95[-2].n128_u64[0] = 0;
      __n128 result = *(__n128 *)&v7[v94 + 9];
      v95[-2] = result;
      v95[-1].n128_u64[0] = v7[v94 + 11];
      v96[9] = 0;
      v96[10] = 0;
      v96[11] = 0;
      unsigned __int32 v100 = v7[v94 + 12];
      v95[-1].n128_u8[12] = BYTE4(v7[v94 + 12]);
      v95[-1].n128_u32[2] = v100;
      v95->n128_u32[0] = v7[v94 + 13];
      v94 += 14;
    }
    while (v96 + 14 != v72);
  }
  return result;
}

void sub_C6EBC0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a5) {
    return;
  }
  uint64_t v8 = a5;
  while (v8 > a7 && a4 > a7)
  {
    if (!a4) {
      return;
    }
    int v11 = *(_DWORD *)(a2 + 104);
    if (v11 == 0x7FFFFFFF)
    {
      while (*(_DWORD *)(a1 + 104) != 0x7FFFFFFF)
      {
        a1 += 112;
        if (!--a4) {
          return;
        }
      }
    }
    else
    {
      while (1)
      {
        int v12 = *(_DWORD *)(a1 + 104);
        if (v12 == 0x7FFFFFFF || v11 > v12) {
          break;
        }
        a1 += 112;
        if (!--a4) {
          return;
        }
      }
    }
    uint64_t v142 = a6;
    if (a4 < v8)
    {
      if (v8 >= 0) {
        uint64_t v14 = v8;
      }
      else {
        uint64_t v14 = v8 + 1;
      }
      uint64_t v15 = v14 >> 1;
      uint64_t v16 = a2 + 112 * (v14 >> 1);
      uint64_t v17 = a1;
      if (a2 != a1)
      {
        int v18 = *(_DWORD *)(v16 + 104);
        unint64_t v19 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 4);
        uint64_t v17 = a1;
        if (v18 == 0x7FFFFFFF)
        {
          do
          {
            unint64_t v20 = v19 >> 1;
            unint64_t v21 = v17 + 112 * (v19 >> 1);
            int v22 = *(_DWORD *)(v21 + 104);
            uint64_t v23 = v21 + 112;
            v19 += ~(v19 >> 1);
            if (v22 == 0x7FFFFFFF) {
              unint64_t v19 = v20;
            }
            else {
              uint64_t v17 = v23;
            }
          }
          while (v19);
        }
        else
        {
          do
          {
            unint64_t v24 = v19 >> 1;
            unint64_t v25 = v17 + 112 * (v19 >> 1);
            int v26 = *(_DWORD *)(v25 + 104);
            BOOL v28 = v26 == 0x7FFFFFFF || v26 < v18;
            uint64_t v29 = v25 + 112;
            v19 += ~v24;
            if (v28) {
              unint64_t v19 = v24;
            }
            else {
              uint64_t v17 = v29;
            }
          }
          while (v19);
        }
      }
      uint64_t v30 = 0x6DB6DB6DB6DB6DB7 * ((v17 - a1) >> 4);
      uint64_t v31 = v16;
      if (v17 == a2) {
        goto LABEL_55;
      }
LABEL_53:
      uint64_t v31 = v17;
      if (v16 != a2)
      {
        long long v39 = a3;
        uint64_t v40 = a7;
        uint64_t v41 = v15;
        uint64_t v42 = sub_C6D874(v17, (uint64_t *)a2, (uint64_t *)v16);
        uint64_t v15 = v41;
        a7 = v40;
        a3 = v39;
        uint64_t v31 = v42;
      }
      goto LABEL_55;
    }
    if (a4 == 1)
    {
      long long v146 = *(_OWORD *)a1;
      *(_DWORD *)&v149[15] = *(_DWORD *)(a1 + 63);
      long long v148 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)v149 = *(_OWORD *)(a1 + 48);
      long long v147 = *(_OWORD *)(a1 + 16);
      long long v110 = *(_OWORD *)(a1 + 72);
      uint64_t v111 = *(void *)(a1 + 88);
      *(void *)(a1 + 72) = 0;
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 88) = 0;
      char v145 = *(unsigned char *)(a1 + 100);
      int v144 = *(_DWORD *)(a1 + 96);
      int v112 = *(_DWORD *)(a1 + 104);
      int v113 = *(_DWORD *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = v113;
      long long v114 = *(_OWORD *)(a2 + 16);
      long long v115 = *(_OWORD *)(a2 + 32);
      long long v116 = *(_OWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
      *(_OWORD *)(a1 + 32) = v115;
      *(_OWORD *)(a1 + 48) = v116;
      *(_OWORD *)(a1 + 16) = v114;
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a2 + 72) = 0;
      *(void *)(a2 + 80) = 0;
      *(void *)(a2 + 88) = 0;
      uint64_t v118 = a2 + 96;
      int v117 = *(_DWORD *)(a2 + 96);
      *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
      *(_DWORD *)(a1 + 96) = v117;
      *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
      *(void *)a2 = v146;
      *(_DWORD *)(a2 + 8) = DWORD2(v146);
      *(_OWORD *)(a2 + 16) = v147;
      *(_OWORD *)(a2 + 32) = v148;
      *(_OWORD *)(a2 + 48) = *(_OWORD *)v149;
      *(_DWORD *)(a2 + 63) = *(_DWORD *)&v149[15];
      long long v119 = *(void **)(a2 + 72);
      if (v119)
      {
        *(void *)(a2 + 80) = v119;
        uint64_t v120 = a2;
        long long v143 = v110;
        operator delete(v119);
        long long v110 = v143;
        a2 = v120;
      }
      *(_OWORD *)(a2 + 72) = v110;
      *(void *)(a2 + 88) = v111;
      *(_DWORD *)uint64_t v118 = v144;
      *(unsigned char *)(v118 + 4) = v145;
      *(_DWORD *)(a2 + 104) = v112;
      return;
    }
    if (a4 >= 0) {
      uint64_t v32 = a4;
    }
    else {
      uint64_t v32 = a4 + 1;
    }
    uint64_t v30 = v32 >> 1;
    uint64_t v17 = a1 + 112 * (v32 >> 1);
    uint64_t v16 = a2;
    if ((void *)a2 != a3)
    {
      int v33 = *(_DWORD *)(v17 + 104);
      unint64_t v34 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a3 - a2) >> 4);
      uint64_t v16 = a2;
      if (v33 == 0x7FFFFFFF)
      {
        do
        {
          v16 += 112 * (v34 >> 1) + 112;
          v34 += ~(v34 >> 1);
        }
        while (v34);
      }
      else
      {
        do
        {
          unint64_t v35 = v34 >> 1;
          unint64_t v36 = v16 + 112 * (v34 >> 1);
          int v37 = *(_DWORD *)(v36 + 104);
          uint64_t v38 = v36 + 112;
          v34 += ~(v34 >> 1);
          if (v37 != 0x7FFFFFFF && v37 > v33) {
            uint64_t v16 = v38;
          }
          else {
            unint64_t v34 = v35;
          }
        }
        while (v34);
      }
    }
    uint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((v16 - a2) >> 4);
    uint64_t v31 = v16;
    if (v17 != a2) {
      goto LABEL_53;
    }
LABEL_55:
    a4 -= v30;
    v8 -= v15;
    if (v30 + v15 >= a4 + v8)
    {
      uint64_t v47 = a4;
      uint64_t v48 = v15;
      uint64_t v49 = v8;
      a6 = v142;
      uint64_t v50 = a7;
      sub_C6EBC0(v31, v16, a3, v47, v49, v142);
      a7 = v50;
      uint64_t v8 = v48;
      a4 = v30;
      a3 = (void *)v31;
      a2 = v17;
      if (!v8) {
        return;
      }
    }
    else
    {
      uint64_t v43 = a1;
      long long v44 = a3;
      uint64_t v45 = v30;
      a6 = v142;
      uint64_t v46 = a7;
      sub_C6EBC0(v43, v17, v31, v45, v15, v142);
      a7 = v46;
      a3 = v44;
      a1 = v31;
      a2 = v16;
      if (!v8) {
        return;
      }
    }
  }
  if (a4 > v8)
  {
    if (a3 == (void *)a2) {
      return;
    }
    uint64_t v51 = 0;
    unint64_t v52 = 0;
    do
    {
      uint64_t v53 = a6 + v51;
      uint64_t v54 = (void *)(a2 + v51);
      *(_OWORD *)uint64_t v53 = *(_OWORD *)(a2 + v51);
      long long v55 = *(_OWORD *)(a2 + v51 + 16);
      long long v56 = *(_OWORD *)(a2 + v51 + 32);
      long long v57 = *(_OWORD *)(a2 + v51 + 48);
      *(_DWORD *)(v53 + 63) = *(_DWORD *)(a2 + v51 + 63);
      *(_OWORD *)(v53 + 32) = v56;
      *(_OWORD *)(v53 + 48) = v57;
      *(_OWORD *)(v53 + 16) = v55;
      *(void *)(v53 + 80) = 0;
      *(void *)(v53 + 88) = 0;
      *(void *)(v53 + 72) = 0;
      *(_OWORD *)(v53 + 72) = *(_OWORD *)(a2 + v51 + 72);
      *(void *)(v53 + 88) = *(void *)(a2 + v51 + 88);
      v54[9] = 0;
      v54[10] = 0;
      v54[11] = 0;
      int v58 = *(_DWORD *)(a2 + v51 + 96);
      *(unsigned char *)(v53 + 100) = *(unsigned char *)(a2 + v51 + 100);
      *(_DWORD *)(v53 + 96) = v58;
      *(_DWORD *)(v53 + 104) = *(_DWORD *)(a2 + v51 + 104);
      ++v52;
      v51 += 112;
    }
    while (v54 + 14 != a3);
    if (!v51) {
      goto LABEL_110;
    }
    uint64_t v59 = a6 + v51;
    int v60 = a3 - 5;
    while (2)
    {
      if (a2 == a1)
      {
        unint64_t v121 = 0;
        do
        {
          unint64_t v123 = v59 + v121;
          long long v124 = &v60[v121 / 8];
          uint64_t v125 = *(void *)(v59 + v121 - 112);
          *((_DWORD *)v124 - 16) = *(_DWORD *)(v59 + v121 - 104);
          *(v124 - 9) = v125;
          long long v126 = *(_OWORD *)(v59 + v121 - 96);
          long long v127 = *(_OWORD *)(v59 + v121 - 80);
          long long v128 = *(_OWORD *)(v59 + v121 - 64);
          *(_DWORD *)((char *)v124 - 9) = *(_DWORD *)(v59 + v121 - 49);
          *(_OWORD *)(v124 - 3) = v128;
          *(_OWORD *)(v124 - 5) = v127;
          *(_OWORD *)(v124 - 7) = v126;
          v129 = (void *)v60[v121 / 8];
          if (v129)
          {
            v124[1] = v129;
            operator delete(v129);
            *long long v124 = 0;
            v124[1] = 0;
            v124[2] = 0;
          }
          *(_OWORD *)long long v124 = *(_OWORD *)(v123 - 40);
          v124[2] = *(void *)(v123 - 24);
          *(void *)(v123 - 40) = 0;
          *(void *)(v123 - 32) = 0;
          *(void *)(v123 - 24) = 0;
          int v122 = *(_DWORD *)(v123 - 16);
          *((unsigned char *)v124 + 28) = *(unsigned char *)(v123 - 12);
          *((_DWORD *)v124 + 6) = v122;
          *((_DWORD *)v124 + 8) = *(_DWORD *)(v123 - 8);
          v121 -= 112;
        }
        while (v59 + v121 != a6);
        goto LABEL_110;
      }
      int v72 = *(_DWORD *)(a2 - 8);
      int v73 = *(_DWORD *)(v59 - 8);
      if (v73 == 0x7FFFFFFF)
      {
        if (v72 != 0x7FFFFFFF) {
          goto LABEL_78;
        }
LABEL_66:
        uint64_t v61 = a2 - 112;
        uint64_t v62 = *(void *)(a2 - 112);
        *((_DWORD *)v60 - 16) = *(_DWORD *)(a2 - 104);
        *(v60 - 9) = v62;
        long long v63 = *(_OWORD *)(a2 - 96);
        long long v64 = *(_OWORD *)(a2 - 80);
        long long v65 = *(_OWORD *)(a2 - 64);
        *(_DWORD *)((char *)v60 - 9) = *(_DWORD *)(a2 - 49);
        *(_OWORD *)(v60 - 3) = v65;
        *(_OWORD *)(v60 - 5) = v64;
        *(_OWORD *)(v60 - 7) = v63;
        long long v66 = (void *)*v60;
        long long v67 = v60;
        uint64_t v68 = a2;
        uint64_t v69 = v59;
        a2 -= 112;
        if (*v60) {
          goto LABEL_67;
        }
      }
      else
      {
        if (v72 == 0x7FFFFFFF || v73 > v72) {
          goto LABEL_66;
        }
LABEL_78:
        uint64_t v69 = v59 - 112;
        uint64_t v75 = *(void *)(v59 - 112);
        *((_DWORD *)v60 - 16) = *(_DWORD *)(v59 - 104);
        *(v60 - 9) = v75;
        long long v76 = *(_OWORD *)(v59 - 96);
        long long v77 = *(_OWORD *)(v59 - 80);
        long long v78 = *(_OWORD *)(v59 - 64);
        *(_DWORD *)((char *)v60 - 9) = *(_DWORD *)(v59 - 49);
        *(_OWORD *)(v60 - 3) = v78;
        *(_OWORD *)(v60 - 5) = v77;
        *(_OWORD *)(v60 - 7) = v76;
        long long v67 = a3 - 5;
        long long v66 = (void *)*v60;
        uint64_t v68 = v59;
        uint64_t v61 = a2;
        v59 -= 112;
        if (*v60)
        {
LABEL_67:
          v60[1] = v66;
          unint64_t v70 = a3;
          operator delete(v66);
          a3 = v70;
          *long long v67 = 0;
          v67[1] = 0;
          a2 = v61;
          uint64_t v59 = v69;
          v67[2] = 0;
        }
      }
      *long long v67 = *(void *)(v68 - 40);
      v60[1] = *(void *)(v68 - 32);
      v60[2] = *(void *)(v68 - 24);
      *(void *)(v68 - 40) = 0;
      *(void *)(v68 - 32) = 0;
      *(void *)(v68 - 24) = 0;
      int v71 = *(_DWORD *)(v68 - 16);
      *((unsigned char *)v60 + 28) = *(unsigned char *)(v68 - 12);
      *((_DWORD *)v60 + 6) = v71;
      *((_DWORD *)v60 + 8) = *(_DWORD *)(v68 - 8);
      a3 -= 14;
      v60 -= 14;
      if (v59 == a6) {
        goto LABEL_110;
      }
      continue;
    }
  }
  if (a1 == a2) {
    return;
  }
  uint64_t v79 = 0;
  unint64_t v52 = 0;
  do
  {
    uint64_t v80 = a6 + v79;
    int v81 = (void *)(a1 + v79);
    *(_OWORD *)uint64_t v80 = *(_OWORD *)(a1 + v79);
    long long v82 = *(_OWORD *)(a1 + v79 + 16);
    long long v83 = *(_OWORD *)(a1 + v79 + 32);
    long long v84 = *(_OWORD *)(a1 + v79 + 48);
    *(_DWORD *)(v80 + 63) = *(_DWORD *)(a1 + v79 + 63);
    *(_OWORD *)(v80 + 32) = v83;
    *(_OWORD *)(v80 + 48) = v84;
    *(_OWORD *)(v80 + 16) = v82;
    *(void *)(v80 + 80) = 0;
    *(void *)(v80 + 88) = 0;
    *(void *)(v80 + 72) = 0;
    *(_OWORD *)(v80 + 72) = *(_OWORD *)(a1 + v79 + 72);
    *(void *)(v80 + 88) = *(void *)(a1 + v79 + 88);
    v81[9] = 0;
    v81[10] = 0;
    v81[11] = 0;
    int v85 = *(_DWORD *)(a1 + v79 + 96);
    *(unsigned char *)(v80 + 100) = *(unsigned char *)(a1 + v79 + 100);
    *(_DWORD *)(v80 + 96) = v85;
    *(_DWORD *)(v80 + 104) = *(_DWORD *)(a1 + v79 + 104);
    ++v52;
    v79 += 112;
  }
  while (v81 + 14 != (void *)a2);
  if (!v79) {
    goto LABEL_110;
  }
  uint64_t v86 = a6 + v79;
  uint64_t v87 = a6 + v79 - 112;
  uint64_t v88 = a1 + 72;
  uint64_t v89 = a6;
  while ((void *)a2 != a3)
  {
    __n128 v91 = (uint64_t *)(v88 - 72);
    int v92 = *(_DWORD *)(a2 + 104);
    int v93 = *(_DWORD *)(v89 + 104);
    if (v92 == 0x7FFFFFFF)
    {
      if (v93 != 0x7FFFFFFF) {
        goto LABEL_89;
      }
    }
    else if (v93 != 0x7FFFFFFF && v92 <= v93)
    {
LABEL_89:
      uint64_t v94 = *(void *)v89;
      *(_DWORD *)(v88 - 64) = *(_DWORD *)(v89 + 8);
      uint64_t *v91 = v94;
      long long v95 = *(_OWORD *)(v89 + 16);
      long long v96 = *(_OWORD *)(v89 + 32);
      long long v97 = *(_OWORD *)(v89 + 48);
      *(_DWORD *)(v88 - 9) = *(_DWORD *)(v89 + 63);
      *(_OWORD *)(v88 - 24) = v97;
      *(_OWORD *)(v88 - 40) = v96;
      *(_OWORD *)(v88 - 56) = v95;
      __n128 v98 = *(void **)v88;
      if (*(void *)v88)
      {
        *(void *)(v88 + 8) = v98;
        uint64_t v99 = a2;
        unsigned __int32 v100 = a3;
        operator delete(v98);
        a3 = v100;
        a2 = v99;
        *(void *)uint64_t v88 = 0;
        *(void *)(v88 + 8) = 0;
        *(void *)(v88 + 16) = 0;
      }
      *(_OWORD *)uint64_t v88 = *(_OWORD *)(v89 + 72);
      *(void *)(v88 + 16) = *(void *)(v89 + 88);
      *(void *)(v89 + 72) = 0;
      *(void *)(v89 + 80) = 0;
      *(void *)(v89 + 88) = 0;
      int v101 = *(_DWORD *)(v89 + 96);
      *(unsigned char *)(v88 + 28) = *(unsigned char *)(v89 + 100);
      *(_DWORD *)(v88 + 24) = v101;
      *(_DWORD *)(v88 + 32) = *(_DWORD *)(v89 + 104);
      v89 += 112;
      v88 += 112;
      if (v86 == v89) {
        goto LABEL_110;
      }
      continue;
    }
    uint64_t v103 = *(void *)a2;
    *(_DWORD *)(v88 - 64) = *(_DWORD *)(a2 + 8);
    uint64_t *v91 = v103;
    long long v104 = *(_OWORD *)(a2 + 16);
    long long v105 = *(_OWORD *)(a2 + 32);
    long long v106 = *(_OWORD *)(a2 + 48);
    *(_DWORD *)(v88 - 9) = *(_DWORD *)(a2 + 63);
    *(_OWORD *)(v88 - 24) = v106;
    *(_OWORD *)(v88 - 40) = v105;
    *(_OWORD *)(v88 - 56) = v104;
    int v107 = *(void **)v88;
    if (*(void *)v88)
    {
      *(void *)(v88 + 8) = v107;
      uint64_t v108 = a2;
      char v109 = a3;
      operator delete(v107);
      a3 = v109;
      a2 = v108;
      *(void *)uint64_t v88 = 0;
      *(void *)(v88 + 8) = 0;
      *(void *)(v88 + 16) = 0;
    }
    *(_OWORD *)uint64_t v88 = *(_OWORD *)(a2 + 72);
    *(void *)(v88 + 16) = *(void *)(a2 + 88);
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    int v90 = *(_DWORD *)(a2 + 96);
    *(unsigned char *)(v88 + 28) = *(unsigned char *)(a2 + 100);
    *(_DWORD *)(v88 + 24) = v90;
    *(_DWORD *)(v88 + 32) = *(_DWORD *)(a2 + 104);
    a2 += 112;
    v88 += 112;
    if (v86 == v89) {
      goto LABEL_110;
    }
  }
  uint64_t v130 = 0;
  do
  {
    uint64_t v132 = v89 + v130;
    uint64_t v133 = v88 + v130;
    uint64_t v134 = *(void *)(v89 + v130);
    *(_DWORD *)(v133 - 64) = *(_DWORD *)(v89 + v130 + 8);
    *(void *)(v133 - 72) = v134;
    long long v135 = *(_OWORD *)(v89 + v130 + 16);
    long long v136 = *(_OWORD *)(v89 + v130 + 32);
    long long v137 = *(_OWORD *)(v89 + v130 + 48);
    *(_DWORD *)(v133 - 9) = *(_DWORD *)(v89 + v130 + 63);
    *(_OWORD *)(v133 - 24) = v137;
    *(_OWORD *)(v133 - 40) = v136;
    *(_OWORD *)(v133 - 56) = v135;
    v138 = *(void **)(v88 + v130);
    if (v138)
    {
      *(void *)(v133 + 8) = v138;
      operator delete(v138);
      *(void *)uint64_t v133 = 0;
      *(void *)(v133 + 8) = 0;
      *(void *)(v133 + 16) = 0;
    }
    *(_OWORD *)uint64_t v133 = *(_OWORD *)(v132 + 72);
    *(void *)(v133 + 16) = *(void *)(v132 + 88);
    *(void *)(v132 + 72) = 0;
    *(void *)(v132 + 80) = 0;
    *(void *)(v132 + 88) = 0;
    int v131 = *(_DWORD *)(v132 + 96);
    *(unsigned char *)(v133 + 28) = *(unsigned char *)(v132 + 100);
    *(_DWORD *)(v133 + 24) = v131;
    *(_DWORD *)(v133 + 32) = *(_DWORD *)(v132 + 104);
    v130 += 112;
  }
  while (v87 != v132);
LABEL_110:
  if (a6)
  {
    unint64_t v139 = 0;
    uint64_t v140 = (void *)(a6 + 80);
    do
    {
      v141 = (void *)*(v140 - 1);
      if (v141)
      {
        *uint64_t v140 = v141;
        operator delete(v141);
      }
      ++v139;
      v140 += 14;
    }
    while (v139 < v52);
  }
}

void sub_C6F51C()
{
  unk_25E08F7 = 16641;
  word_25E08E0 = 65;
  byte_25E090F = 1;
  byte_25E08F9 = 0;
}

void sub_C6F544()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v6 = v1;
  sub_725D0((uint64_t)&v9);
  uint64_t v2 = *(void *)(v0 + 200);
  long long v10 = operator new(0x40uLL);
  long long v11 = xmmword_20B9A90;
  strcpy((char *)v10, "routing/route-planning/path-finding/DrivingPathFinding.json");
  __p[1] = 0;
  __p[0] = 0;
  uint64_t v8 = 0;
  sub_374CDC(v2, (uint64_t)&v10, (uint64_t *)__p);
  uint64_t v3 = (void **)__p[0];
  if (__p[0])
  {
    unint64_t v4 = (void **)__p[1];
    uint64_t v5 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v3);
      uint64_t v5 = __p[0];
    }
    __p[1] = v3;
    operator delete(v5);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10);
  }
  *(unsigned char *)uint64_t v6 = 1;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *(void *)(v6 + 504) = 0;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  *(_OWORD *)(v6 + 408) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  sub_C72688(v6 + 8);
}

void sub_C718C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  sub_C628C4((void ****)&STACK[0x2280]);
  sub_C725D8((void **)&STACK[0x22A0]);
  sub_C7264C((uint64_t)&STACK[0x2378]);
  uint64_t v17 = (void *)STACK[0x22B8];
  if (STACK[0x22B8])
  {
    STACK[0x22C0] = (unint64_t)v17;
    operator delete(v17);
  }
  sub_C76EC0((uint64_t)&STACK[0x2590]);
  sub_C72310(a16);
  _Unwind_Resume(a1);
}

uint64_t sub_C71D30(uint64_t a1, void *a2, void *a3, void *a4)
{
  if (*a2 && *a3 != 0x7FFFFFFFFFFFFFFFLL && *a3 >= *(void *)(a1 + 24))
  {
    sub_C72A18();
    if (sub_EAE144(v23)
      || (sub_3EAFD4(v22, *(void *)a1, *(unsigned __int8 *)(a1 + 16)),
          sub_46B058(),
          long long v11 = v10,
          unint64_t v13 = v12,
          sub_EAFC0C(),
          sub_C75380(v11, v13, v14, v15, (uint64_t)v22)))
    {
      uint64_t v7 = 0;
      uint64_t v16 = __p;
      if (!__p)
      {
LABEL_12:
        sub_405F44((uint64_t)v23);
        return v7;
      }
    }
    else
    {
      sub_448838(a1 + 32, v23);
      uint64_t v17 = (void *)(a1 + 504);
      int v18 = *(void **)(a1 + 504);
      if (v18)
      {
        *(void *)(a1 + 512) = v18;
        operator delete(v18);
        void *v17 = 0;
        *(void *)(a1 + 512) = 0;
        *(void *)(a1 + 520) = 0;
      }
      unint64_t v19 = (char *)__p;
      uint64_t v20 = v26;
      *(void *)(a1 + 504) = __p;
      unint64_t v21 = (char *)v25;
      *(_OWORD *)(a1 + 512) = v25;
      long long v25 = 0uLL;
      std::string __p = 0;
      *(void *)(a1 + 528) = v20;
      if (v17 != a4)
      {
        sub_BFF628(a4, v19, v21, 0xCCCCCCCCCCCCCCCDLL * ((v21 - v19) >> 4));
        uint64_t v20 = *(void *)(a1 + 528);
      }
      a4[3] = v20;
      uint64_t v7 = 1;
      uint64_t v16 = __p;
      if (!__p) {
        goto LABEL_12;
      }
    }
    *(void *)&long long v25 = v16;
    operator delete(v16);
    goto LABEL_12;
  }
  sub_EAFC08((uint64_t)v23);
  long long v25 = 0uLL;
  std::string __p = 0;
  uint64_t v26 = -1;
  sub_448838(a1 + 32, v23);
  uint64_t v5 = *(void **)(a1 + 504);
  if (v5)
  {
    *(void *)(a1 + 512) = v5;
    operator delete(v5);
    *(void *)(a1 + 504) = 0;
    *(void *)(a1 + 512) = 0;
    *(void *)(a1 + 520) = 0;
  }
  uint64_t v6 = v26;
  *(void *)(a1 + 504) = __p;
  *(_OWORD *)(a1 + 512) = v25;
  long long v25 = 0uLL;
  std::string __p = 0;
  *(void *)(a1 + 528) = v6;
  sub_405F44((uint64_t)v23);
  return 0;
}

void sub_C71F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_C729D4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C71F7C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void ****)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_2E00();
  }
  unint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = 24 * a2;
  uint64_t v6 = (char *)operator new(24 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[24 * ((v4 - (char *)v2) / 24)];
  if (v4 == (char *)v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
  }
  else
  {
    uint64_t v9 = &v6[24 * ((v4 - (char *)v2) / 24)];
    do
    {
      long long v10 = *(_OWORD *)(v4 - 24);
      v4 -= 24;
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *((void *)v9 + 2) = *((void *)v4 + 2);
      *(void *)unint64_t v4 = 0;
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 2) = 0;
    }
    while (v4 != (char *)v2);
    uint64_t v2 = *(void ****)a1;
    long long v11 = *(void ****)(a1 + 8);
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (v11 == v2)
    {
      uint64_t v2 = v11;
      if (!v11) {
        return;
      }
      goto LABEL_13;
    }
    unint64_t v12 = v11 - 3;
    do
    {
      if (*v12)
      {
        sub_C64384((uint64_t)v12, *v12);
        operator delete(*v12);
      }
      BOOL v13 = v12 == v2;
      v12 -= 3;
    }
    while (!v13);
  }
  if (!v2) {
    return;
  }
LABEL_13:

  operator delete(v2);
}

void sub_C720C8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7 = a1 + 32;
  if (!sub_EAE144((void *)(a1 + 32)))
  {
    uint64_t v8 = (uint64_t *)sub_40EFE8(a4);
    uint64_t v9 = sub_52058(a4);
    if (v8 != (uint64_t *)v9)
    {
      long long v10 = (uint64_t *)v9;
      if (a3)
      {
        do
        {
          if (!sub_EA80FC((char **)v8))
          {
            uint64_t v11 = sub_EA8438(v8);
            uint64_t v12 = *(void *)(sub_EAFF60(v7) + 32);
            if (__PAIR64__(*(unsigned __int16 *)(v11 + 36), *(_DWORD *)(v11 + 32)) == __PAIR64__(WORD2(v12), v12)
              && ((v12 & 0x1000000000000) == 0) == (*(unsigned char *)(v11 + 38) == 0))
            {
              BOOL v13 = (uint64_t *)nullsub_1(v8);
              sub_EB144C(*v13, v7);
            }
          }
          v8 += 6;
        }
        while (v8 != v10);
      }
      else
      {
        do
        {
          if (!sub_EA80FC((char **)v8))
          {
            uint64_t v14 = sub_EA8438(v8);
            uint64_t v15 = *(void *)(sub_EAFF60(v7) + 32);
            if (__PAIR64__(*(unsigned __int16 *)(v14 + 36), *(_DWORD *)(v14 + 32)) == __PAIR64__(WORD2(v15), v15)
              && ((v15 & 0x1000000000000) == 0) == (*(unsigned char *)(v14 + 38) == 0))
            {
              uint64_t v16 = *(void *)nullsub_1(v8);
              sub_EB144C(v16, v7);
              sub_C75574(a2, v16);
            }
          }
          v8 += 6;
        }
        while (v8 != v10);
      }
    }
  }
}

uint64_t sub_C72248(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  if (*(unsigned char *)a1)
  {
    if (*a2)
    {
      sub_C769E8(a1 + 8, (uint64_t)(a2 + 8));
LABEL_4:
      *(unsigned char *)a1 = *a2;
      return a1;
    }
    sub_C76D60(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  else
  {
    uint64_t v6 = (_OWORD *)(a1 + 8);
    uint64_t v7 = a2 + 8;
    if (v4)
    {
      sub_C76BC0(a1, (uint64_t)v6, a1 + 8, (uint64_t)v7);
      goto LABEL_4;
    }
    _OWORD *v6 = *v7;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  *(unsigned char *)a1 = *a2;
  return a1;
}

uint64_t sub_C72310(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    sub_C76D60(a1 + 8);
    return a1;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 24);
  if (v4 != v3)
  {
    do
    {
      if (*(char *)(v4 - 1) < 0) {
        operator delete(*(void **)(v4 - 24));
      }
      v4 -= 32;
    }
    while (v4 != v3);
    uint64_t v5 = *(void **)(a1 + 24);
  }
  *(void *)(a1 + 32) = v3;
  operator delete(v5);
  return a1;
}

uint64_t sub_C723A8(void *a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v10 = &v15;
    }
    else {
      long long v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 24 * a2;
}

void sub_C724F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void **sub_C725D8(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 4;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_C7264C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 504);
  if (v2)
  {
    *(void *)(a1 + 512) = v2;
    operator delete(v2);
  }
  sub_405F44(a1 + 32);
  return a1;
}

void sub_C72688(uint64_t a1)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  std::string __p = operator new(0x20uLL);
  long long v3 = xmmword_20B91C0;
  strcpy((char *)__p, "DrivingPathFindingModule");
  sub_401FE8(a1 + 72, (long long *)&__p);
}

void sub_C727AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_1A668(v16);
    std::string v18 = *(void **)(v15 + 24);
    if (!v18)
    {
LABEL_3:
      sub_C628C4((void ****)v15);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    sub_1A668(v16);
    std::string v18 = *(void **)(v15 + 24);
    if (!v18) {
      goto LABEL_3;
    }
  }
  *(void *)(v15 + 32) = v18;
  operator delete(v18);
  sub_C628C4((void ****)v15);
  _Unwind_Resume(a1);
}

uint64_t sub_C72820(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)a1 = a2;
  HIBYTE(v14[2]) = 18;
  strcpy((char *)v14, "QuickTurnAvoidance");
  std::string __p = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v5 = sub_374CDC(a2, (uint64_t)v14, (uint64_t *)&__p);
  uint64_t v6 = (void **)__p;
  if (__p)
  {
    long long v7 = v12;
    uint64_t v8 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      uint64_t v8 = __p;
    }
    uint64_t v12 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v14[2]) < 0) {
    operator delete(v14[0]);
  }
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = 0x7FFFFFFFFFFFFFFFLL;
  sub_EAFC08(a1 + 32);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 528) = -1;
  uint64_t v9 = *(void *)(a1 + 8);
  v14[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v14[1] = xmmword_20B8890;
  strcpy(v14[0], "min_distance_to_destination_m");
  *(void *)(a1 + 24) = sub_5CDE0(v9, v14);
  if (SHIBYTE(v14[2]) < 0) {
    operator delete(v14[0]);
  }
  return a1;
}

void sub_C72984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_C729D4(v18);
  _Unwind_Resume(a1);
}

void sub_C729B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_C729D4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 472);
  if (v2)
  {
    *(void *)(a1 + 480) = v2;
    operator delete(v2);
  }

  return sub_405F44(a1);
}

void *sub_C72A18()
{
  uint64_t v0 = (void **)__chkstk_darwin();
  v154 = v1;
  long long v3 = v2;
  uint64_t v4 = v0;
  uint64_t v6 = v5;
  long long v7 = *v0;
  sub_ED82AC((uint64_t)v189, *v0);
  uint64_t v193 = sub_3750CC(v7);
  uint64_t v8 = sub_3750CC(*v4);
  uint64_t v9 = v8;
  uint64_t v11 = *v3;
  long long v10 = v3[1];
  if (*v3 == v10)
  {
    uint64_t v13 = 0;
  }
  else
  {
    unint64_t v12 = v10 - v11 - 80;
    if (v12 < 0x50)
    {
      uint64_t v13 = 0;
      uint64_t v14 = *v3;
      do
      {
LABEL_24:
        if (*((double *)v14 + 5) > 0.95 && v14[72] == 0) {
          ++v13;
        }
        v14 += 80;
      }
      while (v14 != v10);
      goto LABEL_30;
    }
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    unint64_t v24 = v12 / 0x50 + 1;
    uint64_t v14 = &v11[80 * (v24 & 0x7FFFFFFFFFFFFFELL)];
    long long v25 = (double *)(v11 + 152);
    uint64_t v26 = v24 & 0x7FFFFFFFFFFFFFELL;
    do
    {
      double v27 = *(v25 - 4);
      if (*(v25 - 14) > 0.95 && *((unsigned char *)v25 - 80) == 0) {
        ++v22;
      }
      int v30 = *(unsigned __int8 *)v25;
      v25 += 20;
      int v29 = v30;
      if (v27 > 0.95 && v29 == 0) {
        ++v23;
      }
      v26 -= 2;
    }
    while (v26);
    uint64_t v13 = v23 + v22;
    if (v24 != (v24 & 0x7FFFFFFFFFFFFFELL)) {
      goto LABEL_24;
    }
LABEL_30:
    while (*((double *)v11 + 5) <= 0.95 || v11[72] != 0)
    {
      v11 += 80;
      if (v11 == v10) {
        goto LABEL_53;
      }
    }
  }
  if (v11 == v10 || v13 >= 2) {
    goto LABEL_53;
  }
  v149 = v3;
  uint64_t v15 = *(void *)v11 >> 16;
  unint64_t v188 = *(void *)v11;
  unint64_t v16 = HIDWORD(v188) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)(unsigned __int16)v15 << 32);
  std::string v17 = (int *)sub_2D5D58(v8, v16);
  if (*(unsigned char *)(v9 + 7772))
  {
    long long v19 = sub_2DB8E0(v9 + 3896, HIDWORD(v188), 0);
    std::string::size_type v20 = &v19[-*(int *)v19];
    if (*(unsigned __int16 *)v20 < 5u)
    {
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = *((unsigned __int16 *)v20 + 2);
      if (v21) {
        v21 += (uint64_t)&v19[*(unsigned int *)&v19[v21]];
      }
    }
    unint64_t v18 = (v16 & 0xFFFEFFFFFFFFFFFFLL | (((v188 >> 1) & 1) << 48)) ^ 0x1000000000000;
    unint64_t v34 = (int *)(v21 + 4 * WORD2(v18) + 4 + *(unsigned int *)(v21 + 4 * WORD2(v18) + 4));
  }
  else
  {
    unint64_t v34 = 0;
  }
  v184[0] = v17;
  v184[1] = v34;
  v184[2] = (int *)sub_2E5C38(v9, v16, 1);
  v184[3] = v35;
  int v185 = HIDWORD(v188);
  __int16 v186 = ((v16 & 0xFFFEFFFFFFFFFFFFLL | (((v188 >> 1) & 1) << 48)) ^ 0x1000000000000) >> 32;
  char v187 = ((v16 & 0xFFFEFFFFFFFFFFFFLL | (((v188 >> 1) & 1) << 48)) ^ 0x1000000000000) >> 48;
  unint64_t v36 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v36 < 9u)
  {
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v37 = v36[4];
    if (v37) {
      uint64_t v37 = *(unsigned int *)((char *)v17 + v37);
    }
  }
  v150 = v11 + 8;
  double v38 = (double)(1000000000 - *((_DWORD *)v11 + 2)) / 1000000000.0 * (double)v37;
  if (v38 >= 0.0)
  {
    if (v38 >= 4.50359963e15) {
      goto LABEL_51;
    }
    uint64_t v39 = (uint64_t)(v38 + v38) + 1;
  }
  else
  {
    if (v38 <= -4.50359963e15) {
      goto LABEL_51;
    }
    uint64_t v39 = (uint64_t)(v38 + v38);
    if (v39 >= 1) {
      --v39;
    }
  }
  double v38 = (double)(v39 >> 1);
LABEL_51:
  if (*v154 <= (uint64_t)v38
    || sub_C73CE0((HIDWORD(v188) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(v188) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((v188 >> 1) & 1) << 48)) ^ 0x1000000000000, v9))
  {
LABEL_53:
    sub_EAFC08(v6);
    *(void *)(v6 + 472) = 0;
    *(void *)(v6 + 480) = 0;
    *(void *)(v6 + 488) = 0;
    *(void *)(v6 + 496) = -1;
    goto LABEL_54;
  }
  int v183 = sub_C73DB0(v184);
  char v176 = 0;
  int v177 = 0;
  uint64_t v174 = 0x3E4CCCCD3F000000;
  uint64_t v178 = 0;
  uint64_t v179 = 0;
  uint64_t v180 = 0;
  long long v173 = xmmword_20B98A0;
  __int16 v175 = 256;
  long long v181 = xmmword_20F00F0;
  v182 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  int64x2_t v41 = vdupq_n_s64(0);
  uint64_t v42 = (int64x2_t *)((char *)v182 + 16);
  uint64_t v43 = 32;
  do
  {
    v42[-1] = v41;
    int64x2_t *v42 = v41;
    v42 += 2;
    v43 -= 4;
  }
  while (v43);
  sub_C744A4((uint64_t)&v173, 1);
  sub_C74778(&v173, (uint64_t *)&v188, (uint64_t)v227);
  v170 = 0;
  v171 = 0;
  uint64_t v172 = 0;
  sub_EAFC08((uint64_t)v227);
  long long v44 = v4[1];
  BYTE7(v161) = 13;
  strcpy((char *)v160, "min_num_lanes");
  unsigned int v153 = sub_31AC04(v44, (uint64_t)v160);
  if (SBYTE7(v161) < 0) {
    operator delete(v160[0]);
  }
  unint64_t v45 = v188;
  if (!v188) {
    goto LABEL_188;
  }
  uint64_t v151 = 0;
  uint64_t v152 = v6;
  while (1)
  {
    if (v153)
    {
      uint64_t v46 = (int *)sub_2D5D58(v9, HIDWORD(v45) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v45) << 32));
      uint64_t v47 = (unsigned __int16 *)((char *)v46 - *v46);
      unsigned int v48 = *v47;
      if ((v45 & 2) != 0)
      {
        if (v48 < 0x27) {
          goto LABEL_74;
        }
        unsigned int v49 = v47[19];
        if (!v49) {
          goto LABEL_74;
        }
      }
      else
      {
        if (v48 < 0x29) {
          goto LABEL_74;
        }
        unsigned int v49 = v47[20];
        if (!v49) {
          goto LABEL_74;
        }
      }
      unsigned int v50 = *(int *)((char *)v46 + v49 + *(int *)((char *)v46 + v49));
      if (v50 && v153 > v50) {
        break;
      }
    }
LABEL_74:
    sub_ED8808((uint64_t)v189, v188, 0, &v170, 0);
    uint64_t v53 = (char *)v170;
    unint64_t v52 = v171;
    uint64_t v54 = (char *)v170 + 96;
    BOOL v55 = v170 == v171 || v54 == v171;
    long long v56 = (char *)v170;
    if (!v55)
    {
      long long v56 = (char *)v170;
      do
      {
        while (1)
        {
          long long v57 = (int *)*((void *)v54 + 5);
          int v58 = (unsigned __int16 *)((char *)v57 - *v57);
          if (*v58 >= 0x1Bu)
          {
            uint64_t v59 = v58[13];
            if (v59) {
              break;
            }
          }
          unsigned int v60 = 0;
          uint64_t v61 = (int *)*((void *)v56 + 5);
          uint64_t v62 = (unsigned __int16 *)((char *)v61 - *v61);
          if (*v62 >= 0x1Bu) {
            goto LABEL_85;
          }
LABEL_79:
          v54 += 96;
          if (v54 == v171) {
            goto LABEL_89;
          }
        }
        unsigned int v60 = *((unsigned __int8 *)v57 + v59);
        uint64_t v61 = (int *)*((void *)v56 + 5);
        uint64_t v62 = (unsigned __int16 *)((char *)v61 - *v61);
        if (*v62 < 0x1Bu) {
          goto LABEL_79;
        }
LABEL_85:
        uint64_t v63 = v62[13];
        if (!v63) {
          goto LABEL_79;
        }
        if (v60 < *((unsigned __int8 *)v61 + v63)) {
          long long v56 = v54;
        }
        v54 += 96;
      }
      while (v54 != v171);
    }
LABEL_89:
    if (v56 == v171
      || (long long v64 = (int *)*((void *)v56 + 5), v65 = (unsigned __int16 *)((char *)v64 - *v64), *v65 < 0x1Bu)
      || (uint64_t v66 = v65[13]) == 0)
    {
      unsigned int v67 = 0;
    }
    else
    {
      unsigned int v67 = *((unsigned __int8 *)v64 + v66);
    }
    *(_DWORD *)v169 = 0;
    int64x2_t v68 = 0uLL;
    *(_OWORD *)v167 = 0u;
    long long v168 = 0u;
    *(_WORD *)&v169[4] = -1;
    v169[6] = 0;
    memset(&v169[8], 0, 36);
    *(_WORD *)&v169[44] = -1;
    v169[46] = 0;
    *(_DWORD *)&v169[48] = 0;
    *(_WORD *)&v169[52] = *(_WORD *)&v169[52] & 0x8000 | 0x280;
    *(_WORD *)&v169[54] = 0;
    v169[56] &= 0xE0u;
    if (v170 != v171)
    {
      while (1)
      {
        if ((sub_C73F4C((int **)v53, &v183, v67, v4[1], v9) & 1) == 0 || sub_C73CE0(*((void *)v53 + 9), v9)) {
          goto LABEL_97;
        }
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)v167), (int32x4_t)vceqzq_s64(*(int64x2_t *)&v169[8])))) & 1) == 0&& *(_DWORD *)v169&& *(_DWORD *)&v169[40])
        {
          break;
        }
LABEL_96:
        long long v72 = *((_OWORD *)v53 + 1);
        *(_OWORD *)v167 = *(_OWORD *)v53;
        long long v168 = v72;
        long long v73 = *((_OWORD *)v53 + 2);
        long long v74 = *((_OWORD *)v53 + 3);
        long long v75 = *((_OWORD *)v53 + 4);
        *(_OWORD *)&v169[44] = *(_OWORD *)(v53 + 76);
        *(_OWORD *)&v169[16] = v74;
        *(_OWORD *)&v169[32] = v75;
        *(_OWORD *)v169 = v73;
LABEL_97:
        v53 += 96;
        if (v53 == v52)
        {
          int64x2_t v68 = *(int64x2_t *)v167;
          int v70 = *(_DWORD *)v169;
          int v69 = *(_DWORD *)&v169[40];
          int64x2_t v71 = *(int64x2_t *)&v169[8];
          goto LABEL_148;
        }
      }
      long long v76 = (int *)*((void *)v53 + 1);
      long long v77 = (unsigned __int16 *)((char *)v76 - *v76);
      unsigned int v78 = *v77;
      if (v53[38])
      {
        if (v78 < 5) {
          goto LABEL_113;
        }
        unsigned int v79 = v77[2];
        if (!v79) {
          goto LABEL_113;
        }
LABEL_109:
        __int16 v80 = *(_WORD *)((char *)v76 + v79);
        int v81 = (int *)*((void *)v53 + 6);
        long long v82 = (unsigned __int16 *)((char *)v81 - *v81);
        unsigned int v83 = *v82;
        if (!v53[78]) {
          goto LABEL_110;
        }
LABEL_114:
        if (v83 >= 9)
        {
          unsigned int v84 = v82[4];
          if (v84) {
            goto LABEL_116;
          }
        }
LABEL_117:
        int v85 = 0;
      }
      else
      {
        if (v78 >= 9)
        {
          unsigned int v79 = v77[4];
          if (v79) {
            goto LABEL_109;
          }
        }
LABEL_113:
        __int16 v80 = 0;
        int v81 = (int *)*((void *)v53 + 6);
        long long v82 = (unsigned __int16 *)((char *)v81 - *v81);
        unsigned int v83 = *v82;
        if (v53[78]) {
          goto LABEL_114;
        }
LABEL_110:
        if (v83 < 5) {
          goto LABEL_117;
        }
        unsigned int v84 = v82[2];
        if (!v84) {
          goto LABEL_117;
        }
LABEL_116:
        int v85 = *(unsigned __int16 *)((char *)v81 + v84);
      }
      unsigned __int16 v86 = v80 + 18000;
      unsigned int v87 = (unsigned __int16)(v80 + 18000) >> 5;
      unsigned __int16 v88 = v80 - 18000;
      if (v87 < 0x465) {
        unsigned __int16 v88 = v86;
      }
      int v89 = v85 - v88;
      if (v89 > 18000) {
        v89 -= 36000;
      }
      if (v89 < -17999) {
        v89 += 36000;
      }
      int v90 = (unsigned __int16 *)((char *)v167[1] - *(int *)v167[1]);
      unsigned int v91 = *v90;
      if (v169[6])
      {
        if (v91 < 5) {
          goto LABEL_134;
        }
        unsigned int v92 = v90[2];
        if (!v92) {
          goto LABEL_134;
        }
LABEL_130:
        __int16 v93 = *(_WORD *)((char *)v167[1] + v92);
        uint64_t v94 = *(void *)&v169[16];
        long long v95 = (unsigned __int16 *)(*(void *)&v169[16] - (int)**(_DWORD **)&v169[16]);
        unsigned int v96 = *v95;
        if (!v169[46]) {
          goto LABEL_131;
        }
LABEL_135:
        if (v96 >= 9)
        {
          unsigned int v97 = v95[4];
          if (v97) {
            goto LABEL_137;
          }
        }
LABEL_138:
        int v98 = 0;
      }
      else
      {
        if (v91 >= 9)
        {
          unsigned int v92 = v90[4];
          if (v92) {
            goto LABEL_130;
          }
        }
LABEL_134:
        __int16 v93 = 0;
        uint64_t v94 = *(void *)&v169[16];
        long long v95 = (unsigned __int16 *)(*(void *)&v169[16] - (int)**(_DWORD **)&v169[16]);
        unsigned int v96 = *v95;
        if (v169[46]) {
          goto LABEL_135;
        }
LABEL_131:
        if (v96 < 5) {
          goto LABEL_138;
        }
        unsigned int v97 = v95[2];
        if (!v97) {
          goto LABEL_138;
        }
LABEL_137:
        int v98 = *(unsigned __int16 *)(v94 + v97);
      }
      double v99 = fabs((double)v89 / 100.0);
      unsigned __int16 v100 = v93 + 18000;
      unsigned int v101 = (unsigned __int16)(v93 + 18000) >> 5;
      unsigned __int16 v102 = v93 - 18000;
      if (v101 >= 0x465) {
        unsigned __int16 v100 = v102;
      }
      int v103 = v98 - v100;
      if (v103 > 18000) {
        v103 -= 36000;
      }
      if (v103 < -17999) {
        v103 += 36000;
      }
      if (v99 >= fabs((double)v103 / 100.0)) {
        goto LABEL_97;
      }
      goto LABEL_96;
    }
    int v69 = 0;
    int v70 = 0;
    int64x2_t v71 = 0uLL;
LABEL_148:
    int v104 = 0;
    uint64_t v6 = v152;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(v68), (int32x4_t)vceqzq_s64(v71)))) & 1) != 0
      || !v70
      || !v69)
    {
      goto LABEL_184;
    }
    unsigned int v105 = 1000000000;
    if (((((*(void *)v169 >> 16) & 0xFFFF0000 | (*(void *)v169 << 32) | (2
                                                                              * ((*(void *)v169 & 0xFF000000000000) == 0)))
         + 4 * *(unsigned __int16 *)&v169[48]) & 0xFFFFFFFFFFFFFFFELL | v169[56] & 1) == *(void *)v11)
      unsigned int v105 = 1000000000 - *v150;
    long long v106 = (unsigned __int16 *)(v68.i64[0] - *(int *)v68.i64[0]);
    if (*v106 >= 9u && (uint64_t v107 = v106[4]) != 0) {
      uint64_t v108 = *(unsigned int *)(v68.i64[0] + v107);
    }
    else {
      uint64_t v108 = 0;
    }
    double v109 = (double)v105 / 1000000000.0 * (double)v108;
    if (v109 >= 0.0)
    {
      if (v109 >= 4.50359963e15) {
        goto LABEL_165;
      }
      uint64_t v110 = (uint64_t)(v109 + v109) + 1;
    }
    else
    {
      if (v109 <= -4.50359963e15) {
        goto LABEL_165;
      }
      uint64_t v110 = (uint64_t)(v109 + v109);
      if (v110 >= 1) {
        --v110;
      }
    }
    double v109 = (double)(v110 >> 1);
LABEL_165:
    sub_EAFD8C((uint64_t)v227, (int **)v167);
    unint64_t v111 = ((*(void *)&v169[40] >> 16) & 0xFFFF0000 | (*(void *)&v169[40] << 32) | (2
                                                                                        * ((*(void *)&v169[40] & 0xFF000000000000) == 0)))
         + (((unint64_t)*(unsigned int *)&v169[48] >> 14) & 0x3FFFC);
    unint64_t v112 = v111 & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)v169[56] >> 1) & 1;
    unint64_t v188 = v112;
    uint64_t v113 = v181 - 1;
    unint64_t v114 = ((0x2127599BF4325C37 * (v112 ^ (v111 >> 23))) ^ ((0x2127599BF4325C37 * (v112 ^ (v111 >> 23))) >> 47)) & (v181 - 1);
    uint64_t v115 = *((void *)v182 + v114);
    if (*((void *)&v181 + 1) != v115)
    {
      if (v179)
      {
        uint64_t v116 = 1;
        while (v178 == v115 || v112 != v115)
        {
          unint64_t v114 = (v114 + v116) & v113;
          uint64_t v115 = *((void *)v182 + v114);
          ++v116;
          if (*((void *)&v181 + 1) == v115) {
            goto LABEL_176;
          }
        }
      }
      else
      {
        uint64_t v117 = 1;
        while (v112 != v115)
        {
          unint64_t v114 = (v114 + v117) & v113;
          uint64_t v115 = *((void *)v182 + v114);
          ++v117;
          if (*((void *)&v181 + 1) == v115) {
            goto LABEL_176;
          }
        }
      }
      if (v114 != -1)
      {
        if (sub_723EC(3u))
        {
          sub_6BAC((uint64_t)v160);
          long long v143 = sub_188FC78(v160, (uint64_t)"Found routing node loop while avoiding quick turns for request ", 63);
          int v144 = sub_69510();
          uint64_t v145 = sub_68EE4((uint64_t)v144);
          int v146 = *(char *)(v145 + 23);
          if (v146 >= 0) {
            uint64_t v147 = v145;
          }
          else {
            uint64_t v147 = *(void *)v145;
          }
          if (v146 >= 0) {
            uint64_t v148 = *(unsigned __int8 *)(v145 + 23);
          }
          else {
            uint64_t v148 = *(void *)(v145 + 8);
          }
          sub_188FC78(v143, v147, v148);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v158, 3u);
          if (v159 < 0) {
            operator delete(v158[0]);
          }
          if (v166 < 0) {
            operator delete(v165);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        sub_EAFC08(v152);
        goto LABEL_191;
      }
    }
LABEL_176:
    sub_C744A4((uint64_t)&v173, 1);
    sub_C74778(&v173, (uint64_t *)&v188, (uint64_t)v160);
    v151 += (uint64_t)v109;
    if (v151 >= *v154)
    {
      int v118 = *(_DWORD *)&v169[16];
      if (*(void *)&v169[16])
      {
        long long v119 = (unsigned __int16 *)(*(void *)&v169[16] - (int)**(_DWORD **)&v169[16]);
        if (*v119 >= 0x11u && (uint64_t v120 = v119[8]) != 0) {
          int v118 = (*(unsigned __int16 *)(*(void *)&v169[16] + v120) >> 2) & 1;
        }
        else {
          int v118 = 0;
        }
      }
      int v104 = v118 ^ 1;
    }
    else
    {
      int v104 = 0;
    }
LABEL_184:
    if (v45 != v188)
    {
      unint64_t v45 = v188;
      if ((v104 & 1) == 0) {
        continue;
      }
    }
    goto LABEL_189;
  }
  sub_EAD268((uint64_t)v227);
LABEL_188:
  int v104 = 0;
LABEL_189:
  if ((sub_EAE144(v227) | v104 ^ 1) != 1)
  {
    *(_OWORD *)unint64_t v160 = *(_OWORD *)v150;
    long long v121 = *(_OWORD *)(v11 + 24);
    long long v122 = *(_OWORD *)(v11 + 40);
    long long v123 = *(_OWORD *)(v11 + 56);
    uint64_t v164 = *((void *)v11 + 9);
    long long v162 = v122;
    long long v163 = v123;
    long long v161 = v121;
    LODWORD(v160[0]) = 0;
    v167[0] = 0;
    v167[1] = 0;
    *(void *)&long long v168 = 0;
    *((void *)&v168 + 1) = -1;
    v158[0] = (void *)sub_EAFF14((uint64_t)v227);
    sub_BF6964((char **)v167, v158, (long long *)v160);
    sub_EAD920((uint64_t)v227, (uint64_t)v150);
    sub_BE8478((char **)v167, (uint64_t)v167[1], *v149, v149[1], 0xCCCCCCCCCCCCCCCDLL * ((v149[1] - *v149) >> 4));
    long long v124 = (char *)v167[1];
    for (uint64_t i = (char *)v167[0] + 80; i != v124; i += 80)
    {
      if (*((double *)i + 5) <= 0.95 || !i[72]) {
        *((void *)i + 5) = 0;
      }
    }
    sub_444D20((char *)&v194, v227);
    long long v155 = 0uLL;
    uint64_t v156 = 0;
    long long v126 = v167[0];
    int64_t v127 = (char *)v167[1] - (char *)v167[0];
    if (v167[1] != v167[0])
    {
      if (0xCCCCCCCCCCCCCCCDLL * (v127 >> 4) >= 0x333333333333334) {
        sub_2E00();
      }
      *(void *)&long long v155 = operator new((char *)v167[1] - (char *)v167[0]);
      uint64_t v156 = v155 + 16 * (v127 >> 4);
      size_t v128 = 80 * ((v127 - 80) / 0x50uLL) + 80;
      memcpy((void *)v155, v126, v128);
      *((void *)&v155 + 1) = v155 + v128;
    }
    uint64_t v157 = *((void *)&v168 + 1);
    uint64_t v129 = v197;
    *(void *)(v6 + 16) = v195;
    *(void *)(v6 + 40) = v129;
    uint64_t v130 = v204;
    *(void *)(v6 + 128) = v202;
    *(void *)(v6 + 152) = v130;
    uint64_t v131 = v209;
    *(void *)(v6 + 176) = v206;
    *(void *)(v6 + 216) = v131;
    uint64_t v132 = v213;
    *(void *)(v6 + 240) = v211;
    *(_OWORD *)uint64_t v6 = v194;
    long long v194 = 0uLL;
    *(_OWORD *)(v6 + 24) = v196;
    uint64_t v195 = 0;
    long long v196 = 0uLL;
    uint64_t v197 = 0;
    long long v133 = v198;
    long long v134 = v199;
    long long v135 = v200[0];
    *(_OWORD *)(v6 + 94) = *(_OWORD *)((char *)v200 + 14);
    *(_OWORD *)(v6 + 64) = v134;
    *(_OWORD *)(v6 + 80) = v135;
    *(_OWORD *)(v6 + 48) = v133;
    *(_OWORD *)(v6 + 112) = v201;
    long long v201 = 0uLL;
    *(_OWORD *)(v6 + 136) = v203;
    uint64_t v202 = 0;
    long long v203 = 0uLL;
    uint64_t v204 = 0;
    *(_OWORD *)(v6 + 160) = v205;
    long long v205 = 0uLL;
    long long v136 = v207;
    *(_OWORD *)(v6 + 200) = v208;
    *(_OWORD *)(v6 + 184) = v136;
    *(_OWORD *)(v6 + 224) = v210;
    uint64_t v206 = 0;
    long long v210 = 0uLL;
    uint64_t v211 = 0;
    *(_OWORD *)(v6 + 248) = v212;
    *(void *)(v6 + 264) = v132;
    long long v212 = 0uLL;
    uint64_t v213 = 0;
    *(_OWORD *)(v6 + 272) = v214;
    LODWORD(v132) = v216;
    *(_DWORD *)(v6 + 296) = v216;
    if (v132 <= 1) {
      *(void *)(v6 + 288) = v215;
    }
    long long v137 = *(_OWORD *)v226;
    *(_OWORD *)(v6 + 432) = v225;
    *(_OWORD *)(v6 + 448) = v137;
    long long v138 = v222;
    *(_OWORD *)(v6 + 368) = v221;
    *(_OWORD *)(v6 + 384) = v138;
    long long v139 = v224;
    *(_OWORD *)(v6 + 400) = v223;
    *(_OWORD *)(v6 + 416) = v139;
    long long v140 = v218;
    *(_OWORD *)(v6 + 304) = v217;
    *(_OWORD *)(v6 + 320) = v140;
    long long v141 = v220;
    *(_OWORD *)(v6 + 336) = v219;
    *(_OWORD *)(v6 + 352) = v141;
    *(void *)(v6 + 463) = *(void *)&v226[15];
    *(_OWORD *)(v6 + 472) = v155;
    *(void *)(v6 + 488) = v156;
    *(void *)(v6 + 496) = v157;
    sub_405F44((uint64_t)&v194);
    if (v167[0])
    {
      v167[1] = v167[0];
      operator delete(v167[0]);
    }
    goto LABEL_206;
  }
  sub_EAFC08(v6);
LABEL_191:
  *(void *)(v6 + 472) = 0;
  *(void *)(v6 + 480) = 0;
  *(void *)(v6 + 488) = 0;
  *(void *)(v6 + 496) = -1;
LABEL_206:
  sub_405F44((uint64_t)v227);
  if (v170)
  {
    v171 = (char *)v170;
    operator delete(v170);
  }
  if (v182) {
    free(v182);
  }
LABEL_54:
  if (__p)
  {
    v192 = __p;
    operator delete(__p);
  }
  return sub_3A6318(v190);
}

void sub_C73B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a26);
  sub_405F44((uint64_t)&STACK[0x14B0]);
  if (a72)
  {
    a73 = a72;
    operator delete(a72);
    long long v74 = (void *)STACK[0x248];
    if (!STACK[0x248])
    {
LABEL_5:
      sub_C62E9C(&STACK[0x290]);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    long long v74 = (void *)STACK[0x248];
    if (!STACK[0x248]) {
      goto LABEL_5;
    }
  }
  free(v74);
  sub_C62E9C(&STACK[0x290]);
  _Unwind_Resume(a1);
}

BOOL sub_C73CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  v13[0] = a2;
  v13[1] = (uint64_t)&v14;
  uint64_t v14 = a1;
  sub_3E1DFC(a2, a1, (uint64_t)&__p, (uint64_t)v13);
  long long v3 = (char *)__p;
  uint64_t v4 = v11;
  v13[0] = a2;
  if (__p == v11)
  {
    BOOL v7 = 0;
    if (!__p) {
      return v7;
    }
    goto LABEL_8;
  }
  uint64_t v5 = (char *)__p + 8;
  do
  {
    BOOL v6 = sub_C74360(v13, *((void *)v5 - 1));
    BOOL v7 = v6;
    int v8 = v5 == v4 || v6;
    v5 += 8;
  }
  while (v8 != 1);
  long long v3 = (char *)__p;
  if (__p)
  {
LABEL_8:
    uint64_t v11 = v3;
    operator delete(v3);
  }
  return v7;
}

void sub_C73D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C73DB0(int **a1)
{
  uint64_t v1 = (char *)*a1;
  uint64_t v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v3 = *v2;
  if (v3 < 0xB)
  {
    int v5 = 0;
    int v6 = 0;
    goto LABEL_9;
  }
  uint64_t v4 = v2[5];
  if (v2[5] && (v1[v4 + 1] & 1) != 0)
  {
    int v5 = 1;
    if (v3 < 0x2F)
    {
      int v6 = 0;
      if ((v1[v4] & 8) != 0)
      {
LABEL_7:
        v5 |= 4u;
        goto LABEL_9;
      }
      goto LABEL_9;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
    if (v3 <= 0x2E)
    {
      if (!v2[5]) {
        goto LABEL_9;
      }
LABEL_6:
      if ((v1[v4] & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  if (v2[23] && !v1[v2[23]]) {
    v5 |= 2u;
  }
  int v6 = 1;
  if (v2[5]) {
    goto LABEL_6;
  }
LABEL_9:
  if (*((unsigned char *)a1 + 38))
  {
    if (v3 < 0x4D || !v2[38] || (v1[v2[38]] & 2) == 0 && (*(_DWORD *)&v1[v2[38]] & 8) == 0) {
      goto LABEL_21;
    }
  }
  else if (v3 < 0x4D || !v2[38] || (v1[v2[38]] & 1) == 0 && (*(_DWORD *)&v1[v2[38]] & 4) == 0)
  {
LABEL_21:
    int v7 = v5 | 0x1B0;
    if (!v6) {
      goto LABEL_28;
    }
    goto LABEL_22;
  }
  int v7 = v5 | 0x9B0;
  if (!v6) {
    goto LABEL_28;
  }
LABEL_22:
  if (v2[23])
  {
    unsigned int v8 = v1[v2[23]];
    BOOL v9 = v8 > 0x2D;
    uint64_t v10 = (1 << v8) & 0x208040000000;
    if (!v9 && v10 != 0) {
      goto LABEL_27;
    }
  }
LABEL_28:
  if (v3 >= 0x1B && v2[13] && v1[v2[13]] >= 8u && v2[5] && (v1[v2[5] + 3] & 2) != 0) {
LABEL_27:
  }
    v7 |= 0x1000u;
  if (v3 >= 0xB)
  {
    uint64_t v12 = v2[5];
    if (v12)
    {
      if ((*(_DWORD *)&v1[v12] & 0x600000) != 0) {
        v7 |= 0x80000u;
      }
    }
  }
  return v7 | 0x200u;
}

uint64_t sub_C73F4C(int **a1, _DWORD *a2, unsigned int a3, void *a4, uint64_t a5)
{
  char v41 = 17;
  strcpy(__p, "apply_to_freeways");
  if (sub_29D62C(a4, (uint64_t)__p))
  {
    if (v41 < 0) {
      operator delete(*(void **)__p);
    }
  }
  else
  {
    uint64_t v10 = (unsigned __int16 *)((char *)*a1 - **a1);
    if (*v10 >= 0x2Fu)
    {
      uint64_t v11 = v10[23];
      if (v11)
      {
        char v12 = 1;
        switch(*((unsigned char *)*a1 + v11))
        {
          case 0:
            if (v41 < 0) {
              operator delete(*(void **)__p);
            }
            return 0;
          case 0x10:
          case 0x17:
          case 0x1A:
            if ((v41 & 0x80000000) == 0) {
              goto LABEL_8;
            }
            goto LABEL_11;
          default:
            break;
        }
      }
    }
    char v12 = 0;
    if (v41 < 0)
    {
LABEL_11:
      operator delete(*(void **)__p);
      if (v12) {
        return 0;
      }
    }
    else
    {
LABEL_8:
      if (v12) {
        return 0;
      }
    }
  }
  uint64_t v13 = (unsigned __int16 *)((char *)*a1 - **a1);
  if (*v13 >= 0x1Bu && (uint64_t v14 = v13[13]) != 0) {
    unsigned int v15 = *((unsigned __int8 *)*a1 + v14);
  }
  else {
    unsigned int v15 = 0;
  }
  std::string v17 = (char **)(a1 + 5);
  unint64_t v16 = a1[5];
  unint64_t v18 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v18 >= 0x1Bu && (uint64_t v19 = v18[13]) != 0) {
    unsigned int v20 = *((unsigned __int8 *)v16 + v19);
  }
  else {
    unsigned int v20 = 0;
  }
  char v41 = 7;
  strcpy(__p, "min_frc");
  unsigned int v21 = sub_31AC04(a4, (uint64_t)__p);
  unsigned int v22 = v21;
  if (v20 < v15) {
    unsigned int v15 = v20;
  }
  if (v41 < 0)
  {
    operator delete(*(void **)__p);
    if (v15 < v22) {
      return 0;
    }
  }
  else if (v15 < v21)
  {
    return 0;
  }
  uint64_t v23 = (unsigned __int16 *)((char *)*a1 - **a1);
  if (*v23 >= 0x1Bu && (uint64_t v24 = v23[13]) != 0)
  {
    unsigned int v25 = *((unsigned __int8 *)*a1 + v24);
    uint64_t v26 = *v17;
    double v27 = &(*v17)[-*(int *)*v17];
    if (*(unsigned __int16 *)v27 < 0x1Bu) {
      goto LABEL_33;
    }
  }
  else
  {
    unsigned int v25 = 0;
    uint64_t v26 = *v17;
    double v27 = &(*v17)[-*(int *)*v17];
    if (*(unsigned __int16 *)v27 < 0x1Bu) {
      goto LABEL_33;
    }
  }
  uint64_t v28 = *((unsigned __int16 *)v27 + 13);
  if (v28)
  {
    unsigned int v29 = v26[v28];
    goto LABEL_34;
  }
LABEL_33:
  unsigned int v29 = 0;
LABEL_34:
  char v41 = 7;
  strcpy(__p, "max_frc");
  unsigned int v30 = sub_31AC04(a4, (uint64_t)__p);
  unsigned int v31 = v30;
  if (v25 <= v29) {
    unsigned int v25 = v29;
  }
  if (v41 < 0)
  {
    operator delete(*(void **)__p);
    if (v25 > v31) {
      return 0;
    }
  }
  else if (v25 > v30)
  {
    return 0;
  }
  uint64_t v32 = *v17;
  uint64_t v33 = &(*v17)[-*(int *)*v17];
  unsigned int v34 = *(unsigned __int16 *)v33;
  if (v34 >= 0x1B && *((_WORD *)v33 + 13) && v32[*((unsigned __int16 *)v33 + 13)] > a3) {
    return 0;
  }
  unint64_t v35 = (unsigned __int16 *)((char *)*a1 - **a1);
  if (*v35 >= 0x1Bu)
  {
    uint64_t v36 = v35[13];
    if (v36)
    {
      unsigned int v37 = *((unsigned __int8 *)*a1 + v36);
      if (v34 < 0x1B) {
        goto LABEL_50;
      }
LABEL_48:
      uint64_t v38 = *((unsigned __int16 *)v33 + 13);
      if (v38 && v37 < v32[v38]) {
        return 0;
      }
      goto LABEL_50;
    }
  }
  unsigned int v37 = 0;
  if (v34 >= 0x1B) {
    goto LABEL_48;
  }
LABEL_50:
  if (!sub_C74ED8(a1, a4, a5) && !sub_C75140(a1) && (sub_C73DB0(a1 + 5) & ~*a2) == 0) {
    return sub_C752F4(a1) ^ 1;
  }
  return 0;
}

void sub_C742D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_C74360(uint64_t *a1, unint64_t a2)
{
  sub_68F5DC(*a1, a2, (unint64_t *)&__p);
  uint64_t v4 = __p;
  if (__p == v16)
  {
    BOOL v8 = 0;
    if (!__p) {
      return v8;
    }
    goto LABEL_16;
  }
  int v5 = (int *)sub_2DBC9C(*a1, a2);
  int v6 = (unsigned __int16 *)((char *)v5 - *v5);
  unsigned int v7 = *v6;
  if (v7 < 0xF)
  {
    if (v7 < 5) {
      goto LABEL_15;
    }
  }
  else if (v6[7] && (*((unsigned char *)v5 + v6[7]) & 1) == 0)
  {
LABEL_11:
    uint64_t v10 = (int *)sub_2DBC9C(*a1, a2);
    uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
    unsigned int v12 = *v11;
    if (v12 < 0xF)
    {
      if (v12 < 5) {
        goto LABEL_22;
      }
    }
    else if (v11[7] && (*((unsigned char *)v10 + v11[7]) & 1) == 0)
    {
LABEL_22:
      BOOL v8 = 0;
      uint64_t v4 = __p;
      if (!__p) {
        return v8;
      }
      goto LABEL_16;
    }
    uint64_t v14 = v11[2];
    if (v14)
    {
      BOOL v8 = *((unsigned __int8 *)v10 + v14) == 1;
      uint64_t v4 = __p;
      if (!__p) {
        return v8;
      }
      goto LABEL_16;
    }
    goto LABEL_22;
  }
  uint64_t v9 = v6[2];
  if (v9 && *((unsigned __int8 *)v5 + v9) - 1 < 5) {
    goto LABEL_11;
  }
LABEL_15:
  BOOL v8 = 1;
  uint64_t v4 = __p;
  if (__p)
  {
LABEL_16:
    unint64_t v16 = v4;
    operator delete(v4);
  }
  return v8;
}

void sub_C74488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C744A4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t result = sub_C74914(a1);
    unint64_t v5 = *(void *)(a1 + 48);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v5 = *(void *)(a1 + 48);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  unint64_t v6 = *(void *)(a1 + 56);
  unint64_t v7 = v5 + a2;
  if (v6 < 4 || v7 > *(void *)a1)
  {
    float v8 = *(float *)(a1 + 16);
    unint64_t v9 = vcvts_n_u32_f32(v8, 2uLL);
    unint64_t v10 = 4;
    if (v7 >= v9)
    {
      while ((v10 & 0x8000000000000000) == 0)
      {
        v10 *= 2;
        if (v7 < (unint64_t)(float)(v8 * (float)v10)) {
          goto LABEL_8;
        }
      }
LABEL_27:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
LABEL_8:
    if (v10 > v6)
    {
      unint64_t v11 = *(void *)(a1 + 40);
      unint64_t v12 = v5 - v11 + a2;
      unint64_t v13 = 4;
      if (v6 > 4) {
        goto LABEL_11;
      }
LABEL_10:
      if (v12 >= (unint64_t)(float)(v8 * (float)v13))
      {
LABEL_11:
        while ((v13 & 0x8000000000000000) == 0)
        {
          v13 *= 2;
          if (v13 >= v6) {
            goto LABEL_10;
          }
        }
        goto LABEL_27;
      }
      unint64_t v14 = v7 - (v11 >> 2);
      unint64_t v15 = 4;
      if (v14 >= v9)
      {
        while ((v15 & 0x8000000000000000) == 0)
        {
          v15 *= 2;
          if (v14 < (unint64_t)(float)(v8 * (float)v15)) {
            goto LABEL_19;
          }
        }
        goto LABEL_27;
      }
LABEL_19:
      if (v13 <= 0x7FFFFFFFFFFFFFFELL
        && v13 < v15
        && v12 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v13)))
      {
        v13 *= 2;
      }
      sub_C74A4C((uint64_t)&v24, a1, v13);
      uint64x2_t v17 = *(uint64x2_t *)a1;
      long long v16 = *(_OWORD *)(a1 + 16);
      long long v18 = v25;
      *(uint64x2_t *)a1 = v24;
      *(_OWORD *)(a1 + 16) = v18;
      uint64x2_t v24 = v17;
      long long v25 = v16;
      long long v19 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 32) = v26;
      long long v26 = v19;
      uint64_t v20 = *(void *)(a1 + 48);
      *(void *)(a1 + 48) = v27;
      uint64_t v27 = v20;
      *(void *)&long long v16 = v28;
      long long v21 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)(a1 + 56) = v28;
      long long v28 = v21;
      unsigned int v22 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v29;
      unsigned int v29 = v22;
      *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v16)));
      *(unsigned char *)(a1 + 24) = 0;
      uint64x2_t v24 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v25, (float)(unint64_t)v21)));
      BYTE8(v25) = 0;
      if (v22) {
        free(v22);
      }
      return 1;
    }
  }
  return result;
}

void sub_C74728(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_C7473C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_C74750(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_C74764(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_C74778@<X0>(void *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result[7];
  uint64_t v4 = result[8];
  uint64_t v5 = v3 - 1;
  uint64_t v6 = *a2;
  unint64_t v7 = 0x2127599BF4325C37 * (*a2 ^ ((unint64_t)*a2 >> 23));
  unint64_t v8 = v7 ^ (v7 >> 47);
  uint64_t v9 = result[9];
  uint64_t v10 = v8 & (v3 - 1);
  uint64_t v11 = *(void *)(v9 + 8 * v10);
  uint64_t v12 = result[5];
  if (v4 == v11)
  {
LABEL_2:
    uint64_t v13 = v10;
    goto LABEL_3;
  }
  if (v12)
  {
    uint64_t v13 = -1;
    uint64_t v17 = 1;
    do
    {
      if (result[4] == v11)
      {
        if (v13 == -1) {
          uint64_t v13 = v10;
        }
      }
      else if (v6 == v11)
      {
        goto LABEL_17;
      }
      uint64_t v10 = (v10 + v17) & v5;
      uint64_t v11 = *(void *)(v9 + 8 * v10);
      ++v17;
    }
    while (v4 != v11);
    if (v13 != -1) {
      goto LABEL_3;
    }
    goto LABEL_2;
  }
  uint64_t v18 = 1;
  while (v6 != v11)
  {
    uint64_t v10 = (v10 + v18) & v5;
    uint64_t v11 = *(void *)(v9 + 8 * v10);
    ++v18;
    if (v4 == v11)
    {
      uint64_t v12 = 0;
      goto LABEL_2;
    }
  }
LABEL_17:
  if (v10 != -1)
  {
    char v16 = 0;
    unint64_t v15 = (void *)(v9 + 8 * v10);
    goto LABEL_9;
  }
  uint64_t v13 = -1;
LABEL_3:
  uint64_t v14 = result[6];
  if ((unint64_t)(v14 - v12) >= 0x1FFFFFFFFFFFFFFFLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2E18(exception, "insert overflow");
  }
  if (v12 && result[4] == *(void *)(v9 + 8 * v13)) {
    result[5] = v12 - 1;
  }
  else {
    result[6] = v14 + 1;
  }
  unint64_t v15 = (void *)(v9 + 8 * v13);
  void *v15 = v6;
  char v16 = 1;
LABEL_9:
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v15;
  *(void *)(a3 + 16) = v9 + 8 * v3;
  *(unsigned char *)(a3 + 24) = v16;
  return result;
}

void sub_C74900(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C74914(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 48) - *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 56), v5 < 0x21))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    float v6 = (float)v2;
    do
    {
      unint64_t v7 = v5;
      v5 >>= 1;
    }
    while (v7 >= 0x42 && (float)(*(float *)(a1 + 20) * (float)v5) > v6);
    sub_C74A4C((uint64_t)&v16, a1, v5);
    uint64x2_t v9 = *(uint64x2_t *)a1;
    long long v8 = *(_OWORD *)(a1 + 16);
    long long v10 = v17;
    *(uint64x2_t *)a1 = v16;
    *(_OWORD *)(a1 + 16) = v10;
    uint64x2_t v16 = v9;
    long long v17 = v8;
    long long v11 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v18;
    long long v18 = v11;
    uint64_t v12 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v19;
    uint64_t v19 = v12;
    *(void *)&long long v8 = v20;
    long long v13 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v20;
    long long v20 = v13;
    uint64_t v14 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v21;
    long long v21 = v14;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v8)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v16 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v17, (float)(unint64_t)v13)));
    BYTE8(v17) = 0;
    if (v14) {
      free(v14);
    }
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

float sub_C74A4C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = 0;
  if (*(unsigned char *)(a2 + 25))
  {
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)(a1 + 16), 0)));
    *(unsigned char *)(a1 + 24) = 0;
    sub_C74B88(a1, (void *)a2, a3);
  }
  else
  {
    unint64_t v6 = 4;
    if (a3 > 4) {
      goto LABEL_5;
    }
    while (1)
    {
      float v7 = *(float *)(a1 + 16) * (float)v6;
      if (*(void *)(a2 + 48) - *(void *)(a2 + 40) < (unint64_t)v7) {
        break;
      }
      do
      {
LABEL_5:
        if ((v6 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "resize overflow");
        }
        v6 *= 2;
      }
      while (v6 < a3);
    }
    *(void *)(a1 + 56) = v6;
    float result = *(float *)(a1 + 20) * (float)v6;
    *(void *)a1 = (unint64_t)v7;
    *(void *)(a1 + 8) = (unint64_t)result;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_C74B74(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_C74B88(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v5 = a2[6] - a2[5];
  unint64_t v6 = 4;
  if (a3 > 4) {
    goto LABEL_3;
  }
  while (v5 >= (unint64_t)(float)(*(float *)(a1 + 16) * (float)v6))
  {
    do
    {
LABEL_3:
      if ((v6 & 0x8000000000000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v6 *= 2;
    }
    while (v6 < a3);
  }
  sub_C74D8C(a1, v6);
  uint64_t v7 = a2[7];
  if (v7)
  {
    uint64_t v8 = a2[8];
    if (a2[5])
    {
      uint64_t v9 = 8 * v7;
      long long v10 = (void *)a2[9];
      while (v8 == *v10 || a2[4] == *v10)
      {
        ++v10;
        v9 -= 8;
        if (!v9) {
          goto LABEL_38;
        }
      }
    }
    else
    {
      uint64_t v21 = 8 * v7;
      long long v10 = (void *)a2[9];
      while (v8 == *v10)
      {
        ++v10;
        v21 -= 8;
        if (!v21) {
          goto LABEL_38;
        }
      }
    }
  }
  else
  {
    long long v10 = (void *)a2[9];
  }
  uint64_t v12 = a2[9] + 8 * v7;
  if (v10 != (void *)v12)
  {
    uint64_t v13 = *(void *)(a1 + 56) - 1;
    uint64_t v14 = *(void *)(a1 + 72);
    do
    {
      unint64_t v15 = 0x2127599BF4325C37 * (*v10 ^ (*v10 >> 23));
      uint64_t v16 = *(void *)(a1 + 64);
      unint64_t v17 = (v15 ^ (v15 >> 47)) & v13;
      if (v16 != *(void *)(v14 + 8 * v17))
      {
        uint64_t v18 = 1;
        do
          unint64_t v17 = (v17 + v18++) & v13;
        while (v16 != *(void *)(v14 + 8 * v17));
      }
      *(void *)(v14 + 8 * v17) = *v10;
      ++*(void *)(a1 + 48);
      if (++v10 == (void *)v12) {
        break;
      }
      uint64_t v19 = a2[8];
      if (a2[5])
      {
        while (v19 == *v10 || a2[4] == *v10)
        {
          if (++v10 == (void *)v12) {
            goto LABEL_38;
          }
        }
      }
      else
      {
        while (v19 == *v10)
        {
          if (++v10 == (void *)v12) {
            goto LABEL_38;
          }
        }
      }
    }
    while (v10 != (void *)v12);
  }
LABEL_38:
  ++*(_DWORD *)(a1 + 28);
}

void sub_C74D78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64x2_t sub_C74D8C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(char **)(a1 + 72);
  if (!v4)
  {
    unint64_t v5 = (char *)malloc_type_malloc(8 * a2, 0x100004000313F17uLL);
LABEL_6:
    *(void *)(a1 + 72) = v5;
    uint64_t v4 = v5;
    goto LABEL_7;
  }
  if (*(void *)(a1 + 56) != a2)
  {
    unint64_t v5 = (char *)malloc_type_realloc(*(void **)(a1 + 72), 8 * a2, 0x100004000313F17uLL);
    if (!v5)
    {
      fprintf(__stderrp, "sparsehash: FATAL ERROR: failed to reallocate %lu elements for ptr %p", a2, v4);
      exit(1);
    }
    goto LABEL_6;
  }
LABEL_7:
  if (a2)
  {
    unint64_t v6 = (const double *)(a1 + 64);
    unint64_t v7 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v8 = v4;
    if (v7 < 0xF) {
      goto LABEL_18;
    }
    if ((unint64_t)v4 < a1 + 72)
    {
      uint64_t v8 = v4;
      if (v6 < (const double *)&v4[8 * a2]) {
        goto LABEL_18;
      }
    }
    unint64_t v9 = v7 + 1;
    uint64_t v8 = &v4[8 * (v9 & 0x3FFFFFFFFFFFFFFCLL)];
    float64x2_t v10 = vld1q_dup_f64(v6);
    long long v11 = (float64x2_t *)(v4 + 16);
    uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11[-1] = v10;
      float64x2_t *v11 = v10;
      v11 += 2;
      v12 -= 4;
    }
    while (v12);
    if (v9 != (v9 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_18:
      do
      {
        *(double *)uint64_t v8 = *v6;
        v8 += 8;
      }
      while (v8 != &v4[8 * a2]);
    }
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a2;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)a2)));
  *(uint64x2_t *)a1 = result;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

BOOL sub_C74ED8(int **a1, void *a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t)a1[4];
  uint64_t v7 = (uint64_t)a1[9];
  unint64_t v8 = sub_2E68E8(a3, v6);
  BOOL v9 = v8 > 0xFFFFFFFEFFFFFFFFLL || v8 == 0;
  if (!v9 && (sub_2E79EC(a3, v6, v7) & 1) != 0) {
    return 0;
  }
  long long v11 = a1[1];
  uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  unsigned int v13 = *v12;
  if (*((unsigned char *)a1 + 38))
  {
    if (v13 < 5) {
      goto LABEL_17;
    }
    unsigned int v14 = v12[2];
    if (!v14) {
      goto LABEL_17;
    }
  }
  else if (v13 < 9 || (unsigned int v14 = v12[4]) == 0)
  {
LABEL_17:
    __int16 v15 = 0;
    uint64_t v16 = a1[6];
    unint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
    unsigned int v18 = *v17;
    if (*((unsigned char *)a1 + 78)) {
      goto LABEL_18;
    }
LABEL_14:
    if (v18 >= 5)
    {
      unsigned int v19 = v17[2];
      if (v19) {
        goto LABEL_20;
      }
    }
LABEL_21:
    int v20 = 0;
    goto LABEL_22;
  }
  __int16 v15 = *(_WORD *)((char *)v11 + v14);
  uint64_t v16 = a1[6];
  unint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
  unsigned int v18 = *v17;
  if (!*((unsigned char *)a1 + 78)) {
    goto LABEL_14;
  }
LABEL_18:
  if (v18 < 9) {
    goto LABEL_21;
  }
  unsigned int v19 = v17[4];
  if (!v19) {
    goto LABEL_21;
  }
LABEL_20:
  int v20 = *(unsigned __int16 *)((char *)v16 + v19);
LABEL_22:
  unsigned __int16 v21 = v15 + 18000;
  unsigned int v22 = (unsigned __int16)(v15 + 18000) >> 5;
  unsigned __int16 v23 = v15 - 18000;
  if (v22 < 0x465) {
    unsigned __int16 v23 = v21;
  }
  int v24 = v20 - v23;
  if (v24 > 18000) {
    v24 -= 36000;
  }
  if (v24 >= -17999) {
    int v25 = v24;
  }
  else {
    int v25 = v24 + 36000;
  }
  long long v26 = (unsigned __int16 *)((char *)*a1 - **a1);
  if (*v26 >= 0x1Bu && (uint64_t v27 = v26[13]) != 0 && *((unsigned char *)*a1 + v27))
  {
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_20B8870;
    strcpy((char *)__p[0], "max_turn_angle_higher_frc");
    double v28 = sub_5C7E8(a2, (uint64_t)__p);
  }
  else
  {
    HIBYTE(__p[2]) = 19;
    strcpy((char *)__p, "max_turn_angle_frc0");
    double v28 = sub_5C7E8(a2, (uint64_t)__p);
  }
  double v29 = v28;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return fabs((double)v25 / 100.0) > v29;
}

void sub_C7511C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_C75140(int **a1)
{
  uint64_t v1 = (char *)*a1;
  unint64_t v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v3 = *v2;
  if (!*((unsigned char *)a1 + 38))
  {
    if (v3 >= 0xB)
    {
      uint64_t v6 = v2[5];
      if (v6)
      {
        unsigned int v5 = *(_DWORD *)&v1[v6];
        if ((v5 & 1) == 0 && (v5 & 2) == 0) {
          goto LABEL_17;
        }
LABEL_11:
        if ((v5 & 0x40000) != 0)
        {
          LOBYTE(v7) = 3;
        }
        else if ((v5 & 0xA0000) != 0)
        {
          if ((v5 & 0x2000000) != 0) {
            LOBYTE(v7) = 3;
          }
          else {
            LOBYTE(v7) = 4;
          }
        }
        else
        {
          LOBYTE(v7) = 5;
        }
        goto LABEL_21;
      }
    }
LABEL_20:
    LOBYTE(v7) = 2;
    goto LABEL_21;
  }
  if (v3 < 0xB) {
    goto LABEL_20;
  }
  uint64_t v4 = v2[5];
  if (!v4) {
    goto LABEL_20;
  }
  unsigned int v5 = *(_DWORD *)&v1[v4];
  if (v5 & 2) != 0 || (v5) {
    goto LABEL_11;
  }
LABEL_17:
  if ((v5 & 0x40000) == 0)
  {
    if ((v5 & 0xA0000) != 0)
    {
      int v7 = (v5 >> 25) & 1;
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  LOBYTE(v7) = 1;
LABEL_21:
  unint64_t v8 = a1[5];
  BOOL v9 = (unsigned __int16 *)((char *)v8 - *v8);
  unsigned int v10 = *v9;
  if (!*((unsigned char *)a1 + 78))
  {
    if (v10 >= 0xB)
    {
      uint64_t v13 = v9[5];
      if (v13)
      {
        int v12 = *(int *)((char *)v8 + v13);
        if ((v12 & 1) == 0 && (v12 & 2) == 0) {
          goto LABEL_38;
        }
LABEL_31:
        if ((v12 & 0x40000) != 0) {
          return v7 != 3;
        }
        if ((v12 & 0xA0000) == 0) {
          return v7 != 5;
        }
        if ((v12 & 0x2000000) != 0) {
          unsigned __int8 v14 = 3;
        }
        else {
          unsigned __int8 v14 = 4;
        }
        return v7 != v14;
      }
    }
    return v7 != 2;
  }
  if (v10 < 0xB) {
    return v7 != 2;
  }
  uint64_t v11 = v9[5];
  if (!v11) {
    return v7 != 2;
  }
  int v12 = *(int *)((char *)v8 + v11);
  if (v12 & 2) != 0 || (v12) {
    goto LABEL_31;
  }
LABEL_38:
  if ((v12 & 0x40000) == 0)
  {
    if ((v12 & 0xA0000) != 0) {
      return v7 != ((v12 & 0x2000000) != 0);
    }
    return v7 != 2;
  }
  return v7 != 1;
}

unint64_t sub_C752F4(int **a1)
{
  uint64_t v1 = (unsigned __int16 *)((char *)*a1 - **a1);
  if (*v1 < 0x2Fu) {
    return 0;
  }
  uint64_t v2 = v1[23];
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *((unsigned __int8 *)*a1 + v2);
  BOOL v4 = v3 > 0x36;
  uint64_t v5 = (1 << v3) & 0x44000000000008;
  BOOL v6 = v4 || v5 == 0;
  if (!v6
    && (v7 = a1[5], unint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7), *v8 >= 0x2Fu)
    && (uint64_t v9 = v8[23]) != 0
    && (unsigned int v10 = *((unsigned __int8 *)v7 + v9), v10 <= 0x36))
  {
    return (0x44000000000008uLL >> v10) & 1;
  }
  else
  {
    return 0;
  }
}

BOOL sub_C75380(void *a1, unint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  if (a1)
  {
    if (a3)
    {
      do
      {
        unint64_t v10 = sub_EB04C4(a1);
        unint64_t v11 = sub_EB04C4(a3);
        if (a2 >= v10 || a4 >= v11)
        {
          if (a2 < v10 == a4 < v11) {
            return 0;
          }
        }
        else
        {
          uint64_t v12 = sub_EB0624(a1, a2);
          if (v12 == sub_EB0624(a3, a4)) {
            return 0;
          }
        }
        uint64_t v13 = (int **)sub_EB0624(a1, a2);
        if (sub_3EB32C(a5, v13)) {
          break;
        }
        sub_3F4E6C(a5, (uint64_t)v13, (uint64_t)&v26);
        unsigned __int8 v14 = v26;
        __int16 v15 = v27;
        if (v26)
        {
          uint64_t v27 = v26;
          operator delete(v26);
        }
        ++a2;
      }
      while (v14 == v15);
      return 1;
    }
    else
    {
      while (1)
      {
        unint64_t v16 = sub_EB04C4(a1);
        BOOL v17 = a2 >= v16;
        BOOL result = a2 < v16;
        if (v17) {
          break;
        }
        unsigned int v19 = (int **)sub_EB0624(a1, a2);
        if (!sub_3EB32C(a5, v19))
        {
          sub_3F4E6C(a5, (uint64_t)v19, (uint64_t)&v26);
          int v20 = v26;
          unsigned __int16 v21 = v27;
          if (v26)
          {
            uint64_t v27 = v26;
            operator delete(v26);
          }
          ++a2;
          if (v20 == v21) {
            continue;
          }
        }
        return 1;
      }
    }
  }
  else if (a3)
  {
    while (1)
    {
      unint64_t v22 = sub_EB04C4(a3);
      BOOL v17 = a4 >= v22;
      BOOL result = a4 < v22;
      if (v17) {
        break;
      }
      unsigned __int16 v23 = (int **)sub_EB0624(0, a2);
      if (!sub_3EB32C(a5, v23))
      {
        sub_3F4E6C(a5, (uint64_t)v23, (uint64_t)&v26);
        int v24 = v26;
        int v25 = v27;
        if (v26)
        {
          uint64_t v27 = v26;
          operator delete(v26);
        }
        ++a2;
        if (v24 == v25) {
          continue;
        }
      }
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t sub_C75574(uint64_t a1, uint64_t a2)
{
  v27[0] = sub_EB04A8(a2);
  v27[1] = (unint64_t)&v24;
  v27[2] = (unint64_t)&v23;
  double v28 = (int ***)&v25;
  sub_C758AC(v26, v27);
  uint64_t v4 = sub_3C80F8(a2);
  while (v4 != sub_3FA3A8(a2))
  {
    unint64_t v24 = *(void *)(v4 + 32);
    sub_C760D8((uint64_t)v26, &v24, v27);
    if (!v27[0]) {
      goto LABEL_29;
    }
    unint64_t v5 = v24;
    unint64_t v6 = v24 & 0xFFFFFFFFFFFFLL;
    int v7 = (int *)sub_2D5D58(a1, v24 & 0xFFFFFFFFFFFFLL);
    if (*(unsigned char *)(a1 + 7772))
    {
      unint64_t v8 = sub_2DB8E0(a1 + 3896, v5, 0);
      uint64_t v9 = &v8[-*(int *)v8];
      if (*(unsigned __int16 *)v9 < 5u)
      {
        uint64_t v10 = 0;
      }
      else
      {
        uint64_t v10 = *((unsigned __int16 *)v9 + 2);
        if (v10) {
          v10 += (uint64_t)&v8[*(unsigned int *)&v8[v10]];
        }
      }
      unint64_t v11 = (int *)(v10 + ((v5 >> 30) & 0x3FFFC) + 4 + *(unsigned int *)(v10 + ((v5 >> 30) & 0x3FFFC) + 4));
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_2E5C38(a1, v6, 1);
    if (v11
      && (uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11), *v12 >= 0x11u)
      && (uint64_t v13 = v12[8]) != 0
      && (*(_WORD *)((unsigned char *)v11 + v13) & 4) != 0)
    {
      v4 += 96;
    }
    else
    {
      unsigned __int8 v14 = (unsigned __int16 *)((char *)v7 - *v7);
      if (*v14 >= 0xBu && (uint64_t v15 = v14[5]) != 0 && (*((unsigned char *)v7 + v15 + 2) & 1) != 0)
      {
        v4 += 96;
      }
      else
      {
        sub_C76260((uint64_t)v26, &v24, (uint64_t)v27);
        sub_EB1504(a2, v28[1], (int **)v4, 1);
        uint64_t v4 = sub_3C80F8(a2);
        for (uint64_t i = 0; i != 96; i += 6)
        {
          unsigned int v18 = &v26[i];
          if (v26[i + 2])
          {
            unint64_t v19 = v18[3];
            if (v19 >= 0x80)
            {
              BOOL v17 = &v26[i];
              operator delete((void *)v26[i]);
              v17[5] = 0;
              void *v17 = &unk_20E1710;
              v17[1] = 0;
              v17[2] = 0;
              v17[3] = 0;
            }
            else if (v19)
            {
              v18[2] = 0;
              memset((void *)v26[i], 128, v19 + 8);
              *(unsigned char *)(v26[i] + v19) = -1;
              unint64_t v20 = v18[3];
              if (v20 == 7) {
                uint64_t v21 = 6;
              }
              else {
                uint64_t v21 = v20 - (v20 >> 3);
              }
              v26[i + 5] = v21 - v18[2];
            }
          }
        }
LABEL_29:
        unint64_t v23 = *(void *)(v4 + 32);
        sub_C76260((uint64_t)v26, &v23, (uint64_t)v27);
        v28[1] = (int **)v4;
        v4 += 96;
      }
    }
  }
  return sub_328138((uint64_t)v26);
}

void sub_C75834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_328138((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C75848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_328138((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C7585C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_328138((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C75870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_328138((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C75884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_328138((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C75898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_328138((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_C758AC(void *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  a1[5] = 0;
  *a1 = &unk_20E1710;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  if (v4)
  {
    unint64_t v5 = __clz(v4);
    unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> v5;
    if (v5 == 61) {
      unint64_t v7 = 6;
    }
    else {
      unint64_t v7 = (0xFFFFFFFFFFFFFFFFLL >> v5) - (0x1FFFFFFFFFFFFFFFuLL >> v5);
    }
    a1[5] = v7;
    unint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v9 = (char *)operator new(v8 + 16 * v6);
    *a1 = v9;
    a1[1] = &v9[v8];
    memset(v9, 128, v6 + 8);
    v9[v6] = -1;
    a1[5] = v7;
    a1[3] = v6;
  }
  a1[6] = &unk_20E1710;
  unint64_t v10 = *a2;
  a1[11] = 0;
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = 0;
  if (v10)
  {
    unint64_t v11 = __clz(v10);
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> v11;
    if (v11 == 61) {
      unint64_t v13 = 6;
    }
    else {
      unint64_t v13 = (0xFFFFFFFFFFFFFFFFLL >> v11) - (0x1FFFFFFFFFFFFFFFuLL >> v11);
    }
    a1[11] = v13;
    unint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v15 = (char *)operator new(v14 + 16 * v12);
    a1[6] = v15;
    a1[7] = &v15[v14];
    memset(v15, 128, v12 + 8);
    v15[v12] = -1;
    a1[11] = v13;
    a1[9] = v12;
  }
  a1[12] = &unk_20E1710;
  unint64_t v16 = *a2;
  a1[17] = 0;
  a1[14] = 0;
  a1[15] = 0;
  a1[13] = 0;
  if (v16)
  {
    unint64_t v17 = __clz(v16);
    unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> v17;
    if (v17 == 61) {
      unint64_t v19 = 6;
    }
    else {
      unint64_t v19 = (0xFFFFFFFFFFFFFFFFLL >> v17) - (0x1FFFFFFFFFFFFFFFuLL >> v17);
    }
    a1[17] = v19;
    unint64_t v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v21 = (char *)operator new(v20 + 16 * v18);
    a1[12] = v21;
    a1[13] = &v21[v20];
    memset(v21, 128, v18 + 8);
    v21[v18] = -1;
    a1[17] = v19;
    a1[15] = v18;
  }
  a1[18] = &unk_20E1710;
  unint64_t v22 = *a2;
  a1[23] = 0;
  a1[20] = 0;
  a1[21] = 0;
  a1[19] = 0;
  if (v22)
  {
    unint64_t v23 = __clz(v22);
    unint64_t v24 = 0xFFFFFFFFFFFFFFFFLL >> v23;
    if (v23 == 61) {
      unint64_t v25 = 6;
    }
    else {
      unint64_t v25 = (0xFFFFFFFFFFFFFFFFLL >> v23) - (0x1FFFFFFFFFFFFFFFuLL >> v23);
    }
    a1[23] = v25;
    unint64_t v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v27 = (char *)operator new(v26 + 16 * v24);
    a1[18] = v27;
    a1[19] = &v27[v26];
    memset(v27, 128, v24 + 8);
    v27[v24] = -1;
    a1[23] = v25;
    a1[21] = v24;
  }
  a1[24] = &unk_20E1710;
  unint64_t v28 = *a2;
  a1[29] = 0;
  a1[26] = 0;
  a1[27] = 0;
  a1[25] = 0;
  if (v28)
  {
    unint64_t v29 = __clz(v28);
    unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> v29;
    if (v29 == 61) {
      unint64_t v31 = 6;
    }
    else {
      unint64_t v31 = (0xFFFFFFFFFFFFFFFFLL >> v29) - (0x1FFFFFFFFFFFFFFFuLL >> v29);
    }
    a1[29] = v31;
    unint64_t v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v33 = (char *)operator new(v32 + 16 * v30);
    a1[24] = v33;
    a1[25] = &v33[v32];
    memset(v33, 128, v30 + 8);
    v33[v30] = -1;
    a1[29] = v31;
    a1[27] = v30;
  }
  a1[30] = &unk_20E1710;
  unint64_t v34 = *a2;
  a1[35] = 0;
  a1[32] = 0;
  a1[33] = 0;
  a1[31] = 0;
  if (v34)
  {
    unint64_t v35 = __clz(v34);
    unint64_t v36 = 0xFFFFFFFFFFFFFFFFLL >> v35;
    if (v35 == 61) {
      unint64_t v37 = 6;
    }
    else {
      unint64_t v37 = (0xFFFFFFFFFFFFFFFFLL >> v35) - (0x1FFFFFFFFFFFFFFFuLL >> v35);
    }
    a1[35] = v37;
    unint64_t v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v39 = (char *)operator new(v38 + 16 * v36);
    a1[30] = v39;
    a1[31] = &v39[v38];
    memset(v39, 128, v36 + 8);
    v39[v36] = -1;
    a1[35] = v37;
    a1[33] = v36;
  }
  unint64_t v40 = *a2;
  a1[41] = 0;
  a1[36] = &unk_20E1710;
  a1[37] = 0;
  a1[38] = 0;
  a1[39] = 0;
  if (v40)
  {
    unint64_t v41 = __clz(v40);
    unint64_t v42 = 0xFFFFFFFFFFFFFFFFLL >> v41;
    if (v41 == 61) {
      unint64_t v43 = 6;
    }
    else {
      unint64_t v43 = (0xFFFFFFFFFFFFFFFFLL >> v41) - (0x1FFFFFFFFFFFFFFFuLL >> v41);
    }
    a1[41] = v43;
    unint64_t v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v45 = (char *)operator new(v44 + 16 * v42);
    a1[36] = v45;
    a1[37] = &v45[v44];
    memset(v45, 128, v42 + 8);
    v45[v42] = -1;
    a1[41] = v43;
    a1[39] = v42;
  }
  unint64_t v46 = *a2;
  a1[47] = 0;
  a1[42] = &unk_20E1710;
  a1[43] = 0;
  a1[44] = 0;
  a1[45] = 0;
  if (v46)
  {
    unint64_t v47 = __clz(v46);
    unint64_t v48 = 0xFFFFFFFFFFFFFFFFLL >> v47;
    if (v47 == 61) {
      unint64_t v49 = 6;
    }
    else {
      unint64_t v49 = (0xFFFFFFFFFFFFFFFFLL >> v47) - (0x1FFFFFFFFFFFFFFFuLL >> v47);
    }
    a1[47] = v49;
    unint64_t v50 = (v48 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v51 = (char *)operator new(v50 + 16 * v48);
    a1[42] = v51;
    a1[43] = &v51[v50];
    memset(v51, 128, v48 + 8);
    v51[v48] = -1;
    a1[47] = v49;
    a1[45] = v48;
  }
  unint64_t v52 = *a2;
  a1[53] = 0;
  a1[48] = &unk_20E1710;
  a1[49] = 0;
  a1[50] = 0;
  a1[51] = 0;
  if (v52)
  {
    unint64_t v53 = __clz(v52);
    unint64_t v54 = 0xFFFFFFFFFFFFFFFFLL >> v53;
    if (v53 == 61) {
      unint64_t v55 = 6;
    }
    else {
      unint64_t v55 = (0xFFFFFFFFFFFFFFFFLL >> v53) - (0x1FFFFFFFFFFFFFFFuLL >> v53);
    }
    a1[53] = v55;
    unint64_t v56 = (v54 & 0xFFFFFFFFFFFFFFF8) + 16;
    long long v57 = (char *)operator new(v56 + 16 * v54);
    a1[48] = v57;
    a1[49] = &v57[v56];
    memset(v57, 128, v54 + 8);
    v57[v54] = -1;
    a1[53] = v55;
    a1[51] = v54;
  }
  unint64_t v58 = *a2;
  a1[59] = 0;
  a1[54] = &unk_20E1710;
  a1[55] = 0;
  a1[56] = 0;
  a1[57] = 0;
  if (v58)
  {
    unint64_t v59 = __clz(v58);
    unint64_t v60 = 0xFFFFFFFFFFFFFFFFLL >> v59;
    if (v59 == 61) {
      unint64_t v61 = 6;
    }
    else {
      unint64_t v61 = (0xFFFFFFFFFFFFFFFFLL >> v59) - (0x1FFFFFFFFFFFFFFFuLL >> v59);
    }
    a1[59] = v61;
    unint64_t v62 = (v60 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v63 = (char *)operator new(v62 + 16 * v60);
    a1[54] = v63;
    a1[55] = &v63[v62];
    memset(v63, 128, v60 + 8);
    v63[v60] = -1;
    a1[59] = v61;
    a1[57] = v60;
  }
  unint64_t v64 = *a2;
  a1[65] = 0;
  a1[60] = &unk_20E1710;
  a1[61] = 0;
  a1[62] = 0;
  a1[63] = 0;
  if (v64)
  {
    unint64_t v65 = __clz(v64);
    unint64_t v66 = 0xFFFFFFFFFFFFFFFFLL >> v65;
    if (v65 == 61) {
      unint64_t v67 = 6;
    }
    else {
      unint64_t v67 = (0xFFFFFFFFFFFFFFFFLL >> v65) - (0x1FFFFFFFFFFFFFFFuLL >> v65);
    }
    a1[65] = v67;
    unint64_t v68 = (v66 & 0xFFFFFFFFFFFFFFF8) + 16;
    int v69 = (char *)operator new(v68 + 16 * v66);
    a1[60] = v69;
    a1[61] = &v69[v68];
    memset(v69, 128, v66 + 8);
    v69[v66] = -1;
    a1[65] = v67;
    a1[63] = v66;
  }
  unint64_t v70 = *a2;
  a1[66] = &unk_20E1710;
  a1[71] = 0;
  a1[67] = 0;
  a1[69] = 0;
  a1[68] = 0;
  if (v70)
  {
    unint64_t v71 = __clz(v70);
    unint64_t v72 = 0xFFFFFFFFFFFFFFFFLL >> v71;
    if (v71 == 61) {
      unint64_t v73 = 6;
    }
    else {
      unint64_t v73 = (0xFFFFFFFFFFFFFFFFLL >> v71) - (0x1FFFFFFFFFFFFFFFuLL >> v71);
    }
    a1[71] = v73;
    unint64_t v74 = (v72 & 0xFFFFFFFFFFFFFFF8) + 16;
    long long v75 = (char *)operator new(v74 + 16 * v72);
    a1[66] = v75;
    a1[67] = &v75[v74];
    memset(v75, 128, v72 + 8);
    v75[v72] = -1;
    a1[71] = v73;
    a1[69] = v72;
  }
  unint64_t v76 = *a2;
  a1[72] = &unk_20E1710;
  a1[77] = 0;
  a1[73] = 0;
  a1[75] = 0;
  a1[74] = 0;
  if (v76)
  {
    unint64_t v77 = __clz(v76);
    unint64_t v78 = 0xFFFFFFFFFFFFFFFFLL >> v77;
    if (v77 == 61) {
      unint64_t v79 = 6;
    }
    else {
      unint64_t v79 = (0xFFFFFFFFFFFFFFFFLL >> v77) - (0x1FFFFFFFFFFFFFFFuLL >> v77);
    }
    a1[77] = v79;
    unint64_t v80 = (v78 & 0xFFFFFFFFFFFFFFF8) + 16;
    int v81 = (char *)operator new(v80 + 16 * v78);
    a1[72] = v81;
    a1[73] = &v81[v80];
    memset(v81, 128, v78 + 8);
    v81[v78] = -1;
    a1[77] = v79;
    a1[75] = v78;
  }
  unint64_t v82 = *a2;
  a1[78] = &unk_20E1710;
  a1[83] = 0;
  a1[79] = 0;
  a1[81] = 0;
  a1[80] = 0;
  if (v82)
  {
    unint64_t v83 = __clz(v82);
    unint64_t v84 = 0xFFFFFFFFFFFFFFFFLL >> v83;
    if (v83 == 61) {
      unint64_t v85 = 6;
    }
    else {
      unint64_t v85 = (0xFFFFFFFFFFFFFFFFLL >> v83) - (0x1FFFFFFFFFFFFFFFuLL >> v83);
    }
    a1[83] = v85;
    unint64_t v86 = (v84 & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v87 = (char *)operator new(v86 + 16 * v84);
    a1[78] = v87;
    a1[79] = &v87[v86];
    memset(v87, 128, v84 + 8);
    v87[v84] = -1;
    a1[83] = v85;
    a1[81] = v84;
  }
  unint64_t v88 = *a2;
  a1[84] = &unk_20E1710;
  a1[89] = 0;
  a1[85] = 0;
  a1[87] = 0;
  a1[86] = 0;
  if (v88)
  {
    unint64_t v89 = __clz(v88);
    unint64_t v90 = 0xFFFFFFFFFFFFFFFFLL >> v89;
    if (v89 == 61) {
      unint64_t v91 = 6;
    }
    else {
      unint64_t v91 = (0xFFFFFFFFFFFFFFFFLL >> v89) - (0x1FFFFFFFFFFFFFFFuLL >> v89);
    }
    a1[89] = v91;
    unint64_t v92 = (v90 & 0xFFFFFFFFFFFFFFF8) + 16;
    __int16 v93 = (char *)operator new(v92 + 16 * v90);
    a1[84] = v93;
    a1[85] = &v93[v92];
    memset(v93, 128, v90 + 8);
    v93[v90] = -1;
    a1[89] = v91;
    a1[87] = v90;
  }
  unint64_t v94 = *a2;
  a1[90] = &unk_20E1710;
  a1[95] = 0;
  a1[91] = 0;
  a1[93] = 0;
  a1[92] = 0;
  if (v94)
  {
    unint64_t v95 = __clz(v94);
    unint64_t v96 = 0xFFFFFFFFFFFFFFFFLL >> v95;
    if (v95 == 61) {
      unint64_t v97 = 6;
    }
    else {
      unint64_t v97 = (0xFFFFFFFFFFFFFFFFLL >> v95) - (0x1FFFFFFFFFFFFFFFuLL >> v95);
    }
    a1[95] = v97;
    unint64_t v98 = (v96 & 0xFFFFFFFFFFFFFFF8) + 16;
    double v99 = (char *)operator new(v98 + 16 * v96);
    a1[90] = v99;
    a1[91] = &v99[v98];
    memset(v99, 128, v96 + 8);
    v99[v96] = -1;
    a1[95] = v97;
    a1[93] = v96;
  }
  return a1;
}

void sub_C760C0(_Unwind_Exception *a1)
{
}

uint64_t sub_C760D8@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = 0;
  unint64_t v4 = *a2;
  unint64_t v5 = (*a2 >> 16) & 0xFFFF0000 | (*a2 << 32);
  BOOL v6 = (*a2 & 0xFF000000000000) == 0;
  unint64_t v7 = ((0x2127599BF4325C37 * ((v5 | v6) ^ (v5 >> 23))) ^ ~((0x2127599BF4325C37 * ((v5 | v6) ^ (v5 >> 23))) >> 47))
     + (((0x2127599BF4325C37 * ((v5 | v6) ^ (v5 >> 23))) ^ ((0x2127599BF4325C37 * ((v5 | v6) ^ (v5 >> 23))) >> 47)) << 21);
  unint64_t v8 = 21 * ((265 * (v7 ^ (v7 >> 24))) ^ ((265 * (v7 ^ (v7 >> 24))) >> 14));
  unint64_t v9 = 2147483649u * (v8 ^ (v8 >> 28));
  unint64_t v10 = (void *)(result
                 + 48
                 * (((((unsigned __int16)(v8 ^ (v8 >> 28)) >> 8) ^ ((-2147483647
                                                                                    * (v8 ^ (v8 >> 28))) >> 16)) ^ ((-2147483647 * (v8 ^ (v8 >> 28))) >> 24)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  uint64_t v13 = *v10;
  uint64_t v14 = 0x101010101010101 * (v9 & 0x7F);
  while (1)
  {
    unint64_t v15 = v11 & v12;
    uint64_t v16 = *(void *)(v13 + v15);
    unint64_t v17 = ((v16 ^ v14) - 0x101010101010101) & ~(v16 ^ v14) & 0x8080808080808080;
    if (v17) {
      break;
    }
LABEL_8:
    if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      a3[3] = v12;
      a3[4] = 0;
      return result;
    }
    v3 += 8;
    unint64_t v11 = v3 + v15;
  }
  while (1)
  {
    unint64_t v19 = (v15 + (__clz(__rbit64(v17)) >> 3)) & v12;
    uint64_t v18 = v10[1];
    uint64_t v20 = v18 + 16 * v19;
    if (__PAIR64__(*(unsigned __int16 *)(v20 + 4), *(_DWORD *)v20) == __PAIR64__(WORD2(v4), v4)
      && (HIWORD(v4) & 1) != (*(unsigned char *)(v20 + 6) == 0))
    {
      break;
    }
    v17 &= v17 - 1;
    if (!v17) {
      goto LABEL_8;
    }
  }
  BOOL v21 = v12 == v19;
  uint64_t v22 = v13 + v19;
  uint64_t v23 = v13 + v12;
  uint64_t v24 = result + 768;
  if (v12 == v19)
  {
    uint64_t v22 = 0;
    uint64_t v24 = 0;
    unint64_t v25 = 0;
  }
  else
  {
    unint64_t v25 = v10;
  }
  if (v12 == v19) {
    unint64_t v26 = a3;
  }
  else {
    unint64_t v26 = (void *)(v18 + 16 * v19);
  }
  if (v21) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = v23;
  }
  *a3 = v25;
  a3[1] = v24;
  a3[2] = v22;
  a3[3] = v26;
  a3[4] = v27;
  return result;
}

unint64_t sub_C76260@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = 0;
  unint64_t v7 = *a2;
  unint64_t v8 = (*a2 >> 16) & 0xFFFF0000 | (*a2 << 32);
  BOOL v9 = (*a2 & 0xFF000000000000) == 0;
  unint64_t v10 = ((0x2127599BF4325C37 * ((v8 | v9) ^ (v8 >> 23))) ^ ~((0x2127599BF4325C37 * ((v8 | v9) ^ (v8 >> 23))) >> 47))
      + (((0x2127599BF4325C37 * ((v8 | v9) ^ (v8 >> 23))) ^ ((0x2127599BF4325C37 * ((v8 | v9) ^ (v8 >> 23))) >> 47)) << 21);
  unint64_t v11 = 21 * ((265 * (v10 ^ (v10 >> 24))) ^ ((265 * (v10 ^ (v10 >> 24))) >> 14));
  unint64_t v12 = 2147483649u * (v11 ^ (v11 >> 28));
  uint64_t v13 = (uint64_t *)(a1
                  + 48
                  * (((((unsigned __int16)(v11 ^ (v11 >> 28)) >> 8) ^ ((-2147483647
                                                                                       * (v11 ^ (v11 >> 28))) >> 16)) ^ ((-2147483647 * (v11 ^ (v11 >> 28))) >> 24)) & 0xF));
  unint64_t v14 = v12 >> 7;
  uint64_t v15 = v13[3];
  uint64_t v16 = *v13;
  while (1)
  {
    unint64_t v17 = v14 & v15;
    uint64_t v18 = *(void *)(v16 + (v14 & v15));
    unint64_t v19 = ((v18 ^ (0x101010101010101 * (v12 & 0x7F))) - 0x101010101010101) & ~(v18 ^ (0x101010101010101
                                                                                        * (v12 & 0x7F))) & 0x8080808080808080;
    if (v19) {
      break;
    }
LABEL_7:
    if ((v18 & (~v18 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = sub_C76408(v13, v12);
      uint64_t v24 = (unint64_t *)(v13[1] + 16 * result);
      unint64_t *v24 = *a2;
      v24[1] = 0;
      uint64_t v16 = *v13;
      uint64_t v20 = v13[1];
      uint64_t v15 = v13[3];
      char v23 = 1;
      goto LABEL_11;
    }
    v6 += 8;
    unint64_t v14 = v6 + v17;
  }
  uint64_t v20 = v13[1];
  while (1)
  {
    unint64_t result = (v17 + (__clz(__rbit64(v19)) >> 3)) & v15;
    unint64_t v22 = v20 + 16 * result;
    if (__PAIR64__(*(unsigned __int16 *)(v22 + 4), *(_DWORD *)v22) == __PAIR64__(WORD2(v7), v7)
      && (HIWORD(v7) & 1) != (*(unsigned char *)(v22 + 6) == 0))
    {
      break;
    }
    v19 &= v19 - 1;
    if (!v19) {
      goto LABEL_7;
    }
  }
  char v23 = 0;
LABEL_11:
  *(void *)a3 = v13;
  *(void *)(a3 + 8) = a1 + 768;
  *(void *)(a3 + 16) = v16 + result;
  *(void *)(a3 + 24) = v20 + 16 * result;
  *(void *)(a3 + 32) = v16 + v15;
  *(unsigned char *)(a3 + 48) = v23;
  return result;
}

unint64_t sub_C76408(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = *a1;
  unint64_t v6 = v4 & (a2 >> 7);
  unint64_t v7 = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    uint64_t v8 = 8;
    do
    {
      unint64_t v6 = (v6 + v8) & v4;
      v8 += 8;
      unint64_t v7 = *(void *)(v5 + v6) & (~*(void *)(v5 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  unint64_t result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v4;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v5 + result) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      sub_C76500((uint64_t)a1);
      unint64_t result = sub_2D7FC4(a1, a2);
      uint64_t v5 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v5 + result) == 128);
  *(unsigned char *)(v5 + result) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (result - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  return result;
}

void sub_C76500(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = (unsigned char *)(&def_332C + 1);
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (char *)((2 * v1) | 1);
LABEL_4:
    sub_C76530((char **)a1, v2);
    return;
  }
  sub_C76704(a1);
}

void sub_C76530(char **a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  unint64_t v7 = ((unint64_t)a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v8 = (char *)operator new(v7 + 16 * (void)a2);
  *a1 = v8;
  a1[1] = &v8[v7];
  memset(v8, 128, (size_t)(a2 + 8));
  a2[(void)v8] = -1;
  uint64_t v9 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (unsigned char *)dword_4 + 3) {
    uint64_t v9 = 6;
  }
  a1[5] = (char *)(v9 - (void)a1[2]);
  a1[3] = a2;
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if ((i[(void)v4] & 0x80000000) == 0)
      {
        uint64_t v13 = &v5[16 * (void)i];
        BOOL v15 = (*(void *)v13 & 0xFF000000000000) == 0;
        unint64_t v14 = (*(void *)v13 >> 16) & 0xFFFF0000 | (*(void *)v13 << 32);
        unint64_t v16 = ((0x2127599BF4325C37 * ((v14 | v15) ^ (v14 >> 23))) ^ ~((0x2127599BF4325C37
                                                                       * ((v14 | v15) ^ (v14 >> 23))) >> 47))
            + (((0x2127599BF4325C37 * ((v14 | v15) ^ (v14 >> 23))) ^ ((0x2127599BF4325C37
                                                                       * ((v14 | v15) ^ (v14 >> 23))) >> 47)) << 21);
        unint64_t v17 = 21 * ((265 * (v16 ^ (v16 >> 24))) ^ ((265 * (v16 ^ (v16 >> 24))) >> 14));
        unint64_t v18 = 2147483649u * (v17 ^ (v17 >> 28));
        unint64_t v19 = a1[3];
        uint64_t v20 = *a1;
        unint64_t v21 = (unint64_t)v19 & (v18 >> 7);
        unint64_t v22 = *(void *)&(*a1)[v21] & (~*(void *)&(*a1)[v21] << 7) & 0x8080808080808080;
        if (!v22)
        {
          uint64_t v23 = 8;
          do
          {
            unint64_t v21 = (v21 + v23) & (unint64_t)v19;
            v23 += 8;
            unint64_t v22 = *(void *)&v20[v21] & (~*(void *)&v20[v21] << 7) & 0x8080808080808080;
          }
          while (!v22);
        }
        unint64_t v11 = (v21 + (__clz(__rbit64(v22)) >> 3)) & (unint64_t)v19;
        char v12 = v18 & 0x7F;
        v20[v11] = v12;
        (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v11 - 8) & (unint64_t)a1[3])] = v12;
        *(_OWORD *)&a1[1][16 * v11] = *(_OWORD *)v13;
      }
    }
    operator delete(v4);
  }
}

uint64_t sub_C76704(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_28;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      int8x16_t *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        unint64_t *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (v13)
  {
    for (unint64_t i = 0; i != v13; ++i)
    {
      unint64_t v17 = *(int8x16_t **)result;
      if (*(unsigned __int8 *)(*(void *)result + i) == 254)
      {
        unint64_t v18 = *(void *)(*(void *)(result + 8) + 16 * i);
        unint64_t v19 = (v18 >> 16) & 0xFFFF0000 | (v18 << 32);
        BOOL v20 = (v18 & 0xFF000000000000) == 0;
        unint64_t v21 = ((0x2127599BF4325C37 * ((v19 | v20) ^ (v19 >> 23))) ^ ~((0x2127599BF4325C37
                                                                       * ((v19 | v20) ^ (v19 >> 23))) >> 47))
            + (((0x2127599BF4325C37 * ((v19 | v20) ^ (v19 >> 23))) ^ ((0x2127599BF4325C37
                                                                       * ((v19 | v20) ^ (v19 >> 23))) >> 47)) << 21);
        unint64_t v22 = 21 * ((265 * (v21 ^ (v21 >> 24))) ^ ((265 * (v21 ^ (v21 >> 24))) >> 14));
        unint64_t v23 = 2147483649u * (v22 ^ (v22 >> 28));
        unint64_t v24 = v13 & (v23 >> 7);
        unint64_t v25 = *(uint64_t *)((unsigned char *)v17->i64 + v24) & (~*(uint64_t *)((char *)v17->i64 + v24) << 7) & 0x8080808080808080;
        if (v25)
        {
          unint64_t v15 = v13 & (v23 >> 7);
        }
        else
        {
          uint64_t v26 = 8;
          unint64_t v15 = v13 & (v23 >> 7);
          do
          {
            unint64_t v15 = (v15 + v26) & v13;
            v26 += 8;
            unint64_t v25 = *(uint64_t *)((unsigned char *)v17->i64 + v15) & (~*(uint64_t *)((char *)v17->i64 + v15) << 7) & 0x8080808080808080;
          }
          while (!v25);
        }
        unint64_t v16 = (v15 + (__clz(__rbit64(v25)) >> 3)) & v13;
        if ((((v16 - v24) ^ (i - v24)) & v13) > 7)
        {
          int v27 = v17->u8[v16];
          v17->i8[v16] = v23 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (v16 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v23 & 0x7F;
          uint64_t v28 = *(void *)(result + 8);
          if (v27 == 128)
          {
            *(_OWORD *)(v28 + 16 * v16) = *(_OWORD *)(v28 + 16 * i);
            *(unsigned char *)(*(void *)result + i) = 0x80;
            *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
          }
          else
          {
            long long v29 = *(_OWORD *)(v28 + 16 * i);
            *(_OWORD *)(v28 + 16 * i) = *(_OWORD *)(v28 + 16 * v16);
            *(_OWORD *)(*(void *)(result + 8) + 16 * v16) = v29;
            --i;
          }
        }
        else
        {
          v17->i8[i] = v23 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v23 & 0x7F;
        }
      }
      uint64_t v13 = *(void *)(result + 24);
    }
    uint64_t v30 = i - (i >> 3);
    BOOL v31 = i == 7;
    uint64_t v32 = 6;
    if (!v31) {
      uint64_t v32 = v30;
    }
  }
  else
  {
    uint64_t v32 = 0;
  }
  *(void *)(result + 40) = v32 - *(void *)(result + 16);
  return result;
}

uint64_t sub_C769E8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void ****)a1;
  if (*(void *)a1)
  {
    uint64_t v5 = *(void ****)(a1 + 8);
    uint64_t v6 = *(void ****)a1;
    if (v5 != v4)
    {
      unint64_t v7 = v5 - 3;
      do
      {
        if (*v7)
        {
          sub_C64384((uint64_t)v7, *v7);
          operator delete(*v7);
        }
        BOOL v8 = v7 == v4;
        v7 -= 3;
      }
      while (!v8);
      uint64_t v6 = *(void ****)a1;
    }
    *(void *)(a1 + 8) = v4;
    operator delete(v6);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  int8x16_t v9 = *(void **)(a1 + 24);
  if (v9)
  {
    *(void *)(a1 + 32) = v9;
    operator delete(v9);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v10 = (void **)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 56);
    uint64_t v13 = *(void **)(a1 + 48);
    if (v12 != v11)
    {
      do
      {
        if (*(char *)(v12 - 1) < 0) {
          operator delete(*(void **)(v12 - 24));
        }
        v12 -= 24;
      }
      while (v12 != v11);
      uint64_t v13 = *v10;
    }
    *(void *)(a1 + 56) = v11;
    operator delete(v13);
    void *v10 = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  unint64_t v14 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v14);
  }
  long long v15 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)unint64_t v14 = v15;
  *(unsigned char *)(a2 + 95) = 0;
  *(unsigned char *)(a2 + 72) = 0;
  sub_62BDC(a1 + 96, (uint64_t *)(a2 + 96));
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  unint64_t v16 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*v16);
  }
  long long v17 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)unint64_t v16 = v17;
  *(unsigned char *)(a2 + 167) = 0;
  *(unsigned char *)(a2 + 144) = 0;
  memcpy((void *)(a1 + 168), (const void *)(a2 + 168), 0x14DuLL);
  return a1;
}

void *sub_C76BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    uint64_t v8 = *(void *)(a3 + 24);
    int8x16_t v9 = *(void **)(a3 + 16);
    if (v8 != v6)
    {
      do
      {
        if (*(char *)(v8 - 1) < 0) {
          operator delete(*(void **)(v8 - 24));
        }
        v8 -= 32;
      }
      while (v8 != v6);
      int8x16_t v9 = *(void **)(a3 + 16);
    }
    *(void *)(a3 + 24) = v6;
    operator delete(v9);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a4;
  *(void *)(a2 + 16) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a4 + 24);
  *(void *)(a2 + 40) = *(void *)(a4 + 40);
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a4 + 48);
  *(void *)(a2 + 64) = *(void *)(a4 + 64);
  *(void *)(a4 + 48) = 0;
  *(void *)(a4 + 56) = 0;
  *(void *)(a4 + 64) = 0;
  long long v10 = *(_OWORD *)(a4 + 72);
  *(void *)(a2 + 88) = *(void *)(a4 + 88);
  *(_OWORD *)(a2 + 72) = v10;
  *(void *)(a4 + 72) = 0;
  *(void *)(a4 + 80) = 0;
  uint64_t v11 = *(void *)(a4 + 96);
  *(void *)(a4 + 88) = 0;
  *(void *)(a4 + 96) = 0;
  *(void *)(a2 + 96) = v11;
  *(void *)(a2 + 104) = *(void *)(a4 + 104);
  *(void *)(a4 + 104) = 0;
  uint64_t v12 = *(void *)(a4 + 112);
  *(void *)(a2 + 112) = v12;
  uint64_t v13 = *(void *)(a4 + 120);
  *(void *)(a2 + 120) = v13;
  *(_DWORD *)(a2 + 128) = *(_DWORD *)(a4 + 128);
  if (v13)
  {
    unint64_t v14 = *(void *)(v12 + 8);
    unint64_t v15 = *(void *)(a2 + 104);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        v14 %= v15;
      }
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(void *)(v11 + 8 * v14) = a2 + 112;
    *(void *)(a4 + 112) = 0;
    *(void *)(a4 + 120) = 0;
  }
  *(void *)(a2 + 136) = *(void *)(a4 + 136);
  long long v16 = *(_OWORD *)(a4 + 144);
  *(void *)(a2 + 160) = *(void *)(a4 + 160);
  *(_OWORD *)(a2 + 144) = v16;
  *(void *)(a4 + 152) = 0;
  *(void *)(a4 + 160) = 0;
  *(void *)(a4 + 144) = 0;

  return memcpy((void *)(a2 + 168), (const void *)(a4 + 168), 0x14DuLL);
}

uint64_t sub_C76D60(uint64_t a1)
{
  if (*(char *)(a1 + 167) < 0)
  {
    operator delete(*(void **)(a1 + 144));
    uint64_t v2 = *(void **)(a1 + 112);
    if (!v2) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v2 = *(void **)(a1 + 112);
    if (!v2) {
      goto LABEL_4;
    }
  }
  do
  {
    uint64_t v3 = (void *)*v2;
    sub_550B8((uint64_t)(v2 + 2));
    operator delete(v2);
    uint64_t v2 = v3;
  }
  while (v3);
LABEL_4:
  unint64_t v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v4) {
    operator delete(v4);
  }
  if (*(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    uint64_t v5 = *(void ***)(a1 + 48);
    if (!v5)
    {
LABEL_8:
      uint64_t v6 = *(void **)(a1 + 24);
      if (!v6) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v5 = *(void ***)(a1 + 48);
    if (!v5) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = *(void ***)(a1 + 56);
  if (v12 == v5)
  {
    *(void *)(a1 + 56) = v5;
    operator delete(v5);
    uint64_t v6 = *(void **)(a1 + 24);
    if (!v6) {
      goto LABEL_10;
    }
LABEL_9:
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
    goto LABEL_10;
  }
  do
  {
    if (*((char *)v12 - 1) < 0) {
      operator delete(*(v12 - 3));
    }
    v12 -= 3;
  }
  while (v12 != v5);
  unint64_t v14 = *(void **)(a1 + 48);
  *(void *)(a1 + 56) = v5;
  operator delete(v14);
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6) {
    goto LABEL_9;
  }
LABEL_10:
  unint64_t v7 = *(void ****)a1;
  if (*(void *)a1)
  {
    uint64_t v8 = *(void ****)(a1 + 8);
    int8x16_t v9 = *(void ****)a1;
    if (v8 != v7)
    {
      long long v10 = v8 - 3;
      do
      {
        if (*v10)
        {
          sub_C64384((uint64_t)v10, *v10);
          operator delete(*v10);
        }
        BOOL v11 = v10 == v7;
        v10 -= 3;
      }
      while (!v11);
      int8x16_t v9 = *(void ****)a1;
    }
    *(void *)(a1 + 8) = v7;
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_C76EC0(uint64_t a1)
{
  uint64_t v2 = a1 + 45168;
  uint64_t v3 = *(void *)(a1 + 45272);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 45280);
    uint64_t v5 = *(void **)(a1 + 45272);
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0) {
          operator delete(*(void **)(v4 - 24));
        }
        v4 -= 32;
      }
      while (v4 != v3);
      uint64_t v5 = *(void **)(v2 + 104);
    }
    *(void *)(v2 + 112) = v3;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(v2 + 40);
  if (v6)
  {
    do
    {
      unint64_t v7 = (void *)*v6;
      sub_550B8((uint64_t)(v6 + 2));
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
  uint64_t v8 = *(void **)(v2 + 24);
  *(void *)(v2 + 24) = 0;
  if (v8) {
    operator delete(v8);
  }
  int8x16_t v9 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v9;
    operator delete(v9);
  }
  sub_C76F88(a1 + 16);
  return a1;
}

uint64_t sub_C76F88(uint64_t a1)
{
  uint64_t v2 = a1 + 44232;
  uint64_t v3 = *(void **)(a1 + 44472);
  if (v3)
  {
    *(void *)(v2 + 248) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(v2 + 192);
  if (v4)
  {
    *(void *)(v2 + 200) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(v2 + 160);
  if (v5)
  {
    *(void *)(v2 + 168) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(v2 + 104);
  if (v6)
  {
    *(void *)(v2 + 112) = v6;
    operator delete(v6);
  }
  unint64_t v7 = (unsigned char *)(a1 + 35984);
  uint64_t v8 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v8;
    operator delete(v8);
  }
  sub_32834C((void *)(a1 + 36408));
  if ((*(char *)(a1 + 36343) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 36111) & 0x80000000) == 0) {
      goto LABEL_13;
    }
LABEL_17:
    operator delete(*(void **)(a1 + 36088));
    if (!*v7) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  operator delete(*(void **)(a1 + 36320));
  if (*(char *)(a1 + 36111) < 0) {
    goto LABEL_17;
  }
LABEL_13:
  if (*v7)
  {
LABEL_14:
    sub_3A6230((void *)(a1 + 30808));
    unsigned char *v7 = 0;
  }
LABEL_15:
  sub_C77084((void *)(a1 + 48));
  return a1;
}

void *sub_C77084(void *a1)
{
  uint64_t v2 = a1 + 2494;
  uint64_t v3 = (void *)a1[3836];
  if (v3) {
    free(v3);
  }
  uint64_t v4 = a1 + 1832;
  uint64_t v5 = (void *)a1[3804];
  if (v5) {
    free(v5);
  }
  uint64_t v6 = a1 + 1177;
  sub_C7714C((uint64_t)(a1 + 2498));
  if (*v2)
  {
    sub_3A6230(a1 + 1847);
    unsigned char *v2 = 0;
  }
  if (*v4)
  {
    sub_3A6230(a1 + 1185);
    unsigned char *v4 = 0;
  }
  if (*v6)
  {
    sub_3A6230(a1 + 530);
    unsigned char *v6 = 0;
  }
  unint64_t v7 = (void *)a1[518];
  if (v7)
  {
    a1[519] = v7;
    operator delete(v7);
  }
  sub_3A6318(a1 + 2);
  return a1;
}

uint64_t sub_C7714C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 10336);
  if (v2)
  {
    *(void *)(a1 + 10344) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 10312);
  if (v3)
  {
    *(void *)(a1 + 10320) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 10280);
  if (v4)
  {
    *(void *)(a1 + 10288) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 10256);
  if (v5)
  {
    *(void *)(a1 + 10264) = v5;
    operator delete(v5);
  }
  sub_328138(a1 + 9488);
  if (*(unsigned char *)(a1 + 9440))
  {
    sub_3A6230((void *)(a1 + 4264));
    *(unsigned char *)(a1 + 9440) = 0;
  }
  uint64_t v6 = *(void **)(a1 + 4160);
  if (v6)
  {
    *(void *)(a1 + 4168) = v6;
    operator delete(v6);
  }
  sub_3A6318((void *)(a1 + 32));
  return a1;
}

char *sub_C771F8(char **a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = (v5 - *a1) >> 5;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v7) {
    unint64_t v7 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v7;
  }
  if (v11)
  {
    if (v11 >> 59) {
      sub_188D718();
    }
    uint64_t v12 = (char *)operator new(32 * v11);
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v13 = &v12[32 * v6];
  unint64_t v21 = v13;
  unint64_t v22 = v13;
  unint64_t v24 = &v12[32 * v11];
  *(void *)uint64_t v13 = *a2;
  unint64_t v14 = v13 + 8;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v14, *(void **)a3, *(void *)(a3 + 8));
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    uint64_t v13 = v21;
    unint64_t v15 = v22 + 32;
    unint64_t v23 = v22 + 32;
    if (v5 == *a1)
    {
LABEL_17:
      unint64_t v18 = v4;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a3;
    *((void *)v13 + 3) = *(void *)(a3 + 16);
    unint64_t v15 = v13 + 32;
    unint64_t v23 = v13 + 32;
    if (v5 == v4) {
      goto LABEL_17;
    }
  }
  do
  {
    uint64_t v16 = *((void *)v5 - 4);
    v5 -= 32;
    *((void *)v13 - 4) = v16;
    v13 -= 32;
    long long v17 = *(_OWORD *)(v5 + 8);
    *((void *)v13 + 3) = *((void *)v5 + 3);
    *(_OWORD *)(v13 + 8) = v17;
    *((void *)v5 + 2) = 0;
    *((void *)v5 + 3) = 0;
    *((void *)v5 + 1) = 0;
  }
  while (v5 != v4);
  unint64_t v18 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v15 = v23;
LABEL_18:
  *a1 = v13;
  a1[1] = v15;
  a1[2] = v24;
  if (v4 == v18)
  {
    if (v4) {
LABEL_20:
    }
      operator delete(v4);
  }
  else
  {
    do
    {
      BOOL v20 = v4 - 32;
      if (*(v4 - 1) < 0) {
        operator delete(*((void **)v4 - 3));
      }
      v4 -= 32;
    }
    while (v20 != v18);
    uint64_t v4 = v18;
    if (v18) {
      goto LABEL_20;
    }
  }
  return v15;
}

void sub_C773B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_C773C8(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
BOOL sub_C787B8(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v7 = *(void *)(a2 - 32);
      uint64_t v8 = *(void *)a1;
      if (v7 < *(void *)a1)
      {
        *(void *)a1 = v7;
        *(void *)(a2 - 32) = v8;
        uint64_t v9 = *(void *)(a1 + 24);
        long long v10 = *(_OWORD *)(a1 + 8);
        uint64_t v11 = *(void *)(a2 - 8);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 24) = v11;
        goto LABEL_39;
      }
      return result;
    case 3:
      uint64_t v19 = *(void *)(a1 + 32);
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = *(void *)(a2 - 32);
      if (v19 >= *(void *)a1)
      {
        if (v21 < v19)
        {
          *(void *)(a1 + 32) = v21;
          *(void *)(a2 - 32) = v19;
          uint64_t v42 = *(void *)(a1 + 56);
          long long v43 = *(_OWORD *)(a1 + 40);
          uint64_t v44 = *(void *)(a2 - 8);
          *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 - 24);
          *(void *)(a1 + 56) = v44;
          *(_OWORD *)(a2 - 24) = v43;
          *(void *)(a2 - 8) = v42;
          uint64_t v45 = *(void *)(a1 + 32);
          uint64_t v46 = *(void *)a1;
          if (v45 < *(void *)a1)
          {
            *(void *)a1 = v45;
            uint64_t v47 = *(void *)(a1 + 24);
            long long v48 = *(_OWORD *)(a1 + 8);
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + 40);
            *(void *)(a1 + 24) = *(void *)(a1 + 56);
            *(void *)(a1 + 32) = v46;
            *(_OWORD *)(a1 + 40) = v48;
            *(void *)(a1 + 56) = v47;
          }
        }
      }
      else
      {
        uint64_t v22 = a1 + 8;
        if (v21 >= v19)
        {
          *(void *)a1 = v19;
          *(void *)(a1 + 32) = v20;
          uint64_t v61 = *(void *)(a1 + 24);
          long long v62 = *(_OWORD *)v22;
          *(_OWORD *)uint64_t v22 = *(_OWORD *)(a1 + 40);
          *(void *)(a1 + 24) = *(void *)(a1 + 56);
          *(_OWORD *)(a1 + 40) = v62;
          *(void *)(a1 + 56) = v61;
          uint64_t v63 = *(void *)(a2 - 32);
          if (v63 >= v20) {
            return result;
          }
          uint64_t v22 = a1 + 40;
          *(void *)(a1 + 32) = v63;
        }
        else
        {
          *(void *)a1 = v21;
        }
        *(void *)(a2 - 32) = v20;
        uint64_t v9 = *(void *)(v22 + 16);
        long long v10 = *(_OWORD *)v22;
        uint64_t v64 = *(void *)(a2 - 8);
        *(_OWORD *)uint64_t v22 = *(_OWORD *)(a2 - 24);
        *(void *)(v22 + 16) = v64;
LABEL_39:
        *(_OWORD *)(a2 - 24) = v10;
        *(void *)(a2 - 8) = v9;
      }
      return result;
    case 4:
      sub_C78CCC((uint64_t *)a1, (uint64_t *)(a1 + 32), (uint64_t *)(a1 + 64), (uint64_t *)(a2 - 32), a3);
      return 1;
    case 5:
      sub_C78CCC((uint64_t *)a1, (uint64_t *)(a1 + 32), (uint64_t *)(a1 + 64), (uint64_t *)(a1 + 96), a3);
      uint64_t v23 = *(void *)(a2 - 32);
      uint64_t v24 = *(void *)(a1 + 96);
      if (v23 < v24)
      {
        *(void *)(a1 + 96) = v23;
        *(void *)(a2 - 32) = v24;
        uint64_t v25 = *(void *)(a1 + 120);
        long long v26 = *(_OWORD *)(a1 + 104);
        uint64_t v27 = *(void *)(a2 - 8);
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 120) = v27;
        *(_OWORD *)(a2 - 24) = v26;
        *(void *)(a2 - 8) = v25;
        uint64_t v28 = *(void *)(a1 + 96);
        uint64_t v29 = *(void *)(a1 + 64);
        if (v28 < v29)
        {
          *(void *)(a1 + 64) = v28;
          uint64_t v30 = *(void *)(a1 + 88);
          long long v31 = *(_OWORD *)(a1 + 72);
          *(_OWORD *)(a1 + 72) = *(_OWORD *)(a1 + 104);
          *(void *)(a1 + 88) = *(void *)(a1 + 120);
          *(void *)(a1 + 96) = v29;
          *(_OWORD *)(a1 + 104) = v31;
          *(void *)(a1 + 120) = v30;
          uint64_t v32 = *(void *)(a1 + 32);
          if (v28 < v32)
          {
            *(void *)(a1 + 32) = v28;
            uint64_t v33 = *(void *)(a1 + 56);
            long long v34 = *(_OWORD *)(a1 + 40);
            *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 72);
            *(void *)(a1 + 56) = *(void *)(a1 + 88);
            *(void *)(a1 + 64) = v32;
            *(_OWORD *)(a1 + 72) = v34;
            *(void *)(a1 + 88) = v33;
            uint64_t v35 = *(void *)a1;
            if (v28 < *(void *)a1)
            {
              *(void *)a1 = v28;
              uint64_t v36 = *(void *)(a1 + 24);
              long long v37 = *(_OWORD *)(a1 + 8);
              *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + 40);
              *(void *)(a1 + 24) = *(void *)(a1 + 56);
              *(void *)(a1 + 32) = v35;
              *(_OWORD *)(a1 + 40) = v37;
              *(void *)(a1 + 56) = v36;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v12 = (uint64_t *)(a1 + 64);
      uint64_t v13 = *(void *)(a1 + 64);
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void *)a1;
      if (v14 >= *(void *)a1)
      {
        if (v13 < v14)
        {
          *(void *)(a1 + 32) = v13;
          uint64_t v38 = *(void *)(a1 + 56);
          long long v39 = *(_OWORD *)(a1 + 40);
          *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 72);
          *(void *)(a1 + 56) = *(void *)(a1 + 88);
          *(void *)(a1 + 64) = v14;
          *(_OWORD *)(a1 + 72) = v39;
          *(void *)(a1 + 88) = v38;
          if (v13 < v15)
          {
            *(void *)a1 = v13;
            uint64_t v40 = *(void *)(a1 + 24);
            long long v41 = *(_OWORD *)(a1 + 8);
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + 40);
            *(void *)(a1 + 24) = *(void *)(a1 + 56);
            *(void *)(a1 + 32) = v15;
            *(_OWORD *)(a1 + 40) = v41;
            *(void *)(a1 + 56) = v40;
          }
        }
      }
      else
      {
        uint64_t v16 = (long long *)(a1 + 8);
        if (v13 >= v14)
        {
          *(void *)a1 = v14;
          *(void *)(a1 + 32) = v15;
          uint64_t v49 = *(void *)(a1 + 24);
          long long v50 = *v16;
          long long *v16 = *(_OWORD *)(a1 + 40);
          *(void *)(a1 + 24) = *(void *)(a1 + 56);
          *(_OWORD *)(a1 + 40) = v50;
          *(void *)(a1 + 56) = v49;
          if (v13 >= v15) {
            goto LABEL_25;
          }
          *(void *)(a1 + 32) = v13;
          *(void *)(a1 + 64) = v15;
          uint64_t v17 = *(void *)(a1 + 56);
          long long v18 = *(_OWORD *)(a1 + 40);
          *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 72);
          *(void *)(a1 + 56) = *(void *)(a1 + 88);
        }
        else
        {
          *(void *)a1 = v13;
          *(void *)(a1 + 64) = v15;
          uint64_t v17 = *(void *)(a1 + 24);
          long long v18 = *v16;
          long long *v16 = *(_OWORD *)(a1 + 72);
          *(void *)(a1 + 24) = *(void *)(a1 + 88);
        }
        *(_OWORD *)(a1 + 72) = v18;
        *(void *)(a1 + 88) = v17;
      }
LABEL_25:
      uint64_t v51 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v52 = 0;
      int v53 = 0;
      break;
  }
  while (1)
  {
    uint64_t v55 = *(void *)v51;
    if (*(void *)v51 < *v12)
    {
      uint64_t v56 = *(void *)(v51 + 8);
      *(void *)uint64_t v65 = *(void *)(v51 + 16);
      *(void *)&v65[7] = *(void *)(v51 + 23);
      char v57 = *(unsigned char *)(v51 + 31);
      *(void *)(v51 + 16) = 0;
      *(void *)(v51 + 24) = 0;
      *(void *)(v51 + 8) = 0;
      uint64_t v58 = *v12;
      uint64_t v59 = v52;
      do
      {
        uint64_t v60 = a1 + v59;
        *(void *)(v60 + 96) = v58;
        *(_OWORD *)(v60 + 104) = *(_OWORD *)(a1 + v59 + 72);
        *(void *)(v60 + 120) = *(void *)(a1 + v59 + 88);
        *(unsigned char *)(v60 + 95) = 0;
        *(unsigned char *)(v60 + 72) = 0;
        if (v59 == -64)
        {
          uint64_t v54 = a1;
          goto LABEL_28;
        }
        uint64_t v58 = *(void *)(v60 + 32);
        v59 -= 32;
      }
      while (v55 < v58);
      uint64_t v54 = a1 + v59 + 96;
LABEL_28:
      *(void *)uint64_t v54 = v55;
      *(void *)(v60 + 72) = v56;
      *(void *)(v54 + 16) = *(void *)v65;
      *(void *)(v54 + 23) = *(void *)&v65[7];
      *(unsigned char *)(v54 + 31) = v57;
      if (++v53 == 8) {
        return v51 + 32 == a2;
      }
    }
    uint64_t v12 = (uint64_t *)v51;
    v52 += 32;
    v51 += 32;
    if (v51 == a2) {
      return 1;
    }
  }
}

__n128 sub_C78CCC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, __n128 result)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *a1;
  uint64_t v7 = *a3;
  if (*a2 >= *a1)
  {
    if (v7 < v5)
    {
      *a2 = v7;
      *a3 = v5;
      uint64_t v11 = a2[3];
      BOOL result = *(__n128 *)(a2 + 1);
      uint64_t v12 = a3[3];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
      a2[3] = v12;
      *(__n128 *)(a3 + 1) = result;
      a3[3] = v11;
      uint64_t v13 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v13;
        uint64_t v14 = a1[3];
        BOOL result = *(__n128 *)(a1 + 1);
        uint64_t v15 = a2[3];
        *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
        a1[3] = v15;
        *(__n128 *)(a2 + 1) = result;
        a2[3] = v14;
      }
    }
  }
  else
  {
    uint64_t v8 = (__n128 *)(a1 + 1);
    if (v7 < v5)
    {
      *a1 = v7;
      *a3 = v6;
      uint64_t v9 = a1[3];
      BOOL result = *v8;
      uint64_t v10 = a3[3];
      __n128 *v8 = *(__n128 *)(a3 + 1);
      a1[3] = v10;
LABEL_9:
      *(__n128 *)(a3 + 1) = result;
      a3[3] = v9;
      goto LABEL_10;
    }
    *a1 = v5;
    *a2 = v6;
    uint64_t v16 = a1[3];
    BOOL result = *v8;
    uint64_t v17 = a2[3];
    __n128 *v8 = *(__n128 *)(a2 + 1);
    a1[3] = v17;
    *(__n128 *)(a2 + 1) = result;
    a2[3] = v16;
    uint64_t v18 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v18;
      uint64_t v9 = a2[3];
      BOOL result = *(__n128 *)(a2 + 1);
      uint64_t v19 = a3[3];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
      a2[3] = v19;
      goto LABEL_9;
    }
  }
LABEL_10:
  uint64_t v20 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v20;
    uint64_t v21 = a3[3];
    BOOL result = *(__n128 *)(a3 + 1);
    uint64_t v22 = a4[3];
    *(_OWORD *)(a3 + 1) = *(_OWORD *)(a4 + 1);
    a3[3] = v22;
    *(__n128 *)(a4 + 1) = result;
    a4[3] = v21;
    uint64_t v23 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v23;
      uint64_t v24 = a2[3];
      BOOL result = *(__n128 *)(a2 + 1);
      uint64_t v25 = a3[3];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
      a2[3] = v25;
      *(__n128 *)(a3 + 1) = result;
      a3[3] = v24;
      uint64_t v26 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v26;
        uint64_t v27 = a1[3];
        BOOL result = *(__n128 *)(a1 + 1);
        uint64_t v28 = a2[3];
        *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
        a1[3] = v28;
        *(__n128 *)(a2 + 1) = result;
        a2[3] = v27;
      }
    }
  }
  return result;
}

void ***sub_C78EA8(void ****a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (v2 - *a1);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (a1[2] - v3) > v5) {
    unint64_t v5 = 0x5555555555555556 * (a1[2] - v3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - v3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v4];
  uint64_t v9 = (void ***)&v7[24 * v6];
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  uint64_t v10 = (void ***)(v8 + 24);
  if (v2 == v3)
  {
    *a1 = (void ***)v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      uint64_t v11 = v8;
      *((void *)v8 - 2) = 0;
      *((void *)v8 - 1) = 0;
      long long v12 = *(_OWORD *)(v2 - 3);
      v2 -= 3;
      *(_OWORD *)(v8 - 24) = v12;
      v8 -= 24;
      *((void *)v11 - 1) = v2[2];
      void *v2 = 0;
      v2[1] = 0;
      v2[2] = 0;
    }
    while (v2 != v3);
    uint64_t v2 = *a1;
    uint64_t v13 = a1[1];
    *a1 = (void ***)v8;
    a1[1] = v10;
    a1[2] = v9;
    if (v13 == v2)
    {
      uint64_t v2 = v13;
      if (!v13) {
        return v10;
      }
      goto LABEL_20;
    }
    uint64_t v14 = v13 - 3;
    do
    {
      if (*v14)
      {
        sub_C64384((uint64_t)v14, *v14);
        operator delete(*v14);
      }
      BOOL v15 = v14 == v2;
      v14 -= 3;
    }
    while (!v15);
  }
  if (v2) {
LABEL_20:
  }
    operator delete(v2);
  return v10;
}

void sub_C79010()
{
  unk_25E0927 = 16641;
  word_25E0910 = 65;
  byte_25E093F = 1;
  byte_25E0929 = 0;
}

void sub_C79038(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v53);
  v48[0] = 1;
  *((void *)&v51 + 1) = 0;
  memset(v52, 0, 17);
  long long v49 = 0u;
  memset(v50, 0, sizeof(v50));
  LOBYTE(v51) = 0;
  *(_DWORD *)&v52[20] = -1;
  *(_WORD *)&v52[24] = 0;
  if (**(void **)(a1 + 144) != *(void *)(*(void *)(a1 + 144) + 8)) {
    sub_F3AA18(&v41, *(void **)(a1 + 128), *(void *)(a1 + 184));
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v41);
    sub_188FC78(&v41, (uint64_t)"DrivingRouteSelectionModule::run has empty input", 48);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    if (SHIBYTE(v37[0]) < 0) {
      operator delete(__p[0]);
    }
    if (v47 < 0) {
      operator delete(v46);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  v40.n128_u64[0] = 10;
  v40.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814((__n128 *)__p, &v40);
  LOBYTE(v41) = 0;
  long long v42 = *(_OWORD *)__p;
  long long v43 = *(_OWORD *)v37;
  uint64_t v44 = v38;
  v37[0] = 0;
  v37[1] = 0;
  uint64_t v38 = 0;
  int v45 = v39;
  sub_C7B0E8((uint64_t)v48, (uint64_t)&v41);
  if (!(_BYTE)v41)
  {
    uint64_t v27 = v43;
    if (!(void)v43) {
      goto LABEL_61;
    }
    uint64_t v28 = *((void *)&v43 + 1);
    unint64_t v5 = (void *)v43;
    if (*((void *)&v43 + 1) != (void)v43)
    {
      do
      {
        if (*(char *)(v28 - 1) < 0) {
          operator delete(*(void **)(v28 - 24));
        }
        v28 -= 32;
      }
      while (v28 != v27);
      unint64_t v5 = (void *)v43;
    }
    *((void *)&v43 + 1) = v27;
    goto LABEL_60;
  }
  if (*((void *)&v43 + 1))
  {
    uint64_t v44 = *((void *)&v43 + 1);
    operator delete(*((void **)&v43 + 1));
  }
  uint64_t v3 = (void **)v42;
  if ((void)v42)
  {
    unint64_t v4 = (void **)*((void *)&v42 + 1);
    unint64_t v5 = (void *)v42;
    if (*((void *)&v42 + 1) == (void)v42)
    {
LABEL_57:
      *((void *)&v42 + 1) = v3;
LABEL_60:
      operator delete(v5);
      goto LABEL_61;
    }
    unint64_t v6 = (void **)*((void *)&v42 + 1);
    while (1)
    {
      uint64_t v9 = (void **)*(v6 - 3);
      v6 -= 3;
      uint64_t v8 = v9;
      if (!v9) {
        goto LABEL_17;
      }
      uint64_t v10 = (void **)*(v4 - 2);
      uint64_t v7 = v8;
      if (v10 != v8) {
        break;
      }
LABEL_16:
      *(v4 - 2) = v8;
      operator delete(v7);
LABEL_17:
      unint64_t v4 = v6;
      if (v6 == v3)
      {
        unint64_t v5 = (void *)v42;
        goto LABEL_57;
      }
    }
    while (1)
    {
      if (*((char *)v10 - 1) < 0)
      {
        operator delete(*(v10 - 3));
        uint64_t v11 = v10 - 15;
        long long v12 = *(v10 - 15);
        if (v12)
        {
LABEL_27:
          uint64_t v13 = (uint64_t)*(v10 - 14);
          uint64_t v14 = v12;
          if ((void *)v13 != v12)
          {
            do
              uint64_t v13 = sub_3AFFFC(v13 - 1056);
            while ((void *)v13 != v12);
            uint64_t v14 = *v11;
          }
          *(v10 - 14) = v12;
          operator delete(v14);
        }
      }
      else
      {
        uint64_t v11 = v10 - 15;
        long long v12 = *(v10 - 15);
        if (v12) {
          goto LABEL_27;
        }
      }
      uint64_t v10 = v11;
      if (v11 == v8)
      {
        uint64_t v7 = *v6;
        goto LABEL_16;
      }
    }
  }
LABEL_61:
  uint64_t v29 = (void **)v37[0];
  if (v37[0])
  {
    uint64_t v30 = (void **)v37[1];
    long long v31 = v37[0];
    if (v37[1] != v37[0])
    {
      do
      {
        if (*((char *)v30 - 1) < 0) {
          operator delete(*(v30 - 3));
        }
        v30 -= 4;
      }
      while (v30 != v29);
      long long v31 = v37[0];
    }
    v37[1] = v29;
    operator delete(v31);
  }
  int v32 = v48[0];
  *(unsigned char *)a2 = v48[0];
  if (!v32)
  {
    *(_OWORD *)(a2 + 8) = v49;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)v50;
    *(void **)(a2 + 40) = v50[2];
    memset(v50, 0, 24);
    *(_DWORD *)(a2 + 48) = v50[3];
    uint64_t v33 = (void **)v50[0];
    if (!v50[0]) {
      return;
    }
    long long v34 = (void **)v50[1];
    uint64_t v17 = v50[0];
    if (v50[1] != v50[0])
    {
      do
      {
        if (*((char *)v34 - 1) < 0) {
          operator delete(*(v34 - 3));
        }
        v34 -= 4;
      }
      while (v34 != v33);
      uint64_t v17 = v50[0];
    }
    v50[1] = v33;
    goto LABEL_79;
  }
  *(_OWORD *)(a2 + 8) = v49;
  *(void **)(a2 + 24) = v50[0];
  v50[0] = 0;
  long long v49 = 0uLL;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v50[1];
  *(void **)(a2 + 48) = v50[3];
  memset(&v50[1], 0, 24);
  *(_OWORD *)(a2 + 56) = v51;
  *(_OWORD *)(a2 + 72) = *(_OWORD *)v52;
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v52[10];
  BOOL v15 = (void **)v49;
  if ((void)v49)
  {
    uint64_t v16 = (void **)*((void *)&v49 + 1);
    uint64_t v17 = (void *)v49;
    if (*((void *)&v49 + 1) == (void)v49)
    {
LABEL_49:
      *((void *)&v49 + 1) = v15;
LABEL_79:
      operator delete(v17);
      return;
    }
    uint64_t v18 = (void **)*((void *)&v49 + 1);
    while (1)
    {
      uint64_t v21 = (void **)*(v18 - 3);
      v18 -= 3;
      uint64_t v20 = v21;
      if (!v21) {
        goto LABEL_35;
      }
      uint64_t v22 = (void **)*(v16 - 2);
      uint64_t v19 = v20;
      if (v22 != v20) {
        break;
      }
LABEL_34:
      *(v16 - 2) = v20;
      operator delete(v19);
LABEL_35:
      uint64_t v16 = v18;
      if (v18 == v15)
      {
        uint64_t v17 = (void *)v49;
        goto LABEL_49;
      }
    }
    while (1)
    {
      if (*((char *)v22 - 1) < 0)
      {
        operator delete(*(v22 - 3));
        uint64_t v23 = v22 - 15;
        uint64_t v24 = *(v22 - 15);
        if (v24)
        {
LABEL_45:
          uint64_t v25 = (uint64_t)*(v22 - 14);
          uint64_t v26 = v24;
          if ((void *)v25 != v24)
          {
            do
              uint64_t v25 = sub_3AFFFC(v25 - 1056);
            while ((void *)v25 != v24);
            uint64_t v26 = *v23;
          }
          *(v22 - 14) = v24;
          operator delete(v26);
        }
      }
      else
      {
        uint64_t v23 = v22 - 15;
        uint64_t v24 = *(v22 - 15);
        if (v24) {
          goto LABEL_45;
        }
      }
      uint64_t v22 = v23;
      if (v23 == v20)
      {
        uint64_t v19 = *v18;
        goto LABEL_34;
      }
    }
  }
}

void sub_C7AEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  if (*(char *)(v43 - 161) < 0) {
    operator delete(*(void **)(v43 - 184));
  }
  sub_111ECAC((uint64_t)&a43);
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  int v45 = (void *)STACK[0x2C0];
  if (STACK[0x2C0])
  {
    STACK[0x2C8] = (unint64_t)v45;
    operator delete(v45);
  }
  sub_F3AB04(&STACK[0x2D8]);
  sub_C7B2B4((uint64_t)&STACK[0x9E8]);
  _Unwind_Resume(a1);
}

uint64_t sub_C7B0E8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a2)
    {
      unint64_t v4 = (void *)(a2 + 8);
      unint64_t v6 = (void **)(a1 + 8);
      unint64_t v5 = *(void ***)(a1 + 8);
      if (v5)
      {
        sub_C686F8(a1 + 8, v5);
        operator delete(*v6);
        void *v6 = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
      }
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      void *v4 = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      uint64_t v7 = *(void **)(a1 + 32);
      if (v7)
      {
        *(void *)(a1 + 40) = v7;
        operator delete(v7);
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 48) = 0;
      }
LABEL_24:
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
      long long v15 = *(_OWORD *)(a2 + 56);
      long long v16 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 82) = *(_OWORD *)(a2 + 82);
      *(_OWORD *)(a1 + 72) = v16;
      *(_OWORD *)(a1 + 56) = v15;
      goto LABEL_25;
    }
    uint64_t v13 = (void ***)(a1 + 8);
    uint64_t v14 = *(void **)(a1 + 32);
    if (v14)
    {
      *(void *)(a1 + 40) = v14;
      operator delete(v14);
    }
    if (*v13)
    {
      sub_C686F8(a1 + 8, *v13);
      operator delete(*v13);
    }
    *(_OWORD *)uint64_t v13 = *(_OWORD *)(a2 + 8);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
    uint64_t v9 = (void *)(a2 + 8);
    if (*(unsigned char *)a2)
    {
      uint64_t v10 = *(void *)(a1 + 24);
      if (v10)
      {
        uint64_t v11 = *(void *)(a1 + 32);
        long long v12 = *(void **)(a1 + 24);
        if (v11 != v10)
        {
          do
          {
            if (*(char *)(v11 - 1) < 0) {
              operator delete(*(void **)(v11 - 24));
            }
            v11 -= 32;
          }
          while (v11 != v10);
          long long v12 = *(void **)(a1 + 24);
        }
        *(void *)(a1 + 32) = v10;
        operator delete(v12);
      }
      void *v8 = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      void *v9 = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 48) = 0;
      goto LABEL_24;
    }
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
LABEL_25:
  *(unsigned char *)a1 = *(unsigned char *)a2;
  return a1;
}

uint64_t sub_C7B2B4(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = (void ***)(a1 + 8);
    uint64_t v3 = *(void **)(a1 + 32);
    if (v3)
    {
      *(void *)(a1 + 40) = v3;
      operator delete(v3);
    }
    if (*v2)
    {
      sub_C686F8(a1 + 8, *v2);
      unint64_t v4 = *v2;
LABEL_14:
      operator delete(v4);
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      unint64_t v4 = *(void ***)(a1 + 24);
      if (v6 != v5)
      {
        do
        {
          if (*(char *)(v6 - 1) < 0) {
            operator delete(*(void **)(v6 - 24));
          }
          v6 -= 32;
        }
        while (v6 != v5);
        unint64_t v4 = *(void ***)(a1 + 24);
      }
      *(void *)(a1 + 32) = v5;
      goto LABEL_14;
    }
  }
  return a1;
}

uint64_t sub_C7B35C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      uint64_t v7 = *(void **)a3;
      if (*(void *)a3)
      {
        uint64_t v8 = *(void *)(a3 + 8);
        uint64_t v9 = *(void **)a3;
        if ((void *)v8 != v7)
        {
          do
            uint64_t v8 = sub_3AFFFC(v8 - 1056);
          while ((void *)v8 != v7);
          uint64_t v9 = *(void **)a3;
        }
        *(void *)(a3 + 8) = v7;
        operator delete(v9);
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
      }
      *(_OWORD *)a3 = *(_OWORD *)v4;
      *(void *)(a3 + 16) = *(void *)(v4 + 16);
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      *(void *)uint64_t v4 = 0;
      long long v10 = *(_OWORD *)(v4 + 56);
      long long v11 = *(_OWORD *)(v4 + 72);
      uint64_t v12 = *(void *)(v4 + 85);
      *(_OWORD *)(a3 + 40) = *(_OWORD *)(v4 + 40);
      *(void *)(a3 + 85) = v12;
      *(_OWORD *)(a3 + 72) = v11;
      *(_OWORD *)(a3 + 56) = v10;
      *(_OWORD *)(a3 + 24) = *(_OWORD *)(v4 + 24);
      uint64_t v13 = (void **)(a3 + 96);
      if (*(char *)(a3 + 119) < 0) {
        operator delete(*v13);
      }
      long long v6 = *(_OWORD *)(v4 + 96);
      *(void *)(a3 + 112) = *(void *)(v4 + 112);
      *(_OWORD *)uint64_t v13 = v6;
      *(unsigned char *)(v4 + 119) = 0;
      *(unsigned char *)(v4 + 96) = 0;
      v4 += 120;
      a3 += 120;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

char *sub_C7B464(void ***a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (a1[2] - *a1) > v4) {
    unint64_t v4 = 0x5555555555555556 * (a1[2] - *a1);
  }
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v3];
  uint64_t v9 = &v7[24 * v6];
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v10 = v8 + 24;
  long long v11 = *a1;
  uint64_t v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = (void **)v8;
    a1[1] = (void **)v10;
    a1[2] = (void **)v9;
    if (!v12) {
      return v10;
    }
    goto LABEL_32;
  }
  do
  {
    uint64_t v13 = v8;
    *((void *)v8 - 2) = 0;
    *((void *)v8 - 1) = 0;
    long long v14 = *(_OWORD *)(v12 - 3);
    v12 -= 3;
    *(_OWORD *)(v8 - 24) = v14;
    v8 -= 24;
    *((void *)v13 - 1) = v12[2];
    void *v12 = 0;
    v12[1] = 0;
    v12[2] = 0;
  }
  while (v12 != v11);
  long long v15 = *a1;
  uint64_t v12 = a1[1];
  *a1 = (void **)v8;
  a1[1] = (void **)v10;
  a1[2] = (void **)v9;
  if (v12 != v15)
  {
    long long v16 = v12;
    while (1)
    {
      uint64_t v19 = (void **)*(v16 - 3);
      v16 -= 3;
      uint64_t v18 = v19;
      if (!v19) {
        goto LABEL_17;
      }
      uint64_t v20 = (void **)*(v12 - 2);
      uint64_t v17 = v18;
      if (v20 != v18) {
        break;
      }
LABEL_16:
      *(v12 - 2) = v18;
      operator delete(v17);
LABEL_17:
      uint64_t v12 = v16;
      if (v16 == v15)
      {
        uint64_t v12 = v15;
        goto LABEL_31;
      }
    }
    while (1)
    {
      if (*((char *)v20 - 1) < 0)
      {
        operator delete(*(v20 - 3));
        uint64_t v21 = v20 - 15;
        uint64_t v22 = *(v20 - 15);
        if (v22)
        {
LABEL_27:
          uint64_t v23 = (uint64_t)*(v20 - 14);
          uint64_t v24 = v22;
          if ((void *)v23 != v22)
          {
            do
              uint64_t v23 = sub_3AFFFC(v23 - 1056);
            while ((void *)v23 != v22);
            uint64_t v24 = *v21;
          }
          *(v20 - 14) = v22;
          operator delete(v24);
        }
      }
      else
      {
        uint64_t v21 = v20 - 15;
        uint64_t v22 = *(v20 - 15);
        if (v22) {
          goto LABEL_27;
        }
      }
      uint64_t v20 = v21;
      if (v21 == v18)
      {
        uint64_t v17 = *v16;
        goto LABEL_16;
      }
    }
  }
LABEL_31:
  if (v12) {
LABEL_32:
  }
    operator delete(v12);
  return v10;
}

void sub_C7B660()
{
  unk_25E0957 = 16641;
  word_25E0940 = 65;
  byte_25E096F = 1;
  byte_25E0959 = 0;
}

void **sub_C7B688@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v35);
  long long v30 = 0u;
  long long v31 = 0u;
  long long v29 = 0u;
  int v32 = 0x7FFFFFFF;
  uint64_t v33 = 0;
  __int16 v34 = 1;
  sub_3EAFD4(v28, *(void *)(a1 + 128), *(unsigned __int8 *)(a1 + 120));
  sub_109F2E8(v26, *(void *)(a1 + 128), (uint64_t)v28);
  unint64_t v4 = (void *)sub_45FB28(*(void **)(a1 + 112), 0);
  sub_109F314(v26, a1, v4, (uint64_t)v18);
  if (v21 != v22)
  {
    uint64_t v5 = *((void *)&v29 + 1);
    if (*((void *)&v29 + 1) >= (unint64_t)v30)
    {
      uint64_t v6 = sub_C7C4B0((uint64_t *)&v29, (uint64_t)v18);
    }
    else
    {
      sub_44479C(*((uint64_t *)&v29 + 1), (uint64_t)v18);
      uint64_t v6 = v5 + 160;
    }
    *((void *)&v29 + 1) = v6;
    int v32 = v25;
    if (*(unsigned char *)(a1 + 136))
    {
      uint64_t v8 = v31;
      if ((unint64_t)v31 >= *((void *)&v31 + 1))
      {
        uint64_t v9 = sub_C7C4B0((uint64_t *)&v30 + 1, (uint64_t)v18);
      }
      else
      {
        sub_44479C(v31, (uint64_t)v18);
        uint64_t v9 = v8 + 160;
      }
      *(void *)&long long v31 = v9;
    }
    sub_10A42F0((uint64_t)&__p, *(void **)(a1 + 128), 0, 0, 0);
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v13);
    sub_188FC78(v13, (uint64_t)"[driving] DrivingRouteSnapping module did not find any results for origin", 73);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v12 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    if (v17 < 0) {
      operator delete(v16);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  __p.n128_u64[0] = 24;
  __p.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(v13, &__p);
  *(unsigned char *)a2 = 0;
  __n128 v7 = v13[1];
  *(__n128 *)(a2 + 8) = v13[0];
  *(__n128 *)(a2 + 24) = v7;
  *(void *)(a2 + 40) = v14;
  *(_DWORD *)(a2 + 48) = v15;
  if (v23)
  {
    uint64_t v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (v27 < 0) {
    operator delete((void *)v26[7]);
  }
  return sub_C7C3B4((void **)&v29);
}

void sub_C7C224(_Unwind_Exception *a1)
{
  STACK[0x360] = v1;
  sub_C08338(&STACK[0x208]);
  if (SLOBYTE(STACK[0x2FF]) < 0) {
    operator delete((void *)STACK[0x2E8]);
  }
  sub_C7C3B4((void **)&STACK[0x340]);
  _Unwind_Resume(a1);
}

void **sub_C7C3B4(void **a1)
{
  uint64_t v2 = (char *)a1[3];
  if (v2)
  {
    unint64_t v3 = (char *)a1[4];
    unint64_t v4 = a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 4);
        if (v5)
        {
          *((void *)v3 - 3) = v5;
          operator delete(v5);
        }
        uint64_t v6 = (void *)*((void *)v3 - 7);
        if (v6)
        {
          *((void *)v3 - 6) = v6;
          operator delete(v6);
        }
        __n128 v7 = (void *)*((void *)v3 - 11);
        if (v7)
        {
          *((void *)v3 - 10) = v7;
          operator delete(v7);
        }
        v3 -= 160;
      }
      while (v3 != v2);
      unint64_t v4 = a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  uint64_t v8 = (char *)*a1;
  if (*a1)
  {
    uint64_t v9 = (char *)a1[1];
    long long v10 = *a1;
    if (v9 != v8)
    {
      do
      {
        long long v11 = (void *)*((void *)v9 - 4);
        if (v11)
        {
          *((void *)v9 - 3) = v11;
          operator delete(v11);
        }
        char v12 = (void *)*((void *)v9 - 7);
        if (v12)
        {
          *((void *)v9 - 6) = v12;
          operator delete(v12);
        }
        uint64_t v13 = (void *)*((void *)v9 - 11);
        if (v13)
        {
          *((void *)v9 - 10) = v13;
          operator delete(v13);
        }
        v9 -= 160;
      }
      while (v9 != v8);
      long long v10 = *a1;
    }
    a1[1] = v8;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_C7C4B0(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x199999999999999) {
    sub_2E00();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 5);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v6 = 0x199999999999999;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x199999999999999) {
      sub_188D718();
    }
    __n128 v7 = (char *)operator new(160 * v6);
  }
  else
  {
    __n128 v7 = 0;
  }
  uint64_t v24 = (uint64_t)&v7[160 * v3];
  int v25 = &v7[160 * v6];
  sub_44479C(v24, a2);
  uint64_t v8 = v24 + 160;
  uint64_t v9 = (char *)*a1;
  long long v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v24;
    a1[1] = v8;
    a1[2] = (uint64_t)v25;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v24 + v11;
      uint64_t v13 = &v10[v11];
      *(_OWORD *)(v12 - 160) = *(_OWORD *)&v10[v11 - 160];
      long long v14 = *(_OWORD *)&v10[v11 - 144];
      long long v15 = *(_OWORD *)&v10[v11 - 128];
      long long v16 = *(_OWORD *)&v10[v11 - 112];
      *(_DWORD *)(v12 - 97) = *(_DWORD *)&v10[v11 - 97];
      *(_OWORD *)(v12 - 128) = v15;
      *(_OWORD *)(v12 - 112) = v16;
      *(_OWORD *)(v12 - 144) = v14;
      *(void *)(v12 - 80) = 0;
      *(void *)(v12 - 72) = 0;
      *(void *)(v12 - 88) = 0;
      *(_OWORD *)(v12 - 88) = *(_OWORD *)&v10[v11 - 88];
      *(void *)(v12 - 72) = *(void *)&v10[v11 - 72];
      *((void *)v13 - 11) = 0;
      *((void *)v13 - 10) = 0;
      *((void *)v13 - 9) = 0;
      int v17 = *(_DWORD *)&v10[v11 - 64];
      *(unsigned char *)(v12 - 60) = v10[v11 - 60];
      *(void *)(v12 - 48) = 0;
      *(void *)(v12 - 40) = 0;
      *(void *)(v12 - 56) = 0;
      *(_DWORD *)(v12 - 64) = v17;
      *(_OWORD *)(v12 - 56) = *(_OWORD *)&v10[v11 - 56];
      *(void *)(v12 - 40) = *(void *)&v10[v11 - 40];
      *((void *)v13 - 7) = 0;
      *((void *)v13 - 6) = 0;
      *((void *)v13 - 5) = 0;
      *(void *)(v12 - 32) = 0;
      *(void *)(v12 - 24) = 0;
      *(void *)(v12 - 16) = 0;
      *(_OWORD *)(v12 - 32) = *(_OWORD *)&v10[v11 - 32];
      *(void *)(v12 - 16) = *(void *)&v10[v11 - 16];
      *((void *)v13 - 4) = 0;
      *((void *)v13 - 3) = 0;
      *((void *)v13 - 2) = 0;
      int v18 = *(_DWORD *)&v10[v11 - 8];
      *(_DWORD *)(v12 - 5) = *(_DWORD *)&v10[v11 - 5];
      *(_DWORD *)(v12 - 8) = v18;
      v11 -= 160;
    }
    while (&v10[v11] != v9);
    uint64_t v19 = (char *)*a1;
    long long v10 = (char *)a1[1];
    *a1 = v24 + v11;
    a1[1] = v8;
    a1[2] = (uint64_t)v25;
    if (v10 != v19)
    {
      do
      {
        uint64_t v20 = (void *)*((void *)v10 - 4);
        if (v20)
        {
          *((void *)v10 - 3) = v20;
          operator delete(v20);
        }
        uint64_t v21 = (void *)*((void *)v10 - 7);
        if (v21)
        {
          *((void *)v10 - 6) = v21;
          operator delete(v21);
        }
        uint64_t v22 = (void *)*((void *)v10 - 11);
        if (v22)
        {
          *((void *)v10 - 10) = v22;
          operator delete(v22);
        }
        v10 -= 160;
      }
      while (v10 != v19);
      long long v10 = v19;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v24 + 160;
}

void sub_C7C6F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_C7C704((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_C7C704(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 160;
    unint64_t v4 = *(void **)(i - 32);
    if (v4)
    {
      *(void *)(i - 24) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(void **)(i - 56);
    if (v5)
    {
      *(void *)(i - 48) = v5;
      operator delete(v5);
    }
    unint64_t v6 = *(void **)(i - 88);
    if (v6)
    {
      *(void *)(i - 80) = v6;
      operator delete(v6);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_C7C78C()
{
  unk_25E0987 = 16641;
  word_25E0970 = 65;
  byte_25E099F = 1;
  byte_25E0989 = 0;
}

void sub_C7C7B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v5);
  unint64_t v4 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  *(unsigned char *)a2 = 1;
  sub_C7E5DC((void *)(a2 + 8), v4);
}

void sub_C7DA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62)
{
  if (SLOBYTE(STACK[0x377]) < 0) {
    operator delete((void *)STACK[0x360]);
  }
  sub_111ECAC((uint64_t)&a62);
  sub_82DE8(&a16);
  sub_C7E3C8((uint64_t)&a25);
  sub_10A4318((uint64_t)&a31);
  sub_C7E544(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_C7DCF0(uint64_t a1, int *a2, uint64_t a3, uint64_t *a4)
{
  int v6 = *a2;
  if (*(unsigned char *)a1)
  {
    uint64_t v9 = sub_3777C0(*(void **)a3);
    if (*(unsigned char *)(a3 + 33)
      && (sub_3FE478(a4, *(void *)(*(void *)(a1 + 112) + 32), *(unsigned __int8 *)(a3 + 35)) & 1) == 0)
    {
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)&v29);
        long long v16 = sub_188FC78(&v29, (uint64_t)"[driving][ev] coordinate to snap (", 34);
        int v18 = sub_36644(v16, (uint64_t)(a2 + 2), v17);
        sub_188FC78(v18, (uint64_t)") is outside supported EV regions.", 34);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        if (v28 < 0) {
          operator delete(__p[0]);
        }
        if (v32 < 0) {
          operator delete(v31);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      if (v6 == 1) {
        unsigned int v19 = 33;
      }
      else {
        unsigned int v19 = 19;
      }
      BOOL v20 = v6 == 0;
      unsigned int v21 = 26;
    }
    else
    {
      if (sub_3D3604(v9, (unint64_t *)(*(void *)(a1 + 112) + 32), *(unsigned __int8 *)(a3 + 35)))return 0; {
      if (sub_723EC(1u))
      }
      {
        sub_6BAC((uint64_t)&v29);
        uint64_t v24 = sub_188FC78(&v29, (uint64_t)"[driving] coordinate to snap (", 30);
        uint64_t v26 = sub_36644(v24, (uint64_t)(a2 + 2), v25);
        sub_188FC78(v26, (uint64_t)") is outside supported region", 29);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        if (v28 < 0) {
          operator delete(__p[0]);
        }
        if (v32 < 0) {
          operator delete(v31);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      if (v6 == 1) {
        unsigned int v19 = 32;
      }
      else {
        unsigned int v19 = 16;
      }
      BOOL v20 = v6 == 0;
      unsigned int v21 = 25;
    }
    goto LABEL_41;
  }
  int v11 = *(_DWORD *)(a1 + 8);
  BOOL v12 = sub_723EC(1u);
  if (v11 != 23)
  {
    if (v12)
    {
      sub_6BAC((uint64_t)&v29);
      uint64_t v22 = sub_188FC78(&v29, (uint64_t)"[driving] snapping module did not find any results in the vicinity to ", 70);
      sub_36644(v22, (uint64_t)(a2 + 2), v23);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      if (v32 < 0) {
        operator delete(v31);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    BOOL v20 = v6 == 0;
    unsigned int v19 = 31;
    unsigned int v21 = 24;
LABEL_41:
    if (v20) {
      return v21;
    }
    else {
      return v19;
    }
  }
  if (v12)
  {
    sub_6BAC((uint64_t)&v29);
    uint64_t v13 = sub_188FC78(&v29, (uint64_t)"[driving] coordinate to snap (", 30);
    long long v15 = sub_36644(v13, (uint64_t)(a2 + 2), v14);
    sub_188FC78(v15, (uint64_t)") is outside the downloaded offline regions", 43);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    if (v28 < 0) {
      operator delete(__p[0]);
    }
    if (v32 < 0) {
      operator delete(v31);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return 23;
}

void sub_C7E2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_C7E3C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    unint64_t v4 = *(void **)(a1 + 16);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 32;
      }
      while (v3 != v2);
      unint64_t v4 = *(void **)(a1 + 16);
    }
    *(void *)(a1 + 24) = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_C7E43C(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  if (!*(unsigned char *)a1)
  {
    __n128 v7 = (_OWORD *)(a1 + 8);
    uint64_t v8 = a2 + 8;
    if (v4)
    {
      sub_C7E8CC(a1, (uint64_t)v7, a1 + 8, (uint64_t)v8);
      goto LABEL_11;
    }
    _OWORD *v7 = *v8;
LABEL_10:
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *((void *)a2 + 3) = 0;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
    goto LABEL_11;
  }
  if (!*a2)
  {
    sub_C7EAC4((char **)(a1 + 8));
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    goto LABEL_10;
  }
  sub_C7EA10((void **)(a1 + 8), (__n128 *)(a2 + 8));
  sub_C7EA10((void **)(a1 + 32), (__n128 *)a2 + 2);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  uint64_t v5 = (void **)(a1 + 64);
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*v5);
  }
  long long v6 = *((_OWORD *)a2 + 4);
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  *(_OWORD *)uint64_t v5 = v6;
  a2[87] = 0;
  a2[64] = 0;
  sub_62BDC(a1 + 88, (uint64_t *)a2 + 11);
LABEL_11:
  *(unsigned char *)a1 = *a2;
  return a1;
}

uint64_t sub_C7E544(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    sub_C7EAC4((char **)(a1 + 8));
    return a1;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 24);
  if (v4 != v3)
  {
    do
    {
      if (*(char *)(v4 - 1) < 0) {
        operator delete(*(void **)(v4 - 24));
      }
      v4 -= 32;
    }
    while (v4 != v3);
    uint64_t v5 = *(void **)(a1 + 24);
  }
  *(void *)(a1 + 32) = v3;
  operator delete(v5);
  return a1;
}

void sub_C7E5DC(void *a1, unint64_t a2)
{
  uint64_t v2 = sub_C7E740(a1, a2);
  *(_OWORD *)(v2 + 3) = 0u;
  *(_OWORD *)(v2 + 5) = 0u;
  char v4 = 14;
  strcpy((char *)__p, "SnappingModule");
  sub_401FE8((uint64_t)(v2 + 7), (long long *)__p);
}

void sub_C7E680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_C7E6AC(v15);
  sub_C7E6AC(v14);
  _Unwind_Resume(a1);
}

void **sub_C7E6AC(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    char v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 4);
        if (v5)
        {
          *((void *)v3 - 3) = v5;
          operator delete(v5);
        }
        long long v6 = (void *)*((void *)v3 - 7);
        if (v6)
        {
          *((void *)v3 - 6) = v6;
          operator delete(v6);
        }
        __n128 v7 = (void *)*((void *)v3 - 11);
        if (v7)
        {
          *((void *)v3 - 10) = v7;
          operator delete(v7);
        }
        v3 -= 160;
      }
      while (v3 != v2);
      char v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_C7E740(void *a1, unint64_t a2)
{
  long long v8 = 0u;
  char v16 = 0;
  v7[0] = -1;
  v7[1] = 0x7FFFFFFFLL;
  v7[2] = -1;
  v7[3] = -1;
  v7[4] = 0x7FFFFFFFFFFFFFFFLL;
  DWORD2(v8) = -1935635296;
  long long v9 = 0uLL;
  *(_DWORD *)((char *)&v9 + 7) = 0;
  v10[1] = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0x6400000000;
  v10[0] = 0;
  memset(v15, 0, sizeof(v15));
  *(_OWORD *)__n128 __p = 0u;
  *(_OWORD *)uint64_t v13 = 0u;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x19999999999999ALL) {
      sub_2E00();
    }
    uint64_t v3 = 160 * a2;
    char v4 = (char *)operator new(160 * a2);
    *a1 = v4;
    a1[1] = v4;
    uint64_t v5 = &v4[v3];
    a1[2] = &v4[v3];
    do
    {
      sub_44479C((uint64_t)v4, (uint64_t)v7);
      v4 += 160;
      v3 -= 160;
    }
    while (v3);
    a1[1] = v5;
    if (__p[1])
    {
      *(void **)long long v15 = __p[1];
      operator delete(__p[1]);
    }
    if (v13[0])
    {
      v13[1] = v13[0];
      operator delete(v13[0]);
    }
  }
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
  return a1;
}

void sub_C7E8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_C7E8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 8) = v10;
  sub_C08338(&a9);
  _Unwind_Resume(a1);
}

void sub_C7E8CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    uint64_t v8 = *(void *)(a3 + 24);
    uint64_t v9 = *(void **)(a3 + 16);
    if (v8 != v6)
    {
      do
      {
        if (*(char *)(v8 - 1) < 0) {
          operator delete(*(void **)(v8 - 24));
        }
        v8 -= 32;
      }
      while (v8 != v6);
      uint64_t v9 = *(void **)(a3 + 16);
    }
    *(void *)(a3 + 24) = v6;
    operator delete(v9);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a4;
  *(void *)(a2 + 16) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a4 + 24);
  uint64_t v10 = *(void *)(a4 + 48);
  *(void *)(a2 + 40) = *(void *)(a4 + 40);
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = 0;
  *(void *)(a2 + 48) = v10;
  long long v11 = *(_OWORD *)(a4 + 56);
  *(void *)(a2 + 72) = *(void *)(a4 + 72);
  *(_OWORD *)(a2 + 56) = v11;
  *(void *)(a4 + 56) = 0;
  *(void *)(a4 + 64) = 0;
  uint64_t v12 = *(void *)(a4 + 80);
  *(void *)(a4 + 72) = 0;
  *(void *)(a4 + 80) = 0;
  *(void *)(a2 + 80) = v12;
  *(void *)(a2 + 88) = *(void *)(a4 + 88);
  *(void *)(a4 + 88) = 0;
  uint64_t v15 = *(void *)(a4 + 96);
  uint64_t v14 = a4 + 96;
  uint64_t v13 = v15;
  *(void *)(a2 + 96) = v15;
  uint64_t v16 = *(void *)(v14 + 8);
  *(void *)(a2 + 104) = v16;
  *(_DWORD *)(a2 + 112) = *(_DWORD *)(v14 + 16);
  if (v16)
  {
    unint64_t v17 = *(void *)(v13 + 8);
    unint64_t v18 = *(void *)(a2 + 88);
    if ((v18 & (v18 - 1)) != 0)
    {
      if (v17 >= v18) {
        v17 %= v18;
      }
    }
    else
    {
      v17 &= v18 - 1;
    }
    *(void *)(v12 + 8 * v17) = a2 + 96;
    *(void *)uint64_t v14 = 0;
    *(void *)(v14 + 8) = 0;
  }
}

__n128 sub_C7EA10(void **a1, __n128 *a2)
{
  char v4 = (char *)*a1;
  if (*a1)
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = *a1;
    if (v5 != v4)
    {
      do
      {
        __n128 v7 = (void *)*((void *)v5 - 4);
        if (v7)
        {
          *((void *)v5 - 3) = v7;
          operator delete(v7);
        }
        uint64_t v8 = (void *)*((void *)v5 - 7);
        if (v8)
        {
          *((void *)v5 - 6) = v8;
          operator delete(v8);
        }
        uint64_t v9 = (void *)*((void *)v5 - 11);
        if (v9)
        {
          *((void *)v5 - 10) = v9;
          operator delete(v9);
        }
        v5 -= 160;
      }
      while (v5 != v4);
      uint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  a1[2] = (void *)a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

char **sub_C7EAC4(char **a1)
{
  uint64_t v2 = a1[12];
  if (v2)
  {
    do
    {
      uint64_t v3 = *(char **)v2;
      sub_550B8((uint64_t)(v2 + 16));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  char v4 = a1[10];
  a1[10] = 0;
  if (v4) {
    operator delete(v4);
  }
  if ((*((char *)a1 + 79) & 0x80000000) == 0)
  {
    uint64_t v5 = a1[3];
    if (!v5) {
      goto LABEL_7;
    }
LABEL_10:
    uint64_t v8 = a1[4];
    if (v8 == v5)
    {
      a1[4] = v5;
      operator delete(v5);
      uint64_t v6 = *a1;
      if (!*a1) {
        return a1;
      }
    }
    else
    {
      do
      {
        uint64_t v9 = (void *)*((void *)v8 - 4);
        if (v9)
        {
          *((void *)v8 - 3) = v9;
          operator delete(v9);
        }
        uint64_t v10 = (void *)*((void *)v8 - 7);
        if (v10)
        {
          *((void *)v8 - 6) = v10;
          operator delete(v10);
        }
        long long v11 = (void *)*((void *)v8 - 11);
        if (v11)
        {
          *((void *)v8 - 10) = v11;
          operator delete(v11);
        }
        v8 -= 160;
      }
      while (v8 != v5);
      uint64_t v12 = a1[3];
      a1[4] = v5;
      operator delete(v12);
      uint64_t v6 = *a1;
      if (!*a1) {
        return a1;
      }
    }
    goto LABEL_21;
  }
  operator delete(a1[7]);
  uint64_t v5 = a1[3];
  if (v5) {
    goto LABEL_10;
  }
LABEL_7:
  uint64_t v6 = *a1;
  if (!*a1) {
    return a1;
  }
LABEL_21:
  uint64_t v13 = a1[1];
  uint64_t v14 = v6;
  if (v13 != v6)
  {
    do
    {
      uint64_t v15 = (void *)*((void *)v13 - 4);
      if (v15)
      {
        *((void *)v13 - 3) = v15;
        operator delete(v15);
      }
      uint64_t v16 = (void *)*((void *)v13 - 7);
      if (v16)
      {
        *((void *)v13 - 6) = v16;
        operator delete(v16);
      }
      unint64_t v17 = (void *)*((void *)v13 - 11);
      if (v17)
      {
        *((void *)v13 - 10) = v17;
        operator delete(v17);
      }
      v13 -= 160;
    }
    while (v13 != v6);
    uint64_t v14 = *a1;
  }
  a1[1] = v6;
  operator delete(v14);
  return a1;
}

void sub_C7EC38(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v4[23] = 8;
  strcpy(v4, "location");
  sub_C7F76C(a1);
  *(void *)uint64_t v5 = v3;
  *(void *)&v5[7] = *(void *)((char *)&v3 + 7);
  long long v3 = 0uLL;
  __n128 __p = 0;
  operator new();
}

void sub_C7F470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_55198(v21 - 240);
  if (a20 < 0)
  {
    operator delete(__p);
    sub_553C0(v20);
    _Unwind_Resume(a1);
  }
  sub_553C0(v20);
  _Unwind_Resume(a1);
}

void sub_C7F744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if ((a55 & 0x80000000) == 0) {
    JUMPOUT(0xC7F710);
  }
  JUMPOUT(0xC7F708);
}

uint64_t sub_C7F76C(uint64_t a1)
{
  sub_E1B4((uint64_t)v4);
  sub_DAA5AC(v5, a1);
  std::stringbuf::str();
  *(void *)((char *)v4
  v5[0] = v2;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_C7F8DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C7F8F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_C7F904(uint64_t *a1, long long *a2, void *a3)
{
  __n128 __p = 0;
  unint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v6 = *a1;
  __n128 v7 = (void *)a1[1];
  unsigned int v19 = a2;
  uint64_t v9 = sub_5B948(v6, (uint64_t)a2, (uint64_t)&unk_20F06E0, &v19);
  sub_9051C(*((_DWORD *)v9 + 12), (uint64_t **)v9 + 5, (uint64_t *)&__p);
  *((_DWORD *)v9 + 12) = 3;
  uint64_t v10 = (uint64_t *)__p;
  if (__p)
  {
    long long v11 = v17;
    uint64_t v12 = __p;
    if (v17 != __p)
    {
      do
        long long v11 = sub_57AC8(v11 - 2);
      while (v11 != v10);
      uint64_t v12 = __p;
    }
    unint64_t v17 = v10;
    operator delete(v12);
  }
  uint64_t v13 = sub_55BE4((void *)*a1, (uint64_t)a2);
  sub_56CAC(v13, (uint64_t)(v7[14] - v7[13]) >> 6);
  uint64_t v14 = sub_55BE4((void *)*a1, (uint64_t)a2);
  return sub_C7FA0C(a3, v14);
}

void sub_C7F9F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_55758((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_C7FA0C(void *a1, uint64_t a2)
{
  if (*a1 != a1[1])
  {
    sub_C7FB50((void *)(*a1 + 32));
    operator new();
  }
  return a2;
}

void sub_C7FB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_55198((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C7FB2C(_Unwind_Exception *exception_object)
{
  if (v2 < 0)
  {
    operator delete(v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C7FB50(void *a1)
{
  sub_E1B4((uint64_t)v5);
  int v2 = sub_51960(v6, *a1);
  sub_188FC78(v2, (uint64_t)".", 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v5
  v6[0] = v3;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_C7FCE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C7FCF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_C7FD08(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    int v2 = *(void **)(a1 + 136);
    if (v2)
    {
      *(void *)(a1 + 144) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 112);
    if (v3)
    {
      *(void *)(a1 + 120) = v3;
      operator delete(v3);
    }
    char v4 = *(void **)(a1 + 80);
    if (v4)
    {
      *(void *)(a1 + 88) = v4;
LABEL_16:
      operator delete(v4);
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      char v4 = *(void **)(a1 + 24);
      if (v6 != v5)
      {
        do
        {
          if (*(char *)(v6 - 1) < 0) {
            operator delete(*(void **)(v6 - 24));
          }
          v6 -= 32;
        }
        while (v6 != v5);
        char v4 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 32) = v5;
      goto LABEL_16;
    }
  }
  return a1;
}

void sub_C7FDB4()
{
  unk_25E09B7 = 16641;
  word_25E09A0 = 65;
  byte_25E09CF = 1;
  byte_25E09B9 = 0;
}

double sub_C7FDDC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v16);
  if (*(void *)(*(void *)(a1 + 24) + 8) - **(void **)(a1 + 24) == 24 && (sub_3CD500(*(_DWORD *)a1) & 1) != 0)
  {
    uint64_t v5 = (void *)sub_C7FFB0(*(void **)(a1 + 24), 0);
    uint64_t v6 = *(void **)(a1 + 8);
    char v7 = *(void **)(a1 + 16);
    sub_10CA214((int64x2_t *)&v17, v6);
    char v8 = sub_10CA8FC(&v17, v7, v5);
    uint64_t v9 = (void **)__p;
    if (__p)
    {
      uint64_t v10 = v22;
      long long v11 = __p;
      if (v22 != __p)
      {
        do
        {
          if (*((char *)v10 - 1) < 0) {
            operator delete(*(v10 - 3));
          }
          v10 -= 3;
        }
        while (v10 != v9);
        long long v11 = __p;
      }
      uint64_t v22 = v9;
      operator delete(v11);
    }
    uint64_t v12 = (void **)v18[0];
    if (v18[0])
    {
      uint64_t v13 = (void **)v18[1];
      uint64_t v14 = v18[0];
      if (v18[1] != v18[0])
      {
        do
        {
          if (*((char *)v13 - 1) < 0) {
            operator delete(*(v13 - 3));
          }
          v13 -= 3;
        }
        while (v13 != v12);
        uint64_t v14 = v18[0];
      }
      v18[1] = v12;
      operator delete(v14);
    }
    if (v8)
    {
      double result = sub_72688((uint64_t)v16);
      *(unsigned char *)a2 = 1;
      *(double *)(a2 + 8) = result;
      *(unsigned char *)(a2 + 16) = 1;
    }
    else
    {
      v23.n128_u64[0] = 8;
      v23.n128_u64[1] = (unint64_t)&off_2439090;
      sub_3E7814(&v17, &v23);
      *(unsigned char *)a2 = 0;
      double result = v17.n128_f64[0];
      long long v15 = *(_OWORD *)v18;
      *(__n128 *)(a2 + 8) = v17;
      *(_OWORD *)(a2 + 24) = v15;
      *(void *)(a2 + 40) = v19;
      *(_DWORD *)(a2 + 48) = v20;
    }
  }
  else
  {
    *(unsigned char *)a2 = 1;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
  return result;
}

void sub_C7FF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_C801E0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_C7FFB0(void *a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    char v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 24 * a2;
}

void sub_C80100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void *sub_C801E0(void *a1)
{
  uint64_t v2 = a1[14];
  if (v2)
  {
    uint64_t v3 = a1[15];
    char v4 = (void *)a1[14];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      char v4 = (void *)a1[14];
    }
    a1[15] = v2;
    operator delete(v4);
  }
  uint64_t v5 = a1[2];
  if (v5)
  {
    uint64_t v6 = a1[3];
    long long v7 = (void *)a1[2];
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      long long v7 = (void *)a1[2];
    }
    a1[3] = v5;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_C8029C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)a1 = sub_DC5C6C(a2);
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  return a1;
}

uint64_t sub_C802E8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  if (*(unsigned char *)(result + 8))
  {
    uint64_t v3 = (double *)result;
    std::string::assign((std::string *)a2, "DrivingToWalkingTransitionModule");
    char v5 = 1;
    unint64_t v4 = *(void *)(a2 + 32);
    if (v4 >= *(void *)(a2 + 40))
    {
      double result = sub_C55C14((uint64_t *)(a2 + 24), "Runtime", &v5, v3);
    }
    else
    {
      sub_C55DE4(a2 + 40, *(void *)(a2 + 32), "Runtime", &v5, v3);
      double result = v4 + 48;
      *(void *)(a2 + 32) = v4 + 48;
    }
    *(void *)(a2 + 32) = result;
  }
  return result;
}

void sub_C8039C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C803B0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C803C8(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C803DC()
{
  unk_25E09E7 = 16641;
  word_25E09D0 = 65;
  byte_25E09FF = 1;
  byte_25E09E9 = 0;
}

uint64_t sub_C80404(uint64_t *a1, void *a2, int a3)
{
  uint64_t v4 = a1[1];
  if (v4 == *a1)
  {
    uint64_t v11 = -1;
    uint64_t v10 = -1;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
    int v9 = 2147483646;
    uint64_t v10 = -1;
    uint64_t v11 = -1;
    do
    {
      int v12 = sub_EB6EB0((void *)(*a1 + 24 * v7));
      if (v12)
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          std::string v15 = (int **)(*(void *)(*a2 + 24 * v7) + 24 * i);
          std::string v16 = *v15;
          std::string v17 = v15[1];
          if (v16 != v17)
          {
            int v14 = 0;
            while (2)
            {
              switch(a3)
              {
                case 0:
                  std::string v18 = v16 + 1;
                  goto LABEL_13;
                case 1:
                  std::string v18 = v16 + 66;
                  goto LABEL_13;
                case 2:
                  std::string v18 = v16 + 67;
                  goto LABEL_13;
                case 3:
                  std::string v18 = v16 + 68;
                  goto LABEL_13;
                case 4:
                  std::string v18 = v16 + 69;
                  goto LABEL_13;
                case 5:
                  std::string v18 = v16 + 70;
LABEL_13:
                  int v19 = *v18;
                  BOOL v20 = v19 == 0x7FFFFFFF || v14 == 0x7FFFFFFF;
                  v14 += v19;
                  if (v20) {
                    int v14 = 0x7FFFFFFF;
                  }
                  v16 += 72;
                  if (v16 != v17) {
                    continue;
                  }
                  goto LABEL_7;
                default:
                  int v14 = 0x7FFFFFFF;
                  v16 += 72;
                  if (v16 != v17) {
                    continue;
                  }
                  goto LABEL_7;
              }
            }
          }
          int v14 = 0;
LABEL_7:
          if (v14 < v9)
          {
            int v9 = v14;
            uint64_t v11 = i;
            uint64_t v10 = v7;
          }
        }
      }
      ++v7;
    }
    while (v7 != v8);
    uint64_t v4 = *a1;
  }
  return *(void *)nullsub_1(v4 + 24 * v10) + 48 * v11;
}

uint64_t sub_C805D0(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (uint64_t *)sub_374CE4(a3);
  sub_327FD8((uint64_t)&v62, v4, 0, 0);
  uint64_t v5 = a1[1];
  char v57 = a1;
  uint64_t v6 = v5 - *a1;
  if (!v6)
  {
    uint64_t v10 = -1;
    uint64_t v9 = -1;
    goto LABEL_69;
  }
  uint64_t v7 = 0;
  unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
  double v8 = 0.0;
  uint64_t v9 = -1;
  uint64_t v10 = -1;
  do
  {
    unsigned int v11 = sub_EB6EB0((void *)(*v57 + 24 * v7));
    if (v11)
    {
      uint64_t v12 = 0;
      uint64_t v55 = v11;
      uint64_t v56 = v7;
      do
      {
        int v14 = (void *)nullsub_1(*v57 + 24 * v7);
        std::string v15 = (uint64_t *)nullsub_1(*v14 + 48 * v12);
        uint64_t v58 = v12;
        uint64_t v59 = v9;
        uint64_t v17 = *v15;
        uint64_t v16 = v15[1];
        uint64_t v60 = v10;
        uint64_t v61 = v16;
        double v18 = 0.0;
        while (v17 != v16)
        {
          BOOL v20 = *(uint64_t **)sub_3AEFFC(v17);
          uint64_t v21 = *(uint64_t **)(sub_3AEFFC(v17) + 8);
          if (v20 != v21)
          {
            int v19 = 0;
            while (1)
            {
              uint64_t v22 = *v20;
              double v23 = 0.0;
              if (*v20 < 0) {
                goto LABEL_20;
              }
              int v77 = 1;
              int v78 = v22;
              v76[0] = &v77;
              v76[1] = &v78;
              unint64_t v24 = ++v73;
              if (!v62)
              {
LABEL_19:
                sub_2E6354(v76);
                goto LABEL_20;
              }
              if (v65 == v22)
              {
                unsigned int v25 = 84;
                goto LABEL_31;
              }
              if (v67 == v22)
              {
                unsigned int v25 = 85;
                goto LABEL_31;
              }
              if (v69 == v22) {
                break;
              }
              if (v71 == v22)
              {
                unsigned int v25 = 87;
LABEL_31:
                ++v74;
                uint64_t v26 = &v64[3 * v25];
                v26[1] = v24;
                char v27 = (unsigned int *)v26[2];
                if (!v27) {
                  goto LABEL_19;
                }
                goto LABEL_32;
              }
              unint64_t v42 = v70;
              unint64_t v43 = v68;
              unint64_t v44 = v66;
              unint64_t v45 = v72;
              char v27 = (unsigned int *)sub_2AB884(v62, 21, v22, 1);
              if (v44 >= v24) {
                unint64_t v46 = v24;
              }
              else {
                unint64_t v46 = v44;
              }
              int v47 = 84;
              if (v44 >= v24) {
                int v47 = 0;
              }
              if (v43 < v46)
              {
                unint64_t v46 = v43;
                int v47 = 85;
              }
              if (v42 < v46)
              {
                int v47 = 86;
                unint64_t v46 = v42;
              }
              BOOL v48 = v45 >= v46;
              unsigned int v49 = 87;
              if (v48) {
                unsigned int v49 = v47;
              }
              long long v50 = &v64[3 * v49];
              *(_DWORD *)long long v50 = v78;
              v50[1] = v73;
              v50[2] = v27;
              if (!v27) {
                goto LABEL_19;
              }
LABEL_32:
              char v28 = (int *)((char *)v27 + *v27);
              uint64_t v29 = (unsigned __int16 *)((char *)v28 - *v28);
              unsigned int v30 = *v29;
              if ((v22 & 0x4000000000000000) != 0)
              {
                if (v30 < 5) {
                  goto LABEL_20;
                }
                unsigned int v31 = v29[2];
                if (!v31) {
                  goto LABEL_20;
                }
              }
              else
              {
                if (v30 < 7) {
                  goto LABEL_20;
                }
                unsigned int v31 = v29[3];
                if (!v31) {
                  goto LABEL_20;
                }
              }
              char v32 = (unsigned int *)((char *)v28 + v31 + *(int *)((char *)v28 + v31));
              if (*v32 > (HIDWORD(v22) & 0x3FFFFFFFu))
              {
                uint64_t v33 = (int *)((char *)v32
                            + 4 * HIDWORD(v22)
                            + *(unsigned int *)((char *)v32 + (4 * HIDWORD(v22)) + 4)
                            + 4);
                __int16 v34 = (unsigned __int16 *)((char *)v33 - *v33);
                unsigned int v35 = *v34;
                if (v35 >= 0xB && v34[5])
                {
                  unsigned int v36 = *(unsigned __int16 *)((char *)v33 + v34[5]);
                  unsigned int v37 = v75;
                  if (!v75) {
                    goto LABEL_48;
                  }
                }
                else
                {
                  unsigned int v36 = 0xFFFF;
                  unsigned int v37 = v75;
                  if (!v75) {
                    goto LABEL_48;
                  }
                }
                if (v35 >= 0x11
                  && (uint64_t v38 = v34[8]) != 0
                  && (int v39 = (unsigned int *)((char *)v33 + v38 + *(unsigned int *)((char *)v33 + v38)), *v39 >= v37)
                  && (unsigned int v40 = *((unsigned __int16 *)v39 + v37 + 1), (unsigned __int16)(v40 + 1) > 1u))
                {
                  double v41 = (double)v40;
                }
                else
                {
LABEL_48:
                  if (v36 == 0xFFFF)
                  {
                    double v23 = 0.3;
                    goto LABEL_20;
                  }
                  double v41 = (double)v36;
                }
                double v23 = v41 / 1000.0;
              }
LABEL_20:
              int v19 = (int)(v23 + (double)v19);
              v20 += 7;
              if (v20 == v21) {
                goto LABEL_15;
              }
            }
            unsigned int v25 = 86;
            goto LABEL_31;
          }
          int v19 = 0;
LABEL_15:
          double v18 = v18 + (double)v19;
          v17 += 472;
          uint64_t v16 = v61;
        }
        BOOL v13 = v18 <= v8;
        if (v18 > v8) {
          double v8 = v18;
        }
        uint64_t v9 = v59;
        uint64_t v10 = v60;
        if (!v13) {
          uint64_t v10 = v58;
        }
        uint64_t v7 = v56;
        if (!v13) {
          uint64_t v9 = v56;
        }
        uint64_t v12 = v58 + 1;
      }
      while (v58 + 1 != v55);
    }
    ++v7;
  }
  while (v7 != v54);
  uint64_t v5 = *v57;
LABEL_69:
  uint64_t v51 = *(void *)nullsub_1(v5 + 24 * v9);
  uint64_t v52 = v63;
  if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
  }
  return v51 + 48 * v10;
}

void sub_C80A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20)
  {
    if (!atomic_fetch_add(&a20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
      std::__shared_weak_count::__release_weak(a20);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_C80ACC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v132);
  uint64_t v3 = *(void *)(a1 + 32);
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "TraversalTimePredictionModule");
  memset(v131, 0, sizeof(v131));
  uint64_t v4 = sub_374CDC(v3, (uint64_t)__p, v131);
  uint64_t v5 = v131[0];
  if (v131[0])
  {
    uint64_t v6 = v131[1];
    uint64_t v7 = (void *)v131[0];
    if (v131[1] != v131[0])
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      uint64_t v7 = (void *)v131[0];
    }
    v131[1] = v5;
    operator delete(v7);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "is_enabled");
  BOOL v8 = sub_29D62C(v4, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a2 = 1;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v9 = a2 + 8;
  *(_OWORD *)(a2 + 24) = 0u;
  if (v8 && *(_DWORD *)(a1 + 24) != 1)
  {
    uint64_t v10 = *(uint64_t **)a1;
    unsigned int v11 = *(void **)(a1 + 8);
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_20B9390;
    strcpy((char *)__p[0], "also_use_fastest_historical_path");
    BOOL v117 = sub_29D62C(v4, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_20B9800;
    strcpy((char *)__p[0], "also_use_highest_capacity_path");
    BOOL v12 = sub_29D62C(v4, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v13 = sub_C80404(v10, v11, 0);
    std::string v15 = v14;
    uint64_t v116 = sub_C80404(v10, v11, 1);
    uint64_t v115 = v13;
    if (v117) {
      uint64_t v115 = sub_C80404(v10, v11, 2);
    }
    uint64_t v114 = v13;
    if (v12) {
      uint64_t v114 = sub_C805D0(v10, (uint64_t)v11, *(void **)(a1 + 32));
    }
    sub_EE8244(__p, *(void *)(a1 + 32));
    int v129 = *(_DWORD *)(a1 + 16);
    HIBYTE(v131[2]) = 12;
    strcpy((char *)v131, "time_horizon");
    int v16 = sub_319F48(v4, (uint64_t)v131);
    if (SHIBYTE(v131[2]) < 0) {
      operator delete((void *)v131[0]);
    }
    HIBYTE(v131[2]) = 18;
    strcpy((char *)v131, "bucketing_interval");
    int v17 = sub_319F48(v4, (uint64_t)v131);
    if (SHIBYTE(v131[2]) < 0)
    {
      operator delete((void *)v131[0]);
      uint64_t v18 = *v15;
      uint64_t v19 = v15[1];
      if (*v15 != v19) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v18 = *v15;
      uint64_t v19 = v15[1];
      if (*v15 != v19)
      {
LABEL_27:
        int v20 = 0;
        do
        {
          int v21 = *(_DWORD *)(v18 + 4);
          BOOL v22 = v21 == 0x7FFFFFFF || v20 == 0x7FFFFFFF;
          v20 += v21;
          if (v22) {
            int v20 = 0x7FFFFFFF;
          }
          v18 += 288;
        }
        while (v18 != v19);
        int v23 = v20 / 10;
        int v24 = v20 % 10;
        if (v20 < 0)
        {
          char v25 = -5;
          goto LABEL_40;
        }
LABEL_39:
        char v25 = 5;
LABEL_40:
        unsigned int v128 = 10 * (v23 + (((103 * (char)(v25 + v24)) >> 15) & 1) + ((103 * (char)(v25 + v24)) >> 10));
        sub_3EC418(v9, &v129, (int *)&v128);
        int v26 = 600 * v16;
        int v27 = 600 * v17 / 10;
        if (600 * v17 < 0) {
          char v28 = -5;
        }
        else {
          char v28 = 5;
        }
        unsigned int v29 = (((103 * (char)(v28 + 600 * v17 % 10)) >> 15) & 1)
            + ((103 * (char)(v28 + 600 * v17 % 10)) >> 10);
        int v30 = v129 + v27;
        int v31 = v26 / 10;
        int v32 = v26 % 10;
        if (v26 < 0) {
          char v33 = -5;
        }
        else {
          char v33 = 5;
        }
        unsigned int v34 = v31 + (((103 * (char)(v33 + v32)) >> 15) & 1) + ((103 * (char)(v33 + v32)) >> 10);
        int v127 = v30 + v29;
        if ((int)(v30 + v29) > (int)(v34 + v129))
        {
LABEL_47:
          *(void *)(a2 + 32) = vcvtad_u64_f64(sub_72688((uint64_t)v132));
          sub_3C7848(__p);
          return;
        }
        while (1)
        {
          sub_EEA50C((uint64_t)__p, v13, &v127, 0, (uint64_t)v131);
          sub_EEA50C((uint64_t)__p, v116, &v127, 0, (uint64_t)&v125);
          if (v117)
          {
            sub_EEA50C((uint64_t)__p, v115, &v127, 0, (uint64_t)&v122);
          }
          else
          {
            uint64_t v122 = 0;
            uint64_t v123 = 0;
            uint64_t v124 = 0;
            sub_C816EC((uint64_t)&v122, v131[0], v131[1], 0x8E38E38E38E38E39 * ((v131[1] - v131[0]) >> 5));
          }
          if (v12)
          {
            sub_EEA50C((uint64_t)__p, v114, &v127, 0, (uint64_t)&v119);
          }
          else
          {
            uint64_t v119 = 0;
            unint64_t v120 = 0;
            uint64_t v121 = 0;
            sub_C816EC((uint64_t)&v119, v131[0], v131[1], 0x8E38E38E38E38E39 * ((v131[1] - v131[0]) >> 5));
          }
          uint64_t v36 = v131[0];
          if (v131[0] == v131[1])
          {
            int v37 = 0;
            unsigned int v40 = (char *)v125;
            double v41 = v126;
            if (v125 == v126) {
              goto LABEL_97;
            }
          }
          else
          {
            int v37 = 0;
            do
            {
              int v38 = *(_DWORD *)(v36 + 4);
              BOOL v39 = v38 == 0x7FFFFFFF || v37 == 0x7FFFFFFF;
              v37 += v38;
              if (v39) {
                int v37 = 0x7FFFFFFF;
              }
              v36 += 288;
            }
            while (v36 != v131[1]);
            unsigned int v40 = (char *)v125;
            double v41 = v126;
            if (v125 == v126)
            {
LABEL_97:
              int v42 = 0;
              unint64_t v45 = (char *)v122;
              unint64_t v46 = v123;
              if (v122 == v123) {
                goto LABEL_98;
              }
              goto LABEL_78;
            }
          }
          int v42 = 0;
          do
          {
            int v43 = *((_DWORD *)v40 + 1);
            BOOL v44 = v43 == 0x7FFFFFFF || v42 == 0x7FFFFFFF;
            v42 += v43;
            if (v44) {
              int v42 = 0x7FFFFFFF;
            }
            v40 += 288;
          }
          while (v40 != v41);
          unint64_t v45 = (char *)v122;
          unint64_t v46 = v123;
          if (v122 == v123)
          {
LABEL_98:
            int v47 = 0;
            long long v50 = (char *)v119;
            uint64_t v51 = v120;
            if (v119 != v120) {
              goto LABEL_87;
            }
            goto LABEL_99;
          }
LABEL_78:
          int v47 = 0;
          do
          {
            int v48 = *((_DWORD *)v45 + 1);
            BOOL v49 = v48 == 0x7FFFFFFF || v47 == 0x7FFFFFFF;
            v47 += v48;
            if (v49) {
              int v47 = 0x7FFFFFFF;
            }
            v45 += 288;
          }
          while (v45 != v46);
          long long v50 = (char *)v119;
          uint64_t v51 = v120;
          if (v119 != v120)
          {
LABEL_87:
            int v52 = 0;
            do
            {
              int v53 = *((_DWORD *)v50 + 1);
              BOOL v54 = v53 == 0x7FFFFFFF || v52 == 0x7FFFFFFF;
              v52 += v53;
              if (v54) {
                int v52 = 0x7FFFFFFF;
              }
              v50 += 288;
            }
            while (v50 != v51);
            goto LABEL_100;
          }
LABEL_99:
          int v52 = 0;
LABEL_100:
          if (v42 < v37) {
            int v37 = v42;
          }
          if (v47 < v37) {
            int v37 = v47;
          }
          if (v52 < v37) {
            int v37 = v52;
          }
          int v55 = v37 / 10;
          int v56 = v37 % 10;
          if (v37 < 0) {
            char v57 = -5;
          }
          else {
            char v57 = 5;
          }
          unsigned int v118 = 10 * (v55 + (((103 * (char)(v57 + v56)) >> 15) & 1) + ((103 * (char)(v57 + v56)) >> 10));
          sub_3EC418(v9, &v127, (int *)&v118);
          uint64_t v58 = (char *)v119;
          if (v119)
          {
            uint64_t v59 = v119;
            if (v120 != v119)
            {
              uint64_t v60 = v120 - 128;
              do
              {
                uint64_t v62 = (void *)*((void *)v60 + 9);
                if (v62)
                {
                  *((void *)v60 + 10) = v62;
                  operator delete(v62);
                }
                uint64_t v63 = (void *)*((void *)v60 + 6);
                if (v63)
                {
                  *((void *)v60 + 7) = v63;
                  operator delete(v63);
                }
                uint64_t v64 = (void *)*((void *)v60 + 3);
                if (v64)
                {
                  *((void *)v60 + 4) = v64;
                  operator delete(v64);
                }
                int v65 = *(void **)v60;
                if (*(void *)v60)
                {
                  *((void *)v60 + 1) = v65;
                  operator delete(v65);
                }
                unint64_t v66 = (void *)*((void *)v60 - 3);
                if (v66)
                {
                  *((void *)v60 - 2) = v66;
                  operator delete(v66);
                }
                int v67 = (void *)*((void *)v60 - 6);
                if (v67)
                {
                  *((void *)v60 - 5) = v67;
                  operator delete(v67);
                }
                unint64_t v68 = (void *)*((void *)v60 - 9);
                if (v68)
                {
                  *((void *)v60 - 8) = v68;
                  operator delete(v68);
                }
                int v69 = (void *)*((void *)v60 - 12);
                if (v69)
                {
                  *((void *)v60 - 11) = v69;
                  operator delete(v69);
                }
                unint64_t v70 = (void *)*((void *)v60 - 15);
                if (v70)
                {
                  *((void *)v60 - 14) = v70;
                  operator delete(v70);
                }
                int v71 = (void *)*((void *)v60 - 18);
                if (v71)
                {
                  *((void *)v60 - 17) = v71;
                  operator delete(v71);
                }
                uint64_t v61 = v60 - 160;
                v60 -= 288;
              }
              while (v61 != v58);
              uint64_t v59 = v119;
            }
            unint64_t v120 = v58;
            operator delete(v59);
          }
          unint64_t v72 = (char *)v122;
          if (v122)
          {
            uint64_t v73 = v122;
            if (v123 != v122)
            {
              uint64_t v74 = v123 - 128;
              do
              {
                unint64_t v76 = (void *)*((void *)v74 + 9);
                if (v76)
                {
                  *((void *)v74 + 10) = v76;
                  operator delete(v76);
                }
                int v77 = (void *)*((void *)v74 + 6);
                if (v77)
                {
                  *((void *)v74 + 7) = v77;
                  operator delete(v77);
                }
                int v78 = (void *)*((void *)v74 + 3);
                if (v78)
                {
                  *((void *)v74 + 4) = v78;
                  operator delete(v78);
                }
                uint64_t v79 = *(void **)v74;
                if (*(void *)v74)
                {
                  *((void *)v74 + 1) = v79;
                  operator delete(v79);
                }
                unint64_t v80 = (void *)*((void *)v74 - 3);
                if (v80)
                {
                  *((void *)v74 - 2) = v80;
                  operator delete(v80);
                }
                long long v81 = (void *)*((void *)v74 - 6);
                if (v81)
                {
                  *((void *)v74 - 5) = v81;
                  operator delete(v81);
                }
                uint64_t v82 = (void *)*((void *)v74 - 9);
                if (v82)
                {
                  *((void *)v74 - 8) = v82;
                  operator delete(v82);
                }
                unint64_t v83 = (void *)*((void *)v74 - 12);
                if (v83)
                {
                  *((void *)v74 - 11) = v83;
                  operator delete(v83);
                }
                long long v84 = (void *)*((void *)v74 - 15);
                if (v84)
                {
                  *((void *)v74 - 14) = v84;
                  operator delete(v84);
                }
                uint64_t v85 = (void *)*((void *)v74 - 18);
                if (v85)
                {
                  *((void *)v74 - 17) = v85;
                  operator delete(v85);
                }
                unsigned __int16 v75 = v74 - 160;
                v74 -= 288;
              }
              while (v75 != v72);
              uint64_t v73 = v122;
            }
            uint64_t v123 = v72;
            operator delete(v73);
          }
          uint64_t v86 = (char *)v125;
          if (v125)
          {
            unint64_t v87 = v125;
            if (v126 != v125)
            {
              long long v88 = v126 - 128;
              do
              {
                uint64_t v90 = (void *)*((void *)v88 + 9);
                if (v90)
                {
                  *((void *)v88 + 10) = v90;
                  operator delete(v90);
                }
                uint64_t v91 = (void *)*((void *)v88 + 6);
                if (v91)
                {
                  *((void *)v88 + 7) = v91;
                  operator delete(v91);
                }
                uint64_t v92 = (void *)*((void *)v88 + 3);
                if (v92)
                {
                  *((void *)v88 + 4) = v92;
                  operator delete(v92);
                }
                unint64_t v93 = *(void **)v88;
                if (*(void *)v88)
                {
                  *((void *)v88 + 1) = v93;
                  operator delete(v93);
                }
                long long v94 = (void *)*((void *)v88 - 3);
                if (v94)
                {
                  *((void *)v88 - 2) = v94;
                  operator delete(v94);
                }
                long long v95 = (void *)*((void *)v88 - 6);
                if (v95)
                {
                  *((void *)v88 - 5) = v95;
                  operator delete(v95);
                }
                uint64_t v96 = (void *)*((void *)v88 - 9);
                if (v96)
                {
                  *((void *)v88 - 8) = v96;
                  operator delete(v96);
                }
                uint64_t v97 = (void *)*((void *)v88 - 12);
                if (v97)
                {
                  *((void *)v88 - 11) = v97;
                  operator delete(v97);
                }
                uint64_t v98 = (void *)*((void *)v88 - 15);
                if (v98)
                {
                  *((void *)v88 - 14) = v98;
                  operator delete(v98);
                }
                uint64_t v99 = (void *)*((void *)v88 - 18);
                if (v99)
                {
                  *((void *)v88 - 17) = v99;
                  operator delete(v99);
                }
                uint64_t v89 = v88 - 160;
                v88 -= 288;
              }
              while (v89 != v86);
              unint64_t v87 = v125;
            }
            long long v126 = v86;
            operator delete(v87);
          }
          uint64_t v100 = v131[0];
          if (v131[0])
          {
            unsigned int v35 = (void *)v131[0];
            if (v131[1] != v131[0])
            {
              uint64_t v101 = v131[1] - 128;
              do
              {
                uint64_t v103 = *(void **)(v101 + 72);
                if (v103)
                {
                  *(void *)(v101 + 80) = v103;
                  operator delete(v103);
                }
                unint64_t v104 = *(void **)(v101 + 48);
                if (v104)
                {
                  *(void *)(v101 + 56) = v104;
                  operator delete(v104);
                }
                unint64_t v105 = *(void **)(v101 + 24);
                if (v105)
                {
                  *(void *)(v101 + 32) = v105;
                  operator delete(v105);
                }
                long long v106 = *(void **)v101;
                if (*(void *)v101)
                {
                  *(void *)(v101 + 8) = v106;
                  operator delete(v106);
                }
                unint64_t v107 = *(void **)(v101 - 24);
                if (v107)
                {
                  *(void *)(v101 - 16) = v107;
                  operator delete(v107);
                }
                uint64_t v108 = *(void **)(v101 - 48);
                if (v108)
                {
                  *(void *)(v101 - 40) = v108;
                  operator delete(v108);
                }
                unint64_t v109 = *(void **)(v101 - 72);
                if (v109)
                {
                  *(void *)(v101 - 64) = v109;
                  operator delete(v109);
                }
                unint64_t v110 = *(void **)(v101 - 96);
                if (v110)
                {
                  *(void *)(v101 - 88) = v110;
                  operator delete(v110);
                }
                long long v111 = *(void **)(v101 - 120);
                if (v111)
                {
                  *(void *)(v101 - 112) = v111;
                  operator delete(v111);
                }
                uint64_t v112 = *(void **)(v101 - 144);
                if (v112)
                {
                  *(void *)(v101 - 136) = v112;
                  operator delete(v112);
                }
                uint64_t v102 = v101 - 160;
                v101 -= 288;
              }
              while (v102 != v100);
              unsigned int v35 = (void *)v131[0];
            }
            v131[1] = v100;
            operator delete(v35);
          }
          v127 += v27 + v29;
          if (v127 > (int)(v34 + v129)) {
            goto LABEL_47;
          }
        }
      }
    }
    LOBYTE(v24) = 0;
    int v23 = 0;
    goto LABEL_39;
  }
}

void sub_C81560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
}

void sub_C81658()
{
}

uint64_t sub_C81660(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2)
    {
      *(void *)(a1 + 16) = v2;
LABEL_12:
      operator delete(v2);
    }
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v2 = *(void **)(a1 + 24);
      if (v4 != v3)
      {
        do
        {
          if (*(char *)(v4 - 1) < 0) {
            operator delete(*(void **)(v4 - 24));
          }
          v4 -= 32;
        }
        while (v4 != v3);
        uint64_t v2 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 32) = v3;
      goto LABEL_12;
    }
  }
  return a1;
}

uint64_t sub_C816EC(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0xE38E38E38E38E4) {
      sub_2E00();
    }
    double result = (uint64_t)operator new(288 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    void v5[2] = result + 288 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        double result = sub_3B1F44(v8 + v9, (uint64_t *)(a2 + v9));
        v9 += 288;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_C817B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_C817C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 288)
    sub_3B0290((void *)(v10 - 288 + v11));
  *(void *)(v9 + 8) = v10;
  sub_C817F4(&a9);
  _Unwind_Resume(a1);
}

void ***sub_C817F4(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = v2[1];
      uint64_t v5 = **v1;
      if (v4 != v3)
      {
        do
          uint64_t v4 = sub_3B0290(v4 - 36);
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_C8187C()
{
  unk_25E0A17 = 16641;
  word_25E0A00 = 65;
  byte_25E0A2F = 1;
  byte_25E0A19 = 0;
  byte_25E0A47 = 3;
  dword_25E0A30 = 7105633;
}

uint64_t sub_C818B8()
{
  uint64_t v0 = (void **)__chkstk_darwin();
  uint64_t v2 = v1;
  sub_725D0((uint64_t)v309);
  unint64_t v3 = sub_DBB2FC((uint64_t)v0[1]);
  *(std::chrono::system_clock::time_point *)__t = std::chrono::system_clock::now();
  int v4 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)__t);
  unsigned int v253 = sub_DB8BEC((uint64_t)v0[1]);
  uint64_t v5 = sub_69510();
  sub_11B16A4((uint64_t)&v281, 0, 0);
  long long v307 = 0u;
  memset(v308, 0, 30);
  long long v305 = 0u;
  long long v306 = 0u;
  memset(v304, 0, sizeof(v304));
  long long v302 = 0u;
  long long v303 = 0u;
  memset(v301, 0, sizeof(v301));
  if (*((unsigned char *)v0 + 72))
  {
    char v6 = 1;
    goto LABEL_27;
  }
  uint64_t v7 = (uint64_t)*v0;
  *(void *)__t = operator new(0x20uLL);
  *(_OWORD *)&__t[8] = xmmword_20B8E90;
  strcpy(*(char **)__t, "AnalyticsMetricsRelevanceChecks");
  memset(&__p, 0, sizeof(__p));
  uint64_t v8 = sub_374CDC(v7, (uint64_t)__t, (uint64_t *)&__p);
  std::string::size_type v9 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    uint64_t v11 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(size - 1) < 0) {
          operator delete(*(void **)(size - 24));
        }
        size -= 24;
      }
      while (size != v9);
      uint64_t v11 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v9;
    operator delete(v11);
  }
  if ((__t[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__t);
    std::string v15 = (uint64_t **)v0[2];
    int v14 = *v15;
    uint64_t v13 = v15[1];
    if (*v15 != v13)
    {
LABEL_15:
      while (sub_45FE1C((uint64_t)v14) != 4)
      {
        v14 += 15;
        if (v14 == v13)
        {
          int v14 = v13;
          break;
        }
      }
    }
  }
  else
  {
    BOOL v12 = (uint64_t **)v0[2];
    int v14 = *v12;
    uint64_t v13 = v12[1];
    if (*v12 != v13) {
      goto LABEL_15;
    }
  }
  *(void *)__t = operator new(0x20uLL);
  *(_OWORD *)&__t[8] = xmmword_20B9800;
  strcpy(*(char **)__t, "enable_metrics_relevance_check");
  if (!sub_29D62C(v8, (uint64_t)__t))
  {
    if ((__t[23] & 0x80000000) != 0) {
      operator delete(*(void **)__t);
    }
    goto LABEL_26;
  }
  int v16 = (uint64_t *)v0[2][1];
  if ((__t[23] & 0x80000000) == 0)
  {
    if (v14 == v16) {
      goto LABEL_26;
    }
LABEL_25:
    char v6 = sub_39DB00(v14, (uint64_t)*v0);
    goto LABEL_27;
  }
  operator delete(*(void **)__t);
  if (v14 != v16) {
    goto LABEL_25;
  }
LABEL_26:
  char v6 = *((unsigned char *)v0 + 72) != 0;
LABEL_27:
  char v300 = v6;
  v282 |= 0x42u;
  int v17 = v297;
  if (!v297)
  {
    uint64_t v18 = (void *)(v281.i64[1] & 0xFFFFFFFFFFFFFFFCLL);
    if (v281.i8[8]) {
      uint64_t v18 = (void *)*v18;
    }
    int v17 = sub_11CFEF0((uint64_t)v18);
    v297 = v17;
  }
  unint64_t v19 = HIDWORD(v3);
  int v20 = *((_DWORD *)v17 + 4);
  *((_DWORD *)v17 + 9) = v19;
  *((_DWORD *)v17 + 10) = v4;
  *((unsigned char *)v17 + 44) = *((unsigned char *)v0 + 72);
  *((_DWORD *)v17 + 8) = 2;
  *((_DWORD *)v17 + 4) = v20 | 0x1F;
  int v21 = (void *)v17[3];
  if (v21)
  {
    *((_DWORD *)v21 + 4) |= 2u;
    uint64_t v22 = v21[4];
    if (v22) {
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v26 = v17[1];
    int v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
    if (v26) {
      int v27 = (void *)*v27;
    }
    int v21 = sub_11CFF70((uint64_t)v27);
    v17[3] = v21;
    *((_DWORD *)v21 + 4) |= 2u;
    uint64_t v22 = v21[4];
    if (v22)
    {
LABEL_33:
      int v251 = v19;
      int v23 = (uint64_t **)v0[2];
      char v25 = *v23;
      int v24 = v23[1];
      if (*v23 != v24) {
        goto LABEL_34;
      }
LABEL_45:
      if (v25 == v23[1]) {
        goto LABEL_156;
      }
LABEL_46:
      uint64_t v31 = nullsub_1(v0[7]);
      int v32 = sub_45FD6C(v25);
      *(_DWORD *)(v22 + 16) |= 4u;
      *(_DWORD *)(v22 + 136) = v32;
      sub_725D0((uint64_t)v280);
      if (*(unsigned char *)(v31 + 128) && !sub_491B10(v31))
      {
        sub_3ACA90((uint64_t)__t, *v0, v253, (uint64_t)v0[7]);
        if (!*(unsigned char *)(v31 + 128))
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_2439078;
        }
        int v33 = sub_4F44((unsigned int *)v31);
        int v34 = v33;
        unsigned int v35 = (char *)*((void *)&v301[1] + 1);
        uint64_t v36 = *(void **)&v301[2];
        if (*((void *)&v301[1] + 1) != *(void *)&v301[2])
        {
          while (*(_DWORD *)v35 != v33)
          {
            v35 += 32;
            if (v35 == *(char **)&v301[2]) {
              goto LABEL_54;
            }
          }
        }
        if (v35 == *(char **)&v301[2])
        {
LABEL_54:
          if (*(void *)&v301[2] >= *((void *)&v301[2] + 1))
          {
            int v37 = sub_3A6738((int64x2_t *)((char *)&v301[1] + 8));
          }
          else
          {
            **(_DWORD **)&v301[2] = -1;
            v36[2] = 0;
            v36[3] = 0;
            v36[1] = 0;
            int v37 = (char *)(v36 + 4);
          }
          *(void *)&v301[2] = v37;
          *((_DWORD *)v37 - 8) = v34;
          unsigned int v35 = v37 - 32;
        }
        sub_3AD07C((uint64_t)__t, v25, (uint64_t)v35, v22);
        *(void *)&long long v303 = sub_72688((uint64_t)v280);
        if (*(void *)(v22 + 120)) {
          int v38 = *(uint64_t (****)())(v22 + 120);
        }
        else {
          int v38 = &off_252D3C0;
        }
        *((void *)&v303 + 1) = sub_11CF93C((uint64_t)v38);
        uint64_t v39 = sub_3AEFFC((uint64_t)__t);
        LODWORD(v304[0]) = *(_DWORD *)(v39 + 28);
        DWORD1(v304[0]) = *(_DWORD *)(v39 + 24);
        *(_OWORD *)((char *)v304 + 8) = *(_OWORD *)v39;
        *((void *)&v304[1] + 1) = *(void *)(v39 + 16);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v270;
        sub_3AFF24((void ***)&__p);
        unsigned int v40 = (void **)v268;
        if (v268)
        {
          double v41 = v269;
          int v42 = v268;
          if (v269 != v268)
          {
            do
            {
              if (*((char *)v41 - 1) < 0) {
                operator delete(*(v41 - 3));
              }
              v41 -= 3;
            }
            while (v41 != v40);
            int v42 = v268;
          }
          uint64_t v269 = v40;
          operator delete(v42);
        }
        int v43 = (void **)v265;
        if (v265)
        {
          do
          {
            unint64_t v46 = (void **)*v43;
            if (*((char *)v43 + 39) < 0) {
              operator delete(v43[2]);
            }
            operator delete(v43);
            int v43 = v46;
          }
          while (v46);
        }
        BOOL v44 = v264;
        uint64_t v264 = 0;
        if (v44) {
          operator delete(v44);
        }
      }
      sub_725A0((uint64_t)v280);
      sub_3C8C84((uint64_t)__t, *v0);
      sub_3C8EFC((uint64_t)__t, (uint64_t)v25, (uint64_t)&__p);
      if (*((void *)&v301[0] + 1) >= *(void *)&v301[1]) {
        uint64_t v45 = sub_C84364((uint64_t *)v301, (uint64_t)&__p);
      }
      else {
        uint64_t v45 = sub_3CA508(*((uint64_t *)&v301[0] + 1), (uint64_t)&__p) + 64;
      }
      *((void *)&v301[0] + 1) = v45;
      sub_11C6DFC(&__p);
      if (v295 && (uint64_t v47 = v294, v294 < *v295))
      {
        ++v294;
        int v48 = *(std::string **)&v295[2 * v47 + 2];
      }
      else
      {
        BOOL v49 = sub_11D0B84(v293);
        int v48 = (std::string *)sub_188CDC8((uint64_t)&v293, (uint64_t)v49);
      }
      sub_3C99D8((uint64_t)__t, v25, &__p);
      if (v48 != &__p)
      {
        std::string::size_type v50 = v48->__r_.__value_.__l.__size_;
        if ((v50 & 2) != 0)
        {
          uint64_t v51 = 0;
        }
        else
        {
          uint64_t v51 = (void *)(v50 & 0xFFFFFFFFFFFFFFFCLL);
          if (v50) {
            uint64_t v51 = (void *)*v51;
          }
        }
        if ((__p.__r_.__value_.__s.__data_[8] & 2) != 0)
        {
          int v52 = 0;
        }
        else
        {
          int v52 = (void *)(__p.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFFCLL);
          if (__p.__r_.__value_.__s.__data_[8]) {
            int v52 = (void *)*v52;
          }
        }
        if (v51 == v52) {
          sub_11CEE1C(v48, (uint64_t)&__p);
        }
        else {
          sub_11CEDC8(v48, (uint64_t)&__p);
        }
      }
      sub_11CE668(&__p);
      uint64_t v53 = *((void *)&v301[0] + 1);
      uint64_t v54 = *(void *)&v301[0];
      if (*(void *)&v301[0] == *((void *)&v301[0] + 1))
      {
        uint64_t v56 = 0;
      }
      else
      {
        int v55 = 0;
        do
        {
          v55 += sub_11C74D8(v54);
          v54 += 64;
        }
        while (v54 != v53);
        uint64_t v56 = v55;
      }
      *((void *)&v306 + 1) = v56;
      *(void *)&long long v306 = sub_72688((uint64_t)v280);
      uint64_t v57 = sub_374D14(*v0);
      sub_45EFA0(v25, (uint64_t)&__p);
      unint64_t v58 = *(void *)__p.__r_.__value_.__l.__data_;
      long long v274 = 0uLL;
      double v59 = sub_299F0C(v57, v58, (uint64_t)&v274, 0);
      if (v278)
      {
        uint64_t v279 = v278;
        operator delete(v278);
      }
      if (__p.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v277 = __p.__r_.__value_.__r.__words[2];
        operator delete((void *)__p.__r_.__value_.__r.__words[2]);
      }
      BOOL v62 = *(uint64_t *)&v59 > -1 && ((*(void *)&v59 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
         || (unint64_t)(*(void *)&v59 - 1) < 0xFFFFFFFFFFFFFLL
         || (*(void *)&v59 & 0x7FFFFFFFFFFFFFFFLL) == 0;
      if (v62 && v59 > 0.0)
      {
        *(_DWORD *)(v22 + 16) |= 2u;
        uint64_t v63 = *(void *)(v22 + 128);
        if (!v63)
        {
          uint64_t v64 = *(void *)(v22 + 8);
          int v65 = (void *)(v64 & 0xFFFFFFFFFFFFFFFCLL);
          if (v64) {
            int v65 = (void *)*v65;
          }
          uint64_t v63 = sub_11D0CE4((uint64_t)v65);
          *(void *)(v22 + 128) = v63;
        }
        float v66 = v59;
        *(_DWORD *)(v63 + 16) |= 1u;
        *(float *)(v63 + 24) = v66;
      }
      if sub_DB8BEC((uint64_t)v0[1]) != 2 || (sub_DC6EDC((uint64_t)*v0)) {
        goto LABEL_154;
      }
      LODWORD(__dst[0]) = sub_DC502C((uint64_t)v0[1]);
      int v67 = (unsigned int *)sub_40EFE8((uint64_t)v25);
      uint64_t v68 = sub_52058((uint64_t)v25);
      if (v67 == (unsigned int *)v68)
      {
        LODWORD(v259.__r_.__value_.__l.__data_) = 0;
        int v70 = (int)__dst[0];
        if (LODWORD(__dst[0]) != 0x7FFFFFFF)
        {
          int v69 = 0;
LABEL_131:
          BOOL v73 = v70 < v69;
          unint64_t v72 = (std::string *)__dst;
          if (v70 >= v69) {
            int v71 = (std::string *)__dst;
          }
          else {
            int v71 = &v259;
          }
          if (!v73) {
            unint64_t v72 = &v259;
          }
LABEL_136:
          int data = (int)v71->__r_.__value_.__l.__data_;
          int v75 = (int)v72->__r_.__value_.__l.__data_;
          uint64_t v76 = (uint64_t)*v0;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20B91B0;
          strcpy(__p.__r_.__value_.__l.__data_, "DrivingUpdateAnalyticsModule");
          long long v274 = 0uLL;
          uint64_t v275 = 0;
          int v77 = sub_374CDC(v76, (uint64_t)&__p, (uint64_t *)&v274);
          uint64_t v78 = v274;
          if ((void)v274)
          {
            uint64_t v79 = *((void *)&v274 + 1);
            unint64_t v80 = (void *)v274;
            if (*((void *)&v274 + 1) != (void)v274)
            {
              do
              {
                if (*(char *)(v79 - 1) < 0) {
                  operator delete(*(void **)(v79 - 24));
                }
                v79 -= 24;
              }
              while (v79 != v78);
              unint64_t v80 = (void *)v274;
            }
            *((void *)&v274 + 1) = v78;
            operator delete(v80);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20B9390;
          strcpy(__p.__r_.__value_.__l.__data_, "eta_jump_reporting_threshold_min");
          int v81 = sub_5D2EC(v77, &__p);
          int v82 = v81;
          int v83 = data - v75;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (v83 < v82) {
              goto LABEL_154;
            }
          }
          else if (v83 < v81)
          {
LABEL_154:
            if (v266)
            {
              uint64_t v267 = v266;
              operator delete(v266);
            }
            goto LABEL_156;
          }
          sub_DBC55C((uint64_t)v0[1]);
          if (sub_DBB760((uint64_t)v0[1])) {
            sub_37B490((uint64_t)*v0);
          }
          sub_6879C((uint64_t)v5, &__p);
          sub_487740((uint64_t)v0[7]);
          sub_69134((uint64_t)v5);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_154;
        }
      }
      else
      {
        int v69 = 0;
        do
        {
          v69 += sub_46E120(v67, 0);
          v67 += 264;
        }
        while (v67 != (unsigned int *)v68);
        LODWORD(v259.__r_.__value_.__l.__data_) = v69;
        int v70 = (int)__dst[0];
        if (LODWORD(__dst[0]) != 0x7FFFFFFF)
        {
          if (v69 == 0x7FFFFFFF)
          {
            int v71 = (std::string *)__dst;
            unint64_t v72 = (std::string *)__dst;
            goto LABEL_136;
          }
          goto LABEL_131;
        }
      }
      int v71 = &v259;
      unint64_t v72 = &v259;
      goto LABEL_136;
    }
  }
  uint64_t v28 = v21[1];
  unsigned int v29 = (void *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
  if (v28) {
    unsigned int v29 = (void *)*v29;
  }
  sub_11D0164((uint64_t)v29);
  uint64_t v22 = v30;
  v21[4] = v30;
  int v251 = v19;
  int v23 = (uint64_t **)v0[2];
  char v25 = *v23;
  int v24 = v23[1];
  if (*v23 == v24) {
    goto LABEL_45;
  }
LABEL_34:
  while (sub_45FE1C((uint64_t)v25) != 4)
  {
    v25 += 15;
    if (v25 == v24)
    {
      char v25 = v24;
      break;
    }
  }
  if (v25 != (uint64_t *)v0[2][1]) {
    goto LABEL_46;
  }
LABEL_156:
  long long v84 = (const std::string **)v0[4];
  uint64_t v86 = *v84;
  uint64_t v85 = v84[1];
  if (*v84 != v85)
  {
    do
    {
      if (v285 && (uint64_t v87 = v284, v284 < *v285))
      {
        ++v284;
        long long v88 = *(std::string **)&v285[2 * v87 + 2];
      }
      else
      {
        if (!v283) {
          operator new();
        }
        void *v90 = v89;
        v90[1] = sub_3A6EDC;
        void *v89 = 0;
        v89[1] = 0;
        v89[2] = 0;
        long long v88 = (std::string *)sub_188CDC8((uint64_t)&v283, (uint64_t)v89);
      }
      std::string::operator=(v88, v86++);
    }
    while (v86 != v85);
  }
  v282 |= 4u;
  uint64_t v91 = v298;
  if (!v298)
  {
    uint64_t v92 = (void *)(v281.i64[1] & 0xFFFFFFFFFFFFFFFCLL);
    if (v281.i8[8]) {
      uint64_t v92 = (void *)*v92;
    }
    uint64_t v91 = sub_11BED5C((uint64_t)v92);
    v298 = v91;
  }
  unint64_t v93 = (uint64_t *)sub_374CE4(*v0);
  long long v94 = (void *)sub_2ABCB4(*v93);
  uint64_t v95 = sub_3CC750(v94);
  *((_DWORD *)v91 + 4) |= 2u;
  v91[4] = v95;
  v282 |= 4u;
  uint64_t v96 = v298;
  if (!v298)
  {
    uint64_t v97 = (void *)(v281.i64[1] & 0xFFFFFFFFFFFFFFFCLL);
    if (v281.i8[8]) {
      uint64_t v97 = (void *)*v97;
    }
    uint64_t v96 = sub_11BED5C((uint64_t)v97);
    v298 = v96;
  }
  uint64_t v98 = (void *)sub_374D14(*v0);
  uint64_t v99 = sub_299CE4(v98);
  *((_DWORD *)v96 + 4) |= 1u;
  uint64_t v100 = v96[1];
  uint64_t v101 = (uint64_t *)(v100 & 0xFFFFFFFFFFFFFFFCLL);
  if (v100) {
    uint64_t v101 = (uint64_t *)*v101;
  }
  sub_1881DF4((std::string **)v96 + 3, (long long *)v99, v101);
  uint64_t v102 = *(int *)sub_37B3A8((uint64_t)*v0);
  v282 |= 0x10u;
  uint64_t v299 = v102;
  uint64_t v103 = sub_69510();
  unint64_t v104 = (long long *)sub_68EB4((uint64_t)v103);
  v282 |= 1u;
  unint64_t v105 = (uint64_t *)(v281.i64[1] & 0xFFFFFFFFFFFFFFFCLL);
  if (v281.i8[8]) {
    unint64_t v105 = (uint64_t *)*v105;
  }
  sub_1881DF4(&v296, v104, v105);
  sub_725D0((uint64_t)v280);
  if (*v0[2] != v0[2][1])
  {
    sub_39F3D0((uint64_t)__t, *v0, v253, (uint64_t)(v0 + 223));
    long long v106 = (char **)v0[2];
    unint64_t v107 = (long long **)v0[5];
    uint64_t v108 = (uint64_t ***)v0[6];
    long long v274 = 0uLL;
    uint64_t v275 = 0;
    sub_485C30((uint64_t)v0[7], (uint64_t)&__p);
    sub_39F3D4((std::string::size_type)__t, v106, v107, v108, (uint64_t *)&v274, (uint64_t)&__p, 0, &v281);
    std::string::size_type v109 = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      unint64_t v110 = (char **)__p.__r_.__value_.__r.__words[2];
      long long v111 = (void *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__r.__words[2] != __p.__r_.__value_.__l.__size_)
      {
        do
        {
          v110 -= 9;
          sub_3A688C((uint64_t)&v277, v110);
        }
        while (v110 != (char **)v109);
        long long v111 = (void *)__p.__r_.__value_.__l.__size_;
      }
      __p.__r_.__value_.__r.__words[2] = v109;
      operator delete(v111);
    }
    uint64_t v112 = v274;
    if ((void)v274)
    {
      uint64_t v113 = *((void *)&v274 + 1);
      uint64_t v114 = (void *)v274;
      if (*((void *)&v274 + 1) != (void)v274)
      {
        do
        {
          uint64_t v115 = *(void **)(v113 - 32);
          if (v115)
          {
            *(void *)(v113 - 24) = v115;
            operator delete(v115);
          }
          uint64_t v116 = *(void **)(v113 - 56);
          if (v116)
          {
            *(void *)(v113 - 48) = v116;
            operator delete(v116);
          }
          BOOL v117 = *(void **)(v113 - 88);
          if (v117)
          {
            *(void *)(v113 - 80) = v117;
            operator delete(v117);
          }
          v113 -= 160;
        }
        while (v113 != v112);
        uint64_t v114 = (void *)v274;
      }
      *((void *)&v274 + 1) = v112;
      operator delete(v114);
    }
    sub_3A4C98((uint64_t)__t, (__n128 *)&__p);
    if (__p.__r_.__value_.__s.__data_[16])
    {
      v282 |= 2u;
      unsigned int v118 = v297;
      if (!v297)
      {
        uint64_t v119 = (void *)(v281.i64[1] & 0xFFFFFFFFFFFFFFFCLL);
        if (v281.i8[8]) {
          uint64_t v119 = (void *)*v119;
        }
        unsigned int v118 = sub_11CFEF0((uint64_t)v119);
        v297 = v118;
      }
      *((_DWORD *)v118 + 4) |= 0x10u;
      *((unsigned char *)v118 + 44) = 1;
    }
    sub_3A4C98((uint64_t)__t, (__n128 *)&__p);
    *(_DWORD *)v308 = __p.__r_.__value_.__l.__data_;
    sub_3A4C98((uint64_t)__t, (__n128 *)&__p);
    *(_DWORD *)&v308[4] = HIDWORD(__p.__r_.__value_.__r.__words[0]);
    sub_3A4C98((uint64_t)__t, (__n128 *)&__p);
    *(_DWORD *)&v308[8] = __p.__r_.__value_.__r.__words[1];
    sub_3A4C98((uint64_t)__t, (__n128 *)&__p);
    *(_DWORD *)&v308[12] = HIDWORD(__p.__r_.__value_.__r.__words[1]);
    if (v290) {
      unint64_t v120 = (uint64_t *)(v290 + 8);
    }
    else {
      unint64_t v120 = 0;
    }
    if (v289)
    {
      int v121 = 0;
      uint64_t v122 = 8 * v289;
      do
      {
        v121 += sub_11AC500(*v120++);
        v122 -= 8;
      }
      while (v122);
      uint64_t v123 = v121;
    }
    else
    {
      uint64_t v123 = 0;
    }
    *((void *)&v305 + 1) = v123;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v273;
    sub_3A6108((void ***)&__p);
    if (v271)
    {
      uint64_t v272 = v271;
      operator delete(v271);
    }
    sub_3A6230(&v265);
  }
  *(void *)&long long v305 = sub_72688((uint64_t)v280);
  if (*v0[2] != v0[2][1])
  {
    sub_725D0((uint64_t)__t);
    sub_3BFD18((BOOL *)&__p, (uint64_t)*v0);
    uint64_t v124 = v0[2];
    uint64_t v125 = v0[3];
    long long v126 = *v0;
    __n128 v262 = v0[10];
    sub_3BFD1C((uint64_t)&__p, v124, v125, v126, (uint64_t *)&v262, (uint64_t)&v281);
    if (v292) {
      int v127 = (uint64_t *)(v292 + 8);
    }
    else {
      int v127 = 0;
    }
    if (v291)
    {
      int v128 = 0;
      uint64_t v129 = 8 * v291;
      do
      {
        v128 += sub_11B0050(*v127++);
        v129 -= 8;
      }
      while (v129);
      uint64_t v130 = v128;
    }
    else
    {
      uint64_t v130 = 0;
    }
    *((void *)&v307 + 1) = v130;
    *(void *)&long long v307 = sub_72688((uint64_t)__t);
    BOOL v131 = (uint64_t **)v0[2];
    long long v133 = *v131;
    __n128 v132 = v131[1];
    while (v133 != v132)
    {
      if ((sub_68ECC((uint64_t)v5) & 1) == 0
        && sub_45FE1C((uint64_t)v133) == 4
        && *(unsigned char *)(sub_5231C((uint64_t)v133) + 36))
      {
        uint64_t v134 = (int *)sub_3750CC(*v0);
        uint64_t v135 = *(void *)(sub_45FC68(v133) + 32);
        sub_47F66C((char *)v133, (uint64_t)v134);
        uint64_t v136 = sub_45FC68(v133);
        sub_2D5D58((uint64_t)v134, *(void *)(v136 + 32) & 0xFFFFFFFFFFFFLL);
        unint64_t v137 = v135 & 0xFFFFFFFFFFFFLL;
        unint64_t v138 = (int *)sub_2D5D58((uint64_t)v134, v135 & 0xFFFFFFFFFFFFLL);
        uint64_t v139 = (unsigned __int16 *)((char *)v138 - *v138);
        if (*v139 >= 0x41u && (uint64_t v140 = v139[32]) != 0) {
          uint64_t v141 = (unsigned int *)((char *)v138 + v140 + *(unsigned int *)((char *)v138 + v140));
        }
        else {
          uint64_t v141 = 0;
        }
        uint64_t v142 = v135 & 0xFF000000000000;
        sub_3BD900(v141, (v135 & 0xFF000000000000) != 0x1000000000000, 1, (uint64_t)__t);
        uint64_t v143 = *(void *)__t;
        if (*(void *)__t)
        {
          uint64_t v254 = v142;
          unint64_t v144 = v137;
          uint64_t v145 = *(void *)&__t[8];
          uint64_t v146 = *(void **)__t;
          if (*(void *)__t != *(void *)&__t[8])
          {
            do
            {
              if (*(char *)(v145 - 1) < 0) {
                operator delete(*(void **)(v145 - 24));
              }
              v145 -= 24;
            }
            while (v145 != v143);
            uint64_t v146 = *(void **)__t;
          }
          *(void *)&__t[8] = v143;
          operator delete(v146);
          unint64_t v137 = v144;
          uint64_t v142 = v254;
        }
        uint64_t v147 = sub_45FC68(v133);
        unint64_t v148 = sub_2E68E8((uint64_t)v134, *(void *)(v147 + 32));
        sub_3BDB4C(v134, v148, &v274);
        uint64_t v149 = (int *)sub_2D5D58((uint64_t)v134, v137);
        uint64_t v150 = (unsigned __int16 *)((char *)v149 - *v149);
        if (*v150 >= 0x41u && (uint64_t v151 = v150[32]) != 0) {
          uint64_t v152 = (unsigned int *)((char *)v149 + v151 + *(unsigned int *)((char *)v149 + v151));
        }
        else {
          uint64_t v152 = 0;
        }
        sub_3BD900(v152, v142 != 0x1000000000000, 1, (uint64_t)__dst);
        uint64_t v153 = sub_45FC68(v133);
        sub_3BDCD8((uint64_t)v134, *(unsigned int *)(v153 + 32) | ((unint64_t)*(unsigned __int16 *)(v153 + 36) << 32), __t);
        uint64_t v154 = __t[23];
        if (__t[23] < 0) {
          uint64_t v154 = *(void *)&__t[8];
        }
        if (v154) {
          sub_26A18((uint64_t)&v258, __t);
        }
        else {
          sub_26908((uint64_t)&v258);
        }
        if ((__t[23] & 0x80000000) != 0) {
          operator delete(*(void **)__t);
        }
        sub_480C((uint64_t)__t, v251);
      }
      v133 += 15;
    }
  }
  if (sub_DAFB88((uint64_t)v0[10]))
  {
    sub_3B6008((uint64_t)&__p, (uint64_t)*v0);
    uint64_t v155 = (uint64_t)v0[10];
    if (sub_45FB38(v0[8]) || (sub_63A048(v155) & 1) != 0 || (sub_5B9B38(v0 + 11) & 1) == 0)
    {
      sub_3B600C(&__p, (uint64_t)v0[7]);
      goto LABEL_263;
    }
    uint64_t v156 = (void *)sub_45FB28(v0[8], 0);
    sub_3B732C(&__p, v156, (uint64_t)v0[10], (uint64_t)*v0, (uint64_t)v0[7]);
    uint64_t v157 = sub_45FB28(v0[8], 0);
    unint64_t v247 = sub_3B6094(&__p, v157, (uint64_t)v0[10], (uint64_t)v0[7]);
    uint64_t v159 = v158;
    v308[28] = BYTE4(v158);
    uint64_t v160 = sub_45FB28(v0[8], 0);
    uint64_t v161 = (void *)(sub_486CB4((uint64_t)v0[7]) + 16);
    if (*(_DWORD *)(v160 + 152) != 0x7FFFFFFF
      && *(_DWORD *)(v160 + 188) != 0x7FFFFFFF
      && sub_40A45C((int *)(v160 + 160)))
    {
      int v162 = *(_DWORD *)(v160 + 264);
      if (v162 != -1)
      {
        if (v162 == 1)
        {
          if (*(void *)(v160 + 256) <= 0xFFFFFFFEFFFFFFFFLL && *(void *)(v160 + 256)) {
            goto LABEL_287;
          }
        }
        else
        {
          if (v162) {
            goto LABEL_450;
          }
          if (*(void *)(v160 + 256) != -1) {
            goto LABEL_287;
          }
        }
      }
    }
    if (*(_DWORD *)(v160 + 312) != 0x7FFFFFFF
      && *(_DWORD *)(v160 + 348) != 0x7FFFFFFF
      && sub_40A45C((int *)(v160 + 320)))
    {
      int v177 = *(_DWORD *)(v160 + 424);
      if (v177 != -1)
      {
        if (v177 != 1)
        {
          if (!v177)
          {
            if (*(void *)(v160 + 416) != -1) {
              goto LABEL_287;
            }
            goto LABEL_286;
          }
LABEL_450:
          __n128 v246 = __cxa_allocate_exception(8uLL);
          *__n128 v246 = &off_23FDF58;
        }
        if (*(void *)(v160 + 416) <= 0xFFFFFFFEFFFFFFFFLL && *(void *)(v160 + 416)) {
          goto LABEL_287;
        }
      }
    }
LABEL_286:
    if ((sub_63A048(v155) & 1) == 0)
    {
      BOOL v178 = sub_C5BBDC(v161);
LABEL_289:
      long long v248 = v161;
      char v255 = v178;
      v308[29] = v178;
      uint64_t v179 = nullsub_1(&__p);
      unint64_t v180 = sub_DBB2FC((uint64_t)v0[1]);
      uint64_t v181 = sub_486CB4((uint64_t)v0[7]);
      unint64_t v182 = HIDWORD(v180);
      unint64_t v252 = HIDWORD(v180);
      if (*(_DWORD *)(v181 + 152) != 0x7FFFFFFF) {
        LODWORD(v182) = *(_DWORD *)(sub_486CB4((uint64_t)v0[7]) + 152);
      }
      int v250 = v182;
      uint64_t v183 = (uint64_t)*v0;
      __t[23] = 9;
      strcpy(__t, "EVRouting");
      long long v274 = 0uLL;
      uint64_t v275 = 0;
      unint64_t v184 = sub_374CDC(v183, (uint64_t)__t, (uint64_t *)&v274);
      uint64_t v185 = v184;
      uint64_t v186 = v274;
      if ((void)v274)
      {
        long long v249 = v184;
        uint64_t v187 = v179;
        uint64_t v188 = v159;
        uint64_t v189 = *((void *)&v274 + 1);
        v190 = (void *)v274;
        if (*((void *)&v274 + 1) != (void)v274)
        {
          do
          {
            if (*(char *)(v189 - 1) < 0) {
              operator delete(*(void **)(v189 - 24));
            }
            v189 -= 24;
          }
          while (v189 != v186);
          v190 = (void *)v274;
        }
        *((void *)&v274 + 1) = v186;
        operator delete(v190);
        uint64_t v159 = v188;
        uint64_t v179 = v187;
        uint64_t v185 = v249;
      }
      if ((__t[23] & 0x80000000) != 0) {
        operator delete(*(void **)__t);
      }
      *(void *)__t = operator new(0x20uLL);
      *(_OWORD *)&__t[8] = xmmword_20B91A0;
      strcpy(*(char **)__t, "ev_info_staleness_limit_min");
      int v191 = sub_5D2EC(v185, __t);
      if ((__t[23] & 0x80000000) != 0) {
        operator delete(*(void **)__t);
      }
      double v192 = 0.0;
      if (!sub_DAFBE4(v155) || (int)sub_46CABC(v155) > v191) {
        goto LABEL_313;
      }
      if (BYTE4(v159)) {
        BOOL v193 = 1;
      }
      else {
        BOOL v193 = 10 * ((int)v252 - v250) < *(_DWORD *)(v179 + 48);
      }
      char v194 = v255;
      if (v193) {
        char v194 = 1;
      }
      if ((v194 & 1) != 0 || sub_C5BC54(v248, *(_DWORD *)(v179 + 40), *(_DWORD *)(v179 + 44)))
      {
LABEL_313:
        int v195 = 1;
      }
      else if (v247 == 0x7FFFFFFF || HIDWORD(v247) == 0x7FFFFFFF)
      {
        int v195 = 0;
      }
      else
      {
        int v195 = 0;
        if (v159 && v159 != 0x7FFFFFFF)
        {
          int v195 = 0;
          double v192 = (double)((int)v247 - HIDWORD(v247)) / 1000.0 / ((double)(int)v159 / 1000.0);
        }
      }
      *(double *)&v308[16] = v192;
      uint64_t v196 = *(void *)(v179 + 24);
      int v197 = (int)v196 / 100000;
      int v198 = (int)v196 % 100000;
      if (v196 >= 0) {
        int v199 = 50000;
      }
      else {
        int v199 = -50000;
      }
      *(_DWORD *)&v308[24] = (v199 + v198) / 100000 + v197;
      double v200 = -v192;
      if (v192 > 0.0) {
        double v200 = v192;
      }
      if (v200 <= *(double *)(v179 + 32)) {
        goto LABEL_373;
      }
      unint64_t v201 = sub_DBE834((uint64_t)v0[1]);
      if (*(char *)(v201 + 23) < 0)
      {
        sub_4200(&v274, *(void **)v201, *(void *)(v201 + 8));
      }
      else
      {
        long long v202 = *(_OWORD *)v201;
        uint64_t v275 = *(void *)(v201 + 16);
        long long v274 = v202;
      }
      unint64_t v203 = sub_DBE88C((uint64_t)v0[1]);
      if (*(char *)(v203 + 23) < 0)
      {
        sub_4200(__dst, *(void **)v203, *(void *)(v203 + 8));
      }
      else
      {
        long long v204 = *(_OWORD *)v203;
        uint64_t v261 = *(void *)(v203 + 16);
        *(_OWORD *)__dst = v204;
      }
      v259.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
      *(_OWORD *)&v259.__r_.__value_.__r.__words[1] = xmmword_20B9A00;
      strcpy(v259.__r_.__value_.__l.__data_, "EV consumption prediction error exceeded the max allowed limit: ");
      std::to_string(&v258, *(double *)&v308[16]);
      uint64_t v205 = std::string::append(&v258, "%");
      long long v206 = *(_OWORD *)&v205->__r_.__value_.__l.__data_;
      *(void *)&__t[16] = *((void *)&v205->__r_.__value_.__l + 2);
      *(_OWORD *)__t = v206;
      v205->__r_.__value_.__l.__size_ = 0;
      v205->__r_.__value_.__r.__words[2] = 0;
      v205->__r_.__value_.__r.__words[0] = 0;
      if (__t[23] >= 0) {
        uint64_t v207 = __t;
      }
      else {
        uint64_t v207 = *(const std::string::value_type **)__t;
      }
      if (__t[23] >= 0) {
        std::string::size_type v208 = __t[23];
      }
      else {
        std::string::size_type v208 = *(void *)&__t[8];
      }
      std::string::append(&v259, v207, v208);
      if ((__t[23] & 0x80000000) != 0) {
        operator delete(*(void **)__t);
      }
      if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v258.__r_.__value_.__l.__data_);
      }
      std::operator+<char>();
      unint64_t v209 = std::string::append(&v256, "\" app_id=\"");
      long long v210 = *(_OWORD *)&v209->__r_.__value_.__l.__data_;
      v257.__r_.__value_.__r.__words[2] = v209->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v257.__r_.__value_.__l.__data_ = v210;
      v209->__r_.__value_.__l.__size_ = 0;
      v209->__r_.__value_.__r.__words[2] = 0;
      v209->__r_.__value_.__r.__words[0] = 0;
      if (v275 >= 0) {
        uint64_t v211 = (const std::string::value_type *)&v274;
      }
      else {
        uint64_t v211 = (const std::string::value_type *)v274;
      }
      if (v275 >= 0) {
        std::string::size_type v212 = HIBYTE(v275);
      }
      else {
        std::string::size_type v212 = *((void *)&v274 + 1);
      }
      char v213 = std::string::append(&v257, v211, v212);
      long long v214 = *(_OWORD *)&v213->__r_.__value_.__l.__data_;
      v258.__r_.__value_.__r.__words[2] = v213->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v214;
      v213->__r_.__value_.__l.__size_ = 0;
      v213->__r_.__value_.__r.__words[2] = 0;
      v213->__r_.__value_.__r.__words[0] = 0;
      uint64_t v215 = std::string::append(&v258, "\"");
      long long v216 = *(_OWORD *)&v215->__r_.__value_.__l.__data_;
      *(void *)&__t[16] = *((void *)&v215->__r_.__value_.__l + 2);
      *(_OWORD *)__t = v216;
      v215->__r_.__value_.__l.__size_ = 0;
      v215->__r_.__value_.__r.__words[2] = 0;
      v215->__r_.__value_.__r.__words[0] = 0;
      if (__t[23] >= 0) {
        uint64_t v217 = __t;
      }
      else {
        uint64_t v217 = *(const std::string::value_type **)__t;
      }
      if (__t[23] >= 0) {
        std::string::size_type v218 = __t[23];
      }
      else {
        std::string::size_type v218 = *(void *)&__t[8];
      }
      std::string::append(&v259, v217, v218);
      if ((__t[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__t);
        if ((SHIBYTE(v258.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_350:
          if ((SHIBYTE(v257.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_351;
          }
          goto LABEL_430;
        }
      }
      else if ((SHIBYTE(v258.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_350;
      }
      operator delete(v258.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v257.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_351:
        if ((SHIBYTE(v256.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_352:
          sub_68EE4((uint64_t)v5);
          std::operator+<char>();
          if (__t[23] >= 0) {
            uint64_t v219 = __t;
          }
          else {
            uint64_t v219 = *(const std::string::value_type **)__t;
          }
          if (__t[23] >= 0) {
            std::string::size_type v220 = __t[23];
          }
          else {
            std::string::size_type v220 = *(void *)&__t[8];
          }
          std::string::append(&v259, v219, v220);
          if ((__t[23] & 0x80000000) != 0) {
            operator delete(*(void **)__t);
          }
          if (sub_723EC(3u))
          {
            sub_6BAC((uint64_t)__t);
            if ((v259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v221 = &v259;
            }
            else {
              unint64_t v221 = (std::string *)v259.__r_.__value_.__r.__words[0];
            }
            if ((v259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v222 = HIBYTE(v259.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v222 = v259.__r_.__value_.__l.__size_;
            }
            sub_188FC78(__t, (uint64_t)v221, v222);
            std::stringbuf::str();
            sub_7246C((uint64_t *)&v258, 3u);
            if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v258.__r_.__value_.__l.__data_);
            }
            sub_111ECAC((uint64_t)__t);
          }
          if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v259.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v261) & 0x80000000) == 0)
            {
LABEL_372:
              if ((SHIBYTE(v275) & 0x80000000) == 0) {
                goto LABEL_373;
              }
LABEL_434:
              operator delete((void *)v274);
              if (!v195) {
                goto LABEL_263;
              }
LABEL_374:
              unint64_t v223 = sub_DBE834((uint64_t)v0[1]);
              if (*(char *)(v223 + 23) < 0)
              {
                sub_4200(&v274, *(void **)v223, *(void *)(v223 + 8));
              }
              else
              {
                long long v224 = *(_OWORD *)v223;
                uint64_t v275 = *(void *)(v223 + 16);
                long long v274 = v224;
              }
              unint64_t v225 = sub_DBE88C((uint64_t)v0[1]);
              if (*(char *)(v225 + 23) < 0)
              {
                sub_4200(__dst, *(void **)v225, *(void *)(v225 + 8));
              }
              else
              {
                long long v226 = *(_OWORD *)v225;
                uint64_t v261 = *(void *)(v225 + 16);
                *(_OWORD *)__dst = v226;
              }
              v259.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
              *(_OWORD *)&v259.__r_.__value_.__r.__words[1] = xmmword_20B8FD0;
              strcpy(v259.__r_.__value_.__l.__data_, "EV consumption prediction excluded: ");
              std::to_string(&v258, *(double *)&v308[16]);
              uint64_t v227 = std::string::append(&v258, "%");
              long long v228 = *(_OWORD *)&v227->__r_.__value_.__l.__data_;
              *(void *)&__t[16] = *((void *)&v227->__r_.__value_.__l + 2);
              *(_OWORD *)__t = v228;
              v227->__r_.__value_.__l.__size_ = 0;
              v227->__r_.__value_.__r.__words[2] = 0;
              v227->__r_.__value_.__r.__words[0] = 0;
              if (__t[23] >= 0) {
                uint64_t v229 = __t;
              }
              else {
                uint64_t v229 = *(const std::string::value_type **)__t;
              }
              if (__t[23] >= 0) {
                std::string::size_type v230 = __t[23];
              }
              else {
                std::string::size_type v230 = *(void *)&__t[8];
              }
              std::string::append(&v259, v229, v230);
              if ((__t[23] & 0x80000000) != 0) {
                operator delete(*(void **)__t);
              }
              if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v258.__r_.__value_.__l.__data_);
              }
              std::operator+<char>();
              v231 = std::string::append(&v256, "\" app_id=\"");
              long long v232 = *(_OWORD *)&v231->__r_.__value_.__l.__data_;
              v257.__r_.__value_.__r.__words[2] = v231->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v257.__r_.__value_.__l.__data_ = v232;
              v231->__r_.__value_.__l.__size_ = 0;
              v231->__r_.__value_.__r.__words[2] = 0;
              v231->__r_.__value_.__r.__words[0] = 0;
              if (v275 >= 0) {
                v233 = (const std::string::value_type *)&v274;
              }
              else {
                v233 = (const std::string::value_type *)v274;
              }
              if (v275 >= 0) {
                std::string::size_type v234 = HIBYTE(v275);
              }
              else {
                std::string::size_type v234 = *((void *)&v274 + 1);
              }
              v235 = std::string::append(&v257, v233, v234);
              long long v236 = *(_OWORD *)&v235->__r_.__value_.__l.__data_;
              v258.__r_.__value_.__r.__words[2] = v235->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v236;
              v235->__r_.__value_.__l.__size_ = 0;
              v235->__r_.__value_.__r.__words[2] = 0;
              v235->__r_.__value_.__r.__words[0] = 0;
              v237 = std::string::append(&v258, "\"");
              long long v238 = *(_OWORD *)&v237->__r_.__value_.__l.__data_;
              *(void *)&__t[16] = *((void *)&v237->__r_.__value_.__l + 2);
              *(_OWORD *)__t = v238;
              v237->__r_.__value_.__l.__size_ = 0;
              v237->__r_.__value_.__r.__words[2] = 0;
              v237->__r_.__value_.__r.__words[0] = 0;
              if (__t[23] >= 0) {
                __n128 v239 = __t;
              }
              else {
                __n128 v239 = *(const std::string::value_type **)__t;
              }
              if (__t[23] >= 0) {
                std::string::size_type v240 = __t[23];
              }
              else {
                std::string::size_type v240 = *(void *)&__t[8];
              }
              std::string::append(&v259, v239, v240);
              if ((__t[23] & 0x80000000) != 0)
              {
                operator delete(*(void **)__t);
                if ((SHIBYTE(v258.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_404:
                  if ((SHIBYTE(v257.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_405;
                  }
                  goto LABEL_438;
                }
              }
              else if ((SHIBYTE(v258.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_404;
              }
              operator delete(v258.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v257.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_405:
                if ((SHIBYTE(v256.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_406;
                }
LABEL_439:
                operator delete(v256.__r_.__value_.__l.__data_);
LABEL_406:
                sub_68EE4((uint64_t)v5);
                std::operator+<char>();
                if (__t[23] >= 0) {
                  long long v241 = __t;
                }
                else {
                  long long v241 = *(const std::string::value_type **)__t;
                }
                if (__t[23] >= 0) {
                  std::string::size_type v242 = __t[23];
                }
                else {
                  std::string::size_type v242 = *(void *)&__t[8];
                }
                std::string::append(&v259, v241, v242);
                if ((__t[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__t);
                }
                if (sub_723EC(1u))
                {
                  sub_6BAC((uint64_t)__t);
                  if ((v259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    __n128 v243 = &v259;
                  }
                  else {
                    __n128 v243 = (std::string *)v259.__r_.__value_.__r.__words[0];
                  }
                  if ((v259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v244 = HIBYTE(v259.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v244 = v259.__r_.__value_.__l.__size_;
                  }
                  sub_188FC78(__t, (uint64_t)v243, v244);
                  std::stringbuf::str();
                  sub_7246C((uint64_t *)&v258, 1u);
                  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v258.__r_.__value_.__l.__data_);
                  }
                  sub_111ECAC((uint64_t)__t);
                }
                if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v259.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v261) & 0x80000000) == 0)
                  {
LABEL_426:
                    if ((SHIBYTE(v275) & 0x80000000) == 0) {
                      goto LABEL_263;
                    }
LABEL_442:
                    operator delete((void *)v274);
                    goto LABEL_263;
                  }
                }
                else if ((SHIBYTE(v261) & 0x80000000) == 0)
                {
                  goto LABEL_426;
                }
                operator delete(__dst[0]);
                if ((SHIBYTE(v275) & 0x80000000) == 0) {
                  goto LABEL_263;
                }
                goto LABEL_442;
              }
LABEL_438:
              operator delete(v257.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v256.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_406;
              }
              goto LABEL_439;
            }
          }
          else if ((SHIBYTE(v261) & 0x80000000) == 0)
          {
            goto LABEL_372;
          }
          operator delete(__dst[0]);
          if (SHIBYTE(v275) < 0) {
            goto LABEL_434;
          }
LABEL_373:
          if (!v195) {
            goto LABEL_263;
          }
          goto LABEL_374;
        }
LABEL_431:
        operator delete(v256.__r_.__value_.__l.__data_);
        goto LABEL_352;
      }
LABEL_430:
      operator delete(v257.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v256.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_352;
      }
      goto LABEL_431;
    }
LABEL_287:
    BOOL v178 = 1;
    goto LABEL_289;
  }
LABEL_263:
  if (sub_6913C((uint64_t)v5))
  {
    uint64_t v163 = v286;
    if (v286 == v287)
    {
      unsigned int v164 = v286 + 1;
      sub_188C80C(&v286, v286 + 1);
      *(_DWORD *)(v288 + 4 * v163) = 1;
    }
    else
    {
      *(_DWORD *)(v288 + 4 * v286) = 1;
      unsigned int v164 = v163 + 1;
    }
    unsigned int v286 = v164;
  }
  if (sub_69144((uint64_t)v5))
  {
    uint64_t v165 = v286;
    if (v286 == v287)
    {
      unsigned int v166 = v286 + 1;
      sub_188C80C(&v286, v286 + 1);
      *(_DWORD *)(v288 + 4 * v165) = 2;
    }
    else
    {
      *(_DWORD *)(v288 + 4 * v286) = 2;
      unsigned int v166 = v165 + 1;
    }
    unsigned int v286 = v166;
  }
  *((void *)&v302 + 1) = sub_11C0000((uint64_t)v17);
  *(void *)&long long v302 = round(sub_72688((uint64_t)v309));
  *(unsigned char *)uint64_t v2 = 1;
  uint64_t v167 = sub_C842C4(v2 + 8, (uint64_t)&v281);
  uint64_t v168 = *((void *)&v301[2] + 1);
  *(void *)(v2 + 256) = *(void *)&v301[1];
  *(_OWORD *)(v2 + 240) = v301[0];
  memset(v301, 0, 24);
  *(_OWORD *)(v167 + 256) = *(_OWORD *)((char *)&v301[1] + 8);
  *(void *)(v2 + 280) = v168;
  memset((char *)&v301[1] + 8, 0, 24);
  long long v169 = v302;
  long long v170 = v303;
  long long v171 = v304[1];
  *(_OWORD *)(v2 + 320) = v304[0];
  *(_OWORD *)(v2 + 336) = v171;
  *(_OWORD *)(v2 + 288) = v169;
  *(_OWORD *)(v2 + 304) = v170;
  long long v172 = v305;
  long long v173 = v306;
  long long v174 = *(_OWORD *)&v308[16];
  *(_OWORD *)(v2 + 400) = *(_OWORD *)v308;
  *(_OWORD *)(v2 + 416) = v174;
  long long v175 = v307;
  *(_OWORD *)(v2 + 368) = v173;
  *(_OWORD *)(v2 + 384) = v175;
  *(_OWORD *)(v2 + 352) = v172;
  return sub_11B1868(&v281);
}

void sub_C838EC(_Unwind_Exception *a1)
{
}

void sub_C83904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a42);
  if (a34 < 0)
  {
    operator delete(a29);
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((a40 & 0x80000000) == 0)
  {
LABEL_5:
    if ((SLOBYTE(STACK[0x1817]) & 0x80000000) == 0)
    {
LABEL_10:
      sub_C8423C(&STACK[0x1880]);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete((void *)STACK[0x1800]);
    sub_C8423C(&STACK[0x1880]);
    _Unwind_Resume(a1);
  }
  operator delete(a35);
  if ((SLOBYTE(STACK[0x1817]) & 0x80000000) == 0) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

uint64_t sub_C8423C(void *a1)
{
  uint64_t v2 = a1[32];
  if (v2)
  {
    sub_C5C1FC((uint64_t)(a1 + 32), v2);
    operator delete((void *)a1[32]);
  }
  uint64_t v3 = a1[29];
  if (v3)
  {
    uint64_t v4 = a1[30];
    uint64_t v5 = (void *)a1[29];
    if (v4 != v3)
    {
      do
        uint64_t v4 = sub_11C6DFC(v4 - 64);
      while (v4 != v3);
      uint64_t v5 = (void *)a1[29];
    }
    a1[30] = v3;
    operator delete(v5);
  }

  return sub_11B1868(a1);
}

uint64_t sub_C842C4(uint64_t a1, uint64_t a2)
{
  sub_11B16A4(a1, 0, 0);
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if ((v4 & 2) != 0)
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      if (v4) {
        uint64_t v5 = (void *)*v5;
      }
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if ((v6 & 2) != 0)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        uint64_t v7 = (void *)*v7;
      }
    }
    if (v5 == v7) {
      sub_11B341C(a1, a2);
    }
    else {
      sub_11B33A4(a1, a2);
    }
  }
  return a1;
}

uint64_t sub_C84364(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 6;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58) {
    sub_2E00();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 5 > v4) {
    unint64_t v4 = v6 >> 5;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 58) {
      sub_188D718();
    }
    uint64_t v8 = (char *)operator new(v7 << 6);
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::string::size_type v9 = &v8[64 * v7];
  uint64_t v10 = sub_3CA508((uint64_t)&v8[64 * v3], a2);
  uint64_t v11 = v10 + 64;
  uint64_t v13 = (char *)*a1;
  BOOL v12 = (char *)a1[1];
  if (v12 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v11;
    a1[2] = (uint64_t)v9;
    if (!v12) {
      return v11;
    }
    goto LABEL_17;
  }
  do
  {
    v12 -= 64;
    uint64_t v10 = sub_3CA508(v10 - 64, (uint64_t)v12);
  }
  while (v12 != v13);
  int v14 = (char *)*a1;
  BOOL v12 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v11;
  a1[2] = (uint64_t)v9;
  if (v12 != v14)
  {
    do
    {
      v12 -= 64;
      sub_11C6DFC(v12);
    }
    while (v12 != v14);
    BOOL v12 = v14;
  }
  if (v12) {
LABEL_17:
  }
    operator delete(v12);
  return v11;
}

double sub_C84484()
{
  byte_25E0A5F = 1;
  word_25E0A48 = 65;
  byte_25E0A77 = 1;
  word_25E0A60 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E0B08 = 0u;
  *(_OWORD *)&qword_25E0B18 = 0u;
  dword_25E0B28 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E0B08, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E0B08, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E0B08, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E0B08, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E0A8F = 8;
  strcpy((char *)&qword_25E0A78, "any_mode");
  byte_25E0AA7 = 7;
  strcpy((char *)&dword_25E0A90, "cycling");
  byte_25E0ABF = 7;
  strcpy((char *)&dword_25E0AA8, "driving");
  byte_25E0AD7 = 7;
  strcpy((char *)&dword_25E0AC0, "walking");
  qword_25E0AE0 = 0;
  qword_25E0AE8 = 0;
  qword_25E0AD8 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E0AD8 = (uint64_t)v0;
  qword_25E0AE0 = (uint64_t)(v0 + 9);
  qword_25E0AE8 = (uint64_t)(v0 + 9);
  qword_25E0AF0 = 0;
  qword_25E0AF8 = 0;
  unk_25E0B00 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25E0AF8 = (uint64_t)(v1 + 9);
  unk_25E0B00 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E0AF0 = (uint64_t)v1;
  return result;
}

void sub_C8474C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E0B18) {
    sub_20AF050((void **)qword_25E0B18);
  }
  int v37 = (void *)xmmword_25E0B08;
  *(void *)&xmmword_25E0B08 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_C847EC()
{
  uint64_t v0 = __chkstk_darwin();
  sub_725D0((uint64_t)v2);
  v2[7696] = 0;
  *(void *)&v3[7] = 0;
  uint64_t v5 = 0;
  uint64_t v4 = 0;
  char v6 = 0;
  sub_59133C((uint64_t)&v7);
  bzero(&v8, 0x210uLL);
  sub_5AAF6C((uint64_t)&v1, *(void *)(v0 + 1744), v0 + 24);
  sub_5AB278();
}

void sub_C84AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p)
  {
    operator delete(__p);
    sub_C84D20((uint64_t)&STACK[0x2018]);
    _Unwind_Resume(a1);
  }
  sub_C84D20((uint64_t)&STACK[0x2018]);
  _Unwind_Resume(a1);
}

void sub_C84B38(_Unwind_Exception *a1)
{
  if (STACK[0x2030]) {
    sub_20AF094((uint64_t)&STACK[0x2018], (void *)STACK[0x2030], (void **)&STACK[0x2030]);
  }
  if (*(char *)(v1 + 23) < 0)
  {
    operator delete((void *)STACK[0x2018]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_C84B80(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v5 = (void **)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(a1 + 24);
    if (v7 != v6)
    {
      do
        uint64_t v7 = sub_574D4C(v7 - 7560);
      while (v7 != v6);
      uint64_t v8 = *v5;
    }
    *(void *)(a1 + 32) = v6;
    operator delete(v8);
    void *v5 = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  sub_C84D64(a1 + 48, (uint64_t)(a2 + 3));
  uint64_t v9 = *(void *)(a1 + 7608);
  if (v9)
  {
    char v10 = (void **)(a1 + 7608);
    uint64_t v11 = *(void *)(a1 + 7616);
    BOOL v12 = *(void **)(a1 + 7608);
    if (v11 != v9)
    {
      do
        uint64_t v11 = sub_3A6B94(v11 - 1120);
      while (v11 != v9);
      BOOL v12 = *v10;
    }
    *(void *)(a1 + 7616) = v9;
    operator delete(v12);
    uint64_t *v10 = 0;
    *(void *)(a1 + 7616) = 0;
    *(void *)(a1 + 7624) = 0;
  }
  *(void *)(a1 + 7608) = *((void *)a2 + 951);
  *(void *)(a1 + 7616) = *((void *)a2 + 952);
  *(void *)(a1 + 7624) = *((void *)a2 + 953);
  *((void *)a2 + 951) = 0;
  *((void *)a2 + 952) = 0;
  *((void *)a2 + 953) = 0;
  uint64_t v13 = *(void *)(a1 + 7632);
  if (v13)
  {
    int v14 = (void **)(a1 + 7632);
    uint64_t v15 = *(void *)(a1 + 7640);
    int v16 = *(void **)(a1 + 7632);
    if (v15 != v13)
    {
      do
        uint64_t v15 = sub_55BA78(v15 - 1056);
      while (v15 != v13);
      int v16 = *v14;
    }
    *(void *)(a1 + 7640) = v13;
    operator delete(v16);
    char *v14 = 0;
    *(void *)(a1 + 7640) = 0;
    *(void *)(a1 + 7648) = 0;
  }
  *(_OWORD *)(a1 + 7632) = a2[477];
  *(void *)(a1 + 7648) = *((void *)a2 + 956);
  *((void *)a2 + 956) = 0;
  a2[477] = 0u;
  return a1;
}

uint64_t sub_C84D20(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8112);
  if (v2)
  {
    *(void *)(a1 + 8120) = v2;
    operator delete(v2);
  }

  return sub_5ABDEC(a1);
}

uint64_t sub_C84D64(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = v4;
    if ((void *)v5 != v4)
    {
      do
        uint64_t v5 = sub_5752F4(v5 - 12328);
      while ((void *)v5 != v4);
      uint64_t v6 = *(void **)a1;
    }
    *(void *)(a1 + 8) = v4;
    operator delete(v6);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = (void **)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 24);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    char v10 = *(void **)(a1 + 24);
    if (v9 != v8)
    {
      do
      {
        v9 -= 176;
        sub_57523C(a1 + 40, v9);
      }
      while (v9 != v8);
      char v10 = *v7;
    }
    *(void *)(a1 + 32) = v8;
    operator delete(v10);
    void *v7 = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v12 = *(_OWORD *)(a2 + 64);
  uint64_t v13 = (void **)(a1 + 152);
  int v14 = *(char **)(a1 + 152);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v12;
  long long v16 = *(_OWORD *)(a2 + 112);
  long long v15 = *(_OWORD *)(a2 + 128);
  uint64_t v17 = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 144) = v17;
  *(_OWORD *)(a1 + 128) = v15;
  *(_OWORD *)(a1 + 112) = v16;
  *(_OWORD *)(a1 + 48) = v11;
  if (v14)
  {
    uint64_t v18 = *(char **)(a1 + 160);
    unint64_t v19 = v14;
    if (v18 != v14)
    {
      do
      {
        if (*(v18 - 32))
        {
          sub_3A6B94((uint64_t)(v18 - 1152));
          *(v18 - 32) = 0;
        }
        v18 -= 1168;
      }
      while (v18 != v14);
      unint64_t v19 = *v13;
    }
    *(void *)(a1 + 160) = v14;
    operator delete(v19);
    char *v13 = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
  }
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  uint64_t v20 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = v20;
  sub_4D90B4(a1 + 192, a2 + 192);
  sub_4D90B4(a1 + 352, a2 + 352);
  sub_4D90B4(a1 + 512, a2 + 512);
  sub_4D90B4(a1 + 672, a2 + 672);
  sub_4D90B4(a1 + 832, a2 + 832);
  uint64_t v21 = *(void *)(a1 + 992);
  if (v21)
  {
    uint64_t v22 = (void **)(a1 + 992);
    uint64_t v23 = *(void *)(a1 + 1000);
    int v24 = *(void **)(a1 + 992);
    if (v23 != v21)
    {
      do
      {
        if (*(char *)(v23 - 1) < 0) {
          operator delete(*(void **)(v23 - 24));
        }
        v23 -= 24;
      }
      while (v23 != v21);
      int v24 = *v22;
    }
    *(void *)(a1 + 1000) = v21;
    operator delete(v24);
    *uint64_t v22 = 0;
    *(void *)(a1 + 1000) = 0;
    *(void *)(a1 + 1008) = 0;
  }
  *(_OWORD *)(a1 + 992) = *(_OWORD *)(a2 + 992);
  *(void *)(a1 + 1008) = *(void *)(a2 + 1008);
  *(void *)(a2 + 992) = 0;
  *(void *)(a2 + 1000) = 0;
  *(void *)(a2 + 1008) = 0;
  sub_4D90B4(a1 + 1016, a2 + 1016);
  *(_DWORD *)(a1 + 1176) = *(_DWORD *)(a2 + 1176);
  sub_4F377C(a1 + 1184, a2 + 1184);
  *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
  char v25 = (void **)(a1 + 1232);
  if (*(char *)(a1 + 1255) < 0) {
    operator delete(*v25);
  }
  long long v26 = *(_OWORD *)(a2 + 1232);
  *(void *)(a1 + 1248) = *(void *)(a2 + 1248);
  *(_OWORD *)char v25 = v26;
  *(unsigned char *)(a2 + 1255) = 0;
  *(unsigned char *)(a2 + 1232) = 0;
  *(unsigned char *)(a1 + 1256) = *(unsigned char *)(a2 + 1256);
  int v27 = (void **)(a1 + 1264);
  if (*(char *)(a1 + 1287) < 0) {
    operator delete(*v27);
  }
  uint64_t v28 = (long long *)(a2 + 7232);
  long long v29 = *(_OWORD *)(a2 + 1264);
  *(void *)(a1 + 1280) = *(void *)(a2 + 1280);
  *(_OWORD *)int v27 = v29;
  *(unsigned char *)(a2 + 1287) = 0;
  *(unsigned char *)(a2 + 1264) = 0;
  *(unsigned char *)(a1 + 1288) = *(unsigned char *)(a2 + 1288);
  *(_DWORD *)(a1 + 1296) = *(_DWORD *)(a2 + 1296);
  sub_C853F0((void *)(a1 + 1304), a2 + 1304);
  sub_C855D4(a1 + 2392, a2 + 2392);
  uint64_t v30 = *(void **)(a1 + 7192);
  if (v30)
  {
    *(void *)(a1 + 7200) = v30;
    operator delete(v30);
    *(void *)(a1 + 7192) = 0;
    *(void *)(a1 + 7200) = 0;
    *(void *)(a1 + 7208) = 0;
  }
  *(void *)(a1 + 7192) = *(void *)(a2 + 7192);
  *(void *)(a1 + 7200) = *(void *)(a2 + 7200);
  *(void *)(a1 + 7208) = *(void *)(a2 + 7208);
  *(void *)(a2 + 7200) = 0;
  *(void *)(a2 + 7208) = 0;
  *(void *)(a2 + 7192) = 0;
  uint64_t v31 = *(void *)(a2 + 7216);
  *(_DWORD *)(a1 + 7224) = *(_DWORD *)(a2 + 7224);
  *(void *)(a1 + 7216) = v31;
  int v32 = (void **)(a1 + 7232);
  if (*(char *)(a1 + 7255) < 0) {
    operator delete(*v32);
  }
  long long v33 = *v28;
  *(void *)(a1 + 7248) = *(void *)(a2 + 7248);
  *(_OWORD *)int v32 = v33;
  *(unsigned char *)(a2 + 7255) = 0;
  *(unsigned char *)uint64_t v28 = 0;
  int v34 = (void **)(a1 + 7256);
  if (*(char *)(a1 + 7279) < 0) {
    operator delete(*v34);
  }
  long long v35 = *(_OWORD *)(a2 + 7256);
  *(void *)(a1 + 7272) = *(void *)(a2 + 7272);
  *(_OWORD *)int v34 = v35;
  *(unsigned char *)(a2 + 7279) = 0;
  *(unsigned char *)(a2 + 7256) = 0;
  sub_4F377C(a1 + 7280, a2 + 7280);
  *(void *)(a1 + 7320) = *(void *)(a2 + 7320);
  uint64_t v36 = (void **)(a1 + 7328);
  if (*(char *)(a1 + 7351) < 0) {
    operator delete(*v36);
  }
  long long v37 = *(_OWORD *)(a2 + 7328);
  *(void *)(a1 + 7344) = *(void *)(a2 + 7344);
  *(_OWORD *)uint64_t v36 = v37;
  *(unsigned char *)(a2 + 7351) = 0;
  *(unsigned char *)(a2 + 7328) = 0;
  *(unsigned char *)(a1 + 7352) = *(unsigned char *)(a2 + 7352);
  int v38 = (void **)(a1 + 7360);
  if (*(char *)(a1 + 7383) < 0) {
    operator delete(*v38);
  }
  long long v39 = *(_OWORD *)(a2 + 7360);
  *(void *)(a1 + 7376) = *(void *)(a2 + 7376);
  *(_OWORD *)int v38 = v39;
  *(unsigned char *)(a2 + 7383) = 0;
  *(unsigned char *)(a2 + 7360) = 0;
  *(unsigned char *)(a1 + 7384) = *(unsigned char *)(a2 + 7384);
  uint64_t v40 = *(void *)(a1 + 7392);
  if (v40)
  {
    double v41 = (void **)(a1 + 7392);
    uint64_t v42 = *(void *)(a1 + 7400);
    int v43 = *(void **)(a1 + 7392);
    if (v42 != v40)
    {
      do
        uint64_t v42 = sub_55BA78(v42 - 1056);
      while (v42 != v40);
      int v43 = *v41;
    }
    *(void *)(a1 + 7400) = v40;
    operator delete(v43);
    *double v41 = 0;
    *(void *)(a1 + 7400) = 0;
    *(void *)(a1 + 7408) = 0;
  }
  *(_OWORD *)(a1 + 7392) = *(_OWORD *)(a2 + 7392);
  *(void *)(a1 + 7408) = *(void *)(a2 + 7408);
  *(void *)(a2 + 7392) = 0;
  *(void *)(a2 + 7400) = 0;
  *(void *)(a2 + 7408) = 0;
  uint64_t v44 = *(void *)(a1 + 7416);
  if (v44)
  {
    uint64_t v45 = (void **)(a1 + 7416);
    uint64_t v46 = *(void *)(a1 + 7424);
    uint64_t v47 = *(void **)(a1 + 7416);
    if (v46 != v44)
    {
      do
      {
        if (*(char *)(v46 - 1) < 0) {
          operator delete(*(void **)(v46 - 24));
        }
        v46 -= 48;
      }
      while (v46 != v44);
      uint64_t v47 = *v45;
    }
    *(void *)(a1 + 7424) = v44;
    operator delete(v47);
    char *v45 = 0;
    *(void *)(a1 + 7424) = 0;
    *(void *)(a1 + 7432) = 0;
  }
  *(void *)(a1 + 7416) = *(void *)(a2 + 7416);
  *(void *)(a1 + 7424) = *(void *)(a2 + 7424);
  *(void *)(a1 + 7432) = *(void *)(a2 + 7432);
  *(void *)(a2 + 7416) = 0;
  *(void *)(a2 + 7424) = 0;
  *(void *)(a2 + 7432) = 0;
  int v48 = (void **)(a1 + 7440);
  if (*(char *)(a1 + 7463) < 0) {
    operator delete(*v48);
  }
  BOOL v49 = (long long *)(a2 + 7488);
  long long v50 = *(_OWORD *)(a2 + 7440);
  *(void *)(a1 + 7456) = *(void *)(a2 + 7456);
  *(_OWORD *)int v48 = v50;
  *(unsigned char *)(a2 + 7463) = 0;
  *(unsigned char *)(a2 + 7440) = 0;
  uint64_t v51 = (void **)(a1 + 7464);
  if (*(char *)(a1 + 7487) < 0) {
    operator delete(*v51);
  }
  long long v52 = *(_OWORD *)(a2 + 7464);
  *(void *)(a1 + 7480) = *(void *)(a2 + 7480);
  *(_OWORD *)uint64_t v51 = v52;
  *(unsigned char *)(a2 + 7487) = 0;
  *(unsigned char *)(a2 + 7464) = 0;
  uint64_t v53 = (void **)(a1 + 7488);
  if (*(char *)(a1 + 7511) < 0) {
    operator delete(*v53);
  }
  long long v54 = *v49;
  *(void *)(a1 + 7504) = *(void *)(a2 + 7504);
  *(_OWORD *)uint64_t v53 = v54;
  *(unsigned char *)(a2 + 7511) = 0;
  *(unsigned char *)BOOL v49 = 0;
  int v55 = *(void **)(a1 + 7512);
  if (v55)
  {
    *(void *)(a1 + 7520) = v55;
    operator delete(v55);
    *(void *)(a1 + 7512) = 0;
    *(void *)(a1 + 7520) = 0;
    *(void *)(a1 + 7528) = 0;
  }
  *(void *)(a1 + 7512) = *(void *)(a2 + 7512);
  *(void *)(a1 + 7520) = *(void *)(a2 + 7520);
  *(void *)(a1 + 7528) = *(void *)(a2 + 7528);
  *(void *)(a2 + 7512) = 0;
  *(void *)(a2 + 7520) = 0;
  *(void *)(a2 + 7528) = 0;
  uint64_t v56 = *(void *)(a1 + 7536);
  if (v56)
  {
    uint64_t v57 = (void **)(a1 + 7536);
    uint64_t v58 = *(void *)(a1 + 7544);
    double v59 = *(void **)(a1 + 7536);
    if (v58 != v56)
    {
      do
        uint64_t v58 = sub_3A6B94(v58 - 1120);
      while (v58 != v56);
      double v59 = *v57;
    }
    *(void *)(a1 + 7544) = v56;
    operator delete(v59);
    *uint64_t v57 = 0;
    *(void *)(a1 + 7544) = 0;
    *(void *)(a1 + 7552) = 0;
  }
  *(_OWORD *)(a1 + 7536) = *(_OWORD *)(a2 + 7536);
  *(void *)(a1 + 7552) = *(void *)(a2 + 7552);
  *(void *)(a2 + 7552) = 0;
  *(_OWORD *)(a2 + 7536) = 0u;
  return a1;
}

void *sub_C853F0(void *a1, uint64_t a2)
{
  long long v4 = (void **)*a1;
  if (*a1)
  {
    uint64_t v5 = (void **)a1[1];
    uint64_t v6 = (void **)*a1;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 3;
      }
      while (v5 != v4);
      uint64_t v6 = (void **)*a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = (void **)(a1 + 3);
  uint64_t v8 = a1[3];
  if (v8)
  {
    uint64_t v9 = a1[4];
    char v10 = (void *)a1[3];
    if (v9 != v8)
    {
      do
        uint64_t v9 = sub_4F2FF8(v9 - 496);
      while (v9 != v8);
      char v10 = *v7;
    }
    a1[4] = v8;
    operator delete(v10);
    void *v7 = 0;
    a1[4] = 0;
    a1[5] = 0;
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  sub_4D5C2C((uint64_t)(a1 + 6), a2 + 48);
  sub_4D5C2C((uint64_t)(a1 + 68), a2 + 544);
  uint64_t v11 = a1[130];
  if (v11)
  {
    long long v12 = (void **)(a1 + 130);
    uint64_t v13 = a1[131];
    int v14 = (void *)a1[130];
    if (v13 != v11)
    {
      do
        uint64_t v13 = sub_4F2FF8(v13 - 496);
      while (v13 != v11);
      int v14 = *v12;
    }
    a1[131] = v11;
    operator delete(v14);
    void *v12 = 0;
    a1[131] = 0;
    a1[132] = 0;
  }
  *((_OWORD *)a1 + 65) = *(_OWORD *)(a2 + 1040);
  a1[132] = *(void *)(a2 + 1056);
  *(void *)(a2 + 1040) = 0;
  *(void *)(a2 + 1048) = 0;
  *(void *)(a2 + 1056) = 0;
  uint64_t v15 = a1[133];
  if (v15)
  {
    long long v16 = (void **)(a1 + 133);
    uint64_t v17 = a1[134];
    uint64_t v18 = (void *)a1[133];
    if (v17 != v15)
    {
      do
        uint64_t v17 = sub_4F2FF8(v17 - 496);
      while (v17 != v15);
      uint64_t v18 = *v16;
    }
    a1[134] = v15;
    operator delete(v18);
    void *v16 = 0;
    a1[134] = 0;
    a1[135] = 0;
  }
  a1[133] = *(void *)(a2 + 1064);
  a1[134] = *(void *)(a2 + 1072);
  a1[135] = *(void *)(a2 + 1080);
  *(void *)(a2 + 1080) = 0;
  *(_OWORD *)(a2 + 1064) = 0u;
  return a1;
}

uint64_t sub_C855D4(uint64_t a1, uint64_t a2)
{
  return a1;
}

double sub_C8576C()
{
  byte_25E0B47 = 1;
  word_25E0B30 = 65;
  byte_25E0B5F = 1;
  word_25E0B48 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E0BF0 = 0u;
  *(_OWORD *)&qword_25E0C00 = 0u;
  dword_25E0C10 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E0BF0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E0BF0, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E0BF0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E0BF0, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E0B77 = 8;
  strcpy((char *)&qword_25E0B60, "any_mode");
  byte_25E0B8F = 7;
  strcpy((char *)&dword_25E0B78, "cycling");
  byte_25E0BA7 = 7;
  strcpy((char *)&dword_25E0B90, "driving");
  byte_25E0BBF = 7;
  strcpy((char *)&dword_25E0BA8, "walking");
  qword_25E0BC8 = 0;
  qword_25E0BD0 = 0;
  qword_25E0BC0 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E0BC0 = (uint64_t)v0;
  qword_25E0BC8 = (uint64_t)(v0 + 9);
  qword_25E0BD0 = (uint64_t)(v0 + 9);
  qword_25E0BD8 = 0;
  qword_25E0BE0 = 0;
  unk_25E0BE8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25E0BE0 = (uint64_t)(v1 + 9);
  unk_25E0BE8 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E0BD8 = (uint64_t)v1;
  return result;
}

void sub_C85A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E0C00) {
    sub_20AF0F8((void **)qword_25E0C00);
  }
  long long v37 = (void *)xmmword_25E0BF0;
  *(void *)&xmmword_25E0BF0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_C85AD4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v46);
  sub_E2AE20(a1, (uint64_t)v44);
  if (*(_DWORD *)sub_486CB4(*(void *)(a1 + 192)) == 1)
  {
    if (!*(unsigned char *)(a1 + 252))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    uint64_t v4 = *(void *)(a1 + 192);
    int v42 = *(_DWORD *)(a1 + 248);
    char v43 = 1;
    sub_487704(v4, (uint64_t)&v42);
  }
  sub_486CBC(*(void *)(a1 + 192));
  sub_486CCC(*(void *)(a1 + 192));
  if (*(_DWORD *)(sub_486CB4(*(void *)(a1 + 192)) + 152) == 0x7FFFFFFF)
  {
    int v5 = *(_DWORD *)(a1 + 212);
    *(_DWORD *)(sub_486CB4(*(void *)(a1 + 192)) + 152) = v5;
  }
  sub_13E6614(v34, 0, 0);
  sub_13E6614(&v39, 0, 0);
  long long v41 = 0u;
  if (*(unsigned char *)(a1 + 34))
  {
    sub_DF1664((uint64_t)__p, *(void *)(a1 + 200));
    sub_DF1668((void **)__p, a1, *(void *)(a1 + 184), (int64x2_t *)(*(void *)(a1 + 256) + 256), *(void *)(a1 + 192), (uint64_t)v31);
    if ((v35 & 2) != 0)
    {
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t v6 = (void *)(v35 & 0xFFFFFFFFFFFFFFFCLL);
      if (v35) {
        uint64_t v6 = (void *)*v6;
      }
    }
    if (((uint64_t)v31[1] & 2) != 0)
    {
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v9 = (void *)((unint64_t)v31[1] & 0xFFFFFFFFFFFFFFFCLL);
      if ((uint64_t)v31[1]) {
        uint64_t v9 = (void *)*v9;
      }
    }
    if (v6 != v9)
    {
LABEL_19:
      sub_13E8B1C((uint64_t)v34, (uint64_t)v31);
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 192);
    __p[0] = *(void **)(a1 + 200);
    sub_DEEC10((uint64_t *)__p, a1, *(void *)(a1 + 184), (int **)(*(void *)(a1 + 256) + 256), v7, (uint64_t)v31);
    if ((v35 & 2) != 0)
    {
      int v8 = 0;
    }
    else
    {
      int v8 = (void *)(v35 & 0xFFFFFFFFFFFFFFFCLL);
      if (v35) {
        int v8 = (void *)*v8;
      }
    }
    if (((uint64_t)v31[1] & 2) != 0)
    {
      char v10 = 0;
    }
    else
    {
      char v10 = (void *)((unint64_t)v31[1] & 0xFFFFFFFFFFFFFFFCLL);
      if ((uint64_t)v31[1]) {
        char v10 = (void *)*v10;
      }
    }
    if (v8 != v10) {
      goto LABEL_19;
    }
  }
  sub_13E8C18((uint64_t)v34, (uint64_t)v31);
LABEL_28:
  sub_13E6DAC(v31);
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "populate_debug_data");
  if (sub_29D62C(v44, (uint64_t)__p))
  {
    sub_54214((uint64_t)v31, a1 + 264);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
  }
  else
  {
    *(_OWORD *)uint64_t v31 = 0u;
    long long v32 = 0u;
    int v33 = 1065353216;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
  }
  operator delete(__p[0]);
LABEL_30:
  sub_3CB9F8(*(void **)(a1 + 200), (long long **)(a1 + 224), (uint64_t)v31);
  if (*(unsigned char *)(a1 + 168))
  {
    sub_E2B65C(*(_DWORD *)(a1 + 208), (uint64_t)v31);
    sub_58E3C((uint64_t)v31);
    v36 |= 4u;
    int v11 = (uint64_t *)(v35 & 0xFFFFFFFFFFFFFFFCLL);
    if (v35) {
      int v11 = (uint64_t *)*v11;
    }
    long long v12 = sub_1880F84(v38, v11);
    char v13 = v12;
    if (*((char *)v12 + 23) < 0) {
      operator delete((void *)*v12);
    }
    long long v14 = *(_OWORD *)__p;
    __n128 v13[2] = (uint64_t)__p[2];
    *(_OWORD *)char v13 = v14;
  }
  sub_E2B540(*(void *)(a1 + 192), (uint64_t)v34);
  sub_13E8B1C((uint64_t)&v39, (uint64_t)v34);
  uint64_t v15 = sub_1883FB0(v40, dword_254E9F0, 11, (uint64_t)&off_252C740, 0);
  *(_DWORD *)(v15 + 16) |= 8u;
  uint64_t v16 = *(void *)(v15 + 72);
  if (!v16)
  {
    uint64_t v17 = *(void *)(v15 + 8);
    uint64_t v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
    if (v17) {
      uint64_t v18 = (void *)*v18;
    }
    sub_11BEE5C((uint64_t)v18);
    *(void *)(v15 + 72) = v16;
  }
  sub_11B33A4(v16, *(void *)(a1 + 256));
  if (*(void *)(*(void *)(a1 + 256) + 232) != *(void *)(*(void *)(a1 + 256) + 240))
  {
    uint64_t v19 = sub_1883FB0(v40, dword_254EA00, 11, (uint64_t)&off_252D1C8, 0);
    sub_11C7620(v19, *(void *)(*(void *)(a1 + 256) + 232));
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "return_annotated_response");
  BOOL v20 = sub_29D62C(v44, (uint64_t)__p);
  BOOL v21 = v20;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (!v21) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v20) {
LABEL_48:
  }
    sub_13E8B1C((uint64_t)v34, (uint64_t)&v39);
LABEL_49:
  if (*(char *)((v37 & 0xFFFFFFFFFFFFFFFELL) + 23) < 0) {
    uint64_t v22 = *(void *)((v37 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else {
    uint64_t v22 = *(unsigned __int8 *)((v37 & 0xFFFFFFFFFFFFFFFELL) + 23);
  }
  *((void *)&v41 + 1) = v22;
  *(void *)&long long v41 = vcvtad_u64_f64(sub_72688((uint64_t)v46));
  *(unsigned char *)a2 = 1;
  sub_C86114(a2 + 8, (uint64_t)v34);
  sub_C86114(a2 + 264, (uint64_t)&v39);
  *(_OWORD *)(a2 + 520) = v41;
  uint64_t v23 = (void **)v32;
  if ((void)v32)
  {
    do
    {
      int v27 = (void **)*v23;
      sub_55198((uint64_t)(v23 + 5));
      if (*((char *)v23 + 39) < 0) {
        operator delete(v23[2]);
      }
      operator delete(v23);
      uint64_t v23 = v27;
    }
    while (v27);
  }
  int v24 = v31[0];
  v31[0] = 0;
  if (v24) {
    operator delete(v24);
  }
  sub_13E6DAC(&v39);
  sub_13E6DAC(v34);
  char v25 = v45;
  if (v45)
  {
    do
    {
      uint64_t v28 = (void **)*v25;
      sub_55198((uint64_t)(v25 + 5));
      if (*((char *)v25 + 39) < 0) {
        operator delete(v25[2]);
      }
      operator delete(v25);
      char v25 = v28;
    }
    while (v28);
  }
  long long v26 = (void *)v44[0];
  v44[0] = 0;
  if (v26) {
    operator delete(v26);
  }
}

void sub_C86048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_13E6DAC(v49);
  sub_13E6DAC(&a49);
  sub_5450C(v50 - 112);
  _Unwind_Resume(a1);
}

void sub_C86100(_Unwind_Exception *a1)
{
  sub_5450C(v1 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_C86114(uint64_t a1, uint64_t a2)
{
  sub_13E6614(a1, 0, 0);
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if ((v4 & 2) != 0)
    {
      int v5 = 0;
    }
    else
    {
      int v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      if (v4) {
        int v5 = (void *)*v5;
      }
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if ((v6 & 2) != 0)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        uint64_t v7 = (void *)*v7;
      }
    }
    if (v5 == v7) {
      sub_13E8C18(a1, a2);
    }
    else {
      sub_13E8B1C(a1, a2);
    }
  }
  return a1;
}

double sub_C861B4()
{
  byte_25E0C2F = 1;
  word_25E0C18 = 65;
  byte_25E0C47 = 1;
  word_25E0C30 = 65;
  byte_25E0C5F = 8;
  strcpy((char *)&qword_25E0C48, "any_mode");
  byte_25E0C77 = 7;
  strcpy((char *)&dword_25E0C60, "cycling");
  byte_25E0C8F = 7;
  strcpy((char *)&dword_25E0C78, "driving");
  byte_25E0CA7 = 7;
  strcpy((char *)&dword_25E0C90, "walking");
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E0CD8 = 0u;
  *(_OWORD *)&qword_25E0CE8 = 0u;
  dword_25E0CF8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E0CD8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E0CD8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E0CD8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E0CD8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_25E0CB0 = 0;
  qword_25E0CB8 = 0;
  qword_25E0CA8 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E0CA8 = (uint64_t)v0;
  qword_25E0CB0 = (uint64_t)(v0 + 9);
  qword_25E0CB8 = (uint64_t)(v0 + 9);
  qword_25E0CC0 = 0;
  qword_25E0CC8 = 0;
  unk_25E0CD0 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25E0CC8 = (uint64_t)(v1 + 9);
  unk_25E0CD0 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E0CC0 = (uint64_t)v1;
  return result;
}

void sub_C86470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E0CE8) {
    sub_20AF13C((void **)qword_25E0CE8);
  }
  uint64_t v37 = (void *)xmmword_25E0CD8;
  *(void *)&xmmword_25E0CD8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_C86510()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  sub_725D0((uint64_t)v15);
  long long v13 = 0u;
  memset(v14, 0, 21);
  sub_1059230((uint64_t)v9, *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(unsigned __int8 *)(v0 + 21), *(unsigned char *)(v0 + 20));
  sub_1059234((uint64_t)v9, *(void *)v0, *(void *)(v0 + 8), (uint64_t *)&v7);
  long long v3 = v7;
  uint64_t v4 = v8;
  long long v13 = v7;
  *(void *)int v14 = v8;
  *(void *)&v14[8] = vcvtad_u64_f64(sub_72688((uint64_t)v15));
  int v5 = sub_105B724((uint64_t)v9);
  if (v5 < 0) {
    char v6 = -5;
  }
  else {
    char v6 = 5;
  }
  *(_DWORD *)&v14[16] = v5 / 10
                      + (((103 * (char)(v6 + v5 % 10)) >> 15) & 1)
                      + ((103 * (char)(v6 + v5 % 10)) >> 10);
  v14[20] = ((unint64_t)sub_105B724((uint64_t)v9) >> 32) & 1;
  *(unsigned char *)uint64_t v2 = 1;
  *(_OWORD *)(v2 + 8) = v3;
  *(void *)(v2 + 24) = v4;
  *(_OWORD *)(v2 + 32) = *(_OWORD *)&v14[8];
  sub_3A6230(v12);
  if (__p)
  {
    int v11 = __p;
    operator delete(__p);
  }
}

void sub_C86674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_C866AC((uint64_t *)va);
  sub_5AB1B0((void ***)(v5 - 128));
  _Unwind_Resume(a1);
}

void sub_C86698(_Unwind_Exception *a1)
{
  sub_5AB1B0((void ***)(v1 - 128));
  _Unwind_Resume(a1);
}

void *sub_C866AC(void *a1)
{
  sub_3A6230(a1 + 85);
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_C866E8()
{
  unk_25E0D17 = 16641;
  word_25E0D00 = 65;
  byte_25E0D2F = 1;
  byte_25E0D19 = 0;
}

void sub_C86710(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v44);
  *(_OWORD *)int v42 = 0u;
  long long v43 = 0u;
  int v4 = *(_DWORD *)(a1 + 24);
  uint64_t v34 = a1 + 24;
  uint64_t v35 = *(uint64_t **)(a1 + 136);
  uint64_t v5 = (uint64_t *)sub_374EF4(v35);
  uint64_t v32 = a2;
  sub_688A04(v5, 3u, v4, &v40);
  char v6 = *(uint64_t **)a1;
  long long v7 = *(uint64_t **)(a1 + 8);
  if (*(uint64_t **)a1 != v7)
  {
    uint64_t v8 = "{RouteName}";
    int v33 = *(uint64_t **)(a1 + 8);
    while (1)
    {
      uint64_t v9 = (char *)v42[1];
      if (v42[1] >= (void *)v43)
      {
        char v10 = (char *)sub_C86DEC((uint64_t *)v42, v6);
      }
      else
      {
        sub_C86F80((uint64_t)v42[1], v6);
        char v10 = v9 + 376;
      }
      v42[1] = v10;
      int v11 = (long long **)(v10 - 376);
      if (!sub_45FB38(v6))
      {
        uint64_t v12 = sub_45FB28(v6, 0);
        sub_C87104(v12, v35, v34, &v45);
        std::string::size_type size = v45.__r_.__value_.__l.__size_;
        int v14 = (long long *)v45.__r_.__value_.__r.__words[0];
        if (v45.__r_.__value_.__r.__words[0] != v45.__r_.__value_.__l.__size_)
        {
          uint64_t v15 = v8;
          uint64_t v16 = (char **)(v10 - 368);
          uint64_t v17 = (char *)*((void *)v10 - 46);
          do
          {
            if ((unint64_t)v17 >= *((void *)v10 - 45))
            {
              uint64_t v17 = (char *)sub_5B09D8((int64x2_t *)(v10 - 376), v14);
            }
            else
            {
              sub_4AA8E0(v17, v14);
              v17 += 152;
              void *v16 = v17;
            }
            void *v16 = v17;
            v14 += 11;
          }
          while (v14 != (long long *)size);
          std::string::size_type size = v45.__r_.__value_.__r.__words[0];
          uint64_t v8 = v15;
          long long v7 = v33;
        }
        if (size) {
          break;
        }
      }
LABEL_34:
      if (*v11 != *((long long **)v10 - 46))
      {
        sub_C86CD0(&v45, v8, *v11);
        sub_2AAA4((uint64_t)v38, (uint64_t)&v45, 1);
        if (v47 < 0)
        {
          operator delete(v46);
          if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_37;
          }
        }
        else if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_37;
        }
        operator delete(v45.__r_.__value_.__l.__data_);
LABEL_37:
        std::string __p = operator new(0x20uLL);
        long long v37 = xmmword_20B91A0;
        strcpy((char *)__p, "Proactive_Driving_RouteName");
        sub_6581AC((uint64_t)&__p, (uint64_t)v38, v40, 0, &v45);
        if (SHIBYTE(v37) < 0)
        {
          operator delete(__p);
          unint64_t v21 = *((void *)v10 - 5);
          if (v21 < *((void *)v10 - 4)) {
            goto LABEL_39;
          }
        }
        else
        {
          unint64_t v21 = *((void *)v10 - 5);
          if (v21 < *((void *)v10 - 4))
          {
LABEL_39:
            sub_5F3D48(v21, (uint64_t)&v45);
            uint64_t v22 = v21 + 160;
            *((void *)v10 - 5) = v21 + 160;
LABEL_44:
            *((void *)v10 - 5) = v22;
            if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              uint64_t v23 = v39;
              if (v39) {
                goto LABEL_51;
              }
              goto LABEL_54;
            }
            operator delete(v45.__r_.__value_.__l.__data_);
            uint64_t v23 = v39;
            if (!v39)
            {
LABEL_54:
              char v25 = v38[0];
              v38[0] = 0;
              if (v25) {
                operator delete(v25);
              }
              goto LABEL_3;
            }
            while (1)
            {
LABEL_51:
              int v24 = *(char **)v23;
              if (v23[63] < 0)
              {
                operator delete(*((void **)v23 + 5));
                if ((v23[39] & 0x80000000) == 0) {
                  goto LABEL_50;
                }
LABEL_53:
                operator delete(*((void **)v23 + 2));
                operator delete(v23);
                uint64_t v23 = v24;
                if (!v24) {
                  goto LABEL_54;
                }
              }
              else
              {
                if (v23[39] < 0) {
                  goto LABEL_53;
                }
LABEL_50:
                operator delete(v23);
                uint64_t v23 = v24;
                if (!v24) {
                  goto LABEL_54;
                }
              }
            }
          }
        }
        uint64_t v22 = sub_5B10A0((uint64_t *)v10 - 6, (uint64_t)&v45);
        goto LABEL_44;
      }
LABEL_3:
      v6 += 15;
      if (v6 == v7) {
        goto LABEL_56;
      }
    }
    std::string::size_type v18 = v45.__r_.__value_.__l.__size_;
    uint64_t v19 = (void *)size;
    if (v45.__r_.__value_.__l.__size_ == size)
    {
LABEL_33:
      v45.__r_.__value_.__l.__size_ = size;
      operator delete(v19);
      goto LABEL_34;
    }
    while (1)
    {
      BOOL v20 = *(void **)(v18 - 24);
      if (v20)
      {
        *(void *)(v18 - 16) = v20;
        operator delete(v20);
      }
      if (*(char *)(v18 - 25) < 0)
      {
        operator delete(*(void **)(v18 - 48));
        if (*(char *)(v18 - 57) < 0) {
          goto LABEL_28;
        }
LABEL_24:
        if ((*(char *)(v18 - 81) & 0x80000000) == 0) {
          goto LABEL_25;
        }
LABEL_29:
        operator delete(*(void **)(v18 - 104));
        if (*(char *)(v18 - 121) < 0) {
          goto LABEL_18;
        }
LABEL_30:
        if ((*(char *)(v18 - 153) & 0x80000000) == 0) {
          goto LABEL_19;
        }
LABEL_31:
        operator delete(*(void **)(v18 - 176));
        v18 -= 176;
        if (v18 == size)
        {
LABEL_32:
          uint64_t v19 = (void *)v45.__r_.__value_.__r.__words[0];
          goto LABEL_33;
        }
      }
      else
      {
        if ((*(char *)(v18 - 57) & 0x80000000) == 0) {
          goto LABEL_24;
        }
LABEL_28:
        operator delete(*(void **)(v18 - 80));
        if (*(char *)(v18 - 81) < 0) {
          goto LABEL_29;
        }
LABEL_25:
        if ((*(char *)(v18 - 121) & 0x80000000) == 0) {
          goto LABEL_30;
        }
LABEL_18:
        operator delete(*(void **)(v18 - 144));
        if (*(char *)(v18 - 153) < 0) {
          goto LABEL_31;
        }
LABEL_19:
        v18 -= 176;
        if (v18 == size) {
          goto LABEL_32;
        }
      }
    }
  }
LABEL_56:
  unint64_t v26 = vcvtad_u64_f64(sub_72688((uint64_t)v44));
  *(unsigned char *)uint64_t v32 = 1;
  *(_OWORD *)(v32 + 8) = *(_OWORD *)v42;
  uint64_t v27 = v43;
  v42[0] = 0;
  v42[1] = 0;
  *(void *)&long long v43 = 0;
  *((void *)&v43 + 1) = v26;
  *(void *)(v32 + 24) = v27;
  *(void *)(v32 + 32) = v26;
  uint64_t v28 = v41;
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  long long v29 = (uint64_t *)v42[0];
  if (v42[0])
  {
    uint64_t v30 = (uint64_t *)v42[1];
    uint64_t v31 = v42[0];
    if (v42[1] != v42[0])
    {
      do
        uint64_t v30 = sub_5ADCA8(v30 - 47);
      while (v30 != v29);
      uint64_t v31 = v42[0];
    }
    v42[1] = v29;
    operator delete(v31);
  }
}

void sub_C86BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_5ADA30((void **)va);
  _Unwind_Resume(a1);
}

void sub_C86BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_5ADA30((void **)va);
  _Unwind_Resume(a1);
}

void sub_C86BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  if (*(char *)(v10 - 121) < 0) {
    operator delete(*(void **)(v10 - 144));
  }
  sub_50828((uint64_t)va);
  sub_14A84((uint64_t)va1);
  sub_5ADA30((void **)va2);
  _Unwind_Resume(a1);
}

void sub_C86C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va1, a15);
  va_start(va, a15);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  sub_1B23C(v15 - 144);
  sub_14A84((uint64_t)va);
  sub_5ADA30((void **)va1);
  _Unwind_Resume(a1);
}

void sub_C86C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va1, a15);
  va_start(va, a15);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_14A84((uint64_t *)va);
  sub_5ADA30(va1);
  _Unwind_Resume(a1);
}

void sub_C86CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va1, a15);
  va_start(va, a15);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  sub_591648((void **)(v15 - 144));
  sub_14A84((uint64_t)va);
  sub_5ADA30((void **)va1);
  _Unwind_Resume(a1);
}

void *sub_C86CD0(void *a1, char *__s, long long *a3)
{
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v12 = v6 | 7;
    }
    uint64_t v13 = v12 + 1;
    uint64_t v8 = operator new(v12 + 1);
    a1[1] = v7;
    a1[2] = v13 | 0x8000000000000000;
    *a1 = v8;
LABEL_9:
    memmove(v8, __s, v7);
    *((unsigned char *)v8 + v7) = 0;
    uint64_t v9 = (char *)(a1 + 3);
    if ((*((char *)a3 + 23) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  *((unsigned char *)a1 + 23) = v6;
  uint64_t v8 = a1;
  if (v6) {
    goto LABEL_9;
  }
  *(unsigned char *)a1 = 0;
  uint64_t v9 = (char *)(a1 + 3);
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
LABEL_5:
    long long v10 = *a3;
    *((void *)v9 + 2) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v9 = v10;
    return a1;
  }
LABEL_10:
  sub_4200(v9, *(void **)a3, *((void *)a3 + 1));
  return a1;
}

void sub_C86DD0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C86DEC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = 0x51B3BEA3677D46CFLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0xAE4C415C9882B9) {
    sub_2E00();
  }
  if (0xA3677D46CEFA8D9ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xA3677D46CEFA8D9ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x51B3BEA3677D46CFLL * ((a1[2] - *a1) >> 3)) >= 0x572620AE4C415CLL) {
    unint64_t v6 = 0xAE4C415C9882B9;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAE4C415C9882B9) {
      sub_188D718();
    }
    size_t v7 = (char *)operator new(376 * v6);
  }
  else
  {
    size_t v7 = 0;
  }
  uint64_t v14 = (uint64_t)&v7[376 * v3];
  uint64_t v15 = &v7[376 * v6];
  sub_C86F80(v14, a2);
  uint64_t v8 = v14;
  uint64_t v9 = v14 + 376;
  int v11 = (uint64_t *)*a1;
  long long v10 = (uint64_t *)a1[1];
  if (v10 == (uint64_t *)*a1)
  {
    *a1 = v14;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
  }
  else
  {
    do
    {
      v10 -= 47;
      sub_5AE1FC(v8 - 376, (uint64_t)v10);
    }
    while (v10 != v11);
    uint64_t v12 = (uint64_t *)*a1;
    long long v10 = (uint64_t *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
    if (v10 != v12)
    {
      do
      {
        v10 -= 47;
        sub_5ADCA8(v10);
      }
      while (v10 != v12);
      long long v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 376;
}

void sub_C86F6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5AE1A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_C86F80(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = sub_45FD6C(a2);
  *(void *)(a1 + 32) = 0x8000000080000000;
  *(void *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 40) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)&long long v5 = 0x8000000080000000;
  *((void *)&v5 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = v5;
  *(_OWORD *)(a1 + 304) = v5;
  *(_DWORD *)(a1 + 320) = 5;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  if (!sub_45FB38(a2))
  {
    *(_DWORD *)(a1 + 32) = sub_45FE10((uint64_t)a2);
    *(_DWORD *)(a1 + 36) = sub_47EDA8((uint64_t)a2, 0, 3);
    *(_DWORD *)(a1 + 296) = sub_47EDA8((uint64_t)a2, 1, 3);
    *(_DWORD *)(a1 + 300) = sub_47EDA8((uint64_t)a2, 2, 3);
    *(_DWORD *)(a1 + 304) = sub_47EDA8((uint64_t)a2, 3, 3);
    *(_DWORD *)(a1 + 308) = sub_47EDA8((uint64_t)a2, 4, 3);
    *(_DWORD *)(a1 + 312) = sub_47EDA8((uint64_t)a2, 5, 3);
  }
  return a1;
}

void sub_C870A8(_Unwind_Exception *a1)
{
  sub_50E790((void **)(v2 + 320));
  sub_59213C(v3);
  sub_3B0290((void *)v2);
  sub_59241C(v1);
  _Unwind_Resume(a1);
}

void sub_C870F0(_Unwind_Exception *a1)
{
  sub_59241C(v1);
  _Unwind_Resume(a1);
}

void sub_C87104(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  std::string __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  size_t v7 = sub_64CF24((uint64_t *)&__p, a1);
  uint64_t v13 = v7;
  sub_739FC0((uint64_t)(v7 - 12328), a2);
  sub_73A360((int64x2_t *)(v7 - 12328), a2, a3);
  sub_79A2EC(v11, (uint64_t)a2, a3);
  sub_79A460((uint64_t)v11, &__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_59888C((uint64_t)a4, *((void *)v7 - 1402), *((void *)v7 - 1401), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)v7 - 1401) - *((void *)v7 - 1402)) >> 4));
  uint64_t v8 = (char *)__p;
  if (__p)
  {
    uint64_t v9 = (uint64_t)v13;
    long long v10 = __p;
    if (v13 != __p)
    {
      do
        uint64_t v9 = sub_5752F4(v9 - 12328);
      while ((char *)v9 != v8);
      long long v10 = __p;
    }
    uint64_t v13 = v8;
    operator delete(v10);
  }
}

void sub_C87218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5916B4((void **)va);
  _Unwind_Resume(a1);
}

void sub_C8722C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5916B4((void **)va);
  _Unwind_Resume(a1);
}

void sub_C87240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5916B4((void **)va);
  _Unwind_Resume(a1);
}

double sub_C87254()
{
  byte_25E0D47 = 1;
  word_25E0D30 = 65;
  byte_25E0D5F = 1;
  word_25E0D48 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E0DF0 = 0u;
  *(_OWORD *)&qword_25E0E00 = 0u;
  dword_25E0E10 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E0DF0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E0DF0, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E0DF0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E0DF0, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E0D77 = 8;
  strcpy((char *)&qword_25E0D60, "any_mode");
  byte_25E0D8F = 7;
  strcpy((char *)&dword_25E0D78, "cycling");
  byte_25E0DA7 = 7;
  strcpy((char *)&dword_25E0D90, "driving");
  byte_25E0DBF = 7;
  strcpy((char *)&dword_25E0DA8, "walking");
  qword_25E0DC8 = 0;
  qword_25E0DD0 = 0;
  qword_25E0DC0 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E0DC0 = (uint64_t)v0;
  qword_25E0DC8 = (uint64_t)(v0 + 9);
  qword_25E0DD0 = (uint64_t)(v0 + 9);
  qword_25E0DD8 = 0;
  qword_25E0DE0 = 0;
  unk_25E0DE8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25E0DE0 = (uint64_t)(v1 + 9);
  unk_25E0DE8 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E0DD8 = (uint64_t)v1;
  return result;
}

void sub_C8751C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E0E00) {
    sub_20AF180((void **)qword_25E0E00);
  }
  long long v37 = (void *)xmmword_25E0DF0;
  *(void *)&xmmword_25E0DF0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

__n128 sub_C875BC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v13);
  long long v11 = 0u;
  long long v12 = 0u;
  sub_5AC890((uint64_t)v10, *(void *)(a1 + 136));
  sub_5AC894(v10, (uint64_t **)a1, (int *)(a1 + 24), (uint64_t *)&v8);
  uint64_t v4 = v9;
  __n128 v7 = v8;
  unint64_t v5 = vcvtad_u64_f64(sub_72688((uint64_t)v13));
  *(unsigned char *)a2 = 1;
  __n128 result = v7;
  *(__n128 *)(a2 + 8) = v7;
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = v5;
  return result;
}

void sub_C87644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_5ADA30((void **)va);
  _Unwind_Resume(a1);
}

void sub_C87658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_5ADA30((void **)va);
  _Unwind_Resume(a1);
}

void sub_C8766C()
{
  byte_25E0E2F = 1;
  word_25E0E18 = 65;
  byte_25E0E47 = 1;
  word_25E0E30 = 65;
  char v1 = 7;
  strcpy((char *)v0, "UNKNOWN");
  int v2 = 0;
  char v4 = 14;
  strcpy((char *)v3, "ROUTES_THROUGH");
  int v5 = 1;
  char v7 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v8 = 3;
  char v10 = 11;
  strcpy((char *)v9, "ROUTES_FROM");
  int v11 = 2;
  xmmword_25E0EA8 = 0u;
  *(_OWORD *)&qword_25E0EB8 = 0u;
  dword_25E0EC8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E0EA8, (uint64_t)v0, (uint64_t)v0);
  sub_3A6EF0((uint64_t)&xmmword_25E0EA8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E0EA8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E0EA8, (uint64_t)v9, (uint64_t)v9);
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v3[0]);
      if ((v1 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v0[0]);
      goto LABEL_5;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v4 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v1 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E0E5F = 8;
  strcpy((char *)&qword_25E0E48, "any_mode");
  byte_25E0E77 = 7;
  strcpy((char *)&dword_25E0E60, "cycling");
  byte_25E0E8F = 7;
  strcpy((char *)&dword_25E0E78, "driving");
  byte_25E0EA7 = 7;
  strcpy((char *)&dword_25E0E90, "walking");
}

void sub_C878C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E0EB8) {
    sub_20AF1C4((void **)qword_25E0EB8);
  }
  long long v37 = (void *)xmmword_25E0EA8;
  *(void *)&xmmword_25E0EA8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_C87968@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v13);
  sub_13F1D90(v9, 0, 0);
  unint64_t v11 = 0;
  sub_DF5244((uint64_t)&v12, (uint64_t *)a1, (void *)(a1 + 24), a1 + 48, (unsigned char *)(a1 + 424), (uint64_t)v7);
  if ((v10 & 2) != 0)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
    if (v10) {
      char v4 = (void *)*v4;
    }
  }
  if ((v8 & 2) != 0)
  {
    int v5 = 0;
  }
  else
  {
    int v5 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
    if (v8) {
      int v5 = (void *)*v5;
    }
  }
  if (v4 == v5) {
    sub_13F3678((uint64_t)v9, (uint64_t)v7);
  }
  else {
    sub_13F3580((uint64_t)v9, (uint64_t)v7);
  }
  sub_13F22FC(v7);
  unint64_t v11 = vcvtad_u64_f64(sub_72688((uint64_t)v13));
  *(unsigned char *)a2 = 1;
  sub_C5EEF0(a2 + 8, (uint64_t)v9);
  *(void *)(a2 + 176) = v11;
  return sub_13F22FC(v9);
}

void sub_C87A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_C87A84()
{
  byte_25E0EE7 = 1;
  word_25E0ED0 = 65;
  byte_25E0EFF = 1;
  word_25E0EE8 = 65;
  char v1 = 7;
  strcpy((char *)v0, "UNKNOWN");
  int v2 = 0;
  char v4 = 14;
  strcpy((char *)v3, "ROUTES_THROUGH");
  int v5 = 1;
  char v7 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v8 = 3;
  char v10 = 11;
  strcpy((char *)v9, "ROUTES_FROM");
  int v11 = 2;
  xmmword_25E0F60 = 0u;
  *(_OWORD *)&qword_25E0F70 = 0u;
  dword_25E0F80 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E0F60, (uint64_t)v0, (uint64_t)v0);
  sub_3A6EF0((uint64_t)&xmmword_25E0F60, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E0F60, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E0F60, (uint64_t)v9, (uint64_t)v9);
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v3[0]);
      if ((v1 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v0[0]);
      goto LABEL_5;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v4 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v1 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E0F17 = 8;
  strcpy((char *)&qword_25E0F00, "any_mode");
  byte_25E0F2F = 7;
  strcpy((char *)&dword_25E0F18, "cycling");
  byte_25E0F47 = 7;
  strcpy((char *)&dword_25E0F30, "driving");
  byte_25E0F5F = 7;
  strcpy((char *)&dword_25E0F48, "walking");
}

void sub_C87CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E0F70) {
    sub_20AF208((void **)qword_25E0F70);
  }
  long long v37 = (void *)xmmword_25E0F60;
  *(void *)&xmmword_25E0F60 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_C87D80(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v61);
  *(unsigned char *)a2 = 1;
  *(_OWORD *)(a2 + 8) = 0u;
  int v38 = (void ****)(a2 + 8);
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(void *)(a2 + 56) = 0;
  char v4 = *(uint64_t **)(a1 + 40);
  v62[23] = 8;
  strcpy(v62, "standard");
  uint64_t v40 = a2;
  sub_EE30A8(v46, v4, (uint64_t)v62);
  if ((v62[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v62);
    uint64_t v5 = **(void **)a1;
    uint64_t v39 = *(void *)(*(void *)a1 + 8);
    if (v5 == v39) {
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v5 = **(void **)a1;
    uint64_t v39 = *(void *)(*(void *)a1 + 8);
    if (v5 == v39) {
      goto LABEL_58;
    }
  }
  do
  {
    v44[0] = 0;
    v44[1] = 0;
    std::string v45 = 0;
    uint64_t v7 = sub_40EFE8(v5);
    uint64_t v41 = v5;
    for (uint64_t i = sub_52058(v5); v7 != i; v7 += 48)
    {
      while (1)
      {
        sub_EE30AC((uint64_t)v46, v7, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), (uint64_t)__p);
        uint64_t v9 = (char *)v44[1];
        char v10 = v45;
        if (v44[1] >= v45) {
          break;
        }
        *(void *)v44[1] = 0;
        *((void *)v9 + 1) = 0;
        *((void *)v9 + 2) = 0;
        *(_OWORD *)uint64_t v9 = *(_OWORD *)__p;
        *((void *)v9 + 2) = v43;
        v44[1] = v9 + 24;
        v7 += 48;
        if (v7 == i) {
          goto LABEL_55;
        }
      }
      int v11 = (char *)v44[0];
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v44[1] - (char *)v44[0]) >> 3);
      unint64_t v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_2E00();
      }
      if (0x5555555555555556 * ((v45 - (char *)v44[0]) >> 3) > v13) {
        unint64_t v13 = 0x5555555555555556 * ((v45 - (char *)v44[0]) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v45 - (char *)v44[0]) >> 3) >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v13;
      }
      uint64_t v64 = (void **)&v45;
      if (v14)
      {
        if (v14 > 0xAAAAAAAAAAAAAAALL) {
          sub_188D718();
        }
        uint64_t v15 = (char *)operator new(24 * v14);
      }
      else
      {
        uint64_t v15 = 0;
      }
      uint64_t v16 = &v15[24 * v12];
      *(_OWORD *)uint64_t v16 = *(_OWORD *)__p;
      *((void *)v16 + 2) = v43;
      uint64_t v17 = &v15[24 * v14];
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v43 = 0;
      uint64_t v18 = v16 + 24;
      *(void *)&v62[16] = v16 + 24;
      uint64_t v63 = v17;
      if (v9 == v11)
      {
        int64x2_t v20 = vdupq_n_s64((unint64_t)v9);
      }
      else
      {
        do
        {
          *((void *)v16 - 3) = 0;
          *((void *)v16 - 2) = 0;
          v16 -= 24;
          *((void *)v16 + 2) = 0;
          long long v19 = *(_OWORD *)(v9 - 24);
          v9 -= 24;
          *(_OWORD *)uint64_t v16 = v19;
          *((void *)v16 + 2) = *((void *)v9 + 2);
          *(void *)uint64_t v9 = 0;
          *((void *)v9 + 1) = 0;
          *((void *)v9 + 2) = 0;
        }
        while (v9 != v11);
        int64x2_t v20 = *(int64x2_t *)v44;
        uint64_t v18 = *(void **)&v62[16];
        uint64_t v17 = v63;
        char v10 = v45;
      }
      v44[0] = v16;
      v44[1] = v18;
      *(int64x2_t *)&v62[8] = v20;
      std::string v45 = v17;
      uint64_t v63 = v10;
      *(void *)BOOL v62 = v20.i64[0];
      sub_C8AEE8((uint64_t)v62, (void **)v20.i64[0]);
      if (*(void *)v62) {
        operator delete(*(void **)v62);
      }
      unint64_t v21 = (char *)__p[0];
      v44[1] = v18;
      if (__p[0])
      {
        uint64_t v22 = __p[0];
        if (__p[1] != __p[0])
        {
          uint64_t v23 = (char *)__p[1] - 128;
          do
          {
            char v25 = (void *)*((void *)v23 + 9);
            if (v25)
            {
              *((void *)v23 + 10) = v25;
              operator delete(v25);
            }
            unint64_t v26 = (void *)*((void *)v23 + 6);
            if (v26)
            {
              *((void *)v23 + 7) = v26;
              operator delete(v26);
            }
            uint64_t v27 = (void *)*((void *)v23 + 3);
            if (v27)
            {
              *((void *)v23 + 4) = v27;
              operator delete(v27);
            }
            uint64_t v28 = *(void **)v23;
            if (*(void *)v23)
            {
              *((void *)v23 + 1) = v28;
              operator delete(v28);
            }
            long long v29 = (void *)*((void *)v23 - 3);
            if (v29)
            {
              *((void *)v23 - 2) = v29;
              operator delete(v29);
            }
            uint64_t v30 = (void *)*((void *)v23 - 6);
            if (v30)
            {
              *((void *)v23 - 5) = v30;
              operator delete(v30);
            }
            uint64_t v31 = (void *)*((void *)v23 - 9);
            if (v31)
            {
              *((void *)v23 - 8) = v31;
              operator delete(v31);
            }
            uint64_t v32 = (void *)*((void *)v23 - 12);
            if (v32)
            {
              *((void *)v23 - 11) = v32;
              operator delete(v32);
            }
            int v33 = (void *)*((void *)v23 - 15);
            if (v33)
            {
              *((void *)v23 - 14) = v33;
              operator delete(v33);
            }
            uint64_t v34 = (void *)*((void *)v23 - 18);
            if (v34)
            {
              *((void *)v23 - 17) = v34;
              operator delete(v34);
            }
            int v24 = v23 - 160;
            v23 -= 288;
          }
          while (v24 != v21);
          uint64_t v22 = __p[0];
        }
        __p[1] = v21;
        operator delete(v22);
      }
    }
LABEL_55:
    a2 = v40;
    uint64_t v35 = *(void **)(v40 + 16);
    if ((unint64_t)v35 < *(void *)(v40 + 24))
    {
      *uint64_t v35 = 0;
      v35[1] = 0;
      void v35[2] = 0;
      *(_OWORD *)uint64_t v35 = *(_OWORD *)v44;
      void v35[2] = v45;
      *(void *)(v40 + 16) = v35 + 3;
      uint64_t v6 = v41;
    }
    else
    {
      int v36 = sub_C8B2C4(v38, (uint64_t)v44);
      uint64_t v6 = v41;
      long long v37 = (void **)v44[0];
      *(void *)(v40 + 16) = v36;
      if (v37)
      {
        sub_C8A9E8((uint64_t)v44, v37);
        operator delete(v44[0]);
      }
    }
    uint64_t v5 = v6 + 24;
  }
  while (v5 != v39);
LABEL_58:
  *(void *)(a2 + 56) = vcvtad_u64_f64(sub_72688((uint64_t)v61));
  if (v59)
  {
    uint64_t v60 = v59;
    operator delete(v59);
  }
  if (v57)
  {
    uint64_t v58 = v57;
    operator delete(v57);
  }
  if (v55)
  {
    uint64_t v56 = v55;
    operator delete(v55);
  }
  if (v53)
  {
    long long v54 = v53;
    operator delete(v53);
  }
  if (v51)
  {
    long long v52 = v51;
    operator delete(v51);
  }
  if (v49)
  {
    uint64_t v50 = v49;
    operator delete(v49);
  }
  if (v47)
  {
    int v48 = v47;
    operator delete(v47);
  }
}

void sub_C88218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (*(char *)(v12 - 105) < 0) {
    operator delete(*(void **)(v12 - 128));
  }
  sub_C8ACB8(a12);
  _Unwind_Resume(a1);
}

void sub_C88240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  unint64_t v13 = va_arg(va1, void **);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_C88290((void ***)va);
  sub_C8AB20((uint64_t *)va1);
  sub_C8ACB8(v11);
  _Unwind_Resume(a1);
}

void ***sub_C88290(void ***a1)
{
  if (*a1)
  {
    sub_C8A9E8((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

void sub_C882CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v57);
  *(unsigned char *)a2 = 1;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v40 = (void ****)(a2 + 8);
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(void *)(a2 + 56) = 0;
  sub_C88768(*(uint64_t **)(a1 + 40), v48);
  uint64_t v4 = **(void **)a1;
  uint64_t v42 = *(void *)(*(void *)a1 + 8);
  if (v4 != v42)
  {
    uint64_t v41 = a2;
    do
    {
      v46[0] = 0;
      v46[1] = 0;
      char v47 = 0;
      uint64_t v6 = sub_40EFE8(v4);
      uint64_t v43 = v4;
      for (uint64_t i = sub_52058(v4); v6 != i; v6 += 48)
      {
        while (1)
        {
          sub_F00EA0((uint64_t)v48, v6, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), 0, (uint64_t *)__p);
          int v8 = (char *)v46[1];
          uint64_t v9 = v47;
          if (v46[1] >= v47) {
            break;
          }
          *(void *)v46[1] = 0;
          *((void *)v8 + 1) = 0;
          *((void *)v8 + 2) = 0;
          *(_OWORD *)int v8 = *(_OWORD *)__p;
          *((void *)v8 + 2) = v45;
          v46[1] = v8 + 24;
          v6 += 48;
          if (v6 == i) {
            goto LABEL_52;
          }
        }
        char v10 = (char *)v46[0];
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v46[1] - (char *)v46[0]) >> 3);
        unint64_t v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_2E00();
        }
        if (0x5555555555555556 * ((v47 - (char *)v46[0]) >> 3) > v12) {
          unint64_t v12 = 0x5555555555555556 * ((v47 - (char *)v46[0]) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v47 - (char *)v46[0]) >> 3) >= 0x555555555555555) {
          unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v13 = v12;
        }
        uint64_t v61 = (void **)&v47;
        if (v13)
        {
          if (v13 > 0xAAAAAAAAAAAAAAALL) {
            sub_188D718();
          }
          unint64_t v14 = (char *)operator new(24 * v13);
        }
        else
        {
          unint64_t v14 = 0;
        }
        uint64_t v15 = &v14[24 * v11];
        *(_OWORD *)uint64_t v15 = *(_OWORD *)__p;
        *((void *)v15 + 2) = v45;
        uint64_t v16 = &v14[24 * v13];
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v45 = 0;
        uint64_t v17 = v15 + 24;
        v59.i64[1] = (uint64_t)(v15 + 24);
        uint64_t v60 = v16;
        if (v8 == v10)
        {
          int64x2_t v19 = vdupq_n_s64((unint64_t)v8);
        }
        else
        {
          do
          {
            *((void *)v15 - 3) = 0;
            *((void *)v15 - 2) = 0;
            v15 -= 24;
            *((void *)v15 + 2) = 0;
            long long v18 = *(_OWORD *)(v8 - 24);
            v8 -= 24;
            *(_OWORD *)uint64_t v15 = v18;
            *((void *)v15 + 2) = *((void *)v8 + 2);
            *(void *)int v8 = 0;
            *((void *)v8 + 1) = 0;
            *((void *)v8 + 2) = 0;
          }
          while (v8 != v10);
          int64x2_t v19 = *(int64x2_t *)v46;
          uint64_t v17 = (void *)v59.i64[1];
          uint64_t v16 = v60;
          uint64_t v9 = v47;
        }
        v46[0] = v15;
        v46[1] = v17;
        int64x2_t v59 = v19;
        char v47 = v16;
        uint64_t v60 = v9;
        uint64_t v58 = (void *)v19.i64[0];
        sub_C8AEE8((uint64_t)&v58, (void **)v19.i64[0]);
        if (v58) {
          operator delete(v58);
        }
        int64x2_t v20 = (char *)__p[0];
        v46[1] = v17;
        if (__p[0])
        {
          unint64_t v21 = __p[0];
          if (__p[1] != __p[0])
          {
            uint64_t v22 = (char *)__p[1] - 128;
            do
            {
              int v24 = (void *)*((void *)v22 + 9);
              if (v24)
              {
                *((void *)v22 + 10) = v24;
                operator delete(v24);
              }
              char v25 = (void *)*((void *)v22 + 6);
              if (v25)
              {
                *((void *)v22 + 7) = v25;
                operator delete(v25);
              }
              unint64_t v26 = (void *)*((void *)v22 + 3);
              if (v26)
              {
                *((void *)v22 + 4) = v26;
                operator delete(v26);
              }
              uint64_t v27 = *(void **)v22;
              if (*(void *)v22)
              {
                *((void *)v22 + 1) = v27;
                operator delete(v27);
              }
              uint64_t v28 = (void *)*((void *)v22 - 3);
              if (v28)
              {
                *((void *)v22 - 2) = v28;
                operator delete(v28);
              }
              long long v29 = (void *)*((void *)v22 - 6);
              if (v29)
              {
                *((void *)v22 - 5) = v29;
                operator delete(v29);
              }
              uint64_t v30 = (void *)*((void *)v22 - 9);
              if (v30)
              {
                *((void *)v22 - 8) = v30;
                operator delete(v30);
              }
              uint64_t v31 = (void *)*((void *)v22 - 12);
              if (v31)
              {
                *((void *)v22 - 11) = v31;
                operator delete(v31);
              }
              uint64_t v32 = (void *)*((void *)v22 - 15);
              if (v32)
              {
                *((void *)v22 - 14) = v32;
                operator delete(v32);
              }
              int v33 = (void *)*((void *)v22 - 18);
              if (v33)
              {
                *((void *)v22 - 17) = v33;
                operator delete(v33);
              }
              uint64_t v23 = v22 - 160;
              v22 -= 288;
            }
            while (v23 != v20);
            unint64_t v21 = __p[0];
          }
          __p[1] = v20;
          operator delete(v21);
        }
      }
LABEL_52:
      a2 = v41;
      uint64_t v34 = *(void **)(v41 + 16);
      if ((unint64_t)v34 < *(void *)(v41 + 24))
      {
        *uint64_t v34 = 0;
        v34[1] = 0;
        v34[2] = 0;
        *(_OWORD *)uint64_t v34 = *(_OWORD *)v46;
        v34[2] = v47;
        *(void *)(v41 + 16) = v34 + 3;
        uint64_t v5 = v43;
      }
      else
      {
        uint64_t v35 = sub_C8B2C4(v40, (uint64_t)v46);
        uint64_t v5 = v43;
        int v36 = (void **)v46[0];
        *(void *)(v41 + 16) = v35;
        if (v36)
        {
          sub_C8A9E8((uint64_t)v46, v36);
          operator delete(v46[0]);
        }
      }
      uint64_t v4 = v5 + 24;
    }
    while (v4 != v42);
  }
  *(void *)(a2 + 56) = vcvtad_u64_f64(sub_72688((uint64_t)v57));
  if (v55)
  {
    uint64_t v56 = v55;
    operator delete(v55);
  }
  if (v53)
  {
    long long v54 = v53;
    operator delete(v53);
  }
  if (v51)
  {
    long long v52 = v51;
    operator delete(v51);
  }
  long long v37 = v50;
  if (v50)
  {
    do
    {
      int v38 = (void *)*v37;
      operator delete(v37);
      long long v37 = v38;
    }
    while (v38);
  }
  uint64_t v39 = v49;
  uint64_t v49 = 0;
  if (v39) {
    operator delete(v39);
  }
}

void sub_C88704(_Unwind_Exception *a1)
{
  sub_C8ACB8(v1);
  _Unwind_Resume(a1);
}

void sub_C88718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  unint64_t v13 = va_arg(va1, void **);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  sub_C88290((void ***)va);
  sub_BF0664((uint64_t *)va1);
  sub_C8ACB8(v11);
  _Unwind_Resume(a1);
}

void sub_C88768(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  HIBYTE(v20) = 10;
  strcpy((char *)__dst, "WalkingETA");
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v18 = 0;
  uint64_t v4 = sub_374CDC((uint64_t)a1, (uint64_t)__dst, (uint64_t *)__p);
  sub_54214((uint64_t)v21, (uint64_t)v4);
  uint64_t v5 = (void **)__p[0];
  if (__p[0])
  {
    uint64_t v6 = (void **)__p[1];
    uint64_t v7 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      uint64_t v7 = __p[0];
    }
    __p[1] = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(__dst[0]);
  }
  HIBYTE(v18) = 13;
  strcpy((char *)__p, "eta_evaluator");
  uint64_t v8 = sub_561B0(v21, (uint64_t)__p);
  if (*(char *)(v8 + 23) < 0)
  {
    sub_4200(__dst, *(void **)v8, *(void *)(v8 + 8));
  }
  else
  {
    long long v9 = *(_OWORD *)v8;
    uint64_t v20 = *(void *)(v8 + 16);
    *(_OWORD *)__dst = v9;
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  char v16 = 13;
  strcpy((char *)v15, "cost_function");
  uint64_t v10 = sub_561B0(v21, (uint64_t)v15);
  if (*(char *)(v10 + 23) < 0)
  {
    sub_4200(__p, *(void **)v10, *(void *)(v10 + 8));
  }
  else
  {
    long long v11 = *(_OWORD *)v10;
    uint64_t v18 = *(void *)(v10 + 16);
    *(_OWORD *)std::string __p = v11;
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  sub_F00E44(a2, a1, (uint64_t)__dst, (uint64_t)__p);
  if (SHIBYTE(v18) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v20) & 0x80000000) == 0)
    {
LABEL_23:
      unint64_t v12 = v22;
      if (!v22) {
        goto LABEL_27;
      }
      goto LABEL_31;
    }
  }
  else if ((SHIBYTE(v20) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(__dst[0]);
  unint64_t v12 = v22;
  if (!v22) {
    goto LABEL_27;
  }
  do
  {
LABEL_31:
    unint64_t v14 = (void **)*v12;
    sub_55198((uint64_t)(v12 + 5));
    if (*((char *)v12 + 39) < 0) {
      operator delete(v12[2]);
    }
    operator delete(v12);
    unint64_t v12 = v14;
  }
  while (v14);
LABEL_27:
  unint64_t v13 = (void *)v21[0];
  v21[0] = 0;
  if (v13) {
    operator delete(v13);
  }
}

void sub_C88998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  sub_5450C(v28 - 72);
  _Unwind_Resume(a1);
}

void sub_C889F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_C88A18(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if (sub_401FE4(*(void *)(a1 + 24)))
    {
      uint64_t v182 = sub_3750CC(*(void **)(a1 + 40));
      uint64_t v4 = **(void **)a1;
      uint64_t v168 = *(void *)(*(void *)a1 + 8);
      if (v4 != v168)
      {
        uint64_t v5 = *(uint64_t **)(a2 + 24);
        while (1)
        {
          uint64_t v6 = sub_40EFE8(v4);
          long long v169 = v5;
          uint64_t v170 = v4;
          uint64_t v7 = *v5;
          uint64_t v178 = sub_52058(v4);
          if (v6 != v178) {
            break;
          }
LABEL_5:
          uint64_t v4 = v170 + 24;
          uint64_t v5 = v169 + 3;
          if (v170 + 24 == v168) {
            return;
          }
        }
LABEL_11:
        uint64_t v8 = *(void *)nullsub_1(v6);
        sub_46DD68(v7, &v183);
        uint64_t v9 = v183.n128_u64[0];
        uint64_t v179 = v6;
        uint64_t v10 = *(void *)(nullsub_1(v6) + 8);
        uint64_t v180 = v7;
        sub_46DD68(v7, &v183);
        uint64_t v181 = v10;
        if (v8 == v10) {
          goto LABEL_10;
        }
        while (1)
        {
          uint64_t v11 = sub_EADD1C(v8);
          sub_2954EC(v182, *(void *)(v11 + 32), (uint64_t)&v190);
          unint64_t v12 = v191;
          if (v191 == v192)
          {
            int v18 = 0x7FFFFFFF;
            if (v191) {
              goto LABEL_118;
            }
            goto LABEL_119;
          }
          if (!v193)
          {
            unint64_t v19 = *((void *)v192 - 1);
            uint64_t v20 = v190;
            int v202 = 1;
            v203[0] = v19;
            double v200 = &v202;
            unint64_t v201 = v203;
            unint64_t v21 = v190[482] + 1;
            v190[482] = v21;
            if (*v20)
            {
              uint64_t v22 = v20 + 2;
              if (*((_DWORD *)v20 + 28) == v19)
              {
                unsigned int v23 = 4;
                goto LABEL_39;
              }
              if (*((_DWORD *)v20 + 34) == v19)
              {
                unsigned int v23 = 5;
                goto LABEL_39;
              }
              if (*((_DWORD *)v20 + 40) == v19)
              {
                unsigned int v23 = 6;
                goto LABEL_39;
              }
              if (*((_DWORD *)v20 + 46) == v19)
              {
                unsigned int v23 = 7;
LABEL_39:
                ++v20[483];
                uint64_t v28 = &v22[3 * v23];
                v28[1] = v21;
                long long v29 = (unsigned int *)v28[2];
                if (v29)
                {
LABEL_40:
                  uint64_t v30 = (int *)((char *)v29 + *v29);
LABEL_107:
                  int v71 = (unsigned int *)((char *)v30 + *(unsigned __int16 *)((char *)v30 - *v30 + 4));
                  uint64_t v72 = (uint64_t)&v71[HIDWORD(v19)] + *v71;
                  BOOL v73 = (int *)(v72 + 4 + *(unsigned int *)(v72 + 4));
                  uint64_t v74 = (unsigned int *)((char *)v73 + *(unsigned __int16 *)((char *)v73 - *v73 + 6));
                  LODWORD(v74) = *(unsigned int *)((char *)v74 + *v74) - 1;
                  v183.n128_u64[0] = (unint64_t)v190;
                  v183.n128_u64[1] = (unint64_t)&v191;
                  long long v184 = 0u;
                  v185[0] = 0u;
                  LODWORD(v185[1]) = ((unint64_t)(v192 - v191) >> 3) - 1;
                  DWORD1(v185[1]) = v74;
                  BYTE8(v185[1]) = 0;
                  sub_2E1D08((uint64_t)&v183);
                  BOOL v62 = (void **)&v183;
                  LODWORD(v14) = DWORD2(v185[0]);
                  goto LABEL_108;
                }
              }
              else
              {
                unint64_t v63 = v20[21];
                unint64_t v64 = v20[18];
                unint64_t v65 = v20[15];
                unint64_t v66 = v20[24];
                long long v29 = (unsigned int *)sub_2AB884(*v20, 1, v19, 1);
                if (v65 >= v21) {
                  unint64_t v67 = v21;
                }
                else {
                  unint64_t v67 = v65;
                }
                BOOL v68 = v64 >= v67;
                if (v64 < v67) {
                  unint64_t v67 = v64;
                }
                unsigned int v69 = 4 * (v65 < v21);
                if (!v68) {
                  unsigned int v69 = 5;
                }
                if (v63 < v67)
                {
                  unsigned int v69 = 6;
                  unint64_t v67 = v63;
                }
                if (v66 < v67) {
                  unsigned int v69 = 7;
                }
                int v70 = &v22[3 * v69];
                *(_DWORD *)int v70 = v203[0];
                v70[1] = v20[482];
                v70[2] = v29;
                if (v29) {
                  goto LABEL_40;
                }
              }
            }
            sub_296654(&v200);
            uint64_t v30 = 0;
            goto LABEL_107;
          }
          unint64_t v13 = v190;
          char v194 = v190;
          int v195 = &v191;
          uint64_t v198 = 0;
          long long v196 = 0u;
          long long v197 = 0u;
          char v199 = 1;
          unint64_t v14 = *(void *)v191;
          DWORD2(v197) = *(void *)v191;
          int v202 = 1;
          v203[0] = v14;
          double v200 = &v202;
          unint64_t v201 = v203;
          unint64_t v15 = v190[482] + 1;
          v190[482] = v15;
          if (!*v13)
          {
LABEL_53:
            sub_296654(&v200);
            unint64_t v26 = 0;
            uint64_t v27 = (_WORD *)(&loc_1120530 + 1);
            if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
              goto LABEL_56;
            }
            goto LABEL_54;
          }
          char v16 = v13 + 2;
          if (*((_DWORD *)v13 + 28) == v14)
          {
            unsigned int v17 = 4;
            goto LABEL_34;
          }
          if (*((_DWORD *)v13 + 34) == v14)
          {
            unsigned int v17 = 5;
            goto LABEL_34;
          }
          if (*((_DWORD *)v13 + 40) == v14) {
            break;
          }
          if (*((_DWORD *)v13 + 46) == v14)
          {
            unsigned int v17 = 7;
LABEL_34:
            ++v13[483];
            int v24 = &v16[3 * v17];
            v24[1] = v15;
            char v25 = (unsigned int *)v24[2];
            if (!v25) {
              goto LABEL_53;
            }
            goto LABEL_35;
          }
          unint64_t v31 = v13[21];
          unint64_t v32 = v13[18];
          unint64_t v33 = v13[15];
          unint64_t v173 = v13[24];
          char v25 = (unsigned int *)sub_2AB884(*v13, 1, v14, 1);
          if (v33 >= v15) {
            unint64_t v34 = v15;
          }
          else {
            unint64_t v34 = v33;
          }
          BOOL v35 = v32 >= v34;
          if (v32 < v34) {
            unint64_t v34 = v32;
          }
          unsigned int v36 = 4 * (v33 < v15);
          if (!v35) {
            unsigned int v36 = 5;
          }
          if (v31 < v34)
          {
            unsigned int v36 = 6;
            unint64_t v34 = v31;
          }
          if (v173 < v34) {
            unsigned int v36 = 7;
          }
          long long v37 = &v16[3 * v36];
          *(_DWORD *)long long v37 = v203[0];
          v37[1] = v13[482];
          v37[2] = v25;
          if (!v25) {
            goto LABEL_53;
          }
LABEL_35:
          unint64_t v26 = (int *)((char *)v25 + *v25);
          uint64_t v27 = (unsigned __int16 *)((char *)v26 - *v26);
          if (*v27 < 7u) {
            goto LABEL_56;
          }
LABEL_54:
          uint64_t v38 = v27[3];
          if (v38)
          {
            int v39 = *(int *)((char *)v26 + v38);
            goto LABEL_57;
          }
LABEL_56:
          int v39 = 0;
LABEL_57:
          HIDWORD(v197) = v39;
          int v202 = 1;
          v203[0] = v14;
          double v200 = &v202;
          unint64_t v201 = v203;
          unint64_t v40 = v13[482] + 1;
          v13[482] = v40;
          if (!*v13) {
            goto LABEL_81;
          }
          uint64_t v41 = v13 + 2;
          if (*((_DWORD *)v13 + 28) == v14)
          {
            unsigned int v42 = 4;
            goto LABEL_66;
          }
          if (*((_DWORD *)v13 + 34) == v14)
          {
            unsigned int v42 = 5;
            goto LABEL_66;
          }
          if (*((_DWORD *)v13 + 40) == v14)
          {
            unsigned int v42 = 6;
            goto LABEL_66;
          }
          if (*((_DWORD *)v13 + 46) == v14)
          {
            unsigned int v42 = 7;
LABEL_66:
            ++v13[483];
            uint64_t v43 = &v41[3 * v42];
            v43[1] = v40;
            uint64_t v44 = (unsigned int *)v43[2];
            if (v44) {
              goto LABEL_67;
            }
            goto LABEL_81;
          }
          unint64_t v47 = v13[21];
          unint64_t v48 = v13[18];
          unint64_t v49 = v13[15];
          unint64_t v174 = v13[24];
          uint64_t v44 = (unsigned int *)sub_2AB884(*v13, 1, v14, 1);
          if (v49 >= v40) {
            unint64_t v50 = v40;
          }
          else {
            unint64_t v50 = v49;
          }
          BOOL v51 = v48 >= v50;
          if (v48 < v50) {
            unint64_t v50 = v48;
          }
          unsigned int v52 = 4 * (v49 < v40);
          if (!v51) {
            unsigned int v52 = 5;
          }
          if (v47 < v50)
          {
            unsigned int v52 = 6;
            unint64_t v50 = v47;
          }
          if (v174 < v50) {
            unsigned int v52 = 7;
          }
          uint64_t v53 = &v41[3 * v52];
          *(_DWORD *)uint64_t v53 = v203[0];
          v53[1] = v13[482];
          v53[2] = v44;
          if (v44)
          {
LABEL_67:
            uint64_t v45 = (int *)((char *)v44 + *v44);
            uint64_t v46 = (unsigned __int16 *)((char *)v45 - *v45);
            if (*v46 < 5u) {
              goto LABEL_84;
            }
            goto LABEL_82;
          }
LABEL_81:
          sub_296654(&v200);
          uint64_t v45 = 0;
          uint64_t v46 = (_WORD *)(&loc_1120530 + 1);
          if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
            goto LABEL_84;
          }
LABEL_82:
          uint64_t v54 = v46[2];
          if (!v54)
          {
LABEL_84:
            int v55 = 0;
            goto LABEL_85;
          }
          int v55 = (char *)v45 + v54 + *(unsigned int *)((char *)v45 + v54);
LABEL_85:
          uint64_t v56 = &v55[4 * HIDWORD(v14) + 4 + *(unsigned int *)&v55[4 * HIDWORD(v14) + 4]];
          *(void *)&long long v196 = v56;
          uint64_t v57 = &v56[-*(int *)v56];
          unsigned int v58 = *(unsigned __int16 *)v57;
          if (v58 <= 6)
          {
            uint64_t v61 = 0;
            *((void *)&v196 + 1) = 0;
          }
          else
          {
            uint64_t v59 = *((unsigned __int16 *)v57 + 3);
            if (*((_WORD *)v57 + 3)) {
              v59 += (uint64_t)&v56[*(unsigned int *)&v56[v59]];
            }
            *((void *)&v196 + 1) = v59;
            if (v58 >= 0xB && (uint64_t v60 = *((unsigned __int16 *)v57 + 5)) != 0) {
              uint64_t v61 = &v56[v60 + *(unsigned int *)&v56[v60]];
            }
            else {
              uint64_t v61 = 0;
            }
          }
          *(void *)&long long v197 = v61;
          BOOL v62 = &v194;
LABEL_108:
          unsigned int v75 = v62[5] & ~(-1 << (sub_511FC(v14) & 0xFE));
          sub_51938(v75);
          sub_51938(v75 >> 1);
          uint64_t v76 = (int *)v62[2];
          uint64_t v77 = *((unsigned int *)v62 + 13);
          uint64_t v78 = (unsigned __int16 *)((char *)v76 - *v76);
          unsigned int v79 = *v78;
          if (v79 < 0xD)
          {
            if (v79 < 0xB) {
              goto LABEL_117;
            }
          }
          else if (v78[6])
          {
            int v18 = *(int *)((char *)&v76[v77 + 1] + v78[6] + *(unsigned int *)((char *)v76 + v78[6]));
            unint64_t v12 = v191;
            if (v191) {
              goto LABEL_118;
            }
            goto LABEL_119;
          }
          if (!v78[5]
            || (int v80 = *(unsigned __int16 *)((char *)v76 + 2 * v77 + v78[5] + *(unsigned int *)((char *)v76 + v78[5]) + 4),
                v80 == 0xFFFF))
          {
LABEL_117:
            int v18 = 0x7FFFFFFF;
            unint64_t v12 = v191;
            if (!v191) {
              goto LABEL_119;
            }
LABEL_118:
            double v192 = v12;
            operator delete(v12);
            goto LABEL_119;
          }
          uint64_t v81 = v78[4];
          if (v81) {
            int v82 = *(int *)((char *)v76 + v81);
          }
          else {
            int v82 = 0;
          }
          int v18 = *((_DWORD *)v62 + 11) + v80 + v82;
          unint64_t v12 = v191;
          if (v191) {
            goto LABEL_118;
          }
LABEL_119:
          uint64_t v83 = sub_EAFF60(v8);
          sub_2954EC(v182, *(void *)(v83 + 32), (uint64_t)&v190);
          long long v84 = v191;
          if (v191 == v192)
          {
            int v90 = 0x7FFFFFFF;
            if (v191) {
              goto LABEL_226;
            }
            goto LABEL_227;
          }
          if (!v193)
          {
            v183.n128_u64[0] = (unint64_t)v190;
            uint64_t v91 = v190;
            v183.n128_u64[1] = (unint64_t)&v191;
            long long v184 = 0u;
            memset(v185, 0, 25);
            unint64_t v92 = *(void *)v191;
            DWORD2(v185[0]) = *(void *)v191;
            int v202 = 1;
            v203[0] = v92;
            double v200 = &v202;
            unint64_t v201 = v203;
            unint64_t v93 = v190[482] + 1;
            v190[482] = v93;
            if (*v91)
            {
              long long v94 = v91 + 2;
              if (*((_DWORD *)v91 + 28) == v92)
              {
                unsigned int v95 = 4;
                goto LABEL_146;
              }
              if (*((_DWORD *)v91 + 34) == v92)
              {
                unsigned int v95 = 5;
                goto LABEL_146;
              }
              if (*((_DWORD *)v91 + 40) == v92)
              {
                unsigned int v95 = 6;
                goto LABEL_146;
              }
              if (*((_DWORD *)v91 + 46) == v92)
              {
                unsigned int v95 = 7;
LABEL_146:
                ++v91[483];
                uint64_t v99 = &v94[3 * v95];
                v99[1] = v93;
                uint64_t v100 = (unsigned int *)v99[2];
                if (v100)
                {
LABEL_147:
                  uint64_t v101 = (int *)((char *)v100 + *v100);
                  uint64_t v102 = (unsigned __int16 *)((char *)v101 - *v101);
                  if (*v102 < 7u)
                  {
LABEL_178:
                    int v122 = 0;
                    goto LABEL_179;
                  }
LABEL_176:
                  uint64_t v121 = v102[3];
                  if (!v121) {
                    goto LABEL_178;
                  }
                  int v122 = *(int *)((char *)v101 + v121);
LABEL_179:
                  HIDWORD(v185[0]) = v122;
                  int v202 = 1;
                  v203[0] = v92;
                  double v200 = &v202;
                  unint64_t v201 = v203;
                  unint64_t v123 = v91[482] + 1;
                  v91[482] = v123;
                  if (*v91)
                  {
                    uint64_t v124 = v91 + 2;
                    if (*((_DWORD *)v91 + 28) == v92)
                    {
                      unsigned int v125 = 4;
                      goto LABEL_188;
                    }
                    if (*((_DWORD *)v91 + 34) == v92)
                    {
                      unsigned int v125 = 5;
                      goto LABEL_188;
                    }
                    if (*((_DWORD *)v91 + 40) == v92)
                    {
                      unsigned int v125 = 6;
                      goto LABEL_188;
                    }
                    if (*((_DWORD *)v91 + 46) == v92)
                    {
                      unsigned int v125 = 7;
LABEL_188:
                      ++v91[483];
                      long long v126 = &v124[3 * v125];
                      v126[1] = v123;
                      int v127 = (unsigned int *)v126[2];
                      if (v127)
                      {
LABEL_189:
                        int v128 = (int *)((char *)v127 + *v127);
                        uint64_t v129 = (unsigned __int16 *)((char *)v128 - *v128);
                        if (*v129 < 5u)
                        {
LABEL_206:
                          unint64_t v137 = 0;
                          goto LABEL_207;
                        }
LABEL_204:
                        uint64_t v136 = v129[2];
                        if (!v136) {
                          goto LABEL_206;
                        }
                        unint64_t v137 = (char *)v128 + v136 + *(unsigned int *)((char *)v128 + v136);
LABEL_207:
                        unint64_t v138 = &v137[4 * HIDWORD(v92) + 4 + *(unsigned int *)&v137[4 * HIDWORD(v92) + 4]];
                        *(void *)&long long v184 = v138;
                        uint64_t v139 = &v138[-*(int *)v138];
                        unsigned int v140 = *(unsigned __int16 *)v139;
                        if (v140 <= 6)
                        {
                          uint64_t v143 = 0;
                          *((void *)&v184 + 1) = 0;
                        }
                        else
                        {
                          uint64_t v141 = *((unsigned __int16 *)v139 + 3);
                          if (*((_WORD *)v139 + 3)) {
                            v141 += (uint64_t)&v138[*(unsigned int *)&v138[v141]];
                          }
                          *((void *)&v184 + 1) = v141;
                          if (v140 >= 0xB && (uint64_t v142 = *((unsigned __int16 *)v139 + 5)) != 0) {
                            uint64_t v143 = &v138[v142 + *(unsigned int *)&v138[v142]];
                          }
                          else {
                            uint64_t v143 = 0;
                          }
                        }
                        *(void *)&v185[0] = v143;
                        uint64_t v114 = (void **)&v183;
                        goto LABEL_216;
                      }
                    }
                    else
                    {
                      unint64_t v130 = v91[18];
                      unint64_t v131 = v91[15];
                      unint64_t v172 = v91[24];
                      unint64_t v177 = v91[21];
                      int v127 = (unsigned int *)sub_2AB884(*v91, 1, v92, 1);
                      if (v131 >= v123) {
                        unint64_t v132 = v123;
                      }
                      else {
                        unint64_t v132 = v131;
                      }
                      BOOL v133 = v130 >= v132;
                      if (v130 < v132) {
                        unint64_t v132 = v130;
                      }
                      unsigned int v134 = 4 * (v131 < v123);
                      if (!v133) {
                        unsigned int v134 = 5;
                      }
                      if (v177 < v132)
                      {
                        unsigned int v134 = 6;
                        unint64_t v132 = v177;
                      }
                      if (v172 < v132) {
                        unsigned int v134 = 7;
                      }
                      uint64_t v135 = &v124[3 * v134];
                      *(_DWORD *)uint64_t v135 = v203[0];
                      v135[1] = v91[482];
                      v135[2] = v127;
                      if (v127) {
                        goto LABEL_189;
                      }
                    }
                  }
                  sub_296654(&v200);
                  int v128 = 0;
                  uint64_t v129 = (_WORD *)(&loc_1120530 + 1);
                  if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                    goto LABEL_206;
                  }
                  goto LABEL_204;
                }
              }
              else
              {
                unint64_t v115 = v91[18];
                unint64_t v116 = v91[15];
                unint64_t v171 = v91[24];
                unint64_t v176 = v91[21];
                uint64_t v100 = (unsigned int *)sub_2AB884(*v91, 1, v92, 1);
                if (v116 >= v93) {
                  unint64_t v117 = v93;
                }
                else {
                  unint64_t v117 = v116;
                }
                BOOL v118 = v115 >= v117;
                if (v115 < v117) {
                  unint64_t v117 = v115;
                }
                unsigned int v119 = 4 * (v116 < v93);
                if (!v118) {
                  unsigned int v119 = 5;
                }
                if (v176 < v117)
                {
                  unsigned int v119 = 6;
                  unint64_t v117 = v176;
                }
                if (v171 < v117) {
                  unsigned int v119 = 7;
                }
                unint64_t v120 = &v94[3 * v119];
                *(_DWORD *)unint64_t v120 = v203[0];
                v120[1] = v91[482];
                v120[2] = v100;
                if (v100) {
                  goto LABEL_147;
                }
              }
            }
            sub_296654(&v200);
            uint64_t v101 = 0;
            uint64_t v102 = (_WORD *)(&loc_1120530 + 1);
            if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
              goto LABEL_178;
            }
            goto LABEL_176;
          }
          unint64_t v85 = *((void *)v192 - 1);
          uint64_t v86 = v190;
          int v202 = 1;
          v203[0] = v85;
          double v200 = &v202;
          unint64_t v201 = v203;
          unint64_t v87 = v190[482] + 1;
          v190[482] = v87;
          if (!*v86)
          {
LABEL_161:
            sub_296654(&v200);
            uint64_t v98 = 0;
            goto LABEL_162;
          }
          long long v88 = v86 + 2;
          if (*((_DWORD *)v86 + 28) == v85)
          {
            unsigned int v89 = 4;
            goto LABEL_142;
          }
          if (*((_DWORD *)v86 + 34) == v85)
          {
            unsigned int v89 = 5;
            goto LABEL_142;
          }
          if (*((_DWORD *)v86 + 40) == v85)
          {
            unsigned int v89 = 6;
            goto LABEL_142;
          }
          if (*((_DWORD *)v86 + 46) == v85)
          {
            unsigned int v89 = 7;
LABEL_142:
            ++v86[483];
            uint64_t v96 = &v88[3 * v89];
            v96[1] = v87;
            uint64_t v97 = (unsigned int *)v96[2];
            if (!v97) {
              goto LABEL_161;
            }
            goto LABEL_143;
          }
          unint64_t v103 = v86[21];
          unint64_t v104 = v86[18];
          unint64_t v105 = v86[15];
          unint64_t v175 = v86[24];
          uint64_t v97 = (unsigned int *)sub_2AB884(*v86, 1, v85, 1);
          if (v105 >= v87) {
            unint64_t v106 = v87;
          }
          else {
            unint64_t v106 = v105;
          }
          BOOL v107 = v104 >= v106;
          if (v104 < v106) {
            unint64_t v106 = v104;
          }
          unsigned int v108 = 4 * (v105 < v87);
          if (!v107) {
            unsigned int v108 = 5;
          }
          if (v103 < v106)
          {
            unsigned int v108 = 6;
            unint64_t v106 = v103;
          }
          if (v175 < v106) {
            unsigned int v108 = 7;
          }
          std::string::size_type v109 = &v88[3 * v108];
          *(_DWORD *)std::string::size_type v109 = v203[0];
          v109[1] = v86[482];
          v109[2] = v97;
          if (!v97) {
            goto LABEL_161;
          }
LABEL_143:
          uint64_t v98 = (int *)((char *)v97 + *v97);
LABEL_162:
          unint64_t v110 = (unsigned int *)((char *)v98 + *(unsigned __int16 *)((char *)v98 - *v98 + 4));
          uint64_t v111 = (uint64_t)&v110[HIDWORD(v85)] + *v110;
          uint64_t v112 = (int *)(v111 + 4 + *(unsigned int *)(v111 + 4));
          uint64_t v113 = (unsigned int *)((char *)v112 + *(unsigned __int16 *)((char *)v112 - *v112 + 6));
          LODWORD(v113) = *(unsigned int *)((char *)v113 + *v113) - 1;
          char v194 = v190;
          int v195 = &v191;
          long long v196 = 0u;
          long long v197 = 0u;
          LODWORD(v198) = ((unint64_t)(v192 - v191) >> 3) - 1;
          HIDWORD(v198) = v113;
          char v199 = 1;
          sub_2E1D08((uint64_t)&v194);
          uint64_t v114 = &v194;
          LODWORD(v92) = DWORD2(v197);
LABEL_216:
          unsigned int v144 = v114[5] & ~(-1 << (sub_511FC(v92) & 0xFE));
          sub_51938(v144);
          sub_51938(v144 >> 1);
          uint64_t v145 = (int *)v114[2];
          uint64_t v146 = *((unsigned int *)v114 + 13);
          uint64_t v147 = (unsigned __int16 *)((char *)v145 - *v145);
          unsigned int v148 = *v147;
          if (v148 < 0xD)
          {
            if (v148 >= 0xB)
            {
LABEL_221:
              if (v147[5])
              {
                int v149 = *(unsigned __int16 *)((char *)v145
                                           + 2 * v146
                                           + v147[5]
                                           + *(unsigned int *)((char *)v145 + v147[5])
                                           + 4);
                if (v149 != 0xFFFF)
                {
                  uint64_t v150 = v147[4];
                  if (v150) {
                    int v151 = *(int *)((char *)v145 + v150);
                  }
                  else {
                    int v151 = 0;
                  }
                  int v90 = *((_DWORD *)v114 + 11) + v149 + v151;
                  long long v84 = v191;
                  if (!v191) {
                    goto LABEL_227;
                  }
LABEL_226:
                  double v192 = v84;
                  operator delete(v84);
                  goto LABEL_227;
                }
              }
            }
            int v90 = 0x7FFFFFFF;
            long long v84 = v191;
            if (!v191) {
              goto LABEL_227;
            }
            goto LABEL_226;
          }
          if (!v147[6]) {
            goto LABEL_221;
          }
          int v90 = *(int *)((char *)&v145[v146 + 1] + v147[6] + *(unsigned int *)((char *)v145 + v147[6]));
          long long v84 = v191;
          if (v191) {
            goto LABEL_226;
          }
LABEL_227:
          v183.n128_u64[0] = sub_474FB0(v9);
          v183.n128_u32[2] = v152;
          if (!sub_40A4AC((int *)&v183))
          {
            char v194 = (void *)sub_475024(v9);
            LODWORD(v195) = v153;
            if (!sub_40A4AC((int *)&v194) && sub_475108(v9) >= 4)
            {
              uint64_t v154 = (int *)sub_52060(v9);
              v183.n128_u64[0] = sub_474FB0(v9);
              v183.n128_u32[2] = v155;
              int v156 = sub_4F44((unsigned int *)&v183);
              int v157 = sub_40A8CC(v154, v156);
              uint64_t v158 = sub_52060(v9);
              uint64_t v159 = sub_3C80F8(v9) - 12;
              uint64_t v160 = (int *)(v158 + 12);
              for (int i = v157; v160 != (int *)v159; v160 += 3)
                int i = sub_40A8CC(v160, i);
              if (v90 > v18 && v157 - i < -100000)
              {
                if (sub_723EC(3u))
                {
                  v183.n128_u64[0] = v167;
                  *(unint64_t *)((char *)v183.n128_u64 + *(void *)(v167 - 24)) = v166;
                  uint64_t v163 = (std::ios_base *)((char *)&v183 + *(void *)(v183.n128_u64[0] - 24));
                  std::ios_base::init(v163, &v183.n128_i8[8]);
                  v163[1].__vftable = 0;
                  v163[1].__fmtflags_ = -1;
                  std::streambuf::basic_streambuf();
                  long long __p = 0u;
                  long long v187 = 0u;
                  int v188 = 16;
                  sub_188FC78(&v183, (uint64_t)"Predicted energy consumption on uphill leg is negative.", 55);
                  std::stringbuf::str();
                  sub_7246C((uint64_t *)&v194, 3u);
                  if (SBYTE7(v196) < 0) {
                    operator delete(v194);
                  }
                  v183.n128_u64[0] = v165;
                  *(unint64_t *)((char *)v183.n128_u64 + *(void *)(v165 - 24)) = v164;
                  if (SBYTE7(v187) < 0) {
                    operator delete((void *)__p);
                  }
                  std::streambuf::~streambuf();
                  std::ostream::~ostream();
                  std::ios::~ios();
                }
                sub_47E214(v180);
LABEL_10:
                uint64_t v6 = v179 + 48;
                uint64_t v7 = v180 + 48;
                if (v179 + 48 == v178) {
                  goto LABEL_5;
                }
                goto LABEL_11;
              }
            }
          }
          v8 += 472;
          v9 += 56;
          if (v8 == v181) {
            goto LABEL_10;
          }
        }
        unsigned int v17 = 6;
        goto LABEL_34;
      }
    }
  }
}

void sub_C89BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_C89BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_C89BD8(_Unwind_Exception *a1)
{
}

void sub_C89C00(_Unwind_Exception *a1)
{
}

void sub_C89C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (*(char *)(v29 - 153) < 0) {
    operator delete(*(void **)(v29 - 176));
  }
  sub_111ECAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_C89C38(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 208);
  if (v3)
  {
    *(void *)(v1 - 200) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_C89C58@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v139);
  uint64_t v120 = a2;
  if (*((unsigned char *)a1 + 32))
  {
    BOOL v4 = sub_401FE4((uint64_t)a1[3]);
    sub_EEF38C((uint64_t)v138);
    if (v4)
    {
      uint64_t v5 = (uint64_t)a1[5];
      v133[23] = 9;
      strcpy(v133, "EVRouting");
      __p[0] = 0;
      __p[1] = 0;
      int v122 = 0;
      uint64_t v6 = sub_374CDC(v5, (uint64_t)v133, (uint64_t *)__p);
      sub_54214((uint64_t)&v127, (uint64_t)v6);
      uint64_t v7 = (void **)__p[0];
      if (__p[0])
      {
        uint64_t v8 = (void **)__p[1];
        uint64_t v9 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v8 - 1) < 0) {
              operator delete(*(v8 - 3));
            }
            v8 -= 3;
          }
          while (v8 != v7);
          uint64_t v9 = __p[0];
        }
        __p[1] = v7;
        operator delete(v9);
      }
      if ((v133[23] & 0x80000000) != 0) {
        operator delete(*(void **)v133);
      }
      uint64_t v10 = (uint64_t)a1[5];
      *(void *)BOOL v133 = operator new(0x20uLL);
      *(_OWORD *)&v133[8] = xmmword_20B8890;
      strcpy(*(char **)v133, "EnergyConsumptionETAEvaluator");
      int64x2_t v136 = 0uLL;
      unint64_t v137 = 0;
      uint64_t v11 = sub_374CDC(v10, (uint64_t)v133, v136.i64);
      sub_54214((uint64_t)__p, (uint64_t)v11);
      uint64_t v12 = v136.i64[0];
      if (v136.i64[0])
      {
        uint64_t v13 = v136.i64[1];
        unint64_t v14 = (void *)v136.i64[0];
        if (v136.i64[1] != v136.i64[0])
        {
          do
          {
            if (*(char *)(v13 - 1) < 0) {
              operator delete(*(void **)(v13 - 24));
            }
            v13 -= 24;
          }
          while (v13 != v12);
          unint64_t v14 = (void *)v136.i64[0];
        }
        v136.i64[1] = v12;
        operator delete(v14);
      }
      if ((v133[23] & 0x80000000) != 0) {
        operator delete(*(void **)v133);
      }
      sub_EEFAA0(v133, &v127, __p, a1[3]);
      v138[0] = *(_OWORD *)v133;
      v138[1] = *(_OWORD *)&v133[16];
      v138[2] = v134;
      v138[3] = v135;
      unint64_t v15 = v122;
      if (v122)
      {
        do
        {
          BOOL v107 = (void **)*v15;
          sub_55198((uint64_t)(v15 + 5));
          if (*((char *)v15 + 39) < 0) {
            operator delete(v15[2]);
          }
          operator delete(v15);
          unint64_t v15 = v107;
        }
        while (v107);
      }
      char v16 = __p[0];
      __p[0] = 0;
      if (v16) {
        operator delete(v16);
      }
      unsigned int v17 = (void **)v128.i64[1];
      if (v128.i64[1])
      {
        do
        {
          unsigned int v108 = (void **)*v17;
          sub_55198((uint64_t)(v17 + 5));
          if (*((char *)v17 + 39) < 0) {
            operator delete(v17[2]);
          }
          operator delete(v17);
          unsigned int v17 = v108;
        }
        while (v108);
      }
      int v18 = v127;
      int v127 = 0;
      if (v18) {
        operator delete(v18);
      }
      int v118 = 1;
    }
    else
    {
      int v118 = 0;
    }
    a2 = v120;
  }
  else
  {
    sub_EEF38C((uint64_t)v138);
    int v118 = 0;
  }
  sub_EE8244(v133, a1[5]);
  *(unsigned char *)a2 = 1;
  *(_OWORD *)(a2 + 8) = 0u;
  unint64_t v116 = (void ****)(a2 + 8);
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  unint64_t v19 = (void *)**a1;
  unint64_t v117 = (void *)(*a1)[1];
  if (v19 != v117)
  {
    unint64_t v115 = (char **)(a2 + 32);
    do
    {
      int64x2_t v136 = 0uLL;
      unint64_t v137 = 0;
      unsigned int v20 = sub_EB6EB0(v19);
      sub_C8A858((unint64_t *)&v136, v20);
      uint64_t v21 = sub_40EFE8((uint64_t)v19);
      unsigned int v119 = v19;
      for (uint64_t i = sub_52058((uint64_t)v19); v21 != i; v21 += 48)
      {
        while (1)
        {
          sub_EEA50C((uint64_t)v133, v21, (int *)a1 + 2, *((_DWORD *)a1 + 4), (uint64_t)__p);
          unint64_t v23 = v136.u64[1];
          int v24 = v137;
          if (v136.i64[1] >= (unint64_t)v137) {
            break;
          }
          *(void *)v136.i64[1] = 0;
          *(void *)(v23 + 8) = 0;
          *(void *)(v23 + 16) = 0;
          *(_OWORD *)unint64_t v23 = *(_OWORD *)__p;
          *(void *)(v23 + 16) = v122;
          v136.i64[1] = v23 + 24;
          v21 += 48;
          if (v21 == i) {
            goto LABEL_83;
          }
        }
        uint64_t v25 = v136.i64[0];
        unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v136.i64[1] - v136.i64[0]) >> 3) + 1;
        if (v26 > 0xAAAAAAAAAAAAAAALL) {
          sub_2E00();
        }
        if (0x5555555555555556 * ((uint64_t)&v137[-v136.i64[0]] >> 3) > v26) {
          unint64_t v26 = 0x5555555555555556 * ((uint64_t)&v137[-v136.i64[0]] >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v137[-v136.i64[0]] >> 3) >= 0x555555555555555) {
          unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v27 = v26;
        }
        unint64_t v130 = &v137;
        if (v27)
        {
          if (v27 > 0xAAAAAAAAAAAAAAALL) {
            sub_188D718();
          }
          uint64_t v28 = (char *)operator new(24 * v27);
        }
        else
        {
          uint64_t v28 = 0;
        }
        uint64_t v29 = &v28[8 * ((uint64_t)(v23 - v25) >> 3)];
        *(_OWORD *)uint64_t v29 = *(_OWORD *)__p;
        *((void *)v29 + 2) = v122;
        uint64_t v30 = &v28[24 * v27];
        __p[0] = 0;
        __p[1] = 0;
        int v122 = 0;
        unint64_t v31 = v29 + 24;
        v128.i64[1] = (uint64_t)(v29 + 24);
        uint64_t v129 = v30;
        if (v23 == v25)
        {
          int64x2_t v33 = vdupq_n_s64(v23);
        }
        else
        {
          do
          {
            *((void *)v29 - 3) = 0;
            *((void *)v29 - 2) = 0;
            v29 -= 24;
            *((void *)v29 + 2) = 0;
            long long v32 = *(_OWORD *)(v23 - 24);
            v23 -= 24;
            *(_OWORD *)uint64_t v29 = v32;
            *((void *)v29 + 2) = *(void *)(v23 + 16);
            *(void *)unint64_t v23 = 0;
            *(void *)(v23 + 8) = 0;
            *(void *)(v23 + 16) = 0;
          }
          while (v23 != v25);
          int64x2_t v33 = v136;
          unint64_t v31 = (char *)v128.i64[1];
          uint64_t v30 = v129;
          int v24 = v137;
        }
        v136.i64[0] = (uint64_t)v29;
        v136.i64[1] = (uint64_t)v31;
        int64x2_t v128 = v33;
        unint64_t v137 = v30;
        uint64_t v129 = v24;
        int v127 = (void *)v33.i64[0];
        sub_C8AEE8((uint64_t)&v127, (void **)v33.i64[0]);
        a2 = v120;
        if (v127) {
          operator delete(v127);
        }
        unint64_t v34 = (char *)__p[0];
        v136.i64[1] = (uint64_t)v31;
        if (__p[0])
        {
          BOOL v35 = __p[0];
          if (__p[1] != __p[0])
          {
            unsigned int v36 = (char *)__p[1] - 128;
            do
            {
              uint64_t v38 = (void *)*((void *)v36 + 9);
              if (v38)
              {
                *((void *)v36 + 10) = v38;
                operator delete(v38);
              }
              int v39 = (void *)*((void *)v36 + 6);
              if (v39)
              {
                *((void *)v36 + 7) = v39;
                operator delete(v39);
              }
              unint64_t v40 = (void *)*((void *)v36 + 3);
              if (v40)
              {
                *((void *)v36 + 4) = v40;
                operator delete(v40);
              }
              uint64_t v41 = *(void **)v36;
              if (*(void *)v36)
              {
                *((void *)v36 + 1) = v41;
                operator delete(v41);
              }
              unsigned int v42 = (void *)*((void *)v36 - 3);
              if (v42)
              {
                *((void *)v36 - 2) = v42;
                operator delete(v42);
              }
              uint64_t v43 = (void *)*((void *)v36 - 6);
              if (v43)
              {
                *((void *)v36 - 5) = v43;
                operator delete(v43);
              }
              uint64_t v44 = (void *)*((void *)v36 - 9);
              if (v44)
              {
                *((void *)v36 - 8) = v44;
                operator delete(v44);
              }
              uint64_t v45 = (void *)*((void *)v36 - 12);
              if (v45)
              {
                *((void *)v36 - 11) = v45;
                operator delete(v45);
              }
              uint64_t v46 = (void *)*((void *)v36 - 15);
              if (v46)
              {
                *((void *)v36 - 14) = v46;
                operator delete(v46);
              }
              unint64_t v47 = (void *)*((void *)v36 - 18);
              if (v47)
              {
                *((void *)v36 - 17) = v47;
                operator delete(v47);
              }
              long long v37 = v36 - 160;
              v36 -= 288;
            }
            while (v37 != v34);
            BOOL v35 = __p[0];
          }
          __p[1] = v34;
          operator delete(v35);
        }
      }
LABEL_83:
      v131[0] = 0;
      v131[1] = 0;
      uint64_t v132 = 0;
      unsigned int v48 = sub_EB6EB0(v119);
      unint64_t v49 = (char *)v131[1];
      unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * (((char *)v131[1] - (char *)v131[0]) >> 4);
      if (v48 <= v50)
      {
        if (v48 < v50)
        {
          BOOL v51 = (void **)((char *)v131[0] + 48 * v48);
          if (v131[1] != v51)
          {
            do
            {
              uint64_t v81 = *((void *)v49 - 3);
              if (v81)
              {
                uint64_t v82 = *((void *)v49 - 2);
                uint64_t v83 = (void *)*((void *)v49 - 3);
                if (v82 != v81)
                {
                  do
                  {
                    long long v84 = *(void **)(v82 - 40);
                    if (v84)
                    {
                      *(void *)(v82 - 32) = v84;
                      operator delete(v84);
                    }
                    v82 -= 56;
                  }
                  while (v82 != v81);
                  uint64_t v83 = (void *)*((void *)v49 - 3);
                }
                *((void *)v49 - 2) = v81;
                operator delete(v83);
              }
              unint64_t v85 = (void **)(v49 - 48);
              uint64_t v86 = *((void *)v49 - 6);
              if (v86)
              {
                uint64_t v87 = *((void *)v49 - 5);
                int v80 = (void *)*((void *)v49 - 6);
                if (v87 != v86)
                {
                  do
                  {
                    long long v88 = *(void **)(v87 - 72);
                    if (v88)
                    {
                      *(void *)(v87 - 64) = v88;
                      operator delete(v88);
                    }
                    unsigned int v89 = *(void **)(v87 - 96);
                    if (v89)
                    {
                      *(void *)(v87 - 88) = v89;
                      operator delete(v89);
                    }
                    v87 -= 136;
                  }
                  while (v87 != v86);
                  int v80 = *v85;
                }
                *((void *)v49 - 5) = v86;
                operator delete(v80);
              }
              v49 -= 48;
            }
            while (v85 != v51);
          }
          v131[1] = v51;
          a2 = v120;
        }
      }
      else
      {
        sub_C8B024((void ***)v131, v48 - v50);
      }
      if (v118)
      {
        sub_EEFAA4((uint64_t)&v127, a1[5], a1[3], v138);
        if (!*((unsigned char *)a1 + 32))
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_2439078;
        }
        uint64_t v52 = nullsub_1(a1[3]);
        uint64_t v53 = *(void *)v52;
        int v126 = *(_DWORD *)(v52 + 8);
        uint64_t v125 = v53;
        unsigned int v54 = sub_EB6EB0(v119);
        if (v54)
        {
          uint64_t v55 = 0;
          uint64_t v56 = v54;
          do
          {
            unsigned int v58 = (void *)nullsub_1(v119);
            sub_EEFB24((uint64_t)&v127, (char **)(*v58 + 48 * v55), v136.i64[0] + 24 * v55, (int *)&v125, __p);
            uint64_t v59 = v131[0];
            uint64_t v60 = (void **)((char *)v131[0] + 48 * v55);
            uint64_t v61 = (char *)*v60;
            if (*v60)
            {
              BOOL v62 = (char *)v60[1];
              unint64_t v63 = *v60;
              if (v62 != v61)
              {
                do
                {
                  unint64_t v64 = (void *)*((void *)v62 - 9);
                  if (v64)
                  {
                    *((void *)v62 - 8) = v64;
                    operator delete(v64);
                  }
                  unint64_t v65 = (void *)*((void *)v62 - 12);
                  if (v65)
                  {
                    *((void *)v62 - 11) = v65;
                    operator delete(v65);
                  }
                  v62 -= 136;
                }
                while (v62 != v61);
                unint64_t v63 = *v60;
              }
              v60[1] = v61;
              operator delete(v63);
              *uint64_t v60 = 0;
              v60[1] = 0;
              v60[2] = 0;
            }
            *(_OWORD *)uint64_t v60 = *(_OWORD *)__p;
            v60[2] = v122;
            __p[0] = 0;
            __p[1] = 0;
            int v122 = 0;
            unint64_t v66 = (char *)&v59[6 * v55];
            unsigned int v69 = (char *)*((void *)v66 + 3);
            unint64_t v67 = v66 + 24;
            BOOL v68 = v69;
            if (v69)
            {
              int v70 = (char *)&v59[6 * v55];
              BOOL v73 = (char *)*((void *)v70 + 4);
              int v71 = (char **)(v70 + 32);
              uint64_t v72 = v73;
              uint64_t v74 = v68;
              if (v73 != v68)
              {
                do
                {
                  unsigned int v75 = (void *)*((void *)v72 - 5);
                  if (v75)
                  {
                    *((void *)v72 - 4) = v75;
                    operator delete(v75);
                  }
                  v72 -= 56;
                }
                while (v72 != v68);
                uint64_t v74 = *(char **)v67;
              }
              *int v71 = v68;
              operator delete(v74);
              *(void *)unint64_t v67 = 0;
              *((void *)v67 + 1) = 0;
              *((void *)v67 + 2) = 0;
            }
            *(_OWORD *)unint64_t v67 = v123;
            v59[6 * v55 + 5] = v124;
            long long v123 = 0uLL;
            uint64_t v124 = 0;
            uint64_t v76 = (char *)__p[0];
            if (__p[0])
            {
              uint64_t v77 = (char *)__p[1];
              uint64_t v57 = __p[0];
              if (__p[1] != __p[0])
              {
                do
                {
                  uint64_t v78 = (void *)*((void *)v77 - 9);
                  if (v78)
                  {
                    *((void *)v77 - 8) = v78;
                    operator delete(v78);
                  }
                  unsigned int v79 = (void *)*((void *)v77 - 12);
                  if (v79)
                  {
                    *((void *)v77 - 11) = v79;
                    operator delete(v79);
                  }
                  v77 -= 136;
                }
                while (v77 != v76);
                uint64_t v57 = __p[0];
              }
              __p[1] = v76;
              operator delete(v57);
            }
            ++v55;
            a2 = v120;
          }
          while (v55 != v56);
        }
      }
      int v90 = *(void **)(a2 + 16);
      if ((unint64_t)v90 >= *(void *)(a2 + 24))
      {
        uint64_t v91 = sub_C8B2C4(v116, (uint64_t)&v136);
      }
      else
      {
        void *v90 = 0;
        v90[1] = 0;
        v90[2] = 0;
        *(int64x2_t *)int v90 = v136;
        v90[2] = v137;
        int64x2_t v136 = 0uLL;
        unint64_t v137 = 0;
        uint64_t v91 = (void ***)(v90 + 3);
      }
      *(void *)(a2 + 16) = v91;
      unint64_t v92 = *(void **)(a2 + 40);
      if ((unint64_t)v92 >= *(void *)(a2 + 48))
      {
        unint64_t v93 = sub_C8B43C(v115, (uint64_t)v131);
        long long v94 = (void **)v131[0];
        *(void *)(a2 + 40) = v93;
        if (v94)
        {
          unsigned int v95 = (char *)v131[1];
          uint64_t v96 = v94;
          if (v131[1] != v94)
          {
            do
            {
              uint64_t v98 = *((void *)v95 - 3);
              if (v98)
              {
                uint64_t v99 = *((void *)v95 - 2);
                uint64_t v100 = (void *)*((void *)v95 - 3);
                if (v99 != v98)
                {
                  do
                  {
                    uint64_t v101 = *(void **)(v99 - 40);
                    if (v101)
                    {
                      *(void *)(v99 - 32) = v101;
                      operator delete(v101);
                    }
                    v99 -= 56;
                  }
                  while (v99 != v98);
                  uint64_t v100 = (void *)*((void *)v95 - 3);
                }
                *((void *)v95 - 2) = v98;
                operator delete(v100);
              }
              uint64_t v102 = (void **)(v95 - 48);
              uint64_t v103 = *((void *)v95 - 6);
              if (v103)
              {
                uint64_t v104 = *((void *)v95 - 5);
                uint64_t v97 = (void *)*((void *)v95 - 6);
                if (v104 != v103)
                {
                  do
                  {
                    unint64_t v105 = *(void **)(v104 - 72);
                    if (v105)
                    {
                      *(void *)(v104 - 64) = v105;
                      operator delete(v105);
                    }
                    unint64_t v106 = *(void **)(v104 - 96);
                    if (v106)
                    {
                      *(void *)(v104 - 88) = v106;
                      operator delete(v106);
                    }
                    v104 -= 136;
                  }
                  while (v104 != v103);
                  uint64_t v97 = *v102;
                }
                *((void *)v95 - 5) = v103;
                operator delete(v97);
              }
              v95 -= 48;
            }
            while (v102 != v94);
            uint64_t v96 = (void **)v131[0];
            a2 = v120;
          }
          v131[1] = v94;
          operator delete(v96);
        }
      }
      else
      {
        void *v92 = 0;
        v92[1] = 0;
        v92[2] = 0;
        *(_OWORD *)unint64_t v92 = *(_OWORD *)v131;
        v92[2] = v132;
        *(void *)(a2 + 40) = v92 + 3;
      }
      if (v136.i64[0])
      {
        sub_C8A9E8((uint64_t)&v136, (void **)v136.i64[0]);
        operator delete((void *)v136.i64[0]);
      }
      unint64_t v19 = v119 + 3;
    }
    while (v119 + 3 != v117);
  }
  sub_C88A18((uint64_t)a1, (uint64_t)v116);
  std::string::size_type v109 = (void **)*a1;
  uint64_t v111 = (void *)**a1;
  unint64_t v110 = v109[1];
  *(void *)(a2 + 56) = vcvtad_u64_f64(sub_72688((uint64_t)v139));
  if (v110 == v111) {
    unsigned int v112 = 1000;
  }
  else {
    unsigned int v112 = vcvtad_u64_f64(0.0 / (double)(0xAAAAAAAAAAAAAAABLL * (v110 - v111)));
  }
  *(_DWORD *)(a2 + 80) = v112;
  return sub_3C7848(v133);
}

void sub_C8A754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_C8A770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_C8A784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  sub_1A668((void **)(v49 - 224));
  if (a49 < 0) {
    operator delete(__p);
  }
  sub_5450C((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_C8A7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a49 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_C8A858(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v5 = (void *)a1[1];
    unint64_t v15 = a1 + 2;
    uint64_t v6 = 24 * a2;
    uint64_t v7 = (char *)operator new(24 * a2);
    uint64_t v8 = &v7[24 * ((uint64_t)((uint64_t)v5 - v3) / 24)];
    if (v5 == (void *)v3)
    {
      int64x2_t v11 = vdupq_n_s64(v3);
      uint64_t v9 = &v7[24 * ((uint64_t)((uint64_t)v5 - v3) / 24)];
    }
    else
    {
      uint64_t v9 = &v7[24 * ((uint64_t)((uint64_t)v5 - v3) / 24)];
      do
      {
        long long v10 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *((void *)v9 + 2) = v5[2];
        void *v5 = 0;
        v5[1] = 0;
        void v5[2] = 0;
      }
      while (v5 != (void *)v3);
      int64x2_t v11 = *(int64x2_t *)a1;
      unint64_t v2 = a1[2];
    }
    *a1 = (unint64_t)v9;
    a1[1] = (unint64_t)v8;
    int64x2_t v13 = v11;
    a1[2] = (unint64_t)&v7[v6];
    unint64_t v14 = v2;
    long long __p = (void *)v11.i64[0];
    sub_C8AEE8((uint64_t)&__p, (void **)v11.i64[0]);
    if (__p) {
      operator delete(__p);
    }
  }
}

void ***sub_C8A97C(void ***a1)
{
  unint64_t v2 = *a1;
  if (*a1)
  {
    unint64_t v3 = a1[1];
    BOOL v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v3 -= 6;
        sub_C8ABB4((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v2);
      BOOL v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_C8A9E8(uint64_t a1, void **a2)
{
  BOOL v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = *(void ***)(a1 + 8);
    do
    {
      uint64_t v8 = *(v5 - 3);
      v5 -= 3;
      uint64_t v7 = v8;
      if (v8)
      {
        uint64_t v9 = *(v4 - 2);
        uint64_t v6 = v7;
        if (v9 != v7)
        {
          uint64_t v10 = (uint64_t)v9 - 128;
          do
          {
            uint64_t v12 = *(void **)(v10 + 72);
            if (v12)
            {
              *(void *)(v10 + 80) = v12;
              operator delete(v12);
            }
            int64x2_t v13 = *(void **)(v10 + 48);
            if (v13)
            {
              *(void *)(v10 + 56) = v13;
              operator delete(v13);
            }
            unint64_t v14 = *(void **)(v10 + 24);
            if (v14)
            {
              *(void *)(v10 + 32) = v14;
              operator delete(v14);
            }
            unint64_t v15 = *(void **)v10;
            if (*(void *)v10)
            {
              *(void *)(v10 + 8) = v15;
              operator delete(v15);
            }
            char v16 = *(void **)(v10 - 24);
            if (v16)
            {
              *(void *)(v10 - 16) = v16;
              operator delete(v16);
            }
            unsigned int v17 = *(void **)(v10 - 48);
            if (v17)
            {
              *(void *)(v10 - 40) = v17;
              operator delete(v17);
            }
            int v18 = *(void **)(v10 - 72);
            if (v18)
            {
              *(void *)(v10 - 64) = v18;
              operator delete(v18);
            }
            unint64_t v19 = *(void **)(v10 - 96);
            if (v19)
            {
              *(void *)(v10 - 88) = v19;
              operator delete(v19);
            }
            unsigned int v20 = *(void **)(v10 - 120);
            if (v20)
            {
              *(void *)(v10 - 112) = v20;
              operator delete(v20);
            }
            uint64_t v21 = *(void **)(v10 - 144);
            if (v21)
            {
              *(void *)(v10 - 136) = v21;
              operator delete(v21);
            }
            int64x2_t v11 = (void *)(v10 - 160);
            v10 -= 288;
          }
          while (v11 != v7);
          uint64_t v6 = *v5;
        }
        *(v4 - 2) = v7;
        operator delete(v6);
      }
      BOOL v4 = v5;
    }
    while (v5 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void *sub_C8AB20(void *a1)
{
  unint64_t v2 = (void *)a1[41];
  if (v2)
  {
    a1[42] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[38];
  if (v3)
  {
    a1[39] = v3;
    operator delete(v3);
  }
  BOOL v4 = (void *)a1[33];
  if (v4)
  {
    a1[34] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[30];
  if (v5)
  {
    a1[31] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[24];
  if (v6)
  {
    a1[25] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[21];
  if (v7)
  {
    a1[22] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[3];
  if (v8)
  {
    a1[4] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_C8ABB4(uint64_t a1, void **a2)
{
  unint64_t v3 = (char *)a2[3];
  if (v3)
  {
    BOOL v4 = (char *)a2[4];
    uint64_t v5 = a2[3];
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 5);
        if (v6)
        {
          *((void *)v4 - 4) = v6;
          operator delete(v6);
        }
        v4 -= 56;
      }
      while (v4 != v3);
      uint64_t v5 = a2[3];
    }
    a2[4] = v3;
    operator delete(v5);
  }
  uint64_t v7 = (char *)*a2;
  if (*a2)
  {
    uint64_t v8 = (char *)a2[1];
    uint64_t v9 = *a2;
    if (v8 == v7)
    {
      a2[1] = v7;
    }
    else
    {
      do
      {
        uint64_t v10 = (void *)*((void *)v8 - 9);
        if (v10)
        {
          *((void *)v8 - 8) = v10;
          operator delete(v10);
        }
        int64x2_t v11 = (void *)*((void *)v8 - 12);
        if (v11)
        {
          *((void *)v8 - 11) = v11;
          operator delete(v11);
        }
        v8 -= 136;
      }
      while (v8 != v7);
      uint64_t v9 = *a2;
      a2[1] = v7;
    }
    operator delete(v9);
  }
}

uint64_t sub_C8ACB8(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    unint64_t v3 = (void **)(a1 + 32);
    unint64_t v2 = *(void ***)(a1 + 32);
    if (v2)
    {
      sub_C8ADA8(a1 + 32, v2);
      operator delete(*v3);
    }
    BOOL v4 = *(void ****)(a1 + 8);
    if (v4)
    {
      uint64_t v5 = *(void ****)(a1 + 16);
      uint64_t v6 = *(void **)(a1 + 8);
      if (v5 != v4)
      {
        uint64_t v7 = v5 - 3;
        do
        {
          if (*v7)
          {
            sub_C8A9E8((uint64_t)v7, *v7);
            operator delete(*v7);
          }
          BOOL v8 = v7 == v4;
          v7 -= 3;
        }
        while (!v8);
        uint64_t v6 = *(void **)(a1 + 8);
      }
      *(void *)(a1 + 16) = v4;
LABEL_20:
      operator delete(v6);
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 24);
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v6 = *(void **)(a1 + 24);
      if (v10 != v9)
      {
        do
        {
          if (*(char *)(v10 - 1) < 0) {
            operator delete(*(void **)(v10 - 24));
          }
          v10 -= 32;
        }
        while (v10 != v9);
        uint64_t v6 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 32) = v9;
      goto LABEL_20;
    }
  }
  return a1;
}

void sub_C8ADA8(uint64_t a1, void **a2)
{
  BOOL v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = *(void ***)(a1 + 8);
    do
    {
      BOOL v8 = (void **)*(v5 - 3);
      v5 -= 3;
      uint64_t v7 = v8;
      if (v8)
      {
        uint64_t v9 = (void **)*(v4 - 2);
        uint64_t v6 = v7;
        if (v9 != v7)
        {
          do
          {
            int64x2_t v11 = (char *)*(v9 - 3);
            if (v11)
            {
              uint64_t v12 = (char *)*(v9 - 2);
              int64x2_t v13 = *(v9 - 3);
              if (v12 != v11)
              {
                do
                {
                  unint64_t v14 = (void *)*((void *)v12 - 5);
                  if (v14)
                  {
                    *((void *)v12 - 4) = v14;
                    operator delete(v14);
                  }
                  v12 -= 56;
                }
                while (v12 != v11);
                int64x2_t v13 = *(v9 - 3);
              }
              *(v9 - 2) = v11;
              operator delete(v13);
            }
            unint64_t v15 = v9 - 6;
            char v16 = (char *)*(v9 - 6);
            if (v16)
            {
              unsigned int v17 = (char *)*(v9 - 5);
              uint64_t v10 = *(v9 - 6);
              if (v17 != v16)
              {
                do
                {
                  int v18 = (void *)*((void *)v17 - 9);
                  if (v18)
                  {
                    *((void *)v17 - 8) = v18;
                    operator delete(v18);
                  }
                  unint64_t v19 = (void *)*((void *)v17 - 12);
                  if (v19)
                  {
                    *((void *)v17 - 11) = v19;
                    operator delete(v19);
                  }
                  v17 -= 136;
                }
                while (v17 != v16);
                uint64_t v10 = *v15;
              }
              *(v9 - 5) = v16;
              operator delete(v10);
            }
            v9 -= 6;
          }
          while (v15 != v7);
          uint64_t v6 = *v5;
        }
        *(v4 - 2) = v7;
        operator delete(v6);
      }
      BOOL v4 = v5;
    }
    while (v5 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void sub_C8AEE8(uint64_t a1, void **a2)
{
  unint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    uint64_t v5 = *(void ***)(a1 + 16);
    do
    {
      BOOL v8 = *(v5 - 3);
      v5 -= 3;
      uint64_t v7 = v8;
      *(void *)(a1 + 16) = v5;
      if (v8)
      {
        uint64_t v9 = *(v2 - 2);
        uint64_t v6 = v7;
        if (v9 != v7)
        {
          uint64_t v10 = (uint64_t)v9 - 128;
          do
          {
            uint64_t v12 = *(void **)(v10 + 72);
            if (v12)
            {
              *(void *)(v10 + 80) = v12;
              operator delete(v12);
            }
            int64x2_t v13 = *(void **)(v10 + 48);
            if (v13)
            {
              *(void *)(v10 + 56) = v13;
              operator delete(v13);
            }
            unint64_t v14 = *(void **)(v10 + 24);
            if (v14)
            {
              *(void *)(v10 + 32) = v14;
              operator delete(v14);
            }
            unint64_t v15 = *(void **)v10;
            if (*(void *)v10)
            {
              *(void *)(v10 + 8) = v15;
              operator delete(v15);
            }
            char v16 = *(void **)(v10 - 24);
            if (v16)
            {
              *(void *)(v10 - 16) = v16;
              operator delete(v16);
            }
            unsigned int v17 = *(void **)(v10 - 48);
            if (v17)
            {
              *(void *)(v10 - 40) = v17;
              operator delete(v17);
            }
            int v18 = *(void **)(v10 - 72);
            if (v18)
            {
              *(void *)(v10 - 64) = v18;
              operator delete(v18);
            }
            unint64_t v19 = *(void **)(v10 - 96);
            if (v19)
            {
              *(void *)(v10 - 88) = v19;
              operator delete(v19);
            }
            unsigned int v20 = *(void **)(v10 - 120);
            if (v20)
            {
              *(void *)(v10 - 112) = v20;
              operator delete(v20);
            }
            uint64_t v21 = *(void **)(v10 - 144);
            if (v21)
            {
              *(void *)(v10 - 136) = v21;
              operator delete(v21);
            }
            int64x2_t v11 = (void *)(v10 - 160);
            v10 -= 288;
          }
          while (v11 != v7);
          uint64_t v6 = *v5;
        }
        *(v2 - 2) = v7;
        operator delete(v6);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      unint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_C8B024(void ***a1, unint64_t a2)
{
  BOOL v4 = a1[2];
  uint64_t v5 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (char *)v5) >> 4) >= a2)
  {
    if (a2)
    {
      int64x2_t v11 = &v5[6 * a2];
      uint64_t v12 = 48 * a2;
      do
      {
        sub_47E0E4(v5);
        v5 += 6;
        v12 -= 48;
      }
      while (v12);
      uint64_t v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)*a1) >> 4);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x555555555555555) {
      sub_2E00();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (char *)*a1) >> 4);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v9 = 0x555555555555555;
    }
    else {
      unint64_t v9 = v7;
    }
    uint64_t v24 = (uint64_t)(a1 + 2);
    if (v9)
    {
      if (v9 > 0x555555555555555) {
        sub_188D718();
      }
      uint64_t v10 = (char *)operator new(48 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    int64x2_t v13 = &v10[48 * v6];
    uint64_t v22 = (void **)v13;
    unint64_t v23 = (void **)&v10[48 * v9];
    uint64_t v14 = 48 * a2;
    unint64_t v15 = (void **)&v13[v14];
    do
    {
      sub_47E0E4(v13);
      v13 += 48;
      v14 -= 48;
    }
    while (v14);
    char v16 = *a1;
    unsigned int v17 = a1[1];
    if (v17 == *a1)
    {
      *a1 = v22;
      a1[1] = v15;
      a1[2] = v23;
    }
    else
    {
      uint64_t v18 = 0;
      do
      {
        unint64_t v19 = &v22[v18];
        unsigned int v20 = &v17[v18];
        *(v19 - 6) = 0;
        *(v19 - 5) = 0;
        *(v19 - 4) = 0;
        *((_OWORD *)v19 - 3) = *(_OWORD *)&v17[v18 - 6];
        *(v19 - 4) = v17[v18 - 4];
        *(v20 - 6) = 0;
        *(v20 - 5) = 0;
        *(v20 - 4) = 0;
        *(v19 - 3) = 0;
        *(v19 - 2) = 0;
        *(v19 - 1) = 0;
        *(_OWORD *)(v19 - 3) = *(_OWORD *)&v17[v18 - 3];
        *(v19 - 1) = v17[v18 - 1];
        *(v20 - 3) = 0;
        *(v20 - 2) = 0;
        *(v20 - 1) = 0;
        v18 -= 6;
      }
      while (&v17[v18] != v16);
      uint64_t v21 = *a1;
      unsigned int v17 = a1[1];
      *a1 = &v22[v18];
      a1[1] = v15;
      a1[2] = v23;
      if (v17 != v21)
      {
        do
        {
          v17 -= 6;
          sub_C8ABB4(v24, v17);
        }
        while (v17 != v21);
        unsigned int v17 = v21;
      }
    }
    if (v17) {
      operator delete(v17);
    }
  }
}

void sub_C8B24C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_C8B254(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_C8B26C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_C8B26C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 48;
    sub_C8ABB4(v4, (void **)(i - 48));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ***sub_C8B2C4(void ****a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (a1[2] - *a1) > v4) {
    unint64_t v4 = 0x5555555555555556 * (a1[2] - *a1);
  }
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = &v7[24 * v3];
  unint64_t v9 = (void ***)&v7[24 * v6];
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v10 = (void ***)(v8 + 24);
  int64x2_t v11 = *a1;
  uint64_t v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = (void ***)v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      int64x2_t v13 = v8;
      *((void *)v8 - 2) = 0;
      *((void *)v8 - 1) = 0;
      long long v14 = *(_OWORD *)(v12 - 3);
      v12 -= 3;
      *(_OWORD *)(v8 - 24) = v14;
      v8 -= 24;
      *((void *)v13 - 1) = v12[2];
      void *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
    }
    while (v12 != v11);
    uint64_t v12 = *a1;
    unint64_t v15 = a1[1];
    *a1 = (void ***)v8;
    a1[1] = v10;
    a1[2] = v9;
    if (v15 == v12)
    {
      uint64_t v12 = v15;
      if (!v15) {
        return v10;
      }
      goto LABEL_20;
    }
    char v16 = v15 - 3;
    do
    {
      if (*v16)
      {
        sub_C8A9E8((uint64_t)v16, *v16);
        operator delete(*v16);
      }
      BOOL v17 = v16 == v12;
      v16 -= 3;
    }
    while (!v17);
  }
  if (v12) {
LABEL_20:
  }
    operator delete(v12);
  return v10;
}

char *sub_C8B43C(char **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  unsigned int v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = &v7[24 * v3];
  unint64_t v9 = &v7[24 * v6];
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v10 = v8 + 24;
  v18.i64[1] = (uint64_t)(v8 + 24);
  unint64_t v19 = v9;
  uint64_t v12 = *a1;
  int64x2_t v11 = a1[1];
  if (v11 == *a1)
  {
    int64x2_t v14 = vdupq_n_s64((unint64_t)v11);
  }
  else
  {
    do
    {
      *((void *)v8 - 3) = 0;
      *((void *)v8 - 2) = 0;
      v8 -= 24;
      *((void *)v8 + 2) = 0;
      long long v13 = *(_OWORD *)(v11 - 24);
      v11 -= 24;
      *(_OWORD *)unint64_t v8 = v13;
      *((void *)v8 + 2) = *((void *)v11 + 2);
      *(void *)int64x2_t v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = 0;
    }
    while (v11 != v12);
    int64x2_t v14 = *(int64x2_t *)a1;
    uint64_t v10 = (char *)v18.i64[1];
    unint64_t v9 = v19;
  }
  *a1 = v8;
  a1[1] = v10;
  int64x2_t v18 = v14;
  unint64_t v15 = a1[2];
  a1[2] = v9;
  unint64_t v19 = v15;
  long long __p = (void *)v14.i64[0];
  sub_C8B5A0((uint64_t)&__p, (void **)v14.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v10;
}

void sub_C8B5A0(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    uint64_t v5 = *(void ***)(a1 + 16);
    do
    {
      unint64_t v8 = (void **)*(v5 - 3);
      v5 -= 3;
      unint64_t v7 = v8;
      *(void *)(a1 + 16) = v5;
      if (v8)
      {
        unint64_t v9 = (void **)*(v2 - 2);
        unint64_t v6 = v7;
        if (v9 != v7)
        {
          do
          {
            int64x2_t v11 = (char *)*(v9 - 3);
            if (v11)
            {
              uint64_t v12 = (char *)*(v9 - 2);
              long long v13 = *(v9 - 3);
              if (v12 != v11)
              {
                do
                {
                  int64x2_t v14 = (void *)*((void *)v12 - 5);
                  if (v14)
                  {
                    *((void *)v12 - 4) = v14;
                    operator delete(v14);
                  }
                  v12 -= 56;
                }
                while (v12 != v11);
                long long v13 = *(v9 - 3);
              }
              *(v9 - 2) = v11;
              operator delete(v13);
            }
            unint64_t v15 = v9 - 6;
            char v16 = (char *)*(v9 - 6);
            if (v16)
            {
              BOOL v17 = (char *)*(v9 - 5);
              uint64_t v10 = *(v9 - 6);
              if (v17 != v16)
              {
                do
                {
                  int64x2_t v18 = (void *)*((void *)v17 - 9);
                  if (v18)
                  {
                    *((void *)v17 - 8) = v18;
                    operator delete(v18);
                  }
                  unint64_t v19 = (void *)*((void *)v17 - 12);
                  if (v19)
                  {
                    *((void *)v17 - 11) = v19;
                    operator delete(v19);
                  }
                  v17 -= 136;
                }
                while (v17 != v16);
                uint64_t v10 = *v15;
              }
              *(v9 - 5) = v16;
              operator delete(v10);
            }
            v9 -= 6;
          }
          while (v15 != v7);
          unint64_t v6 = *v5;
        }
        *(v2 - 2) = v7;
        operator delete(v6);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

double sub_C8B6E4()
{
  unk_25E0F9F = 16641;
  word_25E0F88 = 65;
  byte_25E0FB7 = 1;
  byte_25E0FA1 = 0;
  qword_25E0FB8 = (uint64_t)operator new(0x38uLL);
  unk_25E0FC0 = xmmword_20B9A20;
  strcpy((char *)qword_25E0FB8, "routing/route-planning/eta/CyclingBaselineETA.json");
  double result = *(double *)"ngBaselineETA.json";
  byte_25E0FE7 = 3;
  dword_25E0FD0 = 7105633;
  return result;
}

uint64_t sub_C8B774@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v13);
  sub_13F1D90(v9, 0, 0);
  unint64_t v11 = 0;
  sub_DF59D4((uint64_t)&v12, (uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), (uint64_t *)(a1 + 72), (unsigned char *)(a1 + 96), (uint64_t)v7);
  if ((v10 & 2) != 0)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
    if (v10) {
      unint64_t v4 = (void *)*v4;
    }
  }
  if ((v8 & 2) != 0)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
    if (v8) {
      uint64_t v5 = (void *)*v5;
    }
  }
  if (v4 == v5) {
    sub_13F3678((uint64_t)v9, (uint64_t)v7);
  }
  else {
    sub_13F3580((uint64_t)v9, (uint64_t)v7);
  }
  sub_13F22FC(v7);
  unint64_t v11 = vcvtad_u64_f64(sub_72688((uint64_t)v13));
  *(unsigned char *)a2 = 1;
  sub_C5EEF0(a2 + 8, (uint64_t)v9);
  *(void *)(a2 + 176) = v11;
  return sub_13F22FC(v9);
}

void sub_C8B880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_C8B894()
{
  byte_25E0FFF = 1;
  word_25E0FE8 = 65;
  byte_25E1017 = 1;
  word_25E1000 = 65;
  char v1 = 7;
  strcpy((char *)v0, "UNKNOWN");
  int v2 = 0;
  char v4 = 14;
  strcpy((char *)v3, "ROUTES_THROUGH");
  int v5 = 1;
  char v7 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v8 = 3;
  char v10 = 11;
  strcpy((char *)v9, "ROUTES_FROM");
  int v11 = 2;
  xmmword_25E1078 = 0u;
  *(_OWORD *)&qword_25E1088 = 0u;
  dword_25E1098 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E1078, (uint64_t)v0, (uint64_t)v0);
  sub_3A6EF0((uint64_t)&xmmword_25E1078, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E1078, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E1078, (uint64_t)v9, (uint64_t)v9);
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v3[0]);
      if ((v1 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v0[0]);
      goto LABEL_5;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v4 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v1 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E102F = 8;
  strcpy((char *)&qword_25E1018, "any_mode");
  byte_25E1047 = 7;
  strcpy((char *)&dword_25E1030, "cycling");
  byte_25E105F = 7;
  strcpy((char *)&dword_25E1048, "driving");
  byte_25E1077 = 7;
  strcpy((char *)&dword_25E1060, "walking");
}

void sub_C8BAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E1088) {
    sub_20AF24C((void **)qword_25E1088);
  }
  long long v37 = (void *)xmmword_25E1078;
  *(void *)&xmmword_25E1078 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_C8BB90(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v29);
  *(_OWORD *)long long __p = 0u;
  long long v28 = 0u;
  sub_92BE10(v26, *(void **)(a1 + 136));
  unsigned int v20 = 0;
  uint64_t v21 = 0;
  unint64_t v22 = 0;
  char v4 = *(long long **)a1;
  int v5 = *(long long **)(a1 + 8);
  if (*(long long **)a1 != v5)
  {
    unint64_t v6 = 0;
    do
    {
      if (v6 >= v22)
      {
        unint64_t v6 = sub_C8BE0C((uint64_t *)&v20, v4);
      }
      else
      {
        sub_9F761C(v6, v4);
        v6 += 176;
      }
      uint64_t v21 = (void *)v6;
      v4 += 11;
    }
    while (v4 != v5);
  }
  sub_92BE68((uint64_t)v26, (uint64_t *)&v20, (int *)(a1 + 24), (uint64_t)&v23);
  char v7 = (char *)__p[0];
  if (__p[0])
  {
    int v8 = (char *)__p[1];
    unint64_t v9 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        uint64_t v10 = *((void *)v8 - 3);
        if (v10)
        {
          uint64_t v11 = *((void *)v8 - 2);
          char v12 = (void *)*((void *)v8 - 3);
          if (v11 != v10)
          {
            do
              uint64_t v11 = sub_4D4B58(v11 - 160);
            while (v11 != v10);
            char v12 = (void *)*((void *)v8 - 3);
          }
          *((void *)v8 - 2) = v10;
          operator delete(v12);
        }
        v8 -= 48;
      }
      while (v8 != v7);
      unint64_t v9 = __p[0];
    }
    __p[1] = v7;
    operator delete(v9);
  }
  long long v13 = v23;
  int64x2_t v14 = v24;
  __p[0] = v23;
  __p[1] = v24;
  uint64_t v15 = v25;
  *(void *)&long long v28 = v25;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  char v16 = v20;
  if (v20)
  {
    BOOL v17 = v21;
    int64x2_t v18 = v20;
    if (v21 != v20)
    {
      do
      {
        v17 -= 22;
        sub_9F58F0((uint64_t)&v22, v17);
      }
      while (v17 != v16);
      int64x2_t v18 = v20;
      long long v13 = __p[0];
      int64x2_t v14 = __p[1];
      uint64_t v15 = v28;
    }
    uint64_t v21 = v16;
    operator delete(v18);
  }
  double v19 = sub_72688((uint64_t)v29);
  *(unsigned char *)a2 = 1;
  *(void *)(a2 + 8) = v13;
  *(void *)(a2 + 16) = v14;
  *(void *)(a2 + 24) = v15;
  *(void *)(a2 + 32) = vcvtad_u64_f64(v19);
}

void sub_C8BD4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_C8BDA0((uint64_t *)va);
  sub_92C2E0((void **)va1);
  _Unwind_Resume(a1);
}

void sub_C8BD80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_C8BDA0((uint64_t *)va);
  sub_92C2E0((void **)va1);
  _Unwind_Resume(a1);
}

void *sub_C8BDA0(void *a1)
{
  int v2 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    char v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        v3 -= 22;
        sub_9F58F0((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v2);
      char v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_C8BE0C(uint64_t *a1, long long *a2)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x1745D1745D1745DLL) {
    sub_2E00();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v6 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v20 = (uint64_t)(a1 + 2);
  if (v6)
  {
    if (v6 > 0x1745D1745D1745DLL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(176 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v18 = (uint64_t)&v7[176 * v3];
  double v19 = &v7[176 * v6];
  sub_9F761C(v18, a2);
  uint64_t v8 = v18 + 176;
  uint64_t v9 = (void *)*a1;
  uint64_t v10 = (void *)a1[1];
  if (v10 == (void *)*a1)
  {
    *a1 = v18;
    a1[1] = v8;
    a1[2] = (uint64_t)v19;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v18 + v11 * 8;
      uint64_t v13 = &v10[v11];
      long long v14 = *(_OWORD *)&v10[v11 - 22];
      *(void *)(v12 - 162) = *(void *)((char *)&v10[v11 - 20] - 2);
      *(_OWORD *)(v12 - 176) = v14;
      *(void *)(v12 - 144) = 0;
      *(void *)(v12 - 136) = 0;
      *(void *)(v12 - 152) = 0;
      *(_OWORD *)(v12 - 152) = *(_OWORD *)&v10[v11 - 19];
      *(void *)(v12 - 136) = v10[v11 - 17];
      *(v13 - 19) = 0;
      *(v13 - 18) = 0;
      *(v13 - 17) = 0;
      *(void *)(v12 - 128) = 0;
      *(void *)(v12 - 120) = 0;
      *(void *)(v12 - 112) = 0;
      *(_OWORD *)(v12 - 128) = *(_OWORD *)&v10[v11 - 16];
      *(void *)(v12 - 112) = v10[v11 - 14];
      *(v13 - 16) = 0;
      *(v13 - 15) = 0;
      *(v13 - 14) = 0;
      *(void *)(v12 - 104) = 0;
      *(void *)(v12 - 96) = 0;
      *(void *)(v12 - 88) = 0;
      *(_OWORD *)(v12 - 104) = *(_OWORD *)&v10[v11 - 13];
      *(void *)(v12 - 88) = v10[v11 - 11];
      *(v13 - 13) = 0;
      *(v13 - 12) = 0;
      *(v13 - 11) = 0;
      *(void *)(v12 - 80) = 0;
      *(void *)(v12 - 72) = 0;
      *(void *)(v12 - 64) = 0;
      *(_OWORD *)(v12 - 80) = *(_OWORD *)&v10[v11 - 10];
      *(void *)(v12 - 64) = v10[v11 - 8];
      *(v13 - 10) = 0;
      *(v13 - 9) = 0;
      *(v13 - 8) = 0;
      uint64_t v15 = v10[v11 - 7];
      *(void *)(v12 - 51) = *(void *)((char *)&v10[v11 - 6] - 3);
      *(void *)(v12 - 32) = 0;
      *(void *)(v12 - 24) = 0;
      *(void *)(v12 - 40) = 0;
      *(void *)(v12 - 56) = v15;
      *(_OWORD *)(v12 - 40) = *(_OWORD *)&v10[v11 - 5];
      *(void *)(v12 - 24) = v10[v11 - 3];
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 3) = 0;
      *(_OWORD *)(v12 - 16) = *(_OWORD *)&v10[v11 - 2];
      v11 -= 22;
    }
    while (&v10[v11] != v9);
    char v16 = (void *)*a1;
    uint64_t v10 = (void *)a1[1];
    *a1 = v18 + v11 * 8;
    a1[1] = v8;
    a1[2] = (uint64_t)v19;
    if (v10 != v16)
    {
      do
      {
        v10 -= 22;
        sub_9F58F0(v20, v10);
      }
      while (v10 != v16);
      uint64_t v10 = v16;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v18 + 176;
}

void sub_C8C064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A14D44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C8C078()
{
  byte_25E10B7 = 1;
  word_25E10A0 = 65;
  byte_25E10CF = 1;
  word_25E10B8 = 65;
  char v1 = 7;
  strcpy((char *)v0, "UNKNOWN");
  int v2 = 0;
  char v4 = 14;
  strcpy((char *)v3, "ROUTES_THROUGH");
  int v5 = 1;
  char v7 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v8 = 3;
  char v10 = 11;
  strcpy((char *)v9, "ROUTES_FROM");
  int v11 = 2;
  xmmword_25E1130 = 0u;
  *(_OWORD *)&qword_25E1140 = 0u;
  dword_25E1150 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E1130, (uint64_t)v0, (uint64_t)v0);
  sub_3A6EF0((uint64_t)&xmmword_25E1130, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E1130, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E1130, (uint64_t)v9, (uint64_t)v9);
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v3[0]);
      if ((v1 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v0[0]);
      goto LABEL_5;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v4 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v1 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E10E7 = 8;
  strcpy((char *)&qword_25E10D0, "any_mode");
  byte_25E10FF = 7;
  strcpy((char *)&dword_25E10E8, "cycling");
  byte_25E1117 = 7;
  strcpy((char *)&dword_25E1100, "driving");
  byte_25E112F = 7;
  strcpy((char *)&dword_25E1118, "walking");
}

void sub_C8C2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E1140) {
    sub_20AF290((void **)qword_25E1140);
  }
  long long v37 = (void *)xmmword_25E1130;
  *(void *)&xmmword_25E1130 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_C8C374(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v44);
  *(_OWORD *)unsigned int v42 = 0u;
  long long v43 = 0u;
  int v4 = *(_DWORD *)(a1 + 24);
  uint64_t v34 = a1 + 24;
  BOOL v35 = *(uint64_t **)(a1 + 136);
  int v5 = (uint64_t *)sub_374EF4(v35);
  uint64_t v32 = a2;
  sub_688A04(v5, 3u, v4, &v40);
  unint64_t v6 = *(uint64_t **)a1;
  char v7 = *(uint64_t **)(a1 + 8);
  if (*(uint64_t **)a1 != v7)
  {
    int v8 = "{RouteName}";
    int64x2_t v33 = *(uint64_t **)(a1 + 8);
    while (1)
    {
      uint64_t v9 = (char *)v42[1];
      if (v42[1] >= (void *)v43)
      {
        char v10 = (char *)sub_C8C934((uint64_t *)v42, v6);
      }
      else
      {
        sub_C8CAC8((uint64_t)v42[1], v6);
        char v10 = v9 + 376;
      }
      v42[1] = v10;
      int v11 = (long long **)(v10 - 376);
      if (!sub_45FB38(v6))
      {
        uint64_t v12 = sub_45FB28(v6, 0);
        sub_92D664(v12, v35, v34, &v45);
        std::string::size_type size = v45.__r_.__value_.__l.__size_;
        long long v14 = (long long *)v45.__r_.__value_.__r.__words[0];
        if (v45.__r_.__value_.__r.__words[0] != v45.__r_.__value_.__l.__size_)
        {
          uint64_t v15 = v8;
          char v16 = (char **)(v10 - 368);
          BOOL v17 = (char *)*((void *)v10 - 46);
          do
          {
            if ((unint64_t)v17 >= *((void *)v10 - 45))
            {
              BOOL v17 = (char *)sub_5B09D8((int64x2_t *)(v10 - 376), v14);
            }
            else
            {
              sub_4AA8E0(v17, v14);
              v17 += 152;
              void *v16 = v17;
            }
            void *v16 = v17;
            v14 += 11;
          }
          while (v14 != (long long *)size);
          std::string::size_type size = v45.__r_.__value_.__r.__words[0];
          int v8 = v15;
          char v7 = v33;
        }
        if (size) {
          break;
        }
      }
LABEL_34:
      if (*v11 != *((long long **)v10 - 46))
      {
        sub_C86CD0(&v45, v8, *v11);
        sub_2AAA4((uint64_t)v38, (uint64_t)&v45, 1);
        if (v47 < 0)
        {
          operator delete(v46);
          if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_37;
          }
        }
        else if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_37;
        }
        operator delete(v45.__r_.__value_.__l.__data_);
LABEL_37:
        long long __p = operator new(0x20uLL);
        long long v37 = xmmword_20B91A0;
        strcpy((char *)__p, "Proactive_Walking_RouteName");
        sub_6581AC((uint64_t)&__p, (uint64_t)v38, v40, 0, &v45);
        if (SHIBYTE(v37) < 0)
        {
          operator delete(__p);
          unint64_t v21 = *((void *)v10 - 5);
          if (v21 < *((void *)v10 - 4)) {
            goto LABEL_39;
          }
        }
        else
        {
          unint64_t v21 = *((void *)v10 - 5);
          if (v21 < *((void *)v10 - 4))
          {
LABEL_39:
            sub_5F3D48(v21, (uint64_t)&v45);
            uint64_t v22 = v21 + 160;
            *((void *)v10 - 5) = v21 + 160;
LABEL_44:
            *((void *)v10 - 5) = v22;
            if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              unint64_t v23 = v39;
              if (v39) {
                goto LABEL_51;
              }
              goto LABEL_54;
            }
            operator delete(v45.__r_.__value_.__l.__data_);
            unint64_t v23 = v39;
            if (!v39)
            {
LABEL_54:
              uint64_t v25 = v38[0];
              v38[0] = 0;
              if (v25) {
                operator delete(v25);
              }
              goto LABEL_3;
            }
            while (1)
            {
LABEL_51:
              uint64_t v24 = *(char **)v23;
              if (v23[63] < 0)
              {
                operator delete(*((void **)v23 + 5));
                if ((v23[39] & 0x80000000) == 0) {
                  goto LABEL_50;
                }
LABEL_53:
                operator delete(*((void **)v23 + 2));
                operator delete(v23);
                unint64_t v23 = v24;
                if (!v24) {
                  goto LABEL_54;
                }
              }
              else
              {
                if (v23[39] < 0) {
                  goto LABEL_53;
                }
LABEL_50:
                operator delete(v23);
                unint64_t v23 = v24;
                if (!v24) {
                  goto LABEL_54;
                }
              }
            }
          }
        }
        uint64_t v22 = sub_5B10A0((uint64_t *)v10 - 6, (uint64_t)&v45);
        goto LABEL_44;
      }
LABEL_3:
      v6 += 15;
      if (v6 == v7) {
        goto LABEL_56;
      }
    }
    std::string::size_type v18 = v45.__r_.__value_.__l.__size_;
    double v19 = (void *)size;
    if (v45.__r_.__value_.__l.__size_ == size)
    {
LABEL_33:
      v45.__r_.__value_.__l.__size_ = size;
      operator delete(v19);
      goto LABEL_34;
    }
    while (1)
    {
      uint64_t v20 = *(void **)(v18 - 24);
      if (v20)
      {
        *(void *)(v18 - 16) = v20;
        operator delete(v20);
      }
      if (*(char *)(v18 - 25) < 0)
      {
        operator delete(*(void **)(v18 - 48));
        if (*(char *)(v18 - 57) < 0) {
          goto LABEL_28;
        }
LABEL_24:
        if ((*(char *)(v18 - 81) & 0x80000000) == 0) {
          goto LABEL_25;
        }
LABEL_29:
        operator delete(*(void **)(v18 - 104));
        if (*(char *)(v18 - 121) < 0) {
          goto LABEL_18;
        }
LABEL_30:
        if ((*(char *)(v18 - 153) & 0x80000000) == 0) {
          goto LABEL_19;
        }
LABEL_31:
        operator delete(*(void **)(v18 - 176));
        v18 -= 176;
        if (v18 == size)
        {
LABEL_32:
          double v19 = (void *)v45.__r_.__value_.__r.__words[0];
          goto LABEL_33;
        }
      }
      else
      {
        if ((*(char *)(v18 - 57) & 0x80000000) == 0) {
          goto LABEL_24;
        }
LABEL_28:
        operator delete(*(void **)(v18 - 80));
        if (*(char *)(v18 - 81) < 0) {
          goto LABEL_29;
        }
LABEL_25:
        if ((*(char *)(v18 - 121) & 0x80000000) == 0) {
          goto LABEL_30;
        }
LABEL_18:
        operator delete(*(void **)(v18 - 144));
        if (*(char *)(v18 - 153) < 0) {
          goto LABEL_31;
        }
LABEL_19:
        v18 -= 176;
        if (v18 == size) {
          goto LABEL_32;
        }
      }
    }
  }
LABEL_56:
  unint64_t v26 = vcvtad_u64_f64(sub_72688((uint64_t)v44));
  *(unsigned char *)uint64_t v32 = 1;
  *(_OWORD *)(v32 + 8) = *(_OWORD *)v42;
  uint64_t v27 = v43;
  v42[0] = 0;
  v42[1] = 0;
  *(void *)&long long v43 = 0;
  *((void *)&v43 + 1) = v26;
  *(void *)(v32 + 24) = v27;
  *(void *)(v32 + 32) = v26;
  long long v28 = v41;
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  uint64_t v29 = (uint64_t *)v42[0];
  if (v42[0])
  {
    uint64_t v30 = (uint64_t *)v42[1];
    unint64_t v31 = v42[0];
    if (v42[1] != v42[0])
    {
      do
        uint64_t v30 = sub_5ADCA8(v30 - 47);
      while (v30 != v29);
      unint64_t v31 = v42[0];
    }
    v42[1] = v29;
    operator delete(v31);
  }
}

void sub_C8C814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_5ADA30((void **)va);
  _Unwind_Resume(a1);
}

void sub_C8C828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_5ADA30((void **)va);
  _Unwind_Resume(a1);
}

void sub_C8C840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  if (*(char *)(v10 - 121) < 0) {
    operator delete(*(void **)(v10 - 144));
  }
  sub_50828((uint64_t)va);
  sub_14A84((uint64_t)va1);
  sub_5ADA30((void **)va2);
  _Unwind_Resume(a1);
}

void sub_C8C8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va1, a15);
  va_start(va, a15);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  sub_1B23C(v15 - 144);
  sub_14A84((uint64_t)va);
  sub_5ADA30((void **)va1);
  _Unwind_Resume(a1);
}

void sub_C8C8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va1, a15);
  va_start(va, a15);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_14A84((uint64_t *)va);
  sub_5ADA30(va1);
  _Unwind_Resume(a1);
}

void sub_C8C904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va1, a15);
  va_start(va, a15);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  sub_591648((void **)(v15 - 144));
  sub_14A84((uint64_t)va);
  sub_5ADA30((void **)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_C8C934(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = 0x51B3BEA3677D46CFLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0xAE4C415C9882B9) {
    sub_2E00();
  }
  if (0xA3677D46CEFA8D9ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xA3677D46CEFA8D9ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x51B3BEA3677D46CFLL * ((a1[2] - *a1) >> 3)) >= 0x572620AE4C415CLL) {
    unint64_t v6 = 0xAE4C415C9882B9;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAE4C415C9882B9) {
      sub_188D718();
    }
    char v7 = (char *)operator new(376 * v6);
  }
  else
  {
    char v7 = 0;
  }
  uint64_t v14 = (uint64_t)&v7[376 * v3];
  uint64_t v15 = &v7[376 * v6];
  sub_C8CAC8(v14, a2);
  uint64_t v8 = v14;
  uint64_t v9 = v14 + 376;
  int v11 = (uint64_t *)*a1;
  uint64_t v10 = (uint64_t *)a1[1];
  if (v10 == (uint64_t *)*a1)
  {
    *a1 = v14;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
  }
  else
  {
    do
    {
      v10 -= 47;
      sub_5AE1FC(v8 - 376, (uint64_t)v10);
    }
    while (v10 != v11);
    uint64_t v12 = (uint64_t *)*a1;
    uint64_t v10 = (uint64_t *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
    if (v10 != v12)
    {
      do
      {
        v10 -= 47;
        sub_5ADCA8(v10);
      }
      while (v10 != v12);
      uint64_t v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 376;
}

void sub_C8CAB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5AE1A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_C8CAC8(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = sub_45FD6C(a2);
  *(void *)(a1 + 32) = 0x8000000080000000;
  *(void *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 40) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)&long long v5 = 0x8000000080000000;
  *((void *)&v5 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = v5;
  *(_OWORD *)(a1 + 304) = v5;
  *(_DWORD *)(a1 + 320) = 5;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  if (!sub_45FB38(a2))
  {
    *(_DWORD *)(a1 + 32) = sub_45FE10((uint64_t)a2);
    *(_DWORD *)(a1 + 36) = sub_47EF80((uint64_t)a2, 0, 3);
    *(_DWORD *)(a1 + 296) = sub_47EF80((uint64_t)a2, 1, 3);
    *(_DWORD *)(a1 + 300) = sub_47EF80((uint64_t)a2, 2, 3);
    *(_DWORD *)(a1 + 304) = sub_47EF80((uint64_t)a2, 3, 3);
    *(_DWORD *)(a1 + 308) = sub_47EF80((uint64_t)a2, 4, 3);
    *(_DWORD *)(a1 + 312) = sub_47EF80((uint64_t)a2, 5, 3);
  }
  return a1;
}

void sub_C8CBF0(_Unwind_Exception *a1)
{
  sub_50E790((void **)(v2 + 320));
  sub_59213C(v3);
  sub_3B0290((void *)v2);
  sub_59241C(v1);
  _Unwind_Resume(a1);
}

void sub_C8CC38(_Unwind_Exception *a1)
{
  sub_59241C(v1);
  _Unwind_Resume(a1);
}

double sub_C8CC4C()
{
  byte_25E116F = 1;
  word_25E1158 = 65;
  byte_25E1187 = 1;
  word_25E1170 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E1218 = 0u;
  *(_OWORD *)&qword_25E1228 = 0u;
  dword_25E1238 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E1218, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E1218, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E1218, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E1218, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E119F = 8;
  strcpy((char *)&qword_25E1188, "any_mode");
  byte_25E11B7 = 7;
  strcpy((char *)&dword_25E11A0, "cycling");
  byte_25E11CF = 7;
  strcpy((char *)&dword_25E11B8, "driving");
  byte_25E11E7 = 7;
  strcpy((char *)&dword_25E11D0, "walking");
  qword_25E11F0 = 0;
  qword_25E11F8 = 0;
  qword_25E11E8 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E11E8 = (uint64_t)v0;
  qword_25E11F0 = (uint64_t)(v0 + 9);
  qword_25E11F8 = (uint64_t)(v0 + 9);
  qword_25E1200 = 0;
  qword_25E1208 = 0;
  unk_25E1210 = 0;
  char v1 = (char *)operator new(9uLL);
  qword_25E1208 = (uint64_t)(v1 + 9);
  unk_25E1210 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)char v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E1200 = (uint64_t)v1;
  return result;
}

void sub_C8CF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E1228) {
    sub_20AF2D4((void **)qword_25E1228);
  }
  long long v37 = (void *)xmmword_25E1218;
  *(void *)&xmmword_25E1218 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_C8CFB4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v597 = sub_3750CC(*(void **)(a1 + 1584));
  uint64_t v5 = *(void *)(a1 + 1584);
  v678[0] = operator new(0x20uLL);
  *(_OWORD *)&v678[1] = xmmword_20B8890;
  strcpy((char *)v678[0], "EnergyConsumptionETAEvaluator");
  v673 = 0;
  long long __p = 0;
  *(void *)&long long v674 = 0;
  unint64_t v6 = sub_374CDC(v5, (uint64_t)v678, (uint64_t *)&__p);
  sub_54214((uint64_t)v671, (uint64_t)v6);
  char v7 = (void **)__p;
  if (__p)
  {
    int v8 = v673;
    uint64_t v9 = __p;
    if (v673 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = __p;
    }
    v673 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v678[2]) < 0) {
    operator delete(v678[0]);
  }
  v678[0] = operator new(0x30uLL);
  *(_OWORD *)&v678[1] = xmmword_20B93E0;
  strcpy((char *)v678[0], "min_segment_length_for_unpacking_geometry_m");
  double v10 = sub_5C7E8(v671, (uint64_t)v678);
  double v11 = v10;
  if (SHIBYTE(v678[2]) < 0)
  {
    operator delete(v678[0]);
    double v12 = v11 * 100.0;
    if (v11 * 100.0 < 0.0) {
      goto LABEL_13;
    }
  }
  else
  {
    double v12 = v10 * 100.0;
    if (v11 * 100.0 < 0.0)
    {
LABEL_13:
      double v13 = v12;
      if (v12 <= -4.50359963e15) {
        goto LABEL_21;
      }
      uint64_t v14 = (uint64_t)(v12 + v12);
      if (v14 >= 1) {
        --v14;
      }
      goto LABEL_20;
    }
  }
  double v13 = v12;
  if (v12 >= 4.50359963e15) {
    goto LABEL_21;
  }
  uint64_t v14 = (uint64_t)(v12 + v12) + 1;
LABEL_20:
  double v13 = (double)(v14 >> 1);
LABEL_21:
  if (v13 >= 9.22337204e18)
  {
    uint64_t v16 = 0x7FFFFFFFFFFFFFFELL;
    goto LABEL_32;
  }
  if (v12 >= 0.0)
  {
    if (v12 < 4.50359963e15)
    {
      uint64_t v15 = (uint64_t)(v12 + v12) + 1;
LABEL_30:
      double v12 = (double)(v15 >> 1);
    }
  }
  else if (v12 > -4.50359963e15)
  {
    uint64_t v15 = (uint64_t)(v12 + v12);
    if (v15 >= 1) {
      --v15;
    }
    goto LABEL_30;
  }
  uint64_t v16 = (uint64_t)v12;
LABEL_32:
  uint64_t v596 = v16;
  v678[0] = operator new(0x38uLL);
  *(_OWORD *)&v678[1] = xmmword_20B99E0;
  strcpy((char *)v678[0], "min_segment_elevation_change_for_unpacking_geometry_m");
  double v17 = sub_5C7E8(v671, (uint64_t)v678);
  double v18 = v17;
  if (SHIBYTE(v678[2]) < 0)
  {
    operator delete(v678[0]);
    double v19 = v18 * 100.0;
    if (v18 * 100.0 < 0.0) {
      goto LABEL_34;
    }
  }
  else
  {
    double v19 = v17 * 100.0;
    if (v18 * 100.0 < 0.0)
    {
LABEL_34:
      double v20 = v19;
      if (v19 <= -4.50359963e15) {
        goto LABEL_42;
      }
      uint64_t v21 = (uint64_t)(v19 + v19);
      if (v21 >= 1) {
        --v21;
      }
      goto LABEL_41;
    }
  }
  double v20 = v19;
  if (v19 >= 4.50359963e15) {
    goto LABEL_42;
  }
  uint64_t v21 = (uint64_t)(v19 + v19) + 1;
LABEL_41:
  double v20 = (double)(v21 >> 1);
LABEL_42:
  if (v20 >= 9.22337204e18)
  {
    uint64_t v23 = 0x7FFFFFFFFFFFFFFELL;
    goto LABEL_53;
  }
  if (v19 >= 0.0)
  {
    if (v19 < 4.50359963e15)
    {
      uint64_t v22 = (uint64_t)(v19 + v19) + 1;
LABEL_51:
      double v19 = (double)(v22 >> 1);
    }
  }
  else if (v19 > -4.50359963e15)
  {
    uint64_t v22 = (uint64_t)(v19 + v19);
    if (v22 >= 1) {
      --v22;
    }
    goto LABEL_51;
  }
  uint64_t v23 = (uint64_t)v19;
LABEL_53:
  uint64_t v595 = v23;
  v669[1] = 0;
  v669[0] = 0;
  uint64_t v670 = 0;
  sub_56CAC((uint64_t)v669, 0xBAA6550FFBAA6551 * ((a2[1] - *a2) >> 3));
  uint64_t v24 = *a2;
  if (*a2 == a2[1])
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = 1065353216;
    strcpy(v634, "guided_waypoint_routes");
    v634[23] = 22;
    operator new();
  }
  float64x2_t v606 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
  float64x2_t v607 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
  float64x2_t v605 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
  float64x2_t v604 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
  memset(v668, 0, sizeof(v668));
  uint64_t v593 = v24;
  uint64_t v25 = (void *)nullsub_1(v24);
  sub_56CAC((uint64_t)v668, 0xFF55E3181697D6CDLL * ((uint64_t)(v25[1] - *v25) >> 3));
  uint64_t v26 = nullsub_1(v593);
  uint64_t v27 = *(void **)v26;
  if (*(void *)v26 == *(void *)(v26 + 8))
  {
    memset(v678, 0, sizeof(v678));
    LODWORD(v679[0]) = 1065353216;
    v635[23] = 16;
    strcpy(v635, "guided_subroutes");
    operator new();
  }
  v666 = 0;
  v665 = 0;
  v667 = 0;
  uint64_t v28 = v27[67];
  uint64_t v29 = v27[66];
  unint64_t v30 = v28 - v29;
  uint64_t v599 = (v28 - v29) >> 2;
  if (v28 != v29)
  {
    if (v30 >= 0x3FFFFFFFFFFFFFFDLL) {
      sub_2E00();
    }
    v665 = operator new(4 * v30);
    v666 = v665;
    v667 = (char *)v665 + 16 * v599;
    uint64_t v28 = v27[67];
    uint64_t v29 = v27[66];
  }
  if (v28 == v29)
  {
    memset(v678, 0, sizeof(v678));
    LODWORD(v679[0]) = 1065353216;
    v636[23] = 8;
    strcpy(v636, "segments");
    operator new();
  }
  uint64_t v31 = sub_46C8EC(v27, 0);
  uint64_t v32 = *(int **)v31;
  uint64_t v33 = *(void *)(v31 + 32);
  sub_2954EC(v597, v33, (uint64_t)&v664);
  uint64_t v34 = sub_403410((uint64_t)&v664, 1);
  BOOL v35 = (unsigned __int16 *)((char *)v32 - *v32);
  unsigned int v36 = *v35;
  if ((v33 & 0xFF000000000000) != 0)
  {
    if (v36 >= 0x57)
    {
      if (v35[43])
      {
        long long v37 = (int *)((char *)v32 + v35[43] + *(unsigned int *)((char *)v32 + v35[43]));
        uint64_t v38 = (unsigned __int16 *)((char *)v37 - *v37);
        double v39 = 0.0;
        if (*v38 < 7u) {
          goto LABEL_79;
        }
        unsigned int v40 = v38[3];
        if (!v40) {
          goto LABEL_79;
        }
      }
      else
      {
        double v39 = 0.0;
        if (v36 < 0x7D) {
          goto LABEL_79;
        }
        unsigned int v40 = v35[62];
        long long v37 = v32;
        if (!v35[62]) {
          goto LABEL_79;
        }
      }
LABEL_78:
      LOWORD(v39) = *(_WORD *)((char *)v37 + v40);
      double v39 = (double)*(unint64_t *)&v39 + (double)*(unint64_t *)&v39;
LABEL_79:
      double v42 = v39 / 65535.0;
      goto LABEL_80;
    }
  }
  else if (v36 >= 0x57)
  {
    if (v35[43])
    {
      long long v37 = (int *)((char *)v32 + v35[43] + *(unsigned int *)((char *)v32 + v35[43]));
      uint64_t v41 = (unsigned __int16 *)((char *)v37 - *v37);
      double v39 = 0.0;
      if (*v41 < 5u) {
        goto LABEL_79;
      }
      unsigned int v40 = v41[2];
      if (!v40) {
        goto LABEL_79;
      }
    }
    else
    {
      double v39 = 0.0;
      if (v36 < 0x7B) {
        goto LABEL_79;
      }
      unsigned int v40 = v35[61];
      long long v37 = v32;
      if (!v35[61]) {
        goto LABEL_79;
      }
    }
    goto LABEL_78;
  }
  double v42 = 0.0;
  if (v36 < 9)
  {
    int v43 = 0;
    double v44 = 0.0 * (double)0;
    if (v44 < 0.0)
    {
LABEL_82:
      if (v44 <= -4.50359963e15) {
        goto LABEL_90;
      }
      uint64_t v45 = (uint64_t)(v44 + v44);
      if (v45 >= 1) {
        --v45;
      }
      goto LABEL_89;
    }
LABEL_87:
    if (v44 >= 4.50359963e15) {
      goto LABEL_90;
    }
    uint64_t v45 = (uint64_t)(v44 + v44) + 1;
LABEL_89:
    double v44 = (double)(v45 >> 1);
LABEL_90:
    double v46 = 0.0;
    if ((v33 & 0xFF000000000000) != 0)
    {
      if (v36 < 0x57) {
        goto LABEL_107;
      }
      if (v35[43])
      {
        char v47 = (int *)((char *)v32 + v35[43] + *(unsigned int *)((char *)v32 + v35[43]));
        unsigned int v48 = (unsigned __int16 *)((char *)v47 - *v47);
        if (*v48 < 5u) {
          goto LABEL_107;
        }
        unsigned int v49 = v48[2];
        if (!v49) {
          goto LABEL_107;
        }
LABEL_106:
        LOWORD(v46) = *(_WORD *)((char *)v47 + v49);
        double v46 = (double)*(unint64_t *)&v46 + (double)*(unint64_t *)&v46;
        goto LABEL_107;
      }
      if (v36 >= 0x7B)
      {
        unsigned int v49 = v35[61];
        char v47 = v32;
        if (v35[61]) {
          goto LABEL_106;
        }
      }
    }
    else
    {
      if (v36 < 0x57) {
        goto LABEL_107;
      }
      if (v35[43])
      {
        char v47 = (int *)((char *)v32 + v35[43] + *(unsigned int *)((char *)v32 + v35[43]));
        unint64_t v50 = (unsigned __int16 *)((char *)v47 - *v47);
        if (*v50 >= 7u)
        {
          unsigned int v49 = v50[3];
          if (v49) {
            goto LABEL_106;
          }
        }
      }
      else if (v36 >= 0x7D)
      {
        unsigned int v49 = v35[62];
        char v47 = v32;
        if (v35[62]) {
          goto LABEL_106;
        }
      }
    }
LABEL_107:
    if (v43)
    {
      uint64_t v51 = v35[4];
      if (v51) {
        uint64_t v51 = *(unsigned int *)((char *)v32 + v51);
      }
    }
    else
    {
      uint64_t v51 = 0;
    }
    double v52 = v46 / 65535.0 * (double)v51;
    if (v52 >= 0.0)
    {
      if (v52 >= 4.50359963e15) {
        goto LABEL_119;
      }
      uint64_t v53 = (uint64_t)(v52 + v52) + 1;
    }
    else
    {
      if (v52 <= -4.50359963e15) {
        goto LABEL_119;
      }
      uint64_t v53 = (uint64_t)(v52 + v52);
      if (v53 >= 1) {
        --v53;
      }
    }
    double v52 = (double)(v53 >> 1);
LABEL_119:
    uint64_t v54 = (uint64_t)v44;
    if ((uint64_t)v44 <= (uint64_t)v52) {
      uint64_t v54 = (uint64_t)v52;
    }
    uint64_t v601 = v34;
    BOOL v56 = v34 > v596 && v54 > v595;
    int v603 = sub_46E19C(v27, 0, 0);
    int v602 = sub_46E19C(v27, 0, 1);
    int v600 = *(_DWORD *)sub_C9212C(v27 + 145, 0);
    sub_2954EC(v597, v33, (uint64_t)&v660);
    if (v56)
    {
      if (v663)
      {
        if (v661 != v662)
        {
          unint64_t v57 = *((void *)v662 - 1);
          unsigned int v58 = v660;
          LODWORD(v654) = v57;
          LODWORD(v651) = 1;
          long long __p = &v651;
          v673 = &v654;
          unint64_t v59 = v660[482] + 1;
          v660[482] = v59;
          if (!*v58) {
            goto LABEL_218;
          }
          uint64_t v60 = v58 + 2;
          if (*((_DWORD *)v58 + 28) == v57)
          {
            unsigned int v61 = 4;
          }
          else if (*((_DWORD *)v58 + 34) == v57)
          {
            unsigned int v61 = 5;
          }
          else if (*((_DWORD *)v58 + 40) == v57)
          {
            unsigned int v61 = 6;
          }
          else
          {
            if (*((_DWORD *)v58 + 46) != v57)
            {
              unint64_t v116 = v58[21];
              unint64_t v117 = v58[18];
              unint64_t v118 = v58[15];
              unint64_t v119 = v58[24];
              long long v88 = (unsigned int *)sub_2AB884(*v58, 1, v57, 1);
              if (v118 >= v59) {
                unint64_t v120 = v59;
              }
              else {
                unint64_t v120 = v118;
              }
              BOOL v121 = v117 >= v120;
              if (v117 < v120) {
                unint64_t v120 = v117;
              }
              unsigned int v122 = 4 * (v118 < v59);
              if (!v121) {
                unsigned int v122 = 5;
              }
              if (v116 < v120)
              {
                unsigned int v122 = 6;
                unint64_t v120 = v116;
              }
              if (v119 < v120) {
                unsigned int v122 = 7;
              }
              long long v123 = &v60[3 * v122];
              *(_DWORD *)long long v123 = v654;
              v123[1] = v58[482];
              v123[2] = v88;
              if (v88) {
                goto LABEL_177;
              }
              goto LABEL_218;
            }
            unsigned int v61 = 7;
          }
          ++v58[483];
          uint64_t v87 = &v60[3 * v61];
          v87[1] = v59;
          long long v88 = (unsigned int *)v87[2];
          if (v88)
          {
LABEL_177:
            unsigned int v89 = (int *)((char *)v88 + *v88);
            goto LABEL_219;
          }
LABEL_218:
          sub_296654((int **)&__p);
          unsigned int v89 = 0;
LABEL_219:
          uint64_t v124 = (unsigned int *)((char *)v89 + *(unsigned __int16 *)((char *)v89 - *v89 + 4));
          uint64_t v125 = (uint64_t)&v124[HIDWORD(v57)] + *v124;
          int v126 = (int *)(v125 + 4 + *(unsigned int *)(v125 + 4));
          int v127 = (unsigned int *)((char *)v126 + *(unsigned __int16 *)((char *)v126 - *v126 + 6));
          LODWORD(v127) = *(unsigned int *)((char *)v127 + *v127) - 1;
          v678[0] = v660;
          v678[1] = &v661;
          *(_OWORD *)&v678[2] = 0u;
          v679[0] = 0u;
          LODWORD(v679[1]) = ((unint64_t)(v662 - (unsigned char *)v661) >> 3) - 1;
          DWORD1(v679[1]) = v127;
          BYTE8(v679[1]) = 1;
          sub_2E1D08((uint64_t)v678);
          uint64_t v76 = (char *)v661;
          uint64_t v77 = v662;
          if (v663) {
            goto LABEL_220;
          }
          goto LABEL_145;
        }
LABEL_144:
        memset(v679, 0, sizeof(v679));
        memset(v678, 0, sizeof(v678));
        uint64_t v76 = (char *)v661;
        uint64_t v77 = v662;
        if (v663)
        {
LABEL_220:
          if (v76 == v77) {
            LODWORD(v83) = 0;
          }
          else {
            LODWORD(v83) = -1;
          }
          int v608 = v83;
          goto LABEL_472;
        }
LABEL_145:
        if (v76 == v77)
        {
          LODWORD(v83) = 0;
          int v608 = 0;
          goto LABEL_472;
        }
        unint64_t v78 = *((void *)v77 - 1);
        unsigned int v79 = v660;
        LODWORD(v654) = v78;
        LODWORD(v651) = 1;
        long long __p = &v651;
        v673 = &v654;
        unint64_t v80 = v660[482] + 1;
        v660[482] = v80;
        if (!*v79) {
          goto LABEL_470;
        }
        uint64_t v81 = v79 + 2;
        if (*((_DWORD *)v79 + 28) == v78)
        {
          unsigned int v82 = 4;
        }
        else if (*((_DWORD *)v79 + 34) == v78)
        {
          unsigned int v82 = 5;
        }
        else if (*((_DWORD *)v79 + 40) == v78)
        {
          unsigned int v82 = 6;
        }
        else
        {
          if (*((_DWORD *)v79 + 46) != v78)
          {
            unint64_t v291 = v79[21];
            unint64_t v292 = v79[18];
            unint64_t v293 = v79[15];
            unint64_t v294 = v79[24];
            uint64_t v114 = (unsigned int *)sub_2AB884(*v79, 1, v78, 1);
            if (v293 >= v80) {
              unint64_t v295 = v80;
            }
            else {
              unint64_t v295 = v293;
            }
            BOOL v296 = v292 >= v295;
            if (v292 < v295) {
              unint64_t v295 = v292;
            }
            unsigned int v297 = 4 * (v293 < v80);
            if (!v296) {
              unsigned int v297 = 5;
            }
            if (v291 < v295)
            {
              unsigned int v297 = 6;
              unint64_t v295 = v291;
            }
            if (v294 < v295) {
              unsigned int v297 = 7;
            }
            v298 = &v81[3 * v297];
            *(_DWORD *)v298 = v654;
            v298[1] = v79[482];
            v298[2] = v114;
            if (v114) {
              goto LABEL_205;
            }
            goto LABEL_470;
          }
          unsigned int v82 = 7;
        }
        ++v79[483];
        uint64_t v113 = &v81[3 * v82];
        v113[1] = v80;
        uint64_t v114 = (unsigned int *)v113[2];
        if (v114)
        {
LABEL_205:
          unint64_t v115 = (int *)((char *)v114 + *v114);
LABEL_471:
          uint64_t v299 = (unsigned int *)((char *)v115 + *(unsigned __int16 *)((char *)v115 - *v115 + 4));
          uint64_t v300 = (uint64_t)&v299[HIDWORD(v78)] + *v299;
          v301 = (int *)(v300 + 4 + *(unsigned int *)(v300 + 4));
          long long v302 = (unsigned int *)((char *)v301 + *(unsigned __int16 *)((char *)v301 - *v301 + 6));
          int v608 = *(unsigned int *)((char *)v302 + *v302);
          unint64_t v83 = (unint64_t)(v662 - (unsigned char *)v661) >> 3;
LABEL_472:
          long long v303 = v678[0];
          v629 = (uint64_t *)v678[1];
          unsigned int v618 = DWORD2(v679[0]);
          int v622 = HIDWORD(v679[0]);
          unint64_t v304 = LODWORD(v679[1]);
          int v616 = BYTE8(v679[1]);
          v659 = 0;
          v657 = 0;
          v658 = 0;
          if (LODWORD(v679[1]) == v83)
          {
            unsigned int v253 = 0;
            v625 = 0;
            if (DWORD1(v679[1]) == v608) {
              goto LABEL_789;
            }
          }
          v609 = (int *)v678[2];
          int v615 = v83;
          unint64_t v305 = 0;
          v632 = (char *)v678[0] + 16;
          v594 = (char *)v678[3];
          long long v306 = (unsigned int *)v678[3];
          unsigned int v307 = DWORD1(v679[1]);
          LODWORD(v308) = v679[1];
          unsigned int v309 = DWORD1(v679[1]);
          while (1)
          {
            unint64_t v626 = v305;
            unsigned int v310 = *v306;
            if (v616)
            {
              unsigned int v311 = v307 - 1;
              if (v307 - 1 >= v310)
              {
                uint64_t v314 = *v629;
                unint64_t v308 = (v308 - 1);
                if (v308 < (v629[1] - *v629) >> 3) {
                  goto LABEL_494;
                }
                goto LABEL_489;
              }
              v312 = &v306[v307 + 1];
              v313 = &v306[v311 + 1];
              if (*(unsigned __int16 *)v312 != *(unsigned __int16 *)v313
                || *((unsigned __int16 *)v312 + 1) != *((unsigned __int16 *)v313 + 1)
                || (uint64_t v314 = *v629, v315 = v629[1] - *v629, v310 == 2) && v315 == 8
                || (v311 = v307 - 2, unint64_t v308 = (v308 - 1), v308 >= v315 >> 3))
              {
LABEL_489:
                unsigned int v307 = v311;
                goto LABEL_490;
              }
              while (1)
              {
LABEL_494:
                unint64_t v320 = *(void *)(v314 + 8 * v308);
                LODWORD(v654) = v320;
                LODWORD(v651) = 1;
                long long __p = &v651;
                v673 = &v654;
                unint64_t v321 = v303[482] + 1;
                v303[482] = v321;
                if (!*v303) {
                  goto LABEL_504;
                }
                if (*((_DWORD *)v303 + 28) == v320)
                {
                  unsigned int v322 = 4;
                  goto LABEL_503;
                }
                if (*((_DWORD *)v303 + 34) == v320)
                {
                  unsigned int v322 = 5;
                  goto LABEL_503;
                }
                if (*((_DWORD *)v303 + 40) == v320) {
                  break;
                }
                if (*((_DWORD *)v303 + 46) == v320)
                {
                  unsigned int v322 = 7;
LABEL_503:
                  ++v303[483];
                  v323 = &v632[24 * v322];
                  *((void *)v323 + 1) = v321;
                  if (*((void *)v323 + 2)) {
                    goto LABEL_505;
                  }
LABEL_504:
                  sub_296654((int **)&__p);
                  goto LABEL_505;
                }
                unint64_t v330 = v303[21];
                unint64_t v331 = v303[18];
                unint64_t v332 = v303[15];
                unint64_t v610 = v303[24];
                uint64_t v333 = sub_2AB884(*v303, 1, v320, 1);
                if (v332 >= v321) {
                  unint64_t v334 = v321;
                }
                else {
                  unint64_t v334 = v332;
                }
                BOOL v335 = v331 >= v334;
                if (v331 < v334) {
                  unint64_t v334 = v331;
                }
                unsigned int v336 = 4 * (v332 < v321);
                if (!v335) {
                  unsigned int v336 = 5;
                }
                if (v330 < v334)
                {
                  unsigned int v336 = 6;
                  unint64_t v334 = v330;
                }
                if (v610 < v334) {
                  unsigned int v336 = 7;
                }
                v337 = &v632[24 * v336];
                *(_DWORD *)v337 = v654;
                *((void *)v337 + 1) = v303[482];
                *((void *)v337 + 2) = v333;
                if (!v333) {
                  goto LABEL_504;
                }
LABEL_505:
                LODWORD(v654) = v320;
                LODWORD(v651) = 1;
                long long __p = &v651;
                v673 = &v654;
                unint64_t v324 = v303[482] + 1;
                v303[482] = v324;
                if (!*v303) {
                  goto LABEL_542;
                }
                if (*((_DWORD *)v303 + 28) == v320)
                {
                  unsigned int v325 = 4;
                  goto LABEL_514;
                }
                if (*((_DWORD *)v303 + 34) == v320)
                {
                  unsigned int v325 = 5;
                  goto LABEL_514;
                }
                if (*((_DWORD *)v303 + 40) == v320)
                {
                  unsigned int v325 = 6;
                  goto LABEL_514;
                }
                if (*((_DWORD *)v303 + 46) == v320)
                {
                  unsigned int v325 = 7;
LABEL_514:
                  ++v303[483];
                  v326 = &v632[24 * v325];
                  *((void *)v326 + 1) = v324;
                  v327 = (unsigned int *)*((void *)v326 + 2);
                  if (!v327) {
                    goto LABEL_542;
                  }
                  goto LABEL_515;
                }
                unint64_t v338 = v303[21];
                unint64_t v339 = v303[18];
                unint64_t v340 = v303[15];
                unint64_t v611 = v303[24];
                v327 = (unsigned int *)sub_2AB884(*v303, 1, v320, 1);
                if (v340 >= v324) {
                  unint64_t v341 = v324;
                }
                else {
                  unint64_t v341 = v340;
                }
                BOOL v342 = v339 >= v341;
                if (v339 < v341) {
                  unint64_t v341 = v339;
                }
                unsigned int v343 = 4 * (v340 < v324);
                if (!v342) {
                  unsigned int v343 = 5;
                }
                if (v338 < v341)
                {
                  unsigned int v343 = 6;
                  unint64_t v341 = v338;
                }
                if (v611 < v341) {
                  unsigned int v343 = 7;
                }
                v344 = &v632[24 * v343];
                *(_DWORD *)v344 = v654;
                *((void *)v344 + 1) = v303[482];
                *((void *)v344 + 2) = v327;
                if (!v327)
                {
LABEL_542:
                  sub_296654((int **)&__p);
                  v328 = 0;
                  v329 = (_WORD *)(&loc_1120530 + 1);
                  if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                    goto LABEL_545;
                  }
                  goto LABEL_543;
                }
LABEL_515:
                v328 = (int *)((char *)v327 + *v327);
                v329 = (unsigned __int16 *)((char *)v328 - *v328);
                if (*v329 < 5u) {
                  goto LABEL_545;
                }
LABEL_543:
                uint64_t v345 = v329[2];
                if (v345)
                {
                  v346 = (char *)v328 + v345 + *(unsigned int *)((char *)v328 + v345);
                  goto LABEL_546;
                }
LABEL_545:
                v346 = 0;
LABEL_546:
                v347 = &v346[4 * HIDWORD(v320) + 4 + *(unsigned int *)&v346[4 * HIDWORD(v320) + 4]];
                v348 = &v347[-*(int *)v347];
                if (*(unsigned __int16 *)v348 >= 7u && (uint64_t v349 = *((unsigned __int16 *)v348 + 3)) != 0) {
                  long long v306 = (unsigned int *)&v347[v349 + *(unsigned int *)&v347[v349]];
                }
                else {
                  long long v306 = 0;
                }
                unsigned int v307 = *v306 - 2;
                v350 = &v306[*v306];
                v351 = &v306[v307 + 1];
                if (*(unsigned __int16 *)v350 != *(unsigned __int16 *)v351
                  || *((unsigned __int16 *)v350 + 1) != *((unsigned __int16 *)v351 + 1))
                {
                  goto LABEL_490;
                }
                unint64_t v308 = (v308 - 1);
                uint64_t v314 = *v629;
                if (v308 >= (v629[1] - *v629) >> 3)
                {
                  unsigned int v307 = *v306 - 3;
                  goto LABEL_490;
                }
              }
              unsigned int v322 = 6;
              goto LABEL_503;
            }
            unsigned int v311 = v307 + 1;
            if (v307 + 1 >= v310)
            {
              uint64_t v318 = *v629;
              unint64_t v308 = (v308 + 1);
              if (v308 < (v629[1] - *v629) >> 3) {
                goto LABEL_556;
              }
              goto LABEL_489;
            }
            v316 = &v306[v307 + 1];
            v317 = &v306[v311 + 1];
            if (*(unsigned __int16 *)v316 != *(unsigned __int16 *)v317) {
              goto LABEL_489;
            }
            if (*((unsigned __int16 *)v316 + 1) != *((unsigned __int16 *)v317 + 1)) {
              goto LABEL_489;
            }
            uint64_t v318 = *v629;
            uint64_t v319 = v629[1] - *v629;
            if (v310 == 2 && v319 == 8) {
              goto LABEL_489;
            }
            unsigned int v311 = v307 + 2;
            unint64_t v308 = (v308 + 1);
            if (v308 >= v319 >> 3) {
              goto LABEL_489;
            }
            while (1)
            {
LABEL_556:
              unint64_t v352 = *(void *)(v318 + 8 * v308);
              LODWORD(v654) = v352;
              LODWORD(v651) = 1;
              long long __p = &v651;
              v673 = &v654;
              unint64_t v353 = v303[482] + 1;
              v303[482] = v353;
              if (!*v303) {
                goto LABEL_566;
              }
              if (*((_DWORD *)v303 + 28) == v352)
              {
                unsigned int v354 = 4;
                goto LABEL_565;
              }
              if (*((_DWORD *)v303 + 34) == v352)
              {
                unsigned int v354 = 5;
                goto LABEL_565;
              }
              if (*((_DWORD *)v303 + 40) == v352)
              {
                unsigned int v354 = 6;
                goto LABEL_565;
              }
              if (*((_DWORD *)v303 + 46) == v352)
              {
                unsigned int v354 = 7;
LABEL_565:
                ++v303[483];
                v355 = &v632[24 * v354];
                *((void *)v355 + 1) = v353;
                if (*((void *)v355 + 2)) {
                  goto LABEL_567;
                }
LABEL_566:
                sub_296654((int **)&__p);
                goto LABEL_567;
              }
              unint64_t v362 = v303[21];
              unint64_t v363 = v303[18];
              unint64_t v364 = v303[15];
              unint64_t v612 = v303[24];
              uint64_t v365 = sub_2AB884(*v303, 1, v352, 1);
              if (v364 >= v353) {
                unint64_t v366 = v353;
              }
              else {
                unint64_t v366 = v364;
              }
              BOOL v367 = v363 >= v366;
              if (v363 < v366) {
                unint64_t v366 = v363;
              }
              unsigned int v368 = 4 * (v364 < v353);
              if (!v367) {
                unsigned int v368 = 5;
              }
              if (v362 < v366)
              {
                unsigned int v368 = 6;
                unint64_t v366 = v362;
              }
              if (v612 < v366) {
                unsigned int v368 = 7;
              }
              v369 = &v632[24 * v368];
              *(_DWORD *)v369 = v654;
              *((void *)v369 + 1) = v303[482];
              *((void *)v369 + 2) = v365;
              if (!v365) {
                goto LABEL_566;
              }
LABEL_567:
              LODWORD(v654) = v352;
              LODWORD(v651) = 1;
              long long __p = &v651;
              v673 = &v654;
              unint64_t v356 = v303[482] + 1;
              v303[482] = v356;
              if (!*v303) {
                goto LABEL_604;
              }
              if (*((_DWORD *)v303 + 28) == v352)
              {
                unsigned int v357 = 4;
                goto LABEL_576;
              }
              if (*((_DWORD *)v303 + 34) == v352)
              {
                unsigned int v357 = 5;
                goto LABEL_576;
              }
              if (*((_DWORD *)v303 + 40) == v352)
              {
                unsigned int v357 = 6;
                goto LABEL_576;
              }
              if (*((_DWORD *)v303 + 46) == v352)
              {
                unsigned int v357 = 7;
LABEL_576:
                ++v303[483];
                v358 = &v632[24 * v357];
                *((void *)v358 + 1) = v356;
                v359 = (unsigned int *)*((void *)v358 + 2);
                if (v359) {
                  goto LABEL_577;
                }
                goto LABEL_604;
              }
              unint64_t v370 = v303[21];
              unint64_t v371 = v303[18];
              unint64_t v372 = v303[15];
              unint64_t v613 = v303[24];
              v359 = (unsigned int *)sub_2AB884(*v303, 1, v352, 1);
              if (v372 >= v356) {
                unint64_t v373 = v356;
              }
              else {
                unint64_t v373 = v372;
              }
              BOOL v374 = v371 >= v373;
              if (v371 < v373) {
                unint64_t v373 = v371;
              }
              unsigned int v375 = 4 * (v372 < v356);
              if (!v374) {
                unsigned int v375 = 5;
              }
              if (v370 < v373)
              {
                unsigned int v375 = 6;
                unint64_t v373 = v370;
              }
              if (v613 < v373) {
                unsigned int v375 = 7;
              }
              v376 = &v632[24 * v375];
              *(_DWORD *)v376 = v654;
              *((void *)v376 + 1) = v303[482];
              *((void *)v376 + 2) = v359;
              if (v359)
              {
LABEL_577:
                v360 = (int *)((char *)v359 + *v359);
                v361 = (unsigned __int16 *)((char *)v360 - *v360);
                if (*v361 < 5u) {
                  goto LABEL_607;
                }
                goto LABEL_605;
              }
LABEL_604:
              sub_296654((int **)&__p);
              v360 = 0;
              v361 = (_WORD *)(&loc_1120530 + 1);
              if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                goto LABEL_607;
              }
LABEL_605:
              uint64_t v377 = v361[2];
              if (!v377)
              {
LABEL_607:
                v378 = 0;
                goto LABEL_608;
              }
              v378 = (char *)v360 + v377 + *(unsigned int *)((char *)v360 + v377);
LABEL_608:
              v379 = &v378[4 * HIDWORD(v352) + 4 + *(unsigned int *)&v378[4 * HIDWORD(v352) + 4]];
              v380 = &v379[-*(int *)v379];
              if (*(unsigned __int16 *)v380 < 7u) {
                break;
              }
              uint64_t v381 = *((unsigned __int16 *)v380 + 3);
              if (!v381) {
                break;
              }
              long long v306 = (unsigned int *)&v379[v381 + *(unsigned int *)&v379[v381]];
              if (*((unsigned __int16 *)v306 + 2) != *((unsigned __int16 *)v306 + 4)
                || *((unsigned __int16 *)v306 + 3) != *((unsigned __int16 *)v306 + 5))
              {
                goto LABEL_616;
              }
              unint64_t v308 = (v308 + 1);
              uint64_t v318 = *v629;
              if (v308 >= (v629[1] - *v629) >> 3)
              {
                unsigned int v307 = 2;
                goto LABEL_490;
              }
            }
            long long v306 = 0;
LABEL_616:
            unsigned int v307 = 1;
LABEL_490:
            unint64_t v305 = v626 + 1;
            if (v308 == v615 && v307 == v608)
            {
              if (v626 >= 0x1555555555555555) {
                sub_2E00();
              }
              v657 = operator new(12 * v305);
              v658 = (unsigned int *)v657;
              v625 = (unsigned int *)v657;
              v659 = (char *)v657 + 12 * v305;
              v382 = v594;
              unsigned int v383 = v309;
              while (1)
              {
                unint64_t v614 = v304;
                v384 = v382;
                v385 = v382 + 4;
                unsigned int v386 = v383;
                v387 = &v382[4 * v383 + 4];
                int v388 = *(unsigned __int16 *)v387;
                int v389 = *((unsigned __int16 *)v387 + 1);
                unsigned int v390 = sub_511FC(v618);
                unsigned int v391 = v618 & ~(-1 << (v390 & 0xFE));
                int v392 = sub_51938(v391);
                int v393 = sub_51938(v391 >> 1);
                v394 = (unsigned __int16 *)((char *)v609 - *v609);
                unsigned int v395 = *v394;
                if (v395 < 0xD) {
                  break;
                }
                v382 = v384;
                if (!v394[6]) {
                  goto LABEL_625;
                }
                int v396 = *(int *)((char *)&v609[v386 + 1] + v394[6] + *(unsigned int *)((char *)v609 + v394[6]));
LABEL_631:
                int v399 = 1 << -(v390 >> 1);
                if (v390 < 2) {
                  int v399 = -2;
                }
                LODWORD(v400) = v393 * v399 + 4 * v389;
                if (v400 >= 0xFFFFFFFE) {
                  uint64_t v400 = 4294967294;
                }
                else {
                  uint64_t v400 = v400;
                }
                *(void *)v625 = (v392 * v399 + 4 * v388) | (unint64_t)(v400 << 32);
                v625[2] = v396;
                unsigned int v401 = *(_DWORD *)v382;
                if (!v616)
                {
                  unsigned int v383 = v386 + 1;
                  if (v386 + 1 >= v401)
                  {
                    uint64_t v406 = *v629;
                    unint64_t v304 = (v614 + 1);
                    if (v304 >= (v629[1] - *v629) >> 3) {
                      goto LABEL_784;
                    }
                    goto LABEL_717;
                  }
                  v405 = &v385[4 * v383];
                  if (*(unsigned __int16 *)v387 != *(unsigned __int16 *)v405)
                  {
LABEL_619:
                    unint64_t v304 = v614;
                    v625 += 3;
                    if (v614 != v615) {
                      continue;
                    }
                    goto LABEL_620;
                  }
                  unint64_t v304 = v614;
                  if (*((unsigned __int16 *)v387 + 1) != *((unsigned __int16 *)v405 + 1)) {
                    goto LABEL_784;
                  }
                  uint64_t v406 = *v629;
                  uint64_t v407 = v629[1] - *v629;
                  if (v401 == 2 && v407 == 8) {
                    goto LABEL_784;
                  }
                  unsigned int v383 = v386 + 2;
                  unint64_t v304 = (v614 + 1);
                  if (v304 >= v407 >> 3) {
                    goto LABEL_784;
                  }
LABEL_717:
                  unint64_t v445 = *(void *)(v406 + 8 * v304);
                  LODWORD(v654) = v445;
                  LODWORD(v651) = 1;
                  long long __p = &v651;
                  v673 = &v654;
                  unint64_t v446 = v303[482] + 1;
                  v303[482] = v446;
                  if (*v303)
                  {
                    if (*((_DWORD *)v303 + 28) == v445)
                    {
                      unsigned int v447 = 4;
                      goto LABEL_726;
                    }
                    if (*((_DWORD *)v303 + 34) == v445)
                    {
                      unsigned int v447 = 5;
                      goto LABEL_726;
                    }
                    if (*((_DWORD *)v303 + 40) == v445)
                    {
                      unsigned int v447 = 6;
                      goto LABEL_726;
                    }
                    if (*((_DWORD *)v303 + 46) == v445)
                    {
                      unsigned int v447 = 7;
LABEL_726:
                      ++v303[483];
                      v448 = &v632[24 * v447];
                      *((void *)v448 + 1) = v446;
                      v449 = (unsigned int *)*((void *)v448 + 2);
                      if (v449)
                      {
LABEL_727:
                        v450 = (int *)((char *)v449 + *v449);
                        v451 = (unsigned __int16 *)((char *)v450 - *v450);
                        if (*v451 < 7u)
                        {
LABEL_744:
                          int v622 = 0;
                          goto LABEL_745;
                        }
LABEL_742:
                        uint64_t v460 = v451[3];
                        if (!v460) {
                          goto LABEL_744;
                        }
                        int v622 = *(int *)((char *)v450 + v460);
LABEL_745:
                        LODWORD(v654) = v445;
                        LODWORD(v651) = 1;
                        long long __p = &v651;
                        v673 = &v654;
                        unint64_t v461 = v303[482] + 1;
                        v303[482] = v461;
                        if (*v303)
                        {
                          if (*((_DWORD *)v303 + 28) == v445)
                          {
                            unsigned int v462 = 4;
                            goto LABEL_754;
                          }
                          if (*((_DWORD *)v303 + 34) == v445)
                          {
                            unsigned int v462 = 5;
                            goto LABEL_754;
                          }
                          if (*((_DWORD *)v303 + 40) == v445)
                          {
                            unsigned int v462 = 6;
                            goto LABEL_754;
                          }
                          if (*((_DWORD *)v303 + 46) == v445)
                          {
                            unsigned int v462 = 7;
LABEL_754:
                            ++v303[483];
                            v463 = &v632[24 * v462];
                            *((void *)v463 + 1) = v461;
                            v464 = (unsigned int *)*((void *)v463 + 2);
                            if (v464)
                            {
LABEL_755:
                              v465 = (int *)((char *)v464 + *v464);
                              v466 = (unsigned __int16 *)((char *)v465 - *v465);
                              if (*v466 < 5u)
                              {
LABEL_772:
                                v476 = 0;
                                goto LABEL_773;
                              }
LABEL_770:
                              uint64_t v475 = v466[2];
                              if (!v475) {
                                goto LABEL_772;
                              }
                              v476 = (char *)v465 + v475 + *(unsigned int *)((char *)v465 + v475);
LABEL_773:
                              v477 = &v476[4 * HIDWORD(v445) + 4 + *(unsigned int *)&v476[4 * HIDWORD(v445) + 4]];
                              v478 = &v477[-*(int *)v477];
                              if (*(unsigned __int16 *)v478 < 7u || (uint64_t v479 = *((unsigned __int16 *)v478 + 3)) == 0)
                              {
                                v382 = 0;
LABEL_786:
                                v609 = (int *)v477;
                                unsigned int v618 = v445;
                                unsigned int v383 = 1;
                                v625 += 3;
                                if (v304 != v615) {
                                  continue;
                                }
LABEL_620:
                                if (v383 != v608) {
                                  continue;
                                }
                                unsigned int v253 = (unsigned int *)v657;
                                v658 = v625;
LABEL_789:
                                std::string v256 = v625;
LABEL_790:
                                unsigned int v480 = v253[2];
                                int v481 = *(v256 - 1);
                                BOOL v483 = v480 == 0x7FFFFFFF || v481 == 0x7FFFFFFF;
                                if (v603 <= 1) {
                                  int v484 = 1;
                                }
                                else {
                                  int v484 = v603;
                                }
                                v673 = 0;
                                long long __p = 0;
                                *(void *)&long long v674 = 0;
                                unint64_t v485 = -1 - 0x5555555555555555 * (v256 - v253);
                                int v617 = v484;
                                BOOL v630 = v483;
                                unsigned int v623 = v480;
                                int v619 = v481;
                                if (v485)
                                {
                                  if (v485 >> 62) {
                                    sub_2E00();
                                  }
                                  v486 = (unsigned int *)operator new(4 * v485);
                                  long long __p = v486;
                                  v673 = (void **)v486;
                                  *(void *)&long long v674 = &v486[v485];
                                  if (v253 == v256)
                                  {
LABEL_805:
                                    if (v253 == v256) {
                                      goto LABEL_848;
                                    }
                                    goto LABEL_806;
                                  }
                                }
                                else
                                {
                                  v486 = 0;
                                  if (v253 == v256) {
                                    goto LABEL_805;
                                  }
                                }
                                v487 = v253 + 3;
                                if (v253 + 3 == v256) {
                                  goto LABEL_805;
                                }
                                while (2)
                                {
                                  while (2)
                                  {
                                    unsigned int v492 = v253[2];
                                    if (v492 == 0x7FFFFFFF)
                                    {
                                      unsigned int v493 = 0;
                                      uint64_t v494 = v674;
                                      if ((unint64_t)v486 < (unint64_t)v674) {
                                        goto LABEL_813;
                                      }
                                    }
                                    else
                                    {
                                      unsigned int v495 = v253[5];
                                      unsigned int v496 = v495 - v492;
                                      if (v495 == 0x7FFFFFFF) {
                                        unsigned int v493 = 0;
                                      }
                                      else {
                                        unsigned int v493 = v496;
                                      }
                                      uint64_t v494 = v674;
                                      if ((unint64_t)v486 < (unint64_t)v674)
                                      {
LABEL_813:
                                        *v486++ = v493;
                                        v673 = (void **)v486;
                                        v253 += 3;
                                        v487 += 3;
                                        if (v487 == v256) {
                                          goto LABEL_847;
                                        }
                                        continue;
                                      }
                                    }
                                    break;
                                  }
                                  v497 = v256;
                                  v498 = (unsigned int *)__p;
                                  int64_t v499 = (char *)v486 - (unsigned char *)__p;
                                  uint64_t v500 = ((char *)v486 - (unsigned char *)__p) >> 2;
                                  unint64_t v501 = v500 + 1;
                                  if ((unint64_t)(v500 + 1) >> 62) {
                                    sub_2E00();
                                  }
                                  uint64_t v502 = v494 - (void)__p;
                                  if (v502 >> 1 > v501) {
                                    unint64_t v501 = v502 >> 1;
                                  }
                                  if ((unint64_t)v502 >= 0x7FFFFFFFFFFFFFFCLL) {
                                    unint64_t v503 = 0x3FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v503 = v501;
                                  }
                                  if (v503)
                                  {
                                    if (v503 >> 62) {
                                      sub_188D718();
                                    }
                                    v504 = operator new(4 * v503);
                                    v505 = (unsigned int *)&v504[4 * v500];
                                    unsigned int *v505 = v493;
                                    uint64_t v506 = (uint64_t)(v505 + 1);
                                    if (v486 != v498)
                                    {
LABEL_830:
                                      unint64_t v507 = (char *)(v486 - 1) - (char *)v498;
                                      if (v507 < 0xBC
                                        || &v504[v499 - 4 - (v507 & 0xFFFFFFFFFFFFFFFCLL)] > &v504[v499 - 4]
                                        || (unsigned int *)((char *)v486 - (v507 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v486 - 1
                                        || (unint64_t)((char *)v486 - v504 - v499) < 0x20)
                                      {
                                        v508 = v486;
                                        std::string v256 = v497;
                                      }
                                      else
                                      {
                                        uint64_t v510 = (v507 >> 2) + 1;
                                        uint64_t v511 = 4 * (v510 & 0x7FFFFFFFFFFFFFF8);
                                        v508 = &v486[v511 / 0xFFFFFFFFFFFFFFFCLL];
                                        v505 = (unsigned int *)((char *)v505 - v511);
                                        v512 = &v504[4 * v500 - 16];
                                        v513 = (long long *)(v486 - 4);
                                        uint64_t v514 = v510 & 0x7FFFFFFFFFFFFFF8;
                                        std::string v256 = v497;
                                        do
                                        {
                                          long long v515 = *v513;
                                          *(v512 - 1) = *(v513 - 1);
                                          _OWORD *v512 = v515;
                                          v512 -= 2;
                                          v513 -= 2;
                                          v514 -= 8;
                                        }
                                        while (v514);
                                        if (v510 == (v510 & 0x7FFFFFFFFFFFFFF8))
                                        {
LABEL_833:
                                          v486 = (unsigned int *)__p;
                                          long long __p = v505;
                                          v673 = (void **)v506;
                                          *(void *)&long long v674 = &v504[4 * v503];
                                          if (v486) {
                                            goto LABEL_834;
                                          }
                                          goto LABEL_835;
                                        }
                                      }
                                      do
                                      {
                                        unsigned int v509 = *--v508;
                                        *--v505 = v509;
                                      }
                                      while (v508 != v498);
                                      goto LABEL_833;
                                    }
                                  }
                                  else
                                  {
                                    v504 = 0;
                                    v505 = (unsigned int *)(4 * v500);
                                    *(_DWORD *)(4 * v500) = v493;
                                    uint64_t v506 = 4 * v500 + 4;
                                    if (v486 != v498) {
                                      goto LABEL_830;
                                    }
                                  }
                                  std::string v256 = v497;
                                  long long __p = v505;
                                  v673 = (void **)v506;
                                  *(void *)&long long v674 = &v504[4 * v503];
                                  if (v486) {
LABEL_834:
                                  }
                                    operator delete(v486);
LABEL_835:
                                  v486 = (unsigned int *)v506;
                                  v673 = (void **)v506;
                                  v253 += 3;
                                  v487 += 3;
                                  if (v487 == v256)
                                  {
LABEL_847:
                                    unsigned int v253 = (unsigned int *)v657;
                                    std::string v256 = v658;
                                    if (v657 == v658)
                                    {
LABEL_848:
                                      BOOL v490 = 1;
                                      goto LABEL_849;
                                    }
LABEL_806:
                                    v488 = v253 + 3;
                                    do
                                    {
                                      int v489 = *(v488 - 1);
                                      BOOL v490 = v489 != 0x7FFFFFFF;
                                      BOOL v491 = v489 == 0x7FFFFFFF || v488 == v256;
                                      v488 += 3;
                                    }
                                    while (!v491);
LABEL_849:
                                    v655 = 0;
                                    v654 = 0;
                                    v656 = 0;
                                    unint64_t v516 = -1 - 0x5555555555555555 * (v256 - v253);
                                    if (v516)
                                    {
                                      if (v516 >> 61) {
                                        sub_2E00();
                                      }
                                      v517 = (char *)operator new(8 * v516);
                                      v654 = v517;
                                      v655 = (void **)v517;
                                      v656 = &v517[8 * v516];
                                      if (v253 == v256)
                                      {
LABEL_920:
                                        v652 = 0;
                                        v651 = 0;
                                        v653 = 0;
                                        uint64_t v566 = (char *)v486 - (unsigned char *)__p;
                                        if (v486 != __p)
                                        {
                                          if ((unint64_t)v566 >= 0x3FFFFFFFFFFFFFFDLL) {
                                            sub_2E00();
                                          }
                                          v651 = operator new(4 * v566);
                                          v652 = (char *)v651;
                                          v653 = (char *)v651 + 16 * (v566 >> 2);
                                          memset(v678, 0, sizeof(v678));
                                          LODWORD(v679[0]) = 1065353216;
                                          char v650 = 8;
                                          strcpy((char *)v649, "length_m");
                                          double v695 = (double)*(uint64_t *)sub_685D1C(&v654, 0) / 100.0;
                                          int v696 = 1;
                                          sub_59D18((uint64_t)v678, (uint64_t)v649, (uint64_t)&v695);
                                          switch(v696)
                                          {
                                            case 3:
                                              v569 = *(void ***)&v695;
                                              double v695 = 0.0;
                                              if (v569)
                                              {
                                                v680 = v569;
                                                sub_54FE0(&v680);
                                                goto LABEL_933;
                                              }
                                              break;
                                            case 2:
                                              uint64_t v568 = *(void *)&v695;
                                              double v695 = 0.0;
                                              if (v568)
                                              {
                                                sub_553C4(v568);
                                                goto LABEL_933;
                                              }
                                              break;
                                            case 0:
                                              double v567 = v695;
                                              double v695 = 0.0;
                                              if (v567 != 0.0)
                                              {
                                                if (*(char *)(*(void *)&v567 + 23) < 0) {
                                                  operator delete(**(void ***)&v567);
                                                }
LABEL_933:
                                                operator delete();
                                              }
                                              break;
                                          }
                                          if (v650 < 0) {
                                            operator delete(v649[0]);
                                          }
                                          HIBYTE(v648[2]) = 18;
                                          strcpy((char *)v648, "elevation_change_m");
                                          double v693 = (double)*(int *)sub_C9233C(&__p, 0) / 100.0;
                                          int v694 = 1;
                                          sub_59D18((uint64_t)v678, (uint64_t)v648, (uint64_t)&v693);
                                          switch(v694)
                                          {
                                            case 3:
                                              v572 = *(void ***)&v693;
                                              double v693 = 0.0;
                                              if (v572)
                                              {
                                                v680 = v572;
                                                sub_54FE0(&v680);
                                                goto LABEL_947;
                                              }
                                              break;
                                            case 2:
                                              uint64_t v571 = *(void *)&v693;
                                              double v693 = 0.0;
                                              if (v571)
                                              {
                                                sub_553C4(v571);
                                                goto LABEL_947;
                                              }
                                              break;
                                            case 0:
                                              double v570 = v693;
                                              double v693 = 0.0;
                                              if (v570 != 0.0)
                                              {
                                                if (*(char *)(*(void *)&v570 + 23) < 0) {
                                                  operator delete(**(void ***)&v570);
                                                }
LABEL_947:
                                                operator delete();
                                              }
                                              break;
                                          }
                                          if (SHIBYTE(v648[2]) < 0)
                                          {
                                            operator delete(v648[0]);
                                            if (v652 < v653) {
LABEL_950:
                                            }
                                              operator new();
                                          }
                                          else if (v652 < v653)
                                          {
                                            goto LABEL_950;
                                          }
                                          sub_C9A3C4(&v651);
                                        }
                                        memset(v678, 0, sizeof(v678));
                                        LODWORD(v679[0]) = 1065353216;
                                        HIBYTE(v647[2]) = 16;
                                        strcpy((char *)v647, "traversal_time_s");
                                        double v691 = (double)v603 / 10.0;
                                        int v692 = 1;
                                        sub_59D18((uint64_t)v678, (uint64_t)v647, (uint64_t)&v691);
                                        if (v692 == 3)
                                        {
                                          v576 = *(void ***)&v691;
                                          double v691 = 0.0;
                                          int v573 = v602;
                                          if (v576)
                                          {
                                            v680 = v576;
                                            sub_54FE0(&v680);
                                            goto LABEL_964;
                                          }
                                        }
                                        else
                                        {
                                          int v573 = v602;
                                          if (v692 == 2)
                                          {
                                            uint64_t v575 = *(void *)&v691;
                                            double v691 = 0.0;
                                            if (v575)
                                            {
                                              sub_553C4(v575);
                                              goto LABEL_964;
                                            }
                                          }
                                          else if (!v692)
                                          {
                                            double v574 = v691;
                                            double v691 = 0.0;
                                            if (v574 != 0.0)
                                            {
                                              if (*(char *)(*(void *)&v574 + 23) < 0) {
                                                operator delete(**(void ***)&v574);
                                              }
LABEL_964:
                                              operator delete();
                                            }
                                          }
                                        }
                                        if (SHIBYTE(v647[2]) < 0) {
                                          operator delete(v647[0]);
                                        }
                                        char v646 = 15;
                                        strcpy((char *)v645, "freeflow_time_s");
                                        double v689 = (double)v573 / 10.0;
                                        int v690 = 1;
                                        sub_59D18((uint64_t)v678, (uint64_t)v645, (uint64_t)&v689);
                                        switch(v690)
                                        {
                                          case 3:
                                            v579 = *(void ***)&v689;
                                            double v689 = 0.0;
                                            if (v579)
                                            {
                                              v680 = v579;
                                              sub_54FE0(&v680);
                                              goto LABEL_978;
                                            }
                                            break;
                                          case 2:
                                            uint64_t v578 = *(void *)&v689;
                                            double v689 = 0.0;
                                            if (v578)
                                            {
                                              sub_553C4(v578);
                                              goto LABEL_978;
                                            }
                                            break;
                                          case 0:
                                            double v577 = v689;
                                            double v689 = 0.0;
                                            if (v577 != 0.0)
                                            {
                                              if (*(char *)(*(void *)&v577 + 23) < 0) {
                                                operator delete(**(void ***)&v577);
                                              }
LABEL_978:
                                              operator delete();
                                            }
                                            break;
                                        }
                                        if (v646 < 0) {
                                          operator delete(v645[0]);
                                        }
                                        char v644 = 10;
                                        strcpy((char *)v643, "end_soc_wh");
                                        double v687 = (double)v600 / 1000.0;
                                        int v688 = 1;
                                        sub_59D18((uint64_t)v678, (uint64_t)v643, (uint64_t)&v687);
                                        switch(v688)
                                        {
                                          case 3:
                                            v582 = *(void ***)&v687;
                                            double v687 = 0.0;
                                            if (v582)
                                            {
                                              v680 = v582;
                                              sub_54FE0(&v680);
                                              goto LABEL_992;
                                            }
                                            break;
                                          case 2:
                                            uint64_t v581 = *(void *)&v687;
                                            double v687 = 0.0;
                                            if (v581)
                                            {
                                              sub_553C4(v581);
                                              goto LABEL_992;
                                            }
                                            break;
                                          case 0:
                                            double v580 = v687;
                                            double v687 = 0.0;
                                            if (v580 != 0.0)
                                            {
                                              if (*(char *)(*(void *)&v580 + 23) < 0) {
                                                operator delete(**(void ***)&v580);
                                              }
LABEL_992:
                                              operator delete();
                                            }
                                            break;
                                        }
                                        if (v644 < 0) {
                                          operator delete(v643[0]);
                                        }
                                        char v642 = 8;
                                        strcpy((char *)v641, "length_m");
                                        double v685 = (double)v601 / 100.0;
                                        int v686 = 1;
                                        sub_59D18((uint64_t)v678, (uint64_t)v641, (uint64_t)&v685);
                                        switch(v686)
                                        {
                                          case 3:
                                            v585 = *(void ***)&v685;
                                            double v685 = 0.0;
                                            if (v585)
                                            {
                                              v680 = v585;
                                              sub_54FE0(&v680);
                                              goto LABEL_1006;
                                            }
                                            break;
                                          case 2:
                                            uint64_t v584 = *(void *)&v685;
                                            double v685 = 0.0;
                                            if (v584)
                                            {
                                              sub_553C4(v584);
                                              goto LABEL_1006;
                                            }
                                            break;
                                          case 0:
                                            double v583 = v685;
                                            double v685 = 0.0;
                                            if (v583 != 0.0)
                                            {
                                              if (*(char *)(*(void *)&v583 + 23) < 0) {
                                                operator delete(**(void ***)&v583);
                                              }
LABEL_1006:
                                              operator delete();
                                            }
                                            break;
                                        }
                                        if (v642 < 0) {
                                          operator delete(v641[0]);
                                        }
                                        HIBYTE(v640[2]) = 18;
                                        strcpy((char *)v640, "elevation_change_m");
                                        double v586 = (double)(int)(v619 - v623) / 100.0;
                                        if (v630) {
                                          double v586 = 0.0;
                                        }
                                        uint64_t v683 = *(void *)&v586;
                                        int v684 = 1;
                                        sub_59D18((uint64_t)v678, (uint64_t)v640, (uint64_t)&v683);
                                        switch(v684)
                                        {
                                          case 3:
                                            v589 = (void **)v683;
                                            uint64_t v683 = 0;
                                            if (v589)
                                            {
                                              v680 = v589;
                                              sub_54FE0(&v680);
                                              goto LABEL_1022;
                                            }
                                            break;
                                          case 2:
                                            uint64_t v588 = v683;
                                            uint64_t v683 = 0;
                                            if (v588)
                                            {
                                              sub_553C4(v588);
                                              goto LABEL_1022;
                                            }
                                            break;
                                          case 0:
                                            uint64_t v587 = v683;
                                            uint64_t v683 = 0;
                                            if (v587)
                                            {
                                              if (*(char *)(v587 + 23) < 0) {
                                                operator delete(*(void **)v587);
                                              }
LABEL_1022:
                                              operator delete();
                                            }
                                            break;
                                        }
                                        if (SHIBYTE(v640[2]) < 0) {
                                          operator delete(v640[0]);
                                        }
                                        char v639 = 9;
                                        strcpy((char *)v638, "speed_mps");
                                        double v681 = (double)v601 * 0.1 / (double)v617 * 3.6 / 3.6;
                                        int v682 = 1;
                                        sub_59D18((uint64_t)v678, (uint64_t)v638, (uint64_t)&v681);
                                        switch(v682)
                                        {
                                          case 3:
                                            v592 = *(void ***)&v681;
                                            double v681 = 0.0;
                                            if (v592)
                                            {
                                              v680 = v592;
                                              sub_54FE0(&v680);
                                              goto LABEL_1036;
                                            }
                                            break;
                                          case 2:
                                            uint64_t v591 = *(void *)&v681;
                                            double v681 = 0.0;
                                            if (v591)
                                            {
                                              sub_553C4(v591);
                                              goto LABEL_1036;
                                            }
                                            break;
                                          case 0:
                                            double v590 = v681;
                                            double v681 = 0.0;
                                            if (v590 != 0.0)
                                            {
                                              if (*(char *)(*(void *)&v590 + 23) < 0) {
                                                operator delete(**(void ***)&v590);
                                              }
LABEL_1036:
                                              operator delete();
                                            }
                                            break;
                                        }
                                        if (v639 < 0) {
                                          operator delete(v638[0]);
                                        }
                                        v637[23] = 8;
                                        strcpy(v637, "geometry");
                                        operator new();
                                      }
                                    }
                                    else
                                    {
                                      v517 = 0;
                                      if (v253 == v256) {
                                        goto LABEL_920;
                                      }
                                    }
                                    v518 = v253 + 3;
                                    if (v253 + 3 == v256) {
                                      goto LABEL_920;
                                    }
                                    v627 = v256;
                                    while (2)
                                    {
                                      unsigned int v522 = *v253;
                                      unsigned int v521 = v253[1];
                                      BOOL v523 = *v253 == -1 && v521 == -1;
                                      if (v523
                                        || ((unsigned int v524 = *v518, *v518 == -1) ? (v525 = v253[4] == -1) : (v525 = 0), v525))
                                      {
                                        uint64_t v546 = 0x7FFFFFFFFFFFFFFFLL;
                                        v547 = v656;
                                        if (v517 >= v656) {
                                          goto LABEL_876;
                                        }
                                      }
                                      else
                                      {
                                        long double v526 = exp(3.14159265 - (double)v521 * 6.28318531 / 4294967300.0);
                                        long double v527 = atan((v526 - 1.0 / v526) * 0.5) * 57.2957795 * 0.0174532925;
                                        v528.i64[0] = v522;
                                        v528.i64[1] = v524;
                                        float64x2_t v529 = vcvtq_f64_u64(v528);
                                        float64x2_t v633 = v529;
                                        LODWORD(v529.f64[0]) = v518[1];
                                        long double v530 = exp(3.14159265- (double)*(unint64_t *)&v529.f64[0] * 6.28318531 / 4294967300.0);
                                        long double v531 = atan((v530 - 1.0 / v530) * 0.5) * 57.2957795 * 0.0174532925;
                                        int64x2_t v532 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(v633, v607), v604), v606), v605);
                                        v633.f64[0] = vsubq_f64((float64x2_t)v532, (float64x2_t)vdupq_laneq_s64(v532, 1)).f64[0];
                                        long double v533 = sin((v527 - v531) * 0.5);
                                        long double v534 = v533 * v533;
                                        double v535 = cos(v527);
                                        long double v536 = v535 * cos(v531);
                                        long double v537 = sin(0.5 * v633.f64[0]);
                                        long double v538 = atan2(sqrt(v537 * v537 * v536 + v534), sqrt(1.0 - (v537 * v537 * v536 + v534)));
                                        double v539 = (v538 + v538) * 6372797.56;
                                        if (v490)
                                        {
                                          unsigned int v540 = v253[2];
                                          if (v540 != 0x7FFFFFFF)
                                          {
                                            unsigned int v541 = v518[2];
                                            if (v541 != 0x7FFFFFFF)
                                            {
                                              double v542 = fabs((double)(int)(v540 - v541));
                                              double v539 = sqrt(v539 * v539+ (double)(int)v542 / 100.0 * ((double)(int)v542 / 100.0));
                                            }
                                          }
                                        }
                                        double v543 = v539 * 100.0;
                                        if (v543 >= 0.0)
                                        {
                                          double v544 = v543;
                                          if (v543 < 4.50359963e15)
                                          {
                                            uint64_t v545 = (uint64_t)(v543 + v543) + 1;
                                            goto LABEL_899;
                                          }
                                        }
                                        else
                                        {
                                          double v544 = v543;
                                          if (v543 > -4.50359963e15)
                                          {
                                            uint64_t v545 = (uint64_t)(v543 + v543);
                                            if (v545 >= 1) {
                                              --v545;
                                            }
LABEL_899:
                                            double v544 = (double)(v545 >> 1);
                                          }
                                        }
                                        if (v544 >= 9.22337204e18)
                                        {
                                          uint64_t v546 = 0x7FFFFFFFFFFFFFFELL;
                                          v547 = v656;
                                          if (v517 >= v656) {
                                            goto LABEL_876;
                                          }
                                        }
                                        else
                                        {
                                          if (v543 >= 0.0)
                                          {
                                            if (v543 < 4.50359963e15)
                                            {
                                              uint64_t v559 = (uint64_t)(v543 + v543) + 1;
                                              goto LABEL_910;
                                            }
                                          }
                                          else if (v543 > -4.50359963e15)
                                          {
                                            uint64_t v559 = (uint64_t)(v543 + v543);
                                            if (v559 >= 1) {
                                              --v559;
                                            }
LABEL_910:
                                            double v543 = (double)(v559 >> 1);
                                          }
                                          uint64_t v546 = (uint64_t)v543;
                                          v547 = v656;
                                          if (v517 >= v656)
                                          {
LABEL_876:
                                            v548 = (char *)v654;
                                            int64_t v549 = v517 - (unsigned char *)v654;
                                            uint64_t v550 = (v517 - (unsigned char *)v654) >> 3;
                                            unint64_t v551 = v550 + 1;
                                            if ((unint64_t)(v550 + 1) >> 61) {
                                              sub_2E00();
                                            }
                                            uint64_t v552 = v547 - (unsigned char *)v654;
                                            if (v552 >> 2 > v551) {
                                              unint64_t v551 = v552 >> 2;
                                            }
                                            if ((unint64_t)v552 >= 0x7FFFFFFFFFFFFFF8) {
                                              unint64_t v553 = 0x1FFFFFFFFFFFFFFFLL;
                                            }
                                            else {
                                              unint64_t v553 = v551;
                                            }
                                            if (v553)
                                            {
                                              if (v553 >> 61) {
                                                sub_188D718();
                                              }
                                              v554 = operator new(8 * v553);
                                              v555 = (uint64_t *)&v554[8 * v550];
                                              uint64_t *v555 = v546;
                                              uint64_t v519 = (uint64_t)(v555 + 1);
                                              if (v517 != v548)
                                              {
LABEL_885:
                                                unint64_t v556 = v517 - 8 - v548;
                                                v520 = v627;
                                                if (v556 < 0x168)
                                                {
                                                  v557 = v517;
                                                  goto LABEL_887;
                                                }
                                                if (&v554[v549 - 8 - (v556 & 0xFFFFFFFFFFFFFFF8)] > &v554[v549 - 8])
                                                {
                                                  v557 = v517;
                                                  goto LABEL_887;
                                                }
                                                if (&v517[-(v556 & 0xFFFFFFFFFFFFFFF8) - 8] > v517 - 8)
                                                {
                                                  v557 = v517;
                                                  goto LABEL_887;
                                                }
                                                if ((unint64_t)(v517 - &v554[v549]) < 0x20)
                                                {
                                                  v557 = v517;
                                                  goto LABEL_887;
                                                }
                                                uint64_t v560 = (v556 >> 3) + 1;
                                                uint64_t v561 = 8 * (v560 & 0x3FFFFFFFFFFFFFFCLL);
                                                v557 = &v517[-v561];
                                                v555 = (uint64_t *)((char *)v555 - v561);
                                                v562 = &v554[8 * v550 - 16];
                                                v563 = (long long *)(v517 - 16);
                                                uint64_t v564 = v560 & 0x3FFFFFFFFFFFFFFCLL;
                                                do
                                                {
                                                  long long v565 = *v563;
                                                  *(v562 - 1) = *(v563 - 1);
                                                  _OWORD *v562 = v565;
                                                  v562 -= 2;
                                                  v563 -= 2;
                                                  v564 -= 4;
                                                }
                                                while (v564);
                                                if (v560 != (v560 & 0x3FFFFFFFFFFFFFFCLL))
                                                {
                                                  do
                                                  {
LABEL_887:
                                                    uint64_t v558 = *((void *)v557 - 1);
                                                    v557 -= 8;
                                                    *--v555 = v558;
                                                  }
                                                  while (v557 != v548);
                                                }
                                                v517 = (char *)v654;
                                                v654 = v555;
                                                v655 = (void **)v519;
                                                v656 = &v554[8 * v553];
                                                if (!v517)
                                                {
LABEL_857:
                                                  v655 = (void **)v519;
                                                  v253 += 3;
                                                  v518 += 3;
                                                  v517 = (char *)v519;
                                                  if (v518 == v520)
                                                  {
                                                    v486 = (unsigned int *)v673;
                                                    goto LABEL_920;
                                                  }
                                                  continue;
                                                }
LABEL_892:
                                                operator delete(v517);
                                                goto LABEL_857;
                                              }
                                            }
                                            else
                                            {
                                              v554 = 0;
                                              v555 = (uint64_t *)(8 * v550);
                                              *(void *)(8 * v550) = v546;
                                              uint64_t v519 = 8 * v550 + 8;
                                              if (v517 != v548) {
                                                goto LABEL_885;
                                              }
                                            }
                                            v520 = v627;
                                            v654 = v555;
                                            v655 = (void **)v519;
                                            v656 = &v554[8 * v553];
                                            if (!v517) {
                                              goto LABEL_857;
                                            }
                                            goto LABEL_892;
                                          }
                                        }
                                      }
                                      break;
                                    }
                                    *(void *)v517 = v546;
                                    uint64_t v519 = (uint64_t)(v517 + 8);
                                    v520 = v627;
                                    goto LABEL_857;
                                  }
                                  continue;
                                }
                              }
                              v382 = &v477[v479 + *(unsigned int *)&v477[v479]];
                              if (*((unsigned __int16 *)v382 + 2) != *((unsigned __int16 *)v382 + 4)
                                || *((unsigned __int16 *)v382 + 3) != *((unsigned __int16 *)v382 + 5))
                              {
                                goto LABEL_786;
                              }
                              unint64_t v304 = (v304 + 1);
                              uint64_t v406 = *v629;
                              if (v304 >= (v629[1] - *v629) >> 3)
                              {
                                v609 = (int *)v477;
                                unsigned int v618 = v445;
                                unsigned int v383 = 2;
                                v625 += 3;
                                if (v304 != v615) {
                                  continue;
                                }
                                goto LABEL_620;
                              }
                              goto LABEL_717;
                            }
                          }
                          else
                          {
                            unint64_t v467 = v303[21];
                            unint64_t v468 = v303[18];
                            unint64_t v469 = v303[15];
                            unint64_t v470 = v303[24];
                            v464 = (unsigned int *)sub_2AB884(*v303, 1, v445, 1);
                            if (v469 >= v461) {
                              unint64_t v471 = v461;
                            }
                            else {
                              unint64_t v471 = v469;
                            }
                            BOOL v472 = v468 >= v471;
                            if (v468 < v471) {
                              unint64_t v471 = v468;
                            }
                            unsigned int v473 = 4 * (v469 < v461);
                            if (!v472) {
                              unsigned int v473 = 5;
                            }
                            if (v467 < v471)
                            {
                              unsigned int v473 = 6;
                              unint64_t v471 = v467;
                            }
                            if (v470 < v471) {
                              unsigned int v473 = 7;
                            }
                            v474 = &v632[24 * v473];
                            *(_DWORD *)v474 = v654;
                            *((void *)v474 + 1) = v303[482];
                            *((void *)v474 + 2) = v464;
                            if (v464) {
                              goto LABEL_755;
                            }
                          }
                        }
                        sub_296654((int **)&__p);
                        v465 = 0;
                        v466 = (_WORD *)(&loc_1120530 + 1);
                        if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                          goto LABEL_772;
                        }
                        goto LABEL_770;
                      }
                    }
                    else
                    {
                      unint64_t v452 = v303[21];
                      unint64_t v453 = v303[18];
                      unint64_t v454 = v303[15];
                      unint64_t v455 = v303[24];
                      v449 = (unsigned int *)sub_2AB884(*v303, 1, v445, 1);
                      if (v454 >= v446) {
                        unint64_t v456 = v446;
                      }
                      else {
                        unint64_t v456 = v454;
                      }
                      BOOL v457 = v453 >= v456;
                      if (v453 < v456) {
                        unint64_t v456 = v453;
                      }
                      unsigned int v458 = 4 * (v454 < v446);
                      if (!v457) {
                        unsigned int v458 = 5;
                      }
                      if (v452 < v456)
                      {
                        unsigned int v458 = 6;
                        unint64_t v456 = v452;
                      }
                      if (v455 < v456) {
                        unsigned int v458 = 7;
                      }
                      v459 = &v632[24 * v458];
                      *(_DWORD *)v459 = v654;
                      *((void *)v459 + 1) = v303[482];
                      *((void *)v459 + 2) = v449;
                      if (v449) {
                        goto LABEL_727;
                      }
                    }
                  }
                  sub_296654((int **)&__p);
                  v450 = 0;
                  v451 = (_WORD *)(&loc_1120530 + 1);
                  if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
                    goto LABEL_744;
                  }
                  goto LABEL_742;
                }
                unsigned int v383 = v386 - 1;
                if (v386 - 1 >= v401)
                {
                  uint64_t v403 = *v629;
                  unint64_t v304 = (v614 - 1);
                  if (v304 < (v629[1] - *v629) >> 3) {
                    goto LABEL_652;
                  }
                  goto LABEL_784;
                }
                v402 = &v385[4 * v383];
                if (*(unsigned __int16 *)v387 != *(unsigned __int16 *)v402) {
                  goto LABEL_619;
                }
                unint64_t v304 = v614;
                if (*((unsigned __int16 *)v387 + 1) != *((unsigned __int16 *)v402 + 1)) {
                  goto LABEL_784;
                }
                uint64_t v403 = *v629;
                uint64_t v404 = v629[1] - *v629;
                if (v401 == 2 && v404 == 8) {
                  goto LABEL_784;
                }
                unsigned int v383 = v386 - 2;
                unint64_t v304 = (v614 - 1);
                if (v304 >= v404 >> 3) {
                  goto LABEL_784;
                }
                while (1)
                {
LABEL_652:
                  unint64_t v408 = *(void *)(v403 + 8 * v304);
                  LODWORD(v654) = v408;
                  LODWORD(v651) = 1;
                  long long __p = &v651;
                  v673 = &v654;
                  unint64_t v409 = v303[482] + 1;
                  v303[482] = v409;
                  if (!*v303)
                  {
LABEL_676:
                    sub_296654((int **)&__p);
                    v413 = 0;
                    v414 = (_WORD *)(&loc_1120530 + 1);
                    if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
                      goto LABEL_679;
                    }
                    goto LABEL_677;
                  }
                  if (*((_DWORD *)v303 + 28) == v408)
                  {
                    unsigned int v410 = 4;
                    goto LABEL_661;
                  }
                  if (*((_DWORD *)v303 + 34) == v408)
                  {
                    unsigned int v410 = 5;
                    goto LABEL_661;
                  }
                  if (*((_DWORD *)v303 + 40) == v408)
                  {
                    unsigned int v410 = 6;
                    goto LABEL_661;
                  }
                  if (*((_DWORD *)v303 + 46) == v408)
                  {
                    unsigned int v410 = 7;
LABEL_661:
                    ++v303[483];
                    v411 = &v632[24 * v410];
                    *((void *)v411 + 1) = v409;
                    v412 = (unsigned int *)*((void *)v411 + 2);
                    if (!v412) {
                      goto LABEL_676;
                    }
                    goto LABEL_662;
                  }
                  unint64_t v415 = v303[21];
                  unint64_t v416 = v303[18];
                  unint64_t v417 = v303[15];
                  unint64_t v418 = v303[24];
                  v412 = (unsigned int *)sub_2AB884(*v303, 1, v408, 1);
                  if (v417 >= v409) {
                    unint64_t v419 = v409;
                  }
                  else {
                    unint64_t v419 = v417;
                  }
                  BOOL v420 = v416 >= v419;
                  if (v416 < v419) {
                    unint64_t v419 = v416;
                  }
                  unsigned int v421 = 4 * (v417 < v409);
                  if (!v420) {
                    unsigned int v421 = 5;
                  }
                  if (v415 < v419)
                  {
                    unsigned int v421 = 6;
                    unint64_t v419 = v415;
                  }
                  if (v418 < v419) {
                    unsigned int v421 = 7;
                  }
                  v422 = &v632[24 * v421];
                  *(_DWORD *)v422 = v654;
                  *((void *)v422 + 1) = v303[482];
                  *((void *)v422 + 2) = v412;
                  if (!v412) {
                    goto LABEL_676;
                  }
LABEL_662:
                  v413 = (int *)((char *)v412 + *v412);
                  v414 = (unsigned __int16 *)((char *)v413 - *v413);
                  if (*v414 < 7u) {
                    goto LABEL_679;
                  }
LABEL_677:
                  uint64_t v423 = v414[3];
                  if (v423)
                  {
                    int v622 = *(int *)((char *)v413 + v423);
                    goto LABEL_680;
                  }
LABEL_679:
                  int v622 = 0;
LABEL_680:
                  LODWORD(v654) = v408;
                  LODWORD(v651) = 1;
                  long long __p = &v651;
                  v673 = &v654;
                  unint64_t v424 = v303[482] + 1;
                  v303[482] = v424;
                  if (!*v303) {
                    goto LABEL_704;
                  }
                  if (*((_DWORD *)v303 + 28) == v408)
                  {
                    unsigned int v425 = 4;
                    goto LABEL_689;
                  }
                  if (*((_DWORD *)v303 + 34) == v408)
                  {
                    unsigned int v425 = 5;
                    goto LABEL_689;
                  }
                  if (*((_DWORD *)v303 + 40) == v408)
                  {
                    unsigned int v425 = 6;
                    goto LABEL_689;
                  }
                  if (*((_DWORD *)v303 + 46) == v408)
                  {
                    unsigned int v425 = 7;
LABEL_689:
                    ++v303[483];
                    v426 = &v632[24 * v425];
                    *((void *)v426 + 1) = v424;
                    v427 = (unsigned int *)*((void *)v426 + 2);
                    if (v427) {
                      goto LABEL_690;
                    }
                    goto LABEL_704;
                  }
                  unint64_t v430 = v303[21];
                  unint64_t v431 = v303[18];
                  unint64_t v432 = v303[15];
                  unint64_t v433 = v303[24];
                  v427 = (unsigned int *)sub_2AB884(*v303, 1, v408, 1);
                  if (v432 >= v424) {
                    unint64_t v434 = v424;
                  }
                  else {
                    unint64_t v434 = v432;
                  }
                  BOOL v435 = v431 >= v434;
                  if (v431 < v434) {
                    unint64_t v434 = v431;
                  }
                  unsigned int v436 = 4 * (v432 < v424);
                  if (!v435) {
                    unsigned int v436 = 5;
                  }
                  if (v430 < v434)
                  {
                    unsigned int v436 = 6;
                    unint64_t v434 = v430;
                  }
                  if (v433 < v434) {
                    unsigned int v436 = 7;
                  }
                  v437 = &v632[24 * v436];
                  *(_DWORD *)v437 = v654;
                  *((void *)v437 + 1) = v303[482];
                  *((void *)v437 + 2) = v427;
                  if (v427)
                  {
LABEL_690:
                    v428 = (int *)((char *)v427 + *v427);
                    v429 = (unsigned __int16 *)((char *)v428 - *v428);
                    if (*v429 < 5u) {
                      goto LABEL_707;
                    }
                    goto LABEL_705;
                  }
LABEL_704:
                  sub_296654((int **)&__p);
                  v428 = 0;
                  v429 = (_WORD *)(&loc_1120530 + 1);
                  if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                    goto LABEL_707;
                  }
LABEL_705:
                  uint64_t v438 = v429[2];
                  if (!v438)
                  {
LABEL_707:
                    v439 = 0;
                    goto LABEL_708;
                  }
                  v439 = (char *)v428 + v438 + *(unsigned int *)((char *)v428 + v438);
LABEL_708:
                  v440 = &v439[4 * HIDWORD(v408) + 4 + *(unsigned int *)&v439[4 * HIDWORD(v408) + 4]];
                  v441 = &v440[-*(int *)v440];
                  if (*(unsigned __int16 *)v441 >= 7u && (uint64_t v442 = *((unsigned __int16 *)v441 + 3)) != 0) {
                    v382 = &v440[v442 + *(unsigned int *)&v440[v442]];
                  }
                  else {
                    v382 = 0;
                  }
                  unsigned int v383 = *(_DWORD *)v382 - 2;
                  v443 = &v382[4 * (*(_DWORD *)v382 - 1) + 4];
                  v444 = &v382[4 * v383 + 4];
                  if (*(unsigned __int16 *)v443 != *(unsigned __int16 *)v444
                    || *((unsigned __int16 *)v443 + 1) != *((unsigned __int16 *)v444 + 1))
                  {
                    break;
                  }
                  unint64_t v304 = (v304 - 1);
                  uint64_t v403 = *v629;
                  if (v304 >= (v629[1] - *v629) >> 3)
                  {
                    v609 = (int *)v440;
                    unsigned int v383 = *(_DWORD *)v382 - 3;
                    goto LABEL_783;
                  }
                }
                v609 = (int *)v440;
LABEL_783:
                unsigned int v618 = v408;
LABEL_784:
                v625 += 3;
                if (v304 == v615) {
                  goto LABEL_620;
                }
              }
              v382 = v384;
              if (v395 >= 0xB)
              {
LABEL_625:
                if (v394[5])
                {
                  int v397 = *(unsigned __int16 *)((char *)v609 + 2 * v386 + v394[5] + *(int *)((char *)v609 + v394[5]) + 4);
                  if (v397 != 0xFFFF)
                  {
                    uint64_t v398 = v394[4];
                    if (v398) {
                      LODWORD(v398) = *(int *)((char *)v609 + v398);
                    }
                    int v396 = v622 + v397 + v398;
                    goto LABEL_631;
                  }
                }
              }
              int v396 = 0x7FFFFFFF;
              goto LABEL_631;
            }
          }
        }
LABEL_470:
        sub_296654((int **)&__p);
        unint64_t v115 = 0;
        goto LABEL_471;
      }
      if (v661 == v662) {
        goto LABEL_144;
      }
      unint64_t v67 = v660;
      v678[0] = v660;
      v678[1] = &v661;
      *(_OWORD *)&v678[2] = 0u;
      memset(v679, 0, 25);
      unint64_t v68 = *(void *)v661;
      DWORD2(v679[0]) = v68;
      LODWORD(v654) = v68;
      LODWORD(v651) = 1;
      long long __p = &v651;
      v673 = &v654;
      unint64_t v69 = v660[482] + 1;
      v660[482] = v69;
      if (!*v67) {
        goto LABEL_413;
      }
      int v70 = v67 + 2;
      if (*((_DWORD *)v67 + 28) == v68)
      {
        unsigned int v71 = 4;
      }
      else if (*((_DWORD *)v67 + 34) == v68)
      {
        unsigned int v71 = 5;
      }
      else if (*((_DWORD *)v67 + 40) == v68)
      {
        unsigned int v71 = 6;
      }
      else
      {
        if (*((_DWORD *)v67 + 46) != v68)
        {
          unint64_t v257 = v67[21];
          unint64_t v258 = v67[18];
          unint64_t v259 = v67[15];
          unint64_t v260 = v67[24];
          unint64_t v110 = (unsigned int *)sub_2AB884(*v67, 1, v68, 1);
          if (v259 >= v69) {
            unint64_t v261 = v69;
          }
          else {
            unint64_t v261 = v259;
          }
          BOOL v262 = v258 >= v261;
          if (v258 < v261) {
            unint64_t v261 = v258;
          }
          unsigned int v263 = 4 * (v259 < v69);
          if (!v262) {
            unsigned int v263 = 5;
          }
          if (v257 < v261)
          {
            unsigned int v263 = 6;
            unint64_t v261 = v257;
          }
          if (v260 < v261) {
            unsigned int v263 = 7;
          }
          uint64_t v264 = &v70[3 * v263];
          *(_DWORD *)uint64_t v264 = v654;
          v264[1] = v67[482];
          v264[2] = v110;
          if (v110)
          {
LABEL_200:
            uint64_t v111 = (int *)((char *)v110 + *v110);
            unsigned int v112 = (unsigned __int16 *)((char *)v111 - *v111);
            if (*v112 < 7u) {
              goto LABEL_416;
            }
LABEL_414:
            uint64_t v265 = v112[3];
            if (v265)
            {
              int v266 = *(int *)((char *)v111 + v265);
              goto LABEL_417;
            }
LABEL_416:
            int v266 = 0;
LABEL_417:
            HIDWORD(v679[0]) = v266;
            uint64_t v267 = v678[0];
            unsigned int v268 = DWORD2(v679[0]);
            LODWORD(v654) = DWORD2(v679[0]);
            LODWORD(v651) = 1;
            long long __p = &v651;
            v673 = &v654;
            unint64_t v269 = *((void *)v678[0] + 482) + 1;
            *((void *)v678[0] + 482) = v269;
            if (!*v267) {
              goto LABEL_441;
            }
            uint64_t v270 = (char *)(v267 + 2);
            if (*((_DWORD *)v267 + 28) == v268)
            {
              unsigned int v271 = 4;
            }
            else if (*((_DWORD *)v267 + 34) == v268)
            {
              unsigned int v271 = 5;
            }
            else if (*((_DWORD *)v267 + 40) == v268)
            {
              unsigned int v271 = 6;
            }
            else
            {
              if (*((_DWORD *)v267 + 46) != v268)
              {
                unint64_t v276 = v267[21];
                unint64_t v277 = v267[18];
                unint64_t v278 = v267[15];
                unint64_t v279 = v267[24];
                uint64_t v273 = (unsigned int *)sub_2AB884(*v267, 1, v268, 1);
                if (v278 >= v269) {
                  unint64_t v280 = v269;
                }
                else {
                  unint64_t v280 = v278;
                }
                BOOL v281 = v277 >= v280;
                if (v277 < v280) {
                  unint64_t v280 = v277;
                }
                unsigned int v282 = 4 * (v278 < v269);
                if (!v281) {
                  unsigned int v282 = 5;
                }
                if (v276 < v280)
                {
                  unsigned int v282 = 6;
                  unint64_t v280 = v276;
                }
                if (v279 < v280) {
                  unsigned int v282 = 7;
                }
                uint64_t v283 = &v270[24 * v282];
                *(_DWORD *)uint64_t v283 = v654;
                *((void *)v283 + 1) = v267[482];
                *((void *)v283 + 2) = v273;
                if (v273)
                {
LABEL_427:
                  long long v274 = (int *)((char *)v273 + *v273);
                  uint64_t v275 = (unsigned __int16 *)((char *)v274 - *v274);
                  if (*v275 < 5u) {
                    goto LABEL_444;
                  }
LABEL_442:
                  uint64_t v284 = v275[2];
                  if (v284)
                  {
                    uint64_t v285 = (char *)v274 + v284 + *(unsigned int *)((char *)v274 + v284);
                    goto LABEL_445;
                  }
LABEL_444:
                  uint64_t v285 = 0;
LABEL_445:
                  unsigned int v286 = &v285[4 * HIDWORD(v68) + 4 + *(unsigned int *)&v285[4 * HIDWORD(v68) + 4]];
                  v678[2] = v286;
                  int v287 = &v286[-*(int *)v286];
                  unsigned int v288 = *(unsigned __int16 *)v287;
                  if (v288 <= 6)
                  {
                    v678[3] = 0;
                    *(void *)&v679[0] = 0;
                    uint64_t v76 = (char *)v661;
                    uint64_t v77 = v662;
                    if (v663) {
                      goto LABEL_220;
                    }
                  }
                  else
                  {
                    int v289 = (char *)*((unsigned __int16 *)v287 + 3);
                    if (*((_WORD *)v287 + 3)) {
                      int v289 = &v289[(void)v286 + *(unsigned int *)&v289[(void)v286]];
                    }
                    v678[3] = v289;
                    if (v288 < 0xB)
                    {
                      *(void *)&v679[0] = 0;
                      uint64_t v76 = (char *)v661;
                      uint64_t v77 = v662;
                      if (v663) {
                        goto LABEL_220;
                      }
                    }
                    else
                    {
                      uint64_t v290 = *((unsigned __int16 *)v287 + 5);
                      if (v290)
                      {
                        *(void *)&v679[0] = &v286[v290 + *(unsigned int *)&v286[v290]];
                        uint64_t v76 = (char *)v661;
                        uint64_t v77 = v662;
                        if (v663) {
                          goto LABEL_220;
                        }
                      }
                      else
                      {
                        *(void *)&v679[0] = 0;
                        uint64_t v76 = (char *)v661;
                        uint64_t v77 = v662;
                        if (v663) {
                          goto LABEL_220;
                        }
                      }
                    }
                  }
                  goto LABEL_145;
                }
LABEL_441:
                sub_296654((int **)&__p);
                long long v274 = 0;
                uint64_t v275 = (_WORD *)(&loc_1120530 + 1);
                if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                  goto LABEL_444;
                }
                goto LABEL_442;
              }
              unsigned int v271 = 7;
            }
            ++v267[483];
            uint64_t v272 = &v270[24 * v271];
            *((void *)v272 + 1) = v269;
            uint64_t v273 = (unsigned int *)*((void *)v272 + 2);
            if (v273) {
              goto LABEL_427;
            }
            goto LABEL_441;
          }
LABEL_413:
          sub_296654((int **)&__p);
          uint64_t v111 = 0;
          unsigned int v112 = (_WORD *)(&loc_1120530 + 1);
          if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
            goto LABEL_416;
          }
          goto LABEL_414;
        }
        unsigned int v71 = 7;
      }
      ++v67[483];
      std::string::size_type v109 = &v70[3 * v71];
      v109[1] = v69;
      unint64_t v110 = (unsigned int *)v109[2];
      if (v110) {
        goto LABEL_200;
      }
      goto LABEL_413;
    }
    if (v663)
    {
      BOOL v62 = v660;
      unint64_t v63 = *((void *)v662 - 1);
      LODWORD(v651) = v63;
      LODWORD(v680) = 1;
      v654 = &v680;
      v655 = &v651;
      unint64_t v64 = v660[482] + 1;
      v660[482] = v64;
      if (!*v62) {
        goto LABEL_195;
      }
      unint64_t v65 = v62 + 2;
      if (*((_DWORD *)v62 + 28) == v63)
      {
        unsigned int v66 = 4;
      }
      else if (*((_DWORD *)v62 + 34) == v63)
      {
        unsigned int v66 = 5;
      }
      else if (*((_DWORD *)v62 + 40) == v63)
      {
        unsigned int v66 = 6;
      }
      else
      {
        if (*((_DWORD *)v62 + 46) != v63)
        {
          unint64_t v94 = v62[21];
          unint64_t v95 = v62[18];
          unint64_t v96 = v62[15];
          unint64_t v97 = v62[24];
          unint64_t v85 = (unsigned int *)sub_2AB884(*v62, 1, v63, 1);
          if (v96 >= v64) {
            unint64_t v98 = v64;
          }
          else {
            unint64_t v98 = v96;
          }
          BOOL v99 = v95 >= v98;
          if (v95 < v98) {
            unint64_t v98 = v95;
          }
          unsigned int v100 = 4 * (v96 < v64);
          if (!v99) {
            unsigned int v100 = 5;
          }
          if (v94 < v98)
          {
            unsigned int v100 = 6;
            unint64_t v98 = v94;
          }
          if (v97 < v98) {
            unsigned int v100 = 7;
          }
          uint64_t v101 = &v65[3 * v100];
          *(_DWORD *)uint64_t v101 = v651;
          v101[1] = v62[482];
          _OWORD v101[2] = v85;
          if (v85) {
            goto LABEL_169;
          }
          goto LABEL_195;
        }
        unsigned int v66 = 7;
      }
      ++v62[483];
      long long v84 = &v65[3 * v66];
      v84[1] = v64;
      unint64_t v85 = (unsigned int *)v84[2];
      if (v85)
      {
LABEL_169:
        uint64_t v86 = (int *)((char *)v85 + *v85);
LABEL_196:
        uint64_t v102 = (unsigned int *)((char *)v86 + *(unsigned __int16 *)((char *)v86 - *v86 + 4));
        uint64_t v103 = (uint64_t)&v102[HIDWORD(v63)] + *v102;
        uint64_t v104 = (int *)(v103 + 4 + *(unsigned int *)(v103 + 4));
        unint64_t v105 = (unsigned int *)((char *)v104 + *(unsigned __int16 *)((char *)v104 - *v104 + 6));
        LODWORD(v105) = *(unsigned int *)((char *)v105 + *v105) - 1;
        long long __p = v660;
        v673 = &v661;
        long long v674 = 0u;
        long long v675 = 0u;
        LODWORD(v676) = ((unint64_t)(v662 - (unsigned char *)v661) >> 3) - 1;
        HIDWORD(v676) = v105;
        char v677 = 1;
        sub_2E1D08((uint64_t)&__p);
        unint64_t v106 = (char *)*((void *)&v674 + 1);
        p_p = &__p;
        uint64_t v108 = HIDWORD(v676);
        LODWORD(v63) = DWORD2(v675);
        goto LABEL_277;
      }
LABEL_195:
      sub_296654((int **)&v654);
      uint64_t v86 = 0;
      goto LABEL_196;
    }
    uint64_t v72 = v660;
    v678[0] = v660;
    v678[1] = &v661;
    *(_OWORD *)&v678[2] = 0u;
    memset(v679, 0, 25);
    unint64_t v63 = *(void *)v661;
    DWORD2(v679[0]) = v63;
    LODWORD(v651) = v63;
    LODWORD(v680) = 1;
    v654 = &v680;
    v655 = &v651;
    unint64_t v73 = v660[482] + 1;
    v660[482] = v73;
    if (!*v72) {
      goto LABEL_236;
    }
    uint64_t v74 = v72 + 2;
    if (*((_DWORD *)v72 + 28) == v63)
    {
      unsigned int v75 = 4;
    }
    else if (*((_DWORD *)v72 + 34) == v63)
    {
      unsigned int v75 = 5;
    }
    else if (*((_DWORD *)v72 + 40) == v63)
    {
      unsigned int v75 = 6;
    }
    else
    {
      if (*((_DWORD *)v72 + 46) != v63)
      {
        unint64_t v128 = v72[21];
        unint64_t v129 = v72[18];
        unint64_t v130 = v72[15];
        unint64_t v131 = v72[24];
        uint64_t v91 = (unsigned int *)sub_2AB884(*v72, 1, v63, 1);
        if (v130 >= v73) {
          unint64_t v132 = v73;
        }
        else {
          unint64_t v132 = v130;
        }
        BOOL v133 = v129 >= v132;
        if (v129 < v132) {
          unint64_t v132 = v129;
        }
        unsigned int v134 = 4 * (v130 < v73);
        if (!v133) {
          unsigned int v134 = 5;
        }
        if (v128 < v132)
        {
          unsigned int v134 = 6;
          unint64_t v132 = v128;
        }
        if (v131 < v132) {
          unsigned int v134 = 7;
        }
        long long v135 = &v74[3 * v134];
        *(_DWORD *)long long v135 = v651;
        v135[1] = v72[482];
        v135[2] = v91;
        if (v91)
        {
LABEL_181:
          unint64_t v92 = (int *)((char *)v91 + *v91);
          unint64_t v93 = (unsigned __int16 *)((char *)v92 - *v92);
          if (*v93 < 7u) {
            goto LABEL_239;
          }
LABEL_237:
          uint64_t v136 = v93[3];
          if (v136)
          {
            int v137 = *(int *)((char *)v92 + v136);
            goto LABEL_240;
          }
LABEL_239:
          int v137 = 0;
LABEL_240:
          HIDWORD(v679[0]) = v137;
          LODWORD(v651) = v63;
          LODWORD(v680) = 1;
          v654 = &v680;
          v655 = &v651;
          unint64_t v138 = v72[482] + 1;
          v72[482] = v138;
          if (!*v72) {
            goto LABEL_264;
          }
          uint64_t v139 = v72 + 2;
          if (*((_DWORD *)v72 + 28) == v63)
          {
            unsigned int v140 = 4;
          }
          else if (*((_DWORD *)v72 + 34) == v63)
          {
            unsigned int v140 = 5;
          }
          else if (*((_DWORD *)v72 + 40) == v63)
          {
            unsigned int v140 = 6;
          }
          else
          {
            if (*((_DWORD *)v72 + 46) != v63)
            {
              unint64_t v145 = v72[21];
              unint64_t v146 = v72[18];
              unint64_t v147 = v72[15];
              unint64_t v148 = v72[24];
              uint64_t v142 = (unsigned int *)sub_2AB884(*v72, 1, v63, 1);
              if (v147 >= v138) {
                unint64_t v149 = v138;
              }
              else {
                unint64_t v149 = v147;
              }
              BOOL v150 = v146 >= v149;
              if (v146 < v149) {
                unint64_t v149 = v146;
              }
              unsigned int v151 = 4 * (v147 < v138);
              if (!v150) {
                unsigned int v151 = 5;
              }
              if (v145 < v149)
              {
                unsigned int v151 = 6;
                unint64_t v149 = v145;
              }
              if (v148 < v149) {
                unsigned int v151 = 7;
              }
              unsigned __int32 v152 = &v139[3 * v151];
              *(_DWORD *)unsigned __int32 v152 = v651;
              v152[1] = v72[482];
              v152[2] = v142;
              if (v142)
              {
LABEL_250:
                uint64_t v143 = (int *)((char *)v142 + *v142);
                unsigned int v144 = (unsigned __int16 *)((char *)v143 - *v143);
                if (*v144 < 5u) {
                  goto LABEL_267;
                }
LABEL_265:
                uint64_t v153 = v144[2];
                if (v153)
                {
                  uint64_t v154 = (char *)v143 + v153 + *(unsigned int *)((char *)v143 + v153);
LABEL_268:
                  unsigned __int32 v155 = &v154[4 * HIDWORD(v63) + 4 + *(unsigned int *)&v154[4 * HIDWORD(v63) + 4]];
                  v678[2] = v155;
                  int v156 = &v155[-*(int *)v155];
                  unsigned int v157 = *(unsigned __int16 *)v156;
                  if (v157 <= 6)
                  {
                    unint64_t v106 = 0;
                    uint64_t v158 = 0;
                    v678[3] = 0;
                  }
                  else
                  {
                    unint64_t v106 = (char *)*((unsigned __int16 *)v156 + 3);
                    if (*((_WORD *)v156 + 3)) {
                      unint64_t v106 = &v106[(void)v155 + *(unsigned int *)&v106[(void)v155]];
                    }
                    v678[3] = v106;
                    if (v157 < 0xB)
                    {
                      uint64_t v158 = 0;
                    }
                    else
                    {
                      uint64_t v158 = *((unsigned __int16 *)v156 + 5);
                      if (v158) {
                        v158 += (uint64_t)&v155[*(unsigned int *)&v155[v158]];
                      }
                    }
                  }
                  uint64_t v108 = 0;
                  *(void *)&v679[0] = v158;
                  p_p = v678;
LABEL_277:
                  uint64_t v159 = &v106[4 * v108];
                  int v160 = *((unsigned __int16 *)v159 + 2);
                  int v161 = *((unsigned __int16 *)v159 + 3);
                  unsigned int v162 = sub_511FC(v63);
                  unsigned int v163 = p_p[5] & ~(-1 << (v162 & 0xFE));
                  int v164 = sub_51938(v163);
                  int v165 = sub_51938(v163 >> 1);
                  unint64_t v166 = (int *)p_p[2];
                  uint64_t v167 = *((unsigned int *)p_p + 13);
                  uint64_t v168 = (unsigned __int16 *)((char *)v166 - *v166);
                  unsigned int v169 = *v168;
                  if (v169 < 0xD)
                  {
                    if (v169 < 0xB) {
                      goto LABEL_285;
                    }
                  }
                  else if (v168[6])
                  {
                    int v170 = *(int *)((char *)&v166[v167 + 1] + v168[6] + *(unsigned int *)((char *)v166 + v168[6]));
                    goto LABEL_288;
                  }
                  if (v168[5])
                  {
                    int v171 = *(unsigned __int16 *)((char *)v166
                                               + 2 * v167
                                               + v168[5]
                                               + *(unsigned int *)((char *)v166 + v168[5])
                                               + 4);
                    if (v171 != 0xFFFF)
                    {
                      uint64_t v172 = v168[4];
                      if (v172) {
                        int v173 = *(int *)((char *)v166 + v172);
                      }
                      else {
                        int v173 = 0;
                      }
                      int v170 = *((_DWORD *)p_p + 11) + v171 + v173;
LABEL_288:
                      int v631 = v170;
                      int v174 = 1 << -(v162 >> 1);
                      if (v162 < 2) {
                        int v174 = -2;
                      }
                      int v628 = v174;
                      LODWORD(v175) = v165 * v174 + 4 * v161;
                      if (v175 >= 0xFFFFFFFE) {
                        uint64_t v175 = 4294967294;
                      }
                      else {
                        uint64_t v175 = v175;
                      }
                      uint64_t v624 = v175;
                      if (v663)
                      {
                        unint64_t v176 = v660;
                        long long __p = v660;
                        v673 = &v661;
                        uint64_t v676 = 0;
                        long long v674 = 0u;
                        long long v675 = 0u;
                        char v677 = 1;
                        unint64_t v177 = *(void *)v661;
                        DWORD2(v675) = v177;
                        LODWORD(v651) = v177;
                        LODWORD(v680) = 1;
                        v654 = &v680;
                        v655 = &v651;
                        unint64_t v178 = v660[482] + 1;
                        v660[482] = v178;
                        if (!*v176) {
                          goto LABEL_329;
                        }
                        uint64_t v179 = v176 + 2;
                        if (*((_DWORD *)v176 + 28) == v177)
                        {
                          unsigned int v180 = 4;
                        }
                        else if (*((_DWORD *)v176 + 34) == v177)
                        {
                          unsigned int v180 = 5;
                        }
                        else if (*((_DWORD *)v176 + 40) == v177)
                        {
                          unsigned int v180 = 6;
                        }
                        else
                        {
                          if (*((_DWORD *)v176 + 46) != v177)
                          {
                            unint64_t v193 = v176[21];
                            unint64_t v194 = v176[18];
                            unint64_t v195 = v176[15];
                            unint64_t v620 = v176[24];
                            long long v187 = (unsigned int *)sub_2AB884(*v176, 1, v177, 1);
                            if (v195 >= v178) {
                              unint64_t v196 = v178;
                            }
                            else {
                              unint64_t v196 = v195;
                            }
                            BOOL v197 = v194 >= v196;
                            if (v194 < v196) {
                              unint64_t v196 = v194;
                            }
                            unsigned int v198 = 4 * (v195 < v178);
                            if (!v197) {
                              unsigned int v198 = 5;
                            }
                            if (v193 < v196)
                            {
                              unsigned int v198 = 6;
                              unint64_t v196 = v193;
                            }
                            if (v620 < v196) {
                              unsigned int v198 = 7;
                            }
                            char v199 = &v179[3 * v198];
                            *(_DWORD *)char v199 = v651;
                            v199[1] = v176[482];
                            v199[2] = v187;
                            if (v187)
                            {
LABEL_311:
                              int v188 = (int *)((char *)v187 + *v187);
                              uint64_t v189 = (unsigned __int16 *)((char *)v188 - *v188);
                              if (*v189 < 7u) {
                                goto LABEL_332;
                              }
LABEL_330:
                              uint64_t v200 = v189[3];
                              if (v200)
                              {
                                int v201 = *(int *)((char *)v188 + v200);
                                goto LABEL_333;
                              }
LABEL_332:
                              int v201 = 0;
LABEL_333:
                              HIDWORD(v675) = v201;
                              LODWORD(v651) = v177;
                              LODWORD(v680) = 1;
                              v654 = &v680;
                              v655 = &v651;
                              unint64_t v202 = v176[482] + 1;
                              v176[482] = v202;
                              if (!*v176) {
                                goto LABEL_357;
                              }
                              unint64_t v203 = v176 + 2;
                              if (*((_DWORD *)v176 + 28) == v177)
                              {
                                unsigned int v204 = 4;
                              }
                              else if (*((_DWORD *)v176 + 34) == v177)
                              {
                                unsigned int v204 = 5;
                              }
                              else if (*((_DWORD *)v176 + 40) == v177)
                              {
                                unsigned int v204 = 6;
                              }
                              else
                              {
                                if (*((_DWORD *)v176 + 46) != v177)
                                {
                                  unint64_t v209 = v176[21];
                                  unint64_t v210 = v176[18];
                                  unint64_t v211 = v176[15];
                                  unint64_t v621 = v176[24];
                                  long long v206 = (unsigned int *)sub_2AB884(*v176, 1, v177, 1);
                                  if (v211 >= v202) {
                                    unint64_t v212 = v202;
                                  }
                                  else {
                                    unint64_t v212 = v211;
                                  }
                                  BOOL v213 = v210 >= v212;
                                  if (v210 < v212) {
                                    unint64_t v212 = v210;
                                  }
                                  unsigned int v214 = 4 * (v211 < v202);
                                  if (!v213) {
                                    unsigned int v214 = 5;
                                  }
                                  if (v209 < v212)
                                  {
                                    unsigned int v214 = 6;
                                    unint64_t v212 = v209;
                                  }
                                  if (v621 < v212) {
                                    unsigned int v214 = 7;
                                  }
                                  uint64_t v215 = &v203[3 * v214];
                                  *(_DWORD *)uint64_t v215 = v651;
                                  v215[1] = v176[482];
                                  v215[2] = v206;
                                  if (v206)
                                  {
LABEL_343:
                                    uint64_t v207 = (int *)((char *)v206 + *v206);
                                    std::string::size_type v208 = (unsigned __int16 *)((char *)v207 - *v207);
                                    if (*v208 < 5u) {
                                      goto LABEL_360;
                                    }
LABEL_358:
                                    uint64_t v216 = v208[2];
                                    if (v216)
                                    {
                                      uint64_t v217 = (char *)v207 + v216 + *(unsigned int *)((char *)v207 + v216);
LABEL_361:
                                      std::string::size_type v218 = &v217[4 * HIDWORD(v177) + 4 + *(unsigned int *)&v217[4 * HIDWORD(v177) + 4]];
                                      *(void *)&long long v674 = v218;
                                      uint64_t v219 = &v218[-*(int *)v218];
                                      unsigned int v220 = *(unsigned __int16 *)v219;
                                      if (v220 <= 6)
                                      {
                                        unint64_t v221 = 0;
                                        uint64_t v222 = 0;
                                        *((void *)&v674 + 1) = 0;
                                      }
                                      else
                                      {
                                        unint64_t v221 = (char *)*((unsigned __int16 *)v219 + 3);
                                        if (*((_WORD *)v219 + 3)) {
                                          unint64_t v221 = &v221[(void)v218 + *(unsigned int *)&v221[(void)v218]];
                                        }
                                        *((void *)&v674 + 1) = v221;
                                        if (v220 < 0xB)
                                        {
                                          uint64_t v222 = 0;
                                        }
                                        else
                                        {
                                          uint64_t v222 = *((unsigned __int16 *)v219 + 5);
                                          if (v222) {
                                            v222 += (uint64_t)&v218[*(unsigned int *)&v218[v222]];
                                          }
                                        }
                                      }
                                      uint64_t v223 = 0;
                                      *(void *)&long long v675 = v222;
                                      long long v224 = &__p;
LABEL_384:
                                      v237 = &v221[4 * v223];
                                      int v238 = *((unsigned __int16 *)v237 + 2);
                                      int v239 = *((unsigned __int16 *)v237 + 3);
                                      unsigned int v240 = sub_511FC(v177);
                                      unsigned int v241 = v224[5] & ~(-1 << (v240 & 0xFE));
                                      int v242 = sub_51938(v241);
                                      int v243 = sub_51938(v241 >> 1);
                                      std::string::size_type v244 = (int *)v224[2];
                                      uint64_t v245 = *((unsigned int *)v224 + 13);
                                      __n128 v246 = (unsigned __int16 *)((char *)v244 - *v244);
                                      unsigned int v247 = *v246;
                                      if (v247 < 0xD)
                                      {
                                        if (v247 < 0xB)
                                        {
LABEL_392:
                                          int v248 = 0x7FFFFFFF;
                                          goto LABEL_395;
                                        }
                                      }
                                      else if (v246[6])
                                      {
                                        int v248 = *(int *)((char *)&v244[v245 + 1]
                                                      + v246[6]
                                                      + *(unsigned int *)((char *)v244 + v246[6]));
LABEL_395:
                                        unint64_t v252 = (char *)operator new(0x18uLL);
                                        unsigned int v253 = (unsigned int *)v252;
                                        int v254 = 1 << -(v240 >> 1);
                                        if (v240 < 2) {
                                          int v254 = -2;
                                        }
                                        LODWORD(v255) = v243 * v254 + 4 * v239;
                                        if (v255 >= 0xFFFFFFFE) {
                                          uint64_t v255 = 4294967294;
                                        }
                                        else {
                                          uint64_t v255 = v255;
                                        }
                                        std::string v256 = (unsigned int *)(v252 + 24);
                                        v659 = v252 + 24;
                                        *(void *)unint64_t v252 = (v164 * v628 + 4 * v160) | (unint64_t)(v624 << 32);
                                        *((_DWORD *)v252 + 2) = v631;
                                        *(void *)(v252 + 12) = (v242 * v254 + 4 * v238) | (unint64_t)(v255 << 32);
                                        *((_DWORD *)v252 + 5) = v248;
                                        v657 = v252;
                                        v658 = (unsigned int *)(v252 + 24);
                                        goto LABEL_790;
                                      }
                                      if (v246[5])
                                      {
                                        int v249 = *(unsigned __int16 *)((char *)v244
                                                                   + 2 * v245
                                                                   + v246[5]
                                                                   + *(unsigned int *)((char *)v244 + v246[5])
                                                                   + 4);
                                        if (v249 != 0xFFFF)
                                        {
                                          uint64_t v250 = v246[4];
                                          if (v250) {
                                            int v251 = *(int *)((char *)v244 + v250);
                                          }
                                          else {
                                            int v251 = 0;
                                          }
                                          int v248 = *((_DWORD *)v224 + 11) + v249 + v251;
                                          goto LABEL_395;
                                        }
                                      }
                                      goto LABEL_392;
                                    }
LABEL_360:
                                    uint64_t v217 = 0;
                                    goto LABEL_361;
                                  }
LABEL_357:
                                  sub_296654((int **)&v654);
                                  uint64_t v207 = 0;
                                  std::string::size_type v208 = (_WORD *)(&loc_1120530 + 1);
                                  if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                                    goto LABEL_360;
                                  }
                                  goto LABEL_358;
                                }
                                unsigned int v204 = 7;
                              }
                              ++v176[483];
                              uint64_t v205 = &v203[3 * v204];
                              v205[1] = v202;
                              long long v206 = (unsigned int *)v205[2];
                              if (v206) {
                                goto LABEL_343;
                              }
                              goto LABEL_357;
                            }
LABEL_329:
                            sub_296654((int **)&v654);
                            int v188 = 0;
                            uint64_t v189 = (_WORD *)(&loc_1120530 + 1);
                            if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
                              goto LABEL_332;
                            }
                            goto LABEL_330;
                          }
                          unsigned int v180 = 7;
                        }
                        ++v176[483];
                        uint64_t v186 = &v179[3 * v180];
                        v186[1] = v178;
                        long long v187 = (unsigned int *)v186[2];
                        if (v187) {
                          goto LABEL_311;
                        }
                        goto LABEL_329;
                      }
                      uint64_t v181 = v660;
                      unint64_t v182 = *((void *)v662 - 1);
                      LODWORD(v651) = v182;
                      LODWORD(v680) = 1;
                      v654 = &v680;
                      v655 = &v651;
                      unint64_t v183 = v660[482] + 1;
                      v660[482] = v183;
                      if (!*v181) {
                        goto LABEL_382;
                      }
                      long long v184 = v181 + 2;
                      if (*((_DWORD *)v181 + 28) == v182)
                      {
                        unsigned int v185 = 4;
                      }
                      else if (*((_DWORD *)v181 + 34) == v182)
                      {
                        unsigned int v185 = 5;
                      }
                      else if (*((_DWORD *)v181 + 40) == v182)
                      {
                        unsigned int v185 = 6;
                      }
                      else
                      {
                        if (*((_DWORD *)v181 + 46) != v182)
                        {
                          unint64_t v225 = v181[21];
                          unint64_t v226 = v181[18];
                          unint64_t v227 = v181[15];
                          unint64_t v228 = v181[24];
                          int v191 = (unsigned int *)sub_2AB884(*v181, 1, v182, 1);
                          if (v227 >= v183) {
                            unint64_t v229 = v183;
                          }
                          else {
                            unint64_t v229 = v227;
                          }
                          BOOL v230 = v226 >= v229;
                          if (v226 < v229) {
                            unint64_t v229 = v226;
                          }
                          unsigned int v231 = 4 * (v227 < v183);
                          if (!v230) {
                            unsigned int v231 = 5;
                          }
                          if (v225 < v229)
                          {
                            unsigned int v231 = 6;
                            unint64_t v229 = v225;
                          }
                          if (v228 < v229) {
                            unsigned int v231 = 7;
                          }
                          long long v232 = &v184[3 * v231];
                          *(_DWORD *)long long v232 = v651;
                          v232[1] = v181[482];
                          v232[2] = v191;
                          if (v191) {
                            goto LABEL_316;
                          }
                          goto LABEL_382;
                        }
                        unsigned int v185 = 7;
                      }
                      ++v181[483];
                      v190 = &v184[3 * v185];
                      v190[1] = v183;
                      int v191 = (unsigned int *)v190[2];
                      if (v191)
                      {
LABEL_316:
                        double v192 = (int *)((char *)v191 + *v191);
LABEL_383:
                        v233 = (unsigned int *)((char *)v192 + *(unsigned __int16 *)((char *)v192 - *v192 + 4));
                        uint64_t v234 = (uint64_t)&v233[HIDWORD(v182)] + *v233;
                        v235 = (int *)(v234 + 4 + *(unsigned int *)(v234 + 4));
                        long long v236 = (unsigned int *)((char *)v235 + *(unsigned __int16 *)((char *)v235 - *v235 + 6));
                        LODWORD(v236) = *(unsigned int *)((char *)v236 + *v236) - 1;
                        v678[0] = v660;
                        v678[1] = &v661;
                        *(_OWORD *)&v678[2] = 0u;
                        v679[0] = 0u;
                        LODWORD(v679[1]) = ((unint64_t)(v662 - (unsigned char *)v661) >> 3) - 1;
                        DWORD1(v679[1]) = v236;
                        BYTE8(v679[1]) = 0;
                        sub_2E1D08((uint64_t)v678);
                        unint64_t v221 = (char *)v678[3];
                        long long v224 = v678;
                        uint64_t v223 = DWORD1(v679[1]);
                        LODWORD(v177) = DWORD2(v679[0]);
                        goto LABEL_384;
                      }
LABEL_382:
                      sub_296654((int **)&v654);
                      double v192 = 0;
                      goto LABEL_383;
                    }
                  }
LABEL_285:
                  int v170 = 0x7FFFFFFF;
                  goto LABEL_288;
                }
LABEL_267:
                uint64_t v154 = 0;
                goto LABEL_268;
              }
LABEL_264:
              sub_296654((int **)&v654);
              uint64_t v143 = 0;
              unsigned int v144 = (_WORD *)(&loc_1120530 + 1);
              if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                goto LABEL_267;
              }
              goto LABEL_265;
            }
            unsigned int v140 = 7;
          }
          ++v72[483];
          uint64_t v141 = &v139[3 * v140];
          v141[1] = v138;
          uint64_t v142 = (unsigned int *)v141[2];
          if (v142) {
            goto LABEL_250;
          }
          goto LABEL_264;
        }
LABEL_236:
        sub_296654((int **)&v654);
        unint64_t v92 = 0;
        unint64_t v93 = (_WORD *)(&loc_1120530 + 1);
        if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
          goto LABEL_239;
        }
        goto LABEL_237;
      }
      unsigned int v75 = 7;
    }
    ++v72[483];
    int v90 = &v74[3 * v75];
    v90[1] = v73;
    uint64_t v91 = (unsigned int *)v90[2];
    if (v91) {
      goto LABEL_181;
    }
    goto LABEL_236;
  }
LABEL_80:
  if (v35[4])
  {
    int v43 = 1;
    double v44 = v42 * (double)*(unsigned int *)((char *)v32 + v35[4]);
    if (v44 < 0.0) {
      goto LABEL_82;
    }
  }
  else
  {
    int v43 = 1;
    double v44 = v42 * (double)0;
    if (v44 < 0.0) {
      goto LABEL_82;
    }
  }
  goto LABEL_87;
}

void sub_C91A84(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_58CC(a1);
}

uint64_t sub_C9212C(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    int v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 2);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v10 = &v15;
    }
    else {
      double v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    double v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 4 * a2;
}

void sub_C9225C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_C9233C(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    int v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 2);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v10 = &v15;
    }
    else {
      double v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    double v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 4 * a2;
}

void sub_C9246C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void sub_C9254C(unsigned char *a1@<X8>)
{
  sub_725D0((uint64_t)v2);
  *a1 = 1;
  bzero(a1 + 8, 0x5B8uLL);
  sub_C93014((uint64_t)(a1 + 8));
}

void sub_C9278C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  sub_726FBC((uint64_t)&a52);
  if (a46 < 0)
  {
    operator delete(__p);
    sub_C927E0(v52);
    _Unwind_Resume(a1);
  }
  sub_C927E0(v52);
  _Unwind_Resume(a1);
}

uint64_t sub_C927E0(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    sub_C9A598(a1 + 8);
    return a1;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 24);
  if (v4 != v3)
  {
    do
    {
      if (*(char *)(v4 - 1) < 0) {
        operator delete(*(void **)(v4 - 24));
      }
      v4 -= 32;
    }
    while (v4 != v3);
    uint64_t v5 = *(void **)(a1 + 24);
  }
  *(void *)(a1 + 32) = v3;
  operator delete(v5);
  return a1;
}

void sub_C92878(unsigned char *a1@<X8>)
{
  sub_725D0((uint64_t)v2);
  *a1 = 1;
  bzero(a1 + 8, 0x5B8uLL);
  sub_C9A0C4((uint64_t)(a1 + 8));
}

void sub_C92A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  sub_7334AC((uint64_t)&a52);
  if (a46 < 0)
  {
    operator delete(__p);
    sub_C927E0(v52);
    _Unwind_Resume(a1);
  }
  sub_C927E0(v52);
  _Unwind_Resume(a1);
}

void sub_C92AA0()
{
  __chkstk_darwin();
  char v1 = v0;
  sub_725D0((uint64_t)v2);
  unsigned char *v1 = 1;
  bzero(v1 + 8, 0x5B8uLL);
  sub_C9A244((uint64_t)(v1 + 8));
}

void sub_C92F40(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_C93014(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = (_OWORD *)(a1 + 24);
  sub_4F29BC(a1 + 24);
  *(_OWORD *)(a1 + 1372) = 0u;
  *(_OWORD *)(a1 + 1356) = 0u;
  *(_WORD *)(a1 + 1352) = 0;
  v2[68] = 0u;
  v2[69] = 0u;
  v2[70] = 0u;
  v2[71] = 0u;
  v2[72] = 0u;
  v2[73] = 0u;
  v2[74] = 0u;
  v2[75] = 0u;
  v2[76] = 0u;
  v2[77] = 0u;
  v2[78] = 0u;
  v2[79] = 0u;
  v2[80] = 0u;
  v2[81] = 0u;
  v2[82] = 0u;
  sub_C93194(a1 + 1136, (uint64_t)v3);
  *(_OWORD *)long long __p = *(_OWORD *)v3;
  uint64_t v6 = v4;
  v3[1] = 0;
  uint64_t v4 = 0;
  v3[0] = 0;
  sub_401FE8(a1 + 1392, (long long *)__p);
}

void sub_C93144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_A3A4((uint64_t)&a9);
  sub_C940D0(v21);
  sub_574530(v20);
  _Unwind_Resume(a1);
}

void sub_C93180(_Unwind_Exception *a1)
{
  sub_574530(v1);
  _Unwind_Resume(a1);
}

void sub_C93194(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "GuidanceModule");
  unint64_t v4 = *(void *)(a2 + 40);
  LOBYTE(v41[0]) = 1;
  unint64_t v5 = *(void *)(a2 + 32);
  if (v5 >= v4)
  {
    unint64_t v6 = sub_C947F8((uint64_t *)(a2 + 24), "Runtime", (char *)v41, (uint64_t *)a1);
  }
  else
  {
    sub_C949C8(a2 + 40, *(void *)(a2 + 32), "Runtime", (char *)v41, (uint64_t *)a1);
    unint64_t v6 = v5 + 48;
    *(void *)(a2 + 32) = v6;
  }
  *(void *)(a2 + 32) = v6;
  LOBYTE(v41[0]) = 1;
  if (v6 >= *(void *)(a2 + 40))
  {
    unint64_t v7 = sub_354C60((uint64_t *)(a2 + 24), "PopulateSubrouteWaypointsEVInfo.Runtime", (char *)v41, (uint64_t *)(a1 + 8));
  }
  else
  {
    sub_354E30(a2 + 40, v6, "PopulateSubrouteWaypointsEVInfo.Runtime", (char *)v41, (uint64_t *)(a1 + 8));
    unint64_t v7 = v6 + 48;
    *(void *)(a2 + 32) = v7;
  }
  *(void *)(a2 + 32) = v7;
  LOBYTE(v41[0]) = 1;
  if (v7 >= *(void *)(a2 + 40))
  {
    unint64_t v8 = sub_C94B34((uint64_t *)(a2 + 24), "StepBuilder.Runtime", (char *)v41, (uint64_t *)(a1 + 16));
  }
  else
  {
    sub_C94D04(a2 + 40, v7, "StepBuilder.Runtime", (char *)v41, (uint64_t *)(a1 + 16));
    unint64_t v8 = v7 + 48;
    *(void *)(a2 + 32) = v8;
  }
  *(void *)(a2 + 32) = v8;
  LOBYTE(v41[0]) = 1;
  if (v8 >= *(void *)(a2 + 40))
  {
    unint64_t v9 = sub_C94E70((uint64_t *)(a2 + 24), "StepNamer.Runtime", (char *)v41, (uint64_t *)(a1 + 24));
  }
  else
  {
    sub_C95040(a2 + 40, v8, "StepNamer.Runtime", (char *)v41, (uint64_t *)(a1 + 24));
    unint64_t v9 = v8 + 48;
    *(void *)(a2 + 32) = v9;
  }
  *(void *)(a2 + 32) = v9;
  LOBYTE(v41[0]) = 1;
  if (v9 >= *(void *)(a2 + 40))
  {
    unint64_t v10 = sub_C951AC((uint64_t *)(a2 + 24), "AddTrafficColors.Runtime", (char *)v41, (uint64_t *)(a1 + 32));
  }
  else
  {
    sub_C9537C(a2 + 40, v9, "AddTrafficColors.Runtime", (char *)v41, (uint64_t *)(a1 + 32));
    unint64_t v10 = v9 + 48;
    *(void *)(a2 + 32) = v10;
  }
  *(void *)(a2 + 32) = v10;
  LOBYTE(v41[0]) = 1;
  if (v10 >= *(void *)(a2 + 40))
  {
    unint64_t v11 = sub_C954E8((uint64_t *)(a2 + 24), "SetOnRouteIncidents.Runtime", (char *)v41, (uint64_t *)(a1 + 40));
  }
  else
  {
    sub_C956B8(a2 + 40, v10, "SetOnRouteIncidents.Runtime", (char *)v41, (uint64_t *)(a1 + 40));
    unint64_t v11 = v10 + 48;
    *(void *)(a2 + 32) = v11;
  }
  *(void *)(a2 + 32) = v11;
  LOBYTE(v41[0]) = 1;
  if (v11 >= *(void *)(a2 + 40))
  {
    unint64_t v12 = sub_C95824((uint64_t *)(a2 + 24), "StepAnalyzer.Runtime", (char *)v41, (uint64_t *)(a1 + 48));
  }
  else
  {
    sub_C959F4(a2 + 40, v11, "StepAnalyzer.Runtime", (char *)v41, (uint64_t *)(a1 + 48));
    unint64_t v12 = v11 + 48;
    *(void *)(a2 + 32) = v12;
  }
  *(void *)(a2 + 32) = v12;
  LOBYTE(v41[0]) = 1;
  if (v12 >= *(void *)(a2 + 40))
  {
    unint64_t v13 = sub_C954E8((uint64_t *)(a2 + 24), "LaneGuidanceBuilder.Runtime", (char *)v41, (uint64_t *)(a1 + 56));
  }
  else
  {
    sub_C956B8(a2 + 40, v12, "LaneGuidanceBuilder.Runtime", (char *)v41, (uint64_t *)(a1 + 56));
    unint64_t v13 = v12 + 48;
    *(void *)(a2 + 32) = v13;
  }
  *(void *)(a2 + 32) = v13;
  LOBYTE(v41[0]) = 1;
  if (v13 >= *(void *)(a2 + 40))
  {
    unint64_t v14 = sub_C95B60((uint64_t *)(a2 + 24), "CongestionZoneCalculator.Runtime", (char *)v41, (uint64_t *)(a1 + 72));
  }
  else
  {
    sub_C95D30(a2 + 40, v13, "CongestionZoneCalculator.Runtime", (char *)v41, (uint64_t *)(a1 + 72));
    unint64_t v14 = v13 + 48;
    *(void *)(a2 + 32) = v14;
  }
  *(void *)(a2 + 32) = v14;
  LOBYTE(v41[0]) = 1;
  if (v14 >= *(void *)(a2 + 40))
  {
    unint64_t v15 = sub_C95E9C((uint64_t *)(a2 + 24), "ArrivalInfoBuilder.Runtime", (char *)v41, (uint64_t *)(a1 + 80));
  }
  else
  {
    sub_C9606C(a2 + 40, v14, "ArrivalInfoBuilder.Runtime", (char *)v41, (uint64_t *)(a1 + 80));
    unint64_t v15 = v14 + 48;
    *(void *)(a2 + 32) = v15;
  }
  *(void *)(a2 + 32) = v15;
  LOBYTE(v41[0]) = 1;
  if (v15 >= *(void *)(a2 + 40))
  {
    unint64_t v16 = sub_354F9C((uint64_t *)(a2 + 24), "ElevationInfoBuilder.Runtime", (char *)v41, (uint64_t *)(a1 + 88));
  }
  else
  {
    sub_35516C(a2 + 40, v15, "ElevationInfoBuilder.Runtime", (char *)v41, (uint64_t *)(a1 + 88));
    unint64_t v16 = v15 + 48;
    *(void *)(a2 + 32) = v16;
  }
  *(void *)(a2 + 32) = v16;
  LOBYTE(v41[0]) = 1;
  if (v16 >= *(void *)(a2 + 40))
  {
    unint64_t v17 = sub_354F9C((uint64_t *)(a2 + 24), "EnrouteNoticeBuilder.Runtime", (char *)v41, (uint64_t *)(a1 + 96));
  }
  else
  {
    sub_35516C(a2 + 40, v16, "EnrouteNoticeBuilder.Runtime", (char *)v41, (uint64_t *)(a1 + 96));
    unint64_t v17 = v16 + 48;
    *(void *)(a2 + 32) = v17;
  }
  *(void *)(a2 + 32) = v17;
  LOBYTE(v41[0]) = 1;
  if (v17 >= *(void *)(a2 + 40))
  {
    unint64_t v18 = sub_C961D8((uint64_t *)(a2 + 24), "RouteLineStyleBuilder.Runtime", (char *)v41, (uint64_t *)(a1 + 104));
  }
  else
  {
    sub_C963A8(a2 + 40, v17, "RouteLineStyleBuilder.Runtime", (char *)v41, (uint64_t *)(a1 + 104));
    unint64_t v18 = v17 + 48;
    *(void *)(a2 + 32) = v18;
  }
  *(void *)(a2 + 32) = v18;
  LOBYTE(v41[0]) = 1;
  if (v18 >= *(void *)(a2 + 40))
  {
    unint64_t v19 = sub_C96514((uint64_t *)(a2 + 24), "RoadDescriptionBuilder.Runtime", (char *)v41, (uint64_t *)(a1 + 112));
  }
  else
  {
    sub_C966E4(a2 + 40, v18, "RoadDescriptionBuilder.Runtime", (char *)v41, (uint64_t *)(a1 + 112));
    unint64_t v19 = v18 + 48;
    *(void *)(a2 + 32) = v19;
  }
  *(void *)(a2 + 32) = v19;
  LOBYTE(v41[0]) = 1;
  if (v19 >= *(void *)(a2 + 40))
  {
    unint64_t v20 = sub_C96850((uint64_t *)(a2 + 24), "AdvisoryBuilder.Runtime", (char *)v41, (uint64_t *)(a1 + 120));
  }
  else
  {
    sub_C96A20(a2 + 40, v19, "AdvisoryBuilder.Runtime", (char *)v41, (uint64_t *)(a1 + 120));
    unint64_t v20 = v19 + 48;
    *(void *)(a2 + 32) = v20;
  }
  *(void *)(a2 + 32) = v20;
  LOBYTE(v41[0]) = 1;
  if (v20 >= *(void *)(a2 + 40))
  {
    unint64_t v21 = sub_C94B34((uint64_t *)(a2 + 24), "RouteTagger.Runtime", (char *)v41, (uint64_t *)(a1 + 128));
  }
  else
  {
    sub_C94D04(a2 + 40, v20, "RouteTagger.Runtime", (char *)v41, (uint64_t *)(a1 + 128));
    unint64_t v21 = v20 + 48;
    *(void *)(a2 + 32) = v21;
  }
  *(void *)(a2 + 32) = v21;
  LOBYTE(v41[0]) = 1;
  if (v21 >= *(void *)(a2 + 40))
  {
    unint64_t v22 = sub_C96B8C((uint64_t *)(a2 + 24), "RouteNamer.Runtime", (char *)v41, (uint64_t *)(a1 + 136));
  }
  else
  {
    sub_C96D5C(a2 + 40, v21, "RouteNamer.Runtime", (char *)v41, (uint64_t *)(a1 + 136));
    unint64_t v22 = v21 + 48;
    *(void *)(a2 + 32) = v22;
  }
  *(void *)(a2 + 32) = v22;
  LOBYTE(v41[0]) = 1;
  if (v22 >= *(void *)(a2 + 40))
  {
    unint64_t v23 = sub_C96514((uint64_t *)(a2 + 24), "SmartGuidancePopulator.Runtime", (char *)v41, (uint64_t *)(a1 + 144));
  }
  else
  {
    sub_C966E4(a2 + 40, v22, "SmartGuidancePopulator.Runtime", (char *)v41, (uint64_t *)(a1 + 144));
    unint64_t v23 = v22 + 48;
    *(void *)(a2 + 32) = v23;
  }
  *(void *)(a2 + 32) = v23;
  LOBYTE(v41[0]) = 1;
  if (v23 >= *(void *)(a2 + 40))
  {
    unint64_t v24 = sub_C96514((uint64_t *)(a2 + 24), "BasicGuidancePopulator.Runtime", (char *)v41, (uint64_t *)(a1 + 152));
  }
  else
  {
    sub_C966E4(a2 + 40, v23, "BasicGuidancePopulator.Runtime", (char *)v41, (uint64_t *)(a1 + 152));
    unint64_t v24 = v23 + 48;
    *(void *)(a2 + 32) = v24;
  }
  *(void *)(a2 + 32) = v24;
  LOBYTE(v41[0]) = 1;
  if (v24 >= *(void *)(a2 + 40))
  {
    unint64_t v25 = sub_C96EC8((uint64_t *)(a2 + 24), "ARInfoBuilder.Runtime", (char *)v41, (uint64_t *)(a1 + 160));
  }
  else
  {
    sub_C97098(a2 + 40, v24, "ARInfoBuilder.Runtime", (char *)v41, (uint64_t *)(a1 + 160));
    unint64_t v25 = v24 + 48;
    *(void *)(a2 + 32) = v25;
  }
  *(void *)(a2 + 32) = v25;
  LOBYTE(v41[0]) = 1;
  if (v25 >= *(void *)(a2 + 40))
  {
    unint64_t v26 = sub_354924((uint64_t *)(a2 + 24), "RouteLineGeometryProcessor.Runtime", (char *)v41, (uint64_t *)(a1 + 168));
  }
  else
  {
    sub_354AF4(a2 + 40, v25, "RouteLineGeometryProcessor.Runtime", (char *)v41, (uint64_t *)(a1 + 168));
    unint64_t v26 = v25 + 48;
    *(void *)(a2 + 32) = v26;
  }
  *(void *)(a2 + 32) = v26;
  LOBYTE(v41[0]) = 4;
  if (v26 >= *(void *)(a2 + 40))
  {
    unint64_t v27 = sub_C97204((uint64_t *)(a2 + 24), "NumTotalWaypointRoutes", (char *)v41, (unsigned int *)(a1 + 192));
  }
  else
  {
    sub_C973D4(a2 + 40, v26, "NumTotalWaypointRoutes", (char *)v41, (unsigned int *)(a1 + 192));
    unint64_t v27 = v26 + 48;
    *(void *)(a2 + 32) = v27;
  }
  *(void *)(a2 + 32) = v27;
  LOBYTE(v41[0]) = 4;
  if (v27 >= *(void *)(a2 + 40))
  {
    unint64_t v28 = sub_C97540((uint64_t *)(a2 + 24), "NumTotalSubroutes", (char *)v41, (unsigned int *)(a1 + 196));
  }
  else
  {
    sub_C97710(a2 + 40, v27, "NumTotalSubroutes", (char *)v41, (unsigned int *)(a1 + 196));
    unint64_t v28 = v27 + 48;
    *(void *)(a2 + 32) = v28;
  }
  *(void *)(a2 + 32) = v28;
  LOBYTE(v41[0]) = 4;
  if (v28 >= *(void *)(a2 + 40))
  {
    unint64_t v29 = sub_C9787C((uint64_t *)(a2 + 24), "NumTotalSteps", (char *)v41, (unsigned int *)(a1 + 200));
  }
  else
  {
    sub_C97A4C(a2 + 40, v28, "NumTotalSteps", (char *)v41, (unsigned int *)(a1 + 200));
    unint64_t v29 = v28 + 48;
    *(void *)(a2 + 32) = v29;
  }
  *(void *)(a2 + 32) = v29;
  LOBYTE(v41[0]) = 4;
  if (v29 >= *(void *)(a2 + 40))
  {
    uint64_t v30 = sub_C97BB8((uint64_t *)(a2 + 24), "NumTotalSegments", (char *)v41, (unsigned int *)(a1 + 204));
  }
  else
  {
    sub_C97D88(a2 + 40, v29, "NumTotalSegments", (char *)v41, (unsigned int *)(a1 + 204));
    uint64_t v30 = v29 + 48;
    *(void *)(a2 + 32) = v29 + 48;
  }
  *(void *)(a2 + 32) = v30;
  sub_C9413C(a1 + 208, (uint64_t)v41);
  sub_C9856C((void **)(a2 + 24), *(void *)(a2 + 32), (std::string *)v43, v44, 0xAAAAAAAAAAAAAAABLL * (((char *)v44 - (unsigned char *)v43) >> 4));
  sub_C943A8((unsigned int *)(a1 + 220), (uint64_t)&v37);
  sub_C9856C((void **)(a2 + 24), *(void *)(a2 + 32), (std::string *)__p, v40, 0xAAAAAAAAAAAAAAABLL * (((char *)v40 - (unsigned char *)__p) >> 4));
  uint64_t v31 = (std::string *)__p;
  if (__p)
  {
    uint64_t v32 = v40;
    uint64_t v33 = __p;
    if (v40 != __p)
    {
      do
      {
        if (SHIBYTE(v32[-2].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v32[-2].__r_.__value_.__l.__data_);
        }
        v32 -= 2;
      }
      while (v32 != v31);
      uint64_t v33 = __p;
    }
    unsigned int v40 = v31;
    operator delete(v33);
  }
  if (v38 < 0) {
    operator delete(v37);
  }
  uint64_t v34 = (std::string *)v43;
  if (v43)
  {
    BOOL v35 = v44;
    unsigned int v36 = v43;
    if (v44 != v43)
    {
      do
      {
        if (SHIBYTE(v35[-2].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v35[-2].__r_.__value_.__l.__data_);
        }
        v35 -= 2;
      }
      while (v35 != v34);
      unsigned int v36 = v43;
    }
    double v44 = v34;
    operator delete(v36);
  }
  if (v42 < 0) {
    operator delete(v41[0]);
  }
}

void sub_C93C18(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93C2C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93C44(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93C58(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93C70(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93C84(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93C9C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93CB0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93CC8(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93CDC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93CF4(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93D08(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93D20(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93D34(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93D4C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93D60(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93D78(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93D8C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93DA4(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93DB8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93DD0(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93DE4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93DFC(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93E10(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93E28(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93E3C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93E54(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93E68(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93E80(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93E94(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93EAC(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93EC0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93ED8(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93EEC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93F04(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93F18(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93F30(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93F44(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93F5C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93F70(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93F88(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93F9C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93FB4(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93FC8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93FE0(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C93FF4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C9400C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C94020(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C94038(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C9404C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C94064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_A3A4((uint64_t)&a9);
  sub_A3A4((uint64_t)&a15);
  sub_A3A4(v15);
  _Unwind_Resume(a1);
}

void sub_C94088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_A3A4((uint64_t)va);
  sub_A3A4(v7);
  _Unwind_Resume(a1);
}

void sub_C940A8(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C940BC(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void **sub_C940D0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 1088);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 1096);
    unint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_3A6B94(v3 - 1120);
      while ((void *)v3 != v2);
      unint64_t v4 = *(void **)(a1 + 1088);
    }
    *(void *)(a1 + 1096) = v2;
    operator delete(v4);
  }

  return sub_4F2BD0((void **)a1);
}

uint64_t sub_C9413C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  uint64_t result = (uint64_t)std::string::assign((std::string *)a2, "TrafficControlGuidance");
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(_DWORD *)a1)
    {
      char v14 = 4;
      unint64_t v5 = *(void *)(a2 + 32);
      if (v5 >= *(void *)(a2 + 40))
      {
        uint64_t result = sub_C97EF4((uint64_t *)(a2 + 24), "TrafficControlGuidance.NumTotalSignals", &v14, (unsigned int *)a1);
        goto LABEL_10;
      }
      sub_C980C4(a2 + 40, *(void *)(a2 + 32), "TrafficControlGuidance.NumTotalSignals", &v14, (unsigned int *)a1);
    }
    else
    {
      char v13 = 4;
      int v12 = 1;
      unint64_t v5 = *(void *)(a2 + 32);
      if (v5 >= *(void *)(a2 + 40))
      {
        uint64_t result = sub_C98230((uint64_t *)(a2 + 24), "TrafficControlGuidance.NoSignalsFound", &v13, &v12);
        goto LABEL_10;
      }
      sub_C98400(a2 + 40, *(void *)(a2 + 32), "TrafficControlGuidance.NoSignalsFound", &v13, &v12);
    }
    uint64_t result = v5 + 48;
    *(void *)(a2 + 32) = v5 + 48;
LABEL_10:
    *(void *)(a2 + 32) = result;
  }
  if (!*(unsigned char *)(a1 + 9)) {
    return result;
  }
  int v7 = *(_DWORD *)(a1 + 4);
  unint64_t v6 = (unsigned int *)(a1 + 4);
  if (v7)
  {
    char v11 = 4;
    unint64_t v8 = *(void *)(a2 + 32);
    if (v8 >= *(void *)(a2 + 40))
    {
      uint64_t result = sub_C97EF4((uint64_t *)(a2 + 24), "TrafficControlGuidance.NumTotalCameras", &v11, v6);
      goto LABEL_20;
    }
    sub_C980C4(a2 + 40, *(void *)(a2 + 32), "TrafficControlGuidance.NumTotalCameras", &v11, v6);
  }
  else
  {
    char v10 = 4;
    int v9 = 1;
    unint64_t v8 = *(void *)(a2 + 32);
    if (v8 >= *(void *)(a2 + 40))
    {
      uint64_t result = sub_C98230((uint64_t *)(a2 + 24), "TrafficControlGuidance.NoCamerasFound", &v10, &v9);
      goto LABEL_20;
    }
    sub_C98400(a2 + 40, *(void *)(a2 + 32), "TrafficControlGuidance.NoCamerasFound", &v10, &v9);
  }
  uint64_t result = v8 + 48;
  *(void *)(a2 + 32) = v8 + 48;
LABEL_20:
  *(void *)(a2 + 32) = result;
  return result;
}

void sub_C94320(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C94334(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C94394(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C943A8(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "Probelines");
  unint64_t v4 = *(void *)(a2 + 40);
  char v21 = 4;
  unint64_t v5 = *(void *)(a2 + 32);
  if (v5 >= v4)
  {
    unint64_t v6 = sub_C98A20((uint64_t *)(a2 + 24), "Probelines.NumTotalSubroutesWithProbeline", &v21, a1);
  }
  else
  {
    sub_C98BF0(a2 + 40, *(void *)(a2 + 32), "Probelines.NumTotalSubroutesWithProbeline", &v21, a1);
    unint64_t v6 = v5 + 48;
    *(void *)(a2 + 32) = v6;
  }
  *(void *)(a2 + 32) = v6;
  char v20 = 4;
  if (v6 >= *(void *)(a2 + 40))
  {
    unint64_t v7 = sub_C98D5C((uint64_t *)(a2 + 24), "Probelines.NumTotalSubroutesWithoutProbeline", &v20, a1 + 1);
    *(void *)(a2 + 32) = v7;
    if (!*a1) {
      return;
    }
  }
  else
  {
    sub_C98F2C(a2 + 40, v6, "Probelines.NumTotalSubroutesWithoutProbeline", &v20, a1 + 1);
    unint64_t v7 = v6 + 48;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 32) = v7;
    if (!*a1) {
      return;
    }
  }
  char v19 = 4;
  if (v7 >= *(void *)(a2 + 40))
  {
    unint64_t v8 = sub_C99098((uint64_t *)(a2 + 24), "Probelines.NumProbelinesUsed", &v19, a1 + 2);
  }
  else
  {
    sub_C99268(a2 + 40, v7, "Probelines.NumProbelinesUsed", &v19, a1 + 2);
    unint64_t v8 = v7 + 48;
    *(void *)(a2 + 32) = v8;
  }
  *(void *)(a2 + 32) = v8;
  char v18 = 4;
  if (v8 >= *(void *)(a2 + 40))
  {
    unint64_t v9 = sub_C993D4((uint64_t *)(a2 + 24), "Probelines.NumCenterlinesUsedInProbelineRegions", &v18, a1 + 3);
  }
  else
  {
    sub_C995A4(a2 + 40, v8, "Probelines.NumCenterlinesUsedInProbelineRegions", &v18, a1 + 3);
    unint64_t v9 = v8 + 48;
    *(void *)(a2 + 32) = v9;
  }
  *(void *)(a2 + 32) = v9;
  char v17 = 4;
  if (v9 >= *(void *)(a2 + 40))
  {
    unint64_t v10 = sub_C99710((uint64_t *)(a2 + 24), "Probelines.NumAcceptableProbelines", &v17, a1 + 4);
  }
  else
  {
    sub_C998E0(a2 + 40, v9, "Probelines.NumAcceptableProbelines", &v17, a1 + 4);
    unint64_t v10 = v9 + 48;
    *(void *)(a2 + 32) = v10;
  }
  *(void *)(a2 + 32) = v10;
  char v16 = 4;
  if (v10 >= *(void *)(a2 + 40))
  {
    unint64_t v11 = sub_C99A4C((uint64_t *)(a2 + 24), "Probelines.NumUnacceptableProbelines", &v16, a1 + 5);
  }
  else
  {
    sub_C99C1C(a2 + 40, v10, "Probelines.NumUnacceptableProbelines", &v16, a1 + 5);
    unint64_t v11 = v10 + 48;
    *(void *)(a2 + 32) = v11;
  }
  *(void *)(a2 + 32) = v11;
  char v15 = 4;
  if (v11 >= *(void *)(a2 + 40))
  {
    unint64_t v12 = sub_C99D88((uint64_t *)(a2 + 24), "Probelines.NumTotalCheckpointsFound", &v15, a1 + 6);
  }
  else
  {
    sub_C99F58(a2 + 40, v11, "Probelines.NumTotalCheckpointsFound", &v15, a1 + 6);
    unint64_t v12 = v11 + 48;
    *(void *)(a2 + 32) = v12;
  }
  *(void *)(a2 + 32) = v12;
  char v14 = 4;
  if (v12 >= *(void *)(a2 + 40))
  {
    uint64_t v13 = sub_C99A4C((uint64_t *)(a2 + 24), "Probelines.NumTotalMissingProbelines", &v14, a1 + 7);
  }
  else
  {
    sub_C99C1C(a2 + 40, v12, "Probelines.NumTotalMissingProbelines", &v14, a1 + 7);
    uint64_t v13 = v12 + 48;
    *(void *)(a2 + 32) = v12 + 48;
  }
  *(void *)(a2 + 32) = v13;
}

void sub_C94710(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C94724(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C947E4(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C947F8(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  char v21 = &v11[48 * v10];
  sub_C949C8(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  char v14 = (char *)*a1;
  char v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    char v18 = (char *)*a1;
    char v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      char v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C949B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C949C8(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C94B20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C94B34(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  char v21 = &v11[48 * v10];
  sub_C94D04(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C94CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C94D04(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C94E5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C94E70(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  char v21 = &v11[48 * v10];
  sub_C95040(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C9502C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C95040(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C95198(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C951AC(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  char v21 = &v11[48 * v10];
  sub_C9537C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C95368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C9537C(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C954D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C954E8(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  char v21 = &v11[48 * v10];
  sub_C956B8(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C956A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C956B8(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C95810(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C95824(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  char v21 = &v11[48 * v10];
  sub_C959F4(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C959E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C959F4(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C95B4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C95B60(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  char v21 = &v11[48 * v10];
  sub_C95D30(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C95D1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C95D30(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C95E88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C95E9C(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  char v21 = &v11[48 * v10];
  sub_C9606C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C96058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C9606C(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C961C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C961D8(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  char v21 = &v11[48 * v10];
  sub_C963A8(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C96394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C963A8(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C96500(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C96514(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  char v21 = &v11[48 * v10];
  sub_C966E4(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C966D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C966E4(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C9683C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C96850(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  char v21 = &v11[48 * v10];
  sub_C96A20(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C96A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C96A20(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C96B78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C96B8C(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  char v21 = &v11[48 * v10];
  sub_C96D5C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C96D48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C96D5C(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C96EB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C96EC8(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  char v21 = &v11[48 * v10];
  sub_C97098(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C97084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C97098(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C971F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C97204(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  char v21 = &v11[48 * v10];
  sub_C973D4(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C973C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C973D4(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C9752C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C97540(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  char v21 = &v11[48 * v10];
  sub_C97710(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C976FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C97710(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C97868(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C9787C(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  char v21 = &v11[48 * v10];
  sub_C97A4C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C97A38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C97A4C(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C97BA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C97BB8(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  char v21 = &v11[48 * v10];
  sub_C97D88(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C97D74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C97D88(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C97EE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C97EF4(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  char v21 = &v11[48 * v10];
  sub_C980C4(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C980B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C980C4(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C9821C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C98230(uint64_t *a1, char *a2, char *a3, int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  char v21 = &v11[48 * v10];
  sub_C98400(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C983EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C98400(int a1, uint64_t a2, char *__s, char *a4, int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C98558(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_C9856C(void **a1, uint64_t a2, std::string *__str, std::string *a4, uint64_t a5)
{
  unint64_t v5 = (char *)*a1;
  uint64_t v6 = (a2 - (uint64_t)*a1) / 48;
  uint64_t v7 = (uint64_t)*a1 + 48 * v6;
  if (a5 < 1) {
    return (char *)v7;
  }
  size_t v9 = __str;
  unint64_t v11 = a1[2];
  unint64_t v12 = (unint64_t)a1[1];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v11[-v12] >> 4)) >= a5)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v7) >> 4)) >= a5)
    {
      unint64_t v18 = &__str[2 * a5];
      unint64_t v25 = (char *)a1[1];
      goto LABEL_42;
    }
    unint64_t v18 = (std::string *)((char *)__str + 16 * ((uint64_t)(v12 - v7) >> 4));
    if (v18 != a4)
    {
      uint64_t v19 = 0;
      do
      {
        unint64_t v23 = v12 + v19 * 24;
        unint64_t v24 = &v18[v19];
        if (SHIBYTE(v18[v19].__r_.__value_.__r.__words[2]) < 0)
        {
          sub_4200((unsigned char *)v23, v24->__r_.__value_.__l.__data_, v24->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v20 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          *(void *)(v23 + 16) = *((void *)&v24->__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v23 = v20;
        }
        unint64_t v21 = v12 + v19 * 24;
        long long v22 = *(_OWORD *)&v18[v19 + 1].__r_.__value_.__l.__data_;
        *(_DWORD *)(v21 + 40) = v18[v19 + 1].__r_.__value_.__r.__words[2];
        *(_OWORD *)(v21 + 24) = v22;
        v19 += 2;
      }
      while (&v18[v19] != a4);
      unint64_t v25 = (char *)(v12 + v19 * 24);
      a1[1] = (void *)(v12 + v19 * 24);
      if ((uint64_t)(v12 - v7) < 1) {
        return (char *)v7;
      }
LABEL_42:
      uint64_t v42 = v7 + 48 * a5;
      int v43 = &v25[-48 * a5];
      double v44 = v25;
      if ((unint64_t)v43 < v12)
      {
        double v44 = v25;
        do
        {
          long long v45 = *(_OWORD *)v43;
          *((void *)v44 + 2) = *((void *)v43 + 2);
          *(_OWORD *)double v44 = v45;
          *((void *)v43 + 1) = 0;
          *((void *)v43 + 2) = 0;
          *(void *)int v43 = 0;
          long long v46 = *(_OWORD *)(v43 + 24);
          *((_DWORD *)v44 + 10) = *((_DWORD *)v43 + 10);
          *(_OWORD *)(v44 + 24) = v46;
          v44 += 48;
          v43 += 48;
        }
        while ((unint64_t)v43 < v12);
      }
      a1[1] = v44;
      if (v25 != (char *)v42)
      {
        uint64_t v47 = 0;
        unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v25[-v42] >> 4);
        unsigned int v49 = &v5[48 * v6 + 48 * v48];
        uint64_t v50 = -48 * v48;
        do
        {
          uint64_t v54 = &v25[v47];
          uint64_t v55 = (void **)&v25[v47 - 48];
          if (v25[v47 - 25] < 0) {
            operator delete(*v55);
          }
          uint64_t v51 = &v49[v47 - 48];
          long long v52 = *(_OWORD *)v51;
          *(void *)&v25[v47 - 32] = *(void *)&v49[v47 - 32];
          *(_OWORD *)uint64_t v55 = v52;
          v49[v47 - 25] = 0;
          *uint64_t v51 = 0;
          long long v53 = *(_OWORD *)&v49[v47 - 24];
          *((_DWORD *)v54 - 2) = *(_DWORD *)&v49[v47 - 8];
          *(_OWORD *)(v54 - 24) = v53;
          v47 -= 48;
        }
        while (v50 != v47);
      }
      if (v18 != v9)
      {
        uint64_t v56 = v7;
        do
        {
          std::string::operator=((std::string *)v56, v9);
          int v57 = v9[1].__r_.__value_.__r.__words[2];
          *(_OWORD *)(v56 + 24) = *(_OWORD *)&v9[1].__r_.__value_.__l.__data_;
          *(_DWORD *)(v56 + 40) = v57;
          v9 += 2;
          v56 += 48;
        }
        while (v9 != v18);
      }
      return (char *)v7;
    }
    unint64_t v25 = (char *)a1[1];
    a1[1] = (void *)v12;
    if ((uint64_t)(v12 - v7) >= 1) {
      goto LABEL_42;
    }
    return (char *)v7;
  }
  unint64_t v13 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - (void)v5) >> 4);
  if (v13 > 0x555555555555555) {
    sub_2E00();
  }
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v5) >> 4);
  if (2 * v14 > v13) {
    unint64_t v13 = 2 * v14;
  }
  if (v14 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v15 = 0x555555555555555;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15)
  {
    if (v15 > 0x555555555555555) {
      sub_188D718();
    }
    long long v16 = (char *)operator new(48 * v15);
  }
  else
  {
    long long v16 = 0;
  }
  unint64_t v26 = &v16[48 * v6];
  unint64_t v59 = v26;
  uint64_t v60 = &v16[48 * v15];
  uint64_t v27 = 48 * a5;
  unint64_t v28 = &v26[v27];
  do
  {
    if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_4200(v26, v9->__r_.__value_.__l.__data_, v9->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v29 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      *((void *)v26 + 2) = *((void *)&v9->__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v26 = v29;
    }
    long long v30 = *(_OWORD *)&v9[1].__r_.__value_.__l.__data_;
    *((_DWORD *)v26 + 10) = v9[1].__r_.__value_.__r.__words[2];
    *(_OWORD *)(v26 + 24) = v30;
    v26 += 48;
    v9 += 2;
    v27 -= 48;
  }
  while (v27);
  uint64_t v31 = v59;
  uint64_t v32 = (char *)*a1;
  uint64_t v33 = v59;
  if (*a1 != (void *)v7)
  {
    uint64_t v34 = v59;
    uint64_t v35 = v7;
    do
    {
      uint64_t v33 = v34 - 48;
      long long v36 = *(_OWORD *)(v35 - 48);
      *((void *)v34 - 4) = *(void *)(v35 - 32);
      *((_OWORD *)v34 - 3) = v36;
      *(void *)(v35 - 40) = 0;
      *(void *)(v35 - 32) = 0;
      *(void *)(v35 - 48) = 0;
      long long v37 = *(_OWORD *)(v35 - 24);
      *((_DWORD *)v34 - 2) = *(_DWORD *)(v35 - 8);
      *(_OWORD *)(v34 - 24) = v37;
      v34 -= 48;
      v35 -= 48;
    }
    while ((char *)v35 != v32);
  }
  char v38 = a1[1];
  if (v38 != (void *)v7)
  {
    do
    {
      long long v39 = *(_OWORD *)v7;
      *((void *)v28 + 2) = *(void *)(v7 + 16);
      *(_OWORD *)unint64_t v28 = v39;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(void *)uint64_t v7 = 0;
      long long v40 = *(_OWORD *)(v7 + 24);
      *((_DWORD *)v28 + 10) = *(_DWORD *)(v7 + 40);
      *(_OWORD *)(v28 + 24) = v40;
      v28 += 48;
      v7 += 48;
    }
    while ((void *)v7 != v38);
    uint64_t v7 = (uint64_t)a1[1];
  }
  uint64_t v41 = *a1;
  *a1 = v33;
  a1[1] = v28;
  a1[2] = v60;
  while ((void *)v7 != v41)
  {
    if (*(char *)(v7 - 25) < 0) {
      operator delete(*(void **)(v7 - 48));
    }
    v7 -= 48;
  }
  if (v41) {
    operator delete(v41);
  }
  return v31;
}

void sub_C98A08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_C98A20(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_C98BF0(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  unint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    unint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      unint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C98BDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C98BF0(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C98D48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C98D5C(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_C98F2C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C98F18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C98F2C(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C99084(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C99098(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_C99268(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C99254(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C99268(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C993C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C993D4(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_C995A4(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C99590(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C995A4(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C996FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C99710(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_C998E0(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C998CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C998E0(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C99A38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C99A4C(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_C99C1C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C99C08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C99C1C(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C99D74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C99D88(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_C99F58(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C99F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C99F58(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C9A0B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_C9A0C4(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = (_OWORD *)(a1 + 24);
  sub_4F29BC(a1 + 24);
  *(_OWORD *)(a1 + 1372) = 0u;
  *(_OWORD *)(a1 + 1356) = 0u;
  *(_WORD *)(a1 + 1352) = 0;
  v2[68] = 0u;
  v2[69] = 0u;
  v2[70] = 0u;
  v2[71] = 0u;
  v2[72] = 0u;
  v2[73] = 0u;
  v2[74] = 0u;
  v2[75] = 0u;
  v2[76] = 0u;
  v2[77] = 0u;
  v2[78] = 0u;
  v2[79] = 0u;
  v2[80] = 0u;
  v2[81] = 0u;
  v2[82] = 0u;
  sub_C93194(a1 + 1136, (uint64_t)v3);
  *(_OWORD *)long long __p = *(_OWORD *)v3;
  uint64_t v6 = v4;
  v3[1] = 0;
  uint64_t v4 = 0;
  v3[0] = 0;
  sub_401FE8(a1 + 1392, (long long *)__p);
}

void sub_C9A1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_A3A4((uint64_t)&a9);
  sub_C940D0(v21);
  sub_574530(v20);
  _Unwind_Resume(a1);
}

void sub_C9A230(_Unwind_Exception *a1)
{
  sub_574530(v1);
  _Unwind_Resume(a1);
}

void sub_C9A244(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = (_OWORD *)(a1 + 24);
  sub_4F29BC(a1 + 24);
  *(_OWORD *)(a1 + 1372) = 0u;
  *(_OWORD *)(a1 + 1356) = 0u;
  *(_WORD *)(a1 + 1352) = 0;
  v2[68] = 0u;
  v2[69] = 0u;
  v2[70] = 0u;
  v2[71] = 0u;
  v2[72] = 0u;
  v2[73] = 0u;
  v2[74] = 0u;
  v2[75] = 0u;
  v2[76] = 0u;
  v2[77] = 0u;
  v2[78] = 0u;
  v2[79] = 0u;
  v2[80] = 0u;
  v2[81] = 0u;
  v2[82] = 0u;
  sub_C93194(a1 + 1136, (uint64_t)v3);
  *(_OWORD *)long long __p = *(_OWORD *)v3;
  uint64_t v6 = v4;
  v3[1] = 0;
  uint64_t v4 = 0;
  v3[0] = 0;
  sub_401FE8(a1 + 1392, (long long *)__p);
}

void sub_C9A374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_A3A4((uint64_t)&a9);
  sub_C940D0(v21);
  sub_574530(v20);
  _Unwind_Resume(a1);
}

void sub_C9A3B0(_Unwind_Exception *a1)
{
  sub_574530(v1);
  _Unwind_Resume(a1);
}

void sub_C9A3C4(void *a1)
{
  unint64_t v1 = ((uint64_t)(a1[1] - *a1) >> 4) + 1;
  if (!(v1 >> 60))
  {
    uint64_t v2 = a1[2] - *a1;
    if (v2 >> 3 > v1) {
      unint64_t v1 = v2 >> 3;
    }
    if ((unint64_t)v2 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v3 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v3 = v1;
    }
    if (v3)
    {
      if (v3 >> 60) {
        sub_188D718();
      }
      operator new(16 * v3);
    }
    operator new();
  }
  sub_2E00();
}

void sub_C9A580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5844C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_C9A598(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 1432);
  if (v2)
  {
    do
    {
      unint64_t v8 = (void **)*v2;
      sub_55198((uint64_t)(v2 + 5));
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v8;
    }
    while (v8);
  }
  unint64_t v3 = *(void **)(a1 + 1416);
  *(void *)(a1 + 1416) = 0;
  if (v3) {
    operator delete(v3);
  }
  if ((*(char *)(a1 + 1415) & 0x80000000) == 0)
  {
    uint64_t v4 = (void **)(a1 + 24);
    unint64_t v5 = *(void **)(a1 + 1112);
    if (!v5) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t v9 = *(void *)(a1 + 1120);
    size_t v10 = v5;
    if ((void *)v9 != v5)
    {
      do
        uint64_t v9 = sub_3A6B94(v9 - 1120);
      while ((void *)v9 != v5);
      size_t v10 = *(void **)(a1 + 1112);
    }
    *(void *)(a1 + 1120) = v5;
    operator delete(v10);
    sub_4F2BD0(v4);
    uint64_t v6 = *(void **)a1;
    if (!*(void *)a1) {
      return a1;
    }
    goto LABEL_16;
  }
  operator delete(*(void **)(a1 + 1392));
  uint64_t v4 = (void **)(a1 + 24);
  unint64_t v5 = *(void **)(a1 + 1112);
  if (v5) {
    goto LABEL_12;
  }
LABEL_6:
  sub_4F2BD0(v4);
  uint64_t v6 = *(void **)a1;
  if (!*(void *)a1) {
    return a1;
  }
LABEL_16:
  uint64_t v11 = *(void *)(a1 + 8);
  char v12 = v6;
  if ((void *)v11 != v6)
  {
    do
      uint64_t v11 = sub_574D4C(v11 - 7560);
    while ((void *)v11 != v6);
    char v12 = *(void **)a1;
  }
  *(void *)(a1 + 8) = v6;
  operator delete(v12);
  return a1;
}

unsigned char *sub_C9A6CC()
{
  byte_25E1257 = 1;
  word_25E1240 = 65;
  byte_25E126F = 1;
  word_25E1258 = 65;
  char v3 = 7;
  strcpy((char *)v2, "UNKNOWN");
  int v4 = 0;
  char v6 = 14;
  strcpy((char *)v5, "ROUTES_THROUGH");
  int v7 = 1;
  char v9 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v10 = 3;
  char v12 = 11;
  strcpy((char *)v11, "ROUTES_FROM");
  int v13 = 2;
  xmmword_25E1300 = 0u;
  *(_OWORD *)&qword_25E1310 = 0u;
  dword_25E1320 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E1300, (uint64_t)v2, (uint64_t)v2);
  sub_3A6EF0((uint64_t)&xmmword_25E1300, (uint64_t)v5, (uint64_t)v5);
  sub_3A6EF0((uint64_t)&xmmword_25E1300, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E1300, (uint64_t)v11, (uint64_t)v11);
  if (v12 < 0)
  {
    operator delete(v11[0]);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v6 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v5[0]);
      if ((v3 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v2[0]);
      goto LABEL_5;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v6 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v3 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_25E1278 = 0;
  qword_25E1280 = 0;
  qword_25E1270 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E1270 = (uint64_t)v0;
  qword_25E1278 = (uint64_t)(v0 + 9);
  qword_25E1280 = (uint64_t)(v0 + 9);
  qword_25E1288 = 0;
  qword_25E1290 = 0;
  qword_25E1298 = 0;
  uint64_t result = operator new(9uLL);
  *(void *)uint64_t result = 0x604020C00010305;
  result[8] = 13;
  qword_25E1288 = (uint64_t)result;
  qword_25E1290 = (uint64_t)(result + 9);
  byte_25E12B7 = 8;
  qword_25E1298 = (uint64_t)(result + 9);
  strcpy(byte_25E12A0, "any_mode");
  byte_25E12CF = 7;
  strcpy((char *)&dword_25E12B8, "cycling");
  byte_25E12E7 = 7;
  strcpy((char *)&dword_25E12D0, "driving");
  byte_25E12FF = 7;
  strcpy((char *)&dword_25E12E8, "walking");
  return result;
}

void sub_C9A988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E1310) {
    sub_20AF318((void **)qword_25E1310);
  }
  long long v37 = (void *)xmmword_25E1300;
  *(void *)&xmmword_25E1300 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_C9AA28(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  strcpy((char *)v12, "HikingTourLookupModule");
  HIBYTE(v12[2]) = 22;
  long long __p = 0;
  int v10 = 0;
  uint64_t v11 = 0;
  sub_374CDC(a2, (uint64_t)v12, (uint64_t *)&__p);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = a2;
  sub_C9AB40((uint64_t)v13, a1, a3);
  char v6 = (void **)__p;
  if (__p)
  {
    int v7 = v10;
    unint64_t v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      unint64_t v8 = __p;
    }
    int v10 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
}

void sub_C9AB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_C9AB40(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_725D0((uint64_t)v19);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  char v6 = (double *)(a1 + 16);
  if (sub_65BD8())
  {
    uint64_t v18 = 0;
    *(_OWORD *)long long __p = 0u;
    long long v17 = 0u;
    sub_C9BA94((char **)__p, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 1592) - *(void *)(a2 + 1584)) >> 7));
    int v7 = *(_DWORD **)(a2 + 1584);
    unint64_t v8 = *(_DWORD **)(a2 + 1592);
    if (v7 != v8)
    {
      char v9 = (char *)__p[1];
      do
      {
        sub_C9B100(a1, v7, v20);
        char v9 = sub_C9BC2C((char **)__p, v9, v20) + 1064;
        sub_3AFFFC((uint64_t)&v20[0].n128_i64[1]);
        v7 += 96;
      }
      while (v7 != v8);
    }
    if (sub_C9C1A4(a2, __p))
    {
      double *v6 = sub_72688((uint64_t)v19);
      *(unsigned char *)a3 = 1;
      *(_OWORD *)(a3 + 8) = *(_OWORD *)__p;
      *(void *)(a3 + 24) = v17;
      *(_OWORD *)(a3 + 32) = *(_OWORD *)v6;
    }
    else
    {
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v20);
        sub_188FC78(v20, (uint64_t)"Inconsistent output computed whilst processing hiking tour lookup module; failing solution.",
          91);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v14, 3u);
        if (v15 < 0) {
          operator delete(v14);
        }
        if (v22 < 0) {
          operator delete(v21);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      *(unsigned char *)a3 = 0;
      v20[0].n128_u64[0] = 3;
      v20[0].n128_u64[1] = (unint64_t)&off_2439090;
      sub_3E7814((__n128 *)(a3 + 8), v20);
      int v10 = (char *)__p[0];
      if (__p[0])
      {
        uint64_t v11 = (char *)__p[1];
        char v12 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            int v13 = v11 - 1064;
            sub_3AFFFC((uint64_t)(v11 - 1056));
            uint64_t v11 = v13;
          }
          while (v13 != v10);
          char v12 = __p[0];
        }
        __p[1] = v10;
        operator delete(v12);
      }
    }
  }
  else
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v20);
      sub_188FC78(v20, (uint64_t)"Inconsistent input provided to hiking tour lookup module; failing module.", 73);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      if (SBYTE7(v17) < 0) {
        operator delete(__p[0]);
      }
      if (v22 < 0) {
        operator delete(v21);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(unsigned char *)a3 = 0;
    v20[0].n128_u64[0] = 1;
    v20[0].n128_u64[1] = (unint64_t)&off_2439090;
    sub_3E7814((__n128 *)(a3 + 8), v20);
  }
}

void sub_C9AF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a24);
    sub_C9B098(&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a24);
  sub_C9B098(&a16);
  _Unwind_Resume(a1);
}

void sub_C9AFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_C9B098((void **)va);
  _Unwind_Resume(a1);
}

void sub_C9AFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_C9B098((void **)va);
  _Unwind_Resume(a1);
}

void sub_C9AFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a18 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a24);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_C9B03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_C9B098((void **)va);
  _Unwind_Resume(a1);
}

void sub_C9B050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_C9B098((void **)va);
  _Unwind_Resume(a1);
}

void sub_C9B068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_3AFFFC(v5);
  sub_C9B098((void **)va);
  _Unwind_Resume(a1);
}

void sub_C9B084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_C9B098((void **)va);
  _Unwind_Resume(a1);
}

void **sub_C9B098(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    char v3 = (char *)a1[1];
    int v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 1064;
        sub_3AFFFC((uint64_t)(v3 - 1056));
        char v3 = v5;
      }
      while (v5 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_C9B100(uint64_t a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  if (a2[94] != 4)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v14);
      sub_188FC78(&v14, (uint64_t)"Unknown type of place request parameters provided; skipping solution in hiking tour lookup module.",
        98);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      if (v17 < 0) {
        operator delete(v16);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    goto LABEL_20;
  }
  if (a2[2]) {
    BOOL v5 = a2[3] == -1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    char v7 = sub_65BD8();
    if (v7)
    {
      sub_C9B7FC(a1, (uint64_t)a2, &v14);
      if (sub_C9C18C((uint64_t)&v14))
      {
        *a3 = v14;
        sub_7A3ACC((uint64_t)(a3 + 2), (uint64_t)v15);
      }
      else
      {
        if (sub_723EC(3u))
        {
          sub_6BAC((uint64_t)__p);
          sub_188FC78(__p, (uint64_t)"Inconsistent solution computed whilst processing hiking tour lookup module; failing solution.",
            93);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&v8, 3u);
          if (v9 < 0) {
            operator delete(v8);
          }
          if (v13 < 0) {
            operator delete(v12);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        sub_C9C424(3, (uint64_t)a3);
      }
      sub_3AFFFC((uint64_t)v15);
      return;
    }
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v14);
      sub_188FC78(&v14, (uint64_t)"Inconsistent hiking tour lookup parameters provided to hiking tour lookup module; failing solution.",
        99);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      if (v17 < 0) {
        operator delete(v16);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
LABEL_20:
    sub_C9C424(1, (uint64_t)a3);
    return;
  }
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v14);
    sub_188FC78(&v14, (uint64_t)"Provided place request parameters are not valid; skipping solution in hiking tour lookup module.",
      96);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 2u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v16);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  sub_C9C424(16, (uint64_t)a3);
}

void sub_C9B6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_3AFFFC((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_C9B724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
}

void sub_C9B73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a48);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void sub_C9B7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
}

uint64_t sub_C9B7FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  int v10 = 0;
  memset(v11, 0, sizeof(v11));
  int v12 = -1;
  int v13 = -1;
  v14[0] = 0;
  *(void *)((char *)v14 + 6) = 0;
  *(_OWORD *)&v17[1] = 0u;
  int v15 = 0x7FFFFFFF;
  int v16 = 0x7FFFFFFF;
  *(void *)char v17 = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)&long long v6 = 0x8000000080000000;
  *(void *)&v17[5] = 0x8000000080000000;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  char v21 = 0;
  unint64_t v22 = 0x8000000080000000;
  int v23 = 0x7FFFFFFF;
  int v24 = -1;
  uint64_t v25 = 0;
  uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
  int v27 = -1;
  *(void *)((char *)v28 + 6) = 0;
  v28[0] = 0;
  int v29 = 0x7FFFFFFF;
  *(_OWORD *)&v31[1] = 0u;
  int v30 = 0x7FFFFFFF;
  *(void *)uint64_t v31 = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)&v31[5] = 0x8000000080000000;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  char v35 = 0;
  int v36 = 0x7FFFFFFF;
  unint64_t v37 = 0x8000000080000000;
  int v38 = -1;
  uint64_t v39 = 0;
  uint64_t v40 = 0x7FFFFFFFFFFFFFFFLL;
  int v41 = 0x7FFFFFFF;
  uint64_t v42 = 0x7FFFFFFF7FFFFFFFLL;
  long long v43 = 0u;
  uint64_t v44 = 0;
  unint64_t v45 = 0x8000000080000000;
  int v46 = 0x7FFFFFFF;
  uint64_t v47 = 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v48 = 0x8000000080000000;
  int v49 = 0x7FFFFFFF;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  *((void *)&v6 + 1) = 0x8000000080000000;
  long long v65 = v6;
  long long v66 = v6;
  long long v67 = 0u;
  uint64_t v68 = 0;
  char v69 = 1;
  int v70 = 0;
  char v71 = 1;
  *(_DWORD *)((char *)v72 + 3) = 0;
  v72[0] = 0;
  long long v85 = 0u;
  long long v84 = 0u;
  long long v83 = 0u;
  long long v82 = 0u;
  long long v81 = 0u;
  long long v80 = 0u;
  long long v79 = 0u;
  long long v78 = 0u;
  long long v77 = 0u;
  long long v76 = 0u;
  long long v75 = 0u;
  long long v74 = 0u;
  long long v73 = 0u;
  uint64_t v86 = 0;
  sub_725D0((uint64_t)v8);
  sub_1065770(*(uint64_t **)(a1 + 8), *(void *)(a2 + 8), v9);
  sub_8E5980((uint64_t)v11, (uint64_t)v9);
  sub_3AFFFC((uint64_t)v9);
  *(double *)(a1 + 24) = sub_72688((uint64_t)v8) + *(double *)(a1 + 24);
  if (sub_470B5C(v11))
  {
    *a3 = v10;
    sub_463750((uint64_t)(a3 + 2), (uint64_t)v11);
  }
  else
  {
    sub_C9C424(16, (uint64_t)a3);
  }
  return sub_3AFFFC((uint64_t)v11);
}

void sub_C9BA6C(_Unwind_Exception *a1)
{
  sub_3AFFFC(v1);
  _Unwind_Resume(a1);
}

void sub_C9BA80(_Unwind_Exception *a1)
{
  sub_3AFFFC(v1);
  _Unwind_Resume(a1);
}

void sub_C9BA94(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0x133F84CFE133F84DLL * ((a1[2] - *a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x3D980F6603D981) {
    sub_2E00();
  }
  int v4 = a1[1];
  uint64_t v5 = 1064 * a2;
  long long v6 = (char *)operator new(1064 * a2);
  char v7 = &v6[v5];
  unint64_t v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_10;
  }
  char v9 = &v6[v4 - v2];
  do
  {
    uint64_t v10 = (uint64_t)(v9 - 1056);
    v9 -= 1064;
    *(_DWORD *)char v9 = *((_DWORD *)v4 - 266);
    sub_463750(v10, (uint64_t)(v4 - 1056));
    v4 -= 1064;
  }
  while (v4 != v2);
  char v11 = *a1;
  uint64_t v2 = a1[1];
  *a1 = v9;
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v11)
  {
    do
    {
      sub_3AFFFC((uint64_t)(v2 - 1056));
      v2 -= 1064;
    }
    while (v2 != v11);
    uint64_t v2 = v11;
  }
  if (v2)
  {
LABEL_10:
    operator delete(v2);
  }
}

uint64_t sub_C9BBD4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 1064;
    sub_3AFFFC(i - 1056);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_C9BC2C(char **a1, char *a2, _DWORD *a3)
{
  int v4 = a2;
  long long v6 = *a1;
  unint64_t v7 = (unint64_t)a1[1];
  uint64_t v8 = 0x133F84CFE133F84DLL * ((a2 - *a1) >> 3);
  unint64_t v9 = (unint64_t)a1[2];
  if (v7 >= v9)
  {
    unint64_t v14 = 0x133F84CFE133F84DLL * ((uint64_t)(v7 - (void)v6) >> 3) + 1;
    if (v14 > 0x3D980F6603D980) {
      sub_2E00();
    }
    unint64_t v15 = 0x133F84CFE133F84DLL * ((uint64_t)(v9 - (void)v6) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x1ECC07B301ECC0) {
      unint64_t v16 = 0x3D980F6603D980;
    }
    else {
      unint64_t v16 = v14;
    }
    long long v34 = a1 + 2;
    if (v16)
    {
      if (v16 > 0x3D980F6603D980) {
        sub_188D718();
      }
      char v17 = (char *)operator new(1064 * v16);
    }
    else
    {
      char v17 = 0;
    }
    int v30 = v17;
    uint64_t v31 = &v17[1064 * v8];
    long long v32 = v31;
    long long v33 = &v17[1064 * v16];
    sub_C9BF54(&v30, a3);
    long long v18 = v31;
    long long v19 = *a1;
    long long v20 = v31;
    if (*a1 != v4)
    {
      char v21 = v4;
      unint64_t v22 = v31;
      do
      {
        long long v20 = v22 - 1064;
        int v23 = v21 - 1064;
        *((_DWORD *)v22 - 266) = *((_DWORD *)v21 - 266);
        sub_463750((uint64_t)(v22 - 1056), (uint64_t)(v21 - 1056));
        char v21 = v23;
        unint64_t v22 = v20;
      }
      while (v23 != v19);
    }
    uint64_t v31 = v20;
    int v24 = a1[1];
    uint64_t v25 = v32;
    if (v24 != v4)
    {
      do
      {
        *(_DWORD *)uint64_t v25 = *(_DWORD *)v4;
        sub_463750((uint64_t)(v25 + 8), (uint64_t)(v4 + 8));
        v4 += 1064;
        v25 += 1064;
      }
      while (v4 != v24);
      long long v20 = v31;
      int v4 = a1[1];
    }
    uint64_t v26 = *a1;
    *a1 = v20;
    a1[1] = v25;
    int v27 = a1[2];
    a1[2] = v33;
    long long v32 = v4;
    long long v33 = v27;
    int v30 = v26;
    uint64_t v31 = v26;
    if (v4 != v26)
    {
      do
      {
        long long v32 = v4 - 1064;
        sub_3AFFFC((uint64_t)(v4 - 1056));
        int v4 = v32;
      }
      while (v32 != v26);
      int v4 = v30;
    }
    if (v4) {
      operator delete(v4);
    }
    return v18;
  }
  else
  {
    if (a2 != (char *)v7)
    {
      uint64_t v10 = a2 + 1064;
      char v11 = (_DWORD *)(v7 - 1064);
      if (v7 < 0x428)
      {
        a1[1] = (char *)v7;
        if ((_DWORD *)v7 == v10)
        {
LABEL_34:
          *(_DWORD *)int v4 = *a3;
          sub_8E5980((uint64_t)&v6[1064 * v8 + 8], (uint64_t)(a3 + 2));
          return v4;
        }
      }
      else
      {
        int v12 = (_DWORD *)(v7 - 1064);
        int v13 = a1[1];
        do
        {
          *(_DWORD *)int v13 = *v12;
          sub_463750((uint64_t)(v13 + 8), (uint64_t)(v12 + 2));
          v12 += 266;
          v13 += 1064;
        }
        while ((unint64_t)v12 < v7);
        a1[1] = v13;
        if ((_DWORD *)v7 == v10) {
          goto LABEL_34;
        }
      }
      uint64_t v28 = 8 * ((uint64_t)(v7 - (void)v10) >> 3);
      do
      {
        _DWORD *v11 = *(_DWORD *)&v4[v28 - 1064];
        sub_8E5980((uint64_t)(v11 + 2), (uint64_t)&v4[v28 - 1056]);
        v11 -= 266;
        v28 -= 1064;
      }
      while (v28);
      goto LABEL_34;
    }
    *(_DWORD *)a2 = *a3;
    sub_463750((uint64_t)&v6[1064 * v8 + 8], (uint64_t)(a3 + 2));
    a1[1] = v4 + 1064;
  }
  return v4;
}

void sub_C9BF40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_C9BBD4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C9BF54(char **a1, _DWORD *a2)
{
  int v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_22;
  }
  uint64_t v5 = *a1;
  long long v6 = a1[1];
  if (v6 <= *a1)
  {
    unint64_t v12 = 0x267F099FC267F09ALL * ((v4 - v5) >> 3);
    if (v4 == v5) {
      unint64_t v12 = 1;
    }
    if (v12 >= 0x3D980F6603D981) {
      sub_188D718();
    }
    unint64_t v13 = v12 >> 2;
    uint64_t v14 = 1064 * v12;
    unint64_t v15 = (char *)operator new(1064 * v12);
    unint64_t v16 = v15;
    char v17 = &v15[1064 * v13];
    long long v18 = &v15[v14];
    if (v4 == v6)
    {
      *a1 = v15;
      a1[1] = v17;
      a1[2] = v17;
      a1[3] = v18;
      if (!v5) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v19 = (v4 - v6) / 1064;
      long long v20 = &v17[1064 * v19];
      uint64_t v21 = 1064 * v19;
      uint64_t v22 = (uint64_t)&v15[1064 * v13 + 8];
      uint64_t v23 = (uint64_t)(v6 + 8);
      do
      {
        *(_DWORD *)(v22 - 8) = *(_DWORD *)(v23 - 8);
        sub_463750(v22, v23);
        uint64_t v22 = v24 + 1064;
        v23 += 1064;
        v21 -= 1064;
      }
      while (v21);
      uint64_t v5 = *a1;
      uint64_t v25 = a1[1];
      uint64_t v26 = a1[2];
      *a1 = v16;
      a1[1] = v17;
      a1[2] = v20;
      a1[3] = v18;
      if (v26 != v25)
      {
        do
        {
          int v27 = v26 - 1064;
          sub_3AFFFC((uint64_t)(v26 - 1056));
          uint64_t v26 = v27;
        }
        while (v27 != v25);
      }
      if (!v5) {
        goto LABEL_19;
      }
    }
    operator delete(v5);
LABEL_19:
    int v4 = a1[2];
    goto LABEL_22;
  }
  uint64_t v7 = 0x133F84CFE133F84DLL * ((v6 - *a1) >> 3);
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -v9;
  if (v6 == v4)
  {
    char v11 = &v6[-1064 * v9];
  }
  else
  {
    do
    {
      *(_DWORD *)&v6[1064 * v10] = *(_DWORD *)v6;
      sub_8E5980((uint64_t)&v6[1064 * v10 + 8], (uint64_t)(v6 + 8));
      v6 += 1064;
    }
    while (v6 != v4);
    int v4 = a1[1];
    char v11 = &v6[1064 * v10];
  }
  a1[1] = &v4[1064 * v10];
  a1[2] = v11;
  int v4 = v11;
LABEL_22:
  *(_DWORD *)int v4 = *a2;
  sub_463750((uint64_t)(v4 + 8), (uint64_t)(a2 + 2));
  a1[2] += 1064;
}

void sub_C9C164()
{
  unk_25E133F = 16641;
  word_25E1328 = 65;
  byte_25E1357 = 1;
  byte_25E1341 = 0;
}

BOOL sub_C9C18C(uint64_t a1)
{
  return *(_DWORD *)a1 || sub_470C10((uint64_t *)(a1 + 8));
}

BOOL sub_C9C1A4(uint64_t a1, void *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 1592) - *(void *)(a1 + 1584)) >> 7);
  uint64_t v3 = 0x133F84CFE133F84DLL * ((uint64_t)(a2[1] - *a2) >> 3);
  if (v2 != v3 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v8);
    sub_188FC78(v8, (uint64_t)"The hiking tour lookup module output has a different number of solutions than there are place request parameters in the hiking tour lookup module request: ", 155);
    int v4 = (void *)std::ostream::operator<<();
    sub_188FC78(v4, (uint64_t)" != ", 4);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v7 < 0) {
      operator delete(__p);
    }
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v2 == v3;
}

void sub_C9C3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_C9C3FC()
{
  unk_25E136F = 16641;
  word_25E1358 = 65;
  byte_25E1387 = 1;
  byte_25E1371 = 0;
}

double sub_C9C424@<D0>(int a1@<W0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(a2 + 104) = 0u;
  uint64_t v3 = (void *)(a2 + 332);
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_DWORD *)(a2 + 128) = -1;
  *(_DWORD *)(a2 + 136) = -1;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 150) = 0;
  *(_DWORD *)(a2 + 160) = 0x7FFFFFFF;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_DWORD *)(a2 + 168) = 0x7FFFFFFF;
  *(void *)(a2 + 172) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)&long long v4 = 0x8000000080000000;
  *(void *)(a2 + 192) = 0x8000000080000000;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(unsigned char *)(a2 + 248) = 0;
  *(void *)(a2 + 252) = 0x8000000080000000;
  *(_DWORD *)(a2 + 260) = 0x7FFFFFFF;
  *(_DWORD *)(a2 + 272) = -1;
  *(void *)(a2 + 280) = 0;
  *(void *)(a2 + 288) = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v5 = a2 + 296;
  *(_DWORD *)(a2 + 296) = -1;
  *(void *)(a2 + 304) = 0;
  *(_DWORD *)(a2 + 320) = 0x7FFFFFFF;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_DWORD *)(a2 + 328) = 0x7FFFFFFF;
  *(void *)(a2 + 352) = 0x8000000080000000;
  *(unsigned char *)(a2 + 408) = 0;
  *(_DWORD *)(a2 + 412) = 0x7FFFFFFF;
  *(void *)(a2 + 416) = 0x8000000080000000;
  *(_DWORD *)(a2 + 432) = -1;
  *(void *)(a2 + 440) = 0;
  *(void *)(a2 + 448) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a2 + 456) = 0x7FFFFFFF;
  *(void *)(a2 + 488) = 0;
  *(void *)(a2 + 496) = 0x8000000080000000;
  *(_DWORD *)(a2 + 504) = 0x7FFFFFFF;
  *(void *)(a2 + 512) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a2 + 520) = 0x8000000080000000;
  *(_DWORD *)(a2 + 528) = 0x7FFFFFFF;
  long long v6 = (_OWORD *)(a2 + 776);
  char v7 = (_OWORD *)(a2 + 792);
  *(void *)(a2 + 824) = 0;
  *(unsigned char *)(a2 + 832) = 1;
  uint64_t v8 = (_DWORD *)(a2 + 833);
  *(unsigned char *)(a2 + 837) = 1;
  *(void *)(a2 + 1056) = 0;
  *(_DWORD *)a2 = a1;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v9 = a2 + 8;
  *(void *)(v5 + 14) = 0;
  void *v3 = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)(v9 + 352) = 0u;
  *(_OWORD *)(v9 + 368) = 0u;
  *(_OWORD *)(v9 + 384) = 0u;
  v3[16] = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)(v9 + 464) = 0u;
  *(_OWORD *)(v9 + 528) = 0u;
  *(_OWORD *)(v9 + 544) = 0u;
  *(_OWORD *)(v9 + 560) = 0u;
  *(_OWORD *)(v9 + 576) = 0u;
  *(_OWORD *)(v9 + 592) = 0u;
  *(_OWORD *)(v9 + 608) = 0u;
  *(_OWORD *)(v9 + 624) = 0u;
  *(_OWORD *)(v9 + 640) = 0u;
  *(_OWORD *)(v9 + 656) = 0u;
  *(_OWORD *)(v9 + 672) = 0u;
  *(_OWORD *)(v9 + 688) = 0u;
  *(_OWORD *)(v9 + 704) = 0u;
  *(_OWORD *)(v9 + 720) = 0u;
  *(_OWORD *)(v9 + 736) = 0u;
  *(_OWORD *)(v9 + 752) = 0u;
  *((void *)&v4 + 1) = 0x8000000080000000;
  _OWORD *v6 = v4;
  _OWORD *v7 = v4;
  *(_OWORD *)(v9 + 800) = 0u;
  _DWORD *v8 = 0;
  *(_DWORD *)(v9 + 833) = 0;
  *(_DWORD *)(v9 + 830) = 0;
  *(_OWORD *)(v9 + 1032) = 0u;
  *(_OWORD *)(v9 + 1016) = 0u;
  *(_OWORD *)(v9 + 1000) = 0u;
  *(_OWORD *)(v9 + 984) = 0u;
  *(_OWORD *)(v9 + 968) = 0u;
  *(_OWORD *)(v9 + 952) = 0u;
  *(_OWORD *)(v9 + 936) = 0u;
  *(_OWORD *)(v9 + 920) = 0u;
  *(_OWORD *)(v9 + 904) = 0u;
  *(_OWORD *)(v9 + 888) = 0u;
  *(_OWORD *)(v9 + 872) = 0u;
  *(_OWORD *)(v9 + 856) = 0u;
  *(_OWORD *)(v9 + 840) = 0u;
  return result;
}

uint64_t sub_C9C5A4@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "HikingTourLookupModule");
  unint64_t v4 = *(void *)(a2 + 40);
  char v9 = 1;
  unint64_t v5 = *(void *)(a2 + 32);
  if (v5 >= v4)
  {
    unint64_t v6 = sub_C55C14((uint64_t *)(a2 + 24), "Runtime", &v9, a1);
  }
  else
  {
    sub_C55DE4(a2 + 40, *(void *)(a2 + 32), "Runtime", &v9, a1);
    unint64_t v6 = v5 + 48;
    *(void *)(a2 + 32) = v6;
  }
  *(void *)(a2 + 32) = v6;
  char v8 = 1;
  if (v6 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_C9C714((uint64_t *)(a2 + 24), "Runtime.HikingTourLookup", &v8, a1 + 1);
  }
  else
  {
    sub_C9C8E4(a2 + 40, v6, "Runtime.HikingTourLookup", &v8, a1 + 1);
    uint64_t result = v6 + 48;
    *(void *)(a2 + 32) = v6 + 48;
  }
  *(void *)(a2 + 32) = result;
  return result;
}

void sub_C9C6BC(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C9C6D0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C9C700(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C9C714(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    char v11 = (char *)operator new(48 * v10);
  }
  else
  {
    char v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_C9C8E4(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    long long v18 = (char *)*a1;
    unint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      unint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C9C8D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C9C8E4(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C9CA44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_C9CA58()
{
  unk_25E139F = 16641;
  word_25E1388 = 65;
  byte_25E13B7 = 1;
  byte_25E13A1 = 0;
}

void sub_C9CA80(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v69);
  *(unsigned char *)a2 = 1;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v4 = a2 + 8;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 66) = 0u;
  *(_WORD *)(a2 + 82) = 1;
  *(unsigned char *)(a2 + 88) = 0;
  uint64_t v5 = sub_DA519C((uint64_t)v72, *(void *)(a1 + 16));
  char v71 = *(unsigned char *)(a1 + 40);
  if (v71) {
    uint64_t v70 = *(void *)(a1 + 32);
  }
  sub_DA541C(v5, a1, &v70, (uint64_t *)v63);
  unint64_t v6 = *(void **)v4;
  if (*(void *)v4)
  {
    uint64_t v7 = *(void *)(a2 + 16);
    char v8 = *(void **)v4;
    if ((void *)v7 != v6)
    {
      do
        uint64_t v7 = sub_402C7C(v7 - 376);
      while ((void *)v7 != v6);
      char v8 = *(void **)v4;
    }
    *(void *)(a2 + 16) = v6;
    operator delete(v8);
    *(void *)uint64_t v4 = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
  }
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v63;
  *(void *)(a2 + 24) = *(void *)&v63[16];
  if (v71) {
    char v71 = 0;
  }
  if (!sub_DA69D8((uint64_t)v72, (uint64_t *)(a2 + 8)))
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v63);
      sub_188FC78(v63, (uint64_t)"InputPointTransformerModule::run failed", 39);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      if (SBYTE7(v60) < 0) {
        operator delete(__p[0]);
      }
      if (v68 < 0) {
        operator delete(v67);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    v57.n128_u64[0] = 1;
    v57.n128_u64[1] = (unint64_t)&off_2439090;
    sub_3E7814((__n128 *)__p, &v57);
    v63[0] = 0;
    *(_OWORD *)&v63[8] = *(_OWORD *)__p;
    *(_OWORD *)long long v64 = v60;
    uint64_t v65 = v61;
    long long v60 = 0uLL;
    uint64_t v61 = 0;
    LODWORD(v66) = v62;
    sub_C9D2A4(a2, (uint64_t)v63);
    if (v63[0])
    {
      uint64_t v31 = *(void *)&v63[8];
      if (*(void *)&v63[8])
      {
        uint64_t v32 = *(void *)&v63[16];
        long long v33 = *(void **)&v63[8];
        if (*(void *)&v63[16] != *(void *)&v63[8])
        {
          do
          {
            v32 -= 376;
            sub_402C7C(v32);
          }
          while (v32 != v31);
          long long v33 = *(void **)&v63[8];
        }
        *(void *)&v63[16] = v31;
LABEL_87:
        operator delete(v33);
      }
    }
    else
    {
      long long v34 = (void **)v64[0];
      if (v64[0])
      {
        char v35 = (void **)v64[1];
        long long v33 = v64[0];
        if (v64[1] != v64[0])
        {
          do
          {
            if (*((char *)v35 - 1) < 0) {
              operator delete(*(v35 - 3));
            }
            v35 -= 4;
          }
          while (v35 != v34);
          long long v33 = v64[0];
        }
        v64[1] = v34;
        goto LABEL_87;
      }
    }
    uint64_t v55 = v60;
    if (!(void)v60) {
      return;
    }
    uint64_t v56 = *((void *)&v60 + 1);
    long long v54 = (void *)v60;
    if (*((void *)&v60 + 1) != (void)v60)
    {
      do
      {
        if (*(char *)(v56 - 1) < 0) {
          operator delete(*(void **)(v56 - 24));
        }
        v56 -= 32;
      }
      while (v56 != v55);
      long long v54 = (void *)v60;
    }
    *((void *)&v60 + 1) = v55;
    goto LABEL_96;
  }
  sub_C9D4F4(a1, a2);
  if (*(unsigned char *)a2)
  {
    size_t v9 = (void *)sub_37D0B8(*(uint64_t **)(a1 + 16));
    *(void *)(a2 + 32) = vcvtad_u64_f64(sub_72688((uint64_t)v69));
    *(unsigned char *)(a2 + 80) = *(unsigned char *)sub_DA6A28((uint64_t)v72);
    *(unsigned char *)(a2 + 81) = *(unsigned char *)(sub_DA6A28((uint64_t)v72) + 1);
    uint64_t v13 = *(char **)(a2 + 8);
    uint64_t v14 = *(char **)(a2 + 16);
    if (v13 == v14)
    {
      unsigned int v15 = 0;
    }
    else
    {
      unsigned int v15 = 0;
      long long v16 = (void *)*v9;
      long long v17 = (void *)v9[1];
      uint64_t v19 = *(void *)(a2 + 64);
      uint64_t v18 = *(void *)(a2 + 72);
      uint64_t v20 = *(void *)(a2 + 56);
      uint64_t v21 = *(char **)(a2 + 8);
      uint64_t v22 = *(void *)(a2 + 40);
      do
      {
        switch(*((_DWORD *)v21 + 26))
        {
          case 0:
            *(void *)(a2 + 40) = ++v22;
            if (v16 != v17) {
              goto LABEL_25;
            }
            goto LABEL_14;
          case 1:
            *(void *)(a2 + 64) = ++v19;
            goto LABEL_24;
          case 2:
            *(void *)(a2 + 56) = ++v20;
            if (v16 == v17) {
              goto LABEL_14;
            }
            goto LABEL_25;
          case 5:
            *(void *)(a2 + 72) = ++v18;
            if (v16 == v17) {
              goto LABEL_14;
            }
            goto LABEL_25;
          default:
LABEL_24:
            if (v16 == v17)
            {
LABEL_14:
              int v23 = 0;
              goto LABEL_15;
            }
LABEL_25:
            int v23 = 0;
            unsigned int v24 = *((_DWORD *)v21 + 1);
            LODWORD(v10) = *(_DWORD *)v21;
            double v10 = (double)*(unint64_t *)&v10;
            uint64_t v25 = v16;
            break;
        }
        do
        {
          uint64_t v26 = (_DWORD *)v25[1];
          int v27 = (_DWORD *)(*v25 + 12);
          if ((_DWORD *)*v25 != v26 && v27 != v26)
          {
            do
            {
              unsigned int v29 = *(v27 - 2);
              unsigned int v30 = v27[1];
              if (v29 >= v24)
              {
                if (v30 < v24)
                {
LABEL_38:
                  LODWORD(v11) = *v27;
                  LODWORD(v12) = *(v27 - 3);
                  double v12 = (double)*(unint64_t *)&v12;
                  double v11 = ((double)v24 - (double)v29)
                      / ((double)v30 - (double)v29)
                      * ((double)*(unint64_t *)&v11 - v12)
                      + v12;
                  if (v11 < v10) {
                    v23 ^= 1u;
                  }
                }
              }
              else if (v30 >= v24)
              {
                goto LABEL_38;
              }
              v27 += 3;
            }
            while (v27 != v26);
          }
          v25 += 3;
        }
        while (v25 != v17);
LABEL_15:
        if (v23) {
          ++v15;
        }
        v21 += 376;
      }
      while (v21 != v14);
    }
    unint64_t v36 = 0x51B3BEA3677D46CFLL * ((v14 - v13) >> 3);
    *(unsigned char *)(a2 + 82) = v36 == v15;
    BOOL v37 = v36 > v15 && v15 != 0;
    *(unsigned char *)(a2 + 83) = v37;
    if (!*(_DWORD *)(a1 + 8))
    {
      uint64_t v38 = *(void *)a1;
      if (sub_DC5878(*(void *)a1))
      {
        uint64_t v39 = (void *)sub_DBC410(v38);
        unsigned int v41 = v40;
        unint64_t v42 = sub_DBB1D4(v38);
        long long v43 = *(void **)v4;
        *(_OWORD *)long long v63 = *(_OWORD *)(*(void *)v4 + 592);
        uint64_t v44 = *(void *)(a1 + 16);
        *(void *)&v63[16] = v43[76];
        v64[0] = v39;
        v64[1] = (void *)__PAIR64__(HIDWORD(v42), v41);
        LOBYTE(v65) = 0;
        uint64_t v66 = 0x7FFFFFFFFFFFFFFFLL;
        sub_4827B8((uint64_t)__p, v44, a2 + 8, (uint64_t)v63, *(void *)(a1 + 32));
        if (sub_482FC8((uint64_t)__p))
        {
          sub_483530((uint64_t)__p, (uint64_t *)v63);
          uint64_t v45 = *(void *)v4;
          if (*(void *)v4)
          {
            uint64_t v46 = *(void *)(a2 + 16);
            uint64_t v47 = *(void **)v4;
            if (v46 != v45)
            {
              do
                uint64_t v46 = sub_402C7C(v46 - 376);
              while (v46 != v45);
              uint64_t v47 = *(void **)v4;
            }
            *(void *)(a2 + 16) = v45;
            operator delete(v47);
            *(void *)uint64_t v4 = 0;
            *(void *)(a2 + 16) = 0;
            *(void *)(a2 + 24) = 0;
          }
          *(_OWORD *)(a2 + 8) = *(_OWORD *)v63;
          *(void *)(a2 + 24) = *(void *)&v63[16];
          *(unsigned char *)(a2 + 88) = 1;
          if (sub_DBE8AC(v38) && sub_723EC(1u))
          {
            sub_6BAC((uint64_t)v63);
            unint64_t v48 = sub_188FC78(v63, (uint64_t)"Multi-stop route auto-advanced by the Server: ", 46);
            int v49 = sub_69510();
            uint64_t v50 = sub_68EE4((uint64_t)v49);
            int v51 = *(char *)(v50 + 23);
            if (v51 >= 0) {
              uint64_t v52 = v50;
            }
            else {
              uint64_t v52 = *(void *)v50;
            }
            if (v51 >= 0) {
              uint64_t v53 = *(unsigned __int8 *)(v50 + 23);
            }
            else {
              uint64_t v53 = *(void *)(v50 + 8);
            }
            sub_188FC78(v48, v52, v53);
            std::stringbuf::str();
            sub_7246C((uint64_t *)&v57, 1u);
            if (v58 < 0) {
              operator delete((void *)v57.n128_u64[0]);
            }
            sub_111ECAC((uint64_t)v63);
          }
        }
        long long v54 = __p[0];
        if (__p[0])
        {
          __p[1] = __p[0];
LABEL_96:
          operator delete(v54);
        }
      }
    }
  }
}

void sub_C9D18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a25);
  if (a15)
  {
    operator delete(a15);
    sub_C9D440(v25);
    _Unwind_Resume(a1);
  }
  sub_C9D440(v25);
  _Unwind_Resume(a1);
}

uint64_t sub_C9D2A4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a2)
    {
      uint64_t v4 = (void *)(a2 + 8);
      uint64_t v5 = (void **)(a1 + 8);
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6)
      {
LABEL_27:
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        void *v4 = 0;
        v4[1] = 0;
        void v4[2] = 0;
        long long v17 = *(_OWORD *)(a2 + 32);
        long long v18 = *(_OWORD *)(a2 + 48);
        long long v19 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
        *(_OWORD *)(a1 + 48) = v18;
        *(_OWORD *)(a1 + 64) = v19;
        *(_OWORD *)(a1 + 32) = v17;
        goto LABEL_28;
      }
      uint64_t v7 = *(void *)(a1 + 16);
      char v8 = *(void **)(a1 + 8);
      if (v7 != v6)
      {
        do
          uint64_t v7 = sub_402C7C(v7 - 376);
        while (v7 != v6);
        char v8 = *v5;
      }
      *(void *)(a1 + 16) = v6;
      size_t v9 = v8;
      goto LABEL_25;
    }
    double v12 = (void **)(a1 + 8);
    uint64_t v13 = *(void *)(a1 + 8);
    uint64_t v14 = (_OWORD *)(a2 + 8);
    if (v13)
    {
      uint64_t v15 = *(void *)(a1 + 16);
      long long v16 = *(void **)(a1 + 8);
      if (v15 != v13)
      {
        do
          uint64_t v15 = sub_402C7C(v15 - 376);
        while (v15 != v13);
        long long v16 = *v12;
      }
      *(void *)(a1 + 16) = v13;
      operator delete(v16);
    }
    *(_OWORD *)double v12 = *v14;
  }
  else
  {
    uint64_t v5 = (void **)(a1 + 8);
    uint64_t v4 = (void *)(a2 + 8);
    if (*(unsigned char *)a2)
    {
      uint64_t v10 = *(void *)(a1 + 24);
      if (!v10)
      {
LABEL_26:
        char *v5 = 0;
        v5[1] = 0;
        void v5[2] = 0;
        goto LABEL_27;
      }
      uint64_t v11 = *(void *)(a1 + 32);
      size_t v9 = *(void **)(a1 + 24);
      if (v11 != v10)
      {
        do
        {
          if (*(char *)(v11 - 1) < 0) {
            operator delete(*(void **)(v11 - 24));
          }
          v11 -= 32;
        }
        while (v11 != v10);
        size_t v9 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 32) = v10;
LABEL_25:
      operator delete(v9);
      goto LABEL_26;
    }
    *(_OWORD *)uint64_t v5 = *(_OWORD *)v4;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
LABEL_28:
  *(unsigned char *)a1 = *(unsigned char *)a2;
  return a1;
}

uint64_t sub_C9D440(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      uint64_t v4 = *(void **)(a1 + 8);
      if (v3 != v2)
      {
        do
        {
          v3 -= 376;
          sub_402C7C(v3);
        }
        while (v3 != v2);
        uint64_t v4 = *(void **)(a1 + 8);
      }
      *(void *)(a1 + 16) = v2;
LABEL_15:
      operator delete(v4);
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v4 = *(void **)(a1 + 24);
      if (v6 != v5)
      {
        do
        {
          if (*(char *)(v6 - 1) < 0) {
            operator delete(*(void **)(v6 - 24));
          }
          v6 -= 32;
        }
        while (v6 != v5);
        uint64_t v4 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 32) = v5;
      goto LABEL_15;
    }
  }
  return a1;
}

void sub_C9D4F4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 8) == *(void *)(a2 + 16)) {
    return;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  long long __p = operator new(0x20uLL);
  *(_OWORD *)char v58 = xmmword_20B91A0;
  strcpy((char *)__p, "InputPointTransformerModule");
  __n128 v65 = 0uLL;
  *(void *)&long long v66 = 0;
  uint64_t v5 = sub_374CDC(v4, (uint64_t)&__p, (uint64_t *)&v65);
  sub_C9DD1C((uint64_t)v53, a1, v5);
  unint64_t v6 = v65.n128_u64[0];
  if (v65.n128_u64[0])
  {
    unint64_t v7 = v65.n128_u64[1];
    char v8 = (void *)v65.n128_u64[0];
    if (v65.n128_u64[1] != v65.n128_u64[0])
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 24;
      }
      while (v7 != v6);
      char v8 = (void *)v65.n128_u64[0];
    }
    v65.n128_u64[1] = v6;
    operator delete(v8);
  }
  if ((v58[15] & 0x80000000) != 0)
  {
    operator delete(__p);
    if (!v53[0]) {
      return;
    }
  }
  else if (!v53[0])
  {
    return;
  }
  v51[0] = a2;
  v51[1] = &v52;
  uint64_t v52 = 0;
  int v9 = *(_DWORD *)(a1 + 8);
  if (v9)
  {
    if (v9 != 1) {
      goto LABEL_16;
    }
LABEL_19:
    uint64_t v10 = sub_DBC55C(*(void *)a1);
    sub_C9E550((uint64_t)v51, v10, HIDWORD(v10));
    if (*(_DWORD *)(a1 + 8) != 2) {
      goto LABEL_103;
    }
    goto LABEL_20;
  }
  sub_C9E550((uint64_t)v51, 0xFFFFFFFF, 0xFFFFFFFF);
  int v9 = *(_DWORD *)(a1 + 8);
  if (v9 == 1) {
    goto LABEL_19;
  }
LABEL_16:
  if (v9 != 2) {
    goto LABEL_103;
  }
LABEL_20:
  sub_DBEA58(*(void ****)a1, &v55);
  uint64_t v11 = *(unsigned int **)(a2 + 8);
  if (*v11 == -1 && v11[1] == -1) {
    goto LABEL_94;
  }
  double v12 = *(unsigned int **)(a2 + 16);
  if (v11 + 94 != v12)
  {
    uint64_t v13 = 94;
    do
    {
      uint64_t v15 = &v11[v13];
      uint64_t v16 = v11[v13];
      uint64_t v17 = v11[v13 + 1];
      if (v16 == -1 && v17 == -1)
      {
        uint64_t v14 = 0;
        goto LABEL_25;
      }
      double v19 = sqrt((double)((*v11 - v16) * (*v11 - v16) + (v11[1] - v17) * ((unint64_t)v11[1] - v17)))
          / 100.0
          * 100.0;
      if (v19 >= 0.0)
      {
        double v20 = v19;
        if (v19 < 4.50359963e15)
        {
          uint64_t v21 = (uint64_t)(v19 + v19) + 1;
LABEL_39:
          double v20 = (double)(v21 >> 1);
        }
      }
      else
      {
        double v20 = v19;
        if (v19 > -4.50359963e15)
        {
          uint64_t v21 = (uint64_t)(v19 + v19);
          if (v21 >= 1) {
            --v21;
          }
          goto LABEL_39;
        }
      }
      if (v20 < 9.22337204e18)
      {
        if (v19 >= 0.0)
        {
          if (v19 < 4.50359963e15)
          {
            uint64_t v22 = (uint64_t)(v19 + v19) + 1;
            goto LABEL_49;
          }
        }
        else if (v19 > -4.50359963e15)
        {
          uint64_t v22 = (uint64_t)(v19 + v19);
          if (v22 >= 1) {
            --v22;
          }
LABEL_49:
          double v19 = (double)(v22 >> 1);
        }
        uint64_t v14 = (uint64_t)v19;
        goto LABEL_25;
      }
      uint64_t v14 = 0x7FFFFFFFFFFFFFFELL;
LABEL_25:
      if (v52 > v14) {
        uint64_t v14 = v52;
      }
      uint64_t v52 = v14;
      v13 += 94;
    }
    while (v15 + 94 != v12);
  }
  int v23 = (void **)v55;
  if (v55 != v56)
  {
    unsigned int v24 = sub_1115F80(&v65, 0, 0);
    if (!sub_1880FAC(v24, v55)) {
      goto LABEL_93;
    }
    if (*(char *)((v69 & 0xFFFFFFFFFFFFFFFELL) + 23) < 0)
    {
      if (!*(void *)((v69 & 0xFFFFFFFFFFFFFFFELL) + 8)) {
        goto LABEL_58;
      }
    }
    else if (!*(unsigned char *)((v69 & 0xFFFFFFFFFFFFFFFELL) + 23))
    {
LABEL_58:
      if (v67)
      {
        uint64_t v25 = &off_24F8110;
        if (*(void *)(*(void *)(v68 + 8 * ((int)v67 - 1) + 8) + 32)) {
          uint64_t v25 = *(uint64_t (****)())(*(void *)(v68 + 8 * ((int)v67 - 1) + 8) + 32);
        }
        double v26 = (double)*((int *)v25 + 7) / 10000000.0;
        unint64_t v27 = -1;
        if (v26 <= 180.0)
        {
          double v28 = (double)*((int *)v25 + 6) / 10000000.0;
          if (v28 >= -85.0511288 && v28 <= 85.0511288 && v26 >= -180.0)
          {
            double v29 = fmax(v28, -85.0511288);
            double v30 = v29 * 3.14159265 / 180.0;
            BOOL v31 = v29 < 85.0511288;
            double v32 = 1.48442223;
            if (v31) {
              double v32 = v30;
            }
            long double v33 = sin(v32);
            LODWORD(v34) = ((log((v33 + 1.0) / (1.0 - v33)) / -12.5663706 + 0.5) * 4294967300.0);
            if (v34 >= 0xFFFFFFFE) {
              uint64_t v34 = 4294967294;
            }
            else {
              uint64_t v34 = v34;
            }
            unint64_t v27 = ((v26 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v34 << 32);
          }
        }
        unint64_t v35 = v11[1] - HIDWORD(v27);
        double v36 = sqrt((double)((*v11 - (unint64_t)v27) * (*v11 - (unint64_t)v27)
                          + v35 * v35))
            / 100.0
            * 100.0;
        if (v36 >= 0.0)
        {
          double v37 = v36;
          if (v36 >= 4.50359963e15) {
            goto LABEL_79;
          }
          uint64_t v38 = (uint64_t)(v36 + v36) + 1;
        }
        else
        {
          double v37 = v36;
          if (v36 <= -4.50359963e15) {
            goto LABEL_79;
          }
          uint64_t v38 = (uint64_t)(v36 + v36);
          if (v38 >= 1) {
            --v38;
          }
        }
        double v37 = (double)(v38 >> 1);
LABEL_79:
        if (v37 >= 9.22337204e18)
        {
          uint64_t v40 = 0x7FFFFFFFFFFFFFFELL;
LABEL_90:
          if (v52 > v40) {
            uint64_t v40 = v52;
          }
          uint64_t v52 = v40;
          goto LABEL_93;
        }
        if (v36 >= 0.0)
        {
          if (v36 < 4.50359963e15)
          {
            uint64_t v39 = (uint64_t)(v36 + v36) + 1;
LABEL_88:
            double v36 = (double)(v39 >> 1);
          }
        }
        else if (v36 > -4.50359963e15)
        {
          uint64_t v39 = (uint64_t)(v36 + v36);
          if (v39 >= 1) {
            --v39;
          }
          goto LABEL_88;
        }
        uint64_t v40 = (uint64_t)v36;
        goto LABEL_90;
      }
LABEL_93:
      sub_1116458(&v65);
LABEL_94:
      int v23 = (void **)v55;
      goto LABEL_95;
    }
    uint64_t v59 = 0;
    long long v62 = 0u;
    long long v64 = 0u;
    long long __p = (void *)0x4039000000000000;
    *(void *)char v58 = 5000;
    *(_OWORD *)&v58[8] = xmmword_20E7C10;
    *(_OWORD *)&v58[24] = xmmword_20E7C20;
    uint64_t v60 = 20000000;
    uint64_t v61 = 0x3FF199999999999ALL;
    *(void *)&long long v62 = 0x3E800002710;
    DWORD2(v62) = 10000;
    WORD6(v62) = 10;
    long long v63 = xmmword_20E7C00;
    *(void *)&long long v64 = 0x3FE6147AE147AE14;
    sub_110B110((uint64_t)&__p, (uint64_t)&v65);
    goto LABEL_58;
  }
LABEL_95:
  if (v23)
  {
    unsigned int v41 = v56;
    unint64_t v42 = v23;
    if (v56 != v23)
    {
      do
      {
        if (*((char *)v41 - 1) < 0) {
          operator delete(*(v41 - 3));
        }
        v41 -= 3;
      }
      while (v41 != v23);
      unint64_t v42 = v55;
    }
    uint64_t v56 = v23;
    operator delete(v42);
  }
LABEL_103:
  if (v52 <= v54) {
    return;
  }
  long long __p = &dword_C + 3;
  *(void *)char v58 = &off_2439090;
  sub_3E7814(&v65, (__n128 *)&__p);
  LOBYTE(__p) = 0;
  *(__n128 *)char v58 = v65;
  *(_OWORD *)&v58[16] = v66;
  *(void *)&v58[32] = v67;
  long long v66 = 0uLL;
  uint64_t v67 = 0;
  LODWORD(v59) = v68;
  sub_C9D2A4(a2, (uint64_t)&__p);
  if ((_BYTE)__p)
  {
    uint64_t v43 = *(void *)v58;
    if (!*(void *)v58) {
      goto LABEL_119;
    }
    uint64_t v44 = *(void *)&v58[8];
    uint64_t v45 = *(void **)v58;
    if (*(void *)&v58[8] != *(void *)v58)
    {
      do
      {
        v44 -= 376;
        sub_402C7C(v44);
      }
      while (v44 != v43);
      uint64_t v45 = *(void **)v58;
    }
    *(void *)&v58[8] = v43;
  }
  else
  {
    uint64_t v46 = *(void *)&v58[16];
    if (!*(void *)&v58[16]) {
      goto LABEL_119;
    }
    uint64_t v47 = *(void *)&v58[24];
    uint64_t v45 = *(void **)&v58[16];
    if (*(void *)&v58[24] != *(void *)&v58[16])
    {
      do
      {
        if (*(char *)(v47 - 1) < 0) {
          operator delete(*(void **)(v47 - 24));
        }
        v47 -= 32;
      }
      while (v47 != v46);
      uint64_t v45 = *(void **)&v58[16];
    }
    *(void *)&v58[24] = v46;
  }
  operator delete(v45);
LABEL_119:
  uint64_t v48 = v66;
  if ((void)v66)
  {
    uint64_t v49 = *((void *)&v66 + 1);
    uint64_t v50 = (void *)v66;
    if (*((void *)&v66 + 1) != (void)v66)
    {
      do
      {
        if (*(char *)(v49 - 1) < 0) {
          operator delete(*(void **)(v49 - 24));
        }
        v49 -= 32;
      }
      while (v49 != v48);
      uint64_t v50 = (void *)v66;
    }
    *((void *)&v66 + 1) = v48;
    operator delete(v50);
  }
}

void sub_C9DC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **__p, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_1116458(v23 - 128);
  if (__p)
  {
    uint64_t v25 = a16;
    double v26 = __p;
    if (a16 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != __p);
      double v26 = __p;
    }
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_C9DD1C(uint64_t a1, uint64_t a2, void *a3)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0x7FFFFFFFFFFFFFFFLL;
  int v6 = *(_DWORD *)(a2 + 8);
  if (v6)
  {
    unsigned int v7 = 0;
    if (v6 != 1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  unsigned int v7 = sub_DBEDDC(*(void *)a2);
  int v6 = *(_DWORD *)(a2 + 8);
  if (v6 == 1)
  {
LABEL_3:
    unsigned int v7 = sub_DBD94C(*(void *)a2);
    int v6 = *(_DWORD *)(a2 + 8);
  }
LABEL_4:
  if (v6 != 2)
  {
    if (v6 != 4) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  unsigned int v7 = sub_DBEE50(*(void *)a2);
  if (*(_DWORD *)(a2 + 8) == 4) {
LABEL_8:
  }
    unsigned int v7 = sub_64A728();
LABEL_9:
  *(_OWORD *)uint64_t v48 = 0u;
  long long v49 = 0u;
  int v50 = 1065353216;
  __p[23] = 8;
  strcpy(__p, "any_mode");
  uint64_t v8 = sub_560F4(a3, (uint64_t)__p);
  sub_54214((uint64_t)v42, v8);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)long long __p = operator new(0x20uLL);
  long long v41 = xmmword_20B8E90;
  *(_OWORD *)&__p[8] = xmmword_20B8E90;
  strcpy(*(char **)__p, "distance_filter.max_distance_km");
  qmemcpy(v40, ".max_distance_kmdistance_filter.", sizeof(v40));
  uint64_t v9 = sub_5CDE0(v42, __p);
  uint64_t v46 = v9;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    uint64_t v39 = a1;
    if (!v7) {
      goto LABEL_74;
    }
    while (1)
    {
LABEL_17:
      sub_7B8BC(__clz(__rbit32(v7)), (char *)v51);
      if (v52 >= 0) {
        uint64_t v10 = v51;
      }
      else {
        uint64_t v10 = (uint64_t *)v51[0];
      }
      if (v52 >= 0) {
        unint64_t v11 = v52;
      }
      else {
        unint64_t v11 = v51[1];
      }
      if (v11 >= 0x7FFFFFFFFFFFFFF8) {
        sub_188D690();
      }
      if (v11 < 0x17) {
        break;
      }
      uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v13 = v11 | 7;
      }
      uint64_t v14 = v13 + 1;
      double v12 = operator new(v13 + 1);
      *(void *)&__p[8] = v11;
      *(void *)&__p[16] = v14 | 0x8000000000000000;
      *(void *)long long __p = v12;
      if (v11 < 0x20 || (unint64_t)(v12 - (unsigned char *)v10) < 0x20) {
        goto LABEL_35;
      }
      uint64_t v15 = (uint64_t *)((char *)v10 + (v11 & 0xFFFFFFFFFFFFFFE0));
      uint64_t v16 = &v12[v11 & 0xFFFFFFFFFFFFFFE0];
      uint64_t v17 = v12 + 16;
      long long v18 = (long long *)(v10 + 2);
      unint64_t v19 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v20 = *v18;
        *(v17 - 1) = *(v18 - 1);
        _OWORD *v17 = v20;
        v17 += 2;
        v18 += 2;
        v19 -= 32;
      }
      while (v19);
      if (v11 != (v11 & 0x7FFFFFFFFFFFFFE0)) {
        goto LABEL_36;
      }
LABEL_37:
      unsigned char *v16 = 0;
      if (__p[23] >= 0) {
        uint64_t v22 = __p;
      }
      else {
        uint64_t v22 = *(unsigned char **)__p;
      }
      do
      {
        *v22++ = __tolower(*(char *)v10);
        uint64_t v10 = (uint64_t *)((char *)v10 + 1);
        --v11;
      }
      while (v11);
LABEL_43:
      uint64_t v23 = sub_58070(a3, (uint64_t)__p);
      if (v23 && *((_DWORD *)v23 + 12) == 2)
      {
        unsigned int v24 = (void **)v23[5];
        if ((__p[23] & 0x80000000) != 0) {
          goto LABEL_55;
        }
      }
      else
      {
        unsigned int v24 = v48;
        if ((__p[23] & 0x80000000) != 0)
        {
LABEL_55:
          operator delete(*(void **)__p);
          if ((v52 & 0x80000000) == 0) {
            goto LABEL_49;
          }
          goto LABEL_56;
        }
      }
      if ((v52 & 0x80000000) == 0) {
        goto LABEL_49;
      }
LABEL_56:
      operator delete((void *)v51[0]);
LABEL_49:
      __p[23] = 15;
      strcpy(__p, "distance_filter");
      if (sub_58070(v24, (uint64_t)__p))
      {
        char v52 = 15;
        strcpy((char *)v51, "distance_filter");
        uint64_t v25 = (void *)sub_560F4(v24, (uint64_t)v51);
        char v45 = 15;
        strcpy((char *)v44, "max_distance_km");
        BOOL v26 = sub_58070(v25, (uint64_t)v44) != 0;
        if (v45 < 0)
        {
          operator delete(v44[0]);
          if ((v52 & 0x80000000) == 0)
          {
LABEL_52:
            if ((__p[23] & 0x80000000) != 0) {
              goto LABEL_58;
            }
            goto LABEL_53;
          }
        }
        else if ((v52 & 0x80000000) == 0)
        {
          goto LABEL_52;
        }
        operator delete((void *)v51[0]);
        if ((__p[23] & 0x80000000) != 0)
        {
LABEL_58:
          operator delete(*(void **)__p);
          if (!v26) {
            goto LABEL_62;
          }
          goto LABEL_59;
        }
      }
      else
      {
        BOOL v26 = 0;
        if ((__p[23] & 0x80000000) != 0) {
          goto LABEL_58;
        }
      }
LABEL_53:
      if (!v26) {
        goto LABEL_62;
      }
LABEL_59:
      unint64_t v27 = (char *)operator new(0x20uLL);
      *(void *)long long __p = v27;
      *(_OWORD *)&__p[8] = v41;
      *(_OWORD *)unint64_t v27 = v40[1];
      *(_OWORD *)(v27 + 15) = v40[0];
      v27[31] = 0;
      uint64_t v28 = sub_5CDE0(v24, __p);
      v51[0] = v28;
      if (v9 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (v28 == 0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v9 = v46;
          if ((__p[23] & 0x80000000) == 0) {
            goto LABEL_62;
          }
        }
        else
        {
          double v29 = &v46;
          if (v9 >= v28) {
            double v29 = v51;
          }
          uint64_t v9 = *v29;
          uint64_t v46 = *v29;
          if ((__p[23] & 0x80000000) == 0) {
            goto LABEL_62;
          }
        }
LABEL_61:
        operator delete(*(void **)__p);
        goto LABEL_62;
      }
      uint64_t v9 = v51[0];
      uint64_t v46 = v51[0];
      if ((__p[23] & 0x80000000) != 0) {
        goto LABEL_61;
      }
LABEL_62:
      sub_59234(v42, (uint64_t)v24);
      v7 &= v7 - 1;
      if (!v7) {
        goto LABEL_74;
      }
    }
    __p[23] = v11;
    if (!v11)
    {
      __p[0] = 0;
      goto LABEL_43;
    }
    double v12 = __p;
LABEL_35:
    uint64_t v15 = v10;
    uint64_t v16 = v12;
    do
    {
LABEL_36:
      char v21 = *(unsigned char *)v15;
      uint64_t v15 = (uint64_t *)((char *)v15 + 1);
      *v16++ = v21;
    }
    while (v15 != (uint64_t *)((char *)v10 + v11));
    goto LABEL_37;
  }
  uint64_t v39 = a1;
  if (v7) {
    goto LABEL_17;
  }
LABEL_74:
  double v30 = (char *)operator new(0x20uLL);
  *(void *)long long __p = v30;
  *(_OWORD *)&__p[8] = v41;
  *(_OWORD *)double v30 = v40[1];
  *(_OWORD *)(v30 + 15) = v40[0];
  v30[31] = 0;
  *(double *)int v51 = (double)v9 / 100000.0;
  LODWORD(v51[1]) = 1;
  sub_596F4((uint64_t)v42, (uint64_t *)__p, (uint64_t)v51);
  sub_5521C((uint64_t *)LODWORD(v51[1]), v51);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  BOOL v31 = (void **)v49;
  if ((void)v49)
  {
    do
    {
      double v37 = (void **)*v31;
      sub_55198((uint64_t)(v31 + 5));
      if (*((char *)v31 + 39) < 0) {
        operator delete(v31[2]);
      }
      operator delete(v31);
      BOOL v31 = v37;
    }
    while (v37);
  }
  double v32 = v48[0];
  v48[0] = 0;
  if (v32) {
    operator delete(v32);
  }
  BYTE7(v49) = 15;
  strcpy((char *)v48, "distance_filter");
  long double v33 = (void *)sub_560F4(v42, (uint64_t)v48);
  if (SBYTE7(v49) < 0) {
    operator delete(v48[0]);
  }
  BYTE7(v49) = 6;
  strcpy((char *)v48, "enable");
  *(unsigned char *)uint64_t v39 = sub_29D62C(v33, (uint64_t)v48);
  if (SBYTE7(v49) < 0) {
    operator delete(v48[0]);
  }
  BYTE7(v49) = 15;
  strcpy((char *)v48, "max_distance_km");
  *(void *)(v39 + 8) = sub_5CDE0(v33, v48);
  if (SBYTE7(v49) < 0) {
    operator delete(v48[0]);
  }
  uint64_t v34 = v43;
  if (v43)
  {
    do
    {
      uint64_t v38 = (void **)*v34;
      sub_55198((uint64_t)(v34 + 5));
      if (*((char *)v34 + 39) < 0) {
        operator delete(v34[2]);
      }
      operator delete(v34);
      uint64_t v34 = v38;
    }
    while (v38);
  }
  unint64_t v35 = v42[0];
  v42[0] = 0;
  if (v35) {
    operator delete(v35);
  }
  return v39;
}

void sub_C9E3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  sub_5450C((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_C9E550(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = *(void *)result;
  if (a2 != -1 || a3 != -1)
  {
    uint64_t v4 = *(unsigned int **)(v3 + 8);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    if (v5 != -1 || v6 != -1)
    {
      double v8 = sqrt((double)((a2 - v5) * (a2 - v5) + (a3 - v6) * ((unint64_t)a3 - v6))) / 100.0 * 100.0;
      if (v8 >= 0.0)
      {
        double v9 = v8;
        if (v8 >= 4.50359963e15) {
          goto LABEL_15;
        }
        uint64_t v10 = (uint64_t)(v8 + v8) + 1;
      }
      else
      {
        double v9 = v8;
        if (v8 <= -4.50359963e15) {
          goto LABEL_15;
        }
        uint64_t v10 = (uint64_t)(v8 + v8);
        if (v10 >= 1) {
          --v10;
        }
      }
      double v9 = (double)(v10 >> 1);
LABEL_15:
      if (v9 >= 9.22337204e18)
      {
        uint64_t v12 = 0x7FFFFFFFFFFFFFFELL;
LABEL_26:
        **(void **)(result + 8) += v12;
        uint64_t v3 = *(void *)result;
        goto LABEL_27;
      }
      if (v8 >= 0.0)
      {
        if (v8 < 4.50359963e15)
        {
          uint64_t v11 = (uint64_t)(v8 + v8) + 1;
LABEL_24:
          double v8 = (double)(v11 >> 1);
        }
      }
      else if (v8 > -4.50359963e15)
      {
        uint64_t v11 = (uint64_t)(v8 + v8);
        if (v11 >= 1) {
          --v11;
        }
        goto LABEL_24;
      }
      uint64_t v12 = (uint64_t)v8;
      goto LABEL_26;
    }
  }
LABEL_27:
  uint64_t v14 = *(unsigned int **)(v3 + 8);
  uint64_t v13 = *(unsigned int **)(v3 + 16);
  if (v14 != v13 && v14 + 94 != v13)
  {
    uint64_t v16 = *(uint64_t **)(result + 8);
    uint64_t v17 = *v16;
    do
    {
      uint64_t v20 = *v14;
      uint64_t v21 = v14[1];
      BOOL v22 = v20 == -1 && v21 == -1;
      if (v22 || ((result = v14[94], uint64_t v23 = v14[95], result == -1) ? (v24 = v23 == -1) : (v24 = 0), v24))
      {
        uint64_t v18 = 0;
        goto LABEL_34;
      }
      double v25 = sqrt((double)(unint64_t)((v20 - result) * (v20 - result) + (v21 - v23) * (v21 - v23)))
          / 100.0
          * 100.0;
      if (v25 >= 0.0)
      {
        double v26 = v25;
        if (v25 < 4.50359963e15)
        {
          uint64_t v27 = (uint64_t)(v25 + v25) + 1;
LABEL_50:
          double v26 = (double)(v27 >> 1);
        }
      }
      else
      {
        double v26 = v25;
        if (v25 > -4.50359963e15)
        {
          uint64_t v27 = (uint64_t)(v25 + v25);
          if (v27 >= 1) {
            --v27;
          }
          goto LABEL_50;
        }
      }
      if (v26 < 9.22337204e18)
      {
        if (v25 >= 0.0)
        {
          if (v25 < 4.50359963e15)
          {
            uint64_t v28 = (uint64_t)(v25 + v25) + 1;
            goto LABEL_60;
          }
        }
        else if (v25 > -4.50359963e15)
        {
          uint64_t v28 = (uint64_t)(v25 + v25);
          if (v28 >= 1) {
            --v28;
          }
LABEL_60:
          double v25 = (double)(v28 >> 1);
        }
        uint64_t v18 = (uint64_t)v25;
        goto LABEL_34;
      }
      uint64_t v18 = 0x7FFFFFFFFFFFFFFELL;
LABEL_34:
      v17 += v18;
      uint64_t *v16 = v17;
      unint64_t v19 = v14 + 188;
      v14 += 94;
    }
    while (v19 != v13);
  }
  return result;
}

void sub_C9E7CC()
{
  unk_25E13CF = 16641;
  word_25E13B8 = 65;
  byte_25E13E7 = 1;
  byte_25E13D1 = 0;
}

void sub_C9E7F4(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v211);
  v238[0] = 1;
  bzero(&v239, 0x360uLL);
  sub_47E0E4(&v239);
  int v243 = -1;
  v246[128] = 0;
  v246[264] = 0;
  long long v257 = 0u;
  long long v258 = 0u;
  long long v259 = 0u;
  *(void *)((char *)v256 + 5) = 0;
  v256[0] = 0;
  *(_OWORD *)std::string::size_type v244 = 0u;
  memset(v245, 0, sizeof(v245));
  long long v247 = 0u;
  long long v248 = 0u;
  long long v249 = 0u;
  long long v250 = 0u;
  long long v251 = 0u;
  long long v252 = 0u;
  long long v253 = 0u;
  long long v254 = 0u;
  int v255 = 0;
  uint64_t v260 = 0x3FF0000000000000;
  uint64_t v262 = 0;
  uint64_t v261 = 0;
  uint64_t v263 = 0;
  char v264 = 5;
  long long v267 = 0u;
  long long v266 = 0u;
  long long v265 = 0u;
  int v268 = 0x7FFFFFFF;
  uint64_t v273 = 0;
  uint64_t v274 = 0;
  long long v271 = 0u;
  memset(v272, 0, sizeof(v272));
  long long v269 = 0u;
  long long v270 = 0u;
  uint64_t v275 = -1;
  int v276 = 0x7FFFFFFF;
  uint64_t v277 = 0;
  uint64_t v278 = -1;
  int v279 = -1;
  char v280 = 0;
  char v283 = 0;
  unint64_t v284 = 0;
  __int16 v285 = 0;
  int v3 = *a1;
  char v5 = v3 == 8 || v3 == 4;
  sub_430040((uint64_t)v210, *((void *)a1 + 34), v5);
  int v6 = sub_486A5C(*((void *)a1 + 33));
  BOOL v8 = v6 != 3 && v6 != 5;
  uint64_t v9 = nullsub_1(*((void *)a1 + 33));
  sub_47E0E4(v230);
  char v237 = 0;
  memset(v234, 0, sizeof(v234));
  if (a1[280] && sub_48602C(*((void *)a1 + 33)))
  {
    uint64_t v10 = (long long *)sub_486044(*((void *)a1 + 33));
    sub_4895AC((uint64_t)v216, v10);
    int v243 = sub_4F44((unsigned int *)v216);
    sub_491BD8((uint64_t)v216, (uint64_t)__p);
    sub_43241C((uint64_t)v210, (uint64_t *)__p, (uint64_t)(a1 + 104), *((void *)a1 + 26), 0, 1, v8, (uint64_t)v225);
    sub_CA09B8((uint64_t)v230, (uint64_t)v225);
    sub_443A30((uint64_t)v225);
    uint64_t v11 = (void **)__p[0];
    if (__p[0])
    {
      uint64_t v12 = (void **)__p[1];
      uint64_t v13 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*((char *)v12 - 1) < 0) {
            operator delete(*(v12 - 3));
          }
          v12 -= 3;
        }
        while (v12 != v11);
        uint64_t v13 = __p[0];
      }
      __p[1] = v11;
      operator delete(v13);
    }
    if (v222)
    {
      uint64_t v223 = v222;
      operator delete(v222);
    }
    uint64_t v28 = v219;
    if (v219)
    {
      uint64_t v29 = (uint64_t)v220;
      double v30 = v219;
      if (v220 != v219)
      {
        do
          uint64_t v29 = sub_489CF4(v29 - 144);
        while ((void *)v29 != v28);
        double v30 = v219;
      }
      unsigned int v220 = v28;
      operator delete(v30);
    }
    if (v216[1].n128_u64[1])
    {
      v216[2].n128_u64[0] = v216[1].n128_u64[1];
      operator delete((void *)v216[1].n128_u64[1]);
    }
    goto LABEL_45;
  }
  if (*((void *)a1 + 9) != *((void *)a1 + 10))
  {
    sub_430044();
    sub_CA09B8((uint64_t)v230, (uint64_t)v216);
    sub_443A30((uint64_t)v216);
    if (!sub_EA80FC((char **)v230))
    {
      uint64_t v14 = sub_EA841C((uint64_t *)v230);
      v216[0] = *(__n128 *)v14;
      __n128 v15 = *(__n128 *)(v14 + 16);
      __n128 v16 = *(__n128 *)(v14 + 32);
      long long v17 = *(_OWORD *)(v14 + 48);
      std::string::size_type v218 = *(void **)(v14 + 64);
      v216[2] = v16;
      long long v217 = v17;
      v216[1] = v15;
      v216[0].n128_u32[0] = *((_DWORD *)a1 + 24);
      uint64_t v18 = (uint64_t *)nullsub_1(v230);
      sub_EAD920(*v18, (uint64_t)v216);
      uint64_t v19 = sub_EA8424((uint64_t)v230);
      *(_OWORD *)unint64_t v225 = *(_OWORD *)v19;
      long long v20 = *(_OWORD *)(v19 + 16);
      long long v21 = *(_OWORD *)(v19 + 32);
      long long v22 = *(_OWORD *)(v19 + 48);
      uint64_t v229 = *(void *)(v19 + 64);
      *(_OWORD *)unint64_t v228 = v22;
      long long v227 = v21;
      *(_OWORD *)unint64_t v226 = v20;
      LODWORD(v225[0]) = *((_DWORD *)a1 + 25);
      uint64_t v23 = nullsub_1(v230);
      sub_EADAA8(*(void *)(v23 + 8) - 472, (uint64_t)v225);
    }
    goto LABEL_45;
  }
  if (*((void *)a1 + 1) != *((void *)a1 + 2))
  {
    int v24 = 0;
    unsigned int v25 = *a1;
    if (v25 > 0xD)
    {
      BOOL v27 = 0;
      LOBYTE(v285) = 1;
      if (*((void *)a1 + 5) == -1)
      {
LABEL_31:
        if (sub_EA80FC((char **)v230))
        {
          sub_43241C((uint64_t)v210, (uint64_t *)a1 + 1, (uint64_t)(a1 + 104), *((void *)a1 + 26), v24, 0, v8, (uint64_t)v216);
          sub_CA09B8((uint64_t)v230, (uint64_t)v216);
          sub_443A30((uint64_t)v216);
        }
        int v243 = *((_DWORD *)a1 + 8);
        goto LABEL_45;
      }
    }
    else
    {
      int v26 = 1 << v25;
      BOOL v27 = 0;
      if ((v26 & 0x2A86) != 0)
      {
        BOOL v27 = *((void *)a1 + 26) != 0x7FFFFFFFFFFFFFFFLL;
        int v24 = 1;
      }
      LOBYTE(v285) = 1;
      if (*((void *)a1 + 5) == -1) {
        goto LABEL_31;
      }
    }
    if (!v27)
    {
      sub_435BAC(v216);
      sub_CA09B8((uint64_t)v230, (uint64_t)v216);
      sub_443A30((uint64_t)v216);
    }
    goto LABEL_31;
  }
  if (sub_CA0C28(*((void *)a1 + 33)))
  {
    if (!*(unsigned char *)(v9 + 128))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    sub_491B44(v9, v225);
    sub_435BD8((uint64_t)v210, (uint64_t *)v225, (uint64_t)(a1 + 104), (uint64_t)v216);
    sub_CA09B8((uint64_t)v230, (uint64_t)v216);
    sub_443A30((uint64_t)v216);
    uint64_t v118 = *((void *)a1 + 27);
    uint64_t v119 = *((void *)a1 + 28);
    if (v118 != v119 && 0xF0F0F0F0F0F0F0F1 * ((v119 - v118) >> 3) != sub_EA8440(v230))
    {
      uint64_t v121 = *((void *)a1 + 27);
      uint64_t v120 = *((void *)a1 + 28);
      if (0xF0F0F0F0F0F0F0F1 * ((v120 - v121) >> 3) > sub_EA8440(v230))
      {
        v225[0] = dword_8 + 3;
        v225[1] = &off_2439090;
        sub_3E7814(v216, (__n128 *)v225);
        *(unsigned char *)a2 = 0;
        __n128 v122 = v216[1];
        *(__n128 *)(a2 + 8) = v216[0];
        *(__n128 *)(a2 + 24) = v122;
        *(void *)(a2 + 40) = v216[2].n128_u64[0];
        memset(&v216[1], 0, 24);
        *(_DWORD *)(a2 + 48) = v216[2].n128_u32[2];
        sub_C7E3C8((uint64_t)v216);
        sub_443A30((uint64_t)v230);
        if (!v238[0]) {
          goto LABEL_292;
        }
        goto LABEL_244;
      }
      unint64_t v166 = (uint64_t *)nullsub_1(v230);
      unint64_t v167 = sub_EA8440(v230) + 0xF0F0F0F0F0F0F0FLL * ((uint64_t)(*((void *)a1 + 28) - *((void *)a1 + 27)) >> 3);
      sub_CA0CD8((uint64_t)v166, *v166, *v166 + 472 * v167);
      sub_CA0D90((uint64_t)v234, *(uint64_t *)&v234[0], *(void *)&v234[0] + 24 * v167);
    }
  }
  else
  {
    if (*((void *)a1 + 6) == *((void *)a1 + 7))
    {
      __p[0] = dword_8 + 3;
      __p[1] = &off_2439090;
      sub_3E7814((__n128 *)v225, (__n128 *)__p);
      v216[0].n128_u8[0] = 0;
      *(__n128 *)((char *)v216 + 8) = *(__n128 *)v225;
      *(__n128 *)((char *)&v216[1] + 8) = *(__n128 *)v226;
      v216[2].n128_u64[1] = v227;
      v226[0] = 0;
      v226[1] = 0;
      *(void *)&long long v227 = 0;
      LODWORD(v217) = DWORD2(v227);
      sub_CA0E94((uint64_t)v238, (unsigned __int8 *)v216);
      if (v216[0].n128_u8[0])
      {
        sub_CA60E4((uint64_t)&v216[0].n128_i64[1]);
      }
      else
      {
        unint64_t v168 = v216[1].n128_u64[1];
        if (v216[1].n128_u64[1])
        {
          unint64_t v169 = v216[2].n128_u64[0];
          int v170 = (void *)v216[1].n128_u64[1];
          if (v216[2].n128_u64[0] != v216[1].n128_u64[1])
          {
            do
            {
              if (*(char *)(v169 - 1) < 0) {
                operator delete(*(void **)(v169 - 24));
              }
              v169 -= 32;
            }
            while (v169 != v168);
            int v170 = (void *)v216[1].n128_u64[1];
          }
          v216[2].n128_u64[0] = v168;
          operator delete(v170);
        }
      }
      int v171 = (void **)v226[0];
      if (v226[0])
      {
        uint64_t v172 = (void **)v226[1];
        int v126 = v226[0];
        if (v226[1] != v226[0])
        {
          do
          {
            if (*((char *)v172 - 1) < 0) {
              operator delete(*(v172 - 3));
            }
            v172 -= 4;
          }
          while (v172 != v171);
          int v126 = v226[0];
        }
        v226[1] = v171;
LABEL_242:
        operator delete(v126);
      }
LABEL_243:
      sub_CA6580(a2, (uint64_t)v238);
      sub_443A30((uint64_t)v230);
      if (!v238[0]) {
        goto LABEL_292;
      }
      goto LABEL_244;
    }
    sub_4315F0();
    sub_CA09B8((uint64_t)v230, (uint64_t)v216);
    sub_443A30((uint64_t)v216);
  }
LABEL_45:
  BOOL v31 = (uint64_t *)sub_37D0C0(*((void *)a1 + 34));
  v198.n128_u8[7] = 15;
  strcpy((char *)__p, "RequestWithPath");
  uint64_t v32 = *v31;
  if (*v31)
  {
    sub_443118((uint64_t)v216, v32);
  }
  else
  {
    uint64_t v207 = 0;
    std::string::size_type v208 = 0;
    uint64_t v209 = 0;
    uint64_t v229 = 0;
    *(_OWORD *)unint64_t v228 = 0u;
    long long v227 = 0u;
    *(_OWORD *)unint64_t v226 = 0u;
    *(_OWORD *)unint64_t v225 = 0u;
    char v206 = 0;
    LOBYTE(v205) = 0;
    uint64_t v203 = 0;
    unsigned int v204 = 0;
    uint64_t v201 = 0;
    unint64_t v202 = 0;
    sub_29DC44((uint64_t)v216, (long long **)&v207, (long long *)v225, &v205, &v203, 0, (uint64_t)&v201, 1);
  }
  sub_710A8(1, (uint64_t)__p, (uint64_t)v216);
  sub_29E11C((uint64_t)v216);
  if (v32)
  {
LABEL_49:
    if (v198.n128_i8[7] < 0) {
      goto LABEL_50;
    }
    goto LABEL_51;
  }
  int v51 = v202;
  if (v202 && !atomic_fetch_add(&v202->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
    char v52 = v204;
    if (!v204)
    {
LABEL_88:
      if ((v206 & 0x80000000) == 0) {
        goto LABEL_89;
      }
      goto LABEL_218;
    }
  }
  else
  {
    char v52 = v204;
    if (!v204) {
      goto LABEL_88;
    }
  }
  if (atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_88;
  }
  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
  std::__shared_weak_count::__release_weak(v52);
  if ((v206 & 0x80000000) == 0)
  {
LABEL_89:
    if ((SHIBYTE(v229) & 0x80000000) == 0) {
      goto LABEL_90;
    }
    goto LABEL_219;
  }
LABEL_218:
  operator delete((void *)v205);
  if ((SHIBYTE(v229) & 0x80000000) == 0)
  {
LABEL_90:
    if ((SHIBYTE(v227) & 0x80000000) == 0) {
      goto LABEL_91;
    }
    goto LABEL_220;
  }
LABEL_219:
  operator delete(v228[0]);
  if ((SHIBYTE(v227) & 0x80000000) == 0)
  {
LABEL_91:
    if ((SHIBYTE(v226[0]) & 0x80000000) == 0) {
      goto LABEL_92;
    }
    goto LABEL_221;
  }
LABEL_220:
  operator delete(v226[1]);
  if ((SHIBYTE(v226[0]) & 0x80000000) == 0)
  {
LABEL_92:
    uint64_t v53 = (void **)v207;
    if (!v207) {
      goto LABEL_49;
    }
    goto LABEL_222;
  }
LABEL_221:
  operator delete(v225[0]);
  uint64_t v53 = (void **)v207;
  if (!v207) {
    goto LABEL_49;
  }
LABEL_222:
  long long v123 = v208;
  if (v208 == v53)
  {
    std::string::size_type v208 = v53;
    operator delete(v53);
    if (v198.n128_i8[7] < 0) {
      goto LABEL_50;
    }
    goto LABEL_51;
  }
  do
  {
    while (*((char *)v123 - 1) < 0)
    {
      operator delete(*(v123 - 3));
      if (*((char *)v123 - 25) < 0) {
        goto LABEL_229;
      }
LABEL_226:
      v123 -= 6;
      if (v123 == v53) {
        goto LABEL_230;
      }
    }
    if ((*((char *)v123 - 25) & 0x80000000) == 0) {
      goto LABEL_226;
    }
LABEL_229:
    operator delete(*(v123 - 6));
    v123 -= 6;
  }
  while (v123 != v53);
LABEL_230:
  std::string::size_type v208 = v53;
  operator delete(v207);
  if (v198.n128_i8[7] < 0) {
LABEL_50:
  }
    operator delete(__p[0]);
LABEL_51:
  if (sub_EA80FC((char **)v230))
  {
    v195.n128_u64[0] = 11;
    v195.n128_u64[1] = (unint64_t)&off_2439090;
    sub_3E7814((__n128 *)__p, &v195);
    v216[0].n128_u8[0] = 0;
    *(__n128 *)((char *)v216 + 8) = *(__n128 *)__p;
    *(__n128 *)((char *)&v216[1] + 8) = v198;
    v216[2].n128_u64[1] = v199;
    __n128 v198 = 0uLL;
    unint64_t v199 = 0;
    LODWORD(v217) = v200;
    sub_CA0E94((uint64_t)v238, (unsigned __int8 *)v216);
    if (v216[0].n128_u8[0])
    {
      sub_CA60E4((uint64_t)&v216[0].n128_i64[1]);
    }
    else
    {
      unint64_t v54 = v216[1].n128_u64[1];
      if (v216[1].n128_u64[1])
      {
        unint64_t v55 = v216[2].n128_u64[0];
        uint64_t v56 = (void *)v216[1].n128_u64[1];
        if (v216[2].n128_u64[0] != v216[1].n128_u64[1])
        {
          do
          {
            if (*(char *)(v55 - 1) < 0) {
              operator delete(*(void **)(v55 - 24));
            }
            v55 -= 32;
          }
          while (v55 != v54);
          uint64_t v56 = (void *)v216[1].n128_u64[1];
        }
        v216[2].n128_u64[0] = v54;
        operator delete(v56);
      }
    }
    unint64_t v124 = v198.n128_u64[0];
    if (v198.n128_u64[0])
    {
      unint64_t v125 = v198.n128_u64[1];
      int v126 = (void *)v198.n128_u64[0];
      if (v198.n128_u64[1] != v198.n128_u64[0])
      {
        do
        {
          if (*(char *)(v125 - 1) < 0) {
            operator delete(*(void **)(v125 - 24));
          }
          v125 -= 32;
        }
        while (v125 != v124);
        int v126 = (void *)v198.n128_u64[0];
      }
      v198.n128_u64[1] = v124;
      goto LABEL_242;
    }
    goto LABEL_243;
  }
  if (*(unsigned char *)(v9 + 128))
  {
    int v33 = sub_491B8C(v9);
    if (!*(unsigned char *)(v9 + 128))
    {
      uint64_t v175 = __cxa_allocate_exception(8uLL);
      *uint64_t v175 = &off_2439078;
    }
    unsigned int v191 = sub_491B68(v9) + v33;
    if (sub_EA8440(v230) > v191 && !v237)
    {
      uint64_t v34 = sub_69510();
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)v216);
        sub_188FC78(v216, (uint64_t)"Got a request where the session_state contains fewer legs (", 59);
        unint64_t v35 = (void *)std::ostream::operator<<();
        sub_188FC78(v35, (uint64_t)") than the number of legs decoded (", 35);
        sub_EA8440(v230);
        double v36 = (void *)std::ostream::operator<<();
        double v37 = sub_188FC78(v36, (uint64_t)"): ", 3);
        v195.n128_u32[0] = sub_69124((uint64_t)v34);
        sub_677F0((unsigned int *)&v195, (uint64_t)__p);
        if (v198.n128_i8[7] >= 0) {
          uint64_t v38 = __p;
        }
        else {
          uint64_t v38 = (void **)__p[0];
        }
        if (v198.n128_i8[7] >= 0) {
          uint64_t v39 = v198.n128_u8[7];
        }
        else {
          uint64_t v39 = (uint64_t)__p[1];
        }
        uint64_t v40 = sub_188FC78(v37, (uint64_t)v38, v39);
        long long v41 = sub_188FC78(v40, (uint64_t)" request: ", 10);
        uint64_t v42 = sub_68EE4((uint64_t)v34);
        int v43 = *(char *)(v42 + 23);
        if (v43 >= 0) {
          uint64_t v44 = v42;
        }
        else {
          uint64_t v44 = *(void *)v42;
        }
        if (v43 >= 0) {
          uint64_t v45 = *(unsigned __int8 *)(v42 + 23);
        }
        else {
          uint64_t v45 = *(void *)(v42 + 8);
        }
        sub_188FC78(v41, v44, v45);
        if (v198.n128_i8[7] < 0) {
          operator delete(__p[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        if (v198.n128_i8[7] < 0) {
          operator delete(__p[0]);
        }
        if (v221 < 0) {
          operator delete(v219);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
    }
    uint64_t v46 = *((void *)a1 + 34);
    v216[1].n128_u8[7] = 17;
    strcpy((char *)v216, "PathDecoderModule");
    __p[0] = 0;
    __p[1] = 0;
    v198.n128_u64[0] = 0;
    uint64_t v47 = sub_374CDC(v46, (uint64_t)v216, (uint64_t *)__p);
    uint64_t v48 = (void **)__p[0];
    if (__p[0])
    {
      long long v49 = (void **)__p[1];
      int v50 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*((char *)v49 - 1) < 0) {
            operator delete(*(v49 - 3));
          }
          v49 -= 3;
        }
        while (v49 != v48);
        int v50 = __p[0];
      }
      __p[1] = v48;
      operator delete(v50);
    }
    if (v216[1].n128_i8[7] < 0) {
      operator delete((void *)v216[0].n128_u64[0]);
    }
    v216[0].n128_u64[0] = (unint64_t)operator new(0x38uLL);
    *(__n128 *)((char *)v216 + 8) = (__n128)xmmword_20B9AD0;
    strcpy((char *)v216[0].n128_u64[0], "max_num_fully_traversed_legs_preserved_in_session_state");
    int v57 = sub_31AC04(v47, (uint64_t)v216);
    if (v216[1].n128_i8[7] < 0) {
      operator delete((void *)v216[0].n128_u64[0]);
    }
    unsigned int v58 = sub_EA8440(v230);
    if (v191 >= v58) {
      int v59 = v191 - v58;
    }
    else {
      int v59 = 0;
    }
    unsigned int v189 = v57 + v58;
    if (v191 >= v57 + v58) {
      unsigned int v60 = v191 - (v57 + v58);
    }
    else {
      unsigned int v60 = 0;
    }
    sub_484EDC(*((void *)a1 + 33), (uint64_t)v216);
    sub_CA0FF4((uint64_t)v246, (uint64_t)v216);
    sub_4BCC2C((uint64_t)v216);
    __p[0] = 0;
    __p[1] = 0;
    v198.n128_u64[0] = 0;
    unint64_t v61 = sub_EA8440(v230);
    sub_493EC4((char **)__p, v61);
    if (!*(unsigned char *)(v9 + 128))
    {
      unint64_t v176 = __cxa_allocate_exception(8uLL);
      *unint64_t v176 = &off_2439078;
    }
    sub_491B5C(v9, v216);
    if (!*(unsigned char *)(v9 + 128))
    {
      unint64_t v177 = __cxa_allocate_exception(8uLL);
      *unint64_t v177 = &off_2439078;
    }
    int v188 = v59;
    unint64_t v62 = v216[0].n128_u64[0];
    sub_491B5C(v9, &v195);
    unsigned int v187 = v60;
    long long v63 = (uint64_t *)(v62 + 144 * v60);
    unint64_t v64 = v195.n128_u64[1];
    if (v63 != (uint64_t *)v195.n128_u64[1])
    {
      __n128 v65 = (char *)__p[1];
      do
      {
        while ((unint64_t)v65 < v198.n128_u64[0])
        {
          sub_48990C((uint64_t)v65, v63);
          v65 += 144;
          __p[1] = v65;
          v63 += 18;
          if (v63 == (uint64_t *)v64) {
            goto LABEL_121;
          }
        }
        __n128 v65 = (char *)sub_CA7184((uint64_t *)__p, v63);
        __p[1] = v65;
        v63 += 18;
      }
      while (v63 != (uint64_t *)v64);
    }
LABEL_121:
    if (!*(unsigned char *)(v9 + 128)
      || (int v186 = sub_4F44((unsigned int *)v9), !*(unsigned char *)(v9 + 128))
      || (char v185 = sub_491B10(v9), !*(unsigned char *)(v9 + 128))
      || (int v184 = sub_40A44C(v9), !*(unsigned char *)(v9 + 128))
      || (char v183 = sub_491B18(v9), !*(unsigned char *)(v9 + 128))
      || (char v182 = sub_491B20(v9), !*(unsigned char *)(v9 + 128))
      || (int v66 = sub_40AB24(v9), !*(unsigned char *)(v9 + 128)))
    {
      int v173 = __cxa_allocate_exception(8uLL);
      *int v173 = &off_2439078;
    }
    int v67 = v66;
    int v68 = sub_491B28(v9);
    if (!*(unsigned char *)(v9 + 128))
    {
      unint64_t v178 = __cxa_allocate_exception(8uLL);
      *unint64_t v178 = &off_2439078;
    }
    int v69 = v68;
    sub_46DD68(v9, &v194);
    if (!*(unsigned char *)(v9 + 128))
    {
      uint64_t v179 = __cxa_allocate_exception(8uLL);
      *uint64_t v179 = &off_2439078;
    }
    uint64_t v70 = (const void *)v194.n128_u64[0];
    sub_46DD68(v9, &v193);
    unint64_t v196 = 0;
    __n128 v195 = 0uLL;
    uint64_t v71 = v193.n128_u64[1] - (void)v70;
    if ((const void *)v193.n128_u64[1] != v70)
    {
      if (v71 < 0) {
        sub_2E00();
      }
      v195.n128_u64[0] = (unint64_t)operator new(v193.n128_u64[1] - (void)v70);
      v195.n128_u64[1] = v195.n128_u64[0];
      unint64_t v72 = v195.n128_u64[0] + 16 * (v71 >> 4);
      unint64_t v196 = v72;
      memmove((void *)v195.n128_u64[0], v70, v71 - 4);
      v195.n128_u64[1] = v72;
    }
    if (v191 > v189)
    {
      *(void *)&v192[0] = 0x8000000080000000;
      *(long long *)((char *)v192 + 8) = xmmword_20E8160;
      DWORD2(v192[0]) = 0x7FFFFFFF;
      goto LABEL_137;
    }
    if (!*(unsigned char *)(v9 + 128)) {
      goto LABEL_346;
    }
    uint64_t v73 = sub_50BE8(v9);
    long long v74 = *(_OWORD *)v73;
    *(void *)&v192[1] = *(void *)(v73 + 16);
    v192[0] = v74;
LABEL_137:
    if (!*(unsigned char *)(v9 + 128))
    {
LABEL_346:
      int v174 = __cxa_allocate_exception(8uLL);
      *int v174 = &off_2439078;
    }
    uint64_t v75 = sub_68EAC(v9);
    sub_491ADC((uint64_t)v216, v186, v185, v184, v183, v182, v67, v69, v188 - v187, (uint64_t)&v195, v192, (uint64_t *)__p, v75);
    sub_485264((uint64_t)v246, (long long *)v216);
    if (v222)
    {
      uint64_t v223 = v222;
      operator delete(v222);
    }
    long long v76 = v219;
    if (v219)
    {
      uint64_t v77 = (uint64_t)v220;
      long long v78 = v219;
      if (v220 != v219)
      {
        do
          uint64_t v77 = sub_489CF4(v77 - 144);
        while ((void *)v77 != v76);
        long long v78 = v219;
      }
      unsigned int v220 = v76;
      operator delete(v78);
    }
    if (v216[1].n128_u64[1])
    {
      v216[2].n128_u64[0] = v216[1].n128_u64[1];
      operator delete((void *)v216[1].n128_u64[1]);
    }
    if (v195.n128_u64[0])
    {
      v195.n128_u64[1] = v195.n128_u64[0];
      operator delete((void *)v195.n128_u64[0]);
    }
    long long v79 = __p[0];
    if (__p[0])
    {
      long long v80 = __p[1];
      long long v81 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          long long v80 = (void *)sub_489CF4((uint64_t)v80 - 144);
        while (v80 != v79);
        long long v81 = __p[0];
      }
      __p[1] = v79;
      operator delete(v81);
    }
  }
  else
  {
    sub_5B98C0((uint64_t)v246, *((void *)a1 + 33));
  }
  uint64_t v82 = v239;
  if ((void)v239)
  {
    uint64_t v83 = *((void *)&v239 + 1);
    long long v84 = (void *)v239;
    if (*((void *)&v239 + 1) != (void)v239)
    {
      do
        uint64_t v83 = sub_405F44(v83 - 472);
      while (v83 != v82);
      long long v84 = (void *)v239;
    }
    *((void *)&v239 + 1) = v82;
    operator delete(v84);
  }
  long long v239 = *(_OWORD *)v230;
  unsigned int v240 = v231;
  unsigned int v231 = 0;
  v230[1] = 0;
  v230[0] = 0;
  if (SHIBYTE(v242) < 0) {
    operator delete((void *)v241);
  }
  long long v241 = v232;
  uint64_t v242 = v233;
  HIBYTE(v233) = 0;
  LOBYTE(v232) = 0;
  long long v85 = (char *)v244[0];
  if (v244[0])
  {
    uint64_t v86 = v244[1];
    uint64_t v87 = v244[0];
    if (v244[1] != v244[0])
    {
      long long v88 = (char *)v244[1];
      do
      {
        int v90 = (void *)*((void *)v88 - 3);
        v88 -= 24;
        unsigned int v89 = v90;
        if (v90)
        {
          *(v86 - 2) = v89;
          operator delete(v89);
        }
        uint64_t v86 = v88;
      }
      while (v88 != v85);
      uint64_t v87 = v244[0];
    }
    v244[1] = v85;
    operator delete(v87);
  }
  *(_OWORD *)std::string::size_type v244 = v234[0];
  v245[0] = *(void **)&v234[1];
  memset(v234, 0, 24);
  uint64_t v91 = (char *)v245[1];
  if (v245[1])
  {
    unint64_t v92 = (char *)v245[2];
    unint64_t v93 = v245[1];
    if (v245[2] != v245[1])
    {
      do
      {
        unint64_t v94 = (void *)*((void *)v92 - 4);
        if (v94)
        {
          *((void *)v92 - 3) = v94;
          operator delete(v94);
        }
        unint64_t v95 = (void *)*((void *)v92 - 7);
        if (v95)
        {
          *((void *)v92 - 6) = v95;
          operator delete(v95);
        }
        unint64_t v96 = (void *)*((void *)v92 - 11);
        if (v96)
        {
          *((void *)v92 - 10) = v96;
          operator delete(v96);
        }
        v92 -= 160;
      }
      while (v92 != v91);
      unint64_t v93 = v245[1];
    }
    v245[2] = v91;
    operator delete(v93);
  }
  *(_OWORD *)&v245[1] = *(_OWORD *)((char *)&v234[1] + 8);
  v245[3] = *((void **)&v234[2] + 1);
  memset((char *)&v234[1] + 8, 0, 24);
  if (v237)
  {
    if (v283)
    {
      if ((void)v281)
      {
        *((void *)&v281 + 1) = v281;
        operator delete((void *)v281);
      }
      long long v281 = v235;
      uint64_t v282 = v236;
      uint64_t v236 = 0;
      long long v235 = 0uLL;
    }
    else
    {
      long long v281 = v235;
      uint64_t v282 = v236;
      uint64_t v236 = 0;
      long long v235 = 0uLL;
      char v283 = 1;
    }
  }
  else if (v283)
  {
    if ((void)v281)
    {
      *((void *)&v281 + 1) = v281;
      operator delete((void *)v281);
    }
    char v283 = 0;
  }
  sub_443A30((uint64_t)v230);
  uint64_t v97 = *((void *)a1 + 27);
  uint64_t v98 = *((void *)a1 + 28);
  if (v97 != v98)
  {
    unint64_t v99 = sub_EA8440(&v239);
    uint64_t v100 = sub_40EFE8((uint64_t)&v239);
    uint64_t v101 = *((void *)a1 + 27);
    uint64_t v102 = sub_52058((uint64_t)&v239);
    if (v100 != v102)
    {
      uint64_t v103 = (long long *)(v101 + 136 * (0xF0F0F0F0F0F0F0F1 * ((v98 - v97) >> 3) - v99));
      do
      {
        sub_3B1DC8((uint64_t)v216, v103);
        long long v224 = xmmword_20F0420;
        sub_EAD948(v100, (long long *)v216);
        if (v218)
        {
          uint64_t v219 = v218;
          operator delete(v218);
        }
        if (v216[2].n128_u64[1])
        {
          *(void *)&long long v217 = v216[2].n128_u64[1];
          operator delete((void *)v216[2].n128_u64[1]);
        }
        v100 += 472;
        uint64_t v103 = (long long *)((char *)v103 + 136);
      }
      while (v100 != v102);
    }
    uint64_t v104 = sub_40EFE8((uint64_t)&v239);
    uint64_t v105 = sub_EADA60(v104);
    uint64_t v106 = v105;
    int v107 = *(_DWORD *)(v105 + 112);
    if (v107 != -1)
    {
      if (v107 == 1)
      {
        if (*(void *)(v105 + 104) > 0xFFFFFFFEFFFFFFFFLL || !*(void *)(v105 + 104)) {
          goto LABEL_267;
        }
      }
      else
      {
        if (v107)
        {
          uint64_t v181 = __cxa_allocate_exception(8uLL);
          *uint64_t v181 = &off_23FDF58;
        }
        if (*(void *)(v105 + 104) == -1) {
          goto LABEL_267;
        }
      }
      uint64_t v108 = sub_376F8C(*((void **)a1 + 34));
      std::string::size_type v109 = (uint64_t *)v108;
      unsigned int v215 = *(_DWORD *)(v106 + 112);
      if (v215 <= 1) {
        uint64_t v214 = *(void *)(v106 + 104);
      }
      uint64_t v110 = sub_28CF4C(v108, &v214);
      *((void *)v245[1] + 2) = v110;
      unsigned int v213 = *(_DWORD *)(v106 + 112);
      if (v213 <= 1) {
        uint64_t v212 = *(void *)(v106 + 104);
      }
      unint64_t v111 = sub_28CDA4(v109, (uint64_t)&v212);
      unint64_t v112 = sub_28E018((uint64_t)v109, v111);
      unint64_t v113 = HIDWORD(v112) - *((unsigned int *)a1 + 27);
      unint64_t v114 = v112 - (unint64_t)*((unsigned int *)a1 + 26);
      double v115 = sqrt((double)(v114 * v114 + v113 * v113)) / 100.0 * 100.0;
      if (v115 >= 0.0)
      {
        double v116 = v115;
        if (v115 < 4.50359963e15)
        {
          uint64_t v117 = (uint64_t)(v115 + v115) + 1;
          goto LABEL_247;
        }
      }
      else
      {
        double v116 = v115;
        if (v115 > -4.50359963e15)
        {
          uint64_t v117 = (uint64_t)(v115 + v115);
          if (v117 >= 1) {
            --v117;
          }
LABEL_247:
          double v116 = (double)(v117 >> 1);
        }
      }
      if (v116 < 9.22337204e18)
      {
        if (v115 >= 0.0)
        {
          if (v115 < 4.50359963e15)
          {
            uint64_t v127 = (uint64_t)(v115 + v115) + 1;
            goto LABEL_259;
          }
        }
        else if (v115 > -4.50359963e15)
        {
          uint64_t v127 = (uint64_t)(v115 + v115);
          if (v127 >= 1) {
            --v127;
          }
LABEL_259:
          double v115 = (double)(v127 >> 1);
        }
        if ((uint64_t)v115 < 5001) {
          goto LABEL_267;
        }
      }
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)v216);
        sub_188FC78(v216, (uint64_t)"Distance between user location and the user route's origin charging station is approximately ", 93);
        unint64_t v128 = (void *)std::ostream::operator<<();
        sub_188FC78(v128, (uint64_t)" meters.", 8);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v230, 1u);
        if (SHIBYTE(v231) < 0) {
          operator delete(v230[0]);
        }
        if (v221 < 0) {
          operator delete(v219);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
    }
  }
LABEL_267:
  if (v283)
  {
    unint64_t v129 = (void *)nullsub_1(&v239);
    uint64_t v130 = v129[1] - *v129;
    if (v130)
    {
      uint64_t v131 = 0;
      uint64_t v132 = 0;
      uint64_t v133 = v130 / 472;
      do
      {
        uint64_t v134 = *v129 + v131;
        if (v132) {
          unsigned __int32 v135 = -1;
        }
        else {
          unsigned __int32 v135 = 0;
        }
        v216[0].n128_u32[0] = v135;
        sub_EADD60(v134, v216);
        uint64_t v136 = *v129 + v131;
        if (v132 == -1 - 0x34115B1E5F75270DLL * ((uint64_t)(v129[1] - *v129) >> 3)) {
          unsigned __int32 v137 = 1;
        }
        else {
          unsigned __int32 v137 = -1;
        }
        v216[0].n128_u32[0] = v137;
        sub_EADD6C(v136, v216);
        ++v132;
        v131 += 472;
      }
      while (v133 != v132);
    }
  }
  else
  {
    uint64_t v139 = *((void *)a1 + 30);
    uint64_t v138 = *((void *)a1 + 31);
    unint64_t v140 = sub_EA8440(&v239);
    if (v138 - v139 >= v140 + 1) {
      uint64_t v141 = v138 - v139 - (v140 + 1);
    }
    else {
      uint64_t v141 = 0;
    }
    uint64_t v142 = (void *)nullsub_1(&v239);
    uint64_t v143 = v142[1];
    uint64_t v144 = v143 - *v142;
    if (v143 != *v142)
    {
      unint64_t v145 = (void *)nullsub_1(&v239);
      if (v145[1] - *v145 == 472)
      {
        BOOL v146 = 1;
      }
      else
      {
        uint64_t v147 = *((void *)a1 + 30);
        BOOL v146 = v147 != *((void *)a1 + 31) && *(unsigned char *)(v141 + v147 + 1) == 1;
      }
      v216[0].n128_u32[0] = 0;
      unint64_t v148 = (uint64_t *)nullsub_1(&v239);
      sub_EADD60(*v148, v216);
      if (v146)
      {
        uint64_t v149 = *(void *)nullsub_1(&v239);
        LODWORD(v230[0]) = 1;
        sub_EADD6C(v149, v230);
        int v150 = 1;
        if (v144 == 472) {
          goto LABEL_291;
        }
      }
      else
      {
        uint64_t v151 = *(void *)nullsub_1(&v239);
        LODWORD(v230[0]) = -1;
        sub_EADD6C(v151, v230);
        int v150 = 0;
        if (v144 == 472) {
          goto LABEL_291;
        }
      }
      uint64_t v155 = 0;
      uint64_t v156 = v144 / 472 - 1;
      uint64_t v157 = 472;
      do
      {
        uint64_t v158 = *((void *)a1 + 30);
        BOOL v159 = v158 != *((void *)a1 + 31) && *(unsigned __int8 *)(v158 + v141 + v155 + 1) == 1;
        int v160 = (void *)nullsub_1(&v239);
        if (v155 + 2 == 0xCBEEA4E1A08AD8F3 * ((uint64_t)(v160[1] - *v160) >> 3))
        {
          BOOL v161 = 1;
        }
        else
        {
          uint64_t v162 = *((void *)a1 + 30);
          BOOL v161 = v162 != *((void *)a1 + 31) && *(unsigned __int8 *)(v162 + v141 + v155 + 2) == 1;
        }
        if (v159) {
          unsigned __int32 v163 = v150;
        }
        else {
          unsigned __int32 v163 = -1;
        }
        v216[0].n128_u32[0] = v163;
        int v164 = (void *)nullsub_1(&v239);
        sub_EADD60(*v164 + v157, v216);
        if (v161)
        {
          ++v150;
          uint64_t v165 = *(void *)nullsub_1(&v239) + v157;
          LODWORD(v230[0]) = v150;
        }
        else
        {
          uint64_t v165 = *(void *)nullsub_1(&v239) + v157;
          LODWORD(v230[0]) = -1;
        }
        sub_EADD6C(v165, v230);
        ++v155;
        v157 += 472;
      }
      while (v156 != v155);
    }
  }
LABEL_291:
  unint64_t v284 = vcvtad_u64_f64(sub_72688((uint64_t)v211));
  sub_CA6580(a2, (uint64_t)v238);
  if (v238[0])
  {
LABEL_244:
    sub_CA60E4((uint64_t)&v239);
    return;
  }
LABEL_292:
  unsigned __int32 v152 = (void **)v240;
  if (v240)
  {
    uint64_t v153 = (void **)v241;
    uint64_t v154 = v240;
    if ((void *)v241 != v240)
    {
      do
      {
        if (*((char *)v153 - 1) < 0) {
          operator delete(*(v153 - 3));
        }
        v153 -= 4;
      }
      while (v153 != v152);
      uint64_t v154 = v240;
    }
    *(void *)&long long v241 = v152;
    operator delete(v154);
  }
}

void sub_CA0510(_Unwind_Exception *a1)
{
}

uint64_t sub_CA09B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    int v6 = v4;
    if ((void *)v5 != v4)
    {
      do
        uint64_t v5 = sub_405F44(v5 - 472);
      while ((void *)v5 != v4);
      int v6 = *(void **)a1;
    }
    *(void *)(a1 + 8) = v4;
    operator delete(v6);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unsigned int v7 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v7);
  }
  long long v8 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)unsigned int v7 = v8;
  *(unsigned char *)(a2 + 47) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  uint64_t v9 = (void **)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 48);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v12 = *(void **)(a1 + 48);
    if (v11 != v10)
    {
      uint64_t v13 = *(void *)(a1 + 56);
      do
      {
        __n128 v15 = *(void **)(v13 - 24);
        v13 -= 24;
        uint64_t v14 = v15;
        if (v15)
        {
          *(void *)(v11 - 16) = v14;
          operator delete(v14);
        }
        uint64_t v11 = v13;
      }
      while (v13 != v10);
      uint64_t v12 = *v9;
    }
    *(void *)(a1 + 56) = v10;
    operator delete(v12);
    void *v9 = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  sub_C7EA10((void **)(a1 + 72), (__n128 *)(a2 + 72));
  __n128 v16 = (void **)(a1 + 96);
  if (*(unsigned char *)(a2 + 120))
  {
    long long v17 = (void *)(a2 + 96);
    if (!*(unsigned char *)(a1 + 120))
    {
      uint64_t *v16 = 0;
      *(void *)(a1 + 104) = 0;
      *(void *)(a1 + 112) = 0;
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      void *v17 = 0;
      *(void *)(a2 + 104) = 0;
      *(void *)(a2 + 112) = 0;
      *(unsigned char *)(a1 + 120) = 1;
      return a1;
    }
    long long v20 = *v16;
    if (*v16)
    {
      *(void *)(a1 + 104) = v20;
      operator delete(v20);
      uint64_t *v16 = 0;
      *(void *)(a1 + 104) = 0;
      *(void *)(a1 + 112) = 0;
    }
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    void *v17 = 0;
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = 0;
    return a1;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 120)) {
      return a1;
    }
    uint64_t v19 = *v16;
    if (*v16)
    {
      *(void *)(a1 + 104) = v19;
      operator delete(v19);
    }
    *(unsigned char *)(a1 + 120) = 0;
    return a1;
  }
}

void *sub_CA0BAC(void *a1)
{
  uint64_t v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[9];
  if (v3)
  {
    uint64_t v4 = a1[10];
    uint64_t v5 = (void *)a1[9];
    if (v4 != v3)
    {
      do
        uint64_t v4 = sub_489CF4(v4 - 144);
      while (v4 != v3);
      uint64_t v5 = (void *)a1[9];
    }
    a1[10] = v3;
    operator delete(v5);
  }
  int v6 = (void *)a1[3];
  if (v6)
  {
    a1[4] = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_CA0C28(uint64_t a1)
{
  if (!*(unsigned char *)(nullsub_1(a1) + 128)) {
    return 0;
  }
  uint64_t v2 = nullsub_1(a1);
  if (!*(unsigned char *)(v2 + 128))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  sub_491B44(v2, v5);
  if (v5[0] == v5[1]) {
    return 0;
  }
  else {
    return sub_4914C4(v5[0]);
  }
}

uint64_t sub_CA0CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = a3;
    uint64_t v6 = *(void *)(a1 + 8);
    if (a3 == v6)
    {
      uint64_t v8 = a2;
    }
    else
    {
      uint64_t v7 = 8 * ((a3 - a2) >> 3);
      uint64_t v8 = a2;
      do
      {
        sub_448838(v8, (long long *)(v8 + v7));
        v8 += 472;
      }
      while (v8 + v7 != v6);
      uint64_t v5 = *(void *)(a1 + 8);
    }
    while (v5 != v8)
      uint64_t v5 = sub_405F44(v5 - 472);
    *(void *)(a1 + 8) = v8;
  }
  return a2;
}

uint64_t sub_CA0D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = a3;
    uint64_t v6 = *(void *)(a1 + 8);
    if (a3 == v6)
    {
      uint64_t v8 = a2;
      if (a3 == a2)
      {
LABEL_14:
        *(void *)(a1 + 8) = v8;
        return a2;
      }
    }
    else
    {
      uint64_t v7 = 8 * ((a3 - a2) >> 3);
      uint64_t v8 = a2;
      do
      {
        uint64_t v10 = *(void **)v8;
        if (*(void *)v8)
        {
          *(void *)(v8 + 8) = v10;
          operator delete(v10);
          *(void *)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
          *(void *)(v8 + 16) = 0;
        }
        uint64_t v9 = (void *)(v8 + v7);
        *(_OWORD *)uint64_t v8 = *(_OWORD *)(v8 + v7);
        *(void *)(v8 + 16) = *(void *)(v8 + v7 + 16);
        void *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        v8 += 24;
      }
      while (v8 + v7 != v6);
      uint64_t v5 = *(void *)(a1 + 8);
      if (v5 == v8) {
        goto LABEL_14;
      }
    }
    uint64_t v11 = v5;
    do
    {
      uint64_t v13 = *(void **)(v11 - 24);
      v11 -= 24;
      uint64_t v12 = v13;
      if (v13)
      {
        *(void *)(v5 - 16) = v12;
        operator delete(v12);
      }
      uint64_t v5 = v11;
    }
    while (v11 != v8);
    goto LABEL_14;
  }
  return a2;
}

uint64_t sub_CA0E94(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  if (*(unsigned char *)a1)
  {
    if (*a2)
    {
      sub_CA5DB0(a1 + 8, (uint64_t)(a2 + 8));
LABEL_4:
      *(unsigned char *)a1 = *a2;
      return a1;
    }
    sub_CA60E4(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  else
  {
    uint64_t v6 = (_OWORD *)(a1 + 8);
    uint64_t v7 = a2 + 8;
    if (v4)
    {
      sub_CA5FA0(a1, (uint64_t)v6, a1 + 8, (uint64_t)v7);
      goto LABEL_4;
    }
    _OWORD *v6 = *v7;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  *(unsigned char *)a1 = *a2;
  return a1;
}

uint64_t sub_CA0F5C(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    sub_CA60E4(a1 + 8);
    return a1;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 24);
  if (v4 != v3)
  {
    do
    {
      if (*(char *)(v4 - 1) < 0) {
        operator delete(*(void **)(v4 - 24));
      }
      v4 -= 32;
    }
    while (v4 != v3);
    uint64_t v5 = *(void **)(a1 + 24);
  }
  *(void *)(a1 + 32) = v3;
  operator delete(v5);
  return a1;
}

uint64_t sub_CA0FF4(uint64_t a1, uint64_t a2)
{
  sub_4850F4(a1, a2);
  sub_4850F4(a1 + 136, a2 + 136);
  uint64_t v4 = *(void *)(a1 + 272);
  if (v4)
  {
    sub_48A070(a1 + 272, v4);
    operator delete(*(void **)(a1 + 272));
    *(void *)(a1 + 272) = 0;
    *(void *)(a1 + 280) = 0;
    *(void *)(a1 + 288) = 0;
  }
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a2 + 280) = 0;
  *(void *)(a2 + 288) = 0;
  *(void *)(a2 + 272) = 0;
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  uint64_t v5 = *(void *)(a1 + 304);
  if (v5)
  {
    uint64_t v6 = (void **)(a1 + 304);
    uint64_t v7 = *(void *)(a1 + 312);
    uint64_t v8 = *(void **)(a1 + 304);
    if (v7 != v5)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 24;
      }
      while (v7 != v5);
      uint64_t v8 = *v6;
    }
    *(void *)(a1 + 312) = v5;
    operator delete(v8);
    _OWORD *v6 = 0;
    *(void *)(a1 + 312) = 0;
    *(void *)(a1 + 320) = 0;
  }
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a2 + 304) = 0;
  *(void *)(a2 + 312) = 0;
  *(void *)(a2 + 320) = 0;
  uint64_t v9 = *(void *)(a1 + 328);
  if (v9)
  {
    uint64_t v10 = (void **)(a1 + 328);
    uint64_t v11 = *(void *)(a1 + 336);
    uint64_t v12 = *(void **)(a1 + 328);
    if (v11 != v9)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)(v11 - 24));
        }
        v11 -= 24;
      }
      while (v11 != v9);
      uint64_t v12 = *v10;
    }
    *(void *)(a1 + 336) = v9;
    operator delete(v12);
    void *v10 = 0;
    *(void *)(a1 + 336) = 0;
    *(void *)(a1 + 344) = 0;
  }
  uint64_t v13 = *(void *)(a2 + 336);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = v13;
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a2 + 328) = 0;
  *(void *)(a2 + 336) = 0;
  *(void *)(a2 + 344) = 0;
  uint64_t v14 = *(void **)(a1 + 352);
  if (v14)
  {
    *(void *)(a1 + 360) = v14;
    operator delete(v14);
    *(void *)(a1 + 352) = 0;
    *(void *)(a1 + 360) = 0;
    *(void *)(a1 + 368) = 0;
  }
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a2 + 352) = 0;
  *(void *)(a2 + 360) = 0;
  *(void *)(a2 + 368) = 0;
  uint64_t v15 = *(void *)(a1 + 376);
  if (v15)
  {
    __n128 v16 = (void **)(a1 + 376);
    uint64_t v17 = *(void *)(a1 + 384);
    uint64_t v18 = *(void **)(a1 + 376);
    if (v17 != v15)
    {
      do
      {
        if (*(char *)(v17 - 1) < 0) {
          operator delete(*(void **)(v17 - 24));
        }
        v17 -= 24;
      }
      while (v17 != v15);
      uint64_t v18 = *v16;
    }
    *(void *)(a1 + 384) = v15;
    operator delete(v18);
    uint64_t *v16 = 0;
    *(void *)(a1 + 384) = 0;
    *(void *)(a1 + 392) = 0;
  }
  uint64_t v19 = *(void *)(a2 + 384);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = v19;
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a2 + 376) = 0;
  *(void *)(a2 + 384) = 0;
  *(void *)(a2 + 392) = 0;
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  sub_CA66E0(a1 + 408, a2 + 408);
  long long v20 = (void **)(a1 + 592);
  if (*(char *)(a1 + 615) < 0) {
    operator delete(*v20);
  }
  long long v21 = *(_OWORD *)(a2 + 592);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  *(_OWORD *)long long v20 = v21;
  *(unsigned char *)(a2 + 615) = 0;
  *(unsigned char *)(a2 + 592) = 0;
  long long v22 = (void **)(a1 + 616);
  if (*(char *)(a1 + 639) < 0) {
    operator delete(*v22);
  }
  long long v23 = *(_OWORD *)(a2 + 616);
  *(void *)(a1 + 632) = *(void *)(a2 + 632);
  *(_OWORD *)long long v22 = v23;
  *(unsigned char *)(a2 + 639) = 0;
  *(unsigned char *)(a2 + 616) = 0;
  *(unsigned char *)(a1 + 640) = *(unsigned char *)(a2 + 640);
  *(void *)(a1 + 648) = *(void *)(a2 + 648);
  *(void *)(a1 + 656) = *(void *)(a2 + 656);
  uint64_t v24 = *(void *)(a2 + 664);
  *(_DWORD *)(a1 + 672) = *(_DWORD *)(a2 + 672);
  *(void *)(a1 + 664) = v24;
  *(_DWORD *)(a1 + 676) = *(_DWORD *)(a2 + 676);
  char v25 = *(unsigned char *)(a2 + 681);
  if (v25)
  {
    *(unsigned char *)(a1 + 680) = *(unsigned char *)(a2 + 680);
    char v25 = 1;
  }
  *(unsigned char *)(a1 + 681) = v25;
  char v26 = *(unsigned char *)(a2 + 683);
  if (v26)
  {
    *(unsigned char *)(a1 + 682) = *(unsigned char *)(a2 + 682);
    char v26 = 1;
  }
  *(unsigned char *)(a1 + 683) = v26;
  long long v27 = *(_OWORD *)(a2 + 688);
  *(unsigned char *)(a1 + 704) = *(unsigned char *)(a2 + 704);
  *(_OWORD *)(a1 + 688) = v27;
  return a1;
}

void sub_CA12F0(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v214);
  v241[0] = 1;
  bzero(&v242, 0x360uLL);
  sub_47E0E4(&v242);
  int v246 = -1;
  v249[128] = 0;
  v249[264] = 0;
  long long v260 = 0u;
  long long v261 = 0u;
  long long v262 = 0u;
  *(void *)((char *)v259 + 5) = 0;
  v259[0] = 0;
  *(_OWORD *)long long v247 = 0u;
  memset(v248, 0, sizeof(v248));
  long long v250 = 0u;
  long long v251 = 0u;
  long long v252 = 0u;
  long long v253 = 0u;
  long long v254 = 0u;
  long long v255 = 0u;
  long long v256 = 0u;
  long long v257 = 0u;
  int v258 = 0;
  uint64_t v263 = 0x3FF0000000000000;
  uint64_t v265 = 0;
  uint64_t v264 = 0;
  uint64_t v266 = 0;
  char v267 = 5;
  long long v270 = 0u;
  long long v269 = 0u;
  long long v268 = 0u;
  int v271 = 0x7FFFFFFF;
  uint64_t v276 = 0;
  uint64_t v277 = 0;
  long long v274 = 0u;
  memset(v275, 0, sizeof(v275));
  long long v272 = 0u;
  long long v273 = 0u;
  uint64_t v278 = -1;
  int v279 = 0x7FFFFFFF;
  uint64_t v280 = 0;
  uint64_t v281 = -1;
  int v282 = -1;
  char v283 = 0;
  char v286 = 0;
  unint64_t v287 = 0;
  __int16 v288 = 0;
  int v3 = *a1;
  char v5 = v3 == 8 || v3 == 4;
  sub_436CD0((uint64_t)v213, *((void *)a1 + 34), v5);
  int v6 = sub_486A5C(*((void *)a1 + 33));
  if (v6) {
    BOOL v7 = v6 == 5;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = !v7;
  uint64_t v9 = nullsub_1(*((void *)a1 + 33));
  sub_47E0E4(v233);
  char v240 = 0;
  memset(v237, 0, sizeof(v237));
  if (a1[280] && sub_48602C(*((void *)a1 + 33)))
  {
    uint64_t v10 = (long long *)sub_486044(*((void *)a1 + 33));
    sub_4895AC((uint64_t)v219, v10);
    int v246 = sub_4F44((unsigned int *)v219);
    sub_491BD8((uint64_t)v219, (uint64_t)__p);
    sub_439014((uint64_t)v213, (uint64_t *)__p, (uint64_t)(a1 + 104), *((void *)a1 + 26), 0, 1, v8, (uint64_t)v228);
    sub_CA09B8((uint64_t)v233, (uint64_t)v228);
    sub_443A30((uint64_t)v228);
    uint64_t v11 = (void **)__p[0];
    if (__p[0])
    {
      uint64_t v12 = (void **)__p[1];
      uint64_t v13 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*((char *)v12 - 1) < 0) {
            operator delete(*(v12 - 3));
          }
          v12 -= 3;
        }
        while (v12 != v11);
        uint64_t v13 = __p[0];
      }
      __p[1] = v11;
      operator delete(v13);
    }
    if (v225)
    {
      unint64_t v226 = v225;
      operator delete(v225);
    }
    uint64_t v28 = v222;
    if (v222)
    {
      uint64_t v29 = (uint64_t)v223;
      double v30 = v222;
      if (v223 != v222)
      {
        do
          uint64_t v29 = sub_489CF4(v29 - 144);
        while ((void *)v29 != v28);
        double v30 = v222;
      }
      uint64_t v223 = v28;
      operator delete(v30);
    }
    if (v219[1].n128_u64[1])
    {
      v219[2].n128_u64[0] = v219[1].n128_u64[1];
      operator delete((void *)v219[1].n128_u64[1]);
    }
    goto LABEL_45;
  }
  if (*((void *)a1 + 9) != *((void *)a1 + 10))
  {
    sub_436CD4();
    sub_CA09B8((uint64_t)v233, (uint64_t)v219);
    sub_443A30((uint64_t)v219);
    if (!sub_EA80FC((char **)v233))
    {
      uint64_t v14 = sub_EA841C((uint64_t *)v233);
      v219[0] = *(__n128 *)v14;
      __n128 v15 = *(__n128 *)(v14 + 16);
      __n128 v16 = *(__n128 *)(v14 + 32);
      long long v17 = *(_OWORD *)(v14 + 48);
      char v221 = *(void **)(v14 + 64);
      v219[2] = v16;
      long long v220 = v17;
      v219[1] = v15;
      v219[0].n128_u32[0] = *((_DWORD *)a1 + 24);
      uint64_t v18 = (uint64_t *)nullsub_1(v233);
      sub_EAD920(*v18, (uint64_t)v219);
      uint64_t v19 = sub_EA8424((uint64_t)v233);
      *(_OWORD *)unint64_t v228 = *(_OWORD *)v19;
      long long v20 = *(_OWORD *)(v19 + 16);
      long long v21 = *(_OWORD *)(v19 + 32);
      long long v22 = *(_OWORD *)(v19 + 48);
      uint64_t v232 = *(void *)(v19 + 64);
      *(_OWORD *)unsigned int v231 = v22;
      long long v230 = v21;
      *(_OWORD *)uint64_t v229 = v20;
      LODWORD(v228[0]) = *((_DWORD *)a1 + 25);
      uint64_t v23 = nullsub_1(v233);
      sub_EADAA8(*(void *)(v23 + 8) - 472, (uint64_t)v228);
    }
    goto LABEL_45;
  }
  if (*((void *)a1 + 1) != *((void *)a1 + 2))
  {
    int v24 = 0;
    unsigned int v25 = *a1;
    if (v25 > 0xD)
    {
      BOOL v27 = 0;
      LOBYTE(v288) = 1;
      if (*((void *)a1 + 5) == -1)
      {
LABEL_31:
        if (sub_EA80FC((char **)v233))
        {
          sub_439014((uint64_t)v213, (uint64_t *)a1 + 1, (uint64_t)(a1 + 104), *((void *)a1 + 26), v24, 0, v8, (uint64_t)v219);
          sub_CA09B8((uint64_t)v233, (uint64_t)v219);
          sub_443A30((uint64_t)v219);
        }
        int v246 = *((_DWORD *)a1 + 8);
        goto LABEL_45;
      }
    }
    else
    {
      int v26 = 1 << v25;
      BOOL v27 = 0;
      if ((v26 & 0x2A86) != 0)
      {
        BOOL v27 = *((void *)a1 + 26) != 0x7FFFFFFFFFFFFFFFLL;
        int v24 = 1;
      }
      LOBYTE(v288) = 1;
      if (*((void *)a1 + 5) == -1) {
        goto LABEL_31;
      }
    }
    if (!v27)
    {
      sub_435BAC(v219);
      sub_CA09B8((uint64_t)v233, (uint64_t)v219);
      sub_443A30((uint64_t)v219);
    }
    goto LABEL_31;
  }
  if (sub_CA0C28(*((void *)a1 + 33)))
  {
    if (!*(unsigned char *)(v9 + 128))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    sub_491B44(v9, v228);
    sub_43C748((uint64_t)v213, (uint64_t *)v228, (uint64_t)(a1 + 104), (uint64_t)v219);
    sub_CA09B8((uint64_t)v233, (uint64_t)v219);
    sub_443A30((uint64_t)v219);
    uint64_t v113 = *((void *)a1 + 27);
    uint64_t v114 = *((void *)a1 + 28);
    if (v113 != v114 && 0xF0F0F0F0F0F0F0F1 * ((v114 - v113) >> 3) != sub_EA8440(v233))
    {
      uint64_t v116 = *((void *)a1 + 27);
      uint64_t v115 = *((void *)a1 + 28);
      if (0xF0F0F0F0F0F0F0F1 * ((v115 - v116) >> 3) > sub_EA8440(v233))
      {
        v228[0] = dword_8 + 3;
        v228[1] = &off_2439090;
        sub_3E7814(v219, (__n128 *)v228);
        *(unsigned char *)a2 = 0;
        __n128 v117 = v219[1];
        *(__n128 *)(a2 + 8) = v219[0];
        *(__n128 *)(a2 + 24) = v117;
        *(void *)(a2 + 40) = v219[2].n128_u64[0];
        memset(&v219[1], 0, 24);
        *(_DWORD *)(a2 + 48) = v219[2].n128_u32[2];
        sub_C7E3C8((uint64_t)v219);
        sub_443A30((uint64_t)v233);
        if (!v241[0]) {
          goto LABEL_304;
        }
        goto LABEL_254;
      }
      int v171 = (uint64_t *)nullsub_1(v233);
      unint64_t v172 = sub_EA8440(v233) + 0xF0F0F0F0F0F0F0FLL * ((uint64_t)(*((void *)a1 + 28) - *((void *)a1 + 27)) >> 3);
      sub_CA0CD8((uint64_t)v171, *v171, *v171 + 472 * v172);
      sub_CA0D90((uint64_t)v237, *(uint64_t *)&v237[0], *(void *)&v237[0] + 24 * v172);
    }
  }
  else
  {
    if (*((void *)a1 + 6) == *((void *)a1 + 7))
    {
      __p[0] = dword_8 + 3;
      __p[1] = &off_2439090;
      sub_3E7814((__n128 *)v228, (__n128 *)__p);
      v219[0].n128_u8[0] = 0;
      *(__n128 *)((char *)v219 + 8) = *(__n128 *)v228;
      *(__n128 *)((char *)&v219[1] + 8) = *(__n128 *)v229;
      v219[2].n128_u64[1] = v230;
      v229[0] = 0;
      v229[1] = 0;
      *(void *)&long long v230 = 0;
      LODWORD(v220) = DWORD2(v230);
      sub_CA35BC((uint64_t)v241, (unsigned __int8 *)v219);
      if (v219[0].n128_u8[0])
      {
        sub_CA60E4((uint64_t)&v219[0].n128_i64[1]);
      }
      else
      {
        unint64_t v173 = v219[1].n128_u64[1];
        if (v219[1].n128_u64[1])
        {
          unint64_t v174 = v219[2].n128_u64[0];
          uint64_t v175 = (void *)v219[1].n128_u64[1];
          if (v219[2].n128_u64[0] != v219[1].n128_u64[1])
          {
            do
            {
              if (*(char *)(v174 - 1) < 0) {
                operator delete(*(void **)(v174 - 24));
              }
              v174 -= 32;
            }
            while (v174 != v173);
            uint64_t v175 = (void *)v219[1].n128_u64[1];
          }
          v219[2].n128_u64[0] = v173;
          operator delete(v175);
        }
      }
      unint64_t v176 = (void **)v229[0];
      if (v229[0])
      {
        unint64_t v177 = (void **)v229[1];
        uint64_t v131 = v229[0];
        if (v229[1] != v229[0])
        {
          do
          {
            if (*((char *)v177 - 1) < 0) {
              operator delete(*(v177 - 3));
            }
            v177 -= 4;
          }
          while (v177 != v176);
          uint64_t v131 = v229[0];
        }
        v229[1] = v176;
LABEL_252:
        operator delete(v131);
      }
LABEL_253:
      sub_CA6580(a2, (uint64_t)v241);
      sub_443A30((uint64_t)v233);
      if (v241[0]) {
        goto LABEL_254;
      }
      goto LABEL_304;
    }
    sub_438244();
    sub_CA09B8((uint64_t)v233, (uint64_t)v219);
    sub_443A30((uint64_t)v219);
  }
LABEL_45:
  BOOL v31 = (uint64_t *)sub_37D0C0(*((void *)a1 + 34));
  v201.n128_u8[7] = 15;
  strcpy((char *)__p, "RequestWithPath");
  uint64_t v32 = *v31;
  if (*v31)
  {
    sub_443118((uint64_t)v219, v32);
  }
  else
  {
    unint64_t v210 = 0;
    unint64_t v211 = 0;
    uint64_t v212 = 0;
    uint64_t v232 = 0;
    *(_OWORD *)unsigned int v231 = 0u;
    long long v230 = 0u;
    *(_OWORD *)uint64_t v229 = 0u;
    *(_OWORD *)unint64_t v228 = 0u;
    char v209 = 0;
    LOBYTE(v208) = 0;
    uint64_t v206 = 0;
    uint64_t v207 = 0;
    uint64_t v204 = 0;
    long long v205 = 0;
    sub_29DC44((uint64_t)v219, (long long **)&v210, (long long *)v228, &v208, &v206, 0, (uint64_t)&v204, 1);
  }
  sub_710A8(1, (uint64_t)__p, (uint64_t)v219);
  sub_29E11C((uint64_t)v219);
  if (v32)
  {
LABEL_49:
    if (v201.n128_i8[7] < 0) {
      goto LABEL_50;
    }
    goto LABEL_51;
  }
  int v51 = v205;
  if (v205 && !atomic_fetch_add(&v205->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
    char v52 = v207;
    if (!v207)
    {
LABEL_88:
      if ((v209 & 0x80000000) == 0) {
        goto LABEL_89;
      }
      goto LABEL_217;
    }
  }
  else
  {
    char v52 = v207;
    if (!v207) {
      goto LABEL_88;
    }
  }
  if (atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_88;
  }
  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
  std::__shared_weak_count::__release_weak(v52);
  if ((v209 & 0x80000000) == 0)
  {
LABEL_89:
    if ((SHIBYTE(v232) & 0x80000000) == 0) {
      goto LABEL_90;
    }
    goto LABEL_218;
  }
LABEL_217:
  operator delete((void *)v208);
  if ((SHIBYTE(v232) & 0x80000000) == 0)
  {
LABEL_90:
    if ((SHIBYTE(v230) & 0x80000000) == 0) {
      goto LABEL_91;
    }
    goto LABEL_219;
  }
LABEL_218:
  operator delete(v231[0]);
  if ((SHIBYTE(v230) & 0x80000000) == 0)
  {
LABEL_91:
    if ((SHIBYTE(v229[0]) & 0x80000000) == 0) {
      goto LABEL_92;
    }
    goto LABEL_220;
  }
LABEL_219:
  operator delete(v229[1]);
  if ((SHIBYTE(v229[0]) & 0x80000000) == 0)
  {
LABEL_92:
    uint64_t v53 = (void **)v210;
    if (!v210) {
      goto LABEL_49;
    }
    goto LABEL_221;
  }
LABEL_220:
  operator delete(v228[0]);
  uint64_t v53 = (void **)v210;
  if (!v210) {
    goto LABEL_49;
  }
LABEL_221:
  uint64_t v118 = v211;
  if (v211 == v53)
  {
    unint64_t v211 = v53;
    operator delete(v53);
    if (v201.n128_i8[7] < 0) {
      goto LABEL_50;
    }
    goto LABEL_51;
  }
  do
  {
    while (*((char *)v118 - 1) < 0)
    {
      operator delete(*(v118 - 3));
      if (*((char *)v118 - 25) < 0) {
        goto LABEL_228;
      }
LABEL_225:
      v118 -= 6;
      if (v118 == v53) {
        goto LABEL_229;
      }
    }
    if ((*((char *)v118 - 25) & 0x80000000) == 0) {
      goto LABEL_225;
    }
LABEL_228:
    operator delete(*(v118 - 6));
    v118 -= 6;
  }
  while (v118 != v53);
LABEL_229:
  unint64_t v211 = v53;
  operator delete(v210);
  if (v201.n128_i8[7] < 0) {
LABEL_50:
  }
    operator delete(__p[0]);
LABEL_51:
  if (sub_EA80FC((char **)v233))
  {
    v198.n128_u64[0] = 11;
    v198.n128_u64[1] = (unint64_t)&off_2439090;
    sub_3E7814((__n128 *)__p, &v198);
    v219[0].n128_u8[0] = 0;
    *(__n128 *)((char *)v219 + 8) = *(__n128 *)__p;
    *(__n128 *)((char *)&v219[1] + 8) = v201;
    v219[2].n128_u64[1] = v202;
    __n128 v201 = 0uLL;
    unint64_t v202 = 0;
    LODWORD(v220) = v203;
    sub_CA35BC((uint64_t)v241, (unsigned __int8 *)v219);
    if (v219[0].n128_u8[0])
    {
      sub_CA60E4((uint64_t)&v219[0].n128_i64[1]);
    }
    else
    {
      unint64_t v54 = v219[1].n128_u64[1];
      if (v219[1].n128_u64[1])
      {
        unint64_t v55 = v219[2].n128_u64[0];
        uint64_t v56 = (void *)v219[1].n128_u64[1];
        if (v219[2].n128_u64[0] != v219[1].n128_u64[1])
        {
          do
          {
            if (*(char *)(v55 - 1) < 0) {
              operator delete(*(void **)(v55 - 24));
            }
            v55 -= 32;
          }
          while (v55 != v54);
          uint64_t v56 = (void *)v219[1].n128_u64[1];
        }
        v219[2].n128_u64[0] = v54;
        operator delete(v56);
      }
    }
    unint64_t v129 = v201.n128_u64[0];
    if (v201.n128_u64[0])
    {
      unint64_t v130 = v201.n128_u64[1];
      uint64_t v131 = (void *)v201.n128_u64[0];
      if (v201.n128_u64[1] != v201.n128_u64[0])
      {
        do
        {
          if (*(char *)(v130 - 1) < 0) {
            operator delete(*(void **)(v130 - 24));
          }
          v130 -= 32;
        }
        while (v130 != v129);
        uint64_t v131 = (void *)v201.n128_u64[0];
      }
      v201.n128_u64[1] = v129;
      goto LABEL_252;
    }
    goto LABEL_253;
  }
  if (*(unsigned char *)(v9 + 128))
  {
    int v33 = sub_491B8C(v9);
    if (!*(unsigned char *)(v9 + 128))
    {
      unsigned int v180 = __cxa_allocate_exception(8uLL);
      *unsigned int v180 = &off_2439078;
    }
    unsigned int v193 = sub_491B68(v9) + v33;
    if (sub_EA8440(v233) > v193 && !v240)
    {
      uint64_t v34 = sub_69510();
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)v219);
        sub_188FC78(v219, (uint64_t)"Got a request where the session_state contains fewer legs (", 59);
        unint64_t v35 = (void *)std::ostream::operator<<();
        sub_188FC78(v35, (uint64_t)") than the number of legs decoded (", 35);
        sub_EA8440(v233);
        double v36 = (void *)std::ostream::operator<<();
        double v37 = sub_188FC78(v36, (uint64_t)"): ", 3);
        v198.n128_u32[0] = sub_69124((uint64_t)v34);
        sub_677F0((unsigned int *)&v198, (uint64_t)__p);
        if (v201.n128_i8[7] >= 0) {
          uint64_t v38 = __p;
        }
        else {
          uint64_t v38 = (void **)__p[0];
        }
        if (v201.n128_i8[7] >= 0) {
          uint64_t v39 = v201.n128_u8[7];
        }
        else {
          uint64_t v39 = (uint64_t)__p[1];
        }
        uint64_t v40 = sub_188FC78(v37, (uint64_t)v38, v39);
        long long v41 = sub_188FC78(v40, (uint64_t)" request: ", 10);
        uint64_t v42 = sub_68EE4((uint64_t)v34);
        int v43 = *(char *)(v42 + 23);
        if (v43 >= 0) {
          uint64_t v44 = v42;
        }
        else {
          uint64_t v44 = *(void *)v42;
        }
        if (v43 >= 0) {
          uint64_t v45 = *(unsigned __int8 *)(v42 + 23);
        }
        else {
          uint64_t v45 = *(void *)(v42 + 8);
        }
        sub_188FC78(v41, v44, v45);
        if (v201.n128_i8[7] < 0) {
          operator delete(__p[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        if (v201.n128_i8[7] < 0) {
          operator delete(__p[0]);
        }
        if (v224 < 0) {
          operator delete(v222);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
    }
    uint64_t v46 = *((void *)a1 + 34);
    v219[1].n128_u8[7] = 17;
    strcpy((char *)v219, "PathDecoderModule");
    __p[0] = 0;
    __p[1] = 0;
    v201.n128_u64[0] = 0;
    uint64_t v47 = sub_374CDC(v46, (uint64_t)v219, (uint64_t *)__p);
    uint64_t v48 = (void **)__p[0];
    if (__p[0])
    {
      long long v49 = (void **)__p[1];
      int v50 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*((char *)v49 - 1) < 0) {
            operator delete(*(v49 - 3));
          }
          v49 -= 3;
        }
        while (v49 != v48);
        int v50 = __p[0];
      }
      __p[1] = v48;
      operator delete(v50);
    }
    if (v219[1].n128_i8[7] < 0) {
      operator delete((void *)v219[0].n128_u64[0]);
    }
    v219[0].n128_u64[0] = (unint64_t)operator new(0x38uLL);
    *(__n128 *)((char *)v219 + 8) = (__n128)xmmword_20B9AD0;
    strcpy((char *)v219[0].n128_u64[0], "max_num_fully_traversed_legs_preserved_in_session_state");
    int v57 = sub_31AC04(v47, (uint64_t)v219);
    if (v219[1].n128_i8[7] < 0) {
      operator delete((void *)v219[0].n128_u64[0]);
    }
    unsigned int v58 = sub_EA8440(v233);
    if (v193 >= v58) {
      int v59 = v193 - v58;
    }
    else {
      int v59 = 0;
    }
    int v191 = v59;
    unsigned int v192 = v57 + v58;
    if (v193 >= v57 + v58) {
      unsigned int v60 = v193 - (v57 + v58);
    }
    else {
      unsigned int v60 = 0;
    }
    sub_484EDC(*((void *)a1 + 33), (uint64_t)v219);
    sub_CA0FF4((uint64_t)v249, (uint64_t)v219);
    sub_4BCC2C((uint64_t)v219);
    __p[0] = 0;
    __p[1] = 0;
    v201.n128_u64[0] = 0;
    unint64_t v61 = sub_EA8440(v233);
    sub_493EC4((char **)__p, v61);
    if (!*(unsigned char *)(v9 + 128))
    {
      uint64_t v181 = __cxa_allocate_exception(8uLL);
      *uint64_t v181 = &off_2439078;
    }
    sub_491B5C(v9, v219);
    if (!*(unsigned char *)(v9 + 128))
    {
      char v182 = __cxa_allocate_exception(8uLL);
      void *v182 = &off_2439078;
    }
    unint64_t v62 = v219[0].n128_u64[0];
    sub_491B5C(v9, &v198);
    unsigned int v190 = v60;
    long long v63 = (uint64_t *)(v62 + 144 * v60);
    unint64_t v64 = v198.n128_u64[1];
    if (v63 != (uint64_t *)v198.n128_u64[1])
    {
      __n128 v65 = (char *)__p[1];
      do
      {
        if ((unint64_t)v65 >= v201.n128_u64[0])
        {
          __n128 v65 = (char *)sub_CA7184((uint64_t *)__p, v63);
        }
        else
        {
          sub_48990C((uint64_t)v65, v63);
          v65 += 144;
        }
        __p[1] = v65;
        v63 += 18;
      }
      while (v63 != (uint64_t *)v64);
    }
    if (!*(unsigned char *)(v9 + 128)) {
      goto LABEL_348;
    }
    int v189 = sub_4F44((unsigned int *)v9);
    if (!*(unsigned char *)(v9 + 128)
      || (char v66 = sub_491B10(v9), !*(unsigned char *)(v9 + 128))
      || (char v67 = v66, v188 = sub_40A44C(v9), !*(unsigned char *)(v9 + 128))
      || (char v187 = sub_491B18(v9), !*(unsigned char *)(v9 + 128))
      || (char v68 = sub_491B20(v9), !*(unsigned char *)(v9 + 128))
      || (char v69 = v68, v70 = sub_40AB24(v9), !*(unsigned char *)(v9 + 128)))
    {
LABEL_348:
      unint64_t v178 = __cxa_allocate_exception(8uLL);
      *unint64_t v178 = &off_2439078;
    }
    int v71 = v70;
    int v72 = sub_491B28(v9);
    if (!*(unsigned char *)(v9 + 128))
    {
      char v183 = __cxa_allocate_exception(8uLL);
      *char v183 = &off_2439078;
    }
    int v73 = v72;
    sub_46DD68(v9, &v197);
    if (!*(unsigned char *)(v9 + 128))
    {
      int v184 = __cxa_allocate_exception(8uLL);
      *int v184 = &off_2439078;
    }
    long long v74 = (const void *)v197.n128_u64[0];
    sub_46DD68(v9, &v196);
    unint64_t v199 = 0;
    __n128 v198 = 0uLL;
    uint64_t v75 = v196.n128_u64[1] - (void)v74;
    if ((const void *)v196.n128_u64[1] != v74)
    {
      if (v75 < 0) {
        sub_2E00();
      }
      v198.n128_u64[0] = (unint64_t)operator new(v196.n128_u64[1] - (void)v74);
      v198.n128_u64[1] = v198.n128_u64[0];
      unint64_t v76 = v198.n128_u64[0] + 16 * (v75 >> 4);
      unint64_t v199 = v76;
      memmove((void *)v198.n128_u64[0], v74, v75 - 4);
      v198.n128_u64[1] = v76;
    }
    if (v193 > v192)
    {
      *(void *)&v195[0] = 0x8000000080000000;
      *(long long *)((char *)v195 + 8) = xmmword_20E8160;
      DWORD2(v195[0]) = 0x7FFFFFFF;
      goto LABEL_137;
    }
    if (!*(unsigned char *)(v9 + 128)) {
      goto LABEL_356;
    }
    uint64_t v77 = sub_50BE8(v9);
    long long v78 = *(_OWORD *)v77;
    *(void *)&v195[1] = *(void *)(v77 + 16);
    v195[0] = v78;
LABEL_137:
    if (!*(unsigned char *)(v9 + 128))
    {
LABEL_356:
      uint64_t v179 = __cxa_allocate_exception(8uLL);
      *uint64_t v179 = &off_2439078;
    }
    uint64_t v79 = sub_68EAC(v9);
    sub_491ADC((uint64_t)v219, v189, v67, v188, v187, v69, v71, v73, v191 - v190, (uint64_t)&v198, v195, (uint64_t *)__p, v79);
    sub_485264((uint64_t)v249, (long long *)v219);
    if (v225)
    {
      unint64_t v226 = v225;
      operator delete(v225);
    }
    long long v80 = v222;
    if (v222)
    {
      uint64_t v81 = (uint64_t)v223;
      uint64_t v82 = v222;
      if (v223 != v222)
      {
        do
          uint64_t v81 = sub_489CF4(v81 - 144);
        while ((void *)v81 != v80);
        uint64_t v82 = v222;
      }
      uint64_t v223 = v80;
      operator delete(v82);
    }
    if (v219[1].n128_u64[1])
    {
      v219[2].n128_u64[0] = v219[1].n128_u64[1];
      operator delete((void *)v219[1].n128_u64[1]);
    }
    if (v198.n128_u64[0])
    {
      v198.n128_u64[1] = v198.n128_u64[0];
      operator delete((void *)v198.n128_u64[0]);
    }
    uint64_t v83 = __p[0];
    if (__p[0])
    {
      long long v84 = __p[1];
      long long v85 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          long long v84 = (void *)sub_489CF4((uint64_t)v84 - 144);
        while (v84 != v83);
        long long v85 = __p[0];
      }
      __p[1] = v83;
      operator delete(v85);
    }
  }
  else
  {
    sub_5B98C0((uint64_t)v249, *((void *)a1 + 33));
  }
  unint64_t v86 = v242.n128_u64[0];
  if (v242.n128_u64[0])
  {
    uint64_t v87 = v242.n128_i64[1];
    long long v88 = (void *)v242.n128_u64[0];
    if (v242.n128_u64[1] != v242.n128_u64[0])
    {
      do
        uint64_t v87 = sub_405F44(v87 - 472);
      while (v87 != v86);
      long long v88 = (void *)v242.n128_u64[0];
    }
    v242.n128_u64[1] = v86;
    operator delete(v88);
  }
  __n128 v242 = *(__n128 *)v233;
  int v243 = v234;
  uint64_t v234 = 0;
  v233[1] = 0;
  v233[0] = 0;
  if (SHIBYTE(v245) < 0) {
    operator delete((void *)v244);
  }
  long long v244 = v235;
  uint64_t v245 = v236;
  HIBYTE(v236) = 0;
  LOBYTE(v235) = 0;
  unsigned int v89 = (char *)v247[0];
  if (v247[0])
  {
    int v90 = v247[1];
    uint64_t v91 = v247[0];
    if (v247[1] != v247[0])
    {
      unint64_t v92 = (char *)v247[1];
      do
      {
        unint64_t v94 = (void *)*((void *)v92 - 3);
        v92 -= 24;
        unint64_t v93 = v94;
        if (v94)
        {
          *(v90 - 2) = v93;
          operator delete(v93);
        }
        int v90 = v92;
      }
      while (v92 != v89);
      uint64_t v91 = v247[0];
    }
    v247[1] = v89;
    operator delete(v91);
  }
  *(_OWORD *)long long v247 = v237[0];
  v248[0] = *(void **)&v237[1];
  memset(v237, 0, 24);
  unint64_t v95 = (char *)v248[1];
  if (v248[1])
  {
    unint64_t v96 = (char *)v248[2];
    uint64_t v97 = v248[1];
    if (v248[2] != v248[1])
    {
      do
      {
        uint64_t v98 = (void *)*((void *)v96 - 4);
        if (v98)
        {
          *((void *)v96 - 3) = v98;
          operator delete(v98);
        }
        unint64_t v99 = (void *)*((void *)v96 - 7);
        if (v99)
        {
          *((void *)v96 - 6) = v99;
          operator delete(v99);
        }
        uint64_t v100 = (void *)*((void *)v96 - 11);
        if (v100)
        {
          *((void *)v96 - 10) = v100;
          operator delete(v100);
        }
        v96 -= 160;
      }
      while (v96 != v95);
      uint64_t v97 = v248[1];
    }
    v248[2] = v95;
    operator delete(v97);
  }
  *(_OWORD *)&v248[1] = *(_OWORD *)((char *)&v237[1] + 8);
  v248[3] = *((void **)&v237[2] + 1);
  memset((char *)&v237[1] + 8, 0, 24);
  if (v240)
  {
    if (v286)
    {
      if ((void)v284)
      {
        *((void *)&v284 + 1) = v284;
        operator delete((void *)v284);
      }
      long long v284 = v238;
      uint64_t v285 = v239;
      uint64_t v239 = 0;
      long long v238 = 0uLL;
    }
    else
    {
      long long v284 = v238;
      uint64_t v285 = v239;
      uint64_t v239 = 0;
      long long v238 = 0uLL;
      char v286 = 1;
    }
  }
  else if (v286)
  {
    if ((void)v284)
    {
      *((void *)&v284 + 1) = v284;
      operator delete((void *)v284);
    }
    char v286 = 0;
  }
  sub_443A30((uint64_t)v233);
  if ((*((_DWORD *)a1 + 1) - 1) > 1 || !sub_CA3684(&v242))
  {
    uint64_t v102 = *((void *)a1 + 27);
    uint64_t v103 = *((void *)a1 + 28);
    if (v102 == v103) {
      goto LABEL_275;
    }
    unint64_t v104 = sub_EA8440(&v242);
    uint64_t v105 = sub_40EFE8((uint64_t)&v242);
    uint64_t v106 = *((void *)a1 + 27);
    uint64_t v107 = sub_52058((uint64_t)&v242);
    if (v105 != v107)
    {
      uint64_t v108 = (long long *)(v106 + 136 * (0xF0F0F0F0F0F0F0F1 * ((v103 - v102) >> 3) - v104));
      do
      {
        sub_3B1DC8((uint64_t)v219, v108);
        long long v227 = xmmword_20F0420;
        sub_EAD948(v105, (long long *)v219);
        if (v221)
        {
          uint64_t v222 = v221;
          operator delete(v221);
        }
        if (v219[2].n128_u64[1])
        {
          *(void *)&long long v220 = v219[2].n128_u64[1];
          operator delete((void *)v219[2].n128_u64[1]);
        }
        v105 += 472;
        uint64_t v108 = (long long *)((char *)v108 + 136);
      }
      while (v105 != v107);
    }
    uint64_t v109 = sub_40EFE8((uint64_t)&v242);
    uint64_t v110 = sub_EADA60(v109);
    uint64_t v111 = v110;
    int v112 = *(_DWORD *)(v110 + 112);
    if (v112 == -1)
    {
LABEL_275:
      if (v286)
      {
        uint64_t v134 = (void *)nullsub_1(&v242);
        uint64_t v135 = v134[1] - *v134;
        if (v135)
        {
          uint64_t v136 = 0;
          uint64_t v137 = 0;
          uint64_t v138 = v135 / 472;
          do
          {
            uint64_t v139 = *v134 + v136;
            if (v137) {
              unsigned __int32 v140 = -1;
            }
            else {
              unsigned __int32 v140 = 0;
            }
            v219[0].n128_u32[0] = v140;
            sub_EADD60(v139, v219);
            uint64_t v141 = *v134 + v136;
            if (v137 == -1 - 0x34115B1E5F75270DLL * ((uint64_t)(v134[1] - *v134) >> 3)) {
              unsigned __int32 v142 = 1;
            }
            else {
              unsigned __int32 v142 = -1;
            }
            v219[0].n128_u32[0] = v142;
            sub_EADD6C(v141, v219);
            ++v137;
            v136 += 472;
          }
          while (v138 != v137);
        }
      }
      else
      {
        uint64_t v144 = *((void *)a1 + 30);
        uint64_t v143 = *((void *)a1 + 31);
        unint64_t v145 = sub_EA8440(&v242);
        if (v143 - v144 >= v145 + 1) {
          uint64_t v146 = v143 - v144 - (v145 + 1);
        }
        else {
          uint64_t v146 = 0;
        }
        uint64_t v147 = (void *)nullsub_1(&v242);
        uint64_t v148 = v147[1];
        uint64_t v149 = v148 - *v147;
        if (v148 != *v147)
        {
          int v150 = (void *)nullsub_1(&v242);
          if (v150[1] - *v150 == 472)
          {
            BOOL v151 = 1;
          }
          else
          {
            uint64_t v152 = *((void *)a1 + 30);
            BOOL v151 = v152 != *((void *)a1 + 31) && *(unsigned char *)(v146 + v152 + 1) == 1;
          }
          v219[0].n128_u32[0] = 0;
          uint64_t v153 = (uint64_t *)nullsub_1(&v242);
          sub_EADD60(*v153, v219);
          if (v151)
          {
            uint64_t v154 = *(void *)nullsub_1(&v242);
            LODWORD(v233[0]) = 1;
            sub_EADD6C(v154, v233);
            int v155 = 1;
            if (v149 == 472) {
              goto LABEL_301;
            }
          }
          else
          {
            uint64_t v156 = *(void *)nullsub_1(&v242);
            LODWORD(v233[0]) = -1;
            sub_EADD6C(v156, v233);
            int v155 = 0;
            if (v149 == 472) {
              goto LABEL_301;
            }
          }
          uint64_t v160 = 0;
          uint64_t v161 = v149 / 472 - 1;
          uint64_t v162 = 472;
          do
          {
            uint64_t v163 = *((void *)a1 + 30);
            BOOL v164 = v163 != *((void *)a1 + 31) && *(unsigned __int8 *)(v163 + v146 + v160 + 1) == 1;
            uint64_t v165 = (void *)nullsub_1(&v242);
            if (v160 + 2 == 0xCBEEA4E1A08AD8F3 * ((uint64_t)(v165[1] - *v165) >> 3))
            {
              BOOL v166 = 1;
            }
            else
            {
              uint64_t v167 = *((void *)a1 + 30);
              BOOL v166 = v167 != *((void *)a1 + 31) && *(unsigned __int8 *)(v167 + v146 + v160 + 2) == 1;
            }
            if (v164) {
              unsigned __int32 v168 = v155;
            }
            else {
              unsigned __int32 v168 = -1;
            }
            v219[0].n128_u32[0] = v168;
            unint64_t v169 = (void *)nullsub_1(&v242);
            sub_EADD60(*v169 + v162, v219);
            if (v166)
            {
              ++v155;
              uint64_t v170 = *(void *)nullsub_1(&v242) + v162;
              LODWORD(v233[0]) = v155;
            }
            else
            {
              uint64_t v170 = *(void *)nullsub_1(&v242) + v162;
              LODWORD(v233[0]) = -1;
            }
            sub_EADD6C(v170, v233);
            ++v160;
            v162 += 472;
          }
          while (v161 != v160);
        }
      }
LABEL_301:
      sub_1083110((uint64_t)v219, *((void **)a1 + 34));
      sub_1083608((uint64_t)v219, (uint64_t *)&v242);
      if (v219[2].n128_u64[1])
      {
        *(void *)&long long v220 = v219[2].n128_u64[1];
        operator delete((void *)v219[2].n128_u64[1]);
      }
      unint64_t v287 = vcvtad_u64_f64(sub_72688((uint64_t)v214));
      sub_CA6580(a2, (uint64_t)v241);
      if (v241[0]) {
        goto LABEL_254;
      }
LABEL_304:
      uint64_t v157 = (void **)v243;
      if (v243)
      {
        uint64_t v158 = (void **)v244;
        BOOL v159 = v243;
        if ((void *)v244 != v243)
        {
          do
          {
            if (*((char *)v158 - 1) < 0) {
              operator delete(*(v158 - 3));
            }
            v158 -= 4;
          }
          while (v158 != v157);
          BOOL v159 = v243;
        }
        *(void *)&long long v244 = v157;
        operator delete(v159);
      }
      return;
    }
    if (v112 == 1)
    {
      if (*(void *)(v110 + 104) > 0xFFFFFFFEFFFFFFFFLL || !*(void *)(v110 + 104)) {
        goto LABEL_275;
      }
    }
    else
    {
      if (v112)
      {
        int v186 = __cxa_allocate_exception(8uLL);
        *int v186 = &off_23FDF58;
      }
      if (*(void *)(v110 + 104) == -1) {
        goto LABEL_275;
      }
    }
    uint64_t v119 = sub_376F8C(*((void **)a1 + 34));
    uint64_t v120 = (uint64_t *)v119;
    unsigned int v218 = *(_DWORD *)(v111 + 112);
    if (v218 <= 1) {
      uint64_t v217 = *(void *)(v111 + 104);
    }
    uint64_t v121 = sub_28CF4C(v119, &v217);
    *((void *)v248[1] + 2) = v121;
    unsigned int v216 = *(_DWORD *)(v111 + 112);
    if (v216 <= 1) {
      uint64_t v215 = *(void *)(v111 + 104);
    }
    unint64_t v122 = sub_28CDA4(v120, (uint64_t)&v215);
    unint64_t v123 = sub_28E018((uint64_t)v120, v122);
    unint64_t v124 = HIDWORD(v123) - *((unsigned int *)a1 + 27);
    unint64_t v125 = v123 - (unint64_t)*((unsigned int *)a1 + 26);
    double v126 = sqrt((double)(v125 * v125 + v124 * v124)) / 100.0 * 100.0;
    if (v126 >= 0.0)
    {
      double v127 = v126;
      if (v126 >= 4.50359963e15) {
        goto LABEL_260;
      }
      uint64_t v128 = (uint64_t)(v126 + v126) + 1;
    }
    else
    {
      double v127 = v126;
      if (v126 <= -4.50359963e15) {
        goto LABEL_260;
      }
      uint64_t v128 = (uint64_t)(v126 + v126);
      if (v128 >= 1) {
        --v128;
      }
    }
    double v127 = (double)(v128 >> 1);
LABEL_260:
    if (v127 >= 9.22337204e18)
    {
LABEL_271:
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)v219);
        sub_188FC78(v219, (uint64_t)"Distance between user location and the user route's origin charging station is approximately ", 93);
        uint64_t v133 = (void *)std::ostream::operator<<();
        sub_188FC78(v133, (uint64_t)" meters.", 8);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v233, 1u);
        if (SHIBYTE(v234) < 0) {
          operator delete(v233[0]);
        }
        sub_111ECAC((uint64_t)v219);
      }
      goto LABEL_275;
    }
    if (v126 >= 0.0)
    {
      if (v126 >= 4.50359963e15) {
        goto LABEL_270;
      }
      uint64_t v132 = (uint64_t)(v126 + v126) + 1;
    }
    else
    {
      if (v126 <= -4.50359963e15) {
        goto LABEL_270;
      }
      uint64_t v132 = (uint64_t)(v126 + v126);
      if (v132 >= 1) {
        --v132;
      }
    }
    double v126 = (double)(v132 >> 1);
LABEL_270:
    if ((uint64_t)v126 < 5001) {
      goto LABEL_275;
    }
    goto LABEL_271;
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v219);
    sub_188FC78(v219, (uint64_t)"Decoded path contains at least one leg with an invalid DRIVING to WALKING mode transition.", 90);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v233, 3u);
    if (SHIBYTE(v234) < 0) {
      operator delete(v233[0]);
    }
    if (v224 < 0) {
      operator delete(v222);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  v233[0] = dword_8 + 3;
  v233[1] = &off_2439090;
  sub_3E7814(v219, (__n128 *)v233);
  *(unsigned char *)a2 = 0;
  __n128 v101 = v219[1];
  *(__n128 *)(a2 + 8) = v219[0];
  *(__n128 *)(a2 + 24) = v101;
  *(void *)(a2 + 40) = v219[2].n128_u64[0];
  *(_DWORD *)(a2 + 48) = v219[2].n128_u32[2];
  if (!v241[0]) {
    goto LABEL_304;
  }
LABEL_254:
  sub_CA60E4((uint64_t)&v242);
}

void sub_CA30F4(_Unwind_Exception *a1)
{
}

uint64_t sub_CA35BC(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  if (*(unsigned char *)a1)
  {
    if (*a2)
    {
      sub_CA5DB0(a1 + 8, (uint64_t)(a2 + 8));
LABEL_4:
      *(unsigned char *)a1 = *a2;
      return a1;
    }
    sub_CA60E4(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  else
  {
    int v6 = (_OWORD *)(a1 + 8);
    BOOL v7 = a2 + 8;
    if (v4)
    {
      sub_CA5FA0(a1, (uint64_t)v6, a1 + 8, (uint64_t)v7);
      goto LABEL_4;
    }
    _OWORD *v6 = *v7;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  *(unsigned char *)a1 = *a2;
  return a1;
}

BOOL sub_CA3684(__n128 *a1)
{
  sub_45E958(a1, &v17);
  unint64_t v2 = v17.n128_u64[1];
  uint64_t v1 = (void *)v17.n128_u64[0];
  if (v17.n128_u64[0] == v17.n128_u64[1]) {
    return 0;
  }
  do
  {
    sub_EB00A0(v1, (uint64_t)&v18);
    int v6 = v18;
    if (v18 != v19)
    {
      int v6 = v18;
      while (1)
      {
        BOOL v7 = (char *)*v6;
        int v8 = (unsigned __int16 *)((char *)*v6 - **v6);
        unsigned int v9 = *v8;
        if (*((unsigned char *)v6 + 38))
        {
          if (v9 < 0xB) {
            break;
          }
          unsigned int v10 = v8[5];
          if (!v10 || (*(_DWORD *)&v7[v10] & 2) == 0) {
            break;
          }
        }
        else
        {
          if (v9 < 0xB) {
            break;
          }
          unsigned int v11 = v8[5];
          if (!v11 || (*(_DWORD *)&v7[v11] & 1) == 0) {
            break;
          }
        }
        v6 += 5;
        if (v6 == v19) {
          goto LABEL_4;
        }
      }
    }
    if (v6 == v19)
    {
LABEL_4:
      BOOL v3 = 0;
      if (v18)
      {
LABEL_5:
        uint64_t v19 = v18;
        operator delete(v18);
      }
    }
    else
    {
      while (1)
      {
        v6 += 5;
        if (v6 == v19) {
          break;
        }
        uint64_t v12 = (char *)*v6;
        uint64_t v13 = (unsigned __int16 *)((char *)*v6 - **v6);
        unsigned int v14 = *v13;
        if (*((unsigned char *)v6 + 38))
        {
          if (v14 >= 0xB)
          {
            unsigned int v15 = v13[5];
            if (v15)
            {
              if ((*(_DWORD *)&v12[v15] & 2) != 0) {
                goto LABEL_31;
              }
            }
          }
        }
        else if (v14 >= 0xB)
        {
          unsigned int v16 = v13[5];
          if (v16)
          {
            if (*(_DWORD *)&v12[v16])
            {
LABEL_31:
              BOOL v3 = v6 != v19;
              if (v18) {
                goto LABEL_5;
              }
              goto LABEL_6;
            }
          }
        }
      }
      BOOL v3 = 0;
      if (v18) {
        goto LABEL_5;
      }
    }
LABEL_6:
    v1 += 59;
    int v5 = v1 == (void *)v2 || v3;
  }
  while (v5 != 1);
  return v3;
}

void sub_CA3808(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v212);
  v239[0] = 1;
  bzero(&v240, 0x360uLL);
  sub_47E0E4(&v240);
  int v244 = -1;
  v247[128] = 0;
  v247[264] = 0;
  long long v258 = 0u;
  long long v259 = 0u;
  long long v260 = 0u;
  *(void *)((char *)v257 + 5) = 0;
  v257[0] = 0;
  *(_OWORD *)uint64_t v245 = 0u;
  memset(v246, 0, sizeof(v246));
  long long v248 = 0u;
  long long v249 = 0u;
  long long v250 = 0u;
  long long v251 = 0u;
  long long v252 = 0u;
  long long v253 = 0u;
  long long v254 = 0u;
  long long v255 = 0u;
  int v256 = 0;
  uint64_t v261 = 0x3FF0000000000000;
  uint64_t v263 = 0;
  uint64_t v262 = 0;
  uint64_t v264 = 0;
  char v265 = 5;
  long long v268 = 0u;
  long long v267 = 0u;
  long long v266 = 0u;
  int v269 = 0x7FFFFFFF;
  uint64_t v274 = 0;
  uint64_t v275 = 0;
  long long v272 = 0u;
  memset(v273, 0, sizeof(v273));
  long long v270 = 0u;
  long long v271 = 0u;
  uint64_t v276 = -1;
  int v277 = 0x7FFFFFFF;
  uint64_t v278 = 0;
  uint64_t v279 = -1;
  int v280 = -1;
  char v281 = 0;
  char v284 = 0;
  unint64_t v285 = 0;
  __int16 v286 = 0;
  int v3 = *a1;
  char v5 = v3 == 8 || v3 == 4;
  sub_43D76C((uint64_t)v211, *((void *)a1 + 34), v5);
  int v6 = sub_486A5C(*((void *)a1 + 33));
  BOOL v8 = v6 != 2 && v6 != 5;
  uint64_t v9 = nullsub_1(*((void *)a1 + 33));
  sub_47E0E4(v231);
  char v238 = 0;
  memset(v235, 0, sizeof(v235));
  if (a1[280] && sub_48602C(*((void *)a1 + 33)))
  {
    unsigned int v10 = (long long *)sub_486044(*((void *)a1 + 33));
    sub_4895AC((uint64_t)v217, v10);
    int v244 = sub_4F44((unsigned int *)v217);
    sub_491BD8((uint64_t)v217, (uint64_t)__p);
    sub_43D770((uint64_t)v211, (uint64_t *)__p, (uint64_t)(a1 + 104), *((void *)a1 + 26), 0, 1, v8, (uint64_t)v226);
    sub_CA59AC((uint64_t)v231, (uint64_t)v226);
    sub_4452A8((uint64_t)v226);
    unsigned int v11 = (void **)__p[0];
    if (__p[0])
    {
      uint64_t v12 = (void **)__p[1];
      uint64_t v13 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*((char *)v12 - 1) < 0) {
            operator delete(*(v12 - 3));
          }
          v12 -= 3;
        }
        while (v12 != v11);
        uint64_t v13 = __p[0];
      }
      __p[1] = v11;
      operator delete(v13);
    }
    if (v223)
    {
      char v224 = v223;
      operator delete(v223);
    }
    uint64_t v29 = v220;
    if (v220)
    {
      uint64_t v30 = (uint64_t)v221;
      BOOL v31 = v220;
      if (v221 != v220)
      {
        do
          uint64_t v30 = sub_489CF4(v30 - 144);
        while ((void *)v30 != v29);
        BOOL v31 = v220;
      }
      char v221 = v29;
      operator delete(v31);
    }
    if (v217[1].n128_u64[1])
    {
      v217[2].n128_u64[0] = v217[1].n128_u64[1];
      operator delete((void *)v217[1].n128_u64[1]);
    }
    goto LABEL_45;
  }
  if (*((void *)a1 + 9) != *((void *)a1 + 10))
  {
    sub_435BAC(v217);
    sub_CA59AC((uint64_t)v231, (uint64_t)v217);
    sub_4452A8((uint64_t)v217);
    if (!sub_EA8E90((uint64_t *)v231))
    {
      uint64_t v14 = sub_EA904C((uint64_t *)v231);
      v217[0] = *(__n128 *)v14;
      __n128 v15 = *(__n128 *)(v14 + 16);
      __n128 v16 = *(__n128 *)(v14 + 32);
      long long v17 = *(_OWORD *)(v14 + 48);
      uint64_t v219 = *(void **)(v14 + 64);
      v217[2] = v16;
      long long v218 = v17;
      v217[1] = v15;
      v217[0].n128_u32[0] = *((_DWORD *)a1 + 24);
      uint64_t v18 = (uint64_t *)nullsub_1(v231);
      sub_EB22B4(*v18, (uint64_t)v217);
      uint64_t v19 = sub_EA9054((uint64_t)v231);
      *(_OWORD *)unint64_t v226 = *(_OWORD *)v19;
      long long v20 = *(_OWORD *)(v19 + 16);
      long long v21 = *(_OWORD *)(v19 + 32);
      long long v22 = *(_OWORD *)(v19 + 48);
      uint64_t v230 = *(void *)(v19 + 64);
      *(_OWORD *)uint64_t v229 = v22;
      long long v228 = v21;
      *(_OWORD *)long long v227 = v20;
      LODWORD(v226[0]) = *((_DWORD *)a1 + 25);
      uint64_t v23 = nullsub_1(v231);
      sub_EB241C(*(void *)(v23 + 8) - 480, (uint64_t)v226);
    }
    goto LABEL_45;
  }
  if (*((void *)a1 + 1) != *((void *)a1 + 2))
  {
    int v24 = 0;
    unsigned int v25 = *a1;
    if (v25 > 0xD)
    {
      BOOL v27 = 0;
      LOBYTE(v286) = 1;
      uint64_t v28 = (unsigned int *)*((void *)a1 + 5);
      if (v28 == (unsigned int *)-1)
      {
LABEL_31:
        if (sub_EA8E90((uint64_t *)v231))
        {
          sub_43D770((uint64_t)v211, (uint64_t *)a1 + 1, (uint64_t)(a1 + 104), *((void *)a1 + 26), v24, 0, v8, (uint64_t)v217);
          sub_CA59AC((uint64_t)v231, (uint64_t)v217);
          sub_4452A8((uint64_t)v217);
        }
        int v244 = *((_DWORD *)a1 + 8);
        goto LABEL_45;
      }
    }
    else
    {
      int v26 = 1 << v25;
      BOOL v27 = 0;
      if ((v26 & 0x2A86) != 0)
      {
        BOOL v27 = *((void *)a1 + 26) != 0x7FFFFFFFFFFFFFFFLL;
        int v24 = 1;
      }
      LOBYTE(v286) = 1;
      uint64_t v28 = (unsigned int *)*((void *)a1 + 5);
      if (v28 == (unsigned int *)-1) {
        goto LABEL_31;
      }
    }
    if (!v27)
    {
      sub_442DE8((uint64_t)v211, v28, (uint64_t)(a1 + 104), v24, (uint64_t)v217);
      sub_CA59AC((uint64_t)v231, (uint64_t)v217);
      sub_4452A8((uint64_t)v217);
    }
    goto LABEL_31;
  }
  if (sub_CA0C28(*((void *)a1 + 33)))
  {
    if (!*(unsigned char *)(v9 + 128))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    sub_491B44(v9, v226);
    sub_4410C8((uint64_t)v211, (uint64_t *)v226, (uint64_t)(a1 + 104), (uint64_t)v217);
    sub_CA59AC((uint64_t)v231, (uint64_t)v217);
    sub_4452A8((uint64_t)v217);
    uint64_t v119 = *((void *)a1 + 27);
    uint64_t v120 = *((void *)a1 + 28);
    if (v119 != v120 && 0xF0F0F0F0F0F0F0F1 * ((v120 - v119) >> 3) != sub_EA9088(v231))
    {
      uint64_t v122 = *((void *)a1 + 27);
      uint64_t v121 = *((void *)a1 + 28);
      if (0xF0F0F0F0F0F0F0F1 * ((v121 - v122) >> 3) > sub_EA9088(v231))
      {
        v226[0] = dword_8 + 3;
        v226[1] = &off_2439090;
        sub_3E7814(v217, (__n128 *)v226);
        *(unsigned char *)a2 = 0;
        __n128 v123 = v217[1];
        *(__n128 *)(a2 + 8) = v217[0];
        *(__n128 *)(a2 + 24) = v123;
        *(void *)(a2 + 40) = v217[2].n128_u64[0];
        memset(&v217[1], 0, 24);
        *(_DWORD *)(a2 + 48) = v217[2].n128_u32[2];
        sub_C7E3C8((uint64_t)v217);
        sub_4452A8((uint64_t)v231);
        if (!v239[0]) {
          goto LABEL_292;
        }
        goto LABEL_244;
      }
      uint64_t v167 = (uint64_t *)nullsub_1(v231);
      unint64_t v168 = sub_EA9088(v231) + 0xF0F0F0F0F0F0F0FLL * ((uint64_t)(*((void *)a1 + 28) - *((void *)a1 + 27)) >> 3);
      sub_CA5BA0((uint64_t)v167, *v167, *v167 + 480 * v168);
      sub_CA0D90((uint64_t)v235, *(uint64_t *)&v235[0], *(void *)&v235[0] + 24 * v168);
    }
  }
  else
  {
    if (*((void *)a1 + 6) == *((void *)a1 + 7))
    {
      __p[0] = dword_8 + 3;
      __p[1] = &off_2439090;
      sub_3E7814((__n128 *)v226, (__n128 *)__p);
      v217[0].n128_u8[0] = 0;
      *(__n128 *)((char *)v217 + 8) = *(__n128 *)v226;
      *(__n128 *)((char *)&v217[1] + 8) = *(__n128 *)v227;
      v217[2].n128_u64[1] = v228;
      v227[0] = 0;
      v227[1] = 0;
      *(void *)&long long v228 = 0;
      LODWORD(v218) = DWORD2(v228);
      sub_CA5C50((uint64_t)v239, (unsigned __int8 *)v217);
      if (v217[0].n128_u8[0])
      {
        sub_CA701C((uint64_t)&v217[0].n128_i64[1]);
      }
      else
      {
        unint64_t v169 = v217[1].n128_u64[1];
        if (v217[1].n128_u64[1])
        {
          unint64_t v170 = v217[2].n128_u64[0];
          int v171 = (void *)v217[1].n128_u64[1];
          if (v217[2].n128_u64[0] != v217[1].n128_u64[1])
          {
            do
            {
              if (*(char *)(v170 - 1) < 0) {
                operator delete(*(void **)(v170 - 24));
              }
              v170 -= 32;
            }
            while (v170 != v169);
            int v171 = (void *)v217[1].n128_u64[1];
          }
          v217[2].n128_u64[0] = v169;
          operator delete(v171);
        }
      }
      unint64_t v172 = (void **)v227[0];
      if (v227[0])
      {
        unint64_t v173 = (void **)v227[1];
        double v127 = v227[0];
        if (v227[1] != v227[0])
        {
          do
          {
            if (*((char *)v173 - 1) < 0) {
              operator delete(*(v173 - 3));
            }
            v173 -= 4;
          }
          while (v173 != v172);
          double v127 = v227[0];
        }
        v227[1] = v172;
LABEL_242:
        operator delete(v127);
      }
LABEL_243:
      sub_CA6580(a2, (uint64_t)v239);
      sub_4452A8((uint64_t)v231);
      if (!v239[0]) {
        goto LABEL_292;
      }
      goto LABEL_244;
    }
    sub_435BAC(v217);
    sub_CA59AC((uint64_t)v231, (uint64_t)v217);
    sub_4452A8((uint64_t)v217);
  }
LABEL_45:
  uint64_t v32 = (uint64_t *)sub_37D0C0(*((void *)a1 + 34));
  v199.n128_u8[7] = 15;
  strcpy((char *)__p, "RequestWithPath");
  uint64_t v33 = *v32;
  if (*v32)
  {
    sub_443118((uint64_t)v217, v33);
  }
  else
  {
    long long v208 = 0;
    char v209 = 0;
    uint64_t v210 = 0;
    uint64_t v230 = 0;
    *(_OWORD *)uint64_t v229 = 0u;
    long long v228 = 0u;
    *(_OWORD *)long long v227 = 0u;
    *(_OWORD *)unint64_t v226 = 0u;
    char v207 = 0;
    LOBYTE(v206) = 0;
    uint64_t v204 = 0;
    long long v205 = 0;
    uint64_t v202 = 0;
    int v203 = 0;
    sub_29DC44((uint64_t)v217, (long long **)&v208, (long long *)v226, &v206, &v204, 0, (uint64_t)&v202, 1);
  }
  sub_710A8(1, (uint64_t)__p, (uint64_t)v217);
  sub_29E11C((uint64_t)v217);
  if (v33)
  {
LABEL_49:
    if (v199.n128_i8[7] < 0) {
      goto LABEL_50;
    }
    goto LABEL_51;
  }
  char v52 = v203;
  if (v203 && !atomic_fetch_add(&v203->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
    uint64_t v53 = v205;
    if (!v205)
    {
LABEL_88:
      if ((v207 & 0x80000000) == 0) {
        goto LABEL_89;
      }
      goto LABEL_218;
    }
  }
  else
  {
    uint64_t v53 = v205;
    if (!v205) {
      goto LABEL_88;
    }
  }
  if (atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_88;
  }
  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
  std::__shared_weak_count::__release_weak(v53);
  if ((v207 & 0x80000000) == 0)
  {
LABEL_89:
    if ((SHIBYTE(v230) & 0x80000000) == 0) {
      goto LABEL_90;
    }
    goto LABEL_219;
  }
LABEL_218:
  operator delete((void *)v206);
  if ((SHIBYTE(v230) & 0x80000000) == 0)
  {
LABEL_90:
    if ((SHIBYTE(v228) & 0x80000000) == 0) {
      goto LABEL_91;
    }
    goto LABEL_220;
  }
LABEL_219:
  operator delete(v229[0]);
  if ((SHIBYTE(v228) & 0x80000000) == 0)
  {
LABEL_91:
    if ((SHIBYTE(v227[0]) & 0x80000000) == 0) {
      goto LABEL_92;
    }
    goto LABEL_221;
  }
LABEL_220:
  operator delete(v227[1]);
  if ((SHIBYTE(v227[0]) & 0x80000000) == 0)
  {
LABEL_92:
    unint64_t v54 = (void **)v208;
    if (!v208) {
      goto LABEL_49;
    }
    goto LABEL_222;
  }
LABEL_221:
  operator delete(v226[0]);
  unint64_t v54 = (void **)v208;
  if (!v208) {
    goto LABEL_49;
  }
LABEL_222:
  unint64_t v124 = v209;
  if (v209 == v54)
  {
    char v209 = v54;
    operator delete(v54);
    if (v199.n128_i8[7] < 0) {
      goto LABEL_50;
    }
    goto LABEL_51;
  }
  do
  {
    while (*((char *)v124 - 1) < 0)
    {
      operator delete(*(v124 - 3));
      if (*((char *)v124 - 25) < 0) {
        goto LABEL_229;
      }
LABEL_226:
      v124 -= 6;
      if (v124 == v54) {
        goto LABEL_230;
      }
    }
    if ((*((char *)v124 - 25) & 0x80000000) == 0) {
      goto LABEL_226;
    }
LABEL_229:
    operator delete(*(v124 - 6));
    v124 -= 6;
  }
  while (v124 != v54);
LABEL_230:
  char v209 = v54;
  operator delete(v208);
  if (v199.n128_i8[7] < 0) {
LABEL_50:
  }
    operator delete(__p[0]);
LABEL_51:
  if (sub_EA8E90((uint64_t *)v231))
  {
    v196.n128_u64[0] = 11;
    v196.n128_u64[1] = (unint64_t)&off_2439090;
    sub_3E7814((__n128 *)__p, &v196);
    v217[0].n128_u8[0] = 0;
    *(__n128 *)((char *)v217 + 8) = *(__n128 *)__p;
    *(__n128 *)((char *)&v217[1] + 8) = v199;
    v217[2].n128_u64[1] = v200;
    __n128 v199 = 0uLL;
    unint64_t v200 = 0;
    LODWORD(v218) = v201;
    sub_CA5C50((uint64_t)v239, (unsigned __int8 *)v217);
    if (v217[0].n128_u8[0])
    {
      sub_CA701C((uint64_t)&v217[0].n128_i64[1]);
    }
    else
    {
      unint64_t v55 = v217[1].n128_u64[1];
      if (v217[1].n128_u64[1])
      {
        unint64_t v56 = v217[2].n128_u64[0];
        int v57 = (void *)v217[1].n128_u64[1];
        if (v217[2].n128_u64[0] != v217[1].n128_u64[1])
        {
          do
          {
            if (*(char *)(v56 - 1) < 0) {
              operator delete(*(void **)(v56 - 24));
            }
            v56 -= 32;
          }
          while (v56 != v55);
          int v57 = (void *)v217[1].n128_u64[1];
        }
        v217[2].n128_u64[0] = v55;
        operator delete(v57);
      }
    }
    unint64_t v125 = v199.n128_u64[0];
    if (v199.n128_u64[0])
    {
      unint64_t v126 = v199.n128_u64[1];
      double v127 = (void *)v199.n128_u64[0];
      if (v199.n128_u64[1] != v199.n128_u64[0])
      {
        do
        {
          if (*(char *)(v126 - 1) < 0) {
            operator delete(*(void **)(v126 - 24));
          }
          v126 -= 32;
        }
        while (v126 != v125);
        double v127 = (void *)v199.n128_u64[0];
      }
      v199.n128_u64[1] = v125;
      goto LABEL_242;
    }
    goto LABEL_243;
  }
  if (*(unsigned char *)(v9 + 128))
  {
    int v34 = sub_491B8C(v9);
    if (!*(unsigned char *)(v9 + 128))
    {
      unint64_t v176 = __cxa_allocate_exception(8uLL);
      *unint64_t v176 = &off_2439078;
    }
    unsigned int v192 = sub_491B68(v9) + v34;
    if (sub_EA9088(v231) > v192 && !v238)
    {
      unint64_t v35 = sub_69510();
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)v217);
        sub_188FC78(v217, (uint64_t)"Got a request where the session_state contains fewer legs (", 59);
        double v36 = (void *)std::ostream::operator<<();
        sub_188FC78(v36, (uint64_t)") than the number of legs decoded (", 35);
        sub_EA9088(v231);
        double v37 = (void *)std::ostream::operator<<();
        uint64_t v38 = sub_188FC78(v37, (uint64_t)"): ", 3);
        v196.n128_u32[0] = sub_69124((uint64_t)v35);
        sub_677F0((unsigned int *)&v196, (uint64_t)__p);
        if (v199.n128_i8[7] >= 0) {
          uint64_t v39 = __p;
        }
        else {
          uint64_t v39 = (void **)__p[0];
        }
        if (v199.n128_i8[7] >= 0) {
          uint64_t v40 = v199.n128_u8[7];
        }
        else {
          uint64_t v40 = (uint64_t)__p[1];
        }
        long long v41 = sub_188FC78(v38, (uint64_t)v39, v40);
        uint64_t v42 = sub_188FC78(v41, (uint64_t)" request: ", 10);
        uint64_t v43 = sub_68EE4((uint64_t)v35);
        int v44 = *(char *)(v43 + 23);
        if (v44 >= 0) {
          uint64_t v45 = v43;
        }
        else {
          uint64_t v45 = *(void *)v43;
        }
        if (v44 >= 0) {
          uint64_t v46 = *(unsigned __int8 *)(v43 + 23);
        }
        else {
          uint64_t v46 = *(void *)(v43 + 8);
        }
        sub_188FC78(v42, v45, v46);
        if (v199.n128_i8[7] < 0) {
          operator delete(__p[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        if (v199.n128_i8[7] < 0) {
          operator delete(__p[0]);
        }
        if (v222 < 0) {
          operator delete(v220);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
    }
    uint64_t v47 = *((void *)a1 + 34);
    v217[1].n128_u8[7] = 17;
    strcpy((char *)v217, "PathDecoderModule");
    __p[0] = 0;
    __p[1] = 0;
    v199.n128_u64[0] = 0;
    uint64_t v48 = sub_374CDC(v47, (uint64_t)v217, (uint64_t *)__p);
    long long v49 = (void **)__p[0];
    if (__p[0])
    {
      int v50 = (void **)__p[1];
      int v51 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*((char *)v50 - 1) < 0) {
            operator delete(*(v50 - 3));
          }
          v50 -= 3;
        }
        while (v50 != v49);
        int v51 = __p[0];
      }
      __p[1] = v49;
      operator delete(v51);
    }
    if (v217[1].n128_i8[7] < 0) {
      operator delete((void *)v217[0].n128_u64[0]);
    }
    v217[0].n128_u64[0] = (unint64_t)operator new(0x38uLL);
    *(__n128 *)((char *)v217 + 8) = (__n128)xmmword_20B9AD0;
    strcpy((char *)v217[0].n128_u64[0], "max_num_fully_traversed_legs_preserved_in_session_state");
    int v58 = sub_31AC04(v48, (uint64_t)v217);
    if (v217[1].n128_i8[7] < 0) {
      operator delete((void *)v217[0].n128_u64[0]);
    }
    unsigned int v59 = sub_EA9088(v231);
    if (v192 >= v59) {
      int v60 = v192 - v59;
    }
    else {
      int v60 = 0;
    }
    unsigned int v190 = v58 + v59;
    if (v192 >= v58 + v59) {
      unsigned int v61 = v192 - (v58 + v59);
    }
    else {
      unsigned int v61 = 0;
    }
    sub_484EDC(*((void *)a1 + 33), (uint64_t)v217);
    sub_CA0FF4((uint64_t)v247, (uint64_t)v217);
    sub_4BCC2C((uint64_t)v217);
    __p[0] = 0;
    __p[1] = 0;
    v199.n128_u64[0] = 0;
    unint64_t v62 = sub_EA9088(v231);
    sub_493EC4((char **)__p, v62);
    if (!*(unsigned char *)(v9 + 128))
    {
      unint64_t v177 = __cxa_allocate_exception(8uLL);
      *unint64_t v177 = &off_2439078;
    }
    sub_491B5C(v9, v217);
    if (!*(unsigned char *)(v9 + 128))
    {
      unint64_t v178 = __cxa_allocate_exception(8uLL);
      *unint64_t v178 = &off_2439078;
    }
    int v189 = v60;
    unint64_t v63 = v217[0].n128_u64[0];
    sub_491B5C(v9, &v196);
    unsigned int v188 = v61;
    unint64_t v64 = (uint64_t *)(v63 + 144 * v61);
    unint64_t v65 = v196.n128_u64[1];
    if (v64 != (uint64_t *)v196.n128_u64[1])
    {
      char v66 = (char *)__p[1];
      do
      {
        while ((unint64_t)v66 < v199.n128_u64[0])
        {
          sub_48990C((uint64_t)v66, v64);
          v66 += 144;
          __p[1] = v66;
          v64 += 18;
          if (v64 == (uint64_t *)v65) {
            goto LABEL_121;
          }
        }
        char v66 = (char *)sub_CA7184((uint64_t *)__p, v64);
        __p[1] = v66;
        v64 += 18;
      }
      while (v64 != (uint64_t *)v65);
    }
LABEL_121:
    if (!*(unsigned char *)(v9 + 128)
      || (int v187 = sub_4F44((unsigned int *)v9), !*(unsigned char *)(v9 + 128))
      || (char v186 = sub_491B10(v9), !*(unsigned char *)(v9 + 128))
      || (int v185 = sub_40A44C(v9), !*(unsigned char *)(v9 + 128))
      || (char v184 = sub_491B18(v9), !*(unsigned char *)(v9 + 128))
      || (char v183 = sub_491B20(v9), !*(unsigned char *)(v9 + 128))
      || (int v67 = sub_40AB24(v9), !*(unsigned char *)(v9 + 128)))
    {
      unint64_t v174 = __cxa_allocate_exception(8uLL);
      *unint64_t v174 = &off_2439078;
    }
    int v68 = v67;
    int v69 = sub_491B28(v9);
    if (!*(unsigned char *)(v9 + 128))
    {
      uint64_t v179 = __cxa_allocate_exception(8uLL);
      *uint64_t v179 = &off_2439078;
    }
    int v70 = v69;
    sub_46DD68(v9, &v195);
    if (!*(unsigned char *)(v9 + 128))
    {
      unsigned int v180 = __cxa_allocate_exception(8uLL);
      *unsigned int v180 = &off_2439078;
    }
    int v71 = (const void *)v195.n128_u64[0];
    sub_46DD68(v9, &v194);
    unint64_t v197 = 0;
    __n128 v196 = 0uLL;
    uint64_t v72 = v194.n128_u64[1] - (void)v71;
    if ((const void *)v194.n128_u64[1] != v71)
    {
      if (v72 < 0) {
        sub_2E00();
      }
      v196.n128_u64[0] = (unint64_t)operator new(v194.n128_u64[1] - (void)v71);
      v196.n128_u64[1] = v196.n128_u64[0];
      unint64_t v73 = v196.n128_u64[0] + 16 * (v72 >> 4);
      unint64_t v197 = v73;
      memmove((void *)v196.n128_u64[0], v71, v72 - 4);
      v196.n128_u64[1] = v73;
    }
    if (v192 > v190)
    {
      *(void *)&v193[0] = 0x8000000080000000;
      *(long long *)((char *)v193 + 8) = xmmword_20E8160;
      DWORD2(v193[0]) = 0x7FFFFFFF;
      goto LABEL_137;
    }
    if (!*(unsigned char *)(v9 + 128)) {
      goto LABEL_346;
    }
    uint64_t v74 = sub_50BE8(v9);
    long long v75 = *(_OWORD *)v74;
    *(void *)&v193[1] = *(void *)(v74 + 16);
    v193[0] = v75;
LABEL_137:
    if (!*(unsigned char *)(v9 + 128))
    {
LABEL_346:
      uint64_t v175 = __cxa_allocate_exception(8uLL);
      *uint64_t v175 = &off_2439078;
    }
    uint64_t v76 = sub_68EAC(v9);
    sub_491ADC((uint64_t)v217, v187, v186, v185, v184, v183, v68, v70, v189 - v188, (uint64_t)&v196, v193, (uint64_t *)__p, v76);
    sub_485264((uint64_t)v247, (long long *)v217);
    if (v223)
    {
      char v224 = v223;
      operator delete(v223);
    }
    uint64_t v77 = v220;
    if (v220)
    {
      uint64_t v78 = (uint64_t)v221;
      uint64_t v79 = v220;
      if (v221 != v220)
      {
        do
          uint64_t v78 = sub_489CF4(v78 - 144);
        while ((void *)v78 != v77);
        uint64_t v79 = v220;
      }
      char v221 = v77;
      operator delete(v79);
    }
    if (v217[1].n128_u64[1])
    {
      v217[2].n128_u64[0] = v217[1].n128_u64[1];
      operator delete((void *)v217[1].n128_u64[1]);
    }
    if (v196.n128_u64[0])
    {
      v196.n128_u64[1] = v196.n128_u64[0];
      operator delete((void *)v196.n128_u64[0]);
    }
    long long v80 = __p[0];
    if (__p[0])
    {
      uint64_t v81 = __p[1];
      uint64_t v82 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v81 = (void *)sub_489CF4((uint64_t)v81 - 144);
        while (v81 != v80);
        uint64_t v82 = __p[0];
      }
      __p[1] = v80;
      operator delete(v82);
    }
  }
  else
  {
    sub_5B98C0((uint64_t)v247, *((void *)a1 + 33));
  }
  uint64_t v83 = v240;
  if ((void)v240)
  {
    uint64_t v84 = *((void *)&v240 + 1);
    long long v85 = (void *)v240;
    if (*((void *)&v240 + 1) != (void)v240)
    {
      do
        uint64_t v84 = sub_4451C0(v84 - 480);
      while (v84 != v83);
      long long v85 = (void *)v240;
    }
    *((void *)&v240 + 1) = v83;
    operator delete(v85);
  }
  long long v240 = *(_OWORD *)v231;
  long long v241 = v232;
  uint64_t v232 = 0;
  v231[1] = 0;
  v231[0] = 0;
  if (SHIBYTE(v243) < 0) {
    operator delete((void *)v242);
  }
  long long v242 = v233;
  uint64_t v243 = v234;
  HIBYTE(v234) = 0;
  LOBYTE(v233) = 0;
  unint64_t v86 = (char *)v245[0];
  if (v245[0])
  {
    uint64_t v87 = v245[1];
    long long v88 = v245[0];
    if (v245[1] != v245[0])
    {
      unsigned int v89 = (char *)v245[1];
      do
      {
        uint64_t v91 = (void *)*((void *)v89 - 3);
        v89 -= 24;
        int v90 = v91;
        if (v91)
        {
          *(v87 - 2) = v90;
          operator delete(v90);
        }
        uint64_t v87 = v89;
      }
      while (v89 != v86);
      long long v88 = v245[0];
    }
    v245[1] = v86;
    operator delete(v88);
  }
  *(_OWORD *)uint64_t v245 = v235[0];
  v246[0] = *(void **)&v235[1];
  memset(v235, 0, 24);
  unint64_t v92 = (char *)v246[1];
  if (v246[1])
  {
    unint64_t v93 = (char *)v246[2];
    unint64_t v94 = v246[1];
    if (v246[2] != v246[1])
    {
      do
      {
        unint64_t v95 = (void *)*((void *)v93 - 4);
        if (v95)
        {
          *((void *)v93 - 3) = v95;
          operator delete(v95);
        }
        unint64_t v96 = (void *)*((void *)v93 - 7);
        if (v96)
        {
          *((void *)v93 - 6) = v96;
          operator delete(v96);
        }
        uint64_t v97 = (void *)*((void *)v93 - 11);
        if (v97)
        {
          *((void *)v93 - 10) = v97;
          operator delete(v97);
        }
        v93 -= 160;
      }
      while (v93 != v92);
      unint64_t v94 = v246[1];
    }
    v246[2] = v92;
    operator delete(v94);
  }
  *(_OWORD *)&v246[1] = *(_OWORD *)((char *)&v235[1] + 8);
  v246[3] = *((void **)&v235[2] + 1);
  memset((char *)&v235[1] + 8, 0, 24);
  if (v238)
  {
    if (v284)
    {
      if ((void)v282)
      {
        *((void *)&v282 + 1) = v282;
        operator delete((void *)v282);
      }
      long long v282 = v236;
      uint64_t v283 = v237;
      uint64_t v237 = 0;
      long long v236 = 0uLL;
    }
    else
    {
      long long v282 = v236;
      uint64_t v283 = v237;
      uint64_t v237 = 0;
      long long v236 = 0uLL;
      char v284 = 1;
    }
  }
  else if (v284)
  {
    if ((void)v282)
    {
      *((void *)&v282 + 1) = v282;
      operator delete((void *)v282);
    }
    char v284 = 0;
  }
  sub_4452A8((uint64_t)v231);
  uint64_t v98 = *((void *)a1 + 27);
  uint64_t v99 = *((void *)a1 + 28);
  if (v98 != v99)
  {
    unint64_t v100 = sub_EA9088(&v240);
    uint64_t v101 = sub_40EFE8((uint64_t)&v240);
    uint64_t v102 = *((void *)a1 + 27);
    uint64_t v103 = sub_52058((uint64_t)&v240);
    if (v101 != v103)
    {
      unint64_t v104 = (long long *)(v102 + 136 * (0xF0F0F0F0F0F0F0F1 * ((v99 - v98) >> 3) - v100));
      do
      {
        sub_3B1DC8((uint64_t)v217, v104);
        long long v225 = xmmword_20F0420;
        sub_EB22E4(v101, (long long *)v217);
        if (v219)
        {
          long long v220 = v219;
          operator delete(v219);
        }
        if (v217[2].n128_u64[1])
        {
          *(void *)&long long v218 = v217[2].n128_u64[1];
          operator delete((void *)v217[2].n128_u64[1]);
        }
        v101 += 480;
        unint64_t v104 = (long long *)((char *)v104 + 136);
      }
      while (v101 != v103);
    }
    uint64_t v105 = sub_40EFE8((uint64_t)&v240);
    uint64_t v106 = sub_64790C(v105);
    uint64_t v107 = v106;
    int v108 = *(_DWORD *)(v106 + 112);
    if (v108 != -1)
    {
      if (v108 == 1)
      {
        if (*(void *)(v106 + 104) > 0xFFFFFFFEFFFFFFFFLL || !*(void *)(v106 + 104)) {
          goto LABEL_267;
        }
      }
      else
      {
        if (v108)
        {
          char v182 = __cxa_allocate_exception(8uLL);
          void *v182 = &off_23FDF58;
        }
        if (*(void *)(v106 + 104) == -1) {
          goto LABEL_267;
        }
      }
      uint64_t v109 = sub_376F8C(*((void **)a1 + 34));
      uint64_t v110 = (uint64_t *)v109;
      unsigned int v216 = *(_DWORD *)(v107 + 112);
      if (v216 <= 1) {
        uint64_t v215 = *(void *)(v107 + 104);
      }
      uint64_t v111 = sub_28CF4C(v109, &v215);
      *((void *)v246[1] + 2) = v111;
      unsigned int v214 = *(_DWORD *)(v107 + 112);
      if (v214 <= 1) {
        uint64_t v213 = *(void *)(v107 + 104);
      }
      unint64_t v112 = sub_28CDA4(v110, (uint64_t)&v213);
      unint64_t v113 = sub_28E018((uint64_t)v110, v112);
      unint64_t v114 = HIDWORD(v113) - *((unsigned int *)a1 + 27);
      unint64_t v115 = v113 - (unint64_t)*((unsigned int *)a1 + 26);
      double v116 = sqrt((double)(v115 * v115 + v114 * v114)) / 100.0 * 100.0;
      if (v116 >= 0.0)
      {
        double v117 = v116;
        if (v116 < 4.50359963e15)
        {
          uint64_t v118 = (uint64_t)(v116 + v116) + 1;
          goto LABEL_247;
        }
      }
      else
      {
        double v117 = v116;
        if (v116 > -4.50359963e15)
        {
          uint64_t v118 = (uint64_t)(v116 + v116);
          if (v118 >= 1) {
            --v118;
          }
LABEL_247:
          double v117 = (double)(v118 >> 1);
        }
      }
      if (v117 < 9.22337204e18)
      {
        if (v116 >= 0.0)
        {
          if (v116 < 4.50359963e15)
          {
            uint64_t v128 = (uint64_t)(v116 + v116) + 1;
            goto LABEL_259;
          }
        }
        else if (v116 > -4.50359963e15)
        {
          uint64_t v128 = (uint64_t)(v116 + v116);
          if (v128 >= 1) {
            --v128;
          }
LABEL_259:
          double v116 = (double)(v128 >> 1);
        }
        if ((uint64_t)v116 < 5001) {
          goto LABEL_267;
        }
      }
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)v217);
        sub_188FC78(v217, (uint64_t)"Distance between user location and the user route's origin charging station is approximately ", 93);
        unint64_t v129 = (void *)std::ostream::operator<<();
        sub_188FC78(v129, (uint64_t)" meters.", 8);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v231, 1u);
        if (SHIBYTE(v232) < 0) {
          operator delete(v231[0]);
        }
        if (v222 < 0) {
          operator delete(v220);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
    }
  }
LABEL_267:
  if (v284)
  {
    unint64_t v130 = (void *)nullsub_1(&v240);
    uint64_t v131 = v130[1] - *v130;
    if (v131)
    {
      uint64_t v132 = 0;
      uint64_t v133 = 0;
      uint64_t v134 = v131 / 480;
      do
      {
        uint64_t v135 = *v130 + v132;
        if (v133) {
          unsigned __int32 v136 = -1;
        }
        else {
          unsigned __int32 v136 = 0;
        }
        v217[0].n128_u32[0] = v136;
        sub_EB2AE0(v135, v217);
        uint64_t v137 = *v130 + v132;
        if (v133 == -1 - 0x1111111111111111 * ((uint64_t)(v130[1] - *v130) >> 5)) {
          unsigned __int32 v138 = 1;
        }
        else {
          unsigned __int32 v138 = -1;
        }
        v217[0].n128_u32[0] = v138;
        sub_EB2AEC(v137, v217);
        ++v133;
        v132 += 480;
      }
      while (v134 != v133);
    }
  }
  else
  {
    uint64_t v140 = *((void *)a1 + 30);
    uint64_t v139 = *((void *)a1 + 31);
    unint64_t v141 = sub_EA9088(&v240);
    if (v139 - v140 >= v141 + 1) {
      uint64_t v142 = v139 - v140 - (v141 + 1);
    }
    else {
      uint64_t v142 = 0;
    }
    uint64_t v143 = (void *)nullsub_1(&v240);
    uint64_t v144 = v143[1];
    uint64_t v145 = v144 - *v143;
    if (v144 != *v143)
    {
      uint64_t v146 = (void *)nullsub_1(&v240);
      if (v146[1] - *v146 == 480)
      {
        BOOL v147 = 1;
      }
      else
      {
        uint64_t v148 = *((void *)a1 + 30);
        BOOL v147 = v148 != *((void *)a1 + 31) && *(unsigned char *)(v142 + v148 + 1) == 1;
      }
      v217[0].n128_u32[0] = 0;
      uint64_t v149 = (uint64_t *)nullsub_1(&v240);
      sub_EB2AE0(*v149, v217);
      if (v147)
      {
        uint64_t v150 = *(void *)nullsub_1(&v240);
        LODWORD(v231[0]) = 1;
        sub_EB2AEC(v150, v231);
        int v151 = 1;
        if (v145 == 480) {
          goto LABEL_291;
        }
      }
      else
      {
        uint64_t v152 = *(void *)nullsub_1(&v240);
        LODWORD(v231[0]) = -1;
        sub_EB2AEC(v152, v231);
        int v151 = 0;
        if (v145 == 480) {
          goto LABEL_291;
        }
      }
      uint64_t v156 = 0;
      uint64_t v157 = v145 / 480 - 1;
      uint64_t v158 = 480;
      do
      {
        uint64_t v159 = *((void *)a1 + 30);
        BOOL v160 = v159 != *((void *)a1 + 31) && *(unsigned __int8 *)(v159 + v142 + v156 + 1) == 1;
        uint64_t v161 = (void *)nullsub_1(&v240);
        if (v156 + 2 == 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v161[1] - *v161) >> 5))
        {
          BOOL v162 = 1;
        }
        else
        {
          uint64_t v163 = *((void *)a1 + 30);
          BOOL v162 = v163 != *((void *)a1 + 31) && *(unsigned __int8 *)(v163 + v142 + v156 + 2) == 1;
        }
        if (v160) {
          unsigned __int32 v164 = v151;
        }
        else {
          unsigned __int32 v164 = -1;
        }
        v217[0].n128_u32[0] = v164;
        uint64_t v165 = (void *)nullsub_1(&v240);
        sub_EB2AE0(*v165 + v158, v217);
        if (v162)
        {
          ++v151;
          uint64_t v166 = *(void *)nullsub_1(&v240) + v158;
          LODWORD(v231[0]) = v151;
        }
        else
        {
          uint64_t v166 = *(void *)nullsub_1(&v240) + v158;
          LODWORD(v231[0]) = -1;
        }
        sub_EB2AEC(v166, v231);
        ++v156;
        v158 += 480;
      }
      while (v157 != v156);
    }
  }
LABEL_291:
  unint64_t v285 = vcvtad_u64_f64(sub_72688((uint64_t)v212));
  sub_CA6580(a2, (uint64_t)v239);
  if (v239[0])
  {
LABEL_244:
    sub_CA701C((uint64_t)&v240);
    return;
  }
LABEL_292:
  uint64_t v153 = (void **)v241;
  if (v241)
  {
    uint64_t v154 = (void **)v242;
    int v155 = v241;
    if ((void *)v242 != v241)
    {
      do
      {
        if (*((char *)v154 - 1) < 0) {
          operator delete(*(v154 - 3));
        }
        v154 -= 4;
      }
      while (v154 != v153);
      int v155 = v241;
    }
    *(void *)&long long v242 = v153;
    operator delete(v155);
  }
}

void sub_CA5504(_Unwind_Exception *a1)
{
}

uint64_t sub_CA59AC(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    int v6 = v4;
    if ((void *)v5 != v4)
    {
      do
        uint64_t v5 = sub_4451C0(v5 - 480);
      while ((void *)v5 != v4);
      int v6 = *(void **)a1;
    }
    *(void *)(a1 + 8) = v4;
    operator delete(v6);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  BOOL v7 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v7);
  }
  long long v8 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)BOOL v7 = v8;
  *(unsigned char *)(a2 + 47) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  uint64_t v9 = (void **)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 48);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v12 = *(void **)(a1 + 48);
    if (v11 != v10)
    {
      uint64_t v13 = *(void *)(a1 + 56);
      do
      {
        __n128 v15 = *(void **)(v13 - 24);
        v13 -= 24;
        uint64_t v14 = v15;
        if (v15)
        {
          *(void *)(v11 - 16) = v14;
          operator delete(v14);
        }
        uint64_t v11 = v13;
      }
      while (v13 != v10);
      uint64_t v12 = *v9;
    }
    *(void *)(a1 + 56) = v10;
    operator delete(v12);
    void *v9 = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  sub_C7EA10((void **)(a1 + 72), (__n128 *)(a2 + 72));
  __n128 v16 = (void **)(a1 + 96);
  if (*(unsigned char *)(a2 + 120))
  {
    long long v17 = (void *)(a2 + 96);
    if (!*(unsigned char *)(a1 + 120))
    {
      uint64_t *v16 = 0;
      *(void *)(a1 + 104) = 0;
      *(void *)(a1 + 112) = 0;
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      void *v17 = 0;
      *(void *)(a2 + 104) = 0;
      *(void *)(a2 + 112) = 0;
      *(unsigned char *)(a1 + 120) = 1;
      return a1;
    }
    long long v20 = *v16;
    if (*v16)
    {
      *(void *)(a1 + 104) = v20;
      operator delete(v20);
      uint64_t *v16 = 0;
      *(void *)(a1 + 104) = 0;
      *(void *)(a1 + 112) = 0;
    }
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    void *v17 = 0;
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = 0;
    return a1;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 120)) {
      return a1;
    }
    uint64_t v19 = *v16;
    if (*v16)
    {
      *(void *)(a1 + 104) = v19;
      operator delete(v19);
    }
    *(unsigned char *)(a1 + 120) = 0;
    return a1;
  }
}

uint64_t sub_CA5BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = a3;
    uint64_t v6 = *(void *)(a1 + 8);
    if (a3 == v6)
    {
      uint64_t v8 = a2;
    }
    else
    {
      uint64_t v7 = 32 * ((a3 - a2) >> 5);
      uint64_t v8 = a2;
      do
      {
        sub_4495AC(v8, (long long *)(v8 + v7));
        v8 += 480;
      }
      while (v8 + v7 != v6);
      uint64_t v5 = *(void *)(a1 + 8);
    }
    while (v5 != v8)
      uint64_t v5 = sub_4451C0(v5 - 480);
    *(void *)(a1 + 8) = v8;
  }
  return a2;
}

uint64_t sub_CA5C50(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  if (*(unsigned char *)a1)
  {
    if (*a2)
    {
      sub_CA6E2C(a1 + 8, (uint64_t)(a2 + 8));
LABEL_4:
      *(unsigned char *)a1 = *a2;
      return a1;
    }
    sub_CA701C(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  else
  {
    uint64_t v6 = (_OWORD *)(a1 + 8);
    uint64_t v7 = a2 + 8;
    if (v4)
    {
      sub_CA5FA0(a1, (uint64_t)v6, a1 + 8, (uint64_t)v7);
      goto LABEL_4;
    }
    _OWORD *v6 = *v7;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  *(unsigned char *)a1 = *a2;
  return a1;
}

uint64_t sub_CA5D18(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    sub_CA701C(a1 + 8);
    return a1;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 24);
  if (v4 != v3)
  {
    do
    {
      if (*(char *)(v4 - 1) < 0) {
        operator delete(*(void **)(v4 - 24));
      }
      v4 -= 32;
    }
    while (v4 != v3);
    uint64_t v5 = *(void **)(a1 + 24);
  }
  *(void *)(a1 + 32) = v3;
  operator delete(v5);
  return a1;
}

uint64_t sub_CA5DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = v4;
    if ((void *)v5 != v4)
    {
      do
        uint64_t v5 = sub_405F44(v5 - 472);
      while ((void *)v5 != v4);
      uint64_t v6 = *(void **)a1;
    }
    *(void *)(a1 + 8) = v4;
    operator delete(v6);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v7);
  }
  long long v8 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)uint64_t v7 = v8;
  *(unsigned char *)(a2 + 47) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  uint64_t v9 = (void **)(a1 + 56);
  uint64_t v10 = *(char **)(a1 + 56);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  if (v10)
  {
    uint64_t v11 = *(char **)(a1 + 64);
    uint64_t v12 = v10;
    if (v11 != v10)
    {
      uint64_t v13 = *(char **)(a1 + 64);
      do
      {
        __n128 v15 = (void *)*((void *)v13 - 3);
        v13 -= 24;
        uint64_t v14 = v15;
        if (v15)
        {
          *((void *)v11 - 2) = v14;
          operator delete(v14);
        }
        uint64_t v11 = v13;
      }
      while (v13 != v10);
      uint64_t v12 = *v9;
    }
    *(void *)(a1 + 64) = v10;
    operator delete(v12);
    void *v9 = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  sub_C7EA10((void **)(a1 + 80), (__n128 *)(a2 + 80));
  sub_CA0FF4(a1 + 104, a2 + 104);
  __n128 v16 = (void **)(a1 + 816);
  if (*(unsigned char *)(a2 + 840))
  {
    long long v17 = (void *)(a2 + 816);
    if (*(unsigned char *)(a1 + 840))
    {
      long long v21 = *v16;
      if (*v16)
      {
        *(void *)(a1 + 824) = v21;
        operator delete(v21);
        uint64_t *v16 = 0;
        *(void *)(a1 + 824) = 0;
        *(void *)(a1 + 832) = 0;
      }
      *(_OWORD *)(a1 + 816) = *(_OWORD *)(a2 + 816);
      *(void *)(a1 + 832) = *(void *)(a2 + 832);
      void *v17 = 0;
      *(void *)(a2 + 824) = 0;
      *(void *)(a2 + 832) = 0;
    }
    else
    {
      uint64_t *v16 = 0;
      *(void *)(a1 + 824) = 0;
      *(void *)(a1 + 832) = 0;
      *(_OWORD *)(a1 + 816) = *(_OWORD *)(a2 + 816);
      *(void *)(a1 + 832) = *(void *)(a2 + 832);
      void *v17 = 0;
      *(void *)(a2 + 824) = 0;
      *(void *)(a2 + 832) = 0;
      *(unsigned char *)(a1 + 840) = 1;
    }
  }
  else if (*(unsigned char *)(a1 + 840))
  {
    long long v20 = *v16;
    if (*v16)
    {
      *(void *)(a1 + 824) = v20;
      operator delete(v20);
    }
    *(unsigned char *)(a1 + 840) = 0;
  }
  uint64_t v18 = *(void *)(a2 + 848);
  *(_WORD *)(a1 + 856) = *(_WORD *)(a2 + 856);
  *(void *)(a1 + 848) = v18;
  return a1;
}

__n128 sub_CA5FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    uint64_t v8 = *(void *)(a3 + 24);
    uint64_t v9 = *(void **)(a3 + 16);
    if (v8 != v6)
    {
      do
      {
        if (*(char *)(v8 - 1) < 0) {
          operator delete(*(void **)(v8 - 24));
        }
        v8 -= 32;
      }
      while (v8 != v6);
      uint64_t v9 = *(void **)(a3 + 16);
    }
    *(void *)(a3 + 24) = v6;
    operator delete(v9);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a4;
  *(void *)(a2 + 16) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  long long v10 = *(_OWORD *)(a4 + 24);
  *(void *)(a2 + 40) = *(void *)(a4 + 40);
  *(_OWORD *)(a2 + 24) = v10;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = 0;
  *(void *)(a4 + 24) = 0;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a4 + 48);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a4 + 56);
  *(void *)(a2 + 72) = *(void *)(a4 + 72);
  *(void *)(a4 + 56) = 0;
  *(void *)(a4 + 64) = 0;
  *(void *)(a4 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a4 + 80);
  *(void *)(a2 + 96) = *(void *)(a4 + 96);
  *(void *)(a4 + 80) = 0;
  *(void *)(a4 + 88) = 0;
  *(void *)(a4 + 96) = 0;
  sub_CA624C(a2 + 104, (long long *)(a4 + 104));
  int v11 = *(unsigned __int8 *)(a4 + 840);
  *(unsigned char *)(a2 + 840) = v11;
  if (v11)
  {
    *(void *)(a2 + 832) = 0;
    *(_OWORD *)(a2 + 816) = 0u;
    *(_OWORD *)(a2 + 816) = *(_OWORD *)(a4 + 816);
    *(void *)(a2 + 832) = *(void *)(a4 + 832);
    *(void *)(a4 + 832) = 0;
    *(_OWORD *)(a4 + 816) = 0u;
  }
  __n128 result = *(__n128 *)(a4 + 848);
  *(__n128 *)(a2 + 848) = result;
  return result;
}

uint64_t sub_CA60E4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 840))
  {
    unint64_t v2 = *(void **)(a1 + 816);
    if (v2)
    {
      *(void *)(a1 + 824) = v2;
      operator delete(v2);
    }
    *(unsigned char *)(a1 + 840) = 0;
  }
  sub_4BCC2C(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 88);
    uint64_t v5 = *(void **)(a1 + 80);
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = *(void **)(v4 - 32);
        if (v6)
        {
          *(void *)(v4 - 24) = v6;
          operator delete(v6);
        }
        uint64_t v7 = *(void **)(v4 - 56);
        if (v7)
        {
          *(void *)(v4 - 48) = v7;
          operator delete(v7);
        }
        uint64_t v8 = *(void **)(v4 - 88);
        if (v8)
        {
          *(void *)(v4 - 80) = v8;
          operator delete(v8);
        }
        v4 -= 160;
      }
      while (v4 != v3);
      uint64_t v5 = *(void **)(a1 + 80);
    }
    *(void *)(a1 + 88) = v3;
    operator delete(v5);
  }
  uint64_t v9 = *(void *)(a1 + 56);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 64);
    int v11 = *(void **)(a1 + 56);
    if (v10 != v9)
    {
      uint64_t v12 = *(void *)(a1 + 64);
      do
      {
        uint64_t v14 = *(void **)(v12 - 24);
        v12 -= 24;
        uint64_t v13 = v14;
        if (v14)
        {
          *(void *)(v10 - 16) = v13;
          operator delete(v13);
        }
        uint64_t v10 = v12;
      }
      while (v12 != v9);
      int v11 = *(void **)(a1 + 56);
    }
    *(void *)(a1 + 64) = v9;
    operator delete(v11);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    __n128 v15 = *(void **)a1;
    if (!*(void *)a1) {
      return a1;
    }
  }
  else
  {
    __n128 v15 = *(void **)a1;
    if (!*(void *)a1) {
      return a1;
    }
  }
  uint64_t v17 = *(void *)(a1 + 8);
  uint64_t v18 = v15;
  if ((void *)v17 != v15)
  {
    do
      uint64_t v17 = sub_405F44(v17 - 472);
    while ((void *)v17 != v15);
    uint64_t v18 = *(void **)a1;
  }
  *(void *)(a1 + 8) = v15;
  operator delete(v18);
  return a1;
}

__n128 sub_CA624C(uint64_t a1, long long *a2)
{
  int v2 = *((unsigned __int8 *)a2 + 128);
  *(unsigned char *)(a1 + 128) = v2;
  if (v2)
  {
    long long v3 = *a2;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)a1 = v3;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *((void *)a2 + 3) = 0;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    uint64_t v4 = *((void *)a2 + 8);
    *(_OWORD *)(a1 + 48) = a2[3];
    *(void *)(a1 + 64) = v4;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(_OWORD *)(a1 + 72) = *(long long *)((char *)a2 + 72);
    *(void *)(a1 + 88) = *((void *)a2 + 11);
    *((void *)a2 + 10) = 0;
    *((void *)a2 + 11) = 0;
    *((void *)a2 + 9) = 0;
    *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 104) = 0;
    *(_OWORD *)(a1 + 104) = *(long long *)((char *)a2 + 104);
    *(void *)(a1 + 120) = *((void *)a2 + 15);
    *((void *)a2 + 13) = 0;
    *((void *)a2 + 14) = 0;
    *((void *)a2 + 15) = 0;
  }
  int v5 = *((unsigned __int8 *)a2 + 264);
  *(unsigned char *)(a1 + 264) = v5;
  if (v5)
  {
    long long v6 = *(long long *)((char *)a2 + 136);
    *(_DWORD *)(a1 + 152) = *((_DWORD *)a2 + 38);
    *(_OWORD *)(a1 + 136) = v6;
    *(void *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 160) = 0;
    *(_OWORD *)(a1 + 160) = a2[10];
    *(void *)(a1 + 176) = *((void *)a2 + 22);
    *((void *)a2 + 20) = 0;
    *((void *)a2 + 21) = 0;
    *((void *)a2 + 22) = 0;
    uint64_t v7 = *((void *)a2 + 25);
    *(_OWORD *)(a1 + 184) = *(long long *)((char *)a2 + 184);
    *(void *)(a1 + 200) = v7;
    *(void *)(a1 + 208) = 0;
    *(void *)(a1 + 216) = 0;
    *(void *)(a1 + 224) = 0;
    *(_OWORD *)(a1 + 208) = a2[13];
    *(void *)(a1 + 224) = *((void *)a2 + 28);
    *((void *)a2 + 27) = 0;
    *((void *)a2 + 28) = 0;
    *((void *)a2 + 26) = 0;
    *(_DWORD *)(a1 + 232) = *((_DWORD *)a2 + 58);
    *(void *)(a1 + 248) = 0;
    *(void *)(a1 + 256) = 0;
    *(void *)(a1 + 240) = 0;
    *(_OWORD *)(a1 + 240) = a2[15];
    *(void *)(a1 + 256) = *((void *)a2 + 32);
    *((void *)a2 + 30) = 0;
    *((void *)a2 + 31) = 0;
    *((void *)a2 + 32) = 0;
  }
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 272) = a2[17];
  *(void *)(a1 + 288) = *((void *)a2 + 36);
  *((void *)a2 + 35) = 0;
  *((void *)a2 + 36) = 0;
  *((void *)a2 + 34) = 0;
  uint64_t v8 = *((void *)a2 + 37);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 296) = v8;
  *(void *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 304) = a2[19];
  *(void *)(a1 + 320) = *((void *)a2 + 40);
  *((void *)a2 + 38) = 0;
  *((void *)a2 + 39) = 0;
  *((void *)a2 + 40) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  uint64_t v9 = *((void *)a2 + 42);
  *(void *)(a1 + 328) = *((void *)a2 + 41);
  *(void *)(a1 + 336) = v9;
  *(void *)(a1 + 344) = *((void *)a2 + 43);
  *((void *)a2 + 41) = 0;
  *((void *)a2 + 42) = 0;
  *((void *)a2 + 43) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 352) = a2[22];
  *(void *)(a1 + 368) = *((void *)a2 + 46);
  *((void *)a2 + 44) = 0;
  *((void *)a2 + 45) = 0;
  *((void *)a2 + 46) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  uint64_t v10 = *((void *)a2 + 48);
  *(void *)(a1 + 376) = *((void *)a2 + 47);
  *(void *)(a1 + 384) = v10;
  *(void *)(a1 + 392) = *((void *)a2 + 49);
  *((void *)a2 + 47) = 0;
  *((void *)a2 + 48) = 0;
  *((void *)a2 + 49) = 0;
  *(_DWORD *)(a1 + 400) = *((_DWORD *)a2 + 100);
  *(void *)(a1 + 408) = *((void *)a2 + 51);
  *(void *)(a1 + 416) = *((void *)a2 + 52);
  *(void *)(a1 + 424) = *((void *)a2 + 53);
  *(void *)(a1 + 432) = *((void *)a2 + 54);
  *(void *)(a1 + 440) = *((void *)a2 + 55);
  *(void *)(a1 + 448) = *((void *)a2 + 56);
  *(long long *)((char *)a2 + 424) = 0u;
  *(long long *)((char *)a2 + 440) = 0u;
  *(void *)(a1 + 456) = *((void *)a2 + 57);
  *(void *)(a1 + 464) = *((void *)a2 + 58);
  *((void *)a2 + 57) = 0;
  *((void *)a2 + 58) = 0;
  *(void *)(a1 + 472) = *((void *)a2 + 59);
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 480) = a2[30];
  *(void *)(a1 + 496) = *((void *)a2 + 62);
  *((void *)a2 + 61) = 0;
  *((void *)a2 + 62) = 0;
  *((void *)a2 + 60) = 0;
  *(unsigned char *)(a1 + 504) = *((unsigned char *)a2 + 504);
  *(void *)(a1 + 512) = *((void *)a2 + 64);
  *(void *)(a1 + 520) = *((void *)a2 + 65);
  *(void *)(a1 + 528) = *((void *)a2 + 66);
  *(void *)(a1 + 536) = *((void *)a2 + 67);
  a2[32] = 0u;
  a2[33] = 0u;
  *(void *)(a1 + 544) = *((void *)a2 + 68);
  *(void *)(a1 + 552) = *((void *)a2 + 69);
  *((void *)a2 + 69) = 0;
  *((void *)a2 + 68) = 0;
  *(_DWORD *)(a1 + 560) = *((_DWORD *)a2 + 140);
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 568) = *((void *)a2 + 71);
  *(void *)(a1 + 576) = *((void *)a2 + 72);
  *(void *)(a1 + 584) = *((void *)a2 + 73);
  *((void *)a2 + 72) = 0;
  *((void *)a2 + 71) = 0;
  *((void *)a2 + 73) = 0;
  long long v11 = a2[37];
  *(void *)(a1 + 608) = *((void *)a2 + 76);
  *(_OWORD *)(a1 + 592) = v11;
  *((void *)a2 + 74) = 0;
  *((void *)a2 + 76) = 0;
  *((void *)a2 + 75) = 0;
  long long v12 = *(long long *)((char *)a2 + 616);
  *(void *)(a1 + 632) = *((void *)a2 + 79);
  *(_OWORD *)(a1 + 616) = v12;
  *((void *)a2 + 79) = 0;
  *((void *)a2 + 78) = 0;
  *((void *)a2 + 77) = 0;
  long long v13 = a2[40];
  long long v14 = a2[41];
  *(void *)(a1 + 672) = *((void *)a2 + 84);
  *(_OWORD *)(a1 + 640) = v13;
  *(_OWORD *)(a1 + 656) = v14;
  *(_WORD *)(a1 + 680) = *((_WORD *)a2 + 340);
  *(_WORD *)(a1 + 682) = *((_WORD *)a2 + 341);
  __n128 result = (__n128)a2[43];
  *(unsigned char *)(a1 + 704) = *((unsigned char *)a2 + 704);
  *(__n128 *)(a1 + 688) = result;
  return result;
}

__n128 sub_CA6580(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = (void *)(a2 + 8);
  int v5 = (void *)(a1 + 8);
  if (*(unsigned char *)a2)
  {
    void *v5 = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    void *v4 = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    long long v6 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v6;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 32) = 0;
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 104) = 0;
    sub_CA624C(a1 + 112, (long long *)(a2 + 112));
    int v7 = *(unsigned __int8 *)(a2 + 848);
    *(unsigned char *)(a1 + 848) = v7;
    if (v7)
    {
      *(void *)(a1 + 840) = 0;
      *(_OWORD *)(a1 + 824) = 0u;
      *(void *)(a1 + 824) = *(void *)(a2 + 824);
      *(void *)(a1 + 832) = *(void *)(a2 + 832);
      *(void *)(a1 + 840) = *(void *)(a2 + 840);
      *(void *)(a2 + 840) = 0;
      *(_OWORD *)(a2 + 824) = 0u;
    }
    __n128 result = *(__n128 *)(a2 + 856);
    *(__n128 *)(a1 + 856) = result;
  }
  else
  {
    *(_OWORD *)int v5 = *(_OWORD *)v4;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 24) = 0;
    __n128 result = *(__n128 *)(a2 + 24);
    *(__n128 *)(a1 + 24) = result;
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  }
  return result;
}

uint64_t sub_CA66E0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 12);
  if (v4)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    char v4 = 1;
  }
  *(unsigned char *)(a1 + 12) = v4;
  sub_CA681C((void *)(a1 + 16), a2 + 16);
  int v5 = (void **)(a1 + 72);
  long long v6 = *(char **)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  if (v6)
  {
    int v7 = *(char **)(a1 + 80);
    uint64_t v8 = v6;
    if (v7 != v6)
    {
      do
      {
        uint64_t v9 = (void *)*((void *)v7 - 6);
        if (v9)
        {
          *((void *)v7 - 5) = v9;
          operator delete(v9);
        }
        if (*(v7 - 57) < 0) {
          operator delete(*((void **)v7 - 10));
        }
        v7 -= 80;
      }
      while (v7 != v6);
      uint64_t v8 = *v5;
    }
    *(void *)(a1 + 80) = v6;
    operator delete(v8);
    void *v5 = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  sub_CA6B20((void *)(a1 + 104), a2 + 104);
  uint64_t v10 = *(void **)(a1 + 160);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  if (v10)
  {
    *(void *)(a1 + 168) = v10;
    operator delete(v10);
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  return a1;
}

double sub_CA681C(void *a1, uint64_t a2)
{
  char v4 = (void **)a1[1];
  uint64_t v5 = a1[2];
  a1[5] = 0;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v7 = a1[2];
      char v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      unint64_t v6 = v7 - (void)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    uint64_t v8 = 64;
  }
  else
  {
    if (v6 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v8 = 128;
  }
  a1[4] = v8;
LABEL_8:
  sub_CA68F8(a1);
  uint64_t v10 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 != v10) {
    a1[2] = v9 + ((v10 - v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  sub_CA69EC((uint64_t)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 32);
  a1[3] = *(void *)(a2 + 24);
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  a1[4] = v11;
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_CA68F8(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2)
  {
    unint64_t v3 = a1[4];
    char v4 = (void **)a1[1];
    if (v3 >= 0x80)
    {
      operator delete(*v4);
      char v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      uint64_t v2 = a1[5];
      unint64_t v3 = a1[4] - 128;
      a1[4] = v3;
    }
    uint64_t v5 = (void **)a1[2];
    if (v5 == v4) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = 16 * ((char *)v5 - (char *)v4) - 1;
    }
    if (v6 - (v2 + v3) >= 0x80)
    {
      operator delete(*(v5 - 1));
      a1[2] -= 8;
    }
    uint64_t v7 = (uint64_t)a1;
  }
  else
  {
    uint64_t v8 = a1[2];
    if (v8 != a1[1])
    {
      do
      {
        operator delete(*(void **)(v8 - 8));
        uint64_t v9 = a1[1];
        uint64_t v8 = a1[2] - 8;
        a1[2] = v8;
      }
      while (v8 != v9);
    }
    a1[4] = 0;
    uint64_t v7 = (uint64_t)a1;
  }
  sub_CA69EC(v7);
}

void sub_CA69EC(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 16);
  uint64_t v2 = *(void **)a1;
  unint64_t v3 = *(char **)(a1 + 8);
  int64_t v4 = v1 - v3;
  unint64_t v5 = (v1 - v3) >> 3;
  if (v5 >= (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 3) {
    return;
  }
  if (v1 == v3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 8 * v5;
    goto LABEL_13;
  }
  if (v4 < 0) {
    sub_188D718();
  }
  uint64_t v7 = operator new(v1 - v3);
  uint64_t v8 = (uint64_t)&v7[v5];
  if ((unint64_t)(v4 - 8) < 0x18)
  {
    uint64_t v9 = v7;
    do
    {
LABEL_12:
      uint64_t v17 = *(void *)v3;
      v3 += 8;
      *v9++ = v17;
    }
    while (v9 != (void *)v8);
    goto LABEL_13;
  }
  uint64_t v9 = v7;
  if ((unint64_t)((char *)v7 - v3) < 0x20) {
    goto LABEL_12;
  }
  uint64_t v10 = 0;
  unint64_t v11 = ((unint64_t)(v4 - 8) >> 3) + 1;
  uint64_t v12 = v11 & 0x3FFFFFFFFFFFFFFCLL;
  uint64_t v9 = &v7[v12];
  long long v13 = &v3[v12 * 8];
  uint64_t v14 = v11 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    __n128 v15 = &v7[v10];
    long long v16 = *(_OWORD *)&v3[v10 * 8 + 16];
    _OWORD *v15 = *(_OWORD *)&v3[v10 * 8];
    v15[1] = v16;
    v10 += 4;
    v14 -= 4;
  }
  while (v14);
  unint64_t v3 = v13;
  if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_12;
  }
LABEL_13:
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v8;
  if (v2)
  {
    operator delete(v2);
  }
}

double sub_CA6B20(void *a1, uint64_t a2)
{
  int64_t v4 = (void **)a1[1];
  uint64_t v5 = a1[2];
  a1[5] = 0;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v7 = a1[2];
      int64_t v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      unint64_t v6 = v7 - (void)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    uint64_t v8 = 85;
  }
  else
  {
    if (v6 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v8 = 170;
  }
  a1[4] = v8;
LABEL_8:
  sub_CA6BFC(a1);
  uint64_t v10 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 != v10) {
    a1[2] = v9 + ((v10 - v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  sub_CA6CF8((uint64_t)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 32);
  a1[3] = *(void *)(a2 + 24);
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  a1[4] = v11;
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_CA6BFC(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2)
  {
    unint64_t v3 = a1[4];
    int64_t v4 = (void **)a1[1];
    if (v3 >= 0xAA)
    {
      operator delete(*v4);
      int64_t v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      uint64_t v2 = a1[5];
      unint64_t v3 = a1[4] - 170;
      a1[4] = v3;
    }
    uint64_t v5 = (void **)a1[2];
    if (v5 == v4) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = 170 * (v5 - v4) - 1;
    }
    if (v6 - (v2 + v3) >= 0xAA)
    {
      operator delete(*(v5 - 1));
      a1[2] -= 8;
    }
    uint64_t v7 = (uint64_t)a1;
  }
  else
  {
    uint64_t v8 = a1[2];
    if (v8 != a1[1])
    {
      do
      {
        operator delete(*(void **)(v8 - 8));
        uint64_t v9 = a1[1];
        uint64_t v8 = a1[2] - 8;
        a1[2] = v8;
      }
      while (v8 != v9);
    }
    a1[4] = 0;
    uint64_t v7 = (uint64_t)a1;
  }
  sub_CA6CF8(v7);
}

void sub_CA6CF8(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 16);
  uint64_t v2 = *(void **)a1;
  unint64_t v3 = *(char **)(a1 + 8);
  int64_t v4 = v1 - v3;
  unint64_t v5 = (v1 - v3) >> 3;
  if (v5 >= (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 3) {
    return;
  }
  if (v1 == v3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 8 * v5;
    goto LABEL_13;
  }
  if (v4 < 0) {
    sub_188D718();
  }
  uint64_t v7 = operator new(v1 - v3);
  uint64_t v8 = (uint64_t)&v7[v5];
  if ((unint64_t)(v4 - 8) < 0x18)
  {
    uint64_t v9 = v7;
    do
    {
LABEL_12:
      uint64_t v17 = *(void *)v3;
      v3 += 8;
      *v9++ = v17;
    }
    while (v9 != (void *)v8);
    goto LABEL_13;
  }
  uint64_t v9 = v7;
  if ((unint64_t)((char *)v7 - v3) < 0x20) {
    goto LABEL_12;
  }
  uint64_t v10 = 0;
  unint64_t v11 = ((unint64_t)(v4 - 8) >> 3) + 1;
  uint64_t v12 = v11 & 0x3FFFFFFFFFFFFFFCLL;
  uint64_t v9 = &v7[v12];
  long long v13 = &v3[v12 * 8];
  uint64_t v14 = v11 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    __n128 v15 = &v7[v10];
    long long v16 = *(_OWORD *)&v3[v10 * 8 + 16];
    _OWORD *v15 = *(_OWORD *)&v3[v10 * 8];
    v15[1] = v16;
    v10 += 4;
    v14 -= 4;
  }
  while (v14);
  unint64_t v3 = v13;
  if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_12;
  }
LABEL_13:
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v8;
  if (v2)
  {
    operator delete(v2);
  }
}

uint64_t sub_CA6E2C(uint64_t a1, uint64_t a2)
{
  int64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = v4;
    if ((void *)v5 != v4)
    {
      do
        uint64_t v5 = sub_4451C0(v5 - 480);
      while ((void *)v5 != v4);
      uint64_t v6 = *(void **)a1;
    }
    *(void *)(a1 + 8) = v4;
    operator delete(v6);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v7);
  }
  long long v8 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)uint64_t v7 = v8;
  *(unsigned char *)(a2 + 47) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  uint64_t v9 = (void **)(a1 + 56);
  uint64_t v10 = *(char **)(a1 + 56);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  if (v10)
  {
    unint64_t v11 = *(char **)(a1 + 64);
    uint64_t v12 = v10;
    if (v11 != v10)
    {
      long long v13 = *(char **)(a1 + 64);
      do
      {
        __n128 v15 = (void *)*((void *)v13 - 3);
        v13 -= 24;
        uint64_t v14 = v15;
        if (v15)
        {
          *((void *)v11 - 2) = v14;
          operator delete(v14);
        }
        unint64_t v11 = v13;
      }
      while (v13 != v10);
      uint64_t v12 = *v9;
    }
    *(void *)(a1 + 64) = v10;
    operator delete(v12);
    void *v9 = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  sub_C7EA10((void **)(a1 + 80), (__n128 *)(a2 + 80));
  sub_CA0FF4(a1 + 104, a2 + 104);
  long long v16 = (void **)(a1 + 816);
  if (*(unsigned char *)(a2 + 840))
  {
    uint64_t v17 = (void *)(a2 + 816);
    if (*(unsigned char *)(a1 + 840))
    {
      long long v21 = *v16;
      if (*v16)
      {
        *(void *)(a1 + 824) = v21;
        operator delete(v21);
        uint64_t *v16 = 0;
        *(void *)(a1 + 824) = 0;
        *(void *)(a1 + 832) = 0;
      }
      *(_OWORD *)(a1 + 816) = *(_OWORD *)(a2 + 816);
      *(void *)(a1 + 832) = *(void *)(a2 + 832);
      void *v17 = 0;
      *(void *)(a2 + 824) = 0;
      *(void *)(a2 + 832) = 0;
    }
    else
    {
      uint64_t *v16 = 0;
      *(void *)(a1 + 824) = 0;
      *(void *)(a1 + 832) = 0;
      *(_OWORD *)(a1 + 816) = *(_OWORD *)(a2 + 816);
      *(void *)(a1 + 832) = *(void *)(a2 + 832);
      void *v17 = 0;
      *(void *)(a2 + 824) = 0;
      *(void *)(a2 + 832) = 0;
      *(unsigned char *)(a1 + 840) = 1;
    }
  }
  else if (*(unsigned char *)(a1 + 840))
  {
    long long v20 = *v16;
    if (*v16)
    {
      *(void *)(a1 + 824) = v20;
      operator delete(v20);
    }
    *(unsigned char *)(a1 + 840) = 0;
  }
  uint64_t v18 = *(void *)(a2 + 848);
  *(_WORD *)(a1 + 856) = *(_WORD *)(a2 + 856);
  *(void *)(a1 + 848) = v18;
  return a1;
}

uint64_t sub_CA701C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 840))
  {
    uint64_t v2 = *(void **)(a1 + 816);
    if (v2)
    {
      *(void *)(a1 + 824) = v2;
      operator delete(v2);
    }
    *(unsigned char *)(a1 + 840) = 0;
  }
  sub_4BCC2C(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 88);
    uint64_t v5 = *(void **)(a1 + 80);
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = *(void **)(v4 - 32);
        if (v6)
        {
          *(void *)(v4 - 24) = v6;
          operator delete(v6);
        }
        uint64_t v7 = *(void **)(v4 - 56);
        if (v7)
        {
          *(void *)(v4 - 48) = v7;
          operator delete(v7);
        }
        long long v8 = *(void **)(v4 - 88);
        if (v8)
        {
          *(void *)(v4 - 80) = v8;
          operator delete(v8);
        }
        v4 -= 160;
      }
      while (v4 != v3);
      uint64_t v5 = *(void **)(a1 + 80);
    }
    *(void *)(a1 + 88) = v3;
    operator delete(v5);
  }
  uint64_t v9 = *(void *)(a1 + 56);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 64);
    unint64_t v11 = *(void **)(a1 + 56);
    if (v10 != v9)
    {
      uint64_t v12 = *(void *)(a1 + 64);
      do
      {
        uint64_t v14 = *(void **)(v12 - 24);
        v12 -= 24;
        long long v13 = v14;
        if (v14)
        {
          *(void *)(v10 - 16) = v13;
          operator delete(v13);
        }
        uint64_t v10 = v12;
      }
      while (v12 != v9);
      unint64_t v11 = *(void **)(a1 + 56);
    }
    *(void *)(a1 + 64) = v9;
    operator delete(v11);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    __n128 v15 = *(void **)a1;
    if (!*(void *)a1) {
      return a1;
    }
  }
  else
  {
    __n128 v15 = *(void **)a1;
    if (!*(void *)a1) {
      return a1;
    }
  }
  uint64_t v17 = *(void *)(a1 + 8);
  uint64_t v18 = v15;
  if ((void *)v17 != v15)
  {
    do
      uint64_t v17 = sub_4451C0(v17 - 480);
    while ((void *)v17 != v15);
    uint64_t v18 = *(void **)a1;
  }
  *(void *)(a1 + 8) = v15;
  operator delete(v18);
  return a1;
}

uint64_t sub_CA7184(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 4);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v6 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1C71C71C71C71C7) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(144 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v19 = (uint64_t)&v7[144 * v3];
  long long v20 = &v7[144 * v6];
  sub_48990C(v19, a2);
  uint64_t v8 = v19 + 144;
  uint64_t v10 = (char *)*a1;
  uint64_t v9 = (char *)a1[1];
  if (v9 == (char *)*a1)
  {
    *a1 = v19;
    a1[1] = v8;
    a1[2] = (uint64_t)v20;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = &v9[v11];
      uint64_t v13 = v19 + v11;
      *(void *)(v13 - 144) = *(void *)&v9[v11 - 144];
      *(void *)(v13 - 136) = 0;
      *(void *)(v13 - 128) = 0;
      *(void *)(v13 - 120) = 0;
      *(_OWORD *)(v13 - 136) = *(_OWORD *)&v9[v11 - 136];
      *(void *)(v13 - 120) = *(void *)&v9[v11 - 120];
      *((void *)v12 - 17) = 0;
      *((void *)v12 - 16) = 0;
      *((void *)v12 - 15) = 0;
      *(void *)(v13 - 112) = 0;
      *(void *)(v13 - 104) = 0;
      *(void *)(v13 - 96) = 0;
      *(_OWORD *)(v13 - 112) = *(_OWORD *)&v9[v11 - 112];
      *(void *)(v13 - 96) = *(void *)&v9[v11 - 96];
      *((void *)v12 - 14) = 0;
      *((void *)v12 - 13) = 0;
      long long v14 = *(_OWORD *)&v9[v11 - 88];
      uint64_t v15 = *(void *)&v9[v11 - 72];
      *((void *)v12 - 12) = 0;
      *(void *)(v13 - 72) = v15;
      *(_OWORD *)(v13 - 88) = v14;
      *((void *)v12 - 10) = 0;
      *((void *)v12 - 9) = 0;
      *((void *)v12 - 11) = 0;
      *(void *)(v13 - 64) = 0;
      *(void *)(v13 - 56) = 0;
      *(void *)(v13 - 48) = 0;
      *(_OWORD *)(v13 - 64) = *(_OWORD *)&v9[v11 - 64];
      *(void *)(v13 - 48) = *(void *)&v9[v11 - 48];
      *((void *)v12 - 7) = 0;
      *((void *)v12 - 6) = 0;
      *((void *)v12 - 8) = 0;
      long long v16 = *(_OWORD *)&v9[v11 - 40];
      *(void *)(v13 - 16) = 0;
      *(void *)(v13 - 8) = 0;
      *(_OWORD *)(v13 - 40) = v16;
      *(void *)(v13 - 24) = 0;
      *(_OWORD *)(v13 - 24) = *(_OWORD *)&v9[v11 - 24];
      *(void *)(v13 - 8) = *(void *)&v9[v11 - 8];
      *((void *)v12 - 3) = 0;
      *((void *)v12 - 2) = 0;
      *((void *)v12 - 1) = 0;
      v11 -= 144;
    }
    while (&v9[v11] != v10);
    uint64_t v17 = (char *)*a1;
    uint64_t v9 = (char *)a1[1];
    *a1 = v19 + v11;
    a1[1] = v8;
    a1[2] = (uint64_t)v20;
    if (v9 != v17)
    {
      do
        uint64_t v9 = (char *)sub_489CF4((uint64_t)(v9 - 144));
      while (v9 != v17);
      uint64_t v9 = v17;
    }
  }
  if (v9) {
    operator delete(v9);
  }
  return v19 + 144;
}

void sub_CA73A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_493C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CA73BC()
{
  unk_25E13FF = 16641;
  word_25E13E8 = 65;
  byte_25E1417 = 1;
  byte_25E1401 = 0;
}

double sub_CA73E4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_725D0((uint64_t)v18);
  unint64_t v6 = sub_497CC0(&v17, a2);
  sub_8E238C((uint64_t)v6, a1, (uint64_t)&v14);
  double v16 = sub_72688((uint64_t)v18);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v12);
    sub_188FC78(v12, (uint64_t)"PlaceGuidanceModule took ", 25);
    uint64_t v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" ms", 3);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v11 < 0) {
      operator delete(__p);
    }
    if (v13 < 0) {
      operator delete((void *)v12[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  *(unsigned char *)a3 = 1;
  double result = *(double *)&v14;
  *(_OWORD *)(a3 + 8) = v14;
  double v9 = v16;
  *(void *)(a3 + 24) = v15;
  *(double *)(a3 + 32) = v9;
  return result;
}

void sub_CA75B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_8E3354((void **)(v15 - 112));
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_8E3354((void **)(v15 - 112));
  _Unwind_Resume(a1);
}

double sub_CA762C()
{
  byte_25E142F = 1;
  word_25E1418 = 65;
  byte_25E1447 = 1;
  word_25E1430 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E14D8 = 0u;
  *(_OWORD *)&qword_25E14E8 = 0u;
  dword_25E14F8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E14D8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E14D8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E14D8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E14D8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E145F = 8;
  strcpy((char *)&qword_25E1448, "any_mode");
  byte_25E1477 = 7;
  strcpy((char *)&dword_25E1460, "cycling");
  byte_25E148F = 7;
  strcpy((char *)&dword_25E1478, "driving");
  byte_25E14A7 = 7;
  strcpy((char *)&dword_25E1490, "walking");
  qword_25E14B0 = 0;
  qword_25E14B8 = 0;
  qword_25E14A8 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E14A8 = (uint64_t)v0;
  qword_25E14B0 = (uint64_t)(v0 + 9);
  qword_25E14B8 = (uint64_t)(v0 + 9);
  qword_25E14C0 = 0;
  qword_25E14C8 = 0;
  unk_25E14D0 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25E14C8 = (uint64_t)(v1 + 9);
  unk_25E14D0 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E14C0 = (uint64_t)v1;
  return result;
}

void sub_CA78F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E14E8) {
    sub_20AF35C((void **)qword_25E14E8);
  }
  double v37 = (void *)xmmword_25E14D8;
  *(void *)&xmmword_25E14D8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_CA7994(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 1592);
  uint64_t v7 = *(void *)(a1 + 1584);
  unint64_t v35 = 0;
  double v36 = 0;
  uint64_t v37 = 0;
  unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 7);
  sub_CA8704((char **)&v35, v33);
  if (v6 != v7)
  {
    unint64_t v8 = 0;
    double v9 = v36;
    do
    {
      uint64_t v10 = *(void *)(a1 + 1584);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 1592) - v10) >> 7) <= v8) {
        sub_66748();
      }
      uint64_t v11 = *a2;
      if (0x86BCA1AF286BCA1BLL * ((a2[1] - *a2) >> 3) <= v8) {
        sub_66748();
      }
      uint64_t v12 = sub_CA8CE0(a3, v8);
      char v13 = (_DWORD *)v12;
      int v14 = (int *)(v11 + 152 * v8);
      uint64_t v15 = v10 + 384 * v8;
      if (*(_DWORD *)(v15 + 376) == 4) {
        int v14 = (int *)v12;
      }
      int v40 = *v14;
      sub_8ECA08((uint64_t)v42, v15);
      uint64_t v16 = v11 + 152 * v8;
      int v17 = *(_DWORD *)(v16 + 4);
      sub_8EB944(&__p, (uint64_t *)(v16 + 8));
      sub_8EB074((uint64_t)v41, (uint64_t)v42, &v40, v17, (uint64_t *)&__p, (uint64_t *)(v11 + 152 * v8 + 56), (uint64_t *)(v11 + 152 * v8 + 32), v11 + 152 * v8 + 80, *(_DWORD *)(v11 + 152 * v8 + 104), v11 + 152 * v8 + 112, v13);
      uint64_t v18 = (void **)__p;
      if (__p)
      {
        uint64_t v19 = v39;
        long long v20 = __p;
        if (v39 != __p)
        {
          long long v21 = v39;
          do
          {
            int v24 = (char *)*(v21 - 4);
            v21 -= 4;
            uint64_t v23 = v24;
            if (v24)
            {
              unsigned int v25 = (char *)*(v19 - 3);
              long long v22 = v23;
              if (v25 != v23)
              {
                do
                {
                  int v26 = (void *)*((void *)v25 - 3);
                  if (v26)
                  {
                    *((void *)v25 - 2) = v26;
                    operator delete(v26);
                  }
                  BOOL v27 = (void *)*((void *)v25 - 7);
                  if (v27)
                  {
                    *((void *)v25 - 6) = v27;
                    operator delete(v27);
                  }
                  v25 -= 56;
                }
                while (v25 != v23);
                long long v22 = *v21;
              }
              *(v19 - 3) = v23;
              operator delete(v22);
            }
            uint64_t v19 = v21;
          }
          while (v21 != v18);
          long long v20 = __p;
        }
        uint64_t v39 = v18;
        operator delete(v20);
      }
      switch(v49)
      {
        case 2:
          sub_402C7C((uint64_t)v42);
          break;
        case 1:
          sub_8EB894((uint64_t)v42);
          break;
        case 0:
          if (v47)
          {
            uint64_t v48 = v47;
            operator delete(v47);
          }
          if (v45)
          {
            uint64_t v46 = v45;
            operator delete(v45);
          }
          if (v43)
          {
            int v44 = v43;
            operator delete(v43);
          }
          break;
      }
      double v9 = sub_CA8F20((uint64_t *)&v35, (uint64_t)v9, (uint64_t)v41) + 1632;
      sub_CA8AA8((uint64_t)v41);
      ++v8;
    }
    while (v8 != v33);
  }
  int v28 = *(_DWORD *)(a1 + 8);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  sub_CA9F6C(a4, (uint64_t)v35, (uint64_t)v36, 0xFAFAFAFAFAFAFAFBLL * ((v36 - (unsigned char *)v35) >> 5));
  *(_DWORD *)(a4 + 24) = v28;
  sub_4BBDC0(a4 + 32, a1 + 32);
  *(_OWORD *)(a4 + 1568) = *(_OWORD *)(a1 + 1568);
  *(_OWORD *)(a4 + 1584) = *(_OWORD *)(a1 + 12);
  uint64_t v29 = (char *)v35;
  if (v35)
  {
    uint64_t v30 = v36;
    BOOL v31 = v35;
    if (v36 != v35)
    {
      do
        uint64_t v30 = (char *)sub_CA8AA8((uint64_t)(v30 - 1632));
      while (v30 != v29);
      BOOL v31 = v35;
    }
    double v36 = v29;
    operator delete(v31);
  }
}

void sub_CA7CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  if (*v8) {
    sub_20AF3A0(a6);
  }
  sub_CA7E2C((void **)va);
  _Unwind_Resume(a1);
}

void sub_CA7D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, void *a17)
{
  if (!__p) {
    _Unwind_Resume(a1);
  }
  uint64_t v18 = (uint64_t)a17;
  uint64_t v19 = __p;
  if (a17 != __p)
  {
    do
      uint64_t v18 = sub_CA8AA8(v18 - 1632);
    while ((void *)v18 != __p);
    uint64_t v19 = __p;
  }
  operator delete(v19);
  _Unwind_Resume(a1);
}

void **sub_CA7E2C(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    char v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_CA8AA8(v3 - 1632);
      while ((void *)v3 != v2);
      char v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_CA7E88(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v15 = 0;
  *(_OWORD *)long long __p = 0u;
  long long v14 = 0u;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    unint64_t v8 = 0;
    do
    {
      sub_C9C424(1, (uint64_t)&v16);
      unint64_t v8 = sub_C9BC2C((char **)__p, v8, &v16) + 1064;
      sub_3AFFFC((uint64_t)&v17);
      v6 += 152;
    }
    while (v6 != v7);
  }
  sub_CA7994(a1, a2, __p, a3);
  double v9 = (char *)__p[0];
  if (__p[0])
  {
    uint64_t v10 = (char *)__p[1];
    uint64_t v11 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        uint64_t v12 = v10 - 1064;
        sub_3AFFFC((uint64_t)(v10 - 1056));
        uint64_t v10 = v12;
      }
      while (v12 != v9);
      uint64_t v11 = __p[0];
    }
    __p[1] = v9;
    operator delete(v11);
  }
}

void sub_CA7FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_CA7FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_3AFFFC(v9);
  sub_C9B098(&a9);
  _Unwind_Resume(a1);
}

void sub_CA7FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_CA7FE8(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 1592);
  uint64_t v6 = *(void *)(a1 + 1584);
  uint64_t v23 = 0;
  int v24 = 0;
  uint64_t v25 = 0;
  unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 7);
  sub_CA8704((char **)&v23, v22);
  if (v5 != v6)
  {
    unint64_t v7 = 0;
    unint64_t v8 = v24;
    while (1)
    {
      uint64_t v9 = *a2;
      if (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) <= v7) {
        sub_66748();
      }
      uint64_t v10 = v9 + 40 * v7;
      uint64_t v12 = *(char **)(v10 + 8);
      uint64_t v11 = *(char **)(v10 + 16);
      int v26 = 0;
      BOOL v27 = 0;
      int v28 = 0;
      uint64_t v13 = v11 - v12;
      if (v11 != v12)
      {
        if (v13 < 0) {
          sub_2E00();
        }
        long long v14 = (char *)operator new(v11 - v12);
        int v26 = v14;
        BOOL v27 = v14;
        int v28 = &v14[8 * (v13 >> 3)];
        do
        {
          v30[0] = *(void *)v12;
          long long v14 = sub_9D25FC((unint64_t *)&v26, v14, v30) + 8;
          v12 += 8;
        }
        while (v12 != v11);
      }
      uint64_t v15 = *(void *)(a1 + 1584);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 1592) - v15) >> 7) <= v7) {
        sub_66748();
      }
      sub_8ECA08((uint64_t)v30, v15 + 384 * v7);
      sub_8EB34C((uint64_t)v29, (uint64_t)v30, (_DWORD *)(v9 + 40 * v7), (uint64_t)&v26, *(unsigned char *)(v9 + 40 * v7 + 32));
      if (v37 == 2) {
        break;
      }
      if (v37 == 1)
      {
        sub_8EB894((uint64_t)v30);
      }
      else if (!v37)
      {
        if (__p)
        {
          double v36 = __p;
          operator delete(__p);
        }
        if (v33)
        {
          int v34 = v33;
          operator delete(v33);
        }
        if (v31)
        {
          uint64_t v32 = v31;
          operator delete(v31);
          int v16 = (char *)v26;
          if (!v26) {
            goto LABEL_22;
          }
          goto LABEL_21;
        }
      }
      int v16 = (char *)v26;
      if (v26) {
        goto LABEL_21;
      }
LABEL_22:
      unint64_t v8 = sub_CA8F20((uint64_t *)&v23, (uint64_t)v8, (uint64_t)v29) + 1632;
      sub_CA8AA8((uint64_t)v29);
      if (++v7 == v22) {
        goto LABEL_26;
      }
    }
    sub_402C7C((uint64_t)v30);
    int v16 = (char *)v26;
    if (!v26) {
      goto LABEL_22;
    }
LABEL_21:
    BOOL v27 = v16;
    operator delete(v16);
    goto LABEL_22;
  }
LABEL_26:
  int v17 = *(_DWORD *)(a1 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  sub_CA9F6C(a3, (uint64_t)v23, (uint64_t)v24, 0xFAFAFAFAFAFAFAFBLL * ((v24 - (unsigned char *)v23) >> 5));
  *(_DWORD *)(a3 + 24) = v17;
  sub_4BBDC0(a3 + 32, a1 + 32);
  *(_OWORD *)(a3 + 1568) = *(_OWORD *)(a1 + 1568);
  *(_OWORD *)(a3 + 1584) = *(_OWORD *)(a1 + 12);
  uint64_t v18 = (char *)v23;
  if (v23)
  {
    uint64_t v19 = v24;
    long long v20 = v23;
    if (v24 != v23)
    {
      do
        uint64_t v19 = (char *)sub_CA8AA8((uint64_t)(v19 - 1632));
      while (v19 != v18);
      long long v20 = v23;
    }
    int v24 = v18;
    operator delete(v20);
  }
}

void sub_CA82E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (*v5) {
    sub_20AF3A0(a4);
  }
  sub_CA7E2C((void **)va);
  _Unwind_Resume(a1);
}

void sub_CA8318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, void *a14)
{
  if (!__p) {
    _Unwind_Resume(a1);
  }
  uint64_t v15 = (uint64_t)a14;
  int v16 = __p;
  if (a14 != __p)
  {
    do
      uint64_t v15 = sub_CA8AA8(v15 - 1632);
    while ((void *)v15 != __p);
    int v16 = __p;
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_CA841C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  sub_CA8704((char **)&v11, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 1592) - *(void *)(a1 + 1584)) >> 7));
  uint64_t v4 = *(void *)(a1 + 1584);
  uint64_t v5 = *(void *)(a1 + 1592);
  if (v4 != v5)
  {
    uint64_t v6 = v12;
    do
    {
      sub_8ECA08((uint64_t)v15, v4);
      sub_8EB350((uint64_t)v14, (uint64_t)v15);
      switch(v22)
      {
        case 2:
          sub_402C7C((uint64_t)v15);
          break;
        case 1:
          sub_8EB894((uint64_t)v15);
          break;
        case 0:
          if (__p)
          {
            long long v21 = __p;
            operator delete(__p);
          }
          if (v18)
          {
            uint64_t v19 = v18;
            operator delete(v18);
          }
          if (v16)
          {
            int v17 = v16;
            operator delete(v16);
          }
          break;
      }
      uint64_t v6 = sub_CA8F20((uint64_t *)&v11, (uint64_t)v6, (uint64_t)v14) + 1632;
      sub_CA8AA8((uint64_t)v14);
      v4 += 384;
    }
    while (v4 != v5);
  }
  int v7 = *(_DWORD *)(a1 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  sub_CA9F6C(a2, (uint64_t)v11, (uint64_t)v12, 0xFAFAFAFAFAFAFAFBLL * ((v12 - (unsigned char *)v11) >> 5));
  *(_DWORD *)(a2 + 24) = v7;
  sub_4BBDC0(a2 + 32, a1 + 32);
  *(_OWORD *)(a2 + 1568) = *(_OWORD *)(a1 + 1568);
  *(_OWORD *)(a2 + 1584) = *(_OWORD *)(a1 + 12);
  unint64_t v8 = (char *)v11;
  if (v11)
  {
    uint64_t v9 = v12;
    uint64_t v10 = v11;
    if (v12 != v11)
    {
      do
        uint64_t v9 = (char *)sub_CA8AA8((uint64_t)(v9 - 1632));
      while (v9 != v8);
      uint64_t v10 = v11;
    }
    uint64_t v12 = v8;
    operator delete(v10);
  }
}

void sub_CA85F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  if (*v9) {
    sub_20AF3A0((uint64_t)v9);
  }
  sub_CA7E2C(&a9);
  _Unwind_Resume(a1);
}

void sub_CA8628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, void *a10)
{
  if (!__p) {
    _Unwind_Resume(a1);
  }
  uint64_t v11 = (uint64_t)a10;
  uint64_t v12 = __p;
  if (a10 != __p)
  {
    do
      uint64_t v11 = sub_CA8AA8(v11 - 1632);
    while ((void *)v11 != __p);
    uint64_t v12 = __p;
  }
  operator delete(v12);
  _Unwind_Resume(a1);
}

void sub_CA8704(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0xFAFAFAFAFAFAFAFBLL * ((a1[2] - *a1) >> 5) >= a2) {
    return;
  }
  if (a2 >= 0x28282828282829) {
    sub_2E00();
  }
  uint64_t v4 = (uint64_t)a1[1];
  uint64_t v5 = 1632 * a2;
  uint64_t v6 = (char *)operator new(1632 * a2);
  int v7 = &v6[v5];
  unint64_t v8 = &v6[v4 - (void)v2];
  if ((char *)v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v9 = (uint64_t)&v6[v4 - (void)v2];
  do
  {
    v4 -= 1632;
    uint64_t v9 = sub_CA8878(v9 - 1632, v4);
  }
  while ((char *)v4 != v2);
  uint64_t v10 = *a1;
  uint64_t v2 = a1[1];
  *a1 = (char *)v9;
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v10)
  {
    do
    {
      v2 -= 1632;
      sub_CA8AA8((uint64_t)v2);
    }
    while (v2 != v10);
    uint64_t v2 = v10;
  }
  if (v2)
  {
LABEL_10:
    operator delete(v2);
  }
}

uint64_t sub_CA8824(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 1632;
    sub_CA8AA8(i - 1632);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_CA8878(uint64_t a1, uint64_t a2)
{
  sub_CA89F0(a1, a2);
  *(void *)(v4 + 384) = *(void *)(a2 + 384);
  *(void *)(v4 + 392) = 0;
  *(void *)(v4 + 400) = 0;
  *(void *)(v4 + 408) = 0;
  uint64_t v5 = *(void *)(a2 + 400);
  *(void *)(v4 + 392) = *(void *)(a2 + 392);
  *(void *)(v4 + 400) = v5;
  *(void *)(v4 + 408) = *(void *)(a2 + 408);
  *(void *)(a2 + 392) = 0;
  *(void *)(a2 + 400) = 0;
  *(void *)(a2 + 408) = 0;
  *(void *)(v4 + 416) = 0;
  *(void *)(v4 + 424) = 0;
  *(void *)(v4 + 432) = 0;
  *(_OWORD *)(v4 + 416) = *(_OWORD *)(a2 + 416);
  *(void *)(v4 + 432) = *(void *)(a2 + 432);
  *(void *)(a2 + 416) = 0;
  *(void *)(a2 + 424) = 0;
  *(void *)(a2 + 432) = 0;
  *(void *)(v4 + 440) = 0;
  *(void *)(v4 + 448) = 0;
  *(void *)(v4 + 456) = 0;
  uint64_t v6 = *(void *)(a2 + 448);
  *(void *)(v4 + 440) = *(void *)(a2 + 440);
  *(void *)(v4 + 448) = v6;
  *(void *)(v4 + 456) = *(void *)(a2 + 456);
  *(void *)(a2 + 440) = 0;
  *(void *)(a2 + 448) = 0;
  *(void *)(a2 + 456) = 0;
  *(void *)(v4 + 464) = 0;
  *(void *)(v4 + 472) = 0;
  *(void *)(v4 + 480) = 0;
  *(_OWORD *)(v4 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(v4 + 480) = *(void *)(a2 + 480);
  *(void *)(a2 + 464) = 0;
  *(void *)(a2 + 472) = 0;
  *(void *)(a2 + 480) = 0;
  *(_DWORD *)(v4 + 488) = *(_DWORD *)(a2 + 488);
  uint64_t v7 = *(void *)(a2 + 496);
  *(void *)(a2 + 496) = 0;
  *(void *)(v4 + 496) = v7;
  *(void *)(v4 + 504) = *(void *)(a2 + 504);
  *(void *)(a2 + 504) = 0;
  uint64_t v8 = *(void *)(a2 + 512);
  *(void *)(v4 + 512) = v8;
  uint64_t v9 = *(void *)(a2 + 520);
  *(void *)(v4 + 520) = v9;
  *(_DWORD *)(v4 + 528) = *(_DWORD *)(a2 + 528);
  if (v9)
  {
    unint64_t v10 = *(void *)(v8 + 8);
    unint64_t v11 = *(void *)(a1 + 504);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        v10 %= v11;
      }
    }
    else
    {
      v10 &= v11 - 1;
    }
    *(void *)(v7 + 8 * v10) = a1 + 512;
    *(void *)(a2 + 512) = 0;
    *(void *)(a2 + 520) = 0;
  }
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(void *)(a2 + 552) = 0;
  *(_OWORD *)(a2 + 536) = 0u;
  *(unsigned char *)(a1 + 560) = *(unsigned char *)(a2 + 560);
  *(_DWORD *)(a1 + 568) = *(_DWORD *)(a2 + 568);
  sub_463750(a1 + 576, a2 + 576);
  return a1;
}

__n128 sub_CA89F0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 376) = *(_DWORD *)(a2 + 376);
  int v4 = *(_DWORD *)(a2 + 376);
  if (v4 == 2)
  {
    sub_48381C(a1, a2);
  }
  else if (v4 == 1)
  {
    sub_8EB7C4((void *)a1, a2);
    int v6 = *(unsigned __int8 *)(a2 + 368);
    *(unsigned char *)(a1 + 368) = v6;
    if (v6) {
      sub_8EB7C4((void *)(a1 + 184), a2 + 184);
    }
  }
  else if (v4)
  {
    if ((v4 - 3) <= 1)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
  }
  else
  {
    sub_8EB5F0(a1, (long long *)a2);
  }
  return result;
}

uint64_t sub_CA8AA8(uint64_t a1)
{
  sub_3AFFFC(a1 + 576);
  uint64_t v2 = *(void **)(a1 + 536);
  if (v2)
  {
    *(void *)(a1 + 544) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(char **)(a1 + 512);
  if (v3)
  {
    do
    {
      unint64_t v10 = *(char **)v3;
      sub_57AC8((uint64_t *)v3 + 5);
      if (v3[39] < 0) {
        operator delete(*((void **)v3 + 2));
      }
      operator delete(v3);
      uint64_t v3 = v10;
    }
    while (v10);
  }
  int v4 = *(void **)(a1 + 496);
  *(void *)(a1 + 496) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 464);
  if (v5)
  {
    *(void *)(a1 + 472) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void *)(a1 + 440);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 448);
    uint64_t v8 = *(void **)(a1 + 440);
    if (v7 != v6)
    {
      uint64_t v9 = *(void *)(a1 + 448);
      do
      {
        uint64_t v12 = *(void **)(v9 - 48);
        v9 -= 48;
        unint64_t v11 = v12;
        if (v12)
        {
          *(void *)(v7 - 40) = v11;
          operator delete(v11);
        }
        uint64_t v7 = v9;
      }
      while (v9 != v6);
      uint64_t v8 = *(void **)(a1 + 440);
    }
    *(void *)(a1 + 448) = v6;
    operator delete(v8);
  }
  uint64_t v13 = *(void **)(a1 + 416);
  if (v13)
  {
    long long v14 = *(void **)(a1 + 424);
    uint64_t v15 = *(void **)(a1 + 416);
    if (v14 != v13)
    {
      do
        long long v14 = sub_8EC658(v14 - 15);
      while (v14 != v13);
      uint64_t v15 = *(void **)(a1 + 416);
    }
    *(void *)(a1 + 424) = v13;
    operator delete(v15);
  }
  int v16 = *(void ***)(a1 + 392);
  if (v16)
  {
    int v17 = *(void ***)(a1 + 400);
    uint64_t v18 = *(void **)(a1 + 392);
    if (v17 != v16)
    {
      uint64_t v19 = *(void ***)(a1 + 400);
      do
      {
        int v22 = (char *)*(v19 - 4);
        v19 -= 4;
        long long v21 = v22;
        if (v22)
        {
          uint64_t v23 = (char *)*(v17 - 3);
          long long v20 = v21;
          if (v23 != v21)
          {
            do
            {
              int v24 = (void *)*((void *)v23 - 3);
              if (v24)
              {
                *((void *)v23 - 2) = v24;
                operator delete(v24);
              }
              uint64_t v25 = (void *)*((void *)v23 - 7);
              if (v25)
              {
                *((void *)v23 - 6) = v25;
                operator delete(v25);
              }
              v23 -= 56;
            }
            while (v23 != v21);
            long long v20 = *v19;
          }
          *(v17 - 3) = v21;
          operator delete(v20);
        }
        int v17 = v19;
      }
      while (v19 != v16);
      uint64_t v18 = *(void **)(a1 + 392);
    }
    *(void *)(a1 + 400) = v16;
    operator delete(v18);
  }
  int v26 = *(_DWORD *)(a1 + 376);
  switch(v26)
  {
    case 2:
      return sub_402C7C(a1);
    case 1:
      return sub_8EB894(a1);
    case 0:
      BOOL v27 = *(void **)(a1 + 96);
      if (v27)
      {
        *(void *)(a1 + 104) = v27;
        operator delete(v27);
      }
      int v28 = *(void **)(a1 + 72);
      if (v28)
      {
        *(void *)(a1 + 80) = v28;
        operator delete(v28);
      }
      uint64_t v29 = *(void **)(a1 + 24);
      if (v29)
      {
        *(void *)(a1 + 32) = v29;
        operator delete(v29);
      }
      break;
  }
  return a1;
}

uint64_t sub_CA8CE0(void *a1, unint64_t a2)
{
  if (0x133F84CFE133F84DLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0x133F84CFE133F84DLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v10 = &v15;
    }
    else {
      unint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    long long v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 1064 * a2;
}

void sub_CA8E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

char *sub_CA8F20(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = (a2 - *a1) / 1632;
  uint64_t v8 = (char *)(*a1 + 1632 * v7);
  unint64_t v9 = a1[2];
  if (v6 >= v9)
  {
    unint64_t v15 = 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(v6 - v5) >> 5) + 1;
    if (v15 > 0x28282828282828) {
      sub_2E00();
    }
    unint64_t v16 = 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(v9 - v5) >> 5);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x14141414141414) {
      unint64_t v17 = 0x28282828282828;
    }
    else {
      unint64_t v17 = v15;
    }
    uint64_t v33 = a1 + 2;
    if (v17)
    {
      if (v17 > 0x28282828282828) {
        sub_188D718();
      }
      std::string v18 = (char *)operator new(1632 * v17);
    }
    else
    {
      std::string v18 = 0;
    }
    uint64_t v29 = v18;
    uint64_t v30 = &v18[1632 * v7];
    BOOL v31 = v30;
    uint64_t v32 = &v18[1632 * v17];
    sub_CA93E0((uint64_t)&v29, a3);
    long long v19 = v30;
    uint64_t v20 = *a1;
    uint64_t v21 = (uint64_t)v30;
    if ((char *)*a1 != v8)
    {
      uint64_t v22 = (uint64_t)v8;
      uint64_t v21 = (uint64_t)v30;
      do
      {
        v22 -= 1632;
        uint64_t v21 = sub_CA8878(v21 - 1632, v22);
      }
      while (v22 != v20);
    }
    uint64_t v30 = (char *)v21;
    uint64_t v23 = (char *)a1[1];
    uint64_t v24 = (uint64_t)v31;
    if (v23 != v8)
    {
      do
      {
        sub_CA8878(v24, (uint64_t)v8);
        v8 += 1632;
        v24 += 1632;
      }
      while (v8 != v23);
      uint64_t v21 = (uint64_t)v30;
      uint64_t v8 = (char *)a1[1];
    }
    uint64_t v25 = (char *)*a1;
    *a1 = v21;
    a1[1] = v24;
    int v26 = (char *)a1[2];
    a1[2] = (uint64_t)v32;
    BOOL v31 = v8;
    uint64_t v32 = v26;
    uint64_t v29 = v25;
    uint64_t v30 = v25;
    if (v8 != v25)
    {
      do
      {
        BOOL v31 = v8 - 1632;
        sub_CA8AA8((uint64_t)(v8 - 1632));
        uint64_t v8 = v31;
      }
      while (v31 != v25);
      uint64_t v8 = v29;
    }
    if (v8) {
      operator delete(v8);
    }
    return v19;
  }
  else
  {
    if (v8 != (char *)v6)
    {
      unint64_t v10 = v8 + 1632;
      uint64_t v11 = v6 - 1632;
      if (v6 < 0x660)
      {
        a1[1] = v6;
        if ((char *)v6 == v10)
        {
LABEL_34:
          sub_CA91FC((uint64_t)v8, a3);
          return v8;
        }
      }
      else
      {
        unint64_t v12 = v6 - 1632;
        uint64_t v13 = a1[1];
        do
        {
          uint64_t v14 = sub_CA8878(v13, v12);
          v12 += 1632;
          uint64_t v13 = v14 + 1632;
        }
        while (v12 < v6);
        a1[1] = v13;
        if ((char *)v6 == v10) {
          goto LABEL_34;
        }
      }
      uint64_t v27 = 32 * ((uint64_t)(v6 - (void)v10) >> 5);
      do
      {
        sub_CA91FC(v11, v5 + 1632 * v7 - 1632 + v27);
        v11 -= 1632;
        v27 -= 1632;
      }
      while (v27);
      goto LABEL_34;
    }
    sub_CA8878(*a1 + 1632 * v7, a3);
    a1[1] = (uint64_t)(v8 + 1632);
  }
  return v8;
}

void sub_CA91E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_CA8824((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_CA91FC(uint64_t a1, uint64_t a2)
{
  sub_CA95CC(a1, a2);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  sub_CA9EA4((void ***)(a1 + 392));
  uint64_t v4 = *(void *)(a2 + 400);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a1 + 400) = v4;
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a2 + 392) = 0;
  *(void *)(a2 + 400) = 0;
  *(void *)(a2 + 408) = 0;
  uint64_t v5 = *(void **)(a1 + 416);
  if (v5)
  {
    unint64_t v6 = (void **)(a1 + 416);
    uint64_t v7 = *(void **)(a1 + 424);
    uint64_t v8 = *(void **)(a1 + 416);
    if (v7 != v5)
    {
      do
        uint64_t v7 = sub_8EC658(v7 - 15);
      while (v7 != v5);
      uint64_t v8 = *v6;
    }
    *(void *)(a1 + 424) = v5;
    operator delete(v8);
    std::string *v6 = 0;
    *(void *)(a1 + 424) = 0;
    *(void *)(a1 + 432) = 0;
  }
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(void *)(a2 + 416) = 0;
  *(void *)(a2 + 424) = 0;
  *(void *)(a2 + 432) = 0;
  uint64_t v9 = *(void *)(a1 + 440);
  if (v9)
  {
    unint64_t v10 = (void **)(a1 + 440);
    uint64_t v11 = *(void *)(a1 + 448);
    unint64_t v12 = *(void **)(a1 + 440);
    if (v11 != v9)
    {
      uint64_t v13 = *(void *)(a1 + 448);
      do
      {
        unint64_t v15 = *(void **)(v13 - 48);
        v13 -= 48;
        uint64_t v14 = v15;
        if (v15)
        {
          *(void *)(v11 - 40) = v14;
          operator delete(v14);
        }
        uint64_t v11 = v13;
      }
      while (v13 != v9);
      unint64_t v12 = *v10;
    }
    *(void *)(a1 + 448) = v9;
    operator delete(v12);
    char *v10 = 0;
    *(void *)(a1 + 448) = 0;
    *(void *)(a1 + 456) = 0;
  }
  uint64_t v16 = *(void *)(a2 + 448);
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(void *)(a1 + 448) = v16;
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(void *)(a2 + 440) = 0;
  *(void *)(a2 + 448) = 0;
  *(void *)(a2 + 456) = 0;
  unint64_t v17 = *(void **)(a1 + 464);
  if (v17)
  {
    *(void *)(a1 + 472) = v17;
    operator delete(v17);
    *(void *)(a1 + 464) = 0;
    *(void *)(a1 + 472) = 0;
    *(void *)(a1 + 480) = 0;
  }
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(void *)(a2 + 464) = 0;
  *(void *)(a2 + 472) = 0;
  *(void *)(a2 + 480) = 0;
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
  sub_62BDC(a1 + 496, (uint64_t *)(a2 + 496));
  std::string v18 = *(void **)(a1 + 536);
  if (v18)
  {
    *(void *)(a1 + 544) = v18;
    operator delete(v18);
    *(void *)(a1 + 536) = 0;
    *(void *)(a1 + 544) = 0;
    *(void *)(a1 + 552) = 0;
  }
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(void *)(a2 + 552) = 0;
  *(_OWORD *)(a2 + 536) = 0u;
  *(unsigned char *)(a1 + 560) = *(unsigned char *)(a2 + 560);
  *(_DWORD *)(a1 + 568) = *(_DWORD *)(a2 + 568);
  sub_8E5980(a1 + 576, a2 + 576);
  return a1;
}

uint64_t sub_CA93E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != *(void *)(a1 + 24)) {
    goto LABEL_22;
  }
  unint64_t v6 = *(void **)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 <= *(void *)a1)
  {
    unint64_t v12 = 0xF5F5F5F5F5F5F5F6 * ((v4 - (uint64_t)v6) >> 5);
    if ((void *)v4 == v6) {
      unint64_t v12 = 1;
    }
    if (v12 >= 0x28282828282829) {
      sub_188D718();
    }
    unint64_t v13 = v12 >> 2;
    uint64_t v14 = 1632 * v12;
    unint64_t v15 = (char *)operator new(1632 * v12);
    uint64_t v16 = v15;
    unint64_t v17 = &v15[1632 * v13];
    std::string v18 = &v15[v14];
    if (v4 == v5)
    {
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v17;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = v18;
      if (!v6) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v19 = (uint64_t)(v4 - v5) / 1632;
      uint64_t v20 = &v17[1632 * v19];
      uint64_t v21 = 1632 * v19;
      uint64_t v22 = (uint64_t)v17;
      do
      {
        uint64_t v22 = sub_CA8878(v22, v5) + 1632;
        v5 += 1632;
        v21 -= 1632;
      }
      while (v21);
      unint64_t v6 = *(void **)a1;
      uint64_t v23 = *(void *)(a1 + 8);
      uint64_t v24 = *(void *)(a1 + 16);
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v17;
      *(void *)(a1 + 16) = v20;
      for (*(void *)(a1 + 24) = v18; v24 != v23; uint64_t v24 = sub_CA8AA8(v24 - 1632))
        ;
      if (!v6) {
        goto LABEL_19;
      }
    }
    operator delete(v6);
LABEL_19:
    uint64_t v4 = *(void *)(a1 + 16);
    goto LABEL_22;
  }
  int64_t v7 = 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(v5 - *(void *)a1) >> 5);
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -v9;
  if (v5 == v4)
  {
    uint64_t v11 = v5 - 1632 * v9;
  }
  else
  {
    do
    {
      sub_CA91FC(v5 + 1632 * v10, v5);
      v5 += 1632;
    }
    while (v5 != v4);
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v11 = v5 + 1632 * v10;
  }
  *(void *)(a1 + 8) = v4 + 1632 * v10;
  *(void *)(a1 + 16) = v11;
  uint64_t v4 = v11;
LABEL_22:
  uint64_t result = sub_CA8878(v4, a2);
  *(void *)(a1 + 16) += 1632;
  return result;
}

uint64_t sub_CA95CC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (result == a2) {
    return v2;
  }
  int v4 = *(_DWORD *)(result + 376);
  int v5 = *(_DWORD *)(a2 + 376);
  if (v4 != v5)
  {
    if (v4 == 2)
    {
      sub_402C7C(result);
    }
    else if (v4 == 1)
    {
      sub_8EB894(result);
    }
    else
    {
      if (v4) {
        goto LABEL_24;
      }
      unint64_t v6 = *(void **)(result + 96);
      if (v6)
      {
        *(void *)(v2 + 104) = v6;
        operator delete(v6);
      }
      int64_t v7 = *(void **)(v2 + 72);
      if (v7)
      {
        *(void *)(v2 + 80) = v7;
        operator delete(v7);
      }
      uint64_t v8 = *(void **)(v2 + 24);
      if (v8)
      {
        *(void *)(v2 + 32) = v8;
        operator delete(v8);
      }
    }
    int v5 = *(_DWORD *)(a2 + 376);
LABEL_24:
    if (v5 == 2)
    {
      sub_48381C(v2, a2);
    }
    else if (v5 == 1)
    {
      sub_8EB7C4((void *)v2, a2);
      int v9 = *(unsigned __int8 *)(a2 + 368);
      *(unsigned char *)(v2 + 368) = v9;
      if (v9) {
        sub_8EB7C4((void *)(v2 + 184), a2 + 184);
      }
    }
    else if (v5)
    {
      if ((v5 - 3) <= 1)
      {
        *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
        *(_DWORD *)(v2 + 376) = *(_DWORD *)(a2 + 376);
        return v2;
      }
    }
    else
    {
      sub_8EB5F0(v2, (long long *)a2);
    }
    *(_DWORD *)(v2 + 376) = *(_DWORD *)(a2 + 376);
    return v2;
  }
  switch(v4)
  {
    case 2:
      sub_CA9BA0(result, (uint64_t *)a2);
      return v2;
    case 1:
      sub_CA98C4(result, (uint64_t *)a2);
      sub_CA9A10(v2 + 184, a2 + 184);
      return v2;
    case 0:
      sub_CA9798(result, (long long *)a2);
      return v2;
    default:
      if ((v4 - 3) > 1) {
        return v2;
      }
      *(_OWORD *)uint64_t result = *(_OWORD *)a2;
      break;
  }
  return result;
}

uint64_t sub_CA9798(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 14) = *(void *)((char *)a2 + 14);
  *(_OWORD *)a1 = v4;
  unint64_t v6 = (void *)(a1 + 24);
  int v5 = *(void **)(a1 + 24);
  int64_t v7 = (void *)a2 + 3;
  if (v5)
  {
    *(void *)(a1 + 32) = v5;
    operator delete(v5);
    void *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
  uint64_t v8 = *((void *)a2 + 6);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  void *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  *(void *)(a1 + 48) = v8;
  if ((long long *)a1 != a2)
  {
    unsigned int v9 = *(_DWORD *)(a1 + 64);
    unsigned int v10 = *((_DWORD *)a2 + 16);
    if (v9 == v10)
    {
      if (v9 <= 5) {
        *(void *)(a1 + 56) = *((void *)a2 + 7);
      }
    }
    else
    {
      if (v10 <= 5)
      {
        *(void *)(a1 + 56) = *((void *)a2 + 7);
        unsigned int v10 = *((_DWORD *)a2 + 16);
      }
      *(_DWORD *)(a1 + 64) = v10;
    }
  }
  uint64_t v11 = *(void **)(a1 + 72);
  if (v11)
  {
    *(void *)(a1 + 80) = v11;
    operator delete(v11);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(long long *)((char *)a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 11) = 0;
  unint64_t v12 = *(void **)(a1 + 96);
  if (v12)
  {
    *(void *)(a1 + 104) = v12;
    operator delete(v12);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  return a1;
}

uint64_t sub_CA98C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  long long v5 = *((_OWORD *)a2 + 1);
  long long v6 = *((_OWORD *)a2 + 2);
  long long v7 = *((_OWORD *)a2 + 3);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)((char *)a2 + 63);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 16) = v5;
  unsigned int v9 = (void *)(a1 + 72);
  uint64_t v8 = *(void **)(a1 + 72);
  if (v8)
  {
    *(void *)(a1 + 80) = v8;
    operator delete(v8);
    void *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
  *(void *)(a1 + 88) = a2[11];
  a2[9] = 0;
  a2[10] = 0;
  a2[11] = 0;
  int v10 = *((_DWORD *)a2 + 24);
  uint64_t v11 = *(void **)(a1 + 104);
  *(unsigned char *)(a1 + 100) = *((unsigned char *)a2 + 100);
  *(_DWORD *)(a1 + 96) = v10;
  if (v11)
  {
    *(void *)(a1 + 112) = v11;
    operator delete(v11);
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
  *(void *)(a1 + 120) = a2[15];
  a2[13] = 0;
  a2[14] = 0;
  a2[15] = 0;
  unint64_t v12 = *(void **)(a1 + 128);
  if (v12)
  {
    *(void *)(a1 + 136) = v12;
    operator delete(v12);
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
  }
  *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
  *(void *)(a1 + 144) = a2[18];
  a2[16] = 0;
  a2[17] = 0;
  a2[18] = 0;
  int v13 = *((_DWORD *)a2 + 38);
  uint64_t v14 = *(void **)(a1 + 160);
  *(_DWORD *)(a1 + 155) = *(_DWORD *)((char *)a2 + 155);
  *(_DWORD *)(a1 + 152) = v13;
  if (v14)
  {
    *(void *)(a1 + 168) = v14;
    operator delete(v14);
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
  }
  *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
  *(void *)(a1 + 176) = a2[22];
  a2[20] = 0;
  a2[21] = 0;
  a2[22] = 0;
  return a1;
}

uint64_t sub_CA9A10(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 184))
  {
    sub_CA9B34(a1);
    return a1;
  }
  if (!*(unsigned char *)(a1 + 184))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    long long v3 = *(_OWORD *)(a2 + 16);
    long long v4 = *(_OWORD *)(a2 + 32);
    long long v5 = *(_OWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
    *(_OWORD *)(a1 + 32) = v4;
    *(_OWORD *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 16) = v3;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    int v6 = *(_DWORD *)(a2 + 96);
    *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
    *(_DWORD *)(a1 + 96) = v6;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 104) = 0;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a2 + 128) = 0;
    *(void *)(a2 + 136) = 0;
    *(void *)(a2 + 144) = 0;
    int v7 = *(_DWORD *)(a2 + 152);
    *(_DWORD *)(a1 + 155) = *(_DWORD *)(a2 + 155);
    *(_DWORD *)(a1 + 152) = v7;
    *(void *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 160) = 0;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(void *)(a2 + 160) = 0;
    *(void *)(a2 + 168) = 0;
    *(void *)(a2 + 176) = 0;
    *(unsigned char *)(a1 + 184) = 1;
    return a1;
  }
  sub_CA98C4(a1, (uint64_t *)a2);
  return a1;
}

void sub_CA9B34(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 184))
  {
    uint64_t v2 = *(void **)(a1 + 160);
    if (v2)
    {
      *(void *)(a1 + 168) = v2;
      operator delete(v2);
    }
    long long v3 = *(void **)(a1 + 128);
    if (v3)
    {
      *(void *)(a1 + 136) = v3;
      operator delete(v3);
    }
    long long v4 = *(void **)(a1 + 104);
    if (v4)
    {
      *(void *)(a1 + 112) = v4;
      operator delete(v4);
    }
    long long v5 = *(void **)(a1 + 72);
    if (v5)
    {
      *(void *)(a1 + 80) = v5;
      operator delete(v5);
    }
    *(unsigned char *)(a1 + 184) = 0;
  }
}

uint64_t sub_CA9BA0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  long long v5 = *((_OWORD *)a2 + 1);
  long long v6 = *((_OWORD *)a2 + 2);
  long long v7 = *((_OWORD *)a2 + 3);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)((char *)a2 + 63);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 16) = v5;
  unsigned int v9 = (void *)(a1 + 72);
  uint64_t v8 = *(void **)(a1 + 72);
  if (v8)
  {
    *(void *)(a1 + 80) = v8;
    operator delete(v8);
    void *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
  *(void *)(a1 + 88) = a2[11];
  a2[10] = 0;
  a2[11] = 0;
  a2[9] = 0;
  int v10 = *((_DWORD *)a2 + 24);
  *(unsigned char *)(a1 + 100) = *((unsigned char *)a2 + 100);
  *(_DWORD *)(a1 + 96) = v10;
  int v11 = *((_DWORD *)a2 + 28);
  *(void *)(a1 + 104) = a2[13];
  *(_DWORD *)(a1 + 112) = v11;
  unint64_t v12 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*v12);
  }
  long long v13 = *(_OWORD *)(a2 + 15);
  *(void *)(a1 + 136) = a2[17];
  *(_OWORD *)unint64_t v12 = v13;
  *((unsigned char *)a2 + 143) = 0;
  *((unsigned char *)a2 + 120) = 0;
  uint64_t v14 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*v14);
  }
  long long v15 = *((_OWORD *)a2 + 9);
  *(void *)(a1 + 160) = a2[20];
  *(_OWORD *)uint64_t v14 = v15;
  *((unsigned char *)a2 + 167) = 0;
  *((unsigned char *)a2 + 144) = 0;
  uint64_t v16 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*v16);
  }
  long long v17 = *(_OWORD *)(a2 + 21);
  *(void *)(a1 + 184) = a2[23];
  *(_OWORD *)uint64_t v16 = v17;
  *((unsigned char *)a2 + 191) = 0;
  *((unsigned char *)a2 + 168) = 0;
  std::string v18 = (void **)(a1 + 192);
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*v18);
  }
  long long v19 = *((_OWORD *)a2 + 12);
  *(void *)(a1 + 208) = a2[26];
  *(_OWORD *)std::string v18 = v19;
  *((unsigned char *)a2 + 215) = 0;
  *((unsigned char *)a2 + 192) = 0;
  uint64_t v20 = (void **)(a1 + 240);
  uint64_t v21 = *(char **)(a1 + 240);
  *(unsigned char *)(a1 + 216) = *((unsigned char *)a2 + 216);
  *(void *)(a1 + 224) = a2[28];
  *(void *)(a1 + 232) = a2[29];
  if (v21)
  {
    uint64_t v22 = *(char **)(a1 + 248);
    uint64_t v23 = v21;
    if (v22 != v21)
    {
      do
      {
        uint64_t v24 = (void *)*((void *)v22 - 4);
        if (v24)
        {
          *((void *)v22 - 3) = v24;
          operator delete(v24);
        }
        v22 -= 104;
      }
      while (v22 != v21);
      uint64_t v23 = *v20;
    }
    *(void *)(a1 + 248) = v21;
    operator delete(v23);
    char *v20 = 0;
    *(void *)(a1 + 248) = 0;
    *(void *)(a1 + 256) = 0;
  }
  *(_OWORD *)(a1 + 240) = *((_OWORD *)a2 + 15);
  *(void *)(a1 + 256) = a2[32];
  a2[30] = 0;
  a2[31] = 0;
  a2[32] = 0;
  uint64_t v25 = *(void **)(a1 + 264);
  if (v25)
  {
    *(void *)(a1 + 272) = v25;
    operator delete(v25);
    *(void *)(a1 + 264) = 0;
    *(void *)(a1 + 272) = 0;
    *(void *)(a1 + 280) = 0;
  }
  uint64_t v26 = a2[34];
  *(void *)(a1 + 264) = a2[33];
  *(void *)(a1 + 272) = v26;
  *(void *)(a1 + 280) = a2[35];
  a2[33] = 0;
  a2[34] = 0;
  a2[35] = 0;
  uint64_t v27 = *(void **)(a1 + 288);
  if (v27)
  {
    *(void *)(a1 + 296) = v27;
    operator delete(v27);
    *(void *)(a1 + 288) = 0;
    *(void *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0;
  }
  *(_OWORD *)(a1 + 288) = *((_OWORD *)a2 + 18);
  *(void *)(a1 + 304) = a2[38];
  a2[37] = 0;
  a2[38] = 0;
  a2[36] = 0;
  long long v28 = *(_OWORD *)(a2 + 39);
  *(void *)(a1 + 328) = a2[41];
  *(_OWORD *)(a1 + 312) = v28;
  uint64_t v29 = *(void *)(a1 + 336);
  if (v29)
  {
    uint64_t v30 = (void **)(a1 + 336);
    uint64_t v31 = *(void *)(a1 + 344);
    uint64_t v32 = *(void **)(a1 + 336);
    if (v31 != v29)
    {
      uint64_t v33 = *(void *)(a1 + 344);
      do
      {
        unint64_t v35 = *(void **)(v33 - 24);
        v33 -= 24;
        int v34 = v35;
        if (v35)
        {
          *(void *)(v31 - 16) = v34;
          operator delete(v34);
        }
        uint64_t v31 = v33;
      }
      while (v33 != v29);
      uint64_t v32 = *v30;
    }
    *(void *)(a1 + 344) = v29;
    operator delete(v32);
    char *v30 = 0;
    *(void *)(a1 + 344) = 0;
    *(void *)(a1 + 352) = 0;
  }
  *(_OWORD *)(a1 + 336) = *((_OWORD *)a2 + 21);
  *(void *)(a1 + 352) = a2[44];
  a2[42] = 0;
  a2[43] = 0;
  a2[44] = 0;
  *(_DWORD *)(a1 + 360) = *((_DWORD *)a2 + 90);
  *(void *)(a1 + 368) = a2[46];
  return a1;
}

void sub_CA9EA4(void ***a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    long long v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      long long v5 = v3;
      do
      {
        uint64_t v8 = (char *)*(v5 - 4);
        v5 -= 4;
        long long v7 = v8;
        if (v8)
        {
          unsigned int v9 = (char *)*(v3 - 3);
          long long v6 = v7;
          if (v9 != v7)
          {
            do
            {
              int v10 = (void *)*((void *)v9 - 3);
              if (v10)
              {
                *((void *)v9 - 2) = v10;
                operator delete(v10);
              }
              int v11 = (void *)*((void *)v9 - 7);
              if (v11)
              {
                *((void *)v9 - 6) = v11;
                operator delete(v11);
              }
              v9 -= 56;
            }
            while (v9 != v7);
            long long v6 = *v5;
          }
          *(v3 - 3) = v7;
          operator delete(v6);
        }
        long long v3 = v5;
      }
      while (v5 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_CA9F6C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x28282828282829) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(1632 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    uint64_t v5[2] = result + 1632 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_CAA0FC(v8 + v9, a2 + v9);
        v9 += 1632;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_CAA030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_CAA044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 1632)
    sub_CA8AA8(v10 - 1632 + v11);
  *(void *)(v9 + 8) = v10;
  sub_CAA074(&a9);
  _Unwind_Resume(a1);
}

void ***sub_CAA074(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    long long v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      long long v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_CA8AA8(v4 - 1632);
        while ((void *)v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_CAA0FC(uint64_t a1, uint64_t a2)
{
  sub_8EB534(a1, a2);
  *(void *)(v4 + 384) = *(void *)(a2 + 384);
  sub_8EB944((void *)(v4 + 392), (uint64_t *)(a2 + 392));
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  sub_8EBD78(a1 + 416, *(void *)(a2 + 416), *(void *)(a2 + 424), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 3));
  sub_8EC784((void *)(a1 + 440), (uint64_t *)(a2 + 440));
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  long long v6 = *(unsigned char **)(a2 + 464);
  long long v5 = *(unsigned char **)(a2 + 472);
  uint64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 464) = v8;
    *(void *)(a1 + 472) = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 480) = v9;
    memcpy(v8, v6, v7 - 3);
    *(void *)(a1 + 472) = v9;
  }
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
  sub_54214(a1 + 496, a2 + 496);
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  uint64_t v10 = *(unsigned char **)(a2 + 536);
  uint64_t v11 = *(unsigned char **)(a2 + 544);
  int64_t v12 = v11 - v10;
  if (v11 != v10)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    long long v13 = (char *)operator new(v11 - v10);
    *(void *)(a1 + 536) = v13;
    *(void *)(a1 + 544) = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 552) = v14;
    memcpy(v13, v10, v12);
    *(void *)(a1 + 544) = v14;
  }
  *(unsigned char *)(a1 + 560) = *(unsigned char *)(a2 + 560);
  *(_DWORD *)(a1 + 568) = *(_DWORD *)(a2 + 568);
  sub_7A3ACC(a1 + 576, a2 + 576);
  return a1;
}

void sub_CAA28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void ***a10)
{
  long long v17 = *v15;
  if (*v15)
  {
    *(void *)(v10 + 544) = v17;
    operator delete(v17);
  }
  sub_5450C(v14);
  std::string v18 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 472) = v18;
    operator delete(v18);
  }
  sub_8EAE48(v13);
  sub_8EAEC0(v12);
  sub_8EAF1C(a10);
  sub_8EAFE0(v10);
  _Unwind_Resume(a1);
}

void sub_CAA324()
{
  if (!*v0) {
    JUMPOUT(0xCAA2FCLL);
  }
  JUMPOUT(0xCAA2F4);
}

double sub_CAA334()
{
  byte_25E1517 = 1;
  word_25E1500 = 65;
  byte_25E152F = 1;
  word_25E1518 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E15C0 = 0u;
  *(_OWORD *)&qword_25E15D0 = 0u;
  dword_25E15E0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E15C0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E15C0, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E15C0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E15C0, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E1547 = 8;
  strcpy((char *)&qword_25E1530, "any_mode");
  byte_25E155F = 7;
  strcpy((char *)&dword_25E1548, "cycling");
  byte_25E1577 = 7;
  strcpy((char *)&dword_25E1560, "driving");
  byte_25E158F = 7;
  strcpy((char *)&dword_25E1578, "walking");
  qword_25E1598 = 0;
  qword_25E15A0 = 0;
  qword_25E1590 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E1590 = (uint64_t)v0;
  qword_25E1598 = (uint64_t)(v0 + 9);
  qword_25E15A0 = (uint64_t)(v0 + 9);
  qword_25E15A8 = 0;
  qword_25E15B0 = 0;
  unk_25E15B8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25E15B0 = (uint64_t)(v1 + 9);
  unk_25E15B8 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E15A8 = (uint64_t)v1;
  return result;
}

void sub_CAA5FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E15D0) {
    sub_20AF49C((void **)qword_25E15D0);
  }
  int v37 = (void *)xmmword_25E15C0;
  *(void *)&xmmword_25E15C0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

BOOL *sub_CAA69C(BOOL *a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "resolve_hiking_tour_muids");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93E0;
  strcpy((char *)__p[0], "augment_permissible_lines_by_grouping_style");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v5;
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "use_location_hints");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[2] = v6;
  return a1;
}

void sub_CAA7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_CAA7F0(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v14 = 0;
  long long v15 = operator new(0x20uLL);
  long long v16 = xmmword_20B91C0;
  strcpy((char *)v15, "PlaceRequestParserModule");
  long long __p = 0;
  char v13 = 0;
  int v8 = sub_374CDC(a2, (uint64_t)&v15, (uint64_t *)&__p);
  sub_CAA69C(v18, v8);
  v17.n128_u32[0] = 0;
  v17.n128_u64[1] = (unint64_t)std::generic_category();
  v19[0] = 0;
  sub_3E7814(v20, &v17);
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  uint64_t v23 = *(void *)sub_37D0C0(a2);
  char v24 = a3;
  sub_CAAA24((uint64_t)v18, a4);
  sub_CB1C20((uint64_t)v19);
  uint64_t v9 = (void **)__p;
  if (__p)
  {
    char v10 = v13;
    int v11 = __p;
    if (v13 != __p)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      int v11 = __p;
    }
    char v13 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15);
  }
}

void sub_CAA960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,__n128 a21)
{
  if (a2)
  {
    sub_CB1C20(v22);
    sub_1A668(&a10);
    if (a18 < 0) {
      operator delete(__p);
    }
    uint64_t v25 = (unsigned int *)__cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      unint64_t v26 = v25[2];
      *(unsigned char *)uint64_t v21 = 0;
      a21.n128_u64[0] = v26;
      a21.n128_u64[1] = (unint64_t)&off_2439090;
      sub_3E7814((__n128 *)(v21 + 8), &a21);
      __cxa_end_catch();
      JUMPOUT(0xCAA92CLL);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_CAAA24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v53);
  sub_CB285C((uint64_t)v54);
  LOBYTE(__t.__d_.__rep_) = 1;
  *(_OWORD *)int v60 = *(_OWORD *)v54;
  *(_OWORD *)&v60[12] = *(_OWORD *)&v54[12];
  sub_CB0CBC((uint64_t)v61, (uint64_t)v55);
  v61[96] = v55[96];
  v61[97] = __p;
  uint64_t v62 = v57;
  long long __p = 0u;
  uint64_t v57 = 0;
  uint64_t v63 = v58;
  sub_CAB244(a1 + 8, (uint64_t)&__t);
  sub_CB1C20((uint64_t)&__t);
  if ((void)__p)
  {
    sub_CB12E0((uint64_t)&__p, __p);
    operator delete((void *)__p);
  }
  sub_4BCED0((uint64_t)v55);
  uint64_t v4 = **(void **)(a1 + 1632);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v4 + 212);
  *(unsigned char *)(a1 + 20) = sub_DBCA74(v4);
  *(unsigned char *)(a1 + 21) = sub_DBCADC(**(void **)(a1 + 1632));
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  *(_DWORD *)(a1 + 24) = std::chrono::system_clock::to_time_t(&__t);
  sub_DBF790(**(void **)(a1 + 1632), *(void *)(a1 + 1640), (uint64_t)&__t);
  sub_CAB438(a1 + 48, (uint64_t)&__t);
  sub_4BCED0((uint64_t)&__t);
  sub_CAB808(a1);
  uint64_t v5 = **(void **)(a1 + 1632);
  switch(*(_DWORD *)(v5 + 212))
  {
    case 5:
      BOOL v6 = *(uint64_t (****)())(v5 + 192);
      if (!v6) {
        BOOL v6 = &off_254C5C8;
      }
      char v7 = (uint64_t (***)())v6[11];
      int v8 = &off_254AF08;
      if (v7) {
        int v8 = v7;
      }
      uint64_t v9 = *((int *)v8 + 12);
      if (v9)
      {
        char v10 = v8[7];
        uint64_t v11 = 8 * v9;
        do
        {
          int64_t v12 = (unsigned int *)nullsub_1(*v10);
          __t.__d_.__rep_ = -1;
          *(_DWORD *)int v60 = 0x7FFFFFFF;
          sub_CAD354(a1, (uint64_t)v12, v12, (uint64_t)&__t);
          ++v10;
          v11 -= 8;
        }
        while (v11);
        uint64_t v5 = **(void **)(a1 + 1632);
      }
      uint64_t v13 = sub_DADFE0(v5, 11);
      if (!v13) {
        goto LABEL_94;
      }
      uint64_t v14 = *(uint64_t (****)())(v13 + 24);
      if (!v14) {
        uint64_t v14 = &off_2547290;
      }
      long long v15 = (uint64_t (***)())v14[18];
      if (v15) {
        long long v16 = v15;
      }
      else {
        long long v16 = &off_2544E98;
      }
      if (v16[4]) {
        __n128 v17 = (uint64_t (***)())v16[4];
      }
      else {
        __n128 v17 = &off_2544448;
      }
      if (v17[3]) {
        std::string v18 = (uint64_t (***)())v17[3];
      }
      else {
        std::string v18 = &off_2544470;
      }
      break;
    case 0x15:
      uint64_t v22 = *(uint64_t (****)())(v5 + 192);
      if (!v22) {
        uint64_t v22 = &off_254C5C8;
      }
      uint64_t v23 = (uint64_t (***)())v22[27];
      if (v23) {
        char v24 = v23;
      }
      else {
        char v24 = &off_254B488;
      }
      uint64_t v25 = *((int *)v24 + 8);
      unint64_t v26 = v24[5];
      if (v26) {
        uint64_t v27 = (uint64_t **)(v26 + 1);
      }
      else {
        uint64_t v27 = 0;
      }
      if (v25)
      {
        uint64_t v28 = 8 * v25;
        do
        {
          sub_CAF7AC(a1, (unint64_t)v24[6] & 0xFFFFFFFFFFFFFFFELL, *v27++);
          v28 -= 8;
        }
        while (v28);
        uint64_t v5 = **(void **)(a1 + 1632);
      }
      uint64_t v29 = sub_DADFE0(v5, 11);
      if (!v29) {
        goto LABEL_94;
      }
      uint64_t v30 = *(uint64_t (****)())(v29 + 24);
      if (!v30) {
        uint64_t v30 = &off_2547290;
      }
      uint64_t v31 = (uint64_t (***)())v30[18];
      if (v31) {
        long long v16 = v31;
      }
      else {
        long long v16 = &off_2544E98;
      }
      if (v16[4]) {
        __n128 v17 = (uint64_t (***)())v16[4];
      }
      else {
        __n128 v17 = &off_2544448;
      }
      if (v17[3]) {
        std::string v18 = (uint64_t (***)())v17[3];
      }
      else {
        std::string v18 = &off_2544470;
      }
      break;
    case 0x17:
      sub_CACC00(a1);
      uint64_t v35 = sub_DADFE0(**(void **)(a1 + 1632), 11);
      if (!v35) {
        goto LABEL_94;
      }
      double v36 = *(uint64_t (****)())(v35 + 24);
      if (!v36) {
        double v36 = &off_2547290;
      }
      int v37 = (uint64_t (***)())v36[18];
      if (v37) {
        long long v16 = v37;
      }
      else {
        long long v16 = &off_2544E98;
      }
      if (v16[4]) {
        __n128 v17 = (uint64_t (***)())v16[4];
      }
      else {
        __n128 v17 = &off_2544448;
      }
      if (v17[3]) {
        std::string v18 = (uint64_t (***)())v17[3];
      }
      else {
        std::string v18 = &off_2544470;
      }
      break;
    case 0x25:
      uint64_t v38 = *(uint64_t (****)())(v5 + 192);
      if (!v38) {
        uint64_t v38 = &off_254C5C8;
      }
      uint64_t v39 = (uint64_t (***)())v38[42];
      int v40 = &off_254C298;
      if (v39) {
        int v40 = v39;
      }
      uint64_t v41 = *((int *)v40 + 4);
      if (v41)
      {
        uint64_t v42 = v40[3];
        uint64_t v43 = 8 * v41;
        do
        {
          int v44 = (unsigned int *)nullsub_1(*v42);
          sub_CB0448(a1, v44);
          ++v42;
          v43 -= 8;
        }
        while (v43);
      }
      goto LABEL_94;
    case 0x27:
      sub_CAB930(a1);
      uint64_t v19 = sub_DADFE0(**(void **)(a1 + 1632), 11);
      if (!v19) {
        goto LABEL_94;
      }
      uint64_t v20 = *(uint64_t (****)())(v19 + 24);
      if (!v20) {
        uint64_t v20 = &off_2547290;
      }
      uint64_t v21 = (uint64_t (***)())v20[18];
      if (v21) {
        long long v16 = v21;
      }
      else {
        long long v16 = &off_2544E98;
      }
      if (v16[4]) {
        __n128 v17 = (uint64_t (***)())v16[4];
      }
      else {
        __n128 v17 = &off_2544448;
      }
      if (v17[3]) {
        std::string v18 = (uint64_t (***)())v17[3];
      }
      else {
        std::string v18 = &off_2544470;
      }
      break;
    case 0x32:
      sub_CACDBC((int64x2_t *)a1);
      uint64_t v32 = sub_DADFE0(**(void **)(a1 + 1632), 11);
      if (!v32) {
        goto LABEL_94;
      }
      uint64_t v33 = *(uint64_t (****)())(v32 + 24);
      if (!v33) {
        uint64_t v33 = &off_2547290;
      }
      int v34 = (uint64_t (***)())v33[18];
      if (v34) {
        long long v16 = v34;
      }
      else {
        long long v16 = &off_2544E98;
      }
      if (v16[4]) {
        __n128 v17 = (uint64_t (***)())v16[4];
      }
      else {
        __n128 v17 = &off_2544448;
      }
      if (v17[3]) {
        std::string v18 = (uint64_t (***)())v17[3];
      }
      else {
        std::string v18 = &off_2544470;
      }
      break;
    case 0x39:
      sub_CAD10C(a1);
      goto LABEL_94;
    default:
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)&__t);
        uint64_t v46 = sub_188FC78(&__t, (uint64_t)"Place request parser module invoked with a request of unsupported type ", 71);
        uint64_t v47 = sub_1791E0C(*(_DWORD *)(**(void **)(a1 + 1632) + 212));
        int v48 = *((char *)v47 + 23);
        if (v48 >= 0) {
          uint64_t v49 = (uint64_t)v47;
        }
        else {
          uint64_t v49 = *v47;
        }
        if (v48 >= 0) {
          uint64_t v50 = *((unsigned __int8 *)v47 + 23);
        }
        else {
          uint64_t v50 = v47[1];
        }
        sub_188FC78(v46, v49, v50);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v54, 1u);
        if ((v54[23] & 0x80000000) != 0) {
          operator delete(*(void **)v54);
        }
        sub_111ECAC((uint64_t)&__t);
      }
      int v51 = *(unsigned __int8 *)(a1 + 1656);
      sub_5E5C(&__t, "PlaceRequestParserModule.Error.UnsupportedRequestType");
      sub_710A8(v51, (uint64_t)&__t, *(void *)(a1 + 1648));
      if ((v60[15] & 0x80000000) != 0) {
        operator delete((void *)__t.__d_.__rep_);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_243ED98;
      exception[2] = 1;
  }
  *(_DWORD *)(a1 + 1584) = sub_920D68((*((_DWORD *)v18 + 6) + 978307200));
  *(_DWORD *)(a1 + 1588) = 10 * *((_DWORD *)v18 + 7);
  *(_DWORD *)(a1 + 1592) = *((_DWORD *)v17 + 8);
  *(unsigned char *)(a1 + 1596) = *((unsigned char *)v16 + 48);
LABEL_94:
  *(double *)(a1 + 1624) = sub_72688((uint64_t)v53);
  return sub_CB14E4(a2, a1 + 8);
}

void sub_CAB0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&STACK[0x670]);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&STACK[0x670]);
  _Unwind_Resume(a1);
}

uint64_t sub_CAB244(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a2)
    {
      long long v4 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
      *(_OWORD *)(a1 + 8) = v4;
      sub_CAB438(a1 + 40, a2 + 40);
      uint64_t v5 = *(void *)(a2 + 1581);
      *(void *)(a1 + 1576) = *(void *)(a2 + 1576);
      *(void *)(a1 + 1581) = v5;
      uint64_t v6 = *(void *)(a1 + 1592);
      if (v6)
      {
        sub_CB12E0(a1 + 1592, v6);
        operator delete(*(void **)(a1 + 1592));
        *(void *)(a1 + 1592) = 0;
        *(void *)(a1 + 1600) = 0;
        *(void *)(a1 + 1608) = 0;
      }
      *(void *)(a1 + 1592) = *(void *)(a2 + 1592);
      *(void *)(a1 + 1600) = *(void *)(a2 + 1600);
      *(void *)(a1 + 1608) = *(void *)(a2 + 1608);
      *(void *)(a2 + 1608) = 0;
      *(_OWORD *)(a2 + 1592) = 0u;
LABEL_21:
      *(void *)(a1 + 1616) = *(void *)(a2 + 1616);
      goto LABEL_22;
    }
    int64_t v12 = (_OWORD *)(a2 + 8);
    uint64_t v13 = *(void *)(a1 + 1592);
    if (v13)
    {
      sub_CB12E0(a1 + 1592, v13);
      operator delete(*(void **)(a1 + 1592));
    }
    sub_4BCED0(a1 + 40);
    *(_OWORD *)(a1 + 8) = *v12;
  }
  else
  {
    char v7 = (long long *)(a1 + 8);
    int v8 = (long long *)(a2 + 8);
    if (*(unsigned char *)a2)
    {
      uint64_t v9 = *(void *)(a1 + 24);
      if (v9)
      {
        uint64_t v10 = *(void *)(a1 + 32);
        uint64_t v11 = *(void **)(a1 + 24);
        if (v10 != v9)
        {
          do
          {
            if (*(char *)(v10 - 1) < 0) {
              operator delete(*(void **)(v10 - 24));
            }
            v10 -= 32;
          }
          while (v10 != v9);
          uint64_t v11 = *(void **)(a1 + 24);
        }
        *(void *)(a1 + 32) = v9;
        operator delete(v11);
      }
      long long v14 = *v8;
      *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
      long long *v7 = v14;
      sub_CB0CBC(a1 + 40, a2 + 40);
      *(_OWORD *)(a1 + 1576) = *(_OWORD *)(a2 + 1576);
      *(void *)(a1 + 1592) = 0;
      *(_OWORD *)(a1 + 1600) = 0u;
      *(void *)(a1 + 1592) = *(void *)(a2 + 1592);
      *(void *)(a1 + 1600) = *(void *)(a2 + 1600);
      *(void *)(a1 + 1608) = *(void *)(a2 + 1608);
      *(void *)(a2 + 1608) = 0;
      *(_OWORD *)(a2 + 1592) = 0u;
      goto LABEL_21;
    }
    long long *v7 = *v8;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
LABEL_22:
  *(unsigned char *)a1 = *(unsigned char *)a2;
  return a1;
}

uint64_t sub_CAB438(uint64_t a1, uint64_t a2)
{
  sub_CA0FF4(a1, a2);
  sub_CB13A4(a1 + 712, (uint64_t *)(a2 + 712));
  sub_CB13A4(a1 + 752, (uint64_t *)(a2 + 752));
  sub_CB13A4(a1 + 792, (uint64_t *)(a2 + 792));
  sub_CB13A4(a1 + 832, (uint64_t *)(a2 + 832));
  sub_CB13A4(a1 + 872, (uint64_t *)(a2 + 872));
  sub_67501C(a1 + 912, (uint64_t *)(a2 + 912));
  uint64_t v4 = *(void *)(a2 + 952);
  *(unsigned char *)(a1 + 960) = *(unsigned char *)(a2 + 960);
  *(void *)(a1 + 952) = v4;
  *(_DWORD *)(a1 + 968) = *(_DWORD *)(a2 + 968);
  uint64_t v5 = *(void **)(a1 + 976);
  if (v5)
  {
    *(void *)(a1 + 984) = v5;
    operator delete(v5);
    *(void *)(a1 + 976) = 0;
    *(void *)(a1 + 984) = 0;
    *(void *)(a1 + 992) = 0;
  }
  *(_OWORD *)(a1 + 976) = *(_OWORD *)(a2 + 976);
  *(void *)(a1 + 992) = *(void *)(a2 + 992);
  *(void *)(a2 + 984) = 0;
  *(void *)(a2 + 992) = 0;
  *(void *)(a2 + 976) = 0;
  *(_DWORD *)(a1 + 1000) = *(_DWORD *)(a2 + 1000);
  uint64_t v6 = *(void **)(a1 + 1008);
  if (v6)
  {
    *(void *)(a1 + 1016) = v6;
    operator delete(v6);
    *(void *)(a1 + 1008) = 0;
    *(void *)(a1 + 1016) = 0;
    *(void *)(a1 + 1024) = 0;
  }
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
  *(void *)(a1 + 1024) = *(void *)(a2 + 1024);
  *(void *)(a2 + 1008) = 0;
  *(void *)(a2 + 1016) = 0;
  *(void *)(a2 + 1024) = 0;
  char v7 = (void **)(a1 + 1032);
  if (*(char *)(a1 + 1055) < 0) {
    operator delete(*v7);
  }
  long long v8 = *(_OWORD *)(a2 + 1032);
  *(void *)(a1 + 1048) = *(void *)(a2 + 1048);
  *(_OWORD *)char v7 = v8;
  *(unsigned char *)(a2 + 1055) = 0;
  *(unsigned char *)(a2 + 1032) = 0;
  *(unsigned char *)(a1 + 1056) = *(unsigned char *)(a2 + 1056);
  *(unsigned char *)(a1 + 1064) = *(unsigned char *)(a2 + 1064);
  uint64_t v9 = *(void **)(a1 + 1072);
  if (v9)
  {
    *(void *)(a1 + 1080) = v9;
    operator delete(v9);
    *(void *)(a1 + 1072) = 0;
    *(void *)(a1 + 1080) = 0;
    *(void *)(a1 + 1088) = 0;
  }
  *(_OWORD *)(a1 + 1072) = *(_OWORD *)(a2 + 1072);
  *(void *)(a1 + 1088) = *(void *)(a2 + 1088);
  *(void *)(a2 + 1080) = 0;
  *(void *)(a2 + 1088) = 0;
  *(void *)(a2 + 1072) = 0;
  *(_DWORD *)(a1 + 1096) = *(_DWORD *)(a2 + 1096);
  uint64_t v10 = *(void **)(a1 + 1104);
  if (v10)
  {
    *(void *)(a1 + 1112) = v10;
    operator delete(v10);
    *(void *)(a1 + 1104) = 0;
    *(void *)(a1 + 1112) = 0;
    *(void *)(a1 + 1120) = 0;
  }
  *(_OWORD *)(a1 + 1104) = *(_OWORD *)(a2 + 1104);
  *(void *)(a1 + 1120) = *(void *)(a2 + 1120);
  *(void *)(a2 + 1104) = 0;
  *(void *)(a2 + 1112) = 0;
  *(void *)(a2 + 1120) = 0;
  uint64_t v11 = *(void **)(a1 + 1128);
  if (v11)
  {
    operator delete(v11);
    *(void *)(a1 + 1128) = 0;
    *(void *)(a1 + 1136) = 0;
    *(void *)(a1 + 1144) = 0;
  }
  *(void *)(a1 + 1128) = *(void *)(a2 + 1128);
  *(void *)(a1 + 1136) = *(void *)(a2 + 1136);
  *(void *)(a1 + 1144) = *(void *)(a2 + 1144);
  *(void *)(a2 + 1128) = 0;
  *(void *)(a2 + 1136) = 0;
  *(void *)(a2 + 1144) = 0;
  int64_t v12 = *(void **)(a1 + 1152);
  if (v12)
  {
    operator delete(v12);
    *(void *)(a1 + 1152) = 0;
    *(void *)(a1 + 1160) = 0;
    *(void *)(a1 + 1168) = 0;
  }
  *(void *)(a1 + 1152) = *(void *)(a2 + 1152);
  *(void *)(a1 + 1160) = *(void *)(a2 + 1160);
  *(void *)(a1 + 1168) = *(void *)(a2 + 1168);
  *(void *)(a2 + 1160) = 0;
  *(void *)(a2 + 1168) = 0;
  *(void *)(a2 + 1152) = 0;
  *(_DWORD *)(a1 + 1176) = *(_DWORD *)(a2 + 1176);
  __int16 v13 = *(_WORD *)(a2 + 1184);
  *(unsigned char *)(a1 + 1186) = *(unsigned char *)(a2 + 1186);
  *(_WORD *)(a1 + 1184) = v13;
  long long v14 = (void **)(a1 + 1192);
  if (*(char *)(a1 + 1215) < 0) {
    operator delete(*v14);
  }
  long long v15 = *(_OWORD *)(a2 + 1192);
  *(void *)(a1 + 1208) = *(void *)(a2 + 1208);
  *(_OWORD *)long long v14 = v15;
  *(unsigned char *)(a2 + 1215) = 0;
  *(unsigned char *)(a2 + 1192) = 0;
  int v16 = *(_DWORD *)(a2 + 1224);
  *(void *)(a1 + 1216) = *(void *)(a2 + 1216);
  *(_DWORD *)(a1 + 1224) = v16;
  uint64_t v17 = *(void *)(a2 + 1237);
  *(void *)(a1 + 1232) = *(void *)(a2 + 1232);
  *(void *)(a1 + 1237) = v17;
  std::string v18 = *(void **)(a1 + 1248);
  if (v18)
  {
    *(void *)(a1 + 1256) = v18;
    operator delete(v18);
    *(void *)(a1 + 1248) = 0;
    *(void *)(a1 + 1256) = 0;
    *(void *)(a1 + 1264) = 0;
  }
  *(_OWORD *)(a1 + 1248) = *(_OWORD *)(a2 + 1248);
  *(void *)(a1 + 1264) = *(void *)(a2 + 1264);
  *(void *)(a2 + 1256) = 0;
  *(void *)(a2 + 1248) = 0;
  *(void *)(a2 + 1264) = 0;
  uint64_t v19 = *(void *)(a2 + 1272);
  *(_DWORD *)(a1 + 1280) = *(_DWORD *)(a2 + 1280);
  *(void *)(a1 + 1272) = v19;
  sub_62BDC(a1 + 1288, (uint64_t *)(a2 + 1288));
  *(_DWORD *)(a1 + 1328) = *(_DWORD *)(a2 + 1328);
  sub_62BDC(a1 + 1336, (uint64_t *)(a2 + 1336));
  *(_OWORD *)(a1 + 1376) = *(_OWORD *)(a2 + 1376);
  long long v20 = *(_OWORD *)(a2 + 1392);
  long long v21 = *(_OWORD *)(a2 + 1408);
  long long v22 = *(_OWORD *)(a2 + 1424);
  *(_OWORD *)(a1 + 1438) = *(_OWORD *)(a2 + 1438);
  *(_OWORD *)(a1 + 1424) = v22;
  *(_OWORD *)(a1 + 1408) = v21;
  *(_OWORD *)(a1 + 1392) = v20;
  uint64_t v23 = *(void **)(a1 + 1456);
  if (v23)
  {
    *(void *)(a1 + 1464) = v23;
    operator delete(v23);
    *(void *)(a1 + 1456) = 0;
    *(void *)(a1 + 1464) = 0;
    *(void *)(a1 + 1472) = 0;
  }
  *(_OWORD *)(a1 + 1456) = *(_OWORD *)(a2 + 1456);
  *(void *)(a1 + 1472) = *(void *)(a2 + 1472);
  *(void *)(a2 + 1464) = 0;
  *(void *)(a2 + 1472) = 0;
  *(void *)(a2 + 1456) = 0;
  __int16 v24 = *(_WORD *)(a2 + 1480);
  *(unsigned char *)(a1 + 1482) = *(unsigned char *)(a2 + 1482);
  *(_WORD *)(a1 + 1480) = v24;
  uint64_t v25 = (void **)(a1 + 1488);
  if (*(char *)(a1 + 1511) < 0) {
    operator delete(*v25);
  }
  long long v26 = *(_OWORD *)(a2 + 1488);
  *(void *)(a1 + 1504) = *(void *)(a2 + 1504);
  *(_OWORD *)uint64_t v25 = v26;
  *(unsigned char *)(a2 + 1511) = 0;
  *(unsigned char *)(a2 + 1488) = 0;
  long long v27 = *(_OWORD *)(a2 + 1512);
  *(void *)(a1 + 1528) = *(void *)(a2 + 1528);
  *(_OWORD *)(a1 + 1512) = v27;
  return a1;
}

BOOL sub_CAB808(uint64_t a1)
{
  uint64_t v2 = **(void **)(a1 + 1632);
  *(unsigned char *)(a1 + 28) = sub_DAE040(v2, 10);
  *(unsigned char *)(a1 + 29) = sub_DAE040(v2, 27);
  *(unsigned char *)(a1 + 30) = sub_DAE040(v2, 24);
  *(unsigned char *)(a1 + 31) = sub_DAE040(v2, 20);
  *(unsigned char *)(a1 + 32) = sub_DAE040(v2, 79);
  *(unsigned char *)(a1 + 33) = sub_DAE040(v2, 91);
  *(unsigned char *)(a1 + 34) = sub_DAE040(v2, 67);
  *(unsigned char *)(a1 + 35) = sub_DAE040(v2, 68);
  *(unsigned char *)(a1 + 36) = sub_DAE040(v2, 11);
  *(unsigned char *)(a1 + 37) = sub_DAE040(v2, 69);
  *(unsigned char *)(a1 + 38) = sub_DAE040(v2, 62);
  *(unsigned char *)(a1 + 39) = sub_DAE040(v2, 4);
  *(unsigned char *)(a1 + 40) = sub_DAE040(v2, 1);
  *(unsigned char *)(a1 + 41) = sub_DAE040(v2, 2);
  *(unsigned char *)(a1 + 42) = sub_DAE040(v2, 105);
  BOOL result = sub_DAE040(v2, 106);
  *(unsigned char *)(a1 + 43) = result;
  return result;
}

void sub_CAB930(uint64_t a1)
{
  uint64_t v2 = sub_375C38(*(void **)(a1 + 1640));
  uint64_t v144 = sub_3755E4(*(void **)(a1 + 1640));
  uint64_t v145 = a1;
  long long v3 = *(uint64_t (****)())(**(void **)(a1 + 1632) + 192);
  if (!v3) {
    long long v3 = &off_254C5C8;
  }
  uint64_t v4 = (uint64_t (***)())v3[44];
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = &off_25332F0;
  }
  uint64_t v6 = nullsub_1(v5[8]);
  char v7 = (unsigned int *)v6;
  if (sub_1882CC4((uint64_t)(v5 + 2), dword_254EC78))
  {
    uint64_t v8 = sub_1883224((uint64_t)(v5 + 2), dword_254EC78, qword_254EC80);
    char v7 = (unsigned int *)nullsub_1(v8);
  }
  *(void *)int v155 = -1;
  *(_DWORD *)&v155[8] = 0x7FFFFFFF;
  sub_CAD354(a1, v6, v7, (uint64_t)v155);
  uint64_t v9 = *(void *)(a1 + 1608);
  uint64_t v10 = (unsigned int *)nullsub_1(v5[9]);
  *(void *)int v155 = -1;
  *(_DWORD *)&v155[8] = 0x7FFFFFFF;
  unint64_t v11 = sub_2A2AD8(v2, v10, (uint64_t)v155);
  unint64_t v146 = v11;
  unint64_t v140 = HIDWORD(v11);
  if (v11) {
    BOOL v12 = HIDWORD(v11) == 0xFFFFFFFF;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v155);
      sub_188FC78(v155, (uint64_t)"The reference trip id (unencrypted: ", 36);
      uint64_t v121 = (void *)std::ostream::operator<<();
      sub_188FC78(v121, (uint64_t)") in the schedule lookup request parameters could not be resolved", 65);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (SHIBYTE(v154) < 0) {
        operator delete(__p);
      }
      sub_111ECAC((uint64_t)v155);
    }
    int v122 = *(unsigned __int8 *)(a1 + 1656);
    sub_5E5C(v155, "PlaceRequestParserModule.Error.ReferenceTripIdLookup");
    sub_710A8(v122, (uint64_t)v155, *(void *)(a1 + 1648));
LABEL_194:
    if ((v155[23] & 0x80000000) != 0) {
      operator delete(*(void **)v155);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_243ED98;
    exception[2] = 42;
  }
  __int16 v13 = (unsigned int *)nullsub_1(v5[7]);
  *(void *)int v155 = -1;
  *(_DWORD *)&v155[8] = 0x7FFFFFFF;
  unint64_t v14 = sub_2A2800(v2, v13, (uint64_t)v155);
  BOOL v15 = v14 > 0xFFFFFFFEFFFFFFFFLL || v14 == 0;
  uint64_t v16 = v144;
  if (v15)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v155);
      sub_188FC78(v155, (uint64_t)"The line id (unencrypted: ", 26);
      uint64_t v17 = (void *)std::ostream::operator<<();
      sub_188FC78(v17, (uint64_t)") in the schedule lookup request parameters could not be resolved; using line of reference trip as fallback",
        107);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (SHIBYTE(v154) < 0) {
        operator delete(__p);
      }
      if (v159 < 0) {
        operator delete(v158);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    int v18 = *(unsigned __int8 *)(a1 + 1656);
    *(void *)int v155 = operator new(0x30uLL);
    *(_OWORD *)&v155[8] = xmmword_20B93E0;
    strcpy(*(char **)v155, "PlaceRequestParserModule.Error.LineIdLookup");
    sub_710A8(v18, (uint64_t)v155, *(void *)(a1 + 1648));
    if ((v155[23] & 0x80000000) != 0) {
      operator delete(*(void **)v155);
    }
    uint64_t v19 = (int *)sub_369F8C(v144, v146, 0, "trip");
    unint64_t v14 = *(void *)((char *)v19 + *(unsigned __int16 *)((char *)v19 - *v19 + 6));
  }
  long long v20 = (int *)sub_8DFD1C(v144, v14, 0, "line");
  long long v21 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v21 >= 5u && (uint64_t v22 = v21[2]) != 0) {
    uint64_t v23 = *(void *)((char *)v20 + v22);
  }
  else {
    uint64_t v23 = 0;
  }
  __int16 v24 = sub_398020(v144, 0);
  uint64_t v25 = &v24[-*(int *)v24];
  if (*(unsigned __int16 *)v25 >= 0xBu)
  {
    uint64_t v26 = *((unsigned __int16 *)v25 + 5);
    if (v26)
    {
      if (v24[v26]) {
        nullsub_1(v23);
      }
    }
  }
  uint64_t v27 = sub_3755E4(*(void **)(a1 + 1640));
  uint64_t v28 = (int *)sub_8DFD1C(v27, v14, 0, "line");
  uint64_t v29 = (unsigned __int16 *)((char *)v28 - *v28);
  if (*v29 >= 0x23u)
  {
    uint64_t v30 = v29[17];
    if (v30)
    {
      if (*((unsigned char *)v28 + v30) && !*(unsigned char *)(a1 + 20))
      {
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)v155);
          sub_188FC78(v155, (uint64_t)"The line (unencrypted id: ", 26);
          unint64_t v130 = (void *)std::ostream::operator<<();
          sub_188FC78(v130, (uint64_t)") in the schedule lookup request parameters is preflight which is not supported by the client", 93);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          if (SHIBYTE(v154) < 0) {
            operator delete(__p);
          }
          sub_111ECAC((uint64_t)v155);
        }
        int v131 = *(unsigned __int8 *)(a1 + 1656);
        sub_5E5C(v155, "PlaceRequestParserModule.Error.Preflight");
        sub_710A8(v131, (uint64_t)v155, *(void *)(a1 + 1648));
        goto LABEL_194;
      }
    }
  }
  uint64_t v31 = sub_3755E4(*(void **)(a1 + 1640));
  if (sub_8F694C(v31, v14) > *(unsigned __int8 *)(a1 + 21))
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v155);
      sub_188FC78(v155, (uint64_t)"The line (unencrypted id: ", 26);
      __n128 v123 = (void *)std::ostream::operator<<();
      unint64_t v124 = sub_188FC78(v123, (uint64_t)") has a market support of ", 26);
      unsigned int v125 = sub_8F694C(v144, v14);
      if (v125 <= 3) {
        unint64_t v126 = off_243EDB0[v125];
      }
      else {
        unint64_t v126 = "";
      }
      size_t v132 = strlen(v126);
      uint64_t v133 = sub_188FC78(v124, (uint64_t)v126, v132);
      uint64_t v134 = sub_188FC78(v133, (uint64_t)" but the client has only ", 25);
      unint64_t v135 = *(unsigned __int8 *)(a1 + 21);
      if (v135 <= 3) {
        unsigned __int32 v136 = off_243EDB0[v135];
      }
      else {
        unsigned __int32 v136 = "";
      }
      size_t v137 = strlen(v136);
      sub_188FC78(v134, (uint64_t)v136, v137);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (SHIBYTE(v154) < 0) {
        operator delete(__p);
      }
      sub_111ECAC((uint64_t)v155);
    }
    int v138 = *(unsigned __int8 *)(a1 + 1656);
    sub_5E5C(v155, "PlaceRequestParserModule.Error.MarketSupport");
    sub_710A8(v138, (uint64_t)v155, *(void *)(a1 + 1648));
    goto LABEL_194;
  }
  uint64_t v32 = (int *)sub_369F8C(v144, v146, 0, "trip");
  if (v14 != *(void *)((char *)v32 + *(unsigned __int16 *)((char *)v32 - *v32 + 6)))
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v155);
      sub_188FC78(v155, (uint64_t)"The line id (unencrypted: ", 26);
      double v127 = (void *)std::ostream::operator<<();
      sub_188FC78(v127, (uint64_t)") does not match the line of the reference trip id (unencrypted: ", 65);
      uint64_t v128 = (void *)std::ostream::operator<<();
      sub_188FC78(v128, (uint64_t)") in the schedule lookup request parameters", 43);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (SHIBYTE(v154) < 0) {
        operator delete(__p);
      }
      sub_111ECAC((uint64_t)v155);
    }
    int v129 = *(unsigned __int8 *)(a1 + 1656);
    sub_5E5C(v155, "PlaceRequestParserModule.Error.LineIdMismatch");
    sub_710A8(v129, (uint64_t)v155, *(void *)(a1 + 1648));
    goto LABEL_194;
  }
  unint64_t v141 = v5;
  sub_CAD914(a1, v14, (uint64_t)v155);
  uint64_t v33 = (void *)(v9 - 288);
  int v34 = *(void **)(v9 - 288);
  if (v34)
  {
    *(void *)(v9 - 280) = v34;
    operator delete(v34);
    *uint64_t v33 = 0;
    *(void *)(v9 - 280) = 0;
    *(void *)(v9 - 272) = 0;
  }
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v155;
  *(void *)(v9 - 272) = *(void *)&v155[16];
  unint64_t v35 = v146;
  uint64_t v142 = v9 - 384;
  *(void *)(v9 - 384) = v146;
  long long __p = 0;
  uint64_t v153 = 0;
  uint64_t v154 = 0;
  double v36 = (int *)sub_369F8C(v144, v146, 0, "trip");
  int v37 = (unsigned __int16 *)((char *)v36 - *v36);
  if (*v37 < 9u || (uint64_t v38 = v37[4]) == 0 || (v39 = *(int *)((char *)v36 + v38)) == 0)
  {
LABEL_161:
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v155);
      sub_188FC78(v155, (uint64_t)"The reference trip (unencrypted id: ", 36);
      double v116 = (void *)std::ostream::operator<<();
      sub_188FC78(v116, (uint64_t)") does not contain any of the stops (with pickup enabled) referenced by the transit id (unencrypted transit id: ", 112);
      double v117 = (void *)std::ostream::operator<<();
      sub_188FC78(v117, (uint64_t)"; unencrypted alewife transit id: ", 34);
      uint64_t v118 = (void *)std::ostream::operator<<();
      sub_188FC78(v118, (uint64_t)")", 1);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v150, 1u);
      if (v151 < 0) {
        operator delete(v150);
      }
      sub_111ECAC((uint64_t)v155);
    }
    int v119 = *(unsigned __int8 *)(v145 + 1656);
    sub_5E5C(v155, "PlaceRequestParserModule.Error.TransitIdNotOnReferenceTripId");
    sub_710A8(v119, (uint64_t)v155, *(void *)(v145 + 1648));
    if ((v155[23] & 0x80000000) != 0) {
      operator delete(*(void **)v155);
    }
    uint64_t v120 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v120 = &off_243ED98;
    v120[2] = 42;
  }
  uint64_t v143 = 0;
  int v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  int v44 = 0;
  uint64_t v45 = (v146 >> 30) & 0x3FFFFFFFCLL;
  uint64_t v147 = 0;
  uint64_t v148 = (_DWORD **)(v9 - 360);
  uint64_t v46 = (void *)(v9 - 352);
  do
  {
    uint64_t v47 = sub_369B60(v16, v35, 0);
    int v48 = &v47[-*(int *)v47];
    if (*(unsigned __int16 *)v48 < 5u)
    {
      uint64_t v49 = 0;
    }
    else
    {
      uint64_t v49 = *((unsigned __int16 *)v48 + 2);
      if (*((_WORD *)v48 + 2)) {
        v49 += (uint64_t)&v47[*(unsigned int *)&v47[v49]];
      }
    }
    uint64_t v50 = (int *)(v49 + v45 + 4 + *(unsigned int *)(v49 + v45 + 4));
    int v51 = (unsigned __int16 *)((char *)v50 - *v50);
    if (*v51 >= 0xDu && (uint64_t v52 = v51[6]) != 0)
    {
      int v53 = *(int *)((char *)v50 + v52);
      unint64_t v54 = *v148;
      unint64_t v55 = (_DWORD *)*v46;
      if (*v148 == (_DWORD *)*v46) {
        goto LABEL_63;
      }
    }
    else
    {
      int v53 = -1;
      unint64_t v54 = *v148;
      unint64_t v55 = (_DWORD *)*v46;
      if (*v148 == (_DWORD *)*v46) {
        goto LABEL_63;
      }
    }
    uint64_t v56 = (uint64_t)&v47[24 * (v53 + v44)
                      + *((unsigned __int16 *)v48 + 3)
                      + *(unsigned int *)&v47[*((unsigned __int16 *)v48 + 3)]];
    int v57 = *(_DWORD *)(v56 + 4);
    int v58 = *(_DWORD *)(v56 + 8);
    while (*v54 != v57 || v54[1] != v58)
    {
      v54 += 2;
      if (v54 == v55)
      {
        unint64_t v54 = v55;
        break;
      }
    }
LABEL_63:
    if (v54 != v55)
    {
      unsigned int v59 = sub_369B60(v16, v35, 0);
      int v60 = &v59[-*(int *)v59];
      if (*(unsigned __int16 *)v60 < 5u)
      {
        uint64_t v61 = 0;
      }
      else
      {
        uint64_t v61 = *((unsigned __int16 *)v60 + 2);
        if (*((_WORD *)v60 + 2)) {
          v61 += (uint64_t)&v59[*(unsigned int *)&v59[v61]];
        }
      }
      uint64_t v62 = (int *)(v61 + v45 + 4 + *(unsigned int *)(v61 + v45 + 4));
      uint64_t v63 = (unsigned __int16 *)((char *)v62 - *v62);
      if (*v63 >= 0xDu && (uint64_t v64 = v63[6]) != 0) {
        int v65 = *(int *)((char *)v62 + v64);
      }
      else {
        int v65 = -1;
      }
      if (v59[24 * (v65 + v44)
             + 20
             + *((unsigned __int16 *)v60 + 3)
             + *(unsigned int *)&v59[*((unsigned __int16 *)v60 + 3)]] != 1)
      {
        if (v43 < v42)
        {
          *(_DWORD *)uint64_t v43 = v44;
          v43 += 4;
          uint64_t v147 = (uint64_t)v43;
          goto LABEL_47;
        }
        uint64_t v66 = (v43 - v41) >> 2;
        unint64_t v67 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 62)
        {
          long long __p = v40;
          uint64_t v153 = (_DWORD *)v147;
          uint64_t v154 = v143;
          sub_2E00();
        }
        if ((v42 - v41) >> 1 > v67) {
          unint64_t v67 = (v42 - v41) >> 1;
        }
        if ((unint64_t)(v42 - v41) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68)
        {
          if (v68 >> 62)
          {
            long long __p = v40;
            uint64_t v154 = v143;
            sub_188D718();
          }
          int v69 = operator new(4 * v68);
          int v40 = (int *)&v69[4 * v66];
          *int v40 = v44;
          uint64_t v147 = (uint64_t)(v40 + 1);
          if (v43 != v41)
          {
LABEL_83:
            unint64_t v70 = v43 - 4 - v41;
            if (v70 < 0xBC
              || &v69[v43 - v41 - 4 - (v70 & 0xFFFFFFFFFFFFFFFCLL)] > &v69[v43 - v41 - 4]
              || &v43[-(v70 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v43 - 4
              || (unint64_t)(v41 - v69) < 0x20)
            {
              int v71 = v43;
              uint64_t v16 = v144;
              unint64_t v35 = v146;
            }
            else
            {
              uint64_t v73 = (v70 >> 2) + 1;
              uint64_t v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
              int v71 = &v43[-v74];
              int v40 = (int *)((char *)v40 - v74);
              long long v75 = &v69[4 * v66 - 16];
              uint64_t v76 = v43 - 16;
              uint64_t v77 = v73 & 0x7FFFFFFFFFFFFFF8;
              unint64_t v35 = v146;
              do
              {
                long long v78 = *(_OWORD *)v76;
                *(v75 - 1) = *((_OWORD *)v76 - 1);
                *long long v75 = v78;
                v75 -= 2;
                v76 -= 32;
                v77 -= 8;
              }
              while (v77);
              uint64_t v16 = v144;
              if (v73 == (v73 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_86:
                uint64_t v42 = &v69[4 * v68];
                uint64_t v143 = v42;
                if (v41) {
                  goto LABEL_87;
                }
                goto LABEL_88;
              }
            }
            do
            {
              int v72 = *((_DWORD *)v71 - 1);
              v71 -= 4;
              *--int v40 = v72;
            }
            while (v71 != v41);
            goto LABEL_86;
          }
        }
        else
        {
          int v69 = 0;
          int v40 = (int *)(4 * v66);
          *(_DWORD *)(4 * v66) = v44;
          uint64_t v147 = 4 * v66 + 4;
          if (v43 != v41) {
            goto LABEL_83;
          }
        }
        uint64_t v16 = v144;
        unint64_t v35 = v146;
        uint64_t v42 = &v69[4 * v68];
        uint64_t v143 = v42;
        if (v41) {
LABEL_87:
        }
          operator delete(v41);
LABEL_88:
        uint64_t v41 = (char *)v40;
        uint64_t v43 = (char *)v147;
      }
    }
LABEL_47:
    ++v44;
  }
  while (v44 != v39);
  long long __p = v40;
  uint64_t v153 = (_DWORD *)v147;
  uint64_t v154 = v143;
  if (v40 == (int *)v147) {
    goto LABEL_161;
  }
  uint64_t v79 = sub_DADFE0(**(void **)(v145 + 1632), 68);
  long long v80 = (int *)sub_369F8C(v16, v35, 0, "trip");
  uint64_t v81 = (unsigned __int16 *)((char *)v80 - *v80);
  if (*v81 >= 0x13u && (uint64_t v82 = v81[9]) != 0 && *(int *)((char *)v80 + v82 + *(unsigned int *)((char *)v80 + v82))
    || !v79)
  {
    int v95 = *v40;
    LODWORD(v93) = -1;
    goto LABEL_152;
  }
  uint64_t v83 = &off_2547290;
  if (*(void *)(v79 + 24)) {
    uint64_t v83 = *(uint64_t (****)())(v79 + 24);
  }
  uint64_t v84 = (uint64_t (***)())v83[71];
  if (!v84) {
    uint64_t v84 = &off_25493B0;
  }
  long long v85 = (uint64_t (***)())v84[7];
  if (!v85) {
    long long v85 = &off_2544448;
  }
  unint64_t v86 = (uint64_t (***)())v85[3];
  if (v86) {
    uint64_t v87 = v86;
  }
  else {
    uint64_t v87 = &off_2544470;
  }
  sub_16B5CBC(v155, v87);
  int v88 = sub_920D68((v156 + 978307200));
  int v89 = v157;
  int v90 = (int *)sub_369F8C(v16, v35, 0, "trip");
  uint64_t v91 = (unsigned __int16 *)((char *)v90 - *v90);
  if (*v91 < 0x17u) {
    goto LABEL_149;
  }
  uint64_t v92 = v91[11];
  if (!v92) {
    goto LABEL_149;
  }
  uint64_t v149 = *(unsigned __int16 *)((char *)v90 + v92);
  if (!*(_WORD *)((char *)v90 + v92)) {
    goto LABEL_149;
  }
  uint64_t v93 = 0;
  while (2)
  {
    unint64_t v94 = v40;
    while (2)
    {
      int v95 = *v94;
      unint64_t v96 = sub_369B60(v16, v146, 0);
      uint64_t v97 = (unsigned __int16 *)&v96[-*(int *)v96];
      unsigned int v98 = *v97;
      if (v98 <= 4)
      {
        uint64_t v101 = 0;
        unint64_t v100 = (int *)(4 * v140 + 4 + dword_4[v140]);
        uint64_t v102 = (unsigned __int16 *)((char *)v100 - *v100);
        unsigned int v103 = *v102;
        if (v103 >= 0x15) {
          goto LABEL_126;
        }
        goto LABEL_129;
      }
      uint64_t v99 = v97[2];
      if (v97[2]) {
        v99 += (uint64_t)&v96[*(unsigned int *)&v96[v99]];
      }
      unint64_t v100 = (int *)(v99 + 4 * v140 + 4 + *(unsigned int *)(v99 + 4 * v140 + 4));
      if (v98 < 0xD || !v97[6])
      {
        uint64_t v101 = 0;
        uint64_t v102 = (unsigned __int16 *)((char *)v100 - *v100);
        unsigned int v103 = *v102;
        if (v103 >= 0x15) {
          goto LABEL_126;
        }
LABEL_129:
        int v105 = *(_DWORD *)&v101[((8 * v93 + 0x7FFFFFFF8) & 0x7FFFFFFF8) + 8];
        if (v103 < 0xB) {
          goto LABEL_136;
        }
        uint64_t v106 = v102[5];
        if (!v102[5]) {
          goto LABEL_136;
        }
LABEL_131:
        int v107 = *(int *)((char *)v100 + v106);
        if (v98 >= 7) {
          goto LABEL_137;
        }
LABEL_132:
        uint64_t v108 = 0;
        if (v103 >= 0xD) {
          goto LABEL_140;
        }
        goto LABEL_142;
      }
      uint64_t v101 = &v96[v97[6] + *(unsigned int *)&v96[v97[6]]];
      uint64_t v102 = (unsigned __int16 *)((char *)v100 - *v100);
      unsigned int v103 = *v102;
      if (v103 < 0x15) {
        goto LABEL_129;
      }
LABEL_126:
      if (v102[10]) {
        int v104 = *(int *)((char *)v100 + v102[10]);
      }
      else {
        int v104 = -1;
      }
      int v105 = *(_DWORD *)&v101[8 * (v104 + v93) + 8];
      uint64_t v106 = v102[5];
      if (v102[5]) {
        goto LABEL_131;
      }
LABEL_136:
      int v107 = 0x7FFFFFFF;
      if (v98 < 7) {
        goto LABEL_132;
      }
LABEL_137:
      uint64_t v108 = v97[3];
      if (v108) {
        v108 += (uint64_t)&v96[*(unsigned int *)&v96[v108]];
      }
      if (v103 >= 0xD)
      {
LABEL_140:
        if (v102[6])
        {
          int v109 = *(int *)((char *)v100 + v102[6]);
          goto LABEL_143;
        }
      }
LABEL_142:
      int v109 = -1;
LABEL_143:
      int v110 = sub_920D68((v107 + v105 + *(_DWORD *)(v108 + 24 * (v109 + v95) + 16)));
      if (v110 >= v88 && v110 <= v89 + v88) {
        goto LABEL_150;
      }
      if (++v94 != (int *)v147) {
        continue;
      }
      break;
    }
    if (++v93 != v149) {
      continue;
    }
    break;
  }
LABEL_149:
  int v95 = *v40;
  LODWORD(v93) = -1;
LABEL_150:
  sub_16B667C(v155);
LABEL_152:
  *(_DWORD *)(v142 + 8) = v93;
  *(_DWORD *)(v142 + 12) = v95;
  unint64_t v112 = (int *)sub_369F8C(v16, v146, 0, "trip");
  unint64_t v113 = (unsigned __int16 *)((char *)v112 - *v112);
  if (*v113 >= 9u && (uint64_t v114 = v113[4]) != 0) {
    int v115 = *(int *)((char *)v112 + v114) - 1;
  }
  else {
    int v115 = -1;
  }
  *(_DWORD *)(v142 + 16) = v115;
  *(_WORD *)(v142 + 20) = *((_WORD *)v141 + 40);
  sub_CADBF0(v145);
  if (v40)
  {
    uint64_t v153 = v40;
    operator delete(v40);
  }
}

void sub_CACA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a33);
  if (v38) {
    operator delete(v38);
  }
  _Unwind_Resume(a1);
}

void sub_CACC00(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(**(void **)(a1 + 1632) + 192);
  if (!v1) {
    uint64_t v1 = &off_254C5C8;
  }
  uint64_t v2 = (uint64_t (***)())v1[29];
  if (!v2) {
    uint64_t v2 = &off_254B018;
  }
  long long v3 = v2[8];
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 1);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *((int *)v2 + 14);
  if (v5)
  {
    uint64_t v7 = 8 * v5;
    while (1)
    {
      while (1)
      {
        uint64_t v10 = *v4;
        unint64_t v11 = *(uint64_t (****)())(*v4 + 48);
        if (!v11) {
          unint64_t v11 = &off_254D270;
        }
        BOOL v12 = (unsigned int *)nullsub_1(v11[4]);
        if (*(unsigned char *)(a1 + 2)) {
          break;
        }
        uint64_t v17 = -1;
        int v18 = 0x7FFFFFFF;
        uint64_t v14 = v10 + 16;
        if (!sub_1882CC4(v14, dword_254EB48)) {
          goto LABEL_17;
        }
LABEL_10:
        uint64_t v8 = sub_1883224(v14, dword_254EB48, qword_254EB50);
        uint64_t v9 = (unsigned int *)nullsub_1(v8);
        sub_CAD354(a1, (uint64_t)v12, v9, (uint64_t)&v17);
        ++v4;
        v7 -= 8;
        if (!v7) {
          return;
        }
      }
      uint64_t v17 = sub_DC7098(v10);
      int v18 = v13;
      uint64_t v14 = v10 + 16;
      if (sub_1882CC4(v14, dword_254EB48)) {
        goto LABEL_10;
      }
LABEL_17:
      if (sub_1882CC4(v14, dword_254EB58) && *(unsigned char *)a1)
      {
        uint64_t v15 = sub_1883224(v14, dword_254EB58, qword_254EB60);
        uint64_t v16 = (unsigned int *)nullsub_1(v15);
        sub_CAE44C(a1, (uint64_t)v12, v16, (uint64_t)&v17);
        ++v4;
        v7 -= 8;
        if (!v7) {
          return;
        }
      }
      else
      {
        sub_CAD354(a1, (uint64_t)v12, v12, (uint64_t)&v17);
        ++v4;
        v7 -= 8;
        if (!v7) {
          return;
        }
      }
    }
  }
}

void sub_CACDBC(int64x2_t *a1)
{
  uint64_t v2 = a1[102].i64[0];
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = *(uint64_t (****)())(*(void *)v2 + 192);
  if (!v4) {
    uint64_t v4 = &off_254C5C8;
  }
  uint64_t v5 = (uint64_t (***)())v4[55];
  if (!v5) {
    uint64_t v5 = &off_254C418;
  }
  uint64_t v6 = *(void *)(v2 + 16);
  if (0xD37A6F4DE9BD37A7 * ((v6 - v3) >> 3) != *((_DWORD *)v5 + 8))
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v17);
      sub_188FC78(v17, (uint64_t)"Invalid number of origin snapped locations provided: ", 53);
      unint64_t v11 = (void *)std::ostream::operator<<();
      sub_188FC78(v11, (uint64_t)" (snapped locations), ", 22);
      BOOL v12 = (void *)std::ostream::operator<<();
      sub_188FC78(v12, (uint64_t)" (transit nearby schedule lookup origins)", 41);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      sub_111ECAC((uint64_t)v17);
    }
    int v13 = a1[103].u8[8];
    sub_5E5C(v17, "PlaceRequestParserModule.Error.OriginSnappedLocationsCount");
    sub_710A8(v13, (uint64_t)v17, a1[103].i64[0]);
LABEL_23:
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_243ED98;
    exception[2] = 1;
  }
  int v7 = *(unsigned __int8 *)(v2 + 216);
  if ((_BYTE)v5[2])
  {
    if (!v7)
    {
LABEL_10:
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)v17);
        sub_188FC78(v17, (uint64_t)"Availability of user location in request and input do not match (input: ", 72);
        uint64_t v8 = (void *)std::ostream::operator<<();
        sub_188FC78(v8, (uint64_t)", request: ", 11);
        uint64_t v9 = (void *)std::ostream::operator<<();
        sub_188FC78(v9, (uint64_t)")", 1);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        sub_111ECAC((uint64_t)v17);
      }
      int v10 = a1[103].u8[8];
      sub_5E5C(v17, "PlaceRequestParserModule.Error.UserSnappedLocation");
      sub_710A8(v10, (uint64_t)v17, a1[103].i64[0]);
      goto LABEL_23;
    }
  }
  else if (v7)
  {
    goto LABEL_10;
  }
  while (v3 != v6)
  {
    sub_CAE838(a1, v3, a1[102].i64[0] + 32);
    v3 += 184;
  }
}

void sub_CAD074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_CAD10C(uint64_t result)
{
  uint64_t v1 = (int64x2_t *)result;
  uint64_t v2 = *(void **)(result + 1632);
  uint64_t v3 = *(uint64_t (****)())(*v2 + 192);
  if (!v3) {
    uint64_t v3 = &off_254C5C8;
  }
  uint64_t v4 = (uint64_t (***)())v3[62];
  if (!v4) {
    uint64_t v4 = &off_254C470;
  }
  uint64_t v5 = v2[28];
  uint64_t v6 = v2[29];
  if (0x51B3BEA3677D46CFLL * ((v6 - v5) >> 3) != *((_DWORD *)v4 + 6))
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v13);
      sub_188FC78(v13, (uint64_t)"Invalid number of origin point details provided: ", 49);
      int v7 = (void *)std::ostream::operator<<();
      sub_188FC78(v7, (uint64_t)" (origin points), ", 18);
      uint64_t v8 = (void *)std::ostream::operator<<();
      sub_188FC78(v8, (uint64_t)" (transit nearby payment_method lookup origins)", 47);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (v12 < 0) {
        operator delete(__p);
      }
      sub_111ECAC((uint64_t)v13);
    }
    int v9 = v1[103].u8[8];
    sub_5E5C(v13, "PlaceRequestParserModule.Error.OriginPointDetailsCount");
    sub_710A8(v9, (uint64_t)v13, v1[103].i64[0]);
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_243ED98;
    exception[2] = 1;
  }
  for (; v5 != v6; v5 += 376)
    BOOL result = sub_CAEB40(v1, v5);
  return result;
}

void sub_CAD2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_CAD354(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  *(_DWORD *)uint64_t v32 = 0;
  *(_DWORD *)&v32[20] = 0;
  *(void *)&v32[4] = -1;
  *(void *)&v32[12] = -1;
  uint64_t v33 = 0;
  long long v34 = 0uLL;
  long long v35 = 0xFFFFFFFFFFFFFFFFLL;
  uint64_t v36 = 0xFFFFFFFFLL;
  *(_OWORD *)int v37 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v39 = 0u;
  unint64_t v8 = *(void *)(a1 + 1608);
  if (v8 >= *(void *)(a1 + 1616))
  {
    int v10 = sub_CB1CD4((int64x2_t *)(a1 + 1600), (uint64_t)v32);
    unint64_t v11 = __p[1];
    *(void *)(a1 + 1608) = v10;
    if (v11)
    {
      *(void *)&long long v39 = v11;
      operator delete(v11);
    }
  }
  else
  {
    uint64_t v9 = *(void *)&v32[16];
    *(_OWORD *)unint64_t v8 = *(_OWORD *)v32;
    *(void *)(v8 + 32) = 0;
    *(void *)(v8 + 40) = 0;
    *(void *)(v8 + 16) = v9;
    *(void *)(v8 + 24) = 0;
    long long v34 = 0uLL;
    uint64_t v33 = 0;
    *(void *)(v8 + 48) = -1;
    *(_DWORD *)(v8 + 64) = -1;
    *(void *)(v8 + 80) = 0;
    *(void *)(v8 + 88) = 0;
    *(void *)(v8 + 72) = 0;
    v37[1] = 0;
    __p[0] = 0;
    v37[0] = 0;
    *(void *)(v8 + 96) = 0;
    *(void *)(v8 + 104) = 0;
    *(void *)(v8 + 112) = 0;
    __p[1] = 0;
    long long v39 = 0uLL;
    *(_DWORD *)(v8 + 376) = 0;
    *(void *)(a1 + 1608) = v8 + 384;
  }
  if (v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
  if (v33)
  {
    *(void *)&long long v34 = v33;
    operator delete(v33);
  }
  uint64_t v12 = *(void *)(a1 + 1608);
  uint64_t v13 = sub_375500(*(void **)(a1 + 1640));
  *(void *)(v12 - 336) = a2;
  uint64_t v14 = sub_375C38(*(void **)(a1 + 1640));
  sub_2A24E8(v14, a3, a4, (uint64_t)&v40);
  int v15 = v41;
  if (v41 == 9)
  {
    if (sub_CAEEA4(a1, v40)) {
      goto LABEL_23;
    }
    int v15 = v41;
  }
  if (v15 == 3)
  {
    if (sub_CAF030(a1, v40)) {
      goto LABEL_23;
    }
    int v15 = v41;
  }
  if (v15 == 8)
  {
    if (sub_CAF24C(a1, v40)) {
      goto LABEL_23;
    }
    int v15 = v41;
  }
  if (v15)
  {
    if (v15 == 4) {
      goto LABEL_20;
    }
LABEL_26:
    char v16 = 0;
    if (*(unsigned char *)(a1 + 20)) {
      goto LABEL_45;
    }
    goto LABEL_27;
  }
  if (sub_CAF470(a1, v40))
  {
LABEL_23:
    char v16 = 1;
    if (*(unsigned char *)(a1 + 20)) {
      goto LABEL_45;
    }
    goto LABEL_27;
  }
  if (v41 != 4) {
    goto LABEL_26;
  }
LABEL_20:
  char v16 = sub_CAF65C(a1, v40);
  if (*(unsigned char *)(a1 + 20)) {
    goto LABEL_45;
  }
LABEL_27:
  uint64_t v17 = *(unint64_t **)(v12 - 360);
  char v18 = (unint64_t **)(v12 - 352);
  uint64_t v19 = *(unint64_t **)(v12 - 352);
  if (v17 != v19)
  {
    while (1)
    {
      long long v20 = (int *)sub_498D5C(v13, *v17, 0, "stop");
      long long v21 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v21 >= 0x25u)
      {
        uint64_t v22 = v21[18];
        if (v22)
        {
          if (*((unsigned char *)v20 + v22)) {
            break;
          }
        }
      }
      if (++v17 == v19)
      {
        uint64_t v17 = v19;
        goto LABEL_43;
      }
    }
    if (v17 != v19)
    {
      for (uint64_t i = v17 + 1; i != v19; ++i)
      {
        __int16 v24 = (int *)sub_498D5C(v13, *i, 0, "stop");
        uint64_t v25 = (unsigned __int16 *)((char *)v24 - *v24);
        if (*v25 >= 0x25u)
        {
          uint64_t v26 = v25[18];
          if (v26)
          {
            if (*((unsigned char *)v24 + v26)) {
              continue;
            }
          }
        }
        *v17++ = *i;
      }
    }
  }
LABEL_43:
  if (v17 != *v18) {
    *char v18 = v17;
  }
LABEL_45:
  if ((v16 & 1) == 0)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v32);
      sub_188FC78(v32, (uint64_t)"The transit id (unencrypted: ", 29);
      uint64_t v27 = (void *)std::ostream::operator<<();
      sub_188FC78(v27, (uint64_t)") in the schedule lookup request parameters could not be resolved as a stop, hall, station, or line (client preflight: ", 119);
      uint64_t v28 = (void *)std::ostream::operator<<();
      sub_188FC78(v28, (uint64_t)")", 1);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v30, 1u);
      if (v31 < 0) {
        operator delete(v30);
      }
      if (SHIBYTE(__p[0]) < 0) {
        operator delete(v37[0]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    int v29 = *(unsigned __int8 *)(a1 + 1656);
    *(void *)uint64_t v32 = operator new(0x30uLL);
    *(_OWORD *)&v32[8] = xmmword_20B9A80;
    strcpy(*(char **)v32, "PlaceRequestParserModule.Error.TransitIdLookup");
    sub_710A8(v29, (uint64_t)v32, *(void *)(a1 + 1648));
    if ((v32[23] & 0x80000000) != 0) {
      operator delete(*(void **)v32);
    }
  }
}

void sub_CAD878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_CAD908(_Unwind_Exception *exception_object)
{
}

void sub_CAD914(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_3755E4(*(void **)(a1 + 1640));
  uint64_t v7 = sub_3757C8(*(void **)(a1 + 1640));
  if (*(unsigned char *)(a1 + 1)
    && (uint64_t v8 = v7, v9 = (int *)sub_8DFD1C(v6, a2, 0, "line"), v10 = (unsigned __int16 *)((char *)v9 - *v9), *v10 >= 0x4Du)
    && (uint64_t v11 = v10[38]) != 0
    && *((unsigned char *)v9 + v11) == 2)
  {
    uint64_t v12 = (int *)sub_8DFD1C(v6, a2, 0, "line");
    unint64_t v28 = *(void *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - *v12 + 6));
    sub_C3575C(v8, &v28, (uint64_t)&v26);
    uint64_t v13 = v26;
    uint64_t v14 = v27;
    if (v26 != v27)
    {
      while (1)
      {
        int v15 = (int *)sub_8DFD1C(v6, *v13, 0, "line");
        char v16 = (unsigned __int16 *)((char *)v15 - *v15);
        if (*v16 < 0x4Du) {
          break;
        }
        uint64_t v17 = v16[38];
        if (!v17 || *((unsigned char *)v15 + v17) != 2) {
          break;
        }
        if (++v13 == v14)
        {
          uint64_t v13 = v14;
          goto LABEL_21;
        }
      }
      if (v13 != v14)
      {
        for (uint64_t i = v13 + 1; i != v14; ++i)
        {
          long long v20 = (int *)sub_8DFD1C(v6, *i, 0, "line");
          long long v21 = (unsigned __int16 *)((char *)v20 - *v20);
          if (*v21 >= 0x4Du)
          {
            uint64_t v22 = v21[38];
            if (v22)
            {
              if (*((unsigned char *)v20 + v22) == 2) {
                *v13++ = *i;
              }
            }
          }
        }
      }
    }
LABEL_21:
    uint64_t v23 = v26;
    if (v13 != v27) {
      uint64_t v27 = v13;
    }
    size_t v24 = (char *)v13 - (char *)v26;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    if (v13 != v23)
    {
      if ((v24 & 0x8000000000000000) != 0) {
        sub_2E00();
      }
      uint64_t v25 = (char *)operator new(v24);
      *(void *)a3 = v25;
      *(void *)(a3 + 8) = v25;
      *(void *)(a3 + 16) = &v25[8 * (v13 - v23)];
      int v29 = (void **)a3;
      do
        sub_2A98DC(&v29, v23++);
      while (v23 != v13);
      uint64_t v23 = v26;
    }
    if (v23)
    {
      uint64_t v27 = v23;
      operator delete(v23);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    char v18 = (unint64_t *)operator new(8uLL);
    *(void *)a3 = v18;
    *v18++ = a2;
    *(void *)(a3 + 8) = v18;
    *(void *)(a3 + 16) = v18;
  }
}

void sub_CADB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
    uint64_t v14 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v14 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_CADBF0(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (****)())(**(void **)(a1 + 1632) + 192);
  if (!v2) {
    uint64_t v2 = &off_254C5C8;
  }
  uint64_t v3 = (uint64_t (***)())v2[44];
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = &off_25332F0;
  }
  uint64_t v5 = *(void *)(a1 + 1608);
  uint64_t v6 = sub_10FB35C((uint64_t)v40, 0, 0);
  if (sub_1880FAC(v6, (unint64_t)v4[6] & 0xFFFFFFFFFFFFFFFELL))
  {
    uint64_t v7 = sub_375C38(*(void **)(a1 + 1640));
    uint64_t v34 = v5;
    uint64_t v8 = sub_375500(*(void **)(a1 + 1640));
    if (v41)
    {
      uint64_t v9 = v8;
      int v10 = v42;
      uint64_t v11 = (void **)(v34 - 312);
      uint64_t v12 = (uint64_t *)(v34 - 304);
      uint64_t v13 = 8 * v41;
      while (1)
      {
        uint64_t v14 = (unsigned int *)nullsub_1(*v10);
        long long __p = (void *)-1;
        LODWORD(v37) = 0x7FFFFFFF;
        sub_2A24E8(v7, v14, (uint64_t)&__p, (uint64_t)&v43);
        int v15 = v44;
        if (v44 == 9)
        {
          unint64_t v16 = (unint64_t)v43;
          uint64_t v17 = sub_375500(*(void **)(a1 + 1640));
          char v18 = (int *)sub_498D5C(v17, v16, 0, "stop");
          uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
          if (*v19 < 0x25u || (uint64_t v20 = v19[18]) == 0 || !*((unsigned char *)v18 + v20) || *(unsigned char *)(a1 + 20))
          {
            long long __p = v43;
            sub_29603C(v11, &__p);
            goto LABEL_10;
          }
          int v15 = v44;
        }
        if (v15 != 3) {
          goto LABEL_24;
        }
        unint64_t v21 = (unint64_t)v43;
        uint64_t v22 = sub_375500(*(void **)(a1 + 1640));
        uint64_t v23 = (int *)sub_8ED3D4(v22, v21, 0, "hall");
        size_t v24 = (unsigned __int16 *)((char *)v23 - *v23);
        if (*v24 >= 0x1Fu)
        {
          uint64_t v25 = v24[15];
          if (v25)
          {
            if (*((unsigned char *)v23 + v25) && !*(unsigned char *)(a1 + 20)) {
              break;
            }
          }
        }
        long long v35 = v43;
        sub_C3557C(v9, (unint64_t *)&v35, (uint64_t)&__p);
        sub_2A83A4((uint64_t)v11, *v12, (char *)__p, (char *)v37, (uint64_t)(v37 - (void)__p) >> 3);
LABEL_30:
        char v31 = __p;
        if (__p)
        {
          *(void *)&long long v37 = __p;
LABEL_32:
          operator delete(v31);
        }
LABEL_10:
        ++v10;
        v13 -= 8;
        if (!v13) {
          goto LABEL_41;
        }
      }
      int v15 = v44;
LABEL_24:
      if (v15 != 8
        || (unint64_t v26 = (unint64_t)v43,
            uint64_t v27 = sub_375500(*(void **)(a1 + 1640)),
            unint64_t v28 = (int *)sub_8ED928(v27, v26, 0, "station"),
            int v29 = (unsigned __int16 *)((char *)v28 - *v28),
            *v29 >= 0x23u)
        && (uint64_t v30 = v29[17]) != 0
        && *((unsigned char *)v28 + v30)
        && !*(unsigned char *)(a1 + 20))
      {
        int v32 = *(unsigned __int8 *)(a1 + 1656);
        long long __p = operator new(0x40uLL);
        long long v37 = xmmword_20B9A70;
        strcpy((char *)__p, "PlaceRequestParserModule.Error.DestinationTransitIdLookup");
        sub_710A8(v32, (uint64_t)&__p, *(void *)(a1 + 1648));
        if ((SHIBYTE(v37) & 0x80000000) == 0) {
          goto LABEL_10;
        }
        char v31 = __p;
        goto LABEL_32;
      }
      long long v35 = v43;
      sub_CAE14C(v9, (unint64_t *)&v35, (char **)&__p);
      sub_2A83A4((uint64_t)v11, *v12, (char *)__p, (char *)v37, (uint64_t)(v37 - (void)__p) >> 3);
      goto LABEL_30;
    }
LABEL_41:
    sub_90CF48((int8x16_t **)(v34 - 312));
  }
  else if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&__p);
    sub_188FC78(&__p, (uint64_t)"Failed to parse routing parameters in schedule lookup parameter message", 71);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v43, 1u);
    if (v45 < 0) {
      operator delete(v43);
    }
    if (v39 < 0) {
      operator delete(v38);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return sub_10FB430(v40);
}

void sub_CAE074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (*(char *)(v6 - 97) < 0)
  {
    operator delete(*(void **)(v6 - 120));
    sub_111ECAC((uint64_t)va);
    sub_10FB430(v6 - 160);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)va);
  sub_10FB430(v6 - 160);
  _Unwind_Resume(a1);
}

void sub_CAE0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_10FB430(v19 - 160);
  _Unwind_Resume(a1);
}

void sub_CAE14C(uint64_t a1@<X0>, unint64_t *a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_C3548C(a1, a2, (uint64_t)&v33);
  uint64_t v4 = v33;
  unint64_t v28 = v34;
  if (v33 == v34) {
    goto LABEL_41;
  }
  uint64_t v5 = 0;
  while (2)
  {
    unint64_t v32 = *v4;
    sub_C3557C(a1, &v32, (uint64_t)&v30);
    uint64_t v6 = v30;
    uint64_t v7 = v31;
    if (v30 == v31)
    {
      if (v30) {
        goto LABEL_39;
      }
      goto LABEL_3;
    }
    do
    {
      while (1)
      {
        unint64_t v9 = (unint64_t)a3[2];
        if ((unint64_t)v5 >= v9) {
          break;
        }
        uint64_t v8 = *v6++;
        *(void *)uint64_t v5 = v8;
        v5 += 8;
        a3[1] = v5;
        if (v6 == v7) {
          goto LABEL_38;
        }
      }
      int v10 = *a3;
      uint64_t v11 = v5 - *a3;
      uint64_t v12 = v11 >> 3;
      unint64_t v13 = (v11 >> 3) + 1;
      if (v13 >> 61) {
        sub_2E00();
      }
      uint64_t v14 = v9 - (void)v10;
      if (v14 >> 2 > v13) {
        unint64_t v13 = v14 >> 2;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        if (v15 >> 61) {
          sub_188D718();
        }
        unint64_t v16 = operator new(8 * v15);
        uint64_t v17 = &v16[8 * v12];
        *(void *)uint64_t v17 = *v6;
        uint64_t v18 = (uint64_t)(v17 + 8);
        if (v5 == v10)
        {
LABEL_18:
          *a3 = v17;
          a3[1] = (char *)v18;
          a3[2] = &v16[8 * v15];
          if (!v5) {
            goto LABEL_20;
          }
LABEL_19:
          operator delete(v5);
          goto LABEL_20;
        }
      }
      else
      {
        unint64_t v16 = 0;
        uint64_t v17 = (char *)(8 * v12);
        *(void *)(8 * v12) = *v6;
        uint64_t v18 = 8 * v12 + 8;
        if (v5 == v10) {
          goto LABEL_18;
        }
      }
      unint64_t v19 = v5 - 8 - v10;
      if (v19 < 0x168)
      {
        uint64_t v20 = v5;
        goto LABEL_25;
      }
      if (&v16[v11 - 8 - (v19 & 0xFFFFFFFFFFFFFFF8)] > &v16[v11 - 8])
      {
        uint64_t v20 = v5;
        do
        {
LABEL_25:
          uint64_t v21 = *((void *)v20 - 1);
          v20 -= 8;
          *((void *)v17 - 1) = v21;
          v17 -= 8;
        }
        while (v20 != v10);
        goto LABEL_26;
      }
      if (&v5[-(v19 & 0xFFFFFFFFFFFFFFF8) - 8] > v5 - 8)
      {
        uint64_t v20 = v5;
        goto LABEL_25;
      }
      if ((unint64_t)(v5 - v16 - v11) < 0x20)
      {
        uint64_t v20 = v5;
        goto LABEL_25;
      }
      uint64_t v22 = (v19 >> 3) + 1;
      uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v20 = &v5[-v23];
      v17 -= v23;
      size_t v24 = &v16[8 * v12 - 16];
      uint64_t v25 = (long long *)(v5 - 16);
      uint64_t v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v27 = *v25;
        *(v24 - 1) = *(v25 - 1);
        _OWORD *v24 = v27;
        v24 -= 2;
        v25 -= 2;
        v26 -= 4;
      }
      while (v26);
      if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_25;
      }
LABEL_26:
      uint64_t v5 = *a3;
      *a3 = v17;
      a3[1] = (char *)v18;
      a3[2] = &v16[8 * v15];
      if (v5) {
        goto LABEL_19;
      }
LABEL_20:
      uint64_t v5 = (char *)v18;
      a3[1] = (char *)v18;
      ++v6;
    }
    while (v6 != v7);
LABEL_38:
    uint64_t v6 = v30;
    if (v30)
    {
LABEL_39:
      char v31 = v6;
      operator delete(v6);
    }
LABEL_3:
    if (++v4 != v28) {
      continue;
    }
    break;
  }
  uint64_t v4 = v33;
LABEL_41:
  if (v4)
  {
    uint64_t v34 = v4;
    operator delete(v4);
  }
}

void sub_CAE3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v19 = *(void **)v17;
    if (!*(void *)v17) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v19 = *(void **)v17;
    if (!*(void *)v17) {
      goto LABEL_3;
    }
  }
  *(void *)(v17 + 8) = v19;
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

void sub_CAE44C(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  *(void *)unint64_t v28 = -1;
  *(void *)&v28[8] = 0xFFFFFFFF00000000;
  unint64_t v8 = *(void *)(a1 + 1608);
  if (v8 >= *(void *)(a1 + 1616))
  {
    unint64_t v9 = sub_CB26E8((int64x2_t *)(a1 + 1600), v28);
  }
  else
  {
    *(_OWORD *)unint64_t v8 = *(_OWORD *)v28;
    *(_DWORD *)(v8 + 376) = 4;
    unint64_t v9 = (char *)(v8 + 384);
  }
  *(void *)(a1 + 1608) = v9;
  *((void *)v9 - 48) = a2;
  int v10 = (uint64_t *)sub_377754(*(void **)(a1 + 1640));
  uint64_t v11 = sub_4461D4((uint64_t)(v10 + 2), 1u, 0);
  uint64_t v12 = &v11[-*(int *)v11];
  unint64_t v13 = a3;
  if (*(unsigned __int16 *)v12 >= 5u)
  {
    uint64_t v14 = *((unsigned __int16 *)v12 + 2);
    unint64_t v13 = a3;
    if (v14)
    {
      unint64_t v15 = &v11[v14 + *(unsigned int *)&v11[v14]];
      unint64_t v16 = &v15[-*(int *)v15];
      unint64_t v13 = a3;
      if (*(unsigned __int16 *)v16 >= 5u)
      {
        uint64_t v17 = *((unsigned __int16 *)v16 + 2);
        unint64_t v13 = a3;
        if (v17)
        {
          unint64_t v13 = a3;
          if (v15[v17]) {
            unint64_t v13 = (unsigned int *)nullsub_1(a3);
          }
        }
      }
    }
  }
  unint64_t v18 = sub_445B68(v10, v13, a4);
  if (v18 == -1) {
    goto LABEL_33;
  }
  if (v19) {
    BOOL v20 = 1;
  }
  else {
    BOOL v20 = HIDWORD(v18) == 0;
  }
  unint64_t v21 = __ROR8__(v18, 32);
  if (v20) {
    unint64_t v21 = 0xFFFFFFFF00000000;
  }
  if (v21 > 0xFFFFFFFEFFFFFFFFLL || v21 == 0)
  {
LABEL_33:
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v28);
      sub_188FC78(v28, (uint64_t)"The hiking tour muid (unencrypted: ", 35);
      uint64_t v23 = (void *)std::ostream::operator<<();
      sub_188FC78(v23, (uint64_t)") in the hiking tour lookup parameters could not be resolved", 60);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (v27 < 0) {
        operator delete(__p);
      }
      if (v30 < 0) {
        operator delete(v29);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    int v24 = *(unsigned __int8 *)(a1 + 1656);
    *(void *)unint64_t v28 = operator new(0x38uLL);
    *(_OWORD *)&v28[8] = xmmword_20B9A10;
    strcpy(*(char **)v28, "PlaceRequestParserModule.Error.HikingTourIdLookup");
    sub_710A8(v24, (uint64_t)v28, *(void *)(a1 + 1648));
  }
  else
  {
    *((void *)v9 - 47) = v21;
    int v25 = *(unsigned __int8 *)(a1 + 1656);
    *(void *)unint64_t v28 = operator new(0x38uLL);
    *(_OWORD *)&v28[8] = xmmword_20B99E0;
    strcpy(*(char **)v28, "PlaceRequestParserModule.RequestEntityType.HikingTour");
    sub_710A8(v25, (uint64_t)v28, *(void *)(a1 + 1648));
  }
  if ((v28[23] & 0x80000000) != 0) {
    operator delete(*(void **)v28);
  }
}

void sub_CAE7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_CAE838(int64x2_t *a1, uint64_t a2, uint64_t a3)
{
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v39 = 0u;
  long long v38 = 0u;
  long long v37 = 0u;
  long long v36 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  char v31 = 0;
  memset(&v24[8], 0, 32);
  *(void *)&long long v22 = -1;
  *((void *)&v22 + 1) = 0x7FFFFFFFLL;
  *(void *)&long long v23 = -1;
  *((void *)&v23 + 1) = -1;
  *(void *)int v24 = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)&v24[16] = -1935635296;
  *(_DWORD *)&v24[31] = 0;
  uint64_t v26 = 0;
  long long v25 = 0uLL;
  uint64_t v27 = 0x6400000000;
  long long v28 = 0u;
  long long v29 = 0u;
  memset(v30, 0, sizeof(v30));
  uint64_t v32 = 0;
  long long v33 = 0uLL;
  unint64_t v6 = a1[100].u64[1];
  if (v6 >= a1[101].i64[0])
  {
    uint64_t v12 = sub_CB1F50(a1 + 100, (uint64_t)&v22);
  }
  else
  {
    *(_OWORD *)unint64_t v6 = v22;
    long long v7 = v23;
    long long v8 = *(_OWORD *)v24;
    long long v9 = *(_OWORD *)&v24[16];
    *(_DWORD *)(v6 + 63) = *(_DWORD *)&v24[31];
    *(_OWORD *)(v6 + 32) = v8;
    *(_OWORD *)(v6 + 48) = v9;
    *(_OWORD *)(v6 + 16) = v7;
    *(void *)(v6 + 80) = 0;
    *(void *)(v6 + 88) = 0;
    *(void *)(v6 + 72) = 0;
    long long v25 = 0uLL;
    uint64_t v26 = 0;
    int v10 = v27;
    *(unsigned char *)(v6 + 100) = BYTE4(v27);
    *(_DWORD *)(v6 + 96) = v10;
    *(void *)(v6 + 104) = 0;
    *(void *)(v6 + 112) = 0;
    *(void *)(v6 + 120) = 0;
    *(void *)(v6 + 128) = 0;
    long long v28 = 0uLL;
    *(void *)&long long v29 = 0;
    *(void *)(v6 + 136) = 0;
    *(void *)(v6 + 144) = 0;
    *((void *)&v29 + 1) = 0;
    *(_OWORD *)char v30 = 0uLL;
    int v11 = *(_DWORD *)&v30[16];
    *(_DWORD *)(v6 + 155) = *(_DWORD *)&v30[19];
    *(_DWORD *)(v6 + 152) = v11;
    *(void *)(v6 + 160) = 0;
    *(void *)(v6 + 168) = 0;
    *(void *)(v6 + 176) = 0;
    uint64_t v32 = 0;
    long long v33 = 0uLL;
    *(unsigned char *)(v6 + 368) = 0;
    uint64_t v12 = v6 + 384;
    *(_DWORD *)(v6 + 376) = 1;
  }
  a1[100].i64[1] = v12;
  sub_8EB894((uint64_t)&v22);
  uint64_t v13 = a1[100].i64[1];
  uint64_t v14 = v13 - 384;
  *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
  long long v15 = *(_OWORD *)(a2 + 16);
  long long v16 = *(_OWORD *)(a2 + 32);
  long long v17 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(v14 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(v14 + 32) = v16;
  *(_OWORD *)(v14 + 48) = v17;
  *(_OWORD *)(v14 + 16) = v15;
  if (v13 - 384 != a2)
  {
    sub_147D0((void *)(v13 - 312), *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
    int v18 = *(_DWORD *)(a2 + 96);
    *(unsigned char *)(v13 - 284) = *(unsigned char *)(a2 + 100);
    *(_DWORD *)(v13 - 288) = v18;
    sub_BE7EAC((char **)(v13 - 280), *(long long **)(a2 + 104), *(long long **)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 6);
    sub_BE7EAC((char **)(v13 - 256), *(long long **)(a2 + 128), *(long long **)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 6);
    int v19 = *(_DWORD *)(a2 + 152);
    *(_DWORD *)(v13 - 229) = *(_DWORD *)(a2 + 155);
    *(_DWORD *)(v13 - 232) = v19;
    sub_9094A4((void *)(v13 - 224), *(char **)(a2 + 160), *(char **)(a2 + 168), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 168) - *(void *)(a2 + 160)) >> 3));
    BOOL v20 = (void *)(v13 - 200);
    if (*(unsigned char *)(a3 + 184)) {
      goto LABEL_6;
    }
LABEL_10:
    sub_CA9B34((uint64_t)v20);
    return;
  }
  int v21 = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(v13 - 229) = *(_DWORD *)(a2 + 155);
  *(_DWORD *)(v13 - 232) = v21;
  BOOL v20 = (void *)(v13 - 200);
  if (!*(unsigned char *)(a3 + 184)) {
    goto LABEL_10;
  }
LABEL_6:
  if (*(unsigned char *)(v13 - 16))
  {
    sub_CB2248(v20, a3);
  }
  else
  {
    sub_8EB7C4(v20, a3);
    *(unsigned char *)(v13 - 16) = 1;
  }
}

void sub_CAEB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_CAEB40(int64x2_t *a1, uint64_t a2)
{
  long long v38 = 0u;
  long long v24 = 0u;
  memset(&v20[8], 0, 32);
  *(void *)&long long v18 = -1;
  *((void *)&v18 + 1) = 0x7FFFFFFFLL;
  *(void *)&long long v19 = -1;
  *((void *)&v19 + 1) = -1;
  *(void *)BOOL v20 = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)&v20[16] = -1935635296;
  *(_DWORD *)&v20[31] = 0;
  uint64_t v22 = 0;
  long long v21 = 0uLL;
  uint64_t v23 = 0x6400000000;
  DWORD1(v24) = 0;
  long long v25 = 0u;
  memset(v26, 0, sizeof(v26));
  long long v27 = 0u;
  memset(v28, 0, sizeof(v28));
  uint64_t v33 = 0;
  long long v32 = 0u;
  long long v31 = 0u;
  long long v30 = 0u;
  long long v29 = 0u;
  long long v34 = xmmword_20B8E30;
  uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v37 = 0;
  LODWORD(v38) = 0;
  long long v36 = 0uLL;
  HIDWORD(v38) = 0;
  unint64_t v4 = a1[100].u64[1];
  if (v4 >= a1[101].i64[0])
  {
    long long v16 = sub_CB232C(a1 + 100, (uint64_t)&v18);
  }
  else
  {
    *(_OWORD *)unint64_t v4 = v18;
    long long v5 = v19;
    long long v6 = *(_OWORD *)v20;
    long long v7 = *(_OWORD *)&v20[16];
    *(_DWORD *)(v4 + 63) = *(_DWORD *)&v20[31];
    *(_OWORD *)(v4 + 32) = v6;
    *(_OWORD *)(v4 + 48) = v7;
    *(_OWORD *)(v4 + 16) = v5;
    *(void *)(v4 + 80) = 0;
    *(void *)(v4 + 88) = 0;
    *(void *)(v4 + 72) = 0;
    *(_OWORD *)(v4 + 72) = v21;
    *(void *)(v4 + 88) = v22;
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    int v8 = v23;
    *(unsigned char *)(v4 + 100) = BYTE4(v23);
    *(_DWORD *)(v4 + 96) = v8;
    uint64_t v9 = v24;
    *(_DWORD *)(v4 + 112) = DWORD2(v24);
    *(void *)(v4 + 104) = v9;
    long long v10 = v25;
    *(void *)(v4 + 136) = v26[0];
    *(_OWORD *)(v4 + 120) = v10;
    v26[0] = 0;
    long long v25 = 0uLL;
    long long v11 = *(_OWORD *)&v26[1];
    *(void *)(v4 + 160) = v26[3];
    *(_OWORD *)(v4 + 144) = v11;
    *(_OWORD *)&v26[1] = 0uLL;
    long long v12 = v27;
    *(void *)(v4 + 184) = *(void *)v28;
    *(_OWORD *)(v4 + 168) = v12;
    v26[3] = 0;
    long long v27 = 0uLL;
    *(void *)long long v28 = 0;
    long long v13 = *(_OWORD *)&v28[8];
    *(void *)(v4 + 208) = *(void *)&v28[24];
    *(_OWORD *)(v4 + 192) = v13;
    *(_OWORD *)&v28[8] = 0uLL;
    uint64_t v14 = *(void *)&v28[48];
    *(_OWORD *)(v4 + 216) = *(_OWORD *)&v28[32];
    *(void *)(v4 + 232) = v14;
    *(void *)(v4 + 240) = 0;
    *(void *)(v4 + 248) = 0;
    *(void *)(v4 + 256) = 0;
    *(_OWORD *)(v4 + 240) = v29;
    *(void *)(v4 + 256) = v30;
    *(void *)(v4 + 264) = 0;
    *(void *)&v28[24] = 0;
    long long v29 = 0uLL;
    *(void *)(v4 + 272) = 0;
    *(void *)(v4 + 280) = 0;
    *(void *)(v4 + 264) = *((void *)&v30 + 1);
    *(void *)(v4 + 272) = v31;
    long long v30 = 0uLL;
    *(void *)(v4 + 280) = *((void *)&v31 + 1);
    *(void *)(v4 + 288) = 0;
    *(void *)(v4 + 296) = 0;
    *(void *)(v4 + 304) = 0;
    *(_OWORD *)(v4 + 288) = v32;
    *(void *)(v4 + 304) = v33;
    long long v31 = 0uLL;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    uint64_t v15 = v35;
    *(_OWORD *)(v4 + 312) = v34;
    *(void *)(v4 + 328) = v15;
    *(void *)(v4 + 336) = 0;
    *(void *)(v4 + 344) = 0;
    *(void *)(v4 + 352) = 0;
    *(_OWORD *)(v4 + 336) = v36;
    *(void *)(v4 + 352) = v37;
    long long v36 = 0uLL;
    uint64_t v37 = 0;
    *(_DWORD *)(v4 + 360) = v38;
    *(void *)(v4 + 368) = *((void *)&v38 + 1);
    *(_DWORD *)(v4 + 376) = 2;
    long long v16 = (char *)(v4 + 384);
  }
  a1[100].i64[1] = (uint64_t)v16;
  sub_402C7C((uint64_t)&v18);
  return sub_5A303C(a1[100].i64[1] - 384, a2);
}

void sub_CAEE3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_402C7C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_CAEE50(void *a1)
{
  uint64_t v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_CAEEA4(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 1608);
  int v5 = *(unsigned __int8 *)(a1 + 1656);
  long long __p = operator new(0x30uLL);
  long long v16 = xmmword_20B9380;
  strcpy((char *)__p, "PlaceRequestParserModule.RequestEntityType.Stop");
  sub_710A8(v5, (uint64_t)&__p, *(void *)(a1 + 1648));
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
  uint64_t v6 = sub_375500(*(void **)(a1 + 1640));
  long long v7 = (int *)sub_498D5C(v6, a2, 0, "stop");
  int v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 0x25u)
  {
    uint64_t v9 = v8[18];
    if (v9)
    {
      if (*((unsigned char *)v7 + v9) && !*(unsigned char *)(a1 + 20)) {
        return 0;
      }
    }
  }
  if (*(_DWORD *)(v4 - 320)) {
    *(_DWORD *)(v4 - 320) = 0;
  }
  *(void *)(v4 - 328) = a2;
  long long v11 = (void *)(v4 - 360);
  long long v10 = *(void **)(v4 - 360);
  long long v12 = *(void **)(v4 - 344);
  if (v12 == v10)
  {
    if (v12)
    {
      *(void *)(v4 - 352) = v12;
      operator delete(v12);
      void *v11 = 0;
      *(void *)(v4 - 352) = 0;
      *(void *)(v4 - 344) = 0;
    }
    long long v10 = operator new(8uLL);
    void *v11 = v10;
    long long v13 = (void *)(v4 - 352);
    *(void *)(v4 - 352) = v10;
    *(void *)(v4 - 344) = v10 + 1;
  }
  else
  {
    long long v13 = (void *)(v4 - 352);
  }
  void *v10 = a2;
  void *v13 = v10 + 1;
  return 1;
}

void sub_CAF014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_CAF030(uint64_t a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = *(void *)(a1 + 1608);
  int v5 = *(unsigned __int8 *)(a1 + 1656);
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9380;
  strcpy((char *)__p[0], "PlaceRequestParserModule.RequestEntityType.Hall");
  sub_710A8(v5, (uint64_t)__p, *(void *)(a1 + 1648));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = sub_375500(*(void **)(a1 + 1640));
  long long v7 = (int *)sub_8ED3D4(v6, a2, 0, "hall");
  int v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 0x1Fu)
  {
    uint64_t v9 = v8[15];
    if (v9)
    {
      if (*((unsigned char *)v7 + v9) && !*(unsigned char *)(a1 + 20)) {
        return 0;
      }
    }
  }
  if (*(_DWORD *)(v4 - 320) != 1) {
    *(_DWORD *)(v4 - 320) = 1;
  }
  *(void *)(v4 - 328) = a2;
  uint64_t v10 = sub_375500(*(void **)(a1 + 1640));
  sub_C3557C(v10, &v20, (uint64_t)&v17);
  memset(__p, 0, 24);
  long long v11 = v17;
  long long v12 = v18;
  uint64_t v13 = v18 - (unsigned char *)v17;
  if (v18 != v17)
  {
    if (v13 < 0) {
      sub_2E00();
    }
    __p[0] = operator new(v18 - (unsigned char *)v17);
    __p[1] = __p[0];
    __p[2] = (char *)__p[0] + 8 * (v13 >> 3);
    long long v21 = __p;
    do
      sub_2A98DC(&v21, v11++);
    while (v11 != v12);
  }
  uint64_t v14 = (void *)(v4 - 360);
  uint64_t v15 = *(void **)(v4 - 360);
  if (v15)
  {
    *(void *)(v4 - 352) = v15;
    operator delete(v15);
    void *v14 = 0;
    *(void *)(v4 - 352) = 0;
    *(void *)(v4 - 344) = 0;
  }
  *(_OWORD *)uint64_t v14 = *(_OWORD *)__p;
  *(void **)(v4 - 344) = __p[2];
  memset(__p, 0, 24);
  if (v17)
  {
    long long v18 = v17;
    operator delete(v17);
  }
  return 1;
}

void sub_CAF208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_CAF24C(uint64_t a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = *(void *)(a1 + 1608);
  int v5 = *(unsigned __int8 *)(a1 + 1656);
  __p[0] = operator new(0x38uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9A20;
  strcpy((char *)__p[0], "PlaceRequestParserModule.RequestEntityType.Station");
  sub_710A8(v5, (uint64_t)__p, *(void *)(a1 + 1648));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = sub_375500(*(void **)(a1 + 1640));
  long long v7 = (int *)sub_8ED928(v6, a2, 0, "station");
  int v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 0x23u)
  {
    uint64_t v9 = v8[17];
    if (v9)
    {
      if (*((unsigned char *)v7 + v9) && !*(unsigned char *)(a1 + 20)) {
        return 0;
      }
    }
  }
  if (*(_DWORD *)(v4 - 320) != 2) {
    *(_DWORD *)(v4 - 320) = 2;
  }
  *(void *)(v4 - 328) = a2;
  uint64_t v10 = sub_375500(*(void **)(a1 + 1640));
  sub_CAE14C(v10, &v20, (char **)&v17);
  memset(__p, 0, 24);
  long long v11 = v17;
  long long v12 = v18;
  uint64_t v13 = v18 - (unsigned char *)v17;
  if (v18 != v17)
  {
    if (v13 < 0) {
      sub_2E00();
    }
    __p[0] = operator new(v18 - (unsigned char *)v17);
    __p[1] = __p[0];
    __p[2] = (char *)__p[0] + 8 * (v13 >> 3);
    long long v21 = __p;
    do
      sub_2A98DC(&v21, v11++);
    while (v11 != v12);
  }
  uint64_t v14 = (void *)(v4 - 360);
  uint64_t v15 = *(void **)(v4 - 360);
  if (v15)
  {
    *(void *)(v4 - 352) = v15;
    operator delete(v15);
    void *v14 = 0;
    *(void *)(v4 - 352) = 0;
    *(void *)(v4 - 344) = 0;
  }
  *(_OWORD *)uint64_t v14 = *(_OWORD *)__p;
  *(void **)(v4 - 344) = __p[2];
  memset(__p, 0, 24);
  if (v17)
  {
    long long v18 = v17;
    operator delete(v17);
  }
  return 1;
}

void sub_CAF42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_CAF470(uint64_t a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v3 = *(void *)(a1 + 1608);
  int v4 = *(unsigned __int8 *)(a1 + 1656);
  long long __p = operator new(0x38uLL);
  long long v19 = xmmword_20B8DF0;
  strcpy((char *)__p, "PlaceRequestParserModule.RequestEntityType.AccessPoint");
  sub_710A8(v4, (uint64_t)&__p, *(void *)(a1 + 1648));
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  uint64_t v5 = sub_375500(*(void **)(a1 + 1640));
  sub_8ED2E4(v5, &v20, (uint64_t)&__p);
  uint64_t v6 = __p;
  if (__p == (void *)v19)
  {
    uint64_t v14 = 0;
    if (!__p) {
      return v14;
    }
    goto LABEL_13;
  }
  unint64_t v7 = *(void *)__p;
  uint64_t v8 = sub_375500(*(void **)(a1 + 1640));
  uint64_t v9 = (int *)sub_8ED928(v8, v7, 0, "station");
  uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v10 >= 0x23u)
  {
    uint64_t v11 = v10[17];
    if (v11)
    {
      if (*((unsigned char *)v9 + v11) && !*(unsigned char *)(a1 + 20))
      {
        uint64_t v14 = 0;
        uint64_t v6 = __p;
        if (!__p) {
          return v14;
        }
        goto LABEL_13;
      }
    }
  }
  unint64_t v12 = v20;
  if (*(_DWORD *)(v3 - 320) != 3) {
    *(_DWORD *)(v3 - 320) = 3;
  }
  *(void *)(v3 - 328) = v12;
  uint64_t v13 = sub_375500(*(void **)(a1 + 1640));
  sub_CAE14C(v13, (unint64_t *)__p, (char **)&v16);
  sub_2A83A4(v3 - 360, *(void *)(v3 - 352), (char *)v16, v17, (v17 - (unsigned char *)v16) >> 3);
  if (v16)
  {
    long long v17 = (char *)v16;
    operator delete(v16);
  }
  uint64_t v14 = 1;
  uint64_t v6 = __p;
  if (__p)
  {
LABEL_13:
    *(void *)&long long v19 = v6;
    operator delete(v6);
  }
  return v14;
}

void sub_CAF610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_CAF65C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 1608);
  int v5 = *(unsigned __int8 *)(a1 + 1656);
  long long __p = operator new(0x30uLL);
  long long v13 = xmmword_20B9380;
  strcpy((char *)__p, "PlaceRequestParserModule.RequestEntityType.Line");
  sub_710A8(v5, (uint64_t)&__p, *(void *)(a1 + 1648));
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  uint64_t v6 = sub_3755E4(*(void **)(a1 + 1640));
  unint64_t v7 = (int *)sub_8DFD1C(v6, a2, 0, "line");
  uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 0x23u)
  {
    uint64_t v9 = v8[17];
    if (v9)
    {
      if (*((unsigned char *)v7 + v9) && !*(unsigned char *)(a1 + 20)) {
        return 0;
      }
    }
  }
  uint64_t v10 = sub_3755E4(*(void **)(a1 + 1640));
  if (sub_8F694C(v10, a2) > *(unsigned __int8 *)(a1 + 21)) {
    return 0;
  }
  if (*(_DWORD *)(v4 - 320) != 4) {
    *(_DWORD *)(v4 - 320) = 4;
  }
  *(void *)(v4 - 328) = a2;
  return 1;
}

void sub_CAF790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_CAF7AC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(_DWORD *)unsigned int v103 = 0;
  *(_DWORD *)&v103[20] = 0;
  *(void *)&v103[4] = -1;
  *(void *)&v103[12] = -1;
  int v104 = 0;
  long long v105 = 0uLL;
  long long v106 = 0xFFFFFFFFFFFFFFFFLL;
  uint64_t v107 = 0xFFFFFFFFLL;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  unint64_t v6 = *(void *)(a1 + 1608);
  if (v6 >= *(void *)(a1 + 1616))
  {
    uint64_t v8 = sub_CB1CD4((int64x2_t *)(a1 + 1600), (uint64_t)v103);
    uint64_t v9 = (void *)*((void *)&v109 + 1);
    *(void *)(a1 + 1608) = v8;
    if (v9)
    {
      *(void *)&long long v110 = v9;
      operator delete(v9);
    }
  }
  else
  {
    uint64_t v7 = *(void *)&v103[16];
    *(_OWORD *)unint64_t v6 = *(_OWORD *)v103;
    *(void *)(v6 + 32) = 0;
    *(void *)(v6 + 40) = 0;
    *(void *)(v6 + 16) = v7;
    *(void *)(v6 + 24) = 0;
    long long v105 = 0uLL;
    int v104 = 0;
    *(void *)(v6 + 48) = -1;
    *(_DWORD *)(v6 + 64) = -1;
    *(void *)(v6 + 80) = 0;
    *(void *)(v6 + 88) = 0;
    *(void *)(v6 + 72) = 0;
    *(void *)&long long v109 = 0;
    long long v108 = 0uLL;
    *(void *)(v6 + 96) = 0;
    *(void *)(v6 + 104) = 0;
    *(void *)(v6 + 112) = 0;
    *((void *)&v109 + 1) = 0;
    long long v110 = 0uLL;
    *(_DWORD *)(v6 + 376) = 0;
    *(void *)(a1 + 1608) = v6 + 384;
  }
  if ((void)v108)
  {
    *((void *)&v108 + 1) = v108;
    operator delete((void *)v108);
  }
  if (v104)
  {
    *(void *)&long long v105 = v104;
    operator delete(v104);
  }
  uint64_t v10 = *(void *)(a1 + 1608);
  sub_DE56D0(a2, (uint64_t)a3, (uint64_t)v101);
  uint64_t v11 = (uint64_t *)sub_375C38(*(void **)(a1 + 1640));
  *(void *)unsigned int v103 = -1;
  *(_DWORD *)&v103[8] = 0x7FFFFFFF;
  unint64_t v12 = sub_2A2B40(v11, (const void **)a2, (uint64_t)v101, (uint64_t)v103);
  unint64_t v13 = v12;
  if (v12 > 0xFFFFFFFEFFFFFFFFLL || !v12 || (sub_CAF24C(a1, v12) & 1) == 0)
  {
    if (!sub_723EC(1u))
    {
LABEL_77:
      int v69 = *(unsigned __int8 *)(a1 + 1656);
      *(void *)unsigned int v103 = operator new(0x38uLL);
      *(_OWORD *)&v103[8] = xmmword_20B9A60;
      strcpy(*(char **)v103, "PlaceRequestParserModule.Error.StationCodeLookup");
      sub_710A8(v69, (uint64_t)v103, *(void *)(a1 + 1648));
      if ((v103[23] & 0x80000000) != 0) {
        operator delete(*(void **)v103);
      }
      goto LABEL_123;
    }
    sub_6BAC((uint64_t)v103);
    long long v19 = sub_188FC78(v103, (uint64_t)"[Transit Station Code Parse Error] Could not resolve source id \"", 64);
    int v20 = *(char *)(a2 + 23);
    if (v20 >= 0) {
      long long v21 = (const void *)a2;
    }
    else {
      long long v21 = *(const void **)a2;
    }
    if (v20 >= 0) {
      uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v22 = *(void *)(a2 + 8);
    }
    uint64_t v23 = sub_188FC78(v19, (uint64_t)v21, v22);
    long long v24 = sub_188FC78(v23, (uint64_t)"\" and external station code 0x", 30);
    char v97 = 0;
    LOBYTE(v96[0]) = 0;
    sub_CB0304(a3, (uint64_t)v96, 2);
    if ((v100 & 0x80u) == 0) {
      long long v25 = &v98;
    }
    else {
      long long v25 = v98;
    }
    if ((v100 & 0x80u) == 0) {
      uint64_t v26 = v100;
    }
    else {
      uint64_t v26 = v99;
    }
    long long v27 = sub_188FC78(v24, (uint64_t)v25, v26);
    long long v28 = sub_188FC78(v27, (uint64_t)" (precache ", 11);
    uint64_t v29 = sub_3757C8(*(void **)(a1 + 1640));
    long long v30 = sub_398020(v29, 0);
    long long v31 = &v30[-*(int *)v30];
    if (*(unsigned __int16 *)v31 < 5u || (uint64_t v32 = *((unsigned __int16 *)v31 + 2)) == 0)
    {
      unsigned int v38 = 0;
      HIBYTE(v95) = 0;
      LOBYTE(v93) = 0;
      goto LABEL_63;
    }
    uint64_t v33 = &v30[v32];
    uint64_t v34 = *(unsigned int *)v33;
    long long v36 = &v33[v34 + 4];
    size_t v35 = *(unsigned int *)&v33[v34];
    if (v35 >= 0x17)
    {
      uint64_t v63 = (v35 & 0xFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17) {
        uint64_t v63 = v35 | 7;
      }
      uint64_t v64 = v63 + 1;
      uint64_t v37 = operator new(v63 + 1);
      size_t v94 = v35;
      unint64_t v95 = v64 | 0x8000000000000000;
      uint64_t v93 = v37;
    }
    else
    {
      HIBYTE(v95) = *(_DWORD *)&v33[v34];
      uint64_t v37 = &v93;
      if (!v35) {
        goto LABEL_62;
      }
    }
    memcpy(v37, v36, v35);
LABEL_62:
    *((unsigned char *)v37 + v35) = 0;
    unsigned int v38 = HIBYTE(v95);
LABEL_63:
    if ((v38 & 0x80u) == 0) {
      int v65 = &v93;
    }
    else {
      int v65 = v93;
    }
    if ((v38 & 0x80u) == 0) {
      uint64_t v66 = v38;
    }
    else {
      uint64_t v66 = v94;
    }
    unint64_t v67 = sub_188FC78(v28, (uint64_t)v65, v66);
    sub_188FC78(v67, (uint64_t)", client preflight: ", 20);
    unint64_t v68 = (void *)std::ostream::operator<<();
    sub_188FC78(v68, (uint64_t)")", 1);
    if (SHIBYTE(v95) < 0)
    {
      operator delete(v93);
      if (((char)v100 & 0x80000000) == 0)
      {
LABEL_71:
        if ((v97 & 0x80000000) == 0)
        {
LABEL_72:
          std::stringbuf::str();
          sub_7246C((uint64_t *)&v98, 1u);
          if ((char)v100 < 0) {
            operator delete(v98);
          }
          if (SBYTE7(v109) < 0) {
            operator delete((void *)v108);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
          goto LABEL_77;
        }
LABEL_81:
        operator delete(v96[0]);
        goto LABEL_72;
      }
    }
    else if (((char)v100 & 0x80000000) == 0)
    {
      goto LABEL_71;
    }
    operator delete(v98);
    if ((v97 & 0x80000000) == 0) {
      goto LABEL_72;
    }
    goto LABEL_81;
  }
  uint64_t v14 = sub_375500(*(void **)(a1 + 1640));
  uint64_t v15 = (int *)sub_8ED928(v14, v13, 0, "station");
  long long v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 >= 5u && (uint64_t v17 = v16[2]) != 0) {
    uint64_t v18 = *(void *)((char *)v15 + v17);
  }
  else {
    uint64_t v18 = 0;
  }
  long long v39 = sub_398020(v14, 0);
  long long v40 = &v39[-*(int *)v39];
  if (*(unsigned __int16 *)v40 >= 0xBu)
  {
    uint64_t v41 = *((unsigned __int16 *)v40 + 5);
    if (v41)
    {
      if (v39[v41]) {
        uint64_t v18 = nullsub_1(v18);
      }
    }
  }
  *(void *)(v10 - 336) = v18;
  if (!sub_723EC(1u)) {
    goto LABEL_101;
  }
  sub_6BAC((uint64_t)v103);
  long long v42 = sub_188FC78(v103, (uint64_t)"[Transit Station Code Parse Success] Resolved source id \"", 57);
  int v43 = *(char *)(a2 + 23);
  if (v43 >= 0) {
    long long v44 = (const void *)a2;
  }
  else {
    long long v44 = *(const void **)a2;
  }
  if (v43 >= 0) {
    uint64_t v45 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v45 = *(void *)(a2 + 8);
  }
  uint64_t v46 = sub_188FC78(v42, (uint64_t)v44, v45);
  uint64_t v47 = sub_188FC78(v46, (uint64_t)"\" and external station code 0x", 30);
  char v97 = 0;
  LOBYTE(v96[0]) = 0;
  sub_CB0304(a3, (uint64_t)v96, 2);
  if ((v100 & 0x80u) == 0) {
    int v48 = &v98;
  }
  else {
    int v48 = v98;
  }
  if ((v100 & 0x80u) == 0) {
    uint64_t v49 = v100;
  }
  else {
    uint64_t v49 = v99;
  }
  uint64_t v50 = sub_188FC78(v47, (uint64_t)v48, v49);
  sub_188FC78(v50, (uint64_t)" to muid ", 9);
  int v51 = (void *)std::ostream::operator<<();
  uint64_t v52 = sub_188FC78(v51, (uint64_t)" (precache ", 11);
  uint64_t v53 = sub_3757C8(*(void **)(a1 + 1640));
  unint64_t v54 = sub_398020(v53, 0);
  unint64_t v55 = &v54[-*(int *)v54];
  if (*(unsigned __int16 *)v55 < 5u || (uint64_t v56 = *((unsigned __int16 *)v55 + 2)) == 0)
  {
    unsigned int v62 = 0;
    HIBYTE(v95) = 0;
    LOBYTE(v93) = 0;
    goto LABEL_87;
  }
  int v57 = &v54[v56];
  uint64_t v58 = *(unsigned int *)v57;
  int v60 = &v57[v58 + 4];
  size_t v59 = *(unsigned int *)&v57[v58];
  if (v59 >= 0x17)
  {
    uint64_t v70 = (v59 & 0xFFFFFFF8) + 8;
    if ((v59 | 7) != 0x17) {
      uint64_t v70 = v59 | 7;
    }
    uint64_t v71 = v70 + 1;
    uint64_t v61 = operator new(v70 + 1);
    size_t v94 = v59;
    unint64_t v95 = v71 | 0x8000000000000000;
    uint64_t v93 = v61;
  }
  else
  {
    HIBYTE(v95) = *(_DWORD *)&v57[v58];
    uint64_t v61 = &v93;
    if (!v59) {
      goto LABEL_86;
    }
  }
  memcpy(v61, v60, v59);
LABEL_86:
  *((unsigned char *)v61 + v59) = 0;
  unsigned int v62 = HIBYTE(v95);
LABEL_87:
  if ((v62 & 0x80u) == 0) {
    int v72 = &v93;
  }
  else {
    int v72 = v93;
  }
  if ((v62 & 0x80u) == 0) {
    uint64_t v73 = v62;
  }
  else {
    uint64_t v73 = v94;
  }
  uint64_t v74 = sub_188FC78(v52, (uint64_t)v72, v73);
  sub_188FC78(v74, (uint64_t)", client preflight: ", 20);
  long long v75 = (void *)std::ostream::operator<<();
  sub_188FC78(v75, (uint64_t)")", 1);
  if ((SHIBYTE(v95) & 0x80000000) == 0)
  {
    if (((char)v100 & 0x80000000) == 0) {
      goto LABEL_95;
    }
LABEL_118:
    operator delete(v98);
    if ((v97 & 0x80000000) == 0) {
      goto LABEL_96;
    }
LABEL_119:
    operator delete(v96[0]);
    goto LABEL_96;
  }
  operator delete(v93);
  if ((char)v100 < 0) {
    goto LABEL_118;
  }
LABEL_95:
  if (v97 < 0) {
    goto LABEL_119;
  }
LABEL_96:
  std::stringbuf::str();
  sub_7246C((uint64_t *)&v98, 1u);
  if ((char)v100 < 0) {
    operator delete(v98);
  }
  if (SBYTE7(v109) < 0) {
    operator delete((void *)v108);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
LABEL_101:
  if (*(unsigned char *)(a1 + 20)) {
    goto LABEL_123;
  }
  uint64_t v76 = v10 - 360;
  uint64_t v77 = *(unint64_t **)(v10 - 360);
  long long v80 = *(unint64_t **)(v76 + 8);
  long long v78 = (unint64_t **)(v76 + 8);
  uint64_t v79 = v80;
  if (v77 == v80)
  {
    uint64_t v81 = v77;
    goto LABEL_121;
  }
  uint64_t v81 = v79;
  while (1)
  {
    unint64_t v82 = *v77;
    uint64_t v83 = sub_375500(*(void **)(a1 + 1640));
    uint64_t v84 = (int *)sub_498D5C(v83, v82, 0, "stop");
    long long v85 = (unsigned __int16 *)((char *)v84 - *v84);
    if (*v85 >= 0x25u)
    {
      uint64_t v86 = v85[18];
      if (v86)
      {
        if (*((unsigned char *)v84 + v86)) {
          break;
        }
      }
    }
    if (++v77 == v79) {
      goto LABEL_121;
    }
  }
  if (v77 == v79)
  {
LABEL_121:
    if (v81 == *v78) {
      goto LABEL_123;
    }
    goto LABEL_122;
  }
  uint64_t v87 = v77 + 1;
  if (v77 + 1 != v79)
  {
    uint64_t v81 = v77;
    do
    {
      unint64_t v88 = *v87;
      uint64_t v89 = sub_375500(*(void **)(a1 + 1640));
      int v90 = (int *)sub_498D5C(v89, v88, 0, "stop");
      uint64_t v91 = (unsigned __int16 *)((char *)v90 - *v90);
      if (*v91 < 0x25u || (uint64_t v92 = v91[18]) == 0 || !*((unsigned char *)v90 + v92)) {
        *v81++ = *v87;
      }
      ++v87;
    }
    while (v87 != v79);
    goto LABEL_121;
  }
  uint64_t v81 = v77;
  if (v77 != *v78) {
LABEL_122:
  }
    *long long v78 = v81;
LABEL_123:
  if (v102 < 0) {
    operator delete(v101[0]);
  }
}

void sub_CB01AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a33);
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

void sub_CB0304(uint64_t *a1, uint64_t a2, int a3)
{
  int v5 = *((char *)a1 + 23);
  BOOL v6 = v5 < 0;
  size_t v7 = a1[1];
  if (v5 >= 0) {
    uint64_t v8 = (uint64_t)a1;
  }
  else {
    uint64_t v8 = *a1;
  }
  size_t v9 = *((unsigned __int8 *)a1 + 23);
  int v20 = 0;
  long long v21 = 0;
  if (v6) {
    size_t v10 = v7;
  }
  else {
    size_t v10 = v9;
  }
  long long __p = 0;
  if (!v10) {
    goto LABEL_19;
  }
  if ((v10 & 0x8000000000000000) != 0) {
    sub_2E00();
  }
  uint64_t v11 = (char *)operator new(v10);
  long long __p = v11;
  long long v21 = &v11[v10];
  if (v10 < 0x20)
  {
    unint64_t v12 = (char *)v8;
  }
  else
  {
    unint64_t v12 = (char *)v8;
    if ((unint64_t)&v11[-v8] >= 0x20)
    {
      unint64_t v12 = (char *)(v8 + (v10 & 0xFFFFFFFFFFFFFFE0));
      unint64_t v13 = &v11[v10 & 0xFFFFFFFFFFFFFFE0];
      uint64_t v14 = v11 + 16;
      uint64_t v15 = (long long *)(v8 + 16);
      unint64_t v16 = v10 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v17 = *v15;
        *(v14 - 1) = *(v15 - 1);
        _OWORD *v14 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      v11 += v10 & 0xFFFFFFFFFFFFFFE0;
      if (v10 == (v10 & 0xFFFFFFFFFFFFFFE0)) {
        goto LABEL_18;
      }
    }
  }
  unint64_t v13 = v11;
  do
  {
    char v18 = *v12++;
    *v13++ = v18;
  }
  while (v12 != (char *)(v8 + v10));
LABEL_18:
  int v20 = v13;
LABEL_19:
  sub_CB1820((uint64_t *)&__p, a2, a3);
  if (__p)
  {
    int v20 = __p;
    operator delete(__p);
  }
}

void sub_CB0428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_CB0448(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = sub_3755E4(*(void **)(a1 + 1640));
  uint64_t v5 = sub_375D1C(*(void **)(a1 + 1640));
  uint64_t v6 = sub_375C38(*(void **)(a1 + 1640));
  *(_OWORD *)uint64_t v52 = xmmword_20B93F0;
  *(_DWORD *)&v52[4] = -1;
  unint64_t v7 = *(void *)(a1 + 1608);
  if (v7 >= *(void *)(a1 + 1616))
  {
    uint64_t v8 = sub_CB259C((int64x2_t *)(a1 + 1600), v52);
  }
  else
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v52;
    *(_DWORD *)(v7 + 376) = 3;
    uint64_t v8 = (char *)(v7 + 384);
  }
  *(void *)(a1 + 1608) = v8;
  size_t v9 = (unint64_t *)(v8 - 384);
  *((void *)v8 - 47) = a2;
  *(void *)uint64_t v52 = -1;
  *(_DWORD *)&v52[8] = 0x7FFFFFFF;
  unint64_t v10 = sub_2A2AD8(v6, a2, (uint64_t)v52);
  if (v10 > 0xFFFFFFFEFFFFFFFFLL || v10 == 0)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v52);
      sub_188FC78(v52, (uint64_t)"The trip muid (unencrypted: ", 28);
      unint64_t v12 = (void *)std::ostream::operator<<();
      sub_188FC78(v12, (uint64_t)") in the vehicle position parameters could not be resolved (client preflight: ", 78);
      unint64_t v13 = (void *)std::ostream::operator<<();
      sub_188FC78(v13, (uint64_t)")", 1);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      if (v51 < 0) {
        operator delete(__p[0]);
      }
      if (v54 < 0) {
        operator delete(v53);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    int v14 = *(unsigned __int8 *)(a1 + 1656);
    *(void *)uint64_t v52 = operator new(0x30uLL);
    *(_OWORD *)&v52[8] = xmmword_20B9A80;
    strcpy(*(char **)v52, "PlaceRequestParserModule.Error.TransitIdLookup");
    sub_710A8(v14, (uint64_t)v52, *(void *)(a1 + 1648));
  }
  else
  {
    unint64_t v15 = v10;
    uint64_t v16 = **(void **)(v5 + 3896);
    if (v16 && sub_36F0F0(v16, v15, *(unsigned char *)(v5 + 3904)))
    {
      long long v17 = (int *)sub_369F8C(v4, v15, 0, "trip");
      unint64_t v18 = *(void *)((char *)v17 + *(unsigned __int16 *)((char *)v17 - *v17 + 6));
      long long v19 = (int *)sub_8DFD1C(v4, v18, 0, "line");
      int v20 = (unsigned __int16 *)((char *)v19 - *v19);
      if (*v20 >= 5u && (uint64_t v21 = v20[2]) != 0) {
        uint64_t v22 = *(void *)((char *)v19 + v21);
      }
      else {
        uint64_t v22 = 0;
      }
      uint64_t v26 = sub_398020(v4, 0);
      long long v27 = &v26[-*(int *)v26];
      if (*(unsigned __int16 *)v27 >= 0xBu)
      {
        uint64_t v28 = *((unsigned __int16 *)v27 + 5);
        if (v28)
        {
          if (v26[v28]) {
            nullsub_1(v22);
          }
        }
      }
      uint64_t v29 = sub_3755E4(*(void **)(a1 + 1640));
      long long v30 = (int *)sub_8DFD1C(v29, v18, 0, "line");
      long long v31 = (unsigned __int16 *)((char *)v30 - *v30);
      if (*v31 >= 0x23u && (uint64_t v32 = v31[17]) != 0 && *((unsigned char *)v30 + v32) && !*(unsigned char *)(a1 + 20))
      {
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)v52);
          sub_188FC78(v52, (uint64_t)"The line (unencrypted id: ", 26);
          long long v39 = (void *)std::ostream::operator<<();
          sub_188FC78(v39, (uint64_t)") corresponding to the trip (unencrypted id: ", 45);
          long long v40 = (void *)std::ostream::operator<<();
          sub_188FC78(v40, (uint64_t)") in the transit vehicle position parameters is preflight which is not supported by the client", 94);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          if (v51 < 0) {
            operator delete(__p[0]);
          }
          sub_111ECAC((uint64_t)v52);
        }
        int v41 = *(unsigned __int8 *)(a1 + 1656);
        sub_5E5C(v52, "PlaceRequestParserModule.Error.Preflight");
        sub_710A8(v41, (uint64_t)v52, *(void *)(a1 + 1648));
      }
      else
      {
        uint64_t v33 = sub_3755E4(*(void **)(a1 + 1640));
        if (sub_8F694C(v33, v18) <= *(unsigned __int8 *)(a1 + 21))
        {
          unint64_t *v9 = v15;
          return;
        }
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)v52);
          sub_188FC78(v52, (uint64_t)"The line (unencrypted id: ", 26);
          uint64_t v34 = (void *)std::ostream::operator<<();
          sub_188FC78(v34, (uint64_t)") corresponding to the trip (unencrypted id: ", 45);
          size_t v35 = (void *)std::ostream::operator<<();
          long long v36 = sub_188FC78(v35, (uint64_t)") in the vehicle position parameters has a market support of ", 61);
          unsigned int v37 = sub_8F694C(v4, v18);
          if (v37 <= 3) {
            unsigned int v38 = off_243EDB0[v37];
          }
          else {
            unsigned int v38 = "";
          }
          size_t v42 = strlen(v38);
          int v43 = sub_188FC78(v36, (uint64_t)v38, v42);
          long long v44 = sub_188FC78(v43, (uint64_t)" but the client has only ", 25);
          unint64_t v45 = *(unsigned __int8 *)(a1 + 21);
          if (v45 <= 3) {
            uint64_t v46 = off_243EDB0[v45];
          }
          else {
            uint64_t v46 = "";
          }
          size_t v47 = strlen(v46);
          sub_188FC78(v44, (uint64_t)v46, v47);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          if (v51 < 0) {
            operator delete(__p[0]);
          }
          sub_111ECAC((uint64_t)v52);
        }
        int v48 = *(unsigned __int8 *)(a1 + 1656);
        sub_5E5C(v52, "PlaceRequestParserModule.Error.MarketSupport");
        sub_710A8(v48, (uint64_t)v52, *(void *)(a1 + 1648));
      }
      if ((v52[23] & 0x80000000) != 0) {
        operator delete(*(void **)v52);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_243ED98;
      exception[2] = 42;
    }
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)v52);
      sub_188FC78(v52, (uint64_t)"The trip muid (unencrypted: ", 28);
      uint64_t v23 = (void *)std::ostream::operator<<();
      sub_188FC78(v23, (uint64_t)") in the vehicle position parameters has no realtime vehicle position in the snapshot (client preflight: ", 105);
      long long v24 = (void *)std::ostream::operator<<();
      sub_188FC78(v24, (uint64_t)")", 1);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v51 < 0) {
        operator delete(__p[0]);
      }
      if (v54 < 0) {
        operator delete(v53);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    int v25 = *(unsigned __int8 *)(a1 + 1656);
    *(void *)uint64_t v52 = operator new(0x38uLL);
    *(_OWORD *)&v52[8] = xmmword_20B9AC0;
    strcpy(*(char **)v52, "PlaceRequestParserModule.Error.VehiclePositionLookup");
    sub_710A8(v25, (uint64_t)v52, *(void *)(a1 + 1648));
  }
  if ((v52[23] & 0x80000000) != 0) {
    operator delete(*(void **)v52);
  }
}

void sub_CB0C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_CB0CBC(uint64_t a1, uint64_t a2)
{
  sub_CA624C(a1, (long long *)a2);
  sub_CB102C(v4 + 712, (uint64_t *)(a2 + 712));
  *(_DWORD *)(a1 + 968) = *(_DWORD *)(a2 + 968);
  *(_OWORD *)(a1 + 984) = 0u;
  *(void *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 976) = *(_OWORD *)(a2 + 976);
  *(void *)(a1 + 992) = *(void *)(a2 + 992);
  *(void *)(a2 + 992) = 0;
  *(_OWORD *)(a2 + 976) = 0u;
  *(_DWORD *)(a1 + 1000) = *(_DWORD *)(a2 + 1000);
  *(void *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
  *(void *)(a1 + 1024) = *(void *)(a2 + 1024);
  *(void *)(a2 + 1024) = 0;
  *(_OWORD *)(a2 + 1008) = 0u;
  long long v5 = *(_OWORD *)(a2 + 1032);
  *(void *)(a1 + 1048) = *(void *)(a2 + 1048);
  *(_OWORD *)(a1 + 1032) = v5;
  *(_OWORD *)(a2 + 1040) = 0u;
  *(void *)(a2 + 1032) = 0;
  *(unsigned char *)(a1 + 1056) = *(unsigned char *)(a2 + 1056);
  *(unsigned char *)(a1 + 1064) = *(unsigned char *)(a2 + 1064);
  *(_OWORD *)(a1 + 1080) = 0u;
  *(void *)(a1 + 1072) = 0;
  *(_OWORD *)(a1 + 1072) = *(_OWORD *)(a2 + 1072);
  *(void *)(a1 + 1088) = *(void *)(a2 + 1088);
  *(void *)(a2 + 1088) = 0;
  *(_OWORD *)(a2 + 1072) = 0u;
  *(_DWORD *)(a1 + 1096) = *(_DWORD *)(a2 + 1096);
  *(void *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1104) = *(_OWORD *)(a2 + 1104);
  *(void *)(a1 + 1120) = *(void *)(a2 + 1120);
  *(void *)(a2 + 1120) = 0;
  *(_OWORD *)(a2 + 1104) = 0u;
  *(void *)(a1 + 1128) = *(void *)(a2 + 1128);
  *(void *)(a1 + 1136) = *(void *)(a2 + 1136);
  *(void *)(a1 + 1144) = *(void *)(a2 + 1144);
  *(void *)(a2 + 1144) = 0;
  *(_OWORD *)(a2 + 1128) = 0u;
  *(void *)(a1 + 1152) = *(void *)(a2 + 1152);
  *(void *)(a1 + 1160) = *(void *)(a2 + 1160);
  *(void *)(a1 + 1168) = *(void *)(a2 + 1168);
  *(void *)(a2 + 1168) = 0;
  *(_OWORD *)(a2 + 1152) = 0u;
  *(_DWORD *)(a1 + 1176) = *(_DWORD *)(a2 + 1176);
  __int16 v6 = *(_WORD *)(a2 + 1184);
  *(unsigned char *)(a1 + 1186) = *(unsigned char *)(a2 + 1186);
  *(_WORD *)(a1 + 1184) = v6;
  long long v7 = *(_OWORD *)(a2 + 1192);
  *(void *)(a1 + 1208) = *(void *)(a2 + 1208);
  *(_OWORD *)(a1 + 1192) = v7;
  *(void *)(a2 + 1192) = 0;
  *(void *)(a2 + 1208) = 0;
  *(void *)(a2 + 1200) = 0;
  uint64_t v8 = *(void *)(a2 + 1216);
  *(_DWORD *)(a1 + 1224) = *(_DWORD *)(a2 + 1224);
  *(void *)(a1 + 1216) = v8;
  uint64_t v9 = *(void *)(a2 + 1232);
  *(void *)(a1 + 1237) = *(void *)(a2 + 1237);
  *(void *)(a1 + 1232) = v9;
  *(void *)(a1 + 1248) = 0;
  *(void *)(a1 + 1264) = 0;
  *(void *)(a1 + 1256) = 0;
  *(_OWORD *)(a1 + 1248) = *(_OWORD *)(a2 + 1248);
  *(void *)(a1 + 1264) = *(void *)(a2 + 1264);
  *(void *)(a2 + 1256) = 0;
  *(void *)(a2 + 1248) = 0;
  *(void *)(a2 + 1264) = 0;
  uint64_t v10 = *(void *)(a2 + 1272);
  *(_DWORD *)(a1 + 1280) = *(_DWORD *)(a2 + 1280);
  *(void *)(a1 + 1272) = v10;
  uint64_t v11 = *(void *)(a2 + 1288);
  *(void *)(a2 + 1288) = 0;
  *(void *)(a1 + 1288) = v11;
  *(void *)(a1 + 1296) = *(void *)(a2 + 1296);
  *(void *)(a2 + 1296) = 0;
  uint64_t v12 = *(void *)(a2 + 1304);
  *(void *)(a1 + 1304) = v12;
  uint64_t v13 = *(void *)(a2 + 1312);
  *(void *)(a1 + 1312) = v13;
  *(_DWORD *)(a1 + 1320) = *(_DWORD *)(a2 + 1320);
  if (v13)
  {
    unint64_t v14 = *(void *)(v12 + 8);
    unint64_t v15 = *(void *)(a1 + 1296);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        v14 %= v15;
      }
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(void *)(v11 + 8 * v14) = a1 + 1304;
    *(void *)(a2 + 1304) = 0;
    *(void *)(a2 + 1312) = 0;
  }
  *(_DWORD *)(a1 + 1328) = *(_DWORD *)(a2 + 1328);
  uint64_t v16 = *(void *)(a2 + 1336);
  *(void *)(a2 + 1336) = 0;
  *(void *)(a1 + 1336) = v16;
  *(void *)(a1 + 1344) = *(void *)(a2 + 1344);
  *(void *)(a2 + 1344) = 0;
  uint64_t v17 = *(void *)(a2 + 1352);
  *(void *)(a1 + 1352) = v17;
  uint64_t v18 = *(void *)(a2 + 1360);
  *(void *)(a1 + 1360) = v18;
  *(_DWORD *)(a1 + 1368) = *(_DWORD *)(a2 + 1368);
  if (v18)
  {
    unint64_t v19 = *(void *)(v17 + 8);
    unint64_t v20 = *(void *)(a1 + 1344);
    if ((v20 & (v20 - 1)) != 0)
    {
      if (v19 >= v20) {
        v19 %= v20;
      }
    }
    else
    {
      v19 &= v20 - 1;
    }
    *(void *)(v16 + 8 * v19) = a1 + 1352;
    *(void *)(a2 + 1352) = 0;
    *(void *)(a2 + 1360) = 0;
  }
  *(_OWORD *)(a1 + 1376) = *(_OWORD *)(a2 + 1376);
  long long v21 = *(_OWORD *)(a2 + 1392);
  long long v22 = *(_OWORD *)(a2 + 1408);
  long long v23 = *(_OWORD *)(a2 + 1424);
  *(_OWORD *)(a1 + 1438) = *(_OWORD *)(a2 + 1438);
  *(_OWORD *)(a1 + 1424) = v23;
  *(_OWORD *)(a1 + 1408) = v22;
  *(_OWORD *)(a1 + 1392) = v21;
  *(void *)(a1 + 1456) = 0;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1456) = *(_OWORD *)(a2 + 1456);
  *(void *)(a1 + 1472) = *(void *)(a2 + 1472);
  *(void *)(a2 + 1472) = 0;
  *(_OWORD *)(a2 + 1456) = 0u;
  __int16 v24 = *(_WORD *)(a2 + 1480);
  *(unsigned char *)(a1 + 1482) = *(unsigned char *)(a2 + 1482);
  *(_WORD *)(a1 + 1480) = v24;
  long long v25 = *(_OWORD *)(a2 + 1488);
  *(void *)(a1 + 1504) = *(void *)(a2 + 1504);
  *(_OWORD *)(a1 + 1488) = v25;
  *(void *)(a2 + 1504) = 0;
  *(void *)(a2 + 1496) = 0;
  *(void *)(a2 + 1488) = 0;
  long long v26 = *(_OWORD *)(a2 + 1512);
  *(void *)(a1 + 1528) = *(void *)(a2 + 1528);
  *(_OWORD *)(a1 + 1512) = v26;
  return a1;
}

uint64_t sub_CB102C(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)BOOL result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v3 = a2[2];
  *(void *)(result + 16) = v3;
  uint64_t v4 = a2[3];
  *(void *)(result + 24) = v4;
  *(_DWORD *)(result + 32) = *((_DWORD *)a2 + 8);
  if (v4)
  {
    unint64_t v5 = *(void *)(v3 + 8);
    unint64_t v6 = *(void *)(result + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        v5 %= v6;
      }
    }
    else
    {
      v5 &= v6 - 1;
    }
    *(void *)(v2 + 8 * v5) = result + 16;
    a2[2] = 0;
    a2[3] = 0;
  }
  uint64_t v7 = a2[5];
  a2[5] = 0;
  *(void *)(result + 40) = v7;
  *(void *)(result + 48) = a2[6];
  a2[6] = 0;
  uint64_t v8 = a2[7];
  *(void *)(result + 56) = v8;
  uint64_t v9 = a2[8];
  *(void *)(result + 64) = v9;
  *(_DWORD *)(result + 72) = *((_DWORD *)a2 + 18);
  if (v9)
  {
    unint64_t v10 = *(void *)(v8 + 8);
    unint64_t v11 = *(void *)(result + 48);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        v10 %= v11;
      }
    }
    else
    {
      v10 &= v11 - 1;
    }
    *(void *)(v7 + 8 * v10) = result + 56;
    a2[7] = 0;
    a2[8] = 0;
  }
  uint64_t v12 = a2[10];
  a2[10] = 0;
  *(void *)(result + 80) = v12;
  *(void *)(result + 88) = a2[11];
  a2[11] = 0;
  uint64_t v13 = a2[12];
  *(void *)(result + 96) = v13;
  uint64_t v14 = a2[13];
  *(void *)(result + 104) = v14;
  *(_DWORD *)(result + 112) = *((_DWORD *)a2 + 28);
  if (v14)
  {
    unint64_t v15 = *(void *)(v13 + 8);
    unint64_t v16 = *(void *)(result + 88);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16) {
        v15 %= v16;
      }
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(void *)(v12 + 8 * v15) = result + 96;
    a2[12] = 0;
    a2[13] = 0;
  }
  uint64_t v17 = a2[15];
  a2[15] = 0;
  *(void *)(result + 120) = v17;
  *(void *)(result + 128) = a2[16];
  a2[16] = 0;
  uint64_t v18 = a2[17];
  *(void *)(result + 136) = v18;
  uint64_t v19 = a2[18];
  *(void *)(result + 144) = v19;
  *(_DWORD *)(result + 152) = *((_DWORD *)a2 + 38);
  if (v19)
  {
    unint64_t v20 = *(void *)(v18 + 8);
    unint64_t v21 = *(void *)(result + 128);
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v20 >= v21) {
        v20 %= v21;
      }
    }
    else
    {
      v20 &= v21 - 1;
    }
    *(void *)(v17 + 8 * v20) = result + 136;
    a2[17] = 0;
    a2[18] = 0;
  }
  uint64_t v22 = a2[20];
  a2[20] = 0;
  *(void *)(result + 160) = v22;
  *(void *)(result + 168) = a2[21];
  a2[21] = 0;
  uint64_t v23 = a2[22];
  *(void *)(result + 176) = v23;
  uint64_t v24 = a2[23];
  *(void *)(result + 184) = v24;
  *(_DWORD *)(result + 192) = *((_DWORD *)a2 + 48);
  if (v24)
  {
    unint64_t v25 = *(void *)(v23 + 8);
    unint64_t v26 = *(void *)(result + 168);
    if ((v26 & (v26 - 1)) != 0)
    {
      if (v25 >= v26) {
        v25 %= v26;
      }
    }
    else
    {
      v25 &= v26 - 1;
    }
    *(void *)(v22 + 8 * v25) = result + 176;
    a2[22] = 0;
    a2[23] = 0;
  }
  uint64_t v27 = a2[25];
  a2[25] = 0;
  *(void *)(result + 200) = v27;
  *(void *)(result + 208) = a2[26];
  a2[26] = 0;
  uint64_t v28 = a2[27];
  *(void *)(result + 216) = v28;
  uint64_t v29 = a2[28];
  *(void *)(result + 224) = v29;
  *(_DWORD *)(result + 232) = *((_DWORD *)a2 + 58);
  if (v29)
  {
    unint64_t v30 = *(void *)(v28 + 8);
    unint64_t v31 = *(void *)(result + 208);
    if ((v31 & (v31 - 1)) != 0)
    {
      if (v30 >= v31) {
        v30 %= v31;
      }
    }
    else
    {
      v30 &= v31 - 1;
    }
    *(void *)(v27 + 8 * v30) = result + 216;
    a2[27] = 0;
    a2[28] = 0;
  }
  uint64_t v32 = a2[30];
  *(unsigned char *)(result + 248) = *((unsigned char *)a2 + 248);
  *(void *)(result + 240) = v32;
  return result;
}

void sub_CB12E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      uint64_t v5 = v4 - 384;
      int v6 = *(_DWORD *)(v4 - 8);
      switch(v6)
      {
        case 2:
          sub_402C7C(v4 - 384);
          break;
        case 1:
          sub_8EB894(v4 - 384);
          break;
        case 0:
          uint64_t v7 = *(void **)(v4 - 288);
          if (v7)
          {
            *(void *)(v4 - 280) = v7;
            operator delete(v7);
          }
          uint64_t v8 = *(void **)(v4 - 312);
          if (v8)
          {
            *(void *)(v4 - 304) = v8;
            operator delete(v8);
          }
          uint64_t v9 = *(void **)(v4 - 360);
          if (v9)
          {
            *(void *)(v4 - 352) = v9;
            operator delete(v9);
          }
          break;
      }
      v4 -= 384;
    }
    while (v5 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void sub_CB13A4(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v4 = *(void ***)(a1 + 16);
    if (v4)
    {
      do
      {
        unint64_t v16 = (void **)*v4;
        if (*((char *)v4 + 39) < 0) {
          operator delete(v4[2]);
        }
        operator delete(v4);
        uint64_t v4 = v16;
      }
      while (v16);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v7 = *a2;
  *a2 = 0;
  uint64_t v8 = *(void **)a1;
  *(void *)a1 = v7;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v11 = a2[2];
  unint64_t v10 = a2 + 2;
  uint64_t v9 = v11;
  uint64_t v12 = *(v10 - 1);
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  uint64_t v13 = v10[1];
  *(void *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    unint64_t v14 = *(void *)(v9 + 8);
    unint64_t v15 = *(void *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        v14 %= v15;
      }
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v14) = a1 + 16;
    void *v10 = 0;
    v10[1] = 0;
  }
}

void sub_CB14AC(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

uint64_t sub_CB14E4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = (long long *)(a1 + 8);
  uint64_t v5 = (long long *)(a2 + 8);
  if (*(unsigned char *)a2)
  {
    long long v6 = *v5;
    *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
    long long *v4 = v6;
    sub_4BBDC0(a1 + 40, a2 + 40);
    *(_OWORD *)(a1 + 1576) = *(_OWORD *)(a2 + 1576);
    *(void *)(a1 + 1592) = 0;
    *(void *)(a1 + 1608) = 0;
    *(void *)(a1 + 1600) = 0;
    sub_CB15EC((void *)(a1 + 1592), *(void *)(a2 + 1592), *(void *)(a2 + 1600), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 1600) - *(void *)(a2 + 1592)) >> 7));
    *(void *)(a1 + 1616) = *(void *)(a2 + 1616);
  }
  else
  {
    long long *v4 = *v5;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    sub_3E7BF4((unsigned char *)(a1 + 24), *(void *)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 5);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  }
  return a1;
}

void sub_CB15D8(_Unwind_Exception *a1)
{
  sub_4BCED0(v1);
  _Unwind_Resume(a1);
}

void sub_CB15EC(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(384 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[384 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        sub_8EB534((uint64_t)&v8[v9], a2 + v9);
        v9 += 384;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_CB16BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_CB16D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_CB175C(v11, v12, v12, v10, v10);
  *(void *)(v9 + 8) = v10;
  sub_CB1704(&a9);
  _Unwind_Resume(a1);
}

void ***sub_CB1704(void ***a1)
{
  if (*((unsigned char *)a1 + 8)) {
    return a1;
  }
  uint64_t v3 = (uint64_t *)*a1;
  uint64_t v4 = (uint64_t)**a1;
  if (!v4) {
    return a1;
  }
  sub_CB12E0((uint64_t)v3, v4);
  operator delete(**a1);
  return a1;
}

void sub_CB175C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = v6 - 384;
      int v8 = *(_DWORD *)(v6 - 8);
      switch(v8)
      {
        case 2:
          sub_402C7C(v6 - 384);
          break;
        case 1:
          sub_8EB894(v6 - 384);
          break;
        case 0:
          uint64_t v9 = *(void **)(v6 - 288);
          if (v9)
          {
            *(void *)(v6 - 280) = v9;
            operator delete(v9);
          }
          uint64_t v10 = *(void **)(v6 - 312);
          if (v10)
          {
            *(void *)(v6 - 304) = v10;
            operator delete(v10);
          }
          uint64_t v11 = *(void **)(v6 - 360);
          if (v11)
          {
            *(void *)(v6 - 352) = v11;
            operator delete(v11);
          }
          break;
      }
      v6 -= 384;
    }
    while (v7 != a5);
  }
}

uint64_t sub_CB1820(uint64_t *a1, uint64_t a2, int a3)
{
  sub_6BAC((uint64_t)v21);
  uint64_t v6 = *(void *)(v21[0] - 24);
  uint64_t v7 = std::locale::classic();
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + v6));
  std::ios_base::imbue((std::ios_base *)((char *)v21 + v6), v7);
  std::locale::~locale(&v24);
  int v8 = *(std::locale **)((char *)&v21[5] + v6);
  if (v8)
  {
    (*((void (**)(std::locale *, const std::locale *))v8->__locale_ + 2))(v8, v7);
    uint64_t v9 = v8 + 1;
    std::locale::locale(&v23, v9);
    std::locale::operator=(v9, v7);
    std::locale::~locale(&v23);
  }
  std::locale::~locale(&v20);
  uint64_t v10 = v21[0];
  *(_DWORD *)((char *)&v21[1] + *(void *)(v21[0] - 24)) = *(_DWORD *)((unsigned char *)&v21[1] + *(void *)(v21[0] - 24)) & 0xFFFFFFB5 | 8;
  uint64_t v11 = (char *)v21 + *(void *)(v10 - 24);
  if (*((_DWORD *)v11 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(v10 - 24)));
    unint64_t v14 = std::locale::use_facet(&v24, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 32);
    std::locale::~locale(&v24);
    *((_DWORD *)v11 + 36) = 48;
    uint64_t v13 = *a1;
    uint64_t v12 = a1[1];
    if (v13 == v12) {
      goto LABEL_18;
    }
  }
  else
  {
    *((_DWORD *)v11 + 36) = 48;
    uint64_t v13 = *a1;
    uint64_t v12 = a1[1];
    if (v13 == v12) {
      goto LABEL_18;
    }
  }
  *(void *)((char *)&v21[3] + *(void *)(v21[0] - 24)) = a3;
  std::ostream::operator<<();
  if (v13 + 1 != v12)
  {
    uint64_t v15 = 1;
    do
    {
      if (v15)
      {
        int v16 = *(char *)(a2 + 23);
        if (v16 >= 0) {
          uint64_t v17 = a2;
        }
        else {
          uint64_t v17 = *(void *)a2;
        }
        if (v16 >= 0) {
          uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v18 = *(void *)(a2 + 8);
        }
        sub_188FC78(v21, v17, v18);
      }
      *(void *)((char *)&v21[3] + *(void *)(v21[0] - 24)) = a3;
      std::ostream::operator<<();
      ++v15;
    }
    while (v13 + v15 != v12);
  }
LABEL_18:
  std::stringbuf::str();
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_CB1B94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CB1BA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CB1BBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::locale::~locale((std::locale *)(v2 - 88));
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CB1BE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CB1BF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CB1C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_CB1C20(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 1592);
    if (v2)
    {
      sub_CB12E0(a1 + 1592, v2);
      operator delete(*(void **)(a1 + 1592));
    }
    sub_4BCED0(a1 + 40);
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    return a1;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 24);
  if (v5 != v4)
  {
    do
    {
      if (*(char *)(v5 - 1) < 0) {
        operator delete(*(void **)(v5 - 24));
      }
      v5 -= 32;
    }
    while (v5 != v4);
    uint64_t v6 = *(void **)(a1 + 24);
  }
  *(void *)(a1 + 32) = v4;
  operator delete(v6);
  return a1;
}

char *sub_CB1CD4(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 7);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 7) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 7);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 7) >= 0x55555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v21 = a1 + 1;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(384 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  int v8 = &v7[384 * v3];
  long long __p = v7;
  v19.i64[0] = (uint64_t)v8;
  uint64_t v9 = &v7[384 * v6];
  v19.i64[1] = (uint64_t)v8;
  std::locale v20 = v9;
  *(_OWORD *)int v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  *(void *)(a2 + 40) = 0;
  *((void *)v8 + 5) = v10;
  *((void *)v8 + 6) = v11;
  LODWORD(v10) = *(_DWORD *)(a2 + 64);
  *((_DWORD *)v8 + 16) = v10;
  if (v10 <= 5) {
    *((void *)v8 + 7) = *(void *)(a2 + 56);
  }
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(a2 + 72);
  *((void *)v8 + 11) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *((_OWORD *)v8 + 6) = *(_OWORD *)(a2 + 96);
  *((void *)v8 + 14) = *(void *)(a2 + 112);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *((_DWORD *)v8 + 94) = 0;
  uint64_t v12 = v8 + 384;
  uint64_t v14 = a1->i64[0];
  unint64_t v13 = a1->u64[1];
  if (v13 == a1->i64[0])
  {
    int64x2_t v15 = vdupq_n_s64(v13);
  }
  else
  {
    do
    {
      v13 -= 384;
      sub_CA89F0((uint64_t)(v8 - 384), v13);
    }
    while (v13 != v14);
    int64x2_t v15 = *a1;
  }
  a1->i64[0] = (uint64_t)v8;
  a1->i64[1] = (uint64_t)v12;
  int64x2_t v19 = v15;
  int v16 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v9;
  std::locale v20 = v16;
  long long __p = (void *)v15.i64[0];
  sub_CB1E90((uint64_t)&__p, v15.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v12;
}

void sub_CB1E90(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v5 = i - 384;
    *(void *)(a1 + 16) = i - 384;
    int v6 = *(_DWORD *)(i - 8);
    switch(v6)
    {
      case 2:
        sub_402C7C(v5);
        break;
      case 1:
        sub_8EB894(v5);
        break;
      case 0:
        uint64_t v7 = *(void **)(i - 288);
        if (v7)
        {
          *(void *)(i - 280) = v7;
          operator delete(v7);
        }
        int v8 = *(void **)(i - 312);
        if (v8)
        {
          *(void *)(i - 304) = v8;
          operator delete(v8);
        }
        uint64_t v9 = *(void **)(i - 360);
        if (v9)
        {
          *(void *)(i - 352) = v9;
          operator delete(v9);
        }
        break;
    }
  }
}

uint64_t sub_CB1F50(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 7);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 7) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 7);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 7) >= 0x55555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  std::locale v20 = a1 + 1;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(384 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (uint64_t)&v7[384 * v3];
  uint64_t v9 = &v7[384 * v6];
  *(_DWORD *)(v8 + 376) = -1;
  sub_CB20A8(v8, a2);
  *(_DWORD *)(v10 + 376) = 1;
  uint64_t v11 = v10 + 384;
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v14 = vdupq_n_s64(v12);
  }
  else
  {
    do
    {
      v12 -= 384;
      sub_CA89F0(v10 - 384, v12);
    }
    while (v12 != v13);
    int64x2_t v14 = *a1;
  }
  a1->i64[0] = v10;
  a1->i64[1] = v11;
  int64x2_t v18 = v14;
  uint64_t v15 = a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v9;
  uint64_t v19 = v15;
  long long __p = (void *)v14.i64[0];
  sub_CB1E90((uint64_t)&__p, v14.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

__n128 sub_CB20A8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  int v5 = *(_DWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  int v6 = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 155) = *(_DWORD *)(a2 + 155);
  *(_DWORD *)(a1 + 152) = v6;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0;
  __n128 result = *(__n128 *)(a2 + 160);
  *(__n128 *)(a1 + 160) = result;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  int v8 = *(unsigned __int8 *)(a2 + 368);
  *(unsigned char *)(a1 + 368) = v8;
  if (v8)
  {
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    long long v9 = *(_OWORD *)(a2 + 200);
    long long v10 = *(_OWORD *)(a2 + 216);
    long long v11 = *(_OWORD *)(a2 + 232);
    *(_DWORD *)(a1 + 247) = *(_DWORD *)(a2 + 247);
    *(_OWORD *)(a1 + 232) = v11;
    *(_OWORD *)(a1 + 216) = v10;
    *(_OWORD *)(a1 + 200) = v9;
    *(void *)(a1 + 264) = 0;
    *(void *)(a1 + 272) = 0;
    *(void *)(a1 + 256) = 0;
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(void *)(a2 + 256) = 0;
    *(void *)(a2 + 264) = 0;
    *(void *)(a2 + 272) = 0;
    int v12 = *(_DWORD *)(a2 + 280);
    *(unsigned char *)(a1 + 284) = *(unsigned char *)(a2 + 284);
    *(_DWORD *)(a1 + 280) = v12;
    *(void *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0;
    *(void *)(a1 + 288) = 0;
    __n128 result = *(__n128 *)(a2 + 288);
    *(__n128 *)(a1 + 288) = result;
    *(void *)(a1 + 304) = *(void *)(a2 + 304);
    *(void *)(a2 + 288) = 0;
    *(void *)(a2 + 296) = 0;
    *(void *)(a2 + 304) = 0;
    *(void *)(a1 + 312) = 0;
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    uint64_t v13 = *(void *)(a2 + 320);
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    *(void *)(a1 + 320) = v13;
    *(void *)(a1 + 328) = *(void *)(a2 + 328);
    *(void *)(a2 + 312) = 0;
    *(void *)(a2 + 320) = 0;
    *(void *)(a2 + 328) = 0;
    int v14 = *(_DWORD *)(a2 + 336);
    *(_DWORD *)(a1 + 339) = *(_DWORD *)(a2 + 339);
    *(_DWORD *)(a1 + 336) = v14;
    *(void *)(a1 + 352) = 0;
    *(void *)(a1 + 360) = 0;
    *(void *)(a1 + 344) = 0;
    uint64_t v15 = *(void *)(a2 + 352);
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    *(void *)(a1 + 352) = v15;
    *(void *)(a1 + 360) = *(void *)(a2 + 360);
    *(void *)(a2 + 344) = 0;
    *(void *)(a2 + 352) = 0;
    *(void *)(a2 + 360) = 0;
  }
  return result;
}

void *sub_CB2248(void *result, uint64_t a2)
{
  *(_OWORD *)__n128 result = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)((char *)result + 63) = *(_DWORD *)(a2 + 63);
  *((_OWORD *)result + 2) = v3;
  *((_OWORD *)result + 3) = v4;
  *((_OWORD *)result + 1) = v2;
  if (result != (void *)a2)
  {
    int v6 = result;
    sub_147D0(result + 9, *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
    int v7 = *(_DWORD *)(a2 + 96);
    *((unsigned char *)v6 + 100) = *(unsigned char *)(a2 + 100);
    *((_DWORD *)v6 + 24) = v7;
    sub_BE7EAC((char **)v6 + 13, *(long long **)(a2 + 104), *(long long **)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 6);
    sub_BE7EAC((char **)v6 + 16, *(long long **)(a2 + 128), *(long long **)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 6);
    int v8 = *(_DWORD *)(a2 + 152);
    *(_DWORD *)((char *)v6 + 155) = *(_DWORD *)(a2 + 155);
    *((_DWORD *)v6 + 38) = v8;
    long long v9 = *(char **)(a2 + 160);
    long long v10 = *(char **)(a2 + 168);
    return sub_9094A4(v6 + 20, v9, v10, 0xCCCCCCCCCCCCCCCDLL * ((v10 - v9) >> 3));
  }
  return result;
}

char *sub_CB232C(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 7);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 7) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 7);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 7) >= 0x55555555555555) {
    unint64_t v5 = 0xAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v5 = v4;
  }
  uint64_t v28 = a1 + 1;
  if (v5 > 0xAAAAAAAAAAAAAALL) {
    sub_188D718();
  }
  uint64_t v7 = 384 * v5;
  int v8 = (char *)operator new(384 * v5);
  long long v9 = &v8[384 * v3];
  long long __p = v8;
  v26.i64[0] = (uint64_t)v9;
  v26.i64[1] = (uint64_t)v9;
  uint64_t v27 = &v8[v7];
  long long v10 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v9 + 3) = v10;
  *(_DWORD *)(v9 + 63) = *(_DWORD *)(a2 + 63);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)long long v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v11;
  *(_OWORD *)(v9 + 72) = *(_OWORD *)(a2 + 72);
  *((void *)v9 + 11) = *(void *)(a2 + 88);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 72) = 0;
  v9[100] = *(unsigned char *)(a2 + 100);
  *((_DWORD *)v9 + 24) = *(_DWORD *)(a2 + 96);
  *((_DWORD *)v9 + 28) = *(_DWORD *)(a2 + 112);
  *((void *)v9 + 13) = *(void *)(a2 + 104);
  *((void *)v9 + 17) = *(void *)(a2 + 136);
  *(_OWORD *)(v9 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *((_OWORD *)v9 + 9) = *(_OWORD *)(a2 + 144);
  *((void *)v9 + 20) = *(void *)(a2 + 160);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  long long v12 = *(_OWORD *)(a2 + 168);
  *((void *)v9 + 23) = *(void *)(a2 + 184);
  *(_OWORD *)(v9 + 168) = v12;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  long long v13 = *(_OWORD *)(a2 + 192);
  *((void *)v9 + 26) = *(void *)(a2 + 208);
  *((_OWORD *)v9 + 12) = v13;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  long long v14 = *(_OWORD *)(a2 + 216);
  *((void *)v9 + 29) = *(void *)(a2 + 232);
  *(_OWORD *)(v9 + 216) = v14;
  *((_OWORD *)v9 + 15) = *(_OWORD *)(a2 + 240);
  *(void *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 0;
  uint64_t v15 = *(void *)(a2 + 264);
  *((void *)v9 + 32) = *(void *)(a2 + 256);
  *((void *)v9 + 33) = v15;
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  long long v16 = *(_OWORD *)(a2 + 272);
  long long v17 = *(_OWORD *)(a2 + 288);
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 280) = 0;
  *((_OWORD *)v9 + 17) = v16;
  *((_OWORD *)v9 + 18) = v17;
  *((void *)v9 + 38) = *(void *)(a2 + 304);
  *(void *)(a2 + 288) = 0;
  *(void *)(a2 + 296) = 0;
  *(void *)(a2 + 304) = 0;
  long long v18 = *(_OWORD *)(a2 + 312);
  *((void *)v9 + 41) = *(void *)(a2 + 328);
  *(_OWORD *)(v9 + 312) = v18;
  *((_OWORD *)v9 + 21) = *(_OWORD *)(a2 + 336);
  *((void *)v9 + 44) = *(void *)(a2 + 352);
  *(void *)(a2 + 336) = 0;
  *(void *)(a2 + 344) = 0;
  *(void *)(a2 + 352) = 0;
  *((_DWORD *)v9 + 90) = *(_DWORD *)(a2 + 360);
  *((void *)v9 + 46) = *(void *)(a2 + 368);
  *((_DWORD *)v9 + 94) = 2;
  uint64_t v19 = v9 + 384;
  uint64_t v21 = a1->i64[0];
  unint64_t v20 = a1->u64[1];
  if (v20 == a1->i64[0])
  {
    int64x2_t v22 = vdupq_n_s64(v20);
  }
  else
  {
    do
    {
      v20 -= 384;
      sub_CA89F0((uint64_t)(v9 - 384), v20);
    }
    while (v20 != v21);
    int64x2_t v22 = *a1;
  }
  a1->i64[0] = (uint64_t)v9;
  a1->i64[1] = (uint64_t)v19;
  int64x2_t v26 = v22;
  std::locale v23 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v27;
  uint64_t v27 = v23;
  long long __p = (void *)v22.i64[0];
  sub_CB1E90((uint64_t)&__p, v22.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v19;
}

char *sub_CB259C(int64x2_t *a1, _OWORD *a2)
{
  uint64_t v4 = a1->i64[0];
  unint64_t v3 = a1->u64[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - a1->i64[0]) >> 7);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  uint64_t v7 = a1[1].i64[0];
  if (0x5555555555555556 * ((v7 - v4) >> 7) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((v7 - v4) >> 7);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 7) >= 0x55555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAALL;
  }
  uint64_t v19 = a1 + 1;
  if (v6 > 0xAAAAAAAAAAAAAALL) {
    sub_188D718();
  }
  uint64_t v9 = 384 * v6;
  long long v10 = (char *)operator new(384 * v6);
  long long v11 = &v10[384 * v5];
  long long v12 = &v10[v9];
  *(_OWORD *)long long v11 = *a2;
  *((_DWORD *)v11 + 94) = 3;
  long long v13 = v11 + 384;
  if (v3 == v4)
  {
    int64x2_t v14 = vdupq_n_s64(v3);
  }
  else
  {
    do
    {
      v3 -= 384;
      sub_CA89F0((uint64_t)(v11 - 384), v3);
    }
    while (v3 != v4);
    int64x2_t v14 = *a1;
    uint64_t v7 = a1[1].i64[0];
  }
  a1->i64[0] = (uint64_t)v11;
  a1->i64[1] = (uint64_t)v13;
  int64x2_t v17 = v14;
  a1[1].i64[0] = (uint64_t)v12;
  uint64_t v18 = v7;
  long long __p = (void *)v14.i64[0];
  sub_CB1E90((uint64_t)&__p, v14.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

char *sub_CB26E8(int64x2_t *a1, _OWORD *a2)
{
  uint64_t v4 = a1->i64[0];
  unint64_t v3 = a1->u64[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - a1->i64[0]) >> 7);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  uint64_t v7 = a1[1].i64[0];
  if (0x5555555555555556 * ((v7 - v4) >> 7) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((v7 - v4) >> 7);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 7) >= 0x55555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAALL;
  }
  uint64_t v19 = a1 + 1;
  if (v6 > 0xAAAAAAAAAAAAAALL) {
    sub_188D718();
  }
  uint64_t v9 = 384 * v6;
  long long v10 = (char *)operator new(384 * v6);
  long long v11 = &v10[384 * v5];
  long long v12 = &v10[v9];
  *(_OWORD *)long long v11 = *a2;
  *((_DWORD *)v11 + 94) = 4;
  long long v13 = v11 + 384;
  if (v3 == v4)
  {
    int64x2_t v14 = vdupq_n_s64(v3);
  }
  else
  {
    do
    {
      v3 -= 384;
      sub_CA89F0((uint64_t)(v11 - 384), v3);
    }
    while (v3 != v4);
    int64x2_t v14 = *a1;
    uint64_t v7 = a1[1].i64[0];
  }
  a1->i64[0] = (uint64_t)v11;
  a1->i64[1] = (uint64_t)v13;
  int64x2_t v17 = v14;
  a1[1].i64[0] = (uint64_t)v12;
  uint64_t v18 = v7;
  long long __p = (void *)v14.i64[0];
  sub_CB1E90((uint64_t)&__p, v14.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_CB2834()
{
  unk_25E15FF = 16641;
  word_25E15E8 = 65;
  byte_25E1617 = 1;
  byte_25E1601 = 0;
}

uint64_t sub_CB285C(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  *(_WORD *)(a1 + 4) = 256;
  *(_DWORD *)(a1 + 8) = 0x7FFFFFFF;
  *(void *)(a1 + 20) = 0;
  *(void *)(a1 + 12) = 0;
  sub_5B9B3C(a1 + 32);
  *(void *)(a1 + 1568) = 0x8000000080000000;
  *(_DWORD *)(a1 + 1576) = 0;
  *(unsigned char *)(a1 + 1580) = 0;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  return a1;
}

void sub_CB28C0()
{
  unk_25E162F = 16641;
  word_25E1618 = 65;
  byte_25E1647 = 1;
  byte_25E1631 = 0;
}

uint64_t sub_CB28E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_725D0((uint64_t)v20);
  sub_182E158(v17, 0, 0);
  double v19 = 0.0;
  sub_E5CFF8((uint64_t *)v16, a2);
  sub_E5CFFC(v16, a1, (uint64_t)&v12);
  if ((v18 & 2) != 0)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = (void *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
    if (v18) {
      unint64_t v6 = (void *)*v6;
    }
  }
  if ((v13 & 2) != 0)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = (void *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFFCLL);
    if (v13) {
      uint64_t v7 = (void *)*v7;
    }
  }
  if (v6 == v7) {
    sub_1830188((uint64_t)v17, (uint64_t)&v12);
  }
  else {
    sub_1830064((uint64_t)v17, (uint64_t)&v12);
  }
  sub_182E7B8(&v12);
  double v19 = sub_72688((uint64_t)v20);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v12);
    sub_188FC78(&v12, (uint64_t)"PlaceResponseBuilderModule took ", 32);
    int v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" ms", 3);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v11 < 0) {
      operator delete(__p);
    }
    if (v15 < 0) {
      operator delete(v14);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  *(unsigned char *)a3 = 1;
  sub_CB2BC8(a3 + 8, (uint64_t)v17);
  *(double *)(a3 + 224) = v19;
  return sub_182E7B8(v17);
}

void sub_CB2B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    sub_182E7B8(&a51);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_182E7B8(&a51);
  _Unwind_Resume(a1);
}

void sub_CB2BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
}

uint64_t sub_CB2BC8(uint64_t a1, uint64_t a2)
{
  sub_182E158(a1, 0, 0);
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if ((v4 & 2) != 0)
    {
      unint64_t v5 = 0;
    }
    else
    {
      unint64_t v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      if (v4) {
        unint64_t v5 = (void *)*v5;
      }
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if ((v6 & 2) != 0)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        uint64_t v7 = (void *)*v7;
      }
    }
    if (v5 == v7) {
      sub_1830188(a1, a2);
    }
    else {
      sub_1830064(a1, a2);
    }
  }
  return a1;
}

double sub_CB2C68()
{
  byte_25E165F = 1;
  word_25E1648 = 65;
  byte_25E1677 = 1;
  word_25E1660 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E1708 = 0u;
  *(_OWORD *)&qword_25E1718 = 0u;
  dword_25E1728 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E1708, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E1708, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E1708, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E1708, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E168F = 8;
  strcpy((char *)&qword_25E1678, "any_mode");
  byte_25E16A7 = 7;
  strcpy((char *)&dword_25E1690, "cycling");
  byte_25E16BF = 7;
  strcpy((char *)&dword_25E16A8, "driving");
  byte_25E16D7 = 7;
  strcpy((char *)&dword_25E16C0, "walking");
  qword_25E16E0 = 0;
  qword_25E16E8 = 0;
  qword_25E16D8 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E16D8 = (uint64_t)v0;
  qword_25E16E0 = (uint64_t)(v0 + 9);
  qword_25E16E8 = (uint64_t)(v0 + 9);
  qword_25E16F0 = 0;
  qword_25E16F8 = 0;
  unk_25E1700 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25E16F8 = (uint64_t)(v1 + 9);
  unk_25E1700 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E16F0 = (uint64_t)v1;
  return result;
}

void sub_CB2F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E1718) {
    sub_20AF4E0((void **)qword_25E1718);
  }
  unsigned int v37 = (void *)xmmword_25E1708;
  *(void *)&xmmword_25E1708 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_CB2FD0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 28) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v6 = sub_5B9B3C(a3 + 48);
  uint64_t result = sub_5B949C(v6, a1 + 32);
  *(_OWORD *)(a3 + 28) = *(_OWORD *)(a1 + 12);
  if ((uint64_t *)a3 != a2) {
    uint64_t result = (uint64_t)sub_CB30FC((void **)a3, *a2, a2[1], 0x53A8FE53A8FE53A9 * ((a2[1] - *a2) >> 4));
  }
  *(_DWORD *)(a3 + 24) = *(_DWORD *)a1;
  return result;
}

void sub_CB305C(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20AF524();
  }
  _Unwind_Resume(exception_object);
}

void sub_CB3078(_Unwind_Exception *a1)
{
  sub_CB308C(v1);
  _Unwind_Resume(a1);
}

void **sub_CB308C(void **a1)
{
  sub_4BCED0((uint64_t)(a1 + 6));
  long long v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    char v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        int v5 = v3 - 2448;
        sub_8E42D4((uint64_t)(v3 - 2440));
        unint64_t v3 = v5;
      }
      while (v5 != v2);
      char v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_CB30FC(void **result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  char v7 = result;
  uint64_t v8 = (uint64_t)result[2];
  uint64_t v9 = (void **)*result;
  if (0x53A8FE53A8FE53A9 * ((v8 - (uint64_t)*result) >> 4) < a4)
  {
    if (v9)
    {
      char v10 = (void **)result[1];
      int v11 = *result;
      if (v10 != v9)
      {
        do
        {
          uint64_t v12 = (char *)(v10 - 306);
          sub_8E42D4((uint64_t)(v10 - 305));
          char v10 = (void **)v12;
        }
        while (v12 != (char *)v9);
        int v11 = *v7;
      }
      v7[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x1AC5701AC5701ALL) {
      goto LABEL_35;
    }
    unint64_t v13 = 0x53A8FE53A8FE53A9 * (v8 >> 4);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= a4) {
      uint64_t v14 = a4;
    }
    unint64_t v15 = v13 >= 0xD62B80D62B80DLL ? 0x1AC5701AC5701ALL : v14;
    if (v15 > 0x1AC5701AC5701ALL) {
LABEL_35:
    }
      sub_2E00();
    uint64_t v16 = 306 * v15;
    uint64_t result = (void **)operator new(2448 * v15);
    int64x2_t v17 = result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = &result[v16];
    if (v6 != a3)
    {
      unint64_t v18 = 0;
      do
      {
        uint64_t v19 = v6 + v18;
        LODWORD(v17[v18 / 8]) = *(_DWORD *)(v6 + v18);
        uint64_t result = (void **)sub_8E6430((uint64_t)&v17[v18 / 8 + 1], v6 + v18 + 8);
        v17[v18 / 8 + 305] = *(void **)(v6 + v18 + 2440);
        v18 += 2448;
      }
      while (v19 + 2448 != a3);
      int64x2_t v17 = (void **)((char *)v17 + v18);
    }
    goto LABEL_32;
  }
  unint64_t v20 = (void **)result[1];
  if (0x53A8FE53A8FE53A9 * (((char *)v20 - (char *)v9) >> 4) >= a4)
  {
    if (a2 == a3)
    {
      int64x2_t v17 = (void **)*result;
      if (v20 == v9)
      {
LABEL_32:
        v7[1] = v17;
        return result;
      }
    }
    else
    {
      int64x2_t v17 = (void **)*result;
      do
      {
        *(_DWORD *)uint64_t v9 = *(_DWORD *)v6;
        uint64_t result = (void **)sub_CB3404((uint64_t)(v9 + 1), v6 + 8);
        v9[305] = *(void **)(v6 + 2440);
        v17 += 306;
        v6 += 2448;
        v9 += 306;
      }
      while (v6 != a3);
      unint64_t v20 = (void **)v7[1];
      if (v20 == v17) {
        goto LABEL_32;
      }
    }
    do
    {
      unint64_t v25 = v20 - 306;
      uint64_t result = (void **)sub_8E42D4((uint64_t)(v20 - 305));
      unint64_t v20 = v25;
    }
    while (v25 != v17);
    goto LABEL_32;
  }
  uint64_t v21 = a2 + 16 * (((char *)v20 - (char *)v9) >> 4);
  if (v20 != v9)
  {
    do
    {
      *(_DWORD *)uint64_t v9 = *(_DWORD *)v6;
      uint64_t result = (void **)sub_CB3404((uint64_t)(v9 + 1), v6 + 8);
      v9[305] = *(void **)(v6 + 2440);
      v6 += 2448;
      v9 += 306;
    }
    while (v6 != v21);
    uint64_t v9 = (void **)v7[1];
  }
  int64x2_t v22 = (char *)v9;
  if (v21 != a3)
  {
    uint64_t v23 = 0;
    do
    {
      uint64_t v24 = v21 + v23 * 8;
      LODWORD(v9[v23]) = *(_DWORD *)(v21 + v23 * 8);
      uint64_t result = (void **)sub_8E6430((uint64_t)&v9[v23 + 1], v21 + v23 * 8 + 8);
      v9[v23 + 305] = *(void **)(v21 + v23 * 8 + 2440);
      v23 += 306;
    }
    while (v24 + 2448 != a3);
    int64x2_t v22 = (char *)&v9[v23];
  }
  v7[1] = v22;
  return result;
}

void sub_CB33DC(_Unwind_Exception *exception_object)
{
  for (; v3; v3 -= 2448)
    sub_8E42D4(v2 - 2440 + v3);
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_CB3404(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  sub_471250(a1 + 120, a2 + 120);
  *(void *)(a1 + 1184) = *(void *)(a2 + 1184);
  long long v5 = *(_OWORD *)(a2 + 1208);
  *(_OWORD *)(a1 + 1192) = *(_OWORD *)(a2 + 1192);
  *(_OWORD *)(a1 + 1208) = v5;
  sub_52FD00(a1 + 1224, a2 + 1224);
  *(void *)(a1 + 1392) = *(void *)(a2 + 1392);
  uint64_t v6 = *(void *)(a2 + 1400);
  *(_DWORD *)(a1 + 1408) = *(_DWORD *)(a2 + 1408);
  *(void *)(a1 + 1400) = v6;
  std::string::operator=((std::string *)(a1 + 1416), (const std::string *)(a2 + 1416));
  *(void *)(a1 + 1448) = *(void *)(a2 + 1448);
  if (a1 == a2)
  {
    *(void *)(a1 + 1488) = *(void *)(a2 + 1488);
    *(void *)(a1 + 1528) = *(void *)(a2 + 1528);
  }
  else
  {
    sub_69208(a1 + 1456, *(std::string **)(a2 + 1456), *(std::string **)(a2 + 1464), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 1464) - *(void *)(a2 + 1456)) >> 3));
    *(void *)(a1 + 1488) = *(void *)(a2 + 1488);
    sub_9C0DA8((void *)(a1 + 1496), *(char **)(a2 + 1496), *(char **)(a2 + 1504), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 1504) - *(void *)(a2 + 1496)) >> 2));
    *(void *)(a1 + 1528) = *(void *)(a2 + 1528);
    sub_985C04((uint64_t *)(a1 + 1536), *(void *)(a2 + 1536), *(void *)(a2 + 1544), 0x823EE08FB823EE09 * ((uint64_t)(*(void *)(a2 + 1544) - *(void *)(a2 + 1536)) >> 3));
  }
  sub_CB381C(a1 + 1560, a2 + 1560);
  *(void *)(a1 + 1784) = *(void *)(a2 + 1784);
  *(void *)(a1 + 1792) = *(void *)(a2 + 1792);
  std::string::operator=((std::string *)(a1 + 1800), (const std::string *)(a2 + 1800));
  std::string::operator=((std::string *)(a1 + 1824), (const std::string *)(a2 + 1824));
  int v7 = *(_DWORD *)(a2 + 1856);
  *(void *)(a1 + 1848) = *(void *)(a2 + 1848);
  *(_DWORD *)(a1 + 1856) = v7;
  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 1912), (const std::string *)(a2 + 1912));
    int v9 = *(_DWORD *)(a2 + 1936);
    *(unsigned char *)(a1 + 1940) = *(unsigned char *)(a2 + 1940);
    *(_DWORD *)(a1 + 1936) = v9;
    *(void *)(a1 + 1952) = *(void *)(a2 + 1952);
    *(void *)(a1 + 2056) = *(void *)(a2 + 2056);
    *(_OWORD *)(a1 + 2112) = *(_OWORD *)(a2 + 2112);
    *(void *)(a1 + 2136) = *(void *)(a2 + 2136);
    *(void *)(a1 + 2176) = *(void *)(a2 + 2176);
    *(void *)(a1 + 2216) = *(void *)(a2 + 2216);
  }
  else
  {
    sub_326C0((void *)(a1 + 1864), *(char **)(a2 + 1864), *(char **)(a2 + 1872), (uint64_t)(*(void *)(a2 + 1872) - *(void *)(a2 + 1864)) >> 3);
    sub_CB3CB8((void **)(a1 + 1888), *(void *)(a2 + 1888), *(void *)(a2 + 1896), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 1896) - *(void *)(a2 + 1888)) >> 4));
    std::string::operator=((std::string *)(a1 + 1912), (const std::string *)(a2 + 1912));
    int v8 = *(_DWORD *)(a2 + 1936);
    *(unsigned char *)(a1 + 1940) = *(unsigned char *)(a2 + 1940);
    *(_DWORD *)(a1 + 1936) = v8;
    *(void *)(a1 + 1952) = *(void *)(a2 + 1952);
    sub_CB42B8(a1 + 1960, *(std::string **)(a2 + 1960), *(std::string **)(a2 + 1968), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 1968) - *(void *)(a2 + 1960)) >> 5));
    sub_CB45DC((uint64_t *)(a1 + 1984), *(std::string **)(a2 + 1984), *(std::string **)(a2 + 1992), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a2 + 1992) - *(void *)(a2 + 1984)) >> 3));
    *(_DWORD *)(a1 + 2040) = *(_DWORD *)(a2 + 2040);
    sub_5A4DC((void *)(a1 + 2008), *(uint64_t **)(a2 + 2024), 0);
    *(void *)(a1 + 2056) = *(void *)(a2 + 2056);
    sub_CB48E4((uint64_t *)(a1 + 2064), *(void *)(a2 + 2064), *(void *)(a2 + 2072), 0x6F96F96F96F96F97 * ((uint64_t)(*(void *)(a2 + 2072) - *(void *)(a2 + 2064)) >> 3));
    sub_CB5018((uint64_t *)(a1 + 2088), *(void *)(a2 + 2088), *(void *)(a2 + 2096), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 2096) - *(void *)(a2 + 2088)) >> 4));
    *(_OWORD *)(a1 + 2112) = *(_OWORD *)(a2 + 2112);
    *(void *)(a1 + 2136) = *(void *)(a2 + 2136);
    sub_CB3940((uint64_t *)(a1 + 2144), *(void *)(a2 + 2144), *(void *)(a2 + 2152), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a2 + 2152) - *(void *)(a2 + 2144)) >> 3));
    *(void *)(a1 + 2176) = *(void *)(a2 + 2176);
    sub_4726C4((void *)(a1 + 2184), *(char **)(a2 + 2184), *(char **)(a2 + 2192), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 2192) - *(void *)(a2 + 2184)) >> 3));
    *(void *)(a1 + 2216) = *(void *)(a2 + 2216);
    sub_9042F4(a1 + 2224, *(void **)(a2 + 2224), *(void **)(a2 + 2232), 0x193D4BB7E327A977 * ((uint64_t)(*(void *)(a2 + 2232) - *(void *)(a2 + 2224)) >> 3));
  }
  *(void *)(a1 + 2248) = *(void *)(a2 + 2248);
  *(void *)(a1 + 2264) = *(void *)(a2 + 2264);
  long long v10 = *(_OWORD *)(a2 + 2272);
  long long v11 = *(_OWORD *)(a2 + 2288);
  *(_OWORD *)(a1 + 2300) = *(_OWORD *)(a2 + 2300);
  *(_OWORD *)(a1 + 2288) = v11;
  *(_OWORD *)(a1 + 2272) = v10;
  sub_4F39B8(a1 + 2320, (std::string *)(a2 + 2320));
  *(void *)(a1 + 2360) = *(void *)(a2 + 2360);
  std::string::operator=((std::string *)(a1 + 2368), (const std::string *)(a2 + 2368));
  *(unsigned char *)(a1 + 2392) = *(unsigned char *)(a2 + 2392);
  std::string::operator=((std::string *)(a1 + 2400), (const std::string *)(a2 + 2400));
  *(unsigned char *)(a1 + 2424) = *(unsigned char *)(a2 + 2424);
  return a1;
}

uint64_t sub_CB381C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  if (a1 != a2)
  {
    sub_8F54F4((uint64_t *)(a1 + 16), *(void *)(a2 + 16), *(void *)(a2 + 24), 0x66FD0EB66FD0EB67 * ((uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3));
    sub_8F5FC0((uint64_t *)(a1 + 40), *(void *)(a2 + 40), *(void *)(a2 + 48), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 4));
    sub_CB3940((uint64_t *)(a1 + 64), *(void *)(a2 + 64), *(void *)(a2 + 72), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3));
    sub_CB3CB8((void **)(a1 + 88), *(void *)(a2 + 88), *(void *)(a2 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 4));
    sub_CB3FF8((uint64_t *)(a1 + 112), *(long long **)(a2 + 112), *(long long **)(a2 + 120), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3));
  }
  std::string::operator=((std::string *)(a1 + 136), (const std::string *)(a2 + 136));
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  std::string::operator=((std::string *)(a1 + 184), (const std::string *)(a2 + 184));
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  return a1;
}

void sub_CB3940(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0x86BCA1AF286BCA1BLL * ((v8 - *a1) >> 3) >= a4)
  {
    if (0x86BCA1AF286BCA1BLL * ((a1[1] - v10) >> 3) >= a4)
    {
      sub_CB3BBC((uint64_t)&v26, a2, a3, v10);
      uint64_t v23 = v22;
      uint64_t v24 = a1[1];
      if (v24 != v22)
      {
        do
        {
          v24 -= 152;
          sub_8E4758(v9, v24);
        }
        while (v24 != v23);
      }
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 8 * ((a1[1] - v10) >> 3);
      sub_CB3BBC((uint64_t)&v25, a2, v19, v10);
      uint64_t v20 = a1[1];
      if (v19 != a3)
      {
        uint64_t v21 = 0;
        do
        {
          sub_8E7FF8(v20 + v21, v19 + v21);
          v21 += 152;
        }
        while (v19 + v21 != a3);
        v20 += v21;
      }
      a1[1] = v20;
    }
  }
  else
  {
    if (v10)
    {
      uint64_t v11 = a1[1];
      uint64_t v12 = (void *)*a1;
      if (v11 != v10)
      {
        do
        {
          v11 -= 152;
          sub_8E4758(v9, v11);
        }
        while (v11 != v10);
        uint64_t v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x1AF286BCA1AF286) {
      goto LABEL_29;
    }
    unint64_t v13 = 0x86BCA1AF286BCA1BLL * (v8 >> 3);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= a4) {
      uint64_t v14 = a4;
    }
    unint64_t v15 = v13 >= 0xD79435E50D7943 ? 0x1AF286BCA1AF286 : v14;
    if (v15 > 0x1AF286BCA1AF286) {
LABEL_29:
    }
      sub_2E00();
    uint64_t v16 = 152 * v15;
    int64x2_t v17 = (char *)operator new(152 * v15);
    *a1 = (uint64_t)v17;
    a1[1] = (uint64_t)v17;
    a1[2] = (uint64_t)&v17[v16];
    if (a2 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        sub_8E7FF8((uint64_t)&v17[v18], a2 + v18);
        v18 += 152;
      }
      while (a2 + v18 != a3);
      v17 += v18;
    }
    a1[1] = (uint64_t)v17;
  }
}

void sub_CB3B90(_Unwind_Exception *exception_object)
{
  for (; v4; v4 -= 152)
    sub_8E4758(v2, v3 - 152 + v4);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

uint64_t sub_CB3BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a2 + 104;
  do
  {
    uint64_t v8 = v6 - 104;
    *(void *)a4 = *(void *)(v6 - 104);
    std::string::operator=((std::string *)(a4 + 8), (const std::string *)(v6 - 96));
    std::string::operator=((std::string *)(a4 + 32), (const std::string *)(v6 - 72));
    int v9 = *(_DWORD *)(v6 - 40);
    *(void *)(a4 + 56) = *(void *)(v6 - 48);
    *(_DWORD *)(a4 + 64) = v9;
    if (a4 != v6 - 104)
    {
      sub_326C0((void *)(a4 + 72), *(char **)(v6 - 32), *(char **)(v6 - 24), (uint64_t)(*(void *)(v6 - 24) - *(void *)(v6 - 32)) >> 3);
      sub_CB3CB8((void **)(a4 + 96), *(void *)(v6 - 8), *(void *)v6, 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)v6 - *(void *)(v6 - 8)) >> 4));
    }
    std::string::operator=((std::string *)(a4 + 120), (const std::string *)(v6 + 16));
    char v7 = *(unsigned char *)(v6 + 44);
    *(_DWORD *)(a4 + 144) = *(_DWORD *)(v6 + 40);
    *(unsigned char *)(a4 + 148) = v7;
    a4 += 152;
    v6 += 152;
  }
  while (v8 + 152 != v5);
  return v5;
}

void sub_CB3CB8(void **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v10 = (char *)*a1;
  if (0x8E38E38E38E38E39 * ((v8 - (uint64_t)*a1) >> 4) < a4)
  {
    if (v10)
    {
      uint64_t v11 = (uint64_t)a1[1];
      uint64_t v12 = *a1;
      if ((char *)v11 != v10)
      {
        do
        {
          v11 -= 144;
          sub_8E48A4(v9, v11);
        }
        while ((char *)v11 != v10);
        uint64_t v12 = *a1;
      }
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x1C71C71C71C71C7) {
      goto LABEL_35;
    }
    unint64_t v13 = 0x8E38E38E38E38E39 * (v8 >> 4);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= a4) {
      uint64_t v14 = a4;
    }
    unint64_t v15 = v13 >= 0xE38E38E38E38E3 ? 0x1C71C71C71C71C7 : v14;
    if (v15 > 0x1C71C71C71C71C7) {
LABEL_35:
    }
      sub_2E00();
    uint64_t v16 = 144 * v15;
    int64x2_t v17 = (char *)operator new(144 * v15);
    *a1 = v17;
    a1[1] = v17;
    a1[2] = &v17[v16];
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        sub_8E839C(&v17[v18], v6 + v18);
        v18 += 144;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    goto LABEL_34;
  }
  uint64_t v19 = (uint64_t)a1[1];
  if (0x8E38E38E38E38E39 * ((v19 - (uint64_t)v10) >> 4) >= a4)
  {
    if (a2 == a3)
    {
      int64x2_t v17 = (char *)*a1;
    }
    else
    {
      int64x2_t v17 = (char *)*a1;
      do
      {
        *(_DWORD *)uint64_t v10 = *(_DWORD *)v6;
        sub_4F39B8((uint64_t)(v10 + 8), (std::string *)(v6 + 8));
        *((void *)v10 + 6) = *(void *)(v6 + 48);
        std::string::operator=((std::string *)(v10 + 56), (const std::string *)(v6 + 56));
        v10[80] = *(unsigned char *)(v6 + 80);
        std::string::operator=((std::string *)(v10 + 88), (const std::string *)(v6 + 88));
        v10[112] = *(unsigned char *)(v6 + 112);
        std::string::operator=((std::string *)v10 + 5, (const std::string *)(v6 + 120));
        v17 += 144;
        v6 += 144;
        v10 += 144;
      }
      while (v6 != a3);
      uint64_t v19 = (uint64_t)a1[1];
    }
    while ((char *)v19 != v17)
    {
      v19 -= 144;
      sub_8E48A4(v9, v19);
    }
LABEL_34:
    a1[1] = v17;
    return;
  }
  uint64_t v20 = a2 + 16 * ((v19 - (uint64_t)v10) >> 4);
  if ((char *)v19 != v10)
  {
    do
    {
      *(_DWORD *)uint64_t v10 = *(_DWORD *)v6;
      sub_4F39B8((uint64_t)(v10 + 8), (std::string *)(v6 + 8));
      *((void *)v10 + 6) = *(void *)(v6 + 48);
      std::string::operator=((std::string *)(v10 + 56), (const std::string *)(v6 + 56));
      v10[80] = *(unsigned char *)(v6 + 80);
      std::string::operator=((std::string *)(v10 + 88), (const std::string *)(v6 + 88));
      v10[112] = *(unsigned char *)(v6 + 112);
      std::string::operator=((std::string *)v10 + 5, (const std::string *)(v6 + 120));
      v6 += 144;
      v10 += 144;
    }
    while (v6 != v20);
    uint64_t v10 = (char *)a1[1];
  }
  uint64_t v21 = v10;
  if (v20 != a3)
  {
    uint64_t v22 = 0;
    do
    {
      sub_8E839C(&v10[v22], v20 + v22);
      v22 += 144;
    }
    while (v20 + v22 != a3);
    uint64_t v21 = &v10[v22];
  }
  a1[1] = v21;
}

void sub_CB3FCC(_Unwind_Exception *exception_object)
{
  for (; v4; v4 -= 144)
    sub_8E48A4(v2, v3 - 144 + v4);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

void sub_CB3FF8(uint64_t *a1, long long *a2, long long *a3, size_t __sz)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0x8E38E38E38E38E39 * ((v8 - *a1) >> 3) < __sz)
  {
    if (v10)
    {
      sub_8E5184((uint64_t)a1, *a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x38E38E38E38E38ELL) {
      goto LABEL_29;
    }
    unint64_t v11 = 0x8E38E38E38E38E39 * (v8 >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= __sz) {
      uint64_t v12 = __sz;
    }
    unint64_t v13 = v11 >= 0x1C71C71C71C71C7 ? 0x38E38E38E38E38ELL : v12;
    if (v13 > 0x38E38E38E38E38ELL) {
LABEL_29:
    }
      sub_2E00();
    uint64_t v14 = 72 * v13;
    unint64_t v15 = operator new(72 * v13);
    *a1 = (uint64_t)v15;
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v15 + v14;
    uint64_t v16 = sub_8E8528(v9, a2, a3, (uint64_t)v15);
LABEL_28:
    a1[1] = v16;
    return;
  }
  uint64_t v17 = a1[1];
  if (0x8E38E38E38E38E39 * ((v17 - v10) >> 3) < __sz)
  {
    uint64_t v18 = (long long *)((char *)a2 + 8 * ((v17 - v10) >> 3));
    if (v17 != v10)
    {
      uint64_t v19 = (std::string *)(v10 + 24);
      uint64_t v20 = a2 + 2;
      do
      {
        uint64_t v21 = v20 - 2;
        long long v22 = *(v20 - 2);
        LODWORD(v19[-1].__r_.__value_.__r.__words[2]) = *((_DWORD *)v20 - 4);
        *(_OWORD *)&v19[-1].__r_.__value_.__l.__data_ = v22;
        if (&v19[-1] != (std::string *)(v20 - 2)) {
          sub_CB3CB8((void **)&v19->__r_.__value_.__l.__data_, *((void *)v20 - 1), *(void *)v20, 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)v20 - *((void *)v20 - 1)) >> 4));
        }
        std::string::operator=(v19 + 1, (const std::string *)(v20 + 1));
        v19 += 3;
        uint64_t v20 = (long long *)((char *)v20 + 72);
      }
      while ((long long *)((char *)v21 + 72) != v18);
      uint64_t v10 = a1[1];
    }
    uint64_t v16 = sub_8E8528(v9, v18, a3, v10);
    goto LABEL_28;
  }
  if (a2 != a3)
  {
    uint64_t v23 = (std::string *)(v10 + 24);
    uint64_t v24 = a2 + 2;
    do
    {
      char v25 = v24 - 2;
      long long v26 = *(v24 - 2);
      LODWORD(v23[-1].__r_.__value_.__r.__words[2]) = *((_DWORD *)v24 - 4);
      *(_OWORD *)&v23[-1].__r_.__value_.__l.__data_ = v26;
      if (&v23[-1] != (std::string *)(v24 - 2)) {
        sub_CB3CB8((void **)&v23->__r_.__value_.__l.__data_, *((void *)v24 - 1), *(void *)v24, 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)v24 - *((void *)v24 - 1)) >> 4));
      }
      std::string::operator=(v23 + 1, (const std::string *)(v24 + 1));
      v10 += 72;
      v23 += 3;
      uint64_t v24 = (long long *)((char *)v24 + 72);
    }
    while ((long long *)((char *)v25 + 72) != a3);
  }

  sub_8E5184((uint64_t)a1, v10);
}

void sub_CB42A8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_CB42B0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_CB42B8(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(std::string **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *(void *)a1) >> 5) >= a4)
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5) >= a4)
    {
      sub_CB451C((int)&v25, __str, a3, v9);
      uint64_t v23 = v22;
      uint64_t result = *(void *)(a1 + 8);
      if (result != v22)
      {
        do
          uint64_t result = sub_8E41A0(result - 160);
        while (result != v23);
      }
      *(void *)(a1 + 8) = v23;
    }
    else
    {
      uint64_t v19 = (std::string *)((char *)__str + 32 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5));
      uint64_t result = (uint64_t)sub_CB451C((int)&v24, __str, v19, v9);
      uint64_t v20 = *(void *)(a1 + 8);
      if (v19 != a3)
      {
        uint64_t v21 = 0;
        do
        {
          uint64_t result = (uint64_t)sub_8E8950((void *)(v20 + v21), (long long *)((char *)v19 + v21));
          v21 += 160;
        }
        while ((std::string *)((char *)v19 + v21) != a3);
        v20 += v21;
      }
      *(void *)(a1 + 8) = v20;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 8);
      unint64_t v11 = v9;
      if ((std::string *)v10 != v9)
      {
        do
          uint64_t v10 = sub_8E41A0(v10 - 160);
        while ((std::string *)v10 != v9);
        unint64_t v11 = *(std::string **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 > 0x199999999999999) {
      goto LABEL_28;
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 5);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0xCCCCCCCCCCCCCCLL ? 0x199999999999999 : v13;
    if (v14 > 0x199999999999999) {
LABEL_28:
    }
      sub_2E00();
    uint64_t v15 = 160 * v14;
    uint64_t result = (uint64_t)operator new(160 * v14);
    uint64_t v17 = result;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = result + v15;
    if (__str != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = (uint64_t)sub_8E8950((void *)(v17 + v18), (long long *)((char *)__str + v18));
        v18 += 160;
      }
      while ((std::string *)((char *)__str + v18) != a3);
      v17 += v18;
    }
    *(void *)(a1 + 8) = v17;
  }
  return result;
}

void sub_CB44F4(_Unwind_Exception *exception_object)
{
  for (; v3; v3 -= 160)
    sub_8E41A0(v2 - 160 + v3);
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

std::string *sub_CB451C(int a1, std::string *__str, std::string *a3, std::string *this)
{
  uint64_t v5 = __str;
  if (__str == a3) {
    return __str;
  }
  uint64_t v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    sub_4F39B8((uint64_t)&this[1], v5 + 1);
    this[2].__r_.__value_.__r.__words[2] = v5[2].__r_.__value_.__r.__words[2];
    std::string::operator=(this + 3, v5 + 3);
    this[4].__r_.__value_.__s.__data_[0] = v5[4].__r_.__value_.__s.__data_[0];
    std::string::operator=((std::string *)((char *)this + 104), (std::string *)((char *)v5 + 104));
    this[5].__r_.__value_.__s.__data_[8] = v5[5].__r_.__value_.__s.__data_[8];
    if (this != v5) {
      sub_326C0(&this[5].__r_.__value_.__r.__words[2], (char *)v5[5].__r_.__value_.__r.__words[2], v5[6].__r_.__value_.__l.__data_, (uint64_t)(v5[6].__r_.__value_.__r.__words[0] - v5[5].__r_.__value_.__r.__words[2]) >> 3);
    }
    this = (std::string *)((char *)this + 160);
    uint64_t v5 = (std::string *)((char *)v5 + 160);
  }
  while (v5 != v6);
  return v6;
}

void sub_CB45DC(uint64_t *a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8 = a1[2];
  uint64_t v9 = (std::string *)*a1;
  if (0x86BCA1AF286BCA1BLL * ((v8 - *a1) >> 3) >= a4)
  {
    if (0x86BCA1AF286BCA1BLL * ((a1[1] - (uint64_t)v9) >> 3) >= a4)
    {
      sub_CB4814((int)&v21, __str, a3, v9);
      sub_8E40F8((uint64_t)a1, v19);
    }
    else
    {
      uint64_t v16 = (std::string *)((char *)__str + 8 * ((a1[1] - (uint64_t)v9) >> 3));
      sub_CB4814((int)&v20, __str, v16, v9);
      uint64_t v17 = a1[1];
      if (v16 != a3)
      {
        uint64_t v18 = 0;
        do
        {
          sub_8E8BC0((char *)(v17 + v18), (long long *)((char *)v16 + v18));
          v18 += 152;
        }
        while ((std::string *)((char *)v16 + v18) != a3);
        v17 += v18;
      }
      a1[1] = v17;
    }
  }
  else
  {
    if (v9)
    {
      sub_8E40F8((uint64_t)a1, *a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x1AF286BCA1AF286) {
      goto LABEL_24;
    }
    unint64_t v10 = 0x86BCA1AF286BCA1BLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0xD79435E50D7943 ? 0x1AF286BCA1AF286 : v11;
    if (v12 > 0x1AF286BCA1AF286) {
LABEL_24:
    }
      sub_2E00();
    uint64_t v13 = 152 * v12;
    unint64_t v14 = (char *)operator new(152 * v12);
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)&v14[v13];
    if (__str != a3)
    {
      uint64_t v15 = 0;
      do
      {
        sub_8E8BC0(&v14[v15], (long long *)((char *)__str + v15));
        v15 += 152;
      }
      while ((std::string *)((char *)__str + v15) != a3);
      v14 += v15;
    }
    a1[1] = (uint64_t)v14;
  }
}

void sub_CB47BC(_Unwind_Exception *a1)
{
  sub_8E8E1C(v2, v4, v4, v3, v3);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(a1);
}

void sub_CB47E8(_Unwind_Exception *a1)
{
  sub_8E8E1C(v2, v4, v4, v3, v3);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(a1);
}

std::string *sub_CB4814(int a1, std::string *__str, std::string *a3, std::string *this)
{
  uint64_t v5 = __str;
  if (__str == a3) {
    return __str;
  }
  uint64_t v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    std::string::size_type v7 = v5[2].__r_.__value_.__r.__words[2];
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = *(_OWORD *)&v5[2].__r_.__value_.__l.__data_;
    this[2].__r_.__value_.__r.__words[2] = v7;
    if (this != v5)
    {
      sub_326C0(this[3].__r_.__value_.__r.__words, v5[3].__r_.__value_.__l.__data_, (char *)v5[3].__r_.__value_.__l.__size_, (uint64_t)(v5[3].__r_.__value_.__l.__size_ - v5[3].__r_.__value_.__r.__words[0]) >> 3);
      sub_326C0(this[4].__r_.__value_.__r.__words, v5[4].__r_.__value_.__l.__data_, (char *)v5[4].__r_.__value_.__l.__size_, (uint64_t)(v5[4].__r_.__value_.__l.__size_ - v5[4].__r_.__value_.__r.__words[0]) >> 3);
      sub_326C0(this[5].__r_.__value_.__r.__words, v5[5].__r_.__value_.__l.__data_, (char *)v5[5].__r_.__value_.__l.__size_, (uint64_t)(v5[5].__r_.__value_.__l.__size_ - v5[5].__r_.__value_.__r.__words[0]) >> 3);
    }
    this[6].__r_.__value_.__s.__data_[0] = v5[6].__r_.__value_.__s.__data_[0];
    this = (std::string *)((char *)this + 152);
    uint64_t v5 = (std::string *)((char *)v5 + 152);
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_CB48E4(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0x6F96F96F96F96F97 * ((v8 - *a1) >> 3) >= a4)
  {
    uint64_t result = a1[1];
    if (0x6F96F96F96F96F97 * ((result - v9) >> 3) >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v23 = v9;
      }
      else
      {
        uint64_t v23 = v9;
        do
        {
          sub_CB4B8C(v9, v6);
          v6 += 312;
          v9 += 312;
          v23 += 312;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v23)
        uint64_t result = sub_8E49DC(result - 312);
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 8 * ((result - v9) >> 3);
      if (result != v9)
      {
        uint64_t v20 = 8 * ((result - v9) >> 3);
        do
        {
          uint64_t result = sub_CB4B8C(v9, v6);
          v6 += 312;
          v9 += 312;
          v20 -= 312;
        }
        while (v20);
        uint64_t v9 = a1[1];
      }
      uint64_t v21 = v9;
      if (v19 != a3)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t result = sub_8E904C(v9 + v22, v19 + v22);
          v22 += 312;
        }
        while (v19 + v22 != a3);
        uint64_t v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      uint64_t v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_8E49DC(v10 - 312);
        while (v10 != v9);
        uint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xD20D20D20D20D2) {
      goto LABEL_37;
    }
    unint64_t v12 = 0x6F96F96F96F96F97 * (v8 >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x69069069069069 ? 0xD20D20D20D20D2 : v13;
    if (v14 > 0xD20D20D20D20D2) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 312 * v14;
    uint64_t result = (uint64_t)operator new(312 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_8E904C(v17 + v18, v6 + v18);
        v18 += 312;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

uint64_t sub_CB4B8C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_CB4C9C((void **)a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
    sub_9094A4((void *)(a1 + 24), *(char **)(a2 + 24), *(char **)(a2 + 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  }
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v4;
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
  if (a1 != a2) {
    sub_326C0((void *)(a1 + 144), *(char **)(a2 + 144), *(char **)(a2 + 152), (uint64_t)(*(void *)(a2 + 152) - *(void *)(a2 + 144)) >> 3);
  }
  sub_4F39B8(a1 + 168, (std::string *)(a2 + 168));
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  std::string::operator=((std::string *)(a1 + 216), (const std::string *)(a2 + 216));
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a2 + 248));
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  std::string::operator=((std::string *)(a1 + 288), (const std::string *)(a2 + 288));
  return a1;
}

void sub_CB4C9C(void **a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v10 = (void **)*a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((v8 - (uint64_t)*a1) >> 4) < a4)
  {
    if (!v10) {
      goto LABEL_26;
    }
    uint64_t v11 = (void **)a1[1];
    unint64_t v12 = *a1;
    if (v11 == v10)
    {
LABEL_25:
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
LABEL_26:
      if (a4 > 0x111111111111111) {
        goto LABEL_47;
      }
      unint64_t v20 = 0xEEEEEEEEEEEEEEEFLL * (v8 >> 4);
      uint64_t v21 = 2 * v20;
      if (2 * v20 <= a4) {
        uint64_t v21 = a4;
      }
      unint64_t v22 = v20 >= 0x88888888888888 ? 0x111111111111111 : v21;
      if (v22 > 0x111111111111111) {
LABEL_47:
      }
        sub_2E00();
      uint64_t v23 = 240 * v22;
      char v24 = (char *)operator new(240 * v22);
      *a1 = v24;
      a1[1] = v24;
      a1[2] = &v24[v23];
      if (v6 != a3)
      {
        uint64_t v25 = 0;
        do
        {
          sub_8E9510(v9, (uint64_t)&v24[v25 * 8], &v6[v25]);
          v25 += 30;
        }
        while (&v6[v25] != a3);
        v24 += v25 * 8;
      }
      a1[1] = v24;
      return;
    }
    while (1)
    {
      if (*((char *)v11 - 1) < 0)
      {
        operator delete(*(v11 - 3));
        sub_4D4B58((uint64_t)(v11 - 24));
        if (*((char *)v11 - 201) < 0) {
LABEL_10:
        }
          operator delete(*(v11 - 28));
      }
      else
      {
        sub_4D4B58((uint64_t)(v11 - 24));
        if (*((char *)v11 - 201) < 0) {
          goto LABEL_10;
        }
      }
      v11 -= 30;
      if (v11 == v10)
      {
        unint64_t v12 = *a1;
        goto LABEL_25;
      }
    }
  }
  uint64_t v13 = (void **)a1[1];
  if (0xEEEEEEEEEEEEEEEFLL * (((char *)v13 - (char *)v10) >> 4) >= a4)
  {
    if (a2 == a3)
    {
      uint64_t v18 = (void **)*a1;
    }
    else
    {
      uint64_t v18 = (void **)*a1;
      do
      {
        uint64_t v19 = (void *)*v6;
        *((_WORD *)v10 + 4) = *((_WORD *)v6 + 4);
        char *v10 = v19;
        std::string::operator=((std::string *)(v10 + 2), (const std::string *)(v6 + 2));
        v10[5] = (void *)v6[5];
        sub_52FD00((uint64_t)(v10 + 6), (uint64_t)(v6 + 6));
        *((_DWORD *)v10 + 52) = *((_DWORD *)v6 + 52);
        std::string::operator=((std::string *)v10 + 9, (const std::string *)v6 + 9);
        v18 += 30;
        v6 += 30;
        v10 += 30;
      }
      while (v6 != a3);
      uint64_t v13 = (void **)a1[1];
    }
    while (1)
    {
      if (v13 == v18)
      {
        a1[1] = v18;
        return;
      }
      if (*((char *)v13 - 1) < 0)
      {
        operator delete(*(v13 - 3));
        sub_4D4B58((uint64_t)(v13 - 24));
        if ((*((char *)v13 - 201) & 0x80000000) == 0) {
          goto LABEL_39;
        }
      }
      else
      {
        sub_4D4B58((uint64_t)(v13 - 24));
        if ((*((char *)v13 - 201) & 0x80000000) == 0) {
          goto LABEL_39;
        }
      }
      operator delete(*(v13 - 28));
LABEL_39:
      v13 -= 30;
    }
  }
  unint64_t v14 = &a2[2 * (((char *)v13 - (char *)v10) >> 4)];
  if (v13 != v10)
  {
    do
    {
      uint64_t v15 = (void *)*v6;
      *((_WORD *)v10 + 4) = *((_WORD *)v6 + 4);
      char *v10 = v15;
      std::string::operator=((std::string *)(v10 + 2), (const std::string *)(v6 + 2));
      v10[5] = (void *)v6[5];
      sub_52FD00((uint64_t)(v10 + 6), (uint64_t)(v6 + 6));
      *((_DWORD *)v10 + 52) = *((_DWORD *)v6 + 52);
      std::string::operator=((std::string *)v10 + 9, (const std::string *)v6 + 9);
      v6 += 30;
      v10 += 30;
    }
    while (v6 != v14);
    uint64_t v10 = (void **)a1[1];
  }
  uint64_t v16 = (char *)v10;
  if (v14 != a3)
  {
    uint64_t v17 = 0;
    do
    {
      sub_8E9510(v9, (uint64_t)&v10[v17], &v14[v17]);
      v17 += 30;
    }
    while (&v14[v17] != a3);
    uint64_t v16 = (char *)&v10[v17];
  }
  a1[1] = v16;
}

void sub_CB4FD8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    sub_20AB960();
    *(void *)(v1 + 8) = v3;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

void sub_CB5018(uint64_t *a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *a1) >> 4) >= __sz)
  {
    uint64_t v16 = a1[1];
    if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v9) >> 4) >= __sz)
    {
      if (a2 != a3)
      {
        uint64_t v21 = 0;
        do
        {
          uint64_t v22 = v9 + v21;
          if (a2 != v9)
          {
            sub_326C0((void *)(v9 + v21), *(char **)(a2 + v21), *(char **)(a2 + v21 + 8), (uint64_t)(*(void *)(a2 + v21 + 8) - *(void *)(a2 + v21)) >> 3);
            sub_CB3CB8((void **)(v22 + 24), *(void *)(a2 + v21 + 24), *(void *)(a2 + v21 + 32), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + v21 + 32) - *(void *)(a2 + v21 + 24)) >> 4));
          }
          *(unsigned char *)(v22 + 48) = *(unsigned char *)(a2 + v21 + 48);
          std::string::operator=((std::string *)(v22 + 56), (const std::string *)(a2 + v21 + 56));
          v21 += 80;
        }
        while (a2 + v21 != a3);
        v9 += v21;
      }
      sub_8E4C04((uint64_t)a1, v9);
    }
    else
    {
      uint64_t v17 = a2 + 16 * ((v16 - v9) >> 4);
      if (v16 != v9)
      {
        uint64_t v18 = 0;
        uint64_t v19 = 16 * ((v16 - v9) >> 4);
        do
        {
          uint64_t v20 = v9 + v18;
          if (a2 != v9)
          {
            sub_326C0((void *)(v9 + v18), *(char **)(a2 + v18), *(char **)(a2 + v18 + 8), (uint64_t)(*(void *)(a2 + v18 + 8) - *(void *)(a2 + v18)) >> 3);
            sub_CB3CB8((void **)(v20 + 24), *(void *)(a2 + v18 + 24), *(void *)(a2 + v18 + 32), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + v18 + 32) - *(void *)(a2 + v18 + 24)) >> 4));
          }
          *(unsigned char *)(v20 + 48) = *(unsigned char *)(a2 + v18 + 48);
          std::string::operator=((std::string *)(v20 + 56), (const std::string *)(a2 + v18 + 56));
          v18 += 80;
        }
        while (v19 != v18);
        uint64_t v9 = a1[1];
      }
      uint64_t v23 = v9;
      if (v17 != a3)
      {
        uint64_t v24 = 0;
        do
        {
          sub_8E9770(v9 + v24, v17 + v24);
          v24 += 80;
        }
        while (v17 + v24 != a3);
        uint64_t v23 = v9 + v24;
      }
      a1[1] = v23;
    }
  }
  else
  {
    if (v9)
    {
      sub_8E4C04((uint64_t)a1, *a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x333333333333333) {
      goto LABEL_37;
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x199999999999999 ? 0x333333333333333 : v11;
    if (v12 > 0x333333333333333) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v13 = 80 * v12;
    unint64_t v14 = (char *)operator new(80 * v12);
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)&v14[v13];
    if (a2 != a3)
    {
      uint64_t v15 = 0;
      do
      {
        sub_8E9770((uint64_t)&v14[v15], a2 + v15);
        v15 += 80;
      }
      while (a2 + v15 != a3);
      v14 += v15;
    }
    a1[1] = (uint64_t)v14;
  }
}

void sub_CB5318(_Unwind_Exception *a1)
{
  sub_8E98A0(v4, v2, v2, v3, v3);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(a1);
}

double sub_CB5368()
{
  byte_25E1747 = 1;
  word_25E1730 = 65;
  byte_25E175F = 1;
  word_25E1748 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E17F0 = 0u;
  *(_OWORD *)&qword_25E1800 = 0u;
  dword_25E1810 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E17F0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E17F0, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E17F0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E17F0, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E1777 = 8;
  strcpy((char *)&qword_25E1760, "any_mode");
  byte_25E178F = 7;
  strcpy((char *)&dword_25E1778, "cycling");
  byte_25E17A7 = 7;
  strcpy((char *)&dword_25E1790, "driving");
  byte_25E17BF = 7;
  strcpy((char *)&dword_25E17A8, "walking");
  qword_25E17C8 = 0;
  qword_25E17D0 = 0;
  qword_25E17C0 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E17C0 = (uint64_t)v0;
  qword_25E17C8 = (uint64_t)(v0 + 9);
  qword_25E17D0 = (uint64_t)(v0 + 9);
  qword_25E17D8 = 0;
  qword_25E17E0 = 0;
  unk_25E17E8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25E17E0 = (uint64_t)(v1 + 9);
  unk_25E17E8 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E17D8 = (uint64_t)v1;
  return result;
}

void sub_CB5630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E1800) {
    sub_20AF58C((void **)qword_25E1800);
  }
  unsigned int v37 = (void *)xmmword_25E17F0;
  *(void *)&xmmword_25E17F0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_CB56D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v196);
  sub_162C594(v184, 0, 0);
  unint64_t v195 = 0;
  if (sub_EA80FC(*(char ***)a1))
  {
    v186 |= 0x100000u;
    int v194 = 1;
    sub_51C5C((uint64_t)&v197);
    sub_51D74((uint64_t)&v197, (uint64_t)&__p);
    v186 |= 1u;
    uint64_t v3 = (uint64_t *)(v185 & 0xFFFFFFFFFFFFFFFCLL);
    if (v185) {
      uint64_t v3 = (uint64_t *)*v3;
    }
    sub_1881E08(v193, &__p, v3);
    if (SBYTE7(v178) < 0) {
      operator delete((void *)__p);
    }
    sub_13C08C8((uint64_t)&__p, 0, 0);
    LODWORD(v178) = v178 | 1;
    DWORD2(v178) = 8;
    if (v189 && (uint64_t v4 = v188, v188 < *v189))
    {
      ++v188;
      int v5 = *(std::string **)&v189[2 * v4 + 2];
    }
    else
    {
      sub_13D9AD0(v187);
      int v5 = (std::string *)sub_188CDC8((uint64_t)&v187, v138);
    }
    sub_13C0E7C(v5, (uint64_t)&__p);
    unint64_t v195 = (unint64_t)sub_72688((uint64_t)v196);
    *(unsigned char *)a2 = 1;
    sub_C6B2B4(a2 + 8, (uint64_t)v184);
    *(void *)(a2 + 568) = v195;
    sub_13C0970(&__p);
    return sub_162D64C(v184);
  }
  if (v192)
  {
    uint64_t v6 = v191;
    if (v191 < *v192)
    {
      ++v191;
      uint64_t v7 = *(void *)&v192[2 * v6 + 2];
      if (!*(unsigned char *)(a1 + 8)) {
        goto LABEL_12;
      }
LABEL_220:
      sub_423F6C((uint64_t)&__p, *(void **)(a1 + 16), 10000);
      sub_45E958(*(__n128 **)a1, &v170);
      unint64_t v131 = v170.n128_u64[1];
      for (uint64_t i = (void *)v170.n128_u64[0]; i != (void *)v131; i += 59)
      {
        sub_427D3C((uint64_t)&__p, i, 1, 1, &v197);
        size_t v132 = *(_DWORD **)(v7 + 64);
        if (v132 && (uint64_t v133 = *(int *)(v7 + 56), (int)v133 < *v132))
        {
          *(_DWORD *)(v7 + 56) = v133 + 1;
          uint64_t v134 = *(void *)&v132[2 * v133 + 2];
        }
        else
        {
          uint64_t v135 = sub_13D8E84(*(void *)(v7 + 48));
          uint64_t v134 = sub_188CDC8(v7 + 48, v135);
        }
        sub_188B428((uint64_t)&v197, (uint64_t)&v167);
        *(_DWORD *)(v134 + 40) |= 0x100u;
        uint64_t v136 = *(void *)(v134 + 8);
        size_t v137 = (uint64_t *)(v136 & 0xFFFFFFFFFFFFFFFCLL);
        if (v136) {
          size_t v137 = (uint64_t *)*v137;
        }
        sub_1881E08((uint64_t *)(v134 + 720), &v167, v137);
        if (SHIBYTE(v168) < 0) {
          operator delete((void *)v167);
        }
        sub_1116458(&v197);
      }
      sub_423E54((uint64_t)&v183);
      *(void *)&long long v178 = off_24396A0;
      uint64_t v139 = &v182;
      do
      {
        unint64_t v140 = v139 - 6;
        uint64_t v141 = *(v139 - 3);
        if (v141)
        {
          uint64_t v142 = 0;
          uint64_t v143 = 0;
          uint64_t v144 = v139 - 5;
          do
          {
            if ((*(char *)(*v140 + v143) & 0x80000000) == 0)
            {
              uint64_t v145 = *v144 + v142;
              unint64_t v146 = *(void **)(v145 + 8);
              if (v146)
              {
                *(void *)(v145 + 16) = v146;
                operator delete(v146);
                uint64_t v141 = *(v139 - 3);
              }
            }
            ++v143;
            v142 += 32;
          }
          while (v143 != v141);
          operator delete((void *)*(v139 - 6));
          *(v139 - 6) = (uint64_t)&unk_20E1710;
          *(v139 - 1) = 0;
          *(v139 - 4) = 0;
          *(v139 - 3) = 0;
          *uint64_t v144 = 0;
        }
        v139 -= 6;
      }
      while (v140 != &v181);
      goto LABEL_242;
    }
  }
  uint64_t v129 = sub_13D8C74(v190);
  uint64_t v7 = sub_188CDC8((uint64_t)&v190, v129);
  if (*(unsigned char *)(a1 + 8)) {
    goto LABEL_220;
  }
LABEL_12:
  uint64_t v151 = sub_3750CC(*(void **)(a1 + 16));
  sub_45E958(*(__n128 **)a1, &v176);
  if (v176.n128_u64[0] != v176.n128_u64[1])
  {
    unint64_t v173 = 0;
    uint64_t v174 = 0;
    uint64_t v175 = 0;
    sub_EAE168(v176.n128_u64[0], &v170);
    unint64_t v9 = v170.n128_u64[1];
    int v8 = (void *)v170.n128_u64[0];
    char v10 = v171;
    unint64_t v11 = v172;
    uint64_t v153 = v171;
    unint64_t v154 = v170.n128_u64[0];
    unint64_t v152 = v172;
    while (1)
    {
      if (v8)
      {
        unint64_t v12 = sub_EAE104(v8);
        BOOL v13 = v9 < v12;
        if (!v10)
        {
          if (v9 >= v12) {
            goto LABEL_216;
          }
          goto LABEL_28;
        }
      }
      else
      {
        if (!v10) {
          goto LABEL_216;
        }
        BOOL v13 = 0;
      }
      unint64_t v14 = sub_EAE104(v10);
      if (v11 < v14 && v13)
      {
        uint64_t v16 = sub_EAE1B8(v8, v9);
        if (v16 == sub_EAE1B8(v10, v11)) {
          goto LABEL_216;
        }
      }
      else if (((v13 ^ (v11 < v14)) & 1) == 0)
      {
LABEL_216:
        long long __p = 0uLL;
        *(void *)&long long v178 = 0;
        sub_426D8((uint64_t *)&v173, 0xAAAAAAAAAAAAAAABLL * ((v174 - (uint64_t)v173) >> 2), 0, 1, &__p, (uint64_t)&v197, 100.0);
        if ((void)__p) {
          operator delete((void *)__p);
        }
        sub_1106C64();
      }
LABEL_28:
      uint64_t v17 = sub_EAE1B8(v8, v9);
      sub_2954EC(v151, *(void *)(v17 + 32), (uint64_t)&v167);
      unint64_t v155 = v9;
      uint64_t v156 = v174;
      if (v169)
      {
        if (*((void *)&v167 + 1) == v168) {
          goto LABEL_35;
        }
        unint64_t v18 = *(void *)(v168 - 8);
        uint64_t v19 = v167;
        LODWORD(v197) = v18;
        LODWORD(v205) = 1;
        *(void *)&long long __p = &v205;
        *((void *)&__p + 1) = &v197;
        unint64_t v20 = *(void *)(v167 + 3856) + 1;
        *(void *)(v167 + 3856) = v20;
        if (*(void *)v19)
        {
          uint64_t v21 = v19 + 16;
          if (*(_DWORD *)(v19 + 112) == v18)
          {
            unsigned int v22 = 4;
            goto LABEL_42;
          }
          if (*(_DWORD *)(v19 + 136) == v18)
          {
            unsigned int v22 = 5;
            goto LABEL_42;
          }
          if (*(_DWORD *)(v19 + 160) == v18)
          {
            unsigned int v22 = 6;
            goto LABEL_42;
          }
          if (*(_DWORD *)(v19 + 184) == v18)
          {
            unsigned int v22 = 7;
LABEL_42:
            ++*(void *)(v19 + 3864);
            uint64_t v23 = v21 + 24 * v22;
            *(void *)(v23 + 8) = v20;
            uint64_t v24 = *(unsigned int **)(v23 + 16);
            if (v24)
            {
LABEL_43:
              uint64_t v25 = (int *)((char *)v24 + *v24);
LABEL_57:
              uint64_t v34 = (unsigned int *)((char *)v25 + *(unsigned __int16 *)((char *)v25 - *v25 + 4));
              uint64_t v35 = (uint64_t)&v34[HIDWORD(v18)] + *v34;
              long long v36 = (int *)(v35 + 4 + *(unsigned int *)(v35 + 4));
              unsigned int v37 = (unsigned int *)((char *)v36 + *(unsigned __int16 *)((char *)v36 - *v36 + 6));
              LODWORD(v37) = *(unsigned int *)((char *)v37 + *v37) - 1;
              *(void *)&long long v164 = v167;
              *((void *)&v164 + 1) = (char *)&v167 + 8;
              long long v165 = 0u;
              v166[0] = 0u;
              LODWORD(v166[1]) = ((unint64_t)(v168 - *((void *)&v167 + 1)) >> 3) - 1;
              DWORD1(v166[1]) = v37;
              BYTE8(v166[1]) = 1;
              goto LABEL_58;
            }
          }
          else
          {
            unint64_t v26 = *(void *)(v19 + 168);
            unint64_t v27 = *(void *)(v19 + 144);
            unint64_t v28 = *(void *)(v19 + 120);
            unint64_t v29 = *(void *)(v19 + 192);
            uint64_t v24 = (unsigned int *)sub_2AB884(*(void *)v19, 1, v18, 1);
            if (v28 >= v20) {
              unint64_t v30 = v20;
            }
            else {
              unint64_t v30 = v28;
            }
            BOOL v31 = v27 >= v30;
            if (v27 < v30) {
              unint64_t v30 = v27;
            }
            unsigned int v32 = 4 * (v28 < v20);
            if (!v31) {
              unsigned int v32 = 5;
            }
            if (v26 < v30)
            {
              unsigned int v32 = 6;
              unint64_t v30 = v26;
            }
            if (v29 < v30) {
              unsigned int v32 = 7;
            }
            uint64_t v33 = v21 + 24 * v32;
            *(_DWORD *)uint64_t v33 = v197;
            *(void *)(v33 + 8) = *(void *)(v19 + 3856);
            *(void *)(v33 + 16) = v24;
            if (v24) {
              goto LABEL_43;
            }
          }
        }
        sub_296654((int **)&__p);
        uint64_t v25 = 0;
        goto LABEL_57;
      }
      if (*((void *)&v167 + 1) == v168)
      {
LABEL_35:
        memset(v166, 0, sizeof(v166));
        long long v164 = 0u;
        long long v165 = 0u;
        goto LABEL_59;
      }
      *(void *)&long long v164 = v167;
      *((void *)&v164 + 1) = (char *)&v167 + 8;
      long long v165 = 0u;
      memset(v166, 0, 25);
LABEL_58:
      sub_2E1D08((uint64_t)&v164);
LABEL_59:
      if (v169)
      {
        if (*((void *)&v167 + 1) != v168)
        {
          uint64_t v38 = v167;
          long long v162 = 0u;
          long long v163 = 0u;
          char v39 = 1;
          LODWORD(v40) = -1;
          int v41 = -1;
          goto LABEL_65;
        }
      }
      else if (*((void *)&v167 + 1) != v168)
      {
        unint64_t v42 = *(void *)(v168 - 8);
        int v43 = sub_2964C4(v167, v42, 1);
        char v39 = 0;
        long long v44 = &v43[*(unsigned __int16 *)&v43[-*(int *)v43 + 4]];
        uint64_t v45 = (uint64_t)&v44[4 * HIDWORD(v42) + *(unsigned int *)v44];
        uint64_t v46 = (int *)(v45 + 4 + *(unsigned int *)(v45 + 4));
        uint64_t v38 = v167;
        size_t v47 = (unsigned int *)((char *)v46 + *(unsigned __int16 *)((char *)v46 - *v46 + 6));
        int v41 = *(unsigned int *)((char *)v47 + *v47);
        unint64_t v40 = (unint64_t)(v168 - *((void *)&v167 + 1)) >> 3;
        long long v162 = 0u;
        long long v163 = 0u;
        goto LABEL_65;
      }
      uint64_t v38 = 0;
      LODWORD(v40) = 0;
      int v41 = 0;
      char v39 = 0;
      long long v162 = 0u;
      long long v163 = 0u;
      memset(v161, 0, 7);
LABEL_65:
      long long __p = v164;
      long long v178 = v165;
      long long v179 = v166[0];
      long long v180 = v166[1];
      uint64_t v197 = v38;
      long long v198 = v162;
      long long v199 = v163;
      uint64_t v200 = 0;
      int v201 = v40;
      int v202 = v41;
      char v203 = v39;
      *(_DWORD *)&v204[3] = *(_DWORD *)((char *)v161 + 3);
      *(_DWORD *)uint64_t v204 = v161[0];
      long long v48 = v164;
      LODWORD(v49) = v166[1];
      unsigned int v50 = DWORD1(v166[1]);
      int v158 = v40;
      if (*(void *)&v166[1] == __PAIR64__(v41, v40))
      {
        sub_6CFD9C((const void **)&v173, v156, &__p, (long long *)&v197, 0);
        goto LABEL_214;
      }
      int v157 = v41;
      char v51 = (char *)*((void *)&v165 + 1);
      uint64_t v160 = v164 + 16;
      if (!BYTE8(v166[1]))
      {
        uint64_t v159 = 0;
        while (1)
        {
          unsigned int v92 = v50 + 1;
          if (v50 + 1 >= *(_DWORD *)v51)
          {
            uint64_t v95 = **((void **)&v48 + 1);
            unint64_t v49 = (v49 + 1);
            if (v49 < (uint64_t)(*(void *)(*((void *)&v48 + 1) + 8) - **((void **)&v48 + 1)) >> 3) {
              goto LABEL_150;
            }
LABEL_148:
            unsigned int v50 = v92;
            goto LABEL_211;
          }
          uint64_t v93 = &v51[4 * v50 + 4];
          size_t v94 = &v51[4 * v92 + 4];
          if (*(unsigned __int16 *)v93 != *(unsigned __int16 *)v94) {
            goto LABEL_148;
          }
          if (*((unsigned __int16 *)v93 + 1) != *((unsigned __int16 *)v94 + 1)) {
            goto LABEL_148;
          }
          uint64_t v95 = **((void **)&v48 + 1);
          uint64_t v96 = *(void *)(*((void *)&v48 + 1) + 8) - **((void **)&v48 + 1);
          if (*(_DWORD *)v51 == 2 && v96 == 8) {
            goto LABEL_148;
          }
          unsigned int v92 = v50 + 2;
          unint64_t v49 = (v49 + 1);
          if (v49 >= v96 >> 3) {
            goto LABEL_148;
          }
          while (1)
          {
LABEL_150:
            unint64_t v97 = *(void *)(v95 + 8 * v49);
            int v207 = 1;
            v208[0] = v97;
            long long v205 = &v207;
            long long v206 = v208;
            unint64_t v98 = *(void *)(v48 + 3856) + 1;
            *(void *)(v48 + 3856) = v98;
            if (!*(void *)v48) {
              goto LABEL_160;
            }
            if (*(_DWORD *)(v48 + 112) == v97)
            {
              unsigned int v99 = 4;
              goto LABEL_159;
            }
            if (*(_DWORD *)(v48 + 136) == v97)
            {
              unsigned int v99 = 5;
              goto LABEL_159;
            }
            if (*(_DWORD *)(v48 + 160) == v97)
            {
              unsigned int v99 = 6;
              goto LABEL_159;
            }
            if (*(_DWORD *)(v48 + 184) == v97)
            {
              unsigned int v99 = 7;
LABEL_159:
              ++*(void *)(v48 + 3864);
              uint64_t v100 = v160 + 24 * v99;
              *(void *)(v100 + 8) = v98;
              if (*(void *)(v100 + 16)) {
                goto LABEL_161;
              }
LABEL_160:
              sub_296654(&v205);
              goto LABEL_161;
            }
            unint64_t v107 = *(void *)(v48 + 168);
            unint64_t v108 = *(void *)(v48 + 144);
            unint64_t v109 = *(void *)(v48 + 120);
            unint64_t v110 = *(void *)(v48 + 192);
            uint64_t v111 = sub_2AB884(*(void *)v48, 1, v97, 1);
            if (v109 >= v98) {
              unint64_t v112 = v98;
            }
            else {
              unint64_t v112 = v109;
            }
            BOOL v113 = v108 >= v112;
            if (v108 < v112) {
              unint64_t v112 = v108;
            }
            unsigned int v114 = 4 * (v109 < v98);
            if (!v113) {
              unsigned int v114 = 5;
            }
            if (v107 < v112)
            {
              unsigned int v114 = 6;
              unint64_t v112 = v107;
            }
            if (v110 < v112) {
              unsigned int v114 = 7;
            }
            uint64_t v115 = v160 + 24 * v114;
            *(_DWORD *)uint64_t v115 = v208[0];
            *(void *)(v115 + 8) = *(void *)(v48 + 3856);
            *(void *)(v115 + 16) = v111;
            if (!v111) {
              goto LABEL_160;
            }
LABEL_161:
            int v207 = 1;
            v208[0] = v97;
            long long v205 = &v207;
            long long v206 = v208;
            unint64_t v101 = *(void *)(v48 + 3856) + 1;
            *(void *)(v48 + 3856) = v101;
            if (!*(void *)v48) {
              goto LABEL_198;
            }
            if (*(_DWORD *)(v48 + 112) == v97)
            {
              unsigned int v102 = 4;
              goto LABEL_170;
            }
            if (*(_DWORD *)(v48 + 136) == v97)
            {
              unsigned int v102 = 5;
              goto LABEL_170;
            }
            if (*(_DWORD *)(v48 + 160) == v97)
            {
              unsigned int v102 = 6;
              goto LABEL_170;
            }
            if (*(_DWORD *)(v48 + 184) == v97)
            {
              unsigned int v102 = 7;
LABEL_170:
              ++*(void *)(v48 + 3864);
              uint64_t v103 = v160 + 24 * v102;
              *(void *)(v103 + 8) = v101;
              int v104 = *(unsigned int **)(v103 + 16);
              if (v104) {
                goto LABEL_171;
              }
              goto LABEL_198;
            }
            unint64_t v116 = *(void *)(v48 + 168);
            unint64_t v117 = *(void *)(v48 + 144);
            unint64_t v118 = *(void *)(v48 + 120);
            unint64_t v119 = *(void *)(v48 + 192);
            int v104 = (unsigned int *)sub_2AB884(*(void *)v48, 1, v97, 1);
            if (v118 >= v101) {
              unint64_t v120 = v101;
            }
            else {
              unint64_t v120 = v118;
            }
            BOOL v121 = v117 >= v120;
            if (v117 < v120) {
              unint64_t v120 = v117;
            }
            unsigned int v122 = 4 * (v118 < v101);
            if (!v121) {
              unsigned int v122 = 5;
            }
            if (v116 < v120)
            {
              unsigned int v122 = 6;
              unint64_t v120 = v116;
            }
            if (v119 < v120) {
              unsigned int v122 = 7;
            }
            uint64_t v123 = v160 + 24 * v122;
            *(_DWORD *)uint64_t v123 = v208[0];
            *(void *)(v123 + 8) = *(void *)(v48 + 3856);
            *(void *)(v123 + 16) = v104;
            if (v104)
            {
LABEL_171:
              long long v105 = (int *)((char *)v104 + *v104);
              long long v106 = (unsigned __int16 *)((char *)v105 - *v105);
              if (*v106 < 5u) {
                goto LABEL_201;
              }
              goto LABEL_199;
            }
LABEL_198:
            sub_296654(&v205);
            long long v105 = 0;
            long long v106 = (_WORD *)(&loc_1120530 + 1);
            if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
              goto LABEL_201;
            }
LABEL_199:
            uint64_t v124 = v106[2];
            if (!v124)
            {
LABEL_201:
              unsigned int v125 = 0;
              goto LABEL_202;
            }
            unsigned int v125 = (char *)v105 + v124 + *(unsigned int *)((char *)v105 + v124);
LABEL_202:
            unint64_t v126 = &v125[4 * HIDWORD(v97) + 4 + *(unsigned int *)&v125[4 * HIDWORD(v97) + 4]];
            double v127 = &v126[-*(int *)v126];
            if (*(unsigned __int16 *)v127 < 7u) {
              break;
            }
            uint64_t v128 = *((unsigned __int16 *)v127 + 3);
            if (!v128) {
              break;
            }
            char v51 = &v126[v128 + *(unsigned int *)&v126[v128]];
            if (*((unsigned __int16 *)v51 + 2) != *((unsigned __int16 *)v51 + 4)
              || *((unsigned __int16 *)v51 + 3) != *((unsigned __int16 *)v51 + 5))
            {
              goto LABEL_210;
            }
            unint64_t v49 = (v49 + 1);
            uint64_t v95 = **((void **)&v48 + 1);
            if (v49 >= (uint64_t)(*(void *)(*((void *)&v48 + 1) + 8) - **((void **)&v48 + 1)) >> 3)
            {
              unsigned int v50 = 2;
              goto LABEL_211;
            }
          }
          char v51 = 0;
LABEL_210:
          unsigned int v50 = 1;
LABEL_211:
          ++v159;
          if (v49 == v158 && v50 == v157) {
            goto LABEL_213;
          }
        }
      }
      uint64_t v159 = 0;
      unsigned int v52 = **((_DWORD **)&v165 + 1);
      do
      {
        unsigned int v53 = v50 - 1;
        if (v50 - 1 >= v52)
        {
          uint64_t v56 = **((void **)&v48 + 1);
          unint64_t v49 = (v49 - 1);
          if (v49 < (uint64_t)(*(void *)(*((void *)&v48 + 1) + 8) - **((void **)&v48 + 1)) >> 3) {
            goto LABEL_76;
          }
          goto LABEL_137;
        }
        char v54 = &v51[4 * v50 + 4];
        unint64_t v55 = &v51[4 * v53 + 4];
        if (*(unsigned __int16 *)v54 != *(unsigned __int16 *)v55
          || *((unsigned __int16 *)v54 + 1) != *((unsigned __int16 *)v55 + 1))
        {
          goto LABEL_137;
        }
        uint64_t v56 = **((void **)&v48 + 1);
        uint64_t v57 = *(void *)(*((void *)&v48 + 1) + 8) - **((void **)&v48 + 1);
        if (v52 == 2 && v57 == 8)
        {
          unsigned int v52 = 2;
LABEL_137:
          unsigned int v50 = v53;
          goto LABEL_138;
        }
        unsigned int v53 = v50 - 2;
        unint64_t v49 = (v49 - 1);
        if (v49 >= v57 >> 3) {
          goto LABEL_137;
        }
        do
        {
LABEL_76:
          unint64_t v58 = *(void *)(v56 + 8 * v49);
          int v207 = 1;
          v208[0] = v58;
          long long v205 = &v207;
          long long v206 = v208;
          unint64_t v59 = *(void *)(v48 + 3856) + 1;
          *(void *)(v48 + 3856) = v59;
          if (!*(void *)v48) {
            goto LABEL_86;
          }
          if (*(_DWORD *)(v48 + 112) == v58)
          {
            unsigned int v60 = 4;
            goto LABEL_85;
          }
          if (*(_DWORD *)(v48 + 136) == v58)
          {
            unsigned int v60 = 5;
            goto LABEL_85;
          }
          if (*(_DWORD *)(v48 + 160) == v58)
          {
            unsigned int v60 = 6;
            goto LABEL_85;
          }
          if (*(_DWORD *)(v48 + 184) == v58)
          {
            unsigned int v60 = 7;
LABEL_85:
            ++*(void *)(v48 + 3864);
            uint64_t v61 = v160 + 24 * v60;
            *(void *)(v61 + 8) = v59;
            if (*(void *)(v61 + 16)) {
              goto LABEL_87;
            }
LABEL_86:
            sub_296654(&v205);
            goto LABEL_87;
          }
          unint64_t v68 = *(void *)(v48 + 168);
          unint64_t v69 = *(void *)(v48 + 144);
          unint64_t v70 = *(void *)(v48 + 120);
          unint64_t v71 = *(void *)(v48 + 192);
          uint64_t v72 = sub_2AB884(*(void *)v48, 1, v58, 1);
          if (v70 >= v59) {
            unint64_t v73 = v59;
          }
          else {
            unint64_t v73 = v70;
          }
          BOOL v74 = v69 >= v73;
          if (v69 < v73) {
            unint64_t v73 = v69;
          }
          unsigned int v75 = 4 * (v70 < v59);
          if (!v74) {
            unsigned int v75 = 5;
          }
          if (v68 < v73)
          {
            unsigned int v75 = 6;
            unint64_t v73 = v68;
          }
          if (v71 < v73) {
            unsigned int v75 = 7;
          }
          uint64_t v76 = v160 + 24 * v75;
          *(_DWORD *)uint64_t v76 = v208[0];
          *(void *)(v76 + 8) = *(void *)(v48 + 3856);
          *(void *)(v76 + 16) = v72;
          if (!v72) {
            goto LABEL_86;
          }
LABEL_87:
          int v207 = 1;
          v208[0] = v58;
          long long v205 = &v207;
          long long v206 = v208;
          unint64_t v62 = *(void *)(v48 + 3856) + 1;
          *(void *)(v48 + 3856) = v62;
          if (!*(void *)v48) {
            goto LABEL_124;
          }
          if (*(_DWORD *)(v48 + 112) == v58)
          {
            unsigned int v63 = 4;
            goto LABEL_96;
          }
          if (*(_DWORD *)(v48 + 136) == v58)
          {
            unsigned int v63 = 5;
            goto LABEL_96;
          }
          if (*(_DWORD *)(v48 + 160) == v58)
          {
            unsigned int v63 = 6;
            goto LABEL_96;
          }
          if (*(_DWORD *)(v48 + 184) == v58)
          {
            unsigned int v63 = 7;
LABEL_96:
            ++*(void *)(v48 + 3864);
            uint64_t v64 = v160 + 24 * v63;
            *(void *)(v64 + 8) = v62;
            int v65 = *(unsigned int **)(v64 + 16);
            if (v65) {
              goto LABEL_97;
            }
            goto LABEL_124;
          }
          unint64_t v77 = *(void *)(v48 + 168);
          unint64_t v78 = *(void *)(v48 + 144);
          unint64_t v79 = *(void *)(v48 + 120);
          unint64_t v80 = *(void *)(v48 + 192);
          int v65 = (unsigned int *)sub_2AB884(*(void *)v48, 1, v58, 1);
          if (v79 >= v62) {
            unint64_t v81 = v62;
          }
          else {
            unint64_t v81 = v79;
          }
          BOOL v82 = v78 >= v81;
          if (v78 < v81) {
            unint64_t v81 = v78;
          }
          unsigned int v83 = 4 * (v79 < v62);
          if (!v82) {
            unsigned int v83 = 5;
          }
          if (v77 < v81)
          {
            unsigned int v83 = 6;
            unint64_t v81 = v77;
          }
          if (v80 < v81) {
            unsigned int v83 = 7;
          }
          uint64_t v84 = v160 + 24 * v83;
          *(_DWORD *)uint64_t v84 = v208[0];
          *(void *)(v84 + 8) = *(void *)(v48 + 3856);
          *(void *)(v84 + 16) = v65;
          if (v65)
          {
LABEL_97:
            uint64_t v66 = (int *)((char *)v65 + *v65);
            unint64_t v67 = (unsigned __int16 *)((char *)v66 - *v66);
            if (*v67 < 5u) {
              goto LABEL_127;
            }
            goto LABEL_125;
          }
LABEL_124:
          sub_296654(&v205);
          uint64_t v66 = 0;
          unint64_t v67 = (_WORD *)(&loc_1120530 + 1);
          if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
            goto LABEL_127;
          }
LABEL_125:
          uint64_t v85 = v67[2];
          if (!v85)
          {
LABEL_127:
            uint64_t v86 = 0;
            goto LABEL_128;
          }
          uint64_t v86 = (char *)v66 + v85 + *(unsigned int *)((char *)v66 + v85);
LABEL_128:
          uint64_t v87 = &v86[4 * HIDWORD(v58) + 4 + *(unsigned int *)&v86[4 * HIDWORD(v58) + 4]];
          unint64_t v88 = &v87[-*(int *)v87];
          if (*(unsigned __int16 *)v88 >= 7u && (uint64_t v89 = *((unsigned __int16 *)v88 + 3)) != 0) {
            char v51 = &v87[v89 + *(unsigned int *)&v87[v89]];
          }
          else {
            char v51 = 0;
          }
          unsigned int v52 = *(_DWORD *)v51;
          unsigned int v50 = *(_DWORD *)v51 - 2;
          int v90 = &v51[4 * (*(_DWORD *)v51 - 1) + 4];
          uint64_t v91 = &v51[4 * v50 + 4];
          if (*(unsigned __int16 *)v90 != *(unsigned __int16 *)v91
            || *((unsigned __int16 *)v90 + 1) != *((unsigned __int16 *)v91 + 1))
          {
            goto LABEL_138;
          }
          unint64_t v49 = (v49 - 1);
          uint64_t v56 = **((void **)&v48 + 1);
        }
        while (v49 < (uint64_t)(*(void *)(*((void *)&v48 + 1) + 8) - **((void **)&v48 + 1)) >> 3);
        unsigned int v50 = v52 - 3;
LABEL_138:
        ++v159;
      }
      while (v49 != v158 || v50 != v157);
LABEL_213:
      sub_6CFD9C((const void **)&v173, v156, &__p, (long long *)&v197, v159);
LABEL_214:
      if (*((void *)&v167 + 1))
      {
        uint64_t v168 = *((void *)&v167 + 1);
        operator delete(*((void **)&v167 + 1));
      }
      int v8 = (void *)v154;
      unint64_t v9 = v155 + 1;
      unint64_t v11 = v152;
      char v10 = v153;
    }
  }
LABEL_242:
  int v147 = sub_E124B8(3u);
  *(_DWORD *)(v7 + 40) |= 0x80u;
  *(_DWORD *)(v7 + 284) = v147;
  v186 |= 0x100000u;
  int v194 = 0;
  sub_51C5C((uint64_t)&v197);
  sub_51D74((uint64_t)&v197, (uint64_t)&__p);
  v186 |= 1u;
  uint64_t v148 = (uint64_t *)(v185 & 0xFFFFFFFFFFFFFFFCLL);
  if (v185) {
    uint64_t v148 = (uint64_t *)*v148;
  }
  sub_1881E08(v193, &__p, v148);
  if (SBYTE7(v178) < 0) {
    operator delete((void *)__p);
  }
  unint64_t v195 = (unint64_t)sub_72688((uint64_t)v196);
  *(unsigned char *)a2 = 1;
  sub_C6B2B4(a2 + 8, (uint64_t)v184);
  *(void *)(a2 + 568) = v195;
  return sub_162D64C(v184);
}

void sub_CB6A64(_Unwind_Exception *a1)
{
}

void sub_CB6A78(_Unwind_Exception *a1)
{
}

void sub_CB6A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void sub_CB6AA8(_Unwind_Exception *a1)
{
}

void sub_CB6ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a62 < 0)
  {
    operator delete(__p);
    sub_162D64C(&STACK[0x5B8]);
    _Unwind_Resume(a1);
  }
  sub_162D64C(&STACK[0x5B8]);
  _Unwind_Resume(a1);
}

uint64_t sub_CB6C64(uint64_t a1)
{
  sub_423E54(a1 + 928);
  *(void *)(a1 + 16) = off_24396A0;
  uint64_t v2 = a1 + 920;
  do
  {
    uint64_t v3 = (void *)(v2 - 48);
    uint64_t v4 = *(void *)(v2 - 24);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = (void *)(v2 - 40);
      do
      {
        if ((*(char *)(*v3 + v6) & 0x80000000) == 0)
        {
          uint64_t v8 = *v7 + v5;
          unint64_t v9 = *(void **)(v8 + 8);
          if (v9)
          {
            *(void *)(v8 + 16) = v9;
            operator delete(v9);
            uint64_t v4 = *(void *)(v2 - 24);
          }
        }
        ++v6;
        v5 += 32;
      }
      while (v6 != v4);
      operator delete(*(void **)(v2 - 48));
      *(void *)(v2 - 48) = &unk_20E1710;
      *(void *)(v2 - 8) = 0;
      *(void *)(v2 - 32) = 0;
      *(void *)(v2 - 24) = 0;
      void *v7 = 0;
    }
    v2 -= 48;
  }
  while (v3 != (void *)(a1 + 152));
  return a1;
}

uint64_t sub_CB6D58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v196);
  sub_162C594(v184, 0, 0);
  unint64_t v195 = 0;
  if (sub_EA80FC(*(char ***)a1))
  {
    v186 |= 0x100000u;
    int v194 = 1;
    sub_51C5C((uint64_t)&v197);
    sub_51D74((uint64_t)&v197, (uint64_t)&__p);
    v186 |= 1u;
    uint64_t v3 = (uint64_t *)(v185 & 0xFFFFFFFFFFFFFFFCLL);
    if (v185) {
      uint64_t v3 = (uint64_t *)*v3;
    }
    sub_1881E08(v193, &__p, v3);
    if (SBYTE7(v178) < 0) {
      operator delete((void *)__p);
    }
    sub_13C08C8((uint64_t)&__p, 0, 0);
    LODWORD(v178) = v178 | 1;
    DWORD2(v178) = 8;
    if (v189 && (uint64_t v4 = v188, v188 < *v189))
    {
      ++v188;
      uint64_t v5 = *(std::string **)&v189[2 * v4 + 2];
    }
    else
    {
      sub_13D9AD0(v187);
      uint64_t v5 = (std::string *)sub_188CDC8((uint64_t)&v187, v138);
    }
    sub_13C0E7C(v5, (uint64_t)&__p);
    unint64_t v195 = (unint64_t)sub_72688((uint64_t)v196);
    *(unsigned char *)a2 = 1;
    sub_C6B2B4(a2 + 8, (uint64_t)v184);
    *(void *)(a2 + 568) = v195;
    sub_13C0970(&__p);
    return sub_162D64C(v184);
  }
  if (v192)
  {
    uint64_t v6 = v191;
    if (v191 < *v192)
    {
      ++v191;
      uint64_t v7 = *(void *)&v192[2 * v6 + 2];
      if (!*(unsigned char *)(a1 + 8)) {
        goto LABEL_12;
      }
LABEL_220:
      sub_42417C((uint64_t)&__p, *(void **)(a1 + 16), 10000);
      sub_45E958(*(__n128 **)a1, &v170);
      unint64_t v131 = v170.n128_u64[1];
      for (uint64_t i = (void *)v170.n128_u64[0]; i != (void *)v131; i += 59)
      {
        sub_42801C((uint64_t)&__p, i, 1, 1, &v197);
        size_t v132 = *(_DWORD **)(v7 + 64);
        if (v132 && (uint64_t v133 = *(int *)(v7 + 56), (int)v133 < *v132))
        {
          *(_DWORD *)(v7 + 56) = v133 + 1;
          uint64_t v134 = *(void *)&v132[2 * v133 + 2];
        }
        else
        {
          uint64_t v135 = sub_13D8E84(*(void *)(v7 + 48));
          uint64_t v134 = sub_188CDC8(v7 + 48, v135);
        }
        sub_188B428((uint64_t)&v197, (uint64_t)&v167);
        *(_DWORD *)(v134 + 40) |= 0x100u;
        uint64_t v136 = *(void *)(v134 + 8);
        size_t v137 = (uint64_t *)(v136 & 0xFFFFFFFFFFFFFFFCLL);
        if (v136) {
          size_t v137 = (uint64_t *)*v137;
        }
        sub_1881E08((uint64_t *)(v134 + 720), &v167, v137);
        if (SHIBYTE(v168) < 0) {
          operator delete((void *)v167);
        }
        sub_1116458(&v197);
      }
      sub_423E54((uint64_t)&v183);
      *(void *)&long long v178 = off_2439728;
      uint64_t v139 = &v182;
      do
      {
        unint64_t v140 = v139 - 6;
        uint64_t v141 = *(v139 - 3);
        if (v141)
        {
          uint64_t v142 = 0;
          uint64_t v143 = 0;
          uint64_t v144 = v139 - 5;
          do
          {
            if ((*(char *)(*v140 + v143) & 0x80000000) == 0)
            {
              uint64_t v145 = *v144 + v142;
              unint64_t v146 = *(void **)(v145 + 8);
              if (v146)
              {
                *(void *)(v145 + 16) = v146;
                operator delete(v146);
                uint64_t v141 = *(v139 - 3);
              }
            }
            ++v143;
            v142 += 32;
          }
          while (v143 != v141);
          operator delete((void *)*(v139 - 6));
          *(v139 - 6) = (uint64_t)&unk_20E1710;
          *(v139 - 1) = 0;
          *(v139 - 4) = 0;
          *(v139 - 3) = 0;
          *uint64_t v144 = 0;
        }
        v139 -= 6;
      }
      while (v140 != &v181);
      goto LABEL_242;
    }
  }
  uint64_t v129 = sub_13D8C74(v190);
  uint64_t v7 = sub_188CDC8((uint64_t)&v190, v129);
  if (*(unsigned char *)(a1 + 8)) {
    goto LABEL_220;
  }
LABEL_12:
  uint64_t v151 = sub_3750CC(*(void **)(a1 + 16));
  sub_45E958(*(__n128 **)a1, &v176);
  if (v176.n128_u64[0] != v176.n128_u64[1])
  {
    unint64_t v173 = 0;
    uint64_t v174 = 0;
    uint64_t v175 = 0;
    sub_EB04FC(v176.n128_u64[0], &v170);
    unint64_t v9 = v170.n128_u64[1];
    uint64_t v8 = (void *)v170.n128_u64[0];
    char v10 = v171;
    unint64_t v11 = v172;
    uint64_t v153 = v171;
    unint64_t v154 = v170.n128_u64[0];
    unint64_t v152 = v172;
    while (1)
    {
      if (v8)
      {
        unint64_t v12 = sub_EB04C4(v8);
        BOOL v13 = v9 < v12;
        if (!v10)
        {
          if (v9 >= v12) {
            goto LABEL_216;
          }
          goto LABEL_28;
        }
      }
      else
      {
        if (!v10) {
          goto LABEL_216;
        }
        BOOL v13 = 0;
      }
      unint64_t v14 = sub_EB04C4(v10);
      if (v11 < v14 && v13)
      {
        uint64_t v16 = sub_EB0624(v8, v9);
        if (v16 == sub_EB0624(v10, v11)) {
          goto LABEL_216;
        }
      }
      else if (((v13 ^ (v11 < v14)) & 1) == 0)
      {
LABEL_216:
        long long __p = 0uLL;
        *(void *)&long long v178 = 0;
        sub_426D8((uint64_t *)&v173, 0xAAAAAAAAAAAAAAABLL * ((v174 - (uint64_t)v173) >> 2), 0, 1, &__p, (uint64_t)&v197, 100.0);
        if ((void)__p) {
          operator delete((void *)__p);
        }
        sub_1106C64();
      }
LABEL_28:
      uint64_t v17 = sub_EB0624(v8, v9);
      sub_2954EC(v151, *(void *)(v17 + 32), (uint64_t)&v167);
      unint64_t v155 = v9;
      uint64_t v156 = v174;
      if (v169)
      {
        if (*((void *)&v167 + 1) == v168) {
          goto LABEL_35;
        }
        unint64_t v18 = *(void *)(v168 - 8);
        uint64_t v19 = v167;
        LODWORD(v197) = v18;
        LODWORD(v205) = 1;
        *(void *)&long long __p = &v205;
        *((void *)&__p + 1) = &v197;
        unint64_t v20 = *(void *)(v167 + 3856) + 1;
        *(void *)(v167 + 3856) = v20;
        if (*(void *)v19)
        {
          uint64_t v21 = v19 + 16;
          if (*(_DWORD *)(v19 + 112) == v18)
          {
            unsigned int v22 = 4;
            goto LABEL_42;
          }
          if (*(_DWORD *)(v19 + 136) == v18)
          {
            unsigned int v22 = 5;
            goto LABEL_42;
          }
          if (*(_DWORD *)(v19 + 160) == v18)
          {
            unsigned int v22 = 6;
            goto LABEL_42;
          }
          if (*(_DWORD *)(v19 + 184) == v18)
          {
            unsigned int v22 = 7;
LABEL_42:
            ++*(void *)(v19 + 3864);
            uint64_t v23 = v21 + 24 * v22;
            *(void *)(v23 + 8) = v20;
            uint64_t v24 = *(unsigned int **)(v23 + 16);
            if (v24)
            {
LABEL_43:
              uint64_t v25 = (int *)((char *)v24 + *v24);
LABEL_57:
              uint64_t v34 = (unsigned int *)((char *)v25 + *(unsigned __int16 *)((char *)v25 - *v25 + 4));
              uint64_t v35 = (uint64_t)&v34[HIDWORD(v18)] + *v34;
              long long v36 = (int *)(v35 + 4 + *(unsigned int *)(v35 + 4));
              unsigned int v37 = (unsigned int *)((char *)v36 + *(unsigned __int16 *)((char *)v36 - *v36 + 6));
              LODWORD(v37) = *(unsigned int *)((char *)v37 + *v37) - 1;
              *(void *)&long long v164 = v167;
              *((void *)&v164 + 1) = (char *)&v167 + 8;
              long long v165 = 0u;
              v166[0] = 0u;
              LODWORD(v166[1]) = ((unint64_t)(v168 - *((void *)&v167 + 1)) >> 3) - 1;
              DWORD1(v166[1]) = v37;
              BYTE8(v166[1]) = 1;
              goto LABEL_58;
            }
          }
          else
          {
            unint64_t v26 = *(void *)(v19 + 168);
            unint64_t v27 = *(void *)(v19 + 144);
            unint64_t v28 = *(void *)(v19 + 120);
            unint64_t v29 = *(void *)(v19 + 192);
            uint64_t v24 = (unsigned int *)sub_2AB884(*(void *)v19, 1, v18, 1);
            if (v28 >= v20) {
              unint64_t v30 = v20;
            }
            else {
              unint64_t v30 = v28;
            }
            BOOL v31 = v27 >= v30;
            if (v27 < v30) {
              unint64_t v30 = v27;
            }
            unsigned int v32 = 4 * (v28 < v20);
            if (!v31) {
              unsigned int v32 = 5;
            }
            if (v26 < v30)
            {
              unsigned int v32 = 6;
              unint64_t v30 = v26;
            }
            if (v29 < v30) {
              unsigned int v32 = 7;
            }
            uint64_t v33 = v21 + 24 * v32;
            *(_DWORD *)uint64_t v33 = v197;
            *(void *)(v33 + 8) = *(void *)(v19 + 3856);
            *(void *)(v33 + 16) = v24;
            if (v24) {
              goto LABEL_43;
            }
          }
        }
        sub_296654((int **)&__p);
        uint64_t v25 = 0;
        goto LABEL_57;
      }
      if (*((void *)&v167 + 1) == v168)
      {
LABEL_35:
        memset(v166, 0, sizeof(v166));
        long long v164 = 0u;
        long long v165 = 0u;
        goto LABEL_59;
      }
      *(void *)&long long v164 = v167;
      *((void *)&v164 + 1) = (char *)&v167 + 8;
      long long v165 = 0u;
      memset(v166, 0, 25);
LABEL_58:
      sub_2E1D08((uint64_t)&v164);
LABEL_59:
      if (v169)
      {
        if (*((void *)&v167 + 1) != v168)
        {
          uint64_t v38 = v167;
          long long v162 = 0u;
          long long v163 = 0u;
          char v39 = 1;
          LODWORD(v40) = -1;
          int v41 = -1;
          goto LABEL_65;
        }
      }
      else if (*((void *)&v167 + 1) != v168)
      {
        unint64_t v42 = *(void *)(v168 - 8);
        int v43 = sub_2964C4(v167, v42, 1);
        char v39 = 0;
        long long v44 = &v43[*(unsigned __int16 *)&v43[-*(int *)v43 + 4]];
        uint64_t v45 = (uint64_t)&v44[4 * HIDWORD(v42) + *(unsigned int *)v44];
        uint64_t v46 = (int *)(v45 + 4 + *(unsigned int *)(v45 + 4));
        uint64_t v38 = v167;
        size_t v47 = (unsigned int *)((char *)v46 + *(unsigned __int16 *)((char *)v46 - *v46 + 6));
        int v41 = *(unsigned int *)((char *)v47 + *v47);
        unint64_t v40 = (unint64_t)(v168 - *((void *)&v167 + 1)) >> 3;
        long long v162 = 0u;
        long long v163 = 0u;
        goto LABEL_65;
      }
      uint64_t v38 = 0;
      LODWORD(v40) = 0;
      int v41 = 0;
      char v39 = 0;
      long long v162 = 0u;
      long long v163 = 0u;
      memset(v161, 0, 7);
LABEL_65:
      long long __p = v164;
      long long v178 = v165;
      long long v179 = v166[0];
      long long v180 = v166[1];
      uint64_t v197 = v38;
      long long v198 = v162;
      long long v199 = v163;
      uint64_t v200 = 0;
      int v201 = v40;
      int v202 = v41;
      char v203 = v39;
      *(_DWORD *)&v204[3] = *(_DWORD *)((char *)v161 + 3);
      *(_DWORD *)uint64_t v204 = v161[0];
      long long v48 = v164;
      LODWORD(v49) = v166[1];
      unsigned int v50 = DWORD1(v166[1]);
      int v158 = v40;
      if (*(void *)&v166[1] == __PAIR64__(v41, v40))
      {
        sub_6CFD9C((const void **)&v173, v156, &__p, (long long *)&v197, 0);
        goto LABEL_214;
      }
      int v157 = v41;
      char v51 = (char *)*((void *)&v165 + 1);
      uint64_t v160 = v164 + 16;
      if (!BYTE8(v166[1]))
      {
        uint64_t v159 = 0;
        while (1)
        {
          unsigned int v92 = v50 + 1;
          if (v50 + 1 >= *(_DWORD *)v51)
          {
            uint64_t v95 = **((void **)&v48 + 1);
            unint64_t v49 = (v49 + 1);
            if (v49 < (uint64_t)(*(void *)(*((void *)&v48 + 1) + 8) - **((void **)&v48 + 1)) >> 3) {
              goto LABEL_150;
            }
LABEL_148:
            unsigned int v50 = v92;
            goto LABEL_211;
          }
          uint64_t v93 = &v51[4 * v50 + 4];
          size_t v94 = &v51[4 * v92 + 4];
          if (*(unsigned __int16 *)v93 != *(unsigned __int16 *)v94) {
            goto LABEL_148;
          }
          if (*((unsigned __int16 *)v93 + 1) != *((unsigned __int16 *)v94 + 1)) {
            goto LABEL_148;
          }
          uint64_t v95 = **((void **)&v48 + 1);
          uint64_t v96 = *(void *)(*((void *)&v48 + 1) + 8) - **((void **)&v48 + 1);
          if (*(_DWORD *)v51 == 2 && v96 == 8) {
            goto LABEL_148;
          }
          unsigned int v92 = v50 + 2;
          unint64_t v49 = (v49 + 1);
          if (v49 >= v96 >> 3) {
            goto LABEL_148;
          }
          while (1)
          {
LABEL_150:
            unint64_t v97 = *(void *)(v95 + 8 * v49);
            int v207 = 1;
            v208[0] = v97;
            long long v205 = &v207;
            long long v206 = v208;
            unint64_t v98 = *(void *)(v48 + 3856) + 1;
            *(void *)(v48 + 3856) = v98;
            if (!*(void *)v48) {
              goto LABEL_160;
            }
            if (*(_DWORD *)(v48 + 112) == v97)
            {
              unsigned int v99 = 4;
              goto LABEL_159;
            }
            if (*(_DWORD *)(v48 + 136) == v97)
            {
              unsigned int v99 = 5;
              goto LABEL_159;
            }
            if (*(_DWORD *)(v48 + 160) == v97)
            {
              unsigned int v99 = 6;
              goto LABEL_159;
            }
            if (*(_DWORD *)(v48 + 184) == v97)
            {
              unsigned int v99 = 7;
LABEL_159:
              ++*(void *)(v48 + 3864);
              uint64_t v100 = v160 + 24 * v99;
              *(void *)(v100 + 8) = v98;
              if (*(void *)(v100 + 16)) {
                goto LABEL_161;
              }
LABEL_160:
              sub_296654(&v205);
              goto LABEL_161;
            }
            unint64_t v107 = *(void *)(v48 + 168);
            unint64_t v108 = *(void *)(v48 + 144);
            unint64_t v109 = *(void *)(v48 + 120);
            unint64_t v110 = *(void *)(v48 + 192);
            uint64_t v111 = sub_2AB884(*(void *)v48, 1, v97, 1);
            if (v109 >= v98) {
              unint64_t v112 = v98;
            }
            else {
              unint64_t v112 = v109;
            }
            BOOL v113 = v108 >= v112;
            if (v108 < v112) {
              unint64_t v112 = v108;
            }
            unsigned int v114 = 4 * (v109 < v98);
            if (!v113) {
              unsigned int v114 = 5;
            }
            if (v107 < v112)
            {
              unsigned int v114 = 6;
              unint64_t v112 = v107;
            }
            if (v110 < v112) {
              unsigned int v114 = 7;
            }
            uint64_t v115 = v160 + 24 * v114;
            *(_DWORD *)uint64_t v115 = v208[0];
            *(void *)(v115 + 8) = *(void *)(v48 + 3856);
            *(void *)(v115 + 16) = v111;
            if (!v111) {
              goto LABEL_160;
            }
LABEL_161:
            int v207 = 1;
            v208[0] = v97;
            long long v205 = &v207;
            long long v206 = v208;
            unint64_t v101 = *(void *)(v48 + 3856) + 1;
            *(void *)(v48 + 3856) = v101;
            if (!*(void *)v48) {
              goto LABEL_198;
            }
            if (*(_DWORD *)(v48 + 112) == v97)
            {
              unsigned int v102 = 4;
              goto LABEL_170;
            }
            if (*(_DWORD *)(v48 + 136) == v97)
            {
              unsigned int v102 = 5;
              goto LABEL_170;
            }
            if (*(_DWORD *)(v48 + 160) == v97)
            {
              unsigned int v102 = 6;
              goto LABEL_170;
            }
            if (*(_DWORD *)(v48 + 184) == v97)
            {
              unsigned int v102 = 7;
LABEL_170:
              ++*(void *)(v48 + 3864);
              uint64_t v103 = v160 + 24 * v102;
              *(void *)(v103 + 8) = v101;
              int v104 = *(unsigned int **)(v103 + 16);
              if (v104) {
                goto LABEL_171;
              }
              goto LABEL_198;
            }
            unint64_t v116 = *(void *)(v48 + 168);
            unint64_t v117 = *(void *)(v48 + 144);
            unint64_t v118 = *(void *)(v48 + 120);
            unint64_t v119 = *(void *)(v48 + 192);
            int v104 = (unsigned int *)sub_2AB884(*(void *)v48, 1, v97, 1);
            if (v118 >= v101) {
              unint64_t v120 = v101;
            }
            else {
              unint64_t v120 = v118;
            }
            BOOL v121 = v117 >= v120;
            if (v117 < v120) {
              unint64_t v120 = v117;
            }
            unsigned int v122 = 4 * (v118 < v101);
            if (!v121) {
              unsigned int v122 = 5;
            }
            if (v116 < v120)
            {
              unsigned int v122 = 6;
              unint64_t v120 = v116;
            }
            if (v119 < v120) {
              unsigned int v122 = 7;
            }
            uint64_t v123 = v160 + 24 * v122;
            *(_DWORD *)uint64_t v123 = v208[0];
            *(void *)(v123 + 8) = *(void *)(v48 + 3856);
            *(void *)(v123 + 16) = v104;
            if (v104)
            {
LABEL_171:
              long long v105 = (int *)((char *)v104 + *v104);
              long long v106 = (unsigned __int16 *)((char *)v105 - *v105);
              if (*v106 < 5u) {
                goto LABEL_201;
              }
              goto LABEL_199;
            }
LABEL_198:
            sub_296654(&v205);
            long long v105 = 0;
            long long v106 = (_WORD *)(&loc_1120530 + 1);
            if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
              goto LABEL_201;
            }
LABEL_199:
            uint64_t v124 = v106[2];
            if (!v124)
            {
LABEL_201:
              unsigned int v125 = 0;
              goto LABEL_202;
            }
            unsigned int v125 = (char *)v105 + v124 + *(unsigned int *)((char *)v105 + v124);
LABEL_202:
            unint64_t v126 = &v125[4 * HIDWORD(v97) + 4 + *(unsigned int *)&v125[4 * HIDWORD(v97) + 4]];
            double v127 = &v126[-*(int *)v126];
            if (*(unsigned __int16 *)v127 < 7u) {
              break;
            }
            uint64_t v128 = *((unsigned __int16 *)v127 + 3);
            if (!v128) {
              break;
            }
            char v51 = &v126[v128 + *(unsigned int *)&v126[v128]];
            if (*((unsigned __int16 *)v51 + 2) != *((unsigned __int16 *)v51 + 4)
              || *((unsigned __int16 *)v51 + 3) != *((unsigned __int16 *)v51 + 5))
            {
              goto LABEL_210;
            }
            unint64_t v49 = (v49 + 1);
            uint64_t v95 = **((void **)&v48 + 1);
            if (v49 >= (uint64_t)(*(void *)(*((void *)&v48 + 1) + 8) - **((void **)&v48 + 1)) >> 3)
            {
              unsigned int v50 = 2;
              goto LABEL_211;
            }
          }
          char v51 = 0;
LABEL_210:
          unsigned int v50 = 1;
LABEL_211:
          ++v159;
          if (v49 == v158 && v50 == v157) {
            goto LABEL_213;
          }
        }
      }
      uint64_t v159 = 0;
      unsigned int v52 = **((_DWORD **)&v165 + 1);
      do
      {
        unsigned int v53 = v50 - 1;
        if (v50 - 1 >= v52)
        {
          uint64_t v56 = **((void **)&v48 + 1);
          unint64_t v49 = (v49 - 1);
          if (v49 < (uint64_t)(*(void *)(*((void *)&v48 + 1) + 8) - **((void **)&v48 + 1)) >> 3) {
            goto LABEL_76;
          }
          goto LABEL_137;
        }
        char v54 = &v51[4 * v50 + 4];
        unint64_t v55 = &v51[4 * v53 + 4];
        if (*(unsigned __int16 *)v54 != *(unsigned __int16 *)v55
          || *((unsigned __int16 *)v54 + 1) != *((unsigned __int16 *)v55 + 1))
        {
          goto LABEL_137;
        }
        uint64_t v56 = **((void **)&v48 + 1);
        uint64_t v57 = *(void *)(*((void *)&v48 + 1) + 8) - **((void **)&v48 + 1);
        if (v52 == 2 && v57 == 8)
        {
          unsigned int v52 = 2;
LABEL_137:
          unsigned int v50 = v53;
          goto LABEL_138;
        }
        unsigned int v53 = v50 - 2;
        unint64_t v49 = (v49 - 1);
        if (v49 >= v57 >> 3) {
          goto LABEL_137;
        }
        do
        {
LABEL_76:
          unint64_t v58 = *(void *)(v56 + 8 * v49);
          int v207 = 1;
          v208[0] = v58;
          long long v205 = &v207;
          long long v206 = v208;
          unint64_t v59 = *(void *)(v48 + 3856) + 1;
          *(void *)(v48 + 3856) = v59;
          if (!*(void *)v48) {
            goto LABEL_86;
          }
          if (*(_DWORD *)(v48 + 112) == v58)
          {
            unsigned int v60 = 4;
            goto LABEL_85;
          }
          if (*(_DWORD *)(v48 + 136) == v58)
          {
            unsigned int v60 = 5;
            goto LABEL_85;
          }
          if (*(_DWORD *)(v48 + 160) == v58)
          {
            unsigned int v60 = 6;
            goto LABEL_85;
          }
          if (*(_DWORD *)(v48 + 184) == v58)
          {
            unsigned int v60 = 7;
LABEL_85:
            ++*(void *)(v48 + 3864);
            uint64_t v61 = v160 + 24 * v60;
            *(void *)(v61 + 8) = v59;
            if (*(void *)(v61 + 16)) {
              goto LABEL_87;
            }
LABEL_86:
            sub_296654(&v205);
            goto LABEL_87;
          }
          unint64_t v68 = *(void *)(v48 + 168);
          unint64_t v69 = *(void *)(v48 + 144);
          unint64_t v70 = *(void *)(v48 + 120);
          unint64_t v71 = *(void *)(v48 + 192);
          uint64_t v72 = sub_2AB884(*(void *)v48, 1, v58, 1);
          if (v70 >= v59) {
            unint64_t v73 = v59;
          }
          else {
            unint64_t v73 = v70;
          }
          BOOL v74 = v69 >= v73;
          if (v69 < v73) {
            unint64_t v73 = v69;
          }
          unsigned int v75 = 4 * (v70 < v59);
          if (!v74) {
            unsigned int v75 = 5;
          }
          if (v68 < v73)
          {
            unsigned int v75 = 6;
            unint64_t v73 = v68;
          }
          if (v71 < v73) {
            unsigned int v75 = 7;
          }
          uint64_t v76 = v160 + 24 * v75;
          *(_DWORD *)uint64_t v76 = v208[0];
          *(void *)(v76 + 8) = *(void *)(v48 + 3856);
          *(void *)(v76 + 16) = v72;
          if (!v72) {
            goto LABEL_86;
          }
LABEL_87:
          int v207 = 1;
          v208[0] = v58;
          long long v205 = &v207;
          long long v206 = v208;
          unint64_t v62 = *(void *)(v48 + 3856) + 1;
          *(void *)(v48 + 3856) = v62;
          if (!*(void *)v48) {
            goto LABEL_124;
          }
          if (*(_DWORD *)(v48 + 112) == v58)
          {
            unsigned int v63 = 4;
            goto LABEL_96;
          }
          if (*(_DWORD *)(v48 + 136) == v58)
          {
            unsigned int v63 = 5;
            goto LABEL_96;
          }
          if (*(_DWORD *)(v48 + 160) == v58)
          {
            unsigned int v63 = 6;
            goto LABEL_96;
          }
          if (*(_DWORD *)(v48 + 184) == v58)
          {
            unsigned int v63 = 7;
LABEL_96:
            ++*(void *)(v48 + 3864);
            uint64_t v64 = v160 + 24 * v63;
            *(void *)(v64 + 8) = v62;
            int v65 = *(unsigned int **)(v64 + 16);
            if (v65) {
              goto LABEL_97;
            }
            goto LABEL_124;
          }
          unint64_t v77 = *(void *)(v48 + 168);
          unint64_t v78 = *(void *)(v48 + 144);
          unint64_t v79 = *(void *)(v48 + 120);
          unint64_t v80 = *(void *)(v48 + 192);
          int v65 = (unsigned int *)sub_2AB884(*(void *)v48, 1, v58, 1);
          if (v79 >= v62) {
            unint64_t v81 = v62;
          }
          else {
            unint64_t v81 = v79;
          }
          BOOL v82 = v78 >= v81;
          if (v78 < v81) {
            unint64_t v81 = v78;
          }
          unsigned int v83 = 4 * (v79 < v62);
          if (!v82) {
            unsigned int v83 = 5;
          }
          if (v77 < v81)
          {
            unsigned int v83 = 6;
            unint64_t v81 = v77;
          }
          if (v80 < v81) {
            unsigned int v83 = 7;
          }
          uint64_t v84 = v160 + 24 * v83;
          *(_DWORD *)uint64_t v84 = v208[0];
          *(void *)(v84 + 8) = *(void *)(v48 + 3856);
          *(void *)(v84 + 16) = v65;
          if (v65)
          {
LABEL_97:
            uint64_t v66 = (int *)((char *)v65 + *v65);
            unint64_t v67 = (unsigned __int16 *)((char *)v66 - *v66);
            if (*v67 < 5u) {
              goto LABEL_127;
            }
            goto LABEL_125;
          }
LABEL_124:
          sub_296654(&v205);
          uint64_t v66 = 0;
          unint64_t v67 = (_WORD *)(&loc_1120530 + 1);
          if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
            goto LABEL_127;
          }
LABEL_125:
          uint64_t v85 = v67[2];
          if (!v85)
          {
LABEL_127:
            uint64_t v86 = 0;
            goto LABEL_128;
          }
          uint64_t v86 = (char *)v66 + v85 + *(unsigned int *)((char *)v66 + v85);
LABEL_128:
          uint64_t v87 = &v86[4 * HIDWORD(v58) + 4 + *(unsigned int *)&v86[4 * HIDWORD(v58) + 4]];
          unint64_t v88 = &v87[-*(int *)v87];
          if (*(unsigned __int16 *)v88 >= 7u && (uint64_t v89 = *((unsigned __int16 *)v88 + 3)) != 0) {
            char v51 = &v87[v89 + *(unsigned int *)&v87[v89]];
          }
          else {
            char v51 = 0;
          }
          unsigned int v52 = *(_DWORD *)v51;
          unsigned int v50 = *(_DWORD *)v51 - 2;
          int v90 = &v51[4 * (*(_DWORD *)v51 - 1) + 4];
          uint64_t v91 = &v51[4 * v50 + 4];
          if (*(unsigned __int16 *)v90 != *(unsigned __int16 *)v91
            || *((unsigned __int16 *)v90 + 1) != *((unsigned __int16 *)v91 + 1))
          {
            goto LABEL_138;
          }
          unint64_t v49 = (v49 - 1);
          uint64_t v56 = **((void **)&v48 + 1);
        }
        while (v49 < (uint64_t)(*(void *)(*((void *)&v48 + 1) + 8) - **((void **)&v48 + 1)) >> 3);
        unsigned int v50 = v52 - 3;
LABEL_138:
        ++v159;
      }
      while (v49 != v158 || v50 != v157);
LABEL_213:
      sub_6CFD9C((const void **)&v173, v156, &__p, (long long *)&v197, v159);
LABEL_214:
      if (*((void *)&v167 + 1))
      {
        uint64_t v168 = *((void *)&v167 + 1);
        operator delete(*((void **)&v167 + 1));
      }
      uint64_t v8 = (void *)v154;
      unint64_t v9 = v155 + 1;
      unint64_t v11 = v152;
      char v10 = v153;
    }
  }
LABEL_242:
  int v147 = sub_E124B8(0);
  *(_DWORD *)(v7 + 40) |= 0x80u;
  *(_DWORD *)(v7 + 284) = v147;
  v186 |= 0x100000u;
  int v194 = 0;
  sub_51C5C((uint64_t)&v197);
  sub_51D74((uint64_t)&v197, (uint64_t)&__p);
  v186 |= 1u;
  uint64_t v148 = (uint64_t *)(v185 & 0xFFFFFFFFFFFFFFFCLL);
  if (v185) {
    uint64_t v148 = (uint64_t *)*v148;
  }
  sub_1881E08(v193, &__p, v148);
  if (SBYTE7(v178) < 0) {
    operator delete((void *)__p);
  }
  unint64_t v195 = (unint64_t)sub_72688((uint64_t)v196);
  *(unsigned char *)a2 = 1;
  sub_C6B2B4(a2 + 8, (uint64_t)v184);
  *(void *)(a2 + 568) = v195;
  return sub_162D64C(v184);
}

void sub_CB80EC(_Unwind_Exception *a1)
{
}

void sub_CB8100(_Unwind_Exception *a1)
{
}

void sub_CB8114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void sub_CB8130(_Unwind_Exception *a1)
{
}

void sub_CB8144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a62 < 0)
  {
    operator delete(__p);
    sub_162D64C(&STACK[0x5B8]);
    _Unwind_Resume(a1);
  }
  sub_162D64C(&STACK[0x5B8]);
  _Unwind_Resume(a1);
}

uint64_t sub_CB82EC(uint64_t a1)
{
  sub_423E54(a1 + 928);
  *(void *)(a1 + 16) = off_2439728;
  uint64_t v2 = a1 + 920;
  do
  {
    uint64_t v3 = (void *)(v2 - 48);
    uint64_t v4 = *(void *)(v2 - 24);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = (void *)(v2 - 40);
      do
      {
        if ((*(char *)(*v3 + v6) & 0x80000000) == 0)
        {
          uint64_t v8 = *v7 + v5;
          unint64_t v9 = *(void **)(v8 + 8);
          if (v9)
          {
            *(void *)(v8 + 16) = v9;
            operator delete(v9);
            uint64_t v4 = *(void *)(v2 - 24);
          }
        }
        ++v6;
        v5 += 32;
      }
      while (v6 != v4);
      operator delete(*(void **)(v2 - 48));
      *(void *)(v2 - 48) = &unk_20E1710;
      *(void *)(v2 - 8) = 0;
      *(void *)(v2 - 32) = 0;
      *(void *)(v2 - 24) = 0;
      void *v7 = 0;
    }
    v2 -= 48;
  }
  while (v3 != (void *)(a1 + 152));
  return a1;
}

uint64_t sub_CB83E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v196);
  sub_162C594(v184, 0, 0);
  unint64_t v195 = 0;
  if (sub_EA8E90(*(uint64_t **)a1))
  {
    v186 |= 0x100000u;
    int v194 = 1;
    sub_51C5C((uint64_t)&v197);
    sub_51D74((uint64_t)&v197, (uint64_t)&__p);
    v186 |= 1u;
    uint64_t v3 = (uint64_t *)(v185 & 0xFFFFFFFFFFFFFFFCLL);
    if (v185) {
      uint64_t v3 = (uint64_t *)*v3;
    }
    sub_1881E08(v193, &__p, v3);
    if (SBYTE7(v178) < 0) {
      operator delete((void *)__p);
    }
    sub_13C08C8((uint64_t)&__p, 0, 0);
    LODWORD(v178) = v178 | 1;
    DWORD2(v178) = 8;
    if (v189 && (uint64_t v4 = v188, v188 < *v189))
    {
      ++v188;
      uint64_t v5 = *(std::string **)&v189[2 * v4 + 2];
    }
    else
    {
      sub_13D9AD0(v187);
      uint64_t v5 = (std::string *)sub_188CDC8((uint64_t)&v187, v138);
    }
    sub_13C0E7C(v5, (uint64_t)&__p);
    unint64_t v195 = (unint64_t)sub_72688((uint64_t)v196);
    *(unsigned char *)a2 = 1;
    sub_C6B2B4(a2 + 8, (uint64_t)v184);
    *(void *)(a2 + 568) = v195;
    sub_13C0970(&__p);
    return sub_162D64C(v184);
  }
  if (v192)
  {
    uint64_t v6 = v191;
    if (v191 < *v192)
    {
      ++v191;
      uint64_t v7 = *(void *)&v192[2 * v6 + 2];
      if (!*(unsigned char *)(a1 + 8)) {
        goto LABEL_12;
      }
LABEL_220:
      sub_42438C((uint64_t)&__p, *(void **)(a1 + 16), 10000);
      sub_45E958(*(__n128 **)a1, &v170);
      unint64_t v131 = v170.n128_u64[1];
      for (uint64_t i = v170.n128_u64[0]; i != v131; i += 480)
      {
        sub_4282FC((uint64_t)&__p, i, 1, 1, &v197);
        size_t v132 = *(_DWORD **)(v7 + 64);
        if (v132 && (uint64_t v133 = *(int *)(v7 + 56), (int)v133 < *v132))
        {
          *(_DWORD *)(v7 + 56) = v133 + 1;
          uint64_t v134 = *(void *)&v132[2 * v133 + 2];
        }
        else
        {
          uint64_t v135 = sub_13D8E84(*(void *)(v7 + 48));
          uint64_t v134 = sub_188CDC8(v7 + 48, v135);
        }
        sub_188B428((uint64_t)&v197, (uint64_t)&v167);
        *(_DWORD *)(v134 + 40) |= 0x100u;
        uint64_t v136 = *(void *)(v134 + 8);
        size_t v137 = (uint64_t *)(v136 & 0xFFFFFFFFFFFFFFFCLL);
        if (v136) {
          size_t v137 = (uint64_t *)*v137;
        }
        sub_1881E08((uint64_t *)(v134 + 720), &v167, v137);
        if (SHIBYTE(v168) < 0) {
          operator delete((void *)v167);
        }
        sub_1116458(&v197);
      }
      sub_423E54((uint64_t)&v183);
      *(void *)&long long v178 = off_24397A0;
      uint64_t v139 = &v182;
      do
      {
        unint64_t v140 = v139 - 6;
        uint64_t v141 = *(v139 - 3);
        if (v141)
        {
          uint64_t v142 = 0;
          uint64_t v143 = 0;
          uint64_t v144 = v139 - 5;
          do
          {
            if ((*(char *)(*v140 + v143) & 0x80000000) == 0)
            {
              uint64_t v145 = *v144 + v142;
              unint64_t v146 = *(void **)(v145 + 8);
              if (v146)
              {
                *(void *)(v145 + 16) = v146;
                operator delete(v146);
                uint64_t v141 = *(v139 - 3);
              }
            }
            ++v143;
            v142 += 32;
          }
          while (v143 != v141);
          operator delete((void *)*(v139 - 6));
          *(v139 - 6) = (uint64_t)&unk_20E1710;
          *(v139 - 1) = 0;
          *(v139 - 4) = 0;
          *(v139 - 3) = 0;
          *uint64_t v144 = 0;
        }
        v139 -= 6;
      }
      while (v140 != &v181);
      goto LABEL_242;
    }
  }
  uint64_t v129 = sub_13D8C74(v190);
  uint64_t v7 = sub_188CDC8((uint64_t)&v190, v129);
  if (*(unsigned char *)(a1 + 8)) {
    goto LABEL_220;
  }
LABEL_12:
  uint64_t v151 = sub_3750CC(*(void **)(a1 + 16));
  sub_45E958(*(__n128 **)a1, &v176);
  if (v176.n128_u64[0] != v176.n128_u64[1])
  {
    unint64_t v173 = 0;
    uint64_t v174 = 0;
    uint64_t v175 = 0;
    sub_EB2EE8(v176.n128_i64[0], &v170);
    unint64_t v9 = v170.n128_u64[1];
    uint64_t v8 = v170.n128_u64[0];
    uint64_t v10 = v171;
    unint64_t v11 = v172;
    uint64_t v153 = v171;
    unint64_t v154 = v170.n128_u64[0];
    unint64_t v152 = v172;
    while (1)
    {
      if (v8)
      {
        unint64_t v12 = sub_EB2E84(v8);
        BOOL v13 = v9 < v12;
        if (!v10)
        {
          if (v9 >= v12) {
            goto LABEL_216;
          }
          goto LABEL_28;
        }
      }
      else
      {
        if (!v10) {
          goto LABEL_216;
        }
        BOOL v13 = 0;
      }
      unint64_t v14 = sub_EB2E84(v10);
      if (v11 < v14 && v13)
      {
        uint64_t v16 = sub_EB2F38(v8, v9);
        if (v16 == sub_EB2F38(v10, v11)) {
          goto LABEL_216;
        }
      }
      else if (((v13 ^ (v11 < v14)) & 1) == 0)
      {
LABEL_216:
        long long __p = 0uLL;
        *(void *)&long long v178 = 0;
        sub_426D8((uint64_t *)&v173, 0xAAAAAAAAAAAAAAABLL * ((v174 - (uint64_t)v173) >> 2), 0, 1, &__p, (uint64_t)&v197, 100.0);
        if ((void)__p) {
          operator delete((void *)__p);
        }
        sub_1106C64();
      }
LABEL_28:
      uint64_t v17 = (unsigned int *)sub_EB2F38(v8, v9);
      sub_2954EC(v151, (((unint64_t)(v17[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v17[1] << 32) | *v17) ^ 0x1000000000000, (uint64_t)&v167);
      unint64_t v155 = v9;
      uint64_t v156 = v174;
      if (v169)
      {
        if (*((void *)&v167 + 1) == v168) {
          goto LABEL_35;
        }
        unint64_t v18 = *(void *)(v168 - 8);
        uint64_t v19 = v167;
        LODWORD(v197) = v18;
        LODWORD(v205) = 1;
        *(void *)&long long __p = &v205;
        *((void *)&__p + 1) = &v197;
        unint64_t v20 = *(void *)(v167 + 3856) + 1;
        *(void *)(v167 + 3856) = v20;
        if (*(void *)v19)
        {
          uint64_t v21 = v19 + 16;
          if (*(_DWORD *)(v19 + 112) == v18)
          {
            unsigned int v22 = 4;
            goto LABEL_42;
          }
          if (*(_DWORD *)(v19 + 136) == v18)
          {
            unsigned int v22 = 5;
            goto LABEL_42;
          }
          if (*(_DWORD *)(v19 + 160) == v18)
          {
            unsigned int v22 = 6;
            goto LABEL_42;
          }
          if (*(_DWORD *)(v19 + 184) == v18)
          {
            unsigned int v22 = 7;
LABEL_42:
            ++*(void *)(v19 + 3864);
            uint64_t v23 = v21 + 24 * v22;
            *(void *)(v23 + 8) = v20;
            uint64_t v24 = *(unsigned int **)(v23 + 16);
            if (v24)
            {
LABEL_43:
              uint64_t v25 = (int *)((char *)v24 + *v24);
LABEL_57:
              uint64_t v34 = (unsigned int *)((char *)v25 + *(unsigned __int16 *)((char *)v25 - *v25 + 4));
              uint64_t v35 = (uint64_t)&v34[HIDWORD(v18)] + *v34;
              long long v36 = (int *)(v35 + 4 + *(unsigned int *)(v35 + 4));
              unsigned int v37 = (unsigned int *)((char *)v36 + *(unsigned __int16 *)((char *)v36 - *v36 + 6));
              LODWORD(v37) = *(unsigned int *)((char *)v37 + *v37) - 1;
              *(void *)&long long v164 = v167;
              *((void *)&v164 + 1) = (char *)&v167 + 8;
              long long v165 = 0u;
              v166[0] = 0u;
              LODWORD(v166[1]) = ((unint64_t)(v168 - *((void *)&v167 + 1)) >> 3) - 1;
              DWORD1(v166[1]) = v37;
              BYTE8(v166[1]) = 1;
              goto LABEL_58;
            }
          }
          else
          {
            unint64_t v26 = *(void *)(v19 + 168);
            unint64_t v27 = *(void *)(v19 + 144);
            unint64_t v28 = *(void *)(v19 + 120);
            unint64_t v29 = *(void *)(v19 + 192);
            uint64_t v24 = (unsigned int *)sub_2AB884(*(void *)v19, 1, v18, 1);
            if (v28 >= v20) {
              unint64_t v30 = v20;
            }
            else {
              unint64_t v30 = v28;
            }
            BOOL v31 = v27 >= v30;
            if (v27 < v30) {
              unint64_t v30 = v27;
            }
            unsigned int v32 = 4 * (v28 < v20);
            if (!v31) {
              unsigned int v32 = 5;
            }
            if (v26 < v30)
            {
              unsigned int v32 = 6;
              unint64_t v30 = v26;
            }
            if (v29 < v30) {
              unsigned int v32 = 7;
            }
            uint64_t v33 = v21 + 24 * v32;
            *(_DWORD *)uint64_t v33 = v197;
            *(void *)(v33 + 8) = *(void *)(v19 + 3856);
            *(void *)(v33 + 16) = v24;
            if (v24) {
              goto LABEL_43;
            }
          }
        }
        sub_296654((int **)&__p);
        uint64_t v25 = 0;
        goto LABEL_57;
      }
      if (*((void *)&v167 + 1) == v168)
      {
LABEL_35:
        memset(v166, 0, sizeof(v166));
        long long v164 = 0u;
        long long v165 = 0u;
        goto LABEL_59;
      }
      *(void *)&long long v164 = v167;
      *((void *)&v164 + 1) = (char *)&v167 + 8;
      long long v165 = 0u;
      memset(v166, 0, 25);
LABEL_58:
      sub_2E1D08((uint64_t)&v164);
LABEL_59:
      if (v169)
      {
        if (*((void *)&v167 + 1) != v168)
        {
          uint64_t v38 = v167;
          long long v162 = 0u;
          long long v163 = 0u;
          char v39 = 1;
          LODWORD(v40) = -1;
          int v41 = -1;
          goto LABEL_65;
        }
      }
      else if (*((void *)&v167 + 1) != v168)
      {
        unint64_t v42 = *(void *)(v168 - 8);
        int v43 = sub_2964C4(v167, v42, 1);
        char v39 = 0;
        long long v44 = &v43[*(unsigned __int16 *)&v43[-*(int *)v43 + 4]];
        uint64_t v45 = (uint64_t)&v44[4 * HIDWORD(v42) + *(unsigned int *)v44];
        uint64_t v46 = (int *)(v45 + 4 + *(unsigned int *)(v45 + 4));
        uint64_t v38 = v167;
        size_t v47 = (unsigned int *)((char *)v46 + *(unsigned __int16 *)((char *)v46 - *v46 + 6));
        int v41 = *(unsigned int *)((char *)v47 + *v47);
        unint64_t v40 = (unint64_t)(v168 - *((void *)&v167 + 1)) >> 3;
        long long v162 = 0u;
        long long v163 = 0u;
        goto LABEL_65;
      }
      uint64_t v38 = 0;
      LODWORD(v40) = 0;
      int v41 = 0;
      char v39 = 0;
      long long v162 = 0u;
      long long v163 = 0u;
      memset(v161, 0, 7);
LABEL_65:
      long long __p = v164;
      long long v178 = v165;
      long long v179 = v166[0];
      long long v180 = v166[1];
      uint64_t v197 = v38;
      long long v198 = v162;
      long long v199 = v163;
      uint64_t v200 = 0;
      int v201 = v40;
      int v202 = v41;
      char v203 = v39;
      *(_DWORD *)&v204[3] = *(_DWORD *)((char *)v161 + 3);
      *(_DWORD *)uint64_t v204 = v161[0];
      long long v48 = v164;
      LODWORD(v49) = v166[1];
      unsigned int v50 = DWORD1(v166[1]);
      int v158 = v40;
      if (*(void *)&v166[1] == __PAIR64__(v41, v40))
      {
        sub_6CFD9C((const void **)&v173, v156, &__p, (long long *)&v197, 0);
        goto LABEL_214;
      }
      int v157 = v41;
      char v51 = (char *)*((void *)&v165 + 1);
      uint64_t v160 = v164 + 16;
      if (!BYTE8(v166[1]))
      {
        uint64_t v159 = 0;
        while (1)
        {
          unsigned int v92 = v50 + 1;
          if (v50 + 1 >= *(_DWORD *)v51)
          {
            uint64_t v95 = **((void **)&v48 + 1);
            unint64_t v49 = (v49 + 1);
            if (v49 < (uint64_t)(*(void *)(*((void *)&v48 + 1) + 8) - **((void **)&v48 + 1)) >> 3) {
              goto LABEL_150;
            }
LABEL_148:
            unsigned int v50 = v92;
            goto LABEL_211;
          }
          uint64_t v93 = &v51[4 * v50 + 4];
          size_t v94 = &v51[4 * v92 + 4];
          if (*(unsigned __int16 *)v93 != *(unsigned __int16 *)v94) {
            goto LABEL_148;
          }
          if (*((unsigned __int16 *)v93 + 1) != *((unsigned __int16 *)v94 + 1)) {
            goto LABEL_148;
          }
          uint64_t v95 = **((void **)&v48 + 1);
          uint64_t v96 = *(void *)(*((void *)&v48 + 1) + 8) - **((void **)&v48 + 1);
          if (*(_DWORD *)v51 == 2 && v96 == 8) {
            goto LABEL_148;
          }
          unsigned int v92 = v50 + 2;
          unint64_t v49 = (v49 + 1);
          if (v49 >= v96 >> 3) {
            goto LABEL_148;
          }
          while (1)
          {
LABEL_150:
            unint64_t v97 = *(void *)(v95 + 8 * v49);
            int v207 = 1;
            v208[0] = v97;
            long long v205 = &v207;
            long long v206 = v208;
            unint64_t v98 = *(void *)(v48 + 3856) + 1;
            *(void *)(v48 + 3856) = v98;
            if (!*(void *)v48) {
              goto LABEL_160;
            }
            if (*(_DWORD *)(v48 + 112) == v97)
            {
              unsigned int v99 = 4;
              goto LABEL_159;
            }
            if (*(_DWORD *)(v48 + 136) == v97)
            {
              unsigned int v99 = 5;
              goto LABEL_159;
            }
            if (*(_DWORD *)(v48 + 160) == v97)
            {
              unsigned int v99 = 6;
              goto LABEL_159;
            }
            if (*(_DWORD *)(v48 + 184) == v97)
            {
              unsigned int v99 = 7;
LABEL_159:
              ++*(void *)(v48 + 3864);
              uint64_t v100 = v160 + 24 * v99;
              *(void *)(v100 + 8) = v98;
              if (*(void *)(v100 + 16)) {
                goto LABEL_161;
              }
LABEL_160:
              sub_296654(&v205);
              goto LABEL_161;
            }
            unint64_t v107 = *(void *)(v48 + 168);
            unint64_t v108 = *(void *)(v48 + 144);
            unint64_t v109 = *(void *)(v48 + 120);
            unint64_t v110 = *(void *)(v48 + 192);
            uint64_t v111 = sub_2AB884(*(void *)v48, 1, v97, 1);
            if (v109 >= v98) {
              unint64_t v112 = v98;
            }
            else {
              unint64_t v112 = v109;
            }
            BOOL v113 = v108 >= v112;
            if (v108 < v112) {
              unint64_t v112 = v108;
            }
            unsigned int v114 = 4 * (v109 < v98);
            if (!v113) {
              unsigned int v114 = 5;
            }
            if (v107 < v112)
            {
              unsigned int v114 = 6;
              unint64_t v112 = v107;
            }
            if (v110 < v112) {
              unsigned int v114 = 7;
            }
            uint64_t v115 = v160 + 24 * v114;
            *(_DWORD *)uint64_t v115 = v208[0];
            *(void *)(v115 + 8) = *(void *)(v48 + 3856);
            *(void *)(v115 + 16) = v111;
            if (!v111) {
              goto LABEL_160;
            }
LABEL_161:
            int v207 = 1;
            v208[0] = v97;
            long long v205 = &v207;
            long long v206 = v208;
            unint64_t v101 = *(void *)(v48 + 3856) + 1;
            *(void *)(v48 + 3856) = v101;
            if (!*(void *)v48) {
              goto LABEL_198;
            }
            if (*(_DWORD *)(v48 + 112) == v97)
            {
              unsigned int v102 = 4;
              goto LABEL_170;
            }
            if (*(_DWORD *)(v48 + 136) == v97)
            {
              unsigned int v102 = 5;
              goto LABEL_170;
            }
            if (*(_DWORD *)(v48 + 160) == v97)
            {
              unsigned int v102 = 6;
              goto LABEL_170;
            }
            if (*(_DWORD *)(v48 + 184) == v97)
            {
              unsigned int v102 = 7;
LABEL_170:
              ++*(void *)(v48 + 3864);
              uint64_t v103 = v160 + 24 * v102;
              *(void *)(v103 + 8) = v101;
              int v104 = *(unsigned int **)(v103 + 16);
              if (v104) {
                goto LABEL_171;
              }
              goto LABEL_198;
            }
            unint64_t v116 = *(void *)(v48 + 168);
            unint64_t v117 = *(void *)(v48 + 144);
            unint64_t v118 = *(void *)(v48 + 120);
            unint64_t v119 = *(void *)(v48 + 192);
            int v104 = (unsigned int *)sub_2AB884(*(void *)v48, 1, v97, 1);
            if (v118 >= v101) {
              unint64_t v120 = v101;
            }
            else {
              unint64_t v120 = v118;
            }
            BOOL v121 = v117 >= v120;
            if (v117 < v120) {
              unint64_t v120 = v117;
            }
            unsigned int v122 = 4 * (v118 < v101);
            if (!v121) {
              unsigned int v122 = 5;
            }
            if (v116 < v120)
            {
              unsigned int v122 = 6;
              unint64_t v120 = v116;
            }
            if (v119 < v120) {
              unsigned int v122 = 7;
            }
            uint64_t v123 = v160 + 24 * v122;
            *(_DWORD *)uint64_t v123 = v208[0];
            *(void *)(v123 + 8) = *(void *)(v48 + 3856);
            *(void *)(v123 + 16) = v104;
            if (v104)
            {
LABEL_171:
              long long v105 = (int *)((char *)v104 + *v104);
              long long v106 = (unsigned __int16 *)((char *)v105 - *v105);
              if (*v106 < 5u) {
                goto LABEL_201;
              }
              goto LABEL_199;
            }
LABEL_198:
            sub_296654(&v205);
            long long v105 = 0;
            long long v106 = (_WORD *)(&loc_1120530 + 1);
            if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
              goto LABEL_201;
            }
LABEL_199:
            uint64_t v124 = v106[2];
            if (!v124)
            {
LABEL_201:
              unsigned int v125 = 0;
              goto LABEL_202;
            }
            unsigned int v125 = (char *)v105 + v124 + *(unsigned int *)((char *)v105 + v124);
LABEL_202:
            unint64_t v126 = &v125[4 * HIDWORD(v97) + 4 + *(unsigned int *)&v125[4 * HIDWORD(v97) + 4]];
            double v127 = &v126[-*(int *)v126];
            if (*(unsigned __int16 *)v127 < 7u) {
              break;
            }
            uint64_t v128 = *((unsigned __int16 *)v127 + 3);
            if (!v128) {
              break;
            }
            char v51 = &v126[v128 + *(unsigned int *)&v126[v128]];
            if (*((unsigned __int16 *)v51 + 2) != *((unsigned __int16 *)v51 + 4)
              || *((unsigned __int16 *)v51 + 3) != *((unsigned __int16 *)v51 + 5))
            {
              goto LABEL_210;
            }
            unint64_t v49 = (v49 + 1);
            uint64_t v95 = **((void **)&v48 + 1);
            if (v49 >= (uint64_t)(*(void *)(*((void *)&v48 + 1) + 8) - **((void **)&v48 + 1)) >> 3)
            {
              unsigned int v50 = 2;
              goto LABEL_211;
            }
          }
          char v51 = 0;
LABEL_210:
          unsigned int v50 = 1;
LABEL_211:
          ++v159;
          if (v49 == v158 && v50 == v157) {
            goto LABEL_213;
          }
        }
      }
      uint64_t v159 = 0;
      unsigned int v52 = **((_DWORD **)&v165 + 1);
      do
      {
        unsigned int v53 = v50 - 1;
        if (v50 - 1 >= v52)
        {
          uint64_t v56 = **((void **)&v48 + 1);
          unint64_t v49 = (v49 - 1);
          if (v49 < (uint64_t)(*(void *)(*((void *)&v48 + 1) + 8) - **((void **)&v48 + 1)) >> 3) {
            goto LABEL_76;
          }
          goto LABEL_137;
        }
        char v54 = &v51[4 * v50 + 4];
        unint64_t v55 = &v51[4 * v53 + 4];
        if (*(unsigned __int16 *)v54 != *(unsigned __int16 *)v55
          || *((unsigned __int16 *)v54 + 1) != *((unsigned __int16 *)v55 + 1))
        {
          goto LABEL_137;
        }
        uint64_t v56 = **((void **)&v48 + 1);
        uint64_t v57 = *(void *)(*((void *)&v48 + 1) + 8) - **((void **)&v48 + 1);
        if (v52 == 2 && v57 == 8)
        {
          unsigned int v52 = 2;
LABEL_137:
          unsigned int v50 = v53;
          goto LABEL_138;
        }
        unsigned int v53 = v50 - 2;
        unint64_t v49 = (v49 - 1);
        if (v49 >= v57 >> 3) {
          goto LABEL_137;
        }
        do
        {
LABEL_76:
          unint64_t v58 = *(void *)(v56 + 8 * v49);
          int v207 = 1;
          v208[0] = v58;
          long long v205 = &v207;
          long long v206 = v208;
          unint64_t v59 = *(void *)(v48 + 3856) + 1;
          *(void *)(v48 + 3856) = v59;
          if (!*(void *)v48) {
            goto LABEL_86;
          }
          if (*(_DWORD *)(v48 + 112) == v58)
          {
            unsigned int v60 = 4;
            goto LABEL_85;
          }
          if (*(_DWORD *)(v48 + 136) == v58)
          {
            unsigned int v60 = 5;
            goto LABEL_85;
          }
          if (*(_DWORD *)(v48 + 160) == v58)
          {
            unsigned int v60 = 6;
            goto LABEL_85;
          }
          if (*(_DWORD *)(v48 + 184) == v58)
          {
            unsigned int v60 = 7;
LABEL_85:
            ++*(void *)(v48 + 3864);
            uint64_t v61 = v160 + 24 * v60;
            *(void *)(v61 + 8) = v59;
            if (*(void *)(v61 + 16)) {
              goto LABEL_87;
            }
LABEL_86:
            sub_296654(&v205);
            goto LABEL_87;
          }
          unint64_t v68 = *(void *)(v48 + 168);
          unint64_t v69 = *(void *)(v48 + 144);
          unint64_t v70 = *(void *)(v48 + 120);
          unint64_t v71 = *(void *)(v48 + 192);
          uint64_t v72 = sub_2AB884(*(void *)v48, 1, v58, 1);
          if (v70 >= v59) {
            unint64_t v73 = v59;
          }
          else {
            unint64_t v73 = v70;
          }
          BOOL v74 = v69 >= v73;
          if (v69 < v73) {
            unint64_t v73 = v69;
          }
          unsigned int v75 = 4 * (v70 < v59);
          if (!v74) {
            unsigned int v75 = 5;
          }
          if (v68 < v73)
          {
            unsigned int v75 = 6;
            unint64_t v73 = v68;
          }
          if (v71 < v73) {
            unsigned int v75 = 7;
          }
          uint64_t v76 = v160 + 24 * v75;
          *(_DWORD *)uint64_t v76 = v208[0];
          *(void *)(v76 + 8) = *(void *)(v48 + 3856);
          *(void *)(v76 + 16) = v72;
          if (!v72) {
            goto LABEL_86;
          }
LABEL_87:
          int v207 = 1;
          v208[0] = v58;
          long long v205 = &v207;
          long long v206 = v208;
          unint64_t v62 = *(void *)(v48 + 3856) + 1;
          *(void *)(v48 + 3856) = v62;
          if (!*(void *)v48) {
            goto LABEL_124;
          }
          if (*(_DWORD *)(v48 + 112) == v58)
          {
            unsigned int v63 = 4;
            goto LABEL_96;
          }
          if (*(_DWORD *)(v48 + 136) == v58)
          {
            unsigned int v63 = 5;
            goto LABEL_96;
          }
          if (*(_DWORD *)(v48 + 160) == v58)
          {
            unsigned int v63 = 6;
            goto LABEL_96;
          }
          if (*(_DWORD *)(v48 + 184) == v58)
          {
            unsigned int v63 = 7;
LABEL_96:
            ++*(void *)(v48 + 3864);
            uint64_t v64 = v160 + 24 * v63;
            *(void *)(v64 + 8) = v62;
            int v65 = *(unsigned int **)(v64 + 16);
            if (v65) {
              goto LABEL_97;
            }
            goto LABEL_124;
          }
          unint64_t v77 = *(void *)(v48 + 168);
          unint64_t v78 = *(void *)(v48 + 144);
          unint64_t v79 = *(void *)(v48 + 120);
          unint64_t v80 = *(void *)(v48 + 192);
          int v65 = (unsigned int *)sub_2AB884(*(void *)v48, 1, v58, 1);
          if (v79 >= v62) {
            unint64_t v81 = v62;
          }
          else {
            unint64_t v81 = v79;
          }
          BOOL v82 = v78 >= v81;
          if (v78 < v81) {
            unint64_t v81 = v78;
          }
          unsigned int v83 = 4 * (v79 < v62);
          if (!v82) {
            unsigned int v83 = 5;
          }
          if (v77 < v81)
          {
            unsigned int v83 = 6;
            unint64_t v81 = v77;
          }
          if (v80 < v81) {
            unsigned int v83 = 7;
          }
          uint64_t v84 = v160 + 24 * v83;
          *(_DWORD *)uint64_t v84 = v208[0];
          *(void *)(v84 + 8) = *(void *)(v48 + 3856);
          *(void *)(v84 + 16) = v65;
          if (v65)
          {
LABEL_97:
            uint64_t v66 = (int *)((char *)v65 + *v65);
            unint64_t v67 = (unsigned __int16 *)((char *)v66 - *v66);
            if (*v67 < 5u) {
              goto LABEL_127;
            }
            goto LABEL_125;
          }
LABEL_124:
          sub_296654(&v205);
          uint64_t v66 = 0;
          unint64_t v67 = (_WORD *)(&loc_1120530 + 1);
          if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
            goto LABEL_127;
          }
LABEL_125:
          uint64_t v85 = v67[2];
          if (!v85)
          {
LABEL_127:
            uint64_t v86 = 0;
            goto LABEL_128;
          }
          uint64_t v86 = (char *)v66 + v85 + *(unsigned int *)((char *)v66 + v85);
LABEL_128:
          uint64_t v87 = &v86[4 * HIDWORD(v58) + 4 + *(unsigned int *)&v86[4 * HIDWORD(v58) + 4]];
          unint64_t v88 = &v87[-*(int *)v87];
          if (*(unsigned __int16 *)v88 >= 7u && (uint64_t v89 = *((unsigned __int16 *)v88 + 3)) != 0) {
            char v51 = &v87[v89 + *(unsigned int *)&v87[v89]];
          }
          else {
            char v51 = 0;
          }
          unsigned int v52 = *(_DWORD *)v51;
          unsigned int v50 = *(_DWORD *)v51 - 2;
          int v90 = &v51[4 * (*(_DWORD *)v51 - 1) + 4];
          uint64_t v91 = &v51[4 * v50 + 4];
          if (*(unsigned __int16 *)v90 != *(unsigned __int16 *)v91
            || *((unsigned __int16 *)v90 + 1) != *((unsigned __int16 *)v91 + 1))
          {
            goto LABEL_138;
          }
          unint64_t v49 = (v49 - 1);
          uint64_t v56 = **((void **)&v48 + 1);
        }
        while (v49 < (uint64_t)(*(void *)(*((void *)&v48 + 1) + 8) - **((void **)&v48 + 1)) >> 3);
        unsigned int v50 = v52 - 3;
LABEL_138:
        ++v159;
      }
      while (v49 != v158 || v50 != v157);
LABEL_213:
      sub_6CFD9C((const void **)&v173, v156, &__p, (long long *)&v197, v159);
LABEL_214:
      if (*((void *)&v167 + 1))
      {
        uint64_t v168 = *((void *)&v167 + 1);
        operator delete(*((void **)&v167 + 1));
      }
      uint64_t v8 = v154;
      unint64_t v9 = v155 + 1;
      unint64_t v11 = v152;
      uint64_t v10 = v153;
    }
  }
LABEL_242:
  int v147 = sub_E124B8(2u);
  *(_DWORD *)(v7 + 40) |= 0x80u;
  *(_DWORD *)(v7 + 284) = v147;
  v186 |= 0x100000u;
  int v194 = 0;
  sub_51C5C((uint64_t)&v197);
  sub_51D74((uint64_t)&v197, (uint64_t)&__p);
  v186 |= 1u;
  uint64_t v148 = (uint64_t *)(v185 & 0xFFFFFFFFFFFFFFFCLL);
  if (v185) {
    uint64_t v148 = (uint64_t *)*v148;
  }
  sub_1881E08(v193, &__p, v148);
  if (SBYTE7(v178) < 0) {
    operator delete((void *)__p);
  }
  unint64_t v195 = (unint64_t)sub_72688((uint64_t)v196);
  *(unsigned char *)a2 = 1;
  sub_C6B2B4(a2 + 8, (uint64_t)v184);
  *(void *)(a2 + 568) = v195;
  return sub_162D64C(v184);
}

void sub_CB978C(_Unwind_Exception *a1)
{
}

void sub_CB97A0(_Unwind_Exception *a1)
{
}

void sub_CB97B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void sub_CB97D0(_Unwind_Exception *a1)
{
}

void sub_CB97E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a62 < 0)
  {
    operator delete(__p);
    sub_162D64C(&STACK[0x5B8]);
    _Unwind_Resume(a1);
  }
  sub_162D64C(&STACK[0x5B8]);
  _Unwind_Resume(a1);
}

uint64_t sub_CB998C(uint64_t a1)
{
  sub_423E54(a1 + 928);
  *(void *)(a1 + 16) = off_24397A0;
  uint64_t v2 = a1 + 920;
  do
  {
    uint64_t v3 = (void *)(v2 - 48);
    uint64_t v4 = *(void *)(v2 - 24);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = (void *)(v2 - 40);
      do
      {
        if ((*(char *)(*v3 + v6) & 0x80000000) == 0)
        {
          uint64_t v8 = *v7 + v5;
          unint64_t v9 = *(void **)(v8 + 8);
          if (v9)
          {
            *(void *)(v8 + 16) = v9;
            operator delete(v9);
            uint64_t v4 = *(void *)(v2 - 24);
          }
        }
        ++v6;
        v5 += 32;
      }
      while (v6 != v4);
      operator delete(*(void **)(v2 - 48));
      *(void *)(v2 - 48) = &unk_20E1710;
      *(void *)(v2 - 8) = 0;
      *(void *)(v2 - 32) = 0;
      *(void *)(v2 - 24) = 0;
      void *v7 = 0;
    }
    v2 -= 48;
  }
  while (v3 != (void *)(a1 + 152));
  return a1;
}

void sub_CB9A80()
{
  byte_25E182F = 1;
  word_25E1818 = 65;
  byte_25E1847 = 1;
  word_25E1830 = 65;
  char v1 = 7;
  strcpy((char *)v0, "UNKNOWN");
  int v2 = 0;
  char v4 = 14;
  strcpy((char *)v3, "ROUTES_THROUGH");
  int v5 = 1;
  char v7 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v8 = 3;
  char v10 = 11;
  strcpy((char *)v9, "ROUTES_FROM");
  int v11 = 2;
  xmmword_25E18A8 = 0u;
  *(_OWORD *)&qword_25E18B8 = 0u;
  dword_25E18C8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E18A8, (uint64_t)v0, (uint64_t)v0);
  sub_3A6EF0((uint64_t)&xmmword_25E18A8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E18A8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E18A8, (uint64_t)v9, (uint64_t)v9);
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v3[0]);
      if ((v1 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v0[0]);
      goto LABEL_5;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v4 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v1 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E185F = 8;
  strcpy((char *)&qword_25E1848, "any_mode");
  byte_25E1877 = 7;
  strcpy((char *)&dword_25E1860, "cycling");
  byte_25E188F = 7;
  strcpy((char *)&dword_25E1878, "driving");
  byte_25E18A7 = 7;
  strcpy((char *)&dword_25E1890, "walking");
}

void sub_CB9CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E18B8) {
    sub_20AF5D0((void **)qword_25E18B8);
  }
  unsigned int v37 = (void *)xmmword_25E18A8;
  *(void *)&xmmword_25E18A8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_CB9D7C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v41 = 0;
  v42[0] = &off_2439090;
  sub_3E7814(&v46, (__n128 *)&v41);
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4)
  {
    BOOL v5 = 0;
    if (v4 == 1) {
      goto LABEL_3;
    }
  }
  else
  {
    BOOL v5 = sub_DBD380(*(void *)a1);
    int v4 = *(_DWORD *)(a1 + 8);
    if (v4 == 1)
    {
LABEL_3:
      BOOL v5 = sub_DBD390(*(void *)a1);
      if (*(_DWORD *)(a1 + 8) == 2) {
        goto LABEL_7;
      }
      goto LABEL_8;
    }
  }
  if (v4 == 2) {
LABEL_7:
  }
    BOOL v5 = sub_DBD390(*(void *)a1);
LABEL_8:
  if (v5 && !sub_374EFC(*(uint64_t **)(a1 + 24)))
  {
    v38.__r_.__value_.__r.__words[0] = (std::string::size_type)"Got a request with traffic attached but this server does not allow it.";
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&v41);
      sub_188FC78(&v41, (uint64_t)"Got a request with traffic attached but this server does not allow it.", 70);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      if (SHIBYTE(v40) < 0) {
        operator delete(__p[0]);
      }
      if (v45 < 0) {
        operator delete(v44);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    uint64_t v6 = *((void *)&v47 + 1);
    if (*((void *)&v47 + 1) >= v48)
    {
      char v7 = sub_CBA6D0((char **)&v47, (const char **)&v38.__r_.__value_.__l.__data_);
    }
    else
    {
      sub_CBA850((uint64_t)&v48, *((unsigned char **)&v47 + 1), (const char **)&v38.__r_.__value_.__l.__data_);
      char v7 = (char *)(v6 + 32);
    }
    *((void *)&v47 + 1) = v7;
    v46.n128_u64[0] = 1;
    v46.n128_u64[1] = (unint64_t)&off_2439090;
    int v8 = *(unsigned __int8 *)(a1 + 16);
    int v41 = operator new(0x30uLL);
    *(_OWORD *)unint64_t v42 = xmmword_20B93B0;
    strcpy((char *)v41, "Plan.InternalError.RequestWithTrafficAttached");
    sub_710A8(v8, (uint64_t)&v41, *(void *)(a1 + 40));
    if (SHIBYTE(v42[1]) < 0) {
      operator delete(v41);
    }
  }
  int v9 = *(_DWORD *)(a1 + 8);
  switch(v9)
  {
    case 2:
      sub_D8DC18(*(void *)a1, *(void **)(a1 + 24), (__n128 *)&v41);
      sub_3E7A68((uint64_t)&v46, (uint64_t)&v41);
      BOOL v13 = (void **)v42[1];
      if (!v42[1]) {
        goto LABEL_59;
      }
      uint64_t v16 = v43;
      uint64_t v15 = v42[1];
      if (v43 == v42[1]) {
        goto LABEL_43;
      }
      do
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 4;
      }
      while (v16 != v13);
      goto LABEL_42;
    case 1:
      sub_D8F2F4(*(void *)a1, *(void **)(a1 + 24), (__n128 *)&v41);
      sub_3E7A68((uint64_t)&v46, (uint64_t)&v41);
      BOOL v13 = (void **)v42[1];
      if (!v42[1]) {
        goto LABEL_59;
      }
      uint64_t v17 = v43;
      uint64_t v15 = v42[1];
      if (v43 == v42[1]) {
        goto LABEL_43;
      }
      do
      {
        if (*((char *)v17 - 1) < 0) {
          operator delete(*(v17 - 3));
        }
        v17 -= 4;
      }
      while (v17 != v13);
      goto LABEL_42;
    case 0:
      char v10 = *(void **)a1;
      int v11 = *(void **)(a1 + 24);
      uint64_t v12 = sub_CBA62C((uint64_t *)(a1 + 32));
      sub_D8D36C(v10, v11, v12, (__n128 *)&v41);
      sub_3E7A68((uint64_t)&v46, (uint64_t)&v41);
      BOOL v13 = (void **)v42[1];
      if (!v42[1]) {
        goto LABEL_59;
      }
      unint64_t v14 = v43;
      uint64_t v15 = v42[1];
      if (v43 == v42[1]) {
        goto LABEL_43;
      }
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 4;
      }
      while (v14 != v13);
LABEL_42:
      uint64_t v15 = v42[1];
LABEL_43:
      int v43 = v13;
      operator delete(v15);
      goto LABEL_59;
  }
  unint64_t v18 = sub_69510();
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)&v41);
    unsigned int v36 = sub_69124((uint64_t)v18);
    sub_677F0(&v36, (uint64_t)&v37);
    uint64_t v19 = std::string::insert(&v37, 0, "No request validation implemented for requests of type ");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    uint64_t v21 = std::string::append(&v38, ".");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    int64_t v40 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0) {
      uint64_t v23 = __p;
    }
    else {
      uint64_t v23 = (void **)__p[0];
    }
    if (v40 >= 0) {
      uint64_t v24 = HIBYTE(v40);
    }
    else {
      uint64_t v24 = (uint64_t)__p[1];
    }
    sub_188FC78(&v41, (uint64_t)v23, v24);
    if (SHIBYTE(v40) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_53:
        if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_54:
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 3u);
          if (SHIBYTE(v40) < 0) {
            operator delete(__p[0]);
          }
          if (v45 < 0) {
            operator delete(v44);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
          goto LABEL_59;
        }
LABEL_86:
        operator delete(v37.__r_.__value_.__l.__data_);
        goto LABEL_54;
      }
    }
    else if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_53;
    }
    operator delete(v38.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_86;
  }
LABEL_59:
  uint64_t v25 = (void (***)(std::error_category *__hidden))v46.n128_u64[1];
  unsigned __int32 v26 = v46.n128_u32[0];
  if ((void (***)(std::error_category *__hidden))v46.n128_u64[1] == &off_2439090 && v46.n128_u32[0] == 5)
  {
    int v28 = *(unsigned __int8 *)(a1 + 16);
    int v41 = operator new(0x28uLL);
    *(_OWORD *)unint64_t v42 = xmmword_20B9280;
    strcpy((char *)v41, "InternalError.UnsupportedEVRequest");
    sub_710A8(v28, (uint64_t)&v41, *(void *)(a1 + 40));
    if (SHIBYTE(v42[1]) < 0) {
      operator delete(v41);
    }
    uint64_t v25 = (void (***)(std::error_category *__hidden))v46.n128_u64[1];
    unsigned __int32 v26 = v46.n128_u32[0];
  }
  if (v25 == &off_2439090 && v26 == 2)
  {
    int v29 = *(unsigned __int8 *)(a1 + 16);
    int v41 = operator new(0x20uLL);
    *(_OWORD *)unint64_t v42 = xmmword_20B9800;
    strcpy((char *)v41, "InternalError.InvalidEVRequest");
    sub_710A8(v29, (uint64_t)&v41, *(void *)(a1 + 40));
    if (SHIBYTE(v42[1]) < 0) {
      operator delete(v41);
    }
    uint64_t v25 = (void (***)(std::error_category *__hidden))v46.n128_u64[1];
    unsigned __int32 v26 = v46.n128_u32[0];
  }
  if (v25 != &off_2439090 || v26)
  {
    long long v33 = v47;
    *(__n128 *)(a2 + 8) = v46;
    unint64_t v34 = v48;
    int v35 = v49;
    *(_OWORD *)(a2 + 24) = v33;
    *(void *)(a2 + 40) = v34;
    *(_DWORD *)(a2 + 48) = v35;
    *(unsigned char *)a2 = 0;
  }
  else
  {
    unint64_t v30 = (void **)v47;
    *(unsigned char *)a2 = 1;
    if (v30)
    {
      BOOL v31 = (void **)*((void *)&v47 + 1);
      unsigned int v32 = v30;
      if (*((void ***)&v47 + 1) != v30)
      {
        do
        {
          if (*((char *)v31 - 1) < 0) {
            operator delete(*(v31 - 3));
          }
          v31 -= 4;
        }
        while (v31 != v30);
        unsigned int v32 = (void **)v47;
      }
      *((void *)&v47 + 1) = v30;
      operator delete(v32);
    }
  }
}

void sub_CBA4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a28 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a29);
    sub_C7E3C8(v29 - 128);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a29);
  sub_C7E3C8(v29 - 128);
  _Unwind_Resume(a1);
}

void sub_CBA5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_C7E3C8((uint64_t)va);
  sub_C7E3C8(v12 - 128);
  _Unwind_Resume(a1);
}

void sub_CBA5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
  {
    operator delete(__p);
    sub_C7E3C8(v25 - 128);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xCBA61CLL);
}

void sub_CBA618(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1 - 128);
  _Unwind_Resume(a1);
}

uint64_t sub_CBA62C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "Bad optional access.");
    uint64_t v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return result;
}

void sub_CBA6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_CBA6D0(char **a1, const char **a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 59) {
      sub_188D718();
    }
    int v8 = (char *)operator new(32 * v7);
  }
  else
  {
    int v8 = 0;
  }
  uint64_t v17 = &v8[32 * v3];
  unint64_t v18 = &v8[32 * v7];
  sub_CBA850((uint64_t)(a1 + 2), v17, a2);
  int v9 = v17;
  char v10 = v17 + 32;
  int v11 = *a1;
  uint64_t v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v17;
    a1[1] = v10;
    a1[2] = v18;
  }
  else
  {
    do
    {
      char v13 = *(v12 - 32);
      v12 -= 32;
      *(v9 - 32) = v13;
      v9 -= 32;
      long long v14 = *(_OWORD *)(v12 + 8);
      *((void *)v9 + 3) = *((void *)v12 + 3);
      *(_OWORD *)(v9 + 8) = v14;
      *((void *)v12 + 2) = 0;
      *((void *)v12 + 3) = 0;
      *((void *)v12 + 1) = 0;
    }
    while (v12 != v11);
    uint64_t v15 = *a1;
    uint64_t v12 = a1[1];
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v18;
    if (v12 != v15)
    {
      do
      {
        if (*(v12 - 1) < 0) {
          operator delete(*((void **)v12 - 3));
        }
        v12 -= 32;
      }
      while (v12 != v15);
      uint64_t v12 = v15;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v17 + 32;
}

void sub_CBA83C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CBA850(uint64_t a1, unsigned char *a2, const char **a3)
{
  unint64_t v4 = *a3;
  size_t v5 = strlen(*a3);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (long long *)operator new(v9 + 1);
    *((void *)&__dst + 1) = v6;
    unint64_t v13 = v10 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memmove(p_dst, v4, v6);
    *((unsigned char *)p_dst + v6) = 0;
    *a2 = 0;
    int v8 = a2 + 8;
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v13) = v5;
  p_dst = &__dst;
  if (v5) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = 0;
  int v8 = a2 + 8;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)int v8 = __dst;
    *((void *)v8 + 2) = v13;
    return;
  }
LABEL_10:
  int v11 = (void *)__dst;
  sub_4200(v8, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v11);
}

void sub_CBA96C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_CBA980()
{
  unk_25E18E7 = 16641;
  word_25E18D0 = 65;
  byte_25E18FF = 1;
  byte_25E18E9 = 0;
}

uint64_t sub_CBA9A8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 1;
  *(unsigned char *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = *(void *)sub_37D0C0(a4);
  return a1;
}

uint64_t sub_CBA9F0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 2;
  *(unsigned char *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = *(void *)sub_37D0C0(a4);
  return a1;
}

uint64_t sub_CBAA38(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = *(void *)sub_37D0C0(a4);
  return a1;
}

void sub_CBAA7C()
{
  unk_25E1917 = 16641;
  word_25E1900 = 65;
  byte_25E192F = 1;
  byte_25E1919 = 0;
}

uint64_t sub_CBAAA4(uint64_t a1, void *a2, int *a3)
{
  uint64_t v5 = sub_3757C8(a2);
  size_t v6 = sub_398020(v5, 0);
  unint64_t v7 = &v6[-*(int *)v6];
  if (*(unsigned __int16 *)v7 < 5u || (uint64_t v8 = *((unsigned __int16 *)v7 + 2)) == 0)
  {
    HIBYTE(v22) = 0;
    LOBYTE(__p) = 0;
    goto LABEL_13;
  }
  uint64_t v9 = &v6[v8];
  uint64_t v10 = *(unsigned int *)v9;
  uint64_t v12 = &v9[v10 + 4];
  size_t v11 = *(unsigned int *)&v9[v10];
  if (v11 >= 0x17)
  {
    if ((v11 | 7) == 0x17) {
      uint64_t v14 = (v11 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v14 = v11 | 7;
    }
    p_p = operator new(v14 + 1);
    *((void *)&__p + 1) = v11;
    uint64_t v22 = v14 - 0x7FFFFFFFFFFFFFFFLL;
    *(void *)&long long __p = p_p;
  }
  else
  {
    HIBYTE(v22) = *(_DWORD *)&v9[v10];
    p_p = &__p;
    if (!v11) {
      goto LABEL_12;
    }
  }
  memcpy(p_p, v12, v11);
LABEL_12:
  *((unsigned char *)p_p + v11) = 0;
LABEL_13:
  *(_DWORD *)(a1 + 40) |= 0x20u;
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t v16 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
  if (v15) {
    uint64_t v16 = (uint64_t *)*v16;
  }
  sub_1881E08((uint64_t *)(a1 + 416), &__p, v16);
  if (SHIBYTE(v22) < 0)
  {
    operator delete((void *)__p);
    *(_DWORD *)(a1 + 40) |= 0x40000u;
    uint64_t v17 = *(std::string **)(a1 + 520);
    if (v17) {
      goto LABEL_22;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 40) |= 0x40000u;
    uint64_t v17 = *(std::string **)(a1 + 520);
    if (v17) {
      goto LABEL_22;
    }
  }
  uint64_t v18 = *(void *)(a1 + 8);
  uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
  if (v18) {
    uint64_t v19 = (void *)*v19;
  }
  uint64_t v17 = (std::string *)sub_13D8EE0((uint64_t)v19);
  *(void *)(a1 + 520) = v17;
LABEL_22:
  sub_E126C8(a3, (uint64_t)&__p);
  sub_13AE040(v17, (uint64_t)&__p);
  return sub_13ADB2C(&__p);
}

void sub_CBAC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_CBAC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_CBAC5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9280;
  strcpy((char *)__p[0], "ResponseBuilderErrorHandlingModule");
  long long v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  size_t v6 = sub_374CDC(a2, (uint64_t)__p, (uint64_t *)&v47);
  uint64_t v7 = (uint64_t)v47;
  if (v47)
  {
    uint64_t v8 = v48;
    uint64_t v9 = v47;
    if ((void *)v48 != v47)
    {
      do
      {
        if (*(char *)(v8 - 1) < 0) {
          operator delete(*(void **)(v8 - 24));
        }
        v8 -= 24;
      }
      while (v8 != v7);
      uint64_t v9 = v47;
    }
    uint64_t v48 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  strcpy((char *)__p, "output_internal_errors");
  HIBYTE(__p[2]) = 22;
  BOOL v10 = sub_29D62C(v6, (uint64_t)__p);
  BOOL v11 = v10;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (!v11) {
      return;
    }
  }
  else if (!v10)
  {
    return;
  }
  memset(__p, 0, sizeof(__p));
  int v46 = 1065353216;
  *(void *)long long v44 = operator new(0x28uLL);
  *(_OWORD *)&v44[8] = xmmword_20B9960;
  strcpy(*(char **)v44, "client_prompt_error_tags_exclusion_list");
  uint64_t v12 = (uint64_t *)sub_5C4AC(v6, (uint64_t)v44);
  long long v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  sub_54DE8(&v47, *v12, v12[1], (v12[1] - *v12) >> 4);
  if ((v44[23] & 0x80000000) != 0) {
    operator delete(*(void **)v44);
  }
  uint64_t v13 = (uint64_t)v47;
  for (uint64_t i = v48; v13 != i; v13 += 16)
  {
    if (*(_DWORD *)(v13 + 8))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    v44[0] = sub_3E8978(*(void *)v13);
    sub_CBBAD8((uint64_t)__p, v44, v44);
  }
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) != &off_2439090)
  {
    char v15 = 1;
    uint64_t v16 = *(unsigned __int8 **)(a1 + 16);
    uint64_t v17 = *(unsigned __int8 **)(a1 + 24);
    if (v16 != v17) {
      goto LABEL_30;
    }
    goto LABEL_70;
  }
  if (*(_DWORD *)a1 <= 7u) {
    char v15 = (0x39u >> *(_DWORD *)a1) & 1;
  }
  else {
    char v15 = 1;
  }
  uint64_t v16 = *(unsigned __int8 **)(a1 + 16);
  uint64_t v17 = *(unsigned __int8 **)(a1 + 24);
  while (v16 != v17)
  {
LABEL_30:
    uint64_t v19 = *(_DWORD **)(a3 + 16);
    if (v19 && (uint64_t v20 = *(int *)(a3 + 8), (int)v20 < *v19))
    {
      *(_DWORD *)(a3 + 8) = v20 + 1;
      uint64_t v21 = *(void *)&v19[2 * v20 + 2];
      unint64_t v22 = *v16;
      if (*v16) {
        char v23 = v15;
      }
      else {
        char v23 = 1;
      }
      if ((v23 & 1) == 0) {
        goto LABEL_46;
      }
    }
    else
    {
      if (!*(void *)a3) {
        operator new();
      }
      void *v25 = v24;
      v25[1] = sub_3A6EDC;
      void *v24 = 0;
      v24[1] = 0;
      v24[2] = 0;
      uint64_t v21 = sub_188CDC8(a3, (uint64_t)v24);
      unint64_t v22 = *v16;
      if (*v16) {
        char v26 = v15;
      }
      else {
        char v26 = 1;
      }
      if ((v26 & 1) == 0)
      {
LABEL_46:
        if (__p[1])
        {
          uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
          v27.i16[0] = vaddlv_u8(v27);
          if (v27.u32[0] > 1uLL)
          {
            unint64_t v28 = v22;
            if (__p[1] <= (void *)v22) {
              unint64_t v28 = v22 % (unint64_t)__p[1];
            }
          }
          else
          {
            unint64_t v28 = (LODWORD(__p[1]) - 1) & v22;
          }
          uint64_t v29 = (uint64_t ***)*((void *)__p[0] + v28);
          if (v29)
          {
            unint64_t v30 = *v29;
            if (v30)
            {
              if (v27.u32[0] < 2uLL)
              {
                while (1)
                {
                  unint64_t v32 = (unint64_t)v30[1];
                  if (v32 == v22)
                  {
                    if (*((unsigned __int8 *)v30 + 16) == v22) {
                      goto LABEL_44;
                    }
                  }
                  else if ((v32 & ((unint64_t)__p[1] - 1)) != v28)
                  {
                    goto LABEL_66;
                  }
                  unint64_t v30 = (uint64_t **)*v30;
                  if (!v30) {
                    goto LABEL_66;
                  }
                }
              }
              do
              {
                unint64_t v31 = (unint64_t)v30[1];
                if (v31 == v22)
                {
                  if (*((unsigned __int8 *)v30 + 16) == v22) {
                    goto LABEL_44;
                  }
                }
                else
                {
                  if ((void *)v31 >= __p[1]) {
                    v31 %= (unint64_t)__p[1];
                  }
                  if (v31 != v28) {
                    break;
                  }
                }
                unint64_t v30 = (uint64_t **)*v30;
              }
              while (v30);
            }
          }
        }
LABEL_66:
        sub_CBB20C(v16, (uint64_t)&v43);
        long long v33 = std::string::insert(&v43, 0, "[PROMPT]");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        *(void *)&v44[16] = *((void *)&v33->__r_.__value_.__l + 2);
        *(_OWORD *)long long v44 = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(v21 + 23) < 0) {
          operator delete(*(void **)v21);
        }
        long long v35 = *(_OWORD *)v44;
        *(void *)(v21 + 16) = *(void *)&v44[16];
        *(_OWORD *)uint64_t v21 = v35;
        v44[23] = 0;
        v44[0] = 0;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        goto LABEL_29;
      }
    }
LABEL_44:
    sub_CBB20C(v16, (uint64_t)v44);
    if (*(char *)(v21 + 23) < 0) {
      operator delete(*(void **)v21);
    }
    long long v18 = *(_OWORD *)v44;
    *(void *)(v21 + 16) = *(void *)&v44[16];
    *(_OWORD *)uint64_t v21 = v18;
LABEL_29:
    v16 += 32;
  }
LABEL_70:
  uint64_t v36 = (uint64_t)v47;
  if (v47)
  {
    uint64_t v37 = v48;
    std::string v38 = v47;
    if ((void *)v48 != v47)
    {
      do
        uint64_t v37 = sub_55198(v37 - 16);
      while (v37 != v36);
      std::string v38 = v47;
    }
    uint64_t v48 = v36;
    operator delete(v38);
  }
  char v39 = __p[2];
  if (__p[2])
  {
    do
    {
      int64_t v40 = (void *)*v39;
      operator delete(v39);
      char v39 = v40;
    }
    while (v40);
  }
  int v41 = __p[0];
  __p[0] = 0;
  if (v41) {
    operator delete(v41);
  }
}

void sub_CBB17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

void sub_CBB20C(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = (char *)*a1;
  if (v4)
  {
    sub_3E8634(v4, (uint64_t)&v17);
    uint64_t v5 = std::string::append(&v17, " ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = (const std::string::value_type *)*((void *)a1 + 1);
    uint64_t v8 = a1 + 8;
    uint64_t v7 = v9;
    int v10 = (char)v8[23];
    if (v10 >= 0) {
      BOOL v11 = (const std::string::value_type *)v8;
    }
    else {
      BOOL v11 = v7;
    }
    if (v10 >= 0) {
      std::string::size_type v12 = v8[23];
    }
    else {
      std::string::size_type v12 = *((void *)v8 + 1);
    }
    uint64_t v13 = std::string::append(&v18, v11, v12);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    *(void *)(a2 + 16) = *((void *)&v13->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_14:
      operator delete(v17.__r_.__value_.__l.__data_);
      return;
    }
    operator delete(v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_14;
    }
  }
  else if ((char)a1[31] < 0)
  {
    char v15 = (void *)*((void *)a1 + 1);
    unint64_t v16 = *((void *)a1 + 2);
    sub_4200((unsigned char *)a2, v15, v16);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 8);
    *(void *)(a2 + 16) = *((void *)a1 + 3);
  }
}

void sub_CBB338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_CBB384(void **a1@<X0>, uint64_t a2@<X8>)
{
  sub_162C594(a2, 0, 0);
  sub_51C5C((uint64_t)&v34);
  sub_51D74((uint64_t)&v34, (uint64_t)&__p);
  *(_DWORD *)(a2 + 40) |= 1u;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  if (v4) {
    uint64_t v5 = (uint64_t *)*v5;
  }
  sub_1881E08((uint64_t *)(a2 + 376), &__p, v5);
  if (v30 < 0)
  {
    operator delete((void *)__p);
    uint64_t v7 = (uint64_t)a1[4];
    uint64_t v8 = (unsigned int **)(a1 + 4);
    if ((void *)v7 == a1[5]) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v7 = (uint64_t)a1[4];
    uint64_t v8 = (unsigned int **)(a1 + 4);
    if ((void *)v7 == a1[5]) {
      goto LABEL_15;
    }
  }
  if (!sub_DAA288(v7)) {
    goto LABEL_15;
  }
  uint64_t v9 = sub_3750CC(*a1);
  sub_4071CC(v9, *v8, 1u, 1000000, (uint64_t)sub_29C8, (char **)&__p);
  int v10 = (void *)__p;
  if ((void)__p == *((void *)&__p + 1))
  {
    long long v34 = 0uLL;
    uint64_t v35 = 0;
    if (!(void)__p) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  sub_3D63DC(v9, *(void *)(__p + 8), &v34);
  int v10 = (void *)__p;
  if ((void)__p)
  {
LABEL_10:
    *((void *)&__p + 1) = v10;
    operator delete(v10);
  }
LABEL_11:
  uint64_t v11 = sub_1883FB0((void *)(a2 + 16), dword_254E9B0, 11, (uint64_t)&off_252C740, 0);
  *(_DWORD *)(v11 + 16) |= 1u;
  std::string::size_type v12 = (std::string **)(v11 + 48);
  uint64_t v13 = *(void *)(v11 + 8);
  long long v14 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
  if (v13) {
    long long v14 = (uint64_t *)*v14;
  }
  sub_1881DF4(v12, &v34, v14);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
LABEL_15:
  sub_E089C0(v8, a2, v6);
  if (*((unsigned char *)a1 + 8) == 1) {
    sub_CBAAA4(a2, *a1, (int *)a1 + 5);
  }
  sub_DF90F0();
  if (*((unsigned char *)a1 + 8) == 3 || !*((unsigned char *)a1 + 8))
  {
    sub_10F5D3C((uint64_t)&__p, 0, 0);
    char v15 = sub_69510();
    unint64_t v16 = (unsigned __int8 *)sub_68E9C((uint64_t)v15);
    if (sub_51D60(v16))
    {
      uint64_t v17 = sub_68E9C((uint64_t)v15);
      long long v18 = *(_OWORD *)v17;
      uint64_t v35 = *(void *)(v17 + 16);
      long long v34 = v18;
    }
    else
    {
      sub_51C5C((uint64_t)&v34);
    }
    sub_51D74((uint64_t)&v34, (uint64_t)v26);
    v29 |= 2u;
    uint64_t v19 = (uint64_t *)(*((void *)&__p + 1) & 0xFFFFFFFFFFFFFFFCLL);
    if (BYTE8(__p)) {
      uint64_t v19 = (uint64_t *)*v19;
    }
    sub_1881E08(v31, (long long *)v26, v19);
    if (v27 < 0)
    {
      operator delete(v26[0]);
      v29 |= 0x40u;
      uint64_t v20 = v32;
      if (!v32)
      {
LABEL_28:
        uint64_t v21 = (void *)(*((void *)&__p + 1) & 0xFFFFFFFFFFFFFFFCLL);
        if (BYTE8(__p)) {
          uint64_t v21 = (void *)*v21;
        }
        uint64_t v20 = sub_147967C((uint64_t)v21);
        unint64_t v32 = v20;
      }
    }
    else
    {
      v29 |= 0x40u;
      uint64_t v20 = v32;
      if (!v32) {
        goto LABEL_28;
      }
    }
    sub_E15E68((uint64_t)&v34, (uint64_t)v20);
    int v22 = *((_DWORD *)a1 + 15) + 1;
    v29 |= 0x1000u;
    int v33 = v22;
    *(_DWORD *)(a2 + 40) |= 2u;
    uint64_t v23 = *(void *)(a2 + 8);
    uint64_t v24 = (uint64_t *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
    if (v23) {
      uint64_t v24 = (uint64_t *)*v24;
    }
    uint64_t v25 = (std::string *)sub_1880F84((void *)(a2 + 384), v24);
    sub_1880F60((uint64_t)&__p, v25);
    sub_10F6120(&__p);
  }
  if (*((unsigned char *)a1 + 56)) {
    sub_CBAC5C((uint64_t)(a1 + 30), (uint64_t)*a1, a2 + 328);
  }
  sub_DEB1B8(*a1, (double *)a1 + 36, a2);
}

void sub_CBB6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p)
  {
    operator delete(__p);
    sub_162D64C(v20);
    _Unwind_Resume(a1);
  }
  sub_162D64C(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_CBB7B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_13E6614(a2, 0, 0);
  sub_E2B34C(a2);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4 == *(void *)(a1 + 40) || !sub_DAA288(v4)) {
    goto LABEL_10;
  }
  uint64_t v5 = sub_3750CC(*(void **)a1);
  sub_4071CC(v5, *(unsigned int **)(a1 + 32), 1u, 1000000, (uint64_t)sub_29C8, (char **)&__p);
  double v6 = __p;
  if (__p == (void *)v23)
  {
    long long v27 = 0uLL;
    uint64_t v28 = 0;
    if (!__p) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  sub_3D63DC(v5, *((void *)__p + 1), &v27);
  double v6 = __p;
  if (__p)
  {
LABEL_5:
    unint64_t v23 = (unint64_t)v6;
    operator delete(v6);
  }
LABEL_6:
  uint64_t v7 = sub_1883FB0((void *)(a2 + 16), dword_254E9F0, 11, (uint64_t)&off_252C740, 0);
  *(_DWORD *)(v7 + 16) |= 1u;
  uint64_t v8 = (std::string **)(v7 + 48);
  uint64_t v9 = *(void *)(v7 + 8);
  int v10 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
  if (v9) {
    int v10 = (uint64_t *)*v10;
  }
  sub_1881DF4(v8, &v27, v10);
  if (SHIBYTE(v28) < 0) {
    operator delete((void *)v27);
  }
LABEL_10:
  sub_DFBF1C();
  sub_10F5D3C((uint64_t)&__p, 0, 0);
  uint64_t v11 = sub_69510();
  std::string::size_type v12 = (unsigned __int8 *)sub_68E9C((uint64_t)v11);
  if (sub_51D60(v12))
  {
    uint64_t v13 = sub_68E9C((uint64_t)v11);
    sub_51D74(v13, (uint64_t)&v27);
    v24 |= 2u;
    long long v14 = (uint64_t *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
    if (v23) {
      long long v14 = (uint64_t *)*v14;
    }
    sub_1881E08(v25, &v27, v14);
    if (SHIBYTE(v28) < 0) {
      operator delete((void *)v27);
    }
    uint64_t v15 = sub_68E9C((uint64_t)v11);
    v24 |= 0x40u;
    unint64_t v16 = v26;
    if (!v26)
    {
      uint64_t v17 = (void *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
      if (v23) {
        uint64_t v17 = (void *)*v17;
      }
      unint64_t v16 = sub_147967C((uint64_t)v17);
      char v26 = v16;
    }
    sub_E15E68(v15, (uint64_t)v16);
  }
  *(_DWORD *)(a2 + 40) |= 1u;
  uint64_t v18 = *(void *)(a2 + 8);
  uint64_t v19 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
  if (v18) {
    uint64_t v19 = (uint64_t *)*v19;
  }
  uint64_t v20 = (std::string *)sub_1880F84((void *)(a2 + 192), v19);
  sub_1880F60((uint64_t)&__p, v20);
  if (*(unsigned char *)(a1 + 56)) {
    sub_CBAC5C(a1 + 240, *(void *)a1, a2 + 168);
  }
  return sub_10F6120(&__p);
}

void sub_CBBA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
  {
    operator delete(__p);
    sub_13E6DAC(v10);
    _Unwind_Resume(a1);
  }
  sub_13E6DAC(v10);
  _Unwind_Resume(a1);
}

uint64_t **sub_CBBAD8(uint64_t a1, unsigned __int8 *a2, unsigned char *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            std::string::size_type v12 = v10[1];
            if (v12 == (uint64_t *)v6)
            {
              if (*((unsigned __int8 *)v10 + 16) == v6) {
                return v10;
              }
            }
            else if (((unint64_t)v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v10 = (uint64_t **)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = (unint64_t)v10[1];
          if (v11 == v6)
          {
            if (*((unsigned __int8 *)v10 + 16) == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  long long v14 = operator new(0x18uLL);
  void *v14 = 0;
  v14[1] = v6;
  *((unsigned char *)v14 + 16) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    unint64_t v6 = v3;
  }
  else
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_36;
    }
    if (prime < v7)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v7) {
LABEL_36:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        v6 %= v7;
      }
    }
    else
    {
      unint64_t v6 = (v7 - 1) & v6;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v6);
  if (v25)
  {
    void *v14 = *v25;
LABEL_59:
    void *v25 = v14;
    goto LABEL_60;
  }
  void *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    unint64_t v26 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }
    else
    {
      v26 &= v7 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return (uint64_t **)v14;
}

void sub_CBBDC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_CBBDDC()
{
  byte_25E1947 = 1;
  word_25E1930 = 65;
  byte_25E195F = 1;
  word_25E1948 = 65;
  char v1 = 7;
  strcpy((char *)v0, "UNKNOWN");
  int v2 = 0;
  char v4 = 14;
  strcpy((char *)v3, "ROUTES_THROUGH");
  int v5 = 1;
  char v7 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v8 = 3;
  char v10 = 11;
  strcpy((char *)v9, "ROUTES_FROM");
  int v11 = 2;
  xmmword_25E19C0 = 0u;
  *(_OWORD *)&qword_25E19D0 = 0u;
  dword_25E19E0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E19C0, (uint64_t)v0, (uint64_t)v0);
  sub_3A6EF0((uint64_t)&xmmword_25E19C0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E19C0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E19C0, (uint64_t)v9, (uint64_t)v9);
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v3[0]);
      if ((v1 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v0[0]);
      goto LABEL_5;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v4 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v1 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E1977 = 8;
  strcpy((char *)&qword_25E1960, "any_mode");
  byte_25E198F = 7;
  strcpy((char *)&dword_25E1978, "cycling");
  byte_25E19A7 = 7;
  strcpy((char *)&dword_25E1990, "driving");
  byte_25E19BF = 7;
  strcpy((char *)&dword_25E19A8, "walking");
}

void sub_CBC038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E19D0) {
    sub_20AF614((void **)qword_25E19D0);
  }
  uint64_t v37 = (void *)xmmword_25E19C0;
  *(void *)&xmmword_25E19C0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void *sub_CBC0D8(void *result)
{
  uint64_t v1 = result[260];
  if (v1)
  {
    int v2 = result;
    sub_E2C138(v10, (void *)result[165], (uint64_t)(result + 143));
    unint64_t v3 = (uint64_t *)*v2;
    unsigned int v4 = *((unsigned __int8 *)v2 + 2108);
    sub_37B34C((void *)v2[165], (uint64_t)&v9);
    if (v2[270])
    {
      uint64_t v5 = sub_CBE2A4(v2 + 270);
      long long __p = 0;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      sub_CBE348((uint64_t)&__p, *(void *)(v5 + 256), *(void *)(v5 + 264), (uint64_t)(*(void *)(v5 + 264) - *(void *)(v5 + 256)) >> 5);
    }
    else
    {
      long long __p = 0;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
    }
    sub_E2CA98(v10, v3, v4, v2 + 166, &v9, (int **)&__p, v1);
    if (__p)
    {
      sub_C5C1FC((uint64_t)&__p, (uint64_t)__p);
      operator delete(__p);
    }
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
    sub_E2CE94((uint64_t)v10, v1);
    return sub_C6B354(v10);
  }
  return result;
}

void sub_CBC1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
}

void sub_CBC21C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v40);
  sub_E2A410(a1, (uint64_t)v38);
  uint64_t v4 = *(void *)(a1 + 2080);
  if (v4)
  {
    if (*(_DWORD *)sub_486CB4(*(void *)(a1 + 2080)) == 1 && *(unsigned char *)(a1 + 2116) != 0)
    {
      int v36 = *(_DWORD *)(a1 + 2112);
      char v37 = 1;
      sub_487704(v4, (uint64_t)&v36);
    }
    sub_486CBC(v4);
    sub_486CE4(v4);
  }
  *(unsigned char *)a2 = 1;
  bzero((void *)(a2 + 8), 0x488uLL);
  sub_162C594(a2 + 8, 0, 0);
  sub_162C594(a2 + 568, 0, 0);
  *(unsigned char *)(a2 + 1160) = 0;
  *(_OWORD *)(a2 + 1144) = 0u;
  *(_OWORD *)(a2 + 1128) = 0u;
  sub_E2957C(a1, a2 + 1128, (uint64_t *)v41);
  if ((void **)(a2 + 8) != v41)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    if ((v6 & 2) != 0)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        uint64_t v7 = (void *)*v7;
      }
    }
    if (((uint64_t)v41[1] & 2) != 0)
    {
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = (void *)((unint64_t)v41[1] & 0xFFFFFFFFFFFFFFFCLL);
      if ((uint64_t)v41[1]) {
        uint64_t v8 = (void *)*v8;
      }
    }
    if (v7 == v8) {
      sub_16323C4(a2 + 8, (uint64_t)v41);
    }
    else {
      sub_1632068(a2 + 8, (uint64_t)v41);
    }
  }
  sub_162D64C(v41);
  sub_E2B274(a2 + 8);
  uint64_t v9 = *(void *)(a1 + 2080);
  if (v9)
  {
    sub_E2D154(v41, *(void **)(a1 + 1320), a1 + 1144);
    char v10 = *(uint64_t **)a1;
    unsigned int v11 = *(unsigned __int8 *)(a1 + 2108);
    sub_37B34C(*(void **)(a1 + 1320), (uint64_t)&v35);
    if (*(void *)(a1 + 2160))
    {
      uint64_t v12 = sub_CBE2A4((uint64_t *)(a1 + 2160));
      long long __p = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      sub_CBE348((uint64_t)&__p, *(void *)(v12 + 256), *(void *)(v12 + 264), (uint64_t)(*(void *)(v12 + 264) - *(void *)(v12 + 256)) >> 5);
    }
    else
    {
      long long __p = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
    }
    sub_E2DA04((uint64_t *)v41, v10, v11, (uint64_t *)(a1 + 1328), &v35, (int **)&__p, v9);
    if (__p)
    {
      sub_C5C1FC((uint64_t)&__p, (uint64_t)__p);
      operator delete(__p);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    sub_E2CE94((uint64_t)v41, v9);
    sub_CBE8B4(v41);
  }
  sub_48381C((uint64_t)v41, a1 + 1328);
  sub_48381C((uint64_t)v44, a1 + 1704);
  sub_483E44(&v35, (uint64_t)v41, 2uLL);
  sub_E089C0(&v35, a2 + 8, v13);
  std::string::size_type v14 = v35.__r_.__value_.__r.__words[0];
  if (v35.__r_.__value_.__r.__words[0])
  {
    std::string::size_type size = v35.__r_.__value_.__l.__size_;
    float v16 = (void *)v35.__r_.__value_.__r.__words[0];
    if (v35.__r_.__value_.__l.__size_ != v35.__r_.__value_.__r.__words[0])
    {
      do
        std::string::size_type size = sub_402C7C(size - 376);
      while (size != v14);
      float v16 = (void *)v35.__r_.__value_.__r.__words[0];
    }
    v35.__r_.__value_.__l.__size_ = v14;
    operator delete(v16);
  }
  sub_402C7C((uint64_t)v44);
  sub_402C7C((uint64_t)v41);
  *((unsigned char *)&v35.__r_.__value_.__s + 23) = 19;
  strcpy((char *)&v35, "populate_debug_data");
  if (sub_29D62C(v38, (uint64_t)&v35))
  {
    sub_54214((uint64_t)v41, a1 + 2192);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_36;
    }
  }
  else
  {
    *(_OWORD *)int v41 = 0u;
    long long v42 = 0u;
    int v43 = 1065353216;
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_36;
    }
  }
  operator delete(v35.__r_.__value_.__l.__data_);
LABEL_36:
  sub_3CB9F8(*(void **)(a1 + 1320), (long long **)(a1 + 2136), (uint64_t)v41);
  if (*(unsigned char *)(a1 + 1312))
  {
    sub_E2B65C(*(_DWORD *)(a1 + 2096), (uint64_t)v41);
    sub_58E3C((uint64_t)v41);
    *(_DWORD *)(a2 + 48) |= 8u;
    uint64_t v17 = *(void *)(a2 + 16);
    unint64_t v18 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
    if (v17) {
      unint64_t v18 = (uint64_t *)*v18;
    }
    unint64_t v19 = sub_1880F84((void *)(a2 + 408), v18);
    uint64_t v20 = v19;
    if (*((char *)v19 + 23) < 0) {
      operator delete((void *)*v19);
    }
    long long v21 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
    v20[2] = v35.__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v20 = v21;
  }
  uint64_t v22 = *(void *)(a1 + 2080);
  if (v22)
  {
    int v23 = *(unsigned __int8 *)(a1 + 2108) - 5 < 2 || sub_486A4C(*(void *)(a1 + 2080)) == 1;
    sub_486A54(v22, v23);
    sub_E2B424(v22, a2 + 8);
    unint64_t v24 = *(void *)(a2 + 392) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v24 + 23) < 0) {
      uint64_t v25 = *(void *)(v24 + 8);
    }
    else {
      uint64_t v25 = *(unsigned __int8 *)(v24 + 23);
    }
    *(void *)(a2 + 1152) = v25;
  }
  sub_E2A07C(a1, a2 + 8);
  sub_DEB1B8(*(void **)(a1 + 1320), (double *)(a1 + 2168), a2 + 8);
  *(void *)(a2 + 1128) = vcvtad_u64_f64(sub_72688((uint64_t)v40));
  unint64_t v26 = (void **)v42;
  if ((void)v42)
  {
    do
    {
      char v30 = (void **)*v26;
      sub_55198((uint64_t)(v26 + 5));
      if (*((char *)v26 + 39) < 0) {
        operator delete(v26[2]);
      }
      operator delete(v26);
      unint64_t v26 = v30;
    }
    while (v30);
  }
  long long v27 = v41[0];
  v41[0] = 0;
  if (v27) {
    operator delete(v27);
  }
  uint64_t v28 = v39;
  if (v39)
  {
    do
    {
      unint64_t v31 = (void **)*v28;
      sub_55198((uint64_t)(v28 + 5));
      if (*((char *)v28 + 39) < 0) {
        operator delete(v28[2]);
      }
      operator delete(v28);
      uint64_t v28 = v31;
    }
    while (v31);
  }
  int v29 = v38[0];
  v38[0] = 0;
  if (v29) {
    operator delete(v29);
  }
}

void sub_CBC71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_5450C((uint64_t)&a28);
  sub_CBC8A8(v28);
  sub_5450C((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_CBC8A8(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    sub_162D64C(a1 + 568);
    sub_162D64C(a1 + 8);
    return a1;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 24);
  if (v4 != v3)
  {
    do
    {
      if (*(char *)(v4 - 1) < 0) {
        operator delete(*(void **)(v4 - 24));
      }
      v4 -= 32;
    }
    while (v4 != v3);
    uint64_t v5 = *(void **)(a1 + 24);
  }
  *(void *)(a1 + 32) = v3;
  operator delete(v5);
  return a1;
}

void sub_CBC94C(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v85);
  sub_E2A89C((uint64_t)a1, (uint64_t)v83);
  uint64_t v4 = (uint64_t)a1[260];
  if (v4)
  {
    if (*(_DWORD *)sub_486CB4((uint64_t)a1[260]) == 1 && *((unsigned char *)a1 + 2116) != 0)
    {
      int v81 = *((_DWORD *)a1 + 528);
      char v82 = 1;
      sub_487704(v4, (uint64_t)&v81);
    }
    sub_486CBC(v4);
    sub_486CE4(v4);
    if (*(_DWORD *)(sub_486CB4(v4) + 152) == 0x7FFFFFFF)
    {
      int v6 = *((_DWORD *)a1 + 525);
      *(_DWORD *)(sub_486CB4(v4) + 152) = v6;
    }
    uint64_t v7 = sub_486CB4(v4);
    sub_CBD880((char *)a1, v83, (char **)(v7 + 160));
  }
  *(unsigned char *)a2 = 1;
  bzero((void *)(a2 + 8), 0x488uLL);
  sub_162C594(a2 + 8, 0, 0);
  sub_162C594(a2 + 568, 0, 0);
  *(unsigned char *)(a2 + 1160) = 0;
  *(_OWORD *)(a2 + 1144) = 0u;
  *(_OWORD *)(a2 + 1128) = 0u;
  sub_E29978((uint64_t)a1, a2 + 1128, (uint64_t *)__p);
  if ((void **)(a2 + 8) != __p)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    if ((v8 & 2) != 0)
    {
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
      if (v8) {
        uint64_t v9 = (void *)*v9;
      }
    }
    if (((uint64_t)__p[1] & 2) != 0)
    {
      char v10 = 0;
    }
    else
    {
      char v10 = (void *)((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFFCLL);
      if ((uint64_t)__p[1]) {
        char v10 = (void *)*v10;
      }
    }
    if (v9 == v10) {
      sub_16323C4(a2 + 8, (uint64_t)__p);
    }
    else {
      sub_1632068(a2 + 8, (uint64_t)__p);
    }
  }
  sub_162D64C(__p);
  sub_E2B274(a2 + 8);
  sub_CBC0D8(a1);
  sub_E089C0(a1[261], a2 + 8, v11);
  if (!*((unsigned char *)a1 + 1176))
  {
    uint64_t v12 = (uint64_t *)sub_374EF4(a1[165]);
    sub_E08D74(v12, *((_DWORD *)a1 + 301), a2 + 8);
  }
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "populate_debug_data");
  if (sub_29D62C(v83, (uint64_t)__p))
  {
    sub_54214((uint64_t)&v78, (uint64_t)(a1 + 274));
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_26;
    }
  }
  else
  {
    long long v78 = 0u;
    long long v79 = 0u;
    int v80 = 1065353216;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_26;
    }
  }
  operator delete(__p[0]);
LABEL_26:
  sub_3CB9F8(a1[165], (long long **)a1 + 267, (uint64_t)&v78);
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "DrivingPathFindingModule");
  if (sub_58070(&v78, (uint64_t)__p))
  {
    *(void *)std::string __str = operator new(0x20uLL);
    *(_OWORD *)&__str[8] = xmmword_20B91C0;
    strcpy(*(char **)__str, "DrivingPathFindingModule");
    double v13 = (void *)sub_560F4(&v78, (uint64_t)__str);
    HIBYTE(v77[2]) = 9;
    strcpy((char *)v77, "PathGraph");
    if (sub_58070(v13, (uint64_t)v77)) {
      BOOL v14 = *(_DWORD *)(a2 + 296) == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    if (SHIBYTE(v77[2]) < 0)
    {
      operator delete(v77[0]);
      if ((__str[23] & 0x80000000) == 0)
      {
LABEL_35:
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
          goto LABEL_36;
        }
LABEL_41:
        operator delete(__p[0]);
        if (!v15) {
          goto LABEL_89;
        }
        goto LABEL_42;
      }
    }
    else if ((__str[23] & 0x80000000) == 0)
    {
      goto LABEL_35;
    }
    operator delete(*(void **)__str);
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_41;
    }
  }
  else
  {
    int v15 = 0;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_41;
    }
  }
LABEL_36:
  if (!v15)
  {
LABEL_89:
    if (!*((unsigned char *)a1 + 1312)) {
      goto LABEL_143;
    }
    goto LABEL_90;
  }
LABEL_42:
  memset(__str, 0, 24);
  *(void *)uint64_t v76 = operator new(0x20uLL);
  *(_OWORD *)&v76[8] = xmmword_20B91C0;
  strcpy(*(char **)v76, "DrivingPathFindingModule");
  float v16 = (void *)sub_560F4(&v78, (uint64_t)v76);
  char v75 = 9;
  strcpy((char *)v74, "PathGraph");
  memset(__p, 0, sizeof(__p));
  int v70 = 1065353216;
  uint64_t v17 = sub_58070(v16, (uint64_t)v74);
  if (v17 && *((_DWORD *)v17 + 12) == 2) {
    unint64_t v18 = (void **)v17[5];
  }
  else {
    unint64_t v18 = __p;
  }
  sub_58E3C((uint64_t)v18);
  unint64_t v19 = (void **)__p[2];
  if (__p[2])
  {
    do
    {
      char v30 = (void **)*v19;
      sub_55198((uint64_t)(v19 + 5));
      if (*((char *)v19 + 39) < 0) {
        operator delete(v19[2]);
      }
      operator delete(v19);
      unint64_t v19 = v30;
    }
    while (v30);
  }
  uint64_t v20 = __p[0];
  __p[0] = 0;
  if (v20) {
    operator delete(v20);
  }
  if (v75 < 0)
  {
    operator delete(v74[0]);
    if ((v76[23] & 0x80000000) == 0) {
      goto LABEL_51;
    }
  }
  else if ((v76[23] & 0x80000000) == 0)
  {
    goto LABEL_51;
  }
  operator delete(*(void **)v76);
LABEL_51:
  HIBYTE(__p[2]) = 9;
  strcpy((char *)__p, "PathGraph");
  sub_DEC744((uint64_t *)__str, (uint64_t)v77, (uint64_t)__p, 0x63u, 0, 0, 0.0);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  long long v21 = (std::string *)sub_1884274((uint64_t **)(*(void *)(*(void *)(*(void *)(*(void *)(a2 + 304) + 8) + 64) + 8)+ 16), dword_254EA30, 11, (uint64_t)&off_252CDD0, 0);
  sub_DEC8F0((char **)__str, (uint64_t)__p);
  sub_11B9D5C(v21, (uint64_t)__p[0]);
  uint64_t v22 = (char *)__p[0];
  if (__p[0])
  {
    int v23 = (char *)__p[1];
    unint64_t v24 = __p[0];
    if (__p[1] != __p[0])
    {
      do
        int v23 = (char *)sub_11B9574(v23 - 48);
      while (v23 != v22);
      unint64_t v24 = __p[0];
    }
    __p[1] = v22;
    operator delete(v24);
  }
  *(void *)uint64_t v76 = operator new(0x20uLL);
  *(_OWORD *)&v76[8] = xmmword_20B91C0;
  strcpy(*(char **)v76, "DrivingPathFindingModule");
  uint64_t v25 = (void *)sub_55FA4(&v78, (uint64_t)v76);
  char v75 = 9;
  strcpy((char *)v74, "PathGraph");
  unint64_t v26 = sub_57E40(v25, (uint64_t)v74);
  if (v26)
  {
    sub_256F0(v25, v26, (uint64_t)__p);
    long long v27 = (void **)__p[0];
    __p[0] = 0;
    if (v27)
    {
      if (LOBYTE(__p[2]))
      {
        sub_55198((uint64_t)(v27 + 5));
        if (*((char *)v27 + 39) < 0) {
          operator delete(v27[2]);
        }
      }
      operator delete(v27);
    }
  }
  if (v75 < 0)
  {
    operator delete(v74[0]);
    if ((v76[23] & 0x80000000) == 0)
    {
LABEL_66:
      if ((SHIBYTE(v77[2]) & 0x80000000) == 0) {
        goto LABEL_67;
      }
LABEL_88:
      operator delete(v77[0]);
      uint64_t v28 = *(void ***)__str;
      if (!*(void *)__str) {
        goto LABEL_89;
      }
      goto LABEL_68;
    }
  }
  else if ((v76[23] & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(*(void **)v76);
  if (SHIBYTE(v77[2]) < 0) {
    goto LABEL_88;
  }
LABEL_67:
  uint64_t v28 = *(void ***)__str;
  if (!*(void *)__str) {
    goto LABEL_89;
  }
LABEL_68:
  int v29 = *(void ***)&__str[8];
  if (*(void ***)&__str[8] == v28)
  {
    *(void *)&__str[8] = v28;
    operator delete(v28);
    if (!*((unsigned char *)a1 + 1312)) {
      goto LABEL_143;
    }
    goto LABEL_90;
  }
  do
  {
    while (*((char *)v29 - 25) < 0)
    {
      operator delete(*(v29 - 6));
      if (*((char *)v29 - 49) < 0) {
        goto LABEL_78;
      }
LABEL_75:
      v29 -= 10;
      if (v29 == v28) {
        goto LABEL_79;
      }
    }
    if ((*((char *)v29 - 49) & 0x80000000) == 0) {
      goto LABEL_75;
    }
LABEL_78:
    operator delete(*(v29 - 9));
    v29 -= 10;
  }
  while (v29 != v28);
LABEL_79:
  *(void *)&__str[8] = v28;
  operator delete(*(void **)__str);
  if (!*((unsigned char *)a1 + 1312))
  {
LABEL_143:
    unint64_t v55 = (uint64_t *)(a1 + 260);
    if (a1[260]) {
      goto LABEL_144;
    }
    goto LABEL_148;
  }
LABEL_90:
  uint64_t v31 = **a1;
  uint64_t v32 = (*a1)[1];
  if (v31 == v32)
  {
    char v35 = 1;
  }
  else
  {
    do
    {
      BOOL v33 = sub_647280(v31);
      v31 += 7560;
    }
    while (v31 != v32 && v33);
    char v35 = !v33;
  }
  int v36 = a1[165];
  memset(__str, 0, 24);
  sub_62B9C4((int)__p, (int)v36, 0, 0, (std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__str);
    if (v73) {
      char v38 = v35;
    }
    else {
      char v38 = 1;
    }
    if ((v38 & 1) == 0) {
      goto LABEL_107;
    }
  }
  else
  {
    if (v73) {
      char v37 = v35;
    }
    else {
      char v37 = 1;
    }
    if (v37) {
      goto LABEL_119;
    }
LABEL_107:
    memset(__str, 0, sizeof(__str));
    int v68 = 1065353216;
    HIBYTE(v77[2]) = 14;
    strcpy((char *)v77, "GuidanceModule");
    char v39 = sub_58070(a1 + 274, (uint64_t)v77);
    if (v39 && *((_DWORD *)v39 + 12) == 2) {
      int64_t v40 = (unsigned char *)v39[5];
    }
    else {
      int64_t v40 = __str;
    }
    v76[23] = 14;
    strcpy(v76, "GuidanceModule");
    v74[0] = (long long *)v76;
    int v41 = sub_8FFD4((uint64_t)&v78, (uint64_t)v76, (uint64_t)&unk_20F06E0, v74);
    sub_39BA44(*((_DWORD *)v41 + 12), (void ***)v41 + 5, (uint64_t)v40);
    *((_DWORD *)v41 + 12) = 2;
    if ((v76[23] & 0x80000000) == 0)
    {
      if ((SHIBYTE(v77[2]) & 0x80000000) == 0) {
        goto LABEL_113;
      }
LABEL_116:
      operator delete(v77[0]);
      long long v42 = *(void ***)&__str[16];
      if (!*(void *)&__str[16]) {
        goto LABEL_117;
      }
      do
      {
LABEL_124:
        char v45 = (void **)*v42;
        sub_55198((uint64_t)(v42 + 5));
        if (*((char *)v42 + 39) < 0) {
          operator delete(v42[2]);
        }
        operator delete(v42);
        long long v42 = v45;
      }
      while (v45);
      goto LABEL_117;
    }
    operator delete(*(void **)v76);
    if (SHIBYTE(v77[2]) < 0) {
      goto LABEL_116;
    }
LABEL_113:
    long long v42 = *(void ***)&__str[16];
    if (*(void *)&__str[16]) {
      goto LABEL_124;
    }
LABEL_117:
    int v43 = *(void **)__str;
    *(void *)std::string __str = 0;
    if (v43) {
      operator delete(v43);
    }
  }
LABEL_119:
  __str[23] = 17;
  strcpy(__str, "RequestLatency_ms");
  if (sub_58070(&v78, (uint64_t)__str))
  {
    BOOL v44 = 0;
    if ((__str[23] & 0x80000000) != 0) {
      goto LABEL_121;
    }
LABEL_128:
    if (v44) {
      goto LABEL_129;
    }
LABEL_131:
    uint64_t v47 = **a1;
    uint64_t v48 = (*a1)[1];
    if (v47 != v48) {
      goto LABEL_132;
    }
  }
  else
  {
    HIBYTE(v77[2]) = 17;
    strcpy((char *)v77, "RequestLatency_ms");
    BOOL v44 = sub_58070(a1 + 274, (uint64_t)v77) != 0;
    if (SHIBYTE(v77[2]) < 0)
    {
      operator delete(v77[0]);
      if ((__str[23] & 0x80000000) == 0) {
        goto LABEL_128;
      }
    }
    else if ((__str[23] & 0x80000000) == 0)
    {
      goto LABEL_128;
    }
LABEL_121:
    operator delete(*(void **)__str);
    if (!v44) {
      goto LABEL_131;
    }
LABEL_129:
    HIBYTE(v66[2]) = 17;
    strcpy((char *)v66, "RequestLatency_ms");
    __str[23] = 17;
    strcpy(__str, "RequestLatency_ms");
    int v46 = sub_5D58C(a1 + 274, (uint64_t)__str);
    sub_54A68((uint64_t)&v86, (uint64_t)v46);
    sub_59D18((uint64_t)&v78, (uint64_t)v66, (uint64_t)&v86);
    sub_5521C((uint64_t *)v87, &v86);
    if ((__str[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__str);
      if ((SHIBYTE(v66[2]) & 0x80000000) == 0) {
        goto LABEL_131;
      }
    }
    else if ((SHIBYTE(v66[2]) & 0x80000000) == 0)
    {
      goto LABEL_131;
    }
    operator delete(v66[0]);
    uint64_t v47 = **a1;
    uint64_t v48 = (*a1)[1];
    if (v47 != v48)
    {
LABEL_132:
      while (sub_6478D8(v47) != 1)
      {
        v47 += 7560;
        if (v47 == v48) {
          goto LABEL_139;
        }
      }
      __str[23] = 15;
      strcpy(__str, "BiasedMainRoute");
      v77[0] = (long long *)__str;
      uint64_t v49 = sub_8FFD4((uint64_t)&v78, (uint64_t)__str, (uint64_t)&unk_20F06E0, v77);
      sub_CBEE6C(*((unsigned int *)v49 + 12), (void ***)v49 + 5);
      *((_DWORD *)v49 + 12) = 4;
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
    }
  }
LABEL_139:
  sub_E2B65C(*((_DWORD *)a1 + 524), (uint64_t)&v78);
  sub_58E3C((uint64_t)&v78);
  *(_DWORD *)(a2 + 48) |= 8u;
  uint64_t v50 = *(void *)(a2 + 16);
  char v51 = (uint64_t *)(v50 & 0xFFFFFFFFFFFFFFFCLL);
  if (v50) {
    char v51 = (uint64_t *)*v51;
  }
  unsigned int v52 = sub_1880F84((void *)(a2 + 408), v51);
  unsigned int v53 = v52;
  if (*((char *)v52 + 23) < 0)
  {
    operator delete((void *)*v52);
    long long v65 = *(_OWORD *)__str;
    v53[2] = *(void *)&__str[16];
    *(_OWORD *)unsigned int v53 = v65;
    if ((v72 & 0x80000000) == 0) {
      goto LABEL_143;
    }
  }
  else
  {
    long long v54 = *(_OWORD *)__str;
    v52[2] = *(void *)&__str[16];
    *(_OWORD *)unsigned int v52 = v54;
    if ((v72 & 0x80000000) == 0) {
      goto LABEL_143;
    }
  }
  operator delete(v71);
  unint64_t v55 = (uint64_t *)(a1 + 260);
  if (a1[260])
  {
LABEL_144:
    uint64_t v56 = sub_CBEA50(v55);
    sub_E2B424(v56, a2 + 8);
    unint64_t v57 = *(void *)(a2 + 392) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v57 + 23) < 0) {
      uint64_t v58 = *(void *)(v57 + 8);
    }
    else {
      uint64_t v58 = *(unsigned __int8 *)(v57 + 23);
    }
    *(void *)(a2 + 1152) = v58;
  }
LABEL_148:
  *(unsigned char *)(a2 + 1160) = *(_DWORD *)(a2 + 136) != 0;
  sub_E2A508((uint64_t)a1, a2 + 8);
  sub_DEB1B8(a1[165], (double *)a1 + 271, a2 + 8);
  *(void *)(a2 + 1128) = vcvtad_u64_f64(sub_72688((uint64_t)v85));
  unint64_t v59 = (void **)v79;
  if ((void)v79)
  {
    do
    {
      unsigned int v63 = (void **)*v59;
      sub_55198((uint64_t)(v59 + 5));
      if (*((char *)v59 + 39) < 0) {
        operator delete(v59[2]);
      }
      operator delete(v59);
      unint64_t v59 = v63;
    }
    while (v63);
  }
  unsigned int v60 = (void *)v78;
  *(void *)&long long v78 = 0;
  if (v60) {
    operator delete(v60);
  }
  uint64_t v61 = v84;
  if (v84)
  {
    do
    {
      uint64_t v64 = (void **)*v61;
      sub_55198((uint64_t)(v61 + 5));
      if (*((char *)v61 + 39) < 0) {
        operator delete(v61[2]);
      }
      operator delete(v61);
      uint64_t v61 = v64;
    }
    while (v64);
  }
  unint64_t v62 = (void *)v83[0];
  v83[0] = 0;
  if (v62) {
    operator delete(v62);
  }
}

void sub_CBD578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v23 - 233) < 0) {
    operator delete(*(void **)(v23 - 256));
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x7F7]) < 0) {
    operator delete((void *)STACK[0x7E0]);
  }
  sub_5450C(v23 - 224);
  sub_CBC8A8(v22);
  sub_5450C(v23 - 176);
  _Unwind_Resume(a1);
}

char *sub_CBD880(char *result, void *a2, char **a3)
{
  uint64_t v15 = *((void *)result + 265);
  int v16 = *((_DWORD *)result + 532);
  if (*((_DWORD *)result + 530) != -1 || *((_DWORD *)result + 531) != -1)
  {
    int v6 = result;
    uint64_t result = (char *)sub_DE7FB0(result[2108]);
    if (result)
    {
      HIBYTE(__p[2]) = 21;
      strcpy((char *)__p, "max_reroute_info_size");
      unsigned int v7 = sub_31AC04(a2, (uint64_t)__p);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v8 = *a3;
      uint64_t v9 = a3[1];
      if (0x6DB6DB6DB6DB6DB7 * ((v9 - *a3) >> 3) >= (unint64_t)v7)
      {
        if (v8 + 56 != v9)
        {
          uint64_t v10 = 0;
          do
          {
            double v11 = &v8[v10];
            char *v11 = v8[v10 + 56];
            *(_OWORD *)(v11 + 8) = *(_OWORD *)&v8[v10 + 64];
            *((void *)v11 + 3) = *(void *)&v8[v10 + 80];
            *((_DWORD *)v11 + 8) = *(_DWORD *)&v8[v10 + 88];
            *(_OWORD *)(v11 + 36) = *(_OWORD *)&v8[v10 + 92];
            *((_DWORD *)v11 + 13) = *(_DWORD *)&v8[v10 + 108];
            v10 += 56;
          }
          while (&v8[v10 + 56] != v9);
          v8 += v10;
        }
        a3[1] = v8;
      }
      uint64_t v12 = sub_6467E8(**(void ***)v6, 0);
      *(_OWORD *)long long __p = *(_OWORD *)(v12 + 11096);
      __p[2] = *(void **)(v12 + 11112);
      int v13 = *((_DWORD *)v6 + 525);
      return sub_CBEC90(a3, (long long *)__p, &v15, &v13, v6 + 2109, (uint64_t *)v6 + 279);
    }
  }
  return result;
}

void sub_CBD9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **sub_CBDA18(void **a1)
{
  int v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_11B9574(v3 - 48);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_CBDA74(void **a1)
{
  int v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 25) < 0)
      {
        operator delete(*(v3 - 6));
        if (*((char *)v3 - 49) < 0) {
LABEL_9:
        }
          operator delete(*(v3 - 9));
      }
      else if (*((char *)v3 - 49) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 10;
      if (v3 == v2)
      {
        uint64_t v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void sub_CBDB04(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v34);
  sub_E2AD28(a1, (uint64_t)v32);
  *(unsigned char *)a2 = 1;
  bzero((void *)(a2 + 8), 0x488uLL);
  sub_162C594(a2 + 8, 0, 0);
  sub_162C594(a2 + 568, 0, 0);
  *(unsigned char *)(a2 + 1160) = 0;
  *(_OWORD *)(a2 + 1144) = 0u;
  *(_OWORD *)(a2 + 1128) = 0u;
  sub_E29C80(a1, a2 + 1128, (uint64_t *)v35);
  if ((void **)(a2 + 8) != v35)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if ((v4 & 2) != 0)
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      if (v4) {
        uint64_t v5 = (void *)*v5;
      }
    }
    if (((uint64_t)v35[1] & 2) != 0)
    {
      int v6 = 0;
    }
    else
    {
      int v6 = (void *)((unint64_t)v35[1] & 0xFFFFFFFFFFFFFFFCLL);
      if ((uint64_t)v35[1]) {
        int v6 = (void *)*v6;
      }
    }
    if (v5 == v6) {
      sub_16323C4(a2 + 8, (uint64_t)v35);
    }
    else {
      sub_1632068(a2 + 8, (uint64_t)v35);
    }
  }
  sub_162D64C(v35);
  sub_E2B274(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 2080);
  if (v7)
  {
    sub_E2E038(v35, *(void **)(a1 + 1320), a1 + 1144);
    uint64_t v8 = *(uint64_t **)a1;
    unsigned int v9 = *(unsigned __int8 *)(a1 + 2108);
    sub_37B34C(*(void **)(a1 + 1320), (uint64_t)&v31);
    memset(__p, 0, sizeof(__p));
    sub_E2E8E8((uint64_t *)v35, v8, v9, (uint64_t *)(a1 + 1328), &v31, (int **)__p, v7);
    if (__p[0])
    {
      sub_C5C1FC((uint64_t)__p, (uint64_t)__p[0]);
      operator delete(__p[0]);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    sub_E2CE94((uint64_t)v35, v7);
    uint64_t v10 = sub_486CB4(v7);
    sub_CBE10C((char *)a1, v32, (char **)(v10 + 160));
    sub_CBEAF4(v35);
  }
  sub_48381C((uint64_t)v35, a1 + 1328);
  sub_48381C((uint64_t)v38, a1 + 1704);
  sub_483E44(&v31, (uint64_t)v35, 2uLL);
  sub_E089C0(&v31, a2 + 8, v11);
  std::string::size_type v12 = v31.__r_.__value_.__r.__words[0];
  if (v31.__r_.__value_.__r.__words[0])
  {
    std::string::size_type size = v31.__r_.__value_.__l.__size_;
    BOOL v14 = (void *)v31.__r_.__value_.__r.__words[0];
    if (v31.__r_.__value_.__l.__size_ != v31.__r_.__value_.__r.__words[0])
    {
      do
        std::string::size_type size = sub_402C7C(size - 376);
      while (size != v12);
      BOOL v14 = (void *)v31.__r_.__value_.__r.__words[0];
    }
    v31.__r_.__value_.__l.__size_ = v12;
    operator delete(v14);
  }
  sub_402C7C((uint64_t)v38);
  sub_402C7C((uint64_t)v35);
  *((unsigned char *)&v31.__r_.__value_.__s + 23) = 19;
  strcpy((char *)&v31, "populate_debug_data");
  if (sub_29D62C(v32, (uint64_t)&v31))
  {
    sub_54214((uint64_t)v35, a1 + 2192);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_26;
    }
  }
  else
  {
    *(_OWORD *)char v35 = 0u;
    long long v36 = 0u;
    int v37 = 1065353216;
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_26;
    }
  }
  operator delete(v31.__r_.__value_.__l.__data_);
LABEL_26:
  sub_3CB9F8(*(void **)(a1 + 1320), (long long **)(a1 + 2136), (uint64_t)v35);
  if (*(unsigned char *)(a1 + 1312))
  {
    sub_E2B65C(*(_DWORD *)(a1 + 2096), (uint64_t)v35);
    sub_58E3C((uint64_t)v35);
    *(_DWORD *)(a2 + 48) |= 8u;
    uint64_t v15 = *(void *)(a2 + 16);
    int v16 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
    if (v15) {
      int v16 = (uint64_t *)*v16;
    }
    uint64_t v17 = sub_1880F84((void *)(a2 + 408), v16);
    unint64_t v18 = v17;
    if (*((char *)v17 + 23) < 0) {
      operator delete((void *)*v17);
    }
    long long v19 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
    v18[2] = v31.__r_.__value_.__r.__words[2];
    *(_OWORD *)unint64_t v18 = v19;
  }
  uint64_t v20 = *(void *)(a1 + 2080);
  if (v20)
  {
    int v21 = *(unsigned __int8 *)(a1 + 2108) - 5 < 2 || sub_486A4C(*(void *)(a1 + 2080)) == 1;
    sub_486A54(v20, v21);
    sub_E2B424(v20, a2 + 8);
    unint64_t v22 = *(void *)(a2 + 392) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v22 + 23) < 0) {
      uint64_t v23 = *(void *)(v22 + 8);
    }
    else {
      uint64_t v23 = *(unsigned __int8 *)(v22 + 23);
    }
    *(void *)(a2 + 1152) = v23;
  }
  sub_E2A994(a1, a2 + 8);
  sub_DEB1B8(*(void **)(a1 + 1320), (double *)(a1 + 2168), a2 + 8);
  *(void *)(a2 + 1128) = vcvtad_u64_f64(sub_72688((uint64_t)v34));
  unint64_t v24 = (void **)v36;
  if ((void)v36)
  {
    do
    {
      uint64_t v28 = (void **)*v24;
      sub_55198((uint64_t)(v24 + 5));
      if (*((char *)v24 + 39) < 0) {
        operator delete(v24[2]);
      }
      operator delete(v24);
      unint64_t v24 = v28;
    }
    while (v28);
  }
  uint64_t v25 = v35[0];
  v35[0] = 0;
  if (v25) {
    operator delete(v25);
  }
  unint64_t v26 = v33;
  if (v33)
  {
    do
    {
      int v29 = (void **)*v26;
      sub_55198((uint64_t)(v26 + 5));
      if (*((char *)v26 + 39) < 0) {
        operator delete(v26[2]);
      }
      operator delete(v26);
      unint64_t v26 = v29;
    }
    while (v29);
  }
  long long v27 = v32[0];
  v32[0] = 0;
  if (v27) {
    operator delete(v27);
  }
}

void sub_CBDF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_5450C((uint64_t)&a28);
  sub_CBC8A8(v28);
  sub_5450C((uint64_t)&a20);
  _Unwind_Resume(a1);
}

char *sub_CBE10C(char *result, void *a2, char **a3)
{
  uint64_t v15 = *((void *)result + 265);
  int v16 = *((_DWORD *)result + 532);
  if (*((_DWORD *)result + 530) != -1 || *((_DWORD *)result + 531) != -1)
  {
    int v6 = result;
    uint64_t result = (char *)sub_DE7FB0(result[2108]);
    if (result)
    {
      HIBYTE(__p[2]) = 21;
      strcpy((char *)__p, "max_reroute_info_size");
      unsigned int v7 = sub_31AC04(a2, (uint64_t)__p);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v8 = *a3;
      unsigned int v9 = a3[1];
      if (0x6DB6DB6DB6DB6DB7 * ((v9 - *a3) >> 3) >= (unint64_t)v7)
      {
        if (v8 + 56 != v9)
        {
          uint64_t v10 = 0;
          do
          {
            double v11 = &v8[v10];
            char *v11 = v8[v10 + 56];
            *(_OWORD *)(v11 + 8) = *(_OWORD *)&v8[v10 + 64];
            *((void *)v11 + 3) = *(void *)&v8[v10 + 80];
            *((_DWORD *)v11 + 8) = *(_DWORD *)&v8[v10 + 88];
            *(_OWORD *)(v11 + 36) = *(_OWORD *)&v8[v10 + 92];
            *((_DWORD *)v11 + 13) = *(_DWORD *)&v8[v10 + 108];
            v10 += 56;
          }
          while (&v8[v10 + 56] != v9);
          v8 += v10;
        }
        a3[1] = v8;
      }
      uint64_t v12 = sub_6467E8(**(void ***)v6, 0);
      *(_OWORD *)long long __p = *(_OWORD *)(v12 + 11096);
      __p[2] = *(void **)(v12 + 11112);
      int v13 = *((_DWORD *)v6 + 525);
      return sub_CBEC90(a3, (long long *)__p, &v15, &v13, v6 + 2109, (uint64_t *)v6 + 279);
    }
  }
  return result;
}

void sub_CBE288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_CBE2A4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "Bad optional access.");
    uint64_t v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return result;
}

void sub_CBE318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_CBE348(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >> 59) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(32 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    uint64_t v5[2] = result + 32 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = v8 + v9;
        uint64_t v11 = a2 + v9;
        *(_DWORD *)uint64_t v10 = *(_DWORD *)(a2 + v9);
        *(void *)(v8 + v9 + 8) = 0;
        *(void *)(v10 + 16) = 0;
        *(void *)(v10 + 24) = 0;
        uint64_t result = sub_CBE4DC(v8 + v9 + 8, *(void *)(a2 + v9 + 8), *(void *)(a2 + v9 + 16), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + v9 + 16) - *(void *)(a2 + v9 + 8)) >> 3));
        v9 += 32;
      }
      while (v11 + 32 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_CBE43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_CBE450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_CBE7A0(v11, v12, v12, v10, v10);
  *(void *)(v9 + 8) = v10;
  sub_CBE484(&a9);
  _Unwind_Resume(a1);
}

void ***sub_CBE484(void ***a1)
{
  if (*((unsigned char *)a1 + 8)) {
    return a1;
  }
  uint64_t v3 = (uint64_t *)*a1;
  uint64_t v4 = (uint64_t)**a1;
  if (!v4) {
    return a1;
  }
  sub_C5C1FC((uint64_t)v3, v4);
  operator delete(**a1);
  return a1;
}

uint64_t sub_CBE4DC(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0x38E38E38E38E38FLL) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(72 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    uint64_t v5[2] = result + 72 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_CBE688(v8 + v9, a2 + v9);
        v9 += 72;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_CBE5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_CBE5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v12; v12 -= 72)
    sub_3A688C(v11, (char **)(v10 - 72 + v12));
  *(void *)(v9 + 8) = v10;
  sub_CBE5EC(&a9);
  _Unwind_Resume(a1);
}

void ***sub_CBE5EC(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    int v2 = *result;
    uint64_t v3 = (char **)**result;
    if (v3)
    {
      uint64_t v4 = (char **)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v4 -= 9;
          sub_3A688C((uint64_t)(v2 + 2), v4);
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_CBE688(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_489B48((char **)a1, *(void *)a2, *(void *)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v5 = *(unsigned char **)(a2 + 24);
  uint64_t v4 = *(unsigned char **)(a2 + 32);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    unsigned int v7 = (char *)operator new(v4 - v5);
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v7;
    uint64_t v8 = &v7[32 * (v6 >> 5)];
    *(void *)(a1 + 40) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 32) = v8;
  }
  uint64_t v9 = (unsigned char *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0)
  {
    sub_4200(v9, *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)uint64_t v9 = v10;
  }
  return a1;
}

void sub_CBE778(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_489144((void **)v1);
  _Unwind_Resume(a1);
}

void sub_CBE7A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    uint64_t v6 = a3;
    while (1)
    {
      uint64_t v8 = *(void ***)(v6 - 24);
      if (!v8) {
        goto LABEL_5;
      }
      uint64_t v9 = *(void ***)(v6 - 16);
      unsigned int v7 = *(void **)(v6 - 24);
      if (v9 != v8) {
        break;
      }
LABEL_4:
      *(void *)(v6 - 16) = v8;
      operator delete(v7);
LABEL_5:
      v6 -= 32;
      if (v6 == a5) {
        return;
      }
    }
    while ((*((char *)v9 - 1) & 0x80000000) == 0)
    {
      uint64_t v11 = *(v9 - 6);
      if (v11) {
        goto LABEL_14;
      }
LABEL_15:
      uint64_t v12 = v9 - 9;
      int v13 = (char *)*(v9 - 9);
      if (v13)
      {
        BOOL v14 = (char *)*(v9 - 8);
        long long v10 = *(v9 - 9);
        if (v14 != v13)
        {
          do
          {
            uint64_t v15 = (void *)*((void *)v14 - 6);
            if (v15)
            {
              *((void *)v14 - 5) = v15;
              operator delete(v15);
            }
            if (*(v14 - 57) < 0) {
              operator delete(*((void **)v14 - 10));
            }
            v14 -= 80;
          }
          while (v14 != v13);
          long long v10 = *v12;
        }
        *(v9 - 8) = v13;
        operator delete(v10);
      }
      v9 -= 9;
      if (v12 == v8)
      {
        unsigned int v7 = *(void **)(v6 - 24);
        goto LABEL_4;
      }
    }
    operator delete(*(v9 - 3));
    uint64_t v11 = *(v9 - 6);
    if (!v11) {
      goto LABEL_15;
    }
LABEL_14:
    *(v9 - 5) = v11;
    operator delete(v11);
    goto LABEL_15;
  }
}

void *sub_CBE8B4(void *a1)
{
  sub_423E54((uint64_t)(a1 + 231));
  a1[117] = off_24396A0;
  int v2 = a1 + 230;
  do
  {
    uint64_t v3 = v2 - 6;
    uint64_t v4 = *(v2 - 3);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      unsigned int v7 = v2 - 5;
      do
      {
        if ((*(char *)(*v3 + v6) & 0x80000000) == 0)
        {
          uint64_t v8 = *v7 + v5;
          uint64_t v9 = *(void **)(v8 + 8);
          if (v9)
          {
            *(void *)(v8 + 16) = v9;
            operator delete(v9);
            uint64_t v4 = *(v2 - 3);
          }
        }
        ++v6;
        v5 += 32;
      }
      while (v6 != v4);
      operator delete((void *)*(v2 - 6));
      *(v2 - 6) = &unk_20E1710;
      *(v2 - 1) = 0;
      *(v2 - 4) = 0;
      *(v2 - 3) = 0;
      void *v7 = 0;
    }
    v2 -= 6;
  }
  while (v3 != a1 + 134);
  a1[1] = off_24396A0;
  long long v10 = a1 + 114;
  do
  {
    uint64_t v11 = v10 - 6;
    uint64_t v12 = *(v10 - 3);
    if (v12)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = v10 - 5;
      do
      {
        if ((*(char *)(*v11 + v14) & 0x80000000) == 0)
        {
          uint64_t v16 = *v15 + v13;
          uint64_t v17 = *(void **)(v16 + 8);
          if (v17)
          {
            *(void *)(v16 + 16) = v17;
            operator delete(v17);
            uint64_t v12 = *(v10 - 3);
          }
        }
        ++v14;
        v13 += 32;
      }
      while (v14 != v12);
      operator delete((void *)*(v10 - 6));
      *(v10 - 6) = &unk_20E1710;
      *(v10 - 1) = 0;
      *(v10 - 4) = 0;
      *(v10 - 3) = 0;
      void *v15 = 0;
    }
    v10 -= 6;
  }
  while (v11 != a1 + 18);
  return a1;
}

uint64_t sub_CBEA50(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "Bad optional access.");
    uint64_t v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return result;
}

void sub_CBEAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_CBEAF4(void *a1)
{
  sub_423E54((uint64_t)(a1 + 231));
  a1[117] = off_24397A0;
  int v2 = a1 + 230;
  do
  {
    uint64_t v3 = v2 - 6;
    uint64_t v4 = *(v2 - 3);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      unsigned int v7 = v2 - 5;
      do
      {
        if ((*(char *)(*v3 + v6) & 0x80000000) == 0)
        {
          uint64_t v8 = *v7 + v5;
          uint64_t v9 = *(void **)(v8 + 8);
          if (v9)
          {
            *(void *)(v8 + 16) = v9;
            operator delete(v9);
            uint64_t v4 = *(v2 - 3);
          }
        }
        ++v6;
        v5 += 32;
      }
      while (v6 != v4);
      operator delete((void *)*(v2 - 6));
      *(v2 - 6) = &unk_20E1710;
      *(v2 - 1) = 0;
      *(v2 - 4) = 0;
      *(v2 - 3) = 0;
      void *v7 = 0;
    }
    v2 -= 6;
  }
  while (v3 != a1 + 134);
  a1[1] = off_24397A0;
  long long v10 = a1 + 114;
  do
  {
    uint64_t v11 = v10 - 6;
    uint64_t v12 = *(v10 - 3);
    if (v12)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = v10 - 5;
      do
      {
        if ((*(char *)(*v11 + v14) & 0x80000000) == 0)
        {
          uint64_t v16 = *v15 + v13;
          uint64_t v17 = *(void **)(v16 + 8);
          if (v17)
          {
            *(void *)(v16 + 16) = v17;
            operator delete(v17);
            uint64_t v12 = *(v10 - 3);
          }
        }
        ++v14;
        v13 += 32;
      }
      while (v14 != v12);
      operator delete((void *)*(v10 - 6));
      *(v10 - 6) = &unk_20E1710;
      *(v10 - 1) = 0;
      *(v10 - 4) = 0;
      *(v10 - 3) = 0;
      void *v15 = 0;
    }
    v10 -= 6;
  }
  while (v11 != a1 + 18);
  return a1;
}

char *sub_CBEC90(char **a1, long long *a2, uint64_t *a3, int *a4, char *a5, uint64_t *a6)
{
  uint64_t v13 = a1[1];
  unint64_t v12 = (unint64_t)a1[2];
  if ((unint64_t)v13 < v12)
  {
    int v14 = *a4;
    char v15 = *a5;
    uint64_t v16 = *a6;
    long long v17 = *a2;
    *((void *)v13 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v13 = v17;
    int v18 = *((_DWORD *)a3 + 2);
    *((void *)v13 + 3) = *a3;
    *((_DWORD *)v13 + 8) = v18;
    *((_DWORD *)v13 + 9) = v14;
    v13[40] = v15;
    *((void *)v13 + 6) = v16;
    long long v19 = v13 + 56;
    goto LABEL_14;
  }
  uint64_t v20 = *a1;
  uint64_t v21 = 0x6DB6DB6DB6DB6DB7 * ((v13 - *a1) >> 3);
  unint64_t v22 = v21 + 1;
  if ((unint64_t)(v21 + 1) > 0x492492492492492) {
    sub_2E00();
  }
  unint64_t v23 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - (void)v20) >> 3);
  if (2 * v23 > v22) {
    unint64_t v22 = 2 * v23;
  }
  if (v23 >= 0x249249249249249) {
    unint64_t v24 = 0x492492492492492;
  }
  else {
    unint64_t v24 = v22;
  }
  if (v24 > 0x492492492492492) {
    sub_188D718();
  }
  uint64_t v25 = 56 * v24;
  unint64_t v26 = (char *)operator new(56 * v24);
  int v27 = *a4;
  char v28 = *a5;
  int v29 = &v26[56 * v21];
  char v30 = &v26[v25];
  uint64_t v31 = *a6;
  *(_OWORD *)int v29 = *a2;
  uint64_t v32 = *a3;
  *((void *)v29 + 2) = *((void *)a2 + 2);
  *((void *)v29 + 3) = v32;
  *((_DWORD *)v29 + 8) = *((_DWORD *)a3 + 2);
  *((_DWORD *)v29 + 9) = v27;
  v29[40] = v28;
  *((void *)v29 + 6) = v31;
  long long v19 = v29 + 56;
  if (v13 == v20)
  {
    *a1 = v29;
    a1[1] = v19;
    a1[2] = v30;
    if (!v20) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  do
  {
    BOOL v33 = v29 - 56;
    long long v34 = *(_OWORD *)(v13 - 56);
    long long v35 = *(_OWORD *)(v13 - 40);
    long long v36 = *(_OWORD *)(v13 - 24);
    *((void *)v29 - 1) = *((void *)v13 - 1);
    *(_OWORD *)(v29 - 24) = v36;
    *(_OWORD *)(v29 - 40) = v35;
    *(_OWORD *)(v29 - 56) = v34;
    v13 -= 56;
    v29 -= 56;
  }
  while (v13 != v20);
  *a1 = v33;
  a1[1] = v19;
  a1[2] = v30;
  if (v20) {
LABEL_13:
  }
    operator delete(v20);
LABEL_14:
  a1[1] = v19;
  return v19 - 56;
}

uint64_t sub_CBEE6C(uint64_t result, void ***a2)
{
  switch(result)
  {
    case 3:
      uint64_t v3 = *a2;
      *a2 = 0;
      if (v3)
      {
        uint64_t v4 = v3;
        sub_54FE0(&v4);
        operator delete();
      }
      break;
    case 2:
      uint64_t result = (uint64_t)*a2;
      *a2 = 0;
      if (result)
      {
        sub_553C4(result);
LABEL_9:
        operator delete();
      }
      break;
    case 0:
      int v2 = *a2;
      *a2 = 0;
      if (v2)
      {
        if (*((char *)v2 + 23) < 0) {
          operator delete(*v2);
        }
        goto LABEL_9;
      }
      break;
  }
  return result;
}

unsigned char *sub_CBEF68()
{
  byte_25E19FF = 1;
  word_25E19E8 = 65;
  byte_25E1A17 = 1;
  word_25E1A00 = 65;
  char v3 = 7;
  strcpy((char *)v2, "UNKNOWN");
  int v4 = 0;
  char v6 = 14;
  strcpy((char *)v5, "ROUTES_THROUGH");
  int v7 = 1;
  char v9 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v10 = 3;
  char v12 = 11;
  strcpy((char *)v11, "ROUTES_FROM");
  int v13 = 2;
  xmmword_25E1AA8 = 0u;
  *(_OWORD *)&qword_25E1AB8 = 0u;
  dword_25E1AC8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E1AA8, (uint64_t)v2, (uint64_t)v2);
  sub_3A6EF0((uint64_t)&xmmword_25E1AA8, (uint64_t)v5, (uint64_t)v5);
  sub_3A6EF0((uint64_t)&xmmword_25E1AA8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E1AA8, (uint64_t)v11, (uint64_t)v11);
  if (v12 < 0)
  {
    operator delete(v11[0]);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v6 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v5[0]);
      if ((v3 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v2[0]);
      goto LABEL_5;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v6 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v3 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_25E1A20 = 0;
  qword_25E1A28 = 0;
  qword_25E1A18 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E1A18 = (uint64_t)v0;
  qword_25E1A20 = (uint64_t)(v0 + 9);
  qword_25E1A28 = (uint64_t)(v0 + 9);
  qword_25E1A30 = 0;
  qword_25E1A38 = 0;
  qword_25E1A40 = 0;
  uint64_t result = operator new(9uLL);
  *(void *)uint64_t result = 0x604020C00010305;
  result[8] = 13;
  qword_25E1A30 = (uint64_t)result;
  qword_25E1A38 = (uint64_t)(result + 9);
  byte_25E1A5F = 8;
  qword_25E1A40 = (uint64_t)(result + 9);
  strcpy(byte_25E1A48, "any_mode");
  byte_25E1A77 = 7;
  strcpy((char *)&dword_25E1A60, "cycling");
  byte_25E1A8F = 7;
  strcpy((char *)&dword_25E1A78, "driving");
  byte_25E1AA7 = 7;
  strcpy((char *)&dword_25E1A90, "walking");
  return result;
}

void sub_CBF224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E1AB8) {
    sub_20AF658((void **)qword_25E1AB8);
  }
  int v37 = (void *)xmmword_25E1AA8;
  *(void *)&xmmword_25E1AA8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_CBF2C4@<X0>(char ***a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v75);
  v71[0] = 1;
  long long v72 = 0u;
  memset(v73, 0, sizeof(v73));
  unint64_t v74 = 0;
  uint64_t v4 = (*a1)[1] - **a1;
  if (!v4) {
    goto LABEL_45;
  }
  uint64_t v44 = a2;
  uint64_t v5 = 0;
  unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
  do
  {
    uint64_t v46 = v5;
    uint64_t v6 = 24 * v5;
    int v7 = &(**a1)[24 * v5];
    uint64_t v8 = (uint64_t)*a1[1];
    long long v69 = 0uLL;
    unint64_t v70 = 0;
    unsigned int v9 = sub_EB6EB0(v7);
    if (v9)
    {
      uint64_t v10 = 0;
      uint64_t v11 = (void *)(v8 + v6);
      uint64_t v12 = v9;
      do
      {
        int v13 = (void *)nullsub_1(v7);
        uint64_t v14 = *v11 + 24 * v10;
        v53.n128_u64[0] = *v13 + 48 * v10;
        v53.n128_u64[1] = (unint64_t)a1;
        *(void *)&long long v54 = v14;
        sub_CC1934((uint64_t)&v53, (uint64_t)__p);
        if (sub_460618((int ****)__p))
        {
          uint64_t v15 = *((void *)&v69 + 1);
          if (*((void *)&v69 + 1) >= v70)
          {
            uint64_t v20 = sub_CC1BB4((void **)&v69, (uint64_t)__p);
          }
          else
          {
            **((void **)&v69 + 1) = 0;
            *(void *)(v15 + 8) = 0;
            *(void *)(v15 + 16) = 0;
            *(_OWORD *)uint64_t v15 = *(_OWORD *)__p;
            *(void *)(v15 + 16) = v62;
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v62 = 0;
            *(_OWORD *)(v15 + 24) = v63;
            long long v17 = v65;
            long long v16 = *(_OWORD *)v66;
            uint64_t v18 = *(void *)&v66[13];
            *(_OWORD *)(v15 + 40) = v64;
            *(void *)(v15 + 85) = v18;
            *(_OWORD *)(v15 + 72) = v16;
            *(_OWORD *)(v15 + 56) = v17;
            long long v19 = v67;
            *(void *)(v15 + 112) = v68;
            *(_OWORD *)(v15 + 96) = v19;
            uint64_t v68 = 0;
            long long v67 = 0uLL;
            uint64_t v20 = (char *)(v15 + 120);
          }
          *((void *)&v69 + 1) = v20;
          if ((SHIBYTE(v68) & 0x80000000) == 0) {
            goto LABEL_19;
          }
        }
        else
        {
          if (sub_723EC(1u))
          {
            uint64_t v21 = a1;
            v53.n128_u64[0] = v50;
            *(unint64_t *)((char *)v53.n128_u64 + *(void *)(v50 - 24)) = v49;
            unint64_t v22 = (std::ios_base *)((char *)&v53 + *(void *)(v53.n128_u64[0] - 24));
            std::ios_base::init(v22, &v53.n128_i8[8]);
            v22[1].__vftable = 0;
            v22[1].__fmtflags_ = -1;
            std::streambuf::basic_streambuf();
            long long v57 = 0u;
            long long v58 = 0u;
            int v59 = 16;
            sub_188FC78(&v53, (uint64_t)"Dropping inconsistent route.", 28);
            a1 = v21;
            std::stringbuf::str();
            sub_7246C((uint64_t *)&v51, 1u);
            if (v52 < 0) {
              operator delete(v51);
            }
            v53.n128_u64[0] = v48;
            *(unint64_t *)((char *)v53.n128_u64 + *(void *)(v48 - 24)) = v47;
            if (SBYTE7(v58) < 0) {
              operator delete((void *)v57);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          if ((SHIBYTE(v68) & 0x80000000) == 0)
          {
LABEL_19:
            unint64_t v23 = __p[0];
            if (__p[0]) {
              goto LABEL_24;
            }
            goto LABEL_8;
          }
        }
        operator delete((void *)v67);
        unint64_t v23 = __p[0];
        if (__p[0])
        {
LABEL_24:
          unint64_t v24 = __p[1];
          uint64_t v25 = v23;
          if (__p[1] != v23)
          {
            do
              unint64_t v24 = (void *)sub_3AFFFC((uint64_t)v24 - 1056);
            while (v24 != v23);
            uint64_t v25 = __p[0];
          }
          __p[1] = v23;
          operator delete(v25);
        }
LABEL_8:
        ++v10;
      }
      while (v10 != v12);
    }
    uint64_t v26 = *((void *)&v72 + 1);
    if (*((void *)&v72 + 1) < *(void *)&v73[0])
    {
      **((void **)&v72 + 1) = 0;
      *(void *)(v26 + 8) = 0;
      *(void *)(v26 + 16) = 0;
      *(_OWORD *)uint64_t v26 = v69;
      *(void *)(v26 + 16) = v70;
      *((void *)&v72 + 1) = v26 + 24;
      goto LABEL_4;
    }
    int v27 = sub_C7B464((void ***)&v72, (uint64_t)&v69);
    char v28 = (void **)v69;
    *((void *)&v72 + 1) = v27;
    if ((void)v69)
    {
      int v29 = (void **)*((void *)&v69 + 1);
      char v30 = (void *)v69;
      if (*((void *)&v69 + 1) == (void)v69)
      {
LABEL_41:
        *((void *)&v69 + 1) = v28;
        operator delete(v30);
        goto LABEL_4;
      }
      while (1)
      {
        if (*((char *)v29 - 1) < 0)
        {
          operator delete(*(v29 - 3));
          uint64_t v31 = v29 - 15;
          uint64_t v32 = *(v29 - 15);
          if (v32)
          {
LABEL_37:
            uint64_t v33 = (uint64_t)*(v29 - 14);
            long long v34 = v32;
            if ((void *)v33 != v32)
            {
              do
                uint64_t v33 = sub_3AFFFC(v33 - 1056);
              while ((void *)v33 != v32);
              long long v34 = *v31;
            }
            *(v29 - 14) = v32;
            operator delete(v34);
          }
        }
        else
        {
          uint64_t v31 = v29 - 15;
          uint64_t v32 = *(v29 - 15);
          if (v32) {
            goto LABEL_37;
          }
        }
        int v29 = v31;
        if (v31 == v28)
        {
          char v30 = (void *)v69;
          goto LABEL_41;
        }
      }
    }
LABEL_4:
    uint64_t v5 = v46 + 1;
  }
  while (v46 + 1 != v45);
  long long v35 = (void *)v72;
  a2 = v44;
  if ((void)v72 != *((void *)&v72 + 1))
  {
    while (*v35 == v35[1])
    {
      v35 += 3;
      if (v35 == *((void **)&v72 + 1)) {
        goto LABEL_45;
      }
    }
    goto LABEL_48;
  }
LABEL_45:
  long long v36 = **a1;
  int v37 = (*a1)[1];
  if (v36 != v37)
  {
    while (sub_45FB38(v36))
    {
      v36 += 24;
      if (v36 == v37) {
        goto LABEL_48;
      }
    }
    __p[0] = dword_8 + 2;
    __p[1] = &off_2439090;
    sub_3E7814(&v53, (__n128 *)__p);
    *(unsigned char *)a2 = 0;
    long long v42 = v54;
    *(__n128 *)(a2 + 8) = v53;
    *(_OWORD *)(a2 + 24) = v42;
    *(void *)(a2 + 40) = v55;
    int v41 = v56;
    goto LABEL_52;
  }
LABEL_48:
  unint64_t v38 = vcvtad_u64_f64(sub_72688((uint64_t)v75));
  unint64_t v74 = v38;
  int v39 = v71[0];
  *(unsigned char *)a2 = v71[0];
  if (!v39)
  {
    *(_OWORD *)(a2 + 8) = v72;
    *(_OWORD *)(a2 + 24) = v73[0];
    *(void *)(a2 + 40) = *(void *)&v73[1];
    memset(v73, 0, 24);
    int v41 = DWORD2(v73[1]);
LABEL_52:
    *(_DWORD *)(a2 + 48) = v41;
    return sub_CC1854((uint64_t)v71);
  }
  uint64_t v40 = *((void *)&v73[1] + 1);
  *(void *)(a2 + 24) = *(void *)&v73[0];
  *(_OWORD *)(a2 + 8) = v72;
  long long v72 = 0uLL;
  *(void *)&v73[0] = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)((char *)v73 + 8);
  memset((char *)v73 + 8, 0, 24);
  *(void *)(a2 + 48) = v40;
  *(void *)(a2 + 56) = v38;
  return sub_CC1854((uint64_t)v71);
}

void sub_CBF978(_Unwind_Exception *a1)
{
  sub_CC1854(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_CBF98C(_Unwind_Exception *a1)
{
  sub_CC1854(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_CBF9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  sub_5AB1B0((void ***)(v60 - 208));
  sub_CC1854(v60 - 184);
  _Unwind_Resume(a1);
}

uint64_t sub_CBFA44@<X0>(char ***a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v75);
  v71[0] = 1;
  long long v72 = 0u;
  memset(v73, 0, sizeof(v73));
  unint64_t v74 = 0;
  uint64_t v4 = (*a1)[1] - **a1;
  if (!v4) {
    goto LABEL_45;
  }
  uint64_t v44 = a2;
  uint64_t v5 = 0;
  unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
  do
  {
    uint64_t v46 = v5;
    uint64_t v6 = 24 * v5;
    int v7 = &(**a1)[24 * v5];
    uint64_t v8 = (uint64_t)*a1[1];
    long long v69 = 0uLL;
    unint64_t v70 = 0;
    unsigned int v9 = sub_EB6EB0(v7);
    if (v9)
    {
      uint64_t v10 = 0;
      uint64_t v11 = (void *)(v8 + v6);
      uint64_t v12 = v9;
      do
      {
        int v13 = (void *)nullsub_1(v7);
        uint64_t v14 = *v11 + 24 * v10;
        v53.n128_u64[0] = *v13 + 48 * v10;
        v53.n128_u64[1] = (unint64_t)a1;
        *(void *)&long long v54 = v14;
        sub_CC1DF0((uint64_t)&v53, (uint64_t)__p);
        if (sub_460DC0((uint64_t **)__p))
        {
          uint64_t v15 = *((void *)&v69 + 1);
          if (*((void *)&v69 + 1) >= v70)
          {
            uint64_t v20 = sub_CC1BB4((void **)&v69, (uint64_t)__p);
          }
          else
          {
            **((void **)&v69 + 1) = 0;
            *(void *)(v15 + 8) = 0;
            *(void *)(v15 + 16) = 0;
            *(_OWORD *)uint64_t v15 = *(_OWORD *)__p;
            *(void *)(v15 + 16) = v62;
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v62 = 0;
            *(_OWORD *)(v15 + 24) = v63;
            long long v17 = v65;
            long long v16 = *(_OWORD *)v66;
            uint64_t v18 = *(void *)&v66[13];
            *(_OWORD *)(v15 + 40) = v64;
            *(void *)(v15 + 85) = v18;
            *(_OWORD *)(v15 + 72) = v16;
            *(_OWORD *)(v15 + 56) = v17;
            long long v19 = v67;
            *(void *)(v15 + 112) = v68;
            *(_OWORD *)(v15 + 96) = v19;
            uint64_t v68 = 0;
            long long v67 = 0uLL;
            uint64_t v20 = (char *)(v15 + 120);
          }
          *((void *)&v69 + 1) = v20;
          if ((SHIBYTE(v68) & 0x80000000) == 0) {
            goto LABEL_19;
          }
        }
        else
        {
          if (sub_723EC(1u))
          {
            uint64_t v21 = a1;
            v53.n128_u64[0] = v50;
            *(unint64_t *)((char *)v53.n128_u64 + *(void *)(v50 - 24)) = v49;
            unint64_t v22 = (std::ios_base *)((char *)&v53 + *(void *)(v53.n128_u64[0] - 24));
            std::ios_base::init(v22, &v53.n128_i8[8]);
            v22[1].__vftable = 0;
            v22[1].__fmtflags_ = -1;
            std::streambuf::basic_streambuf();
            long long v57 = 0u;
            long long v58 = 0u;
            int v59 = 16;
            sub_188FC78(&v53, (uint64_t)"Dropping inconsistent route.", 28);
            a1 = v21;
            std::stringbuf::str();
            sub_7246C((uint64_t *)&v51, 1u);
            if (v52 < 0) {
              operator delete(v51);
            }
            v53.n128_u64[0] = v48;
            *(unint64_t *)((char *)v53.n128_u64 + *(void *)(v48 - 24)) = v47;
            if (SBYTE7(v58) < 0) {
              operator delete((void *)v57);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          if ((SHIBYTE(v68) & 0x80000000) == 0)
          {
LABEL_19:
            unint64_t v23 = __p[0];
            if (__p[0]) {
              goto LABEL_24;
            }
            goto LABEL_8;
          }
        }
        operator delete((void *)v67);
        unint64_t v23 = __p[0];
        if (__p[0])
        {
LABEL_24:
          unint64_t v24 = __p[1];
          uint64_t v25 = v23;
          if (__p[1] != v23)
          {
            do
              unint64_t v24 = (void *)sub_3AFFFC((uint64_t)v24 - 1056);
            while (v24 != v23);
            uint64_t v25 = __p[0];
          }
          __p[1] = v23;
          operator delete(v25);
        }
LABEL_8:
        ++v10;
      }
      while (v10 != v12);
    }
    uint64_t v26 = *((void *)&v72 + 1);
    if (*((void *)&v72 + 1) < *(void *)&v73[0])
    {
      **((void **)&v72 + 1) = 0;
      *(void *)(v26 + 8) = 0;
      *(void *)(v26 + 16) = 0;
      *(_OWORD *)uint64_t v26 = v69;
      *(void *)(v26 + 16) = v70;
      *((void *)&v72 + 1) = v26 + 24;
      goto LABEL_4;
    }
    int v27 = sub_C7B464((void ***)&v72, (uint64_t)&v69);
    char v28 = (void **)v69;
    *((void *)&v72 + 1) = v27;
    if ((void)v69)
    {
      int v29 = (void **)*((void *)&v69 + 1);
      char v30 = (void *)v69;
      if (*((void *)&v69 + 1) == (void)v69)
      {
LABEL_41:
        *((void *)&v69 + 1) = v28;
        operator delete(v30);
        goto LABEL_4;
      }
      while (1)
      {
        if (*((char *)v29 - 1) < 0)
        {
          operator delete(*(v29 - 3));
          uint64_t v31 = v29 - 15;
          uint64_t v32 = *(v29 - 15);
          if (v32)
          {
LABEL_37:
            uint64_t v33 = (uint64_t)*(v29 - 14);
            long long v34 = v32;
            if ((void *)v33 != v32)
            {
              do
                uint64_t v33 = sub_3AFFFC(v33 - 1056);
              while ((void *)v33 != v32);
              long long v34 = *v31;
            }
            *(v29 - 14) = v32;
            operator delete(v34);
          }
        }
        else
        {
          uint64_t v31 = v29 - 15;
          uint64_t v32 = *(v29 - 15);
          if (v32) {
            goto LABEL_37;
          }
        }
        int v29 = v31;
        if (v31 == v28)
        {
          char v30 = (void *)v69;
          goto LABEL_41;
        }
      }
    }
LABEL_4:
    uint64_t v5 = v46 + 1;
  }
  while (v46 + 1 != v45);
  long long v35 = (void *)v72;
  a2 = v44;
  if ((void)v72 != *((void *)&v72 + 1))
  {
    while (*v35 == v35[1])
    {
      v35 += 3;
      if (v35 == *((void **)&v72 + 1)) {
        goto LABEL_45;
      }
    }
    goto LABEL_48;
  }
LABEL_45:
  long long v36 = **a1;
  int v37 = (*a1)[1];
  if (v36 != v37)
  {
    while (sub_45FB38(v36))
    {
      v36 += 24;
      if (v36 == v37) {
        goto LABEL_48;
      }
    }
    __p[0] = dword_8 + 2;
    __p[1] = &off_2439090;
    sub_3E7814(&v53, (__n128 *)__p);
    *(unsigned char *)a2 = 0;
    long long v42 = v54;
    *(__n128 *)(a2 + 8) = v53;
    *(_OWORD *)(a2 + 24) = v42;
    *(void *)(a2 + 40) = v55;
    int v41 = v56;
    goto LABEL_52;
  }
LABEL_48:
  unint64_t v38 = vcvtad_u64_f64(sub_72688((uint64_t)v75));
  unint64_t v74 = v38;
  int v39 = v71[0];
  *(unsigned char *)a2 = v71[0];
  if (!v39)
  {
    *(_OWORD *)(a2 + 8) = v72;
    *(_OWORD *)(a2 + 24) = v73[0];
    *(void *)(a2 + 40) = *(void *)&v73[1];
    memset(v73, 0, 24);
    int v41 = DWORD2(v73[1]);
LABEL_52:
    *(_DWORD *)(a2 + 48) = v41;
    return sub_CC1854((uint64_t)v71);
  }
  uint64_t v40 = *((void *)&v73[1] + 1);
  *(void *)(a2 + 24) = *(void *)&v73[0];
  *(_OWORD *)(a2 + 8) = v72;
  long long v72 = 0uLL;
  *(void *)&v73[0] = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)((char *)v73 + 8);
  memset((char *)v73 + 8, 0, 24);
  *(void *)(a2 + 48) = v40;
  *(void *)(a2 + 56) = v38;
  return sub_CC1854((uint64_t)v71);
}

void sub_CC00F8(_Unwind_Exception *a1)
{
  sub_CC1854(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_CC010C(_Unwind_Exception *a1)
{
  sub_CC1854(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_CC0120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  sub_5AB1B0((void ***)(v60 - 208));
  sub_CC1854(v60 - 184);
  _Unwind_Resume(a1);
}

void sub_CC01C4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v7);
  *(_OWORD *)(a2 + 8) = 0u;
  *(unsigned char *)a2 = 1;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(void *)(a2 + 56) = 0;
  uint64_t v4 = *(void **)(a1 + 48);
  uint64_t v5 = sub_C5BCB8((uint64_t *)(a1 + 40));
  sub_F3AA18(v6, v4, v5);
}

void sub_CC1448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_F3AB04(&a26);
  sub_CC1854(v26);
  _Unwind_Resume(a1);
}

void sub_CC1528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  long long v35 = (void *)STACK[0x7F0];
  if (STACK[0x7F0])
  {
    STACK[0x7F8] = (unint64_t)v35;
    operator delete(v35);
    int v27 = (void *)STACK[0x7D8];
    if (!STACK[0x7D8]) {
      goto LABEL_12;
    }
  }
  else
  {
    int v27 = (void *)STACK[0x7D8];
    if (!STACK[0x7D8])
    {
LABEL_12:
      char v28 = (void *)STACK[0x840];
      if (!STACK[0x840])
      {
LABEL_13:
        int v29 = (void *)STACK[0x828];
        if (!STACK[0x828])
        {
LABEL_14:
          char v30 = (void *)STACK[0x8D8];
          if (!STACK[0x8D8])
          {
LABEL_15:
            uint64_t v31 = (void *)STACK[0x8C0];
            if (!STACK[0x8C0])
            {
LABEL_16:
              uint64_t v32 = (void *)STACK[0x890];
              if (!STACK[0x890])
              {
LABEL_17:
                uint64_t v33 = (void *)STACK[0x878];
                if (!STACK[0x878]) {
                  goto LABEL_19;
                }
                goto LABEL_18;
              }
LABEL_8:
              STACK[0x898] = (unint64_t)v32;
              operator delete(v32);
              uint64_t v33 = (void *)STACK[0x878];
              if (!STACK[0x878])
              {
LABEL_19:
                sub_F3AB04(&a26);
                sub_CC1854(v26);
                _Unwind_Resume(a1);
              }
LABEL_18:
              STACK[0x880] = (unint64_t)v33;
              operator delete(v33);
              goto LABEL_19;
            }
LABEL_7:
            STACK[0x8C8] = (unint64_t)v31;
            operator delete(v31);
            uint64_t v32 = (void *)STACK[0x890];
            if (!STACK[0x890]) {
              goto LABEL_17;
            }
            goto LABEL_8;
          }
LABEL_6:
          STACK[0x8E0] = (unint64_t)v30;
          operator delete(v30);
          uint64_t v31 = (void *)STACK[0x8C0];
          if (!STACK[0x8C0]) {
            goto LABEL_16;
          }
          goto LABEL_7;
        }
LABEL_5:
        STACK[0x830] = (unint64_t)v29;
        operator delete(v29);
        char v30 = (void *)STACK[0x8D8];
        if (!STACK[0x8D8]) {
          goto LABEL_15;
        }
        goto LABEL_6;
      }
LABEL_4:
      STACK[0x848] = (unint64_t)v28;
      operator delete(v28);
      int v29 = (void *)STACK[0x828];
      if (!STACK[0x828]) {
        goto LABEL_14;
      }
      goto LABEL_5;
    }
  }
  STACK[0x7E0] = (unint64_t)v27;
  operator delete(v27);
  char v28 = (void *)STACK[0x840];
  if (!STACK[0x840]) {
    goto LABEL_13;
  }
  goto LABEL_4;
}

uint64_t sub_CC162C(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)a1)
  {
    uint64_t v11 = (void *)(a1 + 8);
    uint64_t v12 = (void *)(a2 + 8);
    if (*(unsigned char *)a2)
    {
      uint64_t v13 = *(void *)(a1 + 24);
      if (v13)
      {
        uint64_t v14 = *(void *)(a1 + 32);
        uint64_t v15 = *(void **)(a1 + 24);
        if (v14 != v13)
        {
          do
          {
            if (*(char *)(v14 - 1) < 0) {
              operator delete(*(void **)(v14 - 24));
            }
            v14 -= 32;
          }
          while (v14 != v13);
          uint64_t v15 = *(void **)(a1 + 24);
        }
        *(void *)(a1 + 32) = v13;
        operator delete(v15);
      }
      void *v11 = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      void *v12 = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 48) = 0;
      goto LABEL_30;
    }
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
LABEL_36:
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    goto LABEL_37;
  }
  if (!*(unsigned char *)a2)
  {
    long long v16 = (void ***)(a1 + 8);
    uint64_t v17 = *(void *)(a1 + 32);
    if (v17)
    {
      uint64_t v18 = *(void *)(a1 + 40);
      long long v19 = *(void **)(a1 + 32);
      if (v18 != v17)
      {
        do
        {
          if (*(char *)(v18 - 1) < 0) {
            operator delete(*(void **)(v18 - 24));
          }
          v18 -= 24;
        }
        while (v18 != v17);
        long long v19 = *(void **)(a1 + 32);
      }
      *(void *)(a1 + 40) = v17;
      operator delete(v19);
    }
    if (*v16)
    {
      sub_C686F8(a1 + 8, *v16);
      operator delete(*v16);
    }
    *(_OWORD *)long long v16 = *(_OWORD *)(a2 + 8);
    goto LABEL_36;
  }
  uint64_t v4 = (void *)(a2 + 8);
  uint64_t v6 = (void **)(a1 + 8);
  uint64_t v5 = *(void ***)(a1 + 8);
  if (v5)
  {
    sub_C686F8(a1 + 8, v5);
    operator delete(*v6);
    char *v6 = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  void *v4 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int v7 = (void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = *(void **)(a1 + 32);
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0) {
          operator delete(*(void **)(v9 - 24));
        }
        v9 -= 24;
      }
      while (v9 != v8);
      uint64_t v10 = *v7;
    }
    *(void *)(a1 + 40) = v8;
    operator delete(v10);
    char *v7 = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
  }
LABEL_30:
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v20 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a1 + 56) = v20;
LABEL_37:
  *(unsigned char *)a1 = *(unsigned char *)a2;
  return a1;
}

uint64_t sub_CC1854(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    int v2 = (void ***)(a1 + 8);
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 40);
      uint64_t v5 = *(void **)(a1 + 32);
      if (v4 != v3)
      {
        do
        {
          if (*(char *)(v4 - 1) < 0) {
            operator delete(*(void **)(v4 - 24));
          }
          v4 -= 24;
        }
        while (v4 != v3);
        uint64_t v5 = *(void **)(a1 + 32);
      }
      *(void *)(a1 + 40) = v3;
      operator delete(v5);
    }
    if (*v2)
    {
      sub_C686F8(a1 + 8, *v2);
      uint64_t v8 = *v2;
LABEL_20:
      operator delete(v8);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 24);
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = *(void ***)(a1 + 24);
      if (v7 != v6)
      {
        do
        {
          if (*(char *)(v7 - 1) < 0) {
            operator delete(*(void **)(v7 - 24));
          }
          v7 -= 32;
        }
        while (v7 != v6);
        uint64_t v8 = *(void ***)(a1 + 24);
      }
      *(void *)(a1 + 32) = v6;
      goto LABEL_20;
    }
  }
  return a1;
}

void sub_CC1934(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (sub_EA80FC(*(char ***)a1))
  {
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(unsigned char *)(a2 + 48) = 1;
    *(unsigned char *)(a2 + 53) = 1;
    *(_DWORD *)(a2 + 54) = 0;
    *(_DWORD *)(a2 + 57) = 0;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(_DWORD *)(a2 + 88) = -1;
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 96) = 0;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(v4 + 56);
    uint64_t v5 = (uint64_t *)(v4 + 56);
    if (v6)
    {
      uint64_t v7 = *(char ***)a1;
      uint64_t v8 = *(uint64_t ***)(a1 + 16);
      uint64_t v9 = sub_CC1B10(v5);
      sub_46C75C(v20, (uint64_t *)v7, v8, v9);
      char v19 = 0;
      LOBYTE(__p) = 0;
      sub_46016C(a2, (uint64_t)v20, &__p);
      if (v19 < 0) {
        operator delete((void *)__p);
      }
      sub_3AFFFC((uint64_t)v20);
    }
    else
    {
      uint64_t v10 = *(char ***)a1;
      uint64_t v11 = *(uint64_t **)(a1 + 16);
      long long v16 = 0;
      uint64_t v17 = 0;
      uint64_t v15 = 0;
      sub_C816EC((uint64_t)&v15, *v11, v11[1], 0x8E38E38E38E38E39 * ((v11[1] - *v11) >> 5));
      sub_460168(a2, v10, &v15);
      uint64_t v12 = v15;
      if (v15)
      {
        uint64_t v13 = v16;
        uint64_t v14 = v15;
        if (v16 != v15)
        {
          do
            uint64_t v13 = sub_3B0290(v13 - 36);
          while (v13 != v12);
          uint64_t v14 = v15;
        }
        long long v16 = v12;
        operator delete(v14);
      }
    }
  }
}

void sub_CC1AD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3C7768((void **)va);
  _Unwind_Resume(a1);
}

void sub_CC1AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_3AFFFC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_CC1B10(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "Bad optional access.");
    uint64_t v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return result;
}

void sub_CC1B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_CC1BB4(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xEEEEEEEEEEEEEEEFLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x222222222222222) {
    sub_2E00();
  }
  if (0xDDDDDDDDDDDDDDDELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0xDDDDDDDDDDDDDDDELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xEEEEEEEEEEEEEEEFLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x111111111111111) {
    unint64_t v6 = 0x222222222222222;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x222222222222222) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(120 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[120 * v3];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  uint64_t v9 = &v7[120 * v6];
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(v8 + 85) = *(void *)(a2 + 85);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  long long v10 = *(_OWORD *)(a2 + 96);
  *((void *)v8 + 14) = *(void *)(a2 + 112);
  *((_OWORD *)v8 + 6) = v10;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 96) = 0;
  uint64_t v11 = v8 + 120;
  uint64_t v12 = (void **)*a1;
  uint64_t v13 = (void **)a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    if (!v13) {
      return v11;
    }
    goto LABEL_26;
  }
  do
  {
    uint64_t v14 = v8;
    *((void *)v8 - 14) = 0;
    *((void *)v8 - 13) = 0;
    long long v15 = *(_OWORD *)(v13 - 15);
    v13 -= 15;
    *(_OWORD *)(v8 - 120) = v15;
    v8 -= 120;
    *((void *)v14 - 13) = v13[2];
    v13[1] = 0;
    __n128 v13[2] = 0;
    void *v13 = 0;
    long long v16 = *(_OWORD *)(v13 + 7);
    long long v17 = *(_OWORD *)(v13 + 9);
    uint64_t v18 = *(uint64_t *)((char *)v13 + 85);
    *(_OWORD *)(v8 + 40) = *(_OWORD *)(v13 + 5);
    *(void *)(v8 + 85) = v18;
    *(_OWORD *)(v8 + 72) = v17;
    *(_OWORD *)(v8 + 56) = v16;
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(v13 + 3);
    long long v19 = *((_OWORD *)v13 + 6);
    *((void *)v8 + 14) = v13[14];
    *((_OWORD *)v8 + 6) = v19;
    v13[13] = 0;
    v13[14] = 0;
    v13[12] = 0;
  }
  while (v13 != v12);
  uint64_t v20 = (void **)*a1;
  uint64_t v13 = (void **)a1[1];
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
  if (v13 != v20)
  {
    while (1)
    {
      if (*((char *)v13 - 1) < 0)
      {
        operator delete(*(v13 - 3));
        uint64_t v21 = v13 - 15;
        unint64_t v22 = *(v13 - 15);
        if (v22)
        {
LABEL_21:
          uint64_t v23 = (uint64_t)*(v13 - 14);
          unint64_t v24 = v22;
          if ((void *)v23 != v22)
          {
            do
              uint64_t v23 = sub_3AFFFC(v23 - 1056);
            while ((void *)v23 != v22);
            unint64_t v24 = *v21;
          }
          *(v13 - 14) = v22;
          operator delete(v24);
        }
      }
      else
      {
        uint64_t v21 = v13 - 15;
        unint64_t v22 = *(v13 - 15);
        if (v22) {
          goto LABEL_21;
        }
      }
      uint64_t v13 = v21;
      if (v21 == v20)
      {
        uint64_t v13 = v20;
        break;
      }
    }
  }
  if (v13) {
LABEL_26:
  }
    operator delete(v13);
  return v11;
}

void sub_CC1DF0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (sub_EA8E90(*(uint64_t **)a1))
  {
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(unsigned char *)(a2 + 48) = 1;
    *(unsigned char *)(a2 + 53) = 1;
    *(_DWORD *)(a2 + 54) = 0;
    *(_DWORD *)(a2 + 57) = 0;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(_DWORD *)(a2 + 88) = -1;
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 96) = 0;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(v4 + 56);
    uint64_t v5 = (uint64_t *)(v4 + 56);
    if (v6)
    {
      uint64_t v7 = *(uint64_t **)a1;
      uint64_t v8 = *(uint64_t ***)(a1 + 16);
      uint64_t v9 = sub_CC1B10(v5);
      sub_470AD8(v20, v7, v8, v9);
      char v19 = 0;
      LOBYTE(__p) = 0;
      sub_460914(a2, (uint64_t)v20, &__p);
      if (v19 < 0) {
        operator delete((void *)__p);
      }
      sub_3AFFFC((uint64_t)v20);
    }
    else
    {
      long long v10 = *(uint64_t **)a1;
      uint64_t v11 = *(uint64_t **)(a1 + 16);
      long long v16 = 0;
      uint64_t v17 = 0;
      long long v15 = 0;
      sub_C816EC((uint64_t)&v15, *v11, v11[1], 0x8E38E38E38E38E39 * ((v11[1] - *v11) >> 5));
      sub_460910(a2, v10, &v15);
      uint64_t v12 = v15;
      if (v15)
      {
        uint64_t v13 = v16;
        uint64_t v14 = v15;
        if (v16 != v15)
        {
          do
            uint64_t v13 = sub_3B0290(v13 - 36);
          while (v13 != v12);
          uint64_t v14 = v15;
        }
        long long v16 = v12;
        operator delete(v14);
      }
    }
  }
}

void sub_CC1F90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3C7768((void **)va);
  _Unwind_Resume(a1);
}

void sub_CC1FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_3AFFFC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_CC1FCC()
{
  unk_25E1AE7 = 16641;
  word_25E1AD0 = 65;
  byte_25E1AFF = 1;
  byte_25E1AE9 = 0;
}

void sub_CC1FF4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v33 = 0;
  LOBYTE(v34) = 0;
  *((void *)&v34 + 1) = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = *(uint64_t (****)())(*a1 + 360);
  if (!v4) {
    uint64_t v4 = &off_2536248;
  }
  if (((_BYTE)v4[2] & 1) == 0 || *((_DWORD *)v4 + 11) != 2)
  {
    *(unsigned char *)a2 = 1;
    *(unsigned char *)(a2 + 72) = 0;
    *(_OWORD *)(a2 + 80) = v34;
    return;
  }
  sub_725D0((uint64_t)v27);
  LOBYTE(v34) = 1;
  uint64_t v5 = *(uint64_t (****)())(v3 + 304);
  if (!v5) {
    uint64_t v5 = &off_2535C50;
  }
  uint64_t v6 = (uint64_t (***)())v5[10];
  if (!v6) {
    uint64_t v6 = &off_2535C20;
  }
  if ((_BYTE)v6[2])
  {
    uint64_t v8 = *(uint64_t (****)())(v3 + 360);
    if (!v8) {
      uint64_t v8 = &off_2536248;
    }
    sub_947B58((unint64_t)v8[3] & 0xFFFFFFFFFFFFFFFELL, (uint64_t)&__p);
    if (v18 != v19 || v20)
    {
      if (v33)
      {
        unint64_t v28 = __p.n128_u64[0];
        std::string::operator=(&v29, (const std::string *)&__p.n128_i8[8]);
        sub_41B348(&v30, (char *)v18, v19, (v19 - (unsigned char *)v18) >> 5);
        char v32 = v20;
      }
      else
      {
        sub_CC2660((char *)&v28, (uint64_t)&__p);
        unsigned __int8 v33 = 1;
      }
      *((void *)&v34 + 1) = vcvtad_u64_f64(sub_72688((uint64_t)v27));
      *(unsigned char *)a2 = 1;
      int v11 = v33;
      *(unsigned char *)(a2 + 72) = v33;
      if (v11)
      {
        std::string::size_type v12 = v29.__r_.__value_.__r.__words[2];
        *(void *)(a2 + 8) = v28;
        *(_OWORD *)(a2 + 16) = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
        *(void *)(a2 + 32) = v12;
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = 0uLL;
        *(_OWORD *)(a2 + 40) = v30;
        *(void *)(a2 + 56) = v31;
        v29.__r_.__value_.__r.__words[2] = 0;
        long long v30 = 0uLL;
        uint64_t v31 = 0;
        *(unsigned char *)(a2 + 64) = v32;
      }
      *(_OWORD *)(a2 + 80) = v34;
      long long v10 = (char *)v18;
      if (!v18) {
        goto LABEL_37;
      }
    }
    else
    {
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)&v21);
        sub_188FC78(&v21, (uint64_t)"Failed to parse route handle from the request", 45);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v13, 1u);
        if (v14 < 0) {
          operator delete((void *)v13.n128_u64[0]);
        }
        if (v26 < 0) {
          operator delete(v25);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      v13.n128_u64[0] = 1;
      v13.n128_u64[1] = (unint64_t)&off_2439090;
      sub_3E7814(&v21, &v13);
      *(unsigned char *)a2 = 0;
      long long v9 = v22;
      *(__n128 *)(a2 + 8) = v21;
      *(_OWORD *)(a2 + 24) = v9;
      *(void *)(a2 + 40) = v23;
      *(_DWORD *)(a2 + 48) = v24;
      long long v10 = (char *)v18;
      if (!v18) {
        goto LABEL_37;
      }
    }
    char v19 = v10;
    operator delete(v10);
LABEL_37:
    if (v17 < 0) {
      operator delete((void *)__p.n128_u64[1]);
    }
    goto LABEL_39;
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v21);
    sub_188FC78(&v21, (uint64_t)"Transit continuity request does not have a timepoint", 52);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v16 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    if (v26 < 0) {
      operator delete(v25);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  __p.n128_u64[0] = 1;
  __p.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(&v21, &__p);
  *(unsigned char *)a2 = 0;
  long long v7 = v22;
  *(__n128 *)(a2 + 8) = v21;
  *(_OWORD *)(a2 + 24) = v7;
  *(void *)(a2 + 40) = v23;
  *(_DWORD *)(a2 + 48) = v24;
LABEL_39:
  if (v33)
  {
    if ((void)v30)
    {
      *((void *)&v30 + 1) = v30;
      operator delete((void *)v30);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
  }
}

void sub_CC2510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a24);
  sub_946714((uint64_t)&a16);
  sub_CC2610(v24 - 144);
  _Unwind_Resume(a1);
}

void sub_CC2550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  sub_946714((uint64_t)&__p);
  sub_CC2610(v24 - 144);
  _Unwind_Resume(a1);
}

void sub_CC25D4(_Unwind_Exception *a1)
{
  sub_CC2610(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_CC25E8(_Unwind_Exception *a1)
{
  sub_CC2610(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_CC25FC(_Unwind_Exception *a1)
{
  sub_CC2610(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_CC2610(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    int v2 = *(void **)(a1 + 32);
    if (v2)
    {
      *(void *)(a1 + 40) = v2;
      operator delete(v2);
    }
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
    *(unsigned char *)(a1 + 64) = 0;
  }
  return a1;
}

char *sub_CC2660(char *result, uint64_t a2)
{
  uint64_t v3 = result;
  *(void *)uint64_t result = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t result = (char *)sub_4200(result + 8, *(void **)(a2 + 8), *(void *)(a2 + 16));
    *((void *)v3 + 4) = 0;
    *((void *)v3 + 5) = 0;
    *((void *)v3 + 6) = 0;
    uint64_t v6 = *(unsigned char **)(a2 + 32);
    uint64_t v8 = *(unsigned char **)(a2 + 40);
    int64_t v7 = v8 - v6;
    if (v8 == v6) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *((void *)result + 3) = *(void *)(a2 + 24);
    *(_OWORD *)(result + 8) = v4;
    *((void *)result + 4) = 0;
    *((void *)result + 5) = 0;
    *((void *)result + 6) = 0;
    uint64_t v6 = *(unsigned char **)(a2 + 32);
    uint64_t v5 = *(unsigned char **)(a2 + 40);
    int64_t v7 = v5 - v6;
    if (v5 == v6) {
      goto LABEL_7;
    }
  }
  if (v7 < 0) {
    sub_2E00();
  }
  long long v9 = (char *)operator new(v7);
  *((void *)v3 + 4) = v9;
  *((void *)v3 + 5) = v9;
  long long v10 = &v9[32 * (v7 >> 5)];
  *((void *)v3 + 6) = v10;
  uint64_t result = (char *)memcpy(v9, v6, v7 - 4);
  *((void *)v3 + 5) = v10;
LABEL_7:
  v3[56] = *(unsigned char *)(a2 + 56);
  return result;
}

void sub_CC273C(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
    if ((*(char *)(v1 + 31) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_CC2778(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (sub_EA80FC((char **)*a1)
    || (uint64_t v5 = (void *)a1[1], !sub_DAA288((uint64_t)v5)) && v5[13] == v5[14] && v5[16] == v5[17])
  {
    *(void *)uint64_t v95 = 11;
    *(void *)&v95[8] = &off_2439090;
    sub_3E7814(&v83, (__n128 *)v95);
    *(unsigned char *)a2 = 0;
    long long v4 = v84;
    *(__n128 *)(a2 + 8) = v83;
    *(_OWORD *)(a2 + 24) = v4;
    *(void *)(a2 + 40) = v85;
    *(_DWORD *)(a2 + 48) = DWORD2(v85);
    return;
  }
  sub_725D0((uint64_t)v94);
  v83.n128_u64[0] = -1;
  v83.n128_u32[2] = 0x7FFFFFFF;
  *(void *)&long long v84 = -1;
  *((void *)&v84 + 1) = -1;
  long long v85 = 0x7FFFFFFFFFFFFFFFuLL;
  *(_DWORD *)uint64_t v86 = -1935635296;
  *(void *)&v86[8] = 0;
  *(_DWORD *)&v86[15] = 0;
  v87[0] = 0;
  v87[1] = 0;
  uint64_t v88 = 0;
  int v89 = 0;
  char v90 = 100;
  memset(v91, 0, 55);
  long long v92 = xmmword_20E8160;
  uint64_t v93 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v6 = (uint64_t *)nullsub_1(*a1);
  *((void *)&v92 + 1) = sub_EB15DC(*v6);
  uint64_t v7 = a1[3];
  *(void *)uint64_t v95 = operator new(0x28uLL);
  *(_OWORD *)&v95[8] = xmmword_20B9280;
  strcpy(*(char **)v95, "SARReferencePointComputationModule");
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v82 = 0;
  uint64_t v8 = sub_374CDC(v7, (uint64_t)v95, (uint64_t *)__p);
  long long v9 = (void **)__p[0];
  if (__p[0])
  {
    long long v10 = (void **)__p[1];
    int v11 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      int v11 = __p[0];
    }
    __p[1] = v9;
    operator delete(v11);
  }
  if ((v95[23] & 0x80000000) != 0) {
    operator delete(*(void **)v95);
  }
  v95[23] = 7;
  strcpy(v95, "enabled");
  BOOL v12 = sub_29D62C(v8, (uint64_t)v95);
  BOOL v13 = v12;
  if ((v95[23] & 0x80000000) == 0)
  {
    if (v12) {
      goto LABEL_18;
    }
LABEL_24:
    uint64_t v16 = a1[1];
    __n128 v83 = *(__n128 *)v16;
    long long v18 = *(_OWORD *)(v16 + 32);
    long long v17 = *(_OWORD *)(v16 + 48);
    long long v19 = *(_OWORD *)(v16 + 16);
    *(_DWORD *)&v86[15] = *(_DWORD *)(v16 + 63);
    long long v85 = v18;
    *(_OWORD *)uint64_t v86 = v17;
    long long v84 = v19;
    if (&v83 != (__n128 *)v16)
    {
      sub_147D0(v87, *(char **)(v16 + 72), *(char **)(v16 + 80), (uint64_t)(*(void *)(v16 + 80) - *(void *)(v16 + 72)) >> 2);
      int v20 = *(_DWORD *)(v16 + 96);
      char v90 = *(unsigned char *)(v16 + 100);
      int v89 = v20;
      sub_BE7EAC((char **)v91, *(long long **)(v16 + 104), *(long long **)(v16 + 112), (uint64_t)(*(void *)(v16 + 112) - *(void *)(v16 + 104)) >> 6);
      sub_BE7EAC((char **)&v91[3], *(long long **)(v16 + 128), *(long long **)(v16 + 136), (uint64_t)(*(void *)(v16 + 136) - *(void *)(v16 + 128)) >> 6);
    }
    int v21 = *(_DWORD *)(v16 + 152);
    *(_DWORD *)((char *)&v91[6] + 3) = *(_DWORD *)(v16 + 155);
    LODWORD(v91[6]) = v21;
    unint64_t v22 = (unint64_t)sub_72688((uint64_t)v94);
    __n128 v23 = v83;
    *(_OWORD *)(a2 + 24) = v84;
    long long v24 = *(_OWORD *)v86;
    *(_OWORD *)(a2 + 40) = v85;
    *(_OWORD *)(a2 + 56) = v24;
    uint64_t v93 = *((void *)&v92 + 1);
    *(unsigned char *)a2 = 1;
    *(_DWORD *)(a2 + 71) = *(_DWORD *)&v86[15];
    *(__n128 *)(a2 + 8) = v23;
    long long v25 = *(_OWORD *)v87;
    *(void *)(a2 + 96) = v88;
    v87[1] = 0;
    uint64_t v88 = 0;
    v87[0] = 0;
    *(_DWORD *)(a2 + 104) = v89;
    *(unsigned char *)(a2 + 108) = v90;
    char v26 = v91[5];
    *(void **)(a2 + 128) = v91[2];
    *(_OWORD *)(a2 + 80) = v25;
    *(_OWORD *)(a2 + 112) = *(_OWORD *)v91;
    goto LABEL_51;
  }
  operator delete(*(void **)v95);
  if (!v13) {
    goto LABEL_24;
  }
LABEL_18:
  v95[23] = 15;
  strcpy(v95, "distance_factor");
  double v14 = sub_5C7E8(v8, (uint64_t)v95) * (double)(uint64_t)a1[2];
  if (v14 >= 0.0)
  {
    if (v14 >= 4.50359963e15) {
      goto LABEL_30;
    }
    uint64_t v15 = (uint64_t)(v14 + v14) + 1;
  }
  else
  {
    if (v14 <= -4.50359963e15) {
      goto LABEL_30;
    }
    uint64_t v15 = (uint64_t)(v14 + v14);
    if (v15 >= 1) {
      --v15;
    }
  }
  double v14 = (double)(v15 >> 1);
LABEL_30:
  HIBYTE(v82) = 15;
  strcpy((char *)__p, "max_distance_km");
  uint64_t v27 = sub_5CDE0(v8, __p);
  if (v27 <= (uint64_t)v14) {
    uint64_t v28 = (uint64_t)v14;
  }
  else {
    uint64_t v28 = v27;
  }
  if (SHIBYTE(v82) < 0)
  {
    operator delete(__p[0]);
    if ((v95[23] & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_44:
    operator delete(*(void **)v95);
    goto LABEL_35;
  }
  if ((v95[23] & 0x80000000) != 0) {
    goto LABEL_44;
  }
LABEL_35:
  std::string v29 = (void **)nullsub_1(*a1);
  sub_EB00A0(*v29, (uint64_t)__p);
  if (__p[0] != __p[1])
  {
    uint64_t v30 = 0;
    uint64_t v31 = __p[0];
    while (v30 < v28)
    {
      char v32 = (unsigned __int16 *)(*v31 - *(int *)*v31);
      if (*v32 >= 9u && (uint64_t v33 = v32[4]) != 0)
      {
        v30 += *(unsigned int *)(*v31 + v33);
        v31 += 5;
        if (v31 == __p[1]) {
          goto LABEL_46;
        }
      }
      else
      {
        v31 += 5;
        if (v31 == __p[1]) {
          goto LABEL_46;
        }
      }
    }
    uint64_t v44 = *((unsigned __int16 *)v31 + 18);
    uint64_t v45 = *((unsigned int *)v31 + 8);
    uint64_t v46 = (unsigned __int16 *)(*v31 - *(int *)*v31);
    if (*v46 < 9u)
    {
      uint64_t v47 = 0;
      uint64_t v48 = v45 | (v44 << 32);
      unint64_t v50 = v91[1];
      unint64_t v49 = v91[2];
      if (v91[1] < v91[2])
      {
LABEL_61:
        void *v50 = 0;
        v50[1] = -1;
        *((_DWORD *)v50 + 4) = 0x7FFFFFFF;
        v50[3] = v47;
        v50[4] = v48;
        *((_DWORD *)v50 + 10) = 16842752;
        v50[6] = 0;
        char v51 = v50 + 8;
        *((unsigned char *)v50 + 56) = 0;
        goto LABEL_76;
      }
    }
    else
    {
      uint64_t v47 = v46[4];
      if (v47) {
        uint64_t v47 = *(unsigned int *)(*v31 + v47);
      }
      uint64_t v48 = v45 | (v44 << 32);
      unint64_t v50 = v91[1];
      unint64_t v49 = v91[2];
      if (v91[1] < v91[2]) {
        goto LABEL_61;
      }
    }
    char v52 = v91[0];
    unint64_t v53 = (((char *)v50 - (char *)v91[0]) >> 6) + 1;
    if (v53 >> 58) {
      sub_2E00();
    }
    uint64_t v78 = ((char *)v50 - (char *)v91[0]) >> 6;
    uint64_t v79 = v48;
    uint64_t v80 = v47;
    uint64_t v54 = v49 - (char *)v91[0];
    if (v54 >> 5 > v53) {
      unint64_t v53 = v54 >> 5;
    }
    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v55 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v55 = v53;
    }
    if (v55 >> 58) {
      sub_188D718();
    }
    int v56 = (char *)operator new(v55 << 6);
    long long v57 = &v56[64 * v78];
    *((_DWORD *)v57 + 4) = 0x7FFFFFFF;
    *(void *)long long v57 = 0;
    *((void *)v57 + 1) = -1;
    long long v58 = &v56[64 * v55];
    *((void *)v57 + 3) = v80;
    *((void *)v57 + 4) = v79;
    *((_DWORD *)v57 + 10) = 16842752;
    *((void *)v57 + 6) = 0;
    char v51 = v57 + 64;
    v57[56] = 0;
    if (v50 == v52)
    {
      int v59 = &v56[64 * v78];
    }
    else
    {
      do
      {
        int v59 = v57 - 64;
        long long v60 = *((_OWORD *)v50 - 4);
        long long v61 = *((_OWORD *)v50 - 3);
        *((void *)v57 - 4) = *(v50 - 4);
        *((_OWORD *)v57 - 4) = v60;
        *((_OWORD *)v57 - 3) = v61;
        *((_WORD *)v57 - 12) = *((_WORD *)v50 - 12);
        *((_WORD *)v57 - 11) = *((_WORD *)v50 - 11);
        uint64_t v62 = *(v50 - 2);
        *(v57 - 8) = *((unsigned char *)v50 - 8);
        *((void *)v57 - 2) = v62;
        v50 -= 8;
        v57 -= 64;
      }
      while (v50 != v52);
    }
    v91[0] = v59;
    v91[1] = v51;
    v91[2] = v58;
    if (v52) {
      operator delete(v52);
    }
LABEL_76:
    v91[1] = v51;
    LODWORD(v91[6]) = 1;
    uint64_t v63 = sub_3750CC((void *)a1[3]);
    sub_2954EC(v63, v31[4], (uint64_t)v95);
    long long v64 = *(void **)&v95[8];
    if (*(void *)&v95[8] == *(void *)&v95[16])
    {
      unsigned __int32 v68 = 0x7FFFFFFF;
      unint64_t v69 = 0xFFFFFFFF00000000;
      uint64_t v70 = 0xFFFFFFFFLL;
      if (!*(void *)&v95[8]) {
        goto LABEL_79;
      }
    }
    else
    {
      unint64_t v65 = sub_2E1AA4((uint64_t)v95);
      unsigned int v66 = v65;
      unsigned __int32 v68 = v67;
      unint64_t v69 = v65 & 0xFFFFFFFF00000000;
      long long v64 = *(void **)&v95[8];
      uint64_t v70 = v66;
      if (!*(void *)&v95[8])
      {
LABEL_79:
        v83.n128_u64[0] = v69 | v70;
        v83.n128_u32[2] = v68;
        double v71 = sub_72688((uint64_t)v94);
        __n128 v72 = v83;
        *(_OWORD *)(a2 + 24) = v84;
        long long v73 = *(_OWORD *)v86;
        *(_OWORD *)(a2 + 40) = v85;
        *(_OWORD *)(a2 + 56) = v73;
        uint64_t v93 = v30;
        *(unsigned char *)a2 = 1;
        *(_DWORD *)(a2 + 71) = *(_DWORD *)&v86[15];
        *(__n128 *)(a2 + 8) = v72;
        *(_OWORD *)(a2 + 80) = *(_OWORD *)v87;
        *(void *)(a2 + 96) = v88;
        v87[1] = 0;
        uint64_t v88 = 0;
        v87[0] = 0;
        *(_DWORD *)(a2 + 104) = v89;
        *(unsigned char *)(a2 + 108) = v90;
        *(_OWORD *)(a2 + 112) = *(_OWORD *)v91;
        unint64_t v74 = v91[5];
        *(void **)(a2 + 128) = v91[2];
        memset(v91, 0, 24);
        *(_OWORD *)(a2 + 136) = *(_OWORD *)&v91[3];
        *(void *)(a2 + 152) = v74;
        memset(&v91[3], 0, 24);
        *(void *)&long long v92 = (unint64_t)v71;
        int v75 = (int)v91[6];
        *(_DWORD *)(a2 + 163) = *(_DWORD *)((char *)&v91[6] + 3);
        *(_DWORD *)(a2 + 160) = v75;
        uint64_t v76 = __p[0];
        long long v77 = v92;
        *(void *)(a2 + 184) = v93;
        *(_OWORD *)(a2 + 168) = v77;
        if (v76)
        {
          __p[1] = v76;
          operator delete(v76);
          if (v91[3])
          {
            v91[4] = v91[3];
            operator delete(v91[3]);
          }
        }
        goto LABEL_52;
      }
    }
    *(void *)&v95[16] = v64;
    operator delete(v64);
    goto LABEL_79;
  }
  uint64_t v30 = 0;
LABEL_46:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v34 = a1[1];
  __n128 v83 = *(__n128 *)v34;
  long long v36 = *(_OWORD *)(v34 + 32);
  long long v35 = *(_OWORD *)(v34 + 48);
  long long v37 = *(_OWORD *)(v34 + 16);
  *(_DWORD *)&v86[15] = *(_DWORD *)(v34 + 63);
  long long v85 = v36;
  *(_OWORD *)uint64_t v86 = v35;
  long long v84 = v37;
  if (&v83 != (__n128 *)v34)
  {
    sub_147D0(v87, *(char **)(v34 + 72), *(char **)(v34 + 80), (uint64_t)(*(void *)(v34 + 80) - *(void *)(v34 + 72)) >> 2);
    int v38 = *(_DWORD *)(v34 + 96);
    char v90 = *(unsigned char *)(v34 + 100);
    int v89 = v38;
    sub_BE7EAC((char **)v91, *(long long **)(v34 + 104), *(long long **)(v34 + 112), (uint64_t)(*(void *)(v34 + 112) - *(void *)(v34 + 104)) >> 6);
    sub_BE7EAC((char **)&v91[3], *(long long **)(v34 + 128), *(long long **)(v34 + 136), (uint64_t)(*(void *)(v34 + 136) - *(void *)(v34 + 128)) >> 6);
  }
  int v39 = *(_DWORD *)(v34 + 152);
  *(_DWORD *)((char *)&v91[6] + 3) = *(_DWORD *)(v34 + 155);
  LODWORD(v91[6]) = v39;
  unint64_t v22 = (unint64_t)sub_72688((uint64_t)v94);
  __n128 v40 = v83;
  *(_OWORD *)(a2 + 24) = v84;
  long long v41 = *(_OWORD *)v86;
  *(_OWORD *)(a2 + 40) = v85;
  *(_OWORD *)(a2 + 56) = v41;
  uint64_t v93 = v30;
  *(unsigned char *)a2 = 1;
  *(_DWORD *)(a2 + 71) = *(_DWORD *)&v86[15];
  *(__n128 *)(a2 + 8) = v40;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)v87;
  *(void *)(a2 + 96) = v88;
  v87[1] = 0;
  uint64_t v88 = 0;
  v87[0] = 0;
  *(_DWORD *)(a2 + 104) = v89;
  *(unsigned char *)(a2 + 108) = v90;
  *(_OWORD *)(a2 + 112) = *(_OWORD *)v91;
  char v26 = v91[5];
  *(void **)(a2 + 128) = v91[2];
LABEL_51:
  memset(v91, 0, 24);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)&v91[3];
  *(void *)(a2 + 152) = v26;
  memset(&v91[3], 0, 24);
  *(void *)&long long v92 = v22;
  int v42 = (int)v91[6];
  *(_DWORD *)(a2 + 163) = *(_DWORD *)((char *)&v91[6] + 3);
  *(_DWORD *)(a2 + 160) = v42;
  long long v43 = v92;
  *(void *)(a2 + 184) = v93;
  *(_OWORD *)(a2 + 168) = v43;
LABEL_52:
  if (v91[0])
  {
    v91[1] = v91[0];
    operator delete(v91[0]);
  }
  if (v87[0])
  {
    v87[1] = v87[0];
    operator delete(v87[0]);
  }
}

void sub_CC30C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  unint64_t v22 = *(void **)(v20 - 144);
  if (v22)
  {
    *(void *)(v20 - 136) = v22;
    operator delete(v22);
  }
  if (__p)
  {
    operator delete(__p);
    sub_C08338(&a20);
    _Unwind_Resume(a1);
  }
  sub_C08338(&a20);
  _Unwind_Resume(a1);
}

void sub_CC317C(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (sub_EA8E90((uint64_t *)*a1)
    || (uint64_t v5 = (void *)a1[1], !sub_DAA288((uint64_t)v5)) && v5[13] == v5[14] && v5[16] == v5[17])
  {
    v86[0].n128_u64[0] = 11;
    v86[0].n128_u64[1] = (unint64_t)&off_2439090;
    sub_3E7814(&v75, v86);
    *(unsigned char *)a2 = 0;
    long long v4 = v76;
    *(__n128 *)(a2 + 8) = v75;
    *(_OWORD *)(a2 + 24) = v4;
    *(void *)(a2 + 40) = v77;
    *(_DWORD *)(a2 + 48) = DWORD2(v77);
    return;
  }
  sub_725D0((uint64_t)v86);
  v75.n128_u64[0] = -1;
  v75.n128_u32[2] = 0x7FFFFFFF;
  *(void *)&long long v76 = -1;
  *((void *)&v76 + 1) = -1;
  long long v77 = 0x7FFFFFFFFFFFFFFFuLL;
  *(_DWORD *)uint64_t v78 = -1935635296;
  *(void *)&v78[8] = 0;
  *(_DWORD *)&v78[15] = 0;
  v79[0] = 0;
  v79[1] = 0;
  uint64_t v80 = 0;
  int v81 = 0;
  char v82 = 100;
  memset(v83, 0, 55);
  long long v84 = xmmword_20E8160;
  uint64_t v85 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v6 = (uint64_t *)nullsub_1(*a1);
  *((void *)&v84 + 1) = sub_EB40C0(*v6);
  uint64_t v7 = a1[3];
  uint64_t v73 = 0;
  *(void *)unint64_t v74 = operator new(0x28uLL);
  *(_OWORD *)&v74[8] = xmmword_20B9280;
  strcpy(*(char **)v74, "SARReferencePointComputationModule");
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v8 = sub_374CDC(v7, (uint64_t)v74, (uint64_t *)__p);
  long long v9 = (void **)__p[0];
  if (__p[0])
  {
    long long v10 = (void **)__p[1];
    int v11 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      int v11 = __p[0];
    }
    __p[1] = v9;
    operator delete(v11);
  }
  if ((v74[23] & 0x80000000) != 0) {
    operator delete(*(void **)v74);
  }
  v74[23] = 7;
  strcpy(v74, "enabled");
  BOOL v12 = sub_29D62C(v8, (uint64_t)v74);
  BOOL v13 = v12;
  if ((v74[23] & 0x80000000) == 0)
  {
    if (v12) {
      goto LABEL_18;
    }
LABEL_24:
    uint64_t v16 = a1[1];
    __n128 v75 = *(__n128 *)v16;
    long long v18 = *(_OWORD *)(v16 + 32);
    long long v17 = *(_OWORD *)(v16 + 48);
    long long v19 = *(_OWORD *)(v16 + 16);
    *(_DWORD *)&v78[15] = *(_DWORD *)(v16 + 63);
    long long v77 = v18;
    *(_OWORD *)uint64_t v78 = v17;
    long long v76 = v19;
    if (&v75 != (__n128 *)v16)
    {
      sub_147D0(v79, *(char **)(v16 + 72), *(char **)(v16 + 80), (uint64_t)(*(void *)(v16 + 80) - *(void *)(v16 + 72)) >> 2);
      int v20 = *(_DWORD *)(v16 + 96);
      char v82 = *(unsigned char *)(v16 + 100);
      int v81 = v20;
      sub_BE7EAC((char **)v83, *(long long **)(v16 + 104), *(long long **)(v16 + 112), (uint64_t)(*(void *)(v16 + 112) - *(void *)(v16 + 104)) >> 6);
      sub_BE7EAC((char **)&v83[3], *(long long **)(v16 + 128), *(long long **)(v16 + 136), (uint64_t)(*(void *)(v16 + 136) - *(void *)(v16 + 128)) >> 6);
    }
    int v21 = *(_DWORD *)(v16 + 152);
    *(_DWORD *)((char *)&v83[6] + 3) = *(_DWORD *)(v16 + 155);
    LODWORD(v83[6]) = v21;
    unint64_t v22 = (unint64_t)sub_72688((uint64_t)v86);
    __n128 v23 = v75;
    *(_OWORD *)(a2 + 24) = v76;
    long long v24 = *(_OWORD *)v78;
    *(_OWORD *)(a2 + 40) = v77;
    *(_OWORD *)(a2 + 56) = v24;
    uint64_t v85 = *((void *)&v84 + 1);
    *(unsigned char *)a2 = 1;
    *(_DWORD *)(a2 + 71) = *(_DWORD *)&v78[15];
    *(void *)(a2 + 96) = v80;
    *(__n128 *)(a2 + 8) = v23;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)v79;
    goto LABEL_51;
  }
  operator delete(*(void **)v74);
  if (!v13) {
    goto LABEL_24;
  }
LABEL_18:
  v74[23] = 15;
  strcpy(v74, "distance_factor");
  double v14 = sub_5C7E8(v8, (uint64_t)v74) * (double)(uint64_t)a1[2];
  if (v14 >= 0.0)
  {
    if (v14 >= 4.50359963e15) {
      goto LABEL_30;
    }
    uint64_t v15 = (uint64_t)(v14 + v14) + 1;
  }
  else
  {
    if (v14 <= -4.50359963e15) {
      goto LABEL_30;
    }
    uint64_t v15 = (uint64_t)(v14 + v14);
    if (v15 >= 1) {
      --v15;
    }
  }
  double v14 = (double)(v15 >> 1);
LABEL_30:
  HIBYTE(v73) = 15;
  strcpy((char *)__p, "max_distance_km");
  uint64_t v25 = sub_5CDE0(v8, __p);
  if (v25 <= (uint64_t)v14) {
    uint64_t v26 = (uint64_t)v14;
  }
  else {
    uint64_t v26 = v25;
  }
  if (SHIBYTE(v73) < 0)
  {
    operator delete(__p[0]);
    if ((v74[23] & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_44:
    operator delete(*(void **)v74);
    goto LABEL_35;
  }
  if ((v74[23] & 0x80000000) != 0) {
    goto LABEL_44;
  }
LABEL_35:
  uint64_t v27 = (uint64_t *)nullsub_1(*a1);
  sub_EB2AF8(*v27, (uint64_t)v74);
  if (*(void *)v74 != *(void *)&v74[8])
  {
    uint64_t v28 = 0;
    std::string v29 = *(unsigned int **)v74;
    while (v28 < v26)
    {
      uint64_t v30 = (int *)*((void *)v29 + 1);
      uint64_t v31 = (unsigned __int16 *)((char *)v30 - *v30);
      if (*v31 >= 9u && (uint64_t v32 = v31[4]) != 0)
      {
        v28 += *(unsigned int *)((char *)v30 + v32);
        v29 += 12;
        if (v29 == *(unsigned int **)&v74[8]) {
          goto LABEL_46;
        }
      }
      else
      {
        v29 += 12;
        if (v29 == *(unsigned int **)&v74[8]) {
          goto LABEL_46;
        }
      }
    }
    uint64_t v43 = *v29;
    uint64_t v44 = v29[1] & 0x1FFFFFFF;
    uint64_t v45 = (int *)*((void *)v29 + 1);
    uint64_t v46 = (unsigned __int16 *)((char *)v45 - *v45);
    if (*v46 < 9u)
    {
      uint64_t v47 = 0;
      uint64_t v48 = v43 | (v44 << 32);
      unint64_t v50 = v83[1];
      unint64_t v49 = v83[2];
      if (v83[1] < v83[2])
      {
LABEL_61:
        void *v50 = 0;
        v50[1] = -1;
        *((_DWORD *)v50 + 4) = 0x7FFFFFFF;
        v50[3] = v47;
        v50[4] = v48;
        *((_DWORD *)v50 + 10) = 16842752;
        v50[6] = 0;
        char v51 = v50 + 8;
        *((unsigned char *)v50 + 56) = 0;
LABEL_76:
        v83[1] = v51;
        LODWORD(v83[6]) = 1;
        uint64_t v63 = sub_3750CC((void *)a1[3]);
        v75.n128_u64[0] = sub_3BE8C8(v63, v29, 0);
        v75.n128_u32[2] = v64;
        double v65 = sub_72688((uint64_t)v86);
        __n128 v66 = v75;
        *(_OWORD *)(a2 + 24) = v76;
        long long v67 = *(_OWORD *)v78;
        *(_OWORD *)(a2 + 40) = v77;
        *(_OWORD *)(a2 + 56) = v67;
        uint64_t v85 = v28;
        *(unsigned char *)a2 = 1;
        *(_DWORD *)(a2 + 71) = *(_DWORD *)&v78[15];
        *(__n128 *)(a2 + 8) = v66;
        *(_OWORD *)(a2 + 80) = *(_OWORD *)v79;
        *(void *)(a2 + 96) = v80;
        v79[1] = 0;
        uint64_t v80 = 0;
        v79[0] = 0;
        *(_DWORD *)(a2 + 104) = v81;
        *(unsigned char *)(a2 + 108) = v82;
        *(_OWORD *)(a2 + 112) = *(_OWORD *)v83;
        *(void **)(a2 + 128) = v83[2];
        memset(v83, 0, 24);
        *(_OWORD *)(a2 + 136) = *(_OWORD *)&v83[3];
        *(void **)(a2 + 152) = v83[5];
        memset(&v83[3], 0, 24);
        *(void *)&long long v84 = (unint64_t)v65;
        int v68 = (int)v83[6];
        *(_DWORD *)(a2 + 163) = *(_DWORD *)((char *)&v83[6] + 3);
        *(_DWORD *)(a2 + 160) = v68;
        long long v69 = v84;
        *(void *)(a2 + 184) = v85;
        *(_OWORD *)(a2 + 168) = v69;
        if (*(void *)v74)
        {
          *(void *)&v74[8] = *(void *)v74;
          operator delete(*(void **)v74);
          if (v83[3])
          {
            v83[4] = v83[3];
            operator delete(v83[3]);
          }
        }
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v47 = v46[4];
      if (v47) {
        uint64_t v47 = *(unsigned int *)((char *)v45 + v47);
      }
      uint64_t v48 = v43 | (v44 << 32);
      unint64_t v50 = v83[1];
      unint64_t v49 = v83[2];
      if (v83[1] < v83[2]) {
        goto LABEL_61;
      }
    }
    char v52 = v83[0];
    uint64_t v53 = ((char *)v50 - (char *)v83[0]) >> 6;
    unint64_t v54 = v53 + 1;
    if ((unint64_t)(v53 + 1) >> 58) {
      sub_2E00();
    }
    uint64_t v70 = v48;
    uint64_t v71 = v47;
    uint64_t v55 = v49 - (char *)v83[0];
    if (v55 >> 5 > v54) {
      unint64_t v54 = v55 >> 5;
    }
    if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v56 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v56 = v54;
    }
    if (v56 >> 58) {
      sub_188D718();
    }
    long long v57 = (char *)operator new(v56 << 6);
    long long v58 = &v57[64 * v53];
    *((_DWORD *)v58 + 4) = 0x7FFFFFFF;
    *(void *)long long v58 = 0;
    *((void *)v58 + 1) = -1;
    *((void *)v58 + 3) = v71;
    *((void *)v58 + 4) = v70;
    *((_DWORD *)v58 + 10) = 16842752;
    *((void *)v58 + 6) = 0;
    char v51 = v58 + 64;
    v58[56] = 0;
    if (v50 == v52)
    {
      int v59 = v58;
    }
    else
    {
      do
      {
        int v59 = v58 - 64;
        long long v60 = *((_OWORD *)v50 - 4);
        long long v61 = *((_OWORD *)v50 - 3);
        *((void *)v58 - 4) = *(v50 - 4);
        *((_OWORD *)v58 - 4) = v60;
        *((_OWORD *)v58 - 3) = v61;
        *((_WORD *)v58 - 12) = *((_WORD *)v50 - 12);
        *((_WORD *)v58 - 11) = *((_WORD *)v50 - 11);
        uint64_t v62 = *(v50 - 2);
        *(v58 - 8) = *((unsigned char *)v50 - 8);
        *((void *)v58 - 2) = v62;
        v50 -= 8;
        v58 -= 64;
      }
      while (v50 != v52);
    }
    v83[0] = v59;
    v83[1] = v51;
    void v83[2] = &v57[64 * v56];
    if (v52) {
      operator delete(v52);
    }
    goto LABEL_76;
  }
  uint64_t v28 = 0;
LABEL_46:
  if (*(void *)v74)
  {
    *(void *)&v74[8] = *(void *)v74;
    operator delete(*(void **)v74);
  }
  uint64_t v33 = a1[1];
  __n128 v75 = *(__n128 *)v33;
  long long v35 = *(_OWORD *)(v33 + 32);
  long long v34 = *(_OWORD *)(v33 + 48);
  long long v36 = *(_OWORD *)(v33 + 16);
  *(_DWORD *)&v78[15] = *(_DWORD *)(v33 + 63);
  long long v77 = v35;
  *(_OWORD *)uint64_t v78 = v34;
  long long v76 = v36;
  if (&v75 != (__n128 *)v33)
  {
    sub_147D0(v79, *(char **)(v33 + 72), *(char **)(v33 + 80), (uint64_t)(*(void *)(v33 + 80) - *(void *)(v33 + 72)) >> 2);
    int v37 = *(_DWORD *)(v33 + 96);
    char v82 = *(unsigned char *)(v33 + 100);
    int v81 = v37;
    sub_BE7EAC((char **)v83, *(long long **)(v33 + 104), *(long long **)(v33 + 112), (uint64_t)(*(void *)(v33 + 112) - *(void *)(v33 + 104)) >> 6);
    sub_BE7EAC((char **)&v83[3], *(long long **)(v33 + 128), *(long long **)(v33 + 136), (uint64_t)(*(void *)(v33 + 136) - *(void *)(v33 + 128)) >> 6);
  }
  int v38 = *(_DWORD *)(v33 + 152);
  *(_DWORD *)((char *)&v83[6] + 3) = *(_DWORD *)(v33 + 155);
  LODWORD(v83[6]) = v38;
  unint64_t v22 = (unint64_t)sub_72688((uint64_t)v86);
  __n128 v39 = v75;
  *(_OWORD *)(a2 + 24) = v76;
  long long v40 = *(_OWORD *)v78;
  *(_OWORD *)(a2 + 40) = v77;
  *(_OWORD *)(a2 + 56) = v40;
  uint64_t v85 = v28;
  *(unsigned char *)a2 = 1;
  *(_DWORD *)(a2 + 71) = *(_DWORD *)&v78[15];
  *(__n128 *)(a2 + 8) = v39;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)v79;
  *(void *)(a2 + 96) = v80;
LABEL_51:
  v79[1] = 0;
  uint64_t v80 = 0;
  v79[0] = 0;
  *(_DWORD *)(a2 + 104) = v81;
  *(unsigned char *)(a2 + 108) = v82;
  *(_OWORD *)(a2 + 112) = *(_OWORD *)v83;
  *(void **)(a2 + 128) = v83[2];
  memset(v83, 0, 24);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)&v83[3];
  *(void **)(a2 + 152) = v83[5];
  memset(&v83[3], 0, 24);
  *(void *)&long long v84 = v22;
  int v41 = (int)v83[6];
  *(_DWORD *)(a2 + 163) = *(_DWORD *)((char *)&v83[6] + 3);
  *(_DWORD *)(a2 + 160) = v41;
  long long v42 = v84;
  *(void *)(a2 + 184) = v85;
  *(_OWORD *)(a2 + 168) = v42;
LABEL_52:
  if (v83[0])
  {
    v83[1] = v83[0];
    operator delete(v83[0]);
  }
  if (v79[0])
  {
    v79[1] = v79[0];
    operator delete(v79[0]);
  }
}

void sub_CC3A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  if (__p)
  {
    operator delete(__p);
    sub_C08338(&a25);
    _Unwind_Resume(a1);
  }
  sub_C08338(&a25);
  _Unwind_Resume(a1);
}

void sub_CC3AE4()
{
  unk_25E1B17 = 16641;
  word_25E1B00 = 65;
  byte_25E1B2F = 1;
  byte_25E1B19 = 0;
}

void sub_CC3B0C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v14);
  *(unsigned char *)a2 = 1;
  bzero((void *)(a2 + 8), 0x2D0uLL);
  *(void *)(a2 + 480) = 0x3FF0000000000000;
  *(void *)(a2 + 488) = 0;
  *(void *)(a2 + 496) = 0;
  *(void *)(a2 + 504) = 0;
  *(unsigned char *)(a2 + 512) = 5;
  *(_OWORD *)(a2 + 520) = 0u;
  *(_OWORD *)(a2 + 536) = 0u;
  *(_OWORD *)(a2 + 552) = 0u;
  *(_DWORD *)(a2 + 568) = 0x7FFFFFFF;
  *(void *)(a2 + 664) = 0;
  *(void *)(a2 + 656) = 0;
  *(_OWORD *)(a2 + 576) = 0u;
  *(_OWORD *)(a2 + 592) = 0u;
  *(_OWORD *)(a2 + 608) = 0u;
  *(_OWORD *)(a2 + 624) = 0u;
  *(_OWORD *)(a2 + 633) = 0u;
  *(void *)(a2 + 672) = -1;
  *(_DWORD *)(a2 + 680) = 0x7FFFFFFF;
  *(void *)(a2 + 696) = -1;
  *(_DWORD *)(a2 + 704) = -1;
  *(void *)(a2 + 728) = 0;
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4)
  {
    if (v4 != 1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1627A14(v15, *(void *)a1);
    unsigned int v5 = sub_DB7034((uint64_t)v15);
    sub_DB6A08((uint64_t)v15, (uint64_t)v16);
    sub_CA0FF4(a2 + 8, (uint64_t)v16);
    sub_4BCC2C((uint64_t)v16);
    sub_494284(1, v5, a2 + 8);
    uint64_t v6 = sub_DC6EB0((uint64_t)v15);
    if (sub_DE7FB0(v5))
    {
      uint64_t v7 = sub_486CB4(a2 + 8);
      uint64_t v9 = *(void *)(v7 + 160);
      uint64_t v8 = *(void *)(v7 + 168);
      int v10 = 1;
      if (v9 != v8 && v6 != 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v11 = *(void *)(a1 + 24);
        if (v11 != 0x7FFFFFFFFFFFFFFFLL && v11 > v6)
        {
          uint64_t v12 = *(void *)(v7 + 168);
          while (v12 != v9)
          {
            uint64_t v13 = *(void *)(v12 - 8);
            v12 -= 56;
            if (v11 <= v13)
            {
              uint64_t v9 = v12 + 56;
              break;
            }
          }
          int v10 = -1227133513 * ((unint64_t)(v8 - v9) >> 3) + 2;
        }
      }
    }
    else
    {
      int v10 = 0;
    }
    *(_DWORD *)(a2 + 720) = v10;
    sub_1627DB4(v15);
    int v4 = *(_DWORD *)(a1 + 8);
    if (v4 != 1)
    {
LABEL_3:
      if (v4 != 2) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  sub_DB8768(*(void *)a1, (uint64_t)v16);
  sub_CA0FF4(a2 + 8, (uint64_t)v16);
  sub_4BCC2C((uint64_t)v16);
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4 != 2)
  {
LABEL_4:
    if (v4 != 3) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  sub_DC2CD8(*(void *)a1, (uint64_t)v16);
  sub_CA0FF4(a2 + 8, (uint64_t)v16);
  sub_4BCC2C((uint64_t)v16);
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4 != 3)
  {
LABEL_5:
    if (v4 != 4) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  sub_DB9FC4((uint64_t)v16);
  sub_CA0FF4(a2 + 8, (uint64_t)v16);
  sub_4BCC2C((uint64_t)v16);
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4 != 4)
  {
LABEL_6:
    if (v4 != 5) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_23:
  sub_DB9FC4((uint64_t)v16);
  sub_CA0FF4(a2 + 8, (uint64_t)v16);
  sub_4BCC2C((uint64_t)v16);
  if (*(_DWORD *)(a1 + 8) == 5)
  {
LABEL_24:
    sub_DB9FC4((uint64_t)v16);
    sub_CA0FF4(a2 + 8, (uint64_t)v16);
    sub_4BCC2C((uint64_t)v16);
  }
LABEL_25:
  *(void *)(a2 + 728) = (unint64_t)sub_72688((uint64_t)v14);
}

void sub_CC3DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1627DB4(va);
  sub_CC3E34(v5);
  _Unwind_Resume(a1);
}

void sub_CC3E20(_Unwind_Exception *a1)
{
  sub_CC3E34(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CC3E34(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    sub_4BCC2C(a1 + 8);
    return a1;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 24);
  if (v4 != v3)
  {
    do
    {
      if (*(char *)(v4 - 1) < 0) {
        operator delete(*(void **)(v4 - 24));
      }
      v4 -= 32;
    }
    while (v4 != v3);
    uint64_t v5 = *(void **)(a1 + 24);
  }
  *(void *)(a1 + 32) = v3;
  operator delete(v5);
  return a1;
}

void sub_CC3ECC()
{
  unk_25E1B47 = 16641;
  word_25E1B30 = 65;
  byte_25E1B5F = 1;
  byte_25E1B49 = 0;
}

uint64_t sub_CC3EF4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v16 = operator new(0x20uLL);
  long long v17 = xmmword_20B91C0;
  strcpy((char *)v16, "SessionStateParserModule");
  __n128 __p = 0;
  long long v19 = 0uLL;
  uint64_t v7 = sub_374CDC(a3, (uint64_t)&v16, (uint64_t *)&__p);
  uint64_t v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = (void **)v19;
    int v10 = __p;
    if ((void *)v19 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      int v10 = __p;
    }
    *(void *)&long long v19 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(v16);
  }
  sub_3CB370(v7, a4, 0, &v16);
  __n128 __p = operator new(0x20uLL);
  long long v19 = xmmword_20B91A0;
  strcpy((char *)__p, "reroute_traversal_threshold");
  uint64_t v11 = sub_561B0(&v16, (uint64_t)&__p);
  *(void *)(a1 + 24) = sub_A2D5F4(v11);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  uint64_t v12 = (char *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1))
  {
    do
    {
      uint64_t v15 = *(char **)v12;
      sub_57AC8((uint64_t *)v12 + 5);
      if (v12[39] < 0) {
        operator delete(*((void **)v12 + 2));
      }
      operator delete(v12);
      uint64_t v12 = v15;
    }
    while (v15);
  }
  uint64_t v13 = v16;
  uint64_t v16 = 0;
  if (v13) {
    operator delete(v13);
  }
  return a1;
}

void sub_CC40A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

uint64_t sub_CC4100@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "SessionStateParserModule");
  char v6 = 1;
  unint64_t v4 = *(void *)(a2 + 32);
  if (v4 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_C947F8((uint64_t *)(a2 + 24), "Runtime", &v6, a1);
    *(void *)(a2 + 32) = result;
  }
  else
  {
    sub_C949C8(a2 + 40, *(void *)(a2 + 32), "Runtime", &v6, a1);
    uint64_t result = v4 + 48;
    *(void *)(a2 + 32) = v4 + 48;
    *(void *)(a2 + 32) = v4 + 48;
  }
  return result;
}

void sub_CC41C0(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CC41D4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CC41EC(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CC4200()
{
  unk_25E1B77 = 16641;
  word_25E1B60 = 65;
  byte_25E1B8F = 1;
  byte_25E1B79 = 0;
  byte_25E1BA7 = 8;
  strcpy((char *)&qword_25E1B90, "any_mode");
  byte_25E1BBF = 7;
  strcpy((char *)&dword_25E1BA8, "cycling");
  byte_25E1BD7 = 7;
  strcpy((char *)&dword_25E1BC0, "driving");
  byte_25E1BEF = 7;
  strcpy((char *)&dword_25E1BD8, "walking");
}

void sub_CC42AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_725D0((uint64_t)v16);
  *(_DWORD *)a3 = 0x7FFFFFFF;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(void *)(a3 + 56) = 0;
  *(_DWORD *)a3 = *(_DWORD *)sub_37B3A8(a2);
  char v6 = sub_69510();
  uint64_t v7 = (const std::string *)sub_68EB4((uint64_t)v6);
  std::string::operator=((std::string *)(a3 + 8), v7);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v15 = 0;
  long long v14 = 0uLL;
  if (v9 != v8)
  {
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v9 - v8) >> 4)) >= 0x5555555555555556) {
      sub_2E00();
    }
    int v10 = (char *)operator new(0x8BA2E8BA2E8BA2E9 * ((v9 - v8) >> 4));
    *(void *)&long long v14 = v10;
    *((void *)&v14 + 1) = v10;
    uint64_t v15 = &v10[0x8BA2E8BA2E8BA2E9 * ((v9 - v8) >> 4)];
    do
    {
      __int16 v11 = sub_49B094(v8);
      if (sub_49B104(v8)) {
        __int16 v12 = 256;
      }
      else {
        __int16 v12 = 0;
      }
      char v18 = *(unsigned char *)(v8 + 160);
      __int16 v17 = v12 | v11;
      int v10 = sub_CC4460(&v14, (uint64_t)v10, (uint64_t)&v17) + 3;
      v8 += 176;
    }
    while (v8 != v9);
  }
  uint64_t v13 = *(void **)(a3 + 32);
  if (v13)
  {
    *(void *)(a3 + 40) = v13;
    operator delete(v13);
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
  }
  *(_OWORD *)(a3 + 32) = v14;
  *(void *)(a3 + 48) = v15;
  *(double *)(a3 + 56) = sub_72688((uint64_t)v16);
}

void sub_CC4424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  sub_946714(v10);
  _Unwind_Resume(a1);
}

char *sub_CC4460(void *a1, uint64_t a2, uint64_t a3)
{
  char v6 = (char *)*a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (a2 - *a1) / 3;
  uint64_t v8 = (char *)(*a1 + 3 * v7);
  unint64_t v9 = a1[2];
  if (v5 >= v9)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v5 - (void)v6) + 1;
    if (v15 >= 0x5555555555555556) {
      sub_2E00();
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v9 - (void)v6);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x2AAAAAAAAAAAAAAALL) {
      unint64_t v17 = 0x5555555555555555;
    }
    else {
      unint64_t v17 = v15;
    }
    long long v36 = a1 + 2;
    if (v17)
    {
      if (v17 >= 0x5555555555555556) {
        sub_188D718();
      }
      char v18 = (char *)operator new(3 * v17);
    }
    else
    {
      char v18 = 0;
    }
    uint64_t v32 = v18;
    uint64_t v33 = &v18[3 * v7];
    long long __dst = v33;
    long long v35 = &v18[3 * v17];
    sub_CC4708((uint64_t)&v32, (__int16 *)a3);
    int v20 = v33;
    int v21 = (char *)*a1;
    unint64_t v22 = v33;
    if ((char *)*a1 != v8)
    {
      __n128 v23 = v8;
      unint64_t v22 = v33;
      do
      {
        __int16 v24 = *(_WORD *)(v23 - 3);
        v23 -= 3;
        char v25 = v23[2];
        *(_WORD *)(v22 - 3) = v24;
        v22 -= 3;
        _OWORD v22[2] = v25;
      }
      while (v23 != v21);
    }
    uint64_t v33 = v22;
    uint64_t v26 = (unsigned char *)a1[1];
    uint64_t v27 = (char *)__dst;
    uint64_t v28 = v26 - v8;
    if (v26 != v8)
    {
      memmove(__dst, v8, v26 - v8);
      unint64_t v22 = v33;
      uint64_t v8 = (char *)a1[1];
    }
    std::string v29 = (char *)*a1;
    *a1 = v22;
    a1[1] = &v27[v28];
    uint64_t v30 = (char *)a1[2];
    a1[2] = v35;
    long long __dst = v8;
    long long v35 = v30;
    uint64_t v32 = v29;
    uint64_t v33 = v29;
    if (v8 != v29) {
      long long __dst = &v29[(v8 - v29 - 3) % 3uLL];
    }
    if (v29) {
      operator delete(v29);
    }
    return v20;
  }
  else if (v8 == (char *)v5)
  {
    __int16 v19 = *(_WORD *)a3;
    v8[2] = *(unsigned char *)(a3 + 2);
    *(_WORD *)uint64_t v8 = v19;
    a1[1] = v8 + 3;
  }
  else
  {
    uint64_t v10 = v8 + 3;
    unint64_t v11 = v5 - 3;
    uint64_t v12 = a1[1];
    if (v5 >= 3)
    {
      do
      {
        __int16 v13 = *(_WORD *)v11;
        *(unsigned char *)(v12 + 2) = *(unsigned char *)(v11 + 2);
        *(_WORD *)uint64_t v12 = v13;
        v12 += 3;
        v11 += 3;
      }
      while (v11 < v5);
    }
    a1[1] = v12;
    if ((unsigned char *)v5 != v10) {
      memmove(v8 + 3, v8, v5 - (void)v10);
    }
    __int16 v14 = *(_WORD *)a3;
    v8[2] = *(unsigned char *)(a3 + 2);
    *(_WORD *)uint64_t v8 = v14;
  }
  return v8;
}

void sub_CC46AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    __int16 v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    __int16 v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_CC4708(uint64_t a1, __int16 *a2)
{
  unint64_t v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    char v6 = *(unsigned char **)a1;
    unint64_t v5 = *(unsigned char **)(a1 + 8);
    if ((unint64_t)v5 <= *(void *)a1)
    {
      unint64_t v15 = 0x5555555555555556 * (v4 - v6);
      if (v4 == v6) {
        unint64_t v15 = 1;
      }
      if (v15 >= 0x5555555555555556) {
        sub_188D718();
      }
      unint64_t v16 = v15 >> 2;
      uint64_t v17 = 3 * v15;
      char v18 = (char *)operator new(3 * v15);
      __int16 v19 = &v18[3 * v16];
      uint64_t v21 = v4 - v5;
      BOOL v20 = v4 == v5;
      unint64_t v4 = v19;
      if (!v20)
      {
        uint64_t v22 = 3 * (v21 / 3);
        unint64_t v4 = &v19[v22];
        __n128 v23 = &v18[3 * v16];
        do
        {
          __int16 v24 = *(_WORD *)v5;
          v23[2] = v5[2];
          *(_WORD *)__n128 v23 = v24;
          v23 += 3;
          v5 += 3;
          v22 -= 3;
        }
        while (v22);
      }
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v19;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v18[v17];
      if (v6)
      {
        operator delete(v6);
        unint64_t v4 = *(char **)(a1 + 16);
      }
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * (void)&v5[-*(void *)a1];
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = -(v8 >> 1);
      uint64_t v10 = &v5[-(v8 >> 1)];
      unint64_t v11 = v8 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v12 = (uint64_t)&v10[-v11];
      __int16 v13 = (unsigned char *)(v4 - v5);
      if (v4 != v5)
      {
        memmove(&v10[-v11], *(const void **)(a1 + 8), v4 - v5);
        unint64_t v4 = *(char **)(a1 + 8);
      }
      __int16 v14 = &v4[3 * v9];
      unint64_t v4 = &v13[v12];
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = &v13[v12];
    }
  }
  __int16 v25 = *a2;
  void v4[2] = *((unsigned char *)a2 + 2);
  *(_WORD *)unint64_t v4 = v25;
  *(void *)(a1 + 16) += 3;
}

void sub_CC4864()
{
  unk_25E1C07 = 16641;
  word_25E1BF0 = 65;
  byte_25E1C1F = 1;
  byte_25E1C09 = 0;
}

void sub_CC488C()
{
  uint64_t v0 = __chkstk_darwin();
  sub_725D0((uint64_t)v2);
  sub_725D0((uint64_t)v1);
  sub_9B2B20((uint64_t)&v3, *(void **)(v0 + 2304), 1);
}

void sub_CC50E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  sub_14A84((uint64_t)&a29);
  sub_CC5670((uint64_t)&STACK[0x390]);
  sub_14A84((uint64_t)&a42);
  sub_CC5774((uint64_t)&a55);
  sub_4BCED0((uint64_t)&STACK[0xA70]);
  sub_CC56F8((uint64_t)&STACK[0x290]);
  sub_14A84((uint64_t)&STACK[0x338]);
  sub_14A84((uint64_t)&STACK[0x348]);
  sub_9BE2CC(v55);
  sub_9B2C40((uint64_t)&STACK[0x1078]);
  _Unwind_Resume(a1);
}

uint64_t sub_CC5258()
{
  uint64_t result = sub_723EC(2u);
  if (result)
  {
    sub_6BAC((uint64_t)v30);
    sub_188FC78(v30, (uint64_t)"TransitGuidanceModule took ", 27);
    uint64_t v1 = (void *)std::ostream::operator<<();
    uint64_t v2 = sub_188FC78(v1, (uint64_t)" ms: [ ", 7);
    sub_188FC78(v2, (uint64_t)"TransitRouteBuilder: ", 21);
    uint64_t v3 = (void *)std::ostream::operator<<();
    unint64_t v4 = sub_188FC78(v3, (uint64_t)" ms, ", 5);
    sub_188FC78(v4, (uint64_t)"TransitFeatureDataBuilder: ", 27);
    unint64_t v5 = (void *)std::ostream::operator<<();
    char v6 = sub_188FC78(v5, (uint64_t)" ms, ", 5);
    sub_188FC78(v6, (uint64_t)"WalkingRouteBuilder: ", 21);
    int64_t v7 = (void *)std::ostream::operator<<();
    uint64_t v8 = sub_188FC78(v7, (uint64_t)" ms, ", 5);
    sub_188FC78(v8, (uint64_t)"TransferInstructionFinder: ", 27);
    uint64_t v9 = (void *)std::ostream::operator<<();
    uint64_t v10 = sub_188FC78(v9, (uint64_t)" ms, ", 5);
    sub_188FC78(v10, (uint64_t)"FareResolver: ", 14);
    unint64_t v11 = (void *)std::ostream::operator<<();
    uint64_t v12 = sub_188FC78(v11, (uint64_t)" ms, ", 5);
    sub_188FC78(v12, (uint64_t)"IncidentsResolver: ", 19);
    __int16 v13 = (void *)std::ostream::operator<<();
    __int16 v14 = sub_188FC78(v13, (uint64_t)" ms, ", 5);
    sub_188FC78(v14, (uint64_t)"TransitIncidentsAnnotation: ", 28);
    unint64_t v15 = (void *)std::ostream::operator<<();
    unint64_t v16 = sub_188FC78(v15, (uint64_t)" ms, ", 5);
    sub_188FC78(v16, (uint64_t)"TransitInstructionsBuilder: ", 28);
    uint64_t v17 = (void *)std::ostream::operator<<();
    char v18 = sub_188FC78(v17, (uint64_t)" ms, ", 5);
    sub_188FC78(v18, (uint64_t)"TransitAdvisoryBuilder: ", 24);
    __int16 v19 = (void *)std::ostream::operator<<();
    BOOL v20 = sub_188FC78(v19, (uint64_t)" ms, ", 5);
    sub_188FC78(v20, (uint64_t)"TransitArtworkBuilder: ", 23);
    uint64_t v21 = (void *)std::ostream::operator<<();
    uint64_t v22 = sub_188FC78(v21, (uint64_t)" ms, ", 5);
    sub_188FC78(v22, (uint64_t)"TransitStyleAttributesBuilder: ", 31);
    __n128 v23 = (void *)std::ostream::operator<<();
    __int16 v24 = sub_188FC78(v23, (uint64_t)" ms, ", 5);
    sub_188FC78(v24, (uint64_t)"RouteHandleAnnotation: ", 23);
    __int16 v25 = (void *)std::ostream::operator<<();
    uint64_t v26 = sub_188FC78(v25, (uint64_t)" ms, ", 5);
    sub_188FC78(v26, (uint64_t)"WalkToAPConnector: ", 19);
    uint64_t v27 = (void *)std::ostream::operator<<();
    sub_188FC78(v27, (uint64_t)" ms ]", 5);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v29 < 0) {
      operator delete(__p);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_CC55D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_CC5624(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_CC5670(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 1696);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_651C4((id **)(a1 + 1664));
  sub_651C4((id **)(a1 + 1568));
  sub_4BCED0(a1 + 32);
  return a1;
}

uint64_t sub_CC56F8(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 104);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_CC5774(uint64_t a1)
{
  sub_CC583C(a1 + 200);
  uint64_t v2 = *(void *)(a1 + 176);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 184);
    unint64_t v4 = *(void **)(a1 + 176);
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_361164(v3 - 456);
      while (v3 != v2);
      unint64_t v4 = *(void **)(a1 + 176);
    }
    *(void *)(a1 + 184) = v2;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)(a1 + 152);
  if (v5)
  {
    do
    {
      char v6 = (void *)*v5;
      operator delete(v5);
      unint64_t v5 = v6;
    }
    while (v6);
  }
  int64_t v7 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v7) {
    operator delete(v7);
  }
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    uint64_t v8 = *(void **)(a1 + 72);
    if (!v8) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  operator delete(*(void **)(a1 + 96));
  uint64_t v8 = *(void **)(a1 + 72);
  if (v8)
  {
LABEL_12:
    *(void *)(a1 + 80) = v8;
    operator delete(v8);
  }
LABEL_13:
  uint64_t v9 = *(void **)(a1 + 40);
  if (v9)
  {
    *(void *)(a1 + 48) = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_CC583C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    unint64_t v4 = *(void **)(a1 + 40);
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(void *)(v3 - 16) = v5;
          operator delete(v5);
        }
        if (*(char *)(v3 - 25) < 0) {
          operator delete(*(void **)(v3 - 48));
        }
        v3 -= 48;
      }
      while (v3 != v2);
      unint64_t v4 = *(void **)(a1 + 40);
    }
    *(void *)(a1 + 48) = v2;
    operator delete(v4);
  }
  char v6 = *(char **)(a1 + 16);
  if (v6)
  {
    do
    {
      uint64_t v9 = *(char **)v6;
      uint64_t v10 = (void *)*((void *)v6 + 5);
      if (v10)
      {
        *((void *)v6 + 6) = v10;
        operator delete(v10);
      }
      if (v6[39] < 0) {
        operator delete(*((void **)v6 + 2));
      }
      operator delete(v6);
      char v6 = v9;
    }
    while (v9);
  }
  int64_t v7 = *(void **)a1;
  *(void *)a1 = 0;
  if (v7) {
    operator delete(v7);
  }
  return a1;
}

double sub_CC5910()
{
  byte_25E1C37 = 1;
  word_25E1C20 = 65;
  byte_25E1C4F = 1;
  word_25E1C38 = 65;
  strcpy(&byte_25E1C67, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_25E1C50, "\x1B\\toi=lhp\\"");
  byte_25E1C7F = 11;
  qword_25E1C80 = (uint64_t)operator new(0x19uLL);
  long long v282 = xmmword_20B9250;
  unk_25E1C88 = xmmword_20B9250;
  strcpy((char *)qword_25E1C80, "\x1B\\toi=x-sampa-internal\\"");
  byte_25E1CAF = 13;
  strcpy((char *)&qword_25E1C98, "\x1B\\tn=address\\"");
  strcpy(&byte_25E1CC7, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_25E1CB0, "\x1B\\tn=nav\\"");
  byte_25E1CDF = 12;
  byte_25E1CF7 = 7;
  strcpy((char *)&dword_25E1CE0, "\x1B\\lang=");
  byte_25E1D0F = 1;
  word_25E1CF8 = 92;
  byte_25E1D27 = 4;
  strcpy((char *)&qword_25E1D10, "DEV:");
  byte_25E1D3F = 8;
  strcpy((char *)&qword_25E1D28, "Continue");
  byte_25E1D57 = 11;
  strcpy((char *)&qword_25E1D40, "Start_Route");
  byte_25E1D6F = 14;
  strcpy((char *)&qword_25E1D58, "Continue_Route");
  byte_25E1D87 = 12;
  strcpy((char *)&qword_25E1D70, "Resume_Route");
  byte_25E1D9F = 18;
  strcpy((char *)&xmmword_25E1D88, "Start_Route_U_Turn");
  byte_25E1DB7 = 7;
  strcpy((char *)&dword_25E1DA0, "_U_Turn");
  qword_25E1DC8 = 0x1300000000000000;
  qmemcpy(&unk_25E1DD0, "Continue_Route", 14);
  dword_25E1DC0 = 1702131055;
  qword_25E1DB8 = *(void *)"Resume_Route";
  *(int *)((char *)&dword_25E1DC4 + 3) = 1852994900;
  dword_25E1DC4 = 1415533919;
  qword_25E1DE0 = 0x1500000000000000;
  strcpy(byte_25E1DE8, "Left_Turn");
  unk_25E1DDE = 1415533919;
  *(_DWORD *)((char *)&qword_25E1DE0 + 1) = 1852994900;
  strcpy(&byte_25E1DFF, "\tRight_Turn");
  strcpy(&byte_25E1E17, "\nLeft_Turn_At_End");
  byte_25E1E2F = 16;
  byte_25E1E47 = 17;
  strcpy((char *)&xmmword_25E1E30, "Right_Turn_At_End");
  byte_25E1E5F = 15;
  strcpy((char *)&qword_25E1E48, "Sharp_Left_Turn");
  byte_25E1E77 = 16;
  strcpy((char *)&xmmword_25E1E60, "Sharp_Right_Turn");
  byte_25E1E8F = 16;
  strcpy((char *)&xmmword_25E1E78, "Slight_Left_Turn");
  byte_25E1EA7 = 17;
  strcpy((char *)&xmmword_25E1E90, "Slight_Right_Turn");
  strcpy(&byte_25E1EBF, "\tKeep_Right");
  strcpy((char *)&qword_25E1EA8, "Keep_Left");
  strcpy(&byte_25E1ED7, "\nU_Turn");
  byte_25E1EEF = 6;
  byte_25E1F07 = 14;
  strcpy((char *)&qword_25E1EF0, "Walking_U_Turn");
  byte_25E1F1F = 20;
  strcpy((char *)&xmmword_25E1F08, "U_Turn_When_Possible");
  byte_25E1F37 = 20;
  strcpy((char *)&xmmword_25E1F20, "U_Turn_At_Roundabout");
  byte_25E1F4F = 11;
  strcpy((char *)&qword_25E1F38, "Enter_Ferry");
  strcpy(&byte_25E1F67, "\nChange_Ferry");
  strcpy((char *)&qword_25E1F50, "Exit_Ferry");
  strcpy((char *)&xmmword_25E1F80, "Enter_Railway_Shuttle");
  strcpy((char *)&xmmword_25E1F98, "Exit_Railway_Shuttle");
  strcpy((char *)&xmmword_25E1FB0, "Change_Railway_Shuttle");
  strcpy((char *)&xmmword_25E1FC8, "End_Of_Navigation");
  strcpy((char *)&xmmword_25E1FE0, "End_Of_Navigation");
  strcpy((char *)&qword_25E1FF8, "Destination");
  strcpy((char *)&xmmword_25E2010, "Destination_On_left");
  strcpy((char *)&xmmword_25E2028, "Destination_On_Right");
  strcpy((char *)&xmmword_25E2070, "First_Stop_On_Right");
  strcpy((char *)&xmmword_25E20B8, "Next_Stop_On_Right");
  byte_25E1F7F = 12;
  byte_25E1F97 = 21;
  byte_25E1FAF = 20;
  strcpy((char *)&xmmword_25E20E8, "Waypoint_Stop_On_Left");
  byte_25E1FC7 = 22;
  byte_25E1FDF = 17;
  byte_25E1FF7 = 17;
  byte_25E200F = 11;
  byte_25E2027 = 19;
  byte_25E203F = 20;
  strcpy(&byte_25E2057, "\nFirst_Stop_On_left");
  *(void *)&v270[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_25E2040, "First_Stop");
  byte_25E206F = 18;
  byte_25E2087 = 19;
  strcpy(&byte_25E209F, "\tNext_Stop_On_left");
  strcpy((char *)&qword_25E20D0, "Waypoint_Stop");
  strcpy((char *)&xmmword_25E2100, "Waypoint_Stop_On_Right");
  strcpy((char *)&qword_25E2118, "Roundabout_");
  *(void *)&v266[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_25E2088, "Next_Stop");
  byte_25E20B7 = 17;
  byte_25E20CF = 18;
  byte_25E20E7 = 13;
  byte_25E20FF = 21;
  byte_25E2117 = 22;
  byte_25E212F = 11;
  byte_25E2147 = 16;
  strcpy((char *)&xmmword_25E2130, "Enter_Roundabout");
  qword_25E2148 = (uint64_t)operator new(0x20uLL);
  long long v281 = xmmword_20B91C0;
  xmmword_25E2150 = xmmword_20B91C0;
  strcpy((char *)qword_25E2148, "Walking_Enter_Roundabout");
  byte_25E2177 = 16;
  strcpy((char *)&xmmword_25E2160, "Leave_Roundabout");
  byte_25E218F = 21;
  strcpy((char *)&xmmword_25E2178, "Roundabout_First_Exit");
  byte_25E21A7 = 22;
  strcpy((char *)&xmmword_25E2190, "Roundabout_Second_Exit");
  byte_25E21BF = 21;
  strcpy((char *)&xmmword_25E21A8, "Roundabout_Third_Exit");
  strcpy((char *)&xmmword_25E21C0, "Roundabout_Fourth_Exit");
  HIBYTE(word_25E21D6) = 22;
  byte_25E21EF = 21;
  strcpy((char *)&xmmword_25E21D8, "Roundabout_Fifth_Exit");
  byte_25E2207 = 21;
  strcpy((char *)&xmmword_25E21F0, "Roundabout_Sixth_Exit");
  qword_25E2208 = (uint64_t)operator new(0x19uLL);
  xmmword_25E2210 = xmmword_20B9250;
  strcpy((char *)qword_25E2208, "Roundabout_Seventh_Exit");
  strcpy((char *)&xmmword_25E2220, "Roundabout_Eighth_Exit");
  HIBYTE(word_25E2236) = 22;
  byte_25E224F = 21;
  strcpy((char *)&xmmword_25E2238, "Roundabout_Ninth_Exit");
  byte_25E2267 = 21;
  strcpy((char *)&xmmword_25E2250, "Roundabout_Tenth_Exit");
  qword_25E2268 = (uint64_t)operator new(0x20uLL);
  xmmword_25E2270 = xmmword_20B91C0;
  strcpy((char *)qword_25E2268, "Roundabout_Eleventh_Exit");
  qword_25E2280 = (uint64_t)operator new(0x19uLL);
  unk_25E2288 = xmmword_20B9250;
  strcpy((char *)qword_25E2280, "Roundabout_Twelfth_Exit");
  qword_25E2298 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B5EB0;
  xmmword_25E22A0 = xmmword_20B5EB0;
  strcpy((char *)qword_25E2298, "Roundabout_Thirteenth_Exit");
  qword_25E22B0 = (uint64_t)operator new(0x20uLL);
  unk_25E22B8 = xmmword_20B5EB0;
  strcpy((char *)qword_25E22B0, "Roundabout_Fourteenth_Exit");
  qword_25E22C8 = (uint64_t)operator new(0x20uLL);
  long long v280 = xmmword_20B8870;
  xmmword_25E22D0 = xmmword_20B8870;
  strcpy((char *)qword_25E22C8, "Roundabout_Fifteenth_Exit");
  qword_25E22E0 = (uint64_t)operator new(0x20uLL);
  unk_25E22E8 = xmmword_20B8870;
  strcpy((char *)qword_25E22E0, "Roundabout_Sixteenth_Exit");
  qword_25E22F8 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B91A0;
  xmmword_25E2300 = xmmword_20B91A0;
  strcpy((char *)qword_25E22F8, "Roundabout_Seventeenth_Exit");
  qword_25E2310 = (uint64_t)operator new(0x20uLL);
  unk_25E2318 = xmmword_20B5EB0;
  strcpy((char *)qword_25E2310, "Roundabout_Eighteenth_Exit");
  qword_25E2328 = (uint64_t)operator new(0x20uLL);
  xmmword_25E2330 = xmmword_20B5EB0;
  strcpy((char *)qword_25E2328, "Roundabout_Nineteenth_Exit");
  byte_25E2357 = 8;
  strcpy((char *)&qword_25E2340, "Off_Ramp");
  byte_25E236F = 16;
  strcpy((char *)&xmmword_25E2358, "Off_Ramp_On_Left");
  byte_25E2387 = 17;
  strcpy((char *)&xmmword_25E2370, "Off_Ramp_On_Right");
  byte_25E239F = 14;
  strcpy((char *)&qword_25E2388, "Change_Highway");
  strcpy((char *)&xmmword_25E23A0, "Change_Highway_On_Left");
  HIBYTE(word_25E23B6) = 22;
  qword_25E23B8 = (uint64_t)operator new(0x19uLL);
  xmmword_25E23C0 = xmmword_20B9250;
  strcpy((char *)qword_25E23B8, "Change_Highway_On_Right");
  byte_25E23E7 = 5;
  dword_25E23D0 = 1735550285;
  byte_25E23D4 = 101;
  byte_25E23D5 = 0;
  byte_25E23FF = 12;
  strcpy((char *)&qword_25E23E8, "Enter_Detour");
  byte_25E2417 = 11;
  strcpy((char *)&qword_25E2400, "Exit_Detour");
  byte_25E242F = 18;
  strcpy((char *)&xmmword_25E2418, "Walking_Turnaround");
  qword_25E2430 = (uint64_t)operator new(0x19uLL);
  unk_25E2438 = xmmword_20B9250;
  strcpy((char *)qword_25E2430, "Walking_Turnaround_Sign");
  byte_25E245F = 19;
  strcpy((char *)&xmmword_25E2448, "Distance_Title_List");
  qword_25E2460 = (uint64_t)operator new(0x19uLL);
  unk_25E2468 = xmmword_20B9250;
  long long v272 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy((char *)qword_25E2460, "Cross_The_Street_Spoken");
  *(void *)&v270[1] = *(void *)"t_Spoken";
  byte_25E248F = 19;
  strcpy((char *)&xmmword_25E2478, "Arrival_Charge_List");
  byte_25E24A7 = 15;
  strcpy((char *)&qword_25E2490, "Charge_At_Start");
  strcpy(&byte_25E24BF, "\tPass_Street");
  strcpy((char *)&qword_25E24A8, "Pass_Exit");
  byte_25E24D7 = 11;
  byte_25E24EF = 17;
  strcpy((char *)&xmmword_25E24D8, "Pass_Intersection");
  strcpy(&byte_25E2507, "\t_PrevExitNumber");
  strcpy((char *)&qword_25E24F0, "Next_Exit");
  byte_25E251F = 15;
  strcpy(&byte_25E2537, "\t_PrevUTurn");
  strcpy((char *)&qword_25E2520, "_PrevRoad");
  strcpy(&byte_25E254F, "\nNext_");
  byte_25E2567 = 5;
  byte_25E257F = 15;
  strcpy((char *)&qword_25E2568, "_At_Next_Street");
  byte_25E2597 = 21;
  strcpy((char *)&xmmword_25E2580, "_At_Next_Intersection");
  byte_25E25AF = 14;
  strcpy((char *)&qword_25E2598, "Charge_Station");
  byte_25E25C7 = 15;
  strcpy((char *)&qword_25E25B0, "_Charge_Station");
  BYTE1(qword_25E25D8) = 0;
  WORD1(qword_25E25D8) = 25856;
  HIDWORD(qword_25E25D8) = 335544320;
  strcpy((char *)&qword_25E25C8, "_Charge_Station_");
  byte_25E25F7 = 8;
  strcpy((char *)&qword_25E25E0, "_Minimum");
  byte_25E260F = 15;
  strcpy((char *)&qword_25E25F8, "ExitShield_Sign");
  byte_25E2627 = 8;
  strcpy((char *)&qword_25E2610, "Walking_");
  byte_25E263F = 16;
  strcpy((char *)&xmmword_25E2628, "Walking_Continue");
  byte_25E2657 = 19;
  strcpy((char *)&xmmword_25E2640, "Walking_Start_Route");
  qword_25E2658 = (uint64_t)operator new(0x20uLL);
  xmmword_25E2660 = xmmword_20B5EB0;
  strcpy((char *)qword_25E2658, "Walking_Start_Route_U_Turn");
  byte_25E2687 = 17;
  strcpy((char *)&xmmword_25E2670, "Walking_Left_Turn");
  byte_25E269F = 18;
  strcpy((char *)&xmmword_25E2688, "Walking_Right_Turn");
  qword_25E26A0 = (uint64_t)operator new(0x20uLL);
  unk_25E26A8 = xmmword_20B5EB0;
  strcpy((char *)qword_25E26A0, "Walking_Turn_At_Roundabout");
  qword_25E26B8 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B91B0;
  xmmword_25E26C0 = xmmword_20B91B0;
  strcpy((char *)qword_25E26B8, "Walking_U_Turn_When_Possible");
  qword_25E26D0 = (uint64_t)operator new(0x28uLL);
  long long v271 = xmmword_20B9390;
  unk_25E26D8 = xmmword_20B9390;
  strcpy((char *)qword_25E26D0, "Walking_Roundabout_Exit_Continue");
  qword_25E26E8 = (uint64_t)operator new(0x20uLL);
  xmmword_25E26F0 = xmmword_20B91B0;
  strcpy((char *)qword_25E26E8, "Walking_Roundabout_Exit_Left");
  qword_25E2700 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B8890;
  unk_25E2708 = xmmword_20B8890;
  strcpy((char *)qword_25E2700, "Walking_Roundabout_Exit_Right");
  qword_25E2718 = (uint64_t)operator new(0x20uLL);
  xmmword_25E2720 = xmmword_20B8870;
  strcpy((char *)qword_25E2718, "Walking_End_Of_Navigation");
  long long v274 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_25E2730 = (uint64_t)v0;
  unk_25E2738 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v274;
  v0[25] = 0;
  byte_25E275F = 8;
  strcpy((char *)&qword_25E2748, "Walking_");
  qword_25E2760 = (uint64_t)operator new(0x19uLL);
  unk_25E2768 = v282;
  strcpy((char *)qword_25E2760, "Walking_Sharp_Left_Turn");
  qword_25E2778 = (uint64_t)operator new(0x20uLL);
  xmmword_25E2780 = v281;
  strcpy((char *)qword_25E2778, "Walking_Sharp_Right_Turn");
  qword_25E2790 = (uint64_t)operator new(0x20uLL);
  unk_25E2798 = v281;
  strcpy((char *)qword_25E2790, "Walking_Slight_Left_Turn");
  qword_25E27A8 = (uint64_t)operator new(0x20uLL);
  xmmword_25E27B0 = v280;
  strcpy((char *)qword_25E27A8, "Walking_Slight_Right_Turn");
  byte_25E27D7 = 4;
  strcpy((char *)&dword_25E27C0, "Exit");
  byte_25E27EF = 4;
  strcpy((char *)&dword_25E27D8, "Road");
  byte_25E2807 = 7;
  strcpy((char *)&dword_25E27F0, "Freeway");
  byte_25E281F = 12;
  strcpy((char *)&qword_25E2808, "Intersection");
  byte_25E2837 = 5;
  strcpy((char *)&dword_25E2820, "Ferry");
  byte_25E284F = 11;
  strcpy((char *)&qword_25E2838, "ShuttleName");
  byte_25E2867 = 5;
  strcpy((char *)&dword_25E2850, "Road1");
  strcpy(&byte_25E287F, "\tName");
  strcpy((char *)&qword_25E2868, "Signpost1");
  byte_25E2897 = 4;
  byte_25E28AF = 7;
  strcpy((char *)&dword_25E2898, "Address");
  byte_25E28C7 = 7;
  strcpy((char *)&dword_25E28B0, "Shield1");
  byte_25E28DF = 13;
  strcpy((char *)&qword_25E28C8, "TowardShield1");
  byte_25E28F7 = 6;
  strcpy((char *)&dword_25E28E0, "Right_");
  byte_25E290F = 5;
  byte_25E28FC = 95;
  dword_25E28F8 = 1952867660;
  byte_25E28FD = 0;
  strcpy(&byte_25E2927, "\tOn_Left_");
  strcpy((char *)&qword_25E2910, "On_Right_");
  byte_25E293F = 8;
  byte_25E2957 = 12;
  strcpy((char *)&qword_25E2940, "ElevatorName");
  byte_25E296F = 13;
  strcpy((char *)&qword_25E2958, "EscalatorName");
  strcpy(&byte_25E2987, "\nBridgeName");
  strcpy((char *)&qword_25E2970, "StairsName");
  strcpy(&byte_25E299F, "\nTunnelName");
  strcpy(&byte_25E29B7, "\nParking");
  byte_25E29CF = 7;
  strcpy(&byte_25E29E7, "\t_Escalator");
  strcpy((char *)&qword_25E29D0, "_Elevator");
  strcpy(&byte_25E29FF, "\n_ElevatorName");
  byte_25E2A17 = 13;
  byte_25E2A2F = 14;
  strcpy((char *)&qword_25E2A18, "_EscalatorName");
  byte_25E2A47 = 5;
  strcpy((char *)&qword_25E2A30, "_Road");
  byte_25E2A5F = 8;
  strcpy((char *)&qword_25E2A48, "_Freeway");
  byte_25E2A77 = 13;
  strcpy((char *)&qword_25E2A60, "_Intersection");
  byte_25E2A8F = 6;
  strcpy((char *)&dword_25E2A78, "_Road1");
  byte_25E2AA7 = 6;
  strcpy((char *)&dword_25E2A90, "_Road2");
  strcpy(&byte_25E2ABF, "\n_Signpost2");
  strcpy((char *)&qword_25E2AA8, "_Signpost1");
  strcpy(&byte_25E2AD7, "\n_Ferry");
  byte_25E2AEF = 6;
  byte_25E2B07 = 12;
  strcpy((char *)&qword_25E2AF0, "_Ferry_Ferry");
  byte_25E2B1F = 12;
  strcpy((char *)&qword_25E2B08, "_ShuttleName");
  qword_25E2B20 = (uint64_t)operator new(0x20uLL);
  unk_25E2B28 = v279;
  strcpy((char *)qword_25E2B20, "_Railway_Shuttle_ShuttleName");
  byte_25E2B4F = 11;
  strcpy((char *)&qword_25E2B38, "_ExitNumber");
  byte_25E2B67 = 5;
  dword_25E2B50 = 1769489759;
  byte_25E2B54 = 116;
  byte_25E2B55 = 0;
  byte_25E2B7F = 7;
  strcpy((char *)&dword_25E2B68, "_StayOn");
  byte_25E2B97 = 7;
  strcpy((char *)&dword_25E2B80, "_Stairs");
  byte_25E2BAF = 5;
  strcpy((char *)&dword_25E2B98, "_Ramp");
  byte_25E2BC7 = 11;
  strcpy((char *)&qword_25E2BB0, "_StairsName");
  strcpy(&byte_25E2BDF, "\t_Down");
  strcpy((char *)&qword_25E2BC8, "_RampName");
  byte_25E2BF7 = 5;
  byte_25E2C0F = 3;
  dword_25E2BF8 = 7361887;
  byte_25E2C27 = 7;
  strcpy((char *)&dword_25E2C10, "_Bridge");
  byte_25E2C3F = 7;
  strcpy((char *)&dword_25E2C28, "_Tunnel");
  byte_25E2C57 = 11;
  strcpy((char *)&qword_25E2C40, "_Roundabout");
  byte_25E2C6F = 6;
  strcpy((char *)&dword_25E2C58, "_Cross");
  byte_25E2C87 = 8;
  strcpy((char *)&qword_25E2C70, "_Parking");
  byte_25E2C9F = 8;
  strcpy((char *)&qword_25E2C88, "_Shield1");
  byte_25E2CB7 = 14;
  strcpy((char *)&qword_25E2CA0, "_TowardShield1");
  byte_25E2CCF = 8;
  strcpy((char *)&qword_25E2CB8, "_Shield2");
  byte_25E2CE7 = 14;
  strcpy((char *)&qword_25E2CD0, "_TowardShield2");
  byte_25E2CFF = 11;
  strcpy((char *)&qword_25E2CE8, "_Direction1");
  byte_25E2D17 = 11;
  strcpy((char *)&qword_25E2D00, "_Direction2");
  strcpy(&byte_25E2D2F, "\n_TowardDirection1");
  strcpy((char *)&qword_25E2D18, "Direction1");
  byte_25E2D47 = 17;
  byte_25E2D5F = 17;
  strcpy((char *)&xmmword_25E2D48, "_TowardDirection2");
  byte_25E2D77 = 16;
  strcpy((char *)&xmmword_25E2D60, "TowardDirection1");
  byte_25E2D8F = 7;
  strcpy((char *)&qword_25E2D78, "_Spoken");
  byte_25E2DA7 = 5;
  strcpy((char *)&qword_25E2D90, "_Sign");
  byte_25E2DBF = 15;
  strcpy((char *)&qword_25E2DA8, "_Secondary_Sign");
  byte_25E2DD7 = 5;
  byte_25E2DC4 = 116;
  dword_25E2DC0 = 1936280671;
  byte_25E2DC5 = 0;
  byte_25E2DEF = 8;
  strcpy((char *)&qword_25E2DD8, "_Primary");
  qword_25E2E00 = 0xF00000000000000;
  strcpy(byte_25E2E08, "_Secondary");
  strcpy((char *)&qword_25E2DF0, "_Spoken_Primary");
  strcpy(&byte_25E2E1F, "\n_Secondary");
  strcpy(&byte_25E2E37, "\n_Spoken_Secondar");
  BYTE1(qword_25E2E48) = 0;
  WORD1(qword_25E2E48) = 0;
  HIDWORD(qword_25E2E48) = 285212672;
  byte_25E2E67 = 13;
  strcpy((char *)&qword_25E2E50, "_To_Secondary");
  BYTE1(qword_25E2E78) = 0;
  WORD1(qword_25E2E78) = 0;
  HIDWORD(qword_25E2E78) = 335544320;
  strcpy((char *)&dword_25E2E68, "_Spoken_To_Secon");
  strcpy(&byte_25E2E97, "\t_ValidDistance");
  strcpy((char *)&qword_25E2E80, "_Distance");
  byte_25E2EAF = 14;
  byte_25E2EC7 = 6;
  strcpy((char *)&dword_25E2EB0, "_Short");
  byte_25E2EDF = 1;
  word_25E2EC8 = 95;
  qword_25E2EE0 = (uint64_t)operator new(0x20uLL);
  unk_25E2EE8 = v281;
  strcpy((char *)qword_25E2EE0, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_25E2EF8 = (uint64_t)v1;
  xmmword_25E2F00 = v282;
  *(_OWORD *)uint64_t v1 = v272;
  uint64_t v2 = *(void *)&v270[1];
  *(void *)(v1 + 15) = *(void *)&v270[1];
  v1[23] = 0;
  byte_25E2F27 = 12;
  strcpy((char *)&qword_25E2F10, "Chain_Spoken");
  byte_25E2F3F = 15;
  strcpy((char *)&qword_25E2F28, "Chain_To_Spoken");
  strcpy(&byte_25E2F57, "\nThen_Spoken");
  strcpy((char *)&qword_25E2F40, "And_Spoken");
  byte_25E2F6F = 11;
  byte_25E2F87 = 18;
  strcpy((char *)&xmmword_25E2F70, "Concatenate_Spoken");
  qword_25E2F88 = (uint64_t)operator new(0x28uLL);
  long long v269 = xmmword_20B9240;
  xmmword_25E2F90 = xmmword_20B9240;
  strcpy((char *)qword_25E2F88, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_25E2FA0 = (uint64_t)operator new(0x28uLL);
  v270[2] = xmmword_20B9260;
  unk_25E2FA8 = xmmword_20B9260;
  strcpy((char *)qword_25E2FA0, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_25E2FB8 = (uint64_t)operator new(0x40uLL);
  xmmword_25E2FC0 = xmmword_20B9A90;
  strcpy((char *)qword_25E2FB8, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_25E2FD0 = (uint64_t)operator new(0x30uLL);
  long long v268 = xmmword_20B9A40;
  unk_25E2FD8 = xmmword_20B9A40;
  strcpy((char *)qword_25E2FD0, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_25E2FE8 = (uint64_t)operator new(0x28uLL);
  long long v267 = xmmword_20E12D0;
  xmmword_25E2FF0 = xmmword_20E12D0;
  strcpy((char *)qword_25E2FE8, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_25E3000 = (uint64_t)operator new(0x28uLL);
  long long v276 = xmmword_20B9960;
  unk_25E3008 = xmmword_20B9960;
  strcpy((char *)qword_25E3000, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_25E3018 = (uint64_t)operator new(0x28uLL);
  xmmword_25E3020 = xmmword_20B93A0;
  strcpy((char *)qword_25E3018, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_25E3030 = (uint64_t)operator new(0x30uLL);
  long long v274 = xmmword_20E1380;
  unk_25E3038 = xmmword_20E1380;
  strcpy((char *)qword_25E3030, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_25E3048 = (uint64_t)operator new(0x30uLL);
  xmmword_25E3050 = xmmword_20B93C0;
  strcpy((char *)qword_25E3048, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_25E3060 = (uint64_t)operator new(0x38uLL);
  unk_25E3068 = xmmword_20B9A60;
  strcpy((char *)qword_25E3060, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_25E3078 = (uint64_t)operator new(0x30uLL);
  xmmword_25E3080 = xmmword_20E1380;
  strcpy((char *)qword_25E3078, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_25E3090 = (uint64_t)operator new(0x28uLL);
  unk_25E3098 = xmmword_20B9960;
  strcpy((char *)qword_25E3090, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_25E30A8 = (uint64_t)operator new(0x30uLL);
  long long v273 = xmmword_20B93D0;
  xmmword_25E30B0 = xmmword_20B93D0;
  strcpy((char *)qword_25E30A8, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_25E30C0 = (uint64_t)operator new(0x20uLL);
  unk_25E30C8 = v277;
  strcpy((char *)qword_25E30C0, "Walking_Distance_Chain_Spoken");
  qword_25E30D8 = (uint64_t)operator new(0x20uLL);
  xmmword_25E30E0 = v277;
  strcpy((char *)qword_25E30D8, "Walking_Continue_Chain_Spoken");
  uint64_t v3 = (char *)operator new(0x19uLL);
  qword_25E30F0 = (uint64_t)v3;
  unk_25E30F8 = v282;
  *(_OWORD *)uint64_t v3 = v272;
  *(void *)(v3 + 15) = v2;
  v3[23] = 0;
  qword_25E3108 = (uint64_t)operator new(0x28uLL);
  xmmword_25E3110 = v271;
  strcpy((char *)qword_25E3108, "Distance_Cross_The_Street_Spoken");
  byte_25E3137 = 22;
  strcpy((char *)&xmmword_25E3120, "Walking_Continue_Cross");
  byte_25E314F = 14;
  strcpy((char *)&qword_25E3138, "Continue_Cross");
  byte_25E3167 = 5;
  strcpy((char *)&dword_25E3150, "Cross");
  byte_25E317F = 19;
  strcpy((char *)&xmmword_25E3168, "Cross_Street_Spoken");
  byte_25E3197 = 17;
  strcpy((char *)&xmmword_25E3180, "Cross_Road_Spoken");
  byte_25E31AF = 20;
  strcpy((char *)&xmmword_25E3198, "Use_Crosswalk_Spoken");
  byte_25E31C7 = 15;
  strcpy((char *)&qword_25E31B0, "Distance_Spoken");
  byte_25E31DF = 19;
  strcpy((char *)&xmmword_25E31C8, "Distance_And_Spoken");
  byte_25E31F7 = 21;
  strcpy((char *)&xmmword_25E31E0, "Continue_Stage_Spoken");
  byte_25E320F = 13;
  qmemcpy(&qword_25E31F8, "ContinueStage", 13);
  int v4 = SHIBYTE(qword_25E2E00);
  if (qword_25E2E00 >= 0) {
    size_t v5 = HIBYTE(qword_25E2E00);
  }
  else {
    size_t v5 = unk_25E2DF8;
  }
  unint64_t v6 = v5 + 13;
  byte_25E3205 = 0;
  if (v5 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v10 = operator new(v8 + 1);
    qword_25E3218 = v5 + 13;
    unk_25E3220 = v9 | 0x8000000000000000;
    qword_25E3210 = (uint64_t)v10;
    void *v10 = *(void *)"ContinueStage";
    int64_t v7 = (char *)v10 + 13;
    *(void *)((char *)v10 + 5) = *(void *)"nueStage";
  }
  else
  {
    BYTE1(qword_25E3218) = 0;
    WORD1(qword_25E3218) = 0;
    HIDWORD(qword_25E3218) = 0;
    unk_25E3220 = 0;
    byte_25E3227 = v5 + 13;
    int64_t v7 = (char *)&qword_25E3218 + 5;
    strcpy((char *)&qword_25E3210, "Continue");
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    unint64_t v11 = &qword_25E2DF0;
  }
  else {
    unint64_t v11 = (uint64_t *)qword_25E2DF0;
  }
  memmove(v7, v11, v5);
LABEL_15:
  v7[v5] = 0;
  int v12 = byte_25E2A47;
  if (byte_25E2A47 >= 0) {
    size_t v13 = byte_25E2A47;
  }
  else {
    size_t v13 = qword_25E2A38;
  }
  unint64_t v14 = v13 + 13;
  if (v13 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    char v18 = operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 13;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    *char v18 = qword_25E31F8;
    *(void *)((char *)v18 + 5) = *(uint64_t *)((char *)&qword_25E31F8 + 5);
    unint64_t v15 = (char *)v18 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_25E31F8 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_25E31F8;
    unint64_t v15 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v13) {
      goto LABEL_29;
    }
  }
  if (v12 >= 0) {
    __int16 v19 = &qword_25E2A30;
  }
  else {
    __int16 v19 = (uint64_t *)qword_25E2A30;
  }
  memmove(v15, v19, v13);
LABEL_29:
  v15[v13] = 0;
  if (v4 >= 0) {
    BOOL v20 = (const std::string::value_type *)&qword_25E2DF0;
  }
  else {
    BOOL v20 = (const std::string::value_type *)qword_25E2DF0;
  }
  uint64_t v21 = std::string::append(&__dst, v20, v5);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  qword_25E3238 = v21->__r_.__value_.__r.__words[2];
  xmmword_25E3228 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_25E3257 = 5;
  strcpy((char *)&dword_25E3240, "Merge");
  qword_25E3258 = (uint64_t)operator new(0x20uLL);
  v270[1] = xmmword_20B8E90;
  unk_25E3260 = xmmword_20B8E90;
  strcpy((char *)qword_25E3258, "Continue_Freeway_Spoken_Primary");
  byte_25E3287 = 8;
  strcpy((char *)&qword_25E3270, "Starting");
  byte_25E329F = 14;
  strcpy((char *)&qword_25E3288, "Starting_Route");
  byte_25E32B7 = 14;
  strcpy((char *)&qword_25E32A0, "Resuming_Route");
  byte_25E32CF = 16;
  strcpy((char *)&xmmword_25E32B8, "Continuing_Route");
  byte_25E32E7 = 9;
  word_25E32D8 = 112;
  qword_25E32D0 = *(void *)&v266[48];
  strcpy(&byte_25E32FF, "\nEnding");
  strcpy((char *)&word_25E32F0, "op");
  qword_25E32E8 = *(void *)&v270[0];
  byte_25E3317 = 6;
  strcpy((char *)&qword_25E3318, "_Destination");
  byte_25E332F = 12;
  byte_25E3347 = 15;
  strcpy((char *)&qword_25E3330, "_At_Destination");
  std::operator+<char>();
  qword_25E3360 = (uint64_t)operator new(0x20uLL);
  unk_25E3368 = v281;
  strcpy((char *)qword_25E3360, "Spoken_Ending_At_Parking");
  qword_25E3378 = (uint64_t)operator new(0x20uLL);
  v270[0] = xmmword_20B9800;
  xmmword_25E3380 = xmmword_20B9800;
  strcpy((char *)qword_25E3378, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_25E3390, "Sign_Ending_At_Parking");
  HIBYTE(word_25E33A6) = 22;
  byte_25E33BF = 4;
  strcpy((char *)&dword_25E33A8, "Home");
  byte_25E33D7 = 4;
  strcpy((char *)&dword_25E33C0, "Work");
  byte_25E33EF = 8;
  strcpy((char *)&qword_25E33D8, "Business");
  byte_25E3407 = 4;
  strcpy((char *)&dword_25E33F0, "Name");
  byte_25E341F = 13;
  strcpy((char *)&qword_25E3408, "Other_Contact");
  byte_25E3437 = 11;
  strcpy((char *)&qword_25E3420, "ContactHome");
  byte_25E344F = 11;
  *(_DWORD *)((char *)&qword_25E3438 + 7) = 1802661719;
  byte_25E3467 = 7;
  *(int *)((char *)&dword_25E3450 + 3) = 1936942450;
  dword_25E3450 = 1919181889;
  strcpy((char *)&xmmword_25E3468, "Discoverability_Prompt");
  HIBYTE(word_25E347E) = 22;
  byte_25E3497 = 6;
  dword_25E3480 = 1634878303;
  word_25E3484 = 26739;
  byte_25E34AF = 8;
  qword_25E3498 = 0x697269535F6F4E5FLL;
  byte_25E34C7 = 9;
  strcpy((char *)&qword_25E34B0, "_CityName");
  byte_25E34DF = 8;
  qword_25E34C8 = 0x636972656E65475FLL;
  int v23 = byte_25E3287;
  if (byte_25E3287 >= 0) {
    size_t v24 = byte_25E3287;
  }
  else {
    size_t v24 = qword_25E3278;
  }
  LODWORD(v272) = byte_25E25C7;
  if (byte_25E25C7 >= 0) {
    size_t v25 = byte_25E25C7;
  }
  else {
    size_t v25 = unk_25E25B8;
  }
  qword_25E3438 = *(void *)"ContactWork";
  byte_25E3443 = 0;
  byte_25E3457 = 0;
  byte_25E3486 = 0;
  byte_25E34A0 = 0;
  byte_25E34D0 = 0;
  unint64_t v26 = v25 + v24;
  if (v25 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)long long v266 = *(void *)"ContactWork";
  *(void *)&v266[16] = *(void *)"ContactHome";
  *(void *)&v266[32] = *(void *)"_Contact";
  *(void *)&v266[48] = *(void *)"Other_Contact";
  if (v26 <= 0x16)
  {
    uint64_t v27 = &qword_25E34E0;
    qword_25E34E8 = 0;
    unk_25E34F0 = 0;
    qword_25E34E0 = 0;
    byte_25E34F7 = v25 + v24;
    if (!v24) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  uint64_t v90 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17) {
    uint64_t v90 = v26 | 7;
  }
  uint64_t v91 = v90 + 1;
  uint64_t v27 = (uint64_t *)operator new(v90 + 1);
  qword_25E34E8 = v25 + v24;
  unk_25E34F0 = v91 | 0x8000000000000000;
  qword_25E34E0 = (uint64_t)v27;
  if (v24)
  {
LABEL_43:
    if (v23 >= 0) {
      uint64_t v28 = &qword_25E3270;
    }
    else {
      uint64_t v28 = (uint64_t *)qword_25E3270;
    }
    memmove(v27, v28, v24);
  }
LABEL_47:
  char v29 = (char *)v27 + v24;
  if (v25)
  {
    if ((int)v272 >= 0) {
      uint64_t v30 = &qword_25E25B0;
    }
    else {
      uint64_t v30 = (uint64_t *)qword_25E25B0;
    }
    memmove(v29, v30, v25);
  }
  v29[v25] = 0;
  int v31 = byte_25E332F;
  if (byte_25E332F >= 0) {
    size_t v32 = byte_25E332F;
  }
  else {
    size_t v32 = qword_25E3320;
  }
  unint64_t v33 = v32 + v24;
  if (v32 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v33 <= 0x16)
  {
    long long v34 = &qword_25E34F8;
    qword_25E3500 = 0;
    unk_25E3508 = 0;
    qword_25E34F8 = 0;
    byte_25E350F = v32 + v24;
    if (!v24) {
      goto LABEL_62;
    }
    goto LABEL_58;
  }
  uint64_t v92 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v92 = v33 | 7;
  }
  uint64_t v93 = v92 + 1;
  long long v34 = (uint64_t *)operator new(v92 + 1);
  qword_25E3500 = v32 + v24;
  unk_25E3508 = v93 | 0x8000000000000000;
  qword_25E34F8 = (uint64_t)v34;
  if (v24)
  {
LABEL_58:
    if (v23 >= 0) {
      long long v35 = &qword_25E3270;
    }
    else {
      long long v35 = (uint64_t *)qword_25E3270;
    }
    memmove(v34, v35, v24);
  }
LABEL_62:
  long long v36 = (char *)v34 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      int v37 = &qword_25E3318;
    }
    else {
      int v37 = (uint64_t *)qword_25E3318;
    }
    memmove(v36, v37, v32);
  }
  v36[v32] = 0;
  qword_25E3510 = (uint64_t)operator new(0x19uLL);
  unk_25E3518 = v282;
  strcpy((char *)qword_25E3510, "{ChargeStationCityName}");
  if (v33 < 0x17)
  {
    int v38 = &qword_25E3528;
    qword_25E3530 = 0;
    unk_25E3538 = 0;
    qword_25E3528 = 0;
    byte_25E353F = v32 + v24;
    if (!v24) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  uint64_t v94 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v94 = v33 | 7;
  }
  uint64_t v95 = v94 + 1;
  int v38 = (uint64_t *)operator new(v94 + 1);
  qword_25E3530 = v32 + v24;
  unk_25E3538 = v95 | 0x8000000000000000;
  qword_25E3528 = (uint64_t)v38;
  if (v24)
  {
LABEL_69:
    if (v23 >= 0) {
      __n128 v39 = &qword_25E3270;
    }
    else {
      __n128 v39 = (uint64_t *)qword_25E3270;
    }
    memmove(v38, v39, v24);
  }
LABEL_73:
  long long v40 = (char *)v38 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      int v41 = &qword_25E3318;
    }
    else {
      int v41 = (uint64_t *)qword_25E3318;
    }
    memmove(v40, v41, v32);
  }
  v40[v32] = 0;
  strcpy((char *)&xmmword_25E3540, "{NewBatteryPercentage}");
  HIBYTE(word_25E3556) = 22;
  qword_25E3558 = (uint64_t)operator new(0x20uLL);
  xmmword_25E3560 = v275;
  strcpy((char *)qword_25E3558, "{OriginalBatteryPercentage}");
  byte_25E3587 = 19;
  strcpy((char *)&xmmword_25E3570, "_Arrival_Percentage");
  int v42 = byte_25E3317;
  if (byte_25E3317 >= 0) {
    size_t v43 = byte_25E3317;
  }
  else {
    size_t v43 = qword_25E3308;
  }
  unint64_t v44 = v43 + v25;
  if (v43 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v44 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43 + v25;
    if (!v43) {
      goto LABEL_88;
    }
    goto LABEL_84;
  }
  uint64_t v96 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v44 | 7) != 0x17) {
    uint64_t v96 = v44 | 7;
  }
  uint64_t v97 = v96 + 1;
  p_dst = (char *)operator new(v96 + 1);
  __dst.__r_.__value_.__l.__size_ = v43 + v25;
  __dst.__r_.__value_.__r.__words[2] = v97 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v43)
  {
LABEL_84:
    if (v42 >= 0) {
      uint64_t v46 = &qword_25E3300;
    }
    else {
      uint64_t v46 = (uint64_t *)qword_25E3300;
    }
    memmove(p_dst, v46, v43);
  }
LABEL_88:
  uint64_t v47 = &p_dst[v43];
  if (v25)
  {
    if ((int)v272 >= 0) {
      uint64_t v48 = &qword_25E25B0;
    }
    else {
      uint64_t v48 = (uint64_t *)qword_25E25B0;
    }
    memmove(v47, v48, v25);
  }
  v47[v25] = 0;
  unint64_t v49 = std::string::append(&__dst, "_Percentage");
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  qword_25E3598 = v49->__r_.__value_.__r.__words[2];
  xmmword_25E3588 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v51 = byte_25E3317;
  if (byte_25E3317 >= 0) {
    size_t v52 = byte_25E3317;
  }
  else {
    size_t v52 = qword_25E3308;
  }
  int v53 = byte_25E25C7;
  if (byte_25E25C7 >= 0) {
    size_t v54 = byte_25E25C7;
  }
  else {
    size_t v54 = unk_25E25B8;
  }
  unint64_t v55 = v54 + v52;
  if (v54 + v52 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v55 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    unint64_t v56 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v54 + v52;
    if (!v52) {
      goto LABEL_108;
    }
    goto LABEL_104;
  }
  uint64_t v98 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v98 = v55 | 7;
  }
  uint64_t v99 = v98 + 1;
  unint64_t v56 = (char *)operator new(v98 + 1);
  v283.__r_.__value_.__l.__size_ = v54 + v52;
  v283.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if (v52)
  {
LABEL_104:
    if (v51 >= 0) {
      long long v57 = &qword_25E3300;
    }
    else {
      long long v57 = (uint64_t *)qword_25E3300;
    }
    memmove(v56, v57, v52);
  }
LABEL_108:
  long long v58 = &v56[v52];
  if (v54)
  {
    if (v53 >= 0) {
      int v59 = &qword_25E25B0;
    }
    else {
      int v59 = (uint64_t *)qword_25E25B0;
    }
    memmove(v58, v59, v54);
  }
  v58[v54] = 0;
  if (byte_25E25F7 >= 0) {
    long long v60 = (const std::string::value_type *)&qword_25E25E0;
  }
  else {
    long long v60 = (const std::string::value_type *)qword_25E25E0;
  }
  if (byte_25E25F7 >= 0) {
    std::string::size_type v61 = byte_25E25F7;
  }
  else {
    std::string::size_type v61 = *(void *)&byte_25E25E8;
  }
  uint64_t v62 = std::string::append(&v283, v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  unsigned __int32 v64 = std::string::append(&__dst, "_Percentage");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  qword_25E35B0 = v64->__r_.__value_.__r.__words[2];
  xmmword_25E35A0 = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_121:
  int v66 = byte_25E3317;
  if (byte_25E3317 >= 0) {
    size_t v67 = byte_25E3317;
  }
  else {
    size_t v67 = qword_25E3308;
  }
  int v68 = byte_25E25C7;
  if (byte_25E25C7 >= 0) {
    size_t v69 = byte_25E25C7;
  }
  else {
    size_t v69 = unk_25E25B8;
  }
  unint64_t v70 = v69 + v67;
  if (v69 + v67 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v70 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v71 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v69 + v67;
    if (!v67) {
      goto LABEL_134;
    }
    goto LABEL_130;
  }
  uint64_t v100 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v70 | 7) != 0x17) {
    uint64_t v100 = v70 | 7;
  }
  uint64_t v101 = v100 + 1;
  uint64_t v71 = (char *)operator new(v100 + 1);
  __dst.__r_.__value_.__l.__size_ = v69 + v67;
  __dst.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
  if (v67)
  {
LABEL_130:
    if (v66 >= 0) {
      __n128 v72 = &qword_25E3300;
    }
    else {
      __n128 v72 = (uint64_t *)qword_25E3300;
    }
    memmove(v71, v72, v67);
  }
LABEL_134:
  uint64_t v73 = &v71[v67];
  if (v69)
  {
    if (v68 >= 0) {
      unint64_t v74 = &qword_25E25B0;
    }
    else {
      unint64_t v74 = (uint64_t *)qword_25E25B0;
    }
    memmove(v73, v74, v69);
  }
  v73[v69] = 0;
  __n128 v75 = std::string::append(&__dst, "_Duration");
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  qword_25E35C8 = v75->__r_.__value_.__r.__words[2];
  xmmword_25E35B8 = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v77 = byte_25E3317;
  if (byte_25E3317 >= 0) {
    size_t v78 = byte_25E3317;
  }
  else {
    size_t v78 = qword_25E3308;
  }
  int v79 = byte_25E25C7;
  if (byte_25E25C7 >= 0) {
    size_t v80 = byte_25E25C7;
  }
  else {
    size_t v80 = unk_25E25B8;
  }
  unint64_t v81 = v80 + v78;
  if (v80 + v78 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v81 <= 0x16)
  {
    qword_25E35D8 = 0;
    unk_25E35E0 = 0;
    qword_25E35D0 = 0;
    char v82 = &qword_25E35D0;
    byte_25E35E7 = v80 + v78;
    if (!v78) {
      goto LABEL_154;
    }
    goto LABEL_150;
  }
  uint64_t v102 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v102 = v81 | 7;
  }
  uint64_t v103 = v102 + 1;
  char v82 = (uint64_t *)operator new(v102 + 1);
  qword_25E35D8 = v80 + v78;
  unk_25E35E0 = v103 | 0x8000000000000000;
  qword_25E35D0 = (uint64_t)v82;
  if (v78)
  {
LABEL_150:
    if (v77 >= 0) {
      __n128 v83 = &qword_25E3300;
    }
    else {
      __n128 v83 = (uint64_t *)qword_25E3300;
    }
    memmove(v82, v83, v78);
  }
LABEL_154:
  long long v84 = (char *)v82 + v78;
  if (v80)
  {
    if (v79 >= 0) {
      uint64_t v85 = &qword_25E25B0;
    }
    else {
      uint64_t v85 = (uint64_t *)qword_25E25B0;
    }
    memmove(v84, v85, v80);
  }
  v84[v80] = 0;
  int v86 = byte_25E35E7;
  if (byte_25E35E7 >= 0) {
    size_t v87 = byte_25E35E7;
  }
  else {
    size_t v87 = qword_25E35D8;
  }
  unint64_t v88 = v87 + 5;
  if (v87 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v88 >= 0x17)
  {
    uint64_t v104 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17) {
      uint64_t v104 = v88 | 7;
    }
    uint64_t v105 = v104 + 1;
    int v89 = (uint64_t *)operator new(v104 + 1);
    qword_25E35F0 = v87 + 5;
    unk_25E35F8 = v105 | 0x8000000000000000;
    qword_25E35E8 = (uint64_t)v89;
  }
  else
  {
    int v89 = &qword_25E35E8;
    qword_25E35F0 = 0;
    unk_25E35F8 = 0;
    qword_25E35E8 = 0;
    byte_25E35FF = v87 + 5;
    if (!v87) {
      goto LABEL_201;
    }
  }
  if (v86 >= 0) {
    long long v106 = &qword_25E35D0;
  }
  else {
    long long v106 = (uint64_t *)qword_25E35D0;
  }
  memmove(v89, v106, v87);
LABEL_201:
  strcpy((char *)v89 + v87, "_Name");
  int v107 = byte_25E3317;
  if (byte_25E3317 >= 0) {
    size_t v108 = byte_25E3317;
  }
  else {
    size_t v108 = qword_25E3308;
  }
  int v109 = byte_25E25C7;
  if (byte_25E25C7 >= 0) {
    size_t v110 = byte_25E25C7;
  }
  else {
    size_t v110 = unk_25E25B8;
  }
  unint64_t v111 = v110 + v108;
  if (v110 + v108 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v111 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    unint64_t v112 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v110 + v108;
    if (!v108) {
      goto LABEL_214;
    }
    goto LABEL_210;
  }
  uint64_t v122 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v111 | 7) != 0x17) {
    uint64_t v122 = v111 | 7;
  }
  uint64_t v123 = v122 + 1;
  unint64_t v112 = (char *)operator new(v122 + 1);
  __dst.__r_.__value_.__l.__size_ = v110 + v108;
  __dst.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
  if (v108)
  {
LABEL_210:
    if (v107 >= 0) {
      BOOL v113 = &qword_25E3300;
    }
    else {
      BOOL v113 = (uint64_t *)qword_25E3300;
    }
    memmove(v112, v113, v108);
  }
LABEL_214:
  unsigned int v114 = &v112[v108];
  if (v110)
  {
    if (v109 >= 0) {
      uint64_t v115 = &qword_25E25B0;
    }
    else {
      uint64_t v115 = (uint64_t *)qword_25E25B0;
    }
    memmove(v114, v115, v110);
  }
  v114[v110] = 0;
  unint64_t v116 = std::string::append(&__dst, "_Connector_Type");
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  qword_25E3610 = v116->__r_.__value_.__r.__words[2];
  xmmword_25E3600 = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v118 = SHIBYTE(qword_25E3610);
  if (qword_25E3610 >= 0) {
    size_t v119 = HIBYTE(qword_25E3610);
  }
  else {
    size_t v119 = *((void *)&xmmword_25E3600 + 1);
  }
  unint64_t v120 = v119 + 6;
  if (v119 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v120 >= 0x17)
  {
    uint64_t v124 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17) {
      uint64_t v124 = v120 | 7;
    }
    uint64_t v125 = v124 + 1;
    BOOL v121 = (uint64_t *)operator new(v124 + 1);
    qword_25E3620 = v119 + 6;
    unk_25E3628 = v125 | 0x8000000000000000;
    qword_25E3618 = (uint64_t)v121;
  }
  else
  {
    BOOL v121 = &qword_25E3618;
    qword_25E3620 = 0;
    unk_25E3628 = 0;
    qword_25E3618 = 0;
    byte_25E362F = v119 + 6;
    if (!v119) {
      goto LABEL_239;
    }
  }
  if (v118 >= 0) {
    unint64_t v126 = &xmmword_25E3600;
  }
  else {
    unint64_t v126 = (long long *)xmmword_25E3600;
  }
  memmove(v121, v126, v119);
LABEL_239:
  strcpy((char *)v121 + v119, "_Power");
  int v127 = byte_25E3317;
  if (byte_25E3317 >= 0) {
    size_t v128 = byte_25E3317;
  }
  else {
    size_t v128 = qword_25E3308;
  }
  int v129 = byte_25E25C7;
  if (byte_25E25C7 >= 0) {
    size_t v130 = byte_25E25C7;
  }
  else {
    size_t v130 = unk_25E25B8;
  }
  unint64_t v131 = v130 + v128;
  if (v130 + v128 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v131 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    size_t v132 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v130 + v128;
    if (!v128) {
      goto LABEL_252;
    }
    goto LABEL_248;
  }
  uint64_t v161 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v131 | 7) != 0x17) {
    uint64_t v161 = v131 | 7;
  }
  uint64_t v162 = v161 + 1;
  size_t v132 = (char *)operator new(v161 + 1);
  __dst.__r_.__value_.__l.__size_ = v130 + v128;
  __dst.__r_.__value_.__r.__words[2] = v162 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
  if (v128)
  {
LABEL_248:
    if (v127 >= 0) {
      uint64_t v133 = &qword_25E3300;
    }
    else {
      uint64_t v133 = (uint64_t *)qword_25E3300;
    }
    memmove(v132, v133, v128);
  }
LABEL_252:
  uint64_t v134 = &v132[v128];
  if (v130)
  {
    if (v129 >= 0) {
      uint64_t v135 = &qword_25E25B0;
    }
    else {
      uint64_t v135 = (uint64_t *)qword_25E25B0;
    }
    memmove(v134, v135, v130);
  }
  v134[v130] = 0;
  if (byte_25E2D8F >= 0) {
    uint64_t v136 = (const std::string::value_type *)&qword_25E2D78;
  }
  else {
    uint64_t v136 = (const std::string::value_type *)qword_25E2D78;
  }
  if (byte_25E2D8F >= 0) {
    std::string::size_type v137 = byte_25E2D8F;
  }
  else {
    std::string::size_type v137 = unk_25E2D80;
  }
  uint64_t v138 = std::string::append(&__dst, v136, v137);
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  qword_25E3640 = v138->__r_.__value_.__r.__words[2];
  xmmword_25E3630 = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v140 = byte_25E3317;
  if (byte_25E3317 >= 0) {
    size_t v141 = byte_25E3317;
  }
  else {
    size_t v141 = qword_25E3308;
  }
  int v142 = byte_25E25C7;
  if (byte_25E25C7 >= 0) {
    size_t v143 = byte_25E25C7;
  }
  else {
    size_t v143 = unk_25E25B8;
  }
  unint64_t v144 = v143 + v141;
  if (v143 + v141 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v144 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    uint64_t v145 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v143 + v141;
    if (!v141) {
      goto LABEL_278;
    }
    goto LABEL_274;
  }
  uint64_t v163 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v144 | 7) != 0x17) {
    uint64_t v163 = v144 | 7;
  }
  uint64_t v164 = v163 + 1;
  uint64_t v145 = (char *)operator new(v163 + 1);
  v283.__r_.__value_.__l.__size_ = v143 + v141;
  v283.__r_.__value_.__r.__words[2] = v164 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
  if (v141)
  {
LABEL_274:
    if (v140 >= 0) {
      unint64_t v146 = &qword_25E3300;
    }
    else {
      unint64_t v146 = (uint64_t *)qword_25E3300;
    }
    memmove(v145, v146, v141);
  }
LABEL_278:
  int v147 = &v145[v141];
  if (v143)
  {
    if (v142 >= 0) {
      uint64_t v148 = &qword_25E25B0;
    }
    else {
      uint64_t v148 = (uint64_t *)qword_25E25B0;
    }
    memmove(v147, v148, v143);
  }
  v147[v143] = 0;
  if (byte_25E25F7 >= 0) {
    uint64_t v149 = (const std::string::value_type *)&qword_25E25E0;
  }
  else {
    uint64_t v149 = (const std::string::value_type *)qword_25E25E0;
  }
  if (byte_25E25F7 >= 0) {
    std::string::size_type v150 = byte_25E25F7;
  }
  else {
    std::string::size_type v150 = *(void *)&byte_25E25E8;
  }
  uint64_t v151 = std::string::append(&v283, v149, v150);
  long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  if (byte_25E2D8F >= 0) {
    uint64_t v153 = (const std::string::value_type *)&qword_25E2D78;
  }
  else {
    uint64_t v153 = (const std::string::value_type *)qword_25E2D78;
  }
  if (byte_25E2D8F >= 0) {
    std::string::size_type v154 = byte_25E2D8F;
  }
  else {
    std::string::size_type v154 = unk_25E2D80;
  }
  unint64_t v155 = std::string::append(&__dst, v153, v154);
  long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  qword_25E3658 = v155->__r_.__value_.__r.__words[2];
  xmmword_25E3648 = v156;
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_297;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_297;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_297:
  byte_25E3677 = 16;
  strcpy((char *)&xmmword_25E3660, "Use_NACS_Adapter");
  byte_25E368F = 16;
  strcpy(byte_25E3678, "Start_Route_Sign");
  qword_25E3690 = (uint64_t)operator new(0x20uLL);
  unk_25E3698 = v278;
  strcpy((char *)qword_25E3690, "Start_Route_Spoken_Primary");
  int v157 = byte_25E1D27;
  if (byte_25E1D27 >= 0) {
    size_t v158 = byte_25E1D27;
  }
  else {
    size_t v158 = qword_25E1D18;
  }
  unint64_t v159 = v158 + 27;
  if (v158 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v159 <= 0x16)
  {
    uint64_t v160 = &qword_25E36A8;
    qword_25E36B0 = 0;
    unk_25E36B8 = 0;
    qword_25E36A8 = 0;
    byte_25E36BF = v158 + 27;
LABEL_314:
    if (v157 >= 0) {
      long long v167 = &qword_25E1D10;
    }
    else {
      long long v167 = (uint64_t *)qword_25E1D10;
    }
    memmove(v160, v167, v158);
    goto LABEL_318;
  }
  uint64_t v165 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v159 | 7) != 0x17) {
    uint64_t v165 = v159 | 7;
  }
  uint64_t v166 = v165 + 1;
  uint64_t v160 = (uint64_t *)operator new(v165 + 1);
  qword_25E36B0 = v158 + 27;
  unk_25E36B8 = v166 | 0x8000000000000000;
  qword_25E36A8 = (uint64_t)v160;
  if (v158) {
    goto LABEL_314;
  }
LABEL_318:
  strcpy((char *)v160 + v158, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_25E36D7, "\t_Two_Lanes");
  strcpy((char *)&qword_25E36C0, "_One_Lane");
  strcpy(&byte_25E36EF, "\n_Three_Lanes");
  byte_25E3707 = 12;
  byte_25E371F = 11;
  strcpy((char *)&qword_25E3708, "_Four_Lanes");
  byte_25E3737 = 11;
  strcpy((char *)&qword_25E3720, "_Five_Lanes");
  strcpy(&byte_25E374F, "\n_Seven_Lanes");
  strcpy((char *)&qword_25E3738, "_Six_Lanes");
  byte_25E3767 = 12;
  byte_25E377F = 12;
  strcpy((char *)&qword_25E3768, "_Eight_Lanes");
  byte_25E3797 = 12;
  strcpy((char *)&qword_25E3780, "_Second_Lane");
  byte_25E37AF = 11;
  strcpy((char *)&qword_25E3798, "_Third_Lane");
  byte_25E37C7 = 19;
  long long v272 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_25E37B0, "_Second_Third_Lanes");
  byte_25E37DF = 4;
  strcpy((char *)&dword_25E37C8, "Left");
  byte_25E37F7 = 5;
  byte_25E37E4 = 116;
  dword_25E37E0 = 1751607634;
  byte_25E37E5 = 0;
  byte_25E380F = 6;
  strcpy((char *)&dword_25E37F8, "Middle");
  BYTE1(qword_25E3820) = 0;
  WORD1(qword_25E3820) = 0;
  HIDWORD(qword_25E3820) = 0x10000000;
  strcpy((char *)dword_25E3810, "Left_Second_Lane");
  BYTE1(qword_25E3838) = 0;
  WORD1(qword_25E3838) = 0;
  HIDWORD(qword_25E3838) = 285212672;
  strcpy((char *)&dword_25E3828, "Right_Second_Lan");
  qword_25E3850 = 0xF00000000000000;
  strcpy((char *)&dword_25E3840, "Left_Third_Lane");
  qword_25E3868 = 0x1000000000000000;
  byte_25E385C = 116;
  dword_25E3858 = 1751607634;
  dword_25E3864 = 1701732684;
  unk_25E385D = *(void *)"_Third_Lane";
  uint64_t v168 = (char *)operator new(0x19uLL);
  qword_25E3870 = (uint64_t)v168;
  unk_25E3878 = v282;
  *(_DWORD *)uint64_t v168 = 1952867660;
  strcpy(v168 + 19, "anes");
  *(_OWORD *)(v168 + 4) = v272;
  char v169 = (char *)operator new(0x20uLL);
  qword_25E3888 = (uint64_t)v169;
  xmmword_25E3890 = v281;
  *(_DWORD *)char v169 = 1751607634;
  v169[4] = 116;
  strcpy(v169 + 20, "anes");
  *(_OWORD *)(v169 + 5) = v272;
  byte_25E38B7 = 5;
  strcpy((char *)&dword_25E38A0, "_Stay");
  byte_25E38CF = 13;
  strcpy((char *)&qword_25E38B8, "Continue_Sign");
  byte_25E38E7 = 8;
  strcpy((char *)&qword_25E38D0, "Continue");
  int v170 = byte_25E2DA7;
  if (byte_25E2DA7 >= 0) {
    size_t v171 = byte_25E2DA7;
  }
  else {
    size_t v171 = qword_25E2D98;
  }
  unint64_t v172 = v171 + 8;
  if (v171 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v172 >= 0x17)
  {
    uint64_t v174 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17) {
      uint64_t v174 = v172 | 7;
    }
    uint64_t v175 = v174 + 1;
    __n128 v176 = operator new(v174 + 1);
    qword_25E38F0 = v171 + 8;
    qword_25E38F8 = v175 | 0x8000000000000000;
    qword_25E38E8 = (uint64_t)v176;
    *__n128 v176 = 0x65756E69746E6F43;
    unint64_t v173 = v176 + 1;
  }
  else
  {
    qword_25E38F8 = 0;
    HIBYTE(qword_25E38F8) = v171 + 8;
    qword_25E38E8 = 0x65756E69746E6F43;
    qword_25E38F0 = 0;
    unint64_t v173 = &qword_25E38F0;
    if (!v171) {
      goto LABEL_332;
    }
  }
  if (v170 >= 0) {
    unint64_t v177 = &qword_25E2D90;
  }
  else {
    unint64_t v177 = (uint64_t *)qword_25E2D90;
  }
  memmove(v173, v177, v171);
LABEL_332:
  *((unsigned char *)v173 + v171) = 0;
  int v178 = SHIBYTE(qword_25E2E00);
  if (qword_25E2E00 >= 0) {
    size_t v179 = HIBYTE(qword_25E2E00);
  }
  else {
    size_t v179 = unk_25E2DF8;
  }
  unint64_t v180 = v179 + 8;
  if (v179 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v180 >= 0x17)
  {
    uint64_t v182 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17) {
      uint64_t v182 = v180 | 7;
    }
    uint64_t v183 = v182 + 1;
    char v184 = operator new(v182 + 1);
    qword_25E3908 = v179 + 8;
    qword_25E3910 = v183 | 0x8000000000000000;
    qword_25E3900 = (uint64_t)v184;
    *char v184 = qword_25E38D0;
    uint64_t v181 = v184 + 1;
  }
  else
  {
    qword_25E3910 = 0;
    HIBYTE(qword_25E3910) = v179 + 8;
    qword_25E3900 = qword_25E38D0;
    qword_25E3908 = 0;
    uint64_t v181 = &qword_25E3908;
    if (!v179) {
      goto LABEL_346;
    }
  }
  if (v178 >= 0) {
    uint64_t v185 = &qword_25E2DF0;
  }
  else {
    uint64_t v185 = (uint64_t *)qword_25E2DF0;
  }
  memmove(v181, v185, v179);
LABEL_346:
  *((unsigned char *)v181 + v179) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v285[23] = 2;
  strcpy(v285, "SW");
  v287[7] = 1;
  LOWORD(v286[0]) = 87;
  HIBYTE(v288) = 2;
  strcpy(&v287[8], "NW");
  HIBYTE(v290) = 1;
  LOWORD(v289[0]) = 78;
  HIBYTE(v292) = 2;
  strcpy((char *)&v291, "NE");
  HIBYTE(v294) = 1;
  LOWORD(v293) = 69;
  HIBYTE(v296) = 2;
  strcpy((char *)&__p, "SE");
  sub_4BDC0C(qword_25E3918, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v296) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
LABEL_348:
      if ((SHIBYTE(v292) & 0x80000000) == 0) {
        goto LABEL_349;
      }
      goto LABEL_383;
    }
  }
  else if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
    goto LABEL_348;
  }
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_349:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_350;
    }
    goto LABEL_384;
  }
LABEL_383:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_350:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_351;
    }
    goto LABEL_385;
  }
LABEL_384:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_351:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_352;
    }
    goto LABEL_386;
  }
LABEL_385:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_352:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_353;
    }
LABEL_387:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_388;
  }
LABEL_386:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_387;
  }
LABEL_353:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_354;
  }
LABEL_388:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_354:
  byte_25E3947 = 13;
  strcpy((char *)&qword_25E3930, "{instruction}");
  byte_25E395F = 20;
  strcpy(byte_25E3948, "{primaryInstruction}");
  strcpy((char *)&xmmword_25E3960, "{secondaryInstruction}");
  HIBYTE(word_25E3976) = 22;
  qword_25E3978 = (uint64_t)operator new(0x20uLL);
  unk_25E3980 = v280;
  strcpy((char *)qword_25E3978, "{andSecondaryInstruction}");
  qword_25E3990 = (uint64_t)operator new(0x20uLL);
  unk_25E3998 = v281;
  strcpy((char *)qword_25E3990, "{toSecondaryInstruction}");
  byte_25E39BF = 21;
  strcpy(byte_25E39A8, "{continueInstruction}");
  qword_25E39C0 = (uint64_t)operator new(0x20uLL);
  unk_25E39C8 = v278;
  strcpy((char *)qword_25E39C0, "{thenSecondaryInstruction}");
  byte_25E39EF = 14;
  strcpy((char *)&qword_25E39D8, "{instruction1}");
  byte_25E3A07 = 14;
  strcpy((char *)&qword_25E39F0, "{instruction2}");
  strcpy(&byte_25E3A1F, "\n{nextDistance}");
  strcpy((char *)&qword_25E3A08, "{distance}");
  byte_25E3A37 = 14;
  byte_25E3A4F = 16;
  strcpy(byte_25E3A38, "{valid_distance}");
  strcpy(&byte_25E3A67, "\n{valid_distance}");
  strcpy((char *)&qword_25E3A50, "{distance}");
  byte_25E3A7F = 16;
  byte_25E3A97 = 15;
  strcpy((char *)&qword_25E3A80, "{ClimbDistance}");
  byte_25E3AAF = 17;
  strcpy(byte_25E3A98, "{DescentDistance}");
  byte_25E3AC7 = 13;
  strcpy((char *)&qword_25E3AB0, "{nonBrkSpace}");
  byte_25E3ADF = 9;
  strcpy((char *)&qword_25E3AC8, "{newLine}");
  byte_25E3AF7 = 6;
  word_25E3AE4 = -24382;
  dword_25E3AE0 = -1211981630;
  byte_25E3AE6 = 0;
  byte_25E3B0F = 2;
  word_25E3AF8 = -24382;
  byte_25E3AFA = 0;
  byte_25E3B27 = 1;
  word_25E3B10 = 10;
  byte_25E3B3F = 1;
  word_25E3B28 = 32;
  byte_25E3B57 = 2;
  strcpy((char *)&word_25E3B40, "\n\n");
  strcpy(&byte_25E3B6F, "\t{TowardShield1}");
  strcpy((char *)&qword_25E3B58, "{Shield1}");
  byte_25E3B87 = 15;
  strcpy(&byte_25E3B9F, "\t{TowardShield2}");
  strcpy((char *)&qword_25E3B88, "{Shield2}");
  byte_25E3BB7 = 15;
  byte_25E3BCF = 12;
  strcpy((char *)&qword_25E3BB8, "{Direction1}");
  byte_25E3BE7 = 12;
  strcpy((char *)&qword_25E3BD0, "{Direction2}");
  byte_25E3BFF = 18;
  strcpy((char *)&xmmword_25E3BE8, "{TowardDirection1}");
  byte_25E3C17 = 18;
  strcpy((char *)&xmmword_25E3C00, "{TowardDirection2}");
  byte_25E3C2F = 7;
  strcpy((char *)&dword_25E3C18, "{Icon1}");
  byte_25E3C47 = 7;
  strcpy((char *)&dword_25E3C30, "{Icon2}");
  byte_25E3C48[23] = 14;
  strcpy(byte_25E3C48, "{Intersection}");
  byte_25E3C77 = 6;
  strcpy((char *)&xmmword_25E3C60, "{Road}");
  byte_25E3C8F = 7;
  strcpy((char *)&dword_25E3C78, "{Road1}");
  byte_25E3CA7 = 7;
  strcpy((char *)&xmmword_25E3C90, "{Road2}");
  strcpy(&byte_25E3CBF, "\n{Freeway}");
  strcpy((char *)&qword_25E3CA8, "{Elevator}");
  strcpy(&byte_25E3CD7, "\t{Ferry}");
  byte_25E3CEF = 7;
  byte_25E3D07 = 13;
  strcpy((char *)&xmmword_25E3CF0, "{ShuttleName}");
  byte_25E3D1F = 11;
  strcpy((char *)&xmmword_25E3D08, "{Signpost1}");
  byte_25E3D37 = 11;
  strcpy((char *)&xmmword_25E3D20, "{Signpost2}");
  byte_25E3D4F = 12;
  strcpy((char *)&xmmword_25E3D38, "{ExitNumber}");
  strcpy(&byte_25E3D67, "\t{Name}");
  strcpy((char *)&xmmword_25E3D50, "{Address}");
  byte_25E3D7F = 6;
  byte_25E3D97 = 11;
  strcpy((char *)&xmmword_25E3D80, "{PlaceName}");
  byte_25E3DAF = 14;
  strcpy((char *)&xmmword_25E3D98, "{ElevatorName}");
  byte_25E3DC7 = 15;
  strcpy((char *)&xmmword_25E3DB0, "{EscalatorName}");
  byte_25E3DDF = 12;
  strcpy((char *)&xmmword_25E3DC8, "{StairsName}");
  strcpy(&byte_25E3DF7, "\n{BridgeName}");
  strcpy((char *)&xmmword_25E3DE0, "{RampName}");
  byte_25E3E0F = 12;
  byte_25E3E27 = 12;
  strcpy((char *)&xmmword_25E3E10, "{TunnelName}");
  byte_25E3E3F = 13;
  strcpy((char *)&xmmword_25E3E28, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_25E3C48;
  *(_OWORD *)unint64_t v285 = xmmword_25E3C60;
  *(void *)&v285[16] = unk_25E3C70;
  *(_OWORD *)__int16 v286 = *(_OWORD *)&dword_25E3C78;
  *(void *)unint64_t v287 = unk_25E3C88;
  *(_OWORD *)&v287[8] = xmmword_25E3C90;
  uint64_t v288 = unk_25E3CA0;
  *(_OWORD *)int v289 = *(_OWORD *)&qword_25E3CA8;
  uint64_t v290 = unk_25E3CB8;
  uint64_t v292 = unk_25E3CD0;
  long long v291 = xmmword_25E3CC0;
  long long v293 = *(_OWORD *)&dword_25E3CD8;
  uint64_t v294 = unk_25E3CE8;
  uint64_t v296 = unk_25E3D00;
  long long __p = xmmword_25E3CF0;
  long long v297 = xmmword_25E3D08;
  uint64_t v298 = unk_25E3D18;
  uint64_t v300 = unk_25E3D30;
  long long v299 = xmmword_25E3D20;
  long long v301 = xmmword_25E3D38;
  long long v303 = xmmword_25E3D50;
  uint64_t v302 = unk_25E3D48;
  uint64_t v304 = unk_25E3D60;
  long long v305 = xmmword_25E3D68;
  long long v307 = xmmword_25E3D80;
  uint64_t v306 = unk_25E3D78;
  uint64_t v308 = unk_25E3D90;
  long long v309 = xmmword_25E3D98;
  long long v311 = xmmword_25E3DB0;
  uint64_t v310 = unk_25E3DA8;
  uint64_t v312 = unk_25E3DC0;
  long long v313 = xmmword_25E3DC8;
  long long v315 = xmmword_25E3DE0;
  uint64_t v314 = unk_25E3DD8;
  uint64_t v316 = unk_25E3DF0;
  long long v317 = xmmword_25E3DF8;
  long long v319 = xmmword_25E3E10;
  uint64_t v318 = unk_25E3E08;
  uint64_t v320 = unk_25E3E20;
  uint64_t v322 = unk_25E3E38;
  long long v321 = xmmword_25E3E28;
  sub_4BDC0C(qword_25E3E40, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v322) < 0)
  {
    operator delete((void *)v321);
    if ((SHIBYTE(v320) & 0x80000000) == 0)
    {
LABEL_356:
      if ((SHIBYTE(v318) & 0x80000000) == 0) {
        goto LABEL_357;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
    goto LABEL_356;
  }
  operator delete((void *)v319);
  if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
LABEL_357:
    if ((SHIBYTE(v316) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_358:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_359;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_359:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_360;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_360:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_361;
    }
    goto LABEL_395;
  }
LABEL_394:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_396;
  }
LABEL_395:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_397;
  }
LABEL_396:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_398;
  }
LABEL_397:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_399;
  }
LABEL_398:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)__p);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_372:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_373:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_374;
    }
LABEL_408:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_409;
  }
LABEL_407:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_408;
  }
LABEL_374:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_409:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_375:
  qword_25E3E58 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_25E3E60 = v282;
  strcpy((char *)qword_25E3E58, "From_User_Location_List");
  byte_25E3E87 = 20;
  strcpy(&algn_25E3E60[16], "Origin_Waypoint_List");
  qword_25E3E88 = (uint64_t)operator new(0x20uLL);
  unk_25E3E90 = v278;
  strcpy((char *)qword_25E3E88, "Intermediate_Waypoint_List");
  unk_25E3EA0 = operator new(0x20uLL);
  unk_25E3EA8 = v280;
  strcpy(unk_25E3EA0, "Destination_Waypoint_List");
  byte_25E3ECF = 15;
  strcpy(byte_25E3EB8, "{toDestination}");
  byte_25E3EE7 = 13;
  strcpy((char *)&xmmword_25E3ED0, "{Destination}");
  byte_25E3EFF = 7;
  strcpy(byte_25E3EE8, "To_Home");
  byte_25E3F17 = 14;
  strcpy(byte_25E3F00, "To_ContactHome");
  byte_25E3F2F = 7;
  strcpy(byte_25E3F18, "To_Work");
  byte_25E3F47 = 14;
  strcpy(byte_25E3F30, "To_ContactWork");
  strcpy(&byte_25E3F5F, "\nTo_Business");
  strcpy(byte_25E3F48, "To_Address");
  byte_25E3F77 = 11;
  byte_25E3F8F = 16;
  strcpy(byte_25E3F78, "To_Other_Contact");
  strcpy(&byte_25E3FA7, "\tTo_ContactSchool");
  strcpy(byte_25E3F90, "To_School");
  byte_25E3FBF = 16;
  byte_25E3FD7 = 17;
  strcpy(byte_25E3FC0, "To_PersonLocation");
  qword_25E3FD8 = (uint64_t)operator new(0x20uLL);
  unk_25E3FE0 = v279;
  strcpy((char *)qword_25E3FD8, "To_ContactCustomLabelAddress");
  byte_25E4007 = 7;
  strcpy((char *)&dword_25E3FF0, "At_Home");
  byte_25E401F = 14;
  strcpy((char *)&qword_25E4008, "At_ContactHome");
  byte_25E4037 = 7;
  strcpy((char *)&dword_25E4020, "At_Work");
  byte_25E404F = 14;
  strcpy((char *)&qword_25E4038, "At_ContactWork");
  strcpy(&byte_25E4067, "\nAt_Business");
  strcpy((char *)&qword_25E4050, "At_Address");
  byte_25E407F = 11;
  byte_25E4097 = 16;
  strcpy(byte_25E4080, "At_Other_Contact");
  byte_25E40AF = 4;
  strcpy((char *)&dword_25E4098, "Home");
  byte_25E40C7 = 11;
  strcpy((char *)&qword_25E40B0 + 7, "Home");
  qword_25E40B0 = *(void *)&v266[16];
  byte_25E40DF = 4;
  strcpy((char *)&dword_25E40C8, "Work");
  byte_25E40F7 = 11;
  strcpy((char *)&qword_25E40E0 + 7, "Work");
  qword_25E40E0 = *(void *)v266;
  byte_25E410F = 7;
  strcpy((char *)&dword_25E40F8, "Address");
  byte_25E4127 = 8;
  strcpy((char *)&qword_25E4110, "Business");
  byte_25E413F = 13;
  qword_25E4128 = *(void *)&v266[48];
  *(uint64_t *)((char *)&qword_25E4128 + 5) = *(void *)&v266[32];
  byte_25E4135 = 0;
  byte_25E4157 = 6;
  strcpy((char *)&dword_25E4140, "School");
  byte_25E416F = 13;
  strcpy((char *)&qword_25E4158, "ContactSchool");
  byte_25E4187 = 14;
  strcpy((char *)&qword_25E4170, "PersonLocation");
  qword_25E4188 = (uint64_t)operator new(0x20uLL);
  xmmword_25E4190 = v280;
  strcpy((char *)qword_25E4188, "ContactCustomLabelAddress");
  if (byte_25E3EE7 < 0)
  {
    sub_4200(&xmmword_25E41A0, (void *)xmmword_25E3ED0, *((unint64_t *)&xmmword_25E3ED0 + 1));
  }
  else
  {
    xmmword_25E41A0 = xmmword_25E3ED0;
    qword_25E41B0 = unk_25E3EE0;
  }
  byte_25E41CF = 16;
  strcpy((char *)&xmmword_25E41B8, "{PrevExitNumber}");
  byte_25E41E7 = 10;
  strcpy((char *)&qword_25E41D0, "{PrevRoad}");
  qword_25E41E8 = (uint64_t)operator new(0x20uLL);
  unk_25E41F0 = v281;
  strcpy((char *)qword_25E41E8, "{RouteTotalExpectedTime}");
  byte_25E4217 = 18;
  strcpy(byte_25E4200, "{ChargePercentage}");
  qword_25E4218 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25E4220 = v275;
  strcpy((char *)qword_25E4218, "{RemainingChargePercentage}");
  byte_25E4247 = 16;
  strcpy(&algn_25E4220[16], "{ChargeDuration}");
  byte_25E425F = 15;
  strcpy((char *)&qword_25E4248, "{ConnectorType}");
  byte_25E4277 = 19;
  strcpy(byte_25E4260, "{ChargeStationName}");
  byte_25E428F = 7;
  strcpy((char *)&dword_25E4278, "{Power}");
  byte_25E42A7 = 13;
  strcpy((char *)&qword_25E4290, "{VehicleName}");
  byte_25E42BF = 18;
  strcpy((char *)&xmmword_25E42A8, "{AreaIncidentName}");
  byte_25E42D7 = 14;
  strcpy((char *)&qword_25E42C0, "{AreaIncident}");
  byte_25E42EF = 16;
  strcpy((char *)&xmmword_25E42D8, "{AffectedRegion}");
  byte_25E4307 = 21;
  strcpy(byte_25E42F0, "{AreaIncidentWeblink}");
  byte_25E431F = 20;
  strcpy((char *)&xmmword_25E4308, "{AreaIncidentAgency}");
  byte_25E4337 = 11;
  strcpy((char *)&qword_25E4320, "{IssueTime}");
  byte_25E434F = 12;
  strcpy((char *)&qword_25E4338, "{UpdateTime}");
  byte_25E4367 = 11;
  strcpy((char *)&qword_25E4350, "{IssueDate}");
  byte_25E437F = 12;
  strcpy((char *)&qword_25E4368, "{UpdateDate}");
  qword_25E4380 = (uint64_t)operator new(0x20uLL);
  unk_25E4388 = v281;
  strcpy((char *)qword_25E4380, "{AreaIncidentDataSource}");
  byte_25E43AF = 13;
  strcpy((char *)&qword_25E4398, "{AreaHectare}");
  byte_25E43C7 = 10;
  strcpy((char *)&qword_25E43B0, "{AreaAcre}");
  qword_25E43C8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25E43D0 = v277;
  strcpy((char *)qword_25E43C8, "{WildfirePercentageContained}");
  qword_25E43E0 = (uint64_t)operator new(0x28uLL);
  unk_25E43E8 = v270[2];
  strcpy((char *)qword_25E43E0, "{WildfireExpectedContainmentDate}");
  qword_25E43F8 = (uint64_t)operator new(0x20uLL);
  unk_25E4400 = v279;
  strcpy((char *)qword_25E43F8, "{ServerRecommendedRouteName}");
  qword_25E4410 = (uint64_t)operator new(0x20uLL);
  unk_25E4418 = v279;
  strcpy((char *)qword_25E4410, "{ServerNonRecommendedRoute1}");
  qword_25E4428 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25E4430 = v279;
  strcpy((char *)qword_25E4428, "{ServerNonRecommendedRoute2}");
  byte_25E4457 = 12;
  strcpy((char *)&qword_25E4440, "{ClientDest}");
  byte_25E446F = 6;
  strcpy((char *)&dword_25E4458, "{Name}");
  qword_25E4470 = (uint64_t)operator new(0x20uLL);
  unk_25E4478 = v270[1];
  strcpy((char *)qword_25E4470, "ProactiveAlert_FasterRouteTitle");
  qword_25E4488 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25E4490 = v278;
  strcpy((char *)qword_25E4488, "ProactiveAlert_RoadClosure");
  qword_25E44A0 = (uint64_t)operator new(0x30uLL);
  unk_25E44A8 = v273;
  strcpy((char *)qword_25E44A0, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_25E44B8 = (uint64_t)operator new(0x28uLL);
  unk_25E44C0 = v276;
  strcpy((char *)qword_25E44B8, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_25E44D0 = (uint64_t)operator new(0x28uLL);
  unk_25E44D8 = v276;
  strcpy((char *)qword_25E44D0, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_25E44E8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25E44F0 = v276;
  strcpy((char *)qword_25E44E8, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_25E4500 = (uint64_t)operator new(0x30uLL);
  unk_25E4508 = xmmword_20B93B0;
  strcpy((char *)qword_25E4500, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_25E452F = 17;
  strcpy(byte_25E4518, "Proactive_Driving");
  strcpy(&byte_25E4547, "\n{RouteName}");
  strcpy((char *)&qword_25E4530, "_RouteName");
  byte_25E455F = 11;
  qword_25E4560 = (uint64_t)operator new(0x28uLL);
  unk_25E4568 = v270[2];
  strcpy((char *)qword_25E4560, "Pass_Traffic_Light_Spoken_Primary");
  qword_25E4578 = (uint64_t)operator new(0x20uLL);
  unk_25E4580 = v277;
  strcpy((char *)qword_25E4578, "Pass_Stop_Sign_Spoken_Primary");
  unk_25E4590 = operator new(0x20uLL);
  unk_25E4598 = v270[0];
  strcpy(unk_25E4590, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_25E45BF, "\nBannerBody");
  strcpy(byte_25E45A8, "BannerHead");
  strcpy(&byte_25E45D7, "\nBannerDescription");
  byte_25E45EF = 17;
  strcpy(&byte_25E4607, "\n_Incident");
  strcpy((char *)&qword_25E45F0, "VoiceAlert");
  strcpy(&byte_25E461F, "\t_Area_Incident");
  byte_25E4637 = 14;
  byte_25E464F = 15;
  strcpy((char *)&qword_25E4638, "_Area_Incidents");
  strcpy(&byte_25E4667, "\t_Crash");
  strcpy((char *)&qword_25E4650, "_Accident");
  byte_25E467F = 6;
  byte_25E4697 = 16;
  strcpy((char *)&xmmword_25E4680, "_Congestion_Zone");
  strcpy(&byte_25E46AF, "\n_Environmental_Zone");
  strcpy((char *)&qword_25E4698, "_Toll_Zone");
  byte_25E46C7 = 19;
  BYTE1(qword_25E46D8) = 116;
  WORD1(qword_25E46D8) = 0;
  HIDWORD(qword_25E46D8) = 301989888;
  strcpy(byte_25E46E0, "_Construction");
  strcpy((char *)&qword_25E46C8, "_Incident_Accide");
  byte_25E46F7 = 13;
  byte_25E470F = 7;
  strcpy((char *)&dword_25E46F8, "_Hazard");
  byte_25E4727 = 12;
  strcpy((char *)&qword_25E4710, "_LaneClosure");
  byte_25E473F = 12;
  strcpy((char *)&qword_25E4728, "_LaneTrailer");
  qmemcpy(&byte_25E4757, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_25E4740, "_Shoulder");
  qword_25E4768 = 0x1500007200000000;
  *(void *)algn_25E4764 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_25E4770, "_Causing_Traffic_Delay");
  HIBYTE(word_25E4786) = 22;
  byte_25E479F = 6;
  strcpy((char *)&dword_25E4788, "_Timed");
  byte_25E47B7 = 12;
  strcpy((char *)&qword_25E47A0, "_HasDistance");
  byte_25E47CF = 8;
  strcpy((char *)&qword_25E47B8, "_Closure");
  strcpy(&byte_25E47E7, "\n_BadRoad");
  strcpy((char *)&qword_25E47D0, "_NoReroute");
  byte_25E47FF = 8;
  byte_25E4817 = 12;
  strcpy((char *)&qword_25E4800, "_TollTrailer");
  byte_25E482F = 12;
  strcpy((char *)&qword_25E4818, "_BestTrailer");
  byte_25E4847 = 8;
  strcpy((char *)&qword_25E4830, "_Trailer");
  byte_25E485F = 18;
  strcpy((char *)&xmmword_25E4848, "_Secondary_Trailer");
  byte_25E4877 = 8;
  strcpy((char *)&qword_25E4860, "_Savings");
  byte_25E488F = 8;
  strcpy((char *)&qword_25E4878, "_AltRoad");
  byte_25E48A7 = 6;
  strcpy((char *)&dword_25E4890, "_Named");
  byte_25E48BF = 6;
  strcpy((char *)&dword_25E48A8, "_NAMED");
  byte_25E48D7 = 22;
  strcpy((char *)&xmmword_25E48C0, "_Named_Suggested_Route");
  qword_25E48F0 = 0x1000000000000000;
  xmmword_25E48E0 = xmmword_20E81D0;
  byte_25E490F = 11;
  strcpy((char *)&qword_25E48F8, "_Speed_Trap");
  byte_25E4927 = 4;
  strcpy((char *)&dword_25E4910, "_UGI");
  byte_25E493F = 12;
  strcpy((char *)&qword_25E4928, "_Safer_Route");
  qword_25E4940 = (uint64_t)operator new(0x20uLL);
  unk_25E4948 = v270[1];
  strcpy((char *)qword_25E4940, "BlockedRouteByBlockingIncident_");
  qword_25E4958 = (uint64_t)operator new(0x28uLL);
  long long v272 = xmmword_20B9280;
  unk_25E4960 = xmmword_20B9280;
  strcpy((char *)qword_25E4958, "BlockedRouteByManeuverRestriction_");
  qword_25E4970 = (uint64_t)operator new(0x20uLL);
  unk_25E4978 = v270[0];
  strcpy((char *)qword_25E4970, "BlockedRouteByTimeRestriction_");
  qword_25E4988 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25E4990 = xmmword_20B8FD0;
  strcpy((char *)qword_25E4988, "SuggestRouteToAvoidBlockingIncident_");
  qword_25E49A0 = (uint64_t)operator new(0x30uLL);
  unk_25E49A8 = xmmword_20B9380;
  strcpy((char *)qword_25E49A0, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_25E49B8 = (uint64_t)operator new(0x30uLL);
  unk_25E49C0 = xmmword_20B93E0;
  strcpy((char *)qword_25E49B8, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_25E49E7 = 1;
  word_25E49D0 = 95;
  strcpy((char *)&xmmword_25E49E8, "IncidentsCausingDelay_");
  HIBYTE(word_25E49FE) = 22;
  qword_25E4A00 = (uint64_t)operator new(0x19uLL);
  unk_25E4A08 = v282;
  strcpy((char *)qword_25E4A00, "NonVotableRoadIncident_");
  byte_25E4A2F = 20;
  strcpy(byte_25E4A18, "VotableRoadIncident_");
  byte_25E4A47 = 13;
  strcpy((char *)&qword_25E4A30, "AreaIncident_");
  byte_25E4A5F = 15;
  strcpy((char *)&qword_25E4A48, "CongestionZone_");
  qword_25E4A60 = (uint64_t)operator new(0x20uLL);
  unk_25E4A68 = v281;
  strcpy((char *)qword_25E4A60, "EVModifiedChargingStops_");
  byte_25E4A8F = 13;
  strcpy((char *)&qword_25E4A78, "EVDisconnect_");
  byte_25E4AA7 = 12;
  strcpy((char *)&qword_25E4A90, "EVReconnect_");
  qword_25E4AA8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25E4AB0 = v279;
  strcpy((char *)qword_25E4AA8, "EVOfflineToOnlineTransition_");
  byte_25E4AD7 = 13;
  strcpy((char *)&qword_25E4AC0, "EVOfflineSAR_");
  byte_25E4AEF = 21;
  strcpy((char *)&xmmword_25E4AD8, "EVTowingNotSupported_");
  byte_25E4B07 = 18;
  strcpy(algn_25E4AF0, "EVInfeasibleRoute_");
  qword_25E4B08 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25E4B10 = xmmword_20B8DF0;
  strcpy((char *)qword_25E4B08, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25E4B20 = (uint64_t)operator new(0x40uLL);
  unk_25E4B28 = xmmword_20B98C0;
  strcpy((char *)qword_25E4B20, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25E4B38 = (uint64_t)operator new(0x30uLL);
  unk_25E4B40 = v274;
  strcpy((char *)qword_25E4B38, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v270, "InfeasibleRoute_ngStopsForEVInfeSuggestRouteAddi", sizeof(v270));
  qword_25E4B50 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v266[50] = 0;
  *(_DWORD *)&v266[52] = 0;
  *(void *)&v266[56] = 0x8000000000000030;
  unk_25E4B58 = xmmword_20B9A80;
  strcpy((char *)qword_25E4B50, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v266, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_25E4B68 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25E4B70 = v273;
  strcpy((char *)qword_25E4B68, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  int v186 = operator new(0x30uLL);
  qword_25E4B80 = (uint64_t)v186;
  unk_25E4B88 = v274;
  *int v186 = v270[2];
  v186[1] = v270[1];
  *(_OWORD *)((char *)v186 + 28) = v270[0];
  *((unsigned char *)v186 + 44) = 0;
  qword_25E4B98 = (uint64_t)operator new(0x28uLL);
  unk_25E4BA0 = v272;
  strcpy((char *)qword_25E4B98, "SuggestDetourWithHigherArrivalSOC_");
  uint64_t v187 = operator new(0x30uLL);
  qword_25E4BB0 = (uint64_t)v187;
  unk_25E4BB8 = *(_OWORD *)&v266[48];
  *uint64_t v187 = *(_OWORD *)&v266[32];
  v187[1] = *(_OWORD *)&v266[16];
  *(_OWORD *)((char *)v187 + 30) = *(_OWORD *)v266;
  *((unsigned char *)v187 + 46) = 0;
  qword_25E4BC8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25E4BD0 = v276;
  strcpy((char *)qword_25E4BC8, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_25E4BE0 = (uint64_t)operator new(0x28uLL);
  unk_25E4BE8 = v269;
  strcpy((char *)qword_25E4BE0, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_25E4BF8 = (uint64_t)operator new(0x20uLL);
  unk_25E4C00 = v281;
  strcpy((char *)qword_25E4BF8, "OfflineToOnlineNewRoute_");
  qword_25E4C10 = (uint64_t)operator new(0x40uLL);
  unk_25E4C18 = xmmword_20B98C0;
  strcpy((char *)qword_25E4C10, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_25E4C3F = 20;
  strcpy(byte_25E4C28, "LPR_OFFLINE_REROUTE_");
  byte_25E4C57 = 16;
  strcpy((char *)&xmmword_25E4C40, "LPR_OFFLINE_SAR_");
  byte_25E4C6F = 20;
  strcpy(byte_25E4C58, "LPR_OFFLINE_REROUTE_");
  byte_25E4C87 = 16;
  strcpy((char *)&xmmword_25E4C70, "LPR_OFFLINE_SAR_");
  byte_25E4C9F = 19;
  strcpy(byte_25E4C88, "SuggestFasterRoute_");
  qword_25E4CA0 = (char *)operator new(0x20uLL);
  xmmword_25E4CA8 = v280;
  strcpy(qword_25E4CA0, "AreaIncidentSaferReroute_");
  byte_25E4CCF = 12;
  strcpy((char *)&qword_25E4CB8, "_Remove_Stop");
  byte_25E4CE7 = 13;
  strcpy((char *)&qword_25E4CD0, "_Remove_Stops");
  strcpy(&byte_25E4CFF, "\t_Add_Stops");
  strcpy((char *)&qword_25E4CE8, "_Add_Stop");
  strcpy(&byte_25E4D17, "\n_Change_Route");
  byte_25E4D2F = 13;
  byte_25E4D47 = 15;
  strcpy((char *)&qword_25E4D30, "_Different_Stop");
  byte_25E4D5F = 16;
  strcpy((char *)&xmmword_25E4D48, "_Different_Stops");
  byte_25E4D77 = 15;
  strcpy((char *)&qword_25E4D60, "_EV_Remove_Stop");
  byte_25E4D8F = 16;
  strcpy((char *)&xmmword_25E4D78, "_EV_Remove_Stops");
  byte_25E4DA7 = 12;
  strcpy((char *)&qword_25E4D90, "_EV_Add_Stop");
  byte_25E4DBF = 13;
  strcpy((char *)&qword_25E4DA8, "_EV_Add_Stops");
  byte_25E4DD7 = 15;
  strcpy((char *)&qword_25E4DC0, "_EV_Low_Battery");
  byte_25E4DEF = 14;
  strcpy((char *)&qword_25E4DD8, "_EV_Infeasible");
  byte_25E4E07 = 15;
  strcpy((char *)&qword_25E4DF0, "_EV_Last_Chance");
  qword_25E4E08 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25E4E10 = v281;
  strcpy((char *)qword_25E4E08, "_EV_Low_Battery_Add_Stop");
  uint64_t v188 = qword_25E4D08;
  qword_25E4E20 = (uint64_t)operator new(0x20uLL);
  unk_25E4E28 = v280;
  strcpy((char *)qword_25E4E20, "_EV_Low_Battery_Add_Stops");
  qword_25E4E38 = (uint64_t)operator new(0x19uLL);
  unk_25E4E40 = v282;
  strcpy((char *)qword_25E4E38, "_EV_Infeasible_Add_Stop");
  int v189 = byte_25E4D17;
  if (byte_25E4D17 >= 0) {
    size_t v190 = byte_25E4D17;
  }
  else {
    size_t v190 = v188;
  }
  unint64_t v191 = v190 + 14;
  if (v190 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v191 >= 0x17)
  {
    uint64_t v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17) {
      uint64_t v194 = v191 | 7;
    }
    uint64_t v195 = v194 + 1;
    __n128 v196 = (char *)operator new(v194 + 1);
    qword_25E4E58 = v190 + 14;
    unk_25E4E60 = v195 | 0x8000000000000000;
    qword_25E4E50 = (uint64_t)v196;
    qmemcpy(v196, "_EV_Infeasible", 14);
    unsigned int v192 = v196 + 14;
  }
  else
  {
    BYTE1(qword_25E4E58) = 0;
    WORD1(qword_25E4E58) = 0;
    HIDWORD(qword_25E4E58) = 0;
    unk_25E4E60 = 0;
    byte_25E4E67 = v190 + 14;
    strcpy((char *)&qword_25E4E50, "_EV_Infe");
    unsigned int v192 = (char *)&qword_25E4E58 + 6;
    if (!v190)
    {
      char v193 = 1;
      goto LABEL_425;
    }
  }
  if (v189 >= 0) {
    uint64_t v197 = (uint64_t)&qword_25E4D00;
  }
  else {
    uint64_t v197 = 0x6F74535F6464415FLL;
  }
  memmove(v192, (const void *)v197, v190);
  char v193 = 0;
LABEL_425:
  v192[v190] = 0;
  long long v198 = (char *)operator new(0x20uLL);
  qword_25E4E68 = (uint64_t)v198;
  *(_OWORD *)algn_25E4E70 = v281;
  *(void *)long long v198 = qword_25E4DF0;
  *(void *)(v198 + 7) = *(uint64_t *)((char *)&qword_25E4DF0 + 7);
  *(void *)(v198 + 15) = qword_25E4CE8;
  v198[23] = word_25E4CF0;
  v198[24] = 0;
  unint64_t v199 = v190 + 15;
  if (v190 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v199 > 0x16)
  {
    uint64_t v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17) {
      uint64_t v201 = v199 | 7;
    }
    uint64_t v202 = v201 + 1;
    uint64_t v200 = (uint64_t *)operator new(v201 + 1);
    qword_25E4E88 = v190 + 15;
    unk_25E4E90 = v202 | 0x8000000000000000;
    qword_25E4E80 = (uint64_t)v200;
  }
  else
  {
    uint64_t v200 = &qword_25E4E80;
    qword_25E4E88 = 0;
    unk_25E4E90 = 0;
    qword_25E4E80 = 0;
    byte_25E4E97 = v190 + 15;
  }
  *uint64_t v200 = qword_25E4DF0;
  *(uint64_t *)((char *)v200 + 7) = *(uint64_t *)((char *)&qword_25E4DF0 + 7);
  char v203 = (char *)v200 + 15;
  if ((v193 & 1) == 0)
  {
    if (v189 >= 0) {
      uint64_t v204 = &qword_25E4D00;
    }
    else {
      uint64_t v204 = (uint64_t *)qword_25E4D00;
    }
    memmove((char *)v200 + 15, v204, v190);
  }
  v203[v190] = 0;
  byte_25E4EAF = 17;
  strcpy((char *)&xmmword_25E4E98, "_EV_Forced_Detour");
  qword_25E4EB0 = (uint64_t)operator new(0x20uLL);
  unk_25E4EB8 = v280;
  strcpy((char *)qword_25E4EB0, "_EV_Higher_Arrival_Charge");
  qword_25E4EC8 = (uint64_t)operator new(0x28uLL);
  unk_25E4ED0 = xmmword_20B8FD0;
  strcpy((char *)qword_25E4EC8, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_25E4EF7 = 16;
  strcpy(byte_25E4EE0, "_EV_Out_Of_Range");
  qword_25E4EF8 = (uint64_t)operator new(0x20uLL);
  unk_25E4F00 = v275;
  strcpy((char *)qword_25E4EF8, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_25E4F10, "_EV_Forced_Modify_Stop");
  HIBYTE(word_25E4F26) = 22;
  qword_25E4F28 = (uint64_t)operator new(0x19uLL);
  unk_25E4F30 = v282;
  strcpy((char *)qword_25E4F28, "_EV_Forced_Modify_Stops");
  byte_25E4F57 = 19;
  strcpy(byte_25E4F40, "_EV_Forced_Add_Stop");
  byte_25E4F6F = 20;
  strcpy((char *)&xmmword_25E4F58, "_EV_Forced_Add_Stops");
  byte_25E4F87 = 21;
  strcpy(byte_25E4F70, "_EV_Battery_Info_Lost");
  qword_25E4F88 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25E4F90 = v280;
  strcpy((char *)qword_25E4F88, "_EV_Battery_Info_Restored");
  qword_25E4FA0 = (uint64_t)operator new(0x20uLL);
  unk_25E4FA8 = v281;
  strcpy((char *)qword_25E4FA0, "_EV_Towing_Not_Supported");
  qword_25E4FB8 = (uint64_t)operator new(0x28uLL);
  unk_25E4FC0 = v271;
  strcpy((char *)qword_25E4FB8, "_EV_Offline_to_Online_Transition");
  byte_25E4FE7 = 15;
  strcpy((char *)&qword_25E4FD0, "_EV_Offline_SAR");
  qword_25E4FE8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25E4FF0 = v279;
  strcpy((char *)qword_25E4FE8, "_Offline_to_Online_New_Route");
  byte_25E5017 = 12;
  strcpy((char *)&qword_25E5000, "BannerButton");
  byte_25E502F = 8;
  strcpy((char *)&qword_25E5018, "_Dismiss");
  byte_25E5047 = 3;
  word_25E5030 = 20319;
  byte_25E5032 = 75;
  byte_25E5033 = 0;
  byte_25E505F = 11;
  strcpy((char *)&qword_25E5048, "_Still_Here");
  byte_25E5077 = 8;
  strcpy((char *)&qword_25E5060, "_Cleared");
  qmemcpy(&byte_25E508F, "\nBannerButton", 13);
  strcpy((char *)&qword_25E5078, "_No_Thanks");
  uint64_t v205 = qword_25E5008;
  qword_25E50A0 = 0x1400000000000000;
  *(void *)algn_25E509C = 0x7373696D7369445FLL;
  qword_25E50B8 = 0xF00000000000000;
  qword_25E50B0 = 0x4B4F5F6E6F7474;
  int v206 = byte_25E4DA7;
  if (byte_25E4DA7 >= 0) {
    size_t v207 = byte_25E4DA7;
  }
  else {
    size_t v207 = qword_25E4D98;
  }
  unint64_t v208 = v207 + 12;
  qword_25E50A8 = *(void *)"BannerButton";
  if (v207 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v208 >= 0x17)
  {
    uint64_t v210 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17) {
      uint64_t v210 = v208 | 7;
    }
    uint64_t v211 = v210 + 1;
    uint64_t v212 = (char *)operator new(v210 + 1);
    qword_25E50C8 = v207 + 12;
    unk_25E50D0 = v211 | 0x8000000000000000;
    qword_25E50C0 = (uint64_t)v212;
    *((_DWORD *)v212 + 2) = 1852798068;
    *(void *)uint64_t v212 = *(void *)"BannerButton";
    char v209 = v212 + 12;
  }
  else
  {
    BYTE5(qword_25E50C8) = 0;
    HIWORD(qword_25E50C8) = 0;
    unk_25E50D0 = 0;
    byte_25E50D7 = v207 + 12;
    strcpy((char *)&qword_25E50C0, "BannerButton");
    char v209 = (char *)&qword_25E50C8 + 4;
    if (!v207) {
      goto LABEL_450;
    }
  }
  if (v206 >= 0) {
    uint64_t v213 = &qword_25E4D90;
  }
  else {
    uint64_t v213 = (uint64_t *)qword_25E4D90;
  }
  memmove(v209, v213, v207);
LABEL_450:
  v209[v207] = 0;
  int v214 = byte_25E4DBF;
  if (byte_25E4DBF >= 0) {
    size_t v215 = byte_25E4DBF;
  }
  else {
    size_t v215 = unk_25E4DB0;
  }
  unint64_t v216 = v215 + 12;
  if (v215 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v216 >= 0x17)
  {
    uint64_t v218 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v216 | 7) != 0x17) {
      uint64_t v218 = v216 | 7;
    }
    uint64_t v219 = v218 + 1;
    long long v220 = (char *)operator new(v218 + 1);
    qword_25E50E0 = v215 + 12;
    unk_25E50E8 = v219 | 0x8000000000000000;
    qword_25E50D8 = (uint64_t)v220;
    *(void *)long long v220 = qword_25E5000;
    *((_DWORD *)v220 + 2) = qword_25E5008;
    uint64_t v217 = v220 + 12;
  }
  else
  {
    qword_25E50E0 = 0;
    unk_25E50E8 = 0;
    byte_25E50EF = v215 + 12;
    LODWORD(qword_25E50E0) = qword_25E5008;
    qword_25E50D8 = qword_25E5000;
    uint64_t v217 = (char *)&qword_25E50E0 + 4;
    if (!v215) {
      goto LABEL_464;
    }
  }
  if (v214 >= 0) {
    char v221 = &qword_25E4DA8;
  }
  else {
    char v221 = (uint64_t *)qword_25E4DA8;
  }
  memmove(v217, v221, v215);
LABEL_464:
  v217[v215] = 0;
  int v222 = byte_25E4D77;
  if (byte_25E4D77 >= 0) {
    size_t v223 = byte_25E4D77;
  }
  else {
    size_t v223 = unk_25E4D68;
  }
  unint64_t v224 = v223 + 12;
  if (v223 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v224 >= 0x17)
  {
    uint64_t v226 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v224 | 7) != 0x17) {
      uint64_t v226 = v224 | 7;
    }
    uint64_t v227 = v226 + 1;
    long long v228 = (char *)operator new(v226 + 1);
    qword_25E50F8 = v223 + 12;
    unk_25E5100 = v227 | 0x8000000000000000;
    qword_25E50F0 = (uint64_t)v228;
    *(void *)long long v228 = qword_25E5000;
    *((_DWORD *)v228 + 2) = qword_25E5008;
    long long v225 = v228 + 12;
  }
  else
  {
    qword_25E50F8 = 0;
    unk_25E5100 = 0;
    byte_25E5107 = v223 + 12;
    LODWORD(qword_25E50F8) = qword_25E5008;
    qword_25E50F0 = qword_25E5000;
    long long v225 = (char *)&qword_25E50F8 + 4;
    if (!v223) {
      goto LABEL_478;
    }
  }
  if (v222 >= 0) {
    uint64_t v229 = &qword_25E4D60;
  }
  else {
    uint64_t v229 = (uint64_t *)qword_25E4D60;
  }
  memmove(v225, v229, v223);
LABEL_478:
  v225[v223] = 0;
  int v230 = byte_25E5017;
  if (byte_25E5017 >= 0) {
    size_t v231 = byte_25E5017;
  }
  else {
    size_t v231 = v205;
  }
  int v232 = byte_25E4D8F;
  if (byte_25E4D8F >= 0) {
    size_t v233 = byte_25E4D8F;
  }
  else {
    size_t v233 = *((void *)&xmmword_25E4D78 + 1);
  }
  unint64_t v234 = v233 + v231;
  if (v233 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v234 <= 0x16)
  {
    long long v235 = &qword_25E5108;
    qword_25E5110 = 0;
    unk_25E5118 = 0;
    qword_25E5108 = 0;
    byte_25E511F = v233 + v231;
    if (!v231) {
      goto LABEL_491;
    }
    goto LABEL_487;
  }
  uint64_t v242 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v234 | 7) != 0x17) {
    uint64_t v242 = v234 | 7;
  }
  uint64_t v243 = v242 + 1;
  long long v235 = (uint64_t *)operator new(v242 + 1);
  qword_25E5110 = v233 + v231;
  unk_25E5118 = v243 | 0x8000000000000000;
  qword_25E5108 = (uint64_t)v235;
  if (v231)
  {
LABEL_487:
    if (v230 >= 0) {
      long long v236 = &qword_25E5000;
    }
    else {
      long long v236 = (uint64_t *)qword_25E5000;
    }
    memmove(v235, v236, v231);
  }
LABEL_491:
  uint64_t v237 = (char *)v235 + v231;
  if (v233)
  {
    if (v232 >= 0) {
      char v238 = &xmmword_25E4D78;
    }
    else {
      char v238 = (long long *)xmmword_25E4D78;
    }
    memmove(v237, v238, v233);
  }
  v237[v233] = 0;
  unint64_t v239 = v231 + 11;
  if (v231 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v239 >= 0x17)
  {
    uint64_t v244 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17) {
      uint64_t v244 = v239 | 7;
    }
    uint64_t v245 = v244 + 1;
    long long v240 = (uint64_t *)operator new(v244 + 1);
    qword_25E5128 = v231 + 11;
    unk_25E5130 = v245 | 0x8000000000000000;
    qword_25E5120 = (uint64_t)v240;
  }
  else
  {
    long long v240 = &qword_25E5120;
    qword_25E5128 = 0;
    unk_25E5130 = 0;
    qword_25E5120 = 0;
    byte_25E5137 = v231 + 11;
    if (!v231)
    {
      *(_DWORD *)((char *)&qword_25E5120 + 7) = *(_DWORD *)((char *)&qword_25E5048 + 7);
      qword_25E5120 = qword_25E5048;
      BYTE3(qword_25E5128) = 0;
      LOBYTE(v241) = 8;
      goto LABEL_512;
    }
  }
  if (v230 >= 0) {
    int v246 = &qword_25E5000;
  }
  else {
    int v246 = (uint64_t *)qword_25E5000;
  }
  memmove(v240, v246, v231);
  long long v247 = (char *)v240 + v231;
  int v248 = *(_DWORD *)((char *)&qword_25E5048 + 7);
  *(void *)long long v247 = qword_25E5048;
  *(_DWORD *)(v247 + 7) = v248;
  v247[11] = 0;
  unint64_t v241 = v231 + 8;
  if (v231 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v241 <= 0x16)
  {
LABEL_512:
    long long v249 = &qword_25E5138;
    qword_25E5140 = 0;
    unk_25E5148 = 0;
    qword_25E5138 = 0;
    byte_25E514F = v241;
    if (!v231) {
      goto LABEL_517;
    }
    goto LABEL_513;
  }
  uint64_t v264 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v241 | 7) != 0x17) {
    uint64_t v264 = v241 | 7;
  }
  uint64_t v265 = v264 + 1;
  long long v249 = (uint64_t *)operator new(v264 + 1);
  qword_25E5140 = v231 + 8;
  unk_25E5148 = v265 | 0x8000000000000000;
  qword_25E5138 = (uint64_t)v249;
  if (v231)
  {
LABEL_513:
    if (v230 >= 0) {
      long long v250 = &qword_25E5000;
    }
    else {
      long long v250 = (uint64_t *)qword_25E5000;
    }
    memmove(v249, v250, v231);
  }
LABEL_517:
  long long v251 = (char *)v249 + v231;
  *(void *)long long v251 = qword_25E5060;
  v251[8] = 0;
  int v252 = byte_25E508F;
  if (byte_25E508F >= 0) {
    size_t v253 = byte_25E508F;
  }
  else {
    size_t v253 = qword_25E5080;
  }
  unint64_t v254 = v253 + v231;
  if (v253 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v254 <= 0x16)
  {
    long long v255 = &qword_25E5150;
    qword_25E5158 = 0;
    unk_25E5160 = 0;
    qword_25E5150 = 0;
    byte_25E5167 = v253 + v231;
    if (!v231) {
      goto LABEL_527;
    }
    goto LABEL_523;
  }
  uint64_t v262 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v254 | 7) != 0x17) {
    uint64_t v262 = v254 | 7;
  }
  uint64_t v263 = v262 + 1;
  long long v255 = (uint64_t *)operator new(v262 + 1);
  qword_25E5158 = v253 + v231;
  unk_25E5160 = v263 | 0x8000000000000000;
  qword_25E5150 = (uint64_t)v255;
  if (v231)
  {
LABEL_523:
    if (v230 >= 0) {
      int v256 = &qword_25E5000;
    }
    else {
      int v256 = (uint64_t *)qword_25E5000;
    }
    memmove(v255, v256, v231);
  }
LABEL_527:
  long long v257 = (char *)v255 + v231;
  if (v253)
  {
    if (v252 >= 0) {
      long long v258 = &qword_25E5078;
    }
    else {
      long long v258 = (uint64_t *)qword_25E5078;
    }
    memmove(v257, v258, v253);
  }
  v257[v253] = 0;
  strcpy(&byte_25E517F, "\n{newroute}");
  strcpy((char *)&qword_25E5168, "{roadname}");
  strcpy(&byte_25E5197, "\n{count}");
  byte_25E51AF = 7;
  strcpy(&byte_25E51C7, "\n{dur}");
  strcpy((char *)&qword_25E51B0, "{duration}");
  byte_25E51DF = 5;
  qword_25E51E0 = (uint64_t)operator new(0x20uLL);
  unk_25E51E8 = v278;
  strcpy((char *)qword_25E51E0, "{PleaseProceedWithCaution}");
  byte_25E520F = 15;
  strcpy((char *)&qword_25E51F8, "{UserRouteName}");
  byte_25E5227 = 20;
  strcpy((char *)&xmmword_25E5210, "{SuggestedRouteName}");
  byte_25E523F = 18;
  strcpy(byte_25E5228, "Speed_Camera_Ahead");
  qword_25E5240 = (uint64_t)operator new(0x20uLL);
  unk_25E5248 = v277;
  strcpy((char *)qword_25E5240, "Red_Light_Camera_Ahead_Spoken");
  qword_25E5258 = (uint64_t)operator new(0x20uLL);
  unk_25E5260 = v277;
  strcpy((char *)qword_25E5258, "Stop_Sign_Camera_Ahead_Spoken");
  qword_25E5270 = (uint64_t)operator new(0x28uLL);
  unk_25E5278 = v272;
  strcpy((char *)qword_25E5270, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_25E5288 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25E5290 = v267;
  strcpy((char *)qword_25E5288, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_25E52A0 = (uint64_t)operator new(0x20uLL);
  unk_25E52A8 = v279;
  strcpy((char *)qword_25E52A0, "Camera_Ahead_Multiple_Spoken");
  qword_25E52B8 = (uint64_t)operator new(0x30uLL);
  unk_25E52C0 = v268;
  strcpy((char *)qword_25E52B8, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_25E52D0 = (char *)operator new(0x30uLL);
  strcpy(qword_25E52D0, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_25E52FF = 16;
  xmmword_25E52D8 = v268;
  strcpy(byte_25E52E8, "_Speed_Limit_Mph");
  byte_25E5317 = 16;
  strcpy(byte_25E5300, "_Speed_Limit_Kph");
  byte_25E532F = 11;
  strcpy((char *)&qword_25E5318, "Watch_Speed");
  byte_25E5347 = 4;
  strcpy((char *)&dword_25E5330, "_One");
  byte_25E535F = 4;
  strcpy((char *)&dword_25E5348, "_Two");
  byte_25E5377 = 4;
  strcpy((char *)&dword_25E5360, "_Few");
  byte_25E538F = 5;
  strcpy((char *)&dword_25E5378, "_Many");
  byte_25E53A7 = 6;
  strcpy((char *)&dword_25E5390, "_Other");
  byte_25E53BF = 4;
  strcpy((char *)&dword_25E53A8, "_ONE");
  byte_25E53D7 = 7;
  strcpy((char *)&dword_25E53C0, "{Speed}");
  byte_25E53EF = 8;
  strcpy((char *)&qword_25E53D8, "Dismount");
  byte_25E5407 = 4;
  strcpy((char *)&dword_25E53F0, "Walk");
  byte_25E541F = 5;
  strcpy((char *)&dword_25E5408, "Mount");
  byte_25E5437 = 7;
  strcpy((char *)&dword_25E5420, "Remount");
  strcpy(&byte_25E544F, "\t_Crosswalk");
  strcpy((char *)&qword_25E5438, "Walk_Road");
  strcpy(&byte_25E5467, "\n_PLURAL");
  byte_25E547F = 7;
  strcpy(&byte_25E5497, "\n{description1}");
  strcpy((char *)&qword_25E5480, "_SECONDARY");
  byte_25E54AF = 14;
  byte_25E54C7 = 14;
  strcpy((char *)&qword_25E54B0, "{description2}");
  byte_25E54DF = 21;
  strcpy((char *)&xmmword_25E54C8, "TWO_ROAD_DESCRIPTIONS");
  byte_25E54F7 = 17;
  strcpy((char *)&xmmword_25E54E0, "{SlopePercentage}");
  byte_25E550F = 15;
  strcpy((char *)&qword_25E54F8, "_Protected_Lane");
  strcpy(&byte_25E5527, "\n_Paved_Path");
  strcpy((char *)&qword_25E5510, "_Bike_Path");
  byte_25E553F = 11;
  byte_25E5557 = 15;
  strcpy((char *)&qword_25E5540, "_Dedicated_Lane");
  byte_25E556F = 12;
  strcpy((char *)&qword_25E5558, "_Shared_Path");
  strcpy(&byte_25E5587, "\n_UnnamedRoad");
  strcpy((char *)&qword_25E5570, "_Bike_Lane");
  byte_25E559F = 12;
  byte_25E55B7 = 5;
  strcpy((char *)&dword_25E55A0, "_Path");
  byte_25E55CF = 6;
  strcpy((char *)&dword_25E55B8, "_Trail");
  strcpy(&byte_25E55E7, "\t_Plaza");
  strcpy((char *)&qword_25E55D0, "_Sidewalk");
  byte_25E55FF = 6;
  byte_25E5617 = 15;
  strcpy((char *)&qword_25E5600, "_Moving_Walkway");
  byte_25E562F = 14;
  strcpy((char *)&qword_25E5618, "Two_Stage_Turn");
  byte_25E5647 = 16;
  strcpy((char *)&xmmword_25E5630, "{OptionalPeriod}");
  byte_25E565F = 18;
  strcpy((char *)&xmmword_25E5648, "Advisory_Separator");
  byte_25E5677 = 6;
  strcpy((char *)&dword_25E5660, "Period");
  byte_25E568F = 21;
  strcpy((char *)&xmmword_25E5678, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_25E5690, "Advisory_Title_Notices");
  HIBYTE(word_25E56A6) = 22;
  byte_25E56BF = 7;
  strcpy((char *)&dword_25E56A8, "_DETAIL");
  byte_25E56D7 = 17;
  strcpy((char *)&xmmword_25E56C0, "_LONG_REGION_LIST");
  byte_25E56EF = 16;
  strcpy((char *)&xmmword_25E56D8, "Advisory_Grouped");
  byte_25E5707 = 11;
  strcpy((char *)&qword_25E56F0, "_Advisories");
  qword_25E5708 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25E5710 = v275;
  strcpy((char *)qword_25E5708, "Advisory_WILDFIRE_METADATA_");
  byte_25E5737 = 8;
  strcpy((char *)&qword_25E5720, "Advisory");
  byte_25E574F = 13;
  strcpy((char *)&qword_25E5738, "MPR_NUM_STOPS");
  byte_25E5767 = 17;
  strcpy(algn_25E5750, "EV_CHARGE_STATION");
  byte_25E577F = 11;
  strcpy((char *)&qword_25E5768, "_NAMED_CITY");
  byte_25E5797 = 5;
  strcpy((char *)&dword_25E5780, "_Stop");
  strcpy(&byte_25E57AF, "\n{StopsCount}");
  strcpy((char *)&qword_25E5798, "{CityName}");
  byte_25E57C7 = 12;
  byte_25E57DF = 11;
  strcpy((char *)&qword_25E57C8, "_With_Other");
  byte_25E57F7 = 15;
  strcpy((char *)&qword_25E57E0, "{DepartureTime}");
  qword_25E57F8 = (uint64_t)operator new(0x28uLL);
  unk_25E5800 = v276;
  strcpy((char *)qword_25E57F8, "Ending_Charge_Station_Port_Availability");
  qword_25E5810 = (uint64_t)operator new(0x28uLL);
  unk_25E5818 = v269;
  strcpy((char *)qword_25E5810, "Ending_Charge_Station_No_Availability");
  qword_25E5828 = (uint64_t)operator new(0x28uLL);
  unk_25E5830 = v272;
  strcpy((char *)qword_25E5828, "Ending_Charge_Station_No_Real_Time");
  byte_25E5857 = 16;
  strcpy(byte_25E5840, "{AvailablePorts}");
  byte_25E586F = 12;
  strcpy((char *)&qword_25E5858, "{TotalPorts}");
  byte_25E5887 = 14;
  strcpy((char *)&qword_25E5870, "{ManeuverIcon}");
  qword_25E5888 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25E5890 = xmmword_20B9A60;
  strcpy((char *)qword_25E5888, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_25E58A0 = (uint64_t)operator new(0x20uLL);
  unk_25E58A8 = v275;
  strcpy((char *)qword_25E58A0, "Walking_Destination_Unnamed");
  qword_25E58B8 = (uint64_t)operator new(0x20uLL);
  unk_25E58C0 = v277;
  strcpy((char *)qword_25E58B8, "TrafficDelay_Label_Title_Sign");
  qword_25E58D0 = (uint64_t)operator new(0x20uLL);
  unk_25E58D8 = v279;
  strcpy((char *)qword_25E58D0, "Special_Guidance_Instruction");
  byte_25E58FF = 2;
  strcpy((char *)&word_25E58E8, "CZ");
  byte_25E5917 = 3;
  dword_25E5900 = 5919811;
  unk_25E592F = 3;
  dword_25E5918 = 6243649;
  byte_25E5947 = 0;
  byte_25E595F = 7;
  strcpy((char *)&dword_25E5948, "TRANSIT");
  byte_25E5977 = 7;
  strcpy((char *)&dword_25E5960, "OFFLINE");
  qword_25E5978 = (uint64_t)operator new(0x28uLL);
  unk_25E5980 = v267;
  strcpy((char *)qword_25E5978, "Advisory_Card_French_Climate_Law_Title");
  qword_25E5990 = (uint64_t)operator new(0x30uLL);
  unk_25E5998 = xmmword_20B93C0;
  strcpy((char *)qword_25E5990, "Advisory_Card_French_Climate_Law_Details");
  qword_25E59A8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25E59B0 = v273;
  strcpy((char *)qword_25E59A8, "French_Climate_Law_Metadata_Weblink_Title");
  qword_25E59C0 = (uint64_t)operator new(0x20uLL);
  unk_25E59C8 = v279;
  strcpy((char *)qword_25E59C0, "{ClimateLawLearnMoreWeblink}");
  byte_25E59EF = 3;
  dword_25E59D8 = 4280902;
  qword_25E59F0 = (uint64_t)operator new(0x70uLL);
  unk_25E59F8 = xmmword_20E81E0;
  strcpy((char *)qword_25E59F0, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)unint64_t v285 = 0;
  HIBYTE(v286[0]) = 14;
  strcpy(&v285[8], "ROUTES_THROUGH");
  LODWORD(v286[1]) = 1;
  v287[23] = 9;
  strcpy(v287, "ROUTES_TO");
  LODWORD(v288) = 3;
  HIBYTE(v290) = 11;
  strcpy((char *)v289, "ROUTES_FROM");
  LODWORD(v291) = 2;
  xmmword_25E5A98 = 0u;
  xmmword_25E5AA8 = 0u;
  dword_25E5AB8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E5A98, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_25E5A98, (uint64_t)&v285[8], (uint64_t)&v285[8]);
  sub_3A6EF0((uint64_t)&xmmword_25E5A98, (uint64_t)v287, (uint64_t)v287);
  sub_3A6EF0((uint64_t)&xmmword_25E5A98, (uint64_t)v289, (uint64_t)v289);
  if (SHIBYTE(v290) < 0)
  {
    operator delete(v289[0]);
    if ((v287[23] & 0x80000000) == 0)
    {
LABEL_534:
      if ((SHIBYTE(v286[0]) & 0x80000000) == 0) {
        goto LABEL_535;
      }
LABEL_547:
      operator delete(*(void **)&v285[8]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_536;
      }
LABEL_548:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_536;
    }
  }
  else if ((v287[23] & 0x80000000) == 0)
  {
    goto LABEL_534;
  }
  operator delete(*(void **)v287);
  if (SHIBYTE(v286[0]) < 0) {
    goto LABEL_547;
  }
LABEL_535:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_548;
  }
LABEL_536:
  byte_25E5A1F = 8;
  strcpy((char *)&qword_25E5A08, "any_mode");
  byte_25E5A37 = 7;
  strcpy((char *)&dword_25E5A20, "cycling");
  byte_25E5A4F = 7;
  strcpy((char *)&dword_25E5A38, "driving");
  byte_25E5A67 = 7;
  strcpy((char *)&dword_25E5A50, "walking");
  qword_25E5A68 = 0;
  unk_25E5A70 = 0;
  qword_25E5A78 = 0;
  long long v259 = (char *)operator new(9uLL);
  *(void *)long long v259 = 0x4020C000103050DLL;
  v259[8] = 6;
  qword_25E5A68 = (uint64_t)v259;
  unk_25E5A70 = v259 + 9;
  qword_25E5A78 = (uint64_t)(v259 + 9);
  qword_25E5A80 = 0;
  qword_25E5A88 = 0;
  unk_25E5A90 = 0;
  long long v260 = (char *)operator new(9uLL);
  qword_25E5A88 = (uint64_t)(v260 + 9);
  unk_25E5A90 = v260 + 9;
  double result = 1.10224369e-279;
  *(void *)long long v260 = 0x604020C00010305;
  v260[8] = 13;
  qword_25E5A80 = (uint64_t)v260;
  return result;
}

void sub_CCD63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a72 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0)
              {
LABEL_42:
                operator delete(a71);
                if ((a70 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a70 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a65);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}

double sub_CCD994@<D0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v25);
  sub_725D0((uint64_t)v24);
  if (sub_DAA288((uint64_t)(a1 + 197)) && sub_DAA288((uint64_t)(a1 + 244)))
  {
    int v4 = *a1;
    if (**a1 != (*a1)[1])
    {
      uint64_t v23 = 0;
      long long v22 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      *(_OWORD *)uint64_t v17 = 0u;
      unint64_t v15 = 0;
      unint64_t v14 = 0;
      unint64_t v16 = 0;
      uint64_t v5 = *v4;
      uint64_t v6 = v4[1];
      if (*v4 != v6)
      {
        do
        {
          if (!*(_DWORD *)v5)
          {
            sub_9F761C((uint64_t)v26, (long long *)(v5 + 8));
            int64_t v7 = v15;
            if ((unint64_t)v15 >= v16)
            {
              unint64_t v15 = sub_CCE460((char **)&v14, (uint64_t)v26);
              if ((void)__p)
              {
                *((void *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
            }
            else
            {
              long long v8 = *(_OWORD *)v26;
              *(void *)(v15 + 14) = *(void *)&v26[14];
              *(_OWORD *)int64_t v7 = v8;
              *((void *)v7 + 3) = 0;
              *((void *)v7 + 4) = 0;
              *((void *)v7 + 5) = 0;
              *((void *)v7 + 6) = 0;
              *(_OWORD *)(v7 + 24) = *(_OWORD *)&v26[24];
              *((void *)v7 + 5) = v27;
              *(void *)&v26[24] = 0;
              *(void *)&v26[32] = 0;
              uint64_t v27 = 0;
              *((void *)v7 + 7) = 0;
              *((void *)v7 + 8) = 0;
              *((_OWORD *)v7 + 3) = v28;
              long long v28 = 0uLL;
              *((void *)v7 + 8) = v29;
              *((void *)v7 + 9) = 0;
              uint64_t v29 = 0;
              *((void *)v7 + 10) = 0;
              *((void *)v7 + 11) = 0;
              *(_OWORD *)(v7 + 72) = v30;
              long long v30 = 0uLL;
              *((void *)v7 + 11) = v31;
              *((void *)v7 + 12) = 0;
              uint64_t v31 = 0;
              *((void *)v7 + 13) = 0;
              *((void *)v7 + 14) = 0;
              *((_OWORD *)v7 + 6) = v32;
              *((void *)v7 + 14) = v33;
              long long v32 = 0uLL;
              uint64_t v33 = 0;
              uint64_t v9 = v34[0];
              *(void *)(v7 + 125) = *(void *)((char *)v34 + 5);
              *((void *)v7 + 15) = v9;
              *((void *)v7 + 17) = 0;
              *((void *)v7 + 18) = 0;
              *((void *)v7 + 19) = 0;
              *(_OWORD *)(v7 + 136) = __p;
              *((void *)v7 + 19) = v36;
              long long __p = 0uLL;
              uint64_t v36 = 0;
              *((_OWORD *)v7 + 10) = v37;
              unint64_t v15 = v7 + 176;
            }
            if ((void)v32)
            {
              *((void *)&v32 + 1) = v32;
              operator delete((void *)v32);
            }
            if ((void)v30)
            {
              *((void *)&v30 + 1) = v30;
              operator delete((void *)v30);
            }
            if ((void)v28)
            {
              *((void *)&v28 + 1) = v28;
              operator delete((void *)v28);
            }
            if (*(void *)&v26[24])
            {
              sub_9F59BC((uint64_t)&v26[24], *(void ***)&v26[24]);
              operator delete(*(void **)&v26[24]);
            }
          }
          v5 += 184;
        }
        while (v5 != v6);
      }
      sub_9B2B20((uint64_t)v26, a1[4], 0);
    }
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v26);
      sub_188FC78(v26, (uint64_t)"TransitGuidanceUpdaterModule::run failed due to the lack of journeys in the input.", 82);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v12, 1u);
      if (v13 < 0) {
        operator delete((void *)v12.n128_u64[0]);
      }
      if (SHIBYTE(v31) < 0) {
        operator delete((void *)v30);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    v12.n128_u64[0] = 40;
    v12.n128_u64[1] = (unint64_t)&off_2439090;
    sub_3E7814((__n128 *)v26, &v12);
  }
  else
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v26);
      sub_188FC78(v26, (uint64_t)"TransitGuidanceUpdaterModule::run failed due to origin or destination being invalid.", 84);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v12, 1u);
      if (v13 < 0) {
        operator delete((void *)v12.n128_u64[0]);
      }
      if (SHIBYTE(v31) < 0) {
        operator delete((void *)v30);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    v12.n128_u64[0] = 1;
    v12.n128_u64[1] = (unint64_t)&off_2439090;
    sub_3E7814((__n128 *)v26, &v12);
  }
  *(unsigned char *)a2 = 0;
  double result = *(double *)v26;
  long long v11 = *(_OWORD *)&v26[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v26;
  *(_OWORD *)(a2 + 24) = v11;
  *(void *)(a2 + 40) = *(void *)&v26[32];
  *(_DWORD *)(a2 + 48) = v27;
  return result;
}

void sub_CCE254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a44 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&STACK[0x4B8]);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&STACK[0x4B8]);
  _Unwind_Resume(a1);
}

void sub_CCE358(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)STACK[0x540];
  if (STACK[0x540])
  {
    STACK[0x548] = (unint64_t)v3;
    operator delete(v3);
    int v4 = (void *)STACK[0x518];
    if (!STACK[0x518])
    {
LABEL_3:
      uint64_t v5 = (void *)STACK[0x500];
      if (!STACK[0x500]) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    int v4 = (void *)STACK[0x518];
    if (!STACK[0x518]) {
      goto LABEL_3;
    }
  }
  STACK[0x520] = (unint64_t)v4;
  operator delete(v4);
  uint64_t v5 = (void *)STACK[0x500];
  if (!STACK[0x500])
  {
LABEL_4:
    uint64_t v6 = (void *)STACK[0x4E8];
    if (!STACK[0x4E8]) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  STACK[0x508] = (unint64_t)v5;
  operator delete(v5);
  uint64_t v6 = (void *)STACK[0x4E8];
  if (!STACK[0x4E8])
  {
LABEL_5:
    int64_t v7 = (void **)STACK[0x4D0];
    if (!STACK[0x4D0]) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  STACK[0x4F0] = (unint64_t)v6;
  operator delete(v6);
  int64_t v7 = (void **)STACK[0x4D0];
  if (!STACK[0x4D0])
  {
LABEL_6:
    sub_C8BDA0(&STACK[0x3A8]);
    sub_97FA60((void **)&STACK[0x3C0]);
    _Unwind_Resume(a1);
  }
LABEL_11:
  sub_9F59BC(v1, v7);
  operator delete((void *)STACK[0x4D0]);
  sub_C8BDA0(&STACK[0x3A8]);
  sub_97FA60((void **)&STACK[0x3C0]);
  _Unwind_Resume(a1);
}

uint64_t *sub_CCE424(uint64_t *a1)
{
  if (*a1)
  {
    sub_9804E4(a1);
    operator delete((void *)*a1);
  }
  return a1;
}

char *sub_CCE460(char **a1, uint64_t a2)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x1745D1745D1745DLL) {
    sub_2E00();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v6 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1745D1745D1745DLL) {
      sub_188D718();
    }
    int64_t v7 = (char *)operator new(176 * v6);
  }
  else
  {
    int64_t v7 = 0;
  }
  long long v8 = &v7[176 * v3];
  *(_OWORD *)long long v8 = *(_OWORD *)a2;
  *(void *)(v8 + 14) = *(void *)(a2 + 14);
  uint64_t v9 = &v7[176 * v6];
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *((_OWORD *)v8 + 3) = *(_OWORD *)(a2 + 48);
  *((void *)v8 + 8) = *(void *)(a2 + 64);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *((void *)v8 + 10) = 0;
  *((void *)v8 + 11) = 0;
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(a2 + 72);
  *((void *)v8 + 11) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *((void *)v8 + 13) = 0;
  *((void *)v8 + 14) = 0;
  *((_OWORD *)v8 + 6) = *(_OWORD *)(a2 + 96);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(v8 + 125) = *(void *)(a2 + 125);
  uint64_t v10 = *(void *)(a2 + 112);
  uint64_t v11 = *(void *)(a2 + 120);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *((void *)v8 + 14) = v10;
  *((void *)v8 + 15) = v11;
  *((void *)v8 + 18) = 0;
  *((void *)v8 + 19) = 0;
  *(_OWORD *)(v8 + 136) = *(_OWORD *)(a2 + 136);
  *((void *)v8 + 19) = *(void *)(a2 + 152);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *((_OWORD *)v8 + 10) = *(_OWORD *)(a2 + 160);
  __n128 v12 = v8 + 176;
  char v13 = *a1;
  unint64_t v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v8;
    a1[1] = v12;
    a1[2] = v9;
    if (!v14) {
      return v12;
    }
    goto LABEL_18;
  }
  uint64_t v15 = 0;
  do
  {
    unint64_t v16 = &v8[v15];
    uint64_t v17 = &v14[v15];
    long long v18 = *(_OWORD *)&v14[v15 - 176];
    *(void *)(v16 - 162) = *(void *)&v14[v15 - 162];
    *((_OWORD *)v16 - 11) = v18;
    *((void *)v16 - 18) = 0;
    *((void *)v16 - 17) = 0;
    *(_OWORD *)(v16 - 152) = *(_OWORD *)&v14[v15 - 152];
    *((void *)v16 - 17) = *(void *)&v14[v15 - 136];
    *((void *)v17 - 19) = 0;
    *((void *)v17 - 18) = 0;
    *((void *)v17 - 17) = 0;
    *((void *)v16 - 15) = 0;
    *((void *)v16 - 14) = 0;
    *((_OWORD *)v16 - 8) = *(_OWORD *)&v14[v15 - 128];
    *((void *)v16 - 14) = *(void *)&v14[v15 - 112];
    *((void *)v17 - 16) = 0;
    *((void *)v17 - 15) = 0;
    *((void *)v17 - 14) = 0;
    *((void *)v16 - 12) = 0;
    *((void *)v16 - 11) = 0;
    *(_OWORD *)(v16 - 104) = *(_OWORD *)&v14[v15 - 104];
    *((void *)v16 - 11) = *(void *)&v14[v15 - 88];
    *((void *)v17 - 13) = 0;
    *((void *)v17 - 12) = 0;
    *((void *)v17 - 11) = 0;
    *((void *)v16 - 9) = 0;
    *((void *)v16 - 8) = 0;
    *((_OWORD *)v16 - 5) = *(_OWORD *)&v14[v15 - 80];
    *((void *)v16 - 8) = *(void *)&v14[v15 - 64];
    *((void *)v17 - 10) = 0;
    *((void *)v17 - 9) = 0;
    *((void *)v17 - 8) = 0;
    uint64_t v19 = *(void *)&v14[v15 - 56];
    *(void *)(v16 - 51) = *(void *)&v14[v15 - 51];
    *((void *)v16 - 4) = 0;
    *((void *)v16 - 3) = 0;
    *((void *)v16 - 7) = v19;
    *(_OWORD *)(v16 - 40) = *(_OWORD *)&v14[v15 - 40];
    *((void *)v16 - 3) = *(void *)&v14[v15 - 24];
    *((void *)v17 - 5) = 0;
    *((void *)v17 - 4) = 0;
    *((void *)v17 - 3) = 0;
    *((_OWORD *)v16 - 1) = *(_OWORD *)&v14[v15 - 16];
    v15 -= 176;
  }
  while (&v14[v15] != v13);
  long long v20 = *a1;
  unint64_t v14 = a1[1];
  *a1 = &v8[v15];
  a1[1] = v12;
  a1[2] = v9;
  if (v14 != v20)
  {
    do
    {
      v14 -= 176;
      sub_9F58F0((uint64_t)(a1 + 2), v14);
    }
    while (v14 != v20);
    unint64_t v14 = v20;
  }
  if (v14) {
LABEL_18:
  }
    operator delete(v14);
  return v12;
}

uint64_t sub_CCE710(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0x133F84CFE133F84DLL * ((v8 - *a1) >> 3) >= a4)
  {
    uint64_t result = a1[1];
    if (0x133F84CFE133F84DLL * ((result - v9) >> 3) >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v23 = v9;
      }
      else
      {
        uint64_t v23 = v9;
        do
        {
          sub_CCEF90(v9, v6);
          v6 += 1064;
          v9 += 1064;
          v23 += 1064;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v23)
        uint64_t result = sub_9803D0(result - 1064);
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 8 * ((result - v9) >> 3);
      if (result != v9)
      {
        uint64_t v20 = 8 * ((result - v9) >> 3);
        do
        {
          uint64_t result = sub_CCEF90(v9, v6);
          v6 += 1064;
          v9 += 1064;
          v20 -= 1064;
        }
        while (v20);
        uint64_t v9 = a1[1];
      }
      uint64_t v21 = v9;
      if (v19 != a3)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t result = sub_CCE9B8(v9 + v22, v19 + v22);
          v22 += 1064;
        }
        while (v19 + v22 != a3);
        uint64_t v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      uint64_t v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_9803D0(v10 - 1064);
        while (v10 != v9);
        uint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x3D980F6603D980) {
      goto LABEL_37;
    }
    unint64_t v12 = 0x133F84CFE133F84DLL * (v8 >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x1ECC07B301ECC0 ? 0x3D980F6603D980 : v13;
    if (v14 > 0x3D980F6603D980) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 1064 * v14;
    uint64_t result = (uint64_t)operator new(1064 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_CCE9B8(v17 + v18, v6 + v18);
        v18 += 1064;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

uint64_t sub_CCE9B8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_4200((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
    uint64_t v5 = a1 + 32;
    if ((*(char *)(a2 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    sub_4200((unsigned char *)v5, *(void **)(a2 + 32), *(void *)(a2 + 40));
    goto LABEL_6;
  }
  long long v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  uint64_t v5 = a1 + 32;
  if (*(char *)(a2 + 55) < 0) {
    goto LABEL_5;
  }
LABEL_3:
  long long v6 = *(_OWORD *)(a2 + 32);
  *(void *)(v5 + 16) = *(void *)(a2 + 48);
  *(_OWORD *)uint64_t v5 = v6;
LABEL_6:
  sub_CCEAE4(a1 + 56, a2 + 56);
  sub_CCEBCC((void *)(a1 + 1016), (uint64_t *)(a2 + 1016));
  sub_CCED30((void *)(a1 + 1040), (uint64_t *)(a2 + 1040));
  return a1;
}

void sub_CCEA88(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_CCEAA4(_Unwind_Exception *a1)
{
  sub_CCE424(v3);
  sub_9BDE30(v2);
  sub_1B23C(v1);
  _Unwind_Resume(a1);
}

void sub_CCEAD0(_Unwind_Exception *a1)
{
  sub_1B23C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CCEAE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_4F58AC(a1, a2);
  sub_4F58AC(v4 + 160, a2 + 160);
  sub_4F58AC(a1 + 320, a2 + 320);
  sub_4F58AC(a1 + 480, a2 + 480);
  sub_4F58AC(a1 + 640, a2 + 640);
  sub_4F58AC(a1 + 800, a2 + 800);
  return a1;
}

void sub_CCEB6C(_Unwind_Exception *a1)
{
  sub_4D4B58(v5);
  sub_4D4B58(v4);
  sub_4D4B58(v3);
  sub_4D4B58(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_CCEBB8(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void *sub_CCEBCC(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0x133F84CFE133F84DLL * (v6 >> 4);
    if (v7 >= 0x1ECC07B301ECC1) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[2128 * v7];
    a1[1] = sub_CCECB4(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_CCEC84(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1)
  {
    sub_9804E4(v1);
    operator delete((void *)*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_CCECB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_981A38(a4 + v7, a2 + v7);
      v7 += 2128;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_CCED14(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_20AF6E0(v1 + v2, v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_CCED30(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0x82FA0BE82FA0BE83 * (v6 >> 3);
    if (v7 >= 0xBE82FA0BE82FA1) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[344 * v7];
    a1[1] = sub_CCEE14(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_CCEDE8(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20AF760();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_CCEE14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_4F58AC(v4, v6);
      sub_4F58AC(v4 + 160, v6 + 160);
      uint64_t v8 = (unsigned char *)(v4 + 320);
      if (*(char *)(v6 + 343) < 0)
      {
        sub_4200(v8, *(void **)(v6 + 320), *(void *)(v6 + 328));
      }
      else
      {
        long long v7 = *(_OWORD *)(v6 + 320);
        *(void *)(v4 + 336) = *(void *)(v6 + 336);
        *(_OWORD *)uint64_t v8 = v7;
      }
      uint64_t v4 = v10 + 344;
      v10 += 344;
      v6 += 344;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_CCEED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_4D4B58(v10);
  sub_4D4B58(v9);
  sub_CCEF14((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_CCEF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_CCEF14(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(uint64_t **)(a1 + 8);
    uint64_t v2 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = *v2;
    for (uint64_t i = *v3; v4 != i; v4 -= 344)
    {
      if (*(char *)(v4 - 1) < 0) {
        operator delete(*(void **)(v4 - 24));
      }
      sub_4D4B58(v4 - 184);
      sub_4D4B58(v4 - 344);
    }
  }
  return a1;
}

uint64_t sub_CCEF90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (const std::string *)(a2 + 32);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v5 = (std::string *)(a1 + 32);
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  std::string::operator=(v5, v4);
  sub_52FD00(a1 + 56, a2 + 56);
  sub_52FD00(a1 + 216, a2 + 216);
  sub_52FD00(a1 + 376, a2 + 376);
  sub_52FD00(a1 + 536, a2 + 536);
  sub_52FD00(a1 + 696, a2 + 696);
  sub_52FD00(a1 + 856, a2 + 856);
  if (a1 != a2)
  {
    sub_CCF090((uint64_t *)(a1 + 1016), *(void *)(a2 + 1016), *(void *)(a2 + 1024), 0x133F84CFE133F84DLL * ((uint64_t)(*(void *)(a2 + 1024) - *(void *)(a2 + 1016)) >> 4));
    sub_CCF9D4((uint64_t *)(a1 + 1040), *(void *)(a2 + 1040), *(void *)(a2 + 1048), 0x82FA0BE82FA0BE83 * ((uint64_t)(*(void *)(a2 + 1048) - *(void *)(a2 + 1040)) >> 3));
  }
  return a1;
}

void sub_CCF090(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0x133F84CFE133F84DLL * ((v8 - *a1) >> 4) < a4)
  {
    if (v10)
    {
      sub_9804E4(a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x1ECC07B301ECC0) {
      goto LABEL_36;
    }
    unint64_t v11 = 0x133F84CFE133F84DLL * (v8 >> 4);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= a4) {
      uint64_t v12 = a4;
    }
    unint64_t v13 = v11 >= 0xF6603D980F660 ? 0x1ECC07B301ECC0 : v12;
    if (v13 > 0x1ECC07B301ECC0) {
LABEL_36:
    }
      sub_2E00();
    uint64_t v14 = 2128 * v13;
    uint64_t v15 = operator new(2128 * v13);
    *a1 = (uint64_t)v15;
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v15 + v14;
    uint64_t v16 = sub_CCECB4(v9, v6, a3, (uint64_t)v15);
LABEL_25:
    a1[1] = v16;
    return;
  }
  uint64_t v17 = a1[1];
  if (0x133F84CFE133F84DLL * ((v17 - v10) >> 4) < a4)
  {
    uint64_t v18 = a2 + 16 * ((v17 - v10) >> 4);
    if (v17 != v10)
    {
      do
      {
        *(_DWORD *)uint64_t v10 = *(_DWORD *)v6;
        std::string::operator=((std::string *)(v10 + 8), (const std::string *)(v6 + 8));
        sub_CCF3D0(v10 + 32, v6 + 32);
        if (v10 != v6) {
          sub_31AF54((void *)(v10 + 880), *(char **)(v6 + 880), *(char **)(v6 + 888), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 888) - *(void *)(v6 + 880)) >> 2));
        }
        long long v19 = *(_OWORD *)(v6 + 904);
        *(void *)(v10 + 920) = *(void *)(v6 + 920);
        *(_OWORD *)(v10 + 904) = v19;
        sub_CCF498(v10 + 928, v6 + 928);
        v6 += 2128;
        v10 += 2128;
      }
      while (v6 != v18);
      uint64_t v10 = a1[1];
    }
    uint64_t v16 = sub_CCECB4(v9, v18, a3, v10);
    goto LABEL_25;
  }
  if (a2 != a3)
  {
    uint64_t v20 = *a1;
    do
    {
      *(_DWORD *)uint64_t v10 = *(_DWORD *)v6;
      std::string::operator=((std::string *)(v10 + 8), (const std::string *)(v6 + 8));
      sub_CCF3D0(v10 + 32, v6 + 32);
      if (v10 != v6) {
        sub_31AF54((void *)(v10 + 880), *(char **)(v6 + 880), *(char **)(v6 + 888), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 888) - *(void *)(v6 + 880)) >> 2));
      }
      long long v21 = *(_OWORD *)(v6 + 904);
      *(void *)(v10 + 920) = *(void *)(v6 + 920);
      *(_OWORD *)(v10 + 904) = v21;
      sub_CCF498(v10 + 928, v6 + 928);
      v20 += 2128;
      v6 += 2128;
      v10 += 2128;
    }
    while (v6 != a3);
    uint64_t v17 = a1[1];
    if (v17 == v20) {
      goto LABEL_35;
    }
    goto LABEL_29;
  }
  uint64_t v20 = *a1;
  if (v17 != v10)
  {
LABEL_29:
    uint64_t v22 = v17 - 2120;
    do
    {
      sub_92A344((void **)(v22 + 920));
      size_t v24 = *(void **)(v22 + 872);
      if (v24)
      {
        *(void *)(v22 + 880) = v24;
        operator delete(v24);
      }
      sub_4D4B58(v22 + 704);
      sub_929188((void **)(v22 + 608));
      sub_92928C((void **)(v22 + 24));
      if (*(char *)(v22 + 23) < 0) {
        operator delete(*(void **)v22);
      }
      uint64_t v23 = v22 - 8;
      v22 -= 2128;
    }
    while (v23 != v20);
  }
LABEL_35:
  a1[1] = v20;
}

void sub_CCF3C0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_CCF3C8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_CCF3D0(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_59DF7C((uint64_t *)(a1 + 584), *(void *)(a2 + 584), *(void *)(a2 + 592), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 592) - *(void *)(a2 + 584)) >> 5));
    sub_59DF7C((uint64_t *)(a1 + 608), *(void *)(a2 + 608), *(void *)(a2 + 616), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 616) - *(void *)(a2 + 608)) >> 5));
    sub_59DF7C((uint64_t *)(a1 + 632), *(void *)(a2 + 632), *(void *)(a2 + 640), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 640) - *(void *)(a2 + 632)) >> 5));
    sub_59DF7C((uint64_t *)(a1 + 656), *(void *)(a2 + 656), *(void *)(a2 + 664), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 5));
  }
  sub_52FD00(a1 + 680, a2 + 680);
  *(unsigned char *)(a1 + 840) = *(unsigned char *)(a2 + 840);
  return a1;
}

uint64_t sub_CCF498(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
  {
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
  }
  else
  {
    sub_CCF650((void **)a1, *(long long **)a2, *(long long **)(a2 + 8), 0x66FD0EB66FD0EB67 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    uint64_t v4 = *(char **)(a2 + 32);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    sub_326C0((void *)(a1 + 32), v4, *(char **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - (void)v4) >> 3);
  }
  sub_52FD00(a1 + 56, a2 + 56);
  sub_52FD00(a1 + 216, a2 + 216);
  sub_52FD00(a1 + 376, a2 + 376);
  *(unsigned char *)(a1 + 536) = *(unsigned char *)(a2 + 536);
  sub_52FD00(a1 + 544, a2 + 544);
  sub_52FD00(a1 + 704, a2 + 704);
  *(unsigned char *)(a1 + 864) = *(unsigned char *)(a2 + 864);
  sub_52FD00(a1 + 872, a2 + 872);
  sub_52FD00(a1 + 1032, a2 + 1032);
  *(unsigned char *)(a1 + 1192) = *(unsigned char *)(a2 + 1192);
  return a1;
}

uint64_t sub_CCF584(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_59DF7C((uint64_t *)a1, *(void *)a2, *(void *)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5));
    sub_59DF7C((uint64_t *)(a1 + 24), *(void *)(a2 + 24), *(void *)(a2 + 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 5));
    sub_59DF7C((uint64_t *)(a1 + 48), *(void *)(a2 + 48), *(void *)(a2 + 56), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 5));
    sub_59DF7C((uint64_t *)(a1 + 72), *(void *)(a2 + 72), *(void *)(a2 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 5));
  }
  sub_52FD00(a1 + 96, a2 + 96);
  sub_52FD00(a1 + 256, a2 + 256);
  sub_52FD00(a1 + 416, a2 + 416);
  *(unsigned char *)(a1 + 576) = *(unsigned char *)(a2 + 576);
  return a1;
}

void **sub_CCF650(void **result, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  long long v7 = result;
  uint64_t v9 = (uint64_t)(result + 2);
  uint64_t v8 = (uint64_t)result[2];
  uint64_t v10 = (char *)*result;
  if (0x66FD0EB66FD0EB67 * ((v8 - (uint64_t)*result) >> 3) < a4)
  {
    if (v10)
    {
      unint64_t v11 = (char *)result[1];
      uint64_t v12 = *result;
      if (v11 != v10)
      {
        do
        {
          sub_4D4B58((uint64_t)(v11 - 176));
          sub_4D4B58((uint64_t)(v11 - 336));
          sub_4D4B58((uint64_t)(v11 - 504));
          sub_4D4B58((uint64_t)(v11 - 664));
          v11 -= 696;
        }
        while (v11 != v10);
        uint64_t v12 = *v7;
      }
      v7[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      char *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x5E293205E29320) {
      goto LABEL_36;
    }
    unint64_t v13 = 0x66FD0EB66FD0EB67 * (v8 >> 3);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= a4) {
      uint64_t v14 = a4;
    }
    unint64_t v15 = v13 >= 0x2F149902F14990 ? 0x5E293205E29320 : v14;
    if (v15 > 0x5E293205E29320) {
LABEL_36:
    }
      sub_2E00();
    uint64_t v16 = 87 * v15;
    uint64_t result = (void **)operator new(696 * v15);
    uint64_t v17 = result;
    char *v7 = result;
    v7[1] = result;
    v7[2] = &result[v16];
    if (v6 != a3)
    {
      unint64_t v18 = 0;
      do
      {
        uint64_t result = (void **)sub_929E68(v9, (uint64_t)&v17[v18 / 8], (long long *)((char *)v6 + v18));
        v18 += 696;
      }
      while ((long long *)((char *)v6 + v18) != a3);
      uint64_t v17 = (void **)((char *)v17 + v18);
    }
    v7[1] = v17;
    return result;
  }
  long long v19 = (char *)result[1];
  if (0x66FD0EB66FD0EB67 * ((v19 - v10) >> 3) >= a4)
  {
    if (a2 == a3)
    {
      size_t v24 = (char *)*result;
      if (v19 == v10)
      {
LABEL_33:
        v7[1] = v24;
        return result;
      }
    }
    else
    {
      size_t v24 = (char *)*result;
      do
      {
        long long v25 = *v6;
        *(_OWORD *)(v10 + 12) = *(long long *)((char *)v6 + 12);
        *(_OWORD *)uint64_t v10 = v25;
        sub_52FD00((uint64_t)(v10 + 32), (uint64_t)(v6 + 2));
        sub_52FD00((uint64_t)(v10 + 192), (uint64_t)(v6 + 12));
        v10[352] = *((unsigned char *)v6 + 352);
        sub_52FD00((uint64_t)(v10 + 360), (uint64_t)v6 + 360);
        uint64_t result = (void **)sub_52FD00((uint64_t)(v10 + 520), (uint64_t)v6 + 520);
        v10[680] = *((unsigned char *)v6 + 680);
        v10[688] = *((unsigned char *)v6 + 688);
        v24 += 696;
        uint64_t v6 = (long long *)((char *)v6 + 696);
        v10 += 696;
      }
      while (v6 != a3);
      long long v19 = (char *)v7[1];
      if (v19 == v24) {
        goto LABEL_33;
      }
    }
    do
    {
      sub_4D4B58((uint64_t)(v19 - 176));
      sub_4D4B58((uint64_t)(v19 - 336));
      sub_4D4B58((uint64_t)(v19 - 504));
      uint64_t result = (void **)sub_4D4B58((uint64_t)(v19 - 664));
      v19 -= 696;
    }
    while (v19 != v24);
    goto LABEL_33;
  }
  uint64_t v20 = (long long *)((char *)a2 + 8 * ((v19 - v10) >> 3));
  if (v19 != v10)
  {
    do
    {
      long long v21 = *v6;
      *(_OWORD *)(v10 + 12) = *(long long *)((char *)v6 + 12);
      *(_OWORD *)uint64_t v10 = v21;
      sub_52FD00((uint64_t)(v10 + 32), (uint64_t)(v6 + 2));
      sub_52FD00((uint64_t)(v10 + 192), (uint64_t)(v6 + 12));
      v10[352] = *((unsigned char *)v6 + 352);
      sub_52FD00((uint64_t)(v10 + 360), (uint64_t)v6 + 360);
      uint64_t result = (void **)sub_52FD00((uint64_t)(v10 + 520), (uint64_t)v6 + 520);
      v10[680] = *((unsigned char *)v6 + 680);
      v10[688] = *((unsigned char *)v6 + 688);
      uint64_t v6 = (long long *)((char *)v6 + 696);
      v10 += 696;
    }
    while (v6 != v20);
    uint64_t v10 = (char *)v7[1];
  }
  uint64_t v22 = v10;
  if (v20 != a3)
  {
    uint64_t v23 = 0;
    do
    {
      uint64_t result = (void **)sub_929E68(v9, (uint64_t)&v10[v23], (long long *)((char *)v20 + v23));
      v23 += 696;
    }
    while ((long long *)((char *)v20 + v23) != a3);
    uint64_t v22 = &v10[v23];
  }
  v7[1] = v22;
  return result;
}

void sub_CCF994(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    sub_20AF7EC();
    *(void *)(v1 + 8) = v3;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

uint64_t *sub_CCF9D4(uint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  long long v7 = result;
  uint64_t v9 = (uint64_t)(result + 2);
  uint64_t v8 = result[2];
  uint64_t v10 = *result;
  if (0x82FA0BE82FA0BE83 * ((v8 - *result) >> 3) < a4)
  {
    if (v10)
    {
      uint64_t v11 = result[1];
      uint64_t v12 = (void *)*result;
      if (v11 != v10)
      {
        do
        {
          if (*(char *)(v11 - 1) < 0) {
            operator delete(*(void **)(v11 - 24));
          }
          sub_4D4B58(v11 - 184);
          sub_4D4B58(v11 - 344);
          v11 -= 344;
        }
        while (v11 != v10);
        uint64_t v12 = (void *)*v7;
      }
      v7[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      uint64_t *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xBE82FA0BE82FA0) {
      goto LABEL_34;
    }
    unint64_t v16 = 0x82FA0BE82FA0BE83 * (v8 >> 3);
    uint64_t v17 = 2 * v16;
    if (2 * v16 <= a4) {
      uint64_t v17 = a4;
    }
    unint64_t v18 = v16 >= 0x5F417D05F417D0 ? 0xBE82FA0BE82FA0 : v17;
    if (v18 > 0xBE82FA0BE82FA0) {
LABEL_34:
    }
      sub_2E00();
    uint64_t v19 = 344 * v18;
    uint64_t v20 = (char *)operator new(344 * v18);
    uint64_t *v7 = (uint64_t)v20;
    v7[1] = (uint64_t)v20;
    v7[2] = (uint64_t)&v20[v19];
    uint64_t result = (uint64_t *)sub_CCEE14(v9, v6, a3, (uint64_t)v20);
LABEL_28:
    v7[1] = (uint64_t)result;
    return result;
  }
  uint64_t v13 = result[1];
  if (0x82FA0BE82FA0BE83 * ((v13 - v10) >> 3) < a4)
  {
    uint64_t v14 = a2 + 8 * ((v13 - v10) >> 3);
    if (v13 != v10)
    {
      do
      {
        sub_52FD00(v10, v6);
        sub_52FD00(v10 + 160, v6 + 160);
        std::string::operator=((std::string *)(v10 + 320), (const std::string *)(v6 + 320));
        v6 += 344;
        v10 += 344;
      }
      while (v6 != v14);
      uint64_t v10 = v7[1];
    }
    uint64_t result = (uint64_t *)sub_CCEE14(v9, v14, a3, v10);
    goto LABEL_28;
  }
  if (a2 != a3)
  {
    uint64_t v15 = *result;
    do
    {
      sub_52FD00(v10, v6);
      sub_52FD00(v10 + 160, v6 + 160);
      uint64_t result = (uint64_t *)std::string::operator=((std::string *)(v10 + 320), (const std::string *)(v6 + 320));
      v15 += 344;
      v6 += 344;
      v10 += 344;
    }
    while (v6 != a3);
    uint64_t v13 = v7[1];
    if (v13 == v15) {
      goto LABEL_30;
    }
    do
    {
LABEL_32:
      if (*(char *)(v13 - 1) < 0) {
        operator delete(*(void **)(v13 - 24));
      }
      sub_4D4B58(v13 - 184);
      uint64_t result = (uint64_t *)sub_4D4B58(v13 - 344);
      v13 -= 344;
    }
    while (v13 != v15);
    goto LABEL_30;
  }
  uint64_t v15 = *result;
  if (v13 != v10) {
    goto LABEL_32;
  }
LABEL_30:
  v7[1] = v15;
  return result;
}

void sub_CCFC70(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_CCFC78(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_CCFC80()
{
  return sub_4D4B58(v0 - 176);
}

double sub_CCFC9C()
{
  byte_25E5AD7 = 1;
  word_25E5AC0 = 65;
  byte_25E5AEF = 1;
  word_25E5AD8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E5B80 = 0u;
  *(_OWORD *)&qword_25E5B90 = 0u;
  dword_25E5BA0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E5B80, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E5B80, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E5B80, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E5B80, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E5B07 = 8;
  strcpy((char *)&qword_25E5AF0, "any_mode");
  byte_25E5B1F = 7;
  strcpy((char *)&dword_25E5B08, "cycling");
  byte_25E5B37 = 7;
  strcpy((char *)&dword_25E5B20, "driving");
  byte_25E5B4F = 7;
  strcpy((char *)&dword_25E5B38, "walking");
  qword_25E5B58 = 0;
  qword_25E5B60 = 0;
  qword_25E5B50 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E5B50 = (uint64_t)v0;
  qword_25E5B58 = (uint64_t)(v0 + 9);
  qword_25E5B60 = (uint64_t)(v0 + 9);
  qword_25E5B68 = 0;
  qword_25E5B70 = 0;
  unk_25E5B78 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25E5B70 = (uint64_t)(v1 + 9);
  unk_25E5B78 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E5B68 = (uint64_t)v1;
  return result;
}

void sub_CCFF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E5B90) {
    sub_20AF840((void **)qword_25E5B90);
  }
  long long v37 = (void *)xmmword_25E5B80;
  *(void *)&xmmword_25E5B80 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_CD0004(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  v7[0] = a2;
  v7[1] = *(void *)sub_37D0C0(a2);
  char v8 = a3;
  sub_CD00C8((uint64_t)v7, a1, a4);
}

void sub_CD0064(void *a1, int a2)
{
  char v4 = (unsigned int *)__cxa_begin_catch(a1);
  if (a2 != 2) {
    __cxa_rethrow();
  }
  uint64_t v5 = v4[2];
  *(unsigned char *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = v5;
  *(void *)(v2 + 16) = &off_2439090;
  __cxa_end_catch();
}

void sub_CD00B4(_Unwind_Exception *a1)
{
}

void sub_CD00C8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_725D0((uint64_t)v52);
  uint64_t v5 = sub_3757C8(*(void **)a1);
  uint64_t v6 = sub_398020(v5, 0);
  char v7 = &v6[-*(int *)v6];
  if (*(unsigned __int16 *)v7 < 5u || (uint64_t v8 = *((unsigned __int16 *)v7 + 2)) == 0)
  {
    HIBYTE(v51) = 0;
    LOBYTE(__dst) = 0;
    goto LABEL_13;
  }
  uint64_t v9 = &v6[v8];
  uint64_t v10 = *(unsigned int *)v9;
  uint64_t v12 = &v9[v10 + 4];
  size_t v11 = *(unsigned int *)&v9[v10];
  if (v11 >= 0x17)
  {
    if ((v11 | 7) == 0x17) {
      uint64_t v14 = (v11 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v14 = v11 | 7;
    }
    p_dst = (void **)operator new(v14 + 1);
    size_t v50 = v11;
    uint64_t v51 = v14 - 0x7FFFFFFFFFFFFFFFLL;
    std::string __dst = p_dst;
  }
  else
  {
    HIBYTE(v51) = *(_DWORD *)&v9[v10];
    p_dst = (void **)&__dst;
    if (!v11) {
      goto LABEL_12;
    }
  }
  memcpy(p_dst, v12, v11);
LABEL_12:
  *((unsigned char *)p_dst + v11) = 0;
LABEL_13:
  *(_OWORD *)uint64_t v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0uLL;
  uint64_t v46 = 0;
  sub_CD2B18((uint64_t)&v45, *(int *)(a2 + 56));
  uint64_t v15 = *(int *)(a2 + 56);
  uint64_t v16 = *(void *)(a2 + 64);
  if (v16) {
    uint64_t v17 = (uint64_t *)(v16 + 8);
  }
  else {
    uint64_t v17 = 0;
  }
  if (v15)
  {
    unint64_t v18 = &v17[v15];
    uint64_t v19 = *((void *)&v45 + 1);
    uint64_t v20 = HIBYTE(v51);
    size_t v21 = v50;
    int v42 = __dst;
    size_t v43 = v50;
    if (v51 >= 0) {
      size_t v21 = HIBYTE(v51);
    }
    size_t v44 = v21;
    do
    {
      uint64_t v22 = *v17;
      sub_10E3200((uint64_t)v69, 0, 0);
      if ((sub_1880FAC(v23, *(void *)(v22 + 48) & 0xFFFFFFFFFFFFFFFELL) & 1) == 0)
      {
        if (sub_723EC(3u))
        {
          sub_6BAC((uint64_t)&__t);
          sub_188FC78(&__t, (uint64_t)"Failed to parse server route handle to Protobuffer object; dropping request",
            75);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&v63, 3u);
          if (v64 < 0) {
            operator delete(v63);
          }
          if (v68 < 0) {
            operator delete(v67);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        int v39 = *(unsigned __int8 *)(a1 + 16);
        __t.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)operator new(0x30uLL);
        long long v66 = xmmword_20E1380;
        strcpy((char *)__t.__d_.__rep_, "TransitJourneyParserModule.Error.RouteHandle");
        sub_710A8(v39, (uint64_t)&__t, *(void *)(a1 + 8));
        if (SHIBYTE(v66) < 0) {
          operator delete((void *)__t.__d_.__rep_);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_243EE00;
        exception[2] = 1;
      }
      char v24 = v70;
      if ((v70 & 0x20) != 0)
      {
        __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        std::chrono::system_clock::to_time_t(&__t);
        uint64_t v25 = *(unsigned __int8 *)(a1 + 16);
        __t.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)operator new(0x30uLL);
        long long v66 = xmmword_20B93D0;
        strcpy((char *)__t.__d_.__rep_, "TransitJourneyParserModule.RouteHandleAge");
        nullsub_1(v25);
        if (SHIBYTE(v66) < 0) {
          operator delete((void *)__t.__d_.__rep_);
        }
        char v24 = v70;
      }
      if (v24)
      {
        uint64_t v26 = *(unsigned __int8 *)(a1 + 16);
        __t.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)operator new(0x30uLL);
        long long v66 = xmmword_20B93E0;
        strcpy((char *)__t.__d_.__rep_, "TransitJourneyParserModule.PrecacheMismatch");
        unint64_t v27 = v71 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v28 = *(unsigned __int8 *)((v71 & 0xFFFFFFFFFFFFFFFELL) + 23);
        int v29 = (char)v28;
        if ((v28 & 0x80u) != 0) {
          uint64_t v28 = *(void *)(v27 + 8);
        }
        if (v44 == v28)
        {
          if (v29 >= 0) {
            long long v30 = (unsigned __int8 *)(v71 & 0xFFFFFFFFFFFFFFFELL);
          }
          else {
            long long v30 = *(unsigned __int8 **)v27;
          }
          if ((v20 & 0x80) != 0)
          {
            memcmp(v42, v30, v43);
          }
          else if (v20)
          {
            uint64_t v31 = (void **)&__dst;
            uint64_t v32 = v20;
            do
            {
              if (*(unsigned __int8 *)v31 != *v30) {
                break;
              }
              uint64_t v31 = (void **)((char *)v31 + 1);
              ++v30;
              --v32;
            }
            while (v32);
          }
        }
        nullsub_1(v26);
        if (SHIBYTE(v66) < 0) {
          operator delete((void *)__t.__d_.__rep_);
        }
      }
      if (v72) {
        uint64_t v33 = v72;
      }
      else {
        uint64_t v33 = &off_24F7E48;
      }
      sub_CD094C(a1, (uint64_t)v33, (uint64_t)v53);
      sub_10E3440(v69);
      long long v34 = sub_CD2CE4((uint64_t)&v45, v19, (uint64_t)v53);
      if (__p)
      {
        uint64_t v62 = __p;
        operator delete(__p);
      }
      if (v59)
      {
        long long v60 = v59;
        operator delete(v59);
      }
      if (v57)
      {
        long long v58 = v57;
        operator delete(v57);
      }
      if (v55)
      {
        unint64_t v56 = v55;
        operator delete(v55);
      }
      if (v54)
      {
        sub_9F59BC((uint64_t)&v54, (void **)v54);
        operator delete(v54);
      }
      uint64_t v19 = (uint64_t)(v34 + 11);
      ++v17;
    }
    while (v17 != v18);
  }
  long long v35 = v47[0];
  if (v47[0])
  {
    uint64_t v36 = v47[1];
    long long v37 = v47[0];
    if (v47[1] != v47[0])
    {
      do
      {
        v36 -= 22;
        sub_9F58F0((uint64_t)&v48, v36);
      }
      while (v36 != v35);
      long long v37 = v47[0];
    }
    v47[1] = v35;
    operator delete(v37);
  }
  *(_OWORD *)uint64_t v47 = v45;
  *(void *)&long long v48 = v46;
  double v38 = sub_72688((uint64_t)v52);
  *(unsigned char *)a3 = 1;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v47;
  *(void *)(a3 + 24) = v48;
  *(double *)(a3 + 32) = v38;
  if (SHIBYTE(v51) < 0) {
    operator delete(__dst);
  }
}

void sub_CD06EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  if (a65 < 0) {
    operator delete(__p);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  sub_10E3440(v73 - 224);
  if (a21)
  {
    __n128 v75 = (void *)a22;
    long long v76 = a21;
    if ((void *)a22 != a21)
    {
      do
      {
        v75 -= 22;
        sub_9F58F0((uint64_t)&a23, v75);
      }
      while (v75 != a21);
      long long v76 = a21;
    }
    operator delete(v76);
    sub_C8BDA0(&a25);
    if ((a34 & 0x80000000) == 0) {
LABEL_13:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_C8BDA0(&a25);
    if ((a34 & 0x80000000) == 0) {
      goto LABEL_13;
    }
  }
  operator delete(a29);
  _Unwind_Resume(a1);
}

void sub_CD094C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)(a2 + 76) != 1)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v38);
      sub_188FC78(&v38, (uint64_t)"Incompatible journey version in route handle. Expected ", 55);
      uint64_t v32 = (void *)std::ostream::operator<<();
      sub_188FC78(v32, (uint64_t)" but got ", 9);
      uint64_t v33 = (void *)std::ostream::operator<<();
      sub_188FC78(v33, (uint64_t)" in route handle", 16);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v58, 3u);
      if (v60 < 0) {
        operator delete(v58);
      }
      sub_111ECAC((uint64_t)&v38);
    }
    int v34 = *(unsigned __int8 *)(a1 + 16);
    sub_5E5C(&v38, "TransitJourneyParserModule.Error.RouteHandleVersion");
    sub_710A8(v34, (uint64_t)&v38, *(void *)(a1 + 8));
    if (v42 < 0) {
      operator delete(v38);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_243EE00;
    exception[2] = 1;
  }
  *(_OWORD *)uint64_t v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  *(_OWORD *)uint64_t v46 = 0u;
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)size_t v44 = 0u;
  int v49 = -1;
  char v50 = 0;
  int v51 = 0;
  char v52 = 0;
  size_t v54 = 0;
  uint64_t v55 = 0;
  int v53 = 0;
  char v56 = 0;
  uint64_t v57 = 0x3FF0000000000000;
  uint64_t v6 = &off_24F7E98;
  char v7 = *(uint64_t (****)())(a2 + 48);
  uint64_t v8 = *(uint64_t (****)())(a2 + 56);
  if (!v7) {
    char v7 = &off_24F7E98;
  }
  int v9 = *((unsigned __int8 *)v7 + 32) | (*((_DWORD *)v7 + 9) << 8);
  double v38 = v7[3];
  __int16 v39 = v9;
  if (v8) {
    uint64_t v6 = v8;
  }
  uint64_t v10 = v6[3];
  __int16 v11 = *((unsigned __int8 *)v6 + 32) | (unsigned __int16)(*((_WORD *)v6 + 18) << 8);
  long long v40 = v10;
  __int16 v41 = v11;
  if (*(_DWORD *)(a2 + 72) < 3u) {
    int v51 = *(_DWORD *)(a2 + 72);
  }
  long long v36 = 0uLL;
  long long v37 = 0;
  sub_CD379C((unint64_t *)&v36, *(int *)(a2 + 32));
  uint64_t v12 = *(int *)(a2 + 32);
  uint64_t v13 = *(void *)(a2 + 40);
  if (v13) {
    uint64_t v14 = (uint64_t *)(v13 + 8);
  }
  else {
    uint64_t v14 = 0;
  }
  if (v12)
  {
    uint64_t v15 = &v14[v12];
    uint64_t v16 = (char *)*((void *)&v36 + 1);
    do
    {
      sub_CD0E08((void **)a1, *v14, &v58);
      unint64_t v18 = sub_CD38AC((char **)&v36, v16, (uint64_t)&v58);
      if (v61)
      {
        uint64_t v62 = v61;
        operator delete(v61);
      }
      uint64_t v19 = v58;
      if (v58)
      {
        uint64_t v20 = v59;
        uint64_t v17 = v58;
        if (v59 != v58)
        {
          do
          {
            uint64_t v22 = (void *)*((void *)v20 - 5);
            if (v22)
            {
              *((void *)v20 - 4) = v22;
              operator delete(v22);
            }
            uint64_t v23 = (void *)*((void *)v20 - 8);
            if (v23)
            {
              *((void *)v20 - 7) = v23;
              operator delete(v23);
            }
            char v24 = (void *)*((void *)v20 - 11);
            if (v24)
            {
              *((void *)v20 - 10) = v24;
              operator delete(v24);
            }
            uint64_t v25 = (void *)*((void *)v20 - 14);
            if (v25)
            {
              *((void *)v20 - 13) = v25;
              operator delete(v25);
            }
            uint64_t v26 = *((void *)v20 - 17);
            if (v26)
            {
              uint64_t v27 = *((void *)v20 - 16);
              size_t v21 = (void *)*((void *)v20 - 17);
              if (v27 != v26)
              {
                uint64_t v28 = v27 - 1064;
                do
                {
                  int v30 = *(_DWORD *)(v28 + 1056);
                  if (v30 == 3)
                  {
                    sub_3AFFFC(v28);
                  }
                  else if (v30 == 1)
                  {
                    uint64_t v31 = *(void **)(v28 + 16);
                    if (v31)
                    {
                      *(void *)(v28 + 24) = v31;
                      operator delete(v31);
                    }
                  }
                  else if (!v30 && *(unsigned char *)(v28 + 28))
                  {
                    *(unsigned char *)(v28 + 28) = 0;
                  }
                  uint64_t v29 = v28 - 32;
                  v28 -= 1096;
                }
                while (v29 != v26);
                size_t v21 = (void *)*((void *)v20 - 17);
              }
              *((void *)v20 - 16) = v26;
              operator delete(v21);
            }
            v20 -= 144;
          }
          while (v20 != v19);
          uint64_t v17 = v58;
        }
        int v59 = v19;
        operator delete(v17);
      }
      uint64_t v16 = v18 + 64;
      ++v14;
    }
    while (v14 != v15);
  }
  if (__p[0])
  {
    sub_9F59BC((uint64_t)__p, (void **)__p[0]);
    operator delete(__p[0]);
  }
  *(_OWORD *)long long __p = v36;
  v44[0] = v37;
  sub_9F761C(a3, (long long *)&v38);
  if (v53)
  {
    size_t v54 = v53;
    operator delete(v53);
  }
  if (v47[1])
  {
    *(void **)&long long v48 = v47[1];
    operator delete(v47[1]);
  }
  if (v46[0])
  {
    v46[1] = v46[0];
    operator delete(v46[0]);
  }
  if (v44[1])
  {
    *(void **)&long long v45 = v44[1];
    operator delete(v44[1]);
  }
  if (__p[0])
  {
    sub_9F59BC((uint64_t)__p, (void **)__p[0]);
    operator delete(__p[0]);
  }
}

void sub_CD0D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 - 121) < 0)
  {
    operator delete(*(void **)(v17 - 144));
    sub_111ECAC((uint64_t)&__p);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_CD0DB4(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_A0A42C((uint64_t)va);
  JUMPOUT(0xCD0DFCLL);
}

void sub_CD0E08(void **a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *(_OWORD *)uint64_t v20 = 0u;
  long long v21 = 0u;
  *(_OWORD *)long long __p = 0u;
  char v22 = 1;
  unint64_t v23 = 0x8000000080000000;
  __int16 v24 = 0;
  long long v17 = 0uLL;
  unint64_t v18 = 0;
  sub_CD41C8((uint64_t)&v17, *(int *)(a2 + 24));
  uint64_t v6 = *(int *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  if (v7) {
    uint64_t v8 = (uint64_t *)(v7 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v6)
  {
    int v9 = (_DWORD *)*((void *)&v17 + 1);
    uint64_t v10 = 8 * v6;
    do
    {
      sub_CD1024(a1, *v8, (uint64_t)v25);
      int v9 = (_DWORD *)(sub_CD4370((uint64_t *)&v17, v9, (uint64_t)v25) + 144);
      sub_9BEAA8(v25);
      ++v8;
      v10 -= 8;
    }
    while (v10);
  }
  __int16 v11 = __p[0];
  if (__p[0])
  {
    uint64_t v12 = __p[1];
    uint64_t v13 = __p[0];
    if (__p[1] != __p[0])
    {
      do
        uint64_t v12 = sub_9BEAA8(v12 - 18);
      while (v12 != v11);
      uint64_t v13 = __p[0];
    }
    __p[1] = v11;
    operator delete(v13);
  }
  *(_OWORD *)long long __p = v17;
  v20[0] = v18;
  sub_9F7A40(a3, (uint64_t *)__p);
  if (v20[1])
  {
    *(void **)&long long v21 = v20[1];
    operator delete(v20[1]);
  }
  uint64_t v14 = __p[0];
  if (__p[0])
  {
    uint64_t v15 = __p[1];
    uint64_t v16 = __p[0];
    if (__p[1] != __p[0])
    {
      do
        uint64_t v15 = sub_9BEAA8(v15 - 18);
      while (v15 != v14);
      uint64_t v16 = __p[0];
    }
    __p[1] = v14;
    operator delete(v16);
  }
}

void sub_CD0F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_9BB4F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_CD0F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

void **sub_CD0FC8(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    char v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_9BEAA8(v3 - 18);
      while (v3 != v2);
      char v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_CD1024@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v29 = 0;
  long long v28 = 0u;
  long long v27 = 0u;
  long long v26 = 0u;
  long long v25 = 0u;
  long long v24 = 0u;
  long long v23 = 0u;
  *(_OWORD *)char v22 = 0u;
  char v30 = 1;
  unint64_t v31 = 0x8000000080000000;
  char v32 = 0;
  LODWORD(v21) = *(_DWORD *)(a2 + 48);
  long long v19 = 0uLL;
  uint64_t v20 = 0;
  sub_CD4E18((uint64_t)&v19, *(int *)(a2 + 32));
  uint64_t v6 = *(int *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  if (v7) {
    uint64_t v8 = (uint64_t *)(v7 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v6)
  {
    uint64_t v9 = *((void *)&v19 + 1);
    uint64_t v10 = 8 * v6;
    do
    {
      sub_CD12B8(a1, *v8, (uint64_t)v33);
      uint64_t v11 = sub_CD4FEC((uint64_t *)&v19, v9, (uint64_t)v33);
      if (v37 == 3)
      {
        sub_3AFFFC((uint64_t)&v34);
      }
      else if (v37 == 1 && __p)
      {
        long long v36 = __p;
        operator delete(__p);
      }
      uint64_t v9 = v11 + 1096;
      ++v8;
      v10 -= 8;
    }
    while (v10);
  }
  uint64_t v12 = (char *)v22[0];
  if (v22[0])
  {
    uint64_t v13 = v22[0];
    if (v22[1] != v22[0])
    {
      uint64_t v14 = (char *)v22[1] - 1064;
      do
      {
        int v16 = *((_DWORD *)v14 + 264);
        if (v16 == 3)
        {
          sub_3AFFFC((uint64_t)v14);
        }
        else if (v16 == 1)
        {
          long long v17 = (void *)*((void *)v14 + 2);
          if (v17)
          {
            *((void *)v14 + 3) = v17;
            operator delete(v17);
          }
        }
        else if (!v16 && v14[28])
        {
          v14[28] = 0;
        }
        uint64_t v15 = v14 - 32;
        v14 -= 1096;
      }
      while (v15 != v12);
      uint64_t v13 = v22[0];
    }
    v22[1] = v12;
    operator delete(v13);
  }
  *(_OWORD *)char v22 = v19;
  *(void *)&long long v23 = v20;
  sub_9F7CDC(a3, (uint64_t)&v21);
  return sub_9BEAA8(&v21);
}

void sub_CD1224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_9BEAA8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_CD1238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

unint64_t sub_CD12B8@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(*(_DWORD *)(a2 + 56))
  {
    case 0:
      uint64_t v6 = sub_375C38(*a1);
      uint64_t v7 = sub_375500(*a1);
      uint64_t v8 = sub_3755E4(*a1);
      if (*(void *)(a2 + 24)) {
        uint64_t v9 = *(uint64_t (****)())(a2 + 24);
      }
      else {
        uint64_t v9 = &off_24F7D10;
      }
      uint64_t v10 = (unsigned int *)nullsub_1(v9[7]);
      *(void *)uint64_t v136 = -1;
      *(_DWORD *)&v136[8] = 0x7FFFFFFF;
      unint64_t v11 = sub_2A2AD8(v6, v10, (uint64_t)v136);
      unint64_t v133 = v11;
      if (v11) {
        BOOL v12 = v11 >= 0xFFFFFFFF00000000;
      }
      else {
        BOOL v12 = 1;
      }
      if (v12)
      {
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)v136);
          sub_188FC78(v136, (uint64_t)"Unable to resolve trip muid ", 28);
          uint64_t v103 = (void *)std::ostream::operator<<();
          sub_188FC78(v103, (uint64_t)" in transit network layer.", 26);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          if (v135 < 0) {
            operator delete(__p[0]);
          }
          sub_111ECAC((uint64_t)v136);
        }
        int v104 = *((unsigned __int8 *)a1 + 16);
        sub_5E5C(v136, "TransitJourneyParserModule.Error.TripIdLookup");
        sub_710A8(v104, (uint64_t)v136, (uint64_t)a1[1]);
        if ((v136[23] & 0x80000000) != 0) {
          operator delete(*(void **)v136);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_243EE00;
        exception[2] = 42;
      }
      int v118 = a1;
      if (v9[3]) {
        uint64_t v13 = (unsigned int *)v9[3];
      }
      else {
        uint64_t v13 = (unsigned int *)&off_24F7CC8;
      }
      unsigned __int16 v14 = sub_3842BC(v13[6]);
      char v15 = sub_CD27C8(v13[7]);
      char v16 = sub_CD27C8(v13[8]);
      unsigned __int16 v130 = v14;
      char v131 = v15;
      char v132 = v16;
      int v129 = sub_3698D4(v8, v133, &v130);
      if (v129 == -1)
      {
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)v136);
          long long v106 = sub_188FC78(v136, (uint64_t)"Date ", 5);
          int v107 = sub_CD291C(v106);
          sub_188FC78(v107, (uint64_t)" not found on trip ", 19);
          size_t v108 = (void *)std::ostream::operator<<();
          sub_188FC78(v108, (uint64_t)" in transit network layer.", 26);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          if (v135 < 0) {
            operator delete(__p[0]);
          }
          sub_111ECAC((uint64_t)v136);
        }
        int v109 = *((unsigned __int8 *)v118 + 16);
        sub_5E5C(v136, "TransitJourneyParserModule.Error.TripDateLookup");
        sub_710A8(v109, (uint64_t)v136, (uint64_t)v118[1]);
LABEL_144:
        if ((v136[23] & 0x80000000) != 0) {
          operator delete(*(void **)v136);
        }
        long long v117 = __cxa_allocate_exception(0x10uLL);
        *(void *)long long v117 = &off_243EE00;
        v117[2] = 42;
      }
      uint64_t v17 = v133;
      if (v133) {
        BOOL v18 = HIDWORD(v133) == -1;
      }
      else {
        BOOL v18 = 1;
      }
      int v19 = v18;
      if (v133) {
        uint64_t v20 = HIDWORD(v133);
      }
      else {
        uint64_t v20 = 0xFFFFFFFFLL;
      }
      uint64_t v21 = &off_24F7E98;
      char v22 = (uint64_t (***)())v9[5];
      if (!v22) {
        char v22 = &off_24F7E98;
      }
      if (v9[6]) {
        uint64_t v21 = (uint64_t (***)())v9[6];
      }
      int v128 = *((_DWORD *)v9 + 4);
      uint64_t v127 = v20;
      int v126 = v19;
      if ((v128 & 2) != 0)
      {
        int v46 = *((_DWORD *)v9[4] + 6);
        if ((v46 - 1) >= 5) {
          int v46 = 0;
        }
        int v119 = v46;
        char v125 = 1;
      }
      else
      {
        char v125 = 0;
      }
      unsigned int v47 = *((_DWORD *)v9 + 16);
      unsigned int v48 = *((_DWORD *)v9 + 17);
      uint64_t v123 = v22[3];
      int v49 = *((_DWORD *)v22 + 8);
      int v121 = *(_DWORD *)(a2 + 60);
      int v122 = *((_DWORD *)v22 + 9);
      char v50 = v21[3];
      int v51 = *((_DWORD *)v21 + 8);
      int v124 = *((_DWORD *)v21 + 9);
      char v52 = (int *)sub_369F8C(v8, v133, 0, "trip");
      int v53 = (unsigned __int16 *)((char *)v52 - *v52);
      if (*v53 < 9u || (uint64_t v54 = v53[4]) == 0 || v47 >= *(int *)((char *)v52 + v54))
      {
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)v136);
          int v89 = sub_188FC78(v136, (uint64_t)"Departure stop index ", 21);
          std::ostream::operator<<();
          sub_188FC78(v89, (uint64_t)" (stop muid: ", 13);
          uint64_t v90 = (void *)std::ostream::operator<<();
          uint64_t v91 = sub_188FC78(v90, (uint64_t)") exceeds the total number of stops (", 37);
          sub_CD2A90(v8, &v133);
          std::ostream::operator<<();
          sub_188FC78(v91, (uint64_t)") on trip ", 10);
          uint64_t v92 = (void *)std::ostream::operator<<();
          sub_188FC78(v92, (uint64_t)".", 1);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          if (v135 < 0) {
            operator delete(__p[0]);
          }
          sub_111ECAC((uint64_t)v136);
        }
        goto LABEL_106;
      }
      uint64_t v55 = (int *)sub_369F8C(v8, v133, 0, "trip");
      unint64_t v120 = v50;
      char v56 = (unsigned __int16 *)((char *)v55 - *v55);
      if (*v56 < 9u || (uint64_t v57 = v56[4]) == 0 || v48 >= *(int *)((char *)v55 + v57))
      {
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)v136);
          uint64_t v94 = sub_188FC78(v136, (uint64_t)"Arrival stop index ", 19);
          std::ostream::operator<<();
          sub_188FC78(v94, (uint64_t)" (stop muid: ", 13);
          uint64_t v95 = (void *)std::ostream::operator<<();
          uint64_t v96 = sub_188FC78(v95, (uint64_t)") exceeds the total number of stops (", 37);
          sub_CD2A90(v8, &v133);
          std::ostream::operator<<();
          sub_188FC78(v96, (uint64_t)") on trip ", 10);
          uint64_t v97 = (void *)std::ostream::operator<<();
          sub_188FC78(v97, (uint64_t)".", 1);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          if (v135 < 0) {
            operator delete(__p[0]);
          }
          sub_111ECAC((uint64_t)v136);
        }
LABEL_106:
        int v93 = *((unsigned __int8 *)v118 + 16);
        sub_5E5C(v136, "TransitJourneyParserModule.Error.TripStopIndexLookup");
        sub_710A8(v93, (uint64_t)v136, (uint64_t)v118[1]);
        goto LABEL_144;
      }
      unint64_t v58 = v133;
      int v59 = sub_369B60(v8, v133, 0);
      char v60 = &v59[-*(int *)v59];
      if (*(unsigned __int16 *)v60 < 5u)
      {
        uint64_t v61 = 0;
      }
      else
      {
        uint64_t v61 = *((unsigned __int16 *)v60 + 2);
        if (*((_WORD *)v60 + 2)) {
          v61 += (uint64_t)&v59[*(unsigned int *)&v59[v61]];
        }
      }
      uint64_t v62 = (int *)(v61 + 4 * HIDWORD(v58) + 4 + *(unsigned int *)(v61 + 4 * HIDWORD(v58) + 4));
      long long v63 = (unsigned __int16 *)((char *)v62 - *v62);
      if (*v63 >= 0xDu && (uint64_t v64 = v63[6]) != 0) {
        int v65 = *(int *)((char *)v62 + v64);
      }
      else {
        int v65 = -1;
      }
      long long v66 = (int *)sub_498D5C(v7, *(void *)&v59[24 * v65+ 4+ 24 * v47+ *((unsigned __int16 *)v60 + 3)+ *(unsigned int *)&v59[*((unsigned __int16 *)v60 + 3)]], 0, "stop");
      size_t v67 = (unsigned __int16 *)((char *)v66 - *v66);
      if (*v67 >= 5u && (uint64_t v68 = v67[2]) != 0) {
        uint64_t v69 = *(void *)((char *)v66 + v68);
      }
      else {
        uint64_t v69 = 0;
      }
      int v70 = sub_398020(v7, 0);
      uint64_t v71 = &v70[-*(int *)v70];
      if (*(unsigned __int16 *)v71 >= 0xBu)
      {
        uint64_t v72 = *((unsigned __int16 *)v71 + 5);
        if (v72)
        {
          if (v70[v72]) {
            uint64_t v69 = nullsub_1(v69);
          }
        }
      }
      if ((uint64_t (**)())nullsub_1(v69) != v9[10])
      {
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)v136);
          sub_188FC78(v136, (uint64_t)"Departure stop muid ", 20);
          size_t v110 = (void *)std::ostream::operator<<();
          sub_188FC78(v110, (uint64_t)" not found on trip ", 19);
          unint64_t v111 = (void *)std::ostream::operator<<();
          sub_188FC78(v111, (uint64_t)" at index ", 10);
          unint64_t v112 = (void *)std::ostream::operator<<();
          sub_188FC78(v112, (uint64_t)".", 1);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          if (v135 < 0) {
            operator delete(__p[0]);
          }
          sub_111ECAC((uint64_t)v136);
        }
        goto LABEL_143;
      }
      unint64_t v73 = v133;
      unint64_t v74 = sub_369B60(v8, v133, 0);
      __n128 v75 = &v74[-*(int *)v74];
      if (*(unsigned __int16 *)v75 < 5u)
      {
        uint64_t v76 = 0;
      }
      else
      {
        uint64_t v76 = *((unsigned __int16 *)v75 + 2);
        if (*((_WORD *)v75 + 2)) {
          v76 += (uint64_t)&v74[*(unsigned int *)&v74[v76]];
        }
      }
      int v77 = (int *)(v76 + 4 * HIDWORD(v73) + 4 + *(unsigned int *)(v76 + 4 * HIDWORD(v73) + 4));
      size_t v78 = (unsigned __int16 *)((char *)v77 - *v77);
      if (*v78 >= 0xDu && (uint64_t v79 = v78[6]) != 0) {
        int v80 = *(int *)((char *)v77 + v79);
      }
      else {
        int v80 = -1;
      }
      unint64_t v81 = (int *)sub_498D5C(v7, *(void *)&v74[24 * v80+ 4+ 24 * v48+ *((unsigned __int16 *)v75 + 3)+ *(unsigned int *)&v74[*((unsigned __int16 *)v75 + 3)]], 0, "stop");
      char v82 = (unsigned __int16 *)((char *)v81 - *v81);
      if (*v82 >= 5u && (uint64_t v83 = v82[2]) != 0) {
        uint64_t v84 = *(void *)((char *)v81 + v83);
      }
      else {
        uint64_t v84 = 0;
      }
      uint64_t v85 = sub_398020(v7, 0);
      int v86 = &v85[-*(int *)v85];
      if (*(unsigned __int16 *)v86 >= 0xBu)
      {
        uint64_t v87 = *((unsigned __int16 *)v86 + 5);
        if (v87)
        {
          if (v85[v87]) {
            uint64_t v84 = nullsub_1(v84);
          }
        }
      }
      unint64_t result = nullsub_1(v84);
      if ((uint64_t (**)())result != v9[11])
      {
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)v136);
          sub_188FC78(v136, (uint64_t)"Arrival stop muid ", 18);
          BOOL v113 = (void *)std::ostream::operator<<();
          sub_188FC78(v113, (uint64_t)" not found on trip ", 19);
          unsigned int v114 = (void *)std::ostream::operator<<();
          sub_188FC78(v114, (uint64_t)" at index ", 10);
          uint64_t v115 = (void *)std::ostream::operator<<();
          sub_188FC78(v115, (uint64_t)".", 1);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          if (v135 < 0) {
            operator delete(__p[0]);
          }
          sub_111ECAC((uint64_t)v136);
        }
LABEL_143:
        int v116 = *((unsigned __int8 *)v118 + 16);
        sub_5E5C(v136, "TransitJourneyParserModule.Error.StopIdLookup");
        sub_710A8(v116, (uint64_t)v136, (uint64_t)v118[1]);
        goto LABEL_144;
      }
      *(_DWORD *)(a3 + 1088) = -1;
      *(_DWORD *)a3 = v121;
      uint64_t v88 = v17 << 32;
      if (v126) {
        uint64_t v88 = 0;
      }
      *(void *)(a3 + 4) = v88 | v127;
      *(_DWORD *)(a3 + 12) = v129;
      *(_DWORD *)(a3 + 16) = v47;
      *(_DWORD *)(a3 + 20) = v48;
      *(void *)(a3 + 24) = v123;
      *(_WORD *)(a3 + 32) = v49 | (unsigned __int16)((_WORD)v122 << 8);
      *(void *)(a3 + 36) = v120;
      *(_WORD *)(a3 + 44) = v51 | (unsigned __int16)((_WORD)v124 << 8);
      *(_DWORD *)(a3 + 48) = -1;
      *(_WORD *)(a3 + 52) = 0;
      *(unsigned char *)(a3 + 60) = v125;
      if ((v128 & 2) != 0) {
        *(_DWORD *)(a3 + 56) = v119;
      }
      *(_DWORD *)(a3 + 1088) = 0;
      return result;
    case 2:
      if (*(void *)(a2 + 32)) {
        double v38 = *(uint64_t (****)())(a2 + 32);
      }
      else {
        double v38 = &off_24F7D70;
      }
      int v39 = *(_DWORD *)(a2 + 60);
      uint64_t v40 = sub_CD2514((uint64_t)a1, (uint64_t)v38[3]);
      int v42 = v41;
      unint64_t result = sub_CD2514((uint64_t)a1, (uint64_t)v38[4]);
      char v43 = *((unsigned char *)v38 + 48);
      size_t v44 = v38[5];
      *(_DWORD *)a3 = v39;
      *(void *)(a3 + 4) = v40;
      *(_DWORD *)(a3 + 12) = v42;
      *(void *)(a3 + 16) = result;
      *(_DWORD *)(a3 + 24) = v45;
      *(void *)(a3 + 28) = v44;
      *(void *)(a3 + 36) = 0xFFFFFFFFLL;
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 64) = 0;
      *(void *)(a3 + 48) = 0;
      *(unsigned char *)(a3 + 72) = v43;
      int v32 = 1;
      goto LABEL_53;
    case 3:
      if (*(void *)(a2 + 40)) {
        long long v23 = *(uint64_t (****)())(a2 + 40);
      }
      else {
        long long v23 = &off_24F7DA8;
      }
      uint64_t v24 = sub_375C38(*a1);
      int v25 = *(_DWORD *)(a2 + 60);
      long long v26 = v23[3];
      long long v27 = (unsigned int *)nullsub_1(v23[4]);
      *(void *)uint64_t v136 = -1;
      *(_DWORD *)&v136[8] = 0x7FFFFFFF;
      unint64_t result = sub_2A2938(v24, v27, (uint64_t)v136);
      BOOL v29 = HIDWORD(result) == 0xFFFFFFFF || result == 0;
      unint64_t v30 = __ROR8__(result, 32);
      if (v29) {
        unint64_t v30 = 0xFFFFFFFFLL;
      }
      if (HIDWORD(v30)) {
        BOOL v31 = v30 == 0xFFFFFFFFLL;
      }
      else {
        BOOL v31 = 1;
      }
      if (v31)
      {
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)v136);
          sub_188FC78(v136, (uint64_t)"Unable to resolve road access point muid ", 41);
          uint64_t v100 = (void *)std::ostream::operator<<();
          sub_188FC78(v100, (uint64_t)" in transit network layer.", 26);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          if (v135 < 0) {
            operator delete(__p[0]);
          }
          sub_111ECAC((uint64_t)v136);
        }
        int v101 = *((unsigned __int8 *)a1 + 16);
        sub_5E5C(v136, "TransitJourneyParserModule.Error.RoadAccessPointLookup");
        sub_710A8(v101, (uint64_t)v136, (uint64_t)a1[1]);
        if ((v136[23] & 0x80000000) != 0) {
          operator delete(*(void **)v136);
        }
        uint64_t v102 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v102 = &off_243EE00;
        v102[2] = 42;
      }
      *(_DWORD *)a3 = v25;
      *(void *)(a3 + 4) = v26;
      *(void *)(a3 + 12) = v30;
      int v32 = 2;
LABEL_53:
      *(_DWORD *)(a3 + 1088) = v32;
      return result;
    case 4:
      if (*(void *)(a2 + 48)) {
        uint64_t v33 = *(uint64_t (****)())(a2 + 48);
      }
      else {
        uint64_t v33 = &off_24F7DD0;
      }
      *(_OWORD *)&v136[4] = xmmword_20EB6C0;
      *(void *)&v136[20] = 0xFFFFFFFFLL;
      memset(v137, 0, sizeof(v137));
      uint64_t v138 = 0;
      int v139 = -1;
      int v140 = -1;
      v141[0] = 0;
      *(void *)((char *)v141 + 6) = 0;
      *(_OWORD *)&v144[1] = 0u;
      int v142 = 0x7FFFFFFF;
      int v143 = 0x7FFFFFFF;
      *(void *)unint64_t v144 = 0x7FFFFFFF7FFFFFFFLL;
      *(void *)&long long v34 = 0x8000000080000000;
      *(void *)&v144[5] = 0x8000000080000000;
      char v148 = 0;
      long long v146 = 0u;
      long long v147 = 0u;
      long long v145 = 0u;
      int v149 = 0x7FFFFFFF;
      unint64_t v150 = 0x8000000080000000;
      int v151 = -1;
      long long v152 = xmmword_20E8160;
      int v153 = -1;
      *(void *)((char *)v154 + 6) = 0;
      v154[0] = 0;
      int v155 = 0x7FFFFFFF;
      *(_OWORD *)&v157[1] = 0u;
      int v156 = 0x7FFFFFFF;
      *(void *)int v157 = 0x7FFFFFFF7FFFFFFFLL;
      *(void *)&v157[5] = 0x8000000080000000;
      char v161 = 0;
      long long v158 = 0u;
      long long v159 = 0u;
      long long v160 = 0u;
      int v162 = 0x7FFFFFFF;
      unint64_t v163 = 0x8000000080000000;
      int v164 = -1;
      long long v165 = xmmword_20E8160;
      int v166 = 0x7FFFFFFF;
      uint64_t v167 = 0x7FFFFFFF7FFFFFFFLL;
      long long v168 = 0u;
      uint64_t v169 = 0;
      unint64_t v170 = 0x8000000080000000;
      int v171 = 0x7FFFFFFF;
      uint64_t v172 = 0x7FFFFFFFFFFFFFFFLL;
      unint64_t v173 = 0x8000000080000000;
      int v174 = 0x7FFFFFFF;
      long long v175 = 0u;
      long long v176 = 0u;
      long long v177 = 0u;
      long long v178 = 0u;
      long long v179 = 0u;
      long long v180 = 0u;
      long long v181 = 0u;
      long long v182 = 0u;
      long long v183 = 0u;
      long long v184 = 0u;
      long long v185 = 0u;
      long long v186 = 0u;
      long long v187 = 0u;
      long long v188 = 0u;
      *((void *)&v34 + 1) = 0x8000000080000000;
      long long v189 = 0u;
      long long v190 = v34;
      uint64_t v193 = 0;
      long long v191 = v34;
      long long v192 = 0u;
      char v194 = 1;
      int v195 = 0;
      char v196 = 1;
      *(_DWORD *)((char *)v197 + 3) = 0;
      v197[0] = 0;
      long long v210 = 0u;
      long long v209 = 0u;
      long long v208 = 0u;
      long long v207 = 0u;
      long long v206 = 0u;
      long long v205 = 0u;
      long long v204 = 0u;
      long long v203 = 0u;
      long long v202 = 0u;
      long long v201 = 0u;
      long long v200 = 0u;
      long long v199 = 0u;
      long long v198 = 0u;
      uint64_t v211 = 0;
      *(_DWORD *)uint64_t v136 = *(_DWORD *)(a2 + 60);
      int v35 = *((_DWORD *)v33 + 4);
      if (v35)
      {
        *(void *)&v136[4] = sub_CD2514((uint64_t)a1, (uint64_t)v33[3]);
        *(_DWORD *)&v136[12] = v36;
        int v35 = *((_DWORD *)v33 + 4);
      }
      if ((v35 & 2) != 0)
      {
        *(void *)&v136[16] = sub_CD2514((uint64_t)a1, (uint64_t)v33[4]);
        *(_DWORD *)&v136[24] = v37;
      }
      unint64_t v173 = (unint64_t)v33[5];
      uint64_t v172 = (uint64_t)v33[6];
      *(_DWORD *)(a3 + 1088) = -1;
      *(_OWORD *)a3 = *(_OWORD *)v136;
      *(_OWORD *)(a3 + 12) = *(_OWORD *)&v136[12];
      sub_7A3ACC(a3 + 32, (uint64_t)v137);
      *(_DWORD *)(a3 + 1088) = 3;
      return sub_3AFFFC((uint64_t)v137);
    default:
      int v98 = *((unsigned __int8 *)a1 + 16);
      sub_5E5C(v136, "TransitJourneyParserModule.Error.JourneyLegType");
      sub_710A8(v98, (uint64_t)v136, (uint64_t)a1[1]);
      if ((v136[23] & 0x80000000) != 0) {
        operator delete(*(void **)v136);
      }
      uint64_t v99 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v99 = &off_243EE00;
      v99[2] = 1;
  }
}

void sub_CD22E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a26);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_CD24A4(_Unwind_Exception *a1)
{
  sub_3AFFFC(v1);
  _Unwind_Resume(a1);
}

void sub_CD24B8(_Unwind_Exception *a1)
{
  sub_3AFFFC(v1);
  _Unwind_Resume(a1);
}

void sub_CD24D0(void *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  JUMPOUT(0xCD24F8);
}

void sub_CD24F4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_CD2514(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_375C38(*(void **)a1);
  uint64_t v5 = (unsigned int *)nullsub_1(a2);
  BOOL v18 = (void *)-1;
  int v19 = 0x7FFFFFFF;
  sub_2A24E8(v4, v5, (uint64_t)&v18, (uint64_t)&v22);
  if (!v24)
  {
    *(_DWORD *)uint64_t v21 = 3;
    uint64_t v6 = v22;
    if (!v22)
    {
LABEL_5:
      uint64_t v7 = 0;
      uint64_t v8 = 0xFFFFFFFFLL;
LABEL_13:
      unint64_t v11 = v8 | v7;
      goto LABEL_16;
    }
LABEL_11:
    uint64_t v8 = v23;
    uint64_t v7 = v6 << 32;
    if (v23 == -1)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0xFFFFFFFFLL;
    }
    goto LABEL_13;
  }
  if (v24 != 7)
  {
    if (v24 != 9)
    {
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)&v18);
        sub_188FC78(&v18, (uint64_t)"Unable to resolve muid ", 23);
        uint64_t v13 = (void *)std::ostream::operator<<();
        sub_188FC78(v13, (uint64_t)" as stop, access point, or road access point in transit network layer.", 70);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
        if (v17 < 0) {
          operator delete(__p);
        }
        sub_111ECAC((uint64_t)&v18);
      }
      int v14 = *(unsigned __int8 *)(a1 + 16);
      sub_5E5C(&v18, "TransitJourneyParserModule.Error.TerminalIdLookup");
      sub_710A8(v14, (uint64_t)&v18, *(void *)(a1 + 8));
      if (v20 < 0) {
        operator delete(v18);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_243EE00;
      exception[2] = 42;
    }
    *(_DWORD *)uint64_t v21 = 0;
    uint64_t v6 = v22;
    if (!v22) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
  *(_DWORD *)uint64_t v21 = 4;
  if (v22)
  {
    uint64_t v9 = v23;
    unint64_t v10 = (unint64_t)v22 << 32;
    if (v23 == -1)
    {
      unint64_t v10 = 0;
      uint64_t v9 = 0xFFFFFFFFLL;
    }
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v9 = 0xFFFFFFFFLL;
  }
  unint64_t v11 = v9 | v10;
LABEL_16:
  *(void *)&v21[4] = v11;
  return *(void *)v21;
}

void sub_CD274C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_CD27B4()
{
}

uint64_t sub_CD27C8(uint64_t result)
{
  unsigned int v1 = result;
  if (result >= 0x100)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v8, v1);
    uint64_t v3 = std::string::insert(&v8, 0, "narrowing ");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    uint64_t v5 = std::string::append(&v9, " failed");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v5->__r_.__value_.__r.__words[2];
    long long v10 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  return result;
}

void sub_CD289C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void *sub_CD291C(void *a1)
{
  int v2 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8);
  uint64_t v3 = (void *)std::ostream::operator<<();
  long long v4 = sub_188FC78(v3, (uint64_t)"-", 1);
  uint64_t v5 = v4;
  uint64_t v6 = *v4;
  uint64_t v7 = (char *)v4 + *(void *)(*v4 - 24);
  if (*((_DWORD *)v7 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    std::string v8 = std::locale::use_facet(&v12, &std::ctype<char>::id);
    int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 32);
    std::locale::~locale(&v12);
    *((_DWORD *)v7 + 36) = v9;
    uint64_t v6 = *v5;
  }
  *((_DWORD *)v7 + 36) = 48;
  *(uint64_t *)((char *)v5 + *(void *)(v6 - 24) + 24) = 2;
  long long v10 = (void *)std::ostream::operator<<();
  sub_188FC78(v10, (uint64_t)"-", 1);
  std::ostream::operator<<();
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = v2;
  return a1;
}

void sub_CD2A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_CD2A90(uint64_t a1, unint64_t *a2)
{
  int v2 = (int *)sub_369F8C(a1, *a2, 0, "trip");
  uint64_t v3 = 0;
  long long v4 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v4 >= 9u)
  {
    uint64_t v3 = v4[4];
    if (v4[4]) {
      return *(unsigned int *)((char *)v2 + v3);
    }
  }
  return v3;
}

void sub_CD2AE0(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

void sub_CD2B18(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(char **)a1;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= a2) {
    return;
  }
  if (a2 >= 0x1745D1745D1745ELL) {
    sub_2E00();
  }
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v6 = 176 * a2;
  uint64_t v7 = (char *)operator new(176 * a2);
  std::string v8 = &v7[v6];
  int v9 = &v7[v5 - v3];
  if (v5 == v3)
  {
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v8;
    if (!v3) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v10 = 0;
  do
  {
    std::string::size_type v11 = &v5[v10];
    std::locale v12 = &v9[v10];
    long long v13 = *(_OWORD *)&v5[v10 - 176];
    *(void *)(v12 - 162) = *(void *)&v5[v10 - 162];
    *((_OWORD *)v12 - 11) = v13;
    *(_OWORD *)(v12 - 152) = *(_OWORD *)&v5[v10 - 152];
    *((void *)v12 - 17) = *(void *)&v5[v10 - 136];
    *((void *)v11 - 19) = 0;
    *((void *)v11 - 18) = 0;
    long long v14 = *(_OWORD *)&v5[v10 - 128];
    *((void *)v11 - 17) = 0;
    *((_OWORD *)v12 - 8) = v14;
    *((void *)v12 - 14) = *(void *)&v5[v10 - 112];
    *((void *)v11 - 16) = 0;
    *((void *)v11 - 15) = 0;
    *((void *)v11 - 14) = 0;
    *(_OWORD *)(v12 - 104) = *(_OWORD *)&v5[v10 - 104];
    *((void *)v12 - 11) = *(void *)&v5[v10 - 88];
    *((void *)v11 - 13) = 0;
    *((void *)v11 - 12) = 0;
    *((void *)v11 - 11) = 0;
    *((_OWORD *)v12 - 5) = *(_OWORD *)&v5[v10 - 80];
    *((void *)v12 - 8) = *(void *)&v5[v10 - 64];
    *((void *)v11 - 10) = 0;
    *((void *)v11 - 9) = 0;
    *((void *)v11 - 8) = 0;
    uint64_t v15 = *(void *)&v5[v10 - 56];
    *(void *)(v12 - 51) = *(void *)&v5[v10 - 51];
    *((void *)v12 - 7) = v15;
    *(_OWORD *)(v12 - 40) = *(_OWORD *)&v5[v10 - 40];
    *((void *)v12 - 3) = *(void *)&v5[v10 - 24];
    *((void *)v11 - 5) = 0;
    *((void *)v11 - 4) = 0;
    *((void *)v11 - 3) = 0;
    *((_OWORD *)v12 - 1) = *(_OWORD *)&v5[v10 - 16];
    v10 -= 176;
  }
  while (&v5[v10] != v3);
  char v16 = *(char **)a1;
  uint64_t v3 = *(char **)(a1 + 8);
  *(void *)a1 = &v9[v10];
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v8;
  if (v3 != v16)
  {
    do
    {
      v3 -= 176;
      sub_9F58F0(v2, v3);
    }
    while (v3 != v16);
    uint64_t v3 = v16;
  }
  if (v3)
  {
LABEL_10:
    operator delete(v3);
  }
}

long long *sub_CD2CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = (long long *)a2;
  uint64_t v7 = *(long long **)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  uint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a2 - *(void *)a1) >> 4);
  unint64_t v9 = *(void *)(a1 + 16);
  if (v6 >= v9)
  {
    unint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v6 - (void)v7) >> 4) + 1;
    if (v10 > 0x1745D1745D1745DLL) {
      sub_2E00();
    }
    unint64_t v11 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v9 - (void)v7) >> 4);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10) {
      uint64_t v12 = v10;
    }
    if (v11 >= 0xBA2E8BA2E8BA2ELL) {
      unint64_t v13 = 0x1745D1745D1745DLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v25 = a1 + 16;
    if (v13)
    {
      if (v13 > 0x1745D1745D1745DLL) {
        sub_188D718();
      }
      long long v14 = (char *)operator new(176 * v13);
    }
    else
    {
      long long v14 = 0;
    }
    long long __p = v14;
    unsigned int v22 = &v14[176 * v8];
    unsigned int v23 = v22;
    int v24 = &v14[176 * v13];
    sub_CD3244((uint64_t)&__p, (long long *)a3);
    long long v4 = sub_CD3570((long long **)a1, &__p, v4);
    int v19 = v22;
    for (uint64_t i = v23; v23 != v19; uint64_t i = v23)
    {
      unsigned int v23 = i - 176;
      sub_9F58F0(v25, (void *)i - 22);
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (a2 == v6)
  {
    long long v15 = *(_OWORD *)a3;
    *(void *)(a2 + 14) = *(void *)(a3 + 14);
    *(_OWORD *)a2 = v15;
    char v16 = &v7[11 * v8];
    *((void *)v16 + 4) = 0;
    *((void *)v16 + 5) = 0;
    *((void *)v16 + 3) = 0;
    *(long long *)((char *)v16 + 24) = *(_OWORD *)(a3 + 24);
    *((void *)v16 + 5) = *(void *)(a3 + 40);
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *((void *)v16 + 6) = 0;
    *((void *)v16 + 7) = 0;
    *((void *)v16 + 8) = 0;
    v16[3] = *(_OWORD *)(a3 + 48);
    *((void *)v16 + 8) = *(void *)(a3 + 64);
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    *((void *)v16 + 9) = 0;
    *((void *)v16 + 10) = 0;
    *((void *)v16 + 11) = 0;
    *(long long *)((char *)v16 + 72) = *(_OWORD *)(a3 + 72);
    *((void *)v16 + 11) = *(void *)(a3 + 88);
    *(void *)(a3 + 72) = 0;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    *((void *)v16 + 12) = 0;
    *((void *)v16 + 13) = 0;
    *((void *)v16 + 14) = 0;
    v16[6] = *(_OWORD *)(a3 + 96);
    *((void *)v16 + 14) = *(void *)(a3 + 112);
    *(void *)(a3 + 96) = 0;
    *(void *)(a3 + 104) = 0;
    *(void *)(a3 + 112) = 0;
    uint64_t v17 = *(void *)(a3 + 120);
    *(void *)((char *)v16 + 125) = *(void *)(a3 + 125);
    *((void *)v16 + 15) = v17;
    *((void *)v16 + 18) = 0;
    *((void *)v16 + 19) = 0;
    *((void *)v16 + 17) = 0;
    *(long long *)((char *)v16 + 136) = *(_OWORD *)(a3 + 136);
    *((void *)v16 + 19) = *(void *)(a3 + 152);
    *(void *)(a3 + 136) = 0;
    *(void *)(a3 + 144) = 0;
    *(void *)(a3 + 152) = 0;
    v16[10] = *(_OWORD *)(a3 + 160);
    *(void *)(a1 + 8) = a2 + 176;
  }
  else
  {
    sub_CD2F70(a1, a2, v6, a2 + 176);
    sub_CD30D0((uint64_t)v4, (long long *)a3);
  }
  return v4;
}

void sub_CD2F5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A14D44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_CD2F70(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 8);
  uint64_t v5 = (long long *)(a2 + v4 - a4);
  for (uint64_t i = v4; (unint64_t)v5 < a3; v5 += 11)
  {
    long long v7 = *v5;
    *(void *)(i + 14) = *(void *)((char *)v5 + 14);
    *(_OWORD *)uint64_t i = v7;
    *(void *)(i + 32) = 0;
    *(void *)(i + 40) = 0;
    *(void *)(i + 24) = 0;
    *(_OWORD *)(i + 24) = *(long long *)((char *)v5 + 24);
    *(void *)(i + 40) = *((void *)v5 + 5);
    *((void *)v5 + 3) = 0;
    *((void *)v5 + 4) = 0;
    *((void *)v5 + 5) = 0;
    *(void *)(i + 48) = 0;
    *(void *)(i + 56) = 0;
    *(void *)(i + 64) = 0;
    *(_OWORD *)(i + 48) = v5[3];
    *(void *)(i + 64) = *((void *)v5 + 8);
    *((void *)v5 + 6) = 0;
    *((void *)v5 + 7) = 0;
    *((void *)v5 + 8) = 0;
    *(void *)(i + 72) = 0;
    *(void *)(i + 80) = 0;
    *(void *)(i + 88) = 0;
    *(_OWORD *)(i + 72) = *(long long *)((char *)v5 + 72);
    *(void *)(i + 88) = *((void *)v5 + 11);
    *((void *)v5 + 9) = 0;
    *((void *)v5 + 10) = 0;
    *((void *)v5 + 11) = 0;
    *(void *)(i + 96) = 0;
    *(void *)(i + 104) = 0;
    *(void *)(i + 112) = 0;
    *(_OWORD *)(i + 96) = v5[6];
    *(void *)(i + 112) = *((void *)v5 + 14);
    *((void *)v5 + 12) = 0;
    *((void *)v5 + 13) = 0;
    *((void *)v5 + 14) = 0;
    uint64_t v8 = *((void *)v5 + 15);
    *(void *)(i + 125) = *(void *)((char *)v5 + 125);
    *(void *)(i + 120) = v8;
    *(void *)(i + 144) = 0;
    *(void *)(i + 152) = 0;
    *(void *)(i + 136) = 0;
    *(_OWORD *)(i + 136) = *(long long *)((char *)v5 + 136);
    *(void *)(i + 152) = *((void *)v5 + 19);
    *((void *)v5 + 17) = 0;
    *((void *)v5 + 18) = 0;
    *((void *)v5 + 19) = 0;
    *(_OWORD *)(i + 160) = v5[10];
    i += 176;
  }
  *(void *)(result + 8) = i;
  if (v4 != a4)
  {
    uint64_t v9 = v4 - 176;
    uint64_t v10 = 16 * ((v4 - a4) >> 4);
    uint64_t v11 = a2 - 176;
    do
    {
      unint64_t result = sub_CD30D0(v9, (long long *)(v11 + v10));
      v9 -= 176;
      v10 -= 176;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_CD30D0(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 14) = *(void *)((char *)a2 + 14);
  *(_OWORD *)a1 = v4;
  uint64_t v6 = a1 + 24;
  uint64_t v5 = *(void ***)(a1 + 24);
  if (v5)
  {
    sub_9F59BC(a1 + 24, v5);
    operator delete(*(void **)v6);
    *(void *)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    *(void *)(v6 + 16) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  long long v7 = *(void **)(a1 + 48);
  if (v7)
  {
    *(void *)(a1 + 56) = v7;
    operator delete(v7);
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  uint64_t v8 = *(void **)(a1 + 72);
  if (v8)
  {
    *(void *)(a1 + 80) = v8;
    operator delete(v8);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(long long *)((char *)a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 11) = 0;
  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  uint64_t v10 = *((void *)a2 + 15);
  uint64_t v11 = *(void **)(a1 + 136);
  *(void *)(a1 + 125) = *(void *)((char *)a2 + 125);
  *(void *)(a1 + 120) = v10;
  if (v11)
  {
    *(void *)(a1 + 144) = v11;
    operator delete(v11);
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(long long *)((char *)a2 + 136);
  *(void *)(a1 + 152) = *((void *)a2 + 19);
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  *((void *)a2 + 19) = 0;
  *(_OWORD *)(a1 + 160) = a2[10];
  return a1;
}

__n128 sub_CD3244(uint64_t a1, long long *a2)
{
  long long v4 = *(_OWORD **)(a1 + 16);
  if (v4 != *(_OWORD **)(a1 + 24)) {
    goto LABEL_22;
  }
  uint64_t v6 = *(unsigned char **)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 <= *(void *)a1)
  {
    unint64_t v12 = 0x5D1745D1745D1746 * (((char *)v4 - v6) >> 4);
    if (v4 == (_OWORD *)v6) {
      unint64_t v12 = 1;
    }
    if (v12 >= 0x1745D1745D1745ELL) {
      sub_188D718();
    }
    uint64_t v13 = *(void *)(a1 + 32);
    unint64_t v14 = v12 >> 2;
    uint64_t v15 = 176 * v12;
    char v16 = (char *)operator new(176 * v12);
    uint64_t v17 = &v16[176 * v14];
    BOOL v18 = &v16[v15];
    if (v4 == (_OWORD *)v5)
    {
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v17;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = v18;
      if (!v6) {
        goto LABEL_19;
      }
    }
    else
    {
      int v19 = (char *)v4 + (void)v17 - v5;
      uint64_t v20 = 176 * v14;
      do
      {
        uint64_t v21 = &v16[v20];
        long long v22 = *(_OWORD *)v5;
        *(void *)(v21 + 14) = *(void *)(v5 + 14);
        *(_OWORD *)uint64_t v21 = v22;
        *(_OWORD *)(v21 + 24) = *(_OWORD *)(v5 + 24);
        *((void *)v21 + 5) = *(void *)(v5 + 40);
        *(void *)(v5 + 24) = 0;
        *(void *)(v5 + 32) = 0;
        *(void *)(v5 + 40) = 0;
        *((_OWORD *)v21 + 3) = *(_OWORD *)(v5 + 48);
        *((void *)v21 + 8) = *(void *)(v5 + 64);
        *(void *)(v5 + 48) = 0;
        *(void *)(v5 + 56) = 0;
        *(void *)(v5 + 64) = 0;
        *(_OWORD *)(v21 + 72) = *(_OWORD *)(v5 + 72);
        *((void *)v21 + 11) = *(void *)(v5 + 88);
        *(void *)(v5 + 72) = 0;
        *(void *)(v5 + 80) = 0;
        *(void *)(v5 + 88) = 0;
        *((_OWORD *)v21 + 6) = *(_OWORD *)(v5 + 96);
        *((void *)v21 + 14) = *(void *)(v5 + 112);
        *(void *)(v5 + 96) = 0;
        *(void *)(v5 + 104) = 0;
        *(void *)(v5 + 112) = 0;
        uint64_t v23 = *(void *)(v5 + 120);
        *(void *)(v21 + 125) = *(void *)(v5 + 125);
        *((void *)v21 + 15) = v23;
        *(_OWORD *)(v21 + 136) = *(_OWORD *)(v5 + 136);
        *((void *)v21 + 19) = *(void *)(v5 + 152);
        *(void *)(v5 + 136) = 0;
        *(void *)(v5 + 144) = 0;
        *(void *)(v5 + 152) = 0;
        *((_OWORD *)v21 + 10) = *(_OWORD *)(v5 + 160);
        v20 += 176;
        v5 += 176;
      }
      while (v21 + 176 != v19);
      uint64_t v6 = *(unsigned char **)a1;
      int v24 = *(void **)(a1 + 8);
      uint64_t v25 = *(void **)(a1 + 16);
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v17;
      *(void *)(a1 + 16) = v19;
      *(void *)(a1 + 24) = v18;
      while (v25 != v24)
      {
        v25 -= 22;
        sub_9F58F0(v13, v25);
      }
      if (!v6) {
        goto LABEL_19;
      }
    }
    operator delete(v6);
LABEL_19:
    long long v4 = *(_OWORD **)(a1 + 16);
    goto LABEL_22;
  }
  uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *(void *)a1) >> 4);
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -v9;
  if ((_OWORD *)v5 == v4)
  {
    uint64_t v11 = (_OWORD *)(v5 - 176 * v9);
  }
  else
  {
    do
    {
      sub_CD30D0(v5 + 176 * v10, (long long *)v5);
      v5 += 176;
    }
    while ((_OWORD *)v5 != v4);
    long long v4 = *(_OWORD **)(a1 + 8);
    uint64_t v11 = (_OWORD *)(v5 + 176 * v10);
  }
  *(void *)(a1 + 8) = &v4[11 * v10];
  *(void *)(a1 + 16) = v11;
  long long v4 = v11;
LABEL_22:
  long long v26 = *a2;
  *(void *)((char *)v4 + 14) = *(void *)((char *)a2 + 14);
  _OWORD *v4 = v26;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 3) = 0;
  *(_OWORD *)((char *)v4 + 24) = *(long long *)((char *)a2 + 24);
  *((void *)v4 + 5) = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)v4 + 6) = 0;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 8) = 0;
  v4[3] = a2[3];
  *((void *)v4 + 8) = *((void *)a2 + 8);
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)v4 + 9) = 0;
  *((void *)v4 + 10) = 0;
  *((void *)v4 + 11) = 0;
  *(_OWORD *)((char *)v4 + 72) = *(long long *)((char *)a2 + 72);
  *((void *)v4 + 11) = *((void *)a2 + 11);
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 11) = 0;
  *((void *)v4 + 12) = 0;
  *((void *)v4 + 13) = 0;
  *((void *)v4 + 14) = 0;
  v4[6] = a2[6];
  *((void *)v4 + 14) = *((void *)a2 + 14);
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  uint64_t v27 = *((void *)a2 + 15);
  *(void *)((char *)v4 + 125) = *(void *)((char *)a2 + 125);
  *((void *)v4 + 15) = v27;
  *((void *)v4 + 18) = 0;
  *((void *)v4 + 19) = 0;
  *((void *)v4 + 17) = 0;
  *(_OWORD *)((char *)v4 + 136) = *(long long *)((char *)a2 + 136);
  *((void *)v4 + 19) = *((void *)a2 + 19);
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  *((void *)a2 + 19) = 0;
  __n128 result = (__n128)a2[10];
  v4[10] = result;
  *(void *)(a1 + 16) += 176;
  return result;
}

long long *sub_CD3570(long long **a1, void *a2, long long *a3)
{
  __n128 result = (long long *)a2[1];
  unint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = &result[v7];
      uint64_t v9 = &a3[v7];
      long long v10 = a3[v7 - 11];
      *(void *)((char *)v8 - 162) = *(void *)((char *)&a3[v7 - 10] - 2);
      *(v8 - 11) = v10;
      *((void *)v8 - 18) = 0;
      *((void *)v8 - 17) = 0;
      *((void *)v8 - 19) = 0;
      *(long long *)((char *)v8 - 152) = *(long long *)((char *)&a3[v7 - 9] - 8);
      *((void *)v8 - 17) = *((void *)&a3[v7 - 8] - 1);
      *((void *)v9 - 19) = 0;
      *((void *)v9 - 18) = 0;
      *((void *)v9 - 17) = 0;
      *((void *)v8 - 16) = 0;
      *((void *)v8 - 15) = 0;
      *((void *)v8 - 14) = 0;
      *(v8 - 8) = a3[v7 - 8];
      *((void *)v8 - 14) = *(void *)&a3[v7 - 7];
      *((void *)v9 - 16) = 0;
      *((void *)v9 - 15) = 0;
      *((void *)v9 - 14) = 0;
      *((void *)v8 - 13) = 0;
      *((void *)v8 - 12) = 0;
      *((void *)v8 - 11) = 0;
      *(long long *)((char *)v8 - 104) = *(long long *)((char *)&a3[v7 - 6] - 8);
      *((void *)v8 - 11) = *((void *)&a3[v7 - 5] - 1);
      *((void *)v9 - 13) = 0;
      *((void *)v9 - 12) = 0;
      *((void *)v9 - 11) = 0;
      *((void *)v8 - 10) = 0;
      *((void *)v8 - 9) = 0;
      *((void *)v8 - 8) = 0;
      *(v8 - 5) = a3[v7 - 5];
      *((void *)v8 - 8) = *(void *)&a3[v7 - 4];
      *((void *)v9 - 10) = 0;
      *((void *)v9 - 9) = 0;
      *((void *)v9 - 8) = 0;
      uint64_t v11 = *((void *)&a3[v7 - 3] - 1);
      *(void *)((char *)v8 - 51) = *(void *)((char *)&a3[v7 - 3] - 3);
      *((void *)v8 - 4) = 0;
      *((void *)v8 - 3) = 0;
      *((void *)v8 - 5) = 0;
      *((void *)v8 - 7) = v11;
      *(long long *)((char *)v8 - 40) = *(long long *)((char *)&a3[v7 - 2] - 8);
      *((void *)v8 - 3) = *((void *)&a3[v7 - 1] - 1);
      *((void *)v9 - 5) = 0;
      *((void *)v9 - 4) = 0;
      *((void *)v9 - 3) = 0;
      *(v8 - 1) = a3[v7 - 1];
      v7 -= 11;
    }
    while (&a3[v7] != v5);
    uint64_t v6 = &result[v7];
  }
  a2[1] = v6;
  unint64_t v12 = a1[1];
  uint64_t v13 = a2[2];
  if (v12 != a3)
  {
    do
    {
      long long v14 = *a3;
      *(void *)(v13 + 14) = *(void *)((char *)a3 + 14);
      *(_OWORD *)uint64_t v13 = v14;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 40) = 0;
      *(void *)(v13 + 24) = 0;
      *(_OWORD *)(v13 + 24) = *(long long *)((char *)a3 + 24);
      *(void *)(v13 + 40) = *((void *)a3 + 5);
      *((void *)a3 + 3) = 0;
      *((void *)a3 + 4) = 0;
      *((void *)a3 + 5) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(void *)(v13 + 64) = 0;
      *(_OWORD *)(v13 + 48) = a3[3];
      *(void *)(v13 + 64) = *((void *)a3 + 8);
      *((void *)a3 + 6) = 0;
      *((void *)a3 + 7) = 0;
      *((void *)a3 + 8) = 0;
      *(void *)(v13 + 72) = 0;
      *(void *)(v13 + 80) = 0;
      *(void *)(v13 + 88) = 0;
      *(_OWORD *)(v13 + 72) = *(long long *)((char *)a3 + 72);
      *(void *)(v13 + 88) = *((void *)a3 + 11);
      *((void *)a3 + 9) = 0;
      *((void *)a3 + 10) = 0;
      *((void *)a3 + 11) = 0;
      *(void *)(v13 + 96) = 0;
      *(void *)(v13 + 104) = 0;
      *(void *)(v13 + 112) = 0;
      *(_OWORD *)(v13 + 96) = a3[6];
      *(void *)(v13 + 112) = *((void *)a3 + 14);
      *((void *)a3 + 12) = 0;
      *((void *)a3 + 13) = 0;
      *((void *)a3 + 14) = 0;
      uint64_t v15 = *((void *)a3 + 15);
      *(void *)(v13 + 125) = *(void *)((char *)a3 + 125);
      *(void *)(v13 + 120) = v15;
      *(void *)(v13 + 144) = 0;
      *(void *)(v13 + 152) = 0;
      *(void *)(v13 + 136) = 0;
      *(_OWORD *)(v13 + 136) = *(long long *)((char *)a3 + 136);
      *(void *)(v13 + 152) = *((void *)a3 + 19);
      *((void *)a3 + 17) = 0;
      *((void *)a3 + 18) = 0;
      *((void *)a3 + 19) = 0;
      *(_OWORD *)(v13 + 160) = a3[10];
      v13 += 176;
      a3 += 11;
    }
    while (a3 != v12);
    uint64_t v6 = (long long *)a2[1];
  }
  a2[2] = v13;
  char v16 = *a1;
  *a1 = v6;
  a2[1] = v16;
  uint64_t v17 = a1[1];
  a1[1] = (long long *)a2[2];
  a2[2] = v17;
  BOOL v18 = a1[2];
  a1[2] = (long long *)a2[3];
  a2[3] = v18;
  *a2 = a2[1];
  return result;
}

void sub_CD379C(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = *a1;
  if (a2 > (uint64_t)(v2 - *a1) >> 6)
  {
    if (a2 >> 58) {
      sub_2E00();
    }
    unint64_t v5 = a1[1];
    unint64_t v6 = a2 << 6;
    unint64_t v15 = 0;
    char v16 = a1 + 2;
    uint64_t v7 = (char *)operator new(a2 << 6);
    uint64_t v8 = &v7[v5 - v3];
    if (v5 == v3)
    {
      int64x2_t v12 = vdupq_n_s64(v3);
      uint64_t v9 = &v7[v5 - v3];
    }
    else
    {
      uint64_t v9 = &v7[v5 - v3];
      do
      {
        long long v10 = *(_OWORD *)(v5 - 64);
        v5 -= 64;
        *((_OWORD *)v9 - 4) = v10;
        v9 -= 64;
        *((void *)v9 + 2) = *(void *)(v5 + 16);
        *(void *)unint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        *(void *)(v5 + 16) = 0;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)(v5 + 24);
        *((void *)v9 + 5) = *(void *)(v5 + 40);
        *(void *)(v5 + 24) = 0;
        *(void *)(v5 + 32) = 0;
        *(void *)(v5 + 40) = 0;
        uint64_t v11 = *(void *)(v5 + 48);
        *(void *)(v9 + 54) = *(void *)(v5 + 54);
        *((void *)v9 + 6) = v11;
      }
      while (v5 != v3);
      int64x2_t v12 = *(int64x2_t *)a1;
      unint64_t v2 = a1[2];
    }
    *a1 = (unint64_t)v9;
    a1[1] = (unint64_t)v8;
    int64x2_t v14 = v12;
    a1[2] = (unint64_t)&v7[v6];
    unint64_t v15 = v2;
    long long __p = (void *)v12.i64[0];
    sub_A0F7E4((uint64_t)&__p, v12.i64[0]);
    if (__p) {
      operator delete(__p);
    }
  }
}

char *sub_CD38AC(char **a1, char *a2, uint64_t a3)
{
  long long v4 = a2;
  uint64_t v7 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v8 = (a2 - *a1) >> 6;
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v20 = ((uint64_t)(v6 - (void)v7) >> 6) + 1;
    if (v20 >> 58) {
      sub_2E00();
    }
    uint64_t v21 = v9 - (void)v7;
    if (v21 >> 5 > v20) {
      unint64_t v20 = v21 >> 5;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v22 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    int v42 = a1 + 2;
    if (v22)
    {
      if (v22 >> 58) {
        sub_188D718();
      }
      uint64_t v23 = (char *)operator new(v22 << 6);
    }
    else
    {
      uint64_t v23 = 0;
    }
    long long __p = v23;
    int v39 = &v23[64 * v8];
    uint64_t v40 = v39;
    int v41 = &v23[64 * v22];
    sub_CD3C54((uint64_t)&__p, a3);
    long long v26 = v39;
    uint64_t v27 = *a1;
    long long v28 = v39;
    if (*a1 != v4)
    {
      long long v28 = v39;
      BOOL v29 = v4;
      do
      {
        *((void *)v28 - 8) = 0;
        *((void *)v28 - 7) = 0;
        v28 -= 64;
        *((void *)v28 + 2) = 0;
        long long v30 = *((_OWORD *)v29 - 4);
        v29 -= 64;
        *(_OWORD *)long long v28 = v30;
        *((void *)v28 + 2) = *((void *)v29 + 2);
        *(void *)BOOL v29 = 0;
        *((void *)v29 + 1) = 0;
        *((void *)v29 + 2) = 0;
        *((void *)v28 + 3) = 0;
        *((void *)v28 + 4) = 0;
        *((void *)v28 + 5) = 0;
        *(_OWORD *)(v28 + 24) = *(_OWORD *)(v29 + 24);
        *((void *)v28 + 5) = *((void *)v29 + 5);
        *((void *)v29 + 3) = 0;
        *((void *)v29 + 4) = 0;
        *((void *)v29 + 5) = 0;
        uint64_t v31 = *((void *)v29 + 6);
        *(void *)(v28 + 54) = *(void *)(v29 + 54);
        *((void *)v28 + 6) = v31;
      }
      while (v29 != v27);
    }
    int v39 = v28;
    int v32 = a1[1];
    uint64_t v33 = v40;
    if (v32 != v4)
    {
      do
      {
        *uint64_t v33 = 0;
        v33[1] = 0;
        v33[2] = 0;
        *(_OWORD *)uint64_t v33 = *(_OWORD *)v4;
        v33[2] = *((void *)v4 + 2);
        *(void *)long long v4 = 0;
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 2) = 0;
        v33[3] = 0;
        v33[4] = 0;
        v33[5] = 0;
        *(_OWORD *)(v33 + 3) = *(_OWORD *)(v4 + 24);
        v33[5] = *((void *)v4 + 5);
        *((void *)v4 + 3) = 0;
        *((void *)v4 + 4) = 0;
        *((void *)v4 + 5) = 0;
        uint64_t v34 = *((void *)v4 + 6);
        *(void *)((char *)v33 + 54) = *(void *)(v4 + 54);
        v33[6] = v34;
        v33 += 8;
        v4 += 64;
      }
      while (v4 != v32);
      long long v28 = v39;
      long long v4 = a1[1];
    }
    int v35 = *a1;
    *a1 = v28;
    a1[1] = (char *)v33;
    int v36 = a1[2];
    a1[2] = v41;
    uint64_t v40 = v4;
    int v41 = v36;
    long long __p = v35;
    int v39 = v35;
    sub_A0F7E4((uint64_t)&__p, (uint64_t)v35);
    if (__p) {
      operator delete(__p);
    }
    return v26;
  }
  else if (a2 == (char *)v6)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((void *)a2 + 2) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    int v24 = &v7[64 * v8];
    *((void *)v24 + 3) = 0;
    *((void *)v24 + 4) = 0;
    *((void *)v24 + 5) = 0;
    *(_OWORD *)(v24 + 24) = *(_OWORD *)(a3 + 24);
    *((void *)v24 + 5) = *(void *)(a3 + 40);
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    uint64_t v25 = *(void *)(a3 + 48);
    *(void *)(v24 + 54) = *(void *)(a3 + 54);
    *((void *)v24 + 6) = v25;
    a1[1] = a2 + 64;
  }
  else
  {
    long long v10 = a1[1];
    if (v6 >= 0x40)
    {
      unint64_t v11 = v6 - 64;
      long long v10 = a1[1];
      do
      {
        *(void *)long long v10 = 0;
        *((void *)v10 + 1) = 0;
        *((void *)v10 + 2) = 0;
        *(_OWORD *)long long v10 = *(_OWORD *)v11;
        *((void *)v10 + 2) = *(void *)(v11 + 16);
        *(void *)unint64_t v11 = 0;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        *((void *)v10 + 3) = 0;
        *((void *)v10 + 4) = 0;
        *((void *)v10 + 5) = 0;
        *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 24);
        *((void *)v10 + 5) = *(void *)(v11 + 40);
        *(void *)(v11 + 24) = 0;
        *(void *)(v11 + 32) = 0;
        *(void *)(v11 + 40) = 0;
        uint64_t v12 = *(void *)(v11 + 48);
        *(void *)(v10 + 54) = *(void *)(v11 + 54);
        *((void *)v10 + 6) = v12;
        v10 += 64;
        v11 += 64;
      }
      while (v11 < v6);
    }
    a1[1] = v10;
    sub_CD3E2C((uint64_t)&__p, a2, (void *)(v6 - 64), v6);
    uint64_t v13 = *(void **)v4;
    if (*(void *)v4)
    {
      int64x2_t v14 = (void *)*((void *)v4 + 1);
      unint64_t v15 = *(void **)v4;
      if (v14 != v13)
      {
        do
          int64x2_t v14 = sub_9BEAA8(v14 - 18);
        while (v14 != v13);
        unint64_t v15 = *(void **)v4;
      }
      *((void *)v4 + 1) = v13;
      operator delete(v15);
      *(void *)long long v4 = 0;
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 2) = 0;
    }
    *(_OWORD *)long long v4 = *(_OWORD *)a3;
    *((void *)v4 + 2) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    char v16 = &v7[64 * v8];
    BOOL v18 = v16 + 24;
    uint64_t v17 = (void *)*((void *)v16 + 3);
    if (v17)
    {
      *((void *)v16 + 4) = v17;
      operator delete(v17);
      *BOOL v18 = 0;
      *((void *)v16 + 4) = 0;
      *((void *)v16 + 5) = 0;
    }
    *(_OWORD *)BOOL v18 = *(_OWORD *)(a3 + 24);
    *((void *)v16 + 5) = *(void *)(a3 + 40);
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    uint64_t v19 = *(void *)(a3 + 48);
    *(void *)(v16 + 54) = *(void *)(a3 + 54);
    *((void *)v16 + 6) = v19;
  }
  return v4;
}

void sub_CD3C40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A0F7AC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_CD3C54(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)(a1 + 16);
  if (v4 == *(void **)(a1 + 24))
  {
    unint64_t v6 = *(unsigned char **)a1;
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 <= *(void *)a1)
    {
      if (v4 == (void *)v6) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = ((char *)v4 - v6) >> 5;
      }
      uint64_t v23 = *(void *)(a1 + 32);
      if (v11 >> 58) {
        sub_188D718();
      }
      uint64_t v12 = (char *)operator new(v11 << 6);
      uint64_t v13 = &v12[64 * (v11 >> 2)];
      if (v4 == (void *)v5)
      {
        int64x2_t v17 = vdupq_n_s64((unint64_t)v4);
        int64x2_t v14 = &v12[64 * (v11 >> 2)];
      }
      else
      {
        int64x2_t v14 = (char *)v4 + (void)v13 - v5;
        unint64_t v15 = &v12[64 * (v11 >> 2)];
        do
        {
          *(_OWORD *)unint64_t v15 = *(_OWORD *)v5;
          *((void *)v15 + 2) = *(void *)(v5 + 16);
          *(void *)unint64_t v5 = 0;
          *(void *)(v5 + 8) = 0;
          *(void *)(v5 + 16) = 0;
          *(_OWORD *)(v15 + 24) = *(_OWORD *)(v5 + 24);
          *((void *)v15 + 5) = *(void *)(v5 + 40);
          *(void *)(v5 + 24) = 0;
          *(void *)(v5 + 32) = 0;
          *(void *)(v5 + 40) = 0;
          uint64_t v16 = *(void *)(v5 + 48);
          *(void *)(v15 + 54) = *(void *)(v5 + 54);
          *((void *)v15 + 6) = v16;
          v15 += 64;
          v5 += 64;
        }
        while (v15 != v14);
        unint64_t v6 = *(unsigned char **)a1;
        int64x2_t v17 = *(int64x2_t *)(a1 + 8);
        long long v4 = *(void **)(a1 + 24);
      }
      long long __p = v6;
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v13;
      int64x2_t v21 = v17;
      *(void *)(a1 + 16) = v14;
      *(void *)(a1 + 24) = &v12[64 * v11];
      unint64_t v22 = v4;
      sub_A0F7E4((uint64_t)&__p, v17.i64[0]);
      if (__p) {
        operator delete(__p);
      }
      long long v4 = *(void **)(a1 + 16);
    }
    else
    {
      uint64_t v7 = (uint64_t)(v5 - *(void *)a1) >> 6;
      if (v7 >= -1) {
        unint64_t v8 = v7 + 1;
      }
      else {
        unint64_t v8 = v7 + 2;
      }
      unint64_t v9 = v8 >> 1 << 6;
      sub_CD4004((uint64_t)&__p, *(void *)(a1 + 8), (uint64_t)v4, (void *)(v5 - v9));
      long long v4 = v10;
      *(void *)(a1 + 8) -= v9;
      *(void *)(a1 + 16) = v10;
    }
  }
  void *v4 = 0;
  v4[1] = 0;
  void v4[2] = 0;
  *(_OWORD *)long long v4 = *(_OWORD *)a2;
  void v4[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v4 + 3) = result;
  v4[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v19 = *(void *)(a2 + 48);
  *(void *)((char *)v4 + 54) = *(void *)(a2 + 54);
  v4[6] = v19;
  *(void *)(a1 + 16) += 64;
  return result;
}

void *sub_CD3E2C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    uint64_t v8 = a4;
    do
    {
      unint64_t v11 = *(char **)(v8 - 64);
      v8 -= 64;
      long long v10 = v11;
      if (v11)
      {
        uint64_t v12 = *(char **)(v4 - 56);
        uint64_t v13 = v10;
        if (v12 != v10)
        {
          do
          {
            unint64_t v15 = (void *)*((void *)v12 - 5);
            if (v15)
            {
              *((void *)v12 - 4) = v15;
              operator delete(v15);
            }
            uint64_t v16 = (void *)*((void *)v12 - 8);
            if (v16)
            {
              *((void *)v12 - 7) = v16;
              operator delete(v16);
            }
            int64x2_t v17 = (void *)*((void *)v12 - 11);
            if (v17)
            {
              *((void *)v12 - 10) = v17;
              operator delete(v17);
            }
            BOOL v18 = (void *)*((void *)v12 - 14);
            if (v18)
            {
              *((void *)v12 - 13) = v18;
              operator delete(v18);
            }
            uint64_t v19 = *((void *)v12 - 17);
            if (v19)
            {
              uint64_t v20 = *((void *)v12 - 16);
              int64x2_t v14 = (void *)*((void *)v12 - 17);
              if (v20 != v19)
              {
                uint64_t v21 = v20 - 1064;
                do
                {
                  int v23 = *(_DWORD *)(v21 + 1056);
                  if (v23 == 3)
                  {
                    sub_3AFFFC(v21);
                  }
                  else if (v23 == 1)
                  {
                    int v24 = *(void **)(v21 + 16);
                    if (v24)
                    {
                      *(void *)(v21 + 24) = v24;
                      operator delete(v24);
                    }
                  }
                  else if (!v23 && *(unsigned char *)(v21 + 28))
                  {
                    *(unsigned char *)(v21 + 28) = 0;
                  }
                  uint64_t v22 = v21 - 32;
                  v21 -= 1096;
                }
                while (v22 != v19);
                int64x2_t v14 = (void *)*((void *)v12 - 17);
              }
              *((void *)v12 - 16) = v19;
              operator delete(v14);
            }
            v12 -= 144;
          }
          while (v12 != v10);
          uint64_t v13 = *(char **)v8;
        }
        *(void *)(v4 - 56) = v10;
        operator delete(v13);
        *(void *)uint64_t v8 = 0;
        *(void *)(v8 + 8) = 0;
        *(void *)(v8 + 16) = 0;
      }
      uint64_t v25 = v7 - 8;
      *(_OWORD *)(v4 - 64) = *((_OWORD *)v7 - 4);
      *(void *)(v4 - 48) = *(v7 - 6);
      void *v25 = 0;
      v25[1] = 0;
      v25[2] = 0;
      long long v26 = *(void **)(v4 - 40);
      if (v26)
      {
        *(void *)(v4 - 32) = v26;
        operator delete(v26);
        *(void *)(v4 - 40) = 0;
        *(void *)(v4 - 32) = 0;
        *(void *)(v4 - 24) = 0;
      }
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v7 - 5);
      *(void *)(v4 - 24) = *(v7 - 3);
      *(v7 - 5) = 0;
      *(v7 - 4) = 0;
      *(v7 - 3) = 0;
      uint64_t v9 = *(v7 - 2);
      *(void *)(v4 - 10) = *(void *)((char *)v7 - 10);
      *(void *)(v4 - 16) = v9;
      uint64_t v4 = v8;
      v7 -= 8;
    }
    while (v25 != a2);
  }
  return a3;
}

uint64_t sub_CD4004(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      uint64_t v8 = (char *)*a4;
      if (*a4)
      {
        uint64_t v9 = (char *)a4[1];
        long long v10 = (char *)*a4;
        if (v9 != v8)
        {
          do
          {
            uint64_t v12 = (void *)*((void *)v9 - 5);
            if (v12)
            {
              *((void *)v9 - 4) = v12;
              operator delete(v12);
            }
            uint64_t v13 = (void *)*((void *)v9 - 8);
            if (v13)
            {
              *((void *)v9 - 7) = v13;
              operator delete(v13);
            }
            int64x2_t v14 = (void *)*((void *)v9 - 11);
            if (v14)
            {
              *((void *)v9 - 10) = v14;
              operator delete(v14);
            }
            unint64_t v15 = (void *)*((void *)v9 - 14);
            if (v15)
            {
              *((void *)v9 - 13) = v15;
              operator delete(v15);
            }
            uint64_t v16 = *((void *)v9 - 17);
            if (v16)
            {
              uint64_t v17 = *((void *)v9 - 16);
              unint64_t v11 = (void *)*((void *)v9 - 17);
              if (v17 != v16)
              {
                uint64_t v18 = v17 - 1064;
                do
                {
                  int v20 = *(_DWORD *)(v18 + 1056);
                  if (v20 == 3)
                  {
                    sub_3AFFFC(v18);
                  }
                  else if (v20 == 1)
                  {
                    uint64_t v21 = *(void **)(v18 + 16);
                    if (v21)
                    {
                      *(void *)(v18 + 24) = v21;
                      operator delete(v21);
                    }
                  }
                  else if (!v20 && *(unsigned char *)(v18 + 28))
                  {
                    *(unsigned char *)(v18 + 28) = 0;
                  }
                  uint64_t v19 = v18 - 32;
                  v18 -= 1096;
                }
                while (v19 != v16);
                unint64_t v11 = (void *)*((void *)v9 - 17);
              }
              *((void *)v9 - 16) = v16;
              operator delete(v11);
            }
            v9 -= 144;
          }
          while (v9 != v8);
          long long v10 = (char *)*a4;
        }
        a4[1] = v8;
        operator delete(v10);
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
      }
      *(_OWORD *)a4 = *(_OWORD *)v5;
      a4[2] = *(void *)(v5 + 16);
      *(void *)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
      uint64_t v22 = (void *)a4[3];
      if (v22)
      {
        a4[4] = v22;
        operator delete(v22);
        a4[3] = 0;
        a4[4] = 0;
        a4[5] = 0;
      }
      *(_OWORD *)(a4 + 3) = *(_OWORD *)(v5 + 24);
      a4[5] = *(void *)(v5 + 40);
      *(void *)(v5 + 24) = 0;
      *(void *)(v5 + 32) = 0;
      *(void *)(v5 + 40) = 0;
      uint64_t v7 = *(void *)(v5 + 48);
      *(void *)((char *)a4 + 54) = *(void *)(v5 + 54);
      a4[6] = v7;
      v5 += 64;
      a4 += 8;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_CD41C8(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(char **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= a2) {
    return;
  }
  if (a2 >= 0x1C71C71C71C71C8) {
    sub_2E00();
  }
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = 144 * a2;
  unint64_t v6 = (char *)operator new(144 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v9 = 0;
  do
  {
    long long v10 = &v8[v9];
    unint64_t v11 = &v4[v9];
    *((_DWORD *)v10 - 36) = *(_DWORD *)&v4[v9 - 144];
    *(_OWORD *)(v10 - 136) = *(_OWORD *)&v4[v9 - 136];
    *((void *)v10 - 15) = *(void *)&v4[v9 - 120];
    *((void *)v11 - 17) = 0;
    *((void *)v11 - 16) = 0;
    *((void *)v11 - 15) = 0;
    *((_OWORD *)v10 - 7) = *(_OWORD *)&v4[v9 - 112];
    *((void *)v10 - 12) = *(void *)&v4[v9 - 96];
    *((void *)v11 - 14) = 0;
    *((void *)v11 - 13) = 0;
    *((void *)v11 - 12) = 0;
    *(_OWORD *)(v10 - 88) = *(_OWORD *)&v4[v9 - 88];
    *((void *)v10 - 9) = *(void *)&v4[v9 - 72];
    *((void *)v11 - 11) = 0;
    *((void *)v11 - 10) = 0;
    *((void *)v11 - 9) = 0;
    *((_OWORD *)v10 - 4) = *(_OWORD *)&v4[v9 - 64];
    *((void *)v10 - 6) = *(void *)&v4[v9 - 48];
    *((void *)v11 - 8) = 0;
    *((void *)v11 - 7) = 0;
    *((void *)v11 - 6) = 0;
    *(_OWORD *)(v10 - 40) = *(_OWORD *)&v4[v9 - 40];
    *((void *)v10 - 3) = *(void *)&v4[v9 - 24];
    *((void *)v11 - 5) = 0;
    *((void *)v11 - 4) = 0;
    *((void *)v11 - 3) = 0;
    uint64_t v12 = *(void *)&v4[v9 - 16];
    *(void *)(v10 - 11) = *(void *)&v4[v9 - 11];
    *((void *)v10 - 2) = v12;
    v9 -= 144;
  }
  while (&v4[v9] != v2);
  uint64_t v13 = *(char **)a1;
  unint64_t v2 = *(char **)(a1 + 8);
  *(void *)a1 = &v8[v9];
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v13)
  {
    do
    {
      v2 -= 144;
      sub_9BEAA8(v2);
    }
    while (v2 != v13);
    unint64_t v2 = v13;
  }
  if (v2)
  {
LABEL_10:
    operator delete(v2);
  }
}

uint64_t sub_CD4370(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  unint64_t v8 = 0x8E38E38E38E38E39 * (((uint64_t)a2 - *a1) >> 4);
  unint64_t v9 = a1[2];
  if (v6 >= v9)
  {
    unint64_t v10 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v10 > 0x1C71C71C71C71C7) {
      sub_2E00();
    }
    unint64_t v11 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - v7) >> 4);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10) {
      uint64_t v12 = v10;
    }
    if (v11 >= 0xE38E38E38E38E3) {
      unint64_t v13 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v13 = v12;
    }
    int v24 = a1 + 2;
    if (v13)
    {
      if (v13 > 0x1C71C71C71C71C7) {
        sub_188D718();
      }
      int64x2_t v14 = (char *)operator new(144 * v13);
    }
    else
    {
      int64x2_t v14 = 0;
    }
    long long __p = v14;
    uint64_t v21 = &v14[144 * v8];
    uint64_t v22 = v21;
    int v23 = &v14[144 * v13];
    sub_CD490C((uint64_t)&__p, a3);
    uint64_t v4 = sub_CD4C0C(a1, &__p, v4);
    uint64_t v18 = v21;
    for (uint64_t i = v22; v22 != v18; uint64_t i = v22)
    {
      uint64_t v22 = i - 144;
      sub_9BEAA8((void *)i - 18);
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (a2 == (_DWORD *)v6)
  {
    *a2 = *(_DWORD *)a3;
    unint64_t v15 = (void *)(v7 + 144 * v8);
    v15[2] = 0;
    v15[3] = 0;
    v15[1] = 0;
    *(_OWORD *)(v15 + 1) = *(_OWORD *)(a3 + 8);
    v15[3] = *(void *)(a3 + 24);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    v15[4] = 0;
    v15[5] = 0;
    v15[6] = 0;
    *((_OWORD *)v15 + 2) = *(_OWORD *)(a3 + 32);
    v15[6] = *(void *)(a3 + 48);
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    v15[7] = 0;
    void v15[8] = 0;
    v15[9] = 0;
    *(_OWORD *)(v15 + 7) = *(_OWORD *)(a3 + 56);
    v15[9] = *(void *)(a3 + 72);
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    v15[10] = 0;
    v15[11] = 0;
    v15[12] = 0;
    *((_OWORD *)v15 + 5) = *(_OWORD *)(a3 + 80);
    v15[12] = *(void *)(a3 + 96);
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 96) = 0;
    v15[13] = 0;
    v15[14] = 0;
    v15[15] = 0;
    *(_OWORD *)(v15 + 13) = *(_OWORD *)(a3 + 104);
    v15[15] = *(void *)(a3 + 120);
    *(void *)(a3 + 104) = 0;
    *(void *)(a3 + 112) = 0;
    *(void *)(a3 + 120) = 0;
    uint64_t v16 = *(void *)(a3 + 128);
    *(void *)((char *)v15 + 133) = *(void *)(a3 + 133);
    v15[16] = v16;
    a1[1] = (uint64_t)(a2 + 36);
  }
  else
  {
    sub_CD45E8((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)(a2 + 36));
    sub_CD4738(v4, a3);
  }
  return v4;
}

void sub_CD45D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A0F5CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_CD45E8(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 8);
  unint64_t v5 = a2 + v4 - a4;
  for (uint64_t i = v4; v5 < a3; v5 += 144)
  {
    *(_DWORD *)uint64_t i = *(_DWORD *)v5;
    *(void *)(i + 16) = 0;
    *(void *)(i + 24) = 0;
    *(void *)(i + 8) = 0;
    *(_OWORD *)(i + 8) = *(_OWORD *)(v5 + 8);
    *(void *)(i + 24) = *(void *)(v5 + 24);
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
    *(void *)(v5 + 24) = 0;
    *(void *)(i + 32) = 0;
    *(void *)(i + 40) = 0;
    *(void *)(i + 48) = 0;
    *(_OWORD *)(i + 32) = *(_OWORD *)(v5 + 32);
    *(void *)(i + 48) = *(void *)(v5 + 48);
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 40) = 0;
    *(void *)(v5 + 48) = 0;
    *(void *)(i + 56) = 0;
    *(void *)(i + 64) = 0;
    *(void *)(i + 72) = 0;
    *(_OWORD *)(i + 56) = *(_OWORD *)(v5 + 56);
    *(void *)(i + 72) = *(void *)(v5 + 72);
    *(void *)(v5 + 56) = 0;
    *(void *)(v5 + 64) = 0;
    *(void *)(v5 + 72) = 0;
    *(void *)(i + 80) = 0;
    *(void *)(i + 88) = 0;
    *(void *)(i + 96) = 0;
    *(_OWORD *)(i + 80) = *(_OWORD *)(v5 + 80);
    *(void *)(i + 96) = *(void *)(v5 + 96);
    *(void *)(v5 + 80) = 0;
    *(void *)(v5 + 88) = 0;
    *(void *)(v5 + 96) = 0;
    *(void *)(i + 104) = 0;
    *(void *)(i + 112) = 0;
    *(void *)(i + 120) = 0;
    *(_OWORD *)(i + 104) = *(_OWORD *)(v5 + 104);
    *(void *)(i + 120) = *(void *)(v5 + 120);
    *(void *)(v5 + 104) = 0;
    *(void *)(v5 + 112) = 0;
    *(void *)(v5 + 120) = 0;
    uint64_t v7 = *(void *)(v5 + 128);
    *(void *)(i + 133) = *(void *)(v5 + 133);
    *(void *)(i + 128) = v7;
    i += 144;
  }
  *(void *)(result + 8) = i;
  if (v4 != a4)
  {
    uint64_t v8 = v4 - 144;
    uint64_t v9 = 16 * ((v4 - a4) >> 4);
    uint64_t v10 = a2 - 144;
    do
    {
      __n128 result = sub_CD4738(v8, v10 + v9);
      v8 -= 144;
      v9 -= 144;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_CD4738(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a2 + 8);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v5 = a1 + 8;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = *(void **)(a1 + 8);
    if (v7 != v6)
    {
      uint64_t v9 = v7 - 1064;
      do
      {
        int v11 = *(_DWORD *)(v9 + 1056);
        if (v11 == 3)
        {
          sub_3AFFFC(v9);
        }
        else if (v11 == 1)
        {
          uint64_t v12 = *(void **)(v9 + 16);
          if (v12)
          {
            *(void *)(v9 + 24) = v12;
            operator delete(v12);
          }
        }
        else if (!v11 && *(unsigned char *)(v9 + 28))
        {
          *(unsigned char *)(v9 + 28) = 0;
        }
        uint64_t v10 = v9 - 32;
        v9 -= 1096;
      }
      while (v10 != v6);
      uint64_t v8 = *(void **)v5;
    }
    *(void *)(a1 + 16) = v6;
    operator delete(v8);
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  void *v4 = 0;
  v4[1] = 0;
  void v4[2] = 0;
  unint64_t v13 = *(void **)(a1 + 32);
  if (v13)
  {
    *(void *)(a1 + 40) = v13;
    operator delete(v13);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  int64x2_t v14 = *(void **)(a1 + 56);
  if (v14)
  {
    *(void *)(a1 + 64) = v14;
    operator delete(v14);
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  unint64_t v15 = *(void **)(a1 + 80);
  if (v15)
  {
    *(void *)(a1 + 88) = v15;
    operator delete(v15);
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  uint64_t v16 = *(void **)(a1 + 104);
  if (v16)
  {
    *(void *)(a1 + 112) = v16;
    operator delete(v16);
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  uint64_t v17 = *(void *)(a2 + 128);
  *(void *)(a1 + 133) = *(void *)(a2 + 133);
  *(void *)(a1 + 128) = v17;
  return a1;
}

__n128 sub_CD490C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 16);
  if (v4 != *(void **)(a1 + 24)) {
    goto LABEL_22;
  }
  uint64_t v6 = *(unsigned char **)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 <= *(void *)a1)
  {
    unint64_t v12 = 0x1C71C71C71C71C72 * (((char *)v4 - v6) >> 4);
    if (v4 == (void *)v6) {
      unint64_t v12 = 1;
    }
    if (v12 >= 0x1C71C71C71C71C8) {
      sub_188D718();
    }
    unint64_t v13 = v12 >> 2;
    uint64_t v14 = 144 * v12;
    unint64_t v15 = (char *)operator new(144 * v12);
    uint64_t v16 = &v15[144 * v13];
    uint64_t v17 = &v15[v14];
    if (v4 == (void *)v5)
    {
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = v17;
      if (!v6) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v18 = (char *)v4 + (void)v16 - v5;
      uint64_t v19 = 144 * v13;
      do
      {
        int v20 = &v15[v19];
        *(_DWORD *)int v20 = *(_DWORD *)v5;
        *(_OWORD *)(v20 + 8) = *(_OWORD *)(v5 + 8);
        *((void *)v20 + 3) = *(void *)(v5 + 24);
        *(void *)(v5 + 8) = 0;
        *(void *)(v5 + 16) = 0;
        *(void *)(v5 + 24) = 0;
        *((_OWORD *)v20 + 2) = *(_OWORD *)(v5 + 32);
        *((void *)v20 + 6) = *(void *)(v5 + 48);
        *(void *)(v5 + 32) = 0;
        *(void *)(v5 + 40) = 0;
        *(void *)(v5 + 48) = 0;
        *(_OWORD *)(v20 + 56) = *(_OWORD *)(v5 + 56);
        *((void *)v20 + 9) = *(void *)(v5 + 72);
        *(void *)(v5 + 56) = 0;
        *(void *)(v5 + 64) = 0;
        *(void *)(v5 + 72) = 0;
        *((_OWORD *)v20 + 5) = *(_OWORD *)(v5 + 80);
        *((void *)v20 + 12) = *(void *)(v5 + 96);
        *(void *)(v5 + 80) = 0;
        *(void *)(v5 + 88) = 0;
        *(void *)(v5 + 96) = 0;
        *(_OWORD *)(v20 + 104) = *(_OWORD *)(v5 + 104);
        *((void *)v20 + 15) = *(void *)(v5 + 120);
        *(void *)(v5 + 104) = 0;
        *(void *)(v5 + 112) = 0;
        *(void *)(v5 + 120) = 0;
        uint64_t v21 = *(void *)(v5 + 128);
        *(void *)(v20 + 133) = *(void *)(v5 + 133);
        *((void *)v20 + 16) = v21;
        v19 += 144;
        v5 += 144;
      }
      while (v20 + 144 != v18);
      uint64_t v6 = *(unsigned char **)a1;
      uint64_t v22 = *(void **)(a1 + 8);
      int v23 = *(void **)(a1 + 16);
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v18;
      *(void *)(a1 + 24) = v17;
      while (v23 != v22)
      {
        v23 -= 18;
        sub_9BEAA8(v23);
      }
      if (!v6) {
        goto LABEL_19;
      }
    }
    operator delete(v6);
LABEL_19:
    uint64_t v4 = *(void **)(a1 + 16);
    goto LABEL_22;
  }
  int64_t v7 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *(void *)a1) >> 4);
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -v9;
  if ((void *)v5 == v4)
  {
    unint64_t v11 = v5 - 144 * v9;
  }
  else
  {
    do
    {
      sub_CD4738(v5 + 144 * v10, v5);
      v5 += 144;
    }
    while ((void *)v5 != v4);
    uint64_t v4 = *(void **)(a1 + 8);
    unint64_t v11 = v5 + 144 * v10;
  }
  *(void *)(a1 + 8) = &v4[18 * v10];
  *(void *)(a1 + 16) = v11;
  uint64_t v4 = (void *)v11;
LABEL_22:
  *(_DWORD *)uint64_t v4 = *(_DWORD *)a2;
  void v4[2] = 0;
  v4[3] = 0;
  v4[1] = 0;
  *(_OWORD *)(v4 + 1) = *(_OWORD *)(a2 + 8);
  v4[3] = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  v4[4] = 0;
  v4[5] = 0;
  v4[6] = 0;
  *((_OWORD *)v4 + 2) = *(_OWORD *)(a2 + 32);
  v4[6] = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  v4[7] = 0;
  v4[8] = 0;
  v4[9] = 0;
  *(_OWORD *)(v4 + 7) = *(_OWORD *)(a2 + 56);
  v4[9] = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  v4[10] = 0;
  v4[11] = 0;
  v4[12] = 0;
  *((_OWORD *)v4 + 5) = *(_OWORD *)(a2 + 80);
  v4[12] = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  v4[13] = 0;
  v4[14] = 0;
  v4[15] = 0;
  __n128 result = *(__n128 *)(a2 + 104);
  *(__n128 *)(v4 + 13) = result;
  v4[15] = *(void *)(a2 + 120);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  uint64_t v25 = *(void *)(a2 + 128);
  *(void *)((char *)v4 + 133) = *(void *)(a2 + 133);
  v4[16] = v25;
  *(void *)(a1 + 16) += 144;
  return result;
}

uint64_t sub_CD4C0C(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = result + v7;
      uint64_t v9 = a3 + v7;
      int v10 = *(_DWORD *)(a3 + v7 - 144);
      *(void *)(v8 - 128) = 0;
      *(void *)(v8 - 120) = 0;
      *(void *)(v8 - 136) = 0;
      *(_DWORD *)(v8 - 144) = v10;
      *(_OWORD *)(v8 - 136) = *(_OWORD *)(a3 + v7 - 136);
      *(void *)(v8 - 120) = *(void *)(a3 + v7 - 120);
      *(void *)(v9 - 136) = 0;
      *(void *)(v9 - 128) = 0;
      *(void *)(v9 - 120) = 0;
      *(void *)(v8 - 112) = 0;
      *(void *)(v8 - 104) = 0;
      *(void *)(v8 - 96) = 0;
      *(_OWORD *)(v8 - 112) = *(_OWORD *)(a3 + v7 - 112);
      *(void *)(v8 - 96) = *(void *)(a3 + v7 - 96);
      *(void *)(v9 - 112) = 0;
      *(void *)(v9 - 104) = 0;
      *(void *)(v9 - 96) = 0;
      *(void *)(v8 - 88) = 0;
      *(void *)(v8 - 80) = 0;
      *(void *)(v8 - 72) = 0;
      *(_OWORD *)(v8 - 88) = *(_OWORD *)(a3 + v7 - 88);
      *(void *)(v8 - 72) = *(void *)(a3 + v7 - 72);
      *(void *)(v9 - 88) = 0;
      *(void *)(v9 - 80) = 0;
      *(void *)(v9 - 72) = 0;
      *(void *)(v8 - 64) = 0;
      *(void *)(v8 - 56) = 0;
      *(void *)(v8 - 48) = 0;
      *(_OWORD *)(v8 - 64) = *(_OWORD *)(a3 + v7 - 64);
      *(void *)(v8 - 48) = *(void *)(a3 + v7 - 48);
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 48) = 0;
      *(void *)(v8 - 40) = 0;
      *(void *)(v8 - 32) = 0;
      *(void *)(v8 - 24) = 0;
      *(_OWORD *)(v8 - 40) = *(_OWORD *)(a3 + v7 - 40);
      *(void *)(v8 - 24) = *(void *)(a3 + v7 - 24);
      *(void *)(v9 - 40) = 0;
      *(void *)(v9 - 32) = 0;
      *(void *)(v9 - 24) = 0;
      uint64_t v11 = *(void *)(a3 + v7 - 16);
      *(void *)(v8 - 11) = *(void *)(a3 + v7 - 11);
      *(void *)(v8 - 16) = v11;
      v7 -= 144;
    }
    while (a3 + v7 != v5);
    uint64_t v6 = result + v7;
  }
  a2[1] = v6;
  uint64_t v12 = a1[1];
  uint64_t v13 = a2[2];
  if (v12 != a3)
  {
    do
    {
      *(_DWORD *)uint64_t v13 = *(_DWORD *)a3;
      *(void *)(v13 + 16) = 0;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 8) = 0;
      *(_OWORD *)(v13 + 8) = *(_OWORD *)(a3 + 8);
      *(void *)(v13 + 24) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(_OWORD *)(v13 + 32) = *(_OWORD *)(a3 + 32);
      *(void *)(v13 + 48) = *(void *)(a3 + 48);
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(void *)(v13 + 64) = 0;
      *(void *)(v13 + 72) = 0;
      *(_OWORD *)(v13 + 56) = *(_OWORD *)(a3 + 56);
      *(void *)(v13 + 72) = *(void *)(a3 + 72);
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 64) = 0;
      *(void *)(a3 + 72) = 0;
      *(void *)(v13 + 80) = 0;
      *(void *)(v13 + 88) = 0;
      *(void *)(v13 + 96) = 0;
      *(_OWORD *)(v13 + 80) = *(_OWORD *)(a3 + 80);
      *(void *)(v13 + 96) = *(void *)(a3 + 96);
      *(void *)(a3 + 80) = 0;
      *(void *)(a3 + 88) = 0;
      *(void *)(a3 + 96) = 0;
      *(void *)(v13 + 104) = 0;
      *(void *)(v13 + 112) = 0;
      *(void *)(v13 + 120) = 0;
      *(_OWORD *)(v13 + 104) = *(_OWORD *)(a3 + 104);
      *(void *)(v13 + 120) = *(void *)(a3 + 120);
      *(void *)(a3 + 104) = 0;
      *(void *)(a3 + 112) = 0;
      *(void *)(a3 + 120) = 0;
      uint64_t v14 = *(void *)(a3 + 128);
      *(void *)(v13 + 133) = *(void *)(a3 + 133);
      *(void *)(v13 + 128) = v14;
      v13 += 144;
      a3 += 144;
    }
    while (a3 != v12);
    uint64_t v6 = a2[1];
  }
  a2[2] = v13;
  uint64_t v15 = *a1;
  *a1 = v6;
  a2[1] = v15;
  uint64_t v16 = a1[1];
  a1[1] = a2[2];
  a2[2] = v16;
  uint64_t v17 = a1[2];
  a1[2] = a2[3];
  a2[3] = v17;
  *a2 = a2[1];
  return result;
}

void sub_CD4E18(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned char **)a1;
  if (0xE21A291C077975B9 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x3BCBADC7F10D15) {
    sub_2E00();
  }
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  uint64_t v5 = 1096 * a2;
  uint64_t v6 = (char *)operator new(1096 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
  }
  else
  {
    uint64_t v9 = 0;
    do
    {
      int v10 = (long long *)&v8[v9 - 1096];
      uint64_t v11 = (long long *)&v4[v9 - 1096];
      uint64_t v12 = *(unsigned int *)&v4[v9 - 8];
      *(_DWORD *)&v8[v9 - 8] = v12;
      if (v12)
      {
        sub_9C16F4(v12, v11, (uint64_t)v10);
      }
      else
      {
        long long v13 = *v11;
        long long v14 = *(_OWORD *)&v4[v9 - 1080];
        long long v15 = *(_OWORD *)&v4[v9 - 1064];
        *(void *)&v8[v9 - 1050] = *(void *)&v4[v9 - 1050];
        *(_OWORD *)&v8[v9 - 1080] = v14;
        *(_OWORD *)&v8[v9 - 1064] = v15;
        long long *v10 = v13;
        int v16 = v4[v9 - 1036];
        v8[v9 - 1036] = v16;
        if (v16) {
          *(_DWORD *)&v8[v9 - 1040] = *(_DWORD *)&v4[v9 - 1040];
        }
      }
      v9 -= 1096;
    }
    while (&v4[v9] != v2);
    unint64_t v2 = *(unsigned char **)a1;
    uint64_t v17 = *(unsigned char **)(a1 + 8);
    *(void *)a1 = &v8[v9];
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (v17 == v2)
    {
      unint64_t v2 = v17;
      if (!v17) {
        return;
      }
      goto LABEL_23;
    }
    uint64_t v18 = (uint64_t)(v17 - 1064);
    do
    {
      int v20 = *(_DWORD *)(v18 + 1056);
      if (v20 == 3)
      {
        sub_3AFFFC(v18);
      }
      else if (v20 == 1)
      {
        uint64_t v21 = *(void **)(v18 + 16);
        if (v21)
        {
          *(void *)(v18 + 24) = v21;
          operator delete(v21);
        }
      }
      else if (!v20 && *(unsigned char *)(v18 + 28))
      {
        *(unsigned char *)(v18 + 28) = 0;
      }
      uint64_t v19 = (unsigned char *)(v18 - 32);
      v18 -= 1096;
    }
    while (v19 != v2);
  }
  if (!v2) {
    return;
  }
LABEL_23:

  operator delete(v2);
}

uint64_t sub_CD4FEC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = (a2 - *a1) / 1096;
  uint64_t v8 = *a1 + 1096 * v7;
  unint64_t v9 = a1[2];
  if (v6 >= v9)
  {
    unint64_t v22 = 0xE21A291C077975B9 * ((uint64_t)(v6 - v5) >> 3) + 1;
    if (v22 > 0x3BCBADC7F10D14) {
      sub_2E00();
    }
    unint64_t v23 = 0xE21A291C077975B9 * ((uint64_t)(v9 - v5) >> 3);
    if (2 * v23 > v22) {
      unint64_t v22 = 2 * v23;
    }
    if (v23 >= 0x1DE5D6E3F8868ALL) {
      unint64_t v24 = 0x3BCBADC7F10D14;
    }
    else {
      unint64_t v24 = v22;
    }
    char v43 = a1 + 2;
    if (v24)
    {
      if (v24 > 0x3BCBADC7F10D14) {
        sub_188D718();
      }
      uint64_t v25 = (char *)operator new(1096 * v24);
    }
    else
    {
      uint64_t v25 = 0;
    }
    long long __p = v25;
    uint64_t v40 = &v25[1096 * v7];
    int v41 = v40;
    int v42 = &v25[1096 * v24];
    sub_CD5344((uint64_t)&__p, a3);
    uint64_t v8 = sub_A0EEE8(a1, &__p, v8);
    uint64_t v27 = v40;
    while (1)
    {
      long long v28 = v41;
      if (v41 == v27) {
        break;
      }
      v41 -= 1096;
      int v29 = *((_DWORD *)v28 - 2);
      switch(v29)
      {
        case 3:
          sub_3AFFFC((uint64_t)(v28 - 1064));
          break;
        case 1:
          uint64_t v31 = (void *)*((void *)v28 - 131);
          if (v31)
          {
            *((void *)v28 - 130) = v31;
            operator delete(v31);
          }
          break;
        case 0:
          long long v30 = v28 - 1036;
          if (*v30) {
            char *v30 = 0;
          }
          break;
      }
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (v8 == v6)
  {
    *(_DWORD *)(v5 + 1096 * v7 + 1088) = *(_DWORD *)(a3 + 1088);
    uint64_t v26 = *(unsigned int *)(a3 + 1088);
    if (v26)
    {
      sub_9C16F4(v26, (long long *)a3, v8);
    }
    else
    {
      long long v34 = *(_OWORD *)a3;
      long long v35 = *(_OWORD *)(a3 + 16);
      long long v36 = *(_OWORD *)(a3 + 32);
      *(void *)(v8 + 46) = *(void *)(a3 + 46);
      *(_OWORD *)(v8 + 16) = v35;
      *(_OWORD *)(v8 + 32) = v36;
      *(_OWORD *)uint64_t v8 = v34;
      int v37 = *(unsigned __int8 *)(a3 + 60);
      *(unsigned char *)(v8 + 60) = v37;
      if (v37) {
        *(_DWORD *)(v8 + 56) = *(_DWORD *)(a3 + 56);
      }
    }
    a1[1] = v8 + 1096;
  }
  else
  {
    unint64_t v10 = 0xE21A291C077975B9 * ((uint64_t)(v6 - (v8 + 1096)) >> 3);
    uint64_t v11 = v6 - 1096;
    uint64_t v12 = a1[1];
    if (v6 >= 0x448)
    {
      uint64_t v13 = 0;
      uint64_t v14 = v5 + 8 * ((uint64_t)(v6 - (v8 + 1096)) >> 3) + 1096 * v7;
      do
      {
        uint64_t v15 = v14 + v13;
        uint64_t v16 = v6 + v13;
        *(_DWORD *)(v6 + v13 + 1088) = *(_DWORD *)(v14 + v13 + 1088);
        uint64_t v17 = *(unsigned int *)(v14 + v13 + 1088);
        if (v17)
        {
          sub_9C16F4(v17, (long long *)v15, v16);
        }
        else
        {
          long long v18 = *(_OWORD *)v15;
          long long v19 = *(_OWORD *)(v15 + 16);
          long long v20 = *(_OWORD *)(v15 + 32);
          *(void *)(v16 + 46) = *(void *)(v15 + 46);
          *(_OWORD *)(v16 + 16) = v19;
          *(_OWORD *)(v16 + 32) = v20;
          *(_OWORD *)uint64_t v16 = v18;
          int v21 = *(unsigned __int8 *)(v15 + 60);
          *(unsigned char *)(v16 + 60) = v21;
          if (v21) {
            *(_DWORD *)(v6 + v13 + 56) = *(_DWORD *)(v14 + v13 + 56);
          }
        }
        v13 += 1096;
      }
      while (v14 + v13 < v6);
      uint64_t v12 = v6 + v13;
      unint64_t v10 = 0xE21A291C077975B9 * ((uint64_t)(v6 - (v8 + 1096)) >> 3);
    }
    a1[1] = v12;
    if (v6 != v8 + 1096)
    {
      uint64_t v32 = 1096 * v10;
      uint64_t v33 = 1096 * v7 + v5 - 1096;
      do
      {
        sub_9C14C4(v11, v33 + v32);
        v11 -= 1096;
        v32 -= 1096;
      }
      while (v32);
    }
    sub_9C14C4(v8, a3);
  }
  return v8;
}

void sub_CD532C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A0E5D4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_CD5344(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 == *(void *)(a1 + 24))
  {
    unint64_t v6 = *(void **)a1;
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 <= *(void *)a1)
    {
      unint64_t v12 = 0xC43452380EF2EB72 * ((v4 - (uint64_t)v6) >> 3);
      if ((void *)v4 == v6) {
        unint64_t v12 = 1;
      }
      if (v12 >= 0x3BCBADC7F10D15) {
        sub_188D718();
      }
      unint64_t v13 = v12 >> 2;
      uint64_t v14 = 1096 * v12;
      uint64_t v15 = (char *)operator new(1096 * v12);
      uint64_t v16 = v15;
      uint64_t v17 = &v15[1096 * v13];
      long long v18 = &v15[v14];
      if (v4 == v5)
      {
        *(void *)a1 = v15;
        *(void *)(a1 + 8) = v17;
        *(void *)(a1 + 16) = v17;
        *(void *)(a1 + 24) = v18;
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v20 = (uint64_t)(v4 - v5) / 1096;
        int v21 = &v17[1096 * v20];
        uint64_t v22 = 1096 * v20;
        do
        {
          uint64_t v23 = (uint64_t)&v17[v19];
          uint64_t v24 = v5 + v19;
          uint64_t v25 = *(unsigned int *)(v5 + v19 + 1088);
          *(_DWORD *)&v17[v19 + 1088] = v25;
          if (v25)
          {
            sub_9C16F4(v25, (long long *)v24, v23);
          }
          else
          {
            long long v26 = *(_OWORD *)v24;
            long long v27 = *(_OWORD *)(v24 + 16);
            long long v28 = *(_OWORD *)(v24 + 32);
            *(void *)(v23 + 46) = *(void *)(v24 + 46);
            *(_OWORD *)(v23 + 16) = v27;
            *(_OWORD *)(v23 + 32) = v28;
            *(_OWORD *)uint64_t v23 = v26;
            int v29 = *(unsigned __int8 *)(v24 + 60);
            *(unsigned char *)(v23 + 60) = v29;
            if (v29) {
              *(_DWORD *)&v17[v19 + 56] = *(_DWORD *)(v5 + v19 + 56);
            }
          }
          v19 += 1096;
        }
        while (v22 != v19);
        unint64_t v6 = *(void **)a1;
        uint64_t v30 = *(void *)(a1 + 8);
        uint64_t v31 = *(void *)(a1 + 16);
        *(void *)a1 = v16;
        *(void *)(a1 + 8) = v17;
        *(void *)(a1 + 16) = v21;
        *(void *)(a1 + 24) = v18;
        if (v31 != v30)
        {
          uint64_t v32 = v31 - 1064;
          do
          {
            int v34 = *(_DWORD *)(v32 + 1056);
            if (v34 == 3)
            {
              sub_3AFFFC(v32);
            }
            else if (v34 == 1)
            {
              long long v35 = *(void **)(v32 + 16);
              if (v35)
              {
                *(void *)(v32 + 24) = v35;
                operator delete(v35);
              }
            }
            else if (!v34 && *(unsigned char *)(v32 + 28))
            {
              *(unsigned char *)(v32 + 28) = 0;
            }
            uint64_t v33 = v32 - 32;
            v32 -= 1096;
          }
          while (v33 != v30);
        }
      }
      if (v6) {
        operator delete(v6);
      }
      uint64_t v4 = *(void *)(a1 + 16);
      *(_DWORD *)(v4 + 1088) = *(_DWORD *)(a2 + 1088);
      uint64_t result = *(unsigned int *)(a2 + 1088);
      if (result) {
        goto LABEL_33;
      }
      goto LABEL_38;
    }
    int64_t v7 = 0xE21A291C077975B9 * ((uint64_t)(v5 - *(void *)a1) >> 3);
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    if (v5 == v4)
    {
      uint64_t v11 = v5 - 1096 * v9;
    }
    else
    {
      do
      {
        sub_9C14C4(v5 + 1096 * v10, v5);
        v5 += 1096;
      }
      while (v5 != v4);
      uint64_t v4 = *(void *)(a1 + 8);
      uint64_t v11 = v5 + 1096 * v10;
    }
    *(void *)(a1 + 8) = v4 + 1096 * v10;
    *(void *)(a1 + 16) = v11;
    uint64_t v4 = v11;
  }
  *(_DWORD *)(v4 + 1088) = *(_DWORD *)(a2 + 1088);
  uint64_t result = *(unsigned int *)(a2 + 1088);
  if (result)
  {
LABEL_33:
    uint64_t result = sub_9C16F4(result, (long long *)a2, v4);
    goto LABEL_40;
  }
LABEL_38:
  long long v37 = *(_OWORD *)a2;
  long long v38 = *(_OWORD *)(a2 + 16);
  long long v39 = *(_OWORD *)(a2 + 32);
  *(void *)(v4 + 46) = *(void *)(a2 + 46);
  *(_OWORD *)(v4 + 16) = v38;
  *(_OWORD *)(v4 + 32) = v39;
  *(_OWORD *)uint64_t v4 = v37;
  int v40 = *(unsigned __int8 *)(a2 + 60);
  *(unsigned char *)(v4 + 60) = v40;
  if (v40) {
    *(_DWORD *)(v4 + 56) = *(_DWORD *)(a2 + 56);
  }
LABEL_40:
  *(void *)(a1 + 16) += 1096;
  return result;
}

void sub_CD5610()
{
  unk_25E5BBF = 16641;
  word_25E5BA8 = 65;
  byte_25E5BD7 = 1;
  byte_25E5BC1 = 0;
}

void sub_CD5638()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  unint64_t v5 = (void *)v0;
  uint64_t v17 = operator new(0x48uLL);
  long long v18 = xmmword_20E8240;
  strcpy((char *)v17, "routing/transit/journey_planning/TransitRegionClassification.json");
  long long __p = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v6 = sub_374CDC((uint64_t)v4, (uint64_t)&v17, (uint64_t *)&__p);
  sub_BC2BF8((uint64_t)v16, (uint64_t)v4, v6);
  int64_t v7 = (void **)__p;
  if (__p)
  {
    uint64_t v8 = v11;
    uint64_t v9 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = __p;
    }
    uint64_t v11 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17);
  }
  sub_BC207C((uint64_t)v16, v5, (uint64_t *)&v14);
  memset(v13, 0, sizeof(v13));
  sub_8A6F8((char *)v13, (uint64_t)v14, v15, 0xAAAAAAAAAAAAAAABLL * ((v15 - (uint64_t)v14) >> 3));
  sub_9F20FC((uint64_t)&v17, v4, v2, (uint64_t *)v13);
}

void sub_CD5A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a15);
  if (a48) {
    sub_CD5CBC((uint64_t)&a48, (uint64_t)&a49);
  }
  sub_CD5B3C((uint64_t)&STACK[0x668]);
  sub_1A668((void **)&STACK[0x640]);
  _Unwind_Resume(a1);
}

void sub_CD5B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  if (SLOBYTE(STACK[0x67F]) < 0) {
    operator delete((void *)STACK[0x668]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_CD5B3C(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 4423);
  uint64_t v3 = *(void *)(a1 + 5624);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 5632);
    unint64_t v5 = *(void **)(a1 + 5624);
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0) {
          operator delete(*(void **)(v4 - 24));
        }
        v4 -= 24;
      }
      while (v4 != v3);
      unint64_t v5 = *(void **)(a1 + 5624);
    }
    *(void *)(a1 + 5632) = v3;
    operator delete(v5);
  }
  if (v2[1128] < 0)
  {
    operator delete(*(void **)(a1 + 5528));
    if ((v2[432] & 0x80000000) == 0)
    {
LABEL_11:
      if ((v2[240] & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_20;
    }
  }
  else if ((v2[432] & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 4832));
  if ((v2[240] & 0x80000000) == 0)
  {
LABEL_12:
    if ((*v2 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(*(void **)(a1 + 4640));
  if ((*v2 & 0x80000000) == 0)
  {
LABEL_13:
    sub_49DA2C((void *)(a1 + 136));
    uint64_t v6 = a1 + 88;
    uint64_t v7 = *(void *)(a1 + 112);
    if (v7 != a1 + 88) {
      goto LABEL_14;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(*(void **)(a1 + 4400));
  sub_49DA2C((void *)(a1 + 136));
  uint64_t v6 = a1 + 88;
  uint64_t v7 = *(void *)(a1 + 112);
  if (v7 != a1 + 88)
  {
LABEL_14:
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_23;
  }
LABEL_22:
  (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
LABEL_23:
  operator delete(*(void **)a1);
  return a1;
}

void sub_CD5CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 1256);
  if (v3)
  {
    sub_9F5BC8(a2 + 1256, v3);
    operator delete(*(void **)(a2 + 1256));
  }
  if (*(char *)(a2 + 1183) < 0)
  {
    operator delete(*(void **)(a2 + 1160));
    if ((*(char *)(a2 + 487) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a2 + 295) & 0x80000000) == 0) {
        goto LABEL_6;
      }
LABEL_10:
      operator delete(*(void **)(a2 + 272));
      if ((*(char *)(a2 + 55) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a2 + 487) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a2 + 464));
  if (*(char *)(a2 + 295) < 0) {
    goto LABEL_10;
  }
LABEL_6:
  if ((*(char *)(a2 + 55) & 0x80000000) == 0) {
    return;
  }
LABEL_11:
  uint64_t v4 = *(void **)(a2 + 32);

  operator delete(v4);
}

uint64_t sub_CD5D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 1272) = 0;
  *(_OWORD *)(a2 + 1256) = 0u;
  sub_CD609C(a2 + 1256, *(void *)(a3 + 1256), *(void *)(a3 + 1264), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a3 + 1264) - *(void *)(a3 + 1256)) >> 3));
  return a2;
}

void sub_CD5DD4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 1183) < 0) {
    operator delete(*(void **)(v1 + 1160));
  }
  sub_20AF8E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CD5DF8(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  if (*(char *)(a2 + 55) < 0)
  {
    sub_4200((unsigned char *)(a1 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  long long v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v6;
  long long v7 = *(_OWORD *)(a2 + 88);
  long long v8 = *(_OWORD *)(a2 + 104);
  long long v9 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v9;
  *(_OWORD *)(a1 + 104) = v8;
  *(_OWORD *)(a1 + 88) = v7;
  long long v10 = *(_OWORD *)(a2 + 152);
  long long v11 = *(_OWORD *)(a2 + 168);
  long long v12 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v12;
  *(_OWORD *)(a1 + 168) = v11;
  *(_OWORD *)(a1 + 152) = v10;
  long long v13 = *(_OWORD *)(a2 + 216);
  long long v14 = *(_OWORD *)(a2 + 232);
  long long v15 = *(_OWORD *)(a2 + 248);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v15;
  *(_OWORD *)(a1 + 232) = v14;
  *(_OWORD *)(a1 + 216) = v13;
  if (*(char *)(a2 + 295) < 0)
  {
    sub_4200((unsigned char *)(a1 + 272), *(void **)(a2 + 272), *(void *)(a2 + 280));
  }
  else
  {
    long long v16 = *(_OWORD *)(a2 + 272);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = v16;
  }
  long long v17 = *(_OWORD *)(a2 + 296);
  long long v18 = *(_OWORD *)(a2 + 312);
  long long v19 = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = v19;
  *(_OWORD *)(a1 + 312) = v18;
  *(_OWORD *)(a1 + 296) = v17;
  long long v20 = *(_OWORD *)(a2 + 360);
  long long v21 = *(_OWORD *)(a2 + 376);
  long long v22 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 392) = v22;
  *(_OWORD *)(a1 + 376) = v21;
  *(_OWORD *)(a1 + 360) = v20;
  long long v23 = *(_OWORD *)(a2 + 424);
  long long v24 = *(_OWORD *)(a2 + 440);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(_OWORD *)(a1 + 424) = v23;
  *(_OWORD *)(a1 + 440) = v24;
  if (*(char *)(a2 + 487) < 0)
  {
    sub_4200((unsigned char *)(a1 + 464), *(void **)(a2 + 464), *(void *)(a2 + 472));
  }
  else
  {
    long long v25 = *(_OWORD *)(a2 + 464);
    *(void *)(a1 + 480) = *(void *)(a2 + 480);
    *(_OWORD *)(a1 + 464) = v25;
  }
  long long v26 = *(_OWORD *)(a2 + 488);
  long long v27 = *(_OWORD *)(a2 + 504);
  long long v28 = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 520);
  *(_OWORD *)(a1 + 536) = v28;
  *(_OWORD *)(a1 + 488) = v26;
  *(_OWORD *)(a1 + 504) = v27;
  long long v29 = *(_OWORD *)(a2 + 552);
  long long v30 = *(_OWORD *)(a2 + 568);
  long long v31 = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 600) = v31;
  *(_OWORD *)(a1 + 552) = v29;
  *(_OWORD *)(a1 + 568) = v30;
  memcpy((void *)(a1 + 616), (const void *)(a2 + 616), 0x220uLL);
  uint64_t v32 = (unsigned char *)(a1 + 1160);
  if (*(char *)(a2 + 1183) < 0)
  {
    sub_4200(v32, *(void **)(a2 + 1160), *(void *)(a2 + 1168));
  }
  else
  {
    long long v33 = *(_OWORD *)(a2 + 1160);
    *(void *)(a1 + 1176) = *(void *)(a2 + 1176);
    *(_OWORD *)uint64_t v32 = v33;
  }
  *(_OWORD *)(a1 + 1184) = *(_OWORD *)(a2 + 1184);
  long long v34 = *(_OWORD *)(a2 + 1200);
  long long v35 = *(_OWORD *)(a2 + 1216);
  long long v36 = *(_OWORD *)(a2 + 1232);
  *(void *)(a1 + 1248) = *(void *)(a2 + 1248);
  *(_OWORD *)(a1 + 1232) = v36;
  *(_OWORD *)(a1 + 1216) = v35;
  *(_OWORD *)(a1 + 1200) = v34;
  return a1;
}

void sub_CD6028(_Unwind_Exception *exception_object)
{
  if (v1[487] < 0)
  {
    operator delete(*v4);
    if ((v1[295] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v1[55] & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((v1[295] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((v1[55] & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_CD609C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x38E38E38E38E38FLL) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(72 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    uint64_t v5[2] = result + 72 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_9F7388(v8 + v9, (long long *)(a2 + v9));
        v9 += 72;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_CD6170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_CD6184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_CD6210(v11, v12, v12, v10, v10);
  *(void *)(v9 + 8) = v10;
  sub_CD61B8(&a9);
  _Unwind_Resume(a1);
}

void ***sub_CD61B8(void ***a1)
{
  if (*((unsigned char *)a1 + 8)) {
    return a1;
  }
  uint64_t v3 = (uint64_t *)*a1;
  uint64_t v4 = (uint64_t)**a1;
  if (!v4) {
    return a1;
  }
  sub_9F5BC8((uint64_t)v3, v4);
  operator delete(**a1);
  return a1;
}

void sub_CD6210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    uint64_t v6 = a3;
    do
    {
      uint64_t v8 = *(void **)(v6 - 24);
      if (v8)
      {
        *(void *)(v6 - 16) = v8;
        operator delete(v8);
      }
      uint64_t v9 = *(void *)(v6 - 48);
      if (v9)
      {
        uint64_t v10 = *(void *)(v6 - 40);
        long long v7 = *(void **)(v6 - 48);
        if (v10 != v9)
        {
          uint64_t v11 = v10 - 152;
          do
          {
            long long v13 = *(void **)(v11 + 112);
            if (v13)
            {
              *(void *)(v11 + 120) = v13;
              operator delete(v13);
            }
            long long v14 = *(void **)(v11 + 72);
            if (v14)
            {
              *(void *)(v11 + 80) = v14;
              operator delete(v14);
            }
            long long v15 = *(void **)(v11 + 48);
            if (v15)
            {
              *(void *)(v11 + 56) = v15;
              operator delete(v15);
            }
            long long v16 = *(void **)(v11 + 24);
            if (v16)
            {
              *(void *)(v11 + 32) = v16;
              operator delete(v16);
            }
            if (*(void *)v11)
            {
              sub_9F59BC(v11, *(void ***)v11);
              operator delete(*(void **)v11);
            }
            uint64_t v12 = v11 - 24;
            v11 -= 176;
          }
          while (v12 != v9);
          long long v7 = *(void **)(v6 - 48);
        }
        *(void *)(v6 - 40) = v9;
        operator delete(v7);
      }
      v6 -= 72;
    }
    while (v6 != a5);
  }
}

void sub_CD6300()
{
  unk_25E5BEF = 16641;
  word_25E5BD8 = 65;
  byte_25E5C07 = 1;
  byte_25E5BF1 = 0;
}

void sub_CD6328()
{
  __chkstk_darwin();
  memset(__p, 0, sizeof(__p));
  sub_A00264((uint64_t)v2, v0, (uint64_t *)__p);
}

void sub_CD6690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_CD6718((uint64_t)&a48);
  sub_CD678C(&a68);
  _Unwind_Resume(a1);
}

uint64_t sub_CD6718(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void **)(a1 + 16);
      uint64_t v4 = *(void **)(a1 + 8);
      if (v3 != v2)
      {
        do
        {
          v3 -= 23;
          sub_A00E84(a1 + 24, v3);
        }
        while (v3 != v2);
        uint64_t v4 = *(void **)(a1 + 8);
      }
      *(void *)(a1 + 16) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

void *sub_CD678C(void *a1)
{
  uint64_t v2 = a1[547];
  if (v2)
  {
    uint64_t v3 = a1[548];
    uint64_t v4 = (void *)a1[547];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[547];
    }
    a1[548] = v2;
    operator delete(v4);
  }
  sub_49DA2C(a1 + 3);
  return a1;
}

uint64_t sub_CD6808(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x1642C8590B21643) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(184 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    uint64_t v5[2] = result + 184 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        *(_DWORD *)(v8 + v9) = *(_DWORD *)(a2 + v9);
        uint64_t result = sub_9F761C(v8 + v9 + 8, (long long *)(a2 + v9 + 8));
        v9 += 184;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_CD68D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_CD68EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v12; v12 -= 184)
    sub_A00E84(v11, (void *)(v10 - 184 + v12));
  *(void *)(v9 + 8) = v10;
  sub_CD6920(&a9);
  _Unwind_Resume(a1);
}

void ***sub_CD6920(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = v2[1];
      long long v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v4 -= 23;
          sub_A00E84((uint64_t)(v2 + 2), v4);
        }
        while (v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_CD69BC()
{
  unk_25E5C1F = 16641;
  word_25E5C08 = 65;
  byte_25E5C37 = 1;
  byte_25E5C21 = 0;
}

void sub_CD69E4(uint64_t a1, void *a2)
{
  sub_725D0((uint64_t)v4);
  sub_10B5A04((uint64_t)v3, a2);
}

void sub_CD6FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_CD70A8(v58);
  sub_10A4318((uint64_t)&a58);
  _Unwind_Resume(a1);
}

uint64_t sub_CD70A8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v2 = *(void **)(a1 + 184);
    if (v2)
    {
      *(void *)(a1 + 192) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 152);
    if (v3)
    {
      *(void *)(a1 + 160) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(void **)(a1 + 128);
    if (v4)
    {
      *(void *)(a1 + 136) = v4;
      operator delete(v4);
    }
    long long v5 = *(void **)(a1 + 96);
    if (v5)
    {
      *(void *)(a1 + 104) = v5;
      operator delete(v5);
    }
    *(unsigned char *)(a1 + 208) = 0;
  }
  long long v7 = (void **)a1;
  sub_BC2EEC(&v7);
  return a1;
}

uint64_t sub_CD712C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = (a2 - *a1) / 184;
  uint64_t v8 = *a1 + 184 * v7;
  unint64_t v9 = a1[2];
  if (v6 >= v9)
  {
    unint64_t v19 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v6 - v5) >> 3) + 1;
    if (v19 > 0x1642C8590B21642) {
      sub_2E00();
    }
    unint64_t v20 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v9 - v5) >> 3);
    if (2 * v20 > v19) {
      unint64_t v19 = 2 * v20;
    }
    if (v20 >= 0xB21642C8590B21) {
      unint64_t v21 = 0x1642C8590B21642;
    }
    else {
      unint64_t v21 = v19;
    }
    long long v36 = a1 + 2;
    if (v21)
    {
      if (v21 > 0x1642C8590B21642) {
        sub_188D718();
      }
      long long v22 = (char *)operator new(184 * v21);
    }
    else
    {
      long long v22 = 0;
    }
    uint64_t v32 = v22;
    long long v33 = &v22[184 * v7];
    long long v34 = v33;
    long long v35 = &v22[184 * v21];
    sub_CD74D0(&v32, a3);
    uint64_t v8 = sub_CD77D4(a1, &v32, v8);
    sub_BC3178((uint64_t)&v32);
  }
  else
  {
    if (v8 != v6)
    {
      uint64_t v10 = v8 + 184;
      uint64_t v11 = v6 - 184;
      if (v6 < 0xB8)
      {
        a1[1] = v6;
        if (v6 == v10)
        {
LABEL_23:
          sub_CA98C4(v8, (uint64_t *)a3);
          return v8;
        }
      }
      else
      {
        unint64_t v12 = v6 - 184;
        uint64_t v13 = a1[1];
        do
        {
          *(_OWORD *)uint64_t v13 = *(_OWORD *)v12;
          long long v14 = *(_OWORD *)(v12 + 16);
          long long v15 = *(_OWORD *)(v12 + 32);
          long long v16 = *(_OWORD *)(v12 + 48);
          *(_DWORD *)(v13 + 63) = *(_DWORD *)(v12 + 63);
          *(_OWORD *)(v13 + 32) = v15;
          *(_OWORD *)(v13 + 48) = v16;
          *(_OWORD *)(v13 + 16) = v14;
          *(void *)(v13 + 80) = 0;
          *(void *)(v13 + 88) = 0;
          *(void *)(v13 + 72) = 0;
          *(_OWORD *)(v13 + 72) = *(_OWORD *)(v12 + 72);
          *(void *)(v13 + 88) = *(void *)(v12 + 88);
          *(void *)(v12 + 72) = 0;
          *(void *)(v12 + 80) = 0;
          *(void *)(v12 + 88) = 0;
          int v17 = *(_DWORD *)(v12 + 96);
          *(unsigned char *)(v13 + 100) = *(unsigned char *)(v12 + 100);
          *(_DWORD *)(v13 + 96) = v17;
          *(void *)(v13 + 112) = 0;
          *(void *)(v13 + 120) = 0;
          *(void *)(v13 + 104) = 0;
          *(_OWORD *)(v13 + 104) = *(_OWORD *)(v12 + 104);
          *(void *)(v13 + 120) = *(void *)(v12 + 120);
          *(void *)(v12 + 104) = 0;
          *(void *)(v12 + 112) = 0;
          *(void *)(v12 + 120) = 0;
          *(void *)(v13 + 128) = 0;
          *(void *)(v13 + 136) = 0;
          *(void *)(v13 + 144) = 0;
          *(_OWORD *)(v13 + 128) = *(_OWORD *)(v12 + 128);
          *(void *)(v13 + 144) = *(void *)(v12 + 144);
          *(void *)(v12 + 128) = 0;
          *(void *)(v12 + 136) = 0;
          *(void *)(v12 + 144) = 0;
          int v18 = *(_DWORD *)(v12 + 152);
          *(_DWORD *)(v13 + 155) = *(_DWORD *)(v12 + 155);
          *(_DWORD *)(v13 + 152) = v18;
          *(void *)(v13 + 168) = 0;
          *(void *)(v13 + 176) = 0;
          *(void *)(v13 + 160) = 0;
          *(_OWORD *)(v13 + 160) = *(_OWORD *)(v12 + 160);
          *(void *)(v13 + 176) = *(void *)(v12 + 176);
          *(void *)(v12 + 160) = 0;
          *(void *)(v12 + 168) = 0;
          *(void *)(v12 + 176) = 0;
          v13 += 184;
          v12 += 184;
        }
        while (v12 < v6);
        a1[1] = v13;
        if (v6 == v10) {
          goto LABEL_23;
        }
      }
      uint64_t v29 = 8 * ((uint64_t)(v6 - v10) >> 3);
      uint64_t v30 = 184 * v7 + v5 - 184;
      do
      {
        sub_CA98C4(v11, (uint64_t *)(v30 + v29));
        v11 -= 184;
        v29 -= 184;
      }
      while (v29);
      goto LABEL_23;
    }
    *(_OWORD *)uint64_t v8 = *(_OWORD *)a3;
    long long v23 = *(_OWORD *)(a3 + 16);
    long long v24 = *(_OWORD *)(a3 + 32);
    long long v25 = *(_OWORD *)(a3 + 48);
    *(_DWORD *)(v8 + 63) = *(_DWORD *)(a3 + 63);
    *(_OWORD *)(v8 + 32) = v24;
    *(_OWORD *)(v8 + 48) = v25;
    *(_OWORD *)(v8 + 16) = v23;
    *(void *)(v8 + 80) = 0;
    *(void *)(v8 + 88) = 0;
    *(void *)(v8 + 72) = 0;
    *(_OWORD *)(v8 + 72) = *(_OWORD *)(a3 + 72);
    *(void *)(v8 + 88) = *(void *)(a3 + 88);
    *(void *)(a3 + 72) = 0;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    int v26 = *(_DWORD *)(a3 + 96);
    *(unsigned char *)(v8 + 100) = *(unsigned char *)(a3 + 100);
    *(_DWORD *)(v8 + 96) = v26;
    *(void *)(v8 + 112) = 0;
    *(void *)(v8 + 120) = 0;
    *(void *)(v8 + 104) = 0;
    *(_OWORD *)(v8 + 104) = *(_OWORD *)(a3 + 104);
    *(void *)(v8 + 120) = *(void *)(a3 + 120);
    *(void *)(a3 + 104) = 0;
    *(void *)(a3 + 112) = 0;
    *(void *)(a3 + 120) = 0;
    *(void *)(v8 + 128) = 0;
    *(void *)(v8 + 136) = 0;
    *(void *)(v8 + 144) = 0;
    *(_OWORD *)(v8 + 128) = *(_OWORD *)(a3 + 128);
    *(void *)(v8 + 144) = *(void *)(a3 + 144);
    *(void *)(a3 + 128) = 0;
    *(void *)(a3 + 136) = 0;
    *(void *)(a3 + 144) = 0;
    int v27 = *(_DWORD *)(a3 + 152);
    *(_DWORD *)(v8 + 155) = *(_DWORD *)(a3 + 155);
    *(_DWORD *)(v8 + 152) = v27;
    long long v28 = (void *)(v5 + 184 * v7);
    v28[21] = 0;
    v28[22] = 0;
    v28[20] = 0;
    *((_OWORD *)v28 + 10) = *(_OWORD *)(a3 + 160);
    v28[22] = *(void *)(a3 + 176);
    *(void *)(a3 + 160) = 0;
    *(void *)(a3 + 168) = 0;
    *(void *)(a3 + 176) = 0;
    a1[1] = v8 + 184;
  }
  return v8;
}

void sub_CD74BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_BC3178((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_CD74D0(void *a1, uint64_t a2)
{
  unint64_t v4 = a1[2];
  if (v4 == a1[3])
  {
    uint64_t v6 = *a1;
    unint64_t v5 = a1[1];
    if (v5 <= *a1)
    {
      unint64_t v12 = 0xA6F4DE9BD37A6F4ELL * ((uint64_t)(v4 - v6) >> 3);
      if (v4 == v6) {
        unint64_t v12 = 1;
      }
      uint64_t v13 = a1[4];
      unint64_t v34 = 0;
      uint64_t v35 = v13;
      if (v12 >= 0x1642C8590B21643) {
        sub_188D718();
      }
      unint64_t v14 = v12 >> 2;
      uint64_t v15 = 184 * v12;
      long long v16 = (char *)operator new(184 * v12);
      int v17 = &v16[184 * v14];
      if (v4 == v5)
      {
        int64x2_t v25 = vdupq_n_s64(v4);
        int v18 = &v16[184 * v14];
      }
      else
      {
        int v18 = &v17[v4 - v5];
        unint64_t v19 = &v16[184 * v14];
        do
        {
          *(_OWORD *)unint64_t v19 = *(_OWORD *)v5;
          long long v20 = *(_OWORD *)(v5 + 16);
          long long v21 = *(_OWORD *)(v5 + 32);
          long long v22 = *(_OWORD *)(v5 + 48);
          *(_DWORD *)(v19 + 63) = *(_DWORD *)(v5 + 63);
          *((_OWORD *)v19 + 2) = v21;
          *((_OWORD *)v19 + 3) = v22;
          *((_OWORD *)v19 + 1) = v20;
          *(_OWORD *)(v19 + 72) = *(_OWORD *)(v5 + 72);
          *((void *)v19 + 11) = *(void *)(v5 + 88);
          *(void *)(v5 + 72) = 0;
          *(void *)(v5 + 80) = 0;
          *(void *)(v5 + 88) = 0;
          int v23 = *(_DWORD *)(v5 + 96);
          v19[100] = *(unsigned char *)(v5 + 100);
          *((_DWORD *)v19 + 24) = v23;
          *(_OWORD *)(v19 + 104) = *(_OWORD *)(v5 + 104);
          *((void *)v19 + 15) = *(void *)(v5 + 120);
          *(void *)(v5 + 104) = 0;
          *(void *)(v5 + 112) = 0;
          *(void *)(v5 + 120) = 0;
          *((_OWORD *)v19 + 8) = *(_OWORD *)(v5 + 128);
          *((void *)v19 + 18) = *(void *)(v5 + 144);
          *(void *)(v5 + 128) = 0;
          *(void *)(v5 + 136) = 0;
          *(void *)(v5 + 144) = 0;
          int v24 = *(_DWORD *)(v5 + 152);
          *(_DWORD *)(v19 + 155) = *(_DWORD *)(v5 + 155);
          *((_DWORD *)v19 + 38) = v24;
          *((_OWORD *)v19 + 10) = *(_OWORD *)(v5 + 160);
          *((void *)v19 + 22) = *(void *)(v5 + 176);
          *(void *)(v5 + 160) = 0;
          *(void *)(v5 + 168) = 0;
          *(void *)(v5 + 176) = 0;
          v19 += 184;
          v5 += 184;
        }
        while (v19 != v18);
        uint64_t v6 = *a1;
        int64x2_t v25 = *(int64x2_t *)(a1 + 1);
        unint64_t v4 = a1[3];
      }
      uint64_t v32 = v6;
      *a1 = v16;
      a1[1] = v17;
      int64x2_t v33 = v25;
      a1[2] = v18;
      a1[3] = &v16[v15];
      unint64_t v34 = v4;
      sub_BC3178((uint64_t)&v32);
      unint64_t v4 = a1[2];
    }
    else
    {
      int64_t v7 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v5 - *a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      if (v5 == v4)
      {
        unint64_t v11 = v5 - 184 * v9;
      }
      else
      {
        do
        {
          sub_CA98C4(v5 + 184 * v10, (uint64_t *)v5);
          v5 += 184;
        }
        while (v5 != v4);
        unint64_t v4 = a1[1];
        unint64_t v11 = v5 + 184 * v10;
      }
      a1[1] = v4 + 184 * v10;
      a1[2] = v11;
      unint64_t v4 = v11;
    }
  }
  *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
  long long v26 = *(_OWORD *)(a2 + 16);
  long long v27 = *(_OWORD *)(a2 + 32);
  long long v28 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(v4 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(v4 + 32) = v27;
  *(_OWORD *)(v4 + 48) = v28;
  *(_OWORD *)(v4 + 16) = v26;
  *(void *)(v4 + 80) = 0;
  *(void *)(v4 + 88) = 0;
  *(void *)(v4 + 72) = 0;
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(v4 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  int v29 = *(_DWORD *)(a2 + 96);
  *(unsigned char *)(v4 + 100) = *(unsigned char *)(a2 + 100);
  *(_DWORD *)(v4 + 96) = v29;
  *(void *)(v4 + 112) = 0;
  *(void *)(v4 + 120) = 0;
  *(void *)(v4 + 104) = 0;
  *(_OWORD *)(v4 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(v4 + 120) = *(void *)(a2 + 120);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(v4 + 128) = 0;
  *(void *)(v4 + 136) = 0;
  *(void *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(v4 + 144) = *(void *)(a2 + 144);
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  int v30 = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(v4 + 155) = *(_DWORD *)(a2 + 155);
  *(_DWORD *)(v4 + 152) = v30;
  *(void *)(v4 + 168) = 0;
  *(void *)(v4 + 176) = 0;
  *(void *)(v4 + 160) = 0;
  __n128 result = *(__n128 *)(a2 + 160);
  *(__n128 *)(v4 + 160) = result;
  *(void *)(v4 + 176) = *(void *)(a2 + 176);
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  a1[2] += 184;
  return result;
}

uint64_t sub_CD77D4(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = result + v7;
      *(_OWORD *)(v9 - 184) = *(_OWORD *)(a3 + v7 - 184);
      long long v10 = *(_OWORD *)(a3 + v7 - 168);
      long long v11 = *(_OWORD *)(a3 + v7 - 152);
      long long v12 = *(_OWORD *)(a3 + v7 - 136);
      *(_DWORD *)(v9 - 121) = *(_DWORD *)(a3 + v7 - 121);
      *(_OWORD *)(v9 - 136) = v12;
      *(_OWORD *)(v9 - 152) = v11;
      *(void *)(v9 - 104) = 0;
      *(void *)(v9 - 96) = 0;
      *(void *)(v9 - 112) = 0;
      *(_OWORD *)(v9 - 168) = v10;
      *(_OWORD *)(v9 - 112) = *(_OWORD *)(a3 + v7 - 112);
      *(void *)(v9 - 96) = *(void *)(a3 + v7 - 96);
      *(void *)(v8 - 112) = 0;
      *(void *)(v8 - 104) = 0;
      *(void *)(v8 - 96) = 0;
      int v13 = *(_DWORD *)(a3 + v7 - 88);
      *(unsigned char *)(v9 - 84) = *(unsigned char *)(a3 + v7 - 84);
      *(void *)(v9 - 72) = 0;
      *(void *)(v9 - 64) = 0;
      *(_DWORD *)(v9 - 88) = v13;
      *(void *)(v9 - 80) = 0;
      *(_OWORD *)(v9 - 80) = *(_OWORD *)(a3 + v7 - 80);
      *(void *)(v9 - 64) = *(void *)(a3 + v7 - 64);
      *(void *)(v8 - 80) = 0;
      *(void *)(v8 - 72) = 0;
      *(void *)(v8 - 64) = 0;
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 48) = 0;
      *(void *)(v9 - 40) = 0;
      *(_OWORD *)(v9 - 56) = *(_OWORD *)(a3 + v7 - 56);
      *(void *)(v9 - 40) = *(void *)(a3 + v7 - 40);
      *(void *)(v8 - 56) = 0;
      *(void *)(v8 - 48) = 0;
      *(void *)(v8 - 40) = 0;
      int v14 = *(_DWORD *)(a3 + v7 - 32);
      *(_DWORD *)(v9 - 29) = *(_DWORD *)(a3 + v7 - 29);
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      *(_DWORD *)(v9 - 32) = v14;
      *(void *)(v9 - 24) = 0;
      *(_OWORD *)(v9 - 24) = *(_OWORD *)(a3 + v7 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 + v7 - 8);
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      *(void *)(v8 - 8) = 0;
      v7 -= 184;
    }
    while (a3 + v7 != v5);
    uint64_t v6 = result + v7;
  }
  a2[1] = v6;
  uint64_t v15 = a1[1];
  uint64_t v16 = a2[2];
  if (v15 != a3)
  {
    do
    {
      *(_OWORD *)uint64_t v16 = *(_OWORD *)a3;
      long long v17 = *(_OWORD *)(a3 + 16);
      long long v18 = *(_OWORD *)(a3 + 32);
      long long v19 = *(_OWORD *)(a3 + 48);
      *(_DWORD *)(v16 + 63) = *(_DWORD *)(a3 + 63);
      *(_OWORD *)(v16 + 32) = v18;
      *(_OWORD *)(v16 + 48) = v19;
      *(_OWORD *)(v16 + 16) = v17;
      *(void *)(v16 + 80) = 0;
      *(void *)(v16 + 88) = 0;
      *(void *)(v16 + 72) = 0;
      *(_OWORD *)(v16 + 72) = *(_OWORD *)(a3 + 72);
      *(void *)(v16 + 88) = *(void *)(a3 + 88);
      *(void *)(a3 + 72) = 0;
      *(void *)(a3 + 80) = 0;
      *(void *)(a3 + 88) = 0;
      int v20 = *(_DWORD *)(a3 + 96);
      *(unsigned char *)(v16 + 100) = *(unsigned char *)(a3 + 100);
      *(_DWORD *)(v16 + 96) = v20;
      *(void *)(v16 + 112) = 0;
      *(void *)(v16 + 120) = 0;
      *(void *)(v16 + 104) = 0;
      *(_OWORD *)(v16 + 104) = *(_OWORD *)(a3 + 104);
      *(void *)(v16 + 120) = *(void *)(a3 + 120);
      *(void *)(a3 + 104) = 0;
      *(void *)(a3 + 112) = 0;
      *(void *)(a3 + 120) = 0;
      *(void *)(v16 + 128) = 0;
      *(void *)(v16 + 136) = 0;
      *(void *)(v16 + 144) = 0;
      *(_OWORD *)(v16 + 128) = *(_OWORD *)(a3 + 128);
      *(void *)(v16 + 144) = *(void *)(a3 + 144);
      *(void *)(a3 + 128) = 0;
      *(void *)(a3 + 136) = 0;
      *(void *)(a3 + 144) = 0;
      int v21 = *(_DWORD *)(a3 + 152);
      *(_DWORD *)(v16 + 155) = *(_DWORD *)(a3 + 155);
      *(_DWORD *)(v16 + 152) = v21;
      *(void *)(v16 + 168) = 0;
      *(void *)(v16 + 176) = 0;
      *(void *)(v16 + 160) = 0;
      *(_OWORD *)(v16 + 160) = *(_OWORD *)(a3 + 160);
      *(void *)(v16 + 176) = *(void *)(a3 + 176);
      *(void *)(a3 + 160) = 0;
      *(void *)(a3 + 168) = 0;
      *(void *)(a3 + 176) = 0;
      v16 += 184;
      a3 += 184;
    }
    while (a3 != v15);
    uint64_t v6 = a2[1];
  }
  a2[2] = v16;
  uint64_t v22 = *a1;
  *a1 = v6;
  a2[1] = v22;
  uint64_t v23 = a1[1];
  a1[1] = a2[2];
  a2[2] = v23;
  uint64_t v24 = a1[2];
  a1[2] = a2[3];
  a2[3] = v24;
  *a2 = a2[1];
  return result;
}

void sub_CD79F8()
{
  unk_25E5C4F = 16641;
  word_25E5C38 = 65;
  byte_25E5C67 = 1;
  byte_25E5C51 = 0;
}

uint64_t sub_CD7A20(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v31 = a1 + 24;
  *(unsigned char *)(a1 + 192) = 0;
  uint64_t v5 = *(uint64_t (****)())(a2 + 192);
  if (!v5) {
    uint64_t v5 = &off_254C5C8;
  }
  uint64_t v6 = (uint64_t (***)())v5[55];
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = &off_254C418;
  }
  int v8 = *((_DWORD *)v7 + 4);
  uint64_t v9 = *a3;
  if (v8)
  {
    uint64_t v10 = a3[1];
    if (v9 != v10)
    {
      sub_CD8044((uint64_t)&v32, v10 - 376, 0, 0);
      if (*(unsigned char *)(a1 + 192))
      {
        sub_CD8788(v31, (uint64_t)&v32);
        if (v44[0])
        {
          v44[1] = v44[0];
          operator delete(v44[0]);
        }
      }
      else
      {
        *(_DWORD *)(a1 + 24) = v32;
        long long v11 = v34;
        long long v12 = *(_OWORD *)v36;
        *(_OWORD *)(a1 + 64) = v35;
        *(_OWORD *)(a1 + 80) = v12;
        *(_DWORD *)(a1 + 95) = *(_DWORD *)&v36[15];
        *(_OWORD *)(a1 + 32) = v33;
        *(_OWORD *)(a1 + 48) = v11;
        *(_OWORD *)(a1 + 104) = *(_OWORD *)v37;
        *(void *)(a1 + 120) = v38;
        v37[0] = 0;
        v37[1] = 0;
        *(_DWORD *)(a1 + 128) = v39;
        *(unsigned char *)(a1 + 132) = v40;
        *(_DWORD *)(a1 + 136) = v41;
        *(_OWORD *)(a1 + 144) = *(_OWORD *)__p;
        *(void *)(a1 + 160) = v43;
        uint64_t v38 = 0;
        __p[0] = 0;
        __p[1] = 0;
        *(_OWORD *)(a1 + 168) = *(_OWORD *)v44;
        *(void *)(a1 + 184) = v45;
        uint64_t v43 = 0;
        v44[0] = 0;
        v44[1] = 0;
        uint64_t v45 = 0;
        *(unsigned char *)(a1 + 192) = 1;
      }
      int v13 = (char *)__p[0];
      if (__p[0])
      {
        int v14 = (char *)__p[1];
        uint64_t v15 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            uint64_t v16 = (void *)*((void *)v14 - 4);
            if (v16)
            {
              *((void *)v14 - 3) = v16;
              operator delete(v16);
            }
            v14 -= 104;
          }
          while (v14 != v13);
          uint64_t v15 = __p[0];
        }
        __p[1] = v13;
        operator delete(v15);
      }
      if (v37[0])
      {
        v37[1] = v37[0];
        operator delete(v37[0]);
      }
      uint64_t v9 = *a3;
      int v8 = *((_DWORD *)v7 + 4);
    }
  }
  if (v8)
  {
    uint64_t v18 = a3[1];
    if (v9 == v18) {
      uint64_t v17 = v9;
    }
    else {
      uint64_t v17 = v18 - 376;
    }
    if (v9 == v17) {
      return a1;
    }
  }
  else
  {
    uint64_t v17 = a3[1];
    if (v9 == v17) {
      return a1;
    }
  }
  do
  {
    sub_CD8044((uint64_t)&v32, v9, 0, 0);
    unint64_t v19 = *(void *)(a1 + 8);
    if (v19 >= *(void *)(a1 + 16))
    {
      uint64_t v24 = sub_CD88E8((void **)a1, (uint64_t)&v32);
      int64x2_t v25 = v44[0];
      *(void *)(a1 + 8) = v24;
      if (v25)
      {
        v44[1] = v25;
        operator delete(v25);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v19 = v32;
      *(_OWORD *)(v19 + 8) = v33;
      long long v20 = v34;
      long long v21 = v35;
      long long v22 = *(_OWORD *)v36;
      *(_DWORD *)(v19 + 71) = *(_DWORD *)&v36[15];
      *(_OWORD *)(v19 + 56) = v22;
      *(_OWORD *)(v19 + 40) = v21;
      *(_OWORD *)(v19 + 24) = v20;
      *(void *)(v19 + 88) = 0;
      *(void *)(v19 + 96) = 0;
      *(void *)(v19 + 80) = 0;
      *(_OWORD *)(v19 + 80) = *(_OWORD *)v37;
      *(void *)(v19 + 96) = v38;
      v37[0] = 0;
      v37[1] = 0;
      uint64_t v38 = 0;
      int v23 = v39;
      *(unsigned char *)(v19 + 108) = v40;
      *(_DWORD *)(v19 + 104) = v23;
      *(_DWORD *)(v19 + 112) = v41;
      *(void *)(v19 + 120) = 0;
      *(void *)(v19 + 128) = 0;
      *(void *)(v19 + 136) = 0;
      *(void *)(v19 + 144) = 0;
      *(_OWORD *)(v19 + 120) = *(_OWORD *)__p;
      *(void *)(v19 + 136) = v43;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v43 = 0;
      *(void *)(v19 + 152) = 0;
      *(void *)(v19 + 160) = 0;
      *(_OWORD *)(v19 + 144) = *(_OWORD *)v44;
      *(void *)(v19 + 160) = v45;
      v44[0] = 0;
      v44[1] = 0;
      uint64_t v45 = 0;
      *(void *)(a1 + 8) = v19 + 168;
    }
    long long v26 = (char *)__p[0];
    if (__p[0])
    {
      long long v27 = (char *)__p[1];
      long long v28 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          int v29 = (void *)*((void *)v27 - 4);
          if (v29)
          {
            *((void *)v27 - 3) = v29;
            operator delete(v29);
          }
          v27 -= 104;
        }
        while (v27 != v26);
        long long v28 = __p[0];
      }
      __p[1] = v26;
      operator delete(v28);
    }
    if (v37[0])
    {
      v37[1] = v37[0];
      operator delete(v37[0]);
    }
    v9 += 376;
  }
  while (v9 != v17);
  return a1;
}

void sub_CD7D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_CD7E64(a10);
  sub_CD7F04(v10);
  _Unwind_Resume(a1);
}

void *sub_CD7DD0(void *a1)
{
  uint64_t v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[15];
  if (v3)
  {
    uint64_t v4 = a1[16];
    uint64_t v5 = (void *)a1[15];
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = *(void **)(v4 - 32);
        if (v6)
        {
          *(void *)(v4 - 24) = v6;
          operator delete(v6);
        }
        v4 -= 104;
      }
      while (v4 != v3);
      uint64_t v5 = (void *)a1[15];
    }
    a1[16] = v3;
    operator delete(v5);
  }
  uint64_t v7 = (void *)a1[10];
  if (v7)
  {
    a1[11] = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_CD7E64(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 168))
  {
    uint64_t v2 = *(void **)(a1 + 144);
    if (v2)
    {
      *(void *)(a1 + 152) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void *)(a1 + 120);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 128);
      uint64_t v5 = *(void **)(a1 + 120);
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = *(void **)(v4 - 32);
          if (v6)
          {
            *(void *)(v4 - 24) = v6;
            operator delete(v6);
          }
          v4 -= 104;
        }
        while (v4 != v3);
        uint64_t v5 = *(void **)(a1 + 120);
      }
      *(void *)(a1 + 128) = v3;
      operator delete(v5);
    }
    uint64_t v7 = *(void **)(a1 + 80);
    if (v7)
    {
      *(void *)(a1 + 88) = v7;
      operator delete(v7);
    }
    *(unsigned char *)(a1 + 168) = 0;
  }
  return a1;
}

uint64_t *sub_CD7F04(uint64_t *a1)
{
  if (*a1)
  {
    sub_CD86D4(a1);
    operator delete((void *)*a1);
  }
  return a1;
}

uint64_t sub_CD7F44@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "TransitNearbyScheduleLookupSnappingModule");
  char v6 = 1;
  unint64_t v4 = *(void *)(a2 + 32);
  if (v4 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_C55C14((uint64_t *)(a2 + 24), "Runtime", &v6, a1);
    *(void *)(a2 + 32) = result;
  }
  else
  {
    sub_C55DE4(a2 + 40, *(void *)(a2 + 32), "Runtime", &v6, a1);
    uint64_t result = v4 + 48;
    *(void *)(a2 + 32) = v4 + 48;
    *(void *)(a2 + 32) = v4 + 48;
  }
  return result;
}

void sub_CD8004(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CD8018(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CD8030(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CD8044(uint64_t a1, uint64_t a2, char a3, int a4)
{
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 104);
  *(void *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 0x7FFFFFFF;
  *(void *)(a1 + 24) = -1;
  *(void *)(a1 + 32) = -1;
  *(void *)(a1 + 40) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1935635296;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 71) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 100;
  *(_DWORD *)(a1 + 112) = a4;
  *(_OWORD *)(a1 + 120) = 0u;
  uint64_t v7 = a1 + 120;
  int v8 = (char **)(a1 + 144);
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  long long v9 = *(_OWORD *)(a2 + 16);
  long long v10 = *(_OWORD *)(a2 + 32);
  long long v11 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 71) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 56) = v11;
  *(_OWORD *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 24) = v9;
  if (a1 + 8 != a2) {
    sub_147D0((void *)(a1 + 80), *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
  }
  int v12 = *(_DWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = v12;
  *(unsigned char *)(a1 + 73) = a3;
  uint64_t v13 = *(void *)(a2 + 240);
  for (uint64_t i = *(void *)(a2 + 248); v13 != i; v13 += 104)
    sub_CD81EC(v7, v13);
  uint64_t v16 = *(long long **)(a2 + 264);
  for (j = *(long long **)(a2 + 272); v16 != j; uint64_t v16 = (long long *)((char *)v16 + 24))
    sub_CD82EC(v8, v16);
  return a1;
}

void sub_CD8198(_Unwind_Exception *a1)
{
  char v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 152) = v6;
    operator delete(v6);
    sub_4364F4(v3);
    uint64_t v7 = *v2;
    if (!*v2) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_4364F4(v3);
    uint64_t v7 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 88) = v7;
  operator delete(v7);
  _Unwind_Resume(a1);
}

char *sub_CD81EC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 >= *(void *)(a1 + 16))
  {
    int v14 = sub_CD8430((void **)a1, a2);
  }
  else
  {
    *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v6 = *(_OWORD *)(a2 + 32);
    long long v7 = *(_OWORD *)(a2 + 48);
    *(_DWORD *)(v4 + 63) = *(_DWORD *)(a2 + 63);
    *(_OWORD *)(v4 + 32) = v6;
    *(_OWORD *)(v4 + 48) = v7;
    *(void *)(v4 + 72) = 0;
    *(_OWORD *)(v4 + 16) = v5;
    *(void *)(v4 + 80) = 0;
    *(void *)(v4 + 88) = 0;
    long long v9 = *(unsigned char **)(a2 + 72);
    int v8 = *(unsigned char **)(a2 + 80);
    int64_t v10 = v8 - v9;
    if (v8 != v9)
    {
      if (v10 < 0) {
        sub_2E00();
      }
      long long v11 = (char *)operator new(v8 - v9);
      *(void *)(v4 + 72) = v11;
      *(void *)(v4 + 80) = v11;
      int v12 = &v11[4 * (v10 >> 2)];
      *(void *)(v4 + 88) = v12;
      memcpy(v11, v9, v10);
      *(void *)(v4 + 80) = v12;
    }
    int v13 = *(_DWORD *)(a2 + 96);
    *(unsigned char *)(v4 + 100) = *(unsigned char *)(a2 + 100);
    *(_DWORD *)(v4 + 96) = v13;
    int v14 = (char *)(v4 + 104);
    *(void *)(a1 + 8) = v4 + 104;
  }
  *(void *)(a1 + 8) = v14;
  return v14 - 104;
}

void sub_CD82CC(_Unwind_Exception *exception_object)
{
  long long v5 = *v2;
  if (*v2)
  {
    *(void *)(v3 + 80) = v5;
    operator delete(v5);
  }
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

char *sub_CD82EC(char **a1, long long *a2)
{
  long long v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    int v8 = *a1;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v8) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      int v13 = (char *)operator new(24 * v12);
    }
    else
    {
      int v13 = 0;
    }
    int v14 = &v13[24 * v9];
    *(_OWORD *)int v14 = *a2;
    *((void *)v14 + 2) = *((void *)a2 + 2);
    long long v7 = v14 + 24;
    if (v5 != v8)
    {
      do
      {
        long long v15 = *(_OWORD *)(v5 - 24);
        *((_DWORD *)v14 - 2) = *((_DWORD *)v5 - 2);
        *(_OWORD *)(v14 - 24) = v15;
        v14 -= 24;
        v5 -= 24;
      }
      while (v5 != v8);
      long long v5 = *a1;
    }
    *a1 = v14;
    a1[1] = v7;
    a1[2] = &v13[24 * v12];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *a2;
    *((void *)v5 + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long v5 = v6;
    long long v7 = v5 + 24;
  }
  a1[1] = v7;
  return v7 - 24;
}

char *sub_CD8430(void **a1, uint64_t a2)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  uint64_t v4 = 0x4EC4EC4EC4EC4EC5 * ((v2 - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x276276276276276) {
    sub_2E00();
  }
  if (0x9D89D89D89D89D8ALL * (((unsigned char *)a1[2] - v3) >> 3) > v5) {
    unint64_t v5 = 0x9D89D89D89D89D8ALL * (((unsigned char *)a1[2] - v3) >> 3);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (((unsigned char *)a1[2] - v3) >> 3)) >= 0x13B13B13B13B13BLL) {
    unint64_t v7 = 0x276276276276276;
  }
  else {
    unint64_t v7 = v5;
  }
  if (v7)
  {
    if (v7 > 0x276276276276276) {
      sub_188D718();
    }
    int v8 = (char *)operator new(104 * v7);
  }
  else
  {
    int v8 = 0;
  }
  unint64_t v9 = &v8[104 * v4];
  int v29 = &v8[104 * v7];
  long long v10 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v9 + 3) = v10;
  *(_DWORD *)(v9 + 63) = *(_DWORD *)(a2 + 63);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v11;
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = 0;
  unint64_t v12 = (char **)(v9 + 80);
  *((void *)v9 + 11) = 0;
  int v14 = *(unsigned char **)(a2 + 72);
  int v13 = *(unsigned char **)(a2 + 80);
  int64_t v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v15 < 0) {
      sub_2E00();
    }
    uint64_t v16 = (char *)operator new(v13 - v14);
    *((void *)v9 + 9) = v16;
    char *v12 = v16;
    uint64_t v17 = &v16[4 * (v15 >> 2)];
    *((void *)v9 + 11) = v17;
    memcpy(v16, v14, v15);
    char *v12 = v17;
  }
  uint64_t v18 = &v8[104 * v4];
  *((_DWORD *)v18 + 24) = *(_DWORD *)(a2 + 96);
  v18[100] = *(unsigned char *)(a2 + 100);
  unint64_t v19 = v9 + 104;
  long long v28 = v9 + 104;
  if (v2 == v3)
  {
    *a1 = v9;
    a1[1] = v19;
    a1[2] = v29;
  }
  else
  {
    do
    {
      *(_OWORD *)(v9 - 104) = *(_OWORD *)(v2 - 104);
      long long v20 = *(_OWORD *)(v2 - 88);
      long long v21 = *(_OWORD *)(v2 - 72);
      long long v22 = *(_OWORD *)(v2 - 56);
      *(_DWORD *)(v9 - 41) = *(_DWORD *)(v2 - 41);
      *(_OWORD *)(v9 - 56) = v22;
      *(_OWORD *)(v9 - 72) = v21;
      *(_OWORD *)(v9 - 88) = v20;
      *((void *)v9 - 3) = 0;
      *((void *)v9 - 2) = 0;
      *((_OWORD *)v9 - 2) = *((_OWORD *)v2 - 2);
      *((void *)v9 - 2) = *((void *)v2 - 2);
      *((void *)v2 - 4) = 0;
      *((void *)v2 - 3) = 0;
      *((void *)v2 - 2) = 0;
      int v23 = *((_DWORD *)v2 - 2);
      *(v9 - 4) = *(v2 - 4);
      *((_DWORD *)v9 - 2) = v23;
      v9 -= 104;
      v2 -= 104;
    }
    while (v2 != v3);
    uint64_t v24 = (char *)*a1;
    uint64_t v2 = (char *)a1[1];
    unint64_t v19 = v28;
    *a1 = v9;
    a1[1] = v28;
    a1[2] = v29;
    if (v2 != v24)
    {
      do
      {
        int64x2_t v25 = (void *)*((void *)v2 - 4);
        if (v25)
        {
          *((void *)v2 - 3) = v25;
          operator delete(v25);
        }
        v2 -= 104;
      }
      while (v2 != v24);
      uint64_t v2 = v24;
    }
  }
  if (v2) {
    operator delete(v2);
  }
  return v19;
}

void sub_CD86B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  unint64_t v7 = *v4;
  if (*v4)
  {
    void *v5 = v7;
    operator delete(v7);
  }
  sub_737F30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CD86D4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 168)
  {
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(void *)(i - 48);
    if (v5)
    {
      uint64_t v6 = *(void *)(i - 40);
      unint64_t v7 = *(void **)(i - 48);
      if (v6 != v5)
      {
        do
        {
          int v8 = *(void **)(v6 - 32);
          if (v8)
          {
            *(void *)(v6 - 24) = v8;
            operator delete(v8);
          }
          v6 -= 104;
        }
        while (v6 != v5);
        unint64_t v7 = *(void **)(i - 48);
      }
      *(void *)(i - 40) = v5;
      operator delete(v7);
    }
    unint64_t v9 = *(void **)(i - 88);
    if (v9)
    {
      *(void *)(i - 80) = v9;
      operator delete(v9);
    }
  }
  a1[1] = v2;
}

uint64_t sub_CD8788(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  long long v5 = *(_OWORD *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 40);
  long long v7 = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 71) = *(_DWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  unint64_t v9 = (void *)(a1 + 80);
  int v8 = *(void **)(a1 + 80);
  if (v8)
  {
    *(void *)(a1 + 88) = v8;
    operator delete(v8);
    void *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  int v10 = *(_DWORD *)(a2 + 104);
  long long v11 = (void **)(a1 + 120);
  unint64_t v12 = *(char **)(a1 + 120);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v10;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  if (v12)
  {
    int v13 = *(char **)(a1 + 128);
    int v14 = v12;
    if (v13 != v12)
    {
      do
      {
        int64_t v15 = (void *)*((void *)v13 - 4);
        if (v15)
        {
          *((void *)v13 - 3) = v15;
          operator delete(v15);
        }
        v13 -= 104;
      }
      while (v13 != v12);
      int v14 = *v11;
    }
    *(void *)(a1 + 128) = v12;
    operator delete(v14);
    char *v11 = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  uint64_t v16 = *(void **)(a1 + 144);
  if (v16)
  {
    *(void *)(a1 + 152) = v16;
    operator delete(v16);
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  return a1;
}

char *sub_CD88E8(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xCF3CF3CF3CF3CF3DLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x186186186186186) {
    sub_2E00();
  }
  if (0x9E79E79E79E79E7ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x9E79E79E79E79E7ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xCF3CF3CF3CF3CF3DLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0xC30C30C30C30C3) {
    unint64_t v5 = 0x186186186186186;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x186186186186186) {
    sub_188D718();
  }
  uint64_t v7 = 168 * v5;
  int v8 = (char *)operator new(168 * v5);
  unint64_t v9 = &v8[168 * v3];
  *(_DWORD *)unint64_t v9 = *(_DWORD *)a2;
  int v10 = &v8[v7];
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v9 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(v9 + 71) = *(_DWORD *)(a2 + 71);
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
  *((_OWORD *)v9 + 5) = *(_OWORD *)(a2 + 80);
  *((void *)v9 + 12) = *(void *)(a2 + 96);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 80) = 0;
  v9[108] = *(unsigned char *)(a2 + 108);
  *((_DWORD *)v9 + 26) = *(_DWORD *)(a2 + 104);
  *((_DWORD *)v9 + 28) = *(_DWORD *)(a2 + 112);
  *(_OWORD *)(v9 + 120) = *(_OWORD *)(a2 + 120);
  *((void *)v9 + 17) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *((void *)v9 + 19) = 0;
  *((void *)v9 + 20) = 0;
  *((_OWORD *)v9 + 9) = *(_OWORD *)(a2 + 144);
  *((void *)v9 + 20) = *(void *)(a2 + 160);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  long long v11 = v9 + 168;
  unint64_t v12 = (char *)*a1;
  int v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v13) {
      return v11;
    }
    goto LABEL_28;
  }
  uint64_t v14 = 0;
  do
  {
    int64_t v15 = &v13[v14];
    uint64_t v16 = &v9[v14];
    *((_DWORD *)v16 - 42) = *(_DWORD *)&v13[v14 - 168];
    *((_OWORD *)v16 - 10) = *(_OWORD *)&v13[v14 - 160];
    long long v17 = *(_OWORD *)&v13[v14 - 144];
    long long v18 = *(_OWORD *)&v13[v14 - 128];
    long long v19 = *(_OWORD *)&v13[v14 - 112];
    *(_DWORD *)(v16 - 97) = *(_DWORD *)&v13[v14 - 97];
    *((_OWORD *)v16 - 8) = v18;
    *((_OWORD *)v16 - 7) = v19;
    *((_OWORD *)v16 - 9) = v17;
    *(_OWORD *)(v16 - 88) = *(_OWORD *)&v13[v14 - 88];
    *((void *)v16 - 9) = *(void *)&v13[v14 - 72];
    *((void *)v15 - 11) = 0;
    *((void *)v15 - 10) = 0;
    *((void *)v15 - 9) = 0;
    int v20 = *(_DWORD *)&v13[v14 - 64];
    *(v16 - 60) = v13[v14 - 60];
    *((_DWORD *)v16 - 16) = v20;
    *((_DWORD *)v16 - 14) = *(_DWORD *)&v13[v14 - 56];
    *((_OWORD *)v16 - 3) = *(_OWORD *)&v13[v14 - 48];
    *((void *)v16 - 4) = *(void *)&v13[v14 - 32];
    *((void *)v15 - 6) = 0;
    *((void *)v15 - 5) = 0;
    *((void *)v15 - 4) = 0;
    *(_OWORD *)(v16 - 24) = *(_OWORD *)&v13[v14 - 24];
    *((void *)v16 - 1) = *(void *)&v13[v14 - 8];
    *((void *)v15 - 3) = 0;
    *((void *)v15 - 2) = 0;
    *((void *)v15 - 1) = 0;
    v14 -= 168;
  }
  while (&v13[v14] != v12);
  long long v21 = (char *)*a1;
  int v13 = (char *)a1[1];
  *a1 = &v9[v14];
  a1[1] = v11;
  a1[2] = v10;
  if (v13 != v21)
  {
    do
    {
      long long v22 = (void *)*((void *)v13 - 3);
      if (v22)
      {
        *((void *)v13 - 2) = v22;
        operator delete(v22);
      }
      uint64_t v23 = *((void *)v13 - 6);
      if (v23)
      {
        uint64_t v24 = *((void *)v13 - 5);
        int64x2_t v25 = (void *)*((void *)v13 - 6);
        if (v24 != v23)
        {
          do
          {
            long long v26 = *(void **)(v24 - 32);
            if (v26)
            {
              *(void *)(v24 - 24) = v26;
              operator delete(v26);
            }
            v24 -= 104;
          }
          while (v24 != v23);
          int64x2_t v25 = (void *)*((void *)v13 - 6);
        }
        *((void *)v13 - 5) = v23;
        operator delete(v25);
      }
      long long v27 = (void *)*((void *)v13 - 11);
      if (v27)
      {
        *((void *)v13 - 10) = v27;
        operator delete(v27);
      }
      v13 -= 168;
    }
    while (v13 != v21);
    int v13 = v21;
  }
  if (v13) {
LABEL_28:
  }
    operator delete(v13);
  return v11;
}

void sub_CD8BB4()
{
  unk_25E5C7F = 16641;
  word_25E5C68 = 65;
  byte_25E5C97 = 1;
  byte_25E5C81 = 0;
}

void sub_CD8BDC()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  long long __p = operator new(0x48uLL);
  long long v13 = xmmword_20B92A0;
  strcpy((char *)__p, "routing/transit/payment_method_lookup/TransitRegionClassification.json");
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  unint64_t v4 = sub_374CDC((uint64_t)v2, (uint64_t)&__p, (uint64_t *)&v14);
  sub_BC2BF8((uint64_t)v19, (uint64_t)v2, v4);
  uint64_t v5 = (uint64_t)v14;
  if (v14)
  {
    uint64_t v6 = v15;
    uint64_t v7 = v14;
    if ((void *)v15 != v14)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      uint64_t v7 = v14;
    }
    uint64_t v15 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  sub_BC259C((uint64_t)v19, v3, &v17);
  int v10 = operator new(0x30uLL);
  long long v11 = xmmword_20B93C0;
  strcpy((char *)v10, "routing/transit/PaymentMethodLookup.json");
  int v8 = sub_374CDC((uint64_t)v2, (uint64_t)&v10, &v17);
  memset(v9, 0, sizeof(v9));
  sub_8A6F8((char *)v9, v17, v18, 0xAAAAAAAAAAAAAAABLL * ((v18 - v17) >> 3));
  sub_A0233C((uint64_t)&__p, v2, v8);
}

void sub_CD8F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  sub_CD8FB0(v18 - 168);
  sub_CD902C(&a18);
  sub_1A668((void **)&a9);
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_1A668((void **)(v18 - 88));
  _Unwind_Resume(a1);
}

void sub_CD8F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_1A668((void **)(v20 - 168));
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xCD8F84);
}

uint64_t sub_CD8FB0(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      unint64_t v4 = *(void **)(a1 + 8);
      if (v3 != v2)
      {
        do
        {
          uint64_t v5 = *(void **)(v3 - 32);
          if (v5)
          {
            *(void *)(v3 - 24) = v5;
            operator delete(v5);
          }
          v3 -= 40;
        }
        while (v3 != v2);
        unint64_t v4 = *(void **)(a1 + 8);
      }
      *(void *)(a1 + 16) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

void *sub_CD902C(void *a1)
{
  uint64_t v2 = a1[536];
  if (v2)
  {
    uint64_t v3 = a1[537];
    unint64_t v4 = (void *)a1[536];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      unint64_t v4 = (void *)a1[536];
    }
    a1[537] = v2;
    operator delete(v4);
  }
  sub_49DA2C(a1 + 2);
  return a1;
}

void sub_CD90A8()
{
  unk_25E5CAF = 16641;
  word_25E5C98 = 65;
  byte_25E5CC7 = 1;
  byte_25E5CB1 = 0;
}

uint64_t sub_CD90D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)a2 = result;
  return result;
}

void sub_CD90E4()
{
  unk_25E5CDF = 16641;
  word_25E5CC8 = 65;
  byte_25E5CF7 = 1;
  byte_25E5CE1 = 0;
}

BOOL *sub_CD910C(BOOL *a1, void *a2)
{
  long long __p = operator new(0x20uLL);
  long long v8 = xmmword_20B91A0;
  strcpy((char *)__p, "generate_annotated_response");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  *a1 = v4;
  long long __p = operator new(0x30uLL);
  long long v8 = xmmword_20B93C0;
  strcpy((char *)__p, "populate_analytics_data_in_main_response");
  BOOL v5 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  a1[1] = v5;
  return a1;
}

void sub_CD91F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_CD9214@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_CD97C4((uint64_t)v4, a1);
  return sub_CD9254((uint64_t)v4, a2);
}

uint64_t sub_CD9254@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v28);
  sub_162C594(v23, 0, 0);
  long long v27 = 0u;
  sub_E633D0((uint64_t)v22, **(void ***)(a1 + 8));
  sub_E633D4((uint64_t)v22, *(void *)(*(void *)(a1 + 8) + 8), *(void *)(a1 + 8) + 24, (uint64_t)&v29);
  if ((v24 & 2) != 0)
  {
    BOOL v4 = 0;
  }
  else
  {
    BOOL v4 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
    if (v24) {
      BOOL v4 = (void *)*v4;
    }
  }
  if ((v30 & 2) != 0)
  {
    BOOL v5 = 0;
  }
  else
  {
    BOOL v5 = (void *)((unint64_t)v30 & 0xFFFFFFFFFFFFFFFCLL);
    if (v30) {
      BOOL v5 = (void *)*v5;
    }
  }
  if (v4 == v5) {
    sub_16323C4((uint64_t)v23, (uint64_t)&v29);
  }
  else {
    sub_1632068((uint64_t)v23, (uint64_t)&v29);
  }
  sub_162D64C(&v29);
  sub_48381C((uint64_t)&v29, *(void *)(a1 + 8) + 200);
  sub_48381C((uint64_t)v33, *(void *)(a1 + 8) + 576);
  sub_483E44(&__p, (uint64_t)&v29, 2uLL);
  sub_E089C0(&__p, (uint64_t)v23, v6);
  uint64_t v7 = __p;
  if (__p)
  {
    uint64_t v8 = (uint64_t)v20;
    unint64_t v9 = __p;
    if (v20 != __p)
    {
      do
        uint64_t v8 = sub_402C7C(v8 - 376);
      while ((void *)v8 != v7);
      unint64_t v9 = __p;
    }
    uint64_t v20 = v7;
    operator delete(v9);
  }
  sub_402C7C((uint64_t)v33);
  sub_402C7C((uint64_t)&v29);
  v25 |= 0x80000u;
  uint64_t v10 = v26;
  if (!v26)
  {
    long long v11 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
    if (v24) {
      long long v11 = (void *)*v11;
    }
    uint64_t v10 = sub_134EC50((uint64_t)v11);
    uint64_t v26 = v10;
  }
  uint64_t v12 = sub_377D04(**(void **)(a1 + 8));
  sub_E62EC8((uint64_t)&v18, v10, (const void **)(v12 + 48));
  if (!*(unsigned char *)(*(void *)(a1 + 8) + 72)) {
    sub_E6CD30((uint64_t)v23);
  }
  if (*(unsigned char *)a1) {
    operator new();
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if (*(unsigned char *)(a1 + 1))
  {
    sub_E630E8((uint64_t)v23, *(int **)(v13 + 16));
    uint64_t v13 = *(void *)(a1 + 8);
  }
  sub_DEB1B8(*(void **)v13, (double *)(v13 + 952), (uint64_t)v23);
  *((void *)&v27 + 1) = vcvtad_u64_f64(sub_72688((uint64_t)v28));
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v29);
    sub_188FC78(&v29, (uint64_t)"TransitResponseBuilderModule took ", 34);
    uint64_t v14 = (void *)std::ostream::operator<<();
    sub_188FC78(v14, (uint64_t)" ms", 3);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v21 < 0) {
      operator delete(__p);
    }
    if (v32 < 0) {
      operator delete(v31);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  *(unsigned char *)a2 = 1;
  sub_C6B2B4(a2 + 8, (uint64_t)v23);
  unint64_t v15 = v27;
  *(void *)&long long v27 = 0;
  *(_OWORD *)(a2 + 568) = __PAIR128__(*((unint64_t *)&v27 + 1), v15);
  sub_CD9930((uint64_t)v22);
  uint64_t v16 = v27;
  *(void *)&long long v27 = 0;
  if (v16)
  {
    sub_162D64C(v16);
    operator delete();
  }
  return sub_162D64C(v23);
}

void sub_CD96B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&STACK[0x3E8]);
  sub_CD9930((uint64_t)&a17);
  sub_CD98D8((uint64_t)&a62);
  _Unwind_Resume(a1);
}

uint64_t sub_CD97C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v12 = 0;
  uint64_t v13 = operator new(0x38uLL);
  long long v14 = xmmword_20B9A10;
  strcpy((char *)v13, "routing/modules/TransitResponseBuilderModule.json");
  long long __p = 0;
  long long v11 = 0;
  BOOL v5 = sub_374CDC(v4, (uint64_t)&v13, (uint64_t *)&__p);
  sub_CD910C((BOOL *)a1, v5);
  double v6 = (void **)__p;
  if (__p)
  {
    uint64_t v7 = v11;
    uint64_t v8 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      uint64_t v8 = __p;
    }
    long long v11 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13);
  }
  *(void *)(a1 + 8) = a2;
  return a1;
}

void sub_CD98B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_CD98D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 560);
  *(void *)(a1 + 560) = 0;
  if (v2)
  {
    sub_162D64C(v2);
    operator delete();
  }

  return sub_162D64C(a1);
}

uint64_t sub_CD9930(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 336);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 344);
    uint64_t v4 = *(void **)(a1 + 336);
    if (v3 == v2)
    {
LABEL_11:
      *(void *)(a1 + 344) = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      if (*(char *)(v3 - 9) < 0)
      {
        operator delete(*(void **)(v3 - 32));
        if (*(char *)(v3 - 41) < 0) {
LABEL_9:
        }
          operator delete(*(void **)(v3 - 64));
      }
      else if (*(char *)(v3 - 41) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 72;
      if (v3 == v2)
      {
        uint64_t v4 = *(void **)(a1 + 336);
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  BOOL v5 = *(void **)(a1 + 312);
  if (v5)
  {
    do
    {
      double v6 = (void *)*v5;
      operator delete(v5);
      BOOL v5 = v6;
    }
    while (v6);
  }
  uint64_t v7 = *(void **)(a1 + 296);
  *(void *)(a1 + 296) = 0;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = *(void *)(a1 + 272);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 280);
    uint64_t v10 = *(void **)(a1 + 272);
    if (v9 != v8)
    {
      do
        uint64_t v9 = sub_4F2FF8(v9 - 496);
      while (v9 != v8);
      uint64_t v10 = *(void **)(a1 + 272);
    }
    *(void *)(a1 + 280) = v8;
    operator delete(v10);
  }
  long long v11 = *(char **)(a1 + 248);
  if (v11)
  {
    do
    {
      uint64_t v17 = *(char **)v11;
      char v18 = (void *)*((void *)v11 + 5);
      if (v18)
      {
        *((void *)v11 + 6) = v18;
        operator delete(v18);
      }
      if (v11[39] < 0) {
        operator delete(*((void **)v11 + 2));
      }
      operator delete(v11);
      long long v11 = v17;
    }
    while (v17);
  }
  uint64_t v12 = *(void **)(a1 + 232);
  *(void *)(a1 + 232) = 0;
  if (v12) {
    operator delete(v12);
  }
  if ((*(char *)(a1 + 199) & 0x80000000) == 0)
  {
    uint64_t v13 = *(void **)(a1 + 152);
    if (!v13) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  operator delete(*(void **)(a1 + 176));
  uint64_t v13 = *(void **)(a1 + 152);
  if (v13)
  {
LABEL_26:
    *(void *)(a1 + 160) = v13;
    operator delete(v13);
  }
LABEL_27:
  long long v14 = *(void **)(a1 + 120);
  if (v14)
  {
    *(void *)(a1 + 128) = v14;
    operator delete(v14);
  }
  unint64_t v15 = *(void **)(a1 + 56);
  if (v15)
  {
    *(void *)(a1 + 64) = v15;
    operator delete(v15);
  }
  return a1;
}

double sub_CD9ABC()
{
  byte_25E5D0F = 1;
  word_25E5CF8 = 65;
  byte_25E5D27 = 1;
  word_25E5D10 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E5DB8 = 0u;
  *(_OWORD *)&qword_25E5DC8 = 0u;
  dword_25E5DD8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E5DB8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E5DB8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E5DB8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E5DB8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E5D3F = 8;
  strcpy((char *)&qword_25E5D28, "any_mode");
  byte_25E5D57 = 7;
  strcpy((char *)&dword_25E5D40, "cycling");
  byte_25E5D6F = 7;
  strcpy((char *)&dword_25E5D58, "driving");
  byte_25E5D87 = 7;
  strcpy((char *)&dword_25E5D70, "walking");
  qword_25E5D90 = 0;
  qword_25E5D98 = 0;
  qword_25E5D88 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E5D88 = (uint64_t)v0;
  qword_25E5D90 = (uint64_t)(v0 + 9);
  qword_25E5D98 = (uint64_t)(v0 + 9);
  qword_25E5DA0 = 0;
  qword_25E5DA8 = 0;
  unk_25E5DB0 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25E5DA8 = (uint64_t)(v1 + 9);
  unk_25E5DB0 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E5DA0 = (uint64_t)v1;
  return result;
}

void sub_CD9D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E5DC8) {
    sub_20AF950((void **)qword_25E5DC8);
  }
  long long v37 = (void *)xmmword_25E5DB8;
  *(void *)&xmmword_25E5DB8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_CD9E24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v19);
  sub_1353BF0(v16, 0, 0);
  double v18 = 0.0;
  char v4 = sub_497CC0(&v15, *(void *)(a1 + 8));
  sub_E6D084((void **)v4, (uint64_t **)a1, (uint64_t)&v11);
  if ((v17 & 2) != 0)
  {
    int v5 = 0;
  }
  else
  {
    int v5 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
    if (v17) {
      int v5 = (void *)*v5;
    }
  }
  if ((v12 & 2) != 0)
  {
    double v6 = 0;
  }
  else
  {
    double v6 = (void *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFFCLL);
    if (v12) {
      double v6 = (void *)*v6;
    }
  }
  if (v5 == v6) {
    sub_13550D0((uint64_t)v16, (uint64_t)&v11);
  }
  else {
    sub_135501C((uint64_t)v16, (uint64_t)&v11);
  }
  sub_1354024(&v11);
  double v18 = sub_72688((uint64_t)v19);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v11);
    sub_188FC78(&v11, (uint64_t)"TransitRouteUpdateResponseBuilderModule took ", 45);
    char v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" ms", 3);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v10 < 0) {
      operator delete(__p);
    }
    if (v14 < 0) {
      operator delete(v13);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  *(unsigned char *)a2 = 1;
  sub_CDA0FC(a2 + 8, (uint64_t)v16);
  *(double *)(a2 + 128) = v18;
  return sub_1354024(v16);
}

void sub_CDA070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_1354024(v15 - 200);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_1354024(v15 - 200);
  _Unwind_Resume(a1);
}

void sub_CDA0E8(_Unwind_Exception *a1)
{
  sub_1354024(v1 - 200);
  _Unwind_Resume(a1);
}

uint64_t sub_CDA0FC(uint64_t a1, uint64_t a2)
{
  sub_1353BF0(a1, 0, 0);
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if ((v4 & 2) != 0)
    {
      int v5 = 0;
    }
    else
    {
      int v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      if (v4) {
        int v5 = (void *)*v5;
      }
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if ((v6 & 2) != 0)
    {
      char v7 = 0;
    }
    else
    {
      char v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        char v7 = (void *)*v7;
      }
    }
    if (v5 == v7) {
      sub_13550D0(a1, a2);
    }
    else {
      sub_135501C(a1, a2);
    }
  }
  return a1;
}

void sub_CDA19C()
{
  unk_25E5DF7 = 16641;
  word_25E5DE0 = 65;
  byte_25E5E0F = 1;
  byte_25E5DF9 = 0;
}